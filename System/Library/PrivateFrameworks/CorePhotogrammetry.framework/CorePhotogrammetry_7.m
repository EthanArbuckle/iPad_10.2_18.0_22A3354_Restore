uint64_t sub_23969A3C8(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_OWORD *)(a1 + 64);
  v2 = *(_OWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 96);
  sub_239695FB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 648), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 656), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v1, *((uint64_t *)&v1 + 1), v2, *((uint64_t *)&v2 + 1), v3, *((uint64_t *)&v3 + 1), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    v5,
    v6,
    v7,
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v8,
    v9,
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v10,
    v11,
    v12,
    v13,
    v14,
    v15,
    *(_QWORD *)(a1 + 304),
    *(_QWORD *)(a1 + 312),
    *(_QWORD *)(a1 + 320),
    *(_QWORD *)(a1 + 328),
    *(_QWORD *)(a1 + 336),
    *(_QWORD *)(a1 + 344),
    v16,
    v17,
    v18,
    v19,
    v20,
    v21,
    v22,
    v23,
    v24,
    *(_QWORD *)(a1 + 424),
    *(_QWORD *)(a1 + 432),
    *(_QWORD *)(a1 + 440),
    *(_QWORD *)(a1 + 448),
    v25,
    v26,
    v27,
    v28,
    v29,
    v30);
  return 0;
}

uint64_t sub_23969A4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int64x2_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64x2_t *v40;
  uint64_t v41;
  int64x2_t *v42;
  unint64_t v43;
  int64x2_t *v44;
  int64x2_t *v45;
  const double *i64;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64x2_t *v55;
  uint64_t v56;
  int64x2_t *v57;
  unint64_t v58;
  int64x2_t *v59;
  int64x2_t *v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int64x2_t *v87;
  uint64_t v88;
  int64x2_t *v89;
  unint64_t v90;
  int64x2_t *v91;
  int64x2_t *v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  _QWORD *v104;
  float64x2x4_t v110;

  v14 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v15 = v14[8];
  v16 = v14[6];
  v17 = v14[4];
  v18 = v14[2];
  v19 = *v14;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(_QWORD *)(a3 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v19 >= 1)
  {
    v22 = 0;
    v23 = *(unsigned int *)(v21 + 4);
    v24 = (__int128 *)(v20 + 32);
    v25 = 72 * (int)v23;
    v26 = v20 + 32;
    do
    {
      if ((int)v23 >= 1)
      {
        v27 = 0;
        v28 = v24;
        v29 = v26;
        do
        {
          if (v27 < v22)
          {
            v30 = *(v28 - 2);
            v31 = *(v28 - 1);
            v32 = *v28;
            v33 = v28[1];
            *(_QWORD *)&v34 = *(_QWORD *)v28;
            *((_QWORD *)&v34 + 1) = *((_QWORD *)v28 + 3);
            v35 = *((_QWORD *)v28 + 4);
            *((_QWORD *)&v33 + 1) = *((_QWORD *)v28 - 3);
            *((_QWORD *)&v30 + 1) = *((_QWORD *)v28 - 1);
            *(_OWORD *)(v29 - 32) = v30;
            *(_OWORD *)(v29 - 16) = v33;
            *((_QWORD *)&v31 + 1) = *((_QWORD *)&v32 + 1);
            *(_OWORD *)v29 = v34;
            *(_OWORD *)(v29 + 16) = v31;
            *(_QWORD *)(v29 + 32) = v35;
          }
          ++v27;
          v29 += 72;
          v28 = (__int128 *)((char *)v28 + v25);
        }
        while (v23 != v27);
      }
      ++v22;
      v26 += v25;
      v24 = (__int128 *)((char *)v24 + 72);
    }
    while (v22 != v19);
  }
  *(_QWORD *)(a2 + 24) |= 1uLL;
  v36 = *(int64x2_t **)(a4 + 16);
  v37 = *(_QWORD *)(a5 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v18 >= 1)
  {
    v38 = 0;
    v39 = *(unsigned int *)(v37 + 4);
    v40 = v36 + 4;
    v41 = (uint64_t)(int)v39 << 7;
    v42 = v36 + 4;
    do
    {
      if ((int)v39 >= 1)
      {
        v43 = 0;
        v44 = v40;
        v45 = v42;
        do
        {
          if (v43 < v38)
          {
            i64 = (const double *)v45[-4].i64;
            v110 = vld4q_f64(i64);
            v47 = v45[1];
            v48 = vzip1q_s64(*v45, v45[2]);
            v49.i64[0] = vdupq_laneq_s64(*v45, 1).u64[0];
            v49.i64[1] = v45[2].i64[1];
            v50 = vzip1q_s64(v47, v45[3]);
            v47.i64[0] = vdupq_laneq_s64(v47, 1).u64[0];
            v47.i64[1] = v45[3].i64[1];
            v44[-4] = (int64x2_t)v110.val[0];
            v44[-3] = v48;
            v44[-2] = (int64x2_t)v110.val[1];
            v44[-1] = v49;
            *v44 = (int64x2_t)v110.val[2];
            v44[1] = v50;
            v44[2] = (int64x2_t)v110.val[3];
            v44[3] = v47;
          }
          ++v43;
          v45 = (int64x2_t *)((char *)v45 + v41);
          v44 += 8;
        }
        while (v39 != v43);
      }
      ++v38;
      v42 += 8;
      v40 = (int64x2_t *)((char *)v40 + v41);
    }
    while (v38 != v18);
  }
  *(_QWORD *)(a4 + 24) |= 1uLL;
  v51 = *(int64x2_t **)(a6 + 16);
  v52 = *(_QWORD *)(a7 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v17 >= 1)
  {
    v53 = 0;
    v54 = *(unsigned int *)(v52 + 4);
    v55 = v51 + 9;
    v56 = 288 * (int)v54;
    v57 = v51 + 9;
    do
    {
      if ((int)v54 >= 1)
      {
        v58 = 0;
        v59 = v55;
        v60 = v57;
        do
        {
          if (v58 < v53)
          {
            v61 = v60[-9];
            v62 = v60[-8];
            v63 = v60[-7];
            v64 = v60[-6];
            v65 = v60[-5];
            v66 = v60[-4];
            v67 = v60[-3];
            v68 = v60[-2];
            v69 = v60[-1];
            v70 = v60[3];
            v71 = v60[4];
            v72 = v60[5];
            v73 = vzip1q_s64(v67, *v60);
            v74 = vzip1q_s64(v70, v60[6]);
            v67.i64[0] = vdupq_laneq_s64(v67, 1).u64[0];
            v67.i64[1] = v60->i64[1];
            v75.i64[0] = vdupq_laneq_s64(v70, 1).u64[0];
            v75.i64[1] = v60[6].i64[1];
            v76 = vzip1q_s64(v68, v60[1]);
            v77 = vzip1q_s64(v71, v60[7]);
            v68.i64[0] = vdupq_laneq_s64(v68, 1).u64[0];
            v68.i64[1] = v60[1].i64[1];
            v78.i64[0] = vdupq_laneq_s64(v71, 1).u64[0];
            v78.i64[1] = v60[7].i64[1];
            v79 = vzip1q_s64(v69, v60[2]);
            v80 = vzip1q_s64(v72, v60[8]);
            v69.i64[0] = vdupq_laneq_s64(v69, 1).u64[0];
            v69.i64[1] = v60[2].i64[1];
            v81.i64[0] = vdupq_laneq_s64(v72, 1).u64[0];
            v81.i64[1] = v60[8].i64[1];
            v59[-9] = vzip1q_s64(v61, v64);
            v59[-8] = v73;
            v59[-7] = v74;
            v59[-6] = vzip2q_s64(v61, v64);
            v59[-5] = v67;
            v59[-4] = v75;
            v59[-3] = vzip1q_s64(v62, v65);
            v59[-2] = v76;
            v59[-1] = v77;
            *v59 = vzip2q_s64(v62, v65);
            v59[1] = v68;
            v59[2] = v78;
            v59[3] = vzip1q_s64(v63, v66);
            v59[4] = v79;
            v59[5] = v80;
            v59[6] = vzip2q_s64(v63, v66);
            v59[7] = v69;
            v59[8] = v81;
          }
          ++v58;
          v60 = (int64x2_t *)((char *)v60 + v56);
          v59 += 18;
        }
        while (v54 != v58);
      }
      ++v53;
      v57 += 18;
      v55 = (int64x2_t *)((char *)v55 + v56);
    }
    while (v53 != v17);
  }
  *(_QWORD *)(a6 + 24) |= 1uLL;
  v82 = *(int64x2_t **)(a8 + 16);
  v83 = *(_QWORD *)(a9 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v16 >= 1)
  {
    v84 = *(int *)(v83 + 4);
    if ((int)v84 >= 1)
    {
      v85 = 0;
      v86 = *(unsigned int *)(v83 + 4);
      v87 = v82 + 1;
      v88 = 32 * v84;
      v89 = v82 + 1;
      do
      {
        v90 = 0;
        v91 = v87;
        v92 = v89;
        do
        {
          if (v90 < v85)
          {
            v93 = v91[-1];
            v94 = vzip1q_s64(v93, *v91);
            v95 = vzip2q_s64(v93, *v91);
            v92[-1] = v94;
            *v92 = v95;
          }
          ++v90;
          v92 += 2;
          v91 = (int64x2_t *)((char *)v91 + v88);
        }
        while (v86 != v90);
        ++v85;
        v89 = (int64x2_t *)((char *)v89 + v88);
        v87 += 2;
      }
      while (v85 != v16);
    }
  }
  *(_QWORD *)(a8 + 24) |= 1uLL;
  v96 = *(_QWORD **)(a10 + 16);
  v97 = *(_QWORD *)(a11 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v15 >= 1)
  {
    v98 = *(int *)(v97 + 4);
    if ((int)v98 >= 1)
    {
      v99 = 0;
      v100 = *(unsigned int *)(v97 + 4);
      v101 = 8 * v98;
      v102 = v96;
      do
      {
        v103 = 0;
        v104 = v96;
        do
        {
          if (v103 < v99)
            v102[v103] = *v104;
          ++v103;
          v104 = (_QWORD *)((char *)v104 + v101);
        }
        while (v100 != v103);
        ++v99;
        v102 = (_QWORD *)((char *)v102 + v101);
        ++v96;
      }
      while (v99 != v15);
    }
  }
  *(_QWORD *)(a10 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969A9BC(uint64_t *a1)
{
  sub_23969A4F8(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return 0;
}

uint64_t sub_23969A9FC(uint64_t *a1)
{
  sub_2396823E4(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AA1C(uint64_t *a1)
{
  sub_2396823E4(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AA3C(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AA5C(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AA7C(uint64_t *a1)
{
  sub_239682828(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AA9C(uint64_t *a1)
{
  sub_239682828(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AABC(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AADC(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AAFC(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AB1C(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AB3C(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AB5C(uint64_t *a1)
{
  sub_2396833F0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AB7C(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969AB9C(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  float64x2_t *v5;
  float64x2_t v6;
  float64x2_t *v7;
  long double v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  int64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  double v41;
  double v42;
  double v45;
  float64x2_t v46;
  long double v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  double v51;
  float64x2_t v52;
  double v53;
  float64x2_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float64x2_t v59;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;

  v3 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v4 = *v3;
  v5 = *(float64x2_t **)(a2 + 16);
  halide_copy_to_host();
  if ((int)v4 >= 1)
  {
    v7 = v5 + 2;
    __asm { FMOV            V22.2D, #0.5 }
    v70 = _Q22;
    do
    {
      v36 = v7[-2];
      v35 = v7[-1];
      v37 = v7[1];
      v38 = v7[2].f64[0];
      v39 = vsubq_f64(v37, v35);
      _Q7 = vmulq_f64(vsubq_f64(v36, v35), _Q22);
      v41 = vmuld_lane_f64(0.5, vsubq_f64(*v7, v37), 1);
      v42 = vmuld_n_f64(0.5, v39.f64[0]);
      v71.f64[0] = v41;
      v71.f64[1] = v42;
      _D8 = _Q7.f64[1];
      __asm { FMLA            D12, D8, V7.D[1] }
      v45 = vaddq_f64(v36, *v7).f64[0] + v38;
      if (v45 <= 2.999712)
      {
        if (v45 <= -0.98)
        {
          v62 = v7[-1];
          v64 = v7[1];
          v67 = v7[-2];
          v69 = *v7;
          v18.f64[0] = asin(sqrt(_D12));
          v52.f64[0] = (3.14159265 - v18.f64[0]) * (3.14159265 - v18.f64[0]) / (1.5 - v45 * 0.5);
          v18.f64[0] = (v69.f64[0] - v45 * 0.5 + 0.5) * v52.f64[0];
          v53 = v52.f64[0] * (v67.f64[0] - v45 * 0.5 + 0.5);
          v54.f64[0] = v52.f64[0] * (v38 - v45 * 0.5 + 0.5);
          if (v18.f64[0] >= v53)
          {
            if (v54.f64[0] < v18.f64[0])
            {
              v58 = sqrt(v18.f64[0]);
              if (v42 >= 0.0)
                v49 = v58;
              else
                v49 = -v58;
              v56 = 1.0 / v49;
              v46.f64[0] = 1.0 / v49 * vmuld_lane_f64(v52.f64[0], vaddq_f64(v62, v67), 1) * 0.5;
              v57 = vmuld_lane_f64(v52.f64[0], vaddq_f64(v64, v69), 1);
LABEL_22:
              v18.f64[0] = v56 * v57 * 0.5;
              _Q22 = v70;
              goto LABEL_10;
            }
            v18.f64[0] = sqrt(v54.f64[0]);
            if (_D8 < 0.0)
              v18.f64[0] = -v18.f64[0];
            v54.f64[0] = 1.0 / v18.f64[0];
            v59.f64[0] = v62.f64[0];
            v59.f64[1] = v69.f64[1];
          }
          else
          {
            if (v54.f64[0] < v53)
            {
              v55 = sqrt(v53);
              v46.f64[0] = -v55;
              if (v41 >= 0.0)
                v46.f64[0] = v55;
              v56 = 1.0 / v46.f64[0];
              v49 = 1.0 / v46.f64[0] * (v52.f64[0] * (v7[-1].f64[1] + v7[-2].f64[1])) * 0.5;
              v57 = vmuld_n_f64(v52.f64[0], vaddq_f64(v64, v62).f64[0]);
              goto LABEL_22;
            }
            v18.f64[0] = sqrt(v54.f64[0]);
            if (_D8 < 0.0)
              v18.f64[0] = -v18.f64[0];
            v54.f64[0] = 1.0 / v18.f64[0];
            v59.f64[0] = v62.f64[0];
            v59.f64[1] = v7->f64[1];
          }
          _Q22 = v70;
          v46 = vmulq_f64(vmulq_n_f64(vaddq_f64(v64, v59), vmulq_f64(v54, v52).f64[0]), v70);
        }
        else
        {
          v66 = _Q7;
          v47 = acos(v45 * 0.5 + -0.5);
          _Q22 = v70;
          v48.f64[0] = v47 / sqrt(_D12);
          v18 = vmulq_laneq_f64(v48, v66, 1);
          v46 = vmulq_n_f64(v71, v48.f64[0]);
        }
      }
      else
      {
        v39.f64[0] = _D12 * (_D12 * (_D12 * 0.0446428571 + 0.075) + 0.166666667) + 1.0;
        v18 = vmulq_laneq_f64(v39, _Q7, 1);
        v46 = vmulq_n_f64(v71, v39.f64[0]);
      }
      v49 = v46.f64[1];
LABEL_10:
      v50.f64[0] = v46.f64[0] + v46.f64[0];
      v50.f64[1] = v49 + v49;
      v18.f64[0] = v18.f64[0] + v18.f64[0];
      v15 = vmulq_f64(v50, _Q22);
      v16 = vmulq_f64(v18, _Q22);
      v51 = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v15.f64[1], v15, 1), v15.f64[0], v15.f64[0]), v16.f64[0], v16.f64[0]);
      v17 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16.f64[0], 0);
      v17.f64[0] = 0.0;
      if (v51 >= 0.000000263391344)
      {
        v13 = sqrt(v51);
        v65 = v17;
        v68 = v16;
        v63 = v15;
        v14.f64[0] = sin(v13) / v13;
        v61 = v14;
        v18.f64[0] = cos(v13);
        v6 = v61;
        v15 = v63;
        v17 = v65;
        v16 = v68;
        _Q22 = v70;
        v18.f64[0] = (1.0 - v18.f64[0]) / v51;
      }
      else
      {
        v18.f64[0] = v51 * (v51 * 0.00138888889 + -0.0416666667) + 0.5;
        v6.f64[0] = v51 * (v51 * (v51 * -0.000198412698 + 0.00833333333) + -0.166666667) + 1.0;
      }
      v19 = (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL);
      v20 = vnegq_f64((float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 8uLL));
      *(_QWORD *)&v21.f64[0] = vdupq_laneq_s64((int64x2_t)v15, 1).u64[0];
      v22 = (float64x2_t)vzip1q_s64((int64x2_t)0, (int64x2_t)v15);
      v21.f64[1] = -v15.f64[0];
      v23 = (float64x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 8uLL);
      *(_QWORD *)&v24 = *(_OWORD *)&vmulq_f64(v20, v18);
      v25 = vmulq_n_f64(v17, v18.f64[0]);
      v26 = vmulq_n_f64(v23, v18.f64[0]);
      v27 = vmulq_laneq_f64(v18, v22, 1);
      v28 = vmulq_n_f64(v21, v18.f64[0]);
      v29 = vmlaq_n_f64(vmulq_n_f64(v26, v16.f64[0]), v28, v20.f64[0]);
      v30 = vmlaq_n_f64(vmulq_laneq_f64(v25, v20, 1), v28, v15.f64[0]);
      v28.f64[0] = vmuld_lane_f64(v24, v20, 1);
      v31 = vmlaq_n_f64(vmulq_n_f64(v25, v19.f64[0]), v26, -v15.f64[0]);
      v19.f64[0] = vmlad_n_f64(vmuld_n_f64(v19.f64[0], v24), -v15.f64[0], v27.f64[0]);
      v32 = vmlaq_f64((float64x2_t)0, v20, v6);
      __asm { FMOV            V2.2D, #1.0 }
      v34 = (int64x2_t)vaddq_f64(v30, vmlaq_n_f64((float64x2_t)vextq_s8((int8x16_t)0, (int8x16_t)0x3FF0000000000000uLL, 8uLL), v23, v6.f64[0]));
      v7[-2] = vaddq_f64(v29, vmlaq_n_f64((float64x2_t)xmmword_239EC6840, v17, v6.f64[0]));
      v7[-1] = (float64x2_t)vzip1q_s64((int64x2_t)vmlaq_f64(v32, v27, v16), v34);
      *(int8x16_t *)v7 = vextq_s8((int8x16_t)v34, (int8x16_t)vaddq_f64(v28, vmlaq_laneq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)0x3FF0000000000000uLL, 1), v6, v22, 1)), 8uLL);
      v7[1] = vmlaq_n_f64(v31, v21, v6.f64[0]);
      *(_QWORD *)&v7[2].f64[0] = *(_OWORD *)&vaddq_f64(v19, _Q2);
      v7 = (float64x2_t *)((char *)v7 + 72);
      --v4;
    }
    while (v4);
  }
  *(_QWORD *)(a2 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969B080(uint64_t *a1)
{
  sub_23969AB9C(*a1, a1[1]);
  return 0;
}

uint64_t sub_23969B09C(uint64_t *a1)
{
  sub_239678B88(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_23969B0DC(uint64_t *a1)
{
  sub_239679094(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_23969B11C(uint64_t *a1)
{
  sub_239679504(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_23969B15C(uint64_t *a1)
{
  sub_239679998(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_23969B19C(uint64_t *a1)
{
  sub_239679EC4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return 0;
}

uint64_t sub_23969B1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v12;
  uint64_t v13;
  int extent;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  double *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double *v26;
  int *v27;
  float64x2_t v28;
  int v29;
  unsigned int v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  double v35;
  float64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v12 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v13 = *v12;
  v39 = *(_QWORD *)(a2 + 16);
  extent = _gc_buffer_get_extent();
  v15 = _gc_buffer_get_extent();
  v16 = _gc_buffer_get_extent();
  if (extent != 3 || v15 != v16)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a6 + 24) |= 1uLL;
  }
  v37 = *(float64_t **)(a3 + 16);
  v38 = *(_QWORD *)(a6 + 16);
  v17 = *(_QWORD *)(a4 + 16);
  v18 = *(_QWORD *)(a5 + 16);
  v19 = _gc_buffer_get_extent();
  v20 = _gc_buffer_get_extent();
  v21 = _gc_buffer_get_extent();
  if (v19 != 2 || v20 != v21)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a7 + 24) |= 1uLL;
  }
  v22 = *(double **)(a7 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v13 >= 1)
  {
    v23.f64[0] = *v37;
    v26 = (double *)(v38 + 8);
    v27 = (int *)(v39 + 4);
    v28.f64[0] = *v37;
    v28.f64[1] = *v37;
    do
    {
      v30 = *(v27 - 1);
      v29 = *v27;
      if (*v27 >> 30 == 3)
        v29 = *v27 + 0x40000000;
      v31 = (float64x2_t *)(v18 + 24 * v29);
      v32 = *v31;
      if (v30 >> 30 == 3)
        v30 += 0x40000000;
      v24.f64[0] = v31[1].f64[0];
      v33 = (float64x2_t *)(v17 + 24 * (int)v30);
      v25.f64[0] = v33[1].f64[0];
      v34 = vmulq_f64(vsubq_f64(v32, *v33), v28);
      v24 = vmulq_f64(vsubq_f64(v24, v25), v23);
      *(float64x2_t *)(v26 - 1) = v34;
      v35 = vmlad_n_f64(*v26 * *v26, v34.f64[0], v34.f64[0]);
      v26[1] = v24.f64[0];
      *v22 = vmlad_n_f64(v35, v24.f64[0], v24.f64[0]);
      v22 += 2;
      v26 += 3;
      v27 += 2;
      --v13;
    }
    while (v13);
  }
  *(_QWORD *)(a7 + 24) |= 1uLL;
  *(_QWORD *)(a6 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969B44C(uint64_t *a1)
{
  sub_23969B1C4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return 0;
}

uint64_t sub_23969B474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unsigned int *v17;
  int extent;
  int v19;
  float64x2_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  unsigned int *v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v46;
  double v47;
  double v48;
  float64x2_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  float64x2_t v54;
  float64x2_t *v56;
  float64x2_t v57;
  double v58;
  float64x2_t *v62;
  uint64_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  float64x2_t v72;
  unsigned int v73;
  float64x2_t v74;
  unsigned int v75;
  double *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;

  v17 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v80 = *v17;
  v78 = *(_QWORD *)(a2 + 16);
  v77 = *(double **)(a3 + 16);
  LODWORD(a3) = _gc_buffer_get_extent();
  extent = _gc_buffer_get_extent();
  v19 = _gc_buffer_get_extent();
  if ((_DWORD)a3 != 2 || extent != v19)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a12 + 24) |= 1uLL;
  }
  v21 = *(float64x2_t **)(a12 + 16);
  v81 = *(double **)(a4 + 16);
  v79 = *(_QWORD *)(a5 + 16);
  v22 = *(_QWORD *)(a6 + 16);
  v23 = *(_QWORD *)(a7 + 16);
  v24 = *(_QWORD *)(a8 + 16);
  v25 = *(_QWORD *)(a9 + 16);
  v26 = *(_QWORD *)(a10 + 16);
  v27 = *(_QWORD *)(a11 + 16);
  v28 = _gc_buffer_get_extent();
  v29 = _gc_buffer_get_extent();
  v30 = _gc_buffer_get_extent();
  if (v28 != 2 || v29 != v30)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a13 + 24) |= 1uLL;
  }
  v31 = *(_QWORD *)(a13 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v80 >= 1)
  {
    v33 = 0;
    v34 = 0;
    v35 = *v77;
    v36 = v35 * v35;
    v37 = (unsigned int *)(v78 + 12);
    v38 = v21;
    do
    {
      v50 = *v37;
      v51 = v37[1];
      v52 = v51 + 0x40000000;
      if (v51 >> 30 != 3)
        v52 = v37[1];
      v53 = v26 + 72 * (int)v52;
      v54 = *(float64x2_t *)(v53 + 16);
      _Q5 = *(int8x16_t *)(v53 + 32);
      if (v50 >> 30 == 3)
        v50 += 0x40000000;
      v56 = (float64x2_t *)(v24 + 24 * (int)v50);
      v57 = *v56;
      v58 = v56[1].f64[0];
      _Q16 = vmulq_f64(v54, *v56);
      _Q17.f64[0] = v56->f64[1];
      __asm { FMLA            D16, D17, V5.D[1] }
      _Q16.f64[0] = _Q16.f64[0] + *(double *)(v53 + 64) * v58;
      v62 = (float64x2_t *)(v27 + 24 * (int)v52);
      _Q17.f64[0] = v62[1].f64[0];
      v63 = *(_OWORD *)&vaddq_f64(_Q16, _Q17);
      if (fabs(*(double *)&v63) <= 2.22044605e-16)
      {
        v38->f64[0] = 0.0;
        v38->f64[1] = 0.0;
        v39.f64[0] = 0.0;
        v40 = v38;
        v41 = v33;
      }
      else
      {
        _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v53, v57.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v54, _Q5, 8uLL), v57, 1), *(float64x2_t *)(v53 + 48), v58);
        v64 = vdivq_f64(vaddq_f64(_Q17, *v62), (float64x2_t)vdupq_lane_s64(v63, 0));
        v65 = vmulq_f64(v64, v64);
        v66 = vaddq_f64(v65, (float64x2_t)vdupq_laneq_s64((int64x2_t)v65, 1));
        v67 = vaddvq_f64(v65);
        v68 = *(v37 - 2);
        v69 = *(v37 - 1);
        v70 = v37[2];
        v71 = *(v37 - 3);
        if (v68 >> 30 == 3)
          v68 += 0x40000000;
        if (v69 >> 30 == 3)
          v69 += 0x40000000;
        v72 = *(float64x2_t *)(v23 + 16 * (int)v69);
        v73 = v70 + 0x40000000;
        if (v70 >> 30 != 3)
          v73 = v37[2];
        v74 = *(float64x2_t *)(v25 + 16 * (int)v73);
        v75 = v71 + 0x40000000;
        if (v71 >> 30 != 3)
          v75 = *(v37 - 3);
        v39 = vmulq_n_f64(vsubq_f64(v72, vmlaq_n_f64(v74, v64, *(double *)(v79 + 8 * (int)v75)+ v67* vmlad_n_f64(*(double *)(v22 + 24 * (int)v68) + v67 * *(double *)(v22 + 24 * (int)v68 + 8), *(double *)(v22 + 24 * (int)v68 + 16), vmulq_f64(v66, v66).f64[0])* *(double *)(v79 + 8 * (int)v75))), *v81);
        v41 = 2 * v34;
        v40 = &v21[v34];
        *v38 = v39;
      }
      v42 = 8 * v41;
      v43 = *(double *)((char *)v21->f64 + (v42 | 8)) * *(double *)((char *)v21->f64 + (v42 | 8))
          + v39.f64[0] * v39.f64[0];
      v44 = sqrt(v43);
      _NF = v43 < v36;
      if (v43 >= v36)
        v43 = v44 * v35 + v44 * v35 - v36;
      *(double *)(v31 + v42) = v43;
      if (_NF)
        v46 = 1.0;
      else
        v46 = 0.0;
      if (_NF)
        v47 = 0.0;
      else
        v47 = v35;
      v48 = sqrt(v46 + v47 / v44);
      v49 = vmulq_n_f64(*v40, v48);
      *(double *)(v31 + (v42 | 8)) = v48;
      *v40 = v49;
      ++v34;
      v33 += 2;
      ++v38;
      v37 += 6;
    }
    while (2 * v80 != v33);
  }
  *(_QWORD *)(a13 + 24) |= 1uLL;
  *(_QWORD *)(a12 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969B904(uint64_t *a1)
{
  sub_23969B474(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  return 0;
}

uint64_t sub_23969B944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unsigned int *v18;
  int extent;
  int v20;
  float64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  unsigned int *v38;
  float64x2_t *v39;
  float64x2_t v40;
  float64x2_t *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v47;
  double v48;
  double v49;
  float64x2_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  float64x2_t v55;
  float64x2_t *v57;
  float64x2_t v58;
  double v59;
  float64x2_t *v63;
  uint64_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  float64x2_t v73;
  unsigned int v74;
  float64x2_t v75;
  unsigned int v76;
  double *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double *v82;

  v18 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v81 = *v18;
  v79 = *(_QWORD *)(a2 + 16);
  v78 = *(double **)(a3 + 16);
  LODWORD(a3) = _gc_buffer_get_extent();
  extent = _gc_buffer_get_extent();
  v20 = _gc_buffer_get_extent();
  if ((_DWORD)a3 != 2 || extent != v20)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a12 + 24) |= 1uLL;
  }
  v22 = *(float64x2_t **)(a12 + 16);
  v82 = *(double **)(a4 + 16);
  v80 = *(_QWORD *)(a5 + 16);
  v23 = *(_QWORD *)(a6 + 16);
  v24 = *(_QWORD *)(a7 + 16);
  v25 = *(_QWORD *)(a8 + 16);
  v26 = *(_QWORD *)(a9 + 16);
  v27 = *(_QWORD *)(a10 + 16);
  v28 = *(_QWORD *)(a11 + 16);
  v29 = _gc_buffer_get_extent();
  v30 = _gc_buffer_get_extent();
  v31 = _gc_buffer_get_extent();
  if (v29 != 2 || v30 != v31)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a13 + 24) |= 1uLL;
  }
  v32 = *(_QWORD *)(a13 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v81 >= 1)
  {
    v34 = 0;
    v35 = 0;
    v36 = *v78;
    v37 = v36 * v36;
    v38 = (unsigned int *)(v79 + 12);
    v39 = v22;
    do
    {
      v51 = *v38;
      v52 = v38[1];
      v53 = v52 + 0x40000000;
      if (v52 >> 30 != 3)
        v53 = v38[1];
      v54 = v27 + 72 * (int)v53;
      v55 = *(float64x2_t *)(v54 + 16);
      _Q5 = *(int8x16_t *)(v54 + 32);
      if (v51 >> 30 == 3)
        v51 += 0x40000000;
      v57 = (float64x2_t *)(v25 + 24 * (int)v51);
      v58 = *v57;
      v59 = v57[1].f64[0];
      _Q16 = vmulq_f64(v55, *v57);
      _Q17.f64[0] = v57->f64[1];
      __asm { FMLA            D16, D17, V5.D[1] }
      _Q16.f64[0] = _Q16.f64[0] + *(double *)(v54 + 64) * v59;
      v63 = (float64x2_t *)(v28 + 24 * (int)v53);
      _Q17.f64[0] = v63[1].f64[0];
      v64 = *(_OWORD *)&vaddq_f64(_Q16, _Q17);
      if (fabs(*(double *)&v64) <= 2.22044605e-16)
      {
        v39->f64[0] = 0.0;
        v39->f64[1] = 0.0;
        v40.f64[0] = 0.0;
        v41 = v39;
        v42 = v34;
      }
      else
      {
        _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v54, v58.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v55, _Q5, 8uLL), v58, 1), *(float64x2_t *)(v54 + 48), v59);
        v65 = vdivq_f64(vaddq_f64(_Q17, *v63), (float64x2_t)vdupq_lane_s64(v64, 0));
        v66 = vmulq_f64(v65, v65);
        v67 = vaddq_f64(v66, (float64x2_t)vdupq_laneq_s64((int64x2_t)v66, 1));
        v68 = vaddvq_f64(v66);
        v69 = *(v38 - 2);
        v70 = *(v38 - 1);
        v71 = v38[2];
        v72 = *(v38 - 3);
        if (v69 >> 30 == 3)
          v69 += 0x40000000;
        if (v70 >> 30 == 3)
          v70 += 0x40000000;
        v73 = *(float64x2_t *)(v24 + 16 * (int)v70);
        v74 = v71 + 0x40000000;
        if (v71 >> 30 != 3)
          v74 = v38[2];
        v75 = *(float64x2_t *)(v26 + 16 * (int)v74);
        v76 = v72 + 0x40000000;
        if (v72 >> 30 != 3)
          v76 = *(v38 - 3);
        v40 = vmulq_n_f64(vsubq_f64(v73, vmlaq_n_f64(v75, v65, *(double *)(v80 + 8 * (int)v76)+ v68* vmlad_n_f64(*(double *)(v23 + 24 * (int)v69) + v68 * *(double *)(v23 + 24 * (int)v69 + 8), *(double *)(v23 + 24 * (int)v69 + 16), vmulq_f64(v67, v67).f64[0])* *(double *)(v80 + 8 * (int)v76))), *v82);
        v42 = 2 * v35;
        v41 = &v22[v35];
        *v39 = v40;
      }
      v43 = 8 * v42;
      v44 = *(double *)((char *)v22->f64 + (v43 | 8)) * *(double *)((char *)v22->f64 + (v43 | 8))
          + v40.f64[0] * v40.f64[0];
      v45 = sqrt(v44);
      _NF = v44 < v37;
      if (v44 >= v37)
        v44 = v45 * v36 + v45 * v36 - v37;
      *(double *)(v32 + v43) = v44;
      if (_NF)
        v47 = 1.0;
      else
        v47 = 0.0;
      if (_NF)
        v48 = 0.0;
      else
        v48 = v36;
      v49 = sqrt(v47 + v48 / v45);
      v50 = vmulq_n_f64(*v41, v49);
      *(double *)(v32 + (v43 | 8)) = v49;
      *v41 = v50;
      ++v35;
      v34 += 2;
      ++v39;
      v38 += 6;
    }
    while (2 * v81 != v34);
  }
  *(_QWORD *)(a13 + 24) |= 1uLL;
  *(_QWORD *)(a12 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969BDD4(uint64_t *a1)
{
  sub_23969B944(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  return 0;
}

uint64_t sub_23969BE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v12;
  uint64_t v13;
  int extent;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  double *v22;
  const double *v23;
  float64x2_t v24;
  float64x2_t *v25;
  int *v26;
  int v27;
  unsigned int v28;
  float64x2_t *v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  const double *v34;
  float64x2_t *v35;
  uint64_t v36;

  v12 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v13 = *v12;
  v36 = *(_QWORD *)(a2 + 16);
  extent = _gc_buffer_get_extent();
  v15 = _gc_buffer_get_extent();
  v16 = _gc_buffer_get_extent();
  if (extent != 4 || v15 != v16)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a6 + 24) |= 1uLL;
  }
  v34 = *(const double **)(a3 + 16);
  v35 = *(float64x2_t **)(a6 + 16);
  v17 = *(_QWORD *)(a4 + 16);
  v18 = *(_QWORD *)(a5 + 16);
  v19 = _gc_buffer_get_extent();
  v20 = _gc_buffer_get_extent();
  v21 = _gc_buffer_get_extent();
  if (v19 != 2 || v20 != v21)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a7 + 24) |= 1uLL;
  }
  v22 = *(double **)(a7 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v13 >= 1)
  {
    v23 = v34;
    v24 = vld1q_dup_f64(v23);
    v25 = v35 + 1;
    v26 = (int *)(v36 + 4);
    do
    {
      v28 = *(v26 - 1);
      v27 = *v26;
      if (*v26 >> 30 == 3)
        v27 = *v26 + 0x40000000;
      v29 = (float64x2_t *)(v18 + 32 * v27);
      if (v28 >> 30 == 3)
        v28 += 0x40000000;
      v30 = (float64x2_t *)(v17 + 32 * (int)v28);
      v31 = vmulq_f64(vsubq_f64(*v29, *v30), v24);
      v32 = vmulq_f64(vsubq_f64(v29[1], v30[1]), v24);
      v25[-1] = v31;
      *v25 = v32;
      *v22 = vmlad_n_f64(vmlad_n_f64(v25[-1].f64[1] * v25[-1].f64[1], v31.f64[0], v31.f64[0]), v32.f64[0], v32.f64[0])
           + v25->f64[1] * v25->f64[1];
      v22 += 2;
      v25 += 2;
      v26 += 2;
      --v13;
    }
    while (v13);
  }
  *(_QWORD *)(a7 + 24) |= 1uLL;
  *(_QWORD *)(a6 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969C094(uint64_t *a1)
{
  sub_23969BE14(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return 0;
}

uint64_t sub_23969C0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unsigned int *v17;
  uint64_t v18;
  int extent;
  int v20;
  float64x2_t *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  unsigned int *v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v41;
  double v42;
  double v43;
  float64x2_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  float64x2_t v48;
  float64x2_t *v51;
  double v52;
  float64x2_t v53;
  float64x2_t *v57;
  float64x2_t v58;
  long double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  float64x2_t *v68;
  unsigned int v69;
  unsigned int v70;
  double v71;
  double v72;
  unsigned int v73;
  float64x2_t v74;
  unsigned int v75;
  float64x2_t v76;
  unsigned int v77;
  double v78;
  double *v80;
  uint64_t v81;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double *v89;
  double v90;
  unsigned int v91;
  float64x2_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v17 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v18 = *v17;
  v80 = *(double **)(a3 + 16);
  v81 = *(_QWORD *)(a2 + 16);
  LODWORD(a3) = _gc_buffer_get_extent();
  extent = _gc_buffer_get_extent();
  v20 = _gc_buffer_get_extent();
  if ((_DWORD)a3 != 2 || extent != v20)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a12 + 24) |= 1uLL;
  }
  v22 = *(float64x2_t **)(a12 + 16);
  v88 = *(_QWORD *)(a5 + 16);
  v89 = *(double **)(a4 + 16);
  v86 = *(_QWORD *)(a7 + 16);
  v87 = *(_QWORD *)(a6 + 16);
  v85 = *(_QWORD *)(a9 + 16);
  v94 = *(_QWORD *)(a10 + 16);
  v95 = *(_QWORD *)(a8 + 16);
  v93 = *(_QWORD *)(a11 + 16);
  v23 = _gc_buffer_get_extent();
  v24 = _gc_buffer_get_extent();
  v25 = _gc_buffer_get_extent();
  if (v23 != 2 || v24 != v25)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a13 + 24) |= 1uLL;
  }
  v26 = *(_QWORD *)(a13 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v18 >= 1)
  {
    v27 = 0;
    v28 = 0;
    v29 = *v80;
    v30 = v29 * v29;
    v31 = 2 * v18;
    v32 = (unsigned int *)(v81 + 12);
    v33 = v22;
    do
    {
      v46 = *v32;
      v45 = v32[1];
      if (v45 >> 30 == 3)
        v45 += 0x40000000;
      v47 = v94 + 72 * (int)v45;
      v48 = *(float64x2_t *)(v47 + 16);
      _Q2 = *(int8x16_t *)(v47 + 32);
      _Q3 = *(float64x2_t *)(v47 + 48);
      if (v46 >> 30 == 3)
        v46 += 0x40000000;
      v51 = (float64x2_t *)(v95 + 24 * (int)v46);
      v52 = v51[1].f64[0];
      v53 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v47, v51->f64[0]), (float64x2_t)vextq_s8((int8x16_t)v48, _Q2, 8uLL), *v51, 1), _Q3, v52);
      _Q1 = vmulq_f64(v48, *v51);
      _Q3.f64[0] = v51->f64[1];
      __asm { FMLA            D1, D3, V2.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + *(double *)(v47 + 64) * v52;
      v57 = (float64x2_t *)(v93 + 24 * (int)v45);
      _Q3.f64[0] = v57[1].f64[0];
      v58 = vaddq_f64(v53, *v57);
      *(_QWORD *)&v59 = *(_OWORD *)&vaddq_f64(_Q1, _Q3);
      v60 = fabs(v59);
      v61 = vmlad_n_f64(vmuld_lane_f64(v58.f64[1], v58, 1), v58.f64[0], v58.f64[0]);
      v62 = sqrt(v61);
      v63 = fabs(v62);
      v64 = v63 <= 2.22044605e-16 || v60 <= 2.22044605e-16;
      if (v64 || v61 <= 0.0 || fmin(v63, v60) <= 2.22044605e-16)
      {
        v33->f64[0] = 0.0;
        v33->f64[1] = 0.0;
        v34.f64[0] = 0.0;
        v35 = v33;
        v36 = v27;
      }
      else
      {
        *(_QWORD *)&v58.f64[1] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
        v92 = v58;
        v65 = *(v32 - 2);
        v66 = *(v32 - 1);
        v67 = v26;
        v68 = v22;
        v69 = v32[2];
        v70 = *(v32 - 3);
        if (v65 >> 30 == 3)
          v65 += 0x40000000;
        v91 = v65;
        v90 = v59;
        v71 = atan2(v62, v59);
        v73 = v66 + 0x40000000;
        if (v66 >> 30 != 3)
          v73 = v66;
        v74 = *(float64x2_t *)(v86 + 16 * (int)v73);
        v75 = v69 + 0x40000000;
        if (v69 >> 30 != 3)
          v75 = v69;
        v22 = v68;
        v26 = v67;
        v76 = *(float64x2_t *)(v85 + 16 * (int)v75);
        v77 = v70 + 0x40000000;
        if (v70 >> 30 != 3)
          v77 = v70;
        v72 = v71 * (v71 * v71);
        v78 = (v71
             + v72 * *(double *)(v87 + 32 * (int)v91)
             + v71 * v71 * v72 * *(double *)(v87 + 32 * (int)v91 + 8)
             + v71 * v71 * (v71 * v71 * v72) * *(double *)(v87 + 32 * (int)v91 + 16)
             + *(double *)(v87 + 32 * (int)v91 + 24) * (v71 * v71 * (v71 * v71 * (v71 * v71 * v72))))
            / v62;
        if (v61 < 0.0000000149011612)
          v78 = 1.0 / v90;
        v34 = vmulq_n_f64(vsubq_f64(v74, vmlaq_n_f64(v76, v92, *(double *)(v88 + 8 * (int)v77) * v78)), *v89);
        v36 = 2 * v28;
        v35 = &v22[v28];
        *v33 = v34;
      }
      v37 = 8 * v36;
      v38 = *(double *)((char *)v22->f64 + (v37 | 8)) * *(double *)((char *)v22->f64 + (v37 | 8))
          + v34.f64[0] * v34.f64[0];
      v39 = sqrt(v38);
      _NF = v38 < v30;
      if (v38 >= v30)
        v38 = v39 * v29 + v39 * v29 - v30;
      *(double *)(v26 + v37) = v38;
      if (_NF)
        v41 = 1.0;
      else
        v41 = 0.0;
      if (_NF)
        v42 = 0.0;
      else
        v42 = v29;
      v43 = sqrt(v41 + v42 / v39);
      v44 = vmulq_n_f64(*v35, v43);
      *(double *)(v26 + (v37 | 8)) = v43;
      *v35 = v44;
      ++v28;
      v27 += 2;
      ++v33;
      v32 += 6;
    }
    while (v31 != v27);
  }
  *(_QWORD *)(a13 + 24) |= 1uLL;
  *(_QWORD *)(a12 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969C60C(uint64_t *a1)
{
  sub_23969C0BC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  return 0;
}

uint64_t sub_23969C64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unsigned int *v18;
  int extent;
  int v20;
  float64x2_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  unsigned int *v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v41;
  double v42;
  double v43;
  float64x2_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  float64x2_t v48;
  float64x2_t *v51;
  double v52;
  float64x2_t v53;
  float64x2_t *v57;
  float64x2_t v58;
  long double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  BOOL v64;
  uint64_t v65;
  float64x2_t *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  double v71;
  double v72;
  unsigned int v73;
  float64x2_t v74;
  unsigned int v75;
  float64x2_t v76;
  unsigned int v77;
  double v78;
  double *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double *v89;
  double v90;
  unsigned int v91;
  float64x2_t v93;
  uint64_t v94;
  uint64_t v95;

  v18 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v82 = *v18;
  v80 = *(double **)(a3 + 16);
  v81 = *(_QWORD *)(a2 + 16);
  LODWORD(a3) = _gc_buffer_get_extent();
  extent = _gc_buffer_get_extent();
  v20 = _gc_buffer_get_extent();
  if ((_DWORD)a3 != 2 || extent != v20)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a12 + 24) |= 1uLL;
  }
  v22 = *(float64x2_t **)(a12 + 16);
  v88 = *(_QWORD *)(a5 + 16);
  v89 = *(double **)(a4 + 16);
  v86 = *(_QWORD *)(a7 + 16);
  v87 = *(_QWORD *)(a6 + 16);
  v23 = *(_QWORD *)(a8 + 16);
  v85 = *(_QWORD *)(a9 + 16);
  v94 = *(_QWORD *)(a11 + 16);
  v95 = *(_QWORD *)(a10 + 16);
  v24 = _gc_buffer_get_extent();
  v25 = _gc_buffer_get_extent();
  v26 = _gc_buffer_get_extent();
  if (v24 != 2 || v25 != v26)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a13 + 24) |= 1uLL;
  }
  v27 = *(_QWORD *)(a13 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v82 >= 1)
  {
    v28 = 0;
    v29 = 0;
    v30 = *v80;
    v31 = v30 * v30;
    v32 = (unsigned int *)(v81 + 12);
    v33 = v22;
    v84 = v23;
    do
    {
      v46 = *v32;
      v45 = v32[1];
      if (v45 >> 30 == 3)
        v45 += 0x40000000;
      v47 = v95 + 72 * (int)v45;
      v48 = *(float64x2_t *)(v47 + 16);
      _Q2 = *(int8x16_t *)(v47 + 32);
      _Q3 = *(float64x2_t *)(v47 + 48);
      if (v46 >> 30 == 3)
        v46 += 0x40000000;
      v51 = (float64x2_t *)(v23 + 24 * (int)v46);
      v52 = v51[1].f64[0];
      v53 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v47, v51->f64[0]), (float64x2_t)vextq_s8((int8x16_t)v48, _Q2, 8uLL), *v51, 1), _Q3, v52);
      _Q1 = vmulq_f64(v48, *v51);
      _Q3.f64[0] = v51->f64[1];
      __asm { FMLA            D1, D3, V2.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + *(double *)(v47 + 64) * v52;
      v57 = (float64x2_t *)(v94 + 24 * (int)v45);
      _Q3.f64[0] = v57[1].f64[0];
      v58 = vaddq_f64(v53, *v57);
      *(_QWORD *)&v59 = *(_OWORD *)&vaddq_f64(_Q1, _Q3);
      v60 = fabs(v59);
      v61 = vmlad_n_f64(vmuld_lane_f64(v58.f64[1], v58, 1), v58.f64[0], v58.f64[0]);
      v62 = sqrt(v61);
      v63 = fabs(v62);
      v64 = v63 <= 2.22044605e-16 || v60 <= 2.22044605e-16;
      if (v64 || v61 <= 0.0 || fmin(v63, v60) <= 2.22044605e-16)
      {
        v33->f64[0] = 0.0;
        v33->f64[1] = 0.0;
        v34.f64[0] = 0.0;
        v35 = v33;
        v36 = v28;
      }
      else
      {
        *(_QWORD *)&v58.f64[1] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
        v93 = v58;
        v65 = v27;
        v66 = v22;
        v67 = *(v32 - 2);
        v68 = *(v32 - 1);
        v69 = v32[2];
        v70 = *(v32 - 3);
        if (v67 >> 30 == 3)
          v67 += 0x40000000;
        v91 = v67;
        v90 = v59;
        v71 = atan2(v62, v59);
        v73 = v68 + 0x40000000;
        if (v68 >> 30 != 3)
          v73 = v68;
        v22 = v66;
        v27 = v65;
        v74 = *(float64x2_t *)(v86 + 16 * (int)v73);
        v75 = v69 + 0x40000000;
        if (v69 >> 30 != 3)
          v75 = v69;
        v23 = v84;
        v76 = *(float64x2_t *)(v85 + 16 * (int)v75);
        v77 = v70 + 0x40000000;
        if (v70 >> 30 != 3)
          v77 = v70;
        v72 = v71 * (v71 * v71);
        v78 = (v71
             + v72 * *(double *)(v87 + 32 * (int)v91)
             + v71 * v71 * v72 * *(double *)(v87 + 32 * (int)v91 + 8)
             + v71 * v71 * (v71 * v71 * v72) * *(double *)(v87 + 32 * (int)v91 + 16)
             + *(double *)(v87 + 32 * (int)v91 + 24) * (v71 * v71 * (v71 * v71 * (v71 * v71 * v72))))
            / v62;
        if (v61 < 0.0000000149011612)
          v78 = 1.0 / v90;
        v34 = vmulq_n_f64(vsubq_f64(v74, vmlaq_n_f64(v76, v93, *(double *)(v88 + 8 * (int)v77) * v78)), *v89);
        v36 = 2 * v29;
        v35 = &v22[v29];
        *v33 = v34;
      }
      v37 = 8 * v36;
      v38 = *(double *)((char *)v22->f64 + (v37 | 8)) * *(double *)((char *)v22->f64 + (v37 | 8))
          + v34.f64[0] * v34.f64[0];
      v39 = sqrt(v38);
      _NF = v38 < v31;
      if (v38 >= v31)
        v38 = v39 * v30 + v39 * v30 - v31;
      *(double *)(v27 + v37) = v38;
      if (_NF)
        v41 = 1.0;
      else
        v41 = 0.0;
      if (_NF)
        v42 = 0.0;
      else
        v42 = v30;
      v43 = sqrt(v41 + v42 / v39);
      v44 = vmulq_n_f64(*v35, v43);
      *(double *)(v27 + (v37 | 8)) = v43;
      *v35 = v44;
      ++v29;
      v28 += 2;
      ++v33;
      v32 += 6;
    }
    while (2 * v82 != v28);
  }
  *(_QWORD *)(a13 + 24) |= 1uLL;
  *(_QWORD *)(a12 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969CBA4(uint64_t *a1)
{
  sub_23969C64C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  return 0;
}

uint64_t sub_23969CBE4(uint64_t *a1)
{
  sub_23967B9A0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return 0;
}

uint64_t sub_23969CC0C(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v17 = *(_OWORD *)(a1 + 480);
  v16 = *(_OWORD *)(a1 + 464);
  v15 = *(_OWORD *)(a1 + 448);
  v14 = *(_OWORD *)(a1 + 432);
  v13 = *(_OWORD *)(a1 + 416);
  v12 = *(_OWORD *)(a1 + 400);
  v11 = *(_OWORD *)(a1 + 384);
  v10 = *(_OWORD *)(a1 + 368);
  v9 = *(_OWORD *)(a1 + 352);
  v8 = *(_OWORD *)(a1 + 336);
  v7 = *(_OWORD *)(a1 + 320);
  v6 = *(_OWORD *)(a1 + 304);
  v5 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 256);
  v2 = *(_OWORD *)(a1 + 240);
  sub_23967BC20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v2,
    *((uint64_t *)&v2 + 1),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    *(_QWORD *)(a1 + 496));
  return 0;
}

uint64_t sub_23969CE60(uint64_t *a1)
{
  sub_239680104(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return 0;
}

uint64_t sub_23969CE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  double *v13;
  float64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int *v20;
  float64x2_t v21;
  int v22;
  unsigned int v23;
  float64x2_t *v24;
  float64x2_t v25;
  unsigned int v26;
  float64x2_t *v27;
  float64x2_t v28;
  uint64_t v30;

  v11 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v12 = *v11;
  v30 = *(_QWORD *)(a2 + 16);
  v13 = *(double **)(a6 + 16);
  v14 = *(float64_t **)(a3 + 16);
  v15 = *(_QWORD *)(a4 + 16);
  v16 = *(_QWORD *)(a5 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v12 >= 1)
  {
    v17.f64[0] = *v14;
    v20 = (int *)(v30 + 4);
    v21.f64[0] = *v14;
    v21.f64[1] = *v14;
    do
    {
      v23 = *(v20 - 1);
      v22 = *v20;
      if (*v20 >> 30 == 3)
        v22 = *v20 + 0x40000000;
      v24 = (float64x2_t *)(v16 + 24 * v22);
      v25 = *v24;
      v18.f64[0] = v24[1].f64[0];
      if (v23 >> 30 == 3)
        v26 = v23 + 0x40000000;
      else
        v26 = *(v20 - 1);
      v27 = (float64x2_t *)(v15 + 24 * (int)v26);
      v19.f64[0] = v27[1].f64[0];
      v28 = vmulq_f64(vsubq_f64(v25, *v27), v21);
      v18 = vmulq_f64(vsubq_f64(v18, v19), v17);
      *v13++ = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v28.f64[1], v28, 1), v28.f64[0], v28.f64[0]), v18.f64[0], v18.f64[0]);
      v20 += 2;
      --v12;
    }
    while (v12);
  }
  *(_QWORD *)(a6 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969CFDC(uint64_t *a1)
{
  sub_23969CE84(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return 0;
}

uint64_t sub_23969D000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const double *v28;
  unsigned int *v29;
  float64x2_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t *v37;
  float64x2_t v38;
  double v39;
  float64x2_t *v45;
  double v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  double v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  double v56;
  double v57;
  double v58;
  double *v61;
  const double *v62;
  uint64_t v63;

  v17 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v18 = *v17;
  v61 = *(double **)(a3 + 16);
  v19 = *(double **)(a12 + 16);
  v62 = *(const double **)(a4 + 16);
  v63 = *(_QWORD *)(a2 + 16);
  v20 = *(_QWORD *)(a5 + 16);
  v21 = *(_QWORD *)(a6 + 16);
  v22 = *(_QWORD *)(a7 + 16);
  v23 = *(_QWORD *)(a8 + 16);
  v24 = *(_QWORD *)(a9 + 16);
  v25 = *(_QWORD *)(a10 + 16);
  v26 = *(_QWORD *)(a11 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v18 >= 1)
  {
    v28 = v62;
    v29 = (unsigned int *)(v63 + 12);
    v30 = vld1q_dup_f64(v28);
    do
    {
      v32 = *v29;
      v31 = v29[1];
      v33 = v31 + 0x40000000;
      if (v31 >> 30 != 3)
        v33 = v29[1];
      v34 = v25 + 72 * (int)v33;
      v35 = *(float64x2_t *)(v34 + 16);
      _Q3 = *(int8x16_t *)(v34 + 32);
      if (v32 >> 30 == 3)
        v32 += 0x40000000;
      v37 = (float64x2_t *)(v23 + 24 * (int)v32);
      v38 = *v37;
      v39 = v37[1].f64[0];
      _Q1 = vmulq_f64(v35, *v37);
      _Q6.f64[0] = v37->f64[1];
      __asm { FMLA            D1, D6, V3.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + *(double *)(v34 + 64) * v39;
      v45 = (float64x2_t *)(v26 + 24 * (int)v33);
      _Q6.f64[0] = v45[1].f64[0];
      _Q6 = vaddq_f64(_Q1, _Q6);
      v46 = fabs(_Q6.f64[0]);
      v47 = *(v29 - 2);
      v48 = *(v29 - 1);
      v49 = v29[2];
      v50 = *(v29 - 3);
      if (v47 >> 30 == 3)
        v47 += 0x40000000;
      if (v48 >> 30 == 3)
        v48 += 0x40000000;
      if (v49 >> 30 == 3)
        v49 += 0x40000000;
      if (v50 >> 30 == 3)
        v50 += 0x40000000;
      v51 = 0.0;
      if (v46 > 2.22044605e-16)
      {
        v52 = vdivq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v34, v38.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v35, _Q3, 8uLL), v38, 1), *(float64x2_t *)(v34 + 48), v39), *v45), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q6.f64[0], 0));
        v53 = vmulq_f64(v52, v52);
        v54 = vaddq_f64(v53, (float64x2_t)vdupq_laneq_s64((int64x2_t)v53, 1));
        v53.f64[0] = vaddvq_f64(v53);
        _Q6 = vmlaq_n_f64(*(float64x2_t *)(v24 + 16 * (int)v49), v52, *(double *)(v20 + 8 * (int)v50)+ v53.f64[0]* vmlad_n_f64(*(double *)(v21 + 24 * (int)v47) + v53.f64[0] * *(double *)(v21 + 24 * (int)v47 + 8), *(double *)(v21 + 24 * (int)v47 + 16), vmulq_f64(v54, v54).f64[0])* *(double *)(v20 + 8 * (int)v50));
        v55 = vmulq_f64(v30, vsubq_f64(*(float64x2_t *)(v22 + 16 * (int)v48), _Q6));
        v56 = vaddvq_f64(vmulq_f64(v55, v55));
        if (v56 > 0.0)
        {
          v57 = *v61 * *v61;
          v58 = sqrt(v56);
          v51 = v58 * *v61 + v58 * *v61 - v57;
          if (v56 < v57)
            v51 = v56;
        }
      }
      *v19++ = v51;
      v29 += 6;
      --v18;
    }
    while (v18);
  }
  *(_QWORD *)(a12 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969D2F8(uint64_t *a1)
{
  sub_23969D000(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_23969D338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const double *v29;
  unsigned int *v30;
  float64x2_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t *v38;
  float64x2_t v39;
  double v40;
  float64x2_t *v46;
  double v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  double v58;
  double v59;
  double *v62;
  const double *v63;
  uint64_t v64;

  v18 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v19 = *v18;
  v62 = *(double **)(a3 + 16);
  v20 = *(double **)(a12 + 16);
  v63 = *(const double **)(a4 + 16);
  v64 = *(_QWORD *)(a2 + 16);
  v21 = *(_QWORD *)(a5 + 16);
  v22 = *(_QWORD *)(a6 + 16);
  v23 = *(_QWORD *)(a7 + 16);
  v24 = *(_QWORD *)(a8 + 16);
  v25 = *(_QWORD *)(a9 + 16);
  v26 = *(_QWORD *)(a10 + 16);
  v27 = *(_QWORD *)(a11 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v19 >= 1)
  {
    v29 = v63;
    v30 = (unsigned int *)(v64 + 12);
    v31 = vld1q_dup_f64(v29);
    do
    {
      v33 = *v30;
      v32 = v30[1];
      v34 = v32 + 0x40000000;
      if (v32 >> 30 != 3)
        v34 = v30[1];
      v35 = v26 + 72 * (int)v34;
      v36 = *(float64x2_t *)(v35 + 16);
      _Q3 = *(int8x16_t *)(v35 + 32);
      if (v33 >> 30 == 3)
        v33 += 0x40000000;
      v38 = (float64x2_t *)(v24 + 24 * (int)v33);
      v39 = *v38;
      v40 = v38[1].f64[0];
      _Q1 = vmulq_f64(v36, *v38);
      _Q6.f64[0] = v38->f64[1];
      __asm { FMLA            D1, D6, V3.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + *(double *)(v35 + 64) * v40;
      v46 = (float64x2_t *)(v27 + 24 * (int)v34);
      _Q6.f64[0] = v46[1].f64[0];
      _Q6 = vaddq_f64(_Q1, _Q6);
      v47 = fabs(_Q6.f64[0]);
      v48 = *(v30 - 2);
      v49 = *(v30 - 1);
      v50 = v30[2];
      v51 = *(v30 - 3);
      if (v48 >> 30 == 3)
        v48 += 0x40000000;
      if (v49 >> 30 == 3)
        v49 += 0x40000000;
      if (v50 >> 30 == 3)
        v50 += 0x40000000;
      if (v51 >> 30 == 3)
        v51 += 0x40000000;
      v52 = 0.0;
      if (v47 > 2.22044605e-16)
      {
        v53 = vdivq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v35, v39.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v36, _Q3, 8uLL), v39, 1), *(float64x2_t *)(v35 + 48), v40), *v46), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q6.f64[0], 0));
        v54 = vmulq_f64(v53, v53);
        v55 = vaddq_f64(v54, (float64x2_t)vdupq_laneq_s64((int64x2_t)v54, 1));
        v54.f64[0] = vaddvq_f64(v54);
        _Q6 = vmlaq_n_f64(*(float64x2_t *)(v25 + 16 * (int)v50), v53, *(double *)(v21 + 8 * (int)v51)+ v54.f64[0]* vmlad_n_f64(*(double *)(v22 + 24 * (int)v48) + v54.f64[0] * *(double *)(v22 + 24 * (int)v48 + 8), *(double *)(v22 + 24 * (int)v48 + 16), vmulq_f64(v55, v55).f64[0])* *(double *)(v21 + 8 * (int)v51));
        v56 = vmulq_f64(v31, vsubq_f64(*(float64x2_t *)(v23 + 16 * (int)v49), _Q6));
        v57 = vaddvq_f64(vmulq_f64(v56, v56));
        if (v57 > 0.0)
        {
          v58 = *v62 * *v62;
          v59 = sqrt(v57);
          v52 = v59 * *v62 + v59 * *v62 - v58;
          if (v57 < v58)
            v52 = v57;
        }
      }
      *v20++ = v52;
      v30 += 6;
      --v19;
    }
    while (v19);
  }
  *(_QWORD *)(a12 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969D630(uint64_t *a1)
{
  sub_23969D338(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_23969D670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v11;
  uint64_t v12;
  double *v13;
  const double *v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  int *v18;
  int v19;
  unsigned int v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  unsigned int v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v29;

  v11 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v12 = *v11;
  v29 = *(_QWORD *)(a2 + 16);
  v13 = *(double **)(a6 + 16);
  v14 = *(const double **)(a3 + 16);
  v15 = *(_QWORD *)(a4 + 16);
  v16 = *(_QWORD *)(a5 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v12 >= 1)
  {
    v17 = vld1q_dup_f64(v14);
    v18 = (int *)(v29 + 4);
    do
    {
      v20 = *(v18 - 1);
      v19 = *v18;
      if (*v18 >> 30 == 3)
        v19 = *v18 + 0x40000000;
      v21 = (float64x2_t *)(v16 + 32 * v19);
      v22 = *v21;
      v23 = v21[1];
      if (v20 >> 30 == 3)
        v24 = v20 + 0x40000000;
      else
        v24 = *(v18 - 1);
      v25 = (float64x2_t *)(v15 + 32 * (int)v24);
      v26 = vmulq_f64(vsubq_f64(v22, *v25), v17);
      v27 = vmulq_f64(vsubq_f64(v23, v25[1]), v17);
      *v13++ = v26.f64[1] * v26.f64[1] + v26.f64[0] * v26.f64[0] + v27.f64[0] * v27.f64[0] + v27.f64[1] * v27.f64[1];
      v18 += 2;
      --v12;
    }
    while (v12);
  }
  *(_QWORD *)(a6 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969D7CC(uint64_t *a1)
{
  sub_23969D670(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return 0;
}

uint64_t sub_23969D7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v16;
  uint64_t v17;
  double *v18;
  const double *v19;
  float64x2_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  float64x2_t v25;
  float64x2_t *v28;
  double v29;
  float64x2_t v30;
  float64x2_t *v36;
  float64x2_t v37;
  long double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  double v48;
  double v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  double v53;
  double v54;
  double v55;
  float64x2_t v57;
  double v58;
  double v59;
  double v60;
  double *v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const double *v74;
  float64x2_t v75;
  uint64_t v76;
  double v77;

  v16 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v17 = *v16;
  v76 = *(_QWORD *)(a2 + 16);
  v65 = *(double **)(a3 + 16);
  v18 = *(double **)(a12 + 16);
  v73 = *(_QWORD *)(a6 + 16);
  v74 = *(const double **)(a4 + 16);
  v68 = *(_QWORD *)(a7 + 16);
  v69 = *(_QWORD *)(a5 + 16);
  v67 = *(_QWORD *)(a9 + 16);
  v71 = *(_QWORD *)(a10 + 16);
  v72 = *(_QWORD *)(a8 + 16);
  v70 = *(_QWORD *)(a11 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v17 >= 1)
  {
    v19 = v74;
    v20 = vld1q_dup_f64(v19);
    v66 = v20;
    v21 = (unsigned int *)(v76 + 12);
    do
    {
      v23 = *v21;
      v22 = v21[1];
      if (v22 >> 30 == 3)
        v22 += 0x40000000;
      v24 = v71 + 72 * (int)v22;
      v25 = *(float64x2_t *)(v24 + 16);
      _Q2 = *(int8x16_t *)(v24 + 32);
      _Q3 = *(float64x2_t *)(v24 + 48);
      if (v23 >> 30 == 3)
        v23 += 0x40000000;
      v28 = (float64x2_t *)(v72 + 24 * (int)v23);
      v29 = v28[1].f64[0];
      v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v24, v28->f64[0]), (float64x2_t)vextq_s8((int8x16_t)v25, _Q2, 8uLL), *v28, 1), _Q3, v29);
      _Q1 = vmulq_f64(v25, *v28);
      _Q3.f64[0] = v28->f64[1];
      __asm { FMLA            D1, D3, V2.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + *(double *)(v24 + 64) * v29;
      v36 = (float64x2_t *)(v70 + 24 * (int)v22);
      _Q3.f64[0] = v36[1].f64[0];
      v37 = vaddq_f64(v30, *v36);
      *(_QWORD *)&v38 = *(_OWORD *)&vaddq_f64(_Q1, _Q3);
      v39 = fabs(v38);
      v75 = v37;
      v77 = v38;
      v40 = vmlad_n_f64(vmuld_lane_f64(v37.f64[1], v37, 1), v37.f64[0], v37.f64[0]);
      v41 = sqrt(v40);
      v42 = fabs(v41);
      v43 = *(v21 - 2);
      v44 = *(v21 - 1);
      v45 = v21[2];
      v46 = *(v21 - 3);
      if (v43 >> 30 == 3)
        v47 = v43 + 0x40000000;
      else
        v47 = *(v21 - 2);
      v48 = atan2(v41, v38);
      v50 = v44 + 0x40000000;
      if (v44 >> 30 != 3)
        v50 = v44;
      v51 = v45 + 0x40000000;
      if (v45 >> 30 != 3)
        v51 = v45;
      v52 = v46 + 0x40000000;
      if (v46 >> 30 != 3)
        v52 = v46;
      v49 = v48 * (v48 * v48);
      v53 = (v48
           + v49 * *(double *)(v73 + 32 * (int)v47)
           + v48 * v48 * v49 * *(double *)(v73 + 32 * (int)v47 + 8)
           + v48 * v48 * (v48 * v48 * v49) * *(double *)(v73 + 32 * (int)v47 + 16)
           + *(double *)(v73 + 32 * (int)v47 + 24) * (v48 * v48 * (v48 * v48 * (v48 * v48 * v49))))
          / v41;
      if (v40 >= 0.0000000149011612)
        v54 = v53;
      else
        v54 = 1.0 / v77;
      v55 = 0.0;
      if (v42 > 2.22044605e-16 && v39 > 2.22044605e-16 && v40 > 0.0 && fmin(v42, v39) > 2.22044605e-16)
      {
        v57 = vmulq_f64(v66, vsubq_f64(*(float64x2_t *)(v68 + 16 * (int)v50), vmlaq_n_f64(*(float64x2_t *)(v67 + 16 * (int)v51), v75, *(double *)(v69 + 8 * (int)v52) * v54)));
        v58 = vaddvq_f64(vmulq_f64(v57, v57));
        if (v58 > 0.0)
        {
          v59 = *v65 * *v65;
          v60 = sqrt(v58);
          v55 = v60 * *v65 + v60 * *v65 - v59;
          if (v58 < v59)
            v55 = v58;
        }
      }
      *v18++ = v55;
      v21 += 6;
      --v17;
    }
    while (v17);
  }
  *(_QWORD *)(a12 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969DB88(uint64_t *a1)
{
  sub_23969D7F0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_23969DBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v17;
  uint64_t v18;
  double *v19;
  const double *v20;
  float64x2_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t *v29;
  double v30;
  float64x2_t v31;
  float64x2_t *v37;
  float64x2_t v38;
  long double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  double v49;
  double v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  double v54;
  double v55;
  double v56;
  float64x2_t v58;
  double v59;
  double v60;
  double v61;
  double *v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const double *v74;
  float64x2_t v75;
  uint64_t v76;
  double v77;

  v17 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v18 = *v17;
  v76 = *(_QWORD *)(a2 + 16);
  v65 = *(double **)(a3 + 16);
  v19 = *(double **)(a12 + 16);
  v73 = *(_QWORD *)(a6 + 16);
  v74 = *(const double **)(a4 + 16);
  v68 = *(_QWORD *)(a7 + 16);
  v69 = *(_QWORD *)(a5 + 16);
  v67 = *(_QWORD *)(a9 + 16);
  v71 = *(_QWORD *)(a10 + 16);
  v72 = *(_QWORD *)(a8 + 16);
  v70 = *(_QWORD *)(a11 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v18 >= 1)
  {
    v20 = v74;
    v21 = vld1q_dup_f64(v20);
    v66 = v21;
    v22 = (unsigned int *)(v76 + 12);
    do
    {
      v24 = *v22;
      v23 = v22[1];
      if (v23 >> 30 == 3)
        v23 += 0x40000000;
      v25 = v71 + 72 * (int)v23;
      v26 = *(float64x2_t *)(v25 + 16);
      _Q2 = *(int8x16_t *)(v25 + 32);
      _Q3 = *(float64x2_t *)(v25 + 48);
      if (v24 >> 30 == 3)
        v24 += 0x40000000;
      v29 = (float64x2_t *)(v72 + 24 * (int)v24);
      v30 = v29[1].f64[0];
      v31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v25, v29->f64[0]), (float64x2_t)vextq_s8((int8x16_t)v26, _Q2, 8uLL), *v29, 1), _Q3, v30);
      _Q1 = vmulq_f64(v26, *v29);
      _Q3.f64[0] = v29->f64[1];
      __asm { FMLA            D1, D3, V2.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + *(double *)(v25 + 64) * v30;
      v37 = (float64x2_t *)(v70 + 24 * (int)v23);
      _Q3.f64[0] = v37[1].f64[0];
      v38 = vaddq_f64(v31, *v37);
      *(_QWORD *)&v39 = *(_OWORD *)&vaddq_f64(_Q1, _Q3);
      v40 = fabs(v39);
      v75 = v38;
      v77 = v39;
      v41 = vmlad_n_f64(vmuld_lane_f64(v38.f64[1], v38, 1), v38.f64[0], v38.f64[0]);
      v42 = sqrt(v41);
      v43 = fabs(v42);
      v44 = *(v22 - 2);
      v45 = *(v22 - 1);
      v46 = v22[2];
      v47 = *(v22 - 3);
      if (v44 >> 30 == 3)
        v48 = v44 + 0x40000000;
      else
        v48 = *(v22 - 2);
      v49 = atan2(v42, v39);
      v51 = v45 + 0x40000000;
      if (v45 >> 30 != 3)
        v51 = v45;
      v52 = v46 + 0x40000000;
      if (v46 >> 30 != 3)
        v52 = v46;
      v53 = v47 + 0x40000000;
      if (v47 >> 30 != 3)
        v53 = v47;
      v50 = v49 * (v49 * v49);
      v54 = (v49
           + v50 * *(double *)(v73 + 32 * (int)v48)
           + v49 * v49 * v50 * *(double *)(v73 + 32 * (int)v48 + 8)
           + v49 * v49 * (v49 * v49 * v50) * *(double *)(v73 + 32 * (int)v48 + 16)
           + *(double *)(v73 + 32 * (int)v48 + 24) * (v49 * v49 * (v49 * v49 * (v49 * v49 * v50))))
          / v42;
      if (v41 >= 0.0000000149011612)
        v55 = v54;
      else
        v55 = 1.0 / v77;
      v56 = 0.0;
      if (v43 > 2.22044605e-16 && v40 > 2.22044605e-16 && v41 > 0.0 && fmin(v43, v40) > 2.22044605e-16)
      {
        v58 = vmulq_f64(v66, vsubq_f64(*(float64x2_t *)(v68 + 16 * (int)v51), vmlaq_n_f64(*(float64x2_t *)(v67 + 16 * (int)v52), v75, *(double *)(v69 + 8 * (int)v53) * v55)));
        v59 = vaddvq_f64(vmulq_f64(v58, v58));
        if (v59 > 0.0)
        {
          v60 = *v65 * *v65;
          v61 = sqrt(v59);
          v56 = v61 * *v65 + v61 * *v65 - v60;
          if (v59 < v60)
            v56 = v59;
        }
      }
      *v19++ = v56;
      v22 += 6;
      --v18;
    }
    while (v18);
  }
  *(_QWORD *)(a12 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969DF68(uint64_t *a1)
{
  sub_23969DBC8(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return 0;
}

uint64_t sub_23969DFA8(uint64_t *a1)
{
  sub_2396812E0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return 0;
}

uint64_t sub_23969DFCC(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a1 + 240);
  v4 = *(_OWORD *)(a1 + 256);
  v2 = *(_OWORD *)(a1 + 208);
  sub_239681430(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280));
  return 0;
}

uint64_t sub_23969E03C(uint64_t *a1)
{
  sub_2396823E4(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E05C(uint64_t *a1)
{
  sub_2396823E4(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E07C(uint64_t *a1)
{
  sub_2396823E4(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E09C(uint64_t *a1)
{
  sub_239682530(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_23969E0BC(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E0DC(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E0FC(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E11C(uint64_t *a1)
{
  sub_239682720(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_23969E13C(uint64_t *a1)
{
  sub_239682828(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E15C(uint64_t *a1)
{
  sub_239682828(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E17C(uint64_t *a1)
{
  sub_239682828(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E19C(uint64_t *a1)
{
  sub_23968292C(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_23969E1BC(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E1DC(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E1FC(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E21C(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E23C(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E25C(uint64_t *a1)
{
  sub_239682720(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_23969E27C(uint64_t *a1)
{
  sub_239682B74(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_23969E29C(uint64_t *a1)
{
  sub_239682EF0(*a1, a1[1], a1[2], a1[3], a1[4]);
  return 0;
}

uint64_t sub_23969E2C0(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E2E0(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E300(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E320(uint64_t *a1)
{
  sub_239683308(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_23969E340(uint64_t *a1)
{
  sub_2396833F0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E360(uint64_t *a1)
{
  sub_23968370C(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_23969E380(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_23969E3A0(uint64_t *a1)
{
  sub_239682720(*a1, a1[1], a1[2], a1[3]);
  return 0;
}

uint64_t sub_23969E3C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  sub_239683AA0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a7, a8, v9, a1[9], a1[10]);
  return 0;
}

uint64_t sub_23969E3F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  sub_239683D7C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a7, a8, v9, a1[9], a1[10]);
  return 0;
}

uint64_t sub_23969E428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  float64x2_t v33;
  unsigned int *v37;
  double *v38;
  int extent;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  float64x2_t *v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  float64x2_t *v85;
  _OWORD *v86;
  _OWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float64x2_t *v94;
  float64x2_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  float64x2_t *v101;
  double v102;
  float64x2_t v103;
  float64x2_t v109;
  float64x2_t *v110;
  uint64_t v111;
  float64x2_t v112;
  double v114;
  float64x2_t v115;
  float64x2_t v116;
  double v117;
  BOOL v118;
  unsigned int v119;
  unsigned int v120;
  double v121;
  double *v122;
  float64x2_t v123;
  double v124;
  double v125;
  int64x2_t v126;
  int64x2_t v127;
  float64x2_t v131;
  float64_t v132;
  unint64_t v133;
  unint64_t v134;
  double v135;
  float64x2_t v136;
  double v137;
  int v138;
  double v139;
  double v140;
  int64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  double v145;
  float64x2_t v146;
  int64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  int64x2_t v154;
  uint64_t v155;
  float64x2_t v156;
  uint64_t v157;
  uint64_t v158;
  int8x16_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  float64x2_t v164;
  float64x2_t v165;
  double v166;
  float64x2_t *v167;
  __int128 *v168;
  __int128 v169;
  float64x2_t v170;
  uint64_t v171;
  unint64_t v172;
  float64x2_t v173;
  float64_t v174;
  float64_t v175;
  uint64_t v176;
  uint64_t v177;
  int64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  int64x2_t v186;
  int64x2_t v189;
  float64x2_t *v190;
  __int128 *v191;
  __int128 *v192;
  __int128 *v193;
  __int128 *v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  float64x2_t v199;
  uint64_t v200;
  float64x2_t v201;
  float64x2_t v202;
  double v203;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  int8x16_t v228;
  int8x16_t v229;
  uint64_t v230;
  float64x2_t v231;
  uint64_t v232;
  uint64_t v233;
  float64x2_t v234;
  float64_t v235;
  uint64_t v236;
  int8x16_t v237;
  float64_t v238;
  int64x2_t v239;

  v37 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v208 = *(_QWORD *)(a2 + 16);
  v209 = *v37;
  v38 = *(double **)(a4 + 16);
  LODWORD(a4) = _gc_buffer_get_extent();
  extent = _gc_buffer_get_extent();
  v40 = _gc_buffer_get_extent();
  if ((_DWORD)a4 != 2 || extent != v40)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a5 + 24) |= 1uLL;
  }
  v207 = *(_QWORD *)(a5 + 16);
  v41 = *(_QWORD *)(a7 + 16);
  v42 = *(_QWORD *)(a10 + 16);
  v215 = *(_QWORD *)(a16 + 16);
  v216 = *(_QWORD *)(a13 + 16);
  v213 = *(_QWORD *)(a19 + 16);
  v214 = *(_QWORD *)(a18 + 16);
  v212 = *(_QWORD *)(a21 + 16);
  v43 = *(_QWORD *)(a23 + 16);
  v210 = *(_QWORD *)(a24 + 16);
  v44 = _gc_buffer_get_extent();
  v45 = _gc_buffer_get_extent();
  v46 = _gc_buffer_get_extent();
  v47 = _gc_buffer_get_extent();
  if (v44 != 2 || v45 != 1 || v46 != v47)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a25 + 24) |= 1uLL;
  }
  v211 = v43;
  v220 = *(_QWORD *)(a25 + 16);
  v48 = _gc_buffer_get_extent();
  v49 = _gc_buffer_get_extent();
  v50 = _gc_buffer_get_extent();
  v51 = _gc_buffer_get_extent();
  if (v48 != 2 || v49 != 3 || v50 != v51)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a26 + 24) |= 1uLL;
  }
  v219 = *(_QWORD *)(a26 + 16);
  v52 = _gc_buffer_get_extent();
  v53 = _gc_buffer_get_extent();
  v54 = _gc_buffer_get_extent();
  v55 = _gc_buffer_get_extent();
  if (v52 != 2 || v53 != 6 || v54 != v55)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a27 + 24) |= 1uLL;
  }
  v218 = *(_QWORD *)(a27 + 16);
  v56 = _gc_buffer_get_extent();
  v57 = _gc_buffer_get_extent();
  v58 = _gc_buffer_get_extent();
  v59 = _gc_buffer_get_extent();
  if (v56 != 2 || v57 != 2 || v58 != v59)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a28 + 24) |= 1uLL;
  }
  v217 = *(_QWORD *)(a28 + 16);
  v60 = _gc_buffer_get_extent();
  v61 = _gc_buffer_get_extent();
  v62 = _gc_buffer_get_extent();
  v63 = _gc_buffer_get_extent();
  if (v60 != 2 || v61 != 1 || v62 != v63)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a29 + 24) |= 1uLL;
  }
  v221 = *(_QWORD *)(a29 + 16);
  v64 = _gc_buffer_get_extent();
  v65 = _gc_buffer_get_extent();
  v66 = _gc_buffer_get_extent();
  v67 = _gc_buffer_get_extent();
  if (v64 != 2 || v65 != 3 || v66 != v67)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a30 + 24) |= 1uLL;
  }
  v206 = *(_QWORD *)(a30 + 16);
  v68 = _gc_buffer_get_extent();
  v69 = _gc_buffer_get_extent();
  v70 = _gc_buffer_get_extent();
  v71 = _gc_buffer_get_extent();
  v72 = v210;
  if (v68 != 2 || v69 != 6 || v70 != v71)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a31 + 24) |= 1uLL;
  }
  v205 = *(_QWORD *)(a31 + 16);
  v73 = _gc_buffer_get_extent();
  v74 = _gc_buffer_get_extent();
  v75 = _gc_buffer_get_extent();
  v76 = _gc_buffer_get_extent();
  if (v73 != 2 || v74 != 2 || v75 != v76)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a32 + 24) |= 1uLL;
  }
  v77 = *(float64x2_t **)(a32 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v209 >= 1)
  {
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v84 = (unsigned int *)(v208 + 12);
    v85 = v77 + 1;
    v223 = v207 + 8;
    v86 = (_OWORD *)(v206 + 16);
    v87 = (_OWORD *)(v205 + 48);
    v89 = v215;
    v88 = v216;
    v91 = v213;
    v90 = v214;
    v93 = v43;
    v92 = v212;
    do
    {
      v97 = *v84;
      v96 = v84[1];
      if (v96 >> 30 == 3)
        v96 += 0x40000000;
      v98 = v93 + 72 * (int)v96;
      _Q5 = *(float64x2_t *)(v98 + 16);
      _Q7 = *(int8x16_t *)(v98 + 32);
      if (v97 >> 30 == 3)
        v97 += 0x40000000;
      v101 = (float64x2_t *)(v92 + 24 * (int)v97);
      v109 = *v101;
      v102 = v101[1].f64[0];
      v103 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v98, v101->f64[0]), (float64x2_t)vextq_s8((int8x16_t)_Q5, _Q7, 8uLL), *v101, 1), *(float64x2_t *)(v98 + 48), v102);
      _Q5.f64[0] = v101->f64[1];
      __asm { FMLA            D4, D5, V7.D[1] }
      v109.f64[0] = _D4 + *(double *)(v98 + 64) * v102;
      v110 = (float64x2_t *)(v72 + 24 * (int)v96);
      _Q5.f64[0] = v110[1].f64[0];
      v111 = *(_OWORD *)&vaddq_f64(v109, _Q5);
      v112 = vaddq_f64(v103, *v110);
      _Q18 = vdivq_f64(v112, (float64x2_t)vdupq_lane_s64(v111, 0));
      v114 = vmuld_n_f64(*(double *)&v111, *(double *)&v111);
      v115 = vmulq_f64(_Q18, _Q18);
      v116 = vaddq_f64(v115, (float64x2_t)vdupq_laneq_s64((int64x2_t)v115, 1));
      v117 = vaddvq_f64(v115);
      v118 = fabs(*(double *)&v111) > 2.22044605e-16;
      v119 = *(v84 - 3);
      v120 = *(v84 - 2);
      if (v120 >> 30 == 3)
        v120 += 0x40000000;
      v121 = *v38;
      if (v119 >> 30 == 3)
        v119 += 0x40000000;
      v78.f64[0] = *(float64_t *)(v90 + 8 * (int)v119);
      v122 = (double *)(v91 + 24 * (int)v120);
      v80.f64[0] = v122[1];
      v79.f64[0] = v122[2];
      v123 = vmulq_f64(v116, v116);
      v124 = v117 * vmlad_n_f64(*v122 + v117 * v80.f64[0], v79.f64[0], v123.f64[0]) + 1.0;
      v125 = v121 * (v78.f64[0] * v124);
      v126 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6820, v121);
      v127 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6830, v121);
      _D26 = v126.i64[1];
      __asm { FMLA            D16, D26, V18.D[1] }
      *(_QWORD *)&_Q8.f64[0] = v127.i64[1];
      __asm { FMLA            D26, D8, V18.D[1] }
      _Q8.f64[0] = v117 * v79.f64[0];
      v33.f64[0] = v117 * (v117 * v79.f64[0]);
      v131 = vmlaq_n_f64(v33, _Q8, v116.f64[0]);
      v123.f64[0] = vmuld_n_f64(v78.f64[0], v123.f64[0]);
      v132 = v123.f64[0] * _D16;
      *(double *)&v133 = v123.f64[0] * _D26;
      *(double *)&v134 = v117 * (v123.f64[0] * _D16);
      v135 = v117 * (v123.f64[0] * _D26);
      v79.f64[0] = v79.f64[0] * v123.f64[0];
      v123.f64[0] = v78.f64[0] * (v117 * v80.f64[0]);
      v136 = vmlaq_f64(vaddq_f64(v123, vmlaq_f64(v79, v78, v131)), vmulq_f64(v116, v78), v80);
      v123.f64[0] = v78.f64[0] * *v122;
      *(_QWORD *)&v137 = *(_OWORD *)&vaddq_f64(v123, v136);
      v224.f64[0] = 0.0;
      v224.f64[1] = v135;
      v225.f64[0] = 0.0;
      v226.f64[1] = 0.0;
      v225.f64[1] = v132;
      v138 = v118 && v114 > 2.22044605e-16;
      v33 = (float64x2_t)vdupq_lane_s64(v133, 0);
      v33.f64[0] = 0.0;
      v79 = vaddq_f64(v224, (float64x2_t)v133);
      v227.f64[0] = 0.0;
      v226.f64[0] = v117 * (v78.f64[0] * _D16);
      v227.f64[1] = v117 * (v78.f64[0] * _D26);
      v139 = vmuld_n_f64(_D16, v137);
      v140 = vmuld_n_f64(_D26, v137);
      v80.f64[1] = 0.0;
      *(_QWORD *)&v116.f64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)v134, v227);
      v141 = (int64x2_t)vaddq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v134, (int8x16_t)v224, 8uLL), v33), (float64x2_t)vdupq_laneq_s64((int64x2_t)v227, 1).u64[0]);
      _Q8 = (float64x2_t)vzip2q_s64(v141, (int64x2_t)v79);
      v142 = vaddq_f64(_Q18, _Q18);
      v143 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6820, v125), v142, v139);
      _Q23 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6830, v125), v142, v140);
      v145 = 1.0 / *(double *)&v111;
      v146 = vmulq_n_f64(_Q23, 1.0 / *(double *)&v111);
      _Q19 = vdivq_f64(vnegq_f64(v112), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v114, 0));
      _D24 = v143.f64[1];
      __asm { FMLA            D21, D24, V19.D[1] }
      _Q23.f64[0] = _Q23.f64[1];
      __asm { FMLA            D24, D23, V19.D[1] }
      v229.i64[0] = 0;
      v228 = (int8x16_t)_D21;
      v229.i64[1] = _D24;
      v232 = 0;
      v230 = 0;
      v231 = v146;
      v151 = (int64x2_t)vaddq_f64((float64x2_t)_D21, *(float64x2_t *)&v230);
      v152 = vaddq_f64((float64x2_t)vextq_s8(v228, v229, 8uLL), (float64x2_t)vextq_s8(*(int8x16_t *)&v230, *(int8x16_t *)(&v232 - 1), 8uLL));
      v153 = vaddq_f64((float64x2_t)v229, *(float64x2_t *)(&v232 - 1));
      v78 = (float64x2_t)vzip1q_s64(v151, (int64x2_t)v152);
      v154 = vzip2q_s64((int64x2_t)v152, (int64x2_t)v153);
      v155 = *(int *)(v41 + v81);
      if ((_DWORD)v155 != -1)
      {
        if ((v138 & 1) != 0)
        {
          v156.f64[0] = _D16 * v124;
          v156.f64[1] = _D26 * v124;
          v157 = 2 * v83;
          v158 = v220 + 16 * v155;
          *(float64x2_t *)v158 = vmulq_n_f64(v156, *(double *)(v223 + 8 * v82));
        }
        else
        {
          v158 = v220 + 16 * v155;
          *(_QWORD *)v158 = 0;
          *(_QWORD *)(v158 + 8) = 0;
          v157 = v82;
        }
        *(_OWORD *)(v221 + 8 * v157) = *(_OWORD *)v158;
      }
      v159 = (int8x16_t)vaddq_f64(v225, v226);
      v160 = vextq_s8(v159, v159, 8uLL).u64[0];
      v161 = *(int *)(v42 + v81);
      if ((_DWORD)v161 != -1)
      {
        if ((v138 & 1) != 0)
        {
          v162 = vdupq_laneq_s64((int64x2_t)v79, 1).u64[0];
          v163 = vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL).u64[0];
          *(_QWORD *)&v164.f64[0] = v159.i64[0];
          *(_QWORD *)&v164.f64[1] = v141.i64[0];
          *(_QWORD *)&v165.f64[0] = v160;
          *(_QWORD *)&v165.f64[1] = v163;
          *(_QWORD *)&v116.f64[1] = v162;
          v166 = *(double *)(v223 + 8 * v82);
          v167 = (float64x2_t *)(v219 + 48 * v161);
          *v167 = vmulq_n_f64(v164, v166);
          v167[1] = vmulq_n_f64(v165, v166);
          v168 = (__int128 *)&v167[1];
          v167[2] = vmulq_n_f64(v116, v166);
        }
        else
        {
          v167 = (float64x2_t *)(v219 + 48 * v161);
          *v167 = 0uLL;
          v167[1] = 0uLL;
          v168 = (__int128 *)&v167[1];
          v167[2] = 0uLL;
        }
        v169 = *v168;
        v79 = v167[2];
        *(v86 - 1) = *v167;
        *v86 = v169;
        v86[1] = v79;
      }
      v170 = vmulq_n_f64(v143, v145);
      v171 = *(int *)(v88 + v81);
      if ((_DWORD)v171 != -1)
      {
        if (v138)
        {
          v172 = vdupq_laneq_s64((int64x2_t)vnegq_f64((float64x2_t)vextq_s8((int8x16_t)v103, (int8x16_t)v109, 8uLL)), 1).u64[0];
          v173.f64[0] = 0.0;
          v173.f64[1] = v109.f64[0];
          v175 = v78.f64[1];
          v174 = v78.f64[0];
          v176 = v154.i64[1];
          v177 = v154.i64[0];
          *(_QWORD *)&_Q17.f64[0] = vdupq_laneq_s64((int64x2_t)v103, 1).u64[0];
          _Q17.f64[1] = -v103.f64[0];
          _Q23 = (int64x2_t)vnegq_f64(v173);
          v78 = vnegq_f64(v103);
          v180 = (int64x2_t)vnegq_f64((float64x2_t)v172);
          v181 = vnegq_f64(_Q17);
          v182 = (float64x2_t)vzip1q_s64(_Q23, v180);
          v183 = (float64x2_t)vzip2q_s64(_Q23, v180);
          v184 = (float64x2_t)vextq_s8((int8x16_t)v103, (int8x16_t)v78, 8uLL);
          v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v182, v170.f64[0]), v183, v170, 1), v184, *(double *)v151.i64);
          _Q21 = (int64x2_t)vmulq_f64(v170, v181);
          _Q23.i64[0] = *(_QWORD *)&v170.f64[1];
          __asm { FMLS            D21, D23, V17.D[1] }
          v186 = (int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_n_f64(v182, v152.f64[0]), v183, v152, 1), v184, v153, 1);
          _Q6 = (int8x16_t)vmulq_f64(v152, v181);
          _D19 = v152.f64[1];
          __asm { FMLS            D6, D19, V17.D[1] }
          v189 = vzip1q_s64(_Q21, v186);
          v89 = v215;
          v88 = v216;
          v236 = v189.i64[1];
          v237 = vextq_s8((int8x16_t)v186, _Q6, 8uLL);
          v233 = v189.i64[0];
          v93 = v211;
          v92 = v212;
          v234 = v170;
          v235 = v174;
          v91 = v213;
          v90 = v214;
          v238 = v175;
          v239.i64[0] = v177;
          v72 = v210;
          v239.i64[1] = v176;
          v78.f64[0] = *(float64_t *)(v223 + 8 * v82);
          v190 = (float64x2_t *)(v218 + 96 * v171);
          *v190 = vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v79, *(int64x2_t *)&v236), v78.f64[0]);
          v190[1] = vmulq_n_f64((float64x2_t)vzip2q_s64((int64x2_t)v79, *(int64x2_t *)&v236), v78.f64[0]);
          v191 = (__int128 *)&v190[1];
          v190[2] = vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)&v233, *(int64x2_t *)((char *)&v237 + 8)), v78.f64[0]);
          v192 = (__int128 *)&v190[2];
          v190[3] = vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)&v233, *(int64x2_t *)((char *)&v237 + 8)), v78.f64[0]);
          v193 = (__int128 *)&v190[3];
          v190[4] = vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)((char *)&v234 + 8), v239), v78.f64[0]);
          v194 = (__int128 *)&v190[4];
          v190[5] = vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)((char *)&v234 + 8), v239), v78.f64[0]);
        }
        else
        {
          v190 = (float64x2_t *)(v218 + 96 * v171);
          *v190 = 0uLL;
          v190[1] = 0uLL;
          v191 = (__int128 *)&v190[1];
          v190[2] = 0uLL;
          v192 = (__int128 *)&v190[2];
          v190[3] = 0uLL;
          v193 = (__int128 *)&v190[3];
          v190[4] = 0uLL;
          v194 = (__int128 *)&v190[4];
          v190[5] = 0uLL;
        }
        v195 = *v191;
        v196 = *v192;
        v197 = *v193;
        v198 = *v194;
        v199 = v190[5];
        *(v87 - 3) = *v190;
        *(v87 - 2) = v195;
        *(v87 - 1) = v196;
        *v87 = v197;
        v87[1] = v198;
        v87[2] = v199;
      }
      v200 = *(int *)(v89 + v81);
      if ((_DWORD)v200 != -1)
      {
        if ((v138 & 1) != 0)
        {
          v201 = (float64x2_t)vzip1q_s64(v126, v127);
          v202 = (float64x2_t)vzip2q_s64(v126, v127);
          v203 = *(double *)(v223 + 8 * v82);
          v94 = (float64x2_t *)(v217 + 32 * v200);
          *v94 = vmulq_n_f64(v201, v203);
          v94[1] = vmulq_n_f64(v202, v203);
        }
        else
        {
          v94 = (float64x2_t *)(v217 + 32 * v200);
          *v94 = 0uLL;
          v94[1] = 0uLL;
        }
        v95 = v94[1];
        v85[-1] = *v94;
        *v85 = v95;
      }
      ++v83;
      v84 += 6;
      v85 += 2;
      v82 += 2;
      v81 += 4;
      v86 += 3;
      v87 += 6;
    }
    while (4 * v209 != v81);
  }
  *(_QWORD *)(a32 + 24) |= 1uLL;
  *(_QWORD *)(a31 + 24) |= 1uLL;
  *(_QWORD *)(a30 + 24) |= 1uLL;
  *(_QWORD *)(a29 + 24) |= 1uLL;
  *(_QWORD *)(a28 + 24) |= 1uLL;
  *(_QWORD *)(a27 + 24) |= 1uLL;
  *(_QWORD *)(a26 + 24) |= 1uLL;
  *(_QWORD *)(a25 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_23969F348(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_23969E428(*a1, a1[1], a1[30], a1[3], a1[4], a1[5], a1[6], a8, a1[8], a1[9], v9, a1[11], a1[12], v10, a1[14], a1[15], v11, a1[17], a1[18],
    v12,
    a1[20],
    v13,
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26],
    a1[27],
    a1[28],
    a1[29],
    a1[30],
    a1[31]);
  return 0;
}

uint64_t sub_23969F3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  float64x2_t v37;
  float64x2_t v38;
  unsigned int *v43;
  double *v44;
  int extent;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  float64x2_t *v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  float64x2_t *v98;
  uint64_t v99;
  _OWORD *v100;
  _OWORD *v101;
  _OWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float64x2_t *v108;
  float64x2_t v109;
  unsigned int v110;
  unsigned int v111;
  float64x2_t *v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  double v117;
  uint64_t v118;
  float64x2_t v119;
  float64x2_t *v126;
  uint64_t v127;
  float64x2_t v128;
  double v130;
  float64x2_t v131;
  float64x2_t v132;
  double v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  double v137;
  double *v138;
  float64x2_t v139;
  double v140;
  double v141;
  float64x2_t v146;
  unint64_t v147;
  unint64_t v148;
  double v149;
  float64x2_t v150;
  double v151;
  int v152;
  double v153;
  double v154;
  int8x16_t v155;
  float64x2_t v156;
  float64x2_t v157;
  double v159;
  float64x2_t v160;
  int64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  int64x2_t v168;
  uint64_t v169;
  float64x2_t v170;
  uint64_t v171;
  uint64_t v172;
  int8x16_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  float64x2_t v177;
  float64x2_t v178;
  double v179;
  float64x2_t *v180;
  __int128 *v181;
  __int128 v182;
  float64x2_t v183;
  unint64_t v184;
  uint64_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  double v191;
  float64x2_t *v192;
  __int128 *v193;
  __int128 v194;
  float64x2_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v199;
  uint64_t v200;
  int64x2_t v202;
  int64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v207;
  int64x2_t v208;
  int64x2_t v210;
  int64x2_t v212;
  double v213;
  float64x2_t *v214;
  __int128 *v215;
  __int128 *v216;
  __int128 *v217;
  __int128 *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  float64x2_t v223;
  uint64_t v224;
  int64x2_t v225;
  int64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  int8x16_t v256;
  uint64_t v257;
  float64x2_t v258;
  uint64_t v259;
  uint64_t v260;
  float64x2_t v261;
  float64_t v262;
  uint64_t v263;
  int8x16_t v264;
  float64_t v265;
  int64x2_t v266;

  v43 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v234 = *(_QWORD *)(a2 + 16);
  v235 = *v43;
  v44 = *(double **)(a4 + 16);
  extent = _gc_buffer_get_extent();
  v46 = _gc_buffer_get_extent();
  v47 = _gc_buffer_get_extent();
  if (extent != 2 || v46 != v47)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a5 + 24) |= 1uLL;
  }
  v233 = *(_QWORD *)(a5 + 16);
  v241 = *(_QWORD *)(a10 + 16);
  v242 = *(_QWORD *)(a7 + 16);
  v239 = *(_QWORD *)(a16 + 16);
  v240 = *(_QWORD *)(a13 + 16);
  v238 = *(_QWORD *)(a19 + 16);
  v48 = *(_QWORD *)(a21 + 16);
  v236 = *(_QWORD *)(a22 + 16);
  v250 = *(_QWORD *)(a26 + 16);
  v251 = *(_QWORD *)(a24 + 16);
  v249 = *(_QWORD *)(a27 + 16);
  v49 = _gc_buffer_get_extent();
  v50 = _gc_buffer_get_extent();
  v51 = _gc_buffer_get_extent();
  v52 = _gc_buffer_get_extent();
  if (v49 != 2 || v50 != 1 || v51 != v52)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a28 + 24) |= 1uLL;
  }
  v237 = v48;
  v247 = *(_QWORD *)(a28 + 16);
  v53 = _gc_buffer_get_extent();
  v54 = _gc_buffer_get_extent();
  v55 = _gc_buffer_get_extent();
  v56 = _gc_buffer_get_extent();
  if (v53 != 2 || v54 != 3 || v55 != v56)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a29 + 24) |= 1uLL;
  }
  v246 = *(_QWORD *)(a29 + 16);
  v57 = _gc_buffer_get_extent();
  v58 = _gc_buffer_get_extent();
  v59 = _gc_buffer_get_extent();
  v60 = _gc_buffer_get_extent();
  if (v57 != 2 || v58 != 3 || v59 != v60)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a30 + 24) |= 1uLL;
  }
  v245 = *(_QWORD *)(a30 + 16);
  v61 = _gc_buffer_get_extent();
  v62 = _gc_buffer_get_extent();
  v63 = _gc_buffer_get_extent();
  v64 = _gc_buffer_get_extent();
  if (v61 != 2 || v62 != 6 || v63 != v64)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a31 + 24) |= 1uLL;
  }
  v244 = *(_QWORD *)(a31 + 16);
  v65 = _gc_buffer_get_extent();
  v66 = _gc_buffer_get_extent();
  v67 = _gc_buffer_get_extent();
  v68 = _gc_buffer_get_extent();
  if (v65 != 2 || v66 != 2 || v67 != v68)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a32 + 24) |= 1uLL;
  }
  v243 = *(_QWORD *)(a32 + 16);
  v69 = _gc_buffer_get_extent();
  v70 = _gc_buffer_get_extent();
  v71 = _gc_buffer_get_extent();
  v72 = _gc_buffer_get_extent();
  if (v69 != 2 || v70 != 1 || v71 != v72)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a33 + 24) |= 1uLL;
  }
  v248 = *(_QWORD *)(a33 + 16);
  v73 = _gc_buffer_get_extent();
  v74 = _gc_buffer_get_extent();
  v75 = _gc_buffer_get_extent();
  v76 = _gc_buffer_get_extent();
  if (v73 != 2 || v74 != 3 || v75 != v76)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a34 + 24) |= 1uLL;
  }
  v232 = *(_QWORD *)(a34 + 16);
  v77 = _gc_buffer_get_extent();
  v78 = _gc_buffer_get_extent();
  v79 = _gc_buffer_get_extent();
  v80 = _gc_buffer_get_extent();
  v81 = v236;
  if (v77 != 2 || v78 != 3 || v79 != v80)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a35 + 24) |= 1uLL;
  }
  v231 = *(_QWORD *)(a35 + 16);
  v82 = _gc_buffer_get_extent();
  v83 = _gc_buffer_get_extent();
  v84 = _gc_buffer_get_extent();
  v85 = _gc_buffer_get_extent();
  if (v82 != 2 || v83 != 6 || v84 != v85)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a36 + 24) |= 1uLL;
  }
  v230 = *(_QWORD *)(a36 + 16);
  v86 = _gc_buffer_get_extent();
  v87 = _gc_buffer_get_extent();
  v88 = _gc_buffer_get_extent();
  v89 = _gc_buffer_get_extent();
  if (v86 != 2 || v87 != 2 || v88 != v89)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a37 + 24) |= 1uLL;
  }
  v90 = *(float64x2_t **)(a37 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v235 >= 1)
  {
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v97 = (unsigned int *)(v234 + 12);
    v98 = v90 + 1;
    v99 = v233 + 8;
    v100 = (_OWORD *)(v232 + 16);
    v101 = (_OWORD *)(v231 + 16);
    v102 = (_OWORD *)(v230 + 48);
    v103 = v241;
    v104 = v242;
    v106 = v239;
    v105 = v240;
    v107 = v238;
    do
    {
      v111 = *v97;
      v110 = v97[1];
      if (v110 >> 30 == 3)
        v110 += 0x40000000;
      v112 = (float64x2_t *)(v250 + 72 * (int)v110);
      v114 = *v112;
      v113 = v112[1];
      _Q18 = v112[2];
      v115 = v112[3];
      v117 = v112[4].f64[0];
      if (v111 >> 30 == 3)
        v111 += 0x40000000;
      v118 = v251 + 24 * (int)v111;
      v91.f64[0] = *(float64_t *)(v118 + 16);
      v119 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, *(double *)v118), (float64x2_t)vextq_s8((int8x16_t)v113, (int8x16_t)_Q18, 8uLL), *(float64x2_t *)v118, 1), v115, v91.f64[0]);
      _Q7 = vmulq_f64(v113, *(float64x2_t *)v118);
      _D5 = *(_QWORD *)(v118 + 8);
      __asm { FMLA            D7, D5, V18.D[1] }
      _Q7.f64[0] = _Q7.f64[0] + v117 * v91.f64[0];
      v126 = (float64x2_t *)(v249 + 24 * (int)v110);
      v91.f64[0] = v126[1].f64[0];
      v127 = *(_OWORD *)&vaddq_f64(_Q7, v91);
      v128 = vaddq_f64(v119, *v126);
      _Q20 = vdivq_f64(v128, (float64x2_t)vdupq_lane_s64(v127, 0));
      v130 = vmuld_n_f64(*(double *)&v127, *(double *)&v127);
      v131 = vmulq_f64(_Q20, _Q20);
      v132 = vaddq_f64(v131, (float64x2_t)vdupq_laneq_s64((int64x2_t)v131, 1));
      v133 = vaddvq_f64(v131);
      v134 = fabs(*(double *)&v127) > 2.22044605e-16;
      v135 = *(v97 - 3);
      v136 = *(v97 - 2);
      if (v136 >> 30 == 3)
        v136 += 0x40000000;
      v137 = *v44;
      if (v135 >> 30 == 3)
        v135 += 0x40000000;
      v92.f64[0] = *(float64_t *)(v48 + 8 * (int)v135);
      v138 = (double *)(v81 + 24 * (int)v136);
      v37.f64[0] = v138[1];
      v93.f64[0] = v138[2];
      v139 = vmulq_f64(v132, v132);
      v140 = v133 * vmlad_n_f64(*v138 + v133 * v37.f64[0], v93.f64[0], v139.f64[0]) + 1.0;
      v141 = v137 * (v92.f64[0] * v140);
      _Q11 = vmulq_n_f64((float64x2_t)xmmword_239EC6830, v137);
      _D29 = vmulq_n_f64((float64x2_t)xmmword_239EC6820, v137).f64[1];
      __asm { FMLA            D6, D29, V20.D[1] }
      _Q11.f64[0] = _Q11.f64[1];
      __asm { FMLA            D29, D11, V20.D[1] }
      _Q11.f64[0] = v133 * v93.f64[0];
      v38.f64[0] = v133 * (v133 * v93.f64[0]);
      v146 = vmlaq_n_f64(v38, _Q11, v132.f64[0]);
      v139.f64[0] = vmuld_n_f64(v92.f64[0], v139.f64[0]);
      _Q11.f64[0] = v139.f64[0] * _D6;
      *(double *)&v147 = v139.f64[0] * _D29;
      *(double *)&v148 = v133 * (v139.f64[0] * _D6);
      v149 = v133 * (v139.f64[0] * _D29);
      v93.f64[0] = v93.f64[0] * v139.f64[0];
      v139.f64[0] = v92.f64[0] * (v133 * v37.f64[0]);
      v150 = vmlaq_f64(vaddq_f64(v139, vmlaq_f64(v93, v92, v146)), vmulq_f64(v132, v92), v37);
      v139.f64[0] = v92.f64[0] * *v138;
      *(_QWORD *)&v151 = *(_OWORD *)&vaddq_f64(v139, v150);
      v252.f64[0] = 0.0;
      v252.f64[1] = v149;
      v253.f64[0] = 0.0;
      v254.f64[1] = 0.0;
      v253.f64[1] = _Q11.f64[0];
      v152 = v134 && v130 > 2.22044605e-16;
      v38 = (float64x2_t)vdupq_lane_s64(v147, 0);
      v38.f64[0] = 0.0;
      v93 = vaddq_f64(v252, (float64x2_t)v147);
      v255.f64[0] = 0.0;
      v254.f64[0] = v133 * (v92.f64[0] * _D6);
      v255.f64[1] = v133 * (v92.f64[0] * _D29);
      v153 = vmuld_n_f64(_D6, v151);
      v154 = vmuld_n_f64(_D29, v151);
      v37.f64[1] = 0.0;
      *(_QWORD *)&v132.f64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)v148, v255);
      v155 = (int8x16_t)vaddq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v148, (int8x16_t)v252, 8uLL), v38), (float64x2_t)vdupq_laneq_s64((int64x2_t)v255, 1).u64[0]);
      v156 = vaddq_f64(_Q20, _Q20);
      v157 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6820, v141), v156, v153);
      _Q26 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6830, v141), v156, v154);
      v159 = 1.0 / *(double *)&v127;
      v160 = vmulq_n_f64(_Q26, v159);
      _Q23 = vdivq_f64(vnegq_f64(v128), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v130, 0));
      _D27 = v157.f64[1];
      __asm { FMLA            D24, D27, V23.D[1] }
      _Q26.f64[0] = _Q26.f64[1];
      __asm { FMLA            D27, D26, V23.D[1] }
      v256.i64[0] = 0;
      v256.i64[1] = _D27;
      v259 = 0;
      v257 = 0;
      v258 = v160;
      v165 = (int64x2_t)vaddq_f64((float64x2_t)_D24, *(float64x2_t *)&v257);
      v166 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)_D24, v256, 8uLL), (float64x2_t)vextq_s8(*(int8x16_t *)&v257, *(int8x16_t *)(&v259 - 1), 8uLL));
      v167 = vaddq_f64((float64x2_t)v256, *(float64x2_t *)(&v259 - 1));
      v92 = (float64x2_t)vzip1q_s64(v165, (int64x2_t)v166);
      v168 = vzip2q_s64((int64x2_t)v166, (int64x2_t)v167);
      v169 = *(int *)(v104 + v94);
      if ((_DWORD)v169 != -1)
      {
        if ((v152 & 1) != 0)
        {
          v170.f64[0] = _D6 * v140;
          v170.f64[1] = _D29 * v140;
          v171 = 2 * v96;
          v172 = v247 + 16 * v169;
          *(float64x2_t *)v172 = vmulq_n_f64(v170, *(double *)(v99 + 8 * v95));
        }
        else
        {
          v172 = v247 + 16 * v169;
          *(_QWORD *)v172 = 0;
          *(_QWORD *)(v172 + 8) = 0;
          v171 = v95;
        }
        *(_OWORD *)(v248 + 8 * v171) = *(_OWORD *)v172;
      }
      v173 = (int8x16_t)vaddq_f64(v253, v254);
      v91 = (float64x2_t)vextq_s8(v173, v173, 8uLL);
      v174 = *(int *)(v103 + v94);
      if ((_DWORD)v174 != -1)
      {
        if ((v152 & 1) != 0)
        {
          v175 = vdupq_laneq_s64((int64x2_t)v93, 1).u64[0];
          v176 = vextq_s8(v155, v155, 8uLL).u64[0];
          *(_QWORD *)&v177.f64[0] = v173.i64[0];
          *(_QWORD *)&v177.f64[1] = v155.i64[0];
          v178.f64[0] = v91.f64[0];
          *(_QWORD *)&v178.f64[1] = v176;
          *(_QWORD *)&v132.f64[1] = v175;
          v179 = *(double *)(v99 + 8 * v95);
          v180 = (float64x2_t *)(v246 + 48 * v174);
          *v180 = vmulq_n_f64(v177, v179);
          v180[1] = vmulq_n_f64(v178, v179);
          v181 = (__int128 *)&v180[1];
          v180[2] = vmulq_n_f64(v132, v179);
        }
        else
        {
          v180 = (float64x2_t *)(v246 + 48 * v174);
          *v180 = 0uLL;
          v180[1] = 0uLL;
          v181 = (__int128 *)&v180[1];
          v180[2] = 0uLL;
        }
        v182 = *v181;
        v93 = v180[2];
        *(v100 - 1) = *v180;
        *v100 = v182;
        v100[1] = v93;
      }
      v183 = vmulq_n_f64(v157, v159);
      v184 = vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL).u64[0];
      v185 = *(int *)(v105 + v94);
      if ((_DWORD)v185 != -1)
      {
        if ((v152 & 1) != 0)
        {
          v93.f64[0] = v183.f64[0];
          v93.f64[1] = v166.f64[0];
          *(_QWORD *)&v186.f64[0] = v184;
          *(_QWORD *)&v186.f64[1] = vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL).u64[0];
          *(_QWORD *)&v187.f64[0] = v165.i64[0];
          *(_QWORD *)&v187.f64[1] = vdupq_laneq_s64((int64x2_t)v167, 1).u64[0];
          v188 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, v114.f64[0]), v186, v114, 1), v187, v113.f64[0]);
          v189 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v93, v113, 1), v186, _Q18.f64[0]), v187, _Q18, 1);
          v190 = vmlaq_laneq_f64(vmulq_n_f64(v93, v115.f64[0]), v186, v115, 1);
          v191 = *(double *)(v99 + 8 * v95);
          v192 = (float64x2_t *)(v245 + 48 * v185);
          *v192 = vmulq_n_f64(v188, v191);
          v192[1] = vmulq_n_f64(v189, v191);
          v193 = (__int128 *)&v192[1];
          v192[2] = vmulq_n_f64(vmlaq_n_f64(v190, v187, v117), v191);
        }
        else
        {
          v192 = (float64x2_t *)(v245 + 48 * v185);
          *v192 = 0uLL;
          v192[1] = 0uLL;
          v193 = (__int128 *)&v192[1];
          v192[2] = 0uLL;
        }
        v194 = *v193;
        v195 = v192[2];
        *(v101 - 1) = *v192;
        *v101 = v194;
        v101[1] = v195;
      }
      v196 = *(int *)(v106 + v94);
      if ((_DWORD)v196 != -1)
      {
        if (v152)
        {
          v197 = vdupq_laneq_s64((int64x2_t)vnegq_f64((float64x2_t)vextq_s8((int8x16_t)v119, (int8x16_t)_Q7, 8uLL)), 1).u64[0];
          _Q18.f64[0] = 0.0;
          _Q18.f64[1] = _Q7.f64[0];
          v199 = v168.i64[1];
          v200 = v168.i64[0];
          *(_QWORD *)&_Q7.f64[0] = vdupq_laneq_s64((int64x2_t)v119, 1).u64[0];
          _Q7.f64[1] = -v119.f64[0];
          v202 = (int64x2_t)vnegq_f64(_Q18);
          v203 = (int64x2_t)vnegq_f64((float64x2_t)v197);
          v204 = vnegq_f64(_Q7);
          v205 = (float64x2_t)vzip1q_s64(v202, v203);
          _Q16 = (float64x2_t)vzip2q_s64(v202, v203);
          v207 = (float64x2_t)vextq_s8((int8x16_t)v119, (int8x16_t)vnegq_f64(v119), 8uLL);
          v208 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v183.f64[0]), _Q16, v183, 1), v207, *(double *)v165.i64);
          _Q17 = (int64x2_t)vmulq_f64(v183, v204);
          _Q18.f64[0] = v183.f64[1];
          __asm { FMLS            D17, D18, V7.D[1] }
          v210 = (int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v166.f64[0]), _Q16, v166, 1), v207, v167, 1);
          _Q4 = (int8x16_t)vmulq_f64(v166, v204);
          _Q16.f64[0] = v166.f64[1];
          __asm { FMLS            D4, D16, V7.D[1] }
          v212 = vzip1q_s64(_Q17, v210);
          v263 = v212.i64[1];
          v103 = v241;
          v104 = v242;
          v264 = vextq_s8((int8x16_t)v210, _Q4, 8uLL);
          v48 = v237;
          v107 = v238;
          v260 = v212.i64[0];
          v261 = v183;
          v262 = v92.f64[0];
          v106 = v239;
          v105 = v240;
          v265 = v92.f64[1];
          v266.i64[0] = v200;
          v81 = v236;
          v266.i64[1] = v199;
          v213 = *(double *)(v99 + 8 * v95);
          v214 = (float64x2_t *)(v244 + 96 * v196);
          *v214 = vmulq_n_f64((float64x2_t)vzip1q_s64(v208, *(int64x2_t *)&v263), v213);
          v214[1] = vmulq_n_f64((float64x2_t)vzip2q_s64(v208, *(int64x2_t *)&v263), v213);
          v215 = (__int128 *)&v214[1];
          v214[2] = vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)&v260, *(int64x2_t *)((char *)&v264 + 8)), v213);
          v216 = (__int128 *)&v214[2];
          v214[3] = vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)&v260, *(int64x2_t *)((char *)&v264 + 8)), v213);
          v217 = (__int128 *)&v214[3];
          v214[4] = vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)((char *)&v261 + 8), v266), v213);
          v218 = (__int128 *)&v214[4];
          v214[5] = vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)((char *)&v261 + 8), v266), v213);
        }
        else
        {
          v214 = (float64x2_t *)(v244 + 96 * v196);
          *v214 = 0uLL;
          v214[1] = 0uLL;
          v215 = (__int128 *)&v214[1];
          v214[2] = 0uLL;
          v216 = (__int128 *)&v214[2];
          v214[3] = 0uLL;
          v217 = (__int128 *)&v214[3];
          v214[4] = 0uLL;
          v218 = (__int128 *)&v214[4];
          v214[5] = 0uLL;
        }
        v219 = *v215;
        v220 = *v216;
        v221 = *v217;
        v222 = *v218;
        v223 = v214[5];
        *(v102 - 3) = *v214;
        *(v102 - 2) = v219;
        *(v102 - 1) = v220;
        *v102 = v221;
        v102[1] = v222;
        v102[2] = v223;
      }
      v224 = *(int *)(v107 + v94);
      if ((_DWORD)v224 != -1)
      {
        if ((v152 & 1) != 0)
        {
          v225 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6820, *v44);
          v226 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6830, *v44);
          v227 = (float64x2_t)vzip1q_s64(v225, v226);
          v228 = (float64x2_t)vzip2q_s64(v225, v226);
          v225.i64[0] = *(_QWORD *)(v99 + 8 * v95);
          v108 = (float64x2_t *)(v243 + 32 * v224);
          *v108 = vmulq_n_f64(v227, *(double *)v225.i64);
          v108[1] = vmulq_n_f64(v228, *(double *)v225.i64);
        }
        else
        {
          v108 = (float64x2_t *)(v243 + 32 * v224);
          *v108 = 0uLL;
          v108[1] = 0uLL;
        }
        v109 = v108[1];
        v98[-1] = *v108;
        *v98 = v109;
      }
      ++v96;
      v97 += 6;
      v98 += 2;
      v95 += 2;
      v94 += 4;
      v100 += 3;
      v101 += 3;
      v102 += 6;
    }
    while (4 * v235 != v94);
  }
  *(_QWORD *)(a37 + 24) |= 1uLL;
  *(_QWORD *)(a36 + 24) |= 1uLL;
  *(_QWORD *)(a35 + 24) |= 1uLL;
  *(_QWORD *)(a34 + 24) |= 1uLL;
  *(_QWORD *)(a33 + 24) |= 1uLL;
  *(_QWORD *)(a32 + 24) |= 1uLL;
  *(_QWORD *)(a31 + 24) |= 1uLL;
  *(_QWORD *)(a30 + 24) |= 1uLL;
  *(_QWORD *)(a29 + 24) |= 1uLL;
  *(_QWORD *)(a28 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396A055C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_23969F3B4(*a1, a1[1], a1[21], a1[3], a1[4], a1[5], a1[6], a1[23], a1[8], a1[9], v2, a1[11], a1[12], v3, a1[14], a1[15], v4, a1[17], a1[18],
    v5,
    a1[20],
    a1[21],
    v6,
    a1[23],
    v7,
    a1[25],
    a1[26],
    a1[27],
    a1[28],
    a1[29],
    a1[30],
    a1[31],
    a1[32],
    a1[33],
    a1[34],
    a1[35],
    a1[36]);
  return 0;
}

uint64_t sub_2396A05F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  sub_239686180(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a7, a8, v9, a1[9], a1[10]);
  return 0;
}

uint64_t sub_2396A0628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  unsigned int *v36;
  int extent;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  float64x2_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  float64x2_t *v78;
  _OWORD *v79;
  _OWORD *v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  unsigned int v84;
  unsigned int v85;
  float64x2_t *v86;
  float64x2_t *v89;
  double v90;
  float64x2_t v91;
  float64x2_t *v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  unsigned __int8 v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  double v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  double v113;
  unsigned int v114;
  double v115;
  double v116;
  double *v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  double v123;
  double v124;
  float64x2_t v132;
  double v133;
  double v134;
  float64x2_t v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  float64_t v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  float64x2_t v153;
  double v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  uint64_t v162;
  uint64_t v167;
  uint64_t v168;
  int64x2_t v169;
  int64x2_t v170;
  uint64_t v171;
  float64x2_t v172;
  float64x2_t v173;
  double v174;
  float64x2_t v175;
  uint64_t v176;
  __int128 *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  float64x2_t v181;
  uint64_t v182;
  float64x2_t v183;
  uint64_t v184;
  uint64_t v185;
  int64x2_t v187;
  int64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  int64x2_t v193;
  int64x2_t v196;
  int64x2_t v198;
  double v199;
  float64x2_t *v200;
  __int128 *v201;
  __int128 *v202;
  __int128 *v203;
  __int128 *v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  float64x2_t v209;
  uint64_t v210;
  int64x2_t v211;
  int64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int8x16_t v235;
  float64x2_t v236;
  double *v237;
  double v238;
  int8x16_t v239;
  float64x2_t *v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  _BYTE v249[32];
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  int8x16_t v255;
  uint64_t v256;
  float64x2_t v257;
  uint64_t v258;
  uint64_t v259;
  int8x16_t v260;
  uint64_t v261;
  int64x2_t v262;

  v36 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v223 = *v36;
  v222 = *(_QWORD *)(a2 + 16);
  v237 = *(double **)(a4 + 16);
  LODWORD(a4) = _gc_buffer_get_extent();
  extent = _gc_buffer_get_extent();
  v38 = _gc_buffer_get_extent();
  if ((_DWORD)a4 != 2 || extent != v38)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a5 + 24) |= 1uLL;
  }
  v216 = *(_QWORD *)(a5 + 16);
  v232 = *(_QWORD *)(a10 + 16);
  v233 = *(_QWORD *)(a7 + 16);
  v230 = *(_QWORD *)(a16 + 16);
  v231 = *(_QWORD *)(a13 + 16);
  v228 = *(_QWORD *)(a19 + 16);
  v229 = *(_QWORD *)(a18 + 16);
  v226 = *(_QWORD *)(a23 + 16);
  v227 = *(_QWORD *)(a21 + 16);
  v225 = *(_QWORD *)(a24 + 16);
  v39 = _gc_buffer_get_extent();
  v40 = _gc_buffer_get_extent();
  v41 = _gc_buffer_get_extent();
  v42 = _gc_buffer_get_extent();
  if (v39 != 2 || v40 != 1 || v41 != v42)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a25 + 24) |= 1uLL;
  }
  v220 = *(_QWORD *)(a25 + 16);
  v43 = _gc_buffer_get_extent();
  v44 = _gc_buffer_get_extent();
  v45 = _gc_buffer_get_extent();
  v46 = _gc_buffer_get_extent();
  if (v43 != 2 || v44 != 4 || v45 != v46)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a26 + 24) |= 1uLL;
  }
  v219 = *(_QWORD *)(a26 + 16);
  v47 = _gc_buffer_get_extent();
  v48 = _gc_buffer_get_extent();
  v49 = _gc_buffer_get_extent();
  v50 = _gc_buffer_get_extent();
  if (v47 != 2 || v48 != 6 || v49 != v50)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a27 + 24) |= 1uLL;
  }
  v218 = *(_QWORD *)(a27 + 16);
  v51 = _gc_buffer_get_extent();
  v52 = _gc_buffer_get_extent();
  v53 = _gc_buffer_get_extent();
  v54 = _gc_buffer_get_extent();
  if (v51 != 2 || v52 != 2 || v53 != v54)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a28 + 24) |= 1uLL;
  }
  v217 = *(_QWORD *)(a28 + 16);
  v55 = _gc_buffer_get_extent();
  v56 = _gc_buffer_get_extent();
  v57 = _gc_buffer_get_extent();
  v58 = _gc_buffer_get_extent();
  if (v55 != 2 || v56 != 1 || v57 != v58)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a29 + 24) |= 1uLL;
  }
  v221 = *(_QWORD *)(a29 + 16);
  v59 = _gc_buffer_get_extent();
  v60 = _gc_buffer_get_extent();
  v61 = _gc_buffer_get_extent();
  v62 = _gc_buffer_get_extent();
  if (v59 != 2 || v60 != 4 || v61 != v62)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a30 + 24) |= 1uLL;
  }
  v63 = *(_QWORD *)(a30 + 16);
  v64 = _gc_buffer_get_extent();
  v65 = _gc_buffer_get_extent();
  v66 = _gc_buffer_get_extent();
  v67 = _gc_buffer_get_extent();
  if (v64 != 2 || v65 != 6 || v66 != v67)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a31 + 24) |= 1uLL;
  }
  v68 = *(_QWORD *)(a31 + 16);
  v69 = _gc_buffer_get_extent();
  v70 = _gc_buffer_get_extent();
  v71 = _gc_buffer_get_extent();
  v72 = _gc_buffer_get_extent();
  if (v69 != 2 || v70 != 2 || v71 != v72)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a32 + 24) |= 1uLL;
  }
  v73 = *(float64x2_t **)(a32 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v223 >= 1)
  {
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = (unsigned int *)(v222 + 12);
    v78 = v73 + 1;
    v234 = v216 + 8;
    v224 = 4 * v223;
    v79 = (_OWORD *)(v63 + 32);
    v80 = (_OWORD *)(v68 + 48);
    do
    {
      v240 = v78;
      v85 = *v77;
      v84 = v77[1];
      if (v84 >> 30 == 3)
        v84 += 0x40000000;
      v86 = (float64x2_t *)(v226 + 72 * (int)v84);
      _Q1 = v86[1];
      _Q2 = v86[2];
      if (v85 >> 30 == 3)
        v85 += 0x40000000;
      v89 = (float64x2_t *)(v227 + 24 * (int)v85);
      v90 = v89[1].f64[0];
      v91 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v86, v89->f64[0]), (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q2, 8uLL), *v89, 1), v86[3], v90);
      _Q1.f64[0] = v89->f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      _Q2.f64[0] = _D0 + v86[4].f64[0] * v90;
      v95 = (float64x2_t *)(v225 + 24 * (int)v84);
      _Q1.f64[0] = v95[1].f64[0];
      v235 = (int8x16_t)_Q2;
      v236 = v91;
      *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(_Q2, _Q1);
      v96 = fabs(_Q1.f64[0]);
      v97 = vmuld_n_f64(_Q1.f64[0], _Q1.f64[0]);
      v238 = _Q1.f64[0];
      v239 = (int8x16_t)vaddq_f64(v91, *v95);
      v98 = vmlad_n_f64(vmuld_lane_f64(*(double *)&v239.i64[1], (float64x2_t)v239, 1), *(double *)v239.i64, *(double *)v239.i64);
      v99 = sqrt(v98);
      v100 = fabs(v99);
      v101 = v98 + v97;
      v102 = -v99;
      v103 = (v100 > 2.22044605e-16) & (v98 + v97 > 2.22044605e-16) & (v96 > 2.22044605e-16
                                                                    && v97 > 2.22044605e-16
                                                                    && v98 > 0.0
                                                                    && v99 > 2.22044605e-16) & (fmin(v100, v96) > 2.22044605e-16);
      v104 = *(v77 - 2);
      if (v104 >> 30 == 3)
        v105 = v104 + 0x40000000;
      else
        v105 = *(v77 - 2);
      v106 = v76;
      v107 = atan2(v99, _Q1.f64[0]);
      v111.f64[0] = v107 * v107;
      v112.f64[0] = v107 * (v107 * v107);
      v113 = v107 * v107 * v112.f64[0];
      v114 = *(v77 - 3);
      v115 = *v237;
      v116 = 1.0 / v238;
      v117 = (double *)(v228 + 32 * (int)v105);
      v118.f64[0] = v107 * v107 * v113;
      v120.f64[0] = v117[2];
      v119.f64[0] = v117[3];
      v121.f64[0] = v117[1];
      v122.f64[0] = v107
                  + v112.f64[0] * *v117
                  + v113 * v121.f64[0]
                  + v118.f64[0] * v120.f64[0]
                  + v119.f64[0] * (v107 * v107 * v118.f64[0]);
      if (v114 >> 30 == 3)
        v114 += 0x40000000;
      if (v98 >= 0.0000000149011612)
        v116 = v122.f64[0] / v99;
      v123 = v115 * v116;
      v124 = *(double *)(v229 + 8 * (int)v114);
      _D18 = vmuld_lane_f64(v124, (float64x2_t)v239, 1);
      _Q21 = vmulq_n_f64((float64x2_t)xmmword_239EC6820, v115);
      _Q24 = vmulq_n_f64((float64x2_t)xmmword_239EC6830, v115);
      __asm
      {
        FMLA            D2, D18, V21.D[1]
        FMLA            D17, D18, V24.D[1]
      }
      if (_NF != _VF)
        v108.f64[0] = 0.0;
      else
        v108.f64[0] = 1.0;
      v122.f64[0] = -v122.f64[0] / v98;
      _Q21.f64[0] = 1.0 / v99;
      v110.f64[0] = v107 * (v111.f64[0] * v111.f64[0]);
      _Q24.f64[0] = v111.f64[0] * v111.f64[0] * v110.f64[0];
      v132 = vmulq_f64(v108, vmulq_f64(_Q21, _Q24));
      v241 = vmuld_n_f64(_D2, v132.f64[0]);
      v242 = vmuld_n_f64(_D17, v132.f64[0]);
      v132.f64[0] = v111.f64[0] * v110.f64[0];
      *(_QWORD *)&v132.f64[0] = *(_OWORD *)&vmulq_f64(v108, vmulq_f64(_Q21, v132));
      v243 = vmuld_n_f64(_D2, v132.f64[0]);
      v244 = vmuld_n_f64(_D17, v132.f64[0]);
      *(_QWORD *)&v132.f64[0] = *(_OWORD *)&vmulq_f64(v108, vmulq_f64(_Q21, v110));
      v245 = vmuld_n_f64(_D2, v132.f64[0]);
      v246 = vmuld_n_f64(_D17, v132.f64[0]);
      *(_QWORD *)&v133 = *(_OWORD *)&vmulq_f64(v108, vmulq_f64(_Q21, v121));
      v109.f64[0] = *v117;
      *(_QWORD *)&v134 = *(_OWORD *)&vmulq_f64(v108, vmulq_f64(_Q21, v109));
      v135 = vmulq_n_f64(vmulq_n_f64(v119, 1.0 / v99), v108.f64[0]);
      *(_QWORD *)&v136 = *(_OWORD *)&vmlaq_f64(vmulq_f64(v111, v135), v108, vmulq_f64(_Q21, v120));
      v137 = vmuld_n_f64(_D2, v136);
      v138 = vmuld_n_f64(_D17, v136);
      v139 = vmlad_n_f64(v111.f64[0] * v137, _D2, v133);
      v140 = vmlad_n_f64(v111.f64[0] * v138, _D17, v133);
      v141 = vmlad_n_f64(v111.f64[0] * v139, _D2, v134);
      v142 = vmlad_n_f64(v111.f64[0] * v140, _D17, v134);
      v143 = v111.f64[0] * v141 + 1.0 / v99 * (v108.f64[0] * _D2);
      v132.f64[0] = v111.f64[0] * v142 + 1.0 / v99 * (v108.f64[0] * _D17);
      *(_QWORD *)&v144 = *(_OWORD *)&vmulq_f64(v108, v122);
      *(_QWORD *)&v145 = *(_OWORD *)&vmulq_f64(v108, vmulq_f64(_Q21, v112));
      v247 = vmuld_n_f64(_D2, v145);
      v248 = vmuld_n_f64(_D17, v145);
      *(_QWORD *)&v146 = *(_OWORD *)&vmulq_f64(v118, v135);
      v135.f64[0] = vmlad_n_f64(v113 * v137, _D2, v146);
      v147 = vmlad_n_f64(v113 * v138, _D17, v146);
      v148 = v124 * v123;
      v149 = v107 * (v135.f64[0] + v112.f64[0] * v139 + v107 * v141);
      v150 = v107 * (v147 + v112.f64[0] * v140 + v107 * v142);
      v151 = v149 + v143 + v149;
      v152 = v150 + v132.f64[0] + v150;
      v153 = vaddq_f64((float64x2_t)v239, (float64x2_t)v239);
      *(_QWORD *)v249 = 0;
      *(_OWORD *)&v249[16] = 0u;
      *(float64x2_t *)&v249[8] = vmlaq_n_f64(vmulq_n_f64(v153, 0.5 / v99 * vmlad_n_f64(v238 / v101 * v152, _D17, v144)), (float64x2_t)xmmword_239EC6830, v124 * v123);
      v154 = -1.0 / v97;
      if (_NF == _VF)
        v154 = 0.0;
      v250.f64[0] = 0.0;
      v251.f64[0] = 0.0;
      v250.f64[1] = v241;
      v251.f64[1] = v242;
      v252.f64[0] = 0.0;
      v155 = (int64x2_t)vaddq_f64(v250, (float64x2_t)*(unint64_t *)&v243);
      v156 = (int64x2_t)vaddq_f64(v251, (float64x2_t)*(unint64_t *)&v244);
      v253.f64[0] = 0.0;
      v252.f64[1] = v245;
      v253.f64[1] = v246;
      v254.f64[1] = 0.0;
      v255.i64[0] = 0;
      v254.f64[0] = v102 / v101 * v151 + v154 * _D2;
      *(double *)&v255.i64[1] = v102 / v101 * v152 + v154 * _D17;
      v157 = (int64x2_t)vaddq_f64(*(float64x2_t *)v249, v254);
      v158 = vaddq_f64((float64x2_t)vextq_s8(*(int8x16_t *)v249, *(int8x16_t *)&v249[16], 8uLL), (float64x2_t)vextq_s8((int8x16_t)v254, v255, 8uLL));
      v159 = vaddq_f64(*(float64x2_t *)&v249[16], (float64x2_t)v255);
      v160 = vzip1q_s64(v157, (int64x2_t)v158);
      v161 = vzip2q_s64((int64x2_t)v158, (int64x2_t)v159);
      v162 = *(int *)(v233 + v74);
      if ((_DWORD)v162 != -1)
      {
        if (((v98 > 2.22044605e-16) & v103) != 0)
        {
          _D27 = vextq_s8(v239, v239, 8uLL).u64[0];
          _Q28 = vmulq_n_f64((float64x2_t)xmmword_239EC6820, v123);
          _Q1 = vmulq_n_f64((float64x2_t)xmmword_239EC6830, v123);
          __asm
          {
            FMLA            D29, D27, V28.D[1]
            FMLA            D28, D27, V1.D[1]
          }
          _Q29.f64[1] = _Q28.f64[0];
          v167 = 2 * v106;
          v168 = v220 + 16 * v162;
          *(float64x2_t *)v168 = vmulq_n_f64(_Q29, *(double *)(v234 + 8 * v75));
        }
        else
        {
          v168 = v220 + 16 * v162;
          *(_QWORD *)v168 = 0;
          *(_QWORD *)(v168 + 8) = 0;
          v167 = v75;
        }
        *(_OWORD *)(v221 + 8 * v167) = *(_OWORD *)v168;
      }
      v169 = (int64x2_t)vaddq_f64(v252, (float64x2_t)*(unint64_t *)&v247);
      v170 = (int64x2_t)vaddq_f64(v253, (float64x2_t)*(unint64_t *)&v248);
      v171 = *(int *)(v232 + v74);
      if ((_DWORD)v171 != -1)
      {
        if (((v98 > 2.22044605e-16) & v103) != 0)
        {
          v172 = (float64x2_t)vzip1q_s64(v155, v156);
          v173 = (float64x2_t)vzip2q_s64(v155, v156);
          v174 = *(double *)(v234 + 8 * v75);
          v175 = vmulq_n_f64(v173, v174);
          v176 = v219 + (v171 << 6);
          *(float64x2_t *)v176 = vmulq_n_f64((float64x2_t)vzip1q_s64(v169, v170), v174);
          *(float64x2_t *)(v176 + 16) = vmulq_n_f64((float64x2_t)vzip2q_s64(v169, v170), v174);
          v177 = (__int128 *)(v176 + 16);
          *(float64x2_t *)(v176 + 32) = vmulq_n_f64(v172, v174);
        }
        else
        {
          v176 = v219 + (v171 << 6);
          v175 = 0uLL;
          *(_OWORD *)v176 = 0u;
          *(_OWORD *)(v176 + 16) = 0u;
          v177 = (__int128 *)(v176 + 16);
          *(_OWORD *)(v176 + 32) = 0u;
        }
        *(float64x2_t *)(v176 + 48) = v175;
        v178 = *v177;
        v179 = *(_OWORD *)(v176 + 32);
        v180 = *(_OWORD *)(v176 + 48);
        *(v79 - 2) = *(_OWORD *)v176;
        *(v79 - 1) = v178;
        *v79 = v179;
        v79[1] = v180;
      }
      v181 = vmlaq_n_f64(vmulq_n_f64(v153, 0.5 / v99 * vmlad_n_f64(v238 / v101 * v151, _D2, v144)), (float64x2_t)xmmword_239EC6820, v148);
      v182 = *(int *)(v231 + v74);
      if ((_DWORD)v182 != -1)
      {
        if (((v98 > 2.22044605e-16) & v103) != 0)
        {
          v183.f64[0] = 0.0;
          *(_QWORD *)&v183.f64[1] = v235.i64[0];
          v184 = v161.i64[1];
          v185 = v161.i64[0];
          *(_QWORD *)&_Q6.f64[0] = vdupq_laneq_s64((int64x2_t)v236, 1).u64[0];
          _Q6.f64[1] = -v236.f64[0];
          v187 = (int64x2_t)vnegq_f64(v183);
          v188 = (int64x2_t)vnegq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vnegq_f64((float64x2_t)vextq_s8((int8x16_t)v236, v235, 8uLL)), 1).u64[0]);
          v189 = vnegq_f64(_Q6);
          v190 = (float64x2_t)vzip1q_s64(v187, v188);
          v191 = (float64x2_t)vzip2q_s64(v187, v188);
          _Q4 = (float64x2_t)vextq_s8((int8x16_t)v236, (int8x16_t)vnegq_f64(v236), 8uLL);
          v193 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v190, v181.f64[0]), v191, v181, 1), _Q4, *(double *)v157.i64);
          _Q5 = (int64x2_t)vmulq_f64(v181, v189);
          _D19 = v181.f64[1];
          __asm { FMLS            D5, D19, V6.D[1] }
          v196 = (int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_n_f64(v190, v158.f64[0]), v191, v158, 1), _Q4, v159, 1);
          _Q3 = (int8x16_t)vmulq_f64(v158, v189);
          _Q4.f64[0] = v158.f64[1];
          __asm { FMLS            D3, D4, V6.D[1] }
          v198 = vzip1q_s64(_Q5, v196);
          v259 = v198.i64[1];
          v260 = vextq_s8((int8x16_t)v196, _Q3, 8uLL);
          v256 = v198.i64[0];
          v257 = v181;
          v261 = v160.i64[1];
          v258 = v160.i64[0];
          v262.i64[0] = v185;
          v262.i64[1] = v184;
          v199 = *(double *)(v234 + 8 * v75);
          v200 = (float64x2_t *)(v218 + 96 * v182);
          *v200 = vmulq_n_f64((float64x2_t)vzip1q_s64(v193, *(int64x2_t *)&v259), v199);
          v200[1] = vmulq_n_f64((float64x2_t)vzip2q_s64(v193, *(int64x2_t *)&v259), v199);
          v201 = (__int128 *)&v200[1];
          v200[2] = vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)&v256, *(int64x2_t *)((char *)&v260 + 8)), v199);
          v202 = (__int128 *)&v200[2];
          v200[3] = vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)&v256, *(int64x2_t *)((char *)&v260 + 8)), v199);
          v203 = (__int128 *)&v200[3];
          v200[4] = vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)((char *)&v257 + 8), v262), v199);
          v204 = (__int128 *)&v200[4];
          v200[5] = vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)((char *)&v257 + 8), v262), v199);
        }
        else
        {
          v200 = (float64x2_t *)(v218 + 96 * v182);
          *v200 = 0u;
          v200[1] = 0u;
          v201 = (__int128 *)&v200[1];
          v200[2] = 0u;
          v202 = (__int128 *)&v200[2];
          v200[3] = 0u;
          v203 = (__int128 *)&v200[3];
          v200[4] = 0u;
          v204 = (__int128 *)&v200[4];
          v200[5] = 0u;
        }
        v205 = *v201;
        v206 = *v202;
        v207 = *v203;
        v208 = *v204;
        v209 = v200[5];
        *(v80 - 3) = *v200;
        *(v80 - 2) = v205;
        *(v80 - 1) = v206;
        *v80 = v207;
        v80[1] = v208;
        v80[2] = v209;
      }
      v210 = *(int *)(v230 + v74);
      if ((_DWORD)v210 != -1)
      {
        if (((v98 > 2.22044605e-16) & v103) != 0)
        {
          v211 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6820, *v237);
          v212 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6830, *v237);
          v213 = (float64x2_t)vzip1q_s64(v211, v212);
          v214 = (float64x2_t)vzip2q_s64(v211, v212);
          v211.i64[0] = *(_QWORD *)(v234 + 8 * v75);
          v82 = vmulq_n_f64(v214, *(double *)v211.i64);
          v81 = (float64x2_t *)(v217 + 32 * v210);
          *v81 = vmulq_n_f64(v213, *(double *)v211.i64);
        }
        else
        {
          v81 = (float64x2_t *)(v217 + 32 * v210);
          v82 = 0uLL;
          *v81 = 0u;
        }
        v81[1] = v82;
        v83 = v81[1];
        v240[-1] = *v81;
        *v240 = v83;
      }
      v76 = v106 + 1;
      v77 += 6;
      v78 = v240 + 2;
      v75 += 2;
      v74 += 4;
      v79 += 4;
      v80 += 6;
    }
    while (v224 != v74);
  }
  *(_QWORD *)(a32 + 24) |= 1uLL;
  *(_QWORD *)(a31 + 24) |= 1uLL;
  *(_QWORD *)(a30 + 24) |= 1uLL;
  *(_QWORD *)(a29 + 24) |= 1uLL;
  *(_QWORD *)(a28 + 24) |= 1uLL;
  *(_QWORD *)(a27 + 24) |= 1uLL;
  *(_QWORD *)(a26 + 24) |= 1uLL;
  *(_QWORD *)(a25 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396A1714(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_2396A0628(*a1, a1[1], a1[30], a1[3], a1[4], a1[5], a1[6], a8, a1[8], a1[9], v9, a1[11], a1[12], v10, a1[14], a1[15], v11, a1[17], a1[18],
    v12,
    a1[20],
    v13,
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26],
    a1[27],
    a1[28],
    a1[29],
    a1[30],
    a1[31]);
  return 0;
}

uint64_t sub_2396A1780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  unsigned int *v41;
  int extent;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  float64x2_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  float64x2_t *v93;
  _OWORD *v94;
  _OWORD *v95;
  _OWORD *v96;
  float64x2_t *v97;
  float64x2_t v98;
  int v99;
  unsigned int v100;
  float64x2_t *v101;
  float64x2_t *v104;
  double v105;
  float64x2_t v106;
  float64x2_t *v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  unsigned __int8 v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  double v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  double v128;
  unsigned int v129;
  double v130;
  double v131;
  double *v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  double v138;
  double v139;
  float64x2_t v147;
  double v148;
  double v149;
  float64x2_t v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  float64_t v158;
  double v159;
  double v160;
  double v161;
  double v162;
  float64_t v163;
  double v164;
  double v165;
  double v166;
  float64x2_t v167;
  double v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  uint64_t v176;
  uint64_t v181;
  uint64_t v182;
  int64x2_t v183;
  int64x2_t v184;
  uint64_t v185;
  float64x2_t v186;
  float64x2_t v187;
  double v188;
  float64x2_t *v189;
  __int128 *v190;
  __int128 *v191;
  __int128 v192;
  __int128 v193;
  float64x2_t v194;
  float64x2_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  int v200;
  float64x2_t *v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  double v208;
  float64x2_t v209;
  float64x2_t *v210;
  __int128 *v211;
  __int128 *v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  float64x2_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int64x2_t v222;
  int64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  int64x2_t v228;
  int64x2_t v231;
  int64x2_t v234;
  float64x2_t *v235;
  __int128 *v236;
  __int128 *v237;
  __int128 *v238;
  __int128 *v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  float64x2_t v244;
  uint64_t v245;
  int64x2_t v246;
  int64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int8x16_t v269;
  float64x2_t v270;
  uint64_t v271;
  double *v272;
  uint64_t v273;
  double v274;
  float64x2_t v275;
  _OWORD *v276;
  float64x2_t *v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  _BYTE v286[32];
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  int8x16_t v292;
  uint64_t v293;
  float64x2_t v294;
  uint64_t v295;
  uint64_t v296;
  int8x16_t v297;
  uint64_t v298;
  int64x2_t v299;

  v41 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v259 = *v41;
  v252 = *(_QWORD *)(a2 + 16);
  v272 = *(double **)(a4 + 16);
  extent = _gc_buffer_get_extent();
  v43 = _gc_buffer_get_extent();
  v44 = _gc_buffer_get_extent();
  if (extent != 2 || v43 != v44)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(a5 + 24) |= 1uLL;
  }
  v251 = *(_QWORD *)(a5 + 16);
  v267 = *(_QWORD *)(a10 + 16);
  v268 = *(_QWORD *)(a7 + 16);
  v265 = *(_QWORD *)(a16 + 16);
  v266 = *(_QWORD *)(a13 + 16);
  v263 = *(_QWORD *)(a21 + 16);
  v264 = *(_QWORD *)(a19 + 16);
  v261 = *(_QWORD *)(a24 + 16);
  v262 = *(_QWORD *)(a22 + 16);
  v271 = *(_QWORD *)(a26 + 16);
  v260 = *(_QWORD *)(a27 + 16);
  v45 = _gc_buffer_get_extent();
  v46 = _gc_buffer_get_extent();
  v47 = _gc_buffer_get_extent();
  v48 = _gc_buffer_get_extent();
  if (v45 != 2 || v46 != 1 || v47 != v48)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a28 + 24) |= 1uLL;
  }
  v257 = *(_QWORD *)(a28 + 16);
  v49 = _gc_buffer_get_extent();
  v50 = _gc_buffer_get_extent();
  v51 = _gc_buffer_get_extent();
  v52 = _gc_buffer_get_extent();
  if (v49 != 2 || v50 != 4 || v51 != v52)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a29 + 24) |= 1uLL;
  }
  v256 = *(_QWORD *)(a29 + 16);
  v53 = _gc_buffer_get_extent();
  v54 = _gc_buffer_get_extent();
  v55 = _gc_buffer_get_extent();
  v56 = _gc_buffer_get_extent();
  if (v53 != 2 || v54 != 3 || v55 != v56)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a30 + 24) |= 1uLL;
  }
  v255 = *(_QWORD *)(a30 + 16);
  v57 = _gc_buffer_get_extent();
  v58 = _gc_buffer_get_extent();
  v59 = _gc_buffer_get_extent();
  v60 = _gc_buffer_get_extent();
  if (v57 != 2 || v58 != 6 || v59 != v60)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a31 + 24) |= 1uLL;
  }
  v254 = *(_QWORD *)(a31 + 16);
  v61 = _gc_buffer_get_extent();
  v62 = _gc_buffer_get_extent();
  v63 = _gc_buffer_get_extent();
  v64 = _gc_buffer_get_extent();
  if (v61 != 2 || v62 != 2 || v63 != v64)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a32 + 24) |= 1uLL;
  }
  v253 = *(_QWORD *)(a32 + 16);
  v65 = _gc_buffer_get_extent();
  v66 = _gc_buffer_get_extent();
  v67 = _gc_buffer_get_extent();
  v68 = _gc_buffer_get_extent();
  if (v65 != 2 || v66 != 1 || v67 != v68)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a33 + 24) |= 1uLL;
  }
  v258 = *(_QWORD *)(a33 + 16);
  v69 = _gc_buffer_get_extent();
  v70 = _gc_buffer_get_extent();
  v71 = _gc_buffer_get_extent();
  v72 = _gc_buffer_get_extent();
  if (v69 != 2 || v70 != 4 || v71 != v72)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a34 + 24) |= 1uLL;
  }
  v73 = *(_QWORD *)(a34 + 16);
  v74 = _gc_buffer_get_extent();
  v75 = _gc_buffer_get_extent();
  v76 = _gc_buffer_get_extent();
  v77 = _gc_buffer_get_extent();
  if (v74 != 2 || v75 != 3 || v76 != v77)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a35 + 24) |= 1uLL;
  }
  v78 = *(_QWORD *)(a35 + 16);
  v79 = _gc_buffer_get_extent();
  v80 = _gc_buffer_get_extent();
  v81 = _gc_buffer_get_extent();
  v82 = _gc_buffer_get_extent();
  if (v79 != 2 || v80 != 6 || v81 != v82)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a36 + 24) |= 1uLL;
  }
  v83 = *(_QWORD *)(a36 + 16);
  v84 = _gc_buffer_get_extent();
  v85 = _gc_buffer_get_extent();
  v86 = _gc_buffer_get_extent();
  v87 = _gc_buffer_get_extent();
  if (v84 != 2 || v85 != 2 || v86 != v87)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(a37 + 24) |= 1uLL;
  }
  v88 = *(float64x2_t **)(a37 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v259 >= 1)
  {
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = (int *)(v252 + 16);
    v93 = v88 + 1;
    v273 = v251 + 8;
    v94 = (_OWORD *)(v78 + 16);
    v95 = (_OWORD *)(v83 + 48);
    v96 = (_OWORD *)(v73 + 32);
    do
    {
      v276 = v94;
      v277 = v93;
      v100 = *(v92 - 1);
      v99 = *v92;
      if (*v92 >> 30 == 3)
        v99 = *v92 + 0x40000000;
      v101 = (float64x2_t *)(v271 + 72 * v99);
      _Q1 = v101[1];
      _Q2 = v101[2];
      if (v100 >> 30 == 3)
        v100 += 0x40000000;
      v104 = (float64x2_t *)(v261 + 24 * (int)v100);
      v105 = v104[1].f64[0];
      v106 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v101, v104->f64[0]), (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q2, 8uLL), *v104, 1), v101[3], v105);
      _Q1.f64[0] = v104->f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      _Q2.f64[0] = _D0 + v101[4].f64[0] * v105;
      v110 = (float64x2_t *)(v260 + 24 * v99);
      _Q1.f64[0] = v110[1].f64[0];
      v269 = (int8x16_t)_Q2;
      v270 = v106;
      *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(_Q2, _Q1);
      v111 = fabs(_Q1.f64[0]);
      v112 = vmuld_n_f64(_Q1.f64[0], _Q1.f64[0]);
      v274 = _Q1.f64[0];
      v275 = vaddq_f64(v106, *v110);
      v113 = vmlad_n_f64(vmuld_lane_f64(v275.f64[1], v275, 1), v275.f64[0], v275.f64[0]);
      v114 = sqrt(v113);
      v115 = fabs(v114);
      v116 = v113 + v112;
      v117 = -v114;
      v118 = (v115 > 2.22044605e-16) & (v113 + v112 > 2.22044605e-16) & (v111 > 2.22044605e-16
                                                                      && v112 > 2.22044605e-16
                                                                      && v113 > 0.0
                                                                      && v114 > 2.22044605e-16) & (fmin(v115, v111) > 2.22044605e-16);
      v119 = *(v92 - 3);
      if (v119 >> 30 == 3)
        v120 = v119 + 0x40000000;
      else
        v120 = *(v92 - 3);
      v121 = v90;
      v122 = atan2(v114, _Q1.f64[0]);
      v126.f64[0] = v122 * v122;
      v127.f64[0] = v122 * (v122 * v122);
      v128 = v122 * v122 * v127.f64[0];
      v129 = *(v92 - 4);
      v130 = *v272;
      v131 = 1.0 / v274;
      v132 = (double *)(v262 + 32 * (int)v120);
      v133.f64[0] = v122 * v122 * v128;
      v135.f64[0] = v132[2];
      v134.f64[0] = v132[3];
      v136.f64[0] = v132[1];
      v137.f64[0] = v122
                  + v127.f64[0] * *v132
                  + v128 * v136.f64[0]
                  + v133.f64[0] * v135.f64[0]
                  + v134.f64[0] * (v122 * v122 * v133.f64[0]);
      if (v129 >> 30 == 3)
        v129 += 0x40000000;
      if (v113 >= 0.0000000149011612)
        v131 = v137.f64[0] / v114;
      v138 = v130 * v131;
      v139 = *(double *)(v263 + 8 * (int)v129);
      _D18 = vmuld_lane_f64(v139, v275, 1);
      _Q21 = vmulq_n_f64((float64x2_t)xmmword_239EC6820, v130);
      _Q24 = vmulq_n_f64((float64x2_t)xmmword_239EC6830, v130);
      __asm
      {
        FMLA            D2, D18, V21.D[1]
        FMLA            D4, D18, V24.D[1]
      }
      if (_NF != _VF)
        v123.f64[0] = 0.0;
      else
        v123.f64[0] = 1.0;
      v137.f64[0] = -v137.f64[0] / v113;
      _Q21.f64[0] = 1.0 / v114;
      v125.f64[0] = v122 * (v126.f64[0] * v126.f64[0]);
      _Q24.f64[0] = v126.f64[0] * v126.f64[0] * v125.f64[0];
      v147 = vmulq_f64(v123, vmulq_f64(_Q21, _Q24));
      v278 = vmuld_n_f64(_D2, v147.f64[0]);
      v279 = vmuld_n_f64(_D4, v147.f64[0]);
      v147.f64[0] = v126.f64[0] * v125.f64[0];
      *(_QWORD *)&v147.f64[0] = *(_OWORD *)&vmulq_f64(v123, vmulq_f64(_Q21, v147));
      v280 = vmuld_n_f64(_D2, v147.f64[0]);
      v281 = vmuld_n_f64(_D4, v147.f64[0]);
      *(_QWORD *)&v147.f64[0] = *(_OWORD *)&vmulq_f64(v123, vmulq_f64(_Q21, v125));
      v282 = vmuld_n_f64(_D2, v147.f64[0]);
      v283 = vmuld_n_f64(_D4, v147.f64[0]);
      *(_QWORD *)&v148 = *(_OWORD *)&vmulq_f64(v123, vmulq_f64(_Q21, v136));
      v124.f64[0] = *v132;
      *(_QWORD *)&v149 = *(_OWORD *)&vmulq_f64(v123, vmulq_f64(_Q21, v124));
      v150 = vmulq_n_f64(vmulq_n_f64(v134, 1.0 / v114), v123.f64[0]);
      *(_QWORD *)&v151 = *(_OWORD *)&vmlaq_f64(vmulq_f64(v126, v150), v123, vmulq_f64(_Q21, v135));
      v152 = vmuld_n_f64(_D2, v151);
      v153 = vmuld_n_f64(_D4, v151);
      v154 = vmlad_n_f64(v126.f64[0] * v152, _D2, v148);
      v155 = vmlad_n_f64(v126.f64[0] * v153, _D4, v148);
      v156 = vmlad_n_f64(v126.f64[0] * v154, _D2, v149);
      v157 = vmlad_n_f64(v126.f64[0] * v155, _D4, v149);
      v158 = v126.f64[0] * v156 + 1.0 / v114 * (v123.f64[0] * _D2);
      v147.f64[0] = v126.f64[0] * v157 + 1.0 / v114 * (v123.f64[0] * _D4);
      *(_QWORD *)&v159 = *(_OWORD *)&vmulq_f64(v123, v137);
      *(_QWORD *)&v160 = *(_OWORD *)&vmulq_f64(v123, vmulq_f64(_Q21, v127));
      v284 = vmuld_n_f64(_D2, v160);
      v285 = vmuld_n_f64(_D4, v160);
      *(_QWORD *)&v161 = *(_OWORD *)&vmulq_f64(v133, v150);
      v150.f64[0] = vmlad_n_f64(v128 * v152, _D2, v161);
      v162 = vmlad_n_f64(v128 * v153, _D4, v161);
      v163 = v150.f64[0] + v127.f64[0] * v154;
      v164 = v139 * v138;
      v165 = v122 * (v163 + v122 * v156) + v158 + v122 * (v163 + v122 * v156);
      v166 = v122 * (v162 + v127.f64[0] * v155 + v122 * v157)
           + v147.f64[0]
           + v122 * (v162 + v127.f64[0] * v155 + v122 * v157);
      v167 = vaddq_f64(v275, v275);
      *(_QWORD *)v286 = 0;
      *(_OWORD *)&v286[16] = 0u;
      *(float64x2_t *)&v286[8] = vmlaq_n_f64(vmulq_n_f64(v167, 0.5 / v114 * vmlad_n_f64(v274 / v116 * v166, _D4, v159)), (float64x2_t)xmmword_239EC6830, v139 * v138);
      v168 = -1.0 / v112;
      if (_NF == _VF)
        v168 = 0.0;
      v287.f64[0] = 0.0;
      v288.f64[0] = 0.0;
      v287.f64[1] = v278;
      v288.f64[1] = v279;
      v289.f64[0] = 0.0;
      v169 = (int64x2_t)vaddq_f64(v287, (float64x2_t)*(unint64_t *)&v280);
      v170 = (int64x2_t)vaddq_f64(v288, (float64x2_t)*(unint64_t *)&v281);
      v290.f64[0] = 0.0;
      v289.f64[1] = v282;
      v290.f64[1] = v283;
      v291.f64[1] = 0.0;
      v292.i64[0] = 0;
      v291.f64[0] = v117 / v116 * v165 + v168 * _D2;
      *(double *)&v292.i64[1] = v117 / v116 * v166 + v168 * _D4;
      v171 = (int64x2_t)vaddq_f64(*(float64x2_t *)v286, v291);
      v172 = vaddq_f64((float64x2_t)vextq_s8(*(int8x16_t *)v286, *(int8x16_t *)&v286[16], 8uLL), (float64x2_t)vextq_s8((int8x16_t)v291, v292, 8uLL));
      v173 = vaddq_f64(*(float64x2_t *)&v286[16], (float64x2_t)v292);
      v174 = vzip1q_s64(v171, (int64x2_t)v172);
      v175 = vzip2q_s64((int64x2_t)v172, (int64x2_t)v173);
      v176 = *(int *)(v268 + v89);
      if ((_DWORD)v176 != -1)
      {
        if (((v113 > 2.22044605e-16) & v118) != 0)
        {
          _D27 = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
          _Q28 = vmulq_n_f64((float64x2_t)xmmword_239EC6820, v138);
          _Q1 = vmulq_n_f64((float64x2_t)xmmword_239EC6830, v138);
          __asm
          {
            FMLA            D29, D27, V28.D[1]
            FMLA            D28, D27, V1.D[1]
          }
          _Q29.f64[1] = _Q28.f64[0];
          v181 = 2 * v91;
          v182 = v257 + 16 * v176;
          *(float64x2_t *)v182 = vmulq_n_f64(_Q29, *(double *)(v273 + 8 * v121));
        }
        else
        {
          v182 = v257 + 16 * v176;
          *(_QWORD *)v182 = 0;
          *(_QWORD *)(v182 + 8) = 0;
          v181 = v121;
        }
        *(_OWORD *)(v258 + 8 * v181) = *(_OWORD *)v182;
      }
      v183 = (int64x2_t)vaddq_f64(v289, (float64x2_t)*(unint64_t *)&v284);
      v184 = (int64x2_t)vaddq_f64(v290, (float64x2_t)*(unint64_t *)&v285);
      v185 = *(int *)(v267 + v89);
      if ((_DWORD)v185 != -1)
      {
        if (((v113 > 2.22044605e-16) & v118) != 0)
        {
          v186 = (float64x2_t)vzip1q_s64(v169, v170);
          v187 = (float64x2_t)vzip2q_s64(v169, v170);
          v188 = *(double *)(v273 + 8 * v121);
          v189 = (float64x2_t *)(v256 + (v185 << 6));
          *v189 = vmulq_n_f64((float64x2_t)vzip1q_s64(v183, v184), v188);
          v189[1] = vmulq_n_f64((float64x2_t)vzip2q_s64(v183, v184), v188);
          v190 = (__int128 *)&v189[1];
          v189[2] = vmulq_n_f64(v186, v188);
          v191 = (__int128 *)&v189[2];
          v189[3] = vmulq_n_f64(v187, v188);
        }
        else
        {
          v189 = (float64x2_t *)(v256 + (v185 << 6));
          *v189 = 0uLL;
          v189[1] = 0uLL;
          v190 = (__int128 *)&v189[1];
          v189[2] = 0uLL;
          v191 = (__int128 *)&v189[2];
          v189[3] = 0uLL;
        }
        v192 = *v190;
        v193 = *v191;
        v194 = v189[3];
        *(v96 - 2) = *v189;
        *(v96 - 1) = v192;
        *v96 = v193;
        v96[1] = v194;
      }
      v195 = vmlaq_n_f64(vmulq_n_f64(v167, 0.5 / v114 * vmlad_n_f64(v274 / v116 * v165, _D2, v159)), (float64x2_t)xmmword_239EC6820, v164);
      v196 = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL).u64[0];
      v197 = *(int *)(v266 + v89);
      if ((_DWORD)v197 != -1)
      {
        if (((v113 > 2.22044605e-16) & v118) != 0)
        {
          v198 = vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL).u64[0];
          v199 = vdupq_laneq_s64((int64x2_t)v173, 1).u64[0];
          v200 = *v92;
          if (*v92 >> 30 == 3)
            v200 = *v92 + 0x40000000;
          v201 = (float64x2_t *)(v271 + 72 * v200);
          v202 = v201[1];
          v203.f64[0] = v195.f64[0];
          v203.f64[1] = v172.f64[0];
          *(_QWORD *)&v204.f64[0] = v196;
          *(_QWORD *)&v204.f64[1] = v198;
          *(_QWORD *)&v205.f64[0] = v171.i64[0];
          *(_QWORD *)&v205.f64[1] = v199;
          v206 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v201->f64[0]), v204, *v201, 1), v205, v202.f64[0]);
          v207 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v203, v202, 1), v204, v201[2].f64[0]), v205, v201[2], 1);
          v208 = *(double *)(v273 + 8 * v121);
          v209 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v203, v201[3].f64[0]), v204, v201[3], 1), v205, v201[4].f64[0]);
          v210 = (float64x2_t *)(v255 + 48 * v197);
          *v210 = vmulq_n_f64(v206, v208);
          v210[1] = vmulq_n_f64(v207, v208);
          v211 = (__int128 *)&v210[1];
          v210[2] = vmulq_n_f64(v209, v208);
          v212 = (__int128 *)&v210[2];
        }
        else
        {
          v210 = (float64x2_t *)(v255 + 48 * v197);
          *v210 = 0uLL;
          v210[1] = 0uLL;
          v211 = (__int128 *)&v210[1];
          v210[2] = 0uLL;
          v212 = (__int128 *)&v210[2];
        }
        v213 = *v211;
        v214 = *v212;
        *(v276 - 1) = *v210;
        *v276 = v213;
        v276[1] = v214;
      }
      v215 = *(int *)(v265 + v89);
      if ((_DWORD)v215 != -1)
      {
        if (((v113 > 2.22044605e-16) & v118) != 0)
        {
          v216.f64[0] = 0.0;
          *(_QWORD *)&v216.f64[1] = v269.i64[0];
          v218 = v174.i64[1];
          v217 = v174.i64[0];
          v219 = v175.i64[1];
          v220 = v175.i64[0];
          *(_QWORD *)&_Q7.f64[0] = vdupq_laneq_s64((int64x2_t)v270, 1).u64[0];
          _Q7.f64[1] = -v270.f64[0];
          v222 = (int64x2_t)vnegq_f64(v216);
          v223 = (int64x2_t)vnegq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vnegq_f64((float64x2_t)vextq_s8((int8x16_t)v270, v269, 8uLL)), 1).u64[0]);
          v224 = vnegq_f64(_Q7);
          v225 = (float64x2_t)vzip1q_s64(v222, v223);
          v226 = (float64x2_t)vzip2q_s64(v222, v223);
          v227 = (float64x2_t)vextq_s8((int8x16_t)v270, (int8x16_t)vnegq_f64(v270), 8uLL);
          v228 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v195.f64[0]), v226, v195, 1), v227, *(double *)v171.i64);
          _Q6 = (int64x2_t)vmulq_f64(v195, v224);
          _D18 = v195.f64[1];
          __asm { FMLS            D6, D18, V7.D[1] }
          v231 = (int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_n_f64(v225, v172.f64[0]), v226, v172, 1), v227, v173, 1);
          _Q5 = (int8x16_t)vmulq_f64(v172, v224);
          _D4 = v172.f64[1];
          __asm { FMLS            D5, D4, V7.D[1] }
          v234 = vzip1q_s64(_Q6, v231);
          v296 = v234.i64[1];
          v297 = vextq_s8((int8x16_t)v231, _Q5, 8uLL);
          v293 = v234.i64[0];
          v294 = v195;
          v295 = v217;
          v298 = v218;
          v299.i64[0] = v220;
          v299.i64[1] = v219;
          v224.f64[0] = *(float64_t *)(v273 + 8 * v121);
          v235 = (float64x2_t *)(v254 + 96 * v215);
          *v235 = vmulq_n_f64((float64x2_t)vzip1q_s64(v228, *(int64x2_t *)&v296), v224.f64[0]);
          v235[1] = vmulq_n_f64((float64x2_t)vzip2q_s64(v228, *(int64x2_t *)&v296), v224.f64[0]);
          v236 = (__int128 *)&v235[1];
          v235[2] = vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)&v293, *(int64x2_t *)((char *)&v297 + 8)), v224.f64[0]);
          v237 = (__int128 *)&v235[2];
          v235[3] = vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)&v293, *(int64x2_t *)((char *)&v297 + 8)), v224.f64[0]);
          v238 = (__int128 *)&v235[3];
          v235[4] = vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)((char *)&v294 + 8), v299), v224.f64[0]);
          v239 = (__int128 *)&v235[4];
          v235[5] = vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)((char *)&v294 + 8), v299), v224.f64[0]);
        }
        else
        {
          v235 = (float64x2_t *)(v254 + 96 * v215);
          *v235 = 0uLL;
          v235[1] = 0uLL;
          v236 = (__int128 *)&v235[1];
          v235[2] = 0uLL;
          v237 = (__int128 *)&v235[2];
          v235[3] = 0uLL;
          v238 = (__int128 *)&v235[3];
          v235[4] = 0uLL;
          v239 = (__int128 *)&v235[4];
          v235[5] = 0uLL;
        }
        v240 = *v236;
        v241 = *v237;
        v242 = *v238;
        v243 = *v239;
        v244 = v235[5];
        *(v95 - 3) = *v235;
        *(v95 - 2) = v240;
        *(v95 - 1) = v241;
        *v95 = v242;
        v95[1] = v243;
        v95[2] = v244;
      }
      v245 = *(int *)(v264 + v89);
      if ((_DWORD)v245 != -1)
      {
        if (((v113 > 2.22044605e-16) & v118) != 0)
        {
          v246 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6820, *v272);
          v247 = (int64x2_t)vmulq_n_f64((float64x2_t)xmmword_239EC6830, *v272);
          v248 = (float64x2_t)vzip1q_s64(v246, v247);
          v249 = (float64x2_t)vzip2q_s64(v246, v247);
          v246.i64[0] = *(_QWORD *)(v273 + 8 * v121);
          v97 = (float64x2_t *)(v253 + 32 * v245);
          *v97 = vmulq_n_f64(v248, *(double *)v246.i64);
          v97[1] = vmulq_n_f64(v249, *(double *)v246.i64);
        }
        else
        {
          v97 = (float64x2_t *)(v253 + 32 * v245);
          *v97 = 0uLL;
          v97[1] = 0uLL;
        }
        v98 = v97[1];
        v277[-1] = *v97;
        *v277 = v98;
      }
      ++v91;
      v92 += 6;
      v93 = v277 + 2;
      v90 = v121 + 2;
      v89 += 4;
      v94 = v276 + 3;
      v95 += 6;
      v96 += 4;
    }
    while (4 * v259 != v89);
  }
  *(_QWORD *)(a37 + 24) |= 1uLL;
  *(_QWORD *)(a36 + 24) |= 1uLL;
  *(_QWORD *)(a35 + 24) |= 1uLL;
  *(_QWORD *)(a34 + 24) |= 1uLL;
  *(_QWORD *)(a33 + 24) |= 1uLL;
  *(_QWORD *)(a32 + 24) |= 1uLL;
  *(_QWORD *)(a31 + 24) |= 1uLL;
  *(_QWORD *)(a30 + 24) |= 1uLL;
  *(_QWORD *)(a29 + 24) |= 1uLL;
  *(_QWORD *)(a28 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396A2B28(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_2396A1780(*a1, a1[1], a1[21], a1[3], a1[4], a1[5], a1[6], a1[23], a1[8], a1[9], v2, a1[11], a1[12], v3, a1[14], a1[15], v4, a1[17], a1[18],
    v5,
    a1[20],
    a1[21],
    v6,
    a1[23],
    v7,
    a1[25],
    a1[26],
    a1[27],
    a1[28],
    a1[29],
    a1[30],
    a1[31],
    a1[32],
    a1[33],
    a1[34],
    a1[35],
    a1[36]);
  return 0;
}

uint64_t sub_2396A2BC0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  sub_2396888B4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a7, a8, v9, a1[9], a1[10]);
  return 0;
}

uint64_t sub_2396A2BF4(uint64_t *a1)
{
  sub_239688BB8(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2C14(uint64_t *a1)
{
  sub_239688BB8(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2C34(uint64_t *a1)
{
  sub_239688CE0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2C54(uint64_t *a1)
{
  sub_239688CE0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2C74(uint64_t *a1)
{
  sub_239688E40(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2C94(uint64_t *a1)
{
  sub_239688E40(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2CB4(uint64_t *a1)
{
  sub_239688F9C(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2CD4(uint64_t *a1)
{
  sub_239688CE0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2CF4(uint64_t *a1)
{
  sub_239688CE0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2D14(uint64_t *a1)
{
  sub_239688F9C(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2D34(uint64_t *a1)
{
  sub_239688F9C(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2D54(uint64_t *a1)
{
  sub_23968914C(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2D74(uint64_t *a1)
{
  sub_239688CE0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2D94(uint64_t *a1)
{
  sub_2396894E0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A2DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  uint64_t i;
  int v52;
  uint64_t v53;
  float64x2_t *v54;
  uint64_t v55;
  float64x2_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  float64x2_t *v60;
  float64x2_t v61;
  int *v62;
  const double *v63;
  uint64_t v65;
  double v66;
  uint64_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  uint64_t v81;
  uint64_t v82;
  float64x2_t v83;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  const double *v91;
  uint64_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float64x2_t v108;
  float64x2_t v109;
  uint64_t v112;
  int v113;
  uint64_t v114;
  float64x2_t *v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  float64x2_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float64x2_t *v130;
  float64x2_t v131;
  _OWORD *v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  float64x2_t *v141;
  float64x2_t v142;
  const double *v144;
  uint64_t v145;
  float64x2_t v146;
  float64x2_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float64x2_t v158;
  float64x2_t v159;
  uint64_t v161;
  int v162;
  uint64_t v163;
  float64x2_t *v164;
  uint64_t v165;
  float64x2_t v166;
  uint64_t v167;
  int *v168;
  uint64_t v169;
  float64x2_t *v170;
  float64x2_t v171;
  int *v172;
  uint64_t v173;
  int64x2_t v174;
  int64x2_t v175;
  uint64_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  uint64_t v188;
  int64x2_t v190;
  uint64_t v191;
  uint64_t v192;
  float64x2_t v195;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v202;
  const double *v205;
  float64x2_t v206;
  uint64_t v208;
  float64x2_t v209;
  float64x2_t v210;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  float64x2_t v222;
  float64x2_t v223;
  uint64_t v226;
  int v227;
  uint64_t v228;
  float64x2_t *v229;
  uint64_t v230;
  uint64_t v231;
  int *v232;
  uint64_t v233;
  uint64_t v234;
  float64x2_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  float64x2_t *v241;
  float64x2_t *v243;
  double v244;
  float64x2_t v245;
  float64x2_t v246;
  _OWORD *v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  float64x2_t *v256;
  float64x2_t v257;
  const double *v259;
  uint64_t v260;
  float64x2_t v261;
  float64x2_t v262;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int *v281;
  int *v282;
  uint64_t v283;
  uint64_t v284;
  int *v285;
  uint64_t v286;
  int *v287;
  uint64_t v288;
  float64x2x2_t v289;
  float64x2x2_t v290;
  float64x2x2_t v291;
  float64x2x3_t v292;

  v37 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v271 = v37[2];
  v273 = *v37;
  if ((**(_BYTE **)(a34 + 16) & 1) == 0)
  {
    v269 = a37;
    if ((**(_BYTE **)(a35 + 16) & 1) == 0)
      goto LABEL_3;
    goto LABEL_17;
  }
  v38 = *(_QWORD *)(a8 + 16);
  v39 = *(_QWORD *)(a9 + 16);
  v40 = *(_QWORD *)(a11 + 16);
  v41 = *(_QWORD *)(a12 + 16);
  v42 = *(_QWORD *)(a13 + 16);
  v270 = *(_QWORD *)(a16 + 16);
  v285 = *(int **)(a18 + 16);
  v43 = *(_QWORD *)(a19 + 16);
  v44 = *(_QWORD *)(a20 + 16);
  v45 = *(_QWORD *)(a21 + 16);
  v46 = *(_QWORD *)(a22 + 16);
  v47 = *(_QWORD *)(a23 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v273 >= 1)
  {
    for (i = 0; i != v273; ++i)
    {
      if (i)
      {
        v52 = v285[i - 1];
        v53 = v285[i];
        if (v52 < (int)v53)
          goto LABEL_12;
      }
      else
      {
        v52 = 0;
        v53 = *v285;
        if ((int)v53 > 0)
        {
LABEL_12:
          v54 = (float64x2_t *)(v47 + 24 * i);
          v55 = 3 * i + 2;
          v56 = *v54;
          v48.f64[0] = *(float64_t *)(v47 + 8 * v55);
          v57 = v53 - v52;
          v58 = (int *)(v270 + 4 * v52);
          do
          {
            v59 = *v58++;
            v60 = (float64x2_t *)(v43 + 24 * v59);
            v61 = *v60;
            v62 = (int *)(v42 + 24 * v59);
            v49.f64[0] = v60[1].f64[0];
            _Q4.f64[0] = *(float64_t *)(v38 + 8 * *v62);
            v63 = (const double *)(v44 + 72 * v59);
            v292 = vld3q_f64(v63);
            v63 += 6;
            _Q6 = *(_OWORD *)v63;
            v65 = v39 + 24 * v62[1];
            v66 = *(double *)(v65 + 16);
            _D21 = *(_QWORD *)(v65 + 8);
            v68 = v45 + 144 * v59;
            v69 = *(int64x2_t *)(v68 + 32);
            v70 = *(int64x2_t *)(v68 + 48);
            __asm { FMLA            D20, D21, V6.D[1] }
            v76 = *(int64x2_t *)(v68 + 80);
            v77 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v68, v70);
            v78 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v68, v70);
            v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v292.val[0], *(double *)v65), v292.val[1], *(float64x2_t *)v65, 1), v292.val[2], v66);
            _Q25 = *(float64x2_t *)(v68 + 96);
            v292.val[0] = *(float64x2_t *)(v68 + 112);
            v81 = 6 * v59 + 4;
            v82 = v40 + 48 * *(int *)(v42 + 4 * v81);
            v292.val[1].f64[0] = _D20 + *(double *)(v44 + 72 * v59 + 64) * v66;
            v83 = vmlaq_laneq_f64(vmulq_n_f64(v77, *(double *)v82), v78, *(float64x2_t *)v82, 1);
            _Q7 = *(_OWORD *)(v68 + 128);
            v85 = vmlaq_n_f64(v79, v61, _Q4.f64[0]);
            v86 = (float64x2_t)vzip1q_s64(v69, v76);
            v87 = (float64x2_t)vzip2q_s64(v69, v76);
            _Q21 = vmulq_f64(_Q25, *(float64x2_t *)v82);
            v292.val[2].f64[0] = *(float64_t *)(v82 + 8);
            __asm { FMLA            D21, D18, V25.D[1] }
            v292.val[1] = vmlaq_f64(v292.val[1], v49, _Q4);
            _D3 = *(_QWORD *)(v82 + 24);
            __asm { FMLA            D21, D3, V16.D[1] }
            _D3 = *(_QWORD *)(v82 + 40);
            v91 = (const double *)(v46 + 48 * v59);
            *(float64x2x2_t *)v292.val[2].f64 = vld2q_f64(v91);
            __asm { FMLA            D21, D3, V7.D[1] }
            _Q3 = *(float64x2_t *)(v46 + 8 * v81);
            v93 = v62[5];
            _Q4 = *(float64x2_t *)(v41 + 16 * v93);
            v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v83, (float64x2_t)vzip1q_s64(*(int64x2_t *)(v68 + 16), *(int64x2_t *)(v68 + 64)), *(double *)(v82 + 16)), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v68 + 16), *(int64x2_t *)(v68 + 64)), *(float64x2_t *)(v82 + 16), 1), v86, *(double *)(v82 + 32)), v87, *(float64x2_t *)(v82 + 32), 1);
            v96 = vmlaq_laneq_f64(vmulq_n_f64(v292.val[2], _Q4.f64[0]), v95, _Q4, 1);
            _Q7 = vmulq_f64(_Q3, _Q4);
            _Q4.f64[0] = *(float64_t *)(v41 + 16 * v93 + 8);
            __asm { FMLA            D7, D4, V3.D[1] }
            v49 = vaddq_f64(vaddq_f64(v292.val[1], _Q21), _Q7);
            v56 = vsubq_f64(v56, vaddq_f64(vaddq_f64(v85, v94), v96));
            v48 = vsubq_f64(v48, v49);
            --v57;
          }
          while (v57);
          *v54 = v56;
          *(float64_t *)(v47 + 8 * v55) = v48.f64[0];
        }
      }
    }
  }
  *(_QWORD *)(a23 + 24) |= 1uLL;
  v269 = a37;
  if ((**(_BYTE **)(a35 + 16) & 1) == 0)
  {
LABEL_3:
    if ((**(_BYTE **)(a36 + 16) & 1) == 0)
      goto LABEL_4;
    goto LABEL_36;
  }
LABEL_17:
  v266 = *(_QWORD *)(a5 + 16);
  v267 = *(_QWORD *)(a3 + 16);
  v264 = *(_QWORD *)(a7 + 16);
  v265 = *(_QWORD *)(a6 + 16);
  v98 = *(_QWORD *)(a8 + 16);
  v99 = *(_QWORD *)(a10 + 16);
  v100 = *(_QWORD *)(a11 + 16);
  v101 = *(_QWORD *)(a12 + 16);
  v102 = *(_QWORD *)(a24 + 16);
  v282 = *(int **)(a29 + 16);
  v286 = *(_QWORD *)(a27 + 16);
  v103 = *(_QWORD *)(a30 + 16);
  v104 = *(_QWORD *)(a31 + 16);
  v105 = *(_QWORD *)(a32 + 16);
  v106 = *(_QWORD *)(a33 + 16);
  v107 = *(_QWORD *)(a23 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v271 >= 1)
  {
    v112 = 0;
    while (v112)
    {
      v113 = v282[v112 - 1];
      v114 = v282[v112];
      if (v113 < (int)v114)
        goto LABEL_24;
LABEL_19:
      if (++v112 == v271)
        goto LABEL_35;
    }
    v113 = 0;
    v114 = *v282;
    if ((int)v114 <= 0)
      goto LABEL_19;
LABEL_24:
    v115 = (float64x2_t *)(v107 + 24 * v112);
    v116 = 3 * v112 + 2;
    v117 = v114 - v113;
    v118 = (int *)(v286 + 4 * v113);
    while (1)
    {
      v119 = *v118;
      v120 = *(int *)(v102 + 24 * v119);
      if (v120 >> 30 != 3)
      {
        v109.f64[0] = *(float64_t *)(v107 + 8 * v116);
        v121 = (float64x2_t *)(v103 + 24 * v119);
        _Q3.f64[0] = *(float64_t *)(v98 + 8 * *(int *)(v267 + 4 * v120));
        _Q4.f64[0] = v121[1].f64[0];
        v109 = vmlsq_f64(v109, _Q4, _Q3);
        v108 = vmlsq_lane_f64(*v115, *v121, _Q3.f64[0], 0);
        *v115 = v108;
        *(float64_t *)(v107 + 8 * v116) = v109.f64[0];
      }
      v122 = 6 * v119;
      v123 = *(int *)(v102 + ((24 * v119) | 4));
      if (v123 >> 30 == 3)
      {
        v124 = v122 + 4;
        v125 = *(int *)(v102 + 4 * (v122 + 4));
        if (v125 >> 30 == 3)
          goto LABEL_30;
      }
      else
      {
        v109.f64[0] = *(float64_t *)(v107 + 8 * v116);
        v127 = v104 + 96 * v119;
        _Q3 = *(float64x2_t *)(v127 + 16);
        _Q4 = *(float64x2_t *)(v127 + 32);
        _Q6 = *(float64x2_t *)(v127 + 64);
        _Q7 = *(_OWORD *)(v127 + 80);
        v130 = (float64x2_t *)(v99 + 32 * *(int *)(v266 + 4 * v123));
        v131 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v127, (int64x2_t)_Q4), v130->f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v127, (int64x2_t)_Q4), *v130, 1), (float64x2_t)vzip1q_s64((int64x2_t)_Q3, *(int64x2_t *)(v127 + 48)), v130[1].f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q3, *(int64x2_t *)(v127 + 48)), v130[1], 1);
        _Q2 = vmulq_f64(_Q6, *v130);
        _Q3.f64[0] = v130->f64[1];
        __asm { FMLA            D2, D3, V6.D[1] }
        _Q3.f64[0] = v130[1].f64[1];
        __asm { FMLA            D2, D3, V7.D[1] }
        v108 = vsubq_f64(*v115, v131);
        v109 = vsubq_f64(v109, _Q2);
        *v115 = v108;
        *(float64_t *)(v107 + 8 * v116) = v109.f64[0];
        v124 = v122 + 4;
        v125 = *(int *)(v102 + 4 * (v122 + 4));
        if (v125 >> 30 == 3)
        {
LABEL_30:
          v126 = *(int *)(v102 + 24 * v119 + 20);
          if (v126 >> 30 != 3)
            goto LABEL_34;
          goto LABEL_25;
        }
      }
      v109.f64[0] = *(float64_t *)(v107 + 8 * v116);
      v133 = (_OWORD *)(v105 + 144 * v119);
      v134 = *(int64x2_t *)v133;
      _Q3 = *((float64x2_t *)v133 + 1);
      _Q4 = *((float64x2_t *)v133 + 2);
      v135 = *((int64x2_t *)v133 + 3);
      v136 = *((int64x2_t *)v133 + 4);
      v137 = *((int64x2_t *)v133 + 5);
      _Q16 = *((float64x2_t *)v133 + 6);
      _Q17 = v133[7];
      _Q18 = v133[8];
      v141 = (float64x2_t *)(v100 + 48 * *(int *)(v265 + 4 * v125));
      v142 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v134, v135), v141->f64[0]), (float64x2_t)vzip2q_s64(v134, v135), *v141, 1), (float64x2_t)vzip1q_s64((int64x2_t)_Q3, v136), v141[1].f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q3, v136), v141[1], 1), (float64x2_t)vzip1q_s64((int64x2_t)_Q4, v137), v141[2].f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q4, v137), v141[2], 1);
      _Q2 = vmulq_f64(_Q16, *v141);
      _Q3.f64[0] = v141->f64[1];
      __asm { FMLA            D2, D3, V16.D[1] }
      _Q3.f64[0] = v141[1].f64[1];
      __asm { FMLA            D2, D3, V17.D[1] }
      _Q3.f64[0] = v141[2].f64[1];
      __asm { FMLA            D2, D3, V18.D[1] }
      v108 = vsubq_f64(*v115, v142);
      v109 = vsubq_f64(v109, _Q2);
      *v115 = v108;
      *(float64_t *)(v107 + 8 * v116) = v109.f64[0];
      v126 = *(int *)(v102 + 4 * v122 + 20);
      if (v126 >> 30 != 3)
      {
LABEL_34:
        v108.f64[0] = *(float64_t *)(v107 + 8 * v116);
        v144 = (const double *)(v106 + 8 * v122);
        v289 = vld2q_f64(v144);
        _Q3 = *v115;
        _Q4 = *(float64x2_t *)(v106 + 8 * v124);
        v145 = *(int *)(v264 + 4 * v126);
        v146 = *(float64x2_t *)(v101 + 16 * v145);
        v147 = vmlaq_laneq_f64(vmulq_n_f64(v289.val[0], v146.f64[0]), v289.val[1], v146, 1);
        v289.val[0] = vmulq_f64(_Q4, v146);
        v289.val[1].f64[0] = *(float64_t *)(v101 + 16 * v145 + 8);
        __asm { FMLA            D1, D2, V4.D[1] }
        v108 = vsubq_f64(v108, v289.val[0]);
        v109 = vsubq_f64(*v115, v147);
        *v115 = v109;
        *(float64_t *)(v107 + 8 * v116) = v108.f64[0];
      }
LABEL_25:
      ++v118;
      if (!--v117)
        goto LABEL_19;
    }
  }
LABEL_35:
  *(_QWORD *)(a23 + 24) |= 1uLL;
  if ((**(_BYTE **)(a36 + 16) & 1) != 0)
  {
LABEL_36:
    v148 = *(_QWORD *)(a8 + 16);
    v149 = *(_QWORD *)(a10 + 16);
    v150 = *(_QWORD *)(a11 + 16);
    v151 = *(_QWORD *)(a12 + 16);
    v152 = *(_QWORD *)(a24 + 16);
    v283 = *(_QWORD *)(a27 + 16);
    v287 = *(int **)(a29 + 16);
    v153 = *(_QWORD *)(a30 + 16);
    v154 = *(_QWORD *)(a31 + 16);
    v155 = *(_QWORD *)(a32 + 16);
    v156 = *(_QWORD *)(a33 + 16);
    v157 = *(_QWORD *)(a23 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v271 < 1)
    {
LABEL_46:
      *(_QWORD *)(a23 + 24) |= 1uLL;
      if ((**(_BYTE **)(v269 + 16) & 1) == 0)
        return 0;
      goto LABEL_47;
    }
    v161 = 0;
    while (1)
    {
      if (v161)
      {
        v162 = v287[v161 - 1];
        v163 = v287[v161];
        if (v162 < (int)v163)
          goto LABEL_42;
      }
      else
      {
        v162 = 0;
        v163 = *v287;
        if ((int)v163 > 0)
        {
LABEL_42:
          v164 = (float64x2_t *)(v157 + 24 * v161);
          v165 = 3 * v161 + 2;
          v166 = *v164;
          v158.f64[0] = *(float64_t *)(v157 + 8 * v165);
          v167 = v163 - v162;
          v168 = (int *)(v283 + 4 * v162);
          do
          {
            v169 = *v168++;
            v170 = (float64x2_t *)(v153 + 24 * v169);
            v171 = *v170;
            v159.f64[0] = v170[1].f64[0];
            v172 = (int *)(v152 + 24 * v169);
            v173 = v154 + 96 * v169;
            v174 = *(int64x2_t *)(v173 + 16);
            v175 = *(int64x2_t *)(v173 + 32);
            _Q17 = *(int64x2_t *)(v173 + 48);
            _Q6.f64[0] = *(float64_t *)(v148 + 8 * *v172);
            _Q18 = *(float64x2_t *)(v173 + 64);
            _Q19 = *(_OWORD *)(v173 + 80);
            v179 = v149 + 32 * v172[1];
            v180 = *(float64x2_t *)(v179 + 16);
            v181 = vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v173, v175), *(double *)v179);
            v182 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v173, v175);
            v183 = (float64x2_t)vzip1q_s64(v174, _Q17);
            v184 = vmlaq_laneq_f64(v181, v182, *(float64x2_t *)v179, 1);
            v185 = (float64x2_t)vzip2q_s64(v174, _Q17);
            _Q4 = vmulq_f64(_Q18, *(float64x2_t *)v179);
            _Q17.i64[0] = *(_QWORD *)(v179 + 8);
            _D20 = *(_QWORD *)(v179 + 24);
            v188 = v155 + 144 * v169;
            __asm { FMLA            D4, D17, V18.D[1] }
            _Q22 = *(int64x2_t *)(v188 + 32);
            v190 = *(int64x2_t *)(v188 + 80);
            v191 = 6 * v169 + 4;
            v192 = v150 + 48 * *(int *)(v152 + 4 * v191);
            __asm { FMLA            D4, D20, V19.D[1] }
            _Q17 = *(float64x2_t *)(v188 + 96);
            _Q19 = *(_OWORD *)(v188 + 112);
            v195 = vmlaq_laneq_f64(vmlaq_n_f64(v184, v183, v180.f64[0]), v185, v180, 1);
            _Q7 = *(_OWORD *)(v188 + 128);
            v197 = *(float64x2_t *)(v192 + 32);
            v198 = (float64x2_t)vzip1q_s64(_Q22, v190);
            v199 = vmlaq_n_f64(v195, v171, _Q6.f64[0]);
            v200 = (float64x2_t)vzip2q_s64(_Q22, v190);
            _Q21 = vmulq_f64(_Q17, *(float64x2_t *)v192);
            _Q22.i64[0] = *(_QWORD *)(v192 + 8);
            __asm { FMLA            D21, D22, V17.D[1] }
            v202 = vmlaq_f64(_Q4, v159, _Q6);
            _D3 = *(_QWORD *)(v192 + 24);
            __asm { FMLA            D21, D3, V19.D[1] }
            _D3 = *(_QWORD *)(v192 + 40);
            v205 = (const double *)(v156 + 48 * v169);
            v206 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v188, *(int64x2_t *)(v188 + 48)), *(double *)v192), (float64x2_t)vzip2q_s64(*(int64x2_t *)v188, *(int64x2_t *)(v188 + 48)), *(float64x2_t *)v192, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)(v188 + 16), *(int64x2_t *)(v188 + 64)), *(double *)(v192 + 16)), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v188 + 16), *(int64x2_t *)(v188 + 64)), *(float64x2_t *)(v192 + 16), 1), v198, v197.f64[0]);
            v291 = vld2q_f64(v205);
            __asm { FMLA            D21, D3, V7.D[1] }
            _Q3 = *(float64x2_t *)(v156 + 8 * v191);
            v208 = v172[5];
            _Q6 = *(float64x2_t *)(v151 + 16 * v208);
            v209 = vmlaq_laneq_f64(v206, v200, v197, 1);
            v210 = vmlaq_laneq_f64(vmulq_n_f64(v291.val[0], _Q6.f64[0]), v291.val[1], _Q6, 1);
            _Q7 = vmulq_f64(_Q3, _Q6);
            _Q6.f64[0] = *(float64_t *)(v151 + 16 * v208 + 8);
            __asm { FMLA            D7, D6, V3.D[1] }
            v159 = vaddq_f64(vaddq_f64(v202, _Q21), _Q7);
            v166 = vsubq_f64(v166, vaddq_f64(vaddq_f64(v199, v209), v210));
            v158 = vsubq_f64(v158, v159);
            --v167;
          }
          while (v167);
          *v164 = v166;
          *(float64_t *)(v157 + 8 * v165) = v158.f64[0];
        }
      }
      if (++v161 == v271)
        goto LABEL_46;
    }
  }
LABEL_4:
  if ((**(_BYTE **)(v269 + 16) & 1) == 0)
    return 0;
LABEL_47:
  v275 = *(_QWORD *)(a4 + 16);
  v276 = *(_QWORD *)(a3 + 16);
  v274 = *(_QWORD *)(a6 + 16);
  v212 = *(_QWORD *)(a8 + 16);
  v213 = *(_QWORD *)(a9 + 16);
  v214 = *(_QWORD *)(a11 + 16);
  v215 = *(_QWORD *)(a12 + 16);
  v216 = *(_QWORD *)(a13 + 16);
  v284 = *(_QWORD *)(a16 + 16);
  v288 = *(_QWORD *)(a7 + 16);
  v281 = *(int **)(a18 + 16);
  v217 = *(_QWORD *)(a19 + 16);
  v218 = *(_QWORD *)(a20 + 16);
  v219 = *(_QWORD *)(a21 + 16);
  v220 = *(_QWORD *)(a22 + 16);
  v221 = *(_QWORD *)(a23 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v273 >= 1)
  {
    v226 = 0;
    while (v226)
    {
      v227 = v281[v226 - 1];
      v228 = v281[v226];
      if (v227 < (int)v228)
        goto LABEL_54;
LABEL_49:
      if (++v226 == v273)
        goto LABEL_65;
    }
    v227 = 0;
    v228 = *v281;
    if ((int)v228 <= 0)
      goto LABEL_49;
LABEL_54:
    v229 = (float64x2_t *)(v221 + 24 * v226);
    v230 = 3 * v226 + 2;
    v231 = v228 - v227;
    v232 = (int *)(v284 + 4 * v227);
    while (1)
    {
      v233 = *v232;
      v234 = *(int *)(v216 + 24 * v233);
      if (v234 >> 30 != 3)
      {
        v223.f64[0] = *(float64_t *)(v221 + 8 * v230);
        v235 = (float64x2_t *)(v217 + 24 * v233);
        _Q3.f64[0] = *(float64_t *)(v212 + 8 * *(int *)(v276 + 4 * v234));
        _Q4.f64[0] = v235[1].f64[0];
        v223 = vmlsq_f64(v223, _Q4, _Q3);
        v222 = vmlsq_lane_f64(*v229, *v235, _Q3.f64[0], 0);
        *v229 = v222;
        *(float64_t *)(v221 + 8 * v230) = v223.f64[0];
      }
      v236 = 6 * v233;
      v237 = *(int *)(v216 + ((24 * v233) | 4));
      if (v237 >> 30 == 3)
      {
        v238 = v236 + 4;
        v239 = *(int *)(v216 + 4 * (v236 + 4));
        if (v239 >> 30 == 3)
          goto LABEL_60;
      }
      else
      {
        v223.f64[0] = *(float64_t *)(v221 + 8 * v230);
        v241 = (float64x2_t *)(v218 + 72 * v233);
        *(float64x2x3_t *)(&_Q3 - 1) = vld3q_f64(v241->f64);
        v241 += 3;
        _Q5 = *v241;
        v243 = (float64x2_t *)(v213 + 24 * *(int *)(v275 + 4 * v237));
        v244 = v243[1].f64[0];
        v246 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v245, v243->f64[0]), _Q3, *v243, 1), _Q4, v244);
        _Q2 = vmulq_f64(*v241, *v243);
        _Q3.f64[0] = v243->f64[1];
        __asm { FMLA            D2, D3, V5.D[1] }
        _Q2.f64[0] = _Q2.f64[0] + *(double *)(v218 + 72 * v233 + 64) * v244;
        v223 = vsubq_f64(v223, _Q2);
        v222 = vsubq_f64(*v229, v246);
        *v229 = v222;
        *(float64_t *)(v221 + 8 * v230) = v223.f64[0];
        v238 = v236 + 4;
        v239 = *(int *)(v216 + 4 * (v236 + 4));
        if (v239 >> 30 == 3)
        {
LABEL_60:
          v240 = *(int *)(v216 + 24 * v233 + 20);
          if (v240 >> 30 != 3)
            goto LABEL_64;
          goto LABEL_55;
        }
      }
      v223.f64[0] = *(float64_t *)(v221 + 8 * v230);
      v248 = (_OWORD *)(v219 + 144 * v233);
      v249 = *(int64x2_t *)v248;
      _Q3 = *((float64x2_t *)v248 + 1);
      _Q4 = *((float64x2_t *)v248 + 2);
      v250 = *((int64x2_t *)v248 + 3);
      v251 = *((int64x2_t *)v248 + 4);
      v252 = *((int64x2_t *)v248 + 5);
      _Q16 = *((float64x2_t *)v248 + 6);
      _Q17 = v248[7];
      _Q18 = v248[8];
      v256 = (float64x2_t *)(v214 + 48 * *(int *)(v274 + 4 * v239));
      v257 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v249, v250), v256->f64[0]), (float64x2_t)vzip2q_s64(v249, v250), *v256, 1), (float64x2_t)vzip1q_s64((int64x2_t)_Q3, v251), v256[1].f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q3, v251), v256[1], 1), (float64x2_t)vzip1q_s64((int64x2_t)_Q4, v252), v256[2].f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q4, v252), v256[2], 1);
      _Q2 = vmulq_f64(_Q16, *v256);
      _Q3.f64[0] = v256->f64[1];
      __asm { FMLA            D2, D3, V16.D[1] }
      _Q3.f64[0] = v256[1].f64[1];
      __asm { FMLA            D2, D3, V17.D[1] }
      _Q3.f64[0] = v256[2].f64[1];
      __asm { FMLA            D2, D3, V18.D[1] }
      v222 = vsubq_f64(*v229, v257);
      v223 = vsubq_f64(v223, _Q2);
      *v229 = v222;
      *(float64_t *)(v221 + 8 * v230) = v223.f64[0];
      v240 = *(int *)(v216 + 4 * v236 + 20);
      if (v240 >> 30 != 3)
      {
LABEL_64:
        v222.f64[0] = *(float64_t *)(v221 + 8 * v230);
        v259 = (const double *)(v220 + 8 * v236);
        v290 = vld2q_f64(v259);
        _Q3 = *v229;
        _Q4 = *(float64x2_t *)(v220 + 8 * v238);
        v260 = *(int *)(v288 + 4 * v240);
        v261 = *(float64x2_t *)(v215 + 16 * v260);
        v262 = vmlaq_laneq_f64(vmulq_n_f64(v290.val[0], v261.f64[0]), v290.val[1], v261, 1);
        v290.val[0] = vmulq_f64(_Q4, v261);
        v290.val[1].f64[0] = *(float64_t *)(v215 + 16 * v260 + 8);
        __asm { FMLA            D1, D2, V4.D[1] }
        v222 = vsubq_f64(v222, v290.val[0]);
        v223 = vsubq_f64(*v229, v262);
        *v229 = v223;
        *(float64_t *)(v221 + 8 * v230) = v222.f64[0];
      }
LABEL_55:
      ++v232;
      if (!--v231)
        goto LABEL_49;
    }
  }
LABEL_65:
  *(_QWORD *)(a23 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396A3CA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_2396A2DB4(*a1, a2, a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], v3, v4, a1[15], v5, a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    v6,
    v7,
    a1[26],
    v8,
    a1[28],
    a1[29],
    a1[30],
    a1[31],
    a1[32],
    a1[33],
    a1[34],
    a1[35],
    a1[36]);
  return 0;
}

uint64_t sub_2396A3D34(uint64_t *a1)
{
  sub_23968A6F0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A3D54(uint64_t *a1)
{
  sub_23968A7D8(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A3D74(uint64_t *a1)
{
  sub_23968AB70(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396A3D94(uint64_t *a1, uint64_t a2)
{
  sub_23968AF0C(*a1, a2, a1[2]);
  return 0;
}

uint64_t sub_2396A3DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  float64x2_t v66;
  float64x2_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  int extent;
  int v78;
  int v79;
  double *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  unint64_t v94;
  int *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float64x2_t v109;
  double *v110;
  uint64_t v111;
  uint64_t v112;
  float64x2_t *v113;
  float64x2_t *v114;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v130;
  float64x2_t v132;
  float64x2_t v133;
  uint64_t v134;
  float64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  float64x2_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  int *v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float64x2_t v156;
  double *v157;
  uint64_t v158;
  float64x2_t *v159;
  float64x2_t *v160;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v174;
  float64x2_t v175;
  uint64_t v177;
  float64x2_t v178;
  int64x2_t v179;
  int8x16_t v180;
  int64x2_t v181;
  float64x2_t v182;
  unint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  uint64_t v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int *v205;
  int *v206;
  int *v207;
  int *v208;
  float64x2_t v209;
  float64x2_t v210;
  uint64_t v211;
  uint64_t v212;
  int *v213;
  uint64_t v214;
  float64x2_t *v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t *v220;
  float64x2_t v221;
  float64x2_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  float64x2_t *v238;
  float64x2_t *v239;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v248;
  float64x2_t v250;
  uint64_t v253;
  float64x2_t v254;
  int64x2_t v255;
  int64x2_t v256;
  float64x2_t v257;
  unsigned int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  float64x2_t *v262;
  float64x2_t *v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t *v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  int v311;
  float64x2_t *v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t *v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  __int128 *v325;
  double *v330;
  __int128 *v331;
  double *v339;
  __int128 v340;
  __int128 *v341;
  double *v346;
  double v347;
  float64x2_t *v348;
  float64x2_t v356;
  float64x2_t v358;
  float64x2_t v360;
  float64x2_t v362;
  float64x2_t v364;
  uint64_t v366;
  float64x2_t v367;
  int64x2_t v368;
  float64x2_t v369;
  int64x2_t v370;
  float64x2_t v371;
  int64x2_t v372;
  float64x2_t v373;
  int64x2_t v374;
  int8x16_t v375;
  int64x2_t v376;
  float64x2_t v377;
  int64x2_t v378;
  int8x16_t v379;
  float64x2_t v380;
  int64x2_t v381;
  float64x2_t *v382;
  float64x2_t v385;
  float64x2_t v387;
  uint64_t v389;
  float64x2_t v390;
  int64x2_t v391;
  int64x2_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  int v397;
  int v398;
  int v399;
  uint64_t v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  uint64_t v413;
  int v414;
  int v415;
  int v416;
  int v417;
  uint64_t v418;
  int *v419;
  int *v420;
  int *v421;
  int *v422;
  uint64_t v423;
  uint64_t v424;
  float64x2_t v425;
  float64x2_t v426;
  uint64_t v427;
  int *v428;
  uint64_t v429;
  float64x2_t v432;
  uint64_t v435;
  unsigned int v436;
  uint64_t v437;
  unsigned int v438;
  uint64_t v439;
  unsigned int v440;
  __int128 *v441;
  double *v446;
  double v447;
  float64x2_t *v449;
  float64x2_t *v450;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t *v458;
  float64x2_t v461;
  uint64_t v464;
  float64x2_t v465;
  int64x2_t v466;
  int64x2_t v467;
  float64x2_t v468;
  float64x2_t *v469;
  float64x2_t *v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t *v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  uint64_t v518;
  uint64_t v519;
  float64x2_t v520;
  uint64_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t *v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  uint64_t v535;
  __int128 *v536;
  double *v541;
  __int128 v542;
  __int128 *v543;
  double *v551;
  float64x2_t v552;
  uint64_t v556;
  float64x2_t v557;
  int64x2_t v558;
  int64x2_t v559;
  float64x2_t v560;
  float64x2_t *v561;
  float64x2_t v568;
  uint64_t v575;
  float64x2_t v576;
  int64x2_t v577;
  float64x2_t v578;
  int64x2_t v579;
  int64x2_t v580;
  int64x2_t v581;
  float64x2_t v582;
  int64x2_t v583;
  float64x2_t v584;
  int64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t *v590;
  float64x2_t v591;
  unint64_t v592;
  uint64_t v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  uint64_t v613;
  int v614;
  int v615;
  int v616;
  int v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  float64x2_t v623;
  uint64_t v627;
  uint64_t v628;
  int v629;
  uint64_t v630;
  uint64_t v631;
  float64x2_t *v632;
  int8x16_t *v633;
  int8x16_t *v634;
  float64x2_t *v635;
  uint64_t v636;
  uint64_t v637;
  float64x2_t *v638;
  int *v639;
  float64x2_t v640;
  float64x2_t v641;
  uint64_t v643;
  uint64_t v644;
  float64x2_t v646;
  float64x2_t v652;
  float64x2_t v655;
  float64x2_t v657;
  int64x2_t v660;
  int64x2_t v661;
  float64x2_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v669;
  double v671;
  uint64_t v673;
  uint64_t v675;
  uint64_t v676;
  unsigned int v677;
  uint64_t v678;
  unsigned int v679;
  unsigned int v680;
  __int128 *v681;
  double *v686;
  float64x2_t *v687;
  float64x2_t *v695;
  float64x2_t v696;
  __int128 *v697;
  double *v702;
  double v703;
  float64x2_t v704;
  float64x2_t v705;
  uint64_t v706;
  float64x2_t *v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v711;
  float64x2_t v713;
  uint64_t v715;
  float64x2_t *v716;
  float64x2_t v718;
  float64x2_t v721;
  float64x2_t v723;
  uint64_t v725;
  int64x2_t v726;
  int64x2_t v727;
  uint64_t v728;
  unsigned int v729;
  unsigned int v730;
  float64x2_t *v731;
  uint64_t v733;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v742;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v747;
  float64x2_t v749;
  uint64_t v750;
  float64x2_t v751;
  int64x2_t v752;
  float64x2_t v753;
  int64x2_t v754;
  float64x2_t v755;
  int64x2_t v756;
  int64x2_t v757;
  int64x2_t v758;
  float64x2_t v759;
  int64x2_t v760;
  uint64_t v761;
  const double *v762;
  uint64_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v769;
  uint64_t v770;
  float64x2_t v771;
  int64x2_t v772;
  int64x2_t v773;
  uint64_t v774;
  uint64_t v775;
  int64x2_t v776;
  int64x2_t v777;
  const double *v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t *v781;
  uint64_t v782;
  float64x2_t *v783;
  float64x2_t v784;
  float64x2_t v785;
  uint64_t v786;
  float64x2_t *v787;
  uint64_t v788;
  uint64_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t *v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t *v821;
  unsigned int v822;
  uint64_t v823;
  const double *v824;
  int64x2_t v825;
  int64x2_t v826;
  float64x2_t *v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t *v835;
  float64x2_t v836;
  float64x2_t v837;
  uint64_t v838;
  uint64_t v839;
  float64x2_t *v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t *v847;
  uint64_t v848;
  float64x2_t *v849;
  float64x2_t v850;
  unint64_t v851;
  unint64_t v852;
  unint64_t v853;
  uint64_t v854;
  int v855;
  int v856;
  int v857;
  uint64_t v858;
  int v859;
  int v860;
  int v861;
  int v862;
  int v863;
  int v864;
  int v865;
  int v866;
  int v867;
  int v868;
  int v869;
  int v870;
  uint64_t v871;
  int v872;
  int v873;
  int v874;
  int v875;
  uint64_t v876;
  int v877;
  int v878;
  int v879;
  int v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  float64x2_t v887;
  float64x2_t v888;
  uint64_t v889;
  int v890;
  uint64_t v891;
  uint64_t v892;
  int64x2_t v893;
  int8x16_t v894;
  float64x2_t *v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  uint64_t v899;
  float64x2_t *v900;
  int *v901;
  float64x2_t v902;
  float64x2_t v903;
  uint64_t v904;
  uint64_t v912;
  int *v914;
  int v915;
  uint64_t v916;
  double v918;
  uint64_t v920;
  double v921;
  uint64_t v923;
  int64x2_t v924;
  int64x2_t v925;
  double *v934;
  __int128 v935;
  double v936;
  double v937;
  double v938;
  float64x2_t *v939;
  double v942;
  float64x2_t v944;
  uint64_t v951;
  float64x2_t *v952;
  float64x2_t v953;
  float64x2_t v954;
  float64_t v955;
  uint64_t v956;
  int8x16_t *v957;
  double *v961;
  float64x2_t v963;
  float64x2_t v964;
  int8x16_t v965;
  float64x2_t v966;
  uint64_t v967;
  uint64_t v969;
  float64x2_t *v970;
  uint64_t v971;
  float64x2_t v972;
  float64x2_t v975;
  float64x2_t v980;
  float64x2_t v982;
  float64x2_t v984;
  uint64_t v985;
  float64x2_t v986;
  int64x2_t v987;
  float64x2_t v988;
  int64x2_t v989;
  float64x2_t *v990;
  int8x16_t v992;
  float64x2_t v995;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1003;
  int64x2_t v1004;
  float64x2_t v1006;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1011;
  uint64_t v1013;
  float64x2_t v1014;
  int64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  int64x2_t v1019;
  int64x2_t v1020;
  int64x2_t v1021;
  int8x16_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  int64x2_t v1026;
  int64x2_t v1027;
  int64x2_t v1028;
  int64x2_t v1029;
  uint64_t v1030;
  const double *v1031;
  float64x2_t *v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1037;
  uint64_t v1038;
  float64x2_t v1039;
  int64x2_t v1040;
  int64x2_t v1041;
  int8x16_t v1042;
  uint64_t v1043;
  int64x2_t v1044;
  const double *v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t *v1048;
  float64x2_t v1049;
  uint64_t v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  float64x2_t v1055;
  float64x2_t v1056;
  float64x2_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  float64x2_t v1060;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  float64x2_t v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  uint64_t v1071;
  float64x2_t *v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  float64x2_t *v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2x2_t *v1086;
  float64x2_t v1087;
  uint64_t v1088;
  const double *v1089;
  int64x2_t v1090;
  int64x2_t v1091;
  float64x2_t *v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  uint64_t v1095;
  float64x2_t v1096;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t *v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  int64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t *v1109;
  float64x2_t *v1110;
  unint64_t v1111;
  int *v1112;
  int v1113;
  int v1114;
  int v1115;
  int v1116;
  int v1117;
  int v1118;
  int v1119;
  uint64_t v1120;
  uint64_t v1121;
  int *v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  float64x2_t *v1127;
  uint64_t v1128;
  float64x2_t *v1129;
  float64x2_t *v1130;
  float64x2_t v1131;
  float64x2_t v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64x2_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  float64x2_t *v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  unint64_t v1165;
  unint64_t v1166;
  unint64_t v1167;
  unint64_t v1168;
  unint64_t v1169;
  unint64_t v1170;
  int *v1171;
  int v1172;
  int v1173;
  int v1174;
  int v1175;
  int v1176;
  int v1177;
  int v1178;
  uint64_t v1179;
  int *v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  float64x2_t *v1185;
  uint64_t v1186;
  float64x2_t *v1187;
  float64x2_t *v1188;
  float64x2_t v1189;
  float64x2_t v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  float64x2_t *v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  unint64_t v1223;
  uint64_t v1224;
  int v1225;
  int v1226;
  int v1227;
  uint64_t v1228;
  int v1229;
  int v1230;
  int v1231;
  int v1232;
  int v1233;
  int v1234;
  int v1235;
  int v1236;
  int v1237;
  int v1238;
  int v1239;
  int v1240;
  int v1241;
  int v1242;
  int v1243;
  int v1244;
  int *v1245;
  int *v1246;
  int *v1247;
  int *v1248;
  uint64_t v1249;
  uint64_t v1250;
  int *v1251;
  uint64_t v1252;
  float64x2_t *v1253;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  float64x2_t *v1258;
  float64x2_t v1259;
  float64x2_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1270;
  unsigned int v1271;
  unsigned int v1272;
  uint64_t v1273;
  int v1274;
  uint64_t v1275;
  float64x2_t *v1276;
  float64x2_t *v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  float64x2_t v1280;
  float64x2_t v1281;
  float64x2_t v1282;
  float64x2_t v1283;
  float64x2_t v1284;
  float64x2_t v1285;
  float64x2_t v1286;
  float64x2_t v1287;
  float64x2_t v1288;
  float64x2_t v1289;
  float64x2_t v1290;
  float64x2_t v1291;
  float64x2_t v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  float64x2_t *v1295;
  float64x2_t v1296;
  float64x2_t v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  float64x2_t v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  unsigned int v1303;
  uint64_t v1304;
  int v1305;
  uint64_t v1306;
  float64x2_t *v1307;
  float64x2_t *v1308;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  float64x2_t v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  float64x2_t v1320;
  float64x2_t v1321;
  float64x2_t v1322;
  float64x2_t v1323;
  float64x2_t v1324;
  float64x2_t v1325;
  float64x2_t v1326;
  float64x2_t v1327;
  float64x2_t v1328;
  float64x2_t v1329;
  float64x2_t v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  float64x2_t v1339;
  float64x2_t *v1340;
  float64x2_t v1341;
  float64x2_t v1342;
  float64x2_t v1343;
  float64x2_t v1344;
  float64x2_t v1345;
  float64x2_t v1346;
  float64x2_t v1347;
  float64x2_t v1348;
  float64x2_t v1349;
  float64x2_t v1350;
  float64x2_t v1351;
  float64x2_t v1352;
  float64x2_t v1353;
  float64x2_t v1354;
  float64x2_t v1355;
  float64x2_t v1356;
  float64x2_t v1357;
  int v1358;
  float64x2_t *v1359;
  float64x2_t v1360;
  float64x2_t v1361;
  float64x2_t v1362;
  float64x2_t v1363;
  float64x2_t v1364;
  float64x2_t v1365;
  float64x2_t *v1366;
  float64x2_t v1367;
  float64x2_t v1368;
  float64x2_t v1369;
  float64x2_t v1370;
  float64x2_t v1371;
  __int128 *v1372;
  double *v1378;
  __int128 v1379;
  __int128 *v1380;
  double *v1388;
  __int128 v1389;
  __int128 *v1390;
  double *v1395;
  double v1396;
  float64x2_t *v1397;
  float64x2_t v1398;
  float64x2_t v1399;
  float64x2_t v1400;
  float64x2_t v1401;
  float64x2_t v1402;
  float64x2_t v1403;
  float64x2_t v1404;
  float64x2_t v1405;
  float64x2_t v1406;
  float64x2_t v1407;
  float64x2_t v1408;
  float64x2_t v1409;
  float64x2_t v1410;
  float64x2_t v1411;
  float64x2_t *v1412;
  float64x2_t v1413;
  float64x2_t v1414;
  float64x2_t v1415;
  float64x2_t v1416;
  float64x2_t v1417;
  float64x2_t v1418;
  float64x2_t v1419;
  float64x2_t v1420;
  float64x2_t v1421;
  float64x2_t v1422;
  float64x2_t v1423;
  float64x2_t *v1424;
  float64x2_t v1425;
  float64x2_t v1426;
  float64x2_t v1427;
  float64x2_t *v1428;
  float64x2_t v1429;
  float64x2_t v1430;
  float64x2_t v1431;
  unint64_t v1432;
  unint64_t v1433;
  unint64_t v1434;
  int v1435;
  int v1436;
  int v1437;
  uint64_t v1438;
  int v1439;
  int v1440;
  int v1441;
  int v1442;
  int v1443;
  int v1444;
  int v1445;
  int v1446;
  int v1447;
  int v1448;
  int v1449;
  int v1450;
  uint64_t v1451;
  int v1452;
  int v1453;
  int v1454;
  int v1455;
  uint64_t v1456;
  int *v1457;
  int *v1458;
  int *v1459;
  int *v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  int *v1464;
  uint64_t v1465;
  float64x2_t v1468;
  uint64_t v1471;
  unsigned int v1472;
  uint64_t v1473;
  unsigned int v1474;
  uint64_t v1475;
  unsigned int v1476;
  __int128 *v1477;
  double *v1482;
  double v1483;
  float64x2_t *v1484;
  float64x2_t *v1485;
  float64x2_t v1486;
  float64x2_t v1487;
  float64x2_t v1488;
  float64x2_t v1489;
  float64x2_t v1490;
  float64x2_t v1491;
  float64x2_t v1492;
  float64x2_t v1493;
  float64x2_t v1494;
  float64x2_t *v1495;
  float64x2_t v1496;
  float64x2_t v1497;
  float64x2_t v1498;
  float64x2_t *v1499;
  float64x2_t v1500;
  float64x2_t v1501;
  float64x2_t v1502;
  float64x2_t v1503;
  float64x2_t *v1504;
  float64x2_t *v1505;
  float64x2_t v1506;
  float64x2_t v1507;
  float64x2_t v1508;
  float64x2_t v1509;
  float64x2_t v1510;
  float64x2_t v1511;
  float64x2_t v1512;
  float64x2_t v1513;
  float64x2_t v1514;
  float64x2_t v1515;
  float64x2_t v1516;
  float64x2_t v1517;
  float64x2_t v1518;
  float64x2_t v1519;
  float64x2_t v1520;
  float64x2_t v1521;
  float64x2_t v1522;
  float64x2_t v1523;
  float64x2_t v1524;
  float64x2_t v1525;
  float64x2_t v1526;
  float64x2_t v1527;
  float64x2_t v1528;
  float64x2_t v1529;
  float64x2_t v1530;
  float64x2_t v1531;
  float64x2_t v1532;
  float64x2_t v1533;
  float64x2_t v1534;
  float64x2_t v1535;
  float64x2_t *v1536;
  float64x2_t v1537;
  float64x2_t v1538;
  float64x2_t v1539;
  float64x2_t v1540;
  float64x2_t v1541;
  float64x2_t v1542;
  float64x2_t v1543;
  float64x2_t v1544;
  float64x2_t v1545;
  float64x2_t v1546;
  float64x2_t v1547;
  float64x2_t v1548;
  float64x2_t v1549;
  float64x2_t v1550;
  float64x2_t v1551;
  float64x2_t v1552;
  float64x2_t v1553;
  float64x2_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  float64x2_t v1557;
  uint64_t v1558;
  float64x2_t v1559;
  float64x2_t v1560;
  float64x2_t v1561;
  float64x2_t v1562;
  float64x2_t v1563;
  float64x2_t v1564;
  float64x2_t v1565;
  float64x2_t *v1566;
  float64x2_t v1567;
  float64x2_t v1568;
  float64x2_t v1569;
  float64x2_t v1570;
  float64x2_t v1571;
  uint64_t v1573;
  __int128 *v1574;
  double *v1580;
  __int128 v1581;
  __int128 *v1582;
  double *v1590;
  __int128 v1591;
  float64x2_t v1592;
  float64x2_t v1593;
  float64x2_t v1594;
  float64x2_t v1595;
  float64x2_t v1596;
  float64x2_t v1597;
  float64x2_t v1598;
  float64x2_t v1599;
  float64x2_t *v1600;
  float64x2_t v1601;
  float64x2_t v1602;
  float64x2_t v1603;
  float64x2_t v1604;
  float64x2_t v1605;
  float64x2_t v1606;
  float64x2_t v1607;
  float64x2_t v1608;
  float64x2_t *v1609;
  float64x2_t v1610;
  float64x2_t v1611;
  float64x2_t v1612;
  float64x2_t v1613;
  float64x2_t v1614;
  float64x2_t v1615;
  float64x2_t v1616;
  float64x2_t v1617;
  float64x2_t v1618;
  float64x2_t v1619;
  float64x2_t v1620;
  float64x2_t v1621;
  float64x2_t v1622;
  float64x2_t v1623;
  float64x2_t v1624;
  float64x2_t v1625;
  float64x2_t *v1626;
  float64x2_t v1627;
  float64x2_t v1628;
  float64x2_t v1629;
  float64x2_t v1630;
  float64x2_t v1631;
  float64x2_t v1632;
  float64x2_t v1633;
  float64x2_t v1634;
  float64x2_t v1635;
  float64x2_t v1636;
  float64x2_t v1637;
  float64x2_t v1638;
  float64x2_t v1639;
  float64x2_t v1640;
  float64x2_t v1641;
  float64x2_t *v1642;
  float64x2_t v1643;
  unint64_t v1644;
  uint64_t v1645;
  int v1646;
  int v1647;
  int v1648;
  uint64_t v1649;
  int v1650;
  int v1651;
  int v1652;
  int v1653;
  int v1654;
  int v1655;
  int v1656;
  int v1657;
  int v1658;
  int v1659;
  int v1660;
  int v1661;
  int v1662;
  int v1663;
  int v1664;
  int v1665;
  uint64_t v1666;
  int v1667;
  int v1668;
  int v1669;
  int v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  float64x2_t v1680;
  uint64_t v1681;
  int v1682;
  uint64_t v1683;
  float64x2_t *v1684;
  int64x2_t v1685;
  float64x2_t v1686;
  float64x2_t v1687;
  float64x2_t v1688;
  uint64_t v1689;
  float64x2_t *v1690;
  int *v1691;
  float64x2_t v1692;
  float64x2_t v1695;
  float64x2_t v1697;
  float64x2_t v1699;
  int64x2_t v1701;
  float64x2_t v1702;
  float64x2_t v1703;
  uint64_t v1705;
  float64x2_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1723;
  uint64_t v1724;
  unsigned int v1725;
  uint64_t v1726;
  unsigned int v1727;
  unsigned int v1728;
  __int128 *v1729;
  double *v1735;
  __int128 v1736;
  __int128 *v1737;
  double *v1745;
  __int128 v1746;
  __int128 *v1747;
  double *v1752;
  double v1753;
  float64x2_t v1754;
  float64x2_t v1755;
  float64x2_t v1756;
  float64x2_t v1757;
  uint64_t v1758;
  float64x2_t *v1759;
  float64x2_t v1760;
  float64x2_t v1761;
  float64x2_t v1762;
  float64x2_t v1763;
  float64x2_t v1764;
  float64x2_t v1765;
  float64x2_t v1766;
  float64x2_t v1767;
  float64x2_t *v1768;
  float64x2_t *v1769;
  float64x2_t v1770;
  float64x2_t v1771;
  float64x2_t v1772;
  float64x2_t v1773;
  float64x2_t v1774;
  float64x2_t v1775;
  float64x2_t v1776;
  float64x2_t v1777;
  float64x2_t v1778;
  float64x2_t *v1779;
  float64x2_t v1780;
  float64x2_t v1781;
  float64x2_t v1782;
  float64x2_t v1783;
  float64x2_t v1784;
  float64x2_t v1785;
  float64x2_t v1786;
  uint64_t v1787;
  unsigned int v1788;
  float64x2_t *v1789;
  float64x2_t v1790;
  float64x2_t v1791;
  float64x2_t v1792;
  float64x2_t v1793;
  float64x2_t v1794;
  float64x2_t v1795;
  float64x2_t v1796;
  float64x2_t *v1797;
  float64x2_t v1798;
  float64x2_t v1799;
  float64x2_t v1800;
  float64x2_t v1801;
  float64x2_t v1802;
  float64x2_t v1803;
  float64x2_t v1804;
  float64x2_t v1805;
  unsigned int v1806;
  float64x2_t *v1807;
  float64x2_t v1808;
  float64x2_t v1809;
  float64x2_t v1810;
  float64x2_t v1811;
  float64x2_t v1812;
  float64x2_t *v1813;
  float64x2_t v1814;
  float64x2_t v1815;
  float64x2_t v1816;
  uint64_t v1817;
  float64x2_t *v1818;
  float64x2_t v1819;
  float64x2_t v1820;
  float64x2_t v1821;
  float64x2_t v1822;
  float64x2_t v1823;
  float64x2_t v1824;
  float64x2_t v1825;
  float64x2_t v1826;
  float64x2_t v1827;
  float64x2_t v1828;
  float64x2_t v1829;
  float64x2_t v1830;
  float64x2_t *v1831;
  uint64_t v1832;
  float64x2_t *v1833;
  float64x2_t v1834;
  float64x2_t v1835;
  float64x2_t v1836;
  float64x2_t v1837;
  float64x2_t v1838;
  float64x2_t v1839;
  float64x2_t v1840;
  float64x2_t v1841;
  float64x2_t v1842;
  float64x2_t v1843;
  float64x2_t v1844;
  float64x2_t v1845;
  float64x2_t v1846;
  float64x2_t v1847;
  float64x2_t v1848;
  float64x2_t v1849;
  float64x2_t v1850;
  float64x2_t v1851;
  float64x2_t v1852;
  float64x2_t v1853;
  float64x2_t *v1854;
  float64x2_t v1855;
  float64x2_t v1856;
  float64x2_t v1857;
  float64x2_t v1858;
  float64x2_t v1859;
  float64x2_t v1860;
  float64x2_t v1861;
  float64x2_t v1862;
  float64x2_t v1863;
  float64x2_t v1864;
  float64x2_t v1865;
  float64x2_t v1866;
  float64x2_t v1867;
  float64x2_t v1868;
  float64x2_t v1869;
  float64x2_t v1870;
  unsigned int v1871;
  float64x2_t *v1872;
  float64x2_t v1873;
  float64x2_t *v1874;
  float64x2_t v1875;
  float64x2_t v1876;
  float64x2_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  float64x2_t *v1880;
  float64x2_t v1881;
  float64x2_t v1882;
  float64x2_t v1883;
  float64x2_t v1884;
  float64x2_t v1885;
  float64x2_t *v1886;
  uint64_t v1887;
  float64x2_t v1888;
  float64x2_t *v1889;
  float64x2_t v1890;
  unint64_t v1891;
  unint64_t v1892;
  unint64_t v1893;
  unint64_t v1894;
  uint64_t v1895;
  int v1896;
  int v1897;
  int v1898;
  uint64_t v1899;
  int v1900;
  int v1901;
  int v1902;
  int v1903;
  int v1904;
  int v1905;
  int v1906;
  int v1907;
  uint64_t v1908;
  int v1909;
  int v1910;
  int v1911;
  int v1912;
  int v1913;
  int v1914;
  int v1915;
  int v1916;
  uint64_t v1917;
  int v1918;
  int v1919;
  int v1920;
  int v1921;
  uint64_t v1922;
  int *v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  float64x2_t v1931;
  uint64_t v1932;
  int v1933;
  uint64_t v1934;
  uint64_t v1935;
  float64x2_t v1936;
  int64x2_t v1937;
  float64x2_t *v1938;
  float64x2_t v1939;
  float64x2_t v1940;
  uint64_t v1941;
  float64x2_t *v1942;
  int *v1943;
  float64x2_t v1944;
  float64x2_t v1945;
  uint64_t v1948;
  float64x2_t v1950;
  int *v1955;
  uint64_t v1957;
  uint64_t v1958;
  double v1959;
  uint64_t v1961;
  float64x2_t *v1963;
  float64x2_t v1965;
  float64x2_t v1966;
  float64x2_t v1967;
  float64x2_t v1968;
  uint64_t v1969;
  double v1970;
  double v1975;
  float64x2_t *v1980;
  double v1981;
  float64x2_t v1983;
  double v1984;
  double v1985;
  uint64_t v1986;
  float64x2_t v1987;
  float64x2_t v1988;
  float64x2_t v1989;
  float64x2_t v1990;
  float64x2_t v1991;
  float64x2_t v1992;
  uint64_t v2002;
  uint64_t v2003;
  double *v2004;
  float64_t v2005;
  uint64_t v2006;
  float64x2_t *v2007;
  float64x2_t v2008;
  float64x2_t v2009;
  float64x2_t v2010;
  float64x2_t v2013;
  float64x2_t v2015;
  uint64_t v2016;
  double *v2017;
  float64x2_t v2018;
  float64x2_t v2019;
  float64x2_t v2020;
  float64x2_t v2021;
  float64x2_t *v2022;
  float64x2_t *v2023;
  float64x2_t v2024;
  float64x2_t *v2025;
  float64x2_t v2026;
  float64x2_t v2027;
  float64x2_t v2028;
  float64x2_t v2029;
  float64x2_t v2030;
  float64x2_t v2031;
  float64x2_t v2032;
  float64x2_t v2033;
  float64x2_t v2034;
  float64x2_t v2035;
  float64x2_t v2036;
  float64x2_t v2037;
  float64x2_t v2038;
  float64x2_t v2039;
  float64x2_t v2040;
  float64x2_t v2041;
  float64x2_t v2042;
  float64x2_t *v2043;
  float64x2_t v2044;
  float64x2_t v2045;
  float64x2_t v2046;
  float64x2_t v2047;
  float64x2_t *v2048;
  float64x2_t v2049;
  float64x2_t *v2050;
  float64x2_t v2051;
  float64x2_t v2052;
  float64x2_t v2053;
  float64x2_t v2054;
  float64x2_t *v2055;
  float64x2_t v2056;
  float64x2_t v2057;
  float64x2_t v2058;
  float64x2_t v2059;
  float64x2_t v2060;
  float64x2_t v2061;
  float64x2_t v2062;
  float64x2_t v2063;
  float64x2_t v2064;
  float64x2_t v2065;
  float64x2_t v2066;
  float64x2_t v2067;
  float64x2_t v2068;
  float64x2_t v2069;
  float64x2_t v2070;
  float64x2_t v2071;
  float64x2_t v2072;
  float64x2_t v2073;
  float64x2_t v2074;
  float64x2_t v2075;
  float64x2_t v2076;
  float64x2_t v2077;
  float64x2_t v2078;
  float64x2_t v2079;
  float64x2_t v2080;
  float64x2_t v2081;
  float64x2_t v2082;
  float64x2_t v2083;
  float64x2_t v2084;
  float64x2_t *v2085;
  float64x2_t v2086;
  float64x2_t v2087;
  float64x2_t v2088;
  float64x2_t v2089;
  float64x2_t v2090;
  float64x2_t v2091;
  float64x2_t v2092;
  float64x2_t v2093;
  float64x2_t v2094;
  float64x2_t v2095;
  float64x2_t v2096;
  float64x2_t v2097;
  float64x2_t v2098;
  float64x2_t v2099;
  float64x2_t v2100;
  float64x2_t v2101;
  float64x2_t v2102;
  float64x2_t *v2103;
  float64x2_t v2104;
  float64x2_t v2105;
  float64x2_t v2106;
  float64x2_t v2107;
  float64x2_t v2108;
  float64x2_t v2109;
  float64x2_t v2110;
  float64x2_t *v2111;
  float64x2_t *v2112;
  float64x2_t v2113;
  int *v2114;
  int v2115;
  int v2116;
  int v2117;
  float64x2_t *v2118;
  int v2119;
  int v2120;
  int v2121;
  int v2122;
  uint64_t v2123;
  uint64_t v2124;
  int *v2125;
  uint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t v2131;
  float64x2_t *v2132;
  float64x2_t v2133;
  float64x2_t v2134;
  float64x2_t v2135;
  float64x2_t v2136;
  float64x2_t *v2137;
  float64x2_t v2138;
  float64x2_t v2139;
  int *v2140;
  int v2141;
  int v2142;
  int v2143;
  float64x2_t *v2144;
  int v2145;
  int v2146;
  int v2147;
  int v2148;
  uint64_t v2149;
  int *v2150;
  uint64_t v2151;
  uint64_t v2152;
  uint64_t v2153;
  int *v2154;
  int v2155;
  int v2156;
  int v2157;
  double *v2158;
  int v2159;
  int v2160;
  int v2161;
  int v2162;
  uint64_t v2163;
  uint64_t v2164;
  int *v2165;
  uint64_t v2166;
  uint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  uint64_t v2171;
  float64x2_t *v2172;
  float64x2_t v2173;
  float64x2_t v2174;
  float64x2_t v2175;
  float64x2_t v2176;
  float64x2_t v2177;
  float64x2_t *v2178;
  float64x2_t v2179;
  uint64_t v2180;
  uint64_t v2181;
  double v2182;
  uint64_t v2183;
  unint64_t v2184;
  unint64_t v2185;
  unint64_t v2186;
  uint64_t v2187;
  unint64_t v2188;
  uint64_t v2189;
  unint64_t v2190;
  unint64_t v2191;
  unint64_t v2192;
  unint64_t v2193;
  unint64_t v2194;
  unint64_t v2195;
  unint64_t v2196;
  unint64_t v2197;
  uint64_t v2198;
  unint64_t v2199;
  unint64_t v2200;
  unint64_t v2201;
  unint64_t v2203;
  unint64_t v2204;
  unint64_t v2205;
  unint64_t v2206;
  unint64_t v2207;
  unint64_t v2208;
  unint64_t v2210;
  unint64_t v2211;
  unint64_t v2212;
  unint64_t v2213;
  unint64_t v2214;
  unint64_t v2215;
  unint64_t v2216;
  unint64_t v2217;
  unint64_t v2218;
  unint64_t v2219;
  unint64_t v2220;
  unint64_t v2221;
  unint64_t v2222;
  unint64_t v2223;
  unint64_t v2224;
  unint64_t v2225;
  unint64_t v2227;
  unint64_t v2228;
  unint64_t v2229;
  unint64_t v2231;
  unint64_t v2232;
  unint64_t v2233;
  uint64_t v2234;
  unint64_t v2235;
  unint64_t v2236;
  unint64_t v2237;
  unint64_t v2238;
  unint64_t v2239;
  unint64_t v2240;
  unint64_t v2241;
  uint64_t v2242;
  unint64_t v2243;
  uint64_t v2244;
  uint64_t v2246;
  uint64_t v2247;
  uint64_t v2248;
  uint64_t v2249;
  uint64_t v2250;
  unint64_t v2251;
  uint64_t v2252;
  uint64_t v2253;
  int *v2254;
  uint64_t v2255;
  unint64_t v2256;
  uint64_t v2257;
  unint64_t v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t v2261;
  unint64_t v2262;
  uint64_t v2263;
  uint64_t v2264;
  uint64_t v2265;
  uint64_t v2266;
  uint64_t v2267;
  int *v2268;
  uint64_t v2269;
  uint64_t v2270;
  int *v2271;
  uint64_t v2272;
  uint64_t v2273;
  uint64_t v2274;
  uint64_t v2275;
  uint64_t v2276;
  uint64_t v2277;
  uint64_t v2278;
  uint64_t v2279;
  uint64_t v2280;
  unint64_t v2281;
  uint64_t v2282;
  uint64_t v2283;
  float64x2_t *v2284;
  uint64_t v2285;
  unint64_t v2286;
  uint64_t v2287;
  uint64_t v2288;
  int64x2_t *v2289;
  uint64_t v2290;
  uint64_t v2291;
  uint64_t v2292;
  float64x2_t *v2293;
  float64x2_t *v2294;
  uint64_t v2295;
  float64x2_t *v2296;
  float64x2_t *v2297;
  uint64_t v2298;
  uint64_t v2299;
  float64x2_t *v2300;
  uint64_t v2301;
  uint64_t v2302;
  uint64_t v2303;
  unint64_t v2304;
  int *v2305;
  float64x2_t *v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t v2309;
  uint64_t v2310;
  uint64_t v2311;
  float64x2_t *v2312;
  uint64_t v2313;
  uint64_t v2314;
  uint64_t v2315;
  unint64_t v2316;
  uint64_t v2317;
  unint64_t v2318;
  uint64_t v2319;
  uint64_t v2320;
  uint64_t v2321;
  uint64_t v2322;
  uint64_t v2323;
  uint64_t v2325;
  uint64_t v2326;
  unint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  unint64_t v2330;
  uint64_t v2331;
  uint64_t v2332;
  unint64_t v2333;
  uint64_t v2334;
  uint64_t v2335;
  uint64_t v2336;
  uint64_t v2337;
  unint64_t v2338;
  uint64_t v2339;
  uint64_t v2340;
  uint64_t v2341;
  unint64_t v2342;
  uint64_t v2343;
  uint64_t v2344;
  uint64_t v2345;
  uint64_t v2346;
  uint64_t v2347;
  uint64_t v2348;
  unint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t v2353;
  unint64_t v2354;
  uint64_t v2355;
  uint64_t v2356;
  uint64_t v2357;
  uint64_t v2358;
  unint64_t v2359;
  uint64_t v2360;
  uint64_t v2361;
  unint64_t v2362;
  uint64_t v2363;
  uint64_t v2364;
  unint64_t v2365;
  uint64_t v2366;
  uint64_t v2367;
  unint64_t v2368;
  float64x2_t v2369;
  uint64_t v2370;
  unint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  unint64_t v2374;
  float64x2_t v2375;
  uint64_t v2376;
  unint64_t v2377;
  uint64_t v2378;
  uint64_t v2379;
  unint64_t v2380;
  uint64_t v2381;
  unint64_t v2382;
  uint64_t v2383;
  unint64_t v2384;
  float64x2_t v2385;
  unint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  unint64_t v2389;
  uint64_t v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  unint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  uint64_t v2397;
  uint64_t v2398;
  uint64_t v2399;
  uint64_t v2400;
  uint64_t v2401;
  uint64_t v2402;
  uint64_t v2403;
  uint64_t v2404;
  uint64_t v2405;
  uint64_t v2406;
  uint64_t v2407;
  uint64_t v2408;
  uint64_t v2409;
  uint64_t v2410;
  uint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  uint64_t v2419;
  uint64_t v2420;
  uint64_t v2421;
  uint64_t v2422;
  uint64_t v2423;
  uint64_t v2424;
  uint64_t v2425;
  uint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  uint64_t v2430;
  uint64_t v2431;
  uint64_t v2432;
  uint64_t v2433;
  uint64_t v2434;
  uint64_t v2435;
  uint64_t v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  uint64_t v2441;
  int v2442;
  uint64_t v2443;
  uint64_t v2444;
  uint64_t v2445;
  uint64_t v2446;
  uint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  int v2450;
  uint64_t v2451;
  uint64_t v2452;
  uint64_t v2453;
  uint64_t v2454;
  uint64_t v2455;
  uint64_t v2456;
  uint64_t v2457;
  int v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  uint64_t v2462;
  uint64_t v2463;
  uint64_t v2464;
  uint64_t v2465;
  int v2466;
  uint64_t v2467;
  uint64_t v2468;
  uint64_t v2469;
  uint64_t v2470;
  uint64_t v2471;
  uint64_t v2472;
  uint64_t v2473;
  float64x2_t v2474;
  uint64_t v2475;
  uint64_t v2476;
  uint64_t v2477;
  uint64_t v2478;
  uint64_t v2479;
  uint64_t v2480;
  uint64_t v2481;
  float64x2_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  uint64_t v2485;
  uint64_t v2486;
  uint64_t v2487;
  uint64_t v2488;
  uint64_t v2489;
  float64x2_t v2490;
  uint64_t v2491;
  uint64_t v2492;
  uint64_t v2493;
  int v2494;
  uint64_t v2495;
  uint64_t v2496;
  uint64_t v2497;
  float64x2_t v2498;
  uint64_t v2499;
  uint64_t v2500;
  uint64_t v2501;
  int v2502;
  uint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  float64x2_t v2506;
  uint64_t v2507;
  uint64_t v2508;
  uint64_t v2509;
  int v2510;
  uint64_t v2511;
  uint64_t v2512;
  uint64_t v2513;
  float64x2_t v2514;
  uint64_t v2515;
  uint64_t v2516;
  uint64_t v2517;
  int v2518;
  uint64_t v2519;
  uint64_t v2520;
  uint64_t v2521;
  float64x2_t v2522;
  uint64_t v2523;
  uint64_t v2524;
  uint64_t v2525;
  int64x2_t v2526;
  uint64_t v2527;
  uint64_t v2528;
  uint64_t v2529;
  float64x2_t v2530;
  uint64_t v2531;
  uint64_t v2532;
  uint64_t v2533;
  uint64_t v2534;
  float64_t v2535;
  uint64_t v2536;
  uint64_t v2537;
  uint64_t v2538;
  int64x2_t v2539;
  unint64_t v2540;
  uint64_t v2541;
  uint64_t v2542;
  uint64_t v2543;
  uint64_t v2544;
  float64_t v2545;
  uint64_t v2546;
  uint64_t v2547;
  int8x16_t v2548;
  unint64_t v2549;
  unint64_t v2550;
  uint64_t v2551;
  uint64_t v2552;
  uint64_t v2553;
  float64_t v2554;
  uint64_t v2555;
  uint64_t v2556;
  int64x2_t v2557;
  uint64_t v2558;
  uint64_t v2559;
  uint64_t v2560;
  float64_t v2561;
  uint64_t v2562;
  uint64_t v2563;
  float64x2_t v2564;
  float64x2_t v2565;
  uint64_t v2566;
  uint64_t v2567;
  uint64_t v2568;
  float64x2_t v2569;
  uint64_t v2570;
  uint64_t v2571;
  float64x2_t v2572;
  float64x2_t v2573;
  unint64_t v2574;
  uint64_t v2575;
  uint64_t v2576;
  uint64_t v2577;
  float64x2_t v2578;
  uint64_t v2579;
  uint64_t v2580;
  float64x2_t v2581;
  float64x2_t v2582;
  unint64_t v2583;
  uint64_t v2584;
  uint64_t v2585;
  uint64_t v2586;
  float64x2_t v2587;
  float64x2_t *v2588;
  float64x2_t *v2589;
  uint64_t v2590;
  uint64_t v2591;
  int64x2_t v2592;
  float64_t v2593;
  float64x2_t v2594;
  unint64_t v2595;
  uint64_t v2596;
  uint64_t v2597;
  uint64_t v2598;
  uint64_t v2599;
  float64x2_t v2600;
  unint64_t v2601;
  uint64_t v2602;
  uint64_t v2603;
  uint64_t v2604;
  float64x2_t v2605;
  unint64_t v2606;
  uint64_t v2607;
  float64x2_t v2608;
  float64x2x2_t v2609;
  float64x2x2_t v2610;
  float64x2x2_t v2611;
  float64x2x2_t v2612;
  float64x2x2_t v2613;
  float64x2x2_t v2614;
  float64x2x2_t v2615;
  float64x2x2_t v2616;
  float64x2x2_t v2617;
  float64x2x2_t v2618;
  float64x2x2_t v2619;
  float64x2x2_t v2620;
  float64x2x2_t v2621;

  v68 = STACK[0xB38];
  v2574 = STACK[0x798];
  v69 = STACK[0x788];
  v2595 = STACK[0x778];
  v70 = STACK[0x770];
  v2251 = STACK[0x750];
  v2240 = STACK[0x748];
  v71 = STACK[0xB30];
  v72 = STACK[0xB28];
  v73 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v74 = v73[14];
  v2303 = v73[12];
  v2189 = v73[10];
  v2198 = v73[8];
  v2321 = v73[6];
  v2310 = v73[4];
  v75 = v73[2];
  v2187 = *v73;
  v2234 = v74;
  v2583 = v70;
  v2540 = v68;
  if ((**(_BYTE **)(v72 + 16) & 1) != 0)
  {
    v2549 = v71;
    v76 = *(int **)(a3 + 16);
    extent = _gc_buffer_get_extent();
    v78 = _gc_buffer_get_extent();
    v79 = _gc_buffer_get_extent();
    if (extent != 1 || v78 != v79)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(a2 + 24) |= 1uLL;
    }
    v80 = *(double **)(a2 + 16);
    v81 = _gc_buffer_get_extent();
    v82 = _gc_buffer_get_extent();
    v83 = _gc_buffer_get_extent();
    v84 = _gc_buffer_get_extent();
    if (v81 != 1 || v82 != 1 || v83 != v84)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(a5 + 24) |= 1uLL;
    }
    v85 = *(_QWORD *)(a5 + 16);
    v86 = *(int **)(a12 + 16);
    v87 = *(_QWORD *)(a14 + 16);
    v88 = *(_QWORD *)(a15 + 16);
    v89 = *(_QWORD *)(v2240 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v2187 >= 1)
    {
      v90 = v2187;
      do
      {
        v91 = *v76;
        v92 = *(double *)(v85 + 8 * *v86);
        *(double *)(v89 + 8 * v91) = *(double *)(v89 + 8 * v91) - v92 * *v80;
        if (v91 >> 30 != 3)
        {
          v93 = 8 * ((int)v91 + *(_DWORD *)(v88 + 4) * (int)v91);
          *(double *)(v87 + v93) = *(double *)(v87 + v93) + v92 * v92;
        }
        ++v80;
        ++v86;
        v76 += 2;
        --v90;
      }
      while (v90);
    }
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v70 = v2583;
    v68 = v2540;
    v71 = v2549;
  }
  v94 = STACK[0xB40];
  v2550 = STACK[0xB40];
  if ((**(_BYTE **)(v71 + 16) & 1) != 0)
  {
    v95 = *(int **)(v2595 + 16);
    v96 = _gc_buffer_get_extent();
    v97 = _gc_buffer_get_extent();
    v98 = _gc_buffer_get_extent();
    if (v96 != 3 || v97 != v98)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v70 + 24) |= 1uLL;
    }
    v2531 = *(_QWORD *)(v70 + 16);
    v99 = _gc_buffer_get_extent();
    v100 = _gc_buffer_get_extent();
    v101 = _gc_buffer_get_extent();
    v102 = _gc_buffer_get_extent();
    if (v99 != 3 || v100 != 3 || v101 != v102)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v69 + 24) |= 1uLL;
    }
    v103 = *(_QWORD *)(v69 + 16);
    v104 = *(_QWORD *)(a7 + 16);
    v105 = *(int **)(v2574 + 16);
    v106 = *(_QWORD *)(a27 + 16);
    v107 = *(_QWORD *)(a28 + 16);
    v108 = *(_QWORD *)(v2251 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v75 >= 1)
    {
      v110 = (double *)(v2531 + 16);
      v111 = v75;
      do
      {
        v112 = *v95;
        if (v112 >> 30 != 3)
        {
          v113 = (float64x2_t *)(v108 + 24 * *(int *)(v104 + 4 * v112));
          v109.f64[0] = v113[1].f64[0];
          v114 = (float64x2_t *)(v103 + 72 * *v105);
          _Q2 = *v114;
          _Q3 = v114[1];
          _Q4 = v114[2];
          _Q5 = v114[3];
          _D6 = v114[4].f64[0];
          _Q7 = *(float64x2_t *)(v110 - 2);
          _Q16.f64[0] = v114->f64[0];
          _Q16.f64[1] = v114[1].f64[1];
          v122 = (float64x2_t)vextq_s8(*(int8x16_t *)v114, (int8x16_t)_Q4, 8uLL);
          v123.f64[0] = _Q3.f64[0];
          v123.f64[1] = v114[2].f64[1];
          v124 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q16, _Q7.f64[0]), v122, _Q7, 1), v123, *v110);
          _Q7.f64[0] = *(v110 - 1);
          __asm { FMLA            D21, D7, V5.D[1] }
          _Q7.f64[0] = _D21 + _D6 * *v110;
          *v113 = vsubq_f64(*v113, v124);
          *(_QWORD *)&v113[1].f64[0] = *(_OWORD *)&vsubq_f64(v109, _Q7);
          v130 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q16, _Q2.f64[0]), v122, _Q2, 1), v123, _Q3.f64[0]);
          _Q1 = vmulq_f64(_Q5, _Q2);
          _Q2.f64[0] = _Q2.f64[1];
          __asm { FMLA            D1, D2, V5.D[1] }
          _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], _D6, _Q3.f64[0]);
          v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(_Q16, _Q3, 1), v122, _Q4.f64[0]), v123, _Q4, 1);
          __asm
          {
            FMLA            D3, D4, V5.D[1]
            FMLA            D3, D6, V4.D[1]
          }
          v133 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q16, _Q5.f64[0]), v122, _Q5, 1), v123, _D6);
          _Q16.f64[0] = _Q5.f64[1];
          __asm { FMLA            D7, D16, V5.D[1] }
          _Q5.f64[0] = _Q7.f64[0] + _D6 * _D6;
          v134 = v106 + 72 * ((int)v112 + *(_DWORD *)(v107 + 4) * (int)v112);
          v135 = *(float64x2_t *)(v134 + 16);
          v136 = *(int64x2_t *)(v134 + 32);
          v124.f64[0] = *(float64_t *)(v134 + 64);
          v137 = (int64x2_t)vaddq_f64(v132, (float64x2_t)vextq_s8((int8x16_t)v135, (int8x16_t)v136, 8uLL));
          v138 = vaddq_f64(v133, *(float64x2_t *)(v134 + 48));
          v109 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q1, v135), v137);
          *(float64x2_t *)v134 = vaddq_f64(v130, *(float64x2_t *)v134);
          *(float64x2_t *)(v134 + 16) = v109;
          *(int8x16_t *)(v134 + 32) = vextq_s8((int8x16_t)v137, (int8x16_t)vaddq_f64(_Q3, (float64x2_t)vdupq_laneq_s64(v136, 1)), 8uLL);
          *(float64x2_t *)(v134 + 48) = v138;
          *(_QWORD *)(v134 + 64) = *(_OWORD *)&vaddq_f64(_Q5, v124);
        }
        v110 += 3;
        ++v105;
        v95 += 2;
        --v111;
      }
      while (v111);
    }
    *(_QWORD *)(v2251 + 24) |= 1uLL;
    *(_QWORD *)(a27 + 24) |= 1uLL;
    v74 = v2234;
    v70 = v2583;
    v94 = v2550;
    v68 = v2540;
  }
  v139 = STACK[0xB48];
  v2377 = STACK[0x838];
  v2371 = STACK[0x820];
  v2365 = STACK[0x808];
  v2359 = STACK[0x7F0];
  v140 = STACK[0x7E0];
  v141 = STACK[0x7D8];
  v142 = STACK[0x7D0];
  v2386 = STACK[0x7C8];
  v2382 = STACK[0x7B0];
  v2349 = STACK[0x7A8];
  v2241 = STACK[0x768];
  v2239 = STACK[0x760];
  v2238 = STACK[0x740];
  v2330 = STACK[0x7E0];
  v2316 = STACK[0x7D8];
  v2354 = STACK[0x7D0];
  v2262 = STACK[0xB48];
  if ((**(_BYTE **)(v68 + 16) & 1) != 0)
  {
    v143 = *(int **)(v2595 + 16);
    v144 = _gc_buffer_get_extent();
    v145 = _gc_buffer_get_extent();
    v146 = _gc_buffer_get_extent();
    if (v144 != 3 || v145 != v146)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v70 + 24) |= 1uLL;
    }
    v2541 = *(_QWORD *)(v70 + 16);
    v147 = _gc_buffer_get_extent();
    v148 = _gc_buffer_get_extent();
    v149 = _gc_buffer_get_extent();
    v150 = _gc_buffer_get_extent();
    if (v147 != 3 || v148 != 3 || v149 != v150)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v69 + 24) |= 1uLL;
    }
    v151 = *(_QWORD *)(v69 + 16);
    v152 = *(int **)(v2574 + 16);
    v153 = *(_QWORD *)(a27 + 16);
    v154 = *(_QWORD *)(a28 + 16);
    v155 = *(_QWORD *)(v2251 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v74 = v2234;
    v140 = v2330;
    if ((int)v75 >= 1)
    {
      v157 = (double *)(v2541 + 16);
      do
      {
        v158 = *v143;
        v159 = (float64x2_t *)(v155 + 24 * v158);
        v156.f64[0] = v159[1].f64[0];
        v160 = (float64x2_t *)(v151 + 72 * *v152);
        _Q7 = *v160;
        _Q3 = v160[1];
        _Q2 = v160[2];
        _Q0 = v160[3];
        _D1 = v160[4].f64[0];
        _Q18 = *(float64x2_t *)(v157 - 2);
        v167.f64[0] = v160->f64[0];
        v167.f64[1] = v160[1].f64[1];
        v168 = (float64x2_t)vextq_s8(*(int8x16_t *)v160, (int8x16_t)_Q2, 8uLL);
        v169.f64[0] = v160[1].f64[0];
        v169.f64[1] = v160[2].f64[1];
        v170 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v167, _Q18.f64[0]), v168, _Q18, 1), v169, *v157);
        _Q18.f64[0] = *(v157 - 1);
        __asm { FMLA            D21, D18, V0.D[1] }
        _Q18.f64[0] = _D21 + _D1 * *v157;
        v156 = vsubq_f64(v156, _Q18);
        *v159 = vsubq_f64(*v159, v170);
        v159[1].f64[0] = v156.f64[0];
        if (v158 >> 30 != 3)
        {
          _Q16 = (float64x2_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL);
          v156 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v167, _Q7.f64[0]), v168, _Q7, 1), v169, _Q3.f64[0]);
          _Q18 = vmulq_f64(_Q0, _Q7);
          __asm { FMLA            D18, D16, V7.D[1] }
          _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], _D1, _Q3.f64[0]);
          v174 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v167, _Q3, 1), v168, _Q2.f64[0]), v169, _Q2, 1);
          __asm { FMLA            D3, D1, V2.D[1] }
          v175 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v167, _Q0.f64[0]), v168, _Q0, 1), v169, _D1);
          __asm { FMLA            D4, D16, V0.D[1] }
          _Q0.f64[0] = _D4 + _D1 * _D1;
          v177 = v153 + 72 * ((int)v158 + *(_DWORD *)(v154 + 4) * (int)v158);
          v178 = *(float64x2_t *)(v177 + 16);
          v179 = *(int64x2_t *)(v177 + 32);
          _Q16.f64[0] = *(float64_t *)(v177 + 64);
          v180 = (int8x16_t)vaddq_f64(_Q3, (float64x2_t)vdupq_laneq_s64(v179, 1));
          v181 = (int64x2_t)vaddq_f64(v174, (float64x2_t)vextq_s8((int8x16_t)v178, (int8x16_t)v179, 8uLL));
          v182 = vaddq_f64(v175, *(float64x2_t *)(v177 + 48));
          *(float64x2_t *)v177 = vaddq_f64(v156, *(float64x2_t *)v177);
          *(int64x2_t *)(v177 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q18, v178), v181);
          *(int8x16_t *)(v177 + 32) = vextq_s8((int8x16_t)v181, v180, 8uLL);
          *(float64x2_t *)(v177 + 48) = v182;
          *(_QWORD *)(v177 + 64) = *(_OWORD *)&vaddq_f64(_Q0, _Q16);
        }
        v157 += 3;
        ++v152;
        v143 += 2;
        --v75;
      }
      while (v75);
    }
    *(_QWORD *)(v2251 + 24) |= 1uLL;
    *(_QWORD *)(a27 + 24) |= 1uLL;
    v141 = v2316;
    v142 = v2354;
    v139 = v2262;
    v94 = v2550;
  }
  v183 = STACK[0xB50];
  v2304 = STACK[0xB50];
  if ((**(_BYTE **)(v94 + 16) & 1) != 0)
  {
    v184 = *(_QWORD *)(v2382 + 16);
    v185 = _gc_buffer_get_extent();
    v186 = _gc_buffer_get_extent();
    v187 = _gc_buffer_get_extent();
    if (v185 != 2 || v186 != v187)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v2349 + 24) |= 1uLL;
    }
    v188 = *(_QWORD *)(v2349 + 16);
    v189 = _gc_buffer_get_extent();
    v190 = _gc_buffer_get_extent();
    v191 = _gc_buffer_get_extent();
    v192 = _gc_buffer_get_extent();
    if (v189 != 2 || v190 != 1 || v191 != v192)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2386 + 24) |= 1uLL;
    }
    v2285 = *(_QWORD *)(v2386 + 16);
    v193 = _gc_buffer_get_extent();
    v194 = _gc_buffer_get_extent();
    v195 = _gc_buffer_get_extent();
    v196 = _gc_buffer_get_extent();
    if (v193 != 2 || v194 != 3 || v195 != v196)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v142 + 24) |= 1uLL;
    }
    v2280 = *(_QWORD *)(v142 + 16);
    v197 = _gc_buffer_get_extent();
    v198 = _gc_buffer_get_extent();
    v199 = _gc_buffer_get_extent();
    v200 = _gc_buffer_get_extent();
    if (v197 != 2 || v198 != 6 || v199 != v200)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v141 + 24) |= 1uLL;
    }
    v2277 = *(_QWORD *)(v141 + 16);
    v201 = _gc_buffer_get_extent();
    v202 = _gc_buffer_get_extent();
    v203 = _gc_buffer_get_extent();
    v204 = _gc_buffer_get_extent();
    if (v201 != 2 || v202 != 2 || v203 != v204)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v140 + 24) |= 1uLL;
    }
    v2266 = *(_QWORD *)(v140 + 16);
    v2596 = *(_QWORD *)(a6 + 16);
    v2584 = *(_QWORD *)(a7 + 16);
    v2575 = *(_QWORD *)(a9 + 16);
    v2269 = *(_QWORD *)(a10 + 16);
    v205 = *(int **)(v2359 + 16);
    v206 = *(int **)(v2365 + 16);
    v207 = *(int **)(v2371 + 16);
    v208 = *(int **)(v2377 + 16);
    v2566 = *(_QWORD *)(a14 + 16);
    v2558 = *(_QWORD *)(a15 + 16);
    v2467 = *(_QWORD *)(a16 + 16);
    v2459 = *(_QWORD *)(a17 + 16);
    v2451 = *(_QWORD *)(a20 + 16);
    v2443 = *(_QWORD *)(a21 + 16);
    v2435 = *(_QWORD *)(a22 + 16);
    v2427 = *(_QWORD *)(a23 + 16);
    v2551 = *(_QWORD *)(a27 + 16);
    v2542 = *(_QWORD *)(a28 + 16);
    v2419 = *(_QWORD *)(a31 + 16);
    v2411 = *(_QWORD *)(a32 + 16);
    v2273 = *(_QWORD *)(a33 + 16);
    v2404 = *(_QWORD *)(a34 + 16);
    v2532 = *(_QWORD *)(a56 + 16);
    v2523 = *(_QWORD *)(a57 + 16);
    v2396 = *(_QWORD *)(a58 + 16);
    v2391 = *(_QWORD *)(a59 + 16);
    v2515 = *(_QWORD *)(a66 + 16);
    v2507 = *(_QWORD *)(v2238 + 16);
    v2499 = *(_QWORD *)(v2240 + 16);
    v2491 = *(_QWORD *)(v2251 + 16);
    v2483 = *(_QWORD *)(v2239 + 16);
    v2475 = *(_QWORD *)(v2241 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v140 = v2330;
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v141 = v2316;
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v2310 >= 1)
    {
      v211 = 0;
      v212 = 0;
      v213 = (int *)(v184 + 20);
      do
      {
        v223 = 6 * v212;
        v224 = *(v213 - 5);
        if (v224 >> 30 == 3)
        {
          v237 = *(int *)(v184 + 4 * (v223 | 1));
          if (v237 >> 30 == 3)
            goto LABEL_78;
          goto LABEL_72;
        }
        v225 = 8 * *(int *)(v2596 + 4 * v224);
        _Q1 = *(int8x16_t *)(v2285 + 16 * *v205);
        _D0 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
        _D3 = *(_QWORD *)(v188 + 8);
        __asm { FMLA            D4, D3, V1.D[1] }
        *(double *)(v2499 + v225) = *(double *)(v2499 + v225) - _D4;
        _D3 = _Q1.i64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v232 = 8 * ((int)v224 + *(_DWORD *)(v2558 + 4) * (int)v224);
        *(double *)(v2566 + v232) = _D2 + *(double *)(v2566 + v232);
        v233 = *(v213 - 4);
        if (v233 >> 30 == 3)
        {
          v234 = *(v213 - 1);
          if (v234 >> 30 != 3)
            goto LABEL_82;
        }
        else
        {
          v325 = (__int128 *)(v2280 + 48 * *v206);
          _Q2 = *v325;
          _Q3 = v325[1];
          _Q4 = v325[2];
          __asm
          {
            FMLA            D5, D0, V2.D[1]
            FMLA            D2, D0, V3.D[1]
            FMLA            D3, D0, V4.D[1]
          }
          v330 = (double *)(v2467 + 24 * (int)(v233 + *(_DWORD *)(v2459 + 4) * v224));
          v209.f64[0] = _D5 + *v330;
          *(double *)&_Q3 = *(double *)&_Q3 + v330[2];
          v209.f64[1] = *(double *)&_Q2 + v330[1];
          *(float64x2_t *)v330 = v209;
          *((_QWORD *)v330 + 2) = _Q3;
          v234 = *(v213 - 1);
          if (v234 >> 30 != 3)
          {
LABEL_82:
            v331 = (__int128 *)(v2277 + 96 * *v207);
            _Q2 = *v331;
            _Q3 = v331[1];
            _Q4 = v331[2];
            _Q5 = v331[3];
            _Q6 = v331[4];
            _Q7 = v331[5];
            __asm
            {
              FMLA            D16, D0, V2.D[1]
              FMLA            D2, D0, V3.D[1]
              FMLA            D3, D0, V4.D[1]
              FMLA            D4, D0, V5.D[1]
              FMLA            D5, D0, V6.D[1]
              FMLA            D6, D0, V7.D[1]
            }
            v339 = (double *)(v2451 + 48 * (int)(v234 + *(_DWORD *)(v2443 + 4) * v224));
            *(double *)&v340 = _D16 + *v339;
            *(double *)&_Q3 = *(double *)&_Q3 + v339[2];
            v209.f64[0] = *(double *)&_Q5 + v339[4];
            *((double *)&v340 + 1) = *(double *)&_Q2 + v339[1];
            *((double *)&_Q3 + 1) = *(double *)&_Q4 + v339[3];
            v209.f64[1] = *(double *)&_Q6 + v339[5];
            *(_OWORD *)v339 = v340;
            *((_OWORD *)v339 + 1) = _Q3;
            *((float64x2_t *)v339 + 2) = v209;
            v235 = v211 + 1;
            v236 = *v213;
            if (*v213 >> 30 == 3)
            {
LABEL_71:
              v237 = *(int *)(v184 + 4 * v235);
              if (v237 >> 30 == 3)
                goto LABEL_78;
              goto LABEL_72;
            }
            goto LABEL_83;
          }
        }
        v235 = v211 + 1;
        v236 = *v213;
        if (*v213 >> 30 == 3)
          goto LABEL_71;
LABEL_83:
        v341 = (__int128 *)(v2266 + 32 * *v208);
        _Q2 = *v341;
        _Q3 = v341[1];
        __asm
        {
          FMLA            D4, D0, V2.D[1]
          FMLA            D1, D0, V3.D[1]
        }
        v346 = (double *)(v2435 + 16 * (v236 + *(_DWORD *)(v2427 + 4) * (int)v224));
        v347 = _D1 + v346[1];
        *v346 = _D4 + *v346;
        v346[1] = v347;
        v237 = *(int *)(v184 + 4 * v235);
        if (v237 >> 30 == 3)
        {
LABEL_78:
          v261 = *(int *)(v184 + 4 * (v223 + 4));
          if (v261 >> 30 == 3)
            goto LABEL_79;
          goto LABEL_75;
        }
LABEL_72:
        v238 = (float64x2_t *)(v2491 + 24 * *(int *)(v2584 + 4 * v237));
        v209.f64[0] = v238[1].f64[0];
        v239 = (float64x2_t *)(v2280 + 48 * *v206);
        _Q6 = *v239;
        _Q7 = v239[1];
        _Q0 = v239[2];
        v243 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v239, (int64x2_t)_Q7);
        v244 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v239, (int64x2_t)_Q7);
        _Q18 = vmulq_f64(_Q0, *(float64x2_t *)v188);
        _D3 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
        _D16 = *(_QWORD *)(v188 + 8);
        __asm { FMLA            D18, D16, V0.D[1] }
        *v238 = vsubq_f64(*v238, vmlaq_laneq_f64(vmulq_n_f64(v243, *(double *)v188), v244, *(float64x2_t *)v188, 1));
        *(_QWORD *)&v238[1].f64[0] = *(_OWORD *)&vsubq_f64(v209, _Q18);
        v248 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q6.f64[0]), v244, _Q6, 1);
        _Q5 = vmulq_f64(_Q0, _Q6);
        _Q6.f64[0] = _Q6.f64[1];
        __asm { FMLA            D5, D6, V0.D[1] }
        v250 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q7.f64[0]), v244, _Q7, 1);
        _Q16 = vmulq_f64(_Q0, _Q7);
        _Q7.f64[0] = _Q7.f64[1];
        __asm { FMLA            D16, D7, V0.D[1] }
        _Q17 = vmulq_f64(_Q0, _Q0);
        _Q18.f64[0] = _Q0.f64[1];
        __asm { FMLA            D17, D18, V0.D[1] }
        v253 = v2551 + 72 * ((int)v237 + *(_DWORD *)(v2542 + 4) * (int)v237);
        v254 = *(float64x2_t *)(v253 + 16);
        v255 = *(int64x2_t *)(v253 + 32);
        v210.f64[0] = *(float64_t *)(v253 + 64);
        v256 = (int64x2_t)vaddq_f64(v250, (float64x2_t)vextq_s8((int8x16_t)v254, (int8x16_t)v255, 8uLL));
        v257 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v243, _Q0.f64[0]), v244, _Q0, 1), *(float64x2_t *)(v253 + 48));
        v209 = (float64x2_t)vzip1q_s64((int64x2_t)vaddq_f64(_Q5, v254), v256);
        *(float64x2_t *)v253 = vaddq_f64(v248, *(float64x2_t *)v253);
        *(float64x2_t *)(v253 + 16) = v209;
        *(int8x16_t *)(v253 + 32) = vextq_s8((int8x16_t)v256, (int8x16_t)vaddq_f64(_Q16, (float64x2_t)vdupq_laneq_s64(v255, 1)), 8uLL);
        *(float64x2_t *)(v253 + 48) = v257;
        *(_QWORD *)(v253 + 64) = *(_OWORD *)&vaddq_f64(_Q17, v210);
        v258 = *(v213 - 1);
        if (v258 >> 30 == 3)
        {
          v259 = v211 + 4;
          v260 = *v213;
          if (*v213 >> 30 == 3)
            goto LABEL_74;
        }
        else
        {
          v348 = (float64x2_t *)(v2277 + 96 * *v207);
          _Q5 = *v348;
          _Q6 = v348[1];
          _Q7 = v348[2];
          _Q16 = v348[3];
          _Q17 = v348[4];
          _Q18 = v348[5];
          _Q19 = vmulq_f64(_Q0, *v348);
          __asm { FMLA            D19, D3, V5.D[1] }
          v356 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q6.f64[0]), v244, _Q6, 1);
          _Q20 = vmulq_f64(_Q0, _Q6);
          __asm { FMLA            D20, D3, V6.D[1] }
          v358 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q7.f64[0]), v244, _Q7, 1);
          _Q21 = vmulq_f64(_Q0, _Q7);
          __asm { FMLA            D21, D3, V7.D[1] }
          v360 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q16.f64[0]), v244, _Q16, 1);
          _Q22 = vmulq_f64(_Q0, _Q16);
          __asm { FMLA            D22, D3, V16.D[1] }
          v362 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q17.f64[0]), v244, _Q17, 1);
          _Q23 = vmulq_f64(_Q0, _Q17);
          __asm { FMLA            D23, D3, V17.D[1] }
          v364 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q18.f64[0]), v244, _Q18, 1);
          _Q24 = vmulq_f64(_Q0, _Q18);
          __asm { FMLA            D24, D3, V18.D[1] }
          v366 = v2419 + 144 * (int)(v258 + *(_DWORD *)(v2411 + 4) * v237);
          v367 = *(float64x2_t *)(v366 + 16);
          v368 = *(int64x2_t *)(v366 + 32);
          v369 = *(float64x2_t *)(v366 + 64);
          v370 = *(int64x2_t *)(v366 + 80);
          v371 = *(float64x2_t *)(v366 + 112);
          v372 = *(int64x2_t *)(v366 + 128);
          v373 = (float64x2_t)vextq_s8((int8x16_t)v371, (int8x16_t)v372, 8uLL);
          v66 = (float64x2_t)vdupq_laneq_s64(v372, 1);
          v374 = (int64x2_t)vaddq_f64(v356, (float64x2_t)vextq_s8((int8x16_t)v367, (int8x16_t)v368, 8uLL));
          v375 = (int8x16_t)vaddq_f64(_Q20, (float64x2_t)vdupq_laneq_s64(v368, 1));
          v376 = (int64x2_t)vaddq_f64(_Q21, v369);
          v377 = vaddq_f64(v358, *(float64x2_t *)(v366 + 48));
          v378 = (int64x2_t)vaddq_f64(v360, (float64x2_t)vextq_s8((int8x16_t)v369, (int8x16_t)v370, 8uLL));
          v379 = (int8x16_t)vaddq_f64(_Q22, (float64x2_t)vdupq_laneq_s64(v370, 1));
          v210 = vaddq_f64(_Q23, v371);
          v380 = vaddq_f64(v362, *(float64x2_t *)(v366 + 96));
          v381 = (int64x2_t)vaddq_f64(v364, v373);
          *(float64x2_t *)v366 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v243, v348->f64[0]), v244, *v348, 1), *(float64x2_t *)v366);
          *(int64x2_t *)(v366 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q19, v367), v374);
          *(int8x16_t *)(v366 + 32) = vextq_s8((int8x16_t)v374, v375, 8uLL);
          *(float64x2_t *)(v366 + 48) = v377;
          *(int64x2_t *)(v366 + 64) = vzip1q_s64(v376, v378);
          *(int8x16_t *)(v366 + 80) = vextq_s8((int8x16_t)v378, v379, 8uLL);
          v209 = (float64x2_t)vzip1q_s64((int64x2_t)v210, v381);
          *(float64x2_t *)(v366 + 96) = v380;
          *(float64x2_t *)(v366 + 112) = v209;
          *(int8x16_t *)(v366 + 128) = vextq_s8((int8x16_t)v381, (int8x16_t)vaddq_f64(_Q24, v66), 8uLL);
          v259 = v211 + 4;
          v260 = *v213;
          if (*v213 >> 30 == 3)
          {
LABEL_74:
            v261 = *(int *)(v184 + 4 * v259);
            if (v261 >> 30 == 3)
              goto LABEL_79;
            goto LABEL_75;
          }
        }
        v382 = (float64x2_t *)(v2266 + 32 * *v208);
        _Q4 = *v382;
        _Q5 = v382[1];
        v385 = vmlaq_laneq_f64(vmulq_n_f64(v243, v382->f64[0]), v244, *v382, 1);
        _Q7 = vmulq_f64(_Q0, *v382);
        __asm { FMLA            D7, D3, V4.D[1] }
        v387 = vmlaq_laneq_f64(vmulq_n_f64(v243, _Q5.f64[0]), v244, _Q5, 1);
        _Q0 = vmulq_f64(_Q0, _Q5);
        __asm { FMLA            D0, D3, V5.D[1] }
        v389 = v2273 + 48 * (v260 + *(_DWORD *)(v2404 + 4) * (int)v237);
        v390 = *(float64x2_t *)(v389 + 16);
        v391 = *(int64x2_t *)(v389 + 32);
        v209 = (float64x2_t)vextq_s8((int8x16_t)v390, (int8x16_t)v391, 8uLL);
        v392 = (int64x2_t)vaddq_f64(v387, v209);
        *(float64x2_t *)v389 = vaddq_f64(v385, *(float64x2_t *)v389);
        *(int64x2_t *)(v389 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q7, v390), v392);
        *(int8x16_t *)(v389 + 32) = vextq_s8((int8x16_t)v392, (int8x16_t)vaddq_f64(_Q0, (float64x2_t)vdupq_laneq_s64(v391, 1)), 8uLL);
        v261 = *(int *)(v184 + 4 * v259);
        if (v261 >> 30 == 3)
        {
LABEL_79:
          v311 = *v213;
          if (*v213 >> 30 == 3)
            goto LABEL_66;
          goto LABEL_65;
        }
LABEL_75:
        v262 = (float64x2_t *)(v2483 + 48 * *(int *)(v2575 + 4 * v261));
        v263 = (float64x2_t *)(v2277 + 96 * *v207);
        v264 = *v263;
        v265 = v263[1];
        v266 = v263[2];
        v267 = v263[3];
        v269 = v263[4];
        v268 = v263[5];
        v270 = (float64x2_t)vzip1q_s64((int64x2_t)v266, (int64x2_t)v267);
        *(_QWORD *)&v271.f64[0] = vdupq_laneq_s64((int64x2_t)v266, 1).u64[0];
        v271.f64[1] = v263[3].f64[1];
        *(_QWORD *)&v273.f64[0] = vdupq_laneq_s64((int64x2_t)v269, 1).u64[0];
        v272 = (float64x2_t)vzip1q_s64((int64x2_t)v269, (int64x2_t)v268);
        v273.f64[1] = v263[5].f64[1];
        v274 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v263, (int64x2_t)v265);
        v209 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v263, (int64x2_t)v265);
        v275 = vsubq_f64(v262[2], vmlaq_laneq_f64(vmulq_n_f64(v272, *(double *)v188), v273, *(float64x2_t *)v188, 1));
        v276 = vsubq_f64(v262[1], vmlaq_laneq_f64(vmulq_n_f64(v270, *(double *)v188), v271, *(float64x2_t *)v188, 1));
        *v262 = vsubq_f64(*v262, vmlaq_laneq_f64(vmulq_n_f64(v274, *(double *)v188), v209, *(float64x2_t *)v188, 1));
        v262[1] = v276;
        v262[2] = v275;
        v277 = vmlaq_laneq_f64(vmulq_n_f64(v274, v264.f64[0]), v209, v264, 1);
        v278 = vmlaq_laneq_f64(vmulq_n_f64(v270, v264.f64[0]), v271, v264, 1);
        v279 = vmlaq_laneq_f64(vmulq_n_f64(v272, v264.f64[0]), v273, v264, 1);
        v280 = vmlaq_laneq_f64(vmulq_n_f64(v274, v265.f64[0]), v209, v265, 1);
        v281 = vmlaq_laneq_f64(vmulq_n_f64(v270, v265.f64[0]), v271, v265, 1);
        v282 = vmlaq_laneq_f64(vmulq_n_f64(v272, v265.f64[0]), v273, v265, 1);
        v283 = vmlaq_laneq_f64(vmulq_n_f64(v274, v266.f64[0]), v209, v266, 1);
        v284 = vmlaq_laneq_f64(vmulq_n_f64(v270, v266.f64[0]), v271, v266, 1);
        v285 = vmlaq_laneq_f64(vmulq_n_f64(v272, v266.f64[0]), v273, v266, 1);
        v286 = vmlaq_laneq_f64(vmulq_n_f64(v274, v267.f64[0]), v209, v267, 1);
        v287 = vmlaq_laneq_f64(vmulq_n_f64(v270, v267.f64[0]), v271, v267, 1);
        v288 = vmlaq_laneq_f64(vmulq_n_f64(v272, v267.f64[0]), v273, v267, 1);
        v289 = vmlaq_laneq_f64(vmulq_n_f64(v274, v269.f64[0]), v209, v269, 1);
        v290 = vmlaq_laneq_f64(vmulq_n_f64(v270, v269.f64[0]), v271, v269, 1);
        v291 = vmlaq_laneq_f64(vmulq_n_f64(v272, v269.f64[0]), v273, v269, 1);
        v292 = vmlaq_laneq_f64(vmulq_n_f64(v274, v268.f64[0]), v209, v268, 1);
        v293 = vmlaq_laneq_f64(vmulq_n_f64(v270, v268.f64[0]), v271, v268, 1);
        v66 = vmlaq_laneq_f64(vmulq_n_f64(v272, v268.f64[0]), v273, v268, 1);
        v294 = (float64x2_t *)(v2532 + 288 * ((int)v261 + *(_DWORD *)(v2523 + 4) * (int)v261));
        v295 = vaddq_f64(v279, v294[2]);
        v296 = vaddq_f64(v278, v294[1]);
        v297 = vaddq_f64(v282, v294[5]);
        v298 = vaddq_f64(v281, v294[4]);
        v299 = vaddq_f64(v280, v294[3]);
        v300 = vaddq_f64(v285, v294[8]);
        v301 = vaddq_f64(v284, v294[7]);
        v302 = vaddq_f64(v283, v294[6]);
        v303 = vaddq_f64(v288, v294[11]);
        v304 = vaddq_f64(v287, v294[10]);
        v210 = vaddq_f64(v286, v294[9]);
        v305 = v294[15];
        v306 = vaddq_f64(v291, v294[14]);
        v307 = vaddq_f64(v290, v294[13]);
        v308 = vaddq_f64(v289, v294[12]);
        v309 = vaddq_f64(v66, v294[17]);
        *v294 = vaddq_f64(v277, *v294);
        v294[1] = v296;
        v294[2] = v295;
        v294[3] = v299;
        v294[4] = v298;
        v294[5] = v297;
        v310 = vaddq_f64(v293, v294[16]);
        v294[6] = v302;
        v294[7] = v301;
        v294[8] = v300;
        v294[9] = v210;
        v294[10] = v304;
        v294[11] = v303;
        v294[12] = v308;
        v294[13] = v307;
        v294[14] = v306;
        v294[15] = vaddq_f64(v292, v305);
        v294[16] = v310;
        v294[17] = v309;
        v311 = *v213;
        if (*v213 >> 30 == 3)
          goto LABEL_66;
        v312 = (float64x2_t *)(v2266 + 32 * *v208);
        v313 = v312[1];
        v314 = vmlaq_laneq_f64(vmulq_n_f64(v274, v312->f64[0]), v209, *v312, 1);
        v315 = vmlaq_laneq_f64(vmulq_n_f64(v270, v312->f64[0]), v271, *v312, 1);
        v316 = vmlaq_laneq_f64(vmulq_n_f64(v274, v313.f64[0]), v209, v313, 1);
        v317 = vmlaq_laneq_f64(vmulq_n_f64(v270, v313.f64[0]), v271, v313, 1);
        v318 = vmlaq_laneq_f64(vmulq_n_f64(v272, v313.f64[0]), v273, v313, 1);
        v319 = (float64x2_t *)(v2396 + 96 * (v311 + *(_DWORD *)(v2391 + 4) * (int)v261));
        v320 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v272, v312->f64[0]), v273, *v312, 1), v319[2]);
        v321 = vaddq_f64(v315, v319[1]);
        v322 = vaddq_f64(v318, v319[5]);
        v323 = vaddq_f64(v317, v319[4]);
        v324 = vaddq_f64(v316, v319[3]);
        *v319 = vaddq_f64(v314, *v319);
        v319[1] = v321;
        v319[2] = v320;
        v319[3] = v324;
        v319[4] = v323;
        v319[5] = v322;
LABEL_65:
        v214 = 16 * *(int *)(v2269 + 4 * v311);
        v215 = (float64x2_t *)(v2266 + 32 * *v208);
        v216 = *v215;
        v217 = v215[1];
        v218 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v215, (int64x2_t)v217);
        v219 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v215, (int64x2_t)v217);
        v209 = *(float64x2_t *)v188;
        *(float64x2_t *)(v2475 + v214) = vsubq_f64(*(float64x2_t *)(v2475 + v214), vmlaq_laneq_f64(vmulq_n_f64(v218, *(double *)v188), v219, *(float64x2_t *)v188, 1));
        v220 = (float64x2_t *)(v2515 + 32 * (v311 + *(_DWORD *)(v2507 + 4) * v311));
        v221 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v218, v216.f64[0]), v219, v216, 1), *v220);
        v222 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v218, v217.f64[0]), v219, v217, 1), v220[1]);
        *v220 = v221;
        v220[1] = v222;
LABEL_66:
        ++v212;
        v211 += 6;
        v188 += 16;
        ++v208;
        ++v207;
        ++v206;
        ++v205;
        v213 += 6;
      }
      while (6 * v2310 != v211);
    }
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2251 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a33 + 24) |= 1uLL;
    *(_QWORD *)(a31 + 24) |= 1uLL;
    *(_QWORD *)(a27 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a16 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v183 = v2304;
    v142 = v2354;
    v139 = v2262;
  }
  v393 = STACK[0xB58];
  v2236 = STACK[0x928];
  v2231 = STACK[0x920];
  v2232 = STACK[0x918];
  v2233 = STACK[0x930];
  v2235 = STACK[0x910];
  v2243 = STACK[0x908];
  v2228 = STACK[0x8E0];
  v2229 = STACK[0x8F8];
  v2227 = STACK[0x8C8];
  v2220 = STACK[0x8A0];
  v2222 = STACK[0x8B0];
  v2286 = STACK[0x890];
  v394 = STACK[0x880];
  v2212 = STACK[0x878];
  v2210 = STACK[0x870];
  v395 = STACK[0x868];
  v2256 = STACK[0x850];
  v396 = STACK[0x848];
  v2216 = STACK[0x880];
  v2218 = STACK[0x888];
  v2214 = STACK[0x868];
  v2207 = STACK[0x848];
  v2281 = STACK[0xB58];
  if ((**(_BYTE **)(v139 + 16) & 1) != 0)
  {
    v2412 = *(_QWORD *)(v2382 + 16);
    v397 = _gc_buffer_get_extent();
    v398 = _gc_buffer_get_extent();
    v399 = _gc_buffer_get_extent();
    if (v397 != 2 || v398 != v399)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v2349 + 24) |= 1uLL;
    }
    v400 = *(_QWORD *)(v2349 + 16);
    v401 = _gc_buffer_get_extent();
    v402 = _gc_buffer_get_extent();
    v403 = _gc_buffer_get_extent();
    v404 = _gc_buffer_get_extent();
    if (v401 != 2 || v402 != 1 || v403 != v404)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2386 + 24) |= 1uLL;
    }
    v2428 = *(_QWORD *)(v2386 + 16);
    v405 = _gc_buffer_get_extent();
    v406 = _gc_buffer_get_extent();
    v407 = _gc_buffer_get_extent();
    v408 = _gc_buffer_get_extent();
    if (v405 != 2 || v406 != 3 || v407 != v408)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v142 + 24) |= 1uLL;
    }
    v2420 = *(_QWORD *)(v142 + 16);
    v409 = _gc_buffer_get_extent();
    v410 = _gc_buffer_get_extent();
    v411 = _gc_buffer_get_extent();
    v412 = _gc_buffer_get_extent();
    if (v409 != 2 || v410 != 6 || v411 != v412)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v141 + 24) |= 1uLL;
    }
    v413 = *(_QWORD *)(v141 + 16);
    v414 = _gc_buffer_get_extent();
    v415 = _gc_buffer_get_extent();
    v416 = _gc_buffer_get_extent();
    v417 = _gc_buffer_get_extent();
    if (v414 != 2 || v415 != 2 || v416 != v417)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v140 + 24) |= 1uLL;
    }
    v418 = *(_QWORD *)(v140 + 16);
    v419 = *(int **)(v2359 + 16);
    v420 = *(int **)(v2365 + 16);
    v421 = *(int **)(v2371 + 16);
    v422 = *(int **)(v2377 + 16);
    v2397 = *(_QWORD *)(a14 + 16);
    v2405 = *(_QWORD *)(a15 + 16);
    v2576 = *(_QWORD *)(a16 + 16);
    v2567 = *(_QWORD *)(a17 + 16);
    v2559 = *(_QWORD *)(a20 + 16);
    v2552 = *(_QWORD *)(a21 + 16);
    v2543 = *(_QWORD *)(a22 + 16);
    v2533 = *(_QWORD *)(a23 + 16);
    v2524 = *(_QWORD *)(a27 + 16);
    v2516 = *(_QWORD *)(a28 + 16);
    v2508 = *(_QWORD *)(a31 + 16);
    v2500 = *(_QWORD *)(a32 + 16);
    v2492 = *(_QWORD *)(a33 + 16);
    v2484 = *(_QWORD *)(a34 + 16);
    v2476 = *(_QWORD *)(a56 + 16);
    v2468 = *(_QWORD *)(a57 + 16);
    v2460 = *(_QWORD *)(a58 + 16);
    v2452 = *(_QWORD *)(a59 + 16);
    v2444 = *(_QWORD *)(a66 + 16);
    v2436 = *(_QWORD *)(v2238 + 16);
    v423 = *(_QWORD *)(v2240 + 16);
    v2597 = *(_QWORD *)(v2251 + 16);
    v2585 = *(_QWORD *)(v2239 + 16);
    v424 = *(_QWORD *)(v2241 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v427 = v2310;
    if ((int)v2310 >= 1)
    {
      v428 = (int *)(v2412 + 16);
      do
      {
        v429 = *(v428 - 4);
        _Q2 = *(int8x16_t *)(v2428 + 16 * *v419);
        _D1 = vextq_s8(_Q2, _Q2, 8uLL).u64[0];
        v432 = *(float64x2_t *)v400;
        _D5 = *(_QWORD *)(v400 + 8);
        __asm { FMLA            D4, D5, V2.D[1] }
        *(double *)(v423 + 8 * v429) = *(double *)(v423 + 8 * v429) - _D4;
        if (v429 >> 30 == 3)
        {
          v435 = *(v428 - 3);
          v436 = v435 >> 30;
          if (v435 >> 30 == 3)
            goto LABEL_114;
        }
        else
        {
          __asm { FMLA            D3, D1, V2.D[1] }
          v535 = 8 * ((int)v429 + *(_DWORD *)(v2405 + 4) * (int)v429);
          *(double *)(v2397 + v535) = _D3 + *(double *)(v2397 + v535);
          v435 = *(v428 - 3);
          v436 = v435 >> 30;
          if (v435 >> 30 == 3)
          {
LABEL_114:
            v437 = *v428;
            v438 = v437 >> 30;
            if (v437 >> 30 == 3)
              goto LABEL_115;
            goto LABEL_127;
          }
        }
        v536 = (__int128 *)(v2420 + 48 * *v420);
        _Q3 = *v536;
        _Q4 = v536[1];
        _Q5 = v536[2];
        __asm
        {
          FMLA            D6, D1, V3.D[1]
          FMLA            D3, D1, V4.D[1]
          FMLA            D4, D1, V5.D[1]
        }
        v541 = (double *)(v2576 + 24 * ((int)v435 + *(_DWORD *)(v2567 + 4) * (int)v429));
        *(double *)&v542 = _D6 + *v541;
        *(double *)&_Q4 = *(double *)&_Q4 + v541[2];
        *((double *)&v542 + 1) = *(double *)&_Q3 + v541[1];
        *(_OWORD *)v541 = v542;
        *((_QWORD *)v541 + 2) = _Q4;
        v437 = *v428;
        v438 = v437 >> 30;
        if (v437 >> 30 == 3)
        {
LABEL_115:
          v439 = v428[1];
          v440 = v439 >> 30;
          if (v439 >> 30 == 3)
            goto LABEL_117;
LABEL_116:
          v441 = (__int128 *)(v418 + 32 * *v422);
          _Q3 = *v441;
          _Q4 = v441[1];
          __asm
          {
            FMLA            D5, D1, V3.D[1]
            FMLA            D2, D1, V4.D[1]
          }
          v446 = (double *)(v2543 + 16 * ((int)v439 + *(_DWORD *)(v2533 + 4) * (int)v429));
          v447 = _D2 + v446[1];
          *v446 = _D5 + *v446;
          v446[1] = v447;
          goto LABEL_117;
        }
LABEL_127:
        v543 = (__int128 *)(v413 + 96 * *v421);
        _Q3 = *v543;
        _Q4 = v543[1];
        _Q5 = v543[2];
        _Q6 = v543[3];
        _Q7 = v543[4];
        _Q16 = v543[5];
        __asm
        {
          FMLA            D17, D1, V3.D[1]
          FMLA            D3, D1, V4.D[1]
          FMLA            D4, D1, V5.D[1]
          FMLA            D5, D1, V6.D[1]
          FMLA            D6, D1, V7.D[1]
          FMLA            D7, D1, V16.D[1]
        }
        v551 = (double *)(v2559 + 48 * ((int)v437 + *(_DWORD *)(v2552 + 4) * (int)v429));
        v425.f64[0] = _D17 + *v551;
        *(double *)&_Q4 = *(double *)&_Q4 + v551[2];
        *(double *)&_Q6 = *(double *)&_Q6 + v551[4];
        v425.f64[1] = *(double *)&_Q3 + v551[1];
        *((double *)&_Q4 + 1) = *(double *)&_Q5 + v551[3];
        *((double *)&_Q6 + 1) = *(double *)&_Q7 + v551[5];
        *(float64x2_t *)v551 = v425;
        *((_OWORD *)v551 + 1) = _Q4;
        *((_OWORD *)v551 + 2) = _Q6;
        v439 = v428[1];
        v440 = v439 >> 30;
        if (v439 >> 30 != 3)
          goto LABEL_116;
LABEL_117:
        _D7 = vextq_s8((int8x16_t)v432, (int8x16_t)v432, 8uLL).u64[0];
        v449 = (float64x2_t *)(v2597 + 24 * v435);
        v425.f64[0] = v449[1].f64[0];
        v450 = (float64x2_t *)(v2420 + 48 * *v420);
        _Q6 = *v450;
        _Q5 = v450[1];
        _Q1 = v450[2];
        v454 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v450, (int64x2_t)_Q5);
        v455 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v450, (int64x2_t)_Q5);
        _Q19 = vmulq_f64(_Q1, v432);
        _D4 = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
        __asm { FMLA            D19, D7, V1.D[1] }
        *v449 = vsubq_f64(*v449, vmlaq_laneq_f64(vmulq_n_f64(v454, v432.f64[0]), v455, v432, 1));
        *(_QWORD *)&v449[1].f64[0] = *(_OWORD *)&vsubq_f64(v425, _Q19);
        if (v436 <= 2)
        {
          v552 = vmlaq_laneq_f64(vmulq_n_f64(v454, _Q6.f64[0]), v455, _Q6, 1);
          _Q16 = vmulq_f64(_Q1, _Q6);
          __asm { FMLA            D16, D4, V6.D[1] }
          _Q17 = vmulq_f64(_Q1, _Q5);
          __asm { FMLA            D17, D4, V5.D[1] }
          _Q18 = vmulq_f64(_Q1, _Q1);
          __asm { FMLA            D18, D4, V1.D[1] }
          v556 = v2524 + 72 * ((int)v435 + *(_DWORD *)(v2516 + 4) * (int)v435);
          v557 = *(float64x2_t *)(v556 + 16);
          v558 = *(int64x2_t *)(v556 + 32);
          v426.f64[0] = *(float64_t *)(v556 + 64);
          v559 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q5.f64[0]), v455, _Q5, 1), (float64x2_t)vextq_s8((int8x16_t)v557, (int8x16_t)v558, 8uLL));
          v560 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q1.f64[0]), v455, _Q1, 1), *(float64x2_t *)(v556 + 48));
          *(float64x2_t *)v556 = vaddq_f64(v552, *(float64x2_t *)v556);
          *(int64x2_t *)(v556 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q16, v557), v559);
          *(int8x16_t *)(v556 + 32) = vextq_s8((int8x16_t)v559, (int8x16_t)vaddq_f64(_Q17, (float64x2_t)vdupq_laneq_s64(v558, 1)), 8uLL);
          *(float64x2_t *)(v556 + 48) = v560;
          *(_QWORD *)(v556 + 64) = *(_OWORD *)&vaddq_f64(_Q18, v426);
          if (v438 <= 2)
          {
LABEL_130:
            v561 = (float64x2_t *)(v413 + 96 * *v421);
            _Q6 = *v561;
            _Q7 = v561[1];
            _Q16 = v561[2];
            _Q17 = v561[3];
            _Q18 = v561[4];
            _Q19 = v561[5];
            v568 = vmlaq_laneq_f64(vmulq_n_f64(v454, v561->f64[0]), v455, *v561, 1);
            _Q20 = vmulq_f64(_Q1, *v561);
            __asm { FMLA            D20, D4, V6.D[1] }
            _Q21 = vmulq_f64(_Q1, _Q7);
            __asm { FMLA            D21, D4, V7.D[1] }
            _Q22 = vmulq_f64(_Q1, _Q16);
            __asm { FMLA            D22, D4, V16.D[1] }
            _Q23 = vmulq_f64(_Q1, _Q17);
            __asm { FMLA            D23, D4, V17.D[1] }
            _Q24 = vmulq_f64(_Q1, _Q18);
            __asm { FMLA            D24, D4, V18.D[1] }
            _Q25 = vmulq_f64(_Q1, _Q19);
            __asm { FMLA            D25, D4, V19.D[1] }
            v575 = v2508 + 144 * ((int)v437 + *(_DWORD *)(v2500 + 4) * (int)v435);
            v576 = *(float64x2_t *)(v575 + 16);
            v577 = *(int64x2_t *)(v575 + 32);
            v578 = *(float64x2_t *)(v575 + 64);
            v579 = *(int64x2_t *)(v575 + 80);
            v66 = *(float64x2_t *)(v575 + 112);
            v580 = *(int64x2_t *)(v575 + 128);
            v581 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q7.f64[0]), v455, _Q7, 1), (float64x2_t)vextq_s8((int8x16_t)v576, (int8x16_t)v577, 8uLL));
            v582 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q16.f64[0]), v455, _Q16, 1), *(float64x2_t *)(v575 + 48));
            v583 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q17.f64[0]), v455, _Q17, 1), (float64x2_t)vextq_s8((int8x16_t)v578, (int8x16_t)v579, 8uLL));
            v584 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q18.f64[0]), v455, _Q18, 1), *(float64x2_t *)(v575 + 96));
            v585 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q19.f64[0]), v455, _Q19, 1), (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)v580, 8uLL));
            *(float64x2_t *)v575 = vaddq_f64(v568, *(float64x2_t *)v575);
            *(int64x2_t *)(v575 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q20, v576), v581);
            *(int8x16_t *)(v575 + 32) = vextq_s8((int8x16_t)v581, (int8x16_t)vaddq_f64(_Q21, (float64x2_t)vdupq_laneq_s64(v577, 1)), 8uLL);
            *(float64x2_t *)(v575 + 48) = v582;
            *(int64x2_t *)(v575 + 64) = vzip1q_s64((int64x2_t)vaddq_f64(_Q22, v578), v583);
            *(int8x16_t *)(v575 + 80) = vextq_s8((int8x16_t)v583, (int8x16_t)vaddq_f64(_Q23, (float64x2_t)vdupq_laneq_s64(v579, 1)), 8uLL);
            *(float64x2_t *)(v575 + 96) = v584;
            *(int64x2_t *)(v575 + 112) = vzip1q_s64((int64x2_t)vaddq_f64(_Q24, v66), v585);
            *(int8x16_t *)(v575 + 128) = vextq_s8((int8x16_t)v585, (int8x16_t)vaddq_f64(_Q25, (float64x2_t)vdupq_laneq_s64(v580, 1)), 8uLL);
            if (v440 > 2)
              goto LABEL_121;
LABEL_120:
            v458 = (float64x2_t *)(v418 + 32 * *v422);
            _Q5 = *v458;
            _Q6 = v458[1];
            v461 = vmlaq_laneq_f64(vmulq_n_f64(v454, v458->f64[0]), v455, *v458, 1);
            _Q16 = vmulq_f64(_Q1, *v458);
            __asm { FMLA            D16, D4, V5.D[1] }
            _Q1 = vmulq_f64(_Q1, _Q6);
            __asm { FMLA            D1, D4, V6.D[1] }
            v464 = v2492 + 48 * ((int)v439 + *(_DWORD *)(v2484 + 4) * (int)v435);
            v465 = *(float64x2_t *)(v464 + 16);
            v466 = *(int64x2_t *)(v464 + 32);
            v467 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v454, _Q6.f64[0]), v455, _Q6, 1), (float64x2_t)vextq_s8((int8x16_t)v465, (int8x16_t)v466, 8uLL));
            *(float64x2_t *)v464 = vaddq_f64(v461, *(float64x2_t *)v464);
            *(int64x2_t *)(v464 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q16, v465), v467);
            *(int8x16_t *)(v464 + 32) = vextq_s8((int8x16_t)v467, (int8x16_t)vaddq_f64(_Q1, (float64x2_t)vdupq_laneq_s64(v466, 1)), 8uLL);
            goto LABEL_121;
          }
        }
        else if (v438 <= 2)
        {
          goto LABEL_130;
        }
        if (v440 <= 2)
          goto LABEL_120;
LABEL_121:
        v468 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v432, 1);
        v469 = (float64x2_t *)(v2585 + 48 * v437);
        v470 = (float64x2_t *)(v413 + 96 * *v421);
        v471 = *v470;
        v472 = v470[1];
        v474 = v470[2];
        v473 = v470[3];
        v476 = v470[4];
        v475 = v470[5];
        v477 = (float64x2_t)vzip1q_s64((int64x2_t)v474, (int64x2_t)v473);
        *(_QWORD *)&v478.f64[0] = vdupq_laneq_s64((int64x2_t)v474, 1).u64[0];
        v478.f64[1] = v470[3].f64[1];
        *(_QWORD *)&v480.f64[0] = vdupq_laneq_s64((int64x2_t)v476, 1).u64[0];
        v479 = (float64x2_t)vzip1q_s64((int64x2_t)v476, (int64x2_t)v475);
        v480.f64[1] = v470[5].f64[1];
        v481 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v470, (int64x2_t)v472);
        v482 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v470, (int64x2_t)v472);
        v426 = vmlaq_f64(vmulq_n_f64(v481, v432.f64[0]), v468, v482);
        v483 = vsubq_f64(v469[2], vmlaq_f64(vmulq_n_f64(v479, v432.f64[0]), v468, v480));
        v484 = vsubq_f64(v469[1], vmlaq_f64(vmulq_n_f64(v477, v432.f64[0]), v468, v478));
        v425 = vsubq_f64(*v469, v426);
        *v469 = v425;
        v469[1] = v484;
        v469[2] = v483;
        if (v438 <= 2)
        {
          v485 = vmlaq_laneq_f64(vmulq_n_f64(v481, v471.f64[0]), v482, v471, 1);
          v486 = vmlaq_laneq_f64(vmulq_n_f64(v477, v471.f64[0]), v478, v471, 1);
          v487 = vmlaq_laneq_f64(vmulq_n_f64(v479, v471.f64[0]), v480, v471, 1);
          v488 = vmlaq_laneq_f64(vmulq_n_f64(v481, v472.f64[0]), v482, v472, 1);
          v489 = vmlaq_laneq_f64(vmulq_n_f64(v477, v472.f64[0]), v478, v472, 1);
          v490 = vmlaq_laneq_f64(vmulq_n_f64(v479, v472.f64[0]), v480, v472, 1);
          v491 = vmlaq_laneq_f64(vmulq_n_f64(v481, v474.f64[0]), v482, v474, 1);
          v492 = vmlaq_laneq_f64(vmulq_n_f64(v477, v474.f64[0]), v478, v474, 1);
          v493 = vmlaq_laneq_f64(vmulq_n_f64(v479, v474.f64[0]), v480, v474, 1);
          v494 = vmlaq_laneq_f64(vmulq_n_f64(v481, v473.f64[0]), v482, v473, 1);
          v495 = vmlaq_laneq_f64(vmulq_n_f64(v477, v473.f64[0]), v478, v473, 1);
          v496 = vmlaq_laneq_f64(vmulq_n_f64(v479, v473.f64[0]), v480, v473, 1);
          v497 = vmlaq_laneq_f64(vmulq_n_f64(v481, v476.f64[0]), v482, v476, 1);
          v498 = vmlaq_laneq_f64(vmulq_n_f64(v477, v476.f64[0]), v478, v476, 1);
          v499 = vmlaq_laneq_f64(vmulq_n_f64(v479, v476.f64[0]), v480, v476, 1);
          v500 = vmlaq_laneq_f64(vmulq_n_f64(v481, v475.f64[0]), v482, v475, 1);
          v501 = (float64x2_t *)(v2476 + 288 * ((int)v437 + *(_DWORD *)(v2468 + 4) * (int)v437));
          v502 = vmlaq_laneq_f64(vmulq_n_f64(v477, v475.f64[0]), v478, v475, 1);
          v503 = vaddq_f64(v487, v501[2]);
          v504 = vaddq_f64(v486, v501[1]);
          v505 = vmlaq_laneq_f64(vmulq_n_f64(v479, v475.f64[0]), v480, v475, 1);
          v506 = vaddq_f64(v485, *v501);
          v425 = vaddq_f64(v490, v501[5]);
          v426 = vaddq_f64(v489, v501[4]);
          v507 = vaddq_f64(v488, v501[3]);
          v508 = vaddq_f64(v493, v501[8]);
          v509 = vaddq_f64(v492, v501[7]);
          v510 = vaddq_f64(v491, v501[6]);
          v511 = vaddq_f64(v496, v501[11]);
          v512 = vaddq_f64(v495, v501[10]);
          v513 = vaddq_f64(v494, v501[9]);
          v514 = v501[15];
          v515 = vaddq_f64(v499, v501[14]);
          v516 = vaddq_f64(v498, v501[13]);
          v517 = vaddq_f64(v497, v501[12]);
          v66 = vaddq_f64(v505, v501[17]);
          *v501 = v506;
          v501[1] = v504;
          v501[2] = v503;
          v501[3] = v507;
          v501[4] = v426;
          v501[5] = v425;
          v501[6] = v510;
          v501[7] = v509;
          v501[8] = v508;
          v501[9] = v513;
          v501[10] = v512;
          v501[11] = v511;
          v501[12] = v517;
          v501[13] = v516;
          v501[14] = v515;
          v501[15] = vaddq_f64(v500, v514);
          v501[16] = vaddq_f64(v502, v501[16]);
          v501[17] = v66;
        }
        v518 = 4 * *v422;
        v519 = 32 * *v422;
        if (v440 >= 3)
        {
          v521 = v518 | 2;
        }
        else
        {
          v520 = *(float64x2_t *)(v418 + 32 * *v422);
          v521 = v518 | 2;
          v522 = *(float64x2_t *)(v418 + 8 * v521);
          v523 = vmlaq_laneq_f64(vmulq_n_f64(v481, v520.f64[0]), v482, v520, 1);
          v524 = vmlaq_laneq_f64(vmulq_n_f64(v477, v520.f64[0]), v478, v520, 1);
          v525 = vmlaq_laneq_f64(vmulq_n_f64(v479, v520.f64[0]), v480, v520, 1);
          v526 = vmlaq_laneq_f64(vmulq_n_f64(v481, v522.f64[0]), v482, v522, 1);
          v527 = vmlaq_laneq_f64(vmulq_n_f64(v477, v522.f64[0]), v478, v522, 1);
          v528 = vmlaq_laneq_f64(vmulq_n_f64(v479, v522.f64[0]), v480, v522, 1);
          v529 = (float64x2_t *)(v2460 + 96 * ((int)v439 + *(_DWORD *)(v2452 + 4) * (int)v437));
          v530 = v529[3];
          v425 = v529[4];
          v531 = vaddq_f64(v525, v529[2]);
          v532 = vaddq_f64(v524, v529[1]);
          v533 = vaddq_f64(v528, v529[5]);
          *v529 = vaddq_f64(v523, *v529);
          v529[1] = v532;
          v529[2] = v531;
          v529[3] = vaddq_f64(v526, v530);
          v529[4] = vaddq_f64(v527, v425);
          v529[5] = v533;
        }
        v586 = *(float64x2_t *)(v418 + v519);
        v587 = *(float64x2_t *)(v418 + 8 * v521);
        v588 = (float64x2_t)vzip1q_s64((int64x2_t)v586, (int64x2_t)v587);
        v589 = (float64x2_t)vzip2q_s64((int64x2_t)v586, (int64x2_t)v587);
        *(float64x2_t *)(v424 + 16 * v439) = vsubq_f64(*(float64x2_t *)(v424 + 16 * v439), vmlaq_f64(vmulq_n_f64(v588, v432.f64[0]), v468, v589));
        if (v440 <= 2)
        {
          v590 = (float64x2_t *)(v2444 + 32 * ((int)v439 + *(_DWORD *)(v2436 + 4) * (int)v439));
          v591 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v588, v587.f64[0]), v589, v587, 1), v590[1]);
          *v590 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v588, v586.f64[0]), v589, v586, 1), *v590);
          v590[1] = v591;
        }
        ++v422;
        ++v421;
        ++v420;
        v400 += 16;
        ++v419;
        v428 += 6;
        --v427;
      }
      while (v427);
    }
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2251 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a33 + 24) |= 1uLL;
    *(_QWORD *)(a31 + 24) |= 1uLL;
    *(_QWORD *)(a27 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a16 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v395 = v2214;
    v394 = v2216;
    v396 = v2207;
    v393 = v2281;
    v183 = v2304;
  }
  v592 = STACK[0xB60];
  v2196 = STACK[0xB60];
  if ((**(_BYTE **)(v183 + 16) & 1) != 0)
  {
    v593 = *(_QWORD *)(v2256 + 16);
    v594 = _gc_buffer_get_extent();
    v595 = _gc_buffer_get_extent();
    v596 = _gc_buffer_get_extent();
    if (v594 != 2 || v595 != v596)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v396 + 24) |= 1uLL;
    }
    v2392 = *(_QWORD *)(v396 + 16);
    v2317 = *(_QWORD *)(v2286 + 16);
    v597 = _gc_buffer_get_extent();
    v598 = _gc_buffer_get_extent();
    v599 = _gc_buffer_get_extent();
    v600 = _gc_buffer_get_extent();
    if (v597 != 2 || v598 != 3 || v599 != v600)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v395 + 24) |= 1uLL;
    }
    v2398 = *(_QWORD *)(v395 + 16);
    v601 = _gc_buffer_get_extent();
    v602 = _gc_buffer_get_extent();
    v603 = _gc_buffer_get_extent();
    v604 = _gc_buffer_get_extent();
    if (v601 != 2 || v602 != 1 || v603 != v604)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2210 + 24) |= 1uLL;
    }
    v2577 = *(_QWORD *)(v2210 + 16);
    v605 = _gc_buffer_get_extent();
    v606 = _gc_buffer_get_extent();
    v607 = _gc_buffer_get_extent();
    v608 = _gc_buffer_get_extent();
    if (v605 != 2 || v606 != 3 || v607 != v608)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2212 + 24) |= 1uLL;
    }
    v2598 = *(_QWORD *)(v2212 + 16);
    v609 = _gc_buffer_get_extent();
    v610 = _gc_buffer_get_extent();
    v611 = _gc_buffer_get_extent();
    v612 = _gc_buffer_get_extent();
    if (v609 != 2 || v610 != 6 || v611 != v612)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v394 + 24) |= 1uLL;
    }
    v613 = *(_QWORD *)(v394 + 16);
    v614 = _gc_buffer_get_extent();
    v615 = _gc_buffer_get_extent();
    v616 = _gc_buffer_get_extent();
    v617 = _gc_buffer_get_extent();
    if (v614 != 2 || v615 != 2 || v616 != v617)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2218 + 24) |= 1uLL;
    }
    v618 = *(_QWORD *)(v2218 + 16);
    v2305 = *(int **)(v2220 + 16);
    v2568 = *(_QWORD *)(a6 + 16);
    v2560 = *(_QWORD *)(a7 + 16);
    v2553 = *(_QWORD *)(a9 + 16);
    v2544 = *(_QWORD *)(a10 + 16);
    v2534 = *(_QWORD *)(v2222 + 16);
    v2586 = *(_QWORD *)(v2227 + 16);
    v619 = *(_QWORD *)(v2228 + 16);
    v620 = *(_QWORD *)(v2229 + 16);
    v2525 = *(_QWORD *)(a14 + 16);
    v2517 = *(_QWORD *)(a15 + 16);
    v2387 = *(_QWORD *)(a16 + 16);
    v2383 = *(_QWORD *)(a17 + 16);
    v2378 = *(_QWORD *)(a20 + 16);
    v2372 = *(_QWORD *)(a21 + 16);
    v2366 = *(_QWORD *)(a22 + 16);
    v2360 = *(_QWORD *)(a23 + 16);
    v2509 = *(_QWORD *)(a27 + 16);
    v2501 = *(_QWORD *)(a28 + 16);
    v2355 = *(_QWORD *)(a31 + 16);
    v2350 = *(_QWORD *)(a32 + 16);
    v2345 = *(_QWORD *)(a33 + 16);
    v2341 = *(_QWORD *)(a34 + 16);
    v2493 = *(_QWORD *)(a56 + 16);
    v2485 = *(_QWORD *)(a57 + 16);
    v2336 = *(_QWORD *)(a58 + 16);
    v2331 = *(_QWORD *)(a59 + 16);
    v2477 = *(_QWORD *)(a66 + 16);
    v2469 = *(_QWORD *)(v2238 + 16);
    v2461 = *(_QWORD *)(v2243 + 16);
    v2453 = *(_QWORD *)(v2235 + 16);
    v2445 = *(_QWORD *)(v2232 + 16);
    v2437 = *(_QWORD *)(v2231 + 16);
    v2429 = *(_QWORD *)(v2240 + 16);
    v2421 = *(_QWORD *)(v2251 + 16);
    v2413 = *(_QWORD *)(v2239 + 16);
    v2406 = *(_QWORD *)(v2241 + 16);
    v621 = *(_QWORD *)(v2236 + 16);
    v622 = *(_QWORD *)(v2233 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v627 = v2392;
    if ((int)v2321 >= 1)
    {
      v628 = 0;
      v2311 = v2398 + 32;
      v2399 = v618;
      while (v628)
      {
        v629 = v2305[v628 - 1];
        v2325 = v628;
        v630 = v2305[v628];
        if (v629 < (int)v630)
          goto LABEL_167;
LABEL_162:
        v628 = v2325 + 1;
        if (v2325 + 1 == v2321)
          goto LABEL_191;
      }
      v629 = 0;
      v2325 = 0;
      v630 = *v2305;
      if ((int)v630 <= 0)
        goto LABEL_162;
LABEL_167:
      v631 = 3 * v2325 + 2;
      v632 = (float64x2_t *)(v621 + 72 * v2325);
      v633 = (int8x16_t *)&v632[1];
      v634 = (int8x16_t *)&v632[2];
      v635 = v632 + 3;
      v636 = 9 * v2325 + 8;
      v637 = v630 - v629;
      v638 = (float64x2_t *)(v2311 + 48 * v629);
      v639 = (int *)(v2317 + 4 * v629);
      while (1)
      {
        v623.f64[0] = *(float64_t *)(v622 + 8 * v631);
        v641 = v638[-2];
        v640 = v638[-1];
        _Q0 = *v638;
        v643 = *v639;
        v644 = v627 + 16 * v643;
        _Q6 = *(float64x2_t *)v644;
        v646 = (float64x2_t)vzip1q_s64((int64x2_t)v641, (int64x2_t)v640);
        _Q19 = (float64x2_t)vzip2q_s64((int64x2_t)v641, (int64x2_t)v640);
        _D16 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
        _D7 = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
        _D20 = *(_QWORD *)(v644 + 8);
        __asm { FMLA            D18, D20, V0.D[1] }
        _Q4 = vsubq_f64(v623, _Q18);
        *(float64x2_t *)(v622 + 24 * v2325) = vsubq_f64(*(float64x2_t *)(v622 + 24 * v2325), vmlaq_laneq_f64(vmulq_n_f64(v646, *(double *)v644), _Q19, *(float64x2_t *)v644, 1));
        *(float64_t *)(v622 + 8 * v631) = _Q4.f64[0];
        v652 = vmlaq_laneq_f64(vmulq_n_f64(v646, v641.f64[0]), _Q19, v641, 1);
        _D17 = vextq_s8((int8x16_t)v641, (int8x16_t)v641, 8uLL).u64[0];
        _D18 = v641.f64[1];
        __asm { FMLA            D4, D18, V0.D[1] }
        v655 = vmlaq_laneq_f64(vmulq_n_f64(v646, v640.f64[0]), _Q19, v640, 1);
        _Q18 = (float64x2_t)vextq_s8((int8x16_t)v640, (int8x16_t)v640, 8uLL);
        _D22 = v640.f64[1];
        __asm { FMLA            D21, D22, V0.D[1] }
        v657 = vmlaq_laneq_f64(vmulq_n_f64(v646, _Q0.f64[0]), _Q19, _Q0, 1);
        _D22 = _Q0.f64[1];
        __asm { FMLA            D19, D22, V0.D[1] }
        _Q26.f64[0] = *(float64_t *)(v621 + 8 * v636);
        _Q27 = (float64x2_t)vextq_s8(*v633, *v634, 8uLL);
        v660 = (int64x2_t)vaddq_f64(_Q4, *(float64x2_t *)v633);
        v661 = (int64x2_t)vaddq_f64(v655, _Q27);
        _Q21 = vaddq_f64(_Q21, (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v634, 1));
        v662 = vaddq_f64(v657, *v635);
        *v632 = vaddq_f64(v652, *v632);
        *(int64x2_t *)v633 = vzip1q_s64(v660, v661);
        *v634 = vextq_s8((int8x16_t)v661, (int8x16_t)_Q21, 8uLL);
        *v635 = v662;
        *(_QWORD *)(v621 + 8 * v636) = *(_OWORD *)&vaddq_f64(_Q19, _Q26);
        v663 = 6 * v643;
        v664 = *(int *)(v593 + 24 * v643);
        if (v664 >> 30 == 3)
        {
          v676 = v663 | 1;
          goto LABEL_178;
        }
        _Q3 = *(int8x16_t *)(v2577 + 16 * *(int *)(v2534 + 4 * v643));
        __asm
        {
          FMLA            D5, D17, V3.D[1]
          FMLA            D4, D18, V3.D[1]
        }
        *((_QWORD *)&_Q5 + 1) = _D4;
        _D4 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
        v669 = 8 * *(int *)(v2568 + 4 * v664);
        __asm { FMLA            D20, D7, V3.D[1] }
        v671 = *(double *)(v2429 + v669) - _D20;
        __asm { FMLA            D20, D16, V3.D[1] }
        v673 = v2461 + 24 * v643;
        *(double *)(v2429 + v669) = v671;
        *(_OWORD *)v673 = _Q5;
        _D19 = _Q3.i64[1];
        __asm { FMLA            D5, D19, V3.D[1] }
        v675 = 8 * ((int)v664 + *(_DWORD *)(v2517 + 4) * (int)v664);
        *(double *)(v2525 + v675) = *(double *)&_Q5 + *(double *)(v2525 + v675);
        *(_QWORD *)(v673 + 16) = _D20;
        v676 = v663 | 1;
        v677 = *(_DWORD *)(v593 + 4 * (v663 | 1));
        if (v677 >> 30 == 3)
        {
          v678 = v593 + 24 * v643;
          v679 = *(_DWORD *)(v678 + 16);
          if (v679 >> 30 != 3)
            goto LABEL_176;
        }
        else
        {
          v681 = (__int128 *)(v2598 + 48 * *(int *)(v2586 + 4 * v643));
          _Q5 = *v681;
          _Q19 = v681[1];
          _Q20 = v681[2];
          __asm
          {
            FMLA            D21, D4, V5.D[1]
            FMLA            D5, D4, V19.D[1]
            FMLA            D19, D4, V20.D[1]
          }
          v686 = (double *)(v2387 + 24 * (int)(v677 + *(_DWORD *)(v2383 + 4) * v664));
          _Q21.f64[0] = _D21 + *v686;
          *(double *)&_Q19 = *(double *)&_Q19 + v686[2];
          _Q21.f64[1] = *(double *)&_Q5 + v686[1];
          *(float64x2_t *)v686 = _Q21;
          *((_QWORD *)v686 + 2) = _Q19;
          v678 = v593 + 24 * v643;
          v679 = *(_DWORD *)(v678 + 16);
          if (v679 >> 30 != 3)
          {
LABEL_176:
            v687 = (float64x2_t *)(v613 + 96 * *(int *)(v619 + 4 * v643));
            _Q5 = *v687;
            _Q19 = v687[1];
            _Q20 = v687[2];
            _Q21 = v687[3];
            _Q22 = v687[4];
            _Q23 = v687[5];
            __asm
            {
              FMLA            D24, D4, V5.D[1]
              FMLA            D5, D4, V19.D[1]
              FMLA            D19, D4, V20.D[1]
              FMLA            D20, D4, V21.D[1]
              FMLA            D21, D4, V22.D[1]
              FMLA            D22, D4, V23.D[1]
            }
            v695 = (float64x2_t *)(v2378 + 48 * (int)(v679 + *(_DWORD *)(v2372 + 4) * v664));
            _Q26 = v695[2];
            v696.f64[0] = _D24 + v695->f64[0];
            _Q19.f64[0] = _Q19.f64[0] + v695[1].f64[0];
            _Q21.f64[0] = _Q21.f64[0] + _Q26.f64[0];
            v696.f64[1] = _Q5.f64[0] + v695->f64[1];
            _Q19.f64[1] = _Q20.f64[0] + v695[1].f64[1];
            _Q21.f64[1] = _Q22.f64[0] + v695[2].f64[1];
            *v695 = v696;
            v695[1] = _Q19;
            v695[2] = _Q21;
            v680 = *(_DWORD *)(v678 + 20);
            if (v680 >> 30 == 3)
              goto LABEL_178;
LABEL_177:
            v697 = (__int128 *)(v618 + 32 * *(int *)(v620 + 4 * v643));
            _Q5 = *v697;
            _Q19 = v697[1];
            __asm
            {
              FMLA            D20, D4, V5.D[1]
              FMLA            D3, D4, V19.D[1]
            }
            v702 = (double *)(v2366 + 16 * (int)(v680 + *(_DWORD *)(v2360 + 4) * v664));
            v703 = _D3 + v702[1];
            *v702 = _D20 + *v702;
            v702[1] = v703;
            goto LABEL_178;
          }
        }
        v680 = *(_DWORD *)(v678 + 20);
        if (v680 >> 30 != 3)
          goto LABEL_177;
LABEL_178:
        v704 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v641, 1);
        v623 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v640, 1);
        v705 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q0, 1);
        v706 = *(int *)(v593 + 4 * v676);
        if (v706 >> 30 == 3)
        {
          v728 = v663 + 4;
          v729 = *(_DWORD *)(v593 + 4 * (v663 + 4));
          if (v729 >> 30 != 3)
            goto LABEL_187;
        }
        else
        {
          v707 = (float64x2_t *)(v2598 + 48 * *(int *)(v2586 + 4 * v643));
          v709 = *v707;
          v708 = v707[1];
          _Q19 = v707[2];
          v711 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v707, (int64x2_t)v708);
          _Q21 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v707, (int64x2_t)v708);
          __asm { FMLA            D26, D17, V19.D[1] }
          v713 = vmlaq_f64(vmulq_n_f64(v711, v640.f64[0]), v623, _Q21);
          __asm
          {
            FMLA            D27, D18, V19.D[1]
            FMLA            D28, D16, V19.D[1]
          }
          v715 = v2453 + 72 * v643;
          _Q26.f64[1] = v713.f64[0];
          *(float64x2_t *)v715 = vmlaq_f64(vmulq_n_f64(v711, v641.f64[0]), v704, _Q21);
          *(float64x2_t *)(v715 + 16) = _Q26;
          *(int8x16_t *)(v715 + 32) = vextq_s8((int8x16_t)v713, (int8x16_t)_Q27, 8uLL);
          *(float64x2_t *)(v715 + 48) = vmlaq_f64(vmulq_n_f64(v711, _Q0.f64[0]), v705, _Q21);
          *(_QWORD *)(v715 + 64) = _D28;
          v716 = (float64x2_t *)(v2421 + 24 * *(int *)(v2560 + 4 * v706));
          v713.f64[0] = v716[1].f64[0];
          _Q18 = vmlaq_f64(vmulq_n_f64(v711, _Q6.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q6, 1), _Q21);
          __asm { FMLA            D6, D7, V19.D[1] }
          *v716 = vsubq_f64(*v716, _Q18);
          *(_QWORD *)&v716[1].f64[0] = *(_OWORD *)&vsubq_f64(v713, _Q6);
          v718 = vmlaq_laneq_f64(vmulq_n_f64(v711, v709.f64[0]), _Q21, v709, 1);
          _Q7 = vmulq_f64(_Q19, v709);
          _D16 = v709.f64[1];
          __asm { FMLA            D7, D16, V19.D[1] }
          v721 = vmlaq_laneq_f64(vmulq_n_f64(v711, v708.f64[0]), _Q21, v708, 1);
          _Q17 = vmulq_f64(_Q19, v708);
          _Q18.f64[0] = v708.f64[1];
          __asm { FMLA            D17, D18, V19.D[1] }
          v723 = vmlaq_laneq_f64(vmulq_n_f64(v711, _Q19.f64[0]), _Q21, _Q19, 1);
          _Q20 = vmulq_f64(_Q19, _Q19);
          _Q21.f64[0] = _Q19.f64[1];
          __asm { FMLA            D20, D21, V19.D[1] }
          v725 = v2509 + 72 * ((int)v706 + *(_DWORD *)(v2501 + 4) * (int)v706);
          _Q21 = *(float64x2_t *)(v725 + 16);
          v726 = *(int64x2_t *)(v725 + 32);
          v709.f64[0] = *(float64_t *)(v725 + 64);
          v727 = (int64x2_t)vaddq_f64(v721, (float64x2_t)vextq_s8((int8x16_t)_Q21, (int8x16_t)v726, 8uLL));
          _Q18 = vaddq_f64(v723, *(float64x2_t *)(v725 + 48));
          *(float64x2_t *)v725 = vaddq_f64(v718, *(float64x2_t *)v725);
          *(int64x2_t *)(v725 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q7, _Q21), v727);
          *(int8x16_t *)(v725 + 32) = vextq_s8((int8x16_t)v727, (int8x16_t)vaddq_f64(_Q17, (float64x2_t)vdupq_laneq_s64(v726, 1)), 8uLL);
          *(float64x2_t *)(v725 + 48) = _Q18;
          *(_QWORD *)(v725 + 64) = *(_OWORD *)&vaddq_f64(_Q20, v709);
          v728 = v663 + 4;
          v729 = *(_DWORD *)(v593 + 4 * (v663 + 4));
          if (v729 >> 30 == 3)
          {
            v730 = *(_DWORD *)(v593 + 24 * v643 + 20);
            if (v730 >> 30 == 3)
              goto LABEL_181;
          }
          else
          {
            v731 = (float64x2_t *)(v2598 + 48 * *(int *)(v2586 + 4 * v643));
            v618 = v2399;
            v2615 = vld2q_f64(v731->f64);
            v731 += 2;
            _Q20 = *v731;
            v733 = v613 + 96 * *(int *)(v619 + 4 * v643);
            _Q21 = *(float64x2_t *)(v733 + 16);
            _Q22 = *(float64x2_t *)(v733 + 32);
            _Q23 = *(float64x2_t *)(v733 + 48);
            _Q24 = *(float64x2_t *)(v733 + 64);
            v738 = *(float64x2_t *)(v733 + 80);
            v739 = vmlaq_laneq_f64(vmulq_n_f64(v2615.val[0], *(double *)v733), v2615.val[1], *(float64x2_t *)v733, 1);
            _Q7 = vmulq_f64(*v731, *(float64x2_t *)v733);
            _D16 = *(_QWORD *)(v733 + 8);
            __asm { FMLA            D7, D16, V20.D[1] }
            v742 = vmlaq_laneq_f64(vmulq_n_f64(v2615.val[0], _Q21.f64[0]), v2615.val[1], _Q21, 1);
            _Q17 = vmulq_f64(*v731, _Q21);
            _Q21.f64[0] = *(float64_t *)(v733 + 24);
            __asm { FMLA            D17, D21, V20.D[1] }
            v744 = vmlaq_laneq_f64(vmulq_n_f64(v2615.val[0], _Q22.f64[0]), v2615.val[1], _Q22, 1);
            _Q26 = vmulq_f64(*v731, _Q22);
            _Q22.f64[0] = *(float64_t *)(v733 + 40);
            __asm { FMLA            D26, D22, V20.D[1] }
            v745 = vmlaq_laneq_f64(vmulq_n_f64(v2615.val[0], _Q23.f64[0]), v2615.val[1], _Q23, 1);
            _Q27 = vmulq_f64(*v731, _Q23);
            _Q23.f64[0] = *(float64_t *)(v733 + 56);
            __asm { FMLA            D27, D23, V20.D[1] }
            v747 = vmlaq_laneq_f64(vmulq_n_f64(v2615.val[0], _Q24.f64[0]), v2615.val[1], _Q24, 1);
            _Q28 = vmulq_f64(*v731, _Q24);
            _Q24.f64[0] = *(float64_t *)(v733 + 72);
            __asm { FMLA            D28, D24, V20.D[1] }
            v749 = vmlaq_laneq_f64(vmulq_n_f64(v2615.val[0], v738.f64[0]), v2615.val[1], v738, 1);
            _Q18 = vmulq_f64(*v731, v738);
            v2615.val[1].f64[0] = *(float64_t *)(v733 + 88);
            __asm { FMLA            D18, D19, V20.D[1] }
            LODWORD(v733) = *(_DWORD *)(v2350 + 4) * *(_DWORD *)(v593 + 4 * v676);
            v750 = v2355 + 144 * (int)(v733 + v729);
            v751 = *(float64x2_t *)(v750 + 16);
            v752 = *(int64x2_t *)(v750 + 32);
            v753 = *(float64x2_t *)(v750 + 64);
            v754 = *(int64x2_t *)(v750 + 80);
            v66 = *(float64x2_t *)(v750 + 96);
            v755 = *(float64x2_t *)(v750 + 112);
            v756 = *(int64x2_t *)(v750 + 128);
            v757 = (int64x2_t)vaddq_f64(_Q7, v751);
            v758 = (int64x2_t)vaddq_f64(v742, (float64x2_t)vextq_s8((int8x16_t)v751, (int8x16_t)v752, 8uLL));
            v759 = vaddq_f64(v744, *(float64x2_t *)(v750 + 48));
            _Q21 = vaddq_f64(v745, (float64x2_t)vextq_s8((int8x16_t)v753, (int8x16_t)v754, 8uLL));
            v760 = (int64x2_t)vaddq_f64(v749, (float64x2_t)vextq_s8((int8x16_t)v755, (int8x16_t)v756, 8uLL));
            *(float64x2_t *)v750 = vaddq_f64(v739, *(float64x2_t *)v750);
            v729 = *(_DWORD *)(v593 + 4 * v728);
            v761 = v2355 + 144 * (int)(v733 + v729);
            *(int64x2_t *)(v761 + 16) = vzip1q_s64(v757, v758);
            *(int8x16_t *)(v761 + 32) = vextq_s8((int8x16_t)v758, (int8x16_t)vaddq_f64(_Q17, (float64x2_t)vdupq_laneq_s64(v752, 1)), 8uLL);
            *(float64x2_t *)(v761 + 48) = v759;
            *(int64x2_t *)(v761 + 64) = vzip1q_s64((int64x2_t)vaddq_f64(_Q26, v753), (int64x2_t)_Q21);
            *(int8x16_t *)(v761 + 80) = vextq_s8((int8x16_t)_Q21, (int8x16_t)vaddq_f64(_Q27, (float64x2_t)vdupq_laneq_s64(v754, 1)), 8uLL);
            *(float64x2_t *)(v761 + 96) = vaddq_f64(v747, v66);
            *(int64x2_t *)(v761 + 112) = vzip1q_s64((int64x2_t)vaddq_f64(_Q28, v755), v760);
            *(int8x16_t *)(v761 + 128) = vextq_s8((int8x16_t)v760, (int8x16_t)vaddq_f64(_Q18, (float64x2_t)vdupq_laneq_s64(v756, 1)), 8uLL);
            v730 = *(_DWORD *)(v593 + 24 * v643 + 20);
            if (v730 >> 30 == 3)
            {
LABEL_181:
              if (v729 >> 30 != 3)
                goto LABEL_187;
              goto LABEL_189;
            }
          }
          v762 = (const double *)(v2598 + 48 * *(int *)(v2586 + 4 * v643));
          v618 = v2399;
          v2612 = vld2q_f64(v762);
          v762 += 4;
          _Q16 = *(float64x2_t *)v762;
          v627 = v2392;
          v764 = v2399 + 32 * *(int *)(v620 + 4 * v643);
          v765 = *(float64x2_t *)(v764 + 16);
          v766 = vmlaq_laneq_f64(vmulq_n_f64(v2612.val[0], *(double *)v764), v2612.val[1], *(float64x2_t *)v764, 1);
          _Q20 = vmulq_f64(_Q16, *(float64x2_t *)v764);
          _D17 = *(_QWORD *)(v764 + 8);
          __asm { FMLA            D20, D17, V16.D[1] }
          v769 = vmlaq_laneq_f64(vmulq_n_f64(v2612.val[0], v765.f64[0]), v2612.val[1], v765, 1);
          v2612.val[0] = vmulq_f64(_Q16, v765);
          v2612.val[1].f64[0] = *(float64_t *)(v764 + 24);
          __asm { FMLA            D6, D7, V16.D[1] }
          v770 = v2345 + 48 * (int)(v730 + *(_DWORD *)(v2341 + 4) * *(_DWORD *)(v593 + 4 * v676));
          v771 = *(float64x2_t *)(v770 + 16);
          v772 = *(int64x2_t *)(v770 + 32);
          _Q21 = (float64x2_t)vextq_s8((int8x16_t)v771, (int8x16_t)v772, 8uLL);
          _Q18 = (float64x2_t)vdupq_laneq_s64(v772, 1);
          v773 = (int64x2_t)vaddq_f64(v769, _Q21);
          *(float64x2_t *)v770 = vaddq_f64(v766, *(float64x2_t *)v770);
          *(int64x2_t *)(v770 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q20, v771), v773);
          *(int8x16_t *)(v770 + 32) = vextq_s8((int8x16_t)v773, (int8x16_t)vaddq_f64(v2612.val[0], _Q18), 8uLL);
          if (v729 >> 30 != 3)
          {
LABEL_187:
            v774 = 4 * v643;
            v775 = v613 + 96 * *(int *)(v619 + 4 * v643);
            v776 = *(int64x2_t *)v775;
            v777 = *(int64x2_t *)(v775 + 16);
            v778 = (const double *)(v775 + 32);
            v2613 = vld2q_f64(v778);
            v775 += 64;
            v2616 = vld2q_f64((const double *)v775);
            v779 = (float64x2_t)vzip1q_s64(v776, v777);
            v780 = (float64x2_t)vzip2q_s64(v776, v777);
            v781 = (float64x2_t *)(v2445 + 144 * v643);
            *v781 = vmlaq_f64(vmulq_n_f64(v779, v641.f64[0]), v704, v780);
            v781[1] = vmlaq_f64(vmulq_n_f64(v2613.val[0], v641.f64[0]), v704, v2613.val[1]);
            v781[2] = vmlaq_f64(vmulq_n_f64(v2616.val[0], v641.f64[0]), v704, v2616.val[1]);
            v781[3] = vmlaq_f64(vmulq_n_f64(v779, v640.f64[0]), v623, v780);
            v781[4] = vmlaq_f64(vmulq_n_f64(v2613.val[0], v640.f64[0]), v623, v2613.val[1]);
            v781[5] = vmlaq_f64(vmulq_n_f64(v2616.val[0], v640.f64[0]), v623, v2616.val[1]);
            v781[6] = vmlaq_f64(vmulq_n_f64(v779, _Q0.f64[0]), v705, v780);
            v781[7] = vmlaq_f64(vmulq_n_f64(v2613.val[0], _Q0.f64[0]), v705, v2613.val[1]);
            v782 = *(int *)(v2553 + 4 * (int)v729);
            v781[8] = vmlaq_f64(vmulq_n_f64(v2616.val[0], _Q0.f64[0]), v705, v2616.val[1]);
            v783 = (float64x2_t *)(v2413 + 48 * v782);
            v784 = vsubq_f64(v783[2], vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], *(double *)v644), v2616.val[1], *(float64x2_t *)v644, 1));
            v785 = vsubq_f64(v783[1], vmlaq_laneq_f64(vmulq_n_f64(v2613.val[0], *(double *)v644), v2613.val[1], *(float64x2_t *)v644, 1));
            *v783 = vsubq_f64(*v783, vmlaq_laneq_f64(vmulq_n_f64(v779, *(double *)v644), v780, *(float64x2_t *)v644, 1));
            v786 = *(int *)(v593 + 4 * v728);
            v787 = (float64x2_t *)(v2413 + 48 * *(int *)(v2553 + 4 * v786));
            v788 = *(int *)(v619 + v774);
            v787[1] = v785;
            v787[2] = v784;
            v789 = v613 + 96 * v788;
            v790 = *(float64x2_t *)(v789 + 16);
            v791 = *(float64x2_t *)(v789 + 32);
            v2614 = *(float64x2x2_t *)(v789 + 48);
            v792 = *(float64x2_t *)(v789 + 80);
            v2616.val[0] = (float64x2_t)vzip1q_s64((int64x2_t)v791, (int64x2_t)v2614.val[0]);
            v2616.val[1] = (float64x2_t)vzip1q_s64((int64x2_t)v2614.val[1], (int64x2_t)v792);
            *(_QWORD *)&v779.f64[0] = vdupq_laneq_s64((int64x2_t)v791, 1).u64[0];
            v779.f64[1] = *(float64_t *)(v789 + 56);
            *(_QWORD *)&v793.f64[0] = vdupq_laneq_s64((int64x2_t)v2614.val[1], 1).u64[0];
            v793.f64[1] = *(float64_t *)(v789 + 88);
            v794 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v789, (int64x2_t)v790);
            v795 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v789, (int64x2_t)v790);
            v796 = vmlaq_laneq_f64(vmulq_n_f64(v794, *(double *)v789), v795, *(float64x2_t *)v789, 1);
            v797 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], *(double *)v789), v779, *(float64x2_t *)v789, 1);
            v798 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[1], *(double *)v789), v793, *(float64x2_t *)v789, 1);
            v799 = vmlaq_laneq_f64(vmulq_n_f64(v794, v790.f64[0]), v795, v790, 1);
            v800 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], v790.f64[0]), v779, v790, 1);
            v801 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[1], v790.f64[0]), v793, v790, 1);
            v802 = vmlaq_laneq_f64(vmulq_n_f64(v794, v791.f64[0]), v795, v791, 1);
            v803 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], v791.f64[0]), v779, v791, 1);
            v804 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[1], v791.f64[0]), v793, v791, 1);
            v805 = vmlaq_laneq_f64(vmulq_n_f64(v794, v2614.val[0].f64[0]), v795, v2614.val[0], 1);
            v806 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], v2614.val[0].f64[0]), v779, v2614.val[0], 1);
            v807 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[1], v2614.val[0].f64[0]), v793, v2614.val[0], 1);
            v2614.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v794, v2614.val[1].f64[0]), v795, v2614.val[1], 1);
            v808 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], v2614.val[1].f64[0]), v779, v2614.val[1], 1);
            v809 = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[1], v2614.val[1].f64[0]), v793, v2614.val[1], 1);
            v2614.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v794, v792.f64[0]), v795, v792, 1);
            v2616.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[0], v792.f64[0]), v779, v792, 1);
            v2616.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v2616.val[1], v792.f64[0]), v793, v792, 1);
            v810 = (float64x2_t *)(v2493 + 288 * ((int)v786 + *(_DWORD *)(v2485 + 4) * (int)v786));
            v811 = vaddq_f64(v798, v810[2]);
            v812 = vaddq_f64(v797, v810[1]);
            v813 = vaddq_f64(v801, v810[5]);
            v623 = vaddq_f64(v800, v810[4]);
            v814 = vaddq_f64(v799, v810[3]);
            v815 = vaddq_f64(v804, v810[8]);
            v816 = vaddq_f64(v803, v810[7]);
            v817 = vaddq_f64(v802, v810[6]);
            v818 = vaddq_f64(v807, v810[11]);
            v819 = vaddq_f64(v806, v810[10]);
            v820 = vaddq_f64(v805, v810[9]);
            _Q21 = vaddq_f64(v809, v810[14]);
            _Q26 = vaddq_f64(v808, v810[13]);
            v2614.val[0] = vaddq_f64(v2614.val[0], v810[12]);
            v2616.val[1] = vaddq_f64(v2616.val[1], v810[17]);
            _Q18 = vaddq_f64(v2616.val[0], v810[16]);
            v2614.val[1] = vaddq_f64(v2614.val[1], v810[15]);
            *v810 = vaddq_f64(v796, *v810);
            v810[1] = v812;
            v810[2] = v811;
            v821 = (float64x2_t *)(v2493 + 288 * ((int)v786 + *(_DWORD *)(v2485 + 4) * (int)v786));
            v821[3] = v814;
            v821[4] = v623;
            v821[5] = v813;
            v821[6] = v817;
            v821[7] = v816;
            v821[8] = v815;
            v821[9] = v820;
            v821[10] = v819;
            v821[11] = v818;
            v821[12] = v2614.val[0];
            v821[13] = _Q26;
            v821[14] = _Q21;
            v821[15] = v2614.val[1];
            v821[16] = _Q18;
            v821[17] = v2616.val[1];
            v822 = *(_DWORD *)(v593 + 4 * v663 + 20);
            if (v822 >> 30 != 3)
            {
              v823 = v613 + 96 * *(int *)(v619 + v774);
              v824 = (const double *)(v823 + 32);
              v2609 = vld2q_f64(v824);
              v825 = *(int64x2_t *)v823;
              v826 = *(int64x2_t *)(v823 + 16);
              v823 += 64;
              v2611 = vld2q_f64((const double *)v823);
              v827 = (float64x2_t *)(v618 + 32 * *(int *)(v620 + v774));
              v828 = v827[1];
              v829 = (float64x2_t)vzip1q_s64(v825, v826);
              v830 = (float64x2_t)vzip2q_s64(v825, v826);
              v831 = vmlaq_laneq_f64(vmulq_n_f64(v829, v827->f64[0]), v830, *v827, 1);
              v832 = vmlaq_laneq_f64(vmulq_n_f64(v2609.val[0], v827->f64[0]), v2609.val[1], *v827, 1);
              _Q18 = vmlaq_laneq_f64(vmulq_n_f64(v2611.val[0], v827->f64[0]), v2611.val[1], *v827, 1);
              v833 = vmlaq_laneq_f64(vmulq_n_f64(v829, v828.f64[0]), v830, v828, 1);
              v834 = vmlaq_laneq_f64(vmulq_n_f64(v2609.val[0], v828.f64[0]), v2609.val[1], v828, 1);
              v2609.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v2611.val[0], v828.f64[0]), v2611.val[1], v828, 1);
              v835 = (float64x2_t *)(v2336 + 96 * (int)(v822 + *(_DWORD *)(v2331 + 4) * *(_DWORD *)(v593 + 4 * v728)));
              v2611.val[1] = vaddq_f64(_Q18, v835[2]);
              v836 = vaddq_f64(v832, v835[1]);
              v623 = vaddq_f64(v833, v835[3]);
              v2609.val[0] = vaddq_f64(v2609.val[0], v835[5]);
              v837 = vaddq_f64(v834, v835[4]);
              *v835 = vaddq_f64(v831, *v835);
              v835[1] = v836;
              v835[2] = v2611.val[1];
              v835[3] = v623;
              v835[4] = v837;
              v835[5] = v2609.val[0];
            }
          }
        }
LABEL_189:
        v838 = *v639;
        v839 = *(int *)(v593 + 24 * v838 + 20);
        if (v839 >> 30 != 3)
        {
          v840 = (float64x2_t *)(v618 + 32 * *(int *)(v620 + 4 * v838));
          v841 = *v840;
          v842 = v840[1];
          v843 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v840, (int64x2_t)v842);
          v844 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v840, (int64x2_t)v842);
          v845 = vmlaq_laneq_f64(vmulq_n_f64(v843, v638[-1].f64[0]), v844, v638[-1], 1);
          v846 = vmlaq_laneq_f64(vmulq_n_f64(v843, v638->f64[0]), v844, *v638, 1);
          v847 = (float64x2_t *)(v2437 + 48 * v838);
          *v847 = vmlaq_laneq_f64(vmulq_n_f64(v843, v638[-2].f64[0]), v844, v638[-2], 1);
          v847[1] = v845;
          v847[2] = v846;
          v848 = 16 * *(int *)(v2544 + 4 * v839);
          *(float64x2_t *)(v2406 + v848) = vsubq_f64(*(float64x2_t *)(v2406 + v848), vmlaq_laneq_f64(vmulq_n_f64(v843, *(double *)(v627 + 16 * v838)), v844, *(float64x2_t *)(v627 + 16 * v838), 1));
          v623 = vmlaq_laneq_f64(vmulq_n_f64(v843, v841.f64[0]), v844, v841, 1);
          v849 = (float64x2_t *)(v2477 + 32 * ((int)v839 + *(_DWORD *)(v2469 + 4) * (int)v839));
          v850 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v843, v842.f64[0]), v844, v842, 1), v849[1]);
          *v849 = vaddq_f64(v623, *v849);
          v849[1] = v850;
        }
        ++v639;
        v638 += 3;
        if (!--v637)
          goto LABEL_162;
      }
    }
LABEL_191:
    *(_QWORD *)(v2236 + 24) |= 1uLL;
    *(_QWORD *)(v2233 + 24) |= 1uLL;
    *(_QWORD *)(v2231 + 24) |= 1uLL;
    *(_QWORD *)(v2232 + 24) |= 1uLL;
    *(_QWORD *)(v2235 + 24) |= 1uLL;
    *(_QWORD *)(v2243 + 24) |= 1uLL;
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2251 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a33 + 24) |= 1uLL;
    *(_QWORD *)(a31 + 24) |= 1uLL;
    *(_QWORD *)(a27 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a16 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v395 = v2214;
    v394 = v2216;
    v396 = v2207;
    v592 = v2196;
    v393 = v2281;
  }
  v851 = STACK[0xB68];
  v2205 = STACK[0x960];
  v2193 = STACK[0xB68];
  v852 = STACK[0x950];
  v2224 = STACK[0x940];
  v853 = STACK[0x938];
  v2237 = STACK[0x758];
  v2203 = STACK[0x950];
  v2200 = STACK[0x938];
  if ((**(_BYTE **)(v393 + 16) & 1) != 0)
  {
    v854 = *(_QWORD *)(v2256 + 16);
    v855 = _gc_buffer_get_extent();
    v856 = _gc_buffer_get_extent();
    v857 = _gc_buffer_get_extent();
    if (v855 != 2 || v856 != v857)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v396 + 24) |= 1uLL;
    }
    v858 = *(_QWORD *)(v396 + 16);
    v2282 = *(_QWORD *)(v2286 + 16);
    v859 = _gc_buffer_get_extent();
    v860 = _gc_buffer_get_extent();
    v861 = _gc_buffer_get_extent();
    v862 = _gc_buffer_get_extent();
    if (v859 != 2 || v860 != 3 || v861 != v862)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v395 + 24) |= 1uLL;
    }
    v2599 = *(_QWORD *)(v395 + 16);
    v863 = _gc_buffer_get_extent();
    v864 = _gc_buffer_get_extent();
    v865 = _gc_buffer_get_extent();
    v866 = _gc_buffer_get_extent();
    if (v863 != 2 || v864 != 1 || v865 != v866)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2210 + 24) |= 1uLL;
    }
    v2486 = *(_QWORD *)(v2210 + 16);
    v867 = _gc_buffer_get_extent();
    v868 = _gc_buffer_get_extent();
    v869 = _gc_buffer_get_extent();
    v870 = _gc_buffer_get_extent();
    if (v867 != 2 || v868 != 3 || v869 != v870)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2212 + 24) |= 1uLL;
    }
    v871 = *(_QWORD *)(v2212 + 16);
    v872 = _gc_buffer_get_extent();
    v873 = _gc_buffer_get_extent();
    v874 = _gc_buffer_get_extent();
    v875 = _gc_buffer_get_extent();
    if (v872 != 2 || v873 != 6 || v874 != v875)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v394 + 24) |= 1uLL;
    }
    v876 = *(_QWORD *)(v394 + 16);
    v877 = _gc_buffer_get_extent();
    v878 = _gc_buffer_get_extent();
    v879 = _gc_buffer_get_extent();
    v880 = _gc_buffer_get_extent();
    if (v877 != 2 || v878 != 2 || v879 != v880)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2218 + 24) |= 1uLL;
    }
    v881 = *(_QWORD *)(v2218 + 16);
    v2254 = *(int **)(v2220 + 16);
    v2478 = *(_QWORD *)(v2222 + 16);
    v882 = *(_QWORD *)(v2227 + 16);
    v883 = *(_QWORD *)(v2228 + 16);
    v884 = *(_QWORD *)(v2229 + 16);
    v2470 = *(_QWORD *)(a14 + 16);
    v2278 = *(_QWORD *)(a15 + 16);
    v2462 = *(_QWORD *)(a16 + 16);
    v2274 = *(_QWORD *)(a17 + 16);
    v2454 = *(_QWORD *)(a20 + 16);
    v2270 = *(_QWORD *)(a21 + 16);
    v2446 = *(_QWORD *)(a22 + 16);
    v2267 = *(_QWORD *)(a23 + 16);
    v2438 = *(_QWORD *)(a27 + 16);
    v2430 = *(_QWORD *)(a28 + 16);
    v2422 = *(_QWORD *)(a31 + 16);
    v2414 = *(_QWORD *)(a32 + 16);
    v2407 = *(_QWORD *)(a33 + 16);
    v2400 = *(_QWORD *)(a34 + 16);
    v2393 = *(_QWORD *)(a56 + 16);
    v2388 = *(_QWORD *)(a57 + 16);
    v885 = *(_QWORD *)(a58 + 16);
    v2379 = *(_QWORD *)(a59 + 16);
    v2373 = *(_QWORD *)(a66 + 16);
    v2367 = *(_QWORD *)(v2238 + 16);
    v2361 = *(_QWORD *)(v2243 + 16);
    v2356 = *(_QWORD *)(v2235 + 16);
    v2351 = *(_QWORD *)(v2232 + 16);
    v2346 = *(_QWORD *)(v2231 + 16);
    v2264 = *(_QWORD *)(v2240 + 16);
    v886 = *(_QWORD *)(v2251 + 16);
    v2337 = *(_QWORD *)(v2239 + 16);
    v2260 = *(_QWORD *)(v2241 + 16);
    v2332 = *(_QWORD *)(v2236 + 16);
    v2326 = *(_QWORD *)(v2233 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v2321 >= 1)
    {
      v889 = 0;
      v2257 = v2599 + 32;
      do
      {
        if (v889)
        {
          v890 = v2254[v889 - 1];
          v891 = v2254[v889];
          if (v890 < (int)v891)
            goto LABEL_222;
        }
        else
        {
          v890 = 0;
          v891 = *v2254;
          if ((int)v891 > 0)
          {
LABEL_222:
            v892 = v2332 + 72 * v889;
            v893 = *(int64x2_t *)(v892 + 16);
            v894 = *(int8x16_t *)(v892 + 32);
            v895 = (float64x2_t *)v892;
            v896 = v895[3];
            v2294 = v895 + 3;
            v2518 = *(_DWORD *)(v2278 + 4);
            v2510 = *(_DWORD *)(v2274 + 4);
            v2502 = *(_DWORD *)(v2270 + 4);
            v2494 = *(_DWORD *)(v2267 + 4);
            v2312 = (float64x2_t *)(v2326 + 24 * v889);
            v897 = *v2312;
            v2287 = 3 * v889 + 2;
            v888.f64[0] = *(float64_t *)(v2326 + 8 * v2287);
            v2306 = v895;
            v898 = *v895;
            v2290 = 9 * v889 + 8;
            v887.f64[0] = *(float64_t *)(v2332 + 8 * v2290);
            v899 = v891 - v890;
            v900 = (float64x2_t *)(v2257 + 48 * v890);
            v901 = (int *)(v2282 + 4 * v890);
            do
            {
              v2526 = (int64x2_t)v894;
              v2569 = (float64x2_t)v893;
              v2578 = v888;
              v2587 = v887;
              v2600 = v896;
              v903 = v900[-2];
              v902 = v900[-1];
              v904 = *v901++;
              _Q17 = *v900;
              _Q18 = *(float64x2_t *)(v858 + 16 * v904);
              _D0 = v900[-2].f64[1];
              _D1 = v900[-1].f64[1];
              v2561 = *(double *)(v858 + 16 * v904 + 8);
              _D3 = v900->f64[1];
              _Q23 = *(_OWORD *)(v2486 + 16 * *(int *)(v2478 + 4 * v904));
              __asm { FMLA            D27, D0, V23.D[1] }
              v2554 = _D0;
              v912 = v2361 + 24 * v904;
              __asm { FMLA            D29, D1, V23.D[1] }
              v2545 = _D1;
              v914 = (int *)(v854 + 24 * v904);
              v915 = v914[1];
              v916 = *v914;
              __asm { FMLA            D28, D3, V23.D[1] }
              v2535 = _D3;
              v918 = *(double *)(v2264 + 8 * v916);
              __asm { FMLA            D31, D2, V23.D[1] }
              v920 = 8 * ((int)v916 + v2518 * (int)v916);
              v921 = *(double *)(v2470 + v920);
              _D10 = *(_QWORD *)(v2486 + 16 * *(int *)(v2478 + 4 * v904) + 8);
              v923 = v871 + 48 * *(int *)(v882 + 4 * v904);
              v924 = *(int64x2_t *)v923;
              v925 = *(int64x2_t *)(v923 + 16);
              _Q24 = *(_OWORD *)(v923 + 32);
              __asm { FMLA            D8, D10, V23.D[1] }
              _D11 = *(_QWORD *)(v923 + 8);
              __asm { FMLA            D10, D11, V23.D[1] }
              _Q27.f64[1] = _D29;
              _D29 = *(_QWORD *)(v923 + 24);
              __asm { FMLA            D11, D29, V23.D[1] }
              _D12 = *(_QWORD *)(v923 + 40);
              __asm { FMLA            D29, D12, V23.D[1] }
              *(_QWORD *)(v912 + 16) = _D28;
              v934 = (double *)(v2462 + 24 * (v915 + v2510 * (int)v916));
              v935 = *(_OWORD *)v934;
              v936 = v934[1];
              v937 = v934[2];
              v938 = v918 - _D31;
              v939 = (float64x2_t *)(v876 + 96 * *(int *)(v883 + 4 * v904));
              _Q31 = *v939;
              _Q14 = v939[1];
              v942 = _D8 + v921;
              _Q9 = v939[2];
              v944 = v939[3];
              _Q2 = v939[4];
              _Q21 = v939[5];
              *(double *)(v2264 + 8 * v916) = v938;
              _Q31.f64[0] = _Q31.f64[1];
              __asm { FMLA            D30, D31, V23.D[1] }
              _Q14.f64[0] = _Q14.f64[1];
              *(float64x2_t *)v912 = _Q27;
              __asm { FMLA            D31, D14, V23.D[1] }
              _Q9.f64[0] = _Q9.f64[1];
              __asm { FMLA            D27, D9, V23.D[1] }
              *(double *)&v935 = _D10 + *(double *)&v935;
              _D10 = v944.f64[1];
              __asm { FMLA            D9, D10, V23.D[1] }
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FMLA            D10, D2, V23.D[1] }
              _Q2.f64[0] = _D11 + v936;
              _Q21.f64[0] = _Q21.f64[1];
              __asm { FMLA            D11, D21, V23.D[1] }
              v951 = 6 * v904 + 4;
              _Q21.f64[0] = _D29 + v937;
              v952 = (float64x2_t *)(v2454 + 48 * (*(_DWORD *)(v854 + 4 * v951) + v2502 * (int)v916));
              *(double *)(v2470 + v920) = v942;
              v953 = v952[2];
              v954.f64[0] = _D30 + v952->f64[0];
              *((_QWORD *)&v935 + 1) = *(_QWORD *)&_Q2.f64[0];
              _Q2.f64[0] = _Q31.f64[0] + v952->f64[1];
              _Q27.f64[0] = _Q27.f64[0] + v952[1].f64[0];
              v955 = _Q9.f64[0] + v952[1].f64[1];
              v934[2] = _Q21.f64[0];
              _Q21.f64[0] = _D10 + v953.f64[0];
              v954.f64[1] = _Q2.f64[0];
              _Q27.f64[1] = v955;
              _Q21.f64[1] = _D11 + v953.f64[1];
              v956 = *(int *)(v884 + 4 * v904);
              *(_OWORD *)v934 = v935;
              v957 = (int8x16_t *)(v881 + 32 * v956);
              _Q2 = *v957;
              _Q28 = v957[1];
              *v952 = v954;
              v952[1] = _Q27;
              _Q2.i64[0] = _Q2.i64[1];
              __asm { FMLA            D29, D2, V23.D[1] }
              *(_QWORD *)&_Q27.f64[0] = _Q28.i64[1];
              __asm { FMLA            D2, D27, V23.D[1] }
              v952[2] = _Q21;
              v961 = (double *)(v2446 + 16 * (v914[5] + v2494 * (int)v916));
              *(double *)_Q2.i64 = *(double *)_Q2.i64 + v961[1];
              _Q23 = (float64x2_t)vzip1q_s64(v924, v925);
              v963 = (float64x2_t)vzip2q_s64(v924, v925);
              v964 = vmlaq_laneq_f64(vmulq_n_f64(_Q23, v903.f64[0]), v963, v903, 1);
              *v961 = _D29 + *v961;
              __asm { FMLA            D21, D0, V24.D[1] }
              v965 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(_Q23, v902.f64[0]), v963, v902, 1);
              v961[1] = *(double *)_Q2.i64;
              __asm { FMLA            D28, D1, V24.D[1] }
              v966 = vmulq_n_f64(_Q23, _Q17.f64[0]);
              __asm { FMLA            D23, D3, V24.D[1] }
              v967 = v2356 + 72 * v904;
              _Q2 = vmlaq_laneq_f64(v966, v963, _Q17, 1);
              *(_QWORD *)&_Q21.f64[1] = v965.i64[0];
              *(float64x2_t *)v967 = v964;
              *(float64x2_t *)(v967 + 16) = _Q21;
              *(int8x16_t *)(v967 + 32) = vextq_s8(v965, _Q28, 8uLL);
              *(float64x2_t *)(v967 + 48) = _Q2;
              *(float64_t *)(v967 + 64) = _Q23.f64[0];
              v969 = v914[1];
              v970 = (float64x2_t *)(v886 + 24 * v969);
              _Q2.f64[0] = v970[1].f64[0];
              v971 = v871 + 48 * *(int *)(v882 + 4 * v904);
              v972 = *(float64x2_t *)(v971 + 16);
              _Q23 = *(float64x2_t *)(v971 + 32);
              _Q28 = *(float64x2_t *)(v858 + 16 * v904);
              v975 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v971, (int64x2_t)v972);
              _Q25 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v971, (int64x2_t)v972);
              _Q30 = vmulq_f64(_Q23, _Q28);
              _Q31.f64[0] = *(float64_t *)(v858 + 16 * v904 + 8);
              __asm { FMLA            D30, D31, V23.D[1] }
              _D10 = *(_QWORD *)(v971 + 40);
              _Q11 = vmulq_f64(_Q23, *(float64x2_t *)v971);
              v980 = vmlaq_laneq_f64(vmulq_n_f64(v975, _Q28.f64[0]), _Q25, _Q28, 1);
              _Q28.f64[0] = *(float64_t *)(v971 + 8);
              __asm { FMLA            D11, D28, V23.D[1] }
              _Q28 = vmulq_f64(_Q23, v972);
              _Q9.f64[0] = *(float64_t *)(v971 + 24);
              v982 = vmlaq_laneq_f64(vmulq_n_f64(v975, *(double *)v971), _Q25, *(float64x2_t *)v971, 1);
              __asm { FMLA            D28, D9, V23.D[1] }
              _Q21 = vmulq_f64(_Q23, _Q23);
              __asm { FMLA            D21, D10, V23.D[1] }
              v984 = vmlaq_laneq_f64(vmulq_n_f64(v975, v972.f64[0]), _Q25, v972, 1);
              v985 = v2438 + 72 * ((int)v969 + *(_DWORD *)(v2430 + 4) * (int)v969);
              v986 = *(float64x2_t *)(v985 + 16);
              v987 = *(int64x2_t *)(v985 + 32);
              v953.f64[0] = *(float64_t *)(v985 + 64);
              v988 = (float64x2_t)vextq_s8((int8x16_t)v986, (int8x16_t)v987, 8uLL);
              *(_QWORD *)&_Q30.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q30);
              v989 = (int64x2_t)vaddq_f64(_Q11, v986);
              v990 = (float64x2_t *)(v876 + 96 * *(int *)(v883 + 4 * v904));
              _Q19 = v990[1];
              v992 = (int8x16_t)vaddq_f64(_Q28, (float64x2_t)vdupq_laneq_s64(v987, 1));
              _Q20 = v990[2];
              _Q22 = v990[3];
              v995 = vmlaq_laneq_f64(vmulq_n_f64(v975, v990->f64[0]), _Q25, *v990, 1);
              *(_QWORD *)&_Q21.f64[0] = *(_OWORD *)&vaddq_f64(_Q21, v953);
              _Q11 = vmulq_f64(_Q23, *v990);
              _Q2.f64[0] = v990->f64[1];
              __asm { FMLA            D11, D2, V23.D[1] }
              v997 = vmlaq_laneq_f64(vmulq_n_f64(v975, _Q19.f64[0]), _Q25, _Q19, 1);
              v998 = vsubq_f64(*v970, v980);
              _Q27 = vmulq_f64(_Q23, _Q19);
              _Q19.f64[0] = v990[1].f64[1];
              __asm { FMLA            D27, D19, V23.D[1] }
              v1000 = vmlaq_laneq_f64(vmulq_n_f64(v975, _Q20.f64[0]), _Q25, _Q20, 1);
              v1001 = vaddq_f64(v982, *(float64x2_t *)v985);
              _Q31 = vmulq_f64(_Q23, _Q20);
              _Q20.f64[0] = v990[2].f64[1];
              __asm { FMLA            D31, D20, V23.D[1] }
              v1003 = vmlaq_laneq_f64(vmulq_n_f64(v975, _Q22.f64[0]), _Q25, _Q22, 1);
              v1004 = (int64x2_t)vaddq_f64(v984, v988);
              _Q13 = vmulq_f64(_Q23, _Q22);
              _Q22.f64[0] = v990[3].f64[1];
              __asm { FMLA            D13, D22, V23.D[1] }
              _Q22 = v990[4];
              v1006 = v990[5];
              v1008 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v975, _Q23.f64[0]), _Q25, _Q23, 1), *(float64x2_t *)(v985 + 48));
              v1009 = vmlaq_laneq_f64(vmulq_n_f64(v975, _Q22.f64[0]), _Q25, _Q22, 1);
              _Q6 = vmulq_f64(_Q23, _Q22);
              _Q22.f64[0] = v990[4].f64[1];
              __asm { FMLA            D6, D22, V23.D[1] }
              LODWORD(v990) = *(_DWORD *)(v854 + 4 * v951) + *(_DWORD *)(v2414 + 4) * v914[1];
              v970[1].f64[0] = _Q30.f64[0];
              v1011 = vmlaq_laneq_f64(vmulq_n_f64(v975, v1006.f64[0]), _Q25, v1006, 1);
              _Q24 = vmulq_f64(_Q23, v1006);
              _Q25.f64[0] = v1006.f64[1];
              __asm { FMLA            D24, D25, V23.D[1] }
              v1013 = v2422 + 144 * (int)v990;
              *(float64_t *)(v985 + 64) = _Q21.f64[0];
              v1014 = *(float64x2_t *)(v1013 + 16);
              v1015 = *(int64x2_t *)(v1013 + 32);
              v1016 = *(float64x2_t *)(v1013 + 48);
              v1017 = vaddq_f64(v995, *(float64x2_t *)v1013);
              *v970 = v998;
              v1018 = *(float64x2_t *)(v1013 + 64);
              v1019 = *(int64x2_t *)(v1013 + 80);
              v1020 = (int64x2_t)vaddq_f64(_Q11, v1014);
              v1021 = (int64x2_t)vaddq_f64(v997, (float64x2_t)vextq_s8((int8x16_t)v1014, (int8x16_t)v1015, 8uLL));
              v1022 = (int8x16_t)vaddq_f64(_Q27, (float64x2_t)vdupq_laneq_s64(v1015, 1));
              v1024 = *(float64x2_t *)(v1013 + 96);
              v1023 = *(float64x2_t *)(v1013 + 112);
              v1025 = vaddq_f64(v1000, v1016);
              v1026 = *(int64x2_t *)(v1013 + 128);
              v1027 = (int64x2_t)vaddq_f64(_Q31, v1018);
              v1028 = (int64x2_t)vaddq_f64(v1003, (float64x2_t)vextq_s8((int8x16_t)v1018, (int8x16_t)v1019, 8uLL));
              *(float64x2_t *)v985 = v1001;
              *(int64x2_t *)(v985 + 16) = vzip1q_s64(v989, v1004);
              v1029 = (int64x2_t)vaddq_f64(v1011, (float64x2_t)vextq_s8((int8x16_t)v1023, (int8x16_t)v1026, 8uLL));
              *(int8x16_t *)(v985 + 32) = vextq_s8((int8x16_t)v1004, v992, 8uLL);
              *(float64x2_t *)(v985 + 48) = v1008;
              *(float64x2_t *)v1013 = v1017;
              *(int64x2_t *)(v1013 + 16) = vzip1q_s64(v1020, v1021);
              *(int8x16_t *)(v1013 + 32) = vextq_s8((int8x16_t)v1021, v1022, 8uLL);
              *(float64x2_t *)(v1013 + 48) = v1025;
              *(int64x2_t *)(v1013 + 64) = vzip1q_s64(v1027, v1028);
              *(int8x16_t *)(v1013 + 80) = vextq_s8((int8x16_t)v1028, (int8x16_t)vaddq_f64(_Q13, (float64x2_t)vdupq_laneq_s64(v1019, 1)), 8uLL);
              *(float64x2_t *)(v1013 + 96) = vaddq_f64(v1009, v1024);
              *(int64x2_t *)(v1013 + 112) = vzip1q_s64((int64x2_t)vaddq_f64(_Q6, v1023), v1029);
              v1030 = *(int *)(v882 + 4 * v904);
              *(int8x16_t *)(v1013 + 128) = vextq_s8((int8x16_t)v1029, (int8x16_t)vaddq_f64(_Q24, (float64x2_t)vdupq_laneq_s64(v1026, 1)), 8uLL);
              v1031 = (const double *)(v871 + 48 * v1030);
              v2617 = vld2q_f64(v1031);
              v1031 += 4;
              _Q2 = *(float64x2_t *)v1031;
              v1033 = (float64x2_t *)(v881 + 32 * *(int *)(v884 + 4 * v904));
              v1034 = v1033[1];
              v1035 = vmlaq_laneq_f64(vmulq_n_f64(v2617.val[0], v1033->f64[0]), v2617.val[1], *v1033, 1);
              _Q23 = vmulq_f64(_Q2, *v1033);
              _Q6.f64[0] = v1033->f64[1];
              __asm { FMLA            D23, D6, V2.D[1] }
              v1037 = vmlaq_laneq_f64(vmulq_n_f64(v2617.val[0], v1034.f64[0]), v2617.val[1], v1034, 1);
              v2617.val[0] = vmulq_f64(_Q2, v1034);
              v2617.val[1].f64[0] = v1033[1].f64[1];
              v1038 = v2407 + 48 * (v914[5] + *(_DWORD *)(v2400 + 4) * v914[1]);
              v1039 = *(float64x2_t *)(v1038 + 16);
              __asm { FMLA            D19, D20, V2.D[1] }
              v1040 = *(int64x2_t *)(v1038 + 32);
              v1041 = (int64x2_t)vaddq_f64(v1037, (float64x2_t)vextq_s8((int8x16_t)v1039, (int8x16_t)v1040, 8uLL));
              v1042 = vextq_s8((int8x16_t)v1041, (int8x16_t)vaddq_f64(v2617.val[0], (float64x2_t)vdupq_laneq_s64(v1040, 1)), 8uLL);
              *(float64x2_t *)v1038 = vaddq_f64(v1035, *(float64x2_t *)v1038);
              *(int64x2_t *)(v1038 + 16) = vzip1q_s64((int64x2_t)vaddq_f64(_Q23, v1039), v1041);
              v1043 = v876 + 96 * *(int *)(v883 + 4 * v904);
              v1044 = *(int64x2_t *)v1043;
              v2617.val[0] = *(float64x2_t *)(v1043 + 16);
              *(int8x16_t *)(v1038 + 32) = v1042;
              v1045 = (const double *)(v1043 + 32);
              v1043 += 64;
              v2621 = vld2q_f64(v1045);
              v2620 = vld2q_f64((const double *)v1043);
              v1046 = (float64x2_t)vzip1q_s64(v1044, (int64x2_t)v2617.val[0]);
              v1047 = (float64x2_t)vzip2q_s64(v1044, (int64x2_t)v2617.val[0]);
              v1048 = (float64x2_t *)(v2351 + 144 * v904);
              *v1048 = vmlaq_laneq_f64(vmulq_n_f64(v1046, v903.f64[0]), v1047, v903, 1);
              v1048[1] = vmlaq_laneq_f64(vmulq_n_f64(v2621.val[0], v903.f64[0]), v2621.val[1], v903, 1);
              v1048[2] = vmlaq_laneq_f64(vmulq_n_f64(v2620.val[0], v903.f64[0]), v2620.val[1], v903, 1);
              v1048[3] = vmlaq_laneq_f64(vmulq_n_f64(v1046, v902.f64[0]), v1047, v902, 1);
              v1048[4] = vmlaq_laneq_f64(vmulq_n_f64(v2621.val[0], v902.f64[0]), v2621.val[1], v902, 1);
              v1048[5] = vmlaq_laneq_f64(vmulq_n_f64(v2620.val[0], v902.f64[0]), v2620.val[1], v902, 1);
              v1048[6] = vmlaq_laneq_f64(vmulq_n_f64(v1046, _Q17.f64[0]), v1047, _Q17, 1);
              v1048[7] = vmlaq_laneq_f64(vmulq_n_f64(v2621.val[0], _Q17.f64[0]), v2621.val[1], _Q17, 1);
              v1048[8] = vmlaq_laneq_f64(vmulq_n_f64(v2620.val[0], _Q17.f64[0]), v2620.val[1], _Q17, 1);
              v1049 = *(float64x2_t *)(v858 + 16 * v904);
              v1050 = v876 + 96 * *(int *)(v883 + 4 * v904);
              v2618 = *(float64x2x2_t *)(v1050 + 16);
              v1051 = *(float64x2_t *)(v1050 + 48);
              v1053 = *(float64x2_t *)(v1050 + 64);
              v1052 = *(float64x2_t *)(v1050 + 80);
              v1054 = (float64x2_t)vzip1q_s64((int64x2_t)v2618.val[1], (int64x2_t)v1051);
              v1055 = (float64x2_t)vzip1q_s64((int64x2_t)v1053, (int64x2_t)v1052);
              *(_QWORD *)&v1023.f64[0] = vdupq_laneq_s64((int64x2_t)v2618.val[1], 1).u64[0];
              v1023.f64[1] = *(float64_t *)(v1050 + 56);
              *(_QWORD *)&_Q13.f64[0] = vdupq_laneq_s64((int64x2_t)v1053, 1).u64[0];
              _Q13.f64[1] = *(float64_t *)(v1050 + 88);
              v1056 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1050, (int64x2_t)v2618.val[0]);
              v1057 = vmlaq_laneq_f64(vmulq_n_f64(v1046, v1049.f64[0]), v1047, v1049, 1);
              v67 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1050, (int64x2_t)v2618.val[0]);
              v1058 = vmlaq_laneq_f64(vmulq_n_f64(v1056, *(double *)v1050), v67, *(float64x2_t *)v1050, 1);
              v1059 = vmlaq_laneq_f64(vmulq_n_f64(v1054, *(double *)v1050), v1023, *(float64x2_t *)v1050, 1);
              v1060 = vmlaq_laneq_f64(vmulq_n_f64(v2621.val[0], v1049.f64[0]), v2621.val[1], v1049, 1);
              v2621.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1055, *(double *)v1050), _Q13, *(float64x2_t *)v1050, 1);
              v2621.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1056, v2618.val[0].f64[0]), v67, v2618.val[0], 1);
              _Q25 = vmlaq_laneq_f64(vmulq_n_f64(v2620.val[0], v1049.f64[0]), v2620.val[1], v1049, 1);
              v1062 = vmlaq_laneq_f64(vmulq_n_f64(v1054, v2618.val[0].f64[0]), v1023, v2618.val[0], 1);
              v2620.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1056, v2618.val[1].f64[0]), v67, v2618.val[1], 1);
              v1063 = vmlaq_laneq_f64(vmulq_n_f64(v1055, v2618.val[0].f64[0]), _Q13, v2618.val[0], 1);
              v1064 = vmlaq_laneq_f64(vmulq_n_f64(v1054, v2618.val[1].f64[0]), v1023, v2618.val[1], 1);
              v2618.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1055, v2618.val[1].f64[0]), _Q13, v2618.val[1], 1);
              v2618.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1056, v1051.f64[0]), v67, v1051, 1);
              v2620.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v1054, v1051.f64[0]), v1023, v1051, 1);
              v1065 = vmlaq_laneq_f64(vmulq_n_f64(v1055, v1051.f64[0]), _Q13, v1051, 1);
              v1066 = vmlaq_laneq_f64(vmulq_n_f64(v1056, v1053.f64[0]), v67, v1053, 1);
              v1067 = vmlaq_laneq_f64(vmulq_n_f64(v1054, v1053.f64[0]), v1023, v1053, 1);
              v1068 = vmlaq_laneq_f64(vmulq_n_f64(v1055, v1053.f64[0]), _Q13, v1053, 1);
              v1069 = vmlaq_laneq_f64(vmulq_n_f64(v1056, v1052.f64[0]), v67, v1052, 1);
              v1070 = vmlaq_laneq_f64(vmulq_n_f64(v1054, v1052.f64[0]), v1023, v1052, 1);
              v1071 = *(int *)(v854 + 4 * v951);
              v1072 = (float64x2_t *)(v2393 + 288 * ((int)v1071 + *(_DWORD *)(v2388 + 4) * (int)v1071));
              v2621.val[1] = vaddq_f64(v2621.val[1], v1072[2]);
              v1073 = vaddq_f64(v1059, v1072[1]);
              v1074 = vaddq_f64(v1063, v1072[5]);
              v66 = vaddq_f64(v1062, v1072[4]);
              v2621.val[0] = vaddq_f64(v2621.val[0], v1072[3]);
              v2618.val[0] = vaddq_f64(v2618.val[0], v1072[8]);
              v1075 = vaddq_f64(v1064, v1072[7]);
              v2620.val[0] = vaddq_f64(v2620.val[0], v1072[6]);
              v1076 = vaddq_f64(v1065, v1072[11]);
              v2620.val[1] = vaddq_f64(v2620.val[1], v1072[10]);
              v2618.val[1] = vaddq_f64(v2618.val[1], v1072[9]);
              v1077 = vaddq_f64(v1068, v1072[14]);
              v1078 = vaddq_f64(v1067, v1072[13]);
              v1079 = vaddq_f64(v1066, v1072[12]);
              v1080 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1055, v1052.f64[0]), _Q13, v1052, 1), v1072[17]);
              v1081 = vaddq_f64(v1070, v1072[16]);
              v1082 = (float64x2_t *)(v2337 + 48 * v1071);
              v1083 = vaddq_f64(v1069, v1072[15]);
              v1084 = v1082[1];
              v1085 = vsubq_f64(*v1082, v1057);
              *v1072 = vaddq_f64(v1058, *v1072);
              v1072[1] = v1073;
              v1072[2] = v2621.val[1];
              v1086 = (float64x2x2_t *)(v2393 + 288 * ((int)v1071 + *(_DWORD *)(v2388 + 4) * (int)v1071));
              v1086[1].val[1] = v2621.val[0];
              v1086[2].val[0] = v66;
              v1086[2].val[1] = v1074;
              v1086[3].val[0] = v2620.val[0];
              v1087 = vsubq_f64(v1082[2], _Q25);
              v1086[3].val[1] = v1075;
              v1086[4] = v2618;
              v1086[5].val[0] = v2620.val[1];
              v1086[5].val[1] = v1076;
              v1086[6].val[0] = v1079;
              v1086[6].val[1] = v1078;
              v1086[7].val[0] = v1077;
              v1086[7].val[1] = v1083;
              *v1082 = v1085;
              v1082[1] = vsubq_f64(v1084, v1060);
              v1086[8].val[0] = v1081;
              v1086[8].val[1] = v1080;
              v1088 = v876 + 96 * *(int *)(v883 + 4 * v904);
              v1082[2] = v1087;
              v1089 = (const double *)(v1088 + 32);
              v2610 = vld2q_f64(v1089);
              v1090 = *(int64x2_t *)v1088;
              v1091 = *(int64x2_t *)(v1088 + 16);
              v1088 += 64;
              v2619 = vld2q_f64((const double *)v1088);
              v1092 = (float64x2_t *)(v881 + 32 * *(int *)(v884 + 4 * v904));
              v1094 = *v1092;
              v1093 = v1092[1];
              v1095 = v914[5];
              v1096 = (float64x2_t)vzip1q_s64((int64x2_t)v903, (int64x2_t)v902);
              _Q22 = (float64x2_t)vzip2q_s64((int64x2_t)v903, (int64x2_t)v902);
              v2620.val[0].f64[0] = v2561;
              __asm { FMLA            D25, D26, V17.D[1] }
              v2620.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1096, v903.f64[0]), _Q22, v903, 1);
              v1098 = vmlaq_laneq_f64(vmulq_n_f64(v1096, _Q18.f64[0]), _Q22, _Q18, 1);
              v2620.val[1].f64[0] = v2554;
              __asm { FMLA            D18, D27, V17.D[1] }
              v2621.val[0].f64[0] = v2545;
              __asm { FMLA            D27, D28, V17.D[1] }
              v2621.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v1096, v902.f64[0]), _Q22, v902, 1);
              v1099 = vmlaq_laneq_f64(vmulq_n_f64(v1096, _Q17.f64[0]), _Q22, _Q17, 1);
              v2621.val[1].f64[0] = v2535;
              __asm { FMLA            D22, D29, V17.D[1] }
              v2621.val[1] = (float64x2_t)vzip1q_s64(v1090, v1091);
              v888 = vsubq_f64(v2578, _Q25);
              v1100 = (float64x2_t)vzip2q_s64(v1090, v1091);
              v1101 = vmlaq_laneq_f64(vmulq_n_f64(v2610.val[0], v1094.f64[0]), v2610.val[1], v1094, 1);
              v1102 = vmlaq_laneq_f64(vmulq_n_f64(v2610.val[0], v1093.f64[0]), v2610.val[1], v1093, 1);
              v2610.val[0] = vmlaq_laneq_f64(vmulq_n_f64(v2621.val[1], v1094.f64[0]), v1100, v1094, 1);
              v2621.val[1] = vmlaq_laneq_f64(vmulq_n_f64(v2621.val[1], v1093.f64[0]), v1100, v1093, 1);
              v1103 = (float64x2_t *)(v885 + 96 * ((int)v1095 + *(_DWORD *)(v2379 + 4) * *(_DWORD *)(v854 + 4 * v951)));
              v2610.val[1] = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2619.val[0], v1094.f64[0]), v2619.val[1], v1094, 1), v1103[2]);
              v1104 = vaddq_f64(v1101, v1103[1]);
              v1105 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2619.val[0], v1093.f64[0]), v2619.val[1], v1093, 1), v1103[5]);
              v2619.val[0] = vaddq_f64(v1102, v1103[4]);
              v2619.val[1] = vaddq_f64(v2621.val[1], v1103[3]);
              *v1103 = vaddq_f64(v2610.val[0], *v1103);
              v1103[1] = v1104;
              v1103[2] = v2610.val[1];
              v1103[3] = v2619.val[1];
              v1103[4] = v2619.val[0];
              v1103[5] = v1105;
              v898 = vaddq_f64(v2620.val[0], v898);
              v1106 = (int64x2_t)vaddq_f64(_Q18, v2569);
              v2610.val[0] = vaddq_f64(v2621.val[0], (float64x2_t)vextq_s8((int8x16_t)v2569, (int8x16_t)v2526, 8uLL));
              v1107 = (float64x2_t)vzip1q_s64((int64x2_t)v1094, (int64x2_t)v1093);
              v1108 = (float64x2_t)vzip2q_s64((int64x2_t)v1094, (int64x2_t)v1093);
              v1109 = (float64x2_t *)(v2346 + 48 * v904);
              *v1109 = vmlaq_laneq_f64(vmulq_n_f64(v1107, v903.f64[0]), v1108, v903, 1);
              v1109[1] = vmlaq_laneq_f64(vmulq_n_f64(v1107, v902.f64[0]), v1108, v902, 1);
              *(float64x2_t *)(v2346 + 8 * v951) = vmlaq_laneq_f64(vmulq_n_f64(v1107, _Q17.f64[0]), v1108, _Q17, 1);
              v897 = vsubq_f64(v897, v1098);
              v896 = vaddq_f64(v1099, v2600);
              v887 = vaddq_f64(_Q22, v2587);
              v893 = vzip1q_s64(v1106, (int64x2_t)v2610.val[0]);
              v894 = vextq_s8((int8x16_t)v2610.val[0], (int8x16_t)vaddq_f64(v2620.val[1], (float64x2_t)vdupq_laneq_s64(v2526, 1)), 8uLL);
              *(float64x2_t *)(v2260 + 16 * v1095) = vsubq_f64(*(float64x2_t *)(v2260 + 16 * v1095), vmlaq_laneq_f64(vmulq_n_f64(v1107, *(double *)(v858 + 16 * v904)), v1108, *(float64x2_t *)(v858 + 16 * v904), 1));
              v1110 = (float64x2_t *)(v2373 + 32 * ((int)v1095 + *(_DWORD *)(v2367 + 4) * (int)v1095));
              v2610.val[1] = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1107, v1093.f64[0]), v1108, v1093, 1), v1110[1]);
              *v1110 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1107, v1094.f64[0]), v1108, v1094, 1), *v1110);
              v1110[1] = v2610.val[1];
              v900 += 3;
              --v899;
            }
            while (v899);
            *v2312 = v897;
            *(float64_t *)(v2326 + 8 * v2287) = v888.f64[0];
            *v2306 = v898;
            *(int64x2_t *)(v892 + 16) = v893;
            *(int8x16_t *)(v892 + 32) = v894;
            *v2294 = v896;
            *(float64_t *)(v2332 + 8 * v2290) = v887.f64[0];
          }
        }
        ++v889;
      }
      while (v889 != v2321);
    }
    *(_QWORD *)(v2236 + 24) |= 1uLL;
    *(_QWORD *)(v2233 + 24) |= 1uLL;
    *(_QWORD *)(v2231 + 24) |= 1uLL;
    *(_QWORD *)(v2232 + 24) |= 1uLL;
    *(_QWORD *)(v2235 + 24) |= 1uLL;
    *(_QWORD *)(v2243 + 24) |= 1uLL;
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2251 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a33 + 24) |= 1uLL;
    *(_QWORD *)(a31 + 24) |= 1uLL;
    *(_QWORD *)(a27 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a16 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v592 = v2196;
    v852 = v2203;
    v853 = v2200;
    v851 = v2193;
  }
  v1111 = STACK[0xB70];
  v2601 = STACK[0xB70];
  if ((**(_BYTE **)(v592 + 16) & 1) != 0)
  {
    v1112 = *(int **)(v2224 + 16);
    v1113 = _gc_buffer_get_extent();
    v1114 = _gc_buffer_get_extent();
    v1115 = _gc_buffer_get_extent();
    if (v1113 != 4 || v1114 != v1115)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v853 + 24) |= 1uLL;
    }
    v2588 = *(float64x2_t **)(v853 + 16);
    v1116 = _gc_buffer_get_extent();
    v1117 = _gc_buffer_get_extent();
    v1118 = _gc_buffer_get_extent();
    v1119 = _gc_buffer_get_extent();
    if (v1116 != 4 || v1117 != 4 || v1118 != v1119)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v852 + 24) |= 1uLL;
    }
    v1120 = *(_QWORD *)(v852 + 16);
    v1121 = *(_QWORD *)(a8 + 16);
    v1122 = *(int **)(v2205 + 16);
    v1123 = *(_QWORD *)(a41 + 16);
    v1124 = *(_QWORD *)(a42 + 16);
    v1125 = *(_QWORD *)(v2237 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v853 = v2200;
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v1126 = v2198;
    if ((int)v2198 >= 1)
    {
      v1127 = v2588 + 1;
      do
      {
        v1128 = *v1112;
        if (v1128 >> 30 != 3)
        {
          v1129 = (float64x2_t *)(v1125 + 32 * *(int *)(v1121 + 4 * v1128));
          v1130 = (float64x2_t *)(v1120 + ((uint64_t)*v1122 << 7));
          v1131 = *v1130;
          v1132 = v1130[1];
          v1133 = v1130[2];
          v1134 = v1130[3];
          v1136 = v1130[4];
          v1135 = v1130[5];
          v1138 = v1130[6];
          v1137 = v1130[7];
          *(_QWORD *)&v1139.f64[0] = vdupq_laneq_s64((int64x2_t)v1136, 1).u64[0];
          v1139.f64[1] = v1130[6].f64[1];
          v1140 = (float64x2_t)vzip1q_s64((int64x2_t)v1136, (int64x2_t)v1138);
          v1141 = (float64x2_t)vzip1q_s64((int64x2_t)v1135, (int64x2_t)v1137);
          *(_QWORD *)&v1142.f64[0] = vdupq_laneq_s64((int64x2_t)v1135, 1).u64[0];
          v1142.f64[1] = v1130[7].f64[1];
          v1143 = v1127[-1];
          v1144 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1130, (int64x2_t)v1133);
          v1145 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1130, (int64x2_t)v1133);
          v1146 = (float64x2_t)vzip1q_s64((int64x2_t)v1132, (int64x2_t)v1134);
          v1147 = (float64x2_t)vzip2q_s64((int64x2_t)v1132, (int64x2_t)v1134);
          v1148 = vsubq_f64(v1129[1], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1140, v1143.f64[0]), v1139, v1143, 1), v1141, v1127->f64[0]), v1142, *v1127, 1));
          *v1129 = vsubq_f64(*v1129, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1144, v1143.f64[0]), v1145, v1143, 1), v1146, v1127->f64[0]), v1147, *v1127, 1));
          v1129[1] = v1148;
          v1149 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1144, v1131.f64[0]), v1145, v1131, 1), v1146, v1132.f64[0]), v1147, v1132, 1);
          v1150 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1140, v1131.f64[0]), v1139, v1131, 1), v1141, v1132.f64[0]), v1142, v1132, 1);
          v1151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1144, v1133.f64[0]), v1145, v1133, 1), v1146, v1134.f64[0]), v1147, v1134, 1);
          v1152 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1140, v1133.f64[0]), v1139, v1133, 1), v1141, v1134.f64[0]), v1142, v1134, 1);
          v1153 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1144, v1136.f64[0]), v1145, v1136, 1), v1146, v1135.f64[0]), v1147, v1135, 1);
          v1154 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1140, v1136.f64[0]), v1139, v1136, 1), v1141, v1135.f64[0]), v1142, v1135, 1);
          v1155 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1144, v1138.f64[0]), v1145, v1138, 1), v1146, v1137.f64[0]), v1147, v1137, 1);
          v1156 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1140, v1138.f64[0]), v1139, v1138, 1), v1141, v1137.f64[0]), v1142, v1137, 1);
          v1157 = (float64x2_t *)(v1123 + ((uint64_t)((int)v1128 + *(_DWORD *)(v1124 + 4) * (int)v1128) << 7));
          v1158 = v1157[6];
          v1159 = vaddq_f64(v1150, v1157[1]);
          v1160 = vaddq_f64(v1151, v1157[2]);
          v1161 = vaddq_f64(v1152, v1157[3]);
          v1162 = vaddq_f64(v1153, v1157[4]);
          v1163 = vaddq_f64(v1154, v1157[5]);
          v1164 = vaddq_f64(v1156, v1157[7]);
          *v1157 = vaddq_f64(v1149, *v1157);
          v1157[1] = v1159;
          v1157[2] = v1160;
          v1157[3] = v1161;
          v1157[4] = v1162;
          v1157[5] = v1163;
          v1157[6] = vaddq_f64(v1155, v1158);
          v1157[7] = v1164;
        }
        v1127 += 2;
        ++v1122;
        v1112 += 2;
        --v1126;
      }
      while (v1126);
    }
    *(_QWORD *)(v2237 + 24) |= 1uLL;
    *(_QWORD *)(a41 + 24) |= 1uLL;
    v852 = v2203;
    v851 = v2193;
    v1111 = v2601;
  }
  v1165 = STACK[0xB78];
  v2389 = STACK[0xA00];
  v2384 = STACK[0x9E8];
  v2380 = STACK[0x9D0];
  v2374 = STACK[0x9B8];
  v1166 = STACK[0x9A8];
  v1167 = STACK[0x9A0];
  v1168 = STACK[0x998];
  v1169 = STACK[0x990];
  v2394 = STACK[0x978];
  v1170 = STACK[0x970];
  v2342 = STACK[0x9A8];
  v2338 = STACK[0x9A0];
  v2333 = STACK[0x998];
  v2368 = STACK[0x990];
  v2362 = STACK[0x970];
  v2318 = STACK[0xB78];
  if ((**(_BYTE **)(v851 + 16) & 1) != 0)
  {
    v1171 = *(int **)(v2224 + 16);
    v1172 = _gc_buffer_get_extent();
    v1173 = _gc_buffer_get_extent();
    v1174 = _gc_buffer_get_extent();
    if (v1172 != 4 || v1173 != v1174)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v853 + 24) |= 1uLL;
    }
    v2589 = *(float64x2_t **)(v853 + 16);
    v1175 = _gc_buffer_get_extent();
    v1176 = _gc_buffer_get_extent();
    v1177 = _gc_buffer_get_extent();
    v1178 = _gc_buffer_get_extent();
    if (v1175 != 4 || v1176 != 4 || v1177 != v1178)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v852 + 24) |= 1uLL;
    }
    v1179 = *(_QWORD *)(v852 + 16);
    v1180 = *(int **)(v2205 + 16);
    v1181 = *(_QWORD *)(a41 + 16);
    v1182 = *(_QWORD *)(a42 + 16);
    v1183 = *(_QWORD *)(v2237 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v1184 = v2198;
    v1166 = v2342;
    if ((int)v2198 >= 1)
    {
      v1185 = v2589 + 1;
      do
      {
        v1186 = *v1171;
        v1187 = (float64x2_t *)(v1183 + 32 * v1186);
        v1188 = (float64x2_t *)(v1179 + ((uint64_t)*v1180 << 7));
        v1190 = *v1188;
        v1189 = v1188[1];
        v1192 = v1188[2];
        v1191 = v1188[3];
        v1194 = v1188[4];
        v1193 = v1188[5];
        v1196 = v1188[6];
        v1195 = v1188[7];
        v1197 = (float64x2_t)vzip1q_s64((int64x2_t)v1194, (int64x2_t)v1196);
        *(_QWORD *)&v1198.f64[0] = vdupq_laneq_s64((int64x2_t)v1194, 1).u64[0];
        v1198.f64[1] = v1188[6].f64[1];
        v1199 = (float64x2_t)vzip1q_s64((int64x2_t)v1193, (int64x2_t)v1195);
        *(_QWORD *)&v1200.f64[0] = vdupq_laneq_s64((int64x2_t)v1193, 1).u64[0];
        v1200.f64[1] = v1188[7].f64[1];
        v1201 = v1185[-1];
        v1202 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1188, (int64x2_t)v1192);
        v1203 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1188, (int64x2_t)v1192);
        v1204 = (float64x2_t)vzip1q_s64((int64x2_t)v1189, (int64x2_t)v1191);
        v1205 = (float64x2_t)vzip2q_s64((int64x2_t)v1189, (int64x2_t)v1191);
        v1206 = vsubq_f64(v1187[1], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1197, v1201.f64[0]), v1198, v1201, 1), v1199, v1185->f64[0]), v1200, *v1185, 1));
        *v1187 = vsubq_f64(*v1187, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1202, v1201.f64[0]), v1203, v1201, 1), v1204, v1185->f64[0]), v1205, *v1185, 1));
        v1187[1] = v1206;
        if (v1186 >> 30 != 3)
        {
          v1207 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1202, v1190.f64[0]), v1203, v1190, 1), v1204, v1189.f64[0]), v1205, v1189, 1);
          v1208 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1197, v1190.f64[0]), v1198, v1190, 1), v1199, v1189.f64[0]), v1200, v1189, 1);
          v1209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1202, v1192.f64[0]), v1203, v1192, 1), v1204, v1191.f64[0]), v1205, v1191, 1);
          v1210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1197, v1192.f64[0]), v1198, v1192, 1), v1199, v1191.f64[0]), v1200, v1191, 1);
          v1211 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1202, v1194.f64[0]), v1203, v1194, 1), v1204, v1193.f64[0]), v1205, v1193, 1);
          v1212 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1197, v1194.f64[0]), v1198, v1194, 1), v1199, v1193.f64[0]), v1200, v1193, 1);
          v1213 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1202, v1196.f64[0]), v1203, v1196, 1), v1204, v1195.f64[0]), v1205, v1195, 1);
          v1214 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1197, v1196.f64[0]), v1198, v1196, 1), v1199, v1195.f64[0]), v1200, v1195, 1);
          v1215 = (float64x2_t *)(v1181 + ((uint64_t)((int)v1186 + *(_DWORD *)(v1182 + 4) * (int)v1186) << 7));
          v1216 = v1215[6];
          v1217 = vaddq_f64(v1208, v1215[1]);
          v1218 = vaddq_f64(v1209, v1215[2]);
          v1219 = vaddq_f64(v1210, v1215[3]);
          v1220 = vaddq_f64(v1211, v1215[4]);
          v1221 = vaddq_f64(v1212, v1215[5]);
          v1222 = vaddq_f64(v1214, v1215[7]);
          *v1215 = vaddq_f64(v1207, *v1215);
          v1215[1] = v1217;
          v1215[2] = v1218;
          v1215[3] = v1219;
          v1215[4] = v1220;
          v1215[5] = v1221;
          v1215[6] = vaddq_f64(v1213, v1216);
          v1215[7] = v1222;
        }
        v1185 += 2;
        ++v1180;
        v1171 += 2;
        --v1184;
      }
      while (v1184);
    }
    *(_QWORD *)(v2237 + 24) |= 1uLL;
    *(_QWORD *)(a41 + 24) |= 1uLL;
    v1167 = v2338;
    v1168 = v2333;
    v1169 = v2368;
    v1170 = v2362;
    v1165 = v2318;
    v1111 = v2601;
  }
  v1223 = STACK[0xB80];
  v2327 = STACK[0xB80];
  if ((**(_BYTE **)(v1111 + 16) & 1) != 0)
  {
    v1224 = *(_QWORD *)(v2394 + 16);
    v1225 = _gc_buffer_get_extent();
    v1226 = _gc_buffer_get_extent();
    v1227 = _gc_buffer_get_extent();
    if (v1225 != 2 || v1226 != v1227)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v1170 + 24) |= 1uLL;
    }
    v1228 = *(_QWORD *)(v1170 + 16);
    v1229 = _gc_buffer_get_extent();
    v1230 = _gc_buffer_get_extent();
    v1231 = _gc_buffer_get_extent();
    v1232 = _gc_buffer_get_extent();
    if (v1229 != 2 || v1230 != 1 || v1231 != v1232)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1169 + 24) |= 1uLL;
    }
    v2313 = *(_QWORD *)(v1169 + 16);
    v1233 = _gc_buffer_get_extent();
    v1234 = _gc_buffer_get_extent();
    v1235 = _gc_buffer_get_extent();
    v1236 = _gc_buffer_get_extent();
    if (v1233 != 2 || v1234 != 4 || v1235 != v1236)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1168 + 24) |= 1uLL;
    }
    v2307 = *(_QWORD *)(v1168 + 16);
    v1237 = _gc_buffer_get_extent();
    v1238 = _gc_buffer_get_extent();
    v1239 = _gc_buffer_get_extent();
    v1240 = _gc_buffer_get_extent();
    if (v1237 != 2 || v1238 != 6 || v1239 != v1240)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1167 + 24) |= 1uLL;
    }
    v2301 = *(_QWORD *)(v1167 + 16);
    v1241 = _gc_buffer_get_extent();
    v1242 = _gc_buffer_get_extent();
    v1243 = _gc_buffer_get_extent();
    v1244 = _gc_buffer_get_extent();
    if (v1241 != 2 || v1242 != 2 || v1243 != v1244)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1166 + 24) |= 1uLL;
    }
    v2298 = *(_QWORD *)(v1166 + 16);
    v2602 = *(_QWORD *)(a6 + 16);
    v2590 = *(_QWORD *)(a8 + 16);
    v2579 = *(_QWORD *)(a9 + 16);
    v2295 = *(_QWORD *)(a10 + 16);
    v1245 = *(int **)(v2374 + 16);
    v1246 = *(int **)(v2380 + 16);
    v1247 = *(int **)(v2384 + 16);
    v1248 = *(int **)(v2389 + 16);
    v2570 = *(_QWORD *)(a14 + 16);
    v2562 = *(_QWORD *)(a15 + 16);
    v2471 = *(_QWORD *)(a18 + 16);
    v2463 = *(_QWORD *)(a19 + 16);
    v2455 = *(_QWORD *)(a20 + 16);
    v2447 = *(_QWORD *)(a21 + 16);
    v2439 = *(_QWORD *)(a22 + 16);
    v2431 = *(_QWORD *)(a23 + 16);
    v2555 = *(_QWORD *)(a41 + 16);
    v2546 = *(_QWORD *)(a42 + 16);
    v2423 = *(_QWORD *)(a43 + 16);
    v2415 = *(_QWORD *)(a44 + 16);
    v2288 = *(_QWORD *)(a45 + 16);
    v2291 = *(_QWORD *)(a46 + 16);
    v2536 = *(_QWORD *)(a56 + 16);
    v2527 = *(_QWORD *)(a57 + 16);
    v2408 = *(_QWORD *)(a58 + 16);
    v2401 = *(_QWORD *)(a59 + 16);
    v2519 = *(_QWORD *)(a66 + 16);
    v2511 = *(_QWORD *)(v2238 + 16);
    v2503 = *(_QWORD *)(v2240 + 16);
    v2495 = *(_QWORD *)(v2237 + 16);
    v2487 = *(_QWORD *)(v2239 + 16);
    v2479 = *(_QWORD *)(v2241 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    v1166 = v2342;
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v1168 = v2333;
    halide_copy_to_host();
    v1167 = v2338;
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v2189 >= 1)
    {
      v1249 = 0;
      v1250 = 0;
      v1251 = (int *)(v1224 + 20);
      do
      {
        v1261 = 6 * v1250;
        v1262 = *(v1251 - 5);
        if (v1262 >> 30 == 3)
        {
          v1275 = *(int *)(v1224 + 4 * (v1261 | 1));
          if (v1275 >> 30 == 3)
            goto LABEL_290;
          goto LABEL_284;
        }
        v1263 = 8 * *(int *)(v2602 + 4 * v1262);
        _Q1 = *(int8x16_t *)(v2313 + 16 * *v1245);
        _D0 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
        _D3 = *(_QWORD *)(v1228 + 8);
        __asm { FMLA            D4, D3, V1.D[1] }
        *(double *)(v2503 + v1263) = *(double *)(v2503 + v1263) - _D4;
        _D3 = _Q1.i64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v1270 = 8 * ((int)v1262 + *(_DWORD *)(v2562 + 4) * (int)v1262);
        *(double *)(v2570 + v1270) = _D2 + *(double *)(v2570 + v1270);
        v1271 = *(v1251 - 4);
        if (v1271 >> 30 == 3)
        {
          v1272 = *(v1251 - 1);
          if (v1272 >> 30 != 3)
            goto LABEL_294;
        }
        else
        {
          v1372 = (__int128 *)(v2307 + ((uint64_t)*v1246 << 6));
          _Q2 = *v1372;
          _Q3 = v1372[1];
          _Q4 = v1372[2];
          _Q5 = v1372[3];
          __asm
          {
            FMLA            D6, D0, V2.D[1]
            FMLA            D2, D0, V3.D[1]
            FMLA            D3, D0, V4.D[1]
            FMLA            D4, D0, V5.D[1]
          }
          v1378 = (double *)(v2471 + 32 * (int)(v1271 + *(_DWORD *)(v2463 + 4) * v1262));
          *(double *)&v1379 = _D6 + *v1378;
          *(double *)&_Q3 = *(double *)&_Q3 + v1378[2];
          *((double *)&v1379 + 1) = *(double *)&_Q2 + v1378[1];
          *((double *)&_Q3 + 1) = *(double *)&_Q4 + v1378[3];
          *(_OWORD *)v1378 = v1379;
          *((_OWORD *)v1378 + 1) = _Q3;
          v1272 = *(v1251 - 1);
          if (v1272 >> 30 != 3)
          {
LABEL_294:
            v1380 = (__int128 *)(v2301 + 96 * *v1247);
            _Q2 = *v1380;
            _Q3 = v1380[1];
            _Q4 = v1380[2];
            _Q5 = v1380[3];
            _Q6 = v1380[4];
            _Q7 = v1380[5];
            __asm
            {
              FMLA            D16, D0, V2.D[1]
              FMLA            D2, D0, V3.D[1]
              FMLA            D3, D0, V4.D[1]
              FMLA            D4, D0, V5.D[1]
              FMLA            D5, D0, V6.D[1]
              FMLA            D6, D0, V7.D[1]
            }
            v1388 = (double *)(v2455 + 48 * (int)(v1272 + *(_DWORD *)(v2447 + 4) * v1262));
            *(double *)&v1389 = _D16 + *v1388;
            *(double *)&_Q3 = *(double *)&_Q3 + v1388[2];
            *(double *)&_Q5 = *(double *)&_Q5 + v1388[4];
            *((double *)&v1389 + 1) = *(double *)&_Q2 + v1388[1];
            *((double *)&_Q3 + 1) = *(double *)&_Q4 + v1388[3];
            *((double *)&_Q5 + 1) = *(double *)&_Q6 + v1388[5];
            *(_OWORD *)v1388 = v1389;
            *((_OWORD *)v1388 + 1) = _Q3;
            *((_OWORD *)v1388 + 2) = _Q5;
            v1273 = v1249 + 1;
            v1274 = *v1251;
            if (*v1251 >> 30 == 3)
            {
LABEL_283:
              v1275 = *(int *)(v1224 + 4 * v1273);
              if (v1275 >> 30 == 3)
                goto LABEL_290;
              goto LABEL_284;
            }
            goto LABEL_295;
          }
        }
        v1273 = v1249 + 1;
        v1274 = *v1251;
        if (*v1251 >> 30 == 3)
          goto LABEL_283;
LABEL_295:
        v1390 = (__int128 *)(v2298 + 32 * *v1248);
        _Q2 = *v1390;
        _Q3 = v1390[1];
        __asm
        {
          FMLA            D4, D0, V2.D[1]
          FMLA            D1, D0, V3.D[1]
        }
        v1395 = (double *)(v2439 + 16 * (v1274 + *(_DWORD *)(v2431 + 4) * (int)v1262));
        v1396 = _D1 + v1395[1];
        *v1395 = _D4 + *v1395;
        v1395[1] = v1396;
        v1275 = *(int *)(v1224 + 4 * v1273);
        if (v1275 >> 30 == 3)
        {
LABEL_290:
          v1306 = *(int *)(v1224 + 4 * (v1261 + 4));
          if (v1306 >> 30 == 3)
            goto LABEL_291;
          goto LABEL_287;
        }
LABEL_284:
        v1276 = (float64x2_t *)(v2495 + 32 * *(int *)(v2590 + 4 * v1275));
        v1277 = (float64x2_t *)(v2307 + ((uint64_t)*v1246 << 6));
        v1278 = *v1277;
        v1279 = v1277[1];
        v1280 = v1277[2];
        v1281 = v1277[3];
        v1282 = (float64x2_t)vzip1q_s64((int64x2_t)v1280, (int64x2_t)v1281);
        *(_QWORD *)&v1283.f64[0] = vdupq_laneq_s64((int64x2_t)v1280, 1).u64[0];
        v1283.f64[1] = v1277[3].f64[1];
        v1284 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1277, (int64x2_t)v1279);
        v1285 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1277, (int64x2_t)v1279);
        v1286 = vsubq_f64(v1276[1], vmlaq_laneq_f64(vmulq_n_f64(v1282, *(double *)v1228), v1283, *(float64x2_t *)v1228, 1));
        *v1276 = vsubq_f64(*v1276, vmlaq_laneq_f64(vmulq_n_f64(v1284, *(double *)v1228), v1285, *(float64x2_t *)v1228, 1));
        v1276[1] = v1286;
        v1287 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1278.f64[0]), v1285, v1278, 1);
        v1288 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1278.f64[0]), v1283, v1278, 1);
        v1289 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1279.f64[0]), v1285, v1279, 1);
        v1290 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1279.f64[0]), v1283, v1279, 1);
        v1291 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1280.f64[0]), v1285, v1280, 1);
        v1292 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1280.f64[0]), v1283, v1280, 1);
        v1293 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1281.f64[0]), v1285, v1281, 1);
        v1294 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1281.f64[0]), v1283, v1281, 1);
        v1295 = (float64x2_t *)(v2555 + ((uint64_t)((int)v1275 + *(_DWORD *)(v2546 + 4) * (int)v1275) << 7));
        v1296 = vaddq_f64(v1288, v1295[1]);
        v1297 = vaddq_f64(v1289, v1295[2]);
        v1298 = vaddq_f64(v1290, v1295[3]);
        v1299 = vaddq_f64(v1291, v1295[4]);
        v1300 = vaddq_f64(v1292, v1295[5]);
        v1301 = vaddq_f64(v1294, v1295[7]);
        v1302 = vaddq_f64(v1293, v1295[6]);
        *v1295 = vaddq_f64(v1287, *v1295);
        v1295[1] = v1296;
        v1295[2] = v1297;
        v1295[3] = v1298;
        v1295[4] = v1299;
        v1295[5] = v1300;
        v1295[6] = v1302;
        v1295[7] = v1301;
        v1303 = *(v1251 - 1);
        if (v1303 >> 30 == 3)
        {
          v1304 = v1249 + 4;
          v1305 = *v1251;
          if (*v1251 >> 30 == 3)
            goto LABEL_286;
        }
        else
        {
          v1397 = (float64x2_t *)(v2301 + 96 * *v1247);
          v1398 = v1397[1];
          v1399 = v1397[2];
          v1400 = v1397[3];
          v1401 = v1397[4];
          v1402 = v1397[5];
          v1403 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1398.f64[0]), v1285, v1398, 1);
          v1404 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1398.f64[0]), v1283, v1398, 1);
          v1405 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1399.f64[0]), v1285, v1399, 1);
          v1406 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1399.f64[0]), v1283, v1399, 1);
          v1407 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1400.f64[0]), v1285, v1400, 1);
          v1408 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1400.f64[0]), v1283, v1400, 1);
          v1409 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1401.f64[0]), v1285, v1401, 1);
          v1410 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1401.f64[0]), v1283, v1401, 1);
          v1411 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1402.f64[0]), v1285, v1402, 1);
          v1412 = (float64x2_t *)(v2423 + 192 * (int)(v1303 + *(_DWORD *)(v2415 + 4) * v1275));
          v1413 = vmlaq_laneq_f64(vmulq_n_f64(v1282, v1402.f64[0]), v1283, v1402, 1);
          v66 = v1412[8];
          v1414 = v1412[9];
          v1415 = v1412[10];
          v1416 = v1412[11];
          v1417 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1282, v1397->f64[0]), v1283, *v1397, 1), v1412[1]);
          v1418 = vaddq_f64(v1403, v1412[2]);
          v1419 = vaddq_f64(v1404, v1412[3]);
          v1420 = vaddq_f64(v1405, v1412[4]);
          v1421 = vaddq_f64(v1406, v1412[5]);
          v1422 = vaddq_f64(v1407, v1412[6]);
          v1423 = vaddq_f64(v1408, v1412[7]);
          *v1412 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1284, v1397->f64[0]), v1285, *v1397, 1), *v1412);
          v1412[1] = v1417;
          v1412[2] = v1418;
          v1412[3] = v1419;
          v1412[4] = v1420;
          v1412[5] = v1421;
          v1412[6] = v1422;
          v1412[7] = v1423;
          v1412[8] = vaddq_f64(v1409, v66);
          v1412[9] = vaddq_f64(v1410, v1414);
          v1412[10] = vaddq_f64(v1411, v1415);
          v1412[11] = vaddq_f64(v1413, v1416);
          v1304 = v1249 + 4;
          v1305 = *v1251;
          if (*v1251 >> 30 == 3)
          {
LABEL_286:
            v1306 = *(int *)(v1224 + 4 * v1304);
            if (v1306 >> 30 == 3)
              goto LABEL_291;
            goto LABEL_287;
          }
        }
        v1424 = (float64x2_t *)(v2298 + 32 * *v1248);
        v1425 = v1424[1];
        v1426 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1424->f64[0]), v1285, *v1424, 1);
        v1427 = vmlaq_laneq_f64(vmulq_n_f64(v1284, v1425.f64[0]), v1285, v1425, 1);
        v1428 = (float64x2_t *)(v2288 + ((uint64_t)(v1305 + *(_DWORD *)(v2291 + 4) * (int)v1275) << 6));
        v1429 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1282, v1424->f64[0]), v1283, *v1424, 1), v1428[1]);
        v1430 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1282, v1425.f64[0]), v1283, v1425, 1), v1428[3]);
        v1431 = vaddq_f64(v1427, v1428[2]);
        *v1428 = vaddq_f64(v1426, *v1428);
        v1428[1] = v1429;
        v1428[2] = v1431;
        v1428[3] = v1430;
        v1306 = *(int *)(v1224 + 4 * v1304);
        if (v1306 >> 30 == 3)
        {
LABEL_291:
          v1358 = *v1251;
          if (*v1251 >> 30 == 3)
            goto LABEL_278;
          goto LABEL_277;
        }
LABEL_287:
        v1307 = (float64x2_t *)(v2487 + 48 * *(int *)(v2579 + 4 * v1306));
        v1308 = (float64x2_t *)(v2301 + 96 * *v1247);
        v1309 = *v1308;
        v1310 = v1308[1];
        v1311 = v1308[2];
        v1312 = v1308[3];
        v1314 = v1308[4];
        v1313 = v1308[5];
        v1315 = (float64x2_t)vzip1q_s64((int64x2_t)v1311, (int64x2_t)v1312);
        *(_QWORD *)&v1316.f64[0] = vdupq_laneq_s64((int64x2_t)v1311, 1).u64[0];
        v1316.f64[1] = v1308[3].f64[1];
        *(_QWORD *)&v1318.f64[0] = vdupq_laneq_s64((int64x2_t)v1314, 1).u64[0];
        v1317 = (float64x2_t)vzip1q_s64((int64x2_t)v1314, (int64x2_t)v1313);
        v1318.f64[1] = v1308[5].f64[1];
        v1319 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1308, (int64x2_t)v1310);
        v1320 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1308, (int64x2_t)v1310);
        v1321 = vsubq_f64(v1307[2], vmlaq_laneq_f64(vmulq_n_f64(v1317, *(double *)v1228), v1318, *(float64x2_t *)v1228, 1));
        v1322 = vsubq_f64(v1307[1], vmlaq_laneq_f64(vmulq_n_f64(v1315, *(double *)v1228), v1316, *(float64x2_t *)v1228, 1));
        *v1307 = vsubq_f64(*v1307, vmlaq_laneq_f64(vmulq_n_f64(v1319, *(double *)v1228), v1320, *(float64x2_t *)v1228, 1));
        v1307[1] = v1322;
        v1307[2] = v1321;
        v1323 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1309.f64[0]), v1320, v1309, 1);
        v1324 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1309.f64[0]), v1316, v1309, 1);
        v1325 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1309.f64[0]), v1318, v1309, 1);
        v1326 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1310.f64[0]), v1320, v1310, 1);
        v1327 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1310.f64[0]), v1316, v1310, 1);
        v1328 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1310.f64[0]), v1318, v1310, 1);
        v1329 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1311.f64[0]), v1320, v1311, 1);
        v1330 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1311.f64[0]), v1316, v1311, 1);
        v1331 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1311.f64[0]), v1318, v1311, 1);
        v1332 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1312.f64[0]), v1320, v1312, 1);
        v1333 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1312.f64[0]), v1316, v1312, 1);
        v1334 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1312.f64[0]), v1318, v1312, 1);
        v1335 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1314.f64[0]), v1320, v1314, 1);
        v1336 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1314.f64[0]), v1316, v1314, 1);
        v1337 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1314.f64[0]), v1318, v1314, 1);
        v1338 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1313.f64[0]), v1320, v1313, 1);
        v1339 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1313.f64[0]), v1316, v1313, 1);
        v66 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1313.f64[0]), v1318, v1313, 1);
        v1340 = (float64x2_t *)(v2536 + 288 * ((int)v1306 + *(_DWORD *)(v2527 + 4) * (int)v1306));
        v1341 = vaddq_f64(v1325, v1340[2]);
        v1342 = vaddq_f64(v1324, v1340[1]);
        v1343 = vaddq_f64(v1328, v1340[5]);
        v1344 = vaddq_f64(v1327, v1340[4]);
        v1345 = vaddq_f64(v1326, v1340[3]);
        v1346 = vaddq_f64(v1331, v1340[8]);
        v1347 = vaddq_f64(v1330, v1340[7]);
        v1348 = vaddq_f64(v1329, v1340[6]);
        v1349 = vaddq_f64(v1334, v1340[11]);
        v1350 = vaddq_f64(v1333, v1340[10]);
        v1351 = vaddq_f64(v1332, v1340[9]);
        v1352 = v1340[15];
        v1353 = vaddq_f64(v1337, v1340[14]);
        v1354 = vaddq_f64(v1336, v1340[13]);
        v1355 = vaddq_f64(v1335, v1340[12]);
        v1356 = vaddq_f64(v66, v1340[17]);
        *v1340 = vaddq_f64(v1323, *v1340);
        v1340[1] = v1342;
        v1340[2] = v1341;
        v1340[3] = v1345;
        v1340[4] = v1344;
        v1340[5] = v1343;
        v1357 = vaddq_f64(v1339, v1340[16]);
        v1340[6] = v1348;
        v1340[7] = v1347;
        v1340[8] = v1346;
        v1340[9] = v1351;
        v1340[10] = v1350;
        v1340[11] = v1349;
        v1340[12] = v1355;
        v1340[13] = v1354;
        v1340[14] = v1353;
        v1340[15] = vaddq_f64(v1338, v1352);
        v1340[16] = v1357;
        v1340[17] = v1356;
        v1358 = *v1251;
        if (*v1251 >> 30 == 3)
          goto LABEL_278;
        v1359 = (float64x2_t *)(v2298 + 32 * *v1248);
        v1360 = v1359[1];
        v1361 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1359->f64[0]), v1320, *v1359, 1);
        v1362 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1359->f64[0]), v1316, *v1359, 1);
        v1363 = vmlaq_laneq_f64(vmulq_n_f64(v1319, v1360.f64[0]), v1320, v1360, 1);
        v1364 = vmlaq_laneq_f64(vmulq_n_f64(v1315, v1360.f64[0]), v1316, v1360, 1);
        v1365 = vmlaq_laneq_f64(vmulq_n_f64(v1317, v1360.f64[0]), v1318, v1360, 1);
        v1366 = (float64x2_t *)(v2408 + 96 * (v1358 + *(_DWORD *)(v2401 + 4) * (int)v1306));
        v1367 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1317, v1359->f64[0]), v1318, *v1359, 1), v1366[2]);
        v1368 = vaddq_f64(v1362, v1366[1]);
        v1369 = vaddq_f64(v1365, v1366[5]);
        v1370 = vaddq_f64(v1364, v1366[4]);
        v1371 = vaddq_f64(v1363, v1366[3]);
        *v1366 = vaddq_f64(v1361, *v1366);
        v1366[1] = v1368;
        v1366[2] = v1367;
        v1366[3] = v1371;
        v1366[4] = v1370;
        v1366[5] = v1369;
LABEL_277:
        v1252 = 16 * *(int *)(v2295 + 4 * v1358);
        v1253 = (float64x2_t *)(v2298 + 32 * *v1248);
        v1254 = *v1253;
        v1255 = v1253[1];
        v1256 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1253, (int64x2_t)v1255);
        v1257 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1253, (int64x2_t)v1255);
        *(float64x2_t *)(v2479 + v1252) = vsubq_f64(*(float64x2_t *)(v2479 + v1252), vmlaq_laneq_f64(vmulq_n_f64(v1256, *(double *)v1228), v1257, *(float64x2_t *)v1228, 1));
        v1258 = (float64x2_t *)(v2519 + 32 * (v1358 + *(_DWORD *)(v2511 + 4) * v1358));
        v1259 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1256, v1254.f64[0]), v1257, v1254, 1), *v1258);
        v1260 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1256, v1255.f64[0]), v1257, v1255, 1), v1258[1]);
        *v1258 = v1259;
        v1258[1] = v1260;
LABEL_278:
        ++v1250;
        v1249 += 6;
        v1228 += 16;
        ++v1248;
        ++v1247;
        ++v1246;
        ++v1245;
        v1251 += 6;
      }
      while (6 * v2189 != v1249);
    }
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2237 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a18 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a45 + 24) |= 1uLL;
    *(_QWORD *)(a43 + 24) |= 1uLL;
    *(_QWORD *)(a41 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v1223 = v2327;
    v1169 = v2368;
    v1170 = v2362;
    v1165 = v2318;
  }
  v1432 = STACK[0xB88];
  v2211 = STACK[0xAE8];
  v2213 = STACK[0xAE0];
  v2215 = STACK[0xAD8];
  v2217 = STACK[0xAD0];
  v2201 = STACK[0xAC0];
  v2199 = STACK[0xAA8];
  v2197 = STACK[0xA90];
  v2195 = STACK[0xA78];
  v2194 = STACK[0xA68];
  v2208 = STACK[0xA58];
  v1433 = STACK[0xA50];
  v2225 = STACK[0xA48];
  v2221 = STACK[0xA40];
  v2219 = STACK[0xA38];
  v2223 = STACK[0xA30];
  v2206 = STACK[0xA18];
  v1434 = STACK[0xA10];
  v2191 = STACK[0xA10];
  v2192 = STACK[0xA50];
  v2258 = STACK[0xB88];
  if ((**(_BYTE **)(v1165 + 16) & 1) != 0)
  {
    v2432 = *(_QWORD *)(v2394 + 16);
    v1435 = _gc_buffer_get_extent();
    v1436 = _gc_buffer_get_extent();
    v1437 = _gc_buffer_get_extent();
    if (v1435 != 2 || v1436 != v1437)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v1170 + 24) |= 1uLL;
    }
    v1438 = *(_QWORD *)(v1170 + 16);
    v1439 = _gc_buffer_get_extent();
    v1440 = _gc_buffer_get_extent();
    v1441 = _gc_buffer_get_extent();
    v1442 = _gc_buffer_get_extent();
    if (v1439 != 2 || v1440 != 1 || v1441 != v1442)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1169 + 24) |= 1uLL;
    }
    v2448 = *(_QWORD *)(v1169 + 16);
    v1443 = _gc_buffer_get_extent();
    v1444 = _gc_buffer_get_extent();
    v1445 = _gc_buffer_get_extent();
    v1446 = _gc_buffer_get_extent();
    if (v1443 != 2 || v1444 != 4 || v1445 != v1446)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1168 + 24) |= 1uLL;
    }
    v2440 = *(_QWORD *)(v1168 + 16);
    v1447 = _gc_buffer_get_extent();
    v1448 = _gc_buffer_get_extent();
    v1449 = _gc_buffer_get_extent();
    v1450 = _gc_buffer_get_extent();
    if (v1447 != 2 || v1448 != 6 || v1449 != v1450)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1167 + 24) |= 1uLL;
    }
    v1451 = *(_QWORD *)(v1167 + 16);
    v1452 = _gc_buffer_get_extent();
    v1453 = _gc_buffer_get_extent();
    v1454 = _gc_buffer_get_extent();
    v1455 = _gc_buffer_get_extent();
    if (v1452 != 2 || v1453 != 2 || v1454 != v1455)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1166 + 24) |= 1uLL;
    }
    v1456 = *(_QWORD *)(v1166 + 16);
    v1457 = *(int **)(v2374 + 16);
    v1458 = *(int **)(v2380 + 16);
    v1459 = *(int **)(v2384 + 16);
    v1460 = *(int **)(v2389 + 16);
    v2424 = *(_QWORD *)(a14 + 16);
    v2416 = *(_QWORD *)(a15 + 16);
    v2402 = *(_QWORD *)(a18 + 16);
    v2409 = *(_QWORD *)(a19 + 16);
    v2580 = *(_QWORD *)(a20 + 16);
    v2571 = *(_QWORD *)(a21 + 16);
    v2563 = *(_QWORD *)(a22 + 16);
    v2556 = *(_QWORD *)(a23 + 16);
    v2547 = *(_QWORD *)(a41 + 16);
    v2537 = *(_QWORD *)(a42 + 16);
    v2528 = *(_QWORD *)(a43 + 16);
    v2520 = *(_QWORD *)(a44 + 16);
    v2512 = *(_QWORD *)(a45 + 16);
    v2504 = *(_QWORD *)(a46 + 16);
    v2496 = *(_QWORD *)(a56 + 16);
    v2488 = *(_QWORD *)(a57 + 16);
    v2480 = *(_QWORD *)(a58 + 16);
    v2472 = *(_QWORD *)(a59 + 16);
    v2464 = *(_QWORD *)(a66 + 16);
    v2456 = *(_QWORD *)(v2238 + 16);
    v1461 = *(_QWORD *)(v2240 + 16);
    v2603 = *(_QWORD *)(v2237 + 16);
    v2591 = *(_QWORD *)(v2239 + 16);
    v1462 = *(_QWORD *)(v2241 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v1463 = v2189;
    if ((int)v2189 >= 1)
    {
      v1464 = (int *)(v2432 + 16);
      do
      {
        v1465 = *(v1464 - 4);
        _Q2 = *(int8x16_t *)(v2448 + 16 * *v1457);
        _D1 = vextq_s8(_Q2, _Q2, 8uLL).u64[0];
        v1468 = *(float64x2_t *)v1438;
        _D5 = *(_QWORD *)(v1438 + 8);
        __asm { FMLA            D4, D5, V2.D[1] }
        *(double *)(v1461 + 8 * v1465) = *(double *)(v1461 + 8 * v1465) - _D4;
        if (v1465 >> 30 == 3)
        {
          v1471 = *(v1464 - 3);
          v1472 = v1471 >> 30;
          if (v1471 >> 30 == 3)
            goto LABEL_326;
        }
        else
        {
          __asm { FMLA            D3, D1, V2.D[1] }
          v1573 = 8 * ((int)v1465 + *(_DWORD *)(v2416 + 4) * (int)v1465);
          *(double *)(v2424 + v1573) = _D3 + *(double *)(v2424 + v1573);
          v1471 = *(v1464 - 3);
          v1472 = v1471 >> 30;
          if (v1471 >> 30 == 3)
          {
LABEL_326:
            v1473 = *v1464;
            v1474 = v1473 >> 30;
            if (v1473 >> 30 == 3)
              goto LABEL_327;
            goto LABEL_339;
          }
        }
        v1574 = (__int128 *)(v2440 + ((uint64_t)*v1458 << 6));
        _Q3 = *v1574;
        _Q4 = v1574[1];
        _Q5 = v1574[2];
        _Q6 = v1574[3];
        __asm
        {
          FMLA            D7, D1, V3.D[1]
          FMLA            D3, D1, V4.D[1]
          FMLA            D4, D1, V5.D[1]
          FMLA            D5, D1, V6.D[1]
        }
        v1580 = (double *)(v2402 + 32 * ((int)v1471 + *(_DWORD *)(v2409 + 4) * (int)v1465));
        *(double *)&v1581 = _D7 + *v1580;
        *(double *)&_Q4 = *(double *)&_Q4 + v1580[2];
        *((double *)&v1581 + 1) = *(double *)&_Q3 + v1580[1];
        *((double *)&_Q4 + 1) = *(double *)&_Q5 + v1580[3];
        *(_OWORD *)v1580 = v1581;
        *((_OWORD *)v1580 + 1) = _Q4;
        v1473 = *v1464;
        v1474 = v1473 >> 30;
        if (v1473 >> 30 == 3)
        {
LABEL_327:
          v1475 = v1464[1];
          v1476 = v1475 >> 30;
          if (v1475 >> 30 == 3)
            goto LABEL_329;
LABEL_328:
          v1477 = (__int128 *)(v1456 + 32 * *v1460);
          _Q3 = *v1477;
          _Q4 = v1477[1];
          __asm
          {
            FMLA            D5, D1, V3.D[1]
            FMLA            D2, D1, V4.D[1]
          }
          v1482 = (double *)(v2563 + 16 * ((int)v1475 + *(_DWORD *)(v2556 + 4) * (int)v1465));
          v1483 = _D2 + v1482[1];
          *v1482 = _D5 + *v1482;
          v1482[1] = v1483;
          goto LABEL_329;
        }
LABEL_339:
        v1582 = (__int128 *)(v1451 + 96 * *v1459);
        _Q3 = *v1582;
        _Q4 = v1582[1];
        _Q5 = v1582[2];
        _Q6 = v1582[3];
        _Q7 = v1582[4];
        _Q16 = v1582[5];
        __asm
        {
          FMLA            D17, D1, V3.D[1]
          FMLA            D3, D1, V4.D[1]
          FMLA            D4, D1, V5.D[1]
          FMLA            D5, D1, V6.D[1]
          FMLA            D6, D1, V7.D[1]
          FMLA            D7, D1, V16.D[1]
        }
        v1590 = (double *)(v2580 + 48 * ((int)v1473 + *(_DWORD *)(v2571 + 4) * (int)v1465));
        *(double *)&v1591 = _D17 + *v1590;
        *(double *)&_Q4 = *(double *)&_Q4 + v1590[2];
        *(double *)&_Q6 = *(double *)&_Q6 + v1590[4];
        *((double *)&v1591 + 1) = *(double *)&_Q3 + v1590[1];
        *((double *)&_Q4 + 1) = *(double *)&_Q5 + v1590[3];
        *((double *)&_Q6 + 1) = *(double *)&_Q7 + v1590[5];
        *(_OWORD *)v1590 = v1591;
        *((_OWORD *)v1590 + 1) = _Q4;
        *((_OWORD *)v1590 + 2) = _Q6;
        v1475 = v1464[1];
        v1476 = v1475 >> 30;
        if (v1475 >> 30 != 3)
          goto LABEL_328;
LABEL_329:
        v1484 = (float64x2_t *)(v2603 + 32 * v1471);
        v1485 = (float64x2_t *)(v2440 + ((uint64_t)*v1458 << 6));
        v1487 = *v1485;
        v1486 = v1485[1];
        v1489 = v1485[2];
        v1488 = v1485[3];
        *(_QWORD *)&v1490.f64[0] = vdupq_laneq_s64((int64x2_t)v1489, 1).u64[0];
        v1490.f64[1] = v1485[3].f64[1];
        v1491 = (float64x2_t)vzip1q_s64((int64x2_t)v1489, (int64x2_t)v1488);
        v1492 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1485, (int64x2_t)v1486);
        v1493 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1485, (int64x2_t)v1486);
        v1494 = vsubq_f64(v1484[1], vmlaq_laneq_f64(vmulq_n_f64(v1491, v1468.f64[0]), v1490, v1468, 1));
        *v1484 = vsubq_f64(*v1484, vmlaq_laneq_f64(vmulq_n_f64(v1492, v1468.f64[0]), v1493, v1468, 1));
        v1484[1] = v1494;
        if (v1472 <= 2)
        {
          v1592 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1487.f64[0]), v1493, v1487, 1);
          v1593 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1487.f64[0]), v1490, v1487, 1);
          v1594 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1486.f64[0]), v1493, v1486, 1);
          v1595 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1486.f64[0]), v1490, v1486, 1);
          v1596 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1489.f64[0]), v1493, v1489, 1);
          v1597 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1489.f64[0]), v1490, v1489, 1);
          v1598 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1488.f64[0]), v1493, v1488, 1);
          v1599 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1488.f64[0]), v1490, v1488, 1);
          v1600 = (float64x2_t *)(v2547 + ((uint64_t)((int)v1471 + *(_DWORD *)(v2537 + 4) * (int)v1471) << 7));
          v1601 = v1600[6];
          v1602 = vaddq_f64(v1592, *v1600);
          v1603 = vaddq_f64(v1593, v1600[1]);
          v1604 = vaddq_f64(v1594, v1600[2]);
          v1605 = vaddq_f64(v1595, v1600[3]);
          v1606 = vaddq_f64(v1596, v1600[4]);
          v1607 = vaddq_f64(v1597, v1600[5]);
          v1608 = vaddq_f64(v1599, v1600[7]);
          *v1600 = v1602;
          v1600[1] = v1603;
          v1600[2] = v1604;
          v1600[3] = v1605;
          v1600[4] = v1606;
          v1600[5] = v1607;
          v1600[6] = vaddq_f64(v1598, v1601);
          v1600[7] = v1608;
          if (v1474 <= 2)
          {
LABEL_342:
            v1609 = (float64x2_t *)(v1451 + 96 * *v1459);
            v1610 = v1609[1];
            v1611 = v1609[2];
            v1612 = v1609[3];
            v1613 = v1609[4];
            v1614 = v1609[5];
            v1615 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1609->f64[0]), v1493, *v1609, 1);
            v1616 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1609->f64[0]), v1490, *v1609, 1);
            v1617 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1610.f64[0]), v1493, v1610, 1);
            v1618 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1610.f64[0]), v1490, v1610, 1);
            v1619 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1611.f64[0]), v1493, v1611, 1);
            v1620 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1611.f64[0]), v1490, v1611, 1);
            v1621 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1612.f64[0]), v1493, v1612, 1);
            v1622 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1612.f64[0]), v1490, v1612, 1);
            v1623 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1613.f64[0]), v1493, v1613, 1);
            v1624 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1613.f64[0]), v1490, v1613, 1);
            v1625 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1614.f64[0]), v1493, v1614, 1);
            v1626 = (float64x2_t *)(v2528 + 192 * ((int)v1473 + *(_DWORD *)(v2520 + 4) * (int)v1471));
            v1627 = vmlaq_laneq_f64(vmulq_n_f64(v1491, v1614.f64[0]), v1490, v1614, 1);
            v66 = v1626[7];
            v1628 = v1626[8];
            v1629 = v1626[9];
            v1630 = v1626[10];
            v1631 = v1626[11];
            v1632 = vaddq_f64(v1616, v1626[1]);
            v1633 = vaddq_f64(v1617, v1626[2]);
            v1634 = vaddq_f64(v1618, v1626[3]);
            v1635 = vaddq_f64(v1619, v1626[4]);
            v1636 = vaddq_f64(v1620, v1626[5]);
            v1637 = vaddq_f64(v1621, v1626[6]);
            *v1626 = vaddq_f64(v1615, *v1626);
            v1626[1] = v1632;
            v1626[2] = v1633;
            v1626[3] = v1634;
            v1626[4] = v1635;
            v1626[5] = v1636;
            v1626[6] = v1637;
            v1626[7] = vaddq_f64(v1622, v66);
            v1626[8] = vaddq_f64(v1623, v1628);
            v1626[9] = vaddq_f64(v1624, v1629);
            v1626[10] = vaddq_f64(v1625, v1630);
            v1626[11] = vaddq_f64(v1627, v1631);
            if (v1476 > 2)
              goto LABEL_333;
LABEL_332:
            v1495 = (float64x2_t *)(v1456 + 32 * *v1460);
            v1496 = v1495[1];
            v1497 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1495->f64[0]), v1493, *v1495, 1);
            v1498 = vmlaq_laneq_f64(vmulq_n_f64(v1492, v1496.f64[0]), v1493, v1496, 1);
            v1499 = (float64x2_t *)(v2512 + ((uint64_t)((int)v1475 + *(_DWORD *)(v2504 + 4) * (int)v1471) << 6));
            v1500 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1491, v1495->f64[0]), v1490, *v1495, 1), v1499[1]);
            v1501 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1491, v1496.f64[0]), v1490, v1496, 1), v1499[3]);
            v1502 = vaddq_f64(v1498, v1499[2]);
            *v1499 = vaddq_f64(v1497, *v1499);
            v1499[1] = v1500;
            v1499[2] = v1502;
            v1499[3] = v1501;
            goto LABEL_333;
          }
        }
        else if (v1474 <= 2)
        {
          goto LABEL_342;
        }
        if (v1476 <= 2)
          goto LABEL_332;
LABEL_333:
        v1503 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1468, 1);
        v1504 = (float64x2_t *)(v2591 + 48 * v1473);
        v1505 = (float64x2_t *)(v1451 + 96 * *v1459);
        v1506 = *v1505;
        v1507 = v1505[1];
        v1509 = v1505[2];
        v1508 = v1505[3];
        v1511 = v1505[4];
        v1510 = v1505[5];
        v1512 = (float64x2_t)vzip1q_s64((int64x2_t)v1509, (int64x2_t)v1508);
        *(_QWORD *)&v1513.f64[0] = vdupq_laneq_s64((int64x2_t)v1509, 1).u64[0];
        v1513.f64[1] = v1505[3].f64[1];
        *(_QWORD *)&v1515.f64[0] = vdupq_laneq_s64((int64x2_t)v1511, 1).u64[0];
        v1514 = (float64x2_t)vzip1q_s64((int64x2_t)v1511, (int64x2_t)v1510);
        v1515.f64[1] = v1505[5].f64[1];
        v1516 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1505, (int64x2_t)v1507);
        v1517 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1505, (int64x2_t)v1507);
        v1518 = vsubq_f64(v1504[2], vmlaq_f64(vmulq_n_f64(v1514, v1468.f64[0]), v1503, v1515));
        v1519 = vsubq_f64(v1504[1], vmlaq_f64(vmulq_n_f64(v1512, v1468.f64[0]), v1503, v1513));
        *v1504 = vsubq_f64(*v1504, vmlaq_f64(vmulq_n_f64(v1516, v1468.f64[0]), v1503, v1517));
        v1504[1] = v1519;
        v1504[2] = v1518;
        if (v1474 <= 2)
        {
          v1520 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1506.f64[0]), v1517, v1506, 1);
          v1521 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1506.f64[0]), v1513, v1506, 1);
          v1522 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1506.f64[0]), v1515, v1506, 1);
          v1523 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1507.f64[0]), v1517, v1507, 1);
          v1524 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1507.f64[0]), v1513, v1507, 1);
          v1525 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1507.f64[0]), v1515, v1507, 1);
          v1526 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1509.f64[0]), v1517, v1509, 1);
          v1527 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1509.f64[0]), v1513, v1509, 1);
          v1528 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1509.f64[0]), v1515, v1509, 1);
          v1529 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1508.f64[0]), v1517, v1508, 1);
          v1530 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1508.f64[0]), v1513, v1508, 1);
          v1531 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1508.f64[0]), v1515, v1508, 1);
          v1532 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1511.f64[0]), v1517, v1511, 1);
          v1533 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1511.f64[0]), v1513, v1511, 1);
          v1534 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1511.f64[0]), v1515, v1511, 1);
          v1535 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1510.f64[0]), v1517, v1510, 1);
          v1536 = (float64x2_t *)(v2496 + 288 * ((int)v1473 + *(_DWORD *)(v2488 + 4) * (int)v1473));
          v1537 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1510.f64[0]), v1513, v1510, 1);
          v1538 = vaddq_f64(v1522, v1536[2]);
          v1539 = vaddq_f64(v1521, v1536[1]);
          v1540 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1510.f64[0]), v1515, v1510, 1);
          v1541 = vaddq_f64(v1520, *v1536);
          v1542 = vaddq_f64(v1525, v1536[5]);
          v1543 = vaddq_f64(v1524, v1536[4]);
          v1544 = vaddq_f64(v1523, v1536[3]);
          v1545 = vaddq_f64(v1528, v1536[8]);
          v1546 = vaddq_f64(v1527, v1536[7]);
          v1547 = vaddq_f64(v1526, v1536[6]);
          v1548 = vaddq_f64(v1531, v1536[11]);
          v1549 = vaddq_f64(v1530, v1536[10]);
          v1550 = vaddq_f64(v1529, v1536[9]);
          v1551 = v1536[15];
          v1552 = vaddq_f64(v1534, v1536[14]);
          v1553 = vaddq_f64(v1533, v1536[13]);
          v1554 = vaddq_f64(v1532, v1536[12]);
          v66 = vaddq_f64(v1540, v1536[17]);
          *v1536 = v1541;
          v1536[1] = v1539;
          v1536[2] = v1538;
          v1536[3] = v1544;
          v1536[4] = v1543;
          v1536[5] = v1542;
          v1536[6] = v1547;
          v1536[7] = v1546;
          v1536[8] = v1545;
          v1536[9] = v1550;
          v1536[10] = v1549;
          v1536[11] = v1548;
          v1536[12] = v1554;
          v1536[13] = v1553;
          v1536[14] = v1552;
          v1536[15] = vaddq_f64(v1535, v1551);
          v1536[16] = vaddq_f64(v1537, v1536[16]);
          v1536[17] = v66;
        }
        v1555 = 4 * *v1460;
        v1556 = 32 * *v1460;
        if (v1476 >= 3)
        {
          v1558 = v1555 | 2;
        }
        else
        {
          v1557 = *(float64x2_t *)(v1456 + 32 * *v1460);
          v1558 = v1555 | 2;
          v1559 = *(float64x2_t *)(v1456 + 8 * v1558);
          v1560 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1557.f64[0]), v1517, v1557, 1);
          v1561 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1557.f64[0]), v1513, v1557, 1);
          v1562 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1557.f64[0]), v1515, v1557, 1);
          v1563 = vmlaq_laneq_f64(vmulq_n_f64(v1516, v1559.f64[0]), v1517, v1559, 1);
          v1564 = vmlaq_laneq_f64(vmulq_n_f64(v1512, v1559.f64[0]), v1513, v1559, 1);
          v1565 = vmlaq_laneq_f64(vmulq_n_f64(v1514, v1559.f64[0]), v1515, v1559, 1);
          v1566 = (float64x2_t *)(v2480 + 96 * ((int)v1475 + *(_DWORD *)(v2472 + 4) * (int)v1473));
          v1567 = v1566[3];
          v1568 = vaddq_f64(v1562, v1566[2]);
          v1569 = vaddq_f64(v1561, v1566[1]);
          v1570 = vaddq_f64(v1565, v1566[5]);
          v1571 = vaddq_f64(v1564, v1566[4]);
          *v1566 = vaddq_f64(v1560, *v1566);
          v1566[1] = v1569;
          v1566[2] = v1568;
          v1566[3] = vaddq_f64(v1563, v1567);
          v1566[4] = v1571;
          v1566[5] = v1570;
        }
        v1638 = *(float64x2_t *)(v1456 + v1556);
        v1639 = *(float64x2_t *)(v1456 + 8 * v1558);
        v1640 = (float64x2_t)vzip1q_s64((int64x2_t)v1638, (int64x2_t)v1639);
        v1641 = (float64x2_t)vzip2q_s64((int64x2_t)v1638, (int64x2_t)v1639);
        *(float64x2_t *)(v1462 + 16 * v1475) = vsubq_f64(*(float64x2_t *)(v1462 + 16 * v1475), vmlaq_f64(vmulq_n_f64(v1640, v1468.f64[0]), v1503, v1641));
        if (v1476 <= 2)
        {
          v1642 = (float64x2_t *)(v2464 + 32 * ((int)v1475 + *(_DWORD *)(v2456 + 4) * (int)v1475));
          v1643 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1640, v1639.f64[0]), v1641, v1639, 1), v1642[1]);
          *v1642 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1640, v1638.f64[0]), v1641, v1638, 1), *v1642);
          v1642[1] = v1643;
        }
        ++v1460;
        ++v1459;
        ++v1458;
        v1438 += 16;
        ++v1457;
        v1464 += 6;
        --v1463;
      }
      while (v1463);
    }
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2237 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a18 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a45 + 24) |= 1uLL;
    *(_QWORD *)(a43 + 24) |= 1uLL;
    *(_QWORD *)(a41 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v1434 = v2191;
    v1433 = v2192;
    v1432 = v2258;
    v1223 = v2327;
  }
  v1644 = STACK[0xB90];
  v2185 = STACK[0xB90];
  if ((**(_BYTE **)(v1223 + 16) & 1) != 0)
  {
    v1645 = *(_QWORD *)(v2206 + 16);
    v1646 = _gc_buffer_get_extent();
    v1647 = _gc_buffer_get_extent();
    v1648 = _gc_buffer_get_extent();
    if (v1646 != 2 || v1647 != v1648)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(v1434 + 24) |= 1uLL;
    }
    v1649 = *(_QWORD *)(v1434 + 16);
    v2279 = *(_QWORD *)(v2208 + 16);
    v1650 = _gc_buffer_get_extent();
    v1651 = _gc_buffer_get_extent();
    v1652 = _gc_buffer_get_extent();
    v1653 = _gc_buffer_get_extent();
    if (v1650 != 2 || v1651 != 3 || v1652 != v1653)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2223 + 24) |= 1uLL;
    }
    v2604 = *(_QWORD *)(v2223 + 16);
    v1654 = _gc_buffer_get_extent();
    v1655 = _gc_buffer_get_extent();
    v1656 = _gc_buffer_get_extent();
    v1657 = _gc_buffer_get_extent();
    if (v1654 != 2 || v1655 != 1 || v1656 != v1657)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2219 + 24) |= 1uLL;
    }
    v2529 = *(_QWORD *)(v2219 + 16);
    v1658 = _gc_buffer_get_extent();
    v1659 = _gc_buffer_get_extent();
    v1660 = _gc_buffer_get_extent();
    v1661 = _gc_buffer_get_extent();
    if (v1658 != 2 || v1659 != 4 || v1660 != v1661)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2221 + 24) |= 1uLL;
    }
    v2538 = *(_QWORD *)(v2221 + 16);
    v1662 = _gc_buffer_get_extent();
    v1663 = _gc_buffer_get_extent();
    v1664 = _gc_buffer_get_extent();
    v1665 = _gc_buffer_get_extent();
    if (v1662 != 2 || v1663 != 6 || v1664 != v1665)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v2225 + 24) |= 1uLL;
    }
    v1666 = *(_QWORD *)(v2225 + 16);
    v1667 = _gc_buffer_get_extent();
    v1668 = _gc_buffer_get_extent();
    v1669 = _gc_buffer_get_extent();
    v1670 = _gc_buffer_get_extent();
    if (v1667 != 2 || v1668 != 2 || v1669 != v1670)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(v1433 + 24) |= 1uLL;
    }
    v1671 = *(_QWORD *)(v1433 + 16);
    v2271 = *(int **)(v2194 + 16);
    v2521 = *(_QWORD *)(a6 + 16);
    v2513 = *(_QWORD *)(a8 + 16);
    v2505 = *(_QWORD *)(a9 + 16);
    v2497 = *(_QWORD *)(a10 + 16);
    v2489 = *(_QWORD *)(v2195 + 16);
    v1672 = *(_QWORD *)(v2197 + 16);
    v1673 = *(_QWORD *)(v2199 + 16);
    v1674 = *(_QWORD *)(v2201 + 16);
    v1675 = *(_QWORD *)(a14 + 16);
    v2481 = *(_QWORD *)(a15 + 16);
    v2363 = *(_QWORD *)(a18 + 16);
    v2357 = *(_QWORD *)(a19 + 16);
    v2352 = *(_QWORD *)(a20 + 16);
    v2347 = *(_QWORD *)(a21 + 16);
    v2343 = *(_QWORD *)(a22 + 16);
    v2339 = *(_QWORD *)(a23 + 16);
    v2473 = *(_QWORD *)(a41 + 16);
    v2465 = *(_QWORD *)(a42 + 16);
    v2334 = *(_QWORD *)(a43 + 16);
    v2328 = *(_QWORD *)(a44 + 16);
    v2322 = *(_QWORD *)(a45 + 16);
    v2319 = *(_QWORD *)(a46 + 16);
    v2457 = *(_QWORD *)(a56 + 16);
    v2449 = *(_QWORD *)(a57 + 16);
    v2314 = *(_QWORD *)(a58 + 16);
    v2308 = *(_QWORD *)(a59 + 16);
    v2441 = *(_QWORD *)(a66 + 16);
    v2433 = *(_QWORD *)(v2238 + 16);
    v2425 = *(_QWORD *)(v2217 + 16);
    v2417 = *(_QWORD *)(v2215 + 16);
    v2410 = *(_QWORD *)(v2213 + 16);
    v2403 = *(_QWORD *)(v2211 + 16);
    v1676 = *(_QWORD *)(v2240 + 16);
    v2395 = *(_QWORD *)(v2237 + 16);
    v2390 = *(_QWORD *)(v2239 + 16);
    v1677 = *(_QWORD *)(v2241 + 16);
    v2302 = *(_QWORD *)(v2236 + 16);
    v2299 = *(_QWORD *)(v2233 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v2303 >= 1)
    {
      v1681 = 0;
      v2275 = v2604 + 32;
      while (v1681)
      {
        v1682 = v2271[v1681 - 1];
        v1683 = v2271[v1681];
        if (v1682 < (int)v1683)
          goto LABEL_378;
LABEL_401:
        if (++v1681 == v2303)
          goto LABEL_402;
      }
      v1682 = 0;
      v1683 = *v2271;
      if ((int)v1683 <= 0)
        goto LABEL_401;
LABEL_378:
      v1684 = (float64x2_t *)(v2302 + 72 * v1681);
      v67 = v1684[1];
      v1685 = (int64x2_t)v1684[2];
      v1686 = v1684[3];
      v2296 = (float64x2_t *)(v2299 + 24 * v1681);
      v1687 = *v2296;
      v2292 = 3 * v1681 + 2;
      v66.f64[0] = *(float64_t *)(v2299 + 8 * v2292);
      v1688 = *v1684;
      v2283 = 9 * v1681 + 8;
      v1680.f64[0] = *(float64_t *)(v2302 + 8 * v2283);
      v1689 = v1683 - v1682;
      v1690 = (float64x2_t *)(v2275 + 48 * v1682);
      v1691 = (int *)(v2279 + 4 * v1682);
      while (1)
      {
        v1703 = v1690[-2];
        v1702 = v1690[-1];
        _Q7 = *v1690;
        v1705 = *v1691;
        v1706 = *(float64x2_t *)(v1649 + 16 * v1705);
        v1707 = 6 * v1705;
        v1708 = *(int *)(v1645 + 24 * v1705);
        if (v1708 >> 30 == 3)
        {
          v1724 = v1707 | 1;
        }
        else
        {
          _D21 = vextq_s8((int8x16_t)_Q7, (int8x16_t)_Q7, 8uLL).u64[0];
          _D22 = vextq_s8((int8x16_t)v1706, (int8x16_t)v1706, 8uLL).u64[0];
          _D23 = vextq_s8((int8x16_t)v1703, (int8x16_t)v1703, 8uLL).u64[0];
          _D24 = vextq_s8((int8x16_t)v1702, (int8x16_t)v1702, 8uLL).u64[0];
          _Q20 = *(int8x16_t *)(v2529 + 16 * *(int *)(v2489 + 4 * v1705));
          _D19 = vextq_s8(_Q20, _Q20, 8uLL).u64[0];
          __asm
          {
            FMLA            D25, D23, V20.D[1]
            FMLA            D23, D24, V20.D[1]
          }
          *((_QWORD *)&_Q25 + 1) = _D23;
          __asm { FMLA            D24, D21, V20.D[1] }
          v1718 = 8 * *(int *)(v2521 + 4 * v1708);
          v1719 = v2425 + 24 * v1705;
          __asm { FMLA            D23, D22, V20.D[1] }
          *(double *)(v1676 + v1718) = *(double *)(v1676 + v1718) - _D23;
          *(_OWORD *)v1719 = _Q25;
          _D22 = _Q20.i64[1];
          __asm { FMLA            D21, D22, V20.D[1] }
          v1723 = 8 * ((int)v1708 + *(_DWORD *)(v2481 + 4) * (int)v1708);
          *(double *)(v1675 + v1723) = _D21 + *(double *)(v1675 + v1723);
          *(_QWORD *)(v1719 + 16) = _D24;
          v1724 = v1707 | 1;
          v1725 = *(_DWORD *)(v1645 + 4 * (v1707 | 1));
          if (v1725 >> 30 == 3)
          {
            v1726 = v1645 + 24 * v1705;
            v1727 = *(_DWORD *)(v1726 + 16);
            if (v1727 >> 30 == 3)
              goto LABEL_383;
          }
          else
          {
            v1729 = (__int128 *)(v2538 + ((uint64_t)*(int *)(v1672 + 4 * v1705) << 6));
            _Q21 = *v1729;
            _Q22 = v1729[1];
            _Q23 = v1729[2];
            _Q24 = v1729[3];
            __asm
            {
              FMLA            D25, D19, V21.D[1]
              FMLA            D21, D19, V22.D[1]
              FMLA            D22, D19, V23.D[1]
              FMLA            D23, D19, V24.D[1]
            }
            v1735 = (double *)(v2363 + 32 * (int)(v1725 + *(_DWORD *)(v2357 + 4) * v1708));
            *(double *)&v1736 = _D25 + *v1735;
            *(double *)&_Q22 = *(double *)&_Q22 + v1735[2];
            *((double *)&v1736 + 1) = *(double *)&_Q21 + v1735[1];
            *((double *)&_Q22 + 1) = *(double *)&_Q23 + v1735[3];
            *(_OWORD *)v1735 = v1736;
            *((_OWORD *)v1735 + 1) = _Q22;
            v1726 = v1645 + 24 * v1705;
            v1727 = *(_DWORD *)(v1726 + 16);
            if (v1727 >> 30 == 3)
            {
LABEL_383:
              v1728 = *(_DWORD *)(v1726 + 20);
              if (v1728 >> 30 == 3)
                goto LABEL_389;
LABEL_388:
              v1747 = (__int128 *)(v1671 + 32 * *(int *)(v1674 + 4 * v1705));
              _Q21 = *v1747;
              _Q22 = v1747[1];
              __asm
              {
                FMLA            D23, D19, V21.D[1]
                FMLA            D20, D19, V22.D[1]
              }
              v1752 = (double *)(v2343 + 16 * (int)(v1728 + *(_DWORD *)(v2339 + 4) * v1708));
              v1753 = _D20 + v1752[1];
              *v1752 = _D23 + *v1752;
              v1752[1] = v1753;
              goto LABEL_389;
            }
          }
          v1737 = (__int128 *)(v1666 + 96 * *(int *)(v1673 + 4 * v1705));
          _Q21 = *v1737;
          _Q22 = v1737[1];
          _Q23 = v1737[2];
          _Q24 = v1737[3];
          _Q25 = v1737[4];
          _Q26 = v1737[5];
          __asm
          {
            FMLA            D27, D19, V21.D[1]
            FMLA            D21, D19, V22.D[1]
            FMLA            D22, D19, V23.D[1]
            FMLA            D23, D19, V24.D[1]
            FMLA            D24, D19, V25.D[1]
            FMLA            D25, D19, V26.D[1]
          }
          v1745 = (double *)(v2352 + 48 * (int)(v1727 + *(_DWORD *)(v2347 + 4) * v1708));
          *(double *)&v1746 = _D27 + *v1745;
          *(double *)&_Q22 = *(double *)&_Q22 + v1745[2];
          *(double *)&_Q24 = *(double *)&_Q24 + v1745[4];
          *((double *)&v1746 + 1) = *(double *)&_Q21 + v1745[1];
          *((double *)&_Q22 + 1) = *(double *)&_Q23 + v1745[3];
          *((double *)&_Q24 + 1) = *(double *)&_Q25 + v1745[5];
          *(_OWORD *)v1745 = v1746;
          *((_OWORD *)v1745 + 1) = _Q22;
          *((_OWORD *)v1745 + 2) = _Q24;
          v1728 = *(_DWORD *)(v1726 + 20);
          if (v1728 >> 30 != 3)
            goto LABEL_388;
        }
LABEL_389:
        v1754 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1706, 1);
        v1755 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1703, 1);
        v1756 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1702, 1);
        v1757 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q7, 1);
        v1758 = *(int *)(v1645 + 4 * v1724);
        v2605 = v1680;
        v2592 = v1685;
        v2581 = v66;
        v2572 = v1688;
        v2564 = v1687;
        if (v1758 >> 30 == 3)
        {
          v1787 = v1707 + 4;
        }
        else
        {
          v1759 = (float64x2_t *)(v2538 + ((uint64_t)*(int *)(v1672 + 4 * v1705) << 6));
          v1760 = *v1759;
          v1761 = v1759[1];
          v1763 = v1759[2];
          v1762 = v1759[3];
          *(_QWORD *)&v1764.f64[0] = vdupq_laneq_s64((int64x2_t)v1763, 1).u64[0];
          v1764.f64[1] = v1759[3].f64[1];
          v1765 = (float64x2_t)vzip1q_s64((int64x2_t)v1763, (int64x2_t)v1762);
          v1766 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1759, (int64x2_t)v1761);
          v1767 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1759, (int64x2_t)v1761);
          v1768 = (float64x2_t *)(v2417 + 96 * v1705);
          *v1768 = vmlaq_f64(vmulq_n_f64(v1766, v1703.f64[0]), v1755, v1767);
          v1768[1] = vmlaq_f64(vmulq_n_f64(v1765, v1703.f64[0]), v1755, v1764);
          v1768[2] = vmlaq_f64(vmulq_n_f64(v1766, v1702.f64[0]), v1756, v1767);
          v1768[3] = vmlaq_f64(vmulq_n_f64(v1765, v1702.f64[0]), v1756, v1764);
          v1768[4] = vmlaq_f64(vmulq_n_f64(v1766, _Q7.f64[0]), v1757, v1767);
          v1768[5] = vmlaq_f64(vmulq_n_f64(v1765, _Q7.f64[0]), v1757, v1764);
          v1769 = (float64x2_t *)(v2395 + 32 * *(int *)(v2513 + 4 * v1758));
          v1770 = vsubq_f64(v1769[1], vmlaq_f64(vmulq_n_f64(v1765, v1706.f64[0]), v1754, v1764));
          *v1769 = vsubq_f64(*v1769, vmlaq_f64(vmulq_n_f64(v1766, v1706.f64[0]), v1754, v1767));
          v1769[1] = v1770;
          v1771 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1760.f64[0]), v1767, v1760, 1);
          v1772 = vmlaq_laneq_f64(vmulq_n_f64(v1765, v1760.f64[0]), v1764, v1760, 1);
          v1773 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1761.f64[0]), v1767, v1761, 1);
          v1774 = vmlaq_laneq_f64(vmulq_n_f64(v1765, v1761.f64[0]), v1764, v1761, 1);
          v1775 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1763.f64[0]), v1767, v1763, 1);
          v1776 = vmlaq_laneq_f64(vmulq_n_f64(v1765, v1763.f64[0]), v1764, v1763, 1);
          v1777 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1762.f64[0]), v1767, v1762, 1);
          v1778 = vmlaq_laneq_f64(vmulq_n_f64(v1765, v1762.f64[0]), v1764, v1762, 1);
          v1779 = (float64x2_t *)(v2473 + ((uint64_t)((int)v1758 + *(_DWORD *)(v2465 + 4) * (int)v1758) << 7));
          v1780 = v1779[2];
          v1781 = vaddq_f64(v1771, *v1779);
          v1782 = vaddq_f64(v1772, v1779[1]);
          v1783 = vaddq_f64(v1774, v1779[3]);
          v1784 = vaddq_f64(v1775, v1779[4]);
          v1785 = vaddq_f64(v1776, v1779[5]);
          v1786 = vaddq_f64(v1778, v1779[7]);
          _Q3 = vaddq_f64(v1777, v1779[6]);
          *v1779 = v1781;
          v1779[1] = v1782;
          v1779[2] = vaddq_f64(v1773, v1780);
          v1779[3] = v1783;
          v1779[4] = v1784;
          v1779[5] = v1785;
          v1779[6] = _Q3;
          v1779[7] = v1786;
          v1787 = v1707 + 4;
          v1788 = *(_DWORD *)(v1645 + 4 * (v1707 + 4));
          if (v1788 >> 30 != 3)
          {
            v1789 = (float64x2_t *)(v1666 + 96 * *(int *)(v1673 + 4 * v1705));
            v1790 = v1789[1];
            v1791 = v1789[2];
            v1792 = v1789[3];
            v1793 = v1789[4];
            v1794 = v1789[5];
            v1795 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1789->f64[0]), v1767, *v1789, 1);
            v1796 = vmlaq_laneq_f64(vmulq_n_f64(v1765, v1789->f64[0]), v1764, *v1789, 1);
            v1797 = (float64x2_t *)(v2334 + 192 * (int)(v1788 + *(_DWORD *)(v2328 + 4) * v1758));
            v2375 = v1755;
            v2385 = v1754;
            v2369 = v1797[10];
            v1798 = vaddq_f64(v1796, v1797[1]);
            v1799 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1766, v1790.f64[0]), v1767, v1790, 1), v1797[2]);
            v1800 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1790.f64[0]), v1764, v1790, 1), v1797[3]);
            v1801 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1766, v1791.f64[0]), v1767, v1791, 1), v1797[4]);
            v1802 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1791.f64[0]), v1764, v1791, 1), v1797[5]);
            _Q3 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1766, v1792.f64[0]), v1767, v1792, 1), v1797[6]);
            _Q5 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1792.f64[0]), v1764, v1792, 1), v1797[7]);
            v1803 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1766, v1793.f64[0]), v1767, v1793, 1), v1797[8]);
            v1804 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1793.f64[0]), v1764, v1793, 1), v1797[9]);
            v1805 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1794.f64[0]), v1764, v1794, 1), v1797[11]);
            *v1797 = vaddq_f64(v1795, *v1797);
            v1797[1] = v1798;
            v1797[2] = v1799;
            v1797[3] = v1800;
            v1797[4] = v1801;
            v1797[5] = v1802;
            v1797[6] = _Q3;
            v1797[7] = _Q5;
            v1797[8] = v1803;
            v1797[9] = v1804;
            v1797[10] = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1766, v1794.f64[0]), v1767, v1794, 1), v2369);
            v1797[11] = v1805;
            v1755 = v2375;
            v1754 = v2385;
          }
          v1806 = *(_DWORD *)(v1645 + 24 * v1705 + 20);
          v1680 = v2605;
          v1685 = v2592;
          v66 = v2581;
          v1688 = v2572;
          v1687 = v2564;
          if (v1806 >> 30 != 3)
          {
            v1807 = (float64x2_t *)(v1671 + 32 * *(int *)(v1674 + 4 * v1705));
            v1808 = v1807[1];
            v1809 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1807->f64[0]), v1767, *v1807, 1);
            v1810 = vmlaq_laneq_f64(vmulq_n_f64(v1766, v1808.f64[0]), v1767, v1808, 1);
            v1811 = v1755;
            v1812 = vmlaq_laneq_f64(vmulq_n_f64(v1765, v1808.f64[0]), v1764, v1808, 1);
            v1813 = (float64x2_t *)(v2322 + ((uint64_t)(int)(v1806 + *(_DWORD *)(v2319 + 4) * v1758) << 6));
            _Q5 = v1813[1];
            v1814 = vaddq_f64(v1809, *v1813);
            v1815 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1765, v1807->f64[0]), v1764, *v1807, 1), _Q5);
            _Q3 = vaddq_f64(v1812, v1813[3]);
            v1755 = v1811;
            v1816 = vaddq_f64(v1810, v1813[2]);
            *v1813 = v1814;
            v1813[1] = v1815;
            v1813[2] = v1816;
            v1813[3] = _Q3;
          }
        }
        v1817 = *(int *)(v1645 + 4 * v1787);
        if (v1817 >> 30 != 3)
        {
          v1818 = (float64x2_t *)(v1666 + 96 * *(int *)(v1673 + 4 * v1705));
          v1820 = *v1818;
          v1819 = v1818[1];
          v1821 = v1818[2];
          v1822 = v1818[3];
          v1824 = v1818[4];
          v1823 = v1818[5];
          v1825 = (float64x2_t)vzip1q_s64((int64x2_t)v1821, (int64x2_t)v1822);
          *(_QWORD *)&v1826.f64[0] = vdupq_laneq_s64((int64x2_t)v1821, 1).u64[0];
          v1826.f64[1] = v1818[3].f64[1];
          v1827 = (float64x2_t)vzip1q_s64((int64x2_t)v1824, (int64x2_t)v1823);
          v1828 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1818, (int64x2_t)v1819);
          v1829 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1818, (int64x2_t)v1819);
          *(_QWORD *)&v1830.f64[0] = vdupq_laneq_s64((int64x2_t)v1824, 1).u64[0];
          v1830.f64[1] = v1818[5].f64[1];
          v1831 = (float64x2_t *)(v2410 + 144 * v1705);
          *v1831 = vmlaq_f64(vmulq_n_f64(v1828, v1703.f64[0]), v1755, v1829);
          v1831[1] = vmlaq_f64(vmulq_n_f64(v1825, v1703.f64[0]), v1755, v1826);
          v1831[2] = vmlaq_f64(vmulq_n_f64(v1827, v1703.f64[0]), v1755, v1830);
          v1831[3] = vmlaq_f64(vmulq_n_f64(v1828, v1702.f64[0]), v1756, v1829);
          v1831[4] = vmlaq_f64(vmulq_n_f64(v1825, v1702.f64[0]), v1756, v1826);
          v1831[5] = vmlaq_f64(vmulq_n_f64(v1827, v1702.f64[0]), v1756, v1830);
          v1831[6] = vmlaq_f64(vmulq_n_f64(v1828, _Q7.f64[0]), v1757, v1829);
          v1831[7] = vmlaq_f64(vmulq_n_f64(v1825, _Q7.f64[0]), v1757, v1826);
          v1832 = *(int *)(v2505 + 4 * v1817);
          v1831[8] = vmlaq_f64(vmulq_n_f64(v1827, _Q7.f64[0]), v1757, v1830);
          v1833 = (float64x2_t *)(v2390 + 48 * v1832);
          v1834 = vsubq_f64(v1833[2], vmlaq_f64(vmulq_n_f64(v1827, v1706.f64[0]), v1754, v1830));
          v1835 = vsubq_f64(v1833[1], vmlaq_f64(vmulq_n_f64(v1825, v1706.f64[0]), v1754, v1826));
          *v1833 = vsubq_f64(*v1833, vmlaq_f64(vmulq_n_f64(v1828, v1706.f64[0]), v1754, v1829));
          v1833[1] = v1835;
          v1833[2] = v1834;
          v1836 = vmlaq_laneq_f64(vmulq_n_f64(v1828, v1820.f64[0]), v1829, v1820, 1);
          v1837 = vmlaq_laneq_f64(vmulq_n_f64(v1825, v1820.f64[0]), v1826, v1820, 1);
          v1838 = vmlaq_laneq_f64(vmulq_n_f64(v1827, v1820.f64[0]), v1830, v1820, 1);
          v1839 = vmlaq_laneq_f64(vmulq_n_f64(v1828, v1819.f64[0]), v1829, v1819, 1);
          v1840 = vmlaq_laneq_f64(vmulq_n_f64(v1825, v1819.f64[0]), v1826, v1819, 1);
          v1841 = vmlaq_laneq_f64(vmulq_n_f64(v1827, v1819.f64[0]), v1830, v1819, 1);
          v1842 = vmlaq_laneq_f64(vmulq_n_f64(v1828, v1821.f64[0]), v1829, v1821, 1);
          v1843 = vmlaq_laneq_f64(vmulq_n_f64(v1825, v1821.f64[0]), v1826, v1821, 1);
          v1844 = vmlaq_laneq_f64(vmulq_n_f64(v1827, v1821.f64[0]), v1830, v1821, 1);
          v1845 = vmlaq_laneq_f64(vmulq_n_f64(v1828, v1822.f64[0]), v1829, v1822, 1);
          v1846 = vmlaq_laneq_f64(vmulq_n_f64(v1825, v1822.f64[0]), v1826, v1822, 1);
          v1847 = vmlaq_laneq_f64(vmulq_n_f64(v1827, v1822.f64[0]), v1830, v1822, 1);
          v1848 = vmlaq_laneq_f64(vmulq_n_f64(v1828, v1824.f64[0]), v1829, v1824, 1);
          v1849 = vmlaq_laneq_f64(vmulq_n_f64(v1825, v1824.f64[0]), v1826, v1824, 1);
          v1850 = vmlaq_laneq_f64(vmulq_n_f64(v1827, v1824.f64[0]), v1830, v1824, 1);
          v1851 = vmlaq_laneq_f64(vmulq_n_f64(v1828, v1823.f64[0]), v1829, v1823, 1);
          v1852 = vmlaq_laneq_f64(vmulq_n_f64(v1825, v1823.f64[0]), v1826, v1823, 1);
          v1853 = vmlaq_laneq_f64(vmulq_n_f64(v1827, v1823.f64[0]), v1830, v1823, 1);
          v1854 = (float64x2_t *)(v2457 + 288 * ((int)v1817 + *(_DWORD *)(v2449 + 4) * (int)v1817));
          v1855 = vaddq_f64(v1838, v1854[2]);
          v1856 = vaddq_f64(v1837, v1854[1]);
          v1857 = vaddq_f64(v1841, v1854[5]);
          v1858 = vaddq_f64(v1840, v1854[4]);
          v1859 = vaddq_f64(v1839, v1854[3]);
          v1860 = vaddq_f64(v1844, v1854[8]);
          v1861 = vaddq_f64(v1843, v1854[7]);
          v1862 = vaddq_f64(v1842, v1854[6]);
          _Q5 = vaddq_f64(v1847, v1854[11]);
          v1863 = vaddq_f64(v1846, v1854[10]);
          _Q3 = vaddq_f64(v1845, v1854[9]);
          v1864 = v1854[15];
          v1865 = vaddq_f64(v1850, v1854[14]);
          v1866 = vaddq_f64(v1849, v1854[13]);
          v1867 = vaddq_f64(v1848, v1854[12]);
          v1868 = vaddq_f64(v1853, v1854[17]);
          *v1854 = vaddq_f64(v1836, *v1854);
          v1854[1] = v1856;
          v1869 = vaddq_f64(v1852, v1854[16]);
          v1870 = vaddq_f64(v1851, v1864);
          v1680 = v2605;
          v1854[2] = v1855;
          v1854[3] = v1859;
          v1854[4] = v1858;
          v1854[5] = v1857;
          v1854[6] = v1862;
          v1854[7] = v1861;
          v1688 = v2572;
          v1854[8] = v1860;
          v1854[9] = _Q3;
          v1854[10] = v1863;
          v1854[11] = _Q5;
          v1854[12] = v1867;
          v1854[13] = v1866;
          v1685 = v2592;
          v1854[14] = v1865;
          v1854[15] = v1870;
          v66 = v2581;
          v1854[16] = v1869;
          v1854[17] = v1868;
          v1687 = v2564;
          v1871 = *(_DWORD *)(v1645 + 24 * v1705 + 20);
          if (v1871 >> 30 != 3)
          {
            v1872 = (float64x2_t *)(v1671 + 32 * *(int *)(v1674 + 4 * v1705));
            v1873 = v1872[1];
            v1874 = (float64x2_t *)(v2314 + 96 * (int)(v1871 + *(_DWORD *)(v2308 + 4) * v1817));
            v1875 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1827, v1872->f64[0]), v1830, *v1872, 1), v1874[2]);
            _Q3 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1825, v1872->f64[0]), v1826, *v1872, 1), v1874[1]);
            v1876 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1827, v1873.f64[0]), v1830, v1873, 1), v1874[5]);
            _Q5 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1825, v1873.f64[0]), v1826, v1873, 1), v1874[4]);
            v1877 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1828, v1873.f64[0]), v1829, v1873, 1), v1874[3]);
            *v1874 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1828, v1872->f64[0]), v1829, *v1872, 1), *v1874);
            v1874[1] = _Q3;
            v1874[2] = v1875;
            v1874[3] = v1877;
            v1874[4] = _Q5;
            v1874[5] = v1876;
          }
        }
        v1878 = *v1691;
        v1879 = *(int *)(v1645 + 24 * v1878 + 20);
        if (v1879 >> 30 != 3)
        {
          v1880 = (float64x2_t *)(v1671 + 32 * *(int *)(v1674 + 4 * v1878));
          v1881 = *v1880;
          v1882 = v1880[1];
          v1883 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1880, (int64x2_t)v1882);
          _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1880, (int64x2_t)v1882);
          v1884 = vmlaq_laneq_f64(vmulq_n_f64(v1883, v1690[-1].f64[0]), _Q3, v1690[-1], 1);
          v1885 = vmlaq_laneq_f64(vmulq_n_f64(v1883, v1690->f64[0]), _Q3, *v1690, 1);
          v1886 = (float64x2_t *)(v2403 + 48 * v1878);
          *v1886 = vmlaq_laneq_f64(vmulq_n_f64(v1883, v1690[-2].f64[0]), _Q3, v1690[-2], 1);
          v1886[1] = v1884;
          v1886[2] = v1885;
          v1887 = 16 * *(int *)(v2497 + 4 * v1879);
          _Q5 = *(float64x2_t *)(v1649 + 16 * v1878);
          *(float64x2_t *)(v1677 + v1887) = vsubq_f64(*(float64x2_t *)(v1677 + v1887), vmlaq_laneq_f64(vmulq_n_f64(v1883, _Q5.f64[0]), _Q3, _Q5, 1));
          v1888 = vmlaq_laneq_f64(vmulq_n_f64(v1883, v1881.f64[0]), _Q3, v1881, 1);
          v1889 = (float64x2_t *)(v2441 + 32 * ((int)v1879 + *(_DWORD *)(v2433 + 4) * (int)v1879));
          v1890 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v1883, v1882.f64[0]), _Q3, v1882, 1), v1889[1]);
          *v1889 = vaddq_f64(v1888, *v1889);
          v1889[1] = v1890;
        }
        v1692 = (float64x2_t)vzip1q_s64((int64x2_t)v1703, (int64x2_t)v1702);
        _Q2 = (float64x2_t)vzip2q_s64((int64x2_t)v1703, (int64x2_t)v1702);
        _D4 = v1706.f64[1];
        __asm { FMLA            D3, D4, V7.D[1] }
        v1687 = vsubq_f64(v1687, vmlaq_laneq_f64(vmulq_n_f64(v1692, v1706.f64[0]), _Q2, v1706, 1));
        v66 = vsubq_f64(v66, _Q3);
        v1695 = vmlaq_laneq_f64(vmulq_n_f64(v1692, v1703.f64[0]), _Q2, v1703, 1);
        _D4 = v1703.f64[1];
        __asm { FMLA            D3, D4, V7.D[1] }
        v1697 = vmlaq_laneq_f64(vmulq_n_f64(v1692, v1702.f64[0]), _Q2, v1702, 1);
        _D6 = v1702.f64[1];
        __asm { FMLA            D5, D6, V7.D[1] }
        v1699 = vmlaq_laneq_f64(vmulq_n_f64(v1692, _Q7.f64[0]), _Q2, _Q7, 1);
        _D6 = _Q7.f64[1];
        __asm { FMLA            D2, D6, V7.D[1] }
        v1688 = vaddq_f64(v1695, v1688);
        v1701 = (int64x2_t)vaddq_f64(_Q3, v67);
        _Q3 = vaddq_f64(v1697, (float64x2_t)vextq_s8((int8x16_t)v67, (int8x16_t)v1685, 8uLL));
        v1686 = vaddq_f64(v1699, v1686);
        v1680 = vaddq_f64(_Q2, v1680);
        v67 = (float64x2_t)vzip1q_s64(v1701, (int64x2_t)_Q3);
        v1685 = (int64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)vaddq_f64(_Q5, (float64x2_t)vdupq_laneq_s64(v1685, 1)), 8uLL);
        ++v1691;
        v1690 += 3;
        if (!--v1689)
        {
          *v2296 = v1687;
          *(float64_t *)(v2299 + 8 * v2292) = v66.f64[0];
          *v1684 = v1688;
          v1684[1] = v67;
          v1684[2] = (float64x2_t)v1685;
          v1684[3] = v1686;
          *(float64_t *)(v2302 + 8 * v2283) = v1680.f64[0];
          goto LABEL_401;
        }
      }
    }
LABEL_402:
    *(_QWORD *)(v2236 + 24) |= 1uLL;
    *(_QWORD *)(v2233 + 24) |= 1uLL;
    *(_QWORD *)(v2211 + 24) |= 1uLL;
    *(_QWORD *)(v2213 + 24) |= 1uLL;
    *(_QWORD *)(v2215 + 24) |= 1uLL;
    *(_QWORD *)(v2217 + 24) |= 1uLL;
    *(_QWORD *)(v2241 + 24) |= 1uLL;
    *(_QWORD *)(v2239 + 24) |= 1uLL;
    *(_QWORD *)(v2237 + 24) |= 1uLL;
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a22 + 24) |= 1uLL;
    *(_QWORD *)(a20 + 24) |= 1uLL;
    *(_QWORD *)(a66 + 24) |= 1uLL;
    *(_QWORD *)(a18 + 24) |= 1uLL;
    *(_QWORD *)(a58 + 24) |= 1uLL;
    *(_QWORD *)(a56 + 24) |= 1uLL;
    *(_QWORD *)(a45 + 24) |= 1uLL;
    *(_QWORD *)(a43 + 24) |= 1uLL;
    *(_QWORD *)(a41 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
    v74 = v2234;
    v1434 = v2191;
    v1433 = v2192;
    v1644 = v2185;
    v1432 = v2258;
  }
  v1891 = STACK[0xB98];
  v1892 = STACK[0xB08];
  v2204 = STACK[0xAF8];
  v1893 = STACK[0xAF0];
  v2186 = STACK[0xB08];
  v2188 = STACK[0xAF0];
  v2190 = STACK[0xB18];
  v2184 = STACK[0xB98];
  if ((**(_BYTE **)(v1432 + 16) & 1) == 0)
  {
    v1894 = STACK[0xBA0];
    v2606 = STACK[0xBA0];
    if ((**(_BYTE **)(v1644 + 16) & 1) == 0)
      goto LABEL_405;
    goto LABEL_442;
  }
  v1895 = *(_QWORD *)(v2206 + 16);
  v1896 = _gc_buffer_get_extent();
  v1897 = _gc_buffer_get_extent();
  v1898 = _gc_buffer_get_extent();
  if (v1896 != 2 || v1897 != v1898)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(v1434 + 24) |= 1uLL;
  }
  v1899 = *(_QWORD *)(v1434 + 16);
  v2272 = *(_QWORD *)(v2208 + 16);
  v1900 = _gc_buffer_get_extent();
  v1901 = _gc_buffer_get_extent();
  v1902 = _gc_buffer_get_extent();
  v1903 = _gc_buffer_get_extent();
  if (v1900 != 2 || v1901 != 3 || v1902 != v1903)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v2223 + 24) |= 1uLL;
  }
  v2607 = *(_QWORD *)(v2223 + 16);
  v1904 = _gc_buffer_get_extent();
  v1905 = _gc_buffer_get_extent();
  v1906 = _gc_buffer_get_extent();
  v1907 = _gc_buffer_get_extent();
  if (v1904 != 2 || v1905 != 1 || v1906 != v1907)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v2219 + 24) |= 1uLL;
  }
  v1908 = *(_QWORD *)(v2219 + 16);
  v1909 = _gc_buffer_get_extent();
  v1910 = _gc_buffer_get_extent();
  v1911 = _gc_buffer_get_extent();
  v1912 = _gc_buffer_get_extent();
  if (v1909 != 2 || v1910 != 4 || v1911 != v1912)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v2221 + 24) |= 1uLL;
  }
  v2418 = *(_QWORD *)(v2221 + 16);
  v1913 = _gc_buffer_get_extent();
  v1914 = _gc_buffer_get_extent();
  v1915 = _gc_buffer_get_extent();
  v1916 = _gc_buffer_get_extent();
  if (v1913 != 2 || v1914 != 6 || v1915 != v1916)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v2225 + 24) |= 1uLL;
  }
  v2265 = v1895;
  v2426 = v1908;
  v2434 = v1899;
  v1917 = *(_QWORD *)(v2225 + 16);
  v1918 = _gc_buffer_get_extent();
  v1919 = _gc_buffer_get_extent();
  v1920 = _gc_buffer_get_extent();
  v1921 = _gc_buffer_get_extent();
  if (v1918 != 2 || v1919 != 2 || v1920 != v1921)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v1433 + 24) |= 1uLL;
  }
  v1922 = *(_QWORD *)(v1433 + 16);
  v1923 = *(int **)(v2194 + 16);
  v1924 = *(_QWORD *)(v2195 + 16);
  v1925 = *(_QWORD *)(v2197 + 16);
  v1926 = *(_QWORD *)(v2199 + 16);
  v2381 = *(_QWORD *)(v2201 + 16);
  v1927 = *(_QWORD *)(a14 + 16);
  v2263 = *(_QWORD *)(a15 + 16);
  v2376 = *(_QWORD *)(a18 + 16);
  v2261 = *(_QWORD *)(a19 + 16);
  v2370 = *(_QWORD *)(a20 + 16);
  v2259 = *(_QWORD *)(a21 + 16);
  v2364 = *(_QWORD *)(a22 + 16);
  v2255 = *(_QWORD *)(a23 + 16);
  v2358 = *(_QWORD *)(a41 + 16);
  v2353 = *(_QWORD *)(a42 + 16);
  v2348 = *(_QWORD *)(a43 + 16);
  v2344 = *(_QWORD *)(a44 + 16);
  v2340 = *(_QWORD *)(a45 + 16);
  v2335 = *(_QWORD *)(a46 + 16);
  v2329 = *(_QWORD *)(a56 + 16);
  v2323 = *(_QWORD *)(a57 + 16);
  v2320 = *(_QWORD *)(a58 + 16);
  v2253 = *(_QWORD *)(a59 + 16);
  v2252 = *(_QWORD *)(a66 + 16);
  v2250 = *(_QWORD *)(v2238 + 16);
  v2248 = *(_QWORD *)(v2215 + 16);
  v2249 = *(_QWORD *)(v2217 + 16);
  v1928 = *(_QWORD *)(v2211 + 16);
  v1929 = *(_QWORD *)(v2240 + 16);
  v2246 = *(_QWORD *)(v2237 + 16);
  v2247 = *(_QWORD *)(v2213 + 16);
  v2244 = *(_QWORD *)(v2239 + 16);
  v1930 = *(_QWORD *)(v2241 + 16);
  v2315 = *(_QWORD *)(v2236 + 16);
  v2309 = *(_QWORD *)(v2233 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v2303 >= 1)
  {
    v1932 = 0;
    v2242 = v2607 + 32;
    v2268 = v1923;
    do
    {
      if (v1932)
      {
        v1933 = v1923[v1932 - 1];
        v1934 = v1923[v1932];
        if (v1933 < (int)v1934)
          goto LABEL_437;
      }
      else
      {
        v1933 = 0;
        v1934 = *v1923;
        if ((int)v1934 > 0)
        {
LABEL_437:
          v1935 = v2315 + 72 * v1932;
          v1936 = *(float64x2_t *)(v1935 + 16);
          v2293 = (float64x2_t *)(v1935 + 16);
          v1937 = *(int64x2_t *)(v1935 + 32);
          v2289 = (int64x2_t *)(v1935 + 32);
          v1938 = (float64x2_t *)v1935;
          v1939 = v1938[3];
          v2284 = v1938 + 3;
          v2300 = (float64x2_t *)(v2309 + 24 * v1932);
          v1940 = *v2300;
          v2276 = 3 * v1932 + 2;
          v67.f64[0] = *(float64_t *)(v2309 + 8 * v2276);
          v2297 = v1938;
          v2608 = *v1938;
          v1931.f64[0] = *(float64_t *)(v2315 + 8 * (9 * v1932 + 8));
          v2466 = *(_DWORD *)(v2263 + 4);
          v2458 = *(_DWORD *)(v2261 + 4);
          v2450 = *(_DWORD *)(v2259 + 4);
          v2442 = *(_DWORD *)(v2255 + 4);
          v1941 = v1934 - v1933;
          v1942 = (float64x2_t *)(v2242 + 48 * v1933);
          v1943 = (int *)(v2272 + 4 * v1933);
          do
          {
            v2565 = v1940;
            v2582 = v1931;
            v1944 = v1942[-2];
            v1945 = v1942[-1];
            _Q5 = *v1942;
            _D21 = v1942[-2].f64[1];
            v2593 = v1942[-1].f64[1];
            v1948 = *v1943++;
            _D23 = _Q5.f64[1];
            v1950 = *(float64x2_t *)(v2434 + 16 * v1948);
            _D11 = *(_QWORD *)(v2434 + 16 * v1948 + 8);
            _Q8 = *(float64x2_t *)(v2426 + 16 * *(int *)(v1924 + 4 * v1948));
            __asm
            {
              FMLA            D0, D21, V8.D[1]
              FMLA            D1, D2, V8.D[1]
            }
            v1955 = (int *)(v2265 + 24 * v1948);
            __asm { FMLA            D2, D23, V8.D[1] }
            v1958 = *v1955;
            v1957 = v1955[1];
            v1959 = *(double *)(v1929 + 8 * v1958);
            __asm { FMLA            D3, D11, V8.D[1] }
            v1961 = v2249 + 24 * v1948;
            _D18 = *(_QWORD *)(v2426 + 16 * *(int *)(v1924 + 4 * v1948) + 8);
            v1963 = (float64x2_t *)(v2418 + ((uint64_t)*(int *)(v1925 + 4 * v1948) << 6));
            __asm { FMLA            D4, D18, V8.D[1] }
            v1966 = *v1963;
            v1965 = v1963[1];
            v1967 = v1963[2];
            v1968 = v1963[3];
            *((_QWORD *)&_Q0 + 1) = _D1;
            v1969 = 8 * ((int)v1958 + v2466 * (int)v1958);
            v1970 = *(double *)(v1927 + v1969);
            *(_QWORD *)(v1961 + 16) = _D2;
            _D2 = v1966.f64[1];
            __asm { FMLA            D18, D2, V8.D[1] }
            _D22 = v1965.f64[1];
            __asm { FMLA            D2, D22, V8.D[1] }
            v1975 = v1959 - _D3;
            _D22 = v1967.f64[1];
            __asm { FMLA            D17, D22, V8.D[1] }
            _Q22 = vmulq_f64(_Q8, v1968);
            *(double *)(v1929 + 8 * v1958) = v1975;
            _D3 = v1968.f64[1];
            __asm { FMLA            D22, D3, V8.D[1] }
            v1980 = (float64x2_t *)(v2376 + 32 * ((int)v1957 + v2458 * (int)v1958));
            v1981 = _D4 + v1970;
            _Q4 = v1980[1];
            v1983.f64[0] = _D18 + v1980->f64[0];
            v1984 = v1980->f64[1];
            v1985 = v1980[1].f64[1];
            *(_OWORD *)v1961 = _Q0;
            v1986 = v1917 + 96 * *(int *)(v1926 + 4 * v1948);
            v1988 = *(float64x2_t *)v1986;
            v1987 = *(float64x2_t *)(v1986 + 16);
            *(double *)&_Q0 = _D2 + v1984;
            v1990 = *(float64x2_t *)(v1986 + 32);
            v1989 = *(float64x2_t *)(v1986 + 48);
            v1992 = *(float64x2_t *)(v1986 + 64);
            v1991 = *(float64x2_t *)(v1986 + 80);
            _Q2.f64[0] = _D17 + _Q4.f64[0];
            _Q4.f64[0] = *(float64_t *)(v1986 + 8);
            __asm { FMLA            D3, D4, V8.D[1] }
            _D17 = *(_QWORD *)(v1986 + 24);
            _Q22.f64[0] = _Q22.f64[0] + v1985;
            __asm { FMLA            D4, D17, V8.D[1] }
            _D13 = *(_QWORD *)(v1986 + 40);
            __asm { FMLA            D17, D13, V8.D[1] }
            *(double *)(v1927 + v1969) = v1981;
            _D13 = v1989.f64[1];
            __asm { FMLA            D1, D13, V8.D[1] }
            *(_QWORD *)&v1983.f64[1] = _Q0;
            *(float64_t *)&_Q0 = v1992.f64[1];
            __asm { FMLA            D13, D0, V8.D[1] }
            _D14 = v1991.f64[1];
            _Q2.f64[1] = _Q22.f64[0];
            __asm { FMLA            D0, D14, V8.D[1] }
            v2002 = 6 * v1948 + 4;
            v2003 = *(int *)(v2265 + 4 * v2002);
            *v1980 = v1983;
            v1980[1] = _Q2;
            v2004 = (double *)(v2370 + 48 * ((int)v2003 + v2450 * (int)v1958));
            _Q2.f64[0] = _D3 + *v2004;
            v2005 = _Q4.f64[0] + v2004[1];
            _Q4.f64[0] = _D17 + v2004[2];
            v1983.f64[0] = _D13 + v2004[4];
            _Q2.f64[1] = v2005;
            _Q4.f64[1] = _D1 + v2004[3];
            v1983.f64[1] = *(double *)&_Q0 + v2004[5];
            v2006 = *(int *)(v2381 + 4 * v1948);
            *(float64x2_t *)v2004 = _Q2;
            *((float64x2_t *)v2004 + 1) = _Q4;
            *((float64x2_t *)v2004 + 2) = v1983;
            v2007 = (float64x2_t *)(v1922 + 32 * v2006);
            v2009 = *v2007;
            v2008 = v2007[1];
            v2010 = (float64x2_t)vzip1q_s64((int64x2_t)v1944, (int64x2_t)v1945);
            _Q1 = (float64x2_t)vzip2q_s64((int64x2_t)v1944, (int64x2_t)v1945);
            __asm { FMLA            D2, D11, V5.D[1] }
            _Q3 = vmlaq_laneq_f64(vmulq_n_f64(v2010, v1944.f64[0]), _Q1, v1944, 1);
            __asm { FMLA            D4, D21, V5.D[1] }
            v2013 = vmlaq_laneq_f64(vmulq_n_f64(v2010, v1945.f64[0]), _Q1, v1945, 1);
            _D11 = v2593;
            __asm { FMLA            D22, D11, V5.D[1] }
            v2530 = vmlaq_laneq_f64(vmulq_n_f64(v2010, v1950.f64[0]), _Q1, v1950, 1);
            v2015 = vmlaq_laneq_f64(vmulq_n_f64(v2010, _Q5.f64[0]), _Q1, _Q5, 1);
            __asm { FMLA            D1, D23, V5.D[1] }
            v2522 = _Q1;
            v2573 = vsubq_f64(v67, _Q2);
            v2608 = vaddq_f64(_Q3, v2608);
            v2557 = (int64x2_t)vaddq_f64(_Q4, v1936);
            v2548 = (int8x16_t)vaddq_f64(_Q22, (float64x2_t)vdupq_laneq_s64(v1937, 1));
            v2539 = (int64x2_t)vaddq_f64(v2013, (float64x2_t)vextq_s8((int8x16_t)v1936, (int8x16_t)v1937, 8uLL));
            _Q2.f64[0] = v2007->f64[1];
            __asm { FMLA            D1, D2, V8.D[1] }
            _Q3.f64[0] = v2007[1].f64[1];
            __asm { FMLA            D2, D3, V8.D[1] }
            v2016 = v1955[5];
            v2017 = (double *)(v2364 + 16 * ((int)v2016 + v2442 * (int)v1958));
            *(_QWORD *)&v2018.f64[0] = vdupq_laneq_s64((int64x2_t)v1967, 1).u64[0];
            v2594 = vaddq_f64(v2015, v1939);
            v2019 = (float64x2_t)vzip1q_s64((int64x2_t)v1967, (int64x2_t)v1968);
            v2020 = (float64x2_t)vzip1q_s64((int64x2_t)v1966, (int64x2_t)v1965);
            v2021 = (float64x2_t)vzip2q_s64((int64x2_t)v1966, (int64x2_t)v1965);
            v2018.f64[1] = v1968.f64[1];
            _Q2.f64[0] = _Q2.f64[0] + v2017[1];
            *v2017 = _Q1.f64[0] + *v2017;
            v2017[1] = _Q2.f64[0];
            v2022 = (float64x2_t *)(v2248 + 96 * v1948);
            *v2022 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1944.f64[0]), v2021, v1944, 1);
            v2022[1] = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1944.f64[0]), v2018, v1944, 1);
            v2022[2] = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1945.f64[0]), v2021, v1945, 1);
            v2022[3] = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1945.f64[0]), v2018, v1945, 1);
            v2022[4] = vmlaq_laneq_f64(vmulq_n_f64(v2020, _Q5.f64[0]), v2021, _Q5, 1);
            v2022[5] = vmlaq_laneq_f64(vmulq_n_f64(v2019, _Q5.f64[0]), v2018, _Q5, 1);
            v2023 = (float64x2_t *)(v2246 + 32 * v1957);
            v2024 = vsubq_f64(v2023[1], vmlaq_laneq_f64(vmulq_n_f64(v2019, v1950.f64[0]), v2018, v1950, 1));
            *v2023 = vsubq_f64(*v2023, vmlaq_laneq_f64(vmulq_n_f64(v2020, v1950.f64[0]), v2021, v1950, 1));
            v2023[1] = v2024;
            v2025 = (float64x2_t *)(v2358 + ((uint64_t)((int)v1957 + *(_DWORD *)(v2353 + 4) * (int)v1957) << 7));
            v2026 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2019, v1966.f64[0]), v2018, v1966, 1), v2025[1]);
            v2027 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2020, v1965.f64[0]), v2021, v1965, 1), v2025[2]);
            v2028 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2019, v1965.f64[0]), v2018, v1965, 1), v2025[3]);
            v2029 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2020, v1967.f64[0]), v2021, v1967, 1), v2025[4]);
            v2030 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2019, v1967.f64[0]), v2018, v1967, 1), v2025[5]);
            v2031 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2019, v1968.f64[0]), v2018, v1968, 1), v2025[7]);
            v2032 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2020, v1968.f64[0]), v2021, v1968, 1), v2025[6]);
            v2506 = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1988.f64[0]), v2018, v1988, 1);
            v2514 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1988.f64[0]), v2021, v1988, 1);
            *v2025 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2020, v1966.f64[0]), v2021, v1966, 1), *v2025);
            v2025[1] = v2026;
            v2498 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1987.f64[0]), v2021, v1987, 1);
            v2033 = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1987.f64[0]), v2018, v1987, 1);
            v2025[2] = v2027;
            v2025[3] = v2028;
            v2034 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1990.f64[0]), v2021, v1990, 1);
            v2035 = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1990.f64[0]), v2018, v1990, 1);
            v2025[4] = v2029;
            v2025[5] = v2030;
            v2036 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1989.f64[0]), v2021, v1989, 1);
            v2037 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1992.f64[0]), v2021, v1992, 1);
            v2025[6] = v2032;
            v2025[7] = v2031;
            v2038 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v1991.f64[0]), v2021, v1991, 1);
            v2039 = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1989.f64[0]), v2018, v1989, 1);
            v2040 = vmlaq_laneq_f64(vmulq_n_f64(v2020, v2008.f64[0]), v2021, v2008, 1);
            v2041 = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1992.f64[0]), v2018, v1992, 1);
            v2042 = vmlaq_laneq_f64(vmulq_n_f64(v2019, v1991.f64[0]), v2018, v1991, 1);
            v2043 = (float64x2_t *)(v2340 + ((uint64_t)((int)v2016 + *(_DWORD *)(v2335 + 4) * (int)v1957) << 6));
            v2474 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2020, v2009.f64[0]), v2021, v2009, 1), *v2043);
            v2044 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2019, v2009.f64[0]), v2018, v2009, 1), v2043[1]);
            v2482 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2019, v2008.f64[0]), v2018, v2008, 1), v2043[3]);
            *(_QWORD *)&v2018.f64[0] = vdupq_laneq_s64((int64x2_t)v1990, 1).u64[0];
            v2018.f64[1] = v1989.f64[1];
            v2045 = (float64x2_t)vzip1q_s64((int64x2_t)v1988, (int64x2_t)v1987);
            v2046 = (float64x2_t)vzip2q_s64((int64x2_t)v1988, (int64x2_t)v1987);
            v2047 = (float64x2_t)vzip1q_s64((int64x2_t)v1990, (int64x2_t)v1989);
            v2048 = (float64x2_t *)(v2247 + 144 * v1948);
            *v2048 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1944.f64[0]), v2046, v1944, 1);
            v2048[1] = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1944.f64[0]), v2018, v1944, 1);
            *(_QWORD *)&v2021.f64[0] = vdupq_laneq_s64((int64x2_t)v1992, 1).u64[0];
            v2021.f64[1] = v1991.f64[1];
            v2049 = (float64x2_t)vzip1q_s64((int64x2_t)v1992, (int64x2_t)v1991);
            v2048[2] = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1944.f64[0]), v2021, v1944, 1);
            v2048[3] = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1945.f64[0]), v2046, v1945, 1);
            v2048[4] = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1945.f64[0]), v2018, v1945, 1);
            v2048[5] = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1945.f64[0]), v2021, v1945, 1);
            v2048[6] = vmlaq_laneq_f64(vmulq_n_f64(v2045, _Q5.f64[0]), v2046, _Q5, 1);
            v2048[7] = vmlaq_laneq_f64(vmulq_n_f64(v2047, _Q5.f64[0]), v2018, _Q5, 1);
            v2048[8] = vmlaq_laneq_f64(vmulq_n_f64(v2049, _Q5.f64[0]), v2021, _Q5, 1);
            v2050 = (float64x2_t *)(v2244 + 48 * v2003);
            v2490 = v1950;
            v2051 = vsubq_f64(v2050[2], vmlaq_laneq_f64(vmulq_n_f64(v2049, v1950.f64[0]), v2021, v1950, 1));
            v2052 = vaddq_f64(v2040, v2043[2]);
            v2053 = vsubq_f64(v2050[1], vmlaq_laneq_f64(vmulq_n_f64(v2047, v1950.f64[0]), v2018, v1950, 1));
            *v2043 = v2474;
            v2043[1] = v2044;
            v2054 = vsubq_f64(*v2050, vmlaq_laneq_f64(vmulq_n_f64(v2045, v1950.f64[0]), v2046, v1950, 1));
            v2043[2] = v2052;
            v2043[3] = v2482;
            *v2050 = v2054;
            v2050[1] = v2053;
            v2050[2] = v2051;
            v2055 = (float64x2_t *)(v2348 + 192 * ((int)v2003 + *(_DWORD *)(v2344 + 4) * (int)v1957));
            v2056 = vaddq_f64(v2506, v2055[1]);
            v2057 = vaddq_f64(v2498, v2055[2]);
            v2058 = vaddq_f64(v2033, v2055[3]);
            v2059 = vaddq_f64(v2034, v2055[4]);
            v2060 = vaddq_f64(v2035, v2055[5]);
            v2061 = vaddq_f64(v2036, v2055[6]);
            v2062 = vaddq_f64(v2039, v2055[7]);
            v2063 = vaddq_f64(v2037, v2055[8]);
            v2064 = vaddq_f64(v2041, v2055[9]);
            v2065 = vaddq_f64(v2042, v2055[11]);
            v2066 = vaddq_f64(v2038, v2055[10]);
            *v2055 = vaddq_f64(v2514, *v2055);
            v2055[1] = v2056;
            v2055[2] = v2057;
            v2055[3] = v2058;
            v2067 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1988.f64[0]), v2046, v1988, 1);
            v2068 = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1988.f64[0]), v2018, v1988, 1);
            v2069 = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1988.f64[0]), v2021, v1988, 1);
            v2055[4] = v2059;
            v2055[5] = v2060;
            v2070 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1987.f64[0]), v2046, v1987, 1);
            v2055[6] = v2061;
            v2055[7] = v2062;
            v2071 = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1987.f64[0]), v2018, v1987, 1);
            v2072 = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1987.f64[0]), v2021, v1987, 1);
            v2073 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1990.f64[0]), v2046, v1990, 1);
            v2055[8] = v2063;
            v2055[9] = v2064;
            v2074 = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1990.f64[0]), v2018, v1990, 1);
            v2075 = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1990.f64[0]), v2021, v1990, 1);
            v2076 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1989.f64[0]), v2046, v1989, 1);
            v2077 = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1989.f64[0]), v2018, v1989, 1);
            v2078 = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1989.f64[0]), v2021, v1989, 1);
            v2079 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1992.f64[0]), v2046, v1992, 1);
            v2080 = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1992.f64[0]), v2018, v1992, 1);
            v2081 = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1992.f64[0]), v2021, v1992, 1);
            v2082 = vmlaq_laneq_f64(vmulq_n_f64(v2045, v1991.f64[0]), v2046, v1991, 1);
            v2083 = vmlaq_laneq_f64(vmulq_n_f64(v2047, v1991.f64[0]), v2018, v1991, 1);
            v2084 = vmlaq_laneq_f64(vmulq_n_f64(v2049, v1991.f64[0]), v2021, v1991, 1);
            v2055[10] = v2066;
            v2055[11] = v2065;
            v2085 = (float64x2_t *)(v2329 + 288 * ((int)v2003 + *(_DWORD *)(v2323 + 4) * (int)v2003));
            v2086 = vaddq_f64(v2069, v2085[2]);
            v2087 = vaddq_f64(v2068, v2085[1]);
            v2088 = vaddq_f64(v2072, v2085[5]);
            v2089 = vaddq_f64(v2071, v2085[4]);
            v2090 = vaddq_f64(v2070, v2085[3]);
            v2091 = vaddq_f64(v2075, v2085[8]);
            v2092 = vaddq_f64(v2074, v2085[7]);
            v2093 = vaddq_f64(v2073, v2085[6]);
            v2094 = vaddq_f64(v2078, v2085[11]);
            v2095 = vaddq_f64(v2077, v2085[10]);
            v2096 = vaddq_f64(v2076, v2085[9]);
            v2097 = v2085[15];
            v2098 = vaddq_f64(v2081, v2085[14]);
            v2099 = vaddq_f64(v2080, v2085[13]);
            v2100 = v2085[12];
            *v2085 = vaddq_f64(v2067, *v2085);
            v2085[1] = v2087;
            v2101 = vaddq_f64(v2084, v2085[17]);
            v2102 = vaddq_f64(v2083, v2085[16]);
            v67 = v2573;
            v2085[2] = v2086;
            v2085[3] = v2090;
            v2085[4] = v2089;
            v2085[5] = v2088;
            v2085[6] = v2093;
            v2085[7] = v2092;
            v2085[8] = v2091;
            v2085[9] = v2096;
            v2085[10] = v2095;
            v2085[11] = v2094;
            v2085[12] = vaddq_f64(v2079, v2100);
            v2085[13] = v2099;
            v2085[14] = v2098;
            v2085[15] = vaddq_f64(v2082, v2097);
            v2085[16] = v2102;
            v2085[17] = v2101;
            v1940 = vsubq_f64(v2565, v2530);
            v1931 = vaddq_f64(v2522, v2582);
            v2103 = (float64x2_t *)(v2320 + 96 * ((int)v2016 + *(_DWORD *)(v2253 + 4) * (int)v2003));
            v2104 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2049, v2009.f64[0]), v2021, v2009, 1), v2103[2]);
            v2105 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2047, v2009.f64[0]), v2018, v2009, 1), v2103[1]);
            v2106 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2049, v2008.f64[0]), v2021, v2008, 1), v2103[5]);
            v2107 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2047, v2008.f64[0]), v2018, v2008, 1), v2103[4]);
            v2108 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2045, v2008.f64[0]), v2046, v2008, 1), v2103[3]);
            v2109 = (float64x2_t)vzip1q_s64((int64x2_t)v2009, (int64x2_t)v2008);
            *v2103 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2045, v2009.f64[0]), v2046, v2009, 1), *v2103);
            v2103[1] = v2105;
            v2110 = (float64x2_t)vzip2q_s64((int64x2_t)v2009, (int64x2_t)v2008);
            v2103[2] = v2104;
            v2103[3] = v2108;
            v2111 = (float64x2_t *)(v1928 + 48 * v1948);
            *v2111 = vmlaq_laneq_f64(vmulq_n_f64(v2109, v1944.f64[0]), v2110, v1944, 1);
            v2103[4] = v2107;
            v2103[5] = v2106;
            v1939 = v2594;
            v2111[1] = vmlaq_laneq_f64(vmulq_n_f64(v2109, v1945.f64[0]), v2110, v1945, 1);
            *(float64x2_t *)(v1928 + 8 * v2002) = vmlaq_laneq_f64(vmulq_n_f64(v2109, _Q5.f64[0]), v2110, _Q5, 1);
            v1936 = (float64x2_t)vzip1q_s64(v2557, v2539);
            v1937 = (int64x2_t)vextq_s8((int8x16_t)v2539, v2548, 8uLL);
            *(float64x2_t *)(v1930 + 16 * v2016) = vsubq_f64(*(float64x2_t *)(v1930 + 16 * v2016), vmlaq_laneq_f64(vmulq_n_f64(v2109, v2490.f64[0]), v2110, v2490, 1));
            v2112 = (float64x2_t *)(v2252 + 32 * ((int)v2016 + *(_DWORD *)(v2250 + 4) * (int)v2016));
            v2113 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2109, v2008.f64[0]), v2110, v2008, 1), v2112[1]);
            *v2112 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2109, v2009.f64[0]), v2110, v2009, 1), *v2112);
            v2112[1] = v2113;
            v1942 += 3;
            --v1941;
          }
          while (v1941);
          *v2300 = v1940;
          *(float64_t *)(v2309 + 8 * v2276) = v2573.f64[0];
          *v2297 = v2608;
          *v2293 = v1936;
          *v2289 = v1937;
          *v2284 = v2594;
          *(float64_t *)(v2315 + 8 * (9 * v1932 + 8)) = v1931.f64[0];
        }
      }
      ++v1932;
      v1923 = v2268;
    }
    while (v1932 != v2303);
  }
  *(_QWORD *)(v2236 + 24) |= 1uLL;
  *(_QWORD *)(v2233 + 24) |= 1uLL;
  *(_QWORD *)(v2211 + 24) |= 1uLL;
  *(_QWORD *)(v2213 + 24) |= 1uLL;
  *(_QWORD *)(v2215 + 24) |= 1uLL;
  *(_QWORD *)(v2217 + 24) |= 1uLL;
  *(_QWORD *)(v2241 + 24) |= 1uLL;
  *(_QWORD *)(v2239 + 24) |= 1uLL;
  *(_QWORD *)(v2237 + 24) |= 1uLL;
  *(_QWORD *)(v2240 + 24) |= 1uLL;
  *(_QWORD *)(a22 + 24) |= 1uLL;
  *(_QWORD *)(a20 + 24) |= 1uLL;
  *(_QWORD *)(a66 + 24) |= 1uLL;
  *(_QWORD *)(a18 + 24) |= 1uLL;
  *(_QWORD *)(a58 + 24) |= 1uLL;
  *(_QWORD *)(a56 + 24) |= 1uLL;
  *(_QWORD *)(a45 + 24) |= 1uLL;
  *(_QWORD *)(a43 + 24) |= 1uLL;
  *(_QWORD *)(a41 + 24) |= 1uLL;
  *(_QWORD *)(a14 + 24) |= 1uLL;
  v74 = v2234;
  v1892 = v2186;
  v1893 = v2188;
  v1891 = v2184;
  v1894 = STACK[0xBA0];
  v2606 = STACK[0xBA0];
  if ((**(_BYTE **)(v2185 + 16) & 1) == 0)
  {
LABEL_405:
    if ((**(_BYTE **)(v1891 + 16) & 1) == 0)
      goto LABEL_406;
    goto LABEL_455;
  }
LABEL_442:
  v2114 = *(int **)(v2204 + 16);
  v2115 = _gc_buffer_get_extent();
  v2116 = _gc_buffer_get_extent();
  v2117 = _gc_buffer_get_extent();
  if (v2115 != 2 || v2116 != v2117)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(v1893 + 24) |= 1uLL;
  }
  v2118 = *(float64x2_t **)(v1893 + 16);
  v2119 = _gc_buffer_get_extent();
  v2120 = _gc_buffer_get_extent();
  v2121 = _gc_buffer_get_extent();
  v2122 = _gc_buffer_get_extent();
  if (v2119 != 2 || v2120 != 2 || v2121 != v2122)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v1892 + 24) |= 1uLL;
  }
  v2123 = *(_QWORD *)(v1892 + 16);
  v2124 = *(_QWORD *)(a10 + 16);
  v2125 = *(int **)(v2190 + 16);
  v2126 = *(_QWORD *)(a66 + 16);
  v2127 = *(_QWORD *)(v2238 + 16);
  v2128 = *(_QWORD *)(v2241 + 16);
  halide_copy_to_host();
  v1892 = v2186;
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v74 >= 1)
  {
    v2129 = v74;
    do
    {
      v2130 = *v2114;
      if (v2130 >> 30 != 3)
      {
        v2131 = 16 * *(int *)(v2124 + 4 * v2130);
        v2132 = (float64x2_t *)(v2123 + 32 * *v2125);
        v2133 = *v2132;
        v2134 = v2132[1];
        v2135 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2132, (int64x2_t)v2134);
        v2136 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2132, (int64x2_t)v2134);
        *(float64x2_t *)(v2128 + v2131) = vsubq_f64(*(float64x2_t *)(v2128 + v2131), vmlaq_laneq_f64(vmulq_n_f64(v2135, v2118->f64[0]), v2136, *v2118, 1));
        v2137 = (float64x2_t *)(v2126 + 32 * ((int)v2130 + *(_DWORD *)(v2127 + 4) * (int)v2130));
        v2138 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2135, v2133.f64[0]), v2136, v2133, 1), *v2137);
        v2139 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2135, v2134.f64[0]), v2136, v2134, 1), v2137[1]);
        *v2137 = v2138;
        v2137[1] = v2139;
      }
      ++v2125;
      ++v2118;
      v2114 += 2;
      --v2129;
    }
    while (v2129);
  }
  *(_QWORD *)(v2241 + 24) |= 1uLL;
  *(_QWORD *)(a66 + 24) |= 1uLL;
  v1893 = v2188;
  v1894 = v2606;
  if ((**(_BYTE **)(v2184 + 16) & 1) == 0)
  {
LABEL_406:
    if ((**(_BYTE **)(v1894 + 16) & 1) == 0)
      return 0;
    goto LABEL_464;
  }
LABEL_455:
  v2140 = *(int **)(v2204 + 16);
  v2141 = _gc_buffer_get_extent();
  v2142 = _gc_buffer_get_extent();
  v2143 = _gc_buffer_get_extent();
  if (v2141 != 2 || v2142 != v2143)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_2d();
    *(_QWORD *)(v1893 + 24) |= 1uLL;
  }
  v2144 = *(float64x2_t **)(v1893 + 16);
  v2145 = _gc_buffer_get_extent();
  v2146 = _gc_buffer_get_extent();
  v2147 = _gc_buffer_get_extent();
  v2148 = _gc_buffer_get_extent();
  if (v2145 != 2 || v2146 != 2 || v2147 != v2148)
  {
    halide_copy_to_host();
    _gc_buffer_get_extent();
    _gc_resize_buffer_3d();
    *(_QWORD *)(v1892 + 24) |= 1uLL;
  }
  v2149 = *(_QWORD *)(v1892 + 16);
  v2150 = *(int **)(v2190 + 16);
  v2151 = *(_QWORD *)(a66 + 16);
  v2152 = *(_QWORD *)(v2238 + 16);
  v2153 = *(_QWORD *)(v2241 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v74 >= 1)
  {
    do
    {
      v2171 = *v2140;
      v2172 = (float64x2_t *)(v2149 + 32 * *v2150);
      v2174 = *v2172;
      v2173 = v2172[1];
      v2175 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2172, (int64x2_t)v2173);
      v2176 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2172, (int64x2_t)v2173);
      *(float64x2_t *)(v2153 + 16 * v2171) = vsubq_f64(*(float64x2_t *)(v2153 + 16 * v2171), vmlaq_laneq_f64(vmulq_n_f64(v2175, v2144->f64[0]), v2176, *v2144, 1));
      if (v2171 >> 30 != 3)
      {
        v2177 = vmlaq_laneq_f64(vmulq_n_f64(v2175, v2174.f64[0]), v2176, v2174, 1);
        v2178 = (float64x2_t *)(v2151 + 32 * ((int)v2171 + *(_DWORD *)(v2152 + 4) * (int)v2171));
        v2179 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v2175, v2173.f64[0]), v2176, v2173, 1), v2178[1]);
        *v2178 = vaddq_f64(v2177, *v2178);
        v2178[1] = v2179;
      }
      ++v2150;
      ++v2144;
      v2140 += 2;
      --v74;
    }
    while (v74);
  }
  *(_QWORD *)(v2241 + 24) |= 1uLL;
  *(_QWORD *)(a66 + 24) |= 1uLL;
  if ((**(_BYTE **)(v2606 + 16) & 1) != 0)
  {
LABEL_464:
    v2154 = *(int **)(a3 + 16);
    v2155 = _gc_buffer_get_extent();
    v2156 = _gc_buffer_get_extent();
    v2157 = _gc_buffer_get_extent();
    if (v2155 != 1 || v2156 != v2157)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_2d();
      *(_QWORD *)(a2 + 24) |= 1uLL;
    }
    v2158 = *(double **)(a2 + 16);
    v2159 = _gc_buffer_get_extent();
    v2160 = _gc_buffer_get_extent();
    v2161 = _gc_buffer_get_extent();
    v2162 = _gc_buffer_get_extent();
    if (v2159 != 1 || v2160 != 1 || v2161 != v2162)
    {
      halide_copy_to_host();
      _gc_buffer_get_extent();
      _gc_resize_buffer_3d();
      *(_QWORD *)(a5 + 24) |= 1uLL;
    }
    v2163 = *(_QWORD *)(a5 + 16);
    v2164 = *(_QWORD *)(a6 + 16);
    v2165 = *(int **)(a12 + 16);
    v2166 = *(_QWORD *)(a14 + 16);
    v2167 = *(_QWORD *)(a15 + 16);
    v2168 = *(_QWORD *)(v2240 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    v2169 = v2187;
    if ((int)v2187 >= 1)
    {
      do
      {
        v2180 = *v2154;
        if (v2180 >> 30 != 3)
        {
          v2181 = 8 * *(int *)(v2164 + 4 * v2180);
          v2182 = *(double *)(v2163 + 8 * *v2165);
          *(double *)(v2168 + v2181) = *(double *)(v2168 + v2181) - v2182 * *v2158;
          v2183 = 8 * ((int)v2180 + *(_DWORD *)(v2167 + 4) * (int)v2180);
          *(double *)(v2166 + v2183) = *(double *)(v2166 + v2183) + v2182 * v2182;
        }
        ++v2158;
        ++v2165;
        v2154 += 2;
        --v2169;
      }
      while (v2169);
    }
    *(_QWORD *)(v2240 + 24) |= 1uLL;
    *(_QWORD *)(a14 + 24) |= 1uLL;
  }
  return 0;
}

uint64_t sub_2396AE53C(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_OWORD *)(a1 + 64);
  v2 = *(_OWORD *)(a1 + 104);
  v3 = *(_OWORD *)(a1 + 120);
  sub_2396A3DB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 1448), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v1, *((uint64_t *)&v1 + 1), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v5, v2, *((uint64_t *)&v2 + 1), v3, *((uint64_t *)&v3 + 1), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    v6,
    v7,
    v8,
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v9,
    v10,
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    v11,
    v12,
    v13,
    v14,
    v15,
    v16,
    *(_QWORD *)(a1 + 320),
    *(_QWORD *)(a1 + 328),
    *(_QWORD *)(a1 + 336),
    *(_QWORD *)(a1 + 344),
    *(_QWORD *)(a1 + 352),
    *(_QWORD *)(a1 + 360),
    v17,
    v18,
    v19,
    v20,
    v21,
    v22,
    v23,
    v24,
    v25,
    *(_QWORD *)(a1 + 440),
    *(_QWORD *)(a1 + 448),
    *(_QWORD *)(a1 + 456),
    *(_QWORD *)(a1 + 464),
    v26,
    v27,
    v28,
    v29);
  return 0;
}

uint64_t sub_2396AEB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t a69;
  unint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int64x2_t v87;
  float64x2_t v88;
  int64x2_t v89;
  int64x2_t *v91;
  int8x16_t v92;
  uint64_t v93;
  double v95;
  uint64_t v98;
  uint64_t v99;
  double *v100;
  double v107;
  double v108;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  double *v116;
  uint64_t v117;
  double v123;
  double v124;
  uint64_t v125;
  double *v126;
  uint64_t v127;
  double v134;
  double v137;
  double v138;
  double *v139;
  float64x2_t *v140;
  double v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  double *v149;
  uint64_t v152;
  float64x2_t *v153;
  float64x2_t *v154;
  float64x2_t v155;
  float64x2_t v157;
  float64x2_t v159;
  double v161;
  double v162;
  float64x2_t v163;
  float64x2_t v166;
  int *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  float64x2_t v176;
  int64x2_t v177;
  float64x2_t *v178;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  int64x2_t v194;
  float64x2_t v195;
  int64x2_t v196;
  float64x2_t v197;
  int64x2_t v198;
  uint64_t v199;
  float64x2_t v200;
  int64x2_t v201;
  float64x2_t *v202;
  float64x2_t v206;
  int64x2_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  float64x2_t v211;
  int64x2_t v212;
  float64x2_t *v213;
  double v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  int64x2_t v221;
  float64x2_t v222;
  uint64_t v223;
  float64x2_t *v224;
  float64x2_t *v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  int *v245;
  uint64_t v246;
  float64x2_t *v247;
  float64x2_t v248;
  float64x2_t *v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  float64x2_t *v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t *v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  uint64_t v305;
  float64x2_t *v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  int *v312;
  uint64_t v313;
  unsigned int v314;
  float64x2_t *v315;
  float64x2_t *v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  double *v338;
  double v344;
  int *v350;
  uint64_t i;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  double *v355;
  uint64_t v358;
  unsigned int v359;
  uint64_t v360;
  unsigned int v361;
  unsigned int v362;
  double *v363;
  uint64_t v364;
  double v369;
  double v374;
  __int128 v375;
  double *v376;
  uint64_t v377;
  double v384;
  double v391;
  __int128 v392;
  double v393;
  __int128 v394;
  double *v395;
  uint64_t v396;
  double v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  float64x2_t *v405;
  float64x2_t *v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  double v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  int *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  float64x2_t *v424;
  float64x2_t v425;
  float64x2_t *v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned int v440;
  unsigned int v441;
  float64x2_t *v442;
  float64x2_t v443;
  float64x2_t *v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t *v463;
  float64x2_t v464;
  float64x2_t *v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  uint64_t v471;
  uint64_t v472;
  float64x2_t *v473;
  float64x2_t *v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  double v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  int *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  float64x2_t *v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t *v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  unsigned int v544;
  float64x2_t *v545;
  float64x2_t v546;
  float64x2_t *v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  uint64_t v555;
  uint64_t v556;
  float64x2_t *v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  int *v563;
  uint64_t v564;
  uint64_t v565;
  float64x2_t *v566;
  float64x2_t *v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  uint64_t v583;
  int64x2_t v584;
  float64x2_t v585;
  int64x2_t v586;
  int64x2_t v587;
  uint64_t v588;
  int8x16_t *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  double *v593;
  double v597;
  double v598;
  int *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  double *v609;
  uint64_t v610;
  double v615;
  double v620;
  __int128 v621;
  double *v622;
  uint64_t v623;
  double v630;
  double v633;
  __int128 v634;
  double v635;
  double *v636;
  uint64_t v637;
  double v642;
  uint64_t v643;
  unsigned int v644;
  uint64_t v645;
  double *v646;
  uint64_t v649;
  float64x2_t *v650;
  float64x2_t *v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  int v664;
  int v665;
  int *v666;
  uint64_t v667;
  uint64_t v668;
  float64x2_t *v669;
  float64x2_t *v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t *v702;
  float64x2_t v703;
  float64x2_t *v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  uint64_t v710;
  unsigned int v711;
  float64x2_t *v712;
  float64x2_t v713;
  float64x2_t *v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  uint64_t v726;
  float64x2_t *v727;
  float64x2_t *v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  int v748;
  int *v749;
  uint64_t v750;
  float64x2_t *v751;
  float64x2_t v752;
  float64x2_t *v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  unsigned int v764;
  float64x2_t *v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t *v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  uint64_t v809;
  float64x2_t *v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  int *v816;
  uint64_t v817;
  unsigned int v818;
  float64x2_t *v819;
  float64x2_t *v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  int v839;
  float64x2_t *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  double *v845;
  double v851;
  int *v857;
  uint64_t j;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  double *v862;
  uint64_t v865;
  unsigned int v866;
  uint64_t v867;
  unsigned int v868;
  unsigned int v869;
  double *v870;
  uint64_t v871;
  double v876;
  double *v877;
  uint64_t v878;
  double v885;
  double v892;
  __int128 v893;
  double v894;
  double *v895;
  uint64_t v896;
  double v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  float64x2_t *v905;
  uint64_t v906;
  double v910;
  float64x2_t v911;
  float64x2_t v912;
  double v916;
  float64x2_t v917;
  float64x2_t v920;
  float64x2_t v924;
  int *v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  float64x2_t v931;
  int64x2_t v932;
  float64x2_t *v933;
  double v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  uint64_t v943;
  unsigned int v944;
  unsigned int v945;
  uint64_t v946;
  float64x2_t v947;
  int64x2_t v948;
  float64x2_t v949;
  int64x2_t v950;
  float64x2_t v951;
  int64x2_t v952;
  float64x2_t *v953;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  int64x2_t v970;
  float64x2_t v971;
  int64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  int64x2_t v975;
  int64x2_t v976;
  uint64_t v977;
  float64x2_t v978;
  int64x2_t v979;
  float64x2_t *v980;
  float64x2_t v984;
  uint64_t v985;
  uint64_t v986;
  float64x2_t *v987;
  float64x2_t *v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  double v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  int *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  float64x2_t *v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t *v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  unsigned int v1055;
  float64x2_t *v1056;
  float64x2_t v1057;
  float64x2_t *v1058;
  float64x2_t v1059;
  float64x2_t v1060;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  float64x2_t *v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  int *v1073;
  uint64_t v1074;
  uint64_t v1075;
  float64x2_t *v1076;
  float64x2_t *v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  unint64_t v1081;
  unint64_t v1082;
  unint64_t v1083;
  unint64_t v1084;
  unint64_t v1085;
  unint64_t v1086;
  unint64_t v1087;
  unint64_t v1088;
  unint64_t v1089;
  unint64_t v1090;
  unint64_t v1092;
  unint64_t v1093;
  unint64_t v1094;
  unint64_t v1098;
  unint64_t v1099;
  unint64_t v1100;
  unint64_t v1101;
  unint64_t v1102;
  unint64_t v1103;
  unint64_t v1104;
  unint64_t v1105;
  int *v1106;
  uint64_t v1107;
  int *v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  int *v1140;
  uint64_t v1141;
  int *v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  float64x2_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  unint64_t v1151;
  uint64_t v1152;
  double v1153;
  uint64_t v1154;
  double v1155;
  uint64_t v1156;
  unint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  double v1160;
  uint64_t v1161;
  unint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  int v1165;
  uint64_t v1166;
  unint64_t v1167;
  uint64_t v1168;
  int v1169;
  int *v1170;
  int v1171;
  int *v1172;
  int v1173;
  uint64_t v1174;
  int v1175;
  uint64_t v1176;
  int v1177;
  uint64_t v1178;
  int v1179;
  uint64_t v1180;
  int v1181;
  float64x2_t *v1182;
  uint64_t v1183;
  float64x2_t *v1184;
  int v1185;
  uint64_t v1186;
  double v1187;
  uint64_t v1188;
  __int128 v1189;
  float64x2_t *v1190;
  uint64_t v1191;
  float64x2_t *v1192;
  __int128 v1193;
  float64x2_t *v1194;
  uint64_t v1195;
  float64x2_t *v1196;
  uint64_t v1197;
  uint64_t v1198;
  float64x2_t *v1199;
  uint64_t v1200;
  uint64_t v1201;
  float64x2_t *v1202;
  uint64_t v1203;
  uint64_t v1204;
  double v1205;
  uint64_t v1206;
  float64x2_t *v1207;
  uint64_t v1208;
  uint64_t v1209;
  float64x2_t v1210;
  uint64_t v1211;
  float64x2_t v1212;
  uint64_t v1213;
  double v1214;
  uint64_t v1215;
  double v1216;
  uint64_t v1217;
  float64x2_t v1218;
  uint64_t v1219;
  float64x2_t v1220;
  uint64_t v1221;
  float64x2_t v1222;
  uint64_t v1223;
  float64x2_t v1224;
  uint64_t v1225;
  float64x2_t v1226;
  uint64_t v1227;
  float64x2_t v1228;
  uint64_t v1229;
  float64x2_t v1230;
  uint64_t v1231;
  float64x2_t v1232;
  uint64_t v1233;
  float64x2_t v1234;
  uint64_t v1235;
  float64x2_t v1236;
  uint64_t v1237;
  float64x2_t v1238;
  uint64_t v1239;
  float64x2_t v1240;
  uint64_t v1241;
  float64x2_t v1242;
  uint64_t v1243;
  float64x2_t v1244;
  uint64_t v1245;
  float64x2_t v1246;
  uint64_t v1247;
  float64x2_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  int *v1254;
  uint64_t v1255;
  int *v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  int8x16_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;

  v1082 = STACK[0x798];
  v69 = STACK[0x790];
  v1086 = STACK[0x770];
  v1087 = STACK[0x778];
  v1088 = STACK[0x760];
  v1089 = STACK[0x750];
  v1084 = STACK[0x738];
  v1085 = STACK[0x768];
  v1100 = STACK[0x730];
  v1101 = STACK[0x728];
  v1102 = STACK[0x720];
  v1103 = STACK[0x718];
  v1098 = STACK[0x710];
  v1099 = STACK[0x708];
  v1093 = STACK[0x6F0];
  v1094 = STACK[0x6F8];
  v1092 = STACK[0x6E8];
  v1090 = STACK[0x6E0];
  v1104 = STACK[0x700];
  v1083 = STACK[0x780];
  v70 = STACK[0x788];
  v71 = *(unsigned int **)(a1 + 16);
  halide_copy_to_host();
  v1119 = v71[2];
  v1120 = *v71;
  if ((**(_BYTE **)(v70 + 16) & 1) == 0)
  {
    v1105 = STACK[0x7A0];
    if ((**(_BYTE **)(v69 + 16) & 1) == 0)
      goto LABEL_3;
    goto LABEL_32;
  }
  v1081 = v69;
  v72 = *(_QWORD *)(a2 + 16);
  v1203 = *(_QWORD *)(a5 + 16);
  v1106 = *(int **)(a7 + 16);
  v1276 = *(_QWORD *)(a13 + 16);
  v1272 = *(_QWORD *)(a14 + 16);
  v73 = *(_QWORD *)(a15 + 16);
  v1123 = *(_QWORD *)(a16 + 16);
  v74 = *(_QWORD *)(a19 + 16);
  v1121 = *(_QWORD *)(a20 + 16);
  v75 = *(_QWORD *)(a21 + 16);
  v1143 = *(_QWORD *)(a26 + 16);
  v1268 = *(_QWORD *)(a27 + 16);
  v76 = *(_QWORD *)(a30 + 16);
  v1115 = *(_QWORD *)(a31 + 16);
  v1117 = *(_QWORD *)(a22 + 16);
  v77 = *(_QWORD *)(a32 + 16);
  v1139 = *(_QWORD *)(a55 + 16);
  v1264 = *(_QWORD *)(a56 + 16);
  v78 = *(_QWORD *)(a57 + 16);
  v1111 = *(_QWORD *)(a58 + 16);
  v1113 = *(_QWORD *)(a33 + 16);
  v1137 = *(_QWORD *)(a68 + 16);
  v1135 = *(_QWORD *)(a69 + 16);
  v1280 = *(_QWORD *)(v1090 + 16);
  v79 = *(_QWORD *)(v1092 + 16);
  v80 = *(_QWORD *)(v1093 + 16);
  v81 = *(_QWORD *)(v1094 + 16);
  v1133 = *(_QWORD *)(v1104 + 16);
  v1131 = *(_QWORD *)(v1099 + 16);
  v1129 = *(_QWORD *)(v1103 + 16);
  v1127 = *(_QWORD *)(v1102 + 16);
  v1107 = *(_QWORD *)(v1100 + 16);
  v1109 = *(_QWORD *)(v1101 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  if ((int)v1120 >= 1)
  {
    v84 = 0;
    do
    {
      if (v84)
      {
        v85 = v1106[v84 - 1];
        v1125 = v84;
        v1208 = v1106[v84];
        if (v85 < (int)v1208)
          goto LABEL_13;
      }
      else
      {
        v85 = 0;
        v1125 = 0;
        v1208 = *v1106;
        if ((int)v1208 > 0)
        {
LABEL_13:
          v86 = v1109 + 72 * v1125;
          v87 = *(int64x2_t *)v86;
          v88 = *(float64x2_t *)(v86 + 16);
          _Q22 = *(int64x2_t *)(v86 + 32);
          v89 = *(int64x2_t *)(v86 + 48);
          *(_QWORD *)&v82 = *(_QWORD *)(v86 + 64);
          v91 = (int64x2_t *)(v1107 + 24 * v1125);
          v92 = *(int8x16_t *)v91;
          *(_QWORD *)&v83 = v91[1].i64[0];
          v93 = v85;
          v1185 = *(_DWORD *)(v1123 + 4);
          v1181 = *(_DWORD *)(v1121 + 4);
          v1177 = *(_DWORD *)(v1117 + 4);
          v1173 = *(_DWORD *)(v1115 + 4);
          v1169 = *(_DWORD *)(v1113 + 4);
          v1165 = *(_DWORD *)(v1111 + 4);
          _D25 = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
          *(_QWORD *)&v95 = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 8uLL).u64[0];
          _D12 = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
          _Q13 = (float64x2_t)vextq_s8(v92, v92, 8uLL);
          v1244 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v88.f64[0], 0);
          v1248 = (float64x2_t)vdupq_laneq_s64(v87, 1);
          v1236 = (float64x2_t)vdupq_laneq_s64(_Q22, 1);
          v1240 = (float64x2_t)vdupq_lane_s64(_Q22.i64[0], 0);
          v1228 = (float64x2_t)vdupq_lane_s64(v82, 0);
          v1232 = (float64x2_t)vdupq_laneq_s64(v89, 1);
          v1260 = v1208 - v85;
          v1256 = (int *)(v1203 + 4 * v85);
          v1220 = (float64x2_t)vdupq_lane_s64(v83, 0);
          v1224 = (float64x2_t)vdupq_laneq_s64(*v91, 1);
          v1212 = v88;
          v1216 = *(double *)v87.i64;
          v1193 = v82;
          v1197 = _Q22.i64[0];
          v1189 = v83;
          v1162 = _D25;
          v1151 = _D12;
          v1155 = v95;
          v1147 = _Q13;
          do
          {
            v98 = *(int *)(v1203 + 4 * v93);
            v99 = *(int *)(v72 + 24 * v98);
            v100 = (double *)(v1280 + 24 * v98);
            _Q4 = *(_OWORD *)v100;
            __asm { FMLA            D6, D25, V4.D[1] }
            v107 = v100[2];
            v108 = _D6 + v107 * v88.f64[0];
            __asm { FMLA            D6, D22, V4.D[1] }
            _D29 = _D6 + v107 * v95;
            __asm { FMLA            D6, D12, V4.D[1] }
            _D30 = _D6 + v107 * *(double *)&v82;
            *(double *)(v1133 + 8 * v99) = *(double *)(v1133 + 8 * v99)
                                         - (v108 * *(double *)v92.i64
                                          + _D29 * _Q13.f64[0]
                                          + _D30 * *(double *)&v83);
            v1252 = 6 * v98;
            v113 = v1256;
            v114 = v1260;
            do
            {
              v146 = *v113;
              v147 = *(_DWORD *)(v72 + 24 * v146);
              if (v99 <= v147)
              {
                v148 = 8 * (int)(v147 + *(_DWORD *)(v1272 + 4) * v99);
                v149 = (double *)(v1280 + 24 * v146);
                _Q4 = *(_OWORD *)v149;
                __asm { FMLA            D6, D29, V4.D[1] }
                *(double *)(v1276 + v148) = *(double *)(v1276 + v148) - (_D6 + _D30 * v149[2]);
              }
              v115 = 6 * v146;
              v116 = (double *)(v73 + 24 * (v1185 * (int)v99 + *(_DWORD *)(v72 + ((24 * v146) | 4))));
              v117 = v79 + 72 * v146;
              _Q6 = *(_OWORD *)(v117 + 16);
              _Q7 = *(_OWORD *)(v117 + 32);
              _Q16 = *(_OWORD *)(v117 + 48);
              __asm
              {
                FMLA            D17, D29, V6.D[1]
                FMLA            D4, D30, V16.D[1]
                FMLA            D6, D29, V7.D[1]
              }
              *(double *)&_Q7 = *v116 - vmlad_n_f64(_D17, _D30, *(double *)&_Q16);
              v123 = v116[1] - _D4;
              v124 = v116[2] - (*(double *)&_Q6 + _D30 * *(double *)(v117 + 64));
              *((double *)&_Q7 + 1) = v123;
              *(_OWORD *)v116 = _Q7;
              v116[2] = v124;
              v125 = 6 * v146 + 4;
              v126 = (double *)(v74 + 48 * (v1181 * (int)v99 + *(_DWORD *)(v72 + 4 * v125)));
              v127 = v80 + 144 * v146;
              _Q18 = *(_OWORD *)(v127 + 48);
              _Q19 = *(_OWORD *)(v127 + 64);
              _Q31 = *(_OWORD *)(v127 + 80);
              _Q8 = *(_OWORD *)(v127 + 96);
              _Q9 = *(_OWORD *)(v127 + 112);
              _Q10 = *(_OWORD *)(v127 + 128);
              v134 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v108, *(double *)v127), _D29, *(double *)&_Q18), _D30, *(double *)&_Q8);
              __asm
              {
                FMLA            D7, D29, V18.D[1]
                FMLA            D7, D30, V8.D[1]
              }
              *(double *)&_Q18 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v108, *(double *)(v127 + 16)), _D29, *(double *)&_Q19), _D30, *(double *)&_Q9);
              __asm
              {
                FMLA            D16, D29, V19.D[1]
                FMLA            D16, D30, V9.D[1]
              }
              *(double *)&_Q19 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v108, *(double *)(v127 + 32)), _D29, *(double *)&_Q31), _D30, *(double *)&_Q10);
              __asm
              {
                FMLA            D17, D29, V31.D[1]
                FMLA            D17, D30, V10.D[1]
              }
              *(double *)&_Q31 = *v126 - v134;
              v137 = v126[1] - *(double *)&_Q7;
              *(double *)&_Q7 = v126[2] - *(double *)&_Q18;
              v138 = v126[3] - *(double *)&_Q16;
              *(double *)&_Q16 = v126[4] - *(double *)&_Q19;
              *((double *)&_Q31 + 1) = v137;
              *((double *)&_Q7 + 1) = v138;
              *((double *)&_Q16 + 1) = v126[5] - _D17;
              *(_OWORD *)v126 = _Q31;
              *((_OWORD *)v126 + 1) = _Q7;
              *((_OWORD *)v126 + 2) = _Q16;
              v139 = (double *)(v75 + 16 * (v1177 * (int)v99 + *(_DWORD *)(4 * v115 + v72 + 20)));
              v140 = (float64x2_t *)(v81 + 8 * v115);
              _Q4 = v140[1];
              _Q6 = *(_OWORD *)(v81 + 8 * v125);
              __asm
              {
                FMLA            D2, D29, V4.D[1]
                FMLA            D2, D30, V6.D[1]
              }
              v145 = v139[1] - _D2;
              *v139 = *v139
                    - vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v108, v140->f64[0]), _D29, _Q4.f64[0]), _D30, *(double *)&_Q6);
              v139[1] = v145;
              ++v113;
              --v114;
            }
            while (v114);
            v152 = *(int *)(v72 + ((24 * v98) | 4));
            v153 = (float64x2_t *)(v1131 + 24 * v152);
            _Q4.f64[0] = v153[1].f64[0];
            v154 = (float64x2_t *)(v79 + 72 * v98);
            v155 = v154[1];
            _Q16 = v154[2];
            v157 = v154[3];
            _Q18 = (float64x2_t)vextq_s8((int8x16_t)v155, (int8x16_t)_Q16, 8uLL);
            v159 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v154, *(double *)v87.i64), v1248, _Q18), v1244, v157);
            __asm { FMLA            D19, D25, V16.D[1] }
            v161 = v154[4].f64[0];
            v162 = _D19 + v161 * v88.f64[0];
            v163 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(*v154, v88, 1), v1240, _Q18), v1236, v157);
            __asm { FMLA            D19, D22, V16.D[1] }
            _D31 = _D19 + v161 * v95;
            v166 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v154, *(double *)v89.i64), v1232, _Q18), v1228, v157);
            __asm { FMLA            D6, D12, V16.D[1] }
            _D9 = _D6 + v161 * *(double *)&v82;
            v155.f64[0] = v162 * *(double *)v92.i64 + _D31 * _Q13.f64[0] + _D9 * *(double *)&v83;
            *v153 = vsubq_f64(*v153, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v159, *(double *)v92.i64), v1224, v163), v1220, v166));
            *(_QWORD *)&v153[1].f64[0] = *(_OWORD *)&vsubq_f64(_Q4, v155);
            v169 = v1256;
            v170 = v1260;
            do
            {
              v208 = *v169;
              v209 = *(_DWORD *)(v72 + 24 * v208 + 4);
              if (v152 <= v209)
              {
                v210 = v1143 + 72 * (int)(v209 + *(_DWORD *)(v1268 + 4) * v152);
                v211 = *(float64x2_t *)(v210 + 16);
                v212 = *(int64x2_t *)(v210 + 32);
                _Q16.f64[0] = *(float64_t *)(v210 + 64);
                v213 = (float64x2_t *)(v79 + 72 * v208);
                _Q17 = *v213;
                _Q18 = v213[1];
                _Q19 = v213[2];
                _Q10 = v213[3];
                v217 = v213[4].f64[0];
                v218 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v159, v213->f64[0]), v163, _Q18, 1), v166, _Q10.f64[0]);
                __asm { FMLA            D13, D31, V18.D[1] }
                _Q13.f64[0] = vmlad_n_f64(_Q13.f64[0], _D9, _Q10.f64[0]);
                v219 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v159, *v213, 1), v163, _Q19.f64[0]), v166, _Q10, 1);
                __asm { FMLA            D17, D9, V10.D[1] }
                v220 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v159, _Q18.f64[0]), v163, _Q19, 1), v166, v217);
                __asm { FMLA            D18, D31, V19.D[1] }
                _Q18.f64[0] = _Q18.f64[0] + _D9 * v217;
                v221 = (int64x2_t)vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v211, (int8x16_t)v212, 8uLL), v219);
                v222 = vsubq_f64(*(float64x2_t *)(v210 + 48), v220);
                *(float64x2_t *)v210 = vsubq_f64(*(float64x2_t *)v210, v218);
                *(int64x2_t *)(v210 + 16) = vzip1q_s64((int64x2_t)vsubq_f64(v211, _Q13), v221);
                *(int8x16_t *)(v210 + 32) = vextq_s8((int8x16_t)v221, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v212, 1), _Q17), 8uLL);
                *(float64x2_t *)(v210 + 48) = v222;
                *(_QWORD *)(v210 + 64) = *(_OWORD *)&vsubq_f64(_Q16, _Q18);
              }
              v171 = 6 * v208 + 4;
              v172 = v76 + 144 * (v1173 * (int)v152 + *(_DWORD *)(v72 + 4 * v171));
              v173 = *(float64x2_t *)(v172 + 16);
              v174 = *(int64x2_t *)(v172 + 32);
              v176 = *(float64x2_t *)(v172 + 64);
              v175 = *(int64x2_t *)(v172 + 80);
              _Q13 = *(float64x2_t *)(v172 + 112);
              v177 = *(int64x2_t *)(v172 + 128);
              v178 = (float64x2_t *)(v80 + 144 * v208);
              _Q20 = *v178;
              _Q21 = v178[1];
              _Q17 = v178[2];
              _Q22 = v178[3];
              _Q23 = v178[4];
              _Q19 = v178[5];
              _Q24 = v178[6];
              _Q25 = v178[7];
              _Q2 = v178[8];
              v188 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v159, v178->f64[0]), v163, _Q22.f64[0]), v166, _Q24.f64[0]);
              _Q18.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v162, v178->f64[0]), _D31, _Q22.f64[0]), _D9, _Q24.f64[0]);
              v189 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v159, *v178, 1), v163, _Q22, 1), v166, _Q24, 1);
              __asm
              {
                FMLA            D20, D31, V22.D[1]
                FMLA            D20, D9, V24.D[1]
              }
              v190 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v159, _Q21.f64[0]), v163, _Q23.f64[0]), v166, _Q25.f64[0]);
              _Q24.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v162, _Q21.f64[0]), _D31, _Q23.f64[0]), _D9, _Q25.f64[0]);
              v191 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v159, _Q21, 1), v163, _Q23, 1), v166, _Q25, 1);
              __asm
              {
                FMLA            D21, D31, V23.D[1]
                FMLA            D21, D9, V25.D[1]
              }
              v192 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v159, _Q17.f64[0]), v163, _Q19.f64[0]), v166, _Q2.f64[0]);
              _Q25.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v162, _Q17.f64[0]), _D31, _Q19.f64[0]), _D9, _Q2.f64[0]);
              v193 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v159, _Q17, 1), v163, _Q19, 1), v166, _Q2, 1);
              __asm
              {
                FMLA            D17, D31, V19.D[1]
                FMLA            D17, D9, V2.D[1]
              }
              v194 = (int64x2_t)vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v173, (int8x16_t)v174, 8uLL), v189);
              v195 = vsubq_f64(*(float64x2_t *)(v172 + 48), v190);
              v196 = (int64x2_t)vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v176, (int8x16_t)v175, 8uLL), v191);
              v197 = vsubq_f64(*(float64x2_t *)(v172 + 96), v192);
              v198 = (int64x2_t)vsubq_f64((float64x2_t)vextq_s8((int8x16_t)_Q13, (int8x16_t)v177, 8uLL), v193);
              *(float64x2_t *)v172 = vsubq_f64(*(float64x2_t *)v172, v188);
              *(int64x2_t *)(v172 + 16) = vzip1q_s64((int64x2_t)vsubq_f64(v173, _Q18), v194);
              *(int8x16_t *)(v172 + 32) = vextq_s8((int8x16_t)v194, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v174, 1), _Q20), 8uLL);
              *(float64x2_t *)(v172 + 48) = v195;
              *(int64x2_t *)(v172 + 64) = vzip1q_s64((int64x2_t)vsubq_f64(v176, _Q24), v196);
              *(int8x16_t *)(v172 + 80) = vextq_s8((int8x16_t)v196, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v175, 1), _Q21), 8uLL);
              *(float64x2_t *)(v172 + 96) = v197;
              *(int64x2_t *)(v172 + 112) = vzip1q_s64((int64x2_t)vsubq_f64(_Q13, _Q25), v198);
              *(int8x16_t *)(v172 + 128) = vextq_s8((int8x16_t)v198, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v177, 1), _Q17), 8uLL);
              v199 = v77 + 48 * (v1169 * (int)v152 + *(_DWORD *)(v72 + 24 * v208 + 20));
              v200 = *(float64x2_t *)(v199 + 16);
              v201 = *(int64x2_t *)(v199 + 32);
              v202 = (float64x2_t *)(v81 + 48 * v208);
              _Q4 = *v202;
              _Q6 = v202[1];
              _Q7 = *(float64x2_t *)(v81 + 8 * v171);
              _Q16 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v159, v202->f64[0]), v163, _Q6.f64[0]), v166, _Q7.f64[0]);
              _Q17.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v162, v202->f64[0]), _D31, _Q6.f64[0]), _D9, _Q7.f64[0]);
              _Q18 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v159, *v202, 1), v163, _Q6, 1), v166, _Q7, 1);
              __asm
              {
                FMLA            D4, D31, V6.D[1]
                FMLA            D4, D9, V7.D[1]
              }
              v206 = (float64x2_t)vdupq_laneq_s64(v201, 1);
              v207 = (int64x2_t)vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v200, (int8x16_t)v201, 8uLL), _Q18);
              *(float64x2_t *)v199 = vsubq_f64(*(float64x2_t *)v199, _Q16);
              *(int64x2_t *)(v199 + 16) = vzip1q_s64((int64x2_t)vsubq_f64(v200, _Q17), v207);
              *(int8x16_t *)(v199 + 32) = vextq_s8((int8x16_t)v207, (int8x16_t)vsubq_f64(v206, _Q4), 8uLL);
              ++v169;
              --v170;
            }
            while (v170);
            v223 = *(int *)(v72 + 4 * (v1252 + 4));
            v224 = (float64x2_t *)(v1129 + 48 * v223);
            v225 = (float64x2_t *)(v80 + 144 * v98);
            v226 = v225[1];
            v227 = v225[2];
            v228 = v225[3];
            v230 = v225[4];
            v229 = v225[5];
            v231 = v225[6];
            v232 = v225[7];
            v233 = v225[8];
            v234 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v225, v1216), v1248, v228), v1244, v231);
            v235 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v226, v1216), v1248, v230), v1244, v232);
            v236 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v227, v1216), v1248, v229), v1244, v233);
            v237 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(*v225, v1212, 1), v1240, v228), v1236, v231);
            v238 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v226, v1212, 1), v1240, v230), v1236, v232);
            v239 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v227, v1212, 1), v1240, v229), v1236, v233);
            v240 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v225, *(double *)v89.i64), v1232, v228), v1228, v231);
            v241 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v226, *(double *)v89.i64), v1232, v230), v1228, v232);
            v242 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v227, *(double *)v89.i64), v1232, v229), v1228, v233);
            v243 = vsubq_f64(v224[2], vmlaq_f64(vmlaq_f64(vmulq_n_f64(v236, *(double *)v92.i64), v1224, v239), v1220, v242));
            v244 = vsubq_f64(v224[1], vmlaq_f64(vmlaq_f64(vmulq_n_f64(v235, *(double *)v92.i64), v1224, v238), v1220, v241));
            *v224 = vsubq_f64(*v224, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v234, *(double *)v92.i64), v1224, v237), v1220, v240));
            v224[1] = v244;
            v224[2] = v243;
            v245 = v1256;
            v246 = v1260;
            do
            {
              v257 = *v245;
              v258 = 6 * v257;
              v259 = 6 * v257 + 4;
              v260 = *(_DWORD *)(v72 + 4 * v259);
              if (v223 <= v260)
              {
                v261 = (float64x2_t *)(v80 + 144 * v257);
                v262 = v261[1];
                v264 = v261[2];
                v263 = v261[3];
                v265 = (float64x2_t *)(v1139 + 288 * (int)(v260 + *(_DWORD *)(v1264 + 4) * v223));
                v267 = v261[4];
                v266 = v261[5];
                v268 = v261[6];
                v269 = v261[7];
                v270 = v261[8];
                v271 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v234, v261->f64[0]), v237, v263.f64[0]), v240, v268.f64[0]);
                v272 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v235, v261->f64[0]), v238, v263.f64[0]), v241, v268.f64[0]);
                v273 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v236, v261->f64[0]), v239, v263.f64[0]), v242, v268.f64[0]);
                v274 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v234, *v261, 1), v237, v263, 1), v240, v268, 1);
                v275 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v235, *v261, 1), v238, v263, 1), v241, v268, 1);
                v276 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v236, *v261, 1), v239, v263, 1), v242, v268, 1);
                v277 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v234, v262.f64[0]), v237, v267.f64[0]), v240, v269.f64[0]);
                v278 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v235, v262.f64[0]), v238, v267.f64[0]), v241, v269.f64[0]);
                v279 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v236, v262.f64[0]), v239, v267.f64[0]), v242, v269.f64[0]);
                v280 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v234, v262, 1), v237, v267, 1), v240, v269, 1);
                v281 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v235, v262, 1), v238, v267, 1), v241, v269, 1);
                v282 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v236, v262, 1), v239, v267, 1), v242, v269, 1);
                v283 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v234, v264.f64[0]), v237, v266.f64[0]), v240, v270.f64[0]);
                v284 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v235, v264.f64[0]), v238, v266.f64[0]), v241, v270.f64[0]);
                v285 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v236, v264.f64[0]), v239, v266.f64[0]), v242, v270.f64[0]);
                v286 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v234, v264, 1), v237, v266, 1), v240, v270, 1);
                v287 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v235, v264, 1), v238, v266, 1), v241, v270, 1);
                v288 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v236, v264, 1), v239, v266, 1), v242, v270, 1);
                v289 = vsubq_f64(v265[2], v273);
                v290 = vsubq_f64(v265[1], v272);
                v291 = vsubq_f64(v265[5], v276);
                v292 = vsubq_f64(v265[4], v275);
                v293 = vsubq_f64(v265[3], v274);
                v294 = vsubq_f64(v265[8], v279);
                v295 = vsubq_f64(v265[7], v278);
                v296 = vsubq_f64(v265[6], v277);
                v297 = vsubq_f64(v265[11], v282);
                v298 = vsubq_f64(v265[10], v281);
                v299 = vsubq_f64(v265[9], v280);
                v300 = v265[15];
                v301 = vsubq_f64(v265[14], v285);
                v302 = vsubq_f64(v265[13], v284);
                v303 = vsubq_f64(v265[12], v283);
                v304 = vsubq_f64(v265[17], v288);
                *v265 = vsubq_f64(*v265, v271);
                v265[1] = v290;
                v265[2] = v289;
                v265[3] = v293;
                v265[4] = v292;
                v265[5] = v291;
                v265[6] = v296;
                v265[7] = v295;
                v265[8] = v294;
                v265[9] = v299;
                v265[10] = v298;
                v265[11] = v297;
                v265[12] = v303;
                v265[13] = v302;
                v265[14] = v301;
                v265[15] = vsubq_f64(v300, v286);
                v265[16] = vsubq_f64(v265[16], v287);
                v265[17] = v304;
              }
              v247 = (float64x2_t *)(v78 + 96 * (v1165 * (int)v223 + *(_DWORD *)(v72 + 4 * v258 + 20)));
              v248 = v247[4];
              v249 = (float64x2_t *)(v81 + 8 * v258);
              v250 = *v249;
              v251 = v249[1];
              v252 = *(float64x2_t *)(v81 + 8 * v259);
              v253 = vsubq_f64(v247[2], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v236, v249->f64[0]), v239, v251.f64[0]), v242, v252.f64[0]));
              v254 = vsubq_f64(v247[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v235, v249->f64[0]), v238, v251.f64[0]), v241, v252.f64[0]));
              v255 = vsubq_f64(v247[5], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v236, *v249, 1), v239, v251, 1), v242, v252, 1));
              v256 = vsubq_f64(v247[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v234, *v249, 1), v237, v251, 1), v240, v252, 1));
              *v247 = vsubq_f64(*v247, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v234, v249->f64[0]), v237, v251.f64[0]), v240, v252.f64[0]));
              v247[1] = v254;
              v247[2] = v253;
              v247[3] = v256;
              v247[4] = vsubq_f64(v248, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v235, v250, 1), v238, v251, 1), v241, v252, 1));
              v247[5] = v255;
              ++v245;
              --v246;
            }
            while (v246);
            v305 = *(int *)(v72 + 4 * v1252 + 20);
            v306 = (float64x2_t *)(v81 + 8 * v1252);
            v307 = *(float64x2_t *)(v81 + 8 * (v1252 + 4));
            v308 = v306[1];
            v88 = v1212;
            *(double *)v87.i64 = v1216;
            v309 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v306, v1216), v1248, v308), v1244, v307);
            v310 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(*v306, v1212, 1), v1240, v308), v1236, v307);
            v311 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v306, *(double *)v89.i64), v1232, v308), v1228, v307);
            *(float64x2_t *)(v1127 + 16 * v305) = vsubq_f64(*(float64x2_t *)(v1127 + 16 * v305), vmlaq_f64(vmlaq_f64(vmulq_n_f64(v309, *(double *)v92.i64), v1224, v310), v1220, v311));
            v312 = v1256;
            v313 = v1260;
            v82 = v1193;
            _Q22.i64[0] = v1197;
            v83 = v1189;
            _D25 = v1162;
            _D12 = v1151;
            v95 = v1155;
            _Q13 = v1147;
            do
            {
              v314 = *(_DWORD *)(v72 + 24 * *v312 + 20);
              if (v305 <= v314)
              {
                v315 = (float64x2_t *)(v1137 + 32 * (int)(v314 + *(_DWORD *)(v1135 + 4) * v305));
                v316 = (float64x2_t *)(v81 + 48 * *v312);
                v317 = v316[1];
                v318 = v316[2];
                v319 = vsubq_f64(v315[1], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v309, *v316, 1), v310, v317, 1), v311, v318, 1));
                *v315 = vsubq_f64(*v315, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v309, v316->f64[0]), v310, v317.f64[0]), v311, v318.f64[0]));
                v315[1] = v319;
              }
              ++v312;
              --v313;
            }
            while (v313);
            ++v93;
          }
          while (v93 != v1208);
        }
      }
      v84 = v1125 + 1;
    }
    while (v1125 + 1 != v1120);
  }
  *(_QWORD *)(v1102 + 24) |= 1uLL;
  *(_QWORD *)(v1103 + 24) |= 1uLL;
  *(_QWORD *)(v1099 + 24) |= 1uLL;
  *(_QWORD *)(v1104 + 24) |= 1uLL;
  *(_QWORD *)(a32 + 24) |= 1uLL;
  *(_QWORD *)(a30 + 24) |= 1uLL;
  *(_QWORD *)(a26 + 24) |= 1uLL;
  *(_QWORD *)(a21 + 24) |= 1uLL;
  *(_QWORD *)(a19 + 24) |= 1uLL;
  *(_QWORD *)(a68 + 24) |= 1uLL;
  *(_QWORD *)(a57 + 24) |= 1uLL;
  *(_QWORD *)(a55 + 24) |= 1uLL;
  *(_QWORD *)(a15 + 24) |= 1uLL;
  *(_QWORD *)(a13 + 24) |= 1uLL;
  v1105 = STACK[0x7A0];
  if ((**(_BYTE **)(v1081 + 16) & 1) == 0)
  {
LABEL_3:
    if ((**(_BYTE **)(v1082 + 16) & 1) == 0)
      goto LABEL_4;
    goto LABEL_80;
  }
LABEL_32:
  v320 = *(_QWORD *)(v1084 + 16);
  v1163 = *(_QWORD *)(v1089 + 16);
  v1140 = *(int **)(v1088 + 16);
  v321 = *(_QWORD *)(a8 + 16);
  v322 = *(_QWORD *)(a10 + 16);
  v323 = *(_QWORD *)(a11 + 16);
  v324 = *(_QWORD *)(a12 + 16);
  v1237 = *(_QWORD *)(a13 + 16);
  v1233 = *(_QWORD *)(a14 + 16);
  v1281 = *(_QWORD *)(a17 + 16);
  v1277 = *(_QWORD *)(a18 + 16);
  v1273 = *(_QWORD *)(a19 + 16);
  v1269 = *(_QWORD *)(a20 + 16);
  v1265 = *(_QWORD *)(a21 + 16);
  v1261 = *(_QWORD *)(a22 + 16);
  v1229 = *(_QWORD *)(a40 + 16);
  v1225 = *(_QWORD *)(a41 + 16);
  v1257 = *(_QWORD *)(a42 + 16);
  v1253 = *(_QWORD *)(a43 + 16);
  v1249 = *(_QWORD *)(a44 + 16);
  v1245 = *(_QWORD *)(a45 + 16);
  v1221 = *(_QWORD *)(a55 + 16);
  v1217 = *(_QWORD *)(a56 + 16);
  v325 = *(_QWORD *)(a57 + 16);
  v326 = *(_QWORD *)(a58 + 16);
  v1204 = *(_QWORD *)(a68 + 16);
  v1198 = *(_QWORD *)(a69 + 16);
  v1241 = *(_QWORD *)(v1085 + 16);
  v327 = *(_QWORD *)(v1086 + 16);
  v328 = *(_QWORD *)(v1087 + 16);
  v329 = *(_QWORD *)(v1083 + 16);
  v1159 = *(_QWORD *)(v1104 + 16);
  v1156 = *(_QWORD *)(v1098 + 16);
  v1152 = *(_QWORD *)(v1103 + 16);
  v1148 = *(_QWORD *)(v1102 + 16);
  v1213 = *(_QWORD *)(v1101 + 16);
  v1209 = *(_QWORD *)(v1100 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  v330 = v1198;
  if ((int)v1119 >= 1)
  {
    v331 = 0;
    while (v331)
    {
      v332 = v1140[v331 - 1];
      v1144 = v331;
      v1166 = v1140[v331];
      if (v332 < (int)v1166)
        goto LABEL_39;
LABEL_34:
      v331 = v1144 + 1;
      if (v1144 + 1 == v1119)
        goto LABEL_79;
    }
    v332 = 0;
    v1144 = 0;
    v1166 = *v1140;
    if ((int)v1166 <= 0)
      goto LABEL_34;
LABEL_39:
    v333 = v1213 + 72 * v1144;
    v1199 = (float64x2_t *)(v333 + 16);
    v1194 = (float64x2_t *)(v333 + 32);
    v1190 = (float64x2_t *)(v333 + 48);
    v1186 = 9 * v1144 + 8;
    v1182 = (float64x2_t *)(v1209 + 24 * v1144);
    v1178 = 3 * v1144 + 2;
    v334 = v332;
    v1174 = v1166 - v332;
    v1170 = (int *)(v1163 + 4 * v332);
    while (1)
    {
      v335 = *(int *)(v1163 + 4 * v334);
      v336 = *(int *)(v320 + 24 * v335);
      if (v336 >> 30 != 3)
      {
        v337 = *(int *)(v321 + 4 * v336);
        v338 = (double *)(v1241 + 24 * v335);
        _Q2 = *(_OWORD *)v338;
        _Q5 = *v1194;
        _D1 = *(_QWORD *)(v333 + 8);
        __asm { FMLA            D0, D1, V2.D[1] }
        _D7 = v338[2];
        v344 = vmlad_n_f64(_D0, _D7, v1199->f64[0]);
        __asm
        {
          FMLA            D1, D5, V2.D[1]
          FMLA            D1, D7, V5.D[1]
        }
        _Q5.f64[0] = *(float64_t *)(v333 + 56);
        __asm { FMLA            D4, D5, V2.D[1] }
        _D2 = _D4 + _D7 * *(double *)(v1213 + 8 * v1186);
        _Q4 = *v1182;
        __asm { FMLA            D5, D1, V4.D[1] }
        *(double *)(v1159 + 8 * v337) = *(double *)(v1159 + 8 * v337)
                                      - (_Q5.f64[0]
                                       + _D2 * *(double *)(v1209 + 8 * v1178));
        v350 = v1170;
        for (i = v1174; i; --i)
        {
          v352 = *v350;
          v353 = *(int *)(v320 + 24 * v352);
          if (v353 >> 30 != 3 && v337 <= *(_DWORD *)(v321 + 4 * v353))
          {
            v354 = 8 * ((int)v353 + *(_DWORD *)(v1233 + 4) * (int)v336);
            v355 = (double *)(v1241 + 24 * v352);
            _Q4 = *(_OWORD *)v355;
            __asm { FMLA            D5, D1, V4.D[1] }
            *(double *)(v1237 + v354) = *(double *)(v1237 + v354) - (_D5 + _D2 * v355[2]);
          }
          v358 = 6 * v352;
          v359 = *(_DWORD *)(v320 + ((24 * v352) | 4));
          if (v359 >> 30 == 3)
          {
            v360 = v358 + 4;
            v361 = *(_DWORD *)(v320 + 4 * (v358 + 4));
            if (v361 >> 30 == 3)
              goto LABEL_49;
          }
          else
          {
            v363 = (double *)(v1281 + 32 * (int)(v359 + *(_DWORD *)(v1277 + 4) * v336));
            v364 = v327 + 96 * v352;
            _Q7 = *(_OWORD *)(v364 + 32);
            _Q16 = *(_OWORD *)(v364 + 48);
            _Q17 = *(_OWORD *)(v364 + 64);
            _Q18 = *(_OWORD *)(v364 + 80);
            v369 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v344, *(double *)v364), _D1, *(double *)&_Q7), _D2, *(double *)&_Q17);
            __asm
            {
              FMLA            D5, D1, V7.D[1]
              FMLA            D5, D2, V17.D[1]
            }
            *(double *)&_Q7 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v344, *(double *)(v364 + 16)), _D1, *(double *)&_Q16), _D2, *(double *)&_Q18);
            __asm
            {
              FMLA            D6, D1, V16.D[1]
              FMLA            D6, D2, V18.D[1]
            }
            *(double *)&_Q16 = *v363 - v369;
            v374 = v363[1] - _D5;
            *(double *)&v375 = v363[2] - *(double *)&_Q7;
            *((double *)&_Q16 + 1) = v374;
            *((double *)&v375 + 1) = v363[3] - _D6;
            *(_OWORD *)v363 = _Q16;
            *((_OWORD *)v363 + 1) = v375;
            v360 = v358 + 4;
            v361 = *(_DWORD *)(v320 + 4 * (v358 + 4));
            if (v361 >> 30 == 3)
            {
LABEL_49:
              v362 = *(_DWORD *)(v320 + 24 * v352 + 20);
              if (v362 >> 30 != 3)
                goto LABEL_53;
              goto LABEL_43;
            }
          }
          v376 = (double *)(v1273 + 48 * (int)(v361 + *(_DWORD *)(v1269 + 4) * v336));
          v377 = v328 + 144 * v352;
          _Q17 = *(_OWORD *)(v377 + 48);
          _Q18 = *(_OWORD *)(v377 + 64);
          _Q19 = *(_OWORD *)(v377 + 80);
          _Q20 = *(_OWORD *)(v377 + 96);
          _Q21 = *(_OWORD *)(v377 + 112);
          _Q22 = *(_OWORD *)(v377 + 128);
          v384 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v344, *(double *)v377), _D1, *(double *)&_Q17), _D2, *(double *)&_Q20);
          __asm
          {
            FMLA            D6, D1, V17.D[1]
            FMLA            D6, D2, V20.D[1]
          }
          *(double *)&_Q17 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v344, *(double *)(v377 + 16)), _D1, *(double *)&_Q18), _D2, *(double *)&_Q21);
          __asm
          {
            FMLA            D7, D1, V18.D[1]
            FMLA            D7, D2, V21.D[1]
          }
          *(double *)&_Q18 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v344, *(double *)(v377 + 32)), _D1, *(double *)&_Q19), _D2, *(double *)&_Q22);
          __asm
          {
            FMLA            D16, D1, V19.D[1]
            FMLA            D16, D2, V22.D[1]
          }
          *(double *)&_Q19 = *v376 - v384;
          v391 = v376[1] - _D6;
          *(double *)&v392 = v376[2] - *(double *)&_Q17;
          v393 = v376[3] - _D7;
          *(double *)&v394 = v376[4] - *(double *)&_Q18;
          *((double *)&_Q19 + 1) = v391;
          *((double *)&v392 + 1) = v393;
          *((double *)&v394 + 1) = v376[5] - _D16;
          *(_OWORD *)v376 = _Q19;
          *((_OWORD *)v376 + 1) = v392;
          *((_OWORD *)v376 + 2) = v394;
          v362 = *(_DWORD *)(v320 + 24 * v352 + 20);
          if (v362 >> 30 != 3)
          {
LABEL_53:
            v395 = (double *)(v1265 + 16 * (int)(v362 + *(_DWORD *)(v1261 + 4) * v336));
            v396 = v329 + 8 * v358;
            _Q4 = *(_OWORD *)(v396 + 16);
            _Q5 = *(_OWORD *)(v329 + 8 * v360);
            __asm
            {
              FMLA            D3, D1, V4.D[1]
              FMLA            D3, D2, V5.D[1]
            }
            v401 = v395[1] - _D3;
            *v395 = *v395
                  - vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v344, *(double *)v396), _D1, *(double *)&_Q4), _D2, *(double *)&_Q5);
            v395[1] = v401;
          }
LABEL_43:
          ++v350;
        }
      }
      v402 = 6 * v335;
      v403 = *(int *)(v320 + ((24 * v335) | 4));
      if (v403 >> 30 != 3)
        break;
LABEL_65:
      v471 = *(int *)(v320 + 4 * (v402 + 4));
      if (v471 >> 30 != 3)
      {
        v472 = *(int *)(v323 + 4 * v471);
        v473 = (float64x2_t *)(v1152 + 48 * v472);
        v474 = (float64x2_t *)(v328 + 144 * v335);
        v475 = v474[1];
        v476 = v474[2];
        v477 = v474[3];
        v478 = v474[4];
        v479 = v474[5];
        v480 = v474[6];
        v481 = v474[7];
        v482 = v474[8];
        v483 = *(double *)(v1213 + 8 * v1186);
        v484 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v474, *(double *)v333), v477, *(float64x2_t *)v333, 1), v480, v1199->f64[0]);
        v485 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v475, *(double *)v333), v478, *(float64x2_t *)v333, 1), v481, v1199->f64[0]);
        v486 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v476, *(double *)v333), v479, *(float64x2_t *)v333, 1), v482, v1199->f64[0]);
        v487 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*v474, *v1199, 1), v477, v1194->f64[0]), v480, *v1194, 1);
        v488 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v475, *v1199, 1), v478, v1194->f64[0]), v481, *v1194, 1);
        v489 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v476, *v1199, 1), v479, v1194->f64[0]), v482, *v1194, 1);
        v490 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v474, v1190->f64[0]), v477, *v1190, 1), v480, v483);
        v491 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v475, v1190->f64[0]), v478, *v1190, 1), v481, v483);
        v492 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v476, v1190->f64[0]), v479, *v1190, 1), v482, v483);
        v477.f64[0] = *(float64_t *)(v1209 + 8 * v1178);
        v493 = vsubq_f64(v473[2], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v486, v1182->f64[0]), v489, *v1182, 1), v492, v477.f64[0]));
        v494 = vsubq_f64(v473[1], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v485, v1182->f64[0]), v488, *v1182, 1), v491, v477.f64[0]));
        *v473 = vsubq_f64(*v473, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v484, v1182->f64[0]), v487, *v1182, 1), v490, v477.f64[0]));
        v473[1] = v494;
        v473[2] = v493;
        v495 = v1170;
        v496 = v1174;
        do
        {
          v497 = *v495;
          v498 = 6 * v497 + 4;
          v499 = *(int *)(v320 + 4 * v498);
          if (v499 >> 30 != 3 && v472 <= *(_DWORD *)(v323 + 4 * v499))
          {
            v500 = (float64x2_t *)(v328 + 144 * v497);
            v501 = v500[1];
            v502 = v500[2];
            v503 = v500[3];
            v504 = (float64x2_t *)(v1221 + 288 * ((int)v499 + *(_DWORD *)(v1217 + 4) * (int)v471));
            v506 = v500[4];
            v505 = v500[5];
            v507 = v500[6];
            v508 = v500[7];
            v509 = v500[8];
            v510 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v484, v500->f64[0]), v487, v503.f64[0]), v490, v507.f64[0]);
            v511 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v485, v500->f64[0]), v488, v503.f64[0]), v491, v507.f64[0]);
            v512 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v486, v500->f64[0]), v489, v503.f64[0]), v492, v507.f64[0]);
            v513 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v484, *v500, 1), v487, v503, 1), v490, v507, 1);
            v514 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v485, *v500, 1), v488, v503, 1), v491, v507, 1);
            v515 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v486, *v500, 1), v489, v503, 1), v492, v507, 1);
            v516 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v484, v501.f64[0]), v487, v506.f64[0]), v490, v508.f64[0]);
            v517 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v485, v501.f64[0]), v488, v506.f64[0]), v491, v508.f64[0]);
            v518 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v486, v501.f64[0]), v489, v506.f64[0]), v492, v508.f64[0]);
            v519 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v484, v501, 1), v487, v506, 1), v490, v508, 1);
            v520 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v485, v501, 1), v488, v506, 1), v491, v508, 1);
            v521 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v486, v501, 1), v489, v506, 1), v492, v508, 1);
            v522 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v484, v502.f64[0]), v487, v505.f64[0]), v490, v509.f64[0]);
            v523 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v485, v502.f64[0]), v488, v505.f64[0]), v491, v509.f64[0]);
            v524 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v486, v502.f64[0]), v489, v505.f64[0]), v492, v509.f64[0]);
            v525 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v484, v502, 1), v487, v505, 1), v490, v509, 1);
            v526 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v485, v502, 1), v488, v505, 1), v491, v509, 1);
            v527 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v486, v502, 1), v489, v505, 1), v492, v509, 1);
            v528 = vsubq_f64(v504[2], v512);
            v529 = vsubq_f64(v504[1], v511);
            v530 = vsubq_f64(v504[5], v515);
            v531 = vsubq_f64(v504[4], v514);
            v532 = vsubq_f64(v504[3], v513);
            v533 = vsubq_f64(v504[8], v518);
            v534 = vsubq_f64(v504[7], v517);
            v535 = vsubq_f64(v504[6], v516);
            v536 = vsubq_f64(v504[11], v521);
            v537 = vsubq_f64(v504[10], v520);
            v538 = vsubq_f64(v504[9], v519);
            v539 = vsubq_f64(v504[14], v524);
            v540 = vsubq_f64(v504[13], v523);
            v541 = vsubq_f64(v504[12], v522);
            v542 = v504[17];
            v543 = vsubq_f64(v504[15], v525);
            *v504 = vsubq_f64(*v504, v510);
            v504[1] = v529;
            v504[2] = v528;
            v504[3] = v532;
            v504[4] = v531;
            v504[5] = v530;
            v504[6] = v535;
            v504[7] = v534;
            v504[8] = v533;
            v504[9] = v538;
            v504[10] = v537;
            v504[11] = v536;
            v504[12] = v541;
            v504[13] = v540;
            v504[14] = v539;
            v504[15] = v543;
            v504[16] = vsubq_f64(v504[16], v526);
            v504[17] = vsubq_f64(v542, v527);
          }
          v544 = *(_DWORD *)(v320 + 24 * v497 + 20);
          if (v544 >> 30 != 3)
          {
            v545 = (float64x2_t *)(v325 + 96 * (int)(v544 + *(_DWORD *)(v326 + 4) * v471));
            v546 = v545[4];
            v547 = (float64x2_t *)(v329 + 48 * v497);
            v548 = v547[1];
            v549 = *(float64x2_t *)(v329 + 8 * v498);
            v550 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v485, *v547, 1), v488, v548, 1), v491, v549, 1);
            v551 = vsubq_f64(v545[2], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v486, v547->f64[0]), v489, v548.f64[0]), v492, v549.f64[0]));
            v552 = vsubq_f64(v545[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v485, v547->f64[0]), v488, v548.f64[0]), v491, v549.f64[0]));
            v553 = vsubq_f64(v545[5], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v486, *v547, 1), v489, v548, 1), v492, v549, 1));
            v554 = vsubq_f64(v545[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v484, *v547, 1), v487, v548, 1), v490, v549, 1));
            *v545 = vsubq_f64(*v545, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v484, v547->f64[0]), v487, v548.f64[0]), v490, v549.f64[0]));
            v545[1] = v552;
            v545[2] = v551;
            v545[3] = v554;
            v545[4] = vsubq_f64(v546, v550);
            v545[5] = v553;
          }
          ++v495;
          --v496;
        }
        while (v496);
      }
      v555 = *(int *)(v320 + 4 * v402 + 20);
      if (v555 >> 30 != 3)
      {
        v556 = *(int *)(v324 + 4 * v555);
        v557 = (float64x2_t *)(v329 + 8 * v402);
        v558 = v557[1];
        v559 = *(float64x2_t *)(v329 + 8 * (v402 + 4));
        v560 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v557, *(double *)v333), v558, *(float64x2_t *)v333, 1), v559, v1199->f64[0]);
        v561 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*v557, *v1199, 1), v558, v1194->f64[0]), v559, *v1194, 1);
        v562 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v557, v1190->f64[0]), v558, *v1190, 1), v559, *(double *)(v1213 + 8 * v1186));
        *(float64x2_t *)(v1148 + 16 * v556) = vsubq_f64(*(float64x2_t *)(v1148 + 16 * v556), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v560, v1182->f64[0]), v561, *v1182, 1), v562, *(double *)(v1209 + 8 * v1178)));
        v563 = v1170;
        v564 = v1174;
        do
        {
          v565 = *(int *)(v320 + 24 * *v563 + 20);
          if (v565 >> 30 != 3 && v556 <= *(_DWORD *)(v324 + 4 * v565))
          {
            v566 = (float64x2_t *)(v1204 + 32 * ((int)v565 + *(_DWORD *)(v330 + 4) * (int)v555));
            v567 = (float64x2_t *)(v329 + 48 * *v563);
            v568 = v567[1];
            v569 = v567[2];
            v570 = vsubq_f64(v566[1], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v560, *v567, 1), v561, v568, 1), v562, v569, 1));
            *v566 = vsubq_f64(*v566, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v560, v567->f64[0]), v561, v568.f64[0]), v562, v569.f64[0]));
            v566[1] = v570;
          }
          ++v563;
          --v564;
        }
        while (v564);
      }
      if (++v334 == v1166)
        goto LABEL_34;
    }
    v404 = *(int *)(v322 + 4 * v403);
    v405 = (float64x2_t *)(v1156 + 32 * v404);
    v406 = (float64x2_t *)(v327 + 96 * v335);
    v407 = v406[1];
    v408 = v406[2];
    v409 = v406[3];
    v410 = v406[4];
    v411 = v406[5];
    v412 = *(double *)(v1213 + 8 * v1186);
    v413 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v406, *(double *)v333), v408, *(float64x2_t *)v333, 1), v410, v1199->f64[0]);
    v414 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v407, *(double *)v333), v409, *(float64x2_t *)v333, 1), v411, v1199->f64[0]);
    v415 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*v406, *v1199, 1), v408, v1194->f64[0]), v410, *v1194, 1);
    v416 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v407, *v1199, 1), v409, v1194->f64[0]), v411, *v1194, 1);
    v417 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v406, v1190->f64[0]), v408, *v1190, 1), v410, v412);
    v418 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v407, v1190->f64[0]), v409, *v1190, 1), v411, v412);
    v409.f64[0] = *(float64_t *)(v1209 + 8 * v1178);
    v419 = vsubq_f64(v405[1], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v414, v1182->f64[0]), v416, *v1182, 1), v418, v409.f64[0]));
    *v405 = vsubq_f64(*v405, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v413, v1182->f64[0]), v415, *v1182, 1), v417, v409.f64[0]));
    v405[1] = v419;
    v420 = v1170;
    v421 = v1174;
    while (1)
    {
      v422 = *v420;
      v423 = *(int *)(v320 + 24 * v422 + 4);
      if (v423 >> 30 != 3 && v404 <= *(_DWORD *)(v322 + 4 * v423))
      {
        v424 = (float64x2_t *)(v1229 + ((uint64_t)((int)v423 + *(_DWORD *)(v1225 + 4) * (int)v403) << 7));
        v425 = v424[6];
        v426 = (float64x2_t *)(v327 + 96 * v422);
        v427 = v426[1];
        v428 = v426[2];
        v429 = v426[3];
        v430 = v426[4];
        v431 = v426[5];
        v432 = vsubq_f64(v424[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v414, v426->f64[0]), v416, v428.f64[0]), v418, v430.f64[0]));
        v433 = vsubq_f64(v424[2], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v413, *v426, 1), v415, v428, 1), v417, v430, 1));
        v434 = vsubq_f64(v424[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v414, *v426, 1), v416, v428, 1), v418, v430, 1));
        v435 = vsubq_f64(v424[4], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v413, v427.f64[0]), v415, v429.f64[0]), v417, v431.f64[0]));
        v436 = vsubq_f64(v424[5], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v414, v427.f64[0]), v416, v429.f64[0]), v418, v431.f64[0]));
        v437 = vsubq_f64(v424[7], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v414, v427, 1), v416, v429, 1), v418, v431, 1));
        *v424 = vsubq_f64(*v424, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v413, v426->f64[0]), v415, v428.f64[0]), v417, v430.f64[0]));
        v424[1] = v432;
        v424[2] = v433;
        v424[3] = v434;
        v424[4] = v435;
        v424[5] = v436;
        v424[6] = vsubq_f64(v425, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v413, v427, 1), v415, v429, 1), v417, v431, 1));
        v424[7] = v437;
      }
      v438 = 6 * v422;
      v439 = 6 * v422 + 4;
      v440 = *(_DWORD *)(v320 + 4 * v439);
      if (v440 >> 30 == 3)
      {
        v441 = *(_DWORD *)(v320 + 24 * v422 + 20);
        if (v441 >> 30 != 3)
          goto LABEL_64;
      }
      else
      {
        v442 = (float64x2_t *)(v1257 + 192 * (int)(v440 + *(_DWORD *)(v1253 + 4) * v403));
        v443 = v442[10];
        v444 = (float64x2_t *)(v328 + 144 * v422);
        v445 = v444[1];
        v446 = v444[2];
        v447 = v444[3];
        v448 = v444[4];
        v449 = v444[5];
        v450 = v444[6];
        v451 = v444[7];
        v452 = v444[8];
        v453 = vsubq_f64(v442[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v414, v444->f64[0]), v416, v447.f64[0]), v418, v450.f64[0]));
        v454 = vsubq_f64(v442[2], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v413, *v444, 1), v415, v447, 1), v417, v450, 1));
        v455 = vsubq_f64(v442[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v414, *v444, 1), v416, v447, 1), v418, v450, 1));
        v456 = vsubq_f64(v442[4], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v413, v445.f64[0]), v415, v448.f64[0]), v417, v451.f64[0]));
        v457 = vsubq_f64(v442[5], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v414, v445.f64[0]), v416, v448.f64[0]), v418, v451.f64[0]));
        v458 = vsubq_f64(v442[6], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v413, v445, 1), v415, v448, 1), v417, v451, 1));
        v459 = vsubq_f64(v442[7], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v414, v445, 1), v416, v448, 1), v418, v451, 1));
        v460 = vsubq_f64(v442[8], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v413, v446.f64[0]), v415, v449.f64[0]), v417, v452.f64[0]));
        v461 = vsubq_f64(v442[9], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v414, v446.f64[0]), v416, v449.f64[0]), v418, v452.f64[0]));
        v462 = vsubq_f64(v442[11], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v414, v446, 1), v416, v449, 1), v418, v452, 1));
        *v442 = vsubq_f64(*v442, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v413, v444->f64[0]), v415, v447.f64[0]), v417, v450.f64[0]));
        v442[1] = v453;
        v442[2] = v454;
        v442[3] = v455;
        v442[4] = v456;
        v442[5] = v457;
        v442[6] = v458;
        v442[7] = v459;
        v442[8] = v460;
        v442[9] = v461;
        v442[10] = vsubq_f64(v443, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v413, v446, 1), v415, v449, 1), v417, v452, 1));
        v442[11] = v462;
        v441 = *(_DWORD *)(v320 + 24 * v422 + 20);
        if (v441 >> 30 != 3)
        {
LABEL_64:
          v463 = (float64x2_t *)(v1249 + ((uint64_t)(int)(v441 + *(_DWORD *)(v1245 + 4) * v403) << 6));
          v464 = v463[2];
          v465 = (float64x2_t *)(v329 + 8 * v438);
          v466 = v465[1];
          v467 = *(float64x2_t *)(v329 + 8 * v439);
          v468 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v413, *v465, 1), v415, v466, 1), v417, v467, 1);
          v469 = vsubq_f64(v463[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v414, v465->f64[0]), v416, v466.f64[0]), v418, v467.f64[0]));
          v470 = vsubq_f64(v463[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v414, *v465, 1), v416, v466, 1), v418, v467, 1));
          *v463 = vsubq_f64(*v463, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v413, v465->f64[0]), v415, v466.f64[0]), v417, v467.f64[0]));
          v463[1] = v469;
          v463[2] = vsubq_f64(v464, v468);
          v463[3] = v470;
        }
      }
      ++v420;
      if (!--v421)
        goto LABEL_65;
    }
  }
LABEL_79:
  *(_QWORD *)(v1102 + 24) |= 1uLL;
  *(_QWORD *)(v1103 + 24) |= 1uLL;
  *(_QWORD *)(v1098 + 24) |= 1uLL;
  *(_QWORD *)(v1104 + 24) |= 1uLL;
  *(_QWORD *)(a21 + 24) |= 1uLL;
  *(_QWORD *)(a19 + 24) |= 1uLL;
  *(_QWORD *)(a68 + 24) |= 1uLL;
  *(_QWORD *)(a17 + 24) |= 1uLL;
  *(_QWORD *)(a57 + 24) |= 1uLL;
  *(_QWORD *)(a55 + 24) |= 1uLL;
  *(_QWORD *)(a44 + 24) |= 1uLL;
  *(_QWORD *)(a42 + 24) |= 1uLL;
  *(_QWORD *)(a40 + 24) |= 1uLL;
  *(_QWORD *)(a13 + 24) |= 1uLL;
  if ((**(_BYTE **)(v1082 + 16) & 1) != 0)
  {
LABEL_80:
    v571 = *(_QWORD *)(v1084 + 16);
    v1195 = *(_QWORD *)(v1089 + 16);
    v1108 = *(int **)(v1088 + 16);
    v1278 = *(_QWORD *)(a13 + 16);
    v1274 = *(_QWORD *)(a14 + 16);
    v572 = *(_QWORD *)(a17 + 16);
    v573 = *(_QWORD *)(a19 + 16);
    v1116 = *(_QWORD *)(a20 + 16);
    v1118 = *(_QWORD *)(a18 + 16);
    v574 = *(_QWORD *)(a21 + 16);
    v1114 = *(_QWORD *)(a22 + 16);
    v1149 = *(_QWORD *)(a40 + 16);
    v1270 = *(_QWORD *)(a41 + 16);
    v575 = *(_QWORD *)(a42 + 16);
    v1145 = *(_QWORD *)(a43 + 16);
    v576 = *(_QWORD *)(a44 + 16);
    v1141 = *(_QWORD *)(a45 + 16);
    v1138 = *(_QWORD *)(a55 + 16);
    v1266 = *(_QWORD *)(a56 + 16);
    v577 = *(_QWORD *)(a57 + 16);
    v1136 = *(_QWORD *)(a58 + 16);
    v1134 = *(_QWORD *)(a68 + 16);
    v1132 = *(_QWORD *)(a69 + 16);
    v1282 = *(_QWORD *)(v1085 + 16);
    v578 = *(_QWORD *)(v1086 + 16);
    v579 = *(_QWORD *)(v1087 + 16);
    v580 = *(_QWORD *)(v1083 + 16);
    v1130 = *(_QWORD *)(v1104 + 16);
    v1128 = *(_QWORD *)(v1098 + 16);
    v1126 = *(_QWORD *)(v1103 + 16);
    v1124 = *(_QWORD *)(v1102 + 16);
    v1110 = *(_QWORD *)(v1100 + 16);
    v1112 = *(_QWORD *)(v1101 + 16);
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    halide_copy_to_host();
    if ((int)v1119 < 1)
    {
LABEL_105:
      *(_QWORD *)(v1102 + 24) |= 1uLL;
      *(_QWORD *)(v1103 + 24) |= 1uLL;
      *(_QWORD *)(v1098 + 24) |= 1uLL;
      *(_QWORD *)(v1104 + 24) |= 1uLL;
      *(_QWORD *)(a21 + 24) |= 1uLL;
      *(_QWORD *)(a19 + 24) |= 1uLL;
      *(_QWORD *)(a68 + 24) |= 1uLL;
      *(_QWORD *)(a17 + 24) |= 1uLL;
      *(_QWORD *)(a57 + 24) |= 1uLL;
      *(_QWORD *)(a55 + 24) |= 1uLL;
      *(_QWORD *)(a44 + 24) |= 1uLL;
      *(_QWORD *)(a42 + 24) |= 1uLL;
      *(_QWORD *)(a40 + 24) |= 1uLL;
      *(_QWORD *)(a13 + 24) |= 1uLL;
      if ((**(_BYTE **)(v1105 + 16) & 1) == 0)
        return 0;
      goto LABEL_106;
    }
    v581 = 0;
    while (1)
    {
      if (v581)
      {
        v582 = v1108[v581 - 1];
        v1122 = v581;
        v1200 = v1108[v581];
        if (v582 < (int)v1200)
          goto LABEL_87;
      }
      else
      {
        v582 = 0;
        v1122 = 0;
        v1200 = *v1108;
        if ((int)v1200 > 0)
        {
LABEL_87:
          v583 = v1112 + 72 * v1122;
          v584 = *(int64x2_t *)v583;
          v585 = *(float64x2_t *)(v583 + 16);
          v586 = *(int64x2_t *)(v583 + 32);
          v587 = *(int64x2_t *)(v583 + 48);
          v588 = *(uint64_t *)(v583 + 64);
          v589 = (int8x16_t *)(v1110 + 24 * v1122);
          v590 = v582;
          v1179 = *(_DWORD *)(v1118 + 4);
          v1175 = *(_DWORD *)(v1116 + 4);
          v1171 = *(_DWORD *)(v1114 + 4);
          v1167 = vextq_s8((int8x16_t)v584, (int8x16_t)v584, 8uLL).u64[0];
          v1157 = vextq_s8((int8x16_t)v587, (int8x16_t)v587, 8uLL).u64[0];
          *(_QWORD *)&v1160 = vextq_s8((int8x16_t)v586, (int8x16_t)v586, 8uLL).u64[0];
          *(_QWORD *)&v1153 = vextq_s8(*v589, *v589, 8uLL).u64[0];
          v1242 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v585.f64[0], 0);
          v1246 = (float64x2_t)vdupq_laneq_s64(v584, 1);
          v1187 = *(double *)&v588;
          v1191 = v586.i64[0];
          v1234 = (float64x2_t)vdupq_laneq_s64(v586, 1);
          v1238 = (float64x2_t)vdupq_lane_s64(v586.i64[0], 0);
          v1226 = (float64x2_t)vdupq_lane_s64(v588, 0);
          v1230 = (float64x2_t)vdupq_laneq_s64(v587, 1);
          v1262 = *v589;
          v1183 = v589[1].i64[0];
          v1218 = (float64x2_t)vdupq_lane_s64(v1183, 0);
          v1222 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v589, 1);
          v1258 = v1200 - v582;
          v1254 = (int *)(v1195 + 4 * v582);
          v1210 = v585;
          v1214 = *(double *)v584.i64;
          v1205 = *(double *)v587.i64;
          do
          {
            v591 = *(int *)(v1195 + 4 * v590);
            v592 = *(int *)(v571 + 24 * v591);
            v593 = (double *)(v1282 + 24 * v591);
            _Q6 = *(_OWORD *)v593;
            _D0 = v1167;
            __asm { FMLA            D7, D0, V6.D[1] }
            v597 = v593[2];
            v598 = _D7 + v597 * v585.f64[0];
            _D0 = v1191;
            __asm { FMLA            D7, D0, V6.D[1] }
            _D29 = _D7 + v597 * v1160;
            _D0 = v1157;
            __asm { FMLA            D7, D0, V6.D[1] }
            _D30 = _D7 + v597 * v1187;
            *(double *)(v1130 + 8 * v592) = *(double *)(v1130 + 8 * v592)
                                          - (v598 * *(double *)v1262.i64
                                           + _D29 * v1153
                                           + _D30 * *(double *)&v1183);
            v1250 = 6 * v591;
            v605 = v1254;
            v606 = v1258;
            do
            {
              v643 = *v605;
              v644 = *(_DWORD *)(v571 + 24 * v643);
              if (v592 <= v644)
              {
                v645 = 8 * (int)(v644 + *(_DWORD *)(v1274 + 4) * v592);
                v646 = (double *)(v1282 + 24 * v643);
                _Q6 = *(_OWORD *)v646;
                __asm { FMLA            D7, D29, V6.D[1] }
                *(double *)(v1278 + v645) = *(double *)(v1278 + v645) - (_D7 + _D30 * v646[2]);
              }
              v607 = 6 * v643;
              v608 = 24 * v643;
              v609 = (double *)(v572 + 32 * (v1179 * (int)v592 + *(_DWORD *)(v571 + ((24 * v643) | 4))));
              v610 = v578 + 96 * v643;
              _Q17 = *(_OWORD *)(v610 + 32);
              _Q18 = *(_OWORD *)(v610 + 48);
              _Q19 = *(_OWORD *)(v610 + 64);
              _Q31 = *(_OWORD *)(v610 + 80);
              v615 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v598, *(double *)v610), _D29, *(double *)&_Q17), _D30, *(double *)&_Q19);
              __asm
              {
                FMLA            D7, D29, V17.D[1]
                FMLA            D7, D30, V19.D[1]
              }
              *(double *)&_Q17 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v598, *(double *)(v610 + 16)), _D29, *(double *)&_Q18), _D30, *(double *)&_Q31);
              __asm
              {
                FMLA            D16, D29, V18.D[1]
                FMLA            D16, D30, V31.D[1]
              }
              *(double *)&_Q18 = *v609 - v615;
              v620 = v609[1] - _D7;
              *(double *)&v621 = v609[2] - *(double *)&_Q17;
              *((double *)&_Q18 + 1) = v620;
              *((double *)&v621 + 1) = v609[3] - _D16;
              *(_OWORD *)v609 = _Q18;
              *((_OWORD *)v609 + 1) = v621;
              v622 = (double *)(v573 + 48 * (v1175 * (int)v592 + *(_DWORD *)(v571 + 4 * (6 * v643 + 4))));
              v623 = v579 + 144 * v643;
              _Q19 = *(_OWORD *)(v623 + 48);
              _Q31 = *(_OWORD *)(v623 + 64);
              _Q8 = *(_OWORD *)(v623 + 80);
              _Q9 = *(_OWORD *)(v623 + 96);
              _Q10 = *(_OWORD *)(v623 + 112);
              _Q11 = *(_OWORD *)(v623 + 128);
              v630 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v598, *(double *)v623), _D29, *(double *)&_Q19), _D30, *(double *)&_Q9);
              __asm
              {
                FMLA            D16, D29, V19.D[1]
                FMLA            D16, D30, V9.D[1]
              }
              *(double *)&_Q19 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v598, *(double *)(v623 + 16)), _D29, *(double *)&_Q31), _D30, *(double *)&_Q10);
              __asm
              {
                FMLA            D17, D29, V31.D[1]
                FMLA            D17, D30, V10.D[1]
              }
              *(double *)&_Q31 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v598, *(double *)(v623 + 32)), _D29, *(double *)&_Q8), _D30, *(double *)&_Q11);
              __asm
              {
                FMLA            D18, D29, V8.D[1]
                FMLA            D18, D30, V11.D[1]
              }
              *(double *)&_Q8 = *v622 - v630;
              v633 = v622[1] - _D16;
              *(double *)&v634 = v622[2] - *(double *)&_Q19;
              v635 = v622[3] - *(double *)&_Q17;
              *(double *)&_Q17 = v622[4] - *(double *)&_Q31;
              *((double *)&_Q8 + 1) = v633;
              *((double *)&v634 + 1) = v635;
              *((double *)&_Q17 + 1) = v622[5] - *(double *)&_Q18;
              *(_OWORD *)v622 = _Q8;
              *((_OWORD *)v622 + 1) = v634;
              *((_OWORD *)v622 + 2) = _Q17;
              v636 = (double *)(v574 + 16 * (v1171 * (int)v592 + *(_DWORD *)(v608 + v571 + 20)));
              v637 = v580 + 8 * v607;
              _Q6 = *(_OWORD *)(v637 + 16);
              _Q7 = *(_OWORD *)(v580 + 8 * (v607 + 4));
              __asm
              {
                FMLA            D4, D29, V6.D[1]
                FMLA            D4, D30, V7.D[1]
              }
              v642 = v636[1] - _D4;
              *v636 = *v636
                    - vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v598, *(double *)v637), _D29, *(double *)&_Q6), _D30, *(double *)&_Q7);
              v636[1] = v642;
              ++v605;
              --v606;
            }
            while (v606);
            v649 = *(int *)(v571 + ((24 * v591) | 4));
            v650 = (float64x2_t *)(v1128 + 32 * v649);
            v651 = (float64x2_t *)(v578 + 96 * v591);
            v652 = v651[1];
            v653 = v651[2];
            v654 = v651[3];
            v656 = v651[4];
            v655 = v651[5];
            v657 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v651, *(double *)v584.i64), v1246, v653), v1242, v656);
            v658 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v652, *(double *)v584.i64), v1246, v654), v1242, v655);
            v659 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(*v651, v585, 1), v1238, v653), v1234, v656);
            v660 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v652, v585, 1), v1238, v654), v1234, v655);
            v661 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v651, *(double *)v587.i64), v1230, v653), v1226, v656);
            v662 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v652, *(double *)v587.i64), v1230, v654), v1226, v655);
            v663 = vsubq_f64(v650[1], vmlaq_f64(vmlaq_f64(vmulq_n_f64(v658, *(double *)v1262.i64), v1222, v660), v1218, v662));
            *v650 = vsubq_f64(*v650, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v657, *(double *)v1262.i64), v1222, v659), v1218, v661));
            v650[1] = v663;
            v664 = *(_DWORD *)(v1145 + 4) * v649;
            v665 = *(_DWORD *)(v1141 + 4) * v649;
            v666 = v1254;
            v667 = v1258;
            do
            {
              v710 = *v666;
              v711 = *(_DWORD *)(v571 + 24 * v710 + 4);
              if (v649 <= v711)
              {
                v712 = (float64x2_t *)(v1149 + ((uint64_t)(int)(v711 + *(_DWORD *)(v1270 + 4) * v649) << 7));
                v713 = v712[6];
                v714 = (float64x2_t *)(v578 + 96 * v710);
                v715 = v714[1];
                v716 = v714[2];
                v717 = v714[3];
                v719 = v714[4];
                v718 = v714[5];
                v720 = vsubq_f64(v712[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v658, v714->f64[0]), v660, v716.f64[0]), v662, v719.f64[0]));
                v721 = vsubq_f64(v712[2], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v657, *v714, 1), v659, v716, 1), v661, v719, 1));
                v722 = vsubq_f64(v712[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v658, *v714, 1), v660, v716, 1), v662, v719, 1));
                v723 = vsubq_f64(v712[4], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v657, v715.f64[0]), v659, v717.f64[0]), v661, v718.f64[0]));
                v724 = vsubq_f64(v712[5], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v658, v715.f64[0]), v660, v717.f64[0]), v662, v718.f64[0]));
                v725 = vsubq_f64(v712[7], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v658, v715, 1), v660, v717, 1), v662, v718, 1));
                *v712 = vsubq_f64(*v712, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v657, v714->f64[0]), v659, v716.f64[0]), v661, v719.f64[0]));
                v712[1] = v720;
                v712[2] = v721;
                v712[3] = v722;
                v712[4] = v723;
                v712[5] = v724;
                v712[6] = vsubq_f64(v713, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v657, v715, 1), v659, v717, 1), v661, v718, 1));
                v712[7] = v725;
              }
              v668 = 6 * v710 + 4;
              v669 = (float64x2_t *)(v575 + 192 * (v664 + *(_DWORD *)(v571 + 4 * v668)));
              v670 = (float64x2_t *)(v579 + 144 * v710);
              v671 = v670[1];
              v672 = v670[2];
              v673 = v670[3];
              v674 = v670[4];
              v675 = v670[5];
              v676 = v670[6];
              v677 = v670[7];
              v678 = v670[8];
              v679 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v657, v670->f64[0]), v659, v673.f64[0]), v661, v676.f64[0]);
              v680 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v658, v670->f64[0]), v660, v673.f64[0]), v662, v676.f64[0]);
              v681 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v657, *v670, 1), v659, v673, 1), v661, v676, 1);
              v682 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v658, *v670, 1), v660, v673, 1), v662, v676, 1);
              v683 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v657, v671.f64[0]), v659, v674.f64[0]), v661, v677.f64[0]);
              v684 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v658, v671.f64[0]), v660, v674.f64[0]), v662, v677.f64[0]);
              v685 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v657, v671, 1), v659, v674, 1), v661, v677, 1);
              v686 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v658, v671, 1), v660, v674, 1), v662, v677, 1);
              v687 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v657, v672.f64[0]), v659, v675.f64[0]), v661, v678.f64[0]);
              v688 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v658, v672.f64[0]), v660, v675.f64[0]), v662, v678.f64[0]);
              v689 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v657, v672, 1), v659, v675, 1), v661, v678, 1);
              v690 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v658, v672, 1), v660, v675, 1), v662, v678, 1);
              v691 = vsubq_f64(v669[1], v680);
              v692 = vsubq_f64(v669[2], v681);
              v693 = vsubq_f64(v669[3], v682);
              v694 = vsubq_f64(v669[4], v683);
              v695 = vsubq_f64(v669[5], v684);
              v696 = vsubq_f64(v669[6], v685);
              v697 = vsubq_f64(v669[7], v686);
              v698 = vsubq_f64(v669[8], v687);
              v699 = vsubq_f64(v669[9], v688);
              v700 = vsubq_f64(v669[11], v690);
              v701 = vsubq_f64(v669[10], v689);
              *v669 = vsubq_f64(*v669, v679);
              v669[1] = v691;
              v669[2] = v692;
              v669[3] = v693;
              v669[4] = v694;
              v669[5] = v695;
              v669[6] = v696;
              v669[7] = v697;
              v669[8] = v698;
              v669[9] = v699;
              v669[10] = v701;
              v669[11] = v700;
              v702 = (float64x2_t *)(v576 + ((uint64_t)(v665 + *(_DWORD *)(v571 + 24 * v710 + 20)) << 6));
              v703 = v702[2];
              v704 = (float64x2_t *)(v580 + 48 * v710);
              v705 = v704[1];
              v706 = *(float64x2_t *)(v580 + 8 * v668);
              v707 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v657, *v704, 1), v659, v705, 1), v661, v706, 1);
              v708 = vsubq_f64(v702[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v658, v704->f64[0]), v660, v705.f64[0]), v662, v706.f64[0]));
              v709 = vsubq_f64(v702[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v658, *v704, 1), v660, v705, 1), v662, v706, 1));
              *v702 = vsubq_f64(*v702, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v657, v704->f64[0]), v659, v705.f64[0]), v661, v706.f64[0]));
              v702[1] = v708;
              v702[2] = vsubq_f64(v703, v707);
              v702[3] = v709;
              ++v666;
              --v667;
            }
            while (v667);
            v726 = *(int *)(v571 + 4 * (v1250 + 4));
            v727 = (float64x2_t *)(v1126 + 48 * v726);
            v728 = (float64x2_t *)(v579 + 144 * v591);
            v729 = v728[1];
            v730 = v728[2];
            v731 = v728[3];
            v732 = v728[4];
            v733 = v728[5];
            v734 = v728[6];
            v735 = v728[7];
            v736 = v728[8];
            v737 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v728, v1214), v1246, v731), v1242, v734);
            v738 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v729, v1214), v1246, v732), v1242, v735);
            v739 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v730, v1214), v1246, v733), v1242, v736);
            v740 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(*v728, v1210, 1), v1238, v731), v1234, v734);
            v741 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v729, v1210, 1), v1238, v732), v1234, v735);
            v742 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v730, v1210, 1), v1238, v733), v1234, v736);
            v743 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v728, v1205), v1230, v731), v1226, v734);
            v744 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v729, v1205), v1230, v732), v1226, v735);
            v745 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v730, v1205), v1230, v733), v1226, v736);
            v746 = vsubq_f64(v727[2], vmlaq_f64(vmlaq_f64(vmulq_n_f64(v739, *(double *)v1262.i64), v1222, v742), v1218, v745));
            v747 = vsubq_f64(v727[1], vmlaq_f64(vmlaq_f64(vmulq_n_f64(v738, *(double *)v1262.i64), v1222, v741), v1218, v744));
            *v727 = vsubq_f64(*v727, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v737, *(double *)v1262.i64), v1222, v740), v1218, v743));
            v727[1] = v747;
            v727[2] = v746;
            v748 = *(_DWORD *)(v1136 + 4) * v726;
            v749 = v1254;
            v750 = v1258;
            do
            {
              v761 = *v749;
              v762 = 6 * v761;
              v763 = 6 * v761 + 4;
              v764 = *(_DWORD *)(v571 + 4 * v763);
              if (v726 <= v764)
              {
                v765 = (float64x2_t *)(v579 + 144 * v761);
                v766 = v765[1];
                v768 = v765[2];
                v767 = v765[3];
                v769 = (float64x2_t *)(v1138 + 288 * (int)(v764 + *(_DWORD *)(v1266 + 4) * v726));
                v770 = v765[4];
                v771 = v765[5];
                v772 = v765[6];
                v773 = v765[7];
                v774 = v765[8];
                v775 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v765->f64[0]), v740, v767.f64[0]), v743, v772.f64[0]);
                v776 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v738, v765->f64[0]), v741, v767.f64[0]), v744, v772.f64[0]);
                v777 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v739, v765->f64[0]), v742, v767.f64[0]), v745, v772.f64[0]);
                v778 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, *v765, 1), v740, v767, 1), v743, v772, 1);
                v779 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v738, *v765, 1), v741, v767, 1), v744, v772, 1);
                v780 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v739, *v765, 1), v742, v767, 1), v745, v772, 1);
                v781 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v766.f64[0]), v740, v770.f64[0]), v743, v773.f64[0]);
                v782 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v738, v766.f64[0]), v741, v770.f64[0]), v744, v773.f64[0]);
                v783 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v739, v766.f64[0]), v742, v770.f64[0]), v745, v773.f64[0]);
                v784 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, v766, 1), v740, v770, 1), v743, v773, 1);
                v785 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v738, v766, 1), v741, v770, 1), v744, v773, 1);
                v786 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v739, v766, 1), v742, v770, 1), v745, v773, 1);
                v787 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v768.f64[0]), v740, v771.f64[0]), v743, v774.f64[0]);
                v788 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v738, v768.f64[0]), v741, v771.f64[0]), v744, v774.f64[0]);
                v789 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v739, v768.f64[0]), v742, v771.f64[0]), v745, v774.f64[0]);
                v790 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, v768, 1), v740, v771, 1), v743, v774, 1);
                v791 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v738, v768, 1), v741, v771, 1), v744, v774, 1);
                v792 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v739, v768, 1), v742, v771, 1), v745, v774, 1);
                v793 = vsubq_f64(v769[2], v777);
                v794 = vsubq_f64(v769[1], v776);
                v795 = vsubq_f64(v769[5], v780);
                v796 = vsubq_f64(v769[4], v779);
                v797 = vsubq_f64(v769[3], v778);
                v798 = vsubq_f64(v769[8], v783);
                v799 = vsubq_f64(v769[7], v782);
                v800 = vsubq_f64(v769[6], v781);
                v801 = vsubq_f64(v769[11], v786);
                v802 = vsubq_f64(v769[10], v785);
                v803 = vsubq_f64(v769[9], v784);
                v804 = vsubq_f64(v769[14], v789);
                v805 = vsubq_f64(v769[13], v788);
                v806 = vsubq_f64(v769[12], v787);
                v807 = vsubq_f64(v769[17], v792);
                v808 = vsubq_f64(v769[15], v790);
                *v769 = vsubq_f64(*v769, v775);
                v769[1] = v794;
                v769[2] = v793;
                v769[3] = v797;
                v769[4] = v796;
                v769[5] = v795;
                v769[6] = v800;
                v769[7] = v799;
                v769[8] = v798;
                v769[9] = v803;
                v769[10] = v802;
                v769[11] = v801;
                v769[12] = v806;
                v769[13] = v805;
                v769[14] = v804;
                v769[15] = v808;
                v769[16] = vsubq_f64(v769[16], v791);
                v769[17] = v807;
              }
              v751 = (float64x2_t *)(v577 + 96 * (v748 + *(_DWORD *)(v571 + 4 * v762 + 20)));
              v752 = v751[4];
              v753 = (float64x2_t *)(v580 + 8 * v762);
              v754 = *v753;
              v755 = v753[1];
              v756 = *(float64x2_t *)(v580 + 8 * v763);
              v757 = vsubq_f64(v751[2], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v739, v753->f64[0]), v742, v755.f64[0]), v745, v756.f64[0]));
              v758 = vsubq_f64(v751[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v738, v753->f64[0]), v741, v755.f64[0]), v744, v756.f64[0]));
              v759 = vsubq_f64(v751[5], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v739, *v753, 1), v742, v755, 1), v745, v756, 1));
              v760 = vsubq_f64(v751[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v737, *v753, 1), v740, v755, 1), v743, v756, 1));
              *v751 = vsubq_f64(*v751, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v737, v753->f64[0]), v740, v755.f64[0]), v743, v756.f64[0]));
              v751[1] = v758;
              v751[2] = v757;
              v751[3] = v760;
              v751[4] = vsubq_f64(v752, vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v738, v754, 1), v741, v755, 1), v744, v756, 1));
              v751[5] = v759;
              ++v749;
              --v750;
            }
            while (v750);
            v809 = *(int *)(v571 + 4 * v1250 + 20);
            v810 = (float64x2_t *)(v580 + 8 * v1250);
            v811 = *(float64x2_t *)(v580 + 8 * (v1250 + 4));
            v812 = v810[1];
            v585 = v1210;
            *(double *)v584.i64 = v1214;
            v813 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v810, v1214), v1246, v812), v1242, v811);
            v814 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(*v810, v1210, 1), v1238, v812), v1234, v811);
            *(double *)v587.i64 = v1205;
            v815 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v810, v1205), v1230, v812), v1226, v811);
            *(float64x2_t *)(v1124 + 16 * v809) = vsubq_f64(*(float64x2_t *)(v1124 + 16 * v809), vmlaq_f64(vmlaq_f64(vmulq_n_f64(v813, *(double *)v1262.i64), v1222, v814), v1218, v815));
            v816 = v1254;
            v817 = v1258;
            do
            {
              v818 = *(_DWORD *)(v571 + 24 * *v816 + 20);
              if (v809 <= v818)
              {
                v819 = (float64x2_t *)(v1134 + 32 * (int)(v818 + *(_DWORD *)(v1132 + 4) * v809));
                v820 = (float64x2_t *)(v580 + 48 * *v816);
                v821 = v820[1];
                v822 = v820[2];
                v823 = vsubq_f64(v819[1], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v813, *v820, 1), v814, v821, 1), v815, v822, 1));
                *v819 = vsubq_f64(*v819, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v813, v820->f64[0]), v814, v821.f64[0]), v815, v822.f64[0]));
                v819[1] = v823;
              }
              ++v816;
              --v817;
            }
            while (v817);
            ++v590;
          }
          while (v590 != v1200);
        }
      }
      v581 = v1122 + 1;
      if (v1122 + 1 == v1119)
        goto LABEL_105;
    }
  }
LABEL_4:
  if ((**(_BYTE **)(v1105 + 16) & 1) == 0)
    return 0;
LABEL_106:
  v824 = *(_QWORD *)(a2 + 16);
  v1164 = *(_QWORD *)(a5 + 16);
  v1142 = *(int **)(a7 + 16);
  v825 = *(_QWORD *)(a8 + 16);
  v826 = *(_QWORD *)(a9 + 16);
  v827 = *(_QWORD *)(a11 + 16);
  v828 = *(_QWORD *)(a12 + 16);
  v1239 = *(_QWORD *)(a13 + 16);
  v1235 = *(_QWORD *)(a14 + 16);
  v1283 = *(_QWORD *)(a15 + 16);
  v1279 = *(_QWORD *)(a16 + 16);
  v1275 = *(_QWORD *)(a19 + 16);
  v1271 = *(_QWORD *)(a20 + 16);
  v1267 = *(_QWORD *)(a21 + 16);
  v1263 = *(_QWORD *)(a22 + 16);
  v1231 = *(_QWORD *)(a26 + 16);
  v1227 = *(_QWORD *)(a27 + 16);
  v1259 = *(_QWORD *)(a30 + 16);
  v1255 = *(_QWORD *)(a31 + 16);
  v1251 = *(_QWORD *)(a32 + 16);
  v1247 = *(_QWORD *)(a33 + 16);
  v1223 = *(_QWORD *)(a55 + 16);
  v1219 = *(_QWORD *)(a56 + 16);
  v829 = *(_QWORD *)(a57 + 16);
  v830 = *(_QWORD *)(a58 + 16);
  v1206 = *(_QWORD *)(a68 + 16);
  v1201 = *(_QWORD *)(a69 + 16);
  v1243 = *(_QWORD *)(v1090 + 16);
  v831 = *(_QWORD *)(v1092 + 16);
  v832 = *(_QWORD *)(v1093 + 16);
  v833 = *(_QWORD *)(v1094 + 16);
  v1161 = *(_QWORD *)(v1104 + 16);
  v1158 = *(_QWORD *)(v1099 + 16);
  v1154 = *(_QWORD *)(v1103 + 16);
  v1150 = *(_QWORD *)(v1102 + 16);
  v1215 = *(_QWORD *)(v1101 + 16);
  v1211 = *(_QWORD *)(v1100 + 16);
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  halide_copy_to_host();
  v836 = v1201;
  v837 = v1206;
  if ((int)v1120 >= 1)
  {
    v838 = 0;
    while (v838)
    {
      v839 = v1142[v838 - 1];
      v1146 = v838;
      v1168 = v1142[v838];
      if (v839 < (int)v1168)
        goto LABEL_113;
LABEL_108:
      v838 = v1146 + 1;
      if (v1146 + 1 == v1120)
        goto LABEL_153;
    }
    v839 = 0;
    v1146 = 0;
    v1168 = *v1142;
    if ((int)v1168 <= 0)
      goto LABEL_108;
LABEL_113:
    v840 = (float64x2_t *)(v1215 + 72 * v1146);
    v1202 = v840 + 1;
    v1196 = v840 + 2;
    v1207 = v840;
    v1192 = v840 + 3;
    v1188 = 9 * v1146 + 8;
    v1184 = (float64x2_t *)(v1211 + 24 * v1146);
    v1180 = 3 * v1146 + 2;
    v841 = v839;
    v1176 = v1168 - v839;
    v1172 = (int *)(v1164 + 4 * v839);
    while (1)
    {
      v842 = *(int *)(v1164 + 4 * v841);
      v843 = *(int *)(v824 + 24 * v842);
      if (v843 >> 30 != 3)
      {
        v844 = *(int *)(v825 + 4 * v843);
        v845 = (double *)(v1243 + 24 * v842);
        _Q2 = *(_OWORD *)v845;
        _Q5 = *v1196;
        _D1 = v1207->f64[1];
        __asm { FMLA            D0, D1, V2.D[1] }
        _D7 = v845[2];
        v851 = vmlad_n_f64(_D0, _D7, v1202->f64[0]);
        __asm
        {
          FMLA            D1, D5, V2.D[1]
          FMLA            D1, D7, V5.D[1]
        }
        _Q5.f64[0] = v1192->f64[1];
        __asm { FMLA            D4, D5, V2.D[1] }
        _D2 = _D4 + _D7 * *(double *)(v1215 + 8 * v1188);
        _Q4 = *v1184;
        __asm { FMLA            D5, D1, V4.D[1] }
        *(double *)(v1161 + 8 * v844) = *(double *)(v1161 + 8 * v844)
                                      - (_Q5.f64[0]
                                       + _D2 * *(double *)(v1211 + 8 * v1180));
        v857 = v1172;
        for (j = v1176; j; --j)
        {
          v859 = *v857;
          v860 = *(int *)(v824 + 24 * v859);
          if (v860 >> 30 != 3 && v844 <= *(_DWORD *)(v825 + 4 * v860))
          {
            v861 = 8 * ((int)v860 + *(_DWORD *)(v1235 + 4) * (int)v843);
            v862 = (double *)(v1243 + 24 * v859);
            _Q4 = *(_OWORD *)v862;
            __asm { FMLA            D5, D1, V4.D[1] }
            *(double *)(v1239 + v861) = *(double *)(v1239 + v861) - (_D5 + _D2 * v862[2]);
          }
          v865 = 6 * v859;
          v866 = *(_DWORD *)(v824 + ((24 * v859) | 4));
          if (v866 >> 30 == 3)
          {
            v867 = v865 + 4;
            v868 = *(_DWORD *)(v824 + 4 * (v865 + 4));
            if (v868 >> 30 == 3)
              goto LABEL_123;
          }
          else
          {
            v870 = (double *)(v1283 + 24 * (int)(v866 + *(_DWORD *)(v1279 + 4) * v843));
            v871 = v831 + 72 * v859;
            _Q5 = *(_OWORD *)(v871 + 16);
            _Q6 = *(_OWORD *)(v871 + 32);
            _Q7 = *(float64x2_t *)(v871 + 48);
            __asm
            {
              FMLA            D16, D1, V5.D[1]
              FMLA            D4, D2, V7.D[1]
              FMLA            D5, D1, V6.D[1]
            }
            *(double *)&_Q6 = *v870 - vmlad_n_f64(_D16, _D2, _Q7.f64[0]);
            *((double *)&_Q6 + 1) = v870[1] - _D4;
            v876 = v870[2] - (*(double *)&_Q5 + _D2 * *(double *)(v871 + 64));
            *(_OWORD *)v870 = _Q6;
            v870[2] = v876;
            v867 = v865 + 4;
            v868 = *(_DWORD *)(v824 + 4 * (v865 + 4));
            if (v868 >> 30 == 3)
            {
LABEL_123:
              v869 = *(_DWORD *)(v824 + 24 * v859 + 20);
              if (v869 >> 30 != 3)
                goto LABEL_127;
              goto LABEL_117;
            }
          }
          v877 = (double *)(v1275 + 48 * (int)(v868 + *(_DWORD *)(v1271 + 4) * v843));
          v878 = v832 + 144 * v859;
          _Q17 = *(_OWORD *)(v878 + 48);
          _Q18 = *(_OWORD *)(v878 + 64);
          _Q19 = *(_OWORD *)(v878 + 80);
          _Q20 = *(_OWORD *)(v878 + 96);
          _Q21 = *(_OWORD *)(v878 + 112);
          _Q22 = *(_OWORD *)(v878 + 128);
          v885 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v851, *(double *)v878), _D1, *(double *)&_Q17), _D2, *(double *)&_Q20);
          __asm
          {
            FMLA            D6, D1, V17.D[1]
            FMLA            D6, D2, V20.D[1]
          }
          *(double *)&_Q17 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v851, *(double *)(v878 + 16)), _D1, *(double *)&_Q18), _D2, *(double *)&_Q21);
          __asm
          {
            FMLA            D7, D1, V18.D[1]
            FMLA            D7, D2, V21.D[1]
          }
          *(double *)&_Q18 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v851, *(double *)(v878 + 32)), _D1, *(double *)&_Q19), _D2, *(double *)&_Q22);
          __asm
          {
            FMLA            D16, D1, V19.D[1]
            FMLA            D16, D2, V22.D[1]
          }
          *(double *)&_Q19 = *v877 - v885;
          v892 = v877[1] - _D6;
          *(double *)&v893 = v877[2] - *(double *)&_Q17;
          v894 = v877[3] - _D7;
          _Q7.f64[0] = v877[4] - *(double *)&_Q18;
          *((double *)&_Q19 + 1) = v892;
          *((double *)&v893 + 1) = v894;
          _Q7.f64[1] = v877[5] - _D16;
          *(_OWORD *)v877 = _Q19;
          *((_OWORD *)v877 + 1) = v893;
          *((float64x2_t *)v877 + 2) = _Q7;
          v869 = *(_DWORD *)(v824 + 24 * v859 + 20);
          if (v869 >> 30 != 3)
          {
LABEL_127:
            v895 = (double *)(v1267 + 16 * (int)(v869 + *(_DWORD *)(v1263 + 4) * v843));
            v896 = v833 + 8 * v865;
            _Q4 = *(_OWORD *)(v896 + 16);
            _Q5 = *(_OWORD *)(v833 + 8 * v867);
            __asm
            {
              FMLA            D3, D1, V4.D[1]
              FMLA            D3, D2, V5.D[1]
            }
            v901 = v895[1] - _D3;
            *v895 = *v895
                  - vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v851, *(double *)v896), _D1, *(double *)&_Q4), _D2, *(double *)&_Q5);
            v895[1] = v901;
          }
LABEL_117:
          ++v857;
        }
      }
      v902 = 6 * v842;
      v903 = *(int *)(v824 + ((24 * v842) | 4));
      if (v903 >> 30 != 3)
        break;
LABEL_139:
      v985 = *(int *)(v824 + 4 * (v902 + 4));
      if (v985 >> 30 != 3)
      {
        v986 = *(int *)(v827 + 4 * v985);
        v987 = (float64x2_t *)(v1154 + 48 * v986);
        v988 = (float64x2_t *)(v832 + 144 * v842);
        v989 = v988[1];
        v990 = v988[2];
        v991 = v988[3];
        v992 = v988[4];
        v993 = v988[5];
        v994 = v988[6];
        v995 = v988[7];
        _Q25 = v988[8];
        v996 = *(double *)(v1215 + 8 * v1188);
        v997 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v988, v1207->f64[0]), v991, *v1207, 1), v994, v1202->f64[0]);
        v998 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v989, v1207->f64[0]), v992, *v1207, 1), v995, v1202->f64[0]);
        v999 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v990, v1207->f64[0]), v993, *v1207, 1), _Q25, v1202->f64[0]);
        v1000 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*v988, *v1202, 1), v991, v1196->f64[0]), v994, *v1196, 1);
        v1001 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v989, *v1202, 1), v992, v1196->f64[0]), v995, *v1196, 1);
        v1002 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v990, *v1202, 1), v993, v1196->f64[0]), _Q25, *v1196, 1);
        v1003 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v988, v1192->f64[0]), v991, *v1192, 1), v994, v996);
        _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v989, v1192->f64[0]), v992, *v1192, 1), v995, v996);
        v1004 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v990, v1192->f64[0]), v993, *v1192, 1), _Q25, v996);
        v991.f64[0] = *(float64_t *)(v1211 + 8 * v1180);
        v1005 = vsubq_f64(v987[2], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v999, v1184->f64[0]), v1002, *v1184, 1), v1004, v991.f64[0]));
        v1006 = vsubq_f64(v987[1], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v998, v1184->f64[0]), v1001, *v1184, 1), _Q7, v991.f64[0]));
        *v987 = vsubq_f64(*v987, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v997, v1184->f64[0]), v1000, *v1184, 1), v1003, v991.f64[0]));
        v987[1] = v1006;
        v987[2] = v1005;
        v1007 = v1172;
        v1008 = v1176;
        do
        {
          v1009 = *v1007;
          v1010 = 6 * v1009 + 4;
          v1011 = *(int *)(v824 + 4 * v1010);
          if (v1011 >> 30 != 3 && v986 <= *(_DWORD *)(v827 + 4 * v1011))
          {
            v1012 = (float64x2_t *)(v832 + 144 * v1009);
            v1013 = v1012[1];
            v1014 = v1012[2];
            v1015 = v1012[3];
            v1016 = (float64x2_t *)(v1223 + 288 * ((int)v1011 + *(_DWORD *)(v1219 + 4) * (int)v985));
            v1018 = v1012[4];
            v1017 = v1012[5];
            v1019 = v1012[6];
            v1020 = v1012[7];
            v1021 = v1012[8];
            v1022 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v997, v1012->f64[0]), v1000, v1015.f64[0]), v1003, v1019.f64[0]);
            v1023 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v998, v1012->f64[0]), v1001, v1015.f64[0]), _Q7, v1019.f64[0]);
            v1024 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v999, v1012->f64[0]), v1002, v1015.f64[0]), v1004, v1019.f64[0]);
            v1025 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v997, *v1012, 1), v1000, v1015, 1), v1003, v1019, 1);
            v1026 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v998, *v1012, 1), v1001, v1015, 1), _Q7, v1019, 1);
            v1027 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v999, *v1012, 1), v1002, v1015, 1), v1004, v1019, 1);
            v1028 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v997, v1013.f64[0]), v1000, v1018.f64[0]), v1003, v1020.f64[0]);
            v1029 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v998, v1013.f64[0]), v1001, v1018.f64[0]), _Q7, v1020.f64[0]);
            v1030 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v999, v1013.f64[0]), v1002, v1018.f64[0]), v1004, v1020.f64[0]);
            v1031 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v997, v1013, 1), v1000, v1018, 1), v1003, v1020, 1);
            v1032 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v998, v1013, 1), v1001, v1018, 1), _Q7, v1020, 1);
            v1033 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v999, v1013, 1), v1002, v1018, 1), v1004, v1020, 1);
            v1034 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v997, v1014.f64[0]), v1000, v1017.f64[0]), v1003, v1021.f64[0]);
            v1035 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v998, v1014.f64[0]), v1001, v1017.f64[0]), _Q7, v1021.f64[0]);
            v1036 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v999, v1014.f64[0]), v1002, v1017.f64[0]), v1004, v1021.f64[0]);
            v1037 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v997, v1014, 1), v1000, v1017, 1), v1003, v1021, 1);
            v1038 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v998, v1014, 1), v1001, v1017, 1), _Q7, v1021, 1);
            v1039 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v999, v1014, 1), v1002, v1017, 1), v1004, v1021, 1);
            v1040 = vsubq_f64(v1016[2], v1024);
            v1041 = vsubq_f64(v1016[1], v1023);
            v1042 = vsubq_f64(v1016[5], v1027);
            v1043 = vsubq_f64(v1016[4], v1026);
            v1044 = vsubq_f64(v1016[3], v1025);
            v1045 = vsubq_f64(v1016[8], v1030);
            v1046 = vsubq_f64(v1016[7], v1029);
            v1047 = vsubq_f64(v1016[6], v1028);
            v1048 = vsubq_f64(v1016[11], v1033);
            v1049 = vsubq_f64(v1016[10], v1032);
            _Q25 = vsubq_f64(v1016[9], v1031);
            v1050 = vsubq_f64(v1016[14], v1036);
            v1051 = vsubq_f64(v1016[13], v1035);
            v1052 = vsubq_f64(v1016[12], v1034);
            v1053 = v1016[17];
            v1054 = vsubq_f64(v1016[15], v1037);
            *v1016 = vsubq_f64(*v1016, v1022);
            v1016[1] = v1041;
            v1016[2] = v1040;
            v1016[3] = v1044;
            v1016[4] = v1043;
            v1016[5] = v1042;
            v1016[6] = v1047;
            v1016[7] = v1046;
            v1016[8] = v1045;
            v1016[9] = _Q25;
            v1016[10] = v1049;
            v1016[11] = v1048;
            v1016[12] = v1052;
            v1016[13] = v1051;
            v1016[14] = v1050;
            v1016[15] = v1054;
            v1016[16] = vsubq_f64(v1016[16], v1038);
            v1016[17] = vsubq_f64(v1053, v1039);
          }
          v1055 = *(_DWORD *)(v824 + 24 * v1009 + 20);
          if (v1055 >> 30 != 3)
          {
            v1056 = (float64x2_t *)(v829 + 96 * (int)(v1055 + *(_DWORD *)(v830 + 4) * v985));
            v1057 = v1056[4];
            v1058 = (float64x2_t *)(v833 + 48 * v1009);
            v1059 = v1058[1];
            _Q25 = *(float64x2_t *)(v833 + 8 * v1010);
            v1060 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v998, *v1058, 1), v1001, v1059, 1), _Q7, _Q25, 1);
            v1061 = vsubq_f64(v1056[2], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v999, v1058->f64[0]), v1002, v1059.f64[0]), v1004, _Q25.f64[0]));
            v1062 = vsubq_f64(v1056[1], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v998, v1058->f64[0]), v1001, v1059.f64[0]), _Q7, _Q25.f64[0]));
            v1063 = vsubq_f64(v1056[5], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v999, *v1058, 1), v1002, v1059, 1), v1004, _Q25, 1));
            v1064 = vsubq_f64(v1056[3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v997, *v1058, 1), v1000, v1059, 1), v1003, _Q25, 1));
            *v1056 = vsubq_f64(*v1056, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v997, v1058->f64[0]), v1000, v1059.f64[0]), v1003, _Q25.f64[0]));
            v1056[1] = v1062;
            v1056[2] = v1061;
            v1056[3] = v1064;
            v1056[4] = vsubq_f64(v1057, v1060);
            v1056[5] = v1063;
          }
          ++v1007;
          --v1008;
        }
        while (v1008);
      }
      v1065 = *(int *)(v824 + 4 * v902 + 20);
      if (v1065 >> 30 != 3)
      {
        v1066 = *(int *)(v828 + 4 * v1065);
        v1067 = (float64x2_t *)(v833 + 8 * v902);
        v1068 = v1067[1];
        v1069 = *(float64x2_t *)(v833 + 8 * (v902 + 4));
        _Q7 = *v1196;
        v1070 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v1067, v1207->f64[0]), v1068, *v1207, 1), v1069, v1202->f64[0]);
        v1071 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*v1067, *v1202, 1), v1068, v1196->f64[0]), v1069, *v1196, 1);
        v1072 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v1067, v1192->f64[0]), v1068, *v1192, 1), v1069, *(double *)(v1215 + 8 * v1188));
        *(float64x2_t *)(v1150 + 16 * v1066) = vsubq_f64(*(float64x2_t *)(v1150 + 16 * v1066), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1070, v1184->f64[0]), v1071, *v1184, 1), v1072, *(double *)(v1211 + 8 * v1180)));
        v1073 = v1172;
        v1074 = v1176;
        do
        {
          v1075 = *(int *)(v824 + 24 * *v1073 + 20);
          if (v1075 >> 30 != 3 && v1066 <= *(_DWORD *)(v828 + 4 * v1075))
          {
            v1076 = (float64x2_t *)(v837 + 32 * ((int)v1075 + *(_DWORD *)(v836 + 4) * (int)v1065));
            v1077 = (float64x2_t *)(v833 + 48 * *v1073);
            v1078 = v1077[1];
            _Q7 = v1077[2];
            v1079 = vsubq_f64(v1076[1], vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v1070, *v1077, 1), v1071, v1078, 1), v1072, _Q7, 1));
            *v1076 = vsubq_f64(*v1076, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1070, v1077->f64[0]), v1071, v1078.f64[0]), v1072, _Q7.f64[0]));
            v1076[1] = v1079;
          }
          ++v1073;
          --v1074;
        }
        while (v1074);
      }
      if (++v841 == v1168)
        goto LABEL_108;
    }
    v904 = *(int *)(v826 + 4 * v903);
    v905 = (float64x2_t *)(v1158 + 24 * v904);
    _Q7.f64[0] = v905[1].f64[0];
    v906 = v831 + 72 * v842;
    _Q16 = *(int8x16_t *)(v906 + 32);
    _Q17 = *(float64x2_t *)(v906 + 48);
    _Q18 = *v1196;
    v910 = *(double *)(v1215 + 8 * v1188);
    v911 = (float64x2_t)vextq_s8(*(int8x16_t *)(v906 + 16), _Q16, 8uLL);
    v912 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v906, v1207->f64[0]), v911, *v1207, 1), _Q17, v1202->f64[0]);
    _D2 = v1207->f64[1];
    __asm { FMLA            D1, D2, V16.D[1] }
    _D22 = *(double *)(v906 + 64);
    v916 = vmlad_n_f64(_D1, _D22, v1202->f64[0]);
    v917 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*(float64x2_t *)v906, *v1202, 1), v911, v1196->f64[0]), _Q17, *v1196, 1);
    __asm
    {
      FMLA            D3, D18, V16.D[1]
      FMLA            D3, D22, V18.D[1]
    }
    v920 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v906, v1192->f64[0]), v911, *v1192, 1), _Q17, v910);
    _Q17.f64[0] = v1192->f64[1];
    __asm { FMLA            D5, D17, V16.D[1] }
    _D5 = _D5 + _D22 * v910;
    _Q16 = *v1184;
    _Q17.f64[0] = *(float64_t *)(v1211 + 8 * v1180);
    v924 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v912, v1184->f64[0]), v917, *v1184, 1), v920, _Q17.f64[0]);
    __asm { FMLA            D19, D3, V16.D[1] }
    _Q16.f64[0] = _D19 + _D5 * _Q17.f64[0];
    _Q7 = vsubq_f64(_Q7, _Q16);
    *v905 = vsubq_f64(*v905, v924);
    v905[1].f64[0] = _Q7.f64[0];
    v926 = v1172;
    v927 = v1176;
    while (1)
    {
      v928 = *v926;
      v929 = *(int *)(v824 + 24 * v928 + 4);
      if (v929 >> 30 != 3 && v904 <= *(_DWORD *)(v826 + 4 * v929))
      {
        v930 = v1231 + 72 * ((int)v929 + *(_DWORD *)(v1227 + 4) * (int)v903);
        v931 = *(float64x2_t *)(v930 + 16);
        v932 = *(int64x2_t *)(v930 + 32);
        v924.f64[0] = *(float64_t *)(v930 + 64);
        v933 = (float64x2_t *)(v831 + 72 * v928);
        _Q19 = *v933;
        _Q20 = v933[1];
        _Q21 = v933[2];
        _Q22 = v933[3];
        v938 = v933[4].f64[0];
        v939 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v912, v933->f64[0]), v917, _Q20, 1), v920, _Q22.f64[0]);
        __asm { FMLA            D25, D3, V20.D[1] }
        _Q25.f64[0] = vmlad_n_f64(_Q25.f64[0], _D5, _Q22.f64[0]);
        v940 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v912, *v933, 1), v917, _Q21.f64[0]), v920, _Q22, 1);
        __asm { FMLA            D19, D5, V22.D[1] }
        v941 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v912, _Q20.f64[0]), v917, _Q21, 1), v920, v938);
        __asm { FMLA            D20, D3, V21.D[1] }
        _Q20.f64[0] = _Q20.f64[0] + _D5 * v938;
        v911 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v931, (int8x16_t)v932, 8uLL), v940);
        v924 = vsubq_f64(v924, _Q20);
        v942 = vsubq_f64(*(float64x2_t *)(v930 + 48), v941);
        _Q7 = (float64x2_t)vzip1q_s64((int64x2_t)vsubq_f64(v931, _Q25), (int64x2_t)v911);
        *(float64x2_t *)v930 = vsubq_f64(*(float64x2_t *)v930, v939);
        *(float64x2_t *)(v930 + 16) = _Q7;
        *(int8x16_t *)(v930 + 32) = vextq_s8((int8x16_t)v911, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v932, 1), _Q19), 8uLL);
        *(float64x2_t *)(v930 + 48) = v942;
        *(float64_t *)(v930 + 64) = v924.f64[0];
      }
      v943 = 6 * v928 + 4;
      v944 = *(_DWORD *)(v824 + 4 * v943);
      if (v944 >> 30 == 3)
      {
        v945 = *(_DWORD *)(v824 + 24 * v928 + 20);
        if (v945 >> 30 != 3)
          goto LABEL_138;
      }
      else
      {
        v946 = v1259 + 144 * (int)(v944 + *(_DWORD *)(v1255 + 4) * v903);
        v947 = *(float64x2_t *)(v946 + 16);
        v948 = *(int64x2_t *)(v946 + 32);
        v949 = *(float64x2_t *)(v946 + 64);
        v950 = *(int64x2_t *)(v946 + 80);
        v951 = *(float64x2_t *)(v946 + 112);
        v952 = *(int64x2_t *)(v946 + 128);
        v953 = (float64x2_t *)(v832 + 144 * v928);
        _Q28 = *v953;
        _Q29 = v953[1];
        _Q24 = v953[2];
        _Q30 = v953[3];
        _Q31 = v953[4];
        _Q26 = v953[5];
        _Q8 = v953[6];
        _Q9 = v953[7];
        _Q27 = v953[8];
        v963 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v912, v953->f64[0]), v917, _Q30.f64[0]), v920, _Q8.f64[0]);
        _Q25.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v916, v953->f64[0]), _D3, _Q30.f64[0]), _D5, _Q8.f64[0]);
        v964 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v912, *v953, 1), v917, _Q30, 1), v920, _Q8, 1);
        __asm
        {
          FMLA            D28, D3, V30.D[1]
          FMLA            D28, D5, V8.D[1]
        }
        v965 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v912, _Q29.f64[0]), v917, _Q31.f64[0]), v920, _Q9.f64[0]);
        _Q8.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v916, _Q29.f64[0]), _D3, _Q31.f64[0]), _D5, _Q9.f64[0]);
        v966 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v912, _Q29, 1), v917, _Q31, 1), v920, _Q9, 1);
        __asm
        {
          FMLA            D29, D3, V31.D[1]
          FMLA            D29, D5, V9.D[1]
        }
        v967 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v912, _Q24.f64[0]), v917, _Q26.f64[0]), v920, _Q27.f64[0]);
        _Q9.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v916, _Q24.f64[0]), _D3, _Q26.f64[0]), _D5, _Q27.f64[0]);
        v968 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v912, _Q24, 1), v917, _Q26, 1), v920, _Q27, 1);
        __asm
        {
          FMLA            D24, D3, V26.D[1]
          FMLA            D24, D5, V27.D[1]
        }
        v969 = (float64x2_t)vextq_s8((int8x16_t)v947, (int8x16_t)v948, 8uLL);
        v970 = (int64x2_t)vsubq_f64(v947, _Q25);
        v971 = vsubq_f64(*(float64x2_t *)v946, v963);
        v972 = (int64x2_t)vsubq_f64(v969, v964);
        v973 = vsubq_f64(*(float64x2_t *)(v946 + 48), v965);
        _Q25 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v949, (int8x16_t)v950, 8uLL), v966);
        v911 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v950, 1), _Q29);
        v974 = vsubq_f64(*(float64x2_t *)(v946 + 96), v967);
        v975 = (int64x2_t)vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v951, (int8x16_t)v952, 8uLL), v968);
        *(float64x2_t *)v946 = v971;
        *(int64x2_t *)(v946 + 16) = vzip1q_s64(v970, v972);
        *(int8x16_t *)(v946 + 32) = vextq_s8((int8x16_t)v972, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v948, 1), _Q28), 8uLL);
        *(float64x2_t *)(v946 + 48) = v973;
        v976 = vzip1q_s64((int64x2_t)vsubq_f64(v949, _Q8), (int64x2_t)_Q25);
        v924 = (float64x2_t)vextq_s8((int8x16_t)_Q25, (int8x16_t)v911, 8uLL);
        *(int64x2_t *)(v946 + 64) = v976;
        *(float64x2_t *)(v946 + 80) = v924;
        _Q7 = (float64x2_t)vzip1q_s64((int64x2_t)vsubq_f64(v951, _Q9), v975);
        *(float64x2_t *)(v946 + 96) = v974;
        *(float64x2_t *)(v946 + 112) = _Q7;
        *(int8x16_t *)(v946 + 128) = vextq_s8((int8x16_t)v975, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v952, 1), _Q24), 8uLL);
        v945 = *(_DWORD *)(v824 + 24 * v928 + 20);
        if (v945 >> 30 != 3)
        {
LABEL_138:
          v977 = v1251 + 48 * (int)(v945 + *(_DWORD *)(v1247 + 4) * v903);
          v978 = *(float64x2_t *)(v977 + 16);
          v979 = *(int64x2_t *)(v977 + 32);
          v980 = (float64x2_t *)(v833 + 48 * v928);
          _Q17 = *v980;
          _Q18 = v980[1];
          _Q19 = *(float64x2_t *)(v833 + 8 * v943);
          v984 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v912, v980->f64[0]), v917, _Q18.f64[0]), v920, _Q19.f64[0]);
          v911.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v916, v980->f64[0]), _D3, _Q18.f64[0]), _D5, _Q19.f64[0]);
          __asm
          {
            FMLA            D17, D3, V18.D[1]
            FMLA            D17, D5, V19.D[1]
          }
          v924 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v978, (int8x16_t)v979, 8uLL), vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v912, *v980, 1), v917, _Q18, 1), v920, _Q19, 1));
          _Q7 = (float64x2_t)vzip1q_s64((int64x2_t)vsubq_f64(v978, v911), (int64x2_t)v924);
          *(float64x2_t *)v977 = vsubq_f64(*(float64x2_t *)v977, v984);
          *(float64x2_t *)(v977 + 16) = _Q7;
          *(int8x16_t *)(v977 + 32) = vextq_s8((int8x16_t)v924, (int8x16_t)vsubq_f64((float64x2_t)vdupq_laneq_s64(v979, 1), _Q17), 8uLL);
        }
      }
      ++v926;
      if (!--v927)
        goto LABEL_139;
    }
  }
LABEL_153:
  *(_QWORD *)(v1102 + 24) |= 1uLL;
  *(_QWORD *)(v1103 + 24) |= 1uLL;
  *(_QWORD *)(v1099 + 24) |= 1uLL;
  *(_QWORD *)(v1104 + 24) |= 1uLL;
  *(_QWORD *)(a32 + 24) |= 1uLL;
  *(_QWORD *)(a30 + 24) |= 1uLL;
  *(_QWORD *)(a26 + 24) |= 1uLL;
  *(_QWORD *)(a21 + 24) |= 1uLL;
  *(_QWORD *)(a19 + 24) |= 1uLL;
  *(_QWORD *)(a68 + 24) |= 1uLL;
  *(_QWORD *)(a57 + 24) |= 1uLL;
  *(_QWORD *)(a55 + 24) |= 1uLL;
  *(_QWORD *)(a15 + 24) |= 1uLL;
  *(_QWORD *)(a13 + 24) |= 1uLL;
  return 0;
}

uint64_t sub_2396B2F24(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_OWORD *)(a1 + 64);
  v2 = *(_OWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 96);
  v4 = *(_OWORD *)(a1 + 112);
  sub_2396AEB10(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 456), *(_QWORD *)(a1 + 656), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 664), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v1, *((uint64_t *)&v1 + 1), v2, *((uint64_t *)&v2 + 1), v3, *((uint64_t *)&v3 + 1), v4, *((uint64_t *)&v4 + 1), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    v6,
    v7,
    v8,
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    v9,
    v10,
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    *(_QWORD *)(a1 + 256),
    v11,
    v12,
    v13,
    v14,
    v15,
    v16,
    *(_QWORD *)(a1 + 312),
    *(_QWORD *)(a1 + 320),
    *(_QWORD *)(a1 + 328),
    *(_QWORD *)(a1 + 336),
    *(_QWORD *)(a1 + 344),
    *(_QWORD *)(a1 + 352),
    v17,
    v18,
    v19,
    v20,
    v21,
    v22,
    v23,
    v24,
    v25,
    *(_QWORD *)(a1 + 432),
    *(_QWORD *)(a1 + 440),
    *(_QWORD *)(a1 + 448),
    *(_QWORD *)(a1 + 456),
    v26,
    v27,
    v28,
    v29,
    v30);
  return 0;
}

uint64_t sub_2396B3014(uint64_t *a1)
{
  sub_23969A4F8(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return 0;
}

uint64_t sub_2396B3054(uint64_t *a1)
{
  sub_2396823E4(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B3074(uint64_t *a1)
{
  sub_2396823E4(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B3094(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B30B4(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B30D4(uint64_t *a1)
{
  sub_239682828(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B30F4(uint64_t *a1)
{
  sub_239682828(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B3114(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B3134(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B3154(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B3174(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B3194(uint64_t *a1)
{
  sub_239682A24(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B31B4(uint64_t *a1)
{
  sub_2396833F0(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B31D4(uint64_t *a1)
{
  sub_239682618(*a1, a1[1], a1[2]);
  return 0;
}

uint64_t sub_2396B31F4(uint64_t *a1)
{
  sub_23969AB9C(*a1, a1[1]);
  return 0;
}

void sub_2396B3214(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W8>)
{
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[3];
  _BOOL4 v18;
  __int128 v19;

  sub_23962C714(&v19);
  v8 = (const void *)*MEMORY[0x24BE12038];
  v18 = a3 == 0;
  sub_2396B3378((uint64_t)&v19, v8, (int *)&v18);
  v9 = (const void *)*MEMORY[0x24BE12030];
  v18 = 1;
  sub_2396B34F4((uint64_t)&v19, v9, (int *)&v18);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v17[0] = &off_250AE94F0;
  v17[1] = v11;
  v17[2] = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_2396B4680((uint64_t)v17, a2, a3, a4);
  sub_23979BCF4(v17);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_2396B3334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_23979BCF4(&a9);
  sub_239416DA0((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2396B3350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396B3364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2396B3378(uint64_t a1, const void *a2, int *a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;
  int v23;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, a2))
    return 0;
  v23 = *a3;
  sub_239629634(&value, &v23);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_14:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_15:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2396B34E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2396B34F4(uint64_t a1, const void *a2, int *a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;
  int v23;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, a2))
    return 0;
  v23 = *a3;
  sub_2396298C4(&value, &v23);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_14:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_15:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2396B365C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396B3670(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W8>)
{
  std::__fs::filesystem::path::__string_view v12;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v14;
  std::basic_string_view<_CharT, _Traits>::size_type v15;
  char v16;
  const void *v17;
  std::__shared_weak_count_vtbl *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *exception;
  _QWORD v34[3];
  int v35;
  CFStringRef filePath;
  std::__shared_weak_count *v37;
  void *__p[2];
  unint64_t v39;
  __int128 __dst;
  unint64_t v41;

  v12 = std::__fs::filesystem::path::__parent_path(a1);
  if (v12.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v12.__size_ >= 0x17)
  {
    v14 = (v12.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12.__size_ | 7) != 0x17)
      v14 = v12.__size_ | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12.__size_;
    v41 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v41) = v12.__size_;
  p_dst = &__dst;
  if (v12.__size_)
LABEL_8:
    memmove(p_dst, v12.__data_, v12.__size_);
  *((_BYTE *)p_dst + v12.__size_) = 0;
  *(_OWORD *)__p = __dst;
  v39 = v41;
  v16 = sub_23962E588((uint64_t)__p, a5);
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  if ((v16 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "Jpeg HW saving file issue: the save folder must exist to proceed");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  sub_23962C714(__p);
  v17 = (const void *)*MEMORY[0x24BE12038];
  LODWORD(__dst) = a4 == 0;
  sub_2396B3378((uint64_t)__p, v17, (int *)&__dst);
  if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&__dst, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    __dst = *(_OWORD *)&a1->__pn_.__r_.__value_.__l.__data_;
    v41 = a1->__pn_.__r_.__value_.__r.__words[2];
  }
  sub_239629EF4((uint64_t)&__dst, &filePath);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
  v18 = (std::__shared_weak_count_vtbl *)CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x24BDBD240], filePath, kCFURLPOSIXPathStyle, 0);
  sub_23962B858((std::__shared_weak_count_vtbl **)&__dst, v18, 0);
  v19 = (const void *)*MEMORY[0x24BE12030];
  v35 = 3;
  sub_2396B34F4((uint64_t)__p, v19, &v35);
  sub_2396B3A14((uint64_t)__p, (const void *)*MEMORY[0x24BE12028], (uint64_t)&__dst);
  v21 = *(_QWORD *)(a2 + 8);
  v20 = *(_QWORD *)(a2 + 16);
  v34[0] = &off_250AE94F0;
  v34[1] = v21;
  v34[2] = v20;
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  sub_2396B4680((uint64_t)v34, a3, a4, a6);
  sub_23979BCF4(v34);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v31 = (unint64_t *)((char *)__p[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_2396B3974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396B3988(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2396B399C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_23979BCF4(&a9);
  sub_239416DA0((uint64_t)&__p);
  sub_239416DA0((uint64_t)&a13);
  sub_239416DA0((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_2396B3A14(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, a2))
    return 0;
  sub_2396B3B88(&value, a3);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_14:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_15:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2396B3B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396B3B88(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_23962B960(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2396B3C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2396B3C98(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  _OWORD *v8;
  const void *v9;
  const void *v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::runtime_error *exception;
  std::string v32;
  int ImageForIndex;
  std::__shared_weak_count_vtbl *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v8 = sub_23962C714(&v38);
  if (!a3)
  {
    v9 = (const void *)*MEMORY[0x24BE12100];
    LODWORD(v32.__r_.__value_.__l.__data_) = 2;
    sub_2396B3FCC((uint64_t)v8, v9, (int *)&v32);
  }
  nullsub_4(a2);
  v10 = (const void *)*MEMORY[0x24BE12110];
  LODWORD(v32.__r_.__value_.__l.__data_) = v11;
  sub_2396B4148((uint64_t)&v38, v10, (uint64_t)&v32);
  sub_2396B42BC(&v32);
  v37 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  if (v32.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v32.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    size = (std::__shared_weak_count *)v32.__r_.__value_.__l.__size_;
    if (v32.__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(v32.__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  v34 = (std::__shared_weak_count_vtbl *)&v37;
  v35 = a1;
  sub_2396B43F4(&v32);
  v36 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  if (v32.__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(v32.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = (std::__shared_weak_count *)v32.__r_.__value_.__l.__size_;
    if (v32.__r_.__value_.__l.__size_)
    {
      v20 = (unint64_t *)(v32.__r_.__value_.__l.__size_ + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v34 = 0;
  ImageForIndex = CMPhotoDecompressionContainerCreateImageForIndex();
  if (ImageForIndex)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2396B4530("Fail to CMPhoto decompress containter. Error code: ", &ImageForIndex, &v32);
    std::runtime_error::runtime_error(exception, &v32);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  sub_23979BA20(a4, v34, 0, 0);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_2396B3F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416DA0(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_2396B3F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  void *v20;
  int v21;
  uint64_t v22;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      sub_239416DA0((uint64_t)&a18);
      sub_239416DA0((uint64_t)&a20);
      sub_239416DA0(v22 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void sub_2396B3FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416DA0(v1 - 48);
  _Unwind_Resume(a1);
}

BOOL sub_2396B3FCC(uint64_t a1, const void *a2, int *a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;
  int v23;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, a2))
    return 0;
  v23 = *a3;
  sub_239629634(&value, &v23);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_14:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_15:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2396B4134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2396B4148(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, a2))
    return 0;
  sub_2396298C4(&value, a3);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_14:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_15:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2396B42A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396B42BC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  std::runtime_error *exception;
  std::string v5;
  _BYTE v6[12];

  *(_DWORD *)&v6[8] = 0;
  *(_QWORD *)v6 = CMPhotoDecompressionSessionCreate();
  if (*(_DWORD *)v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2396B576C("Fail to create CMPhoto decompression session. Error code: ", (int *)v6, &v5);
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v2 = *(_QWORD *)&v6[4];
  *a1 = *(_QWORD *)&v6[4];
  result = (_QWORD *)operator new();
  *result = &off_250AE3118;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  a1[1] = result;
  return result;
}

void sub_2396B438C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __break(1u);
}

void sub_2396B43E0()
{
  __cxa_end_catch();
  JUMPOUT(0x2396B43E8);
}

_QWORD *sub_2396B43F4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  std::runtime_error *exception;
  std::string v5;
  _BYTE v6[12];

  *(_DWORD *)&v6[8] = 0;
  *(_QWORD *)v6 = CMPhotoDecompressionSessionCreateContainer();
  if (*(_DWORD *)v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2396B5974("Fail to create CMPhoto decompression session container. Error code: ", (int *)v6, &v5);
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v2 = *(_QWORD *)&v6[4];
  *a1 = *(_QWORD *)&v6[4];
  result = (_QWORD *)operator new();
  *result = &off_250AE3168;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  a1[1] = result;
  return result;
}

void sub_2396B44C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __break(1u);
}

void sub_2396B451C()
{
  __cxa_end_catch();
  JUMPOUT(0x2396B4524);
}

void sub_2396B4530(const char *a1@<X0>, int *a2@<X1>, std::string *a3@<X8>)
{
  char *v5;
  int v6;
  int64x2_t v7;
  int8x16_t v8;
  _OWORD *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v16;
  unint64_t v17;
  std::string v18;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v5 = sub_2396B6970(&__p, a1);
  v6 = *a2;
  v16 = v5;
  std::to_string(&v18, v6);
  v9 = v16;
  if ((unint64_t)v16 >= v17)
  {
    v11 = sub_23941ACDC(&__p, (uint64_t)&v18);
    v16 = v11;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      v11 = v16;
    }
  }
  else
  {
    v10 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
    *((_QWORD *)v16 + 2) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
    *v9 = v10;
    v11 = (char *)v9 + 24;
    v16 = (char *)v9 + 24;
  }
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v11, (uint64_t)&v18, a3, v7, v8);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v16;
    v14 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*(v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v16 = v12;
    operator delete(v14);
  }
}

void sub_2396B4640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_2396B4680(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W8>)
{
  std::__shared_weak_count_vtbl *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  int v12;
  const void *v13;
  const void *v14;
  int v15;
  int v16;
  const void *v17;
  const void *v18;
  const void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *exception;
  std::runtime_error *v33;
  std::runtime_error *v34;
  std::runtime_error *v35;
  std::runtime_error *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  int v46;
  std::string v47;

  v45 = a2;
  v46 = a3;
  if (!sub_23979C580(a1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "PixelBuffer for Jpeg HW encoding cannot be empty");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_QWORD *)&v41 = 0;
  LODWORD(v39) = CMPhotoCompressionSessionCreate();
  if ((_DWORD)v39)
  {
    v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2396B5DA8("Failed to create JPEG compression session. Error code: ", (int *)&v39, &v47);
    std::runtime_error::runtime_error(v33, &v47);
    __cxa_throw(v33, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v6 = (std::__shared_weak_count_vtbl *)v41;
  v7 = (std::__shared_weak_count *)operator new();
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE31B8;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v6;
  v43 = v6;
  v44 = v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v42 = CMPhotoCompressionSessionOpenEmptyContainer();
  if (v42)
  {
    v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2396B4D5C("Failed to open empty container for JPEG comperssion. Error code: ", &v42, &v47);
    std::runtime_error::runtime_error(v34, &v47);
    __cxa_throw(v34, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  sub_23962C714(&v41);
  if (v46)
    v12 = 1752589105;
  else
    v12 = 1785750887;
  v40 = v12;
  sub_2396B4148((uint64_t)&v41, (const void *)*MEMORY[0x24BE12050], (uint64_t)&v40);
  v13 = (const void *)*MEMORY[0x24BE120B0];
  v47.__r_.__value_.__s.__data_[0] = 0;
  sub_2396B4EAC((uint64_t)&v41, v13, &v47);
  v14 = (const void *)*MEMORY[0x24BE12098];
  LODWORD(v47.__r_.__value_.__l.__data_) = 3;
  sub_2396B5020((uint64_t)&v41, v14, (int *)&v47);
  v15 = v45;
  if ((_DWORD)v45)
    v16 = 1;
  else
    v16 = 2;
  LODWORD(v45) = v16;
  v17 = (const void *)*MEMORY[0x24BE120A0];
  if (v15)
  {
    v47.__r_.__value_.__s.__data_[0] = 0;
    sub_2396B4EAC((uint64_t)&v41, v17, &v47);
    v18 = (const void *)*MEMORY[0x24BE12088];
    v47.__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    v47.__r_.__value_.__s.__data_[0] = 1;
    sub_2396B4EAC((uint64_t)&v41, v17, &v47);
    v18 = (const void *)*MEMORY[0x24BE12088];
    v47.__r_.__value_.__s.__data_[0] = 0;
  }
  sub_2396B4EAC((uint64_t)&v41, v18, &v47);
  sub_23962C714(&v39);
  sub_239629B4C(&v37, (char *)&v45 + 4);
  sub_2396B519C((uint64_t)&v39, (const void *)*MEMORY[0x24BE12140], (uint64_t)&v37);
  v19 = (const void *)*MEMORY[0x24BE12090];
  v47.__r_.__value_.__r.__words[0] = v39;
  sub_2396B5310((uint64_t)&v41, v19, (CFTypeRef *)&v47.__r_.__value_.__l.__data_);
  sub_23979C580(a1);
  v42 = CMPhotoCompressionSessionAddImage();
  if (v42)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2396B54CC("Failed to add image to session. Error code: ", &v42, &v47);
    std::runtime_error::runtime_error(v35, &v47);
    __cxa_throw(v35, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v42 = CMPhotoCompressionSessionCloseContainerAndCopyBacking();
  sub_23962A438(a4, 0);
  if (v42)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_2396B561C("Failed to close container and copy backing. Error code: ", &v42, &v47);
    std::runtime_error::runtime_error(v36, &v47);
    __cxa_throw(v36, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v20 = v38;
  if (v38)
  {
    v21 = (unint64_t *)&v38->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v44;
  if (v44)
  {
    v30 = (unint64_t *)&v44->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_2396B4B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2396B4BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t *)va);
  sub_239416DA0(va1);
  _Unwind_Resume(a1);
}

void sub_2396B4BAC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if (*(char *)(v6 - 49) < 0)
  {
    operator delete(*(void **)(v6 - 72));
    if ((v5 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v5)
  {
LABEL_6:
    sub_239416DA0(v3);
    sub_239416DA0((uint64_t)va);
    sub_239416DA0((uint64_t)va1);
    JUMPOUT(0x2396B4D44);
  }
  __cxa_free_exception(v4);
  goto LABEL_6;
}

void sub_2396B4BE8(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  if (*(char *)(v5 - 49) < 0)
  {
    operator delete(*(void **)(v5 - 72));
    if ((v4 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v4)
  {
LABEL_6:
    sub_239416DA0((uint64_t)va);
    sub_239416DA0((uint64_t)va1);
    JUMPOUT(0x2396B4D44);
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

void sub_2396B4C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  int v13;
  uint64_t v14;
  va_list va;

  va_start(va, a12);
  if (*(char *)(v14 - 49) < 0)
  {
    operator delete(*(void **)(v14 - 72));
    if ((v13 & 1) == 0)
LABEL_6:
      JUMPOUT(0x2396B4D4CLL);
  }
  else if (!v13)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v12);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396B4C5C(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (*(char *)(v3 - 49) < 0)
  {
    operator delete(*(void **)(v3 - 72));
    if ((v2 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2396B4C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t *)va);
  sub_239416DA0(va1);
  _Unwind_Resume(a1);
}

void sub_2396B4CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t *)va);
  sub_239416DA0(va1);
  _Unwind_Resume(a1);
}

void sub_2396B4CB0()
{
  JUMPOUT(0x2396B4D3CLL);
}

void sub_2396B4CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t *)va);
  sub_239416DA0(va1);
  _Unwind_Resume(a1);
}

void sub_2396B4CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t *)va);
  sub_239416DA0(va1);
  _Unwind_Resume(a1);
}

void sub_2396B4CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t *)va);
  sub_239416DA0(va1);
  _Unwind_Resume(a1);
}

void sub_2396B4CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t *)va);
  sub_239416DA0(va1);
  _Unwind_Resume(a1);
}

void sub_2396B4CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396B4CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396B4D00(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_2396B4D18()
{
  __cxa_end_catch();
  JUMPOUT(0x2396B4D20);
}

void sub_2396B4D5C(const char *a1@<X0>, int *a2@<X1>, std::string *a3@<X8>)
{
  char *v5;
  int v6;
  int64x2_t v7;
  int8x16_t v8;
  _OWORD *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v16;
  unint64_t v17;
  std::string v18;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v5 = sub_2396B61DC(&__p, a1);
  v6 = *a2;
  v16 = v5;
  std::to_string(&v18, v6);
  v9 = v16;
  if ((unint64_t)v16 >= v17)
  {
    v11 = sub_23941ACDC(&__p, (uint64_t)&v18);
    v16 = v11;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      v11 = v16;
    }
  }
  else
  {
    v10 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
    *((_QWORD *)v16 + 2) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
    *v9 = v10;
    v11 = (char *)v9 + 24;
    v16 = (char *)v9 + 24;
  }
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v11, (uint64_t)&v18, a3, v7, v8);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v16;
    v14 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*(v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v16 = v12;
    operator delete(v14);
  }
}

void sub_2396B4E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2396B4EAC(uint64_t a1, const void *a2, _BYTE *a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, a2))
    return 0;
  sub_239629DA0(a3, (std::__shared_weak_count_vtbl **)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_14:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_15:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2396B500C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2396B5020(uint64_t a1, const void *a2, int *a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;
  int v23;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, a2))
    return 0;
  v23 = *a3;
  sub_239629634(&value, &v23);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_14:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_15:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2396B5188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2396B519C(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, a2))
    return 0;
  sub_2396B6408(&value, a3);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_14:
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_15:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2396B52FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2396B5310(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL8 v20;
  unint64_t *v21;
  unint64_t v22;
  void *value;
  std::__shared_weak_count *v25;
  void *v26;
  std::__shared_weak_count *v27;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (sub_23962C8DC(*(const __CFDictionary **)a1, a2))
    return 0;
  sub_23962C1EC(&v26, *a3);
  v11 = v26;
  value = v26;
  v25 = v27;
  if (v27)
  {
    v12 = (unint64_t *)&v27->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v14 = v27;
    if (v27)
    {
      v15 = (unint64_t *)&v27->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v11 = value;
    if (v25)
    {
      v17 = (unint64_t *)&v25->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  v20 = v11 != 0;
  if (v11)
    j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
  if (v25)
  {
    v21 = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v20;
}

void sub_2396B54B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2396B54CC(const char *a1@<X0>, int *a2@<X1>, std::string *a3@<X8>)
{
  char *v5;
  int v6;
  int64x2_t v7;
  int8x16_t v8;
  _OWORD *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v16;
  unint64_t v17;
  std::string v18;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v5 = sub_2396B6518(&__p, a1);
  v6 = *a2;
  v16 = v5;
  std::to_string(&v18, v6);
  v9 = v16;
  if ((unint64_t)v16 >= v17)
  {
    v11 = sub_23941ACDC(&__p, (uint64_t)&v18);
    v16 = v11;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      v11 = v16;
    }
  }
  else
  {
    v10 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
    *((_QWORD *)v16 + 2) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
    *v9 = v10;
    v11 = (char *)v9 + 24;
    v16 = (char *)v9 + 24;
  }
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v11, (uint64_t)&v18, a3, v7, v8);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v16;
    v14 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*(v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v16 = v12;
    operator delete(v14);
  }
}

void sub_2396B55DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_2396B561C(const char *a1@<X0>, int *a2@<X1>, std::string *a3@<X8>)
{
  char *v5;
  int v6;
  int64x2_t v7;
  int8x16_t v8;
  _OWORD *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v16;
  unint64_t v17;
  std::string v18;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v5 = sub_2396B6744(&__p, a1);
  v6 = *a2;
  v16 = v5;
  std::to_string(&v18, v6);
  v9 = v16;
  if ((unint64_t)v16 >= v17)
  {
    v11 = sub_23941ACDC(&__p, (uint64_t)&v18);
    v16 = v11;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      v11 = v16;
    }
  }
  else
  {
    v10 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
    *((_QWORD *)v16 + 2) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
    *v9 = v10;
    v11 = (char *)v9 + 24;
    v16 = (char *)v9 + 24;
  }
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v11, (uint64_t)&v18, a3, v7, v8);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v16;
    v14 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*(v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v16 = v12;
    operator delete(v14);
  }
}

void sub_2396B572C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_2396B576C(const char *a1@<X0>, int *a2@<X1>, std::string *a3@<X8>)
{
  char *v5;
  int v6;
  int64x2_t v7;
  int8x16_t v8;
  _OWORD *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v16;
  unint64_t v17;
  std::string v18;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v5 = sub_23965DFD0(&__p, a1);
  v6 = *a2;
  v16 = v5;
  std::to_string(&v18, v6);
  v9 = v16;
  if ((unint64_t)v16 >= v17)
  {
    v11 = sub_23941ACDC(&__p, (uint64_t)&v18);
    v16 = v11;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      v11 = v16;
    }
  }
  else
  {
    v10 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
    *((_QWORD *)v16 + 2) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
    *v9 = v10;
    v11 = (char *)v9 + 24;
    v16 = (char *)v9 + 24;
  }
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v11, (uint64_t)&v18, a3, v7, v8);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v16;
    v14 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*(v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v16 = v12;
    operator delete(v14);
  }
}

void sub_2396B587C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_2396B58C0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2396B58E4(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_2396B5904(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP27CMPhotoDecompressionSessionEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP27CMPhotoDecompressionSessionEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP27CMPhotoDecompressionSessionEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP27CMPhotoDecompressionSessionEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2396B5974(const char *a1@<X0>, int *a2@<X1>, std::string *a3@<X8>)
{
  char *v5;
  int v6;
  int64x2_t v7;
  int8x16_t v8;
  _OWORD *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v16;
  unint64_t v17;
  std::string v18;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v5 = sub_2396B5AC4(&__p, a1);
  v6 = *a2;
  v16 = v5;
  std::to_string(&v18, v6);
  v9 = v16;
  if ((unint64_t)v16 >= v17)
  {
    v11 = sub_23941ACDC(&__p, (uint64_t)&v18);
    v16 = v11;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      v11 = v16;
    }
  }
  else
  {
    v10 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
    *((_QWORD *)v16 + 2) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
    *v9 = v10;
    v11 = (char *)v9 + 24;
    v16 = (char *)v9 + 24;
  }
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v11, (uint64_t)&v18, a3, v7, v8);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v16;
    v14 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*(v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v16 = v12;
    operator delete(v14);
  }
}

void sub_2396B5A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

char *sub_2396B5AC4(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2396B5CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396B5CF4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2396B5D18(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_2396B5D38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP29CMPhotoDecompressionContainerEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP29CMPhotoDecompressionContainerEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP29CMPhotoDecompressionContainerEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP29CMPhotoDecompressionContainerEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2396B5DA8(const char *a1@<X0>, int *a2@<X1>, std::string *a3@<X8>)
{
  char *v5;
  int v6;
  int64x2_t v7;
  int8x16_t v8;
  _OWORD *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v16;
  unint64_t v17;
  std::string v18;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v5 = sub_2396B5EF8(&__p, a1);
  v6 = *a2;
  v16 = v5;
  std::to_string(&v18, v6);
  v9 = v16;
  if ((unint64_t)v16 >= v17)
  {
    v11 = sub_23941ACDC(&__p, (uint64_t)&v18);
    v16 = v11;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      v11 = v16;
    }
  }
  else
  {
    v10 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
    *((_QWORD *)v16 + 2) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
    *v9 = v10;
    v11 = (char *)v9 + 24;
    v16 = (char *)v9 + 24;
  }
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v11, (uint64_t)&v18, a3, v7, v8);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v16;
    v14 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*(v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v16 = v12;
    operator delete(v14);
  }
}

void sub_2396B5EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

char *sub_2396B5EF8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2396B6110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396B6128(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2396B614C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_2396B616C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP25CMPhotoCompressionSessionEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP25CMPhotoCompressionSessionEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP25CMPhotoCompressionSessionEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP25CMPhotoCompressionSessionEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

char *sub_2396B61DC(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2396B63F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396B6408(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_23962B16C(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2396B6504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_2396B6518(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2396B6730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2396B6744(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2396B695C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2396B6970(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2396B6B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396B6B9C(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>, float a7@<S2>, float a8@<S3>)
{
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  float *v22;
  float *v23;
  BOOL v24;
  BOOL v25;
  float v26;
  BOOL v27;
  char *v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  float v35;
  float v36;
  float *v37;
  float v38;
  int v39;
  char *v40;
  float v41;
  unsigned int v42;
  char *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  float v49;
  float v50;
  float v51;
  int v52;
  float v53;
  char *v54;
  unint64_t v55;
  float v56;
  int v57;
  __int16 v58;
  unsigned int v59;
  unsigned int v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  float *v65;
  unint64_t v66;
  float *v67;
  BOOL v68;
  BOOL v69;
  float v70;
  BOOL v71;
  char *v72;
  unint64_t v73;
  unsigned int v74;
  int v75;
  float *v76;
  char *v77;
  float v78;
  unsigned int v79;
  char *v80;
  float v81;
  __int128 *v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  __int128 *v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  int v90;
  float v91;
  BOOL v92;
  BOOL v93;
  int v94;
  float v95;
  int v96;
  float v97;
  uint64_t v98;
  BOOL v99;
  float v100;
  int v101;
  __int16 v102;
  unsigned int v103;
  unsigned int v104;
  float v105;
  int v106;
  float v107;
  float *v108;
  BOOL v109;
  BOOL v110;
  float v111;
  BOOL v112;
  int v113;
  int v114;
  float v115;
  float *v116;
  char *v117;
  float v118;
  unsigned int v119;
  float v120;
  BOOL v121;
  BOOL v122;
  float v123;
  BOOL v124;
  float v125;
  BOOL v126;
  BOOL v127;
  BOOL v128;
  int v129;
  BOOL v130;
  BOOL v131;
  BOOL v132;
  BOOL v133;
  BOOL v134;
  BOOL v135;
  uint64_t v136;
  BOOL v137;
  BOOL v138;
  BOOL v139;
  float v140;
  BOOL v141;
  BOOL v142;
  BOOL v143;
  BOOL v144;
  BOOL v145;
  BOOL v146;
  float v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  BOOL v151;
  BOOL v152;
  BOOL v153;
  float v154;
  BOOL v155;
  BOOL v156;
  BOOL v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  __int128 *i;
  int v162;
  unint64_t v163;
  uint8x8_t v164;
  unint64_t v165;
  uint64_t **v166;
  uint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  __int128 *v171;
  __int128 v172;
  uint64_t v173;
  char *v174;
  __int128 *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  __int128 v182;
  uint64_t v183;
  char *v184;
  __int128 v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  __int128 v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  void *v198[2];
  void *__p[2];
  int v200;
  void *v201;
  char *v202;
  uint64_t v203;
  __int128 *v204;
  __int128 *v205;
  uint64_t v206;
  uint64_t v207;

  v207 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v10 = *a1;
  v9 = a1[1];
  v11 = v9 - *a1;
  if (v9 == v10)
  {
    v201 = 0;
    v202 = 0;
    v203 = 0;
    v198[1] = 0;
    *(_OWORD *)__p = 0u;
    v200 = 1065353216;
    v198[0] = 0;
    if (v11)
      goto LABEL_363;
    goto LABEL_364;
  }
  v12 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 3);
  if (v12 > 0x666666666666666)
    sub_2394189F8();
  v17 = (char *)operator new(v11);
  v18 = 0;
  *(_QWORD *)a4 = v17;
  *(_QWORD *)(a4 + 8) = v17;
  *(_QWORD *)(a4 + 16) = &v17[40 * v12];
  v201 = 0;
  v202 = 0;
  v203 = 0;
  *(_OWORD *)v198 = 0u;
  *(_OWORD *)__p = 0u;
  v200 = 1065353216;
  while (2)
  {
    v19 = v10 + 40 * v18;
    v20 = *(_OWORD *)v19;
    v194 = *(_DWORD *)(v19 + 16);
    v193 = v20;
    v195 = *(_QWORD *)(v19 + 20);
    v21 = *(_QWORD *)(v19 + 28);
    v197 = *(_DWORD *)(v19 + 36);
    v196 = v21;
    if (v18 == v12 - 1)
      sub_239595458(&v201, &v193);
    if (BYTE2(v193) && v18 != 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3) - 1)
      goto LABEL_359;
    switch(a2)
    {
      case 0:
        v23 = (float *)v201;
        v22 = (float *)v202;
        v205 = 0;
        v206 = 0;
        v204 = 0;
        if (v201 == v202)
          goto LABEL_232;
        do
        {
          if (v23[2] >= a5)
          {
            v24 = a8 > 0.0;
            v25 = a7 > 0.0;
            v26 = v23[1];
            if (v26 >= a7)
              v25 = 0;
            if (v26 <= a8)
              v24 = 0;
            v27 = v23[4] >= a6 || a6 <= 0.0;
            if (v27 && !v25 && !v24)
              sub_239595458((void **)&v204, (__int128 *)v23);
          }
          v23 += 10;
        }
        while (v23 != v22);
        goto LABEL_159;
      case 1:
        v65 = (float *)v201;
        v64 = v202;
        v66 = 0xCCCCCCCCCCCCCCCDLL * ((v202 - (_BYTE *)v201) >> 3);
        if (v66 == 3)
        {
          v108 = (float *)((char *)v201 + 80);
          v204 = 0;
          v205 = 0;
          v206 = 0;
          if ((char *)v201 + 80 == v202)
            goto LABEL_232;
          do
          {
            if (v108[2] >= a5)
            {
              v109 = a8 > 0.0;
              v110 = a7 > 0.0;
              v111 = v108[1];
              if (v111 >= a7)
                v110 = 0;
              if (v111 <= a8)
                v109 = 0;
              v112 = v108[4] >= a6 || a6 <= 0.0;
              if (v112 && !v110 && !v109)
                sub_239595458((void **)&v204, (__int128 *)v108);
            }
            v108 += 10;
          }
          while (v108 != (float *)v64);
        }
        else if (v66 == 6)
        {
          v67 = (float *)((char *)v201 + 120);
          v204 = 0;
          v205 = 0;
          v206 = 0;
          if ((char *)v201 + 120 == v202)
            goto LABEL_232;
          do
          {
            if (v67[2] >= a5)
            {
              v68 = a8 > 0.0;
              v69 = a7 > 0.0;
              v70 = v67[1];
              if (v70 >= a7)
                v69 = 0;
              if (v70 <= a8)
                v68 = 0;
              v71 = v67[4] >= a6 || a6 <= 0.0;
              if (v71 && !v69 && !v68)
                sub_239595458((void **)&v204, (__int128 *)v67);
            }
            v67 += 10;
          }
          while (v67 != (float *)v64);
        }
        else
        {
          v204 = 0;
          v205 = 0;
          v206 = 0;
          if (v201 == v202)
            goto LABEL_232;
          do
          {
            if (v65[2] >= a5)
            {
              v121 = a8 > 0.0;
              v122 = a7 > 0.0;
              v123 = v65[1];
              if (v123 >= a7)
                v122 = 0;
              if (v123 <= a8)
                v121 = 0;
              v124 = v65[4] >= a6 || a6 <= 0.0;
              if (v124 && !v122 && !v121)
                sub_239595458((void **)&v204, (__int128 *)v65);
            }
            v65 += 10;
          }
          while (v65 != (float *)v64);
        }
LABEL_159:
        v86 = v204;
        v82 = v205;
        if (!a3)
          goto LABEL_249;
        goto LABEL_317;
      case 2:
        v43 = (char *)v201;
        LODWORD(v205) = 0;
        v204 = 0;
        if (v201 == v202)
          goto LABEL_232;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0.0;
        v50 = 0.0;
        v51 = 0.0;
        v52 = 0;
        do
        {
          v53 = *((float *)v43 + 2);
          if (v53 > v49)
          {
            v47 = *(_DWORD *)v43;
            v46 = BYTE1(*(_DWORD *)v43);
            v45 = BYTE2(*(_DWORD *)v43);
            v44 = HIBYTE(*(_DWORD *)v43);
            v50 = *((float *)v43 + 1);
            v52 = *((_DWORD *)v43 + 3);
            v51 = *((float *)v43 + 4);
            v48 = *(_QWORD *)(v43 + 20);
            v204 = *(__int128 **)(v43 + 28);
            LODWORD(v205) = *((_DWORD *)v43 + 9);
            v49 = v53;
          }
          v43 += 40;
        }
        while (v43 != v202);
        if (v49 <= 0.0)
          goto LABEL_232;
        v82 = 0;
        v83 = a8 > 0.0;
        v84 = a7 > 0.0;
        v85 = a6 > 0.0;
        if (v51 >= a6)
          v85 = 0;
        if (v50 >= a7)
          v84 = 0;
        if (v50 <= a8)
          v83 = 0;
        v86 = 0;
        if (v49 >= a5 && !v85 && !v84 && !v83)
          goto LABEL_95;
        goto LABEL_316;
      case 3:
        v54 = (char *)v201;
        v55 = 0xCCCCCCCCCCCCCCCDLL * ((v202 - (_BYTE *)v201) >> 3);
        if (v55 != 3)
        {
          if (v55 != 6)
          {
            LODWORD(v205) = 0;
            v204 = 0;
            if (v201 == v202)
              goto LABEL_232;
            v113 = 0;
            v114 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0.0;
            v50 = 0.0;
            v51 = 0.0;
            v52 = 0;
            do
            {
              v120 = *((float *)v54 + 2);
              if (v120 > v49)
              {
                v47 = *(_DWORD *)v54;
                v46 = BYTE1(*(_DWORD *)v54);
                v114 = BYTE2(*(_DWORD *)v54);
                v113 = HIBYTE(*(_DWORD *)v54);
                v50 = *((float *)v54 + 1);
                v52 = *((_DWORD *)v54 + 3);
                v51 = *((float *)v54 + 4);
                v48 = *(_QWORD *)(v54 + 20);
                v204 = *(__int128 **)(v54 + 28);
                LODWORD(v205) = *((_DWORD *)v54 + 9);
                v49 = v120;
              }
              v54 += 40;
            }
            while (v54 != v202);
            if (v49 <= 0.0)
            {
LABEL_232:
              v82 = 0;
              v86 = 0;
              if (a3)
                goto LABEL_317;
              goto LABEL_249;
            }
            v82 = 0;
            v141 = a8 > 0.0;
            v142 = a7 > 0.0;
            v143 = a6 > 0.0;
            if (v51 >= a6)
              v143 = 0;
            if (v50 >= a7)
              v142 = 0;
            if (v50 <= a8)
              v141 = 0;
            v86 = 0;
            if (v49 < a5 || v143 || v142 || v141)
              goto LABEL_316;
            goto LABEL_245;
          }
          LODWORD(v205) = 0;
          v204 = 0;
          v56 = *((float *)v201 + 2);
          if (v56 <= 0.0)
          {
            v62 = 0;
            LOBYTE(v57) = 0;
            v58 = 0;
            v59 = 0;
            v60 = 0;
            v189 = 0;
            v56 = 0.0;
            v61 = 0.0;
            v63 = *((unsigned int *)v201 + 12);
            if (*(float *)&v63 <= 0.0)
            {
LABEL_252:
              v147 = *((float *)v201 + 22);
              if (v147 <= v56)
              {
                v82 = 0;
                if (v56 <= 0.0)
                  goto LABEL_281;
              }
              else
              {
                v57 = *((_DWORD *)v201 + 20);
                v58 = v57 & 0xFF00;
                v59 = v57 & 0xFFFF0000;
                v60 = v57 & 0xFF000000;
                v61 = *((float *)v201 + 21);
                v189 = *(_QWORD *)((char *)v201 + 92);
                v62 = *(_QWORD *)((char *)v201 + 100);
                v204 = *(__int128 **)((char *)v201 + 108);
                LODWORD(v205) = *((_DWORD *)v201 + 29);
                v56 = v147;
                v82 = 0;
                if (v147 <= 0.0)
                  goto LABEL_281;
              }
              v148 = a8 > 0.0;
              v149 = a7 > 0.0;
              v150 = a6 > 0.0;
              if (*((float *)&v189 + 1) >= a6)
                v150 = 0;
              if (v61 >= a7)
                v149 = 0;
              if (v61 <= a8)
                v148 = 0;
              v86 = 0;
              if (v56 < a5 || v150 || v149 || v148)
                goto LABEL_316;
              goto LABEL_299;
            }
          }
          else
          {
            v57 = *(_DWORD *)v201;
            v58 = *(_DWORD *)v201 & 0xFF00;
            v59 = *(_DWORD *)v201 & 0xFFFF0000;
            v60 = *(_DWORD *)v201 & 0xFF000000;
            v61 = *((float *)v201 + 1);
            v189 = *(_QWORD *)((char *)v201 + 12);
            v62 = *(_QWORD *)((char *)v201 + 20);
            v204 = *(__int128 **)((char *)v201 + 28);
            LODWORD(v205) = *((_DWORD *)v201 + 9);
            LODWORD(v63) = *((_DWORD *)v201 + 12);
            if (*(float *)&v63 <= v56)
              goto LABEL_252;
          }
          v57 = *((_DWORD *)v201 + 10);
          v58 = v57 & 0xFF00;
          v59 = v57 & 0xFFFF0000;
          v60 = v57 & 0xFF000000;
          v61 = *((float *)v201 + 11);
          v189 = *(_QWORD *)((char *)v201 + 52);
          v62 = *(_QWORD *)((char *)v201 + 60);
          v204 = *(__int128 **)((char *)v201 + 68);
          LODWORD(v205) = *((_DWORD *)v201 + 19);
          v56 = *(float *)&v63;
          goto LABEL_252;
        }
        LODWORD(v205) = 0;
        v204 = 0;
        v100 = *((float *)v201 + 2);
        if (v100 <= 0.0)
        {
          v34 = 0;
          LOBYTE(v101) = 0;
          v102 = 0;
          v103 = 0;
          v104 = 0;
          v106 = 0;
          v38 = 0.0;
          v100 = 0.0;
          v105 = 0.0;
          v107 = *((float *)v201 + 12);
          if (v107 <= 0.0)
            goto LABEL_269;
        }
        else
        {
          v101 = *(_DWORD *)v201;
          v102 = *(_DWORD *)v201 & 0xFF00;
          v103 = *(_DWORD *)v201 & 0xFFFF0000;
          v104 = *(_DWORD *)v201 & 0xFF000000;
          v105 = *((float *)v201 + 1);
          v106 = *((_DWORD *)v201 + 3);
          v38 = *((float *)v201 + 4);
          v34 = *(_QWORD *)((char *)v201 + 20);
          v204 = *(__int128 **)((char *)v201 + 28);
          LODWORD(v205) = *((_DWORD *)v201 + 9);
          v107 = *((float *)v201 + 12);
          if (v107 <= v100)
            goto LABEL_269;
        }
        v101 = *((_DWORD *)v201 + 10);
        v102 = v101 & 0xFF00;
        v103 = v101 & 0xFFFF0000;
        v104 = v101 & 0xFF000000;
        v105 = *((float *)v201 + 11);
        v106 = *((_DWORD *)v201 + 13);
        v38 = *((float *)v201 + 14);
        v34 = *(_QWORD *)((char *)v201 + 60);
        v204 = *(__int128 **)((char *)v201 + 68);
        LODWORD(v205) = *((_DWORD *)v201 + 19);
        v100 = v107;
LABEL_269:
        v82 = 0;
        if (v100 <= 0.0)
        {
LABEL_281:
          v86 = 0;
          if (a3)
            goto LABEL_317;
          goto LABEL_249;
        }
        v151 = a8 > 0.0;
        v152 = a7 > 0.0;
        v153 = a6 > 0.0;
        if (v38 >= a6)
          v153 = 0;
        if (v105 >= a7)
          v152 = 0;
        if (v105 <= a8)
          v151 = 0;
        v86 = 0;
        if (v100 < a5 || v153 || v152 || v151)
          goto LABEL_316;
        goto LABEL_313;
      case 4:
        v28 = (char *)v201;
        v29 = 0xCCCCCCCCCCCCCCCDLL * ((v202 - (_BYTE *)v201) >> 3);
        if (v29 == 3)
        {
          v91 = *((float *)v201 + 22);
          v86 = 0;
          if (v91 <= 0.0)
            goto LABEL_248;
          v92 = a8 > 0.0;
          v93 = a7 > 0.0;
          v94 = *((_DWORD *)v201 + 20);
          v95 = *((float *)v201 + 21);
          v96 = *((_DWORD *)v201 + 23);
          v97 = *((float *)v201 + 24);
          v204 = *(__int128 **)((char *)v201 + 108);
          v98 = *(_QWORD *)((char *)v201 + 100);
          LODWORD(v205) = *((_DWORD *)v201 + 29);
          v99 = v97 < a6 && a6 > 0.0;
          if (v95 >= a7)
            v93 = 0;
          if (v95 <= a8)
            v92 = 0;
          v82 = 0;
          if (v91 >= a5 && !v99 && !v93 && !v92)
          {
            v86 = (__int128 *)operator new(0x28uLL);
            v82 = (__int128 *)((char *)v86 + 40);
            *(_DWORD *)v86 = v94;
            *((float *)v86 + 1) = v95;
            *((float *)v86 + 2) = v91;
            *((_DWORD *)v86 + 3) = v96;
            *((float *)v86 + 4) = v97;
            *(_QWORD *)((char *)v86 + 20) = v98;
            goto LABEL_315;
          }
          goto LABEL_316;
        }
        if (v29 == 6)
        {
          LODWORD(v205) = 0;
          v204 = 0;
          if ((char *)v201 + 120 == v202)
            goto LABEL_247;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0.0;
          v36 = 0.0;
          v37 = (float *)((char *)v201 + 148);
          v38 = 0.0;
          v39 = 0;
          do
          {
            v41 = *(v37 - 5);
            if (v41 > v35)
            {
              v42 = *((_DWORD *)v37 - 7);
              v33 = v42;
              v32 = BYTE1(v42);
              v31 = BYTE2(v42);
              v30 = HIBYTE(v42);
              v36 = *(v37 - 6);
              v39 = *((_DWORD *)v37 - 4);
              v38 = *(v37 - 3);
              v34 = *((_QWORD *)v37 - 1);
              v204 = *(__int128 **)v37;
              *(float *)&v205 = v37[2];
              v35 = v41;
            }
            v40 = (char *)(v37 + 3);
            v37 += 10;
          }
          while (v40 != v202);
          if (v35 <= 0.0)
            goto LABEL_247;
          v86 = 0;
          v126 = a8 > 0.0;
          v127 = a7 > 0.0;
          v128 = a6 > 0.0;
          if (v38 >= a6)
            v128 = 0;
          if (v36 >= a7)
            v127 = 0;
          if (v36 <= a8)
            v126 = 0;
          v82 = 0;
          if (v35 >= a5 && !v128 && !v127 && !v126)
          {
            v86 = (__int128 *)operator new(0x28uLL);
            v129 = (v30 << 24) | (v31 << 16);
            goto LABEL_216;
          }
          goto LABEL_316;
        }
        LODWORD(v205) = 0;
        v204 = 0;
        if (v201 == v202)
          goto LABEL_247;
        v113 = 0;
        v114 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0.0;
        v50 = 0.0;
        v51 = 0.0;
        v52 = 0;
        do
        {
          v115 = *((float *)v28 + 2);
          if (v115 > v49)
          {
            v47 = *(_DWORD *)v28;
            v46 = BYTE1(*(_DWORD *)v28);
            v114 = BYTE2(*(_DWORD *)v28);
            v113 = HIBYTE(*(_DWORD *)v28);
            v50 = *((float *)v28 + 1);
            v52 = *((_DWORD *)v28 + 3);
            v51 = *((float *)v28 + 4);
            v48 = *(_QWORD *)(v28 + 20);
            v204 = *(__int128 **)(v28 + 28);
            LODWORD(v205) = *((_DWORD *)v28 + 9);
            v49 = v115;
          }
          v28 += 40;
        }
        while (v28 != v202);
        if (v49 <= 0.0)
          goto LABEL_247;
        v86 = 0;
        v130 = a8 > 0.0;
        v131 = a7 > 0.0;
        v132 = a6 > 0.0;
        if (v51 >= a6)
          v132 = 0;
        if (v50 >= a7)
          v131 = 0;
        if (v50 <= a8)
          v130 = 0;
        v82 = 0;
        if (v49 < a5 || v132 || v131 || v130)
          goto LABEL_316;
        goto LABEL_245;
      case 5:
        v72 = (char *)v201;
        v73 = 0xCCCCCCCCCCCCCCCDLL * ((v202 - (_BYTE *)v201) >> 3);
        if (v73 == 3)
        {
          LODWORD(v205) = 0;
          v204 = 0;
          if ((char *)v201 + 80 != v202)
          {
            v74 = 0;
            v75 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0.0;
            v36 = 0.0;
            v116 = (float *)((char *)v201 + 108);
            v38 = 0.0;
            v39 = 0;
            do
            {
              v118 = *(v116 - 5);
              if (v118 > v35)
              {
                v119 = *((_DWORD *)v116 - 7);
                v33 = v119;
                v32 = BYTE1(v119);
                v75 = BYTE2(v119);
                v74 = HIBYTE(v119);
                v36 = *(v116 - 6);
                v39 = *((_DWORD *)v116 - 4);
                v38 = *(v116 - 3);
                v34 = *((_QWORD *)v116 - 1);
                v204 = *(__int128 **)v116;
                *(float *)&v205 = v116[2];
                v35 = v118;
              }
              v117 = (char *)(v116 + 3);
              v116 += 10;
            }
            while (v117 != v202);
            if (v35 > 0.0)
            {
              v137 = a8 > 0.0;
              v138 = a7 > 0.0;
              v139 = a6 > 0.0;
              if (v38 >= a6)
                v139 = 0;
              if (v36 >= a7)
                v138 = 0;
              if (v36 <= a8)
                v137 = 0;
              if (v35 >= a5 && !v139 && !v138 && !v137)
              {
LABEL_215:
                v86 = (__int128 *)operator new(0x28uLL);
                v129 = (v74 << 24) | (v75 << 16);
LABEL_216:
                v82 = (__int128 *)((char *)v86 + 40);
                *(_DWORD *)v86 = v129 | (v32 << 8) | v33;
                *((float *)v86 + 1) = v36;
                *((float *)v86 + 2) = v35;
                *((_DWORD *)v86 + 3) = v39;
                goto LABEL_314;
              }
            }
          }
          LODWORD(v205) = 0;
          v204 = 0;
          v100 = *((float *)v201 + 2);
          if (v100 <= 0.0)
          {
            v34 = 0;
            LOBYTE(v101) = 0;
            v102 = 0;
            v103 = 0;
            v104 = 0;
            v106 = 0;
            v38 = 0.0;
            v100 = 0.0;
            v105 = 0.0;
            v140 = *((float *)v201 + 12);
            if (v140 <= 0.0)
              goto LABEL_302;
          }
          else
          {
            v101 = *(_DWORD *)v201;
            v102 = *(_DWORD *)v201 & 0xFF00;
            v103 = *(_DWORD *)v201 & 0xFFFF0000;
            v104 = *(_DWORD *)v201 & 0xFF000000;
            v105 = *((float *)v201 + 1);
            v106 = *((_DWORD *)v201 + 3);
            v38 = *((float *)v201 + 4);
            v34 = *(_QWORD *)((char *)v201 + 20);
            v204 = *(__int128 **)((char *)v201 + 28);
            LODWORD(v205) = *((_DWORD *)v201 + 9);
            v140 = *((float *)v201 + 12);
            if (v140 <= v100)
            {
LABEL_302:
              v86 = 0;
              if (v100 <= 0.0)
                goto LABEL_248;
              v158 = a8 > 0.0;
              v159 = a7 > 0.0;
              v160 = a6 > 0.0;
              if (v38 >= a6)
                v160 = 0;
              if (v105 >= a7)
                v159 = 0;
              if (v105 <= a8)
                v158 = 0;
              v82 = 0;
              if (v100 < a5 || v160 || v159 || v158)
                goto LABEL_316;
LABEL_313:
              v86 = (__int128 *)operator new(0x28uLL);
              v82 = (__int128 *)((char *)v86 + 40);
              *(_DWORD *)v86 = v104 & 0xFF000000 | v103 & 0xFF0000 | v102 & 0xFF00 | v101;
              *((float *)v86 + 1) = v105;
              *((float *)v86 + 2) = v100;
              *((_DWORD *)v86 + 3) = v106;
LABEL_314:
              *((float *)v86 + 4) = v38;
              *(_QWORD *)((char *)v86 + 20) = v34;
              goto LABEL_315;
            }
          }
          v101 = *((_DWORD *)v201 + 10);
          v102 = v101 & 0xFF00;
          v103 = v101 & 0xFFFF0000;
          v104 = v101 & 0xFF000000;
          v105 = *((float *)v201 + 11);
          v106 = *((_DWORD *)v201 + 13);
          v38 = *((float *)v201 + 14);
          v34 = *(_QWORD *)((char *)v201 + 60);
          v204 = *(__int128 **)((char *)v201 + 68);
          LODWORD(v205) = *((_DWORD *)v201 + 19);
          v100 = v140;
          goto LABEL_302;
        }
        if (v73 == 6)
        {
          LODWORD(v205) = 0;
          v204 = 0;
          if ((char *)v201 + 120 != v202)
          {
            v74 = 0;
            v75 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0.0;
            v36 = 0.0;
            v76 = (float *)((char *)v201 + 148);
            v38 = 0.0;
            v39 = 0;
            do
            {
              v78 = *(v76 - 5);
              if (v78 > v35)
              {
                v79 = *((_DWORD *)v76 - 7);
                v33 = v79;
                v32 = BYTE1(v79);
                v75 = BYTE2(v79);
                v74 = HIBYTE(v79);
                v36 = *(v76 - 6);
                v39 = *((_DWORD *)v76 - 4);
                v38 = *(v76 - 3);
                v34 = *((_QWORD *)v76 - 1);
                v204 = *(__int128 **)v76;
                *(float *)&v205 = v76[2];
                v35 = v78;
              }
              v77 = (char *)(v76 + 3);
              v76 += 10;
            }
            while (v77 != v202);
            if (v35 > 0.0)
            {
              v133 = a8 > 0.0;
              v134 = a7 > 0.0;
              v135 = a6 > 0.0;
              if (v38 >= a6)
                v135 = 0;
              if (v36 >= a7)
                v134 = 0;
              if (v36 <= a8)
                v133 = 0;
              if (v35 >= a5 && !v135 && !v134 && !v133)
                goto LABEL_215;
            }
          }
          LODWORD(v205) = 0;
          v204 = 0;
          v56 = *((float *)v201 + 2);
          if (v56 <= 0.0)
          {
            v62 = 0;
            LOBYTE(v57) = 0;
            v58 = 0;
            v59 = 0;
            v60 = 0;
            v189 = 0;
            v56 = 0.0;
            v61 = 0.0;
            v136 = *((unsigned int *)v201 + 12);
            if (*(float *)&v136 <= 0.0)
            {
LABEL_285:
              v154 = *((float *)v201 + 22);
              if (v154 <= v56)
              {
                v86 = 0;
                if (v56 <= 0.0)
                  goto LABEL_248;
              }
              else
              {
                v57 = *((_DWORD *)v201 + 20);
                v58 = v57 & 0xFF00;
                v59 = v57 & 0xFFFF0000;
                v60 = v57 & 0xFF000000;
                v61 = *((float *)v201 + 21);
                v189 = *(_QWORD *)((char *)v201 + 92);
                v62 = *(_QWORD *)((char *)v201 + 100);
                v204 = *(__int128 **)((char *)v201 + 108);
                LODWORD(v205) = *((_DWORD *)v201 + 29);
                v56 = v154;
                v86 = 0;
                if (v154 <= 0.0)
                  goto LABEL_248;
              }
              v155 = a8 > 0.0;
              v156 = a7 > 0.0;
              v157 = a6 > 0.0;
              if (*((float *)&v189 + 1) >= a6)
                v157 = 0;
              if (v61 >= a7)
                v156 = 0;
              if (v61 <= a8)
                v155 = 0;
              v82 = 0;
              if (v56 < a5 || v157 || v156 || v155)
                goto LABEL_316;
LABEL_299:
              v86 = (__int128 *)operator new(0x28uLL);
              v82 = (__int128 *)((char *)v86 + 40);
              *(_DWORD *)v86 = v60 & 0xFF000000 | v59 & 0xFF0000 | v58 & 0xFF00 | v57;
              *((float *)v86 + 1) = v61;
              *((float *)v86 + 2) = v56;
              *(_QWORD *)((char *)v86 + 12) = v189;
              *(_QWORD *)((char *)v86 + 20) = v62;
              goto LABEL_315;
            }
          }
          else
          {
            v57 = *(_DWORD *)v201;
            v58 = *(_DWORD *)v201 & 0xFF00;
            v59 = *(_DWORD *)v201 & 0xFFFF0000;
            v60 = *(_DWORD *)v201 & 0xFF000000;
            v61 = *((float *)v201 + 1);
            v189 = *(_QWORD *)((char *)v201 + 12);
            v62 = *(_QWORD *)((char *)v201 + 20);
            v204 = *(__int128 **)((char *)v201 + 28);
            LODWORD(v205) = *((_DWORD *)v201 + 9);
            LODWORD(v136) = *((_DWORD *)v201 + 12);
            if (*(float *)&v136 <= v56)
              goto LABEL_285;
          }
          v57 = *((_DWORD *)v201 + 10);
          v58 = v57 & 0xFF00;
          v59 = v57 & 0xFFFF0000;
          v60 = v57 & 0xFF000000;
          v61 = *((float *)v201 + 11);
          v189 = *(_QWORD *)((char *)v201 + 52);
          v62 = *(_QWORD *)((char *)v201 + 60);
          v204 = *(__int128 **)((char *)v201 + 68);
          LODWORD(v205) = *((_DWORD *)v201 + 19);
          v56 = *(float *)&v136;
          goto LABEL_285;
        }
        LODWORD(v205) = 0;
        v204 = 0;
        if (v201 == v202)
          goto LABEL_247;
        v113 = 0;
        v114 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0.0;
        v50 = 0.0;
        v51 = 0.0;
        v52 = 0;
        do
        {
          v125 = *((float *)v72 + 2);
          if (v125 > v49)
          {
            v47 = *(_DWORD *)v72;
            v46 = BYTE1(*(_DWORD *)v72);
            v114 = BYTE2(*(_DWORD *)v72);
            v113 = HIBYTE(*(_DWORD *)v72);
            v50 = *((float *)v72 + 1);
            v52 = *((_DWORD *)v72 + 3);
            v51 = *((float *)v72 + 4);
            v48 = *(_QWORD *)(v72 + 20);
            v204 = *(__int128 **)(v72 + 28);
            LODWORD(v205) = *((_DWORD *)v72 + 9);
            v49 = v125;
          }
          v72 += 40;
        }
        while (v72 != v202);
        if (v49 <= 0.0)
        {
LABEL_247:
          v86 = 0;
LABEL_248:
          v82 = 0;
          if (a3)
            goto LABEL_317;
          goto LABEL_249;
        }
        v86 = 0;
        v144 = a8 > 0.0;
        v145 = a7 > 0.0;
        v146 = a6 > 0.0;
        if (v51 >= a6)
          v146 = 0;
        if (v50 >= a7)
          v145 = 0;
        if (v50 <= a8)
          v144 = 0;
        v82 = 0;
        if (v49 < a5 || v146 || v145 || v144)
          goto LABEL_316;
LABEL_245:
        v86 = (__int128 *)operator new(0x28uLL);
        v90 = (v113 << 24) | (v114 << 16);
LABEL_246:
        v82 = (__int128 *)((char *)v86 + 40);
        *(_DWORD *)v86 = v90 | (v46 << 8) | v47;
        *((float *)v86 + 1) = v50;
        *((float *)v86 + 2) = v49;
        *((_DWORD *)v86 + 3) = v52;
        *((float *)v86 + 4) = v51;
        *(_QWORD *)((char *)v86 + 20) = v48;
LABEL_315:
        *(_QWORD *)((char *)v86 + 28) = v204;
        *((_DWORD *)v86 + 9) = (_DWORD)v205;
LABEL_316:
        if (a3)
        {
LABEL_317:
          for (i = v86; i != v82; i = (__int128 *)((char *)i + 40))
          {
            LODWORD(v204) = 0;
            v162 = *((unsigned __int8 *)i + 2);
            v163 = 100 * *((unsigned __int8 *)i + 1) + 10 * *(unsigned __int8 *)i + v162;
            LODWORD(v204) = 100 * *((unsigned __int8 *)i + 1) + 10 * *(unsigned __int8 *)i + v162;
            if (v198[1])
            {
              v164 = (uint8x8_t)vcnt_s8((int8x8_t)v198[1]);
              v164.i16[0] = vaddlv_u8(v164);
              if (v164.u32[0] > 1uLL)
              {
                v165 = v163;
                if (v198[1] <= (void *)v163)
                  v165 = v163 % (unint64_t)v198[1];
              }
              else
              {
                v165 = (LODWORD(v198[1]) - 1) & v163;
              }
              v166 = (uint64_t **)*((_QWORD *)v198[0] + v165);
              if (v166)
              {
                v167 = *v166;
                if (v167)
                {
                  if (v164.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v169 = v167[1];
                      if (v169 == v163)
                      {
                        if (*((_DWORD *)v167 + 4) == (_DWORD)v163)
                          goto LABEL_356;
                      }
                      else if ((v169 & ((unint64_t)v198[1] - 1)) != v165)
                      {
                        goto LABEL_338;
                      }
                      v167 = (uint64_t *)*v167;
                      if (!v167)
                        goto LABEL_338;
                    }
                  }
                  do
                  {
                    v168 = v167[1];
                    if (v168 == v163)
                    {
                      if (*((_DWORD *)v167 + 4) == (_DWORD)v163)
                        goto LABEL_356;
                    }
                    else
                    {
                      if ((void *)v168 >= v198[1])
                        v168 %= (unint64_t)v198[1];
                      if (v168 != v165)
                        break;
                    }
                    v167 = (uint64_t *)*v167;
                  }
                  while (v167);
                }
              }
            }
LABEL_338:
            v171 = *(__int128 **)(a4 + 8);
            v170 = *(_QWORD *)(a4 + 16);
            if ((unint64_t)v171 >= v170)
            {
              v175 = *(__int128 **)a4;
              v176 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v171 - *(_QWORD *)a4) >> 3);
              v177 = v176 + 1;
              if (v176 + 1 > 0x666666666666666)
                sub_2394189F8();
              v178 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v170 - (_QWORD)v175) >> 3);
              if (2 * v178 > v177)
                v177 = 2 * v178;
              if (v178 >= 0x333333333333333)
                v179 = 0x666666666666666;
              else
                v179 = v177;
              if (v179)
              {
                if (v179 > 0x666666666666666)
                  sub_239418A80();
                v180 = (char *)operator new(40 * v179);
              }
              else
              {
                v180 = 0;
              }
              v181 = &v180[40 * v176];
              v182 = *i;
              *((_DWORD *)v181 + 4) = *((_DWORD *)i + 4);
              *(_OWORD *)v181 = v182;
              *(_QWORD *)(v181 + 20) = *(_QWORD *)((char *)i + 20);
              v183 = *(_QWORD *)((char *)i + 28);
              *((_DWORD *)v181 + 9) = *((_DWORD *)i + 9);
              *(_QWORD *)(v181 + 28) = v183;
              v184 = v181;
              if (v171 != v175)
              {
                do
                {
                  v185 = *(__int128 *)((char *)v171 - 40);
                  *((_DWORD *)v184 - 6) = *((_DWORD *)v171 - 6);
                  *(_OWORD *)(v184 - 40) = v185;
                  *(_QWORD *)(v184 - 20) = *(_QWORD *)((char *)v171 - 20);
                  v186 = *(_QWORD *)((char *)v171 - 12);
                  *((_DWORD *)v184 - 1) = *((_DWORD *)v171 - 1);
                  *(_QWORD *)(v184 - 12) = v186;
                  v184 -= 40;
                  v171 = (__int128 *)((char *)v171 - 40);
                }
                while (v171 != v175);
                v171 = *(__int128 **)a4;
              }
              v174 = v181 + 40;
              *(_QWORD *)a4 = v184;
              *(_QWORD *)(a4 + 8) = v181 + 40;
              *(_QWORD *)(a4 + 16) = &v180[40 * v179];
              if (v171)
                operator delete(v171);
            }
            else
            {
              v172 = *i;
              *((_DWORD *)v171 + 4) = *((_DWORD *)i + 4);
              *v171 = v172;
              *(_QWORD *)((char *)v171 + 20) = *(_QWORD *)((char *)i + 20);
              v173 = *(_QWORD *)((char *)i + 28);
              *((_DWORD *)v171 + 9) = *((_DWORD *)i + 9);
              *(_QWORD *)((char *)v171 + 28) = v173;
              v174 = (char *)v171 + 40;
            }
            *(_QWORD *)(a4 + 8) = v174;
            sub_2396B8648((uint64_t)v198, (int *)&v204, &v204);
LABEL_356:
            ;
          }
        }
        else
        {
LABEL_249:
          sub_2396B829C((char **)a4, *(_QWORD *)(a4 + 8), v86, v82, 0xCCCCCCCCCCCCCCCDLL * (((char *)v82 - (char *)v86) >> 3));
        }
        v202 = (char *)v201;
        if (v86)
          operator delete(v86);
LABEL_359:
        sub_239595458(&v201, &v193);
        ++v18;
        v10 = *a1;
        v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
        if (v18 < v12)
          continue;
        v187 = __p[0];
        if (__p[0])
        {
          do
          {
            v188 = (_QWORD *)*v187;
            operator delete(v187);
            v187 = v188;
          }
          while (v188);
        }
        v11 = (int64_t)v198[0];
        v198[0] = 0;
        if (v11)
LABEL_363:
          operator delete((void *)v11);
LABEL_364:
        if (v201)
        {
          v202 = (char *)v201;
          operator delete(v201);
        }
        return;
      default:
        v80 = (char *)v201;
        LODWORD(v205) = 0;
        v204 = 0;
        if (v201 == v202)
          goto LABEL_247;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0.0;
        v50 = 0.0;
        v51 = 0.0;
        v52 = 0;
        do
        {
          v81 = *((float *)v80 + 2);
          if (v81 > v49)
          {
            v47 = *(_DWORD *)v80;
            v46 = BYTE1(*(_DWORD *)v80);
            v45 = BYTE2(*(_DWORD *)v80);
            v44 = HIBYTE(*(_DWORD *)v80);
            v50 = *((float *)v80 + 1);
            v52 = *((_DWORD *)v80 + 3);
            v51 = *((float *)v80 + 4);
            v48 = *(_QWORD *)(v80 + 20);
            v204 = *(__int128 **)(v80 + 28);
            LODWORD(v205) = *((_DWORD *)v80 + 9);
            v49 = v81;
          }
          v80 += 40;
        }
        while (v80 != v202);
        if (v49 <= 0.0)
          goto LABEL_247;
        v86 = 0;
        v87 = a8 > 0.0;
        v88 = a7 > 0.0;
        v89 = a6 > 0.0;
        if (v51 >= a6)
          v89 = 0;
        if (v50 >= a7)
          v88 = 0;
        if (v50 <= a8)
          v87 = 0;
        v82 = 0;
        if (v49 < a5 || v89 || v88 || v87)
          goto LABEL_316;
LABEL_95:
        v86 = (__int128 *)operator new(0x28uLL);
        v90 = (v44 << 24) | (v45 << 16);
        goto LABEL_246;
    }
  }
}

void sub_2396B8140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;

  sub_239420950((uint64_t)&a21);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
    v33 = *(void **)v31;
    if (!*(_QWORD *)v31)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v33 = *(void **)v31;
    if (!*(_QWORD *)v31)
      goto LABEL_3;
  }
  *(_QWORD *)(v31 + 8) = v33;
  operator delete(v33);
  _Unwind_Resume(a1);
}

uint64_t sub_2396B8204(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = 0;
    LOBYTE(v1) = 0;
    v3 = *(uint64_t **)(a1 + 16);
    do
    {
      if (v2)
      {
        if (*((unsigned __int8 *)v3 + 48) != v1)
        {
          LOBYTE(v1) = 0;
          return v1;
        }
      }
      else
      {
        LOBYTE(v1) = *((_BYTE *)v3 + 48);
      }
      v3 = (uint64_t *)*v3;
      --v2;
    }
    while (v3);
  }
  return v1;
}

uint64_t sub_2396B8248(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      if (v3)
      {
        if (*((unsigned __int8 *)v2 + 48) != v4)
          return 0;
      }
      else
      {
        v4 = *((_BYTE *)v2 + 48);
      }
      v2 = (uint64_t *)*v2;
      --v3;
      if (!v2)
        goto LABEL_10;
    }
  }
  v4 = 0;
LABEL_10:
  *a2 = v4;
  return 1;
}

uint64_t sub_2396B829C(char **a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v9;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 *v17;
  char *v18;
  __int128 *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *i;
  __int128 v49;
  uint64_t v50;
  char *v51;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 40;
  v7 = (uint64_t)&(*a1)[40 * v6];
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = (unint64_t)a1[1];
  v12 = a1[2];
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v12[-v11] >> 3)) >= a5)
  {
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v7) >> 3)) >= a5)
    {
      v17 = (__int128 *)((char *)a3 + 40 * a5);
      v18 = a1[1];
    }
    else
    {
      v17 = (__int128 *)((char *)a3 + 8 * ((uint64_t)(v11 - v7) >> 3));
      v18 = a1[1];
      if (v17 != a4)
      {
        v19 = (__int128 *)((char *)a3 + 8 * ((uint64_t)(v11 - v7) >> 3));
        v20 = a1[1];
        do
        {
          v21 = *v19;
          *((_DWORD *)v20 + 4) = *((_DWORD *)v19 + 4);
          *(_OWORD *)v20 = v21;
          *(_QWORD *)(v20 + 20) = *(_QWORD *)((char *)v19 + 20);
          v22 = *(_QWORD *)((char *)v19 + 28);
          *((_DWORD *)v20 + 9) = *((_DWORD *)v19 + 9);
          *(_QWORD *)(v20 + 28) = v22;
          v18 += 40;
          v19 = (__int128 *)((char *)v19 + 40);
          v20 += 40;
        }
        while (v19 != a4);
      }
      a1[1] = v18;
      if ((uint64_t)(v11 - v7) < 1)
        return v7;
    }
    v23 = v7 + 40 * a5;
    v24 = &v18[-40 * a5];
    v25 = v18;
    if ((unint64_t)v24 < v11)
    {
      v25 = v18;
      do
      {
        v26 = *(_OWORD *)v24;
        *((_DWORD *)v25 + 4) = *((_DWORD *)v24 + 4);
        *(_OWORD *)v25 = v26;
        *(_QWORD *)(v25 + 20) = *(_QWORD *)(v24 + 20);
        v27 = *(_QWORD *)(v24 + 28);
        *((_DWORD *)v25 + 9) = *((_DWORD *)v24 + 9);
        *(_QWORD *)(v25 + 28) = v27;
        v25 += 40;
        v24 += 40;
      }
      while ((unint64_t)v24 < v11);
    }
    a1[1] = v25;
    if (v18 != (char *)v23)
    {
      v28 = 8 * ((uint64_t)&v18[-v23] >> 3);
      v29 = v18 - 20;
      do
      {
        v30 = *(_OWORD *)(v7 + v28 - 40);
        *((_DWORD *)v29 - 1) = *(_DWORD *)(v7 + v28 - 24);
        *(_OWORD *)(v29 - 20) = v30;
        *(_QWORD *)v29 = *(_QWORD *)(v7 + v28 - 20);
        v31 = *(_QWORD *)(v7 + v28 - 12);
        *((_DWORD *)v29 + 4) = *(_DWORD *)(v7 + v28 - 4);
        *((_QWORD *)v29 + 1) = v31;
        v29 -= 40;
        v28 -= 40;
      }
      while (v28);
    }
    if (v17 != a3)
    {
      v32 = v7;
      do
      {
        v33 = *v9;
        *(_DWORD *)(v32 + 16) = *((_DWORD *)v9 + 4);
        *(_OWORD *)v32 = v33;
        *(_QWORD *)(v32 + 20) = *(_QWORD *)((char *)v9 + 20);
        v34 = *(_QWORD *)((char *)v9 + 28);
        *(_DWORD *)(v32 + 36) = *((_DWORD *)v9 + 9);
        *(_QWORD *)(v32 + 28) = v34;
        v9 = (__int128 *)((char *)v9 + 40);
        v32 += 40;
      }
      while (v9 != v17);
    }
    return v7;
  }
  v13 = a5 - 0x3333333333333333 * ((uint64_t)(v11 - (_QWORD)v5) >> 3);
  if (v13 > 0x666666666666666)
    sub_2394189F8();
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - v5) >> 3);
  if (2 * v14 > v13)
    v13 = 2 * v14;
  if (v14 >= 0x333333333333333)
    v15 = 0x666666666666666;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 > 0x666666666666666)
      sub_239418A80();
    v16 = (char *)operator new(40 * v15);
  }
  else
  {
    v16 = 0;
  }
  v35 = &v16[40 * v6];
  v36 = &v35[40 * a5];
  v37 = v35;
  do
  {
    v38 = *v9;
    *((_DWORD *)v37 + 4) = *((_DWORD *)v9 + 4);
    *(_OWORD *)v37 = v38;
    *(_QWORD *)(v37 + 20) = *(_QWORD *)((char *)v9 + 20);
    v39 = *(_QWORD *)((char *)v9 + 28);
    *((_DWORD *)v37 + 9) = *((_DWORD *)v9 + 9);
    *(_QWORD *)(v37 + 28) = v39;
    v37 += 40;
    v9 = (__int128 *)((char *)v9 + 40);
  }
  while (v37 != v36);
  v40 = *a1;
  v41 = &v16[40 * v6];
  if (*a1 != (char *)v7)
  {
    v42 = 40 * v6;
    v43 = v16;
    do
    {
      v44 = &v43[v42];
      v45 = *(_OWORD *)&v5[v42 - 40];
      *((_DWORD *)v44 - 6) = *(_DWORD *)&v5[v42 - 24];
      *(_OWORD *)(v44 - 40) = v45;
      *(_QWORD *)(v44 - 20) = *(_QWORD *)&v5[v42 - 20];
      v46 = *(_QWORD *)&v5[v42 - 12];
      *((_DWORD *)v44 - 1) = *(_DWORD *)&v5[v42 - 4];
      *(_QWORD *)(v44 - 12) = v46;
      v43 -= 40;
      v5 -= 40;
    }
    while (&v5[v42] != v40);
    v41 = &v43[40 * v6];
  }
  v47 = &v16[40 * v15];
  for (i = a1[1]; (char *)v7 != i; v7 += 40)
  {
    v49 = *(_OWORD *)v7;
    *((_DWORD *)v36 + 4) = *(_DWORD *)(v7 + 16);
    *(_OWORD *)v36 = v49;
    *(_QWORD *)(v36 + 20) = *(_QWORD *)(v7 + 20);
    v50 = *(_QWORD *)(v7 + 28);
    *((_DWORD *)v36 + 9) = *(_DWORD *)(v7 + 36);
    *(_QWORD *)(v36 + 28) = v50;
    v36 += 40;
  }
  v51 = *a1;
  *a1 = v41;
  a1[1] = v36;
  a1[2] = v47;
  if (v51)
    operator delete(v51);
  return (uint64_t)v35;
}

uint64_t *sub_2396B8648(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2396B8954(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2396B8968(uint64_t a1, double *a2)
{
  double v2;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;

  v2 = *(double *)(a1 + 264);
  if (v2 > 2.22044605e-16)
  {
    *a2 = v2;
    return 1;
  }
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= *(_QWORD *)(a1 + 8))
    v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = (double)v4;
  v6 = *(double *)(a1 + 160);
  v7 = *(double *)(a1 + 168);
  if (v6 <= 1.3 || v7 <= 2.0)
  {
    if (v7 > 2.0)
    {
      *a2 = v7 * v5 / 36.0;
      return 1;
    }
    return 0;
  }
  v9 = v6 * 36.0 / v7;
  if (v9 <= 2.22044605e-16)
    return 0;
  v10 = v7 / 36.0 * v9;
  if (vabdd_f64(v10, v6) > 2.0)
    v6 = v10;
  *a2 = v6 * v5 / v9;
  return 1;
}

_QWORD *sub_2396B8A38(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5 || (v6 = (_QWORD *)*v5) == 0)
LABEL_22:
    sub_239EC167C();
  if (v3.u32[0] < 2uLL)
  {
    v7 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2)
          return v6 + 3;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= *(_QWORD *)&v2)
      v8 %= *(_QWORD *)&v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (v6[2] != a2)
    goto LABEL_11;
  return v6 + 3;
}

_QWORD *sub_2396B8B20(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5 || (v6 = (_QWORD *)*v5) == 0)
LABEL_22:
    sub_239EC16AC();
  if (v3.u32[0] < 2uLL)
  {
    v7 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2)
          return v6 + 3;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= *(_QWORD *)&v2)
      v8 %= *(_QWORD *)&v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (v6[2] != a2)
    goto LABEL_11;
  return v6 + 3;
}

void sub_2396B8C08(uint64_t a1, uint64_t a2)
{
  std::__fs::filesystem::path *i;
  void **p_data;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v6;

  for (i = *(std::__fs::filesystem::path **)(a1 + 16);
        i;
        i = (std::__fs::filesystem::path *)i->__pn_.__r_.__value_.__r.__words[0])
  {
    if (SHIBYTE(i[1].__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      if (i[1].__pn_.__r_.__value_.__l.__size_)
      {
LABEL_8:
        p_data = (void **)&i[1].__pn_.__r_.__value_.__l.__data_;
        sub_239498A04(i + 1, a2, &__p);
        std::__fs::filesystem::__weakly_canonical(&v6, &__p, 0);
        if (SHIBYTE(i[1].__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(*p_data);
        *(_OWORD *)p_data = *(_OWORD *)&v6.__pn_.__r_.__value_.__l.__data_;
        i[1].__pn_.__r_.__value_.__r.__words[2] = v6.__pn_.__r_.__value_.__r.__words[2];
        *((_BYTE *)&v6.__pn_.__r_.__value_.__s + 23) = 0;
        v6.__pn_.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      }
    }
    else if (*((_BYTE *)&i[1].__pn_.__r_.__value_.__s + 23))
    {
      goto LABEL_8;
    }
  }
}

void sub_2396B8CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2396B8CE0(uint64_t a1, const std::__fs::filesystem::path *a2)
{
  const std::__fs::filesystem::path *i;
  void **p_data;
  std::__fs::filesystem::path v5;

  for (i = *(const std::__fs::filesystem::path **)(a1 + 16);
        i;
        i = (const std::__fs::filesystem::path *)i->__pn_.__r_.__value_.__r.__words[0])
  {
    if (SHIBYTE(i[1].__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      if (i[1].__pn_.__r_.__value_.__l.__size_)
      {
LABEL_9:
        p_data = (void **)&i[1].__pn_.__r_.__value_.__l.__data_;
        sub_23962D1CC(i + 1, a2, &v5);
        if (SHIBYTE(i[1].__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(*p_data);
        *(_OWORD *)p_data = *(_OWORD *)&v5.__pn_.__r_.__value_.__l.__data_;
        i[1].__pn_.__r_.__value_.__r.__words[2] = v5.__pn_.__r_.__value_.__r.__words[2];
      }
    }
    else if (*((_BYTE *)&i[1].__pn_.__r_.__value_.__s + 23))
    {
      goto LABEL_9;
    }
  }
}

char *sub_2396B8D74@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  char *result;
  char *v6;
  int64x2_t v7;
  int64x2_t v8;
  char *v9;
  uint64_t v10;
  int64x2_t *v11;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v8 = 0uLL;
  v9 = 0;
  if (v4)
  {
    if (v4 >> 61)
      sub_2394189F8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v8.i64[0] = (uint64_t)result;
    v8.i64[1] = (uint64_t)result;
    v9 = v6;
    v11 = &v8;
    if (v3)
      goto LABEL_4;
LABEL_7:
    v7 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v11 = &v8;
  if (!v3)
    goto LABEL_7;
  do
  {
LABEL_4:
    v10 = v3[2];
    result = (char *)sub_2394340F0((uint64_t *)&v11, &v10);
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  v7 = v8;
  v6 = v9;
LABEL_8:
  *a2 = v7;
  a2[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_2396B8E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396B8E4C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void **v13;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (!v4)
  {
    v7 = 0;
    v6 = 0;
    v13 = (void **)&v9;
    v5 = 0;
    if (!v3)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v4 >> 61)
    sub_2394189F8();
  v5 = (char *)operator new(8 * v4);
  v6 = v5;
  v7 = &v5[8 * v4];
  v9 = v5;
  v10 = v5;
  v11 = v7;
  v13 = (void **)&v9;
  if (v3)
  {
    do
    {
LABEL_6:
      v12 = v3[2];
      sub_2394340F0((uint64_t *)&v13, &v12);
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    v5 = v9;
    v6 = v10;
    v7 = v11;
  }
LABEL_8:
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v7;
  return std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
}

void sub_2396B8F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2396B8F48(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
  {
    v5 = 0;
    return v5 != 0;
  }
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return v5 != 0;
  v5 = (_QWORD *)*v5;
  if (!v5)
    return v5 != 0;
  if (v3.u32[0] >= 2uLL)
  {
    do
    {
      v8 = v5[1];
      if (v8 == a2)
      {
        if (v5[2] == a2)
          return v5 != 0;
      }
      else
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
        if (v8 != v4)
          return 0;
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
    return v5 != 0;
  }
  v7 = *(_QWORD *)&v2 - 1;
  while (1)
  {
    v9 = v5[1];
    if (v9 == a2)
    {
      if (v5[2] == a2)
        return v5 != 0;
      goto LABEL_20;
    }
    if ((v9 & v7) != v4)
      return 0;
LABEL_20:
    v5 = (_QWORD *)*v5;
    if (!v5)
      return v5 != 0;
  }
}

BOOL sub_2396B9040(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;

  v3 = a2;
  return sub_2396B91B8(a1, &v3) != 0;
}

void sub_2396B906C(uint64_t a1, uint64_t a2)
{
  const std::__fs::filesystem::path *i;
  void **p_data;
  std::__fs::filesystem::path::__string_view v5;
  std::__fs::filesystem::path *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  std::basic_string_view<_CharT, _Traits>::size_type v8;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v10;
  std::__fs::filesystem::path __dst;

  for (i = *(const std::__fs::filesystem::path **)(a1 + 16);
        i;
        i = (const std::__fs::filesystem::path *)i->__pn_.__r_.__value_.__r.__words[0])
  {
    p_data = (void **)&i[1].__pn_.__r_.__value_.__l.__data_;
    v5 = std::__fs::filesystem::path::__filename(i + 1);
    if (v5.__size_ >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    if (v5.__size_ >= 0x17)
    {
      v7 = (v5.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5.__size_ | 7) != 0x17)
        v7 = v5.__size_ | 7;
      v8 = v7 + 1;
      p_dst = (std::__fs::filesystem::path *)operator new(v7 + 1);
      __dst.__pn_.__r_.__value_.__l.__size_ = v5.__size_;
      __dst.__pn_.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v5.__size_;
      p_dst = &__dst;
      if (!v5.__size_)
        goto LABEL_12;
    }
    memmove(p_dst, v5.__data_, v5.__size_);
LABEL_12:
    p_dst->__pn_.__r_.__value_.__s.__data_[v5.__size_] = 0;
    __p = __dst;
    sub_239498A04(&__p, a2, &v10);
    if (SHIBYTE(i[1].__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(*p_data);
    *(_OWORD *)p_data = *(_OWORD *)&v10.__pn_.__r_.__value_.__l.__data_;
    i[1].__pn_.__r_.__value_.__r.__words[2] = v10.__pn_.__r_.__value_.__r.__words[2];
    *((_BYTE *)&v10.__pn_.__r_.__value_.__s + 23) = 0;
    v10.__pn_.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_2396B919C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396B91B8(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void **v12;
  void *__p;
  char v14;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!*v6)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == v3)
      {
        if (v7[2] == v3)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == v3)
      break;
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
    if (v9 != v5)
      return 0;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      return 0;
  }
  if (v7[2] != v3)
    goto LABEL_11;
LABEL_22:
  sub_23946B1E4(a1, v7, (uint64_t)&__p);
  v12 = (void **)__p;
  __p = 0;
  if (v12)
  {
    if (v14)
    {
      if (*((char *)v12 + 47) < 0)
        operator delete(v12[3]);
    }
    operator delete(v12);
  }
  return 1;
}

double sub_2396B92F4(int32x2_t **a1)
{
  int32x2_t *v1;
  int32x2_t *v2;
  unint64_t v3;
  int32x2_t *v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;
  float *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4x2_t v12;
  float32x4x2_t v13;

  v2 = *a1;
  v1 = a1[1];
  if (*a1 != v1)
  {
    v3 = (char *)v1 - (char *)v2 - 8;
    v4 = *a1;
    if (v3 < 0x38)
      goto LABEL_10;
    v5 = (v3 >> 3) + 1;
    v4 = &v2[v5 & 0x3FFFFFFFFFFFFFF8];
    v6 = (float *)&v2[4];
    v7 = v5 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v8 = v6 - 8;
      v12 = vld2q_f32(v8);
      v13 = vld2q_f32(v6);
      v9 = v12.val[0];
      v10 = v13.val[0];
      vst2q_f32(v8, *(float32x4x2_t *)((char *)&v12 + 16));
      vst2q_f32(v6, *(float32x4x2_t *)((char *)&v13 + 16));
      v6 += 16;
      v7 -= 8;
    }
    while (v7);
    if (v5 != (v5 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_10:
      do
      {
        *(int32x2_t *)v12.val[0].f32 = vrev64_s32(*v4);
        *v4++ = *(int32x2_t *)v12.val[0].f32;
      }
      while (v4 != v1);
    }
  }
  return *(double *)v12.val[0].i64;
}

size_t sub_2396B9374@<X0>(_QWORD *a1@<X8>, int8x16_t a2@<Q1>, double a3@<D2>, int32x4_t a4@<Q3>)
{
  const char *v5;
  const char *v6;
  size_t result;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12[0] = xmmword_239ECAF28;
  *(_OWORD *)((char *)v12 + 12) = *(__int128 *)((char *)&xmmword_239ECAF28 + 12);
  sub_2396B946C((uint64_t)v12, *(int32x4_t *)((char *)&xmmword_239ECAF28 + 12), a2, a3, a4);
  v6 = v5;
  result = strlen(v5);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v8 = result;
  if (result >= 0x17)
  {
    v9 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v9 = result | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    a1[1] = v8;
    a1[2] = v10 | 0x8000000000000000;
    *a1 = v11;
    a1 = v11;
  }
  else
  {
    *((_BYTE *)a1 + 23) = result;
    if (!result)
      goto LABEL_9;
  }
  result = (size_t)memmove(a1, v6, v8);
LABEL_9:
  *((_BYTE *)a1 + v8) = 0;
  return result;
}

int8x16_t sub_2396B946C(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) ^= v5;
  *(_BYTE *)(a1 + 21) ^= v5;
  *(_BYTE *)(a1 + 22) ^= v5;
  *(_BYTE *)(a1 + 23) ^= v5;
  *(_BYTE *)(a1 + 24) ^= v5;
  *(_BYTE *)(a1 + 25) ^= v5;
  *(_BYTE *)(a1 + 26) ^= v5;
  *(_BYTE *)(a1 + 27) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

size_t sub_2396B9550@<X0>(_QWORD *a1@<X8>)
{
  const char *v2;
  size_t result;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8[8];

  strcpy(v8, "Zhtitj");
  v2 = sub_239513174(v8);
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v4 = result;
  if (result >= 0x17)
  {
    v5 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v5 = result | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    a1[1] = v4;
    a1[2] = v6 | 0x8000000000000000;
    *a1 = v7;
    a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a1 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a1, v2, v4);
  *((_BYTE *)a1 + v4) = 0;
  return result;
}

void sub_2396B9628(uint64_t a1, uint64_t a2, double a3, float32x4_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  float32x4_t *v15;
  uint64_t v16;
  double v17;
  float32x4_t v18;
  int v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  float32x4_t *v24;
  uint64_t v25;
  double v26;
  float32x4_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;
  double v32;

  v4 = *(_QWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 16) = v4;
  v5 = *(_QWORD *)(a1 + 200);
  if (v4[4] != v5 && v4[5] != v5 && v4[6] != v5 && v4[7] != v5)
  {
    v7 = *(int *)(a2 + 24);
    v8 = (_QWORD *)v4[v7];
    if (v8[4] != v5 && v8[5] != v5 && v8[6] != v5 && v8[7] != v5)
    {
      *(_QWORD *)(a2 + 16) = v4;
      v9 = v4 + 4;
      v10 = v4[((v7 - 1) & 3) + 4];
      if ((v7 & 1) != 0)
        v11 = 1;
      else
        v11 = 2;
      v12 = v11 + v7;
      if ((v7 & 1) != 0)
        v13 = 2;
      else
        v13 = 1;
      v14 = v9[(v13 + (_BYTE)v7) & 3];
      v15 = (float32x4_t *)v9[v12 & 3];
      v16 = v15[2].i64[0];
      a4.i64[0] = *(_QWORD *)(v14 + 32);
      v17 = *(double *)(v10 + 32);
      v27 = v15[1];
      v28 = v16;
      v29 = *(_OWORD *)(v14 + 16);
      v30 = a4.i64[0];
      v31 = *(_OWORD *)(v10 + 16);
      v32 = v17;
      sub_2396B9814(v4, (uint64_t)&v27, *(double *)&v31, a4, v17, v27);
      *(_QWORD *)(a2 + 16) = v4;
      if (v4 == (_QWORD *)*v8)
      {
        LOBYTE(v19) = 0;
        v20 = v8[7];
      }
      else
      {
        if (v4 == (_QWORD *)v8[1])
        {
          v20 = v8[4];
          LOBYTE(v19) = 1;
LABEL_25:
          v21 = v19 + 1;
          v22 = v19 + 2;
          goto LABEL_26;
        }
        if (v4 == (_QWORD *)v8[2])
          v19 = 2;
        else
          v19 = 3;
        v20 = v8[(v19 - 1) + 4];
        if ((v19 & 1) != 0)
          goto LABEL_25;
      }
      v21 = v19 + 2;
      v22 = v19 + 1;
LABEL_26:
      v23 = v8[(v22 & 3) + 4];
      v24 = (float32x4_t *)v8[(v21 & 3) + 4];
      v25 = v24[2].i64[0];
      v18.i64[0] = *(_QWORD *)(v23 + 32);
      v26 = *(double *)(v20 + 32);
      v27 = v24[1];
      v28 = v25;
      v29 = *(_OWORD *)(v23 + 16);
      v30 = v18.i64[0];
      v31 = *(_OWORD *)(v20 + 16);
      v32 = v26;
      sub_2396B9814(v8, (uint64_t)&v27, *(double *)&v31, v18, v26, v27);
    }
  }
}

float sub_2396B9814(_QWORD *a1, uint64_t a2, double a3, float32x4_t a4, double a5, float32x4_t a6)
{
  uint64_t v6;
  double *v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int8x16_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v35;
  float32_t v36;
  int32x4_t v37;
  float32x4_t v38;
  float32_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  int8x16_t v43;

  v6 = a1[4];
  v7 = (double *)a1[5];
  v8 = (double *)a1[6];
  v9 = (double *)a1[7];
  a4.i64[0] = *(_QWORD *)(v6 + 16);
  v10 = *(double *)(v6 + 24);
  v11 = v7[2] - *(double *)a4.i64;
  *(double *)a6.i64 = v7[3] - v10;
  v12 = *(double *)(v6 + 32);
  v13 = v7[4] - v12;
  v14 = v11 * v11 + *(double *)a6.i64 * *(double *)a6.i64 + v13 * v13;
  v15 = v8[2] - *(double *)a4.i64;
  v16 = v8[3] - v10;
  v17 = v8[4] - v12;
  v18 = v15 * v15 + v16 * v16 + v17 * v17;
  v19 = v9[2] - *(double *)a4.i64;
  v20 = v9[3] - v10;
  v21 = v9[4] - v12;
  v22 = v19 * v19 + v20 * v20 + v21 * v21;
  v23 = (*(double *)a6.i64 * v17 - v16 * v13) * v22
      - (*(double *)a6.i64 * v21 - v20 * v13) * v18
      + (v16 * v21 - v20 * v17) * v14;
  v24 = (v11 * v17 - v15 * v13) * v22 - (v11 * v21 - v19 * v13) * v18 + (v15 * v21 - v19 * v17) * v14;
  v25 = v11 * v16 - v15 * *(double *)a6.i64;
  v26 = v11 * v20 - v19 * *(double *)a6.i64;
  *(double *)a6.i64 = v15 * v20 - v19 * v16;
  v27 = v25 * v22 - v26 * v18 + *(double *)a6.i64 * v14;
  v28 = v25 * v21 - v26 * v17 + *(double *)a6.i64 * v13;
  v29 = 1.0 / (v28 + v28);
  a4.f32[0] = *(double *)a4.i64 + v23 * v29;
  *(float *)&v10 = v10 - v24 * v29;
  *(float *)&v29 = v12 + v27 * v29;
  a4.i32[1] = LODWORD(v10);
  a4.i32[2] = LODWORD(v29);
  *(float32x2_t *)a6.f32 = vcvt_f32_f64(*(float64x2_t *)a2);
  *(float *)&v10 = *(double *)(a2 + 16);
  a6.i32[2] = LODWORD(v10);
  v30 = (int8x16_t)vsubq_f32(a4, a6);
  v31 = (float32x2_t)vextq_s8(v30, v30, 8uLL).u64[0];
  v32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1), *(float32x2_t *)v30.i8, 1), v31, v31);
  if (v32.f32[0] == 0.0 || v32.f32[0] <= 1.0e-15)
    return 0.5;
  v35 = *(float32x4_t *)(a2 + 24);
  *(float32x2_t *)v35.f32 = vcvt_f32_f64((float64x2_t)v35);
  v36 = *(double *)(a2 + 40);
  v35.f32[2] = v36;
  v37 = (int32x4_t)vsubq_f32(a6, v35);
  v38 = *(float32x4_t *)(a2 + 48);
  *(float32x2_t *)v38.f32 = vcvt_f32_f64((float64x2_t)v38);
  v39 = *(double *)(a2 + 64);
  v38.f32[2] = v39;
  v40 = (int32x4_t)vsubq_f32(v35, v38);
  v41 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v37, (int8x16_t)v37, 0xCuLL), (int8x16_t)v37, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v40, v40), (int8x16_t)v40, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v37, v37), (int8x16_t)v37, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v40, (int8x16_t)v40, 0xCuLL), (int8x16_t)v40, 8uLL));
  v32.f32[0] = 1.0 / sqrtf(v32.f32[0]);
  v42 = (float32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
  v43 = (int8x16_t)vmulq_n_f32(v41, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.f32, 1), *(float32x2_t *)v41.f32, 1), v42, v42).f32[0]));
  return fabsf(vmla_f32(vmla_lane_f32(vmul_f32(vmul_f32(*(float32x2_t *)v30.i8, v32), *(float32x2_t *)v43.i8), vmul_lane_f32(v32, *(float32x2_t *)v30.i8, 1), *(float32x2_t *)v43.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), vmul_f32(v31, v32)).f32[0]);
}

void sub_2396B9A34()
{
  unsigned __int8 v0;

  if ((byte_2542CF7A8 & 1) == 0)
  {
    byte_2542CF7A8 = 1;
    v0 = atomic_load((unsigned __int8 *)&qword_2542CF7B8);
    if ((v0 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_2542CF7B8))
      {
        qword_2542CF7B0 = ldexp(2.22507386e-308, 54);
        __cxa_guard_release(&qword_2542CF7B8);
      }
    }
  }
}

uint64_t sub_2396B9AA4(uint64_t result, int a2, double a3)
{
  *(double *)result = a3;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

_QWORD *sub_2396B9AB0(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_250AE3208;
  return result;
}

_QWORD *sub_2396B9AC4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  *a1 = &off_250AE3208;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 96);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        free(v3);
        *(_QWORD *)(v2 + 96) = v4;
        v3 = v4;
      }
      while (v4);
    }
    *(_QWORD *)(v2 + 88) = 0;
    *(_QWORD *)(v2 + 96) = 0;
    *(_QWORD *)(v2 + 112) = 0;
    *(_QWORD *)(v2 + 120) = 0;
    v5 = *(void **)(v2 + 64);
    if (v5)
    {
      *(_QWORD *)(v2 + 72) = v5;
      operator delete(v5);
    }
    v6 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v6;
      operator delete(v6);
    }
    MEMORY[0x23B83E31C](v2, 0x10F0C40367FE935);
  }
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
  {
    v8 = *(void **)v7;
    if (*(_QWORD *)v7)
    {
      *(_QWORD *)(v7 + 8) = v8;
      operator delete(v8);
    }
    MEMORY[0x23B83E31C](v7, 0x1080C409B94441ALL);
  }
  return a1;
}

void sub_2396B9B9C(_QWORD *a1)
{
  sub_2396B9AC4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2396B9BC0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6)
{
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  uint64_t v26;

  v11 = operator new();
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = 0;
  v12 = *(const void **)a2;
  v13 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v13)
  {
    if (v13 < 0)
      sub_2394189F8();
    v14 = (char *)operator new(v13);
    *(_QWORD *)v11 = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(v11 + 16) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(v11 + 8) = v15;
  }
  *(_DWORD *)(v11 + 24) = a3;
  *(_DWORD *)(v11 + 28) = a4;
  v16 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v11;
  if (v16)
  {
    v17 = *(void **)v16;
    if (*(_QWORD *)v16)
    {
      *(_QWORD *)(v16 + 8) = v17;
      operator delete(v17);
    }
    MEMORY[0x23B83E31C](v16, 0x1080C409B94441ALL);
  }
  v18 = (uint64_t *)operator new();
  v19 = *(_QWORD *)(a1 + 8);
  v26 = a6;
  sub_2396B9DB4((uint64_t)v18, a4, v19, &v26);
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  if (v20)
  {
    v21 = *(_QWORD **)(v20 + 96);
    if (v21)
    {
      do
      {
        v22 = (_QWORD *)*v21;
        free(v21);
        *(_QWORD *)(v20 + 96) = v22;
        v21 = v22;
      }
      while (v22);
    }
    *(_QWORD *)(v20 + 88) = 0;
    *(_QWORD *)(v20 + 96) = 0;
    *(_QWORD *)(v20 + 112) = 0;
    *(_QWORD *)(v20 + 120) = 0;
    v23 = *(void **)(v20 + 64);
    if (v23)
    {
      *(_QWORD *)(v20 + 72) = v23;
      operator delete(v23);
    }
    v24 = *(void **)v20;
    if (*(_QWORD *)v20)
    {
      *(_QWORD *)(v20 + 8) = v24;
      operator delete(v24);
    }
    MEMORY[0x23B83E31C](v20, 0x10F0C40367FE935);
    v18 = *(uint64_t **)(a1 + 16);
  }
  sub_2396B9E80(v18);
  return 1;
}

void sub_2396B9D5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10F0C40367FE935);
  _Unwind_Resume(a1);
}

void sub_2396B9D80(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x23B83E31C](v1, 0x1080C409B94441ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_2396B9DB4(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  v6 = *a4;
  *(_QWORD *)(a1 + 128) = a3;
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = a3;
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 32) = *a4;
  *(_QWORD *)(a1 + 40) = v7;
  if ((_DWORD)v7)
  {
    sub_23946DAD4(a1, v7);
    if (*(_QWORD *)(a1 + 40))
    {
      v8 = 0;
      v9 = *(_QWORD *)a1;
      do
      {
        *(_QWORD *)(v9 + 8 * v8) = v8;
        ++v8;
      }
      while (v8 < *(_QWORD *)(a1 + 40));
    }
  }
  return a1;
}

void sub_2396B9E44(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)(v1 + 96);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      free(v3);
      *(_QWORD *)(v1 + 96) = v4;
      v3 = v4;
    }
    while (v4);
  }
  sub_239EBF3DC((_QWORD *)(v1 + 88), (_QWORD *)(v1 + 112), (void **)(v1 + 64), v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396B9E80(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;

  v2 = *(int *)(a1[16] + 24);
  a1[5] = v2;
  a1[6] = v2;
  v3 = (a1[1] - *a1) >> 3;
  if (v2 != v3)
  {
    if (v2 <= v3)
    {
      if (v2 < v3)
        a1[1] = *a1 + 8 * v2;
    }
    else
    {
      sub_23946DAD4((uint64_t)a1, v2 - v3);
      v2 = a1[5];
    }
  }
  if (v2)
  {
    v4 = 0;
    v5 = *a1;
    do
    {
      *(_QWORD *)(v5 + 8 * v4) = v4;
      ++v4;
      v2 = a1[5];
    }
    while (v4 < v2);
  }
  result = (_QWORD *)a1[12];
  if (result)
  {
    do
    {
      v7 = (_QWORD *)*result;
      free(result);
      a1[12] = (uint64_t)v7;
      result = v7;
    }
    while (v7);
    v2 = a1[5];
  }
  a1[11] = 0;
  a1[12] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[3] = 0;
  a1[6] = v2;
  if (v2)
  {
    sub_2396BA83C((uint64_t)a1, (uint64_t)(a1 + 8));
    result = sub_2396BAA04((uint64_t)a1, (uint64_t)a1, 0, a1[5], a1 + 8);
    a1[3] = (uint64_t)result;
  }
  return result;
}

uint64_t sub_2396B9F60(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  _DWORD v22[2];
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v6 + 28) != ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) || !*(_QWORD *)(a1 + 16))
    return 0;
  v12 = *(_DWORD *)(v6 + 24);
  if (v12 >= a5)
    v13 = a5;
  else
    v13 = v12;
  v14 = (int)v13;
  v15 = *a3;
  a3[1] = *a3;
  if (v13)
  {
    sub_23942CB44((uint64_t)a3, (int)v13);
    a4[1] = *a4;
    sub_23945E108((uint64_t)a4, v14);
    v16 = *a4;
    v17 = *(double *)&a6;
    v24 = *a3;
    v25 = v16;
    v26 = v14;
    v27 = 0;
    *(_QWORD *)(v16 + 8 * v14 - 8) = 0x7FEFFFFFFFFFFFFFLL;
  }
  else
  {
    v21 = *a4;
    a4[1] = *a4;
    v17 = *(double *)&a6;
    v24 = v15;
    v25 = v21;
    v26 = v14;
    v27 = 0;
  }
  v22[0] = 32;
  v18 = 1;
  v23 = 1;
  v19 = v17;
  *(float *)&v22[1] = v19;
  sub_2396BA07C(*(_QWORD *)(a1 + 16), &v24, *(float64x2_t **)a2, (uint64_t)v22);
  return v18;
}

BOOL sub_2396BA07C(uint64_t a1, uint64_t *a2, float64x2_t *a3, uint64_t a4)
{
  float v7;
  uint64_t v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _BOOL8 v18;
  void *exception;
  uint64_t v21;
  void *__p;
  void *v23;
  uint64_t v24;

  if (!*(_QWORD *)(a1 + 40))
    return 0;
  if (!*(_QWORD *)(a1 + 24))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "[nanoflann] findNeighbors() called before building the index.");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v7 = *(float *)(a4 + 4);
  __p = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  sub_2396BB704((uint64_t)&__p, *(int *)(a1 + 56), &v21);
  v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 >= 1)
  {
    v9 = (double *)__p;
    v10 = (double *)(*(_QWORD *)(a1 + 64) + 8);
    v11 = 0.0;
    v12 = (double *)a3;
    while (1)
    {
      v13 = *v12;
      v14 = *(v10 - 1);
      if (*v12 < v14)
      {
        v16 = (v13 - v14) * (v13 - v14);
        *v9 = v16;
        v11 = v11 + v16;
        v13 = *v12;
        v15 = *v10;
        if (*v12 > *v10)
        {
LABEL_10:
          v17 = (v13 - v15) * (v13 - v15);
          *v9 = v17;
          v11 = v11 + v17;
        }
      }
      else
      {
        v15 = *v10;
        if (v13 > *v10)
          goto LABEL_10;
      }
      ++v9;
      v10 += 2;
      ++v12;
      if (!--v8)
        goto LABEL_13;
    }
  }
  v11 = 0.0;
LABEL_13:
  sub_2396BB46C((uint64_t *)a1, a2, a3, *(int **)(a1 + 24), (uint64_t *)&__p, v11, v7 + 1.0);
  v18 = a2[3] == a2[2];
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  return v18;
}

void sub_2396BA1F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2396BA204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396BA22C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, double a6)
{
  float64x2_t *v7;
  uint64_t v8;
  float v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  char *v33;
  _BYTE *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _OWORD *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  unint64_t v98;
  _QWORD *v99;
  _DWORD v100[2];
  char v101;
  void *__p;
  char *v103;
  uint64_t v104;
  double v105;
  void **p_p;
  char v107;

  v7 = *(float64x2_t **)a2;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 28) != ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3))
    return 0xFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return 0xFFFFFFFFLL;
  __p = 0;
  v103 = 0;
  v104 = 0;
  v100[0] = 32;
  v10 = *(double *)&a5;
  *(float *)&v100[1] = v10;
  v101 = 1;
  v105 = a6;
  p_p = &__p;
  sub_2396BB930(v8, &v105, v7, (uint64_t)v100);
  v12 = *p_p;
  v11 = p_p[1];
  if (v101)
  {
    v13 = 126 - 2 * __clz((v103 - (_BYTE *)__p) >> 4);
    if (v103 == __p)
      v14 = 0;
    else
      v14 = v13;
    sub_2396BBE00((double *)__p, v103, (uint64_t)&v107, v14, 1);
  }
  v15 = v11 - v12;
  v16 = (v11 - v12) >> 4;
  v17 = (_BYTE *)*a3;
  if (v16 > (uint64_t)(a3[2] - *a3) >> 2)
  {
    if ((v15 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v18 = (_BYTE *)a3[1];
    v19 = (char *)operator new(v15 >> 2);
    v20 = v18 - v17;
    v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
    v22 = v21;
    if (v18 == v17)
      goto LABEL_19;
    if ((unint64_t)(v20 - 4) >= 0x2C)
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v18[-(v20 & 0xFFFFFFFFFFFFFFFCLL)] - v19) >= 0x20)
      {
        v24 = v20 >> 2;
        v25 = ((unint64_t)(v20 - 4) >> 2) + 1;
        v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
        v27 = &v18[-v26];
        v22 = &v21[-v26];
        v28 = &v19[4 * v24 - 16];
        v29 = (__int128 *)(v18 - 16);
        v30 = v25 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v31 = *v29;
          *((_OWORD *)v28 - 1) = *(v29 - 1);
          *(_OWORD *)v28 = v31;
          v28 -= 32;
          v29 -= 2;
          v30 -= 8;
        }
        while (v30);
        v18 = v27;
        if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_19:
          *a3 = v22;
          a3[1] = v21;
          a3[2] = &v19[4 * v16];
          if (v17)
            operator delete(v17);
          goto LABEL_21;
        }
      }
    }
    else
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v32 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v22 - 1) = v32;
      v22 -= 4;
    }
    while (v18 != v17);
    goto LABEL_19;
  }
LABEL_21:
  v33 = *(char **)a4;
  if (v16 > (uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)a4) >> 3)
  {
    if ((v15 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v34 = *(_BYTE **)(a4 + 8);
    v35 = (char *)operator new(v15 >> 1);
    v36 = v34 - v33;
    v37 = &v35[(v34 - v33) & 0xFFFFFFFFFFFFFFF8];
    v38 = v37;
    if (v34 == v33)
      goto LABEL_31;
    if ((unint64_t)(v36 - 8) >= 0x58)
    {
      v38 = &v35[(v34 - v33) & 0xFFFFFFFFFFFFFFF8];
      if (v34 - v35 - (v36 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
      {
        v39 = v36 >> 3;
        v40 = ((unint64_t)(v36 - 8) >> 3) + 1;
        v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        v42 = &v34[-v41];
        v38 = &v37[-v41];
        v43 = &v35[8 * v39 - 16];
        v44 = (__int128 *)(v34 - 16);
        v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v46 = *v44;
          *((_OWORD *)v43 - 1) = *(v44 - 1);
          *(_OWORD *)v43 = v46;
          v43 -= 32;
          v44 -= 2;
          v45 -= 4;
        }
        while (v45);
        v34 = v42;
        if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_31:
          *(_QWORD *)a4 = v38;
          *(_QWORD *)(a4 + 8) = v37;
          *(_QWORD *)(a4 + 16) = &v35[8 * v16];
          if (v33)
            operator delete(v33);
          goto LABEL_33;
        }
      }
    }
    else
    {
      v38 = &v35[(v34 - v33) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v47 = *((_QWORD *)v34 - 1);
      v34 -= 8;
      *((_QWORD *)v38 - 1) = v47;
      v38 -= 8;
    }
    while (v34 != v33);
    goto LABEL_31;
  }
LABEL_33:
  v98 = v11 - v12;
  if (v11 != v12)
  {
    v48 = 0;
    if (v16 <= 1)
      v49 = 1;
    else
      v49 = v16;
    v99 = a3;
    while (1)
    {
      v51 = (char *)__p;
      v52 = *((_DWORD *)__p + 4 * v48);
      v54 = (char *)a3[1];
      v53 = a3[2];
      if ((unint64_t)v54 < v53)
      {
        *(_DWORD *)v54 = v52;
        v55 = (uint64_t)(v54 + 4);
        goto LABEL_62;
      }
      v56 = v49;
      v57 = a4;
      v58 = (char *)*a3;
      v59 = (uint64_t)&v54[-*a3];
      v60 = v59 >> 2;
      v61 = (v59 >> 2) + 1;
      if (v61 >> 62)
        sub_2394189F8();
      v62 = v53 - (_QWORD)v58;
      if (v62 >> 1 > v61)
        v61 = v62 >> 1;
      v63 = (unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v61;
      if (v63)
      {
        if (v63 >> 62)
          sub_239418A80();
        v64 = v63;
        v65 = operator new(4 * v63);
        v63 = v64;
        v66 = &v65[4 * v60];
        *v66 = v52;
        v55 = (uint64_t)(v66 + 1);
        if (v54 == v58)
        {
LABEL_54:
          a4 = v57;
          v49 = v56;
          goto LABEL_60;
        }
      }
      else
      {
        v65 = 0;
        v66 = (_DWORD *)(4 * v60);
        *(_DWORD *)(4 * v60) = v52;
        v55 = 4 * v60 + 4;
        if (v54 == v58)
          goto LABEL_54;
      }
      v67 = v54 - 4 - v58;
      if (v67 < 0x2C)
        break;
      v68 = v54 - &v65[v59];
      a4 = v57;
      v49 = v56;
      if (v68 < 0x20)
        goto LABEL_59;
      v69 = (v67 >> 2) + 1;
      v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
      v71 = &v54[-v70];
      v66 = (_DWORD *)((char *)v66 - v70);
      v72 = &v65[4 * v60 - 16];
      v73 = v54 - 16;
      v74 = v69 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v75 = *(_OWORD *)v73;
        *(v72 - 1) = *((_OWORD *)v73 - 1);
        *v72 = v75;
        v72 -= 2;
        v73 -= 32;
        v74 -= 8;
      }
      while (v74);
      v54 = v71;
      if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_59;
LABEL_60:
      a3 = v99;
      *v99 = v66;
      v99[1] = v55;
      v99[2] = &v65[4 * v63];
      if (v58)
        operator delete(v58);
LABEL_62:
      a3[1] = v55;
      v77 = &v51[16 * v48 + 8];
      v79 = *(char **)(a4 + 8);
      v78 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v79 >= v78)
      {
        v80 = *(char **)a4;
        v81 = (uint64_t)&v79[-*(_QWORD *)a4];
        v82 = v81 >> 3;
        v83 = (v81 >> 3) + 1;
        if (v83 >> 61)
          sub_2394189F8();
        v84 = v78 - (_QWORD)v80;
        if (v84 >> 2 > v83)
          v83 = v84 >> 2;
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
          v85 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v85 = v83;
        if (v85)
        {
          if (v85 >> 61)
            sub_239418A80();
          v86 = operator new(8 * v85);
          v87 = &v86[8 * v82];
          *v87 = *(_QWORD *)v77;
          v50 = (uint64_t)(v87 + 1);
          if (v79 == v80)
            goto LABEL_80;
LABEL_74:
          v88 = v79 - 8 - v80;
          if (v88 < 0x58)
            goto LABEL_93;
          if ((unint64_t)(v79 - &v86[v81]) < 0x20)
            goto LABEL_93;
          v89 = (v88 >> 3) + 1;
          v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
          v91 = &v79[-v90];
          v87 = (_QWORD *)((char *)v87 - v90);
          v92 = &v86[8 * v82 - 16];
          v93 = v79 - 16;
          v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v95 = *(_OWORD *)v93;
            *(v92 - 1) = *((_OWORD *)v93 - 1);
            *v92 = v95;
            v92 -= 2;
            v93 -= 32;
            v94 -= 4;
          }
          while (v94);
          v79 = v91;
          if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_93:
            do
            {
              v96 = *((_QWORD *)v79 - 1);
              v79 -= 8;
              *--v87 = v96;
            }
            while (v79 != v80);
          }
        }
        else
        {
          v86 = 0;
          v87 = (_QWORD *)(8 * v82);
          *(_QWORD *)(8 * v82) = *(_QWORD *)v77;
          v50 = 8 * v82 + 8;
          if (v79 != v80)
            goto LABEL_74;
        }
LABEL_80:
        *(_QWORD *)a4 = v87;
        *(_QWORD *)(a4 + 8) = v50;
        *(_QWORD *)(a4 + 16) = &v86[8 * v85];
        if (v80)
          operator delete(v80);
        goto LABEL_39;
      }
      *(_QWORD *)v79 = *(_QWORD *)v77;
      v50 = (uint64_t)(v79 + 8);
LABEL_39:
      *(_QWORD *)(a4 + 8) = v50;
      if (++v48 == v49)
        goto LABEL_82;
    }
    a4 = v57;
    v49 = v56;
    do
    {
LABEL_59:
      v76 = *((_DWORD *)v54 - 1);
      v54 -= 4;
      *--v66 = v76;
    }
    while (v54 != v58);
    goto LABEL_60;
  }
LABEL_82:
  v23 = v98 >> 4;
  if (__p)
  {
    v103 = (char *)__p;
    operator delete(__p);
  }
  return v23;
}

void sub_2396BA810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2396BA83C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  BOOL v11;
  uint64_t v12;
  double *v13;
  float64x2_t *v14;
  uint64_t v15;
  double *v16;
  float64x2_t *v17;
  uint64_t v18;
  const double *v19;
  float64x2_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  uint64_t i;
  uint64_t v27;
  double *v28;
  double *v29;
  double v30;
  void *exception;
  float64x2x2_t v32;
  float64x2x2_t v33;

  v4 = *(int *)(a1 + 56);
  v5 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 16 * v4;
  }
  else
  {
    sub_2396BAEF8((char **)a2, v4 - v5);
  }
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(int *)(v6 + 24);
  if (!(_DWORD)v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "[nanoflann] computeBoundingBox() called but no data points found.");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 < 1)
    return;
  v9 = *(_QWORD *)v6;
  v10 = *(char **)a2;
  if (v8 < 8
    || ((unint64_t)v10 < v9 + 8 * v8 ? (v11 = v9 >= (unint64_t)&v10[16 * v8]) : (v11 = 1), !v11))
  {
    v12 = 0;
LABEL_18:
    v17 = (float64x2_t *)&v10[16 * v12];
    v18 = v8 - v12;
    v19 = (const double *)(v9 + 8 * v12);
    do
    {
      v20 = vld1q_dup_f64(v19++);
      *v17++ = v20;
      --v18;
    }
    while (v18);
    goto LABEL_20;
  }
  v12 = v8 & 0x7FFFFFFC;
  v13 = (double *)(v10 + 32);
  v14 = (float64x2_t *)(v9 + 16);
  v15 = v8 & 0xFFFFFFFC;
  do
  {
    v32.val[0] = v14[-1];
    v33.val[0] = *v14;
    v32.val[1] = v32.val[0];
    v16 = v13 - 4;
    vst2q_f64(v16, v32);
    v33.val[1] = v33.val[0];
    vst2q_f64(v13, v33);
    v13 += 8;
    v14 += 2;
    v15 -= 4;
  }
  while (v15);
  if (v12 != v8)
    goto LABEL_18;
LABEL_20:
  if (v7 >= 2)
  {
    v21 = *(int *)(v6 + 28);
    v22 = *(_QWORD *)v6;
    v23 = *(_QWORD *)a2 + 8;
    v24 = 8 * v21;
    v25 = (double *)(v22 + 8 * v21);
    for (i = 1; i != v7; ++i)
    {
      v27 = v8;
      v28 = v25;
      v29 = (double *)v23;
      do
      {
        v30 = *v28;
        if (*v28 >= *(v29 - 1))
        {
          if (v30 <= *v29)
            goto LABEL_24;
        }
        else
        {
          *(v29 - 1) = v30;
          v30 = *v28;
          if (*v28 <= *v29)
            goto LABEL_24;
        }
        *v29 = v30;
LABEL_24:
        v29 += 2;
        ++v28;
        --v27;
      }
      while (v27);
      v25 = (double *)((char *)v25 + v24);
    }
  }
}

void sub_2396BA9F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396BAA04(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const void *v16;
  int64_t v17;
  uint64_t v18;
  const void *v19;
  int64_t v20;
  const double *v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  double *v45;
  float64x2_t *v46;
  uint64_t v47;
  double *v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double *v60;
  uint64_t v61;
  double *v62;
  double v63;
  unint64_t v65;
  BOOL v67;
  uint64_t v69;
  const double *v70;
  const double *v71;
  double *v72;
  void *__p;
  double *v74;
  char *v75;
  void *v76;
  char *v77;
  char *v78;
  double v79;
  int v80;
  unint64_t v81;
  float64x2x2_t v82;
  float64x2x2_t v83;
  float64x2x2_t v84;
  float64x2x2_t v85;
  float64x2x2_t v86;

  v10 = *(_QWORD *)(a2 + 88);
  if (v10 >= 0x30)
  {
    v12 = *(_QWORD **)(a2 + 104);
LABEL_5:
    *(_QWORD *)(a2 + 88) = v10 - 48;
    v13 = *(_QWORD *)(a2 + 112) + 48;
    *(_QWORD *)(a2 + 104) = v12 + 6;
    *(_QWORD *)(a2 + 112) = v13;
    v14 = a4 - a3;
    if (a4 - a3 > *(_QWORD *)(a2 + 32))
      goto LABEL_6;
LABEL_20:
    v12[3] = 0;
    v12[4] = 0;
    *v12 = a3;
    v12[1] = a4;
    v37 = *(unsigned int *)(a2 + 56);
    if ((int)v37 < 1)
      return v12;
    v38 = *(uint64_t **)(a2 + 128);
    v39 = *(_QWORD *)(*(_QWORD *)a2 + 8 * a3) * *((int *)v38 + 7);
    v40 = *v38;
    v41 = *a5;
    if (v37 >= 8
      && ((v42 = v40 + 8 * v39, v41 < v40 + 8 * (v39 + v37)) ? (v43 = v42 >= v41 + 16 * v37) : (v43 = 1), v43))
    {
      v44 = v37 & 0x7FFFFFFC;
      v45 = (double *)(v41 + 32);
      v46 = (float64x2_t *)(v42 + 16);
      v47 = v37 & 0xFFFFFFFC;
      do
      {
        v82.val[0] = v46[-1];
        v84.val[0] = *v46;
        v82.val[1] = v82.val[0];
        v48 = v45 - 4;
        vst2q_f64(v48, v82);
        v84.val[1] = v84.val[0];
        vst2q_f64(v45, v84);
        v45 += 8;
        v46 += 2;
        v47 -= 4;
      }
      while (v47);
      if (v44 == v37)
      {
LABEL_34:
        v53 = a3 + 1;
        if (a3 + 1 >= a4)
          return v12;
        v54 = *(_QWORD *)a2;
        v55 = *(uint64_t **)(a2 + 128);
        v56 = *((int *)v55 + 7);
        v57 = *v55;
        v58 = 8 * v56;
        v59 = *a5 + 8;
LABEL_37:
        v60 = (double *)(v57 + v58 * *(_QWORD *)(v54 + 8 * v53));
        v61 = v37;
        v62 = (double *)v59;
        while (1)
        {
          v63 = *v60;
          if (*(v62 - 1) <= *v60)
          {
            if (*v62 < v63)
LABEL_43:
              *v62 = v63;
          }
          else
          {
            *(v62 - 1) = v63;
            v63 = *v60;
            if (*v62 < *v60)
              goto LABEL_43;
          }
          ++v60;
          v62 += 2;
          if (!--v61)
          {
            if (++v53 == a4)
              return v12;
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      v44 = 0;
    }
    v49 = (_QWORD *)(v41 + 16 * v44 + 8);
    v50 = (uint64_t *)(v40 + 8 * (v44 + v39));
    v51 = v37 - v44;
    do
    {
      *(v49 - 1) = *v50;
      v52 = *v50++;
      *v49 = v52;
      v49 += 2;
      --v51;
    }
    while (v51);
    goto LABEL_34;
  }
  *(_QWORD *)(a2 + 120) += v10;
  v11 = malloc_type_malloc(0x2000uLL, 0x933F5985uLL);
  if (v11)
  {
    *v11 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = v11;
    v12 = v11 + 1;
    v10 = 8184;
    goto LABEL_5;
  }
  fwrite("Failed to allocate memory.\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  v12 = 0;
  v14 = a4 - a3;
  if (a4 - a3 <= *(_QWORD *)(a2 + 32))
    goto LABEL_20;
LABEL_6:
  v81 = 0;
  v80 = 0;
  v79 = 0.0;
  sub_2396BB020(a1, a2, (_QWORD *)(*(_QWORD *)a2 + 8 * a3), v14, &v81, &v80, &v79, a5);
  *(_DWORD *)v12 = v80;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v15 = a5[1];
  v16 = (const void *)*a5;
  v17 = v15 - *a5;
  if (v17 < 0)
    sub_2394189F8();
  v76 = operator new(v15 - *a5);
  v78 = (char *)v76 + 16 * (v17 >> 4);
  memcpy(v76, v16, v17);
  v77 = (char *)v76 + 16 * (v17 >> 4);
  *((double *)v76 + 2 * v80 + 1) = v79;
  v12[3] = sub_2396BAA04(a1, a2, a3, v81 + a3, &v76);
  __p = 0;
  v74 = 0;
  v75 = 0;
  v18 = a5[1];
  v19 = (const void *)*a5;
  v20 = v18 - *a5;
  if (v20 < 0)
    sub_2394189F8();
  __p = operator new(v18 - *a5);
  v75 = (char *)__p + 16 * (v20 >> 4);
  memcpy(__p, v19, v20);
  v74 = (double *)((char *)__p + 16 * (v20 >> 4));
  *((double *)__p + 2 * v80) = v79;
  v12[4] = sub_2396BAA04(a1, a2, v81 + a3, a4, &__p);
  v21 = (const double *)v76;
  v22 = 16 * v80;
  v12[1] = *(_QWORD *)((char *)v76 + v22 + 8);
  v23 = (double *)__p;
  v12[2] = *(_QWORD *)((char *)__p + v22);
  v24 = *(unsigned int *)(a2 + 56);
  if ((int)v24 < 1)
    goto LABEL_17;
  v25 = *a5;
  if (v24 < 6)
  {
    v26 = 0;
    goto LABEL_11;
  }
  v26 = 0;
  v65 = v25 + 16 * v24;
  v67 = v25 < (unint64_t)&v21[2 * v24] && (unint64_t)v21 < v65;
  if ((unint64_t)v23 < v65 && v25 < (unint64_t)&v23[2 * v24])
    goto LABEL_11;
  if (v67)
    goto LABEL_11;
  v26 = v24 & 0xFFFFFFFE;
  v69 = v26;
  v70 = v23;
  v71 = v21;
  v72 = (double *)*a5;
  do
  {
    v83 = vld2q_f64(v70);
    v70 += 4;
    v85 = vld2q_f64(v71);
    v71 += 4;
    v86.val[0] = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v85.val[0], v83.val[0]), (int8x16_t)v83.val[0], (int8x16_t)v85.val[0]);
    v86.val[1] = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v83.val[1], v85.val[1]), (int8x16_t)v83.val[1], (int8x16_t)v85.val[1]);
    vst2q_f64(v72, v86);
    v72 += 4;
    v69 -= 2;
  }
  while (v69);
  if (v26 != v24)
  {
LABEL_11:
    v27 = v24 - v26;
    v28 = (16 * v26) | 8;
    v29 = (double *)((char *)v23 + v28);
    v30 = (double *)(v25 + v28);
    v31 = (double *)((char *)v21 + v28);
    do
    {
      v32 = *(v29 - 1);
      if (v32 >= *(v31 - 1))
        v32 = *(v31 - 1);
      *(v30 - 1) = v32;
      v33 = *v31;
      v31 += 2;
      v34 = v33;
      v35 = *v29;
      v29 += 2;
      v36 = v35;
      if (v34 < v35)
        v34 = v36;
      *v30 = v34;
      v30 += 2;
      --v27;
    }
    while (v27);
  }
LABEL_17:
  v74 = v23;
  operator delete(v23);
  if (v76)
  {
    v77 = (char *)v76;
    operator delete(v76);
  }
  return v12;
}

void sub_2396BAEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_2396BAEF8(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_2394189F8();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_239418A80();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_2396BB020(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, unint64_t *a5, _DWORD *a6, double *a7, uint64_t *a8)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double v15;
  int v16;
  double v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t *v24;
  unint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double *v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  unint64_t v38;
  uint64_t *v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  double *v50;
  double v51;
  uint64_t v52;
  double v53;
  unint64_t v54;
  unint64_t v55;

  v10 = *a8;
  v11 = *(double *)(*a8 + 8) - *(double *)*a8;
  v12 = *(unsigned int *)(a2 + 56);
  if ((int)v12 > 1)
  {
    v13 = (double *)(v10 + 24);
    v14 = v12 - 1;
    do
    {
      v15 = *(v13 - 1);
      if (*v13 - v15 > v11)
        v11 = *v13 - v15;
      v13 += 2;
      --v14;
    }
    while (v14);
  }
  *a6 = 0;
  v16 = *(_DWORD *)(a2 + 56);
  if (v16 < 1)
  {
    v19 = 0;
    v18 = *(uint64_t **)(a2 + 128);
  }
  else
  {
    v17 = v11 * 0.99999;
    v18 = *(uint64_t **)(a2 + 128);
    v19 = 0;
    if (a4 <= 1)
    {
      v49 = 0;
      v50 = (double *)(v10 + 8);
      v51 = -1.0;
      do
      {
        if (*v50 - *(v50 - 1) > v17)
        {
          v52 = v49 + *a3 * *((int *)v18 + 7);
          v53 = *(double *)(*v18 + 8 * v52) - *(double *)(*v18 + 8 * v52);
          if (v53 > v51)
          {
            *a6 = v49;
            v16 = *(_DWORD *)(a2 + 56);
            v19 = v49;
            v51 = v53;
          }
        }
        ++v49;
        v50 += 2;
      }
      while (v49 < v16);
    }
    else
    {
      v20 = 0;
      v21 = -1.0;
      do
      {
        if (*(double *)(v10 + 16 * v20 + 8) - *(double *)(v10 + 16 * v20) > v17)
        {
          v22 = *((int *)v18 + 7);
          v23 = *(double *)(*v18 + 8 * (v20 + *a3 * v22));
          v24 = a3 + 1;
          v25 = a4 - 1;
          v26 = v23;
          v27 = v23;
          do
          {
            v28 = *v24++;
            v29 = *(double *)(*v18 + 8 * (v20 + v28 * v22));
            if (v29 < v23)
            {
              v23 = v29;
              v27 = v26;
            }
            if (v29 > v27)
            {
              v26 = v29;
              v27 = v29;
            }
            --v25;
          }
          while (v25);
          v30 = v26 - v23;
          if (v30 > v21)
          {
            *a6 = v20;
            v16 = *(_DWORD *)(a2 + 56);
            v19 = v20;
            v21 = v30;
          }
        }
        ++v20;
      }
      while (v20 < v16);
    }
  }
  v31 = v19;
  v32 = (double *)(v10 + 16 * v19);
  v33 = *v32;
  v34 = v32[1];
  v35 = *((int *)v18 + 7);
  v36 = *v18;
  v37 = *(double *)(v36 + 8 * (v19 + *a3 * v35));
  if (a4 < 2)
  {
    v40 = *(double *)(v36 + 8 * (v19 + *a3 * v35));
  }
  else
  {
    v38 = a4 - 1;
    v39 = a3 + 1;
    v40 = v37;
    v41 = v37;
    do
    {
      v42 = *v39++;
      v43 = *(double *)(v36 + 8 * (v31 + v42 * v35));
      if (v43 < v37)
      {
        v37 = v43;
        v41 = v40;
      }
      if (v43 > v41)
      {
        v40 = v43;
        v41 = v43;
      }
      --v38;
    }
    while (v38);
  }
  v44 = (v33 + v34) * 0.5;
  if (v44 <= v40)
    v45 = v44;
  else
    v45 = v40;
  if (v44 >= v37)
    v46 = v45;
  else
    v46 = v37;
  *a7 = v46;
  v54 = 0;
  v55 = 0;
  sub_2396BB280(a1, a2, (uint64_t)a3, a4, v31, a7, &v55, &v54);
  v48 = v54;
  v47 = v55;
  if (v54 >= a4 >> 1)
    v48 = a4 >> 1;
  if (v55 <= a4 >> 1)
    v47 = v48;
  *a5 = v47;
}

void sub_2396BB280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, double *a6, unint64_t *a7, unint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;

  v8 = 0;
  v9 = a4 - 1;
  v10 = *(_QWORD *)(a2 + 128);
  v11 = *a6;
  v12 = a4 - 1;
  do
  {
LABEL_2:
    if (*(double *)(*(_QWORD *)v10 + 8 * (a5 + *(_QWORD *)(a3 + 8 * v8) * *(int *)(v10 + 28))) >= v11)
      break;
    ++v8;
  }
  while (v8 <= v12);
  while (1)
  {
    v13 = v12 != 0;
    if (v8 > v12)
    {
      v14 = v12;
LABEL_13:
      if (v8 > v14)
        break;
      goto LABEL_16;
    }
    if (!v12)
    {
      v14 = 0;
      if (v8)
        break;
      goto LABEL_16;
    }
    while (*(double *)(*(_QWORD *)v10 + 8 * (a5 + *(_QWORD *)(a3 + 8 * v12) * *(int *)(v10 + 28))) >= v11)
    {
      v14 = v12 - 1;
      v13 = v12 != 1;
      if (v8 <= v12 - 1)
      {
        if (--v12)
          continue;
      }
      goto LABEL_13;
    }
    v13 = 1;
    v14 = v12;
    if (v8 > v12)
      break;
LABEL_16:
    if (!v13)
      break;
    v15 = *(_QWORD *)(a3 + 8 * v8);
    *(_QWORD *)(a3 + 8 * v8) = *(_QWORD *)(a3 + 8 * v14);
    *(_QWORD *)(a3 + 8 * v14) = v15;
    ++v8;
    v12 = v14 - 1;
    if (v8 <= v14 - 1)
      goto LABEL_2;
  }
  *a7 = v8;
  v16 = *(_QWORD *)(a2 + 128);
  v17 = *a6;
  if (v8 > v9)
    goto LABEL_22;
  do
  {
LABEL_20:
    if (*(double *)(*(_QWORD *)v16 + 8 * (a5 + *(_QWORD *)(a3 + 8 * v8) * *(int *)(v16 + 28))) > v17)
      break;
    ++v8;
  }
  while (v8 <= v9);
LABEL_22:
  while (2)
  {
    v18 = v9 != 0;
    if (v8 > v9)
    {
      v19 = v9;
LABEL_31:
      if (v8 > v19)
        goto LABEL_37;
LABEL_34:
      if (!v18)
        goto LABEL_37;
      v20 = *(_QWORD *)(a3 + 8 * v8);
      *(_QWORD *)(a3 + 8 * v8) = *(_QWORD *)(a3 + 8 * v19);
      *(_QWORD *)(a3 + 8 * v19) = v20;
      ++v8;
      v9 = v19 - 1;
      if (v8 <= v19 - 1)
        goto LABEL_20;
      continue;
    }
    break;
  }
  if (!v9)
  {
    v19 = 0;
    if (v8)
      goto LABEL_37;
    goto LABEL_34;
  }
  while (*(double *)(*(_QWORD *)v16 + 8 * (a5 + *(_QWORD *)(a3 + 8 * v9) * *(int *)(v16 + 28))) > v17)
  {
    v19 = v9 - 1;
    v18 = v9 != 1;
    if (v8 <= v9 - 1)
    {
      if (--v9)
        continue;
    }
    goto LABEL_31;
  }
  v18 = 1;
  v19 = v9;
  if (v8 <= v9)
    goto LABEL_34;
LABEL_37:
  *a8 = v8;
}

uint64_t sub_2396BB46C(uint64_t *a1, uint64_t *a2, float64x2_t *a3, int *a4, uint64_t *a5, double a6, float a7)
{
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  float64x2_t *v42;
  unint64_t v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  uint64_t v49;
  double *v50;
  double *v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  double *v56;
  _DWORD *v57;
  unint64_t v58;
  double v59;

  v13 = *((_QWORD *)a4 + 3);
  if (!v13 && !*((_QWORD *)a4 + 4))
  {
    v29 = *(_QWORD *)a4;
    if (*(_QWORD *)a4 >= *((_QWORD *)a4 + 1))
      return 1;
    v31 = a2[1];
    v30 = a2[2];
    v32 = *a2;
    v33 = *(double *)(v31 + 8 * v30 - 8);
    v34 = *a1;
    while (1)
    {
      v35 = *(_QWORD *)(v34 + 8 * v29);
      v36 = *((int *)a1 + 14);
      if ((_DWORD)v36)
      {
        v37 = (uint64_t *)a1[18];
        v38 = v35 * *((int *)v37 + 7);
        v39 = *v37;
        if (v36 >= 4)
        {
          v40 = v36 & 0xFFFFFFFFFFFFFFFCLL;
          v42 = (float64x2_t *)(v39 + 8 * v38 + 16);
          v41 = 0.0;
          v43 = v36 & 0xFFFFFFFFFFFFFFFCLL;
          v44 = a3 + 1;
          do
          {
            v45 = vsubq_f64(v44[-1], v42[-1]);
            v46 = vsubq_f64(*v44, *v42);
            v47 = vmulq_f64(v45, v45);
            v48 = vmulq_f64(v46, v46);
            v41 = v41 + v47.f64[0] + v47.f64[1] + v48.f64[0] + v48.f64[1];
            v44 += 2;
            v42 += 2;
            v43 -= 4;
          }
          while (v43);
          if (v40 == v36)
            goto LABEL_30;
        }
        else
        {
          v40 = 0;
          v41 = 0.0;
        }
        v49 = v36 - v40;
        v50 = (double *)(v39 + 8 * (v40 + v38));
        v51 = &a3->f64[v40];
        do
        {
          v52 = *v51++;
          v53 = v52;
          v54 = *v50++;
          v41 = v41 + (v53 - v54) * (v53 - v54);
          --v49;
        }
        while (v49);
      }
      else
      {
        v41 = 0.0;
      }
LABEL_30:
      if (v41 < v33)
      {
        v55 = a2[3];
        if (v55)
        {
          v56 = (double *)(v31 + 8 * v55);
          v57 = (_DWORD *)(*a2 + 4 * v55);
          v58 = a2[3];
          do
          {
            v59 = *(v56 - 1);
            if (v59 <= v41)
              break;
            if (v58 < v30)
            {
              *v56 = v59;
              *v57 = *(v57 - 1);
            }
            --v56;
            --v57;
            --v58;
          }
          while (v58);
        }
        else
        {
          v58 = 0;
        }
        if (v58 < v30)
        {
          *(double *)(v31 + 8 * v58) = v41;
          *(_DWORD *)(v32 + 4 * v58) = v35;
        }
        if (v55 < v30)
          a2[3] = v55 + 1;
      }
      if ((unint64_t)++v29 >= *((_QWORD *)a4 + 1))
        return 1;
    }
  }
  v14 = *a4;
  v15 = a3->f64[v14];
  v16 = *((double *)a4 + 1);
  v17 = *((double *)a4 + 2);
  v18 = v15 - v16;
  v19 = v15 - v17;
  v20 = v15 - v16 + v15 - v17;
  v21 = *((_QWORD *)a4 + 4);
  if (v20 >= 0.0)
    v22 = *((_QWORD *)a4 + 4);
  else
    v22 = *((_QWORD *)a4 + 3);
  if (v20 >= 0.0)
    v23 = v13;
  else
    v23 = v21;
  result = sub_2396BB46C(a1, a2, a3, v22, a5, a6, a7);
  if ((_DWORD)result)
  {
    v25 = v18 * v18;
    v26 = *a5;
    v27 = *(double *)(*a5 + 8 * v14);
    if (v20 < 0.0)
      v25 = v19 * v19;
    v28 = v25 + a6 - v27;
    *(double *)(v26 + 8 * v14) = v25;
    if (v28 * a7 <= *(double *)(a2[1] + 8 * a2[2] - 8))
    {
      result = sub_2396BB46C(a1, a2, a3, v23, a5, v28, a7);
      if (!(_DWORD)result)
        return result;
      v26 = *a5;
    }
    *(double *)(v26 + 8 * v14) = v27;
    return 1;
  }
  return result;
}

uint64_t *sub_2396BB704(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64x2_t v34;
  int64x2_t *v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(uint64_t **)a1;
  result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 3)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 61)
      goto LABEL_38;
    v9 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v9 = a2;
    v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
    v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 61)
LABEL_38:
      sub_2394189F8();
    v12 = v11;
    result = (uint64_t *)operator new(8 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v13 = &result[a2];
    v14 = *a3;
    v15 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v16 = result;
    if (v15 < 3)
      goto LABEL_41;
    v17 = v15 + 1;
    v16 = &result[v17 & 0x3FFFFFFFFFFFFFFCLL];
    v18 = vdupq_lane_s64(v14, 0);
    v19 = (int64x2_t *)(result + 2);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != v13);
    }
    goto LABEL_37;
  }
  v21 = *(uint64_t **)(a1 + 8);
  v22 = (char *)v21 - (char *)v7;
  v23 = v21 - v7;
  if (v23 >= a2)
    v24 = a2;
  else
    v24 = v21 - v7;
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3)
      goto LABEL_42;
    result = &v7[v24 & 0xFFFFFFFFFFFFFFFCLL];
    v25 = vdupq_lane_s64(*a3, 0);
    v26 = (int64x2_t *)(v7 + 2);
    v27 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 4;
    }
    while (v27);
    v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFFCLL);
    v24 &= 3u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  v10 = a2 >= v23;
  v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    v13 = &v7[a2];
LABEL_37:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v30 = &v21[v29];
  v31 = 8 * a2 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8;
  if (v31 < 0x98 || v21 < a3 + 1 && (uint64_t *)((char *)v21 + v31 + 8) > a3)
    goto LABEL_43;
  v32 = (v31 >> 3) + 1;
  v33 = &v21[v32 & 0x3FFFFFFFFFFFFFFCLL];
  v34 = vdupq_lane_s64(*a3, 0);
  v35 = (int64x2_t *)(v21 + 2);
  v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v35[-1] = v34;
    *v35 = v34;
    v35 += 2;
    v36 -= 4;
  }
  while (v36);
  v21 = v33;
  if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_43:
    do
      *v21++ = *a3;
    while (v21 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

BOOL sub_2396BB930(uint64_t a1, double *a2, float64x2_t *a3, uint64_t a4)
{
  uint64_t v4;
  float v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *exception;
  uint64_t v21;
  void *__p;
  void *v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if (!*(_QWORD *)(a1 + 24))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x23B83DB6C](exception, "[nanoflann] findNeighbors() called before building the index.");
      __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v8 = *(float *)(a4 + 4);
    __p = 0;
    v23 = 0;
    v24 = 0;
    v21 = 0;
    sub_2396BB704((uint64_t)&__p, *(int *)(a1 + 56), &v21);
    v9 = *(unsigned int *)(a1 + 56);
    if ((int)v9 >= 1)
    {
      v10 = (double *)__p;
      v11 = (double *)(*(_QWORD *)(a1 + 64) + 8);
      v12 = 0.0;
      v13 = (double *)a3;
      while (1)
      {
        v14 = *v13;
        v15 = *(v11 - 1);
        if (*v13 < v15)
        {
          v17 = (v14 - v15) * (v14 - v15);
          *v10 = v17;
          v12 = v12 + v17;
          v14 = *v13;
          v16 = *v11;
          if (*v13 > *v11)
          {
LABEL_10:
            v18 = (v14 - v16) * (v14 - v16);
            *v10 = v18;
            v12 = v12 + v18;
          }
        }
        else
        {
          v16 = *v11;
          if (v14 > *v11)
            goto LABEL_10;
        }
        ++v10;
        v11 += 2;
        ++v13;
        if (!--v9)
          goto LABEL_12;
      }
    }
    v12 = 0.0;
LABEL_12:
    sub_2396BBAD0(a1, a2, a3, *(int **)(a1 + 24), (uint64_t *)&__p, v12, v8 + 1.0);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
  }
  return v4 != 0;
}

void sub_2396BBA94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2396BBAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396BBAD0(uint64_t a1, double *a2, float64x2_t *a3, int *a4, uint64_t *a5, double a6, float a7)
{
  float64x2_t *v11;
  double *v12;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  unint64_t v29;
  uint64_t v30;
  double v31;
  double *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  double v39;
  float64x2_t *v40;
  unint64_t v41;
  float64x2_t *v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  uint64_t v47;
  double *v48;
  double *v49;
  double v50;
  double v51;
  double v52;
  double **v54;
  unint64_t v55;
  double *v56;
  double *v57;
  uint64_t v58;
  unint64_t v59;
  float64x2_t *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  float64x2_t *v67;

  v11 = a3;
  v12 = a2;
  v14 = *((_QWORD *)a4 + 3);
  if (!v14 && !*((_QWORD *)a4 + 4))
  {
    v30 = *(_QWORD *)a4;
    v29 = *((_QWORD *)a4 + 1);
    if (*(_QWORD *)a4 >= v29)
      return 1;
    v31 = *a2;
    v67 = a3 + 1;
    while (1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v30);
      v34 = *(int *)(a1 + 56);
      if ((_DWORD)v34)
      {
        v35 = *(uint64_t **)(a1 + 144);
        v36 = v33 * *((int *)v35 + 7);
        v37 = *v35;
        if (v34 >= 4)
        {
          v38 = v34 & 0xFFFFFFFFFFFFFFFCLL;
          v40 = (float64x2_t *)(v37 + 8 * v36 + 16);
          v39 = 0.0;
          v41 = v34 & 0xFFFFFFFFFFFFFFFCLL;
          v42 = v67;
          do
          {
            v43 = vsubq_f64(v42[-1], v40[-1]);
            v44 = vsubq_f64(*v42, *v40);
            v45 = vmulq_f64(v43, v43);
            v46 = vmulq_f64(v44, v44);
            v39 = v39 + v45.f64[0] + v45.f64[1] + v46.f64[0] + v46.f64[1];
            v42 += 2;
            v40 += 2;
            v41 -= 4;
          }
          while (v41);
          if (v38 == v34)
            goto LABEL_32;
        }
        else
        {
          v38 = 0;
          v39 = 0.0;
        }
        v47 = v34 - v38;
        v48 = (double *)(v37 + 8 * (v38 + v36));
        v49 = &v11->f64[v38];
        do
        {
          v50 = *v49++;
          v51 = v50;
          v52 = *v48++;
          v39 = v39 + (v51 - v52) * (v51 - v52);
          --v47;
        }
        while (v47);
      }
      else
      {
        v39 = 0.0;
      }
LABEL_32:
      if (v39 >= v31 || *v12 <= v39)
        goto LABEL_22;
      v54 = (double **)*((_QWORD *)v12 + 1);
      v56 = v54[1];
      v55 = (unint64_t)v54[2];
      if ((unint64_t)v56 >= v55)
      {
        v57 = *v54;
        v58 = ((char *)v56 - (char *)*v54) >> 4;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 60)
          sub_2394189F8();
        v60 = v11;
        v61 = v55 - (_QWORD)v57;
        if (v61 >> 3 > v59)
          v59 = v61 >> 3;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
          v62 = 0xFFFFFFFFFFFFFFFLL;
        else
          v62 = v59;
        if (v62)
        {
          if (v62 >> 60)
            sub_239418A80();
          v63 = (char *)operator new(16 * v62);
          v64 = (uint64_t)&v63[16 * v58];
          *(_QWORD *)v64 = v33;
          *(double *)(v64 + 8) = v39;
          v65 = v64;
          if (v56 == v57)
            goto LABEL_50;
          do
          {
LABEL_48:
            *(_OWORD *)(v65 - 16) = *((_OWORD *)v56 - 1);
            v65 -= 16;
            v56 -= 2;
          }
          while (v56 != v57);
          v56 = *v54;
        }
        else
        {
          v63 = 0;
          v64 = 16 * v58;
          *(_QWORD *)v64 = v33;
          *(double *)(v64 + 8) = v39;
          v65 = 16 * v58;
          if (v56 != v57)
            goto LABEL_48;
        }
LABEL_50:
        v32 = (double *)(v64 + 16);
        *v54 = (double *)v65;
        v54[1] = (double *)(v64 + 16);
        v54[2] = (double *)&v63[16 * v62];
        if (v56)
          operator delete(v56);
        v11 = v60;
        v12 = a2;
        goto LABEL_21;
      }
      *(_QWORD *)v56 = v33;
      v56[1] = v39;
      v32 = v56 + 2;
LABEL_21:
      v54[1] = v32;
      v29 = *((_QWORD *)a4 + 1);
LABEL_22:
      if (++v30 >= v29)
        return 1;
    }
  }
  v15 = *a4;
  v16 = a3->f64[v15];
  v17 = *((double *)a4 + 1);
  v18 = *((double *)a4 + 2);
  v19 = v16 - v17;
  v20 = v16 - v18;
  v21 = v16 - v17 + v16 - v18;
  if (v21 >= 0.0)
    v22 = *((_QWORD *)a4 + 4);
  else
    v22 = *((_QWORD *)a4 + 3);
  if (v21 >= 0.0)
    v23 = v14;
  else
    v23 = *((_QWORD *)a4 + 4);
  result = sub_2396BBAD0(a1, a2, a3, v22, a5, a6, a7);
  if ((_DWORD)result)
  {
    v25 = v19 * v19;
    if (v21 < 0.0)
      v25 = v20 * v20;
    v26 = *a5;
    v27 = *(double *)(*a5 + 8 * v15);
    v28 = v25 + a6 - v27;
    *(double *)(*a5 + 8 * v15) = v25;
    if (v28 * a7 <= *v12)
    {
      result = sub_2396BBAD0(a1, v12, v11, v23, a5, v28, a7);
      if (!(_DWORD)result)
        return result;
      v26 = *a5;
    }
    *(double *)(v26 + 8 * v15) = v27;
    return 1;
  }
  return result;
}

double *sub_2396BBE00(double *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double *v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double *v49;
  double *v50;
  double v51;
  double v52;
  double *v53;
  double v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double *v72;
  char *v73;
  char *v74;
  double v75;
  char *v76;
  double v77;
  double *v78;
  double v79;
  uint64_t v80;
  double v81;
  double v82;
  BOOL v83;
  double *v84;
  double v85;
  double *v86;
  double v87;
  double *v88;
  char *v89;
  double v90;
  double v91;
  uint64_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  uint64_t v101;
  double v102;
  double v103;
  uint64_t v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  double v111;
  double v112;
  double *v113;
  BOOL v115;
  uint64_t v116;
  double *v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  double *v123;
  uint64_t v124;
  uint64_t v125;
  double *v126;
  double v127;
  double v128;
  double v129;
  double *v130;
  double *v131;
  uint64_t v132;
  double v133;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v95 = *((double *)a2 - 1);
        v96 = v10[1];
        if (v95 < v96)
        {
          v97 = *v10;
          *v10 = *((double *)a2 - 2);
          *((double *)a2 - 2) = v97;
          v10[1] = v95;
          *((double *)a2 - 1) = v96;
        }
        return result;
      case 3uLL:
        v98 = v10[3];
        v99 = v10[1];
        v100 = *((double *)a2 - 1);
        if (v98 >= v99)
        {
          if (v100 < v98)
          {
            v124 = *((_QWORD *)v10 + 2);
            v10[2] = *((double *)a2 - 2);
            *((_QWORD *)a2 - 2) = v124;
            v10[3] = v100;
            *((double *)a2 - 1) = v98;
            v105 = v10[3];
            v111 = v10[1];
            if (v105 < v111)
            {
              v125 = *(_QWORD *)v10;
              *v10 = v10[2];
              *((_QWORD *)v10 + 2) = v125;
              goto LABEL_134;
            }
          }
        }
        else
        {
          v101 = *(_QWORD *)v10;
          if (v100 >= v98)
          {
            *v10 = v10[2];
            *((_QWORD *)v10 + 2) = v101;
            v10[1] = v98;
            v10[3] = v99;
            v133 = *((double *)a2 - 1);
            if (v133 >= v99)
              return result;
            v10[2] = *((double *)a2 - 2);
            *((_QWORD *)a2 - 2) = v101;
            v10[3] = v133;
          }
          else
          {
            *v10 = *((double *)a2 - 2);
            *((_QWORD *)a2 - 2) = v101;
            v10[1] = v100;
          }
          *((double *)a2 - 1) = v99;
        }
        return result;
      case 4uLL:
        return sub_2396BCB8C(v10, v10 + 2, v10 + 4, (double *)a2 - 2);
      case 5uLL:
        result = sub_2396BCB8C(v10, v10 + 2, v10 + 4, v10 + 6);
        v102 = *((double *)a2 - 1);
        v103 = v10[7];
        if (v102 < v103)
        {
          v104 = *((_QWORD *)v10 + 6);
          v10[6] = *((double *)a2 - 2);
          *((_QWORD *)a2 - 2) = v104;
          v10[7] = v102;
          *((double *)a2 - 1) = v103;
          v105 = v10[7];
          v106 = v10[5];
          if (v105 < v106)
          {
            v107 = *((_QWORD *)v10 + 4);
            v108 = *((_QWORD *)v10 + 6);
            *((_QWORD *)v10 + 4) = v108;
            *((_QWORD *)v10 + 6) = v107;
            v10[5] = v105;
            v10[7] = v106;
            v109 = v10[3];
            if (v105 < v109)
            {
              v110 = *((_QWORD *)v10 + 2);
              *((_QWORD *)v10 + 2) = v108;
              *((_QWORD *)v10 + 4) = v110;
              v10[3] = v105;
              v10[5] = v109;
              v111 = v10[1];
              if (v105 < v111)
              {
                v112 = *v10;
                *(_QWORD *)v10 = v108;
                v10[2] = v112;
LABEL_134:
                v10[1] = v105;
                v10[3] = v111;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 383)
        {
          v113 = v10 + 2;
          v115 = v10 == (double *)a2 || v113 == (double *)a2;
          if ((a5 & 1) != 0)
          {
            if (!v115)
            {
              v116 = 0;
              v117 = v10;
              do
              {
                v119 = v117[3];
                v120 = v117[1];
                v117 = v113;
                if (v119 < v120)
                {
                  v121 = *v113;
                  v122 = v116;
                  do
                  {
                    v123 = (double *)((char *)v10 + v122);
                    v123[2] = *(double *)((char *)v10 + v122);
                    v123[3] = *(double *)((char *)v10 + v122 + 8);
                    if (!v122)
                    {
                      v118 = (uint64_t)v10;
                      goto LABEL_122;
                    }
                    v122 -= 16;
                  }
                  while (v119 < *(v123 - 1));
                  v118 = (uint64_t)v10 + v122 + 16;
LABEL_122:
                  *(double *)v118 = v121;
                  *(double *)(v118 + 8) = v119;
                }
                v113 = v117 + 2;
                v116 += 16;
              }
              while (v117 + 2 != (double *)a2);
            }
          }
          else if (!v115)
          {
            v126 = v10 + 3;
            do
            {
              v127 = v9[3];
              v128 = v9[1];
              v9 = v113;
              if (v127 < v128)
              {
                v129 = *v113;
                v130 = v126;
                do
                {
                  v131 = v130;
                  *(v130 - 1) = *(v130 - 3);
                  v132 = *((_QWORD *)v130 - 2);
                  v130 -= 2;
                  *(_QWORD *)v131 = v132;
                }
                while (v127 < *(v131 - 4));
                *(v130 - 1) = v129;
                *v130 = v127;
              }
              v113 = v9 + 2;
              v126 += 2;
            }
            while (v9 + 2 != (double *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != (double *)a2)
            return (double *)sub_2396BCCE0((char *)v10, a2, (uint64_t *)a2);
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        v15 = *((double *)a2 - 1);
        if ((unint64_t)v11 < 0x801)
        {
          v20 = v10[1];
          v21 = &v10[2 * v13 + 1];
          v22 = *v21;
          if (v20 >= *v21)
          {
            if (v15 < v20)
            {
              v28 = *v10;
              *v10 = *((double *)a2 - 2);
              *((double *)a2 - 2) = v28;
              v10[1] = v15;
              *((double *)a2 - 1) = v20;
              v29 = v10[1];
              v30 = *v21;
              if (v29 < *v21)
              {
                v31 = *v14;
                *v14 = *v10;
                *v10 = v31;
                *v21 = v29;
                v10[1] = v30;
                --a4;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v23 = *(_QWORD *)v14;
            if (v15 >= v20)
            {
              *v14 = *v10;
              *(_QWORD *)v10 = v23;
              *v21 = v20;
              v10[1] = v22;
              v45 = *((double *)a2 - 1);
              if (v45 >= v22)
                goto LABEL_32;
              *v10 = *((double *)a2 - 2);
              *((_QWORD *)a2 - 2) = v23;
              v10[1] = v45;
            }
            else
            {
              *v14 = *((double *)a2 - 2);
              *((_QWORD *)a2 - 2) = v23;
              *v21 = v15;
            }
            *((double *)a2 - 1) = v22;
          }
LABEL_32:
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v47 = v10[1];
          v46 = *v10;
          if (*(v10 - 1) < v47)
            goto LABEL_58;
          if (v47 >= *((double *)a2 - 1))
          {
            v86 = v10 + 2;
            do
            {
              v10 = v86;
              if (v86 >= (double *)a2)
                break;
              v87 = v86[1];
              v86 += 2;
            }
            while (v47 >= v87);
          }
          else
          {
            v84 = v10;
            do
            {
              v10 = v84 + 2;
              v85 = v84[3];
              v84 += 2;
            }
            while (v47 >= v85);
          }
          v88 = (double *)a2;
          if (v10 < (double *)a2)
          {
            v89 = a2;
            do
            {
              v88 = (double *)(v89 - 16);
              v90 = *((double *)v89 - 1);
              v89 -= 16;
            }
            while (v47 < v90);
          }
          while (v10 < v88)
          {
            v91 = *v10;
            *v10 = *v88;
            *v88 = v91;
            v92 = *((_QWORD *)v10 + 1);
            v10[1] = v88[1];
            *((_QWORD *)v88 + 1) = v92;
            do
            {
              v93 = v10[3];
              v10 += 2;
            }
            while (v47 >= v93);
            do
            {
              v94 = *(v88 - 1);
              v88 -= 2;
            }
            while (v47 < v94);
          }
          if (v10 - 2 != v9)
          {
            *v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a5 = 0;
          *(v10 - 2) = v46;
          *(v10 - 1) = v47;
          continue;
        }
        v16 = v10[1];
        v17 = &v10[2 * v13 + 1];
        v18 = *v17;
        if (*v17 >= v16)
        {
          if (v15 < v18)
          {
            v24 = *(_QWORD *)v14;
            *v14 = *((double *)a2 - 2);
            *((_QWORD *)a2 - 2) = v24;
            *v17 = v15;
            *((double *)a2 - 1) = v18;
            v25 = *v17;
            v26 = v10[1];
            if (*v17 < v26)
            {
              v27 = *v10;
              *v10 = *v14;
              *v14 = v27;
              v10[1] = v25;
              *v17 = v26;
            }
          }
        }
        else
        {
          v19 = *v10;
          if (v15 < v18)
          {
            *v10 = *((double *)a2 - 2);
            *((double *)a2 - 2) = v19;
            v10[1] = v15;
            goto LABEL_22;
          }
          *v10 = *v14;
          *v14 = v19;
          v10[1] = v18;
          *v17 = v16;
          v32 = *((double *)a2 - 1);
          if (v32 < v16)
          {
            *v14 = *((double *)a2 - 2);
            *((double *)a2 - 2) = v19;
            *v17 = v32;
LABEL_22:
            *((double *)a2 - 1) = v16;
          }
        }
        v33 = &v10[2 * v13];
        v35 = *(v33 - 1);
        v34 = v33 - 1;
        v36 = v35;
        v37 = v34 - 1;
        v38 = v10[3];
        v39 = *((double *)a2 - 3);
        if (v35 >= v38)
        {
          if (v39 < v36)
          {
            v41 = *v37;
            *v37 = *((double *)a2 - 4);
            *((double *)a2 - 4) = v41;
            *v34 = v39;
            *((double *)a2 - 3) = v36;
            v42 = *v34;
            v43 = v10[3];
            if (*v34 < v43)
            {
              v44 = *((_QWORD *)v10 + 2);
              v10[2] = *v37;
              *(_QWORD *)v37 = v44;
              v10[3] = v42;
              *v34 = v43;
            }
          }
        }
        else
        {
          v40 = *((_QWORD *)v10 + 2);
          if (v39 < v36)
          {
            v10[2] = *((double *)a2 - 4);
            *((_QWORD *)a2 - 4) = v40;
            v10[3] = v39;
            goto LABEL_36;
          }
          v10[2] = *v37;
          *(_QWORD *)v37 = v40;
          v10[3] = v36;
          *v34 = v38;
          v48 = *((double *)a2 - 3);
          if (v48 < v38)
          {
            *v37 = *((double *)a2 - 4);
            *((_QWORD *)a2 - 4) = v40;
            *v34 = v48;
LABEL_36:
            *((double *)a2 - 3) = v38;
          }
        }
        v49 = &v10[2 * v13];
        v51 = v49[3];
        v50 = v49 + 3;
        v52 = v51;
        v53 = v50 - 1;
        v54 = v10[5];
        v55 = *((double *)a2 - 5);
        if (v51 >= v54)
        {
          if (v55 < v52)
          {
            v57 = *v53;
            *v53 = *((double *)a2 - 6);
            *((double *)a2 - 6) = v57;
            *v50 = v55;
            *((double *)a2 - 5) = v52;
            v58 = *v50;
            v59 = v10[5];
            if (*v50 < v59)
            {
              v60 = *((_QWORD *)v10 + 4);
              v10[4] = *v53;
              *(_QWORD *)v53 = v60;
              v10[5] = v58;
              *v50 = v59;
            }
          }
        }
        else
        {
          v56 = *((_QWORD *)v10 + 4);
          if (v55 < v52)
          {
            v10[4] = *((double *)a2 - 6);
            *((_QWORD *)a2 - 6) = v56;
            v10[5] = v55;
            goto LABEL_45;
          }
          v10[4] = *v53;
          *(_QWORD *)v53 = v56;
          v10[5] = v52;
          *v50 = v54;
          v61 = *((double *)a2 - 5);
          if (v61 < v54)
          {
            *v53 = *((double *)a2 - 6);
            *((_QWORD *)a2 - 6) = v56;
            *v50 = v61;
LABEL_45:
            *((double *)a2 - 5) = v54;
          }
        }
        v62 = *v17;
        v63 = *v34;
        v64 = *v50;
        if (*v17 >= *v34)
        {
          v65 = *(_QWORD *)v14;
          if (v64 >= v62)
          {
            v63 = *v17;
          }
          else
          {
            v66 = *(_QWORD *)v53;
            *v14 = *v53;
            *(_QWORD *)v53 = v65;
            *v17 = v64;
            *v50 = v62;
            if (v64 >= v63)
            {
              v63 = v64;
              v65 = v66;
            }
            else
            {
              v65 = *(_QWORD *)v37;
              *(_QWORD *)v37 = v66;
              *(_QWORD *)v14 = v65;
              *v34 = v64;
              *v17 = v63;
            }
          }
        }
        else
        {
          v65 = *(_QWORD *)v37;
          if (v64 >= v62)
          {
            *v37 = *v14;
            *(_QWORD *)v14 = v65;
            *v34 = v62;
            *v17 = v63;
            if (v64 < v63)
            {
              v67 = *(_QWORD *)v53;
              *v14 = *v53;
              *(_QWORD *)v53 = v65;
              *v17 = v64;
              *v50 = v63;
              v63 = v64;
              v65 = v67;
            }
          }
          else
          {
            *v37 = *v53;
            *(_QWORD *)v53 = v65;
            *v34 = v64;
            *v50 = v63;
            v65 = *(_QWORD *)v14;
            v63 = v62;
          }
        }
        v68 = *v10;
        *(_QWORD *)v10 = v65;
        *v14 = v68;
        v69 = *((_QWORD *)v10 + 1);
        v10[1] = v63;
        *(_QWORD *)v17 = v69;
        --a4;
        if ((a5 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v46 = *v10;
        v47 = v10[1];
LABEL_58:
        v70 = 0;
        do
        {
          v71 = v10[v70 + 3];
          v70 += 2;
        }
        while (v71 < v47);
        v72 = &v10[v70];
        v73 = a2;
        if (v70 == 2)
        {
          v76 = a2;
          while (v72 < (double *)v76)
          {
            v74 = v76 - 16;
            v77 = *((double *)v76 - 1);
            v76 -= 16;
            if (v77 < v47)
              goto LABEL_66;
          }
          v74 = v76;
          v10 = v72;
        }
        else
        {
          do
          {
            v74 = v73 - 16;
            v75 = *((double *)v73 - 1);
            v73 -= 16;
          }
          while (v75 >= v47);
LABEL_66:
          v10 = v72;
          if (v72 < (double *)v74)
          {
            v78 = (double *)v74;
            do
            {
              v79 = *v10;
              *v10 = *v78;
              *v78 = v79;
              v80 = *((_QWORD *)v10 + 1);
              v10[1] = v78[1];
              *((_QWORD *)v78 + 1) = v80;
              do
              {
                v81 = v10[3];
                v10 += 2;
              }
              while (v81 < v47);
              do
              {
                v82 = *(v78 - 1);
                v78 -= 2;
              }
              while (v82 >= v47);
            }
            while (v10 < v78);
          }
        }
        if (v10 - 2 != v9)
        {
          *v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *(v10 - 2) = v46;
        *(v10 - 1) = v47;
        if (v72 < (double *)v74)
        {
LABEL_77:
          result = (double *)sub_2396BBE00(v9, v10 - 2, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v83 = sub_2396BC7E0(v9, v10 - 2);
        result = (double *)sub_2396BC7E0(v10, (double *)a2);
        if (!(_DWORD)result)
        {
          if (v83)
            continue;
          goto LABEL_77;
        }
        a2 = (char *)(v10 - 2);
        if (!v83)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_2396BC7E0(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double *v38;
  uint64_t v39;
  int v40;
  double *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 < v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = a1[3];
      v10 = a1[1];
      v11 = *(a2 - 1);
      if (v9 >= v10)
      {
        if (v11 < v9)
        {
          v30 = *((_QWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_QWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          v31 = a1[3];
          v32 = a1[1];
          if (v31 < v32)
          {
            v33 = *(_QWORD *)a1;
            *a1 = a1[2];
            *((_QWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        v12 = *(_QWORD *)a1;
        if (v11 >= v9)
        {
          *a1 = a1[2];
          *((_QWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          v37 = *(a2 - 1);
          if (v37 < v10)
          {
            a1[2] = *(a2 - 2);
            *((_QWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_QWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_2396BCB8C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_2396BCB8C(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 1);
      v20 = a1[7];
      if (v19 >= v20)
        return 1;
      v21 = *((_QWORD *)a1 + 6);
      a1[6] = *(a2 - 2);
      *((_QWORD *)a2 - 2) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      v22 = a1[7];
      v23 = a1[5];
      if (v22 >= v23)
        return 1;
      v24 = *((_QWORD *)a1 + 4);
      v25 = *((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 4) = v25;
      *((_QWORD *)a1 + 6) = v24;
      a1[5] = v22;
      a1[7] = v23;
      v26 = a1[3];
      if (v22 >= v26)
        return 1;
      v27 = *((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v25;
      *((_QWORD *)a1 + 4) = v27;
      a1[3] = v22;
      a1[5] = v26;
      v28 = a1[1];
      if (v22 >= v28)
        return 1;
      v29 = *a1;
      *(_QWORD *)a1 = v25;
      a1[2] = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      v13 = a1[1];
      v14 = a1 + 3;
      v15 = a1[3];
      v16 = a1[5];
      if (v15 < v13)
      {
        v17 = *a1;
        if (v16 >= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 >= v13)
            goto LABEL_30;
          a1[2] = a1[4];
          a1[4] = v17;
          v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          v18 = a1 + 1;
        }
        v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 < v15)
      {
        v34 = *((_QWORD *)a1 + 2);
        v35 = *((_QWORD *)a1 + 4);
        *((_QWORD *)a1 + 2) = v35;
        *((_QWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 < v13)
        {
          v36 = *a1;
          *(_QWORD *)a1 = v35;
          a1[2] = v36;
          v18 = a1 + 1;
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = a1 + 4;
      while (1)
      {
        v42 = v38[1];
        if (v42 < v41[1])
          break;
LABEL_39:
        v41 = v38;
        v39 += 16;
        v38 += 2;
        if (v38 == a2)
          return 1;
      }
      v43 = *(_QWORD *)v38;
      v44 = v39;
      do
      {
        v45 = (double *)((char *)a1 + v44);
        v45[6] = *(double *)((char *)a1 + v44 + 32);
        v45[7] = *(double *)((char *)a1 + v44 + 40);
        if (v44 == -32)
        {
          *(_QWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 2 == a2;
        }
        v44 -= 16;
      }
      while (v42 < v45[3]);
      v46 = (char *)a1 + v44;
      *((_QWORD *)v46 + 6) = v43;
      *((double *)v46 + 7) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 2 == a2;
  }
}

double *sub_2396BCB8C(double *result, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v4 = a2[1];
  v5 = result[1];
  v6 = a3[1];
  if (v4 < v5)
  {
    v7 = *result;
    if (v6 >= v4)
    {
      *result = *a2;
      *a2 = v7;
      result[1] = v4;
      a2[1] = v5;
      v4 = a3[1];
      if (v4 >= v5)
        goto LABEL_11;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v4;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
      result[1] = v6;
    }
    a3[1] = v5;
    v4 = v5;
LABEL_11:
    v12 = a4[1];
    if (v12 >= v4)
      return result;
    goto LABEL_14;
  }
  if (v6 >= v4)
  {
    v4 = a3[1];
    v12 = a4[1];
    if (v12 >= v6)
      return result;
    goto LABEL_14;
  }
  v8 = *a2;
  *a2 = *a3;
  *a3 = v8;
  a2[1] = v6;
  a3[1] = v4;
  v9 = a2[1];
  v10 = result[1];
  if (v9 >= v10)
    goto LABEL_11;
  v11 = *result;
  *result = *a2;
  *a2 = v11;
  result[1] = v9;
  a2[1] = v10;
  v4 = a3[1];
  v12 = a4[1];
  if (v12 >= v4)
    return result;
LABEL_14:
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  a3[1] = v12;
  a4[1] = v4;
  v14 = a3[1];
  v15 = a2[1];
  if (v14 < v15)
  {
    v16 = *a2;
    *a2 = *a3;
    *a3 = v16;
    a2[1] = v14;
    a3[1] = v15;
    v17 = a2[1];
    v18 = result[1];
    if (v17 < v18)
    {
      v19 = *result;
      *result = *a2;
      *a2 = v19;
      result[1] = v17;
      a2[1] = v18;
    }
  }
  return result;
}

uint64_t *sub_2396BCCE0(char *a1, char *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  uint64_t *v14;
  uint64_t v15;
  double v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  double *v34;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  double v40;
  double v41;
  double *v42;
  double v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = (a2 - a1) >> 4;
  if (a2 - a1 >= 17 && (unint64_t)v3 >= 0x20)
  {
    v36 = (unint64_t)(v4 - 2) >> 1;
    v37 = v36;
    do
    {
      if (v36 >= v37)
      {
        v38 = (2 * v37) | 1;
        v39 = (uint64_t *)&a1[16 * v38];
        if (2 * v37 + 2 < v4 && *((double *)v39 + 1) < *((double *)v39 + 3))
        {
          v39 += 2;
          v38 = 2 * v37 + 2;
        }
        v40 = *((double *)v39 + 1);
        v41 = *(double *)&a1[16 * v37 + 8];
        if (v40 >= v41)
        {
          v42 = (double *)&a1[16 * v37];
          v43 = *v42;
          do
          {
            v44 = v42;
            v42 = (double *)v39;
            *(_QWORD *)v44 = *v39;
            v44[1] = v40;
            if (v36 < v38)
              break;
            v45 = 2 * v38;
            v38 = (2 * v38) | 1;
            v39 = (uint64_t *)&a1[16 * v38];
            v46 = v45 + 2;
            if (v46 < v4 && *((double *)v39 + 1) < *((double *)v39 + 3))
            {
              v39 += 2;
              v38 = v46;
            }
            v40 = *((double *)v39 + 1);
          }
          while (v40 >= v41);
          *v42 = v43;
          v42[1] = v41;
        }
      }
      v22 = v37-- <= 0;
    }
    while (!v22);
  }
  v5 = (uint64_t *)a2;
  if (a2 != (char *)a3)
  {
    if (v3 < 32)
    {
      v6 = *((double *)a1 + 1);
      v7 = (double *)a2;
      do
      {
        v8 = v7[1];
        if (v8 < v6)
        {
          v9 = *v7;
          *v7 = *(double *)a1;
          *(double *)a1 = v9;
          v7[1] = v6;
          *((double *)a1 + 1) = v8;
          v6 = v8;
        }
        v7 += 2;
      }
      while (v7 != (double *)a3);
LABEL_25:
      v5 = a3;
      goto LABEL_26;
    }
    v10 = (double *)a2;
    while (1)
    {
      v11 = v10[1];
      v12 = *((double *)a1 + 1);
      if (v11 < v12)
      {
        v13 = *v10;
        *v10 = *(double *)a1;
        *(double *)a1 = v13;
        v10[1] = v12;
        *((double *)a1 + 1) = v11;
        if (v3 == 32 || *((double *)a1 + 3) >= *((double *)a1 + 5))
        {
          v14 = (uint64_t *)(a1 + 16);
          v15 = 1;
          v16 = *((double *)a1 + 3);
          if (v16 >= v11)
          {
LABEL_19:
            v17 = (uint64_t *)a1;
            do
            {
              v18 = v17;
              v17 = v14;
              *v18 = *v14;
              *((double *)v18 + 1) = v16;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v15)
                break;
              v19 = 2 * v15;
              v15 = (2 * v15) | 1;
              v14 = (uint64_t *)&a1[16 * v15];
              v20 = v19 + 2;
              if (v20 < v4 && *((double *)v14 + 1) < *((double *)v14 + 3))
              {
                v14 += 2;
                v15 = v20;
              }
              v16 = *((double *)v14 + 1);
            }
            while (v16 >= v11);
            *(double *)v17 = v13;
            *((double *)v17 + 1) = v11;
          }
        }
        else
        {
          v14 = (uint64_t *)(a1 + 32);
          v15 = 2;
          v16 = *((double *)a1 + 5);
          if (v16 >= v11)
            goto LABEL_19;
        }
      }
      v10 += 2;
      if (v10 == (double *)a3)
        goto LABEL_25;
    }
  }
LABEL_26:
  if (v3 >= 17)
  {
    v21 = (unint64_t)v3 >> 4;
    do
    {
      v23 = 0;
      v24 = *(double *)a1;
      v25 = *((double *)a1 + 1);
      v26 = (uint64_t *)a1;
      do
      {
        v27 = v26;
        v26 += 2 * v23 + 2;
        v28 = 2 * v23;
        v23 = (2 * v23) | 1;
        v29 = v28 + 2;
        if (v29 < v21 && *((double *)v26 + 1) < *((double *)v26 + 3))
        {
          v26 += 2;
          v23 = v29;
        }
        *v27 = *v26;
        v27[1] = v26[1];
      }
      while (v23 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
      if (v26 == (uint64_t *)(a2 - 16))
      {
        *(double *)v26 = v24;
      }
      else
      {
        *v26 = *((_QWORD *)a2 - 2);
        v26[1] = *((_QWORD *)a2 - 1);
        *((double *)a2 - 2) = v24;
        *((double *)a2 - 1) = v25;
        v30 = (char *)v26 - a1 + 16;
        if (v30 < 17)
          goto LABEL_30;
        v31 = (((unint64_t)v30 >> 4) - 2) >> 1;
        v32 = *(double *)&a1[16 * v31 + 8];
        v25 = *((double *)v26 + 1);
        if (v32 >= v25)
          goto LABEL_30;
        v33 = *v26;
        do
        {
          v34 = (double *)v26;
          v26 = (uint64_t *)&a1[16 * v31];
          *(_QWORD *)v34 = *v26;
          v34[1] = v32;
          if (!v31)
            break;
          v31 = (v31 - 1) >> 1;
          v32 = *(double *)&a1[16 * v31 + 8];
        }
        while (v32 < v25);
        *v26 = v33;
      }
      *((double *)v26 + 1) = v25;
LABEL_30:
      a2 -= 16;
      v22 = v21-- <= 2;
    }
    while (!v22);
  }
  return v5;
}

uint64_t sub_2396BD088(uint64_t a1, char a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;

  if (a2)
  {
    v7 = nullsub_4(a1);
    sub_2397A9494(v7);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    v9 = sub_2397A9F50(a1);
    sub_2397A9494(v9);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    v11 = MTLCreateSystemDefaultDevice();
    v8 = v11;
    if (!v11)
    {
      v10 = 0;
LABEL_8:
      v12 = 0;
      goto LABEL_9;
    }
    v10 = (id)objc_msgSend(v11, "newCommandQueue");
  }
  v8 = objc_retainAutorelease(v8);
  *a3 = v8;
  v10 = objc_retainAutorelease(v10);
  *a4 = v10;
  v12 = 1;
LABEL_9:

  return v12;
}

void sub_2396BD15C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_2396BD16C()
{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  const char *v6;
  const char *v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  BOOL v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v29;
  void *__p[2];
  int64_t v31;
  _QWORD v32[8];
  _QWORD v33[8];
  unsigned __int8 __dst[16176];
  uint64_t v35;

  v0 = (void *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v35 = *MEMORY[0x24BDAC8D0];
  v5 = v0;
  memcpy(__dst, &unk_239ECAFD0, sizeof(__dst));
  sub_2396BF664(__dst);
  v7 = v6;
  v8 = strlen(v6);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    __p[1] = v9;
    v31 = v12 | 0x8000000000000000;
    __p[0] = v10;
    goto LABEL_8;
  }
  HIBYTE(v31) = v8;
  v10 = __p;
  if (v8)
LABEL_8:
    memmove(v10, v7, (size_t)v9);
  *((_BYTE *)v9 + (_QWORD)v10) = 0;
  if (v31 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_opt_new();
  if (*(_BYTE *)v4)
    v16 = &unk_250B033B0;
  else
    v16 = &unk_250B033C8;
  v32[0] = CFSTR("CUSTOM_RASTERIZE");
  v32[1] = CFSTR("WRITE_MASK");
  if (*(_BYTE *)(v4 + 1))
    v17 = &unk_250B033B0;
  else
    v17 = &unk_250B033C8;
  v33[0] = v16;
  v33[1] = v17;
  if (*(_BYTE *)(v4 + 2))
    v18 = &unk_250B033B0;
  else
    v18 = &unk_250B033C8;
  v32[2] = CFSTR("WRITE_PRIMITIVE_ID");
  v32[3] = CFSTR("WRITE_BARYCENTRIC_COORD");
  if (*(_BYTE *)(v4 + 3))
    v19 = &unk_250B033B0;
  else
    v19 = &unk_250B033C8;
  v33[2] = v18;
  v33[3] = v19;
  if (*(_BYTE *)(v4 + 4))
    v20 = &unk_250B033B0;
  else
    v20 = &unk_250B033C8;
  v32[4] = CFSTR("WRITE_DEPTH");
  v32[5] = CFSTR("WRITE_VIS_MASK");
  if (*(_BYTE *)(v4 + 5))
    v21 = &unk_250B033B0;
  else
    v21 = &unk_250B033C8;
  v33[4] = v20;
  v33[5] = v21;
  v22 = *(_DWORD *)(v4 + 8) == 1;
  v32[6] = CFSTR("ORIGINAL_DEPTH");
  v32[7] = CFSTR("USE_CUSTOM_BARY");
  if (v22)
    v23 = &unk_250B033B0;
  else
    v23 = &unk_250B033C8;
  if (*(_BYTE *)(v4 + 6))
    v24 = &unk_250B033B0;
  else
    v24 = &unk_250B033C8;
  v33[6] = v23;
  v33[7] = v24;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v33, v32, 8);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setPreprocessorMacros:", v25);
  objc_msgSend(v15, "setLanguageVersion:", sub_2397AA038());
  v29 = 0;
  v26 = (void *)objc_msgSend(v5, "newLibraryWithSource:options:error:", v14, v15, &v29);
  v27 = v29;

  if (!v27)
    *v2 = objc_retainAutorelease(v26);

  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);

  return v27 == 0;
}

void sub_2396BD454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2396BD4A8(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;

  v3 = a1;
  objc_msgSend(MEMORY[0x24BDDD500], "sharedCaptureManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "newCaptureScopeWithDevice:", v3);
  v6 = (void *)objc_opt_new();
  objc_msgSend(v6, "setCaptureObject:", v5);
  v9 = 0;
  objc_msgSend(v4, "startCaptureWithDescriptor:error:", v6, &v9);
  v7 = v9;
  objc_msgSend(v5, "beginScope");
  v8 = objc_retainAutorelease(v5);
  *a2 = v8;

}

void sub_2396BD570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2396BD590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2396BD5B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2396BD5C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

_QWORD *sub_2396BD5E4(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 62)
      sub_2394189F8();
    v4 = 4 * a2;
    v5 = (char *)operator new(4 * a2);
    *a1 = v5;
    a1[2] = &v5[4 * a2];
    bzero(v5, 4 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_2396BD65C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2396BD678(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 62)
      sub_2394189F8();
    v4 = 4 * a2;
    v5 = (char *)operator new(4 * a2);
    *a1 = v5;
    a1[2] = &v5[4 * a2];
    bzero(v5, 4 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_2396BD6F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_2396BD70C(uint64_t *a1, float64x2_t *a2, unsigned int *a3, float a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  float32x4_t v10;
  float32x4_t v11;
  int32x2_t v12;
  float32x4_t v13;
  unsigned int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  float64x2_t v23;
  float64x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float v30;
  double v31;
  float64x2_t v32;
  double v33;
  float64x2_t v34;
  double v35;
  float32x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float *v39;
  double v40;
  double v41;
  double v42;
  float v43;
  float32x2_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  float v54;
  float v55;
  float32x2_t v56;
  float v57;
  float v58;
  float64x2_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  unsigned int *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _BOOL4 v74;
  uint64_t v75;
  float v76;
  float32x4_t v77;
  uint64_t v78;
  float v79;
  float32x4_t v80;
  uint64_t v81;
  float32x4_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float32x2_t v85;
  int32x2_t v86;
  float v87;
  float v88;
  int32x2_t v90;
  void *__p;

  v17 = *a3;
  v18 = (double)*a3 * 0.5 * a4;
  v19 = *a1;
  __p = 0;
  *(float *)v12.i32 = -v18;
  v20 = a1[1] - *a1;
  if (v20)
  {
    v90 = v12;
    if (v20 < 0)
      sub_2394189F8();
    v21 = v20 / 12;
    v22 = operator new(8 * ((unint64_t)(v20 / 12 - 1) >> 6) + 8);
    v25 = v22;
    __p = v22;
    if (v21 >= 0x41)
      v26 = (v21 - 1) >> 6;
    else
      v26 = 0;
    v22[v26] = 0;
    if (v21 >= 0x40)
      bzero(v22, 8 * (v21 >> 6));
    if ((v21 & 0x3F) != 0)
      v25[v21 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v21 & 0x3F));
    v27 = 0;
    v28 = *a2;
    v29 = a2[1];
    v30 = v18 + (float)a3[1];
    v23.f64[0] = a2[11].f64[0];
    v38 = a2[10];
    v31 = a2[5].f64[0];
    v32 = a2[4];
    v33 = a2[7].f64[0];
    v34 = a2[6];
    v35 = a2[9].f64[0];
    v12 = v90;
    v36 = (float32x2_t)vdup_lane_s32(v90, 0);
    v37 = a2[8];
    *(_QWORD *)&v38.f64[1] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
    do
    {
      v39 = (float *)(v19 + 12 * v27);
      v40 = *v39;
      v41 = v39[1];
      v42 = v39[2];
      v24.f64[0] = v31 * v40 + v33 * v41 + v35 * v42;
      v43 = v23.f64[0] + v24.f64[0];
      if (v43 > 0.0000001)
      {
        v24 = vmlaq_f64(v29, v28, vdivq_f64(vaddq_f64(v38, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v32, v40), v34, v41), v37, v42)), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(v23, v24), 0)));
        v44 = vcvt_f32_f64(v24);
        *(int32x2_t *)&v24.f64[0] = vcgt_f32(v44, v36);
        if ((LOBYTE(v24.f64[0]) & 1) != 0
          && (BYTE4(v24.f64[0]) & 1) != 0
          && (float)((float)v17 + v18) > v44.f32[0]
          && v30 > v44.f32[1])
        {
          *(_QWORD *)((char *)v25 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
        }
      }
      ++v27;
    }
    while (v21 != v27);
  }
  else
  {
    v25 = 0;
  }
  v46 = a1[3];
  v47 = a1[4];
  v48 = v47 - v46;
  if (v47 != v46)
  {
    v49 = 0;
    v50 = v48 / 12;
    v51 = a2[5].f64[0];
    v52 = a2[7].f64[0];
    v53 = a2[9].f64[0];
    a10.f64[0] = a2[11].f64[0];
    v64 = a2[10];
    v54 = (float)v17 + v18;
    v55 = v18 + (float)a3[1];
    v56 = (float32x2_t)vdup_lane_s32(v12, 0);
    v57 = 1.1755e-38;
    v58 = 3.4028e38;
    __asm { FMOV            V21.4S, #3.0 }
    *(_QWORD *)&v64.f64[1] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
    while (1)
    {
      v70 = (unsigned int *)(v46 + 12 * v49);
      v71 = *v70;
      v72 = v70[1];
      v73 = v70[2];
      v74 = ((1 << v73) & *(_QWORD *)((char *)v25 + ((v73 >> 3) & 0x1FFFFFF8)) | (1 << v72) & *(_QWORD *)((char *)v25 + ((v72 >> 3) & 0x1FFFFFF8)) | (1 << v71) & *(_QWORD *)((char *)v25 + ((v71 >> 3) & 0x1FFFFFF8))) != 0;
      v75 = v19 + 12 * v71;
      v76 = *(float *)(v75 + 8);
      v13.i64[0] = *(_QWORD *)v75;
      v77 = v13;
      v77.f32[2] = v76;
      v78 = v19 + 12 * v72;
      v79 = *(float *)(v78 + 8);
      v11.i64[0] = *(_QWORD *)v78;
      v80 = v11;
      v80.f32[2] = v79;
      v81 = v19 + 12 * v73;
      v10.i64[0] = *(_QWORD *)v81;
      v82 = v10;
      v82.i32[2] = *(_DWORD *)(v81 + 8);
      v83 = (float64x2_t)vdivq_f32(vaddq_f32(vaddq_f32(v77, v80), v82), _Q21);
      v84 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[4], *(float *)v83.f64), a2[6], *((float *)v83.f64 + 1)), a2[8], *(float *)&v83.f64[1]);
      v83.f64[0] = v51 * *(float *)v83.f64 + v52 * *((float *)v83.f64 + 1) + v53 * *(float *)&v83.f64[1];
      v85 = vcvt_f32_f64(vmlaq_f64(a2[1], *a2, vdivq_f64(vaddq_f64(v64, v84), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(a10, v83), 0))));
      v86 = vcgt_f32(v85, v56);
      if ((v86.i8[0] & 1) != 0 && (v86.i8[4] & 1) != 0 && v54 > v85.f32[0])
        break;
      if (v74)
        goto LABEL_23;
LABEL_38:
      if (v50 == ++v49)
        goto LABEL_49;
    }
    if (v55 > v85.f32[1])
      LOBYTE(v74) = 1;
    if (!v74)
      goto LABEL_38;
LABEL_23:
    v65 = a10.f64[0] + v51 * v13.f32[0] + v52 * v13.f32[1] + v53 * v76;
    if (v65 > 0.0000001 && v57 < v65)
      v66 = v65;
    else
      v66 = v57;
    if (v65 > 0.0000001 && v58 > v65)
      v58 = v65;
    v67 = a10.f64[0] + v51 * v11.f32[0] + v52 * v11.f32[1] + v53 * v79;
    if (v67 > 0.0000001 && v66 < v67)
      v68 = v67;
    else
      v68 = v66;
    if (v67 > 0.0000001 && v58 > v67)
      v58 = v67;
    v69 = a10.f64[0] + v51 * v10.f32[0] + v52 * v10.f32[1] + v53 * *(float *)(v81 + 8);
    if (v69 > 0.0000001 && v68 < v69)
      v57 = a10.f64[0] + v51 * v10.f32[0] + v52 * v10.f32[1] + v53 * *(float *)(v81 + 8);
    else
      v57 = v68;
    if (v69 > 0.0000001 && v58 > v69)
      v58 = a10.f64[0] + v51 * v10.f32[0] + v52 * v10.f32[1] + v53 * *(float *)(v81 + 8);
    goto LABEL_38;
  }
  v58 = 3.4028e38;
  v57 = 1.1755e-38;
LABEL_49:
  if (v58 >= 0.0000001)
    v87 = v58;
  else
    v87 = 0.0000001;
  if (v87 == v57)
    goto LABEL_56;
  v88 = v87 - v57;
  if (v87 < v57)
    v88 = v57 - v87;
  if (v88 <= 0.000001)
LABEL_56:
    v87 = v87 + -0.0000001;
  if (__p)
    operator delete(__p);
  return v87;
}

uint64_t sub_2396BDC5C(uint64_t *a1, uint32x2_t *a2, uint64_t a3, unsigned __int8 a4, uint64_t *a5, unsigned __int8 a6, uint64_t a7, unsigned __int8 a8, uint64_t a9, char a10, std::mutex *a11, char a12)
{
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v24;
  char v25;
  id v26;
  id v27;
  std::mutex *v28;
  id v29;
  __int32 v30;
  BOOL v31;
  id v32;
  _DWORD *v33;
  uint64_t v34;
  _DWORD *v35;
  _QWORD *v36;
  _DWORD *v37;
  __int32 v38;
  unsigned __int32 v39;
  int v40;
  int v41;
  unsigned int *v42;
  unsigned int *v43;
  __int32 v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  uint32x2_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint32x2_t *v60;
  uint32x2_t *v61;
  char *v62;
  uint32x2_t *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  uint32x2_t v67;
  uint32x2_t *v68;
  uint32x2_t *v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint32x2_t *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint32x2_t *v77;
  uint32x2_t *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint32x2_t *v82;
  char *v83;
  char *v84;
  void *v85;
  void *v86;
  id v87;
  unint64_t v88;
  id v89;
  unint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  _OWORD *v101;
  __int128 v102;
  __int128 v103;
  _DWORD *v104;
  char *v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  BOOL v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  _OWORD *v115;
  __int128 v116;
  __int128 v117;
  _DWORD *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  char *v130;
  char *v131;
  void *v132;
  void *v133;
  std::__shared_weak_count *v134;
  unint64_t *p_shared_owners;
  unint64_t v136;
  id v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  float64x2_t v143;
  float v144;
  float v145;
  float v146;
  double v147;
  double v148;
  float32x2_t v149;
  float64x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x4_t v156;
  unint64_t v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  unsigned int v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  id v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  __int32 v197;
  uint64_t v198;
  void *v199;
  void *v200;
  id v201;
  void *v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  void *v231;
  void *v232;
  unsigned int *v233;
  std::mutex *v234;
  void *v235;
  uint64_t *v236;
  id v237;
  id v238;
  uint64_t v239;
  uint64_t v240;
  uint32x2_t *v241;
  uint32x2_t v242;
  uint64_t *v244;
  float64x2_t v245;
  uint64_t v246;
  uint64_t v247;
  void *context;
  _QWORD v249[12];
  _QWORD v250[6];
  uint32x2_t v251;
  std::__shared_weak_count_vtbl *v252;
  std::__shared_weak_count *v253;
  uint32x2_t v254;
  void *v255[2];
  float64x2_t v256;
  float64x2_t v257;
  float32x4_t v258;
  id v259;
  id v260;
  void *v261;
  uint32x2_t *v262;
  uint32x2_t *v263;
  uint64_t v264;
  std::__shared_weak_count *v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  uint64_t v270;
  std::__shared_weak_count *v271;
  void *v272;
  void *v273;
  _QWORD *v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  uint64_t v279;
  char v280;
  BOOL v281;
  BOOL v282;
  int v283;
  __int32 v284;
  id v285;
  id v286;
  void *__p[2];
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  uint64_t v291;
  __int128 v292;
  __int128 v293;
  double v294[7];

  v294[4] = *(double *)MEMORY[0x24BDAC8D0];
  v17 = a4 != 0;
  v246 = a8;
  v247 = a4;
  context = (void *)MEMORY[0x23B83EC40]();
  v18 = a6;
  v19 = a6 != 0;
  v20 = 0xAAAAAAAAAAAAAAABLL * ((a1[4] - a1[3]) >> 2);
  v244 = a1;
  v21 = a1[1] - *a1;
  if ((_DWORD)v20)
    _ZF = -1431655765 * (v21 >> 2) == 0;
  else
    _ZF = 1;
  if (!_ZF && (v247 | v246 | v18) != 0)
  {
    v239 = a7;
    v241 = a2;
    v242 = a2[26];
    v286 = 0;
    v285 = 0;
    v25 = sub_2396BD088(a9, a10, &v286, &v285);
    v26 = v286;
    v27 = v285;
    if ((v25 & 1) == 0)
    {
      v29 = 0;
      v24 = 0;
LABEL_212:

      goto LABEL_213;
    }
    v240 = v18;
    v236 = a5;
    v238 = v27;
    if (a12)
    {
      v28 = a11 + 1;
      std::mutex::lock(a11 + 1);
    }
    else
    {
      v28 = 0;
    }
    v30 = a2[1].i32[1];
    v280 = 0;
    v283 = 0;
    v281 = v246 != 0;
    BYTE1(v283) = v17;
    v282 = v19;
    v284 = v30;
    v279 = 0;
    v31 = sub_2396BD16C();
    v32 = 0;
    if (!v31)
    {
      v29 = 0;
      v24 = 0;
LABEL_209:

      if (a12)
        std::mutex::unlock(v28);
      v27 = v238;
      goto LABEL_212;
    }
    v237 = v32;
    v234 = v28;
    v235 = v26;
    v33 = operator new(4uLL);
    v34 = (3 * v20);
    *v33 = 12 * v20;
    v35 = operator new(8uLL);
    *v35 = *v33;
    v35[1] = v21;
    operator delete(v33);
    v36 = operator new(0x10uLL);
    v37 = v36;
    v230 = v34;
    v38 = v242.i32[1] * v242.i32[0];
    v39 = 4 * v242.i32[1] * v242.i32[0];
    if (v247)
      v40 = 4 * v38;
    else
      v40 = 0;
    *((_DWORD *)v36 + 2) = v40;
    *v36 = *(_QWORD *)v35;
    operator delete(v35);
    if (v240)
      v41 = 4 * v38;
    else
      v41 = 0;
    v37[3] = v41;
    v42 = (unsigned int *)operator new(0x20uLL);
    v43 = v42;
    v228 = (v242.i32[1] * v242.i32[0]);
    if (v246)
      v44 = v242.i32[1] * v242.i32[0];
    else
      v44 = 0;
    v45 = v37[2];
    v42[3] = v37[3];
    v42[4] = v44;
    v42[2] = v45;
    *(_QWORD *)v42 = *(_QWORD *)v37;
    operator delete(v37);
    v43[5] = v39;
    v46 = *v43;
    v47 = v43[1];
    v49 = v43[2];
    v48 = v43[3];
    v233 = v43;
    v50 = v43[4];
    objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = objc_msgSend(v51, "physicalMemory");

    if (v46 + v47 + v49 + v48 + v50 + (unint64_t)v39 > v52)
    {
      v29 = 0;
      v24 = 0;
      v28 = v234;
      v26 = v235;
      v32 = v237;
LABEL_208:
      operator delete(v233);
      goto LABEL_209;
    }
    v278 = 0;
    v277 = 0;
    v276 = 0;
    v275 = 0;
    v28 = v234;
    v26 = v235;
    v32 = v237;
    v53 = operator new(0x30uLL);
    v274 = v53 + 6;
    *v53 = 4 * v34;
    v53[1] = 0;
    v53[2] = &v277;
    v53[3] = v21 & 0x3FFFFFFFCLL;
    v53[4] = 0;
    v53[5] = &v275;
    v272 = v53;
    v273 = v53 + 6;
    v271 = 0;
    v270 = 0;
    v269 = 0;
    v268 = 0;
    v267 = 0;
    v266 = 0;
    v265 = 0;
    v264 = 0;
    v262 = 0;
    v261 = 0;
    v263 = 0;
    if (v247)
    {
      v54 = (char *)operator new(0x38uLL);
      v55 = (uint32x2_t *)(v54 + 56);
      *(uint32x2_t *)v54 = v242;
      *((_DWORD *)v54 + 2) = 1;
      *((_OWORD *)v54 + 1) = xmmword_239ECAFB0;
      *((_OWORD *)v54 + 2) = xmmword_239ECAF70;
      *((_QWORD *)v54 + 6) = &v270;
      v263 = (uint32x2_t *)(v54 + 56);
      v261 = v54;
      v262 = (uint32x2_t *)(v54 + 56);
    }
    else
    {
      v54 = 0;
      v55 = 0;
    }
    if (v240)
    {
      v56 = 0x6DB6DB6DB6DB6DB7 * (((char *)v55 - v54) >> 3);
      v57 = v56 + 1;
      if (v56 + 1 > 0x492492492492492)
        sub_2394189F8();
      if (0xDB6DB6DB6DB6DB6ELL * (((char *)v55 - v54) >> 3) > v57)
        v57 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v55 - v54) >> 3);
      if (v56 >= 0x249249249249249)
        v58 = 0x492492492492492;
      else
        v58 = v57;
      if (v58)
      {
        if (v58 > 0x492492492492492)
          sub_239418A80();
        v59 = (char *)operator new(56 * v58);
      }
      else
      {
        v59 = 0;
      }
      v61 = (uint32x2_t *)&v59[8 * (((char *)v55 - v54) >> 3)];
      v62 = &v59[56 * v58];
      *v61 = v242;
      v61[1].i32[0] = 1;
      *(_OWORD *)v61[2].i8 = xmmword_239ECAF80;
      *(_OWORD *)v61[4].i8 = xmmword_239ECAF70;
      v61[6] = (uint32x2_t)&v266;
      v60 = v61 + 7;
      v63 = v61;
      if (v55 != (uint32x2_t *)v54)
      {
        v64 = &v59[8 * (((char *)v55 - v54) >> 3)];
        do
        {
          v63 = (uint32x2_t *)(v64 - 56);
          v65 = *(_OWORD *)v55[-5].i8;
          v66 = *(_OWORD *)v55[-3].i8;
          v67 = v55[-1];
          *(_OWORD *)(v64 - 56) = *(_OWORD *)v55[-7].i8;
          *(_OWORD *)(v64 - 40) = v65;
          *(_OWORD *)(v64 - 24) = v66;
          *((uint32x2_t *)v64 - 1) = v67;
          v55 -= 7;
          v64 -= 56;
        }
        while (v55 != (uint32x2_t *)v54);
      }
      v261 = v63;
      v262 = v61 + 7;
      v263 = (uint32x2_t *)&v59[56 * v58];
      v32 = v237;
      if (v54)
      {
        operator delete(v54);
        v62 = (char *)v263;
      }
      v262 = v61 + 7;
      v55 = (uint32x2_t *)v62;
      if (v60 < (uint32x2_t *)v62)
      {
        v61[7] = v242;
        v61[8].i32[0] = 1;
        *(_OWORD *)v61[9].i8 = xmmword_239ECAF90;
        *(_OWORD *)v61[11].i8 = xmmword_239ECAFA0;
        v61[13] = (uint32x2_t)&v268;
        v68 = v61 + 14;
        goto LABEL_65;
      }
    }
    else
    {
      v60 = v55;
    }
    v69 = (uint32x2_t *)v261;
    v70 = 0x6DB6DB6DB6DB6DB7 * (((char *)v60 - (_BYTE *)v261) >> 3) + 1;
    if (v70 > 0x492492492492492)
      sub_2394189F8();
    if (0xDB6DB6DB6DB6DB6ELL * (((char *)v55 - (_BYTE *)v261) >> 3) > v70)
      v70 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v55 - (_BYTE *)v261) >> 3);
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v55 - (_BYTE *)v261) >> 3)) >= 0x249249249249249)
      v71 = 0x492492492492492;
    else
      v71 = v70;
    if (v71)
    {
      if (v71 > 0x492492492492492)
        sub_239418A80();
      v72 = (char *)operator new(56 * v71);
    }
    else
    {
      v72 = 0;
    }
    v73 = (uint32x2_t *)&v72[8 * (((char *)v60 - (_BYTE *)v261) >> 3)];
    *v73 = v242;
    v73[1].i32[0] = 1;
    *(_OWORD *)v73[2].i8 = xmmword_239ECAF90;
    *(_OWORD *)v73[4].i8 = xmmword_239ECAFA0;
    v73[6] = (uint32x2_t)&v268;
    v68 = v73 + 7;
    if (v60 != v69)
    {
      do
      {
        v74 = *(_OWORD *)v60[-7].i8;
        v75 = *(_OWORD *)v60[-5].i8;
        v76 = *(_OWORD *)v60[-3].i8;
        v73[-1] = v60[-1];
        *(_OWORD *)v73[-3].i8 = v76;
        *(_OWORD *)v73[-5].i8 = v75;
        *(_OWORD *)v73[-7].i8 = v74;
        v73 -= 7;
        v60 -= 7;
      }
      while (v60 != v69);
      v60 = v69;
    }
    v261 = v73;
    v262 = v68;
    v263 = (uint32x2_t *)&v72[56 * v71];
    if (v60)
      operator delete(v60);
LABEL_65:
    v262 = v68;
    if (!v246)
      goto LABEL_85;
    if (v68 >= v263)
    {
      v78 = (uint32x2_t *)v261;
      v79 = 0x6DB6DB6DB6DB6DB7 * (((char *)v68 - (_BYTE *)v261) >> 3) + 1;
      if (v79 > 0x492492492492492)
        sub_2394189F8();
      if (0xDB6DB6DB6DB6DB6ELL * (((char *)v263 - (_BYTE *)v261) >> 3) > v79)
        v79 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v263 - (_BYTE *)v261) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v263 - (_BYTE *)v261) >> 3)) >= 0x249249249249249)
        v80 = 0x492492492492492;
      else
        v80 = v79;
      if (v80)
      {
        if (v80 > 0x492492492492492)
          sub_239418A80();
        v81 = (char *)operator new(56 * v80);
      }
      else
      {
        v81 = 0;
      }
      v82 = (uint32x2_t *)&v81[8 * (((char *)v68 - (_BYTE *)v261) >> 3)];
      *v82 = v242;
      v82[1].i32[0] = 1;
      *(_OWORD *)v82[2].i8 = xmmword_239ECAF60;
      *(_OWORD *)v82[4].i8 = xmmword_239ECAF70;
      v82[6] = (uint32x2_t)&v264;
      v77 = v82 + 7;
      if (v68 == v78)
      {
        v261 = v82;
        v262 = v82 + 7;
        v78 = v68;
        v263 = (uint32x2_t *)&v81[56 * v80];
      }
      else
      {
        do
        {
          *(_OWORD *)v82[-7].i8 = *(_OWORD *)v68[-7].i8;
          *(_OWORD *)v82[-5].i8 = *(_OWORD *)v68[-5].i8;
          *(_OWORD *)v82[-3].i8 = *(_OWORD *)v68[-3].i8;
          v82[-1] = v68[-1];
          v82 -= 7;
          v68 -= 7;
        }
        while (v68 != v78);
        v261 = v82;
        v262 = v77;
        v263 = (uint32x2_t *)&v81[56 * v80];
        if (!v78)
          goto LABEL_84;
      }
      operator delete(v78);
    }
    else
    {
      *v68 = v242;
      v68[1].i32[0] = 1;
      *(_OWORD *)v68[2].i8 = xmmword_239ECAF60;
      *(_OWORD *)v68[4].i8 = xmmword_239ECAF70;
      v68[6] = (uint32x2_t)&v264;
      v77 = v68 + 7;
    }
LABEL_84:
    v262 = v77;
LABEL_85:
    if (a12)
    {
      __p[1] = 0;
      __p[0] = 0;
      v288.i64[0] = 0;
      sub_2397A69A4(a11, (uint64_t *)&v272, (void ***)__p);
      v83 = (char *)__p[0];
      if (__p[0])
      {
        v84 = (char *)__p[1];
        v85 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            v86 = (void *)*((_QWORD *)v84 - 1);
            v84 -= 8;

          }
          while (v84 != v83);
          v85 = __p[0];
        }
        __p[1] = v83;
        operator delete(v85);
      }
      sub_2397A73C4((uint64_t)a11, (unsigned int **)&v261);
      sub_2397A642C(a11, (uint64_t *)&v272, (uint64_t *)&v261);
    }
    else
    {
      sub_2397A9468(&v252, v235);
      sub_23946D5E0(__p, (uint64_t)&v252);
      v289 = 0u;
      v290 = 0u;
      v288 = 0u;
      v291 = 850045863;
      v292 = 0u;
      v293 = 0u;
      memset(v294, 0, 25);
      v255[0] = 0;
      v255[1] = 0;
      v256.f64[0] = 0.0;
      sub_2397A69A4(__p, (uint64_t *)&v272, (void ***)v255);
      v130 = (char *)v255[0];
      if (v255[0])
      {
        v131 = (char *)v255[1];
        v132 = v255[0];
        if (v255[1] != v255[0])
        {
          do
          {
            v133 = (void *)*((_QWORD *)v131 - 1);
            v131 -= 8;

          }
          while (v131 != v130);
          v132 = v255[0];
        }
        v255[1] = v130;
        operator delete(v132);
      }
      sub_2397A73C4((uint64_t)__p, (unsigned int **)&v261);
      sub_239420D98((uint64_t)__p);
      v134 = v253;
      if (v253)
      {
        p_shared_owners = (unint64_t *)&v253->__shared_owners_;
        do
          v136 = __ldaxr(p_shared_owners);
        while (__stlxr(v136 - 1, p_shared_owners));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
    }
    sub_2397A9494((uint64_t)&v277);
    v87 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v88 = objc_msgSend(v87, "contents");

    sub_2397A9494((uint64_t)&v275);
    v89 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v90 = objc_msgSend(v89, "contents");

    v92 = (char *)v244[3];
    v91 = (char *)v244[4];
    if (v92 != v91)
    {
      v93 = v91 - v92 - 12;
      if (v93 < 0x84
        || ((v94 = v93 / 0xC, v95 = 12 * v94 + 12, v88 < (unint64_t)&v92[v95])
          ? (_CF = (unint64_t)v92 >= v88 + v95)
          : (_CF = 1),
            !_CF))
      {
        v98 = 0;
        v99 = (char *)v244[3];
LABEL_104:
        v104 = (_DWORD *)(v88 + 12 * v98 + 8);
        do
        {
          *(v104 - 2) = *(_DWORD *)v99;
          *(v104 - 1) = *((_DWORD *)v99 + 1);
          *v104 = *((_DWORD *)v99 + 2);
          v104 += 3;
          v99 += 12;
        }
        while (v99 != v91);
        goto LABEL_106;
      }
      v97 = v94 + 1;
      v98 = (v94 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v99 = &v92[12 * v98];
      v100 = v98;
      v101 = (_OWORD *)v88;
      do
      {
        v102 = *(_OWORD *)v92;
        v103 = *((_OWORD *)v92 + 2);
        v101[1] = *((_OWORD *)v92 + 1);
        v101[2] = v103;
        *v101 = v102;
        v101 += 3;
        v92 += 48;
        v100 -= 4;
      }
      while (v100);
      if (v97 != v98)
        goto LABEL_104;
    }
LABEL_106:
    v106 = (char *)*v244;
    v105 = (char *)v244[1];
    if ((char *)*v244 == v105)
      goto LABEL_120;
    v107 = v105 - v106 - 12;
    if (v107 >= 0x84
      && ((v108 = v107 / 0xC, v109 = 12 * v108 + 12, v90 < (unint64_t)&v106[v109])
        ? (v110 = (unint64_t)v106 >= v90 + v109)
        : (v110 = 1),
          v110))
    {
      v111 = v108 + 1;
      v112 = (v108 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v113 = &v106[12 * v112];
      v114 = v112;
      v115 = (_OWORD *)v90;
      do
      {
        v116 = *(_OWORD *)v106;
        v117 = *((_OWORD *)v106 + 2);
        v115[1] = *((_OWORD *)v106 + 1);
        v115[2] = v117;
        *v115 = v116;
        v115 += 3;
        v106 += 48;
        v114 -= 4;
      }
      while (v114);
      if (v111 == v112)
      {
LABEL_120:
        v119 = (void *)objc_opt_new();
        objc_msgSend(v119, "setDepthCompareFunction:", 1);
        objc_msgSend(v119, "setDepthWriteEnabled:", 1);
        v232 = (void *)objc_msgSend(v235, "newDepthStencilStateWithDescriptor:", v119);

        v120 = (void *)objc_msgSend(v32, "newFunctionWithName:", CFSTR("ProjectMeshVS"));
        v121 = (void *)objc_msgSend(v32, "newFunctionWithName:", CFSTR("ProjectMeshFS"));
        v122 = (void *)objc_opt_new();
        objc_msgSend(v122, "setVertexFunction:", v120);
        objc_msgSend(v122, "setFragmentFunction:", v121);
        if (v247)
        {
          objc_msgSend(v122, "colorAttachments", v228);
          v123 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v123, "objectAtIndexedSubscript:", 0);
          v124 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v124, "setPixelFormat:", 55);

        }
        if (v246)
        {
          objc_msgSend(v122, "colorAttachments");
          v125 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v125, "objectAtIndexedSubscript:", 1);
          v126 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v126, "setPixelFormat:", 13);

        }
        if (v240)
        {
          objc_msgSend(v122, "colorAttachments");
          v127 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v127, "objectAtIndexedSubscript:", 2);
          v128 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v128, "setPixelFormat:", 53);

        }
        objc_msgSend(v122, "setDepthAttachmentPixelFormat:", 252, v228);
        v260 = 0;
        v129 = (void *)objc_msgSend(v235, "newRenderPipelineStateWithDescriptor:error:", v122, &v260);
        v29 = v260;

        if (v29)
        {
          v24 = 0;
LABEL_174:

          if (v261)
          {
            v262 = (uint32x2_t *)v261;
            operator delete(v261);
          }
          v209 = v265;
          if (v265)
          {
            v210 = (unint64_t *)&v265->__shared_owners_;
            do
              v211 = __ldaxr(v210);
            while (__stlxr(v211 - 1, v210));
            if (!v211)
            {
              ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
              std::__shared_weak_count::__release_weak(v209);
            }
          }
          v212 = v267;
          if (v267)
          {
            v213 = (unint64_t *)&v267->__shared_owners_;
            do
              v214 = __ldaxr(v213);
            while (__stlxr(v214 - 1, v213));
            if (!v214)
            {
              ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
              std::__shared_weak_count::__release_weak(v212);
            }
          }
          v215 = v269;
          if (v269)
          {
            v216 = (unint64_t *)&v269->__shared_owners_;
            do
              v217 = __ldaxr(v216);
            while (__stlxr(v217 - 1, v216));
            if (!v217)
            {
              ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
              std::__shared_weak_count::__release_weak(v215);
            }
          }
          v218 = v271;
          if (v271)
          {
            v219 = (unint64_t *)&v271->__shared_owners_;
            do
              v220 = __ldaxr(v219);
            while (__stlxr(v220 - 1, v219));
            if (!v220)
            {
              ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
              std::__shared_weak_count::__release_weak(v218);
            }
          }
          if (v272)
          {
            v273 = v272;
            operator delete(v272);
          }
          v221 = v276;
          if (v276)
          {
            v222 = (unint64_t *)&v276->__shared_owners_;
            do
              v223 = __ldaxr(v222);
            while (__stlxr(v223 - 1, v222));
            if (!v223)
            {
              ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
              std::__shared_weak_count::__release_weak(v221);
            }
          }
          v224 = v278;
          if (v278)
          {
            v225 = (unint64_t *)&v278->__shared_owners_;
            do
              v226 = __ldaxr(v225);
            while (__stlxr(v226 - 1, v225));
            if (!v226)
            {
              ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
              std::__shared_weak_count::__release_weak(v224);
            }
          }
          goto LABEL_208;
        }
        if (v241[27].i8[0])
        {
          v259 = 0;
          sub_2396BD4A8(v235, &v259);
          v137 = v259;
        }
        else
        {
          v137 = 0;
        }
        objc_msgSend(v238, "commandBuffer");
        v231 = (void *)objc_claimAutoreleasedReturnValue();
        v257 = 0u;
        v258 = 0u;
        *(_OWORD *)v255 = 0u;
        v256 = 0u;
        __p[0] = (void *)v242;
        v144 = sub_2396BD70C(v244, (float64x2_t *)&v241[2], (unsigned int *)__p, 0.05, v138, v139, v140, v141, v142, v143);
        v146 = v145;
        v245 = *(float64x2_t *)v241[2].i8;
        v148 = *(double *)&v241[4];
        v147 = *(double *)&v241[5];
        sub_239512A78((uint64_t)&v241[2], (float64x2_t *)__p);
        v149 = vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_f32(vcvt_f32_u32(v242)), v245), v144));
        v150.f64[0] = v149.f32[0] + -v148 / v245.f64[0] * v144;
        v150.f64[1] = v147 / v245.f64[1] * v144;
        *(float32x2_t *)&v150.f64[0] = vcvt_f32_f64(v150);
        v151 = vsub_f32(*(float32x2_t *)&v150.f64[0], v149);
        v152 = vsub_f32(*(float32x2_t *)&v150.f64[0], v151);
        *(float32x2_t *)&v150.f64[0] = vdiv_f32(vadd_f32(v151, *(float32x2_t *)&v150.f64[0]), v152);
        __asm { FMOV            V1.2S, #-1.0 }
        HIDWORD(v150.f64[1]) = HIDWORD(_D1);
        *(float *)&v150.f64[1] = (float)-v146 / (float)(v146 - v144);
        v156.i64[0] = 0;
        v156.i32[3] = 0;
        v156.f32[2] = (float)-(float)(v146 * v144) / (float)(v146 - v144);
        LODWORD(v157) = 0;
        v158 = *(double *)__p;
        v159 = *(double *)&__p[1];
        v160 = *(double *)v288.i64;
        v161 = *(double *)&v288.i64[1];
        v162 = *(double *)v289.i64;
        v163 = *(double *)&v289.i64[1];
        v164 = *(double *)v290.i64;
        v165 = *(double *)&v290.i64[1];
        v166 = *(double *)&v291;
        v167 = *(double *)&v292;
        v168 = *((double *)&v292 + 1);
        v169 = *(double *)&v293;
        v170 = *((double *)&v293 + 1);
        v171 = v294[0];
        v172 = v294[1];
        v173 = v294[2];
        *(float *)&v174 = (float)(v144 + v144) / v152.f32[0];
        *((float *)&v157 + 1) = (float)(v144 + v144) / v152.f32[1];
        v175 = (float64x2_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v174, v158), (float32x4_t)v157, v159), (float32x4_t)v150, v160), v156, v161);
        v176 = (float64x2_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v174, v162), (float32x4_t)v157, v163), (float32x4_t)v150, v164), v156, v165);
        v177 = (float64x2_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v174, v166), (float32x4_t)v157, v167), (float32x4_t)v150, v168), v156, v169);
        *(float64x2_t *)v255 = v175;
        v256 = v176;
        v257 = v177;
        v258 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v174, v170), (float32x4_t)v157, v171), (float32x4_t)v150, v172), v156, v173);
        *(uint32x2_t *)&v175.f64[0] = v241[12];
        *(uint32x2_t *)&v176.f64[0] = v241[16];
        *(uint32x2_t *)&v177.f64[0] = v241[20];
        __asm { FMOV            V7.2D, #1.0 }
        *(uint32x2_t *)&_Q7.f64[0] = v241[24];
        v179 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v241[10].i8), v175);
        v180 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v241[14].i8), v176);
        v181 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v241[18].i8), v177);
        v182 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v241[22].i8), _Q7);
        *(float32x4_t *)__p = v179;
        v288 = v180;
        v289 = v181;
        v290 = v182;
        v254 = v242;
        v183 = objc_alloc_init(MEMORY[0x24BDDD690]);
        v184 = v183;
        if (v247)
        {
          objc_msgSend(v183, "colorAttachments");
          v185 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v185, "objectAtIndexedSubscript:", 0);
          v186 = (void *)objc_claimAutoreleasedReturnValue();

          sub_2397A9494((uint64_t)&v270);
          v187 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v186, "setTexture:", v187);

          objc_msgSend(v186, "setLoadAction:", 2);
          objc_msgSend(v186, "setStoreAction:", 1);
          objc_msgSend(v186, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

        }
        if (v246)
        {
          objc_msgSend(v184, "colorAttachments");
          v188 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v188, "objectAtIndexedSubscript:", 1);
          v189 = (void *)objc_claimAutoreleasedReturnValue();

          sub_2397A9494((uint64_t)&v264);
          v190 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v189, "setTexture:", v190);

          objc_msgSend(v189, "setLoadAction:", 2);
          objc_msgSend(v189, "setStoreAction:", 1);
          objc_msgSend(v189, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

        }
        if (v240)
        {
          objc_msgSend(v184, "colorAttachments");
          v191 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v191, "objectAtIndexedSubscript:", 2);
          v192 = (void *)objc_claimAutoreleasedReturnValue();

          sub_2397A9494((uint64_t)&v266);
          v193 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v192, "setTexture:", v193);

          objc_msgSend(v192, "setLoadAction:", 2);
          objc_msgSend(v192, "setStoreAction:", 1);
          objc_msgSend(v192, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

        }
        objc_msgSend(v184, "depthAttachment");
        v194 = (void *)objc_claimAutoreleasedReturnValue();
        sub_2397A9494((uint64_t)&v268);
        v195 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v194, "setTexture:", v195);

        objc_msgSend(v194, "setLoadAction:", 2);
        objc_msgSend(v194, "setStoreAction:", 1);

        objc_msgSend(v184, "setRenderTargetArrayLength:", 1);
        objc_msgSend(v184, "setRenderTargetWidth:", v242.u32[0]);
        objc_msgSend(v184, "setRenderTargetHeight:", v242.u32[1]);
        objc_msgSend(v231, "renderCommandEncoderWithDescriptor:", v184);
        v196 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v196, "setRenderPipelineState:", v129);
        v197 = v241->i32[1];
        if (v197 == 2)
          v198 = 2;
        else
          v198 = v197 == 1;
        objc_msgSend(v196, "setCullMode:", v198);
        objc_msgSend(v196, "setFrontFacingWinding:", 1);
        objc_msgSend(v196, "setDepthStencilState:", v232);
        sub_2397A9494((uint64_t)&v275);
        v199 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v196, "setVertexBuffer:offset:atIndex:", v199, 0, 0);

        objc_msgSend(v196, "setVertexBytes:length:atIndex:", v255, 64, 1);
        objc_msgSend(v196, "setVertexBytes:length:atIndex:", __p, 64, 2);
        objc_msgSend(v196, "setFragmentBytes:length:atIndex:", &v254, 8, 0);
        sub_2397A9494((uint64_t)&v277);
        v200 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v196, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, v230, 1, v200, 0);

        objc_msgSend(v196, "endEncoding");
        sub_23971DB68();
        objc_msgSend(v231, "commit");
        objc_msgSend(v231, "waitUntilCompleted");
        objc_msgSend(v231, "error");
        v201 = (id)objc_claimAutoreleasedReturnValue();
        v202 = v201;
        if (v201 && objc_msgSend(v201, "code"))
        {

          v24 = 0;
        }
        else
        {

          if (v241[27].i8[0])
            objc_msgSend(v137, "endScope");
          v203 = 4 * v242.u32[0];
          if (v247)
          {
            if (*(_QWORD *)(a3 + 64) != *(_QWORD *)&v242)
            {
              v251 = v242;
              sub_2398D8228(4);
              sub_23953A5B0(a3, (uint64_t)&v252);
              sub_239422DD0((uint64_t)&v252);
            }
            sub_2397A9494((uint64_t)&v270);
            v204 = (void *)objc_claimAutoreleasedReturnValue();
            if (*(_BYTE *)(a3 + 80) && *(_QWORD *)(a3 + 32))
              (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "unknown location");
            v205 = *(_QWORD *)(a3 + 32);
            memset(v250, 0, 24);
            v250[3] = v242.u32[0];
            v250[4] = v242.u32[1];
            v250[5] = 1;
            objc_msgSend(v204, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v205, v203, v250, 0);

          }
          if (v246)
          {
            if (*(_QWORD *)(v239 + 64) != *(_QWORD *)&v242)
            {
              v251 = v242;
              sub_2398D8228(1);
              sub_239422CF0(v239, (uint64_t)&v252);
              sub_239422DD0((uint64_t)&v252);
            }
            sub_2397A9494((uint64_t)&v264);
            v206 = (void *)objc_claimAutoreleasedReturnValue();
            if (*(_BYTE *)(v239 + 80) && *(_QWORD *)(v239 + 32))
              (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v239 + 8) + 88))(*(_QWORD *)(v239 + 8), 1, "unknown location");
            v207 = *(_QWORD *)(v239 + 32);
            memset(&v249[6], 0, 24);
            v249[9] = v242.u32[0];
            v249[10] = v242.u32[1];
            v249[11] = 1;
            objc_msgSend(v206, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v207);

          }
          if (!v240)
          {
            v24 = 1;
            goto LABEL_173;
          }
          sub_2395AF0B8(v236, v229);
          sub_2397A9494((uint64_t)&v266);
          v202 = (void *)objc_claimAutoreleasedReturnValue();
          v208 = *v236;
          memset(v249, 0, 24);
          v249[3] = v242.u32[0];
          v24 = 1;
          v249[4] = v242.u32[1];
          v249[5] = 1;
          objc_msgSend(v202, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v208, v203, v249, 0);
        }

LABEL_173:
        goto LABEL_174;
      }
    }
    else
    {
      v112 = 0;
      v113 = (char *)*v244;
    }
    v118 = (_DWORD *)(v90 + 12 * v112 + 8);
    do
    {
      *(v118 - 2) = *(_DWORD *)v113;
      *(v118 - 1) = *((_DWORD *)v113 + 1);
      *v118 = *((_DWORD *)v113 + 2);
      v118 += 3;
      v113 += 12;
    }
    while (v113 != v105);
    goto LABEL_120;
  }
  v24 = 0;
LABEL_213:
  objc_autoreleasePoolPop(context);
  return v24;
}

void sub_2396BF2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, std::mutex *a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  void *v54;
  void *v55;
  void *v56;
  void *v58;
  void *v59;

  sub_239422DD0((uint64_t)&a54);

  v58 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v58;
    operator delete(v58);
  }
  sub_239416DA0((uint64_t)&STACK[0x220]);
  sub_239416DA0((uint64_t)&STACK[0x230]);
  sub_239416DA0((uint64_t)&STACK[0x240]);
  sub_239416DA0((uint64_t)&STACK[0x250]);
  v59 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v59;
    operator delete(v59);
  }
  sub_239416DA0((uint64_t)&STACK[0x278]);
  sub_239416DA0((uint64_t)&STACK[0x288]);
  if (a15)
    operator delete(a15);

  if (a23)
    std::mutex::unlock(a16);

  _Unwind_Resume(a1);
}

int8x8_t sub_2396BF664(unsigned __int8 *a1)
{
  int8x8_t *v1;
  unsigned int v2;
  int8x16_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int8x16_t v6;
  int8x8_t result;

  v1 = (int8x8_t *)(a1 + 16161);
  v2 = *a1;
  v3 = vdupq_n_s8(v2);
  v4 = -16160;
  do
  {
    v5 = &a1[v4];
    v6 = veorq_s8(v3, *(int8x16_t *)&a1[v4 + 16177]);
    *(int8x16_t *)(v5 + 16161) = veorq_s8(v3, *(int8x16_t *)&a1[v4 + 16161]);
    *(int8x16_t *)(v5 + 16177) = v6;
    v4 += 32;
  }
  while (v4);
  result = veor_s8(vdup_n_s8(v2), *v1);
  *v1 = result;
  a1[16169] ^= v2;
  a1[16170] ^= v2;
  a1[16171] ^= v2;
  a1[16172] ^= v2;
  a1[16173] ^= v2;
  a1[16174] ^= v2;
  a1[16175] = 0;
  return result;
}

void sub_2396BF704(_OWORD *a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *p_shared_owners;
  uint64_t v18;
  int v19;
  unint64_t v20;
  _BYTE v21[20];
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[32];
  _OWORD v37[5];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v41 = 0uLL;
  *(_OWORD *)v21 = 0u;
  v23 = 0;
  v24 = 0u;
  v35 = 0u;
  v32 = 0x10000;
  *(_QWORD *)&v21[12] = 0x100000003;
  v22 = 0x404000003C23D70ALL;
  LOBYTE(v24) = 1;
  *(_QWORD *)((char *)&v24 + 4) = 0x600000008;
  v25 = xmmword_239EC66B0;
  v26 = 256;
  v27 = 15;
  v28 = xmmword_239EC66C0;
  v29 = 0xBFF0000000000000;
  v30 = 2139095039;
  v31 = 0x1EFFFFFFFFLL;
  v33 = 0;
  v34 = 0uLL;
  LOBYTE(v35) = 1;
  BYTE8(v35) = 1;
  v4 = v21;
  if (a2)
    v4 = a1;
  v5 = v4[1];
  *(_OWORD *)v36 = *v4;
  *(_OWORD *)&v36[16] = v5;
  v6 = v4[2];
  v7 = v4[3];
  v8 = v4[5];
  v37[2] = v4[4];
  v37[3] = v8;
  v37[0] = v6;
  v37[1] = v7;
  v9 = v4[6];
  v10 = v4[7];
  v11 = v4[9];
  v39 = v4[8];
  v40 = v11;
  v37[4] = v9;
  v38 = v10;
  if (*(_DWORD *)&v36[4] == 1)
  {
    v12 = (std::__shared_weak_count *)operator new(0x180uLL);
    v12->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADFB68;
    v18 = sub_2395C7D88((uint64_t)&v12[1], (uint64_t)v37, 0, 1, 0);
    v12[14].__shared_weak_owners_ = *(_QWORD *)&v36[12];
    v19 = *(_DWORD *)&v36[20];
    LODWORD(v12[15].__vftable) = *(_DWORD *)&v36[24];
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250ADFBA0;
    v12[14].__vftable = 0;
    v12[14].__shared_owners_ = 0;
    v12[13].__shared_weak_owners_ = 0;
    HIDWORD(v12[15].__vftable) = v19;
    v12[15].__shared_owners_ = 0;
    v12[15].__shared_weak_owners_ = 0;
    LOBYTE(v12[6].__shared_weak_owners_) = BYTE6(v38);
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    *(_QWORD *)&v41 = v18;
    *((_QWORD *)&v41 + 1) = v12;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
  }
  else
  {
    if (*(_DWORD *)&v36[4])
    {
      *a3 = 0;
      a3[1] = 0;
      return;
    }
    v12 = (std::__shared_weak_count *)operator new(0x148uLL);
    v12->__shared_owners_ = 0;
    v13 = (unint64_t *)&v12->__shared_owners_;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADF858;
    v14 = sub_2395BCFD0((uint64_t)&v12[1], (uint64_t)v37, 0, 1, 1);
    LOBYTE(v12[6].__shared_weak_owners_) = BYTE6(v38);
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    *(_QWORD *)&v41 = v14;
    *((_QWORD *)&v41 + 1) = v12;
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 - 1, v13));
  }
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(_OWORD *)a3 = v41;
}

void sub_2396BF950(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  sub_239416DA0(v2 - 48);
  _Unwind_Resume(a1);
}

void sub_2396BF988(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416DA0(v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_2396BF99C@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, float64x2_t *a4@<X3>, uint64_t a5@<X8>)
{
  float64x2_t v5;
  __int128 v11;
  float64x2_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  double v39;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  unsigned int v44;
  float64x2_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  float64x2_t v52;
  float64x2_t v54;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  BOOL v63;
  uint64_t result;
  uint64_t v69;

  *(_QWORD *)&v11 = 0xFFFFFFFFLL;
  *((_QWORD *)&v11 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)a5 = v11;
  sub_2395647D4(a3, &v69);
  v13 = *(_DWORD *)(a3 + 68);
  if (v13)
  {
    v14 = *(unsigned int *)(a3 + 64);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = *(_DWORD *)(a3 + 72);
      v20 = *(_DWORD *)(a3 + 76);
      v21 = *(_QWORD *)(a3 + 56);
      v23 = *a2;
      v22 = a2[1];
      v24 = *(double *)(a1 + 16);
      v25 = *(double *)(a1 + 24);
      v26 = *(double *)a1;
      v27 = *(double *)(a1 + 8);
      v12.f64[0] = *(float64_t *)(a1 + 176);
      v28 = *(float64x2_t *)(a1 + 160);
      v30 = a4[8];
      v29 = a4[9];
      v32 = a4[10];
      v31 = a4[11];
      v34 = a4[12];
      v33 = a4[13];
      v36 = a4[14];
      v35 = a4[15];
      v43.f64[0] = *(float64_t *)(a1 + 80);
      v37 = *(int64x2_t *)(a1 + 64);
      v38 = *(int64x2_t *)(a1 + 96);
      v39 = *(double *)(a1 + 144);
      _D24 = vextq_s8(*(int8x16_t *)(a1 + 128), *(int8x16_t *)(a1 + 128), 8uLL).u64[0];
      v41 = (float64x2_t)vzip1q_s64(v37, v38);
      v42 = (float64x2_t)vzip2q_s64(v37, v38);
      v43.f64[1] = *(float64_t *)(a1 + 112);
      v44 = -1;
      *(_QWORD *)&v28.f64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
      v45 = vnegq_f64(v28);
      v46 = -1;
      do
      {
        v47 = 0;
        v48 = v22 * v18 / v13;
        v49 = v14;
        v50 = v15;
        do
        {
          v51 = v47 / v14;
          v5.f64[0] = *(float *)(v21 + 4 * v50);
          v52.f64[0] = ((double)(v47 / v14) + 0.5 - v24) / v26;
          v52.f64[1] = ((double)v48 + 0.5 - v25) / v27;
          _Q9 = vmlaq_n_f64(v45, v52, v5.f64[0]);
          *(_QWORD *)&v52.f64[0] = *(_OWORD *)&vsubq_f64(v5, v12);
          v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v41, _Q9.f64[0]), v42, _Q9, 1), v43, v52.f64[0]);
          __asm { FMLA            D10, D24, V9.D[1] }
          v59 = vmlad_n_f64(_D10, v39, v52.f64[0]);
          v60 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v54, 1);
          v61 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v59, 0);
          v62 = vaddq_f64(v36, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, v54.f64[0]), v32, v54, 1), v34, v59));
          v63 = v62.f64[0] < -0.5 || v62.f64[0] > 0.5;
          v5 = vaddq_f64(v35, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v29, v54.f64[0]), v60, v31), v61, v33));
          if (!v63 && v62.f64[1] >= -0.5 && v62.f64[1] <= 0.5 && v5.f64[0] >= -0.5 && v5.f64[0] <= 0.5)
          {
            if (v51 < v46)
              v46 = v47 / v14;
            if (v17 <= v51)
              v17 = v47 / v14;
            *(_DWORD *)a5 = v46;
            *(_DWORD *)(a5 + 4) = v17;
            if (v48 < v44)
              v44 = v22 * v18 / v13;
            if (v16 <= v48)
              v16 = v22 * v18 / v13;
            *(_DWORD *)(a5 + 8) = v44;
            *(_DWORD *)(a5 + 12) = v16;
          }
          v47 += v23;
          v50 += v19;
          --v49;
        }
        while (v49);
        ++v18;
        v15 += v20;
      }
      while (v18 != v13);
    }
  }
  result = v69;
  v69 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2396BFBB0(unsigned int a1, unsigned int a2, int a3, _QWORD *a4)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  char *v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;

  if (a1 <= a2)
    v5 = a2;
  else
    v5 = a1;
  if (a1 >= a2)
    v6 = a2;
  else
    v6 = a1;
  v7 = *a4 + 24 * v6;
  v9 = (uint64_t **)(v7 + 8);
  v8 = *(char **)(v7 + 8);
  if (!v8)
  {
    v16 = (char *)(v7 + 8);
LABEL_26:
    v18 = v16;
    v16 = (char *)operator new(0x28uLL);
    *((_DWORD *)v16 + 7) = v5;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = v18;
    *v9 = (uint64_t *)v16;
    v19 = **(_QWORD **)v7;
    v20 = (uint64_t *)v16;
    if (v19)
    {
      *(_QWORD *)v7 = v19;
      v20 = *v9;
    }
    sub_2394213B8(*(uint64_t **)(v7 + 8), v20);
    ++*(_QWORD *)(v7 + 16);
    goto LABEL_29;
  }
  v10 = v7 + 8;
  v11 = *(_QWORD *)(v7 + 8);
  do
  {
    v12 = *(_DWORD *)(v11 + 28);
    v13 = v12 >= v5;
    if (v12 >= v5)
      v14 = (uint64_t *)v11;
    else
      v14 = (uint64_t *)(v11 + 8);
    if (v13)
      v10 = v11;
    v11 = *v14;
  }
  while (*v14);
  if ((uint64_t **)v10 == v9 || v5 < *(_DWORD *)(v10 + 28))
  {
    while (1)
    {
      while (1)
      {
        v16 = v8;
        v17 = *((_DWORD *)v8 + 7);
        if (v5 >= v17)
          break;
        v8 = *(char **)v16;
        v9 = (uint64_t **)v16;
        if (!*(_QWORD *)v16)
          goto LABEL_26;
      }
      if (v17 >= v5)
        break;
      v8 = (char *)*((_QWORD *)v16 + 1);
      if (!v8)
      {
        v9 = (uint64_t **)(v16 + 8);
        goto LABEL_26;
      }
    }
LABEL_29:
    *((_DWORD *)v16 + 8) = a3;
    *((_DWORD *)v16 + 9) = -1;
    return 1;
  }
  if (*(_DWORD *)(v10 + 36) != -1)
    return 0;
  *(_DWORD *)(v10 + 36) = a3;
  return 1;
}

uint64_t sub_2396BFD08(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t i;
  _BYTE *v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _DWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  _DWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _OWORD *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  int v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  _DWORD *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _OWORD *v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  int v100;
  _QWORD *v103;
  unsigned int *v104;

  v2 = a2;
  v4 = *a2;
  v3 = a2[1];
  if (v3 != *a2)
  {
    v5 = a2[1];
    do
    {
      v7 = *(void **)(v5 - 24);
      v5 -= 24;
      v6 = v7;
      if (v7)
      {
        *(_QWORD *)(v3 - 16) = v6;
        operator delete(v6);
      }
      v3 = v5;
    }
    while (v5 != v4);
    v3 = *v2;
  }
  v2[1] = v4;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3);
  if (v8 <= v9)
  {
    if (v8 >= v9)
    {
      v10 = v4;
    }
    else
    {
      v10 = v3 + 8 * ((uint64_t)(a1[1] - *a1) >> 2);
      if (v4 != v10)
      {
        v11 = v4;
        do
        {
          v13 = *(void **)(v11 - 24);
          v11 -= 24;
          v12 = v13;
          if (v13)
          {
            *(_QWORD *)(v4 - 16) = v12;
            operator delete(v12);
          }
          v4 = v11;
        }
        while (v11 != v10);
      }
      v2[1] = v10;
    }
  }
  else
  {
    sub_2394D951C((uint64_t)v2, v8 - v9);
    v10 = v2[1];
  }
  for (i = *v2; i != v10; i += 24)
  {
    v15 = *(_BYTE **)i;
    if (*(_QWORD *)(i + 16) - *(_QWORD *)i > 0x1FuLL)
      continue;
    v16 = *(_BYTE **)(i + 8);
    v17 = (char *)operator new(0x20uLL);
    v18 = v16 - v15;
    v19 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFFCLL];
    v20 = v19;
    if (v16 != v15)
    {
      v21 = v16 - 4 - v15;
      if (v21 >= 0x2C)
      {
        v20 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFFCLL];
        if (v16 - v17 - (v18 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
        {
          v22 = v18 >> 2;
          v23 = (v21 >> 2) + 1;
          v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
          v25 = &v16[-v24];
          v20 = &v19[-v24];
          v26 = &v17[4 * v22 - 16];
          v27 = (__int128 *)(v16 - 16);
          v28 = v23 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v29 = *v27;
            *((_OWORD *)v26 - 1) = *(v27 - 1);
            *(_OWORD *)v26 = v29;
            v26 -= 32;
            v27 -= 2;
            v28 -= 8;
          }
          while (v28);
          v16 = v25;
          if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_29;
        }
      }
      else
      {
        v20 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFFCLL];
      }
      do
      {
        v30 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v20 - 1) = v30;
        v20 -= 4;
      }
      while (v16 != v15);
    }
LABEL_29:
    *(_QWORD *)i = v20;
    *(_QWORD *)(i + 8) = v19;
    *(_QWORD *)(i + 16) = v17 + 32;
    if (v15)
      operator delete(v15);
  }
  v31 = a1[3];
  if (a1[4] != v31)
  {
    v32 = 0;
    v103 = v2;
    while (1)
    {
      v34 = (unsigned int *)(v31 + 12 * v32);
      v35 = *v2 + 24 * *v34;
      v37 = (uint64_t *)(v35 + 8);
      v36 = *(char **)(v35 + 8);
      v38 = *(_QWORD *)(v35 + 16);
      v104 = v34;
      if ((unint64_t)v36 < v38)
      {
        *(_DWORD *)v36 = v32;
        v39 = (uint64_t)(v36 + 4);
        goto LABEL_57;
      }
      v40 = *(char **)v35;
      v41 = (uint64_t)&v36[-*(_QWORD *)v35];
      v42 = v41 >> 2;
      v43 = (v41 >> 2) + 1;
      if (v43 >> 62)
        goto LABEL_102;
      v44 = v38 - (_QWORD)v40;
      if (v44 >> 1 > v43)
        v43 = v44 >> 1;
      v45 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v43;
      if (v45)
        break;
      v46 = 0;
      v47 = (_DWORD *)(4 * v42);
      *(_DWORD *)(4 * v42) = v32;
      v39 = 4 * v42 + 4;
      if (v36 != v40)
        goto LABEL_48;
LABEL_54:
      *(_QWORD *)v35 = v47;
      *v37 = v39;
      *(_QWORD *)(v35 + 16) = &v46[4 * v45];
      if (v40)
        operator delete(v40);
      v2 = v103;
      v34 = v104;
LABEL_57:
      *v37 = v39;
      v57 = *v2 + 24 * v34[1];
      v59 = (uint64_t *)(v57 + 8);
      v58 = *(char **)(v57 + 8);
      v60 = *(_QWORD *)(v57 + 16);
      if ((unint64_t)v58 < v60)
      {
        *(_DWORD *)v58 = v32;
        v61 = (uint64_t)(v58 + 4);
        goto LABEL_79;
      }
      v62 = *(char **)v57;
      v63 = (uint64_t)&v58[-*(_QWORD *)v57];
      v64 = v63 >> 2;
      v65 = (v63 >> 2) + 1;
      if (v65 >> 62)
        goto LABEL_102;
      v66 = v60 - (_QWORD)v62;
      if (v66 >> 1 > v65)
        v65 = v66 >> 1;
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
        v67 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v67 = v65;
      if (v67)
      {
        if (v67 >> 62)
          goto LABEL_103;
        v68 = operator new(4 * v67);
        v69 = &v68[4 * v64];
        *v69 = v32;
        v61 = (uint64_t)(v69 + 1);
        if (v58 == v62)
          goto LABEL_76;
LABEL_70:
        v70 = v58 - 4 - v62;
        if (v70 < 0x2C)
          goto LABEL_106;
        if ((unint64_t)(v58 - &v68[v63]) < 0x20)
          goto LABEL_106;
        v71 = (v70 >> 2) + 1;
        v72 = 4 * (v71 & 0x7FFFFFFFFFFFFFF8);
        v73 = &v58[-v72];
        v69 = (_DWORD *)((char *)v69 - v72);
        v74 = &v68[4 * v64 - 16];
        v75 = v58 - 16;
        v76 = v71 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v77 = *(_OWORD *)v75;
          *(v74 - 1) = *((_OWORD *)v75 - 1);
          *v74 = v77;
          v74 -= 2;
          v75 -= 32;
          v76 -= 8;
        }
        while (v76);
        v58 = v73;
        if (v71 != (v71 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_106:
          do
          {
            v78 = *((_DWORD *)v58 - 1);
            v58 -= 4;
            *--v69 = v78;
          }
          while (v58 != v62);
        }
        goto LABEL_76;
      }
      v68 = 0;
      v69 = (_DWORD *)(4 * v64);
      *(_DWORD *)(4 * v64) = v32;
      v61 = 4 * v64 + 4;
      if (v58 != v62)
        goto LABEL_70;
LABEL_76:
      *(_QWORD *)v57 = v69;
      *v59 = v61;
      *(_QWORD *)(v57 + 16) = &v68[4 * v67];
      if (v62)
        operator delete(v62);
      v2 = v103;
      v34 = v104;
LABEL_79:
      *v59 = v61;
      v79 = *v2 + 24 * v34[2];
      v81 = (uint64_t *)(v79 + 8);
      v80 = *(char **)(v79 + 8);
      v82 = *(_QWORD *)(v79 + 16);
      if ((unint64_t)v80 >= v82)
      {
        v83 = *(char **)v79;
        v84 = (uint64_t)&v80[-*(_QWORD *)v79];
        v85 = v84 >> 2;
        v86 = (v84 >> 2) + 1;
        if (v86 >> 62)
LABEL_102:
          sub_2394189F8();
        v87 = v82 - (_QWORD)v83;
        if (v87 >> 1 > v86)
          v86 = v87 >> 1;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
          v88 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v88 = v86;
        if (v88)
        {
          if (v88 >> 62)
LABEL_103:
            sub_239418A80();
          v89 = operator new(4 * v88);
          v90 = &v89[4 * v85];
          *v90 = v32;
          v33 = (uint64_t)(v90 + 1);
          if (v80 != v83)
          {
LABEL_89:
            v91 = v80 - 4 - v83;
            if (v91 < 0x2C)
            {
              v2 = v103;
              goto LABEL_97;
            }
            v92 = v80 - &v89[v84];
            v2 = v103;
            if (v92 < 0x20)
              goto LABEL_107;
            v93 = (v91 >> 2) + 1;
            v94 = 4 * (v93 & 0x7FFFFFFFFFFFFFF8);
            v95 = &v80[-v94];
            v90 = (_DWORD *)((char *)v90 - v94);
            v96 = &v89[4 * v85 - 16];
            v97 = v80 - 16;
            v98 = v93 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v99 = *(_OWORD *)v97;
              *(v96 - 1) = *((_OWORD *)v97 - 1);
              *v96 = v99;
              v96 -= 2;
              v97 -= 32;
              v98 -= 8;
            }
            while (v98);
            v80 = v95;
            if (v93 != (v93 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_107:
              do
              {
LABEL_97:
                v100 = *((_DWORD *)v80 - 1);
                v80 -= 4;
                *--v90 = v100;
              }
              while (v80 != v83);
            }
LABEL_98:
            *(_QWORD *)v79 = v90;
            *v81 = v33;
            *(_QWORD *)(v79 + 16) = &v89[4 * v88];
            if (v83)
              operator delete(v83);
            goto LABEL_34;
          }
        }
        else
        {
          v89 = 0;
          v90 = (_DWORD *)(4 * v85);
          *(_DWORD *)(4 * v85) = v32;
          v33 = 4 * v85 + 4;
          if (v80 != v83)
            goto LABEL_89;
        }
        v2 = v103;
        goto LABEL_98;
      }
      *(_DWORD *)v80 = v32;
      v33 = (uint64_t)(v80 + 4);
LABEL_34:
      *v81 = v33;
      ++v32;
      v31 = a1[3];
      if (v32 >= 0xAAAAAAAAAAAAAAABLL * ((a1[4] - v31) >> 2))
        return 1;
    }
    if (v45 >> 62)
      goto LABEL_103;
    v46 = operator new(4 * v45);
    v47 = &v46[4 * v42];
    *v47 = v32;
    v39 = (uint64_t)(v47 + 1);
    if (v36 == v40)
      goto LABEL_54;
LABEL_48:
    v48 = v36 - 4 - v40;
    if (v48 < 0x2C)
      goto LABEL_108;
    if ((unint64_t)(v36 - &v46[v41]) < 0x20)
      goto LABEL_108;
    v49 = (v48 >> 2) + 1;
    v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
    v51 = &v36[-v50];
    v47 = (_DWORD *)((char *)v47 - v50);
    v52 = &v46[4 * v42 - 16];
    v53 = v36 - 16;
    v54 = v49 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v55 = *(_OWORD *)v53;
      *(v52 - 1) = *((_OWORD *)v53 - 1);
      *v52 = v55;
      v52 -= 2;
      v53 -= 32;
      v54 -= 8;
    }
    while (v54);
    v36 = v51;
    if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_108:
      do
      {
        v56 = *((_DWORD *)v36 - 1);
        v36 -= 4;
        *--v47 = v56;
      }
      while (v36 != v40);
    }
    goto LABEL_54;
  }
  return 1;
}

uint64_t sub_2396C037C(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4, char a5)
{
  uint64_t *v5;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned int *v33;
  _DWORD *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  unsigned int *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  unsigned int *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  unsigned int *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _OWORD *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t *v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  _BYTE *v117;
  unsigned int *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  _OWORD *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t *v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  unsigned int *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  _OWORD *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t *v152;
  char *v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  _BYTE *v161;
  unsigned int *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  _OWORD *v168;
  char *v169;
  uint64_t v170;
  __int128 v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char **v177;
  char *v178;
  int v179;
  int v180;
  char *v181;
  int v182;
  char *v183;
  int64_t v184;
  uint64_t i;
  _BYTE *v186;
  _BYTE *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  __int128 *v198;
  uint64_t v199;
  __int128 v200;
  int v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _DWORD *v206;
  uint64_t *v207;
  uint64_t **v208;
  uint64_t **v209;
  uint64_t **v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t **v213;
  unsigned int v214;
  unsigned int v215;
  _DWORD *v216;
  uint64_t v217;
  int v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t *v221;
  char *v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  _BYTE *v234;
  _DWORD *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  _OWORD *v240;
  char *v241;
  uint64_t v242;
  __int128 v243;
  int v244;
  unint64_t v245;
  std::__shared_weak_count_vtbl *v246;
  unsigned int **v247;
  unsigned int *v248;
  char v249;
  uint64_t v250;
  unint64_t v251;
  _QWORD *v252;
  _QWORD **v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD **v256;
  unsigned int v257;
  int *v258;
  int v259;
  int v260;
  BOOL v261;
  BOOL v262;
  _QWORD *v263;
  _QWORD *v264;
  unsigned int v265;
  _QWORD *v266;
  _QWORD *v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  _BYTE *v271;
  int v272;
  uint64_t v273;
  int v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  BOOL v279;
  uint64_t v280;
  uint64_t *v281;
  char *v282;
  unint64_t v283;
  _QWORD *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  unint64_t v293;
  _BYTE *v294;
  _DWORD *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  _OWORD *v300;
  char *v301;
  uint64_t v302;
  __int128 v303;
  int v304;
  uint64_t v305;
  char *v306;
  unint64_t v307;
  std::__shared_weak_count_vtbl *v308;
  unsigned int **v309;
  unsigned int *v310;
  unsigned int *v311;
  char v312;
  uint64_t v313;
  unint64_t v314;
  _QWORD *v315;
  _QWORD **v316;
  _QWORD *v317;
  _QWORD *v318;
  _QWORD **v319;
  unsigned int v320;
  int *v321;
  int v322;
  int v323;
  BOOL v324;
  BOOL v325;
  _QWORD *v326;
  unsigned int v327;
  _QWORD *v328;
  _QWORD *v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  _BYTE *v333;
  int v334;
  uint64_t v335;
  int v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  char *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  _BYTE *v349;
  char *v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  _OWORD *v355;
  char *v356;
  uint64_t v357;
  __int128 v358;
  int v359;
  uint64_t *v360;
  char v361;
  unint64_t v362;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  char *v368;
  unint64_t *v369;
  unsigned int *v371;
  int v372;
  unsigned int v373;
  unsigned int *v374;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  char *__p;
  char *v380;
  char *v381;
  _QWORD *v382;
  _QWORD *v383;
  uint64_t v384;
  uint64_t **v385;
  uint64_t *v386;
  uint64_t v387;

  v5 = a2;
  if (!a3)
  {
    v12 = *a2;
    v11 = a2[1];
    if (v11 != *a2)
    {
      v13 = a2[1];
      do
      {
        v15 = *(void **)(v13 - 24);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(_QWORD *)(v11 - 16) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v12);
      v11 = *v5;
    }
    v5[1] = v12;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3);
    if (v16 <= v17)
    {
      if (v16 < v17)
      {
        v18 = v11 + 8 * ((uint64_t)(a1[1] - *a1) >> 2);
        if (v12 != v18)
        {
          v19 = v12;
          do
          {
            v21 = *(void **)(v19 - 24);
            v19 -= 24;
            v20 = v21;
            if (v21)
            {
              *(_QWORD *)(v12 - 16) = v20;
              operator delete(v20);
            }
            v12 = v19;
          }
          while (v19 != v18);
        }
        v5[1] = v18;
      }
    }
    else
    {
      sub_2394D951C((uint64_t)v5, v16 - v17);
    }
    v33 = (unsigned int *)a1[3];
    v371 = (unsigned int *)a1[4];
    if (v33 == v371)
    {
LABEL_168:
      if (v5[1] != *v5)
      {
        v173 = 0;
        do
        {
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v174 = *v5;
          v175 = *(char **)(*v5 + 24 * v173);
          v177 = (char **)(*v5 + 24 * v173 + 8);
          v176 = *v177;
          if (v175 != *v177)
          {
            v178 = v175 + 4;
            while (v178 != v176)
            {
              v179 = *((_DWORD *)v178 - 1);
              v180 = *(_DWORD *)v178;
              v178 += 4;
              if (v179 == v180)
              {
                v181 = v178 - 8;
                while (v178 != v176)
                {
                  v182 = v179;
                  v179 = *(_DWORD *)v178;
                  if (v182 != *(_DWORD *)v178)
                  {
                    *((_DWORD *)v181 + 1) = v179;
                    v181 += 4;
                  }
                  v178 += 4;
                }
                v183 = v181 + 4;
                v184 = v176 - (v181 + 4);
                if (v176 != v181 + 4)
                {
                  if (v176 != &v183[v184])
                  {
                    memmove(v181 + 4, &v183[v184], 0);
                    v174 = *v5;
                  }
                  *v177 = v183;
                }
                break;
              }
            }
          }
          ++v173;
        }
        while (v173 < 0xAAAAAAAAAAAAAAABLL * ((v5[1] - v174) >> 3));
      }
      return 1;
    }
    while (1)
    {
      v35 = v33[1];
      v36 = v33[2];
      v373 = *v33;
      v376 = v36;
      v37 = *v5 + 24 * *v33;
      v38 = (uint64_t *)(v37 + 8);
      v39 = *(char **)(v37 + 8);
      v40 = *(_QWORD *)(v37 + 16);
      v377 = v35;
      if ((unint64_t)v39 < v40)
      {
        *(_DWORD *)v39 = v35;
        v41 = (uint64_t)(v39 + 4);
        goto LABEL_59;
      }
      v42 = *(char **)v37;
      v43 = (uint64_t)&v39[-*(_QWORD *)v37];
      v44 = v43 >> 2;
      v45 = (v43 >> 2) + 1;
      if (v45 >> 62)
        sub_2394189F8();
      v46 = v40 - (_QWORD)v42;
      if (v46 >> 1 > v45)
        v45 = v46 >> 1;
      v47 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v45;
      if (v47)
        break;
      v48 = 0;
      v49 = (unsigned int *)(4 * v44);
      *(_DWORD *)(4 * v44) = v35;
      v41 = 4 * v44 + 4;
      if (v39 != v42)
        goto LABEL_51;
LABEL_57:
      *(_QWORD *)v37 = v49;
      *v38 = v41;
      *(_QWORD *)(v37 + 16) = &v48[4 * v47];
      if (v42)
      {
        operator delete(v42);
        v36 = v376;
        v35 = v377;
      }
LABEL_59:
      *v38 = v41;
      v59 = *a2 + 24 * v373;
      v60 = (uint64_t *)(v59 + 8);
      v61 = *(char **)(v59 + 8);
      v62 = *(_QWORD *)(v59 + 16);
      if ((unint64_t)v61 < v62)
      {
        *(_DWORD *)v61 = v36;
        v63 = (uint64_t)(v61 + 4);
        v64 = a2;
        goto LABEL_81;
      }
      v65 = *(char **)v59;
      v66 = (uint64_t)&v61[-*(_QWORD *)v59];
      v67 = v66 >> 2;
      v68 = (v66 >> 2) + 1;
      if (v68 >> 62)
        goto LABEL_466;
      v69 = v62 - (_QWORD)v65;
      if (v69 >> 1 > v68)
        v68 = v69 >> 1;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
        v70 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
      {
        if (v70 >> 62)
          goto LABEL_467;
        v71 = operator new(4 * v70);
        v36 = v376;
        v35 = v377;
        v72 = (unsigned int *)&v71[4 * v67];
        *v72 = v376;
        v63 = (uint64_t)(v72 + 1);
        if (v61 == v65)
          goto LABEL_78;
LABEL_72:
        v73 = v61 - 4 - v65;
        if (v73 < 0x2C)
          goto LABEL_471;
        if ((unint64_t)(v61 - &v71[v66]) < 0x20)
          goto LABEL_471;
        v74 = (v73 >> 2) + 1;
        v75 = 4 * (v74 & 0x7FFFFFFFFFFFFFF8);
        v76 = &v61[-v75];
        v72 = (unsigned int *)((char *)v72 - v75);
        v77 = &v71[4 * v67 - 16];
        v78 = v61 - 16;
        v79 = v74 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 8;
        }
        while (v79);
        v61 = v76;
        if (v74 != (v74 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_471:
          do
          {
            v81 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *--v72 = v81;
          }
          while (v61 != v65);
        }
        goto LABEL_78;
      }
      v71 = 0;
      v72 = (unsigned int *)(4 * v67);
      *(_DWORD *)(4 * v67) = v36;
      v63 = 4 * v67 + 4;
      if (v61 != v65)
        goto LABEL_72;
LABEL_78:
      *(_QWORD *)v59 = v72;
      *v60 = v63;
      *(_QWORD *)(v59 + 16) = &v71[4 * v70];
      if (v65)
      {
        operator delete(v65);
        v36 = v376;
        v35 = v377;
      }
      v64 = a2;
LABEL_81:
      *v60 = v63;
      v82 = *v64 + 24 * v35;
      v83 = (uint64_t *)(v82 + 8);
      v84 = *(char **)(v82 + 8);
      v85 = *(_QWORD *)(v82 + 16);
      if ((unint64_t)v84 < v85)
      {
        *(_DWORD *)v84 = v373;
        v86 = (uint64_t)(v84 + 4);
        v87 = a2;
        goto LABEL_103;
      }
      v88 = *(char **)v82;
      v89 = (uint64_t)&v84[-*(_QWORD *)v82];
      v90 = v89 >> 2;
      v91 = (v89 >> 2) + 1;
      if (v91 >> 62)
        goto LABEL_466;
      v92 = v85 - (_QWORD)v88;
      if (v92 >> 1 > v91)
        v91 = v92 >> 1;
      if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
        v93 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v93 = v91;
      if (v93)
      {
        if (v93 >> 62)
          goto LABEL_467;
        v94 = operator new(4 * v93);
        v36 = v376;
        v35 = v377;
        v95 = (unsigned int *)&v94[4 * v90];
        *v95 = v373;
        v86 = (uint64_t)(v95 + 1);
        if (v84 == v88)
          goto LABEL_100;
LABEL_94:
        v96 = v84 - 4 - v88;
        if (v96 < 0x2C)
          goto LABEL_472;
        if ((unint64_t)(v84 - &v94[v89]) < 0x20)
          goto LABEL_472;
        v97 = (v96 >> 2) + 1;
        v98 = 4 * (v97 & 0x7FFFFFFFFFFFFFF8);
        v99 = &v84[-v98];
        v95 = (unsigned int *)((char *)v95 - v98);
        v100 = &v94[4 * v90 - 16];
        v101 = v84 - 16;
        v102 = v97 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v103 = *(_OWORD *)v101;
          *(v100 - 1) = *((_OWORD *)v101 - 1);
          *v100 = v103;
          v100 -= 2;
          v101 -= 32;
          v102 -= 8;
        }
        while (v102);
        v84 = v99;
        if (v97 != (v97 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_472:
          do
          {
            v104 = *((_DWORD *)v84 - 1);
            v84 -= 4;
            *--v95 = v104;
          }
          while (v84 != v88);
        }
        goto LABEL_100;
      }
      v94 = 0;
      v95 = (unsigned int *)(4 * v90);
      *(_DWORD *)(4 * v90) = v373;
      v86 = 4 * v90 + 4;
      if (v84 != v88)
        goto LABEL_94;
LABEL_100:
      *(_QWORD *)v82 = v95;
      *v83 = v86;
      *(_QWORD *)(v82 + 16) = &v94[4 * v93];
      if (v88)
      {
        operator delete(v88);
        v36 = v376;
        v35 = v377;
      }
      v87 = a2;
LABEL_103:
      *v83 = v86;
      v105 = *v87 + 24 * v35;
      v106 = (uint64_t *)(v105 + 8);
      v107 = *(char **)(v105 + 8);
      v108 = *(_QWORD *)(v105 + 16);
      if ((unint64_t)v107 < v108)
      {
        *(_DWORD *)v107 = v36;
        v109 = (uint64_t)(v107 + 4);
        v110 = a2;
        goto LABEL_125;
      }
      v111 = *(char **)v105;
      v112 = (uint64_t)&v107[-*(_QWORD *)v105];
      v113 = v112 >> 2;
      v114 = (v112 >> 2) + 1;
      if (v114 >> 62)
        goto LABEL_466;
      v115 = v108 - (_QWORD)v111;
      if (v115 >> 1 > v114)
        v114 = v115 >> 1;
      if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
        v116 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v116 = v114;
      if (v116)
      {
        if (v116 >> 62)
          goto LABEL_467;
        v117 = operator new(4 * v116);
        v36 = v376;
        v35 = v377;
        v118 = (unsigned int *)&v117[4 * v113];
        *v118 = v376;
        v109 = (uint64_t)(v118 + 1);
        if (v107 == v111)
          goto LABEL_122;
LABEL_116:
        v119 = v107 - 4 - v111;
        if (v119 < 0x2C)
          goto LABEL_473;
        if ((unint64_t)(v107 - &v117[v112]) < 0x20)
          goto LABEL_473;
        v120 = (v119 >> 2) + 1;
        v121 = 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
        v122 = &v107[-v121];
        v118 = (unsigned int *)((char *)v118 - v121);
        v123 = &v117[4 * v113 - 16];
        v124 = v107 - 16;
        v125 = v120 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v126 = *(_OWORD *)v124;
          *(v123 - 1) = *((_OWORD *)v124 - 1);
          *v123 = v126;
          v123 -= 2;
          v124 -= 32;
          v125 -= 8;
        }
        while (v125);
        v107 = v122;
        if (v120 != (v120 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_473:
          do
          {
            v127 = *((_DWORD *)v107 - 1);
            v107 -= 4;
            *--v118 = v127;
          }
          while (v107 != v111);
        }
        goto LABEL_122;
      }
      v117 = 0;
      v118 = (unsigned int *)(4 * v113);
      *(_DWORD *)(4 * v113) = v36;
      v109 = 4 * v113 + 4;
      if (v107 != v111)
        goto LABEL_116;
LABEL_122:
      *(_QWORD *)v105 = v118;
      *v106 = v109;
      *(_QWORD *)(v105 + 16) = &v117[4 * v116];
      if (v111)
      {
        operator delete(v111);
        v36 = v376;
        v35 = v377;
      }
      v110 = a2;
LABEL_125:
      *v106 = v109;
      v128 = *v110 + 24 * v36;
      v129 = (uint64_t *)(v128 + 8);
      v130 = *(char **)(v128 + 8);
      v131 = *(_QWORD *)(v128 + 16);
      if ((unint64_t)v130 >= v131)
      {
        v134 = *(char **)v128;
        v135 = (uint64_t)&v130[-*(_QWORD *)v128];
        v136 = v135 >> 2;
        v137 = (v135 >> 2) + 1;
        if (v137 >> 62)
          goto LABEL_466;
        v138 = v131 - (_QWORD)v134;
        if (v138 >> 1 > v137)
          v137 = v138 >> 1;
        if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL)
          v139 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v139 = v137;
        if (v139)
        {
          if (v139 >> 62)
            goto LABEL_467;
          v140 = operator new(4 * v139);
          v36 = v376;
          v35 = v377;
          v141 = (unsigned int *)&v140[4 * v136];
          *v141 = v373;
          v132 = (uint64_t)(v141 + 1);
          if (v130 == v134)
            goto LABEL_144;
LABEL_138:
          v142 = v130 - 4 - v134;
          if (v142 < 0x2C)
            goto LABEL_474;
          if ((unint64_t)(v130 - &v140[v135]) < 0x20)
            goto LABEL_474;
          v143 = (v142 >> 2) + 1;
          v144 = 4 * (v143 & 0x7FFFFFFFFFFFFFF8);
          v145 = &v130[-v144];
          v141 = (unsigned int *)((char *)v141 - v144);
          v146 = &v140[4 * v136 - 16];
          v147 = v130 - 16;
          v148 = v143 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v149 = *(_OWORD *)v147;
            *(v146 - 1) = *((_OWORD *)v147 - 1);
            *v146 = v149;
            v146 -= 2;
            v147 -= 32;
            v148 -= 8;
          }
          while (v148);
          v130 = v145;
          if (v143 != (v143 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_474:
            do
            {
              v150 = *((_DWORD *)v130 - 1);
              v130 -= 4;
              *--v141 = v150;
            }
            while (v130 != v134);
          }
        }
        else
        {
          v140 = 0;
          v141 = (unsigned int *)(4 * v136);
          *(_DWORD *)(4 * v136) = v373;
          v132 = 4 * v136 + 4;
          if (v130 != v134)
            goto LABEL_138;
        }
LABEL_144:
        *(_QWORD *)v128 = v141;
        *v129 = v132;
        *(_QWORD *)(v128 + 16) = &v140[4 * v139];
        if (v134)
        {
          operator delete(v134);
          v36 = v376;
          v35 = v377;
        }
        v133 = a2;
        goto LABEL_147;
      }
      *(_DWORD *)v130 = v373;
      v132 = (uint64_t)(v130 + 4);
      v133 = a2;
LABEL_147:
      *v129 = v132;
      v151 = *v133 + 24 * v36;
      v152 = (uint64_t *)(v151 + 8);
      v153 = *(char **)(v151 + 8);
      v154 = *(_QWORD *)(v151 + 16);
      if ((unint64_t)v153 < v154)
      {
        *(_DWORD *)v153 = v35;
        v34 = v153 + 4;
        v5 = a2;
        *v152 = (uint64_t)v34;
        v33 += 3;
        if (v33 == v371)
          goto LABEL_168;
      }
      else
      {
        v155 = *(char **)v151;
        v156 = (uint64_t)&v153[-*(_QWORD *)v151];
        v157 = v156 >> 2;
        v158 = (v156 >> 2) + 1;
        if (v158 >> 62)
LABEL_466:
          sub_2394189F8();
        v159 = v154 - (_QWORD)v155;
        if (v159 >> 1 > v158)
          v158 = v159 >> 1;
        if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
          v160 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v160 = v158;
        if (v160)
        {
          if (v160 >> 62)
LABEL_467:
            sub_239418A80();
          v161 = operator new(4 * v160);
          v162 = (unsigned int *)&v161[4 * v157];
          *v162 = v377;
          v163 = (uint64_t)(v162 + 1);
          if (v153 == v155)
            goto LABEL_165;
LABEL_159:
          v164 = v153 - 4 - v155;
          if (v164 < 0x2C)
            goto LABEL_475;
          if ((unint64_t)(v153 - &v161[v156]) < 0x20)
            goto LABEL_475;
          v165 = (v164 >> 2) + 1;
          v166 = 4 * (v165 & 0x7FFFFFFFFFFFFFF8);
          v167 = &v153[-v166];
          v162 = (unsigned int *)((char *)v162 - v166);
          v168 = &v161[4 * v157 - 16];
          v169 = v153 - 16;
          v170 = v165 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v171 = *(_OWORD *)v169;
            *(v168 - 1) = *((_OWORD *)v169 - 1);
            *v168 = v171;
            v168 -= 2;
            v169 -= 32;
            v170 -= 8;
          }
          while (v170);
          v153 = v167;
          if (v165 != (v165 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_475:
            do
            {
              v172 = *((_DWORD *)v153 - 1);
              v153 -= 4;
              *--v162 = v172;
            }
            while (v153 != v155);
          }
          goto LABEL_165;
        }
        v161 = 0;
        v162 = (unsigned int *)(4 * v157);
        *(_DWORD *)(4 * v157) = v35;
        v163 = 4 * v157 + 4;
        if (v153 != v155)
          goto LABEL_159;
LABEL_165:
        *(_QWORD *)v151 = v162;
        *v152 = v163;
        *(_QWORD *)(v151 + 16) = &v161[4 * v160];
        if (v155)
          operator delete(v155);
        v5 = a2;
        *v152 = v163;
        v33 += 3;
        if (v33 == v371)
          goto LABEL_168;
      }
    }
    if (v47 >> 62)
      goto LABEL_467;
    v48 = operator new(4 * v47);
    v36 = v376;
    v35 = v377;
    v49 = (unsigned int *)&v48[4 * v44];
    *v49 = v377;
    v41 = (uint64_t)(v49 + 1);
    if (v39 == v42)
      goto LABEL_57;
LABEL_51:
    v50 = v39 - 4 - v42;
    if (v50 < 0x2C)
      goto LABEL_476;
    if ((unint64_t)(v39 - &v48[v43]) < 0x20)
      goto LABEL_476;
    v51 = (v50 >> 2) + 1;
    v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
    v53 = &v39[-v52];
    v49 = (unsigned int *)((char *)v49 - v52);
    v54 = &v48[4 * v44 - 16];
    v55 = v39 - 16;
    v56 = v51 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v57 = *(_OWORD *)v55;
      *(v54 - 1) = *((_OWORD *)v55 - 1);
      *v54 = v57;
      v54 -= 2;
      v55 -= 32;
      v56 -= 8;
    }
    while (v56);
    v39 = v53;
    if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_476:
      do
      {
        v58 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *--v49 = v58;
      }
      while (v39 != v42);
    }
    goto LABEL_57;
  }
  v8 = (std::__shared_weak_count *)operator new(0x30uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8[1].__vftable = 0;
  v10 = &v8[1].__vftable;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_250AE3228;
  v8[1].__shared_owners_ = 0;
  v8[1].__shared_weak_owners_ = 0;
  v367 = v8;
  if (a5)
  {
    if (v10 != (_QWORD *)a4)
      sub_2396C6DB4((uint64_t)&v8[1], *(char ***)a4, *(_QWORD *)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3));
    goto LABEL_20;
  }
  if (sub_2396C1F84(a1, v10, 0, 0))
  {
LABEL_20:
    v23 = *v5;
    v22 = v5[1];
    if (v22 != *v5)
    {
      v24 = v5[1];
      do
      {
        v26 = *(void **)(v24 - 24);
        v24 -= 24;
        v25 = v26;
        if (v26)
        {
          *(_QWORD *)(v22 - 16) = v25;
          operator delete(v25);
        }
        v22 = v24;
      }
      while (v24 != v23);
      v22 = *v5;
    }
    v5[1] = v23;
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
    v28 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3);
    if (v27 <= v28)
    {
      if (v27 >= v28)
      {
        v29 = v23;
      }
      else
      {
        v29 = v22 + 8 * ((uint64_t)(a1[1] - *a1) >> 2);
        if (v23 != v29)
        {
          v30 = v23;
          do
          {
            v32 = *(void **)(v30 - 24);
            v30 -= 24;
            v31 = v32;
            if (v32)
            {
              *(_QWORD *)(v23 - 16) = v31;
              operator delete(v31);
            }
            v23 = v30;
          }
          while (v30 != v29);
        }
        v5[1] = v29;
      }
    }
    else
    {
      sub_2394D951C((uint64_t)v5, v27 - v28);
      v29 = v5[1];
    }
    for (i = *v5; i != v29; i += 24)
    {
      v186 = *(_BYTE **)i;
      if (*(_QWORD *)(i + 16) - *(_QWORD *)i > 0x1FuLL)
        continue;
      v187 = *(_BYTE **)(i + 8);
      v188 = (char *)operator new(0x20uLL);
      v189 = v187 - v186;
      v190 = &v188[(v187 - v186) & 0xFFFFFFFFFFFFFFFCLL];
      v191 = v190;
      if (v187 != v186)
      {
        v192 = v187 - 4 - v186;
        if (v192 >= 0x2C)
        {
          v191 = &v188[(v187 - v186) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(v187 - &v188[v189 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
          {
            v193 = v189 >> 2;
            v194 = (v192 >> 2) + 1;
            v195 = 4 * (v194 & 0x7FFFFFFFFFFFFFF8);
            v196 = &v187[-v195];
            v191 = &v190[-v195];
            v197 = &v188[4 * v193 - 16];
            v198 = (__int128 *)(v187 - 16);
            v199 = v194 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v200 = *v198;
              *((_OWORD *)v197 - 1) = *(v198 - 1);
              *(_OWORD *)v197 = v200;
              v197 -= 32;
              v198 -= 2;
              v199 -= 8;
            }
            while (v199);
            v187 = v196;
            if (v194 == (v194 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_199;
          }
        }
        else
        {
          v191 = &v188[(v187 - v186) & 0xFFFFFFFFFFFFFFFCLL];
        }
        do
        {
          v201 = *((_DWORD *)v187 - 1);
          v187 -= 4;
          *((_DWORD *)v191 - 1) = v201;
          v191 -= 4;
        }
        while (v187 != v186);
      }
LABEL_199:
      *(_QWORD *)i = v191;
      *(_QWORD *)(i + 8) = v190;
      *(_QWORD *)(i + 16) = v188 + 32;
      if (v186)
        operator delete(v186);
    }
    v386 = 0;
    v387 = 0;
    v385 = &v386;
    v202 = a1[3];
    if (a1[4] == v202)
    {
      v360 = 0;
      goto LABEL_450;
    }
    v203 = 0;
    v369 = p_shared_owners;
LABEL_204:
    v204 = 0;
    v365 = v202 + 12 * v203;
    v366 = v203;
    while (1)
    {
      v383 = 0;
      v384 = 0;
      v382 = &v383;
      v206 = operator new(0x20uLL);
      v206[7] = v203;
      *(_QWORD *)v206 = 0;
      *((_QWORD *)v206 + 1) = 0;
      *((_QWORD *)v206 + 2) = &v383;
      v382 = v206;
      v383 = v206;
      sub_2394213B8((uint64_t *)v206, (uint64_t *)v206);
      ++v384;
      v378 = *(_DWORD *)(v365 + 4 * v204);
      v207 = v386;
      v208 = &v386;
      v209 = &v386;
      if (v386)
      {
        v210 = &v386;
        v211 = v386;
        do
        {
          v212 = v211;
          v213 = v210;
          v214 = *((_DWORD *)v211 + 7);
          if (v214 >= v378)
            v210 = (uint64_t **)v211;
          else
            ++v211;
          v211 = (uint64_t *)*v211;
        }
        while (v211);
        if (v210 != &v386)
        {
          if (v214 < v378)
            v212 = (uint64_t *)v213;
          if (v378 >= *((_DWORD *)v212 + 7))
          {
            v205 = v204 + 1;
            goto LABEL_206;
          }
        }
        while (1)
        {
          while (1)
          {
            v209 = (uint64_t **)v207;
            v215 = *((_DWORD *)v207 + 7);
            if (v378 >= v215)
              break;
            v207 = *v209;
            v208 = v209;
            if (!*v209)
              goto LABEL_223;
          }
          if (v215 >= v378)
            break;
          v207 = v209[1];
          if (!v207)
          {
            v208 = v209 + 1;
            goto LABEL_223;
          }
        }
      }
      else
      {
LABEL_223:
        v216 = operator new(0x20uLL);
        v216[7] = v378;
        *(_QWORD *)v216 = 0;
        *((_QWORD *)v216 + 1) = 0;
        *((_QWORD *)v216 + 2) = v209;
        *v208 = (uint64_t *)v216;
        if (*v385)
        {
          v385 = (uint64_t **)*v385;
          v216 = *v208;
        }
        sub_2394213B8(v386, (uint64_t *)v216);
        ++v387;
      }
      v217 = (v204 + 1);
      v364 = v204 + 1;
      if (v204 == 2)
        v217 = 0;
      v218 = *(_DWORD *)(v365 + 4 * v217);
      v372 = *(_DWORD *)(v365 + 4 * (((int)v204 + 2) % 3u));
      v219 = v378;
      v220 = *v5 + 24 * v378;
      v221 = (uint64_t *)(v220 + 8);
      v222 = *(char **)(v220 + 8);
      v224 = (_QWORD *)(v220 + 16);
      v223 = *(_QWORD *)(v220 + 16);
      if ((unint64_t)v222 >= v223)
        break;
      *(_DWORD *)v222 = v218;
      v225 = (uint64_t)(v222 + 4);
      v226 = &v383;
LABEL_250:
      *v221 = v225;
      v245 = v366;
      do
      {
        v246 = v367[1].__vftable;
        if (0xAAAAAAAAAAAAAAABLL * ((v367[1].__shared_owners_ - (uint64_t)v246) >> 3) <= v245)
          sub_23941D884();
        v247 = (unsigned int **)((char *)v246 + 24 * v245);
        v248 = *v247;
        v374 = v247[1];
        if (*v247 == v374)
          break;
        v249 = 0;
        do
        {
          v251 = *v248;
          v252 = v383;
          if (v383)
          {
            v253 = &v383;
            v254 = v383;
            do
            {
              v255 = v254;
              v256 = v253;
              v257 = *((_DWORD *)v254 + 7);
              if (v257 >= v251)
                v253 = (_QWORD **)v254;
              else
                ++v254;
              v254 = (_QWORD *)*v254;
            }
            while (v254);
            if (v253 != &v383)
            {
              if (v257 < v251)
                v255 = v256;
              if (v251 >= *((_DWORD *)v255 + 7))
                goto LABEL_257;
            }
          }
          v258 = (int *)(a1[3] + 12 * v251);
          v260 = *v258;
          v259 = v258[1];
          v261 = *v258 == v219 || v259 == v219;
          if (!v261 && v258[2] != v219)
            goto LABEL_257;
          v262 = v260 == v218 || v259 == v218;
          if (!v262 && v258[2] != v218)
            goto LABEL_257;
          v263 = &v383;
          v264 = &v383;
          if (v383)
          {
            while (1)
            {
              while (1)
              {
                v264 = v252;
                v265 = *((_DWORD *)v252 + 7);
                if (v251 >= v265)
                  break;
                v252 = (_QWORD *)*v252;
                v263 = v264;
                if (!*v264)
                  goto LABEL_285;
              }
              if (v265 >= v251)
                break;
              v252 = (_QWORD *)v252[1];
              if (!v252)
              {
                v263 = v264 + 1;
                goto LABEL_285;
              }
            }
            v219 = v378;
            if (v260 == v378)
              goto LABEL_313;
          }
          else
          {
LABEL_285:
            v266 = operator new(0x20uLL);
            *((_DWORD *)v266 + 7) = v251;
            *v266 = 0;
            v266[1] = 0;
            v266[2] = v264;
            *v263 = v266;
            if (*v382)
            {
              v382 = (_QWORD *)*v382;
              v266 = (_QWORD *)*v263;
            }
            v267 = v383;
            v261 = v266 == v383;
            *((_BYTE *)v266 + 24) = v266 == v383;
            v219 = v378;
            if (!v261)
            {
              do
              {
                v268 = v266[2];
                if (*(_BYTE *)(v268 + 24))
                  break;
                v269 = *(_QWORD **)(v268 + 16);
                v270 = *v269;
                if (*v269 == v268)
                {
                  v273 = v269[1];
                  if (!v273 || (v274 = *(unsigned __int8 *)(v273 + 24), v271 = (_BYTE *)(v273 + 24), v274))
                  {
                    if (*(_QWORD **)v268 == v266)
                    {
                      *(_BYTE *)(v268 + 24) = 1;
                      *((_BYTE *)v269 + 24) = 0;
                      v277 = *(_QWORD *)(v268 + 8);
                      *v269 = v277;
                      if (v277)
                        goto LABEL_302;
                    }
                    else
                    {
                      v275 = *(uint64_t **)(v268 + 8);
                      v276 = *v275;
                      *(_QWORD *)(v268 + 8) = *v275;
                      if (v276)
                      {
                        *(_QWORD *)(v276 + 16) = v268;
                        v269 = *(_QWORD **)(v268 + 16);
                      }
                      v275[2] = (uint64_t)v269;
                      *(_QWORD *)(*(_QWORD *)(v268 + 16) + 8 * (**(_QWORD **)(v268 + 16) != v268)) = v275;
                      *v275 = v268;
                      *(_QWORD *)(v268 + 16) = v275;
                      v269 = (_QWORD *)v275[2];
                      v268 = *v269;
                      *((_BYTE *)v275 + 24) = 1;
                      *((_BYTE *)v269 + 24) = 0;
                      v277 = *(_QWORD *)(v268 + 8);
                      *v269 = v277;
                      if (v277)
LABEL_302:
                        *(_QWORD *)(v277 + 16) = v269;
                    }
                    *(_QWORD *)(v268 + 16) = v269[2];
                    *(_QWORD *)(v269[2] + 8 * (*(_QWORD *)v269[2] != (_QWORD)v269)) = v268;
                    *(_QWORD *)(v268 + 8) = v269;
LABEL_310:
                    v269[2] = v268;
                    break;
                  }
                }
                else if (!v270 || (v272 = *(unsigned __int8 *)(v270 + 24), v271 = (_BYTE *)(v270 + 24), v272))
                {
                  if (*(_QWORD **)v268 == v266)
                  {
                    v305 = v266[1];
                    *(_QWORD *)v268 = v305;
                    if (v305)
                    {
                      *(_QWORD *)(v305 + 16) = v268;
                      v269 = *(_QWORD **)(v268 + 16);
                    }
                    v266[2] = v269;
                    *(_QWORD *)(*(_QWORD *)(v268 + 16) + 8 * (**(_QWORD **)(v268 + 16) != v268)) = v266;
                    v266[1] = v268;
                    *(_QWORD *)(v268 + 16) = v266;
                    v269 = (_QWORD *)v266[2];
                    *((_BYTE *)v266 + 24) = 1;
                    *((_BYTE *)v269 + 24) = 0;
                    v268 = v269[1];
                    v278 = *(_QWORD **)v268;
                    v269[1] = *(_QWORD *)v268;
                    if (v278)
LABEL_308:
                      v278[2] = v269;
                  }
                  else
                  {
                    *(_BYTE *)(v268 + 24) = 1;
                    *((_BYTE *)v269 + 24) = 0;
                    v268 = v269[1];
                    v278 = *(_QWORD **)v268;
                    v269[1] = *(_QWORD *)v268;
                    if (v278)
                      goto LABEL_308;
                  }
                  *(_QWORD *)(v268 + 16) = v269[2];
                  *(_QWORD *)(v269[2] + 8 * (*(_QWORD *)v269[2] != (_QWORD)v269)) = v268;
                  *(_QWORD *)v268 = v269;
                  goto LABEL_310;
                }
                *(_BYTE *)(v268 + 24) = 1;
                v266 = v269;
                *((_BYTE *)v269 + 24) = v269 == v267;
                *v271 = 1;
              }
              while (v269 != v267);
            }
            ++v384;
            v260 = *v258;
            if (*v258 == v378)
              goto LABEL_313;
          }
          if (v260 != v218)
            goto LABEL_320;
LABEL_313:
          v260 = v258[1];
          v279 = v260 == v219 || v260 == v218;
          if (!v279 || (v260 = v258[2], v249 = 1, v260 != v219) && v260 != v218)
          {
LABEL_320:
            v280 = *a2 + 24 * v219;
            v281 = (uint64_t *)(v280 + 8);
            v282 = *(char **)(v280 + 8);
            v284 = (_QWORD *)(v280 + 16);
            v283 = *(_QWORD *)(v280 + 16);
            if ((unint64_t)v282 >= v283)
            {
              v285 = *(char **)v280;
              v286 = (uint64_t)&v282[-*(_QWORD *)v280];
              v287 = v286 >> 2;
              v288 = (v286 >> 2) + 1;
              if (v288 >> 62)
                sub_2394189F8();
              v289 = v283 - (_QWORD)v285;
              if (v289 >> 1 > v288)
                v288 = v289 >> 1;
              if ((unint64_t)v289 >= 0x7FFFFFFFFFFFFFFCLL)
                v290 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v290 = v288;
              if (v290)
              {
                if (v290 >> 62)
                  sub_239418A80();
                v368 = &v282[-*(_QWORD *)v280];
                v291 = *a2 + 24 * v219;
                v292 = (_QWORD *)(v280 + 16);
                v293 = v290;
                v294 = operator new(4 * v290);
                v284 = v292;
                v290 = v293;
                v280 = v291;
                v286 = (uint64_t)v368;
                v295 = &v294[4 * v287];
                *v295 = v260;
                v250 = (uint64_t)(v295 + 1);
                if (v282 == v285)
                {
LABEL_338:
                  *(_QWORD *)v280 = v295;
                  *v281 = v250;
                  *v284 = &v294[4 * v290];
                  if (v285)
                    operator delete(v285);
                  goto LABEL_256;
                }
              }
              else
              {
                v294 = 0;
                v295 = (_DWORD *)(4 * v287);
                *(_DWORD *)(4 * v287) = v260;
                v250 = 4 * v287 + 4;
                if (v282 == v285)
                  goto LABEL_338;
              }
              v296 = v282 - 4 - v285;
              if (v296 < 0x2C)
                goto LABEL_477;
              if ((unint64_t)(v282 - &v294[v286]) < 0x20)
                goto LABEL_477;
              v297 = (v296 >> 2) + 1;
              v298 = 4 * (v297 & 0x7FFFFFFFFFFFFFF8);
              v299 = &v282[-v298];
              v295 = (_DWORD *)((char *)v295 - v298);
              v300 = &v294[4 * v287 - 16];
              v301 = v282 - 16;
              v302 = v297 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v303 = *(_OWORD *)v301;
                *(v300 - 1) = *((_OWORD *)v301 - 1);
                *v300 = v303;
                v300 -= 2;
                v301 -= 32;
                v302 -= 8;
              }
              while (v302);
              v282 = v299;
              if (v297 != (v297 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_477:
                do
                {
                  v304 = *((_DWORD *)v282 - 1);
                  v282 -= 4;
                  *--v295 = v304;
                }
                while (v282 != v285);
              }
              goto LABEL_338;
            }
            *(_DWORD *)v282 = v260;
            v250 = (uint64_t)(v282 + 4);
LABEL_256:
            p_shared_owners = v369;
            v226 = &v383;
            *v281 = v250;
            v249 = 1;
            v218 = v260;
            v245 = v251;
            v219 = v378;
          }
LABEL_257:
          ++v248;
        }
        while (v248 != v374);
      }
      while ((v249 & 1) != 0);
      if (v218 == v372)
      {
        v205 = v364;
        v203 = v366;
        v5 = a2;
        goto LABEL_206;
      }
      v306 = (char *)operator new(4uLL);
      v307 = v366;
      v5 = a2;
      *(_DWORD *)v306 = v372;
      v380 = v306 + 4;
      v381 = v306 + 4;
      __p = v306;
LABEL_349:
      v308 = v367[1].__vftable;
      if (0xAAAAAAAAAAAAAAABLL * ((v367[1].__shared_owners_ - (uint64_t)v308) >> 3) <= v307)
        sub_23941D884();
      v309 = (unsigned int **)((char *)v308 + 24 * v307);
      v310 = *v309;
      v311 = v309[1];
      if (*v309 != v311)
      {
        v312 = 0;
        while (1)
        {
          v314 = *v310;
          v315 = v383;
          if (v383)
          {
            v316 = &v383;
            v317 = v383;
            do
            {
              v318 = v317;
              v319 = v316;
              v320 = *((_DWORD *)v317 + 7);
              if (v320 >= v314)
                v316 = (_QWORD **)v317;
              else
                ++v317;
              v317 = (_QWORD *)*v317;
            }
            while (v317);
            if (v316 != &v383)
            {
              if (v320 < v314)
                v318 = v319;
              if (v314 >= *((_DWORD *)v318 + 7))
                goto LABEL_354;
            }
          }
          v321 = (int *)(a1[3] + 12 * v314);
          v323 = *v321;
          v322 = v321[1];
          v324 = *v321 == v219 || v322 == v219;
          if (!v324 && v321[2] != v219)
            goto LABEL_354;
          v325 = v323 == v372 || v322 == v372;
          if (!v325 && v321[2] != v372)
            goto LABEL_354;
          v326 = &v383;
          if (v383)
          {
            while (1)
            {
              while (1)
              {
                v326 = v315;
                v327 = *((_DWORD *)v315 + 7);
                if (v314 >= v327)
                  break;
                v315 = (_QWORD *)*v315;
                v226 = v326;
                if (!*v326)
                  goto LABEL_382;
              }
              if (v327 >= v314)
                break;
              v315 = (_QWORD *)v315[1];
              if (!v315)
              {
                v226 = v326 + 1;
                goto LABEL_382;
              }
            }
            v226 = &v383;
            v219 = v378;
            if (v323 != v378)
            {
LABEL_413:
              if (v323 != v372)
                goto LABEL_421;
            }
          }
          else
          {
LABEL_382:
            v328 = operator new(0x20uLL);
            *((_DWORD *)v328 + 7) = v314;
            *v328 = 0;
            v328[1] = 0;
            v328[2] = v326;
            *v226 = v328;
            if (*v382)
            {
              v382 = (_QWORD *)*v382;
              v328 = (_QWORD *)*v226;
            }
            v329 = v383;
            v261 = v328 == v383;
            *((_BYTE *)v328 + 24) = v328 == v383;
            v226 = &v383;
            v219 = v378;
            if (!v261)
            {
              do
              {
                v330 = v328[2];
                if (*(_BYTE *)(v330 + 24))
                  break;
                v331 = *(_QWORD **)(v330 + 16);
                v332 = *v331;
                if (*v331 == v330)
                {
                  v335 = v331[1];
                  if (!v335 || (v336 = *(unsigned __int8 *)(v335 + 24), v333 = (_BYTE *)(v335 + 24), v336))
                  {
                    if (*(_QWORD **)v330 == v328)
                    {
                      *(_BYTE *)(v330 + 24) = 1;
                      *((_BYTE *)v331 + 24) = 0;
                      v339 = *(_QWORD *)(v330 + 8);
                      *v331 = v339;
                      if (v339)
                        goto LABEL_399;
                    }
                    else
                    {
                      v337 = *(uint64_t **)(v330 + 8);
                      v338 = *v337;
                      *(_QWORD *)(v330 + 8) = *v337;
                      if (v338)
                      {
                        *(_QWORD *)(v338 + 16) = v330;
                        v331 = *(_QWORD **)(v330 + 16);
                      }
                      v337[2] = (uint64_t)v331;
                      *(_QWORD *)(*(_QWORD *)(v330 + 16) + 8 * (**(_QWORD **)(v330 + 16) != v330)) = v337;
                      *v337 = v330;
                      *(_QWORD *)(v330 + 16) = v337;
                      v331 = (_QWORD *)v337[2];
                      v330 = *v331;
                      *((_BYTE *)v337 + 24) = 1;
                      *((_BYTE *)v331 + 24) = 0;
                      v339 = *(_QWORD *)(v330 + 8);
                      *v331 = v339;
                      if (v339)
LABEL_399:
                        *(_QWORD *)(v339 + 16) = v331;
                    }
                    *(_QWORD *)(v330 + 16) = v331[2];
                    *(_QWORD *)(v331[2] + 8 * (*(_QWORD *)v331[2] != (_QWORD)v331)) = v330;
                    *(_QWORD *)(v330 + 8) = v331;
LABEL_411:
                    v331[2] = v330;
                    break;
                  }
                }
                else if (!v332 || (v334 = *(unsigned __int8 *)(v332 + 24), v333 = (_BYTE *)(v332 + 24), v334))
                {
                  if (*(_QWORD **)v330 == v328)
                  {
                    v340 = v328[1];
                    *(_QWORD *)v330 = v340;
                    if (v340)
                    {
                      *(_QWORD *)(v340 + 16) = v330;
                      v331 = *(_QWORD **)(v330 + 16);
                    }
                    v328[2] = v331;
                    *(_QWORD *)(*(_QWORD *)(v330 + 16) + 8 * (**(_QWORD **)(v330 + 16) != v330)) = v328;
                    v328[1] = v330;
                    *(_QWORD *)(v330 + 16) = v328;
                    v331 = (_QWORD *)v328[2];
                  }
                  else
                  {
                    v328 = (_QWORD *)v328[2];
                  }
                  *((_BYTE *)v328 + 24) = 1;
                  *((_BYTE *)v331 + 24) = 0;
                  v330 = v331[1];
                  v341 = *(_QWORD **)v330;
                  v331[1] = *(_QWORD *)v330;
                  if (v341)
                    v341[2] = v331;
                  *(_QWORD *)(v330 + 16) = v331[2];
                  *(_QWORD *)(v331[2] + 8 * (*(_QWORD *)v331[2] != (_QWORD)v331)) = v330;
                  *(_QWORD *)v330 = v331;
                  goto LABEL_411;
                }
                *(_BYTE *)(v330 + 24) = 1;
                v328 = v331;
                *((_BYTE *)v331 + 24) = v331 == v329;
                *v333 = 1;
              }
              while (v331 != v329);
            }
            ++v384;
            v323 = *v321;
            if (*v321 != v378)
              goto LABEL_413;
          }
          v323 = v321[1];
          if (v323 == v219 || v323 == v372)
          {
            v323 = v321[2];
            v312 = 1;
            if (v323 == v219 || v323 == v372)
              goto LABEL_354;
          }
LABEL_421:
          v343 = v380;
          if (v380 >= v381)
          {
            v344 = __p;
            v345 = (v380 - __p) >> 2;
            v346 = v345 + 1;
            if ((unint64_t)(v345 + 1) >> 62)
              sub_2394189F8();
            v347 = v381 - __p;
            if ((v381 - __p) >> 1 > v346)
              v346 = v347 >> 1;
            if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFFCLL)
              v348 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v348 = v346;
            if (v348)
            {
              if (v348 >> 62)
                sub_239418A80();
              v349 = operator new(4 * v348);
              v350 = &v349[4 * v345];
              *(_DWORD *)v350 = v323;
              v313 = (uint64_t)(v350 + 4);
              if (v380 != __p)
              {
LABEL_431:
                v351 = v380 - 4 - __p;
                if (v351 < 0x2C)
                {
                  p_shared_owners = v369;
                  goto LABEL_439;
                }
                p_shared_owners = v369;
                if ((unint64_t)(__p - v349) < 0x20)
                  goto LABEL_478;
                v352 = (v351 >> 2) + 1;
                v353 = 4 * (v352 & 0x7FFFFFFFFFFFFFF8);
                v354 = &v380[-v353];
                v350 -= v353;
                v355 = &v349[4 * v345 - 16];
                v356 = v380 - 16;
                v357 = v352 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v358 = *(_OWORD *)v356;
                  *(v355 - 1) = *((_OWORD *)v356 - 1);
                  *v355 = v358;
                  v355 -= 2;
                  v356 -= 32;
                  v357 -= 8;
                }
                while (v357);
                v343 = v354;
                if (v352 != (v352 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_478:
                  do
                  {
LABEL_439:
                    v359 = *((_DWORD *)v343 - 1);
                    v343 -= 4;
                    *((_DWORD *)v350 - 1) = v359;
                    v350 -= 4;
                  }
                  while (v343 != __p);
                }
LABEL_440:
                __p = v350;
                v381 = &v349[4 * v348];
                if (v344)
                  operator delete(v344);
                v5 = a2;
                goto LABEL_353;
              }
            }
            else
            {
              v349 = 0;
              v350 = (char *)(4 * v345);
              *(_DWORD *)(4 * v345) = v323;
              v313 = 4 * v345 + 4;
              if (v380 != __p)
                goto LABEL_431;
            }
            p_shared_owners = v369;
            goto LABEL_440;
          }
          *(_DWORD *)v380 = v323;
          v313 = (uint64_t)(v380 + 4);
LABEL_353:
          v219 = v378;
          v380 = (char *)v313;
          v312 = 1;
          v372 = v323;
          v307 = v314;
          v226 = &v383;
LABEL_354:
          if (++v310 == v311)
          {
            if ((v312 & 1) == 0)
              break;
            goto LABEL_349;
          }
        }
      }
      sub_2396C7028(*v5 + 24 * v219, *(void **)(*v5 + 24 * v219 + 8), (uint64_t)v380, (unint64_t)v380, (uint64_t)__p, (uint64_t)__p, (v380 - __p) >> 2);
      v205 = v364;
      if (__p)
        operator delete(__p);
      v203 = v366;
LABEL_206:
      sub_239421038((uint64_t)&v382, v383);
      v204 = v205;
      if (v205 == 3)
      {
        ++v203;
        v202 = a1[3];
        if (v203 >= 0xAAAAAAAAAAAAAAABLL * ((a1[4] - v202) >> 2))
        {
          v360 = v386;
LABEL_450:
          sub_239421038((uint64_t)&v385, v360);
          v361 = 1;
          goto LABEL_452;
        }
        goto LABEL_204;
      }
    }
    v227 = *(char **)v220;
    v228 = (uint64_t)&v222[-*(_QWORD *)v220];
    v229 = v228 >> 2;
    v230 = (v228 >> 2) + 1;
    if (v230 >> 62)
      sub_2394189F8();
    v231 = v223 - (_QWORD)v227;
    if (v231 >> 1 > v230)
      v230 = v231 >> 1;
    if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFFCLL)
      v232 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v232 = v230;
    if (v232)
    {
      if (v232 >> 62)
        sub_239418A80();
      v233 = *v5 + 24 * v378;
      v234 = operator new(4 * v232);
      v220 = v233;
      v235 = &v234[4 * v229];
      *v235 = v218;
      v225 = (uint64_t)(v235 + 1);
      if (v222 == v227)
        goto LABEL_247;
    }
    else
    {
      v234 = 0;
      v235 = (_DWORD *)(4 * v229);
      *(_DWORD *)(4 * v229) = v218;
      v225 = 4 * v229 + 4;
      if (v222 == v227)
      {
LABEL_247:
        *(_QWORD *)v220 = v235;
        *v221 = v225;
        *v224 = &v234[4 * v232];
        if (v227)
          operator delete(v227);
        v226 = &v383;
        v219 = v378;
        goto LABEL_250;
      }
    }
    v236 = v222 - 4 - v227;
    if (v236 < 0x2C)
      goto LABEL_479;
    if ((unint64_t)(v222 - &v234[v228]) < 0x20)
      goto LABEL_479;
    v237 = (v236 >> 2) + 1;
    v238 = 4 * (v237 & 0x7FFFFFFFFFFFFFF8);
    v239 = &v222[-v238];
    v235 = (_DWORD *)((char *)v235 - v238);
    v240 = &v234[4 * v229 - 16];
    v241 = v222 - 16;
    v242 = v237 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v243 = *(_OWORD *)v241;
      *(v240 - 1) = *((_OWORD *)v241 - 1);
      *v240 = v243;
      v240 -= 2;
      v241 -= 32;
      v242 -= 8;
    }
    while (v242);
    v222 = v239;
    if (v237 != (v237 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_479:
      do
      {
        v244 = *((_DWORD *)v222 - 1);
        v222 -= 4;
        *--v235 = v244;
      }
      while (v222 != v227);
    }
    goto LABEL_247;
  }
  v361 = 0;
  do
LABEL_452:
    v362 = __ldaxr(p_shared_owners);
  while (__stlxr(v362 - 1, p_shared_owners));
  if (v362)
  {
    if ((v361 & 1) != 0)
      return 1;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
    std::__shared_weak_count::__release_weak(v367);
    if ((v361 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t sub_2396C1F84(_QWORD *a1, _QWORD *a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  char **v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t i;
  _BYTE *v20;
  _BYTE *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  std::__shared_weak_count_vtbl *p_get_deleter;
  void (__cdecl **v37)(std::__shared_weak_count *__hidden);
  void (__cdecl *v38)(std::__shared_weak_count *__hidden);
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  _DWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _OWORD *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  int v84;
  void (__cdecl *v85)(std::__shared_weak_count *__hidden);
  void (__cdecl **v86)(std::__shared_weak_count *__hidden);
  BOOL v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *shared_owners;
  std::__shared_weak_count_vtbl *v94;
  _QWORD *v95;
  void (__cdecl **v96)(std::__shared_weak_count *__hidden);

  v8 = operator new(0x30uLL);
  v9 = (std::__shared_weak_count *)v8;
  v8[1] = 0;
  v10 = v8 + 1;
  v8[2] = 0;
  v8[3] = 0;
  v11 = (char **)(v8 + 3);
  *v8 = &off_250AE3260;
  v8[4] = 0;
  v8[5] = 0;
  if (a4)
  {
    if (v11 != (char **)a3)
      sub_2396C75E4((uint64_t)(v8 + 3), *(_QWORD *)a3, *(_QWORD ***)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  }
  else if (!sub_2396C2608(a1, v11))
  {
    v88 = 0;
    goto LABEL_91;
  }
  v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 2);
  v13 = a2[1];
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a2) >> 3);
  if (v12 <= v14)
  {
    if (v12 >= v14)
    {
      v15 = a2[1];
    }
    else
    {
      v15 = *a2 + 8 * ((uint64_t)(a1[4] - a1[3]) >> 2);
      if (v13 != v15)
      {
        v16 = a2[1];
        do
        {
          v18 = *(void **)(v16 - 24);
          v16 -= 24;
          v17 = v18;
          if (v18)
          {
            *(_QWORD *)(v13 - 16) = v17;
            operator delete(v17);
          }
          v13 = v16;
        }
        while (v16 != v15);
      }
      a2[1] = v15;
    }
  }
  else
  {
    sub_2394D951C((uint64_t)a2, v12 - v14);
    v15 = a2[1];
  }
  for (i = *a2; i != v15; i += 24)
  {
    v20 = *(_BYTE **)i;
    if (*(_QWORD *)(i + 16) - *(_QWORD *)i > 0xBuLL)
      continue;
    v21 = *(_BYTE **)(i + 8);
    v22 = (char *)operator new(0xCuLL);
    v23 = v21 - v20;
    v24 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFFCLL];
    v25 = v24;
    if (v21 != v20)
    {
      v26 = v21 - 4 - v20;
      if (v26 >= 0x2C)
      {
        v25 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(v21 - &v22[v23 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
        {
          v27 = v23 >> 2;
          v28 = (v26 >> 2) + 1;
          v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
          v30 = &v21[-v29];
          v25 = &v24[-v29];
          v31 = &v22[4 * v27 - 16];
          v32 = (__int128 *)(v21 - 16);
          v33 = v28 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v34 = *v32;
            *((_OWORD *)v31 - 1) = *(v32 - 1);
            *(_OWORD *)v31 = v34;
            v31 -= 32;
            v32 -= 2;
            v33 -= 8;
          }
          while (v33);
          v21 = v30;
          if (v28 == (v28 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_27;
        }
      }
      else
      {
        v25 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFFCLL];
      }
      do
      {
        v35 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v25 - 1) = v35;
        v25 -= 4;
      }
      while (v21 != v20);
    }
LABEL_27:
    *(_QWORD *)i = v25;
    *(_QWORD *)(i + 8) = v24;
    *(_QWORD *)(i + 16) = v22 + 12;
    if (v20)
      operator delete(v20);
  }
  p_get_deleter = v9[1].__vftable;
  shared_owners = (std::__shared_weak_count_vtbl *)v9[1].__shared_owners_;
  if (p_get_deleter != shared_owners)
  {
    v91 = v10;
    v92 = v9;
    v95 = a2;
    while (1)
    {
      v94 = p_get_deleter;
      v37 = &p_get_deleter->~__shared_weak_count_0;
      v38 = p_get_deleter->~__shared_weak_count;
      v96 = &p_get_deleter->~__shared_weak_count_0;
      if ((void (__cdecl **)(std::__shared_weak_count *__hidden))p_get_deleter->~__shared_weak_count != &p_get_deleter->~__shared_weak_count_0)
        break;
LABEL_31:
      p_get_deleter = (std::__shared_weak_count_vtbl *)&v94->__get_deleter;
      if (&v94->__get_deleter == (const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *))shared_owners)
      {
        v88 = 1;
        v10 = v91;
        v9 = v92;
        goto LABEL_91;
      }
    }
    while (1)
    {
      v39 = *((_DWORD *)v38 + 8);
      if (v39 != -1)
      {
        v40 = *((_DWORD *)v38 + 9);
        if (v40 != -1)
          break;
      }
LABEL_82:
      v85 = (void (__cdecl *)(std::__shared_weak_count *__hidden))*((_QWORD *)v38 + 1);
      if (v85)
      {
        do
        {
          v86 = (void (__cdecl **)(std::__shared_weak_count *__hidden))v85;
          v85 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          v86 = (void (__cdecl **)(std::__shared_weak_count *__hidden))*((_QWORD *)v38 + 2);
          v87 = *v86 == v38;
          v38 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v86;
        }
        while (!v87);
      }
      v38 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v86;
      if (v86 == v37)
        goto LABEL_31;
    }
    v41 = *a2 + 24 * v39;
    v42 = (uint64_t *)(v41 + 8);
    v43 = *(char **)(v41 + 8);
    v44 = *(_QWORD *)(v41 + 16);
    if ((unint64_t)v43 < v44)
    {
      *(_DWORD *)v43 = v40;
      v45 = (uint64_t)(v43 + 4);
      goto LABEL_59;
    }
    v46 = *(char **)v41;
    v47 = (uint64_t)&v43[-*(_QWORD *)v41];
    v48 = v47 >> 2;
    v49 = (v47 >> 2) + 1;
    if (v49 >> 62)
      goto LABEL_95;
    v50 = v44 - (_QWORD)v46;
    if (v50 >> 1 > v49)
      v49 = v50 >> 1;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
      v51 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      if (v51 >> 62)
        goto LABEL_96;
      v52 = operator new(4 * v51);
      v53 = &v52[4 * v48];
      *v53 = *((_DWORD *)v38 + 9);
      v45 = (uint64_t)(v53 + 1);
      if (v43 == v46)
        goto LABEL_56;
    }
    else
    {
      v52 = 0;
      v53 = (_DWORD *)(4 * v48);
      *(_DWORD *)(4 * v48) = v40;
      v45 = 4 * v48 + 4;
      if (v43 == v46)
      {
LABEL_56:
        *(_QWORD *)v41 = v53;
        *v42 = v45;
        *(_QWORD *)(v41 + 16) = &v52[4 * v51];
        if (v46)
          operator delete(v46);
        a2 = v95;
        v37 = v96;
LABEL_59:
        *v42 = v45;
        v63 = *a2 + 24 * *((unsigned int *)v38 + 9);
        v64 = (uint64_t *)(v63 + 8);
        v65 = *(char **)(v63 + 8);
        v66 = *(_QWORD *)(v63 + 16);
        if ((unint64_t)v65 < v66)
        {
          *(_DWORD *)v65 = *((_DWORD *)v38 + 8);
          v67 = (uint64_t)(v65 + 4);
LABEL_81:
          *v64 = v67;
          goto LABEL_82;
        }
        v68 = *(char **)v63;
        v69 = (uint64_t)&v65[-*(_QWORD *)v63];
        v70 = v69 >> 2;
        v71 = (v69 >> 2) + 1;
        if (v71 >> 62)
LABEL_95:
          sub_2394189F8();
        v72 = v66 - (_QWORD)v68;
        if (v72 >> 1 > v71)
          v71 = v72 >> 1;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
          v73 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v73 = v71;
        if (v73)
        {
          if (v73 >> 62)
LABEL_96:
            sub_239418A80();
          v74 = operator new(4 * v73);
          v75 = &v74[4 * v70];
          *v75 = *((_DWORD *)v38 + 8);
          v67 = (uint64_t)(v75 + 1);
          if (v65 == v68)
            goto LABEL_78;
        }
        else
        {
          v74 = 0;
          v75 = (_DWORD *)(4 * v70);
          *(_DWORD *)(4 * v70) = *((_DWORD *)v38 + 8);
          v67 = 4 * v70 + 4;
          if (v65 == v68)
          {
LABEL_78:
            *(_QWORD *)v63 = v75;
            *v64 = v67;
            *(_QWORD *)(v63 + 16) = &v74[4 * v73];
            if (v68)
              operator delete(v68);
            a2 = v95;
            v37 = v96;
            goto LABEL_81;
          }
        }
        v76 = v65 - 4 - v68;
        if (v76 < 0x2C)
          goto LABEL_99;
        if ((unint64_t)(v65 - &v74[v69]) < 0x20)
          goto LABEL_99;
        v77 = (v76 >> 2) + 1;
        v78 = 4 * (v77 & 0x7FFFFFFFFFFFFFF8);
        v79 = &v65[-v78];
        v75 = (_DWORD *)((char *)v75 - v78);
        v80 = &v74[4 * v70 - 16];
        v81 = v65 - 16;
        v82 = v77 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v83 = *(_OWORD *)v81;
          *(v80 - 1) = *((_OWORD *)v81 - 1);
          *v80 = v83;
          v80 -= 2;
          v81 -= 32;
          v82 -= 8;
        }
        while (v82);
        v65 = v79;
        if (v77 != (v77 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_99:
          do
          {
            v84 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *--v75 = v84;
          }
          while (v65 != v68);
        }
        goto LABEL_78;
      }
    }
    v54 = v43 - 4 - v46;
    if (v54 < 0x2C)
      goto LABEL_100;
    if ((unint64_t)(v43 - &v52[v47]) < 0x20)
      goto LABEL_100;
    v55 = (v54 >> 2) + 1;
    v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
    v57 = &v43[-v56];
    v53 = (_DWORD *)((char *)v53 - v56);
    v58 = &v52[4 * v48 - 16];
    v59 = v43 - 16;
    v60 = v55 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v61 = *(_OWORD *)v59;
      *(v58 - 1) = *((_OWORD *)v59 - 1);
      *v58 = v61;
      v58 -= 2;
      v59 -= 32;
      v60 -= 8;
    }
    while (v60);
    v43 = v57;
    if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_100:
      do
      {
        v62 = *((_DWORD *)v43 - 1);
        v43 -= 4;
        *--v53 = v62;
      }
      while (v43 != v46);
    }
    goto LABEL_56;
  }
  v88 = 1;
  do
LABEL_91:
    v89 = __ldaxr(v10);
  while (__stlxr(v89 - 1, v10));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v88;
}

void sub_2396C257C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396C2590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396C25A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396C25B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396C25CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2396C25E0(int a1, _DWORD *a2)
{
  return *a2 == a1 || a2[1] == a1 || a2[2] == a1;
}

uint64_t sub_2396C2608(_QWORD *a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *i;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  int v15;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v6 = v4 - 24;
      sub_239421038((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
      v4 = v6;
    }
    while (v6 != v5);
    v4 = *a2;
  }
  a2[1] = v5;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3);
  if (v7 <= v8)
  {
    if (v7 < v8)
    {
      for (i = &v4[8 * ((uint64_t)(a1[1] - *a1) >> 2)]; v5 != i; v5 -= 24)
        sub_239421038((uint64_t)(v5 - 24), *((_QWORD **)v5 - 2));
      a2[1] = i;
    }
  }
  else
  {
    sub_239520580((void **)a2, v7 - v8);
  }
  v10 = a1[3];
  if (a1[4] == v10)
    return 1;
  v11 = 0;
  LODWORD(v12) = 1;
  do
  {
    v13 = (unsigned int *)(v10 + 12 * v11);
    v14 = sub_2396BFBB0(*v13, v13[1], v11, a2);
    v15 = sub_2396BFBB0(v13[1], v13[2], v11, a2);
    v12 = sub_2396BFBB0(v13[2], *v13, v11++, a2) & v15 & v14 & v12;
    v10 = a1[3];
  }
  while (v11 < 0xAAAAAAAAAAAAAAABLL * ((a1[4] - v10) >> 2));
  return v12;
}

uint64_t sub_2396C277C(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  _QWORD *v10;
  char **v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  _QWORD v26[3];
  _QWORD *v27;
  unint64_t v28[45];

  v28[44] = *MEMORY[0x24BDAC8D0];
  v10 = operator new(0x30uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_250AE3260;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v11 = (char **)(v10 + 3);
  v24 = v10 + 3;
  v25 = (std::__shared_weak_count *)v10;
  if (a5)
  {
    if (v11 != (char **)a4)
      sub_2396C75E4((uint64_t)(v10 + 3), *(_QWORD *)a4, *(_QWORD ***)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3));
LABEL_5:
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 2);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    if (v12 <= v13)
    {
      if (v12 < v13)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 4 * ((uint64_t)(a1[4] - a1[3]) >> 2);
    }
    else
    {
      sub_2394E6878((char **)a2, v12 - v13);
    }
    if (a3 <= 0)
      a3 = std::thread::hardware_concurrency();
    sub_2397A2A50((uint64_t)v28, a3, 0);
    v15 = a1[3];
    v14 = a1[4];
    v16 = operator new(0x20uLL);
    *v16 = &off_250AE3298;
    v16[1] = a1;
    v16[2] = &v24;
    v16[3] = a2;
    v27 = v16;
    sub_2397A376C(v28, 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 2), v26, 0);
    v17 = v27;
    if (v27 == v26)
    {
      v18 = 4;
      v17 = v26;
    }
    else
    {
      if (!v27)
        goto LABEL_16;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_16:
    sub_2397A2E14(v28);
    v19 = 1;
    v20 = v25;
    if (!v25)
      return v19;
    goto LABEL_17;
  }
  if (sub_2396C2608(a1, v11))
    goto LABEL_5;
  v19 = 0;
  v20 = v25;
  if (!v25)
    return v19;
LABEL_17:
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return v19;
}

void sub_2396C2998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396C29AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396C29C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396C29D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v2;
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list v13;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, va_list);
  v4 = v13;
  if (v13 == v2)
  {
    v5 = 4;
    va_copy(v4, va1);
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  sub_2397A2E14(va2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396C2A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2396C2A38(_QWORD *a1, void **a2)
{
  void **v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void **v18;
  uint64_t v19;
  char *v20;
  char **v21;
  char **v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  BOOL v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _BYTE *v49;
  _BYTE *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t **v67;
  uint64_t **v68;
  uint64_t **v69;
  unsigned int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  _BYTE *v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _OWORD *v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  int v121;
  uint64_t v124;
  uint64_t v125;

  v2 = a2;
  v4 = (char *)*a2;
  v3 = (char *)a2[1];
  if (v3 != *a2)
  {
    do
    {
      v5 = v3 - 24;
      sub_2394EF618((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
      v3 = v5;
    }
    while (v5 != v4);
    v3 = (char *)*v2;
  }
  v2[1] = v4;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3);
  if (v6 <= v7)
  {
    if (v6 < v7)
    {
      for (i = &v3[8 * ((uint64_t)(a1[1] - *a1) >> 2)]; v4 != i; v4 -= 24)
        sub_2394EF618((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
      v2[1] = i;
    }
  }
  else
  {
    sub_2396C7FF4(v2, v6 - v7);
  }
  v9 = a1[3];
  if (a1[4] != v9)
  {
    v10 = 0;
    do
    {
      v11 = 0;
      v125 = v10;
      v124 = v9 + 12 * v10;
      do
      {
        while (1)
        {
          v13 = *(_DWORD *)(v124 + 4 * v11++);
          v14 = v11;
          if (v11 == 3)
            v14 = 0;
          v15 = *(_DWORD *)(v124 + 4 * v14);
          if (v13 <= v15)
            v16 = v15;
          else
            v16 = v13;
          if (v13 >= v15)
            v17 = v15;
          else
            v17 = v13;
          v18 = v2;
          v19 = (uint64_t)*v2 + 24 * v17;
          v21 = (char **)(v19 + 8);
          v20 = *(char **)(v19 + 8);
          v22 = (char **)(v19 + 8);
          v23 = (char *)(v19 + 8);
          if (!v20)
          {
LABEL_42:
            v33 = v23;
            v23 = (char *)operator new(0x40uLL);
            *((_DWORD *)v23 + 8) = v16;
            *((_QWORD *)v23 + 6) = 0;
            *((_QWORD *)v23 + 7) = 0;
            *((_QWORD *)v23 + 5) = 0;
            *(_QWORD *)v23 = 0;
            *((_QWORD *)v23 + 1) = 0;
            *((_QWORD *)v23 + 2) = v33;
            *v22 = v23;
            v34 = **(_QWORD **)v19;
            v35 = v23;
            if (v34)
            {
              *(_QWORD *)v19 = v34;
              v35 = *v22;
            }
            v36 = *v21;
            v37 = v35 == *v21;
            v35[24] = v37;
            if (!v37)
            {
              do
              {
                v38 = *((_QWORD *)v35 + 2);
                if (*(_BYTE *)(v38 + 24))
                  break;
                v39 = *(char **)(v38 + 16);
                v40 = *(_QWORD *)v39;
                if (*(_QWORD *)v39 == v38)
                {
                  v43 = *((_QWORD *)v39 + 1);
                  if (!v43 || (v44 = *(unsigned __int8 *)(v43 + 24), v41 = (_BYTE *)(v43 + 24), v44))
                  {
                    if (*(char **)v38 == v35)
                    {
                      *(_BYTE *)(v38 + 24) = 1;
                      v39[24] = 0;
                      v47 = *(_QWORD *)(v38 + 8);
                      *(_QWORD *)v39 = v47;
                      if (v47)
                        goto LABEL_59;
                    }
                    else
                    {
                      v45 = *(uint64_t **)(v38 + 8);
                      v46 = *v45;
                      *(_QWORD *)(v38 + 8) = *v45;
                      if (v46)
                      {
                        *(_QWORD *)(v46 + 16) = v38;
                        v39 = *(char **)(v38 + 16);
                      }
                      v45[2] = (uint64_t)v39;
                      *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8 * (**(_QWORD **)(v38 + 16) != v38)) = v45;
                      *v45 = v38;
                      *(_QWORD *)(v38 + 16) = v45;
                      v39 = (char *)v45[2];
                      v38 = *(_QWORD *)v39;
                      *((_BYTE *)v45 + 24) = 1;
                      v39[24] = 0;
                      v47 = *(_QWORD *)(v38 + 8);
                      *(_QWORD *)v39 = v47;
                      if (v47)
LABEL_59:
                        *(_QWORD *)(v47 + 16) = v39;
                    }
                    *(_QWORD *)(v38 + 16) = *((_QWORD *)v39 + 2);
                    *(_QWORD *)(*((_QWORD *)v39 + 2) + 8 * (**((_QWORD **)v39 + 2) != (_QWORD)v39)) = v38;
                    *(_QWORD *)(v38 + 8) = v39;
LABEL_65:
                    *((_QWORD *)v39 + 2) = v38;
                    break;
                  }
                }
                else if (!v40 || (v42 = *(unsigned __int8 *)(v40 + 24), v41 = (_BYTE *)(v40 + 24), v42))
                {
                  if (*(char **)v38 == v35)
                  {
                    v111 = *((_QWORD *)v35 + 1);
                    *(_QWORD *)v38 = v111;
                    if (v111)
                    {
                      *(_QWORD *)(v111 + 16) = v38;
                      v39 = *(char **)(v38 + 16);
                    }
                    *((_QWORD *)v35 + 2) = v39;
                    *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8 * (**(_QWORD **)(v38 + 16) != v38)) = v35;
                    *((_QWORD *)v35 + 1) = v38;
                    *(_QWORD *)(v38 + 16) = v35;
                    v39 = (char *)*((_QWORD *)v35 + 2);
                    v35[24] = 1;
                    v39[24] = 0;
                    v38 = *((_QWORD *)v39 + 1);
                    v48 = *(char **)v38;
                    *((_QWORD *)v39 + 1) = *(_QWORD *)v38;
                    if (v48)
LABEL_63:
                      *((_QWORD *)v48 + 2) = v39;
                  }
                  else
                  {
                    *(_BYTE *)(v38 + 24) = 1;
                    v39[24] = 0;
                    v38 = *((_QWORD *)v39 + 1);
                    v48 = *(char **)v38;
                    *((_QWORD *)v39 + 1) = *(_QWORD *)v38;
                    if (v48)
                      goto LABEL_63;
                  }
                  *(_QWORD *)(v38 + 16) = *((_QWORD *)v39 + 2);
                  *(_QWORD *)(*((_QWORD *)v39 + 2) + 8 * (**((_QWORD **)v39 + 2) != (_QWORD)v39)) = v38;
                  *(_QWORD *)v38 = v39;
                  goto LABEL_65;
                }
                *(_BYTE *)(v38 + 24) = 1;
                v35 = v39;
                v39[24] = v39 == v36;
                *v41 = 1;
              }
              while (v39 != v36);
            }
            ++*(_QWORD *)(v19 + 16);
            goto LABEL_67;
          }
          v24 = v19 + 8;
          v25 = *(_QWORD *)(v19 + 8);
          do
          {
            v26 = *(_DWORD *)(v25 + 32);
            v27 = v26 >= v16;
            if (v26 >= v16)
              v28 = (uint64_t *)v25;
            else
              v28 = (uint64_t *)(v25 + 8);
            if (v27)
              v24 = v25;
            v25 = *v28;
          }
          while (*v28);
          if ((char **)v24 != v21 && v16 >= *(_DWORD *)(v24 + 32))
            break;
          while (1)
          {
            while (1)
            {
              v23 = v20;
              v32 = *((_DWORD *)v20 + 8);
              if (v16 >= v32)
                break;
              v20 = *(char **)v23;
              v22 = (char **)v23;
              if (!*(_QWORD *)v23)
                goto LABEL_42;
            }
            if (v32 >= v16)
              break;
            v20 = (char *)*((_QWORD *)v23 + 1);
            if (!v20)
            {
              v22 = (char **)(v23 + 8);
              goto LABEL_42;
            }
          }
LABEL_67:
          v49 = (_BYTE *)*((_QWORD *)v23 + 5);
          if (*((_QWORD *)v23 + 7) - (_QWORD)v49 <= 7uLL)
          {
            v50 = (_BYTE *)*((_QWORD *)v23 + 6);
            v51 = (char *)operator new(8uLL);
            v52 = v50 - v49;
            v53 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
            v54 = v53;
            if (v50 != v49)
            {
              v55 = v50 - 4 - v49;
              if (v55 < 0x2C)
              {
                v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
                goto LABEL_75;
              }
              v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
              if (v50 - v51 - (v52 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
                goto LABEL_169;
              v56 = v52 >> 2;
              v57 = (v55 >> 2) + 1;
              v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
              v59 = &v50[-v58];
              v54 = &v53[-v58];
              v60 = &v51[4 * v56 - 16];
              v61 = (__int128 *)(v50 - 16);
              v62 = v57 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v63 = *v61;
                *((_OWORD *)v60 - 1) = *(v61 - 1);
                *(_OWORD *)v60 = v63;
                v60 -= 32;
                v61 -= 2;
                v62 -= 8;
              }
              while (v62);
              v50 = v59;
              if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_169:
                do
                {
LABEL_75:
                  v64 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  *((_DWORD *)v54 - 1) = v64;
                  v54 -= 4;
                }
                while (v50 != v49);
              }
            }
            *((_QWORD *)v23 + 5) = v54;
            *((_QWORD *)v23 + 6) = v53;
            *((_QWORD *)v23 + 7) = v51 + 8;
            if (v49)
              operator delete(v49);
          }
          v65 = (uint64_t)*v18 + 24 * v17;
          v67 = (uint64_t **)(v65 + 8);
          v66 = *(uint64_t **)(v65 + 8);
          v68 = (uint64_t **)(v65 + 8);
          v69 = (uint64_t **)(v65 + 8);
          if (v66)
          {
            while (1)
            {
              while (1)
              {
                v69 = (uint64_t **)v66;
                v70 = *((_DWORD *)v66 + 8);
                if (v16 >= v70)
                  break;
                v66 = *v69;
                v68 = v69;
                if (!*v69)
                  goto LABEL_85;
              }
              if (v70 >= v16)
                break;
              v66 = v69[1];
              if (!v66)
              {
                v68 = v69 + 1;
                goto LABEL_85;
              }
            }
          }
          else
          {
LABEL_85:
            v71 = v69;
            v69 = (uint64_t **)operator new(0x40uLL);
            *((_DWORD *)v69 + 8) = v16;
            v69[6] = 0;
            v69[7] = 0;
            v69[5] = 0;
            *v69 = 0;
            v69[1] = 0;
            v69[2] = v71;
            *v68 = (uint64_t *)v69;
            v72 = **(_QWORD **)v65;
            v73 = (uint64_t *)v69;
            if (v72)
            {
              *(_QWORD *)v65 = v72;
              v73 = *v68;
            }
            v74 = *v67;
            v37 = v73 == *v67;
            *((_BYTE *)v73 + 24) = v37;
            if (!v37)
            {
              do
              {
                v75 = v73[2];
                if (*(_BYTE *)(v75 + 24))
                  break;
                v76 = *(uint64_t **)(v75 + 16);
                v77 = *v76;
                if (*v76 == v75)
                {
                  v80 = v76[1];
                  if (!v80 || (v81 = *(unsigned __int8 *)(v80 + 24), v78 = (_BYTE *)(v80 + 24), v81))
                  {
                    if (*(uint64_t **)v75 == v73)
                    {
                      *(_BYTE *)(v75 + 24) = 1;
                      *((_BYTE *)v76 + 24) = 0;
                      v84 = *(_QWORD *)(v75 + 8);
                      *v76 = v84;
                      if (v84)
                        goto LABEL_102;
                    }
                    else
                    {
                      v82 = *(uint64_t **)(v75 + 8);
                      v83 = *v82;
                      *(_QWORD *)(v75 + 8) = *v82;
                      if (v83)
                      {
                        *(_QWORD *)(v83 + 16) = v75;
                        v76 = *(uint64_t **)(v75 + 16);
                      }
                      v82[2] = (uint64_t)v76;
                      *(_QWORD *)(*(_QWORD *)(v75 + 16) + 8 * (**(_QWORD **)(v75 + 16) != v75)) = v82;
                      *v82 = v75;
                      *(_QWORD *)(v75 + 16) = v82;
                      v76 = (uint64_t *)v82[2];
                      v75 = *v76;
                      *((_BYTE *)v82 + 24) = 1;
                      *((_BYTE *)v76 + 24) = 0;
                      v84 = *(_QWORD *)(v75 + 8);
                      *v76 = v84;
                      if (v84)
LABEL_102:
                        *(_QWORD *)(v84 + 16) = v76;
                    }
                    *(_QWORD *)(v75 + 16) = v76[2];
                    *(_QWORD *)(v76[2] + 8 * (*(_QWORD *)v76[2] != (_QWORD)v76)) = v75;
                    *(_QWORD *)(v75 + 8) = v76;
LABEL_108:
                    v76[2] = v75;
                    break;
                  }
                }
                else if (!v77 || (v79 = *(unsigned __int8 *)(v77 + 24), v78 = (_BYTE *)(v77 + 24), v79))
                {
                  if (*(uint64_t **)v75 == v73)
                  {
                    v112 = v73[1];
                    *(_QWORD *)v75 = v112;
                    if (v112)
                    {
                      *(_QWORD *)(v112 + 16) = v75;
                      v76 = *(uint64_t **)(v75 + 16);
                    }
                    v73[2] = (uint64_t)v76;
                    *(_QWORD *)(*(_QWORD *)(v75 + 16) + 8 * (**(_QWORD **)(v75 + 16) != v75)) = v73;
                    v73[1] = v75;
                    *(_QWORD *)(v75 + 16) = v73;
                    v76 = (uint64_t *)v73[2];
                    *((_BYTE *)v73 + 24) = 1;
                    *((_BYTE *)v76 + 24) = 0;
                    v75 = v76[1];
                    v85 = *(uint64_t **)v75;
                    v76[1] = *(_QWORD *)v75;
                    if (v85)
LABEL_106:
                      v85[2] = (uint64_t)v76;
                  }
                  else
                  {
                    *(_BYTE *)(v75 + 24) = 1;
                    *((_BYTE *)v76 + 24) = 0;
                    v75 = v76[1];
                    v85 = *(uint64_t **)v75;
                    v76[1] = *(_QWORD *)v75;
                    if (v85)
                      goto LABEL_106;
                  }
                  *(_QWORD *)(v75 + 16) = v76[2];
                  *(_QWORD *)(v76[2] + 8 * (*(_QWORD *)v76[2] != (_QWORD)v76)) = v75;
                  *(_QWORD *)v75 = v76;
                  goto LABEL_108;
                }
                *(_BYTE *)(v75 + 24) = 1;
                v73 = v76;
                *((_BYTE *)v76 + 24) = v76 == v74;
                *v78 = 1;
              }
              while (v76 != v74);
            }
            ++*(_QWORD *)(v65 + 16);
          }
          v87 = (char *)v69[6];
          v86 = (unint64_t)v69[7];
          if ((unint64_t)v87 < v86)
          {
            *(_DWORD *)v87 = v125;
            v12 = (uint64_t)(v87 + 4);
LABEL_15:
            v2 = v18;
            v69[6] = (uint64_t *)v12;
            if (v11 == 3)
              goto LABEL_12;
          }
          else
          {
            v88 = (char *)v69[5];
            v89 = (v87 - v88) >> 2;
            v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 62)
              goto LABEL_165;
            v91 = v86 - (_QWORD)v88;
            if (v91 >> 1 > v90)
              v90 = v91 >> 1;
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
              v92 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v92 = v90;
            if (!v92)
            {
              v93 = 0;
              v94 = (_DWORD *)(4 * v89);
              *(_DWORD *)(4 * v89) = v125;
              v12 = 4 * v89 + 4;
              if (v87 == v88)
                goto LABEL_128;
LABEL_122:
              v95 = v87 - 4 - v88;
              if (v95 < 0x2C)
                goto LABEL_170;
              if ((unint64_t)(v88 - v93) < 0x20)
                goto LABEL_170;
              v96 = (v95 >> 2) + 1;
              v97 = 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
              v98 = &v87[-v97];
              v94 = (_DWORD *)((char *)v94 - v97);
              v99 = &v93[4 * v89 - 16];
              v100 = v87 - 16;
              v101 = v96 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v102 = *(_OWORD *)v100;
                *(v99 - 1) = *((_OWORD *)v100 - 1);
                *v99 = v102;
                v99 -= 2;
                v100 -= 32;
                v101 -= 8;
              }
              while (v101);
              v87 = v98;
              if (v96 != (v96 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_170:
                do
                {
                  v103 = *((_DWORD *)v87 - 1);
                  v87 -= 4;
                  *--v94 = v103;
                }
                while (v87 != v88);
              }
              goto LABEL_128;
            }
            if (v92 >> 62)
              goto LABEL_166;
            v93 = operator new(4 * v92);
            v94 = &v93[4 * v89];
            *v94 = v125;
            v12 = (uint64_t)(v94 + 1);
            if (v87 != v88)
              goto LABEL_122;
LABEL_128:
            v69[5] = (uint64_t *)v94;
            v69[6] = (uint64_t *)v12;
            v69[7] = (uint64_t *)&v93[4 * v92];
            if (!v88)
              goto LABEL_15;
            operator delete(v88);
            v2 = v18;
            v69[6] = (uint64_t *)v12;
            if (v11 == 3)
              goto LABEL_12;
          }
        }
        v30 = *(char **)(v24 + 48);
        v29 = *(_QWORD *)(v24 + 56);
        if ((unint64_t)v30 < v29)
        {
          *(_DWORD *)v30 = v125;
          v31 = (uint64_t)(v30 + 4);
          goto LABEL_158;
        }
        v104 = *(char **)(v24 + 40);
        v105 = (v30 - v104) >> 2;
        v106 = v105 + 1;
        if ((unint64_t)(v105 + 1) >> 62)
LABEL_165:
          sub_2394189F8();
        v107 = v29 - (_QWORD)v104;
        if (v107 >> 1 > v106)
          v106 = v107 >> 1;
        if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
          v108 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v108 = v106;
        if (v108)
        {
          if (v108 >> 62)
LABEL_166:
            sub_239418A80();
          v109 = operator new(4 * v108);
          v110 = &v109[4 * v105];
          *v110 = v125;
          v31 = (uint64_t)(v110 + 1);
          if (v30 == v104)
            goto LABEL_156;
LABEL_150:
          v113 = v30 - 4 - v104;
          if (v113 < 0x2C)
            goto LABEL_171;
          if ((unint64_t)(v104 - v109) < 0x20)
            goto LABEL_171;
          v114 = (v113 >> 2) + 1;
          v115 = 4 * (v114 & 0x7FFFFFFFFFFFFFF8);
          v116 = &v30[-v115];
          v110 = (_DWORD *)((char *)v110 - v115);
          v117 = &v109[4 * v105 - 16];
          v118 = v30 - 16;
          v119 = v114 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v120 = *(_OWORD *)v118;
            *(v117 - 1) = *((_OWORD *)v118 - 1);
            *v117 = v120;
            v117 -= 2;
            v118 -= 32;
            v119 -= 8;
          }
          while (v119);
          v30 = v116;
          if (v114 != (v114 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_171:
            do
            {
              v121 = *((_DWORD *)v30 - 1);
              v30 -= 4;
              *--v110 = v121;
            }
            while (v30 != v104);
          }
          goto LABEL_156;
        }
        v109 = 0;
        v110 = (_DWORD *)(4 * v105);
        *(_DWORD *)(4 * v105) = v125;
        v31 = 4 * v105 + 4;
        if (v30 != v104)
          goto LABEL_150;
LABEL_156:
        *(_QWORD *)(v24 + 40) = v110;
        *(_QWORD *)(v24 + 48) = v31;
        *(_QWORD *)(v24 + 56) = &v109[4 * v108];
        if (v104)
          operator delete(v104);
LABEL_158:
        v2 = v18;
        *(_QWORD *)(v24 + 48) = v31;
      }
      while (v11 != 3);
LABEL_12:
      v10 = v125 + 1;
      v9 = a1[3];
    }
    while (v125 + 1 < 0xAAAAAAAAAAAAAAABLL * ((a1[4] - v9) >> 2));
  }
  return 1;
}

uint64_t sub_2396C342C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  unint64_t v14[45];

  v14[44] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 136))
  {
    v4 = *(_QWORD *)(a1 + 112);
    v5 = *(_QWORD *)(a1 + 120);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 136) = 1;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  if (v7 != v6)
  {
    if (v7 <= v6)
    {
      if (v7 < v6)
        *(_QWORD *)(a1 + 120) = v4 + 4 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
    }
    else
    {
      sub_2394E6878((char **)(a1 + 112), v7 - v6);
    }
  }
  if (a2 <= 0)
    a2 = std::thread::hardware_concurrency();
  sub_2397A2A50((uint64_t)v14, a2, 0);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  v12[0] = &off_250AE32E0;
  v12[1] = a1;
  v12[2] = a1 + 112;
  v13 = v12;
  sub_2397A376C(v14, v8, v12, 0);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_15;
  }
  if (v13)
  {
    v10 = 5;
LABEL_15:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  sub_2397A2D24((uint64_t)v14);
  sub_2397A2E14(v14);
  return 1;
}

void sub_2396C35A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2397A2E14(va);
  _Unwind_Resume(a1);
}

void sub_2396C35B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v2;
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, va_list);
  v4 = v10;
  if (v10 == v2)
  {
    v5 = 4;
    va_copy(v4, va);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  sub_2397A2E14(va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2396C35F8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  int32x4_t v22;
  int32x4_t v23;
  uint64_t v24;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v2 = a1[4] - a1[3];
  if (v2)
  {
    sub_2394E6878((char **)a2, 0xAAAAAAAAAAAAAAABLL * (v2 >> 2));
    v9 = a1[3];
    v8 = a1[4];
    v10 = v8 - v9;
    if (v8 != v9)
    {
      v11 = 0;
      v12 = 0;
      v13 = v10 / 12;
      do
      {
        v14 = (unsigned int *)(a1[3] + 12 * v12);
        v15 = *a1 + 12 * v14[1];
        v16 = *a1 + 12 * *v14;
        v5.i64[0] = *(_QWORD *)v15;
        v5.i32[2] = *(_DWORD *)(v15 + 8);
        v6.i64[0] = *(_QWORD *)v16;
        v6.i32[2] = *(_DWORD *)(v16 + 8);
        v17 = *a1 + 12 * v14[2];
        v7.i64[0] = *(_QWORD *)v17;
        v7.i32[2] = *(_DWORD *)(v17 + 8);
        v18 = vsubq_f32(v5, v6);
        v19 = vsubq_f32(v7, v5);
        v20 = (float32x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
        v21 = (float32x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
        v22 = (int32x4_t)vmulq_n_f32(v18, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.f32, 1), *(float32x2_t *)v18.f32, 1), v20, v20).f32[0]));
        v23 = (int32x4_t)vmulq_n_f32(v19, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1), *(float32x2_t *)v19.f32, 1), v21, v21).f32[0]));
        v7 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v22, (int8x16_t)v22, 0xCuLL), (int8x16_t)v22, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v22, v22), (int8x16_t)v22, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v23, (int8x16_t)v23, 0xCuLL), (int8x16_t)v23, 8uLL));
        v6 = (float32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL);
        v24 = *(_QWORD *)a2 + v11;
        v5 = vmulq_n_f32(v7, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 1), *(float32x2_t *)v7.f32, 1), *(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32).f32[0]));
        *(_DWORD *)(v24 + 8) = v5.i32[2];
        *(_QWORD *)v24 = v5.i64[0];
        ++v12;
        v11 += 12;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_2396C3770(_QWORD *a1, uint64_t a2, double a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t *v24;

  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v11 = a1[3];
  v10 = a1[4];
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 2);
  if (v12 != v9)
  {
    if (v12 <= v9)
    {
      if (v12 < v9)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 4 * ((v10 - v11) >> 2);
    }
    else
    {
      sub_2394E6878((char **)a2, v12 - v9);
      v11 = a1[3];
      v10 = a1[4];
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 2);
    }
  }
  if (v10 != v11)
  {
    v13 = 0;
    v14 = 0;
    __asm { FMOV            V0.2S, #3.0 }
    do
    {
      v20 = (unsigned int *)(a1[3] + 12 * v14);
      v21 = *a1 + 12 * *v20;
      v22 = *a1 + 12 * v20[1];
      v23 = *a1 + 12 * v20[2];
      a5.i64[0] = *(_QWORD *)v21;
      a6.i64[0] = *(_QWORD *)v22;
      a5.i32[2] = *(_DWORD *)(v21 + 8);
      a6.i32[2] = *(_DWORD *)(v22 + 8);
      a7.i64[0] = *(_QWORD *)v23;
      a7.i32[2] = *(_DWORD *)(v23 + 8);
      a5 = vaddq_f32(vaddq_f32(a5, a6), a7);
      v24 = (float32x2_t *)(*(_QWORD *)a2 + v13);
      v24[1].f32[0] = a5.f32[2] / 3.0;
      *v24 = vdiv_f32(*(float32x2_t *)a5.f32, _D0);
      ++v14;
      v13 += 12;
    }
    while (v12 != v14);
  }
  return 1;
}

uint64_t sub_2396C3894(uint64_t *a1, uint64_t *a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;

  v8 = (a2[1] - *a2) >> 2;
  v9 = a1[3];
  v10 = a1[4];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 2);
  if (v11 != v8)
  {
    if (v11 <= v8)
    {
      if (v11 < v8)
        a2[1] = *a2 - 0x5555555555555554 * ((v10 - v9) >> 2);
    }
    else
    {
      sub_2394807B4((uint64_t)a2, v11 - v8);
      v9 = a1[3];
      v10 = a1[4];
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 2);
    }
  }
  if (v10 != v9)
  {
    v12 = 0;
    v13 = *a1;
    v14 = *a2;
    do
    {
      v15 = (unsigned int *)(v9 + 12 * v12);
      v16 = v13 + 12 * *v15;
      v17 = v13 + 12 * v15[1];
      v18 = v13 + 12 * v15[2];
      a4.i64[0] = *(_QWORD *)v17;
      a4.i32[2] = *(_DWORD *)(v17 + 8);
      a5.i64[0] = *(_QWORD *)v16;
      a5.i32[2] = *(_DWORD *)(v16 + 8);
      a6.i64[0] = *(_QWORD *)v18;
      a6.i32[2] = *(_DWORD *)(v18 + 8);
      v19 = (int32x4_t)vsubq_f32(a4, a5);
      v20 = (int32x4_t)vsubq_f32(a6, a5);
      v21 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v19, (int8x16_t)v19, 0xCuLL), (int8x16_t)v19, 8uLL);
      a4 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL);
      a6 = vmlsq_f32(vmulq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL)), a4, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v20, (int8x16_t)v20, 0xCuLL), (int8x16_t)v20, 8uLL));
      a5 = (float32x4_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL);
      *(float *)(v14 + 4 * v12++) = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), *(float32x2_t *)a5.f32, *(float32x2_t *)a5.f32).f32[0])* 0.5;
    }
    while (v11 != v12);
  }
  return 1;
}

float sub_2396C39C8(_QWORD *a1, unsigned int *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int8x16_t v10;

  v5 = *a1 + 12 * *a2;
  v6 = *a1 + 12 * a2[1];
  v7 = *a1 + 12 * a2[2];
  a3.i64[0] = *(_QWORD *)v6;
  a3.i32[2] = *(_DWORD *)(v6 + 8);
  a4.i64[0] = *(_QWORD *)v5;
  a4.i32[2] = *(_DWORD *)(v5 + 8);
  v8 = (int32x4_t)vsubq_f32(a3, a4);
  a5.i64[0] = *(_QWORD *)v7;
  a5.i32[2] = *(_DWORD *)(v7 + 8);
  v9 = (int32x4_t)vsubq_f32(a5, a4);
  v10 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL));
  v9.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
  return sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v10.i8, 1), *(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8).f32[0])* 0.5;
}

BOOL sub_2396C3A58(float **a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  _BOOL4 v10;

  *(_OWORD *)a2 = xmmword_239EC6AF0;
  *(_QWORD *)(a2 + 16) = 0x80000000800000;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
    return 0;
  v4 = -3.4028e38;
  v5 = 3.4028e38;
  v6 = 3.4028e38;
  v7 = -3.4028e38;
  v8 = 3.4028e38;
  v9 = -3.4028e38;
  do
  {
    if (v9 < *v2)
      v9 = *v2;
    *(float *)(a2 + 12) = v9;
    if (*v2 < v8)
      v8 = *v2;
    *(float *)a2 = v8;
    if (v7 < v2[1])
      v7 = v2[1];
    *(float *)(a2 + 16) = v7;
    if (v2[1] < v6)
      v6 = v2[1];
    *(float *)(a2 + 4) = v6;
    if (v4 < v2[2])
      v4 = v2[2];
    *(float *)(a2 + 20) = v4;
    if (v2[2] < v5)
      v5 = v2[2];
    *(float *)(a2 + 8) = v5;
    v2 += 3;
  }
  while (v2 != v3);
  v10 = v8 <= v9;
  if (v6 > v7)
    v10 = 0;
  return v5 <= v4 && v10;
}

uint64_t sub_2396C3B28(_QWORD *a1, uint64_t a2, char a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  void *v30;
  void *__p;

  v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
    return 1;
  v5 = a1[4] - a1[3];
  if (!v5)
    return 1;
  v6 = *(_QWORD *)(a2 + 8) & 0x3FLL;
  if (v3 <= 0x3F && (_DWORD)v6 == 0)
    return 1;
  v9 = 0;
  LODWORD(v10) = 0;
  v11 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 2);
  v12 = *(_QWORD **)a2;
  do
  {
    v10 = v10 + ((*v12 >> v9) & 1);
    v12 += v9 == 63;
    if (v9 == 63)
      v9 = 0;
    else
      ++v9;
  }
  while (v9 != (_DWORD)v6 || v12 != (_QWORD *)(*(_QWORD *)a2 + 8 * (v3 >> 6)));
  if (!(_DWORD)v10)
    return 1;
  v13 = 0;
  v14 = 0;
  v15 = v11 - v10;
  if (v11 != v10)
  {
    if (v15 > 0x1555555555555555)
      sub_2394189F8();
    v13 = (char *)operator new(12 * v15);
    v14 = &v13[12 * v15];
  }
  v16 = 0;
  v17 = v13;
  do
  {
    if (((*(_QWORD *)(*(_QWORD *)a2 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
    {
      v20 = a1[3] + 12 * v16;
      if (v13 < v14)
      {
        v18 = *(_QWORD *)v20;
        *((_DWORD *)v13 + 2) = *(_DWORD *)(v20 + 8);
        *(_QWORD *)v13 = v18;
        v19 = v13 + 12;
      }
      else
      {
        v21 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v17) >> 2) + 1;
        if (v21 > 0x1555555555555555)
          sub_2394189F8();
        if (0x5555555555555556 * ((v14 - v17) >> 2) > v21)
          v21 = 0x5555555555555556 * ((v14 - v17) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v14 - v17) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v22 = 0x1555555555555555;
        else
          v22 = v21;
        if (v22)
        {
          if (v22 > 0x1555555555555555)
            sub_239418A80();
          v23 = (char *)operator new(12 * v22);
        }
        else
        {
          v23 = 0;
        }
        v24 = *(_QWORD *)v20;
        v25 = &v23[4 * ((v13 - v17) >> 2)];
        *((_DWORD *)v25 + 2) = *(_DWORD *)(v20 + 8);
        *(_QWORD *)v25 = v24;
        if (v13 == v17)
        {
          v17 = &v23[4 * ((v13 - v17) >> 2)];
          v14 = &v23[12 * v22];
          v19 = v25 + 12;
          if (!v13)
            goto LABEL_19;
        }
        else
        {
          v26 = &v23[4 * ((v13 - v17) >> 2)];
          do
          {
            v27 = *(_QWORD *)(v13 - 12);
            v13 -= 12;
            v28 = *((_DWORD *)v13 + 2);
            *(_QWORD *)(v26 - 12) = v27;
            v26 -= 12;
            *((_DWORD *)v26 + 2) = v28;
          }
          while (v13 != v17);
          v13 = v17;
          v17 = v26;
          v14 = &v23[12 * v22];
          v19 = v25 + 12;
          if (!v13)
            goto LABEL_19;
        }
        operator delete(v13);
      }
LABEL_19:
      v3 = *(_QWORD *)(a2 + 8);
      v13 = v19;
    }
    ++v16;
  }
  while (v16 < v3);
  v29 = *(_OWORD *)(a1 + 3);
  a1[3] = v17;
  a1[4] = v13;
  __p = (void *)v29;
  a1[5] = v14;
  v30 = (void *)v29;
  if ((a3 & 1) != 0)
  {
    sub_2396C3E30(a1);
    v30 = __p;
  }
  if (v30)
    operator delete(v30);
  return 1;
}

void sub_2396C3DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396C3E30(_QWORD *a1)
{
  char *v1;
  _BYTE *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  char **v8;
  unsigned int *v9;
  unsigned int *i;
  int v11;
  int v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *j;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  __int16 v39;
  char *v40;
  char *k;
  __int16 v42;
  char v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *m;
  uint64_t v52;
  int v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v67;
  char *__p;
  _QWORD *v69;
  int v70;
  int v71;
  unint64_t v72;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;

  v1 = (char *)*a1;
  v2 = (_BYTE *)a1[1];
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v2[-*a1] >> 2);
  if (v2 == (_BYTE *)*a1)
  {
    v8 = (char **)a1;
    v7 = 0;
    v5 = 0;
    v9 = (unsigned int *)a1[3];
    i = (unsigned int *)a1[4];
    if (v9 == i)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (((unint64_t)&v2[-*a1] & 0x8000000000000000) != 0)
    sub_2394189F8();
  v4 = operator new(8 * (((v3 - 1) >> 6) + 1));
  v5 = v4;
  if (v3 >= 0x41)
    v6 = (v3 - 1) >> 6;
  else
    v6 = 0;
  v4[v6] = 0;
  if (v3 >= 0x40)
    memset(v4, 255, 8 * (v3 >> 6));
  if ((v3 & 0x3F) != 0)
    v5[v3 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v1) >> 2);
  v8 = (char **)a1;
  v9 = (unsigned int *)a1[3];
  for (i = (unsigned int *)a1[4]; v9 != i; v9 += 3)
  {
LABEL_13:
    *(_QWORD *)((char *)v5 + (((unint64_t)*v9 >> 3) & 0x1FFFFFF8)) &= ~(1 << *v9);
    *(_QWORD *)((char *)v5 + (((unint64_t)v9[1] >> 3) & 0x1FFFFFF8)) &= ~(1 << v9[1]);
    *(_QWORD *)((char *)v5 + (((unint64_t)v9[2] >> 3) & 0x1FFFFFF8)) &= ~(1 << v9[2]);
  }
LABEL_14:
  if (v7 > 0x3F || (v7 & 0x3F) != 0)
  {
    v12 = 0;
    v11 = 0;
    v13 = v5;
    do
    {
      v11 += (*v13 >> v12) & 1;
      v13 += v12 == 63;
      if (v12 == 63)
        v12 = 0;
      else
        ++v12;
    }
    while (v12 != (v7 & 0x3F) || v13 != &v5[v7 >> 6]);
  }
  else
  {
    v11 = 0;
  }
  v14 = v3 - v11;
  v72 = v7;
  if (v3 == v11)
  {
    v75 = 0;
    v76 = 0;
    v15 = 0;
    v16 = 0;
    v78 = 0;
    v17 = 0;
  }
  else
  {
    if (v14 > 0x1555555555555555)
      sub_2394189F8();
    v16 = (char *)operator new(12 * v14);
    v78 = &v16[12 * v14];
    v15 = (char *)operator new(3 * v14);
    v76 = &v15[3 * v14];
    v17 = (char *)operator new(12 * v14);
    v75 = &v17[12 * v14];
    v7 = v72;
    v8 = (char **)a1;
  }
  v70 = *((unsigned __int8 *)v8 + 72);
  v71 = *((unsigned __int8 *)v8 + 104);
  if (v2 == v1)
  {
    v18 = 0;
    v69 = 0;
    if (v7)
    {
LABEL_30:
      v77 = 0;
      v19 = 0;
      v20 = v16;
      v67 = v17;
      __p = v15;
      while (1)
      {
        while (((*(_QWORD *)((char *)v5 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
        {
          v18[v19++] = -1;
          if (v19 >= v7)
          {
LABEL_91:
            v54 = v67;
            v55 = *v8;
            v56 = __p;
            goto LABEL_94;
          }
        }
        v22 = v19;
        v23 = (uint64_t)&(*v8)[12 * v19];
        if (v16 >= v78)
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v20) >> 2) + 1;
          if (v25 > 0x1555555555555555)
            goto LABEL_120;
          if (0x5555555555555556 * ((v78 - v20) >> 2) > v25)
            v25 = 0x5555555555555556 * ((v78 - v20) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v78 - v20) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v26 = 0x1555555555555555;
          else
            v26 = v25;
          if (v26)
          {
            if (v26 > 0x1555555555555555)
              goto LABEL_117;
            v27 = (char *)operator new(12 * v26);
          }
          else
          {
            v27 = 0;
          }
          v28 = *(_QWORD *)v23;
          v29 = &v27[4 * ((v16 - v20) >> 2)];
          *((_DWORD *)v29 + 2) = *(_DWORD *)(v23 + 8);
          *(_QWORD *)v29 = v28;
          for (j = v29; v16 != v20; *((_DWORD *)j + 2) = v32)
          {
            v31 = *(_QWORD *)(v16 - 12);
            v16 -= 12;
            v32 = *((_DWORD *)v16 + 2);
            *(_QWORD *)(j - 12) = v31;
            j -= 12;
          }
          v78 = &v27[12 * v26];
          v16 = v29 + 12;
          if (v20)
            operator delete(v20);
          v20 = j;
          v7 = v72;
          v8 = (char **)a1;
          v18 = v69;
          v74 = v16;
          if (!v71)
            goto LABEL_57;
        }
        else
        {
          v24 = *(_QWORD *)v23;
          *((_DWORD *)v16 + 2) = *(_DWORD *)(v23 + 8);
          *(_QWORD *)v16 = v24;
          v16 += 12;
          v74 = v16;
          if (!v71)
            goto LABEL_57;
        }
        if (!*((_BYTE *)v8 + 104))
          goto LABEL_116;
        v33 = (uint64_t)&v8[10][3 * v19];
        if (v15 >= v76)
        {
          v35 = __p;
          v36 = 0xAAAAAAAAAAAAAAABLL * (v15 - __p) + 1;
          if (v36 >= 0x5555555555555556)
            sub_2394189F8();
          if (0x5555555555555556 * (v76 - __p) > v36)
            v36 = 0x5555555555555556 * (v76 - __p);
          if (0xAAAAAAAAAAAAAAABLL * (v76 - __p) >= 0x2AAAAAAAAAAAAAAALL)
            v37 = 0x5555555555555555;
          else
            v37 = v36;
          if (v37)
          {
            if (v37 >= 0x5555555555555556)
              goto LABEL_117;
            v38 = (char *)operator new(3 * v37);
            v16 = v74;
            v35 = __p;
          }
          else
          {
            v38 = 0;
          }
          v39 = *(_WORD *)v33;
          v40 = &v38[v15 - __p];
          v40[2] = *(_BYTE *)(v33 + 2);
          *(_WORD *)v40 = v39;
          for (k = v40; v15 != v35; k[2] = v43)
          {
            v42 = *(_WORD *)(v15 - 3);
            v15 -= 3;
            v43 = v15[2];
            *(_WORD *)(k - 3) = v42;
            k -= 3;
          }
          v76 = &v38[3 * v37];
          v15 = v40 + 3;
          if (v35)
            operator delete(v35);
          __p = k;
          v7 = v72;
          v8 = (char **)a1;
          v18 = v69;
          v22 = v19;
          if (!v70)
            goto LABEL_32;
          goto LABEL_74;
        }
        v34 = *(_WORD *)v33;
        v15[2] = *(_BYTE *)(v33 + 2);
        *(_WORD *)v15 = v34;
        v15 += 3;
LABEL_57:
        if (!v70)
          goto LABEL_32;
LABEL_74:
        if (!*((_BYTE *)v8 + 72))
LABEL_116:
          sub_2394875CC();
        v44 = (uint64_t)&v8[6][12 * v22];
        if (v17 < v75)
        {
          v21 = *(_QWORD *)v44;
          *((_DWORD *)v17 + 2) = *(_DWORD *)(v44 + 8);
          *(_QWORD *)v17 = v21;
          v17 += 12;
        }
        else
        {
          v45 = v67;
          v46 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v67) >> 2) + 1;
          if (v46 > 0x1555555555555555)
LABEL_120:
            sub_2394189F8();
          if (0x5555555555555556 * ((v75 - v67) >> 2) > v46)
            v46 = 0x5555555555555556 * ((v75 - v67) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v75 - v67) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v47 = 0x1555555555555555;
          else
            v47 = v46;
          if (v47)
          {
            if (v47 > 0x1555555555555555)
LABEL_117:
              sub_239418A80();
            v48 = (char *)operator new(12 * v47);
            v45 = v67;
            v16 = v74;
          }
          else
          {
            v48 = 0;
          }
          v49 = *(_QWORD *)v44;
          v50 = &v48[4 * ((v17 - v67) >> 2)];
          *((_DWORD *)v50 + 2) = *(_DWORD *)(v44 + 8);
          *(_QWORD *)v50 = v49;
          for (m = v50; v17 != v45; *((_DWORD *)m + 2) = v53)
          {
            v52 = *(_QWORD *)(v17 - 12);
            v17 -= 12;
            v53 = *((_DWORD *)v17 + 2);
            *(_QWORD *)(m - 12) = v52;
            m -= 12;
          }
          v75 = &v48[12 * v47];
          v17 = v50 + 12;
          if (v45)
            operator delete(v45);
          v67 = m;
          v7 = v72;
          v8 = (char **)a1;
          v18 = v69;
        }
LABEL_32:
        v18[v19] = v77++;
        if (++v19 >= v7)
          goto LABEL_91;
      }
    }
  }
  else
  {
    if (v3 >> 61)
      sub_2394189F8();
    v18 = operator new(0x5555555555555558 * ((v2 - v1) >> 2));
    bzero(v18, 0x5555555555555558 * ((v2 - v1) >> 2));
    v7 = v72;
    v69 = v18;
    if (v72)
      goto LABEL_30;
  }
  v54 = v17;
  v56 = v15;
  v55 = v1;
  v20 = v16;
LABEL_94:
  v80 = v56;
  v79 = v54;
  *v8 = v20;
  v8[1] = v16;
  v81 = v55;
  v8[2] = v78;
  if (v71)
  {
    if (!*((_BYTE *)v8 + 104))
      goto LABEL_121;
    v57 = *((_OWORD *)v8 + 5);
    v8[10] = v56;
    v8[11] = v15;
    v80 = (char *)v57;
    v8[12] = v76;
  }
  if (!v70)
    goto LABEL_100;
  if (!*((_BYTE *)v8 + 72))
LABEL_121:
    sub_2394875CC();
  v58 = v8[6];
  v8[6] = v54;
  v8[7] = v17;
  v8[8] = v75;
  v79 = v58;
LABEL_100:
  v59 = v8[3];
  v60 = v8[4];
  v61 = v60 - v59;
  if (v60 == v59)
  {
    if (!v18)
      goto LABEL_107;
  }
  else
  {
    v62 = 0;
    v63 = v61 / 12;
    if (v63 <= 1)
      v63 = 1;
    do
    {
      v64 = &v59[12 * v62];
      v65 = *((unsigned int *)v64 + 1);
      *(_DWORD *)v64 = v18[*(unsigned int *)v64];
      *((_DWORD *)v64 + 1) = v18[v65];
      *((_DWORD *)v64 + 2) = v18[*((unsigned int *)v64 + 2)];
      ++v62;
    }
    while (v63 != v62);
  }
  operator delete(v18);
LABEL_107:
  if (v79)
    operator delete(v79);
  if (v80)
    operator delete(v80);
  if (v81)
    operator delete(v81);
  if (v5)
    operator delete(v5);
  return 1;
}

void sub_2396C47A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  uint64_t v32;
  void *v34;
  void *v35;

  if (__p)
    operator delete(__p);
  if (a26)
  {
    operator delete(a26);
    v34 = a29;
    if (!a29)
    {
LABEL_5:
      v35 = *(void **)(v32 - 136);
      if (!v35)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a29;
    if (!a29)
      goto LABEL_5;
  }
  operator delete(v34);
  v35 = *(void **)(v32 - 136);
  if (!v35)
  {
LABEL_6:
    if (!v31)
      goto LABEL_7;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v32 - 128) = v35;
  operator delete(v35);
  if (!v31)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(v31);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396C4880(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void **v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  unsigned int **v41;
  unsigned int *v42;
  unsigned int *v43;
  _QWORD *v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  int64_t v52;
  char *v53;
  void **v54;
  void **v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  char *v60;
  char *v61;
  void *v62;
  char *v63;
  void *v64;
  void *v65;
  _QWORD *v67;
  uint64_t v68;
  void *__p;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  char *v73;
  char *v74;
  void *v75[2];
  __int128 v76;
  __int128 v77;
  char *v78;
  char *v79;
  uint64_t v80;

  v78 = 0;
  v79 = 0;
  v80 = 0;
  sub_2396C1F84(a1, &v78, 0, 0);
  v76 = 0u;
  v77 = 0u;
  *(_OWORD *)v75 = 0u;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v5 = a1[3];
  v4 = a1[4];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2);
  if (v4 != v5)
  {
    if (v6 >> 62)
      sub_2394189F8();
    v72 = operator new(0xAAAAAAAAAAAAAAACLL * ((v4 - v5) >> 2));
    v73 = (char *)v72;
    v74 = (char *)v72 - 0x5555555555555554 * ((v4 - v5) >> 2);
  }
  __p = 0;
  v70 = 0;
  v71 = 0;
  if (v4 == v5)
    goto LABEL_66;
  if (v4 - v5 < 0)
    sub_2394189F8();
  v68 = a2;
  __p = operator new(8 * (((v6 - 1) >> 6) + 1));
  v70 = 0;
  v71 = ((v6 - 1) >> 6) + 1;
  sub_23942D8C8(&__p, v6, 0);
  v8 = a1[3];
  v7 = a1[4];
  v67 = a1;
  if (v7 == v8)
    goto LABEL_64;
  v9 = 0;
  while (2)
  {
    if ((*((_QWORD *)__p + (v9 >> 6)) & (1 << v9)) != 0)
      goto LABEL_10;
    v13 = (void **)v75[1];
    v14 = (void **)v76;
    *((_QWORD *)&v77 + 1) = 0;
    v15 = v76 - (unint64_t)v75[1];
    if ((unint64_t)v76 - (unint64_t)v75[1] >= 0x11)
    {
      do
      {
        operator delete(*v13);
        v14 = (void **)v76;
        v13 = (void **)((char *)v75[1] + 8);
        v75[1] = v13;
        v15 = v76 - (_QWORD)v13;
      }
      while ((_QWORD)v76 - (_QWORD)v13 > 0x10uLL);
    }
    v16 = v15 >> 3;
    if (v16 == 1)
    {
      v17 = 512;
    }
    else
    {
      if (v16 != 2)
      {
        v17 = v77;
        goto LABEL_20;
      }
      v17 = 1024;
    }
    *(_QWORD *)&v77 = v17;
LABEL_20:
    v18 = (((char *)v14 - (char *)v13) << 7) - 1;
    v73 = (char *)v72;
    if (v14 == v13)
      v18 = 0;
    v19 = *((_QWORD *)&v77 + 1);
    v20 = *((_QWORD *)&v77 + 1) + v17;
    if (v18 == v20)
    {
      sub_2394F0374((uint64_t)v75);
      v19 = *((_QWORD *)&v77 + 1);
      v13 = (void **)v75[1];
      v20 = v77 + *((_QWORD *)&v77 + 1);
    }
    (*(_DWORD **)((char *)v13 + ((v20 >> 7) & 0x1FFFFFFFFFFFFF8)))[v20 & 0x3FF] = v9;
    *((_QWORD *)&v77 + 1) = v19 + 1;
    *((_QWORD *)__p + (v9 >> 6)) |= 1 << v9;
    while (*((_QWORD *)&v77 + 1))
    {
      v21 = *(_DWORD *)(*(_QWORD *)((char *)v75[1] + (((unint64_t)v77 >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * (v77 & 0x3FF));
      *(_QWORD *)&v77 = v77 + 1;
      --*((_QWORD *)&v77 + 1);
      if ((unint64_t)v77 >= 0x800)
      {
        operator delete(*(void **)v75[1]);
        v75[1] = (char *)v75[1] + 8;
        *(_QWORD *)&v77 = v77 - 1024;
      }
      v22 = v73;
      if (v73 < v74)
      {
        *(_DWORD *)v73 = v21;
        v23 = (uint64_t)(v22 + 4);
        goto LABEL_49;
      }
      v24 = (char *)v72;
      v25 = v73 - (_BYTE *)v72;
      v26 = (v73 - (_BYTE *)v72) >> 2;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62)
        sub_2394189F8();
      v28 = v74 - (_BYTE *)v72;
      if ((v74 - (_BYTE *)v72) >> 1 > v27)
        v27 = v28 >> 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
        v29 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 >> 62)
          sub_239418A80();
        v30 = (char *)operator new(4 * v29);
        v31 = &v30[4 * v26];
        *(_DWORD *)v31 = v21;
        v23 = (uint64_t)(v31 + 4);
        if (v22 == v24)
          goto LABEL_47;
LABEL_41:
        v32 = v22 - 4 - v24;
        if (v32 < 0x2C)
          goto LABEL_98;
        if ((unint64_t)(v22 - &v30[v25]) < 0x20)
          goto LABEL_98;
        v33 = (v32 >> 2) + 1;
        v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
        v35 = &v22[-v34];
        v31 -= v34;
        v36 = &v30[4 * v26 - 16];
        v37 = v22 - 16;
        v38 = v33 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v39 = *(_OWORD *)v37;
          *((_OWORD *)v36 - 1) = *((_OWORD *)v37 - 1);
          *(_OWORD *)v36 = v39;
          v36 -= 32;
          v37 -= 32;
          v38 -= 8;
        }
        while (v38);
        v22 = v35;
        if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_98:
          do
          {
            v40 = *((_DWORD *)v22 - 1);
            v22 -= 4;
            *((_DWORD *)v31 - 1) = v40;
            v31 -= 4;
          }
          while (v22 != v24);
        }
        goto LABEL_47;
      }
      v30 = 0;
      v31 = (char *)(4 * v26);
      *(_DWORD *)(4 * v26) = v21;
      v23 = 4 * v26 + 4;
      if (v22 != v24)
        goto LABEL_41;
LABEL_47:
      v72 = v31;
      v73 = (char *)v23;
      v74 = &v30[4 * v29];
      if (v24)
        operator delete(v24);
LABEL_49:
      v73 = (char *)v23;
      v41 = (unsigned int **)&v78[24 * v21];
      v42 = *v41;
      v43 = v41[1];
      if (*v41 != v43)
      {
        v44 = __p;
        do
        {
          v45 = *v42;
          if (((1 << v45) & v44[v45 >> 6]) == 0)
          {
            v46 = (char *)v75[1];
            if ((void *)v76 == v75[1])
              v47 = 0;
            else
              v47 = (((_QWORD)v76 - (unint64_t)v75[1]) << 7) - 1;
            v48 = *((_QWORD *)&v77 + 1);
            v49 = *((_QWORD *)&v77 + 1) + v77;
            if (v47 == *((_QWORD *)&v77 + 1) + (_QWORD)v77)
            {
              sub_2394F0374((uint64_t)v75);
              v48 = *((_QWORD *)&v77 + 1);
              v46 = (char *)v75[1];
              v49 = v77 + *((_QWORD *)&v77 + 1);
              v44 = __p;
            }
            *(_DWORD *)(*(_QWORD *)&v46[(v49 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v49 & 0x3FF)) = v45;
            *((_QWORD *)&v77 + 1) = v48 + 1;
            v44[v45 >> 6] |= 1 << v45;
          }
          ++v42;
        }
        while (v42 != v43);
      }
    }
    v50 = *(_QWORD **)(v68 + 8);
    if ((unint64_t)v50 >= *(_QWORD *)(v68 + 16))
    {
      v11 = sub_23951A940((char **)v68, (uint64_t)&v72);
      v12 = v68;
    }
    else
    {
      *v50 = 0;
      v50[1] = 0;
      v50[2] = 0;
      v51 = v72;
      v52 = v73 - (_BYTE *)v72;
      if (v73 != v72)
      {
        if (v52 < 0)
          sub_2394189F8();
        v53 = (char *)operator new(v73 - (_BYTE *)v72);
        *v50 = v53;
        v50[1] = v53;
        v10 = &v53[4 * (v52 >> 2)];
        v50[2] = v10;
        memcpy(v53, v51, v52);
        v50[1] = v10;
      }
      v11 = (char *)(v50 + 3);
      v12 = v68;
      *(_QWORD *)(v68 + 8) = v50 + 3;
    }
    *(_QWORD *)(v12 + 8) = v11;
    v8 = v67[3];
    v7 = v67[4];
LABEL_10:
    if (++v9 < 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 2))
      continue;
    break;
  }
LABEL_64:
  if (__p)
    operator delete(__p);
LABEL_66:
  if (v72)
  {
    v73 = (char *)v72;
    operator delete(v72);
  }
  v54 = (void **)v75[1];
  v55 = (void **)v76;
  *((_QWORD *)&v77 + 1) = 0;
  v56 = v76 - (unint64_t)v75[1];
  if ((unint64_t)v76 - (unint64_t)v75[1] >= 0x11)
  {
    do
    {
      operator delete(*v54);
      v55 = (void **)v76;
      v54 = (void **)((char *)v75[1] + 8);
      v75[1] = v54;
      v56 = v76 - (_QWORD)v54;
    }
    while ((_QWORD)v76 - (_QWORD)v54 > 0x10uLL);
  }
  v57 = v56 >> 3;
  if (v57 == 1)
  {
    v58 = 512;
LABEL_75:
    *(_QWORD *)&v77 = v58;
  }
  else if (v57 == 2)
  {
    v58 = 1024;
    goto LABEL_75;
  }
  if (v54 != v55)
  {
    do
    {
      v59 = *v54++;
      operator delete(v59);
    }
    while (v54 != v55);
    if ((void *)v76 != v75[1])
      *(_QWORD *)&v76 = v76 + (((unint64_t)v75[1] - v76 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v75[0])
    operator delete(v75[0]);
  v60 = v78;
  if (v78)
  {
    v61 = v79;
    v62 = v78;
    if (v79 != v78)
    {
      v63 = v79;
      do
      {
        v65 = (void *)*((_QWORD *)v63 - 3);
        v63 -= 24;
        v64 = v65;
        if (v65)
        {
          *((_QWORD *)v61 - 2) = v64;
          operator delete(v64);
        }
        v61 = v63;
      }
      while (v63 != v60);
      v62 = v78;
    }
    v79 = v60;
    operator delete(v62);
  }
  return 1;
}

void sub_2396C4EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23942A16C((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_2396C4EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (__p)
    operator delete(__p);
  sub_23953439C((uint64_t)&a17);
  sub_23942A16C((void **)(v17 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_2396C4F40(_QWORD *a1, int **a2, _QWORD *a3, _QWORD **a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int v13;
  unsigned int *v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int *v19;
  float v20;
  size_t prime;
  int *v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void **v32;
  void **v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  void *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  int *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  __int32 *v68;
  unsigned __int32 v69;
  uint64_t v70;
  unsigned __int32 v71;
  unsigned __int32 v72;
  unsigned __int32 v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unsigned __int32 v79;
  BOOL v80;
  uint64_t *v81;
  int v82;
  unsigned int v83;
  __int32 *v84;
  __int32 *v85;
  __int32 *v86;
  _BOOL4 v87;
  __int32 *v88;
  __int32 *v89;
  int v90;
  uint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _BYTE *v110;
  _DWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _OWORD *v116;
  char *v117;
  uint64_t v118;
  __int128 v119;
  int v120;
  char *v121;
  int8x8_t v122;
  BOOL v123;
  size_t v124;
  char *v125;
  char *v126;
  unint64_t v127;
  uint8x8_t v128;
  uint64_t v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  unsigned int *v136;
  unsigned int *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t *v151;
  float v152;
  size_t v153;
  unint64_t i;
  unint64_t v155;
  uint64_t *v156;
  unint64_t v157;
  _DWORD *v158;
  size_t v159;
  unint64_t v160;
  _QWORD *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  void *v165;
  BOOL v166;
  _QWORD *v167;
  _QWORD *v168;
  void *v169;
  unint64_t v170;
  uint8x8_t v171;
  uint64_t v172;
  void **v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  void **v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void **v196;
  void **v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  void *v201;
  char *v202;
  char *v203;
  void *v204;
  char *v205;
  void *v206;
  void *v207;
  _QWORD *v208;
  _QWORD *v209;
  void *v210;
  void **v211;
  void **v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  void *v216;
  _QWORD *v217;
  _QWORD *v218;
  void *v219;
  char *v220;
  char *v221;
  void *v222;
  _QWORD *v223;
  _QWORD *v224;
  void *v225;
  void *v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  _QWORD **v234;
  int **v235;
  unint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  unsigned int v239;
  void *v240[2];
  void *v241[2];
  __int128 v242;
  void *v243[2];
  unint64_t v244;
  void *v245;
  char *v246;
  unint64_t v247;
  char v248;
  void *v249;
  void *v250;
  char *v251;
  void *v252[2];
  void *__p[2];
  int v254;
  void *v255[2];
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  float v260;
  _QWORD *v261;
  unint64_t v262;
  unint64_t v263;
  char *v264;
  char *v265;
  unint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;

  v9 = (uint64_t)a1;
  v267 = 0;
  v268 = 0;
  v269 = 0;
  v10 = a1[1] - *a1;
  if (v10)
    sub_239520580((void **)&v267, 0xAAAAAAAAAAAAAAABLL * (v10 >> 2));
  v11 = *a2;
  v12 = a2[1];
  if (*a2 == v12)
  {
    v264 = 0;
    v265 = 0;
    v266 = 0;
    v261 = 0;
    v262 = 0;
    v263 = 0;
LABEL_9:
    v19 = v11;
    goto LABEL_10;
  }
  do
  {
    v13 = *v11;
    v14 = (unsigned int *)(*(_QWORD *)(v9 + 24) + 12 * *v11);
    sub_2396BFBB0(*v14, v14[1], *v11, &v267);
    sub_2396BFBB0(v14[1], v14[2], v13, &v267);
    sub_2396BFBB0(v14[2], *v14, v13, &v267);
    ++v11;
  }
  while (v11 != v12);
  v11 = *a2;
  v15 = a2[1];
  v264 = 0;
  v265 = 0;
  v266 = 0;
  v261 = 0;
  v262 = 0;
  v263 = 0;
  v16 = (char *)v15 - (char *)v11;
  if (!v16)
    goto LABEL_9;
  if (v16 < 0)
    sub_2394189F8();
  v17 = v16 >> 2;
  v18 = ((unint64_t)((v16 >> 2) - 1) >> 6) + 1;
  v261 = operator new(8 * v18);
  v262 = 0;
  v263 = v18;
  sub_23942D8C8(&v261, v17, 0);
  v11 = *a2;
  v19 = a2[1];
LABEL_10:
  v258 = 0u;
  v259 = 0u;
  v260 = 1.0;
  v20 = (float)(unint64_t)(v19 - v11);
  prime = (unint64_t)v20;
  if ((unint64_t)v20 == 1)
  {
    prime = 2;
LABEL_12:
    sub_239427FE0((uint64_t)&v258, prime);
    goto LABEL_13;
  }
  if ((prime & ((unint64_t)v20 - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)v20);
    v122 = *(int8x8_t *)((char *)&v258 + 8);
    v123 = prime >= *((_QWORD *)&v258 + 1);
    if (prime > *((_QWORD *)&v258 + 1))
      goto LABEL_12;
  }
  else
  {
    v122 = 0;
    v123 = 1;
    if (prime)
      goto LABEL_12;
  }
  if (!v123)
  {
    v127 = vcvtps_u32_f32((float)*((unint64_t *)&v259 + 1) / v260);
    if (*(_QWORD *)&v122 < 3uLL || (v128 = (uint8x8_t)vcnt_s8(v122), v128.i16[0] = vaddlv_u8(v128), v128.u32[0] > 1uLL))
    {
      v127 = std::__next_prime(v127);
    }
    else
    {
      v129 = 1 << -(char)__clz(v127 - 1);
      if (v127 >= 2)
        v127 = v129;
    }
    if (prime <= v127)
      prime = v127;
    if (prime < *(_QWORD *)&v122)
      goto LABEL_12;
  }
LABEL_13:
  v22 = *a2;
  v237 = v9;
  v238 = a3;
  if (a2[1] == *a2)
  {
    v125 = 0;
    v256 = 0u;
    v257 = 0u;
    *(_OWORD *)v255 = 0u;
    *(_OWORD *)v252 = 0u;
    *(_OWORD *)__p = 0u;
    v254 = 1065353216;
LABEL_154:
    v249 = 0;
    v250 = 0;
    v251 = 0;
    goto LABEL_155;
  }
  v23 = 0;
  v24 = 0;
  do
  {
    v255[0] = &v22[v23];
    *((_DWORD *)sub_2394F126C((uint64_t)&v258, (unsigned int *)&v22[v23], (uint64_t)&unk_239EC6E98, (_DWORD **)v255) + 5) = v24++;
    v22 = *a2;
    v25 = a2[1];
    ++v23;
  }
  while (v24 < v25 - *a2);
  v256 = 0u;
  v257 = 0u;
  *(_OWORD *)v255 = 0u;
  *(_OWORD *)v252 = 0u;
  *(_OWORD *)__p = 0u;
  v254 = 1065353216;
  if (v25 == v22)
  {
    v125 = 0;
    goto LABEL_154;
  }
  v26 = 0;
  v234 = a4;
  v235 = a2;
  do
  {
    v30 = v26 >> 6;
    v31 = 1 << v26;
    if ((v261[v26 >> 6] & (1 << v26)) != 0)
      goto LABEL_20;
    v236 = v26;
    v32 = (void **)v255[1];
    v33 = (void **)v256;
    *((_QWORD *)&v257 + 1) = 0;
    v34 = v256 - (unint64_t)v255[1];
    if ((unint64_t)v256 - (unint64_t)v255[1] >= 0x11)
    {
      do
      {
        operator delete(*v32);
        v33 = (void **)v256;
        v32 = (void **)((char *)v255[1] + 8);
        v255[1] = v32;
        v34 = v256 - (_QWORD)v32;
      }
      while ((_QWORD)v256 - (_QWORD)v32 > 0x10uLL);
    }
    v35 = v34 >> 3;
    if (v35 == 1)
    {
      v36 = 512;
    }
    else
    {
      if (v35 != 2)
        goto LABEL_29;
      v36 = 1024;
    }
    *(_QWORD *)&v257 = v36;
LABEL_29:
    if (__p[1])
    {
      v37 = __p[0];
      if (__p[0])
      {
        do
        {
          v38 = (_QWORD *)*v37;
          operator delete(v37);
          v37 = v38;
        }
        while (v38);
      }
      __p[0] = 0;
      v39 = (char *)v252[1];
      if (v252[1])
      {
        v40 = 0;
        do
          *((_QWORD *)v252[0] + (_QWORD)v40++) = 0;
        while (v39 != v40);
      }
      __p[1] = 0;
      v32 = (void **)v255[1];
      v33 = (void **)v256;
    }
    v41 = (*a2)[v236];
    if (v33 == v32)
      v42 = 0;
    else
      v42 = (((char *)v33 - (char *)v32) << 7) - 1;
    v43 = *((_QWORD *)&v257 + 1);
    v44 = *((_QWORD *)&v257 + 1) + v257;
    if (v42 == *((_QWORD *)&v257 + 1) + (_QWORD)v257)
    {
      sub_2394F0374((uint64_t)v255);
      v43 = *((_QWORD *)&v257 + 1);
      v32 = (void **)v255[1];
      v44 = v257 + *((_QWORD *)&v257 + 1);
      a3 = v238;
    }
    (*(_DWORD **)((char *)v32 + ((v44 >> 7) & 0x1FFFFFFFFFFFFF8)))[v44 & 0x3FF] = v41;
    *((_QWORD *)&v257 + 1) = v43 + 1;
    v240[0] = 0;
    v240[1] = 0;
    v241[0] = 0;
    v45 = (_QWORD *)a3[1];
    if ((unint64_t)v45 >= a3[2])
    {
      v46 = sub_2396C8920((char **)a3, (uint64_t)v240);
      v47 = v240[0];
      a3[1] = v46;
      if (v47)
      {
        v240[1] = v47;
        operator delete(v47);
        v46 = (char *)a3[1];
      }
    }
    else
    {
      *v45 = 0;
      v45[1] = 0;
      v45[2] = 0;
      *(_OWORD *)v45 = *(_OWORD *)v240;
      v45[2] = v241[0];
      v46 = (char *)(v45 + 3);
      a3[1] = v45 + 3;
    }
    v49 = (char *)*((_QWORD *)v46 - 2);
    v48 = *((_QWORD *)v46 - 1);
    if ((unint64_t)v49 < v48)
    {
      *(_DWORD *)v49 = v41;
      v50 = (uint64_t)(v49 + 4);
      goto LABEL_66;
    }
    v51 = (char *)*((_QWORD *)v46 - 3);
    v52 = (v49 - v51) >> 2;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 62)
      sub_2394189F8();
    v54 = v48 - (_QWORD)v51;
    if (v54 >> 1 > v53)
      v53 = v54 >> 1;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
      v55 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    if (v55)
    {
      if (v55 >> 62)
        sub_239418A80();
      v56 = operator new(4 * v55);
      v57 = (int *)&v56[4 * v52];
      *v57 = v41;
      v50 = (uint64_t)(v57 + 1);
      if (v49 == v51)
        goto LABEL_64;
LABEL_58:
      v58 = v49 - 4 - v51;
      if (v58 < 0x2C)
        goto LABEL_339;
      if ((unint64_t)(v51 - v56) < 0x20)
        goto LABEL_339;
      v59 = (v58 >> 2) + 1;
      v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
      v61 = &v49[-v60];
      v57 = (int *)((char *)v57 - v60);
      v62 = &v56[4 * v52 - 16];
      v63 = v49 - 16;
      v64 = v59 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v65 = *(_OWORD *)v63;
        *(v62 - 1) = *((_OWORD *)v63 - 1);
        *v62 = v65;
        v62 -= 2;
        v63 -= 32;
        v64 -= 8;
      }
      while (v64);
      v49 = v61;
      if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_339:
        do
        {
          v66 = *((_DWORD *)v49 - 1);
          v49 -= 4;
          *--v57 = v66;
        }
        while (v49 != v51);
      }
      goto LABEL_64;
    }
    v56 = 0;
    v57 = (int *)(4 * v52);
    *(_DWORD *)(4 * v52) = v41;
    v50 = 4 * v52 + 4;
    if (v49 != v51)
      goto LABEL_58;
LABEL_64:
    *((_QWORD *)v46 - 3) = v57;
    *((_QWORD *)v46 - 2) = v50;
    *((_QWORD *)v46 - 1) = &v56[4 * v55];
    if (v51)
      operator delete(v51);
LABEL_66:
    v9 = v237;
    *((_QWORD *)v46 - 2) = v50;
    v261[v30] |= v31;
LABEL_67:
    if (*((_QWORD *)&v257 + 1))
    {
      v239 = *(_DWORD *)(*(_QWORD *)((char *)v255[1] + (((unint64_t)v257 >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * (v257 & 0x3FF));
      *(_QWORD *)&v257 = v257 + 1;
      --*((_QWORD *)&v257 + 1);
      if ((unint64_t)v257 >= 0x800)
      {
        operator delete(*(void **)v255[1]);
        v255[1] = (char *)v255[1] + 8;
        *(_QWORD *)&v257 = v257 - 1024;
      }
      v67 = 0;
      v68 = (__int32 *)(*(_QWORD *)(v9 + 24) + 12 * v239);
      while (1)
      {
        v69 = v68[v67++];
        v70 = v67;
        if (v67 == 3)
          v70 = 0;
        v71 = v68[v70];
        if (v69 >= v71)
          v72 = v71;
        else
          v72 = v69;
        if (v69 <= v71)
          v73 = v71;
        else
          v73 = v69;
        v74 = &v267[24 * v72];
        v77 = *((_QWORD *)v74 + 1);
        v75 = v74 + 8;
        v76 = v77;
        if (!v77)
          goto LABEL_72;
        v78 = v75;
        do
        {
          v79 = *(_DWORD *)(v76 + 28);
          v80 = v79 >= v73;
          if (v79 >= v73)
            v81 = (uint64_t *)v76;
          else
            v81 = (uint64_t *)(v76 + 8);
          if (v80)
            v78 = (char *)v76;
          v76 = *v81;
        }
        while (*v81);
        if (v78 == v75)
          goto LABEL_72;
        if (v73 < *((_DWORD *)v78 + 7))
          goto LABEL_72;
        v82 = *((_DWORD *)v78 + 8);
        LODWORD(v240[0]) = 0;
        v83 = *(_DWORD *)&v78[4 * (v82 == v239) + 32];
        LODWORD(v240[0]) = v83;
        if (v83 == -1)
          goto LABEL_72;
        v84 = (__int32 *)(*(_QWORD *)(v9 + 24) + 12 * v83);
        v85 = wmemchr(v68, v72, 3uLL);
        v86 = v68 + 3;
        if (v85)
          v86 = v85;
        v87 = v68[(v86 - v68 + 1) % 3uLL] == v73;
        v88 = wmemchr(v84, v72, 3uLL);
        v89 = v88 ? v88 : v84 + 3;
        if (v87 != (v84[(v89 - v84 + 1) % 3uLL] == v73))
          break;
        sub_239456168((uint64_t)v252, (unsigned int *)v240, v240);
LABEL_72:
        if (v67 == 3)
          goto LABEL_67;
      }
      v90 = (int)v240[0];
      if ((*((_QWORD *)&v258 + 1) & (*((_QWORD *)&v258 + 1) - 1)) != 0)
      {
        v92 = LODWORD(v240[0]);
        if (*((_QWORD *)&v258 + 1) <= (unint64_t)LODWORD(v240[0]))
          v92 = (unint64_t)LODWORD(v240[0]) % *((_QWORD *)&v258 + 1);
        v91 = *(uint64_t **)(v258 + 8 * v92);
        do
        {
          do
            v91 = (uint64_t *)*v91;
          while (v91[1] != LODWORD(v240[0]));
        }
        while (*((_DWORD *)v91 + 4) != LODWORD(v240[0]));
      }
      else
      {
        v91 = *(uint64_t **)(v258 + 8 * ((DWORD2(v258) - 1) & (uint64_t)v240[0]));
        do
        {
          do
            v91 = (uint64_t *)*v91;
          while (v91[1] != LODWORD(v240[0]));
        }
        while (*((_DWORD *)v91 + 4) != LODWORD(v240[0]));
      }
      v93 = *((unsigned int *)v91 + 5);
      v94 = v93 >> 6;
      v95 = 1 << v93;
      if (((1 << v93) & v261[v93 >> 6]) != 0)
        goto LABEL_72;
      v96 = (char *)v255[1];
      if ((void *)v256 == v255[1])
        v97 = 0;
      else
        v97 = (((_QWORD)v256 - (unint64_t)v255[1]) << 7) - 1;
      v98 = *((_QWORD *)&v257 + 1);
      v99 = *((_QWORD *)&v257 + 1) + v257;
      if (v97 == *((_QWORD *)&v257 + 1) + (_QWORD)v257)
      {
        sub_2394F0374((uint64_t)v255);
        v98 = *((_QWORD *)&v257 + 1);
        v96 = (char *)v255[1];
        v99 = v257 + *((_QWORD *)&v257 + 1);
        v90 = (int)v240[0];
      }
      *(_DWORD *)(*(_QWORD *)&v96[(v99 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v99 & 0x3FF)) = v90;
      *((_QWORD *)&v257 + 1) = v98 + 1;
      v100 = v238[1];
      v102 = *(char **)(v100 - 16);
      v101 = *(_QWORD *)(v100 - 8);
      if ((unint64_t)v102 < v101)
      {
        *(_DWORD *)v102 = v240[0];
        v103 = (uint64_t)(v102 + 4);
LABEL_136:
        *(_QWORD *)(v100 - 16) = v103;
        v261[v94] |= v95;
        v9 = v237;
        goto LABEL_72;
      }
      v104 = *(char **)(v100 - 24);
      v105 = (v102 - v104) >> 2;
      v106 = v105 + 1;
      if ((unint64_t)(v105 + 1) >> 62)
        sub_2394189F8();
      v107 = v101 - (_QWORD)v104;
      if (v107 >> 1 > v106)
        v106 = v107 >> 1;
      if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
        v108 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v108 = v106;
      if (v108)
      {
        if (v108 >> 62)
          sub_239418A80();
        v109 = v108;
        v110 = operator new(4 * v108);
        v108 = v109;
        v111 = &v110[4 * v105];
        *v111 = v240[0];
        v103 = (uint64_t)(v111 + 1);
        if (v102 == v104)
          goto LABEL_134;
LABEL_128:
        v112 = v102 - 4 - v104;
        if (v112 < 0x2C)
          goto LABEL_340;
        if ((unint64_t)(v104 - v110) < 0x20)
          goto LABEL_340;
        v113 = (v112 >> 2) + 1;
        v114 = 4 * (v113 & 0x7FFFFFFFFFFFFFF8);
        v115 = &v102[-v114];
        v111 = (_DWORD *)((char *)v111 - v114);
        v116 = &v110[4 * v105 - 16];
        v117 = v102 - 16;
        v118 = v113 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v119 = *(_OWORD *)v117;
          *(v116 - 1) = *((_OWORD *)v117 - 1);
          *v116 = v119;
          v116 -= 2;
          v117 -= 32;
          v118 -= 8;
        }
        while (v118);
        v102 = v115;
        if (v113 != (v113 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_340:
          do
          {
            v120 = *((_DWORD *)v102 - 1);
            v102 -= 4;
            *--v111 = v120;
          }
          while (v102 != v104);
        }
      }
      else
      {
        v110 = 0;
        v111 = (_DWORD *)(4 * v105);
        *(_DWORD *)(4 * v105) = v240[0];
        v103 = 4 * v105 + 4;
        if (v102 != v104)
          goto LABEL_128;
      }
LABEL_134:
      *(_QWORD *)(v100 - 24) = v111;
      *(_QWORD *)(v100 - 16) = v103;
      *(_QWORD *)(v100 - 8) = &v110[4 * v108];
      if (v104)
        operator delete(v104);
      goto LABEL_136;
    }
    v121 = v265;
    if ((unint64_t)v265 >= v266)
    {
      v27 = (char *)sub_239558E38((void **)&v264, (uint64_t)v252);
      v9 = v237;
      a4 = v234;
    }
    else
    {
      sub_239559050((uint64_t)v265, (uint64_t)v252);
      a4 = v234;
      v27 = v121 + 40;
    }
    a2 = v235;
    v26 = v236;
    v265 = v27;
    v22 = *v235;
    v25 = v235[1];
    a3 = v238;
LABEL_20:
    ++v26;
    v28 = (char *)v25 - (char *)v22;
    v29 = v25 - v22;
  }
  while (v26 < v29);
  v249 = 0;
  v250 = 0;
  v251 = 0;
  if (v25 == v22)
  {
    v125 = 0;
  }
  else
  {
    if (v28 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_2394189F8();
    v124 = 2 * v28;
    v125 = (char *)operator new(2 * v28);
    v126 = &v125[8 * v29];
    v249 = v125;
    v251 = v126;
    memset(v125, 255, v124);
    v250 = v126;
    a3 = v238;
    a2 = v235;
  }
LABEL_155:
  v130 = (char *)*a3;
  v131 = (a3[1] - *a3) / 24;
  if (a3[1] != *a3)
  {
    v132 = 0;
    v133 = v258;
    if (v131 <= 1)
      v134 = 1;
    else
      v134 = (a3[1] - *a3) / 24;
    do
    {
      v135 = &v130[24 * v132];
      v136 = *(unsigned int **)v135;
      v137 = (unsigned int *)*((_QWORD *)v135 + 1);
      if (v136 != v137)
      {
        v138 = *((_QWORD *)&v258 + 1);
        if ((v138 & (v138 - 1)) != 0)
        {
          do
          {
            v142 = *v136;
            v143 = v142;
            if (v138 <= v142)
              v143 = v142 % v138;
            v144 = *(uint64_t **)(v133 + 8 * v143);
            do
            {
              do
                v144 = (uint64_t *)*v144;
              while (v144[1] != v142);
            }
            while (*((_DWORD *)v144 + 4) != (_DWORD)v142);
            *(_QWORD *)&v125[8 * *((unsigned int *)v144 + 5)] = v132;
            ++v136;
          }
          while (v136 != v137);
        }
        else
        {
          v139 = *((_QWORD *)&v258 + 1) + 0xFFFFFFFFLL;
          do
          {
            v140 = *v136;
            v141 = *(uint64_t **)(v133 + 8 * (v139 & v140));
            do
            {
              do
                v141 = (uint64_t *)*v141;
              while (v141[1] != v140);
            }
            while (*((_DWORD *)v141 + 4) != (_DWORD)v140);
            *(_QWORD *)&v125[8 * *((unsigned int *)v141 + 5)] = v132;
            ++v136;
          }
          while (v136 != v137);
        }
      }
      ++v132;
    }
    while (v132 != v134);
  }
  if (v131 > 1)
    *a5 = 1;
  sub_23941C5D8((uint64_t)a4, v131, 1uLL);
  v145 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  if (v145 <= 2)
  {
    v248 = 1;
    v240[0] = v261;
    LODWORD(v240[1]) = 0;
    v245 = &v261[v262 >> 6];
    LODWORD(v246) = v262 & 0x3F;
    if (sub_239458E50((uint64_t)v240, (uint64_t)&v245, &v248) != a2[1] - *a2)
    {
      sub_239A444D4((uint64_t)"unknown file", 663, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if (a3[1] - *a3 == 48)
      **a4 &= ~2uLL;
    if ((sub_2396C6798(v9, &v249, &v258, (uint64_t *)&v267) & 1) == 0)
      *a6 = 1;
    goto LABEL_281;
  }
  v245 = 0;
  v246 = 0;
  v247 = 0;
  sub_2395135EC((uint64_t)&v245, v145);
  if (a3[1] == *a3)
  {
    v243[0] = 0;
    v243[1] = 0;
    v244 = 0;
    goto LABEL_236;
  }
  v146 = 0;
  while (2)
  {
    *(_OWORD *)v240 = 0u;
    *(_OWORD *)v241 = 0u;
    LODWORD(v242) = 1065353216;
    v151 = (unint64_t *)&v264[40 * v146];
    v152 = (float)v151[3];
    v153 = (unint64_t)v152;
    if ((unint64_t)v152 == 1)
    {
      v153 = 2;
      goto LABEL_189;
    }
    if ((v153 & ((unint64_t)v152 - 1)) != 0)
    {
      v153 = std::__next_prime((unint64_t)v152);
      v165 = v240[1];
      v166 = (void *)v153 >= v240[1];
      if ((void *)v153 > v240[1])
        goto LABEL_189;
    }
    else
    {
      v165 = 0;
      v166 = 1;
      if (v153)
        goto LABEL_189;
    }
    if (!v166)
    {
      v170 = vcvtps_u32_f32((float)(unint64_t)v241[1] / *(float *)&v242);
      if ((unint64_t)v165 < 3
        || (v171 = (uint8x8_t)vcnt_s8((int8x8_t)v165), v171.i16[0] = vaddlv_u8(v171), v171.u32[0] > 1uLL))
      {
        v170 = std::__next_prime(v170);
      }
      else
      {
        v172 = 1 << -(char)__clz(v170 - 1);
        if (v170 >= 2)
          v170 = v172;
      }
      if (v153 <= v170)
        v153 = v170;
      if (v153 < (unint64_t)v165)
LABEL_189:
        sub_239427FE0((uint64_t)v240, v153);
    }
    for (i = v151[2]; i; i = *(_QWORD *)i)
    {
      v155 = *(unsigned int *)(i + 16);
      if ((*((_QWORD *)&v258 + 1) & (*((_QWORD *)&v258 + 1) - 1)) != 0)
      {
        v157 = *(unsigned int *)(i + 16);
        if (*((_QWORD *)&v258 + 1) <= v155)
          v157 = v155 % *((_QWORD *)&v258 + 1);
        v156 = *(uint64_t **)(v258 + 8 * v157);
        do
        {
          do
            v156 = (uint64_t *)*v156;
          while (v156[1] != v155);
        }
        while (*((_DWORD *)v156 + 4) != (_DWORD)v155);
      }
      else
      {
        v156 = *(uint64_t **)(v258 + 8 * ((DWORD2(v258) - 1) & v155));
        do
        {
          do
            v156 = (uint64_t *)*v156;
          while (v156[1] != v155);
        }
        while (*((_DWORD *)v156 + 4) != (_DWORD)v155);
      }
      LODWORD(v243[0]) = *((_QWORD *)v249 + *((unsigned int *)v156 + 5));
      sub_2396C8A78((uint64_t)v240, (unsigned int *)v243, v243);
    }
    v158 = v241[0];
    v243[1] = 0;
    v244 = 0;
    v243[0] = 0;
    if (v241[0])
    {
      v159 = 0;
      v160 = -1;
      v161 = v241[0];
      do
      {
        v161 = (_QWORD *)*v161;
        ++v160;
        v159 += 4;
      }
      while (v161);
      if (v160 >= 0x3FFFFFFFFFFFFFFFLL)
        sub_2394189F8();
      v162 = (char *)operator new(v159);
      v163 = 0;
      v243[0] = v162;
      v244 = (unint64_t)&v162[v159];
      do
      {
        *(_DWORD *)&v162[v163] = v158[4];
        v158 = *(_DWORD **)v158;
        v163 += 4;
      }
      while (v158);
      v243[1] = &v162[v163];
    }
    v164 = v246;
    if ((unint64_t)v246 >= v247)
    {
      v246 = sub_2396C8920((char **)&v245, (uint64_t)v243);
      if (v243[0])
      {
        v243[1] = v243[0];
        operator delete(v243[0]);
      }
    }
    else
    {
      *(_QWORD *)v246 = 0;
      *((_QWORD *)v164 + 1) = 0;
      *((_QWORD *)v164 + 2) = 0;
      *(_OWORD *)v164 = *(_OWORD *)v243;
      *((_QWORD *)v164 + 2) = v244;
      v246 = v164 + 24;
    }
    v167 = v241[0];
    if (v241[0])
    {
      do
      {
        v168 = (_QWORD *)*v167;
        operator delete(v167);
        v167 = v168;
      }
      while (v168);
    }
    v169 = v240[0];
    v240[0] = 0;
    if (v169)
      operator delete(v169);
    ++v146;
    v148 = *v238;
    v147 = v238[1];
    v149 = v147 - *v238;
    v150 = 0xAAAAAAAAAAAAAAABLL * (v149 >> 3);
    if (v146 < v150)
      continue;
    break;
  }
  v243[0] = 0;
  v243[1] = 0;
  v244 = 0;
  if (v147 != v148)
  {
    if (v149 < 0)
      sub_2394189F8();
    v243[0] = operator new(8 * (((v150 - 1) >> 6) + 1));
    v243[1] = 0;
    v244 = ((v150 - 1) >> 6) + 1;
    sub_23942D8C8(v243, v150, 0);
  }
LABEL_236:
  *(_OWORD *)v241 = 0u;
  v242 = 0u;
  *(_OWORD *)v240 = 0u;
  sub_2394F0374((uint64_t)v240);
  v173 = (void **)v240[1];
  v174 = *((_QWORD *)&v242 + 1);
  *(_DWORD *)(*(_QWORD *)((char *)v240[1] + ((((_QWORD)v242 + *((_QWORD *)&v242 + 1)) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((v242 + *((_QWORD *)&v242 + 1)) & 0x3FF)) = 0;
  *((_QWORD *)&v242 + 1) = v174 + 1;
  *(_QWORD *)v243[0] |= 1uLL;
  **a4 |= 1uLL;
  v175 = *((_QWORD *)&v242 + 1);
  if (*((_QWORD *)&v242 + 1))
  {
    v176 = v242;
    do
    {
      v177 = (*(unsigned int **)((char *)v173 + ((v176 >> 7) & 0x1FFFFFFFFFFFFF8)))[v176 & 0x3FF];
      v178 = *(_QWORD *)((char *)*a4 + ((v177 >> 3) & 0x1FFFFFF8));
      *(_QWORD *)&v242 = ++v176;
      *((_QWORD *)&v242 + 1) = v175 - 1;
      if (v176 >= 0x800)
      {
        operator delete(*v173);
        v173 = (void **)((char *)v240[1] + 8);
        v176 = v242 - 1024;
        v240[1] = (char *)v240[1] + 8;
        *(_QWORD *)&v242 = v242 - 1024;
      }
      v179 = (uint64_t *)((char *)v245 + 24 * v177);
      v180 = v179[1];
      v181 = *v179;
      if (v180 != *v179)
      {
        v182 = 0;
        v183 = (1 << v177) & v178;
        do
        {
          v184 = *(unsigned int *)(v181 + 4 * v182);
          v185 = (char *)v243[0];
          v186 = v184 >> 6;
          v187 = 1 << v184;
          v188 = *a4;
          if (((1 << v184) & *((_QWORD *)v243[0] + (v184 >> 6))) != 0)
          {
            if ((v183 != 0) == ((v188[v186] & v187) != 0))
              goto LABEL_257;
          }
          else
          {
            if (v183)
              v189 = v188[v186] & ~v187;
            else
              v189 = v188[v186] | v187;
            v190 = (void **)v241[0];
            v191 = ((char *)v241[0] - (char *)v173) << 7;
            v192 = v186;
            v188[v192] = v189;
            *(_QWORD *)&v185[v192 * 8] |= v187;
            if (v190 == v173)
              v193 = 0;
            else
              v193 = v191 - 1;
            v194 = *((_QWORD *)&v242 + 1);
            v176 = v242;
            v195 = *((_QWORD *)&v242 + 1) + v242;
            if (v193 == *((_QWORD *)&v242 + 1) + (_QWORD)v242)
            {
              sub_2394F0374((uint64_t)v240);
              v194 = *((_QWORD *)&v242 + 1);
              v176 = v242;
              v173 = (void **)v240[1];
              v195 = v242 + *((_QWORD *)&v242 + 1);
              v180 = v179[1];
              v181 = *v179;
            }
            (*(_DWORD **)((char *)v173 + ((v195 >> 7) & 0x1FFFFFFFFFFFFF8)))[v195 & 0x3FF] = v184;
            *((_QWORD *)&v242 + 1) = v194 + 1;
          }
          ++v182;
        }
        while (v182 < (v180 - v181) >> 2);
      }
      v175 = *((_QWORD *)&v242 + 1);
    }
    while (*((_QWORD *)&v242 + 1));
  }
  if ((sub_2396C6798(v237, &v249, &v258, (uint64_t *)&v267) & 1) == 0)
LABEL_257:
    *a6 = 1;
  v196 = (void **)v240[1];
  v197 = (void **)v241[0];
  *((_QWORD *)&v242 + 1) = 0;
  v198 = (char *)v241[0] - (char *)v240[1];
  if ((void *)((char *)v241[0] - (char *)v240[1]) >= (void *)0x11)
  {
    do
    {
      operator delete(*v196);
      v197 = (void **)v241[0];
      v196 = (void **)((char *)v240[1] + 8);
      v240[1] = v196;
      v198 = (char *)v241[0] - (char *)v196;
    }
    while ((void *)((char *)v241[0] - (char *)v196) > (void *)0x10);
  }
  v199 = v198 >> 3;
  if (v199 == 1)
  {
    v200 = 512;
LABEL_264:
    *(_QWORD *)&v242 = v200;
  }
  else if (v199 == 2)
  {
    v200 = 1024;
    goto LABEL_264;
  }
  if (v196 != v197)
  {
    do
    {
      v201 = *v196++;
      operator delete(v201);
    }
    while (v196 != v197);
    if (v241[0] != v240[1])
      v241[0] = (char *)v241[0] + (((char *)v240[1] - (char *)v241[0] + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v240[0])
    operator delete(v240[0]);
  if (v243[0])
    operator delete(v243[0]);
  v202 = (char *)v245;
  if (v245)
  {
    v203 = v246;
    v204 = v245;
    if (v246 != v245)
    {
      v205 = v246;
      do
      {
        v207 = (void *)*((_QWORD *)v205 - 3);
        v205 -= 24;
        v206 = v207;
        if (v207)
        {
          *((_QWORD *)v203 - 2) = v206;
          operator delete(v206);
        }
        v203 = v205;
      }
      while (v205 != v202);
      v204 = v245;
    }
    v246 = v202;
    operator delete(v204);
  }
LABEL_281:
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  v208 = __p[0];
  if (__p[0])
  {
    do
    {
      v209 = (_QWORD *)*v208;
      operator delete(v208);
      v208 = v209;
    }
    while (v209);
  }
  v210 = v252[0];
  v252[0] = 0;
  if (v210)
    operator delete(v210);
  v211 = (void **)v255[1];
  v212 = (void **)v256;
  *((_QWORD *)&v257 + 1) = 0;
  v213 = v256 - (unint64_t)v255[1];
  if ((unint64_t)v256 - (unint64_t)v255[1] >= 0x11)
  {
    do
    {
      operator delete(*v211);
      v212 = (void **)v256;
      v211 = (void **)((char *)v255[1] + 8);
      v255[1] = v211;
      v213 = v256 - (_QWORD)v211;
    }
    while ((_QWORD)v256 - (_QWORD)v211 > 0x10uLL);
  }
  v214 = v213 >> 3;
  if (v214 == 1)
  {
    v215 = 512;
LABEL_293:
    *(_QWORD *)&v257 = v215;
  }
  else if (v214 == 2)
  {
    v215 = 1024;
    goto LABEL_293;
  }
  if (v211 != v212)
  {
    do
    {
      v216 = *v211++;
      operator delete(v216);
    }
    while (v211 != v212);
    if ((void *)v256 != v255[1])
      *(_QWORD *)&v256 = v256 + (((unint64_t)v255[1] - v256 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v255[0])
    operator delete(v255[0]);
  v217 = (_QWORD *)v259;
  if ((_QWORD)v259)
  {
    do
    {
      v218 = (_QWORD *)*v217;
      operator delete(v217);
      v217 = v218;
    }
    while (v218);
  }
  v219 = (void *)v258;
  *(_QWORD *)&v258 = 0;
  if (v219)
    operator delete(v219);
  if (v261)
    operator delete(v261);
  v220 = v264;
  if (v264)
  {
    v221 = v265;
    v222 = v264;
    if (v265 != v264)
    {
      do
      {
        v223 = (_QWORD *)*((_QWORD *)v221 - 3);
        if (v223)
        {
          do
          {
            v224 = (_QWORD *)*v223;
            operator delete(v223);
            v223 = v224;
          }
          while (v224);
        }
        v226 = (void *)*((_QWORD *)v221 - 5);
        v221 -= 40;
        v225 = v226;
        *(_QWORD *)v221 = 0;
        if (v226)
          operator delete(v225);
      }
      while (v221 != v220);
      v222 = v264;
    }
    v265 = v220;
    operator delete(v222);
  }
  v227 = v267;
  if (v267)
  {
    v228 = v268;
    v229 = v267;
    if (v268 != v267)
    {
      do
      {
        v230 = v228 - 24;
        sub_239421038((uint64_t)(v228 - 24), *((_QWORD **)v228 - 2));
        v228 = v230;
      }
      while (v230 != v227);
      v229 = v267;
    }
    v268 = v227;
    operator delete(v229);
  }
  return 1;
}

void sub_2396C6404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,_QWORD *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void **a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  _QWORD *v48;
  _QWORD *v49;
  void **v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  void *v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;

  if (__p)
    operator delete(__p);
  v48 = a37;
  if (a37)
  {
    do
    {
      v49 = (_QWORD *)*v48;
      operator delete(v48);
      v48 = v49;
    }
    while (v49);
  }
  if (a35)
    operator delete(a35);
  v50 = a42;
  v51 = a43;
  if ((unint64_t)(a43 - (_QWORD)a42) >= 0x11)
  {
    do
    {
      operator delete(*v50);
      v51 = a43;
      v50 = a42 + 1;
      a42 = v50;
    }
    while ((unint64_t)(a43 - (_QWORD)v50) > 0x10);
  }
  while (v50 != (void **)v51)
  {
    v52 = *v50++;
    operator delete(v52);
  }
  if (a41)
    operator delete(a41);
  v53 = *(_QWORD **)(v46 - 192);
  if (v53)
  {
    do
    {
      v54 = (_QWORD *)*v53;
      operator delete(v53);
      v53 = v54;
    }
    while (v54);
  }
  v55 = *(void **)(v46 - 208);
  *(_QWORD *)(v46 - 208) = 0;
  if (v55)
  {
    operator delete(v55);
    v56 = *(void **)(v46 - 160);
    if (!v56)
    {
LABEL_17:
      v57 = *(_QWORD **)(v46 - 136);
      if (!v57)
        goto LABEL_18;
      goto LABEL_22;
    }
  }
  else
  {
    v56 = *(void **)(v46 - 160);
    if (!v56)
      goto LABEL_17;
  }
  operator delete(v56);
  v57 = *(_QWORD **)(v46 - 136);
  if (!v57)
  {
LABEL_18:
    v58 = *(char **)(v46 - 112);
    if (!v58)
      goto LABEL_19;
    goto LABEL_31;
  }
LABEL_22:
  v59 = *(_QWORD **)(v46 - 128);
  v60 = v57;
  if (v59 != v57)
  {
    do
    {
      v61 = (_QWORD *)*(v59 - 3);
      if (v61)
      {
        do
        {
          v62 = (_QWORD *)*v61;
          operator delete(v61);
          v61 = v62;
        }
        while (v62);
      }
      v64 = (void *)*(v59 - 5);
      v59 -= 5;
      v63 = v64;
      *v59 = 0;
      if (v64)
        operator delete(v63);
    }
    while (v59 != v57);
    v60 = *(void **)(v46 - 136);
  }
  *(_QWORD *)(v46 - 128) = v57;
  operator delete(v60);
  v58 = *(char **)(v46 - 112);
  if (!v58)
LABEL_19:
    _Unwind_Resume(exception_object);
LABEL_31:
  v65 = *(char **)(v46 - 104);
  v66 = v58;
  if (v65 != v58)
  {
    do
    {
      v67 = v65 - 24;
      sub_239421038((uint64_t)(v65 - 24), *((_QWORD **)v65 - 2));
      v65 = v67;
    }
    while (v67 != v58);
    v66 = *(void **)(v46 - 112);
  }
  *(_QWORD *)(v46 - 104) = v58;
  operator delete(v66);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396C66D0(__int32 *a1, __int32 *a2, __int32 *a3)
{
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;
  _BOOL4 v9;
  __int32 *v10;
  __int32 *v11;

  v6 = a1 + 3;
  v7 = wmemchr(a1, *a3, 3uLL);
  if (v7)
    v8 = v7;
  else
    v8 = v6;
  v9 = a1[(v8 - a1 + 1) % 3uLL] == a3[1];
  v10 = wmemchr(a2, *a3, 3uLL);
  if (v10)
    v11 = v10;
  else
    v11 = a2 + 3;
  return v9 ^ (a2[(v11 - a2 + 1) % 3uLL] == a3[1]);
}

uint64_t sub_2396C6798(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int32 v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int8x8_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  unint64_t v25;
  __int32 *v26;
  __int32 *v27;
  uint64_t v28;
  int v29;
  __int32 *v30;
  __int32 *v31;
  _BOOL4 v32;
  __int32 *v33;
  __int32 *v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  _QWORD *v40;

  v5 = *a4;
  v4 = a4[1];
  if (v4 != *a4)
  {
    v6 = 0;
    v7 = 0;
    v40 = a3;
    do
    {
      v8 = (_QWORD *)(v5 + 24 * v6);
      v11 = (_QWORD *)*v8;
      v9 = v8 + 1;
      v10 = v11;
      if (v11 != v9)
      {
        while (1)
        {
          v12 = *((unsigned int *)v10 + 8);
          if ((_DWORD)v12 != -1)
          {
            v13 = *((unsigned int *)v10 + 9);
            if ((_DWORD)v13 != -1)
            {
              v14 = (int8x8_t)a3[1];
              v15 = (uint8x8_t)vcnt_s8(v14);
              v15.i16[0] = vaddlv_u8(v15);
              if (v15.u32[0] > 1uLL)
              {
                v16 = *((unsigned int *)v10 + 8);
                if (*(_QWORD *)&v14 <= v12)
                  v16 = v12 % *(_QWORD *)&v14;
              }
              else
              {
                v16 = (v14.i32[0] - 1) & v12;
              }
              v17 = *a3;
              v18 = *(uint64_t ***)(*a3 + 8 * v16);
              if (v18 && (v19 = *v18) != 0)
              {
                if (v15.u32[0] >= 2uLL)
                {
                  while (v19[1] != v12 || *((_DWORD *)v19 + 4) != (_DWORD)v12)
                    v19 = (uint64_t *)*v19;
                }
                else
                {
                  while (v19[1] != v12 || *((_DWORD *)v19 + 4) != (_DWORD)v12)
                    v19 = (uint64_t *)*v19;
                }
                v20 = *((unsigned int *)v19 + 5);
              }
              else
              {
                v20 = MEMORY[0x14];
              }
              v21 = (int *)(*a2 + 8 * v20);
              v22 = *(_QWORD *)(a1 + 24);
              v23 = *v21;
              if (v15.u32[0] >= 2uLL)
              {
                v25 = *((unsigned int *)v10 + 9);
                if (*(_QWORD *)&v14 <= v13)
                  v25 = v13 % *(_QWORD *)&v14;
                v24 = *(uint64_t **)(v17 + 8 * v25);
                do
                {
                  do
                    v24 = (uint64_t *)*v24;
                  while (v24[1] != v13);
                }
                while (*((_DWORD *)v24 + 4) != (_DWORD)v13);
              }
              else
              {
                v24 = *(uint64_t **)(v17 + 8 * ((v14.i32[0] - 1) & v13));
                do
                {
                  do
                    v24 = (uint64_t *)*v24;
                  while (v24[1] != v13);
                }
                while (*((_DWORD *)v24 + 4) != (_DWORD)v13);
              }
              v26 = (__int32 *)(v22 + 12 * v12);
              v27 = (__int32 *)(v22 + 12 * v13);
              v28 = *(_QWORD *)(*a2 + 8 * *((unsigned int *)v24 + 5));
              v29 = *((_DWORD *)v10 + 7);
              v30 = wmemchr(v26, v7, 3uLL);
              if (v30)
                v31 = v30;
              else
                v31 = v26 + 3;
              v32 = v26[(v31 - v26 + 1) % 3uLL] == v29;
              v33 = wmemchr(v27, v7, 3uLL);
              if (v33)
                v34 = v33;
              else
                v34 = v27 + 3;
              if (v32 == (v27[(v34 - v27 + 1) % 3uLL] == v29))
              {
                a3 = v40;
                if (v23 == (_DWORD)v28)
                  return 0;
              }
              else
              {
                a3 = v40;
                if (v23 != (_DWORD)v28)
                  return 0;
              }
            }
          }
          v35 = (_QWORD *)v10[1];
          if (v35)
          {
            do
            {
              v36 = v35;
              v35 = (_QWORD *)*v35;
            }
            while (v35);
          }
          else
          {
            do
            {
              v36 = (_QWORD *)v10[2];
              v37 = *v36 == (_QWORD)v10;
              v10 = v36;
            }
            while (!v37);
          }
          v10 = v36;
          if (v36 == v9)
          {
            v5 = *a4;
            v4 = a4[1];
            break;
          }
        }
      }
      v6 = ++v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) > v7);
  }
  return 1;
}

void sub_2396C6A9C(uint64_t a1, uint64_t a2, char a3)
{
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t **v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;

  v6 = *(char **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a1 + 56);
  if (v7 > (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v6) >> 3)
  {
    if (v7 >> 61)
LABEL_38:
      sub_2394189F8();
    v8 = 8 * v7;
    v9 = (char *)operator new(8 * v7);
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = &v9[v8];
    if (v6)
      operator delete(v6);
  }
  v31 = a3;
  v10 = *(uint64_t ***)(a1 + 48);
  if (v10)
  {
    v11 = *(char **)(a2 + 8);
    while (1)
    {
      v13 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v11 >= v13)
        break;
      *(_QWORD *)v11 = *((unsigned int *)v10 + 4);
      v12 = (uint64_t)(v11 + 8);
LABEL_8:
      *(_QWORD *)(a2 + 8) = v12;
      v10 = (uint64_t **)*v10;
      v11 = (char *)v12;
      if (!v10)
        goto LABEL_35;
    }
    v14 = *(char **)a2;
    v15 = (uint64_t)&v11[-*(_QWORD *)a2];
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      goto LABEL_38;
    v18 = v13 - (_QWORD)v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        sub_239418A80();
      v20 = operator new(8 * v19);
      v21 = &v20[8 * v16];
      *v21 = *((unsigned int *)v10 + 4);
      v12 = (uint64_t)(v21 + 1);
      if (v11 == v14)
        goto LABEL_33;
    }
    else
    {
      v20 = 0;
      v21 = (_QWORD *)(8 * v16);
      *(_QWORD *)(8 * v16) = *((unsigned int *)v10 + 4);
      v12 = 8 * v16 + 8;
      if (v11 == v14)
        goto LABEL_33;
    }
    v22 = v11 - 8 - v14;
    if (v22 >= 0x168)
    {
      if (&v20[v15 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v20[v15 - 8])
      {
        v23 = v11;
      }
      else if (&v11[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
      {
        v23 = v11;
      }
      else if ((unint64_t)(v11 - v20 - v15) >= 0x20)
      {
        v24 = (v22 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v23 = &v11[-v25];
        v21 = (_QWORD *)((char *)v21 - v25);
        v26 = &v20[8 * v16 - 16];
        v27 = v11 - 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *(_OWORD *)v27;
          *(v26 - 1) = *((_OWORD *)v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 32;
          v28 -= 4;
        }
        while (v28);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_33:
          *(_QWORD *)a2 = v21;
          *(_QWORD *)(a2 + 8) = v12;
          *(_QWORD *)(a2 + 16) = &v20[8 * v19];
          if (v14)
            operator delete(v14);
          goto LABEL_8;
        }
      }
      else
      {
        v23 = v11;
      }
    }
    else
    {
      v23 = v11;
    }
    do
    {
      v30 = *((_QWORD *)v23 - 1);
      v23 -= 8;
      *--v21 = v30;
    }
    while (v23 != v14);
    goto LABEL_33;
  }
LABEL_35:
  if ((v31 & 1) != 0)
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
}

void sub_2396C6CEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_250AE3228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2396C6D00(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_250AE3228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2396C6D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      v5 = v3;
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void sub_2396C6DB4(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_2394189F8();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_2394B7258(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_23942156C(v10, *v6, v6[1], (v6[1] - *v6) >> 2);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_2394B7258(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_23942156C(v10, *v6, v6[1], (v6[1] - *v6) >> 2);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_2396C7018(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2396C7020(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

int8x16_t *sub_2396C7028(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8;
  uint64_t v9;
  int8x16_t *v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int32 *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int32x4_t *v36;
  int8x16_t *v37;
  uint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int *v41;
  int v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  char *v53;
  int64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  int8x16_t *v58;
  int32x4_t *v59;
  uint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  __int32 v63;
  char *v64;
  size_t v65;
  uint64_t v66;
  int8x16_t *v67;
  __int32 *v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  __int32 v80;
  int8x16_t *v81;
  unint64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int32x4_t *v87;
  int8x16_t *v88;
  uint64_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int v92;

  v8 = *(_QWORD *)a1;
  v9 = (uint64_t)a2 - *(_QWORD *)a1;
  v10 = (int8x16_t *)(*(_QWORD *)a1 + (v9 & 0xFFFFFFFFFFFFFFFCLL));
  v11 = a7 - 1;
  if (a7 < 1)
    return v10;
  v14 = v9 >> 2;
  v16 = *(int8x16_t **)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  if (a7 <= (v15 - (uint64_t)v16) >> 2)
  {
    v23 = (char *)v16 - (char *)v10;
    v24 = ((char *)v16 - (char *)v10) >> 2;
    if (v24 >= a7)
    {
      v25 = a4 - 4 * a7;
      v28 = *(__int32 **)(a1 + 8);
      goto LABEL_48;
    }
    v25 = a4 - 4 * v24;
    if (v25 == a6)
    {
      v28 = *(__int32 **)(a1 + 8);
      goto LABEL_47;
    }
    v26 = a4 - a6 - v23 - 4;
    if (v26 >= 0x5C)
    {
      v55 = (unint64_t)v16 >= v25
         || a4 - v23 - (v26 & 0xFFFFFFFFFFFFFFFCLL) - 4 >= (unint64_t)v16->u64 + (v26 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v27 = a4 - 4 * v24;
      v28 = *(__int32 **)(a1 + 8);
      if (v55)
      {
        v56 = (v26 >> 2) + 1;
        v57 = v56 & 0x7FFFFFFFFFFFFFF8;
        v27 = v25 - v57 * 4;
        v28 = &v16->i32[v57];
        v58 = v16 + 1;
        v59 = (int32x4_t *)(v25 - 16);
        v60 = v56 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v61 = (int8x16_t)vrev64q_s32(*v59);
          v62 = (int8x16_t)vrev64q_s32(v59[-1]);
          v58[-1] = vextq_s8(v61, v61, 8uLL);
          *v58 = vextq_s8(v62, v62, 8uLL);
          v58 += 2;
          v59 -= 2;
          v60 -= 8;
        }
        while (v60);
        if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_47:
          *(_QWORD *)(a1 + 8) = v28;
          if (v23 >= 1)
          {
LABEL_48:
            v64 = &v10->i8[4 * a7];
            v65 = (char *)v28 - v64;
            v66 = ((char *)v28 - v64) >> 2;
            v67 = (int8x16_t *)&v28[-a7];
            v68 = v28;
            if (v67 < v16)
            {
              v69 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + v65;
              v70 = (char *)(v69 + v8);
              v71 = v69 + v8 + 4;
              if ((unint64_t)v16 > v71)
                v71 = (unint64_t)v16;
              v72 = v71 + ~v8 - v69;
              if (v72 < 0x2C)
              {
                v68 = v28;
              }
              else
              {
                v73 = (char *)v28 - v70;
                v68 = v28;
                if (v73 >= 0x20)
                {
                  v74 = (v72 >> 2) + 1;
                  v75 = v74 & 0x7FFFFFFFFFFFFFF8;
                  v67 = (int8x16_t *)((char *)v67 + v75 * 4);
                  v68 = &v28[v75];
                  v76 = v28 + 4;
                  v77 = (__int128 *)(4 * v66 + 4 * v14 + v8 + 16);
                  v78 = v74 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v79 = *v77;
                    *(v76 - 1) = *(v77 - 1);
                    *v76 = v79;
                    v76 += 2;
                    v77 += 2;
                    v78 -= 8;
                  }
                  while (v78);
                  if (v74 == (v74 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_59;
                }
              }
              do
              {
                v80 = v67->i32[0];
                v67 = (int8x16_t *)((char *)v67 + 4);
                *v68++ = v80;
              }
              while (v67 < v16);
            }
LABEL_59:
            *(_QWORD *)(a1 + 8) = v68;
            if (v28 != (__int32 *)v64)
            {
              v81 = v10;
              memmove(&v28[-v66], v10, v65);
              v10 = v81;
            }
            if (v25 != a4)
            {
              v82 = a4 - v25 - 4;
              v83 = (char *)v10;
              v84 = a4;
              if (v82 < 0x5C)
                goto LABEL_75;
              if ((unint64_t)v10 < a4)
              {
                v83 = (char *)v10;
                v84 = a4;
                if (a4 - (v82 & 0xFFFFFFFFFFFFFFFCLL) - 4 < (v9 & 0xFFFFFFFFFFFFFFFCLL)
                                                           + (v82 & 0xFFFFFFFFFFFFFFFCLL)
                                                           + v8
                                                           + 4)
                  goto LABEL_75;
              }
              v85 = (v82 >> 2) + 1;
              v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
              v83 = &v10->i8[v86];
              v84 = a4 - v86;
              v87 = (int32x4_t *)(a4 - 16);
              v88 = (int8x16_t *)(v8 + 4 * v14 + 16);
              v89 = v85 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v90 = (int8x16_t)vrev64q_s32(*v87);
                v91 = (int8x16_t)vrev64q_s32(v87[-1]);
                v88[-1] = vextq_s8(v90, v90, 8uLL);
                *v88 = vextq_s8(v91, v91, 8uLL);
                v87 -= 2;
                v88 += 2;
                v89 -= 8;
              }
              while (v89);
              if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_75:
                do
                {
                  v92 = *(_DWORD *)(v84 - 4);
                  v84 -= 4;
                  *(_DWORD *)v83 = v92;
                  v83 += 4;
                }
                while (v84 != v25);
              }
            }
          }
          return v10;
        }
      }
    }
    else
    {
      v27 = a4 - 4 * v24;
      v28 = *(__int32 **)(a1 + 8);
    }
    do
    {
      v63 = *(_DWORD *)(v27 - 4);
      v27 -= 4;
      *v28++ = v63;
    }
    while (v27 != a6);
    goto LABEL_47;
  }
  v17 = a7 + ((uint64_t)((uint64_t)v16->i64 - v8) >> 2);
  if (v17 >> 62)
    sub_2394189F8();
  v18 = v15 - v8;
  if (v18 >> 1 > v17)
    v17 = v18 >> 1;
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
    v19 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 >> 62)
      sub_239418A80();
    v20 = *(_QWORD *)a1 + (v9 & 0xFFFFFFFFFFFFFFFCLL);
    v21 = v19;
    v22 = operator new(4 * v19);
    v19 = v21;
    v10 = (int8x16_t *)v20;
    v14 = v9 >> 2;
  }
  else
  {
    v22 = 0;
  }
  v29 = v14;
  v30 = &v22[4 * v14];
  v31 = &v30[4 * a7];
  v32 = v30;
  v33 = a4;
  if ((v11 & 0x3FFFFFFFFFFFFFFFuLL) < 0x17)
    goto LABEL_24;
  if ((unint64_t)v30 < a4)
  {
    v32 = v30;
    v33 = a4;
    if (a4 - 4 * a7 < (unint64_t)&v22[4 * a7 + (v9 & 0xFFFFFFFFFFFFFFFCLL)])
      goto LABEL_24;
  }
  v34 = (v11 & 0x3FFFFFFFFFFFFFFFLL) + 1;
  v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
  v32 = &v30[v35];
  v33 = a4 - v35;
  v36 = (int32x4_t *)(a4 - 16);
  v37 = (int8x16_t *)&v22[4 * v29 + 16];
  v38 = v34 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v39 = (int8x16_t)vrev64q_s32(*v36);
    v40 = (int8x16_t)vrev64q_s32(v36[-1]);
    v37[-1] = vextq_s8(v39, v39, 8uLL);
    *v37 = vextq_s8(v40, v40, 8uLL);
    v36 -= 2;
    v37 += 2;
    v38 -= 8;
  }
  while (v38);
  if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_24:
    v41 = (int *)(v33 - 4);
    do
    {
      v42 = *v41--;
      *(_DWORD *)v32 = v42;
      v32 += 4;
    }
    while (v32 != v31);
  }
  v43 = v30;
  if ((void *)v8 != a2)
  {
    v44 = (char *)v10;
    v43 = v30;
    if ((unint64_t)(v9 - 4) < 0x3C)
      goto LABEL_76;
    v44 = (char *)v10;
    v43 = v30;
    if ((v9 & 0xFFFFFFFFFFFFFFFCLL) + v8 - (unint64_t)&v22[v9 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
      goto LABEL_76;
    v45 = ((unint64_t)(v9 - 4) >> 2) + 1;
    v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
    v44 = &v10->i8[-v46];
    v43 = &v30[-v46];
    v47 = 4 * v29 - 16;
    v48 = &v22[v47];
    v49 = (__int128 *)(v8 + v47);
    v50 = v45 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v51 = *v49;
      *(v48 - 1) = *(v49 - 1);
      *v48 = v51;
      v48 -= 2;
      v49 -= 2;
      v50 -= 8;
    }
    while (v50);
    if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_76:
      do
      {
        v52 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        *((_DWORD *)v43 - 1) = v52;
        v43 -= 4;
      }
      while (v44 != (char *)v8);
    }
  }
  v53 = &v22[4 * v19];
  v54 = (char *)v16 - (char *)v10;
  if (v16 != v10)
    memmove(v31, v10, (char *)v16 - (char *)v10);
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = &v31[v54];
  *(_QWORD *)(a1 + 16) = v53;
  if (v8)
    operator delete((void *)v8);
  return (int8x16_t *)v30;
}

void sub_2396C7530(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE3260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2396C7540(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE3260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2396C7570(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 24;
        sub_239421038(v3 - 24, *(_QWORD **)(v3 - 16));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void sub_2396C75E4(uint64_t a1, uint64_t a2, _QWORD **a3, size_t __sz)
{
  _QWORD **v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD **v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;

  v6 = (_QWORD **)a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v9)
    {
      v10 = *(_QWORD **)(a1 + 8);
      v11 = *(_QWORD **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = v10 - 3;
          sub_239421038((uint64_t)(v10 - 3), (_QWORD *)*(v10 - 2));
          v10 = v12;
        }
        while (v12 != v9);
        v11 = *(_QWORD **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_41;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= __sz)
      v14 = __sz;
    v15 = v13 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v14;
    if (v15 > 0xAAAAAAAAAAAAAAALL)
LABEL_41:
      sub_2394189F8();
    v16 = 24 * v15;
    v17 = (char *)operator new(24 * v15);
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = &v17[v16];
    if (v6 != a3)
    {
      v18 = 0;
      do
      {
        v19 = &v17[v18];
        *((_QWORD *)v19 + 2) = 0;
        *(_QWORD *)&v17[v18 + 8] = 0;
        *(_QWORD *)v19 = &v17[v18 + 8];
        sub_2396C7918((uint64_t *)&v17[v18], (unsigned int *)v6[v18 / 8], (unsigned int *)&v6[v18 / 8 + 1]);
        v18 += 24;
      }
      while (&v6[v18 / 8] != a3);
      v17 += v18;
    }
    *(_QWORD *)(a1 + 8) = v17;
    return;
  }
  v20 = *(_QWORD **)(a1 + 8);
  v21 = 0xAAAAAAAAAAAAAAABLL * (v20 - v9);
  if (v21 >= __sz)
  {
    if ((_QWORD **)a2 == a3)
    {
      v27 = *(_QWORD **)a1;
      if (v20 == v9)
      {
LABEL_38:
        *(_QWORD *)(a1 + 8) = v27;
        return;
      }
    }
    else
    {
      v26 = (_QWORD *)(a2 + 8);
      v27 = *(_QWORD **)a1;
      do
      {
        if (v6 != v9)
          sub_2396C7A28(v9, *v6, v26);
        v6 += 3;
        v9 += 3;
        v27 += 3;
        v26 += 3;
      }
      while (v6 != a3);
      v20 = *(_QWORD **)(a1 + 8);
      if (v20 == v27)
        goto LABEL_38;
    }
    do
    {
      v32 = v20 - 3;
      sub_239421038((uint64_t)(v20 - 3), (_QWORD *)*(v20 - 2));
      v20 = v32;
    }
    while (v32 != v27);
    goto LABEL_38;
  }
  v22 = (_QWORD **)(a2 + 8 * (v20 - v9));
  if (v20 != v9)
  {
    v23 = 8 * (v20 - v9);
    v24 = (_QWORD *)(a2 + 8);
    v25 = (_QWORD **)a2;
    do
    {
      if (v25 != v9)
        sub_2396C7A28(v9, *v25, v24);
      v25 += 3;
      v9 += 3;
      v24 += 3;
      v23 -= 24;
    }
    while (v23);
    v9 = *(_QWORD **)(a1 + 8);
  }
  v28 = v9;
  if (v22 != a3)
  {
    v29 = 0;
    v30 = (uint64_t)&v6[3 * v21 + 1];
    do
    {
      v31 = &v9[v29];
      v31[2] = 0;
      v9[v29 + 1] = 0;
      *v31 = &v9[v29 + 1];
      sub_2396C7918(&v9[v29], (unsigned int *)v22[v29], (unsigned int *)(v30 + v29 * 8));
      v29 += 3;
    }
    while (&v22[v29] != a3);
    v28 = &v9[v29];
  }
  *(_QWORD *)(a1 + 8) = v28;
}

uint64_t *sub_2396C7918(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned int *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_2394F01C4(v7, v8, v18, &v17, v6 + 7);
      if (*result)
      {
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x28uLL);
        v11[7] = v6[7];
        *((_QWORD *)v11 + 4) = *((_QWORD *)v6 + 4);
        v12 = v18[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v14 = (uint64_t *)*v10;
        }
        else
        {
          v14 = (uint64_t *)v11;
        }
        result = sub_2394213B8((uint64_t *)v7[1], v14);
        ++v7[2];
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = *(unsigned int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (unsigned int *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void sub_2396C7A28(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *i;
  _QWORD *v24;
  uint64_t ***v25;
  uint64_t *v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;

  v4 = a2;
  v5 = (uint64_t)a1;
  if (a1[2])
  {
    v6 = (_QWORD *)*a1;
    v8 = (uint64_t **)(a1 + 1);
    v7 = a1[1];
    *a1 = a1 + 1;
    *(_QWORD *)(v7 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    if (v6[1])
      v9 = (_QWORD *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
      v24 = 0;
LABEL_49:
      sub_239421038((uint64_t)a1, v24);
      goto LABEL_50;
    }
    v10 = (_QWORD *)v9[2];
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if ((_QWORD *)*v10 == v9)
      {
        *v10 = 0;
        while (1)
        {
          v35 = (_QWORD *)v10[1];
          if (!v35)
            break;
          do
          {
            v10 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
      }
      else
      {
        for (v10[1] = 0; v11; v11 = (_QWORD *)v10[1])
        {
          do
          {
            v10 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      v12 = v9;
      v13 = v4;
      while (1)
      {
        v9 = v10;
        v14 = *((_DWORD *)v13 + 7);
        *((_DWORD *)v12 + 7) = v14;
        if (v12 != v13)
          v12[4] = v13[4];
        v15 = *v8;
        v16 = (_QWORD *)(v5 + 8);
        v17 = (_QWORD *)(v5 + 8);
        if (*v8)
          break;
LABEL_16:
        *v12 = 0;
        v12[1] = 0;
        v12[2] = v16;
        *v17 = v12;
        v18 = **(_QWORD **)v5;
        if (v18)
          goto LABEL_17;
LABEL_18:
        sub_2394213B8(*(uint64_t **)(v5 + 8), v12);
        ++*(_QWORD *)(v5 + 16);
        if (v10)
        {
          v10 = (_QWORD *)v10[2];
          if (v10)
          {
            v21 = (_QWORD *)*v10;
            if ((_QWORD *)*v10 == v9)
            {
              *v10 = 0;
              while (1)
              {
                v22 = (_QWORD *)v10[1];
                if (!v22)
                  break;
                do
                {
                  v10 = v22;
                  v22 = (_QWORD *)*v22;
                }
                while (v22);
              }
            }
            else
            {
              for (v10[1] = 0; v21; v21 = (_QWORD *)v10[1])
              {
                do
                {
                  v10 = v21;
                  v21 = (_QWORD *)*v21;
                }
                while (v21);
              }
            }
          }
        }
        else
        {
          v10 = 0;
        }
        v19 = (_QWORD *)v13[1];
        if (v19)
        {
          do
          {
            v4 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v4 = (_QWORD *)v13[2];
            v20 = *v4 == (_QWORD)v13;
            v13 = v4;
          }
          while (!v20);
        }
        if (v9)
        {
          v12 = v9;
          v13 = v4;
          if (v4 != a3)
            continue;
        }
        goto LABEL_44;
      }
      do
      {
        while (1)
        {
          v16 = v15;
          if (v14 >= *((_DWORD *)v15 + 7))
            break;
          v15 = (uint64_t *)*v15;
          v17 = v16;
          if (!*v16)
            goto LABEL_16;
        }
        v15 = (uint64_t *)v15[1];
      }
      while (v15);
      v17 = v16 + 1;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = v16;
      v16[1] = v12;
      v18 = **(_QWORD **)v5;
      if (!v18)
        goto LABEL_18;
LABEL_17:
      *(_QWORD *)v5 = v18;
      v12 = (_QWORD *)*v17;
      goto LABEL_18;
    }
LABEL_44:
    sub_239421038(v5, v9);
    if (v10)
    {
      for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
        v10 = i;
      a1 = (_QWORD *)v5;
      v24 = v10;
      goto LABEL_49;
    }
  }
LABEL_50:
  if (v4 != a3)
  {
    v25 = (uint64_t ***)(v5 + 8);
    while (1)
    {
      v26 = (uint64_t *)operator new(0x28uLL);
      v27 = v26;
      v28 = *((_DWORD *)v4 + 7);
      *((_DWORD *)v26 + 7) = v28;
      v26[4] = v4[4];
      v29 = *v25;
      v30 = (uint64_t **)(v5 + 8);
      v31 = (uint64_t **)(v5 + 8);
      if (*v25)
        break;
LABEL_54:
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v30;
      *v31 = v26;
      v32 = **(_QWORD **)v5;
      if (v32)
        goto LABEL_55;
LABEL_56:
      sub_2394213B8(*(uint64_t **)(v5 + 8), v27);
      ++*(_QWORD *)(v5 + 16);
      v33 = (_QWORD *)v4[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v4[2];
          v20 = *v34 == (_QWORD)v4;
          v4 = v34;
        }
        while (!v20);
      }
      v4 = v34;
      if (v34 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v30 = v29;
        if (v28 >= *((_DWORD *)v29 + 7))
          break;
        v29 = (uint64_t **)*v29;
        v31 = v30;
        if (!*v30)
          goto LABEL_54;
      }
      v29 = (uint64_t **)v29[1];
    }
    while (v29);
    v31 = v30 + 1;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v30;
    v30[1] = v26;
    v32 = **(_QWORD **)v5;
    if (!v32)
      goto LABEL_56;
LABEL_55:
    *(_QWORD *)v5 = v32;
    v27 = *v31;
    goto LABEL_56;
  }
}

void sub_2396C7D6C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396C7D80(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250AE3298;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_2396C7DC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE3298;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *sub_2396C7DE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t *result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  BOOL v30;
  uint64_t *v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  unsigned int v41;
  BOOL v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  int v54;
  int v56;

  v3 = *a2;
  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 12 * *a2);
  result = **(uint64_t ***)(a1 + 16);
  v6 = *result;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((result[1] - *result) >> 3);
  LODWORD(v8) = v4[1];
  v9 = v4[2];
  if (v8 <= v9)
    v10 = v4[2];
  else
    v10 = v4[1];
  if (v8 >= v9)
    v8 = v9;
  else
    v8 = v8;
  if (v7 <= v8)
    goto LABEL_86;
  v11 = v6 + 24 * v8;
  v14 = *(_QWORD *)(v11 + 8);
  v12 = (_DWORD *)(v11 + 8);
  v13 = v14;
  if (!v14)
    goto LABEL_19;
  v15 = v12;
  do
  {
    v16 = *(_DWORD *)(v13 + 28);
    v17 = v16 >= v10;
    if (v16 >= v10)
      v18 = (uint64_t *)v13;
    else
      v18 = (uint64_t *)(v13 + 8);
    if (v17)
      v15 = (_DWORD *)v13;
    v13 = *v18;
  }
  while (*v18);
  if (v15 != v12 && v10 >= v15[7])
  {
    v44 = v15[8];
    v45 = v15[9];
    v46 = v3 == v44 ? v45 : v44;
    v47 = (_DWORD)v44 == -1 || v45 == -1;
    v19 = v47 ? -1 : v46;
  }
  else
  {
LABEL_19:
    v19 = -1;
  }
  v20 = **(_QWORD **)(a1 + 24);
  *(_DWORD *)(v20 + 12 * v3) = v19;
  LODWORD(v21) = v4[2];
  v22 = *v4;
  v23 = v21 <= *v4 ? *v4 : v4[2];
  v21 = v21 >= v22 ? v22 : v21;
  if (v7 <= v21)
    goto LABEL_86;
  v24 = v6 + 24 * v21;
  v27 = *(_QWORD *)(v24 + 8);
  v25 = (_DWORD *)(v24 + 8);
  v26 = v27;
  if (!v27)
    goto LABEL_38;
  v28 = v25;
  do
  {
    v29 = *(_DWORD *)(v26 + 28);
    v30 = v29 >= v23;
    if (v29 >= v23)
      v31 = (uint64_t *)v26;
    else
      v31 = (uint64_t *)(v26 + 8);
    if (v30)
      v28 = (_DWORD *)v26;
    v26 = *v31;
  }
  while (*v31);
  if (v28 != v25 && v23 >= v28[7])
  {
    v48 = v28[8];
    v49 = v28[9];
    v50 = v3 == v48 ? v49 : v48;
    v51 = (_DWORD)v48 == -1 || v49 == -1;
    v32 = v51 ? -1 : v50;
  }
  else
  {
LABEL_38:
    v32 = -1;
  }
  *(_DWORD *)(v20 + 12 * v3 + 4) = v32;
  LODWORD(v33) = *v4;
  v34 = v4[1];
  v35 = *v4 <= v34 ? v4[1] : *v4;
  v33 = v33 >= v34 ? v34 : v33;
  if (v7 <= v33)
LABEL_86:
    sub_23941D884();
  v36 = v6 + 24 * v33;
  v39 = *(_QWORD *)(v36 + 8);
  v37 = (_DWORD *)(v36 + 8);
  v38 = v39;
  if (!v39)
    goto LABEL_57;
  v40 = v37;
  do
  {
    v41 = *(_DWORD *)(v38 + 28);
    v42 = v41 >= v35;
    if (v41 >= v35)
      v43 = (uint64_t *)v38;
    else
      v43 = (uint64_t *)(v38 + 8);
    if (v42)
      v40 = (_DWORD *)v38;
    v38 = *v43;
  }
  while (*v43);
  if (v40 != v37 && v35 >= v40[7])
  {
    v53 = v40[8];
    v52 = v40[9];
    if (v3 == v53)
      v54 = v52;
    else
      v54 = v53;
    if ((_DWORD)v53 == -1 || v52 == -1)
      v56 = -1;
    else
      v56 = v54;
    *(_DWORD *)(v20 + 12 * v3 + 8) = v56;
  }
  else
  {
LABEL_57:
    *(_DWORD *)(v20 + 12 * v3 + 8) = -1;
  }
  return result;
}

void sub_2396C7FF4(void **a1, unint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[3 * a2];
      v12 = 24 * a2;
      v13 = v4 + 1;
      do
      {
        *v13 = 0;
        v13[1] = 0;
        *(v13 - 1) = v13;
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
    return;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (_BYTE *)*a1) >> 3);
  v7 = v6 + a2;
  if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v10 = (char *)operator new(24 * v9);
  }
  else
  {
    v10 = 0;
  }
  v14 = &v10[24 * v6];
  v15 = &v10[24 * v9];
  v16 = 24 * a2;
  v17 = &v14[24 * a2];
  v18 = v14 + 8;
  do
  {
    *v18 = 0;
    v18[1] = 0;
    *(v18 - 1) = v18;
    v18 += 3;
    v16 -= 24;
  }
  while (v16);
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (!v19)
      return;
LABEL_31:
    operator delete(v19);
    return;
  }
  v21 = 0;
  do
  {
    while (1)
    {
      v22 = &v14[v21];
      *((_QWORD *)v22 - 3) = *(_QWORD *)&v19[v21 - 24];
      v23 = &v19[v21 - 16];
      v24 = *(_QWORD *)v23;
      *(_QWORD *)&v14[v21 - 16] = *(_QWORD *)v23;
      v25 = (uint64_t)&v14[v21 - 16];
      v26 = *(_QWORD *)&v19[v21 - 8];
      *((_QWORD *)v22 - 1) = v26;
      if (!v26)
        break;
      *(_QWORD *)(v24 + 16) = v25;
      *(_QWORD *)&v19[v21 - 24] = v23;
      *(_QWORD *)v23 = 0;
      *(_QWORD *)&v19[v21 - 8] = 0;
      v21 -= 24;
      if (&v19[v21] == v20)
        goto LABEL_25;
    }
    *((_QWORD *)v22 - 3) = v25;
    v21 -= 24;
  }
  while (&v19[v21] != v20);
LABEL_25:
  v27 = (char *)*a1;
  v19 = (char *)a1[1];
  *a1 = &v14[v21];
  a1[1] = v17;
  a1[2] = v15;
  if (v19 != v27)
  {
    do
    {
      v28 = v19 - 24;
      sub_2394EF618((uint64_t)(v19 - 24), *((_QWORD **)v19 - 2));
      v19 = v28;
    }
    while (v28 != v27);
    v19 = v27;
  }
  if (v19)
    goto LABEL_31;
}

void sub_2396C81F8()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396C820C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE32E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2396C8244(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE32E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float32x4_t sub_2396C8264(uint64_t a1, _QWORD *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  _QWORD *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t result;

  v5 = *(_QWORD **)(a1 + 8);
  v6 = (unsigned int *)(v5[3] + 12 * *a2);
  v7 = *v5 + 12 * v6[1];
  v8 = *v5 + 12 * *v6;
  a3.i64[0] = *(_QWORD *)v7;
  a3.i32[2] = *(_DWORD *)(v7 + 8);
  a4.i64[0] = *(_QWORD *)v8;
  a4.i32[2] = *(_DWORD *)(v8 + 8);
  v9 = vsubq_f32(a3, a4);
  v10 = *v5 + 12 * v6[2];
  a5.i64[0] = *(_QWORD *)v10;
  a5.i32[2] = *(_DWORD *)(v10 + 8);
  v11 = vsubq_f32(a5, a3);
  v12 = (float32x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
  v13 = (float32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
  v14 = (int32x4_t)vmulq_n_f32(v9, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.f32, 1), *(float32x2_t *)v9.f32, 1), v12, v12).f32[0]));
  v15 = (int32x4_t)vmulq_n_f32(v11, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 1), *(float32x2_t *)v11.f32, 1), v13, v13).f32[0]));
  v16 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), (int8x16_t)v14, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v14, v14), (int8x16_t)v14, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL), (int8x16_t)v15, 8uLL));
  v14.i64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  v17 = **(_QWORD **)(a1 + 16) + 12 * *a2;
  result = vmulq_n_f32(v16, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.f32, 1), *(float32x2_t *)v16.f32, 1), *(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8).f32[0]));
  *(_DWORD *)(v17 + 8) = result.i32[2];
  *(_QWORD *)v17 = result.i64[0];
  return result;
}

uint64_t sub_2396C835C(void **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  _BYTE *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  uint64_t *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *i;
  uint64_t v45;
  void *v46;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 12;
  v7 = (uint64_t)*a1 + 12 * v6;
  if (a5 < 1)
    return v7;
  v9 = a3;
  v12 = (uint64_t *)a1[1];
  v11 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)v12) >> 2)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 2)) >= a5)
    {
      v18 = (uint64_t *)((char *)a3 + 12 * a5);
      v19 = (char *)a1[1];
    }
    else
    {
      v18 = (uint64_t *)((char *)a3 + 4 * (((uint64_t)v12 - v7) >> 2));
      v19 = (char *)a1[1];
      if (v18 != a4)
      {
        v20 = (uint64_t *)((char *)a3 + 4 * (((uint64_t)v12 - v7) >> 2));
        v21 = a1[1];
        do
        {
          v22 = *v20;
          v21[2] = *((_DWORD *)v20 + 2);
          *(_QWORD *)v21 = v22;
          v21 += 3;
          v20 = (uint64_t *)((char *)v20 + 12);
          v19 += 12;
        }
        while (v20 != a4);
      }
      a1[1] = v19;
      if ((uint64_t)v12 - v7 < 1)
        return v7;
    }
    v23 = v7 + 12 * a5;
    v24 = (uint64_t *)&v19[-12 * a5];
    v25 = v19;
    if (v24 < v12)
    {
      v25 = v19;
      do
      {
        v26 = *v24;
        *((_DWORD *)v25 + 2) = *((_DWORD *)v24 + 2);
        *(_QWORD *)v25 = v26;
        v25 += 12;
        v24 = (uint64_t *)((char *)v24 + 12);
      }
      while (v24 < v12);
    }
    a1[1] = v25;
    if (v19 != (char *)v23)
    {
      v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v19[-v23] >> 2);
      v28 = v19 - 12;
      v29 = 12 * v27;
      v30 = (uint64_t)&v5[12 * v6 - 12];
      do
      {
        v31 = *(_QWORD *)(v30 + v29);
        *((_DWORD *)v28 + 2) = *(_DWORD *)(v30 + v29 + 8);
        *(_QWORD *)v28 = v31;
        v28 -= 12;
        v29 -= 12;
      }
      while (v29);
    }
    if (v18 != a3)
    {
      v32 = v7;
      do
      {
        v33 = *v9;
        *(_DWORD *)(v32 + 8) = *((_DWORD *)v9 + 2);
        *(_QWORD *)v32 = v33;
        v32 += 12;
        v9 = (uint64_t *)((char *)v9 + 12);
      }
      while (v9 != v18);
    }
    return v7;
  }
  v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 2);
  if (v13 > 0x1555555555555555)
    sub_2394189F8();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 2);
  v15 = 2 * v14;
  if (2 * v14 <= v13)
    v15 = v13;
  if (v14 >= 0xAAAAAAAAAAAAAAALL)
    v16 = 0x1555555555555555;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 > 0x1555555555555555)
      sub_239418A80();
    v17 = (char *)operator new(12 * v16);
  }
  else
  {
    v17 = 0;
  }
  v34 = &v17[12 * v6];
  v35 = 12 * a5;
  v36 = &v34[12 * a5];
  v37 = v34;
  do
  {
    v38 = *v9;
    *((_DWORD *)v37 + 2) = *((_DWORD *)v9 + 2);
    *(_QWORD *)v37 = v38;
    v37 += 12;
    v9 = (uint64_t *)((char *)v9 + 12);
    v35 -= 12;
  }
  while (v35);
  v39 = *a1;
  v40 = v34;
  if (*a1 != (void *)v7)
  {
    v41 = v7;
    v40 = v34;
    do
    {
      v42 = *(_QWORD *)(v41 - 12);
      v41 -= 12;
      v43 = *(_DWORD *)(v41 + 8);
      *(_QWORD *)(v40 - 12) = v42;
      v40 -= 12;
      *((_DWORD *)v40 + 2) = v43;
    }
    while ((void *)v41 != v39);
    v12 = (uint64_t *)a1[1];
  }
  for (i = &v17[12 * v16]; (uint64_t *)v7 != v12; v7 += 12)
  {
    v45 = *(_QWORD *)v7;
    *((_DWORD *)v36 + 2) = *(_DWORD *)(v7 + 8);
    *(_QWORD *)v36 = v45;
    v36 += 12;
  }
  v46 = *a1;
  *a1 = v40;
  a1[1] = v36;
  a1[2] = i;
  if (v46)
    operator delete(v46);
  return (uint64_t)v34;
}

uint64_t sub_2396C8640(void **a1, uint64_t a2, __int16 *a3, __int16 *a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 *v9;
  _BYTE *v11;
  __int16 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 *v19;
  char *v20;
  __int16 *v21;
  char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 *v25;
  char *v26;
  __int16 v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  void *v40;
  char *v41;
  uint64_t v42;
  __int16 v43;
  char v44;
  char *i;
  __int16 v46;
  void *v47;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 3;
  v7 = (uint64_t)*a1 + 3 * v6;
  if (a5 < 1)
    return v7;
  v9 = a3;
  v12 = (__int16 *)a1[1];
  v11 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (v11 - (_BYTE *)v12)) >= a5)
  {
    v18 = 3 * a5;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((_QWORD)v12 - v7)) >= a5)
    {
      v19 = (__int16 *)((char *)a3 + v18);
      v20 = (char *)a1[1];
      v24 = v7 + v18;
      v25 = (__int16 *)((char *)v12 - v18);
      v26 = v20;
      if (v25 >= v12)
      {
LABEL_22:
        a1[1] = v26;
        if (v20 != (char *)v24)
        {
          v28 = 0xAAAAAAAAAAAAAAABLL * (_QWORD)&v20[-v24];
          v29 = v20 - 3;
          v30 = 3 * v28;
          v31 = (uint64_t)&v5[3 * v6 - 3];
          do
          {
            v32 = *(_WORD *)(v31 + v30);
            v29[2] = *(_BYTE *)(v31 + v30 + 2);
            *(_WORD *)v29 = v32;
            v29 -= 3;
            v30 -= 3;
          }
          while (v30);
        }
        if (v19 != a3)
        {
          v33 = v7;
          do
          {
            if (v9 != (__int16 *)v33)
            {
              v34 = *v9;
              *(_BYTE *)(v33 + 2) = *((_BYTE *)v9 + 2);
              *(_WORD *)v33 = v34;
            }
            v9 = (__int16 *)((char *)v9 + 3);
            v33 += 3;
          }
          while (v9 != v19);
        }
        return v7;
      }
    }
    else
    {
      v19 = (__int16 *)((char *)v12 + (_QWORD)a3 - v7);
      v20 = (char *)a1[1];
      if (v19 != a4)
      {
        v21 = (__int16 *)((char *)v12 + (_QWORD)a3 - v7);
        v22 = (char *)a1[1];
        do
        {
          v23 = *v21;
          v22[2] = *((_BYTE *)v21 + 2);
          *(_WORD *)v22 = v23;
          v22 += 3;
          v21 = (__int16 *)((char *)v21 + 3);
          v20 += 3;
        }
        while (v21 != a4);
      }
      a1[1] = v20;
      if ((uint64_t)v12 - v7 < 1)
        return v7;
      v24 = v7 + v18;
      v25 = (__int16 *)&v20[-v18];
      v26 = v20;
      if (v25 >= v12)
        goto LABEL_22;
    }
    v26 = v20;
    do
    {
      v27 = *v25;
      v26[2] = *((_BYTE *)v25 + 2);
      *(_WORD *)v26 = v27;
      v26 += 3;
      v25 = (__int16 *)((char *)v25 + 3);
    }
    while (v25 < v12);
    goto LABEL_22;
  }
  v13 = a5 - 0x5555555555555555 * ((char *)v12 - v5);
  if (v13 >= 0x5555555555555556)
    sub_2394189F8();
  v14 = 0xAAAAAAAAAAAAAAABLL * (v11 - v5);
  v15 = 2 * v14;
  if (2 * v14 <= v13)
    v15 = v13;
  if (v14 >= 0x2AAAAAAAAAAAAAAALL)
    v16 = 0x5555555555555555;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 >= 0x5555555555555556)
      sub_239418A80();
    v17 = (char *)operator new(3 * v16);
  }
  else
  {
    v17 = 0;
  }
  v35 = &v17[3 * v6];
  v36 = 3 * a5;
  v37 = &v35[3 * a5];
  v38 = v35;
  do
  {
    v39 = *v9;
    v38[2] = *((_BYTE *)v9 + 2);
    *(_WORD *)v38 = v39;
    v38 += 3;
    v9 = (__int16 *)((char *)v9 + 3);
    v36 -= 3;
  }
  while (v36);
  v40 = *a1;
  v41 = v35;
  if (*a1 != (void *)v7)
  {
    v42 = v7;
    v41 = v35;
    do
    {
      v43 = *(_WORD *)(v42 - 3);
      v42 -= 3;
      v44 = *(_BYTE *)(v42 + 2);
      *(_WORD *)(v41 - 3) = v43;
      v41 -= 3;
      v41[2] = v44;
    }
    while ((void *)v42 != v40);
    v12 = (__int16 *)a1[1];
  }
  for (i = &v17[3 * v16]; (__int16 *)v7 != v12; v7 += 3)
  {
    v46 = *(_WORD *)v7;
    v37[2] = *(_BYTE *)(v7 + 2);
    *(_WORD *)v37 = v46;
    v37 += 3;
  }
  v47 = *a1;
  *a1 = v41;
  a1[1] = v37;
  a1[2] = i;
  if (v47)
    operator delete(v47);
  return (uint64_t)v35;
}

char *sub_2396C8920(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_239418A80();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v12)
      return v11;
    goto LABEL_17;
  }
  do
  {
    v14 = *(_OWORD *)(v12 - 24);
    v12 -= 24;
    *(_OWORD *)(v9 - 24) = v14;
    v9 -= 24;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v12 + 2);
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
  }
  while (v12 != v13);
  v15 = *a1;
  v12 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v12 != v15)
  {
    v16 = v12;
    do
    {
      v18 = (void *)*((_QWORD *)v16 - 3);
      v16 -= 24;
      v17 = v18;
      if (v18)
      {
        *((_QWORD *)v12 - 2) = v17;
        operator delete(v17);
      }
      v12 = v16;
    }
    while (v16 != v15);
    v12 = v15;
  }
  if (v12)
LABEL_17:
    operator delete(v12);
  return v11;
}

uint64_t *sub_2396C8A78(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2396C8D64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2396C8D78(void **a1, unint64_t a2, __int16 *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  char v23;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * (v6 - v7) >= a2)
  {
    if (a2)
    {
      v13 = 3 * a2;
      v14 = &v7[3 * a2];
      do
      {
        v15 = *a3;
        v7[2] = *((_BYTE *)a3 + 2);
        *(_WORD *)v7 = v15;
        v7 += 3;
        v13 -= 3;
      }
      while (v13);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (v7 - (_BYTE *)*a1);
    v9 = v8 + a2;
    if (v8 + a2 >= 0x5555555555555556)
      sub_2394189F8();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v6 - (_BYTE *)*a1);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAAALL)
      v11 = 0x5555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >= 0x5555555555555556)
        sub_239418A80();
      v12 = (char *)operator new(3 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[3 * v8];
    v17 = 3 * a2;
    v18 = &v16[3 * a2];
    v19 = v16;
    do
    {
      v20 = *a3;
      v19[2] = *((_BYTE *)a3 + 2);
      *(_WORD *)v19 = v20;
      v19 += 3;
      v17 -= 3;
    }
    while (v17);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_WORD *)(v7 - 3);
        v7 -= 3;
        v23 = v7[2];
        *(_WORD *)(v16 - 3) = v22;
        v16 -= 3;
        v16[2] = v23;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[3 * v11];
    if (v7)
      operator delete(v7);
  }
}

__n128 sub_2396C8EF8@<Q0>(float32x2_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, float32x2_t a4@<D2>, __n128 a5@<Q3>, int32x4_t a6@<Q7>)
{
  int32x4_t v6;
  __n128 v8;
  int32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  __int32 v47;
  __int32 v48;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x2_t v63;
  float v64;
  float32x2_t v65;
  __n128 result;
  __n128 v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  _BYTE v74[20];
  __int32 v75;
  float32x2_t v76;
  float v77;

  a3.n128_u64[0] = (unint64_t)a1[6];
  a3.n128_u32[2] = a1[7].u32[0];
  v67 = a3;
  *(float32x2_t *)a6.i8 = *a1;
  a6.i32[2] = a1[1].i32[0];
  *(float32x2_t *)v6.i8 = a1[2];
  v6.i32[2] = a1[3].i32[0];
  v69 = (float32x4_t)a6;
  v70 = (float32x4_t)v6;
  a4.i32[0] = a1[5].i32[0];
  a5.n128_u64[0] = (unint64_t)a1[4];
  v8 = a5;
  v8.n128_u32[2] = a4.i32[0];
  v68 = (float32x4_t)v8;
  v9 = vzip1q_s32(a6, v6);
  v10 = vmul_n_f32(*(float32x2_t *)v9.i8, COERCE_FLOAT(*a1));
  v11 = vmul_n_f32(*(float32x2_t *)v9.i8, *(float *)v6.i32);
  v9.i32[2] = a5.n128_u32[0];
  v73 = (float32x4_t)v9;
  v12 = vtrn2q_s32(a6, v6);
  v13 = vmla_lane_f32(v10, *(float32x2_t *)v12.i8, *a1, 1);
  v14 = vmla_lane_f32(v11, *(float32x2_t *)v12.i8, *(float32x2_t *)v6.i8, 1);
  v12.i32[2] = a5.n128_i32[1];
  v72 = (float32x4_t)v12;
  v15 = vzip2q_s32(a6, v6);
  v16 = (float32x4_t)v15;
  v16.i32[2] = a4.i32[0];
  v71 = v16;
  v17 = sqrtf(cbrtf(vmuls_n_f32(vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), a4, a4).f32[0], vmul_lane_f32(vmla_n_f32(v13, *(float32x2_t *)v15.i8, *(float *)&a6.i32[2]), vmla_n_f32(v14, *(float32x2_t *)v15.i8, *(float *)&v6.i32[2]), 1).f32[0])));
  v18 = vmulq_n_f32(v69, 1.0 / v17);
  v19 = vmulq_n_f32(v70, 1.0 / v17);
  _Q1 = vmulq_n_f32(v68, 1.0 / v17);
  *(_DWORD *)&v74[8] = v18.i32[2];
  *(_QWORD *)v74 = v18.i64[0];
  v75 = v19.i32[2];
  *(_QWORD *)&v74[12] = v19.i64[0];
  v77 = _Q1.f32[2];
  v76 = *(float32x2_t *)_Q1.f32;
  v21 = vmulq_n_f32(v73, 1.0 / v17);
  v22 = (int8x16_t)vmulq_n_f32(v72, 1.0 / v17);
  v23 = (int8x16_t)vmulq_n_f32(v71, 1.0 / v17);
  *(float32x2_t *)v24.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v21.f32, v18.f32[0]), *(float32x2_t *)v22.i8, *(float32x2_t *)v18.f32, 1), *(float32x2_t *)v23.i8, v18, 2);
  v25 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
  v26 = (float32x2_t)vextq_s8(v22, v22, 8uLL).u64[0];
  v27 = (float32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
  v28 = (float32x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
  *(float32x2_t *)&v24.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v25, *(float32x2_t *)v18.f32), v26, *(float32x2_t *)v18.f32, 1), v28, v27);
  *(float32x2_t *)v29.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v21.f32, v19.f32[0]), *(float32x2_t *)v22.i8, *(float32x2_t *)v19.f32, 1), *(float32x2_t *)v23.i8, v19, 2);
  *(float32x2_t *)&v29.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v25, *(float32x2_t *)v19.f32), v26, *(float32x2_t *)v19.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), v27);
  *(float32x2_t *)v21.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v21.f32, _Q1.f32[0]), *(float32x2_t *)v22.i8, *(float32x2_t *)_Q1.f32, 1), *(float32x2_t *)v23.i8, _Q1, 2);
  *(float32x2_t *)&v21.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v25, *(float32x2_t *)_Q1.f32), v26, *(float32x2_t *)_Q1.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL), v27);
  v30 = vaddq_f32(v24, (float32x4_t)xmmword_239ECEF00);
  v31 = (int8x16_t)vaddq_f32(v29, (float32x4_t)xmmword_239ECEF10);
  v30.i32[3] = v31.i32[0];
  v32 = vaddq_f32(v21, (float32x4_t)xmmword_239ECEF20);
  v33 = (float32x4_t)vextq_s8(vextq_s8(v31, v31, 0xCuLL), (int8x16_t)v32, 8uLL);
  v32.i32[0] = vabsq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2)).u32[0];
  v32.i32[1] = -4194304;
  v32.i64[1] = 0xFFC00000FFC00000;
  v34 = vmaxnmvq_f32(vmaxnmq_f32(vmaxnmq_f32(vabsq_f32(v30), v32), vabsq_f32(v33)));
  v35 = (float32x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL).u64[0];
  v36 = (float32x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 4uLL).u64[0];
  if (v34 > 0.0001)
    goto LABEL_14;
  v37 = _Q1.f32[1];
  LODWORD(_Q3) = v19.i32[1];
  __asm { FMLA            S18, S3, V1.S[2] }
  v44 = vmul_f32((float32x2_t)__PAIR64__(v18.u32[1], v28.u32[0]), vmla_n_f32(vmul_n_f32(vneg_f32(v35), _Q1.f32[0]), v36, v19.f32[0]));
  if (fabsf((float)(v44.f32[0] + (float)((float)(_S18 * v18.f32[0]) - v44.f32[1])) + -1.0) > 0.0001)
  {
LABEL_14:
    if (v34 > 0.1)
      goto LABEL_11;
    _S4 = v19.i32[1];
    __asm { FMLA            S3, S4, V1.S[2] }
    v51 = _S3 * v18.f32[0];
    v18.i32[0] = v28.i32[0];
    v52 = vmul_f32(*(float32x2_t *)v18.f32, vmla_n_f32(vmul_n_f32(vneg_f32(v35), _Q1.f32[0]), v36, v19.f32[0]));
    if (fabsf((float)(v52.f32[0] + (float)(v51 - v52.f32[1])) + -1.0) > 0.1)
LABEL_11:
      sub_239EBEEB0();
    sub_2396C9378((float32x2_t *)v74);
    v18 = *(float32x4_t *)v74;
    v19.i32[0] = *(_DWORD *)&v74[12];
    v45.i32[0] = v75;
    *(float32x2_t *)_Q1.f32 = v76;
    v46.f32[0] = v77;
    LODWORD(_Q3) = *(_DWORD *)&v74[16];
    v37 = v76.f32[1];
    v47 = *(_DWORD *)&v74[8];
    v53 = (float32x2_t)vzip1_s32(*(int32x2_t *)v74, *(int32x2_t *)&v74[12]);
    v54 = (float32x2_t)vzip2_s32(*(int32x2_t *)v74, *(int32x2_t *)&v74[12]);
    v55.i32[0] = vdupq_laneq_s32(*(int32x4_t *)v74, 2).u32[0];
    v55.i32[1] = v75;
    *(float32x2_t *)v56.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v53, *(float *)v74), v54, *(float32x2_t *)v74, 1), v55, *(float32x4_t *)v74, 2);
    *(float32x2_t *)&v56.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v76, *(float32x2_t *)v74), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v74, 1), v76, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), v46);
    *(float32x2_t *)v57.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v53, *(float *)&v74[12]), v54, *(float32x2_t *)&v74[12], 1), v55, v55.f32[1]);
    *(float32x2_t *)&v57.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v76, *(float32x2_t *)&v74[12]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v74[12], 1), v76, 1), v45, v46);
    *(float32x2_t *)v58.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v53, v76.f32[0]), v54, v76, 1), v55, v77);
    *(float32x2_t *)&v58.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q1.f32, *(float32x2_t *)_Q1.f32), (float32x2_t)vdup_lane_s32((int32x2_t)v76, 1), *(float32x2_t *)_Q1.f32, 1), v46, v46);
    v48 = *(_DWORD *)&v74[4];
    v59 = vaddq_f32(v56, (float32x4_t)xmmword_239ECEF00);
    v60 = (int8x16_t)vaddq_f32(v57, (float32x4_t)xmmword_239ECEF10);
    v61 = vaddq_f32(v58, (float32x4_t)xmmword_239ECEF20);
    v59.i32[3] = v60.i32[0];
    v62 = vabsq_f32((float32x4_t)vextq_s8(vextq_s8(v60, v60, 0xCuLL), (int8x16_t)v61, 8uLL));
    v61.i32[0] = vabsq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2)).u32[0];
    v61.i32[1] = -4194304;
    v61.i64[1] = 0xFFC00000FFC00000;
    v34 = vmaxnmvq_f32(vmaxnmq_f32(vmaxnmq_f32(vabsq_f32(v59), v61), v62));
  }
  else
  {
    v45.i32[0] = v19.i32[2];
    v46.i32[0] = _Q1.i32[2];
    v47 = v18.i32[2];
    v48 = v18.i32[1];
  }
  if (v34 > 0.0001
    || (v63 = vneg_f32((float32x2_t)__PAIR64__(v45.u32[0], _Q3)),
        v64 = vmuls_lane_f32(v37, v63, 1),
        v65 = vmul_f32((float32x2_t)__PAIR64__(v48, v47), vmla_n_f32(vmul_n_f32(v63, _Q1.f32[0]), (float32x2_t)__PAIR64__(v46.u32[0], LODWORD(v37)), v19.f32[0])), fabsf((float)(v65.f32[0]+ (float)((float)(v18.f32[0] * (float)(v64 + (float)(v46.f32[0] * *(float *)&_Q3))) - v65.f32[1]))+ -1.0) > 0.0001))
  {
    sub_239EC16DC();
  }
  v18.i32[1] = v48;
  *(float *)a2 = v17;
  v18.i64[1] = __PAIR64__(v19.u32[0], v47);
  *(float32x4_t *)(a2 + 4) = v18;
  DWORD1(_Q3) = v45.i32[0];
  *((_QWORD *)&_Q3 + 1) = __PAIR64__(LODWORD(v37), _Q1.u32[0]);
  *(_DWORD *)(a2 + 36) = v46.i32[0];
  *(_OWORD *)(a2 + 20) = _Q3;
  result = v67;
  *(_DWORD *)(a2 + 48) = v67.n128_u32[2];
  *(_QWORD *)(a2 + 40) = v67.n128_u64[0];
  return result;
}

float sub_2396C9378(float32x2_t *a1)
{
  float v2;
  float v3;
  float v4;
  int v5;
  float v6;
  float v7;
  float32x2_t v9;
  float v10;
  float v11;
  float v12;
  float cosval;
  float v14;
  __float2 v15;
  float v16;
  float v19;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float result;
  float v33;
  float32x4_t v34;
  float32x4_t v35;

  v35.i64[0] = 0;
  v35.i32[2] = 0;
  sub_2396C9544(a1, v35.f32);
  v2 = (float)((float)(v35.f32[1] * v35.f32[1]) + (float)(v35.f32[0] * v35.f32[0])) + (float)(v35.f32[2] * v35.f32[2]);
  if (v2 > 9.8696)
  {
    v3 = sqrtf(v2) / 3.1416;
    v4 = ceilf(v3) + -1.0;
    v5 = (int)v4;
    v6 = v3 - v4;
    if ((v5 & 1) != 0)
      v6 = v6 + -1.0;
    v7 = v6 / v3;
    v35.f32[0] = v35.f32[0] * v7;
    v35.f32[1] = v35.f32[1] * v7;
    v35.f32[2] = v35.f32[2] * v7;
  }
  _Q17 = v35;
  v9 = (float32x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL).u64[0];
  v10 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q17.f32, *(float32x2_t *)_Q17.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 1), *(float32x2_t *)v35.f32, 1), v9, v9).f32[0];
  if (v10 >= 0.0061)
  {
    v14 = sqrtf(v10);
    v33 = v10;
    v34 = v35;
    v15 = __sincosf_stret(v14);
    cosval = v15.__cosval;
    _Q17 = v34;
    v12 = v15.__sinval / v14;
    v11 = (float)(1.0 / v33) * (float)(1.0 - v15.__cosval);
  }
  else
  {
    v11 = 0.5 - (float)(v10 * (float)((float)(v10 / -720.0) + 0.041667));
    v12 = 1.0 - (float)(v10 * (float)(0.16667 - (float)(v10 * (float)((float)(v10 / -5040.0) + 0.0083333))));
    cosval = 1.0 - (float)(v10 * v11);
  }
  v16 = v11 * _Q17.f32[0];
  _S4 = vmuls_lane_f32(v11, *(float32x2_t *)_Q17.f32, 1);
  _S2 = vmuls_lane_f32(v11, _Q17, 2);
  v19 = vmlas_n_f32(cosval, v16, _Q17.f32[0]);
  __asm
  {
    FMLA            S6, S4, V17.S[1]
    FMLA            S1, S2, V17.S[2]
  }
  v26 = vmuls_lane_f32(v16, *(float32x2_t *)_Q17.f32, 1);
  v27 = vmuls_lane_f32(v16, _Q17, 2);
  v28 = vmuls_lane_f32(_S4, _Q17, 2);
  v29 = v12 * _Q17.f32[0];
  v30 = vmuls_lane_f32(v12, *(float32x2_t *)_Q17.f32, 1);
  v31 = vmuls_lane_f32(v12, _Q17, 2);
  a1->f32[0] = v19;
  a1->f32[1] = v26 + v31;
  a1[1].f32[0] = v27 - v30;
  a1[1].f32[1] = v26 - v31;
  a1[2].i32[0] = _S6;
  a1[2].f32[1] = v29 + v28;
  result = v28 - v29;
  a1[3].f32[0] = v30 + v27;
  a1[3].f32[1] = v28 - v29;
  a1[4].i32[0] = _S1;
  return result;
}

void sub_2396C9544(float32x2_t *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _BOOL4 v14;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;

  v4 = (float)(a1[2].f32[1] - a1[3].f32[1]) * 0.5;
  *a2 = v4;
  v5 = (float)(a1[3].f32[0] - a1[1].f32[0]) * 0.5;
  a2[1] = v5;
  v6 = (float)(a1->f32[1] - a1[1].f32[1]) * 0.5;
  a2[2] = v6;
  v7 = a1->f32[0];
  v8 = a1[2].f32[0];
  v9 = a1[4].f32[0];
  v10 = -1.0;
  v11 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
  v12 = (float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6);
  if (v11 >= -1.0 || (float)(v11 + 1.0) <= -0.00001)
  {
    v14 = v11 > 1.0;
    if ((float)(v11 + -1.0) >= 0.00001)
      v14 = 0;
    if (v11 <= 0.99 && !v14)
    {
      if (v11 <= -0.99)
      {
        v10 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
        goto LABEL_17;
      }
      v16 = acosf(v11) / sqrtf(v12);
      *a2 = v4 * v16;
      a2[1] = v5 * v16;
    }
    else
    {
      v16 = (float)(v12 * (float)((float)(v12 * (float)((float)((float)(v12 * 5.0) / 112.0) + 0.075)) + 0.16667)) + 1.0;
      *a2 = v4 * v16;
      a2[1] = v5 * v16;
    }
    a2[2] = v6 * v16;
    return;
  }
LABEL_17:
  v17 = asinf(sqrtf(v12));
  v18 = (float)((float)(3.1416 - v17) * (float)(3.1416 - v17)) / (float)(1.0 - v10);
  v19 = (float)(v7 - v10) * v18;
  v20 = (float)(v8 - v10) * v18;
  v21 = (float)(v9 - v10) * v18;
  if (v19 <= v20)
  {
    v26 = v18 * 0.5;
    if (v20 <= v21)
    {
      v33 = sqrtf(v21);
      if (v6 < 0.0)
        v33 = -v33;
      a2[2] = v33;
      v34.i32[0] = a1[1].i32[0];
      v34.i32[1] = a1[2].i32[1];
      *(float32x2_t *)a2 = vmul_n_f32(vmul_n_f32(vadd_f32(a1[3], v34), v26), 1.0 / v33);
    }
    else
    {
      v27 = sqrtf(v20);
      if (v5 < 0.0)
        v27 = -v27;
      a2[1] = v27;
      v28 = 1.0 / v27;
      v29 = a1[3].f32[1] + a1[2].f32[1];
      *a2 = v28 * (float)(v26 * (float)(a1[1].f32[1] + a1->f32[1]));
      a2[2] = v28 * (float)(v26 * v29);
    }
  }
  else
  {
    v22 = v18 * 0.5;
    v23 = v22 * (float)(a1[3].f32[0] + a1[1].f32[0]);
    if (v19 <= v21)
    {
      v30 = sqrtf(v21);
      if (v6 < 0.0)
        v30 = -v30;
      a2[2] = v30;
      v31 = 1.0 / v30;
      v32 = v31 * (float)(v22 * (float)(a1[3].f32[1] + a1[2].f32[1]));
      *a2 = v31 * v23;
      a2[1] = v32;
    }
    else
    {
      v24 = sqrtf(v19);
      if (v4 < 0.0)
        v24 = -v24;
      *a2 = v24;
      v25 = 1.0 / v24;
      a2[1] = v25 * (float)(v22 * (float)(a1[1].f32[1] + a1->f32[1]));
      a2[2] = v25 * v23;
    }
  }
}

uint64_t sub_2396C9854(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2396C98BC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  std::mutex *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v4 = atomic_load((unsigned __int8 *)&qword_25693C730);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25693C730))
  {
    v39 = operator new(0x58uLL);
    v39[2] = 0;
    *v39 = &unk_250AE3328;
    v39[1] = 0;
    v39[3] = 850045863;
    *((_OWORD *)v39 + 2) = 0u;
    *((_OWORD *)v39 + 3) = 0u;
    *((_OWORD *)v39 + 4) = 0u;
    v39[10] = 0;
    qword_25693C740 = (uint64_t)(v39 + 3);
    qword_25693C748 = (uint64_t)v39;
    __cxa_atexit((void (*)(void *))sub_2396C9854, &qword_25693C740, &dword_23940C000);
    __cxa_guard_release(&qword_25693C730);
  }
  v5 = (std::mutex *)qword_25693C740;
  v6 = (std::__shared_weak_count *)qword_25693C748;
  v44 = qword_25693C740;
  v45 = qword_25693C748;
  if (qword_25693C748)
  {
    v7 = (unint64_t *)(qword_25693C748 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  std::mutex::lock(v5);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = atomic_load((unsigned __int8 *)&qword_25693C738);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25693C738))
  {
    __cxa_atexit((void (*)(void *))sub_2396C9D5C, &qword_25693C750, &dword_23940C000);
    __cxa_guard_release(&qword_25693C738);
  }
  v44 = 0;
  v45 = 0;
  if (qword_25693C758)
  {
    v12 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_25693C758);
    v13 = v12;
    v45 = (uint64_t)v12;
    if (v12)
    {
      v44 = qword_25693C750;
      if (qword_25693C750)
      {
        v41 = qword_25693C750;
        v42 = v12;
LABEL_28:
        v22 = (unint64_t *)&v13->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        goto LABEL_30;
      }
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_QWORD *)(a1 + 24);
  if (!v14)
    sub_2394172E0();
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v14 + 48))(&v43);
  v15 = (char *)operator new(0x28uLL);
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_250AE3360;
  *(_OWORD *)(v15 + 24) = v43;
  v43 = 0uLL;
  v44 = (uint64_t)(v15 + 24);
  v45 = (uint64_t)v15;
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_2399FD504(&v43);
  v18 = v44;
  v13 = (std::__shared_weak_count *)v45;
  if (v45)
  {
    v19 = (unint64_t *)(v45 + 16);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)qword_25693C758;
  qword_25693C750 = v18;
  qword_25693C758 = (uint64_t)v13;
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  v41 = v18;
  v42 = v13;
  if (v13)
    goto LABEL_28;
LABEL_30:
  v24 = atomic_load((unsigned __int8 *)&qword_25693C730);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_25693C730))
  {
    v40 = operator new(0x58uLL);
    v40[2] = 0;
    *v40 = &unk_250AE3328;
    v40[1] = 0;
    v40[3] = 850045863;
    *((_OWORD *)v40 + 2) = 0u;
    *((_OWORD *)v40 + 3) = 0u;
    *((_OWORD *)v40 + 4) = 0u;
    v40[10] = 0;
    qword_25693C740 = (uint64_t)(v40 + 3);
    qword_25693C748 = (uint64_t)v40;
    __cxa_atexit((void (*)(void *))sub_2396C9854, &qword_25693C740, &dword_23940C000);
    __cxa_guard_release(&qword_25693C730);
  }
  v25 = qword_25693C740;
  v26 = (std::__shared_weak_count *)qword_25693C748;
  if (qword_25693C748)
  {
    v27 = (unint64_t *)(qword_25693C748 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *a2 = v41;
  a2[1] = (uint64_t)v42;
  if (v42)
  {
    v29 = (unint64_t *)&v42->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  a2[2] = v25;
  a2[3] = (uint64_t)v26;
  if (v26)
  {
    v31 = (unint64_t *)&v26->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 - 1, v31));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v42)
  {
    v34 = (unint64_t *)&v42->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v36 = (std::__shared_weak_count *)v45;
  if (v45)
  {
    v37 = (unint64_t *)(v45 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  std::mutex::unlock(v5);
}

void sub_2396C9CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex *v13;

  __cxa_guard_abort(&qword_25693C730);
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a13);
  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_2396C9CF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25693C730);
  _Unwind_Resume(a1);
}

void sub_2396C9D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2399FD504((uint64_t *)va);
  sub_239416DA0((uint64_t)va1);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void sub_2396C9D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2396C9854((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396C9D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::mutex *v5;
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  std::mutex::unlock(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_2396C9D5C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_2396C9D88(_QWORD *a1)
{
  unsigned __int8 v2;
  std::mutex *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v19;

  v2 = atomic_load((unsigned __int8 *)&qword_25693C730);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25693C730))
  {
    v19 = operator new(0x58uLL);
    v19[2] = 0;
    *v19 = &unk_250AE3328;
    v19[1] = 0;
    v19[3] = 850045863;
    *((_OWORD *)v19 + 2) = 0u;
    *((_OWORD *)v19 + 3) = 0u;
    *((_OWORD *)v19 + 4) = 0u;
    v19[10] = 0;
    qword_25693C740 = (uint64_t)(v19 + 3);
    qword_25693C748 = (uint64_t)v19;
    __cxa_atexit((void (*)(void *))sub_2396C9854, &qword_25693C740, &dword_23940C000);
    __cxa_guard_release(&qword_25693C730);
  }
  v3 = (std::mutex *)qword_25693C740;
  v4 = (std::__shared_weak_count *)qword_25693C748;
  if (qword_25693C748)
  {
    v5 = (unint64_t *)(qword_25693C748 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::mutex::lock(v3);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::mutex::unlock(v3);
  v12 = (std::__shared_weak_count *)a1[3];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)a1[1];
  if (!v15)
    return a1;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_2396C9F64(void *a1)
{
  __cxa_guard_abort(&qword_25693C730);
  sub_239416A48(a1);
}

void sub_2396C9F84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_250AE3328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2396C9F98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_250AE3328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2396C9FCC(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void sub_2396C9FD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE3360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2396C9FE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE3360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2396CA018(uint64_t a1)
{
  return sub_2399FD504(a1 + 24);
}

void sub_2396CA024(const __CFURL *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count_vtbl *v3;
  std::string::size_type size;
  std::string *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string __p;
  std::__fs::filesystem::path v10;
  std::string v11;
  char v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;

  v3 = (std::__shared_weak_count_vtbl *)CFURLCopyFileSystemPath(a1, kCFURLPOSIXPathStyle);
  sub_23962B464(&v13, v3, 0);
  sub_23962A000((uint64_t)v13, &v11);
  if (!v12)
  {
    *(_DWORD *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    v6 = v14;
    if (!v14)
      return;
    goto LABEL_15;
  }
  memset(&__p, 0, sizeof(__p));
  size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v11;
  else
    v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v11.__r_.__value_.__l.__size_;
  sub_23948900C(&__p, v5, (std::string *)((char *)v5 + size));
  std::__fs::filesystem::__absolute(&v10, (const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(std::__fs::filesystem::path *)a2 = v10;
  *(_BYTE *)(a2 + 24) = 1;
  if (v12 && SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v6 = v14;
  if (v14)
  {
LABEL_15:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2396CA14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  if (a24)
  {
    if (a23 < 0)
    {
      operator delete(a18);
      sub_239416DA0(v24 - 32);
      _Unwind_Resume(a1);
    }
  }
  sub_239416DA0(v24 - 32);
  _Unwind_Resume(a1);
}

void sub_2396CA1A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[2];
  uint64_t v9;
  CFStringRef filePath;
  std::__shared_weak_count *v11;
  __int128 v12;

  if (*(char *)(a1 + 23) < 0)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      sub_23941A7F8(__p, *(void **)a1, v3);
      goto LABEL_6;
    }
LABEL_12:
    *(_DWORD *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  if (!*(_BYTE *)(a1 + 23))
    goto LABEL_12;
  *(_OWORD *)__p = *(_OWORD *)a1;
  v9 = *(_QWORD *)(a1 + 16);
LABEL_6:
  sub_239629EF4((uint64_t)__p, &filePath);
  v4 = (std::__shared_weak_count_vtbl *)CFURLCreateWithFileSystemPath(0, filePath, kCFURLPOSIXPathStyle, 0);
  sub_23962B858((std::__shared_weak_count_vtbl **)&v12, v4, 0);
  *(_OWORD *)a2 = v12;
  v12 = 0uLL;
  *(_BYTE *)(a2 + 16) = 1;
  v5 = v11;
  if (!v11)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_10:
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(__p[0]);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (SHIBYTE(v9) < 0)
    goto LABEL_14;
}

void sub_2396CA2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2396CA2E0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *value[2];
  char v15;
  CFMutableArrayRef theArray;
  std::__shared_weak_count *v17;

  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3), MEMORY[0x24BDBD690]);
  sub_23962BE3C((std::__shared_weak_count_vtbl **)&theArray, Mutable, 0);
  v5 = *a1;
  v6 = a1[1];
  while (v5 != v6)
  {
    sub_2396CA1A0(v5, (uint64_t)value);
    if (!v15)
    {
      *(_DWORD *)a2 = value[0];
      *(_BYTE *)(a2 + 16) = 0;
      v11 = v17;
      if (!v17)
        return;
      goto LABEL_15;
    }
    CFArrayAppendValue(theArray, value[0]);
    v7 = (std::__shared_weak_count *)value[1];
    if (value[1])
    {
      v8 = (unint64_t *)((char *)value[1] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 += 24;
  }
  v10 = (std::__shared_weak_count_vtbl *)theArray;
  if (theArray)
    j__CFRetain(theArray);
  sub_2396CA494((std::__shared_weak_count_vtbl **)value, v10, 0);
  *(_OWORD *)a2 = *(_OWORD *)value;
  *(_BYTE *)(a2 + 16) = 1;
  v11 = v17;
  if (v17)
  {
LABEL_15:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_2396CA450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396CA464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_239600F8C((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2396CA480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_2396CA494(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_23962C8FC(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE1180;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_2396CA570(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_2396CA588(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2396CA59C(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  CFIndex Count;
  CFIndex v5;
  const __CFURL *ValueAtIndex;
  _OWORD *v7;
  __int128 v8;
  void **v9;
  void **v10;
  void **v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  void *v15[2];
  void *v16;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
  {
LABEL_15:
    *(_OWORD *)a2 = *(_OWORD *)v15;
    *(_QWORD *)(a2 + 16) = v16;
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
  v5 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(a1, v5);
    if (!ValueAtIndex)
    {
      *(_DWORD *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      v9 = (void **)v15[0];
      if (!v15[0])
        return;
      goto LABEL_20;
    }
    sub_2396CA024(ValueAtIndex, (uint64_t)__p);
    if (!v14)
      break;
    v7 = v15[1];
    if (v15[1] >= v16)
    {
      v15[1] = sub_23958837C((char **)v15, (uint64_t)__p);
      if (v14)
        goto LABEL_11;
    }
    else if (SHIBYTE(v13) < 0)
    {
      sub_23941A7F8((_BYTE *)v15[1], __p[0], (unint64_t)__p[1]);
      v15[1] = (char *)v7 + 24;
      if (v14)
      {
LABEL_11:
        if (SHIBYTE(v13) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      v8 = *(_OWORD *)__p;
      *((_QWORD *)v15[1] + 2) = v13;
      *v7 = v8;
      v15[1] = (char *)v7 + 24;
      if (v14)
        goto LABEL_11;
    }
    if (Count == ++v5)
      goto LABEL_15;
  }
  *(_DWORD *)a2 = __p[0];
  *(_BYTE *)(a2 + 24) = 0;
  v9 = (void **)v15[0];
  if (!v15[0])
    return;
LABEL_20:
  v10 = (void **)v15[1];
  v11 = v9;
  if (v15[1] != v9)
  {
    do
    {
      if (*((char *)v10 - 1) < 0)
        operator delete(*(v10 - 3));
      v10 -= 3;
    }
    while (v10 != v9);
    v11 = (void **)v15[0];
  }
  v15[1] = v9;
  operator delete(v11);
}

void sub_2396CA73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, void *a17, uint64_t a18)
{
  sub_23941A260(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_2396CA790(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  void *__p;
  char *v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  unint64_t v24[45];

  v24[44] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v20 = 0;
  v21 = 0;
  v6 = sub_2396CA9E4(a1, (char **)&__p);
  if ((v6 & 1) != 0)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    if (v7 <= v8)
    {
      if (v7 < v8)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 4 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
    }
    else
    {
      sub_2394E6878((char **)a2, v7 - v8);
    }
    if (a3 <= 0)
      a3 = std::thread::hardware_concurrency();
    sub_2397A2A50((uint64_t)v24, a3, 0);
    v10 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 32);
    v23 = 0;
    v11 = operator new(0x20uLL);
    *v11 = &off_250AE3398;
    v11[1] = a1;
    v11[2] = &__p;
    v11[3] = a2;
    v23 = v11;
    sub_2397A376C(v24, 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 2), v22, 0);
    v12 = v23;
    if (v23 == v22)
    {
      v13 = 4;
      v12 = v22;
    }
    else
    {
      if (!v23)
      {
LABEL_13:
        sub_2397A2E14(v24);
        goto LABEL_14;
      }
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
    goto LABEL_13;
  }
LABEL_14:
  v14 = (char *)__p;
  if (__p)
  {
    v15 = v20;
    v16 = __p;
    if (v20 != __p)
    {
      do
      {
        v17 = v15 - 24;
        sub_239421038((uint64_t)(v15 - 24), *((_QWORD **)v15 - 2));
        v15 = v17;
      }
      while (v17 != v14);
      v16 = __p;
    }
    v20 = v14;
    operator delete(v16);
  }
  return v6;
}

void sub_2396CA944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2394E9A28(&a9);
  _Unwind_Resume(a1);
}

void sub_2396CA958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2394E9A28(&a9);
  _Unwind_Resume(a1);
}

void sub_2396CA96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  sub_2397A2E14(&a16);
  sub_2394E9A28(&a9);
  _Unwind_Resume(a1);
}

void sub_2396CA9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2394E9A28(&a9);
  _Unwind_Resume(a1);
}

void sub_2396CA9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2394E9A28(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2396CA9E4(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  int v17;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v6 = v4 - 24;
      sub_239421038((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
      v4 = v6;
    }
    while (v6 != v5);
  }
  a2[1] = v5;
  if (!*(_BYTE *)(a1 + 168))
    goto LABEL_17;
  v7 = (uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  if (v7 <= v8)
  {
    if (v7 < v8)
    {
      for (i = (uint64_t)&(*a2)[24 * v7]; v5 != (char *)i; v5 -= 24)
        sub_239421038((uint64_t)(v5 - 24), *((_QWORD **)v5 - 2));
      a2[1] = (char *)i;
    }
  }
  else
  {
    sub_239520580((void **)a2, v7 - v8);
  }
  v10 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = v10 / 12;
    LODWORD(v14) = 1;
    while (*(_BYTE *)(a1 + 200))
    {
      v15 = (unsigned int *)(*(_QWORD *)(a1 + 176) + v11);
      v16 = sub_2396BFBB0(*v15, v15[1], v12, a2);
      v17 = sub_2396BFBB0(v15[1], v15[2], v12, a2);
      v14 = sub_2396BFBB0(v15[2], *v15, v12++, a2) & v17 & v16 & v14;
      v11 += 12;
      if (v13 == v12)
        return v14;
    }
LABEL_17:
    sub_2394875CC();
  }
  return 1;
}

uint64_t sub_2396CAB6C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _DWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  _DWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _OWORD *v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  int v83;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  unsigned int *v88;

  v2 = a2;
  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = a2[1];
    do
    {
      v8 = *(void **)(v6 - 24);
      v6 -= 24;
      v7 = v8;
      if (v8)
      {
        *(_QWORD *)(v4 - 16) = v7;
        operator delete(v7);
      }
      v4 = v6;
    }
    while (v6 != v5);
  }
  v2[1] = v5;
  if (!*(_BYTE *)(a1 + 168))
LABEL_87:
    sub_2394875CC();
  v9 = (uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *v2) >> 3);
  if (v9 <= v10)
  {
    if (v9 < v10)
    {
      v11 = *v2 + 24 * v9;
      if (v5 != v11)
      {
        v12 = v5;
        do
        {
          v14 = *(void **)(v12 - 24);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *(_QWORD *)(v5 - 16) = v13;
            operator delete(v13);
          }
          v5 = v12;
        }
        while (v12 != v11);
      }
      v2[1] = v11;
    }
  }
  else
  {
    sub_2394D951C((uint64_t)v2, v9 - v10);
  }
  v15 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  if (v15)
  {
    v16 = 0;
    v86 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 2);
    v87 = v2;
    v85 = a1;
    while (1)
    {
      if (!*(_BYTE *)(a1 + 200))
        goto LABEL_87;
      v17 = (unsigned int *)(*(_QWORD *)(a1 + 176) + 12 * v16);
      v18 = *v2 + 24 * *v17;
      v20 = (uint64_t *)(v18 + 8);
      v19 = *(char **)(v18 + 8);
      v21 = *(_QWORD *)(v18 + 16);
      v88 = v17;
      if ((unint64_t)v19 < v21)
      {
        *(_DWORD *)v19 = v16;
        v22 = (uint64_t)(v19 + 4);
        goto LABEL_42;
      }
      v23 = *(char **)v18;
      v24 = (uint64_t)&v19[-*(_QWORD *)v18];
      v25 = v24 >> 2;
      v26 = (v24 >> 2) + 1;
      if (v26 >> 62)
        goto LABEL_86;
      v27 = v21 - (_QWORD)v23;
      if (v27 >> 1 > v26)
        v26 = v27 >> 1;
      v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v26;
      if (v28)
        break;
      v29 = 0;
      v30 = (_DWORD *)(4 * v25);
      *(_DWORD *)(4 * v25) = v16;
      v22 = 4 * v25 + 4;
      if (v19 != v23)
        goto LABEL_33;
LABEL_39:
      *(_QWORD *)v18 = v30;
      *v20 = v22;
      *(_QWORD *)(v18 + 16) = &v29[4 * v28];
      if (v23)
        operator delete(v23);
      v2 = v87;
      v17 = v88;
LABEL_42:
      *v20 = v22;
      v40 = *v2 + 24 * v17[1];
      v42 = (uint64_t *)(v40 + 8);
      v41 = *(char **)(v40 + 8);
      v43 = *(_QWORD *)(v40 + 16);
      if ((unint64_t)v41 >= v43)
      {
        v45 = *(char **)v40;
        v46 = (uint64_t)&v41[-*(_QWORD *)v40];
        v47 = v46 >> 2;
        v48 = (v46 >> 2) + 1;
        if (v48 >> 62)
          goto LABEL_86;
        v49 = v43 - (_QWORD)v45;
        if (v49 >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          if (v50 >> 62)
            goto LABEL_88;
          v51 = operator new(4 * v50);
          v52 = &v51[4 * v47];
          *v52 = v16;
          v44 = (uint64_t)(v52 + 1);
          if (v41 == v45)
            goto LABEL_61;
LABEL_55:
          v53 = v41 - 4 - v45;
          if (v53 < 0x2C)
            goto LABEL_91;
          if ((unint64_t)(v41 - &v51[v46]) < 0x20)
            goto LABEL_91;
          v54 = (v53 >> 2) + 1;
          v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
          v56 = &v41[-v55];
          v52 = (_DWORD *)((char *)v52 - v55);
          v57 = &v51[4 * v47 - 16];
          v58 = v41 - 16;
          v59 = v54 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v60 = *(_OWORD *)v58;
            *(v57 - 1) = *((_OWORD *)v58 - 1);
            *v57 = v60;
            v57 -= 2;
            v58 -= 32;
            v59 -= 8;
          }
          while (v59);
          v41 = v56;
          if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_91:
            do
            {
              v61 = *((_DWORD *)v41 - 1);
              v41 -= 4;
              *--v52 = v61;
            }
            while (v41 != v45);
          }
        }
        else
        {
          v51 = 0;
          v52 = (_DWORD *)(4 * v47);
          *(_DWORD *)(4 * v47) = v16;
          v44 = 4 * v47 + 4;
          if (v41 != v45)
            goto LABEL_55;
        }
LABEL_61:
        *(_QWORD *)v40 = v52;
        *v42 = v44;
        *(_QWORD *)(v40 + 16) = &v51[4 * v50];
        if (v45)
          operator delete(v45);
        v2 = v87;
        v17 = v88;
        goto LABEL_64;
      }
      *(_DWORD *)v41 = v16;
      v44 = (uint64_t)(v41 + 4);
LABEL_64:
      *v42 = v44;
      v62 = *v2 + 24 * v17[2];
      v64 = (uint64_t *)(v62 + 8);
      v63 = *(char **)(v62 + 8);
      v65 = *(_QWORD *)(v62 + 16);
      if ((unint64_t)v63 < v65)
      {
        *(_DWORD *)v63 = v16;
        a1 = v85;
        *v64 = (uint64_t)(v63 + 4);
        if (++v16 == v86)
          return 1;
      }
      else
      {
        v66 = *(char **)v62;
        v67 = (uint64_t)&v63[-*(_QWORD *)v62];
        v68 = v67 >> 2;
        v69 = (v67 >> 2) + 1;
        if (v69 >> 62)
LABEL_86:
          sub_2394189F8();
        v70 = v65 - (_QWORD)v66;
        if (v70 >> 1 > v69)
          v69 = v70 >> 1;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
          v71 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        if (v71)
        {
          if (v71 >> 62)
LABEL_88:
            sub_239418A80();
          v72 = operator new(4 * v71);
          v73 = &v72[4 * v68];
          *v73 = v16;
          v74 = (uint64_t)(v73 + 1);
          if (v63 == v66)
            goto LABEL_82;
LABEL_76:
          v75 = v63 - 4 - v66;
          if (v75 < 0x2C)
            goto LABEL_92;
          if ((unint64_t)(v63 - &v72[v67]) < 0x20)
            goto LABEL_92;
          v76 = (v75 >> 2) + 1;
          v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
          v78 = &v63[-v77];
          v73 = (_DWORD *)((char *)v73 - v77);
          v79 = &v72[4 * v68 - 16];
          v80 = v63 - 16;
          v81 = v76 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v82 = *(_OWORD *)v80;
            *(v79 - 1) = *((_OWORD *)v80 - 1);
            *v79 = v82;
            v79 -= 2;
            v80 -= 32;
            v81 -= 8;
          }
          while (v81);
          v63 = v78;
          if (v76 != (v76 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_92:
            do
            {
              v83 = *((_DWORD *)v63 - 1);
              v63 -= 4;
              *--v73 = v83;
            }
            while (v63 != v66);
          }
          goto LABEL_82;
        }
        v72 = 0;
        v73 = (_DWORD *)(4 * v68);
        *(_DWORD *)(4 * v68) = v16;
        v74 = 4 * v68 + 4;
        if (v63 != v66)
          goto LABEL_76;
LABEL_82:
        *(_QWORD *)v62 = v73;
        *v64 = v74;
        *(_QWORD *)(v62 + 16) = &v72[4 * v71];
        if (v66)
          operator delete(v66);
        v2 = v87;
        a1 = v85;
        *v64 = v74;
        if (++v16 == v86)
          return 1;
      }
    }
    if (v28 >> 62)
      goto LABEL_88;
    v29 = operator new(4 * v28);
    v30 = &v29[4 * v25];
    *v30 = v16;
    v22 = (uint64_t)(v30 + 1);
    if (v19 == v23)
      goto LABEL_39;
LABEL_33:
    v31 = v19 - 4 - v23;
    if (v31 < 0x2C)
      goto LABEL_93;
    if ((unint64_t)(v19 - &v29[v24]) < 0x20)
      goto LABEL_93;
    v32 = (v31 >> 2) + 1;
    v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
    v34 = &v19[-v33];
    v30 = (_DWORD *)((char *)v30 - v33);
    v35 = &v29[4 * v25 - 16];
    v36 = v19 - 16;
    v37 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 8;
    }
    while (v37);
    v19 = v34;
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_93:
      do
      {
        v39 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *--v30 = v39;
      }
      while (v19 != v23);
    }
    goto LABEL_39;
  }
  return 1;
}

uint64_t sub_2396CB0E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void **v26;
  void **v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  void *v55;
  void *v56;
  void *v58[2];
  void *__p[2];
  int v60;
  void *v61[2];
  __int128 v62;
  __int128 v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;

  v69 = 0;
  v70 = 0;
  v71 = 0;
  sub_2396CAB6C(a1, &v69);
  sub_23954B528((char **)&v67, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2));
  v4 = v69;
  for (i = v70; v4 != i; v4 += 3)
  {
    v6 = v4[1] - *v4;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      do
      {
        LODWORD(v61[0]) = 0;
        v9 = *v4;
        v10 = v4[1];
        LODWORD(v61[0]) = *(_DWORD *)(*v4 + 4 * v7++);
        v11 = (v10 - v9) >> 2;
        for (j = v7; v11 != j; ++j)
        {
          LODWORD(v58[0]) = 0;
          LODWORD(v58[0]) = *(_DWORD *)(*v4 + 4 * j);
          sub_239456168((uint64_t)v67 + 40 * LODWORD(v61[0]), (unsigned int *)v58, v58);
          sub_239456168((uint64_t)v67 + 40 * LODWORD(v58[0]), (unsigned int *)v61, v61);
        }
      }
      while (v7 != v8);
    }
  }
  sub_239549C60(a2, 0x3E8uLL);
  v14 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v65 = 0;
  v66 = 0;
  v64 = 0;
  v15 = v13 - v14;
  if (v15)
  {
    if (v15 < 0)
      sub_2394189F8();
    v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 2);
    v64 = operator new(8 * (((v16 - 1) >> 6) + 1));
    v65 = 0;
    v66 = ((v16 - 1) >> 6) + 1;
    sub_23942D8C8(&v64, v16, 0);
    v17 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
    if (v17)
    {
      v18 = 0;
      v19 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 2);
      while ((*((_QWORD *)v64 + (v18 >> 6)) & (1 << v18)) != 0)
      {
LABEL_14:
        if (++v18 == v19)
          goto LABEL_59;
      }
      v62 = 0u;
      v63 = 0u;
      *(_OWORD *)v61 = 0u;
      *(_OWORD *)v58 = 0u;
      *(_OWORD *)__p = 0u;
      v60 = 1065353216;
      v20 = *(_QWORD *)(a2 + 8);
      if (v20 >= *(_QWORD *)(a2 + 16))
      {
        v22 = sub_239558738((char **)a2, (uint64_t *)v58);
      }
      else
      {
        *(_QWORD *)v20 = 0;
        *(void **)(v20 + 8) = v58[1];
        v58[1] = 0;
        *(void **)(v20 + 16) = __p[0];
        v21 = __p[1];
        *(void **)(v20 + 24) = __p[1];
        *(_DWORD *)(v20 + 32) = v60;
        if (v21)
        {
          __p[0] = 0;
          __p[1] = 0;
        }
        v22 = (char *)(v20 + 40);
      }
      *(_QWORD *)(a2 + 8) = v22;
      v23 = __p[0];
      if (__p[0])
      {
        do
        {
          v24 = (_QWORD *)*v23;
          operator delete(v23);
          v23 = v24;
        }
        while (v24);
      }
      v25 = v58[0];
      v58[0] = 0;
      if (v25)
        operator delete(v25);
      v27 = (void **)v61[1];
      v26 = (void **)v62;
      v28 = *(_QWORD *)(a2 + 8);
      if ((void *)v62 == v61[1])
        v29 = 0;
      else
        v29 = (((_QWORD)v62 - (unint64_t)v61[1]) << 7) - 1;
      v30 = *((_QWORD *)&v63 + 1);
      v31 = *((_QWORD *)&v63 + 1) + v63;
      if (v29 == *((_QWORD *)&v63 + 1) + (_QWORD)v63)
      {
        sub_2394F0374((uint64_t)v61);
        v27 = (void **)v61[1];
        v26 = (void **)v62;
        v30 = *((_QWORD *)&v63 + 1);
        v31 = v63 + *((_QWORD *)&v63 + 1);
      }
      (*(_DWORD **)((char *)v27 + ((v31 >> 7) & 0x1FFFFFFFFFFFFF8)))[v31 & 0x3FF] = v18;
      *((_QWORD *)&v63 + 1) = v30 + 1;
      *((_QWORD *)v64 + (v18 >> 6)) |= 1 << v18;
      v32 = *((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        do
        {
          LODWORD(v58[0]) = 0;
          LODWORD(v58[0]) = *(_DWORD *)(*(_QWORD *)((char *)v61[1] + (((unint64_t)v63 >> 7) & 0x1FFFFFFFFFFFFF8))
                                      + 4 * (v63 & 0x3FF));
          *(_QWORD *)&v63 = v63 + 1;
          *((_QWORD *)&v63 + 1) = v32 - 1;
          if ((unint64_t)v63 >= 0x800)
          {
            operator delete(*(void **)v61[1]);
            v61[1] = (char *)v61[1] + 8;
            *(_QWORD *)&v63 = v63 - 1024;
          }
          sub_239456168(v28 - 40, (unsigned int *)v58, v58);
          v33 = (uint64_t **)*((_QWORD *)v67 + 5 * LODWORD(v58[0]) + 2);
          if (v33)
          {
            v34 = v64;
            do
            {
              v35 = *((unsigned int *)v33 + 4);
              if (((1 << v35) & v34[v35 >> 6]) == 0)
              {
                v36 = (char *)v61[1];
                if ((void *)v62 == v61[1])
                  v37 = 0;
                else
                  v37 = (((_QWORD)v62 - (unint64_t)v61[1]) << 7) - 1;
                v38 = *((_QWORD *)&v63 + 1);
                v39 = *((_QWORD *)&v63 + 1) + v63;
                if (v37 == *((_QWORD *)&v63 + 1) + (_QWORD)v63)
                {
                  sub_2394F0374((uint64_t)v61);
                  v38 = *((_QWORD *)&v63 + 1);
                  v36 = (char *)v61[1];
                  v39 = v63 + *((_QWORD *)&v63 + 1);
                  v34 = v64;
                }
                *(_DWORD *)(*(_QWORD *)&v36[(v39 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v39 & 0x3FF)) = v35;
                *((_QWORD *)&v63 + 1) = v38 + 1;
                v34[v35 >> 6] |= 1 << v35;
              }
              v33 = (uint64_t **)*v33;
            }
            while (v33);
          }
          v32 = *((_QWORD *)&v63 + 1);
        }
        while (*((_QWORD *)&v63 + 1));
        v27 = (void **)v61[1];
        v26 = (void **)v62;
      }
      *((_QWORD *)&v63 + 1) = 0;
      v40 = (char *)v26 - (char *)v27;
      if ((unint64_t)((char *)v26 - (char *)v27) >= 0x11)
      {
        do
        {
          operator delete(*v27);
          v26 = (void **)v62;
          v27 = (void **)((char *)v61[1] + 8);
          v61[1] = v27;
          v40 = v62 - (_QWORD)v27;
        }
        while ((_QWORD)v62 - (_QWORD)v27 > 0x10uLL);
      }
      v41 = v40 >> 3;
      if (v41 == 1)
      {
        v42 = 512;
      }
      else
      {
        if (v41 != 2)
          goto LABEL_53;
        v42 = 1024;
      }
      *(_QWORD *)&v63 = v42;
LABEL_53:
      if (v27 != v26)
      {
        do
        {
          v43 = *v27++;
          operator delete(v43);
        }
        while (v27 != v26);
        if ((void *)v62 != v61[1])
          *(_QWORD *)&v62 = v62 + (((unint64_t)v61[1] - v62 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v61[0])
        operator delete(v61[0]);
      goto LABEL_14;
    }
LABEL_59:
    if (v64)
      operator delete(v64);
  }
  v44 = v67;
  if (v67)
  {
    v45 = v68;
    v46 = v67;
    if (v68 != v67)
    {
      do
      {
        v47 = (_QWORD *)*(v45 - 3);
        if (v47)
        {
          do
          {
            v48 = (_QWORD *)*v47;
            operator delete(v47);
            v47 = v48;
          }
          while (v48);
        }
        v50 = (void *)*(v45 - 5);
        v45 -= 5;
        v49 = v50;
        *v45 = 0;
        if (v50)
          operator delete(v49);
      }
      while (v45 != v44);
      v46 = v67;
    }
    v68 = v44;
    operator delete(v46);
  }
  v51 = v69;
  if (v69)
  {
    v52 = v70;
    v53 = v69;
    if (v70 != v69)
    {
      v54 = v70;
      do
      {
        v56 = (void *)*(v54 - 3);
        v54 -= 3;
        v55 = v56;
        if (v56)
        {
          *(v52 - 2) = (uint64_t)v55;
          operator delete(v55);
        }
        v52 = v54;
      }
      while (v54 != v51);
      v53 = v69;
    }
    v70 = v51;
    operator delete(v53);
  }
  return 1;
}

void sub_2396CB694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,_QWORD *__p,_QWORD *a27)
{
  uint64_t v27;
  char *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;

  if (__p)
  {
    v30 = a27;
    v31 = __p;
    if (a27 != __p)
    {
      do
      {
        v32 = (_QWORD *)*(v30 - 3);
        if (v32)
        {
          do
          {
            v33 = (_QWORD *)*v32;
            operator delete(v32);
            v32 = v33;
          }
          while (v33);
        }
        v35 = (void *)*(v30 - 5);
        v30 -= 5;
        v34 = v35;
        *v30 = 0;
        if (v35)
          operator delete(v34);
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
    v29 = *(char **)(v27 - 112);
    if (!v29)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v29 = *(char **)(v27 - 112);
    if (!v29)
      goto LABEL_4;
  }
  sub_239EC170C((char **)(v27 - 112), v29);
  goto LABEL_4;
}

void sub_2396CB7A0()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396CB7B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250AE3398;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_2396CB7F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE3398;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2396CB81C(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v45;
  uint64_t v46;
  int v47;
  int v49;
  uint64_t v50;
  int v51;
  int v53;

  v2 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v2 + 200))
    sub_2394875CC();
  v3 = *a2;
  v4 = (unsigned int *)(*(_QWORD *)(v2 + 176) + 12 * *a2);
  v5 = **(_QWORD **)(result + 16);
  v6 = v4[1];
  v7 = v4[2];
  if (v6 <= v7)
    v8 = v4[2];
  else
    v8 = v4[1];
  if (v6 < v7)
    v7 = v4[1];
  v9 = v5 + 24 * v7;
  v12 = *(_QWORD *)(v9 + 8);
  v10 = (_DWORD *)(v9 + 8);
  v11 = v12;
  if (!v12)
    goto LABEL_18;
  v13 = v10;
  do
  {
    v14 = *(_DWORD *)(v11 + 28);
    v15 = v14 >= v8;
    if (v14 >= v8)
      v16 = (uint64_t *)v11;
    else
      v16 = (uint64_t *)(v11 + 8);
    if (v15)
      v13 = (_DWORD *)v11;
    v11 = *v16;
  }
  while (*v16);
  if (v13 != v10 && v8 >= v13[7])
  {
    v41 = v13[8];
    v42 = v13[9];
    if (v3 == v41)
      v43 = v42;
    else
      v43 = v41;
    if ((_DWORD)v41 == -1 || v42 == -1)
      v17 = -1;
    else
      v17 = v43;
  }
  else
  {
LABEL_18:
    v17 = -1;
  }
  v18 = **(_QWORD **)(result + 24);
  *(_DWORD *)(v18 + 12 * v3) = v17;
  v19 = v4[2];
  if (v19 <= *v4)
    v20 = *v4;
  else
    v20 = v4[2];
  if (v19 >= *v4)
    v19 = *v4;
  v21 = v5 + 24 * v19;
  v24 = *(_QWORD *)(v21 + 8);
  v22 = (_DWORD *)(v21 + 8);
  v23 = v24;
  if (!v24)
    goto LABEL_35;
  v25 = v22;
  do
  {
    v26 = *(_DWORD *)(v23 + 28);
    v27 = v26 >= v20;
    if (v26 >= v20)
      v28 = (uint64_t *)v23;
    else
      v28 = (uint64_t *)(v23 + 8);
    if (v27)
      v25 = (_DWORD *)v23;
    v23 = *v28;
  }
  while (*v28);
  if (v25 != v22 && v20 >= v25[7])
  {
    v46 = v25[8];
    v45 = v25[9];
    if (v3 == v46)
      v47 = v45;
    else
      v47 = v46;
    if ((_DWORD)v46 == -1 || v45 == -1)
      v29 = -1;
    else
      v29 = v47;
  }
  else
  {
LABEL_35:
    v29 = -1;
  }
  *(_DWORD *)(v18 + 12 * v3 + 4) = v29;
  v30 = *v4;
  v31 = v4[1];
  if (*v4 <= v31)
    v32 = v4[1];
  else
    v32 = *v4;
  if (v30 >= v31)
    v30 = v31;
  v33 = v5 + 24 * v30;
  v36 = *(_QWORD *)(v33 + 8);
  v34 = (_DWORD *)(v33 + 8);
  v35 = v36;
  if (!v36)
    goto LABEL_52;
  v37 = v34;
  do
  {
    v38 = *(_DWORD *)(v35 + 28);
    v39 = v38 >= v32;
    if (v38 >= v32)
      v40 = (uint64_t *)v35;
    else
      v40 = (uint64_t *)(v35 + 8);
    if (v39)
      v37 = (_DWORD *)v35;
    v35 = *v40;
  }
  while (*v40);
  if (v37 != v34 && v32 >= v37[7])
  {
    v50 = v37[8];
    v49 = v37[9];
    if (v3 == v50)
      v51 = v49;
    else
      v51 = v50;
    if ((_DWORD)v50 == -1 || v49 == -1)
      v53 = -1;
    else
      v53 = v51;
    *(_DWORD *)(v18 + 12 * v3 + 8) = v53;
  }
  else
  {
LABEL_52:
    *(_DWORD *)(v18 + 12 * v3 + 8) = -1;
  }
  return result;
}

uint64_t sub_2396CB9F8(unsigned int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, unsigned int a8, double a9, double a10, float32x4_t a11)
{
  int32x4_t *v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  std::thread *v21;
  int v22;
  std::__thread_struct *v23;
  char *v24;
  int v25;
  char *v26;
  char *v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  std::thread *v35;
  char *v36;
  int64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  _opaque_pthread_t *v48;
  std::thread *v49;
  std::thread *v50;
  std::thread *v51;
  int v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t *v58;
  char *v59;
  uint64_t v60;
  __int32 *v61;
  float *v62;
  uint64_t v63;
  int v64;
  float v65;
  std::thread *v66;
  std::thread *v67;
  void *v68;
  _DWORD *v70;
  unsigned int v71;
  char *v72;
  int32x4_t *v73;
  uint64_t v76;
  std::thread v77;
  void *__p;
  std::thread *v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  int v85;

  v84 = a3;
  v85 = a2;
  if (!a8)
LABEL_63:
    sub_239EC1770();
  v83 = 0;
  *(_QWORD *)&v81 = &v85;
  *((_QWORD *)&v81 + 1) = &v84;
  v82 = a5;
  v76 = a8 - 1;
  if (a8 == 1 || 100 * a8 > a1)
  {
    sub_2396CBFB4((unsigned int **)&v81, a1, a4, a6, (float *)&v83, (_DWORD *)&v83 + 1, a9, a10, a11);
    goto LABEL_59;
  }
  __p = 0;
  v79 = 0;
  v80 = 0;
  v14 = (int32x4_t *)operator new(4 * a8);
  v70 = a7;
  bzero(v14, 4 * a8);
  v73 = v14;
  v15 = (char *)operator new(4 * a8);
  v16 = a8;
  v71 = a8;
  v17 = a1 / a8;
  bzero(v15, 4 * a8);
  v18 = 0;
  v19 = 0;
  v20 = a1 - v17 * v76;
  v72 = v15;
  do
  {
    if (v18 == v76)
      v22 = v20;
    else
      v22 = v17;
    v23 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v23);
    v24 = (char *)operator new();
    *(_QWORD *)v24 = v23;
    *(_OWORD *)(v24 + 8) = v81;
    *((_QWORD *)v24 + 3) = v82;
    *((_DWORD *)v24 + 8) = v22;
    *((_QWORD *)v24 + 5) = a4 + 24 * v19;
    *((_QWORD *)v24 + 6) = a6 + 4 * v19;
    *((_QWORD *)v24 + 7) = &v15[4 * v18];
    *((_QWORD *)v24 + 8) = (char *)v14 + 4 * v18;
    v25 = pthread_create(&v77.__t_, 0, (void *(__cdecl *)(void *))sub_2396CE7F0, v24);
    if (v25)
    {
      std::__throw_system_error(v25, "thread constructor failed");
      __break(1u);
      goto LABEL_63;
    }
    v26 = (char *)v79;
    if ((unint64_t)v79 < v80)
    {
      v79->__t_ = v77.__t_;
      v77.__t_ = 0;
      v21 = (std::thread *)(v26 + 8);
      goto LABEL_6;
    }
    v27 = (char *)__p;
    v28 = (char *)v79 - (_BYTE *)__p;
    v29 = ((char *)v79 - (_BYTE *)__p) >> 3;
    v30 = v29 + 1;
    v31 = 0uLL;
    if ((unint64_t)(v29 + 1) >> 61)
      sub_2394189F8();
    v32 = v80 - (_QWORD)__p;
    if ((uint64_t)(v80 - (_QWORD)__p) >> 2 > v30)
      v30 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v30;
    if (v33)
    {
      if (v33 >> 61)
        sub_239418A80();
      v34 = (char *)operator new(8 * v33);
      v31 = 0uLL;
    }
    else
    {
      v34 = 0;
    }
    v35 = (std::thread *)&v34[8 * v29];
    v36 = &v34[8 * v33];
    v35->__t_ = v77.__t_;
    v21 = v35 + 1;
    v77.__t_ = 0;
    v37 = v26 - v27;
    if (v26 == v27)
    {
      __p = &v34[8 * v29];
      v79 = v35 + 1;
      v80 = (unint64_t)v36;
      v15 = v72;
      v14 = v73;
      if (v26)
        goto LABEL_37;
      goto LABEL_6;
    }
    v38 = v37 - 8;
    if ((unint64_t)(v37 - 8) < 0x78)
    {
      v15 = v72;
      do
      {
LABEL_32:
        v48 = (_opaque_pthread_t *)*((_QWORD *)v26 - 1);
        v26 -= 8;
        v35[-1].__t_ = v48;
        --v35;
        *(_QWORD *)v26 = 0;
      }
      while (v26 != v27);
      goto LABEL_33;
    }
    v39 = v38 >> 3;
    v40 = (unint64_t)&v34[v28 - (v38 & 0xFFFFFFFFFFFFFFF8) - 8];
    v15 = v72;
    if (v40 < (unint64_t)v26 && &v26[-8 * v39 - 8] < (char *)v35)
      goto LABEL_32;
    v41 = v39 + 1;
    v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
    v43 = &v26[-v42];
    v35 = (std::thread *)((char *)v35 - v42);
    v44 = &v34[8 * v29 - 16];
    v45 = v26 - 16;
    v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v47 = *(_OWORD *)v45;
      *((_OWORD *)v44 - 1) = *((_OWORD *)v45 - 1);
      *(_OWORD *)v44 = v47;
      *((_OWORD *)v45 - 1) = v31;
      *(_OWORD *)v45 = v31;
      v44 -= 32;
      v45 -= 32;
      v46 -= 4;
    }
    while (v46);
    v26 = v43;
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_32;
LABEL_33:
    v26 = (char *)__p;
    v49 = v79;
    __p = v35;
    v79 = v21;
    v80 = (unint64_t)v36;
    if (v49 == (std::thread *)v26)
    {
      v14 = v73;
      if (v26)
        goto LABEL_37;
    }
    else
    {
      v14 = v73;
      do
        std::thread::~thread(v49 - 1);
      while (v49 != (std::thread *)v26);
      if (v26)
LABEL_37:
        operator delete(v26);
    }
LABEL_6:
    v79 = v21;
    std::thread::~thread(&v77);
    v19 += v17;
    ++v18;
  }
  while (v18 != v16);
  v51 = (std::thread *)__p;
  v50 = v79;
  if (__p != v79)
  {
    do
      std::thread::join(v51++);
    while (v51 != v50);
  }
  v52 = HIDWORD(v83);
  LODWORD(v53) = v83;
  if (v71 <= 1)
    v54 = 1;
  else
    v54 = v71;
  if (v54 < 8)
  {
    v55 = 0;
    goto LABEL_51;
  }
  v55 = v54 & 0xFFFFFFF8;
  v56 = 0uLL;
  v57 = (int32x4_t)HIDWORD(v83);
  v58 = v14 + 1;
  v59 = v15 + 16;
  v60 = v55;
  do
  {
    v57 = vaddq_s32(v57, v58[-1]);
    v56 = vaddq_s32(v56, *v58);
    v53 = (float)((float)((float)((float)((float)((float)((float)(v53 + COERCE_FLOAT(*((_OWORD *)v59 - 1)))
                                                        + COERCE_FLOAT(HIDWORD(*((_QWORD *)v59 - 2))))
                                                + COERCE_FLOAT(*((_QWORD *)v59 - 1)))
                                        + COERCE_FLOAT(HIDWORD(*((_OWORD *)v59 - 1))))
                                + COERCE_FLOAT(*(_OWORD *)v59))
                        + COERCE_FLOAT(HIDWORD(*(_QWORD *)v59)))
                + COERCE_FLOAT(*((_QWORD *)v59 + 1)))
        + COERCE_FLOAT(HIDWORD(*(_OWORD *)v59));
    v58 += 2;
    v59 += 32;
    v60 -= 8;
  }
  while (v60);
  v52 = vaddvq_s32(vaddq_s32(v56, v57));
  if (v55 != v54)
  {
LABEL_51:
    v61 = &v14->i32[v55];
    v62 = (float *)&v15[4 * v55];
    v63 = v54 - v55;
    do
    {
      v64 = *v61++;
      v52 += v64;
      v65 = *v62++;
      v53 = v65 + v53;
      --v63;
    }
    while (v63);
  }
  v83 = __PAIR64__(v52, LODWORD(v53));
  operator delete(v15);
  operator delete(v14);
  v66 = (std::thread *)__p;
  if (__p)
  {
    v67 = v79;
    v68 = __p;
    if (v79 != __p)
    {
      do
        std::thread::~thread(v67 - 1);
      while (v67 != v66);
      v68 = __p;
    }
    v79 = v66;
    operator delete(v68);
  }
  a7 = v70;
LABEL_59:
  *a7 = v83;
  return HIDWORD(v83);
}

void sub_2396CBECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  operator delete(__p);
  sub_239420998(&a17);
  _Unwind_Resume(a1);
}

void sub_2396CBEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_239420998((void **)va);
  _Unwind_Resume(a1);
}

void sub_2396CBEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::thread a16, void *a17)
{
  std::thread::~thread(&a16);
  operator delete(__p);
  operator delete(a12);
  sub_239420998(&a17);
  _Unwind_Resume(a1);
}

void sub_2396CBFB4(unsigned int **a1, unsigned int a2, uint64_t a3, uint64_t a4, float *a5, _DWORD *a6, double a7, double a8, float32x4_t a9)
{
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  float v24;

  if (a2)
  {
    v13 = a1[1];
    v14 = a2;
    v15 = 0;
    v16 = 0.0;
    if (!*((_BYTE *)a1[2] + 48))
    {
      while (!*v13)
      {
        v23 = -1;
        v24 = 3.4028e38;
        if (*(_DWORD *)(a4 + 4 * v15) != -1)
          goto LABEL_24;
LABEL_15:
        v16 = v16 + v24;
        if (++v15 == v14)
          goto LABEL_26;
      }
      v22 = 0;
      v23 = -1;
      v24 = 3.4028e38;
      do
      {
        *(float *)&a7 = sub_2396F4460(*(_QWORD *)a1[2] + 4 * **a1 * v22, *(_QWORD *)(a3 + 24 * v15), **a1, a7, a8, a9);
        if (v24 > *(float *)&a7)
        {
          v24 = *(float *)&a7;
          v23 = v22;
        }
        ++v22;
        v13 = a1[1];
      }
      while (v22 < *v13);
      if (*(_DWORD *)(a4 + 4 * v15) == v23)
        goto LABEL_15;
LABEL_24:
      *(_DWORD *)(a4 + 4 * v15) = v23;
      ++*a6;
      goto LABEL_15;
    }
    while (!*v13)
    {
      v19 = -1;
      v20 = 3.4028e38;
      if (*(_DWORD *)(a4 + 4 * v15) != -1)
        goto LABEL_14;
LABEL_4:
      v16 = v16 + v20;
      if (++v15 == v14)
        goto LABEL_26;
    }
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v20 = 3.4028e38;
    do
    {
      if (**a1 != 64)
        sub_239EC17A0();
      v21 = sub_2396CD27C((_QWORD *)(*((_QWORD *)a1[2] + 3) + v17), *(_QWORD **)(a3 + 24 * v15));
      if (v20 > (float)v21)
      {
        v20 = (float)v21;
        v19 = v18;
      }
      ++v18;
      v13 = a1[1];
      v17 += 64;
    }
    while (v18 < *v13);
    if (*(_DWORD *)(a4 + 4 * v15) == v19)
      goto LABEL_4;
LABEL_14:
    *(_DWORD *)(a4 + 4 * v15) = v19;
    ++*a6;
    goto LABEL_4;
  }
  v16 = 0.0;
LABEL_26:
  *a5 = v16;
}

void sub_2396CC1A8(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t a4, int *a5, uint64_t a6, unsigned int a7)
{
  uint64_t v7;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  size_t v15;
  size_t v16;
  int32x4_t *v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  float v32;
  uint64_t v33;
  int32x4_t v34;
  float v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  std::thread *v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  std::thread *v44;
  int v45;
  char *v46;
  char *v47;
  std::__thread_struct *v48;
  _QWORD *v49;
  int v50;
  char *v51;
  char *v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  std::thread *v60;
  char *v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  _opaque_pthread_t *v72;
  std::thread *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  char *v83;
  int v84;
  uint64_t v85;
  uint64_t v87;
  int8x8_t *v88;
  uint64_t v89;
  unsigned int v90;
  int8x8_t v91;
  int8x8_t v92;
  float32x4_t v93;
  float32x4_t *v94;
  float32x4_t v95;
  unsigned int v96;
  uint64_t v97;
  int8x16_t *v98;
  int8x16_t v99;
  int8x16_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t *v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  uint64_t v108;
  unsigned int v109;
  std::thread *v110;
  int v111;
  char *v112;
  char *v113;
  std::__thread_struct *v114;
  _QWORD *v115;
  char *v116;
  char *v117;
  int64_t v118;
  uint64_t v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  std::thread *v125;
  char *v126;
  int64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  __int128 v136;
  _opaque_pthread_t *v137;
  std::thread *v138;
  std::thread *v139;
  std::thread *v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  float32x4_t *v144;
  BOOL v145;
  float32x4_t *v146;
  uint64_t v147;
  float32x4_t *v148;
  float32x4_t v149;
  uint64_t v150;
  float *v151;
  float *v152;
  uint64_t v153;
  float v154;
  int32x4_t *v155;
  BOOL v156;
  int32x4_t *v157;
  uint64_t v158;
  int32x4_t *v159;
  int32x4_t v160;
  uint64_t v161;
  __int32 *v162;
  __int32 *v163;
  uint64_t v164;
  int v165;
  std::thread *v166;
  std::thread *v167;
  void *v168;
  _QWORD *v169;
  void *v170;
  _QWORD *v171;
  void *v172;
  void *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  void *v178;
  void *v179;
  unsigned int v180;
  uint64_t i;
  unsigned int v182;
  float v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  float32x4_t *v189;
  float32x4_t v190;
  int v191;
  unint64_t v192;
  float32x4_t v193;
  float32x4_t *v194;
  int8x8_t v195;
  unsigned __int32 v196;
  unint64_t v197;
  unint64_t v198;
  size_t v199;
  uint64_t v200;
  int32x4_t *v201;
  int v202;
  uint64_t v203;
  __int8 *v204;
  uint64_t v205;
  size_t __sz;
  int v209;
  int v210;
  uint64_t v211;
  std::thread v214;
  void *v215;
  std::thread *v216;
  unint64_t v217;
  void *__p;
  _QWORD *v219;
  char *v220;
  char *v221;
  char *v222;
  _DWORD v223[3];

  v223[0] = a2;
  if (!a7)
LABEL_228:
    sub_239EC17D0();
  v7 = a6;
  v10 = *(unsigned __int8 *)(a6 + 48);
  v11 = 8 * a2;
  if (*(_BYTE *)(a6 + 48))
    v12 = v11;
  else
    v12 = a2;
  v203 = v12;
  v13 = v12 * a3;
  if ((_DWORD)v13)
  {
    v14 = (float32x4_t *)operator new(4 * v13);
    bzero(v14, 4 * v13);
    v15 = 4 * v13;
    v204 = &v14->i8[4 * v13];
    v205 = a3;
    v16 = 4 * a3;
    __sz = v16;
    if (a3)
      goto LABEL_7;
  }
  else
  {
    v15 = 4 * v13;
    v14 = 0;
    v204 = 0;
    v205 = a3;
    v16 = 4 * a3;
    __sz = v16;
    if (a3)
    {
LABEL_7:
      v17 = (int32x4_t *)operator new(v16);
      bzero(v17, v16);
      v211 = a7 - 1;
      if (a7 == 1)
      {
LABEL_8:
        if (v10)
        {
          v19 = v203;
          v18 = (float32x4_t *)v204;
          if (a1)
          {
            v20 = a1;
            if (a2)
            {
              v21 = 0;
              __asm { FMOV            V5.2S, #1.0 }
              do
              {
                v26 = a5[v21];
                ++v17->i32[v26];
                v27 = *(unsigned __int8 **)(a4 + 24 * v21);
                v28 = v11 * v26;
                v29 = a2;
                do
                {
                  v31 = *v27++;
                  v30 = v31;
                  if ((v31 & 0x80u) == 0)
                    v32 = 0.0;
                  else
                    v32 = 1.0;
                  v33 = 4 * v28;
                  v14->f32[(unint64_t)v33 / 4] = v14->f32[(unint64_t)v33 / 4] + v32;
                  v34 = vdupq_n_s32(v30);
                  *(float32x4_t *)((char *)v14 + (v33 | 4)) = vaddq_f32(*(float32x4_t *)((char *)v14 + (v33 | 4)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vtstq_s32(v34, (int32x4_t)xmmword_239ECEF40)), (int8x8_t)0x1000100010001))));
                  *(float32x2_t *)((char *)v14->f32 + (v33 | 0x14)) = vadd_f32(*(float32x2_t *)((char *)v14->f32 + (v33 | 0x14)), (float32x2_t)vbic_s8(_D5, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(*(int8x8_t *)v34.i8, (int8x8_t)0x200000004))));
                  if ((v30 & 1) != 0)
                    v35 = 1.0;
                  else
                    v35 = 0.0;
                  *(float *)((char *)v14->f32 + (v33 | 0x1C)) = *(float *)((char *)v14->f32 + (v33 | 0x1C)) + v35;
                  v28 += 8;
                  --v29;
                }
                while (v29);
                ++v21;
              }
              while (v21 != a1);
            }
            else
            {
              do
              {
                v36 = *a5++;
                ++v17->i32[v36];
                --v20;
              }
              while (v20);
            }
          }
          goto LABEL_187;
        }
        v19 = v203;
        v18 = (float32x4_t *)v204;
        if (!a1)
          goto LABEL_187;
        v74 = 0;
        v75 = a2 - 1;
        v76 = a2 & 0xFFFFFFF8;
        while (1)
        {
          v77 = a5[v74];
          ++v17->i32[v77];
          if (a2)
            break;
LABEL_72:
          if (++v74 == a1)
            goto LABEL_187;
        }
        v78 = v77 * a2;
        v79 = *(_QWORD *)(a4 + 24 * v74);
        if (a2 >= 8)
        {
          v80 = 0;
          if (__CFADD__(v78, (_DWORD)v75) || HIDWORD(v75))
            goto LABEL_76;
          v85 = 4 * v78;
          if (v79 >= (unint64_t)v14->u64 + 4 * a2 + v85 || (unint64_t)v14 + v85 >= v79 + a2)
          {
            if (a2 >= 0x10)
            {
              v96 = v78;
              v97 = a2 & 0xFFFFFFF0;
              v98 = *(int8x16_t **)(a4 + 24 * v74);
              do
              {
                v99 = *v98++;
                v100 = v99;
                v101 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v100.i8, *(int8x8_t *)v100.i8), 8uLL), 8uLL)));
                v102 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v100.i8, *(int8x8_t *)v100.i8), 8uLL), 8uLL)));
                v100.i64[0] = vextq_s8(v100, v100, 8uLL).u64[0];
                v103 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v100.i8, *(int8x8_t *)v100.i8), 8uLL), 8uLL)));
                v104 = (float32x4_t *)((char *)v14 + 4 * v96);
                v105 = v104[2];
                v106 = vaddq_f32(v104[3], vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v100.i8, *(int8x8_t *)v100.i8), 8uLL), 8uLL))));
                v107 = vaddq_f32(v104[1], v102);
                *v104 = vaddq_f32(*v104, v101);
                v104[1] = v107;
                v104[2] = vaddq_f32(v105, v103);
                v104[3] = v106;
                v96 += 16;
                v97 -= 16;
              }
              while (v97);
              if ((a2 & 0xFFFFFFF0) == (unint64_t)a2)
                goto LABEL_72;
              v87 = a2 & 0xFFFFFFF0;
              v80 = v87;
              if ((a2 & 8) == 0)
                goto LABEL_76;
            }
            else
            {
              v87 = 0;
            }
            v88 = (int8x8_t *)(v79 + v87);
            v89 = v87 - v76;
            v90 = v78 + v87;
            do
            {
              v91 = *v88++;
              v92 = v91;
              v93 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v92, v92), 8uLL), 8uLL)));
              v94 = (float32x4_t *)((char *)v14 + 4 * v90);
              v95 = vaddq_f32(v94[1], vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v92, v92), 8uLL), 8uLL))));
              *v94 = vaddq_f32(*v94, v93);
              v94[1] = v95;
              v90 += 8;
              v89 += 8;
            }
            while (v89);
            v80 = a2 & 0xFFFFFFF8;
            if (v76 == a2)
              goto LABEL_72;
            goto LABEL_76;
          }
        }
        v80 = 0;
LABEL_76:
        v81 = a2 - v80;
        v82 = v78 + v80;
        v83 = (char *)(v79 + v80);
        do
        {
          v84 = *v83++;
          v14->f32[v82] = v14->f32[v82] + (float)v84;
          ++v82;
          --v81;
        }
        while (v81);
        goto LABEL_72;
      }
      goto LABEL_26;
    }
  }
  v17 = 0;
  v211 = a7 - 1;
  if (a7 == 1)
    goto LABEL_8;
LABEL_26:
  __p = 0;
  v219 = 0;
  v220 = 0;
  v202 = v10;
  v201 = v17;
  if ((_DWORD)v13)
  {
    v37 = (char *)operator new(v15);
    v38 = &v37[4 * v13];
    __p = v37;
    v220 = v38;
    bzero(v37, v15);
    v219 = v38;
    v10 = v202;
  }
  sub_2396CE8FC(&v221, a7, (uint64_t)&__p);
  if (__p)
  {
    v219 = __p;
    operator delete(__p);
  }
  v215 = 0;
  v216 = 0;
  v217 = 0;
  if (a3)
  {
    v39 = (char *)operator new(__sz);
    v40 = (std::thread *)&v39[4 * v205];
    v215 = v39;
    v217 = (unint64_t)v40;
    bzero(v39, __sz);
    v216 = v40;
    v10 = v202;
  }
  sub_2394F0CF4(&__p, a7, (uint64_t)&v215);
  if (v215)
  {
    v216 = (std::thread *)v215;
    operator delete(v215);
  }
  v199 = v15;
  v200 = v7;
  v215 = 0;
  v216 = 0;
  v217 = 0;
  v41 = a1 / a7;
  v209 = a1 / a7;
  v210 = a1 - a1 / a7 * v211;
  if (v10)
  {
    v42 = 0;
    v43 = 0;
    while (1)
    {
      if (v42 == v211)
        v45 = v210;
      else
        v45 = v41;
      v46 = v221;
      v47 = (char *)__p;
      v48 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v48);
      v49 = (_QWORD *)operator new();
      *v49 = v48;
      v49[1] = v223;
      *((_DWORD *)v49 + 4) = v45;
      v49[3] = a4 + 24 * v43;
      v49[4] = &a5[v43];
      v49[5] = &v46[24 * v42];
      v49[6] = &v47[24 * v42];
      v50 = pthread_create(&v214.__t_, 0, (void *(__cdecl *)(void *))sub_2396CEA88, v49);
      if (v50)
        goto LABEL_222;
      v51 = (char *)v216;
      if ((unint64_t)v216 < v217)
      {
        v216->__t_ = v214.__t_;
        v214.__t_ = 0;
        v44 = (std::thread *)(v51 + 8);
      }
      else
      {
        v52 = (char *)v215;
        v53 = (char *)v216 - (_BYTE *)v215;
        v54 = ((char *)v216 - (_BYTE *)v215) >> 3;
        v55 = v54 + 1;
        v56 = 0uLL;
        if ((unint64_t)(v54 + 1) >> 61)
          sub_2394189F8();
        v57 = v217 - (_QWORD)v215;
        if ((uint64_t)(v217 - (_QWORD)v215) >> 2 > v55)
          v55 = v57 >> 2;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
          v58 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v58 = v55;
        if (v58)
        {
          if (v58 >> 61)
            sub_239418A80();
          v59 = (char *)operator new(8 * v58);
          v56 = 0uLL;
        }
        else
        {
          v59 = 0;
        }
        v60 = (std::thread *)&v59[8 * v54];
        v61 = &v59[8 * v58];
        v60->__t_ = v214.__t_;
        v44 = v60 + 1;
        v214.__t_ = 0;
        v62 = v51 - v52;
        if (v51 == v52)
        {
          v215 = &v59[8 * v54];
          v216 = v60 + 1;
          v217 = (unint64_t)v61;
          v41 = v209;
          if (!v51)
            goto LABEL_37;
          goto LABEL_69;
        }
        v63 = v62 - 8;
        if ((unint64_t)(v62 - 8) < 0x78)
          goto LABEL_231;
        v64 = v63 >> 3;
        if (&v59[v53 - (v63 & 0xFFFFFFFFFFFFFFF8) - 8] < v51 && &v51[-8 * v64 - 8] < (char *)v60)
          goto LABEL_231;
        v65 = v64 + 1;
        v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v51[-v66];
        v60 = (std::thread *)((char *)v60 - v66);
        v68 = &v59[8 * v54 - 16];
        v69 = v51 - 16;
        v70 = v65 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v71 = *(_OWORD *)v69;
          *((_OWORD *)v68 - 1) = *((_OWORD *)v69 - 1);
          *(_OWORD *)v68 = v71;
          *((_OWORD *)v69 - 1) = v56;
          *(_OWORD *)v69 = v56;
          v68 -= 32;
          v69 -= 32;
          v70 -= 4;
        }
        while (v70);
        v51 = v67;
        if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_231:
          do
          {
            v72 = (_opaque_pthread_t *)*((_QWORD *)v51 - 1);
            v51 -= 8;
            v60[-1].__t_ = v72;
            --v60;
            *(_QWORD *)v51 = 0;
          }
          while (v51 != v52);
        }
        v51 = (char *)v215;
        v73 = v216;
        v215 = v60;
        v216 = v44;
        v217 = (unint64_t)v61;
        if (v73 != (std::thread *)v51)
        {
          v41 = v209;
          do
            std::thread::~thread(v73 - 1);
          while (v73 != (std::thread *)v51);
          if (!v51)
            goto LABEL_37;
LABEL_69:
          operator delete(v51);
          goto LABEL_37;
        }
        v41 = v209;
        if (v51)
          goto LABEL_69;
      }
LABEL_37:
      v216 = v44;
      std::thread::~thread(&v214);
      v43 += v45;
      if (++v42 == a7)
        goto LABEL_132;
    }
  }
  v108 = 0;
  v109 = 0;
  do
  {
    if (v108 == v211)
      v111 = v210;
    else
      v111 = v41;
    v112 = v221;
    v113 = (char *)__p;
    v114 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v114);
    v115 = (_QWORD *)operator new();
    *v115 = v114;
    v115[1] = v223;
    *((_DWORD *)v115 + 4) = v111;
    v115[3] = a4 + 24 * v109;
    v115[4] = &a5[v109];
    v115[5] = &v112[24 * v108];
    v115[6] = &v113[24 * v108];
    v50 = pthread_create(&v214.__t_, 0, (void *(__cdecl *)(void *))sub_2396CEC90, v115);
    if (v50)
    {
LABEL_222:
      std::__throw_system_error(v50, "thread constructor failed");
      __break(1u);
      goto LABEL_228;
    }
    v116 = (char *)v216;
    if ((unint64_t)v216 < v217)
    {
      v216->__t_ = v214.__t_;
      v214.__t_ = 0;
      v110 = (std::thread *)(v116 + 8);
      goto LABEL_99;
    }
    v117 = (char *)v215;
    v118 = (char *)v216 - (_BYTE *)v215;
    v119 = ((char *)v216 - (_BYTE *)v215) >> 3;
    v120 = v119 + 1;
    v121 = 0uLL;
    if ((unint64_t)(v119 + 1) >> 61)
      sub_2394189F8();
    v122 = v217 - (_QWORD)v215;
    if ((uint64_t)(v217 - (_QWORD)v215) >> 2 > v120)
      v120 = v122 >> 2;
    if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8)
      v123 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v123 = v120;
    if (v123)
    {
      if (v123 >> 61)
        sub_239418A80();
      v124 = (char *)operator new(8 * v123);
      v121 = 0uLL;
    }
    else
    {
      v124 = 0;
    }
    v125 = (std::thread *)&v124[8 * v119];
    v126 = &v124[8 * v123];
    v125->__t_ = v214.__t_;
    v110 = v125 + 1;
    v214.__t_ = 0;
    v127 = v116 - v117;
    if (v116 == v117)
    {
      v215 = &v124[8 * v119];
      v216 = v125 + 1;
      v217 = (unint64_t)v126;
      v41 = v209;
      if (v116)
        goto LABEL_131;
    }
    else
    {
      v128 = v127 - 8;
      if ((unint64_t)(v127 - 8) < 0x78)
        goto LABEL_232;
      v129 = v128 >> 3;
      if (&v124[v118 - (v128 & 0xFFFFFFFFFFFFFFF8) - 8] < v116 && &v116[-8 * v129 - 8] < (char *)v125)
        goto LABEL_232;
      v130 = v129 + 1;
      v131 = 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
      v132 = &v116[-v131];
      v125 = (std::thread *)((char *)v125 - v131);
      v133 = &v124[8 * v119 - 16];
      v134 = v116 - 16;
      v135 = v130 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v136 = *(_OWORD *)v134;
        *((_OWORD *)v133 - 1) = *((_OWORD *)v134 - 1);
        *(_OWORD *)v133 = v136;
        *((_OWORD *)v134 - 1) = v121;
        *(_OWORD *)v134 = v121;
        v133 -= 32;
        v134 -= 32;
        v135 -= 4;
      }
      while (v135);
      v116 = v132;
      if (v130 != (v130 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_232:
        do
        {
          v137 = (_opaque_pthread_t *)*((_QWORD *)v116 - 1);
          v116 -= 8;
          v125[-1].__t_ = v137;
          --v125;
          *(_QWORD *)v116 = 0;
        }
        while (v116 != v117);
      }
      v116 = (char *)v215;
      v138 = v216;
      v215 = v125;
      v216 = v110;
      v217 = (unint64_t)v126;
      if (v138 == (std::thread *)v116)
      {
        v41 = v209;
        if (!v116)
          goto LABEL_99;
LABEL_131:
        operator delete(v116);
        goto LABEL_99;
      }
      v41 = v209;
      do
        std::thread::~thread(v138 - 1);
      while (v138 != (std::thread *)v116);
      if (v116)
        goto LABEL_131;
    }
LABEL_99:
    v216 = v110;
    std::thread::~thread(&v214);
    v109 += v111;
    ++v108;
  }
  while (v108 != a7);
LABEL_132:
  v140 = (std::thread *)v215;
  v139 = v216;
  v7 = v200;
  v17 = v201;
  if (v215 != v216)
  {
    do
      std::thread::join(v140++);
    while (v140 != v139);
  }
  v141 = 0;
  v142 = v221;
  v143 = __p;
  while (2)
  {
    if ((_DWORD)v13)
    {
      v144 = *(float32x4_t **)&v142[24 * v141];
      if (v13 < 8
        || (v14 < (float32x4_t *)((char *)v144 + v199)
          ? (v145 = v144 >= (float32x4_t *)((char *)v14 + v199))
          : (v145 = 1),
            !v145))
      {
        v150 = 0;
        goto LABEL_148;
      }
      v146 = v144 + 1;
      v147 = v13 & 0xFFFFFFF8;
      v148 = v14 + 1;
      do
      {
        v149 = vaddq_f32(*v146, *v148);
        v148[-1] = vaddq_f32(v146[-1], v148[-1]);
        *v148 = v149;
        v146 += 2;
        v148 += 2;
        v147 -= 8;
      }
      while (v147);
      v150 = v13 & 0xFFFFFFF8;
      if (v150 != v13)
      {
LABEL_148:
        v151 = &v144->f32[v150];
        v152 = &v14->f32[v150];
        v153 = v13 - v150;
        do
        {
          v154 = *v151++;
          *v152 = v154 + *v152;
          ++v152;
          --v153;
        }
        while (v153);
      }
    }
    if (a3)
    {
      v155 = (int32x4_t *)v143[3 * v141];
      if (a3 < 8
        || (v201 < (int32x4_t *)&v155->i8[__sz] ? (v156 = v155 >= (int32x4_t *)&v201->i8[__sz]) : (v156 = 1), !v156))
      {
        v161 = 0;
        goto LABEL_162;
      }
      v157 = v155 + 1;
      v158 = v205 & 0xFFFFFFF8;
      v159 = v201 + 1;
      do
      {
        v160 = vaddq_s32(*v159, *v157);
        v159[-1] = vaddq_s32(v159[-1], v157[-1]);
        *v159 = v160;
        v157 += 2;
        v159 += 2;
        v158 -= 8;
      }
      while (v158);
      v161 = v205 & 0xFFFFFFF8;
      if (v161 != v205)
      {
LABEL_162:
        v162 = &v155->i32[v161];
        v163 = &v201->i32[v161];
        v164 = v205 - v161;
        do
        {
          v165 = *v162++;
          *v163++ += v165;
          --v164;
        }
        while (v164);
      }
    }
    if (++v141 != a7)
      continue;
    break;
  }
  v166 = (std::thread *)v215;
  v19 = v203;
  v18 = (float32x4_t *)v204;
  if (v215)
  {
    v167 = v216;
    v168 = v215;
    if (v216 != v215)
    {
      do
        std::thread::~thread(v167 - 1);
      while (v167 != v166);
      v168 = v215;
    }
    v216 = v166;
    operator delete(v168);
    v143 = __p;
  }
  if (v143)
  {
    v169 = v219;
    v170 = v143;
    if (v219 != v143)
    {
      v171 = v219;
      do
      {
        v173 = (void *)*(v171 - 3);
        v171 -= 3;
        v172 = v173;
        if (v173)
        {
          *(v169 - 2) = v172;
          operator delete(v172);
        }
        v169 = v171;
      }
      while (v171 != v143);
      v170 = __p;
    }
    v219 = v143;
    operator delete(v170);
  }
  v174 = v221;
  if (v221)
  {
    v175 = v222;
    v176 = v221;
    if (v222 != v221)
    {
      v177 = v222;
      do
      {
        v179 = (void *)*((_QWORD *)v177 - 3);
        v177 -= 24;
        v178 = v179;
        if (v179)
        {
          *((_QWORD *)v175 - 2) = v178;
          operator delete(v178);
        }
        v175 = v177;
      }
      while (v177 != v174);
      v176 = v221;
      v18 = (float32x4_t *)v204;
    }
    v222 = v174;
    operator delete(v176);
  }
  v10 = v202;
LABEL_187:
  if (a3)
  {
    v180 = 0;
    for (i = 0; i != v205; ++i)
    {
      v182 = v17->u32[i];
      if (!v182 || !(_DWORD)v19)
        goto LABEL_189;
      v183 = 1.0 / (double)v182;
      if (v19 >= 8)
      {
        v184 = 0;
        if (!__CFADD__(v19 * i, v19 - 1) && !((unint64_t)(v19 - 1) >> 32))
        {
          v187 = v180;
          v188 = v19 & 0xFFFFFFF8;
          do
          {
            v189 = (float32x4_t *)((char *)v14 + 4 * v187);
            v190 = vmulq_n_f32(v189[1], v183);
            *v189 = vmulq_n_f32(*v189, v183);
            v189[1] = v190;
            v187 += 8;
            v188 -= 8;
          }
          while (v188);
          v184 = v19 & 0xFFFFFFF8;
          if (v184 == v19)
            goto LABEL_189;
        }
      }
      else
      {
        v184 = 0;
      }
      v185 = v180 + v184;
      v186 = v19 - v184;
      do
      {
        v14->f32[v185] = v14->f32[v185] * v183;
        ++v185;
        --v186;
      }
      while (v186);
LABEL_189:
      v180 += v19;
    }
  }
  if (v10)
  {
    if (v223[0] * a3)
    {
      v191 = 0;
      v192 = 0;
      v193.i64[0] = 0x3F0000003F000000;
      v193.i64[1] = 0x3F0000003F000000;
      do
      {
        v194 = (float32x4_t *)((char *)v14 + 4 * (v191 & 0xFFFFFFF8));
        v195 = vand_s8((int8x8_t)vmovn_s32(vcgeq_f32(*v194, v193)), (int8x8_t)0x10002000400080);
        v196 = v195.i32[0] | v195.i32[1] | ((v195.i32[0] | v195.i32[1]) >> 16) | (8
                                                                                              * (v194[1].f32[0] >= 0.5)) | (2 * (v194[1].f32[2] >= 0.5)) | (4 * (v194[1].f32[1] >= 0.5));
        if (v194[1].f32[3] >= 0.5)
          LOBYTE(v196) = v196 + 1;
        *(_BYTE *)(*(_QWORD *)(v7 + 24) + v192++) = v196;
        v191 += 8;
      }
      while (v192 < v223[0] * a3);
    }
  }
  else
  {
    v197 = (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 2;
    v198 = ((char *)v18 - (char *)v14) >> 2;
    if (v198 != v197)
    {
      if (v198 <= v197)
      {
        if (v198 < v197)
          *(_QWORD *)(v7 + 8) = *(_QWORD *)v7 + 4 * v198;
      }
      else
      {
        sub_2394807B4(v7, v198 - v197);
      }
    }
    if (v18 != v14)
      memmove(*(void **)v7, v14, (char *)v18 - (char *)v14);
  }
  if (v17)
    operator delete(v17);
  if (v14)
    operator delete(v14);
}

void sub_2396CD030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::thread a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  void *v28;
  void *v29;

  if (v29)
  {
    operator delete(v29);
    if (!v28)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v28)
  {
    goto LABEL_3;
  }
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

float sub_2396CD18C(unsigned int a1, unsigned int a2, uint64_t *a3, uint64_t a4, int *a5, double a6, double a7, float32x4_t a8)
{
  unint64_t v12;
  uint64_t v13;
  float v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;

  if (!a1)
    return 0.0;
  v12 = a2;
  v13 = a1;
  v14 = 0.0;
  if (a2 == 64)
  {
    do
    {
      while (1)
      {
        v18 = *a5++;
        v19 = (v18 << 6);
        v20 = (_QWORD *)*a3;
        if (*(_BYTE *)(a4 + 48))
          break;
        *(float *)&a6 = sub_2396F4460(*(_QWORD *)a4 + 4 * v19, (uint64_t)v20, v12, a6, a7, a8);
        v14 = v14 + *(float *)&a6;
        a3 += 3;
        if (!--v13)
          return v14;
      }
      *(float *)&a6 = (float)sub_2396CD27C((_QWORD *)(*(_QWORD *)(a4 + 24) + v19), v20);
      v14 = v14 + *(float *)&a6;
      a3 += 3;
      --v13;
    }
    while (v13);
  }
  else
  {
    do
    {
      if (*(_BYTE *)(a4 + 48))
        sub_239EC1800();
      v15 = *a5++;
      v16 = *(_QWORD *)a4 + 4 * v15 * a2;
      v17 = *a3;
      a3 += 3;
      *(float *)&a6 = sub_2396F4460(v16, v17, v12, a6, a7, a8);
      v14 = v14 + *(float *)&a6;
      --v13;
    }
    while (v13);
  }
  return v14;
}

uint64_t sub_2396CD27C(_QWORD *a1, _QWORD *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v11;
  uint64_t v12;
  _BYTE v13[6];
  char v14;

  v12 = *a2 ^ *a1;
  v14 = 1;
  v11 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[1] ^ a1[1];
  v14 = 1;
  v4 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[2] ^ a1[2];
  v14 = 1;
  v5 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[3] ^ a1[3];
  v14 = 1;
  v6 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[4] ^ a1[4];
  v14 = 1;
  v7 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[5] ^ a1[5];
  v14 = 1;
  v8 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[6] ^ a1[6];
  v14 = 1;
  v9 = sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
  v12 = a2[7] ^ a1[7];
  v14 = 1;
  return v11 + v4 + v5 + v6 + v7 + v8 + v9 + sub_2394AA530(&v12, 0, (uint64_t)v13, 0, &v14);
}

void sub_2396CD49C(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7, double a8, double a9, float32x4_t a10)
{
  int v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  float *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  float *v27;
  float v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  std::thread *v33;
  int v34;
  char *v35;
  std::__thread_struct *v36;
  _QWORD *v37;
  char *v38;
  int v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  std::thread *v53;
  char *v54;
  int64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  _opaque_pthread_t *v66;
  std::thread *v67;
  std::thread *v68;
  std::thread *v69;
  std::thread *v70;
  void *v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  float *v81;
  float v82;
  uint64_t v83;
  float v84;
  float v85;
  float *v86;
  uint64_t v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  uint64_t v93;
  float *v94;
  float v95;
  float *v96;
  uint64_t v97;
  float v98;
  float v99;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  int v107;
  std::thread v108;
  void *__p;
  std::thread *v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  unsigned int v114;
  unint64_t v115;

  v10 = a2;
  v115 = a1;
  v114 = a3;
  v113 = a6;
  if (a2 <= a1)
LABEL_111:
    sub_239EC0704();
  v12 = a4;
  v112 = *(_BYTE *)(a5 + 48);
  v13 = a3;
  v14 = a3 * a1;
  if (v112)
  {
    if (*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24) < v14)
      sub_239EC1890();
  }
  else if (v14 > (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    sub_239EC1830();
  }
  if (!a1)
  {
    a7[1] = *a7;
    sub_2394FBB68(a7, a2);
    v23 = (float *)a7[1];
    v24 = (char *)v23 - (_BYTE *)*a7;
    if (v23 != *a7)
    {
      LODWORD(v25) = 0;
      v26 = v24 >> 3;
      v27 = (float *)((char *)*a7 + 4);
      v28 = 0.0;
      do
      {
        *((_DWORD *)v27 - 1) = v25;
        *v27 = v28;
        v27 += 2;
        v28 = (float)(1.0 / (float)v26) + v28;
        v25 = (v25 + 1);
      }
      while (v26 > v25);
    }
    return;
  }
  v103 = a1;
  v15 = (float *)*a7;
  if (a2 != ((_BYTE *)a7[1] - (_BYTE *)*a7) >> 3)
    sub_239EC1860();
  v102 = a2 - a1;
  v16 = (a4 - 1);
  if ((_DWORD)a4 == 1)
  {
    if (a2 == (_DWORD)a1)
      goto LABEL_73;
    v17 = (unsigned int *)&v15[2 * v102];
    if (v112)
    {
      v18 = 1;
      do
      {
        if (v18)
        {
          v20 = 0;
          v18 = v115;
          if (v115 <= 1)
            v21 = 1;
          else
            v21 = v115;
          v19 = 3.4028e38;
          do
          {
            v22 = sub_2396CD27C((_QWORD *)(*(_QWORD *)(a5 + 24) + v20), *(_QWORD **)(v113 + 24 * *(unsigned int *)v15));
            if (v19 > (float)v22)
              v19 = (float)v22;
            v20 += v13;
            --v21;
          }
          while (v21);
        }
        else
        {
          v19 = 3.4028e38;
        }
        v15[1] = v19;
        v15 += 2;
      }
      while (v15 != (float *)v17);
    }
    else
    {
      v72 = 1;
      do
      {
        if (v72)
        {
          v74 = 0;
          v72 = v115;
          if (v115 <= 1)
            v75 = 1;
          else
            v75 = v115;
          v73 = 3.4028e38;
          do
          {
            *(float *)&a8 = sub_2396F4460(*(_QWORD *)a5 + v74, *(_QWORD *)(v113 + 24 * *(unsigned int *)v15), v13, a8, a9, a10);
            if (*(float *)&a8 < v73)
              v73 = *(float *)&a8;
            v74 += 4 * v13;
            --v75;
          }
          while (v75);
        }
        else
        {
          v73 = 3.4028e38;
        }
        v15[1] = v73;
        v15 += 2;
      }
      while (v15 != (float *)v17);
    }
    v10 = a2;
    if (a2 == v103)
      return;
LABEL_88:
    v76 = (char *)*a7;
    v77 = (v102 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v77)
    {
      v78 = v77 + 1;
      v79 = (v77 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v80 = (float *)&v76[8 * v79];
      v81 = (float *)(v76 + 12);
      v82 = 0.0;
      v83 = v79;
      do
      {
        v84 = *(v81 - 2);
        v85 = *v81;
        v81 += 4;
        v82 = (float)(v82 + v84) + v85;
        v83 -= 2;
      }
      while (v83);
      if (v78 == v79)
      {
LABEL_95:
        if (v82 <= 0.0)
        {
          v90 = (float)(v10 - (int)v115);
          v91 = fabsf(v90);
          v92 = -3.4028e38;
          if (v10 >= (int)v115)
            v92 = 3.4028e38;
          if (v91 >= 0.00000011921)
          {
            v96 = (float *)(v76 + 4);
            v97 = 8 * v102;
            v98 = 0.0;
            v99 = 1.0 / v90;
            do
            {
              *v96 = v98 * v99;
              v96 += 2;
              v98 = v98 + 1.0;
              v97 -= 8;
            }
            while (v97);
          }
          else
          {
            v93 = 8 * v102;
            v94 = (float *)(v76 + 4);
            v95 = 0.0;
            do
            {
              *v94 = v95 * v92;
              v94 += 2;
              v95 = v95 + 1.0;
              v93 -= 8;
            }
            while (v93);
          }
        }
        else
        {
          v86 = (float *)(v76 + 4);
          v87 = 8 * v102;
          v88 = 0.0;
          do
          {
            v89 = *v86;
            *v86 = v88 / v82;
            v86 += 2;
            v88 = v88 + v89;
            v87 -= 8;
          }
          while (v87);
        }
        return;
      }
    }
    else
    {
      v82 = 0.0;
      v80 = (float *)*a7;
    }
    do
    {
      v82 = v82 + v80[1];
      v80 += 2;
    }
    while (v80 != (float *)&v76[8 * v102]);
    goto LABEL_95;
  }
  __p = 0;
  v110 = 0;
  v111 = 0;
  if (!(_DWORD)a4)
    goto LABEL_73;
  v29 = 0;
  v30 = 0;
  v31 = v102 / a4;
  v32 = v102 - v31 * v16;
  v104 = v32;
  do
  {
    if (v29 == (_DWORD)v16)
      v34 = v32;
    else
      v34 = v31;
    v107 = v34;
    v35 = (char *)*a7;
    v36 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v36);
    v37 = (_QWORD *)operator new();
    *v37 = v36;
    v37[1] = &v115;
    v38 = &v35[8 * v30];
    v37[2] = &v112;
    v37[3] = a5;
    v39 = v107;
    v37[4] = &v114;
    v37[5] = &v113;
    v37[6] = v38;
    v37[7] = &v38[8 * v107];
    v40 = pthread_create(&v108.__t_, 0, (void *(__cdecl *)(void *))sub_2396CEF04, v37);
    if (v40)
    {
      std::__throw_system_error(v40, "thread constructor failed");
      __break(1u);
      goto LABEL_111;
    }
    v41 = (char *)v110;
    if ((unint64_t)v110 < v111)
    {
      v110->__t_ = v108.__t_;
      v108.__t_ = 0;
      v33 = (std::thread *)(v41 + 8);
      goto LABEL_30;
    }
    v105 = v30;
    v42 = v31;
    v43 = v12;
    v44 = v16;
    v45 = (char *)__p;
    v46 = (char *)v110 - (_BYTE *)__p;
    v47 = ((char *)v110 - (_BYTE *)__p) >> 3;
    v48 = v47 + 1;
    v49 = 0uLL;
    if ((unint64_t)(v47 + 1) >> 61)
      sub_2394189F8();
    v50 = v111 - (_QWORD)__p;
    if ((uint64_t)(v111 - (_QWORD)__p) >> 2 > v48)
      v48 = v50 >> 2;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v48;
    if (v51)
    {
      if (v51 >> 61)
        sub_239418A80();
      v52 = (char *)operator new(8 * v51);
      v49 = 0uLL;
    }
    else
    {
      v52 = 0;
    }
    v53 = (std::thread *)&v52[8 * v47];
    v54 = &v52[8 * v51];
    v53->__t_ = v108.__t_;
    v33 = v53 + 1;
    v108.__t_ = 0;
    v55 = v41 - v45;
    if (v41 == v45)
    {
      __p = &v52[8 * v47];
      v110 = v53 + 1;
      v111 = (unint64_t)v54;
      v16 = v44;
      v12 = v43;
      v31 = v42;
      v30 = v105;
LABEL_61:
      v32 = v104;
      v39 = v107;
      if (!v41)
        goto LABEL_30;
LABEL_62:
      operator delete(v41);
      goto LABEL_30;
    }
    v56 = v55 - 8;
    if ((unint64_t)(v55 - 8) < 0x78)
    {
      v16 = v44;
      v12 = v43;
      v31 = v42;
      v30 = v105;
      do
      {
LABEL_55:
        v66 = (_opaque_pthread_t *)*((_QWORD *)v41 - 1);
        v41 -= 8;
        v53[-1].__t_ = v66;
        --v53;
        *(_QWORD *)v41 = 0;
      }
      while (v41 != v45);
      goto LABEL_56;
    }
    v57 = v56 >> 3;
    v58 = (unint64_t)&v52[v46 - (v56 & 0xFFFFFFFFFFFFFFF8) - 8];
    v16 = v44;
    v12 = v43;
    v31 = v42;
    v30 = v105;
    if (v58 < (unint64_t)v41 && &v41[-8 * v57 - 8] < (char *)v53)
      goto LABEL_55;
    v59 = v57 + 1;
    v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
    v61 = &v41[-v60];
    v53 = (std::thread *)((char *)v53 - v60);
    v62 = &v52[8 * v47 - 16];
    v63 = v41 - 16;
    v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v65 = *(_OWORD *)v63;
      *((_OWORD *)v62 - 1) = *((_OWORD *)v63 - 1);
      *(_OWORD *)v62 = v65;
      *((_OWORD *)v63 - 1) = v49;
      *(_OWORD *)v63 = v49;
      v62 -= 32;
      v63 -= 32;
      v64 -= 4;
    }
    while (v64);
    v41 = v61;
    if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_55;
LABEL_56:
    v41 = (char *)__p;
    v67 = v110;
    __p = v53;
    v110 = v33;
    v111 = (unint64_t)v54;
    if (v67 == (std::thread *)v41)
      goto LABEL_61;
    v32 = v104;
    v39 = v107;
    do
      std::thread::~thread(v67 - 1);
    while (v67 != (std::thread *)v41);
    if (v41)
      goto LABEL_62;
LABEL_30:
    v110 = v33;
    std::thread::~thread(&v108);
    v30 += v39;
    ++v29;
  }
  while (v29 != (_DWORD)v12);
  v69 = (std::thread *)__p;
  v68 = v110;
  if (__p == v110)
  {
    v10 = a2;
    if (!v110)
      goto LABEL_73;
  }
  else
  {
    v10 = a2;
    do
      std::thread::join(v69++);
    while (v69 != v68);
    v68 = (std::thread *)__p;
    if (!__p)
      goto LABEL_73;
  }
  v70 = v110;
  v71 = v68;
  if (v110 != v68)
  {
    do
      std::thread::~thread(v70 - 1);
    while (v70 != v68);
    v71 = __p;
  }
  v110 = v68;
  operator delete(v71);
LABEL_73:
  if (v10 != v103)
    goto LABEL_88;
}

void sub_2396CDB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::thread a15, void *a16)
{
  std::thread::~thread(&a15);
  sub_239420998(&a16);
  _Unwind_Resume(a1);
}

void sub_2396CDBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  MEMORY[0x23B83E31C](v8, 0x20C4093837F09);
  sub_239420998((void **)va);
  _Unwind_Resume(a1);
}

void sub_2396CDBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a8);
  v10 = *v8;
  *v8 = 0;
  if (v10)
  {
    v11 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v11, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](v8, 0xF0C40291112A8);
  sub_239420998((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2396CDC38(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int *a5, double a6, double a7, float32x4_t a8)
{
  uint64_t result;
  unsigned int v11;
  int *v12;
  unsigned int v16;
  unsigned int v17;
  int8x8_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  int8x8_t *v51;
  uint64_t v52;
  uint64_t v53;
  int8x8_t v54;
  int8x8_t v55;
  int32x4_t *v56;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  char *v60;
  int v61;
  float32x4_t *v62;
  uint64_t v63;
  int8x16_t *v64;
  int8x16_t v65;
  int8x8_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  __int8 *v74;
  _DWORD *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v82;
  int8x8_t *v83;
  float32x4_t *v84;
  uint64_t v85;
  int8x8_t v86;
  uint64_t v87;
  uint64_t v88;
  float *v89;
  char *v90;
  int v91;
  float32x4_t *v92;
  uint64_t v93;
  int8x16_t *v94;
  int8x16_t v95;
  int8x8_t v96;
  unsigned int *v98;
  uint64_t v99;
  int v100;
  void *v102[3];
  void *__p;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107[3];

  result = 0;
  v107[0] = a1;
  if (!a1)
    return result;
  v12 = (int *)(a5 + 1);
  v11 = a5[1];
  if (v11 > a1)
    return result;
  v100 = *(unsigned __int8 *)(a4 + 48);
  v16 = a5[6];
  if (v16 != 1)
  {
    if (v16)
      return 0;
    LODWORD(v102[0]) = *a5;
    sub_239454CD8((int *)v102, (uint64_t)&__p);
    v17 = a5[1];
    if (v17 > a1)
    {
      sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if ((double)a1 * 0.5 >= (double)v17)
      sub_239455384((uint64_t)&__p, v107, v12, (int32x4_t **)v102);
    else
      sub_2394551BC((uint64_t)&__p, v107, (unsigned int *)v12, (int32x4_t **)v102);
    v67 = *v12;
    if (!(_DWORD)v67)
      goto LABEL_61;
    if (v100)
    {
      v68 = 0;
      v69 = 0;
      do
      {
        memcpy((void *)(*(_QWORD *)(a4 + 24) + v68), *(const void **)(a3 + 24 * *((unsigned int *)v102[0] + v69++)), a2);
        v68 += a2;
      }
      while (v69 < *v12);
LABEL_61:
      v70 = (unsigned int *)v102[0];
LABEL_62:
      if (v70)
      {
        v102[1] = v70;
        operator delete(v70);
      }
      sub_239911CF8((uint64_t)&v106);
      return 1;
    }
    v70 = (unsigned int *)v102[0];
    if (!a2)
      goto LABEL_62;
    v71 = *(_QWORD *)a4;
    if (a2 < 8)
    {
      v72 = 0;
      do
      {
        v73 = *v70++;
        v74 = *(__int8 **)(a3 + 24 * v73);
        v75 = (_DWORD *)(v71 + 4 * v72);
        v18.i8[0] = *v74;
        v18 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).u64[0];
        *(float *)v18.i32 = (float)v18.i32[0];
        *v75 = v18.i32[0];
        if (a2 != 1)
        {
          v18.i8[0] = v74[1];
          v18 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).u64[0];
          *(float *)v18.i32 = (float)v18.i32[0];
          v75[1] = v18.i32[0];
          if (a2 != 2)
          {
            v18.i8[0] = v74[2];
            v18 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).u64[0];
            *(float *)v18.i32 = (float)v18.i32[0];
            v75[2] = v18.i32[0];
            if (a2 != 3)
            {
              v18.i8[0] = v74[3];
              v18 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).u64[0];
              *(float *)v18.i32 = (float)v18.i32[0];
              v75[3] = v18.i32[0];
              if (a2 != 4)
              {
                v18.i8[0] = v74[4];
                v18 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).u64[0];
                *(float *)v18.i32 = (float)v18.i32[0];
                v75[4] = v18.i32[0];
                if (a2 != 5)
                {
                  v18.i8[0] = v74[5];
                  v18 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).u64[0];
                  *(float *)v18.i32 = (float)v18.i32[0];
                  v75[5] = v18.i32[0];
                  if (a2 != 6)
                  {
                    v18.i8[0] = v74[6];
                    v18 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).u64[0];
                    *(float *)v18.i32 = (float)v18.i32[0];
                    v75[6] = v18.i32[0];
                  }
                }
              }
            }
          }
        }
        v72 += a2;
        --v67;
      }
      while (v67);
      goto LABEL_61;
    }
    v76 = 0;
    v77 = 0;
    while (1)
    {
      v78 = 4 * v76;
      v79 = *(_QWORD *)(a3 + 24 * v70[v77]);
      v80 = 4 * v77 * a2;
      if (v71 + v80 >= v79 + a2 || v79 >= v71 + 4 * (unint64_t)a2 + v80)
      {
        if (a2 < 0x10)
        {
          v82 = 0;
LABEL_87:
          v83 = (int8x8_t *)(v79 + v82);
          v84 = (float32x4_t *)(v71 + v78 + 4 * v82);
          v85 = v82 - (a2 & 0xFFFFFFF8);
          do
          {
            v86 = *v83++;
            *v84 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v86, v86), 8uLL), 8uLL)));
            v84[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v86, v86), 8uLL), 8uLL)));
            v84 += 2;
            v85 += 8;
          }
          while (v85);
          v87 = a2 & 0xFFFFFFF8;
          if (v87 == a2)
            goto LABEL_79;
          goto LABEL_90;
        }
        v92 = (float32x4_t *)(v71 + v78);
        v93 = a2 & 0xFFFFFFF0;
        v94 = *(int8x16_t **)(a3 + 24 * v70[v77]);
        do
        {
          v95 = *v94++;
          v96 = (int8x8_t)vextq_s8(v95, v95, 8uLL).u64[0];
          *v92 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v95.i8, *(int8x8_t *)v95.i8), 8uLL), 8uLL)));
          v92[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v95.i8, *(int8x8_t *)v95.i8), 8uLL), 8uLL)));
          v92[2] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v96, *(int8x8_t *)v95.i8), 8uLL), 8uLL)));
          v92[3] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v96, *(int8x8_t *)v95.i8), 8uLL), 8uLL)));
          v92 += 4;
          v93 -= 16;
        }
        while (v93);
        if ((a2 & 0xFFFFFFF0) == (unint64_t)a2)
          goto LABEL_79;
        v82 = a2 & 0xFFFFFFF0;
        v87 = v82;
        if ((a2 & 8) != 0)
          goto LABEL_87;
      }
      else
      {
        v87 = 0;
      }
LABEL_90:
      v88 = a2 - v87;
      v89 = (float *)(v71 + v78 + 4 * v87);
      v90 = (char *)(v79 + v87);
      do
      {
        v91 = *v90++;
        *v89++ = (float)v91;
        --v88;
      }
      while (v88);
LABEL_79:
      ++v77;
      v76 += a2;
      if (v77 == v67)
        goto LABEL_61;
    }
  }
  v19 = *a5;
  __p = 0;
  v104 = 0;
  v105 = 0;
  if (!v11)
    return 1;
  v98 = a5 + 1;
  v21 = 0;
  v22 = 0;
  v23 = a2;
  v24 = v19
      + (((((v19 + 2 * (unint64_t)v19) >> 32)
                       + ((v19 - ((v19 + 2 * (unint64_t)v19) >> 32)) >> 1)) >> 30) | ((((v19 + 2 * (unint64_t)v19) >> 32) + ((v19 - ((v19 + 2 * (unint64_t)v19) >> 32)) >> 1)) >> 30 << 31));
  if (v24 <= 1)
    v25 = 1;
  else
    v25 = v24;
  v99 = 4 * a2;
  v26 = a1;
  sub_2396CD49C(0, a1, a2, a5[2], a4, a3, &__p, a6, a7, a8);
  while (1)
  {
    v34 = 48271 * (v25 % 0xADC8);
    v35 = 3399 * (v25 / 0xADC8);
    v49 = v34 >= v35;
    v36 = v34 - v35;
    if (v49)
      v37 = 0;
    else
      v37 = 0x7FFFFFFF;
    v25 = v37 + v36;
    v30 = __p;
    if (v26)
    {
      v27.f32[0] = (float)((float)(v25 - 1) * 4.6566e-10) + 0.0;
      v38 = v26;
      v39 = (char *)__p;
      do
      {
        v40 = v38 >> 1;
        v41 = &v39[8 * (v38 >> 1)];
        v28.i32[0] = *((_DWORD *)v41 + 1);
        v42 = v41 + 8;
        v38 += ~(v38 >> 1);
        if (*(float *)v28.i32 < v27.f32[0])
          v39 = v42;
        else
          v38 = v40;
      }
      while (v38);
    }
    else
    {
      v39 = (char *)__p;
    }
    v43 = v22 + 1;
    if (v39 == __p)
      v44 = 0;
    else
      v44 = -1;
    v45 = &v39[8 * v44];
    *((_DWORD *)v45 + 1) = -1082130432;
    v46 = *(char **)(a3 + 24 * *(unsigned int *)v45);
    v47 = v22 * v23;
    if (v100)
    {
      memcpy((void *)(*(_QWORD *)(a4 + 24) + v47), v46, v23);
      v30 = __p;
      goto LABEL_14;
    }
    if (a2)
    {
      v48 = *(_QWORD *)a4;
      if (a2 < 8
        || (v48 + 4 * v47 < (unint64_t)&v46[v23] ? (v49 = (unint64_t)v46 >= v48 + v99 * v43) : (v49 = 1),
            !v49))
      {
        v57 = 0;
LABEL_45:
        v58 = v23 - v57;
        v59 = v48 + 4 * v57;
        v60 = &v46[v57];
        do
        {
          v61 = *v60++;
          v27.f32[0] = (float)v61;
          *(float *)(v59 + v21) = (float)v61;
          v59 += 4;
          --v58;
        }
        while (v58);
        goto LABEL_14;
      }
      if (a2 >= 0x10)
      {
        v62 = (float32x4_t *)(v48 + v21);
        v63 = v23 & 0xFFFFFFF0;
        v64 = *(int8x16_t **)(a3 + 24 * *(unsigned int *)v45);
        do
        {
          v65 = *v64++;
          v66 = (int8x8_t)vextq_s8(v65, v65, 8uLL).u64[0];
          v29 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v66, *(int8x8_t *)v65.i8), 8uLL), 8uLL)));
          v28 = vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v66, *(int8x8_t *)v65.i8), 8uLL), 8uLL));
          *v62 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v65.i8, *(int8x8_t *)v65.i8), 8uLL), 8uLL)));
          v62[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v65.i8, *(int8x8_t *)v65.i8), 8uLL), 8uLL)));
          v27 = vcvtq_f32_s32(v28);
          v62[2] = v29;
          v62[3] = v27;
          v62 += 4;
          v63 -= 16;
        }
        while (v63);
        v57 = v23 & 0xFFFFFFF0;
        if (v57 == v23)
          goto LABEL_14;
        v50 = v23 & 0xFFFFFFF0;
        if ((v23 & 8) == 0)
          goto LABEL_45;
      }
      else
      {
        v50 = 0;
      }
      v51 = (int8x8_t *)&v46[v50];
      v52 = v48 + 4 * v50;
      v53 = v50 - (v23 & 0xFFFFFFF8);
      do
      {
        v54 = *v51++;
        v55 = v54;
        v28 = (int32x4_t)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v55, v55), 8uLL), 8uLL)));
        v27 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v55, v55), 8uLL), 8uLL)));
        v56 = (int32x4_t *)(v52 + v21);
        *v56 = v28;
        v56[1] = (int32x4_t)v27;
        v52 += 32;
        v53 += 8;
      }
      while (v53);
      v57 = v23 & 0xFFFFFFF8;
      if (v57 != v23)
        goto LABEL_45;
    }
LABEL_14:
    v31 = (v45 - v30) & 0x7FFFFFFF8;
    v32 = 8 * --v26;
    v33 = *(_QWORD *)&v30[v31];
    *(_QWORD *)&v30[v31] = *(_QWORD *)&v30[v32];
    *(_QWORD *)&v30[v32] = v33;
    v21 += v99;
    ++v22;
    if (v43 >= *v98)
      break;
    sub_2396CD49C(v22, a1, a2, a5[2], a4, a3, &__p, *(double *)v27.i64, *(double *)v28.i64, v29);
  }
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_2396CE370(_Unwind_Exception *a1)
{
  sub_239911CF8((uint64_t)&STACK[0xA28]);
  _Unwind_Resume(a1);
}

void sub_2396CE388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_2396CE3A4(__int128 *a1, unsigned int a2, unsigned int a3, uint64_t *a4, uint64_t a5, void *a6, int *a7, char a8, float *a9, uint64_t a10, float *a11, uint64_t a12)
{
  __int128 v12;
  int v20;
  float v21;
  size_t v22;
  char *v23;
  void *v24;
  float *v25;
  uint64_t v26;
  std::chrono::system_clock::time_point v27;
  double v28;
  double v29;
  float32x4_t v30;
  std::chrono::system_clock::time_point v31;
  std::chrono::system_clock::time_point v32;
  std::chrono::system_clock::time_point v33;
  float32x4_t v34;
  int v35;
  float v36;
  int v38;
  unsigned int v40;
  double v41;
  double v42;
  float32x4_t v43;
  unsigned int v44;
  double v46;
  double v47;
  float32x4_t v48;
  float32x4_t v49;
  double v50;
  double v51;
  void *v52;
  const void *v53;
  size_t v54;
  int *v55;
  char v56;
  void *v57;
  float v58;
  void *__src[2];
  void *__p[2];
  __int128 v61;
  char v62;
  __int128 v63;
  __int128 v64;

  v12 = a1[1];
  v63 = *a1;
  v64 = v12;
  if (!DWORD2(v63))
    sub_239EC18C0();
  v20 = *(unsigned __int8 *)(a5 + 48);
  if (a3 != 64 && *(_BYTE *)(a5 + 48))
    sub_239EC18F0();
  if (DWORD1(v63) > a2)
  {
    sub_239458500(MEMORY[0x24BEDB310], (uint64_t)"[Error] Number of keys is less than the number of clusters, Exit...\n", 68);
    return -1.0;
  }
  *(_OWORD *)__p = 0u;
  v61 = 0u;
  v22 = DWORD1(v63) * a3;
  *(_OWORD *)__src = 0u;
  v62 = v20;
  if (v20)
  {
    if ((_DWORD)v22)
    {
      v23 = (char *)operator new(DWORD1(v63) * a3);
      bzero(v23, v22);
      __p[1] = v23;
      *(_QWORD *)&v61 = &v23[v22];
      *((_QWORD *)&v61 + 1) = &v23[v22];
    }
  }
  else if ((_DWORD)v22)
  {
    sub_2394807B4((uint64_t)__src, DWORD1(v63) * a3);
  }
  v57 = a6;
  if (a2)
  {
    v24 = operator new(4 * a2);
    bzero(v24, 4 * a2);
    v55 = a7;
    v56 = a8;
    v25 = a9;
    v26 = a10;
    if (!(_BYTE)a10)
      goto LABEL_14;
    goto LABEL_13;
  }
  v24 = 0;
  v55 = a7;
  v56 = a8;
  v25 = a9;
  v26 = a10;
  if ((_BYTE)a10)
LABEL_13:
    *v25 = 0.0;
LABEL_14:
  v58 = 0.0;
  LODWORD(v63) = 0;
  v27.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if ((sub_2396CDC38(a2, a3, (uint64_t)a4, (uint64_t)__src, (unsigned int *)&v63, v28, v29, v30) & 1) != 0)
  {
    v31.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v26)
    {
      *(double *)&v33.__d_.__rep_ = *v25;
      *(double *)&v32.__d_.__rep_ = (double)(v31.__d_.__rep_ - v27.__d_.__rep_) / 1000000.0
                                  + *(double *)&v33.__d_.__rep_;
      *(float *)&v32.__d_.__rep_ = *(double *)&v32.__d_.__rep_;
      *v25 = *(float *)&v32.__d_.__rep_;
    }
    if (a2)
      memset(v24, 255, 4 * a2);
    v35 = sub_2396CB9F8(a2, a3, SDWORD1(v63), (uint64_t)a4, (uint64_t)__src, (uint64_t)v24, &v58, DWORD2(v63), *(double *)&v32.__d_.__rep_, *(double *)&v33.__d_.__rep_, v34);
    if ((_BYTE)a12)
      *a11 = v58;
    if (v35 != a2)
    {
      sub_239A444D4((uint64_t)"unknown file", 541, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v36 = (float)a2;
    if (*(double *)&v64 >= (float)(v36 / v36) || HIDWORD(v63) == 0)
    {
      v38 = 1;
    }
    else
    {
      v40 = 1;
      do
      {
        sub_2396CC1A8(a2, a3, DWORD1(v63), (uint64_t)a4, (int *)v24, (uint64_t)__src, DWORD2(v63));
        v44 = sub_2396CB9F8(a2, a3, SDWORD1(v63), (uint64_t)a4, (uint64_t)__src, (uint64_t)v24, &v58, DWORD2(v63), v41, v42, v43);
        v38 = v40 + 1;
      }
      while (*(double *)&v64 < (float)((float)v44 / v36) && v40++ < HIDWORD(v63));
    }
    sub_2396CC1A8(a2, a3, DWORD1(v63), (uint64_t)a4, (int *)v24, (uint64_t)__src, DWORD2(v63));
    sub_2396CB9F8(a2, a3, SDWORD1(v63), (uint64_t)a4, (uint64_t)__src, (uint64_t)v24, &v58, DWORD2(v63), v46, v47, v48);
    *(float *)&v50 = v58;
    LODWORD(v51) = 2139095039;
    if (v58 < 3.4028e38)
    {
      if (v20)
      {
        v52 = *(void **)(a5 + 24);
        v53 = __p[1];
        v54 = DWORD1(v63) * (unint64_t)a3;
      }
      else
      {
        v52 = *(void **)a5;
        v53 = __src[0];
        v54 = 4 * a3 * DWORD1(v63);
      }
      memcpy(v52, v53, v54);
      memcpy(v57, v24, 4 * a2);
    }
    if (v56)
      *v55 = v38;
    v21 = sub_2396CD18C(a2, a3, a4, a5, (int *)v57, v50, v51, v49);
    if (!v24)
      goto LABEL_30;
    goto LABEL_29;
  }
  v21 = 0.0;
  if (v24)
LABEL_29:
    operator delete(v24);
LABEL_30:
  if (__p[1])
  {
    *(void **)&v61 = __p[1];
    operator delete(__p[1]);
  }
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  return v21;
}

void sub_2396CE76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  sub_2394FCFA8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_2396CE7F0(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  double v4;
  double v5;
  float32x4_t v6;
  const void *v7;
  uint64_t v8;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  sub_2396CBFB4((unsigned int **)(a1 + 8), *(_DWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(float **)(a1 + 56), *(_DWORD **)(a1 + 64), v4, v5, v6);
  v7 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    v8 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v8, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](a1, 0x10B0C40E87B3902);
  return 0;
}

void sub_2396CE880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2396CE894((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_2396CE894(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x10B0C40E87B3902);
  }
  return a1;
}

_QWORD *sub_2396CE8FC(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v6 = operator new(24 * a2);
    v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    v8 = &v6[3 * a2];
    a1[2] = v8;
    v9 = *(const void **)a3;
    v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v10)
    {
      if (v10 < 0)
      {
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        sub_2394189F8();
      }
      v11 = 24 * a2;
      do
      {
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v12 = (char *)operator new(v10);
        *v7 = v12;
        v7[1] = v12;
        v13 = &v12[4 * (v10 >> 2)];
        v7[2] = v13;
        memcpy(v12, v9, v10);
        v7[1] = v13;
        v7 += 3;
        v11 -= 24;
      }
      while (v11);
    }
    else
    {
      bzero(v6, 24 * ((24 * a2 - 24) / 0x18) + 24);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_2396CEA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_2394F0E80(&a9);
  _Unwind_Resume(a1);
}

void sub_2396CEA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2394F0E80(&a9);
  _Unwind_Resume(a1);
}

void sub_2396CEA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_2394F0E80(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2396CEA88(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  uint64_t v23;
  int32x4_t v24;
  float v25;
  const void *v26;
  uint64_t v27;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(unsigned int **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = **(_QWORD **)(a1 + 40);
    v10 = **(_QWORD **)(a1 + 48);
    __asm { FMOV            V5.2S, #1.0 }
    do
    {
      v16 = *(int *)(v8 + 4 * v5);
      ++*(_DWORD *)(v10 + 4 * v16);
      v17 = *v6;
      if ((_DWORD)v17)
      {
        v18 = *(unsigned __int8 **)(v7 + 24 * v5);
        v19 = 8 * v16 * v17;
        do
        {
          v21 = *v18++;
          v20 = v21;
          if ((v21 & 0x80u) == 0)
            v22 = 0.0;
          else
            v22 = 1.0;
          v23 = 4 * v19;
          *(float *)(v9 + v23) = *(float *)(v9 + v23) + v22;
          v24 = vdupq_n_s32(v20);
          *(float32x4_t *)(v9 + (v23 | 4)) = vaddq_f32(*(float32x4_t *)(v9 + (v23 | 4)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vtstq_s32(v24, (int32x4_t)xmmword_239ECEF40)), (int8x8_t)0x1000100010001))));
          *(float32x2_t *)(v9 + (v23 | 0x14)) = vadd_f32(*(float32x2_t *)(v9 + (v23 | 0x14)), (float32x2_t)vbic_s8(_D5, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(*(int8x8_t *)v24.i8, (int8x8_t)0x200000004))));
          if ((v20 & 1) != 0)
            v25 = 1.0;
          else
            v25 = 0.0;
          *(float *)(v9 + (v23 | 0x1C)) = *(float *)(v9 + (v23 | 0x1C)) + v25;
          v19 += 8;
          --v17;
        }
        while (v17);
      }
      ++v5;
    }
    while (v5 != v4);
  }
  v26 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v26)
  {
    v27 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v27, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](a1, 0x1070C40DEDAB255);
  return 0;
}

void sub_2396CEC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2396CEC28((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_2396CEC28(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x1070C40DEDAB255);
  }
  return a1;
}

uint64_t sub_2396CEC90(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t *v18;
  uint64_t v19;
  unsigned int v20;
  int8x8_t v21;
  int8x8_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int8x16_t *v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  const void *v42;
  uint64_t v43;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(unsigned int **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = **(_QWORD **)(a1 + 40);
    v10 = **(_QWORD **)(a1 + 48);
    while (1)
    {
      v11 = *(int *)(v8 + 4 * v5);
      ++*(_DWORD *)(v10 + 4 * v11);
      v12 = *v6;
      if ((_DWORD)v12)
        break;
LABEL_3:
      if (++v5 == v4)
        goto LABEL_27;
    }
    v13 = v12 * v11;
    v14 = *(_QWORD *)(v7 + 24 * v5);
    if (v12 < 8
      || __CFADD__(v13, v12 - 1)
      || (v14 < v9 + 4 * (v12 + (unint64_t)v13) ? (v15 = v9 + 4 * (unint64_t)v13 >= v14 + v12) : (v15 = 1),
          !v15))
    {
      v16 = 0;
LABEL_19:
      v26 = v12 - v16;
      v27 = v13 + v16;
      v28 = (char *)(v14 + v16);
      do
      {
        v29 = *v28++;
        *(float *)(v9 + 4 * v27) = *(float *)(v9 + 4 * v27) + (float)v29;
        ++v27;
        --v26;
      }
      while (v26);
      goto LABEL_3;
    }
    if (v12 >= 0x10)
    {
      v16 = v12 & 0xFFFFFFF0;
      v30 = v13;
      v31 = v16;
      v32 = *(int8x16_t **)(v7 + 24 * v5);
      do
      {
        v33 = *v32++;
        v34 = v33;
        v35 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)v34.i8), 8uLL), 8uLL)));
        v36 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)v34.i8), 8uLL), 8uLL)));
        v34.i64[0] = vextq_s8(v34, v34, 8uLL).u64[0];
        v37 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)v34.i8), 8uLL), 8uLL)));
        v38 = (float32x4_t *)(v9 + 4 * v30);
        v39 = v38[2];
        v40 = vaddq_f32(v38[3], vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)v34.i8), 8uLL), 8uLL))));
        v41 = vaddq_f32(v38[1], v36);
        *v38 = vaddq_f32(*v38, v35);
        v38[1] = v41;
        v38[2] = vaddq_f32(v39, v37);
        v38[3] = v40;
        v30 += 16;
        v31 -= 16;
      }
      while (v31);
      if (v16 == v12)
        goto LABEL_3;
      if ((v12 & 8) == 0)
        goto LABEL_19;
    }
    else
    {
      v16 = 0;
    }
    v17 = v16;
    v16 = v12 & 0xFFFFFFF8;
    v18 = (int8x8_t *)(v14 + v17);
    v19 = v17 - v16;
    v20 = v13 + v17;
    do
    {
      v21 = *v18++;
      v22 = v21;
      v23 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v22, v22), 8uLL), 8uLL)));
      v24 = (float32x4_t *)(v9 + 4 * v20);
      v25 = vaddq_f32(v24[1], vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v22, v22), 8uLL), 8uLL))));
      *v24 = vaddq_f32(*v24, v23);
      v24[1] = v25;
      v20 += 8;
      v19 += 8;
    }
    while (v19);
    if (v16 == v12)
      goto LABEL_3;
    goto LABEL_19;
  }
LABEL_27:
  v42 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v42)
  {
    v43 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v43, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](a1, 0x1070C40DEDAB255);
  return 0;
}

void sub_2396CEEF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2396CEC28((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2396CEF04(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  double v4;
  double v5;
  float32x4_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unint64_t v9;
  float v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v8 = *(unsigned int **)(a1 + 48);
  v7 = *(unsigned int **)(a1 + 56);
  if (v8 != v7)
  {
    if (**(_QWORD **)(a1 + 8))
    {
      v9 = 1;
      do
      {
        if (v9)
        {
          v11 = 0;
          v10 = 3.4028e38;
          do
          {
            v12 = *(_QWORD **)(a1 + 24);
            if (**(_BYTE **)(a1 + 16))
              *(float *)&v4 = (float)sub_2396CD27C((_QWORD *)(v12[3] + v11 * **(unsigned int **)(a1 + 32)), *(_QWORD **)(**(_QWORD **)(a1 + 40) + 24 * *v8));
            else
              *(float *)&v4 = sub_2396F4460(*v12 + 4 * v11 * **(unsigned int **)(a1 + 32), *(_QWORD *)(**(_QWORD **)(a1 + 40) + 24 * *v8), **(unsigned int **)(a1 + 32), v4, v5, v6);
            if (*(float *)&v4 < v10)
              v10 = *(float *)&v4;
            ++v11;
            v9 = **(_QWORD **)(a1 + 8);
          }
          while (v11 < v9);
        }
        else
        {
          v10 = 3.4028e38;
        }
        *((float *)v8 + 1) = v10;
        v8 += 2;
      }
      while (v8 != v7);
    }
    else
    {
      v13 = (char *)v7 - (char *)v8 - 8;
      if (v13 < 8)
        goto LABEL_24;
      v14 = (v13 >> 3) + 1;
      v15 = v8 + 3;
      v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *(v15 - 2) = 2139095039;
        *v15 = 2139095039;
        v15 += 4;
        v16 -= 2;
      }
      while (v16);
      v8 += 2 * (v14 & 0x3FFFFFFFFFFFFFFELL);
      if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_24:
        do
        {
          v8[1] = 2139095039;
          v8 += 2;
        }
        while (v8 != v7);
      }
    }
  }
  v17 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v17)
  {
    v18 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v18, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](a1, 0xF0C40291112A8);
  return 0;
}

void sub_2396CF0C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2396CF0E8((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_2396CF0D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2396CF0E8((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_2396CF0E8(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0xF0C40291112A8);
  }
  return a1;
}

uint64_t sub_2396CF150(uint64_t a1, uint64_t *a2, char **a3, char a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char *v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char *v42;
  unint64_t v43;
  char *v44;
  int v45;
  char *v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t *v75;
  char *v76;
  void *v77;
  int64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  char v88;
  uint64_t v89;
  void **v90;
  void *v91;
  uint64_t *v92;
  uint64_t *v93;
  _QWORD *v94;
  uint64_t v100;
  double v101;
  float32x2_t v102;
  double v103;
  float32x4_t v104;
  char *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  uint64_t *j;
  uint64_t *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  void *v138;
  char *v139;
  char *v140;
  void *v141;
  void *v142;
  void *v143;
  char *v144;
  char *v145;
  void *v146;
  char *v147;
  void *v148;
  void *v149;
  unint64_t v151;
  int64x2_t v152;
  int64x2_t *v153;
  int64x2_t v154;
  int64x2_t v155;
  uint64_t v156;
  char **v157;
  char v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t *v161;
  void *__p;
  char *v163;
  char *v164;
  void *v165;
  char *v166;
  char *v167;
  float v168;
  uint64_t v169;
  char v170;
  void *v171[2];
  _BYTE v172[44];
  int v173;
  void *v174;
  void *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t *v181;
  uint64_t *v182;
  int v183;
  int v184;
  void *v185;
  char *v186;
  unint64_t v187;
  void *v188;
  char *v189;
  _QWORD v190[3];
  _QWORD *v191;
  unint64_t v192[46];

  v192[44] = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a1 + 12);
  if (v8 <= 0)
    v8 = std::thread::hardware_concurrency();
  sub_2397A2A50((uint64_t)v192, v8, 0);
  v157 = a3;
  v158 = a4;
  sub_2396D01CC(&v188, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  v10 = *a2;
  v9 = a2[1];
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v159 = (uint64_t *)(a1 + 64);
  for (i = *(_QWORD *)(a1 + 72); i != v11; i -= 80)
  {
    v13 = *(void **)(i - 40);
    if (v13)
    {
      *(_QWORD *)(i - 32) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(i - 80);
    if (v14)
    {
      *(_QWORD *)(i - 72) = v14;
      operator delete(v14);
    }
  }
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 96) = v15;
  v171[0] = (void *)-1;
  if (v9 != v10)
    sub_2396DA790(a1 + 88, 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 2), (uint64_t *)v171);
  v160 = (uint64_t *)(a1 + 88);
  v161 = a2;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v17 = (char *)*a2;
  v16 = (char *)a2[1];
  v18 = (int64_t)&v16[-*a2];
  if (v16 == (char *)*a2)
    goto LABEL_103;
  v19 = v18 >> 2;
  if ((unint64_t)(v18 >> 2) >> 62)
    sub_2394189F8();
  v20 = (char *)operator new(v18);
  v185 = v20;
  v186 = v20;
  v187 = (unint64_t)&v20[4 * v19];
  if (v16 == v17)
  {
LABEL_103:
    v76 = v16;
    v75 = v161;
    v180 = 0;
    v181 = 0;
    v182 = 0;
    goto LABEL_106;
  }
  do
  {
    v21 = (char *)v187;
    if ((unint64_t)v20 < v187)
    {
      *(_DWORD *)v20 = *(_DWORD *)v17;
      v22 = v20 + 4;
      goto LABEL_36;
    }
    v23 = (char *)v185;
    v24 = v20 - (_BYTE *)v185;
    v25 = (v20 - (_BYTE *)v185) >> 2;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 62)
      goto LABEL_217;
    v27 = v187 - (_QWORD)v185;
    if ((uint64_t)(v187 - (_QWORD)v185) >> 1 > v26)
      v26 = v27 >> 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
      v28 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 62)
        goto LABEL_218;
      v29 = operator new(4 * v28);
      v30 = &v29[4 * v25];
      *(_DWORD *)v30 = *(_DWORD *)v17;
      v22 = v30 + 4;
      if (v20 == v23)
        goto LABEL_34;
    }
    else
    {
      v29 = 0;
      v30 = (char *)(4 * v25);
      *(_DWORD *)(4 * v25) = *(_DWORD *)v17;
      v22 = (char *)(4 * v25 + 4);
      if (v20 == v23)
        goto LABEL_34;
    }
    v31 = v20 - 4 - v23;
    if (v31 < 0xBC)
    {
      v32 = v20;
      goto LABEL_33;
    }
    if (&v29[v24 - 4 - (v31 & 0xFFFFFFFFFFFFFFFCLL)] > &v29[v24 - 4])
    {
      v32 = v20;
      do
      {
LABEL_33:
        v33 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *((_DWORD *)v30 - 1) = v33;
        v30 -= 4;
      }
      while (v32 != v23);
      goto LABEL_34;
    }
    if (&v20[-(v31 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v20 - 4)
    {
      v32 = v20;
      goto LABEL_33;
    }
    if ((unint64_t)(v20 - v29 - v24) < 0x20)
    {
      v32 = v20;
      goto LABEL_33;
    }
    v57 = (v31 >> 2) + 1;
    v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
    v32 = &v20[-v58];
    v30 -= v58;
    v59 = &v29[4 * v25 - 16];
    v60 = (__int128 *)(v20 - 16);
    v61 = v57 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v62 = *v60;
      *(v59 - 1) = *(v60 - 1);
      *v59 = v62;
      v59 -= 2;
      v60 -= 2;
      v61 -= 8;
    }
    while (v61);
    if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_33;
LABEL_34:
    v21 = &v29[4 * v28];
    v185 = v30;
    v186 = v22;
    v187 = (unint64_t)v21;
    if (v23)
    {
      operator delete(v23);
      v21 = (char *)v187;
    }
LABEL_36:
    v186 = v22;
    if (v22 < v21)
    {
      *(_DWORD *)v22 = *((_DWORD *)v17 + 1);
      v34 = v22 + 4;
      goto LABEL_54;
    }
    v35 = (char *)v185;
    v36 = v22 - (_BYTE *)v185;
    v37 = (v22 - (_BYTE *)v185) >> 2;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 62)
      goto LABEL_217;
    v39 = v21 - (_BYTE *)v185;
    if (v39 >> 1 > v38)
      v38 = v39 >> 1;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
      v40 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      if (v40 >> 62)
        goto LABEL_218;
      v41 = operator new(4 * v40);
      v42 = &v41[4 * v37];
      *(_DWORD *)v42 = *((_DWORD *)v17 + 1);
      v34 = v42 + 4;
      if (v22 == v35)
        goto LABEL_52;
    }
    else
    {
      v41 = 0;
      v42 = (char *)(4 * v37);
      *(_DWORD *)(4 * v37) = *((_DWORD *)v17 + 1);
      v34 = (char *)(4 * v37 + 4);
      if (v22 == v35)
        goto LABEL_52;
    }
    v43 = v22 - 4 - v35;
    if (v43 < 0xBC)
    {
      v44 = v22;
      goto LABEL_51;
    }
    if (&v41[v36 - 4 - (v43 & 0xFFFFFFFFFFFFFFFCLL)] > &v41[v36 - 4])
    {
      v44 = v22;
      do
      {
LABEL_51:
        v45 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        *((_DWORD *)v42 - 1) = v45;
        v42 -= 4;
      }
      while (v44 != v35);
      goto LABEL_52;
    }
    if (&v22[-(v43 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v22 - 4)
    {
      v44 = v22;
      goto LABEL_51;
    }
    if ((unint64_t)(v22 - &v41[v36]) < 0x20)
    {
      v44 = v22;
      goto LABEL_51;
    }
    v63 = (v43 >> 2) + 1;
    v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
    v44 = &v22[-v64];
    v42 -= v64;
    v65 = &v41[4 * v37 - 16];
    v66 = (__int128 *)(v22 - 16);
    v67 = v63 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v68 = *v66;
      *(v65 - 1) = *(v66 - 1);
      *v65 = v68;
      v65 -= 2;
      v66 -= 2;
      v67 -= 8;
    }
    while (v67);
    if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_51;
LABEL_52:
    v21 = &v41[4 * v40];
    v185 = v42;
    v186 = v34;
    v187 = (unint64_t)v21;
    if (v35)
    {
      operator delete(v35);
      v21 = (char *)v187;
    }
LABEL_54:
    v186 = v34;
    if (v34 < v21)
    {
      *(_DWORD *)v34 = *((_DWORD *)v17 + 2);
      v20 = v34 + 4;
      goto LABEL_17;
    }
    v46 = (char *)v185;
    v47 = v34 - (_BYTE *)v185;
    v48 = (v34 - (_BYTE *)v185) >> 2;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 62)
LABEL_217:
      sub_2394189F8();
    v50 = v21 - (_BYTE *)v185;
    if (v50 >> 1 > v49)
      v49 = v50 >> 1;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
      v51 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      if (v51 >> 62)
LABEL_218:
        sub_239418A80();
      v52 = operator new(4 * v51);
      v53 = &v52[4 * v48];
      *(_DWORD *)v53 = *((_DWORD *)v17 + 2);
      v20 = v53 + 4;
      if (v34 == v46)
        goto LABEL_69;
    }
    else
    {
      v52 = 0;
      v53 = (char *)(4 * v48);
      *(_DWORD *)(4 * v48) = *((_DWORD *)v17 + 2);
      v20 = (char *)(4 * v48 + 4);
      if (v34 == v46)
        goto LABEL_69;
    }
    v54 = v34 - 4 - v46;
    if (v54 < 0xBC)
    {
      v55 = v34;
      goto LABEL_68;
    }
    if (&v52[v47 - 4 - (v54 & 0xFFFFFFFFFFFFFFFCLL)] > &v52[v47 - 4])
    {
      v55 = v34;
      do
      {
LABEL_68:
        v56 = *((_DWORD *)v55 - 1);
        v55 -= 4;
        *((_DWORD *)v53 - 1) = v56;
        v53 -= 4;
      }
      while (v55 != v46);
      goto LABEL_69;
    }
    if (&v34[-(v54 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v34 - 4)
    {
      v55 = v34;
      goto LABEL_68;
    }
    if ((unint64_t)(v34 - v52 - v47) < 0x20)
    {
      v55 = v34;
      goto LABEL_68;
    }
    v69 = (v54 >> 2) + 1;
    v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
    v55 = &v34[-v70];
    v53 -= v70;
    v71 = &v52[4 * v48 - 16];
    v72 = (__int128 *)(v34 - 16);
    v73 = v69 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v74 = *v72;
      *(v71 - 1) = *(v72 - 1);
      *v71 = v74;
      v71 -= 2;
      v72 -= 2;
      v73 -= 8;
    }
    while (v73);
    if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_68;
LABEL_69:
    v185 = v53;
    v186 = v20;
    v187 = (unint64_t)&v52[4 * v51];
    if (v46)
      operator delete(v46);
LABEL_17:
    v186 = v20;
    v17 += 12;
  }
  while (v17 != v16);
  v75 = v161;
  v16 = (char *)*v161;
  v76 = (char *)v161[1];
  v77 = v185;
  v180 = 0;
  v181 = 0;
  v182 = 0;
  v78 = v20 - (_BYTE *)v185;
  if (v78)
  {
    if (v78 < 0)
      sub_2394189F8();
    v180 = operator new(v78);
    v181 = (uint64_t *)v180;
    v79 = (char *)v180 + 4 * (v78 >> 2);
    v182 = (uint64_t *)v79;
    memcpy(v180, v77, v78);
    v181 = (uint64_t *)v79;
  }
LABEL_106:
  v183 = -1431655765 * ((unint64_t)(v76 - v16) >> 2);
  v184 = 3;
  v165 = (void *)10;
  sub_2396D0294((uint64_t)v171, 3, (uint64_t)&v180, (uint64_t *)&v165);
  sub_2396D0360((uint64_t)v171);
  v169 = 32;
  v170 = 0;
  v168 = *(float *)(a1 + 8) * *(float *)(a1 + 8);
  v81 = *v75;
  v80 = v75[1];
  v191 = 0;
  v82 = operator new(0x38uLL);
  *v82 = &off_250AE3428;
  v82[1] = v75;
  v82[2] = v171;
  v82[3] = a1;
  v82[4] = &v168;
  v82[5] = &v188;
  v82[6] = &v169;
  v191 = v82;
  sub_2397A376C(v192, 0xAAAAAAAAAAAAAAABLL * ((v80 - v81) >> 2), v190, 0);
  v83 = v191;
  if (v191 == v190)
  {
    v84 = 4;
    v83 = v190;
LABEL_110:
    (*(void (**)(void))(*v83 + 8 * v84))();
  }
  else if (v191)
  {
    v84 = 5;
    goto LABEL_110;
  }
  if (*((_BYTE *)v75 + 80))
    goto LABEL_121;
  v86 = *v75;
  v85 = v75[1];
  v166 = 0;
  v167 = 0;
  v165 = 0;
  v87 = v85 - v86;
  if (v85 == v86)
  {
    __p = 0;
    v163 = 0;
    v164 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v87 >> 2) >= 0x71C71C71C71C71DLL)
      sub_2394189F8();
    v165 = operator new(12 * (v87 >> 2));
    v166 = (char *)v165 + 12 * (v87 >> 2);
    v167 = v166;
    __p = operator new(v87);
    v163 = (char *)__p + v87;
    v164 = (char *)__p + 4 * (v87 >> 2);
  }
  v88 = sub_2396E3098(v75, (uint64_t)&v165, (uint64_t)&__p, (uint64_t)&v188, *(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 12), *(float *)(a1 + 20));
  if (__p)
  {
    v163 = (char *)__p;
    operator delete(__p);
  }
  if (v165)
  {
    v166 = (char *)v165;
    operator delete(v165);
  }
  if ((v88 & 1) != 0)
  {
LABEL_121:
    v89 = 1;
    v90 = (void **)v177;
    if (v177)
    {
      do
      {
LABEL_122:
        v91 = *v90;
        free(v90);
        v177 = v91;
        v90 = (void **)v91;
      }
      while (v91);
    }
  }
  else
  {
    v89 = 0;
    v90 = (void **)v177;
    if (v177)
      goto LABEL_122;
  }
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v171[0])
  {
    v171[1] = v171[0];
    operator delete(v171[0]);
  }
  if (v180)
  {
    v181 = (uint64_t *)v180;
    operator delete(v180);
  }
  if (v185)
  {
    v186 = (char *)v185;
    operator delete(v185);
  }
  if ((_DWORD)v89)
  {
    v180 = 0;
    v181 = 0;
    v182 = 0;
    if (v158)
    {
      if (&v180 != (void **)v157)
      {
        sub_23945D3D0(&v180, *v157, v157[1], (v157[1] - *v157) >> 3);
        v92 = (uint64_t *)v180;
        v93 = v181;
        v94 = (_QWORD *)(a1 + 88);
        goto LABEL_135;
      }
      goto LABEL_174;
    }
    v117 = *v75;
    v116 = v75[1];
    v171[1] = 0;
    *(_QWORD *)v172 = 0;
    v171[0] = 0;
    v118 = v116 - v117;
    if (v116 == v117)
    {
      v180 = 0;
      v181 = 0;
      v182 = 0;
      goto LABEL_174;
    }
    v119 = v118 / 12;
    if ((unint64_t)(v118 / 12) >> 61)
      sub_2394189F8();
    v92 = (uint64_t *)operator new(8 * v119);
    v93 = &v92[v119];
    bzero(v92, 8 * v119);
    v180 = v92;
    v181 = v93;
    v182 = v93;
    v94 = (_QWORD *)(a1 + 88);
    if ((unint64_t)(v118 + 11) >= 0x17)
    {
      v120 = (v119 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v120 < 3)
      {
        v121 = 0;
        v122 = v92;
        goto LABEL_215;
      }
      v151 = v120 + 1;
      v121 = (v120 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v122 = &v92[v121];
      v152 = (int64x2_t)xmmword_239EC6860;
      v153 = (int64x2_t *)(v92 + 2);
      v154 = vdupq_n_s64(2uLL);
      v155 = vdupq_n_s64(4uLL);
      v156 = v121;
      do
      {
        v153[-1] = v152;
        *v153 = vaddq_s64(v152, v154);
        v152 = vaddq_s64(v152, v155);
        v153 += 2;
        v156 -= 4;
      }
      while (v156);
      if (v151 != v121)
      {
        do
LABEL_215:
          *v122++ = v121++;
        while (v122 != v93);
      }
LABEL_135:
      if (v92 == v93)
        goto LABEL_174;
      __asm { FMOV            V8.2S, #-1.0 }
      while (2)
      {
        while (1)
        {
          v100 = *v92;
          if (*v92 != -1)
            break;
          if (++v92 == v93)
            goto LABEL_174;
        }
        if (*(_QWORD *)(*v94 + 8 * v100) == -1)
        {
          v171[0] = 0;
          v171[1] = 0;
          *(_QWORD *)v172 = 0;
          *(_DWORD *)&v172[8] = 1065353216;
          memset(&v172[12], 0, 32);
          v173 = 0;
          v174 = _D8;
          LODWORD(v175) = -1082130432;
          v185 = 0;
          v186 = 0;
          v187 = 0;
          sub_2396D04B0(a1, (uint64_t)v161, v100, &v188, (float32x2_t **)v171, (uint64_t)&v185, 0);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v171[1] - (char *)v171[0]) >> 2) <= *(_QWORD *)(a1 + 32))
          {
            v105 = (char *)v185;
            v110 = (uint64_t *)v186;
            if (v185 != v186)
            {
              v111 = *v160;
              v112 = (uint64_t *)v185;
              do
              {
                v113 = *v112++;
                *(_QWORD *)(v111 + 8 * v113) = -1;
              }
              while (v112 != v110);
            }
LABEL_155:
            if (!v105)
              goto LABEL_157;
          }
          else
          {
            v165 = 0;
            if ((sub_2396D1158((float *)a1, (float32x2_t *)v171, &v165, v101, v102, v103, v104) & 1) != 0)
            {
              v105 = (char *)v185;
              v106 = (uint64_t *)v186;
              if (v185 != v186)
              {
                v107 = *v160;
                v108 = (uint64_t *)v185;
                do
                {
                  v109 = *v108++;
                  *(_QWORD *)(v107 + 8 * v109) = v165;
                }
                while (v108 != v106);
              }
              goto LABEL_155;
            }
            ++*(_QWORD *)(a1 + 48);
            v114 = *(_QWORD *)(a1 + 72);
            if (v114 >= *(_QWORD *)(a1 + 80))
            {
              v115 = sub_2396D93E4(v159, (uint64_t)v171);
            }
            else
            {
              sub_2396D61AC(*(_QWORD *)(a1 + 72), (uint64_t)v171);
              v115 = v114 + 80;
              *(_QWORD *)(a1 + 72) = v114 + 80;
            }
            *(_QWORD *)(a1 + 72) = v115;
            v105 = (char *)v185;
            *(_QWORD *)(a1 + 56) += (v186 - (_BYTE *)v185) >> 3;
            if (!v105)
            {
LABEL_157:
              if (*(_QWORD *)&v172[24])
              {
                *(_QWORD *)&v172[32] = *(_QWORD *)&v172[24];
                operator delete(*(void **)&v172[24]);
              }
              if (v171[0])
              {
                v171[1] = v171[0];
                operator delete(v171[0]);
              }
              v94 = (_QWORD *)(a1 + 88);
              goto LABEL_138;
            }
          }
          v186 = v105;
          operator delete(v105);
          goto LABEL_157;
        }
LABEL_138:
        ++v92;
        if (0xAAAAAAAAAAAAAAABLL * ((v161[1] - *v161) >> 2) - *(_QWORD *)(a1 + 56) < *(_QWORD *)(a1 + 32) || v92 == v93)
          break;
        continue;
      }
    }
LABEL_174:
    v185 = 0;
    v186 = 0;
    v187 = 0;
    *(_OWORD *)v171 = 0u;
    *(_OWORD *)v172 = 0u;
    *(_DWORD *)&v172[16] = 1065353216;
    *(_QWORD *)(a1 + 56) = 0;
    v165 = 0;
    __p = (void *)-1;
    v169 = -1;
    sub_2396D9650((uint64_t)v171, (unint64_t *)&__p, &__p, &v169);
    v128 = *(uint64_t **)(a1 + 64);
    for (j = *(uint64_t **)(a1 + 72); v128 != j; v165 = (char *)v165 + 1)
    {
      while (1)
      {
        v123.i32[0] = *(_DWORD *)(a1 + 40);
        if (sub_2396D0D90((uint64_t)v128, *(_QWORD *)(a1 + 32), v123, *(float *)(a1 + 44), v124, v125, v126))
          break;
        __p = (void *)-1;
        sub_2396D996C((uint64_t)v171, (unint64_t *)&v165, &v165, (uint64_t *)&__p);
        v165 = (char *)v165 + 1;
        v128 += 10;
        if (v128 == j)
          goto LABEL_182;
      }
      __p = (void *)(0xCCCCCCCCCCCCCCCDLL * ((v186 - (_BYTE *)v185) >> 4));
      sub_2396D996C((uint64_t)v171, (unint64_t *)&v165, &v165, (uint64_t *)&__p);
      v129 = v186;
      if ((unint64_t)v186 >= v187)
      {
        v130 = (char *)sub_2396D9C88((uint64_t *)&v185, (uint64_t)v128);
      }
      else
      {
        sub_2396D61AC((uint64_t)v186, (uint64_t)v128);
        v130 = v129 + 80;
      }
      v186 = v130;
      v132 = *v128;
      v131 = v128[1];
      v128 += 10;
      *(_QWORD *)(a1 + 56) -= 0x5555555555555555 * ((v131 - v132) >> 2);
    }
LABEL_182:
    if (v159 != (uint64_t *)&v185)
      sub_2396D9E80((void **)v159, (uint64_t)v185, (uint64_t)v186, 0xCCCCCCCCCCCCCCCDLL * ((v186 - (_BYTE *)v185) >> 4));
    *(_QWORD *)(a1 + 48) = 0xCCCCCCCCCCCCCCCDLL * ((v186 - (_BYTE *)v185) >> 4);
    v133 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) != v133)
    {
      v134 = 0;
      do
      {
        v165 = (void *)(v133 + 8 * v134);
        v135 = sub_2395193BC((uint64_t)v171, (unint64_t *)v165, (uint64_t)&unk_239EC6E98, (_QWORD **)&v165);
        v133 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(v133 + 8 * v134++) = v135[3];
      }
      while (v134 < (*(_QWORD *)(a1 + 96) - v133) >> 3);
    }
    v136 = *(_QWORD **)v172;
    if (*(_QWORD *)v172)
    {
      do
      {
        v137 = (_QWORD *)*v136;
        operator delete(v136);
        v136 = v137;
      }
      while (v137);
    }
    v138 = v171[0];
    v171[0] = 0;
    if (v138)
      operator delete(v138);
    v139 = (char *)v185;
    if (v185)
    {
      v140 = v186;
      v141 = v185;
      if (v186 != v185)
      {
        do
        {
          v142 = (void *)*((_QWORD *)v140 - 5);
          if (v142)
          {
            *((_QWORD *)v140 - 4) = v142;
            operator delete(v142);
          }
          v143 = (void *)*((_QWORD *)v140 - 10);
          if (v143)
          {
            *((_QWORD *)v140 - 9) = v143;
            operator delete(v143);
          }
          v140 -= 80;
        }
        while (v140 != v139);
        v141 = v185;
      }
      v186 = v139;
      operator delete(v141);
    }
    if (v180)
    {
      v181 = (uint64_t *)v180;
      operator delete(v180);
    }
  }
  v144 = (char *)v188;
  if (v188)
  {
    v145 = v189;
    v146 = v188;
    if (v189 != v188)
    {
      v147 = v189;
      do
      {
        v149 = (void *)*((_QWORD *)v147 - 3);
        v147 -= 24;
        v148 = v149;
        if (v149)
        {
          *((_QWORD *)v145 - 2) = v148;
          operator delete(v148);
        }
        v145 = v147;
      }
      while (v147 != v144);
      v146 = v188;
    }
    v189 = v144;
    operator delete(v146);
  }
  sub_2397A2E14(v192);
  return v89;
}

void sub_2396D0020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;
  uint64_t v58;

  *(_QWORD *)(v57 + 72) = v58;
  if (__p)
  {
    a48 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2396D1E6C((uint64_t)&a23);
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
    sub_23942A16C(&a50);
    sub_2397A2E14(&a57);
    _Unwind_Resume(a1);
  }
  sub_23942A16C(&a50);
  sub_2397A2E14(&a57);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396D01CC(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2396D0274(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    sub_239EC1920();
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396D0294(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  v6 = *a4;
  *(_QWORD *)(a1 + 128) = a3;
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = a3;
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 32) = *a4;
  *(_QWORD *)(a1 + 40) = v7;
  if ((_DWORD)v7)
  {
    sub_23946DAD4(a1, v7);
    if (*(_QWORD *)(a1 + 40))
    {
      v8 = 0;
      v9 = *(_QWORD *)a1;
      do
      {
        *(_QWORD *)(v9 + 8 * v8) = v8;
        ++v8;
      }
      while (v8 < *(_QWORD *)(a1 + 40));
    }
  }
  return a1;
}

void sub_2396D0324(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)(v1 + 96);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      free(v3);
      *(_QWORD *)(v1 + 96) = v4;
      v3 = v4;
    }
    while (v4);
  }
  sub_239EC1980((_QWORD *)(v1 + 88), (_QWORD *)(v1 + 112), (void **)(v1 + 64), v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396D0360(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;

  v2 = *(int *)(*(_QWORD *)(a1 + 128) + 24);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 48) = v2;
  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (v2 != v3)
  {
    if (v2 <= v3)
    {
      if (v2 < v3)
        *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * v2;
    }
    else
    {
      sub_23946DAD4(a1, v2 - v3);
      v2 = *(_QWORD *)(a1 + 40);
    }
  }
  if (v2)
  {
    v4 = 0;
    v5 = *(_QWORD *)a1;
    do
    {
      *(_QWORD *)(v5 + 8 * v4) = v4;
      ++v4;
      v2 = *(_QWORD *)(a1 + 40);
    }
    while (v4 < v2);
  }
  result = *(_QWORD **)(a1 + 96);
  if (result)
  {
    do
    {
      v7 = (_QWORD *)*result;
      free(result);
      *(_QWORD *)(a1 + 96) = v7;
      result = v7;
    }
    while (v7);
    v2 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = v2;
  if (v2)
  {
    sub_2396D6478(a1, (void **)(a1 + 64));
    result = sub_2396D6640(a1, a1, 0, *(_QWORD *)(a1 + 40), (uint64_t *)(a1 + 64));
    *(_QWORD *)(a1 + 24) = result;
  }
  return result;
}

uint64_t sub_2396D0440(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;

  v2 = (_QWORD *)(a1 + 88);
  v3 = *(_QWORD **)(a1 + 96);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      free(v3);
      *(_QWORD *)(a1 + 96) = v4;
      v3 = v4;
    }
    while (v4);
  }
  *v2 = 0;
  v2[1] = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_2396D04B0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, float32x2_t **a5, uint64_t a6, float32x2_t a7)
{
  float32x2_t *v7;
  float32x2_t **v8;
  float32x2_t *v11;
  uint64_t v12;
  unint64_t v13;
  float32x2_t v14;
  float32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float32x2_t *v20;
  __int32 v21;
  int32x2_t *v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _QWORD *v40;
  char *v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  float32x4_t *v47;
  float32x4_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x2_t *v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  float32x2_t v62;
  float32x2_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float v69;
  float32x2_t *v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  float32x4_t *v93;
  float32x4_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  float32x2_t *v98;
  float32x2_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  float32x2_t v105;
  char *v106;
  float32x2_t *v107;
  float32x2_t v108;
  __int32 v109;
  int v110;
  _QWORD *v111;
  float32x2_t *v113;
  float32x2_t **v115;
  _OWORD *v116;
  _BYTE v118[16];
  float32x4_t v119;
  _OWORD v120[2];
  __int128 v121;
  _OWORD v122[3];
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v7 = *a5;
  a5[1] = *a5;
  if (!*(_BYTE *)(a2 + 80))
    sub_2394875CC();
  v8 = a5;
  v11 = (float32x2_t *)(*(_QWORD *)a2 + 12 * a3);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = (unint64_t)a5[2];
  if ((unint64_t)v7 >= v13)
  {
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v7) >> 2);
    v17 = 2 * v16;
    if (2 * v16 <= 1)
      v17 = 1;
    if (v16 >= 0xAAAAAAAAAAAAAAALL)
      v18 = 0x1555555555555555;
    else
      v18 = v17;
    if (v18 > 0x1555555555555555)
      sub_239418A80();
    v19 = 12 * v18;
    v20 = (float32x2_t *)operator new(12 * v18);
    v21 = v11[1].i32[0];
    *v20 = *v11;
    v20[1].i32[0] = v21;
    v15 = (float32x2_t *)((char *)v20 + 12);
    *v8 = v20;
    v8[1] = (float32x2_t *)((char *)v20 + 12);
    v8[2] = (float32x2_t *)((char *)v20 + v19);
    if (v7)
      operator delete(v7);
  }
  else
  {
    v14 = *v11;
    v7[1].i32[0] = v11[1].i32[0];
    *v7 = v14;
    v15 = (float32x2_t *)((char *)v7 + 12);
  }
  v22 = (int32x2_t *)(v12 + 12 * a3);
  v8[1] = v15;
  a7.i32[0] = v22[1].i32[0];
  v23 = (float32x2_t)*v22;
  v24 = (float32x2_t)vdup_lane_s32(*v22, 1);
  v25.i32[1] = 872415232;
  if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(v23, v23), v24, (float32x2_t)*v22, 1), a7, a7).f32[0]) < 0.00000011921)
    return;
  v25.i32[0] = v11[1].i32[0];
  v26 = vmla_f32(vmla_lane_f32(vmul_f32(v23, *v11), v24, *v11, 1), v25, a7).f32[0];
  v8[3] = (float32x2_t *)v23;
  *((_DWORD *)v8 + 8) = a7.i32[0];
  *((float *)v8 + 9) = -v26;
  v113 = (float32x2_t *)(v8 + 3);
  v121 = 0u;
  memset(v122, 0, sizeof(v122));
  memset(v120, 0, sizeof(v120));
  *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * a3) = *(_QWORD *)(a1 + 48);
  sub_2396DA1D4((uint64_t)v120);
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v120[0] + 1)
                        + (((*((_QWORD *)&v121 + 1) + (_QWORD)v121) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)&v121 + 1) + v121) & 0x1FF)) = a3;
  ++*((_QWORD *)&v121 + 1);
  v29 = a6;
  v31 = *(char **)(a6 + 8);
  v30 = *(_QWORD *)(a6 + 16);
  if ((unint64_t)v31 < v30)
  {
    *(_QWORD *)v31 = a3;
    v32 = (uint64_t)(v31 + 8);
    goto LABEL_34;
  }
  v33 = *(char **)a6;
  v34 = (uint64_t)&v31[-*(_QWORD *)a6];
  v35 = v34 >> 3;
  v36 = (v34 >> 3) + 1;
  if (v36 >> 61)
    sub_2394189F8();
  v37 = v30 - (_QWORD)v33;
  if (v37 >> 2 > v36)
    v36 = v37 >> 2;
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
    v38 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v38 = v36;
  if (v38)
  {
    if (v38 >> 61)
      sub_239418A80();
    v39 = operator new(8 * v38);
    v40 = &v39[8 * v35];
    v41 = &v39[8 * v38];
    *v40 = a3;
    v32 = (uint64_t)(v40 + 1);
    v42 = v31 - v33;
    if (v31 != v33)
    {
LABEL_26:
      v43 = v42 - 8;
      v29 = a6;
      if (v43 < 0x58)
        goto LABEL_112;
      if ((unint64_t)(v31 - v39 - v34) < 0x20)
        goto LABEL_112;
      v44 = (v43 >> 3) + 1;
      v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
      v46 = &v31[-v45];
      v40 = (_QWORD *)((char *)v40 - v45);
      v47 = (float32x4_t *)&v39[8 * v35 - 16];
      v48 = (float32x4_t *)(v31 - 16);
      v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = v48[-1];
        v27 = *v48;
        v47[-1] = v28;
        *v47 = v27;
        v47 -= 2;
        v48 -= 2;
        v49 -= 4;
      }
      while (v49);
      v31 = v46;
      if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_112:
        do
        {
          v50 = *((_QWORD *)v31 - 1);
          v31 -= 8;
          *--v40 = v50;
        }
        while (v31 != v33);
      }
      *(_QWORD *)a6 = v40;
      *(_QWORD *)(a6 + 8) = v32;
      *(_QWORD *)(a6 + 16) = v41;
      if (v33)
        goto LABEL_33;
      goto LABEL_34;
    }
  }
  else
  {
    v39 = 0;
    v40 = (_QWORD *)(8 * v35);
    v41 = 0;
    *(_QWORD *)(8 * v35) = a3;
    v32 = 8 * v35 + 8;
    v42 = v31 - v33;
    if (v31 != v33)
      goto LABEL_26;
  }
  v29 = a6;
  *(_QWORD *)a6 = v40;
  *(_QWORD *)(a6 + 8) = v32;
  *(_QWORD *)(a6 + 16) = v41;
  if (v33)
LABEL_33:
    operator delete(v33);
LABEL_34:
  v52 = (float32x2_t *)(v8 + 3);
  v51 = a2;
  v53 = 0;
  *(_QWORD *)(v29 + 8) = v32;
  v115 = v8;
LABEL_36:
  v54 = &v120[3 * (v53 & 1)];
  v116 = &v120[3 * ((v53 & 1) == 0)];
  v110 = v53;
  v111 = v54;
LABEL_38:
  v55 = v54[5];
  if (v55 || *((_QWORD *)v116 + 5))
  {
    v56 = (void **)v54[1];
    v57 = (*(_QWORD **)((char *)v56 + ((v54[4] >> 6) & 0x3FFFFFFFFFFFFF8)))[v54[4] & 0x1FFLL];
    v58 = v54[4] + 1;
    v54[4] = v58;
    v54[5] = v55 - 1;
    if (v58 >= 0x400)
    {
      operator delete(*v56);
      v54[1] += 8;
      v54[4] -= 512;
    }
    v59 = *a4 + 24 * v57;
    v60 = *(uint64_t **)v59;
    v61 = *(uint64_t **)(v59 + 8);
    while (1)
    {
      if (v60 == v61)
      {
        v54 = v111;
        if (v111[5])
          goto LABEL_38;
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v8[1] - (char *)*v8) >> 2) >= 3)
        {
          v118[0] = 0;
          v118[8] = 0;
          sub_2396D2B34(v8, (uint64_t)v118, (uint64_t)&v119, v27, *(double *)v28.i64);
          v27 = v119;
          *(float32x4_t *)v52->f32 = v119;
        }
        v53 = v110 ^ 1;
        goto LABEL_36;
      }
      v64 = *v60;
      if (*v60 != -1)
      {
        v65 = *(_QWORD *)(a1 + 88);
        if (*(_QWORD *)(v65 + 8 * v64) == -1)
        {
          if (!*(_BYTE *)(v51 + 80))
            sub_2394875CC();
          v66 = *(_QWORD *)v51 + 12 * v64;
          v27.i32[0] = *(_DWORD *)(a1 + 24);
          v67 = *(float32x2_t *)(v66 + 4);
          v68 = vmul_f32(*(float32x2_t *)((char *)v8 + 28), v67);
          v28.f32[0] = fabsf(*((float *)v8 + 9)+ (float)((float)((float)(*((float *)v8 + 6) * *(float *)v66) + v68.f32[0]) + v68.f32[1]));
          if (v28.f32[0] <= v27.f32[0])
          {
            v69 = *(float *)(a1 + 28);
            v70 = (float32x2_t *)(*(_QWORD *)(v51 + 56) + 12 * v64);
            v28.i32[0] = v52[1].i32[0];
            v67.i32[0] = v70[1].i32[0];
            v27.f32[0] = acosf(fminf(fmaxf(fabsf(vmla_f32(vmla_lane_f32(vmul_f32(*v70, *v52), (float32x2_t)vdup_lane_s32((int32x2_t)*v52, 1), *v70, 1), *(float32x2_t *)v28.f32, v67).f32[0]), -1.0), 1.0));
            v28.i64[0] = 0x4066800000000000;
            *(double *)v27.i64 = v27.f32[0] * 180.0 / 3.14159265;
            v27.f32[0] = *(double *)v27.i64;
            if (v69 >= v27.f32[0])
              break;
          }
        }
      }
LABEL_45:
      ++v60;
    }
    v71 = v116;
    v27 = *(float32x4_t *)((char *)v116 + 8);
    v72 = *((_QWORD *)v116 + 2);
    v73 = *((_QWORD *)v116 + 1);
    v74 = ((v72 - v73) << 6) - 1;
    *(_QWORD *)(v65 + 8 * v64) = *(_QWORD *)(a1 + 48);
    if (v72 == v73)
      v74 = 0;
    v75 = *((_QWORD *)v116 + 5) + *((_QWORD *)v116 + 4);
    if (v74 == v75)
    {
      sub_2396DA1D4((uint64_t)v116);
      v71 = v116;
      v29 = a6;
      v73 = *((_QWORD *)v116 + 1);
      v75 = *((_QWORD *)v116 + 5) + *((_QWORD *)v116 + 4);
    }
    *(_QWORD *)(*(_QWORD *)(v73 + ((v75 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v75 & 0x1FF)) = v64;
    ++*((_QWORD *)v71 + 5);
    v77 = *(char **)(v29 + 8);
    v76 = *(_QWORD *)(v29 + 16);
    if ((unint64_t)v77 < v76)
    {
      *(_QWORD *)v77 = v64;
      v78 = (uint64_t)(v77 + 8);
      goto LABEL_78;
    }
    v79 = *(char **)v29;
    v80 = (uint64_t)&v77[-*(_QWORD *)v29];
    v81 = v80 >> 3;
    v82 = (v80 >> 3) + 1;
    if (v82 >> 61)
      sub_2394189F8();
    v83 = v76 - (_QWORD)v79;
    if (v83 >> 2 > v82)
      v82 = v83 >> 2;
    if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
      v84 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v84 = v82;
    if (v84)
    {
      if (v84 >> 61)
        goto LABEL_103;
      v85 = v84;
      v86 = operator new(8 * v84);
      v84 = v85;
      v87 = &v86[8 * v81];
      *v87 = v64;
      v78 = (uint64_t)(v87 + 1);
      if (v77 != v79)
      {
LABEL_67:
        v88 = v77 - 8 - v79;
        if (v88 >= 0x58)
        {
          v89 = v77 - &v86[v80];
          v29 = a6;
          if (v89 >= 0x20)
          {
            v90 = (v88 >> 3) + 1;
            v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
            v92 = &v77[-v91];
            v87 = (_QWORD *)((char *)v87 - v91);
            v93 = (float32x4_t *)&v86[8 * v81 - 16];
            v94 = (float32x4_t *)(v77 - 16);
            v95 = v90 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v28 = v94[-1];
              v27 = *v94;
              v93[-1] = v28;
              *v93 = v27;
              v93 -= 2;
              v94 -= 2;
              v95 -= 4;
            }
            while (v95);
            v77 = v92;
            if (v90 == (v90 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_76:
              *(_QWORD *)v29 = v87;
              *(_QWORD *)(v29 + 8) = v78;
              *(_QWORD *)(v29 + 16) = &v86[8 * v84];
              if (v79)
                operator delete(v79);
LABEL_78:
              v8 = v115;
              *(_QWORD *)(v29 + 8) = v78;
              v98 = v115[1];
              v97 = (unint64_t)v115[2];
              if ((unint64_t)v98 < v97)
              {
                v62 = *(float32x2_t *)v66;
                v98[1].i32[0] = *(_DWORD *)(v66 + 8);
                *v98 = v62;
                v63 = (float32x2_t *)((char *)v98 + 12);
              }
              else
              {
                v99 = *v115;
                v100 = 0xAAAAAAAAAAAAAAABLL * (((char *)v98 - (char *)*v115) >> 2);
                v101 = v100 + 1;
                if (v100 + 1 > 0x1555555555555555)
                  sub_2394189F8();
                v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (_QWORD)v99) >> 2);
                if (2 * v102 > v101)
                  v101 = 2 * v102;
                if (v102 >= 0xAAAAAAAAAAAAAAALL)
                  v103 = 0x1555555555555555;
                else
                  v103 = v101;
                if (v103)
                {
                  if (v103 > 0x1555555555555555)
LABEL_103:
                    sub_239418A80();
                  v104 = (char *)operator new(12 * v103);
                  v8 = v115;
                }
                else
                {
                  v104 = 0;
                }
                v105 = *(float32x2_t *)v66;
                v106 = &v104[12 * v100];
                *((_DWORD *)v106 + 2) = *(_DWORD *)(v66 + 8);
                *(float32x2_t *)v106 = v105;
                v107 = (float32x2_t *)v106;
                if (v98 != v99)
                {
                  v29 = a6;
                  do
                  {
                    v108 = *(float32x2_t *)((char *)v98 - 12);
                    v98 = (float32x2_t *)((char *)v98 - 12);
                    v109 = v98[1].i32[0];
                    *(float32x2_t *)((char *)v107 - 12) = v108;
                    v107 = (float32x2_t *)((char *)v107 - 12);
                    v107[1].i32[0] = v109;
                  }
                  while (v98 != v99);
                  v98 = *v8;
                  v63 = (float32x2_t *)(v106 + 12);
                  *v8 = v107;
                  v8[1] = (float32x2_t *)(v106 + 12);
                  v8[2] = (float32x2_t *)&v104[12 * v103];
                  if (!v98)
                    goto LABEL_44;
                  goto LABEL_95;
                }
                v29 = a6;
                v63 = (float32x2_t *)(v106 + 12);
                *v8 = (float32x2_t *)v106;
                v8[1] = (float32x2_t *)(v106 + 12);
                v8[2] = (float32x2_t *)&v104[12 * v103];
                if (v98)
LABEL_95:
                  operator delete(v98);
              }
LABEL_44:
              v52 = v113;
              v51 = a2;
              v8[1] = v63;
              goto LABEL_45;
            }
          }
        }
        else
        {
          v29 = a6;
        }
        do
        {
          v96 = *((_QWORD *)v77 - 1);
          v77 -= 8;
          *--v87 = v96;
        }
        while (v77 != v79);
        goto LABEL_76;
      }
    }
    else
    {
      v86 = 0;
      v87 = (_QWORD *)(8 * v81);
      *(_QWORD *)(8 * v81) = v64;
      v78 = 8 * v81 + 8;
      if (v77 != v79)
        goto LABEL_67;
    }
    v29 = a6;
    goto LABEL_76;
  }
  sub_2394D0C00((uint64_t)v122);
  sub_2394D0C00((uint64_t)v120);
}

void sub_2396D0D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_2394D0C00((uint64_t)&a29);
  sub_2394D0C00((uint64_t)&a23);
  _Unwind_Resume(a1);
}

BOOL sub_2396D0D90(uint64_t a1, unint64_t a2, float32x4_t a3, float a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  uint64_t v42;
  void *v43;
  float v44;
  float *v45;
  unint64_t v46;
  unint64_t v47;
  float32x4_t *v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float v52;
  float v53;
  void *v55;
  unsigned int v56;

  if (a3.f32[0] <= 0.0)
    goto LABEL_16;
  v10 = a3.f32[0];
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  if (v11 == v12)
  {
    v26 = sub_2396D2358(a1);
    v18 = -1.0;
    if (!v26)
      goto LABEL_15;
    v11 = *(_QWORD *)(a1 + 40);
    v27 = *(_QWORD *)(a1 + 48);
    a3.i64[0] = *(_QWORD *)v11;
    a3.i32[2] = *(_DWORD *)(v11 + 8);
    *(_DWORD *)(a1 + 64) = 0;
    v13 = v27 - v11;
    if (v13)
      goto LABEL_4;
LABEL_14:
    v18 = 0.0;
    goto LABEL_15;
  }
  a3.i64[0] = *(_QWORD *)v11;
  a3.i32[2] = *(_DWORD *)(v11 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  v13 = v12 - v11;
  if (!v13)
    goto LABEL_14;
LABEL_4:
  v14 = 0;
  v15 = v13 / 12;
  v16 = v13 / 12 != 0;
  v17 = v13 / 12 - 1;
  if (v17 == 0 || !v16)
    v15 = 1;
  v18 = 0.0;
  v19 = v11;
  do
  {
    if (v17 == v14)
      v20 = 0;
    else
      v20 = v14 + 1;
    v21 = v11 + 12 * v20;
    a6.i64[0] = *(_QWORD *)v19;
    a6.i32[2] = *(_DWORD *)(v19 + 8);
    v22 = (int32x4_t)vsubq_f32(a6, a3);
    a7.i64[0] = *(_QWORD *)v21;
    a7.i32[2] = *(_DWORD *)(v21 + 8);
    v23 = (int32x4_t)vsubq_f32(a7, a3);
    v24 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v22, (int8x16_t)v22, 0xCuLL), (int8x16_t)v22, 8uLL);
    a6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v22, v22), (int8x16_t)v22, 0xCuLL);
    v25 = (int8x16_t)vmlsq_f32(vmulq_f32(v24, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL)), a6, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v23, (int8x16_t)v23, 0xCuLL), (int8x16_t)v23, 8uLL));
    a7 = (float32x4_t)vextq_s8(v25, v25, 8uLL);
    v18 = v18
        + (float)(sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1), *(float32x2_t *)v25.i8, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0])* 0.5);
    *(float *)(a1 + 64) = v18;
    v19 += 12;
    ++v14;
  }
  while (v15 != v14);
LABEL_15:
  if (v18 < v10)
    return 0;
LABEL_16:
  if (a4 <= 0.0)
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2) > a2;
  v28 = *(_QWORD *)(a1 + 40);
  v29 = *(_QWORD *)(a1 + 48);
  if (v28 == v29)
  {
    v34 = -1.0;
    if (!sub_2396D2358(a1))
      goto LABEL_30;
    v28 = *(_QWORD *)(a1 + 40);
    v42 = *(_QWORD *)(a1 + 48);
    a3.i64[0] = *(_QWORD *)v28;
    a3.i32[2] = *(_DWORD *)(v28 + 8);
    *(_DWORD *)(a1 + 64) = 0;
    v30 = v42 - v28;
    if (v30)
      goto LABEL_19;
LABEL_29:
    v34 = 0.0;
    goto LABEL_30;
  }
  a3.i64[0] = *(_QWORD *)v28;
  a3.i32[2] = *(_DWORD *)(v28 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  v30 = v29 - v28;
  if (!v30)
    goto LABEL_29;
LABEL_19:
  v31 = 0;
  v32 = v30 / 12;
  v16 = v30 / 12 != 0;
  v33 = v30 / 12 - 1;
  if (v33 == 0 || !v16)
    v32 = 1;
  v34 = 0.0;
  v35 = v28;
  do
  {
    if (v33 == v31)
      v36 = 0;
    else
      v36 = v31 + 1;
    v37 = v28 + 12 * v36;
    a5.i64[0] = *(_QWORD *)v35;
    a5.i32[2] = *(_DWORD *)(v35 + 8);
    v38 = (int32x4_t)vsubq_f32(a5, a3);
    a6.i64[0] = *(_QWORD *)v37;
    a6.i32[2] = *(_DWORD *)(v37 + 8);
    v39 = (int32x4_t)vsubq_f32(a6, a3);
    v40 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v38, (int8x16_t)v38, 0xCuLL), (int8x16_t)v38, 8uLL);
    a5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL);
    v41 = (int8x16_t)vmlsq_f32(vmulq_f32(v40, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v39, v39), (int8x16_t)v39, 0xCuLL)), a5, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v39, (int8x16_t)v39, 0xCuLL), (int8x16_t)v39, 8uLL));
    a6 = (float32x4_t)vextq_s8(v41, v41, 8uLL);
    v34 = v34
        + (float)(sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1), *(float32x2_t *)v41.i8, 1), *(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32).f32[0])* 0.5);
    *(float *)(a1 + 64) = v34;
    v35 += 12;
    ++v31;
  }
  while (v32 != v31);
LABEL_30:
  sub_2396D2D84((const float **)a1, a1 + 24, (uint64_t)&v55);
  v43 = v55;
  if (v56)
  {
    v44 = *(float *)v55 * *(float *)v55;
    if (v56 != 1)
    {
      v45 = (float *)((char *)v55 + 4);
      v46 = (v56 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
      if (v46 < 7)
        goto LABEL_44;
      v47 = v46 + 1;
      v45 += v47 & 0x7FFFFFFFFFFFFFF8;
      v48 = (float32x4_t *)((char *)v55 + 20);
      v49 = v47 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v50 = vmulq_f32(v48[-1], v48[-1]);
        v51 = vmulq_f32(*v48, *v48);
        v44 = (float)((float)((float)((float)((float)((float)((float)(v44 + v50.f32[0]) + v50.f32[1]) + v50.f32[2])
                                            + v50.f32[3])
                                    + v51.f32[0])
                            + v51.f32[1])
                    + v51.f32[2])
            + v51.f32[3];
        v48 += 2;
        v49 -= 8;
      }
      while (v49);
      if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_44:
        do
        {
          v52 = *v45++;
          v44 = v44 + (float)(v52 * v52);
        }
        while (v45 != (float *)((char *)v55 + 4 * v56));
      }
    }
  }
  else
  {
    v44 = 0.0;
  }
  v53 = sqrtf(v44 / (float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2)));
  *(float *)(a1 + 68) = v53;
  free(v43);
  if ((float)(v53 / sqrtf(v34)) > a4)
    return 0;
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2) > a2;
}

uint64_t sub_2396D1158(float *a1, float32x2_t *a2, _QWORD *a3, double a4, float32x2_t a5, double a6, float32x4_t a7)
{
  _QWORD *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t *v11;
  _OWORD *v12;
  float v13;
  float v14;
  float32x2_t v15;
  const void *v16;
  int64_t v17;
  size_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x4_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float v33;
  float32x4_t v34;
  int8x16_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float v40;
  float32x2_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  uint64_t v50;
  const void *v51;
  int64_t v52;
  char *v53;
  size_t v54;
  char *v55;
  void **v56;
  void **v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  float32x2_t *v63;
  float32x2_t v64;
  int v65;
  float32x2_t *v66;
  float32x2_t v67;
  const void *v68;
  int64_t v69;
  char *v70;
  size_t v71;
  char *v72;
  void **v73;
  void *v74;
  void **v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  float32x2_t *v81;
  float32x2_t v82;
  int v83;
  float32x2_t *v84;
  float32x2_t *v85;
  char *v86;
  size_t v87;
  float32x4_t v88;
  float32x2_t *v89;
  float32x4_t v90;
  __int32 v91;
  float v92;
  float v93;
  float32x4_t v94;
  __int32 v95;
  __int32 v96;
  __int32 v97;
  float v98;
  float32x2_t v99;
  uint64_t v100;
  float32x4_t v101;
  int32x4_t v102;
  int32x4_t v108;
  float32x4_t v109;
  int8x16_t v110;
  int8x16_t v111;
  float32x2_t v112;
  float32x2_t v113;
  int32x2_t v114;
  int8x16_t v115;
  float32x2_t v116;
  uint64_t v118;
  uint64_t v121;
  char *__p;
  int32x2_t __pa;
  float32x4_t v125;
  char *v126;
  char *v127;
  float32x4_t v128;
  float32x4_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  __int32 v134;
  uint64_t v135;
  __int32 v136;
  uint64_t **v137;
  float v138;
  void *v139;
  int8x16_t v140;
  uint64_t v141;
  __int32 v142;
  float32x2_t *v143;
  float32x2_t *v144;
  void **v145;
  _BYTE v146[36];
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a1 + 6))
    return 0;
  v7 = a3;
  v8 = a1;
  *a3 = -1;
  v9 = *((_QWORD *)a1 + 8);
  v10 = *((_QWORD *)a1 + 9);
  if (v9 == v10)
    return 0;
  v11 = a2;
  v121 = *((_QWORD *)a1 + 9);
  while (2)
  {
    ++*v7;
    v12 = (_OWORD *)(v9 + 24);
    a5.i32[0] = *(_DWORD *)(v9 + 32);
    a7.i32[0] = v11[4].i32[0];
    v13 = acosf(fminf(fmaxf(fabsf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v9 + 24), v11[3]), (float32x2_t)vdup_lane_s32((int32x2_t)v11[3], 1), *(float32x2_t *)(v9 + 24), 1), *(float32x2_t *)a7.f32, a5).f32[0]), -1.0), 1.0));
    a5.i32[1] = 1080459264;
    v14 = v13 * 180.0 / 3.14159265;
    if (v8[7] < v14)
      goto LABEL_6;
    v129 = 0uLL;
    v130 = 0;
    v16 = (const void *)*v11;
    v15 = v11[1];
    v17 = *(_QWORD *)&v15 - *(_QWORD *)v11;
    if (*(_QWORD *)&v15 == *v11)
    {
LABEL_5:
      v10 = v121;
      goto LABEL_6;
    }
    if (0xAAAAAAAAAAAAAAABLL * (v17 >> 2) > 0x1555555555555555)
      sub_2394189F8();
    v129.i64[0] = (uint64_t)operator new(v17);
    v18 = 12 * ((v17 - 12) / 0xCuLL) + 12;
    __p = (char *)v129.i64[0];
    memcpy((void *)v129.i64[0], v16, v18);
    if (!v18)
    {
LABEL_4:
      operator delete(__p);
      v7 = a3;
      v11 = a2;
      goto LABEL_5;
    }
    v23 = __p;
    v24 = &__p[v18];
    while (1)
    {
      if (*(_QWORD *)(v9 + 48) == *(_QWORD *)(v9 + 40) && !sub_2396D2358(v9))
        goto LABEL_12;
      v25 = 0;
      v19.i64[0] = *(_QWORD *)(v9 + 24);
      v26 = v19;
      v20.i32[0] = *(_DWORD *)(v9 + 32);
      v26.i32[2] = v20.i32[0];
      v21.i32[0] = *((_DWORD *)v23 + 2);
      v22.i64[0] = *(_QWORD *)v23;
      v22.i32[2] = v21.i32[0];
      v19.f32[0] = *(float *)(v9 + 36)
                 + vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v23), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23, 1), *(float32x2_t *)v19.f32, 1), v21, *(float32x2_t *)v20.f32).f32[0];
      v22 = vmlsq_lane_f32(v22, v26, *(float32x2_t *)v19.f32, 0);
      v27 = -1;
      v125 = v22;
      while (1)
      {
        v28 = *(_QWORD *)(v9 + 40);
        v29 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v9 + 48) - v28) >> 2) - 1;
        if (++v27 >= v29)
          break;
        v30 = v28 + v25;
        v26.i64[0] = *(_QWORD *)v30;
        v26.i32[2] = *(_DWORD *)(v30 + 8);
        v19 = vsubq_f32(v22, v26);
        *(int32x2_t *)v20.f32 = vdup_lane_s32(*(int32x2_t *)v19.f32, 1);
        v31 = (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL);
        v20.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), *(float32x2_t *)v20.f32, *(float32x2_t *)v19.f32, 1), *(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32).f32[0]);
        if (v20.f32[0] < 0.00000011921
          || (v31.i64[0] = *(_QWORD *)(v30 + 12),
              v31.i32[2] = *(_DWORD *)(v30 + 20),
              v26 = vsubq_f32(v31, v26),
              v32 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0],
              v33 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.f32, 1), *(float32x2_t *)v26.f32, 1), v32, v32).f32[0]), v33 < 0.00000011921))
        {
          v25 += 12;
        }
        else
        {
          v20.f32[0] = 1.0 / v20.f32[0];
          v34 = vmulq_n_f32(v19, v20.f32[0]);
          v136 = v34.i32[2];
          v135 = v34.i64[0];
          v35 = (int8x16_t)vmulq_n_f32(v26, 1.0 / v33);
          v134 = v35.i32[2];
          v133 = v35.i64[0];
          v131 = &v135;
          v132 = &v133;
          LODWORD(v139) = 3;
          v140.i64[0] = v9 + 24;
          v140.i32[2] = 0;
          v137 = &v131;
          v144 = (float32x2_t *)&v137;
          v145 = &v139;
          *(_DWORD *)v146 = 1065353216;
          sub_2396D4B7C(&v138, (uint64_t)&v143, v35, *(double *)v26.i64, (int32x4_t)v20);
          v26.f32[0] = fabsf(v138);
          v36 = 2;
          if (v138 > 0.0)
            v36 = 1;
          if (v26.f32[0] < 0.00000011921)
            v36 = 0;
          v22 = v125;
          v25 += 12;
          if (v36 == 2)
            goto LABEL_12;
        }
      }
      v37 = v28 + 12 * v29;
      v19.i64[0] = *(_QWORD *)v37;
      v19.i32[2] = *(_DWORD *)(v37 + 8);
      v20.i64[0] = *(_QWORD *)v28;
      v20.i32[2] = *(_DWORD *)(v28 + 8);
      v38 = vsubq_f32(v22, v19);
      v19 = vsubq_f32(v20, v19);
      *(int32x2_t *)v20.f32 = vdup_lane_s32(*(int32x2_t *)v38.f32, 1);
      v39 = (float32x2_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
      v20.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32), *(float32x2_t *)v20.f32, *(float32x2_t *)v38.f32, 1), v39, v39).f32[0]);
      v21 = (float32x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      v40 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1), *(float32x2_t *)v19.f32, 1), v21, v21).f32[0]);
      if (v20.f32[0] >= 0.00000011921 && v40 >= 0.00000011921)
      {
        v20.f32[0] = 1.0 / v20.f32[0];
        v43 = vmulq_n_f32(v38, v20.f32[0]);
        v136 = v43.i32[2];
        v135 = v43.i64[0];
        v43.f32[0] = 1.0 / v40;
        v44 = (int8x16_t)vmulq_n_f32(v19, 1.0 / v40);
        v134 = v44.i32[2];
        v133 = v44.i64[0];
        v131 = &v135;
        v132 = &v133;
        LODWORD(v139) = 3;
        v140.i64[0] = v9 + 24;
        v140.i32[2] = 0;
        v137 = &v131;
        v144 = (float32x2_t *)&v137;
        v145 = &v139;
        *(_DWORD *)v146 = 1065353216;
        sub_2396D4B7C(&v138, (uint64_t)&v143, v44, *(double *)v43.i64, (int32x4_t)v20);
        if (fabsf(v138) >= 0.00000011921 && v138 <= 0.0)
        {
LABEL_12:
          if (v8[6] > 3.4028e38)
            break;
          goto LABEL_13;
        }
      }
      v20.i64[0] = *(_QWORD *)(v23 + 4);
      v42 = vmul_f32(*(float32x2_t *)(v9 + 28), *(float32x2_t *)v20.f32);
      if (fabsf(*(float *)(v9 + 36)+ (float)((float)((float)(*(float *)(v9 + 24) * *(float *)v23) + v42.f32[0]) + v42.f32[1])) < v8[6])break;
LABEL_13:
      v23 += 12;
      if (v23 == v24)
        goto LABEL_4;
    }
    operator delete(__p);
    v143 = 0;
    v144 = 0;
    v145 = 0;
    *(_DWORD *)v146 = 1065353216;
    _Q0.i32[3] = 0;
    memset(&v146[4], 0, 32);
    v147 = 0;
    __asm { FMOV            V0.2S, #-1.0 }
    v148 = _Q0.i64[0];
    v149 = -1082130432;
    v139 = 0;
    v140 = 0uLL;
    v51 = *(const void **)v9;
    v50 = *(_QWORD *)(v9 + 8);
    v52 = v50 - *(_QWORD *)v9;
    if (v50 == *(_QWORD *)v9)
      goto LABEL_64;
    if (0xAAAAAAAAAAAAAAABLL * (v52 >> 2) > 0x1555555555555555)
      sub_2394189F8();
    v53 = (char *)operator new(v52);
    v139 = v53;
    v140.i64[1] = (uint64_t)&v53[4 * (v52 >> 2)];
    v54 = 12 * ((v52 - 12) / 0xCuLL) + 12;
    memcpy(v53, v51, v54);
    v55 = &v53[v54];
    v140.i64[0] = (uint64_t)&v53[v54];
    if (!v54)
    {
LABEL_63:
      operator delete(v55);
      goto LABEL_64;
    }
    v56 = 0;
    v126 = v55;
    while (2)
    {
      while (v56 < v145)
      {
        *v56 = *(void **)v53;
        *((_DWORD *)v56 + 2) = *((_DWORD *)v53 + 2);
        v144 = (float32x2_t *)((char *)v56 + 12);
        v53 += 12;
        v56 = (void **)((char *)v56 + 12);
        if (v53 == v55)
          goto LABEL_62;
      }
      v57 = (void **)v143;
      v58 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v143) >> 2);
      v59 = v58 + 1;
      if (v58 + 1 > 0x1555555555555555)
        sub_2394189F8();
      if (0x5555555555555556 * (((char *)v145 - (char *)v143) >> 2) > v59)
        v59 = 0x5555555555555556 * (((char *)v145 - (char *)v143) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v145 - (char *)v143) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v60 = 0x1555555555555555;
      else
        v60 = v59;
      if (v60)
      {
        if (v60 > 0x1555555555555555)
          sub_239418A80();
        v61 = (char *)operator new(12 * v60);
      }
      else
      {
        v61 = 0;
      }
      v62 = &v61[12 * v58];
      *(_QWORD *)v62 = *(_QWORD *)v53;
      *((_DWORD *)v62 + 2) = *((_DWORD *)v53 + 2);
      v63 = (float32x2_t *)v62;
      if (v56 == v57)
      {
        v8 = a1;
        v66 = (float32x2_t *)(v62 + 12);
        v143 = (float32x2_t *)v62;
        v144 = (float32x2_t *)(v62 + 12);
        v145 = (void **)&v61[12 * v60];
        if (v56)
          goto LABEL_57;
      }
      else
      {
        v8 = a1;
        do
        {
          v64 = *(float32x2_t *)((char *)v56 - 12);
          v56 = (void **)((char *)v56 - 12);
          v65 = *((_DWORD *)v56 + 2);
          *(float32x2_t *)((char *)v63 - 12) = v64;
          v63 = (float32x2_t *)((char *)v63 - 12);
          v63[1].i32[0] = v65;
        }
        while (v56 != v57);
        v56 = (void **)v143;
        v66 = (float32x2_t *)(v62 + 12);
        v143 = v63;
        v144 = (float32x2_t *)(v62 + 12);
        v145 = (void **)&v61[12 * v60];
        if (v56)
LABEL_57:
          operator delete(v56);
      }
      v55 = v126;
      v144 = v66;
      v53 += 12;
      v56 = (void **)v66;
      if (v53 != v126)
        continue;
      break;
    }
LABEL_62:
    v55 = (char *)v139;
    if (v139)
      goto LABEL_63;
LABEL_64:
    v139 = 0;
    v140 = 0uLL;
    v68 = (const void *)*a2;
    v67 = a2[1];
    v69 = *(_QWORD *)&v67 - *(_QWORD *)a2;
    if (*(_QWORD *)&v67 == *a2)
      goto LABEL_91;
    if (0xAAAAAAAAAAAAAAABLL * (v69 >> 2) > 0x1555555555555555)
      sub_2394189F8();
    v70 = (char *)operator new(v69);
    v139 = v70;
    v140.i64[1] = (uint64_t)&v70[4 * (v69 >> 2)];
    v71 = 12 * ((v69 - 12) / 0xCuLL) + 12;
    memcpy(v70, v68, v71);
    v72 = &v70[v71];
    v140.i64[0] = (uint64_t)&v70[v71];
    if (!v71)
    {
LABEL_90:
      operator delete(v72);
      goto LABEL_91;
    }
    v73 = (void **)v144;
    v127 = v72;
    while (2)
    {
      while (v73 < v145)
      {
        v74 = *(void **)v70;
        *((_DWORD *)v73 + 2) = *((_DWORD *)v70 + 2);
        *v73 = v74;
        v144 = (float32x2_t *)((char *)v73 + 12);
        v70 += 12;
        v73 = (void **)((char *)v73 + 12);
        if (v70 == v72)
          goto LABEL_89;
      }
      v75 = (void **)v143;
      v76 = 0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (char *)v143) >> 2);
      v77 = v76 + 1;
      if (v76 + 1 > 0x1555555555555555)
        sub_2394189F8();
      if (0x5555555555555556 * (((char *)v145 - (char *)v143) >> 2) > v77)
        v77 = 0x5555555555555556 * (((char *)v145 - (char *)v143) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v145 - (char *)v143) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v78 = 0x1555555555555555;
      else
        v78 = v77;
      if (v78)
      {
        if (v78 > 0x1555555555555555)
          sub_239418A80();
        v79 = (char *)operator new(12 * v78);
      }
      else
      {
        v79 = 0;
      }
      v80 = &v79[12 * v76];
      *(_QWORD *)v80 = *(_QWORD *)v70;
      *((_DWORD *)v80 + 2) = *((_DWORD *)v70 + 2);
      v81 = (float32x2_t *)v80;
      if (v73 == v75)
      {
        v8 = a1;
        v84 = (float32x2_t *)(v80 + 12);
        v143 = (float32x2_t *)v80;
        v144 = (float32x2_t *)(v80 + 12);
        v145 = (void **)&v79[12 * v78];
        if (v73)
          goto LABEL_84;
      }
      else
      {
        v8 = a1;
        do
        {
          v82 = *(float32x2_t *)((char *)v73 - 12);
          v73 = (void **)((char *)v73 - 12);
          v83 = *((_DWORD *)v73 + 2);
          *(float32x2_t *)((char *)v81 - 12) = v82;
          v81 = (float32x2_t *)((char *)v81 - 12);
          v81[1].i32[0] = v83;
        }
        while (v73 != v75);
        v73 = (void **)v143;
        v84 = (float32x2_t *)(v80 + 12);
        v143 = v81;
        v144 = (float32x2_t *)(v80 + 12);
        v145 = (void **)&v79[12 * v78];
        if (v73)
LABEL_84:
          operator delete(v73);
      }
      v72 = v127;
      v144 = v84;
      v70 += 12;
      v73 = (void **)v84;
      if (v70 != v127)
        continue;
      break;
    }
LABEL_89:
    v72 = (char *)v139;
    if (v139)
      goto LABEL_90;
LABEL_91:
    v85 = v143;
    v86 = (char *)v144;
    v87 = 0xAAAAAAAAAAAAAAABLL * (((char *)v144 - (char *)v143) >> 2);
    if (v87 < 3)
    {
      v7 = a3;
      v11 = a2;
      v10 = v121;
    }
    else
    {
      v7 = a3;
      v11 = a2;
      v10 = v121;
      if (v143 == v144)
      {
        v90.i32[0] = 0;
        v128 = 0u;
        v91 = 0;
        v92 = 0.0;
        v93 = 0.0;
        v94.i32[0] = 0;
        v95 = 0;
        v96 = 0;
        v97 = 0;
        a7.i32[0] = 0;
      }
      else
      {
        v88 = 0uLL;
        v89 = v143;
        do
        {
          *(float32x2_t *)_Q0.f32 = *v89;
          _Q0.i32[2] = v89[1].i32[0];
          v88 = vaddq_f32(v88, _Q0);
          v89 = (float32x2_t *)((char *)v89 + 12);
        }
        while (v89 != v144);
        v128 = v88;
        v90.i32[0] = 0;
        v91 = 0;
        v92 = 0.0;
        v93 = 0.0;
        v94.i32[0] = 0;
        v95 = 0;
        v96 = 0;
        v97 = 0;
        a7.i32[0] = 0;
        do
        {
          v98 = v85[1].f32[0];
          v92 = v92 + v98;
          v99 = *v85;
          v85 = (float32x2_t *)((char *)v85 + 12);
          *(float32x2_t *)v45.f32 = v99;
          v90.i32[1] = v91;
          *(float32x2_t *)v90.f32 = vadd_f32(*(float32x2_t *)v90.f32, v99);
          v93 = vmlas_n_f32(v93, v45.f32[0], v45.f32[0]);
          LODWORD(v100) = vdup_lane_s32((int32x2_t)v99, 1).u32[0];
          *((float *)&v100 + 1) = v98;
          v94.i32[1] = v95;
          v94.i64[1] = __PAIR64__(v97, v96);
          v94 = vmlaq_f32(v94, (float32x4_t)vdupq_lane_s64(v100, 0), (float32x4_t)vzip1q_s32((int32x4_t)v45, (int32x4_t)v45));
          a7.f32[0] = a7.f32[0] + (float)(v98 * v98);
          v97 = v94.i32[3];
          v96 = v94.i32[2];
          v95 = v94.i32[1];
          v91 = v90.i32[1];
        }
        while (v85 != v144);
      }
      v45.f32[0] = (float)v87;
      v101 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 0);
      v94.i32[1] = v95;
      v94.i64[1] = __PAIR64__(v97, v96);
      v102 = (int32x4_t)vdivq_f32(v94, v101);
      v90.i32[1] = v91;
      v90.i64[1] = __PAIR64__(LODWORD(v93), LODWORD(v92));
      __pa = *(int32x2_t *)v45.f32;
      _Q1 = vdivq_f32(a7, v45);
      _Q0 = (int32x4_t)vdivq_f32(v90, v101);
      _S3 = _Q0.i32[2];
      _Q5 = (float32x4_t)vzip1q_s32(_Q0, _Q0);
      __asm { FMLS            S2, S0, V5.S[0] }
      v108 = (int32x4_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 0xCuLL);
      v109.i64[0] = vrev64q_s32(v102).u64[0];
      v109.i64[1] = v102.i64[1];
      v110 = (int8x16_t)vmlsq_f32(v109, (float32x4_t)vzip2q_s32(vtrn1q_s32(_Q0, v108), v108), _Q5);
      v139 = (void *)__PAIR64__(v110.u32[1], _S2);
      v140 = v110;
      v110.i32[1] = vextq_s8(v110, v110, 8uLL).i32[1];
      __asm { FMLS            S1, S3, V0.S[2] }
      v141 = v110.i64[0];
      v142 = _Q1.i32[0];
      sub_2396E2798((float32x4_t *)&v139, (uint64_t)&v129, _Q1);
      v111 = (int8x16_t)v129;
      v113 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v129.f32, 1);
      v112 = (float32x2_t)vextq_s8(v111, v111, 8uLL).u64[0];
      v113.f32[0] = 1.0
                  / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v111.i8), v113, *(float32x2_t *)v129.f32, 1), v112, v112).f32[0]);
      a7 = vmulq_n_f32(v129, v113.f32[0]);
      v114 = __pa;
      if (*(float *)__pa.i32 < 1.0)
        *(float *)v114.i32 = 1.0;
      v115 = (int8x16_t)vdivq_f32(v128, (float32x4_t)vdupq_lane_s32(v114, 0));
      v116 = vmul_lane_f32(v113, *(float32x2_t *)v129.f32, 1);
      a5 = vmul_f32(v112, v113);
      *(_QWORD *)v146 = a7.i64[0];
      *(_DWORD *)&v146[8] = a7.i32[2];
      *(float *)&v146[12] = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)v115.i8), v116, *(float32x2_t *)v115.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL), a5).f32[0];
      v85 = v143;
      v86 = (char *)v144;
      v87 = 0xAAAAAAAAAAAAAAABLL * (((char *)v144 - (char *)v143) >> 2);
    }
    if (v87 > *((_QWORD *)v8 + 4))
    {
      if ((float32x2_t **)v9 == &v143)
      {
        *v12 = *(_OWORD *)v146;
      }
      else
      {
        sub_2394ECC58((_QWORD *)v9, (char *)v85, v86, v87);
        *v12 = *(_OWORD *)v146;
        sub_2394ECC58((_QWORD *)(v9 + 40), *(char **)&v146[16], *(char **)&v146[24], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v146[24] - *(_QWORD *)&v146[16]) >> 2));
      }
      v118 = v148;
      *(_DWORD *)(v9 + 72) = v149;
      *(_QWORD *)(v9 + 64) = v118;
      if (*(_QWORD *)&v146[16])
      {
        *(_QWORD *)&v146[24] = *(_QWORD *)&v146[16];
        operator delete(*(void **)&v146[16]);
      }
      if (v143)
      {
        v144 = v143;
        operator delete(v143);
      }
      return 1;
    }
    else
    {
      if (*(_QWORD *)&v146[16])
      {
        *(_QWORD *)&v146[24] = *(_QWORD *)&v146[16];
        operator delete(*(void **)&v146[16]);
        v85 = v143;
      }
      if (v85)
      {
        v144 = v85;
        operator delete(v85);
      }
LABEL_6:
      v9 += 80;
      if (v9 != v10)
        continue;
      return 0;
    }
  }
}

void sub_2396D1D5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2396D1E6C(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_2396D1D70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2396D1E6C(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_2396D1D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2396D1E6C(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_2396D1D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  uint64_t v37;

  if (__p)
  {
    operator delete(__p);
    sub_2396D1E6C(v37 - 208);
    _Unwind_Resume(a1);
  }
  sub_2396D1E6C(v37 - 208);
  _Unwind_Resume(a1);
}

void sub_2396D1E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2396D1E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2396D1E6C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void **sub_2396D1EAC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 10);
        if (v6)
        {
          *((_QWORD *)v3 - 9) = v6;
          operator delete(v6);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_2396D1F2C(uint64_t a1, uint64_t a2, float32x2_t *a3, float a4, double a5)
{
  float v5;
  float32x2_t v6;
  float32x2_t v7;
  float v9;

  v5 = *(float *)&a5;
  v6 = *(float32x2_t *)(a2 + 4);
  v7 = vmul_f32(*(float32x2_t *)(a1 + 28), v6);
  if (fabsf(*(float *)(a1 + 36) + (float)((float)((float)(*(float *)(a1 + 24) * *(float *)a2) + v7.f32[0]) + v7.f32[1])) > a4)
    return 0;
  LODWORD(a5) = *(_DWORD *)(a1 + 32);
  v6.i32[0] = a3[1].i32[0];
  v9 = acosf(fminf(fmaxf(fabsf(vmla_f32(vmla_lane_f32(vmul_f32(*a3, *(float32x2_t *)(a1 + 24)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a1 + 24), 1), *a3, 1), *(float32x2_t *)&a5, v6).f32[0]), -1.0), 1.0))* 180.0/ 3.14159265;
  return v9 <= v5;
}

void sub_2396D1FF4(uint64_t a1, float32x2_t *a2, float32x4_t a3, double a4, int32x4_t a5, double a6, float32x2_t a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float v21;
  float32x4_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  __int32 v41;
  uint64_t v42;
  __int32 v43;
  uint64_t **v44;
  float v45;
  char v46[8];
  uint64_t ***v47;
  int *v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a1 + 40) || sub_2396D2358(a1))
  {
    v12 = 0;
    a3.i64[0] = *(_QWORD *)(a1 + 24);
    v13 = a3;
    a5.i32[0] = *(_DWORD *)(a1 + 32);
    v13.i32[2] = a5.i32[0];
    a7.i32[0] = a2[1].i32[0];
    *(float32x2_t *)a10.f32 = *a2;
    a10.i32[2] = a7.i32[0];
    v14 = -1;
    a3.f32[0] = *(float *)(a1 + 36)
              + vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a3.f32, *a2), (float32x2_t)vdup_lane_s32((int32x2_t)*a2, 1), *(float32x2_t *)a3.f32, 1), a7, *(float32x2_t *)a5.i8).f32[0];
    v15 = vmlsq_lane_f32(a10, v13, *(float32x2_t *)a3.f32, 0);
    v34 = v15;
    while (1)
    {
      v16 = *(_QWORD *)(a1 + 40);
      v17 = -1 - 0x5555555555555555 * ((*(_QWORD *)(a1 + 48) - v16) >> 2);
      if (++v14 >= v17)
        break;
      v18 = v16 + v12;
      v13.i64[0] = *(_QWORD *)v18;
      v13.i32[2] = *(_DWORD *)(v18 + 8);
      a3 = vsubq_f32(v15, v13);
      *(int32x2_t *)a5.i8 = vdup_lane_s32(*(int32x2_t *)a3.f32, 1);
      v19 = (float32x4_t)vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL);
      *(float *)a5.i32 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a3.f32, *(float32x2_t *)a3.f32), *(float32x2_t *)a5.i8, *(float32x2_t *)a3.f32, 1), *(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32).f32[0]);
      if (*(float *)a5.i32 < 0.00000011921
        || (v19.i64[0] = *(_QWORD *)(v18 + 12),
            v19.i32[2] = *(_DWORD *)(v18 + 20),
            v13 = vsubq_f32(v19, v13),
            v20 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0],
            v21 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.f32, 1), *(float32x2_t *)v13.f32, 1), v20, v20).f32[0]), v21 < 0.00000011921))
      {
        v12 += 12;
      }
      else
      {
        *(float *)a5.i32 = 1.0 / *(float *)a5.i32;
        v22 = vmulq_n_f32(a3, *(float *)a5.i32);
        v43 = v22.i32[2];
        v42 = v22.i64[0];
        v23 = (int8x16_t)vmulq_n_f32(v13, 1.0 / v21);
        v41 = v23.i32[2];
        v40 = v23.i64[0];
        v38 = &v42;
        v39 = &v40;
        v35 = 3;
        v36 = a1 + 24;
        v37 = 0;
        v44 = &v38;
        v47 = &v44;
        v48 = &v35;
        v49 = 1065353216;
        sub_2396D4B7C(&v45, (uint64_t)v46, v23, *(double *)v13.i64, a5);
        v13.f32[0] = fabsf(v45);
        if (v45 > 0.0)
          v24 = 1;
        else
          v24 = 2;
        if (v13.f32[0] < 0.00000011921)
          v24 = 0;
        v15 = v34;
        v12 += 12;
        if (v24 == 2)
          return;
      }
    }
    v25 = v16 + 12 * v17;
    a3.i64[0] = *(_QWORD *)v25;
    a3.i32[2] = *(_DWORD *)(v25 + 8);
    v26 = vsubq_f32(v15, a3);
    a5.i64[0] = *(_QWORD *)v16;
    a5.i32[2] = *(_DWORD *)(v16 + 8);
    v27 = vsubq_f32((float32x4_t)a5, a3);
    *(int32x2_t *)a5.i8 = vdup_lane_s32(*(int32x2_t *)v26.f32, 1);
    v28 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
    *(float *)a5.i32 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32), *(float32x2_t *)a5.i8, *(float32x2_t *)v26.f32, 1), v28, v28).f32[0]);
    v29 = (float32x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
    v30 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.f32, 1), *(float32x2_t *)v27.f32, 1), v29, v29).f32[0]);
    if (*(float *)a5.i32 >= 0.00000011921 && v30 >= 0.00000011921)
    {
      *(float *)a5.i32 = 1.0 / *(float *)a5.i32;
      v32 = vmulq_n_f32(v26, *(float *)a5.i32);
      v43 = v32.i32[2];
      v42 = v32.i64[0];
      v32.f32[0] = 1.0 / v30;
      v33 = (int8x16_t)vmulq_n_f32(v27, 1.0 / v30);
      v41 = v33.i32[2];
      v40 = v33.i64[0];
      v38 = &v42;
      v39 = &v40;
      v35 = 3;
      v36 = a1 + 24;
      v37 = 0;
      v44 = &v38;
      v47 = &v44;
      v48 = &v35;
      v49 = 1065353216;
      sub_2396D4B7C(&v45, (uint64_t)v46, v33, *(double *)v32.i64, a5);
    }
  }
}

uint64_t sub_2396D2358(uint64_t a1)
{
  _QWORD *v1;
  char *v2;
  float32x2_t *v3;
  int64_t v4;
  size_t v5;
  uint64_t v6;
  char *v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  float v25;
  unint64_t v26;
  char *v27;
  float v28;
  float32x4_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint8x8_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  float32x4_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  float32x4_t v55;
  char *v56;
  float32x4_t v57;
  float32x2_t v58;
  float v59;
  char *v60;
  char *v61;
  float32x4_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float v65;
  float32x4_t v67;
  int8x16_t v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *i;
  float32x4_t v76;
  float32x4_t v77;
  void *v78[2];
  void *__p[2];
  int v80;
  unint64_t v81;
  void *v82;
  void *v83;
  char *v84;
  int v85;
  _QWORD *v86;
  int v87;
  _QWORD v88[2];
  uint64_t v89;
  __int32 v90;
  uint64_t v91;
  __int32 v92;
  _QWORD *v93;
  float v94;
  _QWORD v95[3];
  int v96;
  uint64_t v97;

  v1 = (_QWORD *)a1;
  v97 = *MEMORY[0x24BDAC8D0];
  v74 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  v3 = *(float32x2_t **)a1;
  v2 = *(char **)(a1 + 8);
  v4 = (int64_t)&v2[-*(_QWORD *)a1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 2);
  if (v5 < 3)
    return 0;
  if (v4 == 36)
  {
    sub_2394ECC58(v74, (char *)v3, v2, v5);
    return 1;
  }
  v82 = 0;
  v83 = 0;
  v84 = 0;
  if (v5 > 0x1555555555555555)
    sub_2394189F8();
  v7 = (char *)operator new(v4);
  v82 = v7;
  v83 = v7;
  v84 = &v7[12 * v5];
  for (i = v1; v3 != (float32x2_t *)v2; v7 = v18)
  {
    while (1)
    {
      v8.i64[0] = v1[3];
      v12 = v8;
      v9.i32[0] = *((_DWORD *)v1 + 8);
      v12.i32[2] = v9.i32[0];
      v10.i32[0] = v3[1].i32[0];
      *(float32x2_t *)v11.f32 = *v3;
      v11.i32[2] = v10.i32[0];
      v8.f32[0] = *((float *)v1 + 9)
                + vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v8.f32, *v3), (float32x2_t)vdup_lane_s32((int32x2_t)*v3, 1), *(float32x2_t *)v8.f32, 1), v10, v9).f32[0];
      v11 = vmlsq_lane_f32(v11, v12, *(float32x2_t *)v8.f32, 0);
      if (v7 >= v84)
        break;
      *((_DWORD *)v7 + 2) = v11.i32[2];
      *(_QWORD *)v7 = v11.i64[0];
      v83 = v7 + 12;
      v3 = (float32x2_t *)((char *)v3 + 12);
      v7 += 12;
      if (v3 == (float32x2_t *)v2)
        goto LABEL_27;
    }
    v13 = (char *)v82;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)v82) >> 2) + 1;
    if (v14 > 0x1555555555555555)
      sub_2394189F8();
    if (0x5555555555555556 * ((v84 - (_BYTE *)v82) >> 2) > v14)
      v14 = 0x5555555555555556 * ((v84 - (_BYTE *)v82) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((v84 - (_BYTE *)v82) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v15 = 0x1555555555555555;
    else
      v15 = v14;
    if (v15)
    {
      v76 = v11;
      if (v15 > 0x1555555555555555)
        sub_239418A80();
      v16 = (char *)operator new(12 * v15);
      v11 = v76;
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * ((v7 - (_BYTE *)v82) >> 2)];
    *(_QWORD *)v17 = v11.i64[0];
    *((_DWORD *)v17 + 2) = v11.i32[2];
    v18 = v17 + 12;
    if (v7 == v13)
    {
      v82 = v17;
      v84 = &v16[12 * v15];
      v13 = v7;
    }
    else
    {
      do
      {
        v19 = *(_QWORD *)(v7 - 12);
        v7 -= 12;
        v20 = *((_DWORD *)v7 + 2);
        *(_QWORD *)(v17 - 12) = v19;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v20;
      }
      while (v7 != v13);
      v82 = v17;
      v84 = &v16[12 * v15];
      if (!v13)
        goto LABEL_26;
    }
    operator delete(v13);
LABEL_26:
    v1 = i;
    v83 = v18;
    v3 = (float32x2_t *)((char *)v3 + 12);
  }
LABEL_27:
  LODWORD(v78[0]) = 3;
  v78[1] = v1 + 3;
  LODWORD(__p[0]) = 0;
  v21 = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)v21 = xmmword_239ECEF98;
  *((_QWORD *)v21 + 2) = 2;
  v95[0] = v78;
  v22 = 1;
  sub_2396D4C7C((uint64_t *)v21, (uint64_t *)v21 + 3, (uint64_t)v95, 2, 1);
  v23 = 0;
  v24 = (char *)v82 + 12;
  do
  {
    v25 = *(float *)&v24[4 * *v21];
    v26 = v23;
    v27 = (char *)v82 + 12 * v23;
    v28 = *(float *)&v27[4 * *v21];
    v23 = v22;
    if (v25 >= v28)
    {
      if (v25 == v28)
      {
        v23 = v26;
        if (*(float *)&v24[4 * v21[2]] < *(float *)&v27[4 * v21[2]])
          v23 = v22;
      }
      else
      {
        v23 = v26;
      }
    }
    ++v22;
    v24 += 12;
  }
  while (v5 != v22);
  operator delete(v21);
  v81 = v23;
  v29 = 0uLL;
  v73 = v1 + 3;
  *(_OWORD *)v78 = 0uLL;
  *(_OWORD *)__p = 0uLL;
  v80 = 1065353216;
  v30 = v23;
  while (2)
  {
    v31 = (char *)v82 + 12 * v30;
    v29.i64[0] = *(_QWORD *)v31;
    v29.i32[2] = *((_DWORD *)v31 + 2);
    v33 = (_DWORD *)v1[6];
    v32 = v1[7];
    v77 = v29;
    if ((unint64_t)v33 >= v32)
    {
      v35 = (_DWORD *)*v74;
      v36 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v33 - *v74) >> 2);
      v37 = v36 + 1;
      if (v36 + 1 > 0x1555555555555555)
        sub_2394189F8();
      v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (_QWORD)v35) >> 2);
      if (2 * v38 > v37)
        v37 = 2 * v38;
      if (v38 >= 0xAAAAAAAAAAAAAAALL)
        v39 = 0x1555555555555555;
      else
        v39 = v37;
      if (v39)
      {
        if (v39 > 0x1555555555555555)
          sub_239418A80();
        v40 = (char *)operator new(12 * v39);
      }
      else
      {
        v40 = 0;
      }
      v41 = &v40[12 * v36];
      *(_QWORD *)v41 = v77.i64[0];
      *((_DWORD *)v41 + 2) = v77.i32[2];
      v42 = v41;
      if (v33 != v35)
      {
        do
        {
          v43 = *(_QWORD *)(v33 - 3);
          v33 -= 3;
          v44 = v33[2];
          *(_QWORD *)(v42 - 12) = v43;
          v42 -= 12;
          *((_DWORD *)v42 + 2) = v44;
        }
        while (v33 != v35);
        v33 = (_DWORD *)*v74;
      }
      v34 = v41 + 12;
      v1 = i;
      i[5] = v42;
      i[6] = v41 + 12;
      i[7] = &v40[12 * v39];
      if (v33)
      {
        operator delete(v33);
        v30 = v81;
      }
    }
    else
    {
      v33[2] = v29.i32[2];
      *(_QWORD *)v33 = v29.i64[0];
      v34 = v33 + 3;
    }
    v1[6] = v34;
    if (v78[1])
    {
      v45 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]);
      v45.i16[0] = vaddlv_u8(v45);
      if (v45.u32[0] > 1uLL)
      {
        v46 = v30;
        if ((void *)v30 >= v78[1])
          v46 = v30 % (unint64_t)v78[1];
      }
      else
      {
        v46 = ((unint64_t)v78[1] - 1) & v30;
      }
      v47 = (_QWORD *)*((_QWORD *)v78[0] + v46);
      if (v47)
      {
        v48 = (_QWORD *)*v47;
        if (v48)
        {
          if (v45.u32[0] < 2uLL)
          {
            while (1)
            {
              v50 = v48[1];
              if (v50 == v30)
              {
                if (v48[2] == v30)
                  goto LABEL_87;
              }
              else if ((v50 & ((uint64_t)v78[1] - 1)) != v46)
              {
                goto LABEL_73;
              }
              v48 = (_QWORD *)*v48;
              if (!v48)
                goto LABEL_73;
            }
          }
          do
          {
            v49 = v48[1];
            if (v49 == v30)
            {
              if (v48[2] == v30)
              {
LABEL_87:
                v6 = 0;
                v1[6] = v1[5];
                v69 = __p[0];
                if (!__p[0])
                  goto LABEL_89;
                goto LABEL_88;
              }
            }
            else
            {
              if ((void *)v49 >= v78[1])
                v49 %= (unint64_t)v78[1];
              if (v49 != v46)
                break;
            }
            v48 = (_QWORD *)*v48;
          }
          while (v48);
        }
      }
    }
LABEL_73:
    sub_2396D5B90((uint64_t)v78, &v81, &v81);
    v52 = 0;
    v53 = 0;
    v30 = (v81 + 1) % v5;
    do
    {
      while (1)
      {
        v54 = (char *)v82;
        v61 = (char *)v82 + 12 * v30;
        v29.i64[0] = *(_QWORD *)((char *)v82 + v52);
        v29.i32[2] = *(_DWORD *)((char *)v82 + v52 + 8);
        v51.i64[0] = *(_QWORD *)v61;
        v51.i32[2] = *((_DWORD *)v61 + 2);
        v55 = v77;
        v62 = vsubq_f32(v29, v77);
        v29 = vsubq_f32(v51, v77);
        *(int32x2_t *)v51.f32 = vdup_lane_s32(*(int32x2_t *)v62.f32, 1);
        v63 = (float32x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
        v51.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32), *(float32x2_t *)v51.f32, *(float32x2_t *)v62.f32, 1), v63, v63).f32[0]);
        v64 = (float32x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
        v65 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 1), *(float32x2_t *)v29.f32, 1), v64, v64).f32[0]);
        if (v51.f32[0] < 0.00000011921 || v65 < 0.00000011921)
          break;
        v51.f32[0] = 1.0 / v51.f32[0];
        v67 = vmulq_n_f32(v62, v51.f32[0]);
        v92 = v67.i32[2];
        v91 = v67.i64[0];
        v67.f32[0] = 1.0 / v65;
        v68 = (int8x16_t)vmulq_n_f32(v29, 1.0 / v65);
        v90 = v68.i32[2];
        v89 = v68.i64[0];
        v88[0] = &v91;
        v88[1] = &v89;
        v85 = 3;
        v86 = v73;
        v87 = 0;
        v93 = v88;
        v95[1] = &v93;
        v95[2] = &v85;
        v96 = 1065353216;
        sub_2396D4B7C(&v94, (uint64_t)v95, v68, *(double *)v67.i64, (int32x4_t)v51);
        if (fabsf(v94) < 0.00000011921)
        {
          v54 = (char *)v82;
          v55 = v77;
          break;
        }
        if (v94 <= 0.0)
          v30 = v53;
        ++v53;
        v52 += 12;
        if (v5 == v53)
          goto LABEL_35;
      }
      v56 = &v54[12 * v30];
      v29.i64[0] = *(_QWORD *)v56;
      v29.i32[2] = *((_DWORD *)v56 + 2);
      v57 = vsubq_f32(v29, v55);
      v58 = (float32x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
      v59 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 1), *(float32x2_t *)v57.f32, 1), v58, v58).f32[0];
      v60 = &v54[v52];
      v57.i64[0] = *(_QWORD *)v60;
      v57.i32[2] = *((_DWORD *)v60 + 2);
      v29 = vsubq_f32(v57, v55);
      v51 = (float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL);
      if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 1), *(float32x2_t *)v29.f32, 1), *(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32).f32[0] > v59)v30 = v53;
      ++v53;
      v52 += 12;
    }
    while (v5 != v53);
LABEL_35:
    v81 = v30;
    v1 = i;
    if (v30 != v23)
      continue;
    break;
  }
  v6 = 1;
  v69 = __p[0];
  if (__p[0])
  {
    do
    {
LABEL_88:
      v70 = (_QWORD *)*v69;
      operator delete(v69);
      v69 = v70;
    }
    while (v70);
  }
LABEL_89:
  v71 = v78[0];
  v78[0] = 0;
  if (v71)
    operator delete(v71);
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  return v6;
}

void sub_2396D2AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2396D2B34(float32x2_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>, double a5@<D1>)
{
  int32x4_t v5;
  int32x2_t v6;
  float32x2_t *v8;
  float32x2_t *v9;
  float32x4_t v10;
  float32x2_t *v11;
  float32x4_t v12;
  __int32 v13;
  float v14;
  float v15;
  float32x4_t v16;
  __int32 v17;
  __int32 v18;
  __int32 v19;
  float v20;
  float v21;
  float32x2_t v22;
  uint64_t v23;
  float32x4_t v24;
  int32x4_t v25;
  int32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v39;
  float32x2_t v40;
  int8x16_t v41;
  float32x4_t v42;
  __int32 v43;
  _DWORD v44[2];
  int8x16_t v45;
  uint64_t v46;
  int v47;
  float32x4_t v48;

  v8 = *a1;
  v9 = a1[1];
  if (*a1 == v9)
  {
    *(float *)v6.i32 = (float)(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 2));
    v10 = 0uLL;
    if (!*(_BYTE *)(a2 + 8))
    {
      v42 = 0u;
      goto LABEL_12;
    }
LABEL_10:
    a4.i64[0] = **(_QWORD **)a2;
    a4.i32[2] = *(_DWORD *)(*(_QWORD *)a2 + 8);
    goto LABEL_14;
  }
  v10 = 0uLL;
  v11 = *a1;
  do
  {
    *(float32x2_t *)a4.f32 = *v11;
    a4.i32[2] = v11[1].i32[0];
    v10 = vaddq_f32(v10, a4);
    v11 = (float32x2_t *)((char *)v11 + 12);
  }
  while (v11 != v9);
  *(float *)v6.i32 = (float)(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 2));
  if (*(_BYTE *)(a2 + 8))
    goto LABEL_10;
  v42 = v10;
  if (v8 != v9)
  {
    v12.i32[0] = 0;
    v13 = 0;
    v14 = 0.0;
    v15 = 0.0;
    v16.i32[0] = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0.0;
    do
    {
      v21 = v8[1].f32[0];
      v14 = v14 + v21;
      v22 = *v8;
      v8 = (float32x2_t *)((char *)v8 + 12);
      *(float32x2_t *)v5.i8 = v22;
      v12.i32[1] = v13;
      *(float32x2_t *)v12.f32 = vadd_f32(*(float32x2_t *)v12.f32, v22);
      v15 = vmlas_n_f32(v15, *(float *)v5.i32, *(float *)v5.i32);
      LODWORD(v23) = vdup_lane_s32((int32x2_t)v22, 1).u32[0];
      *((float *)&v23 + 1) = v21;
      v16.i32[1] = v17;
      v16.i64[1] = __PAIR64__(v19, v18);
      v16 = vmlaq_f32(v16, (float32x4_t)vdupq_lane_s64(v23, 0), (float32x4_t)vzip1q_s32(v5, v5));
      v20 = v20 + (float)(v21 * v21);
      v19 = v16.i32[3];
      v18 = v16.i32[2];
      v17 = v16.i32[1];
      v13 = v12.i32[1];
    }
    while (v8 != v9);
    goto LABEL_13;
  }
LABEL_12:
  v12.i32[0] = 0;
  v13 = 0;
  v14 = 0.0;
  v15 = 0.0;
  v16.i32[0] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
LABEL_13:
  v43 = v6.i32[0];
  v24 = (float32x4_t)vdupq_lane_s32(v6, 0);
  v16.i32[1] = v17;
  v16.i64[1] = __PAIR64__(v19, v18);
  v25 = (int32x4_t)vdivq_f32(v16, v24);
  v12.i32[1] = v13;
  v12.i64[1] = __PAIR64__(LODWORD(v15), LODWORD(v14));
  _Q0 = (int32x4_t)vdivq_f32(v12, v24);
  _S2 = _Q0.i32[2];
  _Q5 = (float32x4_t)vzip1q_s32(_Q0, _Q0);
  __asm { FMLS            S1, S0, V5.S[0] }
  v34 = (int32x4_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 0xCuLL);
  v35.i64[0] = vrev64q_s32(v25).u64[0];
  v35.i64[1] = v25.i64[1];
  v36 = (int8x16_t)vmlsq_f32(v35, (float32x4_t)vzip2q_s32(vtrn1q_s32(_Q0, v34), v34), _Q5);
  v44[0] = _S1;
  v44[1] = v36.i32[1];
  v45 = v36;
  v37 = (float32x4_t)vextq_s8(v36, v36, 8uLL);
  v36.i32[1] = v37.i32[1];
  __asm { FMLS            S4, S2, V0.S[2] }
  v46 = v36.i64[0];
  v47 = _S4;
  sub_2396E2798((float32x4_t *)v44, (uint64_t)&v48, v37);
  v39 = v48;
  a5 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)v48.f32, 1));
  v40 = (float32x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
  a4 = vmulq_n_f32(v39, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32), *(float32x2_t *)&a5, *(float32x2_t *)v39.f32, 1), v40, v40).f32[0]));
  v10 = v42;
  v6.i32[0] = v43;
LABEL_14:
  LODWORD(a5) = 1.0;
  if (*(float *)v6.i32 >= 1.0)
    *(float *)&a5 = *(float *)v6.i32;
  v41 = (int8x16_t)vdivq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0));
  *(_QWORD *)a3 = a4.i64[0];
  *(_DWORD *)(a3 + 8) = a4.i32[2];
  *(float *)(a3 + 12) = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)v41.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1), *(float32x2_t *)a4.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a4, (int8x16_t)a4, 8uLL)).f32[0];
}

void sub_2396D2D84(const float **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  const float *v7;
  const float *v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  const float *v14;
  int v15;
  int v16;
  size_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  unint64_t v22;
  float *v23;
  float v24;
  size_t v25;
  float32x4_t *v26;
  unint64_t v27;
  float *v28;
  float *v29;
  unint64_t v30;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  uint64_t v34;
  float32x4_t v35;
  unint64_t v36;
  BOOL v37;
  BOOL v38;
  const float *v39;
  const float *v40;
  const float *v41;
  uint64_t v42;
  const float *v43;
  const float *v44;
  const float *v45;
  const float *v46;
  const float *v47;
  const float *v48;
  const float *v49;
  const float *v50;
  BOOL v52;
  BOOL v54;
  BOOL v56;
  BOOL v58;
  BOOL v60;
  BOOL v62;
  BOOL v64;
  BOOL v66;
  BOOL v68;
  BOOL v70;
  BOOL v72;
  uint64_t v74;
  unint64_t v75;
  int32x2_t *v76;
  BOOL v78;
  unint64_t v80;
  uint64_t v81;
  float *v82;
  float32x4_t v83;
  float32x4_t *v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t v87;
  float *v88;
  float v89;
  std::bad_alloc *exception;
  std::bad_alloc *v91;
  std::bad_alloc *v92;
  std::bad_alloc *v93;
  std::bad_alloc *v94;
  std::bad_alloc *v95;
  int v96;
  uint64_t v97;
  int v98;
  void *v99[2];
  unsigned int v100;
  void *v101;
  void *v102[2];
  unsigned int v103;
  int32x2_t v104;
  void *memptr[3];
  int v106;
  uint64_t v107;
  float32x4x3_t v108;

  v107 = *MEMORY[0x24BDAC8D0];
  v99[0] = 0;
  v99[1] = 0;
  v6 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v100 = -1431655765 * (a1[1] - *a1);
  sub_2395342E8((uint64_t)v99, 3 * v6);
  v8 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
    goto LABEL_5;
  v9 = v99[0];
  v10 = v100;
  v11 = 2 * v100;
  v12 = (char *)v7 - (char *)v8 - 12;
  if (v12 < 0x264)
  {
    v13 = 0;
    v14 = *a1;
    goto LABEL_4;
  }
  v13 = 0;
  v36 = v12 / 0xC;
  v37 = __CFADD__(v100, (v12 / 0xC));
  v38 = __CFADD__(v11, (_DWORD)v36);
  if (v37)
  {
    v14 = *a1;
    goto LABEL_4;
  }
  if (v38)
  {
    v14 = *a1;
    goto LABEL_4;
  }
  if (v12 >> 34 > 2)
  {
    v14 = *a1;
    goto LABEL_4;
  }
  v13 = 0;
  v39 = (const float *)((char *)v99[0] + 4 * v36 + 4);
  v40 = (const float *)((char *)v99[0] + 4 * v100);
  v41 = &v39[v100];
  v42 = 2 * v100;
  v43 = (const float *)((char *)v99[0] + v42 * 4);
  v44 = &v39[v42];
  v45 = &v8[3 * v36];
  v46 = v45 + 1;
  v47 = v8 + 1;
  v48 = v45 + 2;
  v49 = v8 + 2;
  v50 = v45 + 3;
  v52 = v99[0] < v44 && v43 < v39;
  v54 = v99[0] < v46 && v8 < v39;
  v56 = v99[0] < v48 && v47 < v39;
  v58 = v99[0] < v50 && v49 < v39;
  v60 = v40 < v44 && v43 < v41;
  v62 = v40 < v46 && v8 < v41;
  v64 = v40 < v48 && v47 < v41;
  v66 = v40 < v50 && v49 < v41;
  v68 = v43 < v46 && v8 < v44;
  v70 = v43 < v48 && v47 < v44;
  v72 = v43 < v50 && v49 < v44;
  if (v40 < v39 && v99[0] < v41)
  {
    v14 = v8;
    goto LABEL_4;
  }
  if (v52)
  {
    v14 = v8;
    do
    {
LABEL_4:
      v15 = *((_DWORD *)v14 + 1);
      v16 = *((_DWORD *)v14 + 2);
      v9[v13] = *(_DWORD *)v14;
      v9[v10 + v13] = v15;
      v9[(v11 + v13++)] = v16;
      v14 += 3;
    }
    while (v14 != v7);
    goto LABEL_5;
  }
  if (v54)
  {
    v14 = v8;
    goto LABEL_4;
  }
  if (v56)
  {
    v14 = v8;
    goto LABEL_4;
  }
  if (v58)
  {
    v14 = v8;
    goto LABEL_4;
  }
  if (v60)
  {
    v14 = v8;
    goto LABEL_4;
  }
  if (v62)
  {
    v14 = v8;
    goto LABEL_4;
  }
  if (v64)
  {
    v14 = v8;
    goto LABEL_4;
  }
  if (v66)
  {
    v14 = v8;
    goto LABEL_4;
  }
  if (v68)
  {
    v14 = v8;
    goto LABEL_4;
  }
  if (v70)
  {
    v14 = v8;
    goto LABEL_4;
  }
  if (v72)
  {
    v14 = v8;
    goto LABEL_4;
  }
  v74 = 0;
  v75 = v36 + 1;
  v13 = (v36 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v14 = &v8[3 * v13];
  do
  {
    v108 = vld3q_f32(v8);
    v8 += 12;
    *(float32x4_t *)&v9[v74 & 0xFFFFFFFC] = v108.val[0];
    *(float32x4_t *)&v9[v10 + v74] = v108.val[1];
    *(float32x4_t *)&v9[(v11 + v74)] = v108.val[2];
    v74 += 4;
  }
  while (v13 != v74);
  if (v75 != v13)
    goto LABEL_4;
LABEL_5:
  v96 = 3;
  v97 = a2;
  v98 = 0;
  v17 = (4 * v100 + 31) & 0x7FFFFFFE0;
  v102[1] = (void *)(v17 >> 2);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v17, 0x100BBD03uLL);
  v102[0] = memptr[0];
  if (!memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v91 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v91, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v103 = v100;
  memptr[1] = v99;
  memptr[2] = &v96;
  v106 = 1065353216;
  sub_2396D5EB0((uint64_t)v102, (uint64_t)memptr);
  v104.i32[0] = *(_DWORD *)(a2 + 12);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, (4 * v103 + 31) & 0x7FFFFFFE0, 0x100BBD03uLL);
  v18 = (float32x4_t *)memptr[0];
  if (!memptr[0])
  {
    v92 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v93 = std::bad_alloc::bad_alloc(v92);
    __cxa_throw(v93, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v19 = v103;
  v20 = 4 * v103;
  if (v103)
  {
    v21 = (float *)v102[0];
    v22 = (v103 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v22 >= 0xF)
    {
      v76 = (int32x2_t *)((char *)memptr[0] + v20);
      v78 = memptr[0] < &v104.u8[4] && &v104 < v76;
      v23 = (float *)memptr[0];
      if ((v102[0] >= v76 || memptr[0] >= (char *)v102[0] + v20) && !v78)
      {
        v80 = v22 + 1;
        v81 = 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
        v23 = (float *)((char *)memptr[0] + v81);
        v82 = (float *)((char *)v102[0] + v81);
        v83 = (float32x4_t)vdupq_lane_s32(v104, 0);
        v84 = (float32x4_t *)((char *)v102[0] + 16);
        v85 = (float32x4_t *)((char *)memptr[0] + 16);
        v86 = v80 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v87 = vaddq_f32(*v84, v83);
          v85[-1] = vaddq_f32(v84[-1], v83);
          *v85 = v87;
          v84 += 2;
          v85 += 2;
          v86 -= 8;
        }
        while (v86);
        v21 = v82;
        if (v80 == (v80 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_11;
      }
    }
    else
    {
      v23 = (float *)memptr[0];
    }
    do
    {
      v24 = *v21++;
      *v23++ = v24 + *(float *)v104.i32;
    }
    while (v23 != &v18->f32[v19]);
  }
LABEL_11:
  free(v102[0]);
  v25 = (v20 + 31) & 0x7FFFFFFE0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v25 >> 2;
  v101 = 0;
  malloc_type_posix_memalign(&v101, 0x20uLL, v25, 0x100BBD03uLL);
  v26 = (float32x4_t *)v101;
  *(_QWORD *)a3 = v101;
  if (!v26)
  {
    v94 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v95 = std::bad_alloc::bad_alloc(v94);
    __cxa_throw(v95, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  *(_DWORD *)(a3 + 16) = v19;
  if ((_DWORD)v19)
  {
    v27 = (v19 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v27 < 7)
    {
      v28 = (float *)v26;
      v29 = (float *)v18;
    }
    else
    {
      v28 = (float *)v26;
      v29 = (float *)v18;
      if ((unint64_t)((char *)v26 - (char *)v18) >= 0x20)
      {
        v30 = v27 + 1;
        v31 = v30 & 0x7FFFFFFFFFFFFFF8;
        v28 = &v26->f32[v31];
        v29 = &v18->f32[v31];
        v32 = v18 + 1;
        v33 = v26 + 1;
        v34 = v30 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v35 = vabsq_f32(*v32);
          v33[-1] = vabsq_f32(v32[-1]);
          *v33 = v35;
          v32 += 2;
          v33 += 2;
          v34 -= 8;
        }
        while (v34);
        if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_133;
      }
    }
    v88 = &v26->f32[v19];
    do
    {
      v89 = *v29++;
      *v28++ = fabsf(v89);
    }
    while (v28 != v88);
  }
LABEL_133:
  free(v18);
  free(v99[0]);
}

void sub_2396D3358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  free(a16);
  free(a12);
  _Unwind_Resume(a1);
}

void sub_2396D3398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  free(a12);
  _Unwind_Resume(a1);
}

float32x4_t sub_2396D33AC(uint64_t a1, float32x2_t **a2, unsigned int a3, float32x4_t result, float32x2_t a5, double a6, double a7, double a8, float32x2_t a9)
{
  float32x2_t *v9;
  unint64_t v10;
  float32x2_t v11;
  float32x2_t *v12;

  v9 = a2[1];
  if (*a2 != v9)
  {
    v10 = 0;
    result.i64[0] = *(_QWORD *)(a1 + 24);
    v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)result.f32, 1);
    v12 = *a2;
    do
    {
      a9.i32[0] = v12[1].i32[0];
      a5.i32[0] = *(_DWORD *)(a1 + 32);
      v10 += ((float)(*(float *)(a1 + 36)
                    + vmla_f32(vmla_lane_f32(vmul_f32(*v12, *(float32x2_t *)result.f32), v11, *v12, 1), a5, a9).f32[0]) > 0.0) ^ a3;
      v12 = (float32x2_t *)((char *)v12 + 12);
    }
    while (v12 != v9);
    result.f32[0] = (float)v10;
    if ((float)((float)(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)*a2) >> 2)) * 0.5) < (float)v10)
    {
      result = vnegq_f32(*(float32x4_t *)(a1 + 24));
      *(float32x4_t *)(a1 + 24) = result;
    }
  }
  return result;
}

uint64_t sub_2396D3440(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  unsigned int v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  float *v24;
  float v25;
  float *v26;
  unint64_t v27;
  unint64_t v28;
  float32x4_t *v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  uint64_t v34;
  const float *v35;
  unint64_t v36;
  float *v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  float *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  _OWORD *v52;
  float *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  _OWORD *v73;
  unint64_t *v74;
  uint64_t v75;
  __int128 v76;
  unint64_t v77;
  float *v78;
  void *v79;
  void *v80;
  void *v81;
  char *v82;
  char *v83;
  void *v84;
  void *v85;
  void *v86;
  unsigned int v88;
  uint64_t v89;
  float *v90;
  void *__p;
  float *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  char v97;
  __int16 v98;
  char v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  void *v105[2];
  void *v106[2];
  __int128 v107;
  __int16 v108;
  char v109;
  float *v110;
  unsigned int v111;

  if (*(_BYTE *)(a4 + 8))
  {
    v6 = *(uint64_t **)a4;
    v7 = **(_QWORD **)a4;
    v8 = *(_DWORD *)(*(_QWORD *)a4 + 8);
    v9 = *(_DWORD *)(*(_QWORD *)a4 + 12);
    v10 = *(_BYTE *)(*(_QWORD *)a4 + 16);
    v108 = *(_WORD *)(*(_QWORD *)a4 + 17);
    v109 = *((_BYTE *)v6 + 19);
    v11 = *(uint64_t *)((char *)v6 + 20);
    v12 = *((float *)v6 + 7);
    v13 = v6[4];
    _D3 = v6[5];
  }
  else
  {
    v109 = 0;
    v108 = 0;
    v11 = 0x3CF5C28F41F00000;
    __asm { FMOV            V3.2S, #-1.0 }
    v12 = 20.0;
    v8 = 0;
    v9 = 4;
    v10 = 1;
    v7 = 100;
    v13 = 100;
  }
  v94 = v7;
  v95 = v8;
  v96 = v9;
  v97 = v10;
  v98 = v108;
  v99 = v109;
  v100 = v11;
  v101 = v12;
  v102 = v13;
  v103 = _D3;
  v104 = 0u;
  *(_OWORD *)v105 = 0u;
  *(_OWORD *)v106 = 0u;
  v107 = 0u;
  v19 = sub_2396CF150((uint64_t)&v94, a1, 0, 0);
  if ((_QWORD)v104)
    v20 = v19;
  else
    v20 = 0;
  if ((v20 & 1) == 0)
    goto LABEL_78;
  v88 = v20;
  __p = 0;
  v92 = 0;
  v93 = 0;
  sub_2396D6010((uint64_t)&__p, (uint64_t)v105[0], (uint64_t)v105[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v105[1] - (char *)v105[0]) >> 4));
  v21 = (float *)__p;
  v90 = v92;
  if (__p == v92)
    goto LABEL_67;
  v89 = a3;
  do
  {
    v23 = v21[17];
    if (v23 <= 0.0)
    {
      sub_2396D2D84((const float **)v21, (uint64_t)(v21 + 6), (uint64_t)&v110);
      v24 = v110;
      if (v111)
      {
        v25 = *v110 * *v110;
        if (v111 != 1)
        {
          v26 = v110 + 1;
          v27 = (v111 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
          if (v27 < 7)
            goto LABEL_96;
          v28 = v27 + 1;
          v26 += v28 & 0x7FFFFFFFFFFFFFF8;
          v29 = (float32x4_t *)(v110 + 5);
          v30 = v28 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v31 = vmulq_f32(v29[-1], v29[-1]);
            v32 = vmulq_f32(*v29, *v29);
            v25 = (float)((float)((float)((float)((float)((float)((float)(v25 + v31.f32[0]) + v31.f32[1]) + v31.f32[2])
                                                + v31.f32[3])
                                        + v32.f32[0])
                                + v32.f32[1])
                        + v32.f32[2])
                + v32.f32[3];
            v29 += 2;
            v30 -= 8;
          }
          while (v30);
          if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_96:
            do
            {
              v33 = *v26++;
              v25 = v25 + (float)(v33 * v33);
            }
            while (v26 != &v110[v111]);
          }
        }
      }
      else
      {
        v25 = 0.0;
      }
      v23 = sqrtf(v25 / (float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v21 + 1) - *(_QWORD *)v21) >> 2)));
      v21[17] = v23;
      free(v24);
    }
    v35 = *(const float **)v21;
    v34 = *((_QWORD *)v21 + 1);
    v37 = *(float **)(a2 + 8);
    v36 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v37 < v36)
    {
      *v37 = v23;
      v38 = (uint64_t)(v37 + 1);
      goto LABEL_45;
    }
    v39 = *(float **)a2;
    v40 = (uint64_t)v37 - *(_QWORD *)a2;
    v41 = v40 >> 2;
    v42 = (v40 >> 2) + 1;
    if (v42 >> 62)
      sub_2394189F8();
    v43 = v36 - (_QWORD)v39;
    if (v43 >> 1 > v42)
      v42 = v43 >> 1;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
      v44 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 62)
        goto LABEL_91;
      v45 = operator new(4 * v44);
      v46 = (float *)&v45[4 * v41];
      *v46 = v23;
      v38 = (uint64_t)(v46 + 1);
      if (v37 == v39)
      {
LABEL_37:
        a3 = v89;
        goto LABEL_43;
      }
    }
    else
    {
      v45 = 0;
      v46 = (float *)(4 * v41);
      *(float *)(4 * v41) = v23;
      v38 = 4 * v41 + 4;
      if (v37 == v39)
        goto LABEL_37;
    }
    v47 = (char *)(v37 - 1) - (char *)v39;
    if (v47 < 0x2C)
    {
      a3 = v89;
      do
      {
LABEL_42:
        v56 = *((_DWORD *)v37-- - 1);
        *((_DWORD *)v46-- - 1) = v56;
      }
      while (v37 != v39);
      goto LABEL_43;
    }
    v48 = (char *)v37 - &v45[v40];
    a3 = v89;
    if (v48 < 0x20)
      goto LABEL_42;
    v49 = (v47 >> 2) + 1;
    v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
    v51 = &v37[v50 / 0xFFFFFFFFFFFFFFFCLL];
    v46 = (float *)((char *)v46 - v50);
    v52 = &v45[4 * v41 - 16];
    v53 = v37 - 4;
    v54 = v49 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v55 = *(_OWORD *)v53;
      *(v52 - 1) = *((_OWORD *)v53 - 1);
      *v52 = v55;
      v52 -= 2;
      v53 -= 8;
      v54 -= 8;
    }
    while (v54);
    v37 = v51;
    if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_42;
LABEL_43:
    *(_QWORD *)a2 = v46;
    *(_QWORD *)(a2 + 8) = v38;
    *(_QWORD *)(a2 + 16) = &v45[4 * v44];
    if (v39)
      operator delete(v39);
LABEL_45:
    v57 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (uint64_t)v35) >> 2);
    *(_QWORD *)(a2 + 8) = v38;
    v59 = *(unint64_t **)(a3 + 8);
    v58 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v59 < v58)
    {
      *v59 = v57;
      v22 = (uint64_t)(v59 + 1);
      goto LABEL_11;
    }
    v60 = *(unint64_t **)a3;
    v61 = (uint64_t)v59 - *(_QWORD *)a3;
    v62 = v61 >> 3;
    v63 = (v61 >> 3) + 1;
    if (v63 >> 61)
      sub_2394189F8();
    v64 = v58 - (_QWORD)v60;
    if (v64 >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      if (v65 >> 61)
LABEL_91:
        sub_239418A80();
      v66 = operator new(8 * v65);
      v67 = (unint64_t *)&v66[8 * v62];
      *v67 = v57;
      v22 = (uint64_t)(v67 + 1);
      if (v59 == v60)
      {
LABEL_58:
        a3 = v89;
        goto LABEL_64;
      }
    }
    else
    {
      v66 = 0;
      v67 = (unint64_t *)(8 * v62);
      *(_QWORD *)(8 * v62) = v57;
      v22 = 8 * v62 + 8;
      if (v59 == v60)
        goto LABEL_58;
    }
    v68 = (char *)(v59 - 1) - (char *)v60;
    if (v68 < 0x58)
    {
      a3 = v89;
      do
      {
LABEL_63:
        v77 = *--v59;
        *--v67 = v77;
      }
      while (v59 != v60);
      goto LABEL_64;
    }
    v69 = (char *)v59 - &v66[v61];
    a3 = v89;
    if (v69 < 0x20)
      goto LABEL_63;
    v70 = (v68 >> 3) + 1;
    v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
    v72 = &v59[v71 / 0xFFFFFFFFFFFFFFF8];
    v67 = (unint64_t *)((char *)v67 - v71);
    v73 = &v66[8 * v62 - 16];
    v74 = v59 - 2;
    v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *(_OWORD *)v74;
      *(v73 - 1) = *((_OWORD *)v74 - 1);
      *v73 = v76;
      v73 -= 2;
      v74 -= 4;
      v75 -= 4;
    }
    while (v75);
    v59 = v72;
    if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_63;
LABEL_64:
    *(_QWORD *)a3 = v67;
    *(_QWORD *)(a3 + 8) = v22;
    *(_QWORD *)(a3 + 16) = &v66[8 * v65];
    if (v60)
      operator delete(v60);
LABEL_11:
    *(_QWORD *)(a3 + 8) = v22;
    v21 += 20;
  }
  while (v21 != v90);
  v21 = (float *)__p;
LABEL_67:
  if (v21)
  {
    v78 = v92;
    v79 = v21;
    if (v92 != v21)
    {
      do
      {
        v80 = (void *)*((_QWORD *)v78 - 5);
        if (v80)
        {
          *((_QWORD *)v78 - 4) = v80;
          operator delete(v80);
        }
        v81 = (void *)*((_QWORD *)v78 - 10);
        if (v81)
        {
          *((_QWORD *)v78 - 9) = v81;
          operator delete(v81);
        }
        v78 -= 20;
      }
      while (v78 != v21);
      v79 = __p;
    }
    v92 = v21;
    operator delete(v79);
  }
  v20 = v88;
LABEL_78:
  if (v106[1])
  {
    *(void **)&v107 = v106[1];
    operator delete(v106[1]);
  }
  v82 = (char *)v105[0];
  if (v105[0])
  {
    v83 = (char *)v105[1];
    v84 = v105[0];
    if (v105[1] != v105[0])
    {
      do
      {
        v85 = (void *)*((_QWORD *)v83 - 5);
        if (v85)
        {
          *((_QWORD *)v83 - 4) = v85;
          operator delete(v85);
        }
        v86 = (void *)*((_QWORD *)v83 - 10);
        if (v86)
        {
          *((_QWORD *)v83 - 9) = v86;
          operator delete(v86);
        }
        v83 -= 80;
      }
      while (v83 != v82);
      v84 = v105[0];
    }
    v105[1] = v82;
    operator delete(v84);
  }
  return v20;
}

void sub_2396D3A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2396D3A7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2396D3A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_2396D1EAC((void **)va);
  sub_2396D3A7C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396D3A7C(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = a1[8];
  if (v3)
  {
    v4 = a1[9];
    v5 = (void *)a1[8];
    if (v4 != v3)
    {
      do
      {
        v6 = *(void **)(v4 - 40);
        if (v6)
        {
          *(_QWORD *)(v4 - 32) = v6;
          operator delete(v6);
        }
        v7 = *(void **)(v4 - 80);
        if (v7)
        {
          *(_QWORD *)(v4 - 72) = v7;
          operator delete(v7);
        }
        v4 -= 80;
      }
      while (v4 != v3);
      v5 = (void *)a1[8];
    }
    a1[9] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_2396D3B0C(uint64_t a1, _QWORD *a2, void **a3, int a4, float a5)
{
  int v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  float *v14;
  _QWORD *v15;
  int32x2_t v16;
  _QWORD *v17;
  uint64_t v18;
  float32x4_t *v19;
  float *v20;
  int64_t v21;
  float *v22;
  unint64_t v23;
  unint64_t v24;
  float *v25;
  float v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  int64x2_t v30;
  int8x16_t v31;
  uint64_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int32x4_t v36;
  int8x16_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int32x4_t v40;
  int64x2_t v41;
  float v42;
  char *v43;
  char *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  void *v53;
  _DWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  void *v67;
  _DWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  _BYTE *v79;
  __int16 v80;
  void *v81;
  _BYTE *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  __int16 v87;
  char *v88;
  char *v89;
  __int16 v90;
  char v91;
  uint64_t v92;
  char *v93;
  void *v94;
  char *v95;
  int64_t v96;
  int64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  _DWORD *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _OWORD *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  int v111;
  uint64_t v112;
  const void **v113;
  _QWORD *v114;
  const void *v115;
  _BYTE *v116;
  int64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  __int128 v130;
  __int128 v131;
  char *v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  _DWORD *v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  int v144;
  __int128 v145;
  char *v146;
  __int128 v147;
  char *v148;
  __int128 v149;
  char *v150;
  __int128 v151;
  char *v152;
  __int128 v153;
  void *v154;
  __int128 v155;
  void *v156;
  void *v157;
  char *v158;
  _QWORD *v159;
  void *v160;
  char *v161;
  void *v162;
  void *v163;
  int v164;
  int v165;
  int v166;
  int v167;
  float v170;
  __int128 v171;
  char *v172;
  void *__p[2];
  void *__pa;
  char *v175;
  void *v176[2];
  void *v177;
  void *v178[2];
  char *v179;
  void *v180[2];
  char *v181;
  void *v182[2];
  char *v183;
  void *v184[2];
  char *v185;
  void *v186;
  float *v187;
  float *v188;
  _QWORD v189[3];
  _QWORD *v190;
  unint64_t v191[46];

  v191[44] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
    return 1;
  v5 = a4;
  if (*(_BYTE *)(a1 + 80) || (result = sub_2396E2E90(a1, a2, a4), (_DWORD)result))
  {
    if (v5 <= 0)
      v5 = std::thread::hardware_concurrency();
    sub_2397A2A50((uint64_t)v191, v5, 0);
    v10 = *(_QWORD *)a1;
    v9 = *(_QWORD *)(a1 + 8);
    v187 = 0;
    v188 = 0;
    v186 = 0;
    v11 = v9 - v10;
    v12 = v11 / 12;
    if (v11)
    {
      if (v12 >> 62)
        sub_2394189F8();
      v13 = (char *)operator new(4 * v12);
      v14 = (float *)&v13[4 * v12];
      v186 = v13;
      v188 = v14;
      memset_pattern16(v13, &unk_239ECEF60, 4 * v12);
      v187 = v14;
    }
    v15 = operator new(0x20uLL);
    *v15 = &off_250AE33E0;
    v15[1] = a1;
    v15[2] = &v186;
    v15[3] = a3;
    v190 = v15;
    sub_2397A376C(v191, v12, v189, 0);
    v17 = v190;
    if (v190 == v189)
    {
      v18 = 4;
      v17 = v189;
    }
    else
    {
      if (!v190)
        goto LABEL_14;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_14:
    v19 = (float32x4_t *)v186;
    v20 = v187;
    v21 = ((char *)v187 - (_BYTE *)v186) >> 3;
    v22 = (float *)((char *)v186 + 4 * v21);
    if (v22 != v187)
    {
      sub_2394F1C6C((float *)v186, (float *)v186 + v21, v187);
      v19 = (float32x4_t *)v186;
      v20 = v187;
    }
    *(float *)v16.i32 = *v22 * a5;
    v170 = *(float *)v16.i32;
    v164 = *(unsigned __int8 *)(a1 + 80);
    v165 = *(unsigned __int8 *)(a1 + 144);
    v166 = *(unsigned __int8 *)(a1 + 112);
    v167 = *(unsigned __int8 *)(a1 + 48);
    v184[0] = 0;
    v184[1] = 0;
    v185 = 0;
    v182[0] = 0;
    v182[1] = 0;
    v183 = 0;
    v180[0] = 0;
    v180[1] = 0;
    v181 = 0;
    v178[0] = 0;
    v178[1] = 0;
    v179 = 0;
    v176[0] = 0;
    v176[1] = 0;
    v177 = 0;
    *(_OWORD *)__p = 0uLL;
    v175 = 0;
    v171 = 0uLL;
    v172 = 0;
    if (v19 == (float32x4_t *)v20)
    {
      v24 = 0;
      goto LABEL_32;
    }
    v23 = (char *)v20 - (char *)v19 - 4;
    if (v23 >= 0x1C)
    {
      v27 = (v23 >> 2) + 1;
      v25 = &v19->f32[v27 & 0x7FFFFFFFFFFFFFF8];
      v28 = (float32x4_t)vdupq_lane_s32(v16, 0);
      v29 = v19 + 1;
      v30 = 0uLL;
      v31 = (int8x16_t)vdupq_n_s64(1uLL);
      v32 = v27 & 0x7FFFFFFFFFFFFFF8;
      v33 = 0uLL;
      v34 = 0uLL;
      v35 = 0uLL;
      do
      {
        v36 = vcgtq_f32(v28, v29[-1]);
        v37.i64[0] = v36.u32[0];
        v37.i64[1] = v36.u32[1];
        v38 = (int64x2_t)vandq_s8(v37, v31);
        v37.i64[0] = v36.u32[2];
        v37.i64[1] = v36.u32[3];
        v39 = (int64x2_t)vandq_s8(v37, v31);
        v40 = vcgtq_f32(v28, *v29);
        v37.i64[0] = v40.u32[0];
        v37.i64[1] = v40.u32[1];
        v41 = (int64x2_t)vandq_s8(v37, v31);
        v37.i64[0] = v40.u32[2];
        v37.i64[1] = v40.u32[3];
        v33 = vaddq_s64(v33, v39);
        v30 = vaddq_s64(v30, v38);
        v35 = vaddq_s64(v35, (int64x2_t)vandq_s8(v37, v31));
        v34 = vaddq_s64(v34, v41);
        v29 += 2;
        v32 -= 8;
      }
      while (v32);
      v24 = vaddvq_s64(vaddq_s64(vaddq_s64(v34, v30), vaddq_s64(v35, v33)));
      v26 = v170;
      if (v27 == (v27 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_26:
        if (v24)
        {
          if (v24 > 0x1555555555555555)
            sub_2394189F8();
          v184[0] = operator new(12 * v24);
          v184[1] = v184[0];
          v185 = (char *)v184[0] + 12 * v24;
        }
        if (v164 && v24)
        {
          v182[0] = operator new(12 * v24);
          v182[1] = v182[0];
          v183 = (char *)v182[0] + 12 * v24;
        }
LABEL_32:
        if (v167)
        {
          if (!v24)
            goto LABEL_38;
          v180[0] = operator new(3 * v24);
          v180[1] = v180[0];
          v181 = (char *)v180[0] + 3 * v24;
        }
        if (v165 && v24)
        {
          v178[0] = operator new(4 * v24);
          v178[1] = v178[0];
          v179 = (char *)v178[0] + 4 * v24;
        }
LABEL_38:
        if (v166)
          sub_2395135EC((uint64_t)v176, v24);
        if (v24)
        {
          if (v24 > 0x71C71C71C71C71CLL)
            sub_2394189F8();
          __p[0] = operator new(36 * v24);
          __p[1] = __p[0];
          v175 = (char *)__p[0] + 36 * v24;
        }
        if (v24)
        {
          v43 = (char *)operator new(12 * v24);
          v44 = v43;
          *(_QWORD *)&v171 = v44;
          *((_QWORD *)&v171 + 1) = v44;
          v172 = &v43[12 * v24];
        }
        v46 = (float *)v186;
        v45 = v187;
        if (v187 != v186)
        {
          v47 = 0;
          while (1)
          {
            if (v46[v47] >= v170)
              goto LABEL_49;
            v50 = *(_QWORD *)a1 + 12 * v47;
            v51 = v184[1];
            if (v184[1] >= v185)
            {
              v54 = v184[0];
              v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)v184[1] - (char *)v184[0]) >> 2);
              v56 = v55 + 1;
              if (v55 + 1 > 0x1555555555555555)
                goto LABEL_218;
              if (0x5555555555555556 * ((v185 - (char *)v184[0]) >> 2) > v56)
                v56 = 0x5555555555555556 * ((v185 - (char *)v184[0]) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((v185 - (char *)v184[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v57 = 0x1555555555555555;
              else
                v57 = v56;
              if (v57)
              {
                if (v57 > 0x1555555555555555)
                  goto LABEL_214;
                v58 = (char *)operator new(12 * v57);
              }
              else
              {
                v58 = 0;
              }
              v59 = *(_QWORD *)v50;
              v60 = &v58[12 * v55];
              *((_DWORD *)v60 + 2) = *(_DWORD *)(v50 + 8);
              *(_QWORD *)v60 = v59;
              v61 = v60;
              if (v51 != v54)
              {
                do
                {
                  v62 = *(_QWORD *)(v51 - 3);
                  v51 -= 3;
                  v63 = v51[2];
                  *(_QWORD *)(v61 - 12) = v62;
                  v61 -= 12;
                  *((_DWORD *)v61 + 2) = v63;
                }
                while (v51 != v54);
                v51 = v184[0];
              }
              v53 = v60 + 12;
              v184[0] = v61;
              v184[1] = v60 + 12;
              v185 = &v58[12 * v57];
              if (v51)
                operator delete(v51);
            }
            else
            {
              v52 = *(_QWORD *)v50;
              *((_DWORD *)v184[1] + 2) = *(_DWORD *)(v50 + 8);
              *(_QWORD *)v51 = v52;
              v53 = v51 + 3;
            }
            v184[1] = v53;
            if (v164)
            {
              if (!*(_BYTE *)(a1 + 80))
                goto LABEL_213;
              v64 = *(_QWORD *)(a1 + 56) + 12 * v47;
              v65 = v182[1];
              if (v182[1] >= v183)
              {
                v68 = v182[0];
                v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v182[1] - (char *)v182[0]) >> 2);
                v70 = v69 + 1;
                if (v69 + 1 > 0x1555555555555555)
                  goto LABEL_218;
                if (0x5555555555555556 * ((v183 - (char *)v182[0]) >> 2) > v70)
                  v70 = 0x5555555555555556 * ((v183 - (char *)v182[0]) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((v183 - (char *)v182[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v71 = 0x1555555555555555;
                else
                  v71 = v70;
                if (v71)
                {
                  if (v71 > 0x1555555555555555)
                    goto LABEL_214;
                  v72 = (char *)operator new(12 * v71);
                }
                else
                {
                  v72 = 0;
                }
                v73 = *(_QWORD *)v64;
                v74 = &v72[12 * v69];
                *((_DWORD *)v74 + 2) = *(_DWORD *)(v64 + 8);
                *(_QWORD *)v74 = v73;
                v75 = v74;
                if (v65 != v68)
                {
                  do
                  {
                    v76 = *(_QWORD *)(v65 - 3);
                    v65 -= 3;
                    v77 = v65[2];
                    *(_QWORD *)(v75 - 12) = v76;
                    v75 -= 12;
                    *((_DWORD *)v75 + 2) = v77;
                  }
                  while (v65 != v68);
                  v65 = v182[0];
                }
                v67 = v74 + 12;
                v182[0] = v75;
                v183 = &v72[12 * v71];
                if (v65)
                  operator delete(v65);
              }
              else
              {
                v66 = *(_QWORD *)v64;
                *((_DWORD *)v182[1] + 2) = *(_DWORD *)(v64 + 8);
                *(_QWORD *)v65 = v66;
                v67 = v65 + 3;
              }
              v182[1] = v67;
            }
            if (v167)
            {
              if (!*(_BYTE *)(a1 + 48))
                goto LABEL_213;
              v78 = *(_QWORD *)(a1 + 24) + 3 * v47;
              v79 = v180[1];
              if (v180[1] >= v181)
              {
                v82 = v180[0];
                v83 = 0xAAAAAAAAAAAAAAABLL * ((char *)v180[1] - (char *)v180[0]);
                v84 = v83 + 1;
                if (v83 + 1 >= 0x5555555555555556)
                  sub_2394189F8();
                if (0x5555555555555556 * (v181 - (char *)v180[0]) > v84)
                  v84 = 0x5555555555555556 * (v181 - (char *)v180[0]);
                if (0xAAAAAAAAAAAAAAABLL * (v181 - (char *)v180[0]) >= 0x2AAAAAAAAAAAAAAALL)
                  v85 = 0x5555555555555555;
                else
                  v85 = v84;
                if (v85)
                {
                  if (v85 > 0x5555555555555555)
                    goto LABEL_214;
                  v86 = (char *)operator new(3 * v85);
                }
                else
                {
                  v86 = 0;
                }
                v87 = *(_WORD *)v78;
                v88 = &v86[3 * v83];
                v88[2] = *(_BYTE *)(v78 + 2);
                *(_WORD *)v88 = v87;
                v89 = v88;
                if (v79 != v82)
                {
                  do
                  {
                    v90 = *(_WORD *)(v79 - 3);
                    v79 -= 3;
                    v91 = v79[2];
                    *(_WORD *)(v89 - 3) = v90;
                    v89 -= 3;
                    v89[2] = v91;
                  }
                  while (v79 != v82);
                  v79 = v180[0];
                }
                v81 = v88 + 3;
                v180[0] = v89;
                v181 = &v86[3 * v85];
                if (v79)
                  operator delete(v79);
              }
              else
              {
                v80 = *(_WORD *)v78;
                *((_BYTE *)v180[1] + 2) = *(_BYTE *)(v78 + 2);
                *(_WORD *)v79 = v80;
                v81 = v79 + 3;
              }
              v180[1] = v81;
            }
            if (v165)
              break;
LABEL_133:
            if (v166)
            {
              if (!*(_BYTE *)(a1 + 112))
LABEL_213:
                sub_2394875CC();
              v112 = *(_QWORD *)(a1 + 88);
              v113 = (const void **)(v112 + 24 * v47);
              v114 = v176[1];
              if (v176[1] >= v177)
              {
                v120 = sub_2395BB144((char **)v176, (uint64_t)v113);
              }
              else
              {
                *(_QWORD *)v176[1] = 0;
                v114[1] = 0;
                v114[2] = 0;
                v115 = *v113;
                v116 = *(_BYTE **)(v112 + 24 * v47 + 8);
                v117 = v116 - (_BYTE *)*v113;
                if (v116 != *v113)
                {
                  if (v117 < 0)
                    sub_2394189F8();
                  v118 = (char *)operator new(v116 - (_BYTE *)*v113);
                  *v114 = v118;
                  v114[1] = v118;
                  v119 = &v118[4 * (v117 >> 2)];
                  v114[2] = v119;
                  memcpy(v118, v115, v117);
                  v114[1] = v119;
                }
                v120 = (char *)(v114 + 3);
              }
              v176[1] = v120;
            }
            v121 = *a2 + 36 * v47;
            v122 = (char *)__p[1];
            if (__p[1] >= v175)
            {
              v126 = 0x8E38E38E38E38E39 * (((char *)__p[1] - (char *)__p[0]) >> 2) + 1;
              if (v126 > 0x71C71C71C71C71CLL)
                sub_2394189F8();
              if (0x1C71C71C71C71C72 * ((v175 - (char *)__p[0]) >> 2) > v126)
                v126 = 0x1C71C71C71C71C72 * ((v175 - (char *)__p[0]) >> 2);
              if (0x8E38E38E38E38E39 * ((v175 - (char *)__p[0]) >> 2) >= 0x38E38E38E38E38ELL)
                v127 = 0x71C71C71C71C71CLL;
              else
                v127 = v126;
              if (v127)
              {
                if (v127 > 0x71C71C71C71C71CLL)
                  goto LABEL_214;
                v128 = (char *)operator new(36 * v127);
              }
              else
              {
                v128 = 0;
              }
              v129 = &v128[4 * (((char *)__p[1] - (char *)__p[0]) >> 2)];
              v130 = *(_OWORD *)v121;
              v131 = *(_OWORD *)(v121 + 16);
              *((_DWORD *)v129 + 8) = *(_DWORD *)(v121 + 32);
              *(_OWORD *)v129 = v130;
              *((_OWORD *)v129 + 1) = v131;
              v132 = v129;
              if (__p[1] != __p[0])
              {
                do
                {
                  v133 = *(_OWORD *)(v122 - 36);
                  v134 = *(_OWORD *)(v122 - 20);
                  *((_DWORD *)v132 - 1) = *((_DWORD *)v122 - 1);
                  *(_OWORD *)(v132 - 20) = v134;
                  *(_OWORD *)(v132 - 36) = v133;
                  v132 -= 36;
                  v122 -= 36;
                }
                while (v122 != __p[0]);
                v122 = (char *)__p[0];
              }
              v125 = (uint64_t)(v129 + 36);
              __p[0] = v132;
              v175 = &v128[36 * v127];
              if (v122)
                operator delete(v122);
            }
            else
            {
              v123 = *(_OWORD *)v121;
              v124 = *(_OWORD *)(v121 + 16);
              *((_DWORD *)__p[1] + 8) = *(_DWORD *)(v121 + 32);
              *(_OWORD *)__p[1] = v123;
              *((_OWORD *)__p[1] + 1) = v124;
              v125 = (uint64_t)__p[1] + 36;
            }
            __p[1] = (void *)v125;
            v135 = (uint64_t)*a3 + 12 * v47;
            v136 = (_DWORD *)*((_QWORD *)&v171 + 1);
            if (*((_QWORD *)&v171 + 1) < (unint64_t)v172)
            {
              v48 = *(_QWORD *)v135;
              *(_DWORD *)(*((_QWORD *)&v171 + 1) + 8) = *(_DWORD *)(v135 + 8);
              **((_QWORD **)&v171 + 1) = v48;
              v49 = *((_QWORD *)&v171 + 1) + 12;
            }
            else
            {
              v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v171 + 1) - v171) >> 2) + 1;
              if (v137 > 0x1555555555555555)
LABEL_218:
                sub_2394189F8();
              if (0x5555555555555556 * ((uint64_t)&v172[-v171] >> 2) > v137)
                v137 = 0x5555555555555556 * ((uint64_t)&v172[-v171] >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v172[-v171] >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v138 = 0x1555555555555555;
              else
                v138 = v137;
              if (v138)
              {
                if (v138 > 0x1555555555555555)
LABEL_214:
                  sub_239418A80();
                v139 = (char *)operator new(12 * v138);
              }
              else
              {
                v139 = 0;
              }
              v140 = *(_QWORD *)v135;
              v141 = &v139[4 * ((uint64_t)(*((_QWORD *)&v171 + 1) - v171) >> 2)];
              *((_DWORD *)v141 + 2) = *(_DWORD *)(v135 + 8);
              *(_QWORD *)v141 = v140;
              v142 = v141;
              if (*((_QWORD *)&v171 + 1) != (_QWORD)v171)
              {
                do
                {
                  v143 = *(_QWORD *)(v136 - 3);
                  v136 -= 3;
                  v144 = v136[2];
                  *(_QWORD *)(v142 - 12) = v143;
                  v142 -= 12;
                  *((_DWORD *)v142 + 2) = v144;
                }
                while (v136 != (_DWORD *)v171);
                v136 = (_DWORD *)v171;
              }
              v49 = (uint64_t)(v141 + 12);
              *(_QWORD *)&v171 = v142;
              v172 = &v139[12 * v138];
              if (v136)
                operator delete(v136);
            }
            *((_QWORD *)&v171 + 1) = v49;
            v46 = (float *)v186;
            v45 = v187;
LABEL_49:
            if (++v47 >= (unint64_t)(v45 - v46))
              goto LABEL_175;
          }
          if (!*(_BYTE *)(a1 + 144))
            goto LABEL_213;
          v92 = *(_QWORD *)(a1 + 120);
          v93 = (char *)v178[1];
          if (v178[1] < v179)
          {
            *(_DWORD *)v178[1] = *(_DWORD *)(v92 + 4 * v47);
            v94 = v93 + 4;
LABEL_132:
            v178[1] = v94;
            goto LABEL_133;
          }
          v95 = (char *)v178[0];
          v96 = (char *)v178[1] - (char *)v178[0];
          v97 = ((char *)v178[1] - (char *)v178[0]) >> 2;
          v98 = v97 + 1;
          if ((unint64_t)(v97 + 1) >> 62)
            sub_2394189F8();
          v99 = v179 - (char *)v178[0];
          if ((v179 - (char *)v178[0]) >> 1 > v98)
            v98 = v99 >> 1;
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
            v100 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v100 = v98;
          if (v100)
          {
            if (v100 >> 62)
              goto LABEL_214;
            v101 = operator new(4 * v100);
            v102 = &v101[4 * v97];
            *v102 = *(_DWORD *)(v92 + 4 * v47);
            v94 = v102 + 1;
            if (v93 == v95)
              goto LABEL_130;
          }
          else
          {
            v101 = 0;
            v102 = (_DWORD *)(4 * v97);
            *(_DWORD *)(4 * v97) = *(_DWORD *)(v92 + 4 * v47);
            v94 = (void *)(4 * v97 + 4);
            if (v93 == v95)
            {
LABEL_130:
              v178[0] = v102;
              v179 = &v101[4 * v100];
              if (v95)
                operator delete(v95);
              goto LABEL_132;
            }
          }
          v103 = v93 - 4 - v95;
          if (v103 < 0x2C)
            goto LABEL_228;
          if ((unint64_t)(v93 - &v101[v96]) < 0x20)
            goto LABEL_228;
          v104 = (v103 >> 2) + 1;
          v105 = 4 * (v104 & 0x7FFFFFFFFFFFFFF8);
          v106 = &v93[-v105];
          v102 = (_DWORD *)((char *)v102 - v105);
          v107 = &v101[4 * v97 - 16];
          v108 = v93 - 16;
          v109 = v104 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v110 = *(_OWORD *)v108;
            *(v107 - 1) = *((_OWORD *)v108 - 1);
            *v107 = v110;
            v107 -= 2;
            v108 -= 32;
            v109 -= 8;
          }
          while (v109);
          v93 = v106;
          if (v104 != (v104 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_228:
            do
            {
              v111 = *((_DWORD *)v93 - 1);
              v93 -= 4;
              *--v102 = v111;
            }
            while (v93 != v95);
          }
          goto LABEL_130;
        }
LABEL_175:
        v145 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v184;
        *(_OWORD *)v184 = v145;
        v146 = *(char **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v185;
        v185 = v146;
        if (v164)
        {
          if (!*(_BYTE *)(a1 + 80))
            goto LABEL_221;
          v147 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)(a1 + 56) = *(_OWORD *)v182;
          *(_OWORD *)v182 = v147;
          v148 = *(char **)(a1 + 72);
          *(_QWORD *)(a1 + 72) = v183;
          v183 = v148;
        }
        if (v167)
        {
          if (!*(_BYTE *)(a1 + 48))
            goto LABEL_221;
          v149 = *(_OWORD *)(a1 + 24);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)v180;
          *(_OWORD *)v180 = v149;
          v150 = *(char **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v181;
          v181 = v150;
        }
        if (v165)
        {
          if (!*(_BYTE *)(a1 + 144))
            goto LABEL_221;
          v151 = *(_OWORD *)(a1 + 120);
          *(_OWORD *)(a1 + 120) = *(_OWORD *)v178;
          *(_OWORD *)v178 = v151;
          v152 = *(char **)(a1 + 136);
          *(_QWORD *)(a1 + 136) = v179;
          v179 = v152;
        }
        if (!v166)
          goto LABEL_187;
        if (*(_BYTE *)(a1 + 112))
        {
          v153 = *(_OWORD *)(a1 + 88);
          *(_OWORD *)(a1 + 88) = *(_OWORD *)v176;
          *(_OWORD *)v176 = v153;
          v154 = *(void **)(a1 + 104);
          *(_QWORD *)(a1 + 104) = v177;
          v177 = v154;
LABEL_187:
          v155 = *(_OWORD *)a2;
          *(_OWORD *)a2 = *(_OWORD *)__p;
          __pa = (void *)v155;
          a2[2] = v175;
          v156 = *a3;
          *(_OWORD *)a3 = v171;
          a3[2] = v172;
          if (v156)
          {
            operator delete(v156);
            v157 = __pa;
            if (!__pa)
            {
LABEL_190:
              v158 = (char *)v176[0];
              if (v176[0])
              {
                v159 = v176[1];
                v160 = v176[0];
                if (v176[1] != v176[0])
                {
                  v161 = (char *)v176[1];
                  do
                  {
                    v163 = (void *)*((_QWORD *)v161 - 3);
                    v161 -= 24;
                    v162 = v163;
                    if (v163)
                    {
                      *(v159 - 2) = v162;
                      operator delete(v162);
                    }
                    v159 = v161;
                  }
                  while (v161 != v158);
                  v160 = v176[0];
                }
                v176[1] = v158;
                operator delete(v160);
              }
              if (v178[0])
                operator delete(v178[0]);
              if (v180[0])
                operator delete(v180[0]);
              if (v182[0])
                operator delete(v182[0]);
              if (v184[0])
              {
                v184[1] = v184[0];
                operator delete(v184[0]);
              }
              if (v186)
              {
                v187 = (float *)v186;
                operator delete(v186);
              }
              sub_2397A2E14(v191);
              return 1;
            }
          }
          else
          {
            v157 = (void *)v155;
            if (!(_QWORD)v155)
              goto LABEL_190;
          }
          operator delete(v157);
          goto LABEL_190;
        }
LABEL_221:
        sub_2394875CC();
      }
    }
    else
    {
      v24 = 0;
      v25 = (float *)v19;
      v26 = *(float *)v16.i32;
    }
    do
    {
      v42 = *v25++;
      if (v26 > v42)
        ++v24;
    }
    while (v25 != v20);
    goto LABEL_26;
  }
  return result;
}

void sub_2396D4A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (__p)
    operator delete(__p);
  sub_2397A2E14(&a49);
  _Unwind_Resume(a1);
}

void sub_2396D4B7C(float *a1, uint64_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  uint64_t v6;
  const float *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t __Y;
  __int32 v13;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(const float **)(v6 + 8);
  if (&v7[-*(unsigned int *)(v6 + 16)] == a1)
  {
    sub_2396D4B7C(&__Y);
    *(_DWORD *)a1 = __Y;
  }
  else if (*(_DWORD *)v6)
  {
    v8 = **(uint64_t ***)(a2 + 8);
    v10 = *v8;
    v9 = v8[1];
    a3.i64[0] = *(_QWORD *)v10;
    a3.i32[2] = *(_DWORD *)(v10 + 8);
    a5.i64[0] = *(_QWORD *)v9;
    a5.i32[2] = *(_DWORD *)(v9 + 8);
    v11 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(a3, a3, 0xCuLL), a3, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a5, a5), (int8x16_t)a5, 0xCuLL)), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), a3, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a5, (int8x16_t)a5, 0xCuLL), (int8x16_t)a5, 8uLL)));
    v13 = v11.i32[2];
    __Y = v11.i64[0];
    sub_239A22DC0(1, 3, 1, (const float *)&__Y, 3, v7, 1, a1, *(float *)(a2 + 24), 0.0, 1);
  }
  else
  {
    *a1 = 0.0;
  }
}

uint64_t *sub_2396D4C7C(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  BOOL v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t *v79;
  uint64_t *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  float v92;
  uint64_t v93;
  float v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  int64_t v115;
  uint64_t v116;
  int64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float v148;
  uint64_t v149;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v87 = *(a2 - 1);
        v88 = *v10;
        if (*(float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 4 * v87) < *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 8)
                                                                                               + 4
                                                                                               * *v10))
        {
          *v10 = v87;
          goto LABEL_166;
        }
        return result;
      case 3:
        v89 = *(_QWORD *)(*(_QWORD *)a3 + 8);
        v88 = *v10;
        v90 = v10[1];
        v91 = *(float *)(v89 + 4 * v90);
        v92 = *(float *)(v89 + 4 * *v10);
        v93 = *(a2 - 1);
        v94 = *(float *)(v89 + 4 * v93);
        if (v91 >= v92)
        {
          if (v94 < v91)
          {
            v10[1] = v93;
            *(a2 - 1) = v90;
            v104 = *v10;
            v100 = v10[1];
            v102 = *(float *)(v89 + 4 * v100);
            goto LABEL_155;
          }
        }
        else
        {
          if (v94 >= v91)
          {
            *v10 = v90;
            v10[1] = v88;
            v149 = *(a2 - 1);
            if (*(float *)(v89 + 4 * v149) >= v92)
              return result;
            v10[1] = v149;
          }
          else
          {
            *v10 = v93;
          }
LABEL_166:
          *(a2 - 1) = v88;
        }
        return result;
      case 4:
        return sub_2396D5A48(v10, v10 + 1, v10 + 2, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 8));
      case 5:
        v95 = v10 + 1;
        v96 = v10 + 2;
        v97 = v10 + 3;
        result = sub_2396D5A48(v9, v9 + 1, v9 + 2, v9 + 3, *(_QWORD *)(*(_QWORD *)a3 + 8));
        v98 = *(a2 - 1);
        v99 = v9[3];
        v89 = *(_QWORD *)(*(_QWORD *)a3 + 8);
        if (*(float *)(v89 + 4 * v98) < *(float *)(v89 + 4 * v99))
        {
          *v97 = v98;
          *(a2 - 1) = v99;
          v100 = *v97;
          v101 = *v96;
          v102 = *(float *)(v89 + 4 * *v97);
          if (v102 < *(float *)(v89 + 4 * *v96))
          {
            *v96 = v100;
            *v97 = v101;
            v103 = *v95;
            if (v102 < *(float *)(v89 + 4 * *v95))
            {
              v9[1] = v100;
              v9[2] = v103;
              v104 = *v9;
LABEL_155:
              if (v102 < *(float *)(v89 + 4 * v104))
              {
                *v9 = v100;
                v9[1] = v104;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v115 = (unint64_t)(v12 - 2) >> 1;
              v116 = *(_QWORD *)a3;
              v117 = v115;
              do
              {
                if (v115 >= v117)
                {
                  v119 = (2 * v117) | 1;
                  v120 = &v10[v119];
                  if (2 * v117 + 2 >= v12)
                  {
                    v121 = *(_QWORD *)(v116 + 8);
                  }
                  else
                  {
                    v121 = *(_QWORD *)(v116 + 8);
                    if (*(float *)(v121 + 4 * *(unsigned int *)v120) < *(float *)(v121
                                                                                   + 4 * *((unsigned int *)v120 + 2)))
                    {
                      ++v120;
                      v119 = 2 * v117 + 2;
                    }
                  }
                  result = &v10[v117];
                  v122 = *v120;
                  v123 = *result;
                  v124 = *(float *)(v121 + 4 * *result);
                  if (*(float *)(v121 + 4 * *v120) >= v124)
                  {
                    do
                    {
                      v125 = v120;
                      *result = v122;
                      if (v115 < v119)
                        break;
                      v126 = 2 * v119;
                      v119 = (2 * v119) | 1;
                      v120 = &v10[v119];
                      v127 = v126 + 2;
                      if (v127 < v12
                        && *(float *)(v121 + 4 * *(unsigned int *)v120) < *(float *)(v121
                                                                                     + 4 * *((unsigned int *)v120 + 2)))
                      {
                        ++v120;
                        v119 = v127;
                      }
                      v122 = *v120;
                      result = v125;
                    }
                    while (*(float *)(v121 + 4 * *v120) >= v124);
                    *v125 = v123;
                    v116 = *(_QWORD *)a3;
                  }
                }
                v118 = v117-- <= 0;
              }
              while (!v118);
              v128 = (unint64_t)v11 >> 3;
              do
              {
                v129 = 0;
                v130 = *v10;
                v131 = *(_QWORD *)a3;
                v132 = v10;
                do
                {
                  v133 = v132;
                  v132 += v129 + 1;
                  v134 = 2 * v129;
                  v129 = (2 * v129) | 1;
                  v135 = v134 + 2;
                  if (v135 < v128)
                  {
                    result = (uint64_t *)*((unsigned int *)v132 + 2);
                    if (*(float *)(*(_QWORD *)(v131 + 8) + 4 * *(unsigned int *)v132) < *(float *)(*(_QWORD *)(v131 + 8) + 4 * (_QWORD)result))
                    {
                      ++v132;
                      v129 = v135;
                    }
                  }
                  *v133 = *v132;
                }
                while (v129 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
                if (v132 == --a2)
                {
                  *v132 = v130;
                }
                else
                {
                  *v132 = *a2;
                  *a2 = v130;
                  v136 = (char *)v132 - (char *)v10 + 8;
                  if (v136 >= 9)
                  {
                    v137 = (((unint64_t)v136 >> 3) - 2) >> 1;
                    v138 = &v10[v137];
                    v139 = *v138;
                    v140 = *v132;
                    v141 = *(_QWORD *)(*(_QWORD *)a3 + 8);
                    v142 = *(float *)(v141 + 4 * *v132);
                    if (*(float *)(v141 + 4 * *v138) < v142)
                    {
                      do
                      {
                        v143 = v138;
                        *v132 = v139;
                        if (!v137)
                          break;
                        v137 = (v137 - 1) >> 1;
                        v138 = &v10[v137];
                        v139 = *v138;
                        v132 = v143;
                      }
                      while (*(float *)(v141 + 4 * *v138) < v142);
                      *v143 = v140;
                    }
                  }
                }
                v118 = v128-- <= 2;
              }
              while (!v118);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = *(_QWORD *)(*(_QWORD *)a3 + 8);
          v16 = *(a2 - 1);
          v17 = *(float *)(v15 + 4 * v16);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(float *)(v15 + 4 * *v10);
            v25 = *(float *)(v15 + 4 * *v14);
            if (v24 >= v25)
            {
              if (v17 < v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(float *)(v15 + 4 * *v10) < *(float *)(v15 + 4 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 >= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(float *)(v15 + 4 * v40) >= v25)
                goto LABEL_32;
              *v10 = v40;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(float *)(v15 + 4 * *v14);
          v21 = *(float *)(v15 + 4 * *v10);
          if (v20 >= v21)
          {
            if (v17 < v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(float *)(v15 + 4 * *v14) < *(float *)(v15 + 4 * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 >= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(float *)(v15 + 4 * v29) >= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(float *)(v15 + 4 * v33);
          v36 = *(float *)(v15 + 4 * v34);
          v37 = *(a2 - 2);
          v38 = *(float *)(v15 + 4 * v37);
          if (v35 >= v36)
          {
            if (v38 < v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(float *)(v15 + 4 * *v31) < *(float *)(v15 + 4 * v39))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v41 = *(a2 - 2);
              if (*(float *)(v15 + 4 * v41) >= v36)
                goto LABEL_37;
              *v31 = v41;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v42 = &v10[v13];
          v45 = v42[1];
          v43 = v42 + 1;
          v44 = v45;
          v46 = v10[2];
          v47 = *(float *)(v15 + 4 * v45);
          v48 = *(float *)(v15 + 4 * v46);
          v49 = *(a2 - 3);
          v50 = *(float *)(v15 + 4 * v49);
          if (v47 >= v48)
          {
            if (v50 < v47)
            {
              *v43 = v49;
              *(a2 - 3) = v44;
              v51 = v10[2];
              if (*(float *)(v15 + 4 * *v43) < *(float *)(v15 + 4 * v51))
              {
                v10[2] = *v43;
                *v43 = v51;
              }
            }
          }
          else
          {
            if (v50 >= v47)
            {
              v10[2] = v44;
              *v43 = v46;
              v52 = *(a2 - 3);
              if (*(float *)(v15 + 4 * v52) >= v48)
                goto LABEL_46;
              *v43 = v52;
            }
            else
            {
              v10[2] = v49;
            }
            *(a2 - 3) = v46;
          }
LABEL_46:
          v53 = *v14;
          v54 = *v31;
          v55 = *(float *)(v15 + 4 * *v14);
          v56 = *(float *)(v15 + 4 * *v31);
          v57 = *v43;
          v58 = *(float *)(v15 + 4 * *v43);
          if (v55 < v56)
          {
            if (v58 >= v55)
            {
              *v31 = v53;
              *v14 = v54;
              v31 = v14;
              v53 = v57;
              if (v58 >= v56)
              {
                v59 = *v10;
                *v10 = v54;
                *v14 = v59;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v58 >= v55)
            goto LABEL_54;
          *v14 = v57;
          *v43 = v53;
          v43 = v14;
          v53 = v54;
          if (v58 < v56)
          {
LABEL_53:
            *v31 = v57;
            *v43 = v54;
LABEL_54:
            v60 = *v10;
            *v10 = v53;
            *v14 = v60;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            v61 = *(float *)(v15 + 4 * v28);
            if (*(float *)(v15 + 4 * *((unsigned int *)v10 - 2)) < v61)
              goto LABEL_56;
            if (v61 >= *(float *)(v15 + 4 * *((unsigned int *)a2 - 2)))
            {
              v79 = v10 + 1;
              do
              {
                v10 = v79;
                if (v79 >= a2)
                  break;
                ++v79;
              }
              while (v61 >= *(float *)(v15 + 4 * *(unsigned int *)v10));
            }
            else
            {
              do
                v78 = *((_DWORD *)v10++ + 2);
              while (v61 >= *(float *)(v15 + 4 * v78));
            }
            v80 = a2;
            if (v10 < a2)
            {
              v80 = a2;
              do
                v81 = *((_DWORD *)v80-- - 2);
              while (v61 < *(float *)(v15 + 4 * v81));
            }
            if (v10 < v80)
            {
              v82 = *v10;
              v83 = *v80;
              do
              {
                *v10 = v83;
                *v80 = v82;
                do
                {
                  v84 = v10[1];
                  ++v10;
                  v82 = v84;
                }
                while (v61 >= *(float *)(v15 + 4 * v84));
                do
                {
                  v85 = *--v80;
                  v83 = v85;
                }
                while (v61 < *(float *)(v15 + 4 * v85));
              }
              while (v10 < v80);
            }
            v86 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v86;
            a5 = 0;
            *v86 = v28;
            continue;
          }
          v77 = *v10;
          *v10 = v57;
          *v14 = v77;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v62 = 0;
          v63 = *(_QWORD *)(*(_QWORD *)a3 + 8);
          v64 = *(float *)(v63 + 4 * v28);
          do
            v65 = v10[++v62];
          while (*(float *)(v63 + 4 * v65) < v64);
          v66 = &v10[v62];
          v67 = a2;
          if (v62 == 1)
          {
            v67 = a2;
            do
            {
              if (v66 >= v67)
                break;
              v69 = *((_DWORD *)v67-- - 2);
            }
            while (*(float *)(v63 + 4 * v69) >= v64);
          }
          else
          {
            do
              v68 = *((_DWORD *)v67-- - 2);
            while (*(float *)(v63 + 4 * v68) >= v64);
          }
          if (v66 >= v67)
          {
            v75 = v66 - 1;
            if (v66 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v70 = *v67;
            v71 = &v10[v62];
            v72 = v67;
            do
            {
              *v71 = v70;
              *v72 = v65;
              do
              {
                v73 = v71[1];
                ++v71;
                v65 = v73;
              }
              while (*(float *)(v63 + 4 * v73) < v64);
              do
              {
                v74 = *--v72;
                v70 = v74;
              }
              while (*(float *)(v63 + 4 * v74) >= v64);
            }
            while (v71 < v72);
            v75 = v71 - 1;
            if (v71 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v75;
          }
LABEL_74:
          *v75 = v28;
          if (v66 < v67)
            goto LABEL_77;
          v76 = sub_2396D56D4(v10, v75, a3);
          v10 = v75 + 1;
          result = (uint64_t *)sub_2396D56D4(v75 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v76)
              continue;
LABEL_77:
            result = (uint64_t *)sub_2396D4C7C(v9, v75, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v75 + 1;
            continue;
          }
          a2 = v75;
          if (v76)
            return result;
          goto LABEL_2;
        }
        v105 = *(_QWORD *)a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v106 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v107 = 0;
              v108 = *(_QWORD *)(v105 + 8);
              v109 = v10;
              do
              {
                v112 = *v109;
                v111 = v109[1];
                v109 = v106;
                v113 = *(float *)(v108 + 4 * v111);
                if (v113 < *(float *)(v108 + 4 * v112))
                {
                  v114 = v107;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v114 + 8) = v112;
                    if (!v114)
                    {
                      v110 = v10;
                      goto LABEL_116;
                    }
                    v112 = *(uint64_t *)((char *)v10 + v114 - 8);
                    v114 -= 8;
                  }
                  while (v113 < *(float *)(v108 + 4 * v112));
                  v110 = (uint64_t *)((char *)v10 + v114 + 8);
LABEL_116:
                  *v110 = v111;
                }
                v106 = v109 + 1;
                v107 += 8;
              }
              while (v109 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v144 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v145 = *(_QWORD *)(v105 + 8);
            do
            {
              v147 = *v9;
              v146 = v9[1];
              v9 = v144;
              v148 = *(float *)(v145 + 4 * v146);
              if (v148 < *(float *)(v145 + 4 * v147))
              {
                do
                {
                  *v144 = v147;
                  v147 = *(v144 - 2);
                  --v144;
                }
                while (v148 < *(float *)(v145 + 4 * v147));
                *v144 = v146;
              }
              v144 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_2396D56D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 4 * v8) < *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 8)
                                                                                            + 4 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      v11 = *a1;
      v12 = a1[1];
      v13 = *(float *)(v10 + 4 * v12);
      v14 = *(float *)(v10 + 4 * *a1);
      v15 = *(a2 - 1);
      v16 = *(float *)(v10 + 4 * v15);
      if (v13 >= v14)
      {
        if (v16 < v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          v39 = *a1;
          v38 = a1[1];
          if (*(float *)(v10 + 4 * v38) < *(float *)(v10 + 4 * *a1))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 >= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        v48 = *(a2 - 1);
        if (*(float *)(v10 + 4 * v48) < v14)
        {
          a1[1] = v48;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      sub_2396D5A48(a1, a1 + 1, a1 + 2, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 8));
      return 1;
    case 5:
      v27 = a1 + 1;
      v28 = a1 + 2;
      v29 = a1 + 3;
      sub_2396D5A48(a1, a1 + 1, a1 + 2, a1 + 3, *(_QWORD *)(*(_QWORD *)a3 + 8));
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      if (*(float *)(v32 + 4 * v30) >= *(float *)(v32 + 4 * v31))
        return 1;
      *v29 = v30;
      *(a2 - 1) = v31;
      v33 = *v29;
      v34 = *v28;
      v35 = *(float *)(v32 + 4 * *v29);
      if (v35 >= *(float *)(v32 + 4 * *v28))
        return 1;
      *v28 = v33;
      *v29 = v34;
      v36 = *v27;
      if (v35 >= *(float *)(v32 + 4 * *v27))
        return 1;
      a1[1] = v33;
      a1[2] = v36;
      v37 = *a1;
      if (v35 >= *(float *)(v32 + 4 * *a1))
        return 1;
      *a1 = v33;
      a1[1] = v37;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      v21 = *(float *)(v20 + 4 * v19);
      v22 = *a1;
      v23 = *(float *)(v20 + 4 * *a1);
      v24 = *(float *)(v20 + 4 * v17);
      if (v21 < v23)
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 >= v21)
        {
          *a1 = v19;
          a1[1] = v22;
          v25 = a1 + 1;
          v26 = a1 + 2;
          if (v24 >= v23)
            goto LABEL_25;
        }
LABEL_24:
        *v25 = v17;
        *v26 = v22;
        goto LABEL_25;
      }
      if (v24 < v21)
      {
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
        if (v24 < v23)
          goto LABEL_24;
      }
LABEL_25:
      v40 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v41 = 0;
      for (i = 24; ; i += 8)
      {
        v43 = *v40;
        v44 = *v18;
        v45 = *(float *)(v20 + 4 * *v40);
        if (v45 < *(float *)(v20 + 4 * v44))
          break;
LABEL_34:
        v18 = v40++;
        if (v40 == a2)
          return 1;
      }
      v46 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v46) = v44;
        v47 = v46 - 8;
        if (v46 == 8)
        {
          *a1 = v43;
          if (++v41 != 8)
            goto LABEL_34;
          return v40 + 1 == a2;
        }
        v44 = *(uint64_t *)((char *)a1 + v46 - 16);
        v46 -= 8;
      }
      while (v45 < *(float *)(v20 + 4 * v44));
      *(uint64_t *)((char *)a1 + v47) = v43;
      if (++v41 != 8)
        goto LABEL_34;
      return v40 + 1 == a2;
  }
}

uint64_t *sub_2396D5A48(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  v6 = *result;
  v7 = *(float *)(a5 + 4 * *a2);
  v8 = *(float *)(a5 + 4 * *result);
  v9 = *a3;
  v10 = *(float *)(a5 + 4 * *a3);
  if (v7 < v8)
  {
    if (v10 < v7)
    {
      *result = v9;
      goto LABEL_10;
    }
    *result = v5;
    *a2 = v6;
    v9 = *a3;
    if (*(float *)(a5 + 4 * *a3) < v8)
    {
      *a2 = v9;
LABEL_10:
      *a3 = v6;
      v9 = v6;
      v12 = *a4;
      if (*(float *)(a5 + 4 * *a4) >= *(float *)(a5 + 4 * v6))
        return result;
      goto LABEL_15;
    }
LABEL_12:
    v12 = *a4;
    if (*(float *)(a5 + 4 * *a4) >= *(float *)(a5 + 4 * v9))
      return result;
    goto LABEL_15;
  }
  if (v10 >= v7)
    goto LABEL_12;
  *a2 = v9;
  *a3 = v5;
  v11 = *result;
  if (*(float *)(a5 + 4 * *a2) >= *(float *)(a5 + 4 * *result))
  {
    v13 = v5;
    v9 = v5;
    v12 = *a4;
    if (*(float *)(a5 + 4 * *a4) >= *(float *)(a5 + 4 * v13))
      return result;
  }
  else
  {
    *result = *a2;
    *a2 = v11;
    v9 = *a3;
    v12 = *a4;
    if (*(float *)(a5 + 4 * *a4) >= *(float *)(a5 + 4 * *a3))
      return result;
  }
LABEL_15:
  *a3 = v12;
  *a4 = v9;
  v14 = *a2;
  if (*(float *)(a5 + 4 * *a3) < *(float *)(a5 + 4 * *a2))
  {
    *a2 = *a3;
    *a3 = v14;
    v15 = *result;
    if (*(float *)(a5 + 4 * *a2) < *(float *)(a5 + 4 * *result))
    {
      *result = *a2;
      *a2 = v15;
    }
  }
  return result;
}

_QWORD *sub_2396D5B90(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2396D5E9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2396D5EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float *v5;
  uint64_t v6;
  const float *v7;
  int v8;
  size_t v9;
  float *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;
  void *v16;
  size_t v17;
  int v18;
  void *memptr;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(float **)a1;
  if (*(_QWORD *)v4 == *(_QWORD *)a1
    || (v6 = *(_QWORD *)(a2 + 16), v7 = *(const float **)(v6 + 8), &v7[-*(unsigned int *)(v6 + 16)] == v5))
  {
    v9 = (4 * *(unsigned int *)(v4 + 16) + 31) & 0x7FFFFFFE0;
    v17 = v9 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v9, 0x100BBD03uLL);
    v16 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v15 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v15, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v18 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    sub_2396D5EB0(&v16, a2);
    v10 = *(float **)a1;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v17;
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v12;
    v16 = v10;
    v17 = v11;
    *(_DWORD *)(a1 + 16) = v18;
    v18 = 0;
    free(v10);
  }
  else
  {
    v8 = *(_DWORD *)(v4 + 16);
    if (v8 && *(_DWORD *)v6)
    {
      sub_239A22DC0(0, v8, 3, *(const float **)v4, v8, v7, 1, v5, *(float *)(a2 + 24), 0.0, 1);
    }
    else
    {
      v13 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v13)
        bzero(*(void **)a1, 4 * v13);
    }
  }
}

void sub_2396D5FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  free(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_2396D6010(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x333333333333334)
      sub_2394189F8();
    result = (uint64_t)operator new(80 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 80 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_2396D61AC(v8 + v9, a2 + v9);
        v9 += 80;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_2396D60CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2396D6108(&a9);
  _Unwind_Resume(a1);
}

void sub_2396D60E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (v11)
    sub_239EC19C8();
  *(_QWORD *)(v9 + 8) = v10;
  sub_2396D6108(&a9);
  _Unwind_Resume(a1);
}

void ***sub_2396D6108(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 5);
          if (v6)
          {
            *((_QWORD *)v4 - 4) = v6;
            operator delete(v6);
          }
          v7 = (void *)*((_QWORD *)v4 - 10);
          if (v7)
          {
            *((_QWORD *)v4 - 9) = v7;
            operator delete(v7);
          }
          v4 -= 80;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2396D61AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  size_t v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  uint64_t v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) > 0x1555555555555555)
      sub_2394189F8();
    v7 = (char *)operator new(v6);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[4 * (v6 >> 2)];
    v8 = 12 * ((v6 - 12) / 0xCuLL) + 12;
    memcpy(v7, v5, v8);
    *(_QWORD *)(a1 + 8) = &v7[v8];
  }
  v9 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v11 = *(_BYTE **)(a2 + 40);
  v10 = *(_BYTE **)(a2 + 48);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 2) > 0x1555555555555555)
      sub_2394189F8();
    v13 = (char *)operator new(v12);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = &v13[4 * (v12 >> 2)];
    memcpy(v13, v11, 12 * ((v12 - 12) / 0xCuLL) + 12);
    *(_QWORD *)(a1 + 48) = &v13[12 * ((v12 - 12) / 0xCuLL) + 12];
  }
  v14 = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v14;
  return a1;
}

void sub_2396D6310(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_2396D6348()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396D635C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250AE33E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_2396D639C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE33E0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float sub_2396D63C4(uint64_t a1, uint64_t *a2, double a3, int8x16_t a4, double a5, double a6, double a7, float32x2_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  int8x16_t v13;
  float32x2_t *v14;
  float result;

  v8 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v8 + 80))
    sub_2394875CC();
  v9 = *a2;
  v10 = *(_QWORD *)(v8 + 56) + 12 * *a2;
  v11 = *(float *)(v10 + 8);
  a4.i64[0] = *(_QWORD *)v10;
  LODWORD(v12) = HIDWORD(*(_QWORD *)v10);
  v13 = a4;
  v13.i32[2] = *(_DWORD *)(v10 + 8);
  v14 = (float32x2_t *)(**(_QWORD **)(a1 + 24) + 12 * v9);
  a8.i32[0] = v14[1].i32[0];
  result = vabds_f32((float)((float)(*(float *)a4.i32 * *(float *)(*(_QWORD *)v8 + 12 * v9))+ (float)(v12 * *(float *)(*(_QWORD *)v8 + 12 * v9 + 4)))+ (float)(v11 * *(float *)(*(_QWORD *)v8 + 12 * v9 + 8)), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a4.i8, *v14), (float32x2_t)vdup_lane_s32((int32x2_t)*v14, 1), *(float32x2_t *)a4.i8, 1), a8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0]);
  *(float *)(**(_QWORD **)(a1 + 16) + 4 * v9) = result;
  return result;
}

void sub_2396D6478(uint64_t a1, void **a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  BOOL v11;
  uint64_t v12;
  float *v13;
  float32x4_t *v14;
  uint64_t v15;
  float *v16;
  float32x2_t *v17;
  uint64_t v18;
  const float *v19;
  float32x2_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t i;
  uint64_t v27;
  float *v28;
  float *v29;
  float v30;
  void *exception;
  float32x4x2_t v32;
  float32x4x2_t v33;

  v4 = *(int *)(a1 + 56);
  v5 = ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3;
  if (v4 <= v5)
  {
    if (v4 < v5)
      a2[1] = (char *)*a2 + 8 * v4;
  }
  else
  {
    sub_2394FBB68(a2, v4 - v5);
  }
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(int *)(v6 + 24);
  if (!(_DWORD)v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "[nanoflann] computeBoundingBox() called but no data points found.");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 < 1)
    return;
  v9 = *(_QWORD *)v6;
  v10 = (char *)*a2;
  if (v8 < 8
    || ((unint64_t)v10 < v9 + 4 * v8 ? (v11 = v9 >= (unint64_t)&v10[8 * v8]) : (v11 = 1), !v11))
  {
    v12 = 0;
LABEL_18:
    v17 = (float32x2_t *)&v10[8 * v12];
    v18 = v8 - v12;
    v19 = (const float *)(v9 + 4 * v12);
    do
    {
      v20 = vld1_dup_f32(v19++);
      *v17++ = v20;
      --v18;
    }
    while (v18);
    goto LABEL_20;
  }
  v12 = v8 & 0x7FFFFFF8;
  v13 = (float *)(v10 + 32);
  v14 = (float32x4_t *)(v9 + 16);
  v15 = v8 & 0xFFFFFFF8;
  do
  {
    v32.val[0] = v14[-1];
    v33.val[0] = *v14;
    v32.val[1] = v32.val[0];
    v16 = v13 - 8;
    vst2q_f32(v16, v32);
    v33.val[1] = v33.val[0];
    vst2q_f32(v13, v33);
    v13 += 16;
    v14 += 2;
    v15 -= 8;
  }
  while (v15);
  if (v12 != v8)
    goto LABEL_18;
LABEL_20:
  if (v7 >= 2)
  {
    v21 = *(int *)(v6 + 28);
    v22 = *(_QWORD *)v6;
    v23 = (uint64_t)*a2 + 4;
    v24 = 4 * v21;
    v25 = (float *)(v22 + 4 * v21);
    for (i = 1; i != v7; ++i)
    {
      v27 = v8;
      v28 = v25;
      v29 = (float *)v23;
      do
      {
        v30 = *v28;
        if (*v28 >= *(v29 - 1))
        {
          if (v30 <= *v29)
            goto LABEL_24;
        }
        else
        {
          *(v29 - 1) = v30;
          v30 = *v28;
          if (*v28 <= *v29)
            goto LABEL_24;
        }
        *v29 = v30;
LABEL_24:
        v29 += 2;
        ++v28;
        --v27;
      }
      while (v27);
      v25 = (float *)((char *)v25 + v24);
    }
  }
}

void sub_2396D662C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396D6640(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const void *v16;
  int64_t v17;
  uint64_t v18;
  const void *v19;
  int64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  float *v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  float *v45;
  float32x4_t *v46;
  uint64_t v47;
  float *v48;
  _DWORD *v49;
  int *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  uint64_t v61;
  float *v62;
  float v63;
  unint64_t v65;
  BOOL v67;
  uint64_t v69;
  const float *v70;
  const float *v71;
  float *v72;
  void *__p;
  float *v74;
  char *v75;
  void *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  float32x4x2_t v81;
  float32x4x2_t v82;
  float32x4x2_t v83;
  float32x4x2_t v84;
  float32x4x2_t v85;

  v10 = *(_QWORD *)(a2 + 88);
  if (v10 >= 0x20)
  {
    v12 = *(_QWORD **)(a2 + 104);
LABEL_5:
    *(_QWORD *)(a2 + 88) = v10 - 32;
    v13 = *(_QWORD *)(a2 + 112) + 32;
    *(_QWORD *)(a2 + 104) = v12 + 4;
    *(_QWORD *)(a2 + 112) = v13;
    v14 = a4 - a3;
    if (a4 - a3 > *(_QWORD *)(a2 + 32))
      goto LABEL_6;
LABEL_20:
    v12[2] = 0;
    v12[3] = 0;
    *v12 = a3;
    v12[1] = a4;
    v37 = *(unsigned int *)(a2 + 56);
    if ((int)v37 < 1)
      return v12;
    v38 = *(uint64_t **)(a2 + 128);
    v39 = *(_QWORD *)(*(_QWORD *)a2 + 8 * a3) * *((int *)v38 + 7);
    v40 = *v38;
    v41 = *a5;
    if (v37 >= 8
      && ((v42 = v40 + 4 * v39, v41 < v40 + 4 * (v39 + v37)) ? (v43 = v42 >= v41 + 8 * v37) : (v43 = 1), v43))
    {
      v44 = v37 & 0x7FFFFFF8;
      v45 = (float *)(v41 + 32);
      v46 = (float32x4_t *)(v42 + 16);
      v47 = v37 & 0xFFFFFFF8;
      do
      {
        v81.val[0] = v46[-1];
        v83.val[0] = *v46;
        v81.val[1] = v81.val[0];
        v48 = v45 - 8;
        vst2q_f32(v48, v81);
        v83.val[1] = v83.val[0];
        vst2q_f32(v45, v83);
        v45 += 16;
        v46 += 2;
        v47 -= 8;
      }
      while (v47);
      if (v44 == v37)
      {
LABEL_34:
        v53 = a3 + 1;
        if (a3 + 1 >= a4)
          return v12;
        v54 = *(_QWORD *)a2;
        v55 = *(uint64_t **)(a2 + 128);
        v56 = *((int *)v55 + 7);
        v57 = *v55;
        v58 = 4 * v56;
        v59 = *a5 + 4;
LABEL_37:
        v60 = (float *)(v57 + v58 * *(_QWORD *)(v54 + 8 * v53));
        v61 = v37;
        v62 = (float *)v59;
        while (1)
        {
          v63 = *v60;
          if (*(v62 - 1) <= *v60)
          {
            if (*v62 < v63)
LABEL_43:
              *v62 = v63;
          }
          else
          {
            *(v62 - 1) = v63;
            v63 = *v60;
            if (*v62 < *v60)
              goto LABEL_43;
          }
          ++v60;
          v62 += 2;
          if (!--v61)
          {
            if (++v53 == a4)
              return v12;
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      v44 = 0;
    }
    v49 = (_DWORD *)(v41 + 8 * v44 + 4);
    v50 = (int *)(v40 + 4 * (v44 + v39));
    v51 = v37 - v44;
    do
    {
      *(v49 - 1) = *v50;
      v52 = *v50++;
      *v49 = v52;
      v49 += 2;
      --v51;
    }
    while (v51);
    goto LABEL_34;
  }
  *(_QWORD *)(a2 + 120) += v10;
  v11 = malloc_type_malloc(0x2000uLL, 0x933F5985uLL);
  if (v11)
  {
    *v11 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = v11;
    v12 = v11 + 1;
    v10 = 8184;
    goto LABEL_5;
  }
  fwrite("Failed to allocate memory.\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  v12 = 0;
  v14 = a4 - a3;
  if (a4 - a3 <= *(_QWORD *)(a2 + 32))
    goto LABEL_20;
LABEL_6:
  v79 = 0;
  v80 = 0;
  sub_2396D6B30(a1, a2, (_QWORD *)(*(_QWORD *)a2 + 8 * a3), v14, &v80, (_DWORD *)&v79 + 1, (float *)&v79, a5);
  *(_DWORD *)v12 = HIDWORD(v79);
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v15 = a5[1];
  v16 = (const void *)*a5;
  v17 = v15 - *a5;
  if (v17 < 0)
    sub_2394189F8();
  v76 = operator new(v15 - *a5);
  v78 = (char *)v76 + 8 * (v17 >> 3);
  memcpy(v76, v16, v17);
  v77 = (char *)v76 + 8 * (v17 >> 3);
  *((_DWORD *)v76 + 2 * SHIDWORD(v79) + 1) = v79;
  v12[2] = sub_2396D6640(a1, a2, a3, v80 + a3, &v76);
  __p = 0;
  v74 = 0;
  v75 = 0;
  v18 = a5[1];
  v19 = (const void *)*a5;
  v20 = v18 - *a5;
  if (v20 < 0)
    sub_2394189F8();
  __p = operator new(v18 - *a5);
  v75 = (char *)__p + 8 * (v20 >> 3);
  memcpy(__p, v19, v20);
  v74 = (float *)((char *)__p + 8 * (v20 >> 3));
  *((_DWORD *)__p + 2 * SHIDWORD(v79)) = v79;
  v12[3] = sub_2396D6640(a1, a2, v80 + a3, a4, &__p);
  v21 = 8 * SHIDWORD(v79);
  *((_DWORD *)v12 + 1) = *(_DWORD *)((char *)v76 + v21 + 4);
  v22 = (float *)__p;
  *((_DWORD *)v12 + 2) = *(_DWORD *)((char *)__p + v21);
  v23 = *(unsigned int *)(a2 + 56);
  if ((int)v23 < 1)
    goto LABEL_17;
  v24 = (char *)v76;
  v25 = *a5;
  if (v23 < 8)
  {
    v26 = 0;
    goto LABEL_11;
  }
  v26 = 0;
  v65 = v25 + 8 * v23;
  v67 = v25 < (unint64_t)v76 + 8 * v23 && (unint64_t)v76 < v65;
  if ((unint64_t)v22 < v65 && v25 < (unint64_t)&v22[2 * v23])
    goto LABEL_11;
  if (v67)
    goto LABEL_11;
  v26 = v23 & 0x7FFFFFFC;
  v69 = v23 & 0xFFFFFFFC;
  v70 = v22;
  v71 = (const float *)v76;
  v72 = (float *)*a5;
  do
  {
    v82 = vld2q_f32(v70);
    v70 += 8;
    v84 = vld2q_f32(v71);
    v71 += 8;
    v85.val[0] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v84.val[0], v82.val[0]), (int8x16_t)v82.val[0], (int8x16_t)v84.val[0]);
    v85.val[1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v82.val[1], v84.val[1]), (int8x16_t)v82.val[1], (int8x16_t)v84.val[1]);
    vst2q_f32(v72, v85);
    v72 += 8;
    v69 -= 4;
  }
  while (v69);
  if (v26 != v23)
  {
LABEL_11:
    v27 = v23 - v26;
    v28 = (8 * v26) | 4;
    v29 = (float *)((char *)v22 + v28);
    v30 = (float *)(v25 + v28);
    v31 = (float *)&v24[v28];
    do
    {
      v32 = *(v29 - 1);
      if (v32 >= *(v31 - 1))
        v32 = *(v31 - 1);
      *(v30 - 1) = v32;
      v33 = *v31;
      v31 += 2;
      v34 = v33;
      v35 = *v29;
      v29 += 2;
      v36 = v35;
      if (v34 < v35)
        v34 = v36;
      *v30 = v34;
      v30 += 2;
      --v27;
    }
    while (v27);
  }
LABEL_17:
  v74 = v22;
  operator delete(v22);
  if (v76)
  {
    v77 = (char *)v76;
    operator delete(v76);
  }
  return v12;
}

void sub_2396D6AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_2396D6B30(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, unint64_t *a5, _DWORD *a6, float *a7, uint64_t *a8)
{
  uint64_t v10;
  float v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  int v16;
  float v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t *v24;
  unint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  float *v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  unint64_t v38;
  uint64_t *v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float *v50;
  float v51;
  uint64_t v52;
  float v53;
  unint64_t v54;
  unint64_t v55;

  v10 = *a8;
  v11 = *(float *)(*a8 + 4) - *(float *)*a8;
  v12 = *(unsigned int *)(a2 + 56);
  if ((int)v12 > 1)
  {
    v13 = (float *)(v10 + 12);
    v14 = v12 - 1;
    do
    {
      v15 = *(v13 - 1);
      if ((float)(*v13 - v15) > v11)
        v11 = *v13 - v15;
      v13 += 2;
      --v14;
    }
    while (v14);
  }
  *a6 = 0;
  v16 = *(_DWORD *)(a2 + 56);
  if (v16 < 1)
  {
    v19 = 0;
    v18 = *(uint64_t **)(a2 + 128);
  }
  else
  {
    v17 = v11 * 0.99999;
    v18 = *(uint64_t **)(a2 + 128);
    v19 = 0;
    if (a4 <= 1)
    {
      v49 = 0;
      v50 = (float *)(v10 + 4);
      v51 = -1.0;
      do
      {
        if ((float)(*v50 - *(v50 - 1)) > v17)
        {
          v52 = v49 + *a3 * *((int *)v18 + 7);
          v53 = *(float *)(*v18 + 4 * v52) - *(float *)(*v18 + 4 * v52);
          if (v53 > v51)
          {
            *a6 = v49;
            v16 = *(_DWORD *)(a2 + 56);
            v19 = v49;
            v51 = v53;
          }
        }
        ++v49;
        v50 += 2;
      }
      while (v49 < v16);
    }
    else
    {
      v20 = 0;
      v21 = -1.0;
      do
      {
        if ((float)(*(float *)(v10 + 8 * v20 + 4) - *(float *)(v10 + 8 * v20)) > v17)
        {
          v22 = *((int *)v18 + 7);
          v23 = *(float *)(*v18 + 4 * (v20 + *a3 * v22));
          v24 = a3 + 1;
          v25 = a4 - 1;
          v26 = v23;
          v27 = v23;
          do
          {
            v28 = *v24++;
            v29 = *(float *)(*v18 + 4 * (v20 + v28 * v22));
            if (v29 < v23)
            {
              v23 = v29;
              v27 = v26;
            }
            if (v29 > v27)
            {
              v26 = v29;
              v27 = v29;
            }
            --v25;
          }
          while (v25);
          v30 = v26 - v23;
          if (v30 > v21)
          {
            *a6 = v20;
            v16 = *(_DWORD *)(a2 + 56);
            v19 = v20;
            v21 = v30;
          }
        }
        ++v20;
      }
      while (v20 < v16);
    }
  }
  v31 = v19;
  v32 = (float *)(v10 + 8 * v19);
  v33 = *v32;
  v34 = v32[1];
  v35 = *((int *)v18 + 7);
  v36 = *v18;
  v37 = *(float *)(v36 + 4 * (v19 + *a3 * v35));
  if (a4 < 2)
  {
    v40 = *(float *)(v36 + 4 * (v19 + *a3 * v35));
  }
  else
  {
    v38 = a4 - 1;
    v39 = a3 + 1;
    v40 = v37;
    v41 = v37;
    do
    {
      v42 = *v39++;
      v43 = *(float *)(v36 + 4 * (v31 + v42 * v35));
      if (v43 < v37)
      {
        v37 = v43;
        v41 = v40;
      }
      if (v43 > v41)
      {
        v40 = v43;
        v41 = v43;
      }
      --v38;
    }
    while (v38);
  }
  v44 = (float)(v33 + v34) * 0.5;
  if (v44 <= v40)
    v45 = v44;
  else
    v45 = v40;
  if (v44 >= v37)
    v46 = v45;
  else
    v46 = v37;
  *a7 = v46;
  v54 = 0;
  v55 = 0;
  sub_2396D6D94(a1, a2, (uint64_t)a3, a4, v31, a7, &v55, &v54);
  v48 = v54;
  v47 = v55;
  if (v54 >= a4 >> 1)
    v48 = a4 >> 1;
  if (v55 <= a4 >> 1)
    v47 = v48;
  *a5 = v47;
}

void sub_2396D6D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, float *a6, unint64_t *a7, unint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;

  v8 = 0;
  v9 = a4 - 1;
  v10 = *(_QWORD *)(a2 + 128);
  v11 = *a6;
  v12 = a4 - 1;
  do
  {
LABEL_2:
    if (*(float *)(*(_QWORD *)v10 + 4 * (a5 + *(_QWORD *)(a3 + 8 * v8) * *(int *)(v10 + 28))) >= v11)
      break;
    ++v8;
  }
  while (v8 <= v12);
  while (1)
  {
    v13 = v12 != 0;
    if (v8 > v12)
    {
      v14 = v12;
LABEL_13:
      if (v8 > v14)
        break;
      goto LABEL_16;
    }
    if (!v12)
    {
      v14 = 0;
      if (v8)
        break;
      goto LABEL_16;
    }
    while (*(float *)(*(_QWORD *)v10 + 4 * (a5 + *(_QWORD *)(a3 + 8 * v12) * *(int *)(v10 + 28))) >= v11)
    {
      v14 = v12 - 1;
      v13 = v12 != 1;
      if (v8 <= v12 - 1)
      {
        if (--v12)
          continue;
      }
      goto LABEL_13;
    }
    v13 = 1;
    v14 = v12;
    if (v8 > v12)
      break;
LABEL_16:
    if (!v13)
      break;
    v15 = *(_QWORD *)(a3 + 8 * v8);
    *(_QWORD *)(a3 + 8 * v8) = *(_QWORD *)(a3 + 8 * v14);
    *(_QWORD *)(a3 + 8 * v14) = v15;
    ++v8;
    v12 = v14 - 1;
    if (v8 <= v14 - 1)
      goto LABEL_2;
  }
  *a7 = v8;
  v16 = *(_QWORD *)(a2 + 128);
  v17 = *a6;
  if (v8 > v9)
    goto LABEL_22;
  do
  {
LABEL_20:
    if (*(float *)(*(_QWORD *)v16 + 4 * (a5 + *(_QWORD *)(a3 + 8 * v8) * *(int *)(v16 + 28))) > v17)
      break;
    ++v8;
  }
  while (v8 <= v9);
LABEL_22:
  while (2)
  {
    v18 = v9 != 0;
    if (v8 > v9)
    {
      v19 = v9;
LABEL_31:
      if (v8 > v19)
        goto LABEL_37;
LABEL_34:
      if (!v18)
        goto LABEL_37;
      v20 = *(_QWORD *)(a3 + 8 * v8);
      *(_QWORD *)(a3 + 8 * v8) = *(_QWORD *)(a3 + 8 * v19);
      *(_QWORD *)(a3 + 8 * v19) = v20;
      ++v8;
      v9 = v19 - 1;
      if (v8 <= v19 - 1)
        goto LABEL_20;
      continue;
    }
    break;
  }
  if (!v9)
  {
    v19 = 0;
    if (v8)
      goto LABEL_37;
    goto LABEL_34;
  }
  while (*(float *)(*(_QWORD *)v16 + 4 * (a5 + *(_QWORD *)(a3 + 8 * v9) * *(int *)(v16 + 28))) > v17)
  {
    v19 = v9 - 1;
    v18 = v9 != 1;
    if (v8 <= v9 - 1)
    {
      if (--v9)
        continue;
    }
    goto LABEL_31;
  }
  v18 = 1;
  v19 = v9;
  if (v8 <= v9)
    goto LABEL_34;
LABEL_37:
  *a8 = v8;
}

void sub_2396D6F84()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396D6F98(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_250AE3428;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_2396D6FE0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250AE3428;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2396D7010(uint64_t a1, uint64_t *a2)
{
  sub_2396D701C(a1 + 8, *a2);
}

void sub_2396D701C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float32x4_t *v4;
  unint64_t *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char **v20;
  _BYTE *v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v69;
  char *v70;
  char *v71;
  void *__p;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  void **p_p;
  unint64_t v79;
  uint64_t v80;

  v2 = a2;
  v3 = a1;
  __p = 0;
  v73 = 0;
  v74 = 0;
  v4 = (float32x4_t *)(**(_QWORD **)a1 + 12 * a2);
  v5 = *(unint64_t **)(a1 + 16);
  v6 = **(float **)(a1 + 24);
  if (v6 <= 0.00000011921)
  {
    v15 = *v5;
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v3 + 40);
  *(float *)&v77 = v6;
  p_p = &__p;
  v73 = 0;
  sub_2396D7524(v7, (float *)&v77, v4, v8);
  v10 = *p_p;
  v9 = p_p[1];
  if (*(_BYTE *)(v8 + 8))
  {
    v11 = 126 - 2 * __clz((v73 - (_BYTE *)__p) >> 4);
    if (v73 == __p)
      v12 = 0;
    else
      v12 = v11;
    sub_2396D7C40((float *)__p, v73, (uint64_t)&v69, v12, 1);
  }
  v13 = v9 - v10;
  v14 = (v9 - v10) >> 4;
  v15 = *v5;
  v3 = a1;
  if (v14 <= *v5)
  {
LABEL_14:
    v27 = (_QWORD *)(**(_QWORD **)(v3 + 32) + 24 * v2);
    v28 = (uint64_t)(v27[1] - *v27) >> 3;
    if (v15 <= v28)
    {
      if (v15 < v28)
        v27[1] = *v27 + 8 * v15;
    }
    else
    {
      sub_23946DAD4((uint64_t)v27, v15 - v28);
      v15 = *v5;
    }
    v69 = 0;
    v70 = 0;
    v71 = 0;
    if (v15)
    {
      if (v15 >> 62)
        sub_2394189F8();
      v29 = (char *)operator new(4 * v15);
      v69 = v29;
      v71 = &v29[4 * v15];
      memset_pattern16(v29, &unk_239ECEF60, 4 * v15);
      v70 = &v29[4 * v15];
    }
    else
    {
      v29 = 0;
    }
    v30 = *(_QWORD *)(a1 + 8);
    v77 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 24 * v2);
    p_p = (void **)v29;
    v79 = v15;
    v80 = 0;
    if (v15)
      *(_DWORD *)&v29[4 * v15 - 4] = 2139095039;
    v75 = 32;
    v76 = 1;
    sub_2396D8EC8(v30, &v77, v4, (uint64_t)&v75);
    if (v29)
      operator delete(v29);
LABEL_26:
    v31 = (char *)__p;
    goto LABEL_27;
  }
  v16 = **(_QWORD **)(a1 + 32);
  v17 = v16 + 24 * v2;
  v18 = *(_BYTE **)v17;
  if (v14 <= (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)v17) >> 3)
    goto LABEL_37;
  if ((v13 & 0x8000000000000000) != 0)
    sub_2394189F8();
  v19 = v16 + 24 * v2;
  v22 = *(_BYTE **)(v19 + 8);
  v20 = (char **)(v19 + 8);
  v21 = v22;
  v23 = (char *)operator new(v13 >> 1);
  v24 = v22 - v18;
  v25 = &v23[(v22 - v18) & 0xFFFFFFFFFFFFFFF8];
  v26 = v25;
  if (v22 != v18)
  {
    if ((unint64_t)(v24 - 8) < 0x58)
    {
      v26 = &v23[(v21 - v18) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_34:
        v40 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v26 - 1) = v40;
        v26 -= 8;
      }
      while (v21 != v18);
      goto LABEL_35;
    }
    v26 = &v23[(v21 - v18) & 0xFFFFFFFFFFFFFFF8];
    if (v21 - v23 - (v24 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_34;
    v32 = v24 >> 3;
    v33 = ((unint64_t)(v24 - 8) >> 3) + 1;
    v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    v35 = &v21[-v34];
    v26 = &v25[-v34];
    v36 = &v23[8 * v32 - 16];
    v37 = (__int128 *)(v21 - 16);
    v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v39 = *v37;
      *((_OWORD *)v36 - 1) = *(v37 - 1);
      *(_OWORD *)v36 = v39;
      v36 -= 32;
      v37 -= 2;
      v38 -= 4;
    }
    while (v38);
    v21 = v35;
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_34;
  }
LABEL_35:
  *(_QWORD *)v17 = v26;
  *v20 = v25;
  *(_QWORD *)(v17 + 16) = &v23[8 * v14];
  if (v18)
    operator delete(v18);
LABEL_37:
  v31 = (char *)__p;
  v41 = v73;
  if (__p != v73)
  {
    v42 = a1;
    v66 = v73;
    v67 = v2;
    while (1)
    {
      while (1)
      {
        v44 = **(_QWORD **)(v42 + 32) + 24 * v2;
        v46 = (uint64_t *)(v44 + 8);
        v45 = *(char **)(v44 + 8);
        v47 = *(_QWORD *)(v44 + 16);
        if ((unint64_t)v45 >= v47)
          break;
        v43 = *(_QWORD *)v31;
        v31 += 16;
        *(_QWORD *)v45 = v43;
        *v46 = (uint64_t)(v45 + 8);
        if (v31 == v41)
          goto LABEL_26;
      }
      v48 = *(char **)v44;
      v49 = (uint64_t)&v45[-*(_QWORD *)v44];
      v50 = v49 >> 3;
      v51 = (v49 >> 3) + 1;
      if (v51 >> 61)
        sub_2394189F8();
      v52 = v47 - (_QWORD)v48;
      if (v52 >> 2 > v51)
        v51 = v52 >> 2;
      v53 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v51;
      if (v53)
        break;
      v54 = 0;
      v55 = (_QWORD *)(8 * v50);
      *(_QWORD *)(8 * v50) = *(_QWORD *)v31;
      v56 = 8 * v50 + 8;
      if (v45 != v48)
        goto LABEL_52;
LABEL_58:
      *(_QWORD *)v44 = v55;
      *v46 = v56;
      *(_QWORD *)(v44 + 16) = &v54[8 * v53];
      if (v48)
        operator delete(v48);
      v2 = v67;
      v42 = a1;
      v41 = v66;
      *v46 = v56;
      v31 += 16;
      if (v31 == v66)
        goto LABEL_26;
    }
    if (v53 >> 61)
      sub_239418A80();
    v54 = operator new(8 * v53);
    v55 = &v54[8 * v50];
    *v55 = *(_QWORD *)v31;
    v56 = (uint64_t)(v55 + 1);
    if (v45 == v48)
      goto LABEL_58;
LABEL_52:
    v57 = v45 - 8 - v48;
    if (v57 < 0x58)
      goto LABEL_68;
    if ((unint64_t)(v45 - &v54[v49]) < 0x20)
      goto LABEL_68;
    v58 = (v57 >> 3) + 1;
    v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    v60 = &v45[-v59];
    v55 = (_QWORD *)((char *)v55 - v59);
    v61 = &v54[8 * v50 - 16];
    v62 = v45 - 16;
    v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v64 = *(_OWORD *)v62;
      *(v61 - 1) = *((_OWORD *)v62 - 1);
      *v61 = v64;
      v61 -= 2;
      v62 -= 32;
      v63 -= 4;
    }
    while (v63);
    v45 = v60;
    if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_68:
      do
      {
        v65 = *((_QWORD *)v45 - 1);
        v45 -= 8;
        *--v55 = v65;
      }
      while (v45 != v48);
    }
    goto LABEL_58;
  }
LABEL_27:
  if (v31)
  {
    v73 = v31;
    operator delete(v31);
  }
}

void sub_2396D74D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2396D7524(uint64_t a1, float *a2, float32x4_t *a3, uint64_t a4)
{
  uint64_t v4;
  float v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  void *exception;
  int v21;
  void *__p;
  void *v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if (!*(_QWORD *)(a1 + 24))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x23B83DB6C](exception, "[nanoflann] findNeighbors() called before building the index.");
      __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v8 = *(float *)(a4 + 4);
    __p = 0;
    v23 = 0;
    v24 = 0;
    v21 = 0;
    sub_2396D7A1C((uint64_t)&__p, *(int *)(a1 + 56), (const float *)&v21);
    v9 = *(unsigned int *)(a1 + 56);
    if ((int)v9 >= 1)
    {
      v10 = (float *)__p;
      v11 = (float *)(*(_QWORD *)(a1 + 64) + 4);
      v12 = 0.0;
      v13 = (float *)a3;
      while (1)
      {
        v14 = *v13;
        v15 = *(v11 - 1);
        if (*v13 < v15)
        {
          v17 = (float)(v14 - v15) * (float)(v14 - v15);
          *v10 = v17;
          v12 = v12 + v17;
          v14 = *v13;
          v16 = *v11;
          if (*v13 > *v11)
          {
LABEL_10:
            v18 = (float)(v14 - v16) * (float)(v14 - v16);
            *v10 = v18;
            v12 = v12 + v18;
          }
        }
        else
        {
          v16 = *v11;
          if (v14 > *v11)
            goto LABEL_10;
        }
        ++v10;
        v11 += 2;
        ++v13;
        if (!--v9)
          goto LABEL_12;
      }
    }
    v12 = 0.0;
LABEL_12:
    sub_2396D76C4(a1, a2, a3, *(int **)(a1 + 24), (uint64_t *)&__p, v12, v8 + 1.0);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
  }
  return v4 != 0;
}

void sub_2396D7688(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2396D769C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396D76C4(uint64_t a1, float *a2, float32x4_t *a3, int *a4, uint64_t *a5, float a6, float a7)
{
  int *v10;
  float32x4_t *v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  float v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  float v39;
  float32x4_t *v40;
  unint64_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  float *v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  float *v58;
  float32x4_t *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  float32x4_t *v70;

  v10 = a4;
  v11 = a3;
  v12 = a2;
  v13 = a1;
  v14 = *((_QWORD *)a4 + 2);
  if (!v14 && !*((_QWORD *)a4 + 3))
  {
    v30 = *(_QWORD *)a4;
    v29 = *((_QWORD *)a4 + 1);
    if (*(_QWORD *)a4 >= v29)
      return 1;
    v31 = *a2;
    v70 = a3 + 1;
    while (1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)v13 + 8 * v30);
      v34 = *(int *)(v13 + 56);
      if ((_DWORD)v34)
      {
        v35 = *(uint64_t **)(v13 + 144);
        v36 = v33 * *((int *)v35 + 7);
        v37 = *v35;
        if (v34 >= 8)
        {
          v38 = v34 & 0xFFFFFFFFFFFFFFF8;
          v40 = (float32x4_t *)(v37 + 4 * v36 + 16);
          v39 = 0.0;
          v41 = v34 & 0xFFFFFFFFFFFFFFF8;
          v42 = v70;
          do
          {
            v43 = vsubq_f32(v42[-1], v40[-1]);
            v44 = vsubq_f32(*v42, *v40);
            v45 = vmulq_f32(v43, v43);
            v46 = vmulq_f32(v44, v44);
            v39 = (float)((float)((float)((float)((float)((float)((float)(v39 + v45.f32[0]) + v45.f32[1]) + v45.f32[2])
                                                + v45.f32[3])
                                        + v46.f32[0])
                                + v46.f32[1])
                        + v46.f32[2])
                + v46.f32[3];
            v42 += 2;
            v40 += 2;
            v41 -= 8;
          }
          while (v41);
          if (v38 == v34)
            goto LABEL_32;
        }
        else
        {
          v38 = 0;
          v39 = 0.0;
        }
        v47 = v34 - v38;
        v48 = (float *)(v37 + 4 * (v38 + v36));
        v49 = &v11->f32[v38];
        do
        {
          v50 = *v49++;
          v51 = v50;
          v52 = *v48++;
          v39 = v39 + (float)((float)(v51 - v52) * (float)(v51 - v52));
          --v47;
        }
        while (v47);
      }
      else
      {
        v39 = 0.0;
      }
LABEL_32:
      if (v39 >= v31 || *v12 <= v39)
        goto LABEL_22;
      v54 = (uint64_t *)*((_QWORD *)v12 + 1);
      v55 = LODWORD(v39);
      v57 = (_QWORD *)v54[1];
      v56 = v54[2];
      if ((unint64_t)v57 >= v56)
      {
        v58 = v12;
        v59 = v11;
        v60 = (_QWORD *)*v54;
        v61 = ((uint64_t)v57 - *v54) >> 4;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 60)
          sub_2394189F8();
        v63 = v56 - (_QWORD)v60;
        if (v63 >> 3 > v62)
          v62 = v63 >> 3;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
          v64 = 0xFFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        if (v64)
        {
          if (v64 >> 60)
            sub_239418A80();
          v65 = (char *)operator new(16 * v64);
          v66 = &v65[16 * v61];
          *(_QWORD *)v66 = v33;
          *((_QWORD *)v66 + 1) = v55;
          v67 = (uint64_t)v66;
          v11 = v59;
          if (v57 == v60)
            goto LABEL_50;
          do
          {
LABEL_48:
            *(_OWORD *)(v67 - 16) = *((_OWORD *)v57 - 1);
            v67 -= 16;
            v57 -= 2;
          }
          while (v57 != v60);
          v57 = (_QWORD *)*v54;
        }
        else
        {
          v65 = 0;
          v66 = (char *)(16 * v61);
          *(_QWORD *)v66 = v33;
          *((_QWORD *)v66 + 1) = LODWORD(v39);
          v67 = 16 * v61;
          v11 = v59;
          if (v57 != v60)
            goto LABEL_48;
        }
LABEL_50:
        v12 = v58;
        v32 = v66 + 16;
        *v54 = v67;
        v54[1] = (uint64_t)(v66 + 16);
        v54[2] = (uint64_t)&v65[16 * v64];
        v10 = a4;
        if (v57)
          operator delete(v57);
        v13 = a1;
        goto LABEL_21;
      }
      *v57 = v33;
      v57[1] = LODWORD(v39);
      v32 = v57 + 2;
LABEL_21:
      v54[1] = (uint64_t)v32;
      v29 = *((_QWORD *)v10 + 1);
LABEL_22:
      if (++v30 >= v29)
        return 1;
    }
  }
  v15 = *a4;
  v16 = a3->f32[v15];
  v17 = *((float *)a4 + 1);
  v18 = *((float *)a4 + 2);
  v19 = v16 - v17;
  v20 = v16 - v18;
  v21 = (float)(v16 - v17) + (float)(v16 - v18);
  if (v21 >= 0.0)
    v22 = *((_QWORD *)a4 + 3);
  else
    v22 = *((_QWORD *)a4 + 2);
  if (v21 >= 0.0)
    v23 = v14;
  else
    v23 = *((_QWORD *)v10 + 3);
  result = sub_2396D76C4(a1, a2, a3, v22, a5, a6, a7);
  if ((_DWORD)result)
  {
    v25 = v19 * v19;
    if (v21 < 0.0)
      v25 = v20 * v20;
    v26 = *a5;
    v27 = *(float *)(*a5 + 4 * v15);
    v28 = (float)(v25 + a6) - v27;
    *(float *)(*a5 + 4 * v15) = v25;
    if ((float)(v28 * a7) <= *v12)
    {
      result = sub_2396D76C4(v13, v12, v11, v23, a5, v28, a7);
      if (!(_DWORD)result)
        return result;
      v26 = *a5;
    }
    *(float *)(v26 + 4 * v15) = v27;
    return 1;
  }
  return result;
}

int32x4_t *sub_2396D7A1C(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  float *v7;
  int32x4_t *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  int32x2_t v14;
  unint64_t v15;
  int32x4_t *v16;
  unint64_t v17;
  int32x4_t v18;
  int32x4_t *v19;
  uint64_t v20;
  float32x4_t *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  float32x4_t v25;
  float32x4_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  float32x4_t *v30;
  unint64_t v31;
  uint64_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t *v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(float **)a1;
  result = (int32x4_t *)v7;
  if (a2 > (v6 - (uint64_t)v7) >> 2)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 62)
      goto LABEL_38;
    v9 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v9 = a2;
    v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL;
    v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 62)
LABEL_38:
      sub_2394189F8();
    v12 = 4 * v11;
    result = (int32x4_t *)operator new(4 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = (char *)result + v12;
    v13 = (float *)&result->i32[a2];
    *(float *)v14.i32 = *a3;
    v15 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v16 = result;
    if (v15 < 7)
      goto LABEL_41;
    v17 = v15 + 1;
    v16 = (int32x4_t *)((char *)result + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
    v18 = vdupq_lane_s32(v14, 0);
    v19 = result + 1;
    v20 = v17 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
      {
        v16->i32[0] = v14.i32[0];
        v16 = (int32x4_t *)((char *)v16 + 4);
      }
      while (v16 != (int32x4_t *)v13);
    }
    goto LABEL_37;
  }
  v21 = *(float32x4_t **)(a1 + 8);
  v22 = (char *)v21 - (char *)v7;
  v23 = ((char *)v21 - (char *)v7) >> 2;
  if (v23 >= a2)
    v24 = a2;
  else
    v24 = ((char *)v21 - (char *)v7) >> 2;
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3)
      goto LABEL_42;
    result = (int32x4_t *)&v7[v24 & 0xFFFFFFFFFFFFFFF8];
    v25 = vld1q_dup_f32(a3);
    v26 = (float32x4_t *)(v7 + 4);
    v27 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 8;
    }
    while (v27);
    v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFF8);
    v24 &= 7u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *(float *)result->i32 = *a3;
        result = (int32x4_t *)((char *)result + 4);
        --v24;
      }
      while (v24);
    }
  }
  v10 = a2 >= v23;
  v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    v13 = &v7[a2];
LABEL_37:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v30 = (float32x4_t *)((char *)v21 + 4 * v29);
  v31 = 4 * a2 - (v22 & 0xFFFFFFFFFFFFFFFCLL) - 4;
  if (v31 < 0x4C || v21 < (float32x4_t *)(a3 + 1) && (char *)&v21->i32[1] + v31 > (char *)a3)
    goto LABEL_43;
  v32 = (v31 >> 2) + 1;
  v33 = (float32x4_t *)((char *)v21 + 4 * (v32 & 0x7FFFFFFFFFFFFFF8));
  v34 = vld1q_dup_f32(a3);
  v35 = v21 + 1;
  v36 = v32 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v35[-1] = v34;
    *v35 = v34;
    v35 += 2;
    v36 -= 8;
  }
  while (v36);
  v21 = v33;
  if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_43:
    do
    {
      v21->f32[0] = *a3;
      v21 = (float32x4_t *)((char *)v21 + 4);
    }
    while (v21 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

float *sub_2396D7C40(float *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  float *v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  float v15;
  float v16;
  float *v17;
  float v18;
  uint64_t v19;
  float v20;
  float *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  float *v33;
  float *v34;
  float v35;
  float v36;
  float *v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  float v48;
  float *v49;
  float *v50;
  float v51;
  float v52;
  float *v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  float v71;
  float *v72;
  char *v73;
  char *v74;
  float v75;
  char *v76;
  float v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  float v81;
  float v82;
  BOOL v83;
  float *v84;
  float v85;
  float *v86;
  float v87;
  char *v88;
  char *v89;
  float v90;
  uint64_t v91;
  int v92;
  float v93;
  float v94;
  float v95;
  float v96;
  uint64_t v97;
  float v98;
  float v99;
  float v100;
  uint64_t v101;
  float v102;
  float v103;
  uint64_t v104;
  float v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  float v111;
  uint64_t v112;
  float *v113;
  BOOL v115;
  uint64_t v116;
  float *v117;
  uint64_t v118;
  float v119;
  float v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  float *v126;
  float v127;
  float v128;
  uint64_t v129;
  float *v130;
  float *v131;
  int v132;
  float v133;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v95 = *((float *)a2 - 2);
        v96 = v10[2];
        if (v95 < v96)
        {
          v97 = *(_QWORD *)v10;
          *(_QWORD *)v10 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v97;
          v10[2] = v95;
          *((float *)a2 - 2) = v96;
        }
        return result;
      case 3uLL:
        v98 = v10[6];
        v99 = v10[2];
        v100 = *((float *)a2 - 2);
        if (v98 >= v99)
        {
          if (v100 < v98)
          {
            v124 = *((_QWORD *)v10 + 2);
            *((_QWORD *)v10 + 2) = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v124;
            v10[6] = v100;
            *((float *)a2 - 2) = v98;
            v105 = v10[6];
            v111 = v10[2];
            if (v105 < v111)
            {
              v125 = *(_QWORD *)v10;
              *(_QWORD *)v10 = *((_QWORD *)v10 + 2);
              *((_QWORD *)v10 + 2) = v125;
              goto LABEL_134;
            }
          }
        }
        else
        {
          v101 = *(_QWORD *)v10;
          if (v100 >= v98)
          {
            *(_QWORD *)v10 = *((_QWORD *)v10 + 2);
            *((_QWORD *)v10 + 2) = v101;
            v10[2] = v98;
            v10[6] = v99;
            v133 = *((float *)a2 - 2);
            if (v133 >= v99)
              return result;
            *((_QWORD *)v10 + 2) = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v101;
            v10[6] = v133;
          }
          else
          {
            *(_QWORD *)v10 = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v101;
            v10[2] = v100;
          }
          *((float *)a2 - 2) = v99;
        }
        return result;
      case 4uLL:
        return sub_2396D89CC(v10, v10 + 4, v10 + 8, (float *)a2 - 4);
      case 5uLL:
        result = sub_2396D89CC(v10, v10 + 4, v10 + 8, v10 + 12);
        v102 = *((float *)a2 - 2);
        v103 = v10[14];
        if (v102 < v103)
        {
          v104 = *((_QWORD *)v10 + 6);
          *((_QWORD *)v10 + 6) = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v104;
          v10[14] = v102;
          *((float *)a2 - 2) = v103;
          v105 = v10[14];
          v106 = v10[10];
          if (v105 < v106)
          {
            v107 = *((_QWORD *)v10 + 4);
            v108 = *((_QWORD *)v10 + 6);
            *((_QWORD *)v10 + 4) = v108;
            *((_QWORD *)v10 + 6) = v107;
            v10[10] = v105;
            v10[14] = v106;
            v109 = v10[6];
            if (v105 < v109)
            {
              v110 = *((_QWORD *)v10 + 2);
              *((_QWORD *)v10 + 2) = v108;
              *((_QWORD *)v10 + 4) = v110;
              v10[6] = v105;
              v10[10] = v109;
              v111 = v10[2];
              if (v105 < v111)
              {
                v112 = *(_QWORD *)v10;
                *(_QWORD *)v10 = v108;
                *((_QWORD *)v10 + 2) = v112;
LABEL_134:
                v10[2] = v105;
                v10[6] = v111;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 383)
        {
          v113 = v10 + 4;
          v115 = v10 == (float *)a2 || v113 == (float *)a2;
          if ((a5 & 1) != 0)
          {
            if (!v115)
            {
              v116 = 0;
              v117 = v10;
              do
              {
                v119 = v117[6];
                v120 = v117[2];
                v117 = v113;
                if (v119 < v120)
                {
                  v121 = *(_QWORD *)v113;
                  v122 = v116;
                  do
                  {
                    v123 = (char *)v10 + v122;
                    *((_QWORD *)v123 + 2) = *(_QWORD *)((char *)v10 + v122);
                    *((float *)v123 + 6) = *(float *)((char *)v10 + v122 + 8);
                    if (!v122)
                    {
                      v118 = (uint64_t)v10;
                      goto LABEL_122;
                    }
                    v122 -= 16;
                  }
                  while (v119 < *((float *)v123 - 2));
                  v118 = (uint64_t)v10 + v122 + 16;
LABEL_122:
                  *(_QWORD *)v118 = v121;
                  *(float *)(v118 + 8) = v119;
                }
                v113 = v117 + 4;
                v116 += 16;
              }
              while (v117 + 4 != (float *)a2);
            }
          }
          else if (!v115)
          {
            v126 = v10 + 6;
            do
            {
              v127 = v9[6];
              v128 = v9[2];
              v9 = v113;
              if (v127 < v128)
              {
                v129 = *(_QWORD *)v113;
                v130 = v126;
                do
                {
                  v131 = v130;
                  *((_QWORD *)v130 - 1) = *((_QWORD *)v130 - 3);
                  v132 = *((_DWORD *)v130 - 4);
                  v130 -= 4;
                  *(_DWORD *)v131 = v132;
                }
                while (v127 < *(v131 - 8));
                *((_QWORD *)v130 - 1) = v129;
                *v130 = v127;
              }
              v113 = v9 + 4;
              v126 += 4;
            }
            while (v9 + 4 != (float *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != (float *)a2)
            return (float *)sub_2396D8B20((char *)v10, a2, (uint64_t *)a2);
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[4 * (v12 >> 1)];
        v15 = *((float *)a2 - 2);
        if ((unint64_t)v11 < 0x801)
        {
          v20 = v10[2];
          v21 = &v10[4 * v13 + 2];
          v22 = *v21;
          if (v20 >= *v21)
          {
            if (v15 < v20)
            {
              v28 = *(_QWORD *)v10;
              *(_QWORD *)v10 = *((_QWORD *)a2 - 2);
              *((_QWORD *)a2 - 2) = v28;
              v10[2] = v15;
              *((float *)a2 - 2) = v20;
              v29 = v10[2];
              v30 = *v21;
              if (v29 < *v21)
              {
                v31 = *(_QWORD *)v14;
                *(_QWORD *)v14 = *(_QWORD *)v10;
                *(_QWORD *)v10 = v31;
                *v21 = v29;
                v10[2] = v30;
                --a4;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v23 = *(_QWORD *)v14;
            if (v15 >= v20)
            {
              *(_QWORD *)v14 = *(_QWORD *)v10;
              *(_QWORD *)v10 = v23;
              *v21 = v20;
              v10[2] = v22;
              v45 = *((float *)a2 - 2);
              if (v45 >= v22)
                goto LABEL_32;
              *(_QWORD *)v10 = *((_QWORD *)a2 - 2);
              *((_QWORD *)a2 - 2) = v23;
              v10[2] = v45;
            }
            else
            {
              *(_QWORD *)v14 = *((_QWORD *)a2 - 2);
              *((_QWORD *)a2 - 2) = v23;
              *v21 = v15;
            }
            *((float *)a2 - 2) = v22;
          }
LABEL_32:
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v47 = v10[2];
          v46 = *(_QWORD *)v10;
          if (*(v10 - 2) < v47)
            goto LABEL_58;
          if (v47 >= *((float *)a2 - 2))
          {
            v86 = v10 + 4;
            do
            {
              v10 = v86;
              if (v86 >= (float *)a2)
                break;
              v87 = v86[2];
              v86 += 4;
            }
            while (v47 >= v87);
          }
          else
          {
            v84 = v10;
            do
            {
              v10 = v84 + 4;
              v85 = v84[6];
              v84 += 4;
            }
            while (v47 >= v85);
          }
          v88 = a2;
          if (v10 < (float *)a2)
          {
            v89 = a2;
            do
            {
              v88 = v89 - 16;
              v90 = *((float *)v89 - 2);
              v89 -= 16;
            }
            while (v47 < v90);
          }
          while (v10 < (float *)v88)
          {
            v91 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *(_QWORD *)v88;
            *(_QWORD *)v88 = v91;
            v92 = *((_DWORD *)v10 + 2);
            v10[2] = *((float *)v88 + 2);
            *((_DWORD *)v88 + 2) = v92;
            do
            {
              v93 = v10[6];
              v10 += 4;
            }
            while (v47 >= v93);
            do
            {
              v94 = *((float *)v88 - 2);
              v88 -= 16;
            }
            while (v47 < v94);
          }
          if (v10 - 4 != v9)
          {
            *(_QWORD *)v9 = *((_QWORD *)v10 - 2);
            v9[2] = *(v10 - 2);
          }
          a5 = 0;
          *((_QWORD *)v10 - 2) = v46;
          *(v10 - 2) = v47;
          continue;
        }
        v16 = v10[2];
        v17 = &v10[4 * v13 + 2];
        v18 = *v17;
        if (*v17 >= v16)
        {
          if (v15 < v18)
          {
            v24 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v24;
            *v17 = v15;
            *((float *)a2 - 2) = v18;
            v25 = *v17;
            v26 = v10[2];
            if (*v17 < v26)
            {
              v27 = *(_QWORD *)v10;
              *(_QWORD *)v10 = *(_QWORD *)v14;
              *(_QWORD *)v14 = v27;
              v10[2] = v25;
              *v17 = v26;
            }
          }
        }
        else
        {
          v19 = *(_QWORD *)v10;
          if (v15 < v18)
          {
            *(_QWORD *)v10 = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v19;
            v10[2] = v15;
            goto LABEL_22;
          }
          *(_QWORD *)v10 = *(_QWORD *)v14;
          *(_QWORD *)v14 = v19;
          v10[2] = v18;
          *v17 = v16;
          v32 = *((float *)a2 - 2);
          if (v32 < v16)
          {
            *(_QWORD *)v14 = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v19;
            *v17 = v32;
LABEL_22:
            *((float *)a2 - 2) = v16;
          }
        }
        v33 = &v10[4 * v13];
        v35 = *(v33 - 2);
        v34 = v33 - 2;
        v36 = v35;
        v37 = v34 - 2;
        v38 = v10[6];
        v39 = *((float *)a2 - 6);
        if (v35 >= v38)
        {
          if (v39 < v36)
          {
            v41 = *(_QWORD *)v37;
            *(_QWORD *)v37 = *((_QWORD *)a2 - 4);
            *((_QWORD *)a2 - 4) = v41;
            *v34 = v39;
            *((float *)a2 - 6) = v36;
            v42 = *v34;
            v43 = v10[6];
            if (*v34 < v43)
            {
              v44 = *((_QWORD *)v10 + 2);
              *((_QWORD *)v10 + 2) = *(_QWORD *)v37;
              *(_QWORD *)v37 = v44;
              v10[6] = v42;
              *v34 = v43;
            }
          }
        }
        else
        {
          v40 = *((_QWORD *)v10 + 2);
          if (v39 < v36)
          {
            *((_QWORD *)v10 + 2) = *((_QWORD *)a2 - 4);
            *((_QWORD *)a2 - 4) = v40;
            v10[6] = v39;
            goto LABEL_36;
          }
          *((_QWORD *)v10 + 2) = *(_QWORD *)v37;
          *(_QWORD *)v37 = v40;
          v10[6] = v36;
          *v34 = v38;
          v48 = *((float *)a2 - 6);
          if (v48 < v38)
          {
            *(_QWORD *)v37 = *((_QWORD *)a2 - 4);
            *((_QWORD *)a2 - 4) = v40;
            *v34 = v48;
LABEL_36:
            *((float *)a2 - 6) = v38;
          }
        }
        v49 = &v10[4 * v13];
        v51 = v49[6];
        v50 = v49 + 6;
        v52 = v51;
        v53 = v50 - 2;
        v54 = v10[10];
        v55 = *((float *)a2 - 10);
        if (v51 >= v54)
        {
          if (v55 < v52)
          {
            v57 = *(_QWORD *)v53;
            *(_QWORD *)v53 = *((_QWORD *)a2 - 6);
            *((_QWORD *)a2 - 6) = v57;
            *v50 = v55;
            *((float *)a2 - 10) = v52;
            v58 = *v50;
            v59 = v10[10];
            if (*v50 < v59)
            {
              v60 = *((_QWORD *)v10 + 4);
              *((_QWORD *)v10 + 4) = *(_QWORD *)v53;
              *(_QWORD *)v53 = v60;
              v10[10] = v58;
              *v50 = v59;
            }
          }
        }
        else
        {
          v56 = *((_QWORD *)v10 + 4);
          if (v55 < v52)
          {
            *((_QWORD *)v10 + 4) = *((_QWORD *)a2 - 6);
            *((_QWORD *)a2 - 6) = v56;
            v10[10] = v55;
            goto LABEL_45;
          }
          *((_QWORD *)v10 + 4) = *(_QWORD *)v53;
          *(_QWORD *)v53 = v56;
          v10[10] = v52;
          *v50 = v54;
          v61 = *((float *)a2 - 10);
          if (v61 < v54)
          {
            *(_QWORD *)v53 = *((_QWORD *)a2 - 6);
            *((_QWORD *)a2 - 6) = v56;
            *v50 = v61;
LABEL_45:
            *((float *)a2 - 10) = v54;
          }
        }
        v62 = *v17;
        v63 = *v34;
        v64 = *v50;
        if (*v17 >= *v34)
        {
          v65 = *(_QWORD *)v14;
          if (v64 >= v62)
          {
            v63 = *v17;
          }
          else
          {
            v66 = *(_QWORD *)v53;
            *(_QWORD *)v14 = *(_QWORD *)v53;
            *(_QWORD *)v53 = v65;
            *v17 = v64;
            *v50 = v62;
            if (v64 >= v63)
            {
              v63 = v64;
              v65 = v66;
            }
            else
            {
              v65 = *(_QWORD *)v37;
              *(_QWORD *)v37 = v66;
              *(_QWORD *)v14 = v65;
              *v34 = v64;
              *v17 = v63;
            }
          }
        }
        else
        {
          v65 = *(_QWORD *)v37;
          if (v64 >= v62)
          {
            *(_QWORD *)v37 = *(_QWORD *)v14;
            *(_QWORD *)v14 = v65;
            *v34 = v62;
            *v17 = v63;
            if (v64 < v63)
            {
              v67 = *(_QWORD *)v53;
              *(_QWORD *)v14 = *(_QWORD *)v53;
              *(_QWORD *)v53 = v65;
              *v17 = v64;
              *v50 = v63;
              v63 = v64;
              v65 = v67;
            }
          }
          else
          {
            *(_QWORD *)v37 = *(_QWORD *)v53;
            *(_QWORD *)v53 = v65;
            *v34 = v64;
            *v50 = v63;
            v65 = *(_QWORD *)v14;
            v63 = v62;
          }
        }
        v68 = *(_QWORD *)v10;
        *(_QWORD *)v10 = v65;
        *(_QWORD *)v14 = v68;
        v69 = *((_DWORD *)v10 + 2);
        v10[2] = v63;
        *(_DWORD *)v17 = v69;
        --a4;
        if ((a5 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v46 = *(_QWORD *)v10;
        v47 = v10[2];
LABEL_58:
        v70 = 0;
        do
        {
          v71 = v10[v70 + 6];
          v70 += 4;
        }
        while (v71 < v47);
        v72 = &v10[v70];
        v73 = a2;
        if (v70 == 4)
        {
          v76 = a2;
          while (v72 < (float *)v76)
          {
            v74 = v76 - 16;
            v77 = *((float *)v76 - 2);
            v76 -= 16;
            if (v77 < v47)
              goto LABEL_66;
          }
          v74 = v76;
          v10 = v72;
        }
        else
        {
          do
          {
            v74 = v73 - 16;
            v75 = *((float *)v73 - 2);
            v73 -= 16;
          }
          while (v75 >= v47);
LABEL_66:
          v10 = v72;
          if (v72 < (float *)v74)
          {
            v78 = (unint64_t)v74;
            do
            {
              v79 = *(_QWORD *)v10;
              *(_QWORD *)v10 = *(_QWORD *)v78;
              *(_QWORD *)v78 = v79;
              v80 = *((_DWORD *)v10 + 2);
              v10[2] = *(float *)(v78 + 8);
              *(_DWORD *)(v78 + 8) = v80;
              do
              {
                v81 = v10[6];
                v10 += 4;
              }
              while (v81 < v47);
              do
              {
                v82 = *(float *)(v78 - 8);
                v78 -= 16;
              }
              while (v82 >= v47);
            }
            while ((unint64_t)v10 < v78);
          }
        }
        if (v10 - 4 != v9)
        {
          *(_QWORD *)v9 = *((_QWORD *)v10 - 2);
          v9[2] = *(v10 - 2);
        }
        *((_QWORD *)v10 - 2) = v46;
        *(v10 - 2) = v47;
        if (v72 < (float *)v74)
        {
LABEL_77:
          result = (float *)sub_2396D7C40(v9, v10 - 4, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v83 = sub_2396D8620(v9, v10 - 4);
        result = (float *)sub_2396D8620(v10, (float *)a2);
        if (!(_DWORD)result)
        {
          if (v83)
            continue;
          goto LABEL_77;
        }
        a2 = (char *)(v10 - 4);
        if (!v83)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_2396D8620(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float *v38;
  uint64_t v39;
  int v40;
  float *v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = a1[2];
      if (v6 < v7)
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = v8;
        a1[2] = v6;
        *(a2 - 2) = v7;
      }
      return result;
    case 3:
      v9 = a1[6];
      v10 = a1[2];
      v11 = *(a2 - 2);
      if (v9 >= v10)
      {
        if (v11 < v9)
        {
          v30 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 2) = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v30;
          a1[6] = v11;
          *(a2 - 2) = v9;
          v31 = a1[6];
          v32 = a1[2];
          if (v31 < v32)
          {
            v33 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *((_QWORD *)a1 + 2);
            *((_QWORD *)a1 + 2) = v33;
            a1[2] = v31;
            a1[6] = v32;
          }
        }
      }
      else
      {
        v12 = *(_QWORD *)a1;
        if (v11 >= v9)
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 2) = v12;
          a1[2] = v9;
          a1[6] = v10;
          v37 = *(a2 - 2);
          if (v37 < v10)
          {
            *((_QWORD *)a1 + 2) = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v12;
            a1[6] = v37;
            *(a2 - 2) = v10;
          }
        }
        else
        {
          *(_QWORD *)a1 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v12;
          a1[2] = v11;
          *(a2 - 2) = v10;
        }
      }
      return result;
    case 4:
      sub_2396D89CC(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      sub_2396D89CC(a1, a1 + 4, a1 + 8, a1 + 12);
      v19 = *(a2 - 2);
      v20 = a1[14];
      if (v19 >= v20)
        return 1;
      v21 = *((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 - 2);
      *((_QWORD *)a2 - 2) = v21;
      a1[14] = v19;
      *(a2 - 2) = v20;
      v22 = a1[14];
      v23 = a1[10];
      if (v22 >= v23)
        return 1;
      v24 = *((_QWORD *)a1 + 4);
      v25 = *((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 4) = v25;
      *((_QWORD *)a1 + 6) = v24;
      a1[10] = v22;
      a1[14] = v23;
      v26 = a1[6];
      if (v22 >= v26)
        return 1;
      v27 = *((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v25;
      *((_QWORD *)a1 + 4) = v27;
      a1[6] = v22;
      a1[10] = v26;
      v28 = a1[2];
      if (v22 >= v28)
        return 1;
      v29 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v25;
      *((_QWORD *)a1 + 2) = v29;
      a1[2] = v22;
      a1[6] = v28;
      return 1;
    default:
      v13 = a1[2];
      v14 = a1 + 6;
      v15 = a1[6];
      v16 = a1[10];
      if (v15 < v13)
      {
        v17 = *(_QWORD *)a1;
        if (v16 >= v15)
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 2) = v17;
          a1[2] = v15;
          a1[6] = v13;
          if (v16 >= v13)
            goto LABEL_30;
          *((_QWORD *)a1 + 2) = *((_QWORD *)a1 + 4);
          *((_QWORD *)a1 + 4) = v17;
          v18 = a1 + 6;
        }
        else
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 4);
          *((_QWORD *)a1 + 4) = v17;
          v18 = a1 + 2;
        }
        v14 = a1 + 10;
        goto LABEL_29;
      }
      if (v16 < v15)
      {
        v34 = *((_QWORD *)a1 + 2);
        v35 = *((_QWORD *)a1 + 4);
        *((_QWORD *)a1 + 2) = v35;
        *((_QWORD *)a1 + 4) = v34;
        a1[6] = v16;
        a1[10] = v15;
        if (v16 < v13)
        {
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v35;
          *((_QWORD *)a1 + 2) = v36;
          v18 = a1 + 2;
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = a1 + 8;
      while (1)
      {
        v42 = v38[2];
        if (v42 < v41[2])
          break;
LABEL_39:
        v41 = v38;
        v39 += 16;
        v38 += 4;
        if (v38 == a2)
          return 1;
      }
      v43 = *(_QWORD *)v38;
      v44 = v39;
      do
      {
        v45 = (char *)a1 + v44;
        *((_QWORD *)v45 + 6) = *(_QWORD *)((char *)a1 + v44 + 32);
        *((float *)v45 + 14) = *(float *)((char *)a1 + v44 + 40);
        if (v44 == -32)
        {
          *(_QWORD *)a1 = v43;
          a1[2] = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 4 == a2;
        }
        v44 -= 16;
      }
      while (v42 < *((float *)v45 + 6));
      v46 = (char *)a1 + v44;
      *((_QWORD *)v46 + 6) = v43;
      *((float *)v46 + 14) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 4 == a2;
  }
}

float *sub_2396D89CC(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;

  v4 = a2[2];
  v5 = result[2];
  v6 = a3[2];
  if (v4 < v5)
  {
    v7 = *(_QWORD *)result;
    if (v6 >= v4)
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v7;
      result[2] = v4;
      a2[2] = v5;
      v4 = a3[2];
      if (v4 >= v5)
        goto LABEL_11;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v7;
      a2[2] = v4;
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      *(_QWORD *)a3 = v7;
      result[2] = v6;
    }
    a3[2] = v5;
    v4 = v5;
LABEL_11:
    v12 = a4[2];
    if (v12 >= v4)
      return result;
    goto LABEL_14;
  }
  if (v6 >= v4)
  {
    v4 = a3[2];
    v12 = a4[2];
    if (v12 >= v6)
      return result;
    goto LABEL_14;
  }
  v8 = *(_QWORD *)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v8;
  a2[2] = v6;
  a3[2] = v4;
  v9 = a2[2];
  v10 = result[2];
  if (v9 >= v10)
    goto LABEL_11;
  v11 = *(_QWORD *)result;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v11;
  result[2] = v9;
  a2[2] = v10;
  v4 = a3[2];
  v12 = a4[2];
  if (v12 >= v4)
    return result;
LABEL_14:
  v13 = *(_QWORD *)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v13;
  a3[2] = v12;
  a4[2] = v4;
  v14 = a3[2];
  v15 = a2[2];
  if (v14 < v15)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v16;
    a2[2] = v14;
    a3[2] = v15;
    v17 = a2[2];
    v18 = result[2];
    if (v17 < v18)
    {
      v19 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v19;
      result[2] = v17;
      a2[2] = v18;
    }
  }
  return result;
}

uint64_t *sub_2396D8B20(char *a1, char *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  float v6;
  float *v7;
  float v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  float v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  float v40;
  float v41;
  float *v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = (a2 - a1) >> 4;
  if (a2 - a1 >= 17 && (unint64_t)v3 >= 0x20)
  {
    v36 = (unint64_t)(v4 - 2) >> 1;
    v37 = v36;
    do
    {
      if (v36 >= v37)
      {
        v38 = (2 * v37) | 1;
        v39 = (uint64_t *)&a1[16 * v38];
        if (2 * v37 + 2 < v4 && *((float *)v39 + 2) < *((float *)v39 + 6))
        {
          v39 += 2;
          v38 = 2 * v37 + 2;
        }
        v40 = *((float *)v39 + 2);
        v41 = *(float *)&a1[16 * v37 + 8];
        if (v40 >= v41)
        {
          v42 = (float *)&a1[16 * v37];
          v43 = *(_QWORD *)v42;
          do
          {
            v44 = v42;
            v42 = (float *)v39;
            *(_QWORD *)v44 = *v39;
            v44[2] = v40;
            if (v36 < v38)
              break;
            v45 = 2 * v38;
            v38 = (2 * v38) | 1;
            v39 = (uint64_t *)&a1[16 * v38];
            v46 = v45 + 2;
            if (v46 < v4 && *((float *)v39 + 2) < *((float *)v39 + 6))
            {
              v39 += 2;
              v38 = v46;
            }
            v40 = *((float *)v39 + 2);
          }
          while (v40 >= v41);
          *(_QWORD *)v42 = v43;
          v42[2] = v41;
        }
      }
      v22 = v37-- <= 0;
    }
    while (!v22);
  }
  v5 = (uint64_t *)a2;
  if (a2 != (char *)a3)
  {
    if (v3 < 32)
    {
      v6 = *((float *)a1 + 2);
      v7 = (float *)a2;
      do
      {
        v8 = v7[2];
        if (v8 < v6)
        {
          v9 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v9;
          v7[2] = v6;
          *((float *)a1 + 2) = v8;
          v6 = v8;
        }
        v7 += 4;
      }
      while (v7 != (float *)a3);
LABEL_25:
      v5 = a3;
      goto LABEL_26;
    }
    v10 = (float *)a2;
    while (1)
    {
      v11 = v10[2];
      v12 = *((float *)a1 + 2);
      if (v11 < v12)
      {
        v13 = *(_QWORD *)v10;
        *(_QWORD *)v10 = *(_QWORD *)a1;
        *(_QWORD *)a1 = v13;
        v10[2] = v12;
        *((float *)a1 + 2) = v11;
        if (v3 == 32 || *((float *)a1 + 6) >= *((float *)a1 + 10))
        {
          v14 = (uint64_t *)(a1 + 16);
          v15 = 1;
          v16 = *((float *)a1 + 6);
          if (v16 >= v11)
          {
LABEL_19:
            v17 = (uint64_t *)a1;
            do
            {
              v18 = v17;
              v17 = v14;
              *v18 = *v14;
              *((float *)v18 + 2) = v16;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v15)
                break;
              v19 = 2 * v15;
              v15 = (2 * v15) | 1;
              v14 = (uint64_t *)&a1[16 * v15];
              v20 = v19 + 2;
              if (v20 < v4 && *((float *)v14 + 2) < *((float *)v14 + 6))
              {
                v14 += 2;
                v15 = v20;
              }
              v16 = *((float *)v14 + 2);
            }
            while (v16 >= v11);
            *v17 = v13;
            *((float *)v17 + 2) = v11;
          }
        }
        else
        {
          v14 = (uint64_t *)(a1 + 32);
          v15 = 2;
          v16 = *((float *)a1 + 10);
          if (v16 >= v11)
            goto LABEL_19;
        }
      }
      v10 += 4;
      if (v10 == (float *)a3)
        goto LABEL_25;
    }
  }
LABEL_26:
  if (v3 >= 17)
  {
    v21 = (unint64_t)v3 >> 4;
    do
    {
      v23 = 0;
      v24 = *(_QWORD *)a1;
      v25 = *((float *)a1 + 2);
      v26 = (uint64_t *)a1;
      do
      {
        v27 = v26;
        v26 += 2 * v23 + 2;
        v28 = 2 * v23;
        v23 = (2 * v23) | 1;
        v29 = v28 + 2;
        if (v29 < v21 && *((float *)v26 + 2) < *((float *)v26 + 6))
        {
          v26 += 2;
          v23 = v29;
        }
        *v27 = *v26;
        *((_DWORD *)v27 + 2) = *((_DWORD *)v26 + 2);
      }
      while (v23 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
      if (v26 == (uint64_t *)(a2 - 16))
      {
        *v26 = v24;
      }
      else
      {
        *v26 = *((_QWORD *)a2 - 2);
        *((_DWORD *)v26 + 2) = *((_DWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = v24;
        *((float *)a2 - 2) = v25;
        v30 = (char *)v26 - a1 + 16;
        if (v30 < 17)
          goto LABEL_30;
        v31 = (((unint64_t)v30 >> 4) - 2) >> 1;
        v32 = *(float *)&a1[16 * v31 + 8];
        v25 = *((float *)v26 + 2);
        if (v32 >= v25)
          goto LABEL_30;
        v33 = *v26;
        do
        {
          v34 = v26;
          v26 = (uint64_t *)&a1[16 * v31];
          *v34 = *v26;
          *((float *)v34 + 2) = v32;
          if (!v31)
            break;
          v31 = (v31 - 1) >> 1;
          v32 = *(float *)&a1[16 * v31 + 8];
        }
        while (v32 < v25);
        *v26 = v33;
      }
      *((float *)v26 + 2) = v25;
LABEL_30:
      a2 -= 16;
      v22 = v21-- <= 2;
    }
    while (!v22);
  }
  return v5;
}

BOOL sub_2396D8EC8(uint64_t a1, uint64_t *a2, float32x4_t *a3, uint64_t a4)
{
  float v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  _BOOL8 v18;
  void *exception;
  int v21;
  void *__p;
  void *v23;
  uint64_t v24;

  if (!*(_QWORD *)(a1 + 40))
    return 0;
  if (!*(_QWORD *)(a1 + 24))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "[nanoflann] findNeighbors() called before building the index.");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v7 = *(float *)(a4 + 4);
  __p = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  sub_2396D7A1C((uint64_t)&__p, *(int *)(a1 + 56), (const float *)&v21);
  v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 >= 1)
  {
    v9 = (float *)__p;
    v10 = (float *)(*(_QWORD *)(a1 + 64) + 4);
    v11 = 0.0;
    v12 = (float *)a3;
    while (1)
    {
      v13 = *v12;
      v14 = *(v10 - 1);
      if (*v12 < v14)
      {
        v16 = (float)(v13 - v14) * (float)(v13 - v14);
        *v9 = v16;
        v11 = v11 + v16;
        v13 = *v12;
        v15 = *v10;
        if (*v12 > *v10)
        {
LABEL_10:
          v17 = (float)(v13 - v15) * (float)(v13 - v15);
          *v9 = v17;
          v11 = v11 + v17;
        }
      }
      else
      {
        v15 = *v10;
        if (v13 > *v10)
          goto LABEL_10;
      }
      ++v9;
      v10 += 2;
      ++v12;
      if (!--v8)
        goto LABEL_13;
    }
  }
  v11 = 0.0;
LABEL_13:
  sub_2396D9078((uint64_t *)a1, a2, a3, *(int **)(a1 + 24), (uint64_t *)&__p, v11, v7 + 1.0);
  v18 = a2[3] == a2[2];
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  return v18;
}

void sub_2396D903C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2396D9050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396D9078(uint64_t *a1, uint64_t *a2, float32x4_t *a3, int *a4, uint64_t *a5, float a6, float a7)
{
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  float v41;
  float32x4_t *v42;
  unint64_t v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  unint64_t v55;
  float *v56;
  _QWORD *v57;
  float v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  float *v63;
  float v64;

  v13 = *((_QWORD *)a4 + 2);
  if (!v13 && !*((_QWORD *)a4 + 3))
  {
    v29 = *(_QWORD *)a4;
    if (*(_QWORD *)a4 >= *((_QWORD *)a4 + 1))
      return 1;
    v30 = a2[1];
    v31 = a2[2];
    v32 = *a2;
    v33 = *(float *)(v30 + 4 * v31 - 4);
    v34 = *a1;
    v35 = *((int *)a1 + 14);
    if ((_DWORD)v35)
    {
      v36 = (uint64_t *)a1[18];
      v37 = *((int *)v36 + 7);
      v38 = *v36;
      while (1)
      {
        v39 = *(_QWORD *)(v34 + 8 * v29);
        if (v35 >= 8)
        {
          v42 = (float32x4_t *)(v38 + 16 + 4 * v37 * v39);
          v41 = 0.0;
          v43 = v35 & 0xFFFFFFFFFFFFFFF8;
          v44 = a3 + 1;
          do
          {
            v45 = vsubq_f32(v44[-1], v42[-1]);
            v46 = vsubq_f32(*v44, *v42);
            v47 = vmulq_f32(v45, v45);
            v48 = vmulq_f32(v46, v46);
            v41 = (float)((float)((float)((float)((float)((float)((float)(v41 + v47.f32[0]) + v47.f32[1]) + v47.f32[2])
                                                + v47.f32[3])
                                        + v48.f32[0])
                                + v48.f32[1])
                        + v48.f32[2])
                + v48.f32[3];
            v44 += 2;
            v42 += 2;
            v43 -= 8;
          }
          while (v43);
          v40 = v35 & 0xFFFFFFFFFFFFFFF8;
          if ((v35 & 0xFFFFFFFFFFFFFFF8) == v35)
            goto LABEL_29;
        }
        else
        {
          v40 = 0;
          v41 = 0.0;
        }
        v49 = v35 - v40;
        v50 = (float *)(v38 + 4 * (v40 + v39 * v37));
        v51 = &a3->f32[v40];
        do
        {
          v52 = *v51++;
          v53 = v52;
          v54 = *v50++;
          v41 = v41 + (float)((float)(v53 - v54) * (float)(v53 - v54));
          --v49;
        }
        while (v49);
LABEL_29:
        if (v41 < v33)
        {
          v55 = a2[3];
          if (v55)
          {
            v56 = (float *)(v30 + 4 * v55);
            v57 = (_QWORD *)(*a2 + 8 * v55);
            while (1)
            {
              v58 = *(v56 - 1);
              v31 = a2[2];
              if (v58 <= v41)
                break;
              if (v55 < v31)
              {
                *v56 = v58;
                *v57 = *(v57 - 1);
              }
              --v56;
              --v57;
              if (!--v55)
              {
                v31 = a2[2];
                break;
              }
            }
          }
          if (v55 < v31)
          {
            *(float *)(v30 + 4 * v55) = v41;
            *(_QWORD *)(v32 + 8 * v55) = v39;
            v31 = a2[2];
          }
          v59 = a2[3];
          if (v59 < v31)
            a2[3] = v59 + 1;
        }
        if ((unint64_t)++v29 >= *((_QWORD *)a4 + 1))
          return 1;
      }
    }
    if (v33 <= 0.0)
      return 1;
    v60 = a2[3];
    result = 1;
    while (1)
    {
      v61 = *(_QWORD *)(v34 + 8 * v29);
      if (v60)
      {
        v62 = (_QWORD *)(*a2 + 8 * v60);
        v63 = (float *)(v30 + 4 * v60);
        while (1)
        {
          v64 = *(v63 - 1);
          v31 = a2[2];
          if (v64 <= 0.0)
            break;
          if (v60 < v31)
          {
            *v63 = v64;
            *v62 = *(v62 - 1);
          }
          --v62;
          --v63;
          if (!--v60)
          {
            v31 = a2[2];
            break;
          }
        }
      }
      if (v60 < v31)
      {
        *(_DWORD *)(v30 + 4 * v60) = 0;
        *(_QWORD *)(v32 + 8 * v60) = v61;
        v31 = a2[2];
        v60 = a2[3];
        if (v60 < v31)
LABEL_55:
          a2[3] = ++v60;
      }
      else
      {
        v60 = a2[3];
        if (v60 < v31)
          goto LABEL_55;
      }
      if ((unint64_t)++v29 >= *((_QWORD *)a4 + 1))
        return result;
    }
  }
  v14 = *a4;
  v15 = a3->f32[v14];
  v16 = *((float *)a4 + 1);
  v17 = *((float *)a4 + 2);
  v18 = v15 - v16;
  v19 = v15 - v17;
  v20 = (float)(v15 - v16) + (float)(v15 - v17);
  v21 = *((_QWORD *)a4 + 3);
  if (v20 >= 0.0)
    v22 = *((_QWORD *)a4 + 3);
  else
    v22 = *((_QWORD *)a4 + 2);
  if (v20 >= 0.0)
    v23 = v13;
  else
    v23 = v21;
  result = sub_2396D9078(a1, a2, a3, v22, a5, a6, a7);
  if ((_DWORD)result)
  {
    v25 = v18 * v18;
    if (v20 < 0.0)
      v25 = v19 * v19;
    v26 = *a5;
    v27 = *(float *)(*a5 + 4 * v14);
    v28 = (float)(v25 + a6) - v27;
    *(float *)(*a5 + 4 * v14) = v25;
    if ((float)(v28 * a7) <= *(float *)(a2[1] + 4 * a2[2] - 4))
    {
      result = sub_2396D9078(a1, a2, a3, v23, a5, v28, a7);
      if (!(_DWORD)result)
        return result;
      v26 = *a5;
    }
    *(float *)(v26 + 4 * v14) = v27;
    return 1;
  }
  return result;
}

uint64_t sub_2396D93E4(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  uint64_t v19;
  char *v20;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_2394189F8();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_239418A80();
    v7 = (char *)operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v19 = (uint64_t)&v7[80 * v3];
  v20 = &v7[80 * v6];
  sub_2396D61AC(v19, a2);
  v8 = v19 + 80;
  v9 = (char *)*a1;
  v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v19;
    a1[1] = v8;
    a1[2] = (uint64_t)v20;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = v19 + v11;
      v13 = &v10[v11];
      *(_QWORD *)(v12 - 80) = 0;
      *(_QWORD *)(v12 - 72) = 0;
      *(_QWORD *)(v12 - 64) = 0;
      *(_OWORD *)(v12 - 80) = *(_OWORD *)&v10[v11 - 80];
      *(_QWORD *)(v12 - 64) = *(_QWORD *)&v10[v11 - 64];
      *((_QWORD *)v13 - 9) = 0;
      *((_QWORD *)v13 - 8) = 0;
      *((_QWORD *)v13 - 10) = 0;
      *(_OWORD *)(v12 - 56) = *(_OWORD *)&v10[v11 - 56];
      *(_QWORD *)(v12 - 32) = 0;
      *(_QWORD *)(v12 - 24) = 0;
      *(_QWORD *)(v12 - 40) = 0;
      *(_OWORD *)(v12 - 40) = *(_OWORD *)&v10[v11 - 40];
      *(_QWORD *)(v12 - 24) = *(_QWORD *)&v10[v11 - 24];
      *((_QWORD *)v13 - 5) = 0;
      *((_QWORD *)v13 - 4) = 0;
      *((_QWORD *)v13 - 3) = 0;
      v14 = *(_QWORD *)&v10[v11 - 16];
      *(_DWORD *)(v12 - 8) = *(_DWORD *)&v10[v11 - 8];
      *(_QWORD *)(v12 - 16) = v14;
      v11 -= 80;
    }
    while (&v10[v11] != v9);
    v15 = (char *)*a1;
    v10 = (char *)a1[1];
    *a1 = v19 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v20;
    if (v10 != v15)
    {
      do
      {
        v16 = (void *)*((_QWORD *)v10 - 5);
        if (v16)
        {
          *((_QWORD *)v10 - 4) = v16;
          operator delete(v16);
        }
        v17 = (void *)*((_QWORD *)v10 - 10);
        if (v17)
        {
          *((_QWORD *)v10 - 9) = v17;
          operator delete(v17);
        }
        v10 -= 80;
      }
      while (v10 != v15);
      v10 = v15;
    }
  }
  if (v10)
    operator delete(v10);
  return v19 + 80;
}

void sub_2396D95C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2396D95DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2396D95DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void **v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 80);
    *(_QWORD *)(a1 + 16) = i - 80;
    v5 = *(void **)(i - 40);
    if (v5)
    {
      *(_QWORD *)(i - 32) = v5;
      operator delete(v5);
    }
    v6 = *v4;
    if (*v4)
    {
      *(_QWORD *)(i - 72) = v6;
      operator delete(v6);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_2396D9650(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == v8)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v15 = *a4;
  v12[2] = *a3;
  v12[3] = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v12 = *v19;
LABEL_61:
      *v19 = v12;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_37;
    if (prime < v9)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v9)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v27 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v4 = v8 % v9;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v8;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v8));
      if (v19)
        goto LABEL_26;
    }
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v28 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v28 >= v9)
        v28 %= v9;
    }
    else
    {
      v28 &= v9 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_2396D9958(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396D996C(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == v8)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v15 = *a4;
  v12[2] = *a3;
  v12[3] = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v12 = *v19;
LABEL_61:
      *v19 = v12;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_37;
    if (prime < v9)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v9)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v27 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v4 = v8 % v9;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v8;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v8));
      if (v19)
        goto LABEL_26;
    }
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v28 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v28 >= v9)
        v28 %= v9;
    }
    else
    {
      v28 &= v9 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_2396D9C74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2396D9C88(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  uint64_t v19;
  char *v20;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_2394189F8();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_239418A80();
    v7 = (char *)operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v19 = (uint64_t)&v7[80 * v3];
  v20 = &v7[80 * v6];
  sub_2396D61AC(v19, a2);
  v8 = v19 + 80;
  v9 = (char *)*a1;
  v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v19;
    a1[1] = v8;
    a1[2] = (uint64_t)v20;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = v19 + v11;
      v13 = &v10[v11];
      *(_QWORD *)(v12 - 80) = 0;
      *(_QWORD *)(v12 - 72) = 0;
      *(_QWORD *)(v12 - 64) = 0;
      *(_OWORD *)(v12 - 80) = *(_OWORD *)&v10[v11 - 80];
      *(_QWORD *)(v12 - 64) = *(_QWORD *)&v10[v11 - 64];
      *((_QWORD *)v13 - 9) = 0;
      *((_QWORD *)v13 - 8) = 0;
      *((_QWORD *)v13 - 10) = 0;
      *(_OWORD *)(v12 - 56) = *(_OWORD *)&v10[v11 - 56];
      *(_QWORD *)(v12 - 32) = 0;
      *(_QWORD *)(v12 - 24) = 0;
      *(_QWORD *)(v12 - 40) = 0;
      *(_OWORD *)(v12 - 40) = *(_OWORD *)&v10[v11 - 40];
      *(_QWORD *)(v12 - 24) = *(_QWORD *)&v10[v11 - 24];
      *((_QWORD *)v13 - 5) = 0;
      *((_QWORD *)v13 - 4) = 0;
      *((_QWORD *)v13 - 3) = 0;
      v14 = *(_QWORD *)&v10[v11 - 16];
      *(_DWORD *)(v12 - 8) = *(_DWORD *)&v10[v11 - 8];
      *(_QWORD *)(v12 - 16) = v14;
      v11 -= 80;
    }
    while (&v10[v11] != v9);
    v15 = (char *)*a1;
    v10 = (char *)a1[1];
    *a1 = v19 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v20;
    if (v10 != v15)
    {
      do
      {
        v16 = (void *)*((_QWORD *)v10 - 5);
        if (v16)
        {
          *((_QWORD *)v10 - 4) = v16;
          operator delete(v16);
        }
        v17 = (void *)*((_QWORD *)v10 - 10);
        if (v17)
        {
          *((_QWORD *)v10 - 9) = v17;
          operator delete(v17);
        }
        v10 -= 80;
      }
      while (v10 != v15);
      v10 = v15;
    }
  }
  if (v10)
    operator delete(v10);
  return v19 + 80;
}

void sub_2396D9E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2396D95DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396D9E80(void **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;
  void *v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  void *v30;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (char *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 4) < __sz)
  {
    if (v9)
    {
      v10 = (char *)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (void *)*((_QWORD *)v10 - 5);
          if (v12)
          {
            *((_QWORD *)v10 - 4) = v12;
            operator delete(v12);
          }
          v13 = (void *)*((_QWORD *)v10 - 10);
          if (v13)
          {
            *((_QWORD *)v10 - 9) = v13;
            operator delete(v13);
          }
          v10 -= 80;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x333333333333333)
      goto LABEL_48;
    v22 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    v23 = 2 * v22;
    if (2 * v22 <= __sz)
      v23 = __sz;
    v24 = v22 >= 0x199999999999999 ? 0x333333333333333 : v23;
    if (v24 > 0x333333333333333)
LABEL_48:
      sub_2394189F8();
    v25 = 80 * v24;
    v9 = (char *)operator new(80 * v24);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v25];
    if (v6 != a3)
    {
      v26 = 0;
      do
      {
        sub_2396D61AC((uint64_t)&v9[v26], v6 + v26);
        v26 += 80;
      }
      while (v6 + v26 != a3);
      v9 += v26;
    }
LABEL_34:
    a1[1] = v9;
    return;
  }
  v14 = a1[1];
  v15 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v9) >> 4);
  if (v15 >= __sz)
  {
    if (a2 != a3)
    {
      v20 = v9 + 40;
      do
      {
        if ((char *)v6 != v20 - 40)
        {
          sub_2394ECC58((_QWORD *)v20 - 5, *(char **)v6, *(char **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2));
          *((_OWORD *)v20 - 1) = *(_OWORD *)(v6 + 24);
          sub_2394ECC58(v20, *(char **)(v6 + 40), *(char **)(v6 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 48) - *(_QWORD *)(v6 + 40)) >> 2));
        }
        v21 = *(_QWORD *)(v6 + 64);
        *((_DWORD *)v20 + 8) = *(_DWORD *)(v6 + 72);
        *((_QWORD *)v20 + 3) = v21;
        v6 += 80;
        v9 += 80;
        v20 += 80;
      }
      while (v6 != a3);
      v14 = a1[1];
    }
    while (v14 != v9)
    {
      v29 = (void *)*((_QWORD *)v14 - 5);
      if (v29)
      {
        *((_QWORD *)v14 - 4) = v29;
        operator delete(v29);
      }
      v30 = (void *)*((_QWORD *)v14 - 10);
      if (v30)
      {
        *((_QWORD *)v14 - 9) = v30;
        operator delete(v30);
      }
      v14 -= 80;
    }
    goto LABEL_34;
  }
  v16 = a2 + 16 * ((v14 - v9) >> 4);
  if (v14 != v9)
  {
    v17 = v9 + 40;
    v18 = 80 * v15;
    do
    {
      if ((char *)v6 != v17 - 40)
      {
        sub_2394ECC58((_QWORD *)v17 - 5, *(char **)v6, *(char **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2));
        *((_OWORD *)v17 - 1) = *(_OWORD *)(v6 + 24);
        sub_2394ECC58(v17, *(char **)(v6 + 40), *(char **)(v6 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 48) - *(_QWORD *)(v6 + 40)) >> 2));
      }
      v19 = *(_QWORD *)(v6 + 64);
      *((_DWORD *)v17 + 8) = *(_DWORD *)(v6 + 72);
      *((_QWORD *)v17 + 3) = v19;
      v6 += 80;
      v17 += 80;
      v18 -= 80;
    }
    while (v18);
    v9 = (char *)a1[1];
  }
  v27 = v9;
  if (v16 != a3)
  {
    v28 = 0;
    do
    {
      sub_2396D61AC((uint64_t)&v9[v28], v16 + v28);
      v28 += 80;
    }
    while (v16 + v28 != a3);
    v27 = &v9[v28];
  }
  a1[1] = v27;
}

void sub_2396DA194(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v2)
  {
    sub_239EC19C8();
    *(_QWORD *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(_QWORD *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_2396DA1D4(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_2396DA730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_2396DA74C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2396DA760(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2396DA778(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2396DA790(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = vdupq_lane_s64(*a3, 0);
      v19 = (int64x2_t *)(v7 + 16);
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(uint64_t **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + a2;
    if (v12 >> 61)
      sub_2394189F8();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_239418A80();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v11];
    v22 = (uint64_t *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (uint64_t *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vdupq_lane_s64(*a3, 0);
    v27 = (int64x2_t *)&v15[8 * v11 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 8;
      if (v29 < 0x58)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[8 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_QWORD *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
}

void sub_2396DA9F8(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 32) = __p;
  operator delete(__p);
}

void sub_2396DAA00(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = __p;
  operator delete(__p);
}

uint64_t sub_2396DAA08(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  v1 = (unsigned __int8 *)*((unsigned __int8 *)a1 + 23);
  v2 = *((unsigned __int8 *)a1 + 23);
  if (*((char *)a1 + 23) < 0)
  {
    v4 = a1[1];
    if (v4)
    {
      v3 = *a1;
      goto LABEL_6;
    }
    return 0;
  }
  if (!*((_BYTE *)a1 + 23))
    return 0;
  v3 = (unsigned __int8 *)a1;
  v4 = (unsigned __int8 *)*((unsigned __int8 *)a1 + 23);
LABEL_6:
  v5 = &v4[(_QWORD)v3];
  while ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v3 + 60) & 0x400) != 0)
  {
    ++v3;
    if (!--v4)
    {
      v3 = v5;
      break;
    }
  }
  if ((v2 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (unsigned __int8 **)*a1;
  if ((v2 & 0x80u) != 0)
    v1 = a1[1];
  v7 = &v1[(_QWORD)v6];
  if (v3 != v7)
  {
    if (*v3 != 46)
      return 0;
    v8 = v3 + 1;
    if (v8 != v7)
    {
      while ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v8 + 60) & 0x400) != 0)
      {
        if (++v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
      if (v8 != v7)
        return 0;
    }
  }
  if ((v2 & 0x80) != 0)
  {
    if (a1[1] == (unsigned __int8 *)1)
      return **a1 != 46;
  }
  else if (v2 == 1)
  {
    return *a1 != 46;
  }
  return 1;
}

uint64_t sub_2396DAB08(const std::__fs::filesystem::path *a1)
{
  unsigned __int8 v2;
  uint64_t result;
  std::error_code __ec;
  unsigned __int8 v6;

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  std::__fs::filesystem::__status(a1, &__ec);
  v2 = v6;
  if (v6)
  {
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    v2 = v6;
  }
  if (__ec.__val_)
    return 0;
  if (v2 && v2 != 255)
  {
    std::__fs::filesystem::__status(a1, &__ec);
    return !__ec.__val_ && v6 == 2;
  }
  else
  {
    LODWORD(result) = std::__fs::filesystem::__create_directories(a1, &__ec);
    if (__ec.__val_)
      return 0;
    else
      return result;
  }
}

uint64_t sub_2396DABE4(float64x2_t *a1, uint64_t a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  uint64_t v8;
  float *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  float *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  __int16 v29;
  _BYTE *v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  __int16 v36;
  char *v37;
  char *v38;
  __int16 v39;
  char v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char *v56;
  void *v57;
  char *v58;
  int64_t v59;
  int64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _DWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _OWORD *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  int v74;
  uint64_t v75;
  const void **v76;
  _QWORD *v77;
  const void *v78;
  _BYTE *v79;
  int64_t v80;
  char *v81;
  char *v82;
  __int128 v83;
  char *v84;
  __int128 v85;
  char *v86;
  __int128 v87;
  _BYTE *v88;
  __int128 v89;
  void *v90;
  char *v91;
  _QWORD *v92;
  void *v93;
  char *v94;
  void *v95;
  void *v96;
  int v98;
  int v99;
  int v100;
  int v101;
  _OWORD v102[8];
  void *__p[3];
  void *v104[2];
  void *v105;
  void *v106[2];
  _BYTE *v107;
  __int128 v108;
  char *v109;
  __int128 v110;
  char *v111;
  __int128 v112;
  char *v113;

  v3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[2]), a1[3]);
  v102[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a1), a1[1]);
  v102[1] = v3;
  v4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[6]), a1[7]);
  v102[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[4]), a1[5]);
  v102[3] = v4;
  v5 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[10]), a1[11]);
  v102[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[8]), a1[9]);
  v102[5] = v5;
  v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[12]), a1[13]);
  v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[14]), a1[15]);
  v112 = 0uLL;
  v113 = 0;
  v110 = 0uLL;
  v111 = 0;
  v108 = 0uLL;
  v109 = 0;
  v106[0] = 0;
  v106[1] = 0;
  v107 = 0;
  v104[0] = 0;
  v104[1] = 0;
  v105 = 0;
  v100 = *(unsigned __int8 *)(a2 + 80);
  v101 = *(unsigned __int8 *)(a2 + 48);
  v98 = *(unsigned __int8 *)(a2 + 112);
  v99 = *(unsigned __int8 *)(a2 + 144);
  memset(__p, 0, sizeof(__p));
  v102[6] = v6;
  v102[7] = v7;
  sub_2394E9CA8((uint64_t)v102, (const float **)a2, (uint64_t *)__p);
  v9 = *(float **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 != *(_QWORD *)a2)
  {
    v10 = 0;
    while (1)
    {
      if (((*(_QWORD *)((char *)__p[0] + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_5;
      v13 = &v9[3 * v10];
      v14 = (_DWORD *)*((_QWORD *)&v112 + 1);
      if (*((_QWORD *)&v112 + 1) >= (unint64_t)v113)
      {
        v17 = (_DWORD *)v112;
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v112 + 1) - v112) >> 2);
        v19 = v18 + 1;
        if (v18 + 1 > 0x1555555555555555)
          goto LABEL_132;
        if (0x5555555555555556 * ((uint64_t)&v113[-v112] >> 2) > v19)
          v19 = 0x5555555555555556 * ((uint64_t)&v113[-v112] >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v113[-v112] >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v20 = 0x1555555555555555;
        else
          v20 = v19;
        if (v20)
        {
          if (v20 > 0x1555555555555555)
            goto LABEL_129;
          v21 = (char *)operator new(12 * v20);
        }
        else
        {
          v21 = 0;
        }
        v22 = *(_QWORD *)v13;
        v23 = &v21[12 * v18];
        *((float *)v23 + 2) = v13[2];
        *(_QWORD *)v23 = v22;
        v24 = v23;
        if (v14 != v17)
        {
          do
          {
            v25 = *(_QWORD *)(v14 - 3);
            v14 -= 3;
            v26 = v14[2];
            *(_QWORD *)(v24 - 12) = v25;
            v24 -= 12;
            *((_DWORD *)v24 + 2) = v26;
          }
          while (v14 != v17);
          v14 = (_DWORD *)v112;
        }
        v16 = v23 + 12;
        *(_QWORD *)&v112 = v24;
        v113 = &v21[12 * v20];
        if (v14)
          operator delete(v14);
      }
      else
      {
        v15 = *(_QWORD *)v13;
        *(float *)(*((_QWORD *)&v112 + 1) + 8) = v13[2];
        *(_QWORD *)v14 = v15;
        v16 = v14 + 3;
      }
      *((_QWORD *)&v112 + 1) = v16;
      if (v101)
      {
        if (!*(_BYTE *)(a2 + 48))
          goto LABEL_128;
        v27 = *(_QWORD *)(a2 + 24) + 3 * v10;
        v28 = (_BYTE *)*((_QWORD *)&v110 + 1);
        if (*((_QWORD *)&v110 + 1) >= (unint64_t)v111)
        {
          v31 = (_BYTE *)v110;
          v32 = 0xAAAAAAAAAAAAAAABLL * (*((_QWORD *)&v110 + 1) - v110);
          v33 = v32 + 1;
          if (v32 + 1 >= 0x5555555555555556)
            sub_2394189F8();
          if (0x5555555555555556 * (uint64_t)&v111[-v110] > v33)
            v33 = 0x5555555555555556 * (_QWORD)&v111[-v110];
          if (0xAAAAAAAAAAAAAAABLL * (unint64_t)&v111[-v110] >= 0x2AAAAAAAAAAAAAAALL)
            v34 = 0x5555555555555555;
          else
            v34 = v33;
          if (v34)
          {
            if (v34 > 0x5555555555555555)
              goto LABEL_129;
            v35 = (char *)operator new(3 * v34);
          }
          else
          {
            v35 = 0;
          }
          v36 = *(_WORD *)v27;
          v37 = &v35[3 * v32];
          v37[2] = *(_BYTE *)(v27 + 2);
          *(_WORD *)v37 = v36;
          v38 = v37;
          if (v28 != v31)
          {
            do
            {
              v39 = *(_WORD *)(v28 - 3);
              v28 -= 3;
              v40 = v28[2];
              *(_WORD *)(v38 - 3) = v39;
              v38 -= 3;
              v38[2] = v40;
            }
            while (v28 != v31);
            v28 = (_BYTE *)v110;
          }
          v30 = v37 + 3;
          *(_QWORD *)&v110 = v38;
          v111 = &v35[3 * v34];
          if (v28)
            operator delete(v28);
        }
        else
        {
          v29 = *(_WORD *)v27;
          *(_BYTE *)(*((_QWORD *)&v110 + 1) + 2) = *(_BYTE *)(v27 + 2);
          *(_WORD *)v28 = v29;
          v30 = v28 + 3;
        }
        *((_QWORD *)&v110 + 1) = v30;
      }
      if (v100)
      {
        if (!*(_BYTE *)(a2 + 80))
          goto LABEL_128;
        v41 = *(_QWORD *)(a2 + 56) + 12 * v10;
        v42 = (_DWORD *)*((_QWORD *)&v108 + 1);
        if (*((_QWORD *)&v108 + 1) >= (unint64_t)v109)
        {
          v45 = (_DWORD *)v108;
          v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v108 + 1) - v108) >> 2);
          v47 = v46 + 1;
          if (v46 + 1 > 0x1555555555555555)
LABEL_132:
            sub_2394189F8();
          if (0x5555555555555556 * ((uint64_t)&v109[-v108] >> 2) > v47)
            v47 = 0x5555555555555556 * ((uint64_t)&v109[-v108] >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v109[-v108] >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v48 = 0x1555555555555555;
          else
            v48 = v47;
          if (v48)
          {
            if (v48 > 0x1555555555555555)
              goto LABEL_129;
            v49 = (char *)operator new(12 * v48);
          }
          else
          {
            v49 = 0;
          }
          v50 = *(_QWORD *)v41;
          v51 = &v49[12 * v46];
          *((_DWORD *)v51 + 2) = *(_DWORD *)(v41 + 8);
          *(_QWORD *)v51 = v50;
          v52 = v51;
          if (v42 != v45)
          {
            do
            {
              v53 = *(_QWORD *)(v42 - 3);
              v42 -= 3;
              v54 = v42[2];
              *(_QWORD *)(v52 - 12) = v53;
              v52 -= 12;
              *((_DWORD *)v52 + 2) = v54;
            }
            while (v42 != v45);
            v42 = (_DWORD *)v108;
          }
          v44 = v51 + 12;
          *(_QWORD *)&v108 = v52;
          v109 = &v49[12 * v48];
          if (v42)
            operator delete(v42);
        }
        else
        {
          v43 = *(_QWORD *)v41;
          *(_DWORD *)(*((_QWORD *)&v108 + 1) + 8) = *(_DWORD *)(v41 + 8);
          *(_QWORD *)v42 = v43;
          v44 = v42 + 3;
        }
        *((_QWORD *)&v108 + 1) = v44;
      }
      if (v99)
        break;
LABEL_89:
      if (v98)
      {
        if (!*(_BYTE *)(a2 + 112))
LABEL_128:
          sub_2394875CC();
        v75 = *(_QWORD *)(a2 + 88);
        v76 = (const void **)(v75 + 24 * v10);
        v77 = v104[1];
        if (v104[1] >= v105)
        {
          v12 = sub_2395BB144((char **)v104, (uint64_t)v76);
        }
        else
        {
          *(_QWORD *)v104[1] = 0;
          v77[1] = 0;
          v77[2] = 0;
          v78 = *v76;
          v79 = *(_BYTE **)(v75 + 24 * v10 + 8);
          v80 = v79 - (_BYTE *)*v76;
          if (v79 != *v76)
          {
            if (v80 < 0)
              sub_2394189F8();
            v81 = (char *)operator new(v79 - (_BYTE *)*v76);
            *v77 = v81;
            v77[1] = v81;
            v11 = &v81[4 * (v80 >> 2)];
            v77[2] = v11;
            memcpy(v81, v78, v80);
            v77[1] = v11;
          }
          v12 = (char *)(v77 + 3);
        }
        v104[1] = v12;
      }
LABEL_5:
      ++v10;
      v9 = *(float **)a2;
      v8 = *(_QWORD *)(a2 + 8);
      if (v10 >= 0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a2) >> 2))
        goto LABEL_97;
    }
    if (!*(_BYTE *)(a2 + 144))
      goto LABEL_128;
    v55 = *(_QWORD *)(a2 + 120);
    v56 = (char *)v106[1];
    if (v106[1] < v107)
    {
      *(_DWORD *)v106[1] = *(_DWORD *)(v55 + 4 * v10);
      v57 = v56 + 4;
LABEL_88:
      v106[1] = v57;
      goto LABEL_89;
    }
    v58 = (char *)v106[0];
    v59 = (char *)v106[1] - (char *)v106[0];
    v60 = ((char *)v106[1] - (char *)v106[0]) >> 2;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 62)
      sub_2394189F8();
    v62 = v107 - (char *)v106[0];
    if ((v107 - (char *)v106[0]) >> 1 > v61)
      v61 = v62 >> 1;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
      v63 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      if (v63 >> 62)
LABEL_129:
        sub_239418A80();
      v64 = operator new(4 * v63);
      v65 = &v64[4 * v60];
      *v65 = *(_DWORD *)(v55 + 4 * v10);
      v57 = v65 + 1;
      if (v56 == v58)
        goto LABEL_86;
    }
    else
    {
      v64 = 0;
      v65 = (_DWORD *)(4 * v60);
      *(_DWORD *)(4 * v60) = *(_DWORD *)(v55 + 4 * v10);
      v57 = (void *)(4 * v60 + 4);
      if (v56 == v58)
      {
LABEL_86:
        v106[0] = v65;
        v107 = &v64[4 * v63];
        if (v58)
          operator delete(v58);
        goto LABEL_88;
      }
    }
    v66 = v56 - 4 - v58;
    if (v66 < 0x2C)
      goto LABEL_138;
    if ((unint64_t)(v56 - &v64[v59]) < 0x20)
      goto LABEL_138;
    v67 = (v66 >> 2) + 1;
    v68 = 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
    v69 = &v56[-v68];
    v65 = (_DWORD *)((char *)v65 - v68);
    v70 = &v64[4 * v60 - 16];
    v71 = v56 - 16;
    v72 = v67 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v73 = *(_OWORD *)v71;
      *(v70 - 1) = *((_OWORD *)v71 - 1);
      *v70 = v73;
      v70 -= 2;
      v71 -= 32;
      v72 -= 8;
    }
    while (v72);
    v56 = v69;
    if (v67 != (v67 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_138:
      do
      {
        v74 = *((_DWORD *)v56 - 1);
        v56 -= 4;
        *--v65 = v74;
      }
      while (v56 != v58);
    }
    goto LABEL_86;
  }
  v9 = *(float **)(a2 + 8);
LABEL_97:
  *(_OWORD *)a2 = v112;
  *(_QWORD *)&v112 = v9;
  *((_QWORD *)&v112 + 1) = v8;
  v82 = *(char **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v113;
  v113 = v82;
  if (v101)
  {
    if (!*(_BYTE *)(a2 + 48))
      goto LABEL_134;
    v83 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a2 + 24) = v110;
    v110 = v83;
    v84 = *(char **)(a2 + 40);
    *(_QWORD *)(a2 + 40) = v111;
    v111 = v84;
  }
  if (v100)
  {
    if (!*(_BYTE *)(a2 + 80))
      goto LABEL_134;
    v85 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a2 + 56) = v108;
    v108 = v85;
    v86 = *(char **)(a2 + 72);
    *(_QWORD *)(a2 + 72) = v109;
    v109 = v86;
  }
  if (v99)
  {
    if (!*(_BYTE *)(a2 + 144))
      goto LABEL_134;
    v87 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a2 + 120) = *(_OWORD *)v106;
    *(_OWORD *)v106 = v87;
    v88 = *(_BYTE **)(a2 + 136);
    *(_QWORD *)(a2 + 136) = v107;
    v107 = v88;
  }
  if (!v98)
    goto LABEL_109;
  if (!*(_BYTE *)(a2 + 112))
LABEL_134:
    sub_2394875CC();
  v89 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)v104;
  *(_OWORD *)v104 = v89;
  v90 = *(void **)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v105;
  v105 = v90;
LABEL_109:
  if (__p[0])
    operator delete(__p[0]);
  v91 = (char *)v104[0];
  if (v104[0])
  {
    v92 = v104[1];
    v93 = v104[0];
    if (v104[1] != v104[0])
    {
      v94 = (char *)v104[1];
      do
      {
        v96 = (void *)*((_QWORD *)v94 - 3);
        v94 -= 24;
        v95 = v96;
        if (v96)
        {
          *(v92 - 2) = v95;
          operator delete(v95);
        }
        v92 = v94;
      }
      while (v94 != v91);
      v93 = v104[0];
    }
    v104[1] = v91;
    operator delete(v93);
  }
  if (v106[0])
    operator delete(v106[0]);
  if ((_QWORD)v108)
    operator delete((void *)v108);
  if ((_QWORD)v110)
    operator delete((void *)v110);
  if (v9)
    operator delete(v9);
  return 1;
}

void sub_2396DB410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  v39 = *(void **)v36;
  if (*(_QWORD *)v36)
  {
    *(_QWORD *)(v36 + 8) = v39;
    operator delete(v39);
  }
  a32 = v36;
  if (__p)
  {
    operator delete(__p);
    sub_23942A16C(&a31);
    v40 = a35;
    if (!a35)
    {
LABEL_5:
      v41 = *(void **)(v37 - 176);
      if (!v41)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else
  {
    sub_23942A16C(&a31);
    v40 = a35;
    if (!a35)
      goto LABEL_5;
  }
  a36 = (uint64_t)v40;
  operator delete(v40);
  v41 = *(void **)(v37 - 176);
  if (!v41)
  {
LABEL_6:
    v42 = *(void **)(v37 - 144);
    if (!v42)
      goto LABEL_7;
    goto LABEL_12;
  }
LABEL_11:
  *(_QWORD *)(v37 - 168) = v41;
  operator delete(v41);
  v42 = *(void **)(v37 - 144);
  if (!v42)
  {
LABEL_7:
    v43 = *(void **)(v37 - 112);
    if (!v43)
      goto LABEL_8;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v37 - 136) = v42;
  operator delete(v42);
  v43 = *(void **)(v37 - 112);
  if (!v43)
LABEL_8:
    _Unwind_Resume(a1);
LABEL_13:
  *(_QWORD *)(v37 - 104) = v43;
  operator delete(v43);
  _Unwind_Resume(a1);
}

BOOL sub_2396DB4C8()
{
  unint64_t *v0;
  int v1;
  float v2;
  _BOOL8 v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  unsigned int v9;
  uint64_t i;
  unsigned int v11;
  uint64_t j;
  unsigned int v13;
  uint64_t k;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  __int16 v29;
  __int16 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  int *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  _BYTE v61[2504];
  _BYTE __dst[2504];
  std::random_device v63[626];
  _BYTE __p[2504];
  _QWORD v65[314];
  uint64_t v66;
  unint64_t v67;
  _OWORD v68[3];
  uint64_t v69;

  v2 = MEMORY[0x24BDAC7A8]();
  v69 = *MEMORY[0x24BDAC8D0];
  v3 = v2 <= 1.0 && v2 >= 0.0;
  if (v3)
  {
    v4 = v0;
    v5 = *v0;
    v6 = v0[1];
    v7 = v6 - *v0;
    v8 = (float)(0xAAAAAAAAAAAAAAABLL * (v7 >> 2)) * v2;
    v9 = 5489;
    LODWORD(v65[0]) = 5489;
    for (i = 1; i != 624; ++i)
    {
      v9 = i + 1812433253 * (v9 ^ (v9 >> 30));
      *((_DWORD *)v65 + i) = v9;
    }
    v65[312] = 0;
    if (v1)
    {
      v11 = 0;
      LODWORD(v65[0]) = 0;
      for (j = 1; j != 624; ++j)
      {
        v11 = j + 1812433253 * (v11 ^ (v11 >> 30));
        *((_DWORD *)v65 + j) = v11;
      }
      v65[312] = 0;
    }
    else
    {
      __p[23] = 12;
      strcpy(__p, "/dev/urandom");
      std::random_device::random_device(v63, (const std::string *)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v13 = MEMORY[0x23B83DE30](v63);
      LODWORD(v65[0]) = v13;
      for (k = 1; k != 624; ++k)
      {
        v13 = k + 1812433253 * (v13 ^ (v13 >> 30));
        *((_DWORD *)v65 + k) = v13;
      }
      v65[312] = 0;
      std::random_device::~random_device(v63);
      v5 = *v4;
      v6 = v4[1];
      v7 = v6 - *v4;
    }
    memcpy(__p, v65, sizeof(__p));
    memcpy(v63, v65, sizeof(v63));
    memcpy(__dst, v65, sizeof(__dst));
    memcpy(v61, v65, sizeof(v61));
    if (v7 >= 13)
    {
      v68[0] = xmmword_239EC6600;
      if (v6 - 12 > v5)
      {
        v15 = v7 / 0xCuLL - 1;
        do
        {
          v66 = 0;
          v67 = v15;
          v16 = sub_239455AB4((uint64_t)v68, (uint64_t)v65, &v66);
          if (v16)
          {
            v17 = v5 + 12 * v16;
            v18 = *(_DWORD *)(v5 + 8);
            v19 = *(_QWORD *)v5;
            v20 = *(_DWORD *)(v17 + 8);
            *(_QWORD *)v5 = *(_QWORD *)v17;
            *(_DWORD *)(v5 + 8) = v20;
            *(_QWORD *)v17 = v19;
            *(_DWORD *)(v17 + 8) = v18;
          }
          v5 += 12;
          --v15;
        }
        while (v5 < v6 - 12);
        v5 = *v4;
        v6 = v4[1];
      }
    }
    v21 = (unint64_t)v8;
    if (v5 + 12 * (unint64_t)v8 != v6)
      v4[1] = v5 + 12 * (unint64_t)v8;
    if (*((_BYTE *)v4 + 48))
    {
      v23 = v4[3];
      v22 = v4[4];
      if ((uint64_t)(v22 - v23) >= 4)
      {
        v68[0] = xmmword_239EC6600;
        v24 = v22 - 3;
        if (v22 - 3 > v23)
        {
          v25 = (v22 - v23) / 3 - 1;
          do
          {
            v66 = 0;
            v67 = v25;
            v26 = sub_239455AB4((uint64_t)v68, (uint64_t)__p, &v66);
            if (v26)
            {
              v27 = v23 + 3 * v26;
              v28 = *(_BYTE *)(v23 + 2);
              v29 = *(_WORD *)v23;
              v30 = *(_WORD *)v27;
              *(_BYTE *)(v23 + 2) = *(_BYTE *)(v27 + 2);
              *(_WORD *)v23 = v30;
              *(_WORD *)v27 = v29;
              *(_BYTE *)(v27 + 2) = v28;
            }
            v23 += 3;
            --v25;
          }
          while (v23 < v24);
          if (!*((_BYTE *)v4 + 48))
            sub_2394875CC();
        }
      }
      if (v4[3] + 3 * v21 != v4[4])
        v4[4] = v4[3] + 3 * v21;
    }
    if (*((_BYTE *)v4 + 80))
    {
      v32 = v4[7];
      v31 = v4[8];
      if ((uint64_t)(v31 - v32) >= 13)
      {
        v68[0] = xmmword_239EC6600;
        v33 = v31 - 12;
        if (v31 - 12 > v32)
        {
          v34 = (v31 - v32) / 0xC - 1;
          do
          {
            v66 = 0;
            v67 = v34;
            v35 = sub_239455AB4((uint64_t)v68, (uint64_t)v63, &v66);
            if (v35)
            {
              v36 = v32 + 12 * v35;
              v37 = *(_DWORD *)(v32 + 8);
              v38 = *(_QWORD *)v32;
              v39 = *(_DWORD *)(v36 + 8);
              *(_QWORD *)v32 = *(_QWORD *)v36;
              *(_DWORD *)(v32 + 8) = v39;
              *(_QWORD *)v36 = v38;
              *(_DWORD *)(v36 + 8) = v37;
            }
            v32 += 12;
            --v34;
          }
          while (v32 < v33);
          if (!*((_BYTE *)v4 + 80))
            sub_2394875CC();
        }
      }
      if (v4[7] + 12 * v21 != v4[8])
        v4[8] = v4[7] + 12 * v21;
    }
    if (*((_BYTE *)v4 + 144))
    {
      v41 = (int *)v4[15];
      v40 = v4[16];
      if ((uint64_t)(v40 - (_QWORD)v41) >= 5)
      {
        v68[0] = xmmword_239EC6600;
        v42 = v40 - 4;
        if (v40 - 4 > (unint64_t)v41)
        {
          v43 = ((v40 - (unint64_t)v41) >> 2) - 1;
          do
          {
            v66 = 0;
            v67 = v43;
            v44 = sub_239455AB4((uint64_t)v68, (uint64_t)__dst, &v66);
            if (v44)
            {
              v45 = *v41;
              *v41 = v41[v44];
              v41[v44] = v45;
            }
            ++v41;
            --v43;
          }
          while ((unint64_t)v41 < v42);
          if (!*((_BYTE *)v4 + 144))
            sub_2394875CC();
        }
      }
      v46 = v4[15] + 4 * v21;
      if (v46 != v4[16])
        v4[16] = v46;
    }
    if (*((_BYTE *)v4 + 112))
    {
      v48 = v4[11];
      v47 = v4[12];
      if ((uint64_t)(v47 - v48) >= 25)
      {
        v68[0] = xmmword_239EC6600;
        v49 = v47 - 24;
        if (v47 - 24 > v48)
        {
          v50 = (v47 - v48) / 0x18 - 1;
          do
          {
            v66 = 0;
            v67 = v50;
            v51 = sub_239455AB4((uint64_t)v68, (uint64_t)v61, &v66);
            if (v51)
            {
              v52 = v48 + 24 * v51;
              v53 = *(_OWORD *)v48;
              *(_OWORD *)v48 = *(_OWORD *)v52;
              *(_OWORD *)v52 = v53;
              v54 = *(_QWORD *)(v48 + 16);
              *(_QWORD *)(v48 + 16) = *(_QWORD *)(v52 + 16);
              *(_QWORD *)(v52 + 16) = v54;
            }
            v48 += 24;
            --v50;
          }
          while (v48 < v49);
          if (!*((_BYTE *)v4 + 112))
            sub_2394875CC();
        }
      }
      v55 = v4[12];
      v56 = v4[11] + 24 * v21;
      if (v56 != v55)
      {
        v57 = v4[12];
        do
        {
          v59 = *(void **)(v57 - 24);
          v57 -= 24;
          v58 = v59;
          if (v59)
          {
            *(_QWORD *)(v55 - 16) = v58;
            operator delete(v58);
          }
          v55 = v57;
        }
        while (v57 != v56);
        v4[12] = v56;
      }
    }
  }
  return v3;
}

void sub_2396DBC60(_Unwind_Exception *a1)
{
  std::random_device::~random_device((std::random_device *)&STACK[0x1390]);
  _Unwind_Resume(a1);
}

void sub_2396DBC78(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete((void *)STACK[0x1D58]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

float sub_2396DBCA0(_QWORD *a1, uint64_t a2, float a3)
{
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  float *v16;
  uint64_t *v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  float64x2_t v24;
  float64x2_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  double v31;
  float64x2_t v32;
  uint64_t v33;
  float *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  _QWORD *v45;
  float v46;
  unint64_t v47;
  float *v48;
  float *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  float *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  float64x2_t *v61;
  float64x2_t *v62;
  uint64_t v63;
  int v64;
  _QWORD *v65;
  float *v66;
  float *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float *v71;
  float v72;
  uint64_t v73;
  float *v74;
  float v75;
  uint64_t v76;
  float *v77;
  float v78;
  float *v79;
  float *v80;
  int64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  float *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float *v91;
  char *v92;
  float *v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float *v100;
  float v101;
  uint64_t v102;
  float *v103;
  float v104;
  unint64_t *v105;
  _QWORD *v106;
  void *v107;
  _QWORD *v109;
  void *v110;
  uint64_t v111;
  float *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t *v115;
  float64x2_t v116;
  float64x2_t v117;
  uint64_t *v118[3];
  void *v119;
  float *v120;
  char *v121;
  void *__p;
  unint64_t *v123;
  uint64_t v124;
  void *v125[2];
  void *v126[2];
  int v127;
  unint64_t *v128;

  if (a1[1] == *a1)
    return 0.0;
  v5 = a1;
  *(_OWORD *)v125 = 0u;
  *(_OWORD *)v126 = 0u;
  v127 = 1065353216;
  __p = 0;
  v123 = 0;
  v124 = 0;
  sub_2394B5624(a2, (uint64_t)&__p, 1);
  v6 = (unint64_t *)__p;
  v113 = a2;
  v114 = v123;
  v7 = (unint64_t)((char *)v123 - (_BYTE *)__p) >> 3;
  v120 = 0;
  v121 = 0;
  v119 = 0;
  if ((_DWORD)v7)
  {
    if ((v7 & 0x80000000) != 0)
      sub_2394189F8();
    v8 = (int)(((char *)v123 - (_BYTE *)__p) >> 3);
    v9 = (char *)operator new(4 * v8);
    v119 = v9;
    v120 = (float *)v9;
    v121 = &v9[4 * v8];
    if (v6 == v114)
    {
LABEL_88:
      v10 = a3 * 0.0;
      if (v9)
        goto LABEL_102;
      v105 = (unint64_t *)__p;
      if (!__p)
        goto LABEL_91;
LABEL_90:
      v123 = v105;
      operator delete(v105);
      goto LABEL_91;
    }
  }
  else
  {
    v9 = 0;
    if (__p == v123)
      goto LABEL_88;
  }
  __asm { FMOV            V0.2D, #2.0 }
  v117 = _Q0;
  do
  {
    v17 = sub_2394650AC(v113, *v6);
    v18 = *((double *)v17 + 2);
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 2);
    v20 = v19 / 0x64;
    memset(v118, 0, sizeof(v118));
    if ((v19 / 0x64))
    {
      if ((v20 & 0x80000000) != 0)
        sub_2394189F8();
      v21 = (char *)operator new(4 * (int)v20);
      v22 = &v21[4 * (int)(v19 / 0x64)];
    }
    else
    {
      v22 = 0;
      v21 = 0;
    }
    v128 = v6;
    v23 = sub_2396E6184((uint64_t)v125, v6, (uint64_t)&unk_239EC6E98, (uint64_t **)&v128);
    v26 = (void *)v23[3];
    if (v26)
    {
      v23[4] = v26;
      operator delete(v26);
      v23[3] = 0;
      v23[4] = 0;
      v23[5] = 0;
    }
    v23[3] = v21;
    v23[4] = v21;
    v23[5] = v22;
    v28 = *v5;
    v27 = v5[1];
    if (v27 != *v5)
    {
      v29 = 0;
      v30 = v18 * 0.0500000007;
      v31 = (float)-v30;
      v32 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v30), 0);
      v115 = v6;
      v116 = v32;
      while (1)
      {
        v34 = (float *)(v28 + 12 * v29);
        v35 = *v34;
        v36 = v34[1];
        v37 = v34[2];
        v24.f64[0] = *((double *)v17 + 10) * v35 + *((double *)v17 + 14) * v36 + *((double *)v17 + 18) * v37;
        *(_QWORD *)&v25.f64[0] = v17[22];
        v38 = v25.f64[0] + v24.f64[0];
        if (v25.f64[0] + v24.f64[0] <= 0.001)
          goto LABEL_21;
        v39 = *((float64x2_t *)v17 + 4);
        v40 = *((float64x2_t *)v17 + 6);
        v41 = *((float64x2_t *)v17 + 8);
        v42 = *((float64x2_t *)v17 + 10);
        *(_QWORD *)&v41.f64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
        *(_QWORD *)&v40.f64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
        *(_QWORD *)&v39.f64[1] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
        *(_QWORD *)&v42.f64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
        v25 = vdivq_f64(vaddq_f64(v42, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, v35), v40, v36), v41, v37)), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(v25, v24), 0));
        v24 = *((float64x2_t *)v17 + 1);
        v43 = vmlaq_f64(v24, *(float64x2_t *)v17, v25);
        if (v43.f64[0] <= v31 || v43.f64[1] <= v31)
          goto LABEL_21;
        v25 = vmlaq_f64(v32, v117, v24);
        v24 = (float64x2_t)vcgtq_f64(v25, v43);
        *(int32x2_t *)&v24.f64[0] = vmovn_s64((int64x2_t)v24);
        if ((LODWORD(v24.f64[0]) & HIDWORD(v24.f64[0]) & 1) == 0)
          goto LABEL_21;
        v118[0] = (uint64_t *)v6;
        v45 = sub_2396E6184((uint64_t)v125, v6, (uint64_t)&unk_239EC6E98, v118);
        v46 = v38;
        v48 = (float *)v45[4];
        v47 = v45[5];
        if ((unint64_t)v48 >= v47)
          break;
        *v48 = v46;
        v33 = (uint64_t)(v48 + 1);
LABEL_20:
        v32 = v116;
        v45[4] = v33;
        v28 = *v5;
        v27 = v5[1];
LABEL_21:
        v29 += 100;
        if (v29 >= 0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 2))
          goto LABEL_50;
      }
      v49 = (float *)v45[3];
      v50 = v48 - v49;
      v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 62)
        sub_2394189F8();
      v52 = v5;
      v53 = v47 - (_QWORD)v49;
      if (v53 >> 1 > v51)
        v51 = v53 >> 1;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
        v54 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v54 = v51;
      if (v54)
      {
        if (v54 >> 62)
          sub_239418A80();
        v55 = operator new(4 * v54);
        v56 = (float *)&v55[4 * v50];
        *v56 = v46;
        v33 = (uint64_t)(v56 + 1);
        if (v48 == v49)
          goto LABEL_47;
      }
      else
      {
        v55 = 0;
        v56 = (float *)(4 * v50);
        *(float *)(4 * v50) = v46;
        v33 = 4 * v50 + 4;
        if (v48 == v49)
        {
LABEL_47:
          v45[3] = v56;
          v45[4] = v33;
          v45[5] = &v55[4 * v54];
          if (v49)
            operator delete(v49);
          v5 = v52;
          v6 = v115;
          goto LABEL_20;
        }
      }
      v57 = (char *)(v48 - 1) - (char *)v49;
      if (v57 < 0x2C)
        goto LABEL_112;
      if ((unint64_t)((char *)v49 - v55) < 0x20)
        goto LABEL_112;
      v58 = (v57 >> 2) + 1;
      v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
      v60 = &v48[v59 / 0xFFFFFFFFFFFFFFFCLL];
      v56 = (float *)((char *)v56 - v59);
      v61 = (float64x2_t *)&v55[4 * v50 - 16];
      v62 = (float64x2_t *)(v48 - 4);
      v63 = v58 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *v62;
        v61[-1] = v62[-1];
        *v61 = v24;
        v61 -= 2;
        v62 -= 2;
        v63 -= 8;
      }
      while (v63);
      v48 = v60;
      if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_112:
        do
        {
          v64 = *((_DWORD *)v48-- - 1);
          *((_DWORD *)v56-- - 1) = v64;
        }
        while (v48 != v49);
      }
      goto LABEL_47;
    }
LABEL_50:
    v118[0] = (uint64_t *)v6;
    v65 = sub_2396E6184((uint64_t)v125, v6, (uint64_t)&unk_239EC6E98, v118);
    v66 = (float *)v65[3];
    v67 = (float *)v65[4];
    v68 = (char *)v67 - (char *)v66;
    if (v67 == v66)
    {
      v75 = 0.0;
    }
    else
    {
      v69 = v68 << 29;
      if ((v68 & 4) != 0)
      {
        v76 = (v69 - 0x80000000) >> 32;
        v77 = &v66[v76];
        if (v77 != v67)
        {
          sub_2394F1C6C(v66, v77, v67);
          v66 = (float *)v65[3];
        }
        v75 = v66[v76];
      }
      else
      {
        v70 = (int)(v68 >> 3);
        v71 = &v66[v70];
        if (v71 != v67)
        {
          sub_2394F1C6C(v66, v71, v67);
          v66 = (float *)v65[3];
          v67 = (float *)v65[4];
          v69 = ((char *)v67 - (char *)v66) << 29;
        }
        v72 = v66[v70];
        v73 = (v69 - 0x100000000) >> 32;
        v74 = &v66[v73];
        if (v74 != v67)
        {
          sub_2394F1C6C(v66, v74, v67);
          v66 = (float *)v65[3];
        }
        v75 = (float)(v72 + v66[v73]) * 0.5;
      }
    }
    v78 = v75 / *(double *)v17;
    v79 = v120;
    if (v120 < (float *)v121)
    {
      *v120 = v78;
      v16 = v79 + 1;
      goto LABEL_10;
    }
    v80 = (float *)v119;
    v81 = (char *)v120 - (_BYTE *)v119;
    v82 = ((char *)v120 - (_BYTE *)v119) >> 2;
    v83 = v82 + 1;
    if ((unint64_t)(v82 + 1) >> 62)
      sub_2394189F8();
    v84 = v121 - (_BYTE *)v119;
    if ((v121 - (_BYTE *)v119) >> 1 > v83)
      v83 = v84 >> 1;
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
      v85 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v85 = v83;
    if (v85)
    {
      if (v85 >> 62)
        sub_239418A80();
      v86 = (char *)operator new(4 * v85);
      v87 = (float *)&v86[4 * v82];
      *v87 = v78;
      v16 = v87 + 1;
      if (v79 == v80)
        goto LABEL_79;
LABEL_73:
      v88 = (char *)(v79 - 1) - (char *)v80;
      if (v88 < 0x2C)
        goto LABEL_113;
      if ((unint64_t)((char *)v79 - &v86[v81]) < 0x20)
        goto LABEL_113;
      v89 = (v88 >> 2) + 1;
      v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
      v91 = &v79[v90 / 0xFFFFFFFFFFFFFFFCLL];
      v87 = (float *)((char *)v87 - v90);
      v92 = &v86[4 * v82 - 16];
      v93 = v79 - 4;
      v94 = v89 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v95 = *(_OWORD *)v93;
        *((_OWORD *)v92 - 1) = *((_OWORD *)v93 - 1);
        *(_OWORD *)v92 = v95;
        v92 -= 32;
        v93 -= 8;
        v94 -= 8;
      }
      while (v94);
      v79 = v91;
      if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_113:
        do
        {
          v96 = *((_DWORD *)v79-- - 1);
          *((_DWORD *)v87-- - 1) = v96;
        }
        while (v79 != v80);
      }
      goto LABEL_79;
    }
    v86 = 0;
    v87 = (float *)(4 * v82);
    *(float *)(4 * v82) = v78;
    v16 = (float *)(4 * v82 + 4);
    if (v79 != v80)
      goto LABEL_73;
LABEL_79:
    v119 = v87;
    v120 = v16;
    v121 = &v86[4 * v85];
    if (v80)
      operator delete(v80);
LABEL_10:
    v120 = v16;
    ++v6;
  }
  while (v6 != v114);
  v9 = (char *)v119;
  v97 = (char *)v16 - (_BYTE *)v119;
  if (v16 == v119)
    goto LABEL_88;
  v98 = v97 << 29;
  if ((v97 & 4) != 0)
  {
    v111 = (v98 - 0x80000000) >> 32;
    v112 = (float *)((char *)v119 + 4 * v111);
    if (v112 != v16)
    {
      sub_2394F1C6C((float *)v119, v112, v16);
      v9 = (char *)v119;
    }
    v104 = *(float *)&v9[4 * v111];
  }
  else
  {
    v99 = (int)(v97 >> 3);
    v100 = (float *)((char *)v119 + 4 * v99);
    if (v100 != v16)
    {
      sub_2394F1C6C((float *)v119, v100, v16);
      v9 = (char *)v119;
      v16 = v120;
      v98 = ((char *)v120 - (_BYTE *)v119) << 29;
    }
    v101 = *(float *)&v9[4 * v99];
    v102 = (v98 - 0x100000000) >> 32;
    v103 = (float *)&v9[4 * v102];
    if (v103 != v16)
    {
      sub_2394F1C6C((float *)v9, v103, v16);
      v9 = (char *)v119;
    }
    v104 = (float)(v101 + *(float *)&v9[4 * v102]) * 0.5;
  }
  v10 = v104 * a3;
LABEL_102:
  v120 = (float *)v9;
  operator delete(v9);
  v105 = (unint64_t *)__p;
  if (__p)
    goto LABEL_90;
LABEL_91:
  v106 = v126[0];
  if (v126[0])
  {
    do
    {
      v109 = (_QWORD *)*v106;
      v110 = (void *)v106[3];
      if (v110)
      {
        v106[4] = v110;
        operator delete(v110);
      }
      operator delete(v106);
      v106 = v109;
    }
    while (v109);
  }
  v107 = v125[0];
  v125[0] = 0;
  if (v107)
    operator delete(v107);
  return v10;
}

void sub_2396DC498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v28;

  if (__p)
  {
    operator delete(__p);
    v28 = a24;
    if (!a24)
    {
LABEL_3:
      sub_2394630E4((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v28 = a24;
    if (!a24)
      goto LABEL_3;
  }
  operator delete(v28);
  sub_2394630E4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_2396DC540(uint64_t a1, uint64_t a2, char a3, float a4, float a5)
{
  char *v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  size_t prime;
  int v65;
  char *v66;
  unint64_t *v67;
  _BYTE *v68;
  double v69;
  float64x2_t v72;
  uint64_t *v76;
  float64x2_t v77;
  double v78;
  float64x2_t v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t **v82;
  unint64_t v83;
  unint64_t v84;
  float32x2_t *v85;
  uint64_t *v86;
  int8x8_t v87;
  unint64_t v89;
  uint8x8_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  __int16 v96;
  char v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  int v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  __int128 v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  float v124;
  double v125;
  uint8x8_t v126;
  unint64_t v127;
  uint64_t **v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  float32x4_t *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  __int16 v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  int v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  __int16 v165;
  char *v166;
  char *v167;
  __int16 v168;
  char v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _BYTE *v184;
  char *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  _OWORD *v190;
  char *v191;
  uint64_t v192;
  __int128 v193;
  int v194;
  unint64_t v195;
  uint64_t v196;
  float32x4_t v197;
  uint64_t v198;
  char **v199;
  char *v200;
  uint64_t v201;
  char **v202;
  char *v203;
  char *v204;
  float32x4_t v205;
  float32x2_t v206;
  unint64_t v207;
  uint64_t *v208;
  uint64_t **v209;
  uint64_t **v210;
  unint64_t v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  _BYTE *v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  char *v227;
  char *v228;
  float32x4_t v229;
  float32x2_t v230;
  _QWORD *v231;
  int8x16_t v232;
  float32x2_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int *v236;
  _QWORD *v237;
  float32x4_t **v238;
  unsigned int *v239;
  uint64_t v240;
  float32x4_t v241;
  float32x2_t v242;
  unint64_t v243;
  uint64_t *v244;
  uint64_t **v245;
  uint64_t **v246;
  unint64_t v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  _BYTE *v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  float32x4_t v263;
  float32x2_t v264;
  int8x16_t v265;
  float32x2_t v266;
  float32x4_t *v267;
  float32x4_t *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  unint64_t v272;
  int64_t v273;
  int64_t v274;
  char *v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  int64_t v279;
  char *v280;
  _BYTE *v281;
  char *v282;
  char *v283;
  unint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  float32x4_t *v288;
  int64_t v289;
  size_t v290;
  int64_t v291;
  float32x4_t *v292;
  char *v293;
  size_t v294;
  uint64_t v295;
  char *v296;
  char *v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  float32x4_t *v303;
  float32x4_t *v304;
  float32x4_t *v305;
  uint64_t v306;
  __int32 v307;
  char *v308;
  unint64_t v309;
  uint64_t v310;
  float32x4_t *v311;
  float32x4_t *v312;
  uint64_t v313;
  float32x4_t v314;
  int v315;
  size_t v316;
  _BYTE *v317;
  uint64_t v318;
  uint64_t v319;
  float32x4_t *v320;
  float32x4_t *v321;
  uint64_t v322;
  int v323;
  char *v324;
  char *v325;
  char *v326;
  int v327;
  int v328;
  char *v329;
  int v330;
  void *v331;
  char *v332;
  char *v333;
  char *v334;
  uint64_t v335;
  char *v336;
  char *v337;
  char *v338;
  char *v339;
  char *v340;
  void *v341;
  void *v342;
  _QWORD *v343;
  _QWORD *v344;
  void *v345;
  _QWORD *v346;
  _QWORD *v347;
  float32x4_t *v350;
  int v351;
  int v352;
  int v353;
  int v354;
  float64x2_t v355;
  unint64_t i;
  float64x2_t v357;
  float32x2_t v358;
  int64x2_t v359;
  char *v360;
  uint64_t v361;
  int64x2_t v362;
  _QWORD *v363;
  float64x2_t v364;
  float32x4_t v365;
  float32x2_t v366;
  __int128 v368;
  float32x4_t v369;
  unint64_t v370;
  char *v371;
  unsigned int v372;
  void *__p[2];
  char *v374;
  uint64_t v375;
  char v376;
  void *v377;
  char *v378;
  uint64_t v379;
  uint64_t **v380;
  uint64_t *v381;
  uint64_t v382;
  void *v383;
  char *v384;
  char *v385;
  void *v386;
  char *v387;
  char *v388;
  char v389;
  char *v390;
  char *v391;
  char *v392;
  char v393;
  char *v394;
  char *v395;
  unint64_t v396;
  char v397;
  char *v398;
  char *v399;
  char *v400;
  char v401;
  __int128 v402;
  __int128 v403;
  float v404;
  void *v405[8];
  void *v406;
  void *v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  char *v413;
  char *v414;
  int v415;
  int v416;
  char *v417;
  char *v418;
  unint64_t v419;

  v417 = 0;
  v418 = 0;
  v419 = 0;
  v9 = *(char **)a1;
  v8 = *(char **)(a1 + 8);
  v10 = (int64_t)&v8[-*(_QWORD *)a1];
  if (v10)
  {
    v11 = v10 >> 2;
    if ((unint64_t)(v10 >> 2) >> 62)
      sub_2394189F8();
    v12 = (char *)operator new(v10);
    v13 = (unint64_t)&v12[4 * v11];
    v418 = v12;
    v361 = a1;
    if (v8 != v9)
      goto LABEL_4;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v361 = a1;
    if (v8 != v9)
    {
LABEL_4:
      v14 = v418;
      v15 = v12;
      while (1)
      {
        while ((unint64_t)v12 < v13)
        {
          *(_DWORD *)v12 = *(_DWORD *)v9;
          v14 = v12 + 4;
          if ((unint64_t)(v12 + 4) < v13)
            goto LABEL_8;
LABEL_27:
          v24 = (v14 - v15) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            goto LABEL_522;
          if ((uint64_t)(v13 - (_QWORD)v15) >> 1 > v25)
            v25 = (uint64_t)(v13 - (_QWORD)v15) >> 1;
          if (v13 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v25;
          if (v26)
          {
            if (v26 >> 62)
              goto LABEL_524;
            v27 = operator new(4 * v26);
            v28 = &v27[4 * v24];
            *(_DWORD *)v28 = *((_DWORD *)v9 + 1);
            v29 = (unint64_t)(v28 + 4);
            if (v14 == v15)
              goto LABEL_41;
          }
          else
          {
            v27 = 0;
            v28 = (char *)(4 * v24);
            *(_DWORD *)(4 * v24) = *((_DWORD *)v9 + 1);
            v29 = 4 * v24 + 4;
            if (v14 == v15)
              goto LABEL_41;
          }
          v30 = v14 - 4 - v15;
          if (v30 < 0xBC)
          {
            v31 = v14;
            goto LABEL_40;
          }
          if (&v27[v14 - v15 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v27[v14 - v15 - 4])
          {
            v31 = v14;
            do
            {
LABEL_40:
              v32 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v28 - 1) = v32;
              v28 -= 4;
            }
            while (v31 != v15);
            goto LABEL_41;
          }
          if (&v14[-(v30 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
          {
            v31 = v14;
            goto LABEL_40;
          }
          if ((unint64_t)(v15 - v27) < 0x20)
          {
            v31 = v14;
            goto LABEL_40;
          }
          v48 = (v30 >> 2) + 1;
          v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
          v31 = &v14[-v49];
          v28 -= v49;
          v50 = &v27[4 * v24 - 16];
          v51 = v14 - 16;
          v52 = v48 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v53 = *(_OWORD *)v51;
            *(v50 - 1) = *((_OWORD *)v51 - 1);
            *v50 = v53;
            v50 -= 2;
            v51 -= 32;
            v52 -= 8;
          }
          while (v52);
          if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_40;
LABEL_41:
          v13 = (unint64_t)&v27[4 * v26];
          if (v15)
            operator delete(v15);
          v15 = v28;
          v14 = (char *)v29;
          if (v29 < v13)
            goto LABEL_5;
LABEL_44:
          v33 = (v14 - v15) >> 2;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62)
          {
LABEL_522:
            v418 = v14;
            v419 = v13;
            v417 = v15;
            sub_2394189F8();
          }
          if ((uint64_t)(v13 - (_QWORD)v15) >> 1 > v34)
            v34 = (uint64_t)(v13 - (_QWORD)v15) >> 1;
          if (v13 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v35 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
          {
            if (v35 >> 62)
            {
LABEL_524:
              v418 = v14;
              v419 = v13;
              v417 = v15;
              sub_239418A80();
            }
            v36 = operator new(4 * v35);
            v37 = &v36[4 * v33];
            *(_DWORD *)v37 = *((_DWORD *)v9 + 2);
            v38 = (uint64_t)(v37 + 4);
            if (v14 == v15)
              goto LABEL_58;
          }
          else
          {
            v36 = 0;
            v37 = (char *)(4 * v33);
            *(_DWORD *)(4 * v33) = *((_DWORD *)v9 + 2);
            v38 = 4 * v33 + 4;
            if (v14 == v15)
              goto LABEL_58;
          }
          v39 = v14 - 4 - v15;
          if (v39 >= 0xBC)
          {
            if (&v36[v14 - v15 - 4 - (v39 & 0xFFFFFFFFFFFFFFFCLL)] > &v36[v14 - v15 - 4])
            {
              v40 = v14;
            }
            else if (&v14[-(v39 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
            {
              v40 = v14;
            }
            else if ((unint64_t)(v15 - v36) >= 0x20)
            {
              v54 = (v39 >> 2) + 1;
              v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
              v40 = &v14[-v55];
              v37 -= v55;
              v56 = &v36[4 * v33 - 16];
              v57 = v14 - 16;
              v58 = v54 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v59 = *(_OWORD *)v57;
                *(v56 - 1) = *((_OWORD *)v57 - 1);
                *v56 = v59;
                v56 -= 2;
                v57 -= 32;
                v58 -= 8;
              }
              while (v58);
              if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_58;
            }
            else
            {
              v40 = v14;
            }
          }
          else
          {
            v40 = v14;
          }
          do
          {
            v41 = *((_DWORD *)v40 - 1);
            v40 -= 4;
            *((_DWORD *)v37 - 1) = v41;
            v37 -= 4;
          }
          while (v40 != v15);
LABEL_58:
          v13 = (unint64_t)&v36[4 * v35];
          if (v15)
            operator delete(v15);
          v15 = v37;
          v14 = (char *)v38;
          v9 += 12;
          v12 = (char *)v38;
          if (v9 == v8)
          {
LABEL_92:
            v418 = v14;
            v12 = v14;
            v8 = *(char **)v361;
            v60 = *(char **)(v361 + 8);
            goto LABEL_95;
          }
        }
        v16 = (v12 - v15) >> 2;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          goto LABEL_522;
        if ((uint64_t)(v13 - (_QWORD)v15) >> 1 > v17)
          v17 = (uint64_t)(v13 - (_QWORD)v15) >> 1;
        if (v13 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          if (v18 >> 62)
            goto LABEL_524;
          v19 = operator new(4 * v18);
          v20 = &v19[4 * v16];
          *(_DWORD *)v20 = *(_DWORD *)v9;
          v14 = v20 + 4;
          if (v12 == v15)
            goto LABEL_24;
        }
        else
        {
          v19 = 0;
          v20 = (char *)(4 * v16);
          *(_DWORD *)(4 * v16) = *(_DWORD *)v9;
          v14 = (char *)(4 * v16 + 4);
          if (v12 == v15)
            goto LABEL_24;
        }
        v21 = v12 - 4 - v15;
        if (v21 < 0xBC)
        {
          v22 = v12;
          goto LABEL_23;
        }
        if (&v19[v12 - v15 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v12 - v15 - 4])
        {
          v22 = v12;
          do
          {
LABEL_23:
            v23 = *((_DWORD *)v22 - 1);
            v22 -= 4;
            *((_DWORD *)v20 - 1) = v23;
            v20 -= 4;
          }
          while (v22 != v15);
          goto LABEL_24;
        }
        if (&v12[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v12 - 4)
        {
          v22 = v12;
          goto LABEL_23;
        }
        if ((unint64_t)(v15 - v19) < 0x20)
        {
          v22 = v12;
          goto LABEL_23;
        }
        v42 = (v21 >> 2) + 1;
        v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
        v22 = &v12[-v43];
        v20 -= v43;
        v44 = &v19[4 * v16 - 16];
        v45 = (__int128 *)(v12 - 16);
        v46 = v42 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          *v44 = v47;
          v44 -= 2;
          v45 -= 2;
          v46 -= 8;
        }
        while (v46);
        if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_23;
LABEL_24:
        v13 = (unint64_t)&v19[4 * v18];
        if (v15)
          operator delete(v15);
        v15 = v20;
        if ((unint64_t)v14 >= v13)
          goto LABEL_27;
LABEL_8:
        *(_DWORD *)v14 = *((_DWORD *)v9 + 1);
        v14 += 4;
        if ((unint64_t)v14 >= v13)
          goto LABEL_44;
LABEL_5:
        *(_DWORD *)v14 = *((_DWORD *)v9 + 2);
        v14 += 4;
        v9 += 12;
        v12 = v14;
        if (v9 == v8)
          goto LABEL_92;
      }
    }
  }
  v60 = v8;
  v15 = v12;
LABEL_95:
  v419 = v13;
  v417 = v15;
  v412 = 0;
  v413 = 0;
  v414 = 0;
  v61 = v12 - v15;
  if (v12 != v15)
  {
    if (v61 < 0)
      sub_2394189F8();
    v412 = (char *)operator new(v12 - v15);
    v414 = &v412[4 * (v61 >> 2)];
    memcpy(v412, v15, v12 - v15);
    v413 = v414;
  }
  v415 = -1431655765 * ((unint64_t)(v60 - v8) >> 2);
  v416 = 3;
  v383 = (void *)10;
  sub_2396D0294((uint64_t)v405, 3, (uint64_t)&v412, (uint64_t *)&v383);
  sub_2396D0360((uint64_t)v405);
  v403 = 0u;
  v402 = 0u;
  v62 = (unint64_t)((double)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v361 + 8) - *(_QWORD *)v361) >> 2))
                         * 0.5);
  v404 = 1.0;
  prime = (unint64_t)(float)v62;
  if (prime == 1)
  {
    prime = 2;
LABEL_100:
    sub_239427FE0((uint64_t)&v402, prime);
    goto LABEL_101;
  }
  if ((prime & ((unint64_t)(float)v62 - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)(float)v62);
    v87 = *(int8x8_t *)((char *)&v402 + 8);
    _CF = prime >= *((_QWORD *)&v402 + 1);
    if (prime > *((_QWORD *)&v402 + 1))
      goto LABEL_100;
  }
  else
  {
    v87 = 0;
    _CF = 1;
    if (prime)
      goto LABEL_100;
  }
  if (!_CF)
  {
    v89 = vcvtps_u32_f32((float)*((unint64_t *)&v403 + 1) / v404);
    if (*(_QWORD *)&v87 < 3uLL || (v90 = (uint8x8_t)vcnt_s8(v87), v90.i16[0] = vaddlv_u8(v90), v90.u32[0] > 1uLL))
    {
      v89 = std::__next_prime(v89);
    }
    else
    {
      v91 = 1 << -(char)__clz(v89 - 1);
      if (v89 >= 2)
        v89 = v91;
    }
    if (prime <= v89)
      prime = v89;
    if (prime < *(_QWORD *)&v87)
      goto LABEL_100;
  }
LABEL_101:
  v389 = 0;
  LOBYTE(v390) = 0;
  v393 = 0;
  LOBYTE(v394) = 0;
  v397 = 0;
  LOBYTE(v398) = 0;
  v401 = 0;
  v384 = 0;
  v385 = 0;
  v383 = 0;
  LOBYTE(v386) = 0;
  if (a3)
    _ZF = *(_BYTE *)(v361 + 112) == 0;
  else
    _ZF = 1;
  v65 = !_ZF;
  v353 = *(unsigned __int8 *)(v361 + 48);
  v354 = v65;
  v351 = *(unsigned __int8 *)(v361 + 144);
  v352 = *(unsigned __int8 *)(v361 + 80);
  if (v62)
  {
    if (v62 > 0x1555555555555555)
      sub_2394189F8();
    v383 = operator new(12 * v62);
    v384 = (char *)v383;
    v385 = (char *)v383 + 12 * v62;
  }
  v381 = 0;
  v382 = 0;
  v380 = &v381;
  if (v354)
  {
    v394 = 0;
    v395 = 0;
    v396 = 0;
    v397 = 1;
    sub_2395135EC((uint64_t)&v394, v62);
    v377 = 0;
    v378 = 0;
    v379 = 0;
    sub_239433C1C(a2, (uint64_t)&v377, 1);
    v67 = (unint64_t *)v377;
    v66 = v378;
    if (v377 == v378)
    {
      if (!v377)
        goto LABEL_114;
      goto LABEL_113;
    }
    do
    {
      v76 = sub_2394650AC(a2, *v67);
      *(_QWORD *)&v77.f64[0] = v76[10];
      v78 = *((double *)v76 + 18);
      v368 = *((_OWORD *)v76 + 8);
      *(_QWORD *)&v79.f64[1] = v76[17];
      *(_QWORD *)&v79.f64[0] = v76[22];
      v357 = v79;
      v359 = *((int64x2_t *)v76 + 6);
      v355 = *((float64x2_t *)v76 + 10);
      *(_QWORD *)&v77.f64[1] = v76[14];
      v362 = *((int64x2_t *)v76 + 4);
      v364 = v77;
      v80 = v381;
      v81 = &v381;
      v82 = &v381;
      v83 = *v67;
      if (v381)
      {
        while (1)
        {
          while (1)
          {
            v82 = (uint64_t **)v80;
            v84 = v80[4];
            if (v83 >= v84)
              break;
            v80 = *v82;
            v81 = v82;
            if (!*v82)
              goto LABEL_127;
          }
          if (v84 >= v83)
            break;
          v80 = v82[1];
          if (!v80)
          {
            v81 = v82 + 1;
            goto LABEL_127;
          }
        }
        v85 = (float32x2_t *)v82;
      }
      else
      {
LABEL_127:
        v85 = (float32x2_t *)operator new(0x38uLL);
        v85[4] = (float32x2_t)v83;
        *v85 = 0;
        v85[1] = 0;
        v85[2] = (float32x2_t)v82;
        *v81 = (uint64_t *)v85;
        v86 = (uint64_t *)v85;
        if (*v380)
        {
          v380 = (uint64_t **)*v380;
          v86 = *v81;
        }
        sub_2394213B8(v381, v86);
        ++v382;
      }
      *(_QWORD *)&v69 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v357);
      _Q1 = vsubq_f64((float64x2_t)0, v355);
      _V4.D[1] = *((_QWORD *)&v368 + 1);
      v72 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v362, v359), _Q1.f64[0]), (float64x2_t)vzip2q_s64(v362, v359), _Q1, 1), v364, v69);
      _Q1.f64[0] = _Q1.f64[1];
      __asm { FMLA            D3, D1, V4.D[1] }
      *(float *)_Q1.f64 = vmlad_n_f64(_D3, v78, v69);
      v85[5] = vcvt_f32_f64(v72);
      v85[6].i32[0] = LODWORD(_Q1.f64[0]);
      ++v67;
    }
    while (v67 != (unint64_t *)v66);
    v67 = (unint64_t *)v377;
    if (v377)
    {
LABEL_113:
      v378 = (char *)v67;
      operator delete(v67);
    }
  }
LABEL_114:
  if (v353)
  {
    if (v389)
    {
      v68 = v386;
      if (0xAAAAAAAAAAAAAAABLL * (v388 - (_BYTE *)v386) >= v62)
        goto LABEL_148;
    }
    else
    {
      v68 = 0;
      v386 = 0;
      v387 = 0;
      v388 = 0;
      v389 = 1;
      if (!v62)
        goto LABEL_148;
    }
    v92 = v387;
    v93 = (char *)operator new(3 * v62);
    v94 = &v93[3 * ((v92 - v68) / 3)];
    v95 = v94;
    if (v92 != v68)
    {
      v95 = &v93[3 * ((v92 - v68) / 3)];
      do
      {
        v96 = *(_WORD *)(v92 - 3);
        v92 -= 3;
        v97 = v92[2];
        *(_WORD *)(v95 - 3) = v96;
        v95 -= 3;
        v95[2] = v97;
      }
      while (v92 != v68);
    }
    v386 = v95;
    v387 = v94;
    v388 = &v93[3 * v62];
    if (v68)
      operator delete(v68);
  }
LABEL_148:
  if (v352)
  {
    if (v393)
    {
      v98 = v390;
      v99 = v392;
    }
    else
    {
      v99 = 0;
      v98 = 0;
      v390 = 0;
      v391 = 0;
      v392 = 0;
      v393 = 1;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v99 - v98) >> 2) < v62)
    {
      v100 = v391;
      v101 = (char *)operator new(12 * v62);
      v102 = &v101[12 * ((v100 - v98) / 12)];
      v103 = v102;
      if (v100 != v98)
      {
        v103 = &v101[12 * ((v100 - v98) / 12)];
        do
        {
          v104 = *(_QWORD *)(v100 - 12);
          v100 -= 12;
          v105 = *((_DWORD *)v100 + 2);
          *(_QWORD *)(v103 - 12) = v104;
          v103 -= 12;
          *((_DWORD *)v103 + 2) = v105;
        }
        while (v100 != v98);
      }
      v390 = v103;
      v391 = v102;
      v392 = &v101[12 * v62];
      if (v98)
        operator delete(v98);
    }
  }
  if (v351)
  {
    if (v401)
    {
      v106 = v398;
      if (v62 <= (v400 - v398) >> 2)
        goto LABEL_174;
    }
    else
    {
      v106 = 0;
      v398 = 0;
      v399 = 0;
      v400 = 0;
      v401 = 1;
      if (!v62)
        goto LABEL_174;
    }
    if (v62 >> 62)
      sub_2394189F8();
    v107 = v399;
    v108 = (char *)operator new(4 * v62);
    v109 = v107 - v106;
    v110 = &v108[(v107 - v106) & 0xFFFFFFFFFFFFFFFCLL];
    v111 = v110;
    if (v107 == v106)
      goto LABEL_172;
    if ((unint64_t)(v109 - 4) >= 0x2C)
    {
      v111 = &v108[(v107 - v106) & 0xFFFFFFFFFFFFFFFCLL];
      if (v107 - v108 - (v109 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v112 = v109 >> 2;
        v113 = ((unint64_t)(v109 - 4) >> 2) + 1;
        v114 = 4 * (v113 & 0x7FFFFFFFFFFFFFF8);
        v115 = &v107[-v114];
        v111 = &v110[-v114];
        v116 = &v108[4 * v112 - 16];
        v117 = v107 - 16;
        v118 = v113 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v119 = *(_OWORD *)v117;
          *((_OWORD *)v116 - 1) = *((_OWORD *)v117 - 1);
          *(_OWORD *)v116 = v119;
          v116 -= 32;
          v117 -= 32;
          v118 -= 8;
        }
        while (v118);
        v107 = v115;
        if (v113 == (v113 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_172:
          v398 = v111;
          v399 = v110;
          v400 = &v108[4 * v62];
          if (v106)
            operator delete(v106);
          goto LABEL_174;
        }
      }
    }
    else
    {
      v111 = &v108[(v107 - v106) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v120 = *((_DWORD *)v107 - 1);
      v107 -= 4;
      *((_DWORD *)v111 - 1) = v120;
      v111 -= 4;
    }
    while (v107 != v106);
    goto LABEL_172;
  }
LABEL_174:
  v377 = 0;
  v378 = 0;
  v379 = 0;
  v375 = 32;
  v376 = 0;
  v121 = v361;
  v123 = *(char **)v361;
  v122 = *(_QWORD *)(v361 + 8);
  if (v122 != *(_QWORD *)v361)
  {
    v124 = a4 * a4;
    v125 = cos((float)(a5 / 180.0) * 3.14159265);
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((v122 - (uint64_t)v123) >> 2); ++i)
    {
      if (*((_QWORD *)&v402 + 1))
      {
        v126 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v402 + 8));
        v126.i16[0] = vaddlv_u8(v126);
        if (v126.u32[0] > 1uLL)
        {
          v127 = i;
          if (*((_QWORD *)&v402 + 1) <= (unint64_t)i)
            v127 = (unint64_t)i % *((_QWORD *)&v402 + 1);
        }
        else
        {
          v127 = (DWORD2(v402) - 1) & i;
        }
        v128 = *(uint64_t ***)(v402 + 8 * v127);
        if (v128)
        {
          v129 = *v128;
          if (v129)
          {
            if (v126.u32[0] < 2uLL)
            {
              while (1)
              {
                v131 = v129[1];
                if (v131 == i)
                {
                  if (*((_DWORD *)v129 + 4) == (_DWORD)i)
                    goto LABEL_467;
                }
                else if ((v131 & (*((_QWORD *)&v402 + 1) - 1)) != v127)
                {
                  goto LABEL_196;
                }
                v129 = (uint64_t *)*v129;
                if (!v129)
                  goto LABEL_196;
              }
            }
            do
            {
              v130 = v129[1];
              if (v130 == i)
              {
                if (*((_DWORD *)v129 + 4) == (_DWORD)i)
                  goto LABEL_467;
              }
              else
              {
                if (v130 >= *((_QWORD *)&v402 + 1))
                  v130 %= *((_QWORD *)&v402 + 1);
                if (v130 != v127)
                  break;
              }
              v129 = (uint64_t *)*v129;
            }
            while (v129);
          }
        }
      }
LABEL_196:
      v132 = i;
      LODWORD(__p[0]) = i;
      sub_2396C8A78((uint64_t)&v402, (unsigned int *)__p, __p);
      v133 = (float32x4_t *)(*(_QWORD *)v121 + 12 * i);
      v134 = v384;
      if (v384 >= v385)
      {
        v140 = (char *)v383;
        v141 = 0xAAAAAAAAAAAAAAABLL * ((v384 - (_BYTE *)v383) >> 2);
        v142 = v141 + 1;
        if (v141 + 1 > 0x1555555555555555)
          goto LABEL_528;
        if (0x5555555555555556 * ((v385 - (_BYTE *)v383) >> 2) > v142)
          v142 = 0x5555555555555556 * ((v385 - (_BYTE *)v383) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v385 - (_BYTE *)v383) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v143 = 0x1555555555555555;
        else
          v143 = v142;
        if (v143)
        {
          if (v143 > 0x1555555555555555)
            goto LABEL_526;
          v144 = (char *)operator new(12 * v143);
        }
        else
        {
          v144 = 0;
        }
        v150 = v133->i64[0];
        v151 = &v144[12 * v141];
        *((_DWORD *)v151 + 2) = v133->i32[2];
        *(_QWORD *)v151 = v150;
        v152 = v151;
        if (v134 != v140)
        {
          do
          {
            v153 = *(_QWORD *)(v134 - 12);
            v134 -= 12;
            v154 = *((_DWORD *)v134 + 2);
            *(_QWORD *)(v152 - 12) = v153;
            v152 -= 12;
            *((_DWORD *)v152 + 2) = v154;
          }
          while (v134 != v140);
          v134 = (char *)v383;
        }
        v155 = v151 + 12;
        v383 = v152;
        v384 = v151 + 12;
        v385 = &v144[12 * v143];
        if (v134)
          operator delete(v134);
        v132 = i;
        v384 = v155;
        v136 = v361;
        if (!v353)
        {
LABEL_229:
          if (!v352)
            goto LABEL_202;
          goto LABEL_230;
        }
      }
      else
      {
        v135 = v133->i64[0];
        *((_DWORD *)v384 + 2) = v133->i32[2];
        *(_QWORD *)v134 = v135;
        v384 = v134 + 12;
        v136 = v361;
        if (!v353)
          goto LABEL_229;
      }
      if (!v389 || !*(_BYTE *)(v136 + 48))
LABEL_521:
        sub_2394875CC();
      v137 = *(_QWORD *)(v136 + 24) + 3 * v132;
      v138 = v387;
      if (v387 >= v388)
      {
        v145 = (char *)v386;
        v146 = 0xAAAAAAAAAAAAAAABLL * (v387 - (_BYTE *)v386);
        v147 = v146 + 1;
        if (v146 + 1 >= 0x5555555555555556)
          sub_2394189F8();
        if (0x5555555555555556 * (v388 - (_BYTE *)v386) > v147)
          v147 = 0x5555555555555556 * (v388 - (_BYTE *)v386);
        if (0xAAAAAAAAAAAAAAABLL * (v388 - (_BYTE *)v386) >= 0x2AAAAAAAAAAAAAAALL)
          v148 = 0x5555555555555555;
        else
          v148 = v147;
        if (v148)
        {
          if (v148 > 0x5555555555555555)
            goto LABEL_526;
          v149 = (char *)operator new(3 * v148);
        }
        else
        {
          v149 = 0;
        }
        v165 = *(_WORD *)v137;
        v166 = &v149[3 * v146];
        v166[2] = *(_BYTE *)(v137 + 2);
        *(_WORD *)v166 = v165;
        v167 = v166;
        if (v138 != v145)
        {
          do
          {
            v168 = *(_WORD *)(v138 - 3);
            v138 -= 3;
            v169 = v138[2];
            *(_WORD *)(v167 - 3) = v168;
            v167 -= 3;
            v167[2] = v169;
          }
          while (v138 != v145);
          v138 = (char *)v386;
        }
        v170 = v166 + 3;
        v386 = v167;
        v387 = v166 + 3;
        v388 = &v149[3 * v148];
        if (v138)
          operator delete(v138);
        v132 = i;
        v387 = v170;
        v136 = v361;
        if (!v352)
        {
LABEL_202:
          if (!v351)
            goto LABEL_283;
          goto LABEL_257;
        }
      }
      else
      {
        v139 = *(_WORD *)v137;
        v387[2] = *(_BYTE *)(v137 + 2);
        *(_WORD *)v138 = v139;
        v387 = v138 + 3;
        v136 = v361;
        if (!v352)
          goto LABEL_202;
      }
LABEL_230:
      if (!v393 || !*(_BYTE *)(v136 + 80))
        goto LABEL_521;
      v156 = *(_QWORD *)(v136 + 56) + 12 * v132;
      v157 = v391;
      if (v391 < v392)
      {
        v158 = *(_QWORD *)v156;
        *((_DWORD *)v391 + 2) = *(_DWORD *)(v156 + 8);
        *(_QWORD *)v157 = v158;
        v159 = v157 + 12;
        goto LABEL_256;
      }
      v160 = v390;
      v161 = 0xAAAAAAAAAAAAAAABLL * ((v391 - v390) >> 2);
      v162 = v161 + 1;
      if (v161 + 1 > 0x1555555555555555)
LABEL_528:
        sub_2394189F8();
      if (0x5555555555555556 * ((v392 - v390) >> 2) > v162)
        v162 = 0x5555555555555556 * ((v392 - v390) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v392 - v390) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v163 = 0x1555555555555555;
      else
        v163 = v162;
      if (v163)
      {
        if (v163 > 0x1555555555555555)
          goto LABEL_526;
        v164 = (char *)operator new(12 * v163);
      }
      else
      {
        v164 = 0;
      }
      v171 = *(_QWORD *)v156;
      v172 = &v164[4 * ((v157 - v160) >> 2)];
      *((_DWORD *)v172 + 2) = *(_DWORD *)(v156 + 8);
      *(_QWORD *)v172 = v171;
      v173 = v172;
      if (v157 == v160)
      {
        v159 = v172 + 12;
        v390 = &v164[12 * v161];
        v391 = v172 + 12;
        v392 = &v164[12 * v163];
        if (v157)
          goto LABEL_255;
      }
      else
      {
        do
        {
          v174 = *(_QWORD *)(v157 - 12);
          v157 -= 12;
          v175 = *((_DWORD *)v157 + 2);
          *(_QWORD *)(v173 - 12) = v174;
          v173 -= 12;
          *((_DWORD *)v173 + 2) = v175;
        }
        while (v157 != v160);
        v157 = v390;
        v159 = v172 + 12;
        v390 = v173;
        v391 = v172 + 12;
        v392 = &v164[12 * v163];
        if (v157)
LABEL_255:
          operator delete(v157);
      }
LABEL_256:
      v136 = v361;
      v391 = v159;
      if (!v351)
        goto LABEL_283;
LABEL_257:
      if (!v401 || !*(_BYTE *)(v136 + 144))
        goto LABEL_521;
      v176 = *(_QWORD *)(v136 + 120);
      v177 = v399;
      if (v399 >= v400)
      {
        v179 = v398;
        v180 = (v399 - v398) >> 2;
        v181 = v180 + 1;
        if ((unint64_t)(v180 + 1) >> 62)
          sub_2394189F8();
        v182 = v400 - v398;
        if ((v400 - v398) >> 1 > v181)
          v181 = v182 >> 1;
        if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFFCLL)
          v183 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v183 = v181;
        if (v183)
        {
          if (v183 >> 62)
LABEL_526:
            sub_239418A80();
          v184 = operator new(4 * v183);
        }
        else
        {
          v184 = 0;
        }
        v185 = &v184[4 * v180];
        *(_DWORD *)v185 = *(_DWORD *)(v176 + 4 * i);
        v178 = v185 + 4;
        if (v177 != v179)
        {
          v186 = v177 - 4 - v179;
          if (v186 < 0x2C)
            goto LABEL_538;
          if ((unint64_t)(v179 - v184) < 0x20)
            goto LABEL_538;
          v187 = (v186 >> 2) + 1;
          v188 = 4 * (v187 & 0x7FFFFFFFFFFFFFF8);
          v189 = &v177[-v188];
          v185 -= v188;
          v190 = &v184[4 * v180 - 16];
          v191 = v177 - 16;
          v192 = v187 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v193 = *(_OWORD *)v191;
            *(v190 - 1) = *((_OWORD *)v191 - 1);
            *v190 = v193;
            v190 -= 2;
            v191 -= 32;
            v192 -= 8;
          }
          while (v192);
          v177 = v189;
          if (v187 != (v187 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_538:
            do
            {
              v194 = *((_DWORD *)v177 - 1);
              v177 -= 4;
              *((_DWORD *)v185 - 1) = v194;
              v185 -= 4;
            }
            while (v177 != v179);
          }
        }
        v398 = v185;
        v399 = v178;
        v400 = &v184[4 * v183];
        if (v179)
          operator delete(v179);
      }
      else
      {
        *(_DWORD *)v399 = *(_DWORD *)(v176 + 4 * i);
        v178 = v177 + 4;
      }
      v399 = v178;
LABEL_283:
      *(float *)__p = v124;
      __p[1] = &v377;
      v378 = (char *)v377;
      sub_2396D7524((uint64_t)v405, (float *)__p, v133, (uint64_t)&v375);
      if (v376)
      {
        v195 = 126 - 2 * __clz((v378 - (_BYTE *)v377) >> 4);
        if (v378 == v377)
          v196 = 0;
        else
          v196 = v195;
        sub_2396D7C40((float *)v377, v378, (uint64_t)&v372, v196, 1);
      }
      __p[0] = 0;
      __p[1] = 0;
      v374 = 0;
      __p[0] = operator new(0x80uLL);
      __p[1] = __p[0];
      v374 = (char *)__p[0] + 128;
      v121 = v361;
      if (!v354)
      {
        v227 = (char *)v377;
        v228 = v378;
        if (v377 == v378)
          goto LABEL_464;
        do
        {
          v372 = *(_QWORD *)v227;
          sub_2396C8A78((uint64_t)&v402, &v372, &v372);
          v227 += 16;
        }
        while (v227 != v228);
LABEL_444:
        if ((v354 & 1) == 0)
          goto LABEL_464;
        goto LABEL_445;
      }
      if (!*(_BYTE *)(v361 + 112))
        sub_2394875CC();
      v198 = *(_QWORD *)(v361 + 88);
      v199 = (char **)(v198 + 24 * i);
      if (__p != (void **)v199)
        sub_23942156C(__p, *v199, *(char **)(v198 + 24 * i + 8), (uint64_t)(*(_QWORD *)(v198 + 24 * i + 8) - (_QWORD)*v199) >> 2);
      v200 = *v199;
      v201 = v198 + 24 * i;
      v204 = *(char **)(v201 + 8);
      v202 = (char **)(v201 + 8);
      v203 = v204;
      if (*v199 != v204)
      {
        v205.i32[3] = 0;
        v365 = 0u;
        do
        {
          v207 = *(unsigned int *)v200;
          v208 = v381;
          v209 = &v381;
          v210 = &v381;
          if (v381)
          {
            while (1)
            {
              while (1)
              {
                v210 = (uint64_t **)v208;
                v211 = v208[4];
                if (v211 <= v207)
                  break;
                v208 = *v210;
                v209 = v210;
                if (!*v210)
                  goto LABEL_306;
              }
              if (v211 >= v207)
                break;
              v208 = v210[1];
              if (!v208)
              {
                v209 = v210 + 1;
                goto LABEL_306;
              }
            }
            v212 = (uint64_t *)v210;
          }
          else
          {
LABEL_306:
            v212 = (uint64_t *)operator new(0x38uLL);
            v212[4] = v207;
            *v212 = 0;
            v212[1] = 0;
            v212[2] = (uint64_t)v210;
            *v209 = v212;
            v213 = v212;
            if (*v380)
            {
              v380 = (uint64_t **)*v380;
              v213 = *v209;
            }
            v214 = v381;
            _ZF = v213 == v381;
            *((_BYTE *)v213 + 24) = v213 == v381;
            if (!_ZF)
            {
              do
              {
                v215 = v213[2];
                if (*(_BYTE *)(v215 + 24))
                  break;
                v216 = *(uint64_t **)(v215 + 16);
                v217 = *v216;
                if (*v216 == v215)
                {
                  v220 = v216[1];
                  if (!v220 || (v221 = *(unsigned __int8 *)(v220 + 24), v218 = (_BYTE *)(v220 + 24), v221))
                  {
                    if (*(uint64_t **)v215 == v213)
                    {
                      *(_BYTE *)(v215 + 24) = 1;
                      *((_BYTE *)v216 + 24) = 0;
                      v224 = *(_QWORD *)(v215 + 8);
                      *v216 = v224;
                      if (v224)
                        goto LABEL_323;
                    }
                    else
                    {
                      v222 = *(uint64_t **)(v215 + 8);
                      v223 = *v222;
                      *(_QWORD *)(v215 + 8) = *v222;
                      if (v223)
                      {
                        *(_QWORD *)(v223 + 16) = v215;
                        v216 = *(uint64_t **)(v215 + 16);
                      }
                      v222[2] = (uint64_t)v216;
                      *(_QWORD *)(*(_QWORD *)(v215 + 16) + 8 * (**(_QWORD **)(v215 + 16) != v215)) = v222;
                      *v222 = v215;
                      *(_QWORD *)(v215 + 16) = v222;
                      v216 = (uint64_t *)v222[2];
                      v215 = *v216;
                      *((_BYTE *)v222 + 24) = 1;
                      *((_BYTE *)v216 + 24) = 0;
                      v224 = *(_QWORD *)(v215 + 8);
                      *v216 = v224;
                      if (v224)
LABEL_323:
                        *(_QWORD *)(v224 + 16) = v216;
                    }
                    *(_QWORD *)(v215 + 16) = v216[2];
                    *(_QWORD *)(v216[2] + 8 * (*(_QWORD *)v216[2] != (_QWORD)v216)) = v215;
                    *(_QWORD *)(v215 + 8) = v216;
LABEL_296:
                    v216[2] = v215;
                    break;
                  }
                }
                else if (!v217 || (v219 = *(unsigned __int8 *)(v217 + 24), v218 = (_BYTE *)(v217 + 24), v219))
                {
                  if (*(uint64_t **)v215 == v213)
                  {
                    v226 = v213[1];
                    *(_QWORD *)v215 = v226;
                    if (v226)
                    {
                      *(_QWORD *)(v226 + 16) = v215;
                      v216 = *(uint64_t **)(v215 + 16);
                    }
                    v213[2] = (uint64_t)v216;
                    *(_QWORD *)(*(_QWORD *)(v215 + 16) + 8 * (**(_QWORD **)(v215 + 16) != v215)) = v213;
                    v213[1] = v215;
                    *(_QWORD *)(v215 + 16) = v213;
                    v216 = (uint64_t *)v213[2];
                    *((_BYTE *)v213 + 24) = 1;
                    *((_BYTE *)v216 + 24) = 0;
                    v215 = v216[1];
                    v225 = *(uint64_t **)v215;
                    v216[1] = *(_QWORD *)v215;
                    if (!v225)
                      goto LABEL_295;
                  }
                  else
                  {
                    *(_BYTE *)(v215 + 24) = 1;
                    *((_BYTE *)v216 + 24) = 0;
                    v215 = v216[1];
                    v225 = *(uint64_t **)v215;
                    v216[1] = *(_QWORD *)v215;
                    if (!v225)
                      goto LABEL_295;
                  }
                  v225[2] = (uint64_t)v216;
LABEL_295:
                  *(_QWORD *)(v215 + 16) = v216[2];
                  *(_QWORD *)(v216[2] + 8 * (*(_QWORD *)v216[2] != (_QWORD)v216)) = v215;
                  *(_QWORD *)v215 = v216;
                  goto LABEL_296;
                }
                *(_BYTE *)(v215 + 24) = 1;
                v213 = v216;
                *((_BYTE *)v216 + 24) = v216 == v214;
                *v218 = 1;
              }
              while (v216 != v214);
            }
            ++v382;
          }
          v205.i64[0] = v133->i64[0];
          v205.i32[2] = v133->i32[2];
          v197.i64[0] = v212[5];
          v197.i32[2] = *((_DWORD *)v212 + 12);
          v205 = vsubq_f32(v205, v197);
          v206 = (float32x2_t)vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u64[0];
          v365 = vmlaq_n_f32(v365, v205, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v205.f32, 1), *(float32x2_t *)v205.f32, 1), v206, v206).f32[0]));
          v200 += 4;
        }
        while (v200 != v203);
        if (*v199 != *v202)
        {
          v205.f32[0] = (float)(unint64_t)((*v202 - *v199) >> 2);
          v197.i32[3] = v365.i32[3];
          v229 = vdivq_f32(v365, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v205.f32, 0));
          v230 = (float32x2_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL).u64[0];
          v365 = vmulq_n_f32(v229, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v229.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v229.f32, 1), *(float32x2_t *)v229.f32, 1), v230, v230).f32[0]));
        }
        v121 = v361;
        v231 = v377;
        v360 = v378;
        if (v377 != v378)
        {
          v232 = (int8x16_t)v365;
          goto LABEL_344;
        }
        goto LABEL_444;
      }
      v231 = v377;
      v360 = v378;
      v121 = v361;
      if (v377 != v378)
      {
        v232 = 0uLL;
LABEL_344:
        v233 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v232.i8, 1);
        v366 = *(float32x2_t *)v232.i8;
        v358 = (float32x2_t)vextq_s8(v232, v232, 8uLL).u64[0];
        while (2)
        {
          if (!*(_BYTE *)(v121 + 112))
            sub_2394875CC();
          v363 = v231;
          v234 = *v231;
          v235 = *(_QWORD *)(v121 + 88) + 24 * *v231;
          v236 = *(unsigned int **)v235;
          v237 = (_QWORD *)v121;
          v238 = (float32x4_t **)(v235 + 8);
          v239 = *(unsigned int **)(v235 + 8);
          if (*(unsigned int **)v235 == v239)
          {
            v265 = 0uLL;
          }
          else
          {
            v240 = *v237 + 12 * v234;
            v241.i32[3] = 0;
            v369 = 0u;
            do
            {
              v243 = *v236;
              v244 = v381;
              v245 = &v381;
              v246 = &v381;
              if (v381)
              {
                while (1)
                {
                  while (1)
                  {
                    v246 = (uint64_t **)v244;
                    v247 = v244[4];
                    if (v247 <= v243)
                      break;
                    v244 = *v246;
                    v245 = v246;
                    if (!*v246)
                      goto LABEL_361;
                  }
                  if (v247 >= v243)
                    break;
                  v244 = v246[1];
                  if (!v244)
                  {
                    v245 = v246 + 1;
                    goto LABEL_361;
                  }
                }
                v248 = (uint64_t *)v246;
              }
              else
              {
LABEL_361:
                v248 = (uint64_t *)operator new(0x38uLL);
                v248[4] = v243;
                *v248 = 0;
                v248[1] = 0;
                v248[2] = (uint64_t)v246;
                *v245 = v248;
                v249 = v248;
                if (*v380)
                {
                  v380 = (uint64_t **)*v380;
                  v249 = *v245;
                }
                v250 = v381;
                _ZF = v249 == v381;
                *((_BYTE *)v249 + 24) = v249 == v381;
                if (!_ZF)
                {
                  do
                  {
                    v251 = v249[2];
                    if (*(_BYTE *)(v251 + 24))
                      break;
                    v252 = *(uint64_t **)(v251 + 16);
                    v253 = *v252;
                    if (*v252 == v251)
                    {
                      v256 = v252[1];
                      if (!v256 || (v257 = *(unsigned __int8 *)(v256 + 24), v254 = (_BYTE *)(v256 + 24), v257))
                      {
                        if (*(uint64_t **)v251 == v249)
                        {
                          *(_BYTE *)(v251 + 24) = 1;
                          *((_BYTE *)v252 + 24) = 0;
                          v260 = *(_QWORD *)(v251 + 8);
                          *v252 = v260;
                          if (v260)
                            goto LABEL_378;
                        }
                        else
                        {
                          v258 = *(uint64_t **)(v251 + 8);
                          v259 = *v258;
                          *(_QWORD *)(v251 + 8) = *v258;
                          if (v259)
                          {
                            *(_QWORD *)(v259 + 16) = v251;
                            v252 = *(uint64_t **)(v251 + 16);
                          }
                          v258[2] = (uint64_t)v252;
                          *(_QWORD *)(*(_QWORD *)(v251 + 16) + 8 * (**(_QWORD **)(v251 + 16) != v251)) = v258;
                          *v258 = v251;
                          *(_QWORD *)(v251 + 16) = v258;
                          v252 = (uint64_t *)v258[2];
                          v251 = *v252;
                          *((_BYTE *)v258 + 24) = 1;
                          *((_BYTE *)v252 + 24) = 0;
                          v260 = *(_QWORD *)(v251 + 8);
                          *v252 = v260;
                          if (v260)
LABEL_378:
                            *(_QWORD *)(v260 + 16) = v252;
                        }
                        *(_QWORD *)(v251 + 16) = v252[2];
                        *(_QWORD *)(v252[2] + 8 * (*(_QWORD *)v252[2] != (_QWORD)v252)) = v251;
                        *(_QWORD *)(v251 + 8) = v252;
LABEL_351:
                        v252[2] = v251;
                        break;
                      }
                    }
                    else if (!v253 || (v255 = *(unsigned __int8 *)(v253 + 24), v254 = (_BYTE *)(v253 + 24), v255))
                    {
                      if (*(uint64_t **)v251 == v249)
                      {
                        v262 = v249[1];
                        *(_QWORD *)v251 = v262;
                        if (v262)
                        {
                          *(_QWORD *)(v262 + 16) = v251;
                          v252 = *(uint64_t **)(v251 + 16);
                        }
                        v249[2] = (uint64_t)v252;
                        *(_QWORD *)(*(_QWORD *)(v251 + 16) + 8 * (**(_QWORD **)(v251 + 16) != v251)) = v249;
                        v249[1] = v251;
                        *(_QWORD *)(v251 + 16) = v249;
                        v252 = (uint64_t *)v249[2];
                        *((_BYTE *)v249 + 24) = 1;
                        *((_BYTE *)v252 + 24) = 0;
                        v251 = v252[1];
                        v261 = *(uint64_t **)v251;
                        v252[1] = *(_QWORD *)v251;
                        if (!v261)
                          goto LABEL_350;
                      }
                      else
                      {
                        *(_BYTE *)(v251 + 24) = 1;
                        *((_BYTE *)v252 + 24) = 0;
                        v251 = v252[1];
                        v261 = *(uint64_t **)v251;
                        v252[1] = *(_QWORD *)v251;
                        if (!v261)
                          goto LABEL_350;
                      }
                      v261[2] = (uint64_t)v252;
LABEL_350:
                      *(_QWORD *)(v251 + 16) = v252[2];
                      *(_QWORD *)(v252[2] + 8 * (*(_QWORD *)v252[2] != (_QWORD)v252)) = v251;
                      *(_QWORD *)v251 = v252;
                      goto LABEL_351;
                    }
                    *(_BYTE *)(v251 + 24) = 1;
                    v249 = v252;
                    *((_BYTE *)v252 + 24) = v252 == v250;
                    *v254 = 1;
                  }
                  while (v252 != v250);
                }
                ++v382;
              }
              v241.i64[0] = *(_QWORD *)v240;
              v241.i32[2] = *(_DWORD *)(v240 + 8);
              v197.i64[0] = v248[5];
              v197.i32[2] = *((_DWORD *)v248 + 12);
              v241 = vsubq_f32(v241, v197);
              v242 = (float32x2_t)vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL).u64[0];
              v369 = vmlaq_n_f32(v369, v241, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v241.f32, *(float32x2_t *)v241.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v241.f32, 1), *(float32x2_t *)v241.f32, 1), v242, v242).f32[0]));
              ++v236;
            }
            while (v236 != v239);
            if (*(float32x4_t **)v235 == *v238)
            {
              v265 = (int8x16_t)v369;
            }
            else
            {
              v241.f32[0] = (float)(unint64_t)(((uint64_t)*v238 - *(_QWORD *)v235) >> 2);
              v263 = vdivq_f32(v369, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v241.f32, 0));
              v264 = (float32x2_t)vextq_s8((int8x16_t)v263, (int8x16_t)v263, 8uLL).u64[0];
              v265 = (int8x16_t)vmulq_n_f32(v263, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v263.f32, *(float32x2_t *)v263.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v263.f32, 1), *(float32x2_t *)v263.f32, 1), v264, v264).f32[0]));
            }
          }
          v266 = vmla_lane_f32(vmul_f32(v366, *(float32x2_t *)v265.i8), v233, *(float32x2_t *)v265.i8, 1);
          v197 = (float32x4_t)vextq_s8(v265, v265, 8uLL);
          if (v125 >= vmla_f32(v266, *(float32x2_t *)v197.f32, v358).f32[0])
            goto LABEL_345;
          v372 = *v363;
          sub_2396C8A78((uint64_t)&v402, &v372, &v372);
          v267 = *(float32x4_t **)v235;
          v268 = *v238;
          v269 = (uint64_t)*v238 - *(_QWORD *)v235;
          if (v269 < 1)
            goto LABEL_345;
          v270 = v269 >> 2;
          v272 = (unint64_t)__p[0];
          v271 = (char *)__p[1];
          v273 = (char *)__p[1] - (char *)__p[0];
          v274 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          v275 = (char *)__p[0] + (((char *)__p[1] - (char *)__p[0]) & 0xFFFFFFFFFFFFFFFCLL);
          if (v269 >> 2 > (v374 - (char *)__p[1]) >> 2)
          {
            v276 = v274 + v270;
            if ((unint64_t)(v274 + v270) >> 62)
              sub_2394189F8();
            v277 = v374 - (char *)__p[0];
            if ((v374 - (char *)__p[0]) >> 1 > v276)
              v276 = v277 >> 1;
            _CF = (unint64_t)v277 >= 0x7FFFFFFFFFFFFFFCLL;
            v278 = 0x3FFFFFFFFFFFFFFFLL;
            if (!_CF)
              v278 = v276;
            v370 = v278;
            if (v278)
            {
              if (v278 >> 62)
                sub_239418A80();
              v279 = ((char *)__p[1] - (char *)__p[0]) >> 2;
              v280 = (char *)__p[0] + (((char *)__p[1] - (char *)__p[0]) & 0xFFFFFFFFFFFFFFFCLL);
              v281 = operator new(4 * v278);
              v275 = v280;
              v274 = v279;
              v282 = &v281[4 * v279];
              v283 = &v282[4 * v270];
              v284 = v269 - 4;
              if ((unint64_t)(v269 - 4) < 0x1C)
              {
LABEL_405:
                v285 = v282;
                goto LABEL_422;
              }
            }
            else
            {
              v281 = 0;
              v282 = (char *)(4 * v274);
              v283 = (char *)(4 * v274 + 4 * v270);
              v284 = v269 - 4;
              if ((unint64_t)(v269 - 4) < 0x1C)
                goto LABEL_405;
            }
            v285 = v282;
            if ((unint64_t)(&v281[v273 & 0xFFFFFFFFFFFFFFFCLL] - (_BYTE *)v267) < 0x20)
              goto LABEL_539;
            v301 = (v284 >> 2) + 1;
            v302 = 4 * (v301 & 0x7FFFFFFFFFFFFFF8);
            v285 = &v282[v302];
            v303 = (float32x4_t *)((char *)v267 + v302);
            v304 = v267 + 1;
            v305 = (float32x4_t *)&v281[4 * v274 + 16];
            v306 = v301 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v197 = *v304;
              v305[-1] = v304[-1];
              *v305 = v197;
              v304 += 2;
              v305 += 2;
              v306 -= 8;
            }
            while (v306);
            v267 = v303;
            if (v301 != (v301 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_539:
              do
              {
LABEL_422:
                v307 = v267->i32[0];
                v267 = (float32x4_t *)((char *)v267 + 4);
                *(_DWORD *)v285 = v307;
                v285 += 4;
              }
              while (v285 != v283);
            }
            if ((char *)v272 != v271)
            {
              if ((unint64_t)(v273 - 4) < 0x3C)
              {
                v308 = v275;
                goto LABEL_430;
              }
              v308 = v275;
              if (v272 + (v273 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v281[v273 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
                goto LABEL_540;
              v309 = ((unint64_t)(v273 - 4) >> 2) + 1;
              v310 = 4 * (v309 & 0x7FFFFFFFFFFFFFF8);
              v308 = &v275[-v310];
              v282 -= v310;
              v311 = (float32x4_t *)&v281[4 * v274 - 16];
              v312 = (float32x4_t *)(v272 + 4 * v274 - 16);
              v313 = v309 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v197 = v312[-1];
                v314 = *v312;
                v311[-1] = v197;
                *v311 = v314;
                v311 -= 2;
                v312 -= 2;
                v313 -= 8;
              }
              while (v313);
              if (v309 != (v309 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_540:
                do
                {
LABEL_430:
                  v315 = *((_DWORD *)v308 - 1);
                  v308 -= 4;
                  *((_DWORD *)v282 - 1) = v315;
                  v282 -= 4;
                }
                while (v308 != (char *)v272);
              }
            }
            v316 = v271 - v275;
            if (v316)
            {
              v317 = v281;
              memmove(v283, v275, v316);
              v281 = v317;
            }
            __p[0] = v282;
            __p[1] = &v283[v316];
            v374 = &v281[4 * v370];
            if (v272)
              operator delete((void *)v272);
LABEL_345:
            v121 = v361;
            v231 = v363 + 2;
            if (v363 + 2 == (_QWORD *)v360)
              goto LABEL_444;
            continue;
          }
          break;
        }
        v286 = (char *)__p[1] - (char *)v275;
        v287 = ((char *)__p[1] - (char *)v275) >> 2;
        if (v287 >= v270)
        {
          v288 = (float32x4_t *)((char *)v267 + 4 * v270);
          v292 = (float32x4_t *)__p[1];
        }
        else
        {
          v288 = (float32x4_t *)((char *)v267 + 4 * v287);
          v289 = (char *)v268 - (char *)v288;
          if (v268 != v288)
          {
            v371 = (char *)__p[0] + (((char *)__p[1] - (char *)__p[0]) & 0xFFFFFFFFFFFFFFFCLL);
            v290 = (char *)v268 - (char *)v288;
            v350 = (float32x4_t *)((char *)v267 + 4 * v287);
            v291 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            memmove(__p[1], v350, v290);
            v274 = v291;
            v288 = v350;
            v275 = v371;
          }
          v292 = (float32x4_t *)&v271[v289];
          __p[1] = &v271[v289];
          if (v286 < 1)
            goto LABEL_345;
        }
        v293 = &v275[4 * v270];
        v294 = (char *)v292 - v293;
        v295 = ((char *)v292 - v293) >> 2;
        v296 = (char *)v292 - 4 * v270;
        v297 = (char *)v292;
        if (v296 < v271)
        {
          v298 = (v273 & 0xFFFFFFFFFFFFFFFCLL) + v294;
          v299 = v272 + v298 + 4;
          if ((unint64_t)v271 > v299)
            v299 = (unint64_t)v271;
          v300 = v299 + ~v272 - v298;
          if (v300 < 0x2C)
          {
            v297 = (char *)v292;
            goto LABEL_439;
          }
          v297 = (char *)v292;
          if ((unint64_t)&v293[-(v273 & 0xFFFFFFFFFFFFFFFCLL) - v272] < 0x20)
            goto LABEL_541;
          v318 = (v300 >> 2) + 1;
          v319 = 4 * (v318 & 0x7FFFFFFFFFFFFFF8);
          v296 += v319;
          v297 = (char *)v292 + v319;
          v320 = v292 + 1;
          v321 = (float32x4_t *)(v272 + 4 * v295 + 4 * v274 + 16);
          v322 = v318 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v197 = *v321;
            v320[-1] = v321[-1];
            *v320 = v197;
            v320 += 2;
            v321 += 2;
            v322 -= 8;
          }
          while (v322);
          if (v318 != (v318 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_541:
            do
            {
LABEL_439:
              v323 = *(_DWORD *)v296;
              v296 += 4;
              *(_DWORD *)v297 = v323;
              v297 += 4;
            }
            while (v296 < v271);
          }
        }
        __p[1] = v297;
        if (v292 != (float32x4_t *)v293)
        {
          v324 = v275;
          memmove((char *)v292 - 4 * v295, v275, v294);
          v275 = v324;
        }
        if (v288 != v267)
          memmove(v275, v267, (char *)v288 - (char *)v267);
        goto LABEL_345;
      }
LABEL_445:
      sub_23950DB64((uint64_t)__p);
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v325 = (char *)__p[1];
      if (__p[0] != __p[1])
      {
        v326 = (char *)__p[0] + 4;
        while (v326 != __p[1])
        {
          v327 = *((_DWORD *)v326 - 1);
          v328 = *(_DWORD *)v326;
          v326 += 4;
          if (v327 == v328)
          {
            v329 = v326 - 8;
            while (v326 != v325)
            {
              v330 = v327;
              v327 = *(_DWORD *)v326;
              if (v330 != *(_DWORD *)v326)
              {
                *((_DWORD *)v329 + 1) = v327;
                v329 += 4;
              }
              v326 += 4;
            }
            v331 = v329 + 4;
            v332 = (char *)(v325 - (v329 + 4));
            if (v325 != v329 + 4)
            {
              if (v325 != &v332[(_QWORD)v331])
                memmove(v329 + 4, &v332[(_QWORD)v331], 0);
              __p[1] = v331;
            }
            break;
          }
        }
      }
      if (!v397)
        sub_2394875CC();
      v333 = v395;
      v121 = v361;
      if ((unint64_t)v395 >= v396)
      {
        v334 = sub_2396C8920(&v394, (uint64_t)__p);
      }
      else
      {
        *(_QWORD *)v395 = 0;
        *((_QWORD *)v333 + 1) = 0;
        *((_QWORD *)v333 + 2) = 0;
        *(_OWORD *)v333 = *(_OWORD *)__p;
        *((_QWORD *)v333 + 2) = v374;
        __p[0] = 0;
        __p[1] = 0;
        v374 = 0;
        v334 = v333 + 24;
      }
      v395 = v334;
LABEL_464:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v123 = *(char **)v121;
      v122 = *(_QWORD *)(v121 + 8);
LABEL_467:
      ;
    }
  }
  sub_2396DEA54(v121);
  sub_2396DEB3C(v121, (uint64_t)&v383);
  if ((!*(_BYTE *)(v121 + 48)
     || 0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(v121 + 32) - *(_QWORD *)(v121 + 24)) == 0xAAAAAAAAAAAAAAABLL
                                                                                  * ((uint64_t)(*(_QWORD *)(v121 + 8)
                                                                                             - *(_QWORD *)v121) >> 2))
    && (!*(_BYTE *)(v121 + 80)
     || *(_QWORD *)(v121 + 64) - *(_QWORD *)(v121 + 56) == *(_QWORD *)(v121 + 8) - *(_QWORD *)v121)
    && (!*(_BYTE *)(v121 + 112)
     || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v121 + 96) - *(_QWORD *)(v121 + 88)) >> 3) == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v121 + 8) - *(_QWORD *)v121) >> 2))
    && (!*(_BYTE *)(v121 + 144)
     || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v121 + 8) - *(_QWORD *)v121) >> 2) == (uint64_t)(*(_QWORD *)(v121 + 128) - *(_QWORD *)(v121 + 120)) >> 2))
  {
    v335 = 1;
    v336 = (char *)v377;
    if (!v377)
      goto LABEL_480;
    goto LABEL_479;
  }
  v335 = 0;
  v336 = (char *)v377;
  if (v377)
  {
LABEL_479:
    v378 = v336;
    operator delete(v336);
  }
LABEL_480:
  sub_239421038((uint64_t)&v380, v381);
  if (v401 && v398)
  {
    v399 = v398;
    operator delete(v398);
  }
  if (v397)
  {
    v337 = v394;
    if (v394)
    {
      v338 = v395;
      v339 = v394;
      if (v395 != v394)
      {
        v340 = v395;
        do
        {
          v342 = (void *)*((_QWORD *)v340 - 3);
          v340 -= 24;
          v341 = v342;
          if (v342)
          {
            *((_QWORD *)v338 - 2) = v341;
            operator delete(v341);
          }
          v338 = v340;
        }
        while (v340 != v337);
        v339 = v394;
      }
      v395 = v337;
      operator delete(v339);
    }
  }
  if (v393 && v390)
  {
    v391 = v390;
    operator delete(v390);
  }
  if (v389 && v386)
  {
    v387 = (char *)v386;
    operator delete(v386);
  }
  if (v383)
  {
    v384 = (char *)v383;
    operator delete(v383);
  }
  v343 = (_QWORD *)v403;
  if ((_QWORD)v403)
  {
    do
    {
      v344 = (_QWORD *)*v343;
      operator delete(v343);
      v343 = v344;
    }
    while (v344);
  }
  v345 = (void *)v402;
  *(_QWORD *)&v402 = 0;
  if (v345)
    operator delete(v345);
  v346 = v409;
  if (v409)
  {
    do
    {
      v347 = (_QWORD *)*v346;
      free(v346);
      v409 = v347;
      v346 = v347;
    }
    while (v347);
  }
  v408 = 0;
  v409 = 0;
  v410 = 0;
  v411 = 0;
  if (v406)
  {
    v407 = v406;
    operator delete(v406);
  }
  if (v405[0])
  {
    v405[1] = v405[0];
    operator delete(v405[0]);
  }
  if (v412)
  {
    v413 = v412;
    operator delete(v412);
  }
  if (v417)
  {
    v418 = v417;
    operator delete(v417);
  }
  return v335;
}

void sub_2396DE7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,char a50,void *a51,void *a52,uint64_t a53,char a54,char *a55,char *a56,uint64_t a57,char a58,void *a59,void *a60,uint64_t a61,char a62,void *a63)
{
  _QWORD *a65;
  void *a69;
  void *a70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  void *v75;
  void *v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;

  if (__p)
    operator delete(__p);
  sub_239421038((uint64_t)&a41, (_QWORD *)a42);
  if (a62 && a59)
  {
    a60 = a59;
    operator delete(a59);
  }
  if (a58)
  {
    v71 = a55;
    if (a55)
    {
      v72 = a56;
      v73 = a55;
      if (a56 != a55)
      {
        v74 = a56;
        do
        {
          v76 = (void *)*((_QWORD *)v74 - 3);
          v74 -= 24;
          v75 = v76;
          if (v76)
          {
            *((_QWORD *)v72 - 2) = v75;
            operator delete(v75);
          }
          v72 = v74;
        }
        while (v74 != v71);
        v73 = a55;
      }
      a56 = v71;
      operator delete(v73);
    }
  }
  if (a54 && a51)
  {
    a52 = a51;
    operator delete(a51);
  }
  if (a50 && a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  v77 = a65;
  if (a65)
  {
    do
    {
      v78 = (_QWORD *)*v77;
      operator delete(v77);
      v77 = v78;
    }
    while (v78);
  }
  v79 = a63;
  a63 = 0;
  if (v79)
    operator delete(v79);
  v80 = (unint64_t *)STACK[0x240];
  if (STACK[0x240])
  {
    do
    {
      v81 = *v80;
      free(v80);
      STACK[0x240] = v81;
      v80 = (unint64_t *)v81;
    }
    while (v81);
  }
  STACK[0x238] = 0;
  STACK[0x240] = 0;
  STACK[0x250] = 0;
  STACK[0x258] = 0;
  v82 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v82;
    operator delete(v82);
    v83 = a69;
    if (!a69)
    {
LABEL_31:
      v84 = (void *)STACK[0x278];
      if (!STACK[0x278])
        goto LABEL_33;
      goto LABEL_32;
    }
  }
  else
  {
    v83 = a69;
    if (!a69)
      goto LABEL_31;
  }
  a70 = v83;
  operator delete(v83);
  v84 = (void *)STACK[0x278];
  if (!STACK[0x278])
  {
LABEL_33:
    v85 = (void *)STACK[0x298];
    if (STACK[0x298])
    {
      STACK[0x2A0] = (unint64_t)v85;
      operator delete(v85);
    }
    _Unwind_Resume(a1);
  }
LABEL_32:
  STACK[0x280] = (unint64_t)v84;
  operator delete(v84);
  goto LABEL_33;
}

void sub_2396DEA54(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(_QWORD *)(a1 + 32) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 48) = 0;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v4 = *(void **)(a1 + 56);
    if (v4)
    {
      *(_QWORD *)(a1 + 64) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 80) = 0;
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v5 = *(_QWORD *)(a1 + 88);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = *(void **)(a1 + 88);
      if (v6 != v5)
      {
        v8 = *(_QWORD *)(a1 + 96);
        do
        {
          v10 = *(void **)(v8 - 24);
          v8 -= 24;
          v9 = v10;
          if (v10)
          {
            *(_QWORD *)(v6 - 16) = v9;
            operator delete(v9);
          }
          v6 = v8;
        }
        while (v8 != v5);
        v7 = *(void **)(a1 + 88);
      }
      *(_QWORD *)(a1 + 96) = v5;
      operator delete(v7);
    }
    *(_BYTE *)(a1 + 112) = 0;
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v11 = *(void **)(a1 + 120);
    if (v11)
    {
      *(_QWORD *)(a1 + 128) = v11;
      operator delete(v11);
    }
    *(_BYTE *)(a1 + 144) = 0;
  }
}

uint64_t sub_2396DEB3C(uint64_t a1, uint64_t a2)
{
  void *v4;
  void **v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;
  _QWORD *v15;
  void *v16;
  void *v18;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = (void **)(a1 + 24);
  v6 = (_QWORD *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      *v5 = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *v6 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a1 + 48) = 1;
      v8 = a1 + 56;
      v9 = (_QWORD *)(a2 + 56);
      v10 = *(unsigned __int8 *)(a1 + 80);
      if (v10 == *(unsigned __int8 *)(a2 + 80))
        goto LABEL_14;
LABEL_19:
      if (v10)
      {
        v13 = *(void **)v8;
        if (*(_QWORD *)v8)
        {
          *(_QWORD *)(a1 + 64) = v13;
          operator delete(v13);
        }
        *(_BYTE *)(a1 + 80) = 0;
      }
      else
      {
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        *(_BYTE *)(a1 + 80) = 1;
      }
      goto LABEL_24;
    }
    v11 = *v5;
    if (*v5)
    {
      *(_QWORD *)(a1 + 32) = v11;
      operator delete(v11);
    }
    *(_BYTE *)(a1 + 48) = 0;
LABEL_13:
    v8 = a1 + 56;
    v9 = (_QWORD *)(a2 + 56);
    v10 = *(unsigned __int8 *)(a1 + 80);
    if (v10 == *(unsigned __int8 *)(a2 + 80))
      goto LABEL_14;
    goto LABEL_19;
  }
  if (!*(_BYTE *)(a1 + 48))
    goto LABEL_13;
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
    *v5 = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *v6 = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v8 = a1 + 56;
  v9 = (_QWORD *)(a2 + 56);
  v10 = *(unsigned __int8 *)(a1 + 80);
  if (v10 != *(unsigned __int8 *)(a2 + 80))
    goto LABEL_19;
LABEL_14:
  if (v10)
  {
    v12 = *(void **)v8;
    if (*(_QWORD *)v8)
    {
      *(_QWORD *)(a1 + 64) = v12;
      operator delete(v12);
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
LABEL_24:
  sub_2396E5E60((char **)(a1 + 88), a2 + 88);
  v14 = (void **)(a1 + 120);
  v15 = (_QWORD *)(a2 + 120);
  if (*(unsigned __int8 *)(a1 + 144) == *(unsigned __int8 *)(a2 + 144))
  {
    if (*(_BYTE *)(a1 + 144))
    {
      v16 = *v14;
      if (*v14)
      {
        *(_QWORD *)(a1 + 128) = v16;
        operator delete(v16);
        *v14 = 0;
        *(_QWORD *)(a1 + 128) = 0;
        *(_QWORD *)(a1 + 136) = 0;
      }
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *v15 = 0;
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
    }
    return a1;
  }
  else if (*(_BYTE *)(a1 + 144))
  {
    v18 = *v14;
    if (*v14)
    {
      *(_QWORD *)(a1 + 128) = v18;
      operator delete(v18);
    }
    *(_BYTE *)(a1 + 144) = 0;
    return a1;
  }
  else
  {
    *v14 = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *v15 = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 1;
    return a1;
  }
}

uint64_t sub_2396DEDB0(uint64_t a1, char a2, uint64_t a3, char a4, unsigned int a5, float a6, float a7)
{
  char v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unint64_t *v34;
  unint64_t *v35;
  _BYTE *v36;
  _BYTE *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  double v41;
  float64x2_t v44;
  uint64_t *v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t **v55;
  unint64_t v56;
  unint64_t v57;
  float32x2_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  _QWORD *v69;
  void *v70;
  _QWORD *v72;
  void *v73;
  float64x2_t v74;
  float64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  float64x2_t v78;
  __int128 v79;
  _QWORD v80[4];
  void *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t **v84;
  uint64_t *v85;
  uint64_t v86;
  char v87;
  unsigned __int8 v88;
  char v89;
  char v90;
  void *v91;
  char *v92;
  char *v93;
  void *__p;
  void *v95;
  char *v96;
  char v97;
  void *v98;
  void *v99;
  char *v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  char v104;
  void *v105;
  void *v106;
  char *v107;
  char v108;
  _BYTE v109[56];
  void *v110;
  void *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  float v114;
  char v115;
  _QWORD v116[3];
  _QWORD *v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v115 = a2;
  v114 = a7;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
    return 0;
  sub_2396DF690((uint64_t)v109, (float32x2_t **)a1, a6 + a6);
  v97 = 0;
  LOBYTE(v98) = 0;
  v101 = 0;
  LOBYTE(v102) = 0;
  v104 = 0;
  LOBYTE(v105) = 0;
  v108 = 0;
  v92 = 0;
  v93 = 0;
  v91 = 0;
  LOBYTE(__p) = 0;
  if (a4)
    _ZF = *(_BYTE *)(a1 + 112) == 0;
  else
    _ZF = 1;
  v12 = !_ZF;
  v90 = v12;
  v13 = *(unsigned __int8 *)(a1 + 48);
  v89 = *(_BYTE *)(a1 + 48);
  v14 = *(unsigned __int8 *)(a1 + 80);
  v88 = *(_BYTE *)(a1 + 80);
  v87 = *(_BYTE *)(a1 + 144);
  v85 = 0;
  v86 = 0;
  v84 = &v85;
  v15 = v112;
  v118 = 0uLL;
  v119 = 0;
  if (!v112)
  {
    v91 = 0;
    v92 = 0;
    v93 = 0;
    if (v13)
      goto LABEL_11;
LABEL_24:
    if (!v14)
      goto LABEL_15;
    goto LABEL_25;
  }
  if (v112 >= 0x1555555555555556)
    sub_2394189F8();
  v16 = 12 * v112;
  v91 = operator new(12 * v112);
  v92 = (char *)v91 + v16;
  v93 = (char *)v91 + 12 * v15;
  if (!v13)
    goto LABEL_24;
LABEL_11:
  __p = 0;
  v95 = 0;
  v96 = 0;
  v97 = 1;
  if (v15)
  {
    v17 = (char *)operator new(3 * v15);
    v18 = &v17[3 * v15];
    if (__p)
    {
      v95 = __p;
      operator delete(__p);
      v14 = v88;
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  __p = v17;
  v95 = v18;
  v96 = v18;
  if (!v14)
  {
LABEL_15:
    if (v87)
      goto LABEL_16;
LABEL_30:
    if (!v90)
      goto LABEL_45;
    goto LABEL_31;
  }
LABEL_25:
  if (v101)
  {
    if (v15)
      goto LABEL_27;
  }
  else
  {
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v101 = 1;
    if (v15)
    {
LABEL_27:
      v24 = (char *)operator new(12 * v15);
      v25 = &v24[12 * v15];
      v26 = v25;
      v27 = v98;
      if (!v98)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v27 = v98;
  if (v98)
  {
LABEL_28:
    v99 = v27;
    operator delete(v27);
  }
LABEL_29:
  v98 = v24;
  v99 = v26;
  v100 = v25;
  if (!v87)
    goto LABEL_30;
LABEL_16:
  if (v108)
  {
    if (v15)
      goto LABEL_18;
  }
  else
  {
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v108 = 1;
    if (v15)
    {
LABEL_18:
      v19 = (char *)operator new(4 * v15);
      v20 = &v19[4 * v15];
      bzero(v19, 4 * v15);
      v21 = v20;
      v22 = v105;
      if (!v105)
        goto LABEL_20;
      goto LABEL_19;
    }
  }
  v19 = 0;
  v21 = 0;
  v20 = 0;
  v22 = v105;
  if (v105)
  {
LABEL_19:
    v106 = v22;
    operator delete(v22);
  }
LABEL_20:
  v105 = v19;
  v106 = v21;
  v107 = v20;
  if (!v90)
    goto LABEL_45;
LABEL_31:
  if (!v104)
  {
    v102 = 0uLL;
    v103 = 0;
    v104 = 1;
  }
  sub_2396DF70C(&v118, v15);
  if (!v104)
    sub_2394875CC();
  v28 = v102;
  if ((_QWORD)v102)
  {
    v29 = *((_QWORD *)&v102 + 1);
    v30 = (void *)v102;
    if (*((_QWORD *)&v102 + 1) != (_QWORD)v102)
    {
      v31 = *((_QWORD *)&v102 + 1);
      do
      {
        v33 = *(void **)(v31 - 24);
        v31 -= 24;
        v32 = v33;
        if (v33)
        {
          *(_QWORD *)(v29 - 16) = v32;
          operator delete(v32);
        }
        v29 = v31;
      }
      while (v31 != v28);
      v30 = (void *)v102;
    }
    *((_QWORD *)&v102 + 1) = v28;
    operator delete(v30);
  }
  v102 = v118;
  v103 = v119;
  v118 = 0uLL;
  v119 = 0;
  sub_239433C1C(a3, (uint64_t)&v118, 1);
  v35 = (unint64_t *)*((_QWORD *)&v118 + 1);
  v34 = (unint64_t *)v118;
  if ((_QWORD)v118 == *((_QWORD *)&v118 + 1))
  {
    if (!(_QWORD)v118)
      goto LABEL_45;
    goto LABEL_44;
  }
  do
  {
    v49 = sub_2394650AC(a3, *v34);
    *(_QWORD *)&v50.f64[0] = v49[10];
    v76 = *((int64x2_t *)v49 + 6);
    *(_QWORD *)&v51.f64[1] = v49[13];
    v77 = *((int64x2_t *)v49 + 4);
    v52 = *((double *)v49 + 18);
    *(_QWORD *)&v51.f64[0] = v49[22];
    v75 = v51;
    v74 = *((float64x2_t *)v49 + 10);
    *(_QWORD *)&v50.f64[1] = v49[14];
    v78 = v50;
    v79 = *((_OWORD *)v49 + 8);
    v53 = v85;
    v54 = &v85;
    v55 = &v85;
    v56 = *v34;
    if (v85)
    {
      while (1)
      {
        while (1)
        {
          v55 = (uint64_t **)v53;
          v57 = v53[4];
          if (v56 >= v57)
            break;
          v53 = *v55;
          v54 = v55;
          if (!*v55)
            goto LABEL_57;
        }
        if (v57 >= v56)
          break;
        v53 = v55[1];
        if (!v53)
        {
          v54 = v55 + 1;
          goto LABEL_57;
        }
      }
      v58 = (float32x2_t *)v55;
    }
    else
    {
LABEL_57:
      v58 = (float32x2_t *)operator new(0x38uLL);
      v58[4] = (float32x2_t)v56;
      *v58 = 0;
      v58[1] = 0;
      v58[2] = (float32x2_t)v55;
      *v54 = (uint64_t *)v58;
      v59 = (uint64_t *)v58;
      if (*v84)
      {
        v84 = (uint64_t **)*v84;
        v59 = *v54;
      }
      sub_2394213B8(v85, v59);
      ++v86;
    }
    *(_QWORD *)&v41 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v75);
    _Q1 = vsubq_f64((float64x2_t)0, v74);
    _V4.D[1] = *((_QWORD *)&v79 + 1);
    v44 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v77, v76), _Q1.f64[0]), (float64x2_t)vzip2q_s64(v77, v76), _Q1, 1), v78, v41);
    _Q1.f64[0] = _Q1.f64[1];
    __asm { FMLA            D3, D1, V4.D[1] }
    *(float *)_Q1.f64 = vmlad_n_f64(_D3, v52, v41);
    v58[5] = vcvt_f32_f64(v44);
    v58[6].i32[0] = LODWORD(_Q1.f64[0]);
    ++v34;
  }
  while (v34 != v35);
  v34 = (unint64_t *)v118;
  if ((_QWORD)v118)
  {
LABEL_44:
    *((_QWORD *)&v118 + 1) = v34;
    operator delete(v34);
  }
LABEL_45:
  sub_2397A2A50((uint64_t)&v118, a5, 0);
  v81 = 0;
  v82 = 0;
  v83 = 0;
  sub_2396F321C((uint64_t)v109, (uint64_t)&v81);
  v80[0] = &v89;
  v80[1] = &v88;
  v80[2] = &v87;
  v80[3] = &v115;
  v37 = v81;
  v36 = v82;
  v117 = 0;
  v38 = operator new(0x60uLL);
  *v38 = &off_250AE3470;
  v38[1] = &v89;
  v38[2] = &v88;
  v38[3] = &v87;
  v38[4] = &v90;
  v38[5] = &v81;
  v38[6] = a1;
  v38[7] = v109;
  v38[8] = &v91;
  v38[9] = &v84;
  v38[10] = &v114;
  v38[11] = v80;
  v117 = v38;
  sub_2397A376C((unint64_t *)&v118, (v36 - v37) >> 3, v116, 0);
  v39 = v117;
  if (v117 == v116)
  {
    v40 = 4;
    v39 = v116;
  }
  else
  {
    if (!v117)
      goto LABEL_64;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_64:
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  sub_2397A2E14(&v118);
  sub_2396DEA54(a1);
  sub_2396DEB3C(a1, (uint64_t)&v91);
  if (*(_BYTE *)(a1 + 48)
    && 0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) != 0xAAAAAAAAAAAAAAABLL
                                                                             * ((uint64_t)(*(_QWORD *)(a1 + 8)
                                                                                        - *(_QWORD *)a1) >> 2)
    || *(_BYTE *)(a1 + 80) && *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 8) - *(_QWORD *)a1
    || *(_BYTE *)(a1 + 112)
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3) != 0xAAAAAAAAAAAAAAABLL
                                                                                             * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2)
    || *(_BYTE *)(a1 + 144)
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2) != (uint64_t)(*(_QWORD *)(a1 + 128)
                                                                                               - *(_QWORD *)(a1 + 120)) >> 2)
  {
    v23 = 0;
    sub_239421038((uint64_t)&v84, v85);
    if (!v108)
      goto LABEL_79;
LABEL_77:
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    goto LABEL_79;
  }
  v23 = 1;
  sub_239421038((uint64_t)&v84, v85);
  if (v108)
    goto LABEL_77;
LABEL_79:
  if (v104)
  {
    v60 = v102;
    if ((_QWORD)v102)
    {
      v61 = *((_QWORD *)&v102 + 1);
      v62 = (void *)v102;
      if (*((_QWORD *)&v102 + 1) != (_QWORD)v102)
      {
        v63 = *((_QWORD *)&v102 + 1);
        do
        {
          v65 = *(void **)(v63 - 24);
          v63 -= 24;
          v64 = v65;
          if (v65)
          {
            *(_QWORD *)(v61 - 16) = v64;
            operator delete(v64);
          }
          v61 = v63;
        }
        while (v63 != v60);
        v62 = (void *)v102;
      }
      *((_QWORD *)&v102 + 1) = v60;
      operator delete(v62);
    }
  }
  if (v101 && v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  if (v97 && __p)
  {
    v95 = __p;
    operator delete(__p);
  }
  if (v91)
  {
    v92 = (char *)v91;
    operator delete(v91);
  }
  v66 = v113;
  if (v113)
  {
    p_shared_owners = (unint64_t *)&v113->__shared_owners_;
    do
      v68 = __ldaxr(p_shared_owners);
    while (__stlxr(v68 - 1, p_shared_owners));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v111;
  if (v111)
  {
    do
    {
      v72 = (_QWORD *)*v69;
      v73 = (void *)v69[3];
      if (v73)
      {
        v69[4] = v73;
        operator delete(v73);
      }
      operator delete(v69);
      v69 = v72;
    }
    while (v72);
  }
  v70 = v110;
  v110 = 0;
  if (v70)
    operator delete(v70);
  return v23;
}

void sub_2396DF5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  sub_239421038((uint64_t)&a28, (_QWORD *)a29);
  sub_2394B6764((uint64_t)&a32);
  sub_2396DF7D4(&a51);
  _Unwind_Resume(a1);
}

uint64_t sub_2396DF690(uint64_t a1, float32x2_t **a2, float a3)
{
  *(float *)a1 = a3;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 8;
  sub_2396F2A88(a1, a2, 0, 0, 0, 0);
  return a1;
}

void sub_2396DF6E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 104);
  if (v3)
    sub_239EC1A68(v3);
  sub_239EC1A04(v1, (void **)(v1 + 56));
  _Unwind_Resume(a1);
}

_QWORD *sub_2396DF70C(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2396DF7B4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EBFED4((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2396DF7D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v8;
  void *v9;

  v2 = (std::__shared_weak_count *)a1[13];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)a1[9];
    if (!v5)
      goto LABEL_8;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)a1[9];
    if (!v5)
      goto LABEL_8;
  }
  do
  {
    v8 = (_QWORD *)*v5;
    v9 = (void *)v5[3];
    if (v9)
    {
      v5[4] = v9;
      operator delete(v9);
    }
    operator delete(v5);
    v5 = v8;
  }
  while (v8);
LABEL_8:
  v6 = (void *)a1[7];
  a1[7] = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

uint64_t sub_2396DF880(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  unint64_t v16[45];

  v16[44] = *MEMORY[0x24BDAC8D0];
  if (a3 <= 0)
    a3 = std::thread::hardware_concurrency();
  sub_2397A2A50((uint64_t)v16, a3, 0);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v14[0] = &off_250AE34B8;
  v14[1] = a2;
  v14[2] = a1;
  v15 = v14;
  sub_2397A376C(v16, v5, v14, 0);
  v6 = v15;
  if (v15 == v14)
  {
    v7 = 4;
    v6 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_8;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_8:
  if (*(_BYTE *)(a2 + 80))
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    v12[0] = &off_250AE3500;
    v12[1] = a2;
    v12[2] = a1;
    v13 = v12;
    sub_2397A376C(v16, v8, v12, 0);
    v9 = v13;
    if (v13 == v12)
    {
      v10 = 4;
      v9 = v12;
      goto LABEL_13;
    }
    if (v13)
    {
      v10 = 5;
LABEL_13:
      (*(void (**)(void))(*v9 + 8 * v10))();
    }
  }
  sub_2397A2E14(v16);
  return 1;
}

void sub_2396DF9E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v2;
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, va_list);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v4 = v10;
  if (v10 == v2)
  {
    v5 = 4;
    va_copy(v4, va);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  sub_2397A2E14(va1);
  _Unwind_Resume(a1);
}

void sub_2396DFA40(uint64_t a1, unsigned int a2, uint64_t a3, char a4)
{
  unint64_t v5;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t **v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    goto LABEL_21;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = a2;
    if (v5 <= a2)
      v8 = a2 % v5;
  }
  else
  {
    v8 = ((_DWORD)v5 - 1) & a2;
  }
  v9 = *(uint64_t ***)(*(_QWORD *)(a1 + 32) + 8 * v8);
  if (v9 && (v10 = *v9) != 0)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = v5 - 1;
      while (1)
      {
        v13 = v10[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)v10 + 4) == a2)
            goto LABEL_23;
        }
        else if ((v13 & v11) != v8)
        {
          goto LABEL_21;
        }
        v10 = (uint64_t *)*v10;
        if (!v10)
          goto LABEL_21;
      }
    }
    while (1)
    {
      v12 = v10[1];
      if (v12 == a2)
        break;
      if (v12 >= v5)
        v12 %= v5;
      if (v12 != v8)
        goto LABEL_21;
LABEL_11:
      v10 = (uint64_t *)*v10;
      if (!v10)
        goto LABEL_21;
    }
    if (*((_DWORD *)v10 + 4) != a2)
      goto LABEL_11;
LABEL_23:
    v14 = *(char **)a3;
    *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
    v15 = v10[17];
    if (v15 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v14) >> 3)
    {
      if (v15 >> 61)
LABEL_59:
        sub_2394189F8();
      v16 = 8 * v15;
      v17 = (char *)operator new(8 * v15);
      *(_QWORD *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v17;
      *(_QWORD *)(a3 + 16) = &v17[v16];
      if (v14)
        operator delete(v14);
    }
    v18 = (uint64_t **)v10[16];
    if (v18)
    {
      v19 = *(char **)(a3 + 8);
      while (1)
      {
        v21 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v19 >= v21)
          break;
        *(_QWORD *)v19 = *((unsigned int *)v18 + 4);
        v20 = (uint64_t)(v19 + 8);
LABEL_30:
        *(_QWORD *)(a3 + 8) = v20;
        v18 = (uint64_t **)*v18;
        v19 = (char *)v20;
        if (!v18)
          goto LABEL_57;
      }
      v22 = *(char **)a3;
      v23 = (uint64_t)&v19[-*(_QWORD *)a3];
      v24 = v23 >> 3;
      v25 = (v23 >> 3) + 1;
      if (v25 >> 61)
        goto LABEL_59;
      v26 = v21 - (_QWORD)v22;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 >> 61)
          sub_239418A80();
        v28 = operator new(8 * v27);
        v29 = &v28[8 * v24];
        *v29 = *((unsigned int *)v18 + 4);
        v20 = (uint64_t)(v29 + 1);
        if (v19 == v22)
          goto LABEL_55;
      }
      else
      {
        v28 = 0;
        v29 = (_QWORD *)(8 * v24);
        *(_QWORD *)(8 * v24) = *((unsigned int *)v18 + 4);
        v20 = 8 * v24 + 8;
        if (v19 == v22)
          goto LABEL_55;
      }
      v30 = v19 - 8 - v22;
      if (v30 >= 0x168)
      {
        if (&v28[v23 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v28[v23 - 8])
        {
          v31 = v19;
        }
        else if (&v19[-(v30 & 0xFFFFFFFFFFFFFFF8) - 8] > v19 - 8)
        {
          v31 = v19;
        }
        else if ((unint64_t)(v19 - v28 - v23) >= 0x20)
        {
          v32 = (v30 >> 3) + 1;
          v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
          v31 = &v19[-v33];
          v29 = (_QWORD *)((char *)v29 - v33);
          v34 = &v28[8 * v24 - 16];
          v35 = v19 - 16;
          v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 4;
          }
          while (v36);
          if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_55:
            *(_QWORD *)a3 = v29;
            *(_QWORD *)(a3 + 8) = v20;
            *(_QWORD *)(a3 + 16) = &v28[8 * v27];
            if (v22)
              operator delete(v22);
            goto LABEL_30;
          }
        }
        else
        {
          v31 = v19;
        }
      }
      else
      {
        v31 = v19;
      }
      do
      {
        v38 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *--v29 = v38;
      }
      while (v31 != v22);
      goto LABEL_55;
    }
LABEL_57:
    if ((a4 & 1) != 0)
      std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  }
  else
  {
LABEL_21:
    *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  }
}

uint64_t sub_2396DFD60(uint64_t *a1, uint64_t a2, uint64_t a3, float a4)
{
  void *v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  void **v17;
  void **v18;
  void **v19;
  void *v20;
  char *v21;
  char *v22;
  void *v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  int64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  _BYTE *v37;
  unint64_t v38;
  _BYTE *v39;
  size_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  void *v54;
  void *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  void *v60;
  void *v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int v70;
  _BYTE *v71;
  unint64_t v72;
  _BYTE *v73;
  size_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  __int128 *v84;
  uint64_t v85;
  __int128 v86;
  int v87;
  uint64_t v88;
  _BYTE *v89;
  unint64_t v90;
  _BYTE *v91;
  size_t v92;
  char *v93;
  char *v94;
  char *v95;
  __int16 v96;
  char v97;
  uint64_t v98;
  _BYTE *v99;
  unint64_t v100;
  _BYTE *v101;
  size_t v102;
  char *v103;
  char *v104;
  char *v105;
  __int16 v106;
  char v107;
  uint64_t v108;
  unint64_t v109;
  float v110;
  float v111;
  uint64_t *v112;
  float v113;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  _DWORD *v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  _DWORD *v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  int v139;
  unint64_t v140;
  float *v141;
  float *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _BYTE *v148;
  float *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  float *v158;
  float *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _BYTE *v165;
  float *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  float *v171;
  _OWORD *v172;
  float *v173;
  uint64_t v174;
  __int128 v175;
  int v176;
  uint64_t v177;
  unint64_t v178;
  _BYTE *v179;
  __int16 v180;
  _BYTE *v181;
  _BYTE *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  float *v190;
  _OWORD *v191;
  float *v192;
  uint64_t v193;
  __int128 v194;
  int v195;
  uint64_t v196;
  unint64_t v197;
  _BYTE *v198;
  __int16 v199;
  _BYTE *v200;
  _BYTE *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  __int16 v207;
  char *v208;
  char *v209;
  __int16 v210;
  char v211;
  uint64_t v212;
  const void **v213;
  _QWORD *v214;
  const void *v215;
  _BYTE *v216;
  int64_t v217;
  char *v218;
  char *v219;
  char *v220;
  __int16 v221;
  char *v222;
  char *v223;
  __int16 v224;
  char v225;
  uint64_t v226;
  const void **v227;
  _QWORD *v228;
  const void *v229;
  _BYTE *v230;
  int64_t v231;
  char *v232;
  char *v233;
  _QWORD *v234;
  _QWORD *v235;
  char **v236;
  char **v237;
  float **v238;
  float **v239;

  if (*((_BYTE *)a1 + 48) && 0xAAAAAAAAAAAAAAABLL * (a1[4] - a1[3]) != 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2)
    || *((_BYTE *)a1 + 80) && a1[8] - a1[7] != a1[1] - *a1
    || *((_BYTE *)a1 + 112)
    && 0xAAAAAAAAAAAAAAABLL * ((a1[12] - a1[11]) >> 3) != 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2))
  {
    return 0;
  }
  if (*((_BYTE *)a1 + 144))
  {
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2) == (a1[16] - a1[15]) >> 2)
    {
      if (!*(_BYTE *)(a2 + 144))
      {
        *(_QWORD *)(a2 + 120) = 0;
        *(_QWORD *)(a2 + 128) = 0;
        *(_QWORD *)(a2 + 136) = 0;
        *(_BYTE *)(a2 + 144) = 1;
      }
      if (*(_BYTE *)(a2 + 48))
      {
        v8 = *(void **)(a2 + 24);
        if (v8)
        {
          *(_QWORD *)(a2 + 32) = v8;
          operator delete(v8);
        }
        *(_BYTE *)(a2 + 48) = 0;
      }
      if (*(_BYTE *)(a2 + 80))
      {
        v9 = *(void **)(a2 + 56);
        if (v9)
        {
          *(_QWORD *)(a2 + 64) = v9;
          operator delete(v9);
        }
        *(_BYTE *)(a2 + 80) = 0;
      }
      v237 = (char **)(a2 + 88);
      if (*(_BYTE *)(a2 + 112))
      {
        v10 = *v237;
        if (*v237)
        {
          v11 = *(char **)(a2 + 96);
          v12 = *v237;
          if (v11 != v10)
          {
            v13 = *(char **)(a2 + 96);
            do
            {
              v15 = (void *)*((_QWORD *)v13 - 3);
              v13 -= 24;
              v14 = v15;
              if (v15)
              {
                *((_QWORD *)v11 - 2) = v14;
                operator delete(v14);
              }
              v11 = v13;
            }
            while (v13 != v10);
            v12 = *v237;
          }
          *(_QWORD *)(a2 + 96) = v10;
          operator delete(v12);
        }
        *(_BYTE *)(a2 + 112) = 0;
      }
      v28 = a1[1] - *a1;
      v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 2);
      v30 = *(char **)a2;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 2) < v29)
      {
        if (v29 > 0x1555555555555555)
LABEL_298:
          sub_2394189F8();
        v31 = *(char **)(a2 + 8);
        v32 = (char *)operator new(v28);
        v33 = &v32[12 * ((v31 - v30) / 12)];
        v34 = v33;
        if (v31 != v30)
        {
          v34 = &v32[12 * ((v31 - v30) / 12)];
          do
          {
            v35 = *(_QWORD *)(v31 - 12);
            v31 -= 12;
            v36 = *((_DWORD *)v31 + 2);
            *(_QWORD *)(v34 - 12) = v35;
            v34 -= 12;
            *((_DWORD *)v34 + 2) = v36;
          }
          while (v31 != v30);
        }
        *(_QWORD *)a2 = v34;
        *(_QWORD *)(a2 + 8) = v33;
        *(_QWORD *)(a2 + 16) = &v32[12 * v29];
        if (v30)
          operator delete(v30);
      }
      if (!*(_BYTE *)(a2 + 144))
        goto LABEL_296;
      v37 = *(_BYTE **)(a2 + 120);
      v38 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
      v239 = (float **)(a2 + 120);
      if (v38 <= (uint64_t)(*(_QWORD *)(a2 + 136) - (_QWORD)v37) >> 2)
      {
LABEL_70:
        if (!*(_BYTE *)(a3 + 144))
        {
          *(_QWORD *)(a3 + 120) = 0;
          *(_QWORD *)(a3 + 128) = 0;
          *(_QWORD *)(a3 + 136) = 0;
          *(_BYTE *)(a3 + 144) = 1;
        }
        if (*(_BYTE *)(a3 + 48))
        {
          v54 = *(void **)(a3 + 24);
          if (v54)
          {
            *(_QWORD *)(a3 + 32) = v54;
            operator delete(v54);
          }
          *(_BYTE *)(a3 + 48) = 0;
        }
        if (*(_BYTE *)(a3 + 80))
        {
          v55 = *(void **)(a3 + 56);
          if (v55)
          {
            *(_QWORD *)(a3 + 64) = v55;
            operator delete(v55);
          }
          *(_BYTE *)(a3 + 80) = 0;
        }
        v236 = (char **)(a3 + 88);
        if (*(_BYTE *)(a3 + 112))
        {
          v56 = *v236;
          if (*v236)
          {
            v57 = *(char **)(a3 + 96);
            v58 = *v236;
            if (v57 != v56)
            {
              v59 = *(char **)(a3 + 96);
              do
              {
                v61 = (void *)*((_QWORD *)v59 - 3);
                v59 -= 24;
                v60 = v61;
                if (v61)
                {
                  *((_QWORD *)v57 - 2) = v60;
                  operator delete(v60);
                }
                v57 = v59;
              }
              while (v59 != v56);
              v58 = *v236;
            }
            *(_QWORD *)(a3 + 96) = v56;
            operator delete(v58);
          }
          *(_BYTE *)(a3 + 112) = 0;
        }
        v62 = a1[1] - *a1;
        v63 = 0xAAAAAAAAAAAAAAABLL * (v62 >> 2);
        v64 = *(char **)a3;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)a3) >> 2) < v63)
        {
          if (v63 > 0x1555555555555555)
LABEL_300:
            sub_2394189F8();
          v65 = *(char **)(a3 + 8);
          v66 = (char *)operator new(v62);
          v67 = &v66[12 * ((v65 - v64) / 12)];
          v68 = v67;
          if (v65 != v64)
          {
            v68 = &v66[12 * ((v65 - v64) / 12)];
            do
            {
              v69 = *(_QWORD *)(v65 - 12);
              v65 -= 12;
              v70 = *((_DWORD *)v65 + 2);
              *(_QWORD *)(v68 - 12) = v69;
              v68 -= 12;
              *((_DWORD *)v68 + 2) = v70;
            }
            while (v65 != v64);
          }
          *(_QWORD *)a3 = v68;
          *(_QWORD *)(a3 + 8) = v67;
          *(_QWORD *)(a3 + 16) = &v66[12 * v63];
          if (v64)
            operator delete(v64);
        }
        if (!*(_BYTE *)(a3 + 144))
          goto LABEL_296;
        v71 = *(_BYTE **)(a3 + 120);
        v72 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
        v238 = (float **)(a3 + 120);
        if (v72 <= (uint64_t)(*(_QWORD *)(a3 + 136) - (_QWORD)v71) >> 2)
          goto LABEL_110;
        if (v72 >> 62)
LABEL_301:
          sub_2394189F8();
        v73 = *(_BYTE **)(a3 + 128);
        v74 = 0xAAAAAAAAAAAAAAACLL * ((a1[1] - *a1) >> 2);
        v75 = (char *)operator new(v74);
        v76 = v73 - v71;
        v77 = &v75[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
        v78 = v77;
        if (v73 != v71)
        {
          if ((unint64_t)(v76 - 4) < 0x2C)
          {
            v78 = &v75[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
            do
            {
LABEL_107:
              v87 = *((_DWORD *)v73 - 1);
              v73 -= 4;
              *((_DWORD *)v78 - 1) = v87;
              v78 -= 4;
            }
            while (v73 != v71);
            goto LABEL_108;
          }
          v78 = &v75[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(&v73[-(v76 & 0xFFFFFFFFFFFFFFFCLL)] - v75) < 0x20)
            goto LABEL_107;
          v79 = v76 >> 2;
          v80 = ((unint64_t)(v76 - 4) >> 2) + 1;
          v81 = 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
          v82 = &v73[-v81];
          v78 = &v77[-v81];
          v83 = &v75[4 * v79 - 16];
          v84 = (__int128 *)(v73 - 16);
          v85 = v80 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v86 = *v84;
            *((_OWORD *)v83 - 1) = *(v84 - 1);
            *(_OWORD *)v83 = v86;
            v83 -= 32;
            v84 -= 2;
            v85 -= 8;
          }
          while (v85);
          v73 = v82;
          if (v80 != (v80 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_107;
        }
LABEL_108:
        *(_QWORD *)(a3 + 120) = v78;
        *(_QWORD *)(a3 + 128) = v77;
        *(_QWORD *)(a3 + 136) = &v75[v74];
        if (v71)
          operator delete(v71);
LABEL_110:
        if (*((_BYTE *)a1 + 48))
        {
          if (*(_BYTE *)(a2 + 48))
          {
            v88 = *(_QWORD *)(a2 + 40);
            v89 = *(_BYTE **)(a2 + 24);
          }
          else
          {
            v89 = 0;
            v88 = 0;
            *(_QWORD *)(a2 + 24) = 0;
            *(_QWORD *)(a2 + 32) = 0;
            *(_QWORD *)(a2 + 40) = 0;
            *(_BYTE *)(a2 + 48) = 1;
          }
          v90 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * (v88 - (_QWORD)v89) < v90)
          {
            if (v90 >= 0x5555555555555556)
              sub_2394189F8();
            v91 = *(_BYTE **)(a2 + 32);
            v92 = (a1[1] - *a1) >> 2;
            v93 = (char *)operator new(v92);
            v94 = &v93[3 * ((v91 - v89) / 3)];
            v95 = v94;
            if (v91 != v89)
            {
              v95 = &v93[3 * ((v91 - v89) / 3)];
              do
              {
                v96 = *(_WORD *)(v91 - 3);
                v91 -= 3;
                v97 = v91[2];
                *(_WORD *)(v95 - 3) = v96;
                v95 -= 3;
                v95[2] = v97;
              }
              while (v91 != v89);
            }
            *(_QWORD *)(a2 + 24) = v95;
            *(_QWORD *)(a2 + 32) = v94;
            *(_QWORD *)(a2 + 40) = &v93[v92];
            if (v89)
              operator delete(v89);
          }
          if (*(_BYTE *)(a3 + 48))
          {
            v98 = *(_QWORD *)(a3 + 40);
            v99 = *(_BYTE **)(a3 + 24);
          }
          else
          {
            v99 = 0;
            v98 = 0;
            *(_QWORD *)(a3 + 24) = 0;
            *(_QWORD *)(a3 + 32) = 0;
            *(_QWORD *)(a3 + 40) = 0;
            *(_BYTE *)(a3 + 48) = 1;
          }
          v100 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * (v98 - (_QWORD)v99) < v100)
          {
            if (v100 >= 0x5555555555555556)
              sub_2394189F8();
            v101 = *(_BYTE **)(a3 + 32);
            v102 = (a1[1] - *a1) >> 2;
            v103 = (char *)operator new(v102);
            v104 = &v103[3 * ((v101 - v99) / 3)];
            v105 = v104;
            if (v101 != v99)
            {
              v105 = &v103[3 * ((v101 - v99) / 3)];
              do
              {
                v106 = *(_WORD *)(v101 - 3);
                v101 -= 3;
                v107 = v101[2];
                *(_WORD *)(v105 - 3) = v106;
                v105 -= 3;
                v105[2] = v107;
              }
              while (v101 != v99);
            }
            *(_QWORD *)(a3 + 24) = v105;
            *(_QWORD *)(a3 + 32) = v104;
            *(_QWORD *)(a3 + 40) = &v103[v102];
            if (v99)
              operator delete(v99);
          }
        }
        if (*((_BYTE *)a1 + 112))
        {
          if (!*(_BYTE *)(a2 + 112))
          {
            *v237 = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_QWORD *)(a2 + 104) = 0;
            *(_BYTE *)(a2 + 112) = 1;
          }
          sub_2395135EC((uint64_t)v237, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2));
          if (!*(_BYTE *)(a3 + 112))
          {
            *v236 = 0;
            *(_QWORD *)(a3 + 96) = 0;
            *(_QWORD *)(a3 + 104) = 0;
            *(_BYTE *)(a3 + 112) = 1;
          }
          sub_2395135EC((uint64_t)v236, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2));
        }
        v108 = *a1;
        if (a1[1] != *a1)
        {
          v109 = 0;
          v110 = a4 + 0.00000011921;
          v234 = (_QWORD *)(a2 + 24);
          v235 = (_QWORD *)(a3 + 24);
          v111 = a4 + -0.00000011921;
          while (1)
          {
            if (!*((_BYTE *)a1 + 144))
              goto LABEL_296;
            v112 = (uint64_t *)(v108 + 12 * v109);
            v113 = *(float *)(a1[15] + 4 * v109);
            if (v113 >= v110 || v113 <= v111)
            {
              v116 = *(char **)(a3 + 8);
              v115 = *(_QWORD *)(a3 + 16);
              if ((unint64_t)v116 >= v115)
              {
                v123 = *(char **)a3;
                v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v116[-*(_QWORD *)a3] >> 2);
                v125 = v124 + 1;
                if (v124 + 1 > 0x1555555555555555)
                  goto LABEL_300;
                v126 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115 - (_QWORD)v123) >> 2);
                if (2 * v126 > v125)
                  v125 = 2 * v126;
                if (v126 >= 0xAAAAAAAAAAAAAAALL)
                  v127 = 0x1555555555555555;
                else
                  v127 = v125;
                if (v127)
                {
                  if (v127 > 0x1555555555555555)
                    goto LABEL_297;
                  v128 = (char *)operator new(12 * v127);
                }
                else
                {
                  v128 = 0;
                }
                v135 = *v112;
                v136 = &v128[12 * v124];
                *((_DWORD *)v136 + 2) = *((_DWORD *)v112 + 2);
                *(_QWORD *)v136 = v135;
                v137 = v136;
                if (v116 != v123)
                {
                  do
                  {
                    v138 = *(_QWORD *)(v116 - 12);
                    v116 -= 12;
                    v139 = *((_DWORD *)v116 + 2);
                    *(_QWORD *)(v137 - 12) = v138;
                    v137 -= 12;
                    *((_DWORD *)v137 + 2) = v139;
                  }
                  while (v116 != v123);
                  v116 = *(char **)a3;
                }
                v118 = v136 + 12;
                *(_QWORD *)a3 = v137;
                *(_QWORD *)(a3 + 8) = v136 + 12;
                *(_QWORD *)(a3 + 16) = &v128[12 * v127];
                if (v116)
                  operator delete(v116);
              }
              else
              {
                v117 = *v112;
                *((_DWORD *)v116 + 2) = *((_DWORD *)v112 + 2);
                *(_QWORD *)v116 = v117;
                v118 = v116 + 12;
              }
              *(_QWORD *)(a3 + 8) = v118;
              if (!*(_BYTE *)(a3 + 144))
                goto LABEL_296;
              v141 = *(float **)(a3 + 128);
              v140 = *(_QWORD *)(a3 + 136);
              if ((unint64_t)v141 < v140)
              {
                *v141 = v113;
                *(_QWORD *)(a3 + 128) = v141 + 1;
                if (!*((_BYTE *)a1 + 48))
                  goto LABEL_262;
LABEL_223:
                if (!*(_BYTE *)(a3 + 48))
                  goto LABEL_296;
                v177 = a1[3] + 3 * v109;
                v179 = *(_BYTE **)(a3 + 32);
                v178 = *(_QWORD *)(a3 + 40);
                if ((unint64_t)v179 >= v178)
                {
                  v182 = (_BYTE *)*v235;
                  v183 = 0xAAAAAAAAAAAAAAABLL * (_QWORD)&v179[-*v235];
                  v184 = v183 + 1;
                  if (v183 + 1 >= 0x5555555555555556)
                    sub_2394189F8();
                  v185 = 0xAAAAAAAAAAAAAAABLL * (v178 - (_QWORD)v182);
                  if (2 * v185 > v184)
                    v184 = 2 * v185;
                  if (v185 >= 0x2AAAAAAAAAAAAAAALL)
                    v186 = 0x5555555555555555;
                  else
                    v186 = v184;
                  if (v186)
                  {
                    if (v186 >= 0x5555555555555556)
                      goto LABEL_297;
                    v187 = (char *)operator new(3 * v186);
                  }
                  else
                  {
                    v187 = 0;
                  }
                  v207 = *(_WORD *)v177;
                  v208 = &v187[3 * v183];
                  v208[2] = *(_BYTE *)(v177 + 2);
                  *(_WORD *)v208 = v207;
                  v209 = v208;
                  if (v179 != v182)
                  {
                    do
                    {
                      v210 = *(_WORD *)(v179 - 3);
                      v179 -= 3;
                      v211 = v179[2];
                      *(_WORD *)(v209 - 3) = v210;
                      v209 -= 3;
                      v209[2] = v211;
                    }
                    while (v179 != v182);
                    v179 = (_BYTE *)*v235;
                  }
                  v181 = v208 + 3;
                  *(_QWORD *)(a3 + 24) = v209;
                  *(_QWORD *)(a3 + 32) = v208 + 3;
                  *(_QWORD *)(a3 + 40) = &v187[3 * v186];
                  if (v179)
                    operator delete(v179);
                }
                else
                {
                  v180 = *(_WORD *)v177;
                  v179[2] = *(_BYTE *)(v177 + 2);
                  *(_WORD *)v179 = v180;
                  v181 = v179 + 3;
                }
                *(_QWORD *)(a3 + 32) = v181;
LABEL_262:
                if (*((_BYTE *)a1 + 112))
                {
                  if (!*(_BYTE *)(a3 + 112))
                    goto LABEL_296;
                  v212 = a1[11];
                  v213 = (const void **)(v212 + 24 * v109);
                  v214 = *(_QWORD **)(a3 + 96);
                  if ((unint64_t)v214 >= *(_QWORD *)(a3 + 104))
                  {
                    v220 = sub_2395BB144(v236, (uint64_t)v213);
                  }
                  else
                  {
                    *v214 = 0;
                    v214[1] = 0;
                    v214[2] = 0;
                    v215 = *v213;
                    v216 = *(_BYTE **)(v212 + 24 * v109 + 8);
                    v217 = v216 - (_BYTE *)*v213;
                    if (v216 != *v213)
                    {
                      if (v217 < 0)
                        sub_2394189F8();
                      v218 = (char *)operator new(v216 - (_BYTE *)*v213);
                      *v214 = v218;
                      v214[1] = v218;
                      v219 = &v218[4 * (v217 >> 2)];
                      v214[2] = v219;
                      memcpy(v218, v215, v217);
                      v214[1] = v219;
                    }
                    v220 = (char *)(v214 + 3);
                    *(_QWORD *)(a3 + 96) = v214 + 3;
                  }
                  *(_QWORD *)(a3 + 96) = v220;
                }
                goto LABEL_140;
              }
              v142 = *v238;
              v143 = (char *)v141 - (char *)*v238;
              v144 = v143 >> 2;
              v145 = (v143 >> 2) + 1;
              if (v145 >> 62)
                goto LABEL_301;
              v146 = v140 - (_QWORD)v142;
              if (v146 >> 1 > v145)
                v145 = v146 >> 1;
              if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
                v147 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v147 = v145;
              if (v147)
              {
                if (v147 >> 62)
                  goto LABEL_297;
                v148 = operator new(4 * v147);
                v149 = (float *)&v148[4 * v144];
                *v149 = v113;
                v150 = (uint64_t)(v149 + 1);
                if (v141 != v142)
                {
LABEL_188:
                  v151 = (char *)(v141 - 1) - (char *)v142;
                  if (v151 < 0x2C)
                    goto LABEL_310;
                  if ((unint64_t)((char *)v141 - &v148[v143]) < 0x20)
                    goto LABEL_310;
                  v169 = (v151 >> 2) + 1;
                  v170 = 4 * (v169 & 0x7FFFFFFFFFFFFFF8);
                  v171 = &v141[v170 / 0xFFFFFFFFFFFFFFFCLL];
                  v149 = (float *)((char *)v149 - v170);
                  v172 = &v148[4 * v144 - 16];
                  v173 = v141 - 4;
                  v174 = v169 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v175 = *(_OWORD *)v173;
                    *(v172 - 1) = *((_OWORD *)v173 - 1);
                    *v172 = v175;
                    v172 -= 2;
                    v173 -= 8;
                    v174 -= 8;
                  }
                  while (v174);
                  v141 = v171;
                  if (v169 != (v169 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_310:
                    do
                    {
                      v176 = *((_DWORD *)v141-- - 1);
                      *((_DWORD *)v149-- - 1) = v176;
                    }
                    while (v141 != v142);
                  }
                }
              }
              else
              {
                v148 = 0;
                v149 = (float *)(4 * v144);
                *(float *)(4 * v144) = v113;
                v150 = 4 * v144 + 4;
                if (v141 != v142)
                  goto LABEL_188;
              }
              *(_QWORD *)(a3 + 120) = v149;
              *(_QWORD *)(a3 + 128) = v150;
              *(_QWORD *)(a3 + 136) = &v148[4 * v147];
              if (v142)
                operator delete(v142);
              *(_QWORD *)(a3 + 128) = v150;
              if (*((_BYTE *)a1 + 48))
                goto LABEL_223;
              goto LABEL_262;
            }
            v120 = *(char **)(a2 + 8);
            v119 = *(_QWORD *)(a2 + 16);
            if ((unint64_t)v120 >= v119)
            {
              v129 = *(char **)a2;
              v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v120[-*(_QWORD *)a2] >> 2);
              v131 = v130 + 1;
              if (v130 + 1 > 0x1555555555555555)
                goto LABEL_298;
              v132 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v119 - (_QWORD)v129) >> 2);
              if (2 * v132 > v131)
                v131 = 2 * v132;
              if (v132 >= 0xAAAAAAAAAAAAAAALL)
                v133 = 0x1555555555555555;
              else
                v133 = v131;
              if (v133)
              {
                if (v133 > 0x1555555555555555)
                  goto LABEL_297;
                v134 = (char *)operator new(12 * v133);
              }
              else
              {
                v134 = 0;
              }
              v152 = *v112;
              v153 = &v134[12 * v130];
              *((_DWORD *)v153 + 2) = *((_DWORD *)v112 + 2);
              *(_QWORD *)v153 = v152;
              v154 = v153;
              if (v120 != v129)
              {
                do
                {
                  v155 = *(_QWORD *)(v120 - 12);
                  v120 -= 12;
                  v156 = *((_DWORD *)v120 + 2);
                  *(_QWORD *)(v154 - 12) = v155;
                  v154 -= 12;
                  *((_DWORD *)v154 + 2) = v156;
                }
                while (v120 != v129);
                v120 = *(char **)a2;
              }
              v122 = v153 + 12;
              *(_QWORD *)a2 = v154;
              *(_QWORD *)(a2 + 8) = v153 + 12;
              *(_QWORD *)(a2 + 16) = &v134[12 * v133];
              if (v120)
                operator delete(v120);
            }
            else
            {
              v121 = *v112;
              *((_DWORD *)v120 + 2) = *((_DWORD *)v112 + 2);
              *(_QWORD *)v120 = v121;
              v122 = v120 + 12;
            }
            *(_QWORD *)(a2 + 8) = v122;
            if (!*(_BYTE *)(a2 + 144))
              goto LABEL_296;
            v158 = *(float **)(a2 + 128);
            v157 = *(_QWORD *)(a2 + 136);
            if ((unint64_t)v158 >= v157)
              break;
            *v158 = v113;
            *(_QWORD *)(a2 + 128) = v158 + 1;
            if (!*((_BYTE *)a1 + 48))
              goto LABEL_278;
LABEL_243:
            if (!*(_BYTE *)(a2 + 48))
              goto LABEL_296;
            v196 = a1[3] + 3 * v109;
            v198 = *(_BYTE **)(a2 + 32);
            v197 = *(_QWORD *)(a2 + 40);
            if ((unint64_t)v198 >= v197)
            {
              v201 = (_BYTE *)*v234;
              v202 = 0xAAAAAAAAAAAAAAABLL * (_QWORD)&v198[-*v234];
              v203 = v202 + 1;
              if (v202 + 1 >= 0x5555555555555556)
                sub_2394189F8();
              v204 = 0xAAAAAAAAAAAAAAABLL * (v197 - (_QWORD)v201);
              if (2 * v204 > v203)
                v203 = 2 * v204;
              if (v204 >= 0x2AAAAAAAAAAAAAAALL)
                v205 = 0x5555555555555555;
              else
                v205 = v203;
              if (v205)
              {
                if (v205 >= 0x5555555555555556)
LABEL_297:
                  sub_239418A80();
                v206 = (char *)operator new(3 * v205);
              }
              else
              {
                v206 = 0;
              }
              v221 = *(_WORD *)v196;
              v222 = &v206[3 * v202];
              v222[2] = *(_BYTE *)(v196 + 2);
              *(_WORD *)v222 = v221;
              v223 = v222;
              if (v198 != v201)
              {
                do
                {
                  v224 = *(_WORD *)(v198 - 3);
                  v198 -= 3;
                  v225 = v198[2];
                  *(_WORD *)(v223 - 3) = v224;
                  v223 -= 3;
                  v223[2] = v225;
                }
                while (v198 != v201);
                v198 = (_BYTE *)*v234;
              }
              v200 = v222 + 3;
              *(_QWORD *)(a2 + 24) = v223;
              *(_QWORD *)(a2 + 32) = v222 + 3;
              *(_QWORD *)(a2 + 40) = &v206[3 * v205];
              if (v198)
                operator delete(v198);
            }
            else
            {
              v199 = *(_WORD *)v196;
              v198[2] = *(_BYTE *)(v196 + 2);
              *(_WORD *)v198 = v199;
              v200 = v198 + 3;
            }
            *(_QWORD *)(a2 + 32) = v200;
LABEL_278:
            if (*((_BYTE *)a1 + 112))
            {
              if (!*(_BYTE *)(a2 + 112))
                goto LABEL_296;
              v226 = a1[11];
              v227 = (const void **)(v226 + 24 * v109);
              v228 = *(_QWORD **)(a2 + 96);
              if ((unint64_t)v228 >= *(_QWORD *)(a2 + 104))
              {
                *(_QWORD *)(a2 + 96) = sub_2395BB144(v237, (uint64_t)v227);
              }
              else
              {
                *v228 = 0;
                v228[1] = 0;
                v228[2] = 0;
                v229 = *v227;
                v230 = *(_BYTE **)(v226 + 24 * v109 + 8);
                v231 = v230 - (_BYTE *)*v227;
                if (v230 != *v227)
                {
                  if (v231 < 0)
                    sub_2394189F8();
                  v232 = (char *)operator new(v230 - (_BYTE *)*v227);
                  *v228 = v232;
                  v228[1] = v232;
                  v233 = &v232[4 * (v231 >> 2)];
                  v228[2] = v233;
                  memcpy(v232, v229, v231);
                  v228[1] = v233;
                }
                *(_QWORD *)(a2 + 96) = v228 + 3;
                *(_QWORD *)(a2 + 96) = v228 + 3;
              }
            }
LABEL_140:
            ++v109;
            v108 = *a1;
            if (v109 >= 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2))
              goto LABEL_285;
          }
          v159 = *v239;
          v160 = (char *)v158 - (char *)*v239;
          v161 = v160 >> 2;
          v162 = (v160 >> 2) + 1;
          if (v162 >> 62)
            goto LABEL_299;
          v163 = v157 - (_QWORD)v159;
          if (v163 >> 1 > v162)
            v162 = v163 >> 1;
          if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL)
            v164 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v164 = v162;
          if (v164)
          {
            if (v164 >> 62)
              goto LABEL_297;
            v165 = operator new(4 * v164);
            v166 = (float *)&v165[4 * v161];
            *v166 = v113;
            v167 = (uint64_t)(v166 + 1);
            if (v158 == v159)
            {
LABEL_240:
              *(_QWORD *)(a2 + 120) = v166;
              *(_QWORD *)(a2 + 128) = v167;
              *(_QWORD *)(a2 + 136) = &v165[4 * v164];
              if (v159)
                operator delete(v159);
              *(_QWORD *)(a2 + 128) = v167;
              if (!*((_BYTE *)a1 + 48))
                goto LABEL_278;
              goto LABEL_243;
            }
          }
          else
          {
            v165 = 0;
            v166 = (float *)(4 * v161);
            *(float *)(4 * v161) = v113;
            v167 = 4 * v161 + 4;
            if (v158 == v159)
              goto LABEL_240;
          }
          v168 = (char *)(v158 - 1) - (char *)v159;
          if (v168 < 0x2C)
            goto LABEL_311;
          if ((unint64_t)((char *)v158 - &v165[v160]) < 0x20)
            goto LABEL_311;
          v188 = (v168 >> 2) + 1;
          v189 = 4 * (v188 & 0x7FFFFFFFFFFFFFF8);
          v190 = &v158[v189 / 0xFFFFFFFFFFFFFFFCLL];
          v166 = (float *)((char *)v166 - v189);
          v191 = &v165[4 * v161 - 16];
          v192 = v158 - 4;
          v193 = v188 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v194 = *(_OWORD *)v192;
            *(v191 - 1) = *((_OWORD *)v192 - 1);
            *v191 = v194;
            v191 -= 2;
            v192 -= 8;
            v193 -= 8;
          }
          while (v193);
          v158 = v190;
          if (v188 != (v188 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_311:
            do
            {
              v195 = *((_DWORD *)v158-- - 1);
              *((_DWORD *)v166-- - 1) = v195;
            }
            while (v158 != v159);
          }
          goto LABEL_240;
        }
LABEL_285:
        sub_2396E1028(a2);
        if (*(_BYTE *)(a2 + 144))
        {
          sub_2396E112C((uint64_t)v239);
          sub_2396E1028(a3);
          if (*(_BYTE *)(a3 + 144))
          {
            sub_2396E112C((uint64_t)v238);
            if (*((_BYTE *)a1 + 48))
            {
              if (!*(_BYTE *)(a2 + 48))
                goto LABEL_296;
              sub_2396E1254(a2 + 24);
              if (!*(_BYTE *)(a3 + 48))
                goto LABEL_296;
              sub_2396E1254(a3 + 24);
            }
            if (!*((_BYTE *)a1 + 112))
              return 1;
            if (*(_BYTE *)(a2 + 112))
            {
              sub_2396E134C((uint64_t)v237);
              if (*(_BYTE *)(a3 + 112))
              {
                sub_2396E134C((uint64_t)v236);
                return 1;
              }
            }
          }
        }
LABEL_296:
        sub_2394875CC();
      }
      if (v38 >> 62)
LABEL_299:
        sub_2394189F8();
      v39 = *(_BYTE **)(a2 + 128);
      v40 = 0xAAAAAAAAAAAAAAACLL * ((a1[1] - *a1) >> 2);
      v41 = (char *)operator new(v40);
      v42 = v39 - v37;
      v43 = &v41[(v39 - v37) & 0xFFFFFFFFFFFFFFFCLL];
      v44 = v43;
      if (v39 != v37)
      {
        if ((unint64_t)(v42 - 4) < 0x2C)
        {
          v44 = &v41[(v39 - v37) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_67:
            v53 = *((_DWORD *)v39 - 1);
            v39 -= 4;
            *((_DWORD *)v44 - 1) = v53;
            v44 -= 4;
          }
          while (v39 != v37);
          goto LABEL_68;
        }
        v44 = &v41[(v39 - v37) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(&v39[-(v42 & 0xFFFFFFFFFFFFFFFCLL)] - v41) < 0x20)
          goto LABEL_67;
        v45 = v42 >> 2;
        v46 = ((unint64_t)(v42 - 4) >> 2) + 1;
        v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
        v48 = &v39[-v47];
        v44 = &v43[-v47];
        v49 = &v41[4 * v45 - 16];
        v50 = (__int128 *)(v39 - 16);
        v51 = v46 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v52 = *v50;
          *((_OWORD *)v49 - 1) = *(v50 - 1);
          *(_OWORD *)v49 = v52;
          v49 -= 32;
          v50 -= 2;
          v51 -= 8;
        }
        while (v51);
        v39 = v48;
        if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_67;
      }
LABEL_68:
      *(_QWORD *)(a2 + 120) = v44;
      *(_QWORD *)(a2 + 128) = v43;
      *(_QWORD *)(a2 + 136) = &v41[v40];
      if (v37)
        operator delete(v37);
      goto LABEL_70;
    }
    return 0;
  }
  if ((uint64_t *)a2 != a1)
    sub_2394ECC58((_QWORD *)a2, (char *)*a1, (char *)a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2));
  sub_2394ED1E4(a2 + 24, (uint64_t)(a1 + 3));
  v17 = (void **)(a2 + 56);
  sub_2394ED088(a2 + 56, (uint64_t)(a1 + 7));
  v18 = (void **)(a2 + 88);
  sub_2396E5FA4(a2 + 88, (uint64_t)(a1 + 11));
  v19 = (void **)(a2 + 120);
  sub_2396E6088(a2 + 120, (uint64_t)(a1 + 15));
  if (*(_BYTE *)(a2 + 80))
  {
    v20 = *v17;
    if (*v17)
    {
      *(_QWORD *)(a2 + 64) = v20;
      operator delete(v20);
    }
    *(_BYTE *)(a2 + 80) = 0;
  }
  if (*(_BYTE *)(a2 + 112))
  {
    v21 = (char *)*v18;
    if (*v18)
    {
      v22 = *(char **)(a2 + 96);
      v23 = *v18;
      if (v22 != v21)
      {
        v24 = *(char **)(a2 + 96);
        do
        {
          v26 = (void *)*((_QWORD *)v24 - 3);
          v24 -= 24;
          v25 = v26;
          if (v26)
          {
            *((_QWORD *)v22 - 2) = v25;
            operator delete(v25);
          }
          v22 = v24;
        }
        while (v24 != v21);
        v23 = *v18;
      }
      *(_QWORD *)(a2 + 96) = v21;
      operator delete(v23);
    }
    *(_BYTE *)(a2 + 112) = 0;
  }
  if (!*(_BYTE *)(a2 + 144))
    return 1;
  v27 = *v19;
  if (*v19)
  {
    *(_QWORD *)(a2 + 128) = v27;
    operator delete(v27);
  }
  *(_BYTE *)(a2 + 144) = 0;
  return 1;
}

void sub_2396E0FE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 96) = v2;
  _Unwind_Resume(exception_object);
}

void sub_2396E1004(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 96) = v2;
  _Unwind_Resume(exception_object);
}

void sub_2396E1028(uint64_t a1)
{
  _DWORD *v1;
  int64x2_t v2;
  int64x2_t v3;
  int64x2_t v4;
  unint64_t v5;
  _DWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;

  v1 = *(_DWORD **)a1;
  v2 = *(int64x2_t *)(a1 + 8);
  v3 = vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)a1));
  v4 = vshrq_n_s64(v3, 2uLL);
  v5 = 0xAAAAAAAAAAAAAAABLL * v4.i64[0];
  if (0xAAAAAAAAAAAAAAABLL * v4.i64[1] <= v5)
    return;
  v7 = *(_DWORD **)(a1 + 8);
  if ((_DWORD *)v2.i64[0] == v1)
  {
    *(_QWORD *)a1 = 12 * v5;
    *(_QWORD *)(a1 + 8) = 12 * v5;
    *(_QWORD *)(a1 + 16) = 12 * v5;
    if (!v1)
      return;
    goto LABEL_9;
  }
  if (v5 >= 0x1555555555555556)
    sub_239418A80();
  v8 = (char *)operator new(v3.u64[0]) + 12 * v5;
  v9 = v8;
  do
  {
    v10 = *(_QWORD *)(v7 - 3);
    v7 -= 3;
    v11 = v7[2];
    *(_QWORD *)(v9 - 12) = v10;
    v9 -= 12;
    *((_DWORD *)v9 + 2) = v11;
  }
  while (v7 != v1);
  v1 = *(_DWORD **)a1;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v8;
  if (v1)
LABEL_9:
    operator delete(v1);
}

void sub_2396E112C(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  int v17;

  v1 = *(_BYTE **)(a1 + 8);
  v2 = *(_BYTE **)a1;
  v3 = (uint64_t)&v1[-*(_QWORD *)a1];
  v4 = v3 >> 2;
  if (v3 >> 2 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2))
  {
    v6 = v1 - v2;
    if (v1 == v2)
    {
      v8 = 4 * v4;
      v9 = 4 * v4;
    }
    else
    {
      if (v3 < 0)
        sub_239418A80();
      v7 = (char *)operator new((size_t)&v1[-*(_QWORD *)a1]);
      v8 = (uint64_t)&v7[4 * v4];
      if ((unint64_t)(v6 - 4) >= 0x2C)
      {
        v9 = (uint64_t)&v7[4 * v4];
        if ((unint64_t)(&v1[-v3] - v7) >= 0x20)
        {
          v10 = ((unint64_t)(v6 - 4) >> 2) + 1;
          v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
          v12 = &v1[-v11];
          v9 = v8 - v11;
          v13 = &v7[4 * v4 - 16];
          v14 = (__int128 *)(v1 - 16);
          v15 = v10 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v16 = *v14;
            *((_OWORD *)v13 - 1) = *(v14 - 1);
            *(_OWORD *)v13 = v16;
            v13 -= 32;
            v14 -= 2;
            v15 -= 8;
          }
          while (v15);
          v1 = v12;
          if (v10 == (v10 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_12;
        }
      }
      else
      {
        v9 = (uint64_t)&v7[4 * v4];
      }
      do
      {
        v17 = *((_DWORD *)v1 - 1);
        v1 -= 4;
        *(_DWORD *)(v9 - 4) = v17;
        v9 -= 4;
      }
      while (v1 != v2);
    }
LABEL_12:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    if (v2)
      operator delete(v2);
  }
}

void sub_2396E1254(uint64_t a1)
{
  _BYTE *v1;
  int64x2_t v2;
  int64x2_t v3;
  _BYTE *v5;
  char *v6;
  char *v7;
  __int16 v8;
  char v9;

  v1 = *(_BYTE **)a1;
  v2 = *(int64x2_t *)(a1 + 8);
  v3 = vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)a1));
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] <= 0xAAAAAAAAAAAAAAABLL * v3.i64[0])
    return;
  v5 = *(_BYTE **)(a1 + 8);
  if ((_BYTE *)v2.i64[0] == v1)
  {
    *(_QWORD *)a1 = v3.i64[0];
    *(_QWORD *)(a1 + 8) = v3.i64[0];
    *(_QWORD *)(a1 + 16) = v3.i64[0];
    if (!v1)
      return;
    goto LABEL_9;
  }
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[0] >= 0x5555555555555556)
    sub_239418A80();
  v6 = (char *)operator new(v3.u64[0]) + v3.i64[0];
  v7 = v6;
  do
  {
    v8 = *(_WORD *)(v5 - 3);
    v5 -= 3;
    v9 = v5[2];
    *(_WORD *)(v7 - 3) = v8;
    v7 -= 3;
    v7[2] = v9;
  }
  while (v5 != v1);
  v1 = *(_BYTE **)a1;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v6;
  if (v1)
LABEL_9:
    operator delete(v1);
}

void sub_2396E134C(uint64_t a1)
{
  char *v1;
  int64x2_t v2;
  int64x2_t v3;
  int64x2_t v4;
  unint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;

  v1 = *(char **)a1;
  v2 = *(int64x2_t *)(a1 + 8);
  v3 = vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)a1));
  v4 = vshrq_n_s64(v3, 3uLL);
  v5 = 0xAAAAAAAAAAAAAAABLL * v4.i64[0];
  if (0xAAAAAAAAAAAAAAABLL * v4.i64[1] <= v5)
    return;
  v7 = *(char **)(a1 + 8);
  if ((char *)v2.i64[0] == v1)
  {
    *(_QWORD *)a1 = 24 * v5;
    *(_QWORD *)(a1 + 8) = 24 * v5;
    *(_QWORD *)(a1 + 16) = 24 * v5;
    if (!v1)
      return;
    goto LABEL_15;
  }
  if (v5 >= 0xAAAAAAAAAAAAAABLL)
    sub_239418A80();
  v8 = (char *)operator new(v3.u64[0]) + 24 * v5;
  v9 = v8;
  do
  {
    v10 = *(_OWORD *)(v7 - 24);
    v7 -= 24;
    *(_OWORD *)(v9 - 24) = v10;
    v9 -= 24;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
  }
  while (v7 != v1);
  v11 = *(_QWORD *)a1;
  v1 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v8;
  if (v1 != (char *)v11)
  {
    v12 = v1;
    do
    {
      v14 = (void *)*((_QWORD *)v12 - 3);
      v12 -= 24;
      v13 = v14;
      if (v14)
      {
        *((_QWORD *)v1 - 2) = v13;
        operator delete(v13);
      }
      v1 = v12;
    }
    while (v12 != (char *)v11);
    v1 = (char *)v11;
  }
  if (v1)
LABEL_15:
    operator delete(v1);
}

uint64_t sub_2396E1488(uint64_t a1, unint64_t a2, float a3)
{
  char *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  char *v59;
  int64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  float *v68;
  unint64_t v69;
  unint64_t v70;
  size_t v71;
  size_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  void *v77;
  float v78;
  float v79;
  float *v80;
  float *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  float *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float *v91;
  _OWORD *v92;
  float *v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  unint64_t v100;
  unint64_t v101;
  float v102;
  char *v103;
  void *v104;
  unint64_t v105;
  float v106;
  char *v107;
  char *v108;
  char *v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  __int16 v114;
  uint64_t v115;
  char *v116;
  _DWORD *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  _BYTE *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  int64_t v128;
  int64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  _DWORD *v134;
  void *v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  int v141;
  void *v142;
  uint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  _DWORD *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  __int16 v151;
  char *v152;
  char *v153;
  __int16 v154;
  char v155;
  void *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  int v161;
  void *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  _OWORD *v167;
  char *v168;
  uint64_t v169;
  __int128 v170;
  int v171;
  uint64_t v172;
  const void **v173;
  _QWORD *v174;
  const void *v175;
  _BYTE *v176;
  int64_t v177;
  char *v178;
  __int128 v179;
  char *v180;
  char *v181;
  __int128 v182;
  char *v183;
  __int128 v184;
  char *v185;
  __int128 v186;
  _BYTE *v187;
  __int128 v188;
  void *v189;
  char *v190;
  _QWORD *v191;
  void *v192;
  char *v193;
  void *v194;
  void *v195;
  void **v196;
  void *v197;
  unsigned int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  unint64_t v204;
  float *v206;
  float *v207;
  float *v208;
  void *__p[2];
  void *v210;
  void *v211[2];
  _BYTE *v212;
  void *v213[2];
  char *v214;
  void *v215[2];
  char *v216;
  void *v217[2];
  char *v218;
  void *v219[8];
  void *v220;
  void *v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  void *v227;
  char *v228;
  int v229;
  int v230;
  char *v231;
  char *v232;
  unint64_t v233;
  char *v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  char v240;
  __int128 v241;
  __int128 v242;

  v5 = *(char **)a1;
  v6 = *(char **)(a1 + 8);
  v231 = 0;
  v232 = 0;
  v233 = 0;
  v7 = v6 - v5;
  if (v6 == v5)
  {
    v10 = 0;
    v11 = 0;
    v204 = a2;
  }
  else
  {
    v8 = v7 >> 2;
    if ((unint64_t)(v7 >> 2) >> 62)
      sub_2394189F8();
    v9 = (char *)operator new(v7);
    v10 = v9;
    v11 = (unint64_t)&v9[4 * v8];
    v232 = v9;
    v204 = a2;
    if (v6 != v5)
    {
      v12 = v6;
      v13 = v232;
      v14 = v9;
      while (1)
      {
        while ((unint64_t)v10 < v11)
        {
          *(_DWORD *)v10 = *(_DWORD *)v5;
          v13 = v10 + 4;
          if ((unint64_t)(v10 + 4) < v11)
            goto LABEL_8;
LABEL_27:
          v23 = (v13 - v14) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            goto LABEL_282;
          if ((uint64_t)(v11 - (_QWORD)v14) >> 1 > v24)
            v24 = (uint64_t)(v11 - (_QWORD)v14) >> 1;
          if (v11 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
          {
            if (v25 >> 62)
              goto LABEL_283;
            v26 = operator new(4 * v25);
            v27 = &v26[4 * v23];
            *(_DWORD *)v27 = *((_DWORD *)v5 + 1);
            v28 = (unint64_t)(v27 + 4);
            if (v13 == v14)
              goto LABEL_41;
          }
          else
          {
            v26 = 0;
            v27 = (char *)(4 * v23);
            *(_DWORD *)(4 * v23) = *((_DWORD *)v5 + 1);
            v28 = 4 * v23 + 4;
            if (v13 == v14)
              goto LABEL_41;
          }
          v29 = v13 - 4 - v14;
          if (v29 < 0xBC)
          {
            v30 = v13;
            goto LABEL_40;
          }
          if (&v26[v13 - v14 - 4 - (v29 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v13 - v14 - 4])
          {
            v30 = v13;
            do
            {
LABEL_40:
              v31 = *((_DWORD *)v30 - 1);
              v30 -= 4;
              *((_DWORD *)v27 - 1) = v31;
              v27 -= 4;
            }
            while (v30 != v14);
            goto LABEL_41;
          }
          if (&v13[-(v29 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v13 - 4)
          {
            v30 = v13;
            goto LABEL_40;
          }
          if ((unint64_t)(v14 - v26) < 0x20)
          {
            v30 = v13;
            goto LABEL_40;
          }
          v47 = (v29 >> 2) + 1;
          v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
          v30 = &v13[-v48];
          v27 -= v48;
          v49 = &v26[4 * v23 - 16];
          v50 = v13 - 16;
          v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 8;
          }
          while (v51);
          if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_40;
LABEL_41:
          v11 = (unint64_t)&v26[4 * v25];
          if (v14)
            operator delete(v14);
          v14 = v27;
          v13 = (char *)v28;
          if (v28 < v11)
            goto LABEL_5;
LABEL_44:
          v32 = (v13 - v14) >> 2;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
          {
LABEL_282:
            v232 = v13;
            v233 = v11;
            v231 = v14;
            sub_2394189F8();
          }
          if ((uint64_t)(v11 - (_QWORD)v14) >> 1 > v33)
            v33 = (uint64_t)(v11 - (_QWORD)v14) >> 1;
          if (v11 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
          {
            if (v34 >> 62)
            {
LABEL_283:
              v232 = v13;
              v233 = v11;
              v231 = v14;
              sub_239418A80();
            }
            v35 = operator new(4 * v34);
            v36 = &v35[4 * v32];
            *(_DWORD *)v36 = *((_DWORD *)v5 + 2);
            v37 = (uint64_t)(v36 + 4);
            if (v13 == v14)
              goto LABEL_58;
          }
          else
          {
            v35 = 0;
            v36 = (char *)(4 * v32);
            *(_DWORD *)(4 * v32) = *((_DWORD *)v5 + 2);
            v37 = 4 * v32 + 4;
            if (v13 == v14)
              goto LABEL_58;
          }
          v38 = v13 - 4 - v14;
          if (v38 >= 0xBC)
          {
            if (&v35[v13 - v14 - 4 - (v38 & 0xFFFFFFFFFFFFFFFCLL)] > &v35[v13 - v14 - 4])
            {
              v39 = v13;
            }
            else if (&v13[-(v38 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v13 - 4)
            {
              v39 = v13;
            }
            else if ((unint64_t)(v14 - v35) >= 0x20)
            {
              v53 = (v38 >> 2) + 1;
              v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
              v39 = &v13[-v54];
              v36 -= v54;
              v55 = &v35[4 * v32 - 16];
              v56 = v13 - 16;
              v57 = v53 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v58 = *(_OWORD *)v56;
                *(v55 - 1) = *((_OWORD *)v56 - 1);
                *v55 = v58;
                v55 -= 2;
                v56 -= 32;
                v57 -= 8;
              }
              while (v57);
              if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_58;
            }
            else
            {
              v39 = v13;
            }
          }
          else
          {
            v39 = v13;
          }
          do
          {
            v40 = *((_DWORD *)v39 - 1);
            v39 -= 4;
            *((_DWORD *)v36 - 1) = v40;
            v36 -= 4;
          }
          while (v39 != v14);
LABEL_58:
          v11 = (unint64_t)&v35[4 * v34];
          if (v14)
            operator delete(v14);
          v14 = v36;
          v13 = (char *)v37;
          v5 += 12;
          v10 = (char *)v37;
          if (v5 == v12)
          {
LABEL_92:
            v232 = v13;
            v10 = v13;
            v6 = *(char **)a1;
            v59 = *(char **)(a1 + 8);
            goto LABEL_95;
          }
        }
        v15 = (v10 - v14) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          goto LABEL_282;
        if ((uint64_t)(v11 - (_QWORD)v14) >> 1 > v16)
          v16 = (uint64_t)(v11 - (_QWORD)v14) >> 1;
        if (v11 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
        {
          if (v17 >> 62)
            goto LABEL_283;
          v18 = operator new(4 * v17);
          v19 = &v18[4 * v15];
          *(_DWORD *)v19 = *(_DWORD *)v5;
          v13 = v19 + 4;
          if (v10 == v14)
            goto LABEL_24;
        }
        else
        {
          v18 = 0;
          v19 = (char *)(4 * v15);
          *(_DWORD *)(4 * v15) = *(_DWORD *)v5;
          v13 = (char *)(4 * v15 + 4);
          if (v10 == v14)
            goto LABEL_24;
        }
        v20 = v10 - 4 - v14;
        if (v20 < 0xBC)
        {
          v21 = v10;
          goto LABEL_23;
        }
        if (&v18[v10 - v14 - 4 - (v20 & 0xFFFFFFFFFFFFFFFCLL)] > &v18[v10 - v14 - 4])
        {
          v21 = v10;
          do
          {
LABEL_23:
            v22 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v19 - 1) = v22;
            v19 -= 4;
          }
          while (v21 != v14);
          goto LABEL_24;
        }
        if (&v10[-(v20 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v10 - 4)
        {
          v21 = v10;
          goto LABEL_23;
        }
        if ((unint64_t)(v14 - v18) < 0x20)
        {
          v21 = v10;
          goto LABEL_23;
        }
        v41 = (v20 >> 2) + 1;
        v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
        v21 = &v10[-v42];
        v19 -= v42;
        v43 = &v18[4 * v15 - 16];
        v44 = v10 - 16;
        v45 = v41 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v46 = *(_OWORD *)v44;
          *(v43 - 1) = *((_OWORD *)v44 - 1);
          *v43 = v46;
          v43 -= 2;
          v44 -= 32;
          v45 -= 8;
        }
        while (v45);
        if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_23;
LABEL_24:
        v11 = (unint64_t)&v18[4 * v17];
        if (v14)
          operator delete(v14);
        v14 = v19;
        if ((unint64_t)v13 >= v11)
          goto LABEL_27;
LABEL_8:
        *(_DWORD *)v13 = *((_DWORD *)v5 + 1);
        v13 += 4;
        if ((unint64_t)v13 >= v11)
          goto LABEL_44;
LABEL_5:
        *(_DWORD *)v13 = *((_DWORD *)v5 + 2);
        v13 += 4;
        v5 += 12;
        v10 = v13;
        if (v5 == v12)
          goto LABEL_92;
      }
    }
  }
  v59 = v6;
  v14 = v10;
LABEL_95:
  v233 = v11;
  v231 = v14;
  v226 = 0;
  v227 = 0;
  v228 = 0;
  v60 = v10 - v14;
  if (v60)
  {
    if (v60 < 0)
      sub_2394189F8();
    v61 = (char *)operator new(v60);
    v62 = &v61[4 * (v60 >> 2)];
    v226 = v61;
    v228 = v62;
    memcpy(v61, v14, v60);
    v227 = v62;
  }
  v229 = -1431655765 * ((unint64_t)(v59 - v6) >> 2);
  v230 = 3;
  *(_QWORD *)&v241 = 10;
  sub_2396D0294((uint64_t)v219, 3, (uint64_t)&v226, (uint64_t *)&v241);
  sub_2396D0360((uint64_t)v219);
  v217[0] = 0;
  v217[1] = 0;
  v218 = 0;
  v215[0] = 0;
  v215[1] = 0;
  v216 = 0;
  v213[0] = 0;
  v213[1] = 0;
  v214 = 0;
  v211[0] = 0;
  v211[1] = 0;
  v212 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v210 = 0;
  v202 = *(unsigned __int8 *)(a1 + 80);
  v203 = *(unsigned __int8 *)(a1 + 48);
  v200 = *(unsigned __int8 *)(a1 + 112);
  v201 = *(unsigned __int8 *)(a1 + 144);
  v63 = *(char **)a1;
  v64 = *(char **)(a1 + 8);
  v66 = v64 != *(char **)a1;
  if (v64 == *(char **)a1)
  {
    v68 = 0;
    goto LABEL_253;
  }
  v65 = (uint64_t)&v64[-*(_QWORD *)a1];
  v67 = 0xAAAAAAAAAAAAAAABLL * (v65 >> 2);
  if (v67 >> 62)
    sub_2394189F8();
  v68 = (float *)operator new(0xAAAAAAAAAAAAAAACLL * (v65 >> 2));
  v206 = v68;
  v207 = v68;
  v208 = &v68[v67];
  if (v64 == v63)
  {
LABEL_253:
    if (!v68)
      goto LABEL_255;
    goto LABEL_254;
  }
  v199 = v66;
  v69 = 0;
  v70 = v204;
  v71 = 8 * v204;
  v72 = 4 * v204;
  v73 = v204 - 1;
  do
  {
    v74 = &v63[12 * v69];
    v75 = *(_QWORD *)v74;
    v238 = *((_DWORD *)v74 + 2);
    v236 = 0;
    v237 = v75;
    v234 = 0;
    v235 = 0;
    if (v70)
    {
      if (v70 >> 61)
        sub_2394189F8();
      v76 = (char *)operator new(v71);
      v234 = v76;
      v236 = &v76[8 * v70];
      bzero(v76, v71);
      v77 = operator new(v72);
      bzero(v77, v72);
      *(_QWORD *)&v241 = v76;
      *((_QWORD *)&v241 + 1) = v77;
      v242 = v70;
      *((_DWORD *)v77 + v73) = 2139095039;
    }
    else
    {
      v77 = 0;
      v76 = 0;
      v242 = 0u;
      v241 = 0u;
    }
    v239 = 32;
    v240 = 1;
    sub_2396D8EC8((uint64_t)v219, (uint64_t *)&v241, (float32x4_t *)&v237, (uint64_t)&v239);
    v78 = *((float *)v77 + v73);
    operator delete(v77);
    if (v76)
      operator delete(v76);
    v79 = (float)v204 / sqrtf(v78);
    v80 = v207;
    if (v207 < v208)
    {
      *v207 = v79;
      v68 = v207 + 1;
      goto LABEL_105;
    }
    v81 = v206;
    v82 = v207 - v206;
    v83 = v82 + 1;
    if ((unint64_t)(v82 + 1) >> 62)
      sub_2394189F8();
    v84 = (char *)v208 - (char *)v206;
    if (((char *)v208 - (char *)v206) >> 1 > v83)
      v83 = v84 >> 1;
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
      v85 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v85 = v83;
    if (v85)
    {
      if (v85 >> 62)
        sub_239418A80();
      v86 = operator new(4 * v85);
      v87 = (float *)&v86[4 * v82];
      *v87 = v79;
      v68 = v87 + 1;
      if (v207 == v206)
      {
LABEL_125:
        v70 = v204;
        goto LABEL_131;
      }
    }
    else
    {
      v86 = 0;
      v87 = (float *)(4 * v82);
      *(float *)(4 * v82) = v79;
      v68 = (float *)(4 * v82 + 4);
      if (v207 == v206)
        goto LABEL_125;
    }
    v88 = (char *)(v207 - 1) - (char *)v206;
    if (v88 < 0x2C)
    {
      v70 = v204;
      do
      {
LABEL_130:
        v96 = *((_DWORD *)v80-- - 1);
        *((_DWORD *)v87-- - 1) = v96;
      }
      while (v80 != v206);
      goto LABEL_131;
    }
    v70 = v204;
    if ((unint64_t)((char *)v206 - v86) < 0x20)
      goto LABEL_130;
    v89 = (v88 >> 2) + 1;
    v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
    v91 = &v207[v90 / 0xFFFFFFFFFFFFFFFCLL];
    v87 = (float *)((char *)v87 - v90);
    v92 = &v86[4 * v82 - 16];
    v93 = v207 - 4;
    v94 = v89 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v95 = *(_OWORD *)v93;
      *(v92 - 1) = *((_OWORD *)v93 - 1);
      *v92 = v95;
      v92 -= 2;
      v93 -= 8;
      v94 -= 8;
    }
    while (v94);
    v80 = v91;
    if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_130;
LABEL_131:
    v206 = v87;
    v208 = (float *)&v86[4 * v85];
    if (v81)
      operator delete(v81);
LABEL_105:
    v207 = v68;
    ++v69;
    v63 = *(char **)a1;
  }
  while (v69 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2));
  if (v206 != v68)
  {
    v241 = 0uLL;
    *(_QWORD *)&v242 = 0;
    v97 = (char *)v68 - (char *)v206;
    if ((char *)v68 - (char *)v206 < 0)
      sub_2394189F8();
    v98 = a1;
    v99 = operator new((char *)v68 - (char *)v206);
    v100 = v97 >> 2;
    memcpy(v99, v206, (char *)v68 - (char *)v206);
    v101 = (unint64_t)(v97 >> 2) >> 1;
    if (v100 >> 1 != v100)
      sub_2394F1C6C((float *)v99, (float *)v99 + v101, (float *)v99 + v100);
    v102 = *((float *)v99 + v101);
    operator delete(v99);
    v103 = *(char **)a1;
    v104 = *(void **)(a1 + 8);
    if (v104 != *(void **)a1)
    {
      v105 = 0;
      v106 = v102 * a3;
      while (1)
      {
        if (v206[v105] <= v106)
          goto LABEL_142;
        v109 = &v103[12 * v105];
        v110 = v217[1];
        if (v217[1] >= v218)
        {
          v117 = v217[0];
          v118 = 0xAAAAAAAAAAAAAAABLL * (((char *)v217[1] - (char *)v217[0]) >> 2);
          v119 = v118 + 1;
          if (v118 + 1 > 0x1555555555555555)
            goto LABEL_291;
          if (0x5555555555555556 * ((v218 - (char *)v217[0]) >> 2) > v119)
            v119 = 0x5555555555555556 * ((v218 - (char *)v217[0]) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v218 - (char *)v217[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v120 = 0x1555555555555555;
          else
            v120 = v119;
          if (v120)
          {
            if (v120 > 0x1555555555555555)
              goto LABEL_288;
            v121 = (char *)operator new(12 * v120);
          }
          else
          {
            v121 = 0;
          }
          v137 = *(_QWORD *)v109;
          v138 = &v121[12 * v118];
          *((_DWORD *)v138 + 2) = *((_DWORD *)v109 + 2);
          *(_QWORD *)v138 = v137;
          v139 = v138;
          if (v110 != v117)
          {
            do
            {
              v140 = *(_QWORD *)(v110 - 3);
              v110 -= 3;
              v141 = v110[2];
              *(_QWORD *)(v139 - 12) = v140;
              v139 -= 12;
              *((_DWORD *)v139 + 2) = v141;
            }
            while (v110 != v117);
            v110 = v217[0];
          }
          v98 = a1;
          v142 = v138 + 12;
          v217[0] = v139;
          v218 = &v121[12 * v120];
          if (v110)
            operator delete(v110);
          v217[1] = v142;
          if (!v203)
          {
LABEL_190:
            if (!v202)
              goto LABEL_149;
            goto LABEL_191;
          }
        }
        else
        {
          v111 = *(_QWORD *)v109;
          *((_DWORD *)v217[1] + 2) = *((_DWORD *)v109 + 2);
          *(_QWORD *)v110 = v111;
          v217[1] = v110 + 3;
          if (!v203)
            goto LABEL_190;
        }
        if (!*(_BYTE *)(v98 + 48))
          goto LABEL_286;
        v112 = *(_QWORD *)(v98 + 24) + 3 * v105;
        v113 = v215[1];
        if (v215[1] >= v216)
        {
          v122 = v215[0];
          v123 = 0xAAAAAAAAAAAAAAABLL * ((char *)v215[1] - (char *)v215[0]);
          v124 = v123 + 1;
          if (v123 + 1 >= 0x5555555555555556)
            sub_2394189F8();
          if (0x5555555555555556 * (v216 - (char *)v215[0]) > v124)
            v124 = 0x5555555555555556 * (v216 - (char *)v215[0]);
          if (0xAAAAAAAAAAAAAAABLL * (v216 - (char *)v215[0]) >= 0x2AAAAAAAAAAAAAAALL)
            v125 = 0x5555555555555555;
          else
            v125 = v124;
          if (v125)
          {
            if (v125 > 0x5555555555555555)
              goto LABEL_288;
            v126 = (char *)operator new(3 * v125);
          }
          else
          {
            v126 = 0;
          }
          v151 = *(_WORD *)v112;
          v152 = &v126[3 * v123];
          v152[2] = *(_BYTE *)(v112 + 2);
          *(_WORD *)v152 = v151;
          v153 = v152;
          if (v113 != v122)
          {
            do
            {
              v154 = *(_WORD *)(v113 - 3);
              v113 -= 3;
              v155 = v113[2];
              *(_WORD *)(v153 - 3) = v154;
              v153 -= 3;
              v153[2] = v155;
            }
            while (v113 != v122);
            v113 = v215[0];
          }
          v98 = a1;
          v156 = v152 + 3;
          v215[0] = v153;
          v216 = &v126[3 * v125];
          if (v113)
            operator delete(v113);
          v215[1] = v156;
          if (!v202)
          {
LABEL_149:
            if (!v201)
              goto LABEL_194;
            goto LABEL_150;
          }
        }
        else
        {
          v114 = *(_WORD *)v112;
          *((_BYTE *)v215[1] + 2) = *(_BYTE *)(v112 + 2);
          *(_WORD *)v113 = v114;
          v215[1] = v113 + 3;
          if (!v202)
            goto LABEL_149;
        }
LABEL_191:
        if (!*(_BYTE *)(v98 + 80))
          goto LABEL_286;
        v143 = *(_QWORD *)(v98 + 56) + 12 * v105;
        v144 = v213[1];
        if (v213[1] >= v214)
        {
          v146 = v213[0];
          v147 = 0xAAAAAAAAAAAAAAABLL * (((char *)v213[1] - (char *)v213[0]) >> 2);
          v148 = v147 + 1;
          if (v147 + 1 > 0x1555555555555555)
LABEL_291:
            sub_2394189F8();
          if (0x5555555555555556 * ((v214 - (char *)v213[0]) >> 2) > v148)
            v148 = 0x5555555555555556 * ((v214 - (char *)v213[0]) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v214 - (char *)v213[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v149 = 0x1555555555555555;
          else
            v149 = v148;
          if (v149)
          {
            if (v149 > 0x1555555555555555)
LABEL_288:
              sub_239418A80();
            v150 = (char *)operator new(12 * v149);
          }
          else
          {
            v150 = 0;
          }
          v157 = *(_QWORD *)v143;
          v158 = &v150[12 * v147];
          *((_DWORD *)v158 + 2) = *(_DWORD *)(v143 + 8);
          *(_QWORD *)v158 = v157;
          v159 = v158;
          if (v144 != v146)
          {
            do
            {
              v160 = *(_QWORD *)(v144 - 3);
              v144 -= 3;
              v161 = v144[2];
              *(_QWORD *)(v159 - 12) = v160;
              v159 -= 12;
              *((_DWORD *)v159 + 2) = v161;
            }
            while (v144 != v146);
            v144 = v213[0];
          }
          v98 = a1;
          v162 = v158 + 12;
          v213[0] = v159;
          v214 = &v150[12 * v149];
          if (v144)
            operator delete(v144);
          v213[1] = v162;
          if (!v201)
          {
LABEL_194:
            if (v200)
              goto LABEL_231;
            goto LABEL_142;
          }
        }
        else
        {
          v145 = *(_QWORD *)v143;
          *((_DWORD *)v213[1] + 2) = *(_DWORD *)(v143 + 8);
          *(_QWORD *)v144 = v145;
          v213[1] = v144 + 3;
          if (!v201)
            goto LABEL_194;
        }
LABEL_150:
        if (!*(_BYTE *)(v98 + 144))
          goto LABEL_286;
        v115 = *(_QWORD *)(v98 + 120);
        v116 = (char *)v211[1];
        if (v211[1] < v212)
        {
          *(_DWORD *)v211[1] = *(_DWORD *)(v115 + 4 * v105);
          v211[1] = v116 + 4;
          if (v200)
            goto LABEL_231;
          goto LABEL_142;
        }
        v127 = (char *)v211[0];
        v128 = (char *)v211[1] - (char *)v211[0];
        v129 = ((char *)v211[1] - (char *)v211[0]) >> 2;
        v130 = v129 + 1;
        if ((unint64_t)(v129 + 1) >> 62)
          sub_2394189F8();
        v131 = v212 - (char *)v211[0];
        if ((v212 - (char *)v211[0]) >> 1 > v130)
          v130 = v131 >> 1;
        if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL)
          v132 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v132 = v130;
        if (v132)
        {
          if (v132 >> 62)
            goto LABEL_288;
          v133 = operator new(4 * v132);
          v134 = &v133[4 * v129];
          *v134 = *(_DWORD *)(v115 + 4 * v105);
          v135 = v134 + 1;
          if (v116 == v127)
          {
LABEL_222:
            v98 = a1;
            goto LABEL_228;
          }
        }
        else
        {
          v133 = 0;
          v134 = (_DWORD *)(4 * v129);
          *(_DWORD *)(4 * v129) = *(_DWORD *)(v115 + 4 * v105);
          v135 = (void *)(4 * v129 + 4);
          if (v116 == v127)
            goto LABEL_222;
        }
        v136 = v116 - 4 - v127;
        if (v136 < 0x2C)
        {
          v98 = a1;
          do
          {
LABEL_227:
            v171 = *((_DWORD *)v116 - 1);
            v116 -= 4;
            *--v134 = v171;
          }
          while (v116 != v127);
          goto LABEL_228;
        }
        v163 = v116 - &v133[v128];
        v98 = a1;
        if (v163 < 0x20)
          goto LABEL_227;
        v164 = (v136 >> 2) + 1;
        v165 = 4 * (v164 & 0x7FFFFFFFFFFFFFF8);
        v166 = &v116[-v165];
        v134 = (_DWORD *)((char *)v134 - v165);
        v167 = &v133[4 * v129 - 16];
        v168 = v116 - 16;
        v169 = v164 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v170 = *(_OWORD *)v168;
          *(v167 - 1) = *((_OWORD *)v168 - 1);
          *v167 = v170;
          v167 -= 2;
          v168 -= 32;
          v169 -= 8;
        }
        while (v169);
        v116 = v166;
        if (v164 != (v164 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_227;
LABEL_228:
        v211[0] = v134;
        v212 = &v133[4 * v132];
        if (v127)
          operator delete(v127);
        v211[1] = v135;
        if (v200)
        {
LABEL_231:
          if (!*(_BYTE *)(v98 + 112))
LABEL_286:
            sub_2394875CC();
          v172 = *(_QWORD *)(v98 + 88);
          v173 = (const void **)(v172 + 24 * v105);
          v174 = __p[1];
          if (__p[1] >= v210)
          {
            v108 = sub_2395BB144((char **)__p, (uint64_t)v173);
            v98 = a1;
          }
          else
          {
            *(_QWORD *)__p[1] = 0;
            v174[1] = 0;
            v174[2] = 0;
            v175 = *v173;
            v176 = *(_BYTE **)(v172 + 24 * v105 + 8);
            v177 = v176 - (_BYTE *)*v173;
            if (v176 != *v173)
            {
              if (v177 < 0)
                sub_2394189F8();
              v178 = (char *)operator new(v176 - (_BYTE *)*v173);
              *v174 = v178;
              v174[1] = v178;
              v107 = &v178[4 * (v177 >> 2)];
              v174[2] = v107;
              memcpy(v178, v175, v177);
              v174[1] = v107;
            }
            v108 = (char *)(v174 + 3);
          }
          __p[1] = v108;
        }
LABEL_142:
        ++v105;
        v103 = *(char **)v98;
        v104 = *(void **)(v98 + 8);
        if (v105 >= 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v104 - *(_QWORD *)v98) >> 2))
        {
          v179 = *(_OWORD *)v217;
          v180 = v218;
          goto LABEL_240;
        }
      }
    }
    v180 = 0;
    v179 = 0uLL;
    v103 = *(char **)(a1 + 8);
LABEL_240:
    *(_OWORD *)v98 = v179;
    v217[0] = v103;
    v217[1] = v104;
    v181 = *(char **)(v98 + 16);
    *(_QWORD *)(v98 + 16) = v180;
    v218 = v181;
    if (v203)
    {
      if (*(_BYTE *)(v98 + 48))
      {
        v182 = *(_OWORD *)(v98 + 24);
        *(_OWORD *)(v98 + 24) = *(_OWORD *)v215;
        *(_OWORD *)v215 = v182;
        v183 = *(char **)(v98 + 40);
        *(_QWORD *)(v98 + 40) = v216;
        v216 = v183;
        goto LABEL_243;
      }
LABEL_293:
      sub_2394875CC();
    }
LABEL_243:
    if (v202)
    {
      if (!*(_BYTE *)(v98 + 80))
        goto LABEL_293;
      v184 = *(_OWORD *)(v98 + 56);
      *(_OWORD *)(v98 + 56) = *(_OWORD *)v213;
      *(_OWORD *)v213 = v184;
      v185 = *(char **)(v98 + 72);
      *(_QWORD *)(v98 + 72) = v214;
      v214 = v185;
    }
    if (v201)
    {
      if (!*(_BYTE *)(v98 + 144))
        goto LABEL_293;
      v186 = *(_OWORD *)(v98 + 120);
      *(_OWORD *)(v98 + 120) = *(_OWORD *)v211;
      *(_OWORD *)v211 = v186;
      v187 = *(_BYTE **)(v98 + 136);
      *(_QWORD *)(v98 + 136) = v212;
      v212 = v187;
    }
    if (v200)
    {
      if (!*(_BYTE *)(v98 + 112))
        goto LABEL_293;
      v188 = *(_OWORD *)(v98 + 88);
      *(_OWORD *)(v98 + 88) = *(_OWORD *)__p;
      *(_OWORD *)__p = v188;
      v189 = *(void **)(v98 + 104);
      *(_QWORD *)(v98 + 104) = v210;
      v210 = v189;
    }
    v68 = v206;
    v66 = v199;
    goto LABEL_253;
  }
  v66 = 0;
LABEL_254:
  operator delete(v68);
LABEL_255:
  v190 = (char *)__p[0];
  if (__p[0])
  {
    v191 = __p[1];
    v192 = __p[0];
    if (__p[1] != __p[0])
    {
      v193 = (char *)__p[1];
      do
      {
        v195 = (void *)*((_QWORD *)v193 - 3);
        v193 -= 24;
        v194 = v195;
        if (v195)
        {
          *(v191 - 2) = v194;
          operator delete(v194);
        }
        v191 = v193;
      }
      while (v193 != v190);
      v192 = __p[0];
    }
    __p[1] = v190;
    operator delete(v192);
  }
  if (v211[0])
    operator delete(v211[0]);
  if (v213[0])
    operator delete(v213[0]);
  if (v215[0])
    operator delete(v215[0]);
  if (v217[0])
    operator delete(v217[0]);
  v196 = (void **)v223;
  if (v223)
  {
    do
    {
      v197 = *v196;
      free(v196);
      v223 = v197;
      v196 = (void **)v197;
    }
    while (v197);
  }
  v222 = 0;
  v223 = 0;
  v224 = 0;
  v225 = 0;
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v219[0])
  {
    v219[1] = v219[0];
    operator delete(v219[0]);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  return v66;
}

void sub_2396E2610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  void *v57;
  uint64_t v58;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;

  operator delete(v57);
  if (a14)
  {
    operator delete(a14);
    sub_23942A16C(&a17);
    v60 = a21;
    if (!a21)
    {
LABEL_3:
      v61 = a25;
      if (!a25)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    sub_23942A16C(&a17);
    v60 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v60;
  operator delete(v60);
  v61 = a25;
  if (!a25)
  {
LABEL_4:
    v62 = a29;
    if (!a29)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  a26 = (uint64_t)v61;
  operator delete(v61);
  v62 = a29;
  if (!a29)
  {
LABEL_5:
    v63 = __p;
    if (!__p)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_12:
  a30 = (uint64_t)v62;
  operator delete(v62);
  v63 = __p;
  if (!__p)
  {
LABEL_7:
    sub_2396D0440((uint64_t)&a37);
    if (a56)
    {
      a57 = (uint64_t)a56;
      operator delete(a56);
    }
    v64 = *(void **)(v58 - 232);
    if (v64)
    {
      *(_QWORD *)(v58 - 224) = v64;
      operator delete(v64);
    }
    _Unwind_Resume(a1);
  }
LABEL_6:
  a34 = (uint64_t)v63;
  operator delete(v63);
  goto LABEL_7;
}

void sub_2396E2798(float32x4_t *a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q1>)
{
  float32x4_t v3;
  int32x4_t v4;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v10;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  int32x4_t v27;
  float32x4_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float v44;
  float v45;
  float v46;
  int v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float v62;
  uint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  float v75;
  float v76;
  float v77;
  int v78;
  float v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  __int32 v92;
  __int32 v93;
  float32x4_t v94;
  float v95;
  __int32 v96;
  int32x4_t v97;
  __int32 v98;
  float32x4_t v99;
  float v100;
  float32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int8x16_t v104;

  v6.i32[0] = a1[2].i32[0];
  v6.i32[1] = -4194304;
  v7 = a1[1];
  v6.i64[1] = 0xFFC00000FFC00000;
  v3.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(vmaxnmq_f32(*a1, v6), v7));
  if (fabsf(v3.f32[0]) < 1.1755e-38)
  {
    *(_QWORD *)a2 = 0;
LABEL_3:
    *(_DWORD *)(a2 + 8) = 0;
    return;
  }
  _Q17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 0);
  _Q7 = vdivq_f32(*a1, _Q17);
  a3.i32[0] = a1[2].i32[0];
  v10 = vdivq_f32(a3, v3);
  _Q16 = vdivq_f32(v7, _Q17);
  _S20 = _Q16.i32[3];
  _Q17.i32[0] = _Q7.i32[3];
  v4.i32[0] = _Q16.i32[2];
  *a1 = _Q7;
  a1[1] = _Q16;
  a1[2].i32[0] = v10.i32[0];
  __asm
  {
    FMLA            S0, S17, V7.S[3]
    FMLA            S0, S20, V16.S[3]
  }
  if (_S0 > 0.0)
  {
    v92 = _Q7.i32[1];
    v93 = _Q7.i32[2];
    v94 = v3;
    v19 = (float)((float)(_Q7.f32[0] + _Q16.f32[0]) + v10.f32[0]) / 3.0;
    v20 = sqrtf((float)((float)((float)((float)((float)(_Q16.f32[0] - v19) * (float)(_Q16.f32[0] - v19))+ (float)((float)(_Q7.f32[0] - v19) * (float)(_Q7.f32[0] - v19)))+ (float)((float)(v10.f32[0] - v19) * (float)(v10.f32[0] - v19)))+ (float)(_S0 * 2.0))/ 6.0);
    v21 = (float)((float)((float)((float)((float)(_Q7.f32[0] - v19)
                                        * (float)((float)((float)(_Q16.f32[0] - v19) * (float)(v10.f32[0] - v19))
                                                - (float)(_Q16.f32[3] * _Q16.f32[3])))
                                - (float)(_Q7.f32[3]
                                        * (float)((float)(_Q7.f32[3] * (float)(v10.f32[0] - v19))
                                                - (float)(_Q16.f32[3] * _Q16.f32[2]))))
                        + (float)(_Q16.f32[2]
                                * (float)((float)(_Q7.f32[3] * _Q16.f32[3])
                                        - (float)((float)(_Q16.f32[0] - v19) * _Q16.f32[2]))))
                / (float)(v20 * (float)(v20 * v20)))
        * 0.5;
    if (v21 < -1.0)
      v21 = -1.0;
    if (v21 <= 1.0)
      v22 = v21;
    else
      v22 = 1.0;
    v100 = _Q16.f32[0];
    v101 = v10;
    v95 = _Q7.f32[0];
    v96 = _Q16.i32[1];
    v98 = _Q16.i32[3];
    v99 = _Q17;
    v97 = v4;
    v23 = acosf(v22) / 3.0;
    v24 = cosf(v23);
    v25 = v24 + v24;
    v26 = cosf(v23 + 2.0944);
    v28.f32[0] = v100;
    v29 = v26 + v26;
    v30 = v19 + (float)(v20 * v29);
    v31 = v19 - (float)(v20 * (float)(v25 + v29));
    v32 = v19 + (float)(v20 * v25);
    v33 = (int32x4_t)v99;
    v34 = v97;
    v34.i32[1] = v98;
    if (v22 >= 0.0)
    {
      *(float *)v27.i32 = v95 - v32;
      v27.i32[1] = v99.i32[0];
      v27.i32[2] = v97.i32[0];
      *(float *)&v33.i32[1] = v100 - v32;
      v33.i32[2] = v98;
      *(float *)&v34.i32[2] = v101.f32[0] - v32;
      v66 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL), (int8x16_t)v27, 8uLL);
      v67 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
      v68 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL);
      v69 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v33, (int8x16_t)v33, 0xCuLL), (int8x16_t)v33, 8uLL);
      v70 = vmlsq_f32(vmulq_f32(v67, v66), v69, v68);
      v71 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL);
      v72 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL), (int8x16_t)v34, 8uLL);
      v73 = (int8x16_t)vmlsq_f32(vmulq_f32(v71, v66), v72, v68);
      v74 = (int8x16_t)vmlsq_f32(vmulq_f32(v71, v69), v72, v67);
      v68.i64[0] = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
      v75 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.f32, 1), *(float32x2_t *)v70.f32, 1), *(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32).f32[0];
      v69.i64[0] = vextq_s8(v73, v73, 8uLL).u64[0];
      v76 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.i8, 1), *(float32x2_t *)v73.i8, 1), *(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32).f32[0];
      v71.i64[0] = vextq_s8(v74, v74, 8uLL).u64[0];
      LODWORD(v77) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v74.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v74.i8, 1), *(float32x2_t *)v74.i8, 1), *(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32).u32[0];
      v78 = v76 > v75;
      if (v76 <= v75)
        v79 = v75;
      else
        v79 = v76;
      if (v77 > v79)
        v78 = 2;
      v80.f32[0] = v95;
      if (v78)
      {
        v75 = v76;
        v70 = (float32x4_t)v73;
        if (v78 != 1)
        {
          v75 = v77;
          v70 = (float32x4_t)v74;
        }
      }
      *(float *)v74.i32 = sqrtf(v75);
      v81 = vdivq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.i8, 0));
      v103.i32[2] = v81.i32[2];
      v103.i64[0] = v81.i64[0];
      if (v32 < v30 && v32 < v31)
      {
        v28.i32[1] = v96;
        v28.i64[1] = __PAIR64__(v98, v97.u32[0]);
        v90.i32[0] = v94.i32[0];
        v90.i32[1] = v94.i32[0];
        v90.i32[2] = v94.i32[0];
        v90.i32[3] = v94.i32[0];
        v80.i32[1] = v92;
        v80.i64[1] = __PAIR64__(v99.u32[0], v93);
        v91.i32[0] = v94.i32[0];
        v91.i32[1] = v94.i32[0];
        v91.i32[2] = v94.i32[0];
        v91.i32[3] = v94.i32[0];
        *a1 = vmulq_f32(v91, v80);
        a1[1] = vmulq_f32(v90, v28);
        a1[2].i32[0] = vmulq_f32(v94, v101).u32[0];
        *(_QWORD *)a2 = v103.i64[0];
        goto LABEL_60;
      }
      v81.f32[0] = v31;
      sub_2396E7568(a1, (float *)v103.i32, (uint64_t)&v102, v81, v73);
      v52 = v102;
      v83.i32[0] = a1[2].i32[0];
      v84.i32[0] = v94.i32[0];
      v84.i32[1] = v94.i32[0];
      v84.i32[2] = v94.i32[0];
      v84.i32[3] = v94.i32[0];
      v85 = vmulq_f32(v84, a1[1]);
      v84.i32[1] = v94.i32[0];
      v84.i32[2] = v94.i32[0];
      v84.i32[3] = v94.i32[0];
      *a1 = vmulq_f32(v84, *a1);
      a1[1] = v85;
      a1[2].i32[0] = vmulq_f32(v94, v83).u32[0];
      if (v31 < v30 && v31 < v32)
        goto LABEL_61;
      v87 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v52, (int8x16_t)v52, 0xCuLL), (int8x16_t)v52, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v103, v103), (int8x16_t)v103, 0xCuLL)), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v52, v52), (int8x16_t)v52, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v103, (int8x16_t)v103, 0xCuLL), (int8x16_t)v103, 8uLL)));
      v104.i32[2] = v87.i32[2];
      v104.i64[0] = v87.i64[0];
      *(_QWORD *)a2 = v87.i64[0];
    }
    else
    {
      *(float *)v27.i32 = v95 - v30;
      v27.i32[1] = v99.i32[0];
      v27.i32[2] = v97.i32[0];
      *(float *)&v33.i32[1] = v100 - v30;
      v33.i32[2] = v98;
      *(float *)&v34.i32[2] = v101.f32[0] - v30;
      v35 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL), (int8x16_t)v27, 8uLL);
      v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
      v37 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL);
      v38 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v33, (int8x16_t)v33, 0xCuLL), (int8x16_t)v33, 8uLL);
      v39 = vmlsq_f32(vmulq_f32(v36, v35), v38, v37);
      v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL);
      v41 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL), (int8x16_t)v34, 8uLL);
      v42 = (int8x16_t)vmlsq_f32(vmulq_f32(v40, v35), v41, v37);
      v43 = (int8x16_t)vmlsq_f32(vmulq_f32(v40, v38), v41, v36);
      v37.i64[0] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
      v44 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 1), *(float32x2_t *)v39.f32, 1), *(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32).f32[0];
      v38.i64[0] = vextq_s8(v42, v42, 8uLL).u64[0];
      v45 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), *(float32x2_t *)v42.i8, 1), *(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32).f32[0];
      v40.i64[0] = vextq_s8(v43, v43, 8uLL).u64[0];
      LODWORD(v46) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1), *(float32x2_t *)v43.i8, 1), *(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32).u32[0];
      v47 = v45 > v44;
      if (v45 <= v44)
        v48 = v44;
      else
        v48 = v45;
      if (v46 > v48)
        v47 = 2;
      v49.f32[0] = v95;
      if (v47)
      {
        v44 = v45;
        v39 = (float32x4_t)v42;
        if (v47 != 1)
        {
          v44 = v46;
          v39 = (float32x4_t)v43;
        }
      }
      *(float *)v43.i32 = sqrtf(v44);
      v50 = vdivq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.i8, 0));
      v104.i32[2] = v50.i32[2];
      v104.i64[0] = v50.i64[0];
      if (v30 >= v31 || v30 >= v32)
      {
        v50.f32[0] = v31;
        sub_2396E7568(a1, (float *)v104.i32, (uint64_t)&v102, v50, v42);
        v52 = v102;
        v53.i32[0] = a1[2].i32[0];
        v54.i32[0] = v94.i32[0];
        v54.i32[1] = v94.i32[0];
        v54.i32[2] = v94.i32[0];
        v54.i32[3] = v94.i32[0];
        v55 = vmulq_f32(v54, a1[1]);
        v54.i32[1] = v94.i32[0];
        v54.i32[2] = v94.i32[0];
        v54.i32[3] = v94.i32[0];
        *a1 = vmulq_f32(v54, *a1);
        a1[1] = v55;
        a1[2].i32[0] = vmulq_f32(v94, v53).u32[0];
        if (v31 >= v30 || v31 >= v32)
        {
          v57 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v104, v104, 0xCuLL), v104, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v52, v52), (int8x16_t)v52, 0xCuLL)), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), v104, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v52, (int8x16_t)v52, 0xCuLL), (int8x16_t)v52, 8uLL)));
          v103.i32[2] = v57.i32[2];
          v103.i64[0] = v57.i64[0];
          *(_QWORD *)a2 = v57.i64[0];
LABEL_60:
          *(_DWORD *)(a2 + 8) = v103.i32[2];
          return;
        }
LABEL_61:
        *(_DWORD *)(a2 + 8) = v52.i32[2];
        *(_QWORD *)a2 = v52.i64[0];
        return;
      }
      v28.i32[1] = v96;
      v28.i64[1] = __PAIR64__(v98, v97.u32[0]);
      v88.i32[0] = v94.i32[0];
      v88.i32[1] = v94.i32[0];
      v88.i32[2] = v94.i32[0];
      v88.i32[3] = v94.i32[0];
      v49.i32[1] = v92;
      v49.i64[1] = __PAIR64__(v99.u32[0], v93);
      v89.i32[0] = v94.i32[0];
      v89.i32[1] = v94.i32[0];
      v89.i32[2] = v94.i32[0];
      v89.i32[3] = v94.i32[0];
      *a1 = vmulq_f32(v89, v49);
      a1[1] = vmulq_f32(v88, v28);
      a1[2].i32[0] = vmulq_f32(v94, v101).u32[0];
      *(_QWORD *)a2 = v104.i64[0];
    }
    *(_DWORD *)(a2 + 8) = v104.i32[2];
    return;
  }
  v58.i32[0] = v3.i32[0];
  v58.i32[1] = v3.i32[0];
  v58.i32[2] = v3.i32[0];
  v58.i32[3] = v3.i32[0];
  v59.i32[0] = v3.i32[0];
  v59.i32[1] = v3.i32[0];
  v60 = vmulq_f32(v58, _Q16);
  v59.i32[2] = v3.i32[0];
  v59.i32[3] = v3.i32[0];
  v61 = vmulq_f32(v59, _Q7);
  LODWORD(v62) = vmulq_f32(v3, v10).u32[0];
  *a1 = v61;
  a1[1] = v60;
  a1[2].f32[0] = v62;
  if (v60.f32[0] > v61.f32[0] && v61.f32[0] < v62)
  {
    *(_QWORD *)a2 = 1065353216;
    goto LABEL_3;
  }
  *(_DWORD *)a2 = 0;
  if (v60.f32[0] < v61.f32[0] && v60.f32[0] < v62)
    v65 = 1065353216;
  else
    v65 = 0x3F80000000000000;
  *(_QWORD *)(a2 + 4) = v65;
}

uint64_t sub_2396E2E90(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 80))
    return 1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(a2[1] - *a2) >> 2) != 0xAAAAAAAAAAAAAAABLL
                                                             * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2))
    return 0;
  v5 = a3;
  if (a3 <= 0 && (v5 = std::thread::hardware_concurrency(), *(_BYTE *)(a1 + 80)))
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 64);
  }
  else
  {
    v6 = 0;
    v7 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 1;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v16 = 0;
  v17 = 1065353216;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2);
  if (v9 <= v10)
  {
    if (v9 < v10)
      *(_QWORD *)(a1 + 64) = v6 + 12 * v9;
  }
  else
  {
    sub_2396E7764((void **)(a1 + 56), v9 - v10, &v16);
  }
  sub_2397A2A50((uint64_t)&v16, v5, 0);
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v14[0] = &off_250AE3548;
  v14[1] = a2;
  v14[2] = a1;
  v15 = v14;
  sub_2397A376C((unint64_t *)&v16, v11, v14, 0);
  v12 = v15;
  if (v15 == v14)
  {
    v13 = 4;
    v12 = v14;
    goto LABEL_16;
  }
  if (v15)
  {
    v13 = 5;
LABEL_16:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  sub_2397A2E14(&v16);
  return 1;
}

void sub_2396E3054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v2;
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, va_list);
  v4 = v10;
  if (v10 == v2)
  {
    v5 = 4;
    va_copy(v4, va);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  sub_2397A2E14(va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2396E3098(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, float a7)
{
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  float v31;
  void *__p;
  char *v33;
  char *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  unint64_t v39[45];

  v39[44] = *MEMORY[0x24BDAC8D0];
  if (a6 <= 0)
    a6 = std::thread::hardware_concurrency();
  sub_2397A2A50((uint64_t)v39, a6, 0);
  v14 = *a1;
  v13 = a1[1];
  v33 = 0;
  v34 = 0;
  __p = 0;
  v15 = v13 - v14;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 2);
  if (v13 != v14)
  {
    if (v16 >= 0x1555555555555556)
      sub_2394189F8();
    __p = operator new(v15);
    v33 = (char *)__p + v15;
    v34 = (char *)__p + 12 * v16;
  }
  v17 = operator new(0x30uLL);
  *v17 = &off_250AE3590;
  v17[1] = a1;
  v17[2] = a4;
  v17[3] = &__p;
  v17[4] = a2;
  v17[5] = a3;
  v38 = v17;
  sub_2397A376C(v39, v16, v37, 0);
  v18 = v38;
  if (v38 == v37)
  {
    v19 = 4;
    v18 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_11;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_11:
  if (!a5)
    goto LABEL_24;
  if (*((_BYTE *)a1 + 80))
  {
    v20 = a1[7];
    v21 = a1[8];
  }
  else
  {
    v20 = 0;
    v21 = 0;
    a1[7] = 0;
    a1[8] = 0;
    a1[9] = 0;
    *((_BYTE *)a1 + 80) = 1;
  }
  v23 = *a1;
  v22 = a1[1];
  v24 = 0xAAAAAAAAAAAAAAABLL * ((v22 - *a1) >> 2);
  v25 = 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 2);
  if (v24 <= v25)
  {
    if (v24 < v25)
      a1[8] = v20 + 4 * ((v22 - *a1) >> 2);
  }
  else
  {
    sub_2394E6878((char **)a1 + 7, v24 - v25);
    v23 = *a1;
    v22 = a1[1];
  }
  v26 = cos(a7 * 3.14159265 / 180.0);
  v31 = v26;
  v36 = 0;
  v27 = operator new(0x38uLL);
  *v27 = &off_250AE35D8;
  v27[1] = a1;
  v27[2] = a4;
  v27[3] = &v31;
  v27[4] = &__p;
  v27[5] = a2;
  v27[6] = a3;
  v36 = v27;
  sub_2397A376C(v39, 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 2), v35, 0);
  v28 = v36;
  if (v36 == v35)
  {
    v29 = 4;
    v28 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_24;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_24:
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
  sub_2397A2E14(v39);
  return 1;
}

void sub_2396E334C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a17;
  if (a17 == v22)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  if (__p)
    operator delete(__p);
  sub_2397A2E14(&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_2396E33CC(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5, int a6, float a7, float a8)
{
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  int64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char *v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char *v42;
  unint64_t v43;
  char *v44;
  int v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  char *v52;
  unint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  _QWORD *v74;
  _DWORD *v75;
  int64_t v76;
  unint64_t v77;
  unint64_t v78;
  _DWORD *v79;
  unint64_t v80;
  int32x4_t v81;
  int32x4_t *v82;
  int32x4_t v83;
  int32x4_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _OWORD *v92;
  char *v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  float v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  void *v116;
  char *v117;
  void *v118;
  void *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v123;
  _QWORD *v125;
  float v126;
  void *__p;
  char *v128;
  BOOL v129;
  void *v130;
  void *v131;
  char *v132;
  float v133;
  uint64_t v134;
  char v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  char **v148;
  uint64_t v149;
  char **v150;
  char *v151;
  char *v152;
  char *v153;
  int v154;
  int v155;
  char *v156;
  char *v157;
  char *v158;
  unint64_t v159;
  _QWORD v160[3];
  _QWORD *v161;
  _QWORD v162[3];
  _QWORD *v163;
  unint64_t v164[46];

  v164[44] = *MEMORY[0x24BDAC8D0];
  v159 = a4;
  v14 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  if (v15 != v14)
  {
    if (v15 <= v14)
    {
      if (v15 < v14)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 12 * ((uint64_t)(a1[1] - *a1) >> 2);
    }
    else
    {
      sub_2396E8478((void **)a2, v15 - v14);
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
    }
  }
  v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  if (v15 != v16)
  {
    if (v15 <= v16)
    {
      if (v15 < v16)
        *(_QWORD *)(a3 + 8) = *(_QWORD *)a3 + 12 * v15;
    }
    else
    {
      sub_2394E6878((char **)a3, v15 - v16);
    }
  }
  if (a6 <= 0)
    a6 = std::thread::hardware_concurrency();
  sub_2397A2A50((uint64_t)v164, a6, 0);
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v18 = (_DWORD *)*a1;
  v17 = (_DWORD *)a1[1];
  v125 = a1;
  v19 = (int64_t)v17 - *a1;
  if (v17 == (_DWORD *)*a1)
    goto LABEL_104;
  v20 = v19 >> 2;
  if ((unint64_t)(v19 >> 2) >> 62)
    sub_2394189F8();
  v21 = (char *)operator new(v19);
  v156 = v21;
  v157 = v21;
  v158 = &v21[4 * v20];
  if (v17 == v18)
  {
LABEL_104:
    v75 = v17;
    v74 = a1;
    v151 = 0;
    v152 = 0;
    v153 = 0;
    goto LABEL_107;
  }
  v123 = a3;
  do
  {
    v22 = v158;
    if (v21 < v158)
    {
      *(_DWORD *)v21 = *v18;
      v23 = v21 + 4;
      goto LABEL_37;
    }
    v24 = v156;
    v25 = (v21 - v156) >> 2;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 62)
      goto LABEL_114;
    v27 = v158 - v156;
    if ((v158 - v156) >> 1 > v26)
      v26 = v27 >> 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
      v28 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 62)
        goto LABEL_115;
      v29 = operator new(4 * v28);
      v30 = &v29[4 * v25];
      *(_DWORD *)v30 = *v18;
      v23 = v30 + 4;
      if (v21 == v24)
        goto LABEL_35;
    }
    else
    {
      v29 = 0;
      v30 = (char *)(4 * v25);
      *(_DWORD *)(4 * v25) = *v18;
      v23 = (char *)(4 * v25 + 4);
      if (v21 == v24)
        goto LABEL_35;
    }
    v31 = v21 - 4 - v24;
    if (v31 < 0xBC)
    {
      v32 = v21;
      goto LABEL_34;
    }
    if (&v29[v21 - v24 - 4 - (v31 & 0xFFFFFFFFFFFFFFFCLL)] > &v29[v21 - v24 - 4])
    {
      v32 = v21;
      do
      {
LABEL_34:
        v33 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *((_DWORD *)v30 - 1) = v33;
        v30 -= 4;
      }
      while (v32 != v24);
      goto LABEL_35;
    }
    if (&v21[-(v31 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v21 - 4)
    {
      v32 = v21;
      goto LABEL_34;
    }
    if ((unint64_t)(v24 - v29) < 0x20)
    {
      v32 = v21;
      goto LABEL_34;
    }
    v56 = (v31 >> 2) + 1;
    v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
    v32 = &v21[-v57];
    v30 -= v57;
    v58 = &v29[4 * v25 - 16];
    v59 = (__int128 *)(v21 - 16);
    v60 = v56 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v61 = *v59;
      *(v58 - 1) = *(v59 - 1);
      *v58 = v61;
      v58 -= 2;
      v59 -= 2;
      v60 -= 8;
    }
    while (v60);
    if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_34;
LABEL_35:
    v22 = &v29[4 * v28];
    v156 = v30;
    v157 = v23;
    v158 = v22;
    if (v24)
    {
      operator delete(v24);
      v22 = v158;
    }
LABEL_37:
    v157 = v23;
    if (v23 < v22)
    {
      *(_DWORD *)v23 = v18[1];
      v34 = v23 + 4;
      goto LABEL_55;
    }
    v35 = v156;
    v36 = v23 - v156;
    v37 = (v23 - v156) >> 2;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 62)
      goto LABEL_114;
    v39 = v22 - v156;
    if (v39 >> 1 > v38)
      v38 = v39 >> 1;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
      v40 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      if (v40 >> 62)
        goto LABEL_115;
      v41 = operator new(4 * v40);
      v42 = &v41[4 * v37];
      *(_DWORD *)v42 = v18[1];
      v34 = v42 + 4;
      if (v23 == v35)
        goto LABEL_53;
    }
    else
    {
      v41 = 0;
      v42 = (char *)(4 * v37);
      *(_DWORD *)(4 * v37) = v18[1];
      v34 = (char *)(4 * v37 + 4);
      if (v23 == v35)
        goto LABEL_53;
    }
    v43 = v23 - 4 - v35;
    if (v43 < 0xBC)
    {
      v44 = v23;
      goto LABEL_52;
    }
    if (&v41[v36 - 4 - (v43 & 0xFFFFFFFFFFFFFFFCLL)] > &v41[v36 - 4])
    {
      v44 = v23;
      do
      {
LABEL_52:
        v45 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        *((_DWORD *)v42 - 1) = v45;
        v42 -= 4;
      }
      while (v44 != v35);
      goto LABEL_53;
    }
    if (&v23[-(v43 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v23 - 4)
    {
      v44 = v23;
      goto LABEL_52;
    }
    if ((unint64_t)(v35 - v41) < 0x20)
    {
      v44 = v23;
      goto LABEL_52;
    }
    v62 = (v43 >> 2) + 1;
    v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
    v44 = &v23[-v63];
    v42 -= v63;
    v64 = &v41[4 * v37 - 16];
    v65 = (__int128 *)(v23 - 16);
    v66 = v62 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v67 = *v65;
      *(v64 - 1) = *(v65 - 1);
      *v64 = v67;
      v64 -= 2;
      v65 -= 2;
      v66 -= 8;
    }
    while (v66);
    if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_52;
LABEL_53:
    v22 = &v41[4 * v40];
    v156 = v42;
    v157 = v34;
    v158 = v22;
    if (v35)
    {
      operator delete(v35);
      v22 = v158;
    }
LABEL_55:
    v157 = v34;
    if (v34 < v22)
    {
      *(_DWORD *)v34 = v18[2];
      v21 = v34 + 4;
      goto LABEL_18;
    }
    v46 = v156;
    v47 = (v34 - v156) >> 2;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 62)
LABEL_114:
      sub_2394189F8();
    v49 = v22 - v156;
    if (v49 >> 1 > v48)
      v48 = v49 >> 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
      v50 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      if (v50 >> 62)
LABEL_115:
        sub_239418A80();
      v51 = operator new(4 * v50);
      v52 = &v51[4 * v47];
      *(_DWORD *)v52 = v18[2];
      v21 = v52 + 4;
      if (v34 == v46)
        goto LABEL_70;
    }
    else
    {
      v51 = 0;
      v52 = (char *)(4 * v47);
      *(_DWORD *)(4 * v47) = v18[2];
      v21 = (char *)(4 * v47 + 4);
      if (v34 == v46)
        goto LABEL_70;
    }
    v53 = v34 - 4 - v46;
    if (v53 < 0xBC)
    {
      v54 = v34;
      goto LABEL_69;
    }
    if (&v51[v34 - v46 - 4 - (v53 & 0xFFFFFFFFFFFFFFFCLL)] > &v51[v34 - v46 - 4])
    {
      v54 = v34;
      do
      {
LABEL_69:
        v55 = *((_DWORD *)v54 - 1);
        v54 -= 4;
        *((_DWORD *)v52 - 1) = v55;
        v52 -= 4;
      }
      while (v54 != v46);
      goto LABEL_70;
    }
    if (&v34[-(v53 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v34 - 4)
    {
      v54 = v34;
      goto LABEL_69;
    }
    if ((unint64_t)(v46 - v51) < 0x20)
    {
      v54 = v34;
      goto LABEL_69;
    }
    v68 = (v53 >> 2) + 1;
    v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
    v54 = &v34[-v69];
    v52 -= v69;
    v70 = &v51[4 * v47 - 16];
    v71 = (__int128 *)(v34 - 16);
    v72 = v68 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v73 = *v71;
      *(v70 - 1) = *(v71 - 1);
      *v70 = v73;
      v70 -= 2;
      v71 -= 2;
      v72 -= 8;
    }
    while (v72);
    if (v68 != (v68 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_69;
LABEL_70:
    v156 = v52;
    v157 = v21;
    v158 = &v51[4 * v50];
    if (v46)
      operator delete(v46);
LABEL_18:
    v157 = v21;
    v18 += 3;
  }
  while (v18 != v17);
  v74 = v125;
  v17 = (_DWORD *)*v125;
  v75 = (_DWORD *)v125[1];
  a3 = v123;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v76 = v21 - v156;
  if (v76)
  {
    if (v76 < 0)
      sub_2394189F8();
    v151 = (char *)operator new(v76);
    v153 = &v151[4 * (v76 >> 2)];
    memcpy(v151, v156, v76);
    v152 = v153;
  }
LABEL_107:
  v77 = 0xAAAAAAAAAAAAAAABLL * (v75 - v17);
  v154 = -1431655765 * (v75 - v17);
  v155 = 3;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v148 = &v151;
  v149 = 10;
  v150 = &v151;
  v141 = (int)v77;
  v142 = (int)v77;
  v143 = 3;
  v140 = 10;
  if ((_DWORD)v77)
  {
    sub_23942CB44((uint64_t)&v136, (int)v77);
    v78 = v141;
    if (v141)
    {
      v79 = v136;
      if (v141 >= 8)
      {
        v80 = v141 & 0xFFFFFFFFFFFFFFF8;
        v81 = (int32x4_t)xmmword_239EC6870;
        v82 = (int32x4_t *)((char *)v136 + 16);
        v83.i64[0] = 0x400000004;
        v83.i64[1] = 0x400000004;
        v84.i64[0] = 0x800000008;
        v84.i64[1] = 0x800000008;
        v85 = v141 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v82[-1] = v81;
          *v82 = vaddq_s32(v81, v83);
          v81 = vaddq_s32(v81, v84);
          v82 += 2;
          v85 -= 8;
        }
        while (v85);
        goto LABEL_119;
      }
      v80 = 0;
      do
      {
        v79[v80] = v80;
        ++v80;
LABEL_119:
        ;
      }
      while (v78 != v80);
    }
  }
  v134 = 32;
  v135 = 0;
  v133 = a7 * a7;
  sub_2396E4198((uint64_t)&v136);
  v86 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v87 = *v74;
  v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74[1] - *v74) >> 2);
  if (v88 != v86)
  {
    if (v88 <= v86)
    {
      if (v88 < v86)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 12 * ((uint64_t)(v74[1] - *v74) >> 2);
    }
    else
    {
      sub_2396E8478((void **)a2, v88 - v86);
      v87 = *v74;
      v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74[1] - *v74) >> 2);
    }
  }
  v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  if (v88 != v89)
  {
    if (v88 <= v89)
    {
      if (v88 < v89)
        *(_QWORD *)(a3 + 8) = *(_QWORD *)a3 + 12 * v88;
    }
    else
    {
      sub_2394E6878((char **)a3, v88 - v89);
      v87 = *v74;
    }
  }
  v90 = v74[1];
  v131 = 0;
  v132 = 0;
  v91 = (v90 - v87) / 12;
  v130 = 0;
  if (v90 != v87)
  {
    if (v91 >= 0x1555555555555556)
      sub_2394189F8();
    v92 = operator new(v90 - v87);
    v93 = (char *)v92 + 12 * v91;
    v130 = v92;
    v132 = v93;
    v94 = 12 * v91 - 12;
    if (v94 < 0x54)
    {
      v95 = (char *)v92;
      goto LABEL_137;
    }
    v96 = v94 / 0xC + 1;
    v95 = (char *)v92 + 12 * (v96 & 0x3FFFFFFFFFFFFFF8);
    v97 = v96 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      *v92 = xmmword_239ECEFD0;
      v92[1] = xmmword_239ECEFC0;
      v92[4] = xmmword_239ECEFC0;
      v92[5] = xmmword_239ECEFB0;
      v92[2] = xmmword_239ECEFB0;
      v92[3] = xmmword_239ECEFD0;
      v92 += 6;
      v97 -= 8;
    }
    while (v97);
    if (v96 != (v96 & 0x3FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_137:
        *(_QWORD *)v95 = 0;
        *((_DWORD *)v95 + 2) = 1065353216;
        v95 += 12;
      }
      while (v95 != v93);
    }
    v131 = v93;
  }
  v129 = 0;
  if (v133 < 0.00000011921)
    v129 = v159 <= (unint64_t)(131072000.0 / (double)v91);
  sub_2396E42B8(&__p, v91);
  v99 = *v74;
  v98 = v74[1];
  v163 = 0;
  v100 = operator new(0x58uLL);
  *v100 = &off_250AE3620;
  v100[1] = v74;
  v100[2] = &v159;
  v100[3] = &v133;
  v100[4] = &v136;
  v100[5] = &v134;
  v100[6] = &v130;
  v100[7] = a2;
  v100[8] = a3;
  v100[9] = &__p;
  v100[10] = &v129;
  v163 = v100;
  sub_2397A376C(v164, 0xAAAAAAAAAAAAAAABLL * ((v98 - v99) >> 2), v162, 0);
  v101 = v163;
  if (v163 == v162)
  {
    v103 = 4;
    v101 = v162;
    v102 = a5;
LABEL_145:
    (*(void (**)(void))(*v101 + 8 * v103))();
  }
  else
  {
    v102 = a5;
    if (v163)
    {
      v103 = 5;
      goto LABEL_145;
    }
  }
  if (v102)
  {
    if (*((_BYTE *)v74 + 80))
    {
      v104 = v74[7];
      v105 = v74[8];
    }
    else
    {
      v104 = 0;
      v105 = 0;
      v74[7] = 0;
      v74[8] = 0;
      v74[9] = 0;
      *((_BYTE *)v74 + 80) = 1;
    }
    v107 = *v74;
    v106 = v74[1];
    v108 = 0xAAAAAAAAAAAAAAABLL * ((v106 - *v74) >> 2);
    v109 = 0xAAAAAAAAAAAAAAABLL * ((v105 - v104) >> 2);
    if (v108 <= v109)
    {
      if (v108 < v109)
        v74[8] = v104 + 4 * ((v106 - *v74) >> 2);
    }
    else
    {
      sub_2394E6878((char **)v74 + 7, v108 - v109);
      v107 = *v74;
      v106 = v74[1];
    }
    v110 = cos(a8 * 3.14159265 / 180.0);
    v126 = v110;
    v161 = 0;
    v111 = operator new(0x60uLL);
    *v111 = &off_250AE3668;
    v111[1] = v74;
    v111[2] = &v159;
    v111[3] = &v133;
    v111[4] = &v136;
    v111[5] = &v134;
    v111[6] = &v130;
    v111[7] = a2;
    v111[8] = a3;
    v111[9] = &__p;
    v111[10] = &v129;
    v111[11] = &v126;
    v161 = v111;
    sub_2397A376C(v164, 0xAAAAAAAAAAAAAAABLL * ((v106 - v107) >> 2), v160, 0);
    v112 = v161;
    if (v161 == v160)
    {
      v113 = 4;
      v112 = v160;
LABEL_158:
      (*(void (**)(void))(*v112 + 8 * v113))();
    }
    else if (v161)
    {
      v113 = 5;
      goto LABEL_158;
    }
  }
  v114 = (char *)__p;
  if (__p)
  {
    v115 = v128;
    v116 = __p;
    if (v128 != __p)
    {
      v117 = v128;
      do
      {
        v119 = (void *)*((_QWORD *)v117 - 3);
        v117 -= 24;
        v118 = v119;
        if (v119)
        {
          *((_QWORD *)v115 - 2) = v118;
          operator delete(v118);
        }
        v115 = v117;
      }
      while (v117 != v114);
      v116 = __p;
    }
    v128 = v114;
    operator delete(v116);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  v120 = v145;
  if (v145)
  {
    do
    {
      v121 = (_QWORD *)*v120;
      free(v120);
      v145 = v121;
      v120 = v121;
    }
    while (v121);
  }
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  if (v151)
  {
    v152 = v151;
    operator delete(v151);
  }
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  sub_2397A2E14(v164);
  return 1;
}

void sub_2396E40F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;

  v57 = *(char **)(v56 + 240);
  if (v57 == v55)
  {
    v58 = 4;
    v57 = &a51;
  }
  else
  {
    if (!v57)
      goto LABEL_6;
    v58 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
LABEL_6:
  sub_23942A16C(&a15);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2396E4380((uint64_t)&a24);
  if (*(_QWORD *)(v56 + 152))
    JUMPOUT(0x2396E4184);
  JUMPOUT(0x2396E3B54);
}

_QWORD *sub_2396E4198(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  int32x4_t *v4;
  unint64_t v5;
  int32x4_t v6;
  int32x4_t *v7;
  int32x4_t v8;
  int32x4_t v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD *v12;

  v2 = *(int *)(*(_QWORD *)(a1 + 128) + 24);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 48) = v2;
  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (v2 != v3)
  {
    if (v2 <= v3)
    {
      if (v2 < v3)
        *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * v2;
    }
    else
    {
      sub_23942CB44(a1, v2 - v3);
      v2 = *(_QWORD *)(a1 + 40);
    }
  }
  if (v2)
  {
    v4 = *(int32x4_t **)a1;
    if (v2 >= 8)
    {
      v5 = v2 & 0xFFFFFFFFFFFFFFF8;
      v6 = (int32x4_t)xmmword_239EC6870;
      v7 = v4 + 1;
      v8.i64[0] = 0x400000004;
      v8.i64[1] = 0x400000004;
      v9.i64[0] = 0x800000008;
      v9.i64[1] = 0x800000008;
      v10 = v2 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v7[-1] = v6;
        *v7 = vaddq_s32(v6, v8);
        v6 = vaddq_s32(v6, v9);
        v7 += 2;
        v10 -= 8;
      }
      while (v10);
      goto LABEL_13;
    }
    v5 = 0;
    do
    {
      v4->i32[v5] = v5;
      ++v5;
LABEL_13:
      ;
    }
    while (v2 != v5);
  }
  result = *(_QWORD **)(a1 + 96);
  if (result)
  {
    do
    {
      v12 = (_QWORD *)*result;
      free(result);
      *(_QWORD *)(a1 + 96) = v12;
      result = v12;
    }
    while (v12);
    v2 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = v2;
  if (v2)
  {
    sub_2396E8624(a1, (float *)(a1 + 60));
    result = sub_2396E878C(a1, a1, 0, *(unsigned int *)(a1 + 40), (float *)(a1 + 60));
    *(_QWORD *)(a1 + 24) = result;
  }
  return result;
}

_QWORD *sub_2396E42B8(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2396E4360(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EBFED4((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396E4380(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = (_QWORD *)(a1 + 88);
  v3 = *(_QWORD **)(a1 + 96);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      free(v3);
      *(_QWORD *)(a1 + 96) = v4;
      v3 = v4;
    }
    while (v4);
  }
  *v2 = 0;
  v2[1] = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_2396E43E0(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, float a5)
{
  int v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  _QWORD v16[3];
  _QWORD *v17;
  unint64_t v18[45];

  v18[44] = *MEMORY[0x24BDAC8D0];
  v15 = a5;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
    return 1;
  v5 = a4;
  if (*(_BYTE *)(a1 + 80) || (result = sub_2396E2E90(a1, a2, a4), (_DWORD)result))
  {
    if (v5 <= 0)
      v5 = std::thread::hardware_concurrency();
    sub_2397A2A50((uint64_t)v18, v5, 0);
    if (!*(_BYTE *)(a1 + 80))
      sub_2394875CC();
    v11 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    v12 = operator new(0x30uLL);
    *v12 = &off_250AE36B0;
    v12[1] = a1;
    v12[2] = a1 + 56;
    v12[3] = a2;
    v12[4] = a3;
    v12[5] = &v15;
    v17 = v12;
    sub_2397A376C(v18, 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 2), v16, 0);
    v13 = v17;
    if (v17 == v16)
    {
      v14 = 4;
      v13 = v16;
    }
    else
    {
      if (!v17)
      {
LABEL_12:
        sub_2397A2E14(v18);
        return 1;
      }
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
    goto LABEL_12;
  }
  return result;
}

void sub_2396E4538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v2;
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, va_list);
  v4 = v10;
  if (v10 == v2)
  {
    v5 = 4;
    va_copy(v4, va);
  }
  else
  {
    if (!v10)
    {
      sub_2397A2E14(va1);
      _Unwind_Resume(a1);
    }
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  sub_2397A2E14(va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2396E4590(uint64_t a1, uint64_t a2, float64x2_t a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9)
{
  uint64_t *v9;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  float64x2_t *v17;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  size_t v61;
  unint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  char *v65;
  char *v66;
  char *v67;
  __int16 v68;
  char v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int v78;
  int64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int *v105;
  char *v106;
  int v107;
  int v108;
  int v109;
  uint64_t *v110;
  uint64_t **v111;
  uint64_t **v112;
  uint64_t *v113;
  int v114;
  _DWORD *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  _BYTE *v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t **v129;
  uint64_t **v130;
  uint64_t *v131;
  int v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  _BYTE *v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t **v148;
  uint64_t **v149;
  int v150;
  _DWORD *v151;
  uint64_t *v152;
  int8x8_t v153;
  uint8x8_t v154;
  unint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  unint64_t v165;
  unsigned int v166;
  _DWORD *v167;
  uint64_t v168;
  void *v169;
  _DWORD *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  _BYTE *v186;
  __int16 v187;
  void *v188;
  _BYTE *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  __int16 v194;
  char *v195;
  char *v196;
  __int16 v197;
  char v198;
  _DWORD *v199;
  void *v200;
  _DWORD *v201;
  _DWORD *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  char *v212;
  char *v213;
  int64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  uint64_t v227;
  __int128 v228;
  int v229;
  char *v230;
  char *v231;
  void *v232;
  char *v233;
  void *v234;
  void *v235;
  char *v236;
  char *v237;
  char *v238;
  void *v239;
  void *v240;
  int v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  float64x2_t *v248;
  uint64_t v249;
  uint64_t v250;
  int8x8_t *v251;
  void *v252;
  char *v253;
  char *v254;
  void *v255[2];
  void *v256[6];
  __int128 v257;
  char v258;
  void *v259;
  char *v260;
  unint64_t v261;
  char v262;
  void *v263;
  char *v264;
  char *v265;
  char v266;
  uint64_t *v267;
  uint64_t *v268;
  uint64_t *v269;
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  unint64_t v275;

  v9 = *(uint64_t **)(a2 + 88);
  if (*(_BYTE *)(a2 + 928))
    _ZF = v9 == 0;
  else
    _ZF = 1;
  if (_ZF)
    return 0;
  v13 = -1;
  do
  {
    if (*((_BYTE *)v9 + 256) == 2)
    {
      v14 = *((_DWORD *)v9 + 55);
      if (v14 <= v13)
        v15 = v13;
      else
        v15 = *((_DWORD *)v9 + 55);
      if (v13 == -1)
        v15 = *((_DWORD *)v9 + 55);
      if (v14 >= 0)
        v13 = v15;
    }
    v9 = (uint64_t *)*v9;
  }
  while (v9);
  if (v13 < 1)
    return 0;
  v250 = a2 + 192;
  if (sub_2396F759C(a2 + 192, a3, a4, a5, a6, a7, a8, a9) != 2)
    return 0;
  v245 = a1;
  v273 = 0;
  v274 = 0;
  v275 = 0;
  v270 = 0;
  v271 = 0;
  v272 = 0;
  if (!*(_BYTE *)(a2 + 928))
    sub_2394875CC();
  v17 = *(float64x2_t **)(a2 + 904);
  v248 = *(float64x2_t **)(a2 + 912);
  if (v17 != v248)
  {
    __asm { FMOV            V8.2S, #-1.0 }
    do
    {
      memset(v256, 0, sizeof(v256));
      *(_OWORD *)v255 = 0u;
      *(_QWORD *)&v257 = _D8;
      *((_QWORD *)&v257 + 1) = 3212836864;
      *(float32x4_t *)&v256[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v17), v17[1]);
      v22 = v274;
      if ((unint64_t)v274 >= v275)
      {
        v24 = sub_2396EC1C4((void **)&v273, (uint64_t)v255);
      }
      else
      {
        *((_QWORD *)v274 + 1) = 0;
        *((_QWORD *)v22 + 2) = 0;
        *(_QWORD *)v22 = 0;
        *(_OWORD *)v22 = *(_OWORD *)v255;
        *((void **)v22 + 2) = v256[0];
        v255[0] = 0;
        v255[1] = 0;
        v256[0] = 0;
        *(_OWORD *)(v22 + 24) = *(_OWORD *)&v256[1];
        *((_QWORD *)v22 + 6) = 0;
        *((_QWORD *)v22 + 7) = 0;
        *((_QWORD *)v22 + 5) = 0;
        *(_OWORD *)(v22 + 40) = *(_OWORD *)&v256[3];
        *((void **)v22 + 7) = v256[5];
        memset(&v256[3], 0, 24);
        v23 = v257;
        *((_DWORD *)v22 + 18) = DWORD2(v257);
        *((_QWORD *)v22 + 8) = v23;
        v24 = v22 + 80;
      }
      v274 = v24;
      v267 = 0;
      v268 = 0;
      v269 = 0;
      sub_2396F730C((uint64_t)v17, v250, (uint64_t)&v267, 10.0);
      v25 = v267;
      v26 = v271;
      if (v268 == v267)
      {
        if (v271 >= v272)
        {
          v28 = v270;
          v35 = (v271 - v270) >> 2;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
            sub_2394189F8();
          v37 = v272 - v270;
          if ((v272 - v270) >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v36;
          if (v32)
          {
            if (v32 >> 62)
              sub_239418A80();
            v33 = operator new(4 * v32);
            v34 = &v33[4 * v35];
            *(_DWORD *)v34 = -1;
            v27 = (uint64_t)(v34 + 4);
            if (v26 == v28)
              goto LABEL_64;
LABEL_58:
            v47 = v26 - 4 - v28;
            if (v47 < 0x2C)
              goto LABEL_410;
            if ((unint64_t)(v28 - v33) < 0x20)
              goto LABEL_410;
            v48 = (v47 >> 2) + 1;
            v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
            v50 = &v26[-v49];
            v34 -= v49;
            v51 = &v33[4 * v35 - 16];
            v52 = (__int128 *)(v26 - 16);
            v53 = v48 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v16 = *(v52 - 1);
              v54 = *v52;
              *(v51 - 1) = v16;
              *v51 = v54;
              v51 -= 2;
              v52 -= 2;
              v53 -= 8;
            }
            while (v53);
            v26 = v50;
            if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_410:
              do
              {
                v55 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *((_DWORD *)v34 - 1) = v55;
                v34 -= 4;
              }
              while (v26 != v28);
            }
          }
          else
          {
            v33 = 0;
            v34 = (char *)(4 * v35);
            *(_DWORD *)(4 * v35) = -1;
            v27 = 4 * v35 + 4;
            if (v26 != v28)
              goto LABEL_58;
          }
LABEL_64:
          v270 = v34;
          v271 = (char *)v27;
          v272 = &v33[4 * v32];
          if (v28)
            operator delete(v28);
          goto LABEL_66;
        }
        *(_DWORD *)v271 = -1;
        v27 = (uint64_t)(v26 + 4);
      }
      else
      {
        if (v271 >= v272)
        {
          v28 = v270;
          v29 = (v271 - v270) >> 2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
            sub_2394189F8();
          v31 = v272 - v270;
          if ((v272 - v270) >> 1 > v30)
            v30 = v31 >> 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            if (v32 >> 62)
              sub_239418A80();
            v33 = operator new(4 * v32);
            v34 = &v33[4 * v29];
            *(_DWORD *)v34 = *v25;
            v27 = (uint64_t)(v34 + 4);
            if (v26 == v28)
              goto LABEL_64;
          }
          else
          {
            v33 = 0;
            v34 = (char *)(4 * v29);
            *(_DWORD *)(4 * v29) = *v267;
            v27 = 4 * v29 + 4;
            if (v26 == v28)
              goto LABEL_64;
          }
          v38 = v26 - 4 - v28;
          if (v38 < 0x2C)
            goto LABEL_411;
          if ((unint64_t)(v28 - v33) < 0x20)
            goto LABEL_411;
          v39 = (v38 >> 2) + 1;
          v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
          v41 = &v26[-v40];
          v34 -= v40;
          v42 = &v33[4 * v29 - 16];
          v43 = (__int128 *)(v26 - 16);
          v44 = v39 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v16 = *(v43 - 1);
            v45 = *v43;
            *(v42 - 1) = v16;
            *v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 8;
          }
          while (v44);
          v26 = v41;
          if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_411:
            do
            {
              v46 = *((_DWORD *)v26 - 1);
              v26 -= 4;
              *((_DWORD *)v34 - 1) = v46;
              v34 -= 4;
            }
            while (v26 != v28);
          }
          goto LABEL_64;
        }
        *(_DWORD *)v271 = *v267;
        v27 = (uint64_t)(v26 + 4);
      }
LABEL_66:
      v271 = (char *)v27;
      if (v267)
      {
        v268 = v267;
        operator delete(v267);
      }
      if (v256[3])
      {
        v256[4] = v256[3];
        operator delete(v256[3]);
      }
      if (v255[0])
      {
        v255[1] = v255[0];
        operator delete(v255[0]);
      }
      v17 += 2;
    }
    while (v17 != v248);
  }
  v251 = (int8x8_t *)a2;
  LOBYTE(v256[4]) = 0;
  LOBYTE(v256[5]) = 0;
  v258 = 0;
  LOBYTE(v259) = 0;
  v262 = 0;
  LOBYTE(v263) = 0;
  v266 = 0;
  v255[1] = 0;
  v256[0] = 0;
  v255[0] = 0;
  LOBYTE(v256[1]) = 0;
  v57 = v245;
  v243 = *(unsigned __int8 *)(v245 + 48);
  v244 = *(unsigned __int8 *)(v245 + 112);
  v241 = *(unsigned __int8 *)(v245 + 144);
  v242 = *(unsigned __int8 *)(v245 + 80);
  v58 = *(_QWORD *)(v245 + 8);
  v59 = v58 - *(_QWORD *)v245;
  if (v58 != *(_QWORD *)v245)
  {
    v60 = 0xAAAAAAAAAAAAAAABLL * (v59 >> 2);
    if (v60 > 0x1555555555555555)
      goto LABEL_405;
    v255[0] = operator new(v59);
    v255[1] = v255[0];
    v256[0] = (char *)v255[0] + 12 * v60;
  }
  if (v244)
  {
    v259 = 0;
    v260 = 0;
    v261 = 0;
    v262 = 1;
    sub_2395135EC((uint64_t)&v259, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v245 + 96) - *(_QWORD *)(v245 + 88)) >> 3));
  }
  if (v243)
  {
    if (!LOBYTE(v256[4]))
    {
      memset(&v256[1], 0, 24);
      LOBYTE(v256[4]) = 1;
    }
    if (!*(_BYTE *)(v245 + 48))
      goto LABEL_401;
    v61 = *(_QWORD *)(v245 + 32) - *(_QWORD *)(v245 + 24);
    v62 = 0xAAAAAAAAAAAAAAABLL * v61;
    v63 = v256[1];
    if (0xAAAAAAAAAAAAAAABLL * ((char *)v256[3] - (char *)v256[1]) < 0xAAAAAAAAAAAAAAABLL * v61)
    {
      if (v62 >= 0x5555555555555556)
        sub_2394189F8();
      v64 = v256[2];
      v65 = (char *)operator new(v61);
      v66 = &v65[3 * ((v64 - v63) / 3)];
      v67 = v66;
      if (v64 != v63)
      {
        v67 = &v65[3 * ((v64 - v63) / 3)];
        do
        {
          v68 = *(_WORD *)(v64 - 3);
          v64 -= 3;
          v69 = v64[2];
          *(_WORD *)(v67 - 3) = v68;
          v67 -= 3;
          v67[2] = v69;
        }
        while (v64 != v63);
      }
      v256[1] = v67;
      v256[2] = v66;
      v256[3] = &v65[3 * v62];
      if (v63)
        operator delete(v63);
    }
  }
  if (v242)
  {
    if (!v258)
    {
      v256[5] = 0;
      v257 = 0uLL;
      v258 = 1;
    }
    if (!*(_BYTE *)(v245 + 80))
      goto LABEL_401;
    v70 = *(_QWORD *)(v245 + 64) - *(_QWORD *)(v245 + 56);
    v71 = 0xAAAAAAAAAAAAAAABLL * (v70 >> 2);
    v72 = (char *)v256[5];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v257 + 1) - (unint64_t)v256[5]) >> 2) < v71)
    {
      if (v71 <= 0x1555555555555555)
      {
        v73 = (char *)v257;
        v74 = (char *)operator new(v70);
        v75 = &v74[12 * ((v73 - v72) / 12)];
        v76 = v75;
        if (v73 != v72)
        {
          v76 = &v74[12 * ((v73 - v72) / 12)];
          do
          {
            v77 = *(_QWORD *)(v73 - 12);
            v73 -= 12;
            v78 = *((_DWORD *)v73 + 2);
            *(_QWORD *)(v76 - 12) = v77;
            v76 -= 12;
            *((_DWORD *)v76 + 2) = v78;
          }
          while (v73 != v72);
        }
        v256[5] = v76;
        *(_QWORD *)&v257 = v75;
        *((_QWORD *)&v257 + 1) = &v74[12 * v71];
        if (v72)
          operator delete(v72);
        goto LABEL_100;
      }
LABEL_405:
      sub_2394189F8();
    }
  }
LABEL_100:
  if (!v241)
    goto LABEL_116;
  if (!v266)
  {
    v263 = 0;
    v264 = 0;
    v265 = 0;
    v266 = 1;
  }
  if (!*(_BYTE *)(v245 + 144))
LABEL_401:
    sub_2394875CC();
  v79 = *(_QWORD *)(v245 + 128) - *(_QWORD *)(v245 + 120);
  v80 = v79 >> 2;
  v81 = (char *)v263;
  if (v79 >> 2 <= (unint64_t)((v265 - (_BYTE *)v263) >> 2))
    goto LABEL_116;
  if (v79 < 0)
    sub_2394189F8();
  v82 = v264;
  v83 = (char *)operator new(v79);
  v84 = v82 - v81;
  v85 = &v83[(v82 - v81) & 0xFFFFFFFFFFFFFFFCLL];
  v86 = v85;
  if (v82 != v81)
  {
    if ((unint64_t)(v84 - 4) < 0x2C)
    {
      v86 = &v83[(v82 - v81) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_113:
        v95 = *((_DWORD *)v82 - 1);
        v82 -= 4;
        *((_DWORD *)v86 - 1) = v95;
        v86 -= 4;
      }
      while (v82 != v81);
      goto LABEL_114;
    }
    v86 = &v83[(v82 - v81) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v82 - &v83[v84 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_113;
    v87 = v84 >> 2;
    v88 = ((unint64_t)(v84 - 4) >> 2) + 1;
    v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
    v90 = &v82[-v89];
    v86 = &v85[-v89];
    v91 = &v83[4 * v87 - 16];
    v92 = v82 - 16;
    v93 = v88 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v16 = *((_OWORD *)v92 - 1);
      v94 = *(_OWORD *)v92;
      *((_OWORD *)v91 - 1) = v16;
      *(_OWORD *)v91 = v94;
      v91 -= 32;
      v92 -= 32;
      v93 -= 8;
    }
    while (v93);
    v82 = v90;
    if (v88 != (v88 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_113;
  }
LABEL_114:
  v263 = v86;
  v264 = v85;
  v265 = &v83[4 * v80];
  if (v81)
    operator delete(v81);
LABEL_116:
  v97 = *(_QWORD *)v245;
  v96 = *(_QWORD *)(v245 + 8);
  if (*(_BYTE *)(v245 + 80))
  {
    if (v96 == v97)
      goto LABEL_343;
LABEL_128:
    v99 = 0;
    while (1)
    {
      if (!*(_BYTE *)(v57 + 80))
        sub_2394875CC();
      v101 = *(_QWORD *)(v57 + 56) + 12 * v99;
      v102 = *(_DWORD *)(v101 + 8);
      v252 = *(void **)v101;
      LODWORD(v253) = v102;
      v268 = 0;
      v269 = 0;
      v267 = (uint64_t *)&v268;
      if (!*(_BYTE *)(v57 + 112))
        sub_2394875CC();
      v246 = 12 * v99;
      v247 = v97;
      v249 = v99;
      v103 = *(_QWORD *)(v57 + 88) + 24 * v99;
      v104 = *(unsigned int **)v103;
      v105 = *(unsigned int **)(v103 + 8);
      if (*(unsigned int **)v103 != v105)
      {
        v106 = 0;
        v107 = 0;
        v108 = -1;
        while (1)
        {
          v109 = *v104;
          v110 = v268;
          v111 = &v268;
          v112 = &v268;
          if (!v268)
            goto LABEL_145;
          v113 = v268;
          do
          {
            while (1)
            {
              v112 = (uint64_t **)v113;
              v114 = *((_DWORD *)v113 + 7);
              if (v109 >= v114)
                break;
              v113 = *v112;
              v111 = v112;
              if (!*v112)
                goto LABEL_145;
            }
            if (v114 >= v109)
            {
              ++*((_DWORD *)v112 + 8);
              v128 = *v104;
              v129 = &v268;
              v130 = &v268;
              if (v110)
                goto LABEL_173;
              goto LABEL_177;
            }
            v113 = v112[1];
          }
          while (v113);
          v111 = v112 + 1;
LABEL_145:
          v115 = operator new(0x28uLL);
          v115[7] = v109;
          v115[8] = 0;
          *(_QWORD *)v115 = 0;
          *((_QWORD *)v115 + 1) = 0;
          *((_QWORD *)v115 + 2) = v112;
          *v111 = (uint64_t *)v115;
          v116 = (uint64_t *)v115;
          if (*v267)
          {
            v267 = (uint64_t *)*v267;
            v116 = *v111;
          }
          v117 = v268;
          *((_BYTE *)v116 + 24) = v116 == v268;
          if (v116 != v117)
          {
            do
            {
              v118 = v116[2];
              if (*(_BYTE *)(v118 + 24))
                break;
              v119 = *(uint64_t **)(v118 + 16);
              v120 = *v119;
              if (*v119 == v118)
              {
                v123 = v119[1];
                if (!v123 || (v124 = *(unsigned __int8 *)(v123 + 24), v121 = (_BYTE *)(v123 + 24), v124))
                {
                  if (*(uint64_t **)v118 == v116)
                  {
                    *(_BYTE *)(v118 + 24) = 1;
                    *((_BYTE *)v119 + 24) = 0;
                    v127 = *(_QWORD *)(v118 + 8);
                    *v119 = v127;
                    if (v127)
                      goto LABEL_161;
                  }
                  else
                  {
                    v125 = *(uint64_t **)(v118 + 8);
                    v126 = *v125;
                    *(_QWORD *)(v118 + 8) = *v125;
                    if (v126)
                    {
                      *(_QWORD *)(v126 + 16) = v118;
                      v119 = *(uint64_t **)(v118 + 16);
                    }
                    v125[2] = (uint64_t)v119;
                    *(_QWORD *)(*(_QWORD *)(v118 + 16) + 8 * (**(_QWORD **)(v118 + 16) != v118)) = v125;
                    *v125 = v118;
                    *(_QWORD *)(v118 + 16) = v125;
                    v119 = (uint64_t *)v125[2];
                    v118 = *v119;
                    *((_BYTE *)v125 + 24) = 1;
                    *((_BYTE *)v119 + 24) = 0;
                    v127 = *(_QWORD *)(v118 + 8);
                    *v119 = v127;
                    if (v127)
LABEL_161:
                      *(_QWORD *)(v127 + 16) = v119;
                  }
                  *(_QWORD *)(v118 + 16) = v119[2];
                  *(_QWORD *)(v119[2] + 8 * (*(_QWORD *)v119[2] != (_QWORD)v119)) = v118;
                  *(_QWORD *)(v118 + 8) = v119;
LABEL_169:
                  v119[2] = v118;
                  break;
                }
              }
              else if (!v120 || (v122 = *(unsigned __int8 *)(v120 + 24), v121 = (_BYTE *)(v120 + 24), v122))
              {
                if (*(uint64_t **)v118 == v116)
                {
                  v161 = v116[1];
                  *(_QWORD *)v118 = v161;
                  if (v161)
                  {
                    *(_QWORD *)(v161 + 16) = v118;
                    v119 = *(uint64_t **)(v118 + 16);
                  }
                  v116[2] = (uint64_t)v119;
                  *(_QWORD *)(*(_QWORD *)(v118 + 16) + 8 * (**(_QWORD **)(v118 + 16) != v118)) = v116;
                  v116[1] = v118;
                  *(_QWORD *)(v118 + 16) = v116;
                  v119 = (uint64_t *)v116[2];
                  *((_BYTE *)v116 + 24) = 1;
                  *((_BYTE *)v119 + 24) = 0;
                  v118 = v119[1];
                  v131 = *(uint64_t **)v118;
                  v119[1] = *(_QWORD *)v118;
                  if (v131)
LABEL_167:
                    v131[2] = (uint64_t)v119;
                }
                else
                {
                  *(_BYTE *)(v118 + 24) = 1;
                  *((_BYTE *)v119 + 24) = 0;
                  v118 = v119[1];
                  v131 = *(uint64_t **)v118;
                  v119[1] = *(_QWORD *)v118;
                  if (v131)
                    goto LABEL_167;
                }
                *(_QWORD *)(v118 + 16) = v119[2];
                *(_QWORD *)(v119[2] + 8 * (*(_QWORD *)v119[2] != (_QWORD)v119)) = v118;
                *(_QWORD *)v118 = v119;
                goto LABEL_169;
              }
              *(_BYTE *)(v118 + 24) = 1;
              v116 = v119;
              *((_BYTE *)v119 + 24) = v119 == v117;
              *v121 = 1;
            }
            while (v119 != v117);
          }
          v269 = (uint64_t *)++v106;
          v110 = v268;
          v115[8] = 1;
          v128 = *v104;
          v129 = &v268;
          v130 = &v268;
          if (v110)
          {
            while (1)
            {
LABEL_173:
              while (1)
              {
                v130 = (uint64_t **)v110;
                v132 = *((_DWORD *)v110 + 7);
                if (v128 >= v132)
                  break;
                v110 = *v130;
                v129 = v130;
                if (!*v130)
                  goto LABEL_177;
              }
              if (v132 >= v128)
                break;
              v110 = v130[1];
              if (!v110)
              {
                v129 = v130 + 1;
                goto LABEL_177;
              }
            }
            if (*((_DWORD *)v130 + 8) > v107)
            {
LABEL_203:
              v146 = *v104;
              v147 = v268;
              v148 = &v268;
              v149 = &v268;
              if (v268)
              {
                while (1)
                {
                  while (1)
                  {
                    v149 = (uint64_t **)v147;
                    v150 = *((_DWORD *)v147 + 7);
                    if ((int)v146 >= v150)
                      break;
                    v147 = *v149;
                    v148 = v149;
                    if (!*v149)
                      goto LABEL_210;
                  }
                  if (v150 >= (int)v146)
                    break;
                  v147 = v149[1];
                  if (!v147)
                  {
                    v148 = v149 + 1;
                    goto LABEL_210;
                  }
                }
                v151 = v149;
                v153 = v251[10];
                if (v153)
                  goto LABEL_215;
              }
              else
              {
LABEL_210:
                v151 = operator new(0x28uLL);
                v151[7] = v146;
                v151[8] = 0;
                *(_QWORD *)v151 = 0;
                *((_QWORD *)v151 + 1) = 0;
                *((_QWORD *)v151 + 2) = v149;
                *v148 = (uint64_t *)v151;
                v152 = (uint64_t *)v151;
                if (*v267)
                {
                  v267 = (uint64_t *)*v267;
                  v152 = *v148;
                }
                sub_2394213B8(v268, v152);
                v106 = (char *)v269 + 1;
                v269 = (uint64_t *)((char *)v269 + 1);
                v146 = *v104;
                v153 = v251[10];
                if (!*(_QWORD *)&v153)
                  goto LABEL_388;
LABEL_215:
                v154 = (uint8x8_t)vcnt_s8(v153);
                v154.i16[0] = vaddlv_u8(v154);
                if (v154.u32[0] > 1uLL)
                {
                  v155 = v146;
                  if (*(_QWORD *)&v153 <= v146)
                    v155 = v146 % *(_QWORD *)&v153;
                }
                else
                {
                  v155 = (v153.i32[0] - 1) & v146;
                }
                v156 = *(uint64_t ***)(*(_QWORD *)&v251[9] + 8 * v155);
                if (v156)
                {
                  v157 = *v156;
                  if (v157)
                  {
                    v107 = v151[8];
                    if (v154.u32[0] < 2uLL)
                    {
                      v158 = *(_QWORD *)&v153 - 1;
                      while (1)
                      {
                        v160 = v157[1];
                        if (v160 == v146)
                        {
                          if (*((_DWORD *)v157 + 4) == v146)
                            goto LABEL_136;
                        }
                        else if ((v160 & v158) != v155)
                        {
                          goto LABEL_388;
                        }
                        v157 = (uint64_t *)*v157;
                        if (!v157)
                          goto LABEL_388;
                      }
                    }
                    do
                    {
                      v159 = v157[1];
                      if (v159 == v146)
                      {
                        if (*((_DWORD *)v157 + 4) == v146)
                        {
LABEL_136:
                          v108 = *((_DWORD *)v157 + 55);
                          goto LABEL_137;
                        }
                      }
                      else
                      {
                        if (v159 >= *(_QWORD *)&v153)
                          v159 %= *(_QWORD *)&v153;
                        if (v159 != v155)
                          break;
                      }
                      v157 = (uint64_t *)*v157;
                    }
                    while (v157);
                  }
                }
              }
LABEL_388:
              sub_239A444D4((uint64_t)"unknown file", 779, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
          }
          else
          {
LABEL_177:
            v133 = (uint64_t *)operator new(0x28uLL);
            *((_DWORD *)v133 + 7) = v128;
            *((_DWORD *)v133 + 8) = 0;
            *v133 = 0;
            v133[1] = 0;
            v133[2] = (uint64_t)v130;
            *v129 = v133;
            if (*v267)
            {
              v267 = (uint64_t *)*v267;
              v133 = *v129;
            }
            v134 = v268;
            *((_BYTE *)v133 + 24) = v133 == v268;
            if (v133 != v134)
            {
              do
              {
                v135 = v133[2];
                if (*(_BYTE *)(v135 + 24))
                  break;
                v136 = *(uint64_t **)(v135 + 16);
                v137 = *v136;
                if (*v136 == v135)
                {
                  v140 = v136[1];
                  if (!v140 || (v141 = *(unsigned __int8 *)(v140 + 24), v138 = (_BYTE *)(v140 + 24), v141))
                  {
                    if (*(uint64_t **)v135 == v133)
                    {
                      *(_BYTE *)(v135 + 24) = 1;
                      *((_BYTE *)v136 + 24) = 0;
                      v144 = *(_QWORD *)(v135 + 8);
                      *v136 = v144;
                      if (v144)
                        goto LABEL_193;
                    }
                    else
                    {
                      v142 = *(uint64_t **)(v135 + 8);
                      v143 = *v142;
                      *(_QWORD *)(v135 + 8) = *v142;
                      if (v143)
                      {
                        *(_QWORD *)(v143 + 16) = v135;
                        v136 = *(uint64_t **)(v135 + 16);
                      }
                      v142[2] = (uint64_t)v136;
                      *(_QWORD *)(*(_QWORD *)(v135 + 16) + 8 * (**(_QWORD **)(v135 + 16) != v135)) = v142;
                      *v142 = v135;
                      *(_QWORD *)(v135 + 16) = v142;
                      v136 = (uint64_t *)v142[2];
                      v135 = *v136;
                      *((_BYTE *)v142 + 24) = 1;
                      *((_BYTE *)v136 + 24) = 0;
                      v144 = *(_QWORD *)(v135 + 8);
                      *v136 = v144;
                      if (v144)
LABEL_193:
                        *(_QWORD *)(v144 + 16) = v136;
                    }
                    *(_QWORD *)(v135 + 16) = v136[2];
                    *(_QWORD *)(v136[2] + 8 * (*(_QWORD *)v136[2] != (_QWORD)v136)) = v135;
                    *(_QWORD *)(v135 + 8) = v136;
LABEL_201:
                    v136[2] = v135;
                    break;
                  }
                }
                else if (!v137 || (v139 = *(unsigned __int8 *)(v137 + 24), v138 = (_BYTE *)(v137 + 24), v139))
                {
                  if (*(uint64_t **)v135 == v133)
                  {
                    v162 = v133[1];
                    *(_QWORD *)v135 = v162;
                    if (v162)
                    {
                      *(_QWORD *)(v162 + 16) = v135;
                      v136 = *(uint64_t **)(v135 + 16);
                    }
                    v133[2] = (uint64_t)v136;
                    *(_QWORD *)(*(_QWORD *)(v135 + 16) + 8 * (**(_QWORD **)(v135 + 16) != v135)) = v133;
                    v133[1] = v135;
                    *(_QWORD *)(v135 + 16) = v133;
                    v136 = (uint64_t *)v133[2];
                    *((_BYTE *)v133 + 24) = 1;
                    *((_BYTE *)v136 + 24) = 0;
                    v135 = v136[1];
                    v145 = *(uint64_t **)v135;
                    v136[1] = *(_QWORD *)v135;
                    if (v145)
LABEL_199:
                      v145[2] = (uint64_t)v136;
                  }
                  else
                  {
                    *(_BYTE *)(v135 + 24) = 1;
                    *((_BYTE *)v136 + 24) = 0;
                    v135 = v136[1];
                    v145 = *(uint64_t **)v135;
                    v136[1] = *(_QWORD *)v135;
                    if (v145)
                      goto LABEL_199;
                  }
                  *(_QWORD *)(v135 + 16) = v136[2];
                  *(_QWORD *)(v136[2] + 8 * (*(_QWORD *)v136[2] != (_QWORD)v136)) = v135;
                  *(_QWORD *)v135 = v136;
                  goto LABEL_201;
                }
                *(_BYTE *)(v135 + 24) = 1;
                v133 = v136;
                *((_BYTE *)v136 + 24) = v136 == v134;
                *v138 = 1;
              }
              while (v136 != v134);
            }
            v269 = (uint64_t *)++v106;
            if (v107 < 0)
              goto LABEL_203;
          }
LABEL_137:
          if (++v104 == v105)
            goto LABEL_248;
        }
      }
      v108 = -1;
LABEL_248:
      v163 = v247 + v246;
      v164 = v273;
      v57 = v245;
      if (v274 == v273)
      {
LABEL_255:
        v167 = v255[1];
        if (v255[1] >= v256[0])
        {
          v170 = v255[0];
          v171 = 0xAAAAAAAAAAAAAAABLL * (((char *)v255[1] - (char *)v255[0]) >> 2);
          v172 = v171 + 1;
          if (v171 + 1 > 0x1555555555555555)
            goto LABEL_393;
          if (0x5555555555555556 * (((char *)v256[0] - (char *)v255[0]) >> 2) > v172)
            v172 = 0x5555555555555556 * (((char *)v256[0] - (char *)v255[0]) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v256[0] - (char *)v255[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v173 = 0x1555555555555555;
          else
            v173 = v172;
          if (v173)
          {
            if (v173 > 0x1555555555555555)
              goto LABEL_392;
            v174 = (char *)operator new(12 * v173);
          }
          else
          {
            v174 = 0;
          }
          v175 = *(_QWORD *)v163;
          v176 = &v174[12 * v171];
          *((_DWORD *)v176 + 2) = *(_DWORD *)(v163 + 8);
          *(_QWORD *)v176 = v175;
          v177 = v176;
          if (v167 != v170)
          {
            do
            {
              v178 = *(_QWORD *)(v167 - 3);
              v167 -= 3;
              v179 = v167[2];
              *(_QWORD *)(v177 - 12) = v178;
              v177 -= 12;
              *((_DWORD *)v177 + 2) = v179;
            }
            while (v167 != v170);
            v167 = v255[0];
          }
          v169 = v176 + 12;
          v255[0] = v177;
          v255[1] = v176 + 12;
          v256[0] = &v174[12 * v173];
          if (v167)
            operator delete(v167);
        }
        else
        {
          v168 = *(_QWORD *)v163;
          *((_DWORD *)v255[1] + 2) = *(_DWORD *)(v163 + 8);
          *(_QWORD *)v167 = v168;
          v169 = v167 + 3;
        }
        v180 = v249;
        v255[1] = v169;
        if (v244)
        {
          if (!v262 || !*(_BYTE *)(v245 + 112))
LABEL_389:
            sub_2394875CC();
          v181 = *(_QWORD *)(v245 + 88);
          v182 = v181 + 24 * v249;
          v183 = v260;
          if ((unint64_t)v260 >= v261)
          {
            v184 = sub_2396C8920((char **)&v259, v182);
            v180 = v249;
          }
          else
          {
            *(_QWORD *)v260 = 0;
            *((_QWORD *)v183 + 1) = 0;
            *((_QWORD *)v183 + 2) = 0;
            *(_OWORD *)v183 = *(_OWORD *)v182;
            *((_QWORD *)v183 + 2) = *(_QWORD *)(v181 + 24 * v249 + 16);
            *(_QWORD *)v182 = 0;
            *(_QWORD *)(v182 + 8) = 0;
            *(_QWORD *)(v182 + 16) = 0;
            v184 = v183 + 24;
          }
          v260 = v184;
        }
        if (v243)
        {
          if (!LOBYTE(v256[4]) || !*(_BYTE *)(v245 + 48))
            goto LABEL_389;
          v185 = *(_QWORD *)(v245 + 24) + 3 * v180;
          v186 = v256[2];
          if (v256[2] >= v256[3])
          {
            v189 = v256[1];
            v190 = 0xAAAAAAAAAAAAAAABLL * ((char *)v256[2] - (char *)v256[1]);
            v191 = v190 + 1;
            if (v190 + 1 >= 0x5555555555555556)
              sub_2394189F8();
            if (0x5555555555555556 * ((char *)v256[3] - (char *)v256[1]) > v191)
              v191 = 0x5555555555555556 * ((char *)v256[3] - (char *)v256[1]);
            if (0xAAAAAAAAAAAAAAABLL * ((char *)v256[3] - (char *)v256[1]) >= 0x2AAAAAAAAAAAAAAALL)
              v192 = 0x5555555555555555;
            else
              v192 = v191;
            if (v192)
            {
              if (v192 > 0x5555555555555555)
                goto LABEL_392;
              v193 = (char *)operator new(3 * v192);
            }
            else
            {
              v193 = 0;
            }
            v194 = *(_WORD *)v185;
            v195 = &v193[3 * v190];
            v195[2] = *(_BYTE *)(v185 + 2);
            *(_WORD *)v195 = v194;
            v196 = v195;
            if (v186 != v189)
            {
              do
              {
                v197 = *(_WORD *)(v186 - 3);
                v186 -= 3;
                v198 = v186[2];
                *(_WORD *)(v196 - 3) = v197;
                v196 -= 3;
                v196[2] = v198;
              }
              while (v186 != v189);
              v186 = v256[1];
            }
            v188 = v195 + 3;
            v256[1] = v196;
            v256[2] = v195 + 3;
            v256[3] = &v193[3 * v192];
            if (v186)
              operator delete(v186);
          }
          else
          {
            v187 = *(_WORD *)v185;
            *((_BYTE *)v256[2] + 2) = *(_BYTE *)(v185 + 2);
            *(_WORD *)v186 = v187;
            v188 = v186 + 3;
          }
          v256[2] = v188;
        }
        if (v242)
        {
          if (!v258)
            goto LABEL_389;
          v199 = (_DWORD *)v257;
          if ((unint64_t)v257 >= *((_QWORD *)&v257 + 1))
          {
            v202 = v256[5];
            v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v257 - (unint64_t)v256[5]) >> 2);
            v204 = v203 + 1;
            if (v203 + 1 > 0x1555555555555555)
LABEL_393:
              sub_2394189F8();
            if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v257 + 1) - (unint64_t)v256[5]) >> 2) > v204)
              v204 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v257 + 1) - (unint64_t)v256[5]) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v257 + 1) - (unint64_t)v256[5]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v205 = 0x1555555555555555;
            else
              v205 = v204;
            if (v205)
            {
              if (v205 > 0x1555555555555555)
                goto LABEL_392;
              v206 = (char *)operator new(12 * v205);
            }
            else
            {
              v206 = 0;
            }
            v207 = &v206[12 * v203];
            *(_QWORD *)v207 = v252;
            *((_DWORD *)v207 + 2) = (_DWORD)v253;
            v208 = v207;
            if (v199 != v202)
            {
              do
              {
                v209 = *(_QWORD *)(v199 - 3);
                v199 -= 3;
                v210 = v199[2];
                *(_QWORD *)(v208 - 12) = v209;
                v208 -= 12;
                *((_DWORD *)v208 + 2) = v210;
              }
              while (v199 != v202);
              v199 = v256[5];
            }
            v201 = v207 + 12;
            v256[5] = v208;
            *(_QWORD *)&v257 = v207 + 12;
            *((_QWORD *)&v257 + 1) = &v206[12 * v205];
            if (v199)
              operator delete(v199);
          }
          else
          {
            v200 = v252;
            *(_DWORD *)(v257 + 8) = (_DWORD)v253;
            *(_QWORD *)v199 = v200;
            v201 = v199 + 3;
          }
          *(_QWORD *)&v257 = v201;
        }
        if (v241)
        {
          if (!v266 || !*(_BYTE *)(v245 + 144))
            goto LABEL_389;
          v211 = *(_QWORD *)(v245 + 120);
          v212 = v264;
          if (v264 < v265)
          {
            *(_DWORD *)v264 = *(_DWORD *)(v211 + 4 * v249);
            v100 = v212 + 4;
          }
          else
          {
            v213 = (char *)v263;
            v214 = v264 - (_BYTE *)v263;
            v215 = (v264 - (_BYTE *)v263) >> 2;
            v216 = v215 + 1;
            if ((unint64_t)(v215 + 1) >> 62)
              sub_2394189F8();
            v217 = v265 - (_BYTE *)v263;
            if ((v265 - (_BYTE *)v263) >> 1 > v216)
              v216 = v217 >> 1;
            if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL)
              v218 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v218 = v216;
            if (v218)
            {
              if (v218 >> 62)
LABEL_392:
                sub_239418A80();
              v219 = (char *)operator new(4 * v218);
            }
            else
            {
              v219 = 0;
            }
            v220 = &v219[4 * v215];
            *(_DWORD *)v220 = *(_DWORD *)(v211 + 4 * v249);
            v100 = v220 + 4;
            if (v212 != v213)
            {
              v221 = v212 - 4 - v213;
              if (v221 < 0x2C)
                goto LABEL_412;
              if ((unint64_t)(v212 - &v219[v214]) < 0x20)
                goto LABEL_412;
              v222 = (v221 >> 2) + 1;
              v223 = 4 * (v222 & 0x7FFFFFFFFFFFFFF8);
              v224 = &v212[-v223];
              v220 -= v223;
              v225 = &v219[4 * v215 - 16];
              v226 = v212 - 16;
              v227 = v222 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v228 = *(_OWORD *)v226;
                *((_OWORD *)v225 - 1) = *((_OWORD *)v226 - 1);
                *(_OWORD *)v225 = v228;
                v225 -= 32;
                v226 -= 32;
                v227 -= 8;
              }
              while (v227);
              v212 = v224;
              if (v222 != (v222 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_412:
                do
                {
                  v229 = *((_DWORD *)v212 - 1);
                  v212 -= 4;
                  *((_DWORD *)v220 - 1) = v229;
                  v220 -= 4;
                }
                while (v212 != v213);
              }
            }
            v263 = v220;
            v264 = v100;
            v265 = &v219[4 * v218];
            if (v213)
              operator delete(v213);
          }
          v264 = v100;
        }
      }
      else
      {
        v165 = 0;
        v166 = 1;
        while (1)
        {
          LODWORD(v16) = 20.0;
          if (sub_2396D1F2C((uint64_t)&v164[80 * v165], v163, (float32x2_t *)&v252, 0.005, *(double *)&v16)
            && (v108 == -1 || *(_DWORD *)&v270[4 * v165] == v108))
          {
            break;
          }
          v165 = v166;
          v164 = v273;
          ++v166;
          if (0xCCCCCCCCCCCCCCCDLL * ((v274 - v273) >> 4) <= v165)
            goto LABEL_255;
        }
      }
      sub_239421038((uint64_t)&v267, v268);
      v99 = v249 + 1;
      v97 = *(_QWORD *)v245;
      if (v249 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v245 + 8) - *(_QWORD *)v245) >> 2))
        goto LABEL_343;
    }
  }
  v267 = 0;
  v268 = 0;
  v269 = 0;
  v98 = v96 - v97;
  if (v96 == v97)
  {
    v252 = 0;
    v253 = 0;
    v254 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v98 >> 2) >= 0x71C71C71C71C71DLL)
      sub_2394189F8();
    v267 = (uint64_t *)operator new(12 * (v98 >> 2));
    v268 = (uint64_t *)((char *)v267 + 12 * (v98 >> 2));
    v269 = v268;
    v252 = operator new(v98);
    v253 = (char *)v252 + v98;
    v254 = (char *)v252 + 4 * (v98 >> 2);
  }
  sub_2396E33CC((_QWORD *)v245, (uint64_t)&v267, (uint64_t)&v252, 0x64uLL, 1, 0, 0.0, 30.0);
  if (v252)
  {
    v253 = (char *)v252;
    operator delete(v252);
  }
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  v97 = *(_QWORD *)v245;
  if (*(_QWORD *)(v245 + 8) != *(_QWORD *)v245)
    goto LABEL_128;
LABEL_343:
  sub_2396DEA54(v57);
  sub_2396DEB3C(v57, (uint64_t)v255);
  sub_2396E1028(v57);
  if (v244)
  {
    if (!*(_BYTE *)(v57 + 112))
      goto LABEL_399;
    sub_2396E134C(v57 + 88);
  }
  if (v243)
  {
    if (!*(_BYTE *)(v57 + 48))
      goto LABEL_399;
    sub_2396E1254(v57 + 24);
  }
  if (v242)
  {
    if (!*(_BYTE *)(v57 + 80))
      goto LABEL_399;
    sub_2396E1028(v57 + 56);
  }
  if (!v241)
    goto LABEL_355;
  if (!*(_BYTE *)(v57 + 144))
LABEL_399:
    sub_2394875CC();
  sub_2396E112C(v57 + 120);
LABEL_355:
  if (v266 && v263)
  {
    v264 = (char *)v263;
    operator delete(v263);
  }
  if (v262)
  {
    v230 = (char *)v259;
    if (v259)
    {
      v231 = v260;
      v232 = v259;
      if (v260 != v259)
      {
        v233 = v260;
        do
        {
          v235 = (void *)*((_QWORD *)v233 - 3);
          v233 -= 24;
          v234 = v235;
          if (v235)
          {
            *((_QWORD *)v231 - 2) = v234;
            operator delete(v234);
          }
          v231 = v233;
        }
        while (v233 != v230);
        v232 = v259;
      }
      v260 = v230;
      operator delete(v232);
    }
  }
  if (v258 && v256[5])
  {
    *(void **)&v257 = v256[5];
    operator delete(v256[5]);
  }
  if (LOBYTE(v256[4]) && v256[1])
  {
    v256[2] = v256[1];
    operator delete(v256[1]);
  }
  if (v255[0])
  {
    v255[1] = v255[0];
    operator delete(v255[0]);
  }
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  v236 = v273;
  if (v273)
  {
    v237 = v274;
    v238 = v273;
    if (v274 != v273)
    {
      do
      {
        v239 = (void *)*((_QWORD *)v237 - 5);
        if (v239)
        {
          *((_QWORD *)v237 - 4) = v239;
          operator delete(v239);
        }
        v240 = (void *)*((_QWORD *)v237 - 10);
        if (v240)
        {
          *((_QWORD *)v237 - 9) = v240;
          operator delete(v240);
        }
        v237 -= 80;
      }
      while (v237 != v236);
      v238 = v273;
    }
    v274 = v236;
    operator delete(v238);
  }
  return 1;
}

void sub_2396E5D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  void *v25;
  void *v26;

  v25 = *(void **)(v23 - 176);
  if (v25)
  {
    *(_QWORD *)(v23 - 168) = v25;
    operator delete(v25);
  }
  sub_2394B6764((uint64_t)&a23);
  v26 = *(void **)(v23 - 152);
  if (v26)
  {
    *(_QWORD *)(v23 - 144) = v26;
    operator delete(v26);
  }
  sub_2396D1EAC((void **)(v23 - 128));
  _Unwind_Resume(a1);
}

void sub_2396E5E60(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;

  if (*((unsigned __int8 *)a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*((_BYTE *)a1 + 24))
    {
      v4 = *a1;
      if (*a1)
      {
        v5 = a1[1];
        v6 = *a1;
        if (v5 != v4)
        {
          v7 = a1[1];
          do
          {
            v9 = (void *)*((_QWORD *)v7 - 3);
            v7 -= 24;
            v8 = v9;
            if (v9)
            {
              *((_QWORD *)v5 - 2) = v8;
              operator delete(v8);
            }
            v5 = v7;
          }
          while (v7 != v4);
          v6 = *a1;
        }
        a1[1] = v4;
        operator delete(v6);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = *(char **)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else if (*((_BYTE *)a1 + 24))
  {
    v10 = *a1;
    if (*a1)
    {
      v11 = a1[1];
      v12 = *a1;
      if (v11 != v10)
      {
        v13 = a1[1];
        do
        {
          v15 = (void *)*((_QWORD *)v13 - 3);
          v13 -= 24;
          v14 = v15;
          if (v15)
          {
            *((_QWORD *)v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
    }
    *((_BYTE *)a1 + 24) = 0;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(char **)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *((_BYTE *)a1 + 24) = 1;
  }
}

void sub_2396E5FA4(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_2396C6DB4(a1, *(char ***)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(char **)a1;
    if (*(_QWORD *)a1)
    {
      v4 = *(char **)(a1 + 8);
      v5 = *(char **)a1;
      if (v4 != v3)
      {
        v6 = *(char **)(a1 + 8);
        do
        {
          v8 = (void *)*((_QWORD *)v6 - 3);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *((_QWORD *)v4 - 2) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v5);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    sub_2394B7184((_QWORD *)a1, (uint64_t *)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_2396E6088(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  char *v7;
  char *v8;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_23942156C((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(char **)a2;
    v4 = *(_QWORD *)(a2 + 8);
    v6 = v4 - *(_QWORD *)a2;
    if (v4 != *(_QWORD *)a2)
    {
      if (v6 < 0)
        sub_2394189F8();
      v7 = (char *)operator new(v4 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = &v7[4 * (v6 >> 2)];
      *(_QWORD *)(a1 + 16) = v8;
      memcpy(v7, v5, v6);
      *(_QWORD *)(a1 + 8) = v8;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_2396E6168(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2396E6184(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v11 = *v19;
LABEL_61:
      *v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    v28 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_2396E64A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239474998((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396E64B8()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396E64CC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_250AE3470;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2396E652C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_250AE3470;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_2396E6574(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t **v4;
  unsigned int v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  uint64_t *v17;
  float v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t *v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  __int8 *v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float v35;
  _BYTE *v36;
  uint64_t v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char **v52;
  char *v53;
  uint64_t v54;
  char **v55;
  char *v56;
  char *v57;
  float32x4_t v58;
  uint64_t v59;
  float32x2_t v60;
  uint64_t **v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t **v64;
  uint64_t **v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  float32x4_t v70;
  float32x2_t v71;
  uint64_t *v72;
  float32x2_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  float32x4_t v81;
  float32x2_t v82;
  uint64_t **v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t **v86;
  uint64_t *v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  BOOL v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  _BYTE *v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  char *v107;
  float32x4_t v108;
  float32x2_t v109;
  int8x16_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  int v114;
  int v115;
  char *v116;
  int v117;
  char *v118;
  char *v119;
  uint64_t v120;
  void **v121;
  void *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  __int8 *v130;
  float v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  __int8 *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  __int8 *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t **v151;
  float32x2_t v152;
  char **v153;
  char **v154;
  int8x16_t v155;
  uint64_t v156;
  char **v157;
  float32x4_t v158;
  void *__p;
  int v160[2];
  char *v161;

  v3 = *a2;
  v4 = (uint64_t **)sub_2396E7278(*(int8x8_t **)(a1 + 56), *(_QWORD *)(**(_QWORD **)(a1 + 40) + 8 * *a2));
  v10 = v4;
  v11 = *v4;
  v12 = **v4;
  v13 = *(uint64_t **)(a1 + 48);
  v14 = *v13;
  v15 = *v13 + 12 * v12;
  v156 = a1;
  v16 = *(_BYTE ***)(a1 + 88);
  if (*v16[3])
  {
    v17 = v4[1];
    v18 = 0.0;
    if (v11 == v17)
    {
      v27 = 0uLL;
      v25 = 0uLL;
      v24 = 0uLL;
    }
    else
    {
      v19 = *((unsigned __int8 *)v13 + 80);
      v20 = v13[7];
      v21 = *((unsigned __int8 *)v13 + 144);
      v22 = v13[15];
      if (**v16)
      {
        if (!*((_BYTE *)v13 + 48))
          goto LABEL_159;
        v23 = v13[3];
        if (*v16[1])
        {
          if (!v19)
            goto LABEL_159;
          if (*v16[2])
          {
            if (!v21)
              goto LABEL_159;
            v24 = 0uLL;
            v25 = 0uLL;
            v26 = *v4;
            v27 = 0uLL;
            do
            {
              v28 = *v26++;
              v29 = v14 + 12 * v28;
              v7.i64[0] = *(_QWORD *)v29;
              v7.i32[2] = *(_DWORD *)(v29 + 8);
              v30 = (__int8 *)(v23 + 3 * v28);
              v8.i8[0] = *v30;
              v8.f32[0] = (float)v8.u32[0];
              LOBYTE(v9) = v30[1];
              v31 = (float)LODWORD(v9);
              v8.f32[1] = v31;
              LOBYTE(v31) = v30[2];
              v9 = (float)LODWORD(v31);
              v8.f32[2] = v9;
              v24 = vaddq_f32(v24, v7);
              v7.i64[0] = *(_QWORD *)(v20 + 12 * v28);
              v7.i32[2] = *(_DWORD *)(v20 + 12 * v28 + 8);
              v27 = vaddq_f32(v27, v8);
              v25 = vaddq_f32(v25, v7);
              v18 = v18 + *(float *)(v22 + 4 * v28);
            }
            while (v26 != v17);
          }
          else
          {
            v24 = 0uLL;
            v25 = 0uLL;
            v132 = *v4;
            v27 = 0uLL;
            do
            {
              v133 = *v132++;
              v134 = v14 + 12 * v133;
              v7.i64[0] = *(_QWORD *)v134;
              v7.i32[2] = *(_DWORD *)(v134 + 8);
              v24 = vaddq_f32(v24, v7);
              v135 = (__int8 *)(v23 + 3 * v133);
              v7.i8[0] = *v135;
              v7.f32[0] = (float)v7.u32[0];
              v8.i8[0] = v135[1];
              v8.f32[0] = (float)v8.u32[0];
              LOBYTE(v9) = v135[2];
              v9 = (float)LODWORD(v9);
              v7.i32[1] = v8.i32[0];
              v7.f32[2] = v9;
              v27 = vaddq_f32(v27, v7);
              v7.i64[0] = *(_QWORD *)(v20 + 12 * v133);
              v7.i32[2] = *(_DWORD *)(v20 + 12 * v133 + 8);
              v25 = vaddq_f32(v25, v7);
            }
            while (v132 != v17);
          }
        }
        else if (*v16[2])
        {
          if (!v21)
            goto LABEL_159;
          v25 = 0uLL;
          v24 = 0uLL;
          v127 = *v4;
          v27 = 0uLL;
          do
          {
            v128 = *v127++;
            v129 = v14 + 12 * v128;
            v7.i64[0] = *(_QWORD *)v129;
            v7.i32[2] = *(_DWORD *)(v129 + 8);
            v130 = (__int8 *)(v23 + 3 * v128);
            v8.i8[0] = *v130;
            v8.f32[0] = (float)v8.u32[0];
            LOBYTE(v9) = v130[1];
            v131 = (float)LODWORD(v9);
            v8.f32[1] = v131;
            LOBYTE(v131) = v130[2];
            v9 = (float)LODWORD(v131);
            v8.f32[2] = v9;
            v24 = vaddq_f32(v24, v7);
            v27 = vaddq_f32(v27, v8);
            v18 = v18 + *(float *)(v22 + 4 * v128);
          }
          while (v127 != v17);
        }
        else
        {
          v25 = 0uLL;
          v24 = 0uLL;
          v143 = *v4;
          v27 = 0uLL;
          do
          {
            v144 = *v143++;
            v145 = v14 + 12 * v144;
            v7.i64[0] = *(_QWORD *)v145;
            v7.i32[2] = *(_DWORD *)(v145 + 8);
            v24 = vaddq_f32(v24, v7);
            v146 = (__int8 *)(v23 + 3 * v144);
            v7.i8[0] = *v146;
            v7.f32[0] = (float)v7.u32[0];
            v8.i8[0] = v146[1];
            v8.f32[0] = (float)v8.u32[0];
            LOBYTE(v9) = v146[2];
            v9 = (float)LODWORD(v9);
            v7.i32[1] = v8.i32[0];
            v7.f32[2] = v9;
            v27 = vaddq_f32(v27, v7);
          }
          while (v143 != v17);
        }
      }
      else if (*v16[1])
      {
        if (!*((_BYTE *)v13 + 80))
          goto LABEL_159;
        if (*v16[2])
        {
          if (!*((_BYTE *)v13 + 144))
            goto LABEL_159;
          v27 = 0uLL;
          v24 = 0uLL;
          v123 = *v4;
          v25 = 0uLL;
          do
          {
            v124 = *v123++;
            v125 = v14 + 12 * v124;
            v7.i64[0] = *(_QWORD *)v125;
            v7.i32[2] = *(_DWORD *)(v125 + 8);
            v126 = v20 + 12 * v124;
            v8.i64[0] = *(_QWORD *)v126;
            v8.i32[2] = *(_DWORD *)(v126 + 8);
            v24 = vaddq_f32(v24, v7);
            v25 = vaddq_f32(v25, v8);
            v18 = v18 + *(float *)(v22 + 4 * v124);
          }
          while (v123 != v17);
        }
        else
        {
          v27 = 0uLL;
          v24 = 0uLL;
          v25 = 0uLL;
          v139 = *v4;
          do
          {
            v140 = *v139++;
            v141 = v14 + 12 * v140;
            v7.i64[0] = *(_QWORD *)v141;
            v7.i32[2] = *(_DWORD *)(v141 + 8);
            v24 = vaddq_f32(v24, v7);
            v142 = v20 + 12 * v140;
            v7.i64[0] = *(_QWORD *)v142;
            v7.i32[2] = *(_DWORD *)(v142 + 8);
            v25 = vaddq_f32(v25, v7);
          }
          while (v139 != v17);
        }
      }
      else
      {
        if (*v16[2])
        {
          if (!*((_BYTE *)v13 + 144))
            goto LABEL_159;
          v27 = 0uLL;
          v24 = 0uLL;
          v136 = *v4;
          do
          {
            v137 = *v136++;
            v138 = v14 + 12 * v137;
            v6.i64[0] = *(_QWORD *)v138;
            v6.i32[2] = *(_DWORD *)(v138 + 8);
            v24 = vaddq_f32(v24, v6);
            v18 = v18 + *(float *)(v22 + 4 * v137);
          }
          while (v136 != v17);
        }
        else
        {
          v27 = 0uLL;
          v24 = 0uLL;
          v147 = *v4;
          do
          {
            v148 = *v147++;
            v149 = v14 + 12 * v148;
            v6.i64[0] = *(_QWORD *)v149;
            v6.i32[2] = *(_DWORD *)(v149 + 8);
            v24 = vaddq_f32(v24, v6);
          }
          while (v147 != v17);
        }
        v25 = 0uLL;
      }
    }
    v8.f32[0] = (float)(unint64_t)(v17 - v11);
    v39 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 0);
    v32 = vdivq_f32(v24, v39);
    v40 = vdivq_f32(v27, v39);
    v34 = vcvt_f32_u32((uint32x2_t)vcvt_s32_f32(*(float32x2_t *)v40.f32));
    v35 = (float)(int)v40.f32[2];
    v41 = vdivq_f32(v25, v39);
    v39.i64[0] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    v33 = vmulq_n_f32(v41, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.f32, 1), *(float32x2_t *)v41.f32, 1), *(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32).f32[0]));
    v38 = v18 / v8.f32[0];
  }
  else
  {
    v32.i64[0] = *(_QWORD *)v15;
    v32.i32[2] = *(_DWORD *)(v15 + 8);
    v33.i64[0] = 0;
    v33.i32[2] = 0;
    v34 = 0;
    v35 = 0.0;
    if (**v16)
    {
      if (!*((_BYTE *)v13 + 48))
        goto LABEL_159;
      v36 = (_BYTE *)(v13[3] + 3 * v12);
      LOBYTE(v5) = *v36;
      v34.f32[0] = (float)v5;
      LOBYTE(v5) = v36[1];
      v6.i8[0] = v36[2];
      v34.f32[1] = (float)v5;
      v35 = (float)v6.u32[0];
    }
    if (*v16[1])
    {
      if (!*((_BYTE *)v13 + 80))
        goto LABEL_159;
      v37 = v13[7] + 12 * v12;
      v33.i64[0] = *(_QWORD *)v37;
      v33.i32[2] = *(_DWORD *)(v37 + 8);
    }
    if (*v16[2])
    {
      if (!*((_BYTE *)v13 + 144))
        goto LABEL_159;
      v38 = *(float *)(v13[15] + 4 * v12);
    }
    else
    {
      v38 = 0.0;
    }
  }
  v42 = **(_QWORD **)(a1 + 64) + 12 * v3;
  *(_QWORD *)v42 = v32.i64[0];
  *(_DWORD *)(v42 + 8) = v32.i32[2];
  if (**(_BYTE **)(a1 + 8))
  {
    v43 = *(_QWORD *)(a1 + 64);
    if (!*(_BYTE *)(v43 + 48))
      goto LABEL_159;
    v44 = (_BYTE *)(*(_QWORD *)(v43 + 24) + 3 * v3);
    *v44 = (int)v34.f32[0];
    v44[1] = (int)v34.f32[1];
    v44[2] = (int)v35;
  }
  if (**(_BYTE **)(a1 + 16))
  {
    v45 = *(_QWORD *)(a1 + 64);
    if (!*(_BYTE *)(v45 + 80))
      goto LABEL_159;
    v46 = *(_QWORD *)(v45 + 56) + 12 * v3;
    *(_QWORD *)v46 = v33.i64[0];
    *(_DWORD *)(v46 + 8) = v33.i32[2];
  }
  if (!**(_BYTE **)(a1 + 24))
    goto LABEL_32;
  v47 = *(_QWORD *)(a1 + 64);
  if (!*(_BYTE *)(v47 + 144))
LABEL_159:
    sub_2394875CC();
  *(float *)(*(_QWORD *)(v47 + 120) + 4 * v3) = v38;
LABEL_32:
  if (!**(_BYTE **)(a1 + 32))
    return;
  __p = operator new(0x80uLL);
  *(_QWORD *)v160 = __p;
  v161 = (char *)__p + 128;
  v49 = *(_QWORD *)(a1 + 48);
  if (!*(_BYTE *)(v49 + 112))
LABEL_160:
    sub_2394875CC();
  v150 = v3;
  v50 = **v10;
  v51 = *(_QWORD *)(v49 + 88);
  v52 = (char **)(v51 + 24 * v50);
  if (&__p != (void **)v52)
    sub_23942156C(&__p, *v52, *(char **)(v51 + 24 * v50 + 8), (uint64_t)(*(_QWORD *)(v51 + 24 * v50 + 8) - (_QWORD)*v52) >> 2);
  v53 = *v52;
  v54 = v51 + 24 * v50;
  v57 = *(char **)(v54 + 8);
  v55 = (char **)(v54 + 8);
  v56 = v57;
  v151 = v10;
  if (*v52 == v57)
  {
    v155 = 0u;
    v59 = v156;
    v72 = *v10;
    if ((unint64_t)((char *)v10[1] - (char *)*v10) < 9)
      goto LABEL_107;
    goto LABEL_55;
  }
  v157 = v55;
  v58.i32[3] = 0;
  v155 = 0u;
  v59 = v156;
  do
  {
    v61 = *(uint64_t ***)(v156 + 72);
    v62 = *(unsigned int *)v53;
    v64 = v61 + 1;
    v63 = v61[1];
    if (v63)
    {
      while (1)
      {
        while (1)
        {
          v65 = (uint64_t **)v63;
          v66 = v63[4];
          if (v66 <= v62)
            break;
          v63 = *v65;
          v64 = v65;
          if (!*v65)
            goto LABEL_47;
        }
        if (v66 >= v62)
          break;
        v63 = v65[1];
        if (!v63)
        {
          v64 = v65 + 1;
          goto LABEL_47;
        }
      }
      v67 = (uint64_t *)v65;
    }
    else
    {
      v65 = v61 + 1;
LABEL_47:
      v67 = (uint64_t *)operator new(0x38uLL);
      v67[4] = v62;
      *v67 = 0;
      v67[1] = 0;
      v67[2] = (uint64_t)v65;
      *v64 = v67;
      v68 = (uint64_t *)**v61;
      v69 = v67;
      if (v68)
      {
        *v61 = v68;
        v69 = *v64;
      }
      sub_2394213B8(v61[1], v69);
      v61[2] = (uint64_t *)((char *)v61[2] + 1);
    }
    v58.i64[0] = *(_QWORD *)v15;
    v58.i32[2] = *(_DWORD *)(v15 + 8);
    v48.i64[0] = v67[5];
    v48.i32[2] = *((_DWORD *)v67 + 12);
    v58 = vsubq_f32(v58, v48);
    v60 = (float32x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
    v155 = vmlaq_n_f32(v155, v58, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.f32, 1), *(float32x2_t *)v58.f32, 1), v60, v60).f32[0]));
    v53 += 4;
  }
  while (v53 != v56);
  if (*v52 != *v157)
  {
    v58.f32[0] = (float)(unint64_t)((*v157 - *v52) >> 2);
    v48.i32[3] = v155.i32[3];
    v70 = vdivq_f32(v155, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 0));
    v71 = (float32x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
    v155 = vmulq_n_f32(v70, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.f32, 1), *(float32x2_t *)v70.f32, 1), v71, v71).f32[0]));
  }
  v10 = v151;
  v72 = *v151;
  if ((unint64_t)((char *)v151[1] - (char *)*v151) >= 9)
  {
LABEL_55:
    v73 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v155.f32, 1);
    v152 = (float32x2_t)vextq_s8((int8x16_t)v155, (int8x16_t)v155, 8uLL).u64[0];
    v74 = 1;
    do
    {
      v75 = *(_QWORD *)(v59 + 48);
      if (!*(_BYTE *)(v75 + 112))
        sub_2394875CC();
      v76 = v72[v74];
      v77 = *(_QWORD *)(v75 + 88) + 24 * v76;
      v78 = *(char **)v77;
      v154 = (char **)v77;
      v79 = *(char **)(v77 + 8);
      v153 = (char **)(v77 + 8);
      if (*(char **)v77 == v79)
      {
        v110 = 0uLL;
        v107 = *(char **)v77;
      }
      else
      {
        v80 = *(_QWORD *)v75 + 12 * v76;
        v81.i32[3] = 0;
        v158 = 0u;
        do
        {
          v83 = *(uint64_t ***)(v59 + 72);
          v84 = *(unsigned int *)v78;
          v86 = v83 + 1;
          v85 = v83[1];
          v87 = (uint64_t *)(v83 + 1);
          v88 = (uint64_t *)(v83 + 1);
          if (v85)
          {
            while (1)
            {
              while (1)
              {
                v88 = v85;
                v89 = v85[4];
                if (v89 <= v84)
                  break;
                v85 = (uint64_t *)*v88;
                v87 = v88;
                if (!*v88)
                  goto LABEL_72;
              }
              if (v89 >= v84)
                break;
              v85 = (uint64_t *)v88[1];
              if (!v85)
              {
                v87 = v88 + 1;
                goto LABEL_72;
              }
            }
            v90 = v88;
          }
          else
          {
LABEL_72:
            v90 = (uint64_t *)operator new(0x38uLL);
            v90[4] = v84;
            *v90 = 0;
            v90[1] = 0;
            v90[2] = (uint64_t)v88;
            *v87 = (uint64_t)v90;
            v91 = (uint64_t *)**v83;
            v92 = v90;
            if (v91)
            {
              *v83 = v91;
              v92 = (uint64_t *)*v87;
            }
            v93 = *v86;
            v94 = v92 == *v86;
            *((_BYTE *)v92 + 24) = v94;
            if (!v94)
            {
              do
              {
                v95 = v92[2];
                if (*(_BYTE *)(v95 + 24))
                  break;
                v96 = *(uint64_t **)(v95 + 16);
                v97 = *v96;
                if (*v96 == v95)
                {
                  v100 = v96[1];
                  if (!v100 || (v101 = *(unsigned __int8 *)(v100 + 24), v98 = (_BYTE *)(v100 + 24), v101))
                  {
                    if (*(uint64_t **)v95 == v92)
                    {
                      *(_BYTE *)(v95 + 24) = 1;
                      *((_BYTE *)v96 + 24) = 0;
                      v104 = *(_QWORD *)(v95 + 8);
                      *v96 = v104;
                      if (v104)
                        goto LABEL_89;
                    }
                    else
                    {
                      v102 = *(uint64_t **)(v95 + 8);
                      v103 = *v102;
                      *(_QWORD *)(v95 + 8) = *v102;
                      if (v103)
                      {
                        *(_QWORD *)(v103 + 16) = v95;
                        v96 = *(uint64_t **)(v95 + 16);
                      }
                      v102[2] = (uint64_t)v96;
                      *(_QWORD *)(*(_QWORD *)(v95 + 16) + 8 * (**(_QWORD **)(v95 + 16) != v95)) = v102;
                      *v102 = v95;
                      *(_QWORD *)(v95 + 16) = v102;
                      v96 = (uint64_t *)v102[2];
                      v95 = *v96;
                      *((_BYTE *)v102 + 24) = 1;
                      *((_BYTE *)v96 + 24) = 0;
                      v104 = *(_QWORD *)(v95 + 8);
                      *v96 = v104;
                      if (v104)
LABEL_89:
                        *(_QWORD *)(v104 + 16) = v96;
                    }
                    *(_QWORD *)(v95 + 16) = v96[2];
                    *(_QWORD *)(v96[2] + 8 * (*(_QWORD *)v96[2] != (_QWORD)v96)) = v95;
                    *(_QWORD *)(v95 + 8) = v96;
LABEL_62:
                    v96[2] = v95;
                    break;
                  }
                }
                else if (!v97 || (v99 = *(unsigned __int8 *)(v97 + 24), v98 = (_BYTE *)(v97 + 24), v99))
                {
                  if (*(uint64_t **)v95 == v92)
                  {
                    v106 = v92[1];
                    *(_QWORD *)v95 = v106;
                    if (v106)
                    {
                      *(_QWORD *)(v106 + 16) = v95;
                      v96 = *(uint64_t **)(v95 + 16);
                    }
                    v92[2] = (uint64_t)v96;
                    *(_QWORD *)(*(_QWORD *)(v95 + 16) + 8 * (**(_QWORD **)(v95 + 16) != v95)) = v92;
                    v92[1] = v95;
                    *(_QWORD *)(v95 + 16) = v92;
                    v96 = (uint64_t *)v92[2];
                    *((_BYTE *)v92 + 24) = 1;
                    *((_BYTE *)v96 + 24) = 0;
                    v95 = v96[1];
                    v105 = *(uint64_t **)v95;
                    v96[1] = *(_QWORD *)v95;
                    if (!v105)
                      goto LABEL_61;
                  }
                  else
                  {
                    *(_BYTE *)(v95 + 24) = 1;
                    *((_BYTE *)v96 + 24) = 0;
                    v95 = v96[1];
                    v105 = *(uint64_t **)v95;
                    v96[1] = *(_QWORD *)v95;
                    if (!v105)
                      goto LABEL_61;
                  }
                  v105[2] = (uint64_t)v96;
LABEL_61:
                  *(_QWORD *)(v95 + 16) = v96[2];
                  *(_QWORD *)(v96[2] + 8 * (*(_QWORD *)v96[2] != (_QWORD)v96)) = v95;
                  *(_QWORD *)v95 = v96;
                  goto LABEL_62;
                }
                *(_BYTE *)(v95 + 24) = 1;
                v92 = v96;
                *((_BYTE *)v96 + 24) = v96 == v93;
                *v98 = 1;
              }
              while (v96 != v93);
            }
            v83[2] = (uint64_t *)((char *)v83[2] + 1);
          }
          v81.i64[0] = *(_QWORD *)v80;
          v81.i32[2] = *(_DWORD *)(v80 + 8);
          v48.i64[0] = v90[5];
          v48.i32[2] = *((_DWORD *)v90 + 12);
          v81 = vsubq_f32(v81, v48);
          v82 = (float32x2_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
          v158 = vmlaq_n_f32(v158, v81, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.f32, 1), *(float32x2_t *)v81.f32, 1), v82, v82).f32[0]));
          v78 += 4;
          v59 = v156;
        }
        while (v78 != v79);
        v78 = *v154;
        v107 = *v153;
        v10 = v151;
        if (*v154 == *v153)
        {
          v107 = *v154;
          v110 = (int8x16_t)v158;
        }
        else
        {
          v81.f32[0] = (float)(unint64_t)((v107 - v78) >> 2);
          v108 = vdivq_f32(v158, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 0));
          v109 = (float32x2_t)vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL).u64[0];
          v110 = (int8x16_t)vmulq_n_f32(v108, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.f32, 1), *(float32x2_t *)v108.f32, 1), v109, v109).f32[0]));
        }
      }
      if (cos((float)(**(float **)(v59 + 80) / 180.0) * 3.14159265) < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v110.i8), v73, *(float32x2_t *)v110.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL), v152).f32[0])sub_2394F33F0((unint64_t *)&__p, *(void **)v160, v78, v107, (v107 - v78) >> 2);
      ++v74;
      v72 = *v10;
    }
    while (v74 < v10[1] - *v10);
  }
LABEL_107:
  sub_23950DB64((uint64_t)&__p);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v111 = *(char **)v160;
  if (__p == *(void **)v160)
  {
    v113 = v150;
  }
  else
  {
    v112 = (char *)__p + 4;
    v113 = v150;
    while (v112 != *(char **)v160)
    {
      v114 = *((_DWORD *)v112 - 1);
      v115 = *(_DWORD *)v112;
      v112 += 4;
      if (v114 == v115)
      {
        v116 = v112 - 8;
        while (v112 != v111)
        {
          v117 = v114;
          v114 = *(_DWORD *)v112;
          if (v117 != *(_DWORD *)v112)
          {
            *((_DWORD *)v116 + 1) = v114;
            v116 += 4;
          }
          v112 += 4;
        }
        v118 = v116 + 4;
        v119 = (char *)(v111 - (v116 + 4));
        if (v111 != v116 + 4)
        {
          if (v111 != &v119[(_QWORD)v118])
            memmove(v116 + 4, &v119[(_QWORD)v118], 0);
          v111 = v118;
          *(_QWORD *)v160 = v118;
        }
        break;
      }
    }
  }
  v120 = *(_QWORD *)(v156 + 64);
  if (!*(_BYTE *)(v120 + 112))
    goto LABEL_160;
  v121 = (void **)(*(_QWORD *)(v120 + 88) + 24 * v113);
  v122 = __p;
  if (v121 != &__p)
  {
    sub_23942156C(v121, (char *)__p, v111, (v111 - (_BYTE *)__p) >> 2);
    v122 = __p;
  }
  if (v122)
  {
    *(_QWORD *)v160 = v122;
    operator delete(v122);
  }
}

void sub_2396E724C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2396E7278(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2;
  int8x8_t *v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t *v13;

  v12 = a2;
  v2 = a1[8];
  if (!*(_QWORD *)&v2)
    goto LABEL_22;
  v3 = a1 + 7;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v5 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v6 = *(_QWORD **)(*(_QWORD *)v3 + 8 * v5);
  if (!v6 || (v7 = (_QWORD *)*v6) == 0)
LABEL_22:
    sub_239EC0B10();
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (v7[2] == a2)
          goto LABEL_21;
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_22;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
    if (v9 != v5)
      goto LABEL_22;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      goto LABEL_22;
  }
  if (v7[2] != a2)
    goto LABEL_11;
LABEL_21:
  v13 = &v12;
  return sub_239475984((uint64_t)v3, &v12, (uint64_t)&unk_239EC6E98, (uint64_t **)&v13) + 3;
}

void sub_2396E7394()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396E73A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE34B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2396E73E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE34B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float32x4_t sub_2396E7400(uint64_t a1, _QWORD *a2, double a3, float32x2_t a4, float32x4_t a5, float32x2_t a6, double a7, float32x2_t a8, double a9)
{
  uint64_t v9;
  float32x2_t *v10;
  float32x4_t result;
  float32x4_t v12;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = (float32x2_t *)(**(_QWORD **)(a1 + 8) + 12 * *a2);
  a4.i32[0] = *(_DWORD *)(v9 + 12);
  a6.i32[0] = *(_DWORD *)(v9 + 24);
  a8.i32[0] = *(_DWORD *)(v9 + 36);
  LODWORD(a9) = v10[1].i32[0];
  *(float32x2_t *)result.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v9 + 4), COERCE_FLOAT(*v10)), *(float32x2_t *)(v9 + 16), *v10, 1), *(float32x2_t *)(v9 + 28), *(float *)&a9);
  *(float32x2_t *)&result.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a4, *v10), a6, *v10, 1), *(float32x2_t *)&a9, a8);
  a5.i64[0] = *(_QWORD *)(v9 + 40);
  a5.i32[2] = *(_DWORD *)(v9 + 48);
  v12 = vmlaq_n_f32(a5, result, *(float *)v9);
  v10[1].i32[0] = v12.i32[2];
  *v10 = *(float32x2_t *)v12.f32;
  return result;
}

void sub_2396E7480()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396E7494(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE3500;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2396E74CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE3500;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float32x2_t sub_2396E74EC(uint64_t a1, _QWORD *a2, double a3, float32x2_t a4, double a5, float32x2_t a6, double a7, float32x2_t a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  float32x2_t *v11;
  float32x2_t result;
  unsigned __int32 v13;

  v9 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v9 + 80))
    sub_2394875CC();
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (float32x2_t *)(*(_QWORD *)(v9 + 56) + 12 * *a2);
  a4.i32[0] = *(_DWORD *)(v10 + 12);
  a6.i32[0] = *(_DWORD *)(v10 + 24);
  a8.i32[0] = *(_DWORD *)(v10 + 36);
  LODWORD(a9) = v11[1].i32[0];
  result = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v10 + 4), COERCE_FLOAT(*v11)), *(float32x2_t *)(v10 + 16), *v11, 1), *(float32x2_t *)(v10 + 28), *(float *)&a9);
  v13 = vmla_f32(vmla_lane_f32(vmul_f32(a4, *v11), a6, *v11, 1), *(float32x2_t *)&a9, a8).u32[0];
  *v11 = result;
  v11[1].i32[0] = v13;
  return result;
}

float32x4_t sub_2396E7568@<Q0>(_DWORD *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>, float32x4_t result@<Q0>, int8x16_t a5@<Q2>)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v11;
  float32_t v12;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x4_t v47;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = v7 * v7;
  if (fabsf(*a2) <= fabsf(v6))
  {
    v11 = 1.0 / sqrtf(v8 + (float)(v6 * v6));
    v12 = v7 * v11;
    *(float *)a5.i32 = -(float)(v6 * v11);
    _Q1.i32[0] = 0;
    _Q1.i32[3] = 0;
    _Q1.f32[1] = v12;
  }
  else
  {
    v9 = 1.0 / sqrtf(v8 + (float)(v5 * v5));
    *(float *)a5.i32 = v5 * v9;
    _Q1.i32[1] = 0;
    _Q1.i32[3] = 0;
    _Q1.f32[0] = -(float)(v7 * v9);
  }
  _Q1.i32[2] = a5.i32[0];
  a5.i64[0] = *(_QWORD *)a2;
  a5.i32[2] = (__int32)a2[2];
  _Q2 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(a5, a5, 0xCuLL), a5, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), (int8x16_t)_Q1, 0xCuLL)), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a5, (int32x4_t)a5), a5, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 0xCuLL), (int8x16_t)_Q1, 8uLL)));
  _S7 = a1[6];
  _S16 = a1[7];
  __asm
  {
    FMLA            S6, S7, V1.S[2]
    FMLA            S17, S16, V1.S[2]
  }
  _S19 = a1[8];
  __asm
  {
    FMLA            S18, S19, V1.S[2]
    FMLA            S20, S7, V2.S[2]
    FMLA            S5, S16, V2.S[2]
    FMLA            S16, S19, V2.S[2]
    FMLA            S4, S18, V1.S[2]
    FMLA            S3, S16, V1.S[2]
    FMLA            S6, S16, V2.S[2]
  }
  v30 = vabds_f32(_S4, result.f32[0]);
  v31 = fabsf(_S3);
  v32 = vabds_f32(_S6, result.f32[0]);
  if (v30 < v32)
  {
    if (v32 >= v31)
      v33 = v32;
    else
      v33 = v31;
    if (v33 > 0.0)
    {
      v34 = _S6 - result.f32[0];
      v35 = 1.0 / sqrtf((float)((float)(v34 / _S3) * (float)(v34 / _S3)) + 1.0);
      v36 = (float)(v34 / _S3) * v35;
      v37 = _S3 / v34;
      v38 = 1.0 / sqrtf((float)(v37 * v37) + 1.0);
      v39 = v37 * v38;
      if (v32 < v31)
      {
        v38 = v36;
        v39 = v35;
      }
      result = vmulq_n_f32(_Q2, v39);
      _Q1 = vsubq_f32(vmulq_n_f32(_Q1, v38), result);
    }
    goto LABEL_12;
  }
  if (v30 >= v31)
    v40 = v30;
  else
    v40 = v31;
  if (v40 <= 0.0)
  {
LABEL_12:
    *(_DWORD *)(a3 + 8) = _Q1.i32[2];
    *(_QWORD *)a3 = _Q1.i64[0];
    return result;
  }
  v41 = _S4 - result.f32[0];
  v42 = 1.0 / sqrtf((float)((float)(v41 / _S3) * (float)(v41 / _S3)) + 1.0);
  v43 = (float)(v41 / _S3) * v42;
  v44 = _S3 / v41;
  v45 = 1.0 / sqrtf((float)(v44 * v44) + 1.0);
  v46 = v44 * v45;
  if (v30 < v31)
  {
    v46 = v42;
    v45 = v43;
  }
  result = vmulq_n_f32(_Q1, v46);
  v47 = vsubq_f32(result, vmulq_n_f32(_Q2, v45));
  *(_DWORD *)(a3 + 8) = v47.i32[2];
  *(_QWORD *)a3 = v47.i64[0];
  return result;
}

void sub_2396E7764(void **a1, unint64_t a2, uint64_t *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = &v7[12 * a2];
      v14 = 12 * a2;
      do
      {
        v15 = *a3;
        *((_DWORD *)v7 + 2) = *((_DWORD *)a3 + 2);
        *(_QWORD *)v7 = v15;
        v7 += 12;
        v14 -= 12;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555)
      sub_2394189F8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x1555555555555555)
        sub_239418A80();
      v12 = (char *)operator new(12 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[12 * v8];
    v17 = 12 * a2;
    v18 = &v16[12 * a2];
    v19 = v16;
    do
    {
      v20 = *a3;
      *((_DWORD *)v19 + 2) = *((_DWORD *)a3 + 2);
      *(_QWORD *)v19 = v20;
      v19 += 12;
      v17 -= 12;
    }
    while (v17);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_QWORD *)(v7 - 12);
        v7 -= 12;
        v23 = *((_DWORD *)v7 + 2);
        *(_QWORD *)(v16 - 12) = v22;
        v16 -= 12;
        *((_DWORD *)v16 + 2) = v23;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[12 * v11];
    if (v7)
      operator delete(v7);
  }
}

void sub_2396E78FC()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396E7910(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AE3548;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2396E7948(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE3548;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2396E7968(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x2_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14[2];
  int v15;

  v3 = *a2;
  v4 = **(_QWORD **)(a1 + 8) + 36 * *a2;
  v5 = *(float32x4_t *)v4;
  v6 = *(float32x4_t *)(v4 + 16);
  v15 = *(_DWORD *)(v4 + 32);
  v14[0] = v5;
  v14[1] = v6;
  sub_2396E2798(v14, (uint64_t)&v13, v6);
  v7 = (int8x16_t)v13;
  v8 = (float32x2_t)vextq_s8(v7, v7, 8uLL).u64[0];
  v9 = vmulq_n_f32(v13, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.f32, 1), *(float32x2_t *)v13.f32, 1), v8, v8).f32[0]));
  v13.i32[2] = v9.i32[2];
  v13.i64[0] = v9.i64[0];
  v10 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v10 + 80))
    sub_2394875CC();
  v11 = *(_QWORD *)(v10 + 56) + 12 * v3;
  v12 = v13.i64[0];
  *(_DWORD *)(v11 + 8) = v13.i32[2];
  *(_QWORD *)v11 = v12;
}

void sub_2396E7A2C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396E7A40(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_250AE3590;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_2396E7A88(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250AE3590;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_2396E7AB8(_QWORD **a1, uint64_t *a2, int8x16_t a3, double a4, double a5, double a6, double a7, int32x4_t _Q5)
{
  int32x4_t v8;
  int32x4_t v9;
  uint64_t v11;
  char **v12;
  char *v13;
  char *v14;
  int8x16_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float v21;
  char *v22;
  float v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  float32x2_t *v28;
  float32x2_t *v29;
  float v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  uint64_t v38;
  float32x2_t *v39;
  float32x4_t v40;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x2_t v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 result;
  uint64_t v62;
  uint64_t v63;
  int32x4_t v64;
  int v65;
  __n128 v66;
  float32x4_t v67;
  __int32 v68;
  int8x16_t v69;
  uint64_t v70;
  int v71;

  v11 = *a2;
  v12 = (char **)(*a1[2] + 24 * *a2);
  v14 = *v12;
  v13 = v12[1];
  v15 = 0uLL;
  _S8 = 0;
  if (*v12 == v13)
  {
    LODWORD(v19) = 0;
    a3.i64[0] = 0;
    _S3 = 0.0;
    v21 = 0.0;
    v20 = 0uLL;
    goto LABEL_9;
  }
  v17 = *a1[1];
  v18 = v13 - v14 - 8;
  if (v18 < 8)
  {
    LODWORD(v19) = 0;
    a3.i64[0] = 0;
    v20 = 0uLL;
    v21 = 0.0;
    v22 = v14;
    v23 = 0.0;
    do
    {
LABEL_8:
      v38 = *(_QWORD *)v22;
      v22 += 8;
      v39 = (float32x2_t *)(v17 + 12 * v38);
      *(float32x2_t *)_Q5.i8 = *v39;
      v40 = (float32x4_t)vzip1q_s32(_Q5, _Q5);
      v40.i32[2] = (__int32)*v39;
      *(float32x2_t *)a3.i8 = vadd_f32(*(float32x2_t *)a3.i8, *v39);
      *(float32x2_t *)_Q16.f32 = *v39;
      _Q16.i32[2] = v39[1].i32[0];
      _Q16.i32[3] = HIDWORD(*(unint64_t *)v39);
      v21 = v21 + _Q16.f32[2];
      v20 = vmlaq_f32(v20, _Q16, v40);
      __asm { FMLA            S3, S7, V5.S[1] }
      v23 = v23 + (float)(_Q16.f32[2] * _Q16.f32[2]);
      LODWORD(v19) = v19 + 1;
    }
    while (v22 != v13);
    goto LABEL_9;
  }
  v19 = 0;
  v25 = (v18 >> 3) + 1;
  v26 = v25 & 0x3FFFFFFFFFFFFFFELL;
  v22 = &v14[8 * (v25 & 0x3FFFFFFFFFFFFFFELL)];
  a3.i64[0] = 0;
  v20 = 0uLL;
  v21 = 0.0;
  _S3 = 0.0;
  v23 = 0.0;
  do
  {
    v27 = &v14[8 * v19];
    v28 = (float32x2_t *)(v17 + 12 * *(_QWORD *)v27);
    v29 = (float32x2_t *)(v17 + 12 * *((_QWORD *)v27 + 1));
    v30 = v28[1].f32[0];
    v31 = v29[1].f32[0];
    *(float32x2_t *)v8.i8 = *v28;
    v32 = (float32x4_t)vzip1q_s32(v8, vrev64q_s32(v8));
    *(float32x2_t *)v9.i8 = *v29;
    v33 = (float32x4_t)vzip1q_s32(v9, vrev64q_s32(v9));
    v34.i64[0] = v32.i64[0];
    v34.i64[1] = __PAIR64__(LODWORD(v30), v32.u32[0]);
    v35 = (int32x4_t)vmulq_f32(v32, v34);
    v36.i64[0] = v33.i64[0];
    v36.i64[1] = __PAIR64__(LODWORD(v31), v33.u32[0]);
    v21 = (float)(v21 + v30) + v31;
    v37 = (int32x4_t)vmulq_f32(v33, v36);
    *(float32x2_t *)a3.i8 = vadd_f32(vadd_f32(*(float32x2_t *)a3.i8, *v28), *v29);
    v20 = vaddq_f32(vaddq_f32(v20, (float32x4_t)vuzp1q_s32(v35, (int32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL))), (float32x4_t)vuzp1q_s32(v37, (int32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 0xCuLL)));
    _S3 = (float)(_S3 + vmuls_lane_f32(v30, *v28, 1)) + vmuls_lane_f32(v31, *v29, 1);
    v23 = (float)(v23 + (float)(v30 * v30)) + (float)(v31 * v31);
    v19 += 2;
  }
  while (v26 != v19);
  if (v25 != v26)
    goto LABEL_8;
LABEL_9:
  _S6 = 0;
  _Q5 = 0uLL;
  if (v19 >= 3)
  {
    *(float *)&a3.i32[2] = v21;
    v48 = (float32x4_t)vextq_s8((int8x16_t)v20, a3, 4uLL);
    a3.i32[3] = v20.i32[0];
    v48.f32[3] = _S3;
    v20.f32[0] = (float)(int)v19;
    v49 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 0);
    v50 = (int32x4_t)vdivq_f32(v48, v49);
    _Q5 = (int32x4_t)vdivq_f32((float32x4_t)a3, v49);
    _Q0 = (float32x4_t)vzip1q_s32(_Q5, _Q5);
    __asm { FMLS            S8, S5, V0.S[0] }
    _S1 = _Q5.i32[2];
    __asm { FMLS            S6, S1, V5.S[2] }
    v53 = (int32x4_t)vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 0xCuLL);
    v54.i64[0] = vrev64q_s32(v50).u64[0];
    v54.i64[1] = v50.i64[1];
    v15 = (int8x16_t)vmlsq_f32(v54, (float32x4_t)vzip2q_s32(vtrn1q_s32(_Q5, v53), v53), _Q0);
  }
  v64 = (int32x4_t)v15;
  v65 = _S6;
  v66 = (__n128)_Q5;
  v67.i32[3] = _S8;
  v68 = v15.i32[1];
  v69 = v15;
  v55 = (float32x4_t)v15;
  v55.i32[1] = vextq_s8(v15, v15, 8uLL).i32[1];
  v70 = v55.i64[0];
  v71 = _S6;
  sub_2396E2798((float32x4_t *)((char *)&v67.u64[1] + 4), (uint64_t)&v67, v55);
  v56 = (int8x16_t)v67;
  v57 = (float32x2_t)vextq_s8(v56, v56, 8uLL).u64[0];
  v58 = vmulq_n_f32(v67, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.f32, 1), *(float32x2_t *)v67.f32, 1), v57, v57).f32[0]));
  v67.i32[2] = v58.i32[2];
  v67.i64[0] = v58.i64[0];
  v59 = *a1[4] + 36 * v11;
  *(_DWORD *)v59 = _S8;
  *(int8x16_t *)(v59 + 4) = vextq_s8((int8x16_t)vzip1q_s32(v64, v64), (int8x16_t)v64, 0xCuLL);
  *(_DWORD *)(v59 + 28) = v64.i32[3];
  *(_QWORD *)(v59 + 20) = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 0xCuLL).u64[0];
  *(_DWORD *)(v59 + 32) = v65;
  v60 = *a1[5] + 12 * v11;
  result = v66;
  *(_QWORD *)v60 = v66.n128_u64[0];
  *(_DWORD *)(v60 + 8) = v66.n128_u32[2];
  v62 = v67.i64[0];
  v63 = *a1[3] + 12 * v11;
  *(_DWORD *)(v63 + 8) = v67.i32[2];
  *(_QWORD *)v63 = v62;
  return result;
}

void sub_2396E7DD8()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396E7DEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_250AE35D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_2396E7E34(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250AE35D8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2396E7E64(uint64_t a1, uint64_t *a2, float32x4_t _Q0, float32x4_t a4, double a5, float32x2_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, float32x4_t a13, float32x4_t a14, unsigned __int32 a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  int32x2_t *v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  float32x4_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  char *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  float *v57;
  float *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  float *v64;
  float v65;
  float v66;
  int32x4_t v69;
  float32x4_t v70;
  unsigned __int32 v71;
  float32x4_t v78;
  float32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float32x2_t v86;
  float32x4_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int32x2_t v92;
  float32x2_t v93;
  float32x4_t v94;
  _QWORD *v95;
  char *vars0;
  char *vars8;

  v15 = *a2;
  v95 = 0;
  vars0 = 0;
  vars8 = 0;
  v16 = **(_QWORD **)(a1 + 16) + 24 * v15;
  v17 = *(uint64_t **)v16;
  v18 = *(uint64_t **)(v16 + 8);
  if (*(uint64_t **)v16 == v18)
  {
    v19 = 0;
    LODWORD(v43) = 0;
    v53 = 0.0;
    v52 = 0.0;
    v51 = 0.0;
    v50 = 0.0;
    v49 = 0.0;
    v48 = 0.0;
    v47 = 0.0;
    v45 = 0.0;
    v44 = 0.0;
    goto LABEL_44;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v90 = v15;
  v91 = a1;
  v22 = (int32x2_t *)(**(_QWORD **)(a1 + 32) + 12 * v15);
  a6.i32[0] = v22[1].i32[0];
  v23 = (float32x2_t)*v22;
  v24 = (float32x2_t)vdup_lane_s32(*v22, 1);
  v92 = *v22;
  v93 = a6;
  do
  {
    v26 = *v17;
    v27 = (float32x2_t *)(**(_QWORD **)(a1 + 32) + 12 * *v17);
    _Q0.i32[0] = v27[1].i32[0];
    *(float32x2_t *)a4.f32 = *v27;
    if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(v23, *v27), v24, *v27, 1), *(float32x2_t *)_Q0.f32, a6).f32[0]) > **(float **)(a1 + 24))
    {
      if (v19 < v20)
      {
        *(_QWORD *)v19 = v26;
        v25 = (uint64_t)(v19 + 8);
LABEL_4:
        vars0 = (char *)v25;
        v19 = (char *)v25;
        goto LABEL_5;
      }
      v28 = (v19 - v21) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        sub_2394189F8();
      if ((v20 - v21) >> 2 > v29)
        v29 = (v20 - v21) >> 2;
      if ((unint64_t)(v20 - v21) >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
      {
        if (v30 >> 61)
          sub_239418A80();
        v31 = operator new(8 * v30);
        v23 = (float32x2_t)v92;
        a6 = v93;
        v32 = &v31[8 * v28];
        *v32 = v26;
        v25 = (uint64_t)(v32 + 1);
        if (v19 != v21)
        {
LABEL_17:
          v33 = v19 - 8 - v21;
          if (v33 < 0x168
            || &v31[v19 - v21 - 8 - (v33 & 0xFFFFFFFFFFFFFFF8)] > &v31[v19 - v21 - 8]
            || &v19[-(v33 & 0xFFFFFFFFFFFFFFF8) - 8] > v19 - 8
            || (unint64_t)(v21 - v31) < 0x20)
          {
            v34 = v19;
          }
          else
          {
            v36 = (v33 >> 3) + 1;
            v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
            v34 = &v19[-v37];
            v32 = (_QWORD *)((char *)v32 - v37);
            v38 = (__n128 *)&v31[8 * v28 - 16];
            v39 = (float32x4_t *)(v19 - 16);
            v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              a4 = v39[-1];
              _Q0 = *v39;
              v38[-1] = (__n128)a4;
              *v38 = (__n128)_Q0;
              v38 -= 2;
              v39 -= 2;
              v40 -= 4;
            }
            while (v40);
            if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_20:
              v20 = &v31[8 * v30];
              v95 = v32;
              vars8 = v20;
              if (!v21)
              {
LABEL_22:
                v21 = (char *)v32;
                a1 = v91;
                goto LABEL_4;
              }
LABEL_21:
              operator delete(v21);
              v23 = (float32x2_t)v92;
              a6 = v93;
              goto LABEL_22;
            }
          }
          do
          {
            v35 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *--v32 = v35;
          }
          while (v34 != v21);
          goto LABEL_20;
        }
      }
      else
      {
        v31 = 0;
        v32 = (_QWORD *)(8 * v28);
        *(_QWORD *)(8 * v28) = v26;
        v25 = 8 * v28 + 8;
        if (v19 != v21)
          goto LABEL_17;
      }
      v20 = &v31[8 * v30];
      v95 = v32;
      vars8 = v20;
      if (!v21)
        goto LABEL_22;
      goto LABEL_21;
    }
LABEL_5:
    ++v17;
  }
  while (v17 != v18);
  if (v21 == v19)
  {
    LODWORD(v43) = 0;
    v53 = 0.0;
    v52 = 0.0;
    v51 = 0.0;
    v50 = 0.0;
    v49 = 0.0;
    v48 = 0.0;
    v47 = 0.0;
    v45 = 0.0;
    v44 = 0.0;
  }
  else
  {
    v41 = **(_QWORD **)(a1 + 8);
    v42 = v19 - v21 - 8;
    if (v42 < 8)
    {
      LODWORD(v43) = 0;
      v44 = 0.0;
      v45 = 0.0;
      v46 = v21;
      v47 = 0.0;
      v48 = 0.0;
      v49 = 0.0;
      v50 = 0.0;
      v51 = 0.0;
      v52 = 0.0;
      v53 = 0.0;
      goto LABEL_41;
    }
    v43 = 0;
    v54 = (v42 >> 3) + 1;
    v44 = 0.0;
    v45 = 0.0;
    v47 = 0.0;
    v55 = v54 & 0x3FFFFFFFFFFFFFFELL;
    v46 = &v21[8 * (v54 & 0x3FFFFFFFFFFFFFFELL)];
    v48 = 0.0;
    v49 = 0.0;
    v50 = 0.0;
    v51 = 0.0;
    v52 = 0.0;
    v53 = 0.0;
    do
    {
      v56 = &v21[8 * v43];
      v57 = (float *)(v41 + 12 * *(_QWORD *)v56);
      v58 = (float *)(v41 + 12 * *((_QWORD *)v56 + 1));
      v59 = v57[1];
      v60 = v58[1];
      v61 = v57[2];
      v62 = v58[2];
      v44 = (float)(v44 + *v57) + *v58;
      v45 = (float)(v45 + v59) + v60;
      v47 = (float)(v47 + v61) + v62;
      v48 = (float)(v48 + (float)(*v57 * *v57)) + (float)(*v58 * *v58);
      v49 = (float)(v49 + (float)(*v57 * v59)) + (float)(*v58 * v60);
      v50 = (float)(v50 + (float)(*v57 * v61)) + (float)(*v58 * v62);
      v51 = (float)(v51 + (float)(v59 * v59)) + (float)(v60 * v60);
      v52 = (float)(v52 + (float)(v59 * v61)) + (float)(v60 * v62);
      v53 = (float)(v53 + (float)(v61 * v61)) + (float)(v62 * v62);
      v43 += 2;
    }
    while (v55 != v43);
    if (v54 != v55)
    {
      do
      {
LABEL_41:
        v63 = *(_QWORD *)v46;
        v46 += 8;
        v64 = (float *)(v41 + 12 * v63);
        v65 = v64[1];
        v66 = v64[2];
        v44 = v44 + *v64;
        v45 = v45 + v65;
        v47 = v47 + v66;
        v48 = v48 + (float)(*v64 * *v64);
        v49 = v49 + (float)(*v64 * v65);
        v50 = v50 + (float)(*v64 * v66);
        v51 = v51 + (float)(v65 * v65);
        v52 = v52 + (float)(v65 * v66);
        v53 = v53 + (float)(v66 * v66);
        LODWORD(v43) = v43 + 1;
      }
      while (v46 != v19);
    }
    v19 = v21;
  }
  v15 = v90;
LABEL_44:
  a13.i64[0] = __PAIR64__(LODWORD(v45), LODWORD(v44));
  a13.i64[1] = __PAIR64__(LODWORD(v48), LODWORD(v47));
  a14.i64[0] = __PAIR64__(LODWORD(v50), LODWORD(v49));
  a14.i64[1] = __PAIR64__(LODWORD(v52), LODWORD(v51));
  a15 = LODWORD(v53);
  if (v43 >= 3)
  {
    _Q0.f32[0] = (float)(int)v43;
    a4.i32[0] = a15;
    v70 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
    v71 = vdivq_f32(a4, _Q0).u32[0];
    _Q1 = (int32x4_t)vdivq_f32(a13, v70);
    a13 = (float32x4_t)_Q1;
    a14 = vdivq_f32(a14, v70);
    a15 = v71;
    _Q4 = (float32x4_t)vzip1q_s32(_Q1, _Q1);
    __asm { FMLS            S2, S1, V4.S[0] }
    _S3 = _Q1.i32[2];
    __asm { FMLS            S0, S3, V1.S[2] }
    v78 = (float32x4_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 0xCuLL);
    v79 = (float32x4_t)vzip2q_s32(vtrn1q_s32(_Q1, (int32x4_t)v78), (int32x4_t)v78);
    v78.i64[0] = vrev64q_s32((int32x4_t)a14).u64[0];
    v78.i64[1] = a14.i64[1];
    v69 = (int32x4_t)vmlsq_f32(v78, v79, _Q4);
  }
  else
  {
    _Q1.i64[0] = 0;
    _Q1.i32[2] = 0;
    _S2 = 0;
    _Q0.i32[0] = 0;
    v69 = 0uLL;
  }
  v80 = **(_QWORD **)(a1 + 40) + 36 * v15;
  *(_DWORD *)v80 = _S2;
  *(_DWORD *)(v80 + 4) = v69.i32[1];
  *(int32x4_t *)(v80 + 8) = v69;
  LODWORD(v81) = v69.i32[0];
  HIDWORD(v81) = vextq_s8(*(int8x16_t *)&v69, *(int8x16_t *)&v69, 8uLL).i32[1];
  *(_QWORD *)(v80 + 24) = v81;
  *(_DWORD *)(v80 + 32) = _Q0.i32[0];
  v82 = **(_QWORD **)(a1 + 48) + 12 * v15;
  *(_QWORD *)v82 = _Q1.i64[0];
  *(_DWORD *)(v82 + 8) = _Q1.i32[2];
  v83 = *(_QWORD *)(a1 + 8);
  a13.i32[0] = _S2;
  *(int8x16_t *)((char *)&a13 + 4) = vextq_s8((int8x16_t)vzip1q_s32(v69, v69), (int8x16_t)v69, 0xCuLL);
  v84 = (float32x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 0xCuLL);
  *(uint64_t *)((char *)a14.i64 + 4) = v84.i64[0];
  a14.i32[3] = v69.i32[3];
  a15 = _Q0.i32[0];
  sub_2396E2798(&a13, (uint64_t)&v94, v84);
  v85 = (int8x16_t)v94;
  v86 = (float32x2_t)vextq_s8(v85, v85, 8uLL).u64[0];
  v87 = vmulq_n_f32(v94, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v94.f32, 1), *(float32x2_t *)v94.f32, 1), v86, v86).f32[0]));
  v94.i32[2] = v87.i32[2];
  v94.i64[0] = v87.i64[0];
  if (!*(_BYTE *)(v83 + 80))
    sub_2394875CC();
  v88 = *(_QWORD *)(v83 + 56) + 12 * v15;
  v89 = v94.i64[0];
  *(_DWORD *)(v88 + 8) = v94.i32[2];
  *(_QWORD *)v88 = v89;
  if (v19)
  {
    vars0 = v19;
    operator delete(v19);
  }
}

void sub_2396E8444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  if (v23)
    operator delete(v23);
  _Unwind_Resume(exception_object);
}

void sub_2396E8478(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0x8E38E38E38E38E39 * ((v4 - v5) >> 2) >= a2)
  {
    a1[1] = &v5[36 * (36 * a2 / 0x24)];
  }
  else
  {
    v6 = (char *)*a1;
    v7 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x71C71C71C71C71CLL)
      sub_2394189F8();
    v9 = 0x8E38E38E38E38E39 * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x38E38E38E38E38ELL)
      v10 = 0x71C71C71C71C71CLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x71C71C71C71C71CLL)
        sub_239418A80();
      v11 = (char *)operator new(36 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[36 * v7];
    v13 = &v12[36 * (36 * a2 / 0x24)];
    if (v5 != v6)
    {
      do
      {
        v14 = *(_OWORD *)(v5 - 36);
        v15 = *(_OWORD *)(v5 - 20);
        *((_DWORD *)v12 - 1) = *((_DWORD *)v5 - 1);
        *(_OWORD *)(v12 - 20) = v15;
        *(_OWORD *)(v12 - 36) = v14;
        v12 -= 36;
        v5 -= 36;
      }
      while (v5 != v6);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[36 * v10];
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_2396E8624(uint64_t result, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  void *exception;

  v2 = *(_QWORD *)(result + 128);
  v3 = *(int *)(v2 + 24);
  if (!(_DWORD)v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "[nanoflann] computeBoundingBox() called but no data points found.");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v4 = *(float **)v2;
  v5 = **(float **)v2;
  *a2 = v5;
  a2[1] = v5;
  v6 = v4[1];
  a2[2] = v6;
  a2[3] = v6;
  v7 = v4[2];
  a2[4] = v7;
  a2[5] = v7;
  if ((_DWORD)v3 != 1)
  {
    v8 = *(int *)(v2 + 28);
    v9 = v3 - 1;
    v10 = &v4[v8 + 2];
    v11 = v7;
    v12 = v6;
    v13 = v5;
    while (1)
    {
      v14 = *(v10 - 2);
      if (v14 >= v13)
        break;
      *a2 = v14;
      v15 = *(v10 - 2);
      v13 = v14;
      if (v15 > v5)
        goto LABEL_10;
LABEL_11:
      v16 = *(v10 - 1);
      if (v16 >= v12)
      {
        v17 = *(v10 - 1);
        if (v16 <= v6)
          goto LABEL_16;
LABEL_15:
        a2[3] = v17;
        v6 = v17;
        goto LABEL_16;
      }
      a2[2] = v16;
      v17 = *(v10 - 1);
      v12 = v16;
      if (v17 > v6)
        goto LABEL_15;
LABEL_16:
      v18 = *v10;
      if (*v10 >= v11)
      {
        v19 = *v10;
        if (v18 > v7)
        {
LABEL_20:
          a2[5] = v19;
          v7 = v19;
        }
      }
      else
      {
        a2[4] = v18;
        v19 = *v10;
        v11 = v18;
        if (*v10 > v7)
          goto LABEL_20;
      }
      v10 += v8;
      if (!--v9)
        return result;
    }
    v15 = *(v10 - 2);
    if (v14 <= v5)
      goto LABEL_11;
LABEL_10:
    a2[1] = v15;
    v5 = v15;
    goto LABEL_11;
  }
  return result;
}

void sub_2396E8778(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396E878C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  float v38;
  int32x4_t v40;
  int8x8_t v41;
  int32x4_t v42;
  int8x8_t v43;
  __int32 v44;
  int v45;
  int v46;

  v10 = *(_QWORD *)(a2 + 88);
  v11 = v10 - 32;
  if (v10 >= 0x20)
  {
    v13 = *(_QWORD **)(a2 + 104);
  }
  else
  {
    *(_QWORD *)(a2 + 120) += v10;
    v12 = malloc_type_malloc(0x2000uLL, 0x933F5985uLL);
    if (!v12)
    {
      fwrite("Failed to allocate memory.\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
      v13 = 0;
      v15 = a4 - a3;
      if ((int)a4 - (int)a3 > *(_DWORD *)(a2 + 32))
        goto LABEL_6;
      goto LABEL_8;
    }
    *v12 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = v12;
    v13 = v12 + 1;
    v11 = 8152;
  }
  *(_QWORD *)(a2 + 88) = v11;
  v14 = *(_QWORD *)(a2 + 112) + 32;
  *(_QWORD *)(a2 + 104) = v13 + 4;
  *(_QWORD *)(a2 + 112) = v14;
  v15 = a4 - a3;
  if ((int)a4 - (int)a3 <= *(_DWORD *)(a2 + 32))
  {
LABEL_8:
    v13[2] = 0;
    v13[3] = 0;
    *(_DWORD *)v13 = a3;
    *((_DWORD *)v13 + 1) = a4;
    v17 = *(_QWORD *)a2;
    v18 = *(uint64_t **)(a2 + 128);
    v19 = *((_DWORD *)v18 + 7);
    v20 = *v18;
    v21 = (float *)(*v18 + 4 * v19 * (uint64_t)*(int *)(*(_QWORD *)a2 + 4 * (int)a3));
    v22 = *v21;
    *a5 = *v21;
    v23 = *v21;
    a5[1] = *v21;
    v24 = v21[1];
    a5[2] = v24;
    v25 = v21[1];
    a5[3] = v25;
    v26 = v21[2];
    a5[4] = v26;
    v27 = v21[2];
    a5[5] = v27;
    if ((int)a3 + 1 >= (int)a4)
      return v13;
    v28 = (int *)(v17 + 4 * ((int)a3 + 1));
    v29 = ~(_DWORD)a3 + a4;
    while (1)
    {
      v30 = *v28++;
      v31 = v19 * (uint64_t)v30;
      v32 = *(float *)(v20 + 4 * v31);
      if (v22 <= v32)
        break;
      *a5 = v32;
      v33 = *(float *)(v20 + 4 * v31);
      v22 = v32;
      if (v23 < v33)
        goto LABEL_15;
LABEL_16:
      v34 = *(float *)(v20 + 4 * (v31 + 1));
      if (v24 <= v34)
      {
        v35 = *(float *)(v20 + 4 * (v31 + 1));
        if (v25 >= v34)
          goto LABEL_21;
LABEL_20:
        a5[3] = v35;
        v25 = v35;
        goto LABEL_21;
      }
      a5[2] = v34;
      v35 = *(float *)(v20 + 4 * (v31 + 1));
      v24 = v34;
      if (v25 < v35)
        goto LABEL_20;
LABEL_21:
      v36 = v31 + 2;
      v37 = *(float *)(v20 + 4 * v36);
      if (v26 <= v37)
      {
        v38 = *(float *)(v20 + 4 * v36);
        if (v27 < v37)
        {
LABEL_25:
          a5[5] = v38;
          v27 = v38;
        }
      }
      else
      {
        a5[4] = v37;
        v38 = *(float *)(v20 + 4 * v36);
        v26 = v37;
        if (v27 < v38)
          goto LABEL_25;
      }
      if (!--v29)
        return v13;
    }
    v33 = *(float *)(v20 + 4 * v31);
    if (v23 >= v32)
      goto LABEL_16;
LABEL_15:
    a5[1] = v33;
    v23 = v33;
    goto LABEL_16;
  }
LABEL_6:
  v46 = 0;
  v44 = 0;
  v45 = 0;
  sub_2396E8AD4(a1, a2, (int *)(*(_QWORD *)a2 + 4 * (int)a3), v15, &v46, &v45, (float *)&v44, a5);
  *(_DWORD *)v13 = v45;
  v42 = *(int32x4_t *)a5;
  v43 = *(int8x8_t *)(a5 + 4);
  v42.i32[2 * v45 + 1] = v44;
  v13[2] = sub_2396E878C(a1, a2, a3, (v46 + a3), &v42);
  v40 = *(int32x4_t *)a5;
  v41 = *(int8x8_t *)(a5 + 4);
  v40.i32[2 * v45] = v44;
  v13[3] = sub_2396E878C(a1, a2, (v46 + a3), a4, &v40);
  v16 = 2 * v45;
  *((_DWORD *)v13 + 1) = v42.i32[v16 + 1];
  *((_DWORD *)v13 + 2) = v40.i32[v16];
  *(int8x16_t *)a5 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vtrn2q_s32(vrev64q_s32(v42), v40), (float32x4_t)vtrn2q_s32(vrev64q_s32(v40), v42)), (int8x16_t)v40, (int8x16_t)v42);
  *((int8x8_t *)a5 + 2) = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v41.u32[1], v43.u32[0]), (float32x2_t)__PAIR64__(v43.u32[1], v41.u32[0])), v41, v43);
  return v13;
}

void sub_2396E8AD4(uint64_t a1, uint64_t a2, int *a3, int a4, int *a5, _DWORD *a6, float *a7, float *a8)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t *v16;
  float v17;
  int *v18;
  int v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  int v24;
  float v25;
  float v26;
  int *v27;
  int v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  int v33;
  float v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  int *v40;
  int v41;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  int v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float v51;
  float v52;
  int v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  int *v57;
  float v58;
  float v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;

  v10 = a8[1] - *a8;
  v11 = a8[3] - a8[2];
  if (v11 <= v10)
    v12 = a8[1] - *a8;
  else
    v12 = a8[3] - a8[2];
  v13 = a8[4];
  v14 = a8[5] - v13;
  if (v14 > v12)
    v12 = a8[5] - v13;
  *a6 = 0;
  v15 = v12 * 0.99999;
  v16 = *(uint64_t **)(a2 + 128);
  v17 = -1.0;
  if (a4 <= 1)
  {
    if (v10 > v15)
    {
      v37 = *((int *)v16 + 7) * (uint64_t)*a3;
      v17 = *(float *)(*v16 + 4 * v37) - *(float *)(*v16 + 4 * v37);
      if (v17 <= -1.0)
        v17 = -1.0;
    }
    if (v11 <= v15
      || (v38 = *v16 + 4 * *((int *)v16 + 7) * (uint64_t)*a3, v39 = *(float *)(v38 + 4) - *(float *)(v38 + 4), v39 <= v17))
    {
      v36 = 0;
      if (v14 <= v15)
        goto LABEL_45;
    }
    else
    {
      v36 = 1;
      *a6 = 1;
      v17 = v39;
      if (v14 <= v15)
        goto LABEL_45;
    }
    v48 = *v16 + 4 * *((int *)v16 + 7) * (uint64_t)*a3;
    if ((float)(*(float *)(v48 + 8) - *(float *)(v48 + 8)) <= v17)
      goto LABEL_45;
LABEL_44:
    v36 = 2;
    *a6 = 2;
    goto LABEL_45;
  }
  if (v10 > v15)
  {
    v18 = a3 + 1;
    v19 = *((_DWORD *)v16 + 7);
    v20 = *(float *)(*v16 + 4 * v19 * (uint64_t)*a3);
    v21 = a4 - 1;
    v22 = v20;
    v23 = v20;
    do
    {
      v24 = *v18++;
      v25 = *(float *)(*v16 + 4 * v24 * (uint64_t)v19);
      if (v25 < v20)
      {
        v20 = v25;
        v23 = v22;
      }
      if (v25 > v23)
      {
        v22 = v25;
        v23 = v25;
      }
      --v21;
    }
    while (v21);
    v26 = v22 - v20;
    v17 = -1.0;
    if (v26 > -1.0)
      v17 = v26;
  }
  if (v11 <= v15)
    goto LABEL_33;
  v27 = a3 + 1;
  v28 = *((_DWORD *)v16 + 7);
  v29 = *(float *)(*v16 + 4 * v28 * (uint64_t)*a3 + 4);
  v30 = a4 - 1;
  v31 = v29;
  v32 = v29;
  do
  {
    v33 = *v27++;
    v34 = *(float *)(*v16 + 4 * v33 * (uint64_t)v28 + 4);
    if (v34 < v29)
    {
      v29 = v34;
      v32 = v31;
    }
    if (v34 > v32)
    {
      v31 = v34;
      v32 = v34;
    }
    --v30;
  }
  while (v30);
  v35 = v31 - v29;
  if (v35 <= v17)
  {
LABEL_33:
    v36 = 0;
    if (v14 <= v15)
      goto LABEL_45;
  }
  else
  {
    v36 = 1;
    *a6 = 1;
    v17 = v35;
    if (v14 <= v15)
      goto LABEL_45;
  }
  v40 = a3 + 1;
  v41 = *((_DWORD *)v16 + 7);
  v42 = *(float *)(*v16 + 4 * v41 * (uint64_t)*a3 + 8);
  v43 = a4 - 1;
  v44 = v42;
  v45 = v42;
  do
  {
    v46 = *v40++;
    v47 = *(float *)(*v16 + 4 * v46 * (uint64_t)v41 + 8);
    if (v47 < v42)
    {
      v42 = v47;
      v45 = v44;
    }
    if (v47 > v45)
    {
      v44 = v47;
      v45 = v47;
    }
    --v43;
  }
  while (v43);
  if ((float)(v44 - v42) > v17)
    goto LABEL_44;
LABEL_45:
  v49 = v36;
  v50 = &a8[2 * v36];
  v51 = *v50;
  v52 = v50[1];
  v53 = *((_DWORD *)v16 + 7);
  v54 = *v16;
  v55 = *(float *)(v54 + 4 * (v49 + v53 * (uint64_t)*a3));
  if (a4 < 2)
  {
    v58 = *(float *)(v54 + 4 * (v49 + v53 * (uint64_t)*a3));
  }
  else
  {
    v56 = a4 - 1;
    v57 = a3 + 1;
    v58 = *(float *)(v54 + 4 * (v49 + v53 * (uint64_t)*a3));
    v59 = v58;
    do
    {
      v60 = *v57++;
      v61 = *(float *)(v54 + 4 * (v49 + v60 * (uint64_t)v53));
      if (v61 < v55)
      {
        v55 = v61;
        v59 = v58;
      }
      if (v61 > v59)
      {
        v58 = v61;
        v59 = v61;
      }
      --v56;
    }
    while (v56);
  }
  v62 = (float)(v51 + v52) * 0.5;
  if (v62 <= v58)
    v63 = v62;
  else
    v63 = v58;
  if (v62 >= v55)
    v64 = v63;
  else
    v64 = v55;
  *a7 = v64;
  v69 = 0;
  sub_2396E8E24(a1, a2, (uint64_t)a3, a4, v49, a7, (_DWORD *)&v69 + 1, &v69);
  v66 = v69;
  v65 = HIDWORD(v69);
  if (a4 >= 0)
    v67 = a4;
  else
    v67 = a4 + 1;
  v68 = v67 >> 1;
  if ((int)v69 >= v68)
    v66 = v68;
  if (SHIDWORD(v69) <= v68)
    v65 = v66;
  *a5 = v65;
}

void sub_2396E8E24(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, float *a6, _DWORD *a7, _DWORD *a8)
{
  int v8;
  int v9;
  uint64_t v10;
  float v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  int *v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v8 = 0;
  v9 = a4 - 1;
  v10 = *(_QWORD *)(a2 + 128);
  v11 = *a6;
  v12 = a4 - 1;
  if (a4 - 1 < 0)
    goto LABEL_6;
LABEL_2:
  v13 = v12 - (uint64_t)v8 + 1;
  v14 = (int *)(a3 + 4 * v8);
  while (1)
  {
    v15 = *v14++;
    if (*(float *)(*(_QWORD *)v10 + 4 * (a5 + *(int *)(v10 + 28) * (uint64_t)v15)) >= v11)
      break;
    ++v8;
    if (!--v13)
    {
      v8 = v12 + 1;
      goto LABEL_6;
    }
  }
  while (1)
  {
LABEL_6:
    v16 = v12 != 0;
    if (v8 <= v12 && v12)
    {
      v17 = v12;
      while (*(float *)(*(_QWORD *)v10 + 4 * (a5 + *(int *)(v10 + 28) * (uint64_t)*(int *)(a3 + 4 * v17))) >= v11)
      {
        v12 = v17 - 1;
        v18 = (v17 - 1);
        v16 = v17 != 1;
        if (v17 > v8)
        {
          --v17;
          if (v18)
            continue;
        }
        goto LABEL_14;
      }
      v16 = 1;
      v12 = v17;
    }
LABEL_14:
    if (v8 > v12 || !v16)
      break;
    v19 = 4 * v8;
    v20 = 4 * v12;
    v21 = *(_DWORD *)(a3 + v19);
    *(_DWORD *)(a3 + v19) = *(_DWORD *)(a3 + v20);
    *(_DWORD *)(a3 + v20) = v21;
    if (++v8 <= --v12)
      goto LABEL_2;
  }
  *a7 = v8;
  v22 = *(_QWORD *)(a2 + 128);
  v23 = *a6;
  if (v8 > v9)
    goto LABEL_23;
LABEL_19:
  v24 = v9 - (uint64_t)v8 + 1;
  v25 = (int *)(a3 + 4 * v8);
  while (1)
  {
    v26 = *v25++;
    if (*(float *)(*(_QWORD *)v22 + 4 * (a5 + *(int *)(v22 + 28) * (uint64_t)v26)) > v23)
      break;
    ++v8;
    if (!--v24)
    {
      v8 = v9 + 1;
      goto LABEL_23;
    }
  }
  while (1)
  {
LABEL_23:
    v27 = v9 != 0;
    if (v8 <= v9 && v9)
    {
      v28 = v9;
      while (*(float *)(*(_QWORD *)v22 + 4 * (a5 + *(int *)(v22 + 28) * (uint64_t)*(int *)(a3 + 4 * v28))) > v23)
      {
        v9 = v28 - 1;
        v29 = (v28 - 1);
        v27 = v28 != 1;
        if (v28 > v8)
        {
          --v28;
          if (v29)
            continue;
        }
        goto LABEL_31;
      }
      v27 = 1;
      v9 = v28;
    }
LABEL_31:
    if (v8 > v9 || !v27)
      break;
    v30 = 4 * v8;
    v31 = 4 * v9;
    v32 = *(_DWORD *)(a3 + v30);
    *(_DWORD *)(a3 + v30) = *(_DWORD *)(a3 + v31);
    *(_DWORD *)(a3 + v31) = v32;
    if (++v8 <= --v9)
      goto LABEL_19;
  }
  *a8 = v8;
}

void sub_2396E902C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396E9040(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_250AE3620;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2396E9098(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250AE3620;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_2396E90D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  float *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  float32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t **v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void **v33;
  char *v34;
  int32x4_t v35;
  int v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  uint64_t v41;
  float32x4_t v44;
  int32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x2_t v53;
  float32x4_t v54;
  uint64_t v55;
  int8x16_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  int64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  char *v80;
  unint64_t v81;
  char *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  int32x4_t v90;
  int v91;
  int32x4_t v92;
  float32x4_t v93;
  char *v94;
  void *__p;
  char *v96;
  char *v97;
  void *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  _BYTE v103[32];
  int v104;

  v3 = *a2;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  __p = 0;
  v96 = 0;
  v97 = 0;
  v4 = (float *)(**(_QWORD **)(a1 + 8) + 12 * v3);
  v5 = **(float **)(a1 + 24);
  if (v5 <= 0.00000011921)
  {
    v20 = 0;
    v17 = (unint64_t **)(a1 + 16);
    v18 = *(unint64_t **)(a1 + 16);
    v19 = *v18;
    _CF = 1;
    v27 = *v18;
    if (!*v18)
      goto LABEL_16;
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(float *)v103 = v5;
  *(_QWORD *)&v103[8] = &v98;
  v99 = 0;
  sub_2396E9848(v6, (float *)v103, v4, v7);
  v12 = **(_QWORD **)&v103[8];
  v11 = *(_QWORD *)(*(_QWORD *)&v103[8] + 8);
  if (*(_BYTE *)(v7 + 8))
  {
    v13 = 126 - 2 * __clz((v99 - (_BYTE *)v98) >> 3);
    if (v99 == v98)
      v14 = 0;
    else
      v14 = v13;
    sub_2396E9D20((float *)v98, v99, (uint64_t)&v93, v14, 1);
  }
  v15 = v11 - v12;
  v16 = (v11 - v12) >> 3;
  v17 = (unint64_t **)(a1 + 16);
  v18 = *(unint64_t **)(a1 + 16);
  v19 = *v18;
  v20 = (char *)__p;
  if (v16 <= *v18)
  {
    v28 = (v96 - (_BYTE *)__p) >> 2;
    _CF = v19 >= v28;
    v27 = v19 - v28;
    if (v19 <= v28)
    {
LABEL_16:
      if (!_CF)
        v96 = &v20[4 * v19];
LABEL_18:
      v93 = 0uLL;
      v94 = 0;
      if (v19)
      {
        if (v19 >> 62)
          sub_2394189F8();
        v29 = (char *)operator new(4 * v19);
        v93.i64[0] = (uint64_t)v29;
        v94 = &v29[4 * v19];
        memset_pattern16(v29, &unk_239ECEF60, 4 * v19);
        v93.i64[1] = (uint64_t)&v29[4 * v19];
        v30 = *(_QWORD *)(a1 + 32);
        v31 = *v18;
        *(_QWORD *)v103 = __p;
        *(_QWORD *)&v103[8] = v29;
        *(_QWORD *)&v103[16] = v31;
        *(_QWORD *)&v103[24] = 0;
        if (!v31)
          goto LABEL_22;
      }
      else
      {
        v29 = 0;
        v30 = *(_QWORD *)(a1 + 32);
        v31 = *v18;
        *(_OWORD *)v103 = (unint64_t)__p;
        *(_QWORD *)&v103[16] = v31;
        *(_QWORD *)&v103[24] = 0;
        if (!v31)
        {
LABEL_22:
          v32 = v3;
          v101 = 32;
          v102 = 1;
          sub_2396EAFAC(v30, (uint64_t *)v103, v4, (uint64_t)&v101);
          if (v29)
            operator delete(v29);
          goto LABEL_24;
        }
      }
      *(_DWORD *)&v29[4 * v31 - 4] = 2139095039;
      goto LABEL_22;
    }
LABEL_14:
    sub_23942CB44((uint64_t)&__p, v27);
    v18 = *v17;
    v19 = **v17;
    goto LABEL_18;
  }
  if (v16 <= (v97 - (_BYTE *)__p) >> 2)
    goto LABEL_49;
  if ((v15 & 0x8000000000000000) != 0)
    sub_2394189F8();
  v21 = v96;
  v22 = operator new(v15 >> 1);
  v23 = v21 - v20;
  v24 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFFCLL];
  v25 = v24;
  if (v21 != v20)
  {
    if ((unint64_t)(v23 - 4) < 0x2C)
    {
      v25 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_46:
        v68 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v25 - 1) = v68;
        v25 -= 4;
      }
      while (v21 != v20);
      goto LABEL_47;
    }
    v25 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v21[-(v23 & 0xFFFFFFFFFFFFFFFCLL)] - v22) < 0x20)
      goto LABEL_46;
    v60 = v23 >> 2;
    v61 = ((unint64_t)(v23 - 4) >> 2) + 1;
    v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
    v63 = &v21[-v62];
    v25 = &v24[-v62];
    v64 = &v22[4 * v60 - 16];
    v65 = v21 - 16;
    v66 = v61 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v67 = *(_OWORD *)v65;
      *(v64 - 1) = *((_OWORD *)v65 - 1);
      *v64 = v67;
      v64 -= 2;
      v65 -= 32;
      v66 -= 8;
    }
    while (v66);
    v21 = v63;
    if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_46;
  }
LABEL_47:
  __p = v25;
  v96 = v24;
  v97 = &v22[4 * v16];
  if (v20)
    operator delete(v20);
LABEL_49:
  v32 = v3;
  v69 = (char *)v98;
  v70 = v99;
  if (v98 != v99)
  {
    v71 = v96;
    while (v71 < v97)
    {
      *(_DWORD *)v71 = *(_DWORD *)v69;
      v72 = v71 + 4;
LABEL_52:
      v96 = v72;
      v69 += 8;
      v71 = v72;
      if (v69 == v70)
        goto LABEL_24;
    }
    v73 = (char *)__p;
    v74 = v71 - (_BYTE *)__p;
    v75 = (v71 - (_BYTE *)__p) >> 2;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 62)
      sub_2394189F8();
    v77 = v97 - (_BYTE *)__p;
    if ((v97 - (_BYTE *)__p) >> 1 > v76)
      v76 = v77 >> 1;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
      v78 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    if (v78)
    {
      if (v78 >> 62)
        sub_239418A80();
      v79 = operator new(4 * v78);
      v80 = &v79[4 * v75];
      *(_DWORD *)v80 = *(_DWORD *)v69;
      v72 = v80 + 4;
      if (v71 == v73)
        goto LABEL_68;
    }
    else
    {
      v79 = 0;
      v80 = (char *)(4 * v75);
      *(_DWORD *)(4 * v75) = *(_DWORD *)v69;
      v72 = (char *)(4 * v75 + 4);
      if (v71 == v73)
        goto LABEL_68;
    }
    v81 = v71 - 4 - v73;
    if (v81 >= 0xBC)
    {
      if (&v79[v74 - 4 - (v81 & 0xFFFFFFFFFFFFFFFCLL)] > &v79[v74 - 4])
      {
        v82 = v71;
      }
      else if (&v71[-(v81 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v71 - 4)
      {
        v82 = v71;
      }
      else if ((unint64_t)(v71 - v79 - v74) >= 0x20)
      {
        v84 = (v81 >> 2) + 1;
        v85 = 4 * (v84 & 0x7FFFFFFFFFFFFFF8);
        v82 = &v71[-v85];
        v80 -= v85;
        v86 = &v79[4 * v75 - 16];
        v87 = v71 - 16;
        v88 = v84 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v89 = *(_OWORD *)v87;
          *(v86 - 1) = *((_OWORD *)v87 - 1);
          *v86 = v89;
          v86 -= 2;
          v87 -= 32;
          v88 -= 8;
        }
        while (v88);
        if (v84 == (v84 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_68:
          __p = v80;
          v96 = v72;
          v97 = &v79[4 * v78];
          if (v73)
            operator delete(v73);
          goto LABEL_52;
        }
      }
      else
      {
        v82 = v71;
      }
    }
    else
    {
      v82 = v71;
    }
    do
    {
      v83 = *((_DWORD *)v82 - 1);
      v82 -= 4;
      *((_DWORD *)v80 - 1) = v83;
      v80 -= 4;
    }
    while (v82 != v73);
    goto LABEL_68;
  }
LABEL_24:
  if (**(_BYTE **)(a1 + 80))
  {
    v33 = (void **)(**(_QWORD **)(a1 + 72) + 24 * v32);
    if (v33 != &__p)
      sub_23942156C(v33, (char *)__p, v96, (v96 - (_BYTE *)__p) >> 2);
  }
  v34 = (char *)__p;
  v35 = 0uLL;
  _S8 = 0;
  if (__p == v96)
  {
    v37 = 0;
    v38.i64[0] = 0;
    v8.i32[0] = 0;
    v39 = 0uLL;
    v40 = 0;
  }
  else
  {
    v37 = 0;
    v38.i64[0] = 0;
    v39 = 0uLL;
    v8.i32[0] = 0;
    v40 = 0;
    do
    {
      if ((*(_DWORD *)v34 & 0x80000000) == 0)
      {
        ++v37;
        v41 = **(_QWORD **)(a1 + 8) + 12 * *(unsigned int *)v34;
        v9.i32[0] = *(_DWORD *)v41;
        v10.i64[0] = *(_QWORD *)(v41 + 4);
        *(float32x2_t *)v38.f32 = vadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v41);
        *(float *)v8.i32 = *(float *)v8.i32 + *(float *)&v10.i32[1];
        v40 = vmla_n_f32(v40, *(float32x2_t *)v41, *(float *)v41);
        v9 = (float32x4_t)vzip1q_s32((int32x4_t)v9, v10);
        v9.i32[2] = v9.i32[1];
        v39 = vmlaq_f32(v39, (float32x4_t)vzip1q_s32(vdupq_lane_s32(*(int32x2_t *)v10.i8, 1), v10), v9);
      }
      v34 += 4;
    }
    while (v34 != v96);
  }
  _S4 = 0;
  _Q5 = 0uLL;
  if (v37 >= 3)
  {
    v38.i64[1] = __PAIR64__(v40.u32[0], v8.u32[0]);
    *(int32x2_t *)v8.i8 = vdup_lane_s32((int32x2_t)v40, 1);
    v40.f32[0] = (float)v37;
    v44 = (float32x4_t)vextq_s8(vextq_s8(v8, v8, 4uLL), (int8x16_t)v39, 0xCuLL);
    _Q2 = (float32x4_t)vdupq_lane_s32((int32x2_t)v40, 0);
    v39 = vdivq_f32(v44, _Q2);
    _Q5 = (int32x4_t)vdivq_f32(v38, _Q2);
    _Q0 = (float32x4_t)vzip1q_s32(_Q5, _Q5);
    __asm { FMLS            S8, S5, V0.S[0] }
    _Q2.i32[0] = _Q5.i32[2];
    __asm { FMLS            S4, S2, V5.S[2] }
    v50 = (int32x4_t)vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 0xCuLL);
    v51.i64[0] = vrev64q_s32((int32x4_t)v39).u64[0];
    v51.i64[1] = v39.i64[1];
    v35 = (int32x4_t)vmlsq_f32(v51, (float32x4_t)vzip2q_s32(vtrn1q_s32(_Q5, v50), v50), _Q0);
  }
  v90 = v35;
  v91 = _S4;
  v92 = _Q5;
  *(_DWORD *)v103 = _S8;
  *(int8x16_t *)&v103[4] = vextq_s8((int8x16_t)vzip1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL);
  *(_QWORD *)&v103[20] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL).u64[0];
  *(_DWORD *)&v103[28] = v35.i32[3];
  v104 = _S4;
  sub_2396E2798((float32x4_t *)v103, (uint64_t)&v93, v39);
  v52 = (int8x16_t)v93;
  v53 = (float32x2_t)vextq_s8(v52, v52, 8uLL).u64[0];
  v54 = vmulq_n_f32(v93, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v93.f32, 1), *(float32x2_t *)v93.f32, 1), v53, v53).f32[0]));
  v93.i32[2] = v54.i32[2];
  v93.i64[0] = v54.i64[0];
  v55 = **(_QWORD **)(a1 + 56) + 36 * v32;
  v56 = (int8x16_t)v90;
  *(_DWORD *)(v55 + 4) = v90.i32[1];
  *(_DWORD *)v55 = _S8;
  *(int32x4_t *)(v55 + 8) = v90;
  v56.i32[1] = vextq_s8(v56, v56, 8uLL).i32[1];
  *(_QWORD *)(v55 + 24) = v56.i64[0];
  *(_DWORD *)(v55 + 32) = v91;
  v57 = **(_QWORD **)(a1 + 64) + 12 * v32;
  *(_QWORD *)v57 = v92.i64[0];
  *(_DWORD *)(v57 + 8) = v92.i32[2];
  v58 = **(_QWORD **)(a1 + 48) + 12 * v32;
  v59 = v93.i64[0];
  *(_DWORD *)(v58 + 8) = v93.i32[2];
  *(_QWORD *)v58 = v59;
  if (__p)
  {
    v96 = (char *)__p;
    operator delete(__p);
  }
  if (v98)
  {
    v99 = (char *)v98;
    operator delete(v98);
  }
}

void sub_2396E97D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;
  void *v25;

  if (v23)
    operator delete(v23);
  if (__p)
  {
    operator delete(__p);
    v25 = a22;
    if (!a22)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v25 = a22;
    if (!a22)
      goto LABEL_5;
  }
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

BOOL sub_2396E9848(uint64_t a1, float *a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  int *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  void *exception;
  uint64_t v22;
  float v23;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v6 = *(int **)(a1 + 24);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x23B83DB6C](exception, "[nanoflann] findNeighbors() called before building the index.");
      __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v7 = *(float *)(a4 + 4);
    v23 = 0.0;
    v22 = 0;
    v8 = *a3;
    v9 = *(float *)(a1 + 60);
    v10 = 0.0;
    if (*a3 < v9)
    {
      v10 = (float)(v8 - v9) * (float)(v8 - v9);
      *(float *)&v22 = v10;
      v11 = *(float *)(a1 + 64);
      if (v8 <= v11)
      {
LABEL_5:
        v12 = a3[1];
        v13 = *(float *)(a1 + 68);
        if (v12 >= v13)
          goto LABEL_6;
        goto LABEL_14;
      }
    }
    else
    {
      v11 = *(float *)(a1 + 64);
      if (v8 <= v11)
        goto LABEL_5;
    }
    *(float *)&v22 = (float)(v8 - v11) * (float)(v8 - v11);
    v10 = v10 + *(float *)&v22;
    v12 = a3[1];
    v13 = *(float *)(a1 + 68);
    if (v12 >= v13)
    {
LABEL_6:
      v14 = *(float *)(a1 + 72);
      if (v12 <= v14)
        goto LABEL_7;
      goto LABEL_15;
    }
LABEL_14:
    *((float *)&v22 + 1) = (float)(v12 - v13) * (float)(v12 - v13);
    v10 = v10 + *((float *)&v22 + 1);
    v14 = *(float *)(a1 + 72);
    if (v12 <= v14)
    {
LABEL_7:
      v15 = 1.0;
      v16 = a3[2];
      v17 = *(float *)(a1 + 76);
      if (v16 >= v17)
        goto LABEL_8;
      goto LABEL_16;
    }
LABEL_15:
    *((float *)&v22 + 1) = (float)(v12 - v14) * (float)(v12 - v14);
    v10 = v10 + *((float *)&v22 + 1);
    v15 = 1.0;
    v16 = a3[2];
    v17 = *(float *)(a1 + 76);
    if (v16 >= v17)
    {
LABEL_8:
      v18 = v7 + v15;
      v19 = *(float *)(a1 + 80);
      if (v16 <= v19)
      {
LABEL_10:
        sub_2396E99E8(a1, a2, a3, v6, (uint64_t)&v22, v10, v18);
        return v4 != 0;
      }
LABEL_9:
      v23 = (float)(v16 - v19) * (float)(v16 - v19);
      v10 = v10 + v23;
      goto LABEL_10;
    }
LABEL_16:
    v23 = (float)(v16 - v17) * (float)(v16 - v17);
    v10 = v10 + v23;
    v18 = v7 + v15;
    v19 = *(float *)(a1 + 80);
    if (v16 <= v19)
      goto LABEL_10;
    goto LABEL_9;
  }
  return v4 != 0;
}

void sub_2396E99D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2396E99E8(uint64_t a1, float *a2, float *a3, int *a4, uint64_t a5, float a6, float a7)
{
  int *v10;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  float v25;
  float v26;
  float v27;
  int v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float *v32;
  float v33;
  unint64_t **v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  float *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  _OWORD *v52;
  unint64_t *v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v59;

  v10 = a4;
  v12 = a2;
  v13 = a1;
  v14 = *((_QWORD *)a4 + 2);
  if (!v14 && !*((_QWORD *)a4 + 3))
  {
    v28 = a4[1];
    v29 = *a4;
    if ((int)v29 >= v28)
      return 1;
    v30 = *a2;
    while (1)
    {
      v32 = (float *)(**(_QWORD **)(v13 + 144)
                    + 4 * *(int *)(*(_QWORD *)(v13 + 144) + 28) * (uint64_t)*(int *)(*(_QWORD *)v13 + 4 * v29));
      v33 = (float)((float)((float)((float)(*a3 - *v32) * (float)(*a3 - *v32)) + 0.0)
                  + (float)((float)(a3[1] - v32[1]) * (float)(a3[1] - v32[1])))
          + (float)((float)(a3[2] - v32[2]) * (float)(a3[2] - v32[2]));
      if (v33 >= v30 || *v12 <= v33)
        goto LABEL_21;
      v35 = (unint64_t **)*((_QWORD *)v12 + 1);
      v36 = *(unsigned int *)(*(_QWORD *)v13 + 4 * v29) | ((unint64_t)LODWORD(v33) << 32);
      v38 = v35[1];
      v37 = (unint64_t)v35[2];
      if ((unint64_t)v38 < v37)
      {
        *v38 = v36;
        v31 = (uint64_t)(v38 + 1);
        goto LABEL_20;
      }
      v39 = v12;
      v40 = *v35;
      v41 = (char *)v38 - (char *)*v35;
      v42 = v41 >> 3;
      v43 = (v41 >> 3) + 1;
      if (v43 >> 61)
        sub_2394189F8();
      v44 = v37 - (_QWORD)v40;
      if (v44 >> 2 > v43)
        v43 = v44 >> 2;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
        v43 = 0x1FFFFFFFFFFFFFFFLL;
      v59 = v43;
      if (v43)
      {
        if (v43 >> 61)
          sub_239418A80();
        v45 = operator new(8 * v43);
        v46 = (unint64_t *)&v45[8 * v42];
        *v46 = v36;
        v31 = (uint64_t)(v46 + 1);
        if (v38 == v40)
        {
LABEL_38:
          v12 = v39;
          v10 = a4;
          v13 = a1;
          *v35 = v46;
          v35[1] = (unint64_t *)v31;
          v35[2] = (unint64_t *)&v45[8 * v59];
          if (!v38)
            goto LABEL_20;
LABEL_46:
          operator delete(v38);
          goto LABEL_20;
        }
      }
      else
      {
        v45 = 0;
        v46 = (unint64_t *)(8 * v42);
        *(_QWORD *)(8 * v42) = v36;
        v31 = 8 * v42 + 8;
        if (v38 == v40)
          goto LABEL_38;
      }
      v47 = (char *)(v38 - 1) - (char *)v40;
      if (v47 < 0x58)
        break;
      v48 = (char *)v38 - &v45[v41];
      v12 = v39;
      v10 = a4;
      if (v48 < 0x20)
        goto LABEL_44;
      v49 = (v47 >> 3) + 1;
      v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
      v51 = &v38[v50 / 0xFFFFFFFFFFFFFFF8];
      v46 = (unint64_t *)((char *)v46 - v50);
      v52 = &v45[8 * v42 - 16];
      v53 = v38 - 2;
      v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v55 = *(_OWORD *)v53;
        *(v52 - 1) = *((_OWORD *)v53 - 1);
        *v52 = v55;
        v52 -= 2;
        v53 -= 4;
        v54 -= 4;
      }
      while (v54);
      v38 = v51;
      if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_44;
LABEL_45:
      v38 = *v35;
      v13 = a1;
      *v35 = v46;
      v35[1] = (unint64_t *)v31;
      v35[2] = (unint64_t *)&v45[8 * v59];
      if (v38)
        goto LABEL_46;
LABEL_20:
      v35[1] = (unint64_t *)v31;
      v28 = v10[1];
LABEL_21:
      if (++v29 >= v28)
        return 1;
    }
    v12 = v39;
    v10 = a4;
    do
    {
LABEL_44:
      v56 = *--v38;
      *--v46 = v56;
    }
    while (v38 != v40);
    goto LABEL_45;
  }
  v15 = *a4;
  v16 = a3[v15];
  v17 = *((float *)a4 + 1);
  v18 = *((float *)a4 + 2);
  v19 = v16 - v17;
  v20 = v16 - v18;
  v21 = (float)(v16 - v17) + (float)(v16 - v18);
  if (v21 >= 0.0)
    v22 = *((_QWORD *)a4 + 3);
  else
    v22 = *((_QWORD *)a4 + 2);
  if (v21 >= 0.0)
    v23 = v14;
  else
    v23 = *((_QWORD *)v10 + 3);
  result = sub_2396E99E8(a1, a2, a3, v22, a5, a6, a7);
  if ((_DWORD)result)
  {
    v25 = v19 * v19;
    if (v21 < 0.0)
      v25 = v20 * v20;
    v26 = *(float *)(a5 + 4 * v15);
    v27 = (float)(v25 + a6) - v26;
    *(float *)(a5 + 4 * v15) = v25;
    if ((float)(v27 * a7) > *v12 || (result = sub_2396E99E8(v13, v12, a3, v23, a5, v27, a7), (_DWORD)result))
    {
      *(float *)(a5 + 4 * v15) = v26;
      return 1;
    }
  }
  return result;
}

float *sub_2396E9D20(float *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  float *v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  float v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  int v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float *v34;
  float v35;
  float v36;
  float *v37;
  float v38;
  float v39;
  int v40;
  float v41;
  float v42;
  float v43;
  int v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float *v49;
  float *v50;
  float v51;
  float v52;
  float *v53;
  float v54;
  float v55;
  int v56;
  float v57;
  float v58;
  float v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  int v65;
  int v66;
  int v67;
  float v68;
  int v69;
  uint64_t v70;
  float v71;
  float *v72;
  char *v73;
  char *v74;
  float v75;
  char *v76;
  float v77;
  float *v78;
  float v79;
  int v80;
  float v81;
  float v82;
  BOOL v83;
  float *v84;
  float v85;
  float *v86;
  float v87;
  float *v88;
  char *v89;
  float v90;
  float v91;
  int v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  int v101;
  float v102;
  float v103;
  int v104;
  float v105;
  float v106;
  int v107;
  int v108;
  float v109;
  int v110;
  float v111;
  float v112;
  float *v113;
  BOOL v115;
  uint64_t v116;
  float *v117;
  uint64_t v118;
  float v119;
  float v120;
  float v121;
  uint64_t v122;
  float *v123;
  int v124;
  int v125;
  float *v126;
  float v127;
  float v128;
  float v129;
  float *v130;
  float *v131;
  int v132;
  float v133;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v95 = *((float *)a2 - 1);
        v96 = v10[1];
        if (v95 < v96)
        {
          v97 = *v10;
          *v10 = *((float *)a2 - 2);
          *((float *)a2 - 2) = v97;
          v10[1] = v95;
          *((float *)a2 - 1) = v96;
        }
        return result;
      case 3uLL:
        v98 = v10[3];
        v99 = v10[1];
        v100 = *((float *)a2 - 1);
        if (v98 >= v99)
        {
          if (v100 < v98)
          {
            v124 = *((_DWORD *)v10 + 2);
            v10[2] = *((float *)a2 - 2);
            *((_DWORD *)a2 - 2) = v124;
            v10[3] = v100;
            *((float *)a2 - 1) = v98;
            v105 = v10[3];
            v111 = v10[1];
            if (v105 < v111)
            {
              v125 = *(_DWORD *)v10;
              *v10 = v10[2];
              *((_DWORD *)v10 + 2) = v125;
              goto LABEL_134;
            }
          }
        }
        else
        {
          v101 = *(_DWORD *)v10;
          if (v100 >= v98)
          {
            *v10 = v10[2];
            *((_DWORD *)v10 + 2) = v101;
            v10[1] = v98;
            v10[3] = v99;
            v133 = *((float *)a2 - 1);
            if (v133 >= v99)
              return result;
            v10[2] = *((float *)a2 - 2);
            *((_DWORD *)a2 - 2) = v101;
            v10[3] = v133;
          }
          else
          {
            *v10 = *((float *)a2 - 2);
            *((_DWORD *)a2 - 2) = v101;
            v10[1] = v100;
          }
          *((float *)a2 - 1) = v99;
        }
        return result;
      case 4uLL:
        return sub_2396EAAAC(v10, v10 + 2, v10 + 4, (float *)a2 - 2);
      case 5uLL:
        result = sub_2396EAAAC(v10, v10 + 2, v10 + 4, v10 + 6);
        v102 = *((float *)a2 - 1);
        v103 = v10[7];
        if (v102 < v103)
        {
          v104 = *((_DWORD *)v10 + 6);
          v10[6] = *((float *)a2 - 2);
          *((_DWORD *)a2 - 2) = v104;
          v10[7] = v102;
          *((float *)a2 - 1) = v103;
          v105 = v10[7];
          v106 = v10[5];
          if (v105 < v106)
          {
            v107 = *((_DWORD *)v10 + 4);
            v108 = *((_DWORD *)v10 + 6);
            *((_DWORD *)v10 + 4) = v108;
            *((_DWORD *)v10 + 6) = v107;
            v10[5] = v105;
            v10[7] = v106;
            v109 = v10[3];
            if (v105 < v109)
            {
              v110 = *((_DWORD *)v10 + 2);
              *((_DWORD *)v10 + 2) = v108;
              *((_DWORD *)v10 + 4) = v110;
              v10[3] = v105;
              v10[5] = v109;
              v111 = v10[1];
              if (v105 < v111)
              {
                v112 = *v10;
                *(_DWORD *)v10 = v108;
                v10[2] = v112;
LABEL_134:
                v10[1] = v105;
                v10[3] = v111;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v113 = v10 + 2;
          v115 = v10 == (float *)a2 || v113 == (float *)a2;
          if ((a5 & 1) != 0)
          {
            if (!v115)
            {
              v116 = 0;
              v117 = v10;
              do
              {
                v119 = v117[3];
                v120 = v117[1];
                v117 = v113;
                if (v119 < v120)
                {
                  v121 = *v113;
                  v122 = v116;
                  do
                  {
                    v123 = (float *)((char *)v10 + v122);
                    v123[2] = *(float *)((char *)v10 + v122);
                    v123[3] = *(float *)((char *)v10 + v122 + 4);
                    if (!v122)
                    {
                      v118 = (uint64_t)v10;
                      goto LABEL_122;
                    }
                    v122 -= 8;
                  }
                  while (v119 < *(v123 - 1));
                  v118 = (uint64_t)v10 + v122 + 8;
LABEL_122:
                  *(float *)v118 = v121;
                  *(float *)(v118 + 4) = v119;
                }
                v113 = v117 + 2;
                v116 += 8;
              }
              while (v117 + 2 != (float *)a2);
            }
          }
          else if (!v115)
          {
            v126 = v10 + 3;
            do
            {
              v127 = v9[3];
              v128 = v9[1];
              v9 = v113;
              if (v127 < v128)
              {
                v129 = *v113;
                v130 = v126;
                do
                {
                  v131 = v130;
                  *(v130 - 1) = *(v130 - 3);
                  v132 = *((_DWORD *)v130 - 2);
                  v130 -= 2;
                  *(_DWORD *)v131 = v132;
                }
                while (v127 < *(v131 - 4));
                *(v130 - 1) = v129;
                *v130 = v127;
              }
              v113 = v9 + 2;
              v126 += 2;
            }
            while (v9 + 2 != (float *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != (float *)a2)
            return (float *)sub_2396EAC00((char *)v10, a2, (int *)a2);
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        v15 = *((float *)a2 - 1);
        if ((unint64_t)v11 < 0x401)
        {
          v20 = v10[1];
          v21 = &v10[2 * v13 + 1];
          v22 = *v21;
          if (v20 >= *v21)
          {
            if (v15 < v20)
            {
              v28 = *v10;
              *v10 = *((float *)a2 - 2);
              *((float *)a2 - 2) = v28;
              v10[1] = v15;
              *((float *)a2 - 1) = v20;
              v29 = v10[1];
              v30 = *v21;
              if (v29 < *v21)
              {
                v31 = *v14;
                *v14 = *v10;
                *v10 = v31;
                *v21 = v29;
                v10[1] = v30;
                --a4;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v23 = *(_DWORD *)v14;
            if (v15 >= v20)
            {
              *v14 = *v10;
              *(_DWORD *)v10 = v23;
              *v21 = v20;
              v10[1] = v22;
              v45 = *((float *)a2 - 1);
              if (v45 >= v22)
                goto LABEL_32;
              *v10 = *((float *)a2 - 2);
              *((_DWORD *)a2 - 2) = v23;
              v10[1] = v45;
            }
            else
            {
              *v14 = *((float *)a2 - 2);
              *((_DWORD *)a2 - 2) = v23;
              *v21 = v15;
            }
            *((float *)a2 - 1) = v22;
          }
LABEL_32:
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v47 = v10[1];
          v46 = *v10;
          if (*(v10 - 1) < v47)
            goto LABEL_58;
          if (v47 >= *((float *)a2 - 1))
          {
            v86 = v10 + 2;
            do
            {
              v10 = v86;
              if (v86 >= (float *)a2)
                break;
              v87 = v86[1];
              v86 += 2;
            }
            while (v47 >= v87);
          }
          else
          {
            v84 = v10;
            do
            {
              v10 = v84 + 2;
              v85 = v84[3];
              v84 += 2;
            }
            while (v47 >= v85);
          }
          v88 = (float *)a2;
          if (v10 < (float *)a2)
          {
            v89 = a2;
            do
            {
              v88 = (float *)(v89 - 8);
              v90 = *((float *)v89 - 1);
              v89 -= 8;
            }
            while (v47 < v90);
          }
          while (v10 < v88)
          {
            v91 = *v10;
            *v10 = *v88;
            *v88 = v91;
            v92 = *((_DWORD *)v10 + 1);
            v10[1] = v88[1];
            *((_DWORD *)v88 + 1) = v92;
            do
            {
              v93 = v10[3];
              v10 += 2;
            }
            while (v47 >= v93);
            do
            {
              v94 = *(v88 - 1);
              v88 -= 2;
            }
            while (v47 < v94);
          }
          if (v10 - 2 != v9)
          {
            *v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a5 = 0;
          *(v10 - 2) = v46;
          *(v10 - 1) = v47;
          continue;
        }
        v16 = v10[1];
        v17 = &v10[2 * v13 + 1];
        v18 = *v17;
        if (*v17 >= v16)
        {
          if (v15 < v18)
          {
            v24 = *(_DWORD *)v14;
            *v14 = *((float *)a2 - 2);
            *((_DWORD *)a2 - 2) = v24;
            *v17 = v15;
            *((float *)a2 - 1) = v18;
            v25 = *v17;
            v26 = v10[1];
            if (*v17 < v26)
            {
              v27 = *v10;
              *v10 = *v14;
              *v14 = v27;
              v10[1] = v25;
              *v17 = v26;
            }
          }
        }
        else
        {
          v19 = *v10;
          if (v15 < v18)
          {
            *v10 = *((float *)a2 - 2);
            *((float *)a2 - 2) = v19;
            v10[1] = v15;
            goto LABEL_22;
          }
          *v10 = *v14;
          *v14 = v19;
          v10[1] = v18;
          *v17 = v16;
          v32 = *((float *)a2 - 1);
          if (v32 < v16)
          {
            *v14 = *((float *)a2 - 2);
            *((float *)a2 - 2) = v19;
            *v17 = v32;
LABEL_22:
            *((float *)a2 - 1) = v16;
          }
        }
        v33 = &v10[2 * v13];
        v35 = *(v33 - 1);
        v34 = v33 - 1;
        v36 = v35;
        v37 = v34 - 1;
        v38 = v10[3];
        v39 = *((float *)a2 - 3);
        if (v35 >= v38)
        {
          if (v39 < v36)
          {
            v41 = *v37;
            *v37 = *((float *)a2 - 4);
            *((float *)a2 - 4) = v41;
            *v34 = v39;
            *((float *)a2 - 3) = v36;
            v42 = *v34;
            v43 = v10[3];
            if (*v34 < v43)
            {
              v44 = *((_DWORD *)v10 + 2);
              v10[2] = *v37;
              *(_DWORD *)v37 = v44;
              v10[3] = v42;
              *v34 = v43;
            }
          }
        }
        else
        {
          v40 = *((_DWORD *)v10 + 2);
          if (v39 < v36)
          {
            v10[2] = *((float *)a2 - 4);
            *((_DWORD *)a2 - 4) = v40;
            v10[3] = v39;
            goto LABEL_36;
          }
          v10[2] = *v37;
          *(_DWORD *)v37 = v40;
          v10[3] = v36;
          *v34 = v38;
          v48 = *((float *)a2 - 3);
          if (v48 < v38)
          {
            *v37 = *((float *)a2 - 4);
            *((_DWORD *)a2 - 4) = v40;
            *v34 = v48;
LABEL_36:
            *((float *)a2 - 3) = v38;
          }
        }
        v49 = &v10[2 * v13];
        v51 = v49[3];
        v50 = v49 + 3;
        v52 = v51;
        v53 = v50 - 1;
        v54 = v10[5];
        v55 = *((float *)a2 - 5);
        if (v51 >= v54)
        {
          if (v55 < v52)
          {
            v57 = *v53;
            *v53 = *((float *)a2 - 6);
            *((float *)a2 - 6) = v57;
            *v50 = v55;
            *((float *)a2 - 5) = v52;
            v58 = *v50;
            v59 = v10[5];
            if (*v50 < v59)
            {
              v60 = *((_DWORD *)v10 + 4);
              v10[4] = *v53;
              *(_DWORD *)v53 = v60;
              v10[5] = v58;
              *v50 = v59;
            }
          }
        }
        else
        {
          v56 = *((_DWORD *)v10 + 4);
          if (v55 < v52)
          {
            v10[4] = *((float *)a2 - 6);
            *((_DWORD *)a2 - 6) = v56;
            v10[5] = v55;
            goto LABEL_45;
          }
          v10[4] = *v53;
          *(_DWORD *)v53 = v56;
          v10[5] = v52;
          *v50 = v54;
          v61 = *((float *)a2 - 5);
          if (v61 < v54)
          {
            *v53 = *((float *)a2 - 6);
            *((_DWORD *)a2 - 6) = v56;
            *v50 = v61;
LABEL_45:
            *((float *)a2 - 5) = v54;
          }
        }
        v62 = *v17;
        v63 = *v34;
        v64 = *v50;
        if (*v17 >= *v34)
        {
          v65 = *(_DWORD *)v14;
          if (v64 >= v62)
          {
            v63 = *v17;
          }
          else
          {
            v66 = *(_DWORD *)v53;
            *v14 = *v53;
            *(_DWORD *)v53 = v65;
            *v17 = v64;
            *v50 = v62;
            if (v64 >= v63)
            {
              v63 = v64;
              v65 = v66;
            }
            else
            {
              v65 = *(_DWORD *)v37;
              *(_DWORD *)v37 = v66;
              *(_DWORD *)v14 = v65;
              *v34 = v64;
              *v17 = v63;
            }
          }
        }
        else
        {
          v65 = *(_DWORD *)v37;
          if (v64 >= v62)
          {
            *v37 = *v14;
            *(_DWORD *)v14 = v65;
            *v34 = v62;
            *v17 = v63;
            if (v64 < v63)
            {
              v67 = *(_DWORD *)v53;
              *v14 = *v53;
              *(_DWORD *)v53 = v65;
              *v17 = v64;
              *v50 = v63;
              v63 = v64;
              v65 = v67;
            }
          }
          else
          {
            *v37 = *v53;
            *(_DWORD *)v53 = v65;
            *v34 = v64;
            *v50 = v63;
            v65 = *(_DWORD *)v14;
            v63 = v62;
          }
        }
        v68 = *v10;
        *(_DWORD *)v10 = v65;
        *v14 = v68;
        v69 = *((_DWORD *)v10 + 1);
        v10[1] = v63;
        *(_DWORD *)v17 = v69;
        --a4;
        if ((a5 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v46 = *v10;
        v47 = v10[1];
LABEL_58:
        v70 = 0;
        do
        {
          v71 = v10[v70 + 3];
          v70 += 2;
        }
        while (v71 < v47);
        v72 = &v10[v70];
        v73 = a2;
        if (v70 == 2)
        {
          v76 = a2;
          while (v72 < (float *)v76)
          {
            v74 = v76 - 8;
            v77 = *((float *)v76 - 1);
            v76 -= 8;
            if (v77 < v47)
              goto LABEL_66;
          }
          v74 = v76;
          v10 = v72;
        }
        else
        {
          do
          {
            v74 = v73 - 8;
            v75 = *((float *)v73 - 1);
            v73 -= 8;
          }
          while (v75 >= v47);
LABEL_66:
          v10 = v72;
          if (v72 < (float *)v74)
          {
            v78 = (float *)v74;
            do
            {
              v79 = *v10;
              *v10 = *v78;
              *v78 = v79;
              v80 = *((_DWORD *)v10 + 1);
              v10[1] = v78[1];
              *((_DWORD *)v78 + 1) = v80;
              do
              {
                v81 = v10[3];
                v10 += 2;
              }
              while (v81 < v47);
              do
              {
                v82 = *(v78 - 1);
                v78 -= 2;
              }
              while (v82 >= v47);
            }
            while (v10 < v78);
          }
        }
        if (v10 - 2 != v9)
        {
          *v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *(v10 - 2) = v46;
        *(v10 - 1) = v47;
        if (v72 < (float *)v74)
        {
LABEL_77:
          result = (float *)sub_2396E9D20(v9, v10 - 2, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v83 = sub_2396EA700(v9, v10 - 2);
        result = (float *)sub_2396EA700(v10, (float *)a2);
        if (!(_DWORD)result)
        {
          if (v83)
            continue;
          goto LABEL_77;
        }
        a2 = (char *)(v10 - 2);
        if (!v83)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_2396EA700(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;
  int v25;
  float v26;
  int v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  float v36;
  float v37;
  float *v38;
  uint64_t v39;
  int v40;
  float *v41;
  float v42;
  int v43;
  uint64_t v44;
  float *v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 < v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = a1[3];
      v10 = a1[1];
      v11 = *(a2 - 1);
      if (v9 >= v10)
      {
        if (v11 < v9)
        {
          v30 = *((_DWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          v31 = a1[3];
          v32 = a1[1];
          if (v31 < v32)
          {
            v33 = *(_DWORD *)a1;
            *a1 = a1[2];
            *((_DWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        v12 = *(_DWORD *)a1;
        if (v11 >= v9)
        {
          *a1 = a1[2];
          *((_DWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          v37 = *(a2 - 1);
          if (v37 < v10)
          {
            a1[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_2396EAAAC(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_2396EAAAC(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 1);
      v20 = a1[7];
      if (v19 >= v20)
        return 1;
      v21 = *((_DWORD *)a1 + 6);
      a1[6] = *(a2 - 2);
      *((_DWORD *)a2 - 2) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      v22 = a1[7];
      v23 = a1[5];
      if (v22 >= v23)
        return 1;
      v24 = *((_DWORD *)a1 + 4);
      v25 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 6) = v24;
      a1[5] = v22;
      a1[7] = v23;
      v26 = a1[3];
      if (v22 >= v26)
        return 1;
      v27 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v25;
      *((_DWORD *)a1 + 4) = v27;
      a1[3] = v22;
      a1[5] = v26;
      v28 = a1[1];
      if (v22 >= v28)
        return 1;
      v29 = *a1;
      *(_DWORD *)a1 = v25;
      a1[2] = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      v13 = a1[1];
      v14 = a1 + 3;
      v15 = a1[3];
      v16 = a1[5];
      if (v15 < v13)
      {
        v17 = *a1;
        if (v16 >= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 >= v13)
            goto LABEL_30;
          a1[2] = a1[4];
          a1[4] = v17;
          v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          v18 = a1 + 1;
        }
        v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 < v15)
      {
        v34 = *((_DWORD *)a1 + 2);
        v35 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 2) = v35;
        *((_DWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 < v13)
        {
          v36 = *a1;
          *(_DWORD *)a1 = v35;
          a1[2] = v36;
          v18 = a1 + 1;
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = a1 + 4;
      while (1)
      {
        v42 = v38[1];
        if (v42 < v41[1])
          break;
LABEL_39:
        v41 = v38;
        v39 += 8;
        v38 += 2;
        if (v38 == a2)
          return 1;
      }
      v43 = *(_DWORD *)v38;
      v44 = v39;
      do
      {
        v45 = (float *)((char *)a1 + v44);
        v45[6] = *(float *)((char *)a1 + v44 + 16);
        v45[7] = *(float *)((char *)a1 + v44 + 20);
        if (v44 == -16)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 2 == a2;
        }
        v44 -= 8;
      }
      while (v42 < v45[3]);
      v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 6) = v43;
      *((float *)v46 + 7) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 2 == a2;
  }
}

float *sub_2396EAAAC(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v4 = a2[1];
  v5 = result[1];
  v6 = a3[1];
  if (v4 < v5)
  {
    v7 = *result;
    if (v6 >= v4)
    {
      *result = *a2;
      *a2 = v7;
      result[1] = v4;
      a2[1] = v5;
      v4 = a3[1];
      if (v4 >= v5)
        goto LABEL_11;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v4;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
      result[1] = v6;
    }
    a3[1] = v5;
    v4 = v5;
LABEL_11:
    v12 = a4[1];
    if (v12 >= v4)
      return result;
    goto LABEL_14;
  }
  if (v6 >= v4)
  {
    v4 = a3[1];
    v12 = a4[1];
    if (v12 >= v6)
      return result;
    goto LABEL_14;
  }
  v8 = *a2;
  *a2 = *a3;
  *a3 = v8;
  a2[1] = v6;
  a3[1] = v4;
  v9 = a2[1];
  v10 = result[1];
  if (v9 >= v10)
    goto LABEL_11;
  v11 = *result;
  *result = *a2;
  *a2 = v11;
  result[1] = v9;
  a2[1] = v10;
  v4 = a3[1];
  v12 = a4[1];
  if (v12 >= v4)
    return result;
LABEL_14:
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  a3[1] = v12;
  a4[1] = v4;
  v14 = a3[1];
  v15 = a2[1];
  if (v14 < v15)
  {
    v16 = *a2;
    *a2 = *a3;
    *a3 = v16;
    a2[1] = v14;
    a3[1] = v15;
    v17 = a2[1];
    v18 = result[1];
    if (v17 < v18)
    {
      v19 = *result;
      *result = *a2;
      *a2 = v19;
      result[1] = v17;
      a2[1] = v18;
    }
  }
  return result;
}

int *sub_2396EAC00(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  float v6;
  float *v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  int *v14;
  uint64_t v15;
  float v16;
  float v17;
  int *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  float v25;
  float v26;
  int *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float v33;
  int v34;
  float *v35;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  int *v40;
  float v41;
  float v42;
  float *v43;
  float v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    v37 = (unint64_t)(v4 - 2) >> 1;
    v38 = v37;
    do
    {
      if (v37 >= v38)
      {
        v39 = (2 * v38) | 1;
        v40 = (int *)&a1[8 * v39];
        if (2 * v38 + 2 < v4 && *((float *)v40 + 1) < *((float *)v40 + 3))
        {
          v40 += 2;
          v39 = 2 * v38 + 2;
        }
        v41 = *((float *)v40 + 1);
        v42 = *(float *)&a1[8 * v38 + 4];
        if (v41 >= v42)
        {
          v43 = (float *)&a1[8 * v38];
          v44 = *v43;
          do
          {
            v45 = v43;
            v43 = (float *)v40;
            *(_DWORD *)v45 = *v40;
            v45[1] = v41;
            if (v37 < v39)
              break;
            v46 = 2 * v39;
            v39 = (2 * v39) | 1;
            v40 = (int *)&a1[8 * v39];
            v47 = v46 + 2;
            if (v47 < v4 && *((float *)v40 + 1) < *((float *)v40 + 3))
            {
              v40 += 2;
              v39 = v47;
            }
            v41 = *((float *)v40 + 1);
          }
          while (v41 >= v42);
          *v43 = v44;
          v43[1] = v42;
        }
      }
      v23 = v38-- <= 0;
    }
    while (!v23);
  }
  v5 = (int *)a2;
  if (a2 != (char *)a3)
  {
    if (v3 < 16)
    {
      v6 = *((float *)a1 + 1);
      v7 = (float *)a2;
      do
      {
        v8 = v7[1];
        if (v8 < v6)
        {
          v9 = *v7;
          *v7 = *(float *)a1;
          *(float *)a1 = v9;
          v7[1] = v6;
          *((float *)a1 + 1) = v8;
          v6 = v8;
        }
        v7 += 2;
      }
      while (v7 != (float *)a3);
LABEL_25:
      v5 = a3;
      goto LABEL_26;
    }
    v10 = (float *)a2;
    while (1)
    {
      v11 = v10[1];
      v12 = *((float *)a1 + 1);
      if (v11 < v12)
      {
        v13 = *v10;
        *v10 = *(float *)a1;
        *(float *)a1 = v13;
        v10[1] = v12;
        *((float *)a1 + 1) = v11;
        if (v3 == 16 || *((float *)a1 + 3) >= *((float *)a1 + 5))
        {
          v14 = (int *)(a1 + 8);
          v15 = 1;
          v16 = *((float *)a1 + 3);
          if (v16 >= v11)
          {
LABEL_19:
            v17 = *(float *)a1;
            v18 = (int *)a1;
            do
            {
              v19 = v18;
              v18 = v14;
              *v19 = *v14;
              *((float *)v19 + 1) = v16;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v15)
                break;
              v20 = 2 * v15;
              v15 = (2 * v15) | 1;
              v14 = (int *)&a1[8 * v15];
              v21 = v20 + 2;
              if (v21 < v4 && *((float *)v14 + 1) < *((float *)v14 + 3))
              {
                v14 += 2;
                v15 = v21;
              }
              v16 = *((float *)v14 + 1);
            }
            while (v16 >= v11);
            *(float *)v18 = v17;
            *((float *)v18 + 1) = v11;
          }
        }
        else
        {
          v14 = (int *)(a1 + 16);
          v15 = 2;
          v16 = *((float *)a1 + 5);
          if (v16 >= v11)
            goto LABEL_19;
        }
      }
      v10 += 2;
      if (v10 == (float *)a3)
        goto LABEL_25;
    }
  }
LABEL_26:
  if (v3 >= 9)
  {
    v22 = (unint64_t)v3 >> 3;
    do
    {
      v24 = 0;
      v25 = *(float *)a1;
      v26 = *((float *)a1 + 1);
      v27 = (int *)a1;
      do
      {
        v28 = v27;
        v27 += 2 * v24 + 2;
        v29 = 2 * v24;
        v24 = (2 * v24) | 1;
        v30 = v29 + 2;
        if (v30 < v22 && *((float *)v27 + 1) < *((float *)v27 + 3))
        {
          v27 += 2;
          v24 = v30;
        }
        *v28 = *v27;
        v28[1] = v27[1];
      }
      while (v24 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
      if (v27 == (int *)(a2 - 8))
      {
        *(float *)v27 = v25;
      }
      else
      {
        *v27 = *((_DWORD *)a2 - 2);
        v27[1] = *((_DWORD *)a2 - 1);
        *((float *)a2 - 2) = v25;
        *((float *)a2 - 1) = v26;
        v31 = (char *)v27 - a1 + 8;
        if (v31 < 9)
          goto LABEL_30;
        v32 = (((unint64_t)v31 >> 3) - 2) >> 1;
        v33 = *(float *)&a1[8 * v32 + 4];
        v26 = *((float *)v27 + 1);
        if (v33 >= v26)
          goto LABEL_30;
        v34 = *v27;
        do
        {
          v35 = (float *)v27;
          v27 = (int *)&a1[8 * v32];
          *(_DWORD *)v35 = *v27;
          v35[1] = v33;
          if (!v32)
            break;
          v32 = (v32 - 1) >> 1;
          v33 = *(float *)&a1[8 * v32 + 4];
        }
        while (v33 < v26);
        *v27 = v34;
      }
      *((float *)v27 + 1) = v26;
LABEL_30:
      a2 -= 8;
      v23 = v22-- <= 2;
    }
    while (!v23);
  }
  return v5;
}

BOOL sub_2396EAFAC(uint64_t a1, uint64_t *a2, float *a3, uint64_t a4)
{
  int *v5;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  void *exception;
  uint64_t v22;
  float v23;

  if (*(_QWORD *)(a1 + 40))
  {
    v5 = *(int **)(a1 + 24);
    if (!v5)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x23B83DB6C](exception, "[nanoflann] findNeighbors() called before building the index.");
      __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v7 = *(float *)(a4 + 4);
    v23 = 0.0;
    v22 = 0;
    v8 = *a3;
    v9 = *(float *)(a1 + 60);
    v10 = 0.0;
    if (*a3 < v9)
    {
      v10 = (float)(v8 - v9) * (float)(v8 - v9);
      *(float *)&v22 = v10;
      v11 = *(float *)(a1 + 64);
      if (v8 <= v11)
      {
LABEL_5:
        v12 = a3[1];
        v13 = *(float *)(a1 + 68);
        if (v12 >= v13)
          goto LABEL_6;
        goto LABEL_14;
      }
    }
    else
    {
      v11 = *(float *)(a1 + 64);
      if (v8 <= v11)
        goto LABEL_5;
    }
    *(float *)&v22 = (float)(v8 - v11) * (float)(v8 - v11);
    v10 = v10 + *(float *)&v22;
    v12 = a3[1];
    v13 = *(float *)(a1 + 68);
    if (v12 >= v13)
    {
LABEL_6:
      v14 = *(float *)(a1 + 72);
      if (v12 <= v14)
        goto LABEL_7;
      goto LABEL_15;
    }
LABEL_14:
    *((float *)&v22 + 1) = (float)(v12 - v13) * (float)(v12 - v13);
    v10 = v10 + *((float *)&v22 + 1);
    v14 = *(float *)(a1 + 72);
    if (v12 <= v14)
    {
LABEL_7:
      v15 = 1.0;
      v16 = a3[2];
      v17 = *(float *)(a1 + 76);
      if (v16 >= v17)
        goto LABEL_8;
      goto LABEL_16;
    }
LABEL_15:
    *((float *)&v22 + 1) = (float)(v12 - v14) * (float)(v12 - v14);
    v10 = v10 + *((float *)&v22 + 1);
    v15 = 1.0;
    v16 = a3[2];
    v17 = *(float *)(a1 + 76);
    if (v16 >= v17)
    {
LABEL_8:
      v18 = v7 + v15;
      v19 = *(float *)(a1 + 80);
      if (v16 <= v19)
      {
LABEL_10:
        sub_2396EB16C((uint64_t *)a1, a2, a3, v5, (uint64_t)&v22, v10, v18);
        return a2[3] == a2[2];
      }
LABEL_9:
      v23 = (float)(v16 - v19) * (float)(v16 - v19);
      v10 = v10 + v23;
      goto LABEL_10;
    }
LABEL_16:
    v23 = (float)(v16 - v17) * (float)(v16 - v17);
    v10 = v10 + v23;
    v18 = v7 + v15;
    v19 = *(float *)(a1 + 80);
    if (v16 <= v19)
      goto LABEL_10;
    goto LABEL_9;
  }
  return 0;
}

void sub_2396EB158(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2396EB16C(uint64_t *a1, uint64_t *a2, float *a3, int *a4, uint64_t a5, float a6, float a7)
{
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  float *v37;
  float v38;
  float v39;
  unint64_t v40;
  float *v41;
  _DWORD *v42;
  unint64_t v43;
  float v44;
  uint64_t v45;

  v13 = *((_QWORD *)a4 + 2);
  if (!v13 && !*((_QWORD *)a4 + 3))
  {
    v28 = *a4;
    if ((int)v28 < a4[1])
    {
      v30 = a2[1];
      v29 = a2[2];
      v31 = *a2;
      v32 = *(float *)(v30 + 4 * v29 - 4);
      v33 = *a1;
      v34 = (uint64_t *)a1[18];
      v35 = *v34;
      do
      {
        v36 = *(_DWORD *)(v33 + 4 * v28);
        v37 = (float *)(v35 + 4 * *((int *)v34 + 7) * (uint64_t)v36);
        v38 = a3[2] - v37[2];
        v39 = (float)((float)((float)((float)(*a3 - *v37) * (float)(*a3 - *v37)) + 0.0)
                    + (float)((float)(a3[1] - v37[1]) * (float)(a3[1] - v37[1])))
            + (float)(v38 * v38);
        if (v39 < v32)
        {
          v40 = a2[3];
          if (v40)
          {
            v41 = (float *)(v30 + 4 * v40);
            v42 = (_DWORD *)(*a2 + 4 * v40);
            v43 = a2[3];
            do
            {
              v44 = *(v41 - 1);
              if (v44 <= v39)
                break;
              if (v43 < v29)
              {
                *v41 = v44;
                *v42 = *(v42 - 1);
              }
              --v41;
              --v42;
              --v43;
            }
            while (v43);
          }
          else
          {
            v43 = 0;
          }
          if (v43 < v29)
          {
            v45 = 4 * v43;
            *(float *)(v30 + v45) = v39;
            *(_DWORD *)(v31 + v45) = v36;
          }
          if (v40 < v29)
            a2[3] = v40 + 1;
        }
        ++v28;
      }
      while (v28 < a4[1]);
    }
    return 1;
  }
  v14 = *a4;
  v15 = a3[v14];
  v16 = *((float *)a4 + 1);
  v17 = *((float *)a4 + 2);
  v18 = v15 - v16;
  v19 = v15 - v17;
  v20 = (float)(v15 - v16) + (float)(v15 - v17);
  v21 = *((_QWORD *)a4 + 3);
  if (v20 >= 0.0)
    v22 = *((_QWORD *)a4 + 3);
  else
    v22 = *((_QWORD *)a4 + 2);
  if (v20 >= 0.0)
    v23 = v13;
  else
    v23 = v21;
  result = sub_2396EB16C(a1, a2, a3, v22, a5, a6, a7);
  if ((_DWORD)result)
  {
    v25 = v18 * v18;
    if (v20 < 0.0)
      v25 = v19 * v19;
    v26 = *(float *)(a5 + 4 * v14);
    v27 = (float)(v25 + a6) - v26;
    *(float *)(a5 + 4 * v14) = v25;
    if ((float)(v27 * a7) > *(float *)(a2[1] + 4 * a2[2] - 4)
      || (result = sub_2396EB16C(a1, a2, a3, v23, a5, v27, a7), (_DWORD)result))
    {
      *(float *)(a5 + 4 * v14) = v26;
      return 1;
    }
  }
  return result;
}

void sub_2396EB388()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396EB39C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_250AE3668;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2396EB3FC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_250AE3668;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_2396EB444(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, int a6, int a7, int a8, float32x4_t _Q0, float32x4_t a10, double a11, float32x2_t a12, uint64_t a13, uint64_t a14, float *__p, float *a16, unint64_t a17, char *a18, char *a19, unint64_t a20,__int128 a21,float32x4_t a22,__int128 a23,unsigned __int32 a24)
{
  uint64_t v25;
  uint64_t v26;
  char **v27;
  float *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t **v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  float *v52;
  int *v53;
  int *v54;
  float *v55;
  uint64_t v56;
  unint64_t v57;
  float *v58;
  int32x2_t *v59;
  float32x2_t v60;
  float32x2_t v61;
  float *v62;
  int v63;
  float32x2_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  float *v69;
  unint64_t v70;
  float *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  __n128 *v75;
  float32x4_t *v76;
  uint64_t v77;
  int v78;
  float v79;
  float v80;
  float v81;
  float *v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float *v89;
  float v90;
  float v91;
  int32x4_t v94;
  float32x4_t v95;
  unsigned __int32 v96;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float32x4_t v108;
  int8x16_t v109;
  float32x2_t v110;
  float32x4_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  __n128 *v118;
  float32x4_t *v119;
  uint64_t v120;
  int v121;
  float *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  int64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _BYTE *v132;
  char *v133;
  unint64_t v134;
  char *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  __n128 *v139;
  float32x4_t *v140;
  uint64_t v141;
  uint64_t v142;
  int32x2_t v143;
  float32x2_t v144;
  float32x4_t vars0;

  v25 = *a2;
  a18 = 0;
  a19 = 0;
  a20 = 0;
  if (!**(_BYTE **)(a1 + 80))
  {
    __p = 0;
    a16 = 0;
    a17 = 0;
    v28 = (float *)(**(_QWORD **)(a1 + 8) + 12 * v25);
    if (**(float **)(a1 + 24) <= 0.00000011921)
    {
      v40 = 0;
      v37 = (unint64_t **)(a1 + 16);
      v38 = *(unint64_t **)(a1 + 16);
      v39 = *v38;
      _CF = 1;
      v47 = *v38;
      if (!*v38)
      {
LABEL_19:
        if (!_CF)
          a19 = &v40[4 * v39];
LABEL_21:
        vars0 = 0uLL;
        if (v39)
        {
          if (v39 >> 62)
            sub_2394189F8();
          v49 = operator new(4 * v39);
          vars0.i64[0] = (uint64_t)v49;
          memset_pattern16(v49, &unk_239ECEF60, 4 * v39);
          vars0.i64[1] = (uint64_t)v49 + 4 * v39;
          v50 = *(_QWORD *)(a1 + 32);
          v51 = *v38;
          a22.i64[0] = (uint64_t)a18;
          a22.i64[1] = (uint64_t)v49;
          a23 = v51;
          if (!v51)
          {
LABEL_25:
            *(_QWORD *)((char *)&a21 + 4) = 32;
            BYTE12(a21) = 1;
            sub_2396EAFAC(v50, (uint64_t *)&a22, v28, (uint64_t)&a21 + 4);
            if (v49)
              operator delete(v49);
LABEL_27:
            v52 = __p;
            goto LABEL_28;
          }
        }
        else
        {
          v49 = 0;
          v50 = *(_QWORD *)(a1 + 32);
          v51 = *v38;
          a22 = (float32x4_t)(unint64_t)a18;
          a23 = v51;
          if (!v51)
            goto LABEL_25;
        }
        *((_DWORD *)v49 + v51 - 1) = 2139095039;
        goto LABEL_25;
      }
    }
    else
    {
      v29 = *(_QWORD *)(a1 + 32);
      v30 = *(_QWORD *)(a1 + 40);
      a22.i32[0] = **(_DWORD **)(a1 + 24);
      a22.i64[1] = (uint64_t)&__p;
      a16 = 0;
      sub_2396E9848(v29, a22.f32, v28, v30);
      v32 = *(_QWORD *)a22.i64[1];
      v31 = *(_QWORD *)(a22.i64[1] + 8);
      if (*(_BYTE *)(v30 + 8))
      {
        v33 = 126 - 2 * __clz(((char *)a16 - (char *)__p) >> 3);
        if (a16 == __p)
          v34 = 0;
        else
          v34 = v33;
        sub_2396E9D20(__p, (char *)a16, (uint64_t)&vars0, v34, 1);
      }
      v35 = v31 - v32;
      v36 = (v31 - v32) >> 3;
      v37 = (unint64_t **)(a1 + 16);
      v38 = *(unint64_t **)(a1 + 16);
      v39 = *v38;
      v40 = a18;
      if (v36 > *v38)
      {
        if (v36 <= (uint64_t)(a20 - (_QWORD)a18) >> 2)
          goto LABEL_90;
        if ((v35 & 0x8000000000000000) != 0)
          sub_2394189F8();
        v41 = a19;
        v42 = operator new(v35 >> 1);
        v43 = v41 - v40;
        v44 = &v42[(v41 - v40) & 0xFFFFFFFFFFFFFFFCLL];
        v45 = v44;
        if (v41 != v40)
        {
          if ((unint64_t)(v43 - 4) < 0x2C)
          {
            v45 = &v42[(v41 - v40) & 0xFFFFFFFFFFFFFFFCLL];
            do
            {
LABEL_87:
              v121 = *((_DWORD *)v41 - 1);
              v41 -= 4;
              *((_DWORD *)v45 - 1) = v121;
              v45 -= 4;
            }
            while (v41 != v40);
            goto LABEL_88;
          }
          v45 = &v42[(v41 - v40) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(&v41[-(v43 & 0xFFFFFFFFFFFFFFFCLL)] - v42) < 0x20)
            goto LABEL_87;
          v114 = v43 >> 2;
          v115 = ((unint64_t)(v43 - 4) >> 2) + 1;
          v116 = 4 * (v115 & 0x7FFFFFFFFFFFFFF8);
          v117 = &v41[-v116];
          v45 = &v44[-v116];
          v118 = (__n128 *)&v42[4 * v114 - 16];
          v119 = (float32x4_t *)(v41 - 16);
          v120 = v115 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            a10 = v119[-1];
            _Q0 = *v119;
            v118[-1] = (__n128)a10;
            *v118 = (__n128)_Q0;
            v118 -= 2;
            v119 -= 2;
            v120 -= 8;
          }
          while (v120);
          v41 = v117;
          if (v115 != (v115 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_87;
        }
LABEL_88:
        a18 = v45;
        a19 = v44;
        a20 = (unint64_t)&v42[4 * v36];
        if (v40)
          operator delete(v40);
LABEL_90:
        v52 = __p;
        v122 = a16;
        if (__p != a16)
        {
          v123 = a19;
          while (1)
          {
            if ((unint64_t)v123 < a20)
            {
              *(float *)v123 = *v52;
              v124 = v123 + 4;
            }
            else
            {
              v125 = v25;
              v126 = a18;
              v127 = v123 - a18;
              v128 = (v123 - a18) >> 2;
              v129 = v128 + 1;
              if ((unint64_t)(v128 + 1) >> 62)
                sub_2394189F8();
              v130 = a20 - (_QWORD)a18;
              if ((uint64_t)(a20 - (_QWORD)a18) >> 1 > v129)
                v129 = v130 >> 1;
              if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL)
                v131 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v131 = v129;
              if (v131)
              {
                if (v131 >> 62)
                  sub_239418A80();
                v132 = operator new(4 * v131);
                v133 = &v132[4 * v128];
                *(float *)v133 = *v52;
                v124 = v133 + 4;
                if (v123 != v126)
                {
LABEL_104:
                  v134 = v123 - 4 - v126;
                  if (v134 < 0xBC
                    || &v132[v127 - 4 - (v134 & 0xFFFFFFFFFFFFFFFCLL)] > &v132[v127 - 4]
                    || &v123[-(v134 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v123 - 4
                    || (unint64_t)(v123 - v132 - v127) < 0x20)
                  {
                    v135 = v123;
                    v25 = v125;
                  }
                  else
                  {
                    v137 = (v134 >> 2) + 1;
                    v138 = 4 * (v137 & 0x7FFFFFFFFFFFFFF8);
                    v135 = &v123[-v138];
                    v133 -= v138;
                    v139 = (__n128 *)&v132[4 * v128 - 16];
                    v140 = (float32x4_t *)(v123 - 16);
                    v141 = v137 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      a10 = v140[-1];
                      _Q0 = *v140;
                      v139[-1] = (__n128)a10;
                      *v139 = (__n128)_Q0;
                      v139 -= 2;
                      v140 -= 2;
                      v141 -= 8;
                    }
                    while (v141);
                    v25 = v125;
                    if (v137 == (v137 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_107:
                      a18 = v133;
                      a19 = v124;
                      a20 = (unint64_t)&v132[4 * v131];
                      if (!v126)
                        goto LABEL_93;
LABEL_111:
                      operator delete(v126);
                      goto LABEL_93;
                    }
                  }
                  do
                  {
                    v136 = *((_DWORD *)v135 - 1);
                    v135 -= 4;
                    *((_DWORD *)v133 - 1) = v136;
                    v133 -= 4;
                  }
                  while (v135 != v126);
                  goto LABEL_107;
                }
              }
              else
              {
                v132 = 0;
                v133 = (char *)(4 * v128);
                *(float *)(4 * v128) = *v52;
                v124 = (char *)(4 * v128 + 4);
                if (v123 != v126)
                  goto LABEL_104;
              }
              v25 = v125;
              a18 = v133;
              a19 = v124;
              a20 = (unint64_t)&v132[4 * v131];
              if (v126)
                goto LABEL_111;
            }
LABEL_93:
            a19 = v124;
            v52 += 2;
            v123 = v124;
            if (v52 == v122)
              goto LABEL_27;
          }
        }
LABEL_28:
        if (v52)
        {
          a16 = v52;
          operator delete(v52);
        }
        goto LABEL_30;
      }
      v48 = (a19 - a18) >> 2;
      _CF = v39 >= v48;
      v47 = v39 - v48;
      if (v39 <= v48)
        goto LABEL_19;
    }
    sub_23942CB44((uint64_t)&a18, v47);
    v38 = *v37;
    v39 = **v37;
    goto LABEL_21;
  }
  v26 = **(_QWORD **)(a1 + 72);
  v27 = (char **)(v26 + 24 * v25);
  if (&a18 != v27)
    sub_23942156C(&a18, *v27, *(char **)(v26 + 24 * v25 + 8), (uint64_t)(*(_QWORD *)(v26 + 24 * v25 + 8) - (_QWORD)*v27) >> 2);
LABEL_30:
  __p = 0;
  a16 = 0;
  a17 = 0;
  v53 = (int *)a18;
  v54 = (int *)a19;
  if (a18 == a19)
  {
    v58 = 0;
    v78 = 0;
    v88 = 0.0;
    v87 = 0.0;
    v86 = 0.0;
    v85 = 0.0;
    v84 = 0.0;
    v83 = 0.0;
    v81 = 0.0;
    v80 = 0.0;
    v79 = 0.0;
    goto LABEL_72;
  }
  v55 = 0;
  v56 = v25;
  v57 = 0;
  v58 = 0;
  v142 = v56;
  v59 = (int32x2_t *)(**(_QWORD **)(a1 + 48) + 12 * v56);
  a12.i32[0] = v59[1].i32[0];
  v60 = (float32x2_t)*v59;
  v61 = (float32x2_t)vdup_lane_s32(*v59, 1);
  v143 = *v59;
  v144 = a12;
  do
  {
    v63 = *v53;
    v64 = (float32x2_t *)(**(_QWORD **)(a1 + 48) + 12 * *v53);
    _Q0.i32[0] = v64[1].i32[0];
    *(float32x2_t *)a10.f32 = *v64;
    if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(v60, *v64), v61, *v64, 1), *(float32x2_t *)_Q0.f32, a12).f32[0]) > **(float **)(a1 + 88))
    {
      if ((unint64_t)v58 < v57)
      {
        *(_DWORD *)v58 = v63;
        v62 = v58 + 1;
LABEL_33:
        a16 = v62;
        v58 = v62;
        goto LABEL_34;
      }
      v65 = v58 - v55;
      v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 62)
        sub_2394189F8();
      if ((uint64_t)(v57 - (_QWORD)v55) >> 1 > v66)
        v66 = (uint64_t)(v57 - (_QWORD)v55) >> 1;
      if (v57 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
        v67 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v67 = v66;
      if (v67)
      {
        if (v67 >> 62)
          sub_239418A80();
        v68 = operator new(4 * v67);
        v60 = (float32x2_t)v143;
        a12 = v144;
        v69 = (float *)&v68[4 * v65];
        *(_DWORD *)v69 = *v53;
        v62 = v69 + 1;
        if (v58 == v55)
          goto LABEL_51;
      }
      else
      {
        v68 = 0;
        v69 = (float *)(4 * v65);
        *(_DWORD *)(4 * v65) = v63;
        v62 = (float *)(4 * v65 + 4);
        if (v58 == v55)
          goto LABEL_51;
      }
      v70 = (char *)(v58 - 1) - (char *)v55;
      if (v70 >= 0xBC)
      {
        if (&v68[(char *)v58 - (char *)v55 - 4 - (v70 & 0xFFFFFFFFFFFFFFFCLL)] > &v68[(char *)v58 - (char *)v55 - 4])
        {
          v71 = v58;
        }
        else if ((float *)((char *)v58 - (v70 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v58 - 1)
        {
          v71 = v58;
        }
        else if ((unint64_t)((char *)v55 - v68) >= 0x20)
        {
          v73 = (v70 >> 2) + 1;
          v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
          v71 = &v58[v74 / 0xFFFFFFFFFFFFFFFCLL];
          v69 = (float *)((char *)v69 - v74);
          v75 = (__n128 *)&v68[4 * v65 - 16];
          v76 = (float32x4_t *)(v58 - 4);
          v77 = v73 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            a10 = v76[-1];
            _Q0 = *v76;
            v75[-1] = (__n128)a10;
            *v75 = (__n128)_Q0;
            v75 -= 2;
            v76 -= 2;
            v77 -= 8;
          }
          while (v77);
          if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_51;
        }
        else
        {
          v71 = v58;
        }
      }
      else
      {
        v71 = v58;
      }
      do
      {
        v72 = *((_DWORD *)v71-- - 1);
        *((_DWORD *)v69-- - 1) = v72;
      }
      while (v71 != v55);
LABEL_51:
      v57 = (unint64_t)&v68[4 * v67];
      __p = v69;
      a16 = v62;
      a17 = v57;
      if (v55)
      {
        operator delete(v55);
        v60 = (float32x2_t)v143;
        a12 = v144;
      }
      v55 = v69;
      goto LABEL_33;
    }
LABEL_34:
    ++v53;
  }
  while (v53 != v54);
  if (__p == v58)
  {
    v78 = 0;
    v88 = 0.0;
    v87 = 0.0;
    v86 = 0.0;
    v85 = 0.0;
    v84 = 0.0;
    v83 = 0.0;
    v81 = 0.0;
    v80 = 0.0;
    v79 = 0.0;
    v25 = v142;
  }
  else
  {
    v78 = 0;
    v79 = 0.0;
    v80 = 0.0;
    v81 = 0.0;
    v82 = __p;
    v83 = 0.0;
    v84 = 0.0;
    v85 = 0.0;
    v86 = 0.0;
    v87 = 0.0;
    v88 = 0.0;
    v25 = v142;
    do
    {
      if ((*(_DWORD *)v82 & 0x80000000) == 0)
      {
        ++v78;
        v89 = (float *)(**(_QWORD **)(a1 + 8) + 12 * *(unsigned int *)v82);
        v90 = v89[1];
        v91 = v89[2];
        v79 = v79 + *v89;
        v80 = v80 + v90;
        v81 = v81 + v91;
        v83 = v83 + (float)(*v89 * *v89);
        v84 = v84 + (float)(*v89 * v90);
        v85 = v85 + (float)(*v89 * v91);
        v86 = v86 + (float)(v90 * v90);
        v87 = v87 + (float)(v90 * v91);
        v88 = v88 + (float)(v91 * v91);
      }
      ++v82;
    }
    while (v82 != v58);
    v58 = __p;
  }
LABEL_72:
  a22.i64[0] = __PAIR64__(LODWORD(v80), LODWORD(v79));
  a22.i64[1] = __PAIR64__(LODWORD(v83), LODWORD(v81));
  *(_QWORD *)&a23 = __PAIR64__(LODWORD(v85), LODWORD(v84));
  *((_QWORD *)&a23 + 1) = __PAIR64__(LODWORD(v87), LODWORD(v86));
  a24 = LODWORD(v88);
  if (v78 >= 3)
  {
    _Q0.f32[0] = (float)v78;
    a10.i32[0] = a24;
    v95 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
    v96 = vdivq_f32(a10, _Q0).u32[0];
    _Q1 = (int32x4_t)vdivq_f32(a22, v95);
    a22 = (float32x4_t)_Q1;
    a23 = (__int128)vdivq_f32((float32x4_t)a23, v95);
    a24 = v96;
    _Q4 = (float32x4_t)vzip1q_s32(_Q1, _Q1);
    __asm { FMLS            S2, S1, V4.S[0] }
    _S3 = _Q1.i32[2];
    __asm { FMLS            S0, S3, V1.S[2] }
    v102 = (float32x4_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 0xCuLL);
    v103 = (float32x4_t)vzip2q_s32(vtrn1q_s32(_Q1, (int32x4_t)v102), (int32x4_t)v102);
    v102.i64[0] = vrev64q_s32((int32x4_t)a23).u64[0];
    v102.i64[1] = *((_QWORD *)&a23 + 1);
    v94 = (int32x4_t)vmlsq_f32(v102, v103, _Q4);
  }
  else
  {
    _Q1.i64[0] = 0;
    _Q1.i32[2] = 0;
    _S2 = 0;
    _Q0.i32[0] = 0;
    v94 = 0uLL;
  }
  v104 = **(_QWORD **)(a1 + 56) + 36 * v25;
  *(_DWORD *)v104 = _S2;
  *(_DWORD *)(v104 + 4) = v94.i32[1];
  *(int32x4_t *)(v104 + 8) = v94;
  LODWORD(v105) = v94.i32[0];
  HIDWORD(v105) = vextq_s8(*(int8x16_t *)&v94, *(int8x16_t *)&v94, 8uLL).i32[1];
  *(_QWORD *)(v104 + 24) = v105;
  *(_DWORD *)(v104 + 32) = _Q0.i32[0];
  v106 = **(_QWORD **)(a1 + 64) + 12 * v25;
  *(_QWORD *)v106 = _Q1.i64[0];
  *(_DWORD *)(v106 + 8) = _Q1.i32[2];
  v107 = *(_QWORD *)(a1 + 8);
  a22.i32[0] = _S2;
  *(int8x16_t *)((char *)&a22 + 4) = vextq_s8((int8x16_t)vzip1q_s32(v94, v94), (int8x16_t)v94, 0xCuLL);
  v108 = (float32x4_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 0xCuLL);
  *(_QWORD *)((char *)&a23 + 4) = v108.i64[0];
  HIDWORD(a23) = v94.i32[3];
  a24 = _Q0.i32[0];
  sub_2396E2798(&a22, (uint64_t)&vars0, v108);
  v109 = (int8x16_t)vars0;
  v110 = (float32x2_t)vextq_s8(v109, v109, 8uLL).u64[0];
  v111 = vmulq_n_f32(vars0, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)vars0.f32, 1), *(float32x2_t *)vars0.f32, 1), v110, v110).f32[0]));
  vars0.i32[2] = v111.i32[2];
  vars0.i64[0] = v111.i64[0];
  if (!*(_BYTE *)(v107 + 80))
    sub_2394875CC();
  v112 = *(_QWORD *)(v107 + 56) + 12 * v25;
  v113 = vars0.i64[0];
  *(_DWORD *)(v112 + 8) = vars0.i32[2];
  *(_QWORD *)v112 = v113;
  if (v58)
  {
    a16 = v58;
    operator delete(v58);
  }
  if (a18)
  {
    a19 = a18;
    operator delete(a18);
  }
}

void sub_2396EBE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  void *v29;
  void *v31;

  if (v29)
    operator delete(v29);
  if (__p)
  {
    operator delete(__p);
    v31 = a28;
    if (!a28)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v31 = a28;
    if (!a28)
      goto LABEL_5;
  }
  operator delete(v31);
  _Unwind_Resume(exception_object);
}

void sub_2396EBE9C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2396EBEB0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_250AE36B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_2396EBEF8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250AE36B0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2396EBF28(uint64_t a1, uint64_t *a2, __n128 a3, float32x4_t a4)
{
  uint64_t v4;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  unint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x2_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x2_t *v31;
  float32x4_t v32;
  __n128 v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  __n128 v37;
  float32x2_t v38;
  _BYTE v39[20];
  float v40;
  float32x2_t v41;
  float v42;
  uint64_t v43;
  __int32 v44;
  uint64_t v45;
  __int32 v46;
  uint64_t v47;
  __int32 v48;
  simd_float3x3 v49;

  v4 = *a2;
  v6 = **(_QWORD **)(a1 + 24) + 36 * *a2;
  a3.n128_u64[0] = *(_QWORD *)v6;
  a3.n128_u32[2] = *(_DWORD *)(v6 + 8);
  v7 = (float32x4_t)a3;
  v33 = a3;
  a3.n128_u64[0] = *(_QWORD *)(v6 + 12);
  a3.n128_u32[2] = *(_DWORD *)(v6 + 20);
  v8 = (float32x4_t)a3;
  v34 = (int8x16_t)a3;
  a3.n128_u64[0] = *(_QWORD *)(v6 + 24);
  a3.n128_u32[2] = *(_DWORD *)(v6 + 32);
  v9 = (float32x4_t)a3;
  v35 = (int8x16_t)a3;
  v10 = **(_QWORD **)(a1 + 32) + 12 * *a2;
  a3.n128_u32[0] = *(_DWORD *)(v10 + 8);
  a4.i64[0] = *(_QWORD *)v10;
  v37 = a3;
  v38 = *(float32x2_t *)v10;
  a4.i32[2] = a3.n128_u32[0];
  v36 = a4;
  v11.i64[0] = 0;
  LODWORD(v12) = 0;
  HIDWORD(v12) = **(_DWORD **)(a1 + 40);
  v11.i64[1] = HIDWORD(v12);
  v49.columns[0] = (simd_float3)vaddq_f32(v7, (float32x4_t)HIDWORD(v12));
  v49.columns[2] = (simd_float3)vaddq_f32(v8, (float32x4_t)v12);
  v49.columns[1] = (simd_float3)vaddq_f32(v9, v11);
  v44 = v49.columns[0].i32[2];
  v46 = v49.columns[2].i32[2];
  v43 = v49.columns[0].i64[0];
  v45 = v49.columns[2].i64[0];
  v48 = v49.columns[1].i32[2];
  v47 = v49.columns[1].i64[0];
  sub_239A22AEC((uint64_t)&v43, (uint64_t)v39, v49);
  v13.f32[0] = v40;
  v14.f32[0] = v42;
  v19 = (float32x4_t)v33;
  v15 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v33.n128_u64[0], *(float *)v39), *(float32x2_t *)v34.i8, *(float32x2_t *)v39, 1), *(float32x2_t *)v35.i8, *(float32x4_t *)v39, 2);
  v16 = (float32x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
  v17 = (float32x2_t)vextq_s8(v34, v34, 8uLL).u64[0];
  v18 = (float32x2_t)vextq_s8(v35, v35, 8uLL).u64[0];
  *(float32x2_t *)v19.f32 = vmla_f32(vmla_lane_f32(vmul_f32(v16, *(float32x2_t *)v39), v17, *(float32x2_t *)v39, 1), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v39, *(int8x16_t *)v39, 8uLL), v18);
  v20 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v33.n128_u64[0], *(float *)&v39[12]), *(float32x2_t *)v34.i8, *(float32x2_t *)&v39[12], 1), *(float32x2_t *)v35.i8, v40);
  v21 = vmla_f32(vmla_lane_f32(vmul_f32(v16, *(float32x2_t *)&v39[12]), v17, *(float32x2_t *)&v39[12], 1), v13, v18);
  v22 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v33.n128_u64[0], v41.f32[0]), *(float32x2_t *)v34.i8, v41, 1), *(float32x2_t *)v35.i8, v42);
  v23 = vmla_f32(vmla_lane_f32(vmul_f32(v16, v41), v17, v41, 1), v14, v18);
  v14.i32[1] = v36.i32[1];
  v24.i64[1] = v37.n128_i64[1];
  *(float32x2_t *)v25.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v15, v36.f32[0]), v20, *(float32x2_t *)v36.f32, 1), v22, v37.n128_f32[0]);
  *(float32x2_t *)&v25.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v36.f32), v21, v38, 1), (float32x2_t)v37.n128_u64[0], v23);
  v26 = vsubq_f32(v36, v25);
  v27 = (float32x2_t *)(**(_QWORD **)(a1 + 8) + 12 * v4);
  v14.i32[0] = v27[1].i32[0];
  *(float32x2_t *)v24.f32 = *v27;
  v28 = v24;
  v28.i32[2] = v14.i32[0];
  *(float32x2_t *)v29.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v15, COERCE_FLOAT(*v27)), v20, *v27, 1), v22, v14.f32[0]);
  *(float32x2_t *)&v29.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *v27), v21, *v27, 1), v14, v23);
  v30 = (int8x16_t)vsubq_f32(vaddq_f32(v26, v29), v28);
  if (fabsf(*(float *)&v30.i32[2] + vaddv_f32(*(float32x2_t *)v30.i8)) != INFINITY)
  {
    v31 = (float32x2_t *)(**(_QWORD **)(a1 + 16) + 12 * v4);
    *(float32x2_t *)v19.f32 = *v31;
    v23.i32[0] = v31[1].i32[0];
    v19.i32[2] = v23.i32[0];
    v32 = vmlaq_n_f32(v28, v19, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v30.i8, *v31), (float32x2_t)vdup_lane_s32((int32x2_t)*v31, 1), *(float32x2_t *)v30.i8, 1), v23, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).f32[0]);
    v27[1].i32[0] = v32.i32[2];
    *v27 = *(float32x2_t *)v32.f32;
  }
}

char *sub_2396EC1C4(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  void *v21;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_2394189F8();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_239418A80();
    v7 = (char *)operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[80 * v6];
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = 0;
  *((_DWORD *)v8 + 18) = *(_DWORD *)(a2 + 72);
  *((_QWORD *)v8 + 7) = v10;
  *((_QWORD *)v8 + 8) = v11;
  v12 = v8 + 80;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v9;
    if (!v14)
      return v12;
    goto LABEL_23;
  }
  v15 = 0;
  do
  {
    v16 = &v8[v15];
    v17 = &v14[v15];
    *((_QWORD *)v16 - 9) = 0;
    *((_QWORD *)v16 - 8) = 0;
    *((_OWORD *)v16 - 5) = *(_OWORD *)&v14[v15 - 80];
    *((_QWORD *)v16 - 8) = *(_QWORD *)&v14[v15 - 64];
    *((_QWORD *)v17 - 9) = 0;
    *((_QWORD *)v17 - 8) = 0;
    *((_QWORD *)v17 - 10) = 0;
    *(_OWORD *)(v16 - 56) = *(_OWORD *)&v14[v15 - 56];
    *((_QWORD *)v16 - 4) = 0;
    *((_QWORD *)v16 - 3) = 0;
    *(_OWORD *)(v16 - 40) = *(_OWORD *)&v14[v15 - 40];
    *((_QWORD *)v16 - 3) = *(_QWORD *)&v14[v15 - 24];
    *((_QWORD *)v17 - 5) = 0;
    *((_QWORD *)v17 - 4) = 0;
    *((_QWORD *)v17 - 3) = 0;
    v18 = *(_QWORD *)&v14[v15 - 16];
    *((_DWORD *)v16 - 2) = *(_DWORD *)&v14[v15 - 8];
    *((_QWORD *)v16 - 2) = v18;
    v15 -= 80;
  }
  while (&v14[v15] != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = &v8[v15];
  a1[1] = v12;
  a1[2] = v9;
  if (v14 != v19)
  {
    do
    {
      v20 = (void *)*((_QWORD *)v14 - 5);
      if (v20)
      {
        *((_QWORD *)v14 - 4) = v20;
        operator delete(v20);
      }
      v21 = (void *)*((_QWORD *)v14 - 10);
      if (v21)
      {
        *((_QWORD *)v14 - 9) = v21;
        operator delete(v21);
      }
      v14 -= 80;
    }
    while (v14 != v19);
    v14 = v19;
  }
  if (v14)
LABEL_23:
    operator delete(v14);
  return v12;
}

uint64_t *sub_2396EC3A8()
{
  unsigned __int8 v0;
  const char *v2;
  const char *v3;
  const char *v4;
  int8x16_t v5;
  double v6;
  int32x4_t v7;
  const char *v8;
  int8x16_t v9;
  double v10;
  int32x4_t v11;
  const char *v12;
  int8x16_t v13;
  double v14;
  int32x4_t v15;
  const char *v16;
  int8x16_t v17;
  double v18;
  int32x4_t v19;
  const char *v20;
  int8x16_t v21;
  double v22;
  int32x4_t v23;
  const char *v24;
  double v25;
  int32x4_t v26;
  const char *v27;
  int8x16_t v28;
  double v29;
  int32x4_t v30;
  const char *v31;
  int8x16_t v32;
  double v33;
  int32x4_t v34;
  const char *v35;
  double v36;
  int16x8_t v37;
  const char *v38;
  double v39;
  double v40;
  int16x8_t v41;
  const char *v42;
  double v43;
  double v44;
  int16x8_t v45;
  const char *v46;
  double v47;
  double v48;
  int16x8_t v49;
  const char *v50;
  double v51;
  double v52;
  int16x8_t v53;
  const char *v54;
  double v55;
  double v56;
  int16x8_t v57;
  const char *v58;
  double v59;
  int16x8_t v60;
  int16x8_t v61;
  const char *v62;
  int16x8_t v63;
  double v64;
  int16x8_t v65;
  const char *v66;
  double v67;
  int32x4_t v68;
  const char *v69;
  double v70;
  int32x4_t v71;
  const char *v72;
  double v73;
  double v74;
  int16x8_t v75;
  const char *v76;
  double v77;
  int16x8_t v78;
  const char *v79;
  double v80;
  int16x8_t v81;
  const char *v82;
  int16x8_t v83;
  int16x8_t v84;
  const char *v85;
  double v86;
  double v87;
  int16x8_t v88;
  const char *v89;
  int16x8_t v90;
  double v91;
  int16x8_t v92;
  const char *v93;
  double v94;
  int16x8_t v95;
  const char *v96;
  double v97;
  int32x4_t v98;
  const char *v99;
  int16x8_t v100;
  int16x8_t v101;
  const char *v102;
  int16x8_t v103;
  int16x8_t v104;
  const char *v105;
  int16x8_t v106;
  int16x8_t v107;
  const char *v108;
  double v109;
  int16x8_t v110;
  int16x8_t v111;
  const char *v112;
  int16x8_t v113;
  int16x8_t v114;
  const char *v115;
  double v116;
  int16x8_t v117;
  const char *v118;
  double v119;
  int16x8_t v120;
  const char *v121;
  int16x8_t v122;
  int16x8_t v123;
  const char *v124;
  int16x8_t v125;
  int16x8_t v126;
  const char *v127;
  double v128;
  int32x4_t v129;
  const char *v130;
  double v131;
  double v132;
  int16x8_t v133;
  const char *v134;
  int16x8_t v135;
  int16x8_t v136;
  const char *v137;
  double v138;
  double v139;
  int16x8_t v140;
  const char *v141;
  int8x16_t v142;
  double v143;
  int32x4_t v144;
  const char *v145;
  int8x16_t v146;
  double v147;
  int32x4_t v148;
  const char *v149;
  int8x16_t v150;
  double v151;
  int32x4_t v152;
  const char *v153;
  double v154;
  double v155;
  int16x8_t v156;
  const char *v157;
  double v158;
  double v159;
  int16x8_t v160;
  const char *v161;
  int8x16_t v162;
  double v163;
  int32x4_t v164;
  const char *v165;
  double v166;
  int16x8_t v167;
  const char *v168;
  double v169;
  int16x8_t v170;
  int16x8_t v171;
  const char *v172;
  int8x16_t v173;
  double v174;
  int32x4_t v175;
  const char *v176;
  double v177;
  int16x8_t v178;
  const char *v179;
  double v180;
  int32x4_t v181;
  const char *v182;
  double v183;
  int32x4_t v184;
  const char *v185;
  double v186;
  int16x8_t v187;
  const char *v188;
  double v189;
  double v190;
  int16x8_t v191;
  const char *v192;
  int16x8_t v193;
  int16x8_t v194;
  const char *v195;
  double v196;
  int16x8_t v197;
  const char *v198;
  int16x8_t v199;
  double v200;
  int16x8_t v201;
  const char *v202;
  int8x16_t v203;
  double v204;
  int32x4_t v205;
  const char *v206;
  double v207;
  int32x4_t v208;
  const char *v209;
  double v210;
  int16x8_t v211;
  const char *v212;
  int16x8_t v213;
  double v214;
  int16x8_t v215;
  const char *v216;
  double v217;
  double v218;
  int16x8_t v219;
  const char *v220;
  double v221;
  int32x4_t v222;
  const char *v223;
  double v224;
  int32x4_t v225;
  const char *v226;
  double v227;
  int32x4_t v228;
  const char *v229;
  double v230;
  double v231;
  int16x8_t v232;
  const char *v233;
  double v234;
  double v235;
  int16x8_t v236;
  const char *v237;
  double v238;
  int32x4_t v239;
  const char *v240;
  int8x16_t v241;
  double v242;
  int32x4_t v243;
  const char *v244;
  int8x16_t v245;
  double v246;
  int32x4_t v247;
  const char *v248;
  double v249;
  double v250;
  int16x8_t v251;
  const char *v252;
  int8x16_t v253;
  double v254;
  int32x4_t v255;
  const char *v256;
  double v257;
  int32x4_t v258;
  const char *v259;
  int8x16_t v260;
  double v261;
  int32x4_t v262;
  const char *v263;
  double v264;
  int16x8_t v265;
  const char *v266;
  double v267;
  double v268;
  int16x8_t v269;
  const char *v270;
  int8x16_t v271;
  double v272;
  int32x4_t v273;
  const char *v274;
  int8x16_t v275;
  double v276;
  int32x4_t v277;
  const char *v278;
  double v279;
  int16x8_t v280;
  const char *v281;
  int8x16_t v282;
  double v283;
  int32x4_t v284;
  const char *v285;
  double v286;
  int32x4_t v287;
  const char *v288;
  double v289;
  int16x8_t v290;
  const char *v291;
  int16x8_t v292;
  int16x8_t v293;
  const char *v294;
  int16x8_t v295;
  int16x8_t v296;
  const char *v297;
  double v298;
  int16x8_t v299;
  double v300;
  int16x8_t v301;
  double v302;
  int16x8_t v303;
  double v304;
  int16x8_t v305;
  double v306;
  int16x8_t v307;
  int16x8_t v308;
  const char *v309;
  int16x8_t v310;
  double v311;
  double v312;
  int16x8_t v313;
  double v314;
  int16x8_t v315;
  const char *v316;
  double v317;
  int16x8_t v318;
  int16x8_t v319;
  const char *v320;
  double v321;
  int16x8_t v322;
  double v323;
  int16x8_t v324;
  double v325;
  double v326;
  int16x8_t v327;
  const char *v328;
  double v329;
  int16x8_t v330;
  int16x8_t v331;
  const char *v332;
  int16x8_t v333;
  double v334;
  int16x8_t v335;
  double v336;
  int32x4_t v337;
  const char *v338;
  double v339;
  double v340;
  int16x8_t v341;
  const char *v342;
  double v343;
  double v344;
  int16x8_t v345;
  const char *v346;
  double v347;
  int16x8_t v348;
  const char *v349;
  int8x16_t v350;
  double v351;
  int32x4_t v352;
  const char *v353;
  int8x16_t v354;
  double v355;
  int32x4_t v356;
  const char *v357;
  int8x16_t v358;
  double v359;
  int32x4_t v360;
  const char *v361;
  double v362;
  int32x4_t v363;
  const char *v364;
  int8x16_t v365;
  double v366;
  int32x4_t v367;
  const char *v368;
  double v369;
  int16x8_t v370;
  const char *v371;
  double v372;
  int16x8_t v373;
  const char *v374;
  double v375;
  int32x4_t v376;
  const char *v377;
  double v378;
  int32x4_t v379;
  const char *v380;
  double v381;
  int16x8_t v382;
  const char *v383;
  double v384;
  int16x8_t v385;
  const char *v386;
  int16x8_t v387;
  int16x8_t v388;
  const char *v389;
  int8x16_t v390;
  double v391;
  int32x4_t v392;
  const char *v393;
  int8x16_t v394;
  double v395;
  int32x4_t v396;
  const char *v397;
  int8x16_t v398;
  double v399;
  int32x4_t v400;
  const char *v401;
  int8x16_t v402;
  double v403;
  int32x4_t v404;
  const char *v405;
  int8x16_t v406;
  double v407;
  int32x4_t v408;
  const char *v409;
  int8x16_t v410;
  double v411;
  int32x4_t v412;
  const char *v413;
  int8x16_t v414;
  double v415;
  int32x4_t v416;
  const char *v417;
  int8x16_t v418;
  double v419;
  int32x4_t v420;
  const char *v421;
  int8x16_t v422;
  double v423;
  int32x4_t v424;
  const char *v425;
  int8x16_t v426;
  double v427;
  int32x4_t v428;
  const char *v429;
  int8x16_t v430;
  double v431;
  int32x4_t v432;
  const char *v433;
  int8x16_t v434;
  double v435;
  int32x4_t v436;
  const char *v437;
  int8x16_t v438;
  double v439;
  int32x4_t v440;
  const char *v441;
  double v442;
  double v443;
  int16x8_t v444;
  const char *v445;
  double v446;
  int16x8_t v447;
  const char *v448;
  int8x16_t v449;
  double v450;
  int32x4_t v451;
  const char *v452;
  double v453;
  double v454;
  int16x8_t v455;
  const char *v456;
  double v457;
  int16x8_t v458;
  const char *v459;
  double v460;
  double v461;
  int16x8_t v462;
  const char *v463;
  double v464;
  double v465;
  int16x8_t v466;
  const char *v467;
  double v468;
  int32x4_t v469;
  const char *v470;
  double v471;
  int32x4_t v472;
  const char *v473;
  double v474;
  int32x4_t v475;
  const char *v476;
  double v477;
  int16x8_t v478;
  const char *v479;
  int8x16_t v480;
  double v481;
  int32x4_t v482;
  const char *v483;
  int8x16_t v484;
  double v485;
  int32x4_t v486;
  const char *v487;
  double v488;
  double v489;
  int16x8_t v490;
  const char *v491;
  double v492;
  int32x4_t v493;
  const char *v494;
  int8x16_t v495;
  double v496;
  int32x4_t v497;
  const char *v498;
  double v499;
  int32x4_t v500;
  const char *v501;
  double v502;
  double v503;
  int16x8_t v504;
  const char *v505;
  double v506;
  int16x8_t v507;
  const char *v508;
  int8x16_t v509;
  double v510;
  int32x4_t v511;
  const char *v512;
  double v513;
  int16x8_t v514;
  int16x8_t v515;
  const char *v516;
  double v517;
  int16x8_t v518;
  const char *v519;
  double v520;
  double v521;
  int16x8_t v522;
  const char *v523;
  int8x16_t v524;
  double v525;
  int32x4_t v526;
  const char *v527;
  int8x16_t v528;
  double v529;
  int32x4_t v530;
  const char *v531;
  int8x16_t v532;
  double v533;
  int32x4_t v534;
  const char *v535;
  int8x16_t v536;
  double v537;
  int32x4_t v538;
  const char *v539;
  int8x16_t v540;
  double v541;
  int32x4_t v542;
  const char *v543;
  int8x16_t v544;
  double v545;
  int32x4_t v546;
  const char *v547;
  int16x8_t v548;
  int16x8_t v549;
  const char *v550;
  double v551;
  int32x4_t v552;
  const char *v553;
  double v554;
  int16x8_t v555;
  const char *v556;
  int16x8_t v557;
  int16x8_t v558;
  const char *v559;
  double v560;
  int16x8_t v561;
  const char *v562;
  int8x16_t v563;
  double v564;
  int32x4_t v565;
  const char *v566;
  int16x8_t v567;
  int16x8_t v568;
  const char *v569;
  double v570;
  double v571;
  int16x8_t v572;
  const char *v573;
  uint64_t v574;
  const char *v575;
  int v576;
  const char *v577;
  int v578;
  const char *v579;
  int v580;
  const char *v581;
  int v582;
  const char *v583;
  int v584;
  const char *v585;
  int v586;
  const char *v587;
  int v588;
  const char *v589;
  int v590;
  const char *v591;
  int v592;
  const char *v593;
  int v594;
  const char *v595;
  int v596;
  const char *v597;
  int v598;
  const char *v599;
  int v600;
  const char *v601;
  int v602;
  const char *v603;
  int v604;
  const char *v605;
  int v606;
  const char *v607;
  int v608;
  const char *v609;
  int v610;
  const char *v611;
  int v612;
  const char *v613;
  int v614;
  const char *v615;
  int v616;
  const char *v617;
  int v618;
  const char *v619;
  int v620;
  const char *v621;
  int v622;
  const char *v623;
  int v624;
  const char *v625;
  int v626;
  const char *v627;
  int v628;
  const char *v629;
  int v630;
  const char *v631;
  int v632;
  const char *v633;
  int v634;
  const char *v635;
  int v636;
  const char *v637;
  int v638;
  const char *v639;
  int v640;
  const char *v641;
  int v642;
  const char *v643;
  int v644;
  const char *v645;
  int v646;
  const char *v647;
  int v648;
  const char *v649;
  int v650;
  const char *v651;
  int v652;
  const char *v653;
  int v654;
  const char *v655;
  int v656;
  const char *v657;
  int v658;
  const char *v659;
  int v660;
  const char *v661;
  int v662;
  const char *v663;
  int v664;
  const char *v665;
  int v666;
  const char *v667;
  int v668;
  const char *v669;
  int v670;
  const char *v671;
  int v672;
  const char *v673;
  int v674;
  const char *v675;
  int v676;
  const char *v677;
  int v678;
  const char *v679;
  int v680;
  const char *v681;
  int v682;
  const char *v683;
  int v684;
  const char *v685;
  int v686;
  const char *v687;
  int v688;
  const char *v689;
  int v690;
  const char *v691;
  int v692;
  const char *v693;
  int v694;
  const char *v695;
  int v696;
  const char *v697;
  int v698;
  const char *v699;
  int v700;
  const char *v701;
  int v702;
  const char *v703;
  int v704;
  const char *v705;
  int v706;
  const char *v707;
  int v708;
  const char *v709;
  int v710;
  const char *v711;
  int v712;
  const char *v713;
  int v714;
  const char *v715;
  int v716;
  const char *v717;
  int v718;
  const char *v719;
  int v720;
  const char *v721;
  int v722;
  const char *v723;
  int v724;
  const char *v725;
  int v726;
  const char *v727;
  int v728;
  const char *v729;
  int v730;
  const char *v731;
  int v732;
  const char *v733;
  int v734;
  const char *v735;
  int v736;
  const char *v737;
  int v738;
  const char *v739;
  int v740;
  const char *v741;
  int v742;
  const char *v743;
  int v744;
  const char *v745;
  int v746;
  const char *v747;
  int v748;
  const char *v749;
  int v750;
  const char *v751;
  int v752;
  const char *v753;
  int v754;
  const char *v755;
  int v756;
  const char *v757;
  int v758;
  const char *v759;
  int v760;
  const char *v761;
  int v762;
  const char *v763;
  int v764;
  const char *v765;
  int v766;
  const char *v767;
  int v768;
  const char *v769;
  int v770;
  const char *v771;
  int v772;
  const char *v773;
  int v774;
  const char *v775;
  int v776;
  const char *v777;
  int v778;
  const char *v779;
  int v780;
  const char *v781;
  int v782;
  const char *v783;
  int v784;
  const char *v785;
  int v786;
  const char *v787;
  int v788;
  const char *v789;
  int v790;
  const char *v791;
  int v792;
  const char *v793;
  int v794;
  const char *v795;
  int v796;
  const char *v797;
  int v798;
  const char *v799;
  int v800;
  const char *v801;
  int v802;
  const char *v803;
  int v804;
  const char *v805;
  int v806;
  const char *v807;
  int v808;
  const char *v809;
  int v810;
  const char *v811;
  int v812;
  const char *v813;
  int v814;
  const char *v815;
  int v816;
  const char *v817;
  int v818;
  const char *v819;
  int v820;
  const char *v821;
  int v822;
  const char *v823;
  int v824;
  const char *v825;
  int v826;
  const char *v827;
  int v828;
  const char *v829;
  int v830;
  const char *v831;
  int v832;
  const char *v833;
  int v834;
  const char *v835;
  int v836;
  const char *v837;
  int v838;
  const char *v839;
  int v840;
  const char *v841;
  int v842;
  const char *v843;
  int v844;
  const char *v845;
  int v846;
  const char *v847;
  int v848;
  const char *v849;
  int v850;
  const char *v851;
  int v852;
  const char *v853;
  int v854;
  const char *v855;
  int v856;
  const char *v857;
  int v858;
  const char *v859;
  int v860;
  const char *v861;
  int v862;
  const char *v863;
  int v864;
  const char *v865;
  int v866;
  const char *v867;
  int v868;
  const char *v869;
  int v870;
  const char *v871;
  int v872;
  const char *v873;
  int v874;
  const char *v875;
  int v876;
  const char *v877;
  int v878;
  const char *v879;
  int v880;
  const char *v881;
  int v882;
  const char *v883;
  int v884;
  const char *v885;
  int v886;
  const char *v887;
  int v888;
  const char *v889;
  int v890;
  const char *v891;
  int v892;
  const char *v893;
  int v894;
  const char *v895;
  int v896;
  const char *v897;
  int v898;
  _OWORD v899[2];
  __int16 v900;
  char v901[48];
  __int128 v902;
  uint64_t v903;
  __int128 v904;
  int16x8_t v905[2];
  __int128 v906;
  _OWORD v907[2];
  char v908[48];
  __int128 v909;
  char v910[16];
  char v911[48];
  char v912[32];
  char v913[32];
  char v914[32];
  _OWORD v915[2];
  char v916[32];
  char v917[32];
  char v918[48];
  __int128 v919;
  char v920[32];
  char v921[48];
  _OWORD v922[2];
  char v923[48];
  _OWORD v924[2];
  int v925;
  _OWORD v926[2];
  char v927[32];
  _OWORD v928[2];
  char v929;
  __int128 v930;
  char v931[32];
  char v932[32];
  _OWORD v933[2];
  __int128 v934;
  _OWORD v935[2];
  _OWORD v936[2];
  char v937;
  _OWORD v938[2];
  _OWORD v939[2];
  char v940;
  __int128 v941;
  _OWORD v942[2];
  char v943[48];
  char v944[48];
  __int128 v945;
  char v946[32];
  _OWORD v947[2];
  char v948[48];
  __int128 v949;
  char v950[32];
  char v951[32];
  _OWORD v952[2];
  __int128 v953;
  int v954;
  char v955[32];
  _OWORD v956[2];
  _OWORD v957[2];
  _OWORD v958[2];
  char v959[32];
  _OWORD v960[2];
  _OWORD v961[2];
  char v962[32];
  char v963[32];
  char v964[32];
  __int128 v965;
  _OWORD v966[2];
  __int128 v967;
  int16x8_t v968[2];
  char v969[48];
  __int128 v970;
  char v971[32];
  char v972[48];
  __int128 v973;
  _OWORD v974[2];
  __int128 v975;
  _OWORD v976[2];
  _OWORD v977[2];
  char v978[32];
  _OWORD v979[2];
  char v980[32];
  _OWORD v981[2];
  __int128 v982;
  int16x8_t v983[2];
  __int128 v984;
  char v985[32];
  __int128 v986;
  _OWORD v987[2];
  char v988[32];
  char v989[64];
  char v990[48];
  __int128 v991;
  char v992[32];
  char v993[64];
  __int128 v994;
  _OWORD v995[2];
  __int128 v996;
  _OWORD v997[2];
  __int128 v998;
  char v999[48];
  char v1000[48];
  char v1001[64];
  char v1002[64];
  __int128 v1003;
  _OWORD v1004[2];
  char v1005[48];
  __int128 v1006;
  char v1007[32];
  _OWORD v1008[2];
  char v1009[32];
  char v1010[48];
  char v1011[32];
  char v1012[32];
  _OWORD v1013[2];
  __int16 v1014;
  __int128 v1015;
  _OWORD v1016[2];
  char v1017[32];
  char v1018[32];
  _OWORD v1019[2];
  char v1020[48];
  char v1021[32];
  char v1022[32];
  char v1023[32];
  char v1024[48];
  __int128 v1025;
  _OWORD v1026[2];
  __int128 v1027;
  char v1028[16];
  _OWORD v1029[2];
  char v1030;
  __int128 v1031;
  char v1032[32];
  char v1033[48];
  __int128 v1034;
  _OWORD v1035[2];
  __int128 v1036;
  _OWORD v1037[2];
  _OWORD v1038[2];
  char v1039;
  _OWORD v1040[2];
  char v1041[48];
  __int128 v1042;
  char v1043[32];
  __int128 v1044;
  char v1045[32];
  char v1046[48];
  __int128 v1047;
  _OWORD v1048[2];
  _OWORD v1049[2];
  char v1050;
  char v1051[48];
  char v1052[48];
  _OWORD v1053[2];
  char v1054[48];
  __int128 v1055;
  _OWORD v1056[2];
  _OWORD v1057[2];
  __int128 v1058;
  char v1059[32];
  char v1060[48];
  char v1061[32];
  char v1062[32];
  _OWORD v1063[2];
  __int128 v1064;
  char v1065[32];
  char v1066[48];
  char v1067[48];
  char v1068[48];
  char v1069[48];
  __int128 v1070;
  _OWORD v1071[2];
  __int128 v1072;
  char v1073[32];
  char v1074[48];
  __int128 v1075;
  char v1076[32];
  __int128 v1077;
  char v1078[32];
  __int128 v1079;
  _OWORD v1080[2];
  __int128 v1081;
  _OWORD v1082[2];
  char v1083[48];
  char v1084[48];
  char v1085[48];
  __int128 v1086;
  char v1087[32];
  char v1088[48];
  char v1089[48];
  __int128 v1090;
  int16x8_t v1091[2];
  __int128 v1092;
  char v1093[32];
  _OWORD v1094[2];
  __int16 v1095;
  __int128 v1096;
  char v1097[16];
  _OWORD v1098[2];
  char v1099[48];
  __int128 v1100;
  char v1101[32];
  char v1102[48];
  __int128 v1103;
  char v1104[32];
  char v1105[48];
  _OWORD v1106[2];
  int v1107;
  _OWORD v1108[2];
  __int16 v1109;
  char v1110[48];
  _OWORD v1111[2];
  char v1112[32];
  _OWORD v1113[2];
  char v1114;
  char v1115[32];
  _OWORD v1116[2];
  _OWORD v1117[2];
  char v1118[32];
  _OWORD v1119[2];
  __int128 v1120;
  uint64_t v1121;
  int v1122;
  __int16 v1123;
  char v1124;
  __int128 v1125;
  char v1126;
  int v1127[8];
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  _QWORD v1288[5];

  MEMORY[0x24BDAC7A8]();
  v1288[4] = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25693C760);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25693C760))
  {
    v898 = 501;
    v1125 = xmmword_239ECF000;
    v1126 = 0;
    sub_2396EFA24((uint64_t)&v1125);
    v897 = v2;
    sub_2396EFA98((uint64_t)v1127, &v898, &v897);
    v896 = 1;
    v1121 = 0xF05081508081F5ALL;
    v1124 = 0;
    v1123 = 5133;
    v1122 = 353636628;
    sub_23958E5E0((uint64_t)&v1121);
    v895 = v3;
    sub_2396EFA98((uint64_t)&v1128, &v896, &v895);
    v894 = 2;
    v1120 = xmmword_239ECEFF0;
    sub_23950F8E4((uint64_t)&v1120);
    v893 = v4;
    sub_2396EFA98((uint64_t)&v1129, &v894, &v893);
    v892 = 3;
    v1119[0] = xmmword_239ECF011;
    *(_QWORD *)((char *)v1119 + 13) = 0x14041D10070E15;
    sub_2396EFB50((uint64_t)v1119, (int32x4_t)xmmword_239ECF011, v5, v6, v7);
    v891 = v8;
    sub_2396EFA98((uint64_t)&v1130, &v892, &v891);
    v890 = 4;
    strcpy(v1118, "*oxxexucd|kfcnuzecd~ox");
    sub_2396EFBE0((uint64_t)v1118, *(int32x4_t *)"*oxxexucd|kfcnuzecd~ox", v9, v10, v11);
    v889 = v12;
    sub_2396EFA98((uint64_t)&v1131, &v890, &v889);
    v888 = 5;
    v1117[0] = xmmword_239ECF03D;
    *(_OWORD *)((char *)v1117 + 9) = *(__int128 *)((char *)&xmmword_239ECF03D + 9);
    sub_2396EFC88((uint64_t)v1117, *(int32x4_t *)((char *)&xmmword_239ECF03D + 9), v13, v14, v15);
    v887 = v16;
    sub_2396EFA98((uint64_t)&v1132, &v888, &v887);
    v886 = 6;
    v1116[0] = xmmword_239ECF056;
    *(_QWORD *)((char *)v1116 + 15) = 0x5180314190211;
    sub_2396EFBE0((uint64_t)v1116, (int32x4_t)xmmword_239ECF056, v17, v18, v19);
    v885 = v20;
    sub_2396EFA98((uint64_t)&v1133, &v886, &v885);
    v884 = 7;
    strcpy(v1115, "\aBUUHUXDFIIHSXANICXQFKNCX@WR");
    sub_2396EFD48((uint64_t)v1115, *(int32x4_t *)"XANICXQFKNCX@WR", v21, v22, v23);
    v883 = v24;
    sub_2396EFA98((uint64_t)&v1134, &v884, &v883);
    v882 = 1001;
    v1113[0] = xmmword_239ECF08A;
    v1113[1] = xmmword_239ECF09A;
    v1114 = 0;
    sub_2396EFE38((uint64_t)v1113, (int32x4_t)xmmword_239ECF08A, xmmword_239ECF09A, v25, v26);
    v881 = v27;
    sub_2396EFA98((uint64_t)&v1135, &v882, &v881);
    v880 = 1002;
    sub_2396EFF58((uint64_t)v1112, *(int32x4_t *)"gz~sugkyauyk|ox", v28, v29, v30);
    v879 = v31;
    sub_2396EFA98((uint64_t)&v1136, &v880, &v879);
    v878 = 1003;
    v1111[0] = xmmword_239ECF0CA;
    *(_OWORD *)((char *)v1111 + 15) = *(__int128 *)((char *)&xmmword_239ECF0CA + 15);
    sub_2396EFF58((uint64_t)v1111, *(int32x4_t *)((char *)&xmmword_239ECF0CA + 15), v32, v33, v34);
    v877 = v35;
    sub_2396EFA98((uint64_t)&v1137, &v878, &v877);
    v876 = 1501;
    strcpy(v1110, "c4\"1-*-$<,!)0&$<+\"0<*-5\"/*'<*.\"$&0");
    sub_2396F0060((unsigned __int8 *)v1110, *(int16x8_t *)"c4\"1-*-$<,!)0&$<+\"0<*-5\"/*'<*.\"$&0", *(double *)"+\"0<*-5\"/*'<*.\"$&0", v36, v37);
    v875 = v38;
    sub_2396EFA98((uint64_t)&v1138, &v876, &v875);
    v874 = 1502;
    v1108[0] = xmmword_239ECF10C;
    v1108[1] = *(_OWORD *)dbl_239ECF11C;
    v1109 = 8;
    sub_2396F0120((unsigned __int8 *)v1108, (int16x8_t)xmmword_239ECF10C, dbl_239ECF11C[0], v39, v40, v41);
    v873 = v42;
    sub_2396EFA98((uint64_t)&v1139, &v874, &v873);
    v872 = 1503;
    v1106[0] = xmmword_239ECF12E;
    v1106[1] = *(_OWORD *)dbl_239ECF13E;
    v1107 = 7503714;
    sub_2396F01D4((unsigned __int8 *)v1106, (int16x8_t)xmmword_239ECF12E, dbl_239ECF13E[0], v43, v44, v45);
    v871 = v46;
    sub_2396EFA98((uint64_t)&v1140, &v872, &v871);
    v870 = 2501;
    v869 = v50;
    sub_2396EFA98((uint64_t)&v1141, &v870, &v869);
    v868 = 2502;
    v1103 = xmmword_239ECF17A;
    strcpy(v1104, "QFO]QG@XOBGJQGCOIK]");
    sub_2396F01D4((unsigned __int8 *)&v1103, (int16x8_t)xmmword_239ECF17A, *(double *)"QFO]QG@XOBGJQGCOIK]", v51, v52, v53);
    v867 = v54;
    sub_2396EFA98((uint64_t)&v1142, &v868, &v867);
    v866 = 2503;
    strcpy(v1102, "l;->\"%\"+3*)-89>)3$-?39\"?-:)(3*)-89>)?");
    sub_2396F039C((unsigned __int8 *)v1102, *(int16x8_t *)"l;->\"%\"+3*)-89>)3$-?39\"?-:)(3*)-89>)?",
      *(double *)"3$-?39\"?-:)(3*)-89>)?",
      v55,
      v56,
      v57);
    v865 = v58;
    sub_2396EFA98((uint64_t)&v1143, &v866, &v865);
    v864 = 2504;
    v1100 = xmmword_239ECF1C4;
    strcpy(v1101, "K\\UGKQYD@MKRQU@AFQKFQD[G]@[F]QG");
    sub_2396F0480((unsigned __int8 *)&v1100, 5.66310633e35, unk_239ECF1D4, v59, v60, v61);
    v863 = v62;
    sub_2396EFA98((uint64_t)&v1144, &v864, &v863);
    v862 = 2505;
    strcpy(v1099, "e2$7+,+\":# $107 :,+3$),!:,($\" :7 6*)01,*+");
    sub_2396F05DC((unsigned __int8 *)v1099, *(double *)"($\" :7 6*)01,*+", *(double *)":,+3$),!:,($\" :7 6*)01,*+", v63, v64, v65);
    v861 = v66;
    sub_2396EFA98((uint64_t)&v1145, &v862, &v861);
    v860 = 2003;
    v1098[0] = xmmword_239ECF21E;
    v1098[1] = xmmword_239ECF22E;
    sub_2396F06F0((uint64_t)v1098, (int32x4_t)xmmword_239ECF21E, xmmword_239ECF22E, v67, v68);
    v859 = v69;
    sub_2396EFA98((uint64_t)&v1146, &v860, &v859);
    v858 = 2001;
    v1096 = xmmword_239ECF23E;
    strcpy(v1097, "BZM@EHSHIXIOXC^");
    sub_2396F06F0((uint64_t)&v1096, (int32x4_t)xmmword_239ECF23E, *(int8x16_t *)"BZM@EHSHIXIOXC^", v70, v71);
    v857 = v72;
    sub_2396EFA98((uint64_t)&v1147, &v858, &v857);
    v856 = 2002;
    v1094[0] = xmmword_239ECF25E;
    v1094[1] = *(_OWORD *)dbl_239ECF26E;
    v1095 = 104;
    sub_2396F0120((unsigned __int8 *)v1094, (int16x8_t)xmmword_239ECF25E, dbl_239ECF26E[0], v73, v74, v75);
    v855 = v76;
    sub_2396EFA98((uint64_t)&v1148, &v856, &v855);
    v854 = 3501;
    v1092 = xmmword_239ECF280;
    strcpy(v1093, "UMZSAM[\\DS^[VMTWSFG@WA");
    sub_2396F0804((unsigned __int8 *)&v1092, 1.58780412e103, *(int16x8_t *)"UMZSAM[\\DS^[VMTWSFG@WA", v77, v78);
    v853 = v79;
    sub_2396EFA98((uint64_t)&v1149, &v854, &v853);
    v852 = 3502;
    v1090 = xmmword_239ECF2A7;
    v1091[0] = xmmword_239ECF2B7;
    *(int16x8_t *)((char *)v1091 + 9) = *(int16x8_t *)((char *)&xmmword_239ECF2B7 + 9);
    sub_2396F08F4((unsigned __int8 *)&v1090, *(double *)((char *)&xmmword_239ECF2B7.i64[1] + 1), xmmword_239ECF2B7, v80, v81);
    v851 = v82;
    sub_2396EFA98((uint64_t)&v1150, &v852, &v851);
    v850 = 3503;
    strcpy(v1089, "g0&5).) 8*&3$/.) 8/&48!&.+\"#8723&3.1\"8*&3$/.) ");
    sub_2396F09FC((unsigned __int8 *)v1089, *(double *)"3&3.1\"8*&3$/.) ", *(double *)" 8/&48!&.+\"#8723&3.1\"8*&3$/.) ", v83, v84);
    v849 = v85;
    sub_2396EFA98((uint64_t)&v1151, &v850, &v849);
    v848 = 3504;
    strcpy(v1088, "|+=.252;#1=(?452;#4=/#)2/=*98#1=(?49/");
    sub_2396F039C((unsigned __int8 *)v1088, *(int16x8_t *)"|+=.252;#1=(?452;#4=/#)2/=*98#1=(?49/",
      *(double *)";#4=/#)2/=*98#1=(?49/",
      v86,
      v87,
      v88);
    v847 = v89;
    sub_2396EFA98((uint64_t)&v1152, &v848, &v847);
    v846 = 3505;
    v1086 = xmmword_239ECF325;
    strcpy(v1087, "ZBU\\NBHSVSRJSBMOTROB[R^\\Q");
    sub_2396F05DC((unsigned __int8 *)&v1086, *(double *)"RJSBMOTROB[R^\\Q", *(double *)"ZBU\\NBHSVSRJSBMOTROB[R^\\Q", v90, v91, v92);
    v845 = v93;
    sub_2396EFA98((uint64_t)&v1153, &v846, &v845);
    v844 = 3001;
    strcpy(v1085, "y<++6+&48-:107>&40!<=&?<8-,+<&=04*");
    sub_2396F0060((unsigned __int8 *)v1085, *(int16x8_t *)"y<++6+&48-:107>&40!<=&?<8-,+<&=04*", *(double *)"40!<=&?<8-,+<&=04*", v94, v95);
    v843 = v96;
    sub_2396EFA98((uint64_t)&v1154, &v844, &v843);
    v842 = 3002;
    v841 = v99;
    sub_2396EFA98((uint64_t)&v1155, &v842, &v841);
    v840 = 3003;
    strcpy(v1083, "t1&&;&+95 7<=:3+.1&;+215 !&1+ ;+6!=80+ &11");
    sub_2396F0B4C((unsigned __int8 *)v1083, *(double *)"1+ ;+6!=80+ &11",
      *(double *)".1&;+215 !&1+ ;+6!=80+ &11",
      v100,
      v101);
    v839 = v102;
    sub_2396EFA98((uint64_t)&v1156, &v840, &v839);
    v838 = 3004;
    v1081 = xmmword_239ECF3BE;
    v1082[0] = *(_OWORD *)dbl_239ECF3CE;
    *(_OWORD *)((char *)v1082 + 11) = *(_OWORD *)((char *)&dbl_239ECF3CE[1] + 3);
    sub_2396F0B4C((unsigned __int8 *)&v1081, *(double *)((char *)&dbl_239ECF3CE[1] + 3), dbl_239ECF3CE[0], v103, v104);
    v837 = v105;
    sub_2396EFA98((uint64_t)&v1157, &v838, &v837);
    v836 = 3005;
    v1079 = xmmword_239ECF3E9;
    v1080[0] = *(_OWORD *)dbl_239ECF3F9;
    *(_OWORD *)((char *)v1080 + 11) = *(_OWORD *)((char *)&dbl_239ECF3F9[1] + 3);
    sub_2396F0B4C((unsigned __int8 *)&v1079, *(double *)((char *)&dbl_239ECF3F9[1] + 3), dbl_239ECF3F9[0], v106, v107);
    v835 = v108;
    sub_2396EFA98((uint64_t)&v1158, &v836, &v835);
    v834 = 3006;
    v1077 = xmmword_239ECF414;
    strcpy(v1078, "Y^VSZ[@KM^\\T@XJV[Z[@MZKMVZI^S");
    sub_2396F0C6C((unsigned __int8 *)&v1077, *(double *)"JV[Z[@MZKMVZI^S", *(double *)"Y^VSZ[@KM^\\T@XJV[Z[@MZKMVZI^S", v109, v110, v111);
    v833 = v112;
    sub_2396EFA98((uint64_t)&v1159, &v834, &v833);
    v832 = 3007;
    v1075 = xmmword_239ECF442;
    strcpy(v1076, "TS[^WVMB]AWMUG[VWVM@WF@[WDS^");
    sub_2396F0DB0((unsigned __int8 *)&v1075, *(double *)"G[VWVM@WF@[WDS^", *(double *)"TS[^WVMB]AWMUG[VWVM@WF@[WDS^", v113, v114);
    v831 = v115;
    sub_2396EFA98((uint64_t)&v1160, &v832, &v831);
    v830 = 3008;
    strcpy(v1074, "w2%%8%(:6#4?>90(16>;23(>:602(%2#%>2!6;");
    sub_2396F0804((unsigned __int8 *)v1074, *(double *)"w2%%8%(:6#4?>90(16>;23(>:602(%2#%>2!6;",
      *(int16x8_t *)"16>;23(>:602(%2#%>2!6;",
      v116,
      v117);
    v829 = v118;
    sub_2396EFA98((uint64_t)&v1161, &v830, &v829);
    v828 = 3009;
    v1072 = xmmword_239ECF496;
    strcpy(v1073, "RU]XQPK@C[KB]QCKYU@W\\]ZS");
    sub_2396F08F4((unsigned __int8 *)&v1072, *(double *)"[KB]QCKYU@W\\]ZS", *(int16x8_t *)"RU]XQPK@C[KB]QCKYU@W\\]ZS", v119, v120);
    v827 = v121;
    sub_2396EFA98((uint64_t)&v1162, &v828, &v827);
    v826 = 3010;
    v1070 = xmmword_239ECF4BF;
    v1071[0] = *(_OWORD *)dbl_239ECF4CF;
    *(_OWORD *)((char *)v1071 + 11) = *(_OWORD *)((char *)&dbl_239ECF4CF[1] + 3);
    sub_2396F0B4C((unsigned __int8 *)&v1070, *(double *)((char *)&dbl_239ECF4CF[1] + 3), dbl_239ECF4CF[0], v122, v123);
    v825 = v124;
    sub_2396EFA98((uint64_t)&v1163, &v826, &v825);
    v824 = 3011;
    strcpy(v1069, "{>))4)$6:/8325<$=:27>?$(>*.>5/2:7$6:/8325<");
    sub_2396F0B4C((unsigned __int8 *)v1069, *(double *)">5/2:7$6:/8325<", *(double *)"=:27>?$(>*.>5/2:7$6:/8325<", v125, v126);
    v823 = v127;
    sub_2396EFA98((uint64_t)&v1164, &v824, &v823);
    v822 = 3012;
    strcpy(v1068, "\rH__B_R@LYNEDCJRCBRL[LDALOAHRJ]X");
    sub_2396EFE38((uint64_t)v1068, *(int32x4_t *)"\rH__B_R@LYNEDCJRCBRL[LDALOAHRJ]X", *(int8x16_t *)"CBRL[LDALOAHRJ]X", v128, v129);
    v821 = v130;
    sub_2396EFA98((uint64_t)&v1165, &v822, &v821);
    v820 = 3013;
    strcpy(v1067, "\"gppmp}ocvajkle}erw}mwv}md}ogomp{");
    sub_2396F0120((unsigned __int8 *)v1067, *(int16x8_t *)"\"gppmp}ocvajkle}erw}mwv}md}ogomp{", *(double *)"erw}mwv}md}ogomp{", v131, v132, v133);
    v819 = v134;
    sub_2396EFA98((uint64_t)&v1166, &v820, &v819);
    v818 = 3014;
    v817 = v137;
    sub_2396EFA98((uint64_t)&v1167, &v818, &v817);
    v816 = 3015;
    v1064 = xmmword_239ECF587;
    strcpy(v1065, "QV^[RSHA[VSHERCE^RAV[");
    sub_2396F039C((unsigned __int8 *)&v1064, (int16x8_t)xmmword_239ECF587, *(double *)"QV^[RSHA[VSHERCE^RAV[", v138, v139, v140);
    v815 = v141;
    sub_2396EFA98((uint64_t)&v1168, &v816, &v815);
    v814 = 3016;
    v1063[0] = xmmword_239ECF5AD;
    *(_OWORD *)((char *)v1063 + 15) = *(__int128 *)((char *)&xmmword_239ECF5AD + 15);
    sub_2396EFF58((uint64_t)v1063, *(int32x4_t *)((char *)&xmmword_239ECF5AD + 15), v142, v143, v144);
    v813 = v145;
    sub_2396EFA98((uint64_t)&v1169, &v814, &v813);
    v812 = 4501;
    strcpy(v1062, "w 6%9>90($1:(?6$(16>;23(>:602$");
    sub_2396EFF58((uint64_t)v1062, *(int32x4_t *)"$(16>;23(>:602$", v146, v147, v148);
    v811 = v149;
    sub_2396EFA98((uint64_t)&v1170, &v812, &v811);
    v810 = 4502;
    strcpy(v1061, "$sevjmjc{wbi{pkk{bas{baepqvaw");
    sub_2396F0EE8((uint64_t)v1061, *(int32x4_t *)"kk{bas{baepqvaw", v150, v151, v152);
    v809 = v153;
    sub_2396EFA98((uint64_t)&v1171, &v810, &v809);
    v808 = 4503;
    strcpy(v1060, "f1'4(/(!95 +9 '/*#\"9!4'0/2?9'*/!(+#(2");
    sub_2396F039C((unsigned __int8 *)v1060, *(int16x8_t *)"f1'4(/(!95 +9 '/*#\"9!4'0/2?9'*/!(+#(2", *(double *)"*#\"9!4'0/2?9'*/!(+#(2", v154, v155, v156);
    v807 = v157;
    sub_2396EFA98((uint64_t)&v1172, &v808, &v807);
    v806 = 4504;
    v1058 = xmmword_239ECF62F;
    strcpy(v1059, "dmlw{kidmwidaofemf|");
    sub_2396F01D4((unsigned __int8 *)&v1058, (int16x8_t)xmmword_239ECF62F, *(double *)"dmlw{kidmwidaofemf|", v158, v159, v160);
    v805 = v161;
    sub_2396EFA98((uint64_t)&v1173, &v806, &v805);
    v804 = 4505;
    v1057[0] = xmmword_239ECF653;
    *(_OWORD *)((char *)v1057 + 12) = *(__int128 *)((char *)&xmmword_239ECF653 + 12);
    sub_2396B946C((uint64_t)v1057, *(int32x4_t *)((char *)&xmmword_239ECF653 + 12), v162, v163, v164);
    v803 = v165;
    sub_2396EFA98((uint64_t)&v1174, &v804, &v803);
    v802 = 4506;
    v1055 = xmmword_239ECF66F;
    v1056[0] = *(_OWORD *)dbl_239ECF67F;
    *(_DWORD *)((char *)v1056 + 15) = 1249812;
    sub_2396F0060((unsigned __int8 *)&v1055, (int16x8_t)xmmword_239ECF66F, dbl_239ECF67F[0], v166, v167);
    v801 = v168;
    sub_2396EFA98((uint64_t)&v1175, &v802, &v801);
    v800 = 4507;
    strcpy(v1054, "=j|ostszbn{pbphqitnxzpxsibniti~ubts~rpmqxix");
    sub_2396F0FE4((unsigned __int8 *)v1054, *(double *)"ti~ubts~rpmqxix", *(double *)"itnxzpxsibniti~ubts~rpmqxix", v169, v170, v171);
    v799 = v172;
    sub_2396EFA98((uint64_t)&v1176, &v800, &v799);
    v798 = 4001;
    v1053[0] = xmmword_239ECF6BE;
    *(_OWORD *)((char *)v1053 + 10) = *(__int128 *)((char *)&xmmword_239ECF6BE + 10);
    sub_2396F1110((uint64_t)v1053, *(int32x4_t *)((char *)&xmmword_239ECF6BE + 10), v173, v174, v175);
    v797 = v176;
    sub_2396EFA98((uint64_t)&v1177, &v798, &v797);
    v796 = 4002;
    strcpy(v1052, "\"gppmp}qdo}vmm}ocl{}dckngf}dgcvwpg");
    sub_2396F0060((unsigned __int8 *)v1052, *(int16x8_t *)"\"gppmp}qdo}vmm}ocl{}dckngf}dgcvwpg", *(double *)"cl{}dckngf}dgcvwpg", v177, v178);
    v795 = v179;
    sub_2396EFA98((uint64_t)&v1178, &v796, &v795);
    v794 = 4003;
    strcpy(v1051, "t1&&;&+'29+ ;;+95:-+25=810+95 7<");
    sub_2396EFE38((uint64_t)v1051, *(int32x4_t *)"t1&&;&+'29+ ;;+95:-+25=810+95 7<",
      *(int8x16_t *)"5:-+25=810+95 7<",
      v180,
      v181);
    v793 = v182;
    sub_2396EFA98((uint64_t)&v1179, &v794, &v793);
    v792 = 4004;
    v1049[0] = xmmword_239ECF71C;
    v1049[1] = xmmword_239ECF72C;
    v1050 = 0;
    sub_2396EFE38((uint64_t)v1049, (int32x4_t)xmmword_239ECF71C, xmmword_239ECF72C, v183, v184);
    v791 = v185;
    sub_2396EFA98((uint64_t)&v1180, &v792, &v791);
    v790 = 4005;
    v1047 = xmmword_239ECF73D;
    v1048[0] = *(_OWORD *)dbl_239ECF74D;
    *(_QWORD *)((char *)v1048 + 13) = 0x190E1F07020D14;
    sub_2396F11DC((unsigned __int8 *)&v1047, (int16x8_t)xmmword_239ECF73D, dbl_239ECF74D[0], v186, v187);
    v789 = v188;
    sub_2396EFA98((uint64_t)&v1181, &v790, &v789);
    v788 = 4006;
    strcpy(v1046, "g\"55(584!*8!&.+\"#85\"35.&) 2+&3.()");
    sub_2396F0120((unsigned __int8 *)v1046, *(int16x8_t *)"g\"55(584!*8!&.+\"#85\"35.&) 2+&3.()", *(double *)"#85\"35.&) 2+&3.()", v189, v190, v191);
    v787 = v192;
    sub_2396EFA98((uint64_t)&v1182, &v788, &v787);
    v786 = 4007;
    v1044 = xmmword_239ECF784;
    strcpy(v1045, "G\\PFNJEVOO\\AVMGOF\\BGIVPWNFMW");
    sub_2396F0DB0((unsigned __int8 *)&v1044, *(double *)"MGOF\\BGIVPWNFMW", *(double *)"G\\PFNJEVOO\\AVMGOF\\BGIVPWNFMW", v193, v194);
    v785 = v195;
    sub_2396EFA98((uint64_t)&v1183, &v786, &v785);
    v784 = 4008;
    v1042 = xmmword_239ECF7B1;
    strcpy(v1043, "YB[HQQB_HSYQXB\\YWHNIPXSI");
    sub_2396F08F4((unsigned __int8 *)&v1042, *(double *)"SYQXB\\YWHNIPXSI", *(int16x8_t *)"YB[HQQB_HSYQXB\\YWHNIPXSI", v196, v197);
    v783 = v198;
    sub_2396EFA98((uint64_t)&v1184, &v784, &v783);
    v782 = 4009;
    strcpy(v1041, "{>))4)$(=6$=:27>?$=25:7$9.5?7>$:?1.(/6>5/");
    sub_2396F05DC((unsigned __int8 *)v1041, *(double *)"5?7>$:?1.(/6>5/", *(double *)"?$=25:7$9.5?7>$:?1.(/6>5/", v199, v200, v201);
    v781 = v202;
    sub_2396EFA98((uint64_t)&v1185, &v782, &v781);
    v780 = 4010;
    v1040[0] = xmmword_239ECF804;
    *(_OWORD *)((char *)v1040 + 12) = *(__int128 *)((char *)&xmmword_239ECF804 + 12);
    sub_2396B946C((uint64_t)v1040, *(int32x4_t *)((char *)&xmmword_239ECF804 + 12), v203, v204, v205);
    v779 = v206;
    sub_2396EFA98((uint64_t)&v1186, &v780, &v779);
    v778 = 4011;
    v1038[0] = xmmword_239ECF820;
    v1038[1] = xmmword_239ECF830;
    v1039 = 0;
    sub_2396EFE38((uint64_t)v1038, (int32x4_t)xmmword_239ECF820, xmmword_239ECF830, v207, v208);
    v777 = v209;
    sub_2396EFA98((uint64_t)&v1187, &v778, &v777);
    v776 = 4012;
    v1036 = xmmword_239ECF841;
    v1037[0] = *(_OWORD *)dbl_239ECF851;
    *(_QWORD *)((char *)v1037 + 13) = 0x7369626968776ALL;
    sub_2396F11DC((unsigned __int8 *)&v1036, (int16x8_t)xmmword_239ECF841, dbl_239ECF851[0], v210, v211);
    v775 = v212;
    sub_2396EFA98((uint64_t)&v1188, &v776, &v775);
    v774 = 4013;
    v1034 = xmmword_239ECF866;
    v1035[0] = *(_OWORD *)dbl_239ECF876;
    *(_OWORD *)((char *)v1035 + 10) = *(_OWORD *)((char *)&dbl_239ECF876[1] + 2);
    sub_2396F05DC((unsigned __int8 *)&v1034, *(double *)((char *)&dbl_239ECF876[1] + 2), dbl_239ECF876[0], v213, v214, v215);
    v773 = v216;
    sub_2396EFA98((uint64_t)&v1189, &v774, &v773);
    v772 = 4014;
    strcpy(v1033, "b'00-0=1$/=$#+.'&=+/#%'=7,&+16-06");
    sub_2396F0120((unsigned __int8 *)v1033, *(int16x8_t *)"b'00-0=1$/=$#+.'&=+/#%'=7,&+16-06", *(double *)"&=+/#%'=7,&+16-06", v217, v218, v219);
    v771 = v220;
    sub_2396EFA98((uint64_t)&v1190, &v772, &v771);
    v770 = 4015;
    v1031 = xmmword_239ECF8B2;
    strcpy(v1032, "JQCO]EQ[@JG]ZA\\Z");
    sub_2396EFE38((uint64_t)&v1031, (int32x4_t)xmmword_239ECF8B2, *(int8x16_t *)"JQCO]EQ[@JG]ZA\\Z", v221, v222);
    v769 = v223;
    sub_2396EFA98((uint64_t)&v1191, &v770, &v769);
    v768 = 4016;
    v1029[0] = xmmword_239ECF8D3;
    v1029[1] = xmmword_239ECF8E3;
    v1030 = 0;
    sub_2396EFE38((uint64_t)v1029, (int32x4_t)xmmword_239ECF8D3, xmmword_239ECF8E3, v224, v225);
    v767 = v226;
    sub_2396EFA98((uint64_t)&v1192, &v768, &v767);
    v766 = 4017;
    v1027 = xmmword_239ECF8F4;
    strcpy(v1028, "XCRSNQ]PUF]HUSR");
    sub_2396F06F0((uint64_t)&v1027, (int32x4_t)xmmword_239ECF8F4, *(int8x16_t *)"XCRSNQ]PUF]HUSR", v227, v228);
    v765 = v229;
    sub_2396EFA98((uint64_t)&v1193, &v766, &v765);
    v764 = 4018;
    v1025 = xmmword_239ECF914;
    v1026[0] = *(_OWORD *)dbl_239ECF924;
    *(_QWORD *)((char *)v1026 + 14) = 0x6C656267677E68;
    sub_2396F039C((unsigned __int8 *)&v1025, (int16x8_t)xmmword_239ECF914, dbl_239ECF924[0], v230, v231, v232);
    v763 = v233;
    sub_2396EFA98((uint64_t)&v1194, &v764, &v763);
    v762 = 4019;
    strcpy(v1024, "q4##>#.\"7<.708=45.#4!>#%.64?4#0%8>?");
    sub_2396F01D4((unsigned __int8 *)v1024, *(int16x8_t *)"q4##>#.\"7<.708=45.#4!>#%.64?4#0%8>?", *(double *)"5.#4!>#%.64?4#0%8>?", v234, v235, v236);
    v761 = v237;
    sub_2396EFA98((uint64_t)&v1195, &v762, &v761);
    v760 = 4020;
    strcpy(v1023, "\nOXXEXUYLGULKCFONUOY^CGK^OUHHER");
    sub_2396F06F0((uint64_t)v1023, *(int32x4_t *)"\nOXXEXUYLGULKCFONUOY^CGK^OUHHER", *(int8x16_t *)"NUOY^CGK^OUHHER", v238, v239);
    v759 = v240;
    sub_2396EFA98((uint64_t)&v1196, &v760, &v759);
    v758 = 4021;
    v757 = v244;
    sub_2396EFA98((uint64_t)&v1197, &v758, &v757);
    v756 = 5001;
    strcpy(v1021, "k.99$94&=84%$4*=*\"'*)'.4,;>");
    sub_2396B946C((uint64_t)v1021, *(int32x4_t *)"$4*=*\"'*)'.4,;>", v245, v246, v247);
    v755 = v248;
    sub_2396EFA98((uint64_t)&v1198, &v756, &v755);
    v754 = 5002;
    strcpy(v1020, "d!66+6;)27;*+;%2%-(%&(!;)!0%(;(-&");
    sub_2396F0120((unsigned __int8 *)v1020, *(int16x8_t *)"d!66+6;)27;*+;%2%-(%&(!;)!0%(;(-&",
      *(double *)"%-(%&(!;)!0%(;(-&",
      v249,
      v250,
      v251);
    v753 = v252;
    sub_2396EFA98((uint64_t)&v1199, &v754, &v753);
    v752 = 5003;
    v1019[0] = xmmword_239ECF9DB;
    *(_OWORD *)((char *)v1019 + 9) = *(__int128 *)((char *)&xmmword_239ECF9DB + 9);
    sub_2396EFC88((uint64_t)v1019, *(int32x4_t *)((char *)&xmmword_239ECF9DB + 9), v253, v254, v255);
    v751 = v256;
    sub_2396EFA98((uint64_t)&v1200, &v752, &v751);
    v750 = 5004;
    strcpy(v1018, "x=**7*'5.+'<=(,0'59('=+,159,176");
    sub_2396F06F0((uint64_t)v1018, *(int32x4_t *)"x=**7*'5.+'<=(,0'59('=+,159,176", *(int8x16_t *)"'59('=+,159,176", v257, v258);
    v749 = v259;
    sub_2396EFA98((uint64_t)&v1201, &v750, &v749);
    v748 = 5005;
    strcpy(v1017, "i,;;&;6$?:6-,9=!6$(96/<: &'");
    sub_2396B946C((uint64_t)v1017, *(int32x4_t *)",9=!6$(96/<: &'", v260, v261, v262);
    v747 = v263;
    sub_2396EFA98((uint64_t)&v1202, &v748, &v747);
    v746 = 5006;
    v1015 = xmmword_239ECFA30;
    v1016[0] = *(_OWORD *)dbl_239ECFA40;
    *(_DWORD *)((char *)v1016 + 15) = 1180441;
    sub_2396F0060((unsigned __int8 *)&v1015, (int16x8_t)xmmword_239ECFA30, dbl_239ECFA40[0], v264, v265);
    v745 = v266;
    sub_2396EFA98((uint64_t)&v1203, &v746, &v745);
    v744 = 5007;
    v1013[0] = xmmword_239ECFA53;
    v1013[1] = *(_OWORD *)dbl_239ECFA63;
    v1014 = 15;
    sub_2396F0120((unsigned __int8 *)v1013, (int16x8_t)xmmword_239ECFA53, dbl_239ECFA63[0], v267, v268, v269);
    v743 = v270;
    sub_2396EFA98((uint64_t)&v1204, &v744, &v743);
    v742 = 5008;
    strcpy(v1012, "z?((5(%7,)%=*/%9577;4>%?((5(");
    sub_2396EFD48((uint64_t)v1012, *(int32x4_t *)"/%9577;4>%?((5(", v271, v272, v273);
    v741 = v274;
    sub_2396EFA98((uint64_t)&v1205, &v742, &v741);
    v740 = 5009;
    strcpy(v1011, "b'00-0=/41='/26;=1-70!'=+/#%'1");
    sub_2396EFF58((uint64_t)v1011, *(int32x4_t *)";=1-70!'=+/#%'1", v275, v276, v277);
    v739 = v278;
    sub_2396EFA98((uint64_t)&v1206, &v740, &v739);
    v738 = 5010;
    strcpy(v1010, "o*== =0\"9<0*\"?;60? &!;0,# :+0&!0-- 7");
    sub_2396F11DC((unsigned __int8 *)v1010, *(int16x8_t *)"o*== =0\"9<0*\"?;60? &!;0,# :+0&!0-- 7",
      *(double *)"0? &!;0,# :+0&!0-- 7",
      v279,
      v280);
    v737 = v281;
    sub_2396EFA98((uint64_t)&v1207, &v738, &v737);
    v736 = 5501;
    sub_2396B946C((uint64_t)v1009, *(int32x4_t *)"xntxchpitfjwkbc", v282, v283, v284);
    v735 = v285;
    sub_2396EFA98((uint64_t)&v1208, &v736, &v735);
    v734 = 5502;
    v1008[0] = xmmword_239ECFAF2;
    v1008[1] = xmmword_239ECFB02;
    sub_2396F06F0((uint64_t)v1008, (int32x4_t)xmmword_239ECFAF2, xmmword_239ECFB02, v286, v287);
    v733 = v288;
    sub_2396EFA98((uint64_t)&v1209, &v734, &v733);
    v732 = 5503;
    v1006 = xmmword_239ECFB12;
    strcpy(v1007, "C\\AR_LWVCG[LC\\Z]GLUF@Z\\]");
    sub_2396F08F4((unsigned __int8 *)&v1006, *(double *)"G[LC\\Z]GLUF@Z\\]", *(int16x8_t *)"C\\AR_LWVCG[LC\\Z]GLUF@Z\\]", v289, v290);
    v731 = v291;
    sub_2396EFA98((uint64_t)&v1210, &v732, &v731);
    v730 = 5504;
    strcpy(v1005, "\n]KXDCDMUG\\YU^OGZEXKFUZEYOUKFCMDGOD^ULKCF_XO");
    sub_2396F0DB0((unsigned __int8 *)v1005, *(double *)"CMDGOD^ULKCF_XO", *(double *)"ZEXKFUZEYOUKFCMDGOD^ULKCF_XO", v292, v293);
    v729 = v294;
    sub_2396EFA98((uint64_t)&v1211, &v730, &v729);
    v728 = 5505;
    v1003 = xmmword_239ECFB68;
    v1004[0] = *(_OWORD *)dbl_239ECFB78;
    *(_OWORD *)((char *)v1004 + 11) = *(_OWORD *)((char *)&dbl_239ECFB78[1] + 3);
    sub_2396F0B4C((unsigned __int8 *)&v1003, *(double *)((char *)&dbl_239ECFB78[1] + 3), dbl_239ECFB78[0], v295, v296);
    v727 = v297;
    sub_2396EFA98((uint64_t)&v1212, &v728, &v727);
    v726 = 5506;
    strcpy(v1002, "z-;(434=%7,)%.?7*5(;6%>?*.2%*534.%7;)1%<36.?(34=%<;36/(?");
    v725 = (const char *)sub_2396F12B4((unsigned __int8 *)v1002, *(double *)"6.?(34=%<;36/(?",
                           *(double *)"*5(;6%>?*.2%*534.%7;)1%<36.?(34=%<;36/(?",
                           v298,
                           v299,
                           v300,
                           v301);
    sub_2396EFA98((uint64_t)&v1213, &v726, &v725);
    v724 = 5507;
    strcpy(v1001, "j=+8$#$-5'<95>/':%8+&5./:>\"5:%#$>5%?>&#/85,#&>/8#$-5,+#&?8/");
    v723 = (const char *)sub_2396F1410((unsigned __int8 *)v1001, *(double *)"&>/8#$-5,+#&?8/", *(double *)":%8+&5./:>\"5:%#$>5%?>&#/85,#&>/8#$-5,+#&?8/", v302, v303, v304, v305);
    sub_2396EFA98((uint64_t)&v1214, &v724, &v723);
    v722 = 5508;
    strcpy(v1000, "{,:)525<$6-($/>6+4):7$=):6>$+).525<$=:27.)>");
    sub_2396F0FE4((unsigned __int8 *)v1000, *(double *)"+).525<$=:27.)>", *(double *)"+4):7$=):6>$+).525<$=:27.)>", v306, v307, v308);
    v721 = v309;
    sub_2396EFA98((uint64_t)&v1215, &v722, &v721);
    v720 = 5509;
    v998 = xmmword_239ECFC34;
    strcpy(v999, "G[LC\\Z]GLEZ@ZQZ_ZGJLUZ_GVALURZ_FAV");
    v719 = (const char *)sub_2396F1590((unsigned __int8 *)&v998, 6.5117351e35, unk_239ECFC44, v310, v311, v312, v313);
    sub_2396EFA98((uint64_t)&v1216, &v720, &v719);
    v718 = 5510;
    v996 = xmmword_239ECFC67;
    v997[0] = *(_OWORD *)dbl_239ECFC77;
    *(_QWORD *)((char *)v997 + 13) = 0x190812111E0209;
    sub_2396F11DC((unsigned __int8 *)&v996, (int16x8_t)xmmword_239ECFC67, dbl_239ECFC77[0], v314, v315);
    v717 = v316;
    sub_2396EFA98((uint64_t)&v1217, &v718, &v717);
    v716 = 5511;
    v994 = xmmword_239ECFC8C;
    v995[0] = *(_OWORD *)dbl_239ECFC9C;
    *(_OWORD *)((char *)v995 + 14) = *(_OWORD *)((char *)&dbl_239ECFC9C[1] + 6);
    sub_2396F0C6C((unsigned __int8 *)&v994, *(double *)((char *)&dbl_239ECFC9C[1] + 6), dbl_239ECFC9C[0], v317, v318, v319);
    v715 = v320;
    sub_2396EFA98((uint64_t)&v1218, &v716, &v715);
    v714 = 5512;
    strcpy(v993, "b5#0,+,%=/41=&'26*=2-+,6=1',1-0=!-,$+%=+,!-,1+16',!;");
    v713 = (const char *)sub_2396F16A4((unsigned __int8 *)v993, *(double *)"!-,$+%=+,!-,1+16',!;",
                           *(double *)"6*=2-+,6=1',1-0=!-,$+%=+,!-,1+16',!;",
                           v321,
                           v322,
                           v323,
                           v324);
    sub_2396EFA98((uint64_t)&v1219, &v714, &v713);
    v712 = 5513;
    v991 = xmmword_239ECFCEF;
    strcpy(v992, "ZA_RWYPS[PJAX_WRKL[");
    sub_2396F01D4((unsigned __int8 *)&v991, (int16x8_t)xmmword_239ECFCEF, *(double *)"ZA_RWYPS[PJAX_WRKL[", v325, v326, v327);
    v711 = v328;
    sub_2396EFA98((uint64_t)&v1220, &v712, &v711);
    v710 = 5514;
    strcpy(v990, "}*</343:\"0+.\".52)\"98-)5\"-243)\"08/:43:\";<41(/8");
    sub_2396F0C6C((unsigned __int8 *)v990, *(double *)"08/:43:\";<41(/8",
      *(double *)")\"98-)5\"-243)\"08/:43:\";<41(/8",
      v329,
      v330,
      v331);
    v709 = v332;
    sub_2396EFA98((uint64_t)&v1221, &v710, &v709);
    v708 = 5515;
    strcpy(v989, "f1'4(/(!9+0592#+6)4'*9\"#62.96)/(29+#4!/(!9 '/*34#");
    v707 = (const char *)sub_2396F17D0((unsigned __int8 *)v989, *(double *)"29+#4!/(!9 '/*34#", *(double *)"6)4'*9\"#62.96)/(29+#4!/(!9 '/*34#", v333, v334, v335);
    sub_2396EFA98((uint64_t)&v1222, &v708, &v707);
    v706 = 6001;
    v705 = v338;
    sub_2396EFA98((uint64_t)&v1223, &v706, &v705);
    v704 = 6002;
    v986 = xmmword_239ECFD93;
    v987[0] = *(_OWORD *)dbl_239ECFDA3;
    *(_QWORD *)((char *)v987 + 14) = 0x151E1B081B1603;
    sub_2396F039C((unsigned __int8 *)&v986, (int16x8_t)xmmword_239ECFD93, dbl_239ECFDA3[0], v339, v340, v341);
    v703 = v342;
    sub_2396EFA98((uint64_t)&v1224, &v704, &v703);
    v702 = 6003;
    v984 = xmmword_239ECFDB9;
    strcpy(v985, "U\\QE^QIODBYQ^WE\\QDY_^");
    sub_2396F039C((unsigned __int8 *)&v984, (int16x8_t)xmmword_239ECFDB9, *(double *)"U\\QE^QIODBYQ^WE\\QDY_^", v343, v344, v345);
    v701 = v346;
    sub_2396EFA98((uint64_t)&v1225, &v702, &v701);
    v700 = 6004;
    v982 = xmmword_239ECFDDF;
    v983[0] = xmmword_239ECFDEF;
    *(int16x8_t *)((char *)v983 + 9) = *(int16x8_t *)((char *)&xmmword_239ECFDEF + 9);
    sub_2396F08F4((unsigned __int8 *)&v982, *(double *)((char *)&xmmword_239ECFDEF.i64[1] + 1), xmmword_239ECFDEF, v347, v348);
    v699 = v349;
    sub_2396EFA98((uint64_t)&v1226, &v700, &v699);
    v698 = 6005;
    v981[0] = xmmword_239ECFE08;
    *(_OWORD *)((char *)v981 + 12) = *(__int128 *)((char *)&xmmword_239ECFE08 + 12);
    sub_2396B946C((uint64_t)v981, *(int32x4_t *)((char *)&xmmword_239ECFE08 + 12), v350, v351, v352);
    v697 = v353;
    sub_2396EFA98((uint64_t)&v1227, &v698, &v697);
    v696 = 6006;
    sub_2396F1110((uint64_t)v980, *(int32x4_t *)"gfahp}jifajbja{", v354, v355, v356);
    v695 = v357;
    sub_2396EFA98((uint64_t)&v1228, &v696, &v695);
    v694 = 6007;
    v979[0] = xmmword_239ECFE3E;
    *(_OWORD *)((char *)v979 + 13) = *(__int128 *)((char *)&xmmword_239ECFE3E + 13);
    sub_2396EFD48((uint64_t)v979, *(int32x4_t *)((char *)&xmmword_239ECFE3E + 13), v358, v359, v360);
    v693 = v361;
    sub_2396EFA98((uint64_t)&v1229, &v694, &v693);
    v692 = 6008;
    strcpy(v978, "5pggzgjxpf}|{rjfsxjpxealjvtxpgt");
    sub_2396F06F0((uint64_t)v978, *(int32x4_t *)"5pggzgjxpf}|{rjfsxjpxealjvtxpgt", *(int8x16_t *)"sxjpxealjvtxpgt", v362, v363);
    v691 = v364;
    sub_2396EFA98((uint64_t)&v1230, &v692, &v691);
    v690 = 6009;
    v977[0] = xmmword_239ECFE7B;
    *(_OWORD *)((char *)v977 + 14) = *(__int128 *)((char *)&xmmword_239ECFE7B + 14);
    sub_2396F0EE8((uint64_t)v977, *(int32x4_t *)((char *)&xmmword_239ECFE7B + 14), v365, v366, v367);
    v689 = v368;
    sub_2396EFA98((uint64_t)&v1231, &v690, &v689);
    v688 = 6010;
    v975 = xmmword_239ECFE99;
    v976[0] = *(_OWORD *)dbl_239ECFEA9;
    *(_DWORD *)((char *)v976 + 15) = 7698302;
    sub_2396F0060((unsigned __int8 *)&v975, (int16x8_t)xmmword_239ECFE99, dbl_239ECFEA9[0], v369, v370);
    v687 = v371;
    sub_2396EFA98((uint64_t)&v1232, &v688, &v687);
    v686 = 6011;
    v973 = xmmword_239ECFEBC;
    v974[0] = *(_OWORD *)dbl_239ECFECC;
    *(_QWORD *)((char *)v974 + 13) = 0x6B607360707B7ELL;
    sub_2396F11DC((unsigned __int8 *)&v973, (int16x8_t)xmmword_239ECFEBC, dbl_239ECFECC[0], v372, v373);
    v685 = v374;
    sub_2396EFA98((uint64_t)&v1233, &v686, &v685);
    v684 = 6012;
    strcpy(v972, "}8//2/\"08.543:\":-(\"2()\"2;\"0802/$");
    sub_2396EFE38((uint64_t)v972, *(int32x4_t *)"}8//2/\"08.543:\":-(\"2()\"2;\"0802/$",
      *(int8x16_t *)"-(\"2()\"2;\"0802/$",
      v375,
      v376);
    v683 = v377;
    sub_2396EFA98((uint64_t)&v1234, &v684, &v683);
    v682 = 6013;
    v970 = xmmword_239ECFF02;
    strcpy(v971, "JOEYUWW[T^E_HHUH");
    sub_2396EFE38((uint64_t)&v970, (int32x4_t)xmmword_239ECFF02, *(int8x16_t *)"JOEYUWW[T^E_HHUH", v378, v379);
    v681 = v380;
    sub_2396EFA98((uint64_t)&v1235, &v682, &v681);
    v680 = 6014;
    strcpy(v969, "h-::':7%-; !&/7,!;8$)+-%-&<7:-.!&-%-&<");
    sub_2396F0804((unsigned __int8 *)v969, *(double *)"h-::':7%-; !&/7,!;8$)+-%-&<7:-.!&-%-&<",
      *(int16x8_t *)"!;8$)+-%-&<7:-.!&-%-&<",
      v381,
      v382);
    v679 = v383;
    sub_2396EFA98((uint64_t)&v1236, &v680, &v679);
    v678 = 6015;
    v967 = xmmword_239ECFF4A;
    v968[0] = xmmword_239ECFF5A;
    *(int16x8_t *)((char *)v968 + 9) = *(int16x8_t *)((char *)&xmmword_239ECFF5A + 9);
    sub_2396F08F4((unsigned __int8 *)&v967, *(double *)((char *)&xmmword_239ECFF5A.i64[1] + 1), xmmword_239ECFF5A, v384, v385);
    v677 = v386;
    sub_2396EFA98((uint64_t)&v1237, &v678, &v677);
    v676 = 6501;
    v965 = xmmword_239ECFF73;
    v966[0] = *(_OWORD *)dbl_239ECFF83;
    *(_OWORD *)((char *)v966 + 11) = *(_OWORD *)((char *)&dbl_239ECFF83[1] + 3);
    sub_2396F0B4C((unsigned __int8 *)&v965, *(double *)((char *)&dbl_239ECFF83[1] + 3), dbl_239ECFF83[0], v387, v388);
    v675 = v389;
    sub_2396EFA98((uint64_t)&v1238, &v676, &v675);
    v674 = 9001;
    v673 = v393;
    sub_2396EFA98((uint64_t)&v1239, &v674, &v673);
    v672 = 9002;
    v671 = v397;
    sub_2396EFA98((uint64_t)&v1240, &v672, &v671);
    v670 = 9003;
    strcpy(v962, "c&11,1<11<*-5\"/*'<*.\"$&0");
    sub_2396EFC88((uint64_t)v962, *(int32x4_t *)"<*-5\"/*'<*.\"$&0", v398, v399, v400);
    v669 = v401;
    sub_2396EFA98((uint64_t)&v1241, &v670, &v669);
    v668 = 9004;
    v961[0] = xmmword_239ECFFE3;
    *(_OWORD *)((char *)v961 + 9) = *(__int128 *)((char *)&xmmword_239ECFFE3 + 9);
    sub_2396EFC88((uint64_t)v961, *(int32x4_t *)((char *)&xmmword_239ECFFE3 + 9), v402, v403, v404);
    v667 = v405;
    sub_2396EFA98((uint64_t)&v1242, &v668, &v667);
    v666 = 9005;
    v960[0] = xmmword_239ECFFFC;
    *(_OWORD *)((char *)v960 + 10) = *(__int128 *)((char *)&xmmword_239ECFFFC + 10);
    sub_2396F1110((uint64_t)v960, *(int32x4_t *)((char *)&xmmword_239ECFFFC + 10), v406, v407, v408);
    v665 = v409;
    sub_2396EFA98((uint64_t)&v1243, &v666, &v665);
    v664 = 9006;
    strcpy(v959, "\nOXXEXUXXUGOYBUZXE@OI^CED");
    sub_2396F1110((uint64_t)v959, *(int32x4_t *)"GOYBUZXE@OI^CED", v410, v411, v412);
    v663 = v413;
    sub_2396EFA98((uint64_t)&v1244, &v664, &v663);
    v662 = 9007;
    v958[0] = xmmword_239ED0030;
    *(_OWORD *)((char *)v958 + 13) = *(__int128 *)((char *)&xmmword_239ED0030 + 13);
    sub_2396EFD48((uint64_t)v958, *(int32x4_t *)((char *)&xmmword_239ED0030 + 13), v414, v415, v416);
    v661 = v417;
    sub_2396EFA98((uint64_t)&v1245, &v662, &v661);
    v660 = 9008;
    v957[0] = xmmword_239ED004D;
    *(_QWORD *)((char *)v957 + 15) = 0x4041475A4F5C5ALL;
    sub_2396EFBE0((uint64_t)v957, (int32x4_t)xmmword_239ED004D, v418, v419, v420);
    v659 = v421;
    sub_2396EFA98((uint64_t)&v1246, &v660, &v659);
    v658 = 9009;
    v956[0] = xmmword_239ED0064;
    *(_QWORD *)((char *)v956 + 13) = 0x45545B42584754;
    sub_2396EFB50((uint64_t)v956, (int32x4_t)xmmword_239ED0064, v422, v423, v424);
    v657 = v425;
    sub_2396EFA98((uint64_t)&v1247, &v658, &v657);
    v656 = 9010;
    strcpy(v955, "7reexeheeherd~mrhzxar");
    sub_2396F18D8((uint64_t)v955, *(int32x4_t *)"7reexeheeherd~mrhzxar", v426, v427, v428);
    v655 = v429;
    sub_2396EFA98((uint64_t)&v1248, &v656, &v655);
    v654 = 9011;
    v953 = xmmword_239ED008F;
    v954 = 4934976;
    sub_23958E55C((uint64_t)&v953, (int32x4_t)xmmword_239ED008F, v430, v431, v432);
    v653 = v433;
    sub_2396EFA98((uint64_t)&v1249, &v654, &v653);
    v652 = 9012;
    v952[0] = xmmword_239ED00A3;
    *(_QWORD *)((char *)v952 + 14) = 0x50C100D011310;
    sub_2396F18D8((uint64_t)v952, (int32x4_t)xmmword_239ED00A3, v434, v435, v436);
    v651 = v437;
    sub_2396EFA98((uint64_t)&v1250, &v652, &v651);
    v650 = 9013;
    strcpy(v951, "{>))4)$))$845=2?>58>$6:(0");
    sub_2396F1110((uint64_t)v951, *(int32x4_t *)"845=2?>58>$6:(0", v438, v439, v440);
    v649 = v441;
    sub_2396EFA98((uint64_t)&v1251, &v650, &v649);
    v648 = 7001;
    v949 = xmmword_239ED00D3;
    strcpy(v950, "Q@AQOXOGBOLBKQI^[");
    sub_2396F0120((unsigned __int8 *)&v949, (int16x8_t)xmmword_239ED00D3, *(double *)"Q@AQOXOGBOLBKQI^[", v442, v443, v444);
    v647 = v445;
    sub_2396EFA98((uint64_t)&v1252, &v648, &v647);
    v646 = 7002;
    strcpy(v948, "!dssns~udyutshof~fqt~ntu~ng~ldlnsx");
    sub_2396F0060((unsigned __int8 *)v948, *(int16x8_t *)"!dssns~udyutshof~fqt~ntu~ng~ldlnsx", *(double *)"~fqt~ntu~ng~ldlnsx", v446, v447);
    v645 = v448;
    sub_2396EFA98((uint64_t)&v1253, &v646, &v645);
    v644 = 7003;
    v947[0] = xmmword_239ED0118;
    *(_OWORD *)((char *)v947 + 14) = *(__int128 *)((char *)&xmmword_239ED0118 + 14);
    sub_2396F0EE8((uint64_t)v947, *(int32x4_t *)((char *)&xmmword_239ED0118 + 14), v449, v450, v451);
    v643 = v452;
    sub_2396EFA98((uint64_t)&v1254, &v644, &v643);
    v642 = 7004;
    v945 = xmmword_239ED0136;
    strcpy(v946, "YU@KUECHCYOHPGJOB");
    sub_2396F0120((unsigned __int8 *)&v945, (int16x8_t)xmmword_239ED0136, *(double *)"YU@KUECHCYOHPGJOB", v453, v454, v455);
    v641 = v456;
    sub_2396EFA98((uint64_t)&v1255, &v642, &v641);
    v640 = 7005;
    strcpy(v944, "g\"55(583\"?325.) 8$&*\"5&8*&35.?8.)1&+.#");
    sub_2396F0804((unsigned __int8 *)v944, *(double *)"g\"55(583\"?325.) 8$&*\"5&8*&35.?8.)1&+.#", *(int16x8_t *)"8$&*\"5&8*&35.?8.)1&+.#", v457, v458);
    v639 = v459;
    sub_2396EFA98((uint64_t)&v1256, &v640, &v639);
    v638 = 7006;
    strcpy(v943, "\"gppmp}vgzvwpkle}koceg}qkxg}kltcnkf");
    sub_2396F01D4((unsigned __int8 *)v943, *(int16x8_t *)"\"gppmp}vgzvwpkle}koceg}qkxg}kltcnkf", *(double *)"}koceg}qkxg}kltcnkf", v460, v461, v462);
    v637 = v463;
    sub_2396EFA98((uint64_t)&v1257, &v638, &v637);
    v636 = 7007;
    v941 = xmmword_239ED01A3;
    v942[0] = *(_OWORD *)dbl_239ED01B3;
    *(_QWORD *)((char *)v942 + 14) = 0x6E63666B7C6463;
    sub_2396F039C((unsigned __int8 *)&v941, (int16x8_t)xmmword_239ED01A3, dbl_239ED01B3[0], v464, v465, v466);
    v635 = v467;
    sub_2396EFA98((uint64_t)&v1258, &v636, &v635);
    v634 = 7008;
    v939[0] = xmmword_239ED01C9;
    v939[1] = xmmword_239ED01D9;
    v940 = 0;
    sub_2396EFE38((uint64_t)v939, (int32x4_t)xmmword_239ED01C9, xmmword_239ED01D9, v468, v469);
    v633 = v470;
    sub_2396EFA98((uint64_t)&v1259, &v634, &v633);
    v632 = 7009;
    v938[0] = xmmword_239ED01EA;
    v938[1] = xmmword_239ED01FA;
    sub_2396F06F0((uint64_t)v938, (int32x4_t)xmmword_239ED01EA, xmmword_239ED01FA, v471, v472);
    v631 = v473;
    sub_2396EFA98((uint64_t)&v1260, &v632, &v631);
    v630 = 7010;
    v936[0] = xmmword_239ED020A;
    v936[1] = xmmword_239ED021A;
    v937 = 0;
    sub_2396EFE38((uint64_t)v936, (int32x4_t)xmmword_239ED020A, xmmword_239ED021A, v474, v475);
    v629 = v476;
    sub_2396EFA98((uint64_t)&v1261, &v630, &v629);
    v628 = 7501;
    v934 = xmmword_239ED022B;
    v935[0] = *(_OWORD *)dbl_239ED023B;
    *(_DWORD *)((char *)v935 + 15) = 1055006;
    sub_2396F0060((unsigned __int8 *)&v934, (int16x8_t)xmmword_239ED022B, dbl_239ED023B[0], v477, v478);
    v627 = v479;
    sub_2396EFA98((uint64_t)&v1262, &v628, &v627);
    v626 = 8001;
    v933[0] = xmmword_239ED024E;
    *(_OWORD *)((char *)v933 + 9) = *(__int128 *)((char *)&xmmword_239ED024E + 9);
    sub_2396EFC88((uint64_t)v933, *(int32x4_t *)((char *)&xmmword_239ED024E + 9), v480, v481, v482);
    v625 = v483;
    sub_2396EFA98((uint64_t)&v1263, &v626, &v625);
    v624 = 8002;
    strcpy(v932, "a$33.3># *(/&>/./, /('.-%>,$2)");
    sub_2396EFF58((uint64_t)v932, *(int32x4_t *)"./, /('.-%>,$2)", v484, v485, v486);
    v623 = v487;
    sub_2396EFA98((uint64_t)&v1264, &v624, &v623);
    v622 = 8003;
    v930 = xmmword_239ED0286;
    strcpy(v931, "cbqidbqsy~woe~qfqy|qr|u");
    sub_2396F02A0((unsigned __int8 *)&v930, 1.67419206e243, unk_239ED0296, v488, v489, v490);
    v621 = v491;
    sub_2396EFA98((uint64_t)&v1265, &v622, &v621);
    v620 = 8004;
    v928[0] = xmmword_239ED02AE;
    v928[1] = xmmword_239ED02BE;
    v929 = 0;
    sub_2396EFE38((uint64_t)v928, (int32x4_t)xmmword_239ED02AE, xmmword_239ED02BE, v492, v493);
    v619 = v494;
    sub_2396EFA98((uint64_t)&v1266, &v620, &v619);
    v618 = 8005;
    strcpy(v927, "|9..3.#>=752;#3)(#3:#1913.%");
    sub_2396B946C((uint64_t)v927, *(int32x4_t *)";#3)(#3:#1913.%", v495, v496, v497);
    v617 = v498;
    sub_2396EFA98((uint64_t)&v1267, &v618, &v617);
    v616 = 8006;
    v926[0] = xmmword_239ED02EB;
    v926[1] = xmmword_239ED02FB;
    sub_2396F06F0((uint64_t)v926, (int32x4_t)xmmword_239ED02EB, xmmword_239ED02FB, v499, v500);
    v615 = v501;
    sub_2396EFA98((uint64_t)&v1268, &v616, &v615);
    v614 = 8007;
    v924[0] = xmmword_239ED030B;
    v924[1] = *(_OWORD *)dbl_239ED031B;
    v925 = 198152;
    sub_2396F01D4((unsigned __int8 *)v924, (int16x8_t)xmmword_239ED030B, dbl_239ED031B[0], v502, v503, v504);
    v613 = v505;
    sub_2396EFA98((uint64_t)&v1269, &v614, &v613);
    v612 = 8008;
    v611 = v508;
    sub_2396EFA98((uint64_t)&v1270, &v612, &v611);
    v610 = 8009;
    v922[0] = xmmword_239ED0352;
    *(_OWORD *)((char *)v922 + 11) = *(__int128 *)((char *)&xmmword_239ED0352 + 11);
    sub_2396F1974((uint64_t)v922, *(int32x4_t *)((char *)&xmmword_239ED0352 + 11), v509, v510, v511);
    v609 = v512;
    sub_2396EFA98((uint64_t)&v1271, &v610, &v609);
    v608 = 8010;
    strcpy(v921, "q4##>#.30:8?6.$?4)!42%45.=>&.8?%4#\"42%.#0%4");
    sub_2396F0FE4((unsigned __int8 *)v921, *(double *)".8?%4#\"42%.#0%4", *(double *)"4)!42%45.=>&.8?%4#\"42%.#0%4", v513, v514, v515);
    v607 = v516;
    sub_2396EFA98((uint64_t)&v1272, &v608, &v607);
    v606 = 8011;
    v919 = xmmword_239ED0399;
    strcpy(v920, "OQFQY\\QR\\UO]UDQ\\O\\YR");
    sub_2396F11DC((unsigned __int8 *)&v919, (int16x8_t)xmmword_239ED0399, *(double *)"OQFQY\\QR\\UO]UDQ\\O\\YR", v517, v518);
    v605 = v519;
    sub_2396EFA98((uint64_t)&v1273, &v606, &v605);
    v604 = 8012;
    strcpy(v918, "a$33.3># *(/&>(/7 -(%>,$5 ->-(#3 38");
    sub_2396F01D4((unsigned __int8 *)v918, *(int16x8_t *)"a$33.3># *(/&>(/7 -(%>,$5 ->-(#3 38", *(double *)"7 -(%>,$5 ->-(#3 38", v520, v521, v522);
    v603 = v523;
    sub_2396EFA98((uint64_t)&v1274, &v604, &v603);
    v602 = 8013;
    strcpy(v917, "j/88%85(+!#$-5#$<+&#.5?9.+");
    sub_2396F1974((uint64_t)v917, *(int32x4_t *)"$-5#$<+&#.5?9.+", v524, v525, v526);
    v601 = v527;
    sub_2396EFA98((uint64_t)&v1275, &v602, &v601);
    v600 = 8014;
    strcpy(v916, "{>))4)$9:025<$,)2/25<$.(?8");
    sub_2396F1974((uint64_t)v916, *(int32x4_t *)"5<$,)2/25<$.(?8", v528, v529, v530);
    v599 = v531;
    sub_2396EFA98((uint64_t)&v1276, &v600, &v599);
    v598 = 8015;
    v915[0] = xmmword_239ED0418;
    *(_OWORD *)((char *)v915 + 11) = *(__int128 *)((char *)&xmmword_239ED0418 + 11);
    sub_2396F1974((uint64_t)v915, *(int32x4_t *)((char *)&xmmword_239ED0418 + 11), v532, v533, v534);
    v597 = v535;
    sub_2396EFA98((uint64_t)&v1277, &v598, &v597);
    v596 = 8016;
    strcpy(v914, "\aBUUHUXEFLNI@XPUNSNI@XRTC]");
    sub_2396F1974((uint64_t)v914, *(int32x4_t *)"I@XPUNSNI@XRTC]", v536, v537, v538);
    v595 = v539;
    sub_2396EFA98((uint64_t)&v1278, &v596, &v595);
    v594 = 8017;
    strcpy(v913, "\x1B^IITIDYZPRU\\D\\KND^C^XD^IITI");
    sub_2396EFD48((uint64_t)v913, *(int32x4_t *)"D\\KND^C^XD^IITI", v540, v541, v542);
    v593 = v543;
    sub_2396EFA98((uint64_t)&v1279, &v594, &v593);
    v592 = 8018;
    strcpy(v912, "n+<<!<1,/%')1 !1/8/'\"/,\"+1)>;");
    sub_2396EFF58((uint64_t)v912, *(int32x4_t *)"!1/8/'\"/,\"+1)>;", v544, v545, v546);
    v591 = v547;
    sub_2396EFA98((uint64_t)&v1280, &v592, &v591);
    v590 = 8019;
    strcpy(v911, "|9..3.#>=752;#>=.%?92(.5?#?33.8/#23(#/),,3.(98");
    sub_2396F09FC((unsigned __int8 *)v911, *(double *)"/#23(#/),,3.(98", *(double *)".%?92(.5?#?33.8/#23(#/),,3.(98", v548, v549);
    v589 = v550;
    sub_2396EFA98((uint64_t)&v1281, &v590, &v589);
    v588 = 8020;
    v909 = xmmword_239ED04B9;
    strcpy(v910, "RTGGHBHDOU^EHRJ");
    sub_2396F06F0((uint64_t)&v909, (int32x4_t)xmmword_239ED04B9, *(int8x16_t *)"RTGGHBHDOU^EHRJ", v551, v552);
    v587 = v553;
    sub_2396EFA98((uint64_t)&v1282, &v588, &v587);
    v586 = 8021;
    strcpy(v908, "\aBUUHUXEFLNI@XAFNKBCX@BSXCNTLXNIAH");
    sub_2396F0060((unsigned __int8 *)v908, *(int16x8_t *)"\aBUUHUXEFLNI@XAFNKBCX@BSXCNTLXNIAH", *(double *)"NKBCX@BSXCNTLXNIAH", v554, v555);
    v585 = v556;
    sub_2396EFA98((uint64_t)&v1283, &v586, &v585);
    v584 = 8022;
    v906 = xmmword_239ED04FC;
    v907[0] = *(_OWORD *)dbl_239ED050C;
    *(_OWORD *)((char *)v907 + 11) = *(_OWORD *)((char *)&dbl_239ED050C[1] + 3);
    sub_2396F0B4C((unsigned __int8 *)&v906, *(double *)((char *)&dbl_239ED050C[1] + 3), dbl_239ED050C[0], v557, v558);
    v583 = v559;
    sub_2396EFA98((uint64_t)&v1284, &v584, &v583);
    v582 = 8023;
    v904 = xmmword_239ED0527;
    v905[0] = xmmword_239ED0537;
    *(uint64_t *)((char *)&v905[0].i64[1] + 7) = 0xD0C0A1702000CLL;
    sub_2396F0804((unsigned __int8 *)&v904, 2.55796169e-303, xmmword_239ED0537, v560, v561);
    v581 = v562;
    sub_2396EFA98((uint64_t)&v1285, &v582, &v581);
    v580 = 8501;
    v902 = xmmword_239ED054E;
    v903 = 0x434E5D4A414A48;
    sub_2396F1A4C((uint64_t)&v902, (int32x4_t)xmmword_239ED054E, v563, v564, v565);
    v579 = v566;
    sub_2396EFA98((uint64_t)&v1286, &v580, &v579);
    v578 = 8502;
    strcpy(v901, "x/9*616?':9316?'(9*95'(9;3';76>1?'57<1>1=<");
    sub_2396F0B4C((unsigned __int8 *)v901, *(double *)";76>1?'57<1>1=<",
      *(double *)"(9*95'(9;3';76>1?'57<1>1=<",
      v567,
      v568);
    v577 = v569;
    sub_2396EFA98((uint64_t)&v1287, &v578, &v577);
    v576 = 10001;
    v899[0] = xmmword_239ED0591;
    v899[1] = *(_OWORD *)dbl_239ED05A1;
    v900 = 127;
    sub_2396F0120((unsigned __int8 *)v899, (int16x8_t)xmmword_239ED0591, dbl_239ED05A1[0], v570, v571, v572);
    v575 = v573;
    sub_2396EFA98((uint64_t)v1288, &v576, &v575);
    sub_2396F1B00((uint64_t)&qword_25693C768, v1127, 162);
    v574 = 1296;
    do
    {
      if (SHIBYTE(v1127[v574 - 1]) < 0)
        operator delete(*(void **)((char *)&v1125 + v574 * 4));
      v574 -= 8;
    }
    while (v574 * 4);
    __cxa_atexit((void (*)(void *))sub_2396F1B80, &qword_25693C768, &dword_23940C000);
    __cxa_guard_release(&qword_25693C760);
  }
  return &qword_25693C768;
}

void sub_2396EF70C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 5184;
  while (1)
  {
    if (*(char *)(v1 + v3 - 1) < 0)
      operator delete(*(void **)(v1 + v3 - 24));
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_25693C760);
      _Unwind_Resume(a1);
    }
  }
}

int8x8_t sub_2396EFA24(uint64_t a1)
{
  uint8x8_t v1;
  int8x16_t v2;
  uint64_t v3;
  unsigned int v4;
  int16x8_t v5;
  int8x8_t result;

  v1 = *(uint8x8_t *)a1;
  v2.i64[0] = *(_QWORD *)a1;
  v2.i8[1] = *(_BYTE *)(a1 + 8);
  v2.i64[1] = v2.i64[0];
  *(int8x8_t *)v2.i8 = veor_s8(*(int8x8_t *)a1, vqtbl1_s8(v2, (int8x8_t)1));
  *(int8x8_t *)(a1 + 1) = vext_s8(*(int8x8_t *)v2.i8, *(int8x8_t *)v2.i8, 1uLL);
  v3 = a1 + 1;
  v4 = v1.u8[0];
  v1.i32[0] = *(_DWORD *)(v3 + 8);
  v5 = (int16x8_t)vmovl_u8(v1);
  *(int8x8_t *)v5.i8 = veor_s8((int8x8_t)vdup_n_s16(v4), *(int8x8_t *)v5.i8);
  result = vmovn_s16(v5);
  *(_DWORD *)(v3 + 8) = result.i32[0];
  *(_BYTE *)(v3 + 12) ^= v4;
  *(_BYTE *)(v3 + 13) ^= v4;
  *(_WORD *)(v3 + 14) = (v4 ^ *(_BYTE *)(v3 + 14));
  return result;
}

uint64_t sub_2396EFA98(uint64_t a1, _DWORD *a2, const char **a3)
{
  void *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *a2;
  v4 = (void *)(a1 + 8);
  v5 = *a3;
  v6 = strlen(*a3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v4 = operator new(v8 + 1);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v4;
  }
  else
  {
    *(_BYTE *)(a1 + 31) = v6;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v4, v5, v7);
LABEL_9:
  *((_BYTE *)v4 + v7) = 0;
  return a1;
}

int8x16_t sub_2396EFB50(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396EFBE0(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) ^= v5;
  *(_BYTE *)(a1 + 21) ^= v5;
  *(_BYTE *)(a1 + 22) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396EFC88(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) ^= v5;
  *(_BYTE *)(a1 + 21) ^= v5;
  *(_BYTE *)(a1 + 22) ^= v5;
  *(_BYTE *)(a1 + 23) ^= v5;
  *(_BYTE *)(a1 + 24) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396EFD48(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) ^= v5;
  *(_BYTE *)(a1 + 21) ^= v5;
  *(_BYTE *)(a1 + 22) ^= v5;
  *(_BYTE *)(a1 + 23) ^= v5;
  *(_BYTE *)(a1 + 24) ^= v5;
  *(_BYTE *)(a1 + 25) ^= v5;
  *(_BYTE *)(a1 + 26) ^= v5;
  *(_BYTE *)(a1 + 27) ^= v5;
  *(_BYTE *)(a1 + 28) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396EFE38(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) ^= v5;
  *(_BYTE *)(a1 + 21) ^= v5;
  *(_BYTE *)(a1 + 22) ^= v5;
  *(_BYTE *)(a1 + 23) ^= v5;
  *(_BYTE *)(a1 + 24) ^= v5;
  *(_BYTE *)(a1 + 25) ^= v5;
  *(_BYTE *)(a1 + 26) ^= v5;
  *(_BYTE *)(a1 + 27) ^= v5;
  *(_BYTE *)(a1 + 28) ^= v5;
  *(_BYTE *)(a1 + 29) ^= v5;
  *(_BYTE *)(a1 + 30) ^= v5;
  *(_BYTE *)(a1 + 31) ^= v5;
  *(_BYTE *)(a1 + 32) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396EFF58(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) ^= v5;
  *(_BYTE *)(a1 + 21) ^= v5;
  *(_BYTE *)(a1 + 22) ^= v5;
  *(_BYTE *)(a1 + 23) ^= v5;
  *(_BYTE *)(a1 + 24) ^= v5;
  *(_BYTE *)(a1 + 25) ^= v5;
  *(_BYTE *)(a1 + 26) ^= v5;
  *(_BYTE *)(a1 + 27) ^= v5;
  *(_BYTE *)(a1 + 28) ^= v5;
  *(_BYTE *)(a1 + 29) ^= v5;
  *(_BYTE *)(a1 + 30) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F0060(unsigned __int8 *a1, int16x8_t a2, double a3, double a4, int16x8_t a5)
{
  unsigned __int8 v5;
  __int32 v6;
  int16x8_t v7;
  int32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int16x8_t v11;
  int32x4_t v12;
  int8x16_t result;

  v5 = *a1;
  v6 = a1[10];
  a2.i32[0] = *a1;
  v7 = a2;
  *(__int16 *)((char *)a2.i16 + 1) = a1[25];
  a5.i32[0] = a1[26];
  a5.i8[4] = a1[27];
  *(__int16 *)((char *)a5.i16 + 1) = a5.u8[4];
  v8 = (int32x4_t)vzip1q_s16(a2, a5);
  a5.i32[0] = *((_DWORD *)a1 + 7);
  v9 = (int8x16_t)vzip1q_s32(v8, (int32x4_t)a5);
  a5.i64[0] = *(_QWORD *)(a1 + 17);
  a5.i8[8] = *a1;
  a5.i8[15] = a1[32];
  v10 = (int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_239EC65D0);
  v11 = (int16x8_t)veorq_s8(vqtbl1q_s8(v9, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v10);
  v10.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v11;
  a1[33] ^= v5;
  a1[34] = 0;
  v7.i8[1] = a1[9];
  v11.i32[0] = v6;
  v11.i8[4] = a1[11];
  v11.i8[1] = v11.i8[4];
  v12 = (int32x4_t)vzip1q_s16(v7, v11);
  v7.i64[0] = *(_QWORD *)(a1 + 1);
  v7.i8[8] = v5;
  v7.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v12, v10), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v7, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F0120(unsigned __int8 *a1, int16x8_t a2, double a3, double a4, double a5, int16x8_t a6)
{
  unsigned __int8 v6;
  __int32 v7;
  int16x8_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int8x16_t result;

  v6 = *a1;
  v7 = a1[10];
  a2.i32[0] = *a1;
  v8 = a2;
  *(__int16 *)((char *)a2.i16 + 1) = a1[25];
  a6.i32[0] = a1[26];
  a6.i8[4] = a1[27];
  *(__int16 *)((char *)a6.i16 + 1) = a6.u8[4];
  v9 = (int32x4_t)vzip1q_s16(a2, a6);
  a6.i32[0] = *((_DWORD *)a1 + 7);
  v10 = (int8x16_t)vzip1q_s32(v9, (int32x4_t)a6);
  a6.i64[0] = *(_QWORD *)(a1 + 17);
  a6.i8[8] = *a1;
  a6.i8[15] = a1[32];
  v11 = (int32x4_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_239EC65D0);
  v12 = (int16x8_t)veorq_s8(vqtbl1q_s8(v10, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v11);
  v11.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v12;
  a1[33] = 0;
  v8.i8[1] = a1[9];
  v12.i32[0] = v7;
  v12.i8[4] = a1[11];
  v12.i8[1] = v12.i8[4];
  v13 = (int32x4_t)vzip1q_s16(v8, v12);
  v8.i64[0] = *(_QWORD *)(a1 + 1);
  v8.i8[8] = v6;
  v8.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v13, v11), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F01D4(unsigned __int8 *a1, int16x8_t a2, double a3, double a4, double a5, int16x8_t a6)
{
  unsigned __int8 v6;
  __int32 v7;
  int16x8_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int8x16_t result;

  v6 = *a1;
  v7 = a1[10];
  a2.i32[0] = *a1;
  v8 = a2;
  *(__int16 *)((char *)a2.i16 + 1) = a1[25];
  a6.i32[0] = a1[26];
  a6.i8[4] = a1[27];
  *(__int16 *)((char *)a6.i16 + 1) = a6.u8[4];
  v9 = (int32x4_t)vzip1q_s16(a2, a6);
  a6.i32[0] = *((_DWORD *)a1 + 7);
  v10 = (int8x16_t)vzip1q_s32(v9, (int32x4_t)a6);
  a6.i64[0] = *(_QWORD *)(a1 + 17);
  a6.i8[8] = *a1;
  a6.i8[15] = a1[32];
  v11 = (int32x4_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_239EC65D0);
  v12 = (int16x8_t)veorq_s8(vqtbl1q_s8(v10, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v11);
  v11.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v12;
  a1[33] ^= v6;
  a1[34] ^= v6;
  a1[35] = 0;
  v8.i8[1] = a1[9];
  v12.i32[0] = v7;
  v12.i8[4] = a1[11];
  v12.i8[1] = v12.i8[4];
  v13 = (int32x4_t)vzip1q_s16(v8, v12);
  v8.i64[0] = *(_QWORD *)(a1 + 1);
  v8.i8[8] = v6;
  v8.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v13, v11), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F02A0(unsigned __int8 *a1, double a2, int16x8_t a3, double a4, double a5, int16x8_t a6)
{
  unsigned __int8 v6;
  __int32 v7;
  int16x8_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int8x16_t result;

  v6 = *a1;
  v7 = a1[10];
  a3.i32[0] = *a1;
  v8 = a3;
  *(__int16 *)((char *)a3.i16 + 1) = a1[25];
  a6.i32[0] = a1[26];
  a6.i8[4] = a1[27];
  *(__int16 *)((char *)a6.i16 + 1) = a6.u8[4];
  v9 = (int32x4_t)vzip1q_s16(a3, a6);
  a6.i32[0] = *((_DWORD *)a1 + 7);
  v10 = (int8x16_t)vzip1q_s32(v9, (int32x4_t)a6);
  a6.i64[0] = *(_QWORD *)(a1 + 17);
  a6.i8[8] = *a1;
  a6.i8[15] = a1[32];
  v11 = (int32x4_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_239EC65D0);
  v12 = (int16x8_t)veorq_s8(vqtbl1q_s8(v10, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v11);
  v11.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v12;
  a1[33] ^= v6;
  a1[34] ^= v6;
  a1[35] ^= v6;
  a1[36] ^= v6;
  a1[37] ^= v6;
  a1[38] ^= v6;
  a1[39] = 0;
  v8.i8[1] = a1[9];
  v12.i32[0] = v7;
  v12.i8[4] = a1[11];
  v12.i8[1] = v12.i8[4];
  v13 = (int32x4_t)vzip1q_s16(v8, v12);
  v12.i64[0] = *(_QWORD *)(a1 + 1);
  v12.i8[8] = v6;
  v12.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v13, v11), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F039C(unsigned __int8 *a1, int16x8_t a2, double a3, double a4, double a5, int16x8_t a6)
{
  unsigned __int8 v6;
  __int32 v7;
  int16x8_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int8x16_t result;

  v6 = *a1;
  v7 = a1[10];
  a2.i32[0] = *a1;
  v8 = a2;
  *(__int16 *)((char *)a2.i16 + 1) = a1[25];
  a6.i32[0] = a1[26];
  a6.i8[4] = a1[27];
  *(__int16 *)((char *)a6.i16 + 1) = a6.u8[4];
  v9 = (int32x4_t)vzip1q_s16(a2, a6);
  a6.i32[0] = *((_DWORD *)a1 + 7);
  v10 = (int8x16_t)vzip1q_s32(v9, (int32x4_t)a6);
  a6.i64[0] = *(_QWORD *)(a1 + 17);
  a6.i8[8] = *a1;
  a6.i8[15] = a1[32];
  v11 = (int32x4_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_239EC65D0);
  v12 = (int16x8_t)veorq_s8(vqtbl1q_s8(v10, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v11);
  v11.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v12;
  a1[33] ^= v6;
  a1[34] ^= v6;
  a1[35] ^= v6;
  a1[36] ^= v6;
  a1[37] = 0;
  v8.i8[1] = a1[9];
  v12.i32[0] = v7;
  v12.i8[4] = a1[11];
  v12.i8[1] = v12.i8[4];
  v13 = (int32x4_t)vzip1q_s16(v8, v12);
  v8.i64[0] = *(_QWORD *)(a1 + 1);
  v8.i8[8] = v6;
  v8.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v13, v11), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F0480(unsigned __int8 *a1, double a2, double a3, double a4, int16x8_t a5, int16x8_t a6)
{
  unsigned __int8 v6;
  __int32 v7;
  int16x8_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int8x16_t result;

  v6 = *a1;
  v7 = a1[10];
  a5.i32[0] = *a1;
  v8 = a5;
  *(__int16 *)((char *)a5.i16 + 1) = a1[25];
  a6.i32[0] = a1[26];
  a6.i8[4] = a1[27];
  *(__int16 *)((char *)a6.i16 + 1) = a6.u8[4];
  v9 = (int32x4_t)vzip1q_s16(a5, a6);
  a6.i32[0] = *((_DWORD *)a1 + 7);
  v10 = (int8x16_t)vzip1q_s32(v9, (int32x4_t)a6);
  a6.i64[0] = *(_QWORD *)(a1 + 17);
  a6.i8[8] = *a1;
  a6.i8[15] = a1[32];
  v11 = (int32x4_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_239EC65D0);
  v12 = (int16x8_t)veorq_s8(vqtbl1q_s8(v10, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v11);
  v11.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v12;
  a1[33] ^= v6;
  a1[34] ^= v6;
  a1[35] ^= v6;
  a1[36] ^= v6;
  a1[37] ^= v6;
  a1[38] ^= v6;
  a1[39] ^= v6;
  a1[40] ^= v6;
  a1[41] ^= v6;
  a1[42] ^= v6;
  a1[43] ^= v6;
  a1[44] ^= v6;
  a1[45] ^= v6;
  a1[46] ^= v6;
  a1[47] = 0;
  v8.i8[1] = a1[9];
  v12.i32[0] = v7;
  v12.i8[4] = a1[11];
  v12.i8[1] = v12.i8[4];
  v13 = (int32x4_t)vzip1q_s16(v8, v12);
  v12.i64[0] = *(_QWORD *)(a1 + 1);
  v12.i8[8] = v6;
  v12.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v13, v11), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F05DC(unsigned __int8 *a1, double a2, double a3, int16x8_t a4, double a5, int16x8_t a6)
{
  unsigned __int8 v6;
  __int32 v7;
  int16x8_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int8x16_t result;

  v6 = *a1;
  v7 = a1[10];
  a4.i32[0] = *a1;
  v8 = a4;
  *(__int16 *)((char *)a4.i16 + 1) = a1[25];
  a6.i32[0] = a1[26];
  a6.i8[4] = a1[27];
  *(__int16 *)((char *)a6.i16 + 1) = a6.u8[4];
  v9 = (int32x4_t)vzip1q_s16(a4, a6);
  a6.i32[0] = *((_DWORD *)a1 + 7);
  v10 = (int8x16_t)vzip1q_s32(v9, (int32x4_t)a6);
  a6.i64[0] = *(_QWORD *)(a1 + 17);
  a6.i8[8] = *a1;
  a6.i8[15] = a1[32];
  v11 = (int32x4_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_239EC65D0);
  v12 = (int16x8_t)veorq_s8(vqtbl1q_s8(v10, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v11);
  v11.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v12;
  a1[33] ^= v6;
  a1[34] ^= v6;
  a1[35] ^= v6;
  a1[36] ^= v6;
  a1[37] ^= v6;
  a1[38] ^= v6;
  a1[39] ^= v6;
  a1[40] ^= v6;
  a1[41] = 0;
  v8.i8[1] = a1[9];
  v12.i32[0] = v7;
  v12.i8[4] = a1[11];
  v12.i8[1] = v12.i8[4];
  v13 = (int32x4_t)vzip1q_s16(v8, v12);
  v12.i64[0] = *(_QWORD *)(a1 + 1);
  v12.i8[8] = v6;
  v12.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v13, v11), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F06F0(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) ^= v5;
  *(_BYTE *)(a1 + 21) ^= v5;
  *(_BYTE *)(a1 + 22) ^= v5;
  *(_BYTE *)(a1 + 23) ^= v5;
  *(_BYTE *)(a1 + 24) ^= v5;
  *(_BYTE *)(a1 + 25) ^= v5;
  *(_BYTE *)(a1 + 26) ^= v5;
  *(_BYTE *)(a1 + 27) ^= v5;
  *(_BYTE *)(a1 + 28) ^= v5;
  *(_BYTE *)(a1 + 29) ^= v5;
  *(_BYTE *)(a1 + 30) ^= v5;
  *(_BYTE *)(a1 + 31) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F0804(unsigned __int8 *a1, double a2, int16x8_t a3, double a4, int16x8_t a5)
{
  unsigned __int8 v5;
  __int32 v6;
  int16x8_t v7;
  int32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int16x8_t v11;
  int32x4_t v12;
  int8x16_t result;

  v5 = *a1;
  v6 = a1[10];
  a3.i32[0] = *a1;
  v7 = a3;
  *(__int16 *)((char *)a3.i16 + 1) = a1[25];
  a5.i32[0] = a1[26];
  a5.i8[4] = a1[27];
  *(__int16 *)((char *)a5.i16 + 1) = a5.u8[4];
  v8 = (int32x4_t)vzip1q_s16(a3, a5);
  a5.i32[0] = *((_DWORD *)a1 + 7);
  v9 = (int8x16_t)vzip1q_s32(v8, (int32x4_t)a5);
  a5.i64[0] = *(_QWORD *)(a1 + 17);
  a5.i8[8] = *a1;
  a5.i8[15] = a1[32];
  v10 = (int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_239EC65D0);
  v11 = (int16x8_t)veorq_s8(vqtbl1q_s8(v9, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v10);
  v10.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v11;
  a1[33] ^= v5;
  a1[34] ^= v5;
  a1[35] ^= v5;
  a1[36] ^= v5;
  a1[37] ^= v5;
  a1[38] = 0;
  v7.i8[1] = a1[9];
  v11.i32[0] = v6;
  v11.i8[4] = a1[11];
  v11.i8[1] = v11.i8[4];
  v12 = (int32x4_t)vzip1q_s16(v7, v11);
  v11.i64[0] = *(_QWORD *)(a1 + 1);
  v11.i8[8] = v5;
  v11.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v12, v10), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v11, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F08F4(unsigned __int8 *a1, double a2, int16x8_t a3, double a4, int16x8_t a5)
{
  unsigned __int8 v5;
  __int32 v6;
  int16x8_t v7;
  int32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int16x8_t v11;
  int32x4_t v12;
  int8x16_t result;

  v5 = *a1;
  v6 = a1[10];
  a3.i32[0] = *a1;
  v7 = a3;
  *(__int16 *)((char *)a3.i16 + 1) = a1[25];
  a5.i32[0] = a1[26];
  a5.i8[4] = a1[27];
  *(__int16 *)((char *)a5.i16 + 1) = a5.u8[4];
  v8 = (int32x4_t)vzip1q_s16(a3, a5);
  a5.i32[0] = *((_DWORD *)a1 + 7);
  v9 = (int8x16_t)vzip1q_s32(v8, (int32x4_t)a5);
  a5.i64[0] = *(_QWORD *)(a1 + 17);
  a5.i8[8] = *a1;
  a5.i8[15] = a1[32];
  v10 = (int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_239EC65D0);
  v11 = (int16x8_t)veorq_s8(vqtbl1q_s8(v9, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v10);
  v10.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v11;
  a1[33] ^= v5;
  a1[34] ^= v5;
  a1[35] ^= v5;
  a1[36] ^= v5;
  a1[37] ^= v5;
  a1[38] ^= v5;
  a1[39] ^= v5;
  a1[40] = 0;
  v7.i8[1] = a1[9];
  v11.i32[0] = v6;
  v11.i8[4] = a1[11];
  v11.i8[1] = v11.i8[4];
  v12 = (int32x4_t)vzip1q_s16(v7, v11);
  v11.i64[0] = *(_QWORD *)(a1 + 1);
  v11.i8[8] = v5;
  v11.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v12, v10), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v11, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F09FC(unsigned __int8 *a1, double a2, double a3, int16x8_t a4, int16x8_t a5)
{
  unsigned __int8 v5;
  __int32 v6;
  int16x8_t v7;
  int32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int16x8_t v11;
  int32x4_t v12;
  int8x16_t result;

  v5 = *a1;
  v6 = a1[10];
  a4.i32[0] = *a1;
  v7 = a4;
  *(__int16 *)((char *)a4.i16 + 1) = a1[25];
  a5.i32[0] = a1[26];
  a5.i8[4] = a1[27];
  *(__int16 *)((char *)a5.i16 + 1) = a5.u8[4];
  v8 = (int32x4_t)vzip1q_s16(a4, a5);
  a5.i32[0] = *((_DWORD *)a1 + 7);
  v9 = (int8x16_t)vzip1q_s32(v8, (int32x4_t)a5);
  a5.i64[0] = *(_QWORD *)(a1 + 17);
  a5.i8[8] = *a1;
  a5.i8[15] = a1[32];
  v10 = (int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_239EC65D0);
  v11 = (int16x8_t)veorq_s8(vqtbl1q_s8(v9, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v10);
  v10.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v11;
  a1[33] ^= v5;
  a1[34] ^= v5;
  a1[35] ^= v5;
  a1[36] ^= v5;
  a1[37] ^= v5;
  a1[38] ^= v5;
  a1[39] ^= v5;
  a1[40] ^= v5;
  a1[41] ^= v5;
  a1[42] ^= v5;
  a1[43] ^= v5;
  a1[44] ^= v5;
  a1[45] ^= v5;
  a1[46] = 0;
  v7.i8[1] = a1[9];
  v11.i32[0] = v6;
  v11.i8[4] = a1[11];
  v11.i8[1] = v11.i8[4];
  v12 = (int32x4_t)vzip1q_s16(v7, v11);
  v11.i64[0] = *(_QWORD *)(a1 + 1);
  v11.i8[8] = v5;
  v11.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v12, v10), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v11, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F0B4C(unsigned __int8 *a1, double a2, double a3, int16x8_t a4, int16x8_t a5)
{
  unsigned __int8 v5;
  __int32 v6;
  int16x8_t v7;
  int32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int16x8_t v11;
  int32x4_t v12;
  int8x16_t result;

  v5 = *a1;
  v6 = a1[10];
  a4.i32[0] = *a1;
  v7 = a4;
  *(__int16 *)((char *)a4.i16 + 1) = a1[25];
  a5.i32[0] = a1[26];
  a5.i8[4] = a1[27];
  *(__int16 *)((char *)a5.i16 + 1) = a5.u8[4];
  v8 = (int32x4_t)vzip1q_s16(a4, a5);
  a5.i32[0] = *((_DWORD *)a1 + 7);
  v9 = (int8x16_t)vzip1q_s32(v8, (int32x4_t)a5);
  a5.i64[0] = *(_QWORD *)(a1 + 17);
  a5.i8[8] = *a1;
  a5.i8[15] = a1[32];
  v10 = (int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_239EC65D0);
  v11 = (int16x8_t)veorq_s8(vqtbl1q_s8(v9, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v10);
  v10.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v11;
  a1[33] ^= v5;
  a1[34] ^= v5;
  a1[35] ^= v5;
  a1[36] ^= v5;
  a1[37] ^= v5;
  a1[38] ^= v5;
  a1[39] ^= v5;
  a1[40] ^= v5;
  a1[41] ^= v5;
  a1[42] = 0;
  v7.i8[1] = a1[9];
  v11.i32[0] = v6;
  v11.i8[4] = a1[11];
  v11.i8[1] = v11.i8[4];
  v12 = (int32x4_t)vzip1q_s16(v7, v11);
  v11.i64[0] = *(_QWORD *)(a1 + 1);
  v11.i8[8] = v5;
  v11.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v12, v10), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v11, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F0C6C(unsigned __int8 *a1, double a2, double a3, double a4, int16x8_t a5, int16x8_t a6)
{
  unsigned __int8 v6;
  __int32 v7;
  int16x8_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int8x16_t result;

  v6 = *a1;
  v7 = a1[10];
  a5.i32[0] = *a1;
  v8 = a5;
  *(__int16 *)((char *)a5.i16 + 1) = a1[25];
  a6.i32[0] = a1[26];
  a6.i8[4] = a1[27];
  *(__int16 *)((char *)a6.i16 + 1) = a6.u8[4];
  v9 = (int32x4_t)vzip1q_s16(a5, a6);
  a6.i32[0] = *((_DWORD *)a1 + 7);
  v10 = (int8x16_t)vzip1q_s32(v9, (int32x4_t)a6);
  a6.i64[0] = *(_QWORD *)(a1 + 17);
  a6.i8[8] = *a1;
  a6.i8[15] = a1[32];
  v11 = (int32x4_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_239EC65D0);
  v12 = (int16x8_t)veorq_s8(vqtbl1q_s8(v10, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v11);
  v11.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v12;
  a1[33] ^= v6;
  a1[34] ^= v6;
  a1[35] ^= v6;
  a1[36] ^= v6;
  a1[37] ^= v6;
  a1[38] ^= v6;
  a1[39] ^= v6;
  a1[40] ^= v6;
  a1[41] ^= v6;
  a1[42] ^= v6;
  a1[43] ^= v6;
  a1[44] ^= v6;
  a1[45] = 0;
  v8.i8[1] = a1[9];
  v12.i32[0] = v7;
  v12.i8[4] = a1[11];
  v12.i8[1] = v12.i8[4];
  v13 = (int32x4_t)vzip1q_s16(v8, v12);
  v12.i64[0] = *(_QWORD *)(a1 + 1);
  v12.i8[8] = v6;
  v12.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v13, v11), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F0DB0(unsigned __int8 *a1, double a2, double a3, int16x8_t a4, int16x8_t a5)
{
  unsigned __int8 v5;
  __int32 v6;
  int16x8_t v7;
  int32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int16x8_t v11;
  int32x4_t v12;
  int8x16_t result;

  v5 = *a1;
  v6 = a1[10];
  a4.i32[0] = *a1;
  v7 = a4;
  *(__int16 *)((char *)a4.i16 + 1) = a1[25];
  a5.i32[0] = a1[26];
  a5.i8[4] = a1[27];
  *(__int16 *)((char *)a5.i16 + 1) = a5.u8[4];
  v8 = (int32x4_t)vzip1q_s16(a4, a5);
  a5.i32[0] = *((_DWORD *)a1 + 7);
  v9 = (int8x16_t)vzip1q_s32(v8, (int32x4_t)a5);
  a5.i64[0] = *(_QWORD *)(a1 + 17);
  a5.i8[8] = *a1;
  a5.i8[15] = a1[32];
  v10 = (int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_239EC65D0);
  v11 = (int16x8_t)veorq_s8(vqtbl1q_s8(v9, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v10);
  v10.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v11;
  a1[33] ^= v5;
  a1[34] ^= v5;
  a1[35] ^= v5;
  a1[36] ^= v5;
  a1[37] ^= v5;
  a1[38] ^= v5;
  a1[39] ^= v5;
  a1[40] ^= v5;
  a1[41] ^= v5;
  a1[42] ^= v5;
  a1[43] ^= v5;
  a1[44] = 0;
  v7.i8[1] = a1[9];
  v11.i32[0] = v6;
  v11.i8[4] = a1[11];
  v11.i8[1] = v11.i8[4];
  v12 = (int32x4_t)vzip1q_s16(v7, v11);
  v11.i64[0] = *(_QWORD *)(a1 + 1);
  v11.i8[8] = v5;
  v11.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v12, v10), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v11, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F0EE8(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) ^= v5;
  *(_BYTE *)(a1 + 21) ^= v5;
  *(_BYTE *)(a1 + 22) ^= v5;
  *(_BYTE *)(a1 + 23) ^= v5;
  *(_BYTE *)(a1 + 24) ^= v5;
  *(_BYTE *)(a1 + 25) ^= v5;
  *(_BYTE *)(a1 + 26) ^= v5;
  *(_BYTE *)(a1 + 27) ^= v5;
  *(_BYTE *)(a1 + 28) ^= v5;
  *(_BYTE *)(a1 + 29) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F0FE4(unsigned __int8 *a1, double a2, double a3, double a4, int16x8_t a5, int16x8_t a6)
{
  unsigned __int8 v6;
  __int32 v7;
  int16x8_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int8x16_t result;

  v6 = *a1;
  v7 = a1[10];
  a5.i32[0] = *a1;
  v8 = a5;
  *(__int16 *)((char *)a5.i16 + 1) = a1[25];
  a6.i32[0] = a1[26];
  a6.i8[4] = a1[27];
  *(__int16 *)((char *)a6.i16 + 1) = a6.u8[4];
  v9 = (int32x4_t)vzip1q_s16(a5, a6);
  a6.i32[0] = *((_DWORD *)a1 + 7);
  v10 = (int8x16_t)vzip1q_s32(v9, (int32x4_t)a6);
  a6.i64[0] = *(_QWORD *)(a1 + 17);
  a6.i8[8] = *a1;
  a6.i8[15] = a1[32];
  v11 = (int32x4_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_239EC65D0);
  v12 = (int16x8_t)veorq_s8(vqtbl1q_s8(v10, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v11);
  v11.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v12;
  a1[33] ^= v6;
  a1[34] ^= v6;
  a1[35] ^= v6;
  a1[36] ^= v6;
  a1[37] ^= v6;
  a1[38] ^= v6;
  a1[39] ^= v6;
  a1[40] ^= v6;
  a1[41] ^= v6;
  a1[42] ^= v6;
  a1[43] = 0;
  v8.i8[1] = a1[9];
  v12.i32[0] = v7;
  v12.i8[4] = a1[11];
  v12.i8[1] = v12.i8[4];
  v13 = (int32x4_t)vzip1q_s16(v8, v12);
  v12.i64[0] = *(_QWORD *)(a1 + 1);
  v12.i8[8] = v6;
  v12.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v13, v11), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F1110(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) ^= v5;
  *(_BYTE *)(a1 + 21) ^= v5;
  *(_BYTE *)(a1 + 22) ^= v5;
  *(_BYTE *)(a1 + 23) ^= v5;
  *(_BYTE *)(a1 + 24) ^= v5;
  *(_BYTE *)(a1 + 25) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F11DC(unsigned __int8 *a1, int16x8_t a2, double a3, double a4, int16x8_t a5)
{
  unsigned __int8 v5;
  __int32 v6;
  int16x8_t v7;
  int32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int16x8_t v11;
  int32x4_t v12;
  int8x16_t result;

  v5 = *a1;
  v6 = a1[10];
  a2.i32[0] = *a1;
  v7 = a2;
  *(__int16 *)((char *)a2.i16 + 1) = a1[25];
  a5.i32[0] = a1[26];
  a5.i8[4] = a1[27];
  *(__int16 *)((char *)a5.i16 + 1) = a5.u8[4];
  v8 = (int32x4_t)vzip1q_s16(a2, a5);
  a5.i32[0] = *((_DWORD *)a1 + 7);
  v9 = (int8x16_t)vzip1q_s32(v8, (int32x4_t)a5);
  a5.i64[0] = *(_QWORD *)(a1 + 17);
  a5.i8[8] = *a1;
  a5.i8[15] = a1[32];
  v10 = (int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_239EC65D0);
  v11 = (int16x8_t)veorq_s8(vqtbl1q_s8(v9, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v10);
  v10.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v11;
  a1[33] ^= v5;
  a1[34] ^= v5;
  a1[35] ^= v5;
  a1[36] = 0;
  v7.i8[1] = a1[9];
  v11.i32[0] = v6;
  v11.i8[4] = a1[11];
  v11.i8[1] = v11.i8[4];
  v12 = (int32x4_t)vzip1q_s16(v7, v11);
  v7.i64[0] = *(_QWORD *)(a1 + 1);
  v7.i8[8] = v5;
  v7.i8[15] = a1[16];
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(v12, v10), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8((int8x16_t)v7, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

unsigned __int8 *sub_2396F12B4(unsigned __int8 *a1, double a2, double a3, double a4, int16x8_t a5, double a6, int16x8_t a7)
{
  unsigned __int8 v7;
  __int32 v8;
  int16x8_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int16x8_t v17;
  int8x16_t v18;

  v7 = *a1;
  v8 = a1[10];
  a5.i32[0] = *a1;
  v9 = a5;
  v9.i8[1] = a1[9];
  v10 = a5;
  v10.i8[1] = a1[25];
  a7.i32[0] = a1[26];
  a7.i8[4] = a1[27];
  *(__int16 *)((char *)a7.i16 + 1) = a7.u8[4];
  v11 = (int32x4_t)vzip1q_s16(v10, a7);
  a7.i32[0] = *((_DWORD *)a1 + 7);
  v12 = (int8x16_t)vzip1q_s32(v11, (int32x4_t)a7);
  a7.i64[0] = *(_QWORD *)(a1 + 17);
  a7.i8[8] = *a1;
  a7.i8[15] = a1[32];
  v13 = (int32x4_t)vqtbl1q_s8((int8x16_t)a7, (int8x16_t)xmmword_239EC65D0);
  v14 = (int16x8_t)veorq_s8(vqtbl1q_s8(v12, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v13);
  v13.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v14;
  *(__int16 *)((char *)a5.i16 + 1) = a1[41];
  v14.i32[0] = a1[42];
  v14.i8[4] = a1[43];
  *(__int16 *)((char *)v14.i16 + 1) = v14.u8[4];
  v15 = (int32x4_t)vzip1q_s16(a5, v14);
  v14.i32[0] = *((_DWORD *)a1 + 11);
  v16 = (int8x16_t)vzip1q_s32(v15, (int32x4_t)v14);
  v14.i64[0] = *(_QWORD *)(a1 + 33);
  v14.i8[8] = v7;
  v14.i8[15] = a1[48];
  v17 = (int16x8_t)vqtbl1q_s8((int8x16_t)v14, (int8x16_t)xmmword_239EC65D0);
  v18 = veorq_s8(vqtbl1q_s8(v16, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v17);
  *(int8x16_t *)(a1 + 33) = v18;
  a1[49] ^= v7;
  a1[50] ^= v7;
  a1[51] ^= v7;
  a1[52] ^= v7;
  a1[53] ^= v7;
  a1[54] ^= v7;
  v18.i64[0] = *(_QWORD *)(a1 + 1);
  a1[55] ^= v7;
  v17.i32[0] = v8;
  v17.i8[4] = a1[11];
  v17.i8[1] = v17.i8[4];
  a1[56] = 0;
  v18.i8[8] = v7;
  v18.i8[15] = a1[16];
  *(int8x16_t *)(a1 + 1) = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32((int32x4_t)vzip1q_s16(v9, v17), v13), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(v18, (int8x16_t)xmmword_239EC65D0));
  return a1 + 1;
}

unsigned __int8 *sub_2396F1410(unsigned __int8 *a1, double a2, double a3, double a4, int16x8_t a5, double a6, int16x8_t a7)
{
  unsigned __int8 v7;
  __int32 v8;
  int16x8_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int16x8_t v17;
  int8x16_t v18;

  v7 = *a1;
  v8 = a1[10];
  a5.i32[0] = *a1;
  v9 = a5;
  v9.i8[1] = a1[9];
  v10 = a5;
  v10.i8[1] = a1[25];
  a7.i32[0] = a1[26];
  a7.i8[4] = a1[27];
  *(__int16 *)((char *)a7.i16 + 1) = a7.u8[4];
  v11 = (int32x4_t)vzip1q_s16(v10, a7);
  a7.i32[0] = *((_DWORD *)a1 + 7);
  v12 = (int8x16_t)vzip1q_s32(v11, (int32x4_t)a7);
  a7.i64[0] = *(_QWORD *)(a1 + 17);
  a7.i8[8] = *a1;
  a7.i8[15] = a1[32];
  v13 = (int32x4_t)vqtbl1q_s8((int8x16_t)a7, (int8x16_t)xmmword_239EC65D0);
  v14 = (int16x8_t)veorq_s8(vqtbl1q_s8(v12, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v13);
  *(int16x8_t *)(a1 + 17) = v14;
  *(__int16 *)((char *)a5.i16 + 1) = a1[41];
  v14.i32[0] = a1[42];
  v14.i8[4] = a1[43];
  v13.i32[0] = *((_DWORD *)a1 + 3);
  *(__int16 *)((char *)v14.i16 + 1) = v14.u8[4];
  v15 = (int32x4_t)vzip1q_s16(a5, v14);
  v14.i32[0] = *((_DWORD *)a1 + 11);
  v16 = (int8x16_t)vzip1q_s32(v15, (int32x4_t)v14);
  v14.i64[0] = *(_QWORD *)(a1 + 33);
  v14.i8[8] = v7;
  v14.i8[15] = a1[48];
  v17 = (int16x8_t)vqtbl1q_s8((int8x16_t)v14, (int8x16_t)xmmword_239EC65D0);
  v18 = veorq_s8(vqtbl1q_s8(v16, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v17);
  *(int8x16_t *)(a1 + 33) = v18;
  a1[49] ^= v7;
  a1[50] ^= v7;
  a1[51] ^= v7;
  a1[52] ^= v7;
  a1[53] ^= v7;
  a1[54] ^= v7;
  a1[55] ^= v7;
  a1[56] ^= v7;
  a1[57] ^= v7;
  v18.i64[0] = *(_QWORD *)(a1 + 1);
  a1[58] ^= v7;
  v17.i32[0] = v8;
  v17.i8[4] = a1[11];
  v17.i8[1] = v17.i8[4];
  a1[59] = 0;
  v18.i8[8] = v7;
  v18.i8[15] = a1[16];
  *(int8x16_t *)(a1 + 1) = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32((int32x4_t)vzip1q_s16(v9, v17), v13), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(v18, (int8x16_t)xmmword_239EC65D0));
  return a1 + 1;
}

unsigned __int8 *sub_2396F1590(unsigned __int8 *a1, double a2, double a3, int16x8_t a4, double a5, double a6, int16x8_t a7)
{
  unsigned __int8 v7;
  __int32 v8;
  int16x8_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int16x8_t v17;
  int8x16_t v18;

  v7 = *a1;
  v8 = a1[10];
  a4.i32[0] = *a1;
  v9 = a4;
  v9.i8[1] = a1[9];
  v10 = a4;
  v10.i8[1] = a1[25];
  a7.i32[0] = a1[26];
  a7.i8[4] = a1[27];
  *(__int16 *)((char *)a7.i16 + 1) = a7.u8[4];
  v11 = (int32x4_t)vzip1q_s16(v10, a7);
  a7.i32[0] = *((_DWORD *)a1 + 7);
  v12 = (int8x16_t)vzip1q_s32(v11, (int32x4_t)a7);
  a7.i64[0] = *(_QWORD *)(a1 + 17);
  a7.i8[8] = *a1;
  a7.i8[15] = a1[32];
  v13 = (int32x4_t)vqtbl1q_s8((int8x16_t)a7, (int8x16_t)xmmword_239EC65D0);
  v14 = (int16x8_t)veorq_s8(vqtbl1q_s8(v12, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v13);
  v13.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v14;
  *(__int16 *)((char *)a4.i16 + 1) = a1[41];
  v14.i32[0] = a1[42];
  v14.i8[4] = a1[43];
  *(__int16 *)((char *)v14.i16 + 1) = v14.u8[4];
  v15 = (int32x4_t)vzip1q_s16(a4, v14);
  v14.i32[0] = *((_DWORD *)a1 + 11);
  v16 = (int8x16_t)vzip1q_s32(v15, (int32x4_t)v14);
  v14.i64[0] = *(_QWORD *)(a1 + 33);
  v14.i8[8] = v7;
  v14.i8[15] = a1[48];
  v17 = (int16x8_t)vqtbl1q_s8((int8x16_t)v14, (int8x16_t)xmmword_239EC65D0);
  v18 = veorq_s8(vqtbl1q_s8(v16, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v17);
  *(int8x16_t *)(a1 + 33) = v18;
  v18.i64[0] = *(_QWORD *)(a1 + 1);
  a1[49] ^= v7;
  v17.i32[0] = v8;
  v17.i8[4] = a1[11];
  v17.i8[1] = v17.i8[4];
  a1[50] = 0;
  v18.i8[8] = v7;
  v18.i8[15] = a1[16];
  *(int8x16_t *)(a1 + 1) = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32((int32x4_t)vzip1q_s16(v9, v17), v13), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(v18, (int8x16_t)xmmword_239EC65D0));
  return a1 + 1;
}

unsigned __int8 *sub_2396F16A4(unsigned __int8 *a1, double a2, double a3, double a4, int16x8_t a5, double a6, int16x8_t a7)
{
  unsigned __int8 v7;
  __int32 v8;
  int16x8_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int16x8_t v17;
  int8x16_t v18;

  v7 = *a1;
  v8 = a1[10];
  a5.i32[0] = *a1;
  v9 = a5;
  v9.i8[1] = a1[9];
  v10 = a5;
  v10.i8[1] = a1[25];
  a7.i32[0] = a1[26];
  a7.i8[4] = a1[27];
  *(__int16 *)((char *)a7.i16 + 1) = a7.u8[4];
  v11 = (int32x4_t)vzip1q_s16(v10, a7);
  a7.i32[0] = *((_DWORD *)a1 + 7);
  v12 = (int8x16_t)vzip1q_s32(v11, (int32x4_t)a7);
  a7.i64[0] = *(_QWORD *)(a1 + 17);
  a7.i8[8] = *a1;
  a7.i8[15] = a1[32];
  v13 = (int32x4_t)vqtbl1q_s8((int8x16_t)a7, (int8x16_t)xmmword_239EC65D0);
  v14 = (int16x8_t)veorq_s8(vqtbl1q_s8(v12, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v13);
  v13.i32[0] = *((_DWORD *)a1 + 3);
  *(int16x8_t *)(a1 + 17) = v14;
  *(__int16 *)((char *)a5.i16 + 1) = a1[41];
  v14.i32[0] = a1[42];
  v14.i8[4] = a1[43];
  *(__int16 *)((char *)v14.i16 + 1) = v14.u8[4];
  v15 = (int32x4_t)vzip1q_s16(a5, v14);
  v14.i32[0] = *((_DWORD *)a1 + 11);
  v16 = (int8x16_t)vzip1q_s32(v15, (int32x4_t)v14);
  v14.i64[0] = *(_QWORD *)(a1 + 33);
  v14.i8[8] = v7;
  v14.i8[15] = a1[48];
  v17 = (int16x8_t)vqtbl1q_s8((int8x16_t)v14, (int8x16_t)xmmword_239EC65D0);
  v18 = veorq_s8(vqtbl1q_s8(v16, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v17);
  *(int8x16_t *)(a1 + 33) = v18;
  a1[49] ^= v7;
  a1[50] ^= v7;
  v18.i64[0] = *(_QWORD *)(a1 + 1);
  a1[51] ^= v7;
  v17.i32[0] = v8;
  v17.i8[4] = a1[11];
  v17.i8[1] = v17.i8[4];
  a1[52] = 0;
  v18.i8[8] = v7;
  v18.i8[15] = a1[16];
  *(int8x16_t *)(a1 + 1) = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32((int32x4_t)vzip1q_s16(v9, v17), v13), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(v18, (int8x16_t)xmmword_239EC65D0));
  return a1 + 1;
}

unsigned __int8 *sub_2396F17D0(unsigned __int8 *a1, double a2, double a3, int16x8_t a4, double a5, int16x8_t a6)
{
  unsigned __int8 v6;
  __int32 v7;
  int16x8_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v17;

  v6 = *a1;
  v7 = a1[10];
  a4.i32[0] = *a1;
  v8 = a4;
  v9 = a4;
  v9.i8[1] = a1[25];
  a6.i32[0] = a1[26];
  a6.i8[4] = a1[27];
  *(__int16 *)((char *)a6.i16 + 1) = a6.u8[4];
  v10 = (int32x4_t)vzip1q_s16(v9, a6);
  a6.i32[0] = *((_DWORD *)a1 + 7);
  v11 = (int8x16_t)vzip1q_s32(v10, (int32x4_t)a6);
  a6.i64[0] = *(_QWORD *)(a1 + 17);
  a6.i8[8] = *a1;
  a6.i8[15] = a1[32];
  v12 = (int32x4_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_239EC65D0);
  v13 = (int16x8_t)veorq_s8(vqtbl1q_s8(v11, (int8x16_t)xmmword_239EC65C0), (int8x16_t)v12);
  *(int16x8_t *)(a1 + 17) = v13;
  *(__int16 *)((char *)a4.i16 + 1) = a1[41];
  v13.i32[0] = a1[42];
  v13.i8[4] = a1[43];
  *(__int16 *)((char *)v13.i16 + 1) = v13.u8[4];
  v12.i32[0] = *((_DWORD *)a1 + 3);
  v14 = (int32x4_t)vzip1q_s16(a4, v13);
  v13.i32[0] = *((_DWORD *)a1 + 11);
  v15 = (int8x16_t)vzip1q_s32(v14, (int32x4_t)v13);
  v13.i64[0] = *(_QWORD *)(a1 + 33);
  v13.i8[8] = v6;
  v13.i8[15] = a1[48];
  v16 = vqtbl1q_s8((int8x16_t)v13, (int8x16_t)xmmword_239EC65D0);
  v17 = (int16x8_t)veorq_s8(vqtbl1q_s8(v15, (int8x16_t)xmmword_239EC65C0), v16);
  v16.i64[0] = *(_QWORD *)(a1 + 1);
  v8.i8[1] = a1[9];
  *(int16x8_t *)(a1 + 33) = v17;
  v17.i32[0] = v7;
  v17.i8[4] = a1[11];
  v17.i8[1] = v17.i8[4];
  a1[49] = 0;
  v16.i8[8] = v6;
  v16.i8[15] = a1[16];
  *(int8x16_t *)(a1 + 1) = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32((int32x4_t)vzip1q_s16(v8, v17), v12), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(v16, (int8x16_t)xmmword_239EC65D0));
  return a1 + 1;
}

int8x16_t sub_2396F18D8(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) ^= v5;
  *(_BYTE *)(a1 + 21) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F1974(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) ^= v5;
  *(_BYTE *)(a1 + 21) ^= v5;
  *(_BYTE *)(a1 + 22) ^= v5;
  *(_BYTE *)(a1 + 23) ^= v5;
  *(_BYTE *)(a1 + 24) ^= v5;
  *(_BYTE *)(a1 + 25) ^= v5;
  *(_BYTE *)(a1 + 26) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x16_t sub_2396F1A4C(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) ^= v5;
  *(_BYTE *)(a1 + 20) ^= v5;
  *(_BYTE *)(a1 + 21) ^= v5;
  *(_BYTE *)(a1 + 22) ^= v5;
  *(_BYTE *)(a1 + 23) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

uint64_t sub_2396F1B00(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      sub_2396F22C0(a1, a2, (uint64_t)a2);
      a2 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_2396F1B60(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v3;

  v3 = *(void ***)(v1 + 16);
  if (v3)
    sub_239EC09C8(v3);
  sub_239EBFDD0((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2396F1B80(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *sub_2396F1BE8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;

  result = sub_2396EC3A8();
  if (!qword_25693C770)
    goto LABEL_24;
  v5 = *a1;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25693C770);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *a1;
    if (qword_25693C770 <= v5)
      v7 = v5 % qword_25693C770;
  }
  else
  {
    v7 = (qword_25693C770 - 1) & v5;
  }
  v8 = *(uint64_t ***)(qword_25693C768 + 8 * v7);
  if (!v8 || (v9 = *v8) == 0)
LABEL_24:
    sub_239EC1ABC();
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == v5)
      {
        if (*((_DWORD *)v9 + 4) == (_DWORD)v5)
          goto LABEL_21;
      }
      else if ((v11 & (qword_25693C770 - 1)) != v7)
      {
        goto LABEL_24;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == v5)
      break;
    if (v10 >= qword_25693C770)
      v10 %= (unint64_t)qword_25693C770;
    if (v10 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (*((_DWORD *)v9 + 4) != (_DWORD)v5)
    goto LABEL_11;
LABEL_21:
  if (*((char *)v9 + 47) < 0)
    return (uint64_t *)sub_23941A7F8((_BYTE *)a2, (void *)v9[3], v9[4]);
  v12 = *(_OWORD *)(v9 + 3);
  *(_QWORD *)(a2 + 16) = v9[5];
  *(_OWORD *)a2 = v12;
  return result;
}

uint64_t sub_2396F1D1C(_QWORD *a1)
{
  int v2;
  size_t v3;
  uint64_t *v4;
  int v5;
  size_t v6;
  const void *v7;
  size_t v8;

  sub_2396EC3A8();
  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = a1[1];
  if (v2 < 0)
    a1 = (_QWORD *)*a1;
  v4 = &qword_25693C778;
  do
  {
    v4 = (uint64_t *)*v4;
    if (!v4)
      sub_239EC1AEC();
    v5 = *((char *)v4 + 47);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 47);
    else
      v6 = v4[4];
    if (v5 >= 0)
      v7 = v4 + 3;
    else
      v7 = (const void *)v4[3];
    if (v6 >= v3)
      v8 = v3;
    else
      v8 = v6;
  }
  while (memcmp(a1, v7, v8) || v6 != v3);
  return *((unsigned int *)v4 + 4);
}

uint64_t sub_2396F1DB0(int *a1)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v14;

  sub_2396EC3A8();
  if (!qword_25693C770)
    return 0;
  v2 = *a1;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25693C770);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = *a1;
    if (qword_25693C770 <= v2)
      v4 = v2 % qword_25693C770;
  }
  else
  {
    v4 = (qword_25693C770 - 1) & v2;
  }
  v5 = *(uint64_t ***)(qword_25693C768 + 8 * v4);
  if (!v5)
    return 0;
  v6 = *v5;
  if (!v6)
    return 0;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == v2)
      {
        if (*((_DWORD *)v6 + 4) == (_DWORD)v2)
          goto LABEL_22;
      }
      else if ((v8 & (qword_25693C770 - 1)) != v4)
      {
        return 0;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        return 0;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == v2)
      break;
    if (v7 >= qword_25693C770)
      v7 %= (unint64_t)qword_25693C770;
    if (v7 != v4)
      return 0;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      return 0;
  }
  if (*((_DWORD *)v6 + 4) != (_DWORD)v2)
    goto LABEL_11;
LABEL_22:
  v9 = v6 + 3;
  if (*((char *)v6 + 47) < 0)
  {
    if ((unint64_t)v6[4] <= 5)
      return 0;
    v9 = (uint64_t *)*v9;
  }
  else if (*((unsigned __int8 *)v6 + 47) <= 5u)
  {
    return 0;
  }
  v14 = *(_BYTE *)v9 == 69
     && *((_BYTE *)v9 + 1) == 82
     && *((_BYTE *)v9 + 2) == 82
     && *((_BYTE *)v9 + 3) == 79
     && *((_BYTE *)v9 + 4) == 82;
  return (v14 << 31 >> 31) & 1;
}

uint64_t sub_2396F1F28(int *a1)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v16;

  sub_2396EC3A8();
  if (!qword_25693C770)
    return 0;
  v2 = *a1;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25693C770);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = *a1;
    if (qword_25693C770 <= v2)
      v4 = v2 % qword_25693C770;
  }
  else
  {
    v4 = (qword_25693C770 - 1) & v2;
  }
  v5 = *(uint64_t ***)(qword_25693C768 + 8 * v4);
  if (!v5)
    return 0;
  v6 = *v5;
  if (!v6)
    return 0;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == v2)
      {
        if (*((_DWORD *)v6 + 4) == (_DWORD)v2)
          goto LABEL_22;
      }
      else if ((v8 & (qword_25693C770 - 1)) != v4)
      {
        return 0;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        return 0;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == v2)
      break;
    if (v7 >= qword_25693C770)
      v7 %= (unint64_t)qword_25693C770;
    if (v7 != v4)
      return 0;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      return 0;
  }
  if (*((_DWORD *)v6 + 4) != (_DWORD)v2)
    goto LABEL_11;
LABEL_22:
  v9 = v6 + 3;
  if (*((char *)v6 + 47) < 0)
  {
    if ((unint64_t)v6[4] <= 7)
      return 0;
    v9 = (uint64_t *)*v9;
  }
  else if (*((unsigned __int8 *)v6 + 47) <= 7u)
  {
    return 0;
  }
  v16 = *(_BYTE *)v9 == 87
     && *((_BYTE *)v9 + 1) == 65
     && *((_BYTE *)v9 + 2) == 82
     && *((_BYTE *)v9 + 3) == 78
     && *((_BYTE *)v9 + 4) == 73
     && *((_BYTE *)v9 + 5) == 78
     && *((_BYTE *)v9 + 6) == 71;
  return (v16 << 31 >> 31) & 1;
}

uint64_t sub_2396F20BC(int **a1)
{
  int *v2;
  int *v3;
  uint8x8_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;

  if (a1[1] == *a1)
    return 0;
  sub_2396EC3A8();
  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3 || !qword_25693C770)
    return 0;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25693C770);
  v4.i16[0] = vaddlv_u8(v4);
  v5 = qword_25693C770 - 1;
  while (1)
  {
    v6 = *v2;
    if (v4.u32[0] > 1uLL)
    {
      v7 = *v2;
      if (qword_25693C770 <= v6)
        v7 = v6 % qword_25693C770;
    }
    else
    {
      v7 = v5 & v6;
    }
    v8 = *(uint64_t ***)(qword_25693C768 + 8 * v7);
    if (v8)
    {
      v9 = *v8;
      if (v9)
        break;
    }
LABEL_5:
    if (++v2 == v3)
      return 0;
  }
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v9[1];
      if (v10 == v6)
      {
        if (*((_DWORD *)v9 + 4) == (_DWORD)v6)
          goto LABEL_26;
      }
      else if ((v10 & v5) != v7)
      {
        goto LABEL_5;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_5;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == v6)
      break;
    if (v11 >= qword_25693C770)
      v11 %= (unint64_t)qword_25693C770;
    if (v11 != v7)
      goto LABEL_5;
LABEL_20:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_5;
  }
  if (*((_DWORD *)v9 + 4) != (_DWORD)v6)
    goto LABEL_20;
LABEL_26:
  v12 = v9 + 3;
  if (*((char *)v9 + 47) < 0)
  {
    if ((unint64_t)v9[4] > 5)
    {
      v12 = (uint64_t *)*v12;
      if (*(_BYTE *)v12 == 69)
        goto LABEL_32;
    }
    goto LABEL_5;
  }
  if (*((unsigned __int8 *)v9 + 47) <= 5u || *(_BYTE *)v12 != 69)
    goto LABEL_5;
LABEL_32:
  if (*((_BYTE *)v12 + 1) != 82 || *((_BYTE *)v12 + 2) != 82 || *((_BYTE *)v12 + 3) != 79 || *((_BYTE *)v12 + 4) != 82)
    goto LABEL_5;
  return 1;
}

uint64_t sub_2396F2264(int a1)
{
  unint64_t v1;

  HIDWORD(v1) = 652835029 * a1 + 17179868;
  LODWORD(v1) = HIDWORD(v1);
  if ((v1 >> 2) < 0x83126F)
    return 2;
  else
    return a1 % 1000 < 500;
}

char *sub_2396F22C0(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  char **v9;
  char *result;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(char ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)result + 1);
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = *(char **)result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)result + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = *(char **)result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v28 = (char *)operator new(0x30uLL);
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = v6;
  *((_DWORD *)v28 + 4) = *(_DWORD *)a3;
  v13 = v28 + 24;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_23941A7F8(v13, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v28 + 5) = *(_QWORD *)(a3 + 24);
  }
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_40:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v17 = v28;
        if (v16)
          goto LABEL_29;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v17 = v28;
        if (v16)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = v26 & v6;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      v17 = v28;
      if (v16)
        goto LABEL_29;
    }
LABEL_53:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v28)
    {
      v27 = *(_QWORD *)(*(_QWORD *)v28 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v27 >= v7)
          v27 %= v7;
      }
      else
      {
        v27 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v28;
    }
    goto LABEL_64;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v17 = v28;
  if (!v16)
    goto LABEL_53;
LABEL_29:
  *v17 = *v16;
  *v16 = v28;
LABEL_64:
  result = v28;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_2396F262C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2396F2640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396F2654(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

__n128 sub_2396F2660(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_2396F2684(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  sub_23941B674(&v4, (uint64_t)__p, 1uLL);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v5 = 0;
  v4 = 0uLL;
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_2396F273C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

_QWORD *sub_2396F2748(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _OWORD *v5;
  __int128 v6;
  char *v7;
  unint64_t v8;
  char *v10;
  _BYTE *v11;
  unint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_239490944((char *)&v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v5 = v11;
  if ((unint64_t)v11 >= v12)
  {
    v7 = sub_23959AE70(&v10, a3);
  }
  else
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_23941A7F8(v11, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      v6 = *(_OWORD *)a3;
      *((_QWORD *)v11 + 2) = *(_QWORD *)(a3 + 16);
      *v5 = v6;
    }
    v7 = (char *)v5 + 24;
  }
  v8 = v12;
  *a1 = v10;
  a1[1] = v7;
  a1[2] = v8;
  return a1;
}

void sub_2396F2800(void *a1)
{
  sub_239416A48(a1);
}

_QWORD *sub_2396F280C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = result[1];
  if (*(char *)(v2 - 1) < 0)
    return sub_23941A7F8((_BYTE *)a2, *(void **)(v2 - 24), *(_QWORD *)(v2 - 16));
  v3 = *(_OWORD *)(v2 - 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 - 8);
  *(_OWORD *)a2 = v3;
  return result;
}

void sub_2396F2838(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  void **v9;
  std::string::size_type v10;
  void *__p[2];
  unsigned __int8 v12;

  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = 0;
    do
    {
      if (v5)
      {
        std::operator+<char>();
        if ((v12 & 0x80u) == 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        if ((v12 & 0x80u) == 0)
          v10 = v12;
        else
          v10 = (std::string::size_type)__p[1];
        std::string::append((std::string *)a2, (const std::string::value_type *)v9, v10);
        if ((char)v12 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v6 = *(char *)(v2 + 23);
        if (v6 >= 0)
          v7 = (const std::string::value_type *)v2;
        else
          v7 = *(const std::string::value_type **)v2;
        if (v6 >= 0)
          v8 = *(unsigned __int8 *)(v2 + 23);
        else
          v8 = *(_QWORD *)(v2 + 8);
        std::string::append((std::string *)a2, v7, v8);
      }
      v2 += 24;
      --v5;
    }
    while (v2 != v3);
  }
}

void sub_2396F290C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if ((*(char *)(v15 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2396F295C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  std::string *v9;
  uint64_t v10;

  v3 = result;
  if (*(char *)(a2 + 23) < 0)
  {
    result = (uint64_t *)sub_23941A7F8((_BYTE *)a3, *(void **)a2, *(_QWORD *)(a2 + 8));
    v6 = *v3;
    v5 = v3[1];
    if (v6 == v5)
      return result;
    while (1)
    {
LABEL_5:
      if (*(char *)(v6 + 23) < 0)
      {
        if (!*(_QWORD *)(v6 + 8) || **(_BYTE **)v6 != 47)
        {
LABEL_13:
          if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)a3).__size_)
            std::string::push_back((std::string *)a3, 47);
          goto LABEL_16;
        }
      }
      else if (!*(_BYTE *)(v6 + 23) || *(_BYTE *)v6 != 47)
      {
        goto LABEL_13;
      }
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
LABEL_16:
      v7 = *(char *)(v6 + 23);
      v8 = v7 < 0;
      if (v7 >= 0)
        v9 = (std::string *)v6;
      else
        v9 = *(std::string **)v6;
      v10 = *(unsigned __int8 *)(v6 + 23);
      if (v8)
        v10 = *(_QWORD *)(v6 + 8);
      result = (uint64_t *)sub_23948900C((std::string *)a3, v9, (std::string *)((char *)v9 + v10));
      v6 += 24;
      if (v6 == v5)
        return result;
    }
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *result;
  v5 = result[1];
  if (*result != v5)
    goto LABEL_5;
  return result;
}

void sub_2396F2A6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_2396F2A88(uint64_t a1, float32x2_t **a2, float32x2_t *a3, char a4, float32x2_t *a5, char a6)
{
  float v8;
  float32x2_t v9;
  float32x2_t v10;
  float v11;
  float32x2_t *v12;
  float32x2_t *v13;
  float v14;
  int32x2_t v15;
  float32x2_t v16;
  float32x2_t *v17;
  unint64_t i;
  uint64_t v19;
  uint64_t *v20;
  int8x8_t v21;
  uint8x8_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  _OWORD *v43;
  unint64_t *v44;
  uint64_t v45;
  __int128 v46;
  unint64_t v47;
  int v48;
  float v49;
  float *v50;
  int32x2_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  uint64_t v55;
  uint64x2_t *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int8x8_t *v64;
  unint64_t v65;
  int8x8_t v66;
  uint8x8_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  _QWORD *v75;
  unint64_t v76;
  void *__p;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t *v80;

  if (a4 && a6)
  {
    v8 = a5[1].f32[0];
    v9 = *a5;
    v10 = *a3;
    v11 = a3[1].f32[0];
  }
  else
  {
    v12 = *a2;
    v13 = a2[1];
    v10 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v9 = (float32x2_t)0x80000000800000;
    if (*a2 == v13)
    {
      v8 = -3.4028e38;
      v11 = 3.4028e38;
    }
    else
    {
      v8 = -3.4028e38;
      v11 = 3.4028e38;
      do
      {
        v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v12, v9), (int8x8_t)*v12, (int8x8_t)v9);
        v10 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, *v12), (int8x8_t)*v12, (int8x8_t)v10);
        v14 = v12[1].f32[0];
        if (v8 < v14)
          v8 = v12[1].f32[0];
        if (v14 < v11)
          v11 = v12[1].f32[0];
        v12 = (float32x2_t *)((char *)v12 + 12);
      }
      while (v12 != v13);
    }
  }
  *(float32x2_t *)(a1 + 16) = v10;
  *(float *)(a1 + 24) = v11;
  *(float32x2_t *)(a1 + 4) = v9;
  *(float *)(a1 + 12) = v8;
  v15 = (int32x2_t)vmvn_s8((int8x8_t)vcge_f32(v9, v10));
  if ((v15.i8[0] & 1) != 0 || (v15.i8[4] & 1) != 0 || v11 > v8)
    sub_239EBEBA8();
  v15.i32[0] = *(_DWORD *)a1;
  v16 = vsub_f32(v9, v10);
  *(uint64x2_t *)(a1 + 32) = vcvtq_u64_f64(vcvtq_f64_f32(vrndp_f32(vdiv_f32(v16, (float32x2_t)vdup_lane_s32(v15, 0)))));
  *(_QWORD *)(a1 + 48) = vcvtps_u32_f32((float)(v8 - v11) / *(float *)v15.i32);
  v17 = *a2;
  if (a2[1] != *a2)
  {
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 2); ++i)
    {
      v20 = (uint64_t *)((*(_QWORD *)(a1 + 40)
                       * (int)vcvtms_s32_f32((float)(v17->f32[3 * i] - *(float *)(a1 + 16)) / *(float *)a1)
                       + (int)vcvtms_s32_f32((float)(v17->f32[3 * i + 1] - *(float *)(a1 + 20)) / *(float *)a1))
                      * *(_QWORD *)(a1 + 48)
                      + (int)vcvtms_s32_f32((float)(v17[1].f32[3 * i] - *(float *)(a1 + 24)) / *(float *)a1));
      v80 = v20;
      v21 = *(int8x8_t *)(a1 + 64);
      if (!*(_QWORD *)&v21)
        goto LABEL_41;
      v22 = (uint8x8_t)vcnt_s8(v21);
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.u32[0] > 1uLL)
      {
        v23 = (unint64_t)v20;
        if ((unint64_t)v20 >= *(_QWORD *)&v21)
          v23 = (unint64_t)v20 % *(_QWORD *)&v21;
      }
      else
      {
        v23 = (unint64_t)v20 & (*(_QWORD *)&v21 - 1);
      }
      v24 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * v23);
      if (!v24 || (v25 = (_QWORD *)*v24) == 0)
      {
LABEL_41:
        v29 = (uint64_t *)operator new(8uLL);
        __p = v29;
        *v29 = i;
        v78 = v29 + 1;
        v79 = v29 + 1;
        sub_2396F3BC0(a1 + 56, (uint64_t *)&v80, (uint64_t *)&v80, (uint64_t)&__p);
        if (__p)
        {
          v78 = (uint64_t *)__p;
          operator delete(__p);
        }
        goto LABEL_20;
      }
      if (v22.u32[0] < 2uLL)
      {
        v26 = *(_QWORD *)&v21 - 1;
        while (1)
        {
          v28 = v25[1];
          if ((uint64_t *)v28 == v20)
          {
            if ((uint64_t *)v25[2] == v20)
              goto LABEL_43;
          }
          else if ((v28 & v26) != v23)
          {
            goto LABEL_41;
          }
          v25 = (_QWORD *)*v25;
          if (!v25)
            goto LABEL_41;
        }
      }
      while (1)
      {
        v27 = v25[1];
        if ((uint64_t *)v27 == v20)
          break;
        if (v27 >= *(_QWORD *)&v21)
          v27 %= *(_QWORD *)&v21;
        if (v27 != v23)
          goto LABEL_41;
LABEL_31:
        v25 = (_QWORD *)*v25;
        if (!v25)
          goto LABEL_41;
      }
      if ((uint64_t *)v25[2] != v20)
        goto LABEL_31;
LABEL_43:
      v31 = (unint64_t *)v25[4];
      v30 = v25[5];
      if ((unint64_t)v31 < v30)
      {
        *v31 = i;
        v19 = (uint64_t)(v31 + 1);
        goto LABEL_19;
      }
      v32 = (unint64_t *)v25[3];
      v33 = v31 - v32;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61)
        sub_2394189F8();
      v35 = v30 - (_QWORD)v32;
      if (v35 >> 2 > v34)
        v34 = v35 >> 2;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      v76 = v34;
      if (!v34)
      {
        v36 = 0;
        v37 = (unint64_t *)(8 * v33);
        *(_QWORD *)(8 * v33) = i;
        v19 = 8 * v33 + 8;
        if (v31 != v32)
          goto LABEL_52;
LABEL_55:
        v39 = v76;
        goto LABEL_61;
      }
      if (v34 >> 61)
        sub_239418A80();
      v36 = operator new(8 * v34);
      v37 = (unint64_t *)&v36[8 * v33];
      *v37 = i;
      v19 = (uint64_t)(v37 + 1);
      if (v31 == v32)
        goto LABEL_55;
LABEL_52:
      v38 = (char *)(v31 - 1) - (char *)v32;
      v39 = v76;
      if (v38 < 0x58)
        goto LABEL_102;
      if ((unint64_t)((char *)v32 - v36) < 0x20)
        goto LABEL_102;
      v40 = (v38 >> 3) + 1;
      v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v42 = &v31[v41 / 0xFFFFFFFFFFFFFFF8];
      v37 = (unint64_t *)((char *)v37 - v41);
      v43 = &v36[8 * v33 - 16];
      v44 = v31 - 2;
      v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v46 = *(_OWORD *)v44;
        *(v43 - 1) = *((_OWORD *)v44 - 1);
        *v43 = v46;
        v43 -= 2;
        v44 -= 4;
        v45 -= 4;
      }
      while (v45);
      v31 = v42;
      if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_102:
        do
        {
          v47 = *--v31;
          *--v37 = v47;
        }
        while (v31 != v32);
      }
LABEL_61:
      v25[3] = v37;
      v25[4] = v19;
      v25[5] = &v36[8 * v39];
      if (v32)
        operator delete(v32);
LABEL_19:
      v25[4] = v19;
LABEL_20:
      v17 = *a2;
    }
  }
  __p = 0;
  v78 = 0;
  v79 = 0;
  sub_2396F321C(a1, (uint64_t)&__p);
  v48 = *(_DWORD *)(a1 + 112);
  v49 = *(float *)a1;
  v50 = (float *)operator new(0x90uLL);
  *((_QWORD *)v50 + 1) = 0;
  *((_QWORD *)v50 + 2) = 0;
  *(_QWORD *)v50 = &off_250AE36F8;
  v50[6] = v49 * (float)v48;
  v51.i32[1] = 0;
  *((_OWORD *)v50 + 5) = 0u;
  *((_OWORD *)v50 + 6) = 0u;
  v50[28] = 1.0;
  *((_QWORD *)v50 + 15) = 0;
  *((_QWORD *)v50 + 16) = 0;
  *((_DWORD *)v50 + 34) = 8;
  v52 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v50 + 6;
  *(_QWORD *)(a1 + 104) = v50;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = *(_QWORD *)(a1 + 96);
  *(float32x2_t *)(v55 + 16) = v10;
  *(float *)(v55 + 24) = v11;
  *(float32x2_t *)(v55 + 4) = v9;
  *(float *)(v55 + 12) = v8;
  v56 = *(uint64x2_t **)(a1 + 96);
  v51.i32[0] = v56->i32[0];
  v57 = vcvtps_u32_f32((float)(v8 - v11) / *(float *)v56->i32);
  v56[2] = vcvtq_u64_f64(vcvtq_f64_f32(vrndp_f32(vdiv_f32(v16, (float32x2_t)vdup_lane_s32(v51, 0)))));
  v56[3].i64[0] = v57;
  v58 = (uint64_t *)__p;
  v59 = v78;
  if (__p != v78)
  {
LABEL_70:
    v80 = v58;
    v60 = sub_239475984(a1 + 56, (unint64_t *)v58, (uint64_t)&unk_239EC6E98, &v80);
    v61 = *(_QWORD *)(a1 + 40);
    v62 = *(_QWORD *)(a1 + 48);
    v63 = *v58 / (v62 * v61);
    v64 = *(int8x8_t **)(a1 + 96);
    v65 = (*v58 - (v63 * v61 + (*v58 - v63 * v61 * v62) / v62) * v62) / *(int *)(a1 + 112)
        + ((*v58 - v63 * v61 * v62) / v62 / *(int *)(a1 + 112) + *(_QWORD *)&v64[5] * (v63 / *(int *)(a1 + 112)))
        * *(_QWORD *)&v64[6];
    v80 = (uint64_t *)v65;
    v66 = v64[8];
    if (!*(_QWORD *)&v66)
      goto LABEL_90;
    v67 = (uint8x8_t)vcnt_s8(v66);
    v67.i16[0] = vaddlv_u8(v67);
    if (v67.u32[0] > 1uLL)
    {
      v68 = v65;
      if (*(_QWORD *)&v66 <= v65)
        v68 = v65 % *(_QWORD *)&v66;
    }
    else
    {
      v68 = (*(_QWORD *)&v66 - 1) & v65;
    }
    v69 = *(_QWORD **)(*(_QWORD *)&v64[7] + 8 * v68);
    if (!v69 || (v70 = (_QWORD *)*v69) == 0)
    {
LABEL_90:
      sub_2396F3BC0((uint64_t)&v64[7], (uint64_t *)&v80, (uint64_t *)&v80, (uint64_t)(v60 + 3));
      goto LABEL_91;
    }
    if (v67.u32[0] < 2uLL)
    {
      v71 = *(_QWORD *)&v66 - 1;
      while (1)
      {
        v73 = v70[1];
        if (v73 == v65)
        {
          if (v70[2] == v65)
            goto LABEL_93;
        }
        else if ((v73 & v71) != v68)
        {
          goto LABEL_90;
        }
        v70 = (_QWORD *)*v70;
        if (!v70)
          goto LABEL_90;
      }
    }
    while (1)
    {
      v72 = v70[1];
      if (v72 == v65)
      {
        if (v70[2] == v65)
        {
LABEL_93:
          v74 = sub_2396E7278(v64, v65);
          v75 = sub_2396E7278(*(int8x8_t **)(a1 + 96), (unint64_t)v80);
          sub_2396F40B8(v74, (void *)v75[1], (char *)v60[3], (char *)v60[4], (uint64_t)(v60[4] - v60[3]) >> 3);
LABEL_91:
          if (++v58 == v59)
          {
            v58 = (uint64_t *)__p;
            break;
          }
          goto LABEL_70;
        }
      }
      else
      {
        if (v72 >= *(_QWORD *)&v66)
          v72 %= *(_QWORD *)&v66;
        if (v72 != v68)
          goto LABEL_90;
      }
      v70 = (_QWORD *)*v70;
      if (!v70)
        goto LABEL_90;
    }
  }
  if (v58)
  {
    v78 = v58;
    operator delete(v58);
  }
}

void sub_2396F3174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396F31A4(uint64_t a1, float32x2_t **a2, float32x2_t *a3, float32x2_t *a4, float a5)
{
  *(float *)a1 = a5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 8;
  sub_2396F2A88(a1, a2, a3, 1, a4, 1);
  return a1;
}

void sub_2396F31F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 104);
  if (v3)
    sub_239EC1B78(v3);
  sub_239EC1B1C(v1, (void **)(v1 + 56));
  _Unwind_Resume(a1);
}

void sub_2396F321C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(char **)a2;
  if (v4 <= (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 3)
    goto LABEL_13;
  if (v4 >> 61)
LABEL_44:
    sub_2394189F8();
  v6 = *(_BYTE **)(a2 + 8);
  v7 = 8 * v4;
  v8 = (char *)operator new(8 * v4);
  v9 = v6 - v5;
  v10 = &v8[(v6 - v5) & 0xFFFFFFFFFFFFFFF8];
  v11 = v10;
  if (v6 != v5)
  {
    if ((unint64_t)(v9 - 8) < 0x58)
    {
      v11 = &v8[(v6 - v5) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_10:
        v20 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v11 - 1) = v20;
        v11 -= 8;
      }
      while (v6 != v5);
      goto LABEL_11;
    }
    v11 = &v8[(v6 - v5) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v6 - &v8[v9 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_10;
    v12 = v9 >> 3;
    v13 = ((unint64_t)(v9 - 8) >> 3) + 1;
    v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
    v15 = &v6[-v14];
    v11 = &v10[-v14];
    v16 = &v8[8 * v12 - 16];
    v17 = (__int128 *)(v6 - 16);
    v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v19 = *v17;
      *((_OWORD *)v16 - 1) = *(v17 - 1);
      *(_OWORD *)v16 = v19;
      v16 -= 32;
      v17 -= 2;
      v18 -= 4;
    }
    while (v18);
    v6 = v15;
    if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_10;
  }
LABEL_11:
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = &v8[v7];
  if (v5)
    operator delete(v5);
LABEL_13:
  v21 = *(_QWORD **)(a1 + 72);
  if (v21)
  {
    v22 = *(char **)(a2 + 8);
    while (1)
    {
      v24 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v22 >= v24)
        break;
      *(_QWORD *)v22 = v21[2];
      v23 = (uint64_t)(v22 + 8);
LABEL_16:
      *(_QWORD *)(a2 + 8) = v23;
      v21 = (_QWORD *)*v21;
      v22 = (char *)v23;
      if (!v21)
        return;
    }
    v25 = *(char **)a2;
    v26 = (uint64_t)&v22[-*(_QWORD *)a2];
    v27 = v26 >> 3;
    v28 = (v26 >> 3) + 1;
    if (v28 >> 61)
      goto LABEL_44;
    v29 = v24 - (_QWORD)v25;
    if (v29 >> 2 > v28)
      v28 = v29 >> 2;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30)
    {
      if (v30 >> 61)
        sub_239418A80();
      v31 = operator new(8 * v30);
      v32 = &v31[8 * v27];
      *v32 = v21[2];
      v23 = (uint64_t)(v32 + 1);
      if (v22 == v25)
        goto LABEL_41;
    }
    else
    {
      v31 = 0;
      v32 = (_QWORD *)(8 * v27);
      *(_QWORD *)(8 * v27) = v21[2];
      v23 = 8 * v27 + 8;
      if (v22 == v25)
        goto LABEL_41;
    }
    v33 = v22 - 8 - v25;
    if (v33 >= 0x168)
    {
      if (&v31[v26 - 8 - (v33 & 0xFFFFFFFFFFFFFFF8)] > &v31[v26 - 8])
      {
        v34 = v22;
      }
      else if (&v22[-(v33 & 0xFFFFFFFFFFFFFFF8) - 8] > v22 - 8)
      {
        v34 = v22;
      }
      else if ((unint64_t)(v22 - v31 - v26) >= 0x20)
      {
        v35 = (v33 >> 3) + 1;
        v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        v34 = &v22[-v36];
        v32 = (_QWORD *)((char *)v32 - v36);
        v37 = &v31[8 * v27 - 16];
        v38 = v22 - 16;
        v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *v37 = v40;
          v37 -= 2;
          v38 -= 32;
          v39 -= 4;
        }
        while (v39);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_41;
      }
      else
      {
        v34 = v22;
      }
    }
    else
    {
      v34 = v22;
    }
    do
    {
      v41 = *((_QWORD *)v34 - 1);
      v34 -= 8;
      *--v32 = v41;
    }
    while (v34 != v25);
LABEL_41:
    *(_QWORD *)a2 = v32;
    *(_QWORD *)(a2 + 8) = v23;
    *(_QWORD *)(a2 + 16) = &v31[8 * v30];
    if (v25)
      operator delete(v25);
    goto LABEL_16;
  }
}

void sub_2396F34E8(uint64_t a1, float *a2, float *a3, uint64_t a4, _QWORD *a5, char a6, int a7)
{
  _BOOL4 v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  float v20;
  float v21;
  float v22;
  double v23;
  double v24;
  float v25;
  float v26;
  double v27;
  float v28;
  double v29;
  double v30;
  float v31;
  float v32;
  double v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  char v41;
  unint64_t v42;
  _QWORD *v43;
  int8x8_t v44;
  unint64_t v45;
  uint8x8_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  float v55;
  int v56;
  int8x8_t v57;
  uint8x8_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int8x8_t v65;
  uint8x8_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  _BOOL4 v98;
  _QWORD *v99;
  int v100;
  float v101;

  if (a6)
    v8 = a5[10] != 0;
  else
    v8 = 0;
  v9 = 0;
  v10 = a2[1];
  v11 = *(float *)(a1 + 16);
  v12 = *(float *)(a1 + 20);
  v13 = *(float *)a1;
  v14 = a2[2];
  v15 = *(float *)(a1 + 24);
  v16 = (int)vcvtms_s32_f32((float)(*a2 - v11) / *(float *)a1);
  v17 = (int)vcvtms_s32_f32((float)(v10 - v12) / *(float *)a1);
  v18 = (int)vcvtms_s32_f32((float)(v14 - v15) / *(float *)a1);
  v19 = *(float *)a1;
  v20 = (float)(*(float *)a1 * (float)v16) + v19 * 0.5 + v11;
  v21 = (float)(*(float *)a1 * (float)v17) + v19 * 0.5 + v12;
  v22 = (float)(*(float *)a1 * (float)v18) + v19 * 0.5 + v15;
  v23 = v20;
  v24 = -v19;
  v26 = *a3;
  v25 = a3[1];
  if (*a3 >= 0.0)
    v27 = *(float *)a1;
  else
    v27 = -v19;
  v28 = v23 + v27 * 0.5;
  v29 = v21;
  if (v25 >= 0.0)
    v30 = *(float *)a1;
  else
    v30 = -v19;
  v31 = v29 + v30 * 0.5;
  v32 = a3[2];
  v33 = v22;
  if (v32 >= 0.0)
    v24 = *(float *)a1;
  v34 = v33 + v24 * 0.5;
  v35 = v26 * (float)(v28 - *a2);
  v36 = v25 * (float)(v31 - v10);
  v37 = v32 * (float)(v34 - v14);
  v38 = v13 * fabsf(v26);
  v39 = v13 * fabsf(v25);
  v40 = v13 * fabsf(v32);
  v41 = 1;
  while (2)
  {
    if ((v41 & 1) != 0)
    {
LABEL_14:
      LODWORD(v42) = 1;
    }
    else
    {
      v42 = *(int *)(a1 + 112);
      v43 = *(_QWORD **)(a1 + 96);
      v44 = (int8x8_t)v43[8];
      if (v44)
      {
        v45 = v18 / v42 + (v17 / v42 + v43[5] * (v16 / v42)) * v43[6];
        v46 = (uint8x8_t)vcnt_s8(v44);
        v46.i16[0] = vaddlv_u8(v46);
        if (v46.u32[0] > 1uLL)
        {
          v47 = v18 / v42 + (v17 / v42 + v43[5] * (v16 / v42)) * v43[6];
          if (*(_QWORD *)&v44 <= v45)
            v47 = v45 % *(_QWORD *)&v44;
        }
        else
        {
          v47 = (*(_QWORD *)&v44 - 1) & v45;
        }
        v48 = *(_QWORD **)(v43[7] + 8 * v47);
        if (v48)
        {
          v49 = (_QWORD *)*v48;
          if (v49)
          {
            if (v46.u32[0] < 2uLL)
            {
              v50 = *(_QWORD *)&v44 - 1;
              while (1)
              {
                v52 = v49[1];
                if (v52 == v45)
                {
                  if (v49[2] == v45)
                    goto LABEL_14;
                }
                else if ((v52 & v50) != v47)
                {
                  goto LABEL_36;
                }
                v49 = (_QWORD *)*v49;
                if (!v49)
                  goto LABEL_36;
              }
            }
            do
            {
              v51 = v49[1];
              if (v51 == v45)
              {
                if (v49[2] == v45)
                  goto LABEL_14;
              }
              else
              {
                if (v51 >= *(_QWORD *)&v44)
                  v51 %= *(_QWORD *)&v44;
                if (v51 != v47)
                  break;
              }
              v49 = (_QWORD *)*v49;
            }
            while (v49);
          }
        }
      }
    }
LABEL_36:
    if (v35 > v36 || v35 > v37)
    {
      v55 = (float)(int)v42;
      v56 = -(int)v42;
      if (v36 > v37 || v36 > v35)
      {
        v37 = v37 + (float)(v40 * v55);
        if (v32 >= 0.0)
          v56 = v42;
        v18 += v56;
        v54 = v18 + (v17 + *(_QWORD *)(a1 + 40) * v16) * *(_QWORD *)(a1 + 48);
        if (!v8)
          goto LABEL_72;
      }
      else
      {
        v36 = v36 + (float)(v39 * v55);
        if (v25 >= 0.0)
          v56 = v42;
        v17 += v56;
        v54 = v18 + (v17 + *(_QWORD *)(a1 + 40) * v16) * *(_QWORD *)(a1 + 48);
        if (!v8)
          goto LABEL_72;
      }
LABEL_52:
      v57 = (int8x8_t)a5[8];
      if (v57)
      {
        v58 = (uint8x8_t)vcnt_s8(v57);
        v58.i16[0] = vaddlv_u8(v58);
        if (v58.u32[0] > 1uLL)
        {
          v59 = v54;
          if (*(_QWORD *)&v57 <= v54)
            v59 = v54 % *(_QWORD *)&v57;
        }
        else
        {
          v59 = (*(_QWORD *)&v57 - 1) & v54;
        }
        v60 = *(_QWORD **)(a5[7] + 8 * v59);
        if (v60)
        {
          v61 = (_QWORD *)*v60;
          if (v61)
          {
            if (v58.u32[0] < 2uLL)
            {
              v62 = *(_QWORD *)&v57 - 1;
              while (1)
              {
                v64 = v61[1];
                if (v64 == v54)
                {
                  if (v61[2] == v54)
                    return;
                }
                else if ((v64 & v62) != v59)
                {
                  goto LABEL_72;
                }
                v61 = (_QWORD *)*v61;
                if (!v61)
                  goto LABEL_72;
              }
            }
            while (1)
            {
              v63 = v61[1];
              if (v63 == v54)
              {
                if (v61[2] == v54)
                  return;
              }
              else
              {
                if (v63 >= *(_QWORD *)&v57)
                  v63 %= *(_QWORD *)&v57;
                if (v63 != v59)
                  goto LABEL_72;
              }
              v61 = (_QWORD *)*v61;
              if (!v61)
                goto LABEL_72;
            }
          }
        }
      }
      goto LABEL_72;
    }
    v35 = v35 + (float)(v38 * (float)(int)v42);
    if (v26 >= 0.0)
      v53 = v42;
    else
      v53 = -(int)v42;
    v16 += v53;
    v54 = v18 + (v17 + *(_QWORD *)(a1 + 40) * v16) * *(_QWORD *)(a1 + 48);
    if (v8)
      goto LABEL_52;
LABEL_72:
    v65 = *(int8x8_t *)(a1 + 64);
    if (!*(_QWORD *)&v65)
      goto LABEL_92;
    v66 = (uint8x8_t)vcnt_s8(v65);
    v66.i16[0] = vaddlv_u8(v66);
    if (v66.u32[0] > 1uLL)
    {
      v67 = v54;
      if (*(_QWORD *)&v65 <= v54)
        v67 = v54 % *(_QWORD *)&v65;
    }
    else
    {
      v67 = (*(_QWORD *)&v65 - 1) & v54;
    }
    v68 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * v67);
    if (!v68 || (v69 = (_QWORD *)*v68) == 0)
    {
LABEL_92:
      v41 = 0;
      v9 += v42;
      if (a7 >= 1)
        goto LABEL_93;
      goto LABEL_94;
    }
    if (v66.u32[0] < 2uLL)
    {
      v70 = *(_QWORD *)&v65 - 1;
      while (1)
      {
        v72 = v69[1];
        if (v72 == v54)
        {
          if (v69[2] == v54)
            goto LABEL_98;
        }
        else if ((v72 & v70) != v67)
        {
          goto LABEL_92;
        }
        v69 = (_QWORD *)*v69;
        if (!v69)
          goto LABEL_92;
      }
    }
    while (1)
    {
      v71 = v69[1];
      if (v71 == v54)
        break;
      if (v71 >= *(_QWORD *)&v65)
        v71 %= *(_QWORD *)&v65;
      if (v71 != v67)
        goto LABEL_92;
LABEL_82:
      v69 = (_QWORD *)*v69;
      if (!v69)
        goto LABEL_92;
    }
    if (v69[2] != v54)
      goto LABEL_82;
LABEL_98:
    v74 = *(char **)(a4 + 8);
    v73 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v74 >= v73)
    {
      v99 = a5;
      v100 = a7;
      v75 = *(char **)a4;
      v76 = (uint64_t)&v74[-*(_QWORD *)a4];
      v77 = v76 >> 3;
      v78 = (v76 >> 3) + 1;
      if (v78 >> 61)
        sub_2394189F8();
      v79 = v73 - (_QWORD)v75;
      if (v79 >> 2 > v78)
        v78 = v79 >> 2;
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
        v78 = 0x1FFFFFFFFFFFFFFFLL;
      v98 = v8;
      v101 = v26;
      v97 = v78;
      if (v78)
      {
        v95 = &v74[-*(_QWORD *)a4];
        v96 = v76 >> 3;
        if (v78 >> 61)
          sub_239418A80();
        v80 = a4;
        v81 = operator new(8 * v78);
        a4 = v80;
        v26 = v101;
        v76 = (uint64_t)v95;
        v77 = v96;
        v82 = (unint64_t *)&v81[8 * v96];
        *v82 = v54;
        v83 = (uint64_t)(v82 + 1);
        if (v74 != v75)
        {
LABEL_109:
          v84 = v74 - 8 - v75;
          if (v84 < 0x58)
            goto LABEL_127;
          if ((unint64_t)(v74 - &v81[v76]) < 0x20)
            goto LABEL_127;
          v85 = (v84 >> 3) + 1;
          v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
          v87 = &v74[-v86];
          v82 = (unint64_t *)((char *)v82 - v86);
          v88 = &v81[8 * v77 - 16];
          v89 = v74 - 16;
          v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v91 = *(_OWORD *)v89;
            *(v88 - 1) = *((_OWORD *)v89 - 1);
            *v88 = v91;
            v88 -= 2;
            v89 -= 32;
            v90 -= 4;
          }
          while (v90);
          v74 = v87;
          if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_127:
            do
            {
              v92 = *((_QWORD *)v74 - 1);
              v74 -= 8;
              *--v82 = v92;
            }
            while (v74 != v75);
          }
          *(_QWORD *)a4 = v82;
          *(_QWORD *)(a4 + 8) = v83;
          *(_QWORD *)(a4 + 16) = &v81[8 * v97];
          if (v75)
            goto LABEL_116;
          goto LABEL_117;
        }
      }
      else
      {
        v81 = 0;
        v82 = (unint64_t *)(8 * v77);
        *(_QWORD *)(8 * v77) = v54;
        v83 = 8 * v77 + 8;
        if (v74 != v75)
          goto LABEL_109;
      }
      *(_QWORD *)a4 = v82;
      *(_QWORD *)(a4 + 8) = v83;
      *(_QWORD *)(a4 + 16) = &v81[8 * v97];
      if (v75)
      {
LABEL_116:
        v93 = a4;
        v94 = v83;
        operator delete(v75);
        v83 = v94;
        v26 = v101;
        a4 = v93;
      }
LABEL_117:
      a7 = v100;
      a5 = v99;
      v8 = v98;
      *(_QWORD *)(a4 + 8) = v83;
      v41 = 1;
      v9 += v42;
      if (v100 < 1)
        goto LABEL_94;
      goto LABEL_93;
    }
    *(_QWORD *)v74 = v54;
    *(_QWORD *)(a4 + 8) = v74 + 8;
    v41 = 1;
    v9 += v42;
    if (a7 < 1)
      goto LABEL_94;
LABEL_93:
    if (v9 < a7)
    {
LABEL_94:
      if (v16 >= *(_QWORD *)(a1 + 32) || v17 >= *(_QWORD *)(a1 + 40) || v18 >= *(_QWORD *)(a1 + 48))
        return;
      continue;
    }
    break;
  }
}

_QWORD *sub_2396F3BC0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  int8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (result[2] == v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v4)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_2396F3EE8(a1, *a2, a3, a4, (uint64_t)&v26);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v13 / v14);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v20 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v20)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v20)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v20 < 3uLL || (v22 = (uint8x8_t)vcnt_s8(v20), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < *(_QWORD *)&v20)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v24 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v4 = v6 % v7;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v4 = v6;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v15)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v24 & v6;
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v24 & v6));
      if (v15)
        goto LABEL_26;
    }
LABEL_50:
    *v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v26)
    {
      v25 = *(_QWORD *)(*v26 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v25 >= v7)
          v25 %= v7;
      }
      else
      {
        v25 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v26;
    }
    goto LABEL_61;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v15)
    goto LABEL_50;
LABEL_26:
  *v26 = *v15;
  *v15 = v26;
LABEL_61:
  result = v26;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_2396F3ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239474998((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2396F3EE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;

  v9 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *result = 0;
  result[1] = a2;
  v11 = *a3;
  result[3] = 0;
  result[2] = v11;
  result[4] = 0;
  result[5] = 0;
  v12 = *(const void **)a4;
  v13 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v13)
  {
    v14 = result;
    if (v13 < 0)
      sub_2394189F8();
    v15 = (char *)operator new(v13);
    v14[3] = v15;
    v14[4] = v15;
    v16 = &v15[8 * (v13 >> 3)];
    v14[5] = v16;
    result = memcpy(v15, v12, v13);
    v14[4] = v16;
  }
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_2396F3F9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  sub_239474998(v1);
  _Unwind_Resume(a1);
}

void sub_2396F3FC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE36F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2396F3FD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE36F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2396F4000(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;

  v2 = (std::__shared_weak_count *)a1[16];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)a1[12];
    if (!v5)
      goto LABEL_8;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)a1[12];
    if (!v5)
      goto LABEL_8;
  }
  do
  {
    v7 = (_QWORD *)*v5;
    v8 = (void *)v5[3];
    if (v8)
    {
      v5[4] = v8;
      operator delete(v8);
    }
    operator delete(v5);
    v5 = v7;
  }
  while (v7);
LABEL_8:
  v6 = (void *)a1[10];
  a1[10] = 0;
  if (v6)
    operator delete(v6);
}

char *sub_2396F40B8(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  size_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v70;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v9 = a5 - 1;
  if (a5 < 1)
    return v8;
  v11 = __src;
  v13 = v7 >> 3;
  v15 = a1[1];
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61)
      sub_2394189F8();
    v17 = v14 - v6;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        sub_239418A80();
      v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      v20 = v18;
      v21 = operator new(8 * v18);
      v18 = v20;
      v8 = (char *)v19;
      v13 = v7 >> 3;
      v11 = __src;
    }
    else
    {
      v21 = 0;
    }
    v43 = &v21[8 * v13];
    v44 = &v43[8 * a5];
    v45 = v43;
    v46 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_57;
    v45 = &v21[8 * v13];
    v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20)
      goto LABEL_57;
    v47 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v45 = &v43[v48];
    v46 = &v11[v48];
    v49 = (__int128 *)(v11 + 16);
    v50 = &v21[8 * v13 + 16];
    v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 4;
    }
    while (v51);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        v53 = *(_QWORD *)v46;
        v46 += 8;
        *(_QWORD *)v45 = v53;
        v45 += 8;
      }
      while (v45 != v44);
    }
    v54 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      v55 = v8;
      v54 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68)
        goto LABEL_58;
      v55 = v8;
      v54 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20)
        goto LABEL_58;
      v56 = ((unint64_t)(v7 - 8) >> 3) + 1;
      v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      v55 = &v8[-v57];
      v54 = &v43[-v57];
      v58 = 8 * v13 - 16;
      v59 = &v21[v58];
      v60 = (__int128 *)(v6 + v58);
      v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 4;
      }
      while (v61);
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_58:
        do
        {
          v63 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v54 - 1) = v63;
          v54 -= 8;
        }
        while (v55 != (char *)v6);
      }
    }
    v64 = &v21[8 * v18];
    v65 = v15 - (_QWORD)v8;
    if (v65)
      memmove(&v43[8 * a5], v8, v65);
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6)
      operator delete((void *)v6);
    return v43;
  }
  v22 = v15 - (_QWORD)v8;
  v23 = (uint64_t)(v15 - (_QWORD)v8) >> 3;
  if (v23 >= a5)
  {
    v24 = &__src[8 * a5];
    v26 = a1[1];
  }
  else
  {
    v24 = &__src[8 * v23];
    v25 = a4 - v24;
    if (a4 != v24)
    {
      v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      v13 = v7 >> 3;
      v8 = (char *)v70;
    }
    v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1)
      return v8;
  }
  v27 = &v8[8 * a5];
  v28 = v26 - (_QWORD)v27;
  v29 = (uint64_t)(v26 - (_QWORD)v27) >> 3;
  v30 = (uint64_t *)(v26 - 8 * a5);
  v31 = (_QWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    v33 = (char *)(v32 + v6);
    v34 = v32 + v6 + 8;
    if (v15 > v34)
      v34 = v15;
    v35 = v34 + ~v6 - v32;
    if (v35 < 0x58)
    {
      v31 = (_QWORD *)v26;
    }
    else
    {
      v36 = v26 - (_QWORD)v33;
      v31 = (_QWORD *)v26;
      if (v36 >= 0x20)
      {
        v37 = (v35 >> 3) + 1;
        v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = (uint64_t *)((char *)v30 + v38);
        v31 = (_QWORD *)(v26 + v38);
        v39 = (_OWORD *)(v26 + 16);
        v40 = (__int128 *)(8 * v29 + 8 * v13 + v6 + 16);
        v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 4;
        }
        while (v41);
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
    }
    do
    {
      v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    v67 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    v8 = v67;
  }
  if (v24 != v11)
  {
    v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

float sub_2396F4460(uint64_t a1, uint64_t a2, unint64_t a3, double a4, double a5, float32x4_t a6)
{
  unsigned int v6;
  float32x4_t v7;
  int8x16_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  float32x4_t *v16;
  int8x16_t *v17;
  unint64_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x8_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  unint64_t v40;
  uint64_t v41;
  float32x4_t *v42;
  int8x8_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x8_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;

  if (a3 >= 4)
  {
    v6 = 0;
    LODWORD(a4) = 0;
    do
    {
      a6.i32[0] = *(_DWORD *)(a2 + v6);
      v7 = vsubq_f32(*(float32x4_t *)(a1 + 4 * v6), vcvtq_f32_s32(vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a6.f32))));
      v8 = (int8x16_t)vmulq_f32(v7, v7);
      a6.i64[0] = vextq_s8(v8, v8, 8uLL).u64[0];
      *(float *)&a4 = *(float *)&a4 + vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)a6.f32));
      v9 = v6 + 8;
      v6 += 4;
    }
    while (v9 <= a3);
  }
  else
  {
    v6 = 0;
    LODWORD(a4) = 0;
  }
  v10 = v6;
  v11 = a3 - v6;
  if (a3 > v6)
  {
    if (v11 < 8
      || (v14 = ~(unint64_t)v6 + a3, __CFADD__(v6, (_DWORD)v14))
      || (v6 ^ 0xFFFFFFFE) < v14
      || HIDWORD(v14))
    {
      v12 = v6;
      goto LABEL_8;
    }
    if (v11 < 0x20)
    {
      v15 = 0;
      goto LABEL_20;
    }
    v15 = v11 & 0xFFFFFFFFFFFFFFE0;
    v16 = (float32x4_t *)(a1 + 4 * v6 + 64);
    v17 = (int8x16_t *)(v6 + a2 + 16);
    v18 = v11 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v19 = v17[-1];
      v20 = vsubq_f32(v16[-4], vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v19.i8, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v21 = (int8x8_t)vextq_s8(v19, v19, 8uLL).u64[0];
      v22 = vsubq_f32(v16[-3], vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v19.i8, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v23 = vsubq_f32(v16[-2], vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v21, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v24 = *v17;
      v17 += 2;
      v25 = vsubq_f32(v16[-1], vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v21, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v26 = vsubq_f32(*v16, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v24.i8, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v27 = (int8x8_t)vextq_s8(v24, v24, 8uLL).u64[0];
      v28 = vsubq_f32(v16[1], vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v24.i8, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v29 = vsubq_f32(v16[2], vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v27, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v30 = vsubq_f32(v16[3], vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v27, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v31 = vmulq_f32(v20, v20);
      v32 = vmulq_f32(v22, v22);
      v33 = vmulq_f32(v23, v23);
      v34 = vmulq_f32(v25, v25);
      v35 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)&a4 + v31.f32[0]) + v31.f32[1]) + v31.f32[2])
                                                                                                  + v31.f32[3])
                                                                                          + v32.f32[0])
                                                                                  + v32.f32[1])
                                                                          + v32.f32[2])
                                                                  + v32.f32[3])
                                                          + v33.f32[0])
                                                  + v33.f32[1])
                                          + v33.f32[2])
                                  + v33.f32[3])
                          + v34.f32[0])
                  + v34.f32[1])
          + v34.f32[2];
      v36 = vmulq_f32(v26, v26);
      v37 = vmulq_f32(v28, v28);
      v38 = vmulq_f32(v29, v29);
      v39 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v35 + v34.f32[3])
                                                                                          + v36.f32[0])
                                                                                  + v36.f32[1])
                                                                          + v36.f32[2])
                                                                  + v36.f32[3])
                                                          + v37.f32[0])
                                                  + v37.f32[1])
                                          + v37.f32[2])
                                  + v37.f32[3])
                          + v38.f32[0])
                  + v38.f32[1])
          + v38.f32[2];
      a6 = vmulq_f32(v30, v30);
      *(float *)&a4 = (float)((float)((float)((float)(v39 + v38.f32[3]) + a6.f32[0]) + a6.f32[1]) + a6.f32[2])
                    + a6.f32[3];
      v16 += 8;
      v18 -= 32;
    }
    while (v18);
    if (v11 != v15)
    {
      if ((v11 & 0x18) == 0)
      {
        v6 += v15;
        v12 = v15 + v10;
        goto LABEL_8;
      }
LABEL_20:
      v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + v6;
      v6 += v11 & 0xFFFFFFF8;
      v40 = v15 - (v11 & 0xFFFFFFFFFFFFFFF8);
      v41 = v15 + v10;
      v42 = (float32x4_t *)(a1 + 4 * v41);
      v43 = (int8x8_t *)(a2 + v41);
      do
      {
        v45 = *v42;
        v44 = v42[1];
        v42 += 2;
        v46 = *v43++;
        v47 = vsubq_f32(v45, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v46, *(int8x8_t *)&a4), 8uLL), 8uLL))));
        v48 = vsubq_f32(v44, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v46, *(int8x8_t *)&a4), 8uLL), 8uLL))));
        v49 = vmulq_f32(v48, v48);
        a6 = vmulq_f32(v47, v47);
        *(float *)&a4 = (float)((float)((float)((float)((float)((float)((float)(*(float *)&a4 + a6.f32[0]) + a6.f32[1])
                                                              + a6.f32[2])
                                                      + a6.f32[3])
                                              + v49.f32[0])
                                      + v49.f32[1])
                              + v49.f32[2])
                      + v49.f32[3];
        v40 += 8;
      }
      while (v40);
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
        return *(float *)&a4;
LABEL_8:
      v13 = v6 + 1;
      do
      {
        a6.i8[0] = *(_BYTE *)(a2 + v12);
        a6.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a6.f32)).u64[0];
        a6.f32[0] = (float)a6.i32[0];
        *(float *)&a4 = *(float *)&a4
                      + (float)((float)(*(float *)(a1 + 4 * v12) - a6.f32[0])
                              * (float)(*(float *)(a1 + 4 * v12) - a6.f32[0]));
        v12 = v13++;
      }
      while (v12 < a3);
    }
  }
  return *(float *)&a4;
}

float sub_2396F480C(uint64_t a1, uint64_t a2, unint64_t a3, double a4, int8x16_t a5, float32x4_t a6)
{
  unsigned int v6;
  float32x4_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  int8x16_t *v15;
  int8x8_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x8_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  int8x8_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x8_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float v39;
  float32x4_t v40;
  float v41;
  float32x4_t v42;
  float v43;
  float v44;
  unint64_t v45;
  uint64_t v46;
  int8x8_t *v47;
  int8x8_t *v48;
  int8x8_t v49;
  float32x4_t v50;
  int32x4_t v51;
  int8x8_t v52;
  float32x4_t v53;
  float32x4_t v54;

  if (a3 >= 4)
  {
    v6 = 0;
    LODWORD(a4) = 0;
    do
    {
      a5.i32[0] = *(_DWORD *)(a1 + v6);
      a6.i32[0] = *(_DWORD *)(a2 + v6);
      v7 = vsubq_f32(vcvtq_f32_s32(vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a5.i8))), vcvtq_f32_s32(vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a6.f32))));
      a5 = (int8x16_t)vmulq_f32(v7, v7);
      a6.i64[0] = vextq_s8(a5, a5, 8uLL).u64[0];
      *(float32x2_t *)a5.i8 = vadd_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)a6.f32);
      *(float *)a5.i32 = vaddv_f32(*(float32x2_t *)a5.i8);
      *(float *)&a4 = *(float *)&a4 + *(float *)a5.i32;
      v8 = v6 + 8;
      v6 += 4;
    }
    while (v8 <= a3);
  }
  else
  {
    v6 = 0;
    LODWORD(a4) = 0;
  }
  v9 = v6;
  v10 = a3 - v6;
  if (a3 > v6)
  {
    if (v10 < 8
      || (v13 = ~(unint64_t)v6 + a3, __CFADD__(v6, (_DWORD)v13))
      || (v6 ^ 0xFFFFFFFE) < v13
      || HIDWORD(v13))
    {
      v11 = v6;
      goto LABEL_8;
    }
    if (v10 < 0x20)
    {
      v14 = 0;
      goto LABEL_20;
    }
    v14 = v10 & 0xFFFFFFFFFFFFFFE0;
    v15 = (int8x16_t *)(a1 + v6 + 16);
    v16 = (int8x8_t *)(a2 + v6 + 16);
    v17 = v10 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v18 = v15[-1];
      v19 = (int8x8_t)vextq_s8(v18, v18, 8uLL).u64[0];
      v20 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v19, *(int8x8_t *)&a4), 8uLL), 8uLL)));
      v21 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)&a4), 8uLL), 8uLL)));
      v22 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)&a4), 8uLL), 8uLL)));
      v18.i64[0] = vextq_s8(*v15, *v15, 8uLL).u64[0];
      v23 = *(int8x16_t *)v16[-2].i8;
      v24 = vsubq_f32(v22, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v23.i8, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v25 = (int8x8_t)vextq_s8(v23, v23, 8uLL).u64[0];
      v26 = vsubq_f32(v21, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v23.i8, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v27 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v19, *(int8x8_t *)&a4), 8uLL), 8uLL))), vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v25, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v28 = vsubq_f32(v20, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v25, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v29 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v15->i8, *(int8x8_t *)&a4), 8uLL), 8uLL))), vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*v16, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v30 = (int8x8_t)vextq_s8(*(int8x16_t *)v16->i8, *(int8x16_t *)v16->i8, 8uLL).u64[0];
      v31 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v15->i8, *(int8x8_t *)&a4), 8uLL), 8uLL))), vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*v16, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v32 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)&a4), 8uLL), 8uLL))), vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v30, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      a6 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)&a4), 8uLL), 8uLL))), vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v30, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v33 = vmulq_f32(v24, v24);
      v34 = vmulq_f32(v26, v26);
      v35 = vmulq_f32(v27, v27);
      v36 = vmulq_f32(v28, v28);
      v37 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)&a4 + v33.f32[0]) + v33.f32[1]) + v33.f32[2])
                                                                                                  + v33.f32[3])
                                                                                          + v34.f32[0])
                                                                                  + v34.f32[1])
                                                                          + v34.f32[2])
                                                                  + v34.f32[3])
                                                          + v35.f32[0])
                                                  + v35.f32[1])
                                          + v35.f32[2])
                                  + v35.f32[3])
                          + v36.f32[0])
                  + v36.f32[1])
          + v36.f32[2];
      v38 = vmulq_f32(v29, v29);
      v39 = (float)((float)((float)(v37 + v36.f32[3]) + v38.f32[0]) + v38.f32[1]) + v38.f32[2];
      v40 = vmulq_f32(v31, v31);
      v41 = (float)((float)((float)(v39 + v38.f32[3]) + v40.f32[0]) + v40.f32[1]) + v40.f32[2];
      v42 = vmulq_f32(v32, v32);
      v43 = (float)((float)((float)(v41 + v40.f32[3]) + v42.f32[0]) + v42.f32[1]) + v42.f32[2];
      a5 = (int8x16_t)vmulq_f32(a6, a6);
      a6.i32[0] = a5.i32[2];
      v44 = (float)((float)((float)(v43 + v42.f32[3]) + *(float *)a5.i32) + *(float *)&a5.i32[1]) + *(float *)&a5.i32[2];
      a5.i32[0] = a5.i32[3];
      *(float *)&a4 = v44 + *(float *)&a5.i32[3];
      v15 += 2;
      v16 += 4;
      v17 -= 32;
    }
    while (v17);
    if (v10 != v14)
    {
      if ((v10 & 0x18) == 0)
      {
        v6 += v14;
        v11 = v14 + v9;
        goto LABEL_8;
      }
LABEL_20:
      v11 = (v10 & 0xFFFFFFFFFFFFFFF8) + v6;
      v6 += v10 & 0xFFFFFFF8;
      v45 = v14 - (v10 & 0xFFFFFFFFFFFFFFF8);
      v46 = v14 + v9;
      v47 = (int8x8_t *)(a1 + v46);
      v48 = (int8x8_t *)(a2 + v46);
      do
      {
        v49 = *v47++;
        v50 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v49, *(int8x8_t *)&a4), 8uLL), 8uLL)));
        v51 = vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v49, *(int8x8_t *)&a4), 8uLL), 8uLL));
        v52 = *v48++;
        v53 = vsubq_f32(vcvtq_f32_s32(v51), vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v52, *(int8x8_t *)&a4), 8uLL), 8uLL))));
        v54 = vsubq_f32(v50, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v52, *(int8x8_t *)&a4), 8uLL), 8uLL))));
        a6 = vmulq_f32(v54, v54);
        a5 = (int8x16_t)vmulq_f32(v53, v53);
        *(float *)&a4 = (float)((float)((float)((float)((float)((float)((float)(*(float *)&a4 + *(float *)a5.i32)
                                                                      + *(float *)&a5.i32[1])
                                                              + *(float *)&a5.i32[2])
                                                      + *(float *)&a5.i32[3])
                                              + a6.f32[0])
                                      + a6.f32[1])
                              + a6.f32[2])
                      + a6.f32[3];
        v45 += 8;
      }
      while (v45);
      if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8))
        return *(float *)&a4;
LABEL_8:
      v12 = v6 + 1;
      do
      {
        a5.i8[0] = *(_BYTE *)(a1 + v11);
        a5.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a5.i8)).u64[0];
        a6.i8[0] = *(_BYTE *)(a2 + v11);
        a6.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a6.f32)).u64[0];
        a6.f32[0] = (float)a6.i32[0];
        *(float *)a5.i32 = (float)a5.i32[0] - a6.f32[0];
        *(float *)&a4 = *(float *)&a4 + (float)(*(float *)a5.i32 * *(float *)a5.i32);
        v11 = v12++;
      }
      while (v11 < a3);
    }
  }
  return *(float *)&a4;
}

float sub_2396F4C8C(uint64_t a1, uint64_t a2, unint64_t a3, double a4, int8x16_t a5)
{
  unsigned int v5;
  float32x4_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int8x16_t *v14;
  float32x4_t *v15;
  unint64_t v16;
  int8x16_t v17;
  int8x8_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  unint64_t v42;
  uint64_t v43;
  int8x8_t *v44;
  float32x4_t *v45;
  int8x8_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;

  if (a3 >= 4)
  {
    v5 = 0;
    LODWORD(a4) = 0;
    do
    {
      a5.i32[0] = *(_DWORD *)(a1 + v5);
      v6 = vsubq_f32(vcvtq_f32_s32(vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a5.i8))), *(float32x4_t *)(a2 + 4 * v5));
      a5 = (int8x16_t)vmulq_f32(v6, v6);
      *(float32x2_t *)a5.i8 = vadd_f32(*(float32x2_t *)a5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(a5, a5, 8uLL));
      *(float *)a5.i32 = vaddv_f32(*(float32x2_t *)a5.i8);
      *(float *)&a4 = *(float *)&a4 + *(float *)a5.i32;
      v7 = v5 + 8;
      v5 += 4;
    }
    while (v7 <= a3);
  }
  else
  {
    v5 = 0;
    LODWORD(a4) = 0;
  }
  v8 = v5;
  v9 = a3 - v5;
  if (a3 > v5)
  {
    if (v9 < 8
      || (v12 = ~(unint64_t)v5 + a3, __CFADD__(v5, (_DWORD)v12))
      || (v5 ^ 0xFFFFFFFE) < v12
      || HIDWORD(v12))
    {
      v10 = v5;
      goto LABEL_8;
    }
    if (v9 < 0x20)
    {
      v13 = 0;
      goto LABEL_20;
    }
    v13 = v9 & 0xFFFFFFFFFFFFFFE0;
    v14 = (int8x16_t *)(v5 + a1 + 16);
    v15 = (float32x4_t *)(a2 + 4 * v5 + 64);
    v16 = v9 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v17 = v14[-1];
      v18 = (int8x8_t)vextq_s8(v17, v17, 8uLL).u64[0];
      v19 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v18, *(int8x8_t *)&a4), 8uLL), 8uLL)));
      v20 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v17.i8, *(int8x8_t *)&a4), 8uLL), 8uLL)));
      v21 = (int8x8_t)vextq_s8(*v14, *v14, 8uLL).u64[0];
      v22 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v17.i8, *(int8x8_t *)&a4), 8uLL), 8uLL))), v15[-4]);
      v23 = vsubq_f32(v20, v15[-3]);
      v24 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v18, *(int8x8_t *)&a4), 8uLL), 8uLL))), v15[-2]);
      v25 = vsubq_f32(v19, v15[-1]);
      v26 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v14->i8, *(int8x8_t *)&a4), 8uLL), 8uLL))), *v15);
      v27 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v14->i8, *(int8x8_t *)&a4), 8uLL), 8uLL))), v15[1]);
      v28 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v21, *(int8x8_t *)&a4), 8uLL), 8uLL))), v15[2]);
      v29 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v21, *(int8x8_t *)&a4), 8uLL), 8uLL))), v15[3]);
      v30 = vmulq_f32(v22, v22);
      v31 = vmulq_f32(v23, v23);
      v32 = (float)((float)((float)((float)((float)((float)(*(float *)&a4 + v30.f32[0]) + v30.f32[1]) + v30.f32[2])
                                  + v30.f32[3])
                          + v31.f32[0])
                  + v31.f32[1])
          + v31.f32[2];
      v33 = vmulq_f32(v24, v24);
      v34 = vmulq_f32(v25, v25);
      v35 = (float)((float)((float)((float)((float)((float)((float)(v32 + v31.f32[3]) + v33.f32[0]) + v33.f32[1])
                                          + v33.f32[2])
                                  + v33.f32[3])
                          + v34.f32[0])
                  + v34.f32[1])
          + v34.f32[2];
      v33.i32[0] = v34.i32[3];
      v36 = vmulq_f32(v26, v26);
      v37 = (float)((float)((float)(v35 + v33.f32[0]) + v36.f32[0]) + v36.f32[1]) + v36.f32[2];
      v38 = vmulq_f32(v27, v27);
      v39 = vmulq_f32(v28, v28);
      v40 = (float)((float)((float)((float)((float)((float)((float)(v37 + v36.f32[3]) + v38.f32[0]) + v38.f32[1])
                                          + v38.f32[2])
                                  + v38.f32[3])
                          + v39.f32[0])
                  + v39.f32[1])
          + v39.f32[2];
      a5 = (int8x16_t)vmulq_f32(v29, v29);
      v41 = (float)((float)((float)(v40 + v39.f32[3]) + *(float *)a5.i32) + *(float *)&a5.i32[1]) + *(float *)&a5.i32[2];
      a5.i32[0] = a5.i32[3];
      *(float *)&a4 = v41 + *(float *)&a5.i32[3];
      v14 += 2;
      v15 += 8;
      v16 -= 32;
    }
    while (v16);
    if (v9 != v13)
    {
      if ((v9 & 0x18) == 0)
      {
        v5 += v13;
        v10 = v13 + v8;
        goto LABEL_8;
      }
LABEL_20:
      v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + v5;
      v5 += v9 & 0xFFFFFFF8;
      v42 = v13 - (v9 & 0xFFFFFFFFFFFFFFF8);
      v43 = v13 + v8;
      v44 = (int8x8_t *)(a1 + v43);
      v45 = (float32x4_t *)(a2 + 4 * v43);
      do
      {
        v46 = *v44++;
        v48 = *v45;
        v47 = v45[1];
        v45 += 2;
        v49 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v46, *(int8x8_t *)&a4), 8uLL), 8uLL))), v48);
        v50 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v46, *(int8x8_t *)&a4), 8uLL), 8uLL))), v47);
        v51 = vmulq_f32(v50, v50);
        a5 = (int8x16_t)vmulq_f32(v49, v49);
        *(float *)&a4 = (float)((float)((float)((float)((float)((float)((float)(*(float *)&a4 + *(float *)a5.i32)
                                                                      + *(float *)&a5.i32[1])
                                                              + *(float *)&a5.i32[2])
                                                      + *(float *)&a5.i32[3])
                                              + v51.f32[0])
                                      + v51.f32[1])
                              + v51.f32[2])
                      + v51.f32[3];
        v42 += 8;
      }
      while (v42);
      if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8))
        return *(float *)&a4;
LABEL_8:
      v11 = v5 + 1;
      do
      {
        a5.i8[0] = *(_BYTE *)(a1 + v10);
        a5.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a5.i8)).u64[0];
        *(float *)a5.i32 = (float)a5.i32[0] - *(float *)(a2 + 4 * v10);
        *(float *)&a4 = *(float *)&a4 + (float)(*(float *)a5.i32 * *(float *)a5.i32);
        v10 = v11++;
      }
      while (v10 < a3);
    }
  }
  return *(float *)&a4;
}

float sub_2396F5038(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3;
  float result;
  int8x16_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  unint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unsigned int v17;

  if (a3 >= 4)
  {
    v3 = 0;
    result = 0.0;
    do
    {
      v5 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 4 * v3), *(float32x4_t *)(a2 + 4 * v3));
      result = result + vaddv_f32(vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)));
      v6 = v3 + 8;
      v3 += 4;
    }
    while (v6 <= a3);
  }
  else
  {
    v3 = 0;
    result = 0.0;
  }
  v7 = v3;
  v8 = a3 - v3;
  if (a3 > v3)
  {
    if (v8 < 0x14
      || (v9 = ~(unint64_t)v3 + a3, __CFADD__(v3, (_DWORD)v9))
      || (v3 ^ 0xFFFFFFFE) < v9
      || HIDWORD(v9))
    {
      v10 = v3;
    }
    else
    {
      v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + v3;
      v3 += v8 & 0xFFFFFFF8;
      v11 = 4 * v7 + 16;
      v12 = (float32x4_t *)(a1 + v11);
      v13 = (float32x4_t *)(a2 + v11);
      v14 = v8 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v15 = vmulq_f32(v12[-1], v13[-1]);
        v16 = vmulq_f32(*v12, *v13);
        result = (float)((float)((float)((float)((float)((float)((float)(result + v15.f32[0]) + v15.f32[1]) + v15.f32[2])
                                               + v15.f32[3])
                                       + v16.f32[0])
                               + v16.f32[1])
                       + v16.f32[2])
               + v16.f32[3];
        v12 += 2;
        v13 += 2;
        v14 -= 8;
      }
      while (v14);
      if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
        return result;
    }
    v17 = v3 + 1;
    do
    {
      result = result + (float)(*(float *)(a1 + 4 * v10) * *(float *)(a2 + 4 * v10));
      v10 = v17++;
    }
    while (v10 < a3);
  }
  return result;
}

float sub_2396F516C(uint64_t a1, uint64_t a2, unint64_t a3, double a4, double a5, float32x4_t a6)
{
  unsigned int v6;
  int8x16_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x8_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  float32x4_t *v32;
  int8x8_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x8_t v36;
  float32x4_t v37;

  if (a3 >= 4)
  {
    v6 = 0;
    LODWORD(a4) = 0;
    do
    {
      a6.i32[0] = *(_DWORD *)(a2 + v6);
      v7 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 4 * v6), vcvtq_f32_s32(vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a6.f32))));
      a6.i64[0] = vextq_s8(v7, v7, 8uLL).u64[0];
      *(float *)&a4 = *(float *)&a4 + vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)a6.f32));
      v8 = v6 + 8;
      v6 += 4;
    }
    while (v8 <= a3);
  }
  else
  {
    v6 = 0;
    LODWORD(a4) = 0;
  }
  v9 = v6;
  v10 = a3 - v6;
  if (a3 > v6)
  {
    if (v10 < 8
      || (v13 = ~(unint64_t)v6 + a3, __CFADD__(v6, (_DWORD)v13))
      || (v6 ^ 0xFFFFFFFE) < v13
      || HIDWORD(v13))
    {
      v11 = v6;
      goto LABEL_8;
    }
    if (v10 < 0x20)
    {
      v14 = 0;
      goto LABEL_20;
    }
    v14 = v10 & 0xFFFFFFFFFFFFFFE0;
    v15 = a1 + 4 * v6 + 64;
    v16 = (int8x16_t *)(v6 + a2 + 16);
    v17 = v10 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v18 = v16[-1];
      v19 = (int8x8_t)vextq_s8(v18, v18, 8uLL).u64[0];
      v20 = vmulq_f32(*(float32x4_t *)(v15 - 16), vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v19, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v21 = vmulq_f32(*(float32x4_t *)(v15 - 32), vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v19, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v22 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)&a4), 8uLL), 8uLL)));
      v23 = vmulq_f32(*(float32x4_t *)(v15 - 48), vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v18.i64[0] = vextq_s8(*v16, *v16, 8uLL).u64[0];
      a6 = vmulq_f32(*(float32x4_t *)(v15 - 64), v22);
      v24 = vmulq_f32(*(float32x4_t *)(v15 + 48), vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v25 = vmulq_f32(*(float32x4_t *)(v15 + 32), vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v26 = vmulq_f32(*(float32x4_t *)(v15 + 16), vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v16->i8, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v27 = *(float32x4_t *)v15;
      v15 += 128;
      v28 = vmulq_f32(v27, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v16->i8, *(int8x8_t *)&a4), 8uLL), 8uLL))));
      v29 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)&a4 + a6.f32[0]) + a6.f32[1]) + a6.f32[2]) + a6.f32[3]) + v23.f32[0]) + v23.f32[1]) + v23.f32[2]) + v23.f32[3]) + v21.f32[0]) + v21.f32[1]) + v21.f32[2]) + v21.f32[3]) + v20.f32[0]) + v20.f32[1])
                                                                                                  + v20.f32[2])
                                                                                          + v20.f32[3])
                                                                                  + v28.f32[0])
                                                                          + v28.f32[1])
                                                                  + v28.f32[2])
                                                          + v28.f32[3])
                                                  + v26.f32[0])
                                          + v26.f32[1])
                                  + v26.f32[2])
                          + v26.f32[3])
                  + v25.f32[0])
          + v25.f32[1];
      a6.i32[0] = v25.i32[2];
      *(float *)&a4 = (float)((float)((float)((float)((float)(v29 + v25.f32[2]) + v25.f32[3]) + v24.f32[0]) + v24.f32[1])
                            + v24.f32[2])
                    + v24.f32[3];
      v16 += 2;
      v17 -= 32;
    }
    while (v17);
    if (v10 != v14)
    {
      if ((v10 & 0x18) == 0)
      {
        v6 += v14;
        v11 = v14 + v9;
        goto LABEL_8;
      }
LABEL_20:
      v11 = (v10 & 0xFFFFFFFFFFFFFFF8) + v6;
      v6 += v10 & 0xFFFFFFF8;
      v30 = v14 - (v10 & 0xFFFFFFFFFFFFFFF8);
      v31 = v14 + v9;
      v32 = (float32x4_t *)(a1 + 4 * v31);
      v33 = (int8x8_t *)(a2 + v31);
      do
      {
        v34 = *v32;
        v35 = v32[1];
        v32 += 2;
        v36 = *v33++;
        a6 = vmulq_f32(v35, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v36, *(int8x8_t *)&a4), 8uLL), 8uLL))));
        v37 = vmulq_f32(v34, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v36, *(int8x8_t *)&a4), 8uLL), 8uLL))));
        *(float *)&a4 = (float)((float)((float)((float)((float)((float)((float)(*(float *)&a4 + v37.f32[0]) + v37.f32[1])
                                                              + v37.f32[2])
                                                      + v37.f32[3])
                                              + a6.f32[0])
                                      + a6.f32[1])
                              + a6.f32[2])
                      + a6.f32[3];
        v30 += 8;
      }
      while (v30);
      if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8))
        return *(float *)&a4;
LABEL_8:
      v12 = v6 + 1;
      do
      {
        a6.i8[0] = *(_BYTE *)(a2 + v11);
        a6.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a6.f32)).u64[0];
        a6.f32[0] = (float)a6.i32[0];
        *(float *)&a4 = *(float *)&a4 + (float)(*(float *)(a1 + 4 * v11) * a6.f32[0]);
        v11 = v12++;
      }
      while (v11 < a3);
    }
  }
  return *(float *)&a4;
}

float sub_2396F54E8(float32x4_t *a1, unint64_t a2)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float32x4_t *v5;
  float32x4_t v6;
  int8x16_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float *v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  float v15;

  if (a2 < 5)
  {
    v8 = 0;
    v3 = 0.0;
    v9 = a2;
    if (!a2)
      return sqrtf(v3);
LABEL_7:
    if (v9 >= 2)
    {
      v10 = v8 + (v9 & 0xFFFFFFFFFFFFFFFELL);
      v11 = &a1->f32[v8 + 1];
      v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v3 = (float)(v3 + (float)(*(v11 - 1) * *(v11 - 1))) + (float)(*v11 * *v11);
        v11 += 2;
        v12 -= 2;
      }
      while (v12);
      if (v9 == (v9 & 0xFFFFFFFFFFFFFFFELL))
        return sqrtf(v3);
    }
    else
    {
      v10 = v8;
    }
    v13 = a2 - v10;
    v14 = &a1->f32[v10];
    do
    {
      v15 = *v14++;
      v3 = v3 + (float)(v15 * v15);
      --v13;
    }
    while (v13);
    return sqrtf(v3);
  }
  v2 = (a2 - 5) & 0xFFFFFFFFFFFFFFFCLL;
  v3 = 0.0;
  v4 = 4;
  v5 = a1;
  do
  {
    v6 = *v5++;
    v7 = (int8x16_t)vmulq_f32(v6, v6);
    v3 = v3 + vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
    v4 += 4;
  }
  while (v4 < a2);
  v8 = v2 + 4;
  v9 = a2 - (v2 + 4);
  if (a2 > v2 + 4)
    goto LABEL_7;
  return sqrtf(v3);
}

