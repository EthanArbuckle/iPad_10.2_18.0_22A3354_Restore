void sub_239A37D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,float64x2_t a23,float64x2_t a24,float64x2_t a25,float64x2_t a26,float64x2_t a27,float64x2_t a28,float64x2_t a29,float64x2_t a30,float64x2_t a31,float64x2_t a32,float64x2_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  float64x2_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  float64x2_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float64x2_t *v63;
  uint64_t v64;
  float64x2_t *v65;
  uint64_t v66;
  uint64_t v67;
  double *v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float64x2_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  int64_t v90;
  double v91;
  double v92;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float64x2_t *v110;
  uint64_t v111;
  float64x2_t *v112;
  uint64_t v113;
  uint64_t v114;
  double *v115;
  int64_t v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t *v127;
  float64_t *v128;
  uint64_t v129;
  const double *v130;
  float64x2_t v131;
  uint64_t v132;
  double v133;
  float64x2_t *v134;
  float64x2_t v135;
  float64x2_t v136;
  uint64_t v137;
  double *v138;
  uint64_t v139;
  uint64_t v140;
  int64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  float64x2_t *v154;
  uint64_t v155;
  float64x2_t *v156;
  uint64_t v157;
  uint64_t v158;
  double *v159;
  uint64_t v160;
  double *v161;
  double *v162;
  double v163;
  double v164;
  double v165;
  int64_t v166;
  double v167;
  double v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int64_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t *v177;
  float64_t *v178;
  uint64_t v179;
  const double *v180;
  float64x2_t v181;
  uint64_t v182;
  double v183;
  float64x2_t *v184;
  float64x2_t v185;
  float64x2_t v186;
  uint64_t v187;
  _QWORD *v188;
  int64_t v189;
  double v190;
  double v191;
  uint64_t v192;
  double *v193;
  double *v194;
  int64_t v195;
  float64x2_t v196;
  float64x2_t v197;
  uint64_t v198;
  float64x2_t *v199;
  double *v200;
  float64x2_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int64_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t *v211;
  float64_t *v212;
  uint64_t v213;
  const double *v214;
  float64x2_t v215;
  uint64_t v216;
  double v217;
  float64x2_t *v218;
  float64x2_t v219;
  float64x2_t v220;
  uint64_t v221;
  double *v222;
  uint64_t v223;
  float64x2_t v224;
  uint64_t v225;
  uint64_t v226;
  int64_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t *v232;
  float64_t *v233;
  uint64_t v234;
  const double *v235;
  float64x2_t v236;
  uint64_t v237;
  double v238;
  float64x2_t *v239;
  float64x2_t v240;
  float64x2_t v241;
  uint64_t v242;
  double *v243;
  uint64_t v244;
  double *v245;
  double *v246;
  int64_t v247;
  float64x2_t v248;
  float64x2_t v249;
  uint64_t v250;
  float64x2_t *v251;
  double *v252;
  float64x2_t v253;
  uint64_t v254;
  uint64_t v255;
  double *v256;
  double *v257;
  int64_t v258;
  float64x2_t v259;
  float64x2_t v260;
  uint64_t v261;
  float64x2_t *v262;
  double *v263;
  float64x2_t v264;
  uint64_t v265;
  uint64_t v266;
  float64x2_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  double v271;
  float64x2_t *vars8;
  float64x2_t *vars8a;
  float64x2_t *vars8b;
  float64x2_t *vars8c;
  uint64_t v276;
  uint64_t v277;
  double v278;
  double *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  float64x2_t *v284;
  float64x2_t *v285;
  float64x2_t *v286;
  float64x2_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;

  v34 = MEMORY[0x24BDAC7A8]();
  v279 = v38;
  v43 = (uint64_t)v36;
  v44 = v46.f64[0];
  v45 = v34;
  STACK[0x11D8] = *MEMORY[0x24BDAC8D0];
  v46.f64[0] = 1.0;
  v47 = v35 * v34;
  v278 = v44;
  v276 = v34;
  v277 = v41;
  if (*(double *)&v42 == 1.0)
  {
    if (v34 >= 8 && v47 >= 0x1000)
    {
      v48 = 0;
      v49 = 0;
      v50 = -v37 & v37;
      if (v50 >= 2)
        v50 = 2;
      v51 = __clz(v50) - 62;
      v52 = (1 << v51);
      v304 = v39 << v51;
      v308 = v37 << v51;
      v300 = 8 * v39;
      v53 = 8 * v37;
      v54 = v35 - 1;
      v268 = v41 << 12;
      v55 = 16 * v41;
      v56 = 8 * v41;
      vars8 = v40;
      do
      {
        v284 = v40;
        v288 = v49;
        if (v45 - v49 >= 512)
          v57 = 512;
        else
          v57 = v45 - v49;
        v280 = v45 - v49;
        if (v45 - v49 >= 1)
        {
          v58 = v45 - (v48 << 9);
          if (v58 >= 512)
            v58 = 512;
          bzero((void *)((unint64_t)&a34 | 0x10), 8 * (v58 - (v58 != 0)) + 8);
        }
        v292 = v48;
        v296 = v43;
        v59 = v279;
        v60 = v52;
        do
        {
          v61 = (v54 + v60) / v52;
          if (!v61)
            break;
          v46 = sub_239A3B2F8(v57, v61, v43, v308, v59, v304, (unint64_t)&a34 | 0x10, v46);
          v59 = (double *)((char *)v59 + v300);
          v43 += v53;
          --v60;
        }
        while (v60);
        v45 = v276;
        if (v280 >= 1)
        {
          v62 = 0;
          v63 = v284;
          do
          {
            v64 = v57 - v62;
            v46 = vmulq_n_f64(*(float64x2_t *)(((unint64_t)&a34 | 0x10) + 8 * v62), v278);
            if (v277 == 1 && v64 >= 2)
            {
              v65 = (float64x2_t *)((char *)vars8 + 8 * v288 * v277 + 8 * v62);
              v46 = vaddq_f64(v46, *v65);
              *v65 = v46;
            }
            else
            {
              if (v64 >= 2)
                v66 = 2;
              else
                v66 = v57 - v62;
              v67 = (v66 + 2) & (v66 >> 63);
              if (v66 < 0)
                v66 = 2;
              if (v67 < v66)
              {
                v68 = (double *)((char *)v63->f64 + v56 * v67);
                do
                {
                  a23 = v46;
                  *v68 = *(double *)((unint64_t)&a23 & 0xFFFFFFFFFFFFFFF7 | (8 * (v67++ & 1))) + *v68;
                  v68 = (double *)((char *)v68 + v56);
                }
                while (v66 != v67);
              }
            }
            v62 += 2;
            v63 = (float64x2_t *)((char *)v63 + v55);
          }
          while (v62 < v57);
        }
        v49 = v288 + 512;
        v48 = v292 + 1;
        v43 = v296 + 4096;
        v40 = (float64x2_t *)((char *)v284 + v268);
      }
      while (v288 + 512 < v276);
      return;
    }
    if (v34 < 1)
      return;
    if (v34 == 1)
    {
      if (v35 >= 2)
      {
        v92 = 0.0;
        v160 = 2;
        v161 = v36;
        v91 = 0.0;
        v162 = v38;
        do
        {
          v91 = v91 + *v161 * *v162;
          v92 = v92 + v161[v37] * v162[v39];
          v160 += 2;
          v162 += 2 * v39;
          v161 += 2 * v37;
        }
        while (v160 <= v35);
        v90 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v90 = 0;
        v91 = 0.0;
        v92 = 0.0;
      }
      if (v90 < v35)
        v91 = v91 + v36[v90 * v37] * v38[v90 * v39];
      v163 = v92 + v91;
      v164 = v40->f64[0];
LABEL_175:
      v165 = v164 + v44 * v163;
LABEL_296:
      v40->f64[0] = v165;
      return;
    }
    if ((unint64_t)v34 < 3)
    {
      v45 = 2;
      goto LABEL_177;
    }
    v120 = 8 * v41;
    while (1)
    {
      if (v45 >= 4)
        v121 = 4;
      else
        v121 = v45;
      if (v35 >= 2)
      {
        v126 = 0uLL;
        v127 = (float64x2_t *)v43;
        v128 = v279;
        v129 = 2;
        v125 = 0uLL;
        v124 = 0uLL;
        v123 = 0uLL;
        v130 = v279;
        do
        {
          v131 = vld1q_dup_f64(v130);
          v119 = 16 * v39;
          v130 = (const double *)((char *)v130 + v119);
          v126 = vmlaq_f64(v126, v131, *v127);
          v124 = vmlaq_f64(v124, v131, *(float64x2_t *)((char *)v127 + 8 * v121 - 16));
          v131.f64[0] = v128[v39];
          v123 = vmlaq_n_f64(v123, *(float64x2_t *)((char *)v127 + 8 * v37), v131.f64[0]);
          v125 = vmlaq_n_f64(v125, *(float64x2_t *)((char *)v127 + 8 * v37 + 8 * v121 - 16), v131.f64[0]);
          v129 += 2;
          v127 += v37;
          v128 = (float64_t *)v130;
        }
        while (v129 <= v35);
        v122 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v122 = 0;
        v123 = 0uLL;
        v124 = 0uLL;
        v125 = 0uLL;
        v126 = 0uLL;
      }
      v132 = v121 - 2;
      if (v122 < v35)
      {
        v133 = v279[v122 * v39];
        v126 = vmlaq_n_f64(v126, *(float64x2_t *)(v43 + 8 * v122 * v37), v133);
        v124 = vmlaq_n_f64(v124, *(float64x2_t *)(v43 + 8 * (v122 * v37 + v132)), v133);
      }
      v134 = (float64x2_t *)((char *)v40 + 8 * v132 * v41);
      v135 = vmulq_n_f64(vaddq_f64(v123, v126), v44);
      if (v41 == 1 && v121 == 4)
      {
        *v40 = vaddq_f64(v135, *v40);
        v136 = vmulq_n_f64(vaddq_f64(v125, v124), v44);
      }
      else
      {
        if (v121 >= 2)
          v137 = 0;
        else
          v137 = v121;
        if (v121 < 2)
          v132 = 2;
        if (v137 < v132)
        {
          v138 = (double *)((char *)v40->f64 + v120 * v137);
          do
          {
            a24 = v135;
            *v138 = *(double *)((unint64_t)&a24 & 0xFFFFFFFFFFFFFFF7 | (8 * (v137++ & 1))) + *v138;
            v138 = (double *)((char *)v138 + v120);
          }
          while (v132 != v137);
        }
        v136 = vmulq_n_f64(vaddq_f64(v125, v124), v44);
        if (v41 != 1)
        {
          v134->f64[0] = v136.f64[0] + v134->f64[0];
          v134->f64[v41] = v136.f64[1] + v134->f64[v41];
          goto LABEL_136;
        }
      }
      *v134 = vaddq_f64(v136, *v134);
LABEL_136:
      v43 += 8 * v121;
      v40 = (float64x2_t *)((char *)v40 + 8 * v121 * v41);
      v45 -= v121;
      if (v45 <= 2)
      {
        if (v45 < 1)
          return;
LABEL_177:
        sub_239A3B1E8(-v45, v35, (float64x2_t *)(v43 + 8 * (v45 - 2)), v37, v279, v39, (float64x2_t *)((char *)v40 + 8 * (v45 - 2) * v41), v41, v44);
        return;
      }
    }
  }
  v69 = *(double *)&v42;
  if (*(double *)&v42 != 0.0)
  {
    v94 = v34 > 7 && v47 > 0xFFF;
    v46.f64[0] = -1.0;
    if (*(double *)&v42 == -1.0)
    {
      if (v94)
      {
        v95 = 0;
        v96 = 0;
        v97 = -v37 & v37;
        if (v97 >= 2)
          v97 = 2;
        v98 = __clz(v97) - 62;
        v99 = (1 << v98);
        v306 = v39 << v98;
        v310 = v37 << v98;
        v302 = 8 * v39;
        v100 = 8 * v37;
        v101 = v35 - 1;
        v270 = v41 << 12;
        v102 = 16 * v41;
        v103 = 8 * v41;
        vars8b = v40;
        do
        {
          v286 = v40;
          v290 = v96;
          if (v45 - v96 >= 512)
            v104 = 512;
          else
            v104 = v45 - v96;
          v282 = v45 - v96;
          if (v45 - v96 >= 1)
          {
            v105 = v45 - (v95 << 9);
            if (v105 >= 512)
              v105 = 512;
            bzero((void *)((unint64_t)&a34 | 0x10), 8 * (v105 - (v105 != 0)) + 8);
          }
          v294 = v95;
          v298 = v43;
          v106 = v279;
          v107 = v99;
          do
          {
            v108 = (v101 + v107) / v99;
            if (!v108)
              break;
            v46 = sub_239A3B2F8(v104, v108, v43, v310, v106, v306, (unint64_t)&a34 | 0x10, v46);
            v106 = (double *)((char *)v106 + v302);
            v43 += v100;
            --v107;
          }
          while (v107);
          v45 = v276;
          if (v282 >= 1)
          {
            v109 = 0;
            v110 = v286;
            do
            {
              v111 = v104 - v109;
              v46 = vmulq_n_f64(*(float64x2_t *)(((unint64_t)&a34 | 0x10) + 8 * v109), v278);
              if (v277 == 1 && v111 >= 2)
              {
                v112 = (float64x2_t *)((char *)vars8b + 8 * v290 * v277 + 8 * v109);
                v46 = vsubq_f64(v46, *v112);
                *v112 = v46;
              }
              else
              {
                if (v111 >= 2)
                  v113 = 2;
                else
                  v113 = v104 - v109;
                v114 = (v113 + 2) & (v113 >> 63);
                if (v113 < 0)
                  v113 = 2;
                if (v114 < v113)
                {
                  v115 = (double *)((char *)v110->f64 + v103 * v114);
                  do
                  {
                    a28 = v46;
                    *v115 = *(double *)((unint64_t)&a28 & 0xFFFFFFFFFFFFFFF7 | (8 * (v114++ & 1))) - *v115;
                    v115 = (double *)((char *)v115 + v103);
                  }
                  while (v113 != v114);
                }
              }
              v109 += 2;
              v110 = (float64x2_t *)((char *)v110 + v102);
            }
            while (v109 < v104);
          }
          v96 = v290 + 512;
          v95 = v294 + 1;
          v43 = v298 + 4096;
          v40 = (float64x2_t *)((char *)v286 + v270);
        }
        while (v290 + 512 < v276);
        return;
      }
      if (v34 < 1)
        return;
      if (v34 == 1)
      {
        if (v35 >= 2)
        {
          v168 = 0.0;
          v244 = 2;
          v245 = v36;
          v167 = 0.0;
          v246 = v38;
          do
          {
            v167 = v167 + *v245 * *v246;
            v168 = v168 + v245[v37] * v246[v39];
            v244 += 2;
            v246 += 2 * v39;
            v245 += 2 * v37;
          }
          while (v244 <= v35);
          v166 = v35 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v166 = 0;
          v167 = 0.0;
          v168 = 0.0;
        }
        if (v166 < v35)
          v167 = v167 + v36[v166 * v37] * v38[v166 * v39];
        v165 = -(v40->f64[0] - v44 * (v168 + v167));
        goto LABEL_296;
      }
      if ((unint64_t)v34 < 3)
      {
        v45 = 2;
LABEL_299:
        if (v35 >= 2)
        {
          v249 = 0uLL;
          v250 = 2;
          v251 = (float64x2_t *)(v43 + 8 * (v45 - 2));
          v248 = 0uLL;
          v252 = v279;
          do
          {
            v248 = vmlaq_n_f64(v248, *v251, *v252);
            v249 = vmlaq_n_f64(v249, *(float64x2_t *)((char *)v251 + 8 * v37), v252[v39]);
            v250 += 2;
            v252 += 2 * v39;
            v251 += v37;
          }
          while (v250 <= v35);
          v247 = v35 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v247 = 0;
          v248 = 0uLL;
          v249 = 0uLL;
        }
        if (v247 < v35)
          v248 = vmlaq_n_f64(v248, *(float64x2_t *)(v43 + 8 * (v45 - 2) + 8 * v247 * v37), v279[v247 * v39]);
        v253 = vmulq_n_f64(vaddq_f64(v249, v248), v44);
        v254 = 2 - v45;
        if (2 - v45 <= 1)
        {
          do
          {
            a29 = v253;
            v40->f64[0] = *(double *)((unint64_t)&a29 & 0xFFFFFFFFFFFFFFF7 | (8 * (v254++ & 1))) - v40->f64[0];
            v40 = (float64x2_t *)((char *)v40 + 8 * v41);
          }
          while (v254 != 2);
        }
        return;
      }
      v204 = 8 * v41;
      while (1)
      {
        if (v45 >= 4)
          v205 = 4;
        else
          v205 = v45;
        if (v35 >= 2)
        {
          v210 = 0uLL;
          v211 = (float64x2_t *)v43;
          v212 = v279;
          v213 = 2;
          v209 = 0uLL;
          v208 = 0uLL;
          v207 = 0uLL;
          v214 = v279;
          do
          {
            v215 = vld1q_dup_f64(v214);
            v203 = 16 * v39;
            v214 = (const double *)((char *)v214 + v203);
            v210 = vmlaq_f64(v210, v215, *v211);
            v208 = vmlaq_f64(v208, v215, *(float64x2_t *)((char *)v211 + 8 * v205 - 16));
            v215.f64[0] = v212[v39];
            v207 = vmlaq_n_f64(v207, *(float64x2_t *)((char *)v211 + 8 * v37), v215.f64[0]);
            v209 = vmlaq_n_f64(v209, *(float64x2_t *)((char *)v211 + 8 * v37 + 8 * v205 - 16), v215.f64[0]);
            v213 += 2;
            v211 += v37;
            v212 = (float64_t *)v214;
          }
          while (v213 <= v35);
          v206 = v35 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v206 = 0;
          v207 = 0uLL;
          v208 = 0uLL;
          v209 = 0uLL;
          v210 = 0uLL;
        }
        v216 = v205 - 2;
        if (v206 < v35)
        {
          v217 = v279[v206 * v39];
          v210 = vmlaq_n_f64(v210, *(float64x2_t *)(v43 + 8 * v206 * v37), v217);
          v208 = vmlaq_n_f64(v208, *(float64x2_t *)(v43 + 8 * (v206 * v37 + v216)), v217);
        }
        v218 = (float64x2_t *)((char *)v40 + 8 * v216 * v41);
        v219 = vmulq_n_f64(vaddq_f64(v207, v210), v44);
        if (v41 == 1 && v205 == 4)
        {
          *v40 = vsubq_f64(v219, *v40);
          v220 = vmulq_n_f64(vaddq_f64(v209, v208), v44);
        }
        else
        {
          if (v205 >= 2)
            v221 = 0;
          else
            v221 = v205;
          if (v205 < 2)
            v216 = 2;
          if (v221 < v216)
          {
            v222 = (double *)((char *)v40->f64 + v204 * v221);
            do
            {
              a30 = v219;
              *v222 = *(double *)((unint64_t)&a30 & 0xFFFFFFFFFFFFFFF7 | (8 * (v221++ & 1))) - *v222;
              v222 = (double *)((char *)v222 + v204);
            }
            while (v216 != v221);
          }
          v220 = vmulq_n_f64(vaddq_f64(v209, v208), v44);
          if (v41 != 1)
          {
            v218->f64[0] = v220.f64[0] - v218->f64[0];
            v218->f64[v41] = v220.f64[1] - v218->f64[v41];
            goto LABEL_258;
          }
        }
        *v218 = vsubq_f64(v220, *v218);
LABEL_258:
        v43 += 8 * v205;
        v40 = (float64x2_t *)((char *)v40 + 8 * v205 * v41);
        v45 -= v205;
        if (v45 <= 2)
        {
          if (v45 < 1)
            return;
          goto LABEL_299;
        }
      }
    }
    if (v94)
    {
      v139 = 0;
      v140 = 0;
      v141 = -v37 & v37;
      if (v141 >= 2)
        v141 = 2;
      v142 = __clz(v141) - 62;
      v143 = (1 << v142);
      v307 = v39 << v142;
      v311 = v37 << v142;
      v303 = 8 * v39;
      v144 = 8 * v37;
      v145 = v35 - 1;
      v266 = v41 << 12;
      v146 = 16 * v41;
      v147 = 8 * v41;
      vars8c = v40;
      v267 = (float64x2_t)vdupq_lane_s64(v42, 0);
      v271 = *(double *)&v42;
      do
      {
        v287 = v40;
        v291 = v140;
        if (v45 - v140 >= 512)
          v148 = 512;
        else
          v148 = v45 - v140;
        v283 = v45 - v140;
        if (v45 - v140 >= 1)
        {
          v149 = v45 - (v139 << 9);
          if (v149 >= 512)
            v149 = 512;
          bzero((void *)((unint64_t)&a34 | 0x10), 8 * (v149 - (v149 != 0)) + 8);
        }
        v295 = v139;
        v299 = v43;
        v150 = v279;
        v151 = v143;
        do
        {
          v152 = (v145 + v151) / v143;
          if (!v152)
            break;
          v46 = sub_239A3B2F8(v148, v152, v43, v311, v150, v307, (unint64_t)&a34 | 0x10, v46);
          v150 = (double *)((char *)v150 + v303);
          v43 += v144;
          --v151;
        }
        while (v151);
        v45 = v276;
        if (v283 >= 1)
        {
          v153 = 0;
          v154 = v287;
          do
          {
            v155 = v148 - v153;
            v46 = vmulq_n_f64(*(float64x2_t *)(((unint64_t)&a34 | 0x10) + 8 * v153), v278);
            if (v277 == 1 && v155 >= 2)
            {
              v156 = (float64x2_t *)((char *)vars8c + 8 * v291 * v277 + 8 * v153);
              v46 = vmlaq_f64(v46, *v156, v267);
              *v156 = v46;
            }
            else
            {
              if (v155 >= 2)
                v157 = 2;
              else
                v157 = v148 - v153;
              v158 = (v157 + 2) & (v157 >> 63);
              if (v157 < 0)
                v157 = 2;
              if (v158 < v157)
              {
                v159 = (double *)((char *)v154->f64 + v147 * v158);
                do
                {
                  a31 = v46;
                  *v159 = *(double *)((unint64_t)&a31 & 0xFFFFFFFFFFFFFFF7 | (8 * (v158++ & 1))) + v271 * *v159;
                  v159 = (double *)((char *)v159 + v147);
                }
                while (v157 != v158);
              }
            }
            v153 += 2;
            v154 = (float64x2_t *)((char *)v154 + v146);
          }
          while (v153 < v148);
        }
        v140 = v291 + 512;
        v139 = v295 + 1;
        v43 = v299 + 4096;
        v40 = (float64x2_t *)((char *)v287 + v266);
      }
      while (v291 + 512 < v276);
      return;
    }
    if (v34 < 1)
      return;
    if (v34 == 1)
    {
      if (v35 >= 2)
      {
        v191 = 0.0;
        v255 = 2;
        v256 = v36;
        v190 = 0.0;
        v257 = v38;
        do
        {
          v190 = v190 + *v256 * *v257;
          v191 = v191 + v256[v37] * v257[v39];
          v255 += 2;
          v257 += 2 * v39;
          v256 += 2 * v37;
        }
        while (v255 <= v35);
        v189 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v189 = 0;
        v190 = 0.0;
        v191 = 0.0;
      }
      if (v189 < v35)
        v190 = v190 + v36[v189 * v37] * v38[v189 * v39];
      v163 = v191 + v190;
      v164 = v40->f64[0] * v69;
      goto LABEL_175;
    }
    if ((unint64_t)v34 < 3)
    {
      v45 = 2;
LABEL_316:
      if (v35 >= 2)
      {
        v260 = 0uLL;
        v261 = 2;
        v262 = (float64x2_t *)(v43 + 8 * (v45 - 2));
        v259 = 0uLL;
        v263 = v279;
        do
        {
          v259 = vmlaq_n_f64(v259, *v262, *v263);
          v260 = vmlaq_n_f64(v260, *(float64x2_t *)((char *)v262 + 8 * v37), v263[v39]);
          v261 += 2;
          v263 += 2 * v39;
          v262 += v37;
        }
        while (v261 <= v35);
        v258 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v258 = 0;
        v259 = 0uLL;
        v260 = 0uLL;
      }
      if (v258 < v35)
        v259 = vmlaq_n_f64(v259, *(float64x2_t *)(v43 + 8 * (v45 - 2) + 8 * v258 * v37), v279[v258 * v39]);
      v264 = vmulq_n_f64(vaddq_f64(v260, v259), v44);
      v265 = 2 - v45;
      if (2 - v45 <= 1)
      {
        do
        {
          a32 = v264;
          v40->f64[0] = *(double *)((unint64_t)&a32 & 0xFFFFFFFFFFFFFFF7 | (8 * (v265++ & 1)))
                      + v69 * v40->f64[0];
          v40 = (float64x2_t *)((char *)v40 + 8 * v41);
        }
        while (v265 != 2);
      }
      return;
    }
    v224 = (float64x2_t)vdupq_lane_s64(v42, 0);
    v225 = 8 * v41;
    while (1)
    {
      if (v45 >= 4)
        v226 = 4;
      else
        v226 = v45;
      if (v35 >= 2)
      {
        v231 = 0uLL;
        v232 = (float64x2_t *)v43;
        v233 = v279;
        v234 = 2;
        v230 = 0uLL;
        v229 = 0uLL;
        v228 = 0uLL;
        v235 = v279;
        do
        {
          v236 = vld1q_dup_f64(v235);
          v223 = 16 * v39;
          v235 = (const double *)((char *)v235 + v223);
          v231 = vmlaq_f64(v231, v236, *v232);
          v229 = vmlaq_f64(v229, v236, *(float64x2_t *)((char *)v232 + 8 * v226 - 16));
          v236.f64[0] = v233[v39];
          v228 = vmlaq_n_f64(v228, *(float64x2_t *)((char *)v232 + 8 * v37), v236.f64[0]);
          v230 = vmlaq_n_f64(v230, *(float64x2_t *)((char *)v232 + 8 * v37 + 8 * v226 - 16), v236.f64[0]);
          v234 += 2;
          v232 += v37;
          v233 = (float64_t *)v235;
        }
        while (v234 <= v35);
        v227 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v227 = 0;
        v228 = 0uLL;
        v229 = 0uLL;
        v230 = 0uLL;
        v231 = 0uLL;
      }
      v237 = v226 - 2;
      if (v227 < v35)
      {
        v238 = v279[v227 * v39];
        v231 = vmlaq_n_f64(v231, *(float64x2_t *)(v43 + 8 * v227 * v37), v238);
        v229 = vmlaq_n_f64(v229, *(float64x2_t *)(v43 + 8 * (v227 * v37 + v237)), v238);
      }
      v239 = (float64x2_t *)((char *)v40 + 8 * v237 * v41);
      v240 = vmulq_n_f64(vaddq_f64(v228, v231), v44);
      if (v41 == 1 && v226 == 4)
      {
        *v40 = vmlaq_f64(v240, *v40, v224);
        v241 = vmulq_n_f64(vaddq_f64(v230, v229), v44);
      }
      else
      {
        if (v226 >= 2)
          v242 = 0;
        else
          v242 = v226;
        if (v226 < 2)
          v237 = 2;
        if (v242 < v237)
        {
          v243 = (double *)((char *)v40->f64 + v225 * v242);
          do
          {
            a33 = v240;
            *v243 = *(double *)((unint64_t)&a33 & 0xFFFFFFFFFFFFFFF7 | (8 * (v242++ & 1))) + v69 * *v243;
            v243 = (double *)((char *)v243 + v225);
          }
          while (v237 != v242);
        }
        v241 = vmulq_n_f64(vaddq_f64(v230, v229), v44);
        if (v41 != 1)
        {
          v239->f64[0] = v241.f64[0] + v69 * v239->f64[0];
          v239->f64[v41] = v241.f64[1] + v69 * v239->f64[v41];
          goto LABEL_287;
        }
      }
      *v239 = vmlaq_f64(v241, *v239, v224);
LABEL_287:
      v43 += 8 * v226;
      v40 = (float64x2_t *)((char *)v40 + 8 * v226 * v41);
      v45 -= v226;
      if (v45 <= 2)
      {
        if (v45 < 1)
          return;
        goto LABEL_316;
      }
    }
  }
  if (v34 >= 8 && v47 >= 0x1000)
  {
    v70 = 0;
    v71 = 0;
    v72 = -v37 & v37;
    if (v72 >= 2)
      v72 = 2;
    v73 = __clz(v72) - 62;
    v74 = (1 << v73);
    v305 = v39 << v73;
    v309 = v37 << v73;
    v301 = 8 * v39;
    v75 = 8 * v37;
    v76 = v35 - 1;
    v269 = v41 << 12;
    v77 = 16 * v41;
    v78 = 8 * v41;
    vars8a = v40;
    do
    {
      v285 = v40;
      v289 = v71;
      if (v45 - v71 >= 512)
        v79 = 512;
      else
        v79 = v45 - v71;
      v281 = v45 - v71;
      if (v45 - v71 >= 1)
      {
        v80 = v45 - (v70 << 9);
        if (v80 >= 512)
          v80 = 512;
        bzero((void *)((unint64_t)&a34 | 0x10), 8 * (v80 - (v80 != 0)) + 8);
      }
      v293 = v70;
      v297 = v43;
      v81 = v279;
      v82 = v74;
      do
      {
        v83 = (v76 + v82) / v74;
        if (!v83)
          break;
        v46 = sub_239A3B2F8(v79, v83, v43, v309, v81, v305, (unint64_t)&a34 | 0x10, v46);
        v81 = (double *)((char *)v81 + v301);
        v43 += v75;
        --v82;
      }
      while (v82);
      v45 = v276;
      if (v281 >= 1)
      {
        v84 = 0;
        v85 = v285;
        do
        {
          v86 = v79 - v84;
          v46 = vmulq_n_f64(*(float64x2_t *)(((unint64_t)&a34 | 0x10) + 8 * v84), v278);
          if (v277 == 1 && v86 >= 2)
          {
            *(float64x2_t *)((char *)vars8a + 8 * v289 * v277 + 8 * v84) = v46;
          }
          else
          {
            if (v86 >= 2)
              v87 = 2;
            else
              v87 = v79 - v84;
            v88 = (v87 + 2) & (v87 >> 63);
            if (v87 < 0)
              v87 = 2;
            if (v88 < v87)
            {
              v89 = (_QWORD *)((char *)v85->f64 + v78 * v88);
              do
              {
                a25 = v46;
                *v89 = *(_QWORD *)((unint64_t)&a25 & 0xFFFFFFFFFFFFFFF7 | (8 * (v88++ & 1)));
                v89 = (_QWORD *)((char *)v89 + v78);
              }
              while (v87 != v88);
            }
          }
          v84 += 2;
          v85 = (float64x2_t *)((char *)v85 + v77);
        }
        while (v84 < v79);
      }
      v71 = v289 + 512;
      v70 = v293 + 1;
      v43 = v297 + 4096;
      v40 = (float64x2_t *)((char *)v285 + v269);
    }
    while (v289 + 512 < v276);
    return;
  }
  if (v34 < 1)
    return;
  if (v34 == 1)
  {
    if (v35 >= 2)
    {
      v118 = 0.0;
      v192 = 2;
      v193 = v36;
      v117 = 0.0;
      v194 = v38;
      do
      {
        v117 = v117 + *v193 * *v194;
        v118 = v118 + v193[v37] * v194[v39];
        v192 += 2;
        v194 += 2 * v39;
        v193 += 2 * v37;
      }
      while (v192 <= v35);
      v116 = v35 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v116 = 0;
      v117 = 0.0;
      v118 = 0.0;
    }
    if (v116 < v35)
      v117 = v117 + v36[v116 * v37] * v38[v116 * v39];
    v165 = (v118 + v117) * v44;
    goto LABEL_296;
  }
  if ((unint64_t)v34 < 3)
  {
    v45 = 2;
    goto LABEL_222;
  }
  v170 = 8 * v41;
  do
  {
    if (v45 >= 4)
      v171 = 4;
    else
      v171 = v45;
    if (v35 >= 2)
    {
      v176 = 0uLL;
      v177 = (float64x2_t *)v43;
      v178 = v279;
      v179 = 2;
      v175 = 0uLL;
      v174 = 0uLL;
      v173 = 0uLL;
      v180 = v279;
      do
      {
        v181 = vld1q_dup_f64(v180);
        v169 = 16 * v39;
        v180 = (const double *)((char *)v180 + v169);
        v176 = vmlaq_f64(v176, v181, *v177);
        v174 = vmlaq_f64(v174, v181, *(float64x2_t *)((char *)v177 + 8 * v171 - 16));
        v181.f64[0] = v178[v39];
        v173 = vmlaq_n_f64(v173, *(float64x2_t *)((char *)v177 + 8 * v37), v181.f64[0]);
        v175 = vmlaq_n_f64(v175, *(float64x2_t *)((char *)v177 + 8 * v37 + 8 * v171 - 16), v181.f64[0]);
        v179 += 2;
        v177 += v37;
        v178 = (float64_t *)v180;
      }
      while (v179 <= v35);
      v172 = v35 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v172 = 0;
      v173 = 0uLL;
      v174 = 0uLL;
      v175 = 0uLL;
      v176 = 0uLL;
    }
    v182 = v171 - 2;
    if (v172 < v35)
    {
      v183 = v279[v172 * v39];
      v176 = vmlaq_n_f64(v176, *(float64x2_t *)(v43 + 8 * v172 * v37), v183);
      v174 = vmlaq_n_f64(v174, *(float64x2_t *)(v43 + 8 * (v172 * v37 + v182)), v183);
    }
    v184 = (float64x2_t *)((char *)v40 + 8 * v182 * v41);
    v185 = vmulq_n_f64(vaddq_f64(v173, v176), v44);
    if (v41 == 1 && v171 == 4)
    {
      *v40 = v185;
      v186 = vmulq_n_f64(vaddq_f64(v175, v174), v44);
LABEL_206:
      *v184 = v186;
      goto LABEL_208;
    }
    if (v171 >= 2)
      v187 = 0;
    else
      v187 = v171;
    if (v171 < 2)
      v182 = 2;
    if (v187 < v182)
    {
      v188 = (_QWORD *)((char *)v40->f64 + v170 * v187);
      do
      {
        a27 = v185;
        *v188 = *(_QWORD *)((unint64_t)&a27 & 0xFFFFFFFFFFFFFFF7 | (8 * (v187++ & 1)));
        v188 = (_QWORD *)((char *)v188 + v170);
      }
      while (v182 != v187);
    }
    v186 = vmulq_n_f64(vaddq_f64(v175, v174), v44);
    if (v41 == 1)
      goto LABEL_206;
    v184->f64[0] = v186.f64[0];
    v184->f64[v41] = v186.f64[1];
LABEL_208:
    v43 += 8 * v171;
    v40 = (float64x2_t *)((char *)v40 + 8 * v171 * v41);
    v45 -= v171;
  }
  while (v45 > 2);
  if (v45 < 1)
    return;
LABEL_222:
  if (v35 >= 2)
  {
    v197 = 0uLL;
    v198 = 2;
    v199 = (float64x2_t *)(v43 + 8 * (v45 - 2));
    v196 = 0uLL;
    v200 = v279;
    do
    {
      v196 = vmlaq_n_f64(v196, *v199, *v200);
      v197 = vmlaq_n_f64(v197, *(float64x2_t *)((char *)v199 + 8 * v37), v200[v39]);
      v198 += 2;
      v200 += 2 * v39;
      v199 += v37;
    }
    while (v198 <= v35);
    v195 = v35 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v195 = 0;
    v196 = 0uLL;
    v197 = 0uLL;
  }
  if (v195 < v35)
    v196 = vmlaq_n_f64(v196, *(float64x2_t *)(v43 + 8 * (v45 - 2) + 8 * v195 * v37), v279[v195 * v39]);
  v201 = vmulq_n_f64(vaddq_f64(v197, v196), v44);
  v202 = 2 - v45;
  if (2 - v45 <= 1)
  {
    do
    {
      a26 = v201;
      v40->f64[0] = *(float64_t *)((unint64_t)&a26 & 0xFFFFFFFFFFFFFFF7 | (8 * (v202++ & 1)));
      v40 = (float64x2_t *)((char *)v40 + 8 * v41);
    }
    while (v202 != 2);
  }
}

uint64_t sub_239A392B0(uint64_t result, uint64_t a2, float64x2_t *a3, uint64_t a4, float64x2_t *a5, double *a6, uint64_t a7, double _D0, double a9)
{
  uint64_t v9;
  double v11;
  double v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  int8x16_t v17;
  double v18;
  uint64_t v19;
  float64x2_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  uint64_t v39;
  char *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  uint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  float64x2_t *v56;
  float64x2_t v57;
  float64x2_t v58;
  double *v60;
  float64x2_t v61;
  int8x16_t v63;
  uint64_t v73;
  float64x2_t *v74;
  uint64_t v75;
  float64x2_t *v76;
  uint64_t v77;
  float64x2_t *v78;
  float64x2_t *v79;
  uint64_t v80;
  uint64_t v81;
  float64x2_t *v82;
  uint64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  float64x2_t *v91;
  float64x2_t *v92;
  uint64_t i;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  char *v100;
  double *v101;
  float64x2_t v103;
  float64x2_t v107;
  float64x2_t v108;
  int8x16_t v109;
  double v110;
  uint64_t v111;
  float64x2_t v112;
  char *v113;
  uint64_t v114;
  float64x2_t *v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t *v118;
  float64x2_t *v119;
  uint64_t j;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  double *v125;
  float64x2_t *v128;
  float64x2_t v129;
  float64x2_t *v130;
  float64x2_t *v131;
  uint64_t k;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  int8x16_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float64x2_t *v151;
  float64x2_t v152;
  float64x2_t v153;
  uint64_t v154;
  char *v155;
  float64x2_t *v156;
  float64x2_t *v157;
  float64x2_t *v158;
  uint64_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t *v167;
  float64x2_t *v168;
  float64x2_t *v169;
  float64x2_t *v170;
  float64x2_t *v171;
  double *v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  uint64_t v177;
  float64x2_t *v178;
  uint64_t v179;
  float64x2_t *v180;
  uint64_t v181;
  float64x2_t *v182;
  float64x2_t *v183;
  uint64_t v184;
  uint64_t v185;
  float64x2_t *v186;
  uint64_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t *v192;
  float64x2_t *v193;
  float64x2_t *v194;
  float64x2_t *v195;
  float64x2_t *v196;
  uint64_t m;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  char *v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  double *v209;
  float64x2_t v210;
  float64x2_t v211;
  uint64_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  int8x16_t v216;
  char *v217;
  uint64_t v218;
  float64x2_t *v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t *v222;
  float64x2_t *v223;
  uint64_t n;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  double *v229;
  float64x2_t v230;
  float64x2_t *v231;
  float64x2_t v232;
  float64x2_t *v233;
  float64x2_t *v234;
  uint64_t ii;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  int8x16_t v241;
  int8x16_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  float64x2_t *v257;
  float64x2_t v258;
  float64x2_t v259;
  uint64_t v260;
  char *v261;
  float64x2_t *v262;
  float64x2_t *v263;
  float64x2_t *v264;
  uint64_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t *v273;
  float64x2_t *v274;
  float64x2_t *v275;
  float64x2_t *v276;
  float64x2_t *v277;
  double *v278;
  uint64_t v287;
  float64x2_t *v288;
  uint64_t v289;
  float64x2_t *v290;
  uint64_t v291;
  float64x2_t *v292;
  float64x2_t *v293;
  uint64_t v294;
  uint64_t v295;
  float64x2_t *v296;
  uint64_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t *v302;
  float64x2_t *v303;
  float64x2_t *v304;
  float64x2_t *v305;
  float64x2_t *v306;
  uint64_t jj;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  char *v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v318;
  double *v319;
  int8x16_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  float64x2_t *v337;
  float64x2_t v338;
  float64x2_t v339;
  uint64_t v340;
  char *v341;
  float64x2_t *v342;
  float64x2_t *v343;
  float64x2_t *v344;
  uint64_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t *v353;
  float64x2_t *v354;
  float64x2_t *v355;
  float64x2_t *v356;
  float64x2_t *v357;
  double *v358;
  uint64_t v367;
  float64x2_t *v368;
  uint64_t v369;
  float64x2_t *v370;
  uint64_t v371;
  float64x2_t *v372;
  float64x2_t *v373;
  uint64_t v374;
  uint64_t v375;
  float64x2_t *v376;
  uint64_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t *v382;
  float64x2_t *v383;
  float64x2_t *v384;
  float64x2_t *v385;
  float64x2_t *v386;
  uint64_t nn;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  char *v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v398;
  double *v399;
  char *v402;
  uint64_t v403;
  float64x2_t *v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t *v407;
  float64x2_t *v408;
  uint64_t kk;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  double *v414;
  float64x2_t *v417;
  float64x2_t v418;
  float64x2_t *v419;
  float64x2_t *v420;
  uint64_t mm;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  char *v425;
  uint64_t v426;
  float64x2_t *v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t *v430;
  float64x2_t *v431;
  uint64_t i1;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  double *v437;
  float64x2_t *v440;
  float64x2_t v441;
  float64x2_t *v442;
  float64x2_t *v443;
  uint64_t i2;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  float64x2_t *v452;
  float64x2_t *v453;
  float64x2_t *v454;
  float64x2_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;

  v9 = a4;
  if (a9 == 1.0)
  {
    if (result > 1)
    {
      v13 = result - 2;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          v14 = *a5;
          do
          {
            *a6 = *a6 + _D0 * vaddvq_f64(vmulq_f64(v14, *a3));
            a6 += a7;
            a3 = (float64x2_t *)((char *)a3 + 8 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 4)
      {
        v21 = *(int8x16_t *)((char *)&unk_239F0BC40 + 8 * (2 - (result & 1)));
        v456 = result;
        v448 = result - 2;
        v22 = 0;
        if (a2 >= 8)
        {
          v23 = 8 * a4;
          v452 = (float64x2_t *)((char *)a5 + 8 * v13);
          v24 = v13 + 2 * a4;
          v25 = v13 + 4 * a4;
          v26 = v25 + a4;
          v27 = a4 << 6;
          v28 = 8 * v13;
          v29 = 8 * (v13 + a4);
          v30 = 8 * v24;
          v31 = 8 * (v24 + a4);
          v32 = 8 * v25;
          v33 = 8 * v26;
          v34 = 8 * (v13 + 6 * a4);
          v35 = 8 * (7 * a4 + v13);
          v36 = a3;
          do
          {
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = v9;
            v40 = (char *)&a3->f64[v22 * v9];
            v41 = a5;
            v42 = a5;
            v43 = v36;
            v44 = v456;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = 0uLL;
            v48 = 0uLL;
            v49 = 0uLL;
            v50 = 0uLL;
            do
            {
              v51 = *v42++;
              v37 = vmlaq_f64(v37, v51, *v43);
              v38 = vmlaq_f64(v38, v51, *(float64x2_t *)((char *)v43 + v23));
              v52 = (float64x2_t *)((char *)v43 + v23 + v23);
              v45 = vmlaq_f64(v45, v51, *v52);
              v53 = (float64x2_t *)((char *)v52 + v23);
              v50 = vmlaq_f64(v50, v51, *v53);
              v54 = (float64x2_t *)((char *)v53 + v23);
              v49 = vmlaq_f64(v49, v51, *v54);
              v55 = (float64x2_t *)((char *)v54 + v23);
              v48 = vmlaq_f64(v48, v51, *v55);
              v56 = (float64x2_t *)((char *)v55 + v23);
              v47 = vmlaq_f64(v47, v51, *v56);
              v46 = vmlaq_f64(v46, v51, *(float64x2_t *)((char *)v56 + v23));
              v44 -= 2;
              ++v43;
            }
            while (v44 > 2);
            v57 = vaddq_f64(v45, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v30])));
            v58 = vaddq_f64(v50, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v31])));
            _Q5 = vaddq_f64(v49, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v32])));
            v60 = &a6[v22 * a7];
            v61 = vaddq_f64(v48, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v33])));
            _Q3 = vaddq_f64(v47, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v34])));
            v63 = (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v35]);
            _Q7 = vpaddq_f64(vaddq_f64(v37, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v28]))), vaddq_f64(v38, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v29]))));
            *v60 = vmlad_n_f64(*v60, _D0, _Q7.f64[0]);
            __asm { FMLA            D17, D0, V7.D[1] }
            v60[a7] = _D17;
            _Q6 = vpaddq_f64(v57, v58);
            v60[2 * a7] = vmlad_n_f64(v60[2 * a7], _D0, _Q6.f64[0]);
            __asm { FMLA            D7, D0, V6.D[1] }
            v60[3 * a7] = _Q7.f64[0];
            _Q4 = vpaddq_f64(_Q5, v61);
            v60[4 * a7] = vmlad_n_f64(v60[4 * a7], _D0, _Q4.f64[0]);
            _Q2 = vpaddq_f64(_Q3, vaddq_f64(v46, (float64x2_t)vandq_s8(v21, v63)));
            __asm { FMLA            D5, D0, V4.D[1] }
            v60[5 * a7] = _Q5.f64[0];
            v60[6 * a7] = vmlad_n_f64(v60[6 * a7], _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v60[7 * a7] = _Q3.f64[0];
            v22 += 8;
            result = v22 | 7;
            v36 = (float64x2_t *)((char *)v36 + v27);
            v9 = v39;
            a5 = v41;
          }
          while ((v22 | 7) < a2);
        }
        if ((v22 | 3) >= a2)
        {
          v83 = v456;
          v73 = v448;
        }
        else
        {
          v73 = v448;
          v74 = (float64x2_t *)((char *)a5 + 8 * v448);
          v75 = v448 + 2 * v9;
          v76 = (float64x2_t *)((char *)a3 + v9 * (8 * v22 + 24));
          v77 = 32 * v9;
          v78 = (float64x2_t *)((char *)a3 + v9 * (8 * v22 + 16));
          v79 = (float64x2_t *)((char *)a3 + v9 * (8 * v22 + 8));
          v80 = 8 * v75;
          v81 = 8 * (v75 + v9);
          v82 = (float64x2_t *)((char *)a3 + 8 * v22 * v9);
          v83 = v456;
          do
          {
            v84 = 0uLL;
            v85 = 0uLL;
            v86 = 0uLL;
            v87 = 0uLL;
            v88 = a5;
            v89 = v82;
            v90 = v79;
            v91 = v78;
            v92 = v76;
            for (i = v456; i > 2; i -= 2)
            {
              v94 = *v88++;
              v95 = v94;
              v96 = *v89++;
              v87 = vmlaq_f64(v87, v95, v96);
              v97 = *v90++;
              v86 = vmlaq_f64(v86, v95, v97);
              v98 = *v91++;
              v85 = vmlaq_f64(v85, v95, v98);
              v99 = *v92++;
              v84 = vmlaq_f64(v84, v95, v99);
            }
            v100 = (char *)&a3->f64[v22 * v9];
            v101 = &a6[v22 * a7];
            _Q3 = vaddq_f64(v85, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v74, *(float64x2_t *)&v100[v80])));
            v103 = vaddq_f64(v84, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v74, *(float64x2_t *)&v100[v81])));
            _Q4 = vpaddq_f64(vaddq_f64(v87, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v74, *(float64x2_t *)&v100[8 * v448]))), vaddq_f64(v86, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v74, *(float64x2_t *)&v100[8 * v448 + 8 * v9]))));
            *v101 = vmlad_n_f64(*v101, _D0, _Q4.f64[0]);
            __asm { FMLA            D5, D0, V4.D[1] }
            v101[a7] = _D5;
            _Q2 = vpaddq_f64(_Q3, v103);
            v101[2 * a7] = vmlad_n_f64(v101[2 * a7], _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v101[3 * a7] = _Q3.f64[0];
            v22 += 4;
            result = v22 | 3;
            v76 = (float64x2_t *)((char *)v76 + v77);
            v78 = (float64x2_t *)((char *)v78 + v77);
            v79 = (float64x2_t *)((char *)v79 + v77);
            v82 = (float64x2_t *)((char *)v82 + v77);
          }
          while ((v22 | 3) < a2);
        }
        if ((v22 | 1) < a2)
        {
          v113 = (char *)a3 + v9 * (8 * v22 + 8);
          v114 = 16 * v9;
          v115 = (float64x2_t *)((char *)a3 + 8 * v22 * v9);
          do
          {
            v116 = 0uLL;
            v117 = 0uLL;
            v118 = a5;
            v119 = v115;
            result = (uint64_t)v113;
            for (j = v83; j > 2; j -= 2)
            {
              v121 = *v118++;
              v122 = v121;
              v123 = *v119++;
              v117 = vmlaq_f64(v117, v122, v123);
              v124 = *(float64x2_t *)result;
              result += 16;
              v116 = vmlaq_f64(v116, v122, v124);
            }
            v125 = &a6[v22 * a7];
            _Q2 = vpaddq_f64(vaddq_f64(v117, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v73), *(float64x2_t *)((char *)a3 + 8 * v22 * v9 + 8 * v73)))), vaddq_f64(v116, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v73), *(float64x2_t *)((char *)a3 + 8 * v22 * v9 + 8 * v73 + 8 * v9)))));
            *v125 = vmlad_n_f64(*v125, _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v125[a7] = _D3;
            v22 += 2;
            v113 += v114;
            v115 = (float64x2_t *)((char *)v115 + v114);
          }
          while ((v22 | 1) < a2);
        }
        if (v22 < a2)
        {
          v128 = (float64x2_t *)((char *)a3 + 8 * v22 * v9);
          do
          {
            v129 = 0uLL;
            v130 = a5;
            v131 = v128;
            for (k = v83; k > 2; k -= 2)
            {
              v133 = *v130++;
              v134 = v133;
              v135 = *v131++;
              v129 = vmlaq_f64(v129, v134, v135);
            }
            a6[v22 * a7] = a6[v22 * a7]
                         + _D0
                         * vaddvq_f64(vaddq_f64(v129, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v73), *(float64x2_t *)((char *)a3 + 8 * v22 * v9 + 8 * v73)))));
            ++v22;
            v128 = (float64x2_t *)((char *)v128 + 8 * v9);
          }
          while (v22 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v15 = *a5;
        v16 = *(float64x2_t *)((char *)a5 + 8 * result - 16);
        v17 = vmvnq_s8(*(int8x16_t *)((char *)&unk_239F0BC40 + 8 * (4 - result)));
        do
        {
          *a6 = *a6
              + _D0
              * vaddvq_f64(vaddq_f64(vmulq_f64(v16, *(float64x2_t *)((char *)a3 + 8 * result - 16)), (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v15, *a3), v17)));
          a6 += a7;
          a3 = (float64x2_t *)((char *)a3 + 8 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v11 = a5->f64[0];
      do
      {
        *a6 = *a6 + _D0 * (v11 * a3->f64[0]);
        a6 += a7;
        a3 = (float64x2_t *)((char *)a3 + 8 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == 0.0)
  {
    if (result > 1)
    {
      v19 = result - 2;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          v20 = *a5;
          do
          {
            *a6 = vaddvq_f64(vmulq_f64(v20, *a3)) * _D0;
            a6 += a7;
            a3 = (float64x2_t *)((char *)a3 + 8 * v9);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 4)
      {
        v136 = *(int8x16_t *)((char *)&unk_239F0BC40 + 8 * (2 - (result & 1)));
        v457 = result;
        v449 = result - 2;
        v137 = 0;
        if (a2 >= 8)
        {
          v138 = 8 * v9;
          v453 = (float64x2_t *)((char *)a5 + 8 * v19);
          v139 = v19 + 2 * v9;
          v140 = v19 + 4 * v9;
          v141 = v140 + v9;
          v142 = v9 << 6;
          v143 = 8 * v19;
          v144 = 8 * (v19 + v9);
          v145 = 8 * v139;
          v146 = 8 * (v139 + v9);
          v147 = 8 * v140;
          v148 = 8 * v141;
          v149 = 8 * (v19 + 6 * v9);
          v150 = 8 * (7 * v9 + v19);
          v151 = a3;
          do
          {
            v152 = 0uLL;
            v153 = 0uLL;
            v154 = v9;
            v155 = (char *)&a3->f64[v137 * v9];
            v156 = a5;
            v157 = a5;
            v158 = v151;
            v159 = v457;
            v160 = 0uLL;
            v161 = 0uLL;
            v162 = 0uLL;
            v163 = 0uLL;
            v164 = 0uLL;
            v165 = 0uLL;
            do
            {
              v166 = *v157++;
              v152 = vmlaq_f64(v152, v166, *v158);
              v153 = vmlaq_f64(v153, v166, *(float64x2_t *)((char *)v158 + v138));
              v167 = (float64x2_t *)((char *)v158 + v138 + v138);
              v160 = vmlaq_f64(v160, v166, *v167);
              v168 = (float64x2_t *)((char *)v167 + v138);
              v165 = vmlaq_f64(v165, v166, *v168);
              v169 = (float64x2_t *)((char *)v168 + v138);
              v164 = vmlaq_f64(v164, v166, *v169);
              v170 = (float64x2_t *)((char *)v169 + v138);
              v163 = vmlaq_f64(v163, v166, *v170);
              v171 = (float64x2_t *)((char *)v170 + v138);
              v162 = vmlaq_f64(v162, v166, *v171);
              v161 = vmlaq_f64(v161, v166, *(float64x2_t *)((char *)v171 + v138));
              v159 -= 2;
              ++v158;
            }
            while (v159 > 2);
            v172 = &a6[v137 * a7];
            v173 = vpaddq_f64(vaddq_f64(v152, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v143]))), vaddq_f64(v153, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v144]))));
            v174 = vpaddq_f64(vaddq_f64(v160, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v145]))), vaddq_f64(v165, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v146]))));
            v175 = vpaddq_f64(vaddq_f64(v164, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v147]))), vaddq_f64(v163, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v148]))));
            v176 = vpaddq_f64(vaddq_f64(v162, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v149]))), vaddq_f64(v161, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v150]))));
            *v172 = _D0 * v173.f64[0];
            v172[a7] = vmuld_lane_f64(_D0, v173, 1);
            v172[2 * a7] = _D0 * v174.f64[0];
            v172[3 * a7] = vmuld_lane_f64(_D0, v174, 1);
            v172[4 * a7] = _D0 * v175.f64[0];
            v172[5 * a7] = vmuld_lane_f64(_D0, v175, 1);
            v172[6 * a7] = _D0 * v176.f64[0];
            v172[7 * a7] = vmuld_lane_f64(_D0, v176, 1);
            v137 += 8;
            result = v137 | 7;
            v151 = (float64x2_t *)((char *)v151 + v142);
            v9 = v154;
            a5 = v156;
          }
          while ((v137 | 7) < a2);
        }
        if ((v137 | 3) >= a2)
        {
          v187 = v457;
          v177 = v449;
        }
        else
        {
          v177 = v449;
          v178 = (float64x2_t *)((char *)a5 + 8 * v449);
          v179 = v449 + 2 * v9;
          v180 = (float64x2_t *)((char *)a3 + v9 * (8 * v137 + 24));
          v181 = 32 * v9;
          v182 = (float64x2_t *)((char *)a3 + v9 * (8 * v137 + 16));
          v183 = (float64x2_t *)((char *)a3 + v9 * (8 * v137 + 8));
          v184 = 8 * v179;
          v185 = 8 * (v179 + v9);
          v186 = (float64x2_t *)((char *)a3 + 8 * v137 * v9);
          v187 = v457;
          do
          {
            v188 = 0uLL;
            v189 = 0uLL;
            v190 = 0uLL;
            v191 = 0uLL;
            v192 = a5;
            v193 = v186;
            v194 = v183;
            v195 = v182;
            v196 = v180;
            for (m = v457; m > 2; m -= 2)
            {
              v198 = *v192++;
              v199 = v198;
              v200 = *v193++;
              v191 = vmlaq_f64(v191, v199, v200);
              v201 = *v194++;
              v190 = vmlaq_f64(v190, v199, v201);
              v202 = *v195++;
              v189 = vmlaq_f64(v189, v199, v202);
              v203 = *v196++;
              v188 = vmlaq_f64(v188, v199, v203);
            }
            v204 = (char *)&a3->f64[v137 * v9];
            v205 = vaddq_f64(v191, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v178, *(float64x2_t *)&v204[8 * v449])));
            v206 = vaddq_f64(v190, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v178, *(float64x2_t *)&v204[8 * v449 + 8 * v9])));
            v207 = vaddq_f64(v189, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v178, *(float64x2_t *)&v204[v184])));
            v208 = *(float64x2_t *)&v204[v185];
            v209 = &a6[v137 * a7];
            v210 = vpaddq_f64(v205, v206);
            v211 = vpaddq_f64(v207, vaddq_f64(v188, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v178, v208))));
            *v209 = _D0 * v210.f64[0];
            v209[a7] = vmuld_lane_f64(_D0, v210, 1);
            v209[2 * a7] = _D0 * v211.f64[0];
            v209[3 * a7] = vmuld_lane_f64(_D0, v211, 1);
            v137 += 4;
            result = v137 | 3;
            v180 = (float64x2_t *)((char *)v180 + v181);
            v182 = (float64x2_t *)((char *)v182 + v181);
            v183 = (float64x2_t *)((char *)v183 + v181);
            v186 = (float64x2_t *)((char *)v186 + v181);
          }
          while ((v137 | 3) < a2);
        }
        if ((v137 | 1) < a2)
        {
          v217 = (char *)a3 + v9 * (8 * v137 + 8);
          v218 = 16 * v9;
          v219 = (float64x2_t *)((char *)a3 + 8 * v137 * v9);
          do
          {
            v220 = 0uLL;
            v221 = 0uLL;
            v222 = a5;
            v223 = v219;
            result = (uint64_t)v217;
            for (n = v187; n > 2; n -= 2)
            {
              v225 = *v222++;
              v226 = v225;
              v227 = *v223++;
              v221 = vmlaq_f64(v221, v226, v227);
              v228 = *(float64x2_t *)result;
              result += 16;
              v220 = vmlaq_f64(v220, v226, v228);
            }
            v229 = &a6[v137 * a7];
            v230 = vpaddq_f64(vaddq_f64(v221, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v177), *(float64x2_t *)((char *)a3 + 8 * v137 * v9 + 8 * v177)))), vaddq_f64(v220, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v177), *(float64x2_t *)((char *)a3 + 8 * v137 * v9 + 8 * v177 + 8 * v9)))));
            *v229 = _D0 * v230.f64[0];
            v229[a7] = vmuld_lane_f64(_D0, v230, 1);
            v137 += 2;
            v217 += v218;
            v219 = (float64x2_t *)((char *)v219 + v218);
          }
          while ((v137 | 1) < a2);
        }
        if (v137 < a2)
        {
          v231 = (float64x2_t *)((char *)a3 + 8 * v137 * v9);
          do
          {
            v232 = 0uLL;
            v233 = a5;
            v234 = v231;
            for (ii = v187; ii > 2; ii -= 2)
            {
              v236 = *v233++;
              v237 = v236;
              v238 = *v234++;
              v232 = vmlaq_f64(v232, v237, v238);
            }
            a6[v137 * a7] = vaddvq_f64(vaddq_f64(v232, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v177), *(float64x2_t *)((char *)a3 + 8 * v137 * v9 + 8 * v177)))))* _D0;
            ++v137;
            v231 = (float64x2_t *)((char *)v231 + 8 * v9);
          }
          while (v137 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v107 = *a5;
        v108 = *(float64x2_t *)((char *)a5 + 8 * result - 16);
        v109 = vmvnq_s8(*(int8x16_t *)((char *)&unk_239F0BC40 + 8 * (4 - result)));
        do
        {
          *a6 = vaddvq_f64(vaddq_f64(vmulq_f64(v108, *(float64x2_t *)((char *)a3 + 8 * result - 16)), (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v107, *a3), v109)))* _D0;
          a6 += a7;
          a3 = (float64x2_t *)((char *)a3 + 8 * v9);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v12 = a5->f64[0];
      do
      {
        *a6 = v12 * a3->f64[0] * _D0;
        a6 += a7;
        a3 = (float64x2_t *)((char *)a3 + 8 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == -1.0)
  {
    if (result > 1)
    {
      v111 = result - 2;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          v112 = *a5;
          do
          {
            *a6 = -(*a6 - _D0 * vaddvq_f64(vmulq_f64(v112, *a3)));
            a6 += a7;
            a3 = (float64x2_t *)((char *)a3 + 8 * v9);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 4)
      {
        v458 = result;
        v242 = *(int8x16_t *)((char *)&unk_239F0BC40 + 8 * (2 - (result & 1)));
        v450 = result - 2;
        v243 = 0;
        if (a2 >= 8)
        {
          v244 = 8 * v9;
          v454 = (float64x2_t *)((char *)a5 + 8 * v111);
          v245 = v111 + 2 * v9;
          v246 = v111 + 4 * v9;
          v247 = v246 + v9;
          v248 = v9 << 6;
          v249 = 8 * v111;
          v250 = 8 * (v111 + v9);
          v251 = 8 * v245;
          v252 = 8 * (v245 + v9);
          v253 = 8 * v246;
          v254 = 8 * v247;
          v255 = 8 * (v111 + 6 * v9);
          v256 = 8 * (7 * v9 + v111);
          v257 = a3;
          do
          {
            v258 = 0uLL;
            v259 = 0uLL;
            v260 = v9;
            v261 = (char *)&a3->f64[v243 * v9];
            v262 = a5;
            v263 = a5;
            v264 = v257;
            v265 = v458;
            v266 = 0uLL;
            v267 = 0uLL;
            v268 = 0uLL;
            v269 = 0uLL;
            v270 = 0uLL;
            v271 = 0uLL;
            do
            {
              v272 = *v263++;
              v258 = vmlaq_f64(v258, v272, *v264);
              v259 = vmlaq_f64(v259, v272, *(float64x2_t *)((char *)v264 + v244));
              v273 = (float64x2_t *)((char *)v264 + v244 + v244);
              v266 = vmlaq_f64(v266, v272, *v273);
              v274 = (float64x2_t *)((char *)v273 + v244);
              v271 = vmlaq_f64(v271, v272, *v274);
              v275 = (float64x2_t *)((char *)v274 + v244);
              v270 = vmlaq_f64(v270, v272, *v275);
              v276 = (float64x2_t *)((char *)v275 + v244);
              v269 = vmlaq_f64(v269, v272, *v276);
              v277 = (float64x2_t *)((char *)v276 + v244);
              v268 = vmlaq_f64(v268, v272, *v277);
              v267 = vmlaq_f64(v267, v272, *(float64x2_t *)((char *)v277 + v244));
              v265 -= 2;
              ++v264;
            }
            while (v265 > 2);
            v278 = &a6[v243 * a7];
            _Q6 = vpaddq_f64(vaddq_f64(v258, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v249]))), vaddq_f64(v259, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v250]))));
            _Q7 = vpaddq_f64(vaddq_f64(v266, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v251]))), vaddq_f64(v271, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v252]))));
            _Q4 = vpaddq_f64(vaddq_f64(v270, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v253]))), vaddq_f64(v269, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v254]))));
            _Q2 = vpaddq_f64(vaddq_f64(v268, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v255]))), vaddq_f64(v267, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v256]))));
            *v278 = vmlad_n_f64(-*v278, _D0, _Q6.f64[0]);
            __asm { FMLA            D3, D0, V6.D[1] }
            v278[a7] = _D3;
            v278[2 * a7] = vmlad_n_f64(-v278[2 * a7], _D0, _Q7.f64[0]);
            __asm { FMLA            D3, D0, V7.D[1] }
            v278[3 * a7] = _D3;
            v278[4 * a7] = vmlad_n_f64(-v278[4 * a7], _D0, _Q4.f64[0]);
            __asm { FMLA            D3, D0, V4.D[1] }
            v278[5 * a7] = _D3;
            v278[6 * a7] = vmlad_n_f64(-v278[6 * a7], _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v278[7 * a7] = _D3;
            v243 += 8;
            result = v243 | 7;
            v257 = (float64x2_t *)((char *)v257 + v248);
            v9 = v260;
            a5 = v262;
          }
          while ((v243 | 7) < a2);
        }
        if ((v243 | 3) >= a2)
        {
          v297 = v458;
          v287 = v450;
        }
        else
        {
          v287 = v450;
          v288 = (float64x2_t *)((char *)a5 + 8 * v450);
          v289 = v450 + 2 * v9;
          v290 = (float64x2_t *)((char *)a3 + v9 * (8 * v243 + 24));
          v291 = 32 * v9;
          v292 = (float64x2_t *)((char *)a3 + v9 * (8 * v243 + 16));
          v293 = (float64x2_t *)((char *)a3 + v9 * (8 * v243 + 8));
          v294 = 8 * v289;
          v295 = 8 * (v289 + v9);
          v296 = (float64x2_t *)((char *)a3 + 8 * v243 * v9);
          v297 = v458;
          do
          {
            v298 = 0uLL;
            v299 = 0uLL;
            v300 = 0uLL;
            v301 = 0uLL;
            v302 = a5;
            v303 = v296;
            v304 = v293;
            v305 = v292;
            v306 = v290;
            for (jj = v458; jj > 2; jj -= 2)
            {
              v308 = *v302++;
              v309 = v308;
              v310 = *v303++;
              v301 = vmlaq_f64(v301, v309, v310);
              v311 = *v304++;
              v300 = vmlaq_f64(v300, v309, v311);
              v312 = *v305++;
              v299 = vmlaq_f64(v299, v309, v312);
              v313 = *v306++;
              v298 = vmlaq_f64(v298, v309, v313);
            }
            v314 = (char *)&a3->f64[v243 * v9];
            v315 = vaddq_f64(v301, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v288, *(float64x2_t *)&v314[8 * v450])));
            v316 = vaddq_f64(v300, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v288, *(float64x2_t *)&v314[8 * v450 + 8 * v9])));
            _Q4 = vaddq_f64(v299, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v288, *(float64x2_t *)&v314[v294])));
            v318 = *(float64x2_t *)&v314[v295];
            v319 = &a6[v243 * a7];
            _Q3 = vpaddq_f64(v315, v316);
            _Q2 = vpaddq_f64(_Q4, vaddq_f64(v298, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v288, v318))));
            *v319 = vmlad_n_f64(-*v319, _D0, _Q3.f64[0]);
            __asm { FMLA            D4, D0, V3.D[1] }
            v319[a7] = _Q4.f64[0];
            v319[2 * a7] = vmlad_n_f64(-v319[2 * a7], _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v319[3 * a7] = _Q3.f64[0];
            v243 += 4;
            result = v243 | 3;
            v290 = (float64x2_t *)((char *)v290 + v291);
            v292 = (float64x2_t *)((char *)v292 + v291);
            v293 = (float64x2_t *)((char *)v293 + v291);
            v296 = (float64x2_t *)((char *)v296 + v291);
          }
          while ((v243 | 3) < a2);
        }
        if ((v243 | 1) < a2)
        {
          v402 = (char *)a3 + v9 * (8 * v243 + 8);
          v403 = 16 * v9;
          v404 = (float64x2_t *)((char *)a3 + 8 * v243 * v9);
          do
          {
            v405 = 0uLL;
            v406 = 0uLL;
            v407 = a5;
            v408 = v404;
            result = (uint64_t)v402;
            for (kk = v297; kk > 2; kk -= 2)
            {
              v410 = *v407++;
              v411 = v410;
              v412 = *v408++;
              v406 = vmlaq_f64(v406, v411, v412);
              v413 = *(float64x2_t *)result;
              result += 16;
              v405 = vmlaq_f64(v405, v411, v413);
            }
            v414 = &a6[v243 * a7];
            _Q2 = vpaddq_f64(vaddq_f64(v406, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v287), *(float64x2_t *)((char *)a3 + 8 * v243 * v9 + 8 * v287)))), vaddq_f64(v405, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v287), *(float64x2_t *)((char *)a3 + 8 * v243 * v9 + 8 * v287 + 8 * v9)))));
            *v414 = vmlad_n_f64(-*v414, _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v414[a7] = _D3;
            v243 += 2;
            v402 += v403;
            v404 = (float64x2_t *)((char *)v404 + v403);
          }
          while ((v243 | 1) < a2);
        }
        if (v243 < a2)
        {
          v417 = (float64x2_t *)((char *)a3 + 8 * v243 * v9);
          do
          {
            v418 = 0uLL;
            v419 = a5;
            v420 = v417;
            for (mm = v297; mm > 2; mm -= 2)
            {
              v422 = *v419++;
              v423 = v422;
              v424 = *v420++;
              v418 = vmlaq_f64(v418, v423, v424);
            }
            a6[v243 * a7] = -(a6[v243 * a7]
                            - _D0
                            * vaddvq_f64(vaddq_f64(v418, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v287), *(float64x2_t *)((char *)a3 + 8 * v243 * v9 + 8 * v287))))));
            ++v243;
            v417 = (float64x2_t *)((char *)v417 + 8 * v9);
          }
          while (v243 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v214 = *a5;
        v215 = *(float64x2_t *)((char *)a5 + 8 * result - 16);
        v216 = vmvnq_s8(*(int8x16_t *)((char *)&unk_239F0BC40 + 8 * (4 - result)));
        do
        {
          *a6 = -(*a6
                - _D0
                * vaddvq_f64(vaddq_f64(vmulq_f64(v215, *(float64x2_t *)((char *)a3 + 8 * result - 16)), (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v214, *a3), v216))));
          a6 += a7;
          a3 = (float64x2_t *)((char *)a3 + 8 * v9);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v18 = a5->f64[0];
      do
      {
        *a6 = -(*a6 - _D0 * (v18 * a3->f64[0]));
        a6 += a7;
        a3 = (float64x2_t *)((char *)a3 + 8 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 1)
  {
    v212 = result - 2;
    if (result == 2)
    {
      if (a2 >= 1)
      {
        v213 = *a5;
        do
        {
          *a6 = *a6 * a9 + _D0 * vaddvq_f64(vmulq_f64(v213, *a3));
          a6 += a7;
          a3 = (float64x2_t *)((char *)a3 + 8 * v9);
          --a2;
        }
        while (a2);
      }
    }
    else if ((unint64_t)result > 4)
    {
      v459 = result;
      v322 = *(int8x16_t *)((char *)&unk_239F0BC40 + 8 * (2 - (result & 1)));
      v323 = 8 * v9;
      v451 = result - 2;
      v324 = 0;
      if (a2 >= 8)
      {
        v455 = (float64x2_t *)((char *)a5 + 8 * v212);
        v325 = v212 + 2 * v9;
        v326 = v212 + 4 * v9;
        v327 = v326 + v9;
        v328 = v9 << 6;
        v329 = 8 * v212;
        v330 = 8 * (v212 + v9);
        v331 = 8 * v325;
        v332 = 8 * (v325 + v9);
        v333 = 8 * v326;
        v334 = 8 * v327;
        v335 = 8 * (v212 + 6 * v9);
        v336 = 8 * (7 * v9 + v212);
        v337 = a3;
        do
        {
          v338 = 0uLL;
          v339 = 0uLL;
          v340 = v9;
          v341 = (char *)&a3->f64[v324 * v9];
          v342 = a5;
          v343 = a5;
          v344 = v337;
          v345 = v459;
          v346 = 0uLL;
          v347 = 0uLL;
          v348 = 0uLL;
          v349 = 0uLL;
          v350 = 0uLL;
          v351 = 0uLL;
          do
          {
            v352 = *v343++;
            v338 = vmlaq_f64(v338, v352, *v344);
            v339 = vmlaq_f64(v339, v352, *(float64x2_t *)((char *)v344 + v323));
            v353 = (float64x2_t *)((char *)v344 + v323 + v323);
            v346 = vmlaq_f64(v346, v352, *v353);
            v354 = (float64x2_t *)((char *)v353 + v323);
            v351 = vmlaq_f64(v351, v352, *v354);
            v355 = (float64x2_t *)((char *)v354 + v323);
            v350 = vmlaq_f64(v350, v352, *v355);
            v356 = (float64x2_t *)((char *)v355 + v323);
            v349 = vmlaq_f64(v349, v352, *v356);
            v357 = (float64x2_t *)((char *)v356 + v323);
            v348 = vmlaq_f64(v348, v352, *v357);
            v347 = vmlaq_f64(v347, v352, *(float64x2_t *)((char *)v357 + v323));
            v345 -= 2;
            ++v344;
          }
          while (v345 > 2);
          v358 = &a6[v324 * a7];
          _Q7 = vpaddq_f64(vaddq_f64(v338, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v329]))), vaddq_f64(v339, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v330]))));
          _Q16 = vpaddq_f64(vaddq_f64(v346, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v331]))), vaddq_f64(v351, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v332]))));
          _Q5 = vpaddq_f64(vaddq_f64(v350, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v333]))), vaddq_f64(v349, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v334]))));
          _Q3 = vpaddq_f64(vaddq_f64(v348, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v335]))), vaddq_f64(v347, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v336]))));
          *v358 = vmlad_n_f64(*v358 * a9, _D0, _Q7.f64[0]);
          __asm { FMLA            D4, D0, V7.D[1] }
          v358[a7] = _D4;
          v358[2 * a7] = vmlad_n_f64(v358[2 * a7] * a9, _D0, _Q16.f64[0]);
          __asm { FMLA            D4, D0, V16.D[1] }
          v358[3 * a7] = _D4;
          v358[4 * a7] = vmlad_n_f64(v358[4 * a7] * a9, _D0, _Q5.f64[0]);
          __asm { FMLA            D4, D0, V5.D[1] }
          v358[5 * a7] = _D4;
          v358[6 * a7] = vmlad_n_f64(v358[6 * a7] * a9, _D0, _Q3.f64[0]);
          __asm { FMLA            D4, D0, V3.D[1] }
          v358[7 * a7] = _D4;
          v324 += 8;
          result = v324 | 7;
          v337 = (float64x2_t *)((char *)v337 + v328);
          v9 = v340;
          a5 = v342;
        }
        while ((v324 | 7) < a2);
      }
      if ((v324 | 3) >= a2)
      {
        v377 = v459;
        v367 = v451;
      }
      else
      {
        v367 = v451;
        v368 = (float64x2_t *)((char *)a5 + 8 * v451);
        v369 = v451 + 2 * v9;
        v370 = (float64x2_t *)((char *)a3 + v9 * (8 * v324 + 24));
        v371 = 32 * v9;
        v372 = (float64x2_t *)((char *)a3 + v9 * (8 * v324 + 16));
        v373 = (float64x2_t *)((char *)a3 + v9 * (8 * v324 + 8));
        v374 = 8 * v369;
        v375 = 8 * (v369 + v9);
        v376 = (float64x2_t *)((char *)a3 + 8 * v324 * v9);
        v377 = v459;
        do
        {
          v378 = 0uLL;
          v379 = 0uLL;
          v380 = 0uLL;
          v381 = 0uLL;
          v382 = a5;
          v383 = v376;
          v384 = v373;
          v385 = v372;
          v386 = v370;
          for (nn = v459; nn > 2; nn -= 2)
          {
            v388 = *v382++;
            v389 = v388;
            v390 = *v383++;
            v381 = vmlaq_f64(v381, v389, v390);
            v391 = *v384++;
            v380 = vmlaq_f64(v380, v389, v391);
            v392 = *v385++;
            v379 = vmlaq_f64(v379, v389, v392);
            v393 = *v386++;
            v378 = vmlaq_f64(v378, v389, v393);
          }
          v394 = (char *)&a3->f64[v324 * v9];
          v395 = vaddq_f64(v381, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v368, *(float64x2_t *)&v394[8 * v451])));
          v396 = vaddq_f64(v380, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v368, *(float64x2_t *)&v394[8 * v451 + 8 * v9])));
          result = v324 * a7;
          _Q5 = vaddq_f64(v379, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v368, *(float64x2_t *)&v394[v374])));
          v398 = *(float64x2_t *)&v394[v375];
          v399 = &a6[v324 * a7];
          _Q4 = vpaddq_f64(v395, v396);
          _Q3 = vpaddq_f64(_Q5, vaddq_f64(v378, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v368, v398))));
          *v399 = vmlad_n_f64(*v399 * a9, _D0, _Q4.f64[0]);
          __asm { FMLA            D5, D0, V4.D[1] }
          v399[a7] = _Q5.f64[0];
          v399[2 * a7] = vmlad_n_f64(v399[2 * a7] * a9, _D0, _Q3.f64[0]);
          __asm { FMLA            D4, D0, V3.D[1] }
          v399[3 * a7] = _Q4.f64[0];
          v324 += 4;
          v370 = (float64x2_t *)((char *)v370 + v371);
          v372 = (float64x2_t *)((char *)v372 + v371);
          v373 = (float64x2_t *)((char *)v373 + v371);
          v376 = (float64x2_t *)((char *)v376 + v371);
        }
        while ((v324 | 3) < a2);
      }
      if ((v324 | 1) < a2)
      {
        v425 = (char *)a3 + v9 * (8 * v324 + 8);
        v426 = 16 * v9;
        v427 = (float64x2_t *)((char *)a3 + 8 * v324 * v9);
        do
        {
          v428 = 0uLL;
          v429 = 0uLL;
          v430 = a5;
          v431 = v427;
          result = (uint64_t)v425;
          for (i1 = v377; i1 > 2; i1 -= 2)
          {
            v433 = *v430++;
            v434 = v433;
            v435 = *v431++;
            v429 = vmlaq_f64(v429, v434, v435);
            v436 = *(float64x2_t *)result;
            result += 16;
            v428 = vmlaq_f64(v428, v434, v436);
          }
          v437 = &a6[v324 * a7];
          _Q3 = vpaddq_f64(vaddq_f64(v429, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v367), *(float64x2_t *)((char *)a3 + 8 * v324 * v9 + 8 * v367)))), vaddq_f64(v428, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v367), *(float64x2_t *)((char *)a3 + 8 * v324 * v9 + 8 * v367 + 8 * v9)))));
          *v437 = vmlad_n_f64(*v437 * a9, _D0, _Q3.f64[0]);
          __asm { FMLA            D4, D0, V3.D[1] }
          v437[a7] = _D4;
          v324 += 2;
          v425 += v426;
          v427 = (float64x2_t *)((char *)v427 + v426);
        }
        while ((v324 | 1) < a2);
      }
      if (v324 < a2)
      {
        v440 = (float64x2_t *)((char *)a3 + 8 * v324 * v9);
        do
        {
          v441 = 0uLL;
          v442 = a5;
          v443 = v440;
          for (i2 = v377; i2 > 2; i2 -= 2)
          {
            v445 = *v442++;
            v446 = v445;
            v447 = *v443++;
            v441 = vmlaq_f64(v441, v446, v447);
          }
          a6[v324 * a7] = a6[v324 * a7] * a9
                        + _D0
                        * vaddvq_f64(vaddq_f64(v441, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v367), *(float64x2_t *)((char *)a3 + 8 * v324 * v9 + 8 * v367)))));
          ++v324;
          v440 = (float64x2_t *)((char *)v440 + v323);
        }
        while (v324 != a2);
      }
    }
    else if (a2 >= 1)
    {
      v239 = *a5;
      v240 = *(float64x2_t *)((char *)a5 + 8 * result - 16);
      v241 = vmvnq_s8(*(int8x16_t *)((char *)&unk_239F0BC40 + 8 * (4 - result)));
      do
      {
        *a6 = *a6 * a9
            + _D0
            * vaddvq_f64(vaddq_f64(vmulq_f64(v240, *(float64x2_t *)((char *)a3 + 8 * result - 16)), (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v239, *a3), v241)));
        a6 += a7;
        a3 = (float64x2_t *)((char *)a3 + 8 * v9);
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v110 = a5->f64[0];
    do
    {
      *a6 = *a6 * a9 + _D0 * (v110 * a3->f64[0]);
      a6 += a7;
      a3 = (float64x2_t *)((char *)a3 + 8 * a4);
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t sub_239A3ACC0(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, float *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, float a9)
{
  int64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float *v13;
  float32x4_t *v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x4_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0uLL;
    v12 = 2;
    v13 = a5;
    v10 = 0uLL;
    v14 = a3;
    do
    {
      v10 = vmlaq_n_f32(v10, *v14, *v13);
      v11 = vmlaq_n_f32(v11, *(float32x4_t *)((char *)v14 + 4 * a4), v13[a6]);
      v12 += 2;
      v14 = (float32x4_t *)((char *)v14 + 8 * a4);
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  if (v9 < a2)
    v10 = vmlaq_n_f32(v10, *(float32x4_t *)((char *)a3 + 4 * v9 * a4), a5[v9 * a6]);
  v15 = vmulq_n_f32(vaddq_f32(v11, v10), a9);
  if (result == 4 && a8 == 1)
  {
    *a7 = vaddq_f32(v15, *a7);
  }
  else
  {
    v16 = (result + 4) & (result >> 63);
    v17 = 4;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = &a7->f32[v16 * a8];
      do
      {
        v19 = v15;
        *v18 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v16++ & 3))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

float32x4_t sub_239A3ADD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, uint64_t a7, float32x4_t result)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t *v21;
  const float *v22;
  uint64_t v23;
  const float *v24;
  float32x4_t v25;
  float v26;
  float32x4_t *v27;
  float v28;
  float32x4_t *v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  const float *v40;
  uint64_t v41;
  const float *v42;
  float32x4_t v43;
  float v44;
  float32x4_t *v45;
  float v46;
  float32x4_t *v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t *v50;
  int64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float *v56;

  v8 = a3 & 0xFFFFFFFFFFFFFFF0;
  v9 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 2;
  if (v9 + 12 >= a1)
  {
    v31 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 2;
  }
  else
  {
    v11 = 4 * a4;
    do
    {
      if (a2 >= 2)
      {
        v20 = 0uLL;
        v21 = (float32x4_t *)v8;
        v19 = 0uLL;
        v22 = a5;
        v23 = 2;
        v18 = 0uLL;
        v17 = 0uLL;
        v16 = 0uLL;
        v15 = 0uLL;
        v14 = 0uLL;
        v24 = a5;
        v13 = 0uLL;
        do
        {
          v25 = vld1q_dup_f32(v24);
          v10 = 8 * a6;
          v24 = (const float *)((char *)v24 + v10);
          v13 = vmlaq_f32(v13, v25, *v21);
          v15 = vmlaq_f32(v15, v25, v21[1]);
          v17 = vmlaq_f32(v17, v25, v21[2]);
          v19 = vmlaq_f32(v19, v25, v21[3]);
          v26 = v22[a6];
          v14 = vmlaq_n_f32(v14, *(float32x4_t *)((char *)v21 + 4 * a4), v26);
          v16 = vmlaq_n_f32(v16, *(float32x4_t *)((char *)v21 + v11 + 16), v26);
          v18 = vmlaq_n_f32(v18, *(float32x4_t *)((char *)v21 + v11 + 32), v26);
          v20 = vmlaq_n_f32(v20, *(float32x4_t *)((char *)v21 + v11 + 48), v26);
          v23 += 2;
          v21 = (float32x4_t *)((char *)v21 + 8 * a4);
          v22 = v24;
        }
        while (v23 <= a2);
        v12 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v12 = 0;
        v13 = 0uLL;
        v14 = 0uLL;
        v15 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
      }
      if (v12 < a2)
      {
        v27 = (float32x4_t *)(v8 + 4 * v12 * a4);
        v28 = a5[v12 * a6];
        v13 = vmlaq_n_f32(v13, *v27, v28);
        v15 = vmlaq_n_f32(v15, v27[1], v28);
        v17 = vmlaq_n_f32(v17, v27[2], v28);
        v19 = vmlaq_n_f32(v19, v27[3], v28);
      }
      v29 = (float32x4_t *)(a7 + 4 * v9);
      v30 = vaddq_f32(vaddq_f32(v16, v15), v29[1]);
      *v29 = vaddq_f32(vaddq_f32(v14, v13), *v29);
      v29[1] = v30;
      result = vaddq_f32(vaddq_f32(v20, v19), v29[3]);
      v29[2] = vaddq_f32(vaddq_f32(v18, v17), v29[2]);
      v29[3] = result;
      v8 += 64;
      v31 = v9 + 16;
      v32 = v9 + 28;
      v9 += 16;
    }
    while (v32 < a1);
  }
  if (v31 + 4 >= a1)
  {
    v48 = v31;
  }
  else
  {
    do
    {
      if (a2 >= 2)
      {
        v38 = 0uLL;
        v39 = (float32x4_t *)v8;
        v40 = a5;
        v41 = 2;
        v37 = 0uLL;
        v36 = 0uLL;
        v35 = 0uLL;
        v42 = a5;
        do
        {
          v43 = vld1q_dup_f32(v42);
          v33 = 8 * a6;
          v42 = (const float *)((char *)v42 + v33);
          v35 = vmlaq_f32(v35, v43, *v39);
          v37 = vmlaq_f32(v37, v43, v39[1]);
          v44 = v40[a6];
          v36 = vmlaq_n_f32(v36, *(float32x4_t *)((char *)v39 + 4 * a4), v44);
          v38 = vmlaq_n_f32(v38, *(float32x4_t *)((char *)v39 + 4 * a4 + 16), v44);
          v41 += 2;
          v39 = (float32x4_t *)((char *)v39 + 8 * a4);
          v40 = v42;
        }
        while (v41 <= a2);
        v34 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v34 = 0;
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
      }
      if (v34 < a2)
      {
        v45 = (float32x4_t *)(v8 + 4 * v34 * a4);
        v46 = a5[v34 * a6];
        v35 = vmlaq_n_f32(v35, *v45, v46);
        v37 = vmlaq_n_f32(v37, v45[1], v46);
      }
      v47 = (float32x4_t *)(a7 + 4 * v31);
      result = vaddq_f32(vaddq_f32(v38, v37), v47[1]);
      *v47 = vaddq_f32(vaddq_f32(v36, v35), *v47);
      v47[1] = result;
      v8 += 32;
      v48 = v31 + 8;
      v49 = v31 + 12;
      v31 += 8;
    }
    while (v49 < a1);
  }
  if (v48 < a1)
  {
    v50 = (float32x4_t *)(a7 + 4 * v48);
    if (a2 >= 2)
    {
      v53 = 0uLL;
      v54 = 2;
      v55 = (float32x4_t *)v8;
      v52 = 0uLL;
      v56 = a5;
      do
      {
        v52 = vmlaq_n_f32(v52, *v55, *v56);
        v53 = vmlaq_n_f32(v53, *(float32x4_t *)((char *)v55 + 4 * a4), v56[a6]);
        v54 += 2;
        v56 += 2 * a6;
        v55 = (float32x4_t *)((char *)v55 + 8 * a4);
      }
      while (v54 <= a2);
      v51 = a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v51 = 0;
      v52 = 0uLL;
      v53 = 0uLL;
    }
    if (v51 < a2)
      v52 = vmlaq_n_f32(v52, *(float32x4_t *)(v8 + 4 * v51 * a4), a5[v51 * a6]);
    result = vaddq_f32(vaddq_f32(v53, v52), *v50);
    *v50 = result;
  }
  return result;
}

uint64_t sub_239A3B0D8(uint64_t result, uint64_t a2, float32x2_t *a3, uint64_t a4, float *a5, uint64_t a6, float32x2_t *a7, uint64_t a8, float a9)
{
  int64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  float *v13;
  float32x2_t *v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x2_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0;
    v12 = 2;
    v13 = a5;
    v10 = 0;
    v14 = a3;
    do
    {
      v10 = vmla_n_f32(v10, *v14, *v13);
      v11 = vmla_n_f32(v11, *(float32x2_t *)((char *)v14 + 4 * a4), v13[a6]);
      v12 += 2;
      v14 += a4;
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  if (v9 < a2)
    v10 = vmla_n_f32(v10, *(float32x2_t *)((char *)a3 + 4 * v9 * a4), a5[v9 * a6]);
  v15 = vmul_n_f32(vadd_f32(v11, v10), a9);
  if (result == 2 && a8 == 1)
  {
    *a7 = vadd_f32(v15, *a7);
  }
  else
  {
    v16 = (result + 2) & (result >> 63);
    v17 = 2;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = (float *)a7 + v16 * a8;
      do
      {
        v19 = v15;
        *v18 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v16++ & 1))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

uint64_t sub_239A3B1E8(uint64_t result, uint64_t a2, float64x2_t *a3, uint64_t a4, double *a5, uint64_t a6, float64x2_t *a7, uint64_t a8, double a9)
{
  int64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  double *v13;
  float64x2_t *v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  float64x2_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0uLL;
    v12 = 2;
    v13 = a5;
    v10 = 0uLL;
    v14 = a3;
    do
    {
      v10 = vmlaq_n_f64(v10, *v14, *v13);
      v11 = vmlaq_n_f64(v11, *(float64x2_t *)((char *)v14 + 8 * a4), v13[a6]);
      v12 += 2;
      v14 += a4;
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  if (v9 < a2)
    v10 = vmlaq_n_f64(v10, *(float64x2_t *)((char *)a3 + 8 * v9 * a4), a5[v9 * a6]);
  v15 = vmulq_n_f64(vaddq_f64(v11, v10), a9);
  if (result == 2 && a8 == 1)
  {
    *a7 = vaddq_f64(v15, *a7);
  }
  else
  {
    v16 = (result + 2) & (result >> 63);
    v17 = 2;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = &a7->f64[v16 * a8];
      do
      {
        v19 = v15;
        *v18 = *(double *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF7 | (8 * (v16++ & 1))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

float64x2_t sub_239A3B2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, uint64_t a6, uint64_t a7, float64x2_t result)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  const double *v22;
  uint64_t v23;
  const double *v24;
  float64x2_t v25;
  double v26;
  float64x2_t *v27;
  double v28;
  float64x2_t *v29;
  float64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t *v39;
  const double *v40;
  uint64_t v41;
  const double *v42;
  float64x2_t v43;
  double v44;
  float64x2_t *v45;
  double v46;
  float64x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t *v50;
  int64_t v51;
  float64x2_t v52;
  float64x2_t v53;
  uint64_t v54;
  float64x2_t *v55;
  double *v56;

  v8 = a3 & 0xFFFFFFFFFFFFFFF0;
  v9 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 3;
  if (v9 + 6 >= a1)
  {
    v31 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 3;
  }
  else
  {
    v11 = 8 * a4;
    do
    {
      if (a2 >= 2)
      {
        v20 = 0uLL;
        v21 = (float64x2_t *)v8;
        v19 = 0uLL;
        v22 = a5;
        v23 = 2;
        v18 = 0uLL;
        v17 = 0uLL;
        v16 = 0uLL;
        v15 = 0uLL;
        v14 = 0uLL;
        v24 = a5;
        v13 = 0uLL;
        do
        {
          v25 = vld1q_dup_f64(v24);
          v10 = 16 * a6;
          v24 = (const double *)((char *)v24 + v10);
          v13 = vmlaq_f64(v13, v25, *v21);
          v15 = vmlaq_f64(v15, v25, v21[1]);
          v17 = vmlaq_f64(v17, v25, v21[2]);
          v19 = vmlaq_f64(v19, v25, v21[3]);
          v26 = v22[a6];
          v14 = vmlaq_n_f64(v14, *(float64x2_t *)((char *)v21 + 8 * a4), v26);
          v16 = vmlaq_n_f64(v16, *(float64x2_t *)((char *)v21 + v11 + 16), v26);
          v18 = vmlaq_n_f64(v18, *(float64x2_t *)((char *)v21 + v11 + 32), v26);
          v20 = vmlaq_n_f64(v20, *(float64x2_t *)((char *)v21 + v11 + 48), v26);
          v23 += 2;
          v21 += a4;
          v22 = v24;
        }
        while (v23 <= a2);
        v12 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v12 = 0;
        v13 = 0uLL;
        v14 = 0uLL;
        v15 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
      }
      if (v12 < a2)
      {
        v27 = (float64x2_t *)(v8 + 8 * v12 * a4);
        v28 = a5[v12 * a6];
        v13 = vmlaq_n_f64(v13, *v27, v28);
        v15 = vmlaq_n_f64(v15, v27[1], v28);
        v17 = vmlaq_n_f64(v17, v27[2], v28);
        v19 = vmlaq_n_f64(v19, v27[3], v28);
      }
      v29 = (float64x2_t *)(a7 + 8 * v9);
      v30 = vaddq_f64(vaddq_f64(v16, v15), v29[1]);
      *v29 = vaddq_f64(vaddq_f64(v14, v13), *v29);
      v29[1] = v30;
      result = vaddq_f64(vaddq_f64(v20, v19), v29[3]);
      v29[2] = vaddq_f64(vaddq_f64(v18, v17), v29[2]);
      v29[3] = result;
      v8 += 64;
      v31 = v9 + 8;
      v32 = v9 + 14;
      v9 += 8;
    }
    while (v32 < a1);
  }
  if (v31 + 2 >= a1)
  {
    v48 = v31;
  }
  else
  {
    do
    {
      if (a2 >= 2)
      {
        v38 = 0uLL;
        v39 = (float64x2_t *)v8;
        v40 = a5;
        v41 = 2;
        v37 = 0uLL;
        v36 = 0uLL;
        v35 = 0uLL;
        v42 = a5;
        do
        {
          v43 = vld1q_dup_f64(v42);
          v33 = 16 * a6;
          v42 = (const double *)((char *)v42 + v33);
          v35 = vmlaq_f64(v35, v43, *v39);
          v37 = vmlaq_f64(v37, v43, v39[1]);
          v44 = v40[a6];
          v36 = vmlaq_n_f64(v36, *(float64x2_t *)((char *)v39 + 8 * a4), v44);
          v38 = vmlaq_n_f64(v38, *(float64x2_t *)((char *)v39 + 8 * a4 + 16), v44);
          v41 += 2;
          v39 += a4;
          v40 = v42;
        }
        while (v41 <= a2);
        v34 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v34 = 0;
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
      }
      if (v34 < a2)
      {
        v45 = (float64x2_t *)(v8 + 8 * v34 * a4);
        v46 = a5[v34 * a6];
        v35 = vmlaq_n_f64(v35, *v45, v46);
        v37 = vmlaq_n_f64(v37, v45[1], v46);
      }
      v47 = (float64x2_t *)(a7 + 8 * v31);
      result = vaddq_f64(vaddq_f64(v38, v37), v47[1]);
      *v47 = vaddq_f64(vaddq_f64(v36, v35), *v47);
      v47[1] = result;
      v8 += 32;
      v48 = v31 + 4;
      v49 = v31 + 6;
      v31 += 4;
    }
    while (v49 < a1);
  }
  if (v48 < a1)
  {
    v50 = (float64x2_t *)(a7 + 8 * v48);
    if (a2 >= 2)
    {
      v53 = 0uLL;
      v54 = 2;
      v55 = (float64x2_t *)v8;
      v52 = 0uLL;
      v56 = a5;
      do
      {
        v52 = vmlaq_n_f64(v52, *v55, *v56);
        v53 = vmlaq_n_f64(v53, *(float64x2_t *)((char *)v55 + 8 * a4), v56[a6]);
        v54 += 2;
        v56 += 2 * a6;
        v55 += a4;
      }
      while (v54 <= a2);
      v51 = a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v51 = 0;
      v52 = 0uLL;
      v53 = 0uLL;
    }
    if (v51 < a2)
      v52 = vmlaq_n_f64(v52, *(float64x2_t *)(v8 + 8 * v51 * a4), a5[v51 * a6]);
    result = vaddq_f64(vaddq_f64(v53, v52), *v50);
    *v50 = result;
  }
  return result;
}

_OWORD *sub_239A3B600(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD *result;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  _OWORD *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;

  v8 = a3;
  v9 = 8 * a4;
  v11 = *(float64x2_t *)a1;
  v12 = *((float64x2_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float64x2_t *)v10;
  v15 = *((float64x2_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    v18 = *a3;
    v19 = a3[1];
    v20 = a3[2];
    v21 = a3[3];
    v17 = (float64x2_t *)((char *)a3 + v9);
    v23 = *v17;
    v24 = v17[1];
    v25 = v17[2];
    v26 = v17[3];
    v22 = (float64x2_t *)((char *)v17 + v9);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v22[3];
    v27 = (float64x2_t *)((char *)v22 + v9);
    v33 = *a2;
    v34 = a2[1];
    v32 = a2 + 2;
    v35 = vmulq_n_f64(v18, a7);
    v36 = vmulq_n_f64(v19, a7);
    v37 = vmulq_n_f64(v20, a7);
    v38 = vmulq_n_f64(v21, a7);
    v39 = vmulq_n_f64(v23, a7);
    v40 = vmulq_n_f64(v24, a7);
    v41 = vmulq_n_f64(v25, a7);
    v42 = vmulq_n_f64(v26, a7);
    v43 = vmulq_n_f64(v28, a7);
    v44 = vmulq_n_f64(v29, a7);
    v45 = vmulq_n_f64(v30, a7);
    v46 = vmulq_n_f64(v31, a7);
    v47 = vmulq_n_f64(*v27, a7);
    v48 = vmulq_n_f64(v27[1], a7);
    v49 = vmulq_n_f64(v27[2], a7);
    v50 = vmulq_n_f64(v27[3], a7);
    do
    {
      v35 = vmlaq_n_f64(v35, v11, v33.f64[0]);
      v39 = vmlaq_laneq_f64(v39, v11, v33, 1);
      v43 = vmlaq_n_f64(v43, v11, v34.f64[0]);
      v47 = vmlaq_laneq_f64(v47, v11, v34, 1);
      v36 = vmlaq_n_f64(v36, v12, v33.f64[0]);
      v40 = vmlaq_laneq_f64(v40, v12, v33, 1);
      v44 = vmlaq_n_f64(v44, v12, v34.f64[0]);
      v48 = vmlaq_laneq_f64(v48, v12, v34, 1);
      v11 = *(float64x2_t *)result;
      v12 = *((float64x2_t *)result + 1);
      v51 = result + 2;
      v37 = vmlaq_n_f64(v37, v14, v33.f64[0]);
      v41 = vmlaq_laneq_f64(v41, v14, v33, 1);
      v45 = vmlaq_n_f64(v45, v14, v34.f64[0]);
      v49 = vmlaq_laneq_f64(v49, v14, v34, 1);
      v38 = vmlaq_n_f64(v38, v15, v33.f64[0]);
      v42 = vmlaq_laneq_f64(v42, v15, v33, 1);
      v46 = vmlaq_n_f64(v46, v15, v34.f64[0]);
      v50 = vmlaq_laneq_f64(v50, v15, v34, 1);
      v14 = *(float64x2_t *)v51;
      v15 = *((float64x2_t *)v51 + 1);
      result = v51 + 2;
      v33 = *v32;
      v34 = v32[1];
      v32 += 2;
      --v16;
    }
    while (v16);
    v52 = (float64x2_t *)((char *)v8 + v9);
    *v8 = v35;
    v8[1] = v36;
    v8[2] = v37;
    v8[3] = v38;
    v8 += 4;
    *v52 = v39;
    v52[1] = v40;
    v52[2] = v41;
    v52[3] = v42;
    v53 = (float64x2_t *)((char *)v52 + v9);
    *v53 = v43;
    v53[1] = v44;
    v53[2] = v45;
    v53[3] = v46;
    v54 = (float64x2_t *)((char *)v53 + v9);
    *v54 = v47;
    v54[1] = v48;
    v54[2] = v49;
    v54[3] = v50;
    a3 = v8;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_239A3B720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t i;
  float32x4_t *v25;
  uint64_t v26;
  uint64_t v27;
  float32x2_t *v28;
  __int32 *v29;
  float32x2_t *v30;
  __int32 *v31;
  float32x2_t *v32;
  int32x2_t *v33;
  float32x2_t *v34;
  int32x2_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t *v51;
  __n128 *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;
  uint64_t v56;
  __int32 *v57;
  __int32 *v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x2_t *v67;
  float32x4_t *v68;
  float32x2_t v69;
  float32x4_t *v70;
  __int32 *v71;
  float32x4_t v72;
  __int32 *v73;
  float32x2_t *v74;
  float32x2_t *v75;
  uint64_t result;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  __int32 *v81;
  float *v82;
  __int32 *v83;
  float32x2_t v84;
  float32x2_t v85;
  float v86;
  float v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t *v93;
  uint64_t v94;
  float32x2_t *v95;
  float32x2_t *v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t *v102;
  float32x2_t v103;
  float32x2_t *v104;
  float32x2_t *v105;
  uint64_t v106;
  uint64_t v107;
  float32x2_t *v108;
  __int32 *v109;
  __int32 *v110;
  float32x2_t v111;
  float v112;
  float32x2_t v113;
  uint64_t v114;
  unint64_t *v115;
  float32x2_t v116;
  float v117;

  a7.i64[1] = a8.i64[0];
  v20 = 0;
  v21 = 4 * a4;
  v22 = 4 * a6;
  v23 = a1 <= 3;
  for (i = a1 - 3; !v23; v20 += 4)
  {
    v25 = a5;
    a5 = (float32x4_t *)((char *)a5 + 4 * v22);
    if (v20)
    {
      v26 = 0;
      do
      {
        v27 = a2;
        v28 = (float32x2_t *)(a3 + v20 * v21);
        v29 = (__int32 *)(a3 + v26 * v21);
        v30 = (float32x2_t *)((char *)v28 + v21);
        v31 = &v29[(unint64_t)v21 / 4];
        v32 = (float32x2_t *)((char *)v28 + v21 + v21);
        v33 = (int32x2_t *)&v29[(unint64_t)v21 / 4 + (unint64_t)v21 / 4];
        v34 = (float32x2_t *)((char *)v32 + v21);
        v35 = (int32x2_t *)((char *)v33 + v21);
        v36 = (float32x4_t)veorq_s8(a8, a8);
        v37 = v36;
        v38 = v36;
        v39 = v36;
        if ((a2 & 1) == 0)
          goto LABEL_7;
        v16.i32[0] = *v29++;
        v17.i32[0] = *v31++;
        v18.i32[0] = v33->i32[0];
        v33 = (int32x2_t *)((char *)v33 + 4);
        v19.i32[0] = v35->i32[0];
        v35 = (int32x2_t *)((char *)v35 + 4);
        v40 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v41 = v30->f32[0];
        v30 = (float32x2_t *)((char *)v30 + 4);
        v42 = v32->f32[0];
        v32 = (float32x2_t *)((char *)v32 + 4);
        v43 = v34->f32[0];
        v34 = (float32x2_t *)((char *)v34 + 4);
        *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
        v19 = vtrn1_s32(v18, v19);
        *(int32x2_t *)&v16.u32[2] = v19;
        v36 = vmlaq_n_f32(v36, v16, v40);
        v37 = vmlaq_n_f32(v37, v16, v41);
        v38 = vmlaq_n_f32(v38, v16, v42);
        v39 = vmlaq_n_f32(v39, v16, v43);
        v27 = a2 - 1;
        if (a2 > 1)
        {
LABEL_7:
          do
          {
            v16.i64[0] = *(_QWORD *)v29;
            v29 += 2;
            v17.i64[0] = *(_QWORD *)v31;
            v31 += 2;
            v18 = *v33++;
            v19 = *v35++;
            v44 = *v28++;
            v45 = *v30++;
            v14 = *v32++;
            v15 = *v34++;
            *(int32x2_t *)&v16.u32[2] = v18;
            v17.u64[1] = (unint64_t)v19;
            v46 = (float32x4_t)vtrn1q_s32((int32x4_t)v16, v17);
            v47 = (float32x4_t)vtrn2q_s32((int32x4_t)v16, v17);
            v36 = vmlaq_lane_f32(vmlaq_n_f32(v36, v46, v44.f32[0]), v47, v44, 1);
            v37 = vmlaq_lane_f32(vmlaq_n_f32(v37, v46, v45.f32[0]), v47, v45, 1);
            v38 = vmlaq_lane_f32(vmlaq_n_f32(v38, v46, v14.f32[0]), v47, v14, 1);
            v39 = vmlaq_lane_f32(vmlaq_n_f32(v39, v46, v15.f32[0]), v47, v15, 1);
            v23 = v27 <= 2;
            v27 -= 2;
          }
          while (!v23);
        }
        a12 = *v25;
        v48 = (float32x4_t *)((char *)v25 + v22);
        v50 = *v48;
        v49 = (float32x4_t *)((char *)v48 + v22);
        v12 = *v49;
        v51 = (float32x4_t *)((char *)v49 + v22);
        v13 = *v51;
        v52 = (__n128 *)((char *)v51 + v22 + -4 * v22);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v36, a7.f32[0]), a12, a7, 2);
        *v52 = (__n128)a8;
        v53 = (float32x4_t *)((char *)v52 + v22);
        *v53 = vmlaq_laneq_f32(vmulq_n_f32(v37, a7.f32[0]), v50, a7, 2);
        v54 = (float32x4_t *)((char *)v53 + v22);
        *v54 = vmlaq_laneq_f32(vmulq_n_f32(v38, a7.f32[0]), v12, a7, 2);
        v55 = (float32x4_t *)((char *)v54 + v22);
        *v55 = vmlaq_laneq_f32(vmulq_n_f32(v39, a7.f32[0]), v13, a7, 2);
        v25 = (float32x4_t *)((char *)v55 + v22 + -4 * v22 + 16);
        v26 += 4;
      }
      while (v26 < v20);
    }
    v56 = a2;
    v57 = (__int32 *)(a3 + v20 * v21);
    v58 = &v57[(unint64_t)v21 / 4];
    v59 = (float32x2_t *)&v57[(unint64_t)v21 / 4 + (unint64_t)v21 / 4];
    v60 = (float32x2_t *)((char *)v59 + v21);
    a8 = veorq_s8(a8, a8);
    v61 = *(float32x2_t *)a8.i8;
    v62 = (float32x4_t)a8;
    v63 = (float32x4_t)a8;
    if ((a2 & 1) == 0)
      goto LABEL_12;
    v12.i32[0] = *v57++;
    v13.i32[0] = *v58++;
    v14.i32[0] = v59->i32[0];
    v59 = (float32x2_t *)((char *)v59 + 4);
    v15.i32[0] = v60->i32[0];
    v60 = (float32x2_t *)((char *)v60 + 4);
    *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v12.f32, *(int32x2_t *)v13.f32);
    v19 = vtrn1_s32((int32x2_t)v14, (int32x2_t)v15);
    *(int32x2_t *)&v16.u32[2] = v19;
    *(float32x2_t *)a8.i8 = vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)v16.f32, v12.f32[0]);
    v61 = vmla_n_f32(v61, *(float32x2_t *)v16.f32, v13.f32[0]);
    v62 = vmlaq_n_f32(v62, v16, v14.f32[0]);
    v63 = vmlaq_n_f32(v63, v16, v15.f32[0]);
    v56 = a2 - 1;
    if (a2 > 1)
    {
LABEL_12:
      do
      {
        v64.i64[0] = *(_QWORD *)v57;
        v57 += 2;
        v65.i64[0] = *(_QWORD *)v58;
        v58 += 2;
        v14 = *v59++;
        v15 = *v60++;
        v64.u64[1] = (unint64_t)v14;
        v65.u64[1] = (unint64_t)v15;
        a12 = (float32x4_t)vtrn1q_s32(v64, v65);
        v66 = (float32x4_t)vtrn2q_s32(v64, v65);
        *(float32x2_t *)a8.i8 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, *(float *)v64.i32), *(float32x2_t *)v66.f32, *(float32x2_t *)v64.i8, 1);
        v61 = vmla_lane_f32(vmla_n_f32(v61, *(float32x2_t *)a12.f32, *(float *)v65.i32), *(float32x2_t *)v66.f32, *(float32x2_t *)v65.i8, 1);
        v62 = vmlaq_lane_f32(vmlaq_n_f32(v62, a12, v14.f32[0]), v66, v14, 1);
        v63 = vmlaq_lane_f32(vmlaq_n_f32(v63, a12, v15.f32[0]), v66, v15, 1);
        v23 = v56 <= 2;
        v56 -= 2;
      }
      while (!v23);
    }
    a12.i32[0] = v25->i32[0];
    v67 = (float32x2_t *)((char *)v25 + v22);
    v69 = *v67;
    v68 = (float32x4_t *)((char *)v67 + v22);
    v12 = *v68;
    v70 = (float32x4_t *)((char *)v68 + v22);
    v13 = *v70;
    v71 = (__int32 *)((char *)v70 + v22 + -4 * v22);
    *(float *)a8.i32 = *(float *)a8.i32 * a7.f32[0];
    *(float32x2_t *)a8.i8 = vmla_laneq_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a7, 2);
    v72 = vmlaq_laneq_f32(vmulq_n_f32(v62, a7.f32[0]), v12, a7, 2);
    v73 = &v71[(unint64_t)v22 / 2];
    *v71 = a8.i32[0];
    v74 = (float32x2_t *)&v71[(unint64_t)v22 / 4];
    *v74 = vmla_laneq_f32(vmul_n_f32(v61, a7.f32[0]), v69, a7, 2);
    v75 = (float32x2_t *)((char *)v74 + v22);
    *v75 = *(float32x2_t *)v72.f32;
    v73[2] = v72.i32[2];
    *(float32x4_t *)&v75->f32[(unint64_t)v22 / 4] = vmlaq_laneq_f32(vmulq_n_f32(v63, a7.f32[0]), v13, a7, 2);
    v23 = i <= 4;
    i -= 4;
  }
  v23 = i <= -3;
  result = i + 3;
  if (!v23)
  {
    if (result >= 2)
    {
      v77 = (unint64_t *)a5;
      a5 = (float32x4_t *)((char *)a5 + 2 * v22);
      if (v20)
      {
        v78 = 0;
        do
        {
          v79 = a2;
          v80 = (float *)(a3 + v20 * v21);
          v81 = (__int32 *)(a3 + v78 * v21);
          v82 = &v80[(unint64_t)v21 / 4];
          v83 = &v81[(unint64_t)v21 / 4];
          v84 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v85 = v84;
          if ((a2 & 1) == 0)
            goto LABEL_22;
          v16.i32[0] = *v81++;
          v17.i32[0] = *v83++;
          v86 = *v80++;
          v87 = *v82++;
          *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
          v84 = vmla_n_f32(v84, *(float32x2_t *)v16.f32, v86);
          v85 = vmla_n_f32(v85, *(float32x2_t *)v16.f32, v87);
          v79 = a2 - 1;
          if (a2 > 1)
          {
LABEL_22:
            do
            {
              v16.i64[0] = *(_QWORD *)v81;
              v81 += 2;
              v17.i64[0] = *(_QWORD *)v83;
              v83 += 2;
              v12.i64[0] = *(_QWORD *)v80;
              v80 += 2;
              v13.i64[0] = *(_QWORD *)v82;
              v82 += 2;
              v88 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
              v89 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
              v84 = vmla_lane_f32(vmla_n_f32(v84, v88, v12.f32[0]), v89, *(float32x2_t *)v12.f32, 1);
              v85 = vmla_lane_f32(vmla_n_f32(v85, v88, v13.f32[0]), v89, *(float32x2_t *)v13.f32, 1);
              v23 = v79 <= 2;
              v79 -= 2;
            }
            while (!v23);
          }
          a12.i64[0] = *v77;
          v90 = (float32x2_t *)((char *)v77 + v22);
          v91 = *v90;
          v92 = (float32x2_t *)((char *)v90 + v22 + -2 * v22);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v84, a7.f32[0]), *(float32x2_t *)a12.f32, a7, 2);
          *v92 = *(float32x2_t *)a8.i8;
          v93 = (float32x2_t *)((char *)v92 + v22);
          *v93 = vmla_laneq_f32(vmul_n_f32(v85, a7.f32[0]), v91, a7, 2);
          v77 = (unint64_t *)((char *)&v93[1] + v22 + -2 * v22);
          v78 += 2;
        }
        while (v78 < v20);
      }
      v94 = a2;
      v95 = (float32x2_t *)(a3 + v20 * v21);
      v96 = (float32x2_t *)((char *)v95 + v21);
      v97 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v98 = v97;
      if ((a2 & 1) == 0)
        goto LABEL_27;
      v12.i32[0] = v95->i32[0];
      v95 = (float32x2_t *)((char *)v95 + 4);
      v13.i32[0] = v96->i32[0];
      v96 = (float32x2_t *)((char *)v96 + 4);
      *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v12.f32, *(int32x2_t *)v13.f32);
      v97 = vmla_n_f32(v97, *(float32x2_t *)v16.f32, v12.f32[0]);
      v98 = vmla_n_f32(v98, *(float32x2_t *)v16.f32, v13.f32[0]);
      v94 = a2 - 1;
      if (a2 > 1)
      {
LABEL_27:
        do
        {
          v99 = *v95++;
          v100 = *v96++;
          *(int32x2_t *)a12.f32 = vtrn1_s32((int32x2_t)v99, (int32x2_t)v100);
          v101 = (float32x2_t)vtrn2_s32((int32x2_t)v99, (int32x2_t)v100);
          v97 = vmla_lane_f32(vmla_n_f32(v97, *(float32x2_t *)a12.f32, v99.f32[0]), v101, v99, 1);
          v98 = vmla_lane_f32(vmla_n_f32(v98, *(float32x2_t *)a12.f32, v100.f32[0]), v101, v100, 1);
          v23 = v94 <= 2;
          v94 -= 2;
        }
        while (!v23);
      }
      a12.i32[0] = *(_DWORD *)v77;
      v102 = (float32x2_t *)((char *)v77 + v22);
      v103 = *v102;
      v104 = (float32x2_t *)((char *)v102 + v22 + -2 * v22);
      v97.f32[0] = v97.f32[0] * a7.f32[0];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(v97, *(float32x2_t *)a12.f32, a7, 2);
      v104->i32[0] = a8.i32[0];
      *(float32x2_t *)((char *)v104 + v22) = vmla_laneq_f32(vmul_n_f32(v98, a7.f32[0]), v103, a7, 2);
      result -= 2;
      v20 += 2;
    }
    if (result >= 1)
    {
      v105 = (float32x2_t *)a5;
      v106 = 0;
      if (v20 >= 1)
      {
        do
        {
          v107 = a2;
          v108 = (float32x2_t *)(a3 + v20 * v21);
          v109 = (__int32 *)(a3 + v106 * v21);
          v110 = &v109[(unint64_t)v21 / 4];
          v111 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          if ((a2 & 1) == 0)
            goto LABEL_34;
          v16.i32[0] = *v109++;
          v17.i32[0] = *v110++;
          v112 = v108->f32[0];
          v108 = (float32x2_t *)((char *)v108 + 4);
          *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
          v111 = vmla_n_f32(v111, *(float32x2_t *)v16.f32, v112);
          v107 = a2 - 1;
          if (a2 > 1)
          {
LABEL_34:
            do
            {
              v16.i64[0] = *(_QWORD *)v109;
              v109 += 2;
              v17.i64[0] = *(_QWORD *)v110;
              v110 += 2;
              v113 = *v108++;
              v111 = vmla_lane_f32(vmla_n_f32(v111, (float32x2_t)vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8), v113.f32[0]), (float32x2_t)vtrn2_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8), v113, 1);
              v23 = v107 <= 2;
              v107 -= 2;
            }
            while (!v23);
          }
          *(float32x2_t *)a12.f32 = *v105;
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v111, a7.f32[0]), *v105, a7, 2);
          *v105++ = *(float32x2_t *)a8.i8;
          v106 += 2;
        }
        while (v106 < v20 - 1);
      }
      v114 = a2;
      v115 = (unint64_t *)(a3 + v20 * v21);
      v116 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0
        || (v117 = *(float *)v115,
            v115 = (unint64_t *)((char *)v115 + 4),
            v116.f32[0] = v117 * v117,
            v114 = a2 - 1,
            a2 > 1))
      {
        do
        {
          a12.i64[0] = *v115++;
          v116 = vmla_f32(v116, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
          v23 = v114 <= 2;
          v114 -= 2;
        }
        while (!v23);
        v116.f32[0] = vaddv_f32(v116);
      }
      a12.i32[0] = v105->i32[0];
      v116.f32[0] = v116.f32[0] * a7.f32[0];
      v105->i32[0] = vmla_laneq_f32(v116, *(float32x2_t *)a12.f32, a7, 2).u32[0];
    }
  }
  return result;
}

void sub_239A3BBDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,__int128 a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,__int128 a57,char a58)
{
  int v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(float);
  void (*v71)(__n128);
  float32x4_t *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float *(*v88)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  float *(*v89)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  float32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float32x2_t v110;
  float32x2_t *v111;
  __n128 *v112;
  float32x4_t v113;
  __int128 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float32x2_t v119;
  float32x2_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const float *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(float);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*vars0)(__n128);
  uint64_t vars8;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float32x2_t v175;
  float *(*v176)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  float *(*v185)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  float32x4_t *v191;
  uint64_t v192;
  uint64_t v193;

  v61 = MEMORY[0x24BDAC7A8]();
  v193 = v63;
  v186 = v64;
  v66 = v65;
  v67 = v61;
  v68 = v59;
  STACK[0x102A8] = *MEMORY[0x24BDAC8D0];
  if (v58 == 111)
    v69 = 1;
  else
    v69 = v60;
  v70 = (void (*)(float))MEMORY[0x24BDB2F18];
  if (v58 == 111)
    v70 = (void (*)(float))MEMORY[0x24BDB2F20];
  v153 = v70;
  if (v58 == 111)
    v71 = (void (*)(__n128))MEMORY[0x24BDB2F08];
  else
    v71 = (void (*)(__n128))MEMORY[0x24BDB2F10];
  v190 = v62;
  if (v59 < 1)
  {
    v191 = (float32x4_t *)&a58;
    v73 = &STACK[0x10240];
  }
  else
  {
    v72 = (float32x4_t *)malloc_type_malloc((v59 << 9) + 65632, 0x100004052888210uLL);
    *(_QWORD *)&v62 = v190;
    v191 = v72;
    v73 = (unint64_t *)&v72[4096];
  }
  v163 = (uint64_t)(v73 + 8);
  if (v66 >= 1)
  {
    v156 = 0;
    v74 = 0;
    v184 = v68 - 3;
    v175 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&v62, 0).u64[0];
    if (v68 <= 0)
      v75 = -(-v68 & 3);
    else
      v75 = v68 & 3;
    v164 = (v193 << 9) + 512;
    v165 = v75;
    v181 = 16 * v193;
    v179 = v186 + 12 * v193;
    v162 = 4 * v193;
    v174 = v186 + 16;
    v76 = 128;
    v178 = v186 + 8 * v193;
    v177 = v186 + 4 * v193;
    v152 = v66;
    vars8 = v69;
    v161 = v68;
    vars0 = v71;
    while (1)
    {
      v77 = v66 >= v76 ? v76 : v66;
      v154 = v74 + 128;
      v155 = v76;
      v78 = v74 + 128 <= v66 ? 128 : v66 - v74;
      v192 = v78;
      v153(v67);
      v79 = (__n128)v190;
      if (v68 >= 1)
        break;
LABEL_134:
      v76 = v155 + 128;
      v156 -= 128;
      v74 = v154;
      v66 = v152;
      if (v154 >= v152)
        goto LABEL_135;
    }
    v173 = 0;
    v80 = 0;
    v81 = 0;
    v166 = (v77 + v156) << 9;
    v182 = 16 * (v77 + v156);
    v82 = *(float *)&v190 != 0.0;
    if (*(float *)&v190 == 1.0 || v74 != 0)
      v82 = 0;
    v183 = v82;
    v84 = v192 & 3;
    if (v192 <= 0)
      v84 = -(-v192 & 3);
    v157 = 4 - v84;
    v158 = v84;
    v170 = v186;
    v85 = 128;
    v172 = v186;
    v171 = v163;
    v185 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_239A28970;
    v176 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_239A2AE00;
    while (1)
    {
      v168 = v85;
      v169 = v80;
      if (v68 >= v85)
        v86 = v85;
      else
        v86 = v68;
      v180 = v86 + v80;
      v167 = v81 + 128;
      if (v81 + 128 <= v68)
        v87 = 128;
      else
        v87 = v68 - v81;
      v188 = v186 + 4 * v81;
      v189 = v81;
      v88 = v176;
      if ((v87 & 7) != 0)
        v88 = sub_239A334F0;
      v176 = v88;
      v89 = v185;
      if ((v87 & 7) != 0)
        v89 = sub_239A34170;
      v185 = v89;
      v187 = v87;
      v71(v79);
      v90 = v189;
      v91 = *(float *)&v190;
      v92 = v189;
      if (v189 < v184)
        break;
LABEL_92:
      if (v165)
      {
        if (v92 - v90 >= v187)
          v131 = v187;
        else
          v131 = v92 - v90;
        v132 = v187 - v131;
        if (v187 - v131 >= 3)
          v133 = 3;
        else
          v133 = v187 - v131;
        if (v132 >= 1)
        {
          v79 = 0uLL;
          a54 = 0u;
          a55 = 0u;
          a52 = 0u;
          a53 = 0u;
          a50 = 0u;
          a51 = 0u;
        }
        v134 = v188 + 4 * v92 * v193;
        v135 = (const float *)(v163 + 4 * v92 * v192);
        if (v183)
        {
          if (v131)
            sub_239A2A0BC(v191, (const float *)(v163 + 4 * v92 * v192), v134, v193, v131, v165, v192, v91);
          if (v132 >= 1)
          {
            v136 = v158;
            if (v158)
            {
              if (v131 <= 0)
                v137 = -(-v131 & 7);
              else
                v137 = v131 & 7;
              v136 = v137 * v157;
            }
            sub_239A2A1EC((float32x4_t *)((char *)v191 + 4 * v131 * v192 + 4 * v136), v135, (uint64_t)&a50, 8, v133, v165, v192);
            if (v165 >= 1)
            {
              v138 = 0;
              v139 = v92 + v169;
              if (v92 + v169 >= v180)
                v139 = v180;
              v140 = v170 + v162 * v92 + 4 * v139;
              v141 = &a50;
              v142 = 1;
              do
              {
                v143 = 0;
                do
                {
                  v79.n128_f32[0] = *((float *)v141 + v143) + (float)(*(float *)(v140 + 4 * v143) * *(float *)&v190);
                  *(_DWORD *)(v140 + 4 * v143++) = v79.n128_u32[0];
                }
                while (v142 != v143);
                ++v138;
                ++v142;
                v141 += 2;
                v140 += v162;
              }
              while (v138 != v165);
            }
          }
        }
        else
        {
          if (v131)
            sub_239A2A1EC(v191, (const float *)(v163 + 4 * v92 * v192), v134, v193, v131, v165, v192);
          if (v132 >= 1)
          {
            v144 = v158;
            if (v158)
            {
              if (v131 <= 0)
                v145 = -(-v131 & 7);
              else
                v145 = v131 & 7;
              v144 = v145 * v157;
            }
            sub_239A2A1EC((float32x4_t *)((char *)v191 + 4 * v131 * v192 + 4 * v144), v135, (uint64_t)&a50, 8, v133, v165, v192);
            if (v165 >= 1)
            {
              v146 = 0;
              v147 = v92 + v169;
              if (v92 + v169 >= v180)
                v147 = v180;
              v148 = v170 + v162 * v92 + 4 * v147;
              v149 = &a50;
              v150 = 1;
              do
              {
                v151 = 0;
                do
                {
                  v79.n128_f32[0] = *(float *)(v148 + 4 * v151) + *((float *)v149 + v151);
                  *(_DWORD *)(v148 + 4 * v151++) = v79.n128_u32[0];
                }
                while (v150 != v151);
                ++v146;
                ++v150;
                v149 += 2;
                v148 += v162;
              }
              while (v146 != v165);
            }
          }
        }
      }
      v171 += v166;
      v172 += v164;
      v85 = v168 + 128;
      v80 = v169 - 128;
      v173 += v164;
      v170 += 512;
      v81 = v167;
      if (v167 >= v68)
        goto LABEL_134;
    }
    v93 = 0;
    v95 = v172;
    v94 = v173;
    v96 = (_OWORD *)v171;
    v97 = v189;
    while (1)
    {
      if (v93 <= 0)
        v98 = -(-v93 & 7);
      else
        v98 = v93 & 7;
      v99 = v93 - v98;
      if (v93 - v98 >= v187)
        v100 = v187;
      else
        v100 = v93 - v98;
      v101 = v187 - v100;
      if (v187 - v100 >= 1)
      {
        v79 = 0uLL;
        a56 = 0u;
        a57 = 0u;
        a54 = 0u;
        a55 = 0u;
        a52 = 0u;
        a53 = 0u;
        a50 = 0u;
        a51 = 0u;
      }
      v102 = v90 + v93;
      v103 = v188 + 4 * v97 * v193;
      v104 = (float32x4_t *)(v186 + v94);
      if (v183)
      {
        if (v100)
        {
          v176(v191, (uint64_t)v96, v104, v193, v100, v192, v91);
          v91 = *(float *)&v190;
        }
        if (v101 < 1)
          goto LABEL_90;
        if (v101 >= 8)
          v105 = 8;
        else
          v105 = v187 - v100;
        ((void (*)(float32_t *, _OWORD *, __int128 *, uint64_t, uint64_t))v185)(&v191->f32[v100 * v192], v96, &a50, 8, v105);
        v106 = v103 + 4 * v100;
        if (v180 >= v99)
          v107 = v99;
        else
          v107 = v180;
        v108 = 4 * v107;
        if ((v102 & 4) != 0)
        {
          v91 = *(float *)&v190;
          *(float32x4_t *)(v95 + v108) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v95 + v108), *(float *)&v190), (float32x4_t)a50);
          if (v180 >= v99)
            v121 = v99;
          else
            v121 = v180;
          *(float *)(v174 + 4 * v121 + v94) = *(float *)&a51
                                            + (float)(*(float *)(v174 + 4 * v121 + v94) * *(float *)&v190);
          v122 = v177 + 4 * v121 + v94;
          *(float32x4_t *)v122 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v122, *(float *)&v190), (float32x4_t)a52);
          *(float32x2_t *)(v122 + 16) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v122 + 16)), *(float32x2_t *)&a53);
          v123 = v178 + 4 * v121 + v94;
          *(float32x4_t *)v123 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v123, *(float *)&v190), (float32x4_t)a54);
          *(float32x2_t *)(v123 + 16) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v123 + 16)), *(float32x2_t *)&a55);
          *(float *)(v123 + 24) = *((float *)&a55 + 2) + (float)(*(float *)(v123 + 24) * *(float *)&v190);
          v124 = (float32x4_t *)(v179 + v94 + 4 * v121);
          v125 = v124[1];
          *v124 = vaddq_f32(vmulq_n_f32(*v124, *(float *)&v190), (float32x4_t)a56);
          v112 = (__n128 *)(v106 + 12 * v193 + 16);
          v113 = vmulq_n_f32(v125, *(float *)&v190);
          v114 = &a57;
        }
        else
        {
          v91 = *(float *)&v190;
          *(float *)(v95 + v108) = *(float *)&a50 + (float)(*(float *)(v95 + v108) * *(float *)&v190);
          if (v180 >= v99)
            v109 = v99;
          else
            v109 = v180;
          v110 = (float32x2_t)a54;
          *(float32x2_t *)(v177 + 4 * v109 + v94) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v177 + 4 * v109 + v94)), *(float32x2_t *)&a52);
          v111 = (float32x2_t *)(v178 + 4 * v109 + v94);
          *v111 = vadd_f32(vmul_f32(v175, *v111), v110);
          v111[1].f32[0] = *((float *)&a54 + 2) + (float)(v111[1].f32[0] * *(float *)&v190);
          v112 = (__n128 *)(v106 + 12 * v193);
          v113 = vmulq_n_f32(*(float32x4_t *)(v179 + v94 + 4 * v109), *(float *)&v190);
          v114 = &a56;
        }
      }
      else
      {
        if (v100)
        {
          v185(v191, (uint64_t)v96, v104, v193, v100, v192);
          v91 = *(float *)&v190;
        }
        if (v101 < 1)
          goto LABEL_90;
        if (v101 >= 8)
          v115 = 8;
        else
          v115 = v187 - v100;
        ((void (*)(float32_t *, _OWORD *, __int128 *, uint64_t, uint64_t))v185)(&v191->f32[v100 * v192], v96, &a50, 8, v115);
        v116 = v180;
        if (v180 >= v99)
          v117 = v99;
        else
          v117 = v180;
        v118 = 4 * v117;
        if ((v102 & 4) != 0)
        {
          *(float32x4_t *)(v95 + v118) = vaddq_f32(*(float32x4_t *)(v95 + v118), (float32x4_t)a50);
          if (v180 >= v99)
            v126 = v99;
          else
            v126 = v180;
          *(float *)(v174 + 4 * v126 + v94) = *(float *)(v174 + 4 * v126 + v94) + *(float *)&a51;
          v127 = v177 + 4 * v126 + v94;
          *(float32x4_t *)v127 = vaddq_f32(*(float32x4_t *)v127, (float32x4_t)a52);
          *(float32x2_t *)(v127 + 16) = vadd_f32(*(float32x2_t *)(v127 + 16), *(float32x2_t *)&a53);
          v128 = v178 + 4 * v126 + v94;
          *(float32x4_t *)v128 = vaddq_f32(*(float32x4_t *)v128, (float32x4_t)a54);
          *(float32x2_t *)(v128 + 16) = vadd_f32(*(float32x2_t *)(v128 + 16), *(float32x2_t *)&a55);
          *(float *)(v128 + 24) = *(float *)(v128 + 24) + *((float *)&a55 + 2);
          v129 = v179 + v94 + 4 * v126;
          *(float32x4_t *)v129 = vaddq_f32(*(float32x4_t *)v129, (float32x4_t)a56);
          v130 = *(float32x4_t *)(v129 + 16);
          v112 = (__n128 *)(v129 + 16);
          v113 = v130;
          v114 = &a57;
        }
        else
        {
          *(float *)(v95 + v118) = *(float *)(v95 + v118) + *(float *)&a50;
          if (v180 >= v99)
            v116 = v99;
          v119 = (float32x2_t)a54;
          *(float32x2_t *)(v177 + 4 * v116 + v94) = vadd_f32(*(float32x2_t *)(v177 + 4 * v116 + v94), *(float32x2_t *)&a52);
          v120 = (float32x2_t *)(v178 + 4 * v116 + v94);
          *v120 = vadd_f32(*v120, v119);
          v120[1].f32[0] = v120[1].f32[0] + *((float *)&a54 + 2);
          v112 = (__n128 *)(v103 + 4 * v100 + 12 * v193);
          v113 = *(float32x4_t *)(v179 + v94 + 4 * v116);
          v114 = &a56;
        }
        v91 = *(float *)&v190;
      }
      v79 = (__n128)vaddq_f32(v113, *(float32x4_t *)v114);
      *v112 = v79;
LABEL_90:
      v97 += 4;
      v93 += 4;
      v90 = v189;
      v92 = v189 + v93;
      v96 = (_OWORD *)((char *)v96 + v182);
      v95 += v181;
      v94 += v181;
      if (v189 + v93 >= v184)
      {
        v68 = v161;
        v71 = vars0;
        goto LABEL_92;
      }
    }
  }
LABEL_135:
  if (v68 >= 1)
    free(v191);
}

void sub_239A3C644(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (a2 >= 1)
  {
    v5 = a2;
    v6 = 8 * a1;
    v7 = 8 * a4;
    do
    {
      bzero(a3, v6);
      a3 += v7;
      --v5;
    }
    while (v5);
  }
}

void sub_239A3C694(int __N, uint64_t a2, double *__X, uint64_t a4, double a5)
{
  uint64_t v7;
  uint64_t v9;

  if (a2 >= 1)
  {
    v7 = a2;
    v9 = 8 * a4;
    do
    {
      cblas_dscal(__N, a5, __X, 1);
      __X = (double *)((char *)__X + v9);
      --v7;
    }
    while (v7);
  }
}

void sub_239A3C6F8(int a1, uint64_t __N, double *__X, uint64_t a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __N;
  if (a5 == 0.0)
  {
    if (a1 == 121)
    {
      if (__N >= 1)
      {
        v7 = 8 * a4;
        v8 = 8;
        do
        {
          bzero(__X, v8);
          v8 += 8;
          __X = (double *)((char *)__X + v7);
          --v6;
        }
        while (v6);
      }
    }
    else if (__N >= 1)
    {
      v12 = 8 * __N;
      v13 = 8 * a4 + 8;
      do
      {
        bzero(__X, v12);
        v12 -= 8;
        __X = (double *)((char *)__X + v13);
        --v6;
      }
      while (v6);
    }
  }
  else if (a1 == 121)
  {
    if (__N >= 1)
    {
      v10 = 0;
      v11 = 8 * a4;
      do
      {
        cblas_dscal(++v10, a5, __X, 1);
        __X = (double *)((char *)__X + v11);
      }
      while (v6 != v10);
    }
  }
  else if (__N >= 1)
  {
    v14 = 8 * a4 + 8;
    do
    {
      cblas_dscal(v6, a5, __X, 1);
      __X = (double *)((char *)__X + v14);
      --v6;
    }
    while (v6);
  }
}

void sub_239A3C810(int a1, uint64_t a2, uint64_t a3, uint64_t __incY)
{
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  const double *v9;

  v5 = a3;
  v6 = a2;
  if (a1 == 121)
  {
    if (a2 >= 2)
    {
      v7 = (double *)(a3 + 8);
      v8 = 1;
      v9 = (const double *)(a3 + 8 * __incY);
      do
      {
        cblas_dcopy(v8++, v9, 1, v7++, __incY);
        v9 += __incY;
      }
      while (v6 != v8);
    }
  }
  else if (a2 >= 2)
  {
    do
    {
      cblas_dcopy(--v6, (const double *)(v5 + 8), 1, (double *)(v5 + 8 * __incY), __incY);
      v5 += 8 * __incY + 8;
    }
    while (v6 != 1);
  }
}

void sub_239A3C8CC(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (a2 >= 1)
  {
    v5 = a2;
    v6 = 4 * a1;
    v7 = 4 * a4;
    do
    {
      bzero(a3, v6);
      a3 += v7;
      --v5;
    }
    while (v5);
  }
}

void sub_239A3C91C(int __N, uint64_t a2, float *__X, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v9;

  if (a2 >= 1)
  {
    v7 = a2;
    v9 = 4 * a4;
    do
    {
      cblas_sscal(__N, a5, __X, 1);
      __X = (float *)((char *)__X + v9);
      --v7;
    }
    while (v7);
  }
}

void sub_239A3C980(int a1, uint64_t __N, float *__X, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = __N;
  if (a1 == 121)
  {
    if (__N >= 1)
    {
      v8 = 0;
      v9 = 4 * a4;
      do
      {
        cblas_sscal(++v8, a5, __X, 1);
        __X = (float *)((char *)__X + v9);
      }
      while (v7 != v8);
    }
  }
  else if (__N >= 1)
  {
    v10 = 4 * a4 + 4;
    do
    {
      cblas_sscal(v7, a5, __X, 1);
      __X = (float *)((char *)__X + v10);
      --v7;
    }
    while (v7);
  }
}

void sub_239A3CA24(int a1, uint64_t a2, uint64_t a3, uint64_t __incY)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  const float *v9;

  v5 = a3;
  v6 = a2;
  if (a1 == 121)
  {
    if (a2 >= 2)
    {
      v7 = (float *)(a3 + 4);
      v8 = 1;
      v9 = (const float *)(a3 + 4 * __incY);
      do
      {
        cblas_scopy(v8++, v9, 1, v7++, __incY);
        v9 += __incY;
      }
      while (v6 != v8);
    }
  }
  else if (a2 >= 2)
  {
    do
    {
      cblas_scopy(--v6, (const float *)(v5 + 4), 1, (float *)(v5 + 4 * __incY), __incY);
      v5 += 4 * __incY + 4;
    }
    while (v6 != 1);
  }
}

void sub_239A3CAE0(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, double *__X, uint64_t __incX, double a7)
{
  int8x16_t v7;
  double v14;
  double v15;
  double v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float64x2_t *v30;
  double *v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t *v34;
  float64x2_t *v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  double v48;
  double v49;
  float64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  double *v78;
  float64x2_t v79;
  float64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  uint64_t v83;
  float64x2_t *v84;
  double *v85;
  float64x2_t *v86;
  uint64_t v87;
  float64x2_t *v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t *v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;

  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v18 = 2;
      }
      else
      {
        v22 = *(double *)(a3 + 8);
        v23 = __X + 1;
        v18 = 2;
        v24 = __N;
        do
        {
          v25 = *v23;
          v26 = *(v23 - 1) * a7;
          *(v23 - 1) = v26;
          *v23 = v25 * a7 - v26 * v22;
          v23 += __incX;
          --v24;
        }
        while (v24);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7, __X, __incX);
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
  }
  else if (__N < 1)
  {
    v18 = 3;
  }
  else
  {
    v14 = *(double *)(a3 + 8);
    v15 = *(double *)(a3 + 16);
    v16 = *(double *)(a3 + 8 * a4 + 16);
    v17 = __X + 2;
    v18 = 3;
    v19 = __N;
    do
    {
      v20 = *(v17 - 2) * a7;
      v21 = *(v17 - 1) * a7 - v20 * v14;
      *(v17 - 2) = v20;
      *(v17 - 1) = v21;
      *v17 = -(v16 * v21 + v20 * v15 - *v17 * a7);
      v17 += __incX;
      --v19;
    }
    while (v19);
  }
  if (v18 < a1)
  {
    v27 = 8 * a4;
    v28 = 8 * __incX;
    do
    {
      if (__N < 4)
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        v30 = (float64x2_t *)(a3 + 8 * v18);
        v31 = __X;
        do
        {
          v32 = (float64x2_t *)&v31[(unint64_t)v28 / 8];
          v33 = (float64x2_t *)&v31[2 * __incX];
          v34 = (float64x2_t *)&v31[3 * __incX];
          v35 = (float64x2_t *)(a3 + 8 * v18);
          v36 = v18;
          v37 = (float64x2_t *)v31;
          v38 = (float64x2_t)veorq_s8(v7, v7);
          v39 = v38;
          v40 = v38;
          v41 = v38;
          v42 = v38;
          v43 = v38;
          v44 = v38;
          v45 = v38;
          if ((v18 & 1) != 0)
          {
            v46 = v30[1];
            v35 = (float64x2_t *)((char *)v30 + v27);
            v37 = (float64x2_t *)(v31 + 1);
            v47 = v32->f64[0];
            v32 = (float64x2_t *)((char *)v32 + 8);
            v48 = v33->f64[0];
            v33 = (float64x2_t *)((char *)v33 + 8);
            v49 = v34->f64[0];
            v34 = (float64x2_t *)((char *)v34 + 8);
            v38 = vmlaq_n_f64(v38, *v30, *v31);
            v40 = vmlaq_n_f64(v40, *v30, v47);
            v42 = vmlaq_n_f64(v42, *v30, v48);
            v44 = vmlaq_n_f64(v44, *v30, v49);
            v39 = vmlaq_n_f64(v39, v46, *v31);
            v41 = vmlaq_n_f64(v41, v46, v47);
            v43 = vmlaq_n_f64(v43, v46, v48);
            v45 = vmlaq_n_f64(v45, v46, v49);
            v36 = v18 - 1;
          }
          for (; v36; v36 -= 2)
          {
            v51 = *v35;
            v52 = v35[1];
            v50 = (float64x2_t *)((char *)v35 + v27);
            v53 = *v50;
            v54 = v50[1];
            v35 = (float64x2_t *)((char *)v50 + v27);
            v55 = *v37++;
            v56 = *v32++;
            v57 = *v33++;
            v58 = *v34++;
            v38 = vmlaq_laneq_f64(vmlaq_n_f64(v38, v51, v55.f64[0]), v53, v55, 1);
            v40 = vmlaq_laneq_f64(vmlaq_n_f64(v40, v51, v56.f64[0]), v53, v56, 1);
            v42 = vmlaq_laneq_f64(vmlaq_n_f64(v42, v51, v57.f64[0]), v53, v57, 1);
            v44 = vmlaq_laneq_f64(vmlaq_n_f64(v44, v51, v58.f64[0]), v53, v58, 1);
            v39 = vmlaq_laneq_f64(vmlaq_n_f64(v39, v52, v55.f64[0]), v54, v55, 1);
            v41 = vmlaq_laneq_f64(vmlaq_n_f64(v41, v52, v56.f64[0]), v54, v56, 1);
            v43 = vmlaq_laneq_f64(vmlaq_n_f64(v43, v52, v57.f64[0]), v54, v57, 1);
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v52, v58.f64[0]), v54, v58, 1);
          }
          v59 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v37, a7), v38);
          v60 = (int64x2_t)vsubq_f64(vmulq_n_f64(v37[1], a7), v39);
          v61 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v32, a7), v40);
          v62 = (int64x2_t)vsubq_f64(vmulq_n_f64(v32[1], a7), v41);
          v63 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v33, a7), v42);
          v64 = (int64x2_t)vsubq_f64(vmulq_n_f64(v33[1], a7), v43);
          v65 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v34, a7), v44);
          v66 = (int64x2_t)vsubq_f64(vmulq_n_f64(v34[1], a7), v45);
          v67 = (float64x2_t)vtrn2q_s64(v60, v62);
          v68 = (float64x2_t)vtrn1q_s64(v60, v62);
          v69 = (float64x2_t)vtrn2q_s64(v59, v61);
          v70 = (float64x2_t)vtrn1q_s64(v59, v61);
          v71 = (float64x2_t)vtrn1q_s64(v63, v65);
          v72 = *v35;
          v73 = v35[1];
          v74 = (float64x2_t *)((char *)v35 + v27 + 16);
          v75 = vmlsq_laneq_f64(v69, v70, v72, 1);
          v76 = vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v63, v65), v71, v72, 1);
          v77 = *v74;
          v78 = &v74->f64[(unint64_t)v27 / 8 + 1];
          v79 = vmlsq_lane_f64(vmlsq_lane_f64(v68, v70, v73.f64[0], 0), v75, v77.f64[0], 0);
          v80 = vmlsq_lane_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v64, v66), v71, v73.f64[0], 0), v76, v77.f64[0], 0);
          v81 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v67, v70, v73, 1), v75, v77, 1), v79, *v78, 0);
          v82 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v64, v66), v71, v73, 1), v76, v77, 1), v80, *v78, 0);
          v7 = (int8x16_t)vtrn1q_s64((int64x2_t)v70, (int64x2_t)v75);
          *v37 = (float64x2_t)v7;
          v37[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v79, v81);
          *(int64x2_t *)v32 = vtrn2q_s64((int64x2_t)v70, (int64x2_t)v75);
          v32[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v79, v81);
          *(int64x2_t *)v33 = vtrn1q_s64((int64x2_t)v71, (int64x2_t)v76);
          v33[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v80, v82);
          *(int64x2_t *)v34 = vtrn2q_s64((int64x2_t)v71, (int64x2_t)v76);
          v34[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v80, v82);
          v29 += 4;
          v31 += 4 * __incX;
        }
        while (v29 < __N - 3);
      }
      v83 = __N - v29;
      if (__N > v29)
      {
        v85 = (double *)((char *)__X + v28 * v29);
        do
        {
          v84 = (float64x2_t *)(a3 + 8 * v18);
          v86 = v84;
          v87 = v18;
          v88 = (float64x2_t *)v85;
          v89 = (float64x2_t)veorq_s8(v7, v7);
          v90 = v89;
          if ((v18 & 1) != 0)
          {
            v86 = (float64x2_t *)((char *)v84 + v27);
            v88 = (float64x2_t *)(v85 + 1);
            v89 = vmlaq_n_f64(v89, *v84, *v85);
            v90 = vmlaq_n_f64(v90, v84[1], *v85);
            v87 = v18 - 1;
          }
          for (; v87; v87 -= 2)
          {
            v92 = *v86;
            v93 = v86[1];
            v91 = (float64x2_t *)((char *)v86 + v27);
            v94 = *v91;
            v95 = v91[1];
            v86 = (float64x2_t *)((char *)v91 + v27);
            v96 = *v88++;
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v89, v92, v96.f64[0]), v94, v96, 1);
            v90 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v93, v96.f64[0]), v95, v96, 1);
          }
          v97 = vsubq_f64(vmulq_n_f64(*v88, a7), v89);
          v98.f64[0] = v97.f64[0];
          v99 = *v86;
          v100 = v86[1];
          v101 = (float64x2_t *)((char *)v86 + v27 + 16);
          v7 = (int8x16_t)vmlsq_lane_f64(v97, v99, v97.f64[0], 0);
          *(_QWORD *)&v98.f64[1] = v7.i64[1];
          v102 = *v101;
          v103 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v88[1], a7), v90), v100, v98.f64[0], 0), *v101, v98, 1);
          v104.f64[0] = v103.f64[0];
          v102.f64[1] = v101->f64[(unint64_t)v27 / 8 + 1];
          v104.f64[1] = vmlsq_lane_f64(v103, v102, *(double *)&v103, 0).f64[1];
          *v88 = v98;
          v88[1] = v104;
          v85 = (double *)((char *)v85 + v28);
          --v83;
        }
        while (v83);
      }
      v18 += 4;
    }
    while (v18 < a1);
  }
}

void sub_239A3CEE8(uint64_t a1, uint64_t __N, double *a3, uint64_t a4, double *__X, uint64_t __incX, double a7)
{
  int8x16_t v7;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const double *v36;
  const double *v37;
  const double *v38;
  const double *v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  uint64_t v49;
  float64x2_t *v50;
  double *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  double v68;
  double v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t *v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  double *v98;
  float64x2_t v99;
  float64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  uint64_t v103;
  float64x2_t *v104;
  double *v105;
  float64x2_t *v106;
  uint64_t v107;
  float64x2_t *v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t *v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;

  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v21 = 2;
      }
      else
      {
        v26 = a3[1];
        v27 = a7 / *a3;
        v28 = __X + 1;
        v21 = 2;
        v29 = __N;
        v30 = 1.0 / a3[a4 + 1];
        do
        {
          v31 = *v28;
          v32 = v27 * *(v28 - 1);
          *(v28 - 1) = v32;
          *v28 = v30 * (v31 * a7 - v32 * v26);
          v28 += __incX;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *a3, __X, __incX);
      v21 = 1;
    }
    else
    {
      v21 = 0;
    }
  }
  else if (__N < 1)
  {
    v21 = 3;
  }
  else
  {
    v15 = a3[1];
    v14 = a3[2];
    v16 = &a3[a4];
    v17 = a7 / *a3;
    v18 = v16[2];
    v19 = 1.0 / v16[1];
    v20 = __X + 2;
    v21 = 3;
    v22 = __N;
    v23 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v24 = v17 * *(v20 - 2);
      v25 = v19 * (*(v20 - 1) * a7 - v24 * v15);
      *(v20 - 2) = v24;
      *(v20 - 1) = v25;
      *(double *)v7.i64 = v18 * v25;
      *v20 = v23 * -(*(double *)v7.i64 + v24 * v14 - *v20 * a7);
      v20 += __incX;
      --v22;
    }
    while (v22);
  }
  if (v21 < a1)
  {
    v33 = 8 * a4;
    v34 = a4 + 1;
    v35 = 8 * __incX;
    do
    {
      v36 = &a3[v21 * a4 + v21];
      v37 = &a3[v34 + v34 * v21];
      v38 = &a3[(v21 + 2) * v34];
      v39 = &a3[(v21 + 3) * v34];
      v40 = vld1q_dup_f64(v36);
      v41 = vld1q_dup_f64(v37);
      v42 = vld1q_dup_f64(v38);
      v43 = vld1q_dup_f64(v39);
      v44 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v45 = vdivq_f64(v44, v40);
      v46 = vdivq_f64(v44, v41);
      v47 = vdivq_f64(v44, v42);
      v48 = vdivq_f64(v44, v43);
      if (__N < 4)
      {
        v49 = 0;
      }
      else
      {
        v49 = 0;
        v50 = (float64x2_t *)&a3[v21];
        v51 = __X;
        do
        {
          v52 = (float64x2_t *)&v51[(unint64_t)v35 / 8];
          v53 = (float64x2_t *)&v51[2 * __incX];
          v54 = (float64x2_t *)&v51[3 * __incX];
          v55 = (float64x2_t *)&a3[v21];
          v56 = v21;
          v57 = (float64x2_t *)v51;
          v58 = (float64x2_t)veorq_s8(v7, v7);
          v59 = v58;
          v60 = v58;
          v61 = v58;
          v62 = v58;
          v63 = v58;
          v64 = v58;
          v65 = v58;
          if ((v21 & 1) != 0)
          {
            v66 = v50[1];
            v55 = (float64x2_t *)((char *)v50 + v33);
            v57 = (float64x2_t *)(v51 + 1);
            v67 = v52->f64[0];
            v52 = (float64x2_t *)((char *)v52 + 8);
            v68 = v53->f64[0];
            v53 = (float64x2_t *)((char *)v53 + 8);
            v69 = v54->f64[0];
            v54 = (float64x2_t *)((char *)v54 + 8);
            v58 = vmlaq_n_f64(v58, *v50, *v51);
            v60 = vmlaq_n_f64(v60, *v50, v67);
            v62 = vmlaq_n_f64(v62, *v50, v68);
            v64 = vmlaq_n_f64(v64, *v50, v69);
            v59 = vmlaq_n_f64(v59, v66, *v51);
            v61 = vmlaq_n_f64(v61, v66, v67);
            v63 = vmlaq_n_f64(v63, v66, v68);
            v65 = vmlaq_n_f64(v65, v66, v69);
            v56 = v21 - 1;
          }
          for (; v56; v56 -= 2)
          {
            v71 = *v55;
            v72 = v55[1];
            v70 = (float64x2_t *)((char *)v55 + v33);
            v73 = *v70;
            v74 = v70[1];
            v55 = (float64x2_t *)((char *)v70 + v33);
            v75 = *v57++;
            v76 = *v52++;
            v77 = *v53++;
            v78 = *v54++;
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v71, v75.f64[0]), v73, v75, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v71, v76.f64[0]), v73, v76, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v71, v77.f64[0]), v73, v77, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v71, v78.f64[0]), v73, v78, 1);
            v59 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v72, v75.f64[0]), v74, v75, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v72, v76.f64[0]), v74, v76, 1);
            v63 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v72, v77.f64[0]), v74, v77, 1);
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v72, v78.f64[0]), v74, v78, 1);
          }
          v79 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v57, a7), v58);
          v80 = (int64x2_t)vsubq_f64(vmulq_n_f64(v57[1], a7), v59);
          v81 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v52, a7), v60);
          v82 = (int64x2_t)vsubq_f64(vmulq_n_f64(v52[1], a7), v61);
          v83 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v53, a7), v62);
          v84 = (int64x2_t)vsubq_f64(vmulq_n_f64(v53[1], a7), v63);
          v85 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v54, a7), v64);
          v86 = (int64x2_t)vsubq_f64(vmulq_n_f64(v54[1], a7), v65);
          v87 = (float64x2_t)vtrn2q_s64(v80, v82);
          v88 = (float64x2_t)vtrn1q_s64(v80, v82);
          v89 = (float64x2_t)vtrn2q_s64(v79, v81);
          v90 = vmulq_f64((float64x2_t)vtrn1q_s64(v79, v81), v45);
          v91 = vmulq_f64((float64x2_t)vtrn1q_s64(v83, v85), v45);
          v92 = *v55;
          v93 = v55[1];
          v94 = (float64x2_t *)((char *)v55 + v33 + 16);
          v95 = vmulq_f64(vmlsq_laneq_f64(v89, v90, v92, 1), v46);
          v96 = vmulq_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v83, v85), v91, v92, 1), v46);
          v97 = *v94;
          v98 = &v94->f64[(unint64_t)v33 / 8 + 1];
          v99 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v88, v90, v93.f64[0], 0), v95, v97.f64[0], 0), v47);
          v100 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v84, v86), v91, v93.f64[0], 0), v96, v97.f64[0], 0), v47);
          v101 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v87, v90, v93, 1), v95, v97, 1), v99, *v98, 0), v48);
          v102 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v84, v86), v91, v93, 1), v96, v97, 1), v100, *v98, 0), v48);
          v7 = (int8x16_t)vtrn1q_s64((int64x2_t)v90, (int64x2_t)v95);
          *v57 = (float64x2_t)v7;
          v57[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v99, v101);
          *(int64x2_t *)v52 = vtrn2q_s64((int64x2_t)v90, (int64x2_t)v95);
          v52[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v99, v101);
          *(int64x2_t *)v53 = vtrn1q_s64((int64x2_t)v91, (int64x2_t)v96);
          v53[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v100, v102);
          *(int64x2_t *)v54 = vtrn2q_s64((int64x2_t)v91, (int64x2_t)v96);
          v54[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v100, v102);
          v49 += 4;
          v51 += 4 * __incX;
        }
        while (v49 < __N - 3);
      }
      v103 = __N - v49;
      if (__N > v49)
      {
        v104 = (float64x2_t *)&a3[v21];
        v105 = (double *)((char *)__X + v35 * v49);
        do
        {
          v106 = (float64x2_t *)&a3[v21];
          v107 = v21;
          v108 = (float64x2_t *)v105;
          v109 = (float64x2_t)veorq_s8(v7, v7);
          v110 = v109;
          if ((v21 & 1) != 0)
          {
            v106 = (float64x2_t *)((char *)v104 + v33);
            v108 = (float64x2_t *)(v105 + 1);
            v109 = vmlaq_n_f64(v109, *v104, *v105);
            v110 = vmlaq_n_f64(v110, v104[1], *v105);
            v107 = v21 - 1;
          }
          for (; v107; v107 -= 2)
          {
            v112 = *v106;
            v113 = v106[1];
            v111 = (float64x2_t *)((char *)v106 + v33);
            v114 = *v111;
            v115 = v111[1];
            v106 = (float64x2_t *)((char *)v111 + v33);
            v116 = *v108++;
            v109 = vmlaq_laneq_f64(vmlaq_n_f64(v109, v112, v116.f64[0]), v114, v116, 1);
            v110 = vmlaq_laneq_f64(vmlaq_n_f64(v110, v113, v116.f64[0]), v115, v116, 1);
          }
          v117 = vsubq_f64(vmulq_n_f64(*v108, a7), v109);
          v118.f64[0] = v117.f64[0] * v45.f64[0];
          v119 = *v106;
          v120 = v106[1];
          v121 = (float64x2_t *)((char *)v106 + v33 + 16);
          v7 = (int8x16_t)vmulq_f64(vmlsq_lane_f64(v117, v119, v117.f64[0] * v45.f64[0], 0), v46);
          *(_QWORD *)&v118.f64[1] = v7.i64[1];
          v122 = *v121;
          v123 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v108[1], a7), v110), v120, v118.f64[0], 0), *v121, v118, 1);
          v124.f64[0] = v123.f64[0] * v47.f64[0];
          v122.f64[1] = v121->f64[(unint64_t)v33 / 8 + 1];
          v124.f64[1] = vmulq_f64(vmlsq_lane_f64(v123, v122, *(double *)&v123 * *(double *)&v47, 0), v48).f64[1];
          *v108 = v118;
          v108[1] = v124;
          v105 = (double *)((char *)v105 + v35);
          --v103;
        }
        while (v103);
      }
      v21 += 4;
    }
    while (v21 < a1);
  }
}

void sub_239A3D3B4(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13)
{
  int8x16_t v13;
  uint64_t v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  double *v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  float64x2_t *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  int64x2_t *v54;
  int64x2_t *v55;
  float64x2_t *v56;
  uint64_t v57;
  int64x2_t *v58;
  int64x2_t *v59;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  double v71;
  double v72;
  double v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double *v86;
  float64x2_t *v87;
  double *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  float64x2_t *v91;
  float64x2_t *v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  uint64_t v108;
  uint64_t v109;
  float64x2_t *v110;
  _OWORD *v111;
  float64x2_t *v112;
  _OWORD *v113;
  uint64_t v114;
  uint64_t v115;
  double *v116;
  int64x2_t *v117;
  int64x2_t *v118;
  float64x2_t *v119;
  uint64_t v120;
  int64x2_t *v121;
  int64x2_t *v122;
  uint64_t v123;
  float64x2_t v124;
  float64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  float64x2_t v130;
  int64x2_t *v131;
  float64x2_t *v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  BOOL v138;

  v20 = a1 - 1;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N >= 1)
      {
        v30 = *(double *)(a3 + 8 * (v20 + (a1 - 2) * a4));
        v31 = (double *)(a5 + 8 * v20);
        v32 = __N;
        do
        {
          v33 = *(v31 - 1);
          v34 = *v31 * a7;
          *v31 = v34;
          *(v31 - 1) = v33 * a7 - v34 * v30;
          v31 += __incX;
          --v32;
        }
        while (v32);
      }
      v20 = a1 - 3;
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7, (double *)(a5 + 8 * v20), __incX);
      v20 = a1 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v21 = *(double *)(a3 + 8 * (v20 + (a1 - 2) * a4));
      v22 = (double *)(a3 + 8 * (v20 + (a1 - 3) * a4));
      v24 = *(v22 - 1);
      v23 = *v22;
      v25 = (double *)(a5 + 8 * v20);
      v26 = __N;
      do
      {
        v27 = *(v25 - 1);
        v28 = *v25 * a7;
        *v25 = v28;
        v29 = v27 * a7 - v28 * v21;
        *(v25 - 2) = -(v24 * v29 + v28 * v23 - *(v25 - 2) * a7);
        *(v25 - 1) = v29;
        v25 += __incX;
        --v26;
      }
      while (v26);
    }
    v20 = a1 - 4;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    v35 = v20 + 1;
    v36 = 3 * __incX;
    v37 = a5 + 8 * v20 + 8;
    v38 = 32 * __incX;
    v39 = 2 * __incX;
    v40 = 8 * __incX;
    do
    {
      v41 = v35 - 4;
      if (__N < 4)
      {
        v42 = 0;
      }
      else
      {
        v42 = 0;
        v43 = a3 + 8 * v35;
        v44 = (unint64_t *)(v43 + 8 * v41 * a4);
        v45 = (unint64_t *)(v43 + 8 * (v35 - 3) * a4);
        v46 = (unint64_t *)(v43 + 8 * (v35 - 2) * a4);
        v47 = (unint64_t *)(v43 + 8 * (v35 - 1) * a4);
        v48 = a1 - v41;
        if (a1 - v41 <= 4)
          v48 = 4;
        v49 = v48 - 4;
        v50 = (double *)v37;
        do
        {
          v51 = (float64x2_t *)&v50[(unint64_t)v40 / 8];
          v52 = (float64x2_t *)&v50[v39];
          v53 = (float64x2_t *)&v50[v36];
          v54 = (int64x2_t *)v44;
          v55 = (int64x2_t *)v46;
          v56 = (float64x2_t *)v50;
          v57 = v49;
          v58 = (int64x2_t *)v45;
          v59 = (int64x2_t *)v47;
          v60 = v49 + 1;
          v61 = (float64x2_t)veorq_s8(v13, v13);
          v62 = v61;
          v63 = v61;
          v64 = v61;
          v65 = v61;
          v66 = v61;
          v67 = v61;
          v68 = v61;
          if ((v49 & 1) != 0)
          {
            *(_QWORD *)&a10.f64[0] = *v44;
            v54 = (int64x2_t *)(v44 + 1);
            *(_QWORD *)&a11.f64[0] = *v45;
            v58 = (int64x2_t *)(v45 + 1);
            *(_QWORD *)&a12.f64[0] = *v46;
            v55 = (int64x2_t *)(v46 + 1);
            *(_QWORD *)&a13.f64[0] = *v47;
            v59 = (int64x2_t *)(v47 + 1);
            v69 = (float64x2_t)vtrn1q_s64((int64x2_t)a10, (int64x2_t)a11);
            v70 = (float64x2_t)vtrn1q_s64((int64x2_t)a12, (int64x2_t)a13);
            v56 = (float64x2_t *)(v50 + 1);
            v71 = v51->f64[0];
            v51 = (float64x2_t *)((char *)v51 + 8);
            v72 = v52->f64[0];
            v52 = (float64x2_t *)((char *)v52 + 8);
            v73 = v53->f64[0];
            v53 = (float64x2_t *)((char *)v53 + 8);
            v61 = vmlaq_n_f64(v61, v69, *v50);
            v63 = vmlaq_n_f64(v63, v69, v71);
            v65 = vmlaq_n_f64(v65, v69, v72);
            v67 = vmlaq_n_f64(v67, v69, v73);
            v62 = vmlaq_n_f64(v62, v70, *v50);
            v64 = vmlaq_n_f64(v64, v70, v71);
            v66 = vmlaq_n_f64(v66, v70, v72);
            v68 = vmlaq_n_f64(v68, v70, v73);
            v57 = v49 - 1;
          }
          for (; v57; v57 -= 2)
          {
            v74 = *v54++;
            v75 = *v58++;
            v76 = *v55++;
            v77 = *v59++;
            v78 = (float64x2_t)vtrn1q_s64(v74, v75);
            v79 = (float64x2_t)vtrn1q_s64(v76, v77);
            v80 = (float64x2_t)vtrn2q_s64(v74, v75);
            v81 = (float64x2_t)vtrn2q_s64(v76, v77);
            v82 = *v56++;
            v83 = *v51++;
            v84 = *v52++;
            v85 = *v53++;
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v78, v82.f64[0]), v80, v82, 1);
            v63 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v78, v83.f64[0]), v80, v83, 1);
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v78, v84.f64[0]), v80, v84, 1);
            v67 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v78, v85.f64[0]), v80, v85, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v79, v82.f64[0]), v81, v82, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v79, v83.f64[0]), v81, v83, 1);
            v66 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v79, v84.f64[0]), v81, v84, 1);
            v68 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v79, v85.f64[0]), v81, v85, 1);
          }
          v86 = (double *)&v54->i64[-v60 - 1];
          v87 = (float64x2_t *)((char *)v58 - 8 * v60 - 8);
          v88 = (double *)&v55->i64[-v60];
          v89 = (float64x2_t *)((char *)v56 - 8 * v49 - 32);
          v90 = (float64x2_t *)((char *)v51 - 8 * v49 - 32);
          v91 = (float64x2_t *)((char *)v52 - 8 * v49 - 32);
          v92 = (float64x2_t *)((char *)v53 - 8 * v49 - 32);
          v93 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v89, a7), v61);
          v94 = (int64x2_t)vsubq_f64(vmulq_n_f64(v89[1], a7), v62);
          v95 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v90, a7), v63);
          v96 = (int64x2_t)vsubq_f64(vmulq_n_f64(v90[1], a7), v64);
          v97 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v91, a7), v65);
          v98 = (int64x2_t)vsubq_f64(vmulq_n_f64(v91[1], a7), v66);
          v99 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v92, a7), v67);
          v100 = (int64x2_t)vsubq_f64(vmulq_n_f64(v92[1], a7), v68);
          v101 = (float64x2_t)vtrn2q_s64(v94, v96);
          v102 = (float64x2_t)vtrn2q_s64(v98, v100);
          v103 = (float64x2_t)vtrn2q_s64(v93, v95);
          v104 = (float64x2_t)vtrn1q_s64(v93, v95);
          v105 = *(float64x2_t *)v86--;
          a10 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v94, v96), v101, *v88, 0);
          a11 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v98, v100), v102, *v88, 0);
          a12 = vmlsq_lane_f64(vmlsq_laneq_f64(v103, v101, *v87, 1), a10, v87->f64[0], 0);
          a13 = vmlsq_lane_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v97, v99), v102, *v87, 1), a11, v87->f64[0], 0);
          v106 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v104, v101, v105, 1), a10, v105.f64[0], 0), a12, *v86, 0);
          v107 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64((float64x2_t)vtrn1q_s64(v97, v99), v102, v105, 1), a11, v105.f64[0], 0), a13, *v86, 0);
          v13 = (int8x16_t)vtrn1q_s64(v106, (int64x2_t)a12);
          *v89 = (float64x2_t)v13;
          v89[1] = (float64x2_t)vtrn1q_s64((int64x2_t)a10, (int64x2_t)v101);
          *(int64x2_t *)v90 = vtrn2q_s64(v106, (int64x2_t)a12);
          v90[1] = (float64x2_t)vtrn2q_s64((int64x2_t)a10, (int64x2_t)v101);
          *(int64x2_t *)v91 = vtrn1q_s64(v107, (int64x2_t)a13);
          v91[1] = (float64x2_t)vtrn1q_s64((int64x2_t)a11, (int64x2_t)v102);
          *(int64x2_t *)v92 = vtrn2q_s64(v107, (int64x2_t)a13);
          v92[1] = (float64x2_t)vtrn2q_s64((int64x2_t)a11, (int64x2_t)v102);
          v42 += 4;
          v50 = (double *)((char *)v50 + v38);
        }
        while (v42 < __N - 3);
      }
      v108 = __N - v42;
      if (__N > v42)
      {
        v109 = a3 + 8 * v35;
        v110 = (float64x2_t *)(v109 + 8 * v41 * a4);
        v111 = (_OWORD *)(v109 + 8 * (v35 - 3) * a4);
        v112 = (float64x2_t *)(v109 + 8 * (v35 - 2) * a4);
        v113 = (_OWORD *)(v109 + 8 * (v35 - 1) * a4);
        v114 = a1 - v41;
        if (a1 - v41 <= 4)
          v114 = 4;
        v115 = v114 - 4;
        v116 = (double *)(v37 + v40 * v42);
        do
        {
          v117 = (int64x2_t *)v110;
          v118 = (int64x2_t *)v112;
          v119 = (float64x2_t *)v116;
          v120 = v115;
          v121 = (int64x2_t *)v111;
          v122 = (int64x2_t *)v113;
          v123 = v115 + 1;
          v124 = (float64x2_t)veorq_s8(v13, v13);
          v125 = v124;
          if ((v115 & 1) != 0)
          {
            v117 = (int64x2_t *)&v110->f64[1];
            v121 = (int64x2_t *)((char *)v111 + 8);
            v118 = (int64x2_t *)&v112->f64[1];
            v122 = (int64x2_t *)((char *)v113 + 8);
            v119 = (float64x2_t *)(v116 + 1);
            v124 = vmlaq_n_f64(v124, *v110, *v116);
            v125 = vmlaq_n_f64(v125, *v112, *v116);
            v120 = v115 - 1;
          }
          for (; v120; v120 -= 2)
          {
            v126 = *v117++;
            v127 = *v121++;
            v128 = *v118++;
            v129 = *v122++;
            v130 = *v119++;
            v124 = vmlaq_laneq_f64(vmlaq_n_f64(v124, (float64x2_t)vtrn1q_s64(v126, v127), v130.f64[0]), (float64x2_t)vtrn2q_s64(v126, v127), v130, 1);
            v125 = vmlaq_laneq_f64(vmlaq_n_f64(v125, (float64x2_t)vtrn1q_s64(v128, v129), v130.f64[0]), (float64x2_t)vtrn2q_s64(v128, v129), v130, 1);
          }
          v131 = (int64x2_t *)((char *)v117 - 8 * v123 - 8);
          v132 = (float64x2_t *)((char *)v119 - 8 * v115 - 32);
          v133 = vmulq_n_f64(*v132, a7);
          v134 = vmulq_n_f64(v132[1], a7);
          v135 = vsubq_f64(v134, v125);
          v134.f64[1] = v135.f64[1];
          a10 = *(float64x2_t *)v131;
          a11 = *(float64x2_t *)((char *)v121 - 8 * v123 - 8);
          *(_QWORD *)&a12.f64[0] = v118->i64[-v123];
          v136 = vmlsq_laneq_f64(vsubq_f64(v133, v124), (float64x2_t)vtrn2q_s64(*v131, (int64x2_t)a11), v134, 1);
          *(_QWORD *)&v134.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(v135, a12, v134, 1);
          a13 = (float64x2_t)vtrn1q_s64(*v131, (int64x2_t)a11);
          v137 = vmlsq_lane_f64(v136, a13, v134.f64[0], 0);
          v133.f64[1] = v137.f64[1];
          *(_QWORD *)&a10.f64[0] = v131[-1].i64[1];
          v13 = (int8x16_t)vmlsq_laneq_f64(v137, a10, v133, 1);
          *(_QWORD *)&v133.f64[0] = v13.i64[0];
          *v132 = v133;
          v132[1] = v134;
          v116 = (double *)((char *)v116 + v40);
          --v108;
        }
        while (v108);
      }
      v37 -= 32;
      v138 = v35 < 5;
      v35 -= 4;
    }
    while (!v138);
  }
}

void sub_239A3D920(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13)
{
  int8x16_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const double *v51;
  uint64_t v52;
  const double *v53;
  uint64_t v54;
  const double *v55;
  uint64_t v56;
  const double *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t *v78;
  uint64_t v79;
  int64x2_t *v80;
  int64x2_t *v81;
  int64x2_t *v82;
  int64x2_t *v83;
  float64x2_t *v84;
  uint64_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  double v96;
  double v97;
  double v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double *v111;
  float64x2_t *v112;
  double *v113;
  float64x2_t *v114;
  float64x2_t *v115;
  float64x2_t *v116;
  float64x2_t *v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  uint64_t v133;
  uint64_t v134;
  float64x2_t *v135;
  _OWORD *v136;
  float64x2_t *v137;
  _OWORD *v138;
  uint64_t v139;
  uint64_t v140;
  double *v141;
  int64x2_t *v142;
  int64x2_t *v143;
  float64x2_t *v144;
  uint64_t v145;
  int64x2_t *v146;
  int64x2_t *v147;
  uint64_t v148;
  float64x2_t v149;
  float64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  float64x2_t v155;
  int64x2_t *v156;
  float64x2_t *v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  int64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v16 = a4;
  v17 = a3;
  v18 = __N;
  v19 = a1;
  v20 = a1 - 1;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N >= 1)
      {
        v33 = (double *)(a3 + 8 * (v20 + (a1 - 2) * a4));
        v35 = *(v33 - 1);
        v34 = *v33;
        v36 = a7 / *(double *)(a3 + 8 * (v20 + v20 * a4));
        v37 = (double *)(a5 + 8 * v20);
        v38 = __N;
        v39 = 1.0 / v35;
        do
        {
          v40 = *(v37 - 1);
          v41 = v36 * *v37;
          *v37 = v41;
          *(v37 - 1) = v39 * (v40 * a7 - v41 * v34);
          v37 += __incX;
          --v38;
        }
        while (v38);
      }
      v20 = a1 - 3;
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *(double *)(a3 + 8 * (v20 + v20 * a4)), (double *)(a5 + 8 * v20), __incX);
      v20 = v19 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v21 = (double *)(a3 + 8 * (v20 + (a1 - 2) * a4));
      v22 = *v21;
      v23 = (double *)(a3 + 8 * (v20 + (a1 - 3) * a4));
      v25 = *(v23 - 1);
      v24 = *v23;
      v26 = a7 / *(double *)(a3 + 8 * (v20 + v20 * a4));
      v27 = 1.0 / *(v21 - 1);
      v28 = (double *)(a5 + 8 * v20);
      v29 = __N;
      v30 = 1.0 / *(v23 - 2);
      do
      {
        v31 = *(v28 - 1);
        v32 = v26 * *v28;
        *v28 = v32;
        *(double *)v13.i64 = v27 * (v31 * a7 - v32 * v22);
        *(v28 - 2) = v30 * -(v25 * *(double *)v13.i64 + v32 * v24 - *(v28 - 2) * a7);
        *(v28 - 1) = *(double *)v13.i64;
        v28 += __incX;
        --v29;
      }
      while (v29);
    }
    v20 = a1 - 4;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    v42 = v20 + 1;
    v166 = v16 + 1;
    v167 = v19;
    v43 = v18 - 3;
    v44 = 3 * __incX;
    v45 = a5 + 8 * v20 + 8;
    v46 = 32 * __incX;
    v47 = 2 * __incX;
    v48 = 8 * __incX;
    v169 = v17;
    v170 = v16;
    v168 = v18;
    do
    {
      v49 = v42 - 4;
      v50 = v17 + 8 * (v42 - 4) * v16;
      v51 = (const double *)(v50 + 8 * (v42 - 4));
      v52 = v42 - 3;
      v53 = (const double *)(v17 + 8 * (v42 - 3) * v166);
      v54 = v42 - 2;
      v55 = (const double *)(v17 + 8 * (v42 - 2) * v166);
      v56 = v42 - 1;
      v57 = (const double *)(v17 + 8 * (v42 - 1) * v166);
      v58 = vld1q_dup_f64(v51);
      v59 = vld1q_dup_f64(v53);
      v60 = vld1q_dup_f64(v55);
      v61 = vld1q_dup_f64(v57);
      v62 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v63 = vdivq_f64(v62, v58);
      v64 = vdivq_f64(v62, v59);
      v65 = vdivq_f64(v62, v60);
      v66 = vdivq_f64(v62, v61);
      if (v18 < 4)
      {
        v67 = 0;
      }
      else
      {
        v67 = 0;
        v68 = v17 + 8 * v42;
        v70 = (_QWORD *)(v68 + 8 * v52 * v16);
        v71 = (_QWORD *)(v68 + 8 * v54 * v16);
        v72 = (unint64_t *)(v68 + 8 * v56 * v16);
        v73 = v19 - v49;
        if (v19 - v49 <= 4)
          v73 = 4;
        v74 = v73 - 4;
        v75 = (double *)v45;
        do
        {
          v76 = (float64x2_t *)&v75[(unint64_t)v48 / 8];
          v77 = (float64x2_t *)&v75[v47];
          v78 = (float64x2_t *)&v75[v44];
          v79 = v74;
          v80 = (int64x2_t *)v70;
          v81 = (int64x2_t *)v72;
          v69 = (_QWORD *)(v50 + 8 * v42);
          v82 = (int64x2_t *)v69;
          v83 = (int64x2_t *)v71;
          v84 = (float64x2_t *)v75;
          v85 = v74 + 1;
          v86 = (float64x2_t)veorq_s8(v13, v13);
          v87 = v86;
          v88 = v86;
          v89 = v86;
          v90 = v86;
          v91 = v86;
          v92 = v86;
          v93 = v86;
          if ((v74 & 1) != 0)
          {
            v60.f64[0] = *(float64_t *)v69;
            v82 = (int64x2_t *)(v69 + 1);
            v61.f64[0] = *(float64_t *)v70;
            v80 = (int64x2_t *)(v70 + 1);
            v62.f64[0] = *(float64_t *)v71;
            v83 = (int64x2_t *)(v71 + 1);
            *(_QWORD *)&a13.f64[0] = *v72;
            v81 = (int64x2_t *)(v72 + 1);
            v94 = (float64x2_t)vtrn1q_s64((int64x2_t)v60, (int64x2_t)v61);
            v95 = (float64x2_t)vtrn1q_s64((int64x2_t)v62, (int64x2_t)a13);
            v84 = (float64x2_t *)(v75 + 1);
            v96 = v76->f64[0];
            v76 = (float64x2_t *)((char *)v76 + 8);
            v97 = v77->f64[0];
            v77 = (float64x2_t *)((char *)v77 + 8);
            v98 = v78->f64[0];
            v78 = (float64x2_t *)((char *)v78 + 8);
            v86 = vmlaq_n_f64(v86, v94, *v75);
            v88 = vmlaq_n_f64(v88, v94, v96);
            v90 = vmlaq_n_f64(v90, v94, v97);
            v92 = vmlaq_n_f64(v92, v94, v98);
            v87 = vmlaq_n_f64(v87, v95, *v75);
            v89 = vmlaq_n_f64(v89, v95, v96);
            v91 = vmlaq_n_f64(v91, v95, v97);
            v93 = vmlaq_n_f64(v93, v95, v98);
            v79 = v74 - 1;
          }
          for (; v79; v79 -= 2)
          {
            v99 = *v82++;
            v100 = *v80++;
            v101 = *v83++;
            v102 = *v81++;
            v103 = (float64x2_t)vtrn1q_s64(v99, v100);
            v104 = (float64x2_t)vtrn1q_s64(v101, v102);
            v105 = (float64x2_t)vtrn2q_s64(v99, v100);
            v106 = (float64x2_t)vtrn2q_s64(v101, v102);
            v107 = *v84++;
            v108 = *v76++;
            v109 = *v77++;
            v110 = *v78++;
            v86 = vmlaq_laneq_f64(vmlaq_n_f64(v86, v103, v107.f64[0]), v105, v107, 1);
            v88 = vmlaq_laneq_f64(vmlaq_n_f64(v88, v103, v108.f64[0]), v105, v108, 1);
            v90 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v103, v109.f64[0]), v105, v109, 1);
            v92 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v103, v110.f64[0]), v105, v110, 1);
            v87 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v104, v107.f64[0]), v106, v107, 1);
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v89, v104, v108.f64[0]), v106, v108, 1);
            v91 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v104, v109.f64[0]), v106, v109, 1);
            v93 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v104, v110.f64[0]), v106, v110, 1);
          }
          v111 = (double *)&v82->i64[-v85 - 1];
          v112 = (float64x2_t *)((char *)v80 - 8 * v85 - 8);
          v113 = (double *)&v83->i64[-v85];
          v114 = (float64x2_t *)((char *)v84 - 8 * v74 - 32);
          v115 = (float64x2_t *)((char *)v76 - 8 * v74 - 32);
          v116 = (float64x2_t *)((char *)v77 - 8 * v74 - 32);
          v117 = (float64x2_t *)((char *)v78 - 8 * v74 - 32);
          v118 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v114, a7), v86);
          v119 = (int64x2_t)vsubq_f64(vmulq_n_f64(v114[1], a7), v87);
          v120 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v115, a7), v88);
          v121 = (int64x2_t)vsubq_f64(vmulq_n_f64(v115[1], a7), v89);
          v122 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v116, a7), v90);
          v123 = (int64x2_t)vsubq_f64(vmulq_n_f64(v116[1], a7), v91);
          v124 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v117, a7), v92);
          v125 = (int64x2_t)vsubq_f64(vmulq_n_f64(v117[1], a7), v93);
          v126 = (float64x2_t)vtrn2q_s64(v118, v120);
          v127 = (float64x2_t)vtrn1q_s64(v118, v120);
          v128 = vmulq_f64((float64x2_t)vtrn2q_s64(v119, v121), v66);
          v129 = vmulq_f64((float64x2_t)vtrn2q_s64(v123, v125), v66);
          v130 = *(float64x2_t *)v111--;
          v60 = vmulq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v119, v121), v128, *v113, 0), v65);
          v61 = vmulq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v123, v125), v129, *v113, 0), v65);
          v62 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v126, v128, *v112, 1), v60, v112->f64[0], 0), v64);
          a13 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v122, v124), v129, *v112, 1), v61, v112->f64[0], 0), v64);
          v131 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v127, v128, v130, 1), v60, v130.f64[0], 0), v62, *v111, 0), v63);
          v132 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64((float64x2_t)vtrn1q_s64(v122, v124), v129, v130, 1), v61, v130.f64[0], 0), a13, *v111, 0), v63);
          v13 = (int8x16_t)vtrn1q_s64(v131, (int64x2_t)v62);
          *v114 = (float64x2_t)v13;
          v114[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v60, (int64x2_t)v128);
          *(int64x2_t *)v115 = vtrn2q_s64(v131, (int64x2_t)v62);
          v115[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v60, (int64x2_t)v128);
          *(int64x2_t *)v116 = vtrn1q_s64(v132, (int64x2_t)a13);
          v116[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v61, (int64x2_t)v129);
          *(int64x2_t *)v117 = vtrn2q_s64(v132, (int64x2_t)a13);
          v117[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v61, (int64x2_t)v129);
          v67 += 4;
          v75 = (double *)((char *)v75 + v46);
        }
        while (v67 < v43);
      }
      v18 = v168;
      v17 = v169;
      v133 = v168 - v67;
      v16 = v170;
      v19 = v167;
      if (v168 > v67)
      {
        v134 = v169 + 8 * v42;
        v135 = (float64x2_t *)(v50 + 8 * v42);
        v136 = (_OWORD *)(v134 + 8 * v52 * v170);
        v137 = (float64x2_t *)(v134 + 8 * v54 * v170);
        v138 = (_OWORD *)(v134 + 8 * v56 * v170);
        v139 = v167 - v49;
        if (v167 - v49 <= 4)
          v139 = 4;
        v140 = v139 - 4;
        v141 = (double *)(v45 + v48 * v67);
        do
        {
          v142 = (int64x2_t *)v135;
          v143 = (int64x2_t *)v137;
          v144 = (float64x2_t *)v141;
          v145 = v140;
          v146 = (int64x2_t *)v136;
          v147 = (int64x2_t *)v138;
          v148 = v140 + 1;
          v149 = (float64x2_t)veorq_s8(v13, v13);
          v150 = v149;
          if ((v140 & 1) != 0)
          {
            v142 = (int64x2_t *)&v135->f64[1];
            v146 = (int64x2_t *)((char *)v136 + 8);
            v143 = (int64x2_t *)&v137->f64[1];
            v147 = (int64x2_t *)((char *)v138 + 8);
            v144 = (float64x2_t *)(v141 + 1);
            v149 = vmlaq_n_f64(v149, *v135, *v141);
            v150 = vmlaq_n_f64(v150, *v137, *v141);
            v145 = v140 - 1;
          }
          for (; v145; v145 -= 2)
          {
            v151 = *v142++;
            v152 = *v146++;
            v153 = *v143++;
            v154 = *v147++;
            v155 = *v144++;
            v149 = vmlaq_laneq_f64(vmlaq_n_f64(v149, (float64x2_t)vtrn1q_s64(v151, v152), v155.f64[0]), (float64x2_t)vtrn2q_s64(v151, v152), v155, 1);
            v150 = vmlaq_laneq_f64(vmlaq_n_f64(v150, (float64x2_t)vtrn1q_s64(v153, v154), v155.f64[0]), (float64x2_t)vtrn2q_s64(v153, v154), v155, 1);
          }
          v156 = (int64x2_t *)((char *)v142 - 8 * v148 - 8);
          v157 = (float64x2_t *)((char *)v144 - 8 * v140 - 32);
          v158 = vsubq_f64(vmulq_n_f64(v157[1], a7), v150);
          v159 = vmulq_f64(v158, v66);
          v160 = *(float64x2_t *)v156;
          v161 = *(int64x2_t *)((char *)v146 - 8 * v148 - 8);
          *(_QWORD *)&v62.f64[0] = v143->i64[-v148];
          v162 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(*v157, a7), v149), (float64x2_t)vtrn2q_s64(*v156, v161), v159, 1);
          v159.f64[0] = vmlsq_laneq_f64(v158, v62, v159, 1).f64[0] * v65.f64[0];
          a13 = (float64x2_t)vtrn1q_s64(*v156, v161);
          v163 = vmlsq_lane_f64(v162, a13, v159.f64[0], 0);
          v164 = vmulq_f64(v163, v64);
          *(_QWORD *)&v160.f64[0] = v156[-1].i64[1];
          v13 = (int8x16_t)vmulq_f64(vmlsq_laneq_f64(v163, v160, v164, 1), v63);
          *(_QWORD *)&v164.f64[0] = v13.i64[0];
          *v157 = v164;
          v157[1] = v159;
          v141 = (double *)((char *)v141 + v48);
          --v133;
        }
        while (v133);
      }
      v45 -= 32;
      v165 = v42 < 5;
      v42 -= 4;
    }
    while (!v165);
  }
}

void sub_239A3DF5C(int a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, double *a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, int a17, char *a18, int a19)
{
  int v20;
  int v21;
  int v25;
  char *v28;
  char *v29;
  int v30;
  int v32;
  int v33;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char vars0;

  v20 = a7;
  v21 = a6;
  v25 = a2;
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v30 = cblas_errprn(1, 2000, "Order must be %d or %d, but is set to %d");
      goto LABEL_46;
    }
    if ((_DWORD)a2 == 142)
    {
      if (a17 < (int)a7 || a17 <= 0)
      {
        v40 = a17;
        v42 = a7;
        v29 = "lda must be >= MAX(N,1): lda=%d N=%d";
        goto LABEL_39;
      }
    }
    else
    {
      if ((_DWORD)a2 != 141)
      {
        v43 = a2;
        v40 = 142;
        v42 = 141;
        v29 = "SIDE must be %d or %d, but is set to %d";
        v36 = 2;
        goto LABEL_41;
      }
      if (a17 < (int)a6 || a17 <= 0)
      {
        v40 = a17;
        v42 = a6;
        v29 = "lda must be >= MAX(M,1): lda=%d M=%d";
LABEL_39:
        v36 = 10;
LABEL_41:
        v33 = cblas_errprn(v36, 2000, v29, v40, v42, v43);
        goto LABEL_43;
      }
    }
    v33 = 2000;
LABEL_43:
    if (a19 >= v20 && a19 > 0)
      goto LABEL_47;
    v30 = cblas_errprn(12, v33, "ldb must be >= MAX(N,1): ldb=%d N=%d");
LABEL_46:
    v33 = v30;
    goto LABEL_47;
  }
  if ((_DWORD)a2 == 142)
  {
    if (a17 >= (int)a7 && a17 > 0)
      goto LABEL_24;
    v39 = a17;
    v41 = a7;
    v28 = "lda must be >= MAX(N,1): lda=%d N=%d";
  }
  else
  {
    if ((_DWORD)a2 != 141)
    {
      v41 = 141;
      v43 = a2;
      v39 = 142;
      v28 = "SIDE must be %d or %d, but is set to %d";
      v32 = 2;
      goto LABEL_26;
    }
    if (a17 >= (int)a6 && a17 > 0)
    {
LABEL_24:
      v33 = 2000;
      goto LABEL_27;
    }
    v39 = a17;
    v41 = a6;
    v28 = "lda must be >= MAX(M,1): lda=%d M=%d";
  }
  v32 = 10;
LABEL_26:
  v33 = cblas_errprn(v32, 2000, v28, v39, v41, v43);
LABEL_27:
  if (a19 < v21 || a19 <= 0)
  {
    v30 = cblas_errprn(12, v33, "ldb must be >= MAX(M,1): ldb=%d M=%d");
    goto LABEL_46;
  }
LABEL_47:
  if ((a3 - 123) <= 0xFFFFFFFD)
    v33 = cblas_errprn(3, v33, "UPLO must be %d or %d, but is set to %d", 121, 122, a3);
  if ((a4 - 114) <= 0xFFFFFFFC)
    v33 = cblas_errprn(4, v33, "TransA must be %d, %d or %d, but is set to %d", 111, 112, 113, a4);
  if ((a5 - 133) > 0xFFFFFFFD)
  {
    if ((v21 & 0x80000000) == 0)
      goto LABEL_53;
LABEL_58:
    v33 = cblas_errprn(6, v33, "M cannot be less than zero; it is set to %d.", v21);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_59;
  }
  v33 = cblas_errprn(5, v33, "UPLO must be %d or %d, but is set to %d", 132, 131, a5);
  if (v21 < 0)
    goto LABEL_58;
LABEL_53:
  if ((v20 & 0x80000000) == 0)
    goto LABEL_54;
LABEL_59:
  v33 = cblas_errprn(7, v33, "N cannot be less than zero; it is set to %d.", v20);
LABEL_54:
  if (v33 == 2000)
  {
    if (a1 == 102)
    {
      sub_239A41604(v25, a3, a4, a5, v21, v20, a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a18, a19, 0,
        0,
        1,
        (uint64_t)a8,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        v54,
        v55,
        v56,
        vars0);
    }
    else
    {
      if (v25 == 141)
        v37 = 142;
      else
        v37 = 141;
      if (a3 == 121)
        v38 = 122;
      else
        v38 = 121;
      sub_239A41604(v37, v38, a4, a5, v20, v21, a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a18, a19, 0,
        0,
        1,
        (uint64_t)a8,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        v54,
        v55,
        v56,
        vars0);
    }
  }
  else
  {
    cblas_xerbla(v33, "cblas_dtrsm", "");
  }
}

uint64_t sub_239A3E320(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t *v22;
  int64x2_t v23;
  float32x2_t *v24;
  int64x2_t v25;
  float32x2_t *v26;
  int64x2_t v27;
  float32x2_t *v28;
  int64x2_t v29;
  float32x4_t *v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  BOOL v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  __int32 *v71;
  __int32 *v72;
  float32x2_t v73;
  float v74;
  float32_t v75;
  float32_t v76;
  float32_t v77;
  __int32 *v78;
  float32x2_t v79;
  float32_t v80;
  float32_t v81;
  float32_t v82;
  float32_t v83;
  float32_t v84;
  float32_t v85;
  uint64_t j;
  int32x4_t *v87;
  int32x4_t *v88;
  float32x4_t *v89;
  float32x4_t *v90;
  uint64_t v91;
  float32x4_t *v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t *v95;
  int32x4_t v96;
  float32x2_t *v97;
  int32x4_t v98;
  float32x4_t *v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float v107;
  float v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t *v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t *v116;
  float32x2_t *v117;
  __int32 *v118;
  __int32 *v119;
  float32x2_t v120;
  float v121;
  float32_t v122;
  __int32 *v123;
  float32x2_t v124;
  float32_t v125;
  float32_t v126;
  uint64_t k;
  float32x4_t *v128;
  float32x4_t *v129;
  uint64_t v130;
  float32x4_t *v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x2_t *v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t *v147;
  __int32 *v148;
  __int32 *v149;
  float32x2_t v150;
  float v151;
  __int32 *v152;
  float32x2_t v153;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v10 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v30 = vmulq_n_f32(v49, a7))
    {
      i -= 4;
      v12 = (int64x2_t *)(a5 + v9 * v7 + 4 * i);
      v13 = (int64x2_t *)((char *)v12 + v7);
      v14 = (int64x2_t *)((char *)v12 + 2 * v7);
      v15 = (int64x2_t *)((char *)v12 + 2 * v7 + v7);
      v16 = (float32x4_t *)(a3 + 4 * i);
      v17 = (float32x4_t *)((char *)v16 + i * v8);
      v18 = i;
      v20 = *v17;
      v19 = (float32x4_t *)((char *)v17 + v8);
      v21 = *v19;
      v22 = (float32x2_t *)&v19->u32[(unint64_t)v8 / 4 + 2];
      v23 = *v12;
      v24 = (float32x2_t *)(a5 + v9 * v7);
      v25 = *v13;
      v26 = (float32x2_t *)((char *)v13 - 4 * i);
      v27 = *v14;
      v28 = (float32x2_t *)((char *)v14 - 4 * i);
      v29 = *v15;
      v30 = (float32x4_t *)((char *)v15 - 4 * i);
      v31 = (int32x4_t)vtrn1q_s64(v23, v27);
      v32 = (int32x4_t)vtrn1q_s64(v25, v29);
      v33 = (int32x4_t)vtrn2q_s64(v23, v27);
      v34 = (int32x4_t)vtrn2q_s64(v25, v29);
      v35 = (float32x4_t)vtrn1q_s32(v31, v32);
      v36 = (float32x4_t)vtrn2q_s32(v31, v32);
      v37 = (float32x4_t)vtrn1q_s32(v33, v34);
      v38 = (int64x2_t)vmulq_n_f32(v35, v20.f32[0]);
      v39 = (int64x2_t)vaddq_f32(vmulq_lane_f32(v35, *(float32x2_t *)v20.f32, 1), vmulq_lane_f32(v36, *(float32x2_t *)v21.f32, 1));
      v40 = (int64x2_t)vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v35, v20, 2), v37, COERCE_FLOAT(*v22)), vmulq_laneq_f32(v36, v21, 2));
      v41 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v35, v20, 3), v37, *v22, 1), vmulq_laneq_f32(v36, v21, 3)), vmulq_n_f32((float32x4_t)vtrn2q_s32(v33, v34), v22->f32[(unint64_t)v8 / 4 + 1]));
      v42 = (int32x4_t)vtrn1q_s64(v38, v40);
      v43 = (int32x4_t)vtrn1q_s64(v39, v41);
      v44 = (int32x4_t)vtrn2q_s64(v38, v40);
      v45 = (int32x4_t)vtrn2q_s64(v39, v41);
      v46 = (float32x4_t)vtrn1q_s32(v42, v43);
      v47 = (float32x4_t)vtrn2q_s32(v42, v43);
      v48 = (float32x4_t)vtrn1q_s32(v44, v45);
      v49 = (float32x4_t)vtrn2q_s32(v44, v45);
      if ((i & 1) != 0)
      {
        v50 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v8);
        v51 = v24->f32[0];
        v24 = (float32x2_t *)((char *)v24 + 4);
        v52 = v26->f32[0];
        v26 = (float32x2_t *)((char *)v26 + 4);
        v53 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v54 = v30->f32[0];
        v30 = (float32x4_t *)((char *)v30 + 4);
        v46 = vmlaq_n_f32(v46, v50, v51);
        v47 = vmlaq_n_f32(v47, v50, v52);
        v48 = vmlaq_n_f32(v48, v50, v53);
        v49 = vmlaq_n_f32(v49, v50, v54);
        v18 = i - 1;
      }
      if (v18)
      {
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = 0uLL;
        do
        {
          v60 = *v16;
          v59 = (float32x4_t *)((char *)v16 + v8);
          v61 = *v59;
          v16 = (float32x4_t *)((char *)v59 + v8);
          v62 = *v24++;
          v63 = *v26++;
          v64 = *v28++;
          v65 = *(float32x2_t *)v30->f32;
          v30 = (float32x4_t *)((char *)v30 + 8);
          v46 = vmlaq_n_f32(v46, v60, v62.f32[0]);
          v47 = vmlaq_n_f32(v47, v60, v63.f32[0]);
          v48 = vmlaq_n_f32(v48, v60, v64.f32[0]);
          v49 = vmlaq_n_f32(v49, v60, v65.f32[0]);
          v55 = vmlaq_lane_f32(v55, v61, v62, 1);
          v56 = vmlaq_lane_f32(v56, v61, v63, 1);
          v57 = vmlaq_lane_f32(v57, v61, v64, 1);
          v58 = vmlaq_lane_f32(v58, v61, v65, 1);
          v66 = v18 <= 2;
          v18 -= 2;
        }
        while (!v66);
        v46 = vaddq_f32(v46, v55);
        v47 = vaddq_f32(v47, v56);
        v48 = vaddq_f32(v48, v57);
        v49 = vaddq_f32(v49, v58);
      }
      *(float32x4_t *)v24->f32 = vmulq_n_f32(v46, a7);
      *(float32x4_t *)v26->f32 = vmulq_n_f32(v47, a7);
      *(float32x4_t *)v28->f32 = vmulq_n_f32(v48, a7);
    }
    if (i)
    {
      v67 = (float32x2_t *)(a5 + v9 * v7);
      v68 = (float32x2_t *)((char *)v67 + v7);
      v69 = &v67[(unint64_t)v7 / 4];
      v70 = (float32x2_t *)((char *)&v67[(unint64_t)v7 / 4] + v7);
      v71 = (__int32 *)(a3 + 4 * (i - 1));
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v73.i32[0] = *v71;
          v72 = &v71[(unint64_t)v8 / 4];
          v73.i32[1] = *v72;
          v74 = *(float *)&v72[(unint64_t)v8 / 4];
          v71 = &v72[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v75 = (float)(vaddv_f32(vmul_f32(v73, *v68)) + (float)(v68[1].f32[0] * v74)) * a7;
          v76 = (float)(vaddv_f32(vmul_f32(v73, *v69)) + (float)(v69[1].f32[0] * v74)) * a7;
          v77 = (float)(vaddv_f32(vmul_f32(v73, *v70)) + (float)(v70[1].f32[0] * v74)) * a7;
          v67[1].f32[0] = (float)(vaddv_f32(vmul_f32(v73, *v67)) + (float)(v67[1].f32[0] * v74)) * a7;
          v68[1].f32[0] = v75;
          v69[1].f32[0] = v76;
          v70[1].f32[0] = v77;
        }
        v79.i32[0] = *v71;
        v78 = &v71[(unint64_t)v8 / 4];
        v79.i32[1] = *v78;
        v71 = &v78[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
        v80 = vaddv_f32(vmul_f32(v79, *v68)) * a7;
        v81 = vaddv_f32(vmul_f32(v79, *v69)) * a7;
        v82 = vaddv_f32(vmul_f32(v79, *v70)) * a7;
        v67->f32[1] = vaddv_f32(vmul_f32(v79, *v67)) * a7;
        v68->f32[1] = v80;
        v69->f32[1] = v81;
        v70->f32[1] = v82;
      }
      v83 = (float)(*(float *)v71 * v68->f32[0]) * a7;
      v84 = (float)(*(float *)v71 * v69->f32[0]) * a7;
      v85 = (float)(*(float *)v71 * v70->f32[0]) * a7;
      v67->f32[0] = (float)(*(float *)v71 * v67->f32[0]) * a7;
      v68->f32[0] = v83;
      v69->f32[0] = v84;
      v70->f32[0] = v85;
    }
    v9 += 4;
    v66 = v10 <= 4;
    v10 -= 4;
  }
  while (!v66);
  v66 = v10 <= -3;
  a2 = v10 + 3;
  if (!v66)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v99 = vmulq_n_f32(v105, a7))
      {
        j -= 4;
        v87 = (int32x4_t *)(a5 + v9 * v7 + 4 * j);
        v88 = (int32x4_t *)((char *)v87 + v7);
        v89 = (float32x4_t *)(a3 + 4 * j);
        v90 = (float32x4_t *)((char *)v89 + j * v8);
        v91 = j;
        v93 = *v90;
        v92 = (float32x4_t *)((char *)v90 + v8);
        v94 = *v92;
        v95 = (float32x2_t *)&v92->u32[(unint64_t)v8 / 4 + 2];
        v96 = *v87;
        v97 = (float32x2_t *)(a5 + v9 * v7);
        v98 = *v88;
        v99 = (float32x4_t *)((char *)v88 - 4 * j);
        v100 = vtrn1q_s32(v96, v98);
        v101 = vtrn2q_s32(v96, v98);
        *(float32x2_t *)v102.i8 = vmul_n_f32(*(float32x2_t *)v100.i8, v93.f32[0]);
        *(float32x2_t *)v103.i8 = vadd_f32(vmul_lane_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v93.f32, 1), vmul_lane_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v94.f32, 1));
        v102.u64[1] = (unint64_t)vadd_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v100.i8, v93, 2), (float32x2_t)v100.u64[1], COERCE_FLOAT(*v95)), vmul_laneq_f32(*(float32x2_t *)v101.i8, v94, 2));
        v103.u64[1] = (unint64_t)vadd_f32(vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v100.i8, v93, 3), (float32x2_t)v100.u64[1], *v95, 1), vmul_laneq_f32(*(float32x2_t *)v101.i8, v94, 3)), vmul_n_f32((float32x2_t)v101.u64[1], v95->f32[(unint64_t)v8 / 4 + 1]));
        v104 = (float32x4_t)vtrn1q_s32(v102, v103);
        v105 = (float32x4_t)vtrn2q_s32(v102, v103);
        if ((j & 1) != 0)
        {
          v106 = *v89;
          v89 = (float32x4_t *)((char *)v89 + v8);
          v107 = v97->f32[0];
          v97 = (float32x2_t *)((char *)v97 + 4);
          v108 = v99->f32[0];
          v99 = (float32x4_t *)((char *)v99 + 4);
          v104 = vmlaq_n_f32(v104, v106, v107);
          v105 = vmlaq_n_f32(v105, v106, v108);
          v91 = j - 1;
        }
        if (v91)
        {
          v109 = 0uLL;
          v110 = 0uLL;
          do
          {
            v112 = *v89;
            v111 = (float32x4_t *)((char *)v89 + v8);
            v113 = *v111;
            v89 = (float32x4_t *)((char *)v111 + v8);
            v114 = *v97++;
            v115 = *(float32x2_t *)v99->f32;
            v99 = (float32x4_t *)((char *)v99 + 8);
            v104 = vmlaq_n_f32(v104, v112, v114.f32[0]);
            v105 = vmlaq_n_f32(v105, v112, v115.f32[0]);
            v109 = vmlaq_lane_f32(v109, v113, v114, 1);
            v110 = vmlaq_lane_f32(v110, v113, v115, 1);
            v66 = v91 <= 2;
            v91 -= 2;
          }
          while (!v66);
          v104 = vaddq_f32(v104, v109);
          v105 = vaddq_f32(v105, v110);
        }
        *(float32x4_t *)v97->f32 = vmulq_n_f32(v104, a7);
      }
      if (j)
      {
        v116 = (float32x2_t *)(a5 + v9 * v7);
        v117 = (float32x2_t *)((char *)v116 + v7);
        v118 = (__int32 *)(a3 + 4 * (j - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v120.i32[0] = *v118;
            v119 = &v118[(unint64_t)v8 / 4];
            v120.i32[1] = *v119;
            v121 = *(float *)&v119[(unint64_t)v8 / 4];
            v118 = &v119[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v122 = (float)(vaddv_f32(vmul_f32(v120, *v117)) + (float)(v117[1].f32[0] * v121)) * a7;
            v116[1].f32[0] = (float)(vaddv_f32(vmul_f32(v120, *v116)) + (float)(v116[1].f32[0] * v121)) * a7;
            v117[1].f32[0] = v122;
          }
          v124.i32[0] = *v118;
          v123 = &v118[(unint64_t)v8 / 4];
          v124.i32[1] = *v123;
          v118 = &v123[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v125 = vaddv_f32(vmul_f32(v124, *v117)) * a7;
          v116->f32[1] = vaddv_f32(vmul_f32(v124, *v116)) * a7;
          v117->f32[1] = v125;
        }
        v126 = (float)(*(float *)v118 * v117->f32[0]) * a7;
        v116->f32[0] = (float)(*(float *)v118 * v116->f32[0]) * a7;
        v117->f32[0] = v126;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v137 = vmulq_n_f32(v139, a7))
      {
        k -= 4;
        v128 = (float32x4_t *)(a3 + 4 * k);
        v129 = (float32x4_t *)((char *)v128 + k * v8);
        v130 = k;
        v132 = *v129;
        v131 = (float32x4_t *)((char *)v129 + v8);
        v133 = *v131;
        v134 = (float32x2_t *)&v131->u32[(unint64_t)v8 / 4 + 2];
        v135 = *(float32x2_t *)((char *)v134 + v8);
        v136 = *(float32x4_t *)(a5 + v9 * v7 + 4 * k);
        v137 = (float32x4_t *)(a5 + v9 * v7);
        v133.i32[0] = 0;
        v135.i32[0] = 0;
        v138.i64[0] = 0;
        *(float32x2_t *)&v138.u32[2] = vmla_laneq_f32(vmul_laneq_f32(*v134, v136, 2), v135, v136, 3);
        v139 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, v136.f32[0]), v133, *(float32x2_t *)v136.f32, 1), v138);
        if ((k & 1) != 0)
        {
          v140 = *v128;
          v128 = (float32x4_t *)((char *)v128 + v8);
          v141 = v137->f32[0];
          v137 = (float32x4_t *)((char *)v137 + 4);
          v139 = vmlaq_n_f32(v139, v140, v141);
          v130 = k - 1;
        }
        if (v130)
        {
          v142 = 0uLL;
          do
          {
            v144 = *v128;
            v143 = (float32x4_t *)((char *)v128 + v8);
            v145 = *v143;
            v128 = (float32x4_t *)((char *)v143 + v8);
            v146 = *(float32x2_t *)v137->f32;
            v137 = (float32x4_t *)((char *)v137 + 8);
            v139 = vmlaq_n_f32(v139, v144, v146.f32[0]);
            v142 = vmlaq_lane_f32(v142, v145, v146, 1);
            v66 = v130 <= 2;
            v130 -= 2;
          }
          while (!v66);
          v139 = vaddq_f32(v139, v142);
        }
      }
      if (k)
      {
        v147 = (float32x2_t *)(a5 + v9 * v7);
        v148 = (__int32 *)(a3 + 4 * (k - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v150.i32[0] = *v148;
            v149 = &v148[(unint64_t)v8 / 4];
            v150.i32[1] = *v149;
            v151 = *(float *)&v149[(unint64_t)v8 / 4];
            v148 = &v149[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v147[1].f32[0] = (float)(vaddv_f32(vmul_f32(v150, *v147)) + (float)(v147[1].f32[0] * v151)) * a7;
          }
          v153.i32[0] = *v148;
          v152 = &v148[(unint64_t)v8 / 4];
          v153.i32[1] = *v152;
          v148 = &v152[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v147->f32[1] = vaddv_f32(vmul_f32(v153, *v147)) * a7;
        }
        v147->f32[0] = (float)(*(float *)v148 * v147->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_239A3E990(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x2_t *v20;
  int64x2_t v21;
  float32x2_t *v22;
  int64x2_t v23;
  float32x2_t *v24;
  int64x2_t v25;
  float32x2_t *v26;
  int64x2_t v27;
  float32x4_t *v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  BOOL v63;
  float32x2_t *v64;
  float32x2_t *v65;
  float32x2_t *v66;
  float32x2_t *v67;
  __int32 *v68;
  __int32 *v69;
  float32x2_t v70;
  float32_t v71;
  float32_t v72;
  float32_t v73;
  float32_t v74;
  float32_t v75;
  float32_t v76;
  float32_t v77;
  float32_t v78;
  float32_t v79;
  uint64_t j;
  int32x4_t *v81;
  int32x4_t *v82;
  float32x4_t *v83;
  float32x4_t *v84;
  uint64_t v85;
  float32x4_t v86;
  float32x2_t *v87;
  int32x4_t v88;
  float32x2_t *v89;
  int32x4_t v90;
  float32x4_t *v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float v99;
  float v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t *v108;
  float32x2_t *v109;
  __int32 *v110;
  __int32 *v111;
  float32x2_t v112;
  float32_t v113;
  float32_t v114;
  float32_t v115;
  uint64_t k;
  float32x4_t *v117;
  float32x4_t *v118;
  uint64_t v119;
  float32x4_t v120;
  float32x2_t *v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float32x4_t v129;
  float32x4_t *v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t v133;
  float32x2_t *v134;
  __int32 *v135;
  __int32 *v136;
  float32x2_t v137;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v10 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v28 = vmulq_n_f32(v46, a7))
    {
      i -= 4;
      v12 = (int64x2_t *)(a5 + v9 * v7 + 4 * i);
      v13 = (int64x2_t *)((char *)v12 + v7);
      v14 = (int64x2_t *)((char *)v12 + 2 * v7);
      v15 = (int64x2_t *)((char *)v12 + 2 * v7 + v7);
      v16 = (float32x4_t *)(a3 + 4 * i);
      v17 = (float32x4_t *)((char *)v16 + i * v8);
      v18 = i;
      v19 = *v17;
      v20 = (float32x2_t *)&v17->u32[(unint64_t)v8 / 4 + 2];
      v21 = *v12;
      v22 = (float32x2_t *)(a5 + v9 * v7);
      v23 = *v13;
      v24 = (float32x2_t *)((char *)v13 - 4 * i);
      v25 = *v14;
      v26 = (float32x2_t *)((char *)v14 - 4 * i);
      v27 = *v15;
      v28 = (float32x4_t *)((char *)v15 - 4 * i);
      v29 = (int32x4_t)vtrn1q_s64(v21, v25);
      v30 = (int32x4_t)vtrn1q_s64(v23, v27);
      v31 = (int32x4_t)vtrn2q_s64(v21, v25);
      v32 = (int32x4_t)vtrn2q_s64(v23, v27);
      v33 = (float32x4_t)vtrn1q_s32(v29, v30);
      v34 = (float32x4_t)vtrn2q_s32(v29, v30);
      v35 = (float32x4_t)vtrn1q_s32(v31, v32);
      v36 = (int64x2_t)vmlaq_lane_f32(v34, v33, *(float32x2_t *)v19.f32, 1);
      v37 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(v35, v33, v19, 2), vmulq_n_f32(v34, COERCE_FLOAT(*v20)));
      v38 = (int64x2_t)vaddq_f32(vmlaq_n_f32(vmlaq_laneq_f32((float32x4_t)vtrn2q_s32(v31, v32), v33, v19, 3), v35, v20->f32[(unint64_t)v8 / 4 + 1]), vmulq_lane_f32(v34, *v20, 1));
      v39 = (int32x4_t)vtrn1q_s64((int64x2_t)v33, v37);
      v40 = (int32x4_t)vtrn1q_s64(v36, v38);
      v41 = (int32x4_t)vtrn2q_s64((int64x2_t)v33, v37);
      v42 = (int32x4_t)vtrn2q_s64(v36, v38);
      v43 = (float32x4_t)vtrn1q_s32(v39, v40);
      v44 = (float32x4_t)vtrn2q_s32(v39, v40);
      v45 = (float32x4_t)vtrn1q_s32(v41, v42);
      v46 = (float32x4_t)vtrn2q_s32(v41, v42);
      if ((i & 1) != 0)
      {
        v47 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v8);
        v48 = v22->f32[0];
        v22 = (float32x2_t *)((char *)v22 + 4);
        v49 = v24->f32[0];
        v24 = (float32x2_t *)((char *)v24 + 4);
        v50 = v26->f32[0];
        v26 = (float32x2_t *)((char *)v26 + 4);
        v51 = v28->f32[0];
        v28 = (float32x4_t *)((char *)v28 + 4);
        v43 = vmlaq_n_f32(v43, v47, v48);
        v44 = vmlaq_n_f32(v44, v47, v49);
        v45 = vmlaq_n_f32(v45, v47, v50);
        v46 = vmlaq_n_f32(v46, v47, v51);
        v18 = i - 1;
      }
      if (v18)
      {
        v52 = 0uLL;
        v53 = 0uLL;
        v54 = 0uLL;
        v55 = 0uLL;
        do
        {
          v57 = *v16;
          v56 = (float32x4_t *)((char *)v16 + v8);
          v58 = *v56;
          v16 = (float32x4_t *)((char *)v56 + v8);
          v59 = *v22++;
          v60 = *v24++;
          v61 = *v26++;
          v62 = *(float32x2_t *)v28->f32;
          v28 = (float32x4_t *)((char *)v28 + 8);
          v43 = vmlaq_n_f32(v43, v57, v59.f32[0]);
          v44 = vmlaq_n_f32(v44, v57, v60.f32[0]);
          v45 = vmlaq_n_f32(v45, v57, v61.f32[0]);
          v46 = vmlaq_n_f32(v46, v57, v62.f32[0]);
          v52 = vmlaq_lane_f32(v52, v58, v59, 1);
          v53 = vmlaq_lane_f32(v53, v58, v60, 1);
          v54 = vmlaq_lane_f32(v54, v58, v61, 1);
          v55 = vmlaq_lane_f32(v55, v58, v62, 1);
          v63 = v18 <= 2;
          v18 -= 2;
        }
        while (!v63);
        v43 = vaddq_f32(v43, v52);
        v44 = vaddq_f32(v44, v53);
        v45 = vaddq_f32(v45, v54);
        v46 = vaddq_f32(v46, v55);
      }
      *(float32x4_t *)v22->f32 = vmulq_n_f32(v43, a7);
      *(float32x4_t *)v24->f32 = vmulq_n_f32(v44, a7);
      *(float32x4_t *)v26->f32 = vmulq_n_f32(v45, a7);
    }
    if (i)
    {
      v64 = (float32x2_t *)(a5 + v9 * v7);
      v65 = (float32x2_t *)((char *)v64 + v7);
      v66 = &v64[(unint64_t)v7 / 4];
      v67 = (float32x2_t *)((char *)&v64[(unint64_t)v7 / 4] + v7);
      v68 = (__int32 *)(a3 + 4 * (i - 1));
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v70.i32[0] = *v68;
          v69 = &v68[(unint64_t)v8 / 4];
          v70.i32[1] = *v69;
          v68 = &v69[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v71 = (float)(vaddv_f32(vmul_f32(v70, *v65)) + v65[1].f32[0]) * a7;
          v72 = (float)(vaddv_f32(vmul_f32(v70, *v66)) + v66[1].f32[0]) * a7;
          v73 = (float)(vaddv_f32(vmul_f32(v70, *v67)) + v67[1].f32[0]) * a7;
          v64[1].f32[0] = (float)(vaddv_f32(vmul_f32(v70, *v64)) + v64[1].f32[0]) * a7;
          v65[1].f32[0] = v71;
          v66[1].f32[0] = v72;
          v67[1].f32[0] = v73;
        }
        v74 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v65)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v65)))
            * a7;
        v75 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v66)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v66)))
            * a7;
        v76 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v67)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v67)))
            * a7;
        v64->f32[1] = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v64))
                            + COERCE_FLOAT(HIDWORD(*(unint64_t *)v64)))
                    * a7;
        v65->f32[1] = v74;
        v66->f32[1] = v75;
        v67->f32[1] = v76;
      }
      v77 = v65->f32[0] * a7;
      v78 = v66->f32[0] * a7;
      v79 = v67->f32[0] * a7;
      v64->f32[0] = v64->f32[0] * a7;
      v65->f32[0] = v77;
      v66->f32[0] = v78;
      v67->f32[0] = v79;
    }
    v9 += 4;
    v63 = v10 <= 4;
    v10 -= 4;
  }
  while (!v63);
  v63 = v10 <= -3;
  a2 = v10 + 3;
  if (!v63)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v91 = vmulq_n_f32(v97, a7))
      {
        j -= 4;
        v81 = (int32x4_t *)(a5 + v9 * v7 + 4 * j);
        v82 = (int32x4_t *)((char *)v81 + v7);
        v83 = (float32x4_t *)(a3 + 4 * j);
        v84 = (float32x4_t *)((char *)v83 + j * v8);
        v85 = j;
        v86 = *v84;
        v87 = (float32x2_t *)&v84->u32[(unint64_t)v8 / 4 + 2];
        v88 = *v81;
        v89 = (float32x2_t *)(a5 + v9 * v7);
        v90 = *v82;
        v91 = (float32x4_t *)((char *)v82 - 4 * j);
        v92 = vtrn1q_s32(v88, v90);
        v93 = vtrn2q_s32(v88, v90);
        *(float32x2_t *)v94.i8 = vmla_lane_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v92.i8, *(float32x2_t *)v86.f32, 1);
        v95 = vadd_f32(vmla_n_f32(vmla_laneq_f32((float32x2_t)v93.u64[1], *(float32x2_t *)v92.i8, v86, 3), (float32x2_t)v92.u64[1], v87->f32[(unint64_t)v8 / 4 + 1]), vmul_lane_f32(*(float32x2_t *)v93.i8, *v87, 1));
        v92.u64[1] = (unint64_t)vadd_f32(vmla_laneq_f32((float32x2_t)v92.u64[1], *(float32x2_t *)v92.i8, v86, 2), vmul_n_f32(*(float32x2_t *)v93.i8, COERCE_FLOAT(*v87)));
        v94.u64[1] = (unint64_t)v95;
        v96 = (float32x4_t)vtrn1q_s32(v92, v94);
        v97 = (float32x4_t)vtrn2q_s32(v92, v94);
        if ((j & 1) != 0)
        {
          v98 = *v83;
          v83 = (float32x4_t *)((char *)v83 + v8);
          v99 = v89->f32[0];
          v89 = (float32x2_t *)((char *)v89 + 4);
          v100 = v91->f32[0];
          v91 = (float32x4_t *)((char *)v91 + 4);
          v96 = vmlaq_n_f32(v96, v98, v99);
          v97 = vmlaq_n_f32(v97, v98, v100);
          v85 = j - 1;
        }
        if (v85)
        {
          v101 = 0uLL;
          v102 = 0uLL;
          do
          {
            v104 = *v83;
            v103 = (float32x4_t *)((char *)v83 + v8);
            v105 = *v103;
            v83 = (float32x4_t *)((char *)v103 + v8);
            v106 = *v89++;
            v107 = *(float32x2_t *)v91->f32;
            v91 = (float32x4_t *)((char *)v91 + 8);
            v96 = vmlaq_n_f32(v96, v104, v106.f32[0]);
            v97 = vmlaq_n_f32(v97, v104, v107.f32[0]);
            v101 = vmlaq_lane_f32(v101, v105, v106, 1);
            v102 = vmlaq_lane_f32(v102, v105, v107, 1);
            v63 = v85 <= 2;
            v85 -= 2;
          }
          while (!v63);
          v96 = vaddq_f32(v96, v101);
          v97 = vaddq_f32(v97, v102);
        }
        *(float32x4_t *)v89->f32 = vmulq_n_f32(v96, a7);
      }
      if (j)
      {
        v108 = (float32x2_t *)(a5 + v9 * v7);
        v109 = (float32x2_t *)((char *)v108 + v7);
        v110 = (__int32 *)(a3 + 4 * (j - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v112.i32[0] = *v110;
            v111 = &v110[(unint64_t)v8 / 4];
            v112.i32[1] = *v111;
            v110 = &v111[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v113 = (float)(vaddv_f32(vmul_f32(v112, *v109)) + v109[1].f32[0]) * a7;
            v108[1].f32[0] = (float)(vaddv_f32(vmul_f32(v112, *v108)) + v108[1].f32[0]) * a7;
            v109[1].f32[0] = v113;
          }
          v114 = (float)((float)(*(float *)v110 * COERCE_FLOAT(*v109)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v109)))
               * a7;
          v108->f32[1] = (float)((float)(*(float *)v110 * COERCE_FLOAT(*v108))
                               + COERCE_FLOAT(HIDWORD(*(unint64_t *)v108)))
                       * a7;
          v109->f32[1] = v114;
        }
        v115 = v109->f32[0] * a7;
        v108->f32[0] = v108->f32[0] * a7;
        v109->f32[0] = v115;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v124 = vmulq_n_f32(v126, a7))
      {
        k -= 4;
        v117 = (float32x4_t *)(a3 + 4 * k);
        v118 = (float32x4_t *)((char *)v117 + k * v8);
        v119 = k;
        v120 = *v118;
        v121 = (float32x2_t *)&v118->u32[(unint64_t)v8 / 4 + 2];
        v122 = *(float32x2_t *)((char *)v121 + v8);
        v123 = *(float32x4_t *)(a5 + v9 * v7 + 4 * k);
        v124 = (float32x4_t *)(a5 + v9 * v7);
        v120.i32[0] = 0;
        v122.i32[0] = 0;
        v125.i64[0] = 0;
        *(float32x2_t *)&v125.u32[2] = vmla_laneq_f32(vmul_lane_f32(*v121, *(float32x2_t *)v123.f32, 1), v122, v123, 2);
        v126 = vaddq_f32(vmlaq_n_f32(v123, v120, v123.f32[0]), v125);
        if ((k & 1) != 0)
        {
          v127 = *v117;
          v117 = (float32x4_t *)((char *)v117 + v8);
          v128 = v124->f32[0];
          v124 = (float32x4_t *)((char *)v124 + 4);
          v126 = vmlaq_n_f32(v126, v127, v128);
          v119 = k - 1;
        }
        if (v119)
        {
          v129 = 0uLL;
          do
          {
            v131 = *v117;
            v130 = (float32x4_t *)((char *)v117 + v8);
            v132 = *v130;
            v117 = (float32x4_t *)((char *)v130 + v8);
            v133 = *(float32x2_t *)v124->f32;
            v124 = (float32x4_t *)((char *)v124 + 8);
            v126 = vmlaq_n_f32(v126, v131, v133.f32[0]);
            v129 = vmlaq_lane_f32(v129, v132, v133, 1);
            v63 = v119 <= 2;
            v119 -= 2;
          }
          while (!v63);
          v126 = vaddq_f32(v126, v129);
        }
      }
      if (k)
      {
        v134 = (float32x2_t *)(a5 + v9 * v7);
        v135 = (__int32 *)(a3 + 4 * (k - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v137.i32[0] = *v135;
            v136 = &v135[(unint64_t)v8 / 4];
            v137.i32[1] = *v136;
            v135 = &v136[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v134[1].f32[0] = (float)(vaddv_f32(vmul_f32(v137, *v134)) + v134[1].f32[0]) * a7;
          }
          v134->f32[1] = (float)((float)(*(float *)v135 * COERCE_FLOAT(*v134))
                               + COERCE_FLOAT(HIDWORD(*(unint64_t *)v134)))
                       * a7;
        }
        v134->f32[0] = v134->f32[0] * a7;
      }
    }
  }
  return result;
}

uint64_t sub_239A3EF80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  __int32 *v23;
  __int32 *v24;
  float32x4_t v25;
  __int32 *v26;
  float32x4_t v27;
  __int32 *v28;
  float32x2_t v29;
  __int32 *v30;
  float v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x2_t *v36;
  int64x2_t v37;
  float32x2_t *v38;
  int64x2_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x4_t v77;
  BOOL v78;
  uint64_t v79;
  float32x2_t *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  float32x2_t *v84;
  __int32 *v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32_t v92;
  float32_t v93;
  float32_t v94;
  float32_t v95;
  float32_t v96;
  float32_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  int32x4_t *v101;
  int32x4_t *v102;
  float32x4_t *v103;
  float32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  float32x2_t *v107;
  __int32 *v108;
  __int32 *v109;
  float32x4_t v110;
  __int32 *v111;
  float32x4_t v112;
  __int32 *v113;
  float32x2_t v114;
  __int32 *v115;
  float v116;
  float32x2_t *v117;
  int32x4_t v118;
  float32x2_t *v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float v129;
  float32x4_t v130;
  float32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x4_t v138;
  float32x4_t v139;
  uint64_t v140;
  float32x2_t *v141;
  float32x2_t *v142;
  float32x2_t *v143;
  __int32 *v144;
  float32x2_t v145;
  float32x2_t *v146;
  float32x2_t v147;
  float32x2_t *v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32_t v153;
  float32_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  float32x4_t *v158;
  float32x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x2_t *v162;
  float *v163;
  __int32 *v164;
  float32x4_t v165;
  __int32 *v166;
  float32x4_t v167;
  __int32 *v168;
  float32x2_t v169;
  __int32 *v170;
  float v171;
  float32x2_t *v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float v178;
  float32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  uint64_t v182;
  uint64_t v183;
  float32x2_t v184;
  uint64_t v185;
  float32x2_t *v186;
  float32x2_t *v187;
  float *v188;
  float32x2_t v189;
  float v190;
  float32x2_t v191;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (int64x2_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (int64x2_t *)((char *)v14 + v7);
        v16 = (int64x2_t *)((char *)v14 + 2 * v7);
        v17 = (int64x2_t *)((char *)v14 + 2 * v7 + v7);
        v18 = (float32x4_t *)(a3 + v11 * v8 + 4 * v11);
        v19 = (float32x4_t *)((char *)v18 + v8);
        v20 = 4 * (result - v11);
        v21 = result - v11 - 4;
        v22 = (float32x2_t *)&v18->u32[(unint64_t)v8 / 2 + 2];
        v23 = &v18->i32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
        v25 = *v18;
        v24 = (__int32 *)&v18[1];
        v27 = *v19;
        v26 = (__int32 *)&v19[1];
        v29 = *v22;
        v28 = (__int32 *)&v22[1];
        v31 = *(float *)v23;
        v30 = v23 + 1;
        v33 = *v14;
        v32 = (float32x2_t *)&v14[1];
        v35 = *v15;
        v34 = (float32x2_t *)&v15[1];
        v37 = *v16;
        v36 = (float32x2_t *)&v16[1];
        v39 = *v17;
        v38 = (float32x2_t *)&v17[1];
        v40 = (int32x4_t)vtrn1q_s64(v33, v37);
        v41 = (int32x4_t)vtrn1q_s64(v35, v39);
        v42 = (int32x4_t)vtrn2q_s64(v33, v37);
        v43 = (int32x4_t)vtrn2q_s64(v35, v39);
        v44 = (float32x4_t)vtrn2q_s32(v40, v41);
        v45 = (float32x4_t)vtrn1q_s32(v42, v43);
        v46 = (float32x4_t)vtrn2q_s32(v42, v43);
        v47 = (int64x2_t)vmulq_n_f32(v46, v31);
        v48 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v46, v27, 3), v44, *(float32x2_t *)v27.f32, 1), vmulq_laneq_f32(v45, v27, 2));
        v49 = (int64x2_t)vaddq_f32(vmulq_lane_f32(v46, v29, 1), vmulq_n_f32(v45, v29.f32[0]));
        v50 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v46, v25, 3), v44, *(float32x2_t *)v25.f32, 1), vmulq_laneq_f32(v45, v25, 2)), vmulq_n_f32((float32x4_t)vtrn1q_s32(v40, v41), v25.f32[0]));
        v51 = (int32x4_t)vtrn1q_s64(v50, v49);
        v52 = (int32x4_t)vtrn1q_s64(v48, v47);
        v53 = (int32x4_t)vtrn2q_s64(v50, v49);
        v54 = (int32x4_t)vtrn2q_s64(v48, v47);
        v55 = (float32x4_t)vtrn1q_s32(v51, v52);
        v56 = (float32x4_t)vtrn2q_s32(v51, v52);
        v57 = (float32x4_t)vtrn1q_s32(v53, v54);
        v58 = (float32x4_t)vtrn2q_s32(v53, v54);
        if ((v21 & 1) != 0)
        {
          v59.i32[0] = *v24++;
          v59.i32[1] = *v26++;
          v59.i32[2] = *v28++;
          v59.i32[3] = *v30++;
          v60 = v32->f32[0];
          v32 = (float32x2_t *)((char *)v32 + 4);
          v61 = v34->f32[0];
          v34 = (float32x2_t *)((char *)v34 + 4);
          v62 = v36->f32[0];
          v36 = (float32x2_t *)((char *)v36 + 4);
          v63 = v38->f32[0];
          v38 = (float32x2_t *)((char *)v38 + 4);
          v55 = vmlaq_n_f32(v55, v59, v60);
          v56 = vmlaq_n_f32(v56, v59, v61);
          v57 = vmlaq_n_f32(v57, v59, v62);
          v58 = vmlaq_n_f32(v58, v59, v63);
          v21 = result - v11 - 5;
        }
        if (v21)
        {
          v64 = 0uLL;
          v65 = 0uLL;
          v66 = 0uLL;
          v67 = 0uLL;
          do
          {
            v68.i64[0] = *(_QWORD *)v24;
            v24 += 2;
            v69.i64[0] = *(_QWORD *)v26;
            v26 += 2;
            v70 = *(_QWORD *)v28;
            v28 += 2;
            v71 = *(_QWORD *)v30;
            v30 += 2;
            v72 = *v32++;
            v73 = *v34++;
            v74 = *v36++;
            v75 = *v38++;
            v68.i64[1] = v70;
            v69.i64[1] = v71;
            v76 = (float32x4_t)vtrn1q_s32(v68, v69);
            v77 = (float32x4_t)vtrn2q_s32(v68, v69);
            v55 = vmlaq_n_f32(v55, v76, v72.f32[0]);
            v56 = vmlaq_n_f32(v56, v76, v73.f32[0]);
            v57 = vmlaq_n_f32(v57, v76, v74.f32[0]);
            v58 = vmlaq_n_f32(v58, v76, v75.f32[0]);
            v64 = vmlaq_lane_f32(v64, v77, v72, 1);
            v65 = vmlaq_lane_f32(v65, v77, v73, 1);
            v66 = vmlaq_lane_f32(v66, v77, v74, 1);
            v67 = vmlaq_lane_f32(v67, v77, v75, 1);
            v78 = v21 <= 2;
            v21 -= 2;
          }
          while (!v78);
          v55 = vaddq_f32(v55, v64);
          v56 = vaddq_f32(v56, v65);
          v57 = vaddq_f32(v57, v66);
          v58 = vaddq_f32(v58, v67);
        }
        *(float32x4_t *)&v32->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v55, a7);
        *(float32x4_t *)&v34->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v56, a7);
        *(float32x4_t *)&v36->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v57, a7);
        *(float32x4_t *)&v38->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v58, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v78 = v13 <= 4;
        v13 -= 4;
      }
      while (!v78);
    }
    v79 = result & 3;
    if (!v12 && v79 != 0)
    {
      v80 = (float32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v81 = (float32x2_t *)((char *)v80 + v7);
      v82 = &v80[(unint64_t)v7 / 4];
      v83 = (float32x2_t *)((char *)&v80[(unint64_t)v7 / 4] + v7);
      v84 = (float32x2_t *)(a3 + v11 * v8 + 4 * v11);
      if (v79 != 1)
      {
        if (v79 != 2)
        {
          v86 = *v84;
          v85 = (__int32 *)&v84[1];
          v87 = vmul_f32(v86, *v80);
          v88 = vmul_f32(v86, *v81);
          v89 = vmul_f32(v86, *v82);
          v90 = vmul_f32(v86, *v83);
          v86.i32[0] = *v85;
          v84 = (float32x2_t *)&v85[(unint64_t)v8 / 4 - 1];
          v88.f32[0] = (float)(vaddv_f32(v88) + (float)(v86.f32[0] * v81[1].f32[0])) * a7;
          v89.f32[0] = (float)(vaddv_f32(v89) + (float)(v86.f32[0] * v82[1].f32[0])) * a7;
          v90.f32[0] = (float)(vaddv_f32(v90) + (float)(v86.f32[0] * v83[1].f32[0])) * a7;
          v80->f32[0] = (float)(vaddv_f32(v87) + (float)(v86.f32[0] * v80[1].f32[0])) * a7;
          v80 = (float32x2_t *)((char *)v80 + 4);
          v81->i32[0] = v88.i32[0];
          v81 = (float32x2_t *)((char *)v81 + 4);
          v82->i32[0] = v89.i32[0];
          v82 = (float32x2_t *)((char *)v82 + 4);
          v83->i32[0] = v90.i32[0];
          v83 = (float32x2_t *)((char *)v83 + 4);
        }
        v91 = *v84;
        v84 = (float32x2_t *)((char *)v84 + v8 + 4);
        v92 = vaddv_f32(vmul_f32(v91, *v81)) * a7;
        v93 = vaddv_f32(vmul_f32(v91, *v82)) * a7;
        v94 = vaddv_f32(vmul_f32(v91, *v83)) * a7;
        v80->f32[0] = vaddv_f32(vmul_f32(v91, *v80)) * a7;
        v80 = (float32x2_t *)((char *)v80 + 4);
        v81->f32[0] = v92;
        v81 = (float32x2_t *)((char *)v81 + 4);
        v82->f32[0] = v93;
        v82 = (float32x2_t *)((char *)v82 + 4);
        v83->f32[0] = v94;
        v83 = (float32x2_t *)((char *)v83 + 4);
      }
      v95 = (float)(v84->f32[0] * v81->f32[0]) * a7;
      v96 = (float)(v84->f32[0] * v82->f32[0]) * a7;
      v97 = (float)(v84->f32[0] * v83->f32[0]) * a7;
      v80->f32[0] = (float)(v84->f32[0] * v80->f32[0]) * a7;
      v81->f32[0] = v95;
      v82->f32[0] = v96;
      v83->f32[0] = v97;
    }
    v9 += 4;
    v78 = v10 <= 4;
    v10 -= 4;
  }
  while (!v78);
  v78 = v10 <= -3;
  a2 = v10 + 3;
  if (!v78)
  {
LABEL_22:
    if (a2 > 1)
    {
      v98 = 0;
      v99 = __OFSUB__(result, 3);
      v100 = result - 3;
      if (result > 3)
      {
        do
        {
          v101 = (int32x4_t *)(a5 + v9 * v7 + 4 * v98);
          v102 = (int32x4_t *)((char *)v101 + v7);
          v103 = (float32x4_t *)(a3 + v98 * v8 + 4 * v98);
          v104 = (float32x4_t *)((char *)v103 + v8);
          v105 = 4 * (result - v98);
          v106 = result - v98 - 4;
          v107 = (float32x2_t *)&v103->u32[(unint64_t)v8 / 2 + 2];
          v108 = &v103->i32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
          v110 = *v103;
          v109 = (__int32 *)&v103[1];
          v112 = *v104;
          v111 = (__int32 *)&v104[1];
          v114 = *v107;
          v113 = (__int32 *)&v107[1];
          v116 = *(float *)v108;
          v115 = v108 + 1;
          v118 = *v101;
          v117 = (float32x2_t *)&v101[1];
          v120 = *v102;
          v119 = (float32x2_t *)&v102[1];
          v121 = vtrn1q_s32(v118, v120);
          v122 = vtrn2q_s32(v118, v120);
          *(float32x2_t *)v123.i8 = vadd_f32(vmla_lane_f32(vmul_laneq_f32((float32x2_t)v122.u64[1], v112, 3), *(float32x2_t *)v122.i8, *(float32x2_t *)v112.f32, 1), vmul_laneq_f32((float32x2_t)v121.u64[1], v112, 2));
          *(float32x2_t *)v124.i8 = vadd_f32(vadd_f32(vmla_lane_f32(vmul_laneq_f32((float32x2_t)v122.u64[1], v110, 3), *(float32x2_t *)v122.i8, *(float32x2_t *)v110.f32, 1), vmul_laneq_f32((float32x2_t)v121.u64[1], v110, 2)), vmul_n_f32(*(float32x2_t *)v121.i8, v110.f32[0]));
          v124.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32((float32x2_t)v122.u64[1], v114, 1), vmul_n_f32((float32x2_t)v121.u64[1], v114.f32[0]));
          v123.u64[1] = (unint64_t)vmul_n_f32((float32x2_t)v122.u64[1], v116);
          v125 = (float32x4_t)vtrn1q_s32(v124, v123);
          v126 = (float32x4_t)vtrn2q_s32(v124, v123);
          if ((v106 & 1) != 0)
          {
            v127.i32[0] = *v109++;
            v127.i32[1] = *v111++;
            v127.i32[2] = *v113++;
            v127.i32[3] = *v115++;
            v128 = v117->f32[0];
            v117 = (float32x2_t *)((char *)v117 + 4);
            v129 = v119->f32[0];
            v119 = (float32x2_t *)((char *)v119 + 4);
            v125 = vmlaq_n_f32(v125, v127, v128);
            v126 = vmlaq_n_f32(v126, v127, v129);
            v106 = result - v98 - 5;
          }
          if (v106)
          {
            v130 = 0uLL;
            v131 = 0uLL;
            do
            {
              v132.i64[0] = *(_QWORD *)v109;
              v109 += 2;
              v133.i64[0] = *(_QWORD *)v111;
              v111 += 2;
              v134 = *(_QWORD *)v113;
              v113 += 2;
              v135 = *(_QWORD *)v115;
              v115 += 2;
              v136 = *v117++;
              v137 = *v119++;
              v132.i64[1] = v134;
              v133.i64[1] = v135;
              v138 = (float32x4_t)vtrn1q_s32(v132, v133);
              v139 = (float32x4_t)vtrn2q_s32(v132, v133);
              v125 = vmlaq_n_f32(v125, v138, v136.f32[0]);
              v126 = vmlaq_n_f32(v126, v138, v137.f32[0]);
              v130 = vmlaq_lane_f32(v130, v139, v136, 1);
              v131 = vmlaq_lane_f32(v131, v139, v137, 1);
              v78 = v106 <= 2;
              v106 -= 2;
            }
            while (!v78);
            v125 = vaddq_f32(v125, v130);
            v126 = vaddq_f32(v126, v131);
          }
          *(float32x4_t *)&v117->f32[v105 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v125, a7);
          *(float32x4_t *)&v119->f32[v105 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v126, a7);
          v98 += 4;
          v99 = __OFSUB__(v100, 4);
          v78 = v100 <= 4;
          v100 -= 4;
        }
        while (!v78);
      }
      v140 = result & 3;
      if (!v99 && v140 != 0)
      {
        v141 = (float32x2_t *)(a5 + v9 * v7 + 4 * v98);
        v142 = (float32x2_t *)((char *)v141 + v7);
        v143 = (float32x2_t *)(a3 + v98 * v8 + 4 * v98);
        if (v140 != 1)
        {
          if (v140 != 2)
          {
            v145 = *v143;
            v144 = (__int32 *)&v143[1];
            v147 = *v141;
            v146 = v141 + 1;
            v149 = *v142;
            v148 = v142 + 1;
            v150 = vmul_f32(v145, v147);
            v151 = vmul_f32(v145, v149);
            v145.i32[0] = *v144;
            v143 = (float32x2_t *)&v144[(unint64_t)v8 / 4 - 1];
            v147.i32[0] = v146->i32[0];
            --v146;
            v149.i32[0] = v148->i32[0];
            --v148;
            v146->f32[0] = (float)(vaddv_f32(v150) + (float)(v145.f32[0] * v147.f32[0])) * a7;
            v141 = (float32x2_t *)((char *)v146 + 4);
            v148->f32[0] = (float)(vaddv_f32(v151) + (float)(v145.f32[0] * v149.f32[0])) * a7;
            v142 = (float32x2_t *)((char *)v148 + 4);
          }
          v152 = *v143;
          v143 = (float32x2_t *)((char *)v143 + v8 + 4);
          v153 = vaddv_f32(vmul_f32(v152, *v142)) * a7;
          v141->f32[0] = vaddv_f32(vmul_f32(v152, *v141)) * a7;
          v141 = (float32x2_t *)((char *)v141 + 4);
          v142->f32[0] = v153;
          v142 = (float32x2_t *)((char *)v142 + 4);
        }
        v154 = (float)(v143->f32[0] * v142->f32[0]) * a7;
        v141->f32[0] = (float)(v143->f32[0] * v141->f32[0]) * a7;
        v142->f32[0] = v154;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v155 = 0;
      v156 = __OFSUB__(result, 3);
      v157 = result - 3;
      if (result > 3)
      {
        do
        {
          v158 = (float32x4_t *)(a5 + v9 * v7 + 4 * v155);
          v159 = (float32x4_t *)(a3 + v155 * v8 + 4 * v155);
          v160 = (float32x4_t *)((char *)v159 + v8);
          v161 = result - v155 - 4;
          v162 = (float32x2_t *)&v159->u32[(unint64_t)v8 / 2 + 2];
          v163 = &v159->f32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
          v165 = *v159;
          v164 = (__int32 *)&v159[1];
          v167 = *v160;
          v166 = (__int32 *)&v160[1];
          v169 = *v162;
          v168 = (__int32 *)&v162[1];
          v171 = *v163;
          v170 = (__int32 *)(v163 + 1);
          v173 = *v158;
          v172 = (float32x2_t *)&v158[1];
          v167.i32[0] = 0;
          v174 = vmulq_f32(v165, v173);
          v175 = vmulq_f32(v167, v173);
          v176.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v174, v174));
          v176.f32[3] = v171 * v173.f32[3];
          v176.i32[2] = vaddv_f32(vmul_f32(v169, *(float32x2_t *)&v173.u32[2]));
          v176.i32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v175, v175));
          if ((v161 & 1) != 0)
          {
            v177.i32[0] = *v164++;
            v177.i32[1] = *v166++;
            v177.i32[2] = *v168++;
            v177.i32[3] = *v170++;
            v178 = v172->f32[0];
            v172 = (float32x2_t *)((char *)v172 + 4);
            v176 = vmlaq_n_f32(v176, v177, v178);
            v161 = result - v155 - 5;
          }
          if (v161)
          {
            v179 = 0uLL;
            do
            {
              v180.i64[0] = *(_QWORD *)v164;
              v164 += 2;
              v181.i64[0] = *(_QWORD *)v166;
              v166 += 2;
              v182 = *(_QWORD *)v168;
              v168 += 2;
              v183 = *(_QWORD *)v170;
              v170 += 2;
              v184 = *v172++;
              v180.i64[1] = v182;
              v181.i64[1] = v183;
              v176 = vmlaq_n_f32(v176, (float32x4_t)vtrn1q_s32(v180, v181), v184.f32[0]);
              v179 = vmlaq_lane_f32(v179, (float32x4_t)vtrn2q_s32(v180, v181), v184, 1);
              v78 = v161 <= 2;
              v161 -= 2;
            }
            while (!v78);
            v176 = vaddq_f32(v176, v179);
          }
          *(float32x4_t *)&v172->f32[-(result - v155)] = vmulq_n_f32(v176, a7);
          v155 += 4;
          v156 = __OFSUB__(v157, 4);
          v78 = v157 <= 4;
          v157 -= 4;
        }
        while (!v78);
      }
      v185 = result & 3;
      if (!v156 && v185 != 0)
      {
        v186 = (float32x2_t *)(a5 + v9 * v7 + 4 * v155);
        v187 = (float32x2_t *)(a3 + v155 * v8 + 4 * v155);
        if (v185 != 1)
        {
          if (v185 != 2)
          {
            v189 = *v187;
            v188 = (float *)&v187[1];
            v190 = *v188;
            v187 = (float32x2_t *)&v188[(unint64_t)v8 / 4 - 1];
            v186->f32[0] = (float)(vaddv_f32(vmul_f32(v189, *v186)) + (float)(v190 * v186[1].f32[0])) * a7;
            v186 = (float32x2_t *)((char *)v186 + 4);
          }
          v191 = *v187;
          v187 = (float32x2_t *)((char *)v187 + v8 + 4);
          v186->f32[0] = vaddv_f32(vmul_n_f32(vmul_f32(v191, *v186), a7));
          v186 = (float32x2_t *)((char *)v186 + 4);
        }
        v186->f32[0] = (float)(v187->f32[0] * v186->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_239A3F6B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;
  float32x4_t v25;
  __int32 *v26;
  float32x2_t v27;
  __int32 *v28;
  float v29;
  float32x2_t *v30;
  int64x2_t v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x2_t *v36;
  int64x2_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  BOOL v75;
  uint64_t v76;
  int32x2_t *v77;
  int32x2_t *v78;
  int32x2_t *v79;
  int32x2_t *v80;
  float *v81;
  float32x2_t v82;
  int32x2_t *v83;
  float v84;
  float v85;
  int32x2_t *v86;
  float v87;
  float v88;
  int32x2_t *v89;
  float v90;
  float v91;
  int32x2_t *v92;
  float v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  int32x4_t *v106;
  int32x4_t *v107;
  float32x4_t *v108;
  uint64_t v109;
  uint64_t v110;
  float32x2_t *v111;
  __int32 *v112;
  __int32 *v113;
  __int32 *v114;
  float32x4_t v115;
  __int32 *v116;
  float32x2_t v117;
  __int32 *v118;
  float v119;
  float32x2_t *v120;
  int32x4_t v121;
  float32x2_t *v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float v131;
  float v132;
  float32x4_t v133;
  float32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  uint64_t v143;
  int32x2_t *v144;
  int32x2_t *v145;
  float *v146;
  float32x2_t v147;
  float32x2_t *v148;
  float v149;
  float32x2_t *v150;
  float v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  float32x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x2_t *v162;
  float *v163;
  __int32 *v164;
  __int32 *v165;
  float32x4_t v166;
  __int32 *v167;
  float32x2_t v168;
  __int32 *v169;
  float v170;
  float32x2_t *v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float v177;
  float32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  uint64_t v181;
  uint64_t v182;
  float32x2_t v183;
  uint64_t v184;
  _QWORD *v185;
  float32x2_t *v186;
  float32x2_t v187;
  _QWORD *v188;
  float v189;
  float32x2_t v190;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (int64x2_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (int64x2_t *)((char *)v14 + v7);
        v16 = (int64x2_t *)((char *)v14 + 2 * v7);
        v17 = (int64x2_t *)((char *)v14 + 2 * v7 + v7);
        v18 = (float32x4_t *)(a3 + v11 * v8 + 4 * v11);
        v19 = 4 * (result - v11);
        v20 = result - v11 - 4;
        v21 = (float32x2_t *)&v18->u32[(unint64_t)v8 / 4 + 2];
        v22 = &v18->i32[(unint64_t)v8 / 2 + 3];
        v23 = (__int32 *)((char *)&v18[1] + 2 * v8 + v8);
        v25 = *v18;
        v24 = (__int32 *)&v18[1];
        v27 = *v21;
        v26 = (__int32 *)&v21[1];
        v29 = *(float *)v22;
        v28 = v22 + 1;
        v31 = *v14;
        v30 = (float32x2_t *)&v14[1];
        v33 = *v15;
        v32 = (float32x2_t *)&v15[1];
        v35 = *v16;
        v34 = (float32x2_t *)&v16[1];
        v37 = *v17;
        v36 = (float32x2_t *)&v17[1];
        v38 = (int32x4_t)vtrn1q_s64(v31, v35);
        v39 = (int32x4_t)vtrn1q_s64(v33, v37);
        v40 = (int32x4_t)vtrn2q_s64(v31, v35);
        v41 = (int32x4_t)vtrn2q_s64(v33, v37);
        v42 = (float32x4_t)vtrn2q_s32(v38, v39);
        v43 = (float32x4_t)vtrn1q_s32(v40, v41);
        v44 = (float32x4_t)vtrn2q_s32(v40, v41);
        v45 = (int64x2_t)vmlaq_n_f32(v43, v44, v29);
        v46 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)vtrn1q_s32(v38, v39), v44, v25, 3), v42, *(float32x2_t *)v25.f32, 1), vmulq_laneq_f32(v43, v25, 2));
        v47 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(v42, v44, v27, 1), vmulq_n_f32(v43, v27.f32[0]));
        v48 = (int32x4_t)vtrn1q_s64(v46, v45);
        v49 = (int32x4_t)vtrn1q_s64(v47, (int64x2_t)v44);
        v50 = (int32x4_t)vtrn2q_s64(v46, v45);
        v51 = (int32x4_t)vtrn2q_s64(v47, (int64x2_t)v44);
        v52 = (float32x4_t)vtrn1q_s32(v48, v49);
        v53 = (float32x4_t)vtrn2q_s32(v48, v49);
        v54 = (float32x4_t)vtrn1q_s32(v50, v51);
        v55 = (float32x4_t)vtrn2q_s32(v50, v51);
        if ((v20 & 1) != 0)
        {
          v56.i32[0] = *v24++;
          v56.i32[1] = *v26++;
          v56.i32[2] = *v28++;
          v56.i32[3] = *v23++;
          v57 = v30->f32[0];
          v30 = (float32x2_t *)((char *)v30 + 4);
          v58 = v32->f32[0];
          v32 = (float32x2_t *)((char *)v32 + 4);
          v59 = v34->f32[0];
          v34 = (float32x2_t *)((char *)v34 + 4);
          v60 = v36->f32[0];
          v36 = (float32x2_t *)((char *)v36 + 4);
          v52 = vmlaq_n_f32(v52, v56, v57);
          v53 = vmlaq_n_f32(v53, v56, v58);
          v54 = vmlaq_n_f32(v54, v56, v59);
          v55 = vmlaq_n_f32(v55, v56, v60);
          v20 = result - v11 - 5;
        }
        if (v20)
        {
          v61 = 0uLL;
          v62 = 0uLL;
          v63 = 0uLL;
          v64 = 0uLL;
          do
          {
            v65.i64[0] = *(_QWORD *)v24;
            v24 += 2;
            v66.i64[0] = *(_QWORD *)v26;
            v26 += 2;
            v67 = *(_QWORD *)v28;
            v28 += 2;
            v68 = *(_QWORD *)v23;
            v23 += 2;
            v69 = *v30++;
            v70 = *v32++;
            v71 = *v34++;
            v72 = *v36++;
            v65.i64[1] = v67;
            v66.i64[1] = v68;
            v73 = (float32x4_t)vtrn1q_s32(v65, v66);
            v74 = (float32x4_t)vtrn2q_s32(v65, v66);
            v52 = vmlaq_n_f32(v52, v73, v69.f32[0]);
            v53 = vmlaq_n_f32(v53, v73, v70.f32[0]);
            v54 = vmlaq_n_f32(v54, v73, v71.f32[0]);
            v55 = vmlaq_n_f32(v55, v73, v72.f32[0]);
            v61 = vmlaq_lane_f32(v61, v74, v69, 1);
            v62 = vmlaq_lane_f32(v62, v74, v70, 1);
            v63 = vmlaq_lane_f32(v63, v74, v71, 1);
            v64 = vmlaq_lane_f32(v64, v74, v72, 1);
            v75 = v20 <= 2;
            v20 -= 2;
          }
          while (!v75);
          v52 = vaddq_f32(v52, v61);
          v53 = vaddq_f32(v53, v62);
          v54 = vaddq_f32(v54, v63);
          v55 = vaddq_f32(v55, v64);
        }
        *(float32x4_t *)&v30->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v52, a7);
        *(float32x4_t *)&v32->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v53, a7);
        *(float32x4_t *)&v34->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v54, a7);
        *(float32x4_t *)&v36->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v55, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v75 = v13 <= 4;
        v13 -= 4;
      }
      while (!v75);
    }
    v76 = result & 3;
    if (!v12 && v76 != 0)
    {
      v77 = (int32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v78 = (int32x2_t *)((char *)v77 + v7);
      v79 = &v77[(unint64_t)v7 / 4];
      v80 = (int32x2_t *)((char *)&v77[(unint64_t)v7 / 4] + v7);
      v81 = (float *)(a3 + v11 * v8 + 4 * v11 + 4);
      if (v76 != 1)
      {
        if (v76 != 2)
        {
          v82 = *(float32x2_t *)v81;
          v81 = (float *)((char *)v81 + v8 + 4);
          v84 = *(float *)v77->i32;
          v83 = (int32x2_t *)((char *)v77 + 4);
          v85 = v84;
          v87 = *(float *)v78->i32;
          v86 = (int32x2_t *)((char *)v78 + 4);
          v88 = v87;
          v90 = *(float *)v79->i32;
          v89 = (int32x2_t *)((char *)v79 + 4);
          v91 = v90;
          v93 = *(float *)v80->i32;
          v92 = (int32x2_t *)((char *)v80 + 4);
          v94 = (float32x2_t)*v83;
          v83 = (int32x2_t *)((char *)v83 - 4);
          v95 = (float32x2_t)*v86;
          v86 = (int32x2_t *)((char *)v86 - 4);
          v96 = (float32x2_t)*v89;
          v89 = (int32x2_t *)((char *)v89 - 4);
          v97 = (float32x2_t)*v92;
          v92 = (int32x2_t *)((char *)v92 - 4);
          *(float *)v83->i32 = (float)(vaddv_f32(vmul_f32(v82, v94)) + v85) * a7;
          v77 = (int32x2_t *)((char *)v83 + 4);
          *(float *)v86->i32 = (float)(vaddv_f32(vmul_f32(v82, v95)) + v88) * a7;
          v78 = (int32x2_t *)((char *)v86 + 4);
          *(float *)v89->i32 = (float)(vaddv_f32(vmul_f32(v82, v96)) + v91) * a7;
          v79 = (int32x2_t *)((char *)v89 + 4);
          *(float *)v92->i32 = (float)(vaddv_f32(vmul_f32(v82, v97)) + v93) * a7;
          v80 = (int32x2_t *)((char *)v92 + 4);
        }
        v98 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v77, *v78), vmul_n_f32((float32x2_t)vtrn2_s32(*v77, *v78), *v81)), a7);
        v99 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v79, *v80), vmul_n_f32((float32x2_t)vtrn2_s32(*v79, *v80), *v81)), a7);
        v77->i32[0] = v98.i32[0];
        v77 = (int32x2_t *)((char *)v77 + 4);
        v78->i32[0] = v98.i32[1];
        v78 = (int32x2_t *)((char *)v78 + 4);
        v79->i32[0] = v99.i32[0];
        v79 = (int32x2_t *)((char *)v79 + 4);
        v80->i32[0] = v99.i32[1];
        v80 = (int32x2_t *)((char *)v80 + 4);
      }
      v100 = *(float *)v78->i32 * a7;
      v101 = *(float *)v79->i32 * a7;
      v102 = *(float *)v80->i32 * a7;
      *(float *)v77->i32 = *(float *)v77->i32 * a7;
      *(float *)v78->i32 = v100;
      *(float *)v79->i32 = v101;
      *(float *)v80->i32 = v102;
    }
    v9 += 4;
    v75 = v10 <= 4;
    v10 -= 4;
  }
  while (!v75);
  v75 = v10 <= -3;
  a2 = v10 + 3;
  if (!v75)
  {
LABEL_22:
    if (a2 > 1)
    {
      v103 = 0;
      v104 = __OFSUB__(result, 3);
      v105 = result - 3;
      if (result > 3)
      {
        do
        {
          v106 = (int32x4_t *)(a5 + v9 * v7 + 4 * v103);
          v107 = (int32x4_t *)((char *)v106 + v7);
          v108 = (float32x4_t *)(a3 + v103 * v8 + 4 * v103);
          v109 = 4 * (result - v103);
          v110 = result - v103 - 4;
          v111 = (float32x2_t *)&v108->u32[(unint64_t)v8 / 4 + 2];
          v112 = &v108->i32[(unint64_t)v8 / 2 + 3];
          v113 = (__int32 *)((char *)&v108[1] + 2 * v8 + v8);
          v115 = *v108;
          v114 = (__int32 *)&v108[1];
          v117 = *v111;
          v116 = (__int32 *)&v111[1];
          v119 = *(float *)v112;
          v118 = v112 + 1;
          v121 = *v106;
          v120 = (float32x2_t *)&v106[1];
          v123 = *v107;
          v122 = (float32x2_t *)&v107[1];
          v124 = vtrn1q_s32(v121, v123);
          v125 = vtrn2q_s32(v121, v123);
          *(float32x2_t *)v126.i8 = vadd_f32(vmla_lane_f32(vmla_laneq_f32(*(float32x2_t *)v124.i8, (float32x2_t)v125.u64[1], v115, 3), *(float32x2_t *)v125.i8, *(float32x2_t *)v115.f32, 1), vmul_laneq_f32((float32x2_t)v124.u64[1], v115, 2));
          *(float32x2_t *)v127.i8 = vadd_f32(vmla_lane_f32(*(float32x2_t *)v125.i8, (float32x2_t)v125.u64[1], v117, 1), vmul_n_f32((float32x2_t)v124.u64[1], v117.f32[0]));
          v126.u64[1] = (unint64_t)vmla_n_f32((float32x2_t)v124.u64[1], (float32x2_t)v125.u64[1], v119);
          v127.i64[1] = v125.i64[1];
          v128 = (float32x4_t)vtrn1q_s32(v126, v127);
          v129 = (float32x4_t)vtrn2q_s32(v126, v127);
          if ((v110 & 1) != 0)
          {
            v130.i32[0] = *v114++;
            v130.i32[1] = *v116++;
            v130.i32[2] = *v118++;
            v130.i32[3] = *v113++;
            v131 = v120->f32[0];
            v120 = (float32x2_t *)((char *)v120 + 4);
            v132 = v122->f32[0];
            v122 = (float32x2_t *)((char *)v122 + 4);
            v128 = vmlaq_n_f32(v128, v130, v131);
            v129 = vmlaq_n_f32(v129, v130, v132);
            v110 = result - v103 - 5;
          }
          if (v110)
          {
            v133 = 0uLL;
            v134 = 0uLL;
            do
            {
              v135.i64[0] = *(_QWORD *)v114;
              v114 += 2;
              v136.i64[0] = *(_QWORD *)v116;
              v116 += 2;
              v137 = *(_QWORD *)v118;
              v118 += 2;
              v138 = *(_QWORD *)v113;
              v113 += 2;
              v139 = *v120++;
              v140 = *v122++;
              v135.i64[1] = v137;
              v136.i64[1] = v138;
              v141 = (float32x4_t)vtrn1q_s32(v135, v136);
              v142 = (float32x4_t)vtrn2q_s32(v135, v136);
              v128 = vmlaq_n_f32(v128, v141, v139.f32[0]);
              v129 = vmlaq_n_f32(v129, v141, v140.f32[0]);
              v133 = vmlaq_lane_f32(v133, v142, v139, 1);
              v134 = vmlaq_lane_f32(v134, v142, v140, 1);
              v75 = v110 <= 2;
              v110 -= 2;
            }
            while (!v75);
            v128 = vaddq_f32(v128, v133);
            v129 = vaddq_f32(v129, v134);
          }
          *(float32x4_t *)&v120->f32[v109 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v128, a7);
          *(float32x4_t *)&v122->f32[v109 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v129, a7);
          v103 += 4;
          v104 = __OFSUB__(v105, 4);
          v75 = v105 <= 4;
          v105 -= 4;
        }
        while (!v75);
      }
      v143 = result & 3;
      if (!v104 && v143 != 0)
      {
        v144 = (int32x2_t *)(a5 + v9 * v7 + 4 * v103);
        v145 = (int32x2_t *)((char *)v144 + v7);
        v146 = (float *)(a3 + v103 * v8 + 4 * v103 + 4);
        if (v143 != 1)
        {
          if (v143 != 2)
          {
            v147 = *(float32x2_t *)v146;
            v146 = (float *)((char *)v146 + v8 + 4);
            v149 = *(float *)v144->i32;
            v148 = (float32x2_t *)((char *)v144 + 4);
            v151 = *(float *)v145->i32;
            v150 = (float32x2_t *)((char *)v145 + 4);
            v152 = vmul_f32(v147, *v148);
            v153 = vmul_f32(v147, *v150);
            v148 = (float32x2_t *)((char *)v148 - 4);
            v150 = (float32x2_t *)((char *)v150 - 4);
            v148->f32[0] = (float)(vaddv_f32(v152) + v149) * a7;
            v144 = (int32x2_t *)((char *)v148 + 4);
            v150->f32[0] = (float)(vaddv_f32(v153) + v151) * a7;
            v145 = (int32x2_t *)((char *)v150 + 4);
          }
          v154 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v144, *v145), vmul_n_f32((float32x2_t)vtrn2_s32(*v144, *v145), *v146)), a7);
          v144->i32[0] = v154.i32[0];
          v144 = (int32x2_t *)((char *)v144 + 4);
          v145->i32[0] = v154.i32[1];
          v145 = (int32x2_t *)((char *)v145 + 4);
        }
        v155 = *(float *)v145->i32 * a7;
        *(float *)v144->i32 = *(float *)v144->i32 * a7;
        *(float *)v145->i32 = v155;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v156 = 0;
      v157 = __OFSUB__(result, 3);
      v158 = result - 3;
      if (result > 3)
      {
        do
        {
          v159 = (float32x4_t *)(a5 + v9 * v7 + 4 * v156);
          v160 = (float32x4_t *)(a3 + v156 * v8 + 4 * v156);
          v161 = result - v156 - 4;
          v162 = (float32x2_t *)&v160->u32[(unint64_t)v8 / 4 + 2];
          v163 = &v160->f32[(unint64_t)v8 / 2 + 3];
          v164 = (__int32 *)((char *)&v160[1] + 2 * v8 + v8);
          v166 = *v160;
          v165 = (__int32 *)&v160[1];
          v168 = *v162;
          v167 = (__int32 *)&v162[1];
          v170 = *v163;
          v169 = (__int32 *)(v163 + 1);
          v172 = *v159;
          v171 = (float32x2_t *)&v159[1];
          v166.i32[0] = 0;
          v173 = vmulq_f32(v166, v172);
          v174.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v173, v173));
          v174.i64[1] = COERCE_UNSIGNED_INT(v170 * v172.f32[3]);
          v174.i32[1] = vaddv_f32(vmul_f32(v168, *(float32x2_t *)&v172.u32[2]));
          v175 = vaddq_f32(v174, v172);
          if ((v161 & 1) != 0)
          {
            v176.i32[0] = *v165++;
            v176.i32[1] = *v167++;
            v176.i32[2] = *v169++;
            v176.i32[3] = *v164++;
            v177 = v171->f32[0];
            v171 = (float32x2_t *)((char *)v171 + 4);
            v175 = vmlaq_n_f32(v175, v176, v177);
            v161 = result - v156 - 5;
          }
          if (v161)
          {
            v178 = 0uLL;
            do
            {
              v179.i64[0] = *(_QWORD *)v165;
              v165 += 2;
              v180.i64[0] = *(_QWORD *)v167;
              v167 += 2;
              v181 = *(_QWORD *)v169;
              v169 += 2;
              v182 = *(_QWORD *)v164;
              v164 += 2;
              v183 = *v171++;
              v179.i64[1] = v181;
              v180.i64[1] = v182;
              v175 = vmlaq_n_f32(v175, (float32x4_t)vtrn1q_s32(v179, v180), v183.f32[0]);
              v178 = vmlaq_lane_f32(v178, (float32x4_t)vtrn2q_s32(v179, v180), v183, 1);
              v75 = v161 <= 2;
              v161 -= 2;
            }
            while (!v75);
            v175 = vaddq_f32(v175, v178);
          }
          *(float32x4_t *)&v171->f32[-(result - v156)] = vmulq_n_f32(v175, a7);
          v156 += 4;
          v157 = __OFSUB__(v158, 4);
          v75 = v158 <= 4;
          v158 -= 4;
        }
        while (!v75);
      }
      v184 = result & 3;
      if (!v157 && v184 != 0)
      {
        v185 = (_QWORD *)(a5 + v9 * v7 + 4 * v156);
        v186 = (float32x2_t *)(a3 + v156 * v8 + 4 * v156 + 4);
        if (v184 != 1)
        {
          if (v184 != 2)
          {
            v187 = *v186;
            v186 = (float32x2_t *)((char *)v186 + v8 + 4);
            v189 = *(float *)v185;
            v188 = (_QWORD *)((char *)v185 + 4);
            v190 = *(float32x2_t *)v188;
            v188 = (_QWORD *)((char *)v188 - 4);
            *(float *)v188 = (float)(vaddv_f32(vmul_f32(v187, v190)) + v189) * a7;
            v185 = (_QWORD *)((char *)v188 + 4);
          }
          *(float *)v185 = (float)((float)(COERCE_FLOAT(HIDWORD(*v185)) * v186->f32[0]) + COERCE_FLOAT(*v185)) * a7;
          v185 = (_QWORD *)((char *)v185 + 4);
        }
        *(float *)v185 = *(float *)v185 * a7;
      }
    }
  }
  return result;
}

_OWORD *sub_239A3FD70(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  _OWORD *result;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  _OWORD *v38;
  float64x2_t *v39;
  float64x2_t *v40;
  float64x2_t *v41;

  v7 = a3;
  v8 = 8 * a4;
  v10 = *(float64x2_t *)a1;
  v11 = *((float64x2_t *)a1 + 1);
  v9 = a1 + 2;
  v13 = *(float64x2_t *)v9;
  v14 = *((float64x2_t *)v9 + 1);
  result = v9 + 2;
  do
  {
    v15 = a6;
    v17 = *a3;
    v18 = a3[1];
    v19 = a3[2];
    v20 = a3[3];
    v16 = (float64x2_t *)((char *)a3 + v8);
    v22 = *v16;
    v23 = v16[1];
    v24 = v16[2];
    v25 = v16[3];
    v21 = (float64x2_t *)((char *)v16 + v8);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v21[3];
    v26 = (float64x2_t *)((char *)v21 + v8);
    v31 = *v26;
    v32 = v26[1];
    v33 = v26[2];
    v34 = v26[3];
    v36 = *a2;
    v37 = a2[1];
    v35 = a2 + 2;
    do
    {
      v17 = vmlaq_n_f64(v17, v10, v36.f64[0]);
      v22 = vmlaq_laneq_f64(v22, v10, v36, 1);
      v27 = vmlaq_n_f64(v27, v10, v37.f64[0]);
      v31 = vmlaq_laneq_f64(v31, v10, v37, 1);
      v18 = vmlaq_n_f64(v18, v11, v36.f64[0]);
      v23 = vmlaq_laneq_f64(v23, v11, v36, 1);
      v28 = vmlaq_n_f64(v28, v11, v37.f64[0]);
      v32 = vmlaq_laneq_f64(v32, v11, v37, 1);
      v10 = *(float64x2_t *)result;
      v11 = *((float64x2_t *)result + 1);
      v38 = result + 2;
      v19 = vmlaq_n_f64(v19, v13, v36.f64[0]);
      v24 = vmlaq_laneq_f64(v24, v13, v36, 1);
      v29 = vmlaq_n_f64(v29, v13, v37.f64[0]);
      v33 = vmlaq_laneq_f64(v33, v13, v37, 1);
      v20 = vmlaq_n_f64(v20, v14, v36.f64[0]);
      v25 = vmlaq_laneq_f64(v25, v14, v36, 1);
      v30 = vmlaq_n_f64(v30, v14, v37.f64[0]);
      v34 = vmlaq_laneq_f64(v34, v14, v37, 1);
      v13 = *(float64x2_t *)v38;
      v14 = *((float64x2_t *)v38 + 1);
      result = v38 + 2;
      v36 = *v35;
      v37 = v35[1];
      v35 += 2;
      --v15;
    }
    while (v15);
    v39 = (float64x2_t *)((char *)v7 + v8);
    *v7 = v17;
    v7[1] = v18;
    v7[2] = v19;
    v7[3] = v20;
    v7 += 4;
    *v39 = v22;
    v39[1] = v23;
    v39[2] = v24;
    v39[3] = v25;
    v40 = (float64x2_t *)((char *)v39 + v8);
    *v40 = v27;
    v40[1] = v28;
    v40[2] = v29;
    v40[3] = v30;
    v41 = (float64x2_t *)((char *)v40 + v8);
    *v41 = v31;
    v41[1] = v32;
    v41[2] = v33;
    v41[3] = v34;
    a3 = v7;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_239A3FE40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, __n128 a11, __n128 a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL i;
  __n128 *v21;
  float *v22;
  float32x2_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  uint64_t v26;
  float v27;
  float *v28;
  float32x2_t v29;
  float *v30;
  float32x4_t v31;
  float *v32;
  float32x4_t v33;
  float *v34;
  __n128 *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  BOOL v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float v66;
  float32x2_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  uint64_t v70;
  BOOL j;
  unint64_t *v72;
  float *v73;
  float32x2_t *v74;
  float32x4_t *v75;
  float32x4_t *v76;
  uint64_t v77;
  float v78;
  float *v79;
  float32x2_t v80;
  float *v81;
  float32x4_t v82;
  float *v83;
  float32x4_t v84;
  float *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t *v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t *v106;
  float32x2_t *v107;
  uint64_t v108;
  float32x2_t *v109;
  float32x2_t *v110;
  float32x2_t v111;
  float32x2_t *v112;
  float32x2_t v113;
  float32x2_t *v114;
  float32x2_t v115;
  float v116;
  float32x2_t v117;
  float32x2_t *v118;
  float32x2_t v119;
  uint64_t v120;
  BOOL k;
  unsigned __int32 *v122;
  float *v123;
  float32x2_t *v124;
  float32x4_t *v125;
  float32x4_t *v126;
  uint64_t v127;
  float v128;
  float *v129;
  float32x2_t v130;
  float *v131;
  float32x4_t v132;
  float *v133;
  float32x4_t v134;
  float *v135;
  unsigned __int32 *v136;
  unsigned __int32 *v137;
  unsigned __int32 *v138;
  float *v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  __int32 *v150;
  float32x2_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  __int32 *v155;
  float32x2_t *v156;
  float32x2_t v157;
  __int32 *v158;
  float32x2_t v159;
  float *v160;
  float v161;
  float32x2_t v162;
  __int32 *v163;
  float32x2_t v164;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_21;
  v18 = result - 3;
  do
  {
    v19 = a2;
    for (i = __OFSUB__(a2, 3); v19 > 3; i = __OFSUB__(v19, 3))
    {
      v19 -= 4;
      v21 = (__n128 *)(a5 + v19 * v15 + 4 * v17);
      v22 = (float *)(a3 + v19 * v16 + 4 * v19);
      v23 = (float32x2_t *)&v22[(unint64_t)v16 / 4];
      v24 = (float32x4_t *)&v22[(unint64_t)v16 / 2];
      v25 = (float32x4_t *)&v22[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
      v26 = v19;
      v27 = *v22;
      v28 = (float *)(a3 + v19 * v16);
      v29 = *v23;
      v30 = (float *)v23 - v19;
      v31 = *v24;
      v32 = &v24->f32[-v19];
      v33 = *v25;
      v34 = &v25->f32[-v19];
      a11 = *v21;
      v35 = (__n128 *)((char *)v21 + v15);
      a12 = *v35;
      v36 = (float32x4_t *)((char *)v35 + v15);
      a13 = *v36;
      v37 = (float32x4_t *)((char *)v36 + v15);
      a14 = *v37;
      v38 = (float32x4_t *)((char *)v37 + v15 - v19 * v15 + -4 * v15);
      v39 = vmulq_n_f32((float32x4_t)a11, v27);
      v40 = vaddq_f32(vmulq_n_f32((float32x4_t)a11, v29.f32[0]), vmulq_lane_f32((float32x4_t)a12, v29, 1));
      v41 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)a11, v31.f32[0]), a13, v31, 2), vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)v31.f32, 1));
      v42 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)a11, v33.f32[0]), a13, v33, 2), vmlaq_laneq_f32(vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)v33.f32, 1), a14, v33, 3));
      if ((v19 & 1) != 0)
      {
        v43 = *v38;
        v38 = (float32x4_t *)((char *)v38 + v15);
        v44 = *v28++;
        v45 = *v30++;
        v46 = *v32++;
        v47 = *v34++;
        v39 = vmlaq_n_f32(v39, v43, v44);
        v40 = vmlaq_n_f32(v40, v43, v45);
        v41 = vmlaq_n_f32(v41, v43, v46);
        v42 = vmlaq_n_f32(v42, v43, v47);
        v26 = v19 - 1;
      }
      if (v26)
      {
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        do
        {
          v53 = *v38;
          v52 = (float32x4_t *)((char *)v38 + v15);
          v54 = *v52;
          v38 = (float32x4_t *)((char *)v52 + v15);
          a11.n128_u64[0] = *(_QWORD *)v28;
          v28 += 2;
          a12.n128_u64[0] = *(_QWORD *)v30;
          v30 += 2;
          a13.i64[0] = *(_QWORD *)v32;
          v32 += 2;
          a14.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v39 = vmlaq_n_f32(v39, v53, a11.n128_f32[0]);
          v40 = vmlaq_n_f32(v40, v53, a12.n128_f32[0]);
          v41 = vmlaq_n_f32(v41, v53, a13.f32[0]);
          v42 = vmlaq_n_f32(v42, v53, a14.f32[0]);
          v48 = vmlaq_lane_f32(v48, v54, (float32x2_t)a11.n128_u64[0], 1);
          v49 = vmlaq_lane_f32(v49, v54, (float32x2_t)a12.n128_u64[0], 1);
          v50 = vmlaq_lane_f32(v50, v54, *(float32x2_t *)a13.f32, 1);
          v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)a14.f32, 1);
          v55 = v26 <= 2;
          v26 -= 2;
        }
        while (!v55);
        v39 = vaddq_f32(v39, v48);
        v40 = vaddq_f32(v40, v49);
        v41 = vaddq_f32(v41, v50);
        v42 = vaddq_f32(v42, v51);
      }
      v14 = vmulq_n_f32(v39, a7);
      *v38 = v14;
      v56 = (float32x4_t *)((char *)v38 + v15);
      *v56 = vmulq_n_f32(v40, a7);
      v57 = (float32x4_t *)((char *)v56 + v15);
      *v57 = vmulq_n_f32(v41, a7);
      *(float32x4_t *)((char *)v57 + v15) = vmulq_n_f32(v42, a7);
    }
    v58 = a2 & 3;
    if (!i && v58 != 0)
    {
      v59 = (float32x4_t *)(a5 + 4 * v17);
      v60 = (float32x2_t *)(a3 + (v19 - 1) * v16);
      if (v58 != 1)
      {
        if (v58 != 2)
        {
          v61 = *v60;
          v63 = *v59;
          v62 = (float32x4_t *)((char *)v59 + v15);
          v65 = *v62;
          v64 = (float32x4_t *)((char *)v62 + v15);
          a12 = *(__n128 *)v64;
          v66 = v60[1].f32[0];
          v60 = (float32x2_t *)((char *)v60 - v16);
          *v64 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v61.f32[0]), vmulq_lane_f32(v65, v61, 1)), vmulq_n_f32(*v64, v66)), a7);
          v59 = (float32x4_t *)((char *)v64 - 2 * v15);
        }
        v67 = *v60;
        v69 = *v59;
        v68 = (float32x4_t *)((char *)v59 + v15);
        a11 = *(__n128 *)v68;
        v60 = (float32x2_t *)((char *)v60 - v16);
        *v68 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v69, v67.f32[0]), vmulq_lane_f32(*v68, v67, 1)), a7);
        v59 = (float32x4_t *)((char *)v68 - v15);
      }
      v14 = vmulq_n_f32(vmulq_n_f32(*v59, v60->f32[0]), a7);
      *v59 = v14;
    }
    v17 += 4;
    v55 = v18 <= 4;
    v18 -= 4;
  }
  while (!v55);
  v55 = v18 <= -3;
  result = v18 + 3;
  if (!v55)
  {
LABEL_21:
    if (result > 1)
    {
      v70 = a2;
      for (j = __OFSUB__(a2, 3); v70 > 3; j = __OFSUB__(v70, 3))
      {
        v70 -= 4;
        v72 = (unint64_t *)(a5 + v70 * v15 + 4 * v17);
        v73 = (float *)(a3 + v70 * v16 + 4 * v70);
        v74 = (float32x2_t *)&v73[(unint64_t)v16 / 4];
        v75 = (float32x4_t *)&v73[(unint64_t)v16 / 2];
        v76 = (float32x4_t *)&v73[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
        v77 = v70;
        v78 = *v73;
        v79 = (float *)(a3 + v70 * v16);
        v80 = *v74;
        v81 = (float *)v74 - v70;
        v82 = *v75;
        v83 = &v75->f32[-v70];
        v84 = *v76;
        v85 = &v76->f32[-v70];
        a11.n128_u64[0] = *v72;
        v86 = (unint64_t *)((char *)v72 + v15);
        a12.n128_u64[0] = *v86;
        v87 = (unint64_t *)((char *)v86 + v15);
        a13.i64[0] = *v87;
        v88 = (unint64_t *)((char *)v87 + v15);
        a14.i64[0] = *v88;
        v89 = (float32x2_t *)((char *)v88 + v15 - v70 * v15 + -4 * v15);
        v90 = vmul_n_f32((float32x2_t)a11.n128_u64[0], v78);
        v91 = vadd_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v80.f32[0]), vmul_lane_f32((float32x2_t)a12.n128_u64[0], v80, 1));
        v92 = vadd_f32(vmla_laneq_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v82.f32[0]), *(float32x2_t *)a13.f32, v82, 2), vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)v82.f32, 1));
        v93 = vadd_f32(vmla_laneq_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v84.f32[0]), *(float32x2_t *)a13.f32, v84, 2), vmla_laneq_f32(vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)v84.f32, 1), *(float32x2_t *)a14.f32, v84, 3));
        if ((v70 & 1) != 0)
        {
          v94 = *v89;
          v89 = (float32x2_t *)((char *)v89 + v15);
          v95 = *v79++;
          v96 = *v81++;
          v97 = *v83++;
          v98 = *v85++;
          v90 = vmla_n_f32(v90, v94, v95);
          v91 = vmla_n_f32(v91, v94, v96);
          v92 = vmla_n_f32(v92, v94, v97);
          v93 = vmla_n_f32(v93, v94, v98);
          v77 = v70 - 1;
        }
        if (v77)
        {
          v99 = 0;
          v100 = 0;
          v101 = 0;
          v102 = 0;
          do
          {
            v104 = *v89;
            v103 = (float32x2_t *)((char *)v89 + v15);
            v105 = *v103;
            v89 = (float32x2_t *)((char *)v103 + v15);
            a11.n128_u64[0] = *(_QWORD *)v79;
            v79 += 2;
            a12.n128_u64[0] = *(_QWORD *)v81;
            v81 += 2;
            a13.i64[0] = *(_QWORD *)v83;
            v83 += 2;
            a14.i64[0] = *(_QWORD *)v85;
            v85 += 2;
            v90 = vmla_n_f32(v90, v104, a11.n128_f32[0]);
            v91 = vmla_n_f32(v91, v104, a12.n128_f32[0]);
            v92 = vmla_n_f32(v92, v104, a13.f32[0]);
            v93 = vmla_n_f32(v93, v104, a14.f32[0]);
            v99 = vmla_lane_f32(v99, v105, (float32x2_t)a11.n128_u64[0], 1);
            v100 = vmla_lane_f32(v100, v105, (float32x2_t)a12.n128_u64[0], 1);
            v101 = vmla_lane_f32(v101, v105, *(float32x2_t *)a13.f32, 1);
            v102 = vmla_lane_f32(v102, v105, *(float32x2_t *)a14.f32, 1);
            v55 = v77 <= 2;
            v77 -= 2;
          }
          while (!v55);
          v90 = vadd_f32(v90, v99);
          v91 = vadd_f32(v91, v100);
          v92 = vadd_f32(v92, v101);
          v93 = vadd_f32(v93, v102);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(v90, a7);
        *v89 = *(float32x2_t *)v14.f32;
        v106 = (float32x2_t *)((char *)v89 + v15);
        *v106 = vmul_n_f32(v91, a7);
        v107 = (float32x2_t *)((char *)v106 + v15);
        *v107 = vmul_n_f32(v92, a7);
        *(float32x2_t *)((char *)v107 + v15) = vmul_n_f32(v93, a7);
      }
      v108 = a2 & 3;
      if (!j && v108 != 0)
      {
        v109 = (float32x2_t *)(a5 + 4 * v17);
        v110 = (float32x2_t *)(a3 + (v70 - 1) * v16);
        if (v108 != 1)
        {
          if (v108 != 2)
          {
            v111 = *v110;
            v113 = *v109;
            v112 = (float32x2_t *)((char *)v109 + v15);
            v115 = *v112;
            v114 = (float32x2_t *)((char *)v112 + v15);
            a12.n128_u64[0] = (unint64_t)*v114;
            v116 = v110[1].f32[0];
            v110 = (float32x2_t *)((char *)v110 - v16);
            *v114 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v113, v111.f32[0]), vmul_lane_f32(v115, v111, 1)), vmul_n_f32(*v114, v116)), a7);
            v109 = &v114[v15 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v117 = *v110;
          v119 = *v109;
          v118 = (float32x2_t *)((char *)v109 + v15);
          a11.n128_u64[0] = (unint64_t)*v118;
          v110 = (float32x2_t *)((char *)v110 - v16);
          *v118 = vmul_n_f32(vadd_f32(vmul_n_f32(v119, v117.f32[0]), vmul_lane_f32(*v118, v117, 1)), a7);
          v109 = (float32x2_t *)((char *)v118 - v15);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(vmul_n_f32(*v109, v110->f32[0]), a7);
        *v109 = *(float32x2_t *)v14.f32;
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v120 = a2;
      for (k = __OFSUB__(a2, 3); v120 > 3; k = __OFSUB__(v120, 3))
      {
        v120 -= 4;
        v122 = (unsigned __int32 *)(a5 + v120 * v15 + 4 * v17);
        v123 = (float *)(a3 + v120 * v16 + 4 * v120);
        v124 = (float32x2_t *)&v123[(unint64_t)v16 / 4];
        v125 = (float32x4_t *)&v123[(unint64_t)v16 / 2];
        v126 = (float32x4_t *)&v123[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
        v127 = v120;
        v128 = *v123;
        v129 = (float *)(a3 + v120 * v16);
        v130 = *v124;
        v131 = (float *)v124 - v120;
        v132 = *v125;
        v133 = &v125->f32[-v120];
        v134 = *v126;
        v135 = &v126->f32[-v120];
        a11.n128_u32[0] = *v122;
        v136 = &v122[(unint64_t)v15 / 4];
        a12.n128_u32[0] = *v136;
        v137 = &v136[(unint64_t)v15 / 4];
        a13.i32[0] = *v137;
        v138 = &v137[(unint64_t)v15 / 4];
        a14.i32[0] = *v138;
        v139 = (float *)((char *)&v138[(unint64_t)v15 / 4] - v120 * v15 + -4 * v15);
        a11.n128_u64[0] = (unint64_t)vtrn1_s32((int32x2_t)a11.n128_u64[0], (int32x2_t)a12.n128_u64[0]);
        *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        a11.n128_u64[1] = a13.i64[0];
        v132.i32[3] = 0;
        v14.f32[0] = v128 * a11.n128_f32[0];
        v140 = vmul_f32(v130, (float32x2_t)a11.n128_u64[0]);
        v141 = vmulq_f32(v132, (float32x4_t)a11);
        v142 = vmulq_f32(v134, (float32x4_t)a11);
        v143 = (float32x2_t)vpaddq_f32(v141, v141).u64[0];
        v144 = (float32x2_t)vpaddq_f32(v142, v142).u64[0];
        if ((v120 & 1) != 0)
        {
          v145 = *v139;
          v139 = (float *)((char *)v139 + v15);
          v146 = *v129++;
          v147 = *v131++;
          v148 = *v133++;
          v149 = *v135++;
          v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v145 * v146);
          v140.f32[0] = vaddv_f32(v140) + (float)(v145 * v147);
          v143.f32[0] = vaddv_f32(v143) + (float)(v145 * v148);
          v144.f32[0] = vaddv_f32(v144) + (float)(v145 * v149);
          v127 = v120 - 1;
        }
        if (v127)
        {
          do
          {
            v151.f32[0] = *v139;
            v150 = (__int32 *)&v139[(unint64_t)v15 / 4];
            v151.i32[1] = *v150;
            v139 = (float *)&v150[(unint64_t)v15 / 4];
            a11.n128_u64[0] = *(_QWORD *)v129;
            v129 += 2;
            a12.n128_u64[0] = *(_QWORD *)v131;
            v131 += 2;
            a13.i64[0] = *(_QWORD *)v133;
            v133 += 2;
            a14.i64[0] = *(_QWORD *)v135;
            v135 += 2;
            *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v151, (float32x2_t)a11.n128_u64[0]);
            v140 = vmla_f32(v140, v151, (float32x2_t)a12.n128_u64[0]);
            v143 = vmla_f32(v143, v151, *(float32x2_t *)a13.f32);
            v144 = vmla_f32(v144, v151, *(float32x2_t *)a14.f32);
            v55 = v127 <= 2;
            v127 -= 2;
          }
          while (!v55);
        }
        *v139 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
        v152 = &v139[(unint64_t)v15 / 4];
        *v152 = vaddv_f32(v140) * a7;
        v153 = &v152[(unint64_t)v15 / 4];
        *v153 = vaddv_f32(v143) * a7;
        v153[(unint64_t)v15 / 4] = vaddv_f32(v144) * a7;
      }
      v154 = a2 & 3;
      if (!k && v154 != 0)
      {
        v155 = (__int32 *)(a5 + 4 * v17);
        v156 = (float32x2_t *)(a3 + (v120 - 1) * v16);
        if (v154 != 1)
        {
          if (v154 != 2)
          {
            v157 = *v156;
            v159.i32[0] = *v155;
            v158 = &v155[(unint64_t)v15 / 4];
            v159.i32[1] = *v158;
            v160 = (float *)&v158[(unint64_t)v15 / 4];
            v161 = v156[1].f32[0];
            v156 = (float32x2_t *)((char *)v156 - v16);
            *v160 = (float)(vaddv_f32(vmul_f32(v159, v157)) + (float)(v161 * *v160)) * a7;
            v155 = (__int32 *)&v160[v15 / 0xFFFFFFFFFFFFFFFELL];
          }
          v162 = *v156;
          v164.i32[0] = *v155;
          v163 = &v155[(unint64_t)v15 / 4];
          v164.i32[1] = *v163;
          v156 = (float32x2_t *)((char *)v156 - v16);
          *(float *)v163 = vaddv_f32(vmul_f32(v164, v162)) * a7;
          v155 = &v163[v15 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v155 = (float)(*(float *)v155 * v156->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_239A40440(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL i;
  float32x4_t *v22;
  uint64_t v23;
  float *v24;
  float32x2_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x2_t *v28;
  float v29;
  float *v30;
  float32x2_t v31;
  float *v32;
  float32x4_t v33;
  float *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  BOOL v56;
  float32x4_t *v57;
  float32x4_t *v58;
  uint64_t v59;
  float32x4_t *v60;
  float *v61;
  float32x2_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  uint64_t v69;
  BOOL j;
  float32x2_t *v71;
  uint64_t v72;
  float *v73;
  float32x2_t *v74;
  float32x4_t *v75;
  uint64_t v76;
  float32x2_t *v77;
  float v78;
  float *v79;
  float32x2_t v80;
  float *v81;
  float32x4_t v82;
  float *v83;
  unint64_t *v84;
  float32x2_t v85;
  unint64_t *v86;
  unint64_t *v87;
  float32x2_t *v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float32x2_t v110;
  float32x2_t *v111;
  float32x2_t v112;
  float32x2_t *v113;
  float32x2_t v114;
  float32x2_t *v115;
  float32x2_t v116;
  uint64_t v117;
  BOOL k;
  __int32 *v119;
  uint64_t v120;
  float *v121;
  float32x2_t *v122;
  float32x4_t *v123;
  uint64_t v124;
  float *v125;
  float v126;
  float *v127;
  float32x2_t v128;
  float *v129;
  float32x4_t v130;
  float *v131;
  unsigned __int32 *v132;
  unsigned __int32 *v133;
  unsigned __int32 *v134;
  float *v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  __int32 *v145;
  float32x2_t v146;
  float32x2_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  __int32 *v151;
  float32x2_t *v152;
  float32x2_t v153;
  __int32 *v154;
  float32x2_t v155;
  float *v156;
  float *v157;
  float v158;

  v16 = 4 * a6;
  v17 = 4 * a4;
  v18 = 0;
  if (result <= 3)
    goto LABEL_21;
  v19 = result - 3;
  do
  {
    v20 = a2;
    for (i = __OFSUB__(a2, 3); v20 > 3; i = __OFSUB__(v20, 3))
    {
      v20 -= 4;
      v22 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
      v23 = a3 + v20 * v17 + 4 * v20;
      v24 = (float *)(v23 + v17);
      v25 = (float32x2_t *)(v23 + 2 * v17);
      v26 = (float32x4_t *)(v23 + v17 + 2 * v17);
      v27 = v20;
      v28 = (float32x2_t *)(a3 + v20 * v17);
      v29 = *v24;
      v30 = &v24[-v20];
      v31 = *v25;
      v32 = (float *)v25 - v20;
      v33 = *v26;
      v34 = &v26->f32[-v20];
      v36 = *v22;
      v35 = (float32x4_t *)((char *)v22 + v16);
      a12 = *v35;
      v37 = (float32x4_t *)((char *)v35 + v16);
      a13 = *v37;
      v38 = (float32x4_t *)((char *)v37 + v16);
      a14 = *v38;
      v39 = (float32x4_t *)((char *)v38 + v16 - v20 * v16 + -4 * v16);
      v40 = vmlaq_n_f32(a12, v36, v29);
      v41 = vaddq_f32(vmlaq_n_f32(a13, v36, v31.f32[0]), vmulq_lane_f32(a12, v31, 1));
      v42 = vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32(a14, v36, v33.f32[0]), a13, v33, 2), vmulq_lane_f32(a12, *(float32x2_t *)v33.f32, 1));
      if ((v20 & 1) != 0)
      {
        v43 = *v39;
        v39 = (float32x4_t *)((char *)v39 + v16);
        v44 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v45 = *v30++;
        v46 = *v32++;
        v47 = *v34++;
        v36 = vmlaq_n_f32(v36, v43, v44);
        v40 = vmlaq_n_f32(v40, v43, v45);
        v41 = vmlaq_n_f32(v41, v43, v46);
        v42 = vmlaq_n_f32(v42, v43, v47);
        v27 = v20 - 1;
      }
      if (v27)
      {
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        do
        {
          v53 = *v39;
          v52 = (float32x4_t *)((char *)v39 + v16);
          v54 = *v52;
          v39 = (float32x4_t *)((char *)v52 + v16);
          v55 = *v28++;
          a12.i64[0] = *(_QWORD *)v30;
          v30 += 2;
          a13.i64[0] = *(_QWORD *)v32;
          v32 += 2;
          a14.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v36 = vmlaq_n_f32(v36, v53, v55.f32[0]);
          v40 = vmlaq_n_f32(v40, v53, a12.f32[0]);
          v41 = vmlaq_n_f32(v41, v53, a13.f32[0]);
          v42 = vmlaq_n_f32(v42, v53, a14.f32[0]);
          v48 = vmlaq_lane_f32(v48, v54, v55, 1);
          v49 = vmlaq_lane_f32(v49, v54, *(float32x2_t *)a12.f32, 1);
          v50 = vmlaq_lane_f32(v50, v54, *(float32x2_t *)a13.f32, 1);
          v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)a14.f32, 1);
          v56 = v27 <= 2;
          v27 -= 2;
        }
        while (!v56);
        v36 = vaddq_f32(v36, v48);
        v40 = vaddq_f32(v40, v49);
        v41 = vaddq_f32(v41, v50);
        v42 = vaddq_f32(v42, v51);
      }
      v14 = vmulq_n_f32(v36, a7);
      v15 = vmulq_n_f32(v40, a7);
      *v39 = v14;
      v57 = (float32x4_t *)((char *)v39 + v16);
      *v57 = v15;
      v58 = (float32x4_t *)((char *)v57 + v16);
      *v58 = vmulq_n_f32(v41, a7);
      *(float32x4_t *)((char *)v58 + v16) = vmulq_n_f32(v42, a7);
    }
    v59 = a2 & 3;
    if (!i && v59 != 0)
    {
      v60 = (float32x4_t *)(a5 + 4 * v18);
      v61 = (float *)(a3 + (v20 - 1) * v17);
      if (v59 != 1)
      {
        if (v59 != 2)
        {
          v62 = *(float32x2_t *)v61;
          v64 = *v60;
          v63 = (float32x4_t *)((char *)v60 + v16);
          v66 = *v63;
          v65 = (float32x4_t *)((char *)v63 + v16);
          v61 = (float *)((char *)v61 - v17);
          a12 = vmlaq_n_f32(*v65, v64, v62.f32[0]);
          *v65 = vmulq_n_f32(vaddq_f32(vmulq_lane_f32(v66, v62, 1), a12), a7);
          v60 = (float32x4_t *)((char *)v65 - 2 * v16);
        }
        v68 = *v60;
        v67 = (float32x4_t *)((char *)v60 + v16);
        *v67 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v68, *v61), *v67), a7);
        v60 = (float32x4_t *)((char *)v67 - v16);
      }
      v14 = vmulq_n_f32(*v60, a7);
      *v60 = v14;
    }
    v18 += 4;
    v56 = v19 <= 4;
    v19 -= 4;
  }
  while (!v56);
  v56 = v19 <= -3;
  result = v19 + 3;
  if (!v56)
  {
LABEL_21:
    if (result > 1)
    {
      v69 = a2;
      for (j = __OFSUB__(a2, 3); v69 > 3; j = __OFSUB__(v69, 3))
      {
        v69 -= 4;
        v71 = (float32x2_t *)(a5 + v69 * v16 + 4 * v18);
        v72 = a3 + v69 * v17 + 4 * v69;
        v73 = (float *)(v72 + v17);
        v74 = (float32x2_t *)(v72 + 2 * v17);
        v75 = (float32x4_t *)(v72 + v17 + 2 * v17);
        v76 = v69;
        v77 = (float32x2_t *)(a3 + v69 * v17);
        v78 = *v73;
        v79 = &v73[-v69];
        v80 = *v74;
        v81 = (float *)v74 - v69;
        v82 = *v75;
        v83 = &v75->f32[-v69];
        v85 = *v71;
        v84 = (unint64_t *)((char *)v71 + v16);
        a12.i64[0] = *v84;
        v86 = (unint64_t *)((char *)v84 + v16);
        a13.i64[0] = *v86;
        v87 = (unint64_t *)((char *)v86 + v16);
        a14.i64[0] = *v87;
        v88 = (float32x2_t *)((char *)v87 + v16 - v69 * v16 + -4 * v16);
        v89 = vmla_n_f32(*(float32x2_t *)a12.f32, v85, v78);
        v90 = vadd_f32(vmla_n_f32(*(float32x2_t *)a13.f32, v85, v80.f32[0]), vmul_lane_f32(*(float32x2_t *)a12.f32, v80, 1));
        v91 = vadd_f32(vmla_laneq_f32(vmla_n_f32(*(float32x2_t *)a14.f32, v85, v82.f32[0]), *(float32x2_t *)a13.f32, v82, 2), vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)v82.f32, 1));
        if ((v69 & 1) != 0)
        {
          v92 = *v88;
          v88 = (float32x2_t *)((char *)v88 + v16);
          v93 = v77->f32[0];
          v77 = (float32x2_t *)((char *)v77 + 4);
          v94 = *v79++;
          v95 = *v81++;
          v96 = *v83++;
          v85 = vmla_n_f32(v85, v92, v93);
          v89 = vmla_n_f32(v89, v92, v94);
          v90 = vmla_n_f32(v90, v92, v95);
          v91 = vmla_n_f32(v91, v92, v96);
          v76 = v69 - 1;
        }
        if (v76)
        {
          v97 = 0;
          v98 = 0;
          v99 = 0;
          v100 = 0;
          do
          {
            v102 = *v88;
            v101 = (float32x2_t *)((char *)v88 + v16);
            v103 = *v101;
            v88 = (float32x2_t *)((char *)v101 + v16);
            v104 = *v77++;
            a12.i64[0] = *(_QWORD *)v79;
            v79 += 2;
            a13.i64[0] = *(_QWORD *)v81;
            v81 += 2;
            a14.i64[0] = *(_QWORD *)v83;
            v83 += 2;
            v85 = vmla_n_f32(v85, v102, v104.f32[0]);
            v89 = vmla_n_f32(v89, v102, a12.f32[0]);
            v90 = vmla_n_f32(v90, v102, a13.f32[0]);
            v91 = vmla_n_f32(v91, v102, a14.f32[0]);
            v97 = vmla_lane_f32(v97, v103, v104, 1);
            v98 = vmla_lane_f32(v98, v103, *(float32x2_t *)a12.f32, 1);
            v99 = vmla_lane_f32(v99, v103, *(float32x2_t *)a13.f32, 1);
            v100 = vmla_lane_f32(v100, v103, *(float32x2_t *)a14.f32, 1);
            v56 = v76 <= 2;
            v76 -= 2;
          }
          while (!v56);
          v85 = vadd_f32(v85, v97);
          v89 = vadd_f32(v89, v98);
          v90 = vadd_f32(v90, v99);
          v91 = vadd_f32(v91, v100);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(v85, a7);
        *(float32x2_t *)v15.f32 = vmul_n_f32(v89, a7);
        *v88 = *(float32x2_t *)v14.f32;
        v105 = (float32x2_t *)((char *)v88 + v16);
        *v105 = *(float32x2_t *)v15.f32;
        v106 = (float32x2_t *)((char *)v105 + v16);
        *v106 = vmul_n_f32(v90, a7);
        *(float32x2_t *)((char *)v106 + v16) = vmul_n_f32(v91, a7);
      }
      v107 = a2 & 3;
      if (!j && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + 4 * v18);
        v109 = (float *)(a3 + (v69 - 1) * v17);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            v110 = *(float32x2_t *)v109;
            v112 = *v108;
            v111 = (float32x2_t *)((char *)v108 + v16);
            v114 = *v111;
            v113 = (float32x2_t *)((char *)v111 + v16);
            *(float32x2_t *)a12.f32 = *v113;
            v109 = (float *)((char *)v109 - v17);
            *(float32x2_t *)v15.f32 = vmul_lane_f32(v114, v110, 1);
            *v113 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v112, v110.f32[0]), *(float32x2_t *)v15.f32), *v113), a7);
            v108 = &v113[v16 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v116 = *v108;
          v115 = (float32x2_t *)((char *)v108 + v16);
          *v115 = vmul_n_f32(vadd_f32(vmul_n_f32(v116, *v109), *v115), a7);
          v108 = (float32x2_t *)((char *)v115 - v16);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(*v108, a7);
        *v108 = *(float32x2_t *)v14.f32;
      }
      v18 += 2;
      result -= 2;
    }
    if (result)
    {
      v117 = a2;
      for (k = __OFSUB__(a2, 3); v117 > 3; k = __OFSUB__(v117, 3))
      {
        v117 -= 4;
        v119 = (__int32 *)(a5 + v117 * v16 + 4 * v18);
        v120 = a3 + v117 * v17 + 4 * v117;
        v121 = (float *)(v120 + v17);
        v122 = (float32x2_t *)(v120 + 2 * v17);
        v123 = (float32x4_t *)(v120 + v17 + 2 * v17);
        v124 = v117;
        v125 = (float *)(a3 + v117 * v17);
        v126 = *v121;
        v127 = &v121[-v117];
        v128 = *v122;
        v129 = (float *)v122 - v117;
        v130 = *v123;
        v131 = &v123->f32[-v117];
        v14.i32[0] = *v119;
        v132 = (unsigned __int32 *)&v119[(unint64_t)v16 / 4];
        a12.i32[0] = *v132;
        v133 = &v132[(unint64_t)v16 / 4];
        a13.i32[0] = *v133;
        v134 = &v133[(unint64_t)v16 / 4];
        a14.i32[0] = *v134;
        v135 = (float *)((char *)&v134[(unint64_t)v16 / 4] - v117 * v16 + -4 * v16);
        *(int32x2_t *)v136.f32 = vtrn1_s32(*(int32x2_t *)v14.f32, *(int32x2_t *)a12.f32);
        *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        v136.i64[1] = a13.i64[0];
        v130.i32[3] = 0;
        v14.i32[1] = 0;
        v138 = vmul_f32(v128, *(float32x2_t *)v136.f32);
        v137 = vmulq_f32(v130, v136);
        v15.f32[0] = (float)(v126 * v136.f32[0]) + a12.f32[0];
        v139 = (float32x2_t)vpaddq_f32(v137, v137).u64[0];
        v138.f32[0] = vaddv_f32(v138) + a13.f32[0];
        v139.f32[0] = vaddv_f32(v139) + a14.f32[0];
        if ((v117 & 1) != 0)
        {
          v140 = *v135;
          v135 = (float *)((char *)v135 + v16);
          v141 = *v125++;
          v142 = *v127++;
          v143 = *v129++;
          v144 = *v131++;
          v14.f32[0] = v14.f32[0] + (float)(v140 * v141);
          v15.f32[0] = v15.f32[0] + (float)(v140 * v142);
          v138.f32[0] = v138.f32[0] + (float)(v140 * v143);
          v139.f32[0] = v139.f32[0] + (float)(v140 * v144);
          v124 = v117 - 1;
        }
        if (v124)
        {
          do
          {
            v146.f32[0] = *v135;
            v145 = (__int32 *)&v135[(unint64_t)v16 / 4];
            v146.i32[1] = *v145;
            v135 = (float *)&v145[(unint64_t)v16 / 4];
            v147 = *(float32x2_t *)v125;
            v125 += 2;
            a12.i64[0] = *(_QWORD *)v127;
            v127 += 2;
            a13.i64[0] = *(_QWORD *)v129;
            v129 += 2;
            a14.i64[0] = *(_QWORD *)v131;
            v131 += 2;
            *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v146, v147);
            *(float32x2_t *)v15.f32 = vmla_f32(*(float32x2_t *)v15.f32, v146, *(float32x2_t *)a12.f32);
            v138 = vmla_f32(v138, v146, *(float32x2_t *)a13.f32);
            v139 = vmla_f32(v139, v146, *(float32x2_t *)a14.f32);
            v56 = v124 <= 2;
            v124 -= 2;
          }
          while (!v56);
        }
        *v135 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
        v148 = &v135[(unint64_t)v16 / 4];
        *v148 = vaddv_f32(*(float32x2_t *)v15.f32) * a7;
        v149 = &v148[(unint64_t)v16 / 4];
        *v149 = vaddv_f32(v138) * a7;
        v149[(unint64_t)v16 / 4] = vaddv_f32(v139) * a7;
      }
      v150 = a2 & 3;
      if (!k && v150 != 0)
      {
        v151 = (__int32 *)(a5 + 4 * v18);
        v152 = (float32x2_t *)(a3 + (v117 - 1) * v17);
        if (v150 != 1)
        {
          if (v150 != 2)
          {
            v153 = *v152;
            v155.i32[0] = *v151;
            v154 = &v151[(unint64_t)v16 / 4];
            v155.i32[1] = *v154;
            v156 = (float *)&v154[(unint64_t)v16 / 4];
            v152 = (float32x2_t *)((char *)v152 - v17);
            *v156 = (float)(vaddv_f32(vmul_f32(v155, v153)) + *v156) * a7;
            v151 = (__int32 *)&v156[v16 / 0xFFFFFFFFFFFFFFFELL];
          }
          v158 = *(float *)v151;
          v157 = (float *)&v151[(unint64_t)v16 / 4];
          *v157 = (float)((float)(v158 * v152->f32[0]) + *v157) * a7;
          v151 = (__int32 *)&v157[v16 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v151 = *(float *)v151 * a7;
      }
    }
  }
  return result;
}

uint64_t sub_239A409D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float *v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float32x4_t *v27;
  float32x2_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  BOOL v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t *v66;
  float *v67;
  float v68;
  float v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  unint64_t *v76;
  float *v77;
  uint64_t v78;
  float32x2_t *v79;
  float v80;
  float32x4_t *v81;
  float32x2_t v82;
  float32x4_t *v83;
  float32x4_t v84;
  float32x4_t *v85;
  float32x4_t v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t *v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t *v103;
  float32x2_t *v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float *v110;
  float v111;
  float *v112;
  float v113;
  float v114;
  float32x2_t *v115;
  float32x2_t v116;
  unint64_t *v117;
  float32x2_t v118;
  float32x2_t *v119;
  float *v120;
  float v121;
  float v122;
  unint64_t *v123;
  float32x2_t v124;
  float32x2_t *v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  unsigned __int32 *v129;
  float *v130;
  uint64_t v131;
  float32x2_t *v132;
  float v133;
  float32x4_t *v134;
  float32x2_t v135;
  float32x4_t *v136;
  float32x4_t v137;
  float32x4_t *v138;
  float32x4_t v139;
  unsigned __int32 *v140;
  unsigned __int32 *v141;
  unsigned __int32 *v142;
  float *v143;
  float32x4_t v144;
  float v145;
  float32x4_t v146;
  float *v147;
  float v148;
  float v149;
  float32x4_t *v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  uint64_t v154;
  float *v155;
  float *v156;
  float *v157;
  float v158;
  float *v159;
  float v160;
  float v161;
  float *v162;
  float v163;
  float *v164;
  float v165;
  float v166;
  float *v167;
  float *v168;
  float v169;
  float v170;
  float *v171;
  float v172;
  float v173;
  float *v174;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float *)(a3 + v19 * v16 + 4 * v19);
        v24 = a2 - v19 - 4;
        v26 = *v23;
        v25 = (float32x2_t *)&v23[(unint64_t)v16 / 4];
        v28 = *v25;
        v27 = (float32x4_t *)((char *)v25 + v16);
        v30 = *v27;
        v29 = (float32x4_t *)((char *)v27 + v16);
        v32 = *v29;
        v31 = (float32x4_t *)((char *)v29 + v16);
        a11 = *v22;
        v33 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v33;
        v34 = (float32x4_t *)((char *)v33 + v15);
        a13 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v15);
        a14 = *v35;
        v36 = (float32x4_t *)((char *)v35 + v15);
        v37 = vmulq_laneq_f32(a14, v32, 3);
        v38 = vaddq_f32(vmlaq_lane_f32(vmulq_lane_f32(a14, *(float32x2_t *)v32.f32, 1), a12, v28, 1), vmulq_lane_f32(a13, *(float32x2_t *)v30.f32, 1));
        v39 = vaddq_f32(vmulq_laneq_f32(a14, v32, 2), vmulq_laneq_f32(a13, v30, 2));
        v40 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(a14, v32.f32[0]), a12, v28.f32[0]), vmlaq_n_f32(vmulq_n_f32(a13, v30.f32[0]), a11, v26));
        if ((v24 & 1) != 0)
        {
          v41 = *v36;
          v36 = (float32x4_t *)((char *)v36 + v15);
          a11 = *v31;
          v31 = (float32x4_t *)((char *)v31 + v16);
          v40 = vmlaq_n_f32(v40, v41, a11.f32[0]);
          v38 = vmlaq_lane_f32(v38, v41, *(float32x2_t *)a11.f32, 1);
          v39 = vmlaq_laneq_f32(v39, v41, a11, 2);
          v37 = vmlaq_laneq_f32(v37, v41, a11, 3);
          v24 = a2 - v19 - 5;
        }
        if (v24)
        {
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          v45 = 0uLL;
          do
          {
            v47 = *v36;
            v46 = (float32x4_t *)((char *)v36 + v15);
            v48 = *v46;
            v36 = (float32x4_t *)((char *)v46 + v15);
            a11 = *v31;
            v49 = (float32x4_t *)((char *)v31 + v16);
            a12 = *v49;
            v31 = (float32x4_t *)((char *)v49 + v16);
            v40 = vmlaq_n_f32(v40, v47, a11.f32[0]);
            v38 = vmlaq_lane_f32(v38, v47, *(float32x2_t *)a11.f32, 1);
            v39 = vmlaq_laneq_f32(v39, v47, a11, 2);
            v37 = vmlaq_laneq_f32(v37, v47, a11, 3);
            v42 = vmlaq_n_f32(v42, v48, a12.f32[0]);
            v43 = vmlaq_lane_f32(v43, v48, *(float32x2_t *)a12.f32, 1);
            v44 = vmlaq_laneq_f32(v44, v48, a12, 2);
            v45 = vmlaq_laneq_f32(v45, v48, a12, 3);
            v50 = v24 <= 2;
            v24 -= 2;
          }
          while (!v50);
          v40 = vaddq_f32(v40, v42);
          v38 = vaddq_f32(v38, v43);
          v39 = vaddq_f32(v39, v44);
          v37 = vaddq_f32(v37, v45);
        }
        v14 = vmulq_n_f32(v40, a7);
        v51 = (float32x4_t *)((char *)v36 - (a2 - v19) * v15);
        *v51 = v14;
        v52 = (float32x4_t *)((char *)v51 + v15);
        *v52 = vmulq_n_f32(v38, a7);
        v53 = (float32x4_t *)((char *)v52 + v15);
        *v53 = vmulq_n_f32(v39, a7);
        *(float32x4_t *)((char *)v53 + v15) = vmulq_n_f32(v37, a7);
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v50 = v21 <= 4;
        v21 -= 4;
      }
      while (!v50);
    }
    v54 = a2 & 3;
    if (!v20 && v54 != 0)
    {
      v55 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v56 = (float *)(a3 + v19 * v16 + 4 * v19);
      if (v54 != 1)
      {
        if (v54 != 2)
        {
          v58 = *v56;
          v57 = &v56[(unint64_t)v16 / 4];
          v60 = *v57;
          v59 = &v57[(unint64_t)v16 / 4];
          v61 = *v59;
          v56 = &v59[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
          v63 = *v55;
          v62 = (float32x4_t *)((char *)v55 + v15);
          v65 = *v62;
          v64 = (float32x4_t *)((char *)v62 + v15);
          a12 = *v64;
          v66 = (float32x4_t *)((char *)v64 - 2 * v15);
          *v66 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v58), vmulq_n_f32(v65, v60)), vmulq_n_f32(a12, v61)), a7);
          v55 = (float32x4_t *)((char *)v66 + v15);
        }
        v68 = *v56;
        v67 = &v56[(unint64_t)v16 / 4];
        v69 = *v67;
        v56 = v67 + 1;
        v71 = *v55;
        v70 = (float32x4_t *)((char *)v55 + v15);
        a11 = *v70;
        v72 = (float32x4_t *)((char *)v70 - v15);
        *v72 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v71, v68), vmulq_n_f32(a11, v69)), a7);
        v55 = (float32x4_t *)((char *)v72 + v15);
      }
      v14 = vmulq_n_f32(vmulq_n_f32(*v55, *v56), a7);
      *v55 = v14;
    }
    v17 += 4;
    v50 = v18 <= 4;
    v18 -= 4;
  }
  while (!v50);
  v50 = v18 <= -3;
  result = v18 + 3;
  if (!v50)
  {
LABEL_22:
    if (result > 1)
    {
      v73 = 0;
      v74 = __OFSUB__(a2, 3);
      v75 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v76 = (unint64_t *)(a5 + v73 * v15 + 4 * v17);
          v77 = (float *)(a3 + v73 * v16 + 4 * v73);
          v78 = a2 - v73 - 4;
          v80 = *v77;
          v79 = (float32x2_t *)&v77[(unint64_t)v16 / 4];
          v82 = *v79;
          v81 = (float32x4_t *)((char *)v79 + v16);
          v84 = *v81;
          v83 = (float32x4_t *)((char *)v81 + v16);
          v86 = *v83;
          v85 = (float32x4_t *)((char *)v83 + v16);
          a11.i64[0] = *v76;
          v87 = (unint64_t *)((char *)v76 + v15);
          a12.i64[0] = *v87;
          v88 = (unint64_t *)((char *)v87 + v15);
          a13.i64[0] = *v88;
          v89 = (unint64_t *)((char *)v88 + v15);
          a14.i64[0] = *v89;
          v90 = (float32x2_t *)((char *)v89 + v15);
          v91 = vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 3);
          v92 = vadd_f32(vmla_lane_f32(vmul_lane_f32(*(float32x2_t *)a14.f32, *(float32x2_t *)v86.f32, 1), *(float32x2_t *)a12.f32, v82, 1), vmul_lane_f32(*(float32x2_t *)a13.f32, *(float32x2_t *)v84.f32, 1));
          v93 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 2), vmul_laneq_f32(*(float32x2_t *)a13.f32, v84, 2));
          v94 = vadd_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)a14.f32, v86.f32[0]), *(float32x2_t *)a12.f32, v82.f32[0]), vmla_n_f32(vmul_n_f32(*(float32x2_t *)a13.f32, v84.f32[0]), *(float32x2_t *)a11.f32, v80));
          if ((v78 & 1) != 0)
          {
            v95 = *v90;
            v90 = (float32x2_t *)((char *)v90 + v15);
            a11 = *v85;
            v85 = (float32x4_t *)((char *)v85 + v16);
            v94 = vmla_n_f32(v94, v95, a11.f32[0]);
            v92 = vmla_lane_f32(v92, v95, *(float32x2_t *)a11.f32, 1);
            v93 = vmla_laneq_f32(v93, v95, a11, 2);
            v91 = vmla_laneq_f32(v91, v95, a11, 3);
            v78 = a2 - v73 - 5;
          }
          if (v78)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v101 = *v90;
              v100 = (float32x2_t *)((char *)v90 + v15);
              v102 = *v100;
              v90 = (float32x2_t *)((char *)v100 + v15);
              a11 = *v85;
              v103 = (float32x4_t *)((char *)v85 + v16);
              a12 = *v103;
              v85 = (float32x4_t *)((char *)v103 + v16);
              v94 = vmla_n_f32(v94, v101, a11.f32[0]);
              v92 = vmla_lane_f32(v92, v101, *(float32x2_t *)a11.f32, 1);
              v93 = vmla_laneq_f32(v93, v101, a11, 2);
              v91 = vmla_laneq_f32(v91, v101, a11, 3);
              v96 = vmla_n_f32(v96, v102, a12.f32[0]);
              v97 = vmla_lane_f32(v97, v102, *(float32x2_t *)a12.f32, 1);
              v98 = vmla_laneq_f32(v98, v102, a12, 2);
              v99 = vmla_laneq_f32(v99, v102, a12, 3);
              v50 = v78 <= 2;
              v78 -= 2;
            }
            while (!v50);
            v94 = vadd_f32(v94, v96);
            v92 = vadd_f32(v92, v97);
            v93 = vadd_f32(v93, v98);
            v91 = vadd_f32(v91, v99);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v94, a7);
          v104 = (float32x2_t *)((char *)v90 - (a2 - v73) * v15);
          *v104 = *(float32x2_t *)v14.f32;
          v105 = (float32x2_t *)((char *)v104 + v15);
          *v105 = vmul_n_f32(v92, a7);
          v106 = (float32x2_t *)((char *)v105 + v15);
          *v106 = vmul_n_f32(v93, a7);
          *(float32x2_t *)((char *)v106 + v15) = vmul_n_f32(v91, a7);
          v73 += 4;
          v74 = __OFSUB__(v75, 4);
          v50 = v75 <= 4;
          v75 -= 4;
        }
        while (!v50);
      }
      v107 = a2 & 3;
      if (!v74 && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + v73 * v15 + 4 * v17);
        v109 = (float *)(a3 + v73 * v16 + 4 * v73);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            v111 = *v109;
            v110 = &v109[(unint64_t)v16 / 4];
            v113 = *v110;
            v112 = &v110[(unint64_t)v16 / 4];
            v114 = *v112;
            v109 = &v112[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v116 = *v108;
            v115 = (float32x2_t *)((char *)v108 + v15);
            v118 = *v115;
            v117 = (unint64_t *)((char *)v115 + v15);
            a12.i64[0] = *v117;
            v119 = (float32x2_t *)&v117[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v119 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v116, v111), vmul_n_f32(v118, v113)), vmul_n_f32(*(float32x2_t *)a12.f32, v114)), a7);
            v108 = (float32x2_t *)((char *)v119 + v15);
          }
          v121 = *v109;
          v120 = &v109[(unint64_t)v16 / 4];
          v122 = *v120;
          v109 = v120 + 1;
          v124 = *v108;
          v123 = (unint64_t *)((char *)v108 + v15);
          a11.i64[0] = *v123;
          v125 = (float32x2_t *)((char *)v123 - v15);
          *v125 = vmul_n_f32(vadd_f32(vmul_n_f32(v124, v121), vmul_n_f32(*(float32x2_t *)a11.f32, v122)), a7);
          v108 = (float32x2_t *)((char *)v125 + v15);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(vmul_n_f32(*v108, *v109), a7);
        *v108 = *(float32x2_t *)v14.f32;
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v126 = 0;
      v127 = __OFSUB__(a2, 3);
      v128 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v129 = (unsigned __int32 *)(a5 + v126 * v15 + 4 * v17);
          v130 = (float *)(a3 + v126 * v16 + 4 * v126);
          v131 = a2 - v126 - 4;
          v133 = *v130;
          v132 = (float32x2_t *)&v130[(unint64_t)v16 / 4];
          v135 = *v132;
          v134 = (float32x4_t *)((char *)v132 + v16);
          v137 = *v134;
          v136 = (float32x4_t *)((char *)v134 + v16);
          v139 = *v136;
          v138 = (float32x4_t *)((char *)v136 + v16);
          a11.i32[0] = *v129;
          v140 = &v129[(unint64_t)v15 / 4];
          a12.i32[0] = *v140;
          v141 = &v140[(unint64_t)v15 / 4];
          a13.i32[0] = *v141;
          v142 = &v141[(unint64_t)v15 / 4];
          a14.i32[0] = *v142;
          v143 = (float *)&v142[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
          a11.i64[1] = a13.i64[0];
          v137.i32[3] = 0;
          v14.f32[0] = v133 * a11.f32[0];
          *(float32x2_t *)v14.f32 = vadd_f32(*(float32x2_t *)v14.f32, vmul_lane_f32(v135, *(float32x2_t *)a11.f32, 1));
          v144 = vaddq_f32(v14, vaddq_f32(vmulq_laneq_f32(v137, a11, 2), vmulq_laneq_f32(v139, a11, 3)));
          if ((v131 & 1) != 0)
          {
            v145 = *v143;
            v143 = (float *)((char *)v143 + v15);
            a11 = *v138;
            v138 = (float32x4_t *)((char *)v138 + v16);
            v144 = vmlaq_n_f32(v144, a11, v145);
            v131 = a2 - v126 - 5;
          }
          if (v131)
          {
            v146 = 0uLL;
            do
            {
              v148 = *v143;
              v147 = &v143[(unint64_t)v15 / 4];
              v149 = *v147;
              v143 = &v147[(unint64_t)v15 / 4];
              a11 = *v138;
              v150 = (float32x4_t *)((char *)v138 + v16);
              a12 = *v150;
              v138 = (float32x4_t *)((char *)v150 + v16);
              v144 = vmlaq_n_f32(v144, a11, v148);
              v146 = vmlaq_n_f32(v146, a12, v149);
              v50 = v131 <= 2;
              v131 -= 2;
            }
            while (!v50);
            v144 = vaddq_f32(v144, v146);
          }
          v14 = vmulq_n_f32(v144, a7);
          v151 = (_DWORD *)((char *)v143 - (a2 - v126) * v15);
          *v151 = v14.i32[0];
          v152 = &v151[(unint64_t)v15 / 4];
          *v152 = v14.i32[1];
          v153 = &v152[(unint64_t)v15 / 4];
          *v153 = v14.i32[2];
          v153[(unint64_t)v15 / 4] = v14.i32[3];
          v126 += 4;
          v127 = __OFSUB__(v128, 4);
          v50 = v128 <= 4;
          v128 -= 4;
        }
        while (!v50);
      }
      v154 = a2 & 3;
      if (!v127 && v154 != 0)
      {
        v155 = (float *)(a5 + v126 * v15 + 4 * v17);
        v156 = (float *)(a3 + v126 * v16 + 4 * v126);
        if (v154 != 1)
        {
          if (v154 != 2)
          {
            v158 = *v156;
            v157 = &v156[(unint64_t)v16 / 4];
            v160 = *v157;
            v159 = &v157[(unint64_t)v16 / 4];
            v161 = *v159;
            v156 = &v159[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v163 = *v155;
            v162 = &v155[(unint64_t)v15 / 4];
            v165 = *v162;
            v164 = &v162[(unint64_t)v15 / 4];
            v166 = *v164;
            v167 = &v164[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v167 = (float)((float)((float)(v158 * v163) + (float)(v160 * v165)) + (float)(v161 * v166)) * a7;
            v155 = &v167[(unint64_t)v15 / 4];
          }
          v169 = *v156;
          v168 = &v156[(unint64_t)v16 / 4];
          v170 = *v168;
          v156 = v168 + 1;
          v172 = *v155;
          v171 = &v155[(unint64_t)v15 / 4];
          v173 = *v171;
          v174 = &v171[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v174 = (float)((float)(v169 * v172) + (float)(v170 * v173)) * a7;
          v155 = &v174[(unint64_t)v15 / 4];
        }
        *v155 = (float)(*v155 * *v156) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_239A40F10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, int32x2_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  float32x4_t *v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float v27;
  float32x4_t *v28;
  float32x2_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  BOOL v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  uint64_t v53;
  float32x4_t *v54;
  float *v55;
  float *v56;
  float v57;
  float v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  float *v72;
  float32x2_t *v73;
  float v74;
  float32x4_t *v75;
  float32x2_t v76;
  float32x4_t *v77;
  float32x4_t v78;
  unint64_t *v79;
  unint64_t *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x2_t *v96;
  float32x2_t *v97;
  float32x2_t *v98;
  uint64_t v99;
  float32x2_t *v100;
  float *v101;
  float *v102;
  float v103;
  float v104;
  float32x2_t *v105;
  float32x2_t v106;
  unint64_t *v107;
  float32x2_t v108;
  float32x2_t *v109;
  unint64_t *v110;
  float32x2_t v111;
  float32x2_t *v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  unsigned __int32 *v116;
  uint64_t v117;
  float *v118;
  float32x2_t *v119;
  float v120;
  float32x4_t *v121;
  float32x2_t v122;
  float32x4_t *v123;
  float32x4_t v124;
  unsigned __int32 *v125;
  unsigned __int32 *v126;
  __int32 *v127;
  float *v128;
  float32x4_t v129;
  float v130;
  float32x4_t v131;
  float *v132;
  float v133;
  float v134;
  float32x4_t *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  uint64_t v139;
  float *v140;
  float *v141;
  float *v142;
  float v143;
  float v144;
  float *v145;
  float v146;
  float *v147;
  float v148;
  float v149;
  float *v150;
  float *v151;
  float v152;
  float v153;
  float *v154;

  v16 = 4 * a6;
  v17 = 4 * a4;
  v18 = 0;
  if (result <= 3)
    goto LABEL_22;
  v19 = result - 3;
  do
  {
    v20 = 0;
    v21 = __OFSUB__(a2, 3);
    v22 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v23 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
        v24 = a2 - v20 - 4;
        v25 = (float *)(a3 + v20 * v17 + 4 * v20 + v17);
        v27 = *v25;
        v26 = (float32x2_t *)&v25[(unint64_t)v17 / 4];
        v29 = *v26;
        v28 = (float32x4_t *)((char *)v26 + v17);
        v31 = *v28;
        v30 = (float32x4_t *)((char *)v28 + v17);
        a11 = *v23;
        v32 = (float32x4_t *)((char *)v23 + v16);
        a12 = *v32;
        v33 = (float32x4_t *)((char *)v32 + v16);
        a13 = *v33;
        v34 = (float32x4_t *)((char *)v33 + v16);
        v36 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v16);
        v37 = vmlaq_laneq_f32(a13, v36, v31, 2);
        v38 = vaddq_f32(vmlaq_lane_f32(a12, v36, *(float32x2_t *)v31.f32, 1), vmulq_lane_f32(a13, v29, 1));
        v39 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(a11, v36, v31.f32[0]), a12, v27), vmulq_n_f32(a13, v29.f32[0]));
        if ((v24 & 1) != 0)
        {
          v40 = *v35;
          v35 = (float32x4_t *)((char *)v35 + v16);
          a11 = *v30;
          v30 = (float32x4_t *)((char *)v30 + v17);
          v39 = vmlaq_n_f32(v39, v40, a11.f32[0]);
          v38 = vmlaq_lane_f32(v38, v40, *(float32x2_t *)a11.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v40, a11, 2);
          v36 = vmlaq_laneq_f32(v36, v40, a11, 3);
          v24 = a2 - v20 - 5;
        }
        if (v24)
        {
          v41 = 0uLL;
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          do
          {
            v46 = *v35;
            v45 = (float32x4_t *)((char *)v35 + v16);
            v47 = *v45;
            v35 = (float32x4_t *)((char *)v45 + v16);
            a11 = *v30;
            v48 = (float32x4_t *)((char *)v30 + v17);
            a12 = *v48;
            v30 = (float32x4_t *)((char *)v48 + v17);
            v39 = vmlaq_n_f32(v39, v46, a11.f32[0]);
            v38 = vmlaq_lane_f32(v38, v46, *(float32x2_t *)a11.f32, 1);
            v37 = vmlaq_laneq_f32(v37, v46, a11, 2);
            v36 = vmlaq_laneq_f32(v36, v46, a11, 3);
            v41 = vmlaq_n_f32(v41, v47, a12.f32[0]);
            v42 = vmlaq_lane_f32(v42, v47, *(float32x2_t *)a12.f32, 1);
            v43 = vmlaq_laneq_f32(v43, v47, a12, 2);
            v44 = vmlaq_laneq_f32(v44, v47, a12, 3);
            v49 = v24 <= 2;
            v24 -= 2;
          }
          while (!v49);
          v39 = vaddq_f32(v39, v41);
          v38 = vaddq_f32(v38, v42);
          v37 = vaddq_f32(v37, v43);
          v36 = vaddq_f32(v36, v44);
        }
        v14 = vmulq_n_f32(v39, a7);
        v15 = vmulq_n_f32(v38, a7);
        v50 = (float32x4_t *)((char *)v35 - (a2 - v20) * v16);
        *v50 = v14;
        v51 = (float32x4_t *)((char *)v50 + v16);
        *v51 = v15;
        v52 = (float32x4_t *)((char *)v51 + v16);
        *v52 = vmulq_n_f32(v37, a7);
        *(float32x4_t *)((char *)v52 + v16) = vmulq_n_f32(v36, a7);
        v20 += 4;
        v21 = __OFSUB__(v22, 4);
        v49 = v22 <= 4;
        v22 -= 4;
      }
      while (!v49);
    }
    v53 = a2 & 3;
    if (!v21 && v53 != 0)
    {
      v54 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
      v55 = (float *)(a3 + v20 * v17 + 4 * v20 + v17);
      if (v53 != 1)
      {
        if (v53 != 2)
        {
          v57 = *v55;
          v56 = &v55[(unint64_t)v17 / 4];
          v58 = *v56;
          v55 = v56 + 1;
          v60 = *v54;
          v59 = (float32x4_t *)((char *)v54 + v16);
          v62 = *v59;
          v61 = (float32x4_t *)((char *)v59 + v16);
          a12 = *v61;
          v63 = (float32x4_t *)((char *)v61 - 2 * v16);
          *v63 = vmulq_n_f32(vaddq_f32(vmlaq_n_f32(v60, v62, v57), vmulq_n_f32(a12, v58)), a7);
          v54 = (float32x4_t *)((char *)v63 + v16);
        }
        v65 = *v54;
        v64 = (float32x4_t *)((char *)v54 + v16);
        a11 = *v64;
        v66 = (float32x4_t *)((char *)v64 - v16);
        *v66 = vmulq_n_f32(vmlaq_n_f32(v65, a11, *v55), a7);
        v54 = (float32x4_t *)((char *)v66 + v16);
      }
      v14 = vmulq_n_f32(*v54, a7);
      *v54 = v14;
    }
    v18 += 4;
    v49 = v19 <= 4;
    v19 -= 4;
  }
  while (!v49);
  v49 = v19 <= -3;
  result = v19 + 3;
  if (!v49)
  {
LABEL_22:
    if (result > 1)
    {
      v67 = 0;
      v68 = __OFSUB__(a2, 3);
      v69 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v70 = (unint64_t *)(a5 + v67 * v16 + 4 * v18);
          v71 = a2 - v67 - 4;
          v72 = (float *)(a3 + v67 * v17 + 4 * v67 + v17);
          v74 = *v72;
          v73 = (float32x2_t *)&v72[(unint64_t)v17 / 4];
          v76 = *v73;
          v75 = (float32x4_t *)((char *)v73 + v17);
          v78 = *v75;
          v77 = (float32x4_t *)((char *)v75 + v17);
          a11.i64[0] = *v70;
          v79 = (unint64_t *)((char *)v70 + v16);
          a12.i64[0] = *v79;
          v80 = (unint64_t *)((char *)v79 + v16);
          a13.i64[0] = *v80;
          v81 = (float32x2_t *)((char *)v80 + v16);
          v83 = *v81;
          v82 = (float32x2_t *)((char *)v81 + v16);
          v84 = vmla_laneq_f32(*(float32x2_t *)a13.f32, v83, v78, 2);
          v85 = vadd_f32(vmla_lane_f32(*(float32x2_t *)a12.f32, v83, *(float32x2_t *)v78.f32, 1), vmul_lane_f32(*(float32x2_t *)a13.f32, v76, 1));
          v86 = vadd_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)a11.f32, v83, v78.f32[0]), *(float32x2_t *)a12.f32, v74), vmul_n_f32(*(float32x2_t *)a13.f32, v76.f32[0]));
          if ((v71 & 1) != 0)
          {
            v87 = *v82;
            v82 = (float32x2_t *)((char *)v82 + v16);
            a11 = *v77;
            v77 = (float32x4_t *)((char *)v77 + v17);
            v86 = vmla_n_f32(v86, v87, a11.f32[0]);
            v85 = vmla_lane_f32(v85, v87, *(float32x2_t *)a11.f32, 1);
            v84 = vmla_laneq_f32(v84, v87, a11, 2);
            v83 = vmla_laneq_f32(v83, v87, a11, 3);
            v71 = a2 - v67 - 5;
          }
          if (v71)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v93 = *v82;
              v92 = (float32x2_t *)((char *)v82 + v16);
              v94 = *v92;
              v82 = (float32x2_t *)((char *)v92 + v16);
              a11 = *v77;
              v95 = (float32x4_t *)((char *)v77 + v17);
              a12 = *v95;
              v77 = (float32x4_t *)((char *)v95 + v17);
              v86 = vmla_n_f32(v86, v93, a11.f32[0]);
              v85 = vmla_lane_f32(v85, v93, *(float32x2_t *)a11.f32, 1);
              v84 = vmla_laneq_f32(v84, v93, a11, 2);
              v83 = vmla_laneq_f32(v83, v93, a11, 3);
              v88 = vmla_n_f32(v88, v94, a12.f32[0]);
              v89 = vmla_lane_f32(v89, v94, *(float32x2_t *)a12.f32, 1);
              v90 = vmla_laneq_f32(v90, v94, a12, 2);
              v91 = vmla_laneq_f32(v91, v94, a12, 3);
              v49 = v71 <= 2;
              v71 -= 2;
            }
            while (!v49);
            v86 = vadd_f32(v86, v88);
            v85 = vadd_f32(v85, v89);
            v84 = vadd_f32(v84, v90);
            v83 = vadd_f32(v83, v91);
          }
          *(float32x2_t *)v15.f32 = vmul_n_f32(v85, a7);
          v96 = (float32x2_t *)((char *)v82 - (a2 - v67) * v16);
          *v96 = vmul_n_f32(v86, a7);
          v97 = (float32x2_t *)((char *)v96 + v16);
          *v97 = *(float32x2_t *)v15.f32;
          v98 = (float32x2_t *)((char *)v97 + v16);
          *v98 = vmul_n_f32(v84, a7);
          *(float32x2_t *)((char *)v98 + v16) = vmul_n_f32(v83, a7);
          v67 += 4;
          v68 = __OFSUB__(v69, 4);
          v49 = v69 <= 4;
          v69 -= 4;
        }
        while (!v49);
      }
      v99 = a2 & 3;
      if (!v68 && v99 != 0)
      {
        v100 = (float32x2_t *)(a5 + v67 * v16 + 4 * v18);
        v101 = (float *)(a3 + v67 * v17 + 4 * v67 + v17);
        if (v99 != 1)
        {
          if (v99 != 2)
          {
            v103 = *v101;
            v102 = &v101[(unint64_t)v17 / 4];
            v104 = *v102;
            v101 = v102 + 1;
            v106 = *v100;
            v105 = (float32x2_t *)((char *)v100 + v16);
            v108 = *v105;
            v107 = (unint64_t *)((char *)v105 + v16);
            a12.i64[0] = *v107;
            v109 = (float32x2_t *)&v107[v16 / 0xFFFFFFFFFFFFFFFCLL];
            *v109 = vmul_n_f32(vadd_f32(vmla_n_f32(v106, v108, v103), vmul_n_f32(*(float32x2_t *)a12.f32, v104)), a7);
            v100 = (float32x2_t *)((char *)v109 + v16);
          }
          v111 = *v100;
          v110 = (unint64_t *)((char *)v100 + v16);
          a11.i64[0] = *v110;
          v112 = (float32x2_t *)((char *)v110 - v16);
          *v112 = vmul_n_f32(vmla_n_f32(v111, *(float32x2_t *)a11.f32, *v101), a7);
          v100 = (float32x2_t *)((char *)v112 + v16);
        }
        *v100 = vmul_n_f32(*v100, a7);
      }
      v18 += 2;
      result -= 2;
    }
    if (result)
    {
      v113 = 0;
      v114 = __OFSUB__(a2, 3);
      v115 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v116 = (unsigned __int32 *)(a5 + v113 * v16 + 4 * v18);
          v117 = a2 - v113 - 4;
          v118 = (float *)(a3 + v113 * v17 + 4 * v113 + v17);
          v120 = *v118;
          v119 = (float32x2_t *)&v118[(unint64_t)v17 / 4];
          v122 = *v119;
          v121 = (float32x4_t *)((char *)v119 + v17);
          v124 = *v121;
          v123 = (float32x4_t *)((char *)v121 + v17);
          a11.i32[0] = *v116;
          v125 = &v116[(unint64_t)v16 / 4];
          a12.i32[0] = *v125;
          v126 = &v125[(unint64_t)v16 / 4];
          a13.i32[0] = *v126;
          v127 = (__int32 *)&v126[(unint64_t)v16 / 4];
          a14.i32[0] = *v127;
          v128 = (float *)&v127[(unint64_t)v16 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, a14);
          a11.i64[1] = a13.i64[0];
          v124.i32[3] = 0;
          v15.f32[0] = v120 * a12.f32[0];
          *(float32x2_t *)v14.f32 = vadd_f32(vmul_laneq_f32(v122, a11, 2), *(float32x2_t *)v15.f32);
          v129 = vaddq_f32(v14, vaddq_f32(vmulq_laneq_f32(v124, a11, 3), a11));
          if ((v117 & 1) != 0)
          {
            v130 = *v128;
            v128 = (float *)((char *)v128 + v16);
            a11 = *v123;
            v123 = (float32x4_t *)((char *)v123 + v17);
            v129 = vmlaq_n_f32(v129, a11, v130);
            v117 = a2 - v113 - 5;
          }
          if (v117)
          {
            v131 = 0uLL;
            do
            {
              v133 = *v128;
              v132 = &v128[(unint64_t)v16 / 4];
              v134 = *v132;
              v128 = &v132[(unint64_t)v16 / 4];
              a11 = *v123;
              v135 = (float32x4_t *)((char *)v123 + v17);
              a12 = *v135;
              v123 = (float32x4_t *)((char *)v135 + v17);
              v129 = vmlaq_n_f32(v129, a11, v133);
              v131 = vmlaq_n_f32(v131, a12, v134);
              v49 = v117 <= 2;
              v117 -= 2;
            }
            while (!v49);
            v129 = vaddq_f32(v129, v131);
          }
          v14 = vmulq_n_f32(v129, a7);
          v136 = (_DWORD *)((char *)v128 - (a2 - v113) * v16);
          *v136 = v14.i32[0];
          v137 = &v136[(unint64_t)v16 / 4];
          *v137 = v14.i32[1];
          v138 = &v137[(unint64_t)v16 / 4];
          *v138 = v14.i32[2];
          v138[(unint64_t)v16 / 4] = v14.i32[3];
          v113 += 4;
          v114 = __OFSUB__(v115, 4);
          v49 = v115 <= 4;
          v115 -= 4;
        }
        while (!v49);
      }
      v139 = a2 & 3;
      if (!v114 && v139 != 0)
      {
        v140 = (float *)(a5 + v113 * v16 + 4 * v18);
        v141 = (float *)(a3 + v113 * v17 + 4 * v113 + v17);
        if (v139 != 1)
        {
          if (v139 != 2)
          {
            v143 = *v141;
            v142 = &v141[(unint64_t)v17 / 4];
            v144 = *v142;
            v141 = v142 + 1;
            v146 = *v140;
            v145 = &v140[(unint64_t)v16 / 4];
            v148 = *v145;
            v147 = &v145[(unint64_t)v16 / 4];
            v149 = *v147;
            v150 = &v147[v16 / 0xFFFFFFFFFFFFFFFELL];
            *v150 = (float)((float)(v146 + (float)(v143 * v148)) + (float)(v144 * v149)) * a7;
            v140 = &v150[(unint64_t)v16 / 4];
          }
          v152 = *v140;
          v151 = &v140[(unint64_t)v16 / 4];
          v153 = *v151;
          v154 = &v151[v16 / 0xFFFFFFFFFFFFFFFCLL];
          *v154 = (float)(v152 + (float)(*v141 * v153)) * a7;
          v140 = &v154[(unint64_t)v16 / 4];
        }
        *v140 = *v140 * a7;
      }
    }
  }
  return result;
}

void sub_239A413E4(_DWORD *a1, CBLAS_ORDER __Order, CBLAS_UPLO __Uplo, CBLAS_TRANSPOSE __TransA, CBLAS_DIAG __Diag, int __N, const double *__A, int __lda, double *__X, int __incX)
{
  if (a1 && *a1 != 1)
    printf("*** ERROR *** CONTEXT ID is incorrect");
  else
    cblas_dtrsv(__Order, __Uplo, __TransA, __Diag, __N, __A, __lda, __X, __incX);
}

void sub_239A41430(_DWORD *a1, CBLAS_ORDER a2, CBLAS_TRANSPOSE a3, CBLAS_TRANSPOSE a4, int a5, int a6, int a7, const float *a8, float a9, float a10, int __lda, float *__B, int __ldb, float *__C, int __ldc)
{
  if (!a1)
  {
LABEL_5:
    cblas_sgemm(a2, a3, a4, a5, a6, a7, a9, a8, __lda, __B, __ldb, a10, __C, __ldc);
    return;
  }
  if (*a1 == 1)
  {
    if (a1[1])
    {
      sub_239A2A7EC(a2, a3, a4, a5, a6, a7, (int)a8, __lda, (uint64_t)__B, __ldb, SHIDWORD(__B), (int)__C, SHIDWORD(__C), __ldc);
      return;
    }
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
}

void sub_239A414D0(_DWORD *a1, CBLAS_ORDER a2, CBLAS_TRANSPOSE a3, CBLAS_TRANSPOSE a4, int a5, int a6, int a7, const double *a8, double a9, double a10, int __lda, double *__B, int __ldb, double *__C, int __ldc)
{
  if (!a1)
  {
LABEL_5:
    cblas_dgemm(a2, a3, a4, a5, a6, a7, a9, a8, __lda, __B, __ldb, a10, __C, __ldc);
    return;
  }
  if (*a1 == 1)
  {
    if (a1[1])
    {
      sub_239A29974(a2, a3, a4, a5, a6, a7, (int)a8, __lda, (uint64_t)__B, __ldb, SHIDWORD(__B), (int)__C, SHIDWORD(__C), __ldc);
      return;
    }
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
}

void sub_239A41570(_DWORD *a1, CBLAS_ORDER a2, uint64_t a3, CBLAS_UPLO a4, CBLAS_TRANSPOSE a5, CBLAS_DIAG a6, uint64_t a7, uint64_t a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, double *__A, int __lda, double *__B, int __ldb)
{
  if (!a1)
  {
LABEL_5:
    cblas_dtrsm(a2, (const CBLAS_SIDE)a3, a4, a5, a6, a7, a8, a9, __A, __lda, __B, __ldb);
    return;
  }
  if (*a1 == 1)
  {
    if (a1[1])
    {
      sub_239A3DF5C(a2, a3, a4, a5, a6, a7, a8, __A, a9, a10, a11, a12, a13, a14, a15, a16, __lda, (char *)__B, __ldb);
      return;
    }
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
}

void sub_239A41604(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, double *a7, uint64_t a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, char *a17, uint64_t a18, double *a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,char a35)
{
  BOOL v36;

  if (a5 && a6)
  {
    if (a9 == 0.0)
    {
      sub_239A3C644(a5, a6, a17, a18);
    }
    else if (a5 > 63 || a6 >= 64)
    {
      v36 = a2 == 121 && a3 == 111;
      if (a1 == 141)
      {
        if (v36 || a2 == 122 && a3 != 111)
          sub_239A28F30(a3, a4, a5, a6, a5, (int)a7, a8, (int)a17, a18, (uint64_t)a17, a19, a20, a21, a22, a23, (uint64_t)a24, a25, a26, a27);
        else
          sub_239A28AD4(a3, a4, a5, a6, a5, (int)a7, a8, (int)a17, a18, (uint64_t)a17, a19, a20, a21, a22, a23, (uint64_t)a24, a25, (uint64_t)a26, a27,
            a28,
            a29,
            a30,
            a31);
      }
      else if (v36 || a2 == 122 && a3 != 111)
      {
        sub_239A2AF94(a3, a4, a5, a6, a6, (int)a17, a18, (int)a7, a8, (uint64_t)a17, a19, a20, a21, a22, a23, (uint64_t)a24, a25, (uint64_t)a26, a27,
          a28,
          a29,
          (uint64_t)a30,
          a31,
          a32,
          a33,
          a34,
          a35);
      }
      else
      {
        sub_239A2B45C(a3, a4, a5, a6, a6, (int)a17, a18, (int)a7, a8, (uint64_t)a17, a19, a20, a21, a22, a23, a24, a25);
      }
    }
    else if (a20 == -1)
    {
      *a19 = 0.0;
    }
    else if (a1 == 141)
    {
      if (a2 == 121)
      {
        if (a3 == 111)
        {
          if (a4 == 132)
            sub_239A2E318(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9);
          else
            sub_239A2E7A4(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9);
        }
        else if (a4 == 132)
        {
          sub_239A2D8D4(a5, a6, (uint64_t)a7, a8, (double *)a17, a18, a9, a10.f64[0], a11, a12, a13, a14, a15);
        }
        else
        {
          sub_239A2DD98(a5, a6, a7, a8, (double *)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15);
        }
      }
      else if (a3 == 111)
      {
        if (a4 == 132)
          sub_239A3CAE0(a5, a6, (uint64_t)a7, a8, (double *)a17, a18, a9);
        else
          sub_239A3CEE8(a5, a6, a7, a8, (double *)a17, a18, a9);
      }
      else if (a4 == 132)
      {
        sub_239A3D3B4(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, a10.f64[0], a11, a12, a13, a14, a15);
      }
      else
      {
        sub_239A3D920(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15);
      }
    }
    else if (a2 == 121)
    {
      if (a3 == 111)
      {
        if (a4 == 132)
          sub_239A31FD0(a5, a6, (uint64_t)a7, a8, (double *)a17, a18, a9, a10, a11, a12.f64[0], a13, a14, a15, a16);
        else
          sub_239A32444(a5, a6, a7, a8, (double *)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15, a16);
      }
      else if (a4 == 132)
      {
        sub_239A32960(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, (int8x16_t)a10, a11, a12.f64[0], a13.f64[0], a14.f64[0], a15.f64[0], a16);
      }
      else
      {
        sub_239A32DB8(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15.f64[0], a16);
      }
    }
    else if (a3 == 111)
    {
      if (a4 == 132)
        sub_239A25F14(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, (int8x16_t)a10, a11, a12.f64[0], a13, a14, a15, (int64x2_t)a16);
      else
        sub_239A26438(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15, (int64x2_t)a16);
    }
    else if (a4 == 132)
    {
      sub_239A256A4(a5, a6, (uint64_t)a7, a8, (double *)a17, a18, a9, a10, a11, a12.f64[0], a13.f64[0], a14.f64[0], a15.f64[0], a16);
    }
    else
    {
      sub_239A25A78(a5, a6, a7, a8, (double *)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15.f64[0], a16);
    }
  }
}

#error "239A41A54: call analysis failed (funcsize=101)"

#error "239A41CD4: call analysis failed (funcsize=163)"

#error "239A41D74: call analysis failed (funcsize=113)"

void sub_239A41EC8(uint64_t __N, uint64_t __M, const double *__A, uint64_t __lda, double *__Y, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, __n128 _Q4, float64x2_t a12, float64x2_t a13)
{
  uint64_t v19;
  float64x2_t *v21;
  double *v22;
  uint64_t v23;
  double *v24;
  double *v25;
  double *v26;
  float64x2_t *v27;
  float64x2_t *v28;
  uint64_t v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t v41;
  float64x2_t *v42;
  uint64_t v43;
  float64x2_t *v44;
  float64x2_t *v45;
  uint64_t v46;
  float64x2_t *v47;
  float64x2_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;

  if ((__N & 1) != 0)
  {
    v19 = 1;
    cblas_dgemv(CblasColMajor, CblasTrans, __M, __N, a7, __A, __lda, __A, 1, a8, __Y, 1);
  }
  else
  {
    v19 = 0;
  }
  _Q0.f64[0] = a7;
  _Q0.f64[1] = a8;
  if (v19 < __N - 1)
  {
    v21 = (float64x2_t *)((char *)__Y + v19 * (8 * a6 + 8) + 16);
    v22 = (double *)&__A[__lda * (v19 + 3)];
    v23 = 16 * __lda;
    v24 = (double *)&__A[__lda * (v19 | 2)];
    do
    {
      v25 = (double *)&__A[v19 * __lda];
      v26 = (double *)&__A[__lda + v19 * __lda];
      v27 = (float64x2_t *)&__Y[v19 * a6 + v19];
      v28 = (float64x2_t *)v25;
      v29 = __M;
      v30 = (float64x2_t *)v26;
      v31 = (float64x2_t)veorq_s8(a10, a10);
      _Q4 = (__n128)veorq_s8((int8x16_t)_Q4, (int8x16_t)_Q4);
      a13 = (float64x2_t)veorq_s8((int8x16_t)a13, (int8x16_t)a13);
      if (__M)
      {
        if ((__M & 1) == 0
          || (v28 = (float64x2_t *)(v25 + 1),
              v30 = (float64x2_t *)(v26 + 1),
              v31.f64[0] = vmlad_n_f64(v31.f64[0], *v25, *v25),
              _Q4.n128_f64[0] = vmlad_n_f64(_Q4.n128_f64[0], *v26, *v25),
              a13.f64[0] = vmlad_n_f64(a13.f64[0], *v26, *v26),
              v29 = __M - 1,
              __M > 1))
        {
          do
          {
            v32 = *v28++;
            v33 = *v30++;
            v31 = vmlaq_f64(v31, v32, v32);
            _Q4 = (__n128)vmlaq_f64((float64x2_t)_Q4, v33, v32);
            a13 = vmlaq_f64(a13, v33, v33);
            v34 = v29 <= 2;
            v29 -= 2;
          }
          while (!v34);
        }
        a12.f64[0] = a13.f64[1];
        v31 = vmulq_n_f64(vaddq_f64((float64x2_t)vtrn1q_s64((int64x2_t)v31, (int64x2_t)_Q4), (float64x2_t)vtrn2q_s64((int64x2_t)v31, (int64x2_t)_Q4)), a7);
      }
      v35 = (uint64_t *)&v27->f64[a6 + 1];
      _D2 = *v35;
      a10 = (int8x16_t)vmlaq_laneq_f64(v31, *v27, _Q0, 1);
      __asm { FMLA            D4, D2, V0.D[1] }
      *v27 = (float64x2_t)a10;
      *v35 = _Q4.n128_u64[0];
      v19 += 2;
      if (v19 < __N)
      {
        v41 = 0;
        v42 = v21;
        v43 = v19;
        do
        {
          v44 = (float64x2_t *)((char *)v24 + v41);
          v45 = (float64x2_t *)((char *)v22 + v41);
          v46 = __M;
          v47 = (float64x2_t *)v26;
          v48 = (float64x2_t *)v25;
          v49 = (float64x2_t)veorq_s8(a10, a10);
          v50 = (float64x2_t)veorq_s8((int8x16_t)_Q4, (int8x16_t)_Q4);
          a12 = (float64x2_t)veorq_s8((int8x16_t)a12, (int8x16_t)a12);
          a13 = (float64x2_t)veorq_s8((int8x16_t)a13, (int8x16_t)a13);
          if (__M)
          {
            if ((__M & 1) == 0)
              goto LABEL_18;
            v51 = v44->f64[0];
            v44 = (float64x2_t *)((char *)v44 + 8);
            v52 = v45->f64[0];
            v45 = (float64x2_t *)((char *)v45 + 8);
            v48 = (float64x2_t *)(v25 + 1);
            v47 = (float64x2_t *)(v26 + 1);
            v49.f64[0] = vmlad_n_f64(v49.f64[0], v51, *v25);
            v50.f64[0] = vmlad_n_f64(v50.f64[0], v52, *v25);
            a12.f64[0] = vmlad_n_f64(a12.f64[0], v51, *v26);
            a13.f64[0] = vmlad_n_f64(a13.f64[0], v52, *v26);
            v46 = __M - 1;
            if (__M > 1)
            {
LABEL_18:
              do
              {
                v53 = *v44++;
                v54 = *v45++;
                v55 = *v48++;
                v56 = *v47++;
                v49 = vmlaq_f64(v49, v53, v55);
                v50 = vmlaq_f64(v50, v54, v55);
                a12 = vmlaq_f64(a12, v53, v56);
                a13 = vmlaq_f64(a13, v54, v56);
                v34 = v46 <= 2;
                v46 -= 2;
              }
              while (!v34);
            }
            v49 = vmulq_n_f64(vaddq_f64((float64x2_t)vtrn1q_s64((int64x2_t)v49, (int64x2_t)v50), (float64x2_t)vtrn2q_s64((int64x2_t)v49, (int64x2_t)v50)), a7);
            v50 = vmulq_n_f64(vaddq_f64((float64x2_t)vtrn1q_s64((int64x2_t)a12, (int64x2_t)a13), (float64x2_t)vtrn2q_s64((int64x2_t)a12, (int64x2_t)a13)), a7);
          }
          a10 = (int8x16_t)vmlaq_laneq_f64(v49, *v42, _Q0, 1);
          _Q4 = (__n128)vmlaq_laneq_f64(v50, *(float64x2_t *)((char *)v42 + 8 * a6), _Q0, 1);
          *v42 = (float64x2_t)a10;
          *(__n128 *)((char *)v42 + 8 * a6) = _Q4;
          v43 += 2;
          ++v42;
          v41 += v23;
        }
        while (v43 < __N);
      }
      v21 += a6 + 1;
      v22 = (double *)((char *)v22 + v23);
      v24 = (double *)((char *)v24 + v23);
    }
    while (v19 < __N - 1);
  }
}

void sub_239A4215C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,int __N,uint64_t a23,uint64_t a24,uint64_t a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,char a42)
{
  int v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(void);
  uint64_t (*v59)(void);
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double *(*v71)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v72)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float64x2_t *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const double *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(void);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(void);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v123;
  uint64_t v124;
  double *(*v125)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  double *(*v130)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t __Na;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v45 = MEMORY[0x24BDAC7A8]();
  v47 = v46;
  v119 = v48;
  v113 = v49;
  v51 = v50;
  v53 = v52;
  v54 = v45;
  v55 = v43;
  STACK[0x10278] = *MEMORY[0x24BDAC8D0];
  if (v42 == 111)
    v56 = v44;
  else
    v56 = 1;
  v112 = v56;
  vars0 = v44;
  if (v42 == 111)
    v57 = 1;
  else
    v57 = v44;
  v118 = v57;
  v58 = MEMORY[0x24BDB2CA0];
  if (v42 == 111)
    v58 = (uint64_t (*)(void))MEMORY[0x24BDB2CA8];
  v111 = v58;
  v59 = (uint64_t (*)(void))MEMORY[0x24BDB2C98];
  if (v42 == 111)
    v59 = MEMORY[0x24BDB2C90];
  v117 = v59;
  if (v43 >= 225)
  {
    v134 = (char *)malloc_type_malloc((v43 << 8) + 8288, 0x100004000313F17uLL);
    v60 = (unint64_t *)(v134 + 8256);
  }
  else
  {
    v134 = &a42;
    v60 = &STACK[0x2240];
  }
  v128 = (uint64_t)v60;
  if (v51 >= 1)
  {
    v61 = 0;
    v137 = 32 * v47;
    v115 = 8 * v47;
    v116 = v55;
    v62 = 8 * v47 + 8;
    v126 = v47;
    v110 = v51;
    while (1)
    {
      v114 = v61 + 32;
      v63 = v61 + 32 <= v51 ? 32 : v51 - v61;
      v120 = v113 + 8 * v61 * v112;
      ((void (*)(uint64_t, uint64_t, double))v111)(v63, v55, v54);
      if (v55 >= 1)
        break;
LABEL_94:
      v61 = v114;
      v51 = v110;
      if (v114 >= v110)
        goto LABEL_95;
    }
    v64 = v63;
    v65 = 0;
    v66 = v53 != 0.0;
    if (v53 == 1.0 || v61 != 0)
      v66 = 0;
    v127 = v66;
    v68 = v119;
    v125 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_239A26D20;
    v130 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_239A26E70;
    __Na = v63;
    while (1)
    {
      v136 = v65;
      v69 = v65 + 32;
      if (v65 + 32 <= v55)
        v70 = 32;
      else
        v70 = v55 - v65;
      v129 = v119 + 8 * v65;
      v71 = v130;
      if ((v70 & 7) != 0)
        v71 = sub_239A308B0;
      v130 = v71;
      v72 = v125;
      if ((v70 & 7) != 0)
        v72 = sub_239A2BE00;
      v125 = v72;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))v117)(v70, v64, v120 + 8 * v65 * v118, vars0, v134);
      v73 = v136;
      v74 = v70;
      v133 = v70;
      v123 = v69;
      v124 = v68;
      vars8 = v70 + v136;
      if (v70 + v136 >= 4)
      {
        v75 = 0;
        v76 = 0;
        v138 = v70 + v136 - 3;
        v77 = v68;
        v64 = __Na;
        while (2)
        {
          v78 = v76 - v73;
          v79 = v76 & 4;
          if ((v76 & 4) != 0)
            v80 = v76 - v73 - 4;
          else
            v80 = v76 - v73;
          if (v78 >= 0)
            v81 = v80;
          else
            v81 = 0;
          if (v81 > v74)
            goto LABEL_64;
          v82 = v129 + 8 * v76 * v47;
          v83 = (float64x2_t *)(v128 + 8 * v76 * v64);
          if (v78 < 0)
          {
            v85 = 0;
            if (v127)
              goto LABEL_55;
          }
          else
          {
            v131 = 32 * (v75 & 1);
            a40 = 0u;
            a41 = 0u;
            v84 = (char *)&a26 + v131;
            a38 = 0u;
            a39 = 0u;
            a36 = 0u;
            a37 = 0u;
            a34 = 0u;
            a35 = 0u;
            a32 = 0u;
            a33 = 0u;
            a30 = 0u;
            a31 = 0u;
            a28 = 0u;
            a29 = 0u;
            if (v74 - v80 >= 8)
              v85 = 8;
            else
              v85 = v74 - v80;
            a26 = 0uLL;
            a27 = 0uLL;
            v132 = v128 + 8 * v76 * v64;
            ((void (*)(char *))v130)(&v134[8 * v80 * v64]);
            v82 += 8 * v80;
            if (v127)
            {
              v86 = 0;
              v83 = (float64x2_t *)v132;
              v87 = v77 + v131 + 8 * v80;
              v64 = __Na;
              v74 = v133;
              do
              {
                if (v79 < v85)
                {
                  v88 = 0;
                  do
                  {
                    *(double *)(v87 + 8 * v88) = *(double *)&v84[8 * v88] + *(double *)(v87 + 8 * v88) * v53;
                    ++v88;
                  }
                  while (v79 + v88 < v85);
                }
                ++v79;
                ++v86;
                v84 += 72;
                v87 += v62;
              }
              while (v86 != 4);
              v47 = v126;
              v73 = v136;
              if (v85 + v81 >= v133)
                goto LABEL_64;
LABEL_55:
              v125((float64x2_t *)&v134[8 * (v85 + v81) * v64], v83, (float64x2_t *)(v82 + 8 * v85), v47, v74 - (v85 + v81), v64, v53);
LABEL_63:
              v64 = __Na;
              v73 = v136;
              v74 = v133;
LABEL_64:
              v76 += 4;
              ++v75;
              v77 += v137;
              if (v76 >= v138)
                goto LABEL_67;
              continue;
            }
            v89 = 0;
            v83 = (float64x2_t *)v132;
            v90 = v77 + v131 + 8 * v80;
            v64 = __Na;
            v74 = v133;
            do
            {
              if (v79 < v85)
              {
                v91 = 0;
                do
                {
                  *(double *)(v90 + 8 * v91) = *(double *)(v90 + 8 * v91) + *(double *)&v84[8 * v91];
                  ++v91;
                }
                while (v79 + v91 < v85);
              }
              ++v79;
              ++v89;
              v84 += 72;
              v90 += v62;
            }
            while (v89 != 4);
            v47 = v126;
            v73 = v136;
            if (v85 + v81 >= v133)
              goto LABEL_64;
          }
          break;
        }
        v130((float64x2_t *)&v134[8 * (v85 + v81) * v64], v83, (float64x2_t *)(v82 + 8 * v85), v47, v74 - (v85 + v81), v64);
        goto LABEL_63;
      }
      v76 = 0;
      v64 = __Na;
LABEL_67:
      v92 = vars8 <= 0 ? -(-vars8 & 3) : vars8 & 3;
      if (v92)
      {
        v93 = v76 - v73;
        v94 = (v76 - v73) & ~((v76 - v73) >> 63);
        if (v74 > v94)
          break;
      }
LABEL_93:
      v68 = v124 + 256;
      v65 = v123;
      v55 = v116;
      if (v123 >= v116)
        goto LABEL_94;
    }
    v95 = v129 + 8 * v76 * v47;
    v96 = (const double *)(v128 + 8 * v76 * v64);
    if (v93 < 0)
    {
      v98 = 0;
      v104 = 0;
      v105 = 0;
      if (v127)
      {
LABEL_84:
        sub_239A30304((float64x2_t *)&v134[8 * v104 * v64 + 8 * v98], v96, v95, v47, v74 - v104, v92, __Na, v53);
LABEL_92:
        v64 = __Na;
        goto LABEL_93;
      }
    }
    else
    {
      a36 = 0u;
      a37 = 0u;
      a34 = 0u;
      a35 = 0u;
      a32 = 0u;
      a33 = 0u;
      a30 = 0u;
      a31 = 0u;
      a28 = 0u;
      a29 = 0u;
      a26 = 0u;
      a27 = 0u;
      if (v74 - v94 >= 8)
        v97 = 8;
      else
        v97 = v74 - v94;
      v98 = v94 & (4 * v64) & 4;
      v99 = v95 + 8 * v94;
      sub_239A30480((float64x2_t *)&v134[8 * v93 * v64 + 8 * v98], (const double *)(v128 + 8 * v76 * v64), (uint64_t)&a26, 8, v97, v92, v64);
      if (v127)
      {
        v64 = __Na;
        if (v92 >= 1)
        {
          v100 = 0;
          v101 = v124 + v115 * v76 + 8 * v94;
          v102 = &a26;
          do
          {
            v103 = 0;
            do
            {
              *(double *)(v101 + 8 * v103) = *((double *)v102 + v103) + *(double *)(v101 + 8 * v103) * v53;
              ++v103;
            }
            while (v100 + v103 < v92);
            ++v100;
            v102 = (__int128 *)((char *)v102 + 72);
            v101 += v62;
          }
          while (v100 != v92);
        }
        v95 = v99 + 8 * v97;
        v104 = v97 + v94;
        v74 = v133;
        goto LABEL_84;
      }
      v64 = __Na;
      if (v92 >= 1)
      {
        v106 = 0;
        v107 = v124 + v115 * v76 + 8 * v94;
        v108 = &a26;
        do
        {
          v109 = 0;
          do
          {
            *(double *)(v107 + 8 * v109) = *(double *)(v107 + 8 * v109) + *((double *)v108 + v109);
            ++v109;
          }
          while (v106 + v109 < v92);
          ++v106;
          v108 = (__int128 *)((char *)v108 + 72);
          v107 += v62;
        }
        while (v106 != v92);
      }
      v95 = v99 + 8 * v97;
      v105 = v97 + v94;
      v74 = v133;
    }
    sub_239A30480((float64x2_t *)&v134[8 * v105 * v64 + 8 * v98], v96, v95, v47, v74 - v105, v92, __Na);
    goto LABEL_92;
  }
LABEL_95:
  if (v55 >= 225)
    free(v134);
}

void sub_239A42870(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,int __N,uint64_t a23,int a24,uint64_t a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,char a34)
{
  int v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, float);
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *(*v64)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v65)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const float *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, float);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v118;
  uint64_t v119;
  float *(*v120)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  float *(*v124)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t __Na;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v37 = MEMORY[0x24BDAC7A8]();
  v131 = v38;
  v114 = v39;
  v106 = v40;
  v42 = v41;
  v44 = v43;
  v45 = v37;
  v46 = v35;
  STACK[0x101F8] = *MEMORY[0x24BDAC8D0];
  if (v34 == 111)
    v47 = v36;
  else
    v47 = 1;
  v105 = v47;
  vars0 = v36;
  if (v34 == 111)
    v48 = 1;
  else
    v48 = v36;
  v113 = v48;
  v49 = (void (*)(uint64_t, uint64_t, float))MEMORY[0x24BDB2F18];
  if (v34 == 111)
    v49 = (void (*)(uint64_t, uint64_t, float))MEMORY[0x24BDB2F20];
  v104 = v49;
  v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))MEMORY[0x24BDB2F10];
  if (v34 == 111)
    v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))MEMORY[0x24BDB2F08];
  v112 = v50;
  if (v35 < 1)
  {
    v128 = &a34;
    v51 = &STACK[0x10180];
  }
  else
  {
    v128 = (char *)malloc_type_malloc((v35 << 9) + 65632, 0x100004052888210uLL);
    v51 = (unint64_t *)(v128 + 0x10000);
  }
  v122 = (uint64_t)(v51 + 8);
  if (v42 >= 1)
  {
    v52 = 0;
    v53 = 16 * v131;
    v108 = 4 * v131;
    v54 = 4 * v131 + 4;
    v111 = v46;
    v103 = v42;
    while (1)
    {
      v107 = v52 + 128;
      v55 = v52 + 128 <= v42 ? 128 : v42 - v52;
      v115 = v106 + 4 * v52 * v105;
      v104(v55, v46, v45);
      if (v46 >= 1)
        break;
LABEL_96:
      v52 = v107;
      v42 = v103;
      if (v107 >= v103)
        goto LABEL_97;
    }
    v56 = v55;
    v57 = 0;
    v58 = v44 != 0.0;
    if (v44 == 1.0 || v52 != 0)
      v58 = 0;
    v121 = v58;
    v60 = v55 & 3;
    if (v55 <= 0)
      v60 = -(-v55 & 3);
    v109 = 4 - v60;
    v110 = v60;
    v61 = v114;
    v120 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_239A2AE00;
    v124 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_239A28970;
    __Na = v55;
    while (1)
    {
      v130 = v57;
      v62 = v57 + 128;
      if (v57 + 128 <= v46)
        v63 = 128;
      else
        v63 = v46 - v57;
      v123 = v114 + 4 * v57;
      v64 = v124;
      if ((v63 & 7) != 0)
        v64 = sub_239A34170;
      v124 = v64;
      v65 = v120;
      if ((v63 & 7) != 0)
        v65 = sub_239A334F0;
      v120 = v65;
      v112(v63, v56, v115 + 4 * v57 * v113, vars0, v128);
      v66 = v130;
      v67 = v63;
      v127 = v63;
      v118 = v62;
      v119 = v61;
      vars8 = v63 + v130;
      if (v63 + v130 >= 4)
      {
        v68 = 0;
        v69 = 0;
        v132 = v63 + v130 - 3;
        v70 = v61;
        v56 = __Na;
        while (2)
        {
          v71 = v69 - v66;
          v72 = v69 & 4;
          if ((v69 & 4) != 0)
            v73 = v69 - v66 - 4;
          else
            v73 = v69 - v66;
          v74 = v73 & ~(v71 >> 63);
          if (v74 > v67)
            goto LABEL_63;
          v75 = v123 + 4 * v69 * v131;
          v76 = (_OWORD *)(v122 + 4 * v69 * v56);
          if (v71 < 0)
          {
            v78 = 0;
            if (v121)
              goto LABEL_54;
          }
          else
          {
            v125 = 16 * (v68 & 1);
            v126 = v122 + 4 * v69 * v56;
            v77 = (char *)&a26 + v125;
            a32 = 0u;
            a33 = 0u;
            a30 = 0u;
            a31 = 0u;
            a28 = 0u;
            a29 = 0u;
            a26 = 0u;
            a27 = 0u;
            if (v67 - v73 >= 8)
              v78 = 8;
            else
              v78 = v67 - v73;
            v124((float32x4_t *)&v128[4 * v73 * v56], (uint64_t)v76, (float32x4_t *)&a26, 8, v78, v56);
            v75 += 4 * v73;
            if (v121)
            {
              v79 = 0;
              v76 = (_OWORD *)v126;
              v80 = v70 + v125 + 4 * v73;
              v56 = __Na;
              v67 = v127;
              do
              {
                if (v72 < v78)
                {
                  v81 = 0;
                  do
                  {
                    *(float *)(v80 + 4 * v81) = *(float *)&v77[4 * v81] + (float)(*(float *)(v80 + 4 * v81) * v44);
                    ++v81;
                  }
                  while (v72 + v81 < v78);
                }
                ++v72;
                ++v79;
                v77 += 36;
                v80 += v54;
              }
              while (v79 != 4);
              v53 = 16 * v131;
              v66 = v130;
              if (v78 + v74 >= v127)
                goto LABEL_63;
LABEL_54:
              v120((float32x4_t *)&v128[4 * (v78 + v74) * v56], (uint64_t)v76, (float32x4_t *)(v75 + 4 * v78), v131, v67 - (v78 + v74), v56, v44);
LABEL_62:
              v56 = __Na;
              v66 = v130;
              v67 = v127;
LABEL_63:
              v69 += 4;
              ++v68;
              v70 += v53;
              if (v69 >= v132)
                goto LABEL_66;
              continue;
            }
            v82 = 0;
            v76 = (_OWORD *)v126;
            v83 = v70 + v125 + 4 * v73;
            v56 = __Na;
            v67 = v127;
            do
            {
              if (v72 < v78)
              {
                v84 = 0;
                do
                {
                  *(float *)(v83 + 4 * v84) = *(float *)(v83 + 4 * v84) + *(float *)&v77[4 * v84];
                  ++v84;
                }
                while (v72 + v84 < v78);
              }
              ++v72;
              ++v82;
              v77 += 36;
              v83 += v54;
            }
            while (v82 != 4);
            v53 = 16 * v131;
            v66 = v130;
            if (v78 + v74 >= v127)
              goto LABEL_63;
          }
          break;
        }
        v124((float32x4_t *)&v128[4 * (v78 + v74) * v56], (uint64_t)v76, (float32x4_t *)(v75 + 4 * v78), v131, v67 - (v78 + v74), v56);
        goto LABEL_62;
      }
      v69 = 0;
      v56 = __Na;
LABEL_66:
      v85 = vars8 <= 0 ? -(-vars8 & 3) : vars8 & 3;
      if (v85)
      {
        v86 = v69 - v66;
        v87 = (v69 - v66) & ~((v69 - v66) >> 63);
        if (v67 > v87)
          break;
      }
LABEL_95:
      v61 = v119 + 512;
      v57 = v118;
      v46 = v111;
      if (v118 >= v111)
        goto LABEL_96;
    }
    v88 = v123 + 4 * v69 * v131;
    v89 = (const float *)(v122 + 4 * v69 * v56);
    if (v86 < 0)
    {
      v91 = 0;
      v97 = 0;
      v98 = 0;
      if (v121)
      {
LABEL_86:
        sub_239A2A0BC((float32x4_t *)&v128[4 * v97 * v56 + 4 * v91], v89, v88, v131, v67 - v97, v85, __Na, v44);
LABEL_94:
        v56 = __Na;
        goto LABEL_95;
      }
    }
    else
    {
      a30 = 0u;
      a31 = 0u;
      a28 = 0u;
      a29 = 0u;
      a26 = 0u;
      a27 = 0u;
      if (v67 - v87 >= 8)
        v90 = 8;
      else
        v90 = v67 - v87;
      if (v110)
        v91 = (v87 & 4) * v109;
      else
        v91 = 0;
      v92 = v88 + 4 * v87;
      sub_239A2A1EC((float32x4_t *)&v128[4 * v86 * v56 + 4 * v91], (const float *)(v122 + 4 * v69 * v56), (uint64_t)&a26, 8, v90, v85, v56);
      if (v121)
      {
        v56 = __Na;
        if (v85 >= 1)
        {
          v93 = 0;
          v94 = v119 + v108 * v69 + 4 * v87;
          v95 = &a26;
          do
          {
            v96 = 0;
            do
            {
              *(float *)(v94 + 4 * v96) = *((float *)v95 + v96) + (float)(*(float *)(v94 + 4 * v96) * v44);
              ++v96;
            }
            while (v93 + v96 < v85);
            ++v93;
            v95 = (__int128 *)((char *)v95 + 36);
            v94 += v54;
          }
          while (v93 != v85);
        }
        v88 = v92 + 4 * v90;
        v97 = v90 + v87;
        v53 = 16 * v131;
        v67 = v127;
        goto LABEL_86;
      }
      v56 = __Na;
      if (v85 >= 1)
      {
        v99 = 0;
        v100 = v119 + v108 * v69 + 4 * v87;
        v101 = &a26;
        do
        {
          v102 = 0;
          do
          {
            *(float *)(v100 + 4 * v102) = *(float *)(v100 + 4 * v102) + *((float *)v101 + v102);
            ++v102;
          }
          while (v99 + v102 < v85);
          ++v99;
          v101 = (__int128 *)((char *)v101 + 36);
          v100 += v54;
        }
        while (v99 != v85);
      }
      v88 = v92 + 4 * v90;
      v98 = v90 + v87;
      v53 = 16 * v131;
      v67 = v127;
    }
    sub_239A2A1EC((float32x4_t *)&v128[4 * v98 * v56 + 4 * v91], v89, v88, v131, v67 - v98, v85, __Na);
    goto LABEL_94;
  }
LABEL_97:
  if (v46 >= 1)
    free(v128);
}

_QWORD *sub_239A42F9C(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *((_BYTE *)__dst + 24) = 1;
  *((_BYTE *)__dst + 32) = 0;
  *((_BYTE *)__dst + 88) = 0;
  return __dst;
}

void sub_239A42FF8(uint64_t a1, __int128 *a2, __int128 *a3, int a4, uint64_t a5, double a6, double a7, double a8, int64x2_t a9, double a10, int8x16_t a11)
{
  int v15;
  int v16;
  uint64_t v17;
  void *v18;
  std::string::size_type v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  std::string __p;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 __dst;
  uint64_t v47;
  unsigned __int8 v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[2];
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];

  v57[2] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 96))
  {
    if (*((_BYTE *)a2 + 24))
    {
      v15 = *((char *)a2 + 23);
      if (v15 < 0)
      {
        if (*((_QWORD *)a2 + 1))
        {
LABEL_5:
          if (a4)
          {
            if (v15 < 0)
            {
              sub_23941A7F8(&v52, *(void **)a2, *((_QWORD *)a2 + 1));
            }
            else
            {
              v52 = *a2;
              v53 = *((_QWORD *)a2 + 2);
            }
            if (*((char *)a3 + 23) < 0)
            {
              sub_23941A7F8(&v54, *(void **)a3, *((_QWORD *)a3 + 1));
            }
            else
            {
              v54 = *a3;
              v55 = *((_QWORD *)a3 + 2);
            }
            sub_239583A20((uint64_t)&v52, (uint64_t)&v56, a5, &__p, a9, a11);
            v57[0] = __p.__r_.__value_.__l.__size_;
            v23 = __p.__r_.__value_.__r.__words[0];
            *(_QWORD *)((char *)v57 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
            v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            memset(&__p, 0, sizeof(__p));
            sub_239523354((char *)&v33, a2 + 2);
            v25 = v57[0];
            *(_QWORD *)a1 = v23;
            *(_QWORD *)(a1 + 8) = v25;
            *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v57 + 7);
            *(_BYTE *)(a1 + 23) = v24;
            *(_BYTE *)(a1 + 24) = 1;
            *(_BYTE *)(a1 + 32) = 0;
            *(_BYTE *)(a1 + 88) = 0;
            if (!v38)
            {
LABEL_37:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v55) & 0x80000000) == 0)
                {
LABEL_39:
                  if ((SHIBYTE(v53) & 0x80000000) == 0)
                    return;
LABEL_43:
                  v18 = (void *)v52;
                  goto LABEL_44;
                }
              }
              else if ((SHIBYTE(v55) & 0x80000000) == 0)
              {
                goto LABEL_39;
              }
              operator delete((void *)v54);
              if ((SHIBYTE(v53) & 0x80000000) == 0)
                return;
              goto LABEL_43;
            }
            v26 = v35;
            *(_QWORD *)(a1 + 48) = v34;
            *(_OWORD *)(a1 + 32) = v33;
            v33 = 0uLL;
            *(_QWORD *)(a1 + 56) = v26;
            *(_OWORD *)(a1 + 64) = v36;
            *(_QWORD *)(a1 + 80) = v37;
            v34 = 0;
            v36 = 0uLL;
            v37 = 0;
LABEL_36:
            *(_BYTE *)(a1 + 88) = 1;
            goto LABEL_37;
          }
          if (*((char *)a3 + 23) < 0)
          {
            sub_23941A7F8(&v52, *(void **)a3, *((_QWORD *)a3 + 1));
            if ((*((_BYTE *)a2 + 23) & 0x80) == 0)
              goto LABEL_25;
          }
          else
          {
            v52 = *a3;
            v53 = *((_QWORD *)a3 + 2);
            if ((v15 & 0x80) == 0)
            {
LABEL_25:
              v54 = *a2;
              v55 = *((_QWORD *)a2 + 2);
LABEL_31:
              sub_239583A20((uint64_t)&v52, (uint64_t)&v56, a5, &__p, a9, a11);
              v51[0] = __p.__r_.__value_.__l.__size_;
              v19 = __p.__r_.__value_.__r.__words[0];
              *(_QWORD *)((char *)v51 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
              v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              memset(&__p, 0, sizeof(__p));
              sub_239523354((char *)&v27, a2 + 2);
              v21 = v51[0];
              *(_QWORD *)a1 = v19;
              *(_QWORD *)(a1 + 8) = v21;
              *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v51 + 7);
              *(_BYTE *)(a1 + 23) = v20;
              *(_BYTE *)(a1 + 24) = 1;
              *(_BYTE *)(a1 + 32) = 0;
              *(_BYTE *)(a1 + 88) = 0;
              if (!v32)
                goto LABEL_37;
              v22 = v29;
              *(_QWORD *)(a1 + 48) = v28;
              *(_OWORD *)(a1 + 32) = v27;
              v27 = 0uLL;
              *(_QWORD *)(a1 + 56) = v22;
              *(_OWORD *)(a1 + 64) = v30;
              *(_QWORD *)(a1 + 80) = v31;
              v28 = 0;
              v30 = 0uLL;
              v31 = 0;
              goto LABEL_36;
            }
          }
          sub_23941A7F8(&v54, *(void **)a2, *((_QWORD *)a2 + 1));
          goto LABEL_31;
        }
      }
      else if (*((_BYTE *)a2 + 23))
      {
        goto LABEL_5;
      }
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_23941A7F8(&__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      __dst = *a3;
      v47 = *((_QWORD *)a3 + 2);
    }
    v48 = 1;
    sub_239523354((char *)&v40, a2 + 2);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v16 = v48;
    if (v48)
    {
      *(_OWORD *)a1 = __dst;
      *(_QWORD *)(a1 + 16) = v47;
      v47 = 0;
      __dst = 0uLL;
      *(_BYTE *)(a1 + 24) = 1;
    }
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 88) = 0;
    if (v45)
    {
      v17 = v42;
      *(_QWORD *)(a1 + 48) = v41;
      *(_OWORD *)(a1 + 32) = v40;
      v40 = 0uLL;
      *(_QWORD *)(a1 + 56) = v17;
      *(_OWORD *)(a1 + 64) = v43;
      *(_QWORD *)(a1 + 80) = v44;
      v41 = 0;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(a1 + 88) = 1;
    }
    if (v16 && SHIBYTE(v47) < 0)
    {
      v18 = (void *)__dst;
LABEL_44:
      operator delete(v18);
    }
  }
  else
  {
    if (*((char *)a3 + 23) < 0)
    {
      sub_23941A7F8(&v49, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v49 = *a3;
      v50 = *((_QWORD *)a3 + 2);
    }
    *(_OWORD *)a1 = v49;
    *(_QWORD *)(a1 + 16) = v50;
    *(_BYTE *)(a1 + 24) = 1;
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 88) = 0;
  }
}

void sub_239A433F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 105) < 0)
  {
    operator delete(*(void **)(v31 - 128));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239A434AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 184))
  {
    if (*(char *)(v1 - 185) < 0)
    {
      operator delete(*(void **)(v1 - 208));
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x239A434A4);
}

uint64_t sub_239A434D0(uint64_t result, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 112) = 0;
  if (*((_BYTE *)a4 + 96))
  {
    *(_BYTE *)(result + 40) = 0;
    if (*((_BYTE *)a4 + 24))
    {
      v4 = *a4;
      *(_QWORD *)(result + 32) = *((_QWORD *)a4 + 2);
      *(_OWORD *)(result + 16) = v4;
      *((_QWORD *)a4 + 1) = 0;
      *((_QWORD *)a4 + 2) = 0;
      *(_QWORD *)a4 = 0;
      *(_BYTE *)(result + 40) = 1;
    }
    *(_BYTE *)(result + 48) = 0;
    *(_BYTE *)(result + 104) = 0;
    if (*((_BYTE *)a4 + 88))
    {
      v5 = a4[2];
      *(_QWORD *)(result + 64) = *((_QWORD *)a4 + 6);
      *(_OWORD *)(result + 48) = v5;
      *((_QWORD *)a4 + 5) = 0;
      *((_QWORD *)a4 + 6) = 0;
      *((_QWORD *)a4 + 4) = 0;
      *(_QWORD *)(result + 72) = *((_QWORD *)a4 + 7);
      v6 = a4[4];
      *(_QWORD *)(result + 96) = *((_QWORD *)a4 + 10);
      *(_OWORD *)(result + 80) = v6;
      *((_QWORD *)a4 + 9) = 0;
      *((_QWORD *)a4 + 10) = 0;
      *((_QWORD *)a4 + 8) = 0;
      *(_BYTE *)(result + 104) = 1;
    }
    *(_BYTE *)(result + 112) = 1;
  }
  return result;
}

void sub_239A43574(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  int64x2_t v10;
  double v11;
  int8x16_t v12;
  char v13;
  void *v14;
  char v15;
  uint64_t v16;
  char v17;
  int v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  void *__dst[2];
  char v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  char v33;
  char v34;
  void *__p;
  __int128 v36;
  unsigned __int8 v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  unsigned __int8 v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[3];

  v46[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  sub_23952329C(__dst, a2 + 1);
  v25 = 0;
  LOBYTE(v24) = 0;
  sub_239A42FF8((uint64_t)&__p, (__int128 *)__dst, a1, 0, (uint64_t)&v24, v7, v8, v9, v10, v11, v12);
  v18 = v37;
  if (v37)
  {
    v19 = __p;
    v46[0] = v36;
    *(_QWORD *)((char *)v46 + 7) = *(_QWORD *)((char *)&v36 + 7);
    v13 = HIBYTE(v36);
    v36 = 0uLL;
    __p = 0;
    v20 = v43;
    if (v43)
      goto LABEL_3;
  }
  else
  {
    v19 = 0;
    v20 = v43;
    if (v43)
    {
LABEL_3:
      v21 = v38;
      v45[0] = v39;
      *(_QWORD *)((char *)v45 + 7) = *(_QWORD *)((char *)&v39 + 7);
      v15 = HIBYTE(v39);
      v38 = 0;
      v39 = 0uLL;
      v16 = v40;
      v14 = v41;
      v44[0] = v42;
      *(_QWORD *)((char *)v44 + 7) = *(_QWORD *)((char *)&v42 + 7);
      v17 = HIBYTE(v42);
      v41 = 0;
      v42 = 0uLL;
      *(_QWORD *)a3 = v5;
      *(_QWORD *)(a3 + 8) = v6;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      if (!v18)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v21 = 0;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  if (v18)
  {
LABEL_4:
    v22 = v46[0];
    *(_QWORD *)(a3 + 16) = v19;
    *(_QWORD *)(a3 + 24) = v22;
    *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)v46 + 7);
    *(_BYTE *)(a3 + 39) = v13;
    v46[0] = 0;
    *(_QWORD *)((char *)v46 + 7) = 0;
    *(_BYTE *)(a3 + 40) = 1;
    v19 = 0;
    v13 = 0;
  }
LABEL_5:
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v20)
  {
    v23 = v45[0];
    *(_QWORD *)(a3 + 48) = v21;
    *(_QWORD *)(a3 + 56) = v23;
    *(_QWORD *)(a3 + 63) = *(_QWORD *)((char *)v45 + 7);
    *(_BYTE *)(a3 + 71) = v15;
    v45[0] = 0;
    *(_QWORD *)((char *)v45 + 7) = 0;
    *(_QWORD *)(a3 + 72) = v16;
    *(_QWORD *)(a3 + 80) = v14;
    *(_QWORD *)(a3 + 88) = v44[0];
    *(_QWORD *)(a3 + 95) = *(_QWORD *)((char *)v44 + 7);
    *(_BYTE *)(a3 + 103) = v17;
    v44[0] = 0;
    *(_QWORD *)((char *)v44 + 7) = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  if (v18 && v13 < 0)
  {
    operator delete(v19);
    v20 = v43;
  }
  if (v20)
  {
    if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v39) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_30:
      operator delete(v38);
      if (!v37)
        goto LABEL_16;
      goto LABEL_14;
    }
    operator delete(v41);
    if (SHIBYTE(v39) < 0)
      goto LABEL_30;
  }
LABEL_13:
  if (!v37)
    goto LABEL_16;
LABEL_14:
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
LABEL_16:
  if (v25 < 0)
    operator delete(v24);
  if (v34)
  {
    if (!v33)
      goto LABEL_22;
    if (v32 < 0)
    {
      operator delete(v31);
      if ((v30 & 0x80000000) == 0)
      {
LABEL_22:
        if (!v28)
          return;
        goto LABEL_23;
      }
    }
    else if ((v30 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v29);
    if (!v28)
      return;
LABEL_23:
    if (v27 < 0)
      operator delete(__dst[0]);
  }
}

void sub_239A437FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_239523188((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 sub_239A43824@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  _BYTE *v5;
  uint64_t v6;
  __n128 result;

  v4 = *(_BYTE *)(a1 + 23);
  v5 = (_BYTE *)a1;
  if (v4 < 0)
  {
    v5 = *(_BYTE **)a1;
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(a1 + 23);
    else
      v6 = *(_QWORD *)(a1 + 8);
    if (v6)
      goto LABEL_6;
  }
  else
  {
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(a1 + 23);
    else
      v6 = *(_QWORD *)(a1 + 8);
    for (; v6; --v6)
    {
LABEL_6:
      *v5 = __tolower(*v5);
      ++v5;
    }
  }
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  return result;
}

std::string::size_type sub_239A438B4@<X0>(std::string::size_type result@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, std::string *a6@<X8>)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  std::string::size_type v12;
  uint64_t v13;
  std::string::size_type v15;
  uint64_t size;
  std::string *v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  std::string::size_type v23;
  int v24;
  uint64_t v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string::size_type v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  uint64_t v31;
  std::string::size_type v32;
  std::string::size_type v33;
  char *v34;
  int64_t v35;
  char *v36;
  int64_t v37;
  char *v38;
  int v39;
  int64_t v40;
  uint64_t v41;
  std::string *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  char *v45;

  v8 = *(unsigned __int8 *)(result + 23);
  v9 = (char)v8;
  v10 = *(_QWORD *)(result + 8);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(result + 8);
  if (!v8
    || ((v12 = a2[23], (v12 & 0x80u) == 0)
      ? (v13 = a2[23])
      : (v13 = *((_QWORD *)a2 + 1)),
        !v13))
  {
    if (v9 < 0)
      return (std::string::size_type)sub_23941A7F8(a6, *(void **)result, v10);
    *(_OWORD *)&a6->__r_.__value_.__l.__data_ = *(_OWORD *)result;
    a6->__r_.__value_.__r.__words[2] = *(_QWORD *)(result + 16);
    return result;
  }
  if (!a5)
    a4 = -1;
  if (v9 < 0)
  {
    result = (std::string::size_type)sub_23941A7F8(a6, *(void **)result, v10);
    v12 = a2[23];
    v15 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v15 = *((_QWORD *)a2 + 1);
    *(_OWORD *)&a6->__r_.__value_.__l.__data_ = *(_OWORD *)result;
    a6->__r_.__value_.__r.__words[2] = *(_QWORD *)(result + 16);
  }
  size = HIBYTE(a6->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v17 = a6;
  else
    v17 = (std::string *)a6->__r_.__value_.__r.__words[0];
  if ((v12 & 0x80u) == 0)
    v18 = a2;
  else
    v18 = *(char **)a2;
  if ((v12 & 0x80u) == 0)
    v19 = v12;
  else
    v19 = v15;
  v45 = a2;
  if (!v19)
  {
    v23 = 0;
    if (!a4)
      return result;
    goto LABEL_44;
  }
  v20 = a3;
  if ((size & 0x80u) != 0)
    size = a6->__r_.__value_.__l.__size_;
  v21 = (char *)v17 + size;
  if (size >= v19)
  {
    v43 = v15;
    v24 = *v18;
    result = (std::string::size_type)v17;
    do
    {
      v25 = size - v19;
      if (v25 == -1)
        break;
      result = (std::string::size_type)memchr((void *)result, v24, v25 + 1);
      if (!result)
        break;
      v22 = (char *)result;
      result = memcmp((const void *)result, v18, v19);
      if (!(_DWORD)result)
        goto LABEL_39;
      result = (std::string::size_type)(v22 + 1);
      size = v21 - (v22 + 1);
    }
    while (size >= v19);
    v22 = v21;
LABEL_39:
    v15 = v43;
  }
  else
  {
    v22 = (char *)v17 + size;
  }
  if (v22 == v21)
    v23 = -1;
  else
    v23 = v22 - (char *)v17;
  a3 = v20;
  if (a4)
  {
LABEL_44:
    if (v23 != -1)
    {
      v26 = *(unsigned __int8 *)(a3 + 23);
      v27 = *(_QWORD *)(a3 + 8);
      v41 = a3;
      v42 = a6;
      do
      {
        if ((v12 & 0x80u) == 0)
          v28 = v12;
        else
          v28 = v15;
        if ((v26 & 0x80u) == 0)
          v29 = (const std::string::value_type *)a3;
        else
          v29 = *(const std::string::value_type **)a3;
        if ((v26 & 0x80u) == 0)
          v30 = v26;
        else
          v30 = v27;
        result = (std::string::size_type)std::string::replace(a6, v23, v28, v29, v30);
        v26 = *(unsigned __int8 *)(a3 + 23);
        v27 = *(_QWORD *)(a3 + 8);
        if ((v26 & 0x80u) == 0)
          v31 = *(unsigned __int8 *)(a3 + 23);
        else
          v31 = *(_QWORD *)(a3 + 8);
        v23 += v31;
        v32 = HIBYTE(a6->__r_.__value_.__r.__words[2]);
        if ((v32 & 0x80u) == 0)
          v33 = (std::string::size_type)a6;
        else
          v33 = a6->__r_.__value_.__r.__words[0];
        if ((v32 & 0x80u) != 0)
          v32 = a6->__r_.__value_.__l.__size_;
        v12 = v45[23];
        v15 = *((_QWORD *)v45 + 1);
        if ((v12 & 0x80u) == 0)
          v34 = v45;
        else
          v34 = *(char **)v45;
        if ((v12 & 0x80u) == 0)
          v35 = v45[23];
        else
          v35 = *((_QWORD *)v45 + 1);
        if (v32 < v23)
          break;
        if (v35)
        {
          result = v33 + v23;
          v36 = (char *)(v33 + v32);
          v37 = v32 - v23;
          if (v37 >= v35)
          {
            v44 = *((_QWORD *)v45 + 1);
            v39 = *v34;
            do
            {
              v40 = v37 - v35;
              if (v40 == -1)
                break;
              result = (std::string::size_type)memchr((void *)result, v39, v40 + 1);
              if (!result)
                break;
              v38 = (char *)result;
              result = memcmp((const void *)result, v34, v35);
              if (!(_DWORD)result)
                goto LABEL_79;
              result = (std::string::size_type)(v38 + 1);
              v37 = v36 - (v38 + 1);
            }
            while (v37 >= v35);
            v38 = v36;
LABEL_79:
            v15 = v44;
          }
          else
          {
            v38 = v36;
          }
          if (v38 == v36)
            v23 = -1;
          else
            v23 = (std::string::size_type)&v38[-v33];
          a3 = v41;
          a6 = v42;
        }
        if (!--a4)
          break;
      }
      while (v23 != -1);
    }
  }
  return result;
}

void sub_239A43B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*a10);
  _Unwind_Resume(exception_object);
}

void sub_239A43BB0(char *__format@<X0>, std::string *a2@<X8>, ...)
{
  unsigned int v4;
  int v5;
  char *v6;
  size_t size;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  char __str[256];
  uint64_t v14;
  va_list va;

  va_start(va, a2);
  v14 = *MEMORY[0x24BDAC8D0];
  v4 = vsnprintf(__str, 0x100uLL, __format, va);
  if (v4 <= 0xFF)
  {
    v9 = v4;
    if (v4 >= 0x17)
    {
      v10 = (v4 & 0xFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v10 = v4 | 7;
      v11 = v10 + 1;
      v12 = (std::string *)operator new(v10 + 1);
      a2->__r_.__value_.__l.__size_ = v9;
      a2->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      a2 = v12;
    }
    else
    {
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = v4;
      if (!v4)
        goto LABEL_20;
    }
    memcpy(a2, __str, v9);
LABEL_20:
    a2->__r_.__value_.__s.__data_[v9] = 0;
    return;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    std::string::resize(a2, (int)v4 + 1, 0);
    va_copy(__str, va);
    v5 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5 >= 0)
      v6 = (char *)a2;
    else
      v6 = (char *)a2->__r_.__value_.__r.__words[0];
    if (v5 >= 0)
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    else
      size = a2->__r_.__value_.__l.__size_;
    v4 = vsnprintf(v6, size, __format, va);
    v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((v8 & 0x80u) != 0)
      v8 = a2->__r_.__value_.__l.__size_;
  }
  while (v8 <= (int)v4);
  std::string::resize(a2, (int)v4, 0);
}

void sub_239A43D04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_239A43D24(uint64_t *a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_QWORD *)(v2 + 272) = 0;
  sub_2394988CC(v2);
  *a1 = v2;
  return a1;
}

void sub_239A43D94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

uint64_t *sub_239A43DB8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = MEMORY[0x24BEDB7F0];
    v4 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v2 = *MEMORY[0x24BEDB7F0];
    v5 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 64);
    *(_QWORD *)(v2 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v2 + 16) = v5;
    if (*(char *)(v2 + 111) < 0)
      operator delete(*(void **)(v2 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x23B83E250](v2 + 128);
    MEMORY[0x23B83E31C](v2, 0x10B2C40EED050F3);
  }
  return a1;
}

uint64_t sub_239A43E64(_QWORD *a1)
{
  return *a1 + 16;
}

uint64_t sub_239A43E70()
{
  return std::stringbuf::str();
}

void sub_239A43E80(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23B83E31CLL);
}

size_t sub_239A43EA4@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  size_t result;
  size_t v7;
  char *v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v4 = strstr(a1, "T = ");
  if (v4)
  {
    v5 = v4;
    result = strlen(v4);
    v7 = result - 5;
    if (result - 5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v7 >= 0x17)
      {
        v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17)
          v11 = v7 | 7;
        v12 = v11 + 1;
        v13 = operator new(v11 + 1);
        a2[1] = v7;
        a2[2] = v12 | 0x8000000000000000;
        *a2 = v13;
        a2 = v13;
      }
      else
      {
        *((_BYTE *)a2 + 23) = v7;
        if (result == 5)
          goto LABEL_15;
      }
      result = (size_t)memmove(a2, v5 + 4, v7);
LABEL_15:
      *((_BYTE *)a2 + v7) = 0;
      return result;
    }
LABEL_40:
    sub_23941A5AC();
  }
  v8 = strstr(a1, "= ");
  if (v8)
  {
    v9 = v8;
    result = strlen(v8);
    v10 = result - 3;
    if (result - 3 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_40;
    if (v10 >= 0x17)
    {
      v17 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v17 = v10 | 7;
      v18 = v17 + 1;
      v19 = operator new(v17 + 1);
      a2[1] = v10;
      a2[2] = v18 | 0x8000000000000000;
      *a2 = v19;
      a2 = v19;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v10;
      if (result == 3)
        goto LABEL_25;
    }
    result = (size_t)memmove(a2, v9 + 2, v10);
LABEL_25:
    *((_BYTE *)a2 + v10) = 0;
    return result;
  }
  v14 = strchr(a1, 61);
  if (v14)
  {
    v15 = v14;
    result = strlen(v14);
    v16 = result - 2;
    if (result - 2 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_40;
    if (v16 >= 0x17)
    {
      v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v21 = v16 | 7;
      v22 = v21 + 1;
      v23 = operator new(v21 + 1);
      a2[1] = v16;
      a2[2] = v22 | 0x8000000000000000;
      *a2 = v23;
      a2 = v23;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v16;
      if (result == 2)
        goto LABEL_34;
    }
    result = (size_t)memmove(a2, v15 + 1, v16);
LABEL_34:
    *((_BYTE *)a2 + v16) = 0;
    return result;
  }
  result = strlen(a1);
  if (result > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_40;
  v20 = result;
  if (result >= 0x17)
  {
    v24 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v24 = result | 7;
    v25 = v24 + 1;
    v26 = operator new(v24 + 1);
    a2[1] = v20;
    a2[2] = v25 | 0x8000000000000000;
    *a2 = v26;
    a2 = v26;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
      goto LABEL_39;
  }
  result = (size_t)memcpy(a2, a1, v20);
LABEL_39:
  *((_BYTE *)a2 + v20) = 0;
  return result;
}

void sub_239A44118(std::string::size_type a1@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  v5 = 10;
  strcpy((char *)v4, "std::__1::");
  v3 = 5;
  strcpy((char *)__p, "std::");
  sub_239A438B4(a1, (char *)v4, (uint64_t)__p, 0, 0, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((v5 & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p[0]);
  if (v5 < 0)
    goto LABEL_5;
}

void sub_239A441C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_239A44200(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>, int64x2_t a4@<Q3>, int8x16_t a5@<Q5>)
{
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  int8x16_t v11;
  void *__p;
  char v13;
  void *v14;
  char v15;
  void *__dst[2];
  uint64_t v17;
  void *v18;
  char v19;
  std::string v20;
  void *v21;
  char v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  v9 = a2[1];
  if (v8 != v9)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_23941A7F8(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
      v8 = *a2;
      v9 = a2[1];
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a1;
      v17 = *(_QWORD *)(a1 + 16);
    }
    v19 = 1;
    LOWORD(v18) = 60;
    v15 = 1;
    LOWORD(v14) = 44;
    sub_23941AE44(v8, v9, (uint64_t)&v14, &v20, a4, a5);
    v22 = 1;
    LOWORD(v21) = 62;
    v13 = 0;
    LOBYTE(__p) = 0;
    sub_239583A20((uint64_t)__dst, (uint64_t)v23, (uint64_t)&__p, a3, v10, v11);
    if (v13 < 0)
    {
      operator delete(__p);
      if ((v22 & 0x80000000) == 0)
      {
LABEL_9:
        if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_10;
        goto LABEL_16;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(v21);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      if ((v19 & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_18;
    }
LABEL_17:
    operator delete(v18);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
LABEL_12:
      if ((v15 & 0x80000000) == 0)
        return;
LABEL_19:
      operator delete(v14);
      return;
    }
LABEL_18:
    operator delete(__dst[0]);
    if ((v15 & 0x80000000) == 0)
      return;
    goto LABEL_19;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    sub_23941A7F8(a3, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void sub_239A44400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  _Unwind_Resume(exception_object);
}

void sub_239A444D4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  sub_2394988CC((uint64_t)v10);
  sub_239458500(v11, (uint64_t)"Assert: ", 8);
  sub_239458500(v11, (uint64_t)"in line ", 8);
  v5 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v5, (uint64_t)"\n", 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11[0] = v6;
  v11[1] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83E250](&v13);
  if (v9 >= 0)
    v7 = &v8;
  else
    v7 = v8;
  a4(v7);
  if (v9 < 0)
    operator delete(v8);
}

void sub_239A4460C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A4463C(char *__src)
{
  unsigned __int8 v2;
  NSObject *v3;
  int v5;
  char *v6;
  char __dst[1024];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  strncpy(__dst, __src, 0x400uLL);
  qword_256934578 = (uint64_t)__dst;
  v2 = atomic_load((unsigned __int8 *)&qword_25693D8A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25693D8A0))
  {
    qword_25693D898 = (uint64_t)os_log_create("cv3d", "");
    __cxa_guard_release(&qword_25693D8A0);
  }
  v3 = qword_25693D898;
  if (os_log_type_enabled((os_log_t)qword_25693D898, OS_LOG_TYPE_FAULT))
  {
    v5 = 136315138;
    v6 = __src;
    _os_log_impl(&dword_23940C000, v3, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&v5, 0xCu);
  }
  return fputs(__src, (FILE *)*MEMORY[0x24BDAC8D8]);
}

uint64_t (*sub_239A4475C())(void)
{
  uint64_t (*result)(void);

  result = off_25693D890;
  if (off_25693D890)
    return (uint64_t (*)(void))off_25693D890();
  return result;
}

uint64_t sub_239A44770(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_23979BCF4((_QWORD *)(a1 + 16));
  return a1;
}

void sub_239A447D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_23979BCF4((_QWORD *)(a1 + 16));
  JUMPOUT(0x23B83E31CLL);
}

void sub_239A44844()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGAddSampleStreamProcessingOutputRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 56);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGAddSampleStreamProcessingOutputRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 56);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

float CPGAddSampleStreamProcessingOutputGetFeatureMatchability(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t CPGAddSampleStreamProcessingOutputGetFlipRecommendation(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t CPGAddSampleStreamProcessingOutputGetObjectMask(uint64_t a1)
{
  return sub_23979C580(a1 + 16);
}

double CPGAddSampleCallbackBundleCreate()
{
  _OWORD *v0;
  double result;

  v0 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    result = 0.0;
    *v0 = 0u;
    v0[1] = 0u;
    *((_DWORD *)v0 + 6) = 1;
    *(_QWORD *)v0 = &off_250AF2190;
  }
  return result;
}

uint64_t CPGAddSampleCallbackBundleRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGAddSampleCallbackBundleRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGAddSampleCallbackBundleSetStreamProcessingCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  return 0;
}

void sub_239A44950()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGBoundingBoxRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 264);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGBoundingBoxRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 264);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGBoundingBoxCreateAxisAligned(float64x2_t *a1, float64x2_t *a2, char **a3)
{
  char *v4;
  char *v5;
  double v6;
  float64x2_t v7;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t result;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[8];

  v22 = a2[1];
  v23 = a1[1];
  v20 = *a2;
  v21 = *a1;
  v26 = *(float64x2_t *)MEMORY[0x24BDAEDE0];
  v27 = *(_OWORD *)(MEMORY[0x24BDAEDE0] + 16);
  v28 = *(_OWORD *)(MEMORY[0x24BDAEDE0] + 48);
  v29 = *(_OWORD *)(MEMORY[0x24BDAEDE0] + 80);
  v24 = *(float64x2_t *)(MEMORY[0x24BDAEDE0] + 64);
  v25 = *(float64x2_t *)(MEMORY[0x24BDAEDE0] + 32);
  v4 = (char *)operator new(0x110uLL, MEMORY[0x24BEDB6B8]);
  v5 = v4;
  if (v4)
  {
    *(_QWORD *)&v6 = *(_OWORD *)&vsubq_f64(v22, v23);
    v7 = vsubq_f64(v20, v21);
    __asm { FMOV            V5.2D, #0.5 }
    *((_QWORD *)&v30 + 1) = 0x3FF0000000000000;
    *(_QWORD *)&v30 = *(_OWORD *)&vmulq_f64(vaddq_f64(v23, v22), _Q5);
    *(_OWORD *)(v4 + 56) = COERCE_UNSIGNED_INT64(vmuld_lane_f64(*(double *)&v28, v7, 1));
    *(float64x2_t *)(v4 + 40) = vmulq_laneq_f64(v25, v7, 1);
    *(_OWORD *)(v4 + 24) = COERCE_UNSIGNED_INT64(vmuld_n_f64(*(double *)&v27, v7.f64[0]));
    *(float64x2_t *)(v4 + 8) = vmulq_n_f64(v26, v7.f64[0]);
    *(_OWORD *)(v4 + 120) = v30;
    *(float64x2_t *)(v4 + 104) = vmulq_f64(vaddq_f64(v21, v20), _Q5);
    *(_OWORD *)(v4 + 88) = COERCE_UNSIGNED_INT64(vmuld_n_f64(*(double *)&v29, v6));
    *(float64x2_t *)(v4 + 72) = vmulq_n_f64(v24, v6);
    sub_239A22BE8(v31);
    v13 = v31[5];
    *(_OWORD *)(v5 + 200) = v31[4];
    *(_OWORD *)(v5 + 216) = v13;
    v14 = v31[7];
    *(_OWORD *)(v5 + 232) = v31[6];
    *(_OWORD *)(v5 + 248) = v14;
    v15 = v31[1];
    *(_OWORD *)(v5 + 136) = v31[0];
    *(_OWORD *)(v5 + 152) = v15;
    v16 = v31[3];
    *(_OWORD *)(v5 + 168) = v31[2];
    *((_DWORD *)v5 + 66) = 1;
    *(_QWORD *)v5 = &off_250AF2A80;
    *(_OWORD *)(v5 + 184) = v16;
    if (!sub_2394AEBA4((float64x2_t *)(v5 + 8), 0.0001))
    {
      v17 = (unsigned int *)(v5 + 264);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (v18 == 1)
        (*(void (**)(char *))(*(_QWORD *)v5 + 8))(v5);
      return 4294967294;
    }
LABEL_8:
    result = 0;
    *a3 = v5;
    return result;
  }
  if (sub_2394AEBA4((float64x2_t *)8, 0.0001))
    goto LABEL_8;
  return 4294967294;
}

uint64_t CPGBoundingBoxCreateOriented(__int128 *a1, float64x2_t *a2, float64x2_t *a3, char **a4)
{
  char *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t result;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  __int128 v17;
  __int128 v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  __int128 v24;
  _OWORD v25[8];

  v17 = *a1;
  v18 = a1[1];
  v22 = *a3;
  v23 = a3[1];
  v19 = a2[1];
  v20 = a2[3];
  v15 = a2[2];
  v16 = *a2;
  v21 = a2[5];
  v14 = a2[4];
  v5 = (char *)operator new(0x110uLL, MEMORY[0x24BEDB6B8]);
  v6 = v5;
  if (v5)
  {
    *((_QWORD *)&v24 + 1) = 0x3FF0000000000000;
    *(_QWORD *)&v24 = v18;
    *(_OWORD *)(v5 + 56) = COERCE_UNSIGNED_INT64(vmuld_lane_f64(v20.f64[0], v22, 1));
    *(float64x2_t *)(v5 + 40) = vmulq_laneq_f64(v15, v22, 1);
    *(_OWORD *)(v5 + 24) = COERCE_UNSIGNED_INT64(vmuld_n_f64(v19.f64[0], v22.f64[0]));
    *(float64x2_t *)(v5 + 8) = vmulq_n_f64(v16, v22.f64[0]);
    *(_OWORD *)(v5 + 120) = v24;
    *(_OWORD *)(v5 + 104) = v17;
    *(_OWORD *)(v5 + 88) = COERCE_UNSIGNED_INT64(vmuld_n_f64(v21.f64[0], v23.f64[0]));
    *(float64x2_t *)(v5 + 72) = vmulq_n_f64(v14, v23.f64[0]);
    sub_239A22BE8(v25);
    v7 = v25[5];
    *(_OWORD *)(v6 + 200) = v25[4];
    *(_OWORD *)(v6 + 216) = v7;
    v8 = v25[7];
    *(_OWORD *)(v6 + 232) = v25[6];
    *(_OWORD *)(v6 + 248) = v8;
    v9 = v25[1];
    *(_OWORD *)(v6 + 136) = v25[0];
    *(_OWORD *)(v6 + 152) = v9;
    v10 = v25[3];
    *(_OWORD *)(v6 + 168) = v25[2];
    *((_DWORD *)v6 + 66) = 1;
    *(_QWORD *)v6 = &off_250AF2A80;
    *(_OWORD *)(v6 + 184) = v10;
    if (!sub_2394AEBA4((float64x2_t *)(v6 + 8), 0.0001))
    {
      v11 = (unsigned int *)(v6 + 264);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (v12 == 1)
        (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
      return 4294967294;
    }
LABEL_8:
    result = 0;
    *a4 = v6;
    return result;
  }
  if (sub_2394AEBA4((float64x2_t *)8, 0.0001))
    goto LABEL_8;
  return 4294967294;
}

uint64_t CPGBoundingBoxCreateFromTransform(_OWORD *a1, char **a2)
{
  char *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t result;
  unsigned int *v26;
  unsigned int v27;
  float64x2_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int64x2_t v33;
  int64x2_t v34;
  int8x16_t v35;
  _OWORD v36[8];
  float64x2_t v37;
  __int128 v38;
  float64x2_t v39;
  __int128 v40;
  float64x2_t v41;
  float64x2_t v42;
  __int128 v43;
  __int128 v44;

  v29 = a1[3];
  v30 = a1[1];
  v34 = *((int64x2_t *)a1 + 2);
  v35 = *(int8x16_t *)a1;
  v28 = *((float64x2_t *)a1 + 5);
  v32 = a1[7];
  v33 = *((int64x2_t *)a1 + 4);
  v31 = a1[6];
  v3 = (char *)operator new(0x110uLL, MEMORY[0x24BEDB6B8]);
  if (v3)
  {
    *(_QWORD *)&v7.f64[0] = v34.i64[0];
    *(_QWORD *)&v6.f64[0] = v35.i64[0];
    v37 = (float64x2_t)v35;
    v38 = v30;
    v39 = (float64x2_t)v34;
    v40 = v29;
    *(_QWORD *)&v8.f64[0] = v33.i64[0];
    v41 = (float64x2_t)v33;
    v42 = v28;
    *(_QWORD *)&v4.f64[0] = v30;
    *(_QWORD *)&v5.f64[0] = v29;
    *(_QWORD *)&v9.f64[0] = vdupq_laneq_s64(v34, 1).u64[0];
    *(_QWORD *)&v9.f64[1] = v29;
    v10.f64[0] = v28.f64[0];
    *(_QWORD *)&v10.f64[1] = v33.i64[1];
    v11 = vmulq_f64(v9, v10);
    v43 = v31;
    v44 = v32;
    *(_QWORD *)&v12.f64[0] = vdupq_laneq_s64(v33, 1).u64[0];
    v12.f64[1] = v28.f64[0];
    v13 = vsubq_f64(vmulq_n_f64(v12, *(double *)v34.i64), vmulq_n_f64(v9, *(double *)v33.i64));
    *(_QWORD *)&v12.f64[0] = v30;
    *(_QWORD *)&v12.f64[1] = v35.i64[1];
    v14 = vmulq_f64(v12, v13);
    if (v14.f64[0]
       + vmuld_n_f64(*(double *)v35.i64, vsubq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1)).f64[0])
       - v14.f64[1] < 0.0)
    {
      *(_QWORD *)&v6.f64[1] = vextq_s8(v35, v35, 8uLL).u64[0];
      *(_QWORD *)&v7.f64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
      *(_QWORD *)&v8.f64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
      v37 = vnegq_f64(v6);
      *(_QWORD *)&v38 = *(_OWORD *)&vnegq_f64(v4);
      v39 = vnegq_f64(v7);
      *(_QWORD *)&v40 = *(_OWORD *)&vnegq_f64(v5);
      v41 = vnegq_f64(v8);
      *(_QWORD *)&v42.f64[0] = *(_OWORD *)&vnegq_f64(v28);
    }
    sub_239A22BE8(v36);
    v15 = v42;
    *(float64x2_t *)(v3 + 72) = v41;
    *(float64x2_t *)(v3 + 88) = v15;
    v16 = v44;
    *(_OWORD *)(v3 + 104) = v43;
    *(_OWORD *)(v3 + 120) = v16;
    v17 = v38;
    *(float64x2_t *)(v3 + 8) = v37;
    *(_OWORD *)(v3 + 24) = v17;
    v18 = v40;
    *(float64x2_t *)(v3 + 40) = v39;
    *(_OWORD *)(v3 + 56) = v18;
    v19 = v36[0];
    v20 = v36[1];
    v21 = v36[2];
    *(_OWORD *)(v3 + 184) = v36[3];
    *(_OWORD *)(v3 + 168) = v21;
    *(_OWORD *)(v3 + 152) = v20;
    *(_OWORD *)(v3 + 136) = v19;
    v22 = v36[4];
    v23 = v36[5];
    v24 = v36[6];
    *(_OWORD *)(v3 + 248) = v36[7];
    *(_OWORD *)(v3 + 232) = v24;
    *(_OWORD *)(v3 + 216) = v23;
    *(_OWORD *)(v3 + 200) = v22;
    *((_DWORD *)v3 + 66) = 1;
    *(_QWORD *)v3 = &off_250AF2A80;
  }
  if (sub_2394AEBA4((float64x2_t *)(v3 + 8), 0.0001))
  {
    result = 0;
    *a2 = v3;
  }
  else
  {
    if (v3)
    {
      v26 = (unsigned int *)(v3 + 264);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (v27 == 1)
        (*(void (**)(char *))(*(_QWORD *)v3 + 8))(v3);
    }
    return 4294967294;
  }
  return result;
}

void sub_239A4503C(void *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E310](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x239A44FD4);
}

__n128 CPGBoundingBoxCreateMutableCopy(uint64_t a1)
{
  char *v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = (char *)operator new(0x110uLL, MEMORY[0x24BEDB6B8]);
  if (v2)
  {
    *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
    v4 = *(_OWORD *)(a1 + 136);
    v5 = *(_OWORD *)(a1 + 152);
    v6 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(v2 + 184) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(v2 + 168) = v6;
    *(_OWORD *)(v2 + 152) = v5;
    *(_OWORD *)(v2 + 136) = v4;
    result = *(__n128 *)(a1 + 200);
    v7 = *(_OWORD *)(a1 + 216);
    v8 = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(v2 + 248) = *(_OWORD *)(a1 + 248);
    *(_OWORD *)(v2 + 232) = v8;
    *(_OWORD *)(v2 + 216) = v7;
    *(__n128 *)(v2 + 200) = result;
    *((_DWORD *)v2 + 66) = 1;
    *(_QWORD *)v2 = &off_250AF2A80;
  }
  return result;
}

float64_t CPGBoundingBoxGetCenter@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v57;

  v2 = *(float64x2_t *)(a1 + 24);
  v3 = *(float64x2_t *)(a1 + 8);
  v4 = *(float64x2_t *)(a1 + 56);
  v5 = *(float64x2_t *)(a1 + 40);
  v6 = *(float64x2_t *)(a1 + 88);
  v7 = *(float64x2_t *)(a1 + 72);
  v8 = *(float64x2_t *)(a1 + 120);
  v9 = *(float64x2_t *)(a1 + 104);
  __asm { FMOV            V7.2D, #-0.5 }
  v15 = vmulq_f64(v3, _Q7);
  v16 = vmlaq_f64(v15, _Q7, v5);
  v17 = vmulq_f64(v2, _Q7);
  v18 = vmlaq_f64(v17, _Q7, v4);
  v19 = vaddq_f64(v8, vmlaq_f64(v18, _Q7, v6));
  v20 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1);
  v21 = vdivq_f64(vaddq_f64(v9, vmlaq_f64(v16, _Q7, v7)), v20);
  v22 = vdivq_f64(v19, v20);
  __asm { FMOV            V18.2D, #0.5 }
  v24 = vaddq_f64(v8, vmlaq_f64(v18, _Q18, v6));
  v25 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1);
  v26 = vdivq_f64(vaddq_f64(v9, vmlaq_f64(v16, _Q18, v7)), v25);
  v27 = vdivq_f64(v24, v25);
  v28 = vmlaq_f64(v15, _Q18, v5);
  v29 = vmlaq_f64(v17, _Q18, v4);
  v30 = vaddq_f64(v8, vmlaq_f64(v29, _Q7, v6));
  v31 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v30, 1);
  v32 = vdivq_f64(vaddq_f64(v9, vmlaq_f64(v28, _Q7, v7)), v31);
  v33 = vdivq_f64(v30, v31);
  v34 = vaddq_f64(v8, vmlaq_f64(v29, _Q18, v6));
  v35 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1);
  v36 = vdivq_f64(vaddq_f64(v9, vmlaq_f64(v28, _Q18, v7)), v35);
  v37 = vdivq_f64(v34, v35);
  v38 = vmulq_f64(v3, _Q18);
  v39 = vmlaq_f64(v38, _Q7, v5);
  v40 = vmulq_f64(v2, _Q18);
  v41 = vmlaq_f64(v40, _Q7, v4);
  v42 = vaddq_f64(v8, vmlaq_f64(v41, _Q7, v6));
  v43 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1);
  v44 = vdivq_f64(vaddq_f64(v9, vmlaq_f64(v39, _Q7, v7)), v43);
  v45 = vdivq_f64(v42, v43);
  v46 = vaddq_f64(v8, vmlaq_f64(v41, _Q18, v6));
  v47 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v46, 1);
  v48 = vmlaq_f64(v38, _Q18, v5);
  v49 = vaddq_f64(v9, vmlaq_f64(v48, _Q7, v7));
  v50 = vmlaq_f64(v40, _Q18, v4);
  v51 = vaddq_f64(v8, vmlaq_f64(v50, _Q7, v6));
  v52 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v51, 1);
  v53 = vaddq_f64(v8, vmlaq_f64(v50, _Q18, v6));
  v54 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v53, 1);
  v57 = vaddq_f64(vdivq_f64(v53, v54), vaddq_f64(vdivq_f64(v51, v52), vaddq_f64(vdivq_f64(v46, v47), vaddq_f64(v45, vaddq_f64(v37, vaddq_f64(v33, vaddq_f64(v27, vaddq_f64(v22, (float64x2_t)0))))))));
  v55 = vaddq_f64(vdivq_f64(vaddq_f64(v9, vmlaq_f64(v48, _Q18, v7)), v54), vaddq_f64(vdivq_f64(v49, v52), vaddq_f64(vdivq_f64(vaddq_f64(v9, vmlaq_f64(v39, _Q18, v7)), v47), vaddq_f64(v44, vaddq_f64(v36, vaddq_f64(v32, vaddq_f64(v26, vaddq_f64(v21, (float64x2_t)0))))))));
  __asm { FMOV            V2.2D, #0.125 }
  v57.f64[0] = 0.125 * v57.f64[0];
  *a2 = vmulq_f64(v55, _Q2);
  a2[1] = v57;
  return v57.f64[0];
}

float64_t CPGBoundingBoxGetExtents@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v33;

  v2 = *(float64x2_t *)(a1 + 24);
  v3 = *(float64x2_t *)(a1 + 8);
  v4 = *(float64x2_t *)(a1 + 56);
  _Q4 = *(float64x2_t *)(a1 + 40);
  _Q5 = *(float64x2_t *)(a1 + 88);
  v7 = *(float64x2_t *)(a1 + 72);
  v8 = *(float64x2_t *)(a1 + 120);
  v9 = *(float64x2_t *)(a1 + 104);
  __asm { FMOV            V17.2D, #-0.5 }
  v15 = vmulq_f64(v3, _Q17);
  v16 = vmlaq_f64(v15, _Q17, _Q4);
  v17 = vmulq_f64(v2, _Q17);
  v18 = vmlaq_f64(v17, _Q17, v4);
  v19 = vaddq_f64(v8, vmlaq_f64(v18, _Q17, _Q5));
  v20 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1);
  v21 = vdivq_f64(vaddq_f64(v9, vmlaq_f64(v16, _Q17, v7)), v20);
  v22 = vdivq_f64(v19, v20);
  __asm { FMOV            V23.2D, #0.5 }
  v24 = vaddq_f64(v8, vmlaq_f64(v18, _Q23, _Q5));
  v25 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1);
  v26 = vdivq_f64(vaddq_f64(v9, vmlaq_f64(v16, _Q23, v7)), v25);
  v27 = vdivq_f64(v24, v25);
  v28 = vaddq_f64(v8, vmlaq_f64(vmlaq_f64(v17, _Q23, v4), _Q17, _Q5));
  v29 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v28, 1);
  v30 = vdivq_f64(vaddq_f64(v9, vmlaq_f64(vmlaq_f64(v15, _Q23, _Q4), _Q17, v7)), v29);
  v31 = vaddq_f64(v8, vmlaq_f64(vmlaq_f64(vmulq_f64(v2, _Q23), _Q17, v4), _Q17, _Q5));
  _Q3 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v31, 1);
  *(_QWORD *)&v31.f64[0] = *(_OWORD *)&vsubq_f64(v22, vdivq_f64(v31, _Q3));
  _Q4.f64[0] = vsubq_f64(v21, vdivq_f64(vaddq_f64(v9, vmlaq_f64(vmlaq_f64(vmulq_f64(v3, _Q23), _Q17, _Q4), _Q17, v7)), _Q3)).f64[1];
  __asm { FMLA            D3, D4, V2.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v31.f64[0], v31.f64[0]);
  *(_QWORD *)&v31.f64[0] = *(_OWORD *)&vsubq_f64(v22, vdivq_f64(v28, v29));
  _Q5.f64[0] = vsubq_f64(v21, v30).f64[1];
  __asm { FMLA            D4, D5, V2.D[1] }
  _Q3.f64[1] = vmlad_n_f64(_Q4.f64[0], v31.f64[0], v31.f64[0]);
  v33 = vsqrtq_f64(_Q3);
  *(_QWORD *)&v3.f64[0] = *(_OWORD *)&vsubq_f64(v22, v27);
  _Q0 = vsubq_f64(v21, v26);
  _Q4.f64[0] = _Q0.f64[1];
  __asm { FMLA            D3, D4, V0.D[1] }
  _Q0.f64[0] = sqrt(vmlad_n_f64(_Q3.f64[0], v3.f64[0], v3.f64[0]));
  *a2 = v33;
  a2[1] = _Q0;
  return _Q0.f64[0];
}

double CPGBoundingBoxGetRotationMatrix@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  double v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  double v33;
  double v34;
  double result;

  v2 = *(float64x2_t *)(a1 + 8);
  v3 = *(float64x2_t *)(a1 + 40);
  v4 = *(double *)(a1 + 88);
  v5 = *(float64x2_t *)(a1 + 72);
  v6 = *(float64x2_t *)(a1 + 24);
  v7 = *(float64x2_t *)(a1 + 56);
  _Q16 = *(float64x2_t *)(a1 + 88);
  _Q17 = *(float64x2_t *)(a1 + 120);
  _Q18 = *(float64x2_t *)(a1 + 104);
  __asm { FMOV            V19.2D, #-0.5 }
  v16 = vmulq_f64(v2, _Q19);
  v17 = vmlaq_f64(v16, _Q19, v3);
  v18 = vmulq_f64(v6, _Q19);
  v19 = vmlaq_f64(v18, _Q19, v7);
  v20 = vaddq_f64(_Q17, vmlaq_f64(v19, _Q19, _Q16));
  v21 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1);
  v22 = vdivq_f64(vaddq_f64(_Q18, vmlaq_f64(v17, _Q19, v5)), v21);
  v23 = vdivq_f64(v20, v21);
  __asm { FMOV            V26.2D, #0.5 }
  v25 = vaddq_f64(_Q17, vmlaq_f64(v19, _Q26, _Q16));
  v26 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1);
  v27 = vdivq_f64(vaddq_f64(_Q18, vmlaq_f64(v17, _Q26, v5)), v26);
  v28 = vdivq_f64(v25, v26);
  v29 = vaddq_f64(_Q17, vmlaq_f64(vmlaq_f64(v18, _Q26, v7), _Q19, _Q16));
  v30 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1);
  v31 = vaddq_f64(_Q17, vmlaq_f64(vmlaq_f64(vmulq_f64(v6, _Q26), _Q19, v7), _Q19, _Q16));
  v32 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v31, 1);
  *(_QWORD *)&v31.f64[0] = *(_OWORD *)&vsubq_f64(v23, vdivq_f64(v31, v32));
  _Q17.f64[0] = vsubq_f64(v22, vdivq_f64(vaddq_f64(_Q18, vmlaq_f64(vmlaq_f64(vmulq_f64(v2, _Q26), _Q19, v3), _Q19, v5)), v32)).f64[1];
  __asm { FMLA            D16, D17, V7.D[1] }
  v31.f64[0] = sqrt(vmlad_n_f64(_Q16.f64[0], v31.f64[0], v31.f64[0]));
  *(_QWORD *)&v32.f64[0] = *(_OWORD *)&vsubq_f64(v23, vdivq_f64(v29, v30));
  _Q18.f64[0] = vsubq_f64(v22, vdivq_f64(vaddq_f64(_Q18, vmlaq_f64(vmlaq_f64(v16, _Q26, v3), _Q19, v5)), v30)).f64[1];
  __asm { FMLA            D17, D18, V16.D[1] }
  v32.f64[0] = sqrt(vmlad_n_f64(_Q17.f64[0], v32.f64[0], v32.f64[0]));
  *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vsubq_f64(v23, v28);
  _Q19.f64[0] = vsubq_f64(v22, v27).f64[1];
  __asm { FMLA            D18, D19, V17.D[1] }
  _Q16.f64[0] = sqrt(vmlad_n_f64(_Q18.f64[0], _Q16.f64[0], _Q16.f64[0]));
  v33 = *(double *)(a1 + 24) / v31.f64[0];
  v34 = *(double *)(a1 + 56) / v32.f64[0];
  *a2 = vdivq_f64(v2, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v31.f64[0], 0));
  a2[2] = vdivq_f64(v3, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32.f64[0], 0));
  a2[4] = vdivq_f64(v5, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q16.f64[0], 0));
  a2[1].f64[0] = v33;
  result = v4 / _Q16.f64[0];
  a2[3].f64[0] = v34;
  a2[5].f64[0] = result;
  return result;
}

__n128 CPGBoundingBoxGetTransform@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 40);
  v3 = *(_OWORD *)(a1 + 72);
  v4 = *(_OWORD *)(a1 + 104);
  v5 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = v5;
  v6 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 32) = v2;
  *(_OWORD *)(a2 + 48) = v6;
  v7 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 64) = v3;
  *(_OWORD *)(a2 + 80) = v7;
  result = *(__n128 *)(a1 + 120);
  *(_OWORD *)(a2 + 96) = v4;
  *(__n128 *)(a2 + 112) = result;
  return result;
}

__CFArray *CPGBoundingBoxCopyCorners(uint64_t a1)
{
  float64x2_t v1;
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  int64x2_t v18;
  float64x2_t v19;
  int64x2_t v21;
  int64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  int64x2_t v32;
  float64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  __CFArray *Mutable;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  CFNumberRef v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  CFNumberRef v57;
  CFNumberRef v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  CFNumberRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  CFNumberRef v65;
  float64x2_t valuePtr;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;

  v1 = *(float64x2_t *)(a1 + 24);
  v2 = *(float64x2_t *)(a1 + 8);
  v3 = *(float64x2_t *)(a1 + 56);
  v4 = *(float64x2_t *)(a1 + 40);
  v5 = *(float64x2_t *)(a1 + 88);
  v6 = *(float64x2_t *)(a1 + 72);
  v7 = *(float64x2_t *)(a1 + 120);
  v8 = *(float64x2_t *)(a1 + 104);
  __asm { FMOV            V5.2D, #-0.5 }
  v14 = vmulq_f64(v2, _Q5);
  v15 = vmlaq_f64(v14, _Q5, v4);
  v16 = vmulq_f64(v1, _Q5);
  v17 = vmlaq_f64(v16, _Q5, v3);
  v18 = (int64x2_t)vaddq_f64(v7, vmlaq_f64(v17, _Q5, v5));
  v19 = vdivq_f64(vaddq_f64(v8, vmlaq_f64(v15, _Q5, v6)), (float64x2_t)vdupq_laneq_s64(v18, 1));
  __asm { FMOV            V7.2D, #0.5 }
  v21 = (int64x2_t)vaddq_f64(v8, vmlaq_f64(v15, _Q7, v6));
  v22 = (int64x2_t)vaddq_f64(v7, vmlaq_f64(v17, _Q7, v5));
  valuePtr = v19;
  v68 = vdivq_f64((float64x2_t)vzip1q_s64(v18, v21), (float64x2_t)vzip2q_s64(v18, v22));
  v23 = vmlaq_f64(v14, _Q7, v4);
  v24 = vmlaq_f64(v16, _Q7, v3);
  v25 = (int64x2_t)vaddq_f64(v7, vmlaq_f64(v24, _Q5, v5));
  v69 = vdivq_f64((float64x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v22, 8uLL), (float64x2_t)vdupq_laneq_s64(v22, 1));
  v70 = vdivq_f64(vaddq_f64(v8, vmlaq_f64(v23, _Q5, v6)), (float64x2_t)vdupq_laneq_s64(v25, 1));
  v26 = (int64x2_t)vaddq_f64(v8, vmlaq_f64(v23, _Q7, v6));
  v27 = (int64x2_t)vaddq_f64(v7, vmlaq_f64(v24, _Q7, v5));
  v71 = vdivq_f64((float64x2_t)vzip1q_s64(v25, v26), (float64x2_t)vzip2q_s64(v25, v27));
  v72 = vdivq_f64((float64x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v27, 8uLL), (float64x2_t)vdupq_laneq_s64(v27, 1));
  v28 = vmulq_f64(v2, _Q7);
  v29 = vmlaq_f64(v28, _Q5, v4);
  v30 = vmulq_f64(v1, _Q7);
  v31 = vmlaq_f64(v30, _Q5, v3);
  v32 = (int64x2_t)vaddq_f64(v7, vmlaq_f64(v31, _Q5, v5));
  v33 = vdivq_f64(vaddq_f64(v8, vmlaq_f64(v29, _Q5, v6)), (float64x2_t)vdupq_laneq_s64(v32, 1));
  v34 = (int64x2_t)vaddq_f64(v8, vmlaq_f64(v29, _Q7, v6));
  v35 = (int64x2_t)vaddq_f64(v7, vmlaq_f64(v31, _Q7, v5));
  v73 = v33;
  v74 = vdivq_f64((float64x2_t)vzip1q_s64(v32, v34), (float64x2_t)vzip2q_s64(v32, v35));
  v36 = vmlaq_f64(v28, _Q7, v4);
  v37 = vmlaq_f64(v30, _Q7, v3);
  v38 = (int64x2_t)vaddq_f64(v7, vmlaq_f64(v37, _Q5, v5));
  v75 = vdivq_f64((float64x2_t)vextq_s8((int8x16_t)v34, (int8x16_t)v35, 8uLL), (float64x2_t)vdupq_laneq_s64(v35, 1));
  v76 = vdivq_f64(vaddq_f64(v8, vmlaq_f64(v36, _Q5, v6)), (float64x2_t)vdupq_laneq_s64(v38, 1));
  v39 = (int64x2_t)vaddq_f64(v8, vmlaq_f64(v36, _Q7, v6));
  v40 = (int64x2_t)vaddq_f64(v7, vmlaq_f64(v37, _Q7, v5));
  v77 = vdivq_f64((float64x2_t)vzip1q_s64(v38, v39), (float64x2_t)vzip2q_s64(v38, v40));
  v78 = vdivq_f64((float64x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v40, 8uLL), (float64x2_t)vdupq_laneq_s64(v40, 1));
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v42 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFArrayAppendValue(Mutable, v42);
  CFRelease(v42);
  v43 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr.f64[1]);
  CFArrayAppendValue(Mutable, v43);
  CFRelease(v43);
  v44 = CFNumberCreate(0, kCFNumberDoubleType, &v68);
  CFArrayAppendValue(Mutable, v44);
  CFRelease(v44);
  v45 = CFNumberCreate(0, kCFNumberDoubleType, &v68.f64[1]);
  CFArrayAppendValue(Mutable, v45);
  CFRelease(v45);
  v46 = CFNumberCreate(0, kCFNumberDoubleType, &v69);
  CFArrayAppendValue(Mutable, v46);
  CFRelease(v46);
  v47 = CFNumberCreate(0, kCFNumberDoubleType, &v69.f64[1]);
  CFArrayAppendValue(Mutable, v47);
  CFRelease(v47);
  v48 = CFNumberCreate(0, kCFNumberDoubleType, &v70);
  CFArrayAppendValue(Mutable, v48);
  CFRelease(v48);
  v49 = CFNumberCreate(0, kCFNumberDoubleType, &v70.f64[1]);
  CFArrayAppendValue(Mutable, v49);
  CFRelease(v49);
  v50 = CFNumberCreate(0, kCFNumberDoubleType, &v71);
  CFArrayAppendValue(Mutable, v50);
  CFRelease(v50);
  v51 = CFNumberCreate(0, kCFNumberDoubleType, &v71.f64[1]);
  CFArrayAppendValue(Mutable, v51);
  CFRelease(v51);
  v52 = CFNumberCreate(0, kCFNumberDoubleType, &v72);
  CFArrayAppendValue(Mutable, v52);
  CFRelease(v52);
  v53 = CFNumberCreate(0, kCFNumberDoubleType, &v72.f64[1]);
  CFArrayAppendValue(Mutable, v53);
  CFRelease(v53);
  v54 = CFNumberCreate(0, kCFNumberDoubleType, &v73);
  CFArrayAppendValue(Mutable, v54);
  CFRelease(v54);
  v55 = CFNumberCreate(0, kCFNumberDoubleType, &v73.f64[1]);
  CFArrayAppendValue(Mutable, v55);
  CFRelease(v55);
  v56 = CFNumberCreate(0, kCFNumberDoubleType, &v74);
  CFArrayAppendValue(Mutable, v56);
  CFRelease(v56);
  v57 = CFNumberCreate(0, kCFNumberDoubleType, &v74.f64[1]);
  CFArrayAppendValue(Mutable, v57);
  CFRelease(v57);
  v58 = CFNumberCreate(0, kCFNumberDoubleType, &v75);
  CFArrayAppendValue(Mutable, v58);
  CFRelease(v58);
  v59 = CFNumberCreate(0, kCFNumberDoubleType, &v75.f64[1]);
  CFArrayAppendValue(Mutable, v59);
  CFRelease(v59);
  v60 = CFNumberCreate(0, kCFNumberDoubleType, &v76);
  CFArrayAppendValue(Mutable, v60);
  CFRelease(v60);
  v61 = CFNumberCreate(0, kCFNumberDoubleType, &v76.f64[1]);
  CFArrayAppendValue(Mutable, v61);
  CFRelease(v61);
  v62 = CFNumberCreate(0, kCFNumberDoubleType, &v77);
  CFArrayAppendValue(Mutable, v62);
  CFRelease(v62);
  v63 = CFNumberCreate(0, kCFNumberDoubleType, &v77.f64[1]);
  CFArrayAppendValue(Mutable, v63);
  CFRelease(v63);
  v64 = CFNumberCreate(0, kCFNumberDoubleType, &v78);
  CFArrayAppendValue(Mutable, v64);
  CFRelease(v64);
  v65 = CFNumberCreate(0, kCFNumberDoubleType, &v78.f64[1]);
  CFArrayAppendValue(Mutable, v65);
  CFRelease(v65);
  return Mutable;
}

uint64_t CPGBoundingBoxGetMinBounds@<X0>(uint64_t result@<X0>, int8x16_t *a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  int8x16_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  int8x16_t v76;

  v2 = *(float64x2_t *)(result + 24);
  v3 = *(float64x2_t *)(result + 8);
  v4 = *(float64x2_t *)(result + 56);
  v5 = *(float64x2_t *)(result + 40);
  v6 = *(float64x2_t *)(result + 88);
  v7 = *(float64x2_t *)(result + 72);
  v8 = *(float64x2_t *)(result + 120);
  v9 = *(float64x2_t *)(result + 104);
  __asm { FMOV            V18.2D, #-0.5 }
  v15 = vmulq_f64(v3, _Q18);
  v16 = vmlaq_f64(v15, _Q18, v5);
  v17 = vaddq_f64(v9, vmlaq_f64(v16, _Q18, v7));
  v18 = vmulq_f64(v2, _Q18);
  v19 = vmlaq_f64(v18, _Q18, v4);
  v20 = vaddq_f64(v8, vmlaq_f64(v19, _Q18, v6));
  v21 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1);
  __asm { FMOV            V23.2D, #0.5 }
  v23 = vaddq_f64(v9, vmlaq_f64(v16, _Q23, v7));
  v24 = vaddq_f64(v8, vmlaq_f64(v19, _Q23, v6));
  v25 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1);
  v26 = vdivq_f64(v24, v25).f64[0];
  v27 = vmlaq_f64(v15, _Q23, v5);
  v28 = vmlaq_f64(v18, _Q23, v4);
  v29 = vaddq_f64(v8, vmlaq_f64(v28, _Q18, v6));
  v30 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1);
  v31 = vdivq_f64(vaddq_f64(v9, vmlaq_f64(v27, _Q18, v7)), v30);
  *(_QWORD *)&v32 = *(_OWORD *)&vdivq_f64(v29, v30);
  v33 = vaddq_f64(v9, vmlaq_f64(v27, _Q23, v7));
  v34 = vaddq_f64(v8, vmlaq_f64(v28, _Q23, v6));
  v35 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1);
  *(_QWORD *)&v36 = *(_OWORD *)&vdivq_f64(v34, v35);
  v37 = vmulq_f64(v3, _Q23);
  v38 = vmlaq_f64(v37, _Q18, v5);
  v39 = vaddq_f64(v9, vmlaq_f64(v38, _Q18, v7));
  v40 = vmulq_f64(v2, _Q23);
  v41 = vmlaq_f64(v40, _Q18, v4);
  v42 = vaddq_f64(v8, vmlaq_f64(v41, _Q18, v6));
  v43 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1);
  *(_QWORD *)&v44 = *(_OWORD *)&vdivq_f64(v42, v43);
  v45 = vaddq_f64(v9, vmlaq_f64(v38, _Q23, v7));
  v46 = vaddq_f64(v8, vmlaq_f64(v41, _Q23, v6));
  v47 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v46, 1);
  *(_QWORD *)&v48 = *(_OWORD *)&vdivq_f64(v46, v47);
  v49 = vmlaq_f64(v37, _Q23, v5);
  v50 = vaddq_f64(v9, vmlaq_f64(v49, _Q18, v7));
  v51 = vmlaq_f64(v40, _Q23, v4);
  v52 = vaddq_f64(v8, vmlaq_f64(v51, _Q18, v6));
  v53 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1);
  *(_QWORD *)&v54 = *(_OWORD *)&vdivq_f64(v52, v53);
  v55 = vaddq_f64(v9, vmlaq_f64(v49, _Q23, v7));
  v56 = vaddq_f64(v8, vmlaq_f64(v51, _Q23, v6));
  v57 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v56, 1);
  v58 = vdivq_f64(v56, v57);
  v59 = fmin(vdivq_f64(v20, v21).f64[0], 1.79769313e308);
  v60 = vdivq_f64(v17, v21);
  v61 = vdivq_f64(v23, v25);
  v62 = vminnmq_f64(v60, (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL));
  v63 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v62, v61), (int8x16_t)v61, (int8x16_t)v62);
  if (v26 >= v59)
    v64 = v59;
  else
    v64 = v26;
  v65 = (int8x16_t)vcgtq_f64(v63, v31);
  if (v32 < v64)
    v64 = v32;
  if (v36 < v64)
    v64 = v36;
  if (v44 < v64)
    v64 = v44;
  if (v48 < v64)
    v64 = v48;
  if (v54 < v64)
    v64 = v54;
  v66 = vdivq_f64(v33, v35);
  v67 = vdivq_f64(v39, v43);
  v68 = vdivq_f64(v45, v47);
  v69 = vdivq_f64(v50, v53);
  v70 = vdivq_f64(v55, v57);
  v71 = (float64x2_t)vbslq_s8(v65, (int8x16_t)v31, (int8x16_t)v63);
  v72 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v71, v66), (int8x16_t)v66, (int8x16_t)v71);
  v73 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v72, v67), (int8x16_t)v67, (int8x16_t)v72);
  v74 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v73, v68), (int8x16_t)v68, (int8x16_t)v73);
  v75 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v74, v69), (int8x16_t)v69, (int8x16_t)v74);
  v76 = vbslq_s8((int8x16_t)vcgtq_f64(v75, v70), (int8x16_t)v70, (int8x16_t)v75);
  if (v58.f64[0] >= v64)
    v58.f64[0] = v64;
  *a2 = v76;
  a2[1] = (int8x16_t)v58;
  return result;
}

uint64_t CPGBoundingBoxGetMaxBounds@<X0>(uint64_t result@<X0>, int8x16_t *a2@<X8>)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  int8x16_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  int8x16_t v76;

  v2 = *(float64x2_t *)(result + 24);
  v3 = *(float64x2_t *)(result + 8);
  v4 = *(float64x2_t *)(result + 56);
  v5 = *(float64x2_t *)(result + 40);
  v6 = *(float64x2_t *)(result + 88);
  v7 = *(float64x2_t *)(result + 72);
  v8 = *(float64x2_t *)(result + 120);
  v9 = *(float64x2_t *)(result + 104);
  __asm { FMOV            V18.2D, #-0.5 }
  v15 = vmulq_f64(v3, _Q18);
  v16 = vmlaq_f64(v15, _Q18, v5);
  v17 = vaddq_f64(v9, vmlaq_f64(v16, _Q18, v7));
  v18 = vmulq_f64(v2, _Q18);
  v19 = vmlaq_f64(v18, _Q18, v4);
  v20 = vaddq_f64(v8, vmlaq_f64(v19, _Q18, v6));
  v21 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1);
  __asm { FMOV            V23.2D, #0.5 }
  v23 = vaddq_f64(v9, vmlaq_f64(v16, _Q23, v7));
  v24 = vaddq_f64(v8, vmlaq_f64(v19, _Q23, v6));
  v25 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1);
  v26 = vdivq_f64(v24, v25).f64[0];
  v27 = vmlaq_f64(v15, _Q23, v5);
  v28 = vmlaq_f64(v18, _Q23, v4);
  v29 = vaddq_f64(v8, vmlaq_f64(v28, _Q18, v6));
  v30 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1);
  v31 = vdivq_f64(vaddq_f64(v9, vmlaq_f64(v27, _Q18, v7)), v30);
  *(_QWORD *)&v32 = *(_OWORD *)&vdivq_f64(v29, v30);
  v33 = vaddq_f64(v9, vmlaq_f64(v27, _Q23, v7));
  v34 = vaddq_f64(v8, vmlaq_f64(v28, _Q23, v6));
  v35 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1);
  *(_QWORD *)&v36 = *(_OWORD *)&vdivq_f64(v34, v35);
  v37 = vmulq_f64(v3, _Q23);
  v38 = vmlaq_f64(v37, _Q18, v5);
  v39 = vaddq_f64(v9, vmlaq_f64(v38, _Q18, v7));
  v40 = vmulq_f64(v2, _Q23);
  v41 = vmlaq_f64(v40, _Q18, v4);
  v42 = vaddq_f64(v8, vmlaq_f64(v41, _Q18, v6));
  v43 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1);
  *(_QWORD *)&v44 = *(_OWORD *)&vdivq_f64(v42, v43);
  v45 = vaddq_f64(v9, vmlaq_f64(v38, _Q23, v7));
  v46 = vaddq_f64(v8, vmlaq_f64(v41, _Q23, v6));
  v47 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v46, 1);
  *(_QWORD *)&v48 = *(_OWORD *)&vdivq_f64(v46, v47);
  v49 = vmlaq_f64(v37, _Q23, v5);
  v50 = vaddq_f64(v9, vmlaq_f64(v49, _Q18, v7));
  v51 = vmlaq_f64(v40, _Q23, v4);
  v52 = vaddq_f64(v8, vmlaq_f64(v51, _Q18, v6));
  v53 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1);
  *(_QWORD *)&v54 = *(_OWORD *)&vdivq_f64(v52, v53);
  v55 = vaddq_f64(v9, vmlaq_f64(v49, _Q23, v7));
  v56 = vaddq_f64(v8, vmlaq_f64(v51, _Q23, v6));
  v57 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v56, 1);
  v58 = vdivq_f64(v56, v57);
  v59 = fmax(vdivq_f64(v20, v21).f64[0], -1.79769313e308);
  v60 = vdivq_f64(v17, v21);
  v61 = vdivq_f64(v23, v25);
  v62 = vmaxnmq_f64(v60, (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL));
  v63 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v61, v62), (int8x16_t)v61, (int8x16_t)v62);
  if (v59 >= v26)
    v64 = v59;
  else
    v64 = v26;
  v65 = (int8x16_t)vcgtq_f64(v31, v63);
  if (v64 < v32)
    v64 = v32;
  if (v64 < v36)
    v64 = v36;
  if (v64 < v44)
    v64 = v44;
  if (v64 < v48)
    v64 = v48;
  if (v64 < v54)
    v64 = v54;
  v66 = vdivq_f64(v33, v35);
  v67 = vdivq_f64(v39, v43);
  v68 = vdivq_f64(v45, v47);
  v69 = vdivq_f64(v50, v53);
  v70 = vdivq_f64(v55, v57);
  v71 = (float64x2_t)vbslq_s8(v65, (int8x16_t)v31, (int8x16_t)v63);
  v72 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v66, v71), (int8x16_t)v66, (int8x16_t)v71);
  v73 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v67, v72), (int8x16_t)v67, (int8x16_t)v72);
  v74 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v68, v73), (int8x16_t)v68, (int8x16_t)v73);
  v75 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v69, v74), (int8x16_t)v69, (int8x16_t)v74);
  v76 = vbslq_s8((int8x16_t)vcgtq_f64(v70, v75), (int8x16_t)v70, (int8x16_t)v75);
  if (v64 >= v58.f64[0])
    v58.f64[0] = v64;
  *a2 = v76;
  a2[1] = (int8x16_t)v58;
  return result;
}

BOOL CPGBoundingBoxContainsPoint(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  float64x2_t v3;
  double v7;

  v2 = *(_OWORD *)(a2 + 16);
  v3 = vaddq_f64(*(float64x2_t *)(a1 + 232), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 136), *(double *)a2), *(float64x2_t *)(a1 + 168), *(float64x2_t *)a2, 1), *(float64x2_t *)(a1 + 200), *(double *)&v2));
  if (v3.f64[0] < -0.5 || v3.f64[0] > 0.5)
    return 0;
  if (v3.f64[1] < -0.5 || v3.f64[1] > 0.5)
    return 0;
  v7 = vaddq_f64(*(float64x2_t *)(a1 + 248), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 152), *(double *)a2), *(float64x2_t *)(a1 + 184), *(float64x2_t *)a2, 1), *(float64x2_t *)(a1 + 216), *(double *)&v2)).f64[0];
  return v7 >= -0.5 && v7 <= 0.5;
}

float64_t CPGBoundingBoxTransformBy(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v3;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int64x2_t v15;
  float64x2_t v16;
  double v17;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v22;
  float64x2_t v25;
  float64x2_t v28;
  int64x2_t v30;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  _OWORD v57[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  v55 = a2[1];
  v56 = *a2;
  v53 = a2[3];
  v54 = a2[2];
  v50 = a2[7];
  v51 = a2[5];
  v49 = a2[6];
  v3 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a2, (int64x2_t)v54);
  _Q2 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, (int64x2_t)v54);
  _Q3 = (float64x2_t)vzip1q_s64((int64x2_t)v55, (int64x2_t)v53);
  v6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v3, a2->f64[0]), _Q2, *a2, 1), _Q3, v55.f64[0]);
  v7 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v3, v54.f64[0]), _Q2, v54, 1), _Q3, v53.f64[0]);
  v52 = a2[4];
  _Q3.f64[0] = v52.f64[1];
  __asm { FMLA            D2, D3, V16.D[1] }
  v12.f64[0] = 1.0 / sqrt(cbrt(vmlad_n_f64(_Q2.f64[0], v51.f64[0], v51.f64[0]) * vmulq_laneq_f64(v6, v7, 1).f64[0]));
  v13 = vmulq_f64(v55, v12);
  v14 = vmulq_n_f64(v56, v12.f64[0]);
  v15 = (int64x2_t)vmulq_f64(v53, v12);
  v16 = vmulq_n_f64(v54, v12.f64[0]);
  *(_QWORD *)&v17 = *(_OWORD *)&vmulq_f64(v51, v12);
  _Q3 = vmulq_n_f64(v52, v12.f64[0]);
  v19 = (float64x2_t)vzip1q_s64((int64x2_t)v14, (int64x2_t)v16);
  v20 = (float64x2_t)vzip2q_s64((int64x2_t)v14, (int64x2_t)v16);
  _Q17 = (float64x2_t)vzip1q_s64((int64x2_t)v13, v15);
  v22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v14.f64[0]), v20, v14, 1), _Q17, v13.f64[0]);
  _Q18 = (int64x2_t)vmulq_f64(_Q3, v14);
  _D19 = v14.f64[1];
  __asm { FMLA            D18, D19, V3.D[1] }
  *(double *)_Q18.i64 = vmlad_n_f64(*(double *)_Q18.i64, v13.f64[0], v17);
  v25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v16.f64[0]), v20, v16, 1), _Q17, *(double *)v15.i64);
  _Q20 = (int8x16_t)vmulq_f64(_Q3, v16);
  _D21 = v16.f64[1];
  __asm { FMLA            D20, D21, V3.D[1] }
  *(double *)_Q20.i64 = vmlad_n_f64(*(double *)_Q20.i64, *(double *)v15.i64, v17);
  v28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, _Q3.f64[0]), v20, _Q3, 1), _Q17, v17);
  _Q16 = vmulq_f64(_Q3, _Q3);
  _Q17.f64[0] = _Q3.f64[1];
  __asm { FMLA            D16, D17, V3.D[1] }
  _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v17, v17);
  v30 = (int64x2_t)vaddq_f64(v25, (float64x2_t)xmmword_239EC6830);
  __asm { FMOV            V19.2D, #-1.0 }
  *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q16, _Q19));
  _Q16.f64[1] = NAN;
  if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v22, (float64x2_t)xmmword_239EC6820)), _Q16), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v30, _Q20, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q18, v30)), vabsq_f64(v28)))) <= 0.0001)
  {
    *(_QWORD *)&v32.f64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
    *(_QWORD *)&v33.f64[0] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
    *(_QWORD *)&v32.f64[1] = v15.i64[0];
    v34.f64[0] = v17;
    v34.f64[1] = v33.f64[0];
    v35 = vmulq_f64(v32, v34);
    v33.f64[1] = v17;
    *(_QWORD *)&v13.f64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
    v13 = vmulq_f64(v13, vsubq_f64(vmulq_n_f64(v33, v16.f64[0]), vmulq_n_f64(v32, _Q3.f64[0])));
    v13.f64[0] = fabs(v13.f64[0]+ v14.f64[0] * vsubq_f64(v35, (float64x2_t)vdupq_laneq_s64((int64x2_t)v35, 1)).f64[0]- v13.f64[1]+ -1.0);
    if (v13.f64[0] <= 0.0001)
    {
      v13.f64[0] = v55.f64[1];
      if (v55.f64[1] == 0.0)
        goto LABEL_7;
      if (v55.f64[1] < 0.0)
        v13.f64[0] = 0.0 - v55.f64[1];
      if (v13.f64[0] <= 0.0001)
      {
LABEL_7:
        v13.f64[0] = v53.f64[1];
        if (v53.f64[1] == 0.0)
          goto LABEL_11;
        if (v53.f64[1] < 0.0)
          v13.f64[0] = 0.0 - v53.f64[1];
        if (v13.f64[0] <= 0.0001)
        {
LABEL_11:
          v13.f64[0] = v51.f64[1];
          if (v51.f64[1] == 0.0)
            goto LABEL_19;
          if (v51.f64[1] < 0.0)
            v13.f64[0] = 0.0 - v51.f64[1];
          if (v13.f64[0] <= 0.0001)
          {
LABEL_19:
            if (v50.f64[1] == 1.0
              || (v50.f64[1] >= 1.0 ? (v13.f64[0] = v50.f64[1] + -1.0) : (v13.f64[0] = 1.0 - v50.f64[1]),
                  v13.f64[0] <= 0.0001))
            {
              v36 = *(float64x2_t *)(a1 + 24);
              v37 = *(float64x2_t *)(a1 + 8);
              v38 = *(float64x2_t *)(a1 + 56);
              v39 = *(float64x2_t *)(a1 + 40);
              v40 = *(float64x2_t *)(a1 + 88);
              v41 = *(float64x2_t *)(a1 + 72);
              v42 = *(float64x2_t *)(a1 + 120);
              v43 = *(float64x2_t *)(a1 + 104);
              *(float64x2_t *)(a1 + 56) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, v39.f64[0]), v53, v39, 1), v51, v38.f64[0]), v50, v38, 1);
              *(float64x2_t *)(a1 + 40) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v56, v39.f64[0]), v54, v39, 1), v52, v38.f64[0]), v49, v38, 1);
              *(float64x2_t *)(a1 + 24) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, v37.f64[0]), v53, v37, 1), v51, v36.f64[0]), v50, v36, 1);
              *(float64x2_t *)(a1 + 8) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v56, v37.f64[0]), v54, v37, 1), v52, v36.f64[0]), v49, v36, 1);
              *(float64x2_t *)(a1 + 120) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, v43.f64[0]), v53, v43, 1), v51, v42.f64[0]), v50, v42, 1);
              *(float64x2_t *)(a1 + 104) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v56, v43.f64[0]), v54, v43, 1), v52, v42.f64[0]), v49, v42, 1);
              *(float64x2_t *)(a1 + 88) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, v41.f64[0]), v53, v41, 1), v51, v40.f64[0]), v50, v40, 1);
              *(float64x2_t *)(a1 + 72) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v56, v41.f64[0]), v54, v41, 1), v52, v40.f64[0]), v49, v40, 1);
              sub_239A22BE8(v57);
              v44 = v61;
              *(_OWORD *)(a1 + 200) = v60;
              *(_OWORD *)(a1 + 216) = v44;
              v45 = v63;
              *(_OWORD *)(a1 + 232) = v62;
              *(_OWORD *)(a1 + 248) = v45;
              v46 = v57[1];
              *(_OWORD *)(a1 + 136) = v57[0];
              *(_OWORD *)(a1 + 152) = v46;
              *(_QWORD *)&v13.f64[0] = v58;
              v47 = v59;
              *(_OWORD *)(a1 + 168) = v58;
              *(_OWORD *)(a1 + 184) = v47;
            }
          }
        }
      }
    }
  }
  return v13.f64[0];
}

void sub_239A46450()
{
  JUMPOUT(0x23B83E31CLL);
}

double *sub_239A46464(uint64_t a1, double a2, __n128 a3, double a4, __n128 a5, double a6, __n128 a7)
{
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  double *result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[96];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  a3.n128_u64[0] = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v23 = *(_QWORD *)a1;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  *(_QWORD *)&v23[40] = 0;
  memset(&v23[8], 0, 24);
  *(_QWORD *)&v23[64] = 0x3FF0000000000000;
  *(_QWORD *)&v23[32] = a3.n128_u64[0];
  *(_OWORD *)&v23[48] = *(_OWORD *)(a1 + 16);
  sub_23962EBF8((uint64_t)v23, (uint64_t)&v40, a3, a5, a7);
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  memset(&v23[40], 0, 56);
  *(_OWORD *)&v23[24] = 0u;
  *((_QWORD *)&v25 + 1) = 0x3FF0000000000000;
  v9 = *(_OWORD *)(a1 + 64);
  v10 = *(_OWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = *(_OWORD *)(a1 + 128);
  v13 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)&v23[16] = *(_QWORD *)(a1 + 80);
  *(_OWORD *)v23 = v9;
  *(_QWORD *)&v23[48] = v11;
  *(_OWORD *)&v23[32] = v10;
  *(_QWORD *)&v23[80] = v13;
  *(_OWORD *)&v23[64] = v12;
  v14 = *(_OWORD *)(a1 + 160);
  *(_QWORD *)&v25 = *(_QWORD *)(a1 + 176);
  v24 = v14;
  sub_23962EC30((uint64_t)v23, &v32);
  *(_OWORD *)&v23[32] = v42;
  *(_OWORD *)&v23[48] = v43;
  *(_OWORD *)&v23[64] = v44;
  *(_OWORD *)&v23[80] = v45;
  *(_OWORD *)v23 = v40;
  *(_OWORD *)&v23[16] = v41;
  v28 = v36;
  v29 = v37;
  v30 = v38;
  v31 = v39;
  v24 = v32;
  v25 = v33;
  v26 = v34;
  v27 = v35;
  result = (double *)operator new(0x110uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    v16 = v29;
    *((_OWORD *)result + 11) = v28;
    *((_OWORD *)result + 12) = v16;
    v17 = v31;
    *((_OWORD *)result + 13) = v30;
    *((_OWORD *)result + 14) = v17;
    v18 = v25;
    *((_OWORD *)result + 7) = v24;
    *((_OWORD *)result + 8) = v18;
    v19 = v27;
    *((_OWORD *)result + 9) = v26;
    *((_OWORD *)result + 10) = v19;
    v20 = *(_OWORD *)&v23[48];
    *((_OWORD *)result + 3) = *(_OWORD *)&v23[32];
    *((_OWORD *)result + 4) = v20;
    v21 = *(_OWORD *)&v23[80];
    *((_OWORD *)result + 5) = *(_OWORD *)&v23[64];
    *((_OWORD *)result + 6) = v21;
    v22 = *(_OWORD *)&v23[16];
    *((_OWORD *)result + 1) = *(_OWORD *)v23;
    *((_OWORD *)result + 2) = v22;
    result[30] = a2;
    *((_DWORD *)result + 64) = 1;
    *(_QWORD *)result = &off_250AF21B0;
  }
  return result;
}

uint64_t CPGCameraRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 256);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGCameraRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 256);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGCameraCreateWithIntrinsicsExtrinsicsResolution(__int128 *a1, __int128 *a2, double **a3, double a4)
{
  double *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v10 = a1[2];
  v11 = a1[3];
  v12 = a1[4];
  v13 = a1[5];
  v8 = *a1;
  v9 = a1[1];
  v20 = a2[6];
  v21 = a2[7];
  v18 = a2[4];
  v19 = a2[5];
  v16 = a2[2];
  v17 = a2[3];
  v14 = *a2;
  v15 = a2[1];
  v6 = (double *)operator new(0x110uLL, MEMORY[0x24BEDB6B8]);
  if (v6)
  {
    *((_OWORD *)v6 + 11) = v18;
    *((_OWORD *)v6 + 12) = v19;
    *((_OWORD *)v6 + 13) = v20;
    *((_OWORD *)v6 + 14) = v21;
    *((_OWORD *)v6 + 7) = v14;
    *((_OWORD *)v6 + 8) = v15;
    *((_OWORD *)v6 + 9) = v16;
    *((_OWORD *)v6 + 10) = v17;
    *((_OWORD *)v6 + 3) = v10;
    *((_OWORD *)v6 + 4) = v11;
    *((_OWORD *)v6 + 5) = v12;
    *((_OWORD *)v6 + 6) = v13;
    *((_OWORD *)v6 + 1) = v8;
    *((_OWORD *)v6 + 2) = v9;
    v6[30] = a4;
    *((_DWORD *)v6 + 64) = 1;
    *(_QWORD *)v6 = &off_250AF21B0;
  }
  *a3 = v6;
  return 0;
}

__n128 CPGCameraGetIntrinsics@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 48) = v2;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 80) = v3;
  result = *(__n128 *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v5;
  return result;
}

__n128 CPGCameraGetExtrinsics@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 80) = v2;
  v3 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a2 + 112) = v3;
  v4 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(a1 + 144);
  v6 = *(_OWORD *)(a1 + 160);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

double CPGCameraGetTransform@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double result;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  _OWORD v23[8];
  _BYTE v24[128];

  sub_23962EC90(a1 + 112, (uint64_t)v24);
  sub_239A22BE8(&v15);
  v3 = vmulq_f64(v15, (float64x2_t)0);
  v4 = vmulq_f64(v16, (float64x2_t)0);
  __asm { FMOV            V19.2D, #-1.0 }
  v10 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v3, _Q19, v17), (float64x2_t)0, v19), (float64x2_t)0, v21);
  v11 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v4, _Q19, v18), (float64x2_t)0, v20), (float64x2_t)0, v22);
  v12 = vmlaq_f64(v3, (float64x2_t)0, v17);
  v13 = vmlaq_f64(v4, (float64x2_t)0, v18);
  v23[0] = vmlaq_f64(vmlaq_f64(vmlaq_f64(v15, (float64x2_t)0, v17), (float64x2_t)0, v19), (float64x2_t)0, v21);
  v23[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(v16, (float64x2_t)0, v18), (float64x2_t)0, v20), (float64x2_t)0, v22);
  v23[2] = v10;
  v23[3] = v11;
  v23[4] = vmlaq_f64(vmlaq_f64(v12, _Q19, v19), (float64x2_t)0, v21);
  v23[5] = vmlaq_f64(vmlaq_f64(v13, _Q19, v20), (float64x2_t)0, v22);
  v23[6] = vaddq_f64(v21, vmlaq_f64(v12, (float64x2_t)0, v19));
  v23[7] = vaddq_f64(v22, vmlaq_f64(v13, (float64x2_t)0, v20));
  *(_QWORD *)&result = sub_23962EC30((uint64_t)v23, a2).n128_u64[0];
  return result;
}

double CPGCameraGetImageResolution(uint64_t a1)
{
  return *(double *)(a1 + 240);
}

uint64_t sub_239A46838(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_239A46868(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B83E31CLL);
}

_BYTE *CPGDepthPointCloudCreate()
{
  _BYTE *result;

  result = operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[32] = 0;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    *((_DWORD *)result + 10) = 1;
    *(_QWORD *)result = &off_250AF21D0;
    *((_QWORD *)result + 1) = 0;
  }
  return result;
}

_QWORD *CPGDepthPointCloudCreateWithSensorConfig(char a1)
{
  _QWORD *result;

  result = operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[2] = 0;
    result[3] = 0;
    *((_BYTE *)result + 32) = a1;
    *((_DWORD *)result + 10) = 1;
    *result = &off_250AF21D0;
    result[1] = 0;
  }
  return result;
}

uint64_t CPGDepthPointCloudRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 40);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGDepthPointCloudRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 40);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGDepthPointCloudAddPoint(uint64_t a1, char a2, char a3, char a4, float a5, float a6, float a7, double a8, int8x16_t a9, int32x4_t a10)
{
  uint64_t v10;
  uint64_t v11;
  float32x2_t v12;
  __int128 v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int32 v18;

  v10 = LODWORD(a8);
  v11 = HIDWORD(a8);
  v12 = (float32x2_t)vext_s8(*(int8x8_t *)a9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(a9, a9, 8uLL), 4uLL);
  *(float32x2_t *)a10.i8 = vneg_f32(v12);
  LOBYTE(v14) = a2;
  BYTE1(v14) = a4;
  BYTE2(v14) = a3;
  *(_QWORD *)((char *)&v14 + 4) = __PAIR64__(LODWORD(a5), COERCE_UNSIGNED_INT(sqrtf(vmls_lane_f32(vmla_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)a9.i8), v12, v12), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a10.i8, 1), v12, 1).f32[0])));
  *((float *)&v14 + 3) = a7;
  v15 = a6;
  v16 = v10 | (v11 << 32);
  v18 = a10.u32[1];
  v17 = vzip1q_s32((int32x4_t)a9, a10).u64[0];
  sub_239595458((void **)(a1 + 8), &v14);
  return 0;
}

unint64_t CPGDepthPointCloudGetNumberOfPoints(uint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
}

void sub_239A46A1C()
{
  JUMPOUT(0x23B83E31CLL);
}

void sub_239A46A34()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGFinalizeInputResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 16);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGFinalizeInputResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 16);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGFinalizeInputResultGetErrorCode(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 12))
    return *(unsigned int *)(a1 + 8);
  else
    return 0;
}

double CPGFinalizeInputCallbackBundleCreate()
{
  _OWORD *v0;
  double result;

  v0 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    result = 0.0;
    *v0 = 0u;
    v0[1] = 0u;
    *((_DWORD *)v0 + 6) = 1;
    *(_QWORD *)v0 = &off_250AF21F0;
  }
  return result;
}

uint64_t CPGFinalizeInputCallbackBundleRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGFinalizeInputCallbackBundleRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGFinalizeInputCallbackBundleSetCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  return 0;
}

_QWORD *sub_239A46B3C(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *a1 = &off_250AF2210;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 64;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)a1[3];
  if (v6)
  {
    v7 = v6 + 28;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = (unsigned int *)a1[4];
  if (v10)
  {
    v11 = v10 + 36;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  return a1;
}

void sub_239A46BEC(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *a1 = &off_250AF2210;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 64;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)a1[3];
  if (v6)
  {
    v7 = v6 + 28;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = (unsigned int *)a1[4];
  if (v10)
  {
    v11 = v10 + 36;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A46CAC(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *a1 = &off_250AF2210;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 64;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)a1[3];
  if (v6)
  {
    v7 = v6 + 28;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = (unsigned int *)a1[4];
  if (v10)
  {
    v11 = v10 + 36;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  return a1;
}

void sub_239A46D5C(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *a1 = &off_250AF2210;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 64;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)a1[3];
  if (v6)
  {
    v7 = v6 + 28;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = (unsigned int *)a1[4];
  if (v10)
  {
    v11 = v10 + 36;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGLocalizationUpdatesRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 40);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGLocalizationUpdatesRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 40);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGLocalizationUpdatesGetCamera(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == 1)
    return *(_QWORD *)(a1 + 16);
  else
    return 0;
}

uint64_t CPGLocalizationUpdatesGetSfmCameraTracks(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == 1)
    return *(_QWORD *)(a1 + 24);
  else
    return 0;
}

uint64_t CPGLocalizationUpdatesGetObjectTransform(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == 1)
    return *(_QWORD *)(a1 + 32);
  else
    return 0;
}

uint64_t CPGLocalizationUpdatesGetState(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 == 2)
    return 2;
  else
    return v1 == 1;
}

void sub_239A46ED4()
{
  JUMPOUT(0x23B83E31CLL);
}

double CPGMaskingOptionsCreate()
{
  _QWORD *v0;
  double result;

  v0 = operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    *(_QWORD *)&result = 0x100000002;
    v0[1] = 0x100000002;
    *v0 = &off_250AF2230;
  }
  return result;
}

uint64_t CPGMaskingOptionsRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 12);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGMaskingOptionsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 12);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGMaskingOptionsSetMaskingType(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 > 2)
    return 4294967294;
  result = 0;
  *(_DWORD *)(a1 + 8) = a2;
  return result;
}

uint64_t sub_239A46F8C(uint64_t a1)
{
  sub_23979BCF4((_QWORD *)(a1 + 8));
  return a1;
}

void sub_239A46FB4(uint64_t a1)
{
  sub_23979BCF4((_QWORD *)(a1 + 8));
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGObjectSegmentationResultRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGObjectSegmentationResultRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGObjectSegmentationResultGetMaskBuffer(uint64_t a1)
{
  return sub_23979C580(a1 + 8);
}

uint64_t sub_239A4703C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_239A47074(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGObjectSegmentationSessionRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 16);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGObjectSegmentationSessionRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 16);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGObjectSegmentationSessionCreateWithOptions(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OpaqueVTPixelTransferSession *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t result;
  _QWORD v13[2];
  int v14;
  uint64_t v15;
  char v16;

  if (!a1)
    return 4294967294;
  v3 = (_QWORD *)operator new();
  *v3 = &off_250AF5860;
  v3[1] = 0;
  v3[2] = 0;
  v13[1] = 0;
  v16 = 1;
  v14 = 0;
  v15 = 1;
  v13[0] = 0xFFFFFFFFFFLL;
  v4 = operator new();
  sub_23957A470(v4, v13);
  v5 = v3[1];
  v3[1] = v4;
  if (v5)
  {
    v6 = sub_23956EEB4(v5);
    MEMORY[0x23B83E31C](v6, 0x10F2C40BC6AFE3ALL);
  }
  v7 = operator new();
  sub_239769348((VTPixelTransferSessionRef *)v7);
  *(_QWORD *)(v7 + 8) = 850045863;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_QWORD *)(v7 + 64) = 0;
  v8 = v3[2];
  v3[2] = v7;
  if (v8)
  {
    std::mutex::~mutex((std::mutex *)(v8 + 8));
    v9 = *(OpaqueVTPixelTransferSession **)v8;
    *(_QWORD *)v8 = 0;
    if (v9)
      sub_239769318(v8, v9);
    MEMORY[0x23B83E31C](v8, 0x1020C40AF0ADC4FLL);
  }
  v10 = operator new(0x18uLL, MEMORY[0x24BEDB6B8]);
  if (v10)
  {
    v11 = v10;
    result = 0;
    v11[4] = 1;
    *(_QWORD *)v11 = &off_250AF2250;
    *((_QWORD *)v11 + 1) = v3;
    *a2 = v11;
  }
  else
  {
    (*(void (**)(_QWORD *))(*v3 + 8))(v3);
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_239A472A8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep a11, int a12, const char *a13, int a14, const char *a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v23;
  OpaqueVTPixelTransferSession *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  MEMORY[0x23B83E31C](v18, 0x1020C40AF0ADC4FLL);
  v23 = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v17 + 16) = 0;
  if (v23)
  {
    std::mutex::~mutex((std::mutex *)(v23 + 8));
    v24 = *(OpaqueVTPixelTransferSession **)v23;
    *(_QWORD *)v23 = 0;
    if (v24)
      sub_239769318(v23, v24);
    MEMORY[0x23B83E31C](v23, 0x1020C40AF0ADC4FLL);
  }
  v25 = *v19;
  *v19 = 0;
  if (v25)
  {
    v26 = sub_23956EEB4(v25);
    MEMORY[0x23B83E31C](v26, 0x10F2C40BC6AFE3ALL);
  }
  MEMORY[0x23B83E31C](v17, 0xA1C40192E7E21);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    sub_239A4753C((_QWORD *)(v20 - 56));
    v27 = *(_QWORD *)(v20 - 56);
    if (**(int **)(v27 + 56) <= 5 && *(_BYTE *)(v27 + 72))
    {
      a9 = v20 - 56;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      a11 = std::chrono::system_clock::now().__d_.__rep_;
      a12 = 5;
      a13 = "unknown file";
      a14 = 40;
      a16 = 0;
      a17 = 0;
      a15 = "unknown function";
      sub_239A4760C((uint64_t)&a9);
      sub_239A47720((uint64_t)&a9);
LABEL_14:
      sub_239A478B4((uint64_t)&a9);
    }
  }
  else
  {
    sub_239A4753C((_QWORD *)(v20 - 56));
    v28 = *(_QWORD *)(v20 - 56);
    if (**(int **)(v28 + 56) <= 5 && *(_BYTE *)(v28 + 72))
    {
      a9 = v20 - 56;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      a11 = std::chrono::system_clock::now().__d_.__rep_;
      a12 = 5;
      a13 = "unknown file";
      a14 = 45;
      a16 = 0;
      a17 = 0;
      a15 = "unknown function";
      sub_239A47914((uint64_t)&a9);
      sub_239A47720((uint64_t)&a9);
      goto LABEL_14;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x239A47288);
}

void sub_239A474FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239A478B4((uint64_t)&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_239A4753C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25693D8B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25693D8B0))
  {
    sub_2399FF268(&v5);
    sub_23941A4FC(__p, "cv3dapi.pg");
    sub_239A03BC8(&v5, (uint64_t)__p, &qword_25693D8A8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_25693D8B0);
  }
  *a1 = qword_25693D8A8;
}

void sub_239A475D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25693D8B0);
  _Unwind_Resume(a1);
}

uint64_t sub_239A4760C(uint64_t a1)
{
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (!*(_QWORD *)(a1 + 56))
  {
    v3 = operator new();
    sub_2394988CC(v3);
    v4 = (_QWORD *)operator new();
    *v4 = &unk_250AF1978;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v3;
    *(_QWORD *)(a1 + 64) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  sub_239458500((_QWORD *)(*(_QWORD *)(a1 + 56) + 16), (uint64_t)"Unhandled exception during CPGObjectSegmentationSession creation", 64);
  return a1;
}

void sub_239A476E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_239A476FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B3C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_239A47720(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v1 = *(uint64_t **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
    {
      v4 = (_QWORD *)(*v1 + 16);
      if (*(char *)(*v1 + 39) < 0)
        v4 = (_QWORD *)*v4;
      v5 = *(_OWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 24);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_DWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(std::__shared_weak_count **)(a1 + 64);
      v22 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v23 = v4;
      v24 = v5;
      v25 = v6;
      v26 = v7;
      v27 = v8;
      v28 = v9;
      v29 = v3;
      v30 = v10;
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      if (v6 >= **(_DWORD **)(*v1 + 56))
      {
        sub_239A03B24(*v1, (uint64_t)&v23);
        v10 = v30;
      }
      if (v10)
      {
        v15 = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v22)
      {
        v17 = (unint64_t *)&v22->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v19 = *(std::__shared_weak_count **)(a1 + 64);
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
}

void sub_239A47898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_239A47A50((uint64_t)va1);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239A478B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_239A47720(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_239A47914(uint64_t a1)
{
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (!*(_QWORD *)(a1 + 56))
  {
    v3 = operator new();
    sub_2394988CC(v3);
    v4 = (_QWORD *)operator new();
    *v4 = &unk_250AF1978;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v3;
    *(_QWORD *)(a1 + 64) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  sub_239458500((_QWORD *)(*(_QWORD *)(a1 + 56) + 16), (uint64_t)"Unknown exception during CPGObjectSegmentationSession creation", 62);
  return a1;
}

void sub_239A479E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_239A47A04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B3C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_239A47A2C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A47A50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t CPGObjectSegmentationSessionProcessSample(uint64_t a1, _QWORD *a2, unsigned int **a3)
{
  _QWORD *v6;
  unsigned int *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __n128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __n128 v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  __int16 v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  __n128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __n128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __n128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  __n128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __n128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  __n128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  char v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  __n128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  __n128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  __n128 v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  __n128 v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  _QWORD *v124;
  unsigned int **v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  _QWORD v128[3];
  uint64_t (**v129)();
  __int128 v130;
  _BYTE v131[30];
  uint64_t (**v132)();
  __int128 v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  __int16 v138;
  void *__p;
  __int128 v140;
  _BYTE v141[30];
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  uint64_t (**v145)();
  _OWORD v146[3];
  unsigned int v147[6];
  uint64_t (**v148)();
  __int128 v149;
  _BYTE v150[30];
  uint64_t v151;
  uint64_t v152;

  if (!a1)
    return 4294967294;
  v6 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  v7 = (unsigned int *)v6;
  if (v6)
  {
    v6[3] = 0;
    v6[4] = 1;
    v6[1] = &off_250AE94F0;
    v6[2] = 0;
    *v6 = &off_250AF2270;
  }
  v127 = *(_QWORD *)(a1 + 8);
  if (v6)
    v8 = v6 + 1;
  else
    v8 = 0;
  v9 = (std::__shared_weak_count *)a2[5];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v13 = a2[2];
  v12 = (std::__shared_weak_count *)a2[3];
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v126 = v9;
  if (!v13)
  {
    sub_239A444D4((uint64_t)"unknown file", 47, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t))(*(_QWORD *)v13 + 24))(&v145, v13);
  v124 = v8;
  v16 = (std::__shared_weak_count *)operator new(0x30uLL);
  v16->__shared_owners_ = 0;
  v17 = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF58B8;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250AE94F0;
  v18 = (uint64_t)&v16[1];
  *(_OWORD *)&v16[1].__shared_owners_ = v146[0];
  v146[0] = 0uLL;
  sub_23979BCF4(&v145);
  sub_23979D000((uint64_t)&v16[1], &v145);
  sub_23979D0F0((uint64_t)&v145, &__p);
  v20 = __p;
  v19 = (std::__shared_weak_count *)v140;
  if ((_QWORD)v140)
  {
    v21 = (unint64_t *)(v140 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v125 = a3;
  sub_2399107E4(&v145);
  if (v20)
    LODWORD(v20) = sub_23979A918(v18) == 875704422 || sub_23979A918(v18) == 875704438;
  v145 = &off_250ADB628;
  sub_239422F30(v146);
  if ((_DWORD)v20)
  {
    v24 = *(_QWORD *)(v127 + 8);
    __p = &v16[1];
    *(_QWORD *)&v140 = v16;
    do
      v25 = __ldxr(v17);
    while (__stxr(v25 + 1, v17));
    DWORD2(v140) = 1;
    v142 = 0;
    v143 = 0;
    v26 = sub_23957B728(v24, (uint64_t)&__p, (uint64_t)&v145, 0, 0, &v142, 0.0);
    v27 = v143;
    if (v143)
    {
      v28 = (unint64_t *)&v143->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (DWORD2(v140) != -1)
      ((void (*)(uint64_t (***)(), void **))off_250B014C8[DWORD2(v140)])(&v148, &__p);
    v30 = 0;
    if ((v26 & 1) == 0)
      goto LABEL_129;
  }
  else
  {
    if (sub_23979A918(v18) == 875704422 || sub_23979A918(v18) == 875704438)
    {
      v148 = (uint64_t (**)())sub_23979C610(v18);
      __p = operator new(0xA0uLL);
      v140 = xmmword_239EC64A0;
      strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/CorePhotogrammetry/aspenbase/third-party/cpg-applecmake/src/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h:216");
      sub_23979BD68((uint64_t)&v142, (unsigned int *)&v148, 0x20u, (uint64_t)&__p, 1u);
      if (SHIBYTE(v140) < 0)
        operator delete(__p);
      if ((sub_239710484(*(_QWORD *)(v127 + 16), v18, (uint64_t)&v142) & 0xFF00000000) != 0)
      {
        sub_23979BCF4(&v142);
        v30 = 0;
LABEL_129:
        v94 = 0;
        v23 = 4294967278;
        goto LABEL_154;
      }
      v128[0] = &off_250AE94F0;
      v128[1] = v143;
      v128[2] = v144;
      if (v144)
      {
        v31 = (unint64_t *)(v144 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      sub_239785B2C((uint64_t)v128, (uint64_t)&v148);
      v129 = &off_250ADB1D0;
      v130 = v149;
      v149 = 0uLL;
      *(_OWORD *)v131 = *(_OWORD *)v150;
      *(_OWORD *)&v131[14] = *(_OWORD *)&v150[14];
      v33 = nullsub_4(v150);
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
      if (*((_QWORD *)&v149 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v34->__on_zero_shared)(v34, v33);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = nullsub_4(&v148);
      v132 = &off_250ADB210;
      v38 = v130;
      if (*((_QWORD *)&v130 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        v41 = *(_QWORD *)&v131[16];
        v42 = *(_DWORD *)&v131[24];
        v43 = *(_WORD *)&v131[28];
        do
          v44 = __ldxr(v39);
        while (__stxr(v44 + 1, v39));
      }
      else
      {
        v41 = *(_QWORD *)&v131[16];
        v42 = *(_DWORD *)&v131[24];
        v43 = *(_WORD *)&v131[28];
      }
      v133 = v38;
      v134 = *(_QWORD *)v131;
      v135 = *(_DWORD *)&v131[8];
      v136 = v41;
      v137 = v42;
      v138 = v43;
      if (*((_QWORD *)&v38 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          (*(void (**)(_QWORD, __n128))(**((_QWORD **)&v38 + 1) + 16))(*((_QWORD *)&v38 + 1), v37);
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v38 + 1));
        }
      }
      sub_2397078F8((uint64_t)&v132, 21, &__p);
      v30 = (std::__shared_weak_count *)operator new(0xA0uLL);
      v30->__shared_owners_ = 0;
      v30->__shared_weak_owners_ = 0;
      v30->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBE68;
      v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBEA0;
      v45 = v30 + 1;
      sub_239469644((uint64_t)&__p, (uint64_t)&v30[1].__shared_owners_);
      v60 = nullsub_4(&v141[8]);
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
      if (*((_QWORD *)&v140 + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v61->__on_zero_shared)(v61, v60);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      j_nullsub_4_89(&__p);
      v64 = nullsub_4(&v134);
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
      if (*((_QWORD *)&v133 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v65->__on_zero_shared)(v65, v64);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      nullsub_4(&v132);
      v68 = nullsub_4(v131);
      v69 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
      if (*((_QWORD *)&v130 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v68);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      nullsub_4(&v129);
      sub_23979BCF4(v128);
      sub_23979BCF4(&v142);
    }
    else
    {
      (**(void (***)(uint64_t (***__return_ptr)(), uint64_t))v13)(&v132, v13);
      v148 = &off_250ADB210;
      sub_23955C704((uint64_t)v132, (uint64_t)&v149);
      sub_2397078F8((uint64_t)&v148, 21, &__p);
      v30 = (std::__shared_weak_count *)operator new(0xA0uLL);
      v30->__shared_owners_ = 0;
      v30->__shared_weak_owners_ = 0;
      v30->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBE68;
      v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBEA0;
      v45 = v30 + 1;
      sub_239469644((uint64_t)&__p, (uint64_t)&v30[1].__shared_owners_);
      v46 = nullsub_4(&v141[8]);
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
      if (*((_QWORD *)&v140 + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v47->__on_zero_shared)(v47, v46);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      j_nullsub_4_89(&__p);
      v50 = nullsub_4(v150);
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
      if (*((_QWORD *)&v149 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v51->__on_zero_shared)(v51, v50);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = nullsub_4(&v148);
      v55 = (std::__shared_weak_count *)v133;
      if ((_QWORD)v133)
      {
        v56 = (unint64_t *)(v133 + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v55->__on_zero_shared)(v55, v54);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
    }
    v72 = *(_QWORD *)(v127 + 8);
    v73 = (unint64_t *)&v30->__shared_owners_;
    __p = v45;
    *(_QWORD *)&v140 = v30;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
    DWORD2(v140) = 0;
    v142 = 0;
    v143 = 0;
    v75 = sub_23957B728(v72, (uint64_t)&__p, (uint64_t)&v145, 0, 0, &v142, 0.0);
    v76 = v143;
    if (v143)
    {
      v77 = (unint64_t *)&v143->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (DWORD2(v140) != -1)
      ((void (*)(uint64_t (***)(), void **))off_250B014C8[DWORD2(v140)])(&v148, &__p);
    if ((v75 & 1) == 0)
      goto LABEL_129;
  }
  __p = operator new(0xA0uLL);
  v140 = xmmword_239EC64A0;
  strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/CorePhotogrammetry/aspenbase/third-party/cpg-applecmake/src/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h:216");
  sub_23979BD68((uint64_t)&v132, v147, 0x4C303038u, (uint64_t)&__p, 1u);
  if (SHIBYTE(v140) < 0)
    operator delete(__p);
  v129 = &off_250AE94F0;
  v130 = v133;
  if (*((_QWORD *)&v133 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  sub_239785B2C((uint64_t)&v129, (uint64_t)&__p);
  v148 = &off_250ADB1D0;
  v149 = v140;
  v140 = 0uLL;
  *(_OWORD *)v150 = *(_OWORD *)v141;
  *(_OWORD *)&v150[14] = *(_OWORD *)&v141[14];
  v81 = nullsub_4(v141);
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v82->__on_zero_shared)(v82, v81);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  nullsub_4(&__p);
  sub_23979BCF4(&v129);
  sub_2395647D4((uint64_t)&v145, &v152);
  v85 = v149;
  if (!(_QWORD)v149)
    goto LABEL_130;
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
    do
      v89 = __ldaxr(v87);
    while (__stlxr(v89 - 1, v87));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
    v90 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
    v85 = v149;
    if (*((_QWORD *)&v149 + 1))
    {
      v91 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
      do
        v93 = __ldaxr(v91);
      while (__stlxr(v93 - 1, v91));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
  }
  if (v150[29])
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v85 + 96))(&v151, v85, 1);
  else
LABEL_130:
    v151 = 0;
  __p = &off_250ADB210;
  sub_239624770(&v145, (uint64_t)&v140);
  sub_2397AA044(&__p, &v148);
  v95 = nullsub_4(v141);
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v96->__on_zero_shared)(v96, v95);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = nullsub_4(&__p);
  v100 = v151;
  v151 = 0;
  if (v100)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v100 + 8))(v100, v99);
  v101 = v152;
  v152 = 0;
  if (v101)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v101 + 8))(v101, v99);
  v102 = v133;
  if (*((_QWORD *)&v133 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  v105 = (std::__shared_weak_count *)v124[2];
  *(_OWORD *)(v124 + 1) = v102;
  if (v105)
  {
    v106 = (unint64_t *)&v105->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v105->__on_zero_shared)(v105, v99);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = nullsub_4(v150);
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v109->__on_zero_shared)(v109, v108);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  nullsub_4(&v148);
  sub_23979BCF4(&v132);
  v23 = 0;
  v94 = 1;
LABEL_154:
  sub_239416DA0((uint64_t)v146);
  v112 = nullsub_4(&v145);
  do
    v113 = __ldaxr(v17);
  while (__stlxr(v113 - 1, v17));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v112);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (v12)
  {
    v114 = (unint64_t *)&v12->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v112);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (!v30)
    goto LABEL_167;
  v116 = (unint64_t *)&v30->__shared_owners_;
  do
    v117 = __ldaxr(v116);
  while (__stlxr(v117 - 1, v116));
  if (!v117)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v30->__on_zero_shared)(v30, v112);
    std::__shared_weak_count::__release_weak(v30);
    if (!v126)
      goto LABEL_171;
  }
  else
  {
LABEL_167:
    if (!v126)
      goto LABEL_171;
  }
  v118 = (unint64_t *)&v126->__shared_owners_;
  do
    v119 = __ldaxr(v118);
  while (__stlxr(v119 - 1, v118));
  if (v119)
  {
LABEL_171:
    if (v94)
    {
LABEL_172:
      v23 = 0;
      *v125 = v7;
      return v23;
    }
    goto LABEL_176;
  }
  ((void (*)(std::__shared_weak_count *, __n128))v126->__on_zero_shared)(v126, v112);
  std::__shared_weak_count::__release_weak(v126);
  if (v94)
    goto LABEL_172;
LABEL_176:
  if (v7)
  {
    v120 = v7 + 8;
    do
    {
      v121 = __ldaxr(v120);
      v122 = v121 - 1;
    }
    while (__stlxr(v122, v120));
    if (!v122)
      (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v7 + 8))(v7, v112);
  }
  return v23;
}

void sub_239A4879C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40)
{
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  uint64_t v46;
  void *v48;
  __n128 v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  __n128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __n128 v57;
  unint64_t *v58;
  unint64_t v59;
  __n128 v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;

  nullsub_4(v45);
  std::__shared_weak_count::~__shared_weak_count(v44);
  operator delete(v48);
  v49 = nullsub_4(&a35);
  v50 = a33;
  if (a33)
  {
    p_shared_owners = (unint64_t *)&a33->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v50->__on_zero_shared)(v50, v49);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  j_nullsub_4_89(&__p);
  v53 = nullsub_4(v46 - 136);
  v54 = *(std::__shared_weak_count **)(v46 - 144);
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v54->__on_zero_shared)(v54, v53);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = nullsub_4(v46 - 160);
  if (a25)
  {
    v58 = (unint64_t *)&a25->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *, __n128))a25->__on_zero_shared)(a25, v57);
      std::__shared_weak_count::__release_weak(a25);
    }
  }
  sub_239416DA0(v43);
  v60 = nullsub_4(v46 - 248);
  do
    v61 = __ldaxr(v42);
  while (__stlxr(v61 - 1, v42));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v40->__on_zero_shared)(v40, v60);
    std::__shared_weak_count::__release_weak(v40);
  }
  if (v41)
  {
    v62 = (unint64_t *)&v41->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v41->__on_zero_shared)(v41, v60);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (a12)
  {
    v64 = (unint64_t *)&a12->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *, __n128))a12->__on_zero_shared)(a12, v60);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(a1);
}

void sub_239A48D58()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *CPGObjectSegmentationSessionOptionsCreate()
{
  _QWORD *result;

  result = operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    *result = &off_250AF2290;
    result[1] = 0;
    *((_DWORD *)result + 2) = 1;
  }
  return result;
}

uint64_t CPGObjectSegmentationSessionOptionsRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGObjectSegmentationSessionOptionsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 8);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_239A48DF0()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGObjectTransformRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 144);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGObjectTransformRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 144);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

__n128 CPGObjectTransformGetTransformMatrix@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 80) = v2;
  v3 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 112) = v3;
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

void sub_239A48E74(_QWORD *a1)
{
  sub_239A48E98(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A48E98(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;

  *a1 = &off_250AF22B0;
  v2 = (unsigned int *)a1[1];
  if (v2)
  {
    v3 = v2 + 10;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)a1[20];
  if (v6)
  {
    v7 = v6 + 3;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = (std::__shared_weak_count *)a1[19];
  if (!v10)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)a1[17];
    if (!v13)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v13 = (std::__shared_weak_count *)a1[17];
    if (!v13)
      goto LABEL_21;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_21:
  v16 = (std::__shared_weak_count *)a1[15];
  if (!v16)
    goto LABEL_25;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)a1[13];
    if (!v19)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v19 = (std::__shared_weak_count *)a1[13];
    if (!v19)
      goto LABEL_31;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_31:
  v22 = (std::__shared_weak_count *)a1[11];
  if (!v22)
    goto LABEL_35;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = (std::__shared_weak_count *)a1[9];
    if (!v25)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    v25 = (std::__shared_weak_count *)a1[9];
    if (!v25)
      goto LABEL_41;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_41:
  v28 = (std::__shared_weak_count *)a1[7];
  if (!v28)
    goto LABEL_45;
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = (std::__shared_weak_count *)a1[5];
    if (!v31)
      goto LABEL_51;
  }
  else
  {
LABEL_45:
    v31 = (std::__shared_weak_count *)a1[5];
    if (!v31)
      goto LABEL_51;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_51:
  v34 = (std::__shared_weak_count *)a1[3];
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return a1;
}

void sub_239A49148(_QWORD *a1)
{
  sub_239A48E98(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A4916C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;

  *a1 = &off_250AF22B0;
  a1[1] = a2;
  sub_2396B3B88(a1 + 2, a3);
  sub_239670E88(a1 + 4, a4);
  sub_2396B3B88(a1 + 6, a5);
  sub_239670E88(a1 + 8, a6);
  sub_239670E88(a1 + 10, a7);
  sub_2396B3B88(a1 + 12, a8);
  sub_239670E88(a1 + 14, a9);
  sub_2396B3B88(a1 + 16, a10);
  sub_239601718(a1 + 18, a11);
  v18 = a12;
  a1[20] = a12;
  v19 = a1[1];
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 40);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    v18 = a1[20];
  }
  if (v18)
  {
    v22 = (unsigned int *)(v18 + 12);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  return a1;
}

void sub_239A49298(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_239416DA0(v8);
  sub_239416DA0(v7);
  sub_239416DA0(v6);
  sub_239416DA0(v5);
  sub_239416DA0(v4);
  sub_239416DA0(v3);
  sub_239416DA0(v2);
  sub_239416DA0(v1);
  _Unwind_Resume(a1);
}

void sub_239A49304()
{
  JUMPOUT(0x239A492E4);
}

void sub_239A4930C()
{
  JUMPOUT(0x239A492ECLL);
}

void sub_239A49314()
{
  JUMPOUT(0x239A492F4);
}

uint64_t CPGOutputRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 168);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGOutputRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 168);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGOutputGetModelURL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t CPGOutputGetUsdaAssetsURLs(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t CPGOutputGetUsdzURL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t CPGOutputGetObjAssetsURLs(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t CPGOutputGetQuadMeshUsdzURL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t CPGOutputGetQuadMeshObjAssetsURLs(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t CPGOutputGetQuadMeshUsdaAssetsURLs(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t CPGOutputGetPointCloudURL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

uint64_t CPGOutputGetSfmMap(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t CPGOutputGetProperties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

uint64_t CPGOutputGetFailure(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160);
}

void sub_239A493BC(uint64_t a1, const __CFURL *a2)
{
  int v3;
  int v4;
  void *__p[2];
  uint64_t v6;
  unsigned __int8 v7;

  if (a2)
  {
    sub_2396CA024(a2, (uint64_t)__p);
    if (!v7)
    {
      sub_239A444D4((uint64_t)"unknown file", 132, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if (SHIBYTE(v6) < 0)
    {
      sub_23941A7F8((_BYTE *)a1, __p[0], (unint64_t)__p[1]);
      v3 = v7;
      v4 = SHIBYTE(v6);
      *(_BYTE *)(a1 + 24) = 1;
      if (v3)
      {
        if (v4 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 16) = v6;
      *(_BYTE *)(a1 + 24) = 1;
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
}

void sub_239A49480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_239A494A4(uint64_t a1, const __CFArray *a2)
{
  void **v3;
  void **v4;
  void *v5;
  void *__p;
  void **v7;
  char v8;

  if (a2)
  {
    sub_2396CA59C(a2, (uint64_t)&__p);
    if (!v8)
    {
      sub_239A444D4((uint64_t)"unknown file", 142, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_239A49624((_QWORD *)a1, (uint64_t)__p, (uint64_t)v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)__p) >> 3));
    *(_BYTE *)(a1 + 24) = 1;
    if (v8)
    {
      v3 = (void **)__p;
      if (__p)
      {
        v4 = v7;
        v5 = __p;
        if (v7 != __p)
        {
          do
          {
            if (*((char *)v4 - 1) < 0)
              operator delete(*(v4 - 3));
            v4 -= 3;
          }
          while (v4 != v3);
          v5 = __p;
        }
        v7 = v3;
        operator delete(v5);
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
}

void sub_239A49598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239A495AC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239A495AC(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(void ***)(a1 + 8);
      v4 = *(void ***)a1;
      if (v3 != v2)
      {
        do
        {
          if (*((char *)v3 - 1) < 0)
            operator delete(*(v3 - 3));
          v3 -= 3;
        }
        while (v3 != v2);
        v4 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

_QWORD *sub_239A49624(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    result = operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9 / 8];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = sub_23941A7F8(&v8[v9 / 8], *(void **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)v10 = *(_OWORD *)v11;
          v10[2] = *(_QWORD *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_239A49708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_239A49750(&a9);
  _Unwind_Resume(a1);
}

void ***sub_239A49750(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = (void **)**a1;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_239A497D0(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v6[8];
  std::__shared_weak_count *v7;
  char v8;

  if (*(_BYTE *)(a2 + 24))
  {
    sub_2396CA1A0(a2, (uint64_t)v6);
    if (!v8)
    {
      sub_239A444D4((uint64_t)"unknown file", 151, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_2396B3B88(a1, (uint64_t)v6);
    if (v8)
    {
      v3 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_239A49890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239600F8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239A498A4(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE v6[8];
  std::__shared_weak_count *v7;
  char v8;

  if (*(_BYTE *)(a2 + 24))
  {
    sub_2396CA2E0((uint64_t *)a2, (uint64_t)v6);
    if (!v8)
    {
      sub_239A444D4((uint64_t)"unknown file", 161, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_239670E88(a1, (uint64_t)v6);
    if (v8)
    {
      v3 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_239A49964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239A49978((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239A49978(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  return a1;
}

uint64_t CPGOutputCreateWithTransform(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  float64x2_t v6;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  int64x2_t v18;
  float64x2_t v19;
  double v20;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v25;
  float64x2_t v28;
  float64x2_t v31;
  int64x2_t v33;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  std::__fs::filesystem::path::__string_view v61;
  std::string *v62;
  std::basic_string_view<_CharT, _Traits>::size_type v63;
  std::basic_string_view<_CharT, _Traits>::size_type v64;
  std::string::size_type v65;
  char v66;
  CFUUIDRef v67;
  std::__shared_weak_count *size;
  unint64_t *v69;
  unint64_t v70;
  std::__fs::filesystem::path::__string_view v71;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v73;
  std::basic_string_view<_CharT, _Traits>::size_type v74;
  uint64_t v75;
  std::string *p_from;
  BOOL v77;
  int32x4_t v78;
  int v79;
  char *v80;
  uint64_t v81;
  void *v82;
  char *v83;
  void *v84;
  void *v85;
  std::__fs::filesystem::path *v86;
  std::__fs::filesystem::path *v87;
  std::__fs::filesystem::path::__string_view v88;
  std::string *v89;
  std::basic_string_view<_CharT, _Traits>::size_type v90;
  std::basic_string_view<_CharT, _Traits>::size_type v91;
  void *v92;
  int v93;
  _BOOL4 v94;
  std::string::size_type v95;
  char *v96;
  uint64_t *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  float *v102;
  double v103;
  double v104;
  double v105;
  float64x2_t v106;
  float64_t v107;
  uint64_t *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  unint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  float64x2_t v119;
  __int128 v120;
  uint64_t *v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  float *v127;
  double v128;
  double v129;
  double v130;
  float64x2_t v131;
  float64_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  char *v138;
  std::__fs::filesystem::path *v139;
  std::__fs::filesystem::path *v140;
  std::__fs::filesystem::path::__string_view v141;
  std::string *v142;
  std::basic_string_view<_CharT, _Traits>::size_type v143;
  std::basic_string_view<_CharT, _Traits>::size_type v144;
  void *v145;
  int v146;
  _BOOL4 v147;
  std::string::size_type v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  float *v153;
  double v154;
  double v155;
  double v156;
  float64x2_t v157;
  float64_t v158;
  uint64_t *v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  float64x2_t v170;
  __int128 v171;
  uint64_t *v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  float *v178;
  double v179;
  double v180;
  double v181;
  float64x2_t v182;
  float64_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  __int128 v192;
  std::__fs::filesystem::path::__string_view v193;
  std::string *v194;
  std::basic_string_view<_CharT, _Traits>::size_type v195;
  std::basic_string_view<_CharT, _Traits>::size_type v196;
  int v197;
  _BOOL4 v198;
  BOOL v199;
  _OWORD *v200;
  __int128 v201;
  char *v202;
  _OWORD *v203;
  __int128 v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  std::__fs::filesystem::path::__string_view v209;
  std::string *v210;
  std::basic_string_view<_CharT, _Traits>::size_type v211;
  std::basic_string_view<_CharT, _Traits>::size_type v212;
  int v213;
  _BOOL4 v214;
  BOOL v215;
  _OWORD *v216;
  __int128 v217;
  char *v218;
  _OWORD *v219;
  __int128 v220;
  char *v221;
  int v222;
  int v223;
  uint64_t v224;
  std::__fs::filesystem::path::__string_view v225;
  std::string *v226;
  std::basic_string_view<_CharT, _Traits>::size_type v227;
  std::basic_string_view<_CharT, _Traits>::size_type v228;
  void *v229;
  int v230;
  uint64_t v231;
  uint64_t **v232;
  uint64_t *v233;
  int v234;
  char *v235;
  uint64_t *v236;
  char v237;
  const std::__fs::filesystem::path *v238;
  _BOOL4 v239;
  char v240;
  char v241;
  int v242;
  int v243;
  _BOOL4 v244;
  int v245;
  std::string *v246;
  std::string::size_type v247;
  char v248;
  char v249;
  char v250;
  _QWORD *v251;
  _QWORD *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  void **v280;
  void **v281;
  void *v282;
  void **v283;
  void **v284;
  void *v285;
  void **v286;
  void **v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  std::__fs::filesystem::path *v292;
  std::__fs::filesystem::path *v293;
  std::__fs::filesystem::path *v294;
  void **v295;
  void **v296;
  void *v297;
  std::__fs::filesystem::path *v298;
  std::__fs::filesystem::path *v299;
  std::__fs::filesystem::path *v300;
  void **v301;
  void **v302;
  void *v303;
  _QWORD *v304;
  uint64_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  _QWORD *v311;
  float64x2_t v312;
  __n128 v313;
  float64x2_t v314;
  uint64_t v315;
  std::string v316;
  std::__fs::filesystem::path v317;
  std::__fs::filesystem::path v318;
  std::string __str;
  std::__fs::filesystem::path v320;
  std::string v321;
  std::string v322;
  std::__fs::filesystem::path v323;
  void *v324;
  char *v325;
  unint64_t v326;
  void *v327;
  char *v328;
  unint64_t v329;
  std::string v330;
  std::string v331;
  std::__fs::filesystem::path v332;
  void *v333;
  void *v334;
  unint64_t v335;
  void *v336;
  void *v337;
  unint64_t v338;
  std::string v339;
  std::string v340;
  std::__fs::filesystem::path __src;
  void **v342;
  void *v343;
  std::__shared_weak_count *v344;
  char v345;
  __int128 v346;
  _BYTE v347[7];
  char v348;
  std::string v349;
  uint64_t *v350[2];
  uint64_t v351[2];
  uint64_t *v352[2];
  uint64_t v353[2];
  __int128 v354;
  _BYTE v355[7];
  char v356;
  std::string v357;
  void *v358;
  void **v359;
  char v360;
  std::string v361;
  char v362;
  void *v363;
  void **v364;
  char v365;
  void *v366;
  void **v367;
  char v368;
  std::string v369;
  char v370;
  _BYTE v371[36];
  int v372;
  uint64_t v373;
  int v374;
  std::string __dst;
  void *v376;
  std::string v377;
  void *v378;
  void *v379;
  uint64_t v380;
  char v381;
  void *v382;
  uint64_t v383;
  int v384;
  char v385[8];
  void *v386;
  void *v387;
  char v388;
  std::string v389;
  char v390;
  std::__fs::filesystem::path v391;
  char v392;
  std::__fs::filesystem::path __p;
  char v394;
  std::__fs::filesystem::path *v395;
  std::__fs::filesystem::path *v396;
  char v397;
  void *v398;
  char v399;
  char v400;
  void *v401;
  void **v402;
  char v403;
  std::__fs::filesystem::path *v404;
  std::__fs::filesystem::path *v405;
  char v406;
  std::__fs::filesystem::path v407;
  unsigned __int8 v408;
  void *v409;
  void **v410;
  char v411;
  std::__fs::filesystem::path v412;
  char v413;
  std::__fs::filesystem::path v414;
  char v415;
  _OWORD v416[2];
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  uint64_t v423;
  _BYTE v424[36];
  int v425;
  uint64_t v426;
  int v427;
  std::__fs::filesystem::path v428;
  float32x4_t __from;
  float32x4_t __from_16;
  float32x4_t v431;
  float32x4_t v432;
  _QWORD v433[3];
  _QWORD *v434;
  uint64_t v435;
  std::__fs::filesystem::path::__string_view v436;

  v435 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (!*(_QWORD *)(a1 + 160))
    {
      v312 = *(float64x2_t *)(a2 + 16);
      v313 = *(__n128 *)(a2 + 48);
      v308 = *(float64x2_t *)a2;
      v309 = *(float64x2_t *)(a2 + 32);
      v314 = *(float64x2_t *)(a2 + 80);
      v306 = *(float64x2_t *)(a2 + 96);
      v307 = *(float64x2_t *)(a2 + 112);
      v6 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a2, (int64x2_t)v309);
      _Q2 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, (int64x2_t)v309);
      _Q3 = (float64x2_t)vzip1q_s64((int64x2_t)v312, (int64x2_t)v313);
      v9 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v6, *(double *)a2), _Q2, *(float64x2_t *)a2, 1), _Q3, v312.f64[0]);
      v10 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v6, v309.f64[0]), _Q2, v309, 1), _Q3, v313.n128_f64[0]);
      v310 = *(float64x2_t *)(a2 + 64);
      _Q3.f64[0] = v310.f64[1];
      __asm { FMLA            D2, D3, V5.D[1] }
      v15.f64[0] = 1.0
                 / sqrt(cbrt(vmlad_n_f64(_Q2.f64[0], v314.f64[0], v314.f64[0]) * vmulq_laneq_f64(v9, v10, 1).f64[0]));
      v16 = vmulq_f64(v312, v15);
      v17 = vmulq_n_f64(v308, v15.f64[0]);
      v18 = (int64x2_t)vmulq_f64((float64x2_t)v313, v15);
      v19 = vmulq_n_f64(v309, v15.f64[0]);
      *(_QWORD *)&v20 = *(_OWORD *)&vmulq_f64(v314, v15);
      _Q3 = vmulq_n_f64(v310, v15.f64[0]);
      v22 = (float64x2_t)vzip1q_s64((int64x2_t)v17, (int64x2_t)v19);
      v23 = (float64x2_t)vzip2q_s64((int64x2_t)v17, (int64x2_t)v19);
      _Q17 = (float64x2_t)vzip1q_s64((int64x2_t)v16, v18);
      v25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v22, v17.f64[0]), v23, v17, 1), _Q17, v16.f64[0]);
      _Q18 = (int64x2_t)vmulq_f64(_Q3, v17);
      _D19 = v17.f64[1];
      __asm { FMLA            D18, D19, V3.D[1] }
      *(double *)_Q18.i64 = vmlad_n_f64(*(double *)_Q18.i64, v16.f64[0], v20);
      v28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v22, v19.f64[0]), v23, v19, 1), _Q17, *(double *)v18.i64);
      _Q20 = (int8x16_t)vmulq_f64(_Q3, v19);
      _D21 = v19.f64[1];
      __asm { FMLA            D20, D21, V3.D[1] }
      *(double *)_Q20.i64 = vmlad_n_f64(*(double *)_Q20.i64, *(double *)v18.i64, v20);
      v31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v22, _Q3.f64[0]), v23, _Q3, 1), _Q17, v20);
      _Q16 = vmulq_f64(_Q3, _Q3);
      _Q17.f64[0] = _Q3.f64[1];
      __asm { FMLA            D16, D17, V3.D[1] }
      _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v20, v20);
      v33 = (int64x2_t)vaddq_f64(v28, (float64x2_t)xmmword_239EC6830);
      __asm { FMOV            V19.2D, #-1.0 }
      *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q16, _Q19));
      _Q16.f64[1] = NAN;
      if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v25, (float64x2_t)xmmword_239EC6820)), _Q16), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v33, _Q20, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q18, v33)), vabsq_f64(v31)))) <= 0.0001)
      {
        *(_QWORD *)&v35.f64[0] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
        *(_QWORD *)&v36.f64[0] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
        *(_QWORD *)&v35.f64[1] = v18.i64[0];
        v37.f64[0] = v20;
        v37.f64[1] = v36.f64[0];
        v38 = vmulq_f64(v35, v37);
        v36.f64[1] = v20;
        *(_QWORD *)&v16.f64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
        v39 = vmulq_f64(v16, vsubq_f64(vmulq_n_f64(v36, v19.f64[0]), vmulq_n_f64(v35, _Q3.f64[0])));
        if (fabs(v39.f64[0]+ v17.f64[0] * vsubq_f64(v38, (float64x2_t)vdupq_laneq_s64((int64x2_t)v38, 1)).f64[0]- v39.f64[1]+ -1.0) <= 0.0001)
        {
          v40 = v312.f64[1];
          if (v312.f64[1] == 0.0)
            goto LABEL_9;
          if (v312.f64[1] < 0.0)
            v40 = 0.0 - v312.f64[1];
          if (v40 <= 0.0001)
          {
LABEL_9:
            v41 = v313.n128_f64[1];
            if (v313.n128_f64[1] == 0.0)
              goto LABEL_21;
            if (v313.n128_f64[1] < 0.0)
              v41 = 0.0 - v313.n128_f64[1];
            if (v41 <= 0.0001)
            {
LABEL_21:
              v42 = v314.f64[1];
              if (v314.f64[1] == 0.0)
                goto LABEL_740;
              if (v314.f64[1] < 0.0)
                v42 = 0.0 - v314.f64[1];
              if (v42 <= 0.0001)
              {
LABEL_740:
                if (v307.f64[1] == 1.0
                  || (v307.f64[1] >= 1.0 ? (v43 = v307.f64[1] + -1.0) : (v43 = 1.0 - v307.f64[1]), v43 <= 0.0001))
                {
                  v423 = 0;
                  v433[0] = &off_250AF22D0;
                  v433[1] = &v423;
                  v433[2] = 0;
                  v434 = v433;
                  v46 = *(_QWORD *)(a1 + 8);
                  if (v46)
                  {
                    v47 = *(_QWORD *)(v46 + 8);
                    v48 = operator new();
                    sub_239A4D360(v48, v47);
                    __from.i64[0] = v48;
                    sub_239A4D588(&__dst, &__from, v46 + 16);
                    v55 = __dst.__r_.__value_.__r.__words[0];
                    v423 = __dst.__r_.__value_.__r.__words[0];
                    if (__from.i64[0])
                    {
                      v56 = sub_239A4D648(__from.i64[0]);
                      MEMORY[0x23B83E31C](v56, 0x10B2C40362D6DEFLL);
                      v55 = v423;
                    }
                    v57 = *(_OWORD *)(a2 + 80);
                    v419 = *(_OWORD *)(a2 + 64);
                    v420 = v57;
                    v58 = *(_OWORD *)(a2 + 112);
                    v421 = *(_OWORD *)(a2 + 96);
                    v422 = v58;
                    v59 = *(_OWORD *)(a2 + 16);
                    v416[0] = *(_OWORD *)a2;
                    v416[1] = v59;
                    v60 = *(_OWORD *)(a2 + 48);
                    v417 = *(_OWORD *)(a2 + 32);
                    v418 = v60;
                    v44 = CPGSfmMapTransformBy(v55, (uint64_t)v416, *(double *)&v417, *(double *)&v60, v49, v50, v51, v52, v53, v54);
                    if ((_DWORD)v44)
                      goto LABEL_723;
                  }
                  sub_239A493BC((uint64_t)&v414, *(const __CFURL **)(a1 + 128));
                  sub_239A493BC((uint64_t)&v412, *(const __CFURL **)(a1 + 16));
                  sub_239A494A4((uint64_t)&v409, *(const __CFArray **)(a1 + 32));
                  sub_239A493BC((uint64_t)&v407, *(const __CFURL **)(a1 + 48));
                  sub_239A494A4((uint64_t)&v404, *(const __CFArray **)(a1 + 64));
                  sub_239A494A4((uint64_t)&v401, *(const __CFArray **)(a1 + 80));
                  sub_239A493BC((uint64_t)&v398, *(const __CFURL **)(a1 + 96));
                  sub_239A494A4((uint64_t)&v395, *(const __CFArray **)(a1 + 112));
                  __p.__pn_.__r_.__value_.__s.__data_[0] = 0;
                  v394 = 0;
                  if (!v415)
                  {
                    if (v413)
                    {
                      sub_239927120(&v412, (uint64_t)&__dst);
                    }
                    else if (v408)
                    {
                      sub_239927120(&v407, (uint64_t)&__dst);
                    }
                    else
                    {
                      if (!v406 || (v238 = v404, v404 == v405))
                      {
                        if (!v411)
                          goto LABEL_52;
                        v238 = (const std::__fs::filesystem::path *)v409;
                        if (v409 == v410)
                          goto LABEL_52;
                      }
                      sub_239927120(v238, (uint64_t)&__dst);
                    }
                    if (v394)
                    {
                      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                      __p.__pn_ = __dst;
LABEL_52:
                      v391.__pn_.__r_.__value_.__s.__data_[0] = 0;
                      v392 = 0;
                      if (!v394)
                        goto LABEL_82;
                      v67 = CFUUIDCreate(0);
                      sub_2396293E8((int)&__dst, v67);
                      sub_2396293EC((unint64_t *)&__dst, (uint64_t)&__from);
                      size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
                      if (__dst.__r_.__value_.__l.__size_)
                      {
                        v69 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
                        do
                          v70 = __ldaxr(v69);
                        while (__stlxr(v70 - 1, v69));
                        if (!v70)
                        {
                          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                          std::__shared_weak_count::__release_weak(size);
                        }
                      }
                      v71 = std::__fs::filesystem::path::__parent_path(&__p);
                      if (v71.__size_ > 0x7FFFFFFFFFFFFFF7)
                        sub_23941A5AC();
                      if (v71.__size_ >= 0x17)
                      {
                        v73 = (v71.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v71.__size_ | 7) != 0x17)
                          v73 = v71.__size_ | 7;
                        v74 = v73 + 1;
                        p_dst = (std::string *)operator new(v73 + 1);
                        __dst.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                        __dst.__r_.__value_.__l.__size_ = v71.__size_;
                      }
                      else
                      {
                        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v71.__size_;
                        p_dst = &__dst;
                        if (!v71.__size_)
                        {
LABEL_66:
                          p_dst->__r_.__value_.__s.__data_[v71.__size_] = 0;
                          *(_QWORD *)&v371[16] = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
                          v75 = __from_16.u8[7];
                          if (__from_16.i8[7] >= 0)
                            p_from = (std::string *)&__from;
                          else
                            p_from = (std::string *)__from.i64[0];
                          *(_OWORD *)v371 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                          memset(&__dst, 0, sizeof(__dst));
                          if (__from_16.i8[7] < 0)
                            v75 = __from.i64[1];
                          sub_23948900C(&__dst, p_from, (std::string *)((char *)p_from + v75));
                          sub_239498A04((std::__fs::filesystem::path *)&__dst, (uint64_t)v371, (std::__fs::filesystem::path *)v424);
                          if (v392)
                          {
                            if (SHIBYTE(v391.__pn_.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v391.__pn_.__r_.__value_.__l.__data_);
                            v391 = *(std::__fs::filesystem::path *)v424;
                            v424[23] = 0;
                            v424[0] = 0;
                          }
                          else
                          {
                            v391 = *(std::__fs::filesystem::path *)v424;
                            memset(v424, 0, 24);
                            v392 = 1;
                          }
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                          {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                            if ((v371[23] & 0x80000000) == 0)
                            {
LABEL_78:
                              if (v392)
                                goto LABEL_79;
                              goto LABEL_93;
                            }
                          }
                          else if ((v371[23] & 0x80000000) == 0)
                          {
                            goto LABEL_78;
                          }
                          operator delete(*(void **)v371);
                          if (v392)
                          {
LABEL_79:
                            v77 = std::__fs::filesystem::__create_directory(&v391, 0);
                            if (__from_16.i8[7] < 0)
                              operator delete((void *)__from.i64[0]);
                            if (!v77)
                            {
                              v44 = 4294967284;
                              goto LABEL_669;
                            }
LABEL_82:
                            v389.__r_.__value_.__s.__data_[0] = 0;
                            v390 = 0;
                            if (!v415)
                            {
                              v44 = 0;
LABEL_122:
                              v424[0] = 0;
                              v424[24] = 0;
                              v371[0] = 0;
                              v371[24] = 0;
                              v369.__r_.__value_.__s.__data_[0] = 0;
                              v370 = 0;
                              LOBYTE(v366) = 0;
                              v368 = 0;
                              LOBYTE(v363) = 0;
                              v365 = 0;
                              v361.__r_.__value_.__s.__data_[0] = 0;
                              v362 = 0;
                              LOBYTE(v358) = 0;
                              v360 = 0;
                              if (!v406)
                                goto LABEL_573;
                              v311 = a3;
                              if (!v392)
                              {
                                sub_239A444D4((uint64_t)"unknown file", 291, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                                sub_239A4475C();
                                abort();
                              }
                              memset(&v357, 0, sizeof(v357));
                              v86 = v404;
                              v87 = v405;
                              if (v404 != v405)
                              {
                                while (1)
                                {
                                  if (!std::__fs::filesystem::path::__extension(v86).__size_)
                                    goto LABEL_128;
                                  v88 = std::__fs::filesystem::path::__extension(v86);
                                  if (v88.__size_ > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  if (v88.__size_ >= 0x17)
                                    break;
                                  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v88.__size_;
                                  v89 = &__dst;
                                  if (v88.__size_)
                                    goto LABEL_137;
LABEL_138:
                                  v89->__r_.__value_.__s.__data_[v88.__size_] = 0;
                                  v92 = (void *)__dst.__r_.__value_.__r.__words[0];
                                  LODWORD(v349.__r_.__value_.__l.__data_) = __dst.__r_.__value_.__r.__words[2];
                                  *(_DWORD *)((char *)v349.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3);
                                  v93 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                  {
                                    sub_23941A7F8(&v354, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                                  }
                                  else
                                  {
                                    v354 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                                    *(_DWORD *)v355 = v349.__r_.__value_.__l.__data_;
                                    *(_DWORD *)&v355[3] = *(_DWORD *)((char *)v349.__r_.__value_.__r.__words + 3);
                                    v356 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                                  }
                                  sub_239A43824((uint64_t)&v354, (uint64_t)&__from);
                                  if (__from_16.i8[7] < 0)
                                  {
                                    v94 = __from.i64[1] == 4 && *(_DWORD *)__from.i64[0] == 1784835886;
                                    operator delete((void *)__from.i64[0]);
                                  }
                                  else
                                  {
                                    v94 = __from_16.i8[7] == 4 && __from.i32[0] == 1784835886;
                                  }
                                  if (v356 < 0)
                                  {
                                    operator delete((void *)v354);
                                    if ((v93 & 0x80000000) == 0)
                                      goto LABEL_127;
                                  }
                                  else if ((v93 & 0x80000000) == 0)
                                  {
LABEL_127:
                                    if (v94)
                                      goto LABEL_152;
                                    goto LABEL_128;
                                  }
                                  operator delete(v92);
                                  if (v94)
                                  {
LABEL_152:
                                    std::string::operator=(&v357, &v86->__pn_);
                                    goto LABEL_153;
                                  }
LABEL_128:
                                  if (++v86 == v87)
                                    goto LABEL_153;
                                }
                                v90 = (v88.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v88.__size_ | 7) != 0x17)
                                  v90 = v88.__size_ | 7;
                                v91 = v90 + 1;
                                v89 = (std::string *)operator new(v90 + 1);
                                __dst.__r_.__value_.__r.__words[2] = v91 | 0x8000000000000000;
                                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
                                __dst.__r_.__value_.__l.__size_ = v88.__size_;
LABEL_137:
                                memmove(v89, v88.__data_, v88.__size_);
                                goto LABEL_138;
                              }
LABEL_153:
                              v95 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
                              if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                v95 = v357.__r_.__value_.__l.__size_;
                              if (!v95)
                              {
                                sub_239A444D4((uint64_t)"unknown file", 300, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                                sub_239A4475C();
                                abort();
                              }
                              sub_239A4D944(v353);
                              v96 = (char *)operator new(0x60uLL);
                              *((_QWORD *)v96 + 1) = 0;
                              *((_QWORD *)v96 + 2) = 0;
                              *(_QWORD *)v96 = &off_250ADEDC8;
                              *(_OWORD *)(v96 + 24) = 0u;
                              v97 = (uint64_t *)(v96 + 24);
                              *(_OWORD *)(v96 + 72) = 0u;
                              *(_OWORD *)(v96 + 40) = 0u;
                              *(_OWORD *)(v96 + 56) = 0u;
                              *((_QWORD *)v96 + 11) = 0;
                              *((_QWORD *)v96 + 9) = v96 + 80;
                              v352[0] = (uint64_t *)(v96 + 24);
                              v352[1] = (uint64_t *)v96;
                              LOWORD(v349.__r_.__value_.__l.__data_) = 1;
                              v349.__r_.__value_.__s.__data_[2] = 1;
                              HIDWORD(v349.__r_.__value_.__r.__words[0]) = 1;
                              if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
                              {
                                sub_23941A7F8(&__dst, v357.__r_.__value_.__l.__data_, v357.__r_.__value_.__l.__size_);
                                v97 = v352[0];
                              }
                              else
                              {
                                __dst = v357;
                              }
                              v98 = sub_23994C314((uint64_t)&__dst, v353[0], v97, (uint64_t)&v349);
                              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(__dst.__r_.__value_.__l.__data_);
                              if (!v98)
                              {
                                sub_239A444D4((uint64_t)"unknown file", 313, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                                sub_239A4475C();
                                abort();
                              }
                              v99 = v353[0];
                              if (*(_QWORD *)(v353[0] + 112) != *(_QWORD *)(v353[0] + 104))
                              {
                                v100 = 0;
                                v101 = 0;
                                do
                                {
                                  v108 = (uint64_t *)(*(_QWORD *)(v99 + 8) + 16 * *(unsigned int *)(v99 + 176));
                                  v110 = *v108;
                                  v109 = (std::__shared_weak_count *)v108[1];
                                  if (v109)
                                  {
                                    p_shared_owners = (unint64_t *)&v109->__shared_owners_;
                                    do
                                      v112 = __ldxr(p_shared_owners);
                                    while (__stxr(v112 + 1, p_shared_owners));
                                    do
                                      v113 = __ldaxr(p_shared_owners);
                                    while (__stlxr(v113 - 1, p_shared_owners));
                                    if (!v113)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                                      std::__shared_weak_count::__release_weak(v109);
                                    }
                                  }
                                  v102 = (float *)(*(_QWORD *)(v110 + 40) + 16 * v100);
                                  v103 = *v102;
                                  v104 = v102[1];
                                  v105 = v102[2];
                                  v106 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, v103), *(float64x2_t *)(a2 + 32), v104), *(float64x2_t *)(a2 + 64), v105);
                                  v107 = vaddq_f64(*(float64x2_t *)(a2 + 112), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 16), v103), *(float64x2_t *)(a2 + 48), v104), *(float64x2_t *)(a2 + 80), v105)).f64[0];
                                  *(float32x2_t *)v102 = vcvt_f32_f64(vaddq_f64(*(float64x2_t *)(a2 + 96), v106));
                                  *(float *)&v107 = v107;
                                  v102[2] = *(float *)&v107;
                                  v99 = v353[0];
                                  v100 = ++v101;
                                }
                                while (v101 < (unint64_t)((uint64_t)(*(_QWORD *)(v353[0] + 112)
                                                                          - *(_QWORD *)(v353[0] + 104)) >> 2));
                              }
                              sub_23941A4FC(&__dst, off_256934408[0]);
                              __from = 0uLL;
                              v114 = sub_2394E5F40((uint64_t **)(v99 + 8), (uint64_t)&__from, (unsigned __int8 *)&__dst);
                              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(__dst.__r_.__value_.__l.__data_);
                              if (v114 != -1)
                              {
                                v115 = v353[0];
                                if (*(_QWORD *)(v353[0] + 112) != *(_QWORD *)(v353[0] + 104))
                                {
                                  v116 = 0;
                                  v117 = 0;
                                  v118 = v114;
                                  v119 = 0uLL;
                                  v120 = xmmword_239F02850;
                                  do
                                  {
                                    v121 = (uint64_t *)(*(_QWORD *)(v115 + 8) + 16 * v118);
                                    v123 = *v121;
                                    v122 = (std::__shared_weak_count *)v121[1];
                                    if (v122)
                                    {
                                      v124 = (unint64_t *)&v122->__shared_owners_;
                                      do
                                        v125 = __ldxr(v124);
                                      while (__stxr(v125 + 1, v124));
                                      do
                                        v126 = __ldaxr(v124);
                                      while (__stlxr(v126 - 1, v124));
                                      if (!v126)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                                        std::__shared_weak_count::__release_weak(v122);
                                        v120 = xmmword_239F02850;
                                        v119 = 0uLL;
                                      }
                                    }
                                    v127 = (float *)(*(_QWORD *)(v123 + 40) + 16 * v116);
                                    v128 = *v127;
                                    v129 = v127[1];
                                    v130 = v127[2];
                                    v131 = vmulq_n_f64(*(float64x2_t *)a2, v128);
                                    v132 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 16), v128), *(float64x2_t *)(a2 + 48), v129), *(float64x2_t *)(a2 + 80), v130), v119, *(float64x2_t *)(a2 + 112)).f64[0];
                                    *(float32x2_t *)v127 = vcvt_f32_f64(vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v131, *(float64x2_t *)(a2 + 32), v129), *(float64x2_t *)(a2 + 64), v130), v119, *(float64x2_t *)(a2 + 96)));
                                    *(float *)&v132 = v132;
                                    v127[2] = *(float *)&v132;
                                    v133 = *(float32x4_t *)v127;
                                    v134 = vmulq_f32(v133, v133);
                                    v134.i32[3] = 0;
                                    v135 = vpaddq_f32(v134, v134);
                                    v136 = vpaddq_f32(v135, v135);
                                    v137 = (float32x4_t)v120;
                                    if (v136.f32[0] > 0.0)
                                      v137 = vdivq_f32(v133, vsqrtq_f32(v136));
                                    *(float32x4_t *)v127 = v137;
                                    v115 = v353[0];
                                    v116 = ++v117;
                                  }
                                  while (v117 < (unint64_t)((uint64_t)(*(_QWORD *)(v353[0] + 112)
                                                                            - *(_QWORD *)(v353[0] + 104)) >> 2));
                                }
                              }
                              sub_239A4D99C(v351);
                              v138 = (char *)operator new(0x60uLL);
                              *((_QWORD *)v138 + 1) = 0;
                              *((_QWORD *)v138 + 2) = 0;
                              *(_QWORD *)v138 = &off_250ADEDC8;
                              *(_OWORD *)(v138 + 72) = 0u;
                              *(_OWORD *)(v138 + 40) = 0u;
                              *(_OWORD *)(v138 + 56) = 0u;
                              *((_QWORD *)v138 + 11) = 0;
                              *(_OWORD *)(v138 + 24) = 0u;
                              *((_QWORD *)v138 + 9) = v138 + 80;
                              v350[0] = (uint64_t *)(v138 + 24);
                              v350[1] = (uint64_t *)v138;
                              memset(&v349, 0, sizeof(v349));
                              if (!v397)
                                goto LABEL_247;
                              v139 = v395;
                              if (v395 == v396)
                                goto LABEL_215;
                              v140 = v396;
                              while (1)
                              {
                                if (!std::__fs::filesystem::path::__extension(v139).__size_)
                                  goto LABEL_190;
                                v141 = std::__fs::filesystem::path::__extension(v139);
                                if (v141.__size_ > 0x7FFFFFFFFFFFFFF7)
                                  sub_23941A5AC();
                                if (v141.__size_ >= 0x17)
                                  break;
                                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v141.__size_;
                                v142 = &__dst;
                                if (v141.__size_)
                                  goto LABEL_199;
LABEL_200:
                                v142->__r_.__value_.__s.__data_[v141.__size_] = 0;
                                v145 = (void *)__dst.__r_.__value_.__r.__words[0];
                                LODWORD(v343) = __dst.__r_.__value_.__r.__words[2];
                                *(_DWORD *)((char *)&v343 + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2]
                                                                           + 3);
                                v146 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  sub_23941A7F8(&v346, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                                }
                                else
                                {
                                  v346 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                                  *(_DWORD *)v347 = (_DWORD)v343;
                                  *(_DWORD *)&v347[3] = *(_DWORD *)((char *)&v343 + 3);
                                  v348 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                                }
                                sub_239A43824((uint64_t)&v346, (uint64_t)&__from);
                                if (__from_16.i8[7] < 0)
                                {
                                  v147 = __from.i64[1] == 4 && *(_DWORD *)__from.i64[0] == 1784835886;
                                  operator delete((void *)__from.i64[0]);
                                }
                                else
                                {
                                  v147 = __from_16.i8[7] == 4 && __from.i32[0] == 1784835886;
                                }
                                if (v348 < 0)
                                {
                                  operator delete((void *)v346);
                                  if ((v146 & 0x80000000) == 0)
                                    goto LABEL_189;
                                }
                                else if ((v146 & 0x80000000) == 0)
                                {
LABEL_189:
                                  if (v147)
                                    goto LABEL_214;
                                  goto LABEL_190;
                                }
                                operator delete(v145);
                                if (v147)
                                {
LABEL_214:
                                  std::string::operator=(&v349, &v139->__pn_);
LABEL_215:
                                  v148 = HIBYTE(v349.__r_.__value_.__r.__words[2]);
                                  if ((v349.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v148 = v349.__r_.__value_.__l.__size_;
                                  if (!v148)
                                  {
                                    sub_239A444D4((uint64_t)"unknown file", 355, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                                    sub_239A4475C();
                                    abort();
                                  }
                                  LOWORD(v343) = 1;
                                  BYTE2(v343) = 1;
                                  HIDWORD(v343) = 1;
                                  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
                                    sub_23941A7F8(&__dst, v349.__r_.__value_.__l.__data_, v349.__r_.__value_.__l.__size_);
                                  else
                                    __dst = v349;
                                  v149 = sub_23994C31C((uint64_t)&__dst, v351[0], v350[0], (uint64_t)&v343);
                                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(__dst.__r_.__value_.__l.__data_);
                                  if (!v149)
                                  {
                                    sub_239A444D4((uint64_t)"unknown file", 363, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                                    sub_239A4475C();
                                    abort();
                                  }
                                  v150 = v351[0];
                                  if (*(_QWORD *)(v351[0] + 112) != *(_QWORD *)(v351[0] + 104))
                                  {
                                    v151 = 0;
                                    v152 = 0;
                                    do
                                    {
                                      v159 = (uint64_t *)(*(_QWORD *)(v150 + 8) + 16 * *(unsigned int *)(v150 + 176));
                                      v161 = *v159;
                                      v160 = (std::__shared_weak_count *)v159[1];
                                      if (v160)
                                      {
                                        v162 = (unint64_t *)&v160->__shared_owners_;
                                        do
                                          v163 = __ldxr(v162);
                                        while (__stxr(v163 + 1, v162));
                                        do
                                          v164 = __ldaxr(v162);
                                        while (__stlxr(v164 - 1, v162));
                                        if (!v164)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                                          std::__shared_weak_count::__release_weak(v160);
                                        }
                                      }
                                      v153 = (float *)(*(_QWORD *)(v161 + 40) + 16 * v151);
                                      v154 = *v153;
                                      v155 = v153[1];
                                      v156 = v153[2];
                                      v157 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, v154), *(float64x2_t *)(a2 + 32), v155), *(float64x2_t *)(a2 + 64), v156);
                                      v158 = vaddq_f64(*(float64x2_t *)(a2 + 112), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 16), v154), *(float64x2_t *)(a2 + 48), v155), *(float64x2_t *)(a2 + 80), v156)).f64[0];
                                      *(float32x2_t *)v153 = vcvt_f32_f64(vaddq_f64(*(float64x2_t *)(a2 + 96), v157));
                                      *(float *)&v158 = v158;
                                      v153[2] = *(float *)&v158;
                                      v150 = v351[0];
                                      v151 = ++v152;
                                    }
                                    while (v152 < (unint64_t)((uint64_t)(*(_QWORD *)(v351[0] + 112)
                                                                              - *(_QWORD *)(v351[0] + 104)) >> 2));
                                  }
                                  sub_23941A4FC(&__dst, off_256934408[0]);
                                  __from = 0uLL;
                                  v165 = sub_2394E5F40((uint64_t **)(v150 + 8), (uint64_t)&__from, (unsigned __int8 *)&__dst);
                                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(__dst.__r_.__value_.__l.__data_);
                                  if (v165 != -1)
                                  {
                                    v166 = v351[0];
                                    if (*(_QWORD *)(v351[0] + 112) != *(_QWORD *)(v351[0] + 104))
                                    {
                                      v167 = 0;
                                      v168 = 0;
                                      v169 = v165;
                                      v170 = 0uLL;
                                      v171 = xmmword_239F02850;
                                      do
                                      {
                                        v172 = (uint64_t *)(*(_QWORD *)(v166 + 8) + 16 * v169);
                                        v174 = *v172;
                                        v173 = (std::__shared_weak_count *)v172[1];
                                        if (v173)
                                        {
                                          v175 = (unint64_t *)&v173->__shared_owners_;
                                          do
                                            v176 = __ldxr(v175);
                                          while (__stxr(v176 + 1, v175));
                                          do
                                            v177 = __ldaxr(v175);
                                          while (__stlxr(v177 - 1, v175));
                                          if (!v177)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                                            std::__shared_weak_count::__release_weak(v173);
                                            v171 = xmmword_239F02850;
                                            v170 = 0uLL;
                                          }
                                        }
                                        v178 = (float *)(*(_QWORD *)(v174 + 40) + 16 * v167);
                                        v179 = *v178;
                                        v180 = v178[1];
                                        v181 = v178[2];
                                        v182 = vmulq_n_f64(*(float64x2_t *)a2, v179);
                                        v183 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 16), v179), *(float64x2_t *)(a2 + 48), v180), *(float64x2_t *)(a2 + 80), v181), v170, *(float64x2_t *)(a2 + 112)).f64[0];
                                        *(float32x2_t *)v178 = vcvt_f32_f64(vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v182, *(float64x2_t *)(a2 + 32), v180), *(float64x2_t *)(a2 + 64), v181), v170, *(float64x2_t *)(a2 + 96)));
                                        *(float *)&v183 = v183;
                                        v178[2] = *(float *)&v183;
                                        v184 = *(float32x4_t *)v178;
                                        v185 = vmulq_f32(v184, v184);
                                        v185.i32[3] = 0;
                                        v186 = vpaddq_f32(v185, v185);
                                        v187 = vpaddq_f32(v186, v186);
                                        v188 = (float32x4_t)v171;
                                        if (v187.f32[0] > 0.0)
                                          v188 = vdivq_f32(v184, vsqrtq_f32(v187));
                                        *(float32x4_t *)v178 = v188;
                                        v166 = v351[0];
                                        v167 = ++v168;
                                      }
                                      while (v168 < (unint64_t)((uint64_t)(*(_QWORD *)(v351[0] + 112)
                                                                                - *(_QWORD *)(v351[0] + 104)) >> 2));
                                    }
                                  }
LABEL_247:
                                  if (!v392)
                                    sub_2394875CC();
                                  sub_239926F04(&v391, (uint64_t)&__from);
                                  if (__from_16.i8[7] < 0)
                                  {
                                    sub_23941A7F8(&__dst, (void *)__from.i64[0], __from.u64[1]);
                                  }
                                  else
                                  {
                                    *(float32x4_t *)&__dst.__r_.__value_.__l.__data_ = __from;
                                    __dst.__r_.__value_.__r.__words[2] = __from_16.i64[0];
                                  }
                                  sub_239423914(&__dst, 0, 8uLL, &v343);
                                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(__dst.__r_.__value_.__l.__data_);
                                  if (__from_16.i8[7] < 0)
                                    operator delete((void *)__from.i64[0]);
                                  v342 = &v343;
                                  memset(&__src, 0, sizeof(__src));
                                  memset(&v340, 0, sizeof(v340));
                                  memset(&v339, 0, sizeof(v339));
                                  v337 = 0;
                                  v336 = 0;
                                  v338 = 0;
                                  v334 = 0;
                                  v333 = 0;
                                  v335 = 0;
                                  memset(&v332, 0, sizeof(v332));
                                  memset(&v331, 0, sizeof(v331));
                                  memset(&v330, 0, sizeof(v330));
                                  v327 = 0;
                                  v328 = 0;
                                  v329 = 0;
                                  v324 = 0;
                                  v325 = 0;
                                  v326 = 0;
                                  v189 = v352[0][3];
                                  v190 = v352[0][4];
                                  v191 = 1;
                                  while (2)
                                  {
                                    if (v189 != v190)
                                    {
                                      if (*(char *)(v189 + 47) < 0)
                                      {
                                        sub_23941A7F8(&__dst, *(void **)(v189 + 24), *(_QWORD *)(v189 + 32));
                                      }
                                      else
                                      {
                                        v192 = *(_OWORD *)(v189 + 24);
                                        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v189 + 40);
                                        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v192;
                                      }
                                      __from = *(float32x4_t *)&__dst.__r_.__value_.__l.__data_;
                                      __from_16.i64[0] = __dst.__r_.__value_.__r.__words[2];
                                      v193 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&__from);
                                      if (v193.__size_ > 0x7FFFFFFFFFFFFFF7)
                                        sub_23941A5AC();
                                      if (v193.__size_ >= 0x17)
                                      {
                                        v195 = (v193.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                                        if ((v193.__size_ | 7) != 0x17)
                                          v195 = v193.__size_ | 7;
                                        v196 = v195 + 1;
                                        v194 = (std::string *)operator new(v195 + 1);
                                        __dst.__r_.__value_.__r.__words[2] = v196 | 0x8000000000000000;
                                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v194;
                                        __dst.__r_.__value_.__l.__size_ = v193.__size_;
                                      }
                                      else
                                      {
                                        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v193.__size_;
                                        v194 = &__dst;
                                        if (!v193.__size_)
                                        {
LABEL_270:
                                          v197 = 0;
                                          v194->__r_.__value_.__s.__data_[v193.__size_] = 0;
                                          v323.__pn_ = __dst;
                                          if ((v191 & 1) != 0)
                                            v197 = sub_239A4D9F4((uint64_t *)&v342, (uint64_t)&v323);
                                          if (!v392)
                                            sub_2394875CC();
                                          sub_239498A04(&v323, (uint64_t)&v391, (std::__fs::filesystem::path *)&__dst);
                                          if (!v197
                                            || !std::__fs::filesystem::__copy_file((const std::__fs::filesystem::path *)&__from, (const std::__fs::filesystem::path *)&__dst, (std::__fs::filesystem::copy_options)0, 0))
                                          {
                                            goto LABEL_284;
                                          }
                                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                            sub_23941A7F8(&v322, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                                          else
                                            v322 = __dst;
                                          v198 = sub_2399272D8((std::string *)v189, &v322);
                                          v199 = v198;
                                          if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
                                          {
                                            operator delete(v322.__r_.__value_.__l.__data_);
                                            if (!v199)
                                              goto LABEL_284;
LABEL_280:
                                            v200 = v337;
                                            if ((unint64_t)v337 >= v338)
                                            {
                                              v202 = sub_23958837C((char **)&v336, (uint64_t)&__dst);
                                            }
                                            else
                                            {
                                              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                              {
                                                sub_23941A7F8(v337, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                                              }
                                              else
                                              {
                                                v201 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                                                *((_QWORD *)v337 + 2) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
                                                *v200 = v201;
                                              }
                                              v202 = (char *)v200 + 24;
                                            }
                                            v337 = v202;
                                            v203 = v334;
                                            if ((unint64_t)v334 >= v335)
                                            {
                                              v205 = sub_23958837C((char **)&v333, (uint64_t)&__dst);
                                            }
                                            else
                                            {
                                              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                              {
                                                sub_23941A7F8(v334, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                                              }
                                              else
                                              {
                                                v204 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                                                *((_QWORD *)v334 + 2) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
                                                *v203 = v204;
                                              }
                                              v205 = (char *)v203 + 24;
                                            }
                                            v334 = v205;
                                            v191 = 1;
                                            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                              goto LABEL_285;
                                          }
                                          else
                                          {
                                            if (v198)
                                              goto LABEL_280;
LABEL_284:
                                            v191 = 0;
                                            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                            {
LABEL_285:
                                              if (SHIBYTE(v323.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                              {
LABEL_256:
                                                operator delete(v323.__pn_.__r_.__value_.__l.__data_);
                                                if ((__from_16.i8[7] & 0x80000000) == 0)
                                                {
LABEL_257:
                                                  v189 += 48;
                                                  continue;
                                                }
LABEL_299:
                                                operator delete((void *)__from.i64[0]);
                                                goto LABEL_257;
                                              }
LABEL_298:
                                              if ((__from_16.i8[7] & 0x80000000) == 0)
                                                goto LABEL_257;
                                              goto LABEL_299;
                                            }
                                          }
                                          operator delete(__dst.__r_.__value_.__l.__data_);
                                          if (SHIBYTE(v323.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                            goto LABEL_256;
                                          goto LABEL_298;
                                        }
                                      }
                                      memmove(v194, v193.__data_, v193.__size_);
                                      goto LABEL_270;
                                    }
                                    break;
                                  }
                                  if (v397)
                                  {
                                    v206 = v350[0][3];
                                    v207 = v350[0][4];
                                    while (1)
                                    {
                                      if (v206 == v207)
                                        goto LABEL_346;
                                      if (*(char *)(v206 + 47) < 0)
                                      {
                                        sub_23941A7F8(&__dst, *(void **)(v206 + 24), *(_QWORD *)(v206 + 32));
                                      }
                                      else
                                      {
                                        v208 = *(_OWORD *)(v206 + 24);
                                        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v206 + 40);
                                        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v208;
                                      }
                                      __from = *(float32x4_t *)&__dst.__r_.__value_.__l.__data_;
                                      __from_16.i64[0] = __dst.__r_.__value_.__r.__words[2];
                                      v209 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&__from);
                                      if (v209.__size_ > 0x7FFFFFFFFFFFFFF7)
                                        sub_23941A5AC();
                                      if (v209.__size_ >= 0x17)
                                        break;
                                      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v209.__size_;
                                      v210 = &__dst;
                                      if (v209.__size_)
                                        goto LABEL_315;
LABEL_316:
                                      v213 = 0;
                                      v210->__r_.__value_.__s.__data_[v209.__size_] = 0;
                                      v323.__pn_ = __dst;
                                      if ((v191 & 1) != 0)
                                        v213 = sub_239A4D9F4((uint64_t *)&v342, (uint64_t)&v323);
                                      if (!v392)
                                        sub_2394875CC();
                                      sub_239498A04(&v323, (uint64_t)&v391, (std::__fs::filesystem::path *)&__dst);
                                      if (!v213
                                        || !std::__fs::filesystem::__copy_file((const std::__fs::filesystem::path *)&__from, (const std::__fs::filesystem::path *)&__dst, (std::__fs::filesystem::copy_options)0, 0))
                                      {
LABEL_330:
                                        v191 = 0;
                                        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                          goto LABEL_331;
                                        goto LABEL_343;
                                      }
                                      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                        sub_23941A7F8(&v321, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                                      else
                                        v321 = __dst;
                                      v214 = sub_2399272D8((std::string *)v206, &v321);
                                      v215 = v214;
                                      if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
                                      {
                                        operator delete(v321.__r_.__value_.__l.__data_);
                                        if (!v215)
                                          goto LABEL_330;
                                      }
                                      else if (!v214)
                                      {
                                        goto LABEL_330;
                                      }
                                      v216 = v328;
                                      if ((unint64_t)v328 >= v329)
                                      {
                                        v218 = sub_23958837C((char **)&v327, (uint64_t)&__dst);
                                      }
                                      else
                                      {
                                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                        {
                                          sub_23941A7F8(v328, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                                        }
                                        else
                                        {
                                          v217 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                                          *((_QWORD *)v328 + 2) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
                                          *v216 = v217;
                                        }
                                        v218 = (char *)v216 + 24;
                                      }
                                      v328 = v218;
                                      v219 = v325;
                                      if ((unint64_t)v325 >= v326)
                                      {
                                        v221 = sub_23958837C((char **)&v324, (uint64_t)&__dst);
                                      }
                                      else
                                      {
                                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                        {
                                          sub_23941A7F8(v325, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                                        }
                                        else
                                        {
                                          v220 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                                          *((_QWORD *)v325 + 2) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
                                          *v219 = v220;
                                        }
                                        v221 = (char *)v219 + 24;
                                      }
                                      v325 = v221;
                                      v191 = 1;
                                      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                      {
LABEL_331:
                                        if ((SHIBYTE(v323.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                          goto LABEL_344;
                                        goto LABEL_302;
                                      }
LABEL_343:
                                      operator delete(__dst.__r_.__value_.__l.__data_);
                                      if ((SHIBYTE(v323.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                      {
LABEL_344:
                                        if ((__from_16.i8[7] & 0x80000000) == 0)
                                          goto LABEL_303;
                                        goto LABEL_345;
                                      }
LABEL_302:
                                      operator delete(v323.__pn_.__r_.__value_.__l.__data_);
                                      if ((__from_16.i8[7] & 0x80000000) == 0)
                                        goto LABEL_303;
LABEL_345:
                                      operator delete((void *)__from.i64[0]);
LABEL_303:
                                      v206 += 48;
                                    }
                                    v211 = (v209.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v209.__size_ | 7) != 0x17)
                                      v211 = v209.__size_ | 7;
                                    v212 = v211 + 1;
                                    v210 = (std::string *)operator new(v211 + 1);
                                    __dst.__r_.__value_.__r.__words[2] = v212 | 0x8000000000000000;
                                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v210;
                                    __dst.__r_.__value_.__l.__size_ = v209.__size_;
LABEL_315:
                                    memmove(v210, v209.__data_, v209.__size_);
                                    goto LABEL_316;
                                  }
LABEL_346:
                                  if (!v191)
                                  {
                                    v237 = 0;
                                    v44 = 4294967284;
                                    a3 = v311;
                                    goto LABEL_562;
                                  }
                                  sub_239A4D818((uint64_t)&v323, (std::__fs::filesystem::path *)&v357);
                                  v222 = sub_239A4D9F4((uint64_t *)&v342, (uint64_t)&v323);
                                  if (!v392)
                                    sub_2394875CC();
                                  v223 = v222;
                                  sub_239498A04(&v323, (uint64_t)&v391, (std::__fs::filesystem::path *)&__dst);
                                  a3 = v311;
                                  if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(__src.__pn_.__r_.__value_.__l.__data_);
                                  __src.__pn_ = __dst;
                                  if (v397)
                                  {
                                    sub_239A4D818((uint64_t)&__dst, (std::__fs::filesystem::path *)&v349);
                                    if (v223)
                                      LOBYTE(v223) = sub_239A4D9F4((uint64_t *)&v342, (uint64_t)&__dst);
                                    if (!v392)
                                      sub_2394875CC();
                                    sub_239498A04((std::__fs::filesystem::path *)&__dst, (uint64_t)&v391, (std::__fs::filesystem::path *)&__from);
                                    if (SHIBYTE(v332.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v332.__pn_.__r_.__value_.__l.__data_);
                                    *(float32x4_t *)&v332.__pn_.__r_.__value_.__l.__data_ = __from;
                                    v332.__pn_.__r_.__value_.__r.__words[2] = __from_16.i64[0];
                                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(__dst.__r_.__value_.__l.__data_);
                                    if ((v223 & 1) != 0)
                                    {
LABEL_359:
                                      __from.i8[0] = 0;
                                      __from.i32[1] = 1;
                                      __from.i16[4] = 0;
                                      sub_239953B78(&__from_16);
                                      __from.i8[9] = 1;
                                      __from.i8[0] = 1;
                                      v224 = v352[0][3];
                                      v315 = v352[0][4];
                                      if (v224 != v315)
                                      {
                                        while (1)
                                        {
                                          if (*(char *)(v224 + 47) < 0)
                                            sub_23941A7F8(&__dst, *(void **)(v224 + 24), *(_QWORD *)(v224 + 32));
                                          else
                                            __dst = *(std::string *)(v224 + 24);
                                          v320.__pn_ = __dst;
                                          v225 = std::__fs::filesystem::path::__extension(&v320);
                                          if (v225.__size_ > 0x7FFFFFFFFFFFFFF7)
                                            sub_23941A5AC();
                                          if (v225.__size_ >= 0x17)
                                            break;
                                          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v225.__size_;
                                          v226 = &__dst;
                                          if (v225.__size_)
                                            goto LABEL_373;
LABEL_374:
                                          v226->__r_.__value_.__s.__data_[v225.__size_] = 0;
                                          v229 = (void *)__dst.__r_.__value_.__r.__words[0];
                                          LODWORD(v318.__pn_.__r_.__value_.__l.__data_) = __dst.__r_.__value_.__r.__words[2];
                                          *(_DWORD *)((char *)v318.__pn_.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3);
                                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                          {
                                            sub_23941A7F8(&__str, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                                            operator delete(v229);
                                          }
                                          else
                                          {
                                            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                                            LODWORD(__str.__r_.__value_.__r.__words[2]) = v318.__pn_.__r_.__value_.__l.__data_;
                                            *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v318.__pn_.__r_.__value_.__r.__words + 3);
                                            *((_BYTE *)&__str.__r_.__value_.__s + 23) = *((_BYTE *)&__dst.__r_.__value_.__s
                                                                                        + 23);
                                          }
                                          v230 = *(_DWORD *)v224;
                                          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 5;
                                          strcpy((char *)&__dst, "uchar");
                                          LOWORD(v376) = 100;
                                          *((_BYTE *)&v377.__r_.__value_.__s + 23) = 4;
                                          strcpy((char *)&v377, ".jpg");
                                          std::string::operator=(&v377, &__str);
                                          v231 = __from_16.i64[1];
                                          v232 = (uint64_t **)&__from_16.i64[1];
                                          v233 = &__from_16.i64[1];
                                          if (__from_16.i64[1])
                                          {
                                            while (1)
                                            {
                                              while (1)
                                              {
                                                v233 = (uint64_t *)v231;
                                                v234 = *(_DWORD *)(v231 + 32);
                                                if (v230 >= v234)
                                                  break;
                                                v231 = *v233;
                                                v232 = (uint64_t **)v233;
                                                if (!*v233)
                                                  goto LABEL_384;
                                              }
                                              if (v234 >= v230)
                                                break;
                                              v231 = v233[1];
                                              if (!v231)
                                              {
                                                v232 = (uint64_t **)(v233 + 1);
                                                goto LABEL_384;
                                              }
                                            }
                                            v235 = (char *)v233;
                                          }
                                          else
                                          {
LABEL_384:
                                            v235 = (char *)operator new(0x60uLL);
                                            *((_DWORD *)v235 + 8) = v230;
                                            *(_OWORD *)(v235 + 56) = 0u;
                                            *(_OWORD *)(v235 + 40) = 0u;
                                            *((_QWORD *)v235 + 11) = 0;
                                            *(_OWORD *)(v235 + 72) = 0u;
                                            v235[63] = 5;
                                            v235[44] = 114;
                                            *((_DWORD *)v235 + 10) = 1634231157;
                                            *((_WORD *)v235 + 32) = 100;
                                            v235[95] = 4;
                                            *((_DWORD *)v235 + 18) = 1735420462;
                                            *(_QWORD *)v235 = 0;
                                            *((_QWORD *)v235 + 1) = 0;
                                            *((_QWORD *)v235 + 2) = v233;
                                            *v232 = (uint64_t *)v235;
                                            v236 = (uint64_t *)v235;
                                            if (*(_QWORD *)__from_16.i64[0])
                                            {
                                              __from_16.i64[0] = *(_QWORD *)__from_16.i64[0];
                                              v236 = *v232;
                                            }
                                            sub_2394213B8((uint64_t *)__from_16.i64[1], v236);
                                            ++v431.i64[0];
                                          }
                                          std::string::operator=((std::string *)(v235 + 40), &__dst);
                                          *((_WORD *)v235 + 32) = (_WORD)v376;
                                          std::string::operator=((std::string *)v235 + 3, &v377);
                                          if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0)
                                          {
                                            operator delete(v377.__r_.__value_.__l.__data_);
                                            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                            {
LABEL_390:
                                              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                                goto LABEL_361;
                                              goto LABEL_394;
                                            }
                                          }
                                          else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                          {
                                            goto LABEL_390;
                                          }
                                          operator delete(__dst.__r_.__value_.__l.__data_);
                                          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                          {
LABEL_361:
                                            operator delete(__str.__r_.__value_.__l.__data_);
                                            if (SHIBYTE(v320.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                              goto LABEL_395;
                                            goto LABEL_362;
                                          }
LABEL_394:
                                          if (SHIBYTE(v320.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_395:
                                            operator delete(v320.__pn_.__r_.__value_.__l.__data_);
LABEL_362:
                                          v224 += 48;
                                          if (v224 == v315)
                                            goto LABEL_397;
                                        }
                                        v227 = (v225.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                                        if ((v225.__size_ | 7) != 0x17)
                                          v227 = v225.__size_ | 7;
                                        v228 = v227 + 1;
                                        v226 = (std::string *)operator new(v227 + 1);
                                        __dst.__r_.__value_.__r.__words[2] = v228 | 0x8000000000000000;
                                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v226;
                                        __dst.__r_.__value_.__l.__size_ = v225.__size_;
LABEL_373:
                                        memmove(v226, v225.__data_, v225.__size_);
                                        goto LABEL_374;
                                      }
LABEL_397:
                                      if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                        sub_23941A7F8(&__dst, __src.__pn_.__r_.__value_.__l.__data_, __src.__pn_.__r_.__value_.__l.__size_);
                                      else
                                        __dst = __src.__pn_;
                                      a3 = v311;
                                      v240 = sub_2399516C0((uint64_t)&__dst, v353[0], v352[0], (uint64_t)&__from);
                                      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(__dst.__r_.__value_.__l.__data_);
                                      if ((v240 & 1) == 0)
                                        goto LABEL_541;
                                      if (v397)
                                      {
                                        if (SHIBYTE(v332.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                          sub_23941A7F8(&__dst, v332.__pn_.__r_.__value_.__l.__data_, v332.__pn_.__r_.__value_.__l.__size_);
                                        else
                                          __dst = v332.__pn_;
                                        v241 = sub_239955904((uint64_t)&__dst, v351[0], v350[0], (uint64_t)&__from);
                                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__dst.__r_.__value_.__l.__data_);
                                        if ((v241 & 1) == 0)
                                        {
LABEL_541:
                                          v44 = 4294967284;
                                          v239 = 1;
                                          goto LABEL_542;
                                        }
                                      }
                                      sub_239927244((uint64_t)&v333, (uint64_t)&__src);
                                      if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                        sub_23941A7F8(&v320, __src.__pn_.__r_.__value_.__l.__data_, __src.__pn_.__r_.__value_.__l.__size_);
                                      else
                                        v320 = __src;
                                      sub_239A4DCBC(&__dst, (std::string *)".mtl");
                                      std::__fs::filesystem::path::replace_extension(&v320, (const std::__fs::filesystem::path *)&__dst);
                                      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(__dst.__r_.__value_.__l.__data_);
                                      sub_239927244((uint64_t)&v333, (uint64_t)&v320);
                                      if (v397)
                                      {
                                        sub_239927244((uint64_t)&v324, (uint64_t)&v332);
                                        if (SHIBYTE(v332.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                          sub_23941A7F8(&__dst, v332.__pn_.__r_.__value_.__l.__data_, v332.__pn_.__r_.__value_.__l.__size_);
                                        else
                                          __dst = v332.__pn_;
                                        sub_239A4DCBC(&__str, (std::string *)".mtl");
                                        std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&__dst, (const std::__fs::filesystem::path *)&__str);
                                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__str.__r_.__value_.__l.__data_);
                                        sub_239927244((uint64_t)&v324, (uint64_t)&__dst);
                                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__dst.__r_.__value_.__l.__data_);
                                      }
                                      sub_239916D44(&__str, (std::string *)"");
                                      sub_239916D44(&v318.__pn_, (std::string *)"");
                                      if (v413)
                                      {
                                        sub_239A4D818((uint64_t)&__dst, &v412);
                                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__str.__r_.__value_.__l.__data_);
                                        __str = __dst;
                                        v242 = sub_239A4D9F4((uint64_t *)&v342, (uint64_t)&__str);
                                        v243 = v408;
LABEL_438:
                                        v239 = v243 != 0;
                                        if (!v243)
                                          goto LABEL_448;
                                        sub_239A4D818((uint64_t)&__dst, &v407);
                                        if (SHIBYTE(v318.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v318.__pn_.__r_.__value_.__l.__data_);
                                        v318.__pn_ = __dst;
                                        if (v242)
                                          v242 = sub_239A4D9F4((uint64_t *)&v342, (uint64_t)&v318);
                                        sub_239916D44(&__dst, (std::string *)"");
                                        v436.__data_ = (const std::string_view::value_type *)&__dst;
                                        v244 = sub_239A4DD14((const std::__fs::filesystem::path *)&__str, v436);
                                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__dst.__r_.__value_.__l.__data_);
                                        if (v244)
                                        {
                                          sub_239926F04(&v318, (uint64_t)&v317);
                                          if (SHIBYTE(v317.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                            sub_23941A7F8(&__dst, v317.__pn_.__r_.__value_.__l.__data_, v317.__pn_.__r_.__value_.__l.__size_);
                                          else
                                            __dst = v317.__pn_;
                                          v246 = std::string::append(&__dst, ".usda");
                                          v247 = v246->__r_.__value_.__r.__words[0];
                                          v428.__pn_.__r_.__value_.__r.__words[0] = v246->__r_.__value_.__l.__size_;
                                          *(std::string::size_type *)((char *)v428.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v246->__r_.__value_.__r.__words[1] + 7);
                                          v248 = HIBYTE(v246->__r_.__value_.__r.__words[2]);
                                          v246->__r_.__value_.__l.__size_ = 0;
                                          v246->__r_.__value_.__r.__words[2] = 0;
                                          v246->__r_.__value_.__r.__words[0] = 0;
                                          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                            operator delete(__str.__r_.__value_.__l.__data_);
                                          __str.__r_.__value_.__r.__words[0] = v247;
                                          __str.__r_.__value_.__l.__size_ = v428.__pn_.__r_.__value_.__r.__words[0];
                                          *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v428.__pn_.__r_.__value_.__r.__words + 7);
                                          *((_BYTE *)&__str.__r_.__value_.__s + 23) = v248;
                                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                            operator delete(__dst.__r_.__value_.__l.__data_);
                                          if (SHIBYTE(v317.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                            operator delete(v317.__pn_.__r_.__value_.__l.__data_);
                                          v239 = 1;
                                          v245 = 1;
                                          a3 = v311;
                                          if ((v242 & 1) != 0)
                                            goto LABEL_464;
                                          v44 = 4294967284;
                                          if (SHIBYTE(v318.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                          {
LABEL_450:
                                            operator delete(v318.__pn_.__r_.__value_.__l.__data_);
                                            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                              goto LABEL_451;
LABEL_536:
                                            if (SHIBYTE(v320.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                              goto LABEL_537;
                                            goto LABEL_542;
                                          }
                                        }
                                        else
                                        {
LABEL_448:
                                          v245 = 1;
                                          if (v242)
                                            goto LABEL_464;
                                          v44 = 4294967284;
                                          v239 = 1;
                                          if (SHIBYTE(v318.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                            goto LABEL_450;
                                        }
LABEL_535:
                                        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                          goto LABEL_536;
LABEL_451:
                                        operator delete(__str.__r_.__value_.__l.__data_);
                                        if (SHIBYTE(v320.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_537:
                                          operator delete(v320.__pn_.__r_.__value_.__l.__data_);
LABEL_542:
                                        sub_239586B24((uint64_t)&__from);
LABEL_543:
                                        if (SHIBYTE(v323.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v323.__pn_.__r_.__value_.__l.__data_);
                                        if (v239)
                                        {
                                          v237 = 0;
                                        }
                                        else
                                        {
                                          if (v413)
                                            sub_239A4D8DC((std::string *)v424, &v340);
                                          if (v408)
                                            sub_239A4D8DC(&v369, &v339);
                                          if (v406)
                                            sub_239A4DD4C((uint64_t)&v366, (std::string **)&v333);
                                          if (v411)
                                            sub_239A4DD4C((uint64_t)v371, (std::string **)&v336);
                                          if (v397)
                                            sub_239A4DD4C((uint64_t)&v358, (std::string **)&v324);
                                          if (v403)
                                            sub_239A4DD4C((uint64_t)&v363, (std::string **)&v327);
                                          if (v400)
                                            sub_239A4D8DC(&v361, &v330);
                                          v237 = 1;
                                        }
LABEL_562:
                                        sub_23941A260(&v324);
                                        sub_23941A260(&v327);
                                        if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
                                        {
                                          operator delete(v330.__r_.__value_.__l.__data_);
                                          if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
                                            goto LABEL_730;
LABEL_564:
                                          if (SHIBYTE(v332.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_731:
                                            operator delete(v332.__pn_.__r_.__value_.__l.__data_);
                                        }
                                        else
                                        {
                                          if ((SHIBYTE(v331.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                            goto LABEL_564;
LABEL_730:
                                          operator delete(v331.__r_.__value_.__l.__data_);
                                          if (SHIBYTE(v332.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                            goto LABEL_731;
                                        }
                                        sub_23941A260(&v333);
                                        sub_23941A260(&v336);
                                        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
                                        {
                                          operator delete(v339.__r_.__value_.__l.__data_);
                                          if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
                                            goto LABEL_733;
LABEL_567:
                                          if ((SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                            goto LABEL_568;
LABEL_734:
                                          operator delete(__src.__pn_.__r_.__value_.__l.__data_);
                                          if (v345 < 0)
                                            goto LABEL_735;
LABEL_569:
                                          if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
LABEL_736:
                                            operator delete(v349.__r_.__value_.__l.__data_);
                                        }
                                        else
                                        {
                                          if ((SHIBYTE(v340.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                            goto LABEL_567;
LABEL_733:
                                          operator delete(v340.__r_.__value_.__l.__data_);
                                          if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                            goto LABEL_734;
LABEL_568:
                                          if ((v345 & 0x80000000) == 0)
                                            goto LABEL_569;
LABEL_735:
                                          operator delete(v343);
                                          if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
                                            goto LABEL_736;
                                        }
                                        sub_239416DA0((uint64_t)v350);
                                        sub_239416DA0((uint64_t)v351);
                                        sub_239416DA0((uint64_t)v352);
                                        sub_239416DA0((uint64_t)v353);
                                        if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v357.__r_.__value_.__l.__data_);
                                        if ((v237 & 1) != 0)
                                        {
LABEL_573:
                                          sub_239A497D0(&__dst, (uint64_t)v424);
                                          sub_239A498A4(&__from, (uint64_t)v371);
                                          sub_239A497D0(&v357, (uint64_t)&v369);
                                          sub_239A498A4(&v349, (uint64_t)&v366);
                                          sub_239A498A4(&v343, (uint64_t)&v363);
                                          sub_239A497D0(&__src, (uint64_t)&v361);
                                          sub_239A498A4(&v340, (uint64_t)&v358);
                                          sub_239A497D0(&v339, (uint64_t)&v389);
                                          sub_239601718(&v336, a1 + 144);
                                          v333 = 0;
                                          v251 = operator new(0xB0uLL, MEMORY[0x24BEDB6B8]);
                                          v252 = v251;
                                          if (v251)
                                          {
                                            sub_239A4DDD8((uint64_t)v251, v423, (uint64_t)&__dst, (uint64_t)&__from, (uint64_t)&v357, (uint64_t)&v349, (uint64_t)&v343, (uint64_t)&__src, (uint64_t)&v340, (uint64_t)&v339, (uint64_t)&v336, (uint64_t *)&v333);
                                            *v252 = &off_250AF2720;
                                          }
                                          *a3 = v252;
                                          v253 = (std::__shared_weak_count *)v337;
                                          if (v337)
                                          {
                                            v254 = (unint64_t *)((char *)v337 + 8);
                                            do
                                              v255 = __ldaxr(v254);
                                            while (__stlxr(v255 - 1, v254));
                                            if (!v255)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                                              std::__shared_weak_count::__release_weak(v253);
                                            }
                                          }
                                          v256 = (std::__shared_weak_count *)v339.__r_.__value_.__l.__size_;
                                          if (v339.__r_.__value_.__l.__size_)
                                          {
                                            v257 = (unint64_t *)(v339.__r_.__value_.__l.__size_ + 8);
                                            do
                                              v258 = __ldaxr(v257);
                                            while (__stlxr(v258 - 1, v257));
                                            if (!v258)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                                              std::__shared_weak_count::__release_weak(v256);
                                            }
                                          }
                                          v259 = (std::__shared_weak_count *)v340.__r_.__value_.__l.__size_;
                                          if (v340.__r_.__value_.__l.__size_)
                                          {
                                            v260 = (unint64_t *)(v340.__r_.__value_.__l.__size_ + 8);
                                            do
                                              v261 = __ldaxr(v260);
                                            while (__stlxr(v261 - 1, v260));
                                            if (!v261)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                                              std::__shared_weak_count::__release_weak(v259);
                                            }
                                          }
                                          v262 = (std::__shared_weak_count *)__src.__pn_.__r_.__value_.__l.__size_;
                                          if (__src.__pn_.__r_.__value_.__l.__size_)
                                          {
                                            v263 = (unint64_t *)(__src.__pn_.__r_.__value_.__l.__size_ + 8);
                                            do
                                              v264 = __ldaxr(v263);
                                            while (__stlxr(v264 - 1, v263));
                                            if (!v264)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                                              std::__shared_weak_count::__release_weak(v262);
                                            }
                                          }
                                          v265 = v344;
                                          if (v344)
                                          {
                                            v266 = (unint64_t *)&v344->__shared_owners_;
                                            do
                                              v267 = __ldaxr(v266);
                                            while (__stlxr(v267 - 1, v266));
                                            if (!v267)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                                              std::__shared_weak_count::__release_weak(v265);
                                            }
                                          }
                                          v268 = (std::__shared_weak_count *)v349.__r_.__value_.__l.__size_;
                                          if (v349.__r_.__value_.__l.__size_)
                                          {
                                            v269 = (unint64_t *)(v349.__r_.__value_.__l.__size_ + 8);
                                            do
                                              v270 = __ldaxr(v269);
                                            while (__stlxr(v270 - 1, v269));
                                            if (!v270)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                                              std::__shared_weak_count::__release_weak(v268);
                                            }
                                          }
                                          v271 = (std::__shared_weak_count *)v357.__r_.__value_.__l.__size_;
                                          if (v357.__r_.__value_.__l.__size_)
                                          {
                                            v272 = (unint64_t *)(v357.__r_.__value_.__l.__size_ + 8);
                                            do
                                              v273 = __ldaxr(v272);
                                            while (__stlxr(v273 - 1, v272));
                                            if (!v273)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                                              std::__shared_weak_count::__release_weak(v271);
                                            }
                                          }
                                          v274 = (std::__shared_weak_count *)__from.i64[1];
                                          if (__from.i64[1])
                                          {
                                            v275 = (unint64_t *)(__from.i64[1] + 8);
                                            do
                                              v276 = __ldaxr(v275);
                                            while (__stlxr(v276 - 1, v275));
                                            if (!v276)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                                              std::__shared_weak_count::__release_weak(v274);
                                            }
                                          }
                                          v277 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
                                          if (__dst.__r_.__value_.__l.__size_)
                                          {
                                            v278 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
                                            do
                                              v279 = __ldaxr(v278);
                                            while (__stlxr(v279 - 1, v278));
                                            if (!v279)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                                              std::__shared_weak_count::__release_weak(v277);
                                            }
                                          }
                                          v44 = 0;
                                        }
                                        if (v360)
                                        {
                                          v280 = (void **)v358;
                                          if (v358)
                                          {
                                            v281 = v359;
                                            v282 = v358;
                                            if (v359 != v358)
                                            {
                                              do
                                              {
                                                if (*((char *)v281 - 1) < 0)
                                                  operator delete(*(v281 - 3));
                                                v281 -= 3;
                                              }
                                              while (v281 != v280);
                                              v282 = v358;
                                            }
                                            v359 = v280;
                                            operator delete(v282);
                                          }
                                        }
                                        if (v362 && SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v361.__r_.__value_.__l.__data_);
                                        if (v365)
                                        {
                                          v283 = (void **)v363;
                                          if (v363)
                                          {
                                            v284 = v364;
                                            v285 = v363;
                                            if (v364 != v363)
                                            {
                                              do
                                              {
                                                if (*((char *)v284 - 1) < 0)
                                                  operator delete(*(v284 - 3));
                                                v284 -= 3;
                                              }
                                              while (v284 != v283);
                                              v285 = v363;
                                            }
                                            v364 = v283;
                                            operator delete(v285);
                                          }
                                        }
                                        if (v368)
                                        {
                                          v286 = (void **)v366;
                                          if (v366)
                                          {
                                            v287 = v367;
                                            v288 = v366;
                                            if (v367 != v366)
                                            {
                                              do
                                              {
                                                if (*((char *)v287 - 1) < 0)
                                                  operator delete(*(v287 - 3));
                                                v287 -= 3;
                                              }
                                              while (v287 != v286);
                                              v288 = v366;
                                            }
                                            v367 = v286;
                                            operator delete(v288);
                                          }
                                        }
                                        if (v370 && SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v369.__r_.__value_.__l.__data_);
                                        if (v371[24])
                                        {
                                          v289 = *(_QWORD *)v371;
                                          if (*(_QWORD *)v371)
                                          {
                                            v290 = *(_QWORD *)&v371[8];
                                            v291 = *(void **)v371;
                                            if (*(_QWORD *)&v371[8] != *(_QWORD *)v371)
                                            {
                                              do
                                              {
                                                if (*(char *)(v290 - 1) < 0)
                                                  operator delete(*(void **)(v290 - 24));
                                                v290 -= 24;
                                              }
                                              while (v290 != v289);
                                              v291 = *(void **)v371;
                                            }
                                            *(_QWORD *)&v371[8] = v289;
                                            operator delete(v291);
                                          }
                                        }
                                        if (v424[24] && (v424[23] & 0x80000000) != 0)
                                          operator delete(*(void **)v424);
LABEL_666:
                                        if (v390 && SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v389.__r_.__value_.__l.__data_);
LABEL_669:
                                        if (v392 && SHIBYTE(v391.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v391.__pn_.__r_.__value_.__l.__data_);
                                        if (v394 && SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                                        if (v397)
                                        {
                                          v292 = v395;
                                          if (v395)
                                          {
                                            v293 = v396;
                                            v294 = v395;
                                            if (v396 != v395)
                                            {
                                              do
                                              {
                                                if (SHIBYTE(v293[-1].__pn_.__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(v293[-1].__pn_.__r_.__value_.__l.__data_);
                                                --v293;
                                              }
                                              while (v293 != v292);
                                              v294 = v395;
                                            }
                                            v396 = v292;
                                            operator delete(v294);
                                          }
                                        }
                                        if (v400 && v399 < 0)
                                          operator delete(v398);
                                        if (v403)
                                        {
                                          v295 = (void **)v401;
                                          if (v401)
                                          {
                                            v296 = v402;
                                            v297 = v401;
                                            if (v402 != v401)
                                            {
                                              do
                                              {
                                                if (*((char *)v296 - 1) < 0)
                                                  operator delete(*(v296 - 3));
                                                v296 -= 3;
                                              }
                                              while (v296 != v295);
                                              v297 = v401;
                                            }
                                            v402 = v295;
                                            operator delete(v297);
                                          }
                                        }
                                        if (v406)
                                        {
                                          v298 = v404;
                                          if (v404)
                                          {
                                            v299 = v405;
                                            v300 = v404;
                                            if (v405 != v404)
                                            {
                                              do
                                              {
                                                if (SHIBYTE(v299[-1].__pn_.__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(v299[-1].__pn_.__r_.__value_.__l.__data_);
                                                --v299;
                                              }
                                              while (v299 != v298);
                                              v300 = v404;
                                            }
                                            v405 = v298;
                                            operator delete(v300);
                                          }
                                        }
                                        if (v408 && SHIBYTE(v407.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v407.__pn_.__r_.__value_.__l.__data_);
                                        if (v411)
                                        {
                                          v301 = (void **)v409;
                                          if (v409)
                                          {
                                            v302 = v410;
                                            v303 = v409;
                                            if (v410 != v409)
                                            {
                                              do
                                              {
                                                if (*((char *)v302 - 1) < 0)
                                                  operator delete(*(v302 - 3));
                                                v302 -= 3;
                                              }
                                              while (v302 != v301);
                                              v303 = v409;
                                            }
                                            v410 = v301;
                                            operator delete(v303);
                                          }
                                        }
                                        if (v413 && SHIBYTE(v412.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v412.__pn_.__r_.__value_.__l.__data_);
                                        if (v415 && SHIBYTE(v414.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v414.__pn_.__r_.__value_.__l.__data_);
LABEL_723:
                                        if (!v434)
                                          sub_2394172E0();
                                        (*(void (**)(_QWORD *))(*v434 + 48))(v434);
                                        v304 = v434;
                                        if (v434 == v433)
                                        {
                                          v305 = 4;
                                          v304 = v433;
                                        }
                                        else
                                        {
                                          if (!v434)
                                            return v44;
                                          v305 = 5;
                                        }
                                        (*(void (**)(void))(*v304 + 8 * v305))();
                                        return v44;
                                      }
                                      v243 = v408;
                                      v242 = 1;
                                      if (v411 || v408)
                                        goto LABEL_438;
                                      v239 = 0;
                                      v245 = 0;
LABEL_464:
                                      sub_239916D44(&v317.__pn_, (std::string *)"");
                                      sub_239916D44(&v428.__pn_, (std::string *)"");
                                      if (v397)
                                      {
                                        sub_239A4D818((uint64_t)&__dst, &v332);
                                        if (SHIBYTE(v317.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v317.__pn_.__r_.__value_.__l.__data_);
                                        v317.__pn_ = __dst;
                                        sub_239916D44(&__dst, (std::string *)".usda");
                                        std::__fs::filesystem::path::replace_extension(&v317, (const std::__fs::filesystem::path *)&__dst);
                                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__dst.__r_.__value_.__l.__data_);
                                        sub_239A4D818((uint64_t)&__dst, &v332);
                                        if (SHIBYTE(v428.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v428.__pn_.__r_.__value_.__l.__data_);
                                        v428.__pn_ = __dst;
                                        sub_239916D44(&__dst, (std::string *)".usdz");
                                        std::__fs::filesystem::path::replace_extension(&v428, (const std::__fs::filesystem::path *)&__dst);
                                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__dst.__r_.__value_.__l.__data_);
                                      }
                                      if (!v392)
                                        sub_2394875CC();
                                      sub_239498A04((std::__fs::filesystem::path *)&__str, (uint64_t)&v391, (std::__fs::filesystem::path *)&__dst);
                                      if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(v340.__r_.__value_.__l.__data_);
                                      v340 = __dst;
                                      if (!v392)
                                        sub_2394875CC();
                                      sub_239498A04(&v318, (uint64_t)&v391, (std::__fs::filesystem::path *)&__dst);
                                      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(v339.__r_.__value_.__l.__data_);
                                      v339 = __dst;
                                      if (v397)
                                      {
                                        if (!v392)
                                          sub_2394875CC();
                                        sub_239498A04(&v317, (uint64_t)&v391, (std::__fs::filesystem::path *)&__dst);
                                        if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v331.__r_.__value_.__l.__data_);
                                        v331 = __dst;
                                        if (!v392)
                                          sub_2394875CC();
                                        sub_239498A04(&v428, (uint64_t)&v391, (std::__fs::filesystem::path *)&__dst);
                                        if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v330.__r_.__value_.__l.__data_);
                                        v330 = __dst;
                                      }
                                      if ((v239 | v245) == 1)
                                      {
                                        sub_239587260((uint64_t)&__dst, (uint64_t *)&__from);
                                        MEMORY[0x23B83DBFC](&v380, "CorePhotogrammetry");
                                        v383 = 0x3900000002;
                                        v384 = 0;
                                        MEMORY[0x23B83DBFC](v385, "ObjectCapture");
                                        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
                                          sub_23941A7F8(&v316, v339.__r_.__value_.__l.__data_, v339.__r_.__value_.__l.__size_);
                                        else
                                          v316 = v339;
                                        v249 = sub_23995D19C((uint64_t)&v316, v353[0], v352[0], (uint64_t)&__dst);
                                        if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v316.__r_.__value_.__l.__data_);
                                        if ((v249 & 1) == 0)
                                          goto LABEL_530;
                                        if (!v403)
                                          goto LABEL_504;
                                        if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
                                          sub_23941A7F8(&v316, v330.__r_.__value_.__l.__data_, v330.__r_.__value_.__l.__size_);
                                        else
                                          v316 = v330;
                                        v250 = sub_23995D1C0((uint64_t)&v316, v351[0], v350[0], (uint64_t)&__dst);
                                        if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v316.__r_.__value_.__l.__data_);
                                        if ((v250 & 1) != 0)
                                        {
LABEL_504:
                                          sub_239927244((uint64_t)&v336, (uint64_t)&v340);
                                          if (v403)
                                            sub_239927244((uint64_t)&v327, (uint64_t)&v331);
                                          sub_239586A64((uint64_t)&__dst);
                                          v239 = 0;
                                        }
                                        else
                                        {
LABEL_530:
                                          sub_239586A64((uint64_t)&__dst);
                                          v44 = 4294967284;
                                          v239 = 1;
                                        }
                                        a3 = v311;
                                      }
                                      else
                                      {
                                        v239 = 0;
                                      }
                                      if (SHIBYTE(v428.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                      {
                                        operator delete(v428.__pn_.__r_.__value_.__l.__data_);
                                        if ((SHIBYTE(v317.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                        {
LABEL_534:
                                          if (SHIBYTE(v318.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                            goto LABEL_450;
                                          goto LABEL_535;
                                        }
                                      }
                                      else if ((SHIBYTE(v317.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                      {
                                        goto LABEL_534;
                                      }
                                      operator delete(v317.__pn_.__r_.__value_.__l.__data_);
                                      if (SHIBYTE(v318.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                        goto LABEL_450;
                                      goto LABEL_535;
                                    }
                                  }
                                  else if (v223)
                                  {
                                    goto LABEL_359;
                                  }
                                  v44 = 4294967284;
                                  v239 = 1;
                                  goto LABEL_543;
                                }
LABEL_190:
                                if (++v139 == v140)
                                  goto LABEL_215;
                              }
                              v143 = (v141.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v141.__size_ | 7) != 0x17)
                                v143 = v141.__size_ | 7;
                              v144 = v143 + 1;
                              v142 = (std::string *)operator new(v143 + 1);
                              __dst.__r_.__value_.__r.__words[2] = v144 | 0x8000000000000000;
                              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
                              __dst.__r_.__value_.__l.__size_ = v141.__size_;
LABEL_199:
                              memmove(v142, v141.__data_, v141.__size_);
                              goto LABEL_200;
                            }
                            v377.__r_.__value_.__s.__data_[16] = 0;
                            LOBYTE(v378) = 0;
                            v381 = 0;
                            LOBYTE(v382) = 0;
                            v385[0] = 0;
                            LOBYTE(v386) = 0;
                            v388 = 0;
                            memset(&__dst, 0, sizeof(__dst));
                            LOBYTE(v376) = 0;
                            if ((sub_2395B3804((uint64_t)&v414, (uint64_t)&__dst, 0) & 1) != 0)
                            {
                              __from = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v308), v312);
                              __from_16 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v309), (float64x2_t)v313);
                              v431 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v310), v314);
                              v432 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v306), v307);
                              v372 = 1065353216;
                              *(_OWORD *)&v371[4] = xmmword_239F13A5C;
                              *(_OWORD *)&v371[20] = unk_239F13A6C;
                              sub_2396C8EF8((float32x2_t *)&__from, (uint64_t)v424, (__n128)xmmword_239F13A5C, *(float32x2_t *)&v307.f64[0], v313, v78);
                              *(_DWORD *)v371 = *(_DWORD *)v424;
                              *(_OWORD *)&v371[4] = *(_OWORD *)&v424[4];
                              *(_OWORD *)&v371[20] = *(_OWORD *)&v424[20];
                              v372 = v425;
                              v373 = v426;
                              v374 = v427;
                              if ((sub_2396DF880((uint64_t)v371, (uint64_t)&__dst, 0) & 1) != 0)
                              {
                                if (!v392)
                                {
                                  sub_239A444D4((uint64_t)"unknown file", 269, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                                  sub_239A4475C();
                                  abort();
                                }
                                sub_239A4D818((uint64_t)&__from, &v414);
                                if (!v392)
                                  sub_2394875CC();
                                sub_239498A04((std::__fs::filesystem::path *)&__from, (uint64_t)&v391, (std::__fs::filesystem::path *)v424);
                                if ((sub_2395B2D40((uint64_t *)&__dst, (uint64_t)v424, 6u) & 1) != 0)
                                {
                                  sub_239A4D8DC(&v389, (const std::string *)v424);
                                  v79 = 0;
                                  v44 = 0;
                                }
                                else
                                {
                                  v44 = 0xFFFFFFFFLL;
                                  v79 = 1;
                                }
                                if ((v424[23] & 0x80000000) != 0)
                                {
                                  operator delete(*(void **)v424);
                                  if ((__from_16.i8[7] & 0x80000000) == 0)
                                  {
LABEL_101:
                                    if (!v388)
                                      goto LABEL_104;
                                    goto LABEL_102;
                                  }
                                }
                                else if ((__from_16.i8[7] & 0x80000000) == 0)
                                {
                                  goto LABEL_101;
                                }
                                operator delete((void *)__from.i64[0]);
                                if (!v388)
                                  goto LABEL_104;
LABEL_102:
                                if (v386)
                                {
                                  v387 = v386;
                                  operator delete(v386);
                                }
LABEL_104:
                                if (v385[0])
                                {
                                  v80 = (char *)v382;
                                  if (v382)
                                  {
                                    v81 = v383;
                                    v82 = v382;
                                    if ((void *)v383 != v382)
                                    {
                                      v83 = (char *)v383;
                                      do
                                      {
                                        v85 = (void *)*((_QWORD *)v83 - 3);
                                        v83 -= 24;
                                        v84 = v85;
                                        if (v85)
                                        {
                                          *(_QWORD *)(v81 - 16) = v84;
                                          operator delete(v84);
                                        }
                                        v81 = (uint64_t)v83;
                                      }
                                      while (v83 != v80);
                                      v82 = v382;
                                    }
                                    v383 = (uint64_t)v80;
                                    operator delete(v82);
                                  }
                                }
                                if (v381 && v378)
                                {
                                  v379 = v378;
                                  operator delete(v378);
                                }
                                if (v377.__r_.__value_.__s.__data_[16] && v376)
                                {
                                  v377.__r_.__value_.__r.__words[0] = (std::string::size_type)v376;
                                  operator delete(v376);
                                }
                                if (__dst.__r_.__value_.__r.__words[0])
                                {
                                  __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
                                  operator delete(__dst.__r_.__value_.__l.__data_);
                                }
                                if (v79)
                                  goto LABEL_666;
                                goto LABEL_122;
                              }
                              v44 = 0xFFFFFFFFLL;
                            }
                            else
                            {
                              v44 = 4294967284;
                            }
                            v79 = 1;
                            if (!v388)
                              goto LABEL_104;
                            goto LABEL_102;
                          }
LABEL_93:
                          sub_2394875CC();
                        }
                      }
                      memmove(p_dst, v71.__data_, v71.__size_);
                      goto LABEL_66;
                    }
                    __p.__pn_ = __dst;
LABEL_51:
                    v394 = 1;
                    goto LABEL_52;
                  }
                  v61 = std::__fs::filesystem::path::__parent_path(&v414);
                  if (v61.__size_ > 0x7FFFFFFFFFFFFFF7)
                    sub_23941A5AC();
                  if (v61.__size_ >= 0x17)
                  {
                    v63 = (v61.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v61.__size_ | 7) != 0x17)
                      v63 = v61.__size_ | 7;
                    v64 = v63 + 1;
                    v62 = (std::string *)operator new(v63 + 1);
                    __dst.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
                    __dst.__r_.__value_.__l.__size_ = v61.__size_;
                  }
                  else
                  {
                    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v61.__size_;
                    v62 = &__dst;
                    if (!v61.__size_)
                      goto LABEL_39;
                  }
                  memmove(v62, v61.__data_, v61.__size_);
LABEL_39:
                  v62->__r_.__value_.__s.__data_[v61.__size_] = 0;
                  __from.i64[0] = __dst.__r_.__value_.__l.__size_;
                  v65 = __dst.__r_.__value_.__r.__words[0];
                  *(uint64_t *)((char *)__from.i64 + 7) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1]
                                                                                   + 7);
                  v66 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                  if (v394)
                  {
                    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                    __p.__pn_.__r_.__value_.__r.__words[0] = v65;
                    __p.__pn_.__r_.__value_.__l.__size_ = __from.i64[0];
                    *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(unint64_t *)((char *)__from.u64 + 7);
                    *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v66;
                    goto LABEL_52;
                  }
                  __p.__pn_.__r_.__value_.__r.__words[0] = __dst.__r_.__value_.__r.__words[0];
                  __p.__pn_.__r_.__value_.__l.__size_ = __from.i64[0];
                  *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(unint64_t *)((char *)__from.u64 + 7);
                  *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
                  goto LABEL_51;
                }
              }
            }
          }
        }
      }
    }
  }
  return 4294967294;
}

void sub_239A4CBDC()
{
  JUMPOUT(0x239A4D218);
}

void sub_239A4CBE4()
{
  JUMPOUT(0x239A4D218);
}

void sub_239A4CBEC()
{
  JUMPOUT(0x239A4D220);
}

void sub_239A4CBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (SLOBYTE(STACK[0x477]) < 0)
  {
    operator delete((void *)STACK[0x460]);
    if (a62 < 0)
    {
LABEL_5:
      operator delete(a57);
      if (*(char *)(v62 - 185) < 0)
LABEL_8:
        JUMPOUT(0x239A4D260);
LABEL_9:
      JUMPOUT(0x239A4D264);
    }
  }
  else if (a62 < 0)
  {
    goto LABEL_5;
  }
  if (*(char *)(v62 - 185) < 0)
    goto LABEL_8;
  goto LABEL_9;
}

void sub_239A4CC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (SLOBYTE(STACK[0x477]) < 0)
  {
    operator delete((void *)STACK[0x460]);
    if (a62 < 0)
    {
LABEL_5:
      operator delete(a57);
      if (*(char *)(v62 - 185) < 0)
        JUMPOUT(0x239A4D25CLL);
      JUMPOUT(0x239A4D264);
    }
  }
  else if (a62 < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x239A4D240);
}

void sub_239A4CC0C()
{
  JUMPOUT(0x239A4D220);
}

void sub_239A4CC14()
{
  JUMPOUT(0x239A4D0B0);
}

void sub_239A4CC1C()
{
  uint64_t v0;

  if (*(char *)(v0 - 185) < 0)
    JUMPOUT(0x239A4D320);
  JUMPOUT(0x239A4D324);
}

void sub_239A4CC24()
{
  JUMPOUT(0x239A4D344);
}

void sub_239A4CC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  unint64_t v62;
  uint64_t v63;

  STACK[0x238] = v62;
  if (SLOBYTE(STACK[0x477]) < 0)
  {
    operator delete((void *)STACK[0x460]);
    if (a62 < 0)
    {
LABEL_5:
      operator delete(a57);
      if (*(char *)(v63 - 185) < 0)
        JUMPOUT(0x239A4D25CLL);
      JUMPOUT(0x239A4D264);
    }
  }
  else if (a62 < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x239A4D240);
}

void sub_239A4CC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  unint64_t v62;
  uint64_t v63;

  STACK[0x250] = v62;
  if (SLOBYTE(STACK[0x477]) < 0)
  {
    operator delete((void *)STACK[0x460]);
    if (a62 < 0)
    {
LABEL_5:
      operator delete(a57);
      if (*(char *)(v63 - 185) < 0)
        JUMPOUT(0x239A4D25CLL);
      JUMPOUT(0x239A4D264);
    }
  }
  else if (a62 < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x239A4D240);
}

void sub_239A4CC48()
{
  JUMPOUT(0x239A4D220);
}

void sub_239A4CC54()
{
  uint64_t v0;

  if (SLOBYTE(STACK[0x6FF]) < 0)
    operator delete((void *)STACK[0x6E8]);
  if (*(char *)(v0 - 185) < 0)
    operator delete(*(void **)(v0 - 208));
  JUMPOUT(0x239A4CE18);
}

void sub_239A4CC84()
{
  if (SLOBYTE(STACK[0x477]) < 0)
    JUMPOUT(0x239A4D320);
  JUMPOUT(0x239A4D324);
}

void sub_239A4CCAC()
{
  JUMPOUT(0x239A4D324);
}

void sub_239A4CCB4(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    MEMORY[0x23B83E310](v2, MEMORY[0x24BEDB6B8]);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x239A4C5A4);
  }
  JUMPOUT(0x239A4D150);
}

void sub_239A4CD04()
{
  JUMPOUT(0x239A4D0B0);
}

void sub_239A4CD0C()
{
  JUMPOUT(0x239A4D220);
}

void sub_239A4CD14()
{
  uint64_t v0;

  if (SLOBYTE(STACK[0x477]) < 0)
    operator delete((void *)STACK[0x460]);
  if (*(char *)(v0 - 185) < 0)
    JUMPOUT(0x239A4D320);
  JUMPOUT(0x239A4D324);
}

void sub_239A4CD38()
{
  JUMPOUT(0x239A4D33CLL);
}

void sub_239A4CD40()
{
  JUMPOUT(0x239A4D344);
}

void sub_239A4CD48()
{
  if (SLOBYTE(STACK[0x477]) < 0)
    operator delete((void *)STACK[0x460]);
  JUMPOUT(0x239A4D344);
}

void sub_239A4CD74()
{
  JUMPOUT(0x239A4D34CLL);
}

void sub_239A4CD84()
{
  JUMPOUT(0x239A4D018);
}

void sub_239A4CE14()
{
  sub_2394B6764((uint64_t)&STACK[0x460]);
  JUMPOUT(0x239A4D080);
}

void sub_239A4CE24()
{
  JUMPOUT(0x239A4D320);
}

void sub_239A4CE30()
{
  JUMPOUT(0x239A4D204);
}

void sub_239A4CE3C()
{
  JUMPOUT(0x239A4D218);
}

void sub_239A4CE44()
{
  JUMPOUT(0x239A4D324);
}

void sub_239A4CE4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (SLOBYTE(STACK[0x477]) < 0)
  {
    operator delete((void *)STACK[0x460]);
    if ((SLOBYTE(STACK[0x437]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x437]) & 0x80000000) == 0)
  {
LABEL_3:
    if ((*(char *)(v1 - 185) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  operator delete((void *)STACK[0x420]);
  if ((*(char *)(v1 - 185) & 0x80000000) == 0)
  {
LABEL_8:
    if (LOBYTE(STACK[0x538]) && SLOBYTE(STACK[0x537]) < 0)
      operator delete((void *)STACK[0x520]);
    if (LOBYTE(STACK[0x558]) && SLOBYTE(STACK[0x557]) < 0)
      operator delete((void *)STACK[0x540]);
    sub_239A495AC((uint64_t)&STACK[0x560]);
    if (LOBYTE(STACK[0x598]) && SLOBYTE(STACK[0x597]) < 0)
      operator delete((void *)STACK[0x580]);
    sub_239A495AC((uint64_t)&STACK[0x5A0]);
    sub_239A495AC((uint64_t)&STACK[0x5C0]);
    if (LOBYTE(STACK[0x5F8]) && SLOBYTE(STACK[0x5F7]) < 0)
      operator delete((void *)STACK[0x5E0]);
    sub_239A495AC((uint64_t)&STACK[0x600]);
    if (LOBYTE(STACK[0x638]) && SLOBYTE(STACK[0x637]) < 0)
      operator delete((void *)STACK[0x620]);
    if (LOBYTE(STACK[0x658]))
    {
      if (SLOBYTE(STACK[0x657]) < 0)
        operator delete((void *)STACK[0x640]);
    }
    sub_239416834((_QWORD *)(v1 - 136));
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(*(void **)(v1 - 208));
  goto LABEL_8;
}

void sub_239A4CFC4()
{
  JUMPOUT(0x239A4D0B0);
}

void sub_239A4CFD0()
{
  JUMPOUT(0x239A4D324);
}

void sub_239A4CFD8()
{
  JUMPOUT(0x239A4D208);
}

void sub_239A4CFE0()
{
  JUMPOUT(0x239A4D264);
}

void sub_239A4CFE8()
{
  JUMPOUT(0x239A4D324);
}

void sub_239A4CFF0()
{
  void *v0;
  int v1;

  if (SLOBYTE(STACK[0x367]) < 0)
  {
    operator delete((void *)STACK[0x350]);
    if ((v1 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v1 & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x37F]) < 0)
      goto LABEL_4;
    goto LABEL_7;
  }
  operator delete(v0);
  if (SLOBYTE(STACK[0x37F]) < 0)
LABEL_4:
    JUMPOUT(0x239A4D010);
LABEL_7:
  JUMPOUT(0x239A4D018);
}

void sub_239A4D180(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (SLOBYTE(STACK[0x37F]) < 0)
    operator delete((void *)STACK[0x368]);
  sub_239A495AC((uint64_t)&STACK[0x380]);
  if (LOBYTE(STACK[0x3B8]) && SLOBYTE(STACK[0x3B7]) < 0)
    operator delete((void *)STACK[0x3A0]);
  sub_239A495AC((uint64_t)&STACK[0x3C0]);
  sub_239A495AC((uint64_t)&STACK[0x3E0]);
  if (LOBYTE(STACK[0x418]) && SLOBYTE(STACK[0x417]) < 0)
    operator delete((void *)STACK[0x400]);
  sub_239A495AC((uint64_t)&STACK[0x420]);
  if (LOBYTE(STACK[0x700]) && SLOBYTE(STACK[0x6FF]) < 0)
    operator delete((void *)STACK[0x6E8]);
  if (LOBYTE(STACK[0x518]) && SLOBYTE(STACK[0x517]) < 0)
    operator delete((void *)STACK[0x500]);
  if (LOBYTE(STACK[0x538]) && SLOBYTE(STACK[0x537]) < 0)
    operator delete((void *)STACK[0x520]);
  if (LOBYTE(STACK[0x558]) && SLOBYTE(STACK[0x557]) < 0)
    operator delete((void *)STACK[0x540]);
  sub_239A495AC((uint64_t)&STACK[0x560]);
  if (LOBYTE(STACK[0x598]) && SLOBYTE(STACK[0x597]) < 0)
    operator delete((void *)STACK[0x580]);
  sub_239A495AC((uint64_t)&STACK[0x5A0]);
  sub_239A495AC((uint64_t)&STACK[0x5C0]);
  if (LOBYTE(STACK[0x5F8]) && SLOBYTE(STACK[0x5F7]) < 0)
    operator delete((void *)STACK[0x5E0]);
  sub_239A495AC((uint64_t)&STACK[0x600]);
  if (LOBYTE(STACK[0x638]) && SLOBYTE(STACK[0x637]) < 0)
    operator delete((void *)STACK[0x620]);
  if (LOBYTE(STACK[0x658]))
  {
    if (SLOBYTE(STACK[0x657]) < 0)
      operator delete((void *)STACK[0x640]);
  }
  sub_239416834((_QWORD *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_239A4D19C(void *a1, int a2)
{
  if (a2)
    sub_239416A48(a1);
  JUMPOUT(0x239A4D150);
}

void sub_239A4D1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  sub_239586ACC((uint64_t)&STACK[0x460]);
  if (a46 < 0)
    JUMPOUT(0x239A4D200);
  JUMPOUT(0x239A4D208);
}

void sub_239A4D234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if ((a62 & 0x80000000) == 0)
    JUMPOUT(0x239A4D240);
  JUMPOUT(0x239A4D1D4);
}

void sub_239A4D250()
{
  uint64_t v0;

  if (*(char *)(v0 - 185) < 0)
    JUMPOUT(0x239A4D25CLL);
  JUMPOUT(0x239A4D264);
}

uint64_t sub_239A4D360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;

  v4 = sub_239A4E3D8(a1, (uint64_t *)a2);
  sub_2395F6750(v4 + 456, a2 + 456);
  sub_2395F6750(a1 + 496, a2 + 496);
  v5 = *(_OWORD *)(a2 + 536);
  v6 = *(_OWORD *)(a2 + 552);
  v7 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 584) = v7;
  *(_OWORD *)(a1 + 536) = v5;
  *(_OWORD *)(a1 + 552) = v6;
  v8 = *(_OWORD *)(a2 + 600);
  v9 = *(_OWORD *)(a2 + 616);
  v10 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v10;
  *(_OWORD *)(a1 + 600) = v8;
  *(_OWORD *)(a1 + 616) = v9;
  v11 = *(_OWORD *)(a2 + 776);
  v13 = *(_OWORD *)(a2 + 728);
  v12 = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 776) = v11;
  *(_OWORD *)(a1 + 728) = v13;
  *(_OWORD *)(a1 + 744) = v12;
  v14 = *(_OWORD *)(a2 + 664);
  v15 = *(_OWORD *)(a2 + 680);
  v16 = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 712) = v16;
  *(_OWORD *)(a1 + 664) = v14;
  *(_OWORD *)(a1 + 680) = v15;
  sub_239A4F3E4(a1 + 792, a2 + 792);
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 896) = 0;
  if (*(_BYTE *)(a2 + 896))
  {
    sub_2395F4690(a1 + 856, a2 + 856);
    *(_BYTE *)(a1 + 896) = 1;
  }
  *(_BYTE *)(a1 + 904) = 0;
  *(_BYTE *)(a1 + 928) = 0;
  if (*(_BYTE *)(a2 + 928))
  {
    *(_QWORD *)(a1 + 904) = 0;
    *(_QWORD *)(a1 + 912) = 0;
    *(_QWORD *)(a1 + 920) = 0;
    v17 = *(_BYTE **)(a2 + 904);
    v18 = *(_BYTE **)(a2 + 912);
    v19 = v18 - v17;
    if (v18 != v17)
    {
      if (v19 < 0)
        sub_2394189F8();
      v20 = (char *)operator new(v18 - v17);
      *(_QWORD *)(a1 + 904) = v20;
      *(_QWORD *)(a1 + 912) = v20;
      *(_QWORD *)(a1 + 920) = &v20[32 * (v19 >> 5)];
      memcpy(v20, v17, v19 & 0xFFFFFFFFFFFFFFE0);
      *(_QWORD *)(a1 + 912) = &v20[v19 & 0xFFFFFFFFFFFFFFE0];
    }
    *(_BYTE *)(a1 + 928) = 1;
  }
  return a1;
}

void sub_239A4D4C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  if (*(_BYTE *)(v1 + 896))
  {
    v7 = *(_QWORD **)(v1 + 872);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    v9 = *v5;
    *v5 = 0;
    if (v9)
      operator delete(v9);
  }
  sub_239464B6C(v4);
  sub_23959F2D4(v3);
  sub_23959F2D4(v2);
  sub_239A4F8AC(v1);
  _Unwind_Resume(a1);
}

char *sub_239A4D588(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *result;
  char *v7;

  result = (char *)operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
  v7 = result;
  if (result)
  {
    *((_QWORD *)result + 1) = *a2;
    *a2 = 0;
    result += 16;
    if (*(char *)(a3 + 23) < 0)
    {
      result = (char *)sub_23941A7F8(result, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)result = *(_OWORD *)a3;
      *((_QWORD *)v7 + 4) = *(_QWORD *)(a3 + 16);
    }
    *((_DWORD *)v7 + 10) = 1;
    *(_QWORD *)v7 = off_250AF2A40;
  }
  *a1 = v7;
  return result;
}

void sub_239A4D624(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_239A6A4A8(v2);
  MEMORY[0x23B83E310](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_239A4D648(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  void **v9;
  void *v10;
  void **v11;
  void *v12;
  void *v13;
  _QWORD *v15;
  void *v16;
  void *v17;
  void **v18;
  void **v19;

  if (*(_BYTE *)(a1 + 928))
  {
    v2 = *(void **)(a1 + 904);
    if (v2)
    {
      *(_QWORD *)(a1 + 912) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 896))
  {
    v3 = *(_QWORD **)(a1 + 872);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)(a1 + 856);
    *(_QWORD *)(a1 + 856) = 0;
    if (v5)
      operator delete(v5);
  }
  v6 = *(void **)(a1 + 832);
  if (v6)
  {
    *(_QWORD *)(a1 + 840) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD **)(a1 + 808);
  if (v7)
  {
    do
    {
      v15 = (_QWORD *)*v7;
      v16 = (void *)v7[6];
      if (v16)
      {
        v7[7] = v16;
        operator delete(v16);
      }
      v17 = (void *)v7[3];
      if (v17)
      {
        v7[4] = v17;
        operator delete(v17);
      }
      operator delete(v7);
      v7 = v15;
    }
    while (v15);
  }
  v8 = *(void **)(a1 + 792);
  *(_QWORD *)(a1 + 792) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(void ***)(a1 + 512);
  if (v9)
  {
    do
    {
      v18 = (void **)*v9;
      if (*((char *)v9 + 47) < 0)
        operator delete(v9[3]);
      operator delete(v9);
      v9 = v18;
    }
    while (v18);
  }
  v10 = *(void **)(a1 + 496);
  *(_QWORD *)(a1 + 496) = 0;
  if (v10)
    operator delete(v10);
  v11 = *(void ***)(a1 + 472);
  if (v11)
  {
    do
    {
      v19 = (void **)*v11;
      if (*((char *)v11 + 47) < 0)
        operator delete(v11[3]);
      operator delete(v11);
      v11 = v19;
    }
    while (v19);
  }
  v12 = *(void **)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;
  if (v12)
    operator delete(v12);
  sub_239A4E1A4((_QWORD *)(a1 + 112));
  sub_239A4E2B0(a1 + 72);
  sub_239A4E348(a1 + 32);
  v13 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t sub_239A4D7C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

double sub_239A4D818(uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

std::string *sub_239A4D8DC(std::string *__dst, const std::string *a2)
{
  __int128 v3;

  if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(__dst, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_23941A7F8(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return __dst;
}

_QWORD *sub_239A4D944(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xD0uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_250ADED90;
  result = sub_23996301C((uint64_t)(v2 + 3));
  *a1 = result;
  a1[1] = v2;
  return result;
}

void sub_239A4D984(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A4D99C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xD0uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_250AF0680;
  result = sub_23996179C((uint64_t)(v2 + 3));
  *a1 = result;
  a1[1] = v2;
  return result;
}

void sub_239A4D9DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_239A4D9F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  std::string *v6;
  void **v7;
  char *v8;
  void **v9;
  void **v10;
  uint64_t v12;
  _QWORD *v14;
  uint64_t *v15;
  char v16;
  void **v17;
  void **p_data;
  uint64_t *v19;
  char v20;
  uint64_t *v21;
  char v22;
  void **v23;
  void **v24;
  uint64_t *v25;
  char v26;
  uint64_t *v27;
  char v28;
  void **v29;
  void **v30;
  uint64_t *v31;
  char v32;
  uint64_t *v33;
  char v34;
  void **v35;
  char *v36;
  std::string *v37;
  std::string v38;
  void *__p[2];
  uint64_t v40;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v40 = *(_QWORD *)(a2 + 16);
  }
  v4 = HIBYTE(v40);
  v5 = HIBYTE(v40);
  v6 = (std::string *)__p[0];
  if (v40 >= 0)
  {
    v7 = __p;
  }
  else
  {
    v4 = (uint64_t)__p[1];
    v7 = (void **)__p[0];
  }
  if (v4 >= 11)
  {
    v8 = (char *)v7 + v4;
    v9 = v7;
    do
    {
      v10 = (void **)memchr(v9, 98, v4 - 10);
      if (!v10)
        break;
      if (*v10 == (void *)0x656D5F64656B6162 && *(void **)((char *)v10 + 3) == (void *)0x5F6873656D5F6465)
      {
        v12 = 0;
        if (v10 != (void **)v8 && v10 == v7)
        {
          v14 = (_QWORD *)*a1;
          if (*(char *)(*a1 + 23) < 0)
            v14 = (_QWORD *)*v14;
          *((_BYTE *)v7 + 11) = *(_BYTE *)v14;
          v15 = (uint64_t *)*a1;
          if (*(char *)(*a1 + 23) < 0)
            v15 = (uint64_t *)*v15;
          v16 = *((_BYTE *)v15 + 1);
          v17 = __p;
          if (v40 >= 0)
            p_data = __p;
          else
            p_data = (void **)&v6->__r_.__value_.__l.__data_;
          *((_BYTE *)p_data + 12) = v16;
          v19 = (uint64_t *)*a1;
          if (*(char *)(*a1 + 23) < 0)
            v19 = (uint64_t *)*v19;
          v20 = *((_BYTE *)v19 + 2);
          if (v40 < 0)
            v17 = (void **)&v6->__r_.__value_.__l.__data_;
          *((_BYTE *)v17 + 13) = v20;
          v21 = (uint64_t *)*a1;
          if (*(char *)(*a1 + 23) < 0)
            v21 = (uint64_t *)*v21;
          v22 = *((_BYTE *)v21 + 3);
          v23 = __p;
          if (v40 >= 0)
            v24 = __p;
          else
            v24 = (void **)&v6->__r_.__value_.__l.__data_;
          *((_BYTE *)v24 + 14) = v22;
          v25 = (uint64_t *)*a1;
          if (*(char *)(*a1 + 23) < 0)
            v25 = (uint64_t *)*v25;
          v26 = *((_BYTE *)v25 + 4);
          if (v40 < 0)
            v23 = (void **)&v6->__r_.__value_.__l.__data_;
          *((_BYTE *)v23 + 15) = v26;
          v27 = (uint64_t *)*a1;
          if (*(char *)(*a1 + 23) < 0)
            v27 = (uint64_t *)*v27;
          v28 = *((_BYTE *)v27 + 5);
          v29 = __p;
          if (v40 >= 0)
            v30 = __p;
          else
            v30 = (void **)&v6->__r_.__value_.__l.__data_;
          *((_BYTE *)v30 + 16) = v28;
          v31 = (uint64_t *)*a1;
          if (*(char *)(*a1 + 23) < 0)
            v31 = (uint64_t *)*v31;
          v32 = *((_BYTE *)v31 + 6);
          if (v40 < 0)
            v29 = (void **)&v6->__r_.__value_.__l.__data_;
          *((_BYTE *)v29 + 17) = v32;
          v33 = (uint64_t *)*a1;
          if (*(char *)(*a1 + 23) < 0)
            v33 = (uint64_t *)*v33;
          v34 = *((_BYTE *)v33 + 7);
          if (v40 >= 0)
            v35 = __p;
          else
            v35 = (void **)&v6->__r_.__value_.__l.__data_;
          *((_BYTE *)v35 + 18) = v34;
          memset(&v38, 0, sizeof(v38));
          v36 = (char *)HIBYTE(v40);
          if (v40 >= 0)
            v37 = (std::string *)__p;
          else
            v37 = v6;
          if (v40 < 0)
            v36 = (char *)__p[1];
          sub_23948900C(&v38, v37, (std::string *)&v36[(_QWORD)v37]);
          if (*(char *)(a2 + 23) < 0)
            operator delete(*(void **)a2);
          *(std::string *)a2 = v38;
          v12 = 1;
          v5 = HIBYTE(v40);
        }
        goto LABEL_16;
      }
      v9 = (void **)((char *)v10 + 1);
      v4 = v8 - (char *)v9;
    }
    while (v8 - (char *)v9 >= 11);
  }
  v12 = 0;
LABEL_16:
  if (v5 < 0)
    operator delete(__p[0]);
  return v12;
}

void sub_239A4DC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

std::string *sub_239A4DCBC(std::string *this, std::string *a2)
{
  std::string *v3;
  int v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = (std::string *)((char *)a2 - 1);
  do
  {
    v4 = v3->__r_.__value_.__s.__data_[1];
    v3 = (std::string *)((char *)v3 + 1);
  }
  while (v4);
  sub_23948900C(this, a2, v3);
  return this;
}

void sub_239A4DCF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_239A4DD14(const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2;

  v2 = *((_QWORD *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) == 0;
}

uint64_t sub_239A4DD4C(uint64_t a1, std::string **a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if ((std::string **)a1 != a2)
      sub_239587ED8(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_239A49624((_QWORD *)a1, (uint64_t)*a2, (uint64_t)a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t sub_239A4DDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  sub_2396B3B88(&v63, a3);
  sub_239670E88(&v61, a4);
  sub_2396B3B88(&v59, a5);
  sub_239670E88(&v57, a6);
  sub_239670E88(&v55, a7);
  sub_2396B3B88(&v53, a8);
  sub_239670E88(&v51, a9);
  sub_2396B3B88(&v49, a10);
  sub_239601718(&v47, a11);
  sub_239A4916C((_QWORD *)a1, a2, (uint64_t)&v63, (uint64_t)&v61, (uint64_t)&v59, (uint64_t)&v57, (uint64_t)&v55, (uint64_t)&v53, (uint64_t)&v51, (uint64_t)&v49, (uint64_t)&v47, *a12);
  v19 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v50;
  if (v50)
  {
    v23 = (unint64_t *)&v50->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v52;
  if (v52)
  {
    v26 = (unint64_t *)&v52->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v54;
  if (v54)
  {
    v29 = (unint64_t *)&v54->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v56;
  if (v56)
  {
    v32 = (unint64_t *)&v56->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v58;
  if (v58)
  {
    v35 = (unint64_t *)&v58->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v60;
  if (v60)
  {
    v38 = (unint64_t *)&v60->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v62;
  if (v62)
  {
    v41 = (unint64_t *)&v62->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v64;
  if (v64)
  {
    v44 = (unint64_t *)&v64->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  *(_QWORD *)a1 = &off_250AF2740;
  *(_DWORD *)(a1 + 168) = 1;
  return a1;
}

void sub_239A4E0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;
  uint64_t v18;
  uint64_t v19;
  va_list va4;
  uint64_t v21;
  va_list va5;

  va_start(va5, a5);
  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v16 = va_arg(va4, _QWORD);
  v18 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v19 = va_arg(va5, _QWORD);
  v21 = va_arg(va5, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  sub_239416DA0((uint64_t)va3);
  sub_239416DA0((uint64_t)va4);
  sub_239416DA0((uint64_t)va5);
  sub_239416DA0(v5 - 112);
  sub_239416DA0(v5 - 96);
  sub_239416DA0(v5 - 80);
  _Unwind_Resume(a1);
}

void sub_239A4E15C()
{
  JUMPOUT(0x239A4E134);
}

void sub_239A4E164()
{
  JUMPOUT(0x239A4E13CLL);
}

void sub_239A4E16C()
{
  JUMPOUT(0x239A4E144);
}

void sub_239A4E174()
{
  JUMPOUT(0x239A4E14CLL);
}

void sub_239A4E180(_QWORD *a1)
{
  sub_239A48E98(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A4E1A4(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void **v14;
  void **v15;
  void *v16;
  void *v17;

  v2 = (void *)a1[21];
  if (v2)
    operator delete(v2);
  v3 = (void *)a1[18];
  if (v3)
  {
    a1[19] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[15];
  if (v4)
  {
    v5 = (_QWORD *)a1[16];
    v6 = (void *)a1[15];
    if (v5 != v4)
    {
      do
      {
        v7 = (_QWORD *)*(v5 - 3);
        if (v7)
        {
          do
          {
            v8 = (_QWORD *)*v7;
            operator delete(v7);
            v7 = v8;
          }
          while (v8);
        }
        v10 = (void *)*(v5 - 5);
        v5 -= 5;
        v9 = v10;
        *v5 = 0;
        if (v10)
          operator delete(v9);
      }
      while (v5 != v4);
      v6 = (void *)a1[15];
    }
    a1[16] = v4;
    operator delete(v6);
  }
  v11 = (_QWORD *)a1[12];
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = (void *)a1[10];
  a1[10] = 0;
  if (v13)
    operator delete(v13);
  v14 = (void **)a1[7];
  if (v14)
  {
    do
    {
      v15 = (void **)*v14;
      free(v14[8]);
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = (void *)a1[5];
  a1[5] = 0;
  if (v16)
    operator delete(v16);
  v17 = (void *)a1[2];
  if (v17)
  {
    a1[3] = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t sub_239A4E2B0(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (_QWORD *)*((_QWORD *)v2 + 56);
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)*((_QWORD *)v2 + 54);
      *((_QWORD *)v2 + 54) = 0;
      if (v8)
        operator delete(v8);
      if (v2[295] < 0)
        operator delete(*((void **)v2 + 34));
      free(*((void **)v2 + 8));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_239A4E348(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[16];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[14];
      v2[14] = 0;
      if (v8)
        operator delete(v8);
      if (*((_BYTE *)v2 + 104))
        sub_239916980((uint64_t)(v2 + 9));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_239A4E3D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  __int16 v8;
  uint64_t v9;
  _QWORD *v10;
  size_t prime;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t **v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  int8x8_t v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  _QWORD *v44;
  size_t v45;
  uint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t **v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  size_t v58;
  void *v59;
  float v60;
  float v61;
  _BOOL8 v62;
  unint64_t v63;
  unint64_t v64;
  size_t v65;
  int8x8_t v66;
  unint64_t v67;
  uint8x8_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t *v72;
  size_t v73;
  uint64_t *v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint8x8_t v78;
  uint64_t **v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  float v90;
  float v91;
  _BOOL8 v92;
  unint64_t v93;
  unint64_t v94;
  size_t v95;
  unint64_t v96;
  uint8x8_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  int64_t v111;
  char *v112;
  char *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  unint64_t v123;
  uint8x8_t v124;
  uint64_t v125;
  unint64_t v126;
  uint8x8_t v127;
  uint64_t v128;
  unint64_t v129;
  uint8x8_t v130;
  uint64_t v131;
  std::bad_alloc *exception;
  std::bad_alloc *v133;
  uint64_t *v134;
  char *v135;
  char *v136;
  void *memptr;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v7 = (char *)operator new(v5 - *a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[64 * ((uint64_t)v6 >> 6)];
    do
    {
      *(_DWORD *)v7 = *(_DWORD *)v4;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(v4 + 8);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v4 + 24);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v4 + 40);
      v8 = *(_WORD *)(v4 + 56);
      v7[58] = *(_BYTE *)(v4 + 58);
      *((_WORD *)v7 + 28) = v8;
      *(_WORD *)(v7 + 59) = *(_WORD *)(v4 + 59);
      v7 += 64;
      v4 += 64;
    }
    while (v4 != v5);
    *(_QWORD *)(a1 + 8) = v7;
  }
  v9 = a2[3];
  *(_OWORD *)(a1 + 32) = 0u;
  v10 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  v134 = a2;
  prime = a2[5];
  if (prime == 1)
  {
    prime = 2;
LABEL_8:
    sub_239427FE0(a1 + 32, prime);
    goto LABEL_9;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(a2[5]);
    v6 = *(_QWORD *)(a1 + 40);
    v120 = prime >= v6;
    if (prime > v6)
      goto LABEL_8;
  }
  else
  {
    v6 = 0;
    v120 = 1;
    if (prime)
      goto LABEL_8;
  }
  if (!v120)
  {
    v123 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 56) / *(float *)(a1 + 64));
    if (v6 < 3 || (v124 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v124.i16[0] = vaddlv_u8(v124), v124.u32[0] > 1uLL))
    {
      v123 = std::__next_prime(v123);
    }
    else
    {
      v125 = 1 << -(char)__clz(v123 - 1);
      if (v123 >= 2)
        v123 = v125;
    }
    if (prime <= v123)
      prime = v123;
    if (prime < v6)
      goto LABEL_8;
  }
LABEL_9:
  v12 = (uint64_t *)a2[6];
  if (v12)
  {
    v13 = (_QWORD *)(a1 + 48);
    do
    {
      v14 = *((unsigned int *)v12 + 4);
      v15 = *(_QWORD *)(a1 + 40);
      if (v15)
      {
        v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          v6 = *((unsigned int *)v12 + 4);
          if (v15 <= v14)
            v6 = v14 % v15;
        }
        else
        {
          v6 = ((_DWORD)v15 - 1) & v14;
        }
        v17 = *(uint64_t ***)(*v10 + 8 * v6);
        if (v17)
        {
          v18 = *v17;
          if (v18)
          {
            if (v16.u32[0] < 2uLL)
            {
              while (1)
              {
                v20 = v18[1];
                if (v20 == v14)
                {
                  if (*((_DWORD *)v18 + 4) == (_DWORD)v14)
                    goto LABEL_70;
                }
                else if ((v20 & (v15 - 1)) != v6)
                {
                  goto LABEL_31;
                }
                v18 = (uint64_t *)*v18;
                if (!v18)
                  goto LABEL_31;
              }
            }
            do
            {
              v19 = v18[1];
              if (v19 == v14)
              {
                if (*((_DWORD *)v18 + 4) == (_DWORD)v14)
                  goto LABEL_70;
              }
              else
              {
                if (v19 >= v15)
                  v19 %= v15;
                if (v19 != v6)
                  break;
              }
              v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
        }
      }
LABEL_31:
      v21 = (char *)operator new(0x98uLL);
      v22 = v21;
      v135 = v21;
      *(_QWORD *)v21 = 0;
      *((_QWORD *)v21 + 1) = v14;
      *((_DWORD *)v21 + 4) = *((_DWORD *)v12 + 4);
      v23 = v12[5];
      *(_OWORD *)(v21 + 24) = *(_OWORD *)(v12 + 3);
      *((_QWORD *)v21 + 5) = v23;
      LOBYTE(v23) = *((_BYTE *)v12 + 50);
      *((_WORD *)v21 + 24) = *((_WORD *)v12 + 24);
      v21[50] = v23;
      *(_WORD *)(v21 + 51) = *(_WORD *)((char *)v12 + 51);
      v21[56] = 0;
      v21[104] = 0;
      if (*((_BYTE *)v12 + 104))
      {
        *(_OWORD *)(v21 + 56) = *(_OWORD *)(v12 + 7);
        sub_23948A5BC((_QWORD *)v21 + 9, (uint64_t)(v12 + 9));
        v22[104] = 1;
      }
      sub_239A50368((uint64_t)(v22 + 112), (uint64_t)(v12 + 14));
      v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 56) + 1);
      v25 = *(float *)(a1 + 64);
      if (!v15 || (float)(v25 * (float)v15) < v24)
      {
        v26 = (v15 & (v15 - 1)) != 0;
        if (v15 < 3)
          v26 = 1;
        v27 = v26 | (2 * v15);
        v28 = vcvtps_u32_f32(v24 / v25);
        if (v27 <= v28)
          v29 = v28;
        else
          v29 = v27;
        if (v29 == 1)
        {
          v29 = 2;
        }
        else if ((v29 & (v29 - 1)) != 0)
        {
          v29 = std::__next_prime(v29);
        }
        v30 = *(int8x8_t *)(a1 + 40);
        if (v29 > *(_QWORD *)&v30)
          goto LABEL_45;
        if (v29 < *(_QWORD *)&v30)
        {
          v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 56) / *(float *)(a1 + 64));
          if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
          {
            v31 = std::__next_prime(v31);
          }
          else
          {
            v33 = 1 << -(char)__clz(v31 - 1);
            if (v31 >= 2)
              v31 = v33;
          }
          if (v29 <= v31)
            v29 = v31;
          if (v29 < *(_QWORD *)&v30)
LABEL_45:
            sub_239427FE0(a1 + 32, v29);
        }
        v15 = *(_QWORD *)(a1 + 40);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v15 <= v14)
            v6 = v14 % v15;
          else
            v6 = v14;
        }
        else
        {
          v6 = ((_DWORD)v15 - 1) & v14;
        }
      }
      v34 = *(_QWORD **)(*v10 + 8 * v6);
      if (v34)
      {
        *(_QWORD *)v135 = *v34;
        *v34 = v135;
      }
      else
      {
        *(_QWORD *)v135 = *v13;
        *v13 = v135;
        *(_QWORD *)(*v10 + 8 * v6) = v13;
        if (*(_QWORD *)v135)
        {
          v35 = *(_QWORD *)(*(_QWORD *)v135 + 8);
          if ((v15 & (v15 - 1)) != 0)
          {
            if (v35 >= v15)
              v35 %= v15;
          }
          else
          {
            v35 &= v15 - 1;
          }
          *(_QWORD *)(*v10 + 8 * v35) = v135;
        }
      }
      ++*(_QWORD *)(a1 + 56);
LABEL_70:
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  v36 = (int8x8_t)a2;
  sub_239A4F8F4(a1 + 72, (uint64_t)(a2 + 9));
  v37 = a2[14];
  v38 = *((_DWORD *)a2 + 30);
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 120) = v38;
  *(_QWORD *)(a1 + 112) = v37;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v40 = (_BYTE *)a2[16];
  v39 = (_BYTE *)a2[17];
  v41 = v39 - v40;
  if (v39 != v40)
  {
    if (v41 < 0)
      sub_2394189F8();
    v42 = (char *)operator new(v39 - v40);
    *(_QWORD *)(a1 + 128) = v42;
    *(_QWORD *)(a1 + 136) = v42;
    *(_QWORD *)(a1 + 144) = &v42[128 * (v41 >> 7)];
    v43 = v41 & 0xFFFFFFFFFFFFFF80;
    memcpy(v42, v40, v43);
    *(_QWORD *)(a1 + 136) = &v42[v43];
  }
  *(_OWORD *)(a1 + 152) = 0u;
  v44 = (_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = *((_DWORD *)a2 + 46);
  v45 = a2[20];
  if (v45 == 1)
  {
    v45 = 2;
LABEL_76:
    sub_239427FE0(a1 + 152, v45);
    goto LABEL_77;
  }
  if ((v45 & (v45 - 1)) != 0)
  {
    v45 = std::__next_prime(v45);
    v36 = *(int8x8_t *)(a1 + 160);
    v121 = v45 >= *(_QWORD *)&v36;
    if (v45 > *(_QWORD *)&v36)
      goto LABEL_76;
  }
  else
  {
    v36 = 0;
    v121 = 1;
    if (v45)
      goto LABEL_76;
  }
  if (!v121)
  {
    v126 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 176) / *(float *)(a1 + 184));
    if (*(_QWORD *)&v36 < 3uLL || (v127 = (uint8x8_t)vcnt_s8(v36), v127.i16[0] = vaddlv_u8(v127), v127.u32[0] > 1uLL))
    {
      v126 = std::__next_prime(v126);
    }
    else
    {
      v128 = 1 << -(char)__clz(v126 - 1);
      if (v126 >= 2)
        v126 = v128;
    }
    if (v45 <= v126)
      v45 = v126;
    if (v45 < *(_QWORD *)&v36)
      goto LABEL_76;
  }
LABEL_77:
  v46 = (uint64_t *)a2[21];
  if (v46)
  {
    v47 = (_QWORD *)(a1 + 168);
    do
    {
      v48 = *((unsigned int *)v46 + 4);
      v49 = *(_QWORD *)(a1 + 160);
      if (v49)
      {
        v50 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
        v50.i16[0] = vaddlv_u8(v50);
        if (v50.u32[0] > 1uLL)
        {
          v36 = (int8x8_t)*((unsigned int *)v46 + 4);
          if (v49 <= v48)
            v36 = (int8x8_t)(v48 % v49);
        }
        else
        {
          v36 = (int8x8_t)(((_DWORD)v49 - 1) & v48);
        }
        v51 = *(uint64_t ***)(*v44 + 8 * *(_QWORD *)&v36);
        if (v51)
        {
          v52 = *v51;
          if (v52)
          {
            if (v50.u32[0] < 2uLL)
            {
              while (1)
              {
                v54 = v52[1];
                if (v54 == v48)
                {
                  if (*((_DWORD *)v52 + 4) == (_DWORD)v48)
                    goto LABEL_139;
                }
                else if ((v54 & (v49 - 1)) != *(_QWORD *)&v36)
                {
                  goto LABEL_99;
                }
                v52 = (uint64_t *)*v52;
                if (!v52)
                  goto LABEL_99;
              }
            }
            do
            {
              v53 = v52[1];
              if (v53 == v48)
              {
                if (*((_DWORD *)v52 + 4) == (_DWORD)v48)
                  goto LABEL_139;
              }
              else
              {
                if (v53 >= v49)
                  v53 %= v49;
                if (v53 != *(_QWORD *)&v36)
                  break;
              }
              v52 = (uint64_t *)*v52;
            }
            while (v52);
          }
        }
      }
LABEL_99:
      v55 = (char *)operator new(0x58uLL);
      v136 = v55;
      *(_QWORD *)v55 = 0;
      *((_QWORD *)v55 + 1) = v48;
      *((_DWORD *)v55 + 4) = *((_DWORD *)v46 + 4);
      v56 = *(_OWORD *)(v46 + 5);
      *(_OWORD *)(v55 + 24) = *(_OWORD *)(v46 + 3);
      *(_OWORD *)(v55 + 40) = v56;
      v55[56] = *((_BYTE *)v46 + 56);
      v57 = *((unsigned int *)v46 + 20);
      v58 = (8 * v57 + 31) & 0xFFFFFFFE0;
      *((_QWORD *)v55 + 8) = 0;
      *((_QWORD *)v55 + 9) = v58 >> 3;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v58, 0x100BBD03uLL);
      v59 = memptr;
      *((_QWORD *)v55 + 8) = memptr;
      if (!v59)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v133 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v133, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      if ((_DWORD)v57)
        memcpy(v59, (const void *)v46[8], 8 * v57);
      *((_DWORD *)v55 + 20) = *((_DWORD *)v46 + 20);
      v60 = (float)(unint64_t)(*(_QWORD *)(a1 + 176) + 1);
      v61 = *(float *)(a1 + 184);
      if (!v49 || (float)(v61 * (float)v49) < v60)
      {
        v62 = (v49 & (v49 - 1)) != 0;
        if (v49 < 3)
          v62 = 1;
        v63 = v62 | (2 * v49);
        v64 = vcvtps_u32_f32(v60 / v61);
        if (v63 <= v64)
          v65 = v64;
        else
          v65 = v63;
        if (v65 == 1)
        {
          v65 = 2;
        }
        else if ((v65 & (v65 - 1)) != 0)
        {
          v65 = std::__next_prime(v65);
        }
        v66 = *(int8x8_t *)(a1 + 160);
        if (v65 > *(_QWORD *)&v66)
          goto LABEL_114;
        if (v65 < *(_QWORD *)&v66)
        {
          v67 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 176) / *(float *)(a1 + 184));
          if (*(_QWORD *)&v66 < 3uLL || (v68 = (uint8x8_t)vcnt_s8(v66), v68.i16[0] = vaddlv_u8(v68), v68.u32[0] > 1uLL))
          {
            v67 = std::__next_prime(v67);
          }
          else
          {
            v69 = 1 << -(char)__clz(v67 - 1);
            if (v67 >= 2)
              v67 = v69;
          }
          if (v65 <= v67)
            v65 = v67;
          if (v65 < *(_QWORD *)&v66)
LABEL_114:
            sub_239427FE0(a1 + 152, v65);
        }
        v49 = *(_QWORD *)(a1 + 160);
        if ((v49 & (v49 - 1)) != 0)
        {
          if (v49 <= v48)
            v36 = (int8x8_t)(v48 % v49);
          else
            v36 = (int8x8_t)v48;
        }
        else
        {
          v36 = (int8x8_t)(((_DWORD)v49 - 1) & v48);
        }
      }
      v70 = *(_QWORD **)(*v44 + 8 * *(_QWORD *)&v36);
      if (v70)
      {
        *(_QWORD *)v136 = *v70;
        *v70 = v136;
      }
      else
      {
        *(_QWORD *)v136 = *v47;
        *v47 = v136;
        *(_QWORD *)(*v44 + 8 * *(_QWORD *)&v36) = v47;
        if (*(_QWORD *)v136)
        {
          v71 = *(_QWORD *)(*(_QWORD *)v136 + 8);
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v71 >= v49)
              v71 %= v49;
          }
          else
          {
            v71 &= v49 - 1;
          }
          *(_QWORD *)(*v44 + 8 * v71) = v136;
        }
      }
      ++*(_QWORD *)(a1 + 176);
LABEL_139:
      v46 = (uint64_t *)*v46;
    }
    while (v46);
  }
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v72 = (uint64_t *)(a1 + 192);
  *(_DWORD *)(a1 + 224) = *((_DWORD *)v134 + 56);
  v73 = v134[25];
  if (v73 == 1)
  {
    v73 = 2;
LABEL_142:
    sub_239427FE0(a1 + 192, v73);
    goto LABEL_143;
  }
  if ((v73 & (v73 - 1)) != 0)
  {
    v73 = std::__next_prime(v134[25]);
    v36 = *(int8x8_t *)(a1 + 200);
    v122 = v73 >= *(_QWORD *)&v36;
    if (v73 > *(_QWORD *)&v36)
      goto LABEL_142;
  }
  else
  {
    v36 = 0;
    v122 = 1;
    if (v73)
      goto LABEL_142;
  }
  if (!v122)
  {
    v129 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 216) / *(float *)(a1 + 224));
    if (*(_QWORD *)&v36 < 3uLL || (v130 = (uint8x8_t)vcnt_s8(v36), v130.i16[0] = vaddlv_u8(v130), v130.u32[0] > 1uLL))
    {
      v129 = std::__next_prime(v129);
    }
    else
    {
      v131 = 1 << -(char)__clz(v129 - 1);
      if (v129 >= 2)
        v129 = v131;
    }
    if (v73 <= v129)
      v73 = v129;
    if (v73 < *(_QWORD *)&v36)
      goto LABEL_142;
  }
LABEL_143:
  v74 = (uint64_t *)v134[26];
  if (v74)
  {
    v75 = (_QWORD *)(a1 + 208);
    v76 = *(_QWORD *)(a1 + 200);
    do
    {
      v77 = *((unsigned int *)v74 + 4);
      if (v76)
      {
        v78 = (uint8x8_t)vcnt_s8((int8x8_t)v76);
        v78.i16[0] = vaddlv_u8(v78);
        if (v78.u32[0] > 1uLL)
        {
          v36 = (int8x8_t)*((unsigned int *)v74 + 4);
          if (v76 <= v77)
            v36 = (int8x8_t)(v77 % v76);
        }
        else
        {
          v36 = (int8x8_t)(((_DWORD)v76 - 1) & v77);
        }
        v79 = *(uint64_t ***)(*v72 + 8 * *(_QWORD *)&v36);
        if (v79)
        {
          v80 = *v79;
          if (v80)
          {
            if (v78.u32[0] < 2uLL)
            {
              while (1)
              {
                v82 = v80[1];
                if (v82 == v77)
                {
                  if (*((_DWORD *)v80 + 4) == (_DWORD)v77)
                    goto LABEL_204;
                }
                else if ((v82 & (v76 - 1)) != *(_QWORD *)&v36)
                {
                  goto LABEL_165;
                }
                v80 = (uint64_t *)*v80;
                if (!v80)
                  goto LABEL_165;
              }
            }
            do
            {
              v81 = v80[1];
              if (v81 == v77)
              {
                if (*((_DWORD *)v80 + 4) == (_DWORD)v77)
                  goto LABEL_204;
              }
              else
              {
                if (v81 >= v76)
                  v81 %= v76;
                if (v81 != *(_QWORD *)&v36)
                  break;
              }
              v80 = (uint64_t *)*v80;
            }
            while (v80);
          }
        }
      }
LABEL_165:
      v83 = (char *)operator new(0x98uLL);
      *(_QWORD *)v83 = 0;
      *((_QWORD *)v83 + 1) = v77;
      *((_DWORD *)v83 + 4) = *((_DWORD *)v74 + 4);
      v84 = *(_OWORD *)(v74 + 3);
      v85 = *(_OWORD *)(v74 + 5);
      v86 = *(_OWORD *)(v74 + 7);
      *(_OWORD *)(v83 + 72) = *(_OWORD *)(v74 + 9);
      *(_OWORD *)(v83 + 56) = v86;
      *(_OWORD *)(v83 + 40) = v85;
      *(_OWORD *)(v83 + 24) = v84;
      v87 = *(_OWORD *)(v74 + 11);
      v88 = *(_OWORD *)(v74 + 13);
      v89 = *(_OWORD *)(v74 + 15);
      *(_OWORD *)(v83 + 136) = *(_OWORD *)(v74 + 17);
      *(_OWORD *)(v83 + 120) = v89;
      *(_OWORD *)(v83 + 104) = v88;
      *(_OWORD *)(v83 + 88) = v87;
      v90 = (float)(unint64_t)(*(_QWORD *)(a1 + 216) + 1);
      v91 = *(float *)(a1 + 224);
      if (!v76 || (float)(v91 * (float)v76) < v90)
      {
        v92 = v76 < 3 || (v76 & (v76 - 1)) != 0;
        v93 = v92 | (2 * v76);
        v94 = vcvtps_u32_f32(v90 / v91);
        if (v93 <= v94)
          v95 = v94;
        else
          v95 = v93;
        if (v95 == 1)
        {
          v95 = 2;
        }
        else if ((v95 & (v95 - 1)) != 0)
        {
          v95 = std::__next_prime(v95);
          v76 = *(_QWORD *)(a1 + 200);
        }
        if (v95 > v76)
          goto LABEL_178;
        if (v95 < v76)
        {
          v96 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 216) / *(float *)(a1 + 224));
          if (v76 < 3 || (v97 = (uint8x8_t)vcnt_s8((int8x8_t)v76), v97.i16[0] = vaddlv_u8(v97), v97.u32[0] > 1uLL))
          {
            v96 = std::__next_prime(v96);
          }
          else
          {
            v98 = 1 << -(char)__clz(v96 - 1);
            if (v96 >= 2)
              v96 = v98;
          }
          if (v95 <= v96)
            v95 = v96;
          if (v95 < v76)
LABEL_178:
            sub_239427FE0(a1 + 192, v95);
        }
        v76 = *(_QWORD *)(a1 + 200);
        if ((v76 & (v76 - 1)) != 0)
        {
          if (v76 <= v77)
            v36 = (int8x8_t)(v77 % v76);
          else
            v36 = (int8x8_t)v77;
        }
        else
        {
          v36 = (int8x8_t)(((_DWORD)v76 - 1) & v77);
        }
      }
      v99 = *v72;
      v100 = *(_QWORD **)(*v72 + 8 * *(_QWORD *)&v36);
      if (v100)
      {
        *(_QWORD *)v83 = *v100;
      }
      else
      {
        *(_QWORD *)v83 = *v75;
        *v75 = v83;
        *(_QWORD *)(v99 + 8 * *(_QWORD *)&v36) = v75;
        if (!*(_QWORD *)v83)
          goto LABEL_203;
        v101 = *(_QWORD *)(*(_QWORD *)v83 + 8);
        if ((v76 & (v76 - 1)) != 0)
        {
          if (v101 >= v76)
            v101 %= v76;
        }
        else
        {
          v101 &= v76 - 1;
        }
        v100 = (_QWORD *)(*v72 + 8 * v101);
      }
      *v100 = v83;
LABEL_203:
      ++*(_QWORD *)(a1 + 216);
LABEL_204:
      v74 = (uint64_t *)*v74;
    }
    while (v74);
  }
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v102 = v134;
  v103 = v134[29];
  v104 = v134[30];
  v105 = v104 - v103;
  if (v104 != v103)
  {
    v106 = 0xCCCCCCCCCCCCCCCDLL * (v105 >> 3);
    if (v106 >= 0x666666666666667)
      sub_2394189F8();
    v107 = (char *)operator new(v105);
    v108 = 0;
    *(_QWORD *)(a1 + 232) = v107;
    *(_QWORD *)(a1 + 240) = v107;
    *(_QWORD *)(a1 + 248) = &v107[40 * v106];
    do
    {
      sub_239A4FD24((uint64_t)&v107[v108], v103 + v108);
      v108 += 40;
    }
    while (v103 + v108 != v104);
    *(_QWORD *)(a1 + 240) = &v107[v108];
    v102 = v134;
  }
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  v110 = (_BYTE *)v102[32];
  v109 = (_BYTE *)v102[33];
  v111 = v109 - v110;
  if (v109 != v110)
  {
    if (v111 < 0)
      sub_2394189F8();
    v112 = (char *)operator new(v109 - v110);
    *(_QWORD *)(a1 + 256) = v112;
    *(_QWORD *)(a1 + 264) = v112;
    v113 = &v112[8 * (v111 >> 3)];
    *(_QWORD *)(a1 + 272) = v113;
    memcpy(v112, v110, v111);
    *(_QWORD *)(a1 + 264) = v113;
  }
  sub_23948C0E0((_QWORD *)(a1 + 280), (uint64_t)(v134 + 35));
  *(_QWORD *)(a1 + 304) = v134[38];
  *(_QWORD *)(a1 + 312) = v134[39];
  v114 = *((_OWORD *)v134 + 21);
  *(_OWORD *)(a1 + 320) = *((_OWORD *)v134 + 20);
  *(_OWORD *)(a1 + 336) = v114;
  v116 = *((_OWORD *)v134 + 24);
  v115 = *((_OWORD *)v134 + 25);
  v117 = *((_OWORD *)v134 + 23);
  *(_QWORD *)(a1 + 416) = v134[52];
  *(_OWORD *)(a1 + 384) = v116;
  *(_OWORD *)(a1 + 400) = v115;
  *(_OWORD *)(a1 + 368) = v117;
  *(_OWORD *)(a1 + 352) = *((_OWORD *)v134 + 22);
  v118 = *(_OWORD *)(v134 + 53);
  *(_QWORD *)(a1 + 440) = v134[55];
  *(_OWORD *)(a1 + 424) = v118;
  *(_DWORD *)(a1 + 448) = *((_DWORD *)v134 + 112);
  return a1;
}

void sub_239A4F26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v17;
  void *v18;
  void *v19;

  v17 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v11 + 264) = v17;
    operator delete(v17);
  }
  sub_2395191D0(v15);
  sub_239420950(v14);
  sub_239557A4C(v13);
  v18 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v11 + 136) = v18;
    operator delete(v18);
  }
  sub_239A4E2B0(a10);
  sub_239A4E348(a11);
  v19 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_239A4F3E4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t *i;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  int8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  _QWORD *v37;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v6 = *(int8x8_t *)(a1 + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v12 = *((unsigned int *)i + 4);
    v13 = *(_QWORD *)(a1 + 8);
    if (v13)
    {
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v2 = *((unsigned int *)i + 4);
        if (v13 <= v12)
          v2 = v12 % v13;
      }
      else
      {
        v2 = ((_DWORD)v13 - 1) & v12;
      }
      v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
      if (v15)
      {
        v16 = *v15;
        if (v16)
        {
          if (v14.u32[0] < 2uLL)
          {
            while (1)
            {
              v18 = v16[1];
              if (v18 == v12)
              {
                if (*((_DWORD *)v16 + 4) == (_DWORD)v12)
                  goto LABEL_76;
              }
              else if ((v18 & (v13 - 1)) != v2)
              {
                goto LABEL_39;
              }
              v16 = (uint64_t *)*v16;
              if (!v16)
                goto LABEL_39;
            }
          }
          do
          {
            v17 = v16[1];
            if (v17 == v12)
            {
              if (*((_DWORD *)v16 + 4) == (_DWORD)v12)
                goto LABEL_76;
            }
            else
            {
              if (v17 >= v13)
                v17 %= v13;
              if (v17 != v2)
                break;
            }
            v16 = (uint64_t *)*v16;
          }
          while (v16);
        }
      }
    }
LABEL_39:
    v37 = operator new(0x50uLL);
    *v37 = 0;
    v37[1] = v12;
    *((_DWORD *)v37 + 4) = *((_DWORD *)i + 4);
    sub_23943668C(v37 + 3, (uint64_t)(i + 3));
    v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v20 = *(float *)(a1 + 32);
    if (!v13 || (float)(v20 * (float)v13) < v19)
    {
      v21 = (v13 & (v13 - 1)) != 0;
      if (v13 < 3)
        v21 = 1;
      v22 = v21 | (2 * v13);
      v23 = vcvtps_u32_f32(v19 / v20);
      if (v22 <= v23)
        v24 = v23;
      else
        v24 = v22;
      if (v24 == 1)
      {
        v24 = 2;
      }
      else if ((v24 & (v24 - 1)) != 0)
      {
        v24 = std::__next_prime(v24);
      }
      v25 = *(int8x8_t *)(a1 + 8);
      if (v24 > *(_QWORD *)&v25)
        goto LABEL_51;
      if (v24 < *(_QWORD *)&v25)
      {
        v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (*(_QWORD *)&v25 < 3uLL || (v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
        {
          v26 = std::__next_prime(v26);
        }
        else
        {
          v28 = 1 << -(char)__clz(v26 - 1);
          if (v26 >= 2)
            v26 = v28;
        }
        if (v24 <= v26)
          v24 = v26;
        if (v24 < *(_QWORD *)&v25)
LABEL_51:
          sub_239427FE0(a1, v24);
      }
      v13 = *(_QWORD *)(a1 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v13 <= v12)
          v2 = v12 % v13;
        else
          v2 = v12;
      }
      else
      {
        v2 = ((_DWORD)v13 - 1) & v12;
      }
    }
    v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v29)
    {
      *v37 = *v29;
      *v29 = v37;
    }
    else
    {
      *v37 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v37;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
      if (*v37)
      {
        v30 = *(_QWORD *)(*v37 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v30 >= v13)
            v30 %= v13;
        }
        else
        {
          v30 &= v13 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v37;
      }
    }
    ++*(_QWORD *)(a1 + 24);
LABEL_76:
    ;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v32 = *(_BYTE **)(a2 + 40);
  v31 = *(_BYTE **)(a2 + 48);
  v33 = v31 - v32;
  if (v31 != v32)
  {
    if (v33 < 0)
      sub_2394189F8();
    v34 = (char *)operator new(v31 - v32);
    *(_QWORD *)(a1 + 40) = v34;
    *(_QWORD *)(a1 + 48) = v34;
    *(_QWORD *)(a1 + 56) = &v34[8 * (v33 >> 3)];
    v35 = v33 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v34, v32, v35);
    *(_QWORD *)(a1 + 48) = &v34[v35];
  }
  return a1;
}

void sub_239A4F814(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394327E4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A4F8AC(uint64_t a1)
{
  void *v2;

  sub_239A4E1A4((_QWORD *)(a1 + 112));
  sub_239A4E2B0(a1 + 72);
  sub_239A4E348(a1 + 32);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_239A4F8F4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t *i;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  int8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v32;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v6 = *(int8x8_t *)(a1 + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v12 = *((unsigned int *)i + 4);
    v13 = *(_QWORD *)(a1 + 8);
    if (v13)
    {
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v2 = *((unsigned int *)i + 4);
        if (v13 <= v12)
          v2 = v12 % v13;
      }
      else
      {
        v2 = ((_DWORD)v13 - 1) & v12;
      }
      v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
      if (v15)
      {
        v16 = *v15;
        if (v16)
        {
          if (v14.u32[0] < 2uLL)
          {
            while (1)
            {
              v18 = v16[1];
              if (v18 == v12)
              {
                if (*((_DWORD *)v16 + 4) == (_DWORD)v12)
                  goto LABEL_76;
              }
              else if ((v18 & (v13 - 1)) != v2)
              {
                goto LABEL_39;
              }
              v16 = (uint64_t *)*v16;
              if (!v16)
                goto LABEL_39;
            }
          }
          do
          {
            v17 = v16[1];
            if (v17 == v12)
            {
              if (*((_DWORD *)v16 + 4) == (_DWORD)v12)
                goto LABEL_76;
            }
            else
            {
              if (v17 >= v13)
                v17 %= v13;
              if (v17 != v2)
                break;
            }
            v16 = (uint64_t *)*v16;
          }
          while (v16);
        }
      }
    }
LABEL_39:
    v32 = operator new(0x1D8uLL);
    *v32 = 0;
    v32[1] = v12;
    *((_DWORD *)v32 + 4) = *((_DWORD *)i + 4);
    sub_2395F81B8((uint64_t)(v32 + 3), (uint64_t)(i + 3));
    sub_239A50368((uint64_t)(v32 + 54), (uint64_t)(i + 54));
    v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v20 = *(float *)(a1 + 32);
    if (!v13 || (float)(v20 * (float)v13) < v19)
    {
      v21 = (v13 & (v13 - 1)) != 0;
      if (v13 < 3)
        v21 = 1;
      v22 = v21 | (2 * v13);
      v23 = vcvtps_u32_f32(v19 / v20);
      if (v22 <= v23)
        v24 = v23;
      else
        v24 = v22;
      if (v24 == 1)
      {
        v24 = 2;
      }
      else if ((v24 & (v24 - 1)) != 0)
      {
        v24 = std::__next_prime(v24);
      }
      v25 = *(int8x8_t *)(a1 + 8);
      if (v24 > *(_QWORD *)&v25)
        goto LABEL_51;
      if (v24 < *(_QWORD *)&v25)
      {
        v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (*(_QWORD *)&v25 < 3uLL || (v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
        {
          v26 = std::__next_prime(v26);
        }
        else
        {
          v28 = 1 << -(char)__clz(v26 - 1);
          if (v26 >= 2)
            v26 = v28;
        }
        if (v24 <= v26)
          v24 = v26;
        if (v24 < *(_QWORD *)&v25)
LABEL_51:
          sub_239427FE0(a1, v24);
      }
      v13 = *(_QWORD *)(a1 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v13 <= v12)
          v2 = v12 % v13;
        else
          v2 = v12;
      }
      else
      {
        v2 = ((_DWORD)v13 - 1) & v12;
      }
    }
    v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v29)
    {
      *v32 = *v29;
      *v29 = v32;
    }
    else
    {
      *v32 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v32;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
      if (*v32)
      {
        v30 = *(_QWORD *)(*v32 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v30 >= v13)
            v30 %= v13;
        }
        else
        {
          v30 &= v13 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v32;
      }
    }
    ++*(_QWORD *)(a1 + 24);
LABEL_76:
    ;
  }
  return a1;
}

void sub_239A4FCD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239A4E2B0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A4FD24(uint64_t a1, uint64_t a2)
{
  unint64_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239A501C8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  v10 = *(uint64_t **)(a2 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 8);
    do
    {
      v13 = v10[2];
      if (v12)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          prime = v10[2];
          if (v13 >= v12)
            prime = v13 % v12;
        }
        else
        {
          prime = (v12 - 1) & v13;
        }
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
        if (v15)
        {
          v16 = (_QWORD *)*v15;
          if (v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                v18 = v16[1];
                if (v18 == v13)
                {
                  if (v16[2] == v13)
                    goto LABEL_79;
                }
                else if ((v18 & (v12 - 1)) != prime)
                {
                  goto LABEL_40;
                }
                v16 = (_QWORD *)*v16;
                if (!v16)
                  goto LABEL_40;
              }
            }
            do
            {
              v17 = v16[1];
              if (v17 == v13)
              {
                if (v16[2] == v13)
                  goto LABEL_79;
              }
              else
              {
                if (v17 >= v12)
                  v17 %= v12;
                if (v17 != prime)
                  break;
              }
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_40:
      v19 = (char *)operator new(0xA0uLL);
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v13;
      *((_OWORD *)v19 + 1) = *((_OWORD *)v10 + 1);
      v20 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v19 + 2) = *((_OWORD *)v10 + 2);
      *((_OWORD *)v19 + 3) = v20;
      v22 = *((_OWORD *)v10 + 6);
      v21 = *((_OWORD *)v10 + 7);
      v23 = *((_OWORD *)v10 + 5);
      *((_QWORD *)v19 + 16) = v10[16];
      *((_OWORD *)v19 + 6) = v22;
      *((_OWORD *)v19 + 7) = v21;
      *((_OWORD *)v19 + 5) = v23;
      *((_OWORD *)v19 + 4) = *((_OWORD *)v10 + 4);
      v24 = *(_OWORD *)(v10 + 17);
      *((_QWORD *)v19 + 19) = v10[19];
      *(_OWORD *)(v19 + 136) = v24;
      v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v26 = *(float *)(a1 + 32);
      if (!v12 || (float)(v26 * (float)v12) < v25)
      {
        v27 = v12 < 3 || (v12 & (v12 - 1)) != 0;
        v28 = v27 | (2 * v12);
        v29 = vcvtps_u32_f32(v25 / v26);
        if (v28 <= v29)
          v30 = v29;
        else
          v30 = v28;
        if (v30 == 1)
        {
          v30 = 2;
        }
        else if ((v30 & (v30 - 1)) != 0)
        {
          v30 = std::__next_prime(v30);
          v12 = *(_QWORD *)(a1 + 8);
        }
        if (v30 > v12)
          goto LABEL_53;
        if (v30 < v12)
        {
          v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
          {
            v31 = std::__next_prime(v31);
          }
          else
          {
            v33 = 1 << -(char)__clz(v31 - 1);
            if (v31 >= 2)
              v31 = v33;
          }
          if (v30 <= v31)
            v30 = v31;
          if (v30 < v12)
LABEL_53:
            sub_239A501C8(a1, v30);
        }
        v12 = *(_QWORD *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v13 >= v12)
            prime = v13 % v12;
          else
            prime = v13;
        }
        else
        {
          prime = (v12 - 1) & v13;
        }
      }
      v34 = *(_QWORD *)a1;
      v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
      if (v35)
      {
        *(_QWORD *)v19 = *v35;
      }
      else
      {
        *(_QWORD *)v19 = *v11;
        *v11 = v19;
        *(_QWORD *)(v34 + 8 * prime) = v11;
        if (!*(_QWORD *)v19)
          goto LABEL_78;
        v36 = *(_QWORD *)(*(_QWORD *)v19 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v36 >= v12)
            v36 %= v12;
        }
        else
        {
          v36 &= v12 - 1;
        }
        v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
      }
      *v35 = v19;
LABEL_78:
      ++*(_QWORD *)(a1 + 24);
LABEL_79:
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  return a1;
}

void sub_239A50104(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

void ***sub_239A5012C(void ***a1)
{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = **a1;
    if (v3)
    {
      v4 = v2[1];
      v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          v6 = (_QWORD *)*(v4 - 3);
          if (v6)
          {
            do
            {
              v7 = (_QWORD *)*v6;
              operator delete(v6);
              v6 = v7;
            }
            while (v7);
          }
          v9 = (void *)*(v4 - 5);
          v4 -= 5;
          v8 = v9;
          *v4 = 0;
          if (v9)
            operator delete(v8);
        }
        while (v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_239A501C8(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_239418A80();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
            goto LABEL_26;
          }
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
        }
        v18 = v9;
LABEL_26:
        v7 = v16;
        v16 = (_QWORD *)*v16;
        v9 = v18;
      }
      while (v16);
    }
  }
}

uint64_t sub_239A50368(uint64_t a1, uint64_t a2)
{
  unint64_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t **v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  v10 = *(uint64_t ***)(a2 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 8);
    do
    {
      v13 = *((unsigned int *)v10 + 4);
      if (v12)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          prime = *((unsigned int *)v10 + 4);
          if (v12 <= v13)
            prime = v13 % v12;
        }
        else
        {
          prime = ((_DWORD)v12 - 1) & v13;
        }
        v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * prime);
        if (v15)
        {
          v16 = *v15;
          if (v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                v18 = v16[1];
                if (v18 == v13)
                {
                  if (*((_DWORD *)v16 + 4) == (_DWORD)v13)
                    goto LABEL_78;
                }
                else if ((v18 & (v12 - 1)) != prime)
                {
                  goto LABEL_40;
                }
                v16 = (uint64_t *)*v16;
                if (!v16)
                  goto LABEL_40;
              }
            }
            do
            {
              v17 = v16[1];
              if (v17 == v13)
              {
                if (*((_DWORD *)v16 + 4) == (_DWORD)v13)
                  goto LABEL_78;
              }
              else
              {
                if (v17 >= v12)
                  v17 %= v12;
                if (v17 != prime)
                  break;
              }
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_40:
      v19 = operator new(0x18uLL);
      *v19 = 0;
      v19[1] = v13;
      v19[2] = v10[2];
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (!v12 || (float)(v21 * (float)v12) < v20)
      {
        v22 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3)
          v22 = 1;
        v23 = v22 | (2 * v12);
        v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24)
          v25 = v24;
        else
          v25 = v23;
        if (v25 == 1)
        {
          v25 = 2;
        }
        else if ((v25 & (v25 - 1)) != 0)
        {
          v25 = std::__next_prime(v25);
          v12 = *(_QWORD *)(a1 + 8);
        }
        if (v25 > v12)
          goto LABEL_52;
        if (v25 < v12)
        {
          v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
          {
            v26 = std::__next_prime(v26);
          }
          else
          {
            v28 = 1 << -(char)__clz(v26 - 1);
            if (v26 >= 2)
              v26 = v28;
          }
          if (v25 <= v26)
            v25 = v26;
          if (v25 < v12)
LABEL_52:
            sub_239427FE0(a1, v25);
        }
        v12 = *(_QWORD *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v12 <= v13)
            prime = v13 % v12;
          else
            prime = v13;
        }
        else
        {
          prime = ((_DWORD)v12 - 1) & v13;
        }
      }
      v29 = *(_QWORD *)a1;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
      if (v30)
      {
        *v19 = *v30;
      }
      else
      {
        *v19 = *v11;
        *v11 = v19;
        *(_QWORD *)(v29 + 8 * prime) = v11;
        if (!*v19)
          goto LABEL_77;
        v31 = *(_QWORD *)(*v19 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v31 >= v12)
            v31 %= v12;
        }
        else
        {
          v31 &= v12 - 1;
        }
        v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
      }
      *v30 = v19;
LABEL_77:
      ++*(_QWORD *)(a1 + 24);
LABEL_78:
      v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  return a1;
}

void sub_239A5070C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

void sub_239A50738()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A5074C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AF22D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239A50784(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF22D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239A507A4(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = **(_QWORD **)(a1 + 8);
  if (result)
  {
    v2 = (unsigned int *)(result + 40);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_239A507D8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_239A50820(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239A50878(_QWORD *__dst, unsigned int a2)
{
  unint64_t v2;
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  char *v26;
  void *v27;
  char v28;
  char v29;
  uint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *__p;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v5 = atomic_load((unsigned __int8 *)&qword_25693D8E0);
  if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_25693D8E0))
    goto LABEL_2;
  sub_23979F334((uint64_t)&v26, 2, "exr");
  sub_23979F334((uint64_t)&v30, 0, "png");
  sub_23979F334((uint64_t)&v33, 1, "jpg");
  sub_239A50D70((unsigned int *)&v26, 3);
  if ((v35 & 0x80000000) == 0)
  {
    if ((v32 & 0x80000000) == 0)
      goto LABEL_66;
LABEL_69:
    operator delete(v31);
    if ((v29 & 0x80000000) == 0)
      goto LABEL_67;
LABEL_70:
    operator delete(v27);
    goto LABEL_67;
  }
  operator delete(__p);
  if (v32 < 0)
    goto LABEL_69;
LABEL_66:
  if (v29 < 0)
    goto LABEL_70;
LABEL_67:
  __cxa_atexit((void (*)(void *))sub_239A51134, &xmmword_25693D8B8, &dword_23940C000);
  __cxa_guard_release(&qword_25693D8E0);
LABEL_2:
  v6 = a2;
  v7 = *((_QWORD *)&xmmword_25693D8B8 + 1);
  if (*((_QWORD *)&xmmword_25693D8B8 + 1))
  {
    v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25693D8B8 + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v2 = a2;
      if (*((_QWORD *)&xmmword_25693D8B8 + 1) <= (unint64_t)a2)
        v2 = (unint64_t)a2 % *((_QWORD *)&xmmword_25693D8B8 + 1);
    }
    else
    {
      v2 = (DWORD2(xmmword_25693D8B8) - 1) & a2;
    }
    v9 = *(void ***)(xmmword_25693D8B8 + 8 * v2);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                goto LABEL_60;
            }
            else if ((v12 & (*((_QWORD *)&xmmword_25693D8B8 + 1) - 1)) != v2)
            {
              goto LABEL_23;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              goto LABEL_60;
          }
          else
          {
            if (v11 >= *((_QWORD *)&xmmword_25693D8B8 + 1))
              v11 %= *((_QWORD *)&xmmword_25693D8B8 + 1);
            if (v11 != v2)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v13 = *((_QWORD *)&xmmword_25693D8B8 + 1) == 0;
  v10 = (char *)operator new(0x30uLL);
  v26 = v10;
  v27 = &qword_25693D8C8;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  *((_DWORD *)v10 + 4) = a2;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 3) = 0;
  v14 = (float)(unint64_t)(qword_25693D8D0 + 1);
  v28 = 1;
  if ((((float)(*(float *)&dword_25693D8D8 * (float)v7) >= v14) & ~v13) != 0)
  {
    v6 = v2;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v14 / *(float *)&dword_25693D8D8);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)&xmmword_25693D8B8 + 1);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)(unint64_t)qword_25693D8D0 / *(float *)&dword_25693D8D8);
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        sub_239A5119C(prime);
    }
    v7 = *((_QWORD *)&xmmword_25693D8B8 + 1);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (*((_QWORD *)&xmmword_25693D8B8 + 1) <= v6)
        v6 %= *((_QWORD *)&xmmword_25693D8B8 + 1);
    }
    else
    {
      v6 = (DWORD2(xmmword_25693D8B8) - 1) & v6;
    }
  }
  v22 = xmmword_25693D8B8;
  v23 = *(_QWORD **)(xmmword_25693D8B8 + 8 * v6);
  if (v23)
  {
    *(_QWORD *)v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = qword_25693D8C8;
  qword_25693D8C8 = (uint64_t)v10;
  *(_QWORD *)(v22 + 8 * v6) = &qword_25693D8C8;
  if (*(_QWORD *)v10)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(xmmword_25693D8B8 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++qword_25693D8D0;
LABEL_60:
  if (v10[47] < 0)
  {
    sub_23941A7F8(__dst, *((void **)v10 + 3), *((_QWORD *)v10 + 4));
  }
  else
  {
    v25 = *(_OWORD *)(v10 + 24);
    __dst[2] = *((_QWORD *)v10 + 5);
    *(_OWORD *)__dst = v25;
  }
}

void sub_239A50CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a16 & 0x80000000) == 0)
      {
LABEL_8:
        __cxa_guard_abort(&qword_25693D8E0);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a11);
      goto LABEL_8;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a16 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_239A50D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239A50D70(unsigned int *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  size_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  char *v26;

  xmmword_25693D8B8 = 0u;
  *(_OWORD *)&qword_25693D8C8 = 0u;
  dword_25693D8D8 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v4 = 0;
    v5 = &a1[8 * a2];
    do
    {
      v6 = *v3;
      v7 = *((_QWORD *)&xmmword_25693D8B8 + 1);
      if (*((_QWORD *)&xmmword_25693D8B8 + 1))
      {
        v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25693D8B8 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          v2 = *v3;
          if (*((_QWORD *)&xmmword_25693D8B8 + 1) <= v6)
            v2 = v6 % *((_QWORD *)&xmmword_25693D8B8 + 1);
        }
        else
        {
          v2 = (DWORD2(xmmword_25693D8B8) - 1) & v6;
        }
        v9 = *(uint64_t ***)(xmmword_25693D8B8 + 8 * v2);
        if (v9)
        {
          v10 = *v9;
          if (v10)
          {
            if (v8.u32[0] < 2uLL)
            {
              while (1)
              {
                v12 = v10[1];
                if (v12 == v6)
                {
                  if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                    goto LABEL_63;
                }
                else if ((v12 & (*((_QWORD *)&xmmword_25693D8B8 + 1) - 1)) != v2)
                {
                  goto LABEL_23;
                }
                v10 = (uint64_t *)*v10;
                if (!v10)
                  goto LABEL_23;
              }
            }
            do
            {
              v11 = v10[1];
              if (v11 == v6)
              {
                if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                  goto LABEL_63;
              }
              else
              {
                if (v11 >= *((_QWORD *)&xmmword_25693D8B8 + 1))
                  v11 %= *((_QWORD *)&xmmword_25693D8B8 + 1);
                if (v11 != v2)
                  break;
              }
              v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
        }
      }
LABEL_23:
      v26 = (char *)operator new(0x30uLL);
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = v6;
      *((_DWORD *)v26 + 4) = v6;
      v13 = v26 + 24;
      if (*((char *)v3 + 31) < 0)
      {
        sub_23941A7F8(v13, *((void **)v3 + 1), *((_QWORD *)v3 + 2));
        v4 = qword_25693D8D0;
      }
      else
      {
        v14 = *(_OWORD *)(v3 + 2);
        *((_QWORD *)v26 + 5) = *((_QWORD *)v3 + 3);
        *(_OWORD *)v13 = v14;
      }
      v15 = (float)(unint64_t)(v4 + 1);
      if (!v7 || (float)(*(float *)&dword_25693D8D8 * (float)v7) < v15)
      {
        v16 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v16 = 1;
        v17 = v16 | (2 * v7);
        v18 = vcvtps_u32_f32(v15 / *(float *)&dword_25693D8D8);
        if (v17 <= v18)
          prime = v18;
        else
          prime = v17;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v20 = *((_QWORD *)&xmmword_25693D8B8 + 1);
        if (prime > *((_QWORD *)&xmmword_25693D8B8 + 1))
          goto LABEL_48;
        if (prime < *((_QWORD *)&xmmword_25693D8B8 + 1))
        {
          v21 = vcvtps_u32_f32((float)(unint64_t)qword_25693D8D0 / *(float *)&dword_25693D8D8);
          if (*((_QWORD *)&xmmword_25693D8B8 + 1) < 3uLL
            || (v22 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25693D8B8 + 8)),
                v22.i16[0] = vaddlv_u8(v22),
                v22.u32[0] > 1uLL))
          {
            v21 = std::__next_prime(v21);
          }
          else
          {
            v23 = 1 << -(char)__clz(v21 - 1);
            if (v21 >= 2)
              v21 = v23;
          }
          if (prime <= v21)
            prime = v21;
          if (prime < v20)
LABEL_48:
            sub_239A5119C(prime);
        }
        v7 = *((_QWORD *)&xmmword_25693D8B8 + 1);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (*((_QWORD *)&xmmword_25693D8B8 + 1) <= v6)
            v2 = v6 % *((_QWORD *)&xmmword_25693D8B8 + 1);
          else
            v2 = v6;
        }
        else
        {
          v2 = (DWORD2(xmmword_25693D8B8) - 1) & v6;
        }
      }
      v24 = *(_QWORD **)(xmmword_25693D8B8 + 8 * v2);
      if (v24)
      {
        *(_QWORD *)v26 = *v24;
        *v24 = v26;
      }
      else
      {
        *(_QWORD *)v26 = qword_25693D8C8;
        qword_25693D8C8 = (uint64_t)v26;
        *(_QWORD *)(xmmword_25693D8B8 + 8 * v2) = &qword_25693D8C8;
        if (*(_QWORD *)v26)
        {
          v25 = *(_QWORD *)(*(_QWORD *)v26 + 8);
          if ((v7 & (v7 - 1)) != 0)
          {
            if (v25 >= v7)
              v25 %= v7;
          }
          else
          {
            v25 &= v7 - 1;
          }
          *(_QWORD *)(xmmword_25693D8B8 + 8 * v25) = v26;
        }
      }
      v4 = ++qword_25693D8D0;
LABEL_63:
      v3 += 8;
    }
    while (v3 != v5);
  }
}

void sub_239A510D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v4;
  void *v5;
  void **v6;
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  v4 = (void **)qword_25693D8C8;
  if (qword_25693D8C8)
  {
    do
    {
      v6 = (void **)*v4;
      if (*((char *)v4 + 47) < 0)
        operator delete(v4[3]);
      operator delete(v4);
      v4 = v6;
    }
    while (v6);
  }
  v5 = *(void **)(v2 + 2232);
  *(_QWORD *)(v2 + 2232) = 0;
  if (v5)
    operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_239A51134(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_239A5119C(unint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *i;
  uint64_t v14;
  unint64_t v15;

  if (!a1)
  {
    v12 = (void *)xmmword_25693D8B8;
    *(_QWORD *)&xmmword_25693D8B8 = 0;
    if (v12)
      operator delete(v12);
    *((_QWORD *)&xmmword_25693D8B8 + 1) = 0;
    return;
  }
  if (a1 >> 61)
    sub_239418A80();
  v2 = operator new(8 * a1);
  v3 = (void *)xmmword_25693D8B8;
  *(_QWORD *)&xmmword_25693D8B8 = v2;
  if (v3)
    operator delete(v3);
  v4 = 0;
  *((_QWORD *)&xmmword_25693D8B8 + 1) = a1;
  do
    *(_QWORD *)(xmmword_25693D8B8 + 8 * v4++) = 0;
  while (a1 != v4);
  v5 = (_QWORD **)qword_25693D8C8;
  if (qword_25693D8C8)
  {
    v6 = *(_QWORD *)(qword_25693D8C8 + 8);
    v7 = a1 - 1;
    if ((a1 & (a1 - 1)) == 0)
    {
      v8 = v6 & v7;
      *(_QWORD *)(xmmword_25693D8B8 + 8 * v8) = &qword_25693D8C8;
      while (1)
      {
        v9 = *v5;
        if (!*v5)
          break;
        v10 = v9[1] & v7;
        if (v10 == v8)
        {
          v5 = (_QWORD **)*v5;
        }
        else if (*(_QWORD *)(xmmword_25693D8B8 + 8 * v10))
        {
          *v5 = (_QWORD *)*v9;
          v11 = 8 * v10;
          *v9 = **(_QWORD **)(xmmword_25693D8B8 + v11);
          **(_QWORD **)(xmmword_25693D8B8 + v11) = v9;
        }
        else
        {
          *(_QWORD *)(xmmword_25693D8B8 + 8 * v10) = v5;
          v5 = (_QWORD **)v9;
          v8 = v10;
        }
      }
      return;
    }
    if (v6 >= a1)
      v6 %= a1;
    *(_QWORD *)(xmmword_25693D8B8 + 8 * v6) = &qword_25693D8C8;
    for (i = *v5; i; v6 = v15)
    {
      v15 = i[1];
      if (v15 >= a1)
        v15 %= a1;
      if (v15 != v6)
      {
        if (!*(_QWORD *)(xmmword_25693D8B8 + 8 * v15))
        {
          *(_QWORD *)(xmmword_25693D8B8 + 8 * v15) = v5;
          goto LABEL_26;
        }
        *v5 = (_QWORD *)*i;
        v14 = 8 * v15;
        *i = **(_QWORD **)(xmmword_25693D8B8 + v14);
        **(_QWORD **)(xmmword_25693D8B8 + v14) = i;
        i = v5;
      }
      v15 = v6;
LABEL_26:
      v5 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

uint64_t sub_239A51358(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_239A513C0(unint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *i;
  uint64_t v14;
  unint64_t v15;

  if (!a1)
  {
    v12 = (void *)xmmword_25693D8E8;
    *(_QWORD *)&xmmword_25693D8E8 = 0;
    if (v12)
      operator delete(v12);
    *((_QWORD *)&xmmword_25693D8E8 + 1) = 0;
    return;
  }
  if (a1 >> 61)
    sub_239418A80();
  v2 = operator new(8 * a1);
  v3 = (void *)xmmword_25693D8E8;
  *(_QWORD *)&xmmword_25693D8E8 = v2;
  if (v3)
    operator delete(v3);
  v4 = 0;
  *((_QWORD *)&xmmword_25693D8E8 + 1) = a1;
  do
    *(_QWORD *)(xmmword_25693D8E8 + 8 * v4++) = 0;
  while (a1 != v4);
  v5 = (_QWORD **)qword_25693D8F8;
  if (qword_25693D8F8)
  {
    v6 = *(_QWORD *)(qword_25693D8F8 + 8);
    v7 = a1 - 1;
    if ((a1 & (a1 - 1)) == 0)
    {
      v8 = v6 & v7;
      *(_QWORD *)(xmmword_25693D8E8 + 8 * v8) = &qword_25693D8F8;
      while (1)
      {
        v9 = *v5;
        if (!*v5)
          break;
        v10 = v9[1] & v7;
        if (v10 == v8)
        {
          v5 = (_QWORD **)*v5;
        }
        else if (*(_QWORD *)(xmmword_25693D8E8 + 8 * v10))
        {
          *v5 = (_QWORD *)*v9;
          v11 = 8 * v10;
          *v9 = **(_QWORD **)(xmmword_25693D8E8 + v11);
          **(_QWORD **)(xmmword_25693D8E8 + v11) = v9;
        }
        else
        {
          *(_QWORD *)(xmmword_25693D8E8 + 8 * v10) = v5;
          v5 = (_QWORD **)v9;
          v8 = v10;
        }
      }
      return;
    }
    if (v6 >= a1)
      v6 %= a1;
    *(_QWORD *)(xmmword_25693D8E8 + 8 * v6) = &qword_25693D8F8;
    for (i = *v5; i; v6 = v15)
    {
      v15 = i[1];
      if (v15 >= a1)
        v15 %= a1;
      if (v15 != v6)
      {
        if (!*(_QWORD *)(xmmword_25693D8E8 + 8 * v15))
        {
          *(_QWORD *)(xmmword_25693D8E8 + 8 * v15) = v5;
          goto LABEL_26;
        }
        *v5 = (_QWORD *)*i;
        v14 = 8 * v15;
        *i = **(_QWORD **)(xmmword_25693D8E8 + v14);
        **(_QWORD **)(xmmword_25693D8E8 + v14) = i;
        i = v5;
      }
      v15 = v6;
LABEL_26:
      v5 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

void sub_239A5157C(unsigned int *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  size_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  char *v26;

  xmmword_25693D918 = 0u;
  *(_OWORD *)&qword_25693D928 = 0u;
  dword_25693D938 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v4 = 0;
    v5 = &a1[8 * a2];
    do
    {
      v6 = *v3;
      v7 = *((_QWORD *)&xmmword_25693D918 + 1);
      if (*((_QWORD *)&xmmword_25693D918 + 1))
      {
        v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25693D918 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          v2 = *v3;
          if (*((_QWORD *)&xmmword_25693D918 + 1) <= v6)
            v2 = v6 % *((_QWORD *)&xmmword_25693D918 + 1);
        }
        else
        {
          v2 = (DWORD2(xmmword_25693D918) - 1) & v6;
        }
        v9 = *(uint64_t ***)(xmmword_25693D918 + 8 * v2);
        if (v9)
        {
          v10 = *v9;
          if (v10)
          {
            if (v8.u32[0] < 2uLL)
            {
              while (1)
              {
                v12 = v10[1];
                if (v12 == v6)
                {
                  if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                    goto LABEL_63;
                }
                else if ((v12 & (*((_QWORD *)&xmmword_25693D918 + 1) - 1)) != v2)
                {
                  goto LABEL_23;
                }
                v10 = (uint64_t *)*v10;
                if (!v10)
                  goto LABEL_23;
              }
            }
            do
            {
              v11 = v10[1];
              if (v11 == v6)
              {
                if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                  goto LABEL_63;
              }
              else
              {
                if (v11 >= *((_QWORD *)&xmmword_25693D918 + 1))
                  v11 %= *((_QWORD *)&xmmword_25693D918 + 1);
                if (v11 != v2)
                  break;
              }
              v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
        }
      }
LABEL_23:
      v26 = (char *)operator new(0x30uLL);
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = v6;
      *((_DWORD *)v26 + 4) = v6;
      v13 = v26 + 24;
      if (*((char *)v3 + 31) < 0)
      {
        sub_23941A7F8(v13, *((void **)v3 + 1), *((_QWORD *)v3 + 2));
        v4 = qword_25693D930;
      }
      else
      {
        v14 = *(_OWORD *)(v3 + 2);
        *((_QWORD *)v26 + 5) = *((_QWORD *)v3 + 3);
        *(_OWORD *)v13 = v14;
      }
      v15 = (float)(unint64_t)(v4 + 1);
      if (!v7 || (float)(*(float *)&dword_25693D938 * (float)v7) < v15)
      {
        v16 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v16 = 1;
        v17 = v16 | (2 * v7);
        v18 = vcvtps_u32_f32(v15 / *(float *)&dword_25693D938);
        if (v17 <= v18)
          prime = v18;
        else
          prime = v17;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v20 = *((_QWORD *)&xmmword_25693D918 + 1);
        if (prime > *((_QWORD *)&xmmword_25693D918 + 1))
          goto LABEL_48;
        if (prime < *((_QWORD *)&xmmword_25693D918 + 1))
        {
          v21 = vcvtps_u32_f32((float)(unint64_t)qword_25693D930 / *(float *)&dword_25693D938);
          if (*((_QWORD *)&xmmword_25693D918 + 1) < 3uLL
            || (v22 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25693D918 + 8)),
                v22.i16[0] = vaddlv_u8(v22),
                v22.u32[0] > 1uLL))
          {
            v21 = std::__next_prime(v21);
          }
          else
          {
            v23 = 1 << -(char)__clz(v21 - 1);
            if (v21 >= 2)
              v21 = v23;
          }
          if (prime <= v21)
            prime = v21;
          if (prime < v20)
LABEL_48:
            sub_239A519A8(prime);
        }
        v7 = *((_QWORD *)&xmmword_25693D918 + 1);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (*((_QWORD *)&xmmword_25693D918 + 1) <= v6)
            v2 = v6 % *((_QWORD *)&xmmword_25693D918 + 1);
          else
            v2 = v6;
        }
        else
        {
          v2 = (DWORD2(xmmword_25693D918) - 1) & v6;
        }
      }
      v24 = *(_QWORD **)(xmmword_25693D918 + 8 * v2);
      if (v24)
      {
        *(_QWORD *)v26 = *v24;
        *v24 = v26;
      }
      else
      {
        *(_QWORD *)v26 = qword_25693D928;
        qword_25693D928 = (uint64_t)v26;
        *(_QWORD *)(xmmword_25693D918 + 8 * v2) = &qword_25693D928;
        if (*(_QWORD *)v26)
        {
          v25 = *(_QWORD *)(*(_QWORD *)v26 + 8);
          if ((v7 & (v7 - 1)) != 0)
          {
            if (v25 >= v7)
              v25 %= v7;
          }
          else
          {
            v25 &= v7 - 1;
          }
          *(_QWORD *)(xmmword_25693D918 + 8 * v25) = v26;
        }
      }
      v4 = ++qword_25693D930;
LABEL_63:
      v3 += 8;
    }
    while (v3 != v5);
  }
}

void sub_239A518DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v4;
  void *v5;
  void **v6;
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  v4 = (void **)qword_25693D928;
  if (qword_25693D928)
  {
    do
    {
      v6 = (void **)*v4;
      if (*((char *)v4 + 47) < 0)
        operator delete(v4[3]);
      operator delete(v4);
      v4 = v6;
    }
    while (v6);
  }
  v5 = *(void **)(v2 + 2328);
  *(_QWORD *)(v2 + 2328) = 0;
  if (v5)
    operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_239A51940(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_239A519A8(unint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *i;
  uint64_t v14;
  unint64_t v15;

  if (!a1)
  {
    v12 = (void *)xmmword_25693D918;
    *(_QWORD *)&xmmword_25693D918 = 0;
    if (v12)
      operator delete(v12);
    *((_QWORD *)&xmmword_25693D918 + 1) = 0;
    return;
  }
  if (a1 >> 61)
    sub_239418A80();
  v2 = operator new(8 * a1);
  v3 = (void *)xmmword_25693D918;
  *(_QWORD *)&xmmword_25693D918 = v2;
  if (v3)
    operator delete(v3);
  v4 = 0;
  *((_QWORD *)&xmmword_25693D918 + 1) = a1;
  do
    *(_QWORD *)(xmmword_25693D918 + 8 * v4++) = 0;
  while (a1 != v4);
  v5 = (_QWORD **)qword_25693D928;
  if (qword_25693D928)
  {
    v6 = *(_QWORD *)(qword_25693D928 + 8);
    v7 = a1 - 1;
    if ((a1 & (a1 - 1)) == 0)
    {
      v8 = v6 & v7;
      *(_QWORD *)(xmmword_25693D918 + 8 * v8) = &qword_25693D928;
      while (1)
      {
        v9 = *v5;
        if (!*v5)
          break;
        v10 = v9[1] & v7;
        if (v10 == v8)
        {
          v5 = (_QWORD **)*v5;
        }
        else if (*(_QWORD *)(xmmword_25693D918 + 8 * v10))
        {
          *v5 = (_QWORD *)*v9;
          v11 = 8 * v10;
          *v9 = **(_QWORD **)(xmmword_25693D918 + v11);
          **(_QWORD **)(xmmword_25693D918 + v11) = v9;
        }
        else
        {
          *(_QWORD *)(xmmword_25693D918 + 8 * v10) = v5;
          v5 = (_QWORD **)v9;
          v8 = v10;
        }
      }
      return;
    }
    if (v6 >= a1)
      v6 %= a1;
    *(_QWORD *)(xmmword_25693D918 + 8 * v6) = &qword_25693D928;
    for (i = *v5; i; v6 = v15)
    {
      v15 = i[1];
      if (v15 >= a1)
        v15 %= a1;
      if (v15 != v6)
      {
        if (!*(_QWORD *)(xmmword_25693D918 + 8 * v15))
        {
          *(_QWORD *)(xmmword_25693D918 + 8 * v15) = v5;
          goto LABEL_26;
        }
        *v5 = (_QWORD *)*i;
        v14 = 8 * v15;
        *i = **(_QWORD **)(xmmword_25693D918 + v14);
        **(_QWORD **)(xmmword_25693D918 + v14) = i;
        i = v5;
      }
      v15 = v6;
LABEL_26:
      v5 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

uint64_t sub_239A51B64(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_239A51BCC(unint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *i;
  uint64_t v14;
  unint64_t v15;

  if (!a1)
  {
    v12 = (void *)xmmword_25693D948;
    *(_QWORD *)&xmmword_25693D948 = 0;
    if (v12)
      operator delete(v12);
    *((_QWORD *)&xmmword_25693D948 + 1) = 0;
    return;
  }
  if (a1 >> 61)
    sub_239418A80();
  v2 = operator new(8 * a1);
  v3 = (void *)xmmword_25693D948;
  *(_QWORD *)&xmmword_25693D948 = v2;
  if (v3)
    operator delete(v3);
  v4 = 0;
  *((_QWORD *)&xmmword_25693D948 + 1) = a1;
  do
    *(_QWORD *)(xmmword_25693D948 + 8 * v4++) = 0;
  while (a1 != v4);
  v5 = (_QWORD **)qword_25693D958;
  if (qword_25693D958)
  {
    v6 = *(_QWORD *)(qword_25693D958 + 8);
    v7 = a1 - 1;
    if ((a1 & (a1 - 1)) == 0)
    {
      v8 = v6 & v7;
      *(_QWORD *)(xmmword_25693D948 + 8 * v8) = &qword_25693D958;
      while (1)
      {
        v9 = *v5;
        if (!*v5)
          break;
        v10 = v9[1] & v7;
        if (v10 == v8)
        {
          v5 = (_QWORD **)*v5;
        }
        else if (*(_QWORD *)(xmmword_25693D948 + 8 * v10))
        {
          *v5 = (_QWORD *)*v9;
          v11 = 8 * v10;
          *v9 = **(_QWORD **)(xmmword_25693D948 + v11);
          **(_QWORD **)(xmmword_25693D948 + v11) = v9;
        }
        else
        {
          *(_QWORD *)(xmmword_25693D948 + 8 * v10) = v5;
          v5 = (_QWORD **)v9;
          v8 = v10;
        }
      }
      return;
    }
    if (v6 >= a1)
      v6 %= a1;
    *(_QWORD *)(xmmword_25693D948 + 8 * v6) = &qword_25693D958;
    for (i = *v5; i; v6 = v15)
    {
      v15 = i[1];
      if (v15 >= a1)
        v15 %= a1;
      if (v15 != v6)
      {
        if (!*(_QWORD *)(xmmword_25693D948 + 8 * v15))
        {
          *(_QWORD *)(xmmword_25693D948 + 8 * v15) = v5;
          goto LABEL_26;
        }
        *v5 = (_QWORD *)*i;
        v14 = 8 * v15;
        *i = **(_QWORD **)(xmmword_25693D948 + v14);
        **(_QWORD **)(xmmword_25693D948 + v14) = i;
        i = v5;
      }
      v15 = v6;
LABEL_26:
      v5 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

_QWORD *CPGOutputModelOptionsCreate()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = operator new(0x48uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    v0[8] = 0;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *(_OWORD *)v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    sub_239A51E14((uint64_t)(v0 + 1));
    *((_DWORD *)v1 + 16) = 1;
    *v1 = &off_250AF2318;
  }
  return v1;
}

void sub_239A51DE8(void *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E310](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x239A51DD8);
}

uint64_t sub_239A51E14(uint64_t a1)
{
  uint64_t v2;

  *(_OWORD *)a1 = xmmword_239F0BE40;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  sub_239A51EF8(a1 + 16, 0, &xmmword_239F0CD48);
  sub_239A51EF8(v2, 1u, &xmmword_239F0CD58);
  sub_239A51EF8(v2, 2u, &xmmword_239F0CD68);
  sub_239A51EF8(v2, 3u, &xmmword_239F0CD78);
  sub_239A51EF8(v2, 4u, &xmmword_239F0CD88);
  return a1;
}

void sub_239A51EC4(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *v1;
  *v1 = 0;
  if (v6)
    operator delete(v6);
  _Unwind_Resume(exception_object);
}

void sub_239A51EF8(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_OWORD *)v13 + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_239A501C8(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v6) = a1 + 16;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_239A521BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CPGOutputModelOptionsRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 64);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGOutputModelOptionsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 64);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGOutputModelOptionsGetMaxPolyCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t CPGOutputModelOptionsSetMaxPolyCount(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 250001) < 0xFFFFFFFFFFFC2FEFLL)
    return 4294967294;
  result = 0;
  *(_QWORD *)(a1 + 8) = a2;
  return result;
}

uint64_t CPGOutputModelOptionsGetMaxTextureResolution(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t CPGOutputModelOptionsSetMaxTextureResolution(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 16385) < 0xFFFFFFFFFFFFC00FLL)
    return 4294967294;
  result = 0;
  *(_QWORD *)(a1 + 16) = a2;
  return result;
}

uint64_t CPGOutputModelOptionsGetTextureDestination(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 24) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_22:
    sub_23941D898("unordered_map::at: key not found");
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return *((unsigned int *)v6 + 5);
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return *((unsigned int *)v6 + 5);
}

uint64_t CPGOutputModelOptionsSetTextureDestination(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    goto LABEL_22;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = ((_DWORD)v3 - 1) & a2;
  }
  v6 = *(uint64_t ***)(*(_QWORD *)(a1 + 24) + 8 * v5);
  if (!v6 || (v7 = *v6) == 0)
LABEL_22:
    sub_23941D898("unordered_map::at: key not found");
  if (v4.u32[0] < 2uLL)
  {
    v8 = v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v7 + 4) == a2)
          goto LABEL_21;
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_22;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= v3)
      v9 %= v3;
    if (v9 != v5)
      goto LABEL_22;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      goto LABEL_22;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_11;
LABEL_21:
  *((_DWORD *)v7 + 5) = a3;
  return 0;
}

uint64_t CPGOutputModelOptionsGetTextureFormat(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 24) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_22:
    sub_23941D898("unordered_map::at: key not found");
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return *((unsigned int *)v6 + 6);
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return *((unsigned int *)v6 + 6);
}

uint64_t CPGOutputModelOptionsSetTextureFormat(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    goto LABEL_22;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = ((_DWORD)v3 - 1) & a2;
  }
  v6 = *(uint64_t ***)(*(_QWORD *)(a1 + 24) + 8 * v5);
  if (!v6 || (v7 = *v6) == 0)
LABEL_22:
    sub_23941D898("unordered_map::at: key not found");
  if (v4.u32[0] < 2uLL)
  {
    v8 = v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v7 + 4) == a2)
          goto LABEL_21;
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_22;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= v3)
      v9 %= v3;
    if (v9 != v5)
      goto LABEL_22;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      goto LABEL_22;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_11;
LABEL_21:
  *((_DWORD *)v7 + 6) = a3;
  return 0;
}

float CPGOutputModelOptionsGetTextureLossyCompressionQuality(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  float **v5;
  float *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(float ***)(*(_QWORD *)(a1 + 24) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_22:
    sub_23941D898("unordered_map::at: key not found");
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = *((_QWORD *)v6 + 1);
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return v6[7];
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = *(float **)v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = *((_QWORD *)v6 + 1);
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = *(float **)v6;
    if (!v6)
      goto LABEL_22;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return v6[7];
}

uint64_t CPGOutputModelOptionsSetTextureLossyCompressionQuality(uint64_t a1, unsigned int a2, float a3)
{
  uint64_t result;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a3 < 0.0 || a3 > 1.0)
    return 4294967294;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a2;
    if (v5 <= a2)
      v7 = a2 % v5;
  }
  else
  {
    v7 = ((_DWORD)v5 - 1) & a2;
  }
  v8 = *(uint64_t ***)(*(_QWORD *)(a1 + 24) + 8 * v7);
  if (!v8 || (v9 = *v8) == 0)
LABEL_27:
    sub_23941D898("unordered_map::at: key not found");
  if (v6.u32[0] < 2uLL)
  {
    v10 = v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == a2)
      {
        if (*((_DWORD *)v9 + 4) == a2)
          goto LABEL_26;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == a2)
      break;
    if (v11 >= v5)
      v11 %= v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_16:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (*((_DWORD *)v9 + 4) != a2)
    goto LABEL_16;
LABEL_26:
  result = 0;
  *((float *)v9 + 7) = a3;
  return result;
}

void sub_239A52868()
{
  JUMPOUT(0x23B83E31CLL);
}

double CPGProcessingCallbackBundleCreate()
{
  _OWORD *v0;
  double result;

  v0 = operator new(0x50uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    result = 0.0;
    v0[3] = 0u;
    v0[4] = 0u;
    v0[1] = 0u;
    v0[2] = 0u;
    *v0 = 0u;
    *((_DWORD *)v0 + 18) = 1;
    *(_QWORD *)v0 = &off_250AF2338;
  }
  return result;
}

uint64_t CPGProcessingCallbackBundleRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 72);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGProcessingCallbackBundleRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 72);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGProcessingCallbackBundleSetCompleteOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  return 0;
}

uint64_t CPGProcessingCallbackBundleSetSfmOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  return 0;
}

uint64_t CPGProcessingCallbackBundleSetProgressCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  return 0;
}

uint64_t CPGProcessingCallbackBundleSetWarningCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = a3;
  return 0;
}

void sub_239A52940()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGProcessingFailureRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 12);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGProcessingFailureRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 12);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGProcessingFailureGetCode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_239A529A8()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *CPGProcessingLimitsForCurrentDevice()
{
  uint64_t v0;
  kern_return_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[36];
  uint64_t v9;

  v0 = MEMORY[0x23B83EE44]();
  task_info_outCnt = 93;
  v1 = task_info(*MEMORY[0x24BDAEC58], 0x16u, task_info_out, &task_info_outCnt);
  v2 = v9 + v0;
  if (v1)
    v2 = 0;
  if (v2 <= 0xEC8E51AFFLL)
  {
    if (v2 <= 0x7558BDAFFLL)
    {
      if (v2 <= 0x39BDF3AFFLL)
      {
        if (v2 <= 0x1BF08EAFFLL)
        {
          if (v2 <= 0x147D356FFLL)
          {
            if (v2 <= 0xD09DC2FF)
            {
              if (v2 <= 0x9502F8FF)
                v3 = 731566080;
              else
                v3 = 1463132160;
              if (v2 <= 0x9502F8FF)
                v4 = 60;
              else
                v4 = 120;
            }
            else
            {
              v4 = 200;
              v3 = 2438553600;
            }
            v5 = 0x2000;
          }
          else
          {
            v4 = 300;
            v3 = 3657830400;
            v5 = 0x4000;
          }
        }
        else
        {
          v3 = 0x16B5F7000;
          v4 = 500;
          v5 = 0x4000;
        }
      }
      else
      {
        v3 = 0x2D6BEE000;
        v4 = 1000;
        v5 = 0x4000;
      }
    }
    else
    {
      v3 = 0x4421E5000;
      v4 = 1500;
      v5 = 0x4000;
    }
  }
  else
  {
    v3 = 0x5AD7DC000;
    v4 = 2000;
    v5 = 0x4000;
  }
  result = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    result[2] = v4;
    result[3] = v3;
    *((_DWORD *)result + 8) = 1;
    *result = &off_250AF2358;
    result[1] = v5;
  }
  return result;
}

uint64_t CPGProcessingLimitsRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGProcessingLimitsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGProcessingLimitsGetMaxImageDimension(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t CPGProcessingLimitsGetMaxNumberOfSamples(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t CPGProcessingLimitsGetMaxTotalPixelCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t CPGProcessingLimitsGetMaxBakedOutputTriangleCount()
{
  return 250000;
}

uint64_t CPGProcessingLimitsGetMinBakedOutputTriangleCount()
{
  return 128;
}

void sub_239A52BEC()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGProcessingWarningRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 12);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGProcessingWarningRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 12);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGProcessingWarningGetCode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_239A52C50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A52CA8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A52D10(_QWORD *a1, const void *a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_23962BAA4(&v16, a2);
  v6 = v17;
  *a1 = v16;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = v17;
    if (v17)
    {
      v10 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  if (a3)
  {
    v12 = (unint64_t *)&a3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  return a1;
}

void sub_239A52DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CPGProgressRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 40);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGProgressRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 40);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

float CPGProgressGetFractionCompleted(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

double CPGProgressGetEstimatedRemainingTime(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

uint64_t CPGProgressGetProcessingStep(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t CPGProgressGetMessage(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

void sub_239A52E6C(uint64_t a1)
{
  sub_239A52E90(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A52E90(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 144))
  {
    if (*(char *)(a1 + 143) < 0)
      operator delete(*(void **)(a1 + 120));
    v2 = *(std::__shared_weak_count **)(a1 + 112);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 96))
  {
    v5 = *(_QWORD **)(a1 + 72);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    v7 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v7)
      operator delete(v7);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *CPGRequestCreate()
{
  _OWORD *v0;
  _QWORD *v1;

  v0 = operator new(0xA0uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    v0[8] = 0u;
    v0[9] = 0u;
    v0[6] = 0u;
    v0[7] = 0u;
    v0[4] = 0u;
    v0[5] = 0u;
    v0[2] = 0u;
    v0[3] = 0u;
    *v0 = 0u;
    v0[1] = 0u;
    sub_239A52FCC((uint64_t)v0);
    *v1 = &off_250AF2998;
  }
  return v1;
}

void sub_239A52FA0(void *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E310](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x239A52F90);
}

uint64_t sub_239A52FCC(uint64_t a1)
{
  uint64_t v2;
  CFUUIDRef v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v8;
  std::__shared_weak_count *v9;

  *(_OWORD *)(a1 + 8) = 0u;
  v2 = a1 + 8;
  *(_BYTE *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = CFUUIDCreate(0);
  sub_2396293E8((int)&v8, v3);
  sub_2396293EC(&v8, v2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_DWORD *)(a1 + 32) = 2;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)a1 = &off_250AF2378;
  *(_DWORD *)(a1 + 156) = 1;
  return a1;
}

void sub_239A530A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239A530E8(uint64_t a1)
{
  sub_239A52E90(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGRequestCreateWithDetail(int a1, _QWORD *a2)
{
  CPGRequestCreateWithDetailAndSfmMap(a1, 0, a2);
  return 0;
}

uint64_t CPGRequestCreateWithDetailAndSfmMap(int a1, uint64_t a2, _QWORD *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void **v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v38;
  void *__p[2];
  __int128 v40;
  int v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v6 = operator new(0xA0uLL, MEMORY[0x24BEDB6B8]);
  v7 = v6;
  if (v6)
  {
    v6[8] = 0u;
    v6[9] = 0u;
    v6[6] = 0u;
    v6[7] = 0u;
    v6[4] = 0u;
    v6[5] = 0u;
    v6[2] = 0u;
    v6[3] = 0u;
    *v6 = 0u;
    v6[1] = 0u;
    sub_239A52FCC((uint64_t)v6);
    *(_QWORD *)v7 = &off_250AF2998;
  }
  *((_DWORD *)v7 + 8) = a1;
  if (a2)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v9 = (std::__shared_weak_count *)operator new(0x3C0uLL);
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_250B01B38;
    v11 = sub_239A4D360((uint64_t)&v9[1], v8);
    v42 = v11;
    v43 = v9;
    v38 = v11;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    if (*(char *)(a2 + 39) < 0)
    {
      sub_23941A7F8(__p, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
      v11 = v38;
      if (*((_BYTE *)v7 + 144))
      {
LABEL_8:
        v13 = (std::__shared_weak_count *)*((_QWORD *)v7 + 14);
        *((_QWORD *)v7 + 13) = v11;
        *((_QWORD *)v7 + 14) = v9;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v16 = (void **)v7 + 15;
        if (*((char *)v7 + 143) < 0)
          operator delete(*v16);
        *(_OWORD *)v16 = *(_OWORD *)__p;
        *((_QWORD *)v7 + 17) = v40;
        BYTE7(v40) = 0;
        LOBYTE(__p[0]) = 0;
        goto LABEL_18;
      }
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v40 = *(_QWORD *)(a2 + 32);
      if (*((_BYTE *)v7 + 144))
        goto LABEL_8;
    }
    *((_QWORD *)v7 + 13) = v11;
    *((_QWORD *)v7 + 14) = v9;
    *(_OWORD *)((char *)v7 + 120) = *(_OWORD *)__p;
    *((_QWORD *)v7 + 17) = v40;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v40 = 0;
    *((_BYTE *)v7 + 144) = 1;
LABEL_18:
    v17 = v43;
    if (v43)
    {
      v18 = (unint64_t *)&v43->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (a1 != 8)
    goto LABEL_51;
  *(_OWORD *)__p = 0u;
  v40 = 0u;
  v41 = 1065353216;
  sub_239A51EF8((uint64_t)__p, 0, &xmmword_239F0CD48);
  sub_239A51EF8((uint64_t)__p, 1u, &xmmword_239F0CD58);
  sub_239A51EF8((uint64_t)__p, 2u, &xmmword_239F0CD68);
  sub_239A51EF8((uint64_t)__p, 3u, &xmmword_239F0CD78);
  sub_239A51EF8((uint64_t)__p, 4u, &xmmword_239F0CD88);
  v20 = *((unsigned __int8 *)v7 + 96);
  *(_OWORD *)((char *)v7 + 40) = xmmword_239F0BE40;
  if (!v20)
  {
    v31 = __p[0];
    v32 = (unint64_t)__p[1];
    v33 = *((_QWORD *)&v40 + 1);
    v27 = (_QWORD *)v40;
    *((_QWORD *)v7 + 9) = v40;
    __p[0] = 0;
    __p[1] = 0;
    *((_QWORD *)v7 + 7) = v31;
    *((_QWORD *)v7 + 8) = v32;
    *((_QWORD *)v7 + 10) = v33;
    *((_DWORD *)v7 + 22) = v41;
    if (v33)
    {
      v34 = v27[1];
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v34 >= v32)
          v34 %= v32;
      }
      else
      {
        v34 &= v32 - 1;
      }
      v27 = 0;
      v31[v34] = (char *)v7 + 72;
      v40 = 0uLL;
    }
    *((_BYTE *)v7 + 96) = 1;
    goto LABEL_47;
  }
  if (*((_QWORD *)v7 + 10))
  {
    v21 = (_QWORD *)*((_QWORD *)v7 + 9);
    if (v21)
    {
      do
      {
        v22 = (_QWORD *)*v21;
        operator delete(v21);
        v21 = v22;
      }
      while (v22);
    }
    *((_QWORD *)v7 + 9) = 0;
    v23 = *((_QWORD *)v7 + 8);
    if (v23)
    {
      for (i = 0; i != v23; ++i)
        *(_QWORD *)(*((_QWORD *)v7 + 7) + 8 * i) = 0;
    }
    *((_QWORD *)v7 + 10) = 0;
  }
  v25 = __p[0];
  __p[0] = 0;
  v26 = (void *)*((_QWORD *)v7 + 7);
  *((_QWORD *)v7 + 7) = v25;
  if (v26)
    operator delete(v26);
  v28 = (unint64_t)__p[1];
  v27 = (_QWORD *)v40;
  *((_QWORD *)v7 + 9) = v40;
  *((_QWORD *)v7 + 8) = v28;
  __p[1] = 0;
  v29 = *((_QWORD *)&v40 + 1);
  *((_QWORD *)v7 + 10) = *((_QWORD *)&v40 + 1);
  *((_DWORD *)v7 + 22) = v41;
  if (!v29)
  {
LABEL_47:
    if (v27)
    {
      do
      {
        v35 = (_QWORD *)*v27;
        operator delete(v27);
        v27 = v35;
      }
      while (v35);
    }
    goto LABEL_49;
  }
  v30 = v27[1];
  if ((v28 & (v28 - 1)) != 0)
  {
    if (v30 >= v28)
      v30 %= v28;
  }
  else
  {
    v30 &= v28 - 1;
  }
  *(_QWORD *)(*((_QWORD *)v7 + 7) + 8 * v30) = (char *)v7 + 72;
  v40 = 0uLL;
LABEL_49:
  v36 = __p[0];
  __p[0] = 0;
  if (v36)
    operator delete(v36);
LABEL_51:
  *a3 = v7;
  return 0;
}

void sub_239A53558(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  va_list va;

  va_start(va, a9);
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  sub_239A4D7C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239A535A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p)
{
  std::__shared_weak_count *v13;
  void *v15;

  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_239A5361C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250B01B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A5362C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250B01B38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A5365C(uint64_t a1)
{
  return sub_239A4D648(a1 + 24);
}

uint64_t CPGRequestRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 156);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGRequestRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 156);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGRequestGetDetail(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t CPGRequestSetDetail(uint64_t result, int a2)
{
  if (a2 == 8 || *(_DWORD *)(result + 32) == 8)
  {
    sub_239A444D4((uint64_t)"unknown file", 41, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t CPGRequestSetCustomOutputModelOptions(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;

  if (*(_DWORD *)(a1 + 32) != 8)
    return 4294967292;
  if (!a2)
    return 4294967294;
  v3 = *(unsigned __int8 *)(a1 + 96);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 8);
  if (v3)
  {
    if (a2 + 8 != a1 + 40)
    {
      *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 56);
      sub_239A53798((_QWORD *)(a1 + 56), *(uint64_t **)(a2 + 40));
    }
    return 0;
  }
  else
  {
    sub_239A538BC(a1 + 56, a2 + 24);
    result = 0;
    *(_BYTE *)(a1 + 96) = 1;
  }
  return result;
}

void sub_239A53798(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  char *v6;
  uint64_t v7;
  char *v8;
  _OWORD *v9;
  char *v10;

  v4 = a1[1];
  if (!v4)
    goto LABEL_7;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      *((_DWORD *)v6 + 4) = *((_DWORD *)a2 + 4);
      v7 = *(uint64_t *)((char *)a2 + 20);
      *((_DWORD *)v6 + 7) = *((_DWORD *)a2 + 7);
      *(_QWORD *)(v6 + 20) = v7;
      v8 = *(char **)v6;
      sub_239A539EC((uint64_t)a1, (uint64_t)v6);
      a2 = (uint64_t *)*a2;
      v6 = v8;
      if (!v8)
        goto LABEL_7;
    }
    do
    {
      v10 = *(char **)v6;
      operator delete(v6);
      v6 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      v9 = operator new(0x20uLL);
      *(_QWORD *)v9 = 0;
      v9[1] = *((_OWORD *)a2 + 1);
      *((_QWORD *)v9 + 1) = *((unsigned int *)v9 + 4);
      sub_239A539EC((uint64_t)a1, (uint64_t)v9);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_239A53874(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_239A53894(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_239A538A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A538BC(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239A501C8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    sub_239A51EF8(a1, *((_DWORD *)i + 4), (_OWORD *)i + 1);
  return a1;
}

void sub_239A539D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

void sub_239A539EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  size_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  uint64_t *j;
  size_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t *i;
  uint8x8_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  _BOOL4 v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  int v43;
  _BOOL4 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;

  v4 = *(unsigned int *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      prime = v10;
    else
      prime = v9;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v5)
      goto LABEL_105;
    if (prime >= v5)
      goto LABEL_40;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (prime <= v25)
      prime = v25;
    if (prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_105:
      if (prime >> 61)
        sub_239418A80();
      v12 = operator new(8 * prime);
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;
      if (v13)
        operator delete(v13);
      v14 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (prime != v14);
      v16 = a1 + 16;
      v15 = *(uint64_t ***)(a1 + 16);
      if (v15)
      {
        v17 = (size_t)v15[1];
        v18 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v17 >= prime)
            v17 %= prime;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
          for (i = *v15; *v15; i = *v15)
          {
            v37 = i[1];
            if (v37 >= prime)
              v37 %= prime;
            if (v37 == v17)
            {
              v15 = (uint64_t **)i;
            }
            else
            {
              v38 = i;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
              {
                do
                {
                  v39 = v38;
                  v38 = (uint64_t *)*v38;
                }
                while (v38 && *((_DWORD *)i + 4) == *((_DWORD *)v38 + 4));
                *v15 = v38;
                v40 = 8 * v37;
                *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
                **(_QWORD **)(*(_QWORD *)a1 + v40) = i;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v15;
                v15 = (uint64_t **)i;
                v17 = v37;
              }
            }
          }
        }
        else
        {
          v19 = v17 & v18;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
          for (j = *v15; *v15; j = *v15)
          {
            v21 = j[1] & v18;
            if (v21 == v19)
            {
              v15 = (uint64_t **)j;
            }
            else
            {
              v22 = j;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
              {
                do
                {
                  v23 = v22;
                  v22 = (uint64_t *)*v22;
                }
                while (v22 && *((_DWORD *)j + 4) == *((_DWORD *)v22 + 4));
                *v15 = v22;
                v24 = 8 * v21;
                *v23 = **(_QWORD **)(*(_QWORD *)a1 + v24);
                **(_QWORD **)(*(_QWORD *)a1 + v24) = j;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
                v15 = (uint64_t **)j;
                v19 = v21;
              }
            }
          }
        }
      }
      v5 = prime;
    }
    else
    {
      v50 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v50)
        operator delete(v50);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] >= 2uLL)
  {
    v41 = v4;
    if (v5 <= v4)
      v41 = v4 % v5;
    v42 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v41);
    if (!v42)
    {
      v35 = 0;
      v48 = *(_QWORD *)(a2 + 8);
      if (v48 < v5)
        goto LABEL_78;
      goto LABEL_77;
    }
    v43 = 0;
    do
    {
      v35 = v42;
      v42 = (uint64_t *)*v42;
      if (!v42)
        break;
      v46 = v42[1];
      v47 = v46;
      if (v46 >= v5)
        v47 = v46 % v5;
      if (v47 != v41)
        break;
      v44 = v46 == v4 && *((_DWORD *)v42 + 4) == *(_DWORD *)(a2 + 16);
      v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    v30 = (v5 - 1) & v4;
    v31 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v30);
    if (!v31)
    {
      v35 = 0;
      v48 = *(_QWORD *)(a2 + 8);
      goto LABEL_75;
    }
    v32 = 0;
    do
    {
      v35 = v31;
      v31 = (uint64_t *)*v31;
      if (!v31)
        break;
      v36 = v31[1];
      if ((v36 & (v5 - 1)) != v30)
        break;
      v33 = v36 == v4 && *((_DWORD *)v31 + 4) == *(_DWORD *)(a2 + 16);
      v34 = v32 & !v33;
      v32 |= v33;
    }
    while ((v34 & 1) == 0);
  }
  v48 = *(_QWORD *)(a2 + 8);
  if (v29.u32[0] <= 1uLL)
  {
LABEL_75:
    v48 &= v5 - 1;
    goto LABEL_78;
  }
  if (v48 >= v5)
LABEL_77:
    v48 %= v5;
LABEL_78:
  if (!v35)
  {
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v48) = a1 + 16;
    if (!*(_QWORD *)a2)
      goto LABEL_92;
    v49 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5)
        v49 %= v5;
    }
    else
    {
      v49 &= v5 - 1;
    }
LABEL_91:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = a2;
    goto LABEL_92;
  }
  *(_QWORD *)a2 = *v35;
  *v35 = a2;
  if (*(_QWORD *)a2)
  {
    v49 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5)
        v49 %= v5;
    }
    else
    {
      v49 &= v5 - 1;
    }
    if (v49 != v48)
      goto LABEL_91;
  }
LABEL_92:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t CPGRequestGetOutputQuadMeshEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

uint64_t CPGRequestSetOutputQuadMeshEnabled(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 152) = a2;
  return 0;
}

CFStringRef CPGRequestCopyID(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v1 = *(const char **)v1;
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, 0x8000100u);
}

uint64_t CPGRequestSetFromCFDictionary()
{
  return 4294967294;
}

uint64_t sub_239A53F24(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_239A53F54(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B83E31CLL);
}

double CPGRequestListCreate()
{
  _QWORD *v0;
  double result;

  v0 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    v0[4] = 0;
    result = 0.0;
    *(_OWORD *)v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
    *((_DWORD *)v0 + 8) = 1;
    *v0 = &off_250AF2398;
  }
  return result;
}

uint64_t CPGRequestListRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 32);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

unsigned int *CPGRequestListRelease(unsigned int *result)
{
  unsigned int *v1;
  unsigned int **v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v1 = result;
  v2 = (unsigned int **)*((_QWORD *)result + 1);
  v3 = (unsigned int **)*((_QWORD *)result + 2);
  if (v2 == v3)
    goto LABEL_10;
  do
  {
    result = *v2;
    if (*v2)
    {
      v4 = result + 39;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    ++v2;
  }
  while (v2 != v3);
  if (v1)
  {
LABEL_10:
    v7 = v1 + 8;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

uint64_t CPGRequestListGetSize(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
}

uint64_t CPGRequestListGetRequestAtIndex(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2);
}

void CPGRequestListAdd(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  if (a2)
  {
    v4 = (unsigned int *)(a2 + 156);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (char *)a1[1];
    v10 = (v7 - v9) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_2394189F8();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_239418A80();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = a2;
    v8 = v15 + 1;
    if (v7 == v9)
    {
      v9 = v7;
    }
    else
    {
      v17 = v7 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_32;
      if ((unint64_t)(v9 - v14) < 0x20)
        goto LABEL_32;
      v18 = (v17 >> 3) + 1;
      v19 = &v14[8 * v10 - 16];
      v20 = v7 - 16;
      v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      v7 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          v23 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v15 = v23;
        }
        while (v7 != v9);
        v9 = (char *)a1[1];
      }
    }
    a1[1] = v15;
    a1[2] = v8;
    a1[3] = v16;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v7 = a2;
    v8 = v7 + 8;
  }
  a1[2] = v8;
}

uint64_t sub_239A54234(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_239A542D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGSampleCreateWithCVPixelBuffer(unint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  signed int PixelFormatType;
  unsigned __int16 v10;
  _QWORD *v11;
  double *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char **v21;
  char *v22;
  int64_t v23;
  _QWORD *v24;
  char *v25;
  size_t v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  _QWORD *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  _OWORD *v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  double __src[4];
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  result = 4294967294;
  if (a1 >> 31 || !pixelBuffer)
    return result;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  result = 4294967291;
  if (PixelFormatType > 875704437)
  {
    if (PixelFormatType == 1111970369)
      goto LABEL_9;
    v10 = 12406;
  }
  else
  {
    if (PixelFormatType == 32)
      goto LABEL_9;
    v10 = 12390;
  }
  if (PixelFormatType != (v10 | 0x34320000))
    return result;
LABEL_9:
  if (!a3)
  {
    v14 = (char *)operator new(0x390uLL);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = &off_250AF23D8;
    v12 = (double *)(v14 + 24);
    bzero(v14 + 24, 0x378uLL);
    v15 = operator new(0x48uLL);
    v15[8] = 0x3FF0000000000000;
    *((_QWORD *)v14 + 8) = v15 + 9;
    *((_QWORD *)v14 + 9) = v15 + 9;
    *(_OWORD *)v15 = xmmword_239F0D0B8;
    *((_OWORD *)v15 + 1) = unk_239F0D0C8;
    *((_OWORD *)v15 + 2) = xmmword_239F0D0D8;
    *((_OWORD *)v15 + 3) = unk_239F0D0E8;
    *((_QWORD *)v14 + 7) = v15;
    *((_OWORD *)v14 + 5) = 0u;
    *((_OWORD *)v14 + 6) = 0u;
    *((_OWORD *)v14 + 7) = 0u;
    *((_OWORD *)v14 + 8) = 0u;
    *(_OWORD *)(v14 + 137) = 0u;
    *((_OWORD *)v14 + 10) = 0u;
    *((_OWORD *)v14 + 11) = 0u;
    *((_OWORD *)v14 + 12) = 0u;
    *((_OWORD *)v14 + 13) = 0u;
    *((_OWORD *)v14 + 14) = 0u;
    *((_OWORD *)v14 + 15) = 0u;
    *((_OWORD *)v14 + 16) = 0u;
    *((_OWORD *)v14 + 17) = 0u;
    *((_OWORD *)v14 + 18) = 0u;
    *((_QWORD *)v14 + 38) = 0xC415AF1D78B58C40;
    *(_WORD *)(v14 + 335) = 0;
    v14[312] = 0;
    v14[359] = 0;
    *((_QWORD *)v14 + 45) = -1;
    *((_DWORD *)v14 + 92) = -1;
    v14[376] = 0;
    v14[400] = 0;
    v14[504] = 0;
    v14[512] = 0;
    v14[904] = 0;
    *(_OWORD *)(v14 + 408) = 0u;
    *(_OWORD *)(v14 + 424) = 0u;
    *(_OWORD *)(v14 + 440) = 0u;
    *(_OWORD *)(v14 + 456) = 0u;
    v14[472] = 0;
    *(_QWORD *)&v46 = v14 + 24;
    *((_QWORD *)&v46 + 1) = v14;
    goto LABEL_15;
  }
  v11 = operator new(0x390uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_250AF23D8;
  v12 = (double *)(v11 + 3);
  sub_239A54A38((uint64_t)(v11 + 3), a3 + 8);
  *(_QWORD *)&v46 = v11 + 3;
  *((_QWORD *)&v46 + 1) = v11;
  v13 = *(_QWORD **)(a3 + 112);
  if (*(_QWORD *)(a3 + 120) - (_QWORD)v13 != 16 || !*v13 || !v13[1])
  {
LABEL_15:
    v16 = CPGSampleMetadataCreate();
    *(_QWORD *)&__src[0] = CVPixelBufferGetWidth(pixelBuffer);
    *(_QWORD *)&__src[1] = CVPixelBufferGetHeight(pixelBuffer);
    v17 = (char *)*((_QWORD *)v16 + 14);
    v18 = *((_QWORD *)v16 + 16);
    if ((unint64_t)(v18 - (_QWORD)v17) >= 0x10)
    {
      v21 = (char **)(v16 + 120);
      v22 = (char *)*((_QWORD *)v16 + 15);
      v23 = v22 - v17;
      if ((unint64_t)(v22 - v17) <= 0xF)
      {
        v45 = a1;
        v24 = a4;
        v25 = (char *)__src + v23;
        if (v22 != v17)
        {
          memcpy(v17, __src, v22 - v17);
          v17 = *v21;
        }
        v26 = 16 - v23;
        memcpy(v17, v25, v26);
        a4 = v24;
        a1 = v45;
LABEL_30:
        *v21 = &v17[v26];
        if (a3)
        {
          v27 = *(double **)(a3 + 40);
          v28 = *v27;
          if (*v27 == -1.0 || (v28 >= -1.0 ? (v29 = v28 + 1.0) : (v29 = -1.0 - v28), v29 <= 0.00000001))
          {
            v30 = v27[4];
            if (v30 == -1.0)
              goto LABEL_88;
            v31 = v30 + 1.0;
            if (v30 < -1.0)
              v31 = -1.0 - v30;
            if (v31 <= 0.00000001)
            {
LABEL_88:
              if (*(_BYTE *)(a3 + 888)
                && (!*(_QWORD *)(a3 + 496) || !*(_QWORD *)(a3 + 504) || !*(_QWORD *)(a3 + 512) || !*(_DWORD *)(a3 + 520)))
              {
                *((_QWORD *)v12 + 61) = CVPixelBufferGetWidth(pixelBuffer);
                *((_QWORD *)v12 + 62) = CVPixelBufferGetHeight(pixelBuffer);
                __src[0] = -1.0;
                if (sub_2396B8968((uint64_t)(v12 + 61), __src))
                {
                  v32 = (_QWORD *)*((_QWORD *)v16 + 5);
                  *v32 = *(_QWORD *)&__src[0];
                  v32[4] = *(_QWORD *)&__src[0];
                }
                v12 = (double *)v46;
              }
            }
          }
        }
        sub_239A54A38((uint64_t)__src, (uint64_t)(v16 + 8));
        if (v49 - v48 == 72 && *(double *)v48 > 0.0 && v12 != __src && *((double *)v48 + 4) > 0.0)
          sub_23945D3D0((_QWORD *)v12 + 4, v48, v49, 9uLL);
        if (v12 != __src && v51 - v50 == 128)
          sub_23945D3D0((_QWORD *)v12 + 7, v50, v51, 0x10uLL);
        if (v56)
        {
          *((_BYTE *)v12 + 128) = v56;
          if (v12 == __src)
          {
LABEL_65:
            sub_239A54FD0((uint64_t)__src);
            v33 = (unsigned int *)(v16 + 896);
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
              (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
            goto LABEL_69;
          }
          sub_23945D3D0((_QWORD *)v12 + 17, v57, v58, (v58 - v57) >> 3);
          sub_23945D3D0((_QWORD *)v12 + 20, v59, v60, (v60 - v59) >> 3);
        }
        if (v12 != __src && v53 - v52 == 24)
          sub_23945D3D0((_QWORD *)v12 + 10, v52, v53, 3uLL);
        if (v12 != __src && v55 - v54 == 16)
          sub_23945D3D0((_QWORD *)v12 + 13, v54, v55, 2uLL);
        goto LABEL_65;
      }
    }
    else
    {
      if (v17)
      {
        *((_QWORD *)v16 + 15) = v17;
        operator delete(v17);
        v18 = 0;
        *((_QWORD *)v16 + 14) = 0;
        *((_QWORD *)v16 + 15) = 0;
        *((_QWORD *)v16 + 16) = 0;
      }
      v19 = v18 >> 2;
      if ((unint64_t)(v18 >> 2) <= 2)
        v19 = 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20 >> 61)
        sub_2394189F8();
      v17 = (char *)operator new(8 * v20);
      *((_QWORD *)v16 + 15) = v17;
      v21 = (char **)(v16 + 120);
      *((_QWORD *)v16 + 14) = v17;
      *((_QWORD *)v16 + 16) = &v17[8 * v20];
    }
    *(_OWORD *)v17 = *(_OWORD *)__src;
    v26 = 16;
    goto LABEL_30;
  }
LABEL_69:
  v36 = (std::__shared_weak_count *)operator new(0x38uLL);
  v36->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v36->__shared_owners_;
  v36->__shared_weak_owners_ = 0;
  v36->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF2450;
  v36[1].__vftable = (std::__shared_weak_count_vtbl *)off_250AF5830;
  sub_23979BA20(&v36[1].__shared_owners_, (std::__shared_weak_count_vtbl *)pixelBuffer, 1, 0);
  v38 = operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
  if (v38)
  {
    *(_QWORD *)&v39 = v36 + 1;
    *((_QWORD *)&v39 + 1) = v36;
    if (*((_QWORD *)&v46 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v38[1] = v39;
    v38[2] = v46;
    *((_DWORD *)v38 + 12) = 1;
    *(_QWORD *)v38 = &off_250AF23B8;
    *((_QWORD *)v38 + 1) = a1;
    *a4 = v38;
  }
  else
  {
    *a4 = 0;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (*((_QWORD *)&v46 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 16))(*((_QWORD *)&v46 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
    }
  }
  return 0;
}

void sub_239A549D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239A4D7C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239A54A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 *v18;
  __int128 *v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE *v41;
  _BYTE *v42;
  int64_t v43;
  char *v44;
  char *v45;
  _BYTE *v46;
  __int128 v47;

  v4 = sub_2395A7198(a1, a2);
  *(_BYTE *)(v4 + 352) = 0;
  *(_BYTE *)(v4 + 376) = 0;
  if (*(_BYTE *)(a2 + 376))
  {
    if (*(char *)(a2 + 375) < 0)
    {
      sub_23941A7F8((_BYTE *)(v4 + 352), *(void **)(a2 + 352), *(_QWORD *)(a2 + 360));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 352);
      *(_QWORD *)(v4 + 368) = *(_QWORD *)(a2 + 368);
      *(_OWORD *)(v4 + 352) = v5;
    }
    *(_BYTE *)(a1 + 376) = 1;
  }
  v6 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a2 + 480))
  {
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 456) = 0;
    *(_QWORD *)(a1 + 464) = 0;
    v18 = *(__int128 **)(a2 + 448);
    v19 = *(__int128 **)(a2 + 456);
    v20 = (char *)v19 - (char *)v18;
    if (v19 != v18)
    {
      v21 = 0xCCCCCCCCCCCCCCCDLL * (v20 >> 3);
      if (v21 >= 0x666666666666667)
        sub_2394189F8();
      v22 = (char *)operator new(v20);
      *(_QWORD *)(a1 + 448) = v22;
      *(_QWORD *)(a1 + 456) = v22;
      *(_QWORD *)(a1 + 464) = &v22[40 * v21];
      do
      {
        v23 = *v18;
        *((_DWORD *)v22 + 4) = *((_DWORD *)v18 + 4);
        *(_OWORD *)v22 = v23;
        *(_QWORD *)(v22 + 20) = *(_QWORD *)((char *)v18 + 20);
        v24 = *(_QWORD *)((char *)v18 + 28);
        *((_DWORD *)v22 + 9) = *((_DWORD *)v18 + 9);
        *(_QWORD *)(v22 + 28) = v24;
        v22 += 40;
        v18 = (__int128 *)((char *)v18 + 40);
      }
      while (v18 != v19);
      *(_QWORD *)(a1 + 456) = v22;
    }
    *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
    *(_BYTE *)(a1 + 480) = 1;
  }
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 880) = 0;
  if (*(_BYTE *)(a2 + 880))
  {
    v25 = *(_OWORD *)(a2 + 488);
    v26 = *(_OWORD *)(a2 + 504);
    *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
    *(_OWORD *)(a1 + 488) = v25;
    *(_OWORD *)(a1 + 504) = v26;
    if (*(char *)(a2 + 551) < 0)
    {
      sub_23941A7F8((_BYTE *)(a1 + 528), *(void **)(a2 + 528), *(_QWORD *)(a2 + 536));
    }
    else
    {
      v27 = *(_OWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 528) = v27;
    }
    if (*(char *)(a2 + 575) < 0)
    {
      sub_23941A7F8((_BYTE *)(a1 + 552), *(void **)(a2 + 552), *(_QWORD *)(a2 + 560));
    }
    else
    {
      v28 = *(_OWORD *)(a2 + 552);
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 552) = v28;
    }
    if (*(char *)(a2 + 599) < 0)
    {
      sub_23941A7F8((_BYTE *)(a1 + 576), *(void **)(a2 + 576), *(_QWORD *)(a2 + 584));
    }
    else
    {
      v29 = *(_OWORD *)(a2 + 576);
      *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
      *(_OWORD *)(a1 + 576) = v29;
    }
    if (*(char *)(a2 + 623) < 0)
    {
      sub_23941A7F8((_BYTE *)(a1 + 600), *(void **)(a2 + 600), *(_QWORD *)(a2 + 608));
    }
    else
    {
      v30 = *(_OWORD *)(a2 + 600);
      *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
      *(_OWORD *)(a1 + 600) = v30;
    }
    if (*(char *)(a2 + 647) < 0)
    {
      sub_23941A7F8((_BYTE *)(a1 + 624), *(void **)(a2 + 624), *(_QWORD *)(a2 + 632));
    }
    else
    {
      v31 = *(_OWORD *)(a2 + 624);
      *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
      *(_OWORD *)(a1 + 624) = v31;
    }
    v32 = *(_OWORD *)(a2 + 648);
    v33 = *(_OWORD *)(a2 + 664);
    v34 = *(_OWORD *)(a2 + 696);
    *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
    *(_OWORD *)(a1 + 696) = v34;
    *(_OWORD *)(a1 + 648) = v32;
    *(_OWORD *)(a1 + 664) = v33;
    v35 = *(_OWORD *)(a2 + 712);
    v36 = *(_OWORD *)(a2 + 728);
    v37 = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
    *(_OWORD *)(a1 + 760) = v37;
    *(_OWORD *)(a1 + 712) = v35;
    *(_OWORD *)(a1 + 728) = v36;
    v38 = *(_OWORD *)(a2 + 776);
    v39 = *(_OWORD *)(a2 + 792);
    v40 = *(_OWORD *)(a2 + 808);
    *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 792) = v39;
    *(_OWORD *)(a1 + 808) = v40;
    *(_OWORD *)(a1 + 776) = v38;
    *(_QWORD *)(a1 + 848) = 0;
    *(_QWORD *)(a1 + 832) = 0;
    *(_QWORD *)(a1 + 840) = 0;
    v41 = *(_BYTE **)(a2 + 832);
    v42 = *(_BYTE **)(a2 + 840);
    v43 = v42 - v41;
    if (v42 != v41)
    {
      if (v43 < 0)
        sub_2394189F8();
      v44 = (char *)operator new(v42 - v41);
      *(_QWORD *)(a1 + 832) = v44;
      *(_QWORD *)(a1 + 840) = v44;
      v45 = &v44[8 * (v43 >> 3)];
      *(_QWORD *)(a1 + 848) = v45;
      memcpy(v44, v41, v43);
      *(_QWORD *)(a1 + 840) = v45;
    }
    v46 = (_BYTE *)(a1 + 856);
    if (*(char *)(a2 + 879) < 0)
    {
      sub_23941A7F8(v46, *(void **)(a2 + 856), *(_QWORD *)(a2 + 864));
    }
    else
    {
      v47 = *(_OWORD *)(a2 + 856);
      *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
      *(_OWORD *)v46 = v47;
    }
    *(_BYTE *)(a1 + 880) = 1;
  }
  return a1;
}

void sub_239A54E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12)
{
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void **v15;
  void **v16;
  void **v17;
  void *v19;
  void *v20;

  v19 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v12 + 840) = v19;
    operator delete(v19);
    if ((*(char *)(v12 + 647) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v12 + 623) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(v12 + 647) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v17);
  if ((*(char *)(v12 + 623) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v12 + 599) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*v16);
  if ((*(char *)(v12 + 599) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v12 + 575) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*v15);
  if ((*(char *)(v12 + 575) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v12 + 551) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*a9);
  if ((*(char *)(v12 + 551) & 0x80000000) == 0)
  {
LABEL_7:
    if (!*(_BYTE *)(v12 + 880))
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*a10);
  if (!*(_BYTE *)(v12 + 880))
  {
LABEL_8:
    if (!*(_BYTE *)(v12 + 480))
      goto LABEL_19;
    goto LABEL_17;
  }
LABEL_16:
  sub_2395A0E8C(v14);
  if (!*(_BYTE *)(v12 + 480))
    goto LABEL_19;
LABEL_17:
  v20 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v12 + 456) = v20;
    operator delete(v20);
  }
LABEL_19:
  sub_239A4D7C0(v12 + 432);
  sub_239A4D7C0(v12 + 416);
  sub_239A4D7C0(v12 + 400);
  sub_239A4D7C0(v12 + 384);
  if (*(_BYTE *)(v12 + 376))
  {
    if (*(char *)(v12 + 375) < 0)
      operator delete(*a12);
  }
  sub_2395A0DF8(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_239A54FD0(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  if (*(_BYTE *)(a1 + 880))
    sub_2395A0E8C(a1 + 488);
  if (*(_BYTE *)(a1 + 480))
  {
    v2 = *(void **)(a1 + 448);
    if (v2)
    {
      *(_QWORD *)(a1 + 456) = v2;
      operator delete(v2);
    }
  }
  v3 = *(std::__shared_weak_count **)(a1 + 440);
  if (!v3)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(std::__shared_weak_count **)(a1 + 424);
    if (!v6)
      goto LABEL_16;
  }
  else
  {
LABEL_10:
    v6 = *(std::__shared_weak_count **)(a1 + 424);
    if (!v6)
      goto LABEL_16;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_16:
  v9 = *(std::__shared_weak_count **)(a1 + 408);
  if (!v9)
    goto LABEL_20;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = *(std::__shared_weak_count **)(a1 + 392);
    if (!v12)
      goto LABEL_26;
  }
  else
  {
LABEL_20:
    v12 = *(std::__shared_weak_count **)(a1 + 392);
    if (!v12)
      goto LABEL_26;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_26:
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  return sub_2395A0DF8(a1);
}

void sub_239A55128(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF2450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A55138(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF2450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A55168(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void sub_239A55178(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF23D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A55188(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF23D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A551B8(uint64_t a1)
{
  return sub_239A54FD0(a1 + 24);
}

uint64_t CPGSampleRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 48);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGSampleRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 48);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGSampleGetID(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_239A55214(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_239A5525C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    operator delete(v4);
  JUMPOUT(0x23B83E31CLL);
}

double CPGSampleCameraTransformMapCreate()
{
  _OWORD *v0;
  double result;

  v0 = operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    result = 0.0;
    v0[1] = 0u;
    v0[2] = 0u;
    *((_QWORD *)v0 + 6) = 0;
    *v0 = 0u;
    *((_DWORD *)v0 + 10) = 1065353216;
    *((_DWORD *)v0 + 12) = 1;
    *(_QWORD *)v0 = &off_250AF2410;
  }
  return result;
}

uint64_t CPGSampleCameraTransformMapRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 48);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGSampleCameraTransformMapRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 48);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

int8x8_t *CPGSampleCameraTransformMapGetCameraTransformBySampleID(int8x8_t *result, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  int8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;

  if (result)
  {
    v2 = result[2];
    if (v2)
    {
      v3 = (uint8x8_t)vcnt_s8(v2);
      v3.i16[0] = vaddlv_u8(v3);
      if (v3.u32[0] > 1uLL)
      {
        v4 = a2;
        if (*(_QWORD *)&v2 <= a2)
          v4 = a2 % *(_QWORD *)&v2;
      }
      else
      {
        v4 = (*(_QWORD *)&v2 - 1) & a2;
      }
      v5 = result[1];
      v6 = *(_QWORD **)(*(_QWORD *)&v5 + 8 * v4);
      if (v6)
      {
        v7 = (_QWORD *)*v6;
        if (*v6)
        {
          v8 = *(_QWORD *)&v2 - 1;
          if (v3.u32[0] < 2uLL)
          {
            while (1)
            {
              v9 = v7[1];
              if (v9 == a2)
              {
                if (v7[2] == a2)
                  goto LABEL_23;
              }
              else if ((v9 & v8) != v4)
              {
                return 0;
              }
              v7 = (_QWORD *)*v7;
              if (!v7)
                return 0;
            }
          }
          do
          {
            v10 = v7[1];
            if (v10 == a2)
            {
              if (v7[2] == a2)
              {
LABEL_23:
                if (v3.u32[0] > 1uLL)
                {
                  v11 = a2;
                  if (*(_QWORD *)&v2 <= a2)
                    v11 = a2 % *(_QWORD *)&v2;
                }
                else
                {
                  v11 = v8 & a2;
                }
                v12 = *(_QWORD **)(*(_QWORD *)&v5 + 8 * v11);
                if (!v12 || (v13 = (_QWORD *)*v12) == 0)
LABEL_44:
                  sub_23941D898("unordered_map::at: key not found");
                if (v3.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v14 = v13[1];
                    if (v14 == a2)
                    {
                      if (v13[2] == a2)
                        return (int8x8_t *)(v13 + 4);
                    }
                    else if ((v14 & v8) != v11)
                    {
                      goto LABEL_44;
                    }
                    v13 = (_QWORD *)*v13;
                    if (!v13)
                      goto LABEL_44;
                  }
                }
                while (1)
                {
                  v15 = v13[1];
                  if (v15 == a2)
                  {
                    if (v13[2] == a2)
                      return (int8x8_t *)(v13 + 4);
                  }
                  else
                  {
                    if (v15 >= *(_QWORD *)&v2)
                      v15 %= *(_QWORD *)&v2;
                    if (v15 != v11)
                      goto LABEL_44;
                  }
                  v13 = (_QWORD *)*v13;
                  if (!v13)
                    goto LABEL_44;
                }
              }
            }
            else
            {
              if (v10 >= *(_QWORD *)&v2)
                v10 %= *(_QWORD *)&v2;
              if (v10 != v4)
                return 0;
            }
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
      }
    }
    return 0;
  }
  return result;
}

__n128 CPGSampleCameraTransformMapAddBySampleID(uint64_t a1, unint64_t a2, __n128 *a3, __n128 result)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  __n128 *v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 **v40;
  unint64_t v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  void *v47;

  if (!a1)
    return result;
  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v8 <= a2)
        v4 = a2 % v8;
    }
    else
    {
      v4 = (v8 - 1) & a2;
    }
    v10 = *(void ***)(*(_QWORD *)(a1 + 8) + 8 * v4);
    if (v10)
    {
      v11 = (__n128 *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11->n128_u64[1];
            if (v13 == a2)
            {
              if (v11[1].n128_u64[0] == a2)
                goto LABEL_84;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_24;
            }
            v11 = (__n128 *)v11->n128_u64[0];
            if (!v11)
              goto LABEL_24;
          }
        }
        do
        {
          v12 = v11->n128_u64[1];
          if (v12 == a2)
          {
            if (v11[1].n128_u64[0] == a2)
              goto LABEL_84;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (__n128 *)v11->n128_u64[0];
        }
        while (v11);
      }
    }
  }
LABEL_24:
  v11 = (__n128 *)operator new(0xA0uLL);
  v11->n128_u64[0] = 0;
  v11->n128_u64[1] = v6;
  v11[1].n128_u64[0] = v6;
  v11[2] = 0u;
  v11[3] = 0u;
  v11[4] = 0u;
  v11[5] = 0u;
  v11[6] = 0u;
  v11[7] = 0u;
  v11[8] = 0u;
  v11[9] = 0u;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
  v15 = *(float *)(a1 + 40);
  if (v8 && (float)(v15 * (float)v8) >= v14)
  {
    v6 = v4;
    goto LABEL_74;
  }
  v16 = 1;
  if (v8 >= 3)
    v16 = (v8 & (v8 - 1)) != 0;
  v17 = v16 | (2 * v8);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v8 = *(_QWORD *)(a1 + 16);
  }
  if (prime > v8)
  {
LABEL_37:
    if (prime >> 61)
      sub_239418A80();
    v20 = operator new(8 * prime);
    v21 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *(_QWORD *)(a1 + 16) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v22++) = 0;
    while (prime != v22);
    v24 = a1 + 24;
    v23 = *(_QWORD **)(a1 + 24);
    if (!v23)
      goto LABEL_61;
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else
        {
          v30 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(v30 + 8 * v29))
          {
            *v23 = *i;
            v31 = 8 * v29;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 8) + v31);
            **(_QWORD **)(*(_QWORD *)(a1 + 8) + v31) = i;
          }
          else
          {
            *(_QWORD *)(v30 + 8 * v29) = v23;
            v23 = i;
            v27 = v29;
          }
        }
      }
LABEL_61:
      v8 = prime;
      goto LABEL_62;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v25) = v24;
    v35 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_61;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v25)
      {
        v38 = *(_QWORD *)(a1 + 8);
        if (!*(_QWORD *)(v38 + 8 * v37))
        {
          *(_QWORD *)(v38 + 8 * v37) = v23;
          goto LABEL_66;
        }
        *v23 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + v36);
        **(_QWORD **)(*(_QWORD *)(a1 + 8) + v36) = v35;
        v35 = v23;
      }
      v37 = v25;
LABEL_66:
      v23 = v35;
      v35 = (_QWORD *)*v35;
      v25 = v37;
      if (!v35)
        goto LABEL_61;
    }
  }
  if (prime >= v8)
    goto LABEL_62;
  v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
  if (v8 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
  {
    v32 = std::__next_prime(v32);
  }
  else
  {
    v34 = 1 << -(char)__clz(v32 - 1);
    if (v32 >= 2)
      v32 = v34;
  }
  if (prime <= v32)
    prime = v32;
  if (prime < v8)
  {
    if (!prime)
    {
      v47 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v47)
        operator delete(v47);
      v8 = 0;
      *(_QWORD *)(a1 + 16) = 0;
      goto LABEL_62;
    }
    goto LABEL_37;
  }
  v8 = *(_QWORD *)(a1 + 16);
LABEL_62:
  if ((v8 & (v8 - 1)) != 0)
  {
    if (v8 <= v6)
      v6 %= v8;
  }
  else
  {
    v6 &= v8 - 1;
  }
LABEL_74:
  v39 = *(_QWORD *)(a1 + 8);
  v40 = *(__n128 ***)(v39 + 8 * v6);
  if (v40)
  {
    v11->n128_u64[0] = (unint64_t)*v40;
  }
  else
  {
    v11->n128_u64[0] = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(v39 + 8 * v6) = a1 + 24;
    if (!v11->n128_u64[0])
      goto LABEL_83;
    v41 = *(_QWORD *)(v11->n128_u64[0] + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v41 >= v8)
        v41 %= v8;
    }
    else
    {
      v41 &= v8 - 1;
    }
    v40 = (__n128 **)(*(_QWORD *)(a1 + 8) + 8 * v41);
  }
  *v40 = v11;
LABEL_83:
  ++*(_QWORD *)(a1 + 32);
LABEL_84:
  v42 = *a3;
  v43 = a3[1];
  v44 = a3[3];
  v11[4] = a3[2];
  v11[5] = v44;
  v11[2] = v42;
  v11[3] = v43;
  result = a3[4];
  v45 = a3[5];
  v46 = a3[7];
  v11[8] = a3[6];
  v11[9] = v46;
  v11[6] = result;
  v11[7] = v45;
  return result;
}

void sub_239A5597C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A55990(uint64_t a1)
{
  sub_239A54FD0(a1 + 8);
  return a1;
}

void sub_239A559B8(uint64_t a1)
{
  sub_239A54FD0(a1 + 8);
  JUMPOUT(0x23B83E31CLL);
}

char *CPGSampleMetadataCreate()
{
  char *v0;
  char *v1;
  _QWORD *v2;

  v0 = (char *)operator new(0x388uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    bzero(v0, 0x388uLL);
    v2 = operator new(0x48uLL);
    *((_QWORD *)v1 + 6) = v2 + 9;
    *((_QWORD *)v1 + 7) = v2 + 9;
    v2[8] = 0x3FF0000000000000;
    *(_OWORD *)v2 = xmmword_239F0D0B8;
    *((_OWORD *)v2 + 1) = unk_239F0D0C8;
    *((_OWORD *)v2 + 2) = xmmword_239F0D0D8;
    *((_OWORD *)v2 + 3) = unk_239F0D0E8;
    *((_QWORD *)v1 + 5) = v2;
    *((_OWORD *)v1 + 4) = 0u;
    *((_OWORD *)v1 + 5) = 0u;
    *((_OWORD *)v1 + 6) = 0u;
    *((_OWORD *)v1 + 7) = 0u;
    *(_OWORD *)(v1 + 121) = 0u;
    *((_OWORD *)v1 + 9) = 0u;
    *((_OWORD *)v1 + 10) = 0u;
    *((_OWORD *)v1 + 11) = 0u;
    *((_OWORD *)v1 + 12) = 0u;
    *((_OWORD *)v1 + 13) = 0u;
    *((_OWORD *)v1 + 14) = 0u;
    *((_OWORD *)v1 + 15) = 0u;
    *((_OWORD *)v1 + 16) = 0u;
    *((_OWORD *)v1 + 17) = 0u;
    *((_QWORD *)v1 + 36) = 0xC415AF1D78B58C40;
    *(_WORD *)(v1 + 319) = 0;
    v1[296] = 0;
    v1[343] = 0;
    *((_QWORD *)v1 + 43) = -1;
    *((_DWORD *)v1 + 88) = -1;
    v1[360] = 0;
    v1[384] = 0;
    v1[488] = 0;
    v1[496] = 0;
    v1[888] = 0;
    *(_OWORD *)(v1 + 392) = 0u;
    *(_OWORD *)(v1 + 408) = 0u;
    *(_OWORD *)(v1 + 424) = 0u;
    *(_OWORD *)(v1 + 440) = 0u;
    v1[456] = 0;
    *((_DWORD *)v1 + 224) = 1;
    *(_QWORD *)v1 = &off_250AF2430;
  }
  return v1;
}

void sub_239A55AF4(void *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E310](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x239A55AE4);
}

uint64_t CPGSampleMetadataRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 896);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGSampleMetadataRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 896);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGSampleMetadataSetTimestamp(uint64_t a1, uint64_t a2)
{
  char v3;
  std::string __p;
  char v6;

  if (a2)
  {
    sub_23962A000(a2, &__p);
    if (!v6)
      return 4294967294;
    v3 = sub_2396DAA08((unsigned __int8 **)&__p);
    if ((v3 & 1) != 0)
      std::string::operator=((std::string *)(a1 + 320), &__p);
    if (v6)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v3 & 1) == 0)
      return 4294967294;
  }
  else
  {
    MEMORY[0x23B83DBFC](a1 + 320, "");
  }
  return 0;
}

void sub_239A55BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CPGSampleMetadataSetFocalLengthInPixel(uint64_t a1, __n128 a2)
{
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  if (!a1)
    return 4294967294;
  result = 4294967294;
  if (a2.n128_f64[0] > 0.0 && a2.n128_f64[1] > 0.0)
  {
    v5 = a1 + 40;
    v4 = *(_QWORD **)(a1 + 40);
    if (*(_QWORD *)(v5 + 8) - (_QWORD)v4 == 72)
    {
      result = 0;
      *v4 = a2.n128_u64[0];
      v4[4] = a2.n128_u64[1];
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t CPGSampleMetadataSetFocalLengthIn35mmFormatWithImageSize(uint64_t a1, __n128 a2, double a3)
{
  unsigned int v3;
  double v5;
  uint64_t result;
  double v7;
  double *v8;
  uint64_t v9;

  if (!a1)
    return 4294967294;
  v3 = LODWORD(a3);
  if (LODWORD(a3) <= HIDWORD(a3))
    v3 = HIDWORD(a3);
  if (!v3)
    return 4294967294;
  v5 = a2.n128_f64[0] / 36.0 * (double)v3;
  result = 4294967294;
  if (v5 > 0.0)
  {
    v7 = a2.n128_f64[1] / 36.0 * (double)v3;
    if (v7 > 0.0)
    {
      v9 = a1 + 40;
      v8 = *(double **)(a1 + 40);
      if (*(_QWORD *)(v9 + 8) - (_QWORD)v8 == 72)
      {
        result = 0;
        *v8 = v5;
        v8[4] = v7;
      }
      else
      {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t CPGSampleMetadataSetPrincipalPoint(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    return 4294967294;
  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 48) - v2 != 72)
    return 0xFFFFFFFFLL;
  result = 0;
  *(_QWORD *)(v2 + 16) = a2.n128_u64[0];
  *(_QWORD *)(v2 + 40) = a2.n128_u64[1];
  return result;
}

uint64_t CPGSampleMetadataSetHeikkilaDistortion(uint64_t a1, __int128 *a2, __n128 a3)
{
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  __n128 v11;

  if (!a1)
    return 4294967294;
  v4 = (uint64_t *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 144);
  v6 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 136) = 1;
  v7 = *(_QWORD *)(a1 + 152) - v3;
  if (v7 != 40)
  {
    if ((unint64_t)v7 > 0x27)
    {
      *(_QWORD *)(a1 + 152) = v3 + 40;
    }
    else
    {
      v10 = v5;
      v11 = a3;
      v9 = v6;
      sub_23945E108(a1 + 144, 5 - (v7 >> 3));
      v6 = v9;
      *(_QWORD *)&v5 = v10;
      a3 = v11;
      v3 = *v4;
    }
  }
  result = 0;
  *(_OWORD *)v3 = v6;
  *(_QWORD *)(v3 + 16) = v5;
  *(__n128 *)(v3 + 24) = a3;
  return result;
}

uint64_t CPGSampleMetadataSetKannalaDistortion(uint64_t a1, __int128 *a2)
{
  _OWORD *v2;
  _OWORD **v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;

  if (!a1)
    return 4294967294;
  v3 = (_OWORD **)(a1 + 144);
  v2 = *(_OWORD **)(a1 + 144);
  v5 = *a2;
  v4 = a2[1];
  *(_BYTE *)(a1 + 136) = 2;
  v6 = *(_QWORD *)(a1 + 152) - (_QWORD)v2;
  if (v6 != 32)
  {
    if ((unint64_t)v6 > 0x1F)
    {
      *(_QWORD *)(a1 + 152) = v2 + 2;
    }
    else
    {
      v8 = v5;
      v9 = v4;
      sub_23945E108(a1 + 144, 4 - (v6 >> 3));
      v5 = v8;
      v4 = v9;
      v2 = *v3;
    }
  }
  result = 0;
  *v2 = v5;
  v2[1] = v4;
  return result;
}

uint64_t CPGSampleMetadataSetLUT256Distortion(uint64_t a1, const __CFArray *a2, const __CFArray *a3, __n128 a4)
{
  void **v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unint64_t *v36;
  char *v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  _OWORD *v41;
  unint64_t *v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  void *__p;
  char *v48;
  char v49;
  void *v50;
  char *v51;
  char v52;

  if (!a1)
    return 4294967294;
  *(_BYTE *)(a1 + 136) = 3;
  v6 = (void **)(a1 + 144);
  sub_239601C50(a2, (uint64_t)&v50);
  if (v52 && v51 - (_BYTE *)v50 == 2048 && v6 != &v50)
    sub_23945D3D0(v6, (char *)v50, v51, 0x100uLL);
  sub_239601C50(a3, (uint64_t)&__p);
  if (v49 && v48 - (_BYTE *)__p == 2048 && (void **)(a1 + 168) != &__p)
    sub_23945D3D0((_QWORD *)(a1 + 168), (char *)__p, v48, 0x100uLL);
  v8 = *(unint64_t **)(a1 + 152);
  v7 = *(unint64_t **)(a1 + 160);
  if (v8 >= v7)
  {
    v12 = (unint64_t *)*v6;
    v13 = (char *)v8 - (_BYTE *)*v6;
    v14 = v13 >> 3;
    v15 = (v13 >> 3) + 1;
    if (v15 >> 61)
      sub_2394189F8();
    v16 = (char *)v7 - (char *)v12;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        sub_239418A80();
      v18 = operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[8 * v14];
    v7 = (unint64_t *)&v18[8 * v17];
    *v19 = a4.n128_u64[0];
    v10 = v19 + 1;
    if (v8 != v12)
    {
      v20 = (char *)v8 - (char *)v12 - 8;
      if (v20 < 0x58)
        goto LABEL_69;
      if ((unint64_t)((char *)v8 - &v18[v13]) < 0x20)
        goto LABEL_69;
      v21 = (v20 >> 3) + 1;
      v22 = &v18[8 * v14 - 16];
      v23 = v8 - 2;
      v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 4;
        v24 -= 4;
      }
      while (v24);
      v19 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
      v8 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_69:
        do
        {
          v26 = *--v8;
          *--v19 = v26;
        }
        while (v8 != v12);
      }
    }
    *(_QWORD *)(a1 + 144) = v19;
    *(_QWORD *)(a1 + 152) = v10;
    *(_QWORD *)(a1 + 160) = v7;
    if (v12)
    {
      operator delete(v12);
      v7 = *(unint64_t **)(a1 + 160);
    }
    v9 = a4.n128_u64[1];
  }
  else
  {
    v9 = a4.n128_u64[1];
    *v8 = a4.n128_u64[0];
    v10 = v8 + 1;
  }
  *(_QWORD *)(a1 + 152) = v10;
  v27 = v9;
  if (v10 >= v7)
  {
    v29 = (unint64_t *)*v6;
    v30 = (char *)v10 - (_BYTE *)*v6;
    v31 = v30 >> 3;
    v32 = (v30 >> 3) + 1;
    if (v32 >> 61)
      sub_2394189F8();
    v33 = (char *)v7 - (char *)v29;
    if (v33 >> 2 > v32)
      v32 = v33 >> 2;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 61)
        sub_239418A80();
      v35 = operator new(8 * v34);
    }
    else
    {
      v35 = 0;
    }
    v36 = (unint64_t *)&v35[8 * v31];
    v37 = &v35[8 * v34];
    *v36 = v27;
    v28 = v36 + 1;
    if (v10 == v29)
      goto LABEL_54;
    v38 = (char *)v10 - (char *)v29 - 8;
    if (v38 >= 0x58)
    {
      if ((unint64_t)((char *)v10 - &v35[v30]) >= 0x20)
      {
        v40 = (v38 >> 3) + 1;
        v39 = &v10[-(v40 & 0x3FFFFFFFFFFFFFFCLL)];
        v41 = &v35[8 * v31 - 16];
        v42 = v10 - 2;
        v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v44 = *(_OWORD *)v42;
          *(v41 - 1) = *((_OWORD *)v42 - 1);
          *v41 = v44;
          v41 -= 2;
          v42 -= 4;
          v43 -= 4;
        }
        while (v43);
        v36 -= v40 & 0x3FFFFFFFFFFFFFFCLL;
        if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_54:
          *(_QWORD *)(a1 + 144) = v36;
          *(_QWORD *)(a1 + 152) = v28;
          *(_QWORD *)(a1 + 160) = v37;
          if (v29)
            operator delete(v29);
          goto LABEL_56;
        }
      }
      else
      {
        v39 = v10;
      }
    }
    else
    {
      v39 = v10;
    }
    do
    {
      v45 = *--v39;
      *--v36 = v45;
    }
    while (v39 != v29);
    goto LABEL_54;
  }
  *v10 = v9;
  v28 = v10 + 1;
LABEL_56:
  *(_QWORD *)(a1 + 152) = v28;
  if (v49 && __p)
  {
    v48 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    if (v50)
    {
      v51 = (char *)v50;
      operator delete(v50);
    }
  }
  return 0;
}

void sub_239A561D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 && __p)
    operator delete(__p);
  if (a18)
  {
    if (a15)
      operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CPGSampleMetadataSetCameraID(uint64_t a1, int a2)
{
  uint64_t result;

  if (!a1)
    return 4294967294;
  result = 0;
  *(_DWORD *)(a1 + 344) = a2;
  return result;
}

double CPGSampleMetadataSetCameraTransform(uint64_t a1, uint64_t a2, __n128 a3)
{
  __int128 v4;
  int8x16_t v5;
  __int128 v6;
  float64x2_t v7;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v12;
  float64x2_t v19;
  float64x2_t v22;
  int64x2_t v24;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  __int128 v33;
  double v34;
  _QWORD *v35;
  _QWORD **v36;
  uint64_t v37;

  if (a1)
  {
    v5 = *(int8x16_t *)a2;
    v4 = *(_OWORD *)(a2 + 16);
    v7 = *(float64x2_t *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 48);
    _Q6 = *(float64x2_t *)(a2 + 64);
    a3 = *(__n128 *)(a2 + 80);
    v9 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a2, (int64x2_t)v7);
    v10 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, (int64x2_t)v7);
    _Q20.f64[0] = *(float64_t *)(a2 + 16);
    _Q20.f64[1] = *(float64_t *)(a2 + 48);
    v12 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v9, *(double *)a2), v10, *(float64x2_t *)a2, 1), _Q20, *(double *)&v4);
    _Q21 = (int64x2_t)vmulq_f64(_Q6, *(float64x2_t *)a2);
    _D22 = *(_QWORD *)(a2 + 8);
    __asm { FMLA            D21, D22, V6.D[1] }
    *(double *)_Q21.i64 = *(double *)_Q21.i64 + a3.n128_f64[0] * *(double *)&v4;
    v19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v9, v7.f64[0]), v10, v7, 1), _Q20, *(double *)&v6);
    _Q23 = (int8x16_t)vmulq_f64(_Q6, v7);
    _D24 = *(_QWORD *)(a2 + 40);
    __asm { FMLA            D23, D24, V6.D[1] }
    *(double *)_Q23.i64 = *(double *)_Q23.i64 + a3.n128_f64[0] * *(double *)&v6;
    v22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v9, _Q6.f64[0]), v10, _Q6, 1), _Q20, a3.n128_f64[0]);
    _Q19 = vmulq_f64(_Q6, _Q6);
    _Q20.f64[0] = *(float64_t *)(a2 + 72);
    __asm { FMLA            D19, D20, V6.D[1] }
    _Q19.f64[0] = _Q19.f64[0] + *(double *)(a2 + 80) * *(double *)(a2 + 80);
    v24 = (int64x2_t)vaddq_f64(v19, (float64x2_t)xmmword_239EC6830);
    __asm { FMOV            V22.2D, #-1.0 }
    *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, _Q22));
    _Q19.f64[1] = NAN;
    if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v12, (float64x2_t)xmmword_239EC6820)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v24, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v24)), vabsq_f64(v22)))) <= 0.0001)
    {
      *(_QWORD *)&v26.f64[0] = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
      *(_QWORD *)&v27.f64[0] = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
      v26.f64[1] = *(float64_t *)(a2 + 48);
      v28.f64[0] = *(float64_t *)(a2 + 80);
      v28.f64[1] = v27.f64[0];
      v29 = vmulq_f64(v26, v28);
      v27.f64[1] = *(float64_t *)(a2 + 80);
      *(_QWORD *)&v30.f64[1] = vextq_s8(v5, v5, 8uLL).u64[0];
      v30.f64[0] = *(float64_t *)(a2 + 16);
      v31 = vmulq_f64(v30, vsubq_f64(vmulq_n_f64(v27, v7.f64[0]), vmulq_n_f64(v26, _Q6.f64[0])));
      if (fabs(v31.f64[0]+ *(double *)v5.i64 * vsubq_f64(v29, (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1)).f64[0]- v31.f64[1]+ -1.0) <= 0.0001)
      {
        v32 = *(double *)(a2 + 24);
        v33 = *(_OWORD *)(a2 + 112);
        v34 = v32;
        if (v32 == 0.0)
          goto LABEL_8;
        if (v32 < 0.0)
          v34 = 0.0 - v32;
        if (v34 <= 0.0001)
        {
LABEL_8:
          *(_QWORD *)&v6 = *(_QWORD *)(a2 + 56);
          if (*((double *)&v6 + 1) == 0.0)
            goto LABEL_12;
          if (*((double *)&v6 + 1) < 0.0)
            *(double *)&v6 = 0.0 - *((double *)&v6 + 1);
          if (*(double *)&v6 <= 0.0001)
          {
LABEL_12:
            a3.n128_u64[0] = *(_QWORD *)(a2 + 88);
            if (a3.n128_f64[1] == 0.0)
              goto LABEL_20;
            if (a3.n128_f64[1] < 0.0)
              a3.n128_f64[0] = 0.0 - a3.n128_f64[1];
            if (a3.n128_f64[0] <= 0.0001)
            {
LABEL_20:
              if (*((double *)&v33 + 1) == 1.0
                || (*((double *)&v33 + 1) >= 1.0
                  ? (a3.n128_f64[0] = *((double *)&v33 + 1) + -1.0)
                  : (a3.n128_f64[0] = 1.0 - *((double *)&v33 + 1)),
                    a3.n128_f64[0] <= 0.0001))
              {
                v35 = *(_QWORD **)(a1 + 64);
                v36 = (_QWORD **)(a1 + 64);
                v37 = *(_QWORD *)(a1 + 72) - (_QWORD)v35;
                if (v37 != 128)
                {
                  if ((unint64_t)v37 > 0x7F)
                  {
                    *(_QWORD *)(a1 + 72) = v35 + 16;
                  }
                  else
                  {
                    sub_23945E108(a1 + 64, 16 - (v37 >> 3));
                    v35 = *v36;
                  }
                }
                *v35 = *(_QWORD *)a2;
                v35[1] = *(_QWORD *)(a2 + 32);
                v35[2] = *(_QWORD *)(a2 + 64);
                v35[3] = *(_QWORD *)(a2 + 96);
                v35[4] = *(_QWORD *)(a2 + 8);
                v35[5] = *(_QWORD *)(a2 + 40);
                v35[6] = *(_QWORD *)(a2 + 72);
                v35[7] = *(_QWORD *)(a2 + 104);
                v35[8] = *(_QWORD *)(a2 + 16);
                v35[9] = *(_QWORD *)(a2 + 48);
                v35[10] = *(_QWORD *)(a2 + 80);
                v35[11] = *(_QWORD *)(a2 + 112);
                v35[12] = *(_QWORD *)(a2 + 24);
                v35[13] = *(_QWORD *)(a2 + 56);
                v35[14] = *(_QWORD *)(a2 + 88);
                a3.n128_u64[0] = *(_QWORD *)(a2 + 120);
                v35[15] = a3.n128_u64[0];
              }
            }
          }
        }
      }
    }
  }
  return a3.n128_f64[0];
}

void CPGSampleMetadataSetCameraTransformWithCovariance(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v6[2];
  __n128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a1)
  {
    v2 = *(_OWORD *)(a2 + 80);
    v9 = *(_OWORD *)(a2 + 64);
    v10 = v2;
    v3 = *(_OWORD *)(a2 + 112);
    v11 = *(_OWORD *)(a2 + 96);
    v12 = v3;
    v4 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v4;
    v5 = *(_OWORD *)(a2 + 48);
    v7 = *(__n128 *)(a2 + 32);
    v8 = v5;
    CPGSampleMetadataSetCameraTransform(a1, (uint64_t)v6, v7);
  }
}

uint64_t CPGSampleMetadataSetCameraCenter(_QWORD *a1, float64x2_t *a2)
{
  float64x2_t v3;
  float64x2_t v4;
  double *v6;
  char *v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  __int128 __src;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294967294;
  v4 = *a2;
  v3 = a2[1];
  v6 = (double *)a1[8];
  v7 = (char *)a1[9];
  v8 = a1 + 8;
  v9 = v7 - (char *)v6;
  v10 = (v7 - (char *)v6) >> 3;
  if (v10 == 16)
  {
    v21 = 0;
    v22 = -*v6 * v4.f64[0] - vmuld_lane_f64(v6[1], v4, 1) - v6[2] * v3.f64[0];
    v23 = -v6[4] * v4.f64[0] - vmuld_lane_f64(v6[5], v4, 1) - v6[6] * v3.f64[0];
    v24 = -v6[8] * v4.f64[0] - vmuld_lane_f64(v6[9], v4, 1);
    v25 = v6[10];
    v6[3] = v22;
    v6[7] = v23;
    v6[11] = v24 - v25 * v3.f64[0];
  }
  else if (v10)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    *(_QWORD *)&v28 = 0;
    __src = 0x3FF0000000000000uLL;
    *((double *)&v28 + 1) = -v4.f64[0];
    v29 = xmmword_239EC6850;
    *(_QWORD *)&v30 = 0;
    *((double *)&v30 + 1) = -v4.f64[1];
    v31 = 0uLL;
    *(_QWORD *)&v32 = 0x3FF0000000000000;
    *((double *)&v32 + 1) = -v3.f64[0];
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0x3FF0000000000000;
    v11 = a1[10];
    v33 = 0uLL;
    if ((unint64_t)(v11 - (_QWORD)v6) >= 0x80)
    {
      if (v7 != (char *)v6)
      {
        memcpy(v6, &__src, v7 - (char *)v6);
        v7 = (char *)a1[9];
      }
      if (v9 == 128)
      {
        v20 = 0;
      }
      else
      {
        memcpy(v7, &__src, 128 - v9);
        v20 = (128 - v9) >> 3;
      }
    }
    else
    {
      if (v6)
      {
        a1[9] = v6;
        operator delete(v6);
        v11 = 0;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
      v12 = v11 >> 2;
      if ((unint64_t)(v11 >> 2) <= 0x10)
        v12 = 16;
      v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
      v14 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v13)
        v14 = v12;
      if (v14 >> 61)
        sub_2394189F8();
      v15 = 8 * v14;
      v7 = (char *)operator new(8 * v14);
      a1[8] = v7;
      a1[10] = &v7[v15];
      v16 = v32;
      *((_OWORD *)v7 + 4) = v31;
      *((_OWORD *)v7 + 5) = v16;
      v17 = v34;
      *((_OWORD *)v7 + 6) = v33;
      *((_OWORD *)v7 + 7) = v17;
      v18 = v28;
      *(_OWORD *)v7 = __src;
      *((_OWORD *)v7 + 1) = v18;
      v19 = v30;
      v20 = 16;
      *((_OWORD *)v7 + 2) = v29;
      *((_OWORD *)v7 + 3) = v19;
    }
    v21 = 0;
    a1[9] = &v7[8 * v20];
  }
  return v21;
}

uint64_t CPGSampleMetadataSetCameraCenterWithCovariance(_QWORD *a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v4[2];

  if (!a1)
    return 4294967294;
  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  return CPGSampleMetadataSetCameraCenter(a1, v4);
}

double CPGSampleMetadataSetObjectBoundingBox(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v7[8];

  v2 = *(_OWORD *)(MEMORY[0x24BDAEDE8] + 80);
  v7[4] = *(_OWORD *)(MEMORY[0x24BDAEDE8] + 64);
  v7[5] = v2;
  v3 = *(_OWORD *)(MEMORY[0x24BDAEDE8] + 112);
  v7[6] = *(_OWORD *)(MEMORY[0x24BDAEDE8] + 96);
  v7[7] = v3;
  v4 = *(_OWORD *)(MEMORY[0x24BDAEDE8] + 16);
  v7[0] = *MEMORY[0x24BDAEDE8];
  v7[1] = v4;
  v5 = *(_OWORD *)(MEMORY[0x24BDAEDE8] + 48);
  v7[2] = *(_OWORD *)(MEMORY[0x24BDAEDE8] + 32);
  v7[3] = v5;
  return CPGSampleMetadataSetObjectBoundingBoxWithTransform(a1, a2, v7);
}

double CPGSampleMetadataSetObjectBoundingBoxWithTransform(uint64_t a1, uint64_t a2, __int128 *a3)
{
  double result;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[8];

  if (a2 && sub_2394AEBA4((float64x2_t *)(a2 + 8), 0.0001))
  {
    v7 = *(_QWORD **)(a1 + 192);
    v8 = *(_QWORD *)(a1 + 200) - (_QWORD)v7;
    if (v8 != 128)
    {
      if ((unint64_t)v8 > 0x7F)
      {
        *(_QWORD *)(a1 + 200) = v7 + 16;
      }
      else
      {
        sub_23945E108(a1 + 192, 16 - (v8 >> 3));
        v7 = *(_QWORD **)(a1 + 192);
      }
    }
    *v7 = *(_QWORD *)(a2 + 8);
    v7[1] = *(_QWORD *)(a2 + 40);
    v7[2] = *(_QWORD *)(a2 + 72);
    v7[3] = *(_QWORD *)(a2 + 104);
    v7[4] = *(_QWORD *)(a2 + 16);
    v7[5] = *(_QWORD *)(a2 + 48);
    v7[6] = *(_QWORD *)(a2 + 80);
    v7[7] = *(_QWORD *)(a2 + 112);
    v7[8] = *(_QWORD *)(a2 + 24);
    v7[9] = *(_QWORD *)(a2 + 56);
    v7[10] = *(_QWORD *)(a2 + 88);
    v7[11] = *(_QWORD *)(a2 + 120);
    v7[12] = *(_QWORD *)(a2 + 32);
    v7[13] = *(_QWORD *)(a2 + 64);
    v7[14] = *(_QWORD *)(a2 + 96);
    v7[15] = *(_QWORD *)(a2 + 128);
    v9 = *a3;
    v10 = a3[1];
    v11 = a3[3];
    v15[2] = a3[2];
    v15[3] = v11;
    v15[0] = v9;
    v15[1] = v10;
    v12 = a3[4];
    v13 = a3[5];
    v14 = a3[7];
    v15[6] = a3[6];
    v15[7] = v14;
    v15[4] = v12;
    v15[5] = v13;
    return CPGSampleMetadataSetObjectTransform(a1, (uint64_t)v15);
  }
  return result;
}

double CPGSampleMetadataSetObjectTransform(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  int8x16_t v3;
  __int128 v4;
  float64x2_t v5;
  __int128 v6;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v18;
  float64x2_t v22;
  int64x2_t v24;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v33;
  __int128 v34;
  double v35;
  _QWORD *v36;
  _QWORD **v37;
  uint64_t v38;

  v3 = *(int8x16_t *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v5 = *(float64x2_t *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  _Q6 = *(float64x2_t *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  v8 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a2, (int64x2_t)v5);
  v9 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, (int64x2_t)v5);
  v10.f64[0] = *(float64_t *)(a2 + 16);
  v10.f64[1] = *(float64_t *)(a2 + 48);
  v11 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v8, *(double *)a2), v9, *(float64x2_t *)a2, 1), v10, *(double *)&v2);
  _Q21 = (int64x2_t)vmulq_f64(_Q6, *(float64x2_t *)a2);
  _D22 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D21, D22, V6.D[1] }
  *(double *)_Q21.i64 = *(double *)_Q21.i64 + *(double *)&v6 * *(double *)&v2;
  v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v8, v5.f64[0]), v9, v5, 1), v10, *(double *)&v4);
  _Q23 = (int8x16_t)vmulq_f64(_Q6, v5);
  _D24 = *(_QWORD *)(a2 + 40);
  __asm { FMLA            D23, D24, V6.D[1] }
  _D24 = *(_QWORD *)(a2 + 72);
  *(double *)_Q23.i64 = *(double *)_Q23.i64 + *(double *)&v6 * *(double *)&v4;
  v22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v8, _Q6.f64[0]), v9, _Q6, 1), v10, *(double *)&v6);
  _Q19 = vmulq_f64(_Q6, _Q6);
  __asm { FMLA            D19, D24, V6.D[1] }
  _Q19.f64[0] = _Q19.f64[0] + *(double *)(a2 + 80) * *(double *)(a2 + 80);
  v24 = (int64x2_t)vaddq_f64(v18, (float64x2_t)xmmword_239EC6830);
  __asm { FMOV            V22.2D, #-1.0 }
  *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, _Q22));
  _Q19.f64[1] = NAN;
  if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v11, (float64x2_t)xmmword_239EC6820)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v24, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v24)), vabsq_f64(v22)))) <= 0.0001)
  {
    *(_QWORD *)&v26.f64[0] = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
    *(_QWORD *)&v27.f64[0] = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
    v26.f64[1] = *(float64_t *)(a2 + 48);
    v28.f64[0] = *(float64_t *)(a2 + 80);
    v28.f64[1] = v27.f64[0];
    v29 = vmulq_f64(v26, v28);
    v27.f64[1] = *(float64_t *)(a2 + 80);
    *(_QWORD *)&v30.f64[1] = vextq_s8(v3, v3, 8uLL).u64[0];
    v30.f64[0] = *(float64_t *)(a2 + 16);
    v31 = vmulq_f64(v30, vsubq_f64(vmulq_n_f64(v27, v5.f64[0]), vmulq_n_f64(v26, _Q6.f64[0])));
    if (fabs(v31.f64[0]+ *(double *)v3.i64 * vsubq_f64(v29, (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1)).f64[0]- v31.f64[1]+ -1.0) <= 0.0001)
    {
      v33 = *(double *)(a2 + 24);
      v34 = *(_OWORD *)(a2 + 112);
      v35 = v33;
      if (v33 == 0.0)
        goto LABEL_7;
      if (v33 < 0.0)
        v35 = 0.0 - v33;
      if (v35 <= 0.0001)
      {
LABEL_7:
        *(_QWORD *)&v4 = *(_QWORD *)(a2 + 56);
        if (*((double *)&v4 + 1) == 0.0)
          goto LABEL_11;
        if (*((double *)&v4 + 1) < 0.0)
          *(double *)&v4 = 0.0 - *((double *)&v4 + 1);
        if (*(double *)&v4 <= 0.0001)
        {
LABEL_11:
          *(_QWORD *)&v6 = *(_QWORD *)(a2 + 88);
          if (*((double *)&v6 + 1) == 0.0)
            goto LABEL_19;
          if (*((double *)&v6 + 1) < 0.0)
            *(double *)&v6 = 0.0 - *((double *)&v6 + 1);
          if (*(double *)&v6 <= 0.0001)
          {
LABEL_19:
            if (*((double *)&v34 + 1) == 1.0
              || (*((double *)&v34 + 1) >= 1.0
                ? (*(double *)&v6 = *((double *)&v34 + 1) + -1.0)
                : (*(double *)&v6 = 1.0 - *((double *)&v34 + 1)),
                  *(double *)&v6 <= 0.0001))
            {
              v36 = *(_QWORD **)(a1 + 216);
              v37 = (_QWORD **)(a1 + 216);
              v38 = *(_QWORD *)(a1 + 224) - (_QWORD)v36;
              if (v38 != 128)
              {
                if ((unint64_t)v38 > 0x7F)
                {
                  *(_QWORD *)(a1 + 224) = v36 + 16;
                }
                else
                {
                  sub_23945E108(a1 + 216, 16 - (v38 >> 3));
                  v36 = *v37;
                }
              }
              *v36 = *(_QWORD *)a2;
              v36[1] = *(_QWORD *)(a2 + 32);
              v36[2] = *(_QWORD *)(a2 + 64);
              v36[3] = *(_QWORD *)(a2 + 96);
              v36[4] = *(_QWORD *)(a2 + 8);
              v36[5] = *(_QWORD *)(a2 + 40);
              v36[6] = *(_QWORD *)(a2 + 72);
              v36[7] = *(_QWORD *)(a2 + 104);
              v36[8] = *(_QWORD *)(a2 + 16);
              v36[9] = *(_QWORD *)(a2 + 48);
              v36[10] = *(_QWORD *)(a2 + 80);
              v36[11] = *(_QWORD *)(a2 + 112);
              v36[12] = *(_QWORD *)(a2 + 24);
              v36[13] = *(_QWORD *)(a2 + 56);
              v36[14] = *(_QWORD *)(a2 + 88);
              *(_QWORD *)&v6 = *(_QWORD *)(a2 + 120);
              v36[15] = v6;
            }
          }
        }
      }
    }
  }
  return *(double *)&v6;
}

uint64_t CPGSampleMetadataSetMaskWithCVPixelBuffer(uint64_t a1, std::__shared_weak_count_vtbl *pixelBuffer)
{
  uint64_t result;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  result = 4294967294;
  if (a1 && pixelBuffer)
  {
    if (CVPixelBufferGetPixelFormatType((CVPixelBufferRef)pixelBuffer) == 1278226488)
    {
      v5 = operator new(0x38uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = &off_250AF2450;
      v5[3] = off_250AF5830;
      sub_23979BA20(v5 + 4, pixelBuffer, 1, 0);
      v6 = *(std::__shared_weak_count **)(a1 + 400);
      *(_QWORD *)(a1 + 392) = v5 + 3;
      *(_QWORD *)(a1 + 400) = v5;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      return 0;
    }
    else
    {
      return 4294967291;
    }
  }
  return result;
}

void sub_239A56D8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t CPGSampleMetadataSetPortraitDepthMap(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  uint64_t result;
  signed int PixelFormatType;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  result = 4294967294;
  if (a1 && pixelBuffer)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    result = 4294967291;
    if (PixelFormatType > 1717856626)
    {
      if (PixelFormatType != 1751411059 && PixelFormatType != 1717856627)
        return result;
    }
    else if (PixelFormatType != 1278226534 && PixelFormatType != 1278226536)
    {
      return result;
    }
    v6 = operator new(0x38uLL);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = &off_250AF2450;
    v6[3] = off_250AF5830;
    sub_23979BA20(v6 + 4, (std::__shared_weak_count_vtbl *)pixelBuffer, 1, 0);
    v7 = *(std::__shared_weak_count **)(a1 + 416);
    *(_QWORD *)(a1 + 408) = v6 + 3;
    *(_QWORD *)(a1 + 416) = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return 0;
  }
  return result;
}

void sub_239A56EB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t CPGSampleMetadataSetGravity(size_t __sz, __int128 *a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  char *v13;
  size_t v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!__sz)
    return 4294967294;
  v3 = *((_QWORD *)a2 + 2);
  v18 = *a2;
  v19 = v3;
  v5 = (_QWORD *)(__sz + 88);
  v4 = *(char **)(__sz + 88);
  v6 = *(_QWORD *)(__sz + 104);
  if ((unint64_t)(v6 - (_QWORD)v4) >= 0x18)
  {
    v11 = (char **)(__sz + 96);
    v13 = *(char **)(__sz + 96);
    v14 = v13 - v4;
    if ((unint64_t)(v13 - v4) <= 0x17)
    {
      v15 = (char *)&v18 + v14;
      if (v13 != v4)
      {
        memcpy(*(void **)(__sz + 88), &v18, v14);
        v4 = *v11;
      }
      v16 = 24 - v14;
      memcpy(v4, v15, v16);
      v17 = v16 >> 3;
      goto LABEL_18;
    }
    *(_OWORD *)v4 = v18;
    *((_QWORD *)v4 + 2) = v19;
  }
  else
  {
    if (v4)
    {
      *(_QWORD *)(__sz + 96) = v4;
      operator delete(v4);
      v6 = 0;
      *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    v7 = v6 >> 2;
    if ((unint64_t)(v6 >> 2) <= 3)
      v7 = 3;
    v8 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
    v9 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v8)
      v9 = v7;
    if (v9 >> 61)
      sub_2394189F8();
    v10 = 8 * v9;
    v4 = (char *)operator new(8 * v9);
    *(_QWORD *)(__sz + 88) = v4;
    *(_QWORD *)(__sz + 104) = &v4[v10];
    v11 = (char **)(__sz + 96);
    *(_OWORD *)v4 = v18;
    *((_QWORD *)v4 + 2) = v19;
  }
  v17 = 3;
LABEL_18:
  result = 0;
  *v11 = &v4[8 * v17];
  return result;
}

uint64_t CPGSampleMetadataSetSegmentID(uint64_t a1, int a2)
{
  uint64_t result;

  if (!a1)
    return 4294967294;
  result = 0;
  *(_DWORD *)(a1 + 348) = a2;
  return result;
}

uint64_t CPGSampleMetadataSetDepthPointCloudWithExtrinsics(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  __int128 *v6;
  __int128 *v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;

  if (!a2)
    return 4294967294;
  v4 = (_QWORD *)(a1 + 456);
  if (*(_BYTE *)(a1 + 488))
  {
    if (v4 != (_QWORD *)(a2 + 8))
      sub_239A571B4((char **)(a1 + 456), *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
    result = 0;
    *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 32);
  }
  else
  {
    *v4 = 0;
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    v6 = *(__int128 **)(a2 + 8);
    v7 = *(__int128 **)(a2 + 16);
    v8 = (char *)v7 - (char *)v6;
    if (v7 != v6)
    {
      v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
      if (v9 >= 0x666666666666667)
        sub_2394189F8();
      v10 = (char *)operator new(v8);
      *(_QWORD *)(a1 + 456) = v10;
      *(_QWORD *)(a1 + 464) = v10;
      *(_QWORD *)(a1 + 472) = &v10[40 * v9];
      do
      {
        v11 = *v6;
        *((_DWORD *)v10 + 4) = *((_DWORD *)v6 + 4);
        *(_OWORD *)v10 = v11;
        *(_QWORD *)(v10 + 20) = *(_QWORD *)((char *)v6 + 20);
        v12 = *(_QWORD *)((char *)v6 + 28);
        *((_DWORD *)v10 + 9) = *((_DWORD *)v6 + 9);
        *(_QWORD *)(v10 + 28) = v12;
        v10 += 40;
        v6 = (__int128 *)((char *)v6 + 40);
      }
      while (v6 != v7);
      *(_QWORD *)(a1 + 464) = v10;
    }
    result = 0;
    *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 32);
    *(_BYTE *)(a1 + 488) = 1;
  }
  return result;
}

void sub_239A57198(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 464) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_239A571B4(char **a1, __int128 *a2, __int128 *a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  void **v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v28;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v16 = (void **)(a1 + 1);
    v17 = v18;
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v26 = result;
      if (a2 != a3)
      {
        do
        {
          v27 = *v6;
          *((_DWORD *)v26 + 4) = *((_DWORD *)v6 + 4);
          *(_OWORD *)v26 = v27;
          *(_QWORD *)(v26 + 20) = *(_QWORD *)((char *)v6 + 20);
          v28 = *(_QWORD *)((char *)v6 + 28);
          *((_DWORD *)v26 + 9) = *((_DWORD *)v6 + 9);
          *(_QWORD *)(v26 + 28) = v28;
          v26 += 40;
          v6 = (__int128 *)((char *)v6 + 40);
        }
        while (v6 != a3);
      }
      v15 = v26 - result;
    }
    else
    {
      v20 = (__int128 *)((char *)a2 + 40 * v19);
      if (v17 != result)
      {
        do
        {
          v21 = *v6;
          *((_DWORD *)result + 4) = *((_DWORD *)v6 + 4);
          *(_OWORD *)result = v21;
          *(_QWORD *)(result + 20) = *(_QWORD *)((char *)v6 + 20);
          v22 = *(_QWORD *)((char *)v6 + 28);
          *((_DWORD *)result + 9) = *((_DWORD *)v6 + 9);
          *(_QWORD *)(result + 28) = v22;
          v6 = (__int128 *)((char *)v6 + 40);
          result += 40;
        }
        while (v6 != v20);
        result = (char *)*v16;
      }
      v23 = result;
      if (v20 != a3)
      {
        v23 = result;
        do
        {
          v24 = *v20;
          *((_DWORD *)v23 + 4) = *((_DWORD *)v20 + 4);
          *(_OWORD *)v23 = v24;
          *(_QWORD *)(v23 + 20) = *(_QWORD *)((char *)v20 + 20);
          v25 = *(_QWORD *)((char *)v20 + 28);
          *((_DWORD *)v23 + 9) = *((_DWORD *)v20 + 9);
          *(_QWORD *)(v23 + 28) = v25;
          v23 += 40;
          v20 = (__int128 *)((char *)v20 + 40);
        }
        while (v20 != a3);
      }
      v15 = v23 - result;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_27;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_27:
      sub_2394189F8();
    v13 = 40 * v12;
    result = (char *)operator new(40 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_OWORD *)v14 = *v6;
        *((_DWORD *)v14 + 4) = *((_DWORD *)v6 + 4);
        *(_QWORD *)(v14 + 20) = *(_QWORD *)((char *)v6 + 20);
        *(_QWORD *)(v14 + 28) = *(_QWORD *)((char *)v6 + 28);
        *((_DWORD *)v14 + 9) = *((_DWORD *)v6 + 9);
        v14 += 40;
        v6 = (__int128 *)((char *)v6 + 40);
      }
      while (v6 != a3);
    }
    v15 = v14 - result;
    v16 = (void **)(a1 + 1);
  }
  *v16 = &result[v15];
  return result;
}

uint64_t CPGSampleMetadataSetDepthMapWithConfidence(_QWORD *a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  signed int PixelFormatType;
  uint64_t result;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;

  if (!pixelBuffer)
    return 4294967294;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  result = 4294967291;
  if (PixelFormatType <= 1751410031)
  {
    if (PixelFormatType != 1717855600 && PixelFormatType != 1717856627)
      return result;
LABEL_9:
    if (a3 && CVPixelBufferGetPixelFormatType(a3) != 1278226488)
      return 4294967291;
    if (PixelFormatType == 1751411059 || PixelFormatType == 1717856627)
      return CPGSampleMetadataSetPortraitDepthMap((uint64_t)a1, pixelBuffer);
    v8 = operator new(0x38uLL);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_250AF2450;
    v8[3] = off_250AF5830;
    sub_23979BA20(v8 + 4, (std::__shared_weak_count_vtbl *)pixelBuffer, 1, 0);
    v9 = (std::__shared_weak_count *)a1[54];
    a1[53] = v8 + 3;
    a1[54] = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (a3)
    {
      v12 = operator new(0x38uLL);
      v12[1] = 0;
      v12[2] = 0;
      *v12 = &off_250AF2450;
      v12[3] = off_250AF5830;
      sub_23979BA20(v12 + 4, (std::__shared_weak_count_vtbl *)a3, 1, 0);
      v13 = (std::__shared_weak_count *)a1[56];
      a1[55] = v12 + 3;
      a1[56] = v12;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
LABEL_28:
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    else
    {
      v13 = (std::__shared_weak_count *)a1[56];
      a1[55] = 0;
      a1[56] = 0;
      if (v13)
      {
        v16 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v16);
        while (__stlxr(v15 - 1, v16));
        goto LABEL_28;
      }
    }
    return 0;
  }
  if (PixelFormatType == 1751411059 || PixelFormatType == 1751410032)
    goto LABEL_9;
  return result;
}

void sub_239A57604(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t CPGSampleMetadataSetImageAttachment()
{
  return 4294967291;
}

uint64_t CPGSampleMetadataSetFromCFDictionary(uint64_t a1, std::__shared_weak_count_vtbl *a2)
{
  if (a1)
    return CPGSampleMetadataSetFromCGImageProperties(a1, a2);
  else
    return 4294967294;
}

uint64_t CPGSampleMetadataSetFromCGImageProperties(uint64_t a1, std::__shared_weak_count_vtbl *a2)
{
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  __int128 v9;
  _OWORD *v10;
  void **v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int64x2_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  char v37;
  __int128 v38;
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];
  _BYTE v42[24];
  _BYTE v43[56];
  int64x2_t v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[9];

  if (a1)
  {
    *(_WORD *)&v39[7] = 0;
    LOBYTE(v38) = 0;
    *(_WORD *)&v40[7] = 0;
    *(_WORD *)&v41[7] = 0;
    *(_WORD *)&v42[7] = 0;
    memset(&v43[7], 0, 49);
    v35 = 0u;
    v36 = 0u;
    v37 = 0;
    v44 = vdupq_n_s64(0xC086800000000000);
    v45 = xmmword_239EC7560;
    LOBYTE(v47[0]) = 0;
    v46 = 0uLL;
    memset((char *)v47 + 8, 0, 80);
    memset((char *)&v47[5] + 8, 0, 48);
    sub_23962C330(&v33, a2, 1);
    sub_239601718(&v31, (uint64_t)&v33);
    v3 = sub_2395FEBB4((uint64_t)&v31, (uint64_t)&v35, 0);
    v4 = v3;
    v5 = v32;
    if (!v32)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v4)
      {
LABEL_7:
        sub_23959F33C((uint64_t)&v35, a1 + 8);
        v8 = *(unsigned __int8 *)(a1 + 888);
        v9 = v36;
        *(_OWORD *)(a1 + 496) = v35;
        *(_OWORD *)(a1 + 512) = v9;
        *(_BYTE *)(a1 + 528) = v37;
        v10 = (_OWORD *)(a1 + 536);
        if (v8)
        {
          sub_239A579CC((uint64_t)v10, &v38);
          v11 = (void **)(a1 + 864);
          if (*(char *)(a1 + 887) < 0)
            operator delete(*v11);
          v12 = 0;
          *(_OWORD *)v11 = v47[7];
          *(_QWORD *)(a1 + 880) = *(_QWORD *)&v47[8];
          BYTE7(v47[8]) = 0;
          LOBYTE(v47[7]) = 0;
          v13 = v34;
          if (!v34)
            goto LABEL_20;
        }
        else
        {
          v12 = 0;
          *(_QWORD *)(a1 + 552) = *(_QWORD *)v39;
          *v10 = v38;
          *(_QWORD *)v39 = 0;
          v38 = 0uLL;
          *(_OWORD *)(a1 + 560) = *(_OWORD *)&v39[8];
          *(_QWORD *)(a1 + 576) = *(_QWORD *)v40;
          *(_QWORD *)&v39[8] = 0;
          *(_QWORD *)&v39[16] = 0;
          *(_QWORD *)v40 = 0;
          *(_QWORD *)(a1 + 600) = *(_QWORD *)v41;
          *(_OWORD *)(a1 + 584) = *(_OWORD *)&v40[8];
          *(_QWORD *)&v40[16] = 0;
          *(_QWORD *)v41 = 0;
          *(_QWORD *)&v40[8] = 0;
          v14 = *(_OWORD *)&v41[8];
          *(_QWORD *)(a1 + 624) = *(_QWORD *)v42;
          *(_OWORD *)(a1 + 608) = v14;
          *(_QWORD *)&v41[8] = 0;
          *(_QWORD *)&v41[16] = 0;
          *(_QWORD *)v42 = 0;
          v15 = *(_OWORD *)&v42[8];
          *(_QWORD *)(a1 + 648) = *(_QWORD *)v43;
          *(_OWORD *)(a1 + 632) = v15;
          *(_QWORD *)&v42[8] = 0;
          *(_QWORD *)&v42[16] = 0;
          *(_QWORD *)v43 = 0;
          v16 = *(_OWORD *)&v43[8];
          v17 = *(_OWORD *)&v43[24];
          v18 = v44;
          *(_OWORD *)(a1 + 688) = *(_OWORD *)&v43[40];
          *(int64x2_t *)(a1 + 704) = v18;
          *(_OWORD *)(a1 + 656) = v16;
          *(_OWORD *)(a1 + 672) = v17;
          v19 = v45;
          v20 = v46;
          v21 = v47[1];
          *(_OWORD *)(a1 + 752) = v47[0];
          *(_OWORD *)(a1 + 768) = v21;
          *(_OWORD *)(a1 + 720) = v19;
          *(_OWORD *)(a1 + 736) = v20;
          v22 = v47[2];
          v23 = v47[3];
          v24 = v47[4];
          v25 = *((_QWORD *)&v47[5] + 1);
          *(_QWORD *)(a1 + 832) = *(_QWORD *)&v47[5];
          *(_OWORD *)(a1 + 800) = v23;
          *(_OWORD *)(a1 + 816) = v24;
          *(_OWORD *)(a1 + 784) = v22;
          *(_QWORD *)(a1 + 840) = v25;
          v26 = v47[6];
          v27 = v47[7];
          *((_QWORD *)&v47[5] + 1) = 0;
          *(_QWORD *)&v47[6] = 0;
          *(_OWORD *)(a1 + 848) = v26;
          *(_OWORD *)(a1 + 864) = v27;
          *(_QWORD *)(a1 + 880) = *(_QWORD *)&v47[8];
          memset((char *)&v47[6] + 8, 0, 32);
          *(_BYTE *)(a1 + 888) = 1;
          v13 = v34;
          if (!v34)
            goto LABEL_20;
        }
LABEL_17:
        v28 = (unint64_t *)&v13->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
          if ((SBYTE7(v47[8]) & 0x80000000) == 0)
          {
LABEL_22:
            if (*((_QWORD *)&v47[5] + 1))
            {
              *(_QWORD *)&v47[6] = *((_QWORD *)&v47[5] + 1);
              operator delete(*((void **)&v47[5] + 1));
            }
            if ((v43[7] & 0x80000000) != 0)
            {
              operator delete(*(void **)&v42[8]);
              if ((v42[7] & 0x80000000) == 0)
              {
LABEL_26:
                if ((v41[7] & 0x80000000) == 0)
                  goto LABEL_27;
                goto LABEL_32;
              }
            }
            else if ((v42[7] & 0x80000000) == 0)
            {
              goto LABEL_26;
            }
            operator delete(*(void **)&v41[8]);
            if ((v41[7] & 0x80000000) == 0)
            {
LABEL_27:
              if ((v40[7] & 0x80000000) == 0)
                goto LABEL_28;
              goto LABEL_33;
            }
LABEL_32:
            operator delete(*(void **)&v40[8]);
            if ((v40[7] & 0x80000000) == 0)
            {
LABEL_28:
              if ((v39[7] & 0x80000000) == 0)
                return v12;
LABEL_34:
              operator delete((void *)v38);
              return v12;
            }
LABEL_33:
            operator delete(*(void **)&v39[8]);
            if ((v39[7] & 0x80000000) == 0)
              return v12;
            goto LABEL_34;
          }
LABEL_21:
          operator delete(*(void **)&v47[7]);
          goto LABEL_22;
        }
LABEL_20:
        if ((SBYTE7(v47[8]) & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    else
    {
LABEL_6:
      if (v3)
        goto LABEL_7;
    }
    v12 = 4294967294;
    v13 = v34;
    if (!v34)
      goto LABEL_20;
    goto LABEL_17;
  }
  return 4294967294;
}

void sub_239A57998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  sub_2395A0E8C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_239A579CC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v9);
  v10 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v9 = v10;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v11);
  v12 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)v11 = v12;
  *((_BYTE *)a2 + 119) = 0;
  *((_BYTE *)a2 + 96) = 0;
  v13 = *(__int128 *)((char *)a2 + 232);
  v14 = *(__int128 *)((char *)a2 + 216);
  v15 = *(__int128 *)((char *)a2 + 200);
  *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
  *(_OWORD *)(a1 + 200) = v15;
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 232) = v13;
  v16 = *(__int128 *)((char *)a2 + 168);
  v17 = *(__int128 *)((char *)a2 + 152);
  v18 = *(__int128 *)((char *)a2 + 136);
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  *(_OWORD *)(a1 + 136) = v18;
  *(_OWORD *)(a1 + 152) = v17;
  *(_OWORD *)(a1 + 168) = v16;
  v19 = *(__int128 *)((char *)a2 + 248);
  v20 = *(__int128 *)((char *)a2 + 264);
  v21 = *(__int128 *)((char *)a2 + 280);
  *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
  *(_OWORD *)(a1 + 264) = v20;
  *(_OWORD *)(a1 + 280) = v21;
  *(_OWORD *)(a1 + 248) = v19;
  v22 = *(void **)(a1 + 304);
  if (v22)
  {
    *(_QWORD *)(a1 + 312) = v22;
    operator delete(v22);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
  }
  *(_OWORD *)(a1 + 304) = a2[19];
  *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
  *((_QWORD *)a2 + 38) = 0;
  *((_QWORD *)a2 + 39) = 0;
  *((_QWORD *)a2 + 40) = 0;
  return a1;
}

uint64_t CPGSampleMetadataSetFromImageFile(uint64_t a1, const __CFURL *a2)
{
  uint64_t v3;
  int v4;
  __int128 v5;
  _OWORD *v6;
  void **v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int64x2_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  __int128 v27;
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[56];
  int64x2_t v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[9];
  std::string __dst;
  std::string v38;
  char v39;

  if (!a1)
    return 4294967294;
  sub_2396CA024(a2, (uint64_t)&v38);
  if (!v39)
    return 4294967294;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    sub_23941A7F8(&__dst, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    __dst = v38;
  *(_WORD *)&v28[7] = 0;
  LOBYTE(v27) = 0;
  *(_WORD *)&v29[7] = 0;
  *(_WORD *)&v30[7] = 0;
  *(_WORD *)&v31[7] = 0;
  memset(&v32[7], 0, 49);
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  v33 = vdupq_n_s64(0xC086800000000000);
  v34 = xmmword_239EC7560;
  LOBYTE(v36[0]) = 0;
  v35 = 0uLL;
  memset((char *)v36 + 8, 0, 80);
  memset((char *)&v36[5] + 8, 0, 48);
  if (sub_2396013F0(&__dst, (uint64_t)&v24))
  {
    sub_23959F33C((uint64_t)&v24, a1 + 8);
    v4 = *(unsigned __int8 *)(a1 + 888);
    v5 = v25;
    *(_OWORD *)(a1 + 496) = v24;
    *(_OWORD *)(a1 + 512) = v5;
    *(_BYTE *)(a1 + 528) = v26;
    v6 = (_OWORD *)(a1 + 536);
    if (v4)
    {
      sub_239A579CC((uint64_t)v6, &v27);
      v7 = (void **)(a1 + 864);
      if (*(char *)(a1 + 887) < 0)
        operator delete(*v7);
      v3 = 0;
      *(_OWORD *)v7 = v36[7];
      *(_QWORD *)(a1 + 880) = *(_QWORD *)&v36[8];
      BYTE7(v36[8]) = 0;
      LOBYTE(v36[7]) = 0;
      v8 = (void *)*((_QWORD *)&v36[5] + 1);
      if (!*((_QWORD *)&v36[5] + 1))
        goto LABEL_17;
    }
    else
    {
      v3 = 0;
      *(_QWORD *)(a1 + 552) = *(_QWORD *)v28;
      *v6 = v27;
      *(_QWORD *)v28 = 0;
      v27 = 0uLL;
      *(_OWORD *)(a1 + 560) = *(_OWORD *)&v28[8];
      *(_QWORD *)(a1 + 576) = *(_QWORD *)v29;
      *(_QWORD *)&v28[8] = 0;
      *(_QWORD *)&v28[16] = 0;
      *(_QWORD *)v29 = 0;
      *(_QWORD *)(a1 + 600) = *(_QWORD *)v30;
      *(_OWORD *)(a1 + 584) = *(_OWORD *)&v29[8];
      *(_QWORD *)&v29[16] = 0;
      *(_QWORD *)v30 = 0;
      *(_QWORD *)&v29[8] = 0;
      v10 = *(_OWORD *)&v30[8];
      *(_QWORD *)(a1 + 624) = *(_QWORD *)v31;
      *(_OWORD *)(a1 + 608) = v10;
      *(_QWORD *)&v30[8] = 0;
      *(_QWORD *)&v30[16] = 0;
      *(_QWORD *)v31 = 0;
      v11 = *(_OWORD *)&v31[8];
      *(_QWORD *)(a1 + 648) = *(_QWORD *)v32;
      *(_OWORD *)(a1 + 632) = v11;
      *(_QWORD *)&v31[8] = 0;
      *(_QWORD *)&v31[16] = 0;
      *(_QWORD *)v32 = 0;
      v12 = *(_OWORD *)&v32[8];
      v13 = *(_OWORD *)&v32[24];
      v14 = v33;
      *(_OWORD *)(a1 + 688) = *(_OWORD *)&v32[40];
      *(int64x2_t *)(a1 + 704) = v14;
      *(_OWORD *)(a1 + 656) = v12;
      *(_OWORD *)(a1 + 672) = v13;
      v15 = v34;
      v16 = v35;
      v17 = v36[1];
      *(_OWORD *)(a1 + 752) = v36[0];
      *(_OWORD *)(a1 + 768) = v17;
      *(_OWORD *)(a1 + 720) = v15;
      *(_OWORD *)(a1 + 736) = v16;
      v18 = v36[2];
      v19 = v36[3];
      v20 = v36[4];
      v21 = *((_QWORD *)&v36[5] + 1);
      *(_QWORD *)(a1 + 832) = *(_QWORD *)&v36[5];
      *(_OWORD *)(a1 + 800) = v19;
      *(_OWORD *)(a1 + 816) = v20;
      *(_OWORD *)(a1 + 784) = v18;
      *(_QWORD *)(a1 + 840) = v21;
      v22 = v36[6];
      v23 = v36[7];
      *((_QWORD *)&v36[5] + 1) = 0;
      *(_QWORD *)&v36[6] = 0;
      *(_OWORD *)(a1 + 848) = v22;
      *(_OWORD *)(a1 + 864) = v23;
      *(_QWORD *)(a1 + 880) = *(_QWORD *)&v36[8];
      memset((char *)&v36[6] + 8, 0, 32);
      *(_BYTE *)(a1 + 888) = 1;
      v8 = (void *)*((_QWORD *)&v36[5] + 1);
      if (!*((_QWORD *)&v36[5] + 1))
        goto LABEL_17;
    }
LABEL_16:
    *(_QWORD *)&v36[6] = v8;
    operator delete(v8);
    goto LABEL_17;
  }
  if (SBYTE7(v36[8]) < 0)
    operator delete(*(void **)&v36[7]);
  v3 = 4294967294;
  v8 = (void *)*((_QWORD *)&v36[5] + 1);
  if (*((_QWORD *)&v36[5] + 1))
    goto LABEL_16;
LABEL_17:
  if ((v32[7] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v31[8]);
    if ((v31[7] & 0x80000000) == 0)
    {
LABEL_19:
      if ((v30[7] & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_27;
    }
  }
  else if ((v31[7] & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(*(void **)&v30[8]);
  if ((v30[7] & 0x80000000) == 0)
  {
LABEL_20:
    if ((v29[7] & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(*(void **)&v29[8]);
  if ((v29[7] & 0x80000000) == 0)
  {
LABEL_21:
    if ((v28[7] & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(*(void **)&v28[8]);
  if ((v28[7] & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_30:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v39)
      return v3;
    goto LABEL_31;
  }
LABEL_29:
  operator delete((void *)v27);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_30;
LABEL_23:
  if (!v39)
    return v3;
LABEL_31:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  return v3;
}

void sub_239A57EAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 56))
  {
    if (*(char *)(v1 - 57) < 0)
      operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A57EF0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_239A57F28(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGCheckDeviceCompatibility(uint64_t a1)
{
  uint64_t result;

  result = sub_239BB15FC(a1 + 8);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return 0;
}

uint64_t CPGSessionCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _DWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD v45[3];
  _QWORD *v46;
  _DWORD *v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _DWORD *v54;
  _QWORD v55[3];
  _QWORD *v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[2];
  _QWORD *v60;
  _QWORD v61[4];

  v61[3] = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v4 = a1 + 8;
    result = sub_239BB15FC(a1 + 8);
    if ((result & 0xFF00000000) != 0)
      return result;
    if (*(char *)(a1 + 31) < 0)
    {
      if (!*(_QWORD *)(a1 + 16))
        return 4294967284;
    }
    else if (!*(_BYTE *)(a1 + 31))
    {
      return 4294967284;
    }
    if (!*(_BYTE *)(a1 + 41) || *(_BYTE *)(a1 + 40))
    {
      v6 = (_QWORD *)operator new();
      v59[0] = 0;
      v59[1] = 0;
      sub_239B71308(v6, v4, (uint64_t)v59);
      v7 = operator new(0x18uLL, MEMORY[0x24BEDB6B8]);
      if (!v7)
      {
        (*(void (**)(_QWORD *))(*v6 + 8))(v6);
        return 0xFFFFFFFFLL;
      }
      v8 = v7;
      v7[4] = 1;
      *(_QWORD *)v7 = &off_250AF2488;
      *((_QWORD *)v7 + 1) = v6;
      v54 = v7;
      v9 = v55;
      v10 = *(_QWORD *)(a1 + 112);
      if (v10)
      {
        if (v10 == a1 + 88)
        {
          v56 = v55;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 24))(v10, v55);
LABEL_18:
          v58 = 0;
          v11 = operator new(0x30uLL);
          v12 = v11;
          v13 = v54;
          v14 = v56;
          *v11 = &off_250AF24A8;
          v11[1] = v13;
          if (v14)
          {
            if (v14 == v55)
            {
              v11[5] = v11 + 2;
              (*(void (**)(_QWORD *))(v55[0] + 24))(v55);
            }
            else
            {
              v11[5] = v14;
              v56 = 0;
            }
          }
          else
          {
            v11[5] = 0;
          }
          v58 = v12;
          if (v56 == v55)
          {
            v15 = 4;
          }
          else
          {
            if (!v56)
            {
              v16 = *((_QWORD *)v8 + 1);
              goto LABEL_32;
            }
            v15 = 5;
            v9 = v56;
          }
          (*(void (**)(_QWORD *))(*v9 + 8 * v15))(v9);
          v12 = v58;
          v16 = *((_QWORD *)v8 + 1);
          if (!v58)
          {
            v17 = 0;
LABEL_33:
            v53 = v17;
LABEL_34:
            if (v17)
            {
              if (v17 == v52)
              {
                v60 = v59;
                (*(void (**)(_QWORD *, _QWORD *))(v52[0] + 24))(v52, v59);
LABEL_39:
                v18 = v16 + 72;
                if ((_QWORD *)(v16 + 72) != v59)
                {
                  v19 = v60;
                  v20 = *(_QWORD *)(v16 + 96);
                  if (v60 == v59)
                  {
                    if (v20 == v18)
                    {
                      (*(void (**)(_QWORD *, _QWORD *))(v59[0] + 24))(v59, v50);
                      (*(void (**)(_QWORD *))(*v60 + 32))(v60);
                      v60 = 0;
                      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v16 + 96) + 24))(*(_QWORD *)(v16 + 96), v59);
                      (*(void (**)(_QWORD))(**(_QWORD **)(v16 + 96) + 32))(*(_QWORD *)(v16 + 96));
                      *(_QWORD *)(v16 + 96) = 0;
                      v60 = v59;
                      (*(void (**)(_QWORD *, uint64_t))(v50[0] + 24))(v50, v16 + 72);
                      (*(void (**)(_QWORD *))(v50[0] + 32))(v50);
                    }
                    else
                    {
                      (*(void (**)(_QWORD *, uint64_t))(v59[0] + 24))(v59, v16 + 72);
                      (*(void (**)(_QWORD *))(*v60 + 32))(v60);
                      v60 = *(_QWORD **)(v16 + 96);
                    }
                    *(_QWORD *)(v16 + 96) = v18;
                  }
                  else if (v20 == v18)
                  {
                    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 24))(v16 + 72, v59);
                    (*(void (**)(_QWORD))(**(_QWORD **)(v16 + 96) + 32))(*(_QWORD *)(v16 + 96));
                    *(_QWORD *)(v16 + 96) = v60;
                    v60 = v59;
                  }
                  else
                  {
                    v60 = *(_QWORD **)(v16 + 96);
                    *(_QWORD *)(v16 + 96) = v19;
                  }
                }
                v21 = v60;
                if (v60 == v59)
                {
                  v22 = 4;
                  v21 = v59;
                }
                else
                {
                  if (!v60)
                    goto LABEL_53;
                  v22 = 5;
                }
                (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_53:
                v23 = v53;
                if (v53 == v52)
                {
                  v24 = 4;
                  v23 = v52;
                }
                else
                {
                  if (!v53)
                    goto LABEL_58;
                  v24 = 5;
                }
                (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_58:
                v47 = v8;
                v25 = v48;
                v26 = *(_QWORD *)(a1 + 144);
                if (v26)
                {
                  if (v26 == a1 + 120)
                  {
                    v49 = v48;
                    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v26 + 24))(v26, v48);
LABEL_63:
                    v51 = 0;
                    v27 = operator new(0x30uLL);
                    v28 = v27;
                    v29 = v47;
                    v30 = v49;
                    *v27 = &off_250AF24F0;
                    v27[1] = v29;
                    if (v30)
                    {
                      if (v30 == v48)
                      {
                        v27[5] = v27 + 2;
                        (*(void (**)(_QWORD *))(v48[0] + 24))(v48);
                      }
                      else
                      {
                        v27[5] = v30;
                        v49 = 0;
                      }
                    }
                    else
                    {
                      v27[5] = 0;
                    }
                    v51 = v28;
                    if (v49 == v48)
                    {
                      v31 = 4;
                    }
                    else
                    {
                      if (!v49)
                      {
                        v32 = *((_QWORD *)v8 + 1);
                        goto LABEL_77;
                      }
                      v31 = 5;
                      v25 = v49;
                    }
                    (*(void (**)(_QWORD *))(*v25 + 8 * v31))(v25);
                    v28 = v51;
                    v32 = *((_QWORD *)v8 + 1);
                    if (!v51)
                    {
                      v33 = 0;
LABEL_78:
                      v46 = v33;
LABEL_79:
                      if (v33)
                      {
                        if (v33 == v45)
                        {
                          v60 = v59;
                          (*(void (**)(_QWORD *, _QWORD *))(v45[0] + 24))(v45, v59);
LABEL_84:
                          v34 = v32 + 104;
                          if ((_QWORD *)(v32 + 104) != v59)
                          {
                            v35 = v60;
                            v36 = *(_QWORD *)(v32 + 128);
                            if (v60 == v59)
                            {
                              if (v36 == v34)
                              {
                                (*(void (**)(_QWORD *, _QWORD *))(v59[0] + 24))(v59, v61);
                                (*(void (**)(_QWORD *))(*v60 + 32))(v60);
                                v60 = 0;
                                (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v32 + 128) + 24))(*(_QWORD *)(v32 + 128), v59);
                                (*(void (**)(_QWORD))(**(_QWORD **)(v32 + 128) + 32))(*(_QWORD *)(v32 + 128));
                                *(_QWORD *)(v32 + 128) = 0;
                                v60 = v59;
                                (*(void (**)(_QWORD *, uint64_t))(v61[0] + 24))(v61, v32 + 104);
                                (*(void (**)(_QWORD *))(v61[0] + 32))(v61);
                              }
                              else
                              {
                                (*(void (**)(_QWORD *, uint64_t))(v59[0] + 24))(v59, v32 + 104);
                                (*(void (**)(_QWORD *))(*v60 + 32))(v60);
                                v60 = *(_QWORD **)(v32 + 128);
                              }
                              *(_QWORD *)(v32 + 128) = v34;
                            }
                            else if (v36 == v34)
                            {
                              (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v34 + 24))(v32 + 104, v59);
                              (*(void (**)(_QWORD))(**(_QWORD **)(v32 + 128) + 32))(*(_QWORD *)(v32 + 128));
                              *(_QWORD *)(v32 + 128) = v60;
                              v60 = v59;
                            }
                            else
                            {
                              v60 = *(_QWORD **)(v32 + 128);
                              *(_QWORD *)(v32 + 128) = v35;
                            }
                          }
                          v37 = v60;
                          if (v60 == v59)
                          {
                            v38 = 4;
                            v37 = v59;
                          }
                          else
                          {
                            if (!v60)
                              goto LABEL_98;
                            v38 = 5;
                          }
                          (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_98:
                          v39 = v46;
                          if (v46 == v45)
                          {
                            v40 = 4;
                            v39 = v45;
                          }
                          else
                          {
                            if (!v46)
                              goto LABEL_103;
                            v40 = 5;
                          }
                          (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_103:
                          *a2 = v8;
                          v41 = v51;
                          if (v51 == v50)
                          {
                            v42 = 4;
                            v41 = v50;
                          }
                          else
                          {
                            if (!v51)
                              goto LABEL_108;
                            v42 = 5;
                          }
                          (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_108:
                          v43 = v58;
                          if (v58 == v57)
                          {
                            v44 = 4;
                            v43 = v57;
                          }
                          else
                          {
                            if (!v58)
                              return 0;
                            v44 = 5;
                          }
                          (*(void (**)(void))(*v43 + 8 * v44))();
                          return 0;
                        }
                        v33 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v33 + 16))(v33);
                      }
                      v60 = v33;
                      goto LABEL_84;
                    }
                    if (v51 == v50)
                    {
                      v46 = v45;
                      (*(void (**)(_QWORD *, _QWORD *))(v50[0] + 24))(v50, v45);
                      v33 = v46;
                      goto LABEL_79;
                    }
LABEL_77:
                    v33 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v28 + 16))(v28);
                    goto LABEL_78;
                  }
                  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
                }
                v49 = (_QWORD *)v26;
                goto LABEL_63;
              }
              v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
            }
            v60 = v17;
            goto LABEL_39;
          }
          if (v58 == v57)
          {
            v53 = v52;
            (*(void (**)(_QWORD *, _QWORD *))(v57[0] + 24))(v57, v52);
            v17 = v53;
            goto LABEL_34;
          }
LABEL_32:
          v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
          goto LABEL_33;
        }
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      }
      v56 = (_QWORD *)v10;
      goto LABEL_18;
    }
  }
  return 4294967294;
}

void sub_239A58B80()
{
  uint64_t v0;

  sub_239A478B4(v0 - 168);
  __cxa_end_catch();
  JUMPOUT(0x239A58844);
}

void sub_239A58BE0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x239A58844);
  JUMPOUT(0x239A58740);
}

void sub_239A58BF0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25693D980);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25693D980))
  {
    sub_2399FF268(&v5);
    sub_23941A4FC(__p, "cv3dapi.pg");
    sub_239A03BC8(&v5, (uint64_t)__p, &qword_25693D978);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_25693D980);
  }
  *a1 = qword_25693D978;
}

void sub_239A58C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25693D980);
  _Unwind_Resume(a1);
}

uint64_t sub_239A58CC0(uint64_t a1)
{
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (!*(_QWORD *)(a1 + 56))
  {
    v3 = operator new();
    sub_2394988CC(v3);
    v4 = (_QWORD *)operator new();
    *v4 = &unk_250AF1978;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v3;
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v3;
    *(_QWORD *)(a1 + 64) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  sub_239458500((_QWORD *)(*(_QWORD *)(a1 + 56) + 16), (uint64_t)"Unhandled exception during CPGSession creation", 46);
  return a1;
}

void sub_239A58D94(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_239A58DB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B3C40EED050F3);
  _Unwind_Resume(a1);
}

uint64_t sub_239A58DD4(uint64_t a1, char *__s)
{
  size_t v4;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  if (!*(_QWORD *)(a1 + 56))
  {
    v6 = operator new();
    sub_2394988CC(v6);
    v7 = (_QWORD *)operator new();
    *v7 = &unk_250AF1978;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v6;
    v8 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v4 = strlen(__s);
  sub_239458500((_QWORD *)(*(_QWORD *)(a1 + 56) + 16), (uint64_t)__s, v4);
  return a1;
}

void sub_239A58EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_239A58ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B3C40EED050F3);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A58EF4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF24F0;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A58F50(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF24F0;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A58FBC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_250AF24F0;
  v2[1] = v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if (v4 == a1 + 16)
    {
      v2[5] = v2 + 2;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  v2[5] = v4;
  return v2;
}

void sub_239A59034(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A59048(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 8);
  *a2 = &off_250AF24F0;
  a2[1] = v3;
  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    if (v4 == result + 16)
    {
      a2[5] = a2 + 2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 40));
      a2[5] = result;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return result;
}

_QWORD *sub_239A590C4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A590F8(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_239A59148(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *a2;
    v6 = v4;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)result + 48))(result, &v6, &v5);
  }
  return result;
}

_QWORD *sub_239A5918C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF24A8;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A591E8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF24A8;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A59254(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_250AF24A8;
  v2[1] = v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if (v4 == a1 + 16)
    {
      v2[5] = v2 + 2;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  v2[5] = v4;
  return v2;
}

void sub_239A592CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A592E0(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 8);
  *a2 = &off_250AF24A8;
  a2[1] = v3;
  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    if (v4 == result + 16)
    {
      a2[5] = a2 + 2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 40));
      a2[5] = result;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return result;
}

_QWORD *sub_239A5935C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A59390(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_239A593E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    v5 = *a3;
    v7 = *(_QWORD *)(a1 + 8);
    v6 = v5;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, int *))(*(_QWORD *)result + 48))(result, &v7, a2, &v6);
  }
  return result;
}

uint64_t CPGSessionCreateWithSnapshotURL(const __CFURL *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v5;
  std::string::size_type v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type v23;
  unint64_t *v24;
  unint64_t v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  void *__dst[2];
  uint64_t v29;
  void *v30[2];
  uint64_t v31;
  char v32;
  std::string v33;
  char v34;
  int v35;
  __int16 v36;
  char v37;
  void *__p[5];
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v3 = 4294967294;
  if (!a1)
    return v3;
  if (!a2)
    return v3;
  sub_2396CA024(a1, (uint64_t)v30);
  if (!v32)
    return v3;
  if (SHIBYTE(v31) < 0)
  {
    sub_23941A7F8(__dst, v30[0], (unint64_t)v30[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v30;
    v29 = v31;
  }
  v26 = 0;
  v27 = 0;
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = 0uLL;
  v5 = sub_239B20B34((uint64_t)__dst, (uint64_t)&v33);
  if (v5)
  {
LABEL_34:
    size = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
    if (!v33.__r_.__value_.__l.__size_)
      goto LABEL_39;
    goto LABEL_35;
  }
  v6 = v33.__r_.__value_.__r.__words[0];
  if (*(_DWORD *)(v33.__r_.__value_.__r.__words[0] + 52) != 1)
  {
    v5 = 3;
    size = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
    if (!v33.__r_.__value_.__l.__size_)
      goto LABEL_39;
    goto LABEL_35;
  }
  if (!*(_BYTE *)(v33.__r_.__value_.__r.__words[0] + 264) || !*(_QWORD *)(v33.__r_.__value_.__r.__words[0] + 248))
  {
LABEL_33:
    v5 = 2;
    goto LABEL_34;
  }
  v7 = *(_DWORD *)(v33.__r_.__value_.__r.__words[0] + 100);
  if (v7 == 1)
  {
    v8 = *(_DWORD *)v33.__r_.__value_.__l.__data_;
    if (*(_DWORD *)v33.__r_.__value_.__l.__data_ >> 3 < 0x271u)
      goto LABEL_70;
    if (!*(_BYTE *)(v33.__r_.__value_.__r.__words[0] + 424)
      || !*(_BYTE *)(v33.__r_.__value_.__r.__words[0] + 472)
      || !*(_BYTE *)(v33.__r_.__value_.__r.__words[0] + 520))
    {
      goto LABEL_33;
    }
  }
  else
  {
    if (v7)
    {
      sub_239A444D4((uint64_t)"unknown file", 79, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v8 = *(_DWORD *)v33.__r_.__value_.__l.__data_;
  }
  v9 = v8 >> 4;
  if (v8 >> 4 >= 0x271
    && (!*(_BYTE *)(v33.__r_.__value_.__r.__words[0] + 552)
     || v8 >> 5 >= 0x271
     && (!*(_BYTE *)(v33.__r_.__value_.__r.__words[0] + 632)
      || !*(_BYTE *)(v33.__r_.__value_.__r.__words[0] + 680)
      || v9 >= 0x753
      && (!*(_BYTE *)(v33.__r_.__value_.__r.__words[0] + 760)
       || !*(_BYTE *)(v33.__r_.__value_.__r.__words[0] + 792)
       || v8 >> 6 >= 0x271
       && (!*(_BYTE *)(v33.__r_.__value_.__r.__words[0] + 984)
        || v9 >= 0xC35 && !*(_BYTE *)(v33.__r_.__value_.__r.__words[0] + 1016))))))
  {
    goto LABEL_33;
  }
LABEL_70:
  v23 = v33.__r_.__value_.__l.__size_;
  if (v33.__r_.__value_.__l.__size_)
  {
    v24 = (unint64_t *)(v33.__r_.__value_.__l.__size_ + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v5 = 0;
  v26 = v6;
  v27 = (std::__shared_weak_count *)v23;
  size = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
  if (v33.__r_.__value_.__l.__size_)
  {
LABEL_35:
    p_shared_owners = (unint64_t *)&size->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_39:
  if ((v5 - 1) < 3)
  {
    v3 = dword_239F0CD98[v5 - 1];
    goto LABEL_58;
  }
  v13 = (_QWORD *)operator new();
  memset(&v33, 0, sizeof(v33));
  v34 = 0;
  v35 = 2;
  v36 = 1;
  v37 = 1;
  sub_239A688A8((int64x2_t **)__p);
  __p[3] = (void *)(int)std::thread::hardware_concurrency();
  v43 = 0uLL;
  v40 = 0;
  v42 = 0;
  v44 = 0x200000001;
  v45 = 65798;
  v46 = 0;
  v47 = 10;
  v34 = *(_BYTE *)(v26 + 80);
  __p[4] = *(void **)(v26 + 84);
  v37 = *(_BYTE *)(v26 + 92);
  v35 = *(_DWORD *)(v26 + 96);
  v43 = *(_OWORD *)(v26 + 100);
  v44 = *(_QWORD *)(v26 + 116);
  v45 = *(_DWORD *)(v26 + 124);
  std::string::operator=(&v33, (const std::string *)(v26 + 56));
  v36 = 257;
  sub_239B71308(v13, (uint64_t)&v33, (uint64_t)&v26);
  v14 = v42;
  if (v42 == v41)
  {
    v15 = 4;
    v14 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_46;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_46:
  v16 = v40;
  if (v40 == v39)
  {
    v17 = 4;
    v16 = v39;
    goto LABEL_50;
  }
  if (v40)
  {
    v17 = 5;
LABEL_50:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v18 = operator new(0x18uLL, MEMORY[0x24BEDB6B8]);
  if (v18)
  {
    v3 = 0;
    v18[4] = 1;
    *(_QWORD *)v18 = &off_250AF2488;
    *((_QWORD *)v18 + 1) = v13;
    *a3 = v18;
  }
  else
  {
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    v3 = 0xFFFFFFFFLL;
  }
LABEL_58:
  v19 = v27;
  if (v27)
  {
    v20 = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((SHIBYTE(v29) & 0x80000000) == 0)
        goto LABEL_64;
      goto LABEL_63;
    }
  }
  if (SHIBYTE(v29) < 0)
LABEL_63:
    operator delete(__dst[0]);
LABEL_64:
  if (v32 && SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  return v3;
}

void sub_239A598A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  if (a34)
  {
    if (a33 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t CPGSessionRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 16);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

void CPGSessionRelease(uint64_t *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if (a1)
  {
    sub_239B71210(a1[1]);
    v2 = (unsigned int *)(a1 + 2);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(uint64_t *))(*a1 + 8))(a1);
  }
}

uint64_t CPGSessionAddSample(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v8 = 0;
  v3 = sub_239BA7F48(v2, (_QWORD *)(a2 + 8), v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_239A59E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t CPGSessionAddSampleWithCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 4294967294;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(a2 + 8);
  v7 = operator new(0x20uLL);
  *v7 = &off_250AF2538;
  v7[1] = a1;
  *((_OWORD *)v7 + 1) = *(_OWORD *)(a3 + 8);
  v13 = v7;
  v8 = sub_239BA7F48(v5, v6, v12);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_7;
  }
  if (v13)
  {
    v10 = 5;
LABEL_7:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return v8;
}

void sub_239A59F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_239A59F7C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A59F90(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250AF2538;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_239A59FD0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF2538;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239A59FF8(uint64_t result, unsigned int **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  char v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  void (**v38)(_QWORD);
  void *__p;
  uint64_t v40;
  char v41;
  char v42;
  _BYTE v43[24];
  _BYTE *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t)*a2;
  if (!*a2)
    return result;
  v3 = result;
  if (!*(_QWORD *)(result + 16))
    return result;
  v5 = operator new(0x40uLL, MEMORY[0x24BEDB6B8]);
  v6 = v5;
  if (v5)
  {
    v7 = *(_DWORD *)(v2 + 124);
    v8 = *(_BYTE *)(v2 + 128);
    v10 = *(_QWORD *)(v2 + 24);
    v9 = *(std::__shared_weak_count **)(v2 + 32);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v5[2] = &off_250AE94F0;
    *((_DWORD *)v5 + 2) = v7;
    *((_BYTE *)v5 + 12) = v8;
    v5[3] = 0;
    v5[4] = 0;
    v5[5] = v10;
    v13 = v5 + 5;
    v5[6] = v9;
    if (v9)
    {
      v14 = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v10 = *v13;
    }
    if (!v10)
      goto LABEL_40;
    v16 = v10;
    if (*(_BYTE *)(v10 + 80))
    {
      v16 = v10;
      if (*(_QWORD *)(v10 + 56))
      {
        v17 = *(_QWORD *)(v10 + 8);
        v18 = *(std::__shared_weak_count **)(v10 + 16);
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
          do
            v21 = __ldaxr(v19);
          while (__stlxr(v21 - 1, v19));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v17 + 88))(v17, 0, "unknown location");
        v16 = *v13;
      }
    }
    v22 = *(void **)(v10 + 56);
    v23 = *(unsigned int *)(v16 + 76);
    v43[0] = 0;
    v45 = 0;
    sub_23979BE48((unsigned int *)(v10 + 64), 0x4C303038u, v22, v23 | 0x100000000, (uint64_t)v43, (uint64_t)&v38);
    if (v45)
    {
      v24 = v44;
      if (v44 == v43)
      {
        v25 = 4;
        v24 = v43;
        goto LABEL_26;
      }
      if (v44)
      {
        v25 = 5;
LABEL_26:
        (*(void (**)(void))(*v24 + 8 * v25))();
      }
    }
    if (!v42)
      goto LABEL_38;
    v27 = __p;
    v26 = v40;
    if (v40)
    {
      v28 = (unint64_t *)(v40 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = (std::__shared_weak_count *)v6[4];
    v6[3] = v27;
    v6[4] = v26;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (v42)
    {
      (*v38)(&v38);
    }
    else
    {
LABEL_38:
      if (v41 < 0)
        operator delete(__p);
    }
LABEL_40:
    if (v9)
    {
      v33 = (unint64_t *)&v9->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    *((_DWORD *)v6 + 14) = 1;
    *v6 = &off_250AF2580;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, _QWORD))(v3 + 16))(*(_QWORD *)(v3 + 8), **a2, v6, *(_QWORD *)(v3 + 24));
  if (v6)
  {
    v35 = (unsigned int *)(v6 + 7);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  }
  return result;
}

void sub_239A5A300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v25;

  if (a2)
  {
    sub_239416DA0(v22);
    sub_23979BCF4(v21);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    MEMORY[0x23B83E310](v19, MEMORY[0x24BEDB6B8]);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x239A5A280);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CPGSessionAddTemporalDepthPointFrame(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t *v3;
  const char *v4;
  const char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t *block;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v18;
  void *v19;
  const char *v20;
  dispatch_queue_t *v21;
  const char *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v3 = *(dispatch_queue_t **)(a1 + 8);
  v4 = (const char *)(a2 + 16);
  sub_239B71020(&v12);
  if (**(int **)(v12 + 56) <= 3 && *(_BYTE *)(v12 + 72))
  {
    block = &v12;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v18 = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v19) = 3;
    v20 = "unknown file";
    LODWORD(v21) = 1732;
    v23 = 0;
    v24 = 0;
    v22 = "unknown function";
    if (*(char *)(a2 + 39) >= 0)
      v5 = v4;
    else
      v5 = *(const char **)(a2 + 16);
    sub_239A002AC((uint64_t)&block, "Adding TDP frame, timestamp=%s", v5);
    sub_239A47720((uint64_t)&block);
    sub_239A47720((uint64_t)&block);
    v6 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  dispatch_assert_queue_not_V2(v3[17]);
  dispatch_assert_queue_not_V2(v3[18]);
  dispatch_assert_queue_not_V2(v3[19]);
  dispatch_assert_queue_not_V2(v3[20]);
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = -1;
  v9 = v3[17];
  block = (uint64_t *)MEMORY[0x24BDAC760];
  rep = 0x40000000;
  v18 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)sub_239BA8518;
  v19 = &unk_250AF7AE8;
  v20 = (const char *)&v12;
  v21 = v3;
  v22 = v4;
  dispatch_sync(v9, &block);
  v10 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v10;
}

void sub_239A5A570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  sub_239A47720((uint64_t)&a14);
  v23 = a22;
  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t CPGSessionLocalizeSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[3];
  _QWORD *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t *block;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v7 = (const char *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = operator new(0x28uLL);
  v9[1] = a1;
  v10 = v9 + 1;
  *v9 = &off_250AF25A0;
  v9[2] = v8;
  v9[3] = a3;
  v9[4] = a4;
  v34 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = &off_250AF25A0;
  v13 = v10[1];
  *(_OWORD *)(v12 + 8) = *v10;
  *(_OWORD *)(v12 + 24) = v13;
  v32 = v12;
  sub_239B71020(&v27);
  if (**(int **)(v27 + 56) <= 3)
  {
    if (*(_BYTE *)(v27 + 72))
    {
      block = &v27;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v37 = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v38) = 3;
      v39 = "unknown file";
      LODWORD(v40) = 1758;
      v42 = 0;
      v43 = 0;
      v41 = "unknown function";
      sub_239A002AC((uint64_t)&block, "Localizing sample, id=%llu", *(_QWORD *)v7);
      sub_239A47720((uint64_t)&block);
      sub_239A47720((uint64_t)&block);
      v14 = v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)(v11 + 24) + 176))
  {
    v20 = 4294967292;
    goto LABEL_21;
  }
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v11 + 136));
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v11 + 144));
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v11 + 152));
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v11 + 160));
  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = -1;
  v17 = *(NSObject **)(v11 + 136);
  block = (uint64_t *)MEMORY[0x24BDAC760];
  rep = 1174405120;
  v37 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)sub_239BA9764;
  v38 = &unk_250AF7B48;
  v39 = (const char *)&v27;
  v40 = v11;
  v41 = v7;
  v18 = &v42;
  v19 = (uint64_t)v32;
  if (!v32)
    goto LABEL_12;
  if (v32 != v31)
  {
    v19 = (*(uint64_t (**)(void))(*v32 + 16))();
LABEL_12:
    v44 = (uint64_t *)v19;
    goto LABEL_15;
  }
  v44 = &v42;
  (*(void (**)(_QWORD *, uint64_t *))(v31[0] + 24))(v31, &v42);
LABEL_15:
  dispatch_sync(v17, &block);
  v20 = *((unsigned int *)v28 + 6);
  if (v44 == &v42)
  {
    v21 = 4;
    goto LABEL_19;
  }
  if (v44)
  {
    v21 = 5;
    v18 = v44;
LABEL_19:
    (*(void (**)(uint64_t *))(*v18 + 8 * v21))(v18);
  }
  _Block_object_dispose(&v27, 8);
LABEL_21:
  v22 = v32;
  if (v32 == v31)
  {
    v23 = 4;
    v22 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_26;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_26:
  v24 = v34;
  if (v34 == v33)
  {
    v25 = 4;
    v24 = v33;
    goto LABEL_30;
  }
  if (v34)
  {
    v25 = 5;
LABEL_30:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
  return v20;
}

void sub_239A5A8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_239A5A988()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A5A99C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250AF25A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_239A5A9DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF25A0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned int *sub_239A5AA04(_QWORD *a1, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v4;
  int8x8_t v5;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *result;
  unsigned int *v16;
  uint64_t (*v17)(_QWORD, _QWORD, unsigned int *, _QWORD);
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  __n128 v22;
  double v23;
  __n128 v24;
  double v25;
  __n128 v26;
  double *v27;
  uint64_t *v28;
  int8x8_t v29;
  unsigned int *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  _QWORD *v41;
  int8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  unsigned int *v56;
  unsigned int *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t (*v72)(_QWORD, _QWORD, unsigned int *, _QWORD);
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  _BYTE v86[24];
  _BYTE v87[32];
  _BYTE v88[24];
  uint64_t v89;
  _BYTE v90[32];
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;

  v2 = *a2;
  if ((*a2)[1] != 1)
  {
    v85 = 258;
    goto LABEL_117;
  }
  v4 = *((_QWORD *)v2 + 13);
  if (!v4)
    goto LABEL_23;
  v5 = *(int8x8_t *)(v4 + 80);
  if (!*(_QWORD *)&v5)
    goto LABEL_23;
  v7 = *v2;
  v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = *v2;
    if (*(_QWORD *)&v5 <= v7)
      v9 = v7 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (v5.i32[0] - 1) & v7;
  }
  v10 = *(uint64_t ***)(*(_QWORD *)(v4 + 72) + 8 * v9);
  if (!v10 || (v11 = *v10) == 0)
  {
LABEL_23:
    result = (unsigned int *)operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
    v16 = result;
    if (result)
    {
      result[2] = 2;
      *((_QWORD *)result + 3) = 0;
      *((_QWORD *)result + 4) = 0;
      *((_QWORD *)result + 2) = 0;
      result[10] = 1;
      *(_QWORD *)result = &off_250AF25E8;
    }
    v17 = (uint64_t (*)(_QWORD, _QWORD, unsigned int *, _QWORD))a1[3];
    if (v17)
      result = (unsigned int *)v17(a1[1], a1[2], result, a1[4]);
    if (v16)
    {
      v18 = v16 + 10;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
    }
    return result;
  }
  if (v8.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == v7)
      {
        if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
          goto LABEL_32;
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_23;
      }
      v11 = (uint64_t *)*v11;
      if (!v11)
        goto LABEL_23;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == v7)
      break;
    if (v13 >= *(_QWORD *)&v5)
      v13 %= *(_QWORD *)&v5;
    if (v13 != v9)
      goto LABEL_23;
LABEL_13:
    v11 = (uint64_t *)*v11;
    if (!v11)
      goto LABEL_23;
  }
  if (*((_DWORD *)v11 + 4) != (_DWORD)v7)
    goto LABEL_13;
LABEL_32:
  v21 = sub_2395D7BEC(v4, v7);
  v27 = sub_239A46464((uint64_t)v21, *((double *)v21 + 25), v22, v23, v24, v25, v26);
  v28 = (uint64_t *)*((_QWORD *)v2 + 13);
  v29 = (int8x8_t)v28[10];
  if (!*(_QWORD *)&v29)
    goto LABEL_114;
  v30 = (unsigned int *)v27;
  v31 = *v2;
  v32 = (uint8x8_t)vcnt_s8(v29);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] > 1uLL)
  {
    v33 = *v2;
    if (*(_QWORD *)&v29 <= v31)
      v33 = v31 % *(_QWORD *)&v29;
  }
  else
  {
    v33 = (v29.i32[0] - 1) & v31;
  }
  v34 = *(uint64_t ***)(v28[9] + 8 * v33);
  if (!v34 || (v35 = *v34) == 0)
  {
LABEL_114:
    v85 = 268;
    goto LABEL_117;
  }
  if (v32.u32[0] < 2uLL)
  {
    v36 = *(_QWORD *)&v29 - 1;
    while (1)
    {
      v38 = v35[1];
      if (v38 == v31)
      {
        if (*((_DWORD *)v35 + 4) == (_DWORD)v31)
          goto LABEL_52;
      }
      else if ((v38 & v36) != v33)
      {
        goto LABEL_114;
      }
      v35 = (uint64_t *)*v35;
      if (!v35)
        goto LABEL_114;
    }
  }
  while (1)
  {
    v37 = v35[1];
    if (v37 == v31)
      break;
    if (v37 >= *(_QWORD *)&v29)
      v37 %= *(_QWORD *)&v29;
    if (v37 != v33)
      goto LABEL_114;
LABEL_42:
    v35 = (uint64_t *)*v35;
    if (!v35)
      goto LABEL_114;
  }
  if (*((_DWORD *)v35 + 4) != (_DWORD)v31)
    goto LABEL_42;
LABEL_52:
  v39 = (unsigned int *)operator new(0x78uLL, MEMORY[0x24BEDB6B8]);
  v40 = v39;
  if (v39)
  {
    sub_239A69878((uint64_t)(v39 + 2), v28, v31);
    v40[28] = 1;
    *(_QWORD *)v40 = &off_250AF2A60;
  }
  v41 = (_QWORD *)*((_QWORD *)*a2 + 9);
  if (!v41)
  {
    v85 = 273;
LABEL_117:
    sub_239A444D4((uint64_t)"unknown file", v85, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v42 = (int8x8_t)v41[1];
  if (!*(_QWORD *)&v42)
    goto LABEL_115;
  v43 = *v2;
  v44 = (uint8x8_t)vcnt_s8(v42);
  v44.i16[0] = vaddlv_u8(v44);
  if (v44.u32[0] > 1uLL)
  {
    v45 = *v2;
    if (*(_QWORD *)&v42 <= v43)
      v45 = v43 % *(_QWORD *)&v42;
  }
  else
  {
    v45 = (v42.i32[0] - 1) & v43;
  }
  v46 = *(uint64_t ***)(*v41 + 8 * v45);
  if (!v46 || (v47 = *v46) == 0)
  {
LABEL_115:
    v85 = 275;
    goto LABEL_117;
  }
  if (v44.u32[0] < 2uLL)
  {
    v48 = *(_QWORD *)&v42 - 1;
    while (1)
    {
      v49 = v47[1];
      if (v49 == v43)
      {
        if (*((_DWORD *)v47 + 4) == (_DWORD)v43)
          goto LABEL_68;
      }
      else if ((v49 & v48) != v45)
      {
        goto LABEL_115;
      }
      v47 = (uint64_t *)*v47;
      if (!v47)
        goto LABEL_115;
    }
  }
  while (1)
  {
    v62 = v47[1];
    if (v62 == v43)
      break;
    if (v62 >= *(_QWORD *)&v42)
      v62 %= *(_QWORD *)&v42;
    if (v62 != v45)
      goto LABEL_115;
LABEL_72:
    v47 = (uint64_t *)*v47;
    if (!v47)
      goto LABEL_115;
  }
  if (*((_DWORD *)v47 + 4) != (_DWORD)v43)
    goto LABEL_72;
LABEL_68:
  if (*((_BYTE *)v47 + 568))
  {
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    *(_QWORD *)&v88[16] = 0;
    *(_OWORD *)&v90[16] = 0u;
    *(_OWORD *)v90 = 0u;
    *(_OWORD *)v88 = 0u;
    *(_OWORD *)v87 = 0u;
    *(_OWORD *)&v86[8] = 0u;
    *(_QWORD *)v86 = 0x3FF0000000000000;
    *(_OWORD *)&v87[16] = 0x3FF0000000000000uLL;
    v89 = 0x3FF0000000000000;
    v91 = 0x3FF0000000000000;
    v50 = *(_OWORD *)(v47 + 55);
    v51 = v47[61];
    v52 = *(_OWORD *)(v47 + 59);
    v53 = v47[65];
    v54 = *(_OWORD *)(v47 + 63);
    *(_QWORD *)&v86[16] = v47[57];
    *(_OWORD *)v86 = v50;
    *(_OWORD *)&v87[8] = v52;
    *(_QWORD *)&v87[24] = v51;
    *(_OWORD *)&v88[8] = v54;
    v89 = v53;
    v55 = *(_OWORD *)(v47 + 67);
    *(_QWORD *)&v90[24] = v47[69];
    *(_OWORD *)&v90[8] = v55;
    sub_23962EC30((uint64_t)v86, &v92);
    v56 = (unsigned int *)operator new(0xA0uLL, MEMORY[0x24BEDB6B8]);
    v57 = v56;
    if (v56)
    {
      v58 = v97;
      *((_OWORD *)v56 + 5) = v96;
      *((_OWORD *)v56 + 6) = v58;
      v59 = v99;
      *((_OWORD *)v56 + 7) = v98;
      *((_OWORD *)v56 + 8) = v59;
      v60 = v93;
      *((_OWORD *)v56 + 1) = v92;
      *((_OWORD *)v56 + 2) = v60;
      v61 = v95;
      *((_OWORD *)v56 + 3) = v94;
      *((_OWORD *)v56 + 4) = v61;
      v56[36] = 1;
      *(_QWORD *)v56 = &off_250AF2BF8;
    }
  }
  else
  {
    v57 = 0;
  }
  result = (unsigned int *)operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
  v63 = result;
  if (result)
  {
    *(_QWORD *)result = &off_250AF2210;
    result[2] = 1;
    *((_QWORD *)result + 2) = v30;
    *((_QWORD *)result + 3) = v40;
    *((_QWORD *)result + 4) = v57;
    if (!v30 || !v40)
    {
      sub_239A444D4((uint64_t)"unknown file", 16, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v64 = v30 + 64;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 + 1, v64));
    v66 = *((_QWORD *)result + 3);
    if (v66)
    {
      v67 = (unsigned int *)(v66 + 112);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 + 1, v67));
    }
    v69 = *((_QWORD *)result + 4);
    if (v69)
    {
      v70 = (unsigned int *)(v69 + 144);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 + 1, v70));
    }
    result[10] = 1;
    *(_QWORD *)result = &off_250AF25E8;
  }
  v72 = (uint64_t (*)(_QWORD, _QWORD, unsigned int *, _QWORD))a1[3];
  if (v72)
    result = (unsigned int *)v72(a1[1], a1[2], result, a1[4]);
  if (v30)
  {
    v73 = v30 + 64;
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
  }
  if (v40)
  {
    v76 = v40 + 28;
    do
    {
      v77 = __ldaxr(v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v76));
    if (!v78)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
  }
  if (v57)
  {
    v79 = v57 + 36;
    do
    {
      v80 = __ldaxr(v79);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v79));
    if (!v81)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v57 + 8))(v57);
  }
  if (v63)
  {
    v82 = v63 + 10;
    do
    {
      v83 = __ldaxr(v82);
      v84 = v83 - 1;
    }
    while (__stlxr(v84, v82));
    if (!v84)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v63 + 8))(v63);
  }
  return result;
}

void sub_239A5B0D0(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x23B83E310](v2, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!*(_QWORD *)(v1 + 24))
    JUMPOUT(0x239A5AF50);
  JUMPOUT(0x239A5AF40);
}

void sub_239A5B104(void *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E310](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x239A5ACCCLL);
}

uint64_t CPGSessionFinalizeInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD block[5];
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 4294967294;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = operator new(0x20uLL);
  *v5 = &off_250AF2608;
  v5[1] = a1;
  *((_OWORD *)v5 + 1) = *(_OWORD *)(a2 + 8);
  v13 = v5;
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v4 + 136));
  v6 = *(NSObject **)(v4 + 136);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = sub_239BAC788;
  block[3] = &unk_250AF7C98;
  block[4] = v4;
  v7 = v15;
  v8 = (uint64_t)v13;
  if (!v13)
    goto LABEL_5;
  if (v13 != v12)
  {
    v8 = (*(uint64_t (**)(void))(*v13 + 16))();
LABEL_5:
    v16 = (_BYTE *)v8;
    goto LABEL_8;
  }
  v16 = v15;
  (*(void (**)(_QWORD *, _BYTE *))(v12[0] + 24))(v12, v15);
LABEL_8:
  dispatch_sync(v6, block);
  if (v16 == v15)
  {
    v10 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_13;
    v10 = 5;
    v7 = v16;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v10))(v7);
LABEL_13:
  result = (uint64_t)v13;
  if (v13 == v12)
  {
    v11 = 4;
    result = (uint64_t)v12;
  }
  else
  {
    if (!v13)
      return result;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)result + 8 * v11))();
  return 0;
}

void sub_239A5B2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v13;
  uint64_t v14;

  v13 = a12;
  if (a12 == &a9)
  {
    v14 = 4;
    v13 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_239A5B2F0()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A5B304(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250AF2608;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_239A5B344(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF2608;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239A5B36C(uint64_t result, uint64_t *a2)
{
  uint64_t (*v2)(_QWORD, unsigned int *, _QWORD);
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(uint64_t (**)(_QWORD, unsigned int *, _QWORD))(result + 16);
  if (v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = (unsigned int *)operator new(0x18uLL, MEMORY[0x24BEDB6B8]);
    v6 = v5;
    if (v5)
    {
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      v5[4] = 1;
      *(_QWORD *)v5 = &off_250AF2650;
    }
    v5[2] = v4;
    *((_BYTE *)v5 + 12) = BYTE4(v4);
    result = v2(*(_QWORD *)(v3 + 8), v5, *(_QWORD *)(v3 + 24));
    v7 = v6 + 4;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

uint64_t CPGSessionProcessRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int **v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  v12 = (unsigned int *)operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
  v13 = v12;
  if (v12)
  {
    *((_QWORD *)v12 + 4) = 0;
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    v12[8] = 1;
    *(_QWORD *)v12 = &off_250AF2398;
  }
  CPGRequestListAdd(v12, a2);
  v14 = CPGSessionProcessRequests(a1, (uint64_t)v13, a3, a4, a5, a6);
  v15 = (unsigned int **)*((_QWORD *)v13 + 1);
  v16 = (unsigned int **)*((_QWORD *)v13 + 2);
  if (v15 == v16)
    goto LABEL_12;
  do
  {
    v17 = *v15;
    if (*v15)
    {
      v18 = v17 + 39;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
    ++v15;
  }
  while (v15 != v16);
  if (v13)
  {
LABEL_12:
    v21 = v13 + 8;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
  }
  return v14;
}

uint64_t CPGSessionProcessRequests(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const void **v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  void *v29;
  char *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  char *v43;
  unsigned int *v44;
  unsigned int v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  _BYTE *v77;
  char *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  void *__p;
  uint64_t v113;
  std::__shared_weak_count *v114;
  void *v115[2];
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  unint64_t v123;
  __int128 __dst;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  void *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  int v132;
  char v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  char v137;
  char v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unint64_t *v143;
  _QWORD v144[3];
  _QWORD *v145;
  _BYTE v146[24];
  _BYTE *v147;
  _BYTE v148[24];
  _BYTE *v149;
  _BYTE v150[24];
  _BYTE *v151;
  _BYTE v152[24];
  _BYTE *v153;
  _QWORD v154[3];
  _QWORD *v155;
  _QWORD v156[3];
  _QWORD *v157;
  _QWORD v158[3];
  _QWORD *v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 4294967294;
  v8 = *(_BYTE **)(a2 + 8);
  v7 = *(_BYTE **)(a2 + 16);
  if (v8 == v7)
    return 4294967294;
  v9 = v7 - v8;
  if (v7 - v8 < 0)
    sub_2394189F8();
  v14 = (char *)operator new(v7 - v8);
  v15 = &v14[8 * (v9 >> 3)];
  memcpy(v14, v8, v9);
  __p = v14;
  do
  {
    v17 = *(_QWORD *)v14;
    if (*(_BYTE *)(*(_QWORD *)v14 + 144))
    {
      v18 = *(_QWORD *)(a1 + 8);
      v19 = *(unsigned __int8 *)(v17 + 143);
      v20 = *(_QWORD *)(v17 + 128);
      if ((v19 & 0x80u) == 0)
        v21 = *(unsigned __int8 *)(v17 + 143);
      else
        v21 = *(_QWORD *)(v17 + 128);
      v22 = *(unsigned __int8 *)(v18 + 247);
      v23 = (char)v22;
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(v18 + 232);
      if (v21 != v22)
        goto LABEL_23;
      v24 = (const void **)(v17 + 120);
      v27 = *(unsigned __int8 **)(v18 + 224);
      v25 = (unsigned __int8 *)(v18 + 224);
      v26 = v27;
      if (v23 >= 0)
        v28 = v25;
      else
        v28 = v26;
      if ((v19 & 0x80) != 0)
      {
        if (memcmp(*v24, v28, v20))
          goto LABEL_23;
      }
      else if ((_DWORD)v19)
      {
        while (*(unsigned __int8 *)v24 == *v28)
        {
          v24 = (const void **)((char *)v24 + 1);
          ++v28;
          if (!--v19)
            goto LABEL_7;
        }
LABEL_23:
        v16 = 4294967269;
        v29 = __p;
        goto LABEL_24;
      }
    }
LABEL_7:
    v14 += 8;
  }
  while (v14 != v15);
  v31 = (char *)__p;
  v32 = v9 >> 3;
  do
  {
    if (*(_QWORD *)v31)
    {
      v33 = (unsigned int *)(*(_QWORD *)v31 + 156);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 + 1, v33));
    }
    v31 += 8;
  }
  while (v31 != v15);
  v35 = (char *)operator new(v9);
  memcpy(v35, __p, v9);
  v36 = operator new(0x38uLL);
  *v36 = &off_250AF2670;
  v36[1] = a1;
  v37 = &v35[8 * v32];
  v36[2] = v35;
  v36[3] = v37;
  v36[4] = v37;
  v36[5] = a5;
  v36[6] = a6;
  v159 = v36;
  *(_QWORD *)&v117 = a1;
  v38 = (char *)operator new(v9);
  v39 = &v38[8 * v32];
  *((_QWORD *)&v117 + 1) = v38;
  *((_QWORD *)&v118 + 1) = v39;
  memcpy(v38, __p, v9);
  *(_QWORD *)&v118 = v39;
  v40 = *(_QWORD *)(a1 + 8);
  if (*(char *)(v40 + 247) < 0)
  {
    sub_23941A7F8(&v119, *(void **)(v40 + 224), *(_QWORD *)(v40 + 232));
  }
  else
  {
    v119 = *(_OWORD *)(v40 + 224);
    v120 = *(_QWORD *)(v40 + 240);
  }
  *(_QWORD *)&v121 = a3;
  *((_QWORD *)&v121 + 1) = a4;
  v157 = 0;
  v41 = (char *)operator new(0x50uLL);
  v42 = v118;
  *(_OWORD *)(v41 + 8) = v117;
  *(_QWORD *)v41 = off_250AF26B8;
  *(_OWORD *)(v41 + 24) = v42;
  v118 = 0uLL;
  *((_QWORD *)&v117 + 1) = 0;
  *(_OWORD *)(v41 + 40) = v119;
  *((_QWORD *)v41 + 7) = v120;
  v119 = 0uLL;
  v120 = 0;
  *((_OWORD *)v41 + 4) = v121;
  v43 = (char *)__p;
  v157 = v41;
  do
  {
    if (*(_QWORD *)v43)
    {
      v44 = (unsigned int *)(*(_QWORD *)v43 + 156);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 + 1, v44));
    }
    v43 += 8;
  }
  while (v43 != v15);
  v46 = (char *)operator new(v9);
  memcpy(v46, __p, v9);
  v155 = 0;
  v47 = operator new(0x20uLL);
  v48 = &v46[8 * v32];
  *v47 = &off_250AF2760;
  v47[1] = v46;
  v47[2] = v48;
  v47[3] = v48;
  v155 = v47;
  v49 = *(_QWORD *)(a2 + 8);
  v50 = *(_QWORD *)(a2 + 16);
  v123 = 0;
  v122 = 0uLL;
  v51 = v50 - v49;
  if (v50 != v49)
  {
    if ((unint64_t)v51 >= 0xD79435E50D79431)
      sub_2394189F8();
    v52 = v51 >> 3;
    *(_QWORD *)&v127 = &v123;
    *(_QWORD *)&__dst = operator new(152 * (v51 >> 3));
    *((_QWORD *)&__dst + 1) = __dst;
    v125 = __dst;
    v126 = __dst + 152 * v52;
    sub_239A5C604((uint64_t *)&v122, &__dst);
    v53 = *((_QWORD *)&__dst + 1);
    while (v125 != v53)
    {
      v125 -= 152;
      sub_239A5C550(v125);
    }
    if ((_QWORD)__dst)
      operator delete((void *)__dst);
    v49 = *(_QWORD *)(a2 + 8);
    v50 = *(_QWORD *)(a2 + 16);
  }
  for (; v49 != v50; v49 += 8)
  {
    sub_239A5C364(&__dst, (__int128 *)(*(_QWORD *)v49 + 8));
    v54 = *((_QWORD *)&v122 + 1);
    if (*((_QWORD *)&v122 + 1) >= v123)
    {
      v61 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((_QWORD *)&v122 + 1) - v122) >> 3);
      v62 = v61 + 1;
      if (v61 + 1 > 0x1AF286BCA1AF286)
        sub_2394189F8();
      if (0xD79435E50D79436 * ((uint64_t)(v123 - v122) >> 3) > v62)
        v62 = 0xD79435E50D79436 * ((uint64_t)(v123 - v122) >> 3);
      if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v123 - v122) >> 3) >= 0xD79435E50D7943)
        v63 = 0x1AF286BCA1AF286;
      else
        v63 = v62;
      v143 = &v123;
      if (v63)
      {
        if (v63 > 0x1AF286BCA1AF286)
          sub_239418A80();
        v64 = (char *)operator new(152 * v63);
      }
      else
      {
        v64 = 0;
      }
      v65 = (uint64_t)&v64[152 * v61];
      v139 = v64;
      v140 = v65;
      v141 = v65;
      v142 = &v64[152 * v63];
      *(_OWORD *)v65 = __dst;
      *(_QWORD *)(v65 + 16) = v125;
      __dst = 0uLL;
      v125 = 0;
      *(_DWORD *)(v65 + 24) = v126;
      *(_BYTE *)(v65 + 32) = 0;
      *(_BYTE *)(v65 + 88) = 0;
      if (v133)
      {
        *(_OWORD *)(v65 + 32) = v127;
        v66 = &v64[152 * v61];
        v67 = v128;
        v68 = v129;
        v69 = v130;
        v70 = v131;
        *((_QWORD *)v66 + 8) = v130;
        v71 = v66 + 64;
        v128 = 0;
        v129 = 0;
        *((_QWORD *)v71 - 2) = v67;
        *((_QWORD *)v71 - 1) = v68;
        *((_QWORD *)v71 + 1) = v70;
        *((_DWORD *)v71 + 4) = v132;
        if (v70)
        {
          v72 = v69[1];
          if ((v68 & (v68 - 1)) != 0)
          {
            if (v72 >= v68)
              v72 %= v68;
          }
          else
          {
            v72 &= v68 - 1;
          }
          v67[v72] = v71;
          v130 = 0;
          v131 = 0;
        }
        *(_BYTE *)(v65 + 88) = 1;
      }
      v75 = &v64[152 * v61];
      v75[96] = 0;
      v76 = v75 + 96;
      v76[40] = 0;
      v77 = v76 + 40;
      if (v137)
      {
        *(_OWORD *)v76 = v134;
        v134 = 0uLL;
        v78 = &v64[152 * v61];
        *((_OWORD *)v78 + 7) = v135;
        *((_QWORD *)v78 + 16) = v136;
        v135 = 0uLL;
        v136 = 0;
        *v77 = 1;
      }
      v64[152 * v61 + 144] = v138;
      v141 = v65 + 152;
      sub_239A5C604((uint64_t *)&v122, &v139);
      v74 = *((_QWORD *)&v122 + 1);
      v79 = v140;
      while (v141 != v79)
      {
        v141 -= 152;
        sub_239A5C550(v141);
      }
      if (v139)
        operator delete(v139);
    }
    else
    {
      v55 = __dst;
      *(_QWORD *)(*((_QWORD *)&v122 + 1) + 16) = v125;
      *(_OWORD *)v54 = v55;
      v125 = 0;
      __dst = 0uLL;
      *(_DWORD *)(v54 + 24) = v126;
      *(_BYTE *)(v54 + 32) = 0;
      *(_BYTE *)(v54 + 88) = 0;
      if (v133)
      {
        *(_OWORD *)(v54 + 32) = v127;
        v56 = v128;
        v128 = 0;
        *(_QWORD *)(v54 + 48) = v56;
        *(_QWORD *)(v54 + 56) = v129;
        v129 = 0;
        v57 = v130;
        *(_QWORD *)(v54 + 64) = v130;
        v58 = v131;
        *(_QWORD *)(v54 + 72) = v131;
        *(_DWORD *)(v54 + 80) = v132;
        if (v58)
        {
          v59 = v57[1];
          v60 = *(_QWORD *)(v54 + 56);
          if ((v60 & (v60 - 1)) != 0)
          {
            if (v59 >= v60)
              v59 %= v60;
          }
          else
          {
            v59 &= v60 - 1;
          }
          v56[v59] = v54 + 64;
          v130 = 0;
          v131 = 0;
        }
        *(_BYTE *)(v54 + 88) = 1;
      }
      *(_BYTE *)(v54 + 96) = 0;
      *(_BYTE *)(v54 + 136) = 0;
      if (v137)
      {
        *(_OWORD *)(v54 + 96) = v134;
        v134 = 0uLL;
        v73 = v136;
        *(_OWORD *)(v54 + 112) = v135;
        *(_QWORD *)(v54 + 128) = v73;
        v136 = 0;
        v135 = 0uLL;
        *(_BYTE *)(v54 + 136) = 1;
      }
      *(_BYTE *)(v54 + 144) = v138;
      v74 = v54 + 152;
    }
    *((_QWORD *)&v122 + 1) = v74;
    if (v137)
    {
      if (SHIBYTE(v136) < 0)
        operator delete((void *)v135);
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
      if (*((_QWORD *)&v134 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
    }
    if (v133)
    {
      v83 = v130;
      if (v130)
      {
        do
        {
          v84 = (_QWORD *)*v83;
          operator delete(v83);
          v83 = v84;
        }
        while (v84);
      }
      v85 = v128;
      v128 = 0;
      if (v85)
        operator delete(v85);
    }
    if (SHIBYTE(v125) < 0)
      operator delete((void *)__dst);
  }
  *(_OWORD *)v115 = v122;
  v116 = v123;
  v86 = *(_QWORD *)(a1 + 8);
  v87 = (uint64_t)v159;
  if (!v159)
  {
    v29 = __p;
    goto LABEL_108;
  }
  if (v159 != v158)
  {
    v29 = __p;
    v87 = (*(uint64_t (**)(void))(*v159 + 16))();
LABEL_108:
    v145 = (_QWORD *)v87;
    goto LABEL_110;
  }
  v145 = v144;
  v29 = __p;
  (*(void (**)(_QWORD *, _QWORD *))(v158[0] + 24))(v158, v144);
LABEL_110:
  v88 = v146;
  v147 = 0;
  v89 = v148;
  v90 = (uint64_t)v157;
  if (!v157)
  {
LABEL_113:
    v149 = (_BYTE *)v90;
    goto LABEL_115;
  }
  if (v157 != v156)
  {
    v90 = (*(uint64_t (**)(void))(*v157 + 16))();
    goto LABEL_113;
  }
  v149 = v148;
  (*(void (**)(_QWORD *, _BYTE *))(v156[0] + 24))(v156, v148);
LABEL_115:
  v91 = v150;
  v151 = 0;
  v92 = v152;
  v93 = (uint64_t)v155;
  if (v155)
  {
    if (v155 == v154)
    {
      v153 = v152;
      (*(void (**)(_QWORD *, _BYTE *))(v154[0] + 24))(v154, v152);
      goto LABEL_120;
    }
    v93 = (*(uint64_t (**)(void))(*v155 + 16))();
  }
  v153 = (_BYTE *)v93;
LABEL_120:
  sub_239BAD424(&v113, v86, (uint64_t *)v115, v144);
  v94 = v114;
  if (v114)
  {
    p_shared_owners = (unint64_t *)&v114->__shared_owners_;
    do
      v96 = __ldaxr(p_shared_owners);
    while (__stlxr(v96 - 1, p_shared_owners));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v153 == v152)
  {
    v97 = 4;
  }
  else
  {
    if (!v153)
      goto LABEL_130;
    v97 = 5;
    v92 = v153;
  }
  (*(void (**)(_QWORD *))(*v92 + 8 * v97))(v92);
LABEL_130:
  if (v151 == v150)
  {
    v98 = 4;
  }
  else
  {
    if (!v151)
      goto LABEL_135;
    v98 = 5;
    v91 = v151;
  }
  (*(void (**)(_QWORD *))(*v91 + 8 * v98))(v91);
LABEL_135:
  if (v149 == v148)
  {
    v99 = 4;
  }
  else
  {
    if (!v149)
      goto LABEL_140;
    v99 = 5;
    v89 = v149;
  }
  (*(void (**)(_QWORD *))(*v89 + 8 * v99))(v89);
LABEL_140:
  if (v147 == v146)
  {
    v100 = 4;
  }
  else
  {
    if (!v147)
      goto LABEL_145;
    v100 = 5;
    v88 = v147;
  }
  (*(void (**)(_QWORD *))(*v88 + 8 * v100))(v88);
LABEL_145:
  v101 = v145;
  if (v145 == v144)
  {
    v102 = 4;
    v101 = v144;
  }
  else
  {
    if (!v145)
      goto LABEL_150;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_150:
  v103 = (char *)v115[0];
  if (v115[0])
  {
    v104 = (char *)v115[1];
    if (v115[1] != v115[0])
    {
      do
      {
        v104 -= 152;
        sub_239A5C550((uint64_t)v104);
      }
      while (v104 != v103);
      v103 = (char *)v115[0];
    }
    operator delete(v103);
  }
  v105 = v155;
  if (v155 == v154)
  {
    v106 = 4;
    v105 = v154;
  }
  else
  {
    if (!v155)
      goto LABEL_160;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_160:
  v107 = v157;
  if (v157 == v156)
  {
    v108 = 4;
    v107 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_165;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_165:
  v109 = v159;
  if (v159 == v158)
  {
    v110 = 4;
    v109 = v158;
  }
  else
  {
    if (!v159)
      goto LABEL_170;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_170:
  v16 = 0;
LABEL_24:
  operator delete(v29);
  return v16;
}

void sub_239A5C01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p)
{
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;

  if (__p)
    operator delete(__p);
  v22 = *(_QWORD **)(v20 - 112);
  if (v22 == (_QWORD *)(v20 - 136))
  {
    v23 = 4;
    v22 = (_QWORD *)(v20 - 136);
  }
  else
  {
    if (!v22)
      goto LABEL_8;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_8:
  operator delete(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_239A5C2B8(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void **sub_239A5C304(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 152;
        sub_239A5C550(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_239A5C364(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_DWORD *)a2 + 6);
  *((_BYTE *)__dst + 32) = 0;
  *((_DWORD *)__dst + 6) = v5;
  *((_BYTE *)__dst + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    *((_OWORD *)__dst + 2) = a2[2];
    sub_239A538BC((uint64_t)(__dst + 6), (uint64_t)(a2 + 3));
    *((_BYTE *)__dst + 88) = 1;
  }
  *((_BYTE *)__dst + 96) = 0;
  *((_BYTE *)__dst + 136) = 0;
  if (*((_BYTE *)a2 + 136))
  {
    v6 = *((_QWORD *)a2 + 13);
    __dst[12] = *((_QWORD *)a2 + 12);
    __dst[13] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if (*((char *)a2 + 135) < 0)
    {
      sub_23941A7F8((_BYTE *)__dst + 112, *((void **)a2 + 14), *((_QWORD *)a2 + 15));
    }
    else
    {
      v9 = a2[7];
      __dst[16] = *((_QWORD *)a2 + 16);
      *((_OWORD *)__dst + 7) = v9;
    }
    *((_BYTE *)__dst + 136) = 1;
  }
  *((_BYTE *)__dst + 144) = *((_BYTE *)a2 + 144);
  return __dst;
}

void sub_239A5C46C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v5 = *(std::__shared_weak_count **)(v1 + 104);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (*(_BYTE *)(v1 + 136))
  {
    if (*(char *)(v1 + 135) < 0)
      operator delete(*v3);
    v8 = *(std::__shared_weak_count **)(v1 + 104);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  sub_239A5C77C(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void sub_239A5C550(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 136))
  {
    if (*(char *)(a1 + 135) < 0)
      operator delete(*(void **)(a1 + 112));
    v2 = *(std::__shared_weak_count **)(a1 + 104);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *(_QWORD **)(a1 + 64);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    v7 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v7)
      operator delete(v7);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *sub_239A5C604(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 152);
      *(_QWORD *)(v6 - 136) = *(_QWORD *)(v2 + v5 - 136);
      *(_OWORD *)(v6 - 152) = v8;
      *(_QWORD *)(v7 - 144) = 0;
      *(_QWORD *)(v7 - 136) = 0;
      *(_QWORD *)(v7 - 152) = 0;
      *(_DWORD *)(v6 - 128) = *(_DWORD *)(v2 + v5 - 128);
      *(_BYTE *)(v4 + v5 - 120) = 0;
      *(_BYTE *)(v6 - 64) = 0;
      if (*(_BYTE *)(v2 + v5 - 64))
      {
        *(_OWORD *)(v4 + v5 - 120) = *(_OWORD *)(v7 - 120);
        v9 = *(_QWORD *)(v7 - 104);
        *(_QWORD *)(v7 - 104) = 0;
        *(_QWORD *)(v6 - 104) = v9;
        *(_QWORD *)(v6 - 96) = *(_QWORD *)(v7 - 96);
        *(_QWORD *)(v7 - 96) = 0;
        v10 = *(_QWORD *)(v7 - 88);
        *(_QWORD *)(v6 - 88) = v10;
        v11 = *(_QWORD *)(v7 - 80);
        *(_QWORD *)(v6 - 80) = v11;
        *(_DWORD *)(v6 - 72) = *(_DWORD *)(v7 - 72);
        if (v11)
        {
          v12 = *(_QWORD *)(v10 + 8);
          v13 = *(_QWORD *)(v6 - 96);
          if ((v13 & (v13 - 1)) != 0)
          {
            if (v12 >= v13)
              v12 %= v13;
          }
          else
          {
            v12 &= v13 - 1;
          }
          *(_QWORD *)(v9 + 8 * v12) = v6 - 88;
          *(_QWORD *)(v7 - 88) = 0;
          *(_QWORD *)(v7 - 80) = 0;
        }
        *(_BYTE *)(v6 - 64) = 1;
      }
      *(_BYTE *)(v6 - 56) = 0;
      *(_BYTE *)(v6 - 16) = 0;
      if (*(_BYTE *)(v7 - 16))
      {
        v14 = v2 + v5;
        *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
        *(_QWORD *)(v14 - 56) = 0;
        *(_QWORD *)(v14 - 48) = 0;
        v15 = v4 + v5;
        v16 = *(_OWORD *)(v2 + v5 - 40);
        *(_QWORD *)(v15 - 24) = *(_QWORD *)(v2 + v5 - 24);
        *(_OWORD *)(v15 - 40) = v16;
        *(_QWORD *)(v14 - 32) = 0;
        *(_QWORD *)(v14 - 24) = 0;
        *(_QWORD *)(v14 - 40) = 0;
        *(_BYTE *)(v6 - 16) = 1;
      }
      *(_BYTE *)(v4 + v5 - 8) = *(_BYTE *)(v2 + v5 - 8);
      v5 -= 152;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v17 = *result;
  *result = v4;
  a2[1] = v17;
  v18 = result[1];
  result[1] = a2[2];
  a2[2] = v18;
  v19 = result[2];
  result[2] = a2[3];
  a2[3] = v19;
  *a2 = a2[1];
  return result;
}

uint64_t sub_239A5C77C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
      operator delete(v4);
  }
  return a1;
}

_QWORD *sub_239A5C7CC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250AF2760;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_239A5C808(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250AF2760;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A5C854(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x20uLL);
  *v2 = &off_250AF2760;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      sub_2394189F8();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_239A5C8D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A5C8EC(_QWORD *result, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v6;
  char *v7;

  a2[1] = 0;
  *a2 = &off_250AF2760;
  a2[2] = 0;
  a2[3] = 0;
  v3 = (_BYTE *)result[1];
  v2 = (_BYTE *)result[2];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      sub_2394189F8();
    v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    v7 = &v6[8 * (v4 >> 3)];
    a2[3] = v7;
    result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_239A5C968(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_239A5C984(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void sub_239A5C99C(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t sub_239A5C9CC(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *a2);
  if (result)
  {
    v3 = (unsigned int *)(result + 156);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_239A5CA04(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_250AF26B8;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v2 = *(void **)(a1 + 16);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_239A5CA5C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_250AF26B8;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v2 = *(void **)(a1 + 16);
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v2 = *(void **)(a1 + 16);
    if (!v2)
      goto LABEL_6;
  }
  *(_QWORD *)(a1 + 24) = v2;
  operator delete(v2);
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A5CAC4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 8);
  v2 = operator new(0x50uLL);
  *v2 = off_250AF26B8;
  sub_239A637A0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_239A5CB04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A5CB18(uint64_t a1, _QWORD *a2)
{
  *a2 = off_250AF26B8;
  return sub_239A637A0((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

void sub_239A5CB34(uint64_t a1)
{
  void *v2;

  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 16);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 40));
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_239A5CB80(void **__p)
{
  void *v2;

  if (*((char *)__p + 63) < 0)
  {
    operator delete(__p[5]);
    v2 = __p[2];
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = __p[2];
  if (v2)
  {
LABEL_3:
    __p[3] = v2;
    operator delete(v2);
  }
LABEL_4:
  operator delete(__p);
}

void sub_239A5CBCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_info;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  unsigned int *v100;
  unsigned int *v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  void *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  CFStringRef __dst[48];
  void *v148;
  void *v149;
  uint64_t v150;
  void *__p;
  void *v152;
  void *v153;
  char v154;
  void *v155;
  char v156;
  char v157;
  _BYTE v158[40];
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  char v170;
  void *v171;
  void *v172;
  char v173;
  _BYTE v174[160];
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  char v180;
  char v181;
  _OWORD v182[54];
  char v183;
  _BYTE v184[72];
  void *v185;
  void *v186;
  char v187;
  _QWORD v188[73];
  char v189;
  _BYTE v190[712];
  char v191;
  _BYTE v192[40];
  _QWORD *v193[8];
  void *v194;
  void *v195;
  char v196;
  _BYTE v197[24];
  void *v198;
  void *v199;
  void *v200;
  char v201;
  void *v202;
  char v203;
  void *v204;
  char v205;
  void *v206;
  char v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  char v213;
  __int128 v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  void *v225;
  std::__shared_weak_count *v226;
  char v227;
  char v228;
  char v229;
  uint64_t v230;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v230 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(v1 + 64))
    return;
  v4 = v2;
  v5 = v1;
  v6 = *v3;
  v7 = *(unsigned int **)(v2 + 256);
  if (v7)
  {
    v8 = operator new();
    sub_239A4D360(v8, (uint64_t)v7);
    __dst[0] = (CFStringRef)v8;
    sub_239A4D588(&v225, __dst, v5 + 40);
    v7 = (unsigned int *)v225;
    if (__dst[0])
    {
      v9 = sub_239A4D648((uint64_t)__dst[0]);
      MEMORY[0x23B83E31C](v9, 0x10B2C40362D6DEFLL);
    }
  }
  v224 = 0uLL;
  if (*(_BYTE *)(v4 + 24))
  {
    sub_2396CA1A0(v4, (uint64_t)&v225);
    if (!v227)
    {
      sub_239A444D4((uint64_t)"unknown file", 434, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_2396B3B88(__dst, (uint64_t)&v225);
    v10 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
    v224 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      p_info = (unint64_t *)&__dst[1]->info;
      do
        v16 = __ldaxr(p_info);
      while (__stlxr(v16 - 1, p_info));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v227)
    {
      v17 = v226;
      if (v226)
      {
        v18 = (unint64_t *)&v226->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  v223 = 0uLL;
  if (*(_BYTE *)(v4 + 120) && *(_QWORD *)(v4 + 96) != *(_QWORD *)(v4 + 104))
  {
    sub_2396CA2E0((uint64_t *)(v4 + 96), (uint64_t)&v225);
    if (!v227)
    {
      sub_239A444D4((uint64_t)"unknown file", 443, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_239670E88(__dst, (uint64_t)&v225);
    v20 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
    v223 = v20;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v25 = (unint64_t *)&__dst[1]->info;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v227)
    {
      v27 = v226;
      if (v226)
      {
        v28 = (unint64_t *)&v226->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  v222 = 0uLL;
  if (*(_BYTE *)(v4 + 152))
  {
    sub_2396CA1A0(v4 + 128, (uint64_t)&v225);
    if (!v227)
    {
      sub_239A444D4((uint64_t)"unknown file", 451, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_2396B3B88(__dst, (uint64_t)&v225);
    v30 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
    v222 = v30;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v35 = (unint64_t *)&__dst[1]->info;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v227)
    {
      v37 = v226;
      if (v226)
      {
        v38 = (unint64_t *)&v226->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
  }
  v221 = 0uLL;
  if (*(_BYTE *)(v4 + 88) && *(_QWORD *)(v4 + 64) != *(_QWORD *)(v4 + 72))
  {
    sub_2396CA2E0((uint64_t *)(v4 + 64), (uint64_t)&v225);
    if (!v227)
    {
      sub_239A444D4((uint64_t)"unknown file", 460, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_239670E88(__dst, (uint64_t)&v225);
    v40 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
    v221 = v40;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v45 = (unint64_t *)&__dst[1]->info;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v227)
    {
      v47 = v226;
      if (v226)
      {
        v48 = (unint64_t *)&v226->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
  }
  v220 = 0uLL;
  if (*(_BYTE *)(v4 + 216) && *(_QWORD *)(v4 + 192) != *(_QWORD *)(v4 + 200))
  {
    sub_2396CA2E0((uint64_t *)(v4 + 192), (uint64_t)&v225);
    if (!v227)
    {
      sub_239A444D4((uint64_t)"unknown file", 470, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_239670E88(__dst, (uint64_t)&v225);
    v50 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
    v220 = v50;
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v55 = (unint64_t *)&__dst[1]->info;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (v227)
    {
      v57 = v226;
      if (v226)
      {
        v58 = (unint64_t *)&v226->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
    }
  }
  v219 = 0uLL;
  if (*(_BYTE *)(v4 + 248))
  {
    sub_2396CA1A0(v4 + 224, (uint64_t)&v225);
    if (!v227)
    {
      sub_239A444D4((uint64_t)"unknown file", 478, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_2396B3B88(__dst, (uint64_t)&v225);
    v60 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v61 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
    v219 = v60;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v65 = (unint64_t *)&__dst[1]->info;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (v227)
    {
      v67 = v226;
      if (v226)
      {
        v68 = (unint64_t *)&v226->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
    }
  }
  v218 = 0uLL;
  if (*(_BYTE *)(v4 + 184) && *(_QWORD *)(v4 + 160) != *(_QWORD *)(v4 + 168))
  {
    sub_2396CA2E0((uint64_t *)(v4 + 160), (uint64_t)&v225);
    if (!v227)
    {
      sub_239A444D4((uint64_t)"unknown file", 488, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_239670E88(__dst, (uint64_t)&v225);
    v70 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v71 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
    v218 = v70;
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v75 = (unint64_t *)&__dst[1]->info;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    if (v227)
    {
      v77 = v226;
      if (v226)
      {
        v78 = (unint64_t *)&v226->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
    }
  }
  v217 = 0uLL;
  if (*(_BYTE *)(v4 + 56))
  {
    sub_2396CA1A0(v4 + 32, (uint64_t)&v225);
    if (!v227)
    {
      sub_239A444D4((uint64_t)"unknown file", 496, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_2396B3B88(__dst, (uint64_t)&v225);
    v80 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v81 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
    v217 = v80;
    if (v81)
    {
      v82 = (unint64_t *)&v81->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v84 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v85 = (unint64_t *)&__dst[1]->info;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    if (v227)
    {
      v87 = v226;
      if (v226)
      {
        v88 = (unint64_t *)&v226->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
    }
  }
  v197[0] = 0;
  v213 = 0;
  if (*(_BYTE *)(v4 + 736))
  {
    sub_239A5E664((uint64_t)v197, v4 + 272);
    v213 = 1;
  }
  v192[0] = 0;
  v196 = 0;
  if (*(_BYTE *)(v4 + 936))
  {
    sub_239A5EB00((uint64_t)v192, (__int128 *)(v4 + 744));
    v196 = 1;
  }
  v190[0] = 0;
  v191 = 0;
  if (*(_BYTE *)(v4 + 1656))
  {
    sub_239A5EC2C((uint64_t)v190, (__int128 *)(v4 + 944));
    v191 = 1;
  }
  LOBYTE(v225) = 0;
  v229 = 0;
  if (*(_BYTE *)(v4 + 3408))
  {
    sub_239A5F6A8((uint64_t)&v225, (__int128 *)(v4 + 1664));
    v229 = 1;
  }
  LOBYTE(v188[0]) = 0;
  v189 = 0;
  if (*(_BYTE *)(v4 + 4000))
  {
    sub_239A5FE90((uint64_t)v188, (__int128 *)(v4 + 3416));
    v189 = 1;
  }
  sub_239A60550((uint64_t)v184, (__int128 *)(v4 + 4008));
  LOBYTE(v182[0]) = 0;
  v183 = 0;
  if (*(_BYTE *)(v4 + 4984))
  {
    sub_239A6064C((uint64_t)v182, (uint64_t *)(v4 + 4120));
    v183 = 1;
  }
  v174[0] = 0;
  v181 = 0;
  if (*(_BYTE *)(v4 + 5384))
  {
    sub_239A60CB0((uint64_t)v174, (__int128 *)(v4 + 4992));
    v181 = 1;
  }
  v158[0] = 0;
  v173 = 0;
  if (*(_BYTE *)(v4 + 5752))
  {
    sub_239A60E98((uint64_t)v158, (__int128 *)(v4 + 5392));
    v173 = 1;
  }
  sub_239A61264((char *)__dst, v4 + 5760);
  sub_239BE6A78(&v214, (uint64_t)v197, (uint64_t)v192, (uint64_t)v190, (uint64_t)&v225, (uint64_t)v188, (uint64_t)v184, (uint64_t)v182, (uint64_t)v174, (uint64_t)v158, (uint64_t)__dst);
  sub_2397A0AB4(&v215, (uint64_t)&v214);
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
  if (*((_QWORD *)&v214 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v157)
  {
    if (v156 < 0)
    {
      operator delete(v155);
      if ((v154 & 0x80000000) == 0)
      {
LABEL_177:
        v93 = __p;
        if (!__p)
          goto LABEL_179;
        goto LABEL_178;
      }
    }
    else if ((v154 & 0x80000000) == 0)
    {
      goto LABEL_177;
    }
    operator delete(v153);
    v93 = __p;
    if (!__p)
    {
LABEL_179:
      sub_239586EB4((uint64_t)&v150);
      if (v148)
      {
        v149 = v148;
        operator delete(v148);
      }
      goto LABEL_181;
    }
LABEL_178:
    v152 = v93;
    operator delete(v93);
    goto LABEL_179;
  }
LABEL_181:
  if (v173)
  {
    if (v171)
    {
      v172 = v171;
      operator delete(v171);
    }
    if (v170 < 0)
      operator delete(v169);
    if (v167)
    {
      v168 = v167;
      operator delete(v167);
    }
    if (v165)
    {
      v166 = v165;
      operator delete(v165);
    }
    if (v163)
    {
      v164 = v163;
      operator delete(v163);
    }
    if (v161)
    {
      v162 = v161;
      operator delete(v161);
    }
    if (v159)
    {
      v160 = v159;
      operator delete(v159);
    }
  }
  if (v181)
  {
    if (v180 < 0)
      operator delete(v179);
    if (v177)
    {
      v178 = v177;
      operator delete(v177);
    }
    if (v175)
    {
      v176 = v175;
      operator delete(v175);
    }
  }
  if (v183)
    sub_239A613DC((uint64_t)v182);
  if (v187 && v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  if (v189)
    sub_239A614AC(v188);
  if (v229)
    sub_239A615DC((uint64_t)&v225);
  if (v191)
    sub_239A6177C((uint64_t)v190);
  if (v196)
  {
    if (v194)
    {
      v195 = v194;
      operator delete(v194);
    }
    sub_239421038((uint64_t)v193, v193[1]);
  }
  if (!v213)
    goto LABEL_229;
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  sub_239A61EC0(v208);
  if (v207 < 0)
  {
    operator delete(v206);
    if ((v205 & 0x80000000) == 0)
    {
LABEL_225:
      if ((v203 & 0x80000000) == 0)
        goto LABEL_226;
LABEL_319:
      operator delete(v202);
      if ((v201 & 0x80000000) == 0)
      {
LABEL_227:
        v94 = v198;
        if (!v198)
          goto LABEL_229;
        goto LABEL_228;
      }
      goto LABEL_320;
    }
  }
  else if ((v205 & 0x80000000) == 0)
  {
    goto LABEL_225;
  }
  operator delete(v204);
  if (v203 < 0)
    goto LABEL_319;
LABEL_226:
  if ((v201 & 0x80000000) == 0)
    goto LABEL_227;
LABEL_320:
  operator delete(v200);
  v94 = v198;
  if (v198)
  {
LABEL_228:
    v199 = v94;
    operator delete(v94);
  }
LABEL_229:
  sub_23962C714(v182);
  if ((sub_23962C67C((uint64_t)&v215) & 1) == 0)
  {
    v228 = 7;
    strcpy((char *)&v225, "reports");
    sub_239629EF4((uint64_t)&v225, __dst);
    sub_239A61904((uint64_t)v182, __dst[0], (uint64_t)&v215);
    v95 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v96 = (unint64_t *)&__dst[1]->info;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
        if ((v228 & 0x80000000) == 0)
          goto LABEL_236;
        goto LABEL_235;
      }
    }
    if (v228 < 0)
LABEL_235:
      operator delete(v225);
  }
LABEL_236:
  v98 = *(_QWORD *)(v4 + 6800);
  v225 = 0;
  if ((v98 & 0xFF00000000) != 0)
  {
    v99 = operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
    if (v99)
    {
      v99[2] = v98;
      v99[3] = 1;
      *(_QWORD *)v99 = &off_250AF2700;
    }
    v225 = v99;
  }
  v100 = (unsigned int *)operator new(0xB0uLL, MEMORY[0x24BEDB6B8]);
  v101 = v100;
  if (v100)
  {
    sub_239A61B1C((uint64_t)v100, (uint64_t)v7, (uint64_t)&v224, (uint64_t)&v223, (uint64_t)&v222, (uint64_t)&v221, (uint64_t)&v220, (uint64_t)&v219, (uint64_t)&v218, (uint64_t)&v217, (uint64_t)v182, (uint64_t *)&v225);
    *(_QWORD *)v101 = &off_250AF2720;
  }
  if (v7)
  {
    v102 = v7 + 10;
    do
    {
      v103 = __ldaxr(v102);
      v104 = v103 - 1;
    }
    while (__stlxr(v104, v102));
    if (!v104)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  v105 = v225;
  if (v225)
  {
    v106 = (unsigned int *)((char *)v225 + 12);
    do
    {
      v107 = __ldaxr(v106);
      v108 = v107 - 1;
    }
    while (__stlxr(v108, v106));
    if (!v108)
      (*(void (**)(void *))(*(_QWORD *)v105 + 8))(v105);
  }
  v109 = *(_QWORD *)(v5 + 16);
  if (v6 >= (*(_QWORD *)(v5 + 24) - v109) >> 3)
  {
    sub_239A444D4((uint64_t)"unknown file", 534, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v110 = *(unsigned int **)(v109 + 8 * v6);
  (*(void (**)(_QWORD, unsigned int *, unsigned int *, _QWORD))(v5 + 64))(*(_QWORD *)(v5 + 8), v110, v101, *(_QWORD *)(v5 + 72));
  if (v110)
  {
    v111 = v110 + 39;
    do
    {
      v112 = __ldaxr(v111);
      v113 = v112 - 1;
    }
    while (__stlxr(v113, v111));
    if (!v113)
      (*(void (**)(unsigned int *))(*(_QWORD *)v110 + 8))(v110);
  }
  if (v101)
  {
    v114 = v101 + 42;
    do
    {
      v115 = __ldaxr(v114);
      v116 = v115 - 1;
    }
    while (__stlxr(v116, v114));
    if (!v116)
      (*(void (**)(unsigned int *))(*(_QWORD *)v101 + 8))(v101);
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v182[0] + 1);
  if (*((_QWORD *)&v182[0] + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v182[0] + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v216;
  if (v216)
  {
    v121 = (unint64_t *)&v216->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
  if (*((_QWORD *)&v217 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
  if (*((_QWORD *)&v218 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
  if (*((_QWORD *)&v219 + 1))
  {
    v130 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
  if (*((_QWORD *)&v220 + 1))
  {
    v133 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
  if (*((_QWORD *)&v221 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
  if (*((_QWORD *)&v222 + 1))
  {
    v139 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
  if (*((_QWORD *)&v223 + 1))
  {
    v142 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
  if (*((_QWORD *)&v224 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v224 + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
}

void sub_239A5DEDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v2 = (std::__shared_weak_count *)STACK[0x1308];
  if (STACK[0x1308])
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)STACK[0x1318];
  if (STACK[0x1318])
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)STACK[0x1328];
  if (STACK[0x1328])
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)STACK[0x1338];
  if (STACK[0x1338])
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)STACK[0x1348];
  if (STACK[0x1348])
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)STACK[0x1358];
  if (STACK[0x1358])
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)STACK[0x1368];
  if (STACK[0x1368])
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  _Unwind_Resume(a1);
}

void sub_239A5E5B4()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;

  if (*(_BYTE *)(v0 + 1568) && STACK[0x1378])
  {
    v1 = (unint64_t *)(STACK[0x1378] + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    JUMPOUT(0x239A5E168);
  }
  JUMPOUT(0x239A5E3ECLL);
}

void sub_239A5E5E0()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;

  if (*(_BYTE *)(v0 + 1568) && STACK[0x1378])
  {
    v1 = (unint64_t *)(STACK[0x1378] + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    JUMPOUT(0x239A5E440);
  }
  JUMPOUT(0x239A5E45CLL);
}

void sub_239A5E60C()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;

  if (*(_BYTE *)(v0 + 1568) && STACK[0x1378])
  {
    v1 = (unint64_t *)(STACK[0x1378] + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    JUMPOUT(0x239A5E4E8);
  }
  JUMPOUT(0x239A5E504);
}

void sub_239A5E638()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;

  if (*(_BYTE *)(v0 + 1568) && STACK[0x1378])
  {
    v1 = (unint64_t *)(STACK[0x1378] + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    JUMPOUT(0x239A5E558);
  }
  JUMPOUT(0x239A5E574);
}

uint64_t sub_239A5E664(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  _BYTE *v20;
  __int128 v21;
  uint64_t **v22;
  _QWORD *v23;
  uint64_t ***v24;
  unint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t **v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _BYTE *v42;
  _BYTE *v43;
  int64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  _BYTE *v49;
  _BYTE *v50;
  int64_t v51;
  char *v52;
  char *v53;
  uint64_t *v55;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = *(_BYTE **)(a2 + 24);
  v5 = *(_BYTE **)(a2 + 32);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_2394189F8();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 32) = v9;
  }
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v12;
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = v11;
  v13 = *(_OWORD *)(a2 + 112);
  v14 = *(_OWORD *)(a2 + 128);
  v15 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = v15;
  *(_OWORD *)(a1 + 112) = v13;
  if (*(char *)(a2 + 191) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 168), *(void **)(a2 + 168), *(_QWORD *)(a2 + 176));
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v16;
  }
  v17 = (_BYTE *)(a1 + 192);
  if (*(char *)(a2 + 215) < 0)
  {
    sub_23941A7F8(v17, *(void **)(a2 + 192), *(_QWORD *)(a2 + 200));
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_OWORD *)v17 = v18;
  }
  if (*(char *)(a2 + 239) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 216), *(void **)(a2 + 216), *(_QWORD *)(a2 + 224));
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v19;
  }
  v20 = (_BYTE *)(a1 + 240);
  if (*(char *)(a2 + 263) < 0)
  {
    sub_23941A7F8(v20, *(void **)(a2 + 240), *(_QWORD *)(a2 + 248));
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)v20 = v21;
  }
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  v22 = (uint64_t **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  v23 = *(_QWORD **)(a2 + 272);
  if (v23 != (_QWORD *)(a2 + 280))
  {
    v24 = (uint64_t ***)(a1 + 272);
    do
    {
      v25 = v23 + 4;
      v26 = *v22;
      v27 = (uint64_t *)(a1 + 280);
      if (*v24 == v22)
        goto LABEL_25;
      v28 = *v22;
      v29 = (uint64_t *)(a1 + 280);
      if (v26)
      {
        do
        {
          v27 = v28;
          v28 = (uint64_t *)v28[1];
        }
        while (v28);
      }
      else
      {
        do
        {
          v27 = (uint64_t *)v29[2];
          v30 = *v27 == (_QWORD)v29;
          v29 = v27;
        }
        while (v30);
      }
      v31 = *v25;
      if (v27[4] < *v25)
      {
LABEL_25:
        if (v26)
          v32 = (uint64_t **)v27;
        else
          v32 = (uint64_t **)(a1 + 280);
        if (v26)
          v33 = (uint64_t **)(v27 + 1);
        else
          v33 = (uint64_t **)(a1 + 280);
      }
      else
      {
        v32 = (uint64_t **)(a1 + 280);
        v33 = (uint64_t **)(a1 + 280);
        if (v26)
        {
          v33 = (uint64_t **)(a1 + 280);
          while (1)
          {
            while (1)
            {
              v32 = (uint64_t **)v26;
              v35 = v26[4];
              if (v31 >= v35)
                break;
              v26 = *v32;
              v33 = v32;
              if (!*v32)
                goto LABEL_40;
            }
            if (v35 >= v31)
              break;
            v33 = v32 + 1;
            v26 = v32[1];
            if (!v26)
              goto LABEL_40;
          }
        }
      }
      if (*v33)
      {
        v34 = (_QWORD *)v23[1];
        if (v34)
          goto LABEL_43;
      }
      else
      {
LABEL_40:
        sub_239A63680((uint64_t)&v55, a1 + 272, (uint64_t)v25);
        v36 = v55;
        *v55 = 0;
        v36[1] = 0;
        v36[2] = (uint64_t)v32;
        *v33 = v36;
        v37 = **v24;
        if (v37)
        {
          *v24 = (uint64_t **)v37;
          v36 = *v33;
        }
        sub_2394213B8(*(uint64_t **)(a1 + 280), v36);
        ++*(_QWORD *)(a1 + 288);
        v34 = (_QWORD *)v23[1];
        if (v34)
        {
          do
          {
LABEL_43:
            v38 = v34;
            v34 = (_QWORD *)*v34;
          }
          while (v34);
          goto LABEL_18;
        }
      }
      do
      {
        v38 = (_QWORD *)v23[2];
        v30 = *v38 == (_QWORD)v23;
        v23 = v38;
      }
      while (!v30);
LABEL_18:
      v23 = v38;
    }
    while (v38 != (_QWORD *)(a2 + 280));
  }
  v39 = *(_QWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v39;
  v40 = *(_OWORD *)(a2 + 312);
  v41 = *(_OWORD *)(a2 + 328);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 312) = v40;
  *(_OWORD *)(a1 + 328) = v41;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  v43 = *(_BYTE **)(a2 + 352);
  v42 = *(_BYTE **)(a2 + 360);
  v44 = v42 - v43;
  if (v42 != v43)
  {
    if (v44 < 0)
      sub_2394189F8();
    v45 = (char *)operator new(v42 - v43);
    *(_QWORD *)(a1 + 352) = v45;
    *(_QWORD *)(a1 + 360) = v45;
    v46 = &v45[4 * (v44 >> 2)];
    *(_QWORD *)(a1 + 368) = v46;
    memcpy(v45, v43, v44);
    *(_QWORD *)(a1 + 360) = v46;
  }
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  v47 = *(_OWORD *)(a2 + 392);
  v48 = *(_OWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 392) = v47;
  *(_OWORD *)(a1 + 408) = v48;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  v50 = *(_BYTE **)(a2 + 432);
  v49 = *(_BYTE **)(a2 + 440);
  v51 = v49 - v50;
  if (v49 != v50)
  {
    if (v51 < 0)
      sub_2394189F8();
    v52 = (char *)operator new(v49 - v50);
    *(_QWORD *)(a1 + 432) = v52;
    *(_QWORD *)(a1 + 440) = v52;
    v53 = &v52[4 * (v51 >> 2)];
    *(_QWORD *)(a1 + 448) = v53;
    memcpy(v52, v50, v51);
    *(_QWORD *)(a1 + 440) = v53;
  }
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  return a1;
}

void sub_239A5EA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void **v11;
  void *v13;

  if (*(char *)(v9 + 239) < 0)
    operator delete(*v11);
  sub_239A63634(a9);
  v13 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 32) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_239A5EB00(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = *a2;
  v5 = a2[1];
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  sub_239A634AC((uint64_t *)(a1 + 40), *((_QWORD **)a2 + 5), (_QWORD *)a2 + 6);
  v6 = a2[4];
  v7 = a2[5];
  v8 = *((_DWORD *)a2 + 24);
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v10 = (_BYTE *)*((_QWORD *)a2 + 13);
  v9 = (_BYTE *)*((_QWORD *)a2 + 14);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_2394189F8();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 104) = v12;
    *(_QWORD *)(a1 + 112) = v12;
    v13 = &v12[4 * (v11 >> 2)];
    *(_QWORD *)(a1 + 120) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 112) = v13;
  }
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  v14 = *(__int128 *)((char *)a2 + 136);
  v15 = *(__int128 *)((char *)a2 + 152);
  v16 = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *(_OWORD *)(a1 + 168) = v16;
  *(_OWORD *)(a1 + 152) = v15;
  *(_OWORD *)(a1 + 136) = v14;
  return a1;
}

void sub_239A5EBFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_239421038(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t sub_239A5EC2C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  __int128 *v7;
  uint64_t *v8;
  size_t prime;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  int v37;
  _BYTE *v38;
  _BYTE *v39;
  int64_t v40;
  char *v41;
  char *v42;
  int v43;
  __int128 v44;
  __int128 v45;
  uint64_t *v46;
  size_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  __int128 v58;
  float v59;
  float v60;
  _BOOL8 v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  _BYTE *v73;
  _BYTE *v74;
  int64_t v75;
  char *v76;
  char *v77;
  _BYTE *v78;
  __int128 v79;
  int8x8_t v80;
  BOOL v81;
  int8x8_t v82;
  BOOL v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unint64_t v97;
  uint8x8_t v98;
  uint64_t v99;
  unint64_t v100;
  uint8x8_t v101;
  uint64_t v102;
  __int128 *v103;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  sub_239A632B8((uint64_t *)(a1 + 40), *((_QWORD **)a2 + 5), (_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 80) = 0;
  sub_239A632B8((uint64_t *)(a1 + 64), *((_QWORD **)a2 + 8), (_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  sub_239A632B8((uint64_t *)(a1 + 88), *((_QWORD **)a2 + 11), (_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 128) = 0;
  sub_239A632B8((uint64_t *)(a1 + 112), *((_QWORD **)a2 + 14), (_QWORD *)a2 + 15);
  v7 = a2;
  *(_OWORD *)(a1 + 136) = 0u;
  v8 = (uint64_t *)(a1 + 136);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = *((_DWORD *)v7 + 42);
  v103 = v7;
  prime = *((_QWORD *)v7 + 18);
  if (prime == 1)
  {
    prime = 2;
LABEL_3:
    sub_239427FE0(a1 + 136, prime);
    goto LABEL_4;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*((_QWORD *)v7 + 18));
    v80 = *(int8x8_t *)(a1 + 144);
    v81 = prime >= *(_QWORD *)&v80;
    if (prime > *(_QWORD *)&v80)
      goto LABEL_3;
  }
  else
  {
    v80 = 0;
    v81 = 1;
    if (prime)
      goto LABEL_3;
  }
  if (!v81)
  {
    v97 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 160) / *(float *)(a1 + 168));
    if (*(_QWORD *)&v80 < 3uLL || (v98 = (uint8x8_t)vcnt_s8(v80), v98.i16[0] = vaddlv_u8(v98), v98.u32[0] > 1uLL))
    {
      v97 = std::__next_prime(v97);
    }
    else
    {
      v99 = 1 << -(char)__clz(v97 - 1);
      if (v97 >= 2)
        v97 = v99;
    }
    if (prime <= v97)
      prime = v97;
    if (prime < *(_QWORD *)&v80)
      goto LABEL_3;
  }
LABEL_4:
  v10 = *((_QWORD *)v103 + 19);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 152);
    v12 = *(_QWORD *)(a1 + 144);
    do
    {
      v13 = *(_QWORD *)(v10 + 16);
      if (v12)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          v6 = *(_QWORD *)(v10 + 16);
          if (v13 >= v12)
            v6 = v13 % v12;
        }
        else
        {
          v6 = (v12 - 1) & v13;
        }
        v15 = *(_QWORD **)(*v8 + 8 * v6);
        if (v15)
        {
          v16 = (_QWORD *)*v15;
          if (v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                v18 = v16[1];
                if (v18 == v13)
                {
                  if (v16[2] == v13)
                    goto LABEL_64;
                }
                else if ((v18 & (v12 - 1)) != v6)
                {
                  goto LABEL_26;
                }
                v16 = (_QWORD *)*v16;
                if (!v16)
                  goto LABEL_26;
              }
            }
            do
            {
              v17 = v16[1];
              if (v17 == v13)
              {
                if (v16[2] == v13)
                  goto LABEL_64;
              }
              else
              {
                if (v17 >= v12)
                  v17 %= v12;
                if (v17 != v6)
                  break;
              }
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_26:
      v19 = operator new(0x48uLL);
      *v19 = 0;
      v19[1] = v13;
      v20 = *(_OWORD *)(v10 + 16);
      v21 = *(_OWORD *)(v10 + 32);
      v22 = *(_OWORD *)(v10 + 48);
      v19[8] = *(_QWORD *)(v10 + 64);
      *((_OWORD *)v19 + 2) = v21;
      *((_OWORD *)v19 + 3) = v22;
      *((_OWORD *)v19 + 1) = v20;
      v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 160) + 1);
      v24 = *(float *)(a1 + 168);
      if (!v12 || (float)(v24 * (float)v12) < v23)
      {
        v25 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3)
          v25 = 1;
        v26 = v25 | (2 * v12);
        v27 = vcvtps_u32_f32(v23 / v24);
        if (v26 <= v27)
          v28 = v27;
        else
          v28 = v26;
        if (v28 == 1)
        {
          v28 = 2;
        }
        else if ((v28 & (v28 - 1)) != 0)
        {
          v28 = std::__next_prime(v28);
          v12 = *(_QWORD *)(a1 + 144);
        }
        if (v28 > v12)
          goto LABEL_38;
        if (v28 < v12)
        {
          v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 160) / *(float *)(a1 + 168));
          if (v12 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
          {
            v29 = std::__next_prime(v29);
          }
          else
          {
            v31 = 1 << -(char)__clz(v29 - 1);
            if (v29 >= 2)
              v29 = v31;
          }
          if (v28 <= v29)
            v28 = v29;
          if (v28 < v12)
LABEL_38:
            sub_239427FE0(a1 + 136, v28);
        }
        v12 = *(_QWORD *)(a1 + 144);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v13 >= v12)
            v6 = v13 % v12;
          else
            v6 = v13;
        }
        else
        {
          v6 = (v12 - 1) & v13;
        }
      }
      v32 = *v8;
      v33 = *(_QWORD **)(*v8 + 8 * v6);
      if (v33)
      {
        *v19 = *v33;
      }
      else
      {
        *v19 = *v11;
        *v11 = v19;
        *(_QWORD *)(v32 + 8 * v6) = v11;
        if (!*v19)
          goto LABEL_63;
        v34 = *(_QWORD *)(*v19 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v34 >= v12)
            v34 %= v12;
        }
        else
        {
          v34 &= v12 - 1;
        }
        v33 = (_QWORD *)(*v8 + 8 * v34);
      }
      *v33 = v19;
LABEL_63:
      ++*(_QWORD *)(a1 + 160);
LABEL_64:
      v10 = *(_QWORD *)v10;
    }
    while (v10);
  }
  *(_OWORD *)(a1 + 176) = v103[11];
  v35 = v103[12];
  v36 = v103[13];
  v37 = *((_DWORD *)v103 + 56);
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 224) = v37;
  *(_OWORD *)(a1 + 208) = v36;
  *(_OWORD *)(a1 + 192) = v35;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v39 = (_BYTE *)*((_QWORD *)v103 + 29);
  v38 = (_BYTE *)*((_QWORD *)v103 + 30);
  v40 = v38 - v39;
  if (v38 != v39)
  {
    if (v40 < 0)
      sub_2394189F8();
    v41 = (char *)operator new(v38 - v39);
    *(_QWORD *)(a1 + 232) = v41;
    *(_QWORD *)(a1 + 240) = v41;
    v42 = &v41[4 * (v40 >> 2)];
    *(_QWORD *)(a1 + 248) = v42;
    memcpy(v41, v39, v40);
    *(_QWORD *)(a1 + 240) = v42;
  }
  *(_BYTE *)(a1 + 256) = *((_BYTE *)v103 + 256);
  v43 = *((_DWORD *)v103 + 66);
  *(_BYTE *)(a1 + 268) = *((_BYTE *)v103 + 268);
  *(_DWORD *)(a1 + 264) = v43;
  v44 = v103[17];
  v45 = v103[18];
  *(_QWORD *)(a1 + 304) = *((_QWORD *)v103 + 38);
  *(_OWORD *)(a1 + 312) = 0u;
  v46 = (uint64_t *)(a1 + 312);
  *(_OWORD *)(a1 + 272) = v44;
  *(_OWORD *)(a1 + 288) = v45;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = *((_DWORD *)v103 + 86);
  v47 = *((_QWORD *)v103 + 40);
  if (v47 == 1)
  {
    v47 = 2;
LABEL_70:
    sub_239427FE0(a1 + 312, v47);
    goto LABEL_71;
  }
  if ((v47 & (v47 - 1)) != 0)
  {
    v47 = std::__next_prime(v47);
    v82 = *(int8x8_t *)(a1 + 320);
    v83 = v47 >= *(_QWORD *)&v82;
    if (v47 > *(_QWORD *)&v82)
      goto LABEL_70;
  }
  else
  {
    v82 = 0;
    v83 = 1;
    if (v47)
      goto LABEL_70;
  }
  if (!v83)
  {
    v100 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 336) / *(float *)(a1 + 344));
    if (*(_QWORD *)&v82 < 3uLL || (v101 = (uint8x8_t)vcnt_s8(v82), v101.i16[0] = vaddlv_u8(v101), v101.u32[0] > 1uLL))
    {
      v100 = std::__next_prime(v100);
    }
    else
    {
      v102 = 1 << -(char)__clz(v100 - 1);
      if (v100 >= 2)
        v100 = v102;
    }
    if (v47 <= v100)
      v47 = v100;
    if (v47 < *(_QWORD *)&v82)
      goto LABEL_70;
  }
LABEL_71:
  v48 = (_QWORD *)*((_QWORD *)v103 + 41);
  if (v48)
  {
    v49 = (_QWORD *)(a1 + 328);
    v50 = *(_QWORD *)(a1 + 320);
    do
    {
      v51 = v48[2];
      if (v50)
      {
        v52 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
        v52.i16[0] = vaddlv_u8(v52);
        if (v52.u32[0] > 1uLL)
        {
          v10 = v48[2];
          if (v51 >= v50)
            v10 = v51 % v50;
        }
        else
        {
          v10 = (v50 - 1) & v51;
        }
        v53 = *(_QWORD **)(*v46 + 8 * v10);
        if (v53)
        {
          v54 = (_QWORD *)*v53;
          if (v54)
          {
            if (v52.u32[0] < 2uLL)
            {
              while (1)
              {
                v56 = v54[1];
                if (v56 == v51)
                {
                  if (v54[2] == v51)
                    goto LABEL_131;
                }
                else if ((v56 & (v50 - 1)) != v10)
                {
                  goto LABEL_93;
                }
                v54 = (_QWORD *)*v54;
                if (!v54)
                  goto LABEL_93;
              }
            }
            do
            {
              v55 = v54[1];
              if (v55 == v51)
              {
                if (v54[2] == v51)
                  goto LABEL_131;
              }
              else
              {
                if (v55 >= v50)
                  v55 %= v50;
                if (v55 != v10)
                  break;
              }
              v54 = (_QWORD *)*v54;
            }
            while (v54);
          }
        }
      }
LABEL_93:
      v57 = operator new(0x28uLL);
      *v57 = 0;
      v57[1] = v51;
      v58 = *((_OWORD *)v48 + 1);
      v57[4] = v48[4];
      *((_OWORD *)v57 + 1) = v58;
      v59 = (float)(unint64_t)(*(_QWORD *)(a1 + 336) + 1);
      v60 = *(float *)(a1 + 344);
      if (!v50 || (float)(v60 * (float)v50) < v59)
      {
        v61 = (v50 & (v50 - 1)) != 0;
        if (v50 < 3)
          v61 = 1;
        v62 = v61 | (2 * v50);
        v63 = vcvtps_u32_f32(v59 / v60);
        if (v62 <= v63)
          v64 = v63;
        else
          v64 = v62;
        if (v64 == 1)
        {
          v64 = 2;
        }
        else if ((v64 & (v64 - 1)) != 0)
        {
          v64 = std::__next_prime(v64);
          v50 = *(_QWORD *)(a1 + 320);
        }
        if (v64 > v50)
          goto LABEL_105;
        if (v64 < v50)
        {
          v65 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 336) / *(float *)(a1 + 344));
          if (v50 < 3 || (v66 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
          {
            v65 = std::__next_prime(v65);
          }
          else
          {
            v67 = 1 << -(char)__clz(v65 - 1);
            if (v65 >= 2)
              v65 = v67;
          }
          if (v64 <= v65)
            v64 = v65;
          if (v64 < v50)
LABEL_105:
            sub_239427FE0(a1 + 312, v64);
        }
        v50 = *(_QWORD *)(a1 + 320);
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v51 >= v50)
            v10 = v51 % v50;
          else
            v10 = v51;
        }
        else
        {
          v10 = (v50 - 1) & v51;
        }
      }
      v68 = *v46;
      v69 = *(_QWORD **)(*v46 + 8 * v10);
      if (v69)
      {
        *v57 = *v69;
      }
      else
      {
        *v57 = *v49;
        *v49 = v57;
        *(_QWORD *)(v68 + 8 * v10) = v49;
        if (!*v57)
          goto LABEL_130;
        v70 = *(_QWORD *)(*v57 + 8);
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v70 >= v50)
            v70 %= v50;
        }
        else
        {
          v70 &= v50 - 1;
        }
        v69 = (_QWORD *)(*v46 + 8 * v70);
      }
      *v69 = v57;
LABEL_130:
      ++*(_QWORD *)(a1 + 336);
LABEL_131:
      v48 = (_QWORD *)*v48;
    }
    while (v48);
  }
  v71 = v103[22];
  *(_DWORD *)(a1 + 368) = *((_DWORD *)v103 + 92);
  *(_OWORD *)(a1 + 352) = v71;
  v72 = *(__int128 *)((char *)v103 + 376);
  *(_OWORD *)(a1 + 388) = *(__int128 *)((char *)v103 + 388);
  *(_OWORD *)(a1 + 376) = v72;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  v74 = (_BYTE *)*((_QWORD *)v103 + 51);
  v73 = (_BYTE *)*((_QWORD *)v103 + 52);
  v75 = v73 - v74;
  if (v73 != v74)
  {
    if (v75 < 0)
      sub_2394189F8();
    v76 = (char *)operator new(v73 - v74);
    *(_QWORD *)(a1 + 408) = v76;
    *(_QWORD *)(a1 + 416) = v76;
    v77 = &v76[8 * (v75 >> 3)];
    *(_QWORD *)(a1 + 424) = v77;
    memcpy(v76, v74, v75);
    *(_QWORD *)(a1 + 416) = v77;
  }
  v78 = (_BYTE *)(a1 + 432);
  if (*((char *)v103 + 455) < 0)
  {
    sub_23941A7F8(v78, *((void **)v103 + 54), *((_QWORD *)v103 + 55));
  }
  else
  {
    v79 = v103[27];
    *(_QWORD *)(a1 + 448) = *((_QWORD *)v103 + 56);
    *(_OWORD *)v78 = v79;
  }
  v84 = *(__int128 *)((char *)v103 + 456);
  v85 = *(__int128 *)((char *)v103 + 472);
  v86 = *(__int128 *)((char *)v103 + 504);
  *(_OWORD *)(a1 + 488) = *(__int128 *)((char *)v103 + 488);
  *(_OWORD *)(a1 + 504) = v86;
  *(_OWORD *)(a1 + 456) = v84;
  *(_OWORD *)(a1 + 472) = v85;
  v87 = *(__int128 *)((char *)v103 + 520);
  v88 = *(__int128 *)((char *)v103 + 536);
  v89 = *(__int128 *)((char *)v103 + 568);
  *(_OWORD *)(a1 + 552) = *(__int128 *)((char *)v103 + 552);
  *(_OWORD *)(a1 + 568) = v89;
  *(_OWORD *)(a1 + 520) = v87;
  *(_OWORD *)(a1 + 536) = v88;
  v90 = *(__int128 *)((char *)v103 + 584);
  v91 = *(__int128 *)((char *)v103 + 600);
  v92 = *(__int128 *)((char *)v103 + 632);
  *(_OWORD *)(a1 + 616) = *(__int128 *)((char *)v103 + 616);
  *(_OWORD *)(a1 + 632) = v92;
  *(_OWORD *)(a1 + 584) = v90;
  *(_OWORD *)(a1 + 600) = v91;
  v93 = *(__int128 *)((char *)v103 + 648);
  v94 = *(__int128 *)((char *)v103 + 664);
  v95 = *(__int128 *)((char *)v103 + 696);
  *(_OWORD *)(a1 + 680) = *(__int128 *)((char *)v103 + 680);
  *(_OWORD *)(a1 + 696) = v95;
  *(_OWORD *)(a1 + 648) = v93;
  *(_OWORD *)(a1 + 664) = v94;
  return a1;
}

void sub_239A5F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, _QWORD **a12, _QWORD **a13, _QWORD **a14, _QWORD **a15)
{
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v19;
  void *v20;

  v19 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v15 + 416) = v19;
    operator delete(v19);
  }
  sub_239A63464(a10);
  v20 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v15 + 240) = v20;
    operator delete(v20);
  }
  sub_239420950(v16);
  sub_239A61F08(*a12);
  sub_239A61F08(*a13);
  sub_239A61F08(*a14);
  sub_239A61F08(*a15);
  _Unwind_Resume(a1);
}

uint64_t sub_239A5F6A8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE *v20;
  _BYTE *v21;
  int64_t v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE *v34;
  _BYTE *v35;
  int64_t v36;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  size_t v41;
  char *v42;
  char *v43;
  uint64_t *v44;
  size_t prime;
  uint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  size_t v49;
  uint8x8_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  float v59;
  float v60;
  _BOOL8 v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  _BYTE *v73;
  _BYTE *v74;
  int64_t v75;
  char *v76;
  char *v77;
  BOOL v79;
  unint64_t v80;
  uint8x8_t v81;
  uint64_t v82;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  v9 = a2[7];
  v10 = a2[8];
  v11 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v11;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v13 = (_BYTE *)*((_QWORD *)a2 + 22);
  v12 = (_BYTE *)*((_QWORD *)a2 + 23);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_2394189F8();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 176) = v15;
    *(_QWORD *)(a1 + 184) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 192) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 184) = v16;
  }
  *(_OWORD *)(a1 + 200) = *(__int128 *)((char *)a2 + 200);
  v17 = *(__int128 *)((char *)a2 + 216);
  v18 = *(__int128 *)((char *)a2 + 232);
  v19 = *(__int128 *)((char *)a2 + 248);
  *(_OWORD *)(a1 + 264) = *(__int128 *)((char *)a2 + 264);
  *(_OWORD *)(a1 + 248) = v19;
  *(_OWORD *)(a1 + 232) = v18;
  *(_OWORD *)(a1 + 216) = v17;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v21 = (_BYTE *)*((_QWORD *)a2 + 35);
  v20 = (_BYTE *)*((_QWORD *)a2 + 36);
  v22 = v20 - v21;
  if (v20 != v21)
  {
    if (v22 < 0)
      sub_2394189F8();
    v23 = (char *)operator new(v20 - v21);
    *(_QWORD *)(a1 + 280) = v23;
    *(_QWORD *)(a1 + 288) = v23;
    v24 = &v23[8 * (v22 >> 3)];
    *(_QWORD *)(a1 + 296) = v24;
    memcpy(v23, v21, v22);
    *(_QWORD *)(a1 + 288) = v24;
  }
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  sub_239A63028((_QWORD *)(a1 + 304), *((_QWORD **)a2 + 38), (_QWORD *)a2 + 39);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  sub_239A63028((_QWORD *)(a1 + 328), *((_QWORD **)a2 + 41), (_QWORD *)a2 + 42);
  *(_OWORD *)(a1 + 352) = a2[22];
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  v26 = (_BYTE *)*((_QWORD *)a2 + 46);
  v25 = (_BYTE *)*((_QWORD *)a2 + 47);
  v27 = v25 - v26;
  if (v25 != v26)
  {
    if (v27 < 0)
      sub_2394189F8();
    v28 = (char *)operator new(v25 - v26);
    *(_QWORD *)(a1 + 368) = v28;
    *(_QWORD *)(a1 + 376) = v28;
    v29 = &v28[8 * (v27 >> 3)];
    *(_QWORD *)(a1 + 384) = v29;
    memcpy(v28, v26, v27);
    *(_QWORD *)(a1 + 376) = v29;
  }
  v30 = *(__int128 *)((char *)a2 + 408);
  *(_OWORD *)(a1 + 392) = *(__int128 *)((char *)a2 + 392);
  *(_OWORD *)(a1 + 408) = v30;
  v31 = *(__int128 *)((char *)a2 + 424);
  v32 = *(__int128 *)((char *)a2 + 440);
  v33 = *(__int128 *)((char *)a2 + 456);
  *(_QWORD *)(a1 + 472) = *((_QWORD *)a2 + 59);
  *(_OWORD *)(a1 + 440) = v32;
  *(_OWORD *)(a1 + 456) = v33;
  *(_OWORD *)(a1 + 424) = v31;
  *(_OWORD *)(a1 + 480) = a2[30];
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  v35 = (_BYTE *)*((_QWORD *)a2 + 62);
  v34 = (_BYTE *)*((_QWORD *)a2 + 63);
  v36 = v34 - v35;
  if (v34 != v35)
  {
    if (v36 < 0)
      sub_2394189F8();
    v37 = (char *)operator new(v34 - v35);
    *(_QWORD *)(a1 + 496) = v37;
    *(_QWORD *)(a1 + 504) = v37;
    v38 = &v37[8 * (v36 >> 3)];
    *(_QWORD *)(a1 + 512) = v38;
    memcpy(v37, v35, v36);
    *(_QWORD *)(a1 + 504) = v38;
  }
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  v39 = (_BYTE *)*((_QWORD *)a2 + 65);
  v40 = (_BYTE *)*((_QWORD *)a2 + 66);
  v41 = v40 - v39;
  if (v40 != v39)
  {
    if ((v41 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v42 = (char *)operator new(v40 - v39);
    *(_QWORD *)(a1 + 520) = v42;
    *(_QWORD *)(a1 + 528) = v42;
    v43 = &v42[8 * ((uint64_t)v41 >> 3)];
    *(_QWORD *)(a1 + 536) = v43;
    memcpy(v42, v39, v41);
    *(_QWORD *)(a1 + 528) = v43;
  }
  *(_DWORD *)(a1 + 544) = *((_DWORD *)a2 + 136);
  v44 = (uint64_t *)(a1 + 552);
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_DWORD *)(a1 + 584) = *((_DWORD *)a2 + 146);
  prime = *((_QWORD *)a2 + 70);
  if (prime == 1)
  {
    prime = 2;
LABEL_18:
    sub_239A501C8(a1 + 552, prime);
    goto LABEL_19;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*((_QWORD *)a2 + 70));
    v41 = *(_QWORD *)(a1 + 560);
    v79 = prime >= v41;
    if (prime > v41)
      goto LABEL_18;
  }
  else
  {
    v41 = 0;
    v79 = 1;
    if (prime)
      goto LABEL_18;
  }
  if (!v79)
  {
    v80 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 576) / *(float *)(a1 + 584));
    if (v41 < 3 || (v81 = (uint8x8_t)vcnt_s8((int8x8_t)v41), v81.i16[0] = vaddlv_u8(v81), v81.u32[0] > 1uLL))
    {
      v80 = std::__next_prime(v80);
    }
    else
    {
      v82 = 1 << -(char)__clz(v80 - 1);
      if (v80 >= 2)
        v80 = v82;
    }
    if (prime <= v80)
      prime = v80;
    if (prime < v41)
      goto LABEL_18;
  }
LABEL_19:
  v46 = (uint64_t *)*((_QWORD *)a2 + 71);
  if (v46)
  {
    v47 = (_QWORD *)(a1 + 568);
    v48 = *(_QWORD *)(a1 + 560);
    do
    {
      v49 = v46[2];
      if (v48)
      {
        v50 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
        v50.i16[0] = vaddlv_u8(v50);
        if (v50.u32[0] > 1uLL)
        {
          v41 = v46[2];
          if (v49 >= v48)
            v41 = v49 % v48;
        }
        else
        {
          v41 = (v48 - 1) & v49;
        }
        v51 = *(_QWORD **)(*v44 + 8 * v41);
        if (v51)
        {
          v52 = (_QWORD *)*v51;
          if (v52)
          {
            if (v50.u32[0] < 2uLL)
            {
              while (1)
              {
                v54 = v52[1];
                if (v54 == v49)
                {
                  if (v52[2] == v49)
                    goto LABEL_79;
                }
                else if ((v54 & (v48 - 1)) != v41)
                {
                  goto LABEL_41;
                }
                v52 = (_QWORD *)*v52;
                if (!v52)
                  goto LABEL_41;
              }
            }
            do
            {
              v53 = v52[1];
              if (v53 == v49)
              {
                if (v52[2] == v49)
                  goto LABEL_79;
              }
              else
              {
                if (v53 >= v48)
                  v53 %= v48;
                if (v53 != v41)
                  break;
              }
              v52 = (_QWORD *)*v52;
            }
            while (v52);
          }
        }
      }
LABEL_41:
      v55 = operator new(0x58uLL);
      *v55 = 0;
      v55[1] = v49;
      *((_OWORD *)v55 + 1) = *((_OWORD *)v46 + 1);
      v56 = *((_OWORD *)v46 + 2);
      v57 = *((_OWORD *)v46 + 3);
      v58 = *((_OWORD *)v46 + 4);
      v55[10] = v46[10];
      *((_OWORD *)v55 + 3) = v57;
      *((_OWORD *)v55 + 4) = v58;
      *((_OWORD *)v55 + 2) = v56;
      v59 = (float)(unint64_t)(*(_QWORD *)(a1 + 576) + 1);
      v60 = *(float *)(a1 + 584);
      if (!v48 || (float)(v60 * (float)v48) < v59)
      {
        v61 = (v48 & (v48 - 1)) != 0;
        if (v48 < 3)
          v61 = 1;
        v62 = v61 | (2 * v48);
        v63 = vcvtps_u32_f32(v59 / v60);
        if (v62 <= v63)
          v64 = v63;
        else
          v64 = v62;
        if (v64 == 1)
        {
          v64 = 2;
        }
        else if ((v64 & (v64 - 1)) != 0)
        {
          v64 = std::__next_prime(v64);
          v48 = *(_QWORD *)(a1 + 560);
        }
        if (v64 > v48)
          goto LABEL_53;
        if (v64 < v48)
        {
          v65 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 576) / *(float *)(a1 + 584));
          if (v48 < 3 || (v66 = (uint8x8_t)vcnt_s8((int8x8_t)v48), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
          {
            v65 = std::__next_prime(v65);
          }
          else
          {
            v67 = 1 << -(char)__clz(v65 - 1);
            if (v65 >= 2)
              v65 = v67;
          }
          if (v64 <= v65)
            v64 = v65;
          if (v64 < v48)
LABEL_53:
            sub_239A501C8(a1 + 552, v64);
        }
        v48 = *(_QWORD *)(a1 + 560);
        if ((v48 & (v48 - 1)) != 0)
        {
          if (v49 >= v48)
            v41 = v49 % v48;
          else
            v41 = v49;
        }
        else
        {
          v41 = (v48 - 1) & v49;
        }
      }
      v68 = *v44;
      v69 = *(_QWORD **)(*v44 + 8 * v41);
      if (v69)
      {
        *v55 = *v69;
      }
      else
      {
        *v55 = *v47;
        *v47 = v55;
        *(_QWORD *)(v68 + 8 * v41) = v47;
        if (!*v55)
          goto LABEL_78;
        v70 = *(_QWORD *)(*v55 + 8);
        if ((v48 & (v48 - 1)) != 0)
        {
          if (v70 >= v48)
            v70 %= v48;
        }
        else
        {
          v70 &= v48 - 1;
        }
        v69 = (_QWORD *)(*v44 + 8 * v70);
      }
      *v69 = v55;
LABEL_78:
      ++*(_QWORD *)(a1 + 576);
LABEL_79:
      v46 = (uint64_t *)*v46;
    }
    while (v46);
  }
  v71 = a2[37];
  v72 = a2[38];
  *(_DWORD *)(a1 + 624) = *((_DWORD *)a2 + 156);
  *(_OWORD *)(a1 + 592) = v71;
  *(_OWORD *)(a1 + 608) = v72;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  v73 = (_BYTE *)*((_QWORD *)a2 + 79);
  v74 = (_BYTE *)*((_QWORD *)a2 + 80);
  v75 = v74 - v73;
  if (v74 != v73)
  {
    if (v75 < 0)
      sub_2394189F8();
    v76 = (char *)operator new(v74 - v73);
    *(_QWORD *)(a1 + 632) = v76;
    *(_QWORD *)(a1 + 640) = v76;
    v77 = &v76[4 * (v75 >> 2)];
    *(_QWORD *)(a1 + 648) = v77;
    memcpy(v76, v73, v75);
    *(_QWORD *)(a1 + 640) = v77;
  }
  *(_BYTE *)(a1 + 656) = *((_BYTE *)a2 + 656);
  sub_239A62AE0(a1 + 664, (__int128 *)((char *)a2 + 664));
  return a1;
}

void sub_239A5FD7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 640) = v5;
    operator delete(v5);
  }
  sub_239420950(v2);
  sub_239A62F00((_QWORD *)(v1 + 480));
  sub_239A62F40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A5FE90(uint64_t a1, __int128 *a2)
{
  unint64_t v2;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  uint64_t *v12;
  size_t prime;
  int8x8_t v14;
  BOOL v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t **v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  _BYTE *v43;
  _BYTE *v44;
  int64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  _BYTE *v50;
  _BYTE *v51;
  int64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  _BYTE *v57;
  _BYTE *v58;
  int64_t v59;
  char *v60;
  char *v61;
  __int128 v62;

  v5 = *a2;
  v6 = a2[1];
  *(_OWORD *)(a1 + 29) = *(__int128 *)((char *)a2 + 29);
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  sub_239A6212C(a1 + 48, (uint64_t)(a2 + 3));
  sub_239A62500(a1 + 88, (uint64_t)a2 + 88);
  sub_239A62500(a1 + 128, (uint64_t)(a2 + 8));
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v8 = (_BYTE *)*((_QWORD *)a2 + 22);
  v7 = (_BYTE *)*((_QWORD *)a2 + 23);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_2394189F8();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 176) = v10;
    *(_QWORD *)(a1 + 184) = v10;
    *(_QWORD *)(a1 + 192) = &v10[8 * (v9 >> 3)];
    v11 = v9 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v10, v8, v11);
    *(_QWORD *)(a1 + 184) = &v10[v11];
  }
  *(_OWORD *)(a1 + 200) = 0u;
  v12 = (uint64_t *)(a1 + 200);
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = *((_DWORD *)a2 + 58);
  prime = *((_QWORD *)a2 + 26);
  if (prime == 1)
  {
    prime = 2;
LABEL_20:
    sub_239A501C8(a1 + 200, prime);
    goto LABEL_21;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*((_QWORD *)a2 + 26));
    v14 = *(int8x8_t *)(a1 + 208);
    v15 = prime >= *(_QWORD *)&v14;
    if (prime > *(_QWORD *)&v14)
      goto LABEL_20;
  }
  else
  {
    v14 = 0;
    v15 = 1;
    if (prime)
      goto LABEL_20;
  }
  if (!v15)
  {
    v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 224) / *(float *)(a1 + 232));
    if (*(_QWORD *)&v14 < 3uLL || (v17 = (uint8x8_t)vcnt_s8(v14), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
    {
      v16 = std::__next_prime(v16);
    }
    else
    {
      v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2)
        v16 = v18;
    }
    if (prime <= v16)
      prime = v16;
    if (prime < *(_QWORD *)&v14)
      goto LABEL_20;
  }
LABEL_21:
  v19 = (uint64_t *)*((_QWORD *)a2 + 27);
  if (v19)
  {
    v20 = (_QWORD *)(a1 + 216);
    v21 = *(_QWORD *)(a1 + 208);
    do
    {
      v22 = *((int *)v19 + 4);
      if (v21)
      {
        v23 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          v2 = *((int *)v19 + 4);
          if (v21 <= v22)
            v2 = v22 % v21;
        }
        else
        {
          v2 = (v21 - 1) & v22;
        }
        v24 = *(uint64_t ***)(*v12 + 8 * v2);
        if (v24)
        {
          v25 = *v24;
          if (v25)
          {
            if (v23.u32[0] < 2uLL)
            {
              while (1)
              {
                v27 = v25[1];
                if (v27 == v22)
                {
                  if (*((_DWORD *)v25 + 4) == (_DWORD)v22)
                    goto LABEL_81;
                }
                else if ((v27 & (v21 - 1)) != v2)
                {
                  goto LABEL_43;
                }
                v25 = (uint64_t *)*v25;
                if (!v25)
                  goto LABEL_43;
              }
            }
            do
            {
              v26 = v25[1];
              if (v26 == v22)
              {
                if (*((_DWORD *)v25 + 4) == (_DWORD)v22)
                  goto LABEL_81;
              }
              else
              {
                if (v26 >= v21)
                  v26 %= v21;
                if (v26 != v2)
                  break;
              }
              v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
        }
      }
LABEL_43:
      v28 = operator new(0x20uLL);
      *v28 = 0;
      v28[1] = v22;
      *((_OWORD *)v28 + 1) = *((_OWORD *)v19 + 1);
      v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 224) + 1);
      v30 = *(float *)(a1 + 232);
      if (!v21 || (float)(v30 * (float)v21) < v29)
      {
        v31 = (v21 & (v21 - 1)) != 0;
        if (v21 < 3)
          v31 = 1;
        v32 = v31 | (2 * v21);
        v33 = vcvtps_u32_f32(v29 / v30);
        if (v32 <= v33)
          v34 = v33;
        else
          v34 = v32;
        if (v34 == 1)
        {
          v34 = 2;
        }
        else if ((v34 & (v34 - 1)) != 0)
        {
          v34 = std::__next_prime(v34);
          v21 = *(_QWORD *)(a1 + 208);
        }
        if (v34 > v21)
          goto LABEL_55;
        if (v34 < v21)
        {
          v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 224) / *(float *)(a1 + 232));
          if (v21 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
          {
            v35 = std::__next_prime(v35);
          }
          else
          {
            v37 = 1 << -(char)__clz(v35 - 1);
            if (v35 >= 2)
              v35 = v37;
          }
          if (v34 <= v35)
            v34 = v35;
          if (v34 < v21)
LABEL_55:
            sub_239A501C8(a1 + 200, v34);
        }
        v21 = *(_QWORD *)(a1 + 208);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v21 <= v22)
            v2 = v22 % v21;
          else
            v2 = v22;
        }
        else
        {
          v2 = (v21 - 1) & v22;
        }
      }
      v38 = *v12;
      v39 = *(_QWORD **)(*v12 + 8 * v2);
      if (v39)
      {
        *v28 = *v39;
      }
      else
      {
        *v28 = *v20;
        *v20 = v28;
        *(_QWORD *)(v38 + 8 * v2) = v20;
        if (!*v28)
          goto LABEL_80;
        v40 = *(_QWORD *)(*v28 + 8);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v40 >= v21)
            v40 %= v21;
        }
        else
        {
          v40 &= v21 - 1;
        }
        v39 = (_QWORD *)(*v12 + 8 * v40);
      }
      *v39 = v28;
LABEL_80:
      ++*(_QWORD *)(a1 + 224);
LABEL_81:
      v19 = (uint64_t *)*v19;
    }
    while (v19);
  }
  v41 = a2[15];
  v42 = a2[16];
  *(_DWORD *)(a1 + 272) = *((_DWORD *)a2 + 68);
  *(_OWORD *)(a1 + 240) = v41;
  *(_OWORD *)(a1 + 256) = v42;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v44 = (_BYTE *)*((_QWORD *)a2 + 35);
  v43 = (_BYTE *)*((_QWORD *)a2 + 36);
  v45 = v43 - v44;
  if (v43 != v44)
  {
    if (v45 < 0)
      sub_2394189F8();
    v46 = (char *)operator new(v43 - v44);
    *(_QWORD *)(a1 + 280) = v46;
    *(_QWORD *)(a1 + 288) = v46;
    v47 = &v46[4 * (v45 >> 2)];
    *(_QWORD *)(a1 + 296) = v47;
    memcpy(v46, v44, v45);
    *(_QWORD *)(a1 + 288) = v47;
  }
  *(_BYTE *)(a1 + 304) = *((_BYTE *)a2 + 304);
  v48 = *(__int128 *)((char *)a2 + 312);
  v49 = *(__int128 *)((char *)a2 + 328);
  *(_DWORD *)(a1 + 344) = *((_DWORD *)a2 + 86);
  *(_OWORD *)(a1 + 312) = v48;
  *(_OWORD *)(a1 + 328) = v49;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  v51 = (_BYTE *)*((_QWORD *)a2 + 44);
  v50 = (_BYTE *)*((_QWORD *)a2 + 45);
  v52 = v50 - v51;
  if (v50 != v51)
  {
    if (v52 < 0)
      sub_2394189F8();
    v53 = (char *)operator new(v50 - v51);
    *(_QWORD *)(a1 + 352) = v53;
    *(_QWORD *)(a1 + 360) = v53;
    v54 = &v53[4 * (v52 >> 2)];
    *(_QWORD *)(a1 + 368) = v54;
    memcpy(v53, v51, v52);
    *(_QWORD *)(a1 + 360) = v54;
  }
  *(_BYTE *)(a1 + 376) = *((_BYTE *)a2 + 376);
  v55 = a2[24];
  v56 = a2[25];
  *(_DWORD *)(a1 + 416) = *((_DWORD *)a2 + 104);
  *(_OWORD *)(a1 + 384) = v55;
  *(_OWORD *)(a1 + 400) = v56;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  v58 = (_BYTE *)*((_QWORD *)a2 + 53);
  v57 = (_BYTE *)*((_QWORD *)a2 + 54);
  v59 = v57 - v58;
  if (v57 != v58)
  {
    if (v59 < 0)
      sub_2394189F8();
    v60 = (char *)operator new(v57 - v58);
    *(_QWORD *)(a1 + 424) = v60;
    *(_QWORD *)(a1 + 432) = v60;
    v61 = &v60[4 * (v59 >> 2)];
    *(_QWORD *)(a1 + 440) = v61;
    memcpy(v60, v58, v59);
    *(_QWORD *)(a1 + 432) = v61;
  }
  *(_BYTE *)(a1 + 448) = *((_BYTE *)a2 + 448);
  v62 = *(__int128 *)((char *)a2 + 472);
  *(_OWORD *)(a1 + 456) = *(__int128 *)((char *)a2 + 456);
  *(_OWORD *)(a1 + 472) = v62;
  sub_239A628DC(a1 + 488, (uint64_t *)a2 + 61);
  *(_DWORD *)(a1 + 576) = *((_DWORD *)a2 + 144);
  return a1;
}

void sub_239A6046C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  void **v15;
  void **v16;
  void **v17;
  void *v19;
  void *v20;
  void *v21;

  v19 = *v17;
  if (*v17)
  {
    v14[54] = v19;
    operator delete(v19);
    v20 = *v16;
    if (!*v16)
    {
LABEL_3:
      v21 = *v15;
      if (!*v15)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v20 = *v16;
    if (!*v16)
      goto LABEL_3;
  }
  v14[45] = v20;
  operator delete(v20);
  v21 = *v15;
  if (!*v15)
  {
LABEL_5:
    sub_239A62A88(a10);
    sub_239420950(a12);
    sub_239420950(a13);
    sub_239420950(a14);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v14[36] = v21;
  operator delete(v21);
  goto LABEL_5;
}

uint64_t sub_239A60550(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (*((_BYTE *)a2 + 104))
  {
    v4 = *a2;
    *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
    *(_OWORD *)a1 = v4;
    v5 = a2[2];
    v6 = a2[3];
    v7 = *((_DWORD *)a2 + 16);
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 48) = v6;
    *(_OWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v9 = (_BYTE *)*((_QWORD *)a2 + 9);
    v8 = (_BYTE *)*((_QWORD *)a2 + 10);
    v10 = v8 - v9;
    if (v8 != v9)
    {
      if (v10 < 0)
        sub_2394189F8();
      v11 = (char *)operator new(v8 - v9);
      *(_QWORD *)(a1 + 72) = v11;
      *(_QWORD *)(a1 + 80) = v11;
      v12 = &v11[4 * (v10 >> 2)];
      *(_QWORD *)(a1 + 88) = v12;
      memcpy(v11, v9, v10);
      *(_QWORD *)(a1 + 80) = v12;
    }
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_BYTE *)(a1 + 104) = 1;
  }
  return a1;
}

void sub_239A60618(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 80) = v4;
    operator delete(v4);
  }
  if (*(_BYTE *)(v1 + 104))
  {
    v5 = *v2;
    if (*v2)
    {
      *(_QWORD *)(v1 + 80) = v5;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A6064C(uint64_t a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v5;
  uint64_t *v6;
  size_t prime;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE *v40;
  _BYTE *v41;
  int64_t v42;
  char *v43;
  char *v44;
  _BYTE *v45;
  _BYTE *v46;
  int64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  _BYTE *v53;
  _BYTE *v54;
  int64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  _BYTE *v60;
  _BYTE *v61;
  int64_t v62;
  char *v63;
  char *v64;
  BOOL v66;
  unint64_t v67;
  uint8x8_t v68;
  uint64_t v69;

  v5 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = (uint64_t *)(a1 + 16);
  *(_QWORD *)a1 = v5;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  prime = a2[3];
  if (prime == 1)
  {
    prime = 2;
LABEL_3:
    sub_239A501C8((uint64_t)v6, prime);
    goto LABEL_4;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(a2[3]);
    v2 = *(int8x8_t *)(a1 + 24);
    v66 = prime >= *(_QWORD *)&v2;
    if (prime > *(_QWORD *)&v2)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    v66 = 1;
    if (prime)
      goto LABEL_3;
  }
  if (!v66)
  {
    v67 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (*(_QWORD *)&v2 < 3uLL || (v68 = (uint8x8_t)vcnt_s8(v2), v68.i16[0] = vaddlv_u8(v68), v68.u32[0] > 1uLL))
    {
      v67 = std::__next_prime(v67);
    }
    else
    {
      v69 = 1 << -(char)__clz(v67 - 1);
      if (v67 >= 2)
        v67 = v69;
    }
    if (prime <= v67)
      prime = v67;
    if (prime < *(_QWORD *)&v2)
      goto LABEL_3;
  }
LABEL_4:
  v8 = (uint64_t *)a2[4];
  if (v8)
  {
    v9 = (_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 24);
    do
    {
      v11 = v8[2];
      if (v10)
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          v2 = (int8x8_t)v8[2];
          if (v11 >= v10)
            v2 = (int8x8_t)(v11 % v10);
        }
        else
        {
          v2 = (int8x8_t)((v10 - 1) & v11);
        }
        v13 = *(_QWORD **)(*v6 + 8 * *(_QWORD *)&v2);
        if (v13)
        {
          v14 = (_QWORD *)*v13;
          if (v14)
          {
            if (v12.u32[0] < 2uLL)
            {
              while (1)
              {
                v16 = v14[1];
                if (v16 == v11)
                {
                  if (v14[2] == v11)
                    goto LABEL_64;
                }
                else if ((v16 & (v10 - 1)) != *(_QWORD *)&v2)
                {
                  goto LABEL_26;
                }
                v14 = (_QWORD *)*v14;
                if (!v14)
                  goto LABEL_26;
              }
            }
            do
            {
              v15 = v14[1];
              if (v15 == v11)
              {
                if (v14[2] == v11)
                  goto LABEL_64;
              }
              else
              {
                if (v15 >= v10)
                  v15 %= v10;
                if (v15 != *(_QWORD *)&v2)
                  break;
              }
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
        }
      }
LABEL_26:
      v17 = operator new(0x30uLL);
      *v17 = 0;
      v17[1] = v11;
      v18 = *((_OWORD *)v8 + 2);
      *((_OWORD *)v17 + 1) = *((_OWORD *)v8 + 1);
      *((_OWORD *)v17 + 2) = v18;
      v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
      v20 = *(float *)(a1 + 48);
      if (!v10 || (float)(v20 * (float)v10) < v19)
      {
        v21 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3)
          v21 = 1;
        v22 = v21 | (2 * v10);
        v23 = vcvtps_u32_f32(v19 / v20);
        if (v22 <= v23)
          v24 = v23;
        else
          v24 = v22;
        if (v24 == 1)
        {
          v24 = 2;
        }
        else if ((v24 & (v24 - 1)) != 0)
        {
          v24 = std::__next_prime(v24);
          v10 = *(_QWORD *)(a1 + 24);
        }
        if (v24 > v10)
          goto LABEL_38;
        if (v24 < v10)
        {
          v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
          if (v10 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
          {
            v25 = std::__next_prime(v25);
          }
          else
          {
            v27 = 1 << -(char)__clz(v25 - 1);
            if (v25 >= 2)
              v25 = v27;
          }
          if (v24 <= v25)
            v24 = v25;
          if (v24 < v10)
LABEL_38:
            sub_239A501C8((uint64_t)v6, v24);
        }
        v10 = *(_QWORD *)(a1 + 24);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v11 >= v10)
            v2 = (int8x8_t)(v11 % v10);
          else
            v2 = (int8x8_t)v11;
        }
        else
        {
          v2 = (int8x8_t)((v10 - 1) & v11);
        }
      }
      v28 = *v6;
      v29 = *(_QWORD **)(*v6 + 8 * *(_QWORD *)&v2);
      if (v29)
      {
        *v17 = *v29;
      }
      else
      {
        *v17 = *v9;
        *v9 = v17;
        *(_QWORD *)(v28 + 8 * *(_QWORD *)&v2) = v9;
        if (!*v17)
          goto LABEL_63;
        v30 = *(_QWORD *)(*v17 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v30 >= v10)
            v30 %= v10;
        }
        else
        {
          v30 &= v10 - 1;
        }
        v29 = (_QWORD *)(*v6 + 8 * v30);
      }
      *v29 = v17;
LABEL_63:
      ++*(_QWORD *)(a1 + 40);
LABEL_64:
      v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  v31 = a2[7];
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  *(_QWORD *)(a1 + 56) = v31;
  v32 = *(_OWORD *)(a2 + 17);
  v33 = *(_OWORD *)(a2 + 19);
  v34 = *(_OWORD *)(a2 + 21);
  v35 = a2[23];
  v36 = *(_OWORD *)(a2 + 11);
  v37 = *(_OWORD *)(a2 + 13);
  v38 = *(_OWORD *)(a2 + 15);
  v39 = *(_OWORD *)(a2 + 9);
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 72) = v39;
  *(_OWORD *)(a1 + 120) = v38;
  *(_OWORD *)(a1 + 104) = v37;
  *(_OWORD *)(a1 + 88) = v36;
  *(_QWORD *)(a1 + 184) = v35;
  *(_OWORD *)(a1 + 168) = v34;
  *(_OWORD *)(a1 + 152) = v33;
  *(_OWORD *)(a1 + 136) = v32;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v41 = (_BYTE *)a2[24];
  v40 = (_BYTE *)a2[25];
  v42 = v40 - v41;
  if (v40 != v41)
  {
    if (v42 < 0)
      sub_2394189F8();
    v43 = (char *)operator new(v40 - v41);
    *(_QWORD *)(a1 + 192) = v43;
    *(_QWORD *)(a1 + 200) = v43;
    v44 = &v43[4 * (v42 >> 2)];
    *(_QWORD *)(a1 + 208) = v44;
    memcpy(v43, v41, v42);
    *(_QWORD *)(a1 + 200) = v44;
  }
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v46 = (_BYTE *)a2[27];
  v45 = (_BYTE *)a2[28];
  v47 = v45 - v46;
  if (v45 != v46)
  {
    if (v47 < 0)
      sub_2394189F8();
    v48 = (char *)operator new(v45 - v46);
    *(_QWORD *)(a1 + 216) = v48;
    *(_QWORD *)(a1 + 224) = v48;
    v49 = &v48[8 * (v47 >> 3)];
    *(_QWORD *)(a1 + 232) = v49;
    memcpy(v48, v46, v47);
    *(_QWORD *)(a1 + 224) = v49;
  }
  v50 = a2[30];
  *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
  *(_QWORD *)(a1 + 240) = v50;
  v51 = *((_OWORD *)a2 + 16);
  v52 = *((_OWORD *)a2 + 17);
  *(_DWORD *)(a1 + 288) = *((_DWORD *)a2 + 72);
  *(_OWORD *)(a1 + 256) = v51;
  *(_OWORD *)(a1 + 272) = v52;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  v54 = (_BYTE *)a2[37];
  v53 = (_BYTE *)a2[38];
  v55 = v53 - v54;
  if (v53 != v54)
  {
    if (v55 < 0)
      sub_2394189F8();
    v56 = (char *)operator new(v53 - v54);
    *(_QWORD *)(a1 + 296) = v56;
    *(_QWORD *)(a1 + 304) = v56;
    v57 = &v56[4 * (v55 >> 2)];
    *(_QWORD *)(a1 + 312) = v57;
    memcpy(v56, v54, v55);
    *(_QWORD *)(a1 + 304) = v57;
  }
  *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
  sub_239A61F40(a1 + 328, (__int128 *)(a2 + 41));
  v58 = *(_OWORD *)(a2 + 99);
  v59 = *(_OWORD *)(a2 + 101);
  *(_DWORD *)(a1 + 824) = *((_DWORD *)a2 + 206);
  *(_OWORD *)(a1 + 792) = v58;
  *(_OWORD *)(a1 + 808) = v59;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  v60 = (_BYTE *)a2[104];
  v61 = (_BYTE *)a2[105];
  v62 = v61 - v60;
  if (v61 != v60)
  {
    if (v62 < 0)
      sub_2394189F8();
    v63 = (char *)operator new(v61 - v60);
    *(_QWORD *)(a1 + 832) = v63;
    *(_QWORD *)(a1 + 840) = v63;
    v64 = &v63[4 * (v62 >> 2)];
    *(_QWORD *)(a1 + 848) = v64;
    memcpy(v63, v60, v62);
    *(_QWORD *)(a1 + 840) = v64;
  }
  *(_BYTE *)(a1 + 856) = *((_BYTE *)a2 + 856);
  return a1;
}

void sub_239A60C08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 304) = v6;
    operator delete(v6);
  }
  sub_239A620EC((_QWORD *)(v3 - 120));
  sub_239420950(v1);
  _Unwind_Resume(a1);
}

void sub_239A60C8C()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x239A60CA0);
}

uint64_t sub_239A60CB0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE *v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;
  char *v26;
  _BYTE *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  v10 = *(__int128 *)((char *)a2 + 120);
  v11 = *(__int128 *)((char *)a2 + 136);
  v12 = *((_DWORD *)a2 + 38);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v14 = (_BYTE *)*((_QWORD *)a2 + 20);
  v13 = (_BYTE *)*((_QWORD *)a2 + 21);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      sub_2394189F8();
    v16 = (char *)operator new(v13 - v14);
    *(_QWORD *)(a1 + 160) = v16;
    *(_QWORD *)(a1 + 168) = v16;
    v17 = &v16[4 * (v15 >> 2)];
    *(_QWORD *)(a1 + 176) = v17;
    memcpy(v16, v14, v15);
    *(_QWORD *)(a1 + 168) = v17;
  }
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  v18 = a2[12];
  v19 = a2[13];
  v20 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v19;
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 192) = v18;
  v21 = *(__int128 *)((char *)a2 + 248);
  *(_OWORD *)(a1 + 264) = *(__int128 *)((char *)a2 + 264);
  *(_OWORD *)(a1 + 248) = v21;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v23 = (_BYTE *)*((_QWORD *)a2 + 35);
  v22 = (_BYTE *)*((_QWORD *)a2 + 36);
  v24 = v22 - v23;
  if (v22 != v23)
  {
    if (v24 < 0)
      sub_2394189F8();
    v25 = (char *)operator new(v22 - v23);
    *(_QWORD *)(a1 + 280) = v25;
    *(_QWORD *)(a1 + 288) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 296) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 288) = v26;
  }
  v27 = (_BYTE *)(a1 + 304);
  if (*((char *)a2 + 327) < 0)
  {
    sub_23941A7F8(v27, *((void **)a2 + 38), *((_QWORD *)a2 + 39));
  }
  else
  {
    v28 = a2[19];
    *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
    *(_OWORD *)v27 = v28;
  }
  v29 = *(__int128 *)((char *)a2 + 328);
  v30 = *(__int128 *)((char *)a2 + 344);
  *(_QWORD *)(a1 + 360) = *((_QWORD *)a2 + 45);
  *(_OWORD *)(a1 + 344) = v30;
  *(_OWORD *)(a1 + 328) = v29;
  v31 = a2[23];
  *(_QWORD *)(a1 + 381) = *(_QWORD *)((char *)a2 + 381);
  *(_OWORD *)(a1 + 368) = v31;
  return a1;
}

void sub_239A60E60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 288) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 168) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A60E98(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  _BYTE *v38;
  _BYTE *v39;
  int64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 5);
  v6 = (_BYTE *)*((_QWORD *)a2 + 6);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v9;
    v10 = &v9[4 * (v8 >> 2)];
    *(_QWORD *)(a1 + 56) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 48) = v10;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 8);
  v11 = (_BYTE *)*((_QWORD *)a2 + 9);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_2394189F8();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v14;
    v15 = &v14[4 * (v13 >> 2)];
    *(_QWORD *)(a1 + 80) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 72) = v15;
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v17 = (_BYTE *)*((_QWORD *)a2 + 11);
  v16 = (_BYTE *)*((_QWORD *)a2 + 12);
  v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0)
      sub_2394189F8();
    v19 = (char *)operator new(v16 - v17);
    *(_QWORD *)(a1 + 88) = v19;
    *(_QWORD *)(a1 + 96) = v19;
    v20 = &v19[4 * (v18 >> 2)];
    *(_QWORD *)(a1 + 104) = v20;
    memcpy(v19, v17, v18);
    *(_QWORD *)(a1 + 96) = v20;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v22 = (_BYTE *)*((_QWORD *)a2 + 14);
  v21 = (_BYTE *)*((_QWORD *)a2 + 15);
  v23 = v21 - v22;
  if (v21 != v22)
  {
    if (v23 < 0)
      sub_2394189F8();
    v24 = (char *)operator new(v21 - v22);
    *(_QWORD *)(a1 + 112) = v24;
    *(_QWORD *)(a1 + 120) = v24;
    v25 = &v24[4 * (v23 >> 2)];
    *(_QWORD *)(a1 + 128) = v25;
    memcpy(v24, v22, v23);
    *(_QWORD *)(a1 + 120) = v25;
  }
  v26 = *(__int128 *)((char *)a2 + 136);
  v27 = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *(_OWORD *)(a1 + 152) = v27;
  *(_OWORD *)(a1 + 136) = v26;
  v28 = a2[11];
  v29 = a2[12];
  v30 = *((_DWORD *)a2 + 52);
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 208) = v30;
  *(_OWORD *)(a1 + 192) = v29;
  *(_OWORD *)(a1 + 176) = v28;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v32 = (_BYTE *)*((_QWORD *)a2 + 27);
  v31 = (_BYTE *)*((_QWORD *)a2 + 28);
  v33 = v31 - v32;
  if (v31 != v32)
  {
    if (v33 < 0)
      sub_2394189F8();
    v34 = (char *)operator new(v31 - v32);
    *(_QWORD *)(a1 + 216) = v34;
    *(_QWORD *)(a1 + 224) = v34;
    v35 = &v34[4 * (v33 >> 2)];
    *(_QWORD *)(a1 + 232) = v35;
    memcpy(v34, v32, v33);
    *(_QWORD *)(a1 + 224) = v35;
  }
  *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
  v36 = *(__int128 *)((char *)a2 + 248);
  *(_QWORD *)(a1 + 261) = *(_QWORD *)((char *)a2 + 261);
  *(_OWORD *)(a1 + 248) = v36;
  if (*((char *)a2 + 295) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 272), *((void **)a2 + 34), *((_QWORD *)a2 + 35));
  }
  else
  {
    v37 = a2[17];
    *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
    *(_OWORD *)(a1 + 272) = v37;
  }
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  v39 = (_BYTE *)*((_QWORD *)a2 + 37);
  v38 = (_BYTE *)*((_QWORD *)a2 + 38);
  v40 = v38 - v39;
  if (v38 != v39)
  {
    if (v40 < 0)
      sub_2394189F8();
    v41 = (char *)operator new(v38 - v39);
    *(_QWORD *)(a1 + 296) = v41;
    *(_QWORD *)(a1 + 304) = v41;
    v42 = &v41[8 * (v40 >> 3)];
    *(_QWORD *)(a1 + 312) = v42;
    memcpy(v41, v39, v40);
    *(_QWORD *)(a1 + 304) = v42;
  }
  v43 = a2[20];
  v44 = a2[21];
  *(_WORD *)(a1 + 352) = *((_WORD *)a2 + 176);
  *(_OWORD *)(a1 + 320) = v43;
  *(_OWORD *)(a1 + 336) = v44;
  return a1;
}

void sub_239A61164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  _QWORD *v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v20;

  v20 = *v14;
  if (*v14)
  {
    v10[28] = v20;
    operator delete(v20);
    v15 = *v13;
    if (*v13)
    {
LABEL_11:
      v10[15] = v15;
      operator delete(v15);
      v16 = *v12;
      if (*v12)
      {
LABEL_12:
        v10[12] = v16;
        operator delete(v16);
        v17 = *v11;
        if (!*v11)
        {
LABEL_6:
          v18 = *a10;
          if (*a10)
          {
            v10[6] = v18;
            operator delete(v18);
          }
          _Unwind_Resume(exception_object);
        }
LABEL_5:
        v10[9] = v17;
        operator delete(v17);
        goto LABEL_6;
      }
LABEL_4:
      v17 = *v11;
      if (!*v11)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else
  {
    v15 = *v13;
    if (*v13)
      goto LABEL_11;
  }
  v16 = *v12;
  if (*v12)
    goto LABEL_12;
  goto LABEL_4;
}

void sub_239A61244()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x239A611A4);
  JUMPOUT(0x239A6119CLL);
}

void sub_239A61254()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x239A611B8);
  JUMPOUT(0x239A611B0);
}

char *sub_239A61264(char *__dst, uint64_t a2)
{
  int v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *__dst = 0;
  __dst[1032] = 0;
  if (*(_BYTE *)(a2 + 1032))
  {
    memcpy(__dst, (const void *)a2, 0x158uLL);
    v4 = *(_DWORD *)(a2 + 376);
    v5 = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(__dst + 344) = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(__dst + 360) = v5;
    *((_DWORD *)__dst + 94) = v4;
    *((_QWORD *)__dst + 49) = 0;
    *((_QWORD *)__dst + 50) = 0;
    *((_QWORD *)__dst + 48) = 0;
    v7 = *(_BYTE **)(a2 + 384);
    v6 = *(_BYTE **)(a2 + 392);
    v8 = v6 - v7;
    if (v6 != v7)
    {
      if (v8 < 0)
        sub_2394189F8();
      v9 = (char *)operator new(v6 - v7);
      *((_QWORD *)__dst + 48) = v9;
      *((_QWORD *)__dst + 49) = v9;
      v10 = &v9[4 * (v8 >> 2)];
      *((_QWORD *)__dst + 50) = v10;
      memcpy(v9, v7, v8);
      *((_QWORD *)__dst + 49) = v10;
    }
    __dst[408] = *(_BYTE *)(a2 + 408);
    sub_239973BF0((uint64_t)(__dst + 416), (__int128 *)(a2 + 416));
    __dst[968] = *(_BYTE *)(a2 + 968);
    v11 = *(_OWORD *)(a2 + 976);
    v12 = *(_OWORD *)(a2 + 992);
    v13 = *(_OWORD *)(a2 + 1008);
    *((_QWORD *)__dst + 128) = *(_QWORD *)(a2 + 1024);
    *((_OWORD *)__dst + 62) = v12;
    *((_OWORD *)__dst + 63) = v13;
    *((_OWORD *)__dst + 61) = v11;
    __dst[1032] = 1;
  }
  return __dst;
}

void sub_239A61358(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 392) = v4;
    operator delete(v4);
  }
  if (!*(_BYTE *)(v1 + 1032))
LABEL_10:
    _Unwind_Resume(exception_object);
  if (*(char *)(v1 + 951) < 0)
  {
    operator delete(*(void **)(v1 + 928));
    if ((*(char *)(v1 + 919) & 0x80000000) == 0)
    {
LABEL_6:
      v5 = *(void **)(v1 + 872);
      if (!v5)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 919) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(v1 + 896));
  v5 = *(void **)(v1 + 872);
  if (!v5)
  {
LABEL_8:
    sub_239586EB4(v1 + 472);
    v6 = *(void **)(v1 + 384);
    if (v6)
    {
      *(_QWORD *)(v1 + 392) = v6;
      operator delete(v6);
    }
    goto LABEL_10;
  }
LABEL_7:
  *(_QWORD *)(v1 + 880) = v5;
  operator delete(v5);
  goto LABEL_8;
}

uint64_t sub_239A613DC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  v2 = *(void **)(a1 + 832);
  if (v2)
  {
    *(_QWORD *)(a1 + 840) = v2;
    operator delete(v2);
  }
  if ((*(char *)(a1 + 791) & 0x80000000) == 0)
  {
    v3 = *(void **)(a1 + 376);
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 768));
  v3 = *(void **)(a1 + 376);
  if (v3)
  {
LABEL_5:
    *(_QWORD *)(a1 + 384) = v3;
    operator delete(v3);
  }
LABEL_6:
  if ((*(char *)(a1 + 375) & 0x80000000) == 0)
  {
    v4 = *(void **)(a1 + 296);
    if (!v4)
      goto LABEL_9;
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 352));
  v4 = *(void **)(a1 + 296);
  if (v4)
  {
LABEL_8:
    *(_QWORD *)(a1 + 304) = v4;
    operator delete(v4);
  }
LABEL_9:
  v5 = *(void **)(a1 + 216);
  if (v5)
  {
    *(_QWORD *)(a1 + 224) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 192);
  if (v6)
  {
    *(_QWORD *)(a1 + 200) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD **)(a1 + 32);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

_QWORD *sub_239A614AC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;

  v2 = (void *)a1[69];
  if (v2)
  {
    a1[70] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[66];
  if (v3)
  {
    a1[67] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[63];
  if (v4)
  {
    a1[64] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[53];
  if (v5)
  {
    a1[54] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[44];
  if (v6)
  {
    a1[45] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[35];
  if (v7)
  {
    a1[36] = v7;
    operator delete(v7);
  }
  v8 = (_QWORD *)a1[27];
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)a1[25];
  a1[25] = 0;
  if (v10)
    operator delete(v10);
  v11 = (void *)a1[22];
  if (v11)
  {
    a1[23] = v11;
    operator delete(v11);
  }
  v12 = (_QWORD *)a1[18];
  if (v12)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  v14 = (void *)a1[16];
  a1[16] = 0;
  if (v14)
    operator delete(v14);
  v15 = (_QWORD *)a1[13];
  if (v15)
  {
    do
    {
      v16 = (_QWORD *)*v15;
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
  v17 = (void *)a1[11];
  a1[11] = 0;
  if (v17)
    operator delete(v17);
  v18 = (_QWORD *)a1[8];
  if (v18)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = (void *)a1[6];
  a1[6] = 0;
  if (v20)
    operator delete(v20);
  return a1;
}

uint64_t sub_239A615DC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v2 = (_QWORD *)(a1 + 1680);
  v3 = *(_QWORD **)(a1 + 1704);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 1672);
  if (v5 == (_QWORD *)(a1 + 1648))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 1648);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(void **)(a1 + 1328);
  if (v7)
  {
    *(_QWORD *)(a1 + 1336) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*(void **)(a1 + 1096));
  v8 = *(_QWORD **)(a1 + 1040);
  if (v8 == (_QWORD *)(a1 + 1016))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 1016);
  }
  else
  {
    if (!v8)
      goto LABEL_20;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_20:
  v10 = *(_QWORD **)(a1 + 1008);
  if (v10 == (_QWORD *)(a1 + 984))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 984);
  }
  else
  {
    if (!v10)
      goto LABEL_25;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_25:
  v12 = *(void **)(a1 + 632);
  if (v12)
  {
    *(_QWORD *)(a1 + 640) = v12;
    operator delete(v12);
  }
  v13 = *(_QWORD **)(a1 + 568);
  if (v13)
  {
    do
    {
      v14 = (_QWORD *)*v13;
      operator delete(v13);
      v13 = v14;
    }
    while (v14);
  }
  v15 = *(void **)(a1 + 552);
  *(_QWORD *)(a1 + 552) = 0;
  if (v15)
    operator delete(v15);
  v16 = *(void **)(a1 + 520);
  if (v16)
  {
    *(_QWORD *)(a1 + 528) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 496);
  if (v17)
  {
    *(_QWORD *)(a1 + 504) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 368);
  if (v18)
  {
    *(_QWORD *)(a1 + 376) = v18;
    operator delete(v18);
  }
  sub_239421038(a1 + 328, *(_QWORD **)(a1 + 336));
  sub_239421038(a1 + 304, *(_QWORD **)(a1 + 312));
  v19 = *(void **)(a1 + 280);
  if (v19)
  {
    *(_QWORD *)(a1 + 288) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 176);
  if (v20)
  {
    *(_QWORD *)(a1 + 184) = v20;
    operator delete(v20);
  }
  return a1;
}

uint64_t sub_239A6177C(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  if ((*(char *)(a1 + 455) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 408);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 432));
  v2 = *(void **)(a1 + 408);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 416) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(_QWORD **)(a1 + 328);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 232);
  if (v6)
  {
    *(_QWORD *)(a1 + 240) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD **)(a1 + 152);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v9)
    operator delete(v9);
  sub_239A61F08(*(_QWORD **)(a1 + 120));
  sub_239A61F08(*(_QWORD **)(a1 + 96));
  sub_239A61F08(*(_QWORD **)(a1 + 72));
  sub_239A61F08(*(_QWORD **)(a1 + 48));
  return a1;
}

uint64_t sub_239A61848(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(_QWORD *)(a1 + 440) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 352);
  if (v3)
  {
    *(_QWORD *)(a1 + 360) = v3;
    operator delete(v3);
  }
  sub_239A61EC0(*(_QWORD **)(a1 + 280));
  if (*(char *)(a1 + 263) < 0)
  {
    operator delete(*(void **)(a1 + 240));
    if ((*(char *)(a1 + 239) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 215) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 216));
  if ((*(char *)(a1 + 215) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_15:
    operator delete(*(void **)(a1 + 168));
    v4 = *(void **)(a1 + 24);
    if (!v4)
      return a1;
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 191) < 0)
    goto LABEL_15;
LABEL_9:
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
LABEL_10:
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_239A61904(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *value;
  std::__shared_weak_count *v25;
  CFTypeRef v26;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (!sub_23962C8DC(*(const __CFDictionary **)a1, a2))
  {
    v12 = *(const void **)a3;
    v11 = *(std::__shared_weak_count **)(a3 + 8);
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v26 = v12;
    if (sub_23962BB30(&v26))
    {
      value = (void *)v12;
      v25 = v11;
      if (!v11)
      {
LABEL_29:
        if (v12)
          j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
        goto LABEL_31;
      }
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    else
    {
      value = 0;
      v25 = 0;
      if (!v11)
      {
LABEL_31:
        if (v25)
        {
          v22 = (unint64_t *)&v25->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        return;
      }
    }
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v12 = value;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    goto LABEL_29;
  }
}

void sub_239A61AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239A61ADC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A61B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  sub_2396B3B88(&v63, a3);
  sub_239670E88(&v61, a4);
  sub_2396B3B88(&v59, a5);
  sub_239670E88(&v57, a6);
  sub_239670E88(&v55, a7);
  sub_2396B3B88(&v53, a8);
  sub_239670E88(&v51, a9);
  sub_2396B3B88(&v49, a10);
  sub_2397A0AB4(&v47, a11);
  sub_239A4916C((_QWORD *)a1, a2, (uint64_t)&v63, (uint64_t)&v61, (uint64_t)&v59, (uint64_t)&v57, (uint64_t)&v55, (uint64_t)&v53, (uint64_t)&v51, (uint64_t)&v49, (uint64_t)&v47, *a12);
  v19 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v50;
  if (v50)
  {
    v23 = (unint64_t *)&v50->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v52;
  if (v52)
  {
    v26 = (unint64_t *)&v52->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v54;
  if (v54)
  {
    v29 = (unint64_t *)&v54->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v56;
  if (v56)
  {
    v32 = (unint64_t *)&v56->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v58;
  if (v58)
  {
    v35 = (unint64_t *)&v58->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v60;
  if (v60)
  {
    v38 = (unint64_t *)&v60->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v62;
  if (v62)
  {
    v41 = (unint64_t *)&v62->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v64;
  if (v64)
  {
    v44 = (unint64_t *)&v64->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  *(_QWORD *)a1 = &off_250AF2740;
  *(_DWORD *)(a1 + 168) = 1;
  return a1;
}

void sub_239A61E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;
  uint64_t v18;
  uint64_t v19;
  va_list va4;
  uint64_t v21;
  va_list va5;

  va_start(va5, a5);
  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v16 = va_arg(va4, _QWORD);
  v18 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v19 = va_arg(va5, _QWORD);
  v21 = va_arg(va5, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  sub_239416DA0((uint64_t)va3);
  sub_239416DA0((uint64_t)va4);
  sub_239416DA0((uint64_t)va5);
  sub_239416DA0(v5 - 112);
  sub_239416DA0(v5 - 96);
  sub_239416DA0(v5 - 80);
  _Unwind_Resume(a1);
}

void sub_239A61EA0()
{
  JUMPOUT(0x239A61E78);
}

void sub_239A61EA8()
{
  JUMPOUT(0x239A61E80);
}

void sub_239A61EB0()
{
  JUMPOUT(0x239A61E88);
}

void sub_239A61EB8()
{
  JUMPOUT(0x239A61E90);
}

void sub_239A61EC0(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_239A61EC0(*a1);
    sub_239A61EC0(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void sub_239A61F08(_QWORD *a1)
{
  if (a1)
  {
    sub_239A61F08(*a1);
    sub_239A61F08(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_239A61F40(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  __int128 v12;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 24), *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 6);
  v6 = (_BYTE *)*((_QWORD *)a2 + 7);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v9;
    v10 = &v9[8 * (v8 >> 3)];
    *(_QWORD *)(a1 + 64) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 56) = v10;
  }
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  memcpy((void *)(a1 + 80), a2 + 5, 0x168uLL);
  v11 = (_BYTE *)(a1 + 440);
  if (*((char *)a2 + 463) < 0)
  {
    sub_23941A7F8(v11, *((void **)a2 + 55), *((_QWORD *)a2 + 56));
  }
  else
  {
    v12 = *(__int128 *)((char *)a2 + 440);
    *(_QWORD *)(a1 + 456) = *((_QWORD *)a2 + 57);
    *(_OWORD *)v11 = v12;
  }
  return a1;
}

void sub_239A62050(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A62090(uint64_t a1)
{
  void *v2;

  if ((*(char *)(a1 + 463) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 48);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 440));
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
LABEL_4:
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

_QWORD *sub_239A620EC(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_239A6212C(uint64_t a1, uint64_t a2)
{
  unint64_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  v10 = *(_QWORD **)(a2 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 8);
    do
    {
      v13 = v10[2];
      if (v12)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          prime = v10[2];
          if (v13 >= v12)
            prime = v13 % v12;
        }
        else
        {
          prime = (v12 - 1) & v13;
        }
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
        if (v15)
        {
          v16 = (_QWORD *)*v15;
          if (v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                v18 = v16[1];
                if (v18 == v13)
                {
                  if (v16[2] == v13)
                    goto LABEL_78;
                }
                else if ((v18 & (v12 - 1)) != prime)
                {
                  goto LABEL_40;
                }
                v16 = (_QWORD *)*v16;
                if (!v16)
                  goto LABEL_40;
              }
            }
            do
            {
              v17 = v16[1];
              if (v17 == v13)
              {
                if (v16[2] == v13)
                  goto LABEL_78;
              }
              else
              {
                if (v17 >= v12)
                  v17 %= v12;
                if (v17 != prime)
                  break;
              }
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_40:
      v19 = operator new(0x20uLL);
      *v19 = 0;
      v19[1] = v13;
      *((_OWORD *)v19 + 1) = *((_OWORD *)v10 + 1);
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (!v12 || (float)(v21 * (float)v12) < v20)
      {
        v22 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3)
          v22 = 1;
        v23 = v22 | (2 * v12);
        v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24)
          v25 = v24;
        else
          v25 = v23;
        if (v25 == 1)
        {
          v25 = 2;
        }
        else if ((v25 & (v25 - 1)) != 0)
        {
          v25 = std::__next_prime(v25);
          v12 = *(_QWORD *)(a1 + 8);
        }
        if (v25 > v12)
          goto LABEL_52;
        if (v25 < v12)
        {
          v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
          {
            v26 = std::__next_prime(v26);
          }
          else
          {
            v28 = 1 << -(char)__clz(v26 - 1);
            if (v26 >= 2)
              v26 = v28;
          }
          if (v25 <= v26)
            v25 = v26;
          if (v25 < v12)
LABEL_52:
            sub_239427FE0(a1, v25);
        }
        v12 = *(_QWORD *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v13 >= v12)
            prime = v13 % v12;
          else
            prime = v13;
        }
        else
        {
          prime = (v12 - 1) & v13;
        }
      }
      v29 = *(_QWORD *)a1;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
      if (v30)
      {
        *v19 = *v30;
      }
      else
      {
        *v19 = *v11;
        *v11 = v19;
        *(_QWORD *)(v29 + 8 * prime) = v11;
        if (!*v19)
          goto LABEL_77;
        v31 = *(_QWORD *)(*v19 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v31 >= v12)
            v31 %= v12;
        }
        else
        {
          v31 &= v12 - 1;
        }
        v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
      }
      *v30 = v19;
LABEL_77:
      ++*(_QWORD *)(a1 + 24);
LABEL_78:
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  return a1;
}

void sub_239A624D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A62500(uint64_t a1, uint64_t a2)
{
  unint64_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239A501C8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  v10 = *(uint64_t **)(a2 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 8);
    do
    {
      v13 = v10[2];
      if (v12)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          prime = v10[2];
          if (v13 >= v12)
            prime = v13 % v12;
        }
        else
        {
          prime = (v12 - 1) & v13;
        }
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
        if (v15)
        {
          v16 = (_QWORD *)*v15;
          if (v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                v18 = v16[1];
                if (v18 == v13)
                {
                  if (v16[2] == v13)
                    goto LABEL_78;
                }
                else if ((v18 & (v12 - 1)) != prime)
                {
                  goto LABEL_40;
                }
                v16 = (_QWORD *)*v16;
                if (!v16)
                  goto LABEL_40;
              }
            }
            do
            {
              v17 = v16[1];
              if (v17 == v13)
              {
                if (v16[2] == v13)
                  goto LABEL_78;
              }
              else
              {
                if (v17 >= v12)
                  v17 %= v12;
                if (v17 != prime)
                  break;
              }
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_40:
      v19 = operator new(0x50uLL);
      *v19 = 0;
      v19[1] = v13;
      v20 = *((_OWORD *)v10 + 1);
      v21 = *((_OWORD *)v10 + 2);
      v22 = *((_OWORD *)v10 + 4);
      *((_OWORD *)v19 + 3) = *((_OWORD *)v10 + 3);
      *((_OWORD *)v19 + 4) = v22;
      *((_OWORD *)v19 + 1) = v20;
      *((_OWORD *)v19 + 2) = v21;
      v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v24 = *(float *)(a1 + 32);
      if (!v12 || (float)(v24 * (float)v12) < v23)
      {
        v25 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3)
          v25 = 1;
        v26 = v25 | (2 * v12);
        v27 = vcvtps_u32_f32(v23 / v24);
        if (v26 <= v27)
          v28 = v27;
        else
          v28 = v26;
        if (v28 == 1)
        {
          v28 = 2;
        }
        else if ((v28 & (v28 - 1)) != 0)
        {
          v28 = std::__next_prime(v28);
          v12 = *(_QWORD *)(a1 + 8);
        }
        if (v28 > v12)
          goto LABEL_52;
        if (v28 < v12)
        {
          v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
          {
            v29 = std::__next_prime(v29);
          }
          else
          {
            v31 = 1 << -(char)__clz(v29 - 1);
            if (v29 >= 2)
              v29 = v31;
          }
          if (v28 <= v29)
            v28 = v29;
          if (v28 < v12)
LABEL_52:
            sub_239A501C8(a1, v28);
        }
        v12 = *(_QWORD *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v13 >= v12)
            prime = v13 % v12;
          else
            prime = v13;
        }
        else
        {
          prime = (v12 - 1) & v13;
        }
      }
      v32 = *(_QWORD *)a1;
      v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
      if (v33)
      {
        *v19 = *v33;
      }
      else
      {
        *v19 = *v11;
        *v11 = v19;
        *(_QWORD *)(v32 + 8 * prime) = v11;
        if (!*v19)
          goto LABEL_77;
        v34 = *(_QWORD *)(*v19 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v34 >= v12)
            v34 %= v12;
        }
        else
        {
          v34 &= v12 - 1;
        }
        v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
      }
      *v33 = v19;
LABEL_77:
      ++*(_QWORD *)(a1 + 24);
LABEL_78:
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  return a1;
}

void sub_239A628B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A628DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (_BYTE *)a2[2];
  v5 = (_BYTE *)a2[3];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_2394189F8();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 24) = v9;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v11 = (_BYTE *)a2[5];
  v10 = (_BYTE *)a2[6];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_2394189F8();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 48) = v14;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v16 = (_BYTE *)a2[8];
  v15 = (_BYTE *)a2[9];
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      sub_2394189F8();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 64) = v18;
    *(_QWORD *)(a1 + 72) = v18;
    v19 = &v18[4 * (v17 >> 2)];
    *(_QWORD *)(a1 + 80) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 72) = v19;
  }
  return a1;
}

void sub_239A62A18(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[9] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[6] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[3] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_239A62A78()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x239A62A3CLL);
  JUMPOUT(0x239A62A34);
}

_QWORD *sub_239A62A88(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)a1[6];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[4];
  a1[4] = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_239A62AE0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE *v32;
  _BYTE *v33;
  int64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  v9 = a2[7];
  v10 = a2[8];
  v11 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  v12 = a2[11];
  v13 = a2[12];
  v14 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 240) = a2[15];
  v15 = a2[16];
  v16 = a2[17];
  v17 = a2[18];
  *(_OWORD *)(a1 + 297) = *(__int128 *)((char *)a2 + 297);
  *(_OWORD *)(a1 + 272) = v16;
  *(_OWORD *)(a1 + 288) = v17;
  *(_OWORD *)(a1 + 256) = v15;
  v18 = a1 + 320;
  v19 = (__int128 *)*((_QWORD *)a2 + 43);
  if (v19)
  {
    if (v19 == a2 + 20)
    {
      *(_QWORD *)(a1 + 344) = v18;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 43) + 24))(*((_QWORD *)a2 + 43), v18);
      v20 = *((_QWORD *)a2 + 47);
      if (!v20)
      {
LABEL_10:
        *(_QWORD *)(a1 + 376) = v20;
        goto LABEL_12;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 344) = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v19 + 16))(v19);
      v20 = *((_QWORD *)a2 + 47);
      if (!v20)
        goto LABEL_10;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 344) = 0;
    v20 = *((_QWORD *)a2 + 47);
    if (!v20)
      goto LABEL_10;
  }
  if ((__int128 *)v20 != a2 + 22)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 376) = a1 + 352;
  (*(void (**)(_QWORD))(**((_QWORD **)a2 + 47) + 24))(*((_QWORD *)a2 + 47));
LABEL_12:
  v21 = a2[24];
  *(_OWORD *)(a1 + 396) = *(__int128 *)((char *)a2 + 396);
  *(_OWORD *)(a1 + 384) = v21;
  *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
  *(_DWORD *)(a1 + 424) = *((_DWORD *)a2 + 106);
  if (*((char *)a2 + 455) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 432), *((void **)a2 + 54), *((_QWORD *)a2 + 55));
  }
  else
  {
    v22 = a2[27];
    *(_QWORD *)(a1 + 448) = *((_QWORD *)a2 + 56);
    *(_OWORD *)(a1 + 432) = v22;
  }
  v23 = *(__int128 *)((char *)a2 + 456);
  v24 = *(__int128 *)((char *)a2 + 472);
  *(_OWORD *)(a1 + 481) = *(__int128 *)((char *)a2 + 481);
  *(_OWORD *)(a1 + 456) = v23;
  *(_OWORD *)(a1 + 472) = v24;
  v25 = *(__int128 *)((char *)a2 + 520);
  *(_OWORD *)(a1 + 504) = *(__int128 *)((char *)a2 + 504);
  *(_OWORD *)(a1 + 520) = v25;
  v26 = *(__int128 *)((char *)a2 + 536);
  v27 = *(__int128 *)((char *)a2 + 552);
  v28 = *(__int128 *)((char *)a2 + 584);
  *(_OWORD *)(a1 + 568) = *(__int128 *)((char *)a2 + 568);
  *(_OWORD *)(a1 + 584) = v28;
  *(_OWORD *)(a1 + 536) = v26;
  *(_OWORD *)(a1 + 552) = v27;
  v29 = *(__int128 *)((char *)a2 + 600);
  v30 = *(__int128 *)((char *)a2 + 616);
  v31 = *(__int128 *)((char *)a2 + 632);
  *(_OWORD *)(a1 + 642) = *(__int128 *)((char *)a2 + 642);
  *(_OWORD *)(a1 + 616) = v30;
  *(_OWORD *)(a1 + 632) = v31;
  *(_OWORD *)(a1 + 600) = v29;
  *(_QWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  v32 = (_BYTE *)*((_QWORD *)a2 + 83);
  v33 = (_BYTE *)*((_QWORD *)a2 + 84);
  v34 = v33 - v32;
  if (v33 != v32)
  {
    if (v34 < 0)
      sub_2394189F8();
    v35 = (char *)operator new(v33 - v32);
    *(_QWORD *)(a1 + 664) = v35;
    *(_QWORD *)(a1 + 672) = v35;
    v36 = &v35[8 * (v34 >> 3)];
    *(_QWORD *)(a1 + 680) = v36;
    memcpy(v35, v32, v34);
    *(_QWORD *)(a1 + 672) = v36;
  }
  v37 = a2[43];
  *(_WORD *)(a1 + 704) = *((_WORD *)a2 + 352);
  *(_OWORD *)(a1 + 688) = v37;
  v38 = *(__int128 *)((char *)a2 + 824);
  v40 = *(__int128 *)((char *)a2 + 776);
  v39 = *(__int128 *)((char *)a2 + 792);
  *(_OWORD *)(a1 + 808) = *(__int128 *)((char *)a2 + 808);
  *(_OWORD *)(a1 + 824) = v38;
  *(_OWORD *)(a1 + 776) = v40;
  *(_OWORD *)(a1 + 792) = v39;
  v41 = *(__int128 *)((char *)a2 + 888);
  v43 = *(__int128 *)((char *)a2 + 840);
  v42 = *(__int128 *)((char *)a2 + 856);
  *(_OWORD *)(a1 + 872) = *(__int128 *)((char *)a2 + 872);
  *(_OWORD *)(a1 + 888) = v41;
  *(_OWORD *)(a1 + 840) = v43;
  *(_OWORD *)(a1 + 856) = v42;
  v44 = *(__int128 *)((char *)a2 + 712);
  v45 = *(__int128 *)((char *)a2 + 728);
  v46 = *(__int128 *)((char *)a2 + 760);
  *(_OWORD *)(a1 + 744) = *(__int128 *)((char *)a2 + 744);
  *(_OWORD *)(a1 + 760) = v46;
  *(_OWORD *)(a1 + 712) = v44;
  *(_OWORD *)(a1 + 728) = v45;
  *(_OWORD *)(a1 + 904) = *(__int128 *)((char *)a2 + 904);
  v47 = *(__int128 *)((char *)a2 + 920);
  v48 = *(__int128 *)((char *)a2 + 936);
  v49 = *(__int128 *)((char *)a2 + 952);
  *(_OWORD *)(a1 + 961) = *(__int128 *)((char *)a2 + 961);
  *(_OWORD *)(a1 + 936) = v48;
  *(_OWORD *)(a1 + 952) = v49;
  *(_OWORD *)(a1 + 920) = v47;
  v50 = *((_QWORD *)a2 + 126);
  if (!v50)
    goto LABEL_21;
  if ((__int128 *)v50 != (__int128 *)((char *)a2 + 984))
  {
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
LABEL_21:
    *(_QWORD *)(a1 + 1008) = v50;
    goto LABEL_23;
  }
  *(_QWORD *)(a1 + 1008) = a1 + 984;
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 126) + 24))(*((_QWORD *)a2 + 126), a1 + 984);
LABEL_23:
  v51 = *((_QWORD *)a2 + 130);
  if (v51)
  {
    if ((__int128 *)v51 == (__int128 *)((char *)a2 + 1016))
    {
      *(_QWORD *)(a1 + 1040) = a1 + 1016;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 130) + 24))(*((_QWORD *)a2 + 130));
      goto LABEL_28;
    }
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
  }
  *(_QWORD *)(a1 + 1040) = v51;
LABEL_28:
  v52 = *(__int128 *)((char *)a2 + 1048);
  *(_OWORD *)(a1 + 1060) = *(__int128 *)((char *)a2 + 1060);
  *(_OWORD *)(a1 + 1048) = v52;
  return a1;
}

void sub_239A62E30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_239A62FA8(v1);
  _Unwind_Resume(a1);
}

void sub_239A62EA0()
{
  _QWORD *v0;

  if (*v0)
    JUMPOUT(0x239A62EECLL);
  JUMPOUT(0x239A62E5CLL);
}

_QWORD *sub_239A62F00(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_239A62F40(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 368);
  if (v2)
  {
    *(_QWORD *)(a1 + 376) = v2;
    operator delete(v2);
  }
  sub_239421038(a1 + 328, *(_QWORD **)(a1 + 336));
  sub_239421038(a1 + 304, *(_QWORD **)(a1 + 312));
  v3 = *(void **)(a1 + 280);
  if (v3)
  {
    *(_QWORD *)(a1 + 288) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 176);
  if (v4)
  {
    *(_QWORD *)(a1 + 184) = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_239A62FA8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 14;
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[13];
  if (v5 == a1 + 10)
  {
    v6 = 4;
    v5 = a1 + 10;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

_QWORD *sub_239A63028(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_239A63130(v7, v8, v18, &v17, v6[4]);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6[4];
        v12 = v18[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = v12;
        *v10 = v11;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v14 = *v10;
        }
        else
        {
          v14 = v11;
        }
        result = sub_2394213B8(v7[1], v14);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

_QWORD *sub_239A63130(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t a5)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = a2[4], v6 > a5))
  {
    v7 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      v8 = (_QWORD *)*a2;
      do
      {
        v9 = v8;
        v8 = (_QWORD *)v8[1];
      }
      while (v8);
    }
    else
    {
      v13 = a2;
      do
      {
        v9 = (_QWORD *)v13[2];
        v14 = *v9 == (_QWORD)v13;
        v13 = v9;
      }
      while (v14);
    }
    if (v9[4] < a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v18 <= a5)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_41;
        }
        if (v18 >= a5)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
      goto LABEL_41;
    }
LABEL_20:
    v17 = a1 + 1;
LABEL_41:
    *a3 = v17;
    return v5;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v10 = a2[1];
  if (v10)
  {
    v11 = (_QWORD *)a2[1];
    do
    {
      v12 = v11;
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  else
  {
    v19 = a2;
    do
    {
      v12 = (_QWORD *)v19[2];
      v14 = *v12 == (_QWORD)v19;
      v19 = v12;
    }
    while (!v14);
  }
  if (v12 != v5 && v12[4] <= a5)
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v20;
          v21 = v20[4];
          if (v21 <= a5)
            break;
          v20 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_41;
        }
        if (v21 >= a5)
          break;
        v5 = v17 + 1;
        v20 = (_QWORD *)v17[1];
      }
      while (v20);
      goto LABEL_41;
    }
    goto LABEL_20;
  }
  if (v10)
  {
    *a3 = v12;
    return v12;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

uint64_t *sub_239A632B8(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    while (1)
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        v9 = v5[1];
        v10 = v6;
        if (v7)
        {
          do
          {
            v8 = (uint64_t *)v9;
            v9 = *(_QWORD *)(v9 + 8);
          }
          while (v9);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v10[2];
            v11 = *v8 == (_QWORD)v10;
            v10 = v8;
          }
          while (v11);
        }
        v12 = *((_DWORD *)v8 + 7);
        v13 = *((_DWORD *)v4 + 7);
        if (v12 >= v13 && (v13 < v12 || *((_DWORD *)v8 + 8) >= *((_DWORD *)v4 + 8)))
          break;
      }
      v14 = (uint64_t **)v6;
      v15 = v6;
      if (!v7)
        goto LABEL_23;
      v14 = (uint64_t **)(v8 + 1);
      if (!v8[1])
      {
        v15 = v8;
LABEL_23:
        v19 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v19 + 28) = *(_QWORD *)((char *)v4 + 28);
        *v19 = 0;
        v19[1] = 0;
        v19[2] = (uint64_t)v15;
        *v14 = v19;
        v20 = *(_QWORD *)*v5;
        if (v20)
        {
          *v5 = v20;
          v21 = *v14;
        }
        else
        {
          v21 = v19;
        }
        result = sub_2394213B8((uint64_t *)v5[1], v21);
        ++v5[2];
      }
LABEL_27:
      v22 = (_QWORD *)v4[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v4[2];
          v11 = *v23 == (_QWORD)v4;
          v4 = v23;
        }
        while (!v11);
      }
      v4 = v23;
      if (v23 == a3)
        return result;
    }
    v14 = (uint64_t **)v6;
    v15 = v6;
    if (!v7)
      goto LABEL_23;
    v16 = *((_DWORD *)v4 + 8);
    while (1)
    {
      v15 = v7;
      v17 = *((_DWORD *)v7 + 7);
      if (v13 < v17)
        goto LABEL_17;
      if (v17 < v13)
      {
LABEL_22:
        v14 = (uint64_t **)(v15 + 1);
        v7 = (uint64_t *)v15[1];
        if (!v7)
          goto LABEL_23;
      }
      else
      {
        v18 = *((_DWORD *)v15 + 8);
        if (v16 >= v18)
        {
          if (v18 >= v16)
            goto LABEL_27;
          goto LABEL_22;
        }
LABEL_17:
        v7 = (uint64_t *)*v15;
        v14 = (uint64_t **)v15;
        if (!*v15)
          goto LABEL_23;
      }
    }
  }
  return result;
}

uint64_t sub_239A63464(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 56);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *sub_239A634AC(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    while (1)
    {
      v7 = v4 + 4;
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        v10 = (uint64_t *)v5[1];
        v11 = v6;
        if (v8)
        {
          do
          {
            v9 = v10;
            v10 = (uint64_t *)v10[1];
          }
          while (v10);
        }
        else
        {
          do
          {
            v9 = (uint64_t *)v11[2];
            v12 = *v9 == (_QWORD)v11;
            v11 = v9;
          }
          while (v12);
        }
        v13 = *v7;
        if (v9[4] >= *v7)
          break;
      }
      v14 = (uint64_t **)v6;
      v15 = (uint64_t **)v6;
      if (!v8)
        goto LABEL_19;
      v14 = (uint64_t **)(v9 + 1);
      if (!v9[1])
      {
        v15 = (uint64_t **)v9;
LABEL_19:
        v17 = operator new(0x40uLL);
        v18 = *((_OWORD *)v4 + 3);
        v17[2] = *(_OWORD *)v7;
        v17[3] = v18;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 2) = v15;
        *v14 = (uint64_t *)v17;
        v19 = *(_QWORD *)*v5;
        if (v19)
        {
          *v5 = v19;
          v20 = *v14;
        }
        else
        {
          v20 = (uint64_t *)v17;
        }
        result = sub_2394213B8((uint64_t *)v5[1], v20);
        ++v5[2];
      }
LABEL_23:
      v21 = (_QWORD *)v4[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v4[2];
          v12 = *v22 == (_QWORD)v4;
          v4 = v22;
        }
        while (!v12);
      }
      v4 = v22;
      if (v22 == a3)
        return result;
    }
    v14 = (uint64_t **)v6;
    v15 = (uint64_t **)v6;
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v8;
          v16 = v8[4];
          if (v13 >= v16)
            break;
          v8 = *v15;
          v14 = v15;
          if (!*v15)
            goto LABEL_19;
        }
        if (v16 >= v13)
          goto LABEL_23;
        v14 = v15 + 1;
        v8 = v15[1];
        if (!v8)
          goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_239A63634(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_5:
    operator delete(*(void **)a1);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_5;
  return a1;
}

_QWORD *sub_239A63680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;

  v5 = a2 + 8;
  result = operator new(0x48uLL);
  v7 = result;
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = *(_BYTE **)(a3 + 8);
  result[4] = *(_QWORD *)a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  v9 = *(_BYTE **)(a3 + 16);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    if (v10 < 0)
      sub_2394189F8();
    v11 = (char *)operator new(v9 - v8);
    v7[5] = v11;
    v7[6] = v11;
    v12 = &v11[4 * (v10 >> 2)];
    v7[7] = v12;
    result = memcpy(v11, v8, v10);
    v7[6] = v12;
  }
  *((_DWORD *)v7 + 16) = *(_DWORD *)(a3 + 32);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_239A63730(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 48) = v5;
    operator delete(v5);
  }
  sub_239A63754(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A63754(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[5];
      if (v3)
      {
        v2[6] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_239A637A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  __int128 v11;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)a2[1];
  v5 = (_BYTE *)a2[2];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_2394189F8();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  v10 = (_BYTE *)(a1 + 32);
  if (*((char *)a2 + 55) < 0)
  {
    sub_23941A7F8(v10, (void *)a2[4], a2[5]);
  }
  else
  {
    v11 = *((_OWORD *)a2 + 2);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_OWORD *)v10 = v11;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
  return a1;
}

void sub_239A6385C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239A6387C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250AF2670;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_239A638B8(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250AF2670;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B83E31CLL);
}

char *sub_239A63904(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v2 = (char *)operator new(0x38uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  *(_QWORD *)v2 = &off_250AF2670;
  *((_QWORD *)v2 + 1) = v3;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = 0;
  v5 = *(_BYTE **)(a1 + 24);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0)
      sub_2394189F8();
    v7 = (char *)operator new(v5 - v4);
    *((_QWORD *)v2 + 2) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *((_QWORD *)v2 + 4) = v8;
    memcpy(v7, v4, v6);
    *((_QWORD *)v2 + 3) = v8;
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  return v2;
}

void sub_239A639A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_239A639B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = &off_250AF2670;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_BYTE **)(a1 + 16);
  v5 = *(_BYTE **)(a1 + 24);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_2394189F8();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a2 + 16) = v8;
    *(_QWORD *)(a2 + 24) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a2 + 32) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a2 + 24) = v9;
  }
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_239A63A48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_239A63A64(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_239A63A7C(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void sub_239A63AAC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  int v7;
  unint64_t v8;
  const char *v9;
  CFStringRef v10;
  uint64_t v11;
  CFStringRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  CFStringRef v17;

  if (*(_QWORD *)(a1 + 40))
  {
    v7 = *a2;
    v8 = *a6;
    if (*(char *)(a5 + 23) >= 0)
      v9 = (const char *)a5;
    else
      v9 = *(const char **)a5;
    v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v9, 0x8000100u);
    v11 = *(_QWORD *)(a1 + 16);
    if (v8 >= (*(_QWORD *)(a1 + 24) - v11) >> 3)
    {
      sub_239A444D4((uint64_t)"unknown file", 404, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v12 = v10;
    v13 = *(_QWORD *)(v11 + 8 * v8);
    v14 = *(_QWORD *)(a1 + 8);
    v15 = 0;
    v16 = v7;
    v17 = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(a1 + 40))(v14, v13, &v15, *(_QWORD *)(a1 + 48));
    if (v12)
      CFRelease(v12);
  }
}

uint64_t CPGSessionProcessRequestWithCallbacks(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  char v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  _QWORD v76[3];
  _QWORD *v77;
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  _BYTE v82[24];
  _BYTE *v83;
  _BYTE v84[24];
  _BYTE *v85;
  void *__dst[2];
  void *__p[3];
  __int128 v88;
  void *v89;
  char v90;
  std::__shared_weak_count *v91;
  void *v92;
  char v93;
  char v94;
  __int128 v95;
  uint64_t v96;
  _QWORD v97[3];
  _QWORD *v98;
  _QWORD v99[3];
  _QWORD *v100;
  _QWORD v101[3];
  _QWORD *v102;
  _QWORD v103[3];
  _QWORD *v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  result = 4294967294;
  if (a2 && a3)
  {
    if (!*(_BYTE *)(a2 + 144))
      goto LABEL_20;
    v7 = a1[1];
    v8 = *(unsigned __int8 *)(a2 + 143);
    v9 = *(_QWORD *)(a2 + 128);
    if ((v8 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(a2 + 143);
    else
      v10 = *(_QWORD *)(a2 + 128);
    v11 = *(unsigned __int8 *)(v7 + 247);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(v7 + 232);
    if (v10 == v11)
    {
      v13 = (const void **)(a2 + 120);
      v16 = *(unsigned __int8 **)(v7 + 224);
      v14 = (unsigned __int8 *)(v7 + 224);
      v15 = v16;
      if (v12 >= 0)
        v17 = v14;
      else
        v17 = v15;
      if ((v8 & 0x80) == 0)
      {
        if ((_DWORD)v8)
        {
          while (*(unsigned __int8 *)v13 == *v17)
          {
            v13 = (const void **)((char *)v13 + 1);
            ++v17;
            if (!--v8)
              goto LABEL_20;
          }
          return 4294967269;
        }
LABEL_20:
        v102 = 0;
        v18 = *(_QWORD *)(a3 + 40);
        if (v18)
        {
          v19 = *(_QWORD *)(a3 + 48);
          v20 = operator new(0x28uLL);
          *v20 = &off_250AF27A8;
          v20[1] = a1;
          v20[2] = a2;
          v20[3] = v18;
          v20[4] = v19;
          v102 = v20;
        }
        v100 = 0;
        v21 = *(_QWORD *)(a3 + 56);
        if (v21)
        {
          v22 = *(_QWORD *)(a3 + 64);
          v23 = operator new(0x28uLL);
          *v23 = &off_250AF2858;
          v23[1] = v21;
          v23[2] = v22;
          v23[3] = a1;
          v23[4] = a2;
          v100 = v23;
        }
        v98 = 0;
        if (*(_QWORD *)(a3 + 8))
        {
          __dst[0] = a1;
          __dst[1] = (void *)a2;
          v24 = a1[1];
          if (*(char *)(v24 + 247) < 0)
          {
            sub_23941A7F8(__p, *(void **)(v24 + 224), *(_QWORD *)(v24 + 232));
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)(v24 + 224);
            __p[2] = *(void **)(v24 + 240);
          }
          v88 = *(_OWORD *)(a3 + 8);
          v25 = __p[0];
          *(void **)&v95 = __p[1];
          *(void **)((char *)&v95 + 7) = *(void **)((char *)&__p[1] + 7);
          v26 = HIBYTE(__p[2]);
          memset(__p, 0, sizeof(__p));
          v27 = (char *)operator new(0x40uLL);
          *(_QWORD *)v27 = off_250AF28C0;
          *(_OWORD *)(v27 + 8) = *(_OWORD *)__dst;
          v28 = v95;
          *((_QWORD *)v27 + 3) = v25;
          *((_QWORD *)v27 + 4) = v28;
          *(_QWORD *)(v27 + 39) = *(_QWORD *)((char *)&v95 + 7);
          v27[47] = v26;
          *((_OWORD *)v27 + 3) = v88;
          v104 = v27;
          v29 = v98;
          if (v98 == v97)
          {
            v29 = v103;
            (*(void (**)(_QWORD *, _QWORD *))(v97[0] + 24))(v97, v103);
            (*(void (**)(_QWORD *))(*v98 + 32))(v98);
            v98 = v104;
            v104 = v103;
            v30 = 4;
          }
          else
          {
            v104 = v98;
            v98 = v27;
            if (v29 == v103)
            {
              v30 = 4;
              v29 = v103;
            }
            else
            {
              if (!v29)
                goto LABEL_36;
              v30 = 5;
            }
          }
          (*(void (**)(_QWORD *))(*v29 + 8 * v30))(v29);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
        }
LABEL_36:
        v104 = 0;
        v31 = *(_QWORD *)(a3 + 24);
        if (v31)
        {
          v32 = *(_QWORD *)(a3 + 32);
          v33 = operator new(0x28uLL);
          *v33 = &off_250AF2908;
          v33[1] = a1;
          v33[2] = a2;
          v33[3] = v31;
          v33[4] = v32;
          v104 = v33;
        }
        sub_239A5C364(__dst, (__int128 *)(a2 + 8));
        v95 = 0uLL;
        v96 = 0;
        *(_QWORD *)&v95 = operator new(0x98uLL);
        *((_QWORD *)&v95 + 1) = v95;
        v34 = v95 + 152;
        v96 = v95 + 152;
        sub_239A5C364((_QWORD *)v95, (__int128 *)__dst);
        *((_QWORD *)&v95 + 1) = v34;
        if (v94)
        {
          if (v93 < 0)
            operator delete(v92);
          v35 = v91;
          if (v91)
          {
            p_shared_owners = (unint64_t *)&v91->__shared_owners_;
            do
              v37 = __ldaxr(p_shared_owners);
            while (__stlxr(v37 - 1, p_shared_owners));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
        }
        if (v90)
        {
          v38 = v89;
          if (v89)
          {
            do
            {
              v39 = (_QWORD *)*v38;
              operator delete(v38);
              v38 = v39;
            }
            while (v39);
          }
          v40 = (void *)*((_QWORD *)&v88 + 1);
          *((_QWORD *)&v88 + 1) = 0;
          if (v40)
            operator delete(v40);
        }
        if (SHIBYTE(__p[0]) < 0)
          operator delete(__dst[0]);
        v41 = (unsigned int *)(a2 + 156);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 + 1, v41));
        __dst[0] = &off_250AF2950;
        __dst[1] = (void *)a2;
        __p[1] = __dst;
        v43 = a1[1];
        v44 = (uint64_t)v102;
        if (v102)
        {
          if (v102 == v101)
          {
            v77 = v76;
            (*(void (**)(_QWORD *, _QWORD *))(v101[0] + 24))(v101, v76);
LABEL_60:
            v45 = v78;
            v46 = (uint64_t)v100;
            if (v100)
            {
              if (v100 == v99)
              {
                v79 = v78;
                (*(void (**)(_QWORD *, _BYTE *))(v99[0] + 24))(v99, v78);
LABEL_65:
                v47 = v80;
                v48 = (uint64_t)v98;
                if (v98)
                {
                  if (v98 == v97)
                  {
                    v81 = v80;
                    (*(void (**)(_QWORD *, _BYTE *))(v97[0] + 24))(v97, v80);
LABEL_70:
                    v49 = v82;
                    v50 = (uint64_t)v104;
                    if (v104)
                    {
                      if (v104 == v103)
                      {
                        v83 = v82;
                        (*(void (**)(_QWORD *, _BYTE *))(v103[0] + 24))(v103, v82);
LABEL_75:
                        v51 = v84;
                        v52 = __p[1];
                        if (__p[1])
                        {
                          if (__p[1] == __dst)
                          {
                            v85 = v84;
                            (*((void (**)(void **, _BYTE *))__dst[0] + 3))(__dst, v84);
                            goto LABEL_80;
                          }
                          v52 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)__p[1] + 16))();
                        }
                        v85 = v52;
LABEL_80:
                        sub_239BAD424(&v74, v43, (uint64_t *)&v95, v76);
                        v53 = v75;
                        if (v75)
                        {
                          v54 = (unint64_t *)&v75->__shared_owners_;
                          do
                            v55 = __ldaxr(v54);
                          while (__stlxr(v55 - 1, v54));
                          if (!v55)
                          {
                            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                            std::__shared_weak_count::__release_weak(v53);
                          }
                        }
                        if (v85 == v84)
                        {
                          v56 = 4;
                        }
                        else
                        {
                          if (!v85)
                            goto LABEL_90;
                          v56 = 5;
                          v51 = v85;
                        }
                        (*(void (**)(_QWORD *))(*v51 + 8 * v56))(v51);
LABEL_90:
                        if (v83 == v82)
                        {
                          v57 = 4;
                        }
                        else
                        {
                          if (!v83)
                            goto LABEL_95;
                          v57 = 5;
                          v49 = v83;
                        }
                        (*(void (**)(_QWORD *))(*v49 + 8 * v57))(v49);
LABEL_95:
                        if (v81 == v80)
                        {
                          v58 = 4;
                        }
                        else
                        {
                          if (!v81)
                            goto LABEL_100;
                          v58 = 5;
                          v47 = v81;
                        }
                        (*(void (**)(_QWORD *))(*v47 + 8 * v58))(v47);
LABEL_100:
                        if (v79 == v78)
                        {
                          v59 = 4;
                        }
                        else
                        {
                          if (!v79)
                            goto LABEL_105;
                          v59 = 5;
                          v45 = v79;
                        }
                        (*(void (**)(_QWORD *))(*v45 + 8 * v59))(v45);
LABEL_105:
                        v60 = v77;
                        if (v77 == v76)
                        {
                          v61 = 4;
                          v60 = v76;
                        }
                        else
                        {
                          if (!v77)
                            goto LABEL_110;
                          v61 = 5;
                        }
                        (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_110:
                        v62 = (void **)__p[1];
                        if (__p[1] == __dst)
                        {
                          v63 = 4;
                          v62 = __dst;
                        }
                        else
                        {
                          if (!__p[1])
                            goto LABEL_115;
                          v63 = 5;
                        }
                        (*((void (**)(void))*v62 + v63))();
LABEL_115:
                        v64 = (void *)v95;
                        if ((_QWORD)v95)
                        {
                          v65 = *((_QWORD *)&v95 + 1);
                          if (*((_QWORD *)&v95 + 1) != (_QWORD)v95)
                          {
                            do
                            {
                              v65 -= 152;
                              sub_239A5C550(v65);
                            }
                            while ((void *)v65 != v64);
                            v64 = (void *)v95;
                          }
                          operator delete(v64);
                        }
                        v66 = v104;
                        if (v104 == v103)
                        {
                          v67 = 4;
                          v66 = v103;
                        }
                        else
                        {
                          if (!v104)
                            goto LABEL_125;
                          v67 = 5;
                        }
                        (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_125:
                        v68 = v98;
                        if (v98 == v97)
                        {
                          v69 = 4;
                          v68 = v97;
                        }
                        else
                        {
                          if (!v98)
                            goto LABEL_130;
                          v69 = 5;
                        }
                        (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_130:
                        v70 = v100;
                        if (v100 == v99)
                        {
                          v71 = 4;
                          v70 = v99;
                        }
                        else
                        {
                          if (!v100)
                            goto LABEL_135;
                          v71 = 5;
                        }
                        (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_135:
                        v72 = v102;
                        if (v102 == v101)
                        {
                          v73 = 4;
                          v72 = v101;
                        }
                        else
                        {
                          if (!v102)
                            return 0;
                          v73 = 5;
                        }
                        (*(void (**)(void))(*v72 + 8 * v73))();
                        return 0;
                      }
                      v50 = (*(uint64_t (**)(void))(*v104 + 16))();
                    }
                    v83 = (_BYTE *)v50;
                    goto LABEL_75;
                  }
                  v48 = (*(uint64_t (**)(void))(*v98 + 16))();
                }
                v81 = (_BYTE *)v48;
                goto LABEL_70;
              }
              v46 = (*(uint64_t (**)(void))(*v100 + 16))();
            }
            v79 = (_BYTE *)v46;
            goto LABEL_65;
          }
          v44 = (*(uint64_t (**)(void))(*v102 + 16))();
        }
        v77 = (_QWORD *)v44;
        goto LABEL_60;
      }
      if (!memcmp(*v13, v17, v9))
        goto LABEL_20;
    }
    return 4294967269;
  }
  return result;
}

void sub_239A64314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A64580(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 136))
  {
    if (*(char *)(a1 + 135) < 0)
      operator delete(*(void **)(a1 + 112));
    v2 = *(std::__shared_weak_count **)(a1 + 104);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *(_QWORD **)(a1 + 64);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    v7 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v7)
      operator delete(v7);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239A64634()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A64648(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250AF2950;
  result[1] = v3;
  return result;
}

uint64_t sub_239A6467C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250AF2950;
  a2[1] = v2;
  return result;
}

uint64_t sub_239A64698(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v2 = (unsigned int *)(result + 156);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_239A646CC()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A646E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250AF2908;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_239A64720(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF2908;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_239A64748(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  unsigned int *v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  CFStringRef v100;
  std::__shared_weak_count *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  void *__p;
  void *v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  char v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  char v125;
  void *v126;
  void *v127;
  char v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  char v136;
  char v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  char v140;
  _OWORD v141[4];
  void *v142;
  void *v143;
  char v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  char v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  char v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  _QWORD *v153[8];
  void *v154;
  void *v155;
  char v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  void *v159;
  void *v160;
  void *v161;
  char v162;
  void *v163;
  char v164;
  void *v165;
  char v166;
  void *v167;
  char v168;
  _QWORD *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  char v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  void *v178;
  std::__shared_weak_count *v179;
  char v180;
  char v181;
  uint64_t v182;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = v1;
  v182 = *MEMORY[0x24BDAC8D0];
  v5 = *v2;
  v6 = (const __CFString *)operator new();
  sub_239A4D360((uint64_t)v6, v5);
  v100 = v6;
  sub_239A4D588(&v178, &v100, *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 224);
  v7 = (unsigned int *)v178;
  if (v100)
  {
    v8 = sub_239A4D648((uint64_t)v100);
    MEMORY[0x23B83E31C](v8, 0x10B2C40362D6DEFLL);
  }
  sub_23962C56C(&v177);
  if (!*((_BYTE *)v3 + 1760))
    goto LABEL_74;
  LOBYTE(v157) = 0;
  v174 = 0;
  LOBYTE(v151) = 0;
  v156 = 0;
  LOBYTE(v148) = 0;
  v150 = 0;
  sub_239A5F6A8((uint64_t)&v178, (__int128 *)v3 + 1);
  v181 = 1;
  LOBYTE(v145) = 0;
  v147 = 0;
  LOBYTE(v141[0]) = 0;
  v144 = 0;
  LOBYTE(v138) = 0;
  v140 = 0;
  LOBYTE(v129) = 0;
  v137 = 0;
  LOBYTE(v112) = 0;
  v128 = 0;
  LOBYTE(v100) = 0;
  v111 = 0;
  sub_239BE6A78(&v175, (uint64_t)&v157, (uint64_t)&v151, (uint64_t)&v148, (uint64_t)&v178, (uint64_t)&v145, (uint64_t)v141, (uint64_t)&v138, (uint64_t)&v129, (uint64_t)&v112, (uint64_t)&v100);
  sub_2397A0AB4(&v176, (uint64_t)&v175);
  v9 = v176;
  v176 = 0uLL;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
  v177 = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v111)
  {
    if (v110 < 0)
    {
      operator delete(v109);
      if ((v108 & 0x80000000) == 0)
      {
LABEL_22:
        v19 = __p;
        if (!__p)
          goto LABEL_24;
        goto LABEL_23;
      }
    }
    else if ((v108 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v107);
    v19 = __p;
    if (!__p)
    {
LABEL_24:
      sub_239586EB4((uint64_t)&v104);
      if (v102)
      {
        v103 = v102;
        operator delete(v102);
      }
      goto LABEL_26;
    }
LABEL_23:
    v106 = v19;
    operator delete(v19);
    goto LABEL_24;
  }
LABEL_26:
  if (v128)
  {
    if (v126)
    {
      v127 = v126;
      operator delete(v126);
    }
    if (v125 < 0)
      operator delete(v124);
    if (v122)
    {
      v123 = v122;
      operator delete(v122);
    }
    if (v120)
    {
      v121 = v120;
      operator delete(v120);
    }
    if (v118)
    {
      v119 = v118;
      operator delete(v118);
    }
    if (v116)
    {
      v117 = v116;
      operator delete(v116);
    }
    if (v114)
    {
      v115 = v114;
      operator delete(v114);
    }
  }
  if (v137)
  {
    if (v136 < 0)
      operator delete(v135);
    if (v133)
    {
      v134 = v133;
      operator delete(v133);
    }
    if (v131)
    {
      v132 = v131;
      operator delete(v131);
    }
  }
  if (v140)
    sub_239A613DC((uint64_t)&v138);
  if (v144 && v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (v147)
    sub_239A614AC(&v145);
  if (v181)
    sub_239A615DC((uint64_t)&v178);
  if (v150)
    sub_239A6177C((uint64_t)&v148);
  if (v156)
  {
    if (v154)
    {
      v155 = v154;
      operator delete(v154);
    }
    sub_239421038((uint64_t)v153, v153[1]);
  }
  if (!v174)
    goto LABEL_74;
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  if (v170)
  {
    v171 = v170;
    operator delete(v170);
  }
  sub_239A61EC0(v169);
  if (v168 < 0)
  {
    operator delete(v167);
    if ((v166 & 0x80000000) == 0)
    {
LABEL_70:
      if ((v164 & 0x80000000) == 0)
        goto LABEL_71;
LABEL_194:
      operator delete(v163);
      if ((v162 & 0x80000000) == 0)
      {
LABEL_72:
        v20 = v159;
        if (!v159)
          goto LABEL_74;
        goto LABEL_73;
      }
      goto LABEL_195;
    }
  }
  else if ((v166 & 0x80000000) == 0)
  {
    goto LABEL_70;
  }
  operator delete(v165);
  if (v164 < 0)
    goto LABEL_194;
LABEL_71:
  if ((v162 & 0x80000000) == 0)
    goto LABEL_72;
LABEL_195:
  operator delete(v161);
  v20 = v159;
  if (v159)
  {
LABEL_73:
    v160 = v20;
    operator delete(v20);
  }
LABEL_74:
  sub_23962C714(v141);
  if ((sub_23962C67C((uint64_t)&v177) & 1) != 0)
    goto LABEL_81;
  v180 = 7;
  strcpy((char *)&v178, "reports");
  sub_239629EF4((uint64_t)&v178, &v100);
  sub_239A61904((uint64_t)v141, v100, (uint64_t)&v177);
  v21 = v101;
  if (!v101)
    goto LABEL_79;
  v22 = (unint64_t *)&v101->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_79:
    if ((v180 & 0x80000000) == 0)
      goto LABEL_81;
    goto LABEL_80;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (v180 < 0)
LABEL_80:
    operator delete(v178);
LABEL_81:
  v176 = 0uLL;
  v175 = 0uLL;
  v98 = 0;
  v99 = 0;
  v96 = 0;
  v97 = 0;
  v94 = 0;
  v95 = 0;
  v92 = 0;
  v93 = 0;
  v90 = 0;
  v91 = 0;
  v88 = 0;
  v89 = 0;
  v24 = (unsigned int *)operator new(0xB0uLL, MEMORY[0x24BEDB6B8]);
  if (v24)
  {
    sub_2396B3B88(&v178, (uint64_t)&v176);
    sub_239670E88(&v100, (uint64_t)&v175);
    sub_2396B3B88(&v138, (uint64_t)&v98);
    sub_239670E88(&v148, (uint64_t)&v96);
    sub_239670E88(&v145, (uint64_t)&v94);
    sub_2396B3B88(&v157, (uint64_t)&v92);
    sub_239670E88(&v129, (uint64_t)&v90);
    sub_2396B3B88(&v112, (uint64_t)&v88);
    sub_2397A0AB4(&v151, (uint64_t)v141);
    sub_239A4916C(v24, (uint64_t)v7, (uint64_t)&v178, (uint64_t)&v100, (uint64_t)&v138, (uint64_t)&v148, (uint64_t)&v145, (uint64_t)&v157, (uint64_t)&v129, (uint64_t)&v112, (uint64_t)&v151, 0);
    v25 = v152;
    if (v152)
    {
      v26 = (unint64_t *)&v152->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v113;
    if (v113)
    {
      v29 = (unint64_t *)&v113->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v130;
    if (v130)
    {
      v32 = (unint64_t *)&v130->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v158;
    if (v158)
    {
      v35 = (unint64_t *)&v158->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = v146;
    if (v146)
    {
      v38 = (unint64_t *)&v146->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v149;
    if (v149)
    {
      v41 = (unint64_t *)&v149->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v139;
    if (v139)
    {
      v44 = (unint64_t *)&v139->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v101;
    if (v101)
    {
      v47 = (unint64_t *)&v101->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = v179;
    if (v179)
    {
      v50 = (unint64_t *)&v179->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v24[42] = 1;
    *(_QWORD *)v24 = &off_250AF2720;
  }
  if (v7)
  {
    v52 = v7 + 10;
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  (*(void (**)(_QWORD, _QWORD, unsigned int *, _QWORD))(v4 + 24))(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), v24, *(_QWORD *)(v4 + 32));
  if (v24)
  {
    v55 = v24 + 42;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
  }
  v58 = v89;
  if (v89)
  {
    v59 = (unint64_t *)&v89->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v91;
  if (v91)
  {
    v62 = (unint64_t *)&v91->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v93;
  if (v93)
  {
    v65 = (unint64_t *)&v93->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v95;
  if (v95)
  {
    v68 = (unint64_t *)&v95->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v97;
  if (v97)
  {
    v71 = (unint64_t *)&v97->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v99;
  if (v99)
  {
    v74 = (unint64_t *)&v99->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v141[0] + 1);
  if (*((_QWORD *)&v141[0] + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v141[0] + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
  if (*((_QWORD *)&v177 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
}

void sub_239A65264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;

  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a27->__on_zero_shared)(a27);
      std::__shared_weak_count::__release_weak(a27);
    }
  }
  if (*(char *)(v27 + 23) < 0)
    operator delete((void *)STACK[0x1360]);
  v31 = (std::__shared_weak_count *)STACK[0xB08];
  if (STACK[0xB08])
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)STACK[0x1358];
  if (STACK[0x1358])
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_239A6588C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    STACK[0x1360] = 0;
    __cxa_end_catch();
    JUMPOUT(0x239A647D8);
  }
  JUMPOUT(0x239A65884);
}

void sub_239A658AC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x239A65884);
  JUMPOUT(0x239A65378);
}

void sub_239A658B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B2C40362D6DEFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_239A658DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AF28C0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_239A65918(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AF28C0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x23B83E31CLL);
}

char *sub_239A65964(uint64_t a1)
{
  char *v2;
  _BYTE *v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_250AF28C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = v2 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    sub_23941A7F8(v3, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

void sub_239A659D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_239A659EC(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = off_250AF28C0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_239A65A54(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_239A65A68(void **__p)
{
  if (*((char *)__p + 47) < 0)
    operator delete(__p[3]);
  operator delete(__p);
}

void sub_239A65A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_info;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void *v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  void *v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  CFStringRef __dst[48];
  void *v141;
  void *v142;
  uint64_t v143;
  void *__p;
  void *v145;
  void *v146;
  char v147;
  void *v148;
  char v149;
  char v150;
  _BYTE v151[40];
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  char v163;
  void *v164;
  void *v165;
  char v166;
  _BYTE v167[160];
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  char v173;
  char v174;
  _OWORD v175[54];
  char v176;
  _BYTE v177[72];
  void *v178;
  void *v179;
  char v180;
  _QWORD v181[73];
  char v182;
  _BYTE v183[712];
  char v184;
  _BYTE v185[40];
  _QWORD *v186[8];
  void *v187;
  void *v188;
  char v189;
  _BYTE v190[24];
  void *v191;
  void *v192;
  void *v193;
  char v194;
  void *v195;
  char v196;
  void *v197;
  char v198;
  void *v199;
  char v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  char v206;
  __int128 v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  void *v218;
  std::__shared_weak_count *v219;
  char v220;
  char v221;
  char v222;
  uint64_t v223;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = v1;
  v223 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int **)(v2 + 256);
  if (v5)
  {
    v6 = operator new();
    sub_239A4D360(v6, (uint64_t)v5);
    __dst[0] = (CFStringRef)v6;
    sub_239A4D588(&v218, __dst, v4 + 24);
    v5 = (unsigned int *)v218;
    if (__dst[0])
    {
      v7 = sub_239A4D648((uint64_t)__dst[0]);
      MEMORY[0x23B83E31C](v7, 0x10B2C40362D6DEFLL);
    }
  }
  v217 = 0uLL;
  if (*(_BYTE *)(v3 + 24))
  {
    sub_2396CA1A0(v3, (uint64_t)&v218);
    if (!v220)
    {
      sub_239A444D4((uint64_t)"unknown file", 635, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_2396B3B88(__dst, (uint64_t)&v218);
    v8 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
    v217 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      p_info = (unint64_t *)&__dst[1]->info;
      do
        v14 = __ldaxr(p_info);
      while (__stlxr(v14 - 1, p_info));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v220)
    {
      v15 = v219;
      if (v219)
      {
        v16 = (unint64_t *)&v219->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  v216 = 0uLL;
  if (*(_BYTE *)(v3 + 120) && *(_QWORD *)(v3 + 96) != *(_QWORD *)(v3 + 104))
  {
    sub_2396CA2E0((uint64_t *)(v3 + 96), (uint64_t)&v218);
    if (!v220)
    {
      sub_239A444D4((uint64_t)"unknown file", 644, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_239670E88(__dst, (uint64_t)&v218);
    v18 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
    v216 = v18;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v23 = (unint64_t *)&__dst[1]->info;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v220)
    {
      v25 = v219;
      if (v219)
      {
        v26 = (unint64_t *)&v219->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
  }
  v215 = 0uLL;
  if (*(_BYTE *)(v3 + 152))
  {
    sub_2396CA1A0(v3 + 128, (uint64_t)&v218);
    if (!v220)
    {
      sub_239A444D4((uint64_t)"unknown file", 652, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_2396B3B88(__dst, (uint64_t)&v218);
    v28 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
    v215 = v28;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v33 = (unint64_t *)&__dst[1]->info;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v220)
    {
      v35 = v219;
      if (v219)
      {
        v36 = (unint64_t *)&v219->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
  }
  v214 = 0uLL;
  if (*(_BYTE *)(v3 + 88) && *(_QWORD *)(v3 + 64) != *(_QWORD *)(v3 + 72))
  {
    sub_2396CA2E0((uint64_t *)(v3 + 64), (uint64_t)&v218);
    if (!v220)
    {
      sub_239A444D4((uint64_t)"unknown file", 661, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_239670E88(__dst, (uint64_t)&v218);
    v38 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
    v214 = v38;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v43 = (unint64_t *)&__dst[1]->info;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v220)
    {
      v45 = v219;
      if (v219)
      {
        v46 = (unint64_t *)&v219->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
    }
  }
  v213 = 0uLL;
  if (*(_BYTE *)(v3 + 216) && *(_QWORD *)(v3 + 192) != *(_QWORD *)(v3 + 200))
  {
    sub_2396CA2E0((uint64_t *)(v3 + 192), (uint64_t)&v218);
    if (!v220)
    {
      sub_239A444D4((uint64_t)"unknown file", 671, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_239670E88(__dst, (uint64_t)&v218);
    v48 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v213 + 1);
    v213 = v48;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v53 = (unint64_t *)&__dst[1]->info;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v220)
    {
      v55 = v219;
      if (v219)
      {
        v56 = (unint64_t *)&v219->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
    }
  }
  v212 = 0uLL;
  if (*(_BYTE *)(v3 + 248))
  {
    sub_2396CA1A0(v3 + 224, (uint64_t)&v218);
    if (!v220)
    {
      sub_239A444D4((uint64_t)"unknown file", 679, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_2396B3B88(__dst, (uint64_t)&v218);
    v58 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
    v212 = v58;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v63 = (unint64_t *)&__dst[1]->info;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    if (v220)
    {
      v65 = v219;
      if (v219)
      {
        v66 = (unint64_t *)&v219->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
    }
  }
  v211 = 0uLL;
  if (*(_BYTE *)(v3 + 184) && *(_QWORD *)(v3 + 160) != *(_QWORD *)(v3 + 168))
  {
    sub_2396CA2E0((uint64_t *)(v3 + 160), (uint64_t)&v218);
    if (!v220)
    {
      sub_239A444D4((uint64_t)"unknown file", 689, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_239670E88(__dst, (uint64_t)&v218);
    v68 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v69 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
    v211 = v68;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v73 = (unint64_t *)&__dst[1]->info;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    if (v220)
    {
      v75 = v219;
      if (v219)
      {
        v76 = (unint64_t *)&v219->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
    }
  }
  v210 = 0uLL;
  if (*(_BYTE *)(v3 + 56))
  {
    sub_2396CA1A0(v3 + 32, (uint64_t)&v218);
    if (!v220)
    {
      sub_239A444D4((uint64_t)"unknown file", 697, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_2396B3B88(__dst, (uint64_t)&v218);
    v78 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v79 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
    v210 = v78;
    if (v79)
    {
      v80 = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = (std::__shared_weak_count *)__dst[1];
    if (__dst[1])
    {
      v83 = (unint64_t *)&__dst[1]->info;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    if (v220)
    {
      v85 = v219;
      if (v219)
      {
        v86 = (unint64_t *)&v219->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
    }
  }
  v190[0] = 0;
  v206 = 0;
  if (*(_BYTE *)(v3 + 736))
  {
    sub_239A5E664((uint64_t)v190, v3 + 272);
    v206 = 1;
  }
  v185[0] = 0;
  v189 = 0;
  if (*(_BYTE *)(v3 + 936))
  {
    sub_239A5EB00((uint64_t)v185, (__int128 *)(v3 + 744));
    v189 = 1;
  }
  v183[0] = 0;
  v184 = 0;
  if (*(_BYTE *)(v3 + 1656))
  {
    sub_239A5EC2C((uint64_t)v183, (__int128 *)(v3 + 944));
    v184 = 1;
  }
  LOBYTE(v218) = 0;
  v222 = 0;
  if (*(_BYTE *)(v3 + 3408))
  {
    sub_239A5F6A8((uint64_t)&v218, (__int128 *)(v3 + 1664));
    v222 = 1;
  }
  LOBYTE(v181[0]) = 0;
  v182 = 0;
  if (*(_BYTE *)(v3 + 4000))
  {
    sub_239A5FE90((uint64_t)v181, (__int128 *)(v3 + 3416));
    v182 = 1;
  }
  sub_239A60550((uint64_t)v177, (__int128 *)(v3 + 4008));
  LOBYTE(v175[0]) = 0;
  v176 = 0;
  if (*(_BYTE *)(v3 + 4984))
  {
    sub_239A6064C((uint64_t)v175, (uint64_t *)(v3 + 4120));
    v176 = 1;
  }
  v167[0] = 0;
  v174 = 0;
  if (*(_BYTE *)(v3 + 5384))
  {
    sub_239A60CB0((uint64_t)v167, (__int128 *)(v3 + 4992));
    v174 = 1;
  }
  v151[0] = 0;
  v166 = 0;
  if (*(_BYTE *)(v3 + 5752))
  {
    sub_239A60E98((uint64_t)v151, (__int128 *)(v3 + 5392));
    v166 = 1;
  }
  sub_239A61264((char *)__dst, v3 + 5760);
  sub_239BE6A78(&v207, (uint64_t)v190, (uint64_t)v185, (uint64_t)v183, (uint64_t)&v218, (uint64_t)v181, (uint64_t)v177, (uint64_t)v175, (uint64_t)v167, (uint64_t)v151, (uint64_t)__dst);
  sub_2397A0AB4(&v208, (uint64_t)&v207);
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  if (*((_QWORD *)&v207 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (v150)
  {
    if (v149 < 0)
    {
      operator delete(v148);
      if ((v147 & 0x80000000) == 0)
      {
LABEL_176:
        v91 = __p;
        if (!__p)
          goto LABEL_178;
        goto LABEL_177;
      }
    }
    else if ((v147 & 0x80000000) == 0)
    {
      goto LABEL_176;
    }
    operator delete(v146);
    v91 = __p;
    if (!__p)
    {
LABEL_178:
      sub_239586EB4((uint64_t)&v143);
      if (v141)
      {
        v142 = v141;
        operator delete(v141);
      }
      goto LABEL_180;
    }
LABEL_177:
    v145 = v91;
    operator delete(v91);
    goto LABEL_178;
  }
LABEL_180:
  if (v166)
  {
    if (v164)
    {
      v165 = v164;
      operator delete(v164);
    }
    if (v163 < 0)
      operator delete(v162);
    if (v160)
    {
      v161 = v160;
      operator delete(v160);
    }
    if (v158)
    {
      v159 = v158;
      operator delete(v158);
    }
    if (v156)
    {
      v157 = v156;
      operator delete(v156);
    }
    if (v154)
    {
      v155 = v154;
      operator delete(v154);
    }
    if (v152)
    {
      v153 = v152;
      operator delete(v152);
    }
  }
  if (v174)
  {
    if (v173 < 0)
      operator delete(v172);
    if (v170)
    {
      v171 = v170;
      operator delete(v170);
    }
    if (v168)
    {
      v169 = v168;
      operator delete(v168);
    }
  }
  if (v176)
    sub_239A613DC((uint64_t)v175);
  if (v180 && v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v182)
    sub_239A614AC(v181);
  if (v222)
    sub_239A615DC((uint64_t)&v218);
  if (v184)
    sub_239A6177C((uint64_t)v183);
  if (v189)
  {
    if (v187)
    {
      v188 = v187;
      operator delete(v187);
    }
    sub_239421038((uint64_t)v186, v186[1]);
  }
  if (!v206)
    goto LABEL_228;
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  sub_239A61EC0(v201);
  if (v200 < 0)
  {
    operator delete(v199);
    if ((v198 & 0x80000000) == 0)
    {
LABEL_224:
      if ((v196 & 0x80000000) == 0)
        goto LABEL_225;
LABEL_312:
      operator delete(v195);
      if ((v194 & 0x80000000) == 0)
      {
LABEL_226:
        v92 = v191;
        if (!v191)
          goto LABEL_228;
        goto LABEL_227;
      }
      goto LABEL_313;
    }
  }
  else if ((v198 & 0x80000000) == 0)
  {
    goto LABEL_224;
  }
  operator delete(v197);
  if (v196 < 0)
    goto LABEL_312;
LABEL_225:
  if ((v194 & 0x80000000) == 0)
    goto LABEL_226;
LABEL_313:
  operator delete(v193);
  v92 = v191;
  if (v191)
  {
LABEL_227:
    v192 = v92;
    operator delete(v92);
  }
LABEL_228:
  sub_23962C714(v175);
  if ((sub_23962C67C((uint64_t)&v208) & 1) != 0)
    goto LABEL_235;
  v221 = 7;
  strcpy((char *)&v218, "reports");
  sub_239629EF4((uint64_t)&v218, __dst);
  sub_239A61904((uint64_t)v175, __dst[0], (uint64_t)&v208);
  v93 = (std::__shared_weak_count *)__dst[1];
  if (!__dst[1])
    goto LABEL_233;
  v94 = (unint64_t *)&__dst[1]->info;
  do
    v95 = __ldaxr(v94);
  while (__stlxr(v95 - 1, v94));
  if (v95)
  {
LABEL_233:
    if ((v221 & 0x80000000) == 0)
      goto LABEL_235;
    goto LABEL_234;
  }
  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
  std::__shared_weak_count::__release_weak(v93);
  if (v221 < 0)
LABEL_234:
    operator delete(v218);
LABEL_235:
  v96 = *(_QWORD *)(v3 + 6800);
  v218 = 0;
  if ((v96 & 0xFF00000000) != 0)
  {
    v97 = operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
    if (v97)
    {
      v97[2] = v96;
      v97[3] = 1;
      *(_QWORD *)v97 = &off_250AF2700;
    }
    v218 = v97;
  }
  v98 = (unsigned int *)operator new(0xB0uLL, MEMORY[0x24BEDB6B8]);
  v99 = v98;
  if (v98)
  {
    sub_239A61B1C((uint64_t)v98, (uint64_t)v5, (uint64_t)&v217, (uint64_t)&v216, (uint64_t)&v215, (uint64_t)&v214, (uint64_t)&v213, (uint64_t)&v212, (uint64_t)&v211, (uint64_t)&v210, (uint64_t)v175, (uint64_t *)&v218);
    *(_QWORD *)v99 = &off_250AF2720;
  }
  if (v5)
  {
    v100 = v5 + 10;
    do
    {
      v101 = __ldaxr(v100);
      v102 = v101 - 1;
    }
    while (__stlxr(v102, v100));
    if (!v102)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  v103 = v218;
  if (v218)
  {
    v104 = (unsigned int *)((char *)v218 + 12);
    do
    {
      v105 = __ldaxr(v104);
      v106 = v105 - 1;
    }
    while (__stlxr(v106, v104));
    if (!v106)
      (*(void (**)(void *))(*(_QWORD *)v103 + 8))(v103);
  }
  (*(void (**)(_QWORD, _QWORD, unsigned int *, _QWORD))(v4 + 48))(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), v99, *(_QWORD *)(v4 + 56));
  if (v99)
  {
    v107 = v99 + 42;
    do
    {
      v108 = __ldaxr(v107);
      v109 = v108 - 1;
    }
    while (__stlxr(v109, v107));
    if (!v109)
      (*(void (**)(unsigned int *))(*(_QWORD *)v99 + 8))(v99);
  }
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v175[0] + 1);
  if (*((_QWORD *)&v175[0] + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v175[0] + 1) + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v209;
  if (v209)
  {
    v114 = (unint64_t *)&v209->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
  if (*((_QWORD *)&v210 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
  if (*((_QWORD *)&v211 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
  if (*((_QWORD *)&v212 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = (std::__shared_weak_count *)*((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v213 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
  if (*((_QWORD *)&v214 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v135 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
  if (*((_QWORD *)&v217 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
}

void sub_239A66D2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v2 = (std::__shared_weak_count *)STACK[0x1308];
  if (STACK[0x1308])
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)STACK[0x1318];
  if (STACK[0x1318])
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)STACK[0x1328];
  if (STACK[0x1328])
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)STACK[0x1338];
  if (STACK[0x1338])
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)STACK[0x1348];
  if (STACK[0x1348])
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)STACK[0x1358];
  if (STACK[0x1358])
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)STACK[0x1368];
  if (STACK[0x1368])
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  _Unwind_Resume(a1);
}

void sub_239A67400()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;

  if (*(_BYTE *)(v0 + 1568) && STACK[0x1378])
  {
    v1 = (unint64_t *)(STACK[0x1378] + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    JUMPOUT(0x239A66FB4);
  }
  JUMPOUT(0x239A67238);
}

void sub_239A6742C()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;

  if (*(_BYTE *)(v0 + 1568) && STACK[0x1378])
  {
    v1 = (unint64_t *)(STACK[0x1378] + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    JUMPOUT(0x239A6728CLL);
  }
  JUMPOUT(0x239A672A8);
}

void sub_239A67458()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;

  if (*(_BYTE *)(v0 + 1568) && STACK[0x1378])
  {
    v1 = (unint64_t *)(STACK[0x1378] + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    JUMPOUT(0x239A67334);
  }
  JUMPOUT(0x239A67350);
}

void sub_239A67484()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;

  if (*(_BYTE *)(v0 + 1568) && STACK[0x1378])
  {
    v1 = (unint64_t *)(STACK[0x1378] + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    JUMPOUT(0x239A673A4);
  }
  JUMPOUT(0x239A673C0);
}

void sub_239A674B4()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A674C8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250AF2858;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_239A67508(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF2858;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239A67530(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *a2;
  v4 = (unsigned int *)operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
  v5 = v4;
  if (v4)
  {
    v4[2] = v3;
    v4[3] = 1;
    *(_QWORD *)v4 = &off_250AF28A0;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v4, *(_QWORD *)(a1 + 16));
  if (v5)
  {
    v7 = v5 + 3;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_239A675D0()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A675E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250AF27A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_239A67624(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF27A8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_239A6764C(uint64_t a1, float *a2, uint64_t *a3, int *a4, uint64_t a5)
{
  float v6;
  uint64_t v7;
  int v8;
  const char *v9;
  std::__shared_weak_count_vtbl *v10;
  float *v11;
  std::__shared_weak_count *v12;
  uint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count *v21;
  const void *v22;
  std::__shared_weak_count *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = *a3;
  v8 = *a4;
  if (*(char *)(a5 + 23) >= 0)
    v9 = (const char *)a5;
  else
    v9 = *(const char **)a5;
  v10 = (std::__shared_weak_count_vtbl *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v9, 0x8000100u);
  sub_23962B464(&v20, v10, 0);
  v11 = (float *)operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
  if (v11)
  {
    sub_239A52D10(&v22, v20, v21);
    v11[2] = v6 / 100.0;
    *((_DWORD *)v11 + 3) = v8;
    *((_QWORD *)v11 + 2) = v7;
    sub_239A52D10((_QWORD *)v11 + 3, v22, v23);
    v12 = v23;
    if (v23)
    {
      p_shared_owners = &v23->__shared_owners_;
      do
        v14 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v14 - 1, (unint64_t *)p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    *((_DWORD *)v11 + 10) = 1;
    *(_QWORD *)v11 = &off_250AF27F0;
  }
  v24[0] = &off_250AF2810;
  v24[1] = v11;
  v24[2] = 0;
  v25 = v24;
  (*(void (**)(_QWORD, _QWORD, float *, _QWORD))(a1 + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v11, *(_QWORD *)(a1 + 32));
  if (!v25)
    sub_2394172E0();
  (*(void (**)(_QWORD *))(*v25 + 48))(v25);
  v15 = v25;
  if (v25 == v24)
  {
    v16 = 4;
    v15 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_17;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_17:
  v17 = v21;
  if (v21)
  {
    v18 = &v21->__shared_owners_;
    do
      v19 = __ldaxr((unint64_t *)v18);
    while (__stlxr(v19 - 1, (unint64_t *)v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_239A6782C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a2)
  {
    if (a13)
    {
      p_shared_owners = (unint64_t *)&a13->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
        std::__shared_weak_count::__release_weak(a13);
      }
    }
    MEMORY[0x23B83E310](v13, MEMORY[0x24BEDB6B8]);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x239A67750);
  }
  _Unwind_Resume(exception_object);
}

void sub_239A678A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (!a17)
    sub_2394172E0();
  (*(void (**)(char *))(*(_QWORD *)a17 + 48))(a17);
  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_8;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_8:
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_239A67934(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_239A67940(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x239A67948);
  sub_239416A48(a1);
}

void sub_239A6795C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A67970(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AF2810;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239A679A8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF2810;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239A679C8(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v2 = (unsigned int *)(result + 40);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGSessionResumeProcessingWithCallbacks(_QWORD *a1, uint64_t a2)
{
  CFUUIDRef v4;
  unint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v22[2];
  char v23;
  int v24;
  char v25;
  void *v26;
  void *v27;
  char v28;
  char v29;
  std::__shared_weak_count *v30;
  void *__p;
  char v32;
  char v33;
  char v34;
  char v35;
  std::__shared_weak_count *v36;

  v4 = CFUUIDCreate(0);
  v5 = (unint64_t *)sub_2396293E8((int)&v35, v4);
  sub_2396293EC(v5, (uint64_t)v22);
  v6 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v24 = 2;
  v25 = 0;
  v28 = 0;
  v29 = 0;
  v33 = 0;
  v34 = 0;
  if ((sub_239A94074(*(_QWORD *)(a1[1] + 8), (uint64_t)v22) & 1) != 0)
  {
    v9 = (unsigned int *)operator new(0xA0uLL, MEMORY[0x24BEDB6B8]);
    v10 = v9;
    if (v9)
    {
      sub_239A5C364((_QWORD *)v9 + 1, (__int128 *)v22);
      v10[39] = 1;
      *(_QWORD *)v10 = &off_250AF2998;
    }
    v11 = CPGSessionProcessRequestWithCallbacks(a1, (uint64_t)v10, a2);
    if (v10)
    {
      v12 = v10 + 39;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  else
  {
    v11 = 4294967292;
  }
  if (v33)
  {
    if (v32 < 0)
      operator delete(__p);
    v15 = v30;
    if (v30)
    {
      v16 = (unint64_t *)&v30->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  if (v28)
  {
    v18 = v27;
    if (v27)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        operator delete(v18);
        v18 = v19;
      }
      while (v19);
    }
    v20 = v26;
    v26 = 0;
    if (v20)
      operator delete(v20);
  }
  if (v23 < 0)
    operator delete(v22[0]);
  return v11;
}

void sub_239A67BC4(void *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E310](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x239A67AD4);
}

void sub_239A67BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239A64580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239A67C08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 - 40);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t CPGSessionCancelProcessing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v19[3];
  _QWORD *v20;
  _BYTE v21[24];
  _BYTE *v22;
  _QWORD block[5];
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = operator new(0x20uLL);
  *v6 = &off_250AF29B8;
  v6[1] = a1;
  v7 = v6 + 1;
  v6[2] = a2;
  v6[3] = a3;
  v22 = v6;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (char *)operator new(0x20uLL);
  *(_QWORD *)v9 = &off_250AF29B8;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)v7;
  *((_QWORD *)v9 + 3) = v7[2];
  v20 = v9;
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v8 + 136));
  v10 = *(NSObject **)(v8 + 136);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = sub_239BB0CE8;
  block[3] = &unk_250AF7D58;
  block[4] = v8;
  v11 = v24;
  v12 = (uint64_t)v20;
  if (!v20)
    goto LABEL_4;
  if (v20 != v19)
  {
    v12 = (*(uint64_t (**)(void))(*v20 + 16))();
LABEL_4:
    v25 = (_BYTE *)v12;
    goto LABEL_6;
  }
  v25 = v24;
  (*(void (**)(_QWORD *, _BYTE *))(v19[0] + 24))(v19, v24);
LABEL_6:
  dispatch_sync(v10, block);
  if (v25 == v24)
  {
    v13 = 4;
  }
  else
  {
    if (!v25)
      goto LABEL_11;
    v13 = 5;
    v11 = v25;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v13))(v11);
LABEL_11:
  v14 = v20;
  if (v20 == v19)
  {
    v15 = 4;
    v14 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_16;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
  v16 = v22;
  if (v22 == v21)
  {
    v17 = 4;
    v16 = v21;
    goto LABEL_20;
  }
  if (v22)
  {
    v17 = 5;
LABEL_20:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  return 0;
}

void sub_239A67E24(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(a1);
}

void sub_239A67EA0()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A67EB4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250AF29B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_239A67EF4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF29B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_239A67F1C(_QWORD *result)
{
  uint64_t (*v1)(_QWORD, _QWORD, _QWORD, _QWORD);

  v1 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))result[2];
  if (v1)
    return (_QWORD *)v1(result[1], 0, 0, result[3]);
  return result;
}

double CPGSessionGetEstimatedProcessingTime(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v25[2];
  char v26;
  void *v27;
  void *v28;
  char v29;
  std::__shared_weak_count *v30;
  void *__p;
  char v32;
  char v33;
  uint64_t v34[2];
  _QWORD *v35;

  v2 = -1.0;
  if (a1 && a2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    sub_239A5C364(v25, (__int128 *)(a2 + 8));
    v4 = *(_QWORD **)(v3 + 24);
    v5 = *(_QWORD *)(v3 + 8);
    v6 = v4[10];
    v7 = *(_QWORD *)(v6 + 176);
    v8 = *(_QWORD *)(v6 + 184);
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD **)(v7 + 104);
        if (*(_QWORD *)(v7 + 112) - (_QWORD)v10 == 16)
          v9 += v10[1] * *v10;
        v7 += 352;
      }
      while (v7 != v8);
      if (v9)
        goto LABEL_12;
    }
    v2 = 0.0;
    if (*(_BYTE *)(v5 + 4))
    {
      if (!*(_BYTE *)(v5 + 2304))
      {
        sub_239A444D4((uint64_t)"unknown file", 391, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v9 = *(_QWORD *)(v5 + 2256);
      if (v9)
      {
LABEL_12:
        v11 = v4[52];
        v12 = v4[54];
        if (v11)
          v13 = v12 == 0;
        else
          v13 = 1;
        v14 = !v13;
        sub_239B2A180((uint64_t)v34, v14);
        v2 = sub_239B2A814((uint64_t)v25, v9, v34);
        v15 = v35;
        if (v35)
        {
          do
          {
            v16 = (_QWORD *)*v15;
            operator delete(v15);
            v15 = v16;
          }
          while (v16);
        }
        v17 = (void *)v34[0];
        v34[0] = 0;
        if (v17)
          operator delete(v17);
      }
    }
    if (v33)
    {
      if (v32 < 0)
        operator delete(__p);
      v18 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    if (v29)
    {
      v21 = v28;
      if (v28)
      {
        do
        {
          v22 = (_QWORD *)*v21;
          operator delete(v21);
          v21 = v22;
        }
        while (v22);
      }
      v23 = v27;
      v27 = 0;
      if (v23)
        operator delete(v23);
    }
    if (v26 < 0)
      operator delete(v25[0]);
  }
  return v2;
}

void sub_239A68104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;

  v11 = *(_QWORD **)(v9 - 56);
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = *(void **)(v9 - 72);
  *(_QWORD *)(v9 - 72) = 0;
  if (v13)
    operator delete(v13);
  sub_239A64580((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double CPGSessionGetEstimatedProcessingTimeByNumberOfPixels(unint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v16[2];
  char v17;
  void *v18;
  void *v19;
  char v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  char v24;
  uint64_t v25[2];
  _QWORD *v26;

  v3 = -1.0;
  if (!a2 || !a3)
    return v3;
  sub_239A5C364(v16, (__int128 *)(a3 + 8));
  if (a1)
  {
    sub_239B2A180((uint64_t)v25, *(unsigned __int8 *)(a2 + 32));
    v3 = sub_239B2A814((uint64_t)v16, a1, v25);
    v6 = v26;
    if (v26)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    v8 = (void *)v25[0];
    v25[0] = 0;
    if (v8)
      operator delete(v8);
    if (!v24)
      goto LABEL_18;
    goto LABEL_11;
  }
  v3 = 0.0;
  if (v24)
  {
LABEL_11:
    if (v23 < 0)
      operator delete(__p);
    v9 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
LABEL_18:
  if (v20)
  {
    v12 = v19;
    if (v19)
    {
      do
      {
        v13 = (_QWORD *)*v12;
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
    v14 = v18;
    v18 = 0;
    if (v14)
      operator delete(v14);
  }
  if (v17 < 0)
    operator delete(v16[0]);
  return v3;
}

void sub_239A68280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_239420950(v9 - 72);
  sub_239A64580((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CPGSessionUpdateSampleCameraTransforms(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD block[7];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v2 = 4294967294;
  if (a1)
  {
    if (a2)
    {
      v4 = a2 + 12;
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 176))
        {
          dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v6 + 136));
          dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v6 + 144));
          dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v6 + 152));
          dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v6 + 160));
          v13 = 0;
          v14 = &v13;
          v15 = 0x2000000000;
          v16 = -1;
          v8 = *(NSObject **)(v6 + 136);
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 0x40000000;
          block[2] = sub_239BAB384;
          block[3] = &unk_250AF7BA8;
          block[5] = v6;
          block[6] = a2;
          block[4] = &v13;
          dispatch_sync(v8, block);
          v2 = *((unsigned int *)v14 + 6);
          _Block_object_dispose(&v13, 8);
        }
        else
        {
          v2 = 4294967292;
        }
      }
      else
      {
        v2 = 4294967292;
      }
      do
      {
        v9 = __ldaxr(v4);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v4));
      if (!v10)
        (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 8))(a2);
    }
  }
  return v2;
}

uint64_t CPGSessionUpdateBoundingBoxBySegmentID(uint64_t a1, int a2, unsigned int *a3)
{
  uint64_t v3;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD v14[7];
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v3 = 4294967294;
  if ((a2 & 0x80000000) == 0)
  {
    if (a1)
    {
      if (a3)
      {
        v6 = a3 + 66;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          if (*(_QWORD *)(v9 + 80))
          {
            dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v8 + 136));
            dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v8 + 144));
            dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v8 + 152));
            dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(v8 + 160));
            v16 = 0;
            v17 = &v16;
            v18 = 0x2000000000;
            v19 = -1;
            v10 = *(NSObject **)(v8 + 136);
            v14[0] = MEMORY[0x24BDAC760];
            v14[1] = 0x40000000;
            v14[2] = sub_239BABE98;
            v14[3] = &unk_250AF7BF8;
            v15 = a2;
            v14[5] = v8;
            v14[6] = a3 + 2;
            v14[4] = &v16;
            dispatch_sync(v10, v14);
            v3 = *((unsigned int *)v17 + 6);
            _Block_object_dispose(&v16, 8);
          }
          else
          {
            v3 = 4294967292;
          }
        }
        else
        {
          v3 = 4294967292;
        }
        do
        {
          v11 = __ldaxr(v6);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v6));
        if (!v12)
          (*(void (**)(unsigned int *))(*(_QWORD *)a3 + 8))(a3);
      }
    }
  }
  return v3;
}

uint64_t CPGSessionCopySampleImage(uint64_t a1, uint64_t a2, const __CFURL *a3)
{
  dispatch_queue_t *v5;
  NSObject *v6;
  uint64_t v7;
  void *__p[2];
  char v10;
  char v11;
  _QWORD block[8];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  if (!a3)
    return 4294967294;
  sub_2396CA024(a3, (uint64_t)__p);
  if (!v11)
    return 4294967294;
  v5 = *(dispatch_queue_t **)(a1 + 8);
  dispatch_assert_queue_not_V2(v5[17]);
  dispatch_assert_queue_not_V2(v5[18]);
  dispatch_assert_queue_not_V2(v5[19]);
  dispatch_assert_queue_not_V2(v5[20]);
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = -1;
  v6 = v5[17];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_239BAC03C;
  block[3] = &unk_250AF7C48;
  block[4] = &v13;
  block[5] = v5;
  block[6] = a2;
  block[7] = __p;
  dispatch_sync(v6, block);
  v7 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  if (v11 && v10 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_239A68608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A6862C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;

  v2 = (_QWORD *)(a1 + 88);
  v3 = (_QWORD *)(a1 + 120);
  v4 = *(_QWORD **)(a1 + 144);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD **)(a1 + 112);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *(void **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = v8;
    operator delete(v8);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_239A686CC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;

  v2 = (_QWORD *)(a1 + 88);
  v3 = (_QWORD *)(a1 + 120);
  v4 = *(_QWORD **)(a1 + 144);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD **)(a1 + 112);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *(void **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = v8;
    operator delete(v8);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x23B83E31CLL);
}

int64x2_t **CPGSessionOptionsCreate()
{
  int64x2_t **v0;
  int64x2_t **v1;

  v0 = (int64x2_t **)operator new(0xC8uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    *((_OWORD *)v0 + 1) = 0u;
    *((_OWORD *)v0 + 2) = 0u;
    v0[24] = 0;
    *((_OWORD *)v0 + 10) = 0u;
    *((_OWORD *)v0 + 11) = 0u;
    *((_OWORD *)v0 + 8) = 0u;
    *((_OWORD *)v0 + 9) = 0u;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 7) = 0u;
    *((_OWORD *)v0 + 4) = 0u;
    *((_OWORD *)v0 + 5) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *(_OWORD *)v0 = 0u;
    *((_DWORD *)v0 + 9) = 2;
    *((_BYTE *)v0 + 40) = 1;
    *((_BYTE *)v0 + 42) = 1;
    sub_239A688A8(v0 + 6);
    v1[9] = (int64x2_t *)(int)std::thread::hardware_concurrency();
    v1[10] = (int64x2_t *)0x6300000000;
    v1[14] = 0;
    v1[19] = 0;
    v1[20] = 0;
    v1[18] = 0;
    v1[21] = (int64x2_t *)0x200000001;
    v1[22] = (int64x2_t *)65798;
    v1[23] = (int64x2_t *)10;
    *((_DWORD *)v1 + 48) = 1;
    *v1 = (int64x2_t *)off_250AF2A00;
  }
  return v1;
}

void sub_239A68850(void *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  MEMORY[0x23B83E310](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x239A68840);
}

void sub_239A688A8(int64x2_t **a1)
{
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  int64x2_t *v10;
  int64x2_t *v11;
  uint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  int64x2_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  sub_2397A98A4(&v19);
  v3 = v19;
  v2 = v20;
  if (v19)
  {
    if (v20 == v19)
    {
      v8 = v20;
    }
    else
    {
      v4 = v20;
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v8 = v19;
    }
    v20 = v3;
    operator delete(v8);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v2 != v3)
  {
    v9 = v2 - v3;
    if ((v9 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v10 = (int64x2_t *)operator new(v9 >> 1);
    *a1 = v10;
    a1[2] = (int64x2_t *)((char *)v10 + 8 * ((uint64_t)v9 >> 4));
    bzero(v10, v9 >> 1);
    v11 = (int64x2_t *)((char *)v10 + (v9 >> 1));
    a1[1] = v11;
    if ((v9 >> 1) - 8 < 0x18)
    {
      v12 = 0;
      goto LABEL_21;
    }
    v13 = (((v9 >> 1) - 8) >> 3) + 1;
    v12 = v13 & 0x3FFFFFFFFFFFFFFCLL;
    v14 = (int64x2_t)xmmword_239EC6860;
    v15 = v10 + 1;
    v16 = vdupq_n_s64(2uLL);
    v17 = vdupq_n_s64(4uLL);
    v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v15[-1] = v14;
      *v15 = vaddq_s64(v14, v16);
      v14 = vaddq_s64(v14, v17);
      v15 += 2;
      v18 -= 4;
    }
    while (v18);
    if (v13 != v12)
    {
      v10 = (int64x2_t *)((char *)v10 + 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL));
      do
      {
LABEL_21:
        v10->i64[0] = v12;
        v10 = (int64x2_t *)((char *)v10 + 8);
        ++v12;
      }
      while (v10 != v11);
    }
  }
}

void sub_239A68A24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CPGSessionOptionsRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 192);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGSessionOptionsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 192);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGSessionOptionsSetWorkingDirectory(uint64_t a1, const __CFURL *a2)
{
  uint64_t result;
  std::string __p;
  char v5;

  if (!a2)
    return 4294967294;
  sub_2396CA024(a2, (uint64_t)&__p);
  if (!v5)
    return 4294967294;
  std::string::operator=((std::string *)(a1 + 8), &__p);
  result = 0;
  if (v5)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      return 0;
    }
  }
  return result;
}

void sub_239A68AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CPGSessionOptionsSetAutoMaskingEnabled(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 32) = a2;
  return 0;
}

uint64_t CPGSessionOptionsSetOutOfCoreEnabled(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 40) = a2;
  return 0;
}

uint64_t CPGSessionOptionsSetSnapshotEnabled(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 41) = a2;
  return 0;
}

uint64_t CPGSessionOptionsSetSampleImageAutoSavingEnabled(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 42) = a2;
  return 0;
}

uint64_t CPGSessionOptionsSetGPUs(uint64_t a1, const __CFArray *a2)
{
  CFTypeID TypeID;
  const __CFArray *v4;
  unint64_t Count;
  unint64_t v6;
  char *v7;
  CFIndex v8;
  void *v9;
  const __CFNumber *ValueAtIndex;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v32;
  char *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  char *v64;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  void *__p[2];
  void *v74[2];
  int v75;
  void *v76;
  char *v77;
  void *v78;
  unint64_t *v79;
  unint64_t *v80;
  const __CFArray *v81;
  char *v82;
  unint64_t v83;

  if (!a2)
    return 4294967294;
  v81 = a2;
  TypeID = j__CFArrayGetTypeID();
  if (!sub_239628DA8((CFTypeRef *)&v81, TypeID))
    return 4294967294;
  v4 = v81;
  Count = j__CFArrayGetCount(v81);
  if ((Count & 0x8000000000000000) != 0)
    return 4294967294;
  v6 = Count;
  __p[0] = 0;
  __p[1] = 0;
  v74[0] = 0;
  if (!Count)
    return 4294967294;
  if (Count >> 61)
    sub_2394189F8();
  v7 = (char *)operator new(8 * Count);
  __p[0] = v7;
  __p[1] = v7;
  v74[0] = &v7[8 * v6];
  if (!v4)
  {
LABEL_33:
    __p[1] = v7;
    operator delete(v7);
    return 4294967294;
  }
  v71 = a1;
  v8 = 0;
  do
  {
    if (j__CFArrayGetCount(v4) <= v8
      || (ValueAtIndex = (const __CFNumber *)j__CFArrayGetValueAtIndex(v4, v8), v11 = sub_239629AD4(ValueAtIndex), !v12))
    {
      v7 = (char *)__p[0];
      if (!__p[0])
        return 4294967294;
      goto LABEL_33;
    }
    v13 = v11;
    v14 = (char *)__p[1];
    if (__p[1] < v74[0])
    {
      *(_QWORD *)__p[1] = v11;
      v9 = v14 + 8;
    }
    else
    {
      v15 = (char *)__p[0];
      v16 = (char *)__p[1] - (char *)__p[0];
      v17 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        sub_2394189F8();
      v19 = (char *)v74[0] - (char *)__p[0];
      if (((char *)v74[0] - (char *)__p[0]) >> 2 > v18)
        v18 = v19 >> 2;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 61)
          sub_239418A80();
        v21 = operator new(8 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = (uint64_t *)&v21[8 * v17];
      *v22 = v13;
      v9 = v22 + 1;
      if (v14 != v15)
      {
        v23 = v14 - 8 - v15;
        if (v23 < 0x58)
          goto LABEL_116;
        if ((unint64_t)(v14 - &v21[v16]) < 0x20)
          goto LABEL_116;
        v24 = (v23 >> 3) + 1;
        v25 = &v21[8 * v17 - 16];
        v26 = v14 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v22 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v14 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_116:
          do
          {
            v29 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v22 = v29;
          }
          while (v14 != v15);
        }
      }
      __p[0] = v22;
      __p[1] = v9;
      v74[0] = &v21[8 * v20];
      if (v15)
        operator delete(v15);
    }
    __p[1] = v9;
    ++v8;
  }
  while (v8 != v6);
  if (__p[0] == v9)
  {
    v30 = 4294967294;
    goto LABEL_107;
  }
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v32 = (_BYTE *)v9 - (char *)__p[0];
  v70 = __p[0];
  if ((int64_t)((uint64_t)v9 - (unint64_t)__p[0]) < 0)
    sub_2394189F8();
  v33 = (char *)operator new((size_t)v9 - (unint64_t)__p[0]);
  v34 = (unint64_t *)&v33[8 * (v32 >> 3)];
  v78 = v33;
  v80 = v34;
  memcpy(v33, __p[0], v32);
  v79 = v34;
  v69 = v33;
  sub_2397A98A4(&v76);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v74 = 0u;
  v75 = 1065353216;
  v35 = (unint64_t *)v33;
  do
  {
    v36 = *v35;
    v72 = v36;
    v37 = (v77 - (_BYTE *)v76) >> 4;
    if (v36 >= v37)
      break;
    if (__p[1])
    {
      v38 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v38.i16[0] = vaddlv_u8(v38);
      if (v38.u32[0] > 1uLL)
      {
        v39 = v36;
        if ((void *)v36 >= __p[1])
          v39 = v36 % (unint64_t)__p[1];
      }
      else
      {
        v39 = ((unint64_t)__p[1] - 1) & v36;
      }
      v40 = (_QWORD *)*((_QWORD *)__p[0] + v39);
      if (v40)
      {
        v41 = (_QWORD *)*v40;
        if (v41)
        {
          if (v38.u32[0] < 2uLL)
          {
            while (1)
            {
              v43 = v41[1];
              if (v43 == v36)
              {
                if (v41[2] == v36)
                  goto LABEL_82;
              }
              else if ((v43 & ((uint64_t)__p[1] - 1)) != v39)
              {
                goto LABEL_60;
              }
              v41 = (_QWORD *)*v41;
              if (!v41)
                goto LABEL_60;
            }
          }
          do
          {
            v42 = v41[1];
            if (v42 == v36)
            {
              if (v41[2] == v36)
                goto LABEL_82;
            }
            else
            {
              if ((void *)v42 >= __p[1])
                v42 %= (unint64_t)__p[1];
              if (v42 != v39)
                break;
            }
            v41 = (_QWORD *)*v41;
          }
          while (v41);
        }
      }
    }
LABEL_60:
    v44 = v82;
    if ((unint64_t)v82 >= v83)
    {
      v46 = (char *)v81;
      v47 = (v82 - (char *)v81) >> 3;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        sub_2394189F8();
      v49 = v83 - (_QWORD)v81;
      if ((uint64_t)(v83 - (_QWORD)v81) >> 2 > v48)
        v48 = v49 >> 2;
      v50 = (unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v48;
      if (v50)
      {
        if (v50 >> 61)
          sub_239418A80();
        v51 = operator new(8 * v50);
      }
      else
      {
        v51 = 0;
      }
      v52 = &v51[8 * v47];
      *(_QWORD *)v52 = v36;
      v45 = v52 + 8;
      if (v44 != v46)
      {
        v53 = v44 - 8 - v46;
        if (v53 < 0x58)
          goto LABEL_117;
        if ((unint64_t)(v46 - v51) < 0x20)
          goto LABEL_117;
        v54 = (v53 >> 3) + 1;
        v55 = &v51[8 * v47 - 16];
        v56 = v44 - 16;
        v57 = v54 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v58 = *(_OWORD *)v56;
          *(v55 - 1) = *((_OWORD *)v56 - 1);
          *v55 = v58;
          v55 -= 2;
          v56 -= 32;
          v57 -= 4;
        }
        while (v57);
        v52 -= 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
        v44 -= 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
        if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_117:
          do
          {
            v59 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v52 - 1) = v59;
            v52 -= 8;
          }
          while (v44 != v46);
        }
      }
      v81 = (const __CFArray *)v52;
      v82 = v45;
      v83 = (unint64_t)&v51[8 * v50];
      if (v46)
        operator delete(v46);
    }
    else
    {
      *(_QWORD *)v82 = v36;
      v45 = v44 + 8;
    }
    v82 = v45;
    sub_239465800((uint64_t)__p, &v72, &v72);
LABEL_82:
    ++v35;
  }
  while (v35 != v34);
  v60 = v74[0];
  if (v74[0])
  {
    do
    {
      v61 = (_QWORD *)*v60;
      operator delete(v60);
      v60 = v61;
    }
    while (v61);
  }
  v62 = __p[0];
  __p[0] = 0;
  v63 = v69;
  if (v62)
    operator delete(v62);
  v64 = (char *)v76;
  if (!v76)
    goto LABEL_98;
  v65 = v77;
  if (v77 == v76)
  {
    v77 = (char *)v76;
    operator delete(v76);
    goto LABEL_98;
  }
  do
  {
    v66 = (std::__shared_weak_count *)*((_QWORD *)v65 - 1);
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(p_shared_owners);
      while (__stlxr(v68 - 1, p_shared_owners));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v65 -= 16;
  }
  while (v65 != v64);
  v63 = v78;
  v77 = v64;
  operator delete(v76);
  if (v63)
LABEL_98:
    operator delete(v63);
  if (v36 >= v37)
  {
    v30 = 4294967294;
    v9 = v70;
  }
  else
  {
    v9 = v70;
    if ((const __CFArray **)(v71 + 48) != &v81)
      sub_23945D3D0((_QWORD *)(v71 + 48), (char *)v81, v82, (v82 - (char *)v81) >> 3);
    v30 = 0;
  }
  if (v81)
  {
    v82 = (char *)v81;
    operator delete(v81);
  }
  if (v9)
LABEL_107:
    operator delete(v9);
  return v30;
}

void sub_239A69158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(_QWORD *)(v22 - 96) = v24;
    operator delete(v24);
    if (!__p)
      goto LABEL_6;
  }
  else if (!__p)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  goto LABEL_6;
}

uint64_t CPGSessionOptionsSetNumberOfThreads(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (!a2)
    return 4294967294;
  result = 0;
  *(_QWORD *)(a1 + 72) = a2;
  return result;
}

uint64_t CPGSessionOptionsSetReconstructionPowerSetting(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 > 1)
    return 4294967294;
  result = 0;
  *(_DWORD *)(a1 + 80) = a2;
  return result;
}

uint64_t CPGSessionOptionsSetAsyncIOThreadQoS(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 >= 3 && a2 != 99)
    return 4294967294;
  result = 0;
  *(_DWORD *)(a1 + 84) = a2;
  return result;
}

__n128 CPGSessionOptionsSetSfmOptions(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 result;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = (_QWORD *)(a1 + 88);
    v5 = *(_QWORD *)(a2 + 32);
    if (v5)
    {
      if (v5 == a2 + 8)
      {
        v13 = v12;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a2 + 8) + 24))(a2 + 8, v12);
      }
      else
      {
        v13 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      }
    }
    else
    {
      v13 = 0;
    }
    sub_239A69400(v12, v4);
    v6 = v13;
    if (v13 == v12)
    {
      v7 = 4;
      v6 = v12;
    }
    else
    {
      if (!v13)
        goto LABEL_13;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_13:
    v8 = *(_QWORD *)(a2 + 64);
    if (v8)
    {
      if (v8 == a2 + 40)
      {
        v13 = v12;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a2 + 40) + 24))(a2 + 40, v12);
      }
      else
      {
        v13 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      }
    }
    else
    {
      v13 = 0;
    }
    sub_239A69574(v12, (_QWORD *)(a1 + 120));
    v9 = v13;
    if (v13 == v12)
    {
      v10 = 4;
      v9 = v12;
    }
    else
    {
      if (!v13)
      {
LABEL_23:
        result = *(__n128 *)(a2 + 72);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 88);
        *(__n128 *)(a1 + 152) = result;
        return result;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_23;
  }
  return result;
}

_QWORD *sub_239A69400(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_239A69568(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

_QWORD *sub_239A69574(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_239A696DC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

uint64_t CPGSessionOptionsSetFromCFDictionary()
{
  return 4294967294;
}

uint64_t CPGSessionOptionsSetMaskingOptions(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 4294967294;
  result = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 8);
  return result;
}

void sub_239A69714()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGSessionResumeOptionsRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGSessionResumeOptionsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 8);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *CPGSessionResumeOptionsCreate()
{
  _QWORD *result;

  result = operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    *result = &off_250AF2A20;
    result[1] = 0;
    *((_DWORD *)result + 2) = 1;
  }
  return result;
}

_QWORD *sub_239A697A8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_239A69808(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A69878(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  size_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  _BYTE *v43;
  _BYTE *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  _BYTE *v50;
  _BYTE *v51;
  char *v52;
  char *v53;
  char *v54;
  int v55;
  char *v56;
  uint64_t *v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v64;
  float64x2_t *v65;
  _OWORD *f64;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  float64x2_t *v73;
  float64x2_t v74;
  double v75;
  float64x2_t v80;
  int8x16_t v81;
  unint64_t v82;
  unint64_t v83;
  int8x16_t *v84;
  int8x16_t *v85;
  int8x16_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  int8x16_t *v92;
  int8x16_t *v93;
  int8x16_t v94;
  char *v95;
  unint64_t v96;
  _DWORD *v97;
  _DWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  int v105;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  float64x2_t v110;
  float64x2_t v111;
  uint64_t v112;
  int8x16_t v113;
  char *v114;
  void *__p;
  char *v116;
  uint64_t v117;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = a2[10];
  if (!v5)
    goto LABEL_118;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = a3;
    if (v5 <= a3)
      v9 = a3 % v5;
  }
  else
  {
    v9 = ((_DWORD)v5 - 1) & a3;
  }
  v10 = *(uint64_t ***)(a2[9] + 8 * v9);
  if (!v10 || (v11 = *v10) == 0)
  {
LABEL_118:
    v107 = 15;
    goto LABEL_119;
  }
  if (v8.u32[0] < 2uLL)
  {
    v12 = v5 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == a3)
      {
        if (*((_DWORD *)v11 + 4) == (_DWORD)a3)
          goto LABEL_21;
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_118;
      }
      v11 = (uint64_t *)*v11;
      if (!v11)
        goto LABEL_118;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == a3)
      break;
    if (v13 >= v5)
      v13 %= v5;
    if (v13 != v9)
      goto LABEL_118;
LABEL_11:
    v11 = (uint64_t *)*v11;
    if (!v11)
      goto LABEL_118;
  }
  if (*((_DWORD *)v11 + 4) != (_DWORD)a3)
    goto LABEL_11;
LABEL_21:
  if (*((_BYTE *)sub_239470FCC((uint64_t)a2, a3) + 232) == 2)
  {
    v108 = v4;
    v15 = sub_2394650AC((uint64_t)a2, a3);
    __p = 0;
    v116 = 0;
    v117 = 0;
    sub_2394A0AE8(a2, a3, (uint64_t)&__p, 1);
    v16 = (char *)__p;
    v17 = v116;
    v19 = v116 - (_BYTE *)__p;
    _ZF = v116 == __p;
    v20 = (v116 - (_BYTE *)__p) >> 3;
    *(_QWORD *)a1 = v20;
    if (_ZF)
    {
      v23 = 0;
      v22 = 0;
    }
    else
    {
      if ((v19 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v21 = (char *)operator new(v19);
      v22 = v21;
      v23 = &v21[8 * v20];
      v24 = v19 - 8;
      v25 = v16;
      v19 = (size_t)v21;
      if (v24 < 0x18)
        goto LABEL_134;
      v26 = (v24 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v16[v27];
      v28 = v21 + 16;
      v29 = (__int128 *)(v16 + 16);
      v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v31 = *v29;
        *(v28 - 1) = *(v29 - 1);
        *v28 = v31;
        v28 += 2;
        v29 += 2;
        v30 -= 4;
      }
      while (v30);
      v19 = (size_t)&v21[v27];
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_134:
        do
        {
          v32 = *(_QWORD *)v25;
          v25 += 8;
          *(_QWORD *)v19 = v32;
          v19 += 8;
        }
        while (v25 != v17);
      }
    }
    v36 = *(void **)v108;
    if (*(_QWORD *)v108)
    {
      *(_QWORD *)(a1 + 16) = v36;
      operator delete(v36);
      *(_QWORD *)v108 = 0;
      *(_QWORD *)(v108 + 8) = 0;
      *(_QWORD *)(v108 + 16) = 0;
      v20 = *(_QWORD *)a1;
    }
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = v19;
    *(_QWORD *)(a1 + 24) = v23;
    v37 = *(_BYTE **)(a1 + 32);
    if (v20 > (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v37) >> 4)
    {
      if (v20 >> 60)
        sub_2394189F8();
      v38 = *(_BYTE **)(a1 + 40);
      v39 = (char *)operator new(16 * v20);
      v40 = &v39[(v38 - v37) & 0xFFFFFFFFFFFFFFF0];
      v41 = v40;
      if (v38 != v37)
      {
        v41 = &v39[(v38 - v37) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          v42 = *((_OWORD *)v38 - 1);
          v38 -= 16;
          *((_OWORD *)v41 - 1) = v42;
          v41 -= 16;
        }
        while (v38 != v37);
      }
      *(_QWORD *)(a1 + 32) = v41;
      *(_QWORD *)(a1 + 40) = v40;
      *(_QWORD *)(a1 + 48) = &v39[16 * v20];
      if (v37)
      {
        operator delete(v37);
        v20 = *(_QWORD *)a1;
      }
    }
    v43 = *(_BYTE **)(a1 + 56);
    if (v20 > (uint64_t)(*(_QWORD *)(a1 + 72) - (_QWORD)v43) >> 5)
    {
      if (v20 >> 59)
        sub_2394189F8();
      v44 = *(_BYTE **)(a1 + 64);
      v45 = (char *)operator new(32 * v20);
      v46 = &v45[v44 - v43];
      v47 = v46;
      if (v44 != v43)
      {
        v47 = &v45[v44 - v43];
        do
        {
          v48 = *((_OWORD *)v44 - 2);
          v49 = *((_OWORD *)v44 - 1);
          v44 -= 32;
          *((_OWORD *)v47 - 2) = v48;
          *((_OWORD *)v47 - 1) = v49;
          v47 -= 32;
        }
        while (v44 != v43);
      }
      *(_QWORD *)(a1 + 56) = v47;
      *(_QWORD *)(a1 + 64) = v46;
      *(_QWORD *)(a1 + 72) = &v45[32 * v20];
      if (v43)
      {
        operator delete(v43);
        v20 = *(_QWORD *)a1;
      }
    }
    v50 = *(_BYTE **)(a1 + 80);
    if (v20 > (uint64_t)(*(_QWORD *)(a1 + 96) - (_QWORD)v50) >> 2)
    {
      if (v20 >> 62)
        sub_2394189F8();
      v51 = *(_BYTE **)(a1 + 88);
      v52 = (char *)operator new(4 * v20);
      v53 = &v52[v51 - v50];
      v54 = v53;
      if (v51 != v50)
      {
        v54 = &v52[v51 - v50];
        do
        {
          v55 = *((_DWORD *)v51 - 1);
          v51 -= 4;
          *((_DWORD *)v54 - 1) = v55;
          v54 -= 4;
        }
        while (v51 != v50);
      }
      *(_QWORD *)(a1 + 80) = v54;
      *(_QWORD *)(a1 + 88) = v53;
      *(_QWORD *)(a1 + 96) = &v52[4 * v20];
      if (v50)
        operator delete(v50);
    }
    v57 = (uint64_t *)__p;
    v56 = v116;
    v114 = v116;
    while (v57 != (uint64_t *)v56)
    {
      v59 = *v57;
      v60 = sub_2394A2EA8((uint64_t)a2, *v57);
      v61 = sub_239A6A0F0(a2, a3, v59);
      _Q0 = *(float64x2_t *)(v61 + 16);
      v65 = *(float64x2_t **)(a1 + 40);
      v64 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v65 >= v64)
      {
        v67 = *(char **)(a1 + 32);
        v68 = ((char *)v65 - v67) >> 4;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 60)
          sub_2394189F8();
        v70 = v64 - (_QWORD)v67;
        if (v70 >> 3 > v69)
          v69 = v70 >> 3;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
          v71 = 0xFFFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        if (v71)
        {
          v111 = *(float64x2_t *)(v61 + 16);
          if (v71 >> 60)
            sub_239418A80();
          v72 = (char *)operator new(16 * v71);
          _Q0 = v111;
        }
        else
        {
          v72 = 0;
        }
        v73 = (float64x2_t *)&v72[16 * v68];
        *v73 = _Q0;
        f64 = (_OWORD *)v73[1].f64;
        if (v65 != (float64x2_t *)v67)
        {
          do
          {
            v74 = v65[-1];
            --v65;
            _Q0.f64[1] = v74.f64[1];
            v73[-1] = v74;
            --v73;
          }
          while (v65 != (float64x2_t *)v67);
          v65 = *(float64x2_t **)(a1 + 32);
        }
        *(_QWORD *)(a1 + 32) = v73;
        *(_QWORD *)(a1 + 40) = f64;
        *(_QWORD *)(a1 + 48) = &v72[16 * v71];
        if (v65)
          operator delete(v65);
      }
      else
      {
        *v65 = _Q0;
        f64 = (_OWORD *)v65[1].f64;
      }
      *(_QWORD *)(a1 + 40) = f64;
      *(_QWORD *)&_Q2.f64[0] = v15[14];
      v75 = *((double *)v60 + 2);
      _Q7 = *(_OWORD *)v60;
      __asm { FMLA            D0, D2, V7.D[1] }
      _Q0.f64[0] = _Q0.f64[0] + *((double *)v15 + 18) * v75;
      *(_QWORD *)&_Q2.f64[0] = v15[22];
      v80 = vaddq_f64(_Q0, _Q2);
      v81 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*((float64x2_t *)v15 + 4), *(double *)v60), *((float64x2_t *)v15 + 6), *(float64x2_t *)v60, 1), *((float64x2_t *)v15 + 8), v75), *((float64x2_t *)v15 + 10));
      v82 = vextq_s8(v81, v81, 8uLL).u64[0];
      v84 = *(int8x16_t **)(a1 + 64);
      v83 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v84 >= v83)
      {
        v86 = *(int8x16_t **)(a1 + 56);
        v87 = ((char *)v84 - (char *)v86) >> 5;
        v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 59)
          sub_2394189F8();
        v89 = v83 - (_QWORD)v86;
        if (v89 >> 4 > v88)
          v88 = v89 >> 4;
        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFE0)
          v90 = 0x7FFFFFFFFFFFFFFLL;
        else
          v90 = v88;
        if (v90)
        {
          v109 = v82;
          v110 = v80;
          v112 = v81.i64[0];
          if (v90 >> 59)
            sub_239418A80();
          v91 = (char *)operator new(32 * v90);
          v80 = v110;
          v81.i64[0] = v112;
          v82 = v109;
        }
        else
        {
          v91 = 0;
        }
        v81.i64[1] = v82;
        v92 = (int8x16_t *)&v91[32 * v87];
        *v92 = v81;
        v92[1] = (int8x16_t)v80;
        v93 = v92;
        if (v84 != v86)
        {
          do
          {
            v81 = v84[-2];
            v94 = v84[-1];
            v84 -= 2;
            v93[-2] = v81;
            v93[-1] = v94;
            v93 -= 2;
          }
          while (v84 != v86);
          v84 = *(int8x16_t **)(a1 + 56);
        }
        v95 = &v91[32 * v90];
        v85 = v92 + 2;
        *(_QWORD *)(a1 + 56) = v93;
        *(_QWORD *)(a1 + 64) = v92 + 2;
        *(_QWORD *)(a1 + 72) = v95;
        if (v84)
          operator delete(v84);
      }
      else
      {
        v81.i64[1] = v82;
        *v84 = v81;
        v84[1] = (int8x16_t)v80;
        v85 = v84 + 2;
      }
      *(_QWORD *)(a1 + 64) = v85;
      v81.i64[0] = v60[3];
      v97 = *(_DWORD **)(a1 + 88);
      v96 = *(_QWORD *)(a1 + 96);
      if ((unint64_t)v97 < v96)
      {
        *v97 = vmovn_s16((int16x8_t)vzip1q_s8(v81, v81)).u32[0];
        v58 = v97 + 1;
      }
      else
      {
        v98 = *(_DWORD **)(a1 + 80);
        v99 = v97 - v98;
        v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 62)
          sub_2394189F8();
        v101 = v96 - (_QWORD)v98;
        if (v101 >> 1 > v100)
          v100 = v101 >> 1;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
          v102 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          v113 = v81;
          if (v102 >> 62)
            sub_239418A80();
          v103 = (char *)operator new(4 * v102);
          v81 = v113;
        }
        else
        {
          v103 = 0;
        }
        v104 = &v103[4 * v99];
        *(_DWORD *)v104 = vmovn_s16((int16x8_t)vzip1q_s8(v81, v81)).u32[0];
        v58 = v104 + 4;
        if (v97 != v98)
        {
          do
          {
            v105 = *--v97;
            *((_DWORD *)v104 - 1) = v105;
            v104 -= 4;
          }
          while (v97 != v98);
          v97 = *(_DWORD **)(a1 + 80);
        }
        *(_QWORD *)(a1 + 80) = v104;
        *(_QWORD *)(a1 + 88) = v58;
        *(_QWORD *)(a1 + 96) = &v103[4 * v102];
        if (v97)
          operator delete(v97);
      }
      *(_QWORD *)(a1 + 88) = v58;
      ++v57;
      v56 = v114;
    }
    v33 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
      sub_239A444D4((uint64_t)"unknown file", 49, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if (__p)
    {
      v116 = (char *)__p;
      operator delete(__p);
      v33 = *(_QWORD *)a1;
    }
    v34 = *(_QWORD *)(a1 + 8);
    v35 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v33 = 0;
    *(_QWORD *)a1 = 0;
    v34 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 16) = v34;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
    v35 = v34;
  }
  if (v33 != (v35 - v34) >> 3
    || v33 != (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4
    || v33 != (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 5
    || v33 != (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2)
  {
    v107 = 53;
LABEL_119:
    sub_239A444D4((uint64_t)"unknown file", v107, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  return a1;
}

void sub_239A6A024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  _QWORD *v23;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  v25 = (void *)v23[10];
  if (v25)
  {
    v23[11] = v25;
    operator delete(v25);
    v26 = (void *)v23[7];
    if (!v26)
    {
LABEL_3:
      v27 = (void *)v23[4];
      if (!v27)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v26 = (void *)v23[7];
    if (!v26)
      goto LABEL_3;
  }
  v23[8] = v26;
  operator delete(v26);
  v27 = (void *)v23[4];
  if (!v27)
  {
LABEL_4:
    v28 = *a10;
    if (!*a10)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v23[5] = v27;
  operator delete(v27);
  v28 = *a10;
  if (!*a10)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  v23[2] = v28;
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A6A0F0(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v23;

  v3 = a1[10];
  if (!v3)
    goto LABEL_47;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = ((_DWORD)v3 - 1) & a2;
  }
  v6 = *(uint64_t ***)(a1[9] + 8 * v5);
  if (!v6 || (v7 = *v6) == 0)
  {
LABEL_47:
    v23 = 244;
    goto LABEL_49;
  }
  if (v4.u32[0] < 2uLL)
  {
    v8 = v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v7 + 4) == a2)
          goto LABEL_21;
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_47;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_47;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= v3)
      v9 %= v3;
    if (v9 != v5)
      goto LABEL_47;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      goto LABEL_47;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_11;
LABEL_21:
  v11 = v7[55];
  if (!v11)
    goto LABEL_48;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = a3;
    if (v11 <= a3)
      v13 = a3 % v11;
  }
  else
  {
    v13 = ((_DWORD)v11 - 1) & a3;
  }
  v14 = *(uint64_t ***)(v7[54] + 8 * v13);
  if (!v14 || (v15 = *v14) == 0)
  {
LABEL_48:
    v23 = 250;
    goto LABEL_49;
  }
  if (v12.u32[0] < 2uLL)
  {
    v16 = v11 - 1;
    while (1)
    {
      v18 = v15[1];
      if (v18 == a3)
      {
        if (*((_DWORD *)v15 + 4) == a3)
          goto LABEL_41;
      }
      else if ((v18 & v16) != v13)
      {
        goto LABEL_48;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v17 = v15[1];
    if (v17 != a3)
    {
      if (v17 >= v11)
        v17 %= v11;
      if (v17 != v13)
        goto LABEL_48;
      goto LABEL_31;
    }
    if (*((_DWORD *)v15 + 4) != a3)
    {
LABEL_31:
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_41:
  v19 = *((unsigned int *)v15 + 5);
  v20 = *a1;
  if (v19 >= (a1[1] - *a1) >> 6 || (*(_DWORD *)(v20 + (v19 << 6)) != -1 ? (v21 = (_DWORD)v19 == -1) : (v21 = 1), v21))
  {
    v23 = 255;
LABEL_49:
    sub_239A444D4((uint64_t)"unknown file", v23, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  return v20 + (v19 << 6) + 8;
}

uint64_t CPGSfmCameraTracksRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 112);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGSfmCameraTracksRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 112);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGSfmCameraTracksGetCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t CPGSfmCameraTracksGetIdentifiers(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(_QWORD *)(a1 + 16);
  else
    return 0;
}

uint64_t CPGSfmCameraTracksGetProjections(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(_QWORD *)(a1 + 40);
  else
    return 0;
}

uint64_t CPGSfmCameraTracksGetPositions(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(_QWORD *)(a1 + 64);
  else
    return 0;
}

uint64_t CPGSfmCameraTracksGetColors(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(_QWORD *)(a1 + 88);
  else
    return 0;
}

uint64_t sub_239A6A3F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = sub_239A4D648(v2);
    MEMORY[0x23B83E31C](v3, 0x10B2C40362D6DEFLL);
  }
  return a1;
}

void sub_239A6A444(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    v3 = sub_239A4D648(v2);
    MEMORY[0x23B83E31C](v3, 0x10B2C40362D6DEFLL);
  }
  JUMPOUT(0x23B83E31CLL);
}

uint64_t *sub_239A6A4A8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_239A4D648(v2);
    MEMORY[0x23B83E31C](v3, 0x10B2C40362D6DEFLL);
  }
  return a1;
}

uint64_t CPGSfmMapRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 40);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGSfmMapRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 40);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

char *CPGSfmMapCreateMutableCopy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = operator new();
  sub_239A4D360(v3, v2);
  v4 = (char *)operator new(0x30uLL, MEMORY[0x24BEDB6B8]);
  v5 = v4;
  if (v4)
  {
    *((_QWORD *)v4 + 1) = v3;
    v6 = v4 + 16;
    if (*(char *)(a1 + 39) < 0)
    {
      sub_23941A7F8(v6, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
    }
    else
    {
      *(_OWORD *)v6 = *(_OWORD *)(a1 + 16);
      *((_QWORD *)v5 + 4) = *(_QWORD *)(a1 + 32);
    }
    *((_DWORD *)v5 + 10) = 1;
    *(_QWORD *)v5 = off_250AF2A40;
  }
  else
  {
    v7 = sub_239A4D648(v3);
    MEMORY[0x23B83E31C](v7, 0x10B2C40362D6DEFLL);
  }
  return v5;
}

void sub_239A6A600(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
  {
    v4 = sub_239A4D648(v3);
    MEMORY[0x23B83E31C](v4, 0x10B2C40362D6DEFLL);
  }
  MEMORY[0x23B83E310](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x239A6A5ECLL);
}

void sub_239A6A650(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B2C40362D6DEFLL);
  _Unwind_Resume(a1);
}

__CFArray *CPGSfmMapCopyAllSampleIDs(uint64_t a1)
{
  uint64_t v1;
  __CFArray *Mutable;
  _QWORD *v3;
  _QWORD *v4;
  CFNumberRef v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 8);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_239433C1C(v1, (uint64_t)&v8, 1);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    do
    {
      v7 = *v3;
      v5 = CFNumberCreate(0, kCFNumberIntType, &v7);
      CFArrayAppendValue(Mutable, v5);
      CFRelease(v5);
      ++v3;
    }
    while (v3 != v4);
    v3 = v8;
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
  return Mutable;
}

void sub_239A6A734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *CPGSfmMapCopyRegisteredSampleIDs(uint64_t a1)
{
  uint64_t v1;
  __CFArray *Mutable;
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 value;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13[8];
  void *__p;
  void *v15;

  v1 = *(_QWORD *)(a1 + 8);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_2394B5624(v1, (uint64_t)&v10, 1);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v3 = v10;
  v4 = v11;
  if (v10 == v11)
  {
    if (v10)
    {
LABEL_3:
      v11 = v3;
      operator delete(v3);
    }
  }
  else
  {
    do
    {
      sub_23991321C((uint64_t)v13, 3, *v3);
      sub_23962B134(&value, v13);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      CFArrayAppendValue(Mutable, (const void *)value);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&value + 1);
      if (*((_QWORD *)&value + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&value + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      ++v3;
    }
    while (v3 != v4);
    v3 = v10;
    if (v10)
      goto LABEL_3;
  }
  return Mutable;
}

void sub_239A6A864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CPGSfmMapGetCameraBySampleID(uint64_t a1, unsigned int a2, double **a3)
{
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;
  __n128 v15;
  double v16;
  __n128 v17;
  double v18;
  __n128 v19;
  double *v20;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 80);
  if (!v4)
    return 4294967294;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a2;
    if (v4 <= a2)
      v7 = a2 % v4;
  }
  else
  {
    v7 = ((_DWORD)v4 - 1) & a2;
  }
  v8 = *(uint64_t ***)(*(_QWORD *)(v3 + 72) + 8 * v7);
  if (!v8)
    return 4294967294;
  v9 = *v8;
  if (!v9)
    return 4294967294;
  if (v6.u32[0] < 2uLL)
  {
    v10 = v4 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == a2)
      {
        if (*((_DWORD *)v9 + 4) == a2)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        return 4294967294;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        return 4294967294;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == a2)
      break;
    if (v11 >= v4)
      v11 %= v4;
    if (v11 != v7)
      return 4294967294;
LABEL_11:
    v9 = (uint64_t *)*v9;
    if (!v9)
      return 4294967294;
  }
  if (*((_DWORD *)v9 + 4) != a2)
    goto LABEL_11;
LABEL_22:
  v14 = sub_239470FCC(v3, a2);
  v20 = sub_239A46464((uint64_t)v14, *((double *)v14 + 25), v15, v16, v17, v18, v19);
  result = 0;
  *a3 = v20;
  return result;
}

uint64_t CPGSfmMapCopyTracksInWorldCoordinate(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;

  v3 = *(uint64_t **)(a1 + 8);
  v4 = v3 + 6;
  while (1)
  {
    v4 = (uint64_t *)*v4;
    if (!v4)
      break;
    if (*((_BYTE *)v4 + 52) == 2)
    {
      v5 = 2;
      goto LABEL_6;
    }
  }
  v5 = 0;
LABEL_6:
  v6 = operator new(0x78uLL, MEMORY[0x24BEDB6B8]);
  v7 = v6;
  if (v6)
  {
    sub_239A6BEB4((uint64_t)(v6 + 2), v3, v5, 0, 0, 0);
    v7[28] = 1;
    *(_QWORD *)v7 = &off_250AF9CF0;
  }
  *a2 = v7;
  return 0;
}

void sub_239A6AA7C(void *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E310](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x239A6AA64);
}

uint64_t CPGSfmMapCopyTracksInsideBoundingBoxInWorldCoordinate(uint64_t a1, uint64_t *a2)
{
  float64x2_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  v4 = (float64x2_t *)(*(_QWORD *)(a1 + 8) + 536);
  if (sub_2394AEBA4(v4, 0.0001))
  {
    v5 = *(uint64_t **)(a1 + 8);
    v6 = v5 + 6;
    while (1)
    {
      v6 = (uint64_t *)*v6;
      if (!v6)
        break;
      if (*((_BYTE *)v6 + 52) == 2)
      {
        v7 = 2;
        goto LABEL_8;
      }
    }
    v7 = 0;
LABEL_8:
    result = (uint64_t)operator new(0x78uLL, MEMORY[0x24BEDB6B8]);
    v8 = result;
    if (result)
    {
      sub_239A6BEB4(result + 8, v5, v7, v4, 1u, 0);
      result = 0;
      *(_DWORD *)(v8 + 112) = 1;
      *(_QWORD *)v8 = &off_250AF9CF0;
    }
  }
  else
  {
    v8 = 0;
    result = 4294967294;
  }
  *a2 = v8;
  return result;
}

void sub_239A6AB78(void *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E310](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x239A6AB60);
}

uint64_t CPGSfmMapCopyTracksInCameraCoordinateBySampleID(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = v4[10];
  if (!v5)
    goto LABEL_21;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = a2;
    if (v5 <= a2)
      v8 = a2 % v5;
  }
  else
  {
    v8 = ((_DWORD)v5 - 1) & a2;
  }
  v9 = *(uint64_t ***)(v4[9] + 8 * v8);
  if (!v9 || (v10 = *v9) == 0)
  {
LABEL_21:
    v14 = 0;
    result = 4294967294;
    goto LABEL_22;
  }
  if (v7.u32[0] < 2uLL)
  {
    v11 = v5 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == a2)
      {
        if (*((_DWORD *)v10 + 4) == (_DWORD)a2)
          goto LABEL_23;
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_21;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == a2)
      break;
    if (v12 >= v5)
      v12 %= v5;
    if (v12 != v8)
      goto LABEL_21;
LABEL_11:
    v10 = (uint64_t *)*v10;
    if (!v10)
      goto LABEL_21;
  }
  if (*((_DWORD *)v10 + 4) != (_DWORD)a2)
    goto LABEL_11;
LABEL_23:
  result = (uint64_t)operator new(0x78uLL, MEMORY[0x24BEDB6B8]);
  v14 = result;
  if (result)
  {
    sub_239A69878(result + 8, v4, a2);
    result = 0;
    *(_DWORD *)(v14 + 112) = 1;
    *(_QWORD *)v14 = &off_250AF2A60;
  }
LABEL_22:
  *a3 = v14;
  return result;
}

void sub_239A6ACF4(void *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E310](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x239A6AC9CLL);
}

BOOL CPGSfmMapIsSampleRegistered(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 80);
  if (!v3)
    return 0;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = ((_DWORD)v3 - 1) & a2;
  }
  v6 = *(uint64_t ***)(*(_QWORD *)(v2 + 72) + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!v7)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    v8 = v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v7 + 4) == a2)
          return *((_BYTE *)sub_239470FCC(v2, a2) + 232) == 2;
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= v3)
      v9 %= v3;
    if (v9 != v5)
      return 0;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      return 0;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_11;
  return *((_BYTE *)sub_239470FCC(v2, a2) + 232) == 2;
}

uint64_t CPGSfmMapSetSampleIsRegistered(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;
  char v15;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 80);
  if (!v4)
    return 4294967294;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a2;
    if (v4 <= a2)
      v7 = a2 % v4;
  }
  else
  {
    v7 = ((_DWORD)v4 - 1) & a2;
  }
  v8 = *(uint64_t ***)(*(_QWORD *)(v3 + 72) + 8 * v7);
  if (!v8)
    return 4294967294;
  v9 = *v8;
  if (!v9)
    return 4294967294;
  if (v6.u32[0] < 2uLL)
  {
    v10 = v4 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == a2)
      {
        if (*((_DWORD *)v9 + 4) == a2)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        return 4294967294;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        return 4294967294;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == a2)
      break;
    if (v11 >= v4)
      v11 %= v4;
    if (v11 != v7)
      return 4294967294;
LABEL_11:
    v9 = (uint64_t *)*v9;
    if (!v9)
      return 4294967294;
  }
  if (*((_DWORD *)v9 + 4) != a2)
    goto LABEL_11;
LABEL_22:
  v14 = sub_2395D7BEC(v3, a2);
  result = 0;
  if (a3)
    v15 = 2;
  else
    v15 = 1;
  *((_BYTE *)v14 + 232) = v15;
  return result;
}

uint64_t CPGSfmMapTransformBy(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9, float64x2_t a10)
{
  float64x2_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float64x2_t v16;
  float64x2_t v19;
  float64x2_t v20;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  int64x2_t v29;
  float64x2_t v30;
  double v31;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v39;
  float64x2_t v42;
  int64x2_t v44;
  unint64_t v46;
  __int128 v47;
  float64_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  float64x2_t v61;
  float64_t v62;
  float64x2_t v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  float64x2_t v67;
  __int128 v68;
  float64x2_t v69;
  double v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  float64x2_t v75;
  __int128 v76;
  int64x2_t v77;
  __int128 v78;
  float64x2_t v79;
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v12 = *(_OWORD *)(a2 + 16);
  v79 = *(float64x2_t *)a2;
  v80 = v12;
  v13 = *(_OWORD *)(a2 + 48);
  v77 = *(int64x2_t *)(a2 + 32);
  v78 = v13;
  v14 = *(_OWORD *)(a2 + 80);
  v75 = *(float64x2_t *)(a2 + 64);
  v76 = v14;
  v15 = *(_OWORD *)(a2 + 112);
  v73 = *(_OWORD *)(a2 + 96);
  v74 = v15;
  *(_QWORD *)&a9.f64[0] = v80;
  *(_QWORD *)&a10.f64[0] = v78;
  v63 = a10;
  v64 = a9;
  *(_QWORD *)&v10.f64[0] = v76;
  v61 = v10;
  v62 = v75.f64[1];
  v16 = (float64x2_t)vzip1q_s64((int64x2_t)v79, v77);
  _Q2 = (float64x2_t)vzip2q_s64((int64x2_t)v79, v77);
  *(_QWORD *)&_Q3.f64[0] = v80;
  *(_QWORD *)&_Q3.f64[1] = v78;
  v19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v79.f64[0]), _Q2, v79, 1), _Q3, *(double *)&v80);
  v20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, *(double *)v77.i64), _Q2, (float64x2_t)v77, 1), _Q3, *(double *)&v78);
  _Q3.f64[0] = v75.f64[1];
  __asm { FMLA            D2, D3, V5.D[1] }
  v25 = sqrt(cbrt((_Q2.f64[0] + v10.f64[0] * v10.f64[0]) * vmulq_laneq_f64(v19, v20, 1).f64[0]));
  v26.f64[0] = 1.0 / v25;
  v27 = vmulq_f64(v64, v26);
  v28 = vmulq_n_f64(v79, 1.0 / v25);
  v29 = (int64x2_t)vmulq_f64(v63, v26);
  v30 = vmulq_n_f64((float64x2_t)v77, 1.0 / v25);
  *(_QWORD *)&v31 = *(_OWORD *)&vmulq_f64(v61, v26);
  _Q4 = vmulq_n_f64(v75, 1.0 / v25);
  v33 = (float64x2_t)vzip1q_s64((int64x2_t)v28, (int64x2_t)v30);
  v34 = (float64x2_t)vzip2q_s64((int64x2_t)v28, (int64x2_t)v30);
  _Q18 = (float64x2_t)vzip1q_s64((int64x2_t)v27, v29);
  v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33, v28.f64[0]), v34, v28, 1), _Q18, v27.f64[0]);
  _Q19 = (int64x2_t)vmulq_f64(_Q4, v28);
  _D20 = v28.f64[1];
  __asm { FMLA            D19, D20, V4.D[1] }
  *(double *)_Q19.i64 = vmlad_n_f64(*(double *)_Q19.i64, v27.f64[0], v31);
  v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33, v30.f64[0]), v34, v30, 1), _Q18, *(double *)v29.i64);
  _Q21 = (int8x16_t)vmulq_f64(_Q4, v30);
  _D22 = v30.f64[1];
  __asm { FMLA            D21, D22, V4.D[1] }
  *(double *)_Q21.i64 = vmlad_n_f64(*(double *)_Q21.i64, *(double *)v29.i64, v31);
  v42 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33, _Q4.f64[0]), v34, _Q4, 1), _Q18, v31);
  _Q17 = vmulq_f64(_Q4, _Q4);
  _Q18.f64[0] = _Q4.f64[1];
  __asm { FMLA            D17, D18, V4.D[1] }
  _Q17.f64[0] = vmlad_n_f64(_Q17.f64[0], v31, v31);
  v44 = (int64x2_t)vaddq_f64(v39, (float64x2_t)xmmword_239EC6830);
  __asm { FMOV            V20.2D, #-1.0 }
  *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q17, _Q20));
  _Q17.f64[1] = NAN;
  if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v36, (float64x2_t)xmmword_239EC6820)), _Q17), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v44, _Q21, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q19, v44)), vabsq_f64(v42)))) > 0.0001)return 4294967294;
  v46 = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  *(_QWORD *)&v47 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
  *(_QWORD *)&v48 = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
  *(_QWORD *)&v49.f64[0] = v47;
  *(_QWORD *)&v49.f64[1] = v29.i64[0];
  v50.f64[0] = v31;
  v50.f64[1] = v48;
  v51 = vmulq_f64(v49, v50);
  v52.f64[0] = v48;
  v52.f64[1] = v31;
  v53 = vsubq_f64(vmulq_n_f64(v52, v30.f64[0]), vmulq_n_f64(v49, _Q4.f64[0]));
  v52.f64[0] = v27.f64[0];
  *(_QWORD *)&v52.f64[1] = v46;
  v54 = vmulq_f64(v52, v53);
  v55 = fabs(v54.f64[0]+ v28.f64[0] * vsubq_f64(v51, (float64x2_t)vdupq_laneq_s64((int64x2_t)v51, 1)).f64[0]- v54.f64[1]+ -1.0);
  if (v55 > 0.0001)
    return 4294967294;
  v56 = *((double *)&v80 + 1);
  v57 = *((double *)&v78 + 1);
  v58 = *((double *)&v76 + 1);
  if (*((double *)&v80 + 1) != 0.0)
  {
    if (*((double *)&v80 + 1) < 0.0)
      v56 = 0.0 - *((double *)&v80 + 1);
    if (v56 > 0.0001)
      return 4294967294;
  }
  if (*((double *)&v78 + 1) != 0.0)
  {
    if (*((double *)&v78 + 1) < 0.0)
      v57 = 0.0 - *((double *)&v78 + 1);
    if (v57 > 0.0001)
      return 4294967294;
  }
  if (*((double *)&v76 + 1) != 0.0)
  {
    if (*((double *)&v76 + 1) < 0.0)
      v58 = 0.0 - *((double *)&v76 + 1);
    if (v58 > 0.0001)
      return 4294967294;
  }
  if (*((double *)&v74 + 1) != 1.0)
  {
    v59 = *((double *)&v74 + 1) >= 1.0 ? *((double *)&v74 + 1) + -1.0 : 1.0 - *((double *)&v74 + 1);
    if (v59 > 0.0001)
      return 4294967294;
  }
  if (v55 > 0.0001)
  {
    sub_239A444D4((uint64_t)"unknown file", 121, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v27.f64[1] = v30.f64[0];
  *((_QWORD *)&v47 + 1) = v29.i64[0];
  *(_QWORD *)&v28.f64[1] = v46;
  _Q4.f64[1] = v48;
  *(_QWORD *)&v30.f64[0] = v74;
  v65 = v25;
  v70 = v31;
  v68 = v47;
  v69 = _Q4;
  v66 = v28;
  v67 = v27;
  v72 = v74;
  v71 = v73;
  return sub_2396F5FA0((uint64_t)&v65, *(_QWORD **)(a1 + 8), v27, v25, v28, v31, _Q4, *(double *)&v73, v30)
       - 1;
}

uint64_t CPGSfmMapRotateByQuaternion(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  double v13;
  float64x2_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v35;
  float64x2_t v38;
  float64x2_t v41;
  int8x16_t v43;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  __n128 v49;
  _QWORD *i;
  uint64_t *v51;
  float64x2_t v52;
  double v54;
  double v57;
  int64x2_t v59;
  float64_t v60;
  int64x2_t v61;
  double v62;
  float64x2_t v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  _OWORD v67[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = a2[1];
  v67[0] = *a2;
  v67[1] = v3;
  sub_23962EC84((uint64_t)v67, (uint64_t)&v65);
  _V1.D[1] = v65.f64[1];
  _D3 = v65.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _D3 = v66.f64[1];
  __asm { FMLA            D2, D3, V0.D[1] }
  v13 = 1.0 / sqrt(_D2);
  v26 = vmulq_n_f64(v66, v13);
  v14 = vmulq_n_f64(v65, v13);
  v15 = vmuld_n_f64(v14.f64[0], v14.f64[0]);
  v16 = vmuld_lane_f64(v14.f64[1], v14, 1);
  v17 = vmuld_n_f64(v26.f64[0], v26.f64[0]);
  v18 = vmuld_lane_f64(v26.f64[1], v26, 1);
  v19 = vmuld_lane_f64(v26.f64[0], v14, 1);
  v20 = vmuld_lane_f64(v14.f64[1], v26, 1);
  v21 = vmuld_lane_f64(v26.f64[0], v26, 1);
  v22 = vmuld_lane_f64(v14.f64[0], v14, 1);
  v23 = vmuld_n_f64(v14.f64[0], v26.f64[0]);
  v14.f64[0] = vmuld_lane_f64(v14.f64[0], v26, 1);
  v24 = v15 + v16 - v17 - v18;
  v25 = v19 + v14.f64[0] + v19 + v14.f64[0];
  v26.f64[0] = v20 - v23 + v20 - v23;
  v27 = v19 - v14.f64[0] + v19 - v14.f64[0];
  v14.f64[0] = v15 - v16;
  v28 = v17 + v15 - v16 - v18;
  v29 = v21 + v22 + v21 + v22;
  v30 = v18 + v14.f64[0] - v17;
  *(double *)v59.i64 = v24;
  *(double *)&v59.i64[1] = v25;
  v60 = v26.f64[0];
  *(double *)v61.i64 = v27;
  *(double *)&v61.i64[1] = v28;
  v62 = v29;
  v63.f64[0] = v20 + v23 + v20 + v23;
  v63.f64[1] = v21 - v22 + v21 - v22;
  v64 = v30;
  _Q4 = v63;
  v32 = (float64x2_t)vzip1q_s64(v59, v61);
  v33 = (float64x2_t)vzip2q_s64(v59, v61);
  _Q17.f64[0] = v26.f64[0];
  _Q17.f64[1] = v29;
  v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, v24), v33, (float64x2_t)v59, 1), _Q17, v26.f64[0]);
  _Q18 = (int64x2_t)vmulq_f64(v63, (float64x2_t)v59);
  _D19 = v25;
  __asm { FMLA            D18, D19, V4.D[1] }
  *(double *)_Q18.i64 = *(double *)_Q18.i64 + v30 * v26.f64[0];
  v38 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, *(double *)v61.i64), v33, (float64x2_t)v61, 1), _Q17, v29);
  _Q20 = (int8x16_t)vmulq_f64(v63, (float64x2_t)v61);
  _D21 = *(double *)&v61.i64[1];
  __asm { FMLA            D20, D21, V4.D[1] }
  *(double *)_Q20.i64 = *(double *)_Q20.i64 + v30 * v29;
  v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, v63.f64[0]), v33, v63, 1), _Q17, v30);
  _Q16 = vmulq_f64(_Q4, _Q4);
  _Q17.f64[0] = v63.f64[1];
  __asm { FMLA            D16, D17, V4.D[1] }
  _Q16.f64[0] = _Q16.f64[0] + v30 * v30;
  v43 = (int8x16_t)vaddq_f64(v38, (float64x2_t)xmmword_239EC6830);
  __asm { FMOV            V19.2D, #-1.0 }
  *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q16, _Q19));
  _Q16.f64[1] = NAN;
  if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v35, (float64x2_t)xmmword_239EC6820)), _Q16), vabsq_f64((float64x2_t)vextq_s8(v43, _Q20, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q18, (int64x2_t)v43)), vabsq_f64(v41)))) > 0.0001)return 4294967294;
  *(_QWORD *)&v45.f64[0] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
  *(_QWORD *)&v46.f64[0] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
  v45.f64[1] = v29;
  v47.f64[0] = v30;
  v47.f64[1] = v46.f64[0];
  v48 = vmulq_f64(v45, v47);
  v46.f64[1] = v30;
  *(_QWORD *)&v26.f64[1] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
  v49 = (__n128)vmulq_f64(v26, vsubq_f64(vmulq_n_f64(v46, *(double *)v61.i64), vmulq_n_f64(v45, v63.f64[0])));
  v49.n128_f64[0] = fabs(v49.n128_f64[0]+ *(double *)v59.i64 * vsubq_f64(v48, (float64x2_t)vdupq_laneq_s64((int64x2_t)v48, 1)).f64[0]- v49.n128_f64[1]+ -1.0);
  if (v49.n128_f64[0] > 0.0001)
    return 4294967294;
  for (i = *(_QWORD **)(v2 + 88); i; i = (_QWORD *)*i)
    v49 = sub_2396F674C((uint64_t)(i + 3), (uint64_t)&v59, (int64x2_t)v49);
  v51 = *(uint64_t **)(v2 + 48);
  if (v51)
  {
    v52 = (float64x2_t)v59;
    do
    {
      _D2 = v62;
      v54 = *((double *)v51 + 5);
      _Q7 = *(float64x2_t *)(v51 + 3);
      __asm { FMLA            D3, D2, V7.D[1] }
      v57 = _D3 + v64 * v54;
      *(float64x2_t *)(v51 + 3) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, _Q7.f64[0]), (float64x2_t)v61, _Q7, 1), v63, v54);
      *((double *)v51 + 5) = v57;
      v51 = (uint64_t *)*v51;
    }
    while (v51);
  }
  return 0;
}

__n128 CPGSfmMapCopyBoundingBox(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (char *)operator new(0x110uLL, MEMORY[0x24BEDB6B8]);
  if (v2)
  {
    v4 = *(_OWORD *)(v1 + 616);
    *(_OWORD *)(v2 + 72) = *(_OWORD *)(v1 + 600);
    *(_OWORD *)(v2 + 88) = v4;
    v5 = *(_OWORD *)(v1 + 648);
    *(_OWORD *)(v2 + 104) = *(_OWORD *)(v1 + 632);
    *(_OWORD *)(v2 + 120) = v5;
    v6 = *(_OWORD *)(v1 + 552);
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(v1 + 536);
    *(_OWORD *)(v2 + 24) = v6;
    v7 = *(_OWORD *)(v1 + 584);
    *(_OWORD *)(v2 + 40) = *(_OWORD *)(v1 + 568);
    *(_OWORD *)(v2 + 56) = v7;
    v8 = *(_OWORD *)(v1 + 664);
    v9 = *(_OWORD *)(v1 + 680);
    v10 = *(_OWORD *)(v1 + 696);
    *(_OWORD *)(v2 + 184) = *(_OWORD *)(v1 + 712);
    *(_OWORD *)(v2 + 168) = v10;
    *(_OWORD *)(v2 + 152) = v9;
    *(_OWORD *)(v2 + 136) = v8;
    result = *(__n128 *)(v1 + 728);
    v11 = *(_OWORD *)(v1 + 744);
    v12 = *(_OWORD *)(v1 + 760);
    *(_OWORD *)(v2 + 248) = *(_OWORD *)(v1 + 776);
    *(_OWORD *)(v2 + 232) = v12;
    *(_OWORD *)(v2 + 216) = v11;
    *(__n128 *)(v2 + 200) = result;
    *((_DWORD *)v2 + 66) = 1;
    *(_QWORD *)v2 = &off_250AF2A80;
  }
  return result;
}

uint64_t CPGSfmMapSetBoundingBox(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  result = 4294967294;
  if (a1 && a2)
  {
    v5 = (__int128 *)(a2 + 8);
    if (sub_2394AEBA4((float64x2_t *)(a2 + 8), 0.0001))
    {
      result = 0;
      v6 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 536);
      v7 = *v5;
      v8 = *(_OWORD *)(a2 + 24);
      v9 = *(_OWORD *)(a2 + 56);
      v6[2] = *(_OWORD *)(a2 + 40);
      v6[3] = v9;
      *v6 = v7;
      v6[1] = v8;
      v10 = *(_OWORD *)(a2 + 72);
      v11 = *(_OWORD *)(a2 + 88);
      v12 = *(_OWORD *)(a2 + 120);
      v6[6] = *(_OWORD *)(a2 + 104);
      v6[7] = v12;
      v6[4] = v10;
      v6[5] = v11;
      v13 = *(_OWORD *)(a2 + 216);
      v14 = *(_OWORD *)(a2 + 248);
      v15 = *(_OWORD *)(a2 + 200);
      v6[14] = *(_OWORD *)(a2 + 232);
      v6[15] = v14;
      v6[12] = v15;
      v6[13] = v13;
      v16 = *(_OWORD *)(a2 + 136);
      v17 = *(_OWORD *)(a2 + 152);
      v18 = *(_OWORD *)(a2 + 184);
      v6[10] = *(_OWORD *)(a2 + 168);
      v6[11] = v18;
      v6[8] = v16;
      v6[9] = v17;
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

_QWORD *sub_239A6B688(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_239A6B708(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x23B83E31CLL);
}

double CPGSfmOptionsCreate()
{
  _OWORD *v0;
  double result;

  v0 = operator new(0x70uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    v0[5] = 0u;
    v0[6] = 0u;
    v0[3] = 0u;
    v0[4] = 0u;
    v0[1] = 0u;
    v0[2] = 0u;
    *v0 = 0u;
    *(_QWORD *)&result = 0x200000001;
    *((_QWORD *)v0 + 11) = 0x200000001;
    *((_WORD *)v0 + 48) = 262;
    *((_BYTE *)v0 + 98) = 1;
    *((_DWORD *)v0 + 26) = 1;
    *(_QWORD *)v0 = &off_250AF2AA0;
  }
  return result;
}

uint64_t CPGSfmOptionsRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 104);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGSfmOptionsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 104);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *CPGSfmOptionsSetPoseUpdateCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_250AF2AC0;
  v5[1] = a2;
  v5[2] = a3;
  v6 = v5;
  sub_239A69400(v5, (_QWORD *)(a1 + 8));
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_239A6B8E4()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A6B8F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AF2AC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239A6B930(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF2AC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239A6B950(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  unsigned int *v9;
  uint64_t *i;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  if (*(_QWORD *)(result + 8))
  {
    v5 = result;
    v6 = *a2;
    v7 = *a4;
    v8 = (char *)operator new(0x38uLL, MEMORY[0x24BEDB6B8]);
    v9 = (unsigned int *)v8;
    if (v8)
    {
      *(_OWORD *)(v8 + 8) = 0u;
      *(_OWORD *)(v8 + 24) = 0u;
      *((_DWORD *)v8 + 10) = 1065353216;
      if (v8 + 8 != (char *)a3)
      {
        *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 32);
        for (i = *(uint64_t **)(a3 + 16); i; i = (uint64_t *)*i)
        {
          v11 = (char *)operator new(0x2E0uLL);
          *(_QWORD *)v11 = 0;
          *((_QWORD *)v11 + 1) = 0;
          *((_DWORD *)v11 + 4) = *((_DWORD *)i + 4);
          sub_2395F81B8((uint64_t)(v11 + 24), (uint64_t)(i + 3));
          *((_DWORD *)v11 + 108) = *((_DWORD *)i + 108);
          v11[440] = 0;
          v11[568] = 0;
          if (*((_BYTE *)i + 568))
          {
            v12 = *(_OWORD *)(i + 55);
            v13 = *(_OWORD *)(i + 57);
            v14 = *(_OWORD *)(i + 61);
            *(_OWORD *)(v11 + 472) = *(_OWORD *)(i + 59);
            *(_OWORD *)(v11 + 488) = v14;
            *(_OWORD *)(v11 + 440) = v12;
            *(_OWORD *)(v11 + 456) = v13;
            v15 = *(_OWORD *)(i + 63);
            v16 = *(_OWORD *)(i + 65);
            v17 = *(_OWORD *)(i + 69);
            *(_OWORD *)(v11 + 536) = *(_OWORD *)(i + 67);
            *(_OWORD *)(v11 + 552) = v17;
            *(_OWORD *)(v11 + 504) = v15;
            *(_OWORD *)(v11 + 520) = v16;
            v11[568] = 1;
          }
          *((_QWORD *)v11 + 72) = i[72];
          *(_OWORD *)(v11 + 584) = *(_OWORD *)(i + 73);
          v18 = *(_OWORD *)(i + 75);
          v19 = *(_OWORD *)(i + 77);
          v20 = *(_OWORD *)(i + 79);
          *((_QWORD *)v11 + 81) = i[81];
          *(_OWORD *)(v11 + 616) = v19;
          *(_OWORD *)(v11 + 632) = v20;
          *(_OWORD *)(v11 + 600) = v18;
          *((_QWORD *)v11 + 82) = i[82];
          *(_OWORD *)(v11 + 664) = *(_OWORD *)(i + 83);
          v21 = *(_OWORD *)(i + 85);
          v22 = *(_OWORD *)(i + 87);
          v23 = *(_OWORD *)(i + 89);
          *((_QWORD *)v11 + 91) = i[91];
          *(_OWORD *)(v11 + 696) = v22;
          *(_OWORD *)(v11 + 712) = v23;
          *(_OWORD *)(v11 + 680) = v21;
          *((_QWORD *)v11 + 1) = *((unsigned int *)v11 + 4);
          sub_239A539EC((uint64_t)(v9 + 2), (uint64_t)v11);
        }
      }
      v9[12] = v7;
      v9[13] = 1;
      *(_QWORD *)v9 = off_250AF2BD8;
    }
    result = (*(uint64_t (**)(uint64_t, unsigned int *, _QWORD))(v5 + 8))(v6, v9, *(_QWORD *)(v5 + 16));
    if (v9)
    {
      v24 = v9 + 13;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  return result;
}

void sub_239A6BB50(void *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  sub_239A6E3EC((uint64_t *)va);
  sub_239A6E37C(v3);
  MEMORY[0x23B83E310](v2, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x239A6BAD8);
}

uint64_t CPGSfmOptionsGetProcessingMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t CPGSfmOptionsSetProcessingMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 72) = a2;
  return result;
}

uint64_t CPGSfmOptionsGetSampleOverlap(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t CPGSfmOptionsSetSampleOverlap(uint64_t result, int a2)
{
  *(_DWORD *)(result + 76) = a2;
  return result;
}

uint64_t CPGSfmOptionsGetFeatureSensitivity(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t CPGSfmOptionsSetFeatureSensitivity(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

uint64_t CPGSfmOptionsGetSampleOrdering(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t CPGSfmOptionsSetSampleOrdering(uint64_t result, int a2)
{
  *(_DWORD *)(result + 84) = a2;
  return result;
}

_QWORD *CPGSfmOptionsSetTrackUpdateCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_250AF2B08;
  v5[1] = a2;
  v5[2] = a3;
  v6 = v5;
  sub_239A69574(v5, (_QWORD *)(a1 + 40));
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_239A6BC78()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A6BC8C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AF2B08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239A6BCC4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF2B08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239A6BCE4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(result + 8);
  if (v3)
    return v3(*a2, *a3, *(_QWORD *)(result + 16));
  return result;
}

uint64_t CPGSfmOptionsGetSfMType(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 92);
  if (v1 == 2)
    return 2;
  else
    return v1 == 1;
}

uint64_t CPGSfmOptionsSetSfMType(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 > 2)
    return 4294967294;
  result = 0;
  *(_DWORD *)(a1 + 92) = a2;
  return result;
}

uint64_t CPGSfmOptionsGetMatcherType(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 96);
  if (v1 == 7)
    return 2;
  else
    return v1 == 6;
}

uint64_t CPGSfmOptionsSetMatcherType(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 > 2)
    return 4294967294;
  result = 0;
  *(_BYTE *)(a1 + 96) = 0x70601u >> (8 * a2);
  return result;
}

uint64_t CPGSfmOptionsGetPowerSetting(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t CPGSfmOptionsSetPowerSetting(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  return result;
}

uint64_t CPGSfmOptionsSetUsePriors(uint64_t result, char a2)
{
  *(_BYTE *)(result + 97) = a2;
  return result;
}

uint64_t CPGSfmOptionsSetUseMasks(uint64_t result, char a2)
{
  *(_BYTE *)(result + 98) = a2;
  return result;
}

uint64_t CPGSfmOptionsSetFixIntrinsics(uint64_t result, char a2)
{
  *(_BYTE *)(result + 99) = a2;
  return result;
}

BOOL CPGSfmOptionsGetBASolverLib(uint64_t a1)
{
  return *(_DWORD *)(a1 + 100) == 1;
}

uint64_t CPGSfmOptionsSetBASolverLib(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 > 1)
    return 4294967294;
  result = 0;
  *(_DWORD *)(a1 + 100) = a2;
  return result;
}

_QWORD *sub_239A6BDE4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_239A6BE44(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A6BEB4(uint64_t a1, uint64_t *a2, int a3, float64x2_t *a4, unsigned __int8 a5, uint64_t a6)
{
  int v9;
  uint64_t v10;
  unint64_t *i;
  unint64_t *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _BYTE *v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  _BYTE *v44;
  _BYTE *v45;
  char *v46;
  char *v47;
  char *v48;
  int v49;
  _BYTE *v50;
  _BYTE *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  uint64_t *v57;
  uint64_t *v58;
  int64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  float64x2_t v65;
  void **v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  __int128 v78;
  unint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  uint64_t v89;
  uint64_t *v90;
  float64x2_t v91;
  uint64_t *v92;
  __int128 v93;
  __int128 v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  BOOL v98;
  double v99;
  BOOL v101;
  BOOL v102;
  unint64_t v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  float64x2_t *v117;
  float64x2_t *v118;
  uint64_t v119;
  float64x2_t v120;
  uint64_t v121;
  int8x16_t v122;
  unint64_t v123;
  int8x16_t *v124;
  int8x16_t *v125;
  int8x16_t *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  int8x16_t *v132;
  int8x16_t *v133;
  unint64_t v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  int v144;
  float64_t *v145;
  __int128 v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  __int128 v157;
  __int128 v158;
  unint64_t v160;
  uint64_t v161;
  unsigned __int8 v162;
  float64x2_t v163;
  float64x2_t v164;
  int8x16_t v165;
  int8x16_t v166;
  __int128 v167;
  void **v168;
  int v169;
  uint64_t v170;
  char *v173;
  char *v174;
  char *v175;
  void *v176;
  _BYTE *v177;
  char *v178;
  void *v179[2];
  float64_t v180;
  void *v181[2];
  void *__p[2];
  int v183;
  uint64_t v184;

  v184 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v168 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  if ((a6 & 0xFF00000000) == 0 || (v9 = a6, (a6 & 0x80000000) != 0))
  {
    sub_239A6CCD8(a2, (uint64_t)&v176);
  }
  else
  {
    v179[0] = 0;
    v179[1] = 0;
    v180 = 0.0;
    *(_OWORD *)v181 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    v183 = 1065353216;
    v10 = a2[11];
    if (v10)
    {
      do
      {
        v179[1] = v179[0];
        if (*(_DWORD *)(v10 + 220) == v9)
        {
          sub_239A6CF30((uint64_t)a2, *(_DWORD *)(v10 + 16), (uint64_t)v179, 1);
          v12 = (unint64_t *)v179[0];
          for (i = (unint64_t *)v179[1]; v12 != i; ++v12)
            sub_239465800((uint64_t)v181, v12, v12);
        }
        v10 = *(_QWORD *)v10;
      }
      while (v10);
      v13 = __p[1];
      if (__p[1] > (void *)((v178 - (_BYTE *)v176) >> 3))
      {
        if ((unint64_t)__p[1] >> 61)
          sub_2394189F8();
        v14 = (char *)operator new(8 * (uint64_t)__p[1]);
        v176 = &v14[(v177 - (_BYTE *)v176) & 0xFFFFFFFFFFFFFFF8];
        v177 = v176;
        v178 = &v14[8 * (_QWORD)v13];
      }
    }
    if (__p[0])
    {
      v15 = 0;
      v16 = __p[0];
      do
      {
        ++v15;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
    else
    {
      v15 = 0;
    }
    sub_239A6D234((unint64_t *)&v176, v177, (_QWORD *)__p[0], v15);
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    v17 = __p[0];
    if (__p[0])
    {
      do
      {
        v18 = (_QWORD *)*v17;
        operator delete(v17);
        v17 = v18;
      }
      while (v18);
    }
    v19 = v181[0];
    v181[0] = 0;
    if (v19)
      operator delete(v19);
    if (v179[0])
    {
      v179[1] = v179[0];
      operator delete(v179[0]);
    }
  }
  v21 = v176;
  v20 = v177;
  v22 = v177 - (_BYTE *)v176;
  v23 = (v177 - (_BYTE *)v176) >> 3;
  v24 = *(_BYTE **)(a1 + 8);
  if (v23 > (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v24) >> 3)
  {
    if ((v22 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v25 = *(_BYTE **)(a1 + 16);
    v26 = (char *)operator new(v177 - (_BYTE *)v176);
    v27 = v25 - v24;
    v28 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFF8];
    v29 = v28;
    if (v25 == v24)
      goto LABEL_35;
    if ((unint64_t)(v27 - 8) >= 0x58)
    {
      v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v25 - &v26[v27 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v30 = v27 >> 3;
        v31 = ((unint64_t)(v27 - 8) >> 3) + 1;
        v32 = &v26[8 * v30 - 16];
        v33 = (__int128 *)(v25 - 16);
        v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v35 = *v33;
          *((_OWORD *)v32 - 1) = *(v33 - 1);
          *(_OWORD *)v32 = v35;
          v32 -= 32;
          v33 -= 2;
          v34 -= 4;
        }
        while (v34);
        v29 = &v28[-8 * (v31 & 0x3FFFFFFFFFFFFFFCLL)];
        v25 -= 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
        if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          *(_QWORD *)(a1 + 8) = v29;
          *(_QWORD *)(a1 + 16) = v28;
          *(_QWORD *)(a1 + 24) = &v26[8 * v23];
          if (v24)
            operator delete(v24);
          goto LABEL_37;
        }
      }
    }
    else
    {
      v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v36 = *((_QWORD *)v25 - 1);
      v25 -= 8;
      *((_QWORD *)v29 - 1) = v36;
      v29 -= 8;
    }
    while (v25 != v24);
    goto LABEL_35;
  }
LABEL_37:
  v37 = *(_BYTE **)(a1 + 32);
  if (v23 > (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v37) >> 5)
  {
    if (v22 > 0x3FFFFFFFFFFFFFF8)
      goto LABEL_217;
    v38 = *(_BYTE **)(a1 + 40);
    v39 = (char *)operator new(4 * v22);
    v40 = &v39[v38 - v37];
    v41 = v40;
    if (v38 != v37)
    {
      v41 = &v39[v38 - v37];
      do
      {
        v42 = *((_OWORD *)v38 - 2);
        v43 = *((_OWORD *)v38 - 1);
        v38 -= 32;
        *((_OWORD *)v41 - 2) = v42;
        *((_OWORD *)v41 - 1) = v43;
        v41 -= 32;
      }
      while (v38 != v37);
    }
    *(_QWORD *)(a1 + 32) = v41;
    *(_QWORD *)(a1 + 40) = v40;
    *(_QWORD *)(a1 + 48) = &v39[32 * v23];
    if (v37)
      operator delete(v37);
  }
  v44 = *(_BYTE **)(a1 + 56);
  if (v23 > (uint64_t)(*(_QWORD *)(a1 + 72) - (_QWORD)v44) >> 2)
  {
    if ((v22 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v45 = *(_BYTE **)(a1 + 64);
    v46 = (char *)operator new(v22 >> 1);
    v47 = &v46[v45 - v44];
    v48 = v47;
    if (v45 != v44)
    {
      v48 = &v46[v45 - v44];
      do
      {
        v49 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *((_DWORD *)v48 - 1) = v49;
        v48 -= 4;
      }
      while (v45 != v44);
    }
    *(_QWORD *)(a1 + 56) = v48;
    *(_QWORD *)(a1 + 64) = v47;
    *(_QWORD *)(a1 + 72) = &v46[4 * v23];
    if (v44)
      operator delete(v44);
  }
  v50 = *(_BYTE **)(a1 + 80);
  if (v23 > (uint64_t)(*(_QWORD *)(a1 + 96) - (_QWORD)v50) >> 5)
  {
    if (v22 < 0x3FFFFFFFFFFFFFF9)
    {
      v51 = *(_BYTE **)(a1 + 88);
      v52 = (char *)operator new(4 * v22);
      v53 = &v52[v51 - v50];
      v54 = v53;
      if (v51 != v50)
      {
        v54 = &v52[v51 - v50];
        do
        {
          v55 = *((_OWORD *)v51 - 2);
          v56 = *((_OWORD *)v51 - 1);
          v51 -= 32;
          *((_OWORD *)v54 - 2) = v55;
          *((_OWORD *)v54 - 1) = v56;
          v54 -= 32;
        }
        while (v51 != v50);
      }
      *(_QWORD *)(a1 + 80) = v54;
      *(_QWORD *)(a1 + 88) = v53;
      *(_QWORD *)(a1 + 96) = &v52[32 * v23];
      if (v50)
        operator delete(v50);
      goto LABEL_58;
    }
LABEL_217:
    sub_2394189F8();
  }
LABEL_58:
  v160 = v23;
  v162 = a5;
  v169 = a3;
  v173 = 0;
  v58 = (uint64_t *)v176;
  v57 = (uint64_t *)v177;
  v59 = v177 - (_BYTE *)v176;
  if (v177 != v176)
  {
    if ((unint64_t)v59 >= 0x5555555555555551)
LABEL_207:
      sub_2394189F8();
    v60 = v59 >> 3;
    v173 = (char *)operator new(24 * (v59 >> 3));
    v174 = v173;
    v175 = &v173[24 * v60];
    while (1)
    {
      v62 = sub_2394A2EA8((uint64_t)a2, *v58);
      if (*((_BYTE *)v62 + 27) == 2)
        break;
      v68 = v174;
      if (v174 >= v175)
      {
        v69 = 0xAAAAAAAAAAAAAAABLL * ((v174 - v173) >> 3) + 1;
        if (v69 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_207;
        if (0x5555555555555556 * ((v175 - v173) >> 3) > v69)
          v69 = 0x5555555555555556 * ((v175 - v173) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v175 - v173) >> 3) >= 0x555555555555555)
          v70 = 0xAAAAAAAAAAAAAAALL;
        else
          v70 = v69;
        if (v70)
        {
          if (v70 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_208;
          v71 = (char *)operator new(24 * v70);
        }
        else
        {
          v71 = 0;
        }
        v80 = &v71[8 * ((v174 - v173) >> 3)];
        *(_QWORD *)v80 = 0;
        *((_QWORD *)v80 + 1) = 0;
        *((_QWORD *)v80 + 2) = 0;
        v81 = v80;
        if (v174 != v173)
        {
          do
          {
            v82 = *(_OWORD *)(v68 - 24);
            *((_QWORD *)v81 - 1) = *((_QWORD *)v68 - 1);
            *(_OWORD *)(v81 - 24) = v82;
            v81 -= 24;
            v68 -= 24;
          }
          while (v68 != v173);
LABEL_100:
          v68 = v173;
        }
LABEL_101:
        v61 = v80 + 24;
        v173 = v81;
        v175 = &v71[24 * v70];
        if (v68)
          operator delete(v68);
        goto LABEL_62;
      }
      v61 = v174 + 24;
      *(_QWORD *)v174 = 0;
      *((_QWORD *)v174 + 1) = 0;
      *((_QWORD *)v174 + 2) = 0;
LABEL_62:
      v174 = v61;
      if (++v58 == v57)
        goto LABEL_103;
    }
    v179[0] = 0;
    v179[1] = 0;
    v180 = 0.0;
    v63 = *v58;
    v64 = operator new(0x20uLL);
    *v64 = &off_250AF2B50;
    v64[1] = v62;
    v64[2] = a2;
    v64[3] = v179;
    __p[1] = v64;
    sub_239A6D58C((uint64_t)a2, v63, 0, (uint64_t)v181);
    v66 = (void **)__p[1];
    if (__p[1] == v181)
    {
      v66 = v181;
      v67 = 4;
    }
    else
    {
      if (!__p[1])
      {
LABEL_79:
        v65.f64[0] = v180;
        _Q0 = *(float64x2_t *)v179;
        _Q2 = vmulq_f64(_Q0, _Q0);
        _D3 = v179[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        _Q2.f64[0] = sqrt(_Q2.f64[0] + v65.f64[0] * v65.f64[0]);
        if (_Q2.f64[0] >= 1.0e-12)
        {
          _Q2.f64[0] = 1.0 / _Q2.f64[0];
          *(_QWORD *)&_Q0.f64[1] = vextq_s8(*(int8x16_t *)v179, *(int8x16_t *)v179, 8uLL).u64[0];
          *(float64x2_t *)v179 = vmulq_n_f64(_Q0, _Q2.f64[0]);
          *(_QWORD *)&v180 = *(_OWORD *)&vmulq_f64(v65, _Q2);
        }
        else
        {
          v179[0] = 0;
          v179[1] = 0;
          v180 = 0.0;
        }
        v68 = v174;
        if (v174 >= v175)
        {
          v79 = 0xAAAAAAAAAAAAAAABLL * ((v174 - v173) >> 3) + 1;
          if (v79 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_207;
          if (0x5555555555555556 * ((v175 - v173) >> 3) > v79)
            v79 = 0x5555555555555556 * ((v175 - v173) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v175 - v173) >> 3) >= 0x555555555555555)
            v70 = 0xAAAAAAAAAAAAAAALL;
          else
            v70 = v79;
          if (v70)
          {
            if (v70 > 0xAAAAAAAAAAAAAAALL)
LABEL_208:
              sub_239418A80();
            v71 = (char *)operator new(24 * v70);
          }
          else
          {
            v71 = 0;
          }
          v80 = &v71[8 * ((v174 - v173) >> 3)];
          *(_OWORD *)v80 = *(_OWORD *)v179;
          *((float64_t *)v80 + 2) = v180;
          v81 = v80;
          if (v174 != v173)
          {
            do
            {
              v83 = *(_OWORD *)(v68 - 24);
              *((_QWORD *)v81 - 1) = *((_QWORD *)v68 - 1);
              *(_OWORD *)(v81 - 24) = v83;
              v81 -= 24;
              v68 -= 24;
            }
            while (v68 != v173);
            goto LABEL_100;
          }
          goto LABEL_101;
        }
        v78 = *(_OWORD *)v179;
        *((float64_t *)v174 + 2) = v180;
        *(_OWORD *)v174 = v78;
        v61 = v174 + 24;
        goto LABEL_62;
      }
      v67 = 5;
    }
    (*((void (**)(void))*v66 + v67))();
    goto LABEL_79;
  }
LABEL_103:
  v84 = a3;
  if (v20 != v21)
  {
    v85 = 0;
    v86 = v162;
    if (v160 <= 1)
      v87 = 1;
    else
      v87 = v160;
    v161 = v162;
    v170 = v87;
    do
    {
      v89 = *((_QWORD *)v176 + v85);
      v90 = sub_2394A2EA8((uint64_t)a2, v89);
      v92 = v90;
      if (!v84 || *((unsigned __int8 *)v90 + 28) == v84)
      {
        if (!v86)
          goto LABEL_130;
        v93 = *(_OWORD *)(v90 + 1);
        v94 = *((_OWORD *)v90 + 1);
        v95 = (float64x2_t)vdupq_lane_s64(v93, 0);
        v96 = vmlaq_n_f64(vmulq_n_f64(a4[8], *(double *)v90), a4[10], *(double *)&v93);
        v91 = (float64x2_t)vdupq_lane_s64(v94, 0);
        v97 = vaddq_f64(a4[14], vmlaq_n_f64(v96, a4[12], *(double *)&v94));
        v98 = v97.f64[0] < -0.5 || v97.f64[0] > 0.5;
        *(_QWORD *)&v99 = *(_OWORD *)&vaddq_f64(a4[15], vmlaq_f64(vmlaq_f64(vmulq_n_f64(a4[9], *(double *)v90), v95, a4[11]), v91, a4[13]));
        _NF = v98 || v97.f64[1] < -0.5;
        v101 = _NF || v97.f64[1] > 0.5;
        v102 = v101 || v99 < -0.5;
        if (!v102 && v99 <= 0.5)
        {
LABEL_130:
          v105 = *(char **)(a1 + 16);
          v104 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v105 >= v104)
          {
            v107 = (char *)*v168;
            v108 = v105 - (_BYTE *)*v168;
            v109 = v108 >> 3;
            v110 = (v108 >> 3) + 1;
            if (v110 >> 61)
              sub_2394189F8();
            v111 = v104 - (_QWORD)v107;
            if (v111 >> 2 > v110)
              v110 = v111 >> 2;
            if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
              v112 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v112 = v110;
            if (v112)
            {
              if (v112 >> 61)
                sub_239418A80();
              v113 = operator new(8 * v112);
            }
            else
            {
              v113 = 0;
            }
            v114 = &v113[8 * v109];
            *v114 = v89;
            v106 = v114 + 1;
            if (v105 != v107)
            {
              v115 = v105 - 8 - v107;
              if (v115 < 0x58)
                goto LABEL_223;
              if ((unint64_t)(v105 - &v113[v108]) < 0x20)
                goto LABEL_223;
              v116 = (v115 >> 3) + 1;
              v117 = (float64x2_t *)&v113[8 * v109 - 16];
              v118 = (float64x2_t *)(v105 - 16);
              v119 = v116 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v91 = v118[-1];
                v120 = *v118;
                v117[-1] = v91;
                *v117 = v120;
                v117 -= 2;
                v118 -= 2;
                v119 -= 4;
              }
              while (v119);
              v114 -= v116 & 0x3FFFFFFFFFFFFFFCLL;
              v105 -= 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
              if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_223:
                do
                {
                  v121 = *((_QWORD *)v105 - 1);
                  v105 -= 8;
                  *--v114 = v121;
                }
                while (v105 != v107);
              }
            }
            *(_QWORD *)(a1 + 8) = v114;
            *(_QWORD *)(a1 + 16) = v106;
            *(_QWORD *)(a1 + 24) = &v113[8 * v112];
            if (v107)
              operator delete(v107);
            v84 = v169;
            v86 = v161;
          }
          else
          {
            *(_QWORD *)v105 = v89;
            v106 = v105 + 8;
          }
          *(_QWORD *)(a1 + 16) = v106;
          v122 = *(int8x16_t *)v92;
          *(_QWORD *)&v91.f64[0] = v92[2];
          v124 = *(int8x16_t **)(a1 + 40);
          v123 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v124 >= v123)
          {
            v126 = *(int8x16_t **)(a1 + 32);
            v127 = ((char *)v124 - (char *)v126) >> 5;
            v128 = v127 + 1;
            if ((unint64_t)(v127 + 1) >> 59)
              sub_2394189F8();
            v129 = v123 - (_QWORD)v126;
            if (v129 >> 4 > v128)
              v128 = v129 >> 4;
            if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFE0)
              v130 = 0x7FFFFFFFFFFFFFFLL;
            else
              v130 = v128;
            if (v130)
            {
              v163 = v91;
              v165 = *(int8x16_t *)v92;
              if (v130 >> 59)
                sub_239418A80();
              v131 = (char *)operator new(32 * v130);
              v91 = v163;
              v122 = v165;
            }
            else
            {
              v131 = 0;
            }
            v132 = (int8x16_t *)&v131[32 * v127];
            *v132 = v122;
            v132[1] = (int8x16_t)v91;
            v133 = v132;
            if (v124 != v126)
            {
              do
              {
                v122 = v124[-2];
                v91 = (float64x2_t)v124[-1];
                v124 -= 2;
                v133[-2] = v122;
                v133[-1] = (int8x16_t)v91;
                v133 -= 2;
              }
              while (v124 != v126);
              v124 = *(int8x16_t **)(a1 + 32);
            }
            v125 = v132 + 2;
            *(_QWORD *)(a1 + 32) = v133;
            *(_QWORD *)(a1 + 40) = v132 + 2;
            *(_QWORD *)(a1 + 48) = &v131[32 * v130];
            if (v124)
              operator delete(v124);
          }
          else
          {
            *v124 = v122;
            v124[1] = (int8x16_t)v91;
            v125 = v124 + 2;
          }
          *(_QWORD *)(a1 + 40) = v125;
          v122.i64[0] = v92[3];
          v135 = *(_DWORD **)(a1 + 64);
          v134 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v135 >= v134)
          {
            v137 = *(_DWORD **)(a1 + 56);
            v138 = v135 - v137;
            v139 = v138 + 1;
            if ((unint64_t)(v138 + 1) >> 62)
              sub_2394189F8();
            v140 = v134 - (_QWORD)v137;
            if (v140 >> 1 > v139)
              v139 = v140 >> 1;
            if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
              v141 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v141 = v139;
            if (v141)
            {
              v166 = v122;
              if (v141 >> 62)
                sub_239418A80();
              v142 = (char *)operator new(4 * v141);
              v122 = v166;
            }
            else
            {
              v142 = 0;
            }
            v143 = &v142[4 * v138];
            *(_DWORD *)v143 = vmovn_s16((int16x8_t)vzip1q_s8(v122, v122)).u32[0];
            v136 = v143 + 4;
            if (v135 != v137)
            {
              do
              {
                v144 = *--v135;
                *((_DWORD *)v143 - 1) = v144;
                v143 -= 4;
              }
              while (v135 != v137);
              v135 = *(_DWORD **)(a1 + 56);
            }
            *(_QWORD *)(a1 + 56) = v143;
            *(_QWORD *)(a1 + 64) = v136;
            *(_QWORD *)(a1 + 72) = &v142[4 * v141];
            if (v135)
              operator delete(v135);
          }
          else
          {
            *v135 = vmovn_s16((int16x8_t)vzip1q_s8(v122, v122)).u32[0];
            v136 = v135 + 1;
          }
          *(_QWORD *)(a1 + 64) = v136;
          v145 = (float64_t *)&v173[24 * v85];
          v146 = *(_OWORD *)v145;
          v91.f64[0] = v145[2];
          v148 = *(char **)(a1 + 88);
          v147 = *(_QWORD *)(a1 + 96);
          if ((unint64_t)v148 < v147)
          {
            *(_OWORD *)v148 = v146;
            *((float64x2_t *)v148 + 1) = v91;
            v88 = v148 + 32;
          }
          else
          {
            v149 = *(char **)(a1 + 80);
            v150 = (v148 - v149) >> 5;
            v151 = v150 + 1;
            if ((unint64_t)(v150 + 1) >> 59)
              sub_2394189F8();
            v152 = v147 - (_QWORD)v149;
            if (v152 >> 4 > v151)
              v151 = v152 >> 4;
            if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFE0)
              v153 = 0x7FFFFFFFFFFFFFFLL;
            else
              v153 = v151;
            if (v153)
            {
              v164 = v91;
              v167 = v146;
              if (v153 >> 59)
                sub_239418A80();
              v154 = (char *)operator new(32 * v153);
              v91 = v164;
              v146 = v167;
            }
            else
            {
              v154 = 0;
            }
            v155 = &v154[32 * v150];
            *(_OWORD *)v155 = v146;
            *((float64x2_t *)v155 + 1) = v91;
            v156 = v155;
            if (v148 != v149)
            {
              do
              {
                v157 = *((_OWORD *)v148 - 2);
                v158 = *((_OWORD *)v148 - 1);
                v148 -= 32;
                *((_OWORD *)v156 - 2) = v157;
                *((_OWORD *)v156 - 1) = v158;
                v156 -= 32;
              }
              while (v148 != v149);
              v148 = *(char **)(a1 + 80);
            }
            v88 = v155 + 32;
            *(_QWORD *)(a1 + 80) = v156;
            *(_QWORD *)(a1 + 88) = v155 + 32;
            *(_QWORD *)(a1 + 96) = &v154[32 * v153];
            if (v148)
              operator delete(v148);
          }
          *(_QWORD *)(a1 + 88) = v88;
          v87 = v170;
        }
      }
      ++v85;
    }
    while (v85 != v87);
  }
  *(_QWORD *)a1 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 5;
  if (v173)
    operator delete(v173);
  if (v176)
  {
    v177 = v176;
    operator delete(v176);
  }
  return a1;
}

void sub_239A6CBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  _QWORD *v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  sub_239420950((uint64_t)&a29);
  if (__p)
    operator delete(__p);
  if (a23)
  {
    operator delete(a23);
    v34 = (void *)v32[10];
    if (!v34)
    {
LABEL_5:
      v35 = (void *)v32[7];
      if (!v35)
        goto LABEL_6;
      goto LABEL_13;
    }
  }
  else
  {
    v34 = (void *)v32[10];
    if (!v34)
      goto LABEL_5;
  }
  v32[11] = v34;
  operator delete(v34);
  v35 = (void *)v32[7];
  if (!v35)
  {
LABEL_6:
    v36 = (void *)v32[4];
    if (!v36)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_13:
  v32[8] = v35;
  operator delete(v35);
  v36 = (void *)v32[4];
  if (!v36)
  {
LABEL_8:
    v37 = *a15;
    if (*a15)
    {
      v32[2] = v37;
      operator delete(v37);
    }
    _Unwind_Resume(a1);
  }
LABEL_7:
  v32[5] = v36;
  operator delete(v36);
  goto LABEL_8;
}

uint64_t sub_239A6CCD8(uint64_t *a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *i;
  _QWORD *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = *(char **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v5 = a1[7];
  if (v5 > (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v4) >> 3)
  {
    if (v5 >> 61)
LABEL_45:
      sub_2394189F8();
    v6 = 8 * v5;
    v7 = (char *)operator new(8 * v5);
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = &v7[v6];
    if (v4)
      operator delete(v4);
  }
  for (i = (uint64_t *)a1[6]; i; i = (uint64_t *)*i)
  {
    if (*((_BYTE *)i + 51) == 2)
    {
      v10 = (uint64_t **)i[16];
      if (v10)
      {
        v11 = 0;
        v12 = *a1;
        while (1)
        {
          v13 = *((unsigned int *)v10 + 5);
          if ((a1[1] - *a1) >> 6 > v13 && *(_DWORD *)(v12 + (v13 << 6)) != -1 && (_DWORD)v13 != -1)
          {
            if (*(_BYTE *)(v12 + (v13 << 6) + 59) == 2)
              ++v11;
            if (v11 > 1)
              break;
          }
          v10 = (uint64_t **)*v10;
          if (!v10)
            goto LABEL_9;
        }
        v16 = *(char **)(a2 + 8);
        v15 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v16 < v15)
        {
          *(_QWORD *)v16 = *((unsigned int *)i + 4);
          v9 = v16 + 8;
        }
        else
        {
          v17 = *(char **)a2;
          v18 = (uint64_t)&v16[-*(_QWORD *)a2];
          v19 = v18 >> 3;
          v20 = (v18 >> 3) + 1;
          if (v20 >> 61)
            goto LABEL_45;
          v21 = v15 - (_QWORD)v17;
          if (v21 >> 2 > v20)
            v20 = v21 >> 2;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            if (v22 >> 61)
              sub_239418A80();
            v23 = operator new(8 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[8 * v19];
          *v24 = *((unsigned int *)i + 4);
          v9 = v24 + 1;
          if (v16 != v17)
          {
            v25 = v16 - 8 - v17;
            if (v25 < 0x58)
              goto LABEL_49;
            if ((unint64_t)(v16 - &v23[v18]) < 0x20)
              goto LABEL_49;
            v26 = (v25 >> 3) + 1;
            v27 = &v23[8 * v19 - 16];
            v28 = v16 - 16;
            v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v30 = *(_OWORD *)v28;
              *(v27 - 1) = *((_OWORD *)v28 - 1);
              *v27 = v30;
              v27 -= 2;
              v28 -= 32;
              v29 -= 4;
            }
            while (v29);
            v24 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
            v16 -= 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
            if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_49:
              do
              {
                v31 = *((_QWORD *)v16 - 1);
                v16 -= 8;
                *--v24 = v31;
              }
              while (v16 != v17);
            }
          }
          *(_QWORD *)a2 = v24;
          *(_QWORD *)(a2 + 8) = v9;
          *(_QWORD *)(a2 + 16) = &v23[8 * v22];
          if (v17)
            operator delete(v17);
        }
        *(_QWORD *)(a2 + 8) = v9;
      }
    }
LABEL_9:
    ;
  }
  return std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
}

void sub_239A6CF30(uint64_t a1, unsigned int a2, uint64_t a3, char a4)
{
  char *v4;
  unint64_t v5;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t **v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v4 = *(char **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = a2;
      if (v5 <= a2)
        v9 = a2 % v5;
    }
    else
    {
      v9 = ((_DWORD)v5 - 1) & a2;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)(a1 + 72) + 8 * v9);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = v5 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == a2)
            {
              if (*((_DWORD *)v11 + 4) == a2)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == a2)
            break;
          if (v13 >= v5)
            v13 %= v5;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (uint64_t *)*v11;
          if (!v11)
            return;
        }
        if (*((_DWORD *)v11 + 4) != a2)
          goto LABEL_11;
LABEL_22:
        v15 = v11[57];
        if (v15 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v4) >> 3)
        {
          if (v15 >> 61)
LABEL_59:
            sub_2394189F8();
          v16 = 8 * v15;
          v17 = (char *)operator new(8 * v15);
          *(_QWORD *)a3 = v17;
          *(_QWORD *)(a3 + 8) = v17;
          *(_QWORD *)(a3 + 16) = &v17[v16];
          if (v4)
            operator delete(v4);
        }
        v18 = (uint64_t **)v11[56];
        if (v18)
        {
          v19 = *(char **)(a3 + 8);
          while (1)
          {
            v21 = *(_QWORD *)(a3 + 16);
            if ((unint64_t)v19 >= v21)
              break;
            *(_QWORD *)v19 = *((unsigned int *)v18 + 4);
            v20 = v19 + 8;
LABEL_29:
            *(_QWORD *)(a3 + 8) = v20;
            v18 = (uint64_t **)*v18;
            v19 = v20;
            if (!v18)
              goto LABEL_56;
          }
          v22 = *(char **)a3;
          v23 = (uint64_t)&v19[-*(_QWORD *)a3];
          v24 = v23 >> 3;
          v25 = (v23 >> 3) + 1;
          if (v25 >> 61)
            goto LABEL_59;
          v26 = v21 - (_QWORD)v22;
          if (v26 >> 2 > v25)
            v25 = v26 >> 2;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            if (v27 >> 61)
              sub_239418A80();
            v28 = operator new(8 * v27);
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[8 * v24];
          *v29 = *((unsigned int *)v18 + 4);
          v20 = (char *)(v29 + 1);
          if (v19 == v22)
            goto LABEL_54;
          v30 = v19 - 8 - v22;
          if (v30 < 0x168)
          {
            v31 = v19;
            goto LABEL_53;
          }
          if (&v28[v23 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v28[v23 - 8])
          {
            v31 = v19;
          }
          else
          {
            if (&v19[-(v30 & 0xFFFFFFFFFFFFFFF8) - 8] <= v19 - 8)
            {
              if ((unint64_t)(v19 - v28 - v23) < 0x20)
              {
                v31 = v19;
                goto LABEL_53;
              }
              v32 = (v30 >> 3) + 1;
              v31 = &v19[-8 * (v32 & 0x3FFFFFFFFFFFFFFCLL)];
              v33 = &v28[8 * v24 - 16];
              v34 = v19 - 16;
              v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 4;
              }
              while (v35);
              v29 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
              if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_53;
LABEL_54:
              *(_QWORD *)a3 = v29;
              *(_QWORD *)(a3 + 8) = v20;
              *(_QWORD *)(a3 + 16) = &v28[8 * v27];
              if (v22)
                operator delete(v22);
              goto LABEL_29;
            }
            v31 = v19;
          }
          do
          {
LABEL_53:
            v37 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v29 = v37;
          }
          while (v31 != v22);
          goto LABEL_54;
        }
LABEL_56:
        if ((a4 & 1) != 0)
          std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
      }
    }
  }
}

void sub_239A6D234(unint64_t *a1, void *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v5;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 *v31;
  _OWORD *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;

  if (a4 < 1)
    return;
  v5 = a3;
  v8 = *a1;
  v9 = (char *)a1[1];
  v10 = (uint64_t)a2 - *a1;
  v11 = v10 >> 3;
  v12 = (char *)(*a1 + (v10 & 0xFFFFFFFFFFFFFFF8));
  v13 = a1[2];
  if (a4 > (uint64_t)(v13 - (_QWORD)v9) >> 3)
  {
    v14 = a4 + ((uint64_t)&v9[-v8] >> 3);
    if (v14 >> 61)
      sub_2394189F8();
    v15 = v13 - v8;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        sub_239418A80();
      v17 = operator new(8 * v16);
    }
    else
    {
      v17 = 0;
    }
    v24 = &v17[8 * v11];
    v25 = 8 * a4;
    v26 = (char *)&v24[a4];
    v27 = v24;
    do
    {
      *v27++ = v5[2];
      v5 = (_QWORD *)*v5;
      v25 -= 8;
    }
    while (v25);
    if ((void *)v8 == a2)
      goto LABEL_34;
    if ((unint64_t)(v10 - 8) >= 0x68)
    {
      v28 = v12;
      if ((v10 & 0xFFFFFFFFFFFFFFF8) + v8 - (unint64_t)&v17[v10 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
      {
        v29 = ((unint64_t)(v10 - 8) >> 3) + 1;
        v28 = &v12[-8 * (v29 & 0x3FFFFFFFFFFFFFFCLL)];
        v30 = 8 * (v10 >> 3) - 16;
        v31 = (__int128 *)(v8 + v30);
        v32 = &v17[v30];
        v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *v31;
          *(v32 - 1) = *(v31 - 1);
          *v32 = v34;
          v31 -= 2;
          v32 -= 2;
          v33 -= 4;
        }
        while (v33);
        v24 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
        if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_34;
      }
    }
    else
    {
      v28 = v12;
    }
    do
    {
      v35 = *((_QWORD *)v28 - 1);
      v28 -= 8;
      *--v24 = v35;
    }
    while (v28 != (char *)v8);
LABEL_34:
    v36 = &v17[8 * v16];
    if (v9 != v12)
      memmove(v26, v12, v9 - v12);
    *a1 = (unint64_t)v24;
    a1[1] = (unint64_t)&v26[v9 - v12];
    a1[2] = (unint64_t)v36;
    if (v8)
      operator delete((void *)v8);
    return;
  }
  v18 = a4 + 1;
  v19 = a3;
  do
  {
    v19 = (_QWORD *)*v19;
    --v18;
  }
  while (v18 > 1);
  v20 = (v9 - v12) >> 3;
  if (v20 < a4)
  {
    if (v9 - v12 < 1)
    {
      v19 = a3;
      if (a3)
      {
LABEL_19:
        v22 = v19;
        v23 = (char *)a1[1];
        do
        {
          *(_QWORD *)v23 = v22[2];
          v23 += 8;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
LABEL_40:
        a1[1] = (unint64_t)v23;
        if (v20 < 1)
          return;
        goto LABEL_41;
      }
    }
    else
    {
      v21 = v20 + 1;
      v19 = a3;
      do
      {
        v19 = (_QWORD *)*v19;
        --v21;
      }
      while (v21 > 1);
      if (v19)
        goto LABEL_19;
    }
    v23 = (char *)a1[1];
    goto LABEL_40;
  }
  v23 = (char *)a1[1];
LABEL_41:
  v37 = &v12[8 * a4];
  v38 = v23 - v37;
  v39 = (v23 - v37) >> 3;
  v40 = &v23[-8 * a4];
  v41 = v23;
  if (v40 < v9)
  {
    v42 = (v10 & 0xFFFFFFFFFFFFFFF8) + v38;
    v43 = (char *)(v42 + v8);
    v44 = v42 + v8 + 8;
    if ((unint64_t)v9 > v44)
      v44 = (unint64_t)v9;
    v45 = v44 + ~v8 - v42;
    v46 = v23 - v43;
    v47 = v45 >= 0x58 && v46 > 0x1F;
    v41 = v23;
    if (!v47)
      goto LABEL_62;
    v48 = (v45 >> 3) + 1;
    v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
    v40 += v49;
    v50 = v23 + 16;
    v51 = (__int128 *)(8 * v39 + 8 * v11 + v8 + 16);
    v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v53 = *v51;
      *(v50 - 1) = *(v51 - 1);
      *v50 = v53;
      v50 += 2;
      v51 += 2;
      v52 -= 4;
    }
    while (v52);
    v41 = &v23[v49];
    if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_62:
      do
      {
        v54 = *(_QWORD *)v40;
        v40 += 8;
        *(_QWORD *)v41 = v54;
        v41 += 8;
      }
      while (v40 < v9);
    }
  }
  a1[1] = (unint64_t)v41;
  if (v23 != v37)
    memmove(&v23[-8 * v39], v12, v38);
  for (; v5 != v19; v5 = (_QWORD *)*v5)
  {
    *(_QWORD *)v12 = v5[2];
    v12 += 8;
  }
}

uint64_t sub_239A6D58C(uint64_t result, unsigned int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(result + 40);
  if (!v4)
    return result;
  v6 = (uint64_t *)result;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = a2;
    if (v4 <= a2)
      v8 = a2 % v4;
  }
  else
  {
    v8 = ((_DWORD)v4 - 1) & a2;
  }
  v9 = *(uint64_t ***)(*(_QWORD *)(result + 32) + 8 * v8);
  if (!v9)
    return result;
  v10 = *v9;
  if (!v10)
    return result;
  if (v7.u32[0] < 2uLL)
  {
    v11 = v4 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == a2)
      {
        if (*((_DWORD *)v10 + 4) == a2)
          goto LABEL_22;
      }
      else if ((v13 & v11) != v8)
      {
        return result;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        return result;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == a2)
      break;
    if (v12 >= v4)
      v12 %= v4;
    if (v12 != v8)
      return result;
LABEL_11:
    v10 = (uint64_t *)*v10;
    if (!v10)
      return result;
  }
  if (*((_DWORD *)v10 + 4) != a2)
    goto LABEL_11;
LABEL_22:
  v14 = (uint64_t **)v10[16];
  if (v14)
  {
    if ((a3 & 1) != 0)
    {
      while (1)
      {
        v19 = *((unsigned int *)v14 + 5);
        v20 = *v6;
        if (v19 >= (v6[1] - *v6) >> 6)
          break;
        if (*(_DWORD *)(v20 + (v19 << 6)) == -1 || (_DWORD)v19 == -1)
          break;
        v22 = v20 + (v19 << 6);
        if (*(_BYTE *)(v22 + 59) != 2)
          goto LABEL_47;
        v24 = *((unsigned int *)v14 + 5);
        v23 = *(_QWORD *)(a4 + 24);
        if (!v23)
LABEL_44:
          sub_2394172E0();
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v23 + 48))(v23, &v24, v22 + 8);
        if ((_DWORD)result)
        {
LABEL_47:
          v14 = (uint64_t **)*v14;
          if (v14)
            continue;
        }
        return result;
      }
    }
    else
    {
      while (1)
      {
        v15 = *((unsigned int *)v14 + 5);
        v16 = *v6;
        if (v15 >= (v6[1] - *v6) >> 6)
          break;
        if (*(_DWORD *)(v16 + (v15 << 6)) == -1 || (_DWORD)v15 == -1)
          break;
        v24 = *((unsigned int *)v14 + 5);
        v18 = *(_QWORD *)(a4 + 24);
        if (!v18)
          goto LABEL_44;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v18 + 48))(v18, &v24, v16 + (v15 << 6) + 8);
        if ((_DWORD)result)
        {
          v14 = (uint64_t **)*v14;
          if (v14)
            continue;
        }
        return result;
      }
    }
    sub_239A444D4((uint64_t)"unknown file", 446, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  return result;
}

void sub_239A6D78C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A6D7A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250AF2B50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_239A6D7E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF2B50;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239A6D808(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  float64x2_t v6;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t *v16;
  float64x2_t v18;
  float64x2_t v21;
  unint64_t v22;
  float64x2_t *v23;

  if (*(_BYTE *)(a3 + 51) == 2)
  {
    v4 = sub_2394650AC(a1[2], *(unsigned int *)(a3 + 8));
    *(_QWORD *)&_Q0.f64[0] = v4[10];
    v6 = *((float64x2_t *)v4 + 6);
    _Q4 = *((float64x2_t *)v4 + 8);
    *(_QWORD *)&v8.f64[0] = v4[22];
    *(_QWORD *)&v8.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v8);
    v9 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v4 + 10));
    *(_QWORD *)&_Q0.f64[1] = v4[14];
    v10 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v4 + 4), (int64x2_t)v6), v9.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v4 + 4), (int64x2_t)v6), v9, 1), _Q0, v8.f64[0]);
    _Q1 = vmulq_f64(_Q4, v9);
    _Q0.f64[0] = v9.f64[1];
    __asm { FMLA            D1, D0, V4.D[1] }
    _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], *((double *)v4 + 18), v8.f64[0]);
    v16 = (float64x2_t *)a1[1];
    v6.f64[0] = v16[1].f64[0];
    _Q0 = vsubq_f64(v10, *v16);
    v18 = vsubq_f64(_Q1, v6);
    _Q2 = vmulq_f64(_Q0, _Q0);
    _Q3.f64[0] = _Q0.f64[1];
    __asm { FMLA            D2, D3, V0.D[1] }
    _Q2.f64[0] = sqrt(vmlad_n_f64(_Q2.f64[0], v18.f64[0], v18.f64[0]));
    if (_Q2.f64[0] >= 1.0e-12)
    {
      _Q3 = (float64x2_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL);
      _Q2.f64[0] = 1.0 / _Q2.f64[0];
      v18 = vmulq_f64(v18, _Q2);
      _Q0.f64[1] = _Q3.f64[0];
      v21 = vmulq_n_f64(_Q0, _Q2.f64[0]);
      v22 = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
    }
    else
    {
      v21.f64[0] = 0.0;
      v22 = 0;
      v18.f64[0] = 0.0;
    }
    v23 = (float64x2_t *)a1[3];
    _Q3.f64[0] = v23[1].f64[0];
    *(_QWORD *)&v21.f64[1] = v22;
    *v23 = vaddq_f64(v21, *v23);
    *(_QWORD *)&v23[1].f64[0] = *(_OWORD *)&vaddq_f64(v18, _Q3);
  }
  return 1;
}

uint64_t CPGSfmWorldTracksRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 112);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGSfmWorldTracksRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 112);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGSfmWorldTracksGetCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t CPGSfmWorldTracksGetIdentifiers(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(_QWORD *)(a1 + 16);
  else
    return 0;
}

uint64_t CPGSfmWorldTracksGetPositions(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(_QWORD *)(a1 + 40);
  else
    return 0;
}

uint64_t CPGSfmWorldTracksGetColors(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(_QWORD *)(a1 + 64);
  else
    return 0;
}

uint64_t CPGSfmWorldTracksGetNormals(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(_QWORD *)(a1 + 88);
  else
    return 0;
}

uint64_t sub_239A6D9C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A6DA20(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGSnapshotInfoRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGSnapshotInfoRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t CPGSnapshotInfoLoadFromURL(const __CFURL *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  char v20;

  sub_2396CA024(a1, (uint64_t)v18);
  if (!v20)
    return 4294967294;
  if (SHIBYTE(v19) < 0)
  {
    sub_23941A7F8(__p, v18[0], (unint64_t)v18[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v18;
    v17 = v19;
  }
  v14 = 0;
  v15 = 0;
  v4 = sub_239B20B34((uint64_t)__p, (uint64_t)&v14) - 1;
  if (v4 >= 3)
  {
    v6 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
    if (v6)
    {
      v7 = v14;
      v8 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v6[1] = v7;
      v6[2] = v8;
      *((_DWORD *)v6 + 6) = 1;
      *v6 = &off_250AF2B98;
    }
    v3 = 0;
    *a2 = v6;
    v5 = v15;
    if (!v15)
      goto LABEL_18;
  }
  else
  {
    v3 = dword_239F0CD98[v4];
    v5 = v15;
    if (!v15)
      goto LABEL_18;
  }
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_18:
  if (SHIBYTE(v17) < 0)
LABEL_19:
    operator delete(__p[0]);
LABEL_20:
  if (v20 && SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  return v3;
}

void sub_239A6DC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a24)
  {
    if (a23 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL CPGSnapshotInfoCheckSessionOptionsCompatibility(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  return *(_DWORD *)(a2 + 152) == *(_DWORD *)(v2 + 100)
      && *(_DWORD *)(a2 + 156) == *(_DWORD *)(v2 + 104)
      && *(_DWORD *)(a2 + 160) == *(_DWORD *)(v2 + 108)
      && *(_DWORD *)(a2 + 164) == *(_DWORD *)(v2 + 112)
      && *(_DWORD *)(a2 + 168) == *(_DWORD *)(v2 + 116)
      && *(_DWORD *)(a2 + 172) == *(_DWORD *)(v2 + 120)
      && *(unsigned __int8 *)(a2 + 176) == *(unsigned __int8 *)(v2 + 124)
      && *(unsigned __int8 *)(a2 + 177) == *(unsigned __int8 *)(v2 + 125)
      && *(unsigned __int8 *)(a2 + 178) == *(unsigned __int8 *)(v2 + 126)
      && *(unsigned __int8 *)(a2 + 179) == *(unsigned __int8 *)(v2 + 127)
      && *(_DWORD *)(a2 + 36) == *(_DWORD *)(v2 + 96)
      && *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(v2 + 80)
      && *(_DWORD *)(a2 + 80) == *(_DWORD *)(v2 + 84)
      && *(_DWORD *)(a2 + 84) == *(_DWORD *)(v2 + 88)
      && *(unsigned __int8 *)(a2 + 42) == *(unsigned __int8 *)(v2 + 92);
}

BOOL CPGSnapshotInfoCheckDeviceCompatibility(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 8) + 52) == 1;
}

uint64_t CPGSnapshotInfoGetNumberOfSamples(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16)) >> 3;
}

uint64_t sub_239A6DD94(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)(a1 + 296) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_239A6DDD4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)(a1 + 296) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x23B83E31CLL);
}

uint64_t CPGTemporalDepthPointFrameCreateWithTimeCameraAndPointCloud(uint64_t a1, _OWORD *a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v10[8];

  v5 = a4[5];
  v10[4] = a4[4];
  v10[5] = v5;
  v6 = a4[7];
  v10[6] = a4[6];
  v10[7] = v6;
  v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  v8 = a4[3];
  v10[2] = a4[2];
  v10[3] = v8;
  return CPGTemporalDepthPointFrameCreateWithSequenceIDTimeCameraAndPointCloud(-1, a1, a2, a3, v10, a5);
}

uint64_t CPGTemporalDepthPointFrameCreateWithSequenceIDTimeCameraAndPointCloud(int a1, uint64_t a2, _OWORD *a3, uint64_t a4, __int128 *a5, _QWORD *a6)
{
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  std::string v52;
  char v53;
  std::string __p;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  char *v71;
  char *v72;
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 4294967294;
  sub_23962A000(a2, &v52);
  if (!v53)
    return 4294967294;
  v11 = sub_2396DAA08((unsigned __int8 **)&v52);
  v12 = 4294967294;
  if (a4 && a3 && ((v11 ^ 1) & 1) == 0)
  {
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      sub_23941A7F8(&__p, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
    else
      __p = v52;
    v13 = a3[14];
    v67 = a3[13];
    v68 = v13;
    v69 = a3[15];
    v14 = a3[10];
    v63 = a3[9];
    v64 = v14;
    v15 = a3[12];
    v65 = a3[11];
    v66 = v15;
    v16 = a3[6];
    v59 = a3[5];
    v60 = v16;
    v17 = a3[8];
    v61 = a3[7];
    v62 = v17;
    v18 = a3[2];
    v55 = a3[1];
    v56 = v18;
    v19 = a3[4];
    v57 = a3[3];
    v58 = v19;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v21 = *(_QWORD *)(a4 + 8);
    v20 = *(_QWORD *)(a4 + 16);
    v22 = v20 - v21;
    if (v20 == v21)
    {
      v27 = 0;
      v32 = 0;
      v25 = 0;
    }
    else
    {
      v23 = 0xCCCCCCCCCCCCCCCDLL * (v22 >> 3);
      if (v23 >= 0x666666666666667)
        sub_2394189F8();
      v24 = (char *)operator new(v22);
      v25 = v24;
      v26 = 0;
      v70 = v24;
      v71 = v24;
      v27 = &v24[40 * v23];
      v72 = v27;
      do
      {
        v28 = v21 + v26;
        v29 = &v24[v26];
        v30 = *(_OWORD *)(v21 + v26);
        *((_DWORD *)v29 + 4) = *(_DWORD *)(v21 + v26 + 16);
        *(_OWORD *)v29 = v30;
        *(_QWORD *)(v29 + 20) = *(_QWORD *)(v21 + v26 + 20);
        v31 = *(_QWORD *)(v21 + v26 + 28);
        *((_DWORD *)v29 + 9) = *(_DWORD *)(v21 + v26 + 36);
        *(_QWORD *)(v29 + 28) = v31;
        v26 += 40;
      }
      while (v28 + 40 != v20);
      v32 = &v24[v26];
      v71 = &v24[v26];
    }
    v33 = *(_BYTE *)(a4 + 32);
    v73 = v33;
    v34 = a5[5];
    v78 = a5[4];
    v79 = v34;
    v35 = a5[7];
    v80 = a5[6];
    v81 = v35;
    v36 = a5[1];
    v74 = *a5;
    v75 = v36;
    v37 = a5[3];
    v76 = a5[2];
    v77 = v37;
    v82 = a1;
    v38 = (char *)operator new(0x1D0uLL, MEMORY[0x24BEDB6B8]);
    v39 = v38;
    if (v38)
    {
      *(std::string *)(v38 + 16) = __p;
      memset(&__p, 0, sizeof(__p));
      v40 = a3[14];
      *((_OWORD *)v38 + 15) = a3[13];
      *((_OWORD *)v38 + 16) = v40;
      *((_OWORD *)v38 + 17) = a3[15];
      v41 = a3[10];
      *((_OWORD *)v38 + 11) = a3[9];
      *((_OWORD *)v38 + 12) = v41;
      v42 = a3[12];
      *((_OWORD *)v38 + 13) = a3[11];
      *((_OWORD *)v38 + 14) = v42;
      v43 = a3[6];
      *((_OWORD *)v38 + 7) = a3[5];
      *((_OWORD *)v38 + 8) = v43;
      v44 = a3[8];
      *((_OWORD *)v38 + 9) = a3[7];
      *((_OWORD *)v38 + 10) = v44;
      v45 = a3[2];
      *((_OWORD *)v38 + 3) = a3[1];
      *((_OWORD *)v38 + 4) = v45;
      v46 = a3[4];
      *((_OWORD *)v38 + 5) = a3[3];
      *((_OWORD *)v38 + 6) = v46;
      *((_QWORD *)v38 + 36) = v25;
      *((_QWORD *)v38 + 37) = v32;
      *((_QWORD *)v38 + 38) = v27;
      v71 = 0;
      v72 = 0;
      v70 = 0;
      v38[312] = v33;
      v47 = v81;
      *((_OWORD *)v38 + 26) = v80;
      *((_OWORD *)v38 + 27) = v47;
      *((_DWORD *)v38 + 112) = v82;
      v48 = v77;
      *((_OWORD *)v38 + 22) = v76;
      *((_OWORD *)v38 + 23) = v48;
      v49 = v79;
      *((_OWORD *)v38 + 24) = v78;
      *((_OWORD *)v38 + 25) = v49;
      v50 = v75;
      *((_OWORD *)v38 + 20) = v74;
      *((_OWORD *)v38 + 21) = v50;
      *((_DWORD *)v38 + 113) = 1;
      *(_QWORD *)v38 = off_250AF2BB8;
    }
    else if (v25)
    {
      v71 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v12 = 0;
    *a6 = v39;
  }
  if (v53 && SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  return v12;
}

void sub_239A6E1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t CPGTemporalDepthPointFrameRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 452);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGTemporalDepthPointFrameRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 452);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

CFStringRef CPGTemporalDepthPointFrameCopyTimestamp(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v1 = *(const char **)v1;
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, 0x8000100u);
}

uint64_t sub_239A6E28C(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 295) < 0)
        operator delete(v2[34]);
      free(v2[8]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_239A6E2FC(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;

  v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 295) < 0)
        operator delete(v2[34]);
      free(v2[8]);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A6E37C(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 295) < 0)
        operator delete(v2[34]);
      free(v2[8]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *sub_239A6E3EC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 295) < 0)
        operator delete(*(void **)(v2 + 272));
      free(*(void **)(v2 + 64));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t CPGUpdatedPosesRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 52);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t CPGUpdatedPosesRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 52);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

__CFArray *CPGUpdatedPosesCopySampleIDs(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t *i;
  CFNumberRef v4;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  for (i = *(uint64_t **)(a1 + 24); i; i = (uint64_t *)*i)
  {
    valuePtr = *((_DWORD *)i + 4);
    v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  return Mutable;
}

uint64_t CPGUpdatedPosesCopyCameraBySampleID(uint64_t a1, unsigned int a2, double **a3, double a4, __n128 a5, double a6, __n128 a7, double a8, __n128 a9)
{
  unint64_t v9;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int v19;
  BOOL v20;
  double *v21;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return 4294967294;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = a2;
    if (v9 <= a2)
      v12 = a2 % v9;
  }
  else
  {
    v12 = ((_DWORD)v9 - 1) & a2;
  }
  v13 = *(uint64_t ***)(*(_QWORD *)(a1 + 8) + 8 * v12);
  if (!v13)
    return 4294967294;
  v14 = *v13;
  if (!v14)
    return 4294967294;
  if (v11.u32[0] < 2uLL)
  {
    v15 = v9 - 1;
    while (1)
    {
      v17 = v14[1];
      if (v17 == a2)
      {
        if (*((_DWORD *)v14 + 4) == a2)
          goto LABEL_22;
      }
      else if ((v17 & v15) != v12)
      {
        return 4294967294;
      }
      v14 = (uint64_t *)*v14;
      if (!v14)
        return 4294967294;
    }
  }
  while (1)
  {
    v16 = v14[1];
    if (v16 == a2)
      break;
    if (v16 >= v9)
      v16 %= v9;
    if (v16 != v12)
      return 4294967294;
LABEL_11:
    v14 = (uint64_t *)*v14;
    if (!v14)
      return 4294967294;
  }
  if (*((_DWORD *)v14 + 4) != a2)
    goto LABEL_11;
LABEL_22:
  v19 = *((_DWORD *)v14 + 108);
  if (v19)
    v20 = v19 == 3;
  else
    v20 = 1;
  if (v20)
    v21 = 0;
  else
    v21 = sub_239A46464((uint64_t)(v14 + 3), *((double *)v14 + 28), a5, a6, a7, a8, a9);
  result = 0;
  *a3 = v21;
  return result;
}

uint64_t CPGUpdatedPosesCopyObjectTransformBySampleID(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[24];
  _BYTE v28[32];
  _BYTE v29[24];
  uint64_t v30;
  _BYTE v31[32];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 4294967294;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a2;
    if (v3 <= a2)
      v6 = a2 % v3;
  }
  else
  {
    v6 = ((_DWORD)v3 - 1) & a2;
  }
  v7 = *(uint64_t ***)(*(_QWORD *)(a1 + 8) + 8 * v6);
  if (!v7)
    return 4294967294;
  v8 = *v7;
  if (!v8)
    return 4294967294;
  if (v5.u32[0] < 2uLL)
  {
    v9 = v3 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == a2)
      {
        if (*((_DWORD *)v8 + 4) == a2)
          goto LABEL_23;
      }
      else if ((v11 & v9) != v6)
      {
        return 4294967294;
      }
      v8 = (uint64_t *)*v8;
      if (!v8)
        return 4294967294;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == a2)
      break;
    if (v10 >= v3)
      v10 %= v3;
    if (v10 != v6)
      return 4294967294;
LABEL_11:
    v8 = (uint64_t *)*v8;
    if (!v8)
      return 4294967294;
  }
  if (*((_DWORD *)v8 + 4) != a2)
    goto LABEL_11;
LABEL_23:
  v13 = *((_DWORD *)v8 + 108);
  if (v13 == 3 || v13 == 0)
  {
    if (*((_BYTE *)v8 + 568))
    {
      sub_239A444D4((uint64_t)"unknown file", 73, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    goto LABEL_29;
  }
  if (!*((_BYTE *)v8 + 568))
  {
LABEL_29:
    result = 0;
    *a3 = 0;
    return result;
  }
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  *(_QWORD *)&v29[16] = 0;
  *(_OWORD *)&v31[16] = 0u;
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)v28 = 0u;
  *(_OWORD *)&v27[8] = 0u;
  *(_QWORD *)v27 = 0x3FF0000000000000;
  *(_OWORD *)&v28[16] = 0x3FF0000000000000uLL;
  v30 = 0x3FF0000000000000;
  v32 = 0x3FF0000000000000;
  v15 = *(_OWORD *)(v8 + 55);
  v16 = v8[61];
  v17 = *(_OWORD *)(v8 + 59);
  v18 = v8[65];
  v19 = *(_OWORD *)(v8 + 63);
  *(_QWORD *)&v27[16] = v8[57];
  *(_OWORD *)v27 = v15;
  *(_OWORD *)&v28[8] = v17;
  *(_QWORD *)&v28[24] = v16;
  *(_OWORD *)&v29[8] = v19;
  v30 = v18;
  v20 = *(_OWORD *)(v8 + 67);
  *(_QWORD *)&v31[24] = v8[69];
  *(_OWORD *)&v31[8] = v20;
  sub_23962EC30((uint64_t)v27, &v33);
  v21 = operator new(0xA0uLL, MEMORY[0x24BEDB6B8]);
  v22 = v21;
  if (v21)
  {
    v23 = v38;
    v21[5] = v37;
    v21[6] = v23;
    v24 = v40;
    v21[7] = v39;
    v21[8] = v24;
    v25 = v34;
    v21[1] = v33;
    v21[2] = v25;
    v26 = v36;
    v21[3] = v35;
    v21[4] = v26;
    *((_DWORD *)v21 + 36) = 1;
    *(_QWORD *)v21 = &off_250AF2BF8;
  }
  result = 0;
  *a3 = v22;
  return result;
}

uint64_t CPGUpdatedPosesGetStateBySampleID(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 4294967294;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = ((_DWORD)v3 - 1) & a2;
  }
  v6 = *(uint64_t ***)(*(_QWORD *)(a1 + 8) + 8 * v5);
  if (!v6)
    return 4294967294;
  v7 = *v6;
  if (!v7)
    return 4294967294;
  if (v4.u32[0] < 2uLL)
  {
    v8 = v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v7 + 4) == a2)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return 4294967294;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        return 4294967294;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= v3)
      v9 %= v3;
    if (v9 != v5)
      return 4294967294;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      return 4294967294;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_11;
LABEL_22:
  v12 = *((_DWORD *)v7 + 108);
  result = 0;
  if (v12 <= 3)
    *a3 = v12;
  return result;
}

float CPGUpdatedPosesGetMapReadinessScore(uint64_t a1)
{
  return *(float *)(a1 + 48);
}

uint64_t CPGVersionNumberMajor()
{
  return 2;
}

uint64_t CPGVersionNumberMinor()
{
  return 57;
}

uint64_t CPGVersionNumberPatch()
{
  return 0;
}

const char *CPGVersionHash()
{
  return "000000";
}

uint64_t sub_239A6E998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (a3)
  {
    v9 = (unint64_t *)(a3 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  sub_239490944((char *)(a1 + 32), *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  *(_QWORD *)(a1 + 56) = a5;
  *(_QWORD *)(a1 + 64) = a6;
  *(_QWORD *)(a1 + 72) = 90;
  v11 = operator new(0x30uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_250AF2C18;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v12 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v11 + 3;
  *(_QWORD *)(a1 + 24) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return a1;
}

void sub_239A6EA90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  sub_23941A260(v3);
  sub_239A4D7C0(v2);
  sub_239A4D7C0(v1);
  _Unwind_Resume(a1);
}

void sub_239A6EABC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF2C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A6EACC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF2C18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239A6EAFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
        if (*(char *)(v3 - 33) < 0)
          operator delete(*(void **)(v3 - 56));
        v3 -= 56;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void sub_239A6EB88(uint64_t a1, const void **a2)
{
  int v3;
  size_t v4;
  unint64_t v5;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  void **v12;
  std::string *v13;
  std::string *v14;
  void *v15;
  void **__dst;
  size_t v17;
  unint64_t v18;
  void *v19[2];
  char v20;
  void *__p;
  std::string *v22;

  if (!*(_BYTE *)(a1 + 64))
    return;
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = v4 + 4;
  if (v4 + 4 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v17 = v4 + 4;
    v18 = v9 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v18) = v4 + 4;
    if (!v4)
      goto LABEL_16;
  }
  if (v3 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  memmove(p_dst, v10, v4);
LABEL_16:
  strcpy((char *)p_dst + v4, ".bin");
  sub_2395ACAA8((uint64_t)&__dst, (char *)v19);
  sub_2396F2748(&__p, (uint64_t *)(a1 + 32), (uint64_t)v19);
  if (v20 < 0)
  {
    operator delete(v19[0]);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_30:
    operator delete(__dst);
    goto LABEL_18;
  }
  if (SHIBYTE(v18) < 0)
    goto LABEL_30;
LABEL_18:
  v11 = *(_QWORD *)(a1 + 56);
  v19[0] = a2;
  v12 = (void **)(sub_239A70268(v11, (uint64_t)a2, (__int128 **)v19) + 5);
  if (v12 != &__p)
    sub_239A70694((uint64_t)v12, (std::string *)__p, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (_BYTE *)__p) >> 3));
  v13 = (std::string *)__p;
  if (__p)
  {
    v14 = v22;
    v15 = __p;
    if (v22 != __p)
    {
      do
      {
        if (SHIBYTE(v14[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v14[-1].__r_.__value_.__l.__data_);
        --v14;
      }
      while (v14 != v13);
      v15 = __p;
    }
    v22 = v13;
    operator delete(v15);
  }
}

void sub_239A6ED48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239A6ED78(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  void *__p[2];
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  char v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[312];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 288))
  {
    sub_239A444D4((uint64_t)"unknown file", 337, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v6 = *a2;
  if (*a2)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_23941A7F8(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
      v6 = *a2;
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v24 = *(_QWORD *)(a3 + 16);
    }
    v9 = (std::__shared_weak_count *)a2[1];
    v25 = v6;
    v26 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v27 = 0;
    v12 = v28;
    v13 = a4[3];
    if (v13)
    {
      if ((_QWORD *)v13 == a4)
      {
        v29 = v28;
        (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v28);
LABEL_16:
        sub_239A6F17C((uint64_t)v30, (__int128 *)__p);
        v14 = operator new(0x150uLL);
        v14[1] = 0;
        v14[2] = 0;
        *v14 = &off_250AF77A0;
        *(_QWORD *)&v22 = sub_239A6F410((uint64_t)(v14 + 3), (uint64_t)v30);
        *((_QWORD *)&v22 + 1) = v14;
        sub_239A6F660((uint64_t)v30);
        if (v29 == v28)
        {
          v15 = 4;
        }
        else
        {
          if (!v29)
          {
LABEL_21:
            v16 = v26;
            if (!v26)
              goto LABEL_25;
            v17 = (unint64_t *)&v26->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
              if ((SHIBYTE(v24) & 0x80000000) == 0)
              {
LABEL_27:
                sub_239A6F858(*(unsigned int **)(a1 + 288), &v22);
                v19 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
                if (*((_QWORD *)&v22 + 1))
                {
                  v20 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
                  do
                    v21 = __ldaxr(v20);
                  while (__stlxr(v21 - 1, v20));
                  if (!v21)
                  {
                    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                    std::__shared_weak_count::__release_weak(v19);
                  }
                }
                return;
              }
            }
            else
            {
LABEL_25:
              if ((SHIBYTE(v24) & 0x80000000) == 0)
                goto LABEL_27;
            }
            operator delete(__p[0]);
            goto LABEL_27;
          }
          v15 = 5;
          v12 = v29;
        }
        (*(void (**)(_QWORD *))(*v12 + 8 * v15))(v12);
        goto LABEL_21;
      }
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    }
    v29 = (_BYTE *)v13;
    goto LABEL_16;
  }
  v30[0] = 0;
  v8 = a4[3];
  if (!v8)
    sub_2394172E0();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(v8, v30);
}

void sub_239A6EFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  sub_239A4D7C0(v16);
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_239A6F008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239A4D7C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239A6F01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_239A6F660((uint64_t)va1);
  sub_239A7001C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A6F040(_QWORD *__dst, __int128 *a2, __int128 **a3)
{
  __int128 v5;
  __int128 *v6;
  __int128 *v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;

  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  v6 = *a3;
  v7 = a3[1];
  v8 = (char *)v7 - (char *)*a3;
  if (v7 != *a3)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    if (v9 >= 0x666666666666667)
      sub_2394189F8();
    v10 = (char *)operator new(v8);
    __dst[3] = v10;
    __dst[4] = v10;
    __dst[5] = &v10[40 * v9];
    do
    {
      v11 = *v6;
      *((_DWORD *)v10 + 4) = *((_DWORD *)v6 + 4);
      *(_OWORD *)v10 = v11;
      *(_QWORD *)(v10 + 20) = *(_QWORD *)((char *)v6 + 20);
      v12 = *(_QWORD *)((char *)v6 + 28);
      *((_DWORD *)v10 + 9) = *((_DWORD *)v6 + 9);
      *(_QWORD *)(v10 + 28) = v12;
      v10 += 40;
      v6 = (__int128 *)((char *)v6 + 40);
    }
    while (v6 != v7);
    __dst[4] = v10;
  }
  *((_BYTE *)__dst + 48) = *((_BYTE *)a3 + 24);
  return __dst;
}

void sub_239A6F140(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A6F17C(uint64_t a1, __int128 *a2)
{
  std::string *v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::string __p;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 8);
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = (std::string *)(a1 + 64);
  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 64), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 96) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 40);
  v10 = *((_QWORD *)a2 + 9);
  if (!v10)
    goto LABEL_10;
  if ((__int128 *)v10 != a2 + 3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_10:
    *(_QWORD *)(a1 + 136) = v10;
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 136) = a1 + 112;
  (*(void (**)(_QWORD))(**((_QWORD **)a2 + 9) + 24))(*((_QWORD *)a2 + 9));
LABEL_12:
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  if (*((char *)a2 + 23) < 0)
    sub_23941A7F8(&__p, *(void **)a2, *((_QWORD *)a2 + 1));
  else
    __p = *(std::string *)a2;
  std::string::operator=(v4, &__p);
  std::string::operator=(v5, &__p);
  std::string::operator=((std::string *)(a1 + 144), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_239A6F2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v19 = (_QWORD *)v16[38];
  if (v19 == (_QWORD *)(v17 + 136))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 + 136);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  v21 = (_QWORD *)v16[34];
  if (v21 == (_QWORD *)(v17 + 104))
  {
    v22 = 4;
    v21 = (_QWORD *)(v17 + 104);
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  v23 = (_QWORD *)v16[30];
  if (v23 == (_QWORD *)(v17 + 72))
  {
    v24 = 4;
    v23 = (_QWORD *)(v17 + 72);
  }
  else
  {
    if (!v23)
      goto LABEL_16;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_16:
  sub_239A7010C(v17);
  sub_239A7001C(v15);
  sub_239A701B0(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_239A6F410(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = (_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 16) = 0;
  if (!v6)
  {
    v5 = (_QWORD *)(a1 + 56);
    goto LABEL_5;
  }
  if (v6 != a2 + 32)
  {
    *(_QWORD *)(a1 + 56) = v6;
LABEL_5:
    *v5 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 56) = a1 + 32;
  (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 24))(*v5);
LABEL_7:
  v7 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v8 = (_QWORD *)(a2 + 136);
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 96) = 0;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  if (!v9)
  {
    v8 = (_QWORD *)(a1 + 136);
    goto LABEL_11;
  }
  if (v9 != a2 + 112)
  {
    *(_QWORD *)(a1 + 136) = v9;
LABEL_11:
    *v8 = 0;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 136) = a1 + 112;
  (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8);
LABEL_13:
  v10 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  v11 = (_QWORD *)(a2 + 208);
  v12 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 176) = 0;
  if (!v12)
  {
    v11 = (_QWORD *)(a1 + 208);
    goto LABEL_17;
  }
  if (v12 != a2 + 184)
  {
    *(_QWORD *)(a1 + 208) = v12;
LABEL_17:
    *v11 = 0;
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 208) = a1 + 184;
  (*(void (**)(_QWORD))(*(_QWORD *)*v11 + 24))(*v11);
LABEL_19:
  v13 = (_QWORD *)(a2 + 240);
  v14 = *(_QWORD *)(a2 + 240);
  if (!v14)
  {
    v13 = (_QWORD *)(a1 + 240);
    goto LABEL_23;
  }
  if (v14 != a2 + 216)
  {
    *(_QWORD *)(a1 + 240) = v14;
LABEL_23:
    *v13 = 0;
    goto LABEL_25;
  }
  *(_QWORD *)(a1 + 240) = a1 + 216;
  (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 24))(*v13);
LABEL_25:
  v15 = *(_QWORD *)(a2 + 272);
  if (!v15)
  {
    v16 = (_QWORD *)(a1 + 272);
    goto LABEL_29;
  }
  v16 = (_QWORD *)(a2 + 272);
  if (v15 != a2 + 248)
  {
    *(_QWORD *)(a1 + 272) = v15;
LABEL_29:
    *v16 = 0;
    goto LABEL_31;
  }
  *(_QWORD *)(a1 + 272) = a1 + 248;
  (*(void (**)(_QWORD))(*(_QWORD *)*v16 + 24))(*v16);
LABEL_31:
  v17 = *(_QWORD *)(a2 + 304);
  if (v17)
  {
    v18 = (_QWORD *)(a2 + 304);
    if (v17 == a2 + 280)
    {
      *(_QWORD *)(a1 + 304) = a1 + 280;
      (*(void (**)(_QWORD))(*(_QWORD *)*v18 + 24))(*v18);
      return a1;
    }
    *(_QWORD *)(a1 + 304) = v17;
  }
  else
  {
    v18 = (_QWORD *)(a1 + 304);
  }
  *v18 = 0;
  return a1;
}

uint64_t sub_239A6F660(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = (_QWORD *)(a1 + 280);
  v3 = *(_QWORD **)(a1 + 304);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 272);
  if (v5 == (_QWORD *)(a1 + 248))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 248);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD **)(a1 + 240);
  if (v7 == (_QWORD *)(a1 + 216))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 216);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = *(_QWORD **)(a1 + 208);
  if (v9 == (_QWORD *)(a1 + 184))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 184);
    goto LABEL_20;
  }
  if (v9)
  {
    v10 = 5;
LABEL_20:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v11 = *(std::__shared_weak_count **)(a1 + 176);
  if (!v11)
    goto LABEL_25;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
LABEL_25:
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (*(char *)(a1 + 167) < 0)
LABEL_26:
    operator delete(*(void **)(a1 + 144));
LABEL_27:
  v14 = *(_QWORD **)(a1 + 136);
  if (v14 == (_QWORD *)(a1 + 112))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 112);
    goto LABEL_31;
  }
  if (v14)
  {
    v15 = 5;
LABEL_31:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  v16 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v16)
    goto LABEL_36;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_36:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (*(char *)(a1 + 87) < 0)
LABEL_37:
    operator delete(*(void **)(a1 + 64));
LABEL_38:
  v19 = *(_QWORD **)(a1 + 56);
  if (v19 == (_QWORD *)(a1 + 32))
  {
    v20 = 4;
    v19 = (_QWORD *)(a1 + 32);
  }
  else
  {
    if (!v19)
      goto LABEL_43;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_43:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_239A6F858(unsigned int *a1, _OWORD *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  void *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  _OWORD *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  size_t v103;
  char *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  int64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 *v114;
  _OWORD *v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  void *v119;
  _OWORD *v120;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  v5 = *((_QWORD *)a1 + 6);
  if (v5 >= *a1)
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      v5 = *((_QWORD *)a1 + 6);
      if (v5 < *a1)
        goto LABEL_4;
    }
    goto LABEL_5;
  }
LABEL_4:
  if (*((_BYTE *)a1 + 56))
  {
LABEL_5:
    v6 = 0;
    goto LABEL_100;
  }
  v7 = (char *)*((_QWORD *)a1 + 3);
  v8 = (char *)*((_QWORD *)a1 + 2);
  v9 = v7 - v8;
  if (v7 == v8)
    v10 = 0;
  else
    v10 = 32 * (v7 - v8) - 1;
  v11 = *((_QWORD *)a1 + 5);
  v12 = v11 + v5;
  if (v10 == v11 + v5)
  {
    if (v11 >= 0x100)
    {
      *((_QWORD *)a1 + 5) = v11 - 256;
      v13 = v8 + 8;
      v14 = *(_QWORD *)v8;
      *((_QWORD *)a1 + 2) = v8 + 8;
      if (*((char **)a1 + 4) != v7)
      {
LABEL_92:
        *(_QWORD *)v7 = v14;
        goto LABEL_93;
      }
      v15 = (char *)*((_QWORD *)a1 + 1);
      if (v13 > v15)
      {
        v16 = (v13 - v15) >> 3;
        if (v16 >= -1)
          v17 = v16 + 1;
        else
          v17 = v16 + 2;
        v18 = v17 >> 1;
        v19 = -v18;
        v20 = &v13[-8 * v18];
        v21 = v7 - v13;
        if (v7 == v13)
        {
          v22 = v7;
        }
        else
        {
          memmove(&v13[-8 * v18], v13, v7 - v13);
          v22 = (char *)*((_QWORD *)a1 + 2);
        }
        v7 = &v20[v21];
        *((_QWORD *)a1 + 2) = &v22[8 * v19];
        *((_QWORD *)a1 + 3) = &v20[v21];
        goto LABEL_92;
      }
      if (v7 == v15)
        v33 = 1;
      else
        v33 = (v7 - v15) >> 2;
      if (!(v33 >> 61))
      {
        v34 = (char *)operator new(8 * v33);
        v35 = &v34[8 * (v33 >> 2)];
        v37 = v7 - v13;
        v36 = v7 == v13;
        v7 = v35;
        if (v36)
          goto LABEL_90;
        v7 = &v35[v37 & 0xFFFFFFFFFFFFFFF8];
        v38 = v37 - 8;
        if (v38 >= 0x38)
        {
          v81 = &v34[8 * (v33 >> 2)];
          v39 = v81;
          if ((unint64_t)(v81 - v13) >= 0x20)
          {
            v82 = (v38 >> 3) + 1;
            v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
            v39 = &v35[v83];
            v84 = (__int128 *)(v8 + 24);
            v85 = v81 + 16;
            v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v87 = *v84;
              *(v85 - 1) = *(v84 - 1);
              *v85 = v87;
              v84 += 2;
              v85 += 2;
              v86 -= 4;
            }
            while (v86);
            if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_90:
              *((_QWORD *)a1 + 1) = v34;
              *((_QWORD *)a1 + 2) = v35;
              *((_QWORD *)a1 + 3) = v7;
              *((_QWORD *)a1 + 4) = &v34[8 * v33];
              if (v15)
              {
                operator delete(v15);
                v7 = (char *)*((_QWORD *)a1 + 3);
              }
              goto LABEL_92;
            }
            v13 += v83;
          }
        }
        else
        {
          v39 = &v34[8 * (v33 >> 2)];
        }
        do
        {
          v88 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v39 = v88;
          v39 += 8;
        }
        while (v39 != v7);
        goto LABEL_90;
      }
LABEL_130:
      sub_239418A80();
    }
    v23 = v9 >> 3;
    v24 = (char *)*((_QWORD *)a1 + 4);
    v25 = (char *)*((_QWORD *)a1 + 1);
    v26 = v24 - v25;
    if (v9 >> 3 < (unint64_t)((v24 - v25) >> 3))
    {
      if (v24 != v7)
      {
        *(_QWORD *)v7 = operator new(0x1000uLL);
LABEL_93:
        *((_QWORD *)a1 + 3) += 8;
LABEL_94:
        v8 = (char *)*((_QWORD *)a1 + 2);
        v5 = *((_QWORD *)a1 + 6);
        v12 = v5 + *((_QWORD *)a1 + 5);
        goto LABEL_95;
      }
      v40 = operator new(0x1000uLL);
      v41 = v8;
      if (v25 != v8)
      {
LABEL_105:
        *((_QWORD *)v41 - 1) = v40;
        v94 = (char *)*((_QWORD *)a1 + 2);
        v95 = (char *)*((_QWORD *)a1 + 3);
        *((_QWORD *)a1 + 2) = v94 - 8;
        v96 = *((_QWORD *)v94 - 1);
        *((_QWORD *)a1 + 2) = v94;
        if (v95 != *((char **)a1 + 4))
        {
LABEL_106:
          *(_QWORD *)v95 = v96;
          goto LABEL_93;
        }
        v97 = (char *)*((_QWORD *)a1 + 1);
        if (v94 > v97)
        {
          v98 = (v94 - v97) >> 3;
          if (v98 >= -1)
            v99 = v98 + 1;
          else
            v99 = v98 + 2;
          v100 = v99 >> 1;
          v101 = -v100;
          v102 = &v94[-8 * v100];
          v103 = v95 - v94;
          if (v103)
          {
            memmove(&v94[-8 * v100], v94, v103);
            v94 = (char *)*((_QWORD *)a1 + 2);
          }
          v104 = &v102[v103];
          *((_QWORD *)a1 + 2) = &v94[8 * v101];
          *((_QWORD *)a1 + 3) = v104;
          *(_QWORD *)v104 = v96;
          goto LABEL_93;
        }
        if (v95 == v97)
          v105 = 1;
        else
          v105 = (v95 - v97) >> 2;
        if (v105 >> 61)
          goto LABEL_130;
        v106 = (char *)operator new(8 * v105);
        v107 = &v106[8 * (v105 >> 2)];
        v108 = v95 - v94;
        v36 = v95 == v94;
        v95 = v107;
        if (!v36)
        {
          v95 = &v107[v108 & 0xFFFFFFFFFFFFFFF8];
          v109 = v108 - 8;
          if (v109 < 0x38)
          {
            v110 = &v106[8 * (v105 >> 2)];
            goto LABEL_126;
          }
          v111 = &v106[8 * (v105 >> 2)];
          v110 = v111;
          if ((unint64_t)(v111 - v94) < 0x20)
          {
            do
            {
LABEL_126:
              v118 = *(_QWORD *)v94;
              v94 += 8;
              *(_QWORD *)v110 = v118;
              v110 += 8;
            }
            while (v110 != v95);
            goto LABEL_127;
          }
          v112 = (v109 >> 3) + 1;
          v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
          v110 = &v107[v113];
          v114 = (__int128 *)(v94 + 16);
          v115 = v111 + 16;
          v116 = v112 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v117 = *v114;
            *(v115 - 1) = *(v114 - 1);
            *v115 = v117;
            v114 += 2;
            v115 += 2;
            v116 -= 4;
          }
          while (v116);
          if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v94 += v113;
            goto LABEL_126;
          }
        }
LABEL_127:
        *((_QWORD *)a1 + 1) = v106;
        *((_QWORD *)a1 + 2) = v107;
        *((_QWORD *)a1 + 3) = v95;
        *((_QWORD *)a1 + 4) = &v106[8 * v105];
        if (v97)
        {
          operator delete(v97);
          v95 = (char *)*((_QWORD *)a1 + 3);
        }
        goto LABEL_106;
      }
      if (v7 == v8)
        v42 = 1;
      else
        v42 = v26 >> 2;
      if (v42 >> 61)
        goto LABEL_130;
      v43 = (char *)operator new(8 * v42);
      v44 = (v42 + 3) >> 2;
      v41 = &v43[8 * v44];
      v45 = &v43[8 * v42];
      v46 = v41;
      if (v7 != v8)
      {
        v46 = &v41[(v7 - v25) & 0xFFFFFFFFFFFFFFF8];
        v47 = v7 - v25 - 8;
        v48 = &v43[8 * v44];
        v49 = v8;
        if (v47 > 0x37)
        {
          v50 = &v43[8 * v44];
          v48 = v50;
          v49 = v8;
          if ((unint64_t)(v50 - v25) >= 0x20)
          {
            v51 = (v47 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v48 = &v41[v52];
            v53 = (__int128 *)(v8 + 16);
            v54 = v50 + 16;
            v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v56 = *v53;
              *(v54 - 1) = *(v53 - 1);
              *v54 = v56;
              v53 += 2;
              v54 += 2;
              v55 -= 4;
            }
            while (v55);
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            {
              *((_QWORD *)a1 + 1) = v43;
              *((_QWORD *)a1 + 2) = v41;
              *((_QWORD *)a1 + 3) = v46;
              *((_QWORD *)a1 + 4) = v45;
LABEL_104:
              operator delete(v8);
              v41 = (char *)*((_QWORD *)a1 + 2);
              goto LABEL_105;
            }
            v49 = &v8[v52];
          }
        }
        do
        {
          v93 = *(_QWORD *)v49;
          v49 += 8;
          *(_QWORD *)v48 = v93;
          v48 += 8;
        }
        while (v48 != v46);
      }
      *((_QWORD *)a1 + 1) = v43;
      *((_QWORD *)a1 + 2) = v41;
      *((_QWORD *)a1 + 3) = v46;
      *((_QWORD *)a1 + 4) = v45;
      if (!v8)
        goto LABEL_105;
      goto LABEL_104;
    }
    if (v24 == v25)
      v27 = 1;
    else
      v27 = v26 >> 2;
    if (v27 >> 61)
      goto LABEL_130;
    v28 = (char *)operator new(8 * v27);
    v120 = a2;
    v29 = operator new(0x1000uLL);
    v30 = &v28[8 * v23];
    v31 = &v28[8 * v27];
    if (v23 == v27)
    {
      v119 = v29;
      if (v9 < 1)
      {
        if (v7 == v8)
          v57 = 1;
        else
          v57 = v9 >> 2;
        if (v57 >> 61)
          sub_239418A80();
        v30 = (char *)operator new(8 * v57);
        v31 = &v30[8 * v57];
        operator delete(v28);
        v8 = (char *)*((_QWORD *)a1 + 2);
        v7 = (char *)*((_QWORD *)a1 + 3);
        v28 = v30;
      }
      else
      {
        v32 = v23 + 2;
        if (v23 >= -1)
          v32 = v23 + 1;
        v30 -= 8 * (v32 >> 1);
      }
      v29 = v119;
    }
    *(_QWORD *)v30 = v29;
    v58 = v30 + 8;
    if (v7 == v8)
    {
      v59 = v30;
      v60 = v30 + 8;
LABEL_57:
      v61 = (void *)*((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = v28;
      *((_QWORD *)a1 + 2) = v59;
      *((_QWORD *)a1 + 3) = v60;
      *((_QWORD *)a1 + 4) = v31;
      a2 = v120;
      if (v61)
        operator delete(v61);
      goto LABEL_94;
    }
    while (v30 != v28)
    {
      v62 = v30;
      v60 = v58;
LABEL_60:
      v63 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v62 - 1) = v63;
      v59 = v62 - 8;
      v58 = v60;
      v30 = v59;
      if (v7 == *((char **)a1 + 2))
        goto LABEL_57;
    }
    if (v58 < v31)
    {
      v64 = (v31 - v58) >> 3;
      if (v64 >= -1)
        v65 = v64 + 1;
      else
        v65 = v64 + 2;
      v60 = &v58[8 * (v65 >> 1)];
      v62 = &v30[8 * (v65 >> 1)];
      if (v58 == v30)
      {
        v28 = v58;
      }
      else
      {
        memmove(&v30[8 * (v65 >> 1)], v30, v58 - v30);
        v28 = v30;
      }
      goto LABEL_60;
    }
    if (v31 == v30)
      v66 = 1;
    else
      v66 = (v31 - v30) >> 2;
    if (v66 >> 61)
      sub_239418A80();
    v67 = (char *)operator new(8 * v66);
    v28 = v67;
    v68 = (v66 + 3) >> 2;
    v62 = &v67[8 * v68];
    v60 = v62;
    v69 = v58 - v30;
    if (v58 != v30)
    {
      v60 = &v62[v69 & 0xFFFFFFFFFFFFFFF8];
      v70 = v69 - 8;
      v71 = &v67[8 * v68];
      v72 = v30;
      if (v70 >= 0x38)
      {
        v73 = 8 * v68;
        v71 = &v67[8 * v68];
        v72 = v30;
        if ((unint64_t)(v71 - v30) >= 0x20)
        {
          v74 = (v70 >> 3) + 1;
          v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          v71 = &v62[v75];
          v76 = (__int128 *)(v30 + 16);
          v77 = &v67[v73 + 16];
          v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v79 = *v76;
            *((_OWORD *)v77 - 1) = *(v76 - 1);
            *(_OWORD *)v77 = v79;
            v76 += 2;
            v77 += 32;
            v78 -= 4;
          }
          while (v78);
          if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_80;
          v72 = &v30[v75];
        }
      }
      do
      {
        v80 = *(_QWORD *)v72;
        v72 += 8;
        *(_QWORD *)v71 = v80;
        v71 += 8;
      }
      while (v71 != v60);
    }
LABEL_80:
    v31 = &v67[8 * v66];
    operator delete(v30);
    goto LABEL_60;
  }
LABEL_95:
  v89 = *a2;
  *(_OWORD *)(*(_QWORD *)&v8[(v12 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v12) = *a2;
  if (*((_QWORD *)&v89 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
    v5 = *((_QWORD *)a1 + 6);
  }
  *((_QWORD *)a1 + 6) = v5 + 1;
  pthread_cond_signal((pthread_cond_t *)(a1 + 32));
  v6 = 1;
LABEL_100:
  sub_2397A16B4(v4);
  return v6;
}

void sub_239A6FFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  pthread_mutex_t *v9;
  void *v10;

  operator delete(__p);
  operator delete(v10);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_239A7001C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
      goto LABEL_11;
    }
  }
  if (*(char *)(a1 + 23) < 0)
LABEL_11:
    operator delete(*(void **)a1);
  return a1;
}

void sub_239A700C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF77A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A700D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF77A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A70100(uint64_t a1)
{
  return sub_239A6F660(a1 + 24);
}

uint64_t sub_239A7010C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)(a1 + 40);
  v3 = *(_QWORD **)(a1 + 64);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
      goto LABEL_11;
    }
  }
  if (*(char *)(a1 + 23) < 0)
LABEL_11:
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_239A701B0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239A70214()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A70228()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250AF2C50;
  return result;
}

void sub_239A7024C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250AF2C50;
}

uint64_t *sub_239A70268(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _BYTE *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239428940((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x40uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = v25 + 2;
  v27 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_23941A7F8(v26, *(void **)v27, *((_QWORD *)v27 + 1));
  }
  else
  {
    v28 = *v27;
    v25[4] = *((_QWORD *)v27 + 2);
    *(_OWORD *)v26 = v28;
  }
  sub_2396F2654(v25 + 5);
  v43 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_66;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_66:
        sub_239A501C8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *(_QWORD *)v42[0] = *v39;
    *v39 = v42[0];
  }
  else
  {
    *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
  }
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_239A70678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239A70970((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239A70694(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  const std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  __int128 v17;
  std::string *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  const std::string *v26;

  v6 = __str;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v9)
    {
      v10 = *(std::string **)(a1 + 8);
      v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          --v10;
        }
        while (v10 != v9);
        v11 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_45;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_45:
      sub_2394189F8();
    v23 = v22;
    v9 = (std::string *)operator new(24 * v22);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = &v9[v23];
    if (v6 != a3)
    {
      v24 = 0;
      do
      {
        v25 = &v9[v24];
        v26 = &v6[v24];
        if (SHIBYTE(v6[v24].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_23941A7F8(&v9[v24], v26->__r_.__value_.__l.__data_, v26->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v25->__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        }
        ++v24;
      }
      while (&v6[v24] != a3);
      v9 = (std::string *)((char *)v9 + v24 * 24);
    }
LABEL_42:
    *(_QWORD *)(a1 + 8) = v9;
    return;
  }
  v12 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
  {
    if (__str != a3)
    {
      do
        std::string::operator=(v9++, v6++);
      while (v6 != a3);
      v12 = *(std::string **)(a1 + 8);
    }
    while (v12 != v9)
    {
      if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12[-1].__r_.__value_.__l.__data_);
      --v12;
    }
    goto LABEL_42;
  }
  v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
  if (v12 != v9)
  {
    v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
    do
    {
      std::string::operator=(v9++, v6++);
      v14 -= 24;
    }
    while (v14);
    v9 = *(std::string **)(a1 + 8);
  }
  v15 = v9;
  if (v13 != a3)
  {
    v16 = 0;
    do
    {
      v18 = &v9[v16];
      v19 = (char *)&v13[v16];
      if (SHIBYTE(v13[v16].__r_.__value_.__r.__words[2]) < 0)
      {
        sub_23941A7F8(&v9[v16], *(void **)v19, *((_QWORD *)v19 + 1));
      }
      else
      {
        v17 = *(_OWORD *)v19;
        v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v17;
      }
      ++v16;
    }
    while (&v13[v16] != a3);
    v15 = &v9[v16];
  }
  *(_QWORD *)(a1 + 8) = v15;
}

uint64_t *sub_239A70970(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      if (v3)
      {
        v4 = *(_QWORD *)(v2 + 48);
        v5 = *(void **)(v2 + 40);
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 1) < 0)
              operator delete(*(void **)(v4 - 24));
            v4 -= 24;
          }
          while (v4 != v3);
          v5 = *(void **)(v2 + 40);
        }
        *(_QWORD *)(v2 + 48) = v3;
        operator delete(v5);
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_239A70A0C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v12;
  _QWORD v13[3];
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 288))
  {
    sub_239A444D4((uint64_t)"unknown file", 654, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v13);
      v3 = v14;
    }
    else
    {
      v3 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
      v14 = v3;
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = 100;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  if (!v3)
    goto LABEL_10;
  if (v3 != v13)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
LABEL_10:
    v30 = v3;
    goto LABEL_12;
  }
  v30 = &v29;
  (*(void (**)(_QWORD *))(v13[0] + 24))(v13);
LABEL_12:
  v4 = (std::__shared_weak_count *)operator new(0x150uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF77A0;
  *(_QWORD *)&v12 = sub_239A6F410((uint64_t)&v4[1], (uint64_t)&v15);
  *((_QWORD *)&v12 + 1) = v4;
  sub_239A6F660((uint64_t)&v15);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_16;
  }
  if (v14)
  {
    v8 = 5;
LABEL_16:
    (*(void (**)(_QWORD *, uint64_t))(*v7 + 8 * v8))(v7, v6);
  }
  v9 = sub_239A6F858(*(unsigned int **)(a1 + 288), &v12);
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v9;
}

void sub_239A70C24(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_239A70C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,_QWORD *a45,uint64_t a46,uint64_t a47,uint64_t a48,_QWORD *a49)
{
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;

  if (a49 == v51)
  {
    v53 = 4;
  }
  else
  {
    if (!a49)
      goto LABEL_6;
    v53 = 5;
    v51 = a49;
  }
  (*(void (**)(_QWORD *))(*v51 + 8 * v53))(v51);
LABEL_6:
  if (a45 == v50)
  {
    v54 = 4;
  }
  else
  {
    if (!a45)
      goto LABEL_11;
    v54 = 5;
    v50 = a45;
  }
  (*(void (**)(_QWORD *))(*v50 + 8 * v54))(v50);
LABEL_11:
  sub_239A7010C((uint64_t)&a33);
  sub_239A7001C((uint64_t)&a23);
  sub_239A701B0(v49);
  v55 = a14;
  if (a14 == &a11)
  {
    v56 = 4;
    v55 = &a11;
  }
  else
  {
    if (!a14)
      _Unwind_Resume(a1);
    v56 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v55 + 8 * v56))();
  _Unwind_Resume(a1);
}

uint64_t sub_239A70D18(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v12;
  _QWORD v13[3];
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 288))
  {
    sub_239A444D4((uint64_t)"unknown file", 647, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v13);
      v3 = v14;
    }
    else
    {
      v3 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
      v14 = v3;
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = 99;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v26 = 0;
  v27 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  if (!v3)
    goto LABEL_10;
  if (v3 != v13)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
LABEL_10:
    v29 = v3;
    goto LABEL_12;
  }
  v29 = &v28;
  (*(void (**)(_QWORD *))(v13[0] + 24))(v13);
LABEL_12:
  v30 = 0;
  v4 = (std::__shared_weak_count *)operator new(0x150uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF77A0;
  *(_QWORD *)&v12 = sub_239A6F410((uint64_t)&v4[1], (uint64_t)&v15);
  *((_QWORD *)&v12 + 1) = v4;
  sub_239A6F660((uint64_t)&v15);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_16;
  }
  if (v14)
  {
    v8 = 5;
LABEL_16:
    (*(void (**)(_QWORD *, uint64_t))(*v7 + 8 * v8))(v7, v6);
  }
  v9 = sub_239A6F858(*(unsigned int **)(a1 + 288), &v12);
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v9;
}

void sub_239A70F20(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_239A70F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t *a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t *a50,uint64_t a51,uint64_t a52,uint64_t a53,_QWORD *a54)
{
  _QWORD *v54;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;

  if (a54 == v54)
  {
    v56 = 4;
  }
  else
  {
    if (!a54)
      goto LABEL_6;
    v56 = 5;
    v54 = a54;
  }
  (*(void (**)(_QWORD *))(*v54 + 8 * v56))(v54);
LABEL_6:
  v57 = a50;
  if (a50 == &a47)
  {
    v58 = 4;
    v57 = &a47;
  }
  else
  {
    if (!a50)
    {
LABEL_11:
      v59 = a46;
      if (a46)
      {
        p_shared_owners = (unint64_t *)&a46->__shared_owners_;
        do
          v61 = __ldaxr(p_shared_owners);
        while (__stlxr(v61 - 1, p_shared_owners));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if (a44 < 0)
        operator delete(__p);
      v62 = a38;
      if (a38 == &a35)
      {
        v63 = 4;
        v62 = &a35;
      }
      else
      {
        if (!a38)
        {
LABEL_23:
          v64 = a33;
          if (a33)
          {
            v65 = (unint64_t *)&a33->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          if (a31 < 0)
            operator delete(a26);
          v67 = a25;
          if (a25 == &a22)
          {
            v68 = 4;
            v67 = &a22;
          }
          else
          {
            if (!a25)
              goto LABEL_35;
            v68 = 5;
          }
          (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_35:
          if (a21 < 0)
            operator delete(a16);
          v69 = a14;
          if (a14 == &a11)
          {
            v70 = 4;
            v69 = &a11;
          }
          else
          {
            if (!a14)
              _Unwind_Resume(exception_object);
            v70 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v69 + 8 * v70))();
          _Unwind_Resume(exception_object);
        }
        v63 = 5;
      }
      (*(void (**)(void))(*v62 + 8 * v63))();
      goto LABEL_23;
    }
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
  goto LABEL_11;
}

void sub_239A71104()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A71118(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250AF2D28;
  result[1] = v3;
  return result;
}

uint64_t sub_239A7114C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250AF2D28;
  a2[1] = v2;
  return result;
}

uint64_t sub_239A71168(uint64_t a1)
{
  unsigned int *v1;
  char v3;

  v1 = *(unsigned int **)(a1 + 8);
  v3 = 1;
  return sub_2395BFE44(v1, &v3);
}

void sub_239A71198()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A711AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AF2CE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239A711E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF2CE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239A71204(uint64_t a1, _BYTE *a2)
{
  unsigned int *v2;
  uint64_t v3;
  char v5;

  v3 = a1 + 8;
  v2 = *(unsigned int **)(a1 + 8);
  **(_BYTE **)(v3 + 8) = *a2;
  v5 = 1;
  return sub_2395BFE44(v2, &v5);
}

void sub_239A7123C()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A71250()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250AF2C98;
  return result;
}

void sub_239A71274(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250AF2C98;
}

void sub_239A71290(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v17 = (_QWORD *)*v4;
        v18 = v4[3];
        if (v18)
        {
          v19 = v4[4];
          v16 = (void *)v4[3];
          if (v19 != v18)
          {
            do
            {
              if (*(char *)(v19 - 1) < 0)
                operator delete(*(void **)(v19 - 24));
              v19 -= 24;
            }
            while (v19 != v18);
            v16 = (void *)v4[3];
          }
          v4[4] = v18;
          operator delete(v16);
        }
        operator delete(v4);
        v4 = v17;
      }
      while (v17);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

_QWORD *sub_239A713D0(_QWORD *a1, _QWORD *a2, __int128 *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *result;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _QWORD v45[3];
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  _QWORD v49[3];
  _QWORD *v50;
  __int128 v51;
  uint64_t v52;
  _QWORD v53[3];
  _QWORD *v54;
  __int128 v55;
  uint64_t v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD *v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[3];
  _QWORD *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v7 = a2[3];
  if (!v7)
  {
    v51 = *a3;
    v9 = *((_QWORD *)a3 + 2);
    v50 = 0;
    v52 = v9;
LABEL_9:
    v46 = (_QWORD *)v7;
    goto LABEL_10;
  }
  if ((_QWORD *)v7 == a2)
  {
    v50 = v49;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v49);
  }
  else
  {
    v50 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  v7 = a2[3];
  v51 = *a3;
  v52 = *((_QWORD *)a3 + 2);
  if (!v7)
    goto LABEL_9;
  if ((_QWORD *)v7 != a2)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    goto LABEL_9;
  }
  v46 = v45;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v45);
LABEL_10:
  v47 = *a3;
  v48 = *((_QWORD *)a3 + 2);
  v10 = *a4;
  v11 = (std::__shared_weak_count *)a4[1];
  v40 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v41 = 0;
    v42 = 0;
    v43 = v10;
    v44 = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  else
  {
    v41 = 0;
    v42 = 0;
    v43 = v10;
    v44 = 0;
  }
  v42 = (int)std::thread::hardware_concurrency();
  v15 = operator new(0x1B0uLL);
  v15[1] = 0;
  v15[2] = 0;
  *v15 = &off_250AF7EE8;
  v16 = (uint64_t)v50;
  if (!v50)
    goto LABEL_20;
  if (v50 != v49)
  {
    v16 = (*(uint64_t (**)(void))(*v50 + 16))();
LABEL_20:
    v60 = (_QWORD *)v16;
    goto LABEL_22;
  }
  v60 = v59;
  (*(void (**)(_QWORD *, _QWORD *))(v49[0] + 24))(v49, v59);
LABEL_22:
  v62 = v52;
  v61 = v51;
  v64 = 0;
  v17 = (char *)operator new(0x40uLL);
  *(_QWORD *)v17 = &off_250AF4A00;
  v18 = v17 + 8;
  v19 = (uint64_t)v60;
  if (!v60)
  {
LABEL_25:
    *((_QWORD *)v17 + 4) = v19;
    goto LABEL_27;
  }
  if (v60 != v59)
  {
    v19 = (*(uint64_t (**)(_QWORD *, char *))(*v60 + 16))(v60, v18);
    goto LABEL_25;
  }
  *((_QWORD *)v17 + 4) = v18;
  (*(void (**)(_QWORD *))(v59[0] + 24))(v59);
LABEL_27:
  *(_OWORD *)(v17 + 40) = v61;
  *((_QWORD *)v17 + 7) = v62;
  v64 = v17;
  v20 = (uint64_t)v46;
  if (!v46)
  {
LABEL_30:
    v54 = (_QWORD *)v20;
    goto LABEL_32;
  }
  if (v46 != v45)
  {
    v20 = (*(uint64_t (**)(void))(*v46 + 16))();
    goto LABEL_30;
  }
  v54 = v53;
  (*(void (**)(_QWORD *, _QWORD *))(v45[0] + 24))(v45, v53);
LABEL_32:
  v55 = v47;
  v56 = v48;
  v58 = 0;
  v21 = (char *)operator new(0x40uLL);
  *(_QWORD *)v21 = &off_250AF4A48;
  v22 = (uint64_t)v54;
  if (!v54)
  {
LABEL_35:
    *((_QWORD *)v21 + 4) = v22;
    goto LABEL_37;
  }
  if (v54 != v53)
  {
    v22 = (*(uint64_t (**)(void))(*v54 + 16))();
    goto LABEL_35;
  }
  *((_QWORD *)v21 + 4) = v21 + 8;
  (*(void (**)(_QWORD *))(v53[0] + 24))(v53);
LABEL_37:
  *(_OWORD *)(v21 + 40) = v55;
  *((_QWORD *)v21 + 7) = v56;
  v58 = v21;
  sub_239A7DBE8((uint64_t)(v15 + 3), &v41, v63, v57);
  v23 = v58;
  if (v58 == v57)
  {
    v24 = 4;
    v23 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_42;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_42:
  v25 = v54;
  if (v54 == v53)
  {
    v26 = 4;
    v25 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_47;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_47:
  v27 = v64;
  if (v64 == v63)
  {
    v28 = 4;
    v27 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_52;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_52:
  v29 = v60;
  if (v60 == v59)
  {
    v30 = 4;
    v29 = v59;
    goto LABEL_56;
  }
  if (v60)
  {
    v30 = 5;
LABEL_56:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  *a1 = v15 + 3;
  a1[1] = v15;
  v31 = v44;
  if (v44)
  {
    v32 = (unint64_t *)&v44->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v40)
  {
    v34 = (unint64_t *)&v40->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v36 = v46;
  if (v46 == v45)
  {
    v37 = 4;
    v36 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_72;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_72:
  result = v50;
  if (v50 == v49)
  {
    v39 = 4;
    result = v49;
  }
  else
  {
    if (!v50)
      return result;
    v39 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v39))();
}

void sub_239A718B8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_239A718C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  char *v34;
  uint64_t v35;

  v34 = a26;
  if (a26 == &a23)
  {
    v35 = 4;
    v34 = &a23;
  }
  else
  {
    if (!a26)
      _Unwind_Resume(exception_object);
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
  _Unwind_Resume(exception_object);
}

void sub_239A71A58()
{
  JUMPOUT(0x239A719D8);
}

void sub_239A71A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  JUMPOUT(0x239A719E0);
}

_QWORD *sub_239A71AA0(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  pthread_rwlock_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  char *v39;
  _DWORD *v40;
  unsigned int v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *result;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  std::__shared_weak_count *v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[3];
  _QWORD *v85;
  _QWORD v86[3];
  _QWORD *v87;
  _QWORD v88[3];
  _QWORD *v89;
  _QWORD v90[3];
  _QWORD *v91;
  uint64_t v92;
  _BYTE v93[24];
  _BYTE *v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v83 = v82;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v82);
    }
    else
    {
      v83 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v83 = 0;
  }
  v7 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v79 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)&v80 = 0;
    v81 = v6;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v80 = 0;
    v81 = 0;
  }
  *((_QWORD *)&v80 + 1) = (int)std::thread::hardware_concurrency();
  v11 = (char *)operator new(0x1B0uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_250AF4A90;
  v89 = 0;
  v12 = (uint64_t)v83;
  if (!v83)
    goto LABEL_16;
  if (v83 != v82)
  {
    v12 = (*(uint64_t (**)(void))(*v83 + 16))();
LABEL_16:
    v85 = (_QWORD *)v12;
    goto LABEL_18;
  }
  v85 = v84;
  (*(void (**)(_QWORD *, _QWORD *))(v82[0] + 24))(v82, v84);
LABEL_18:
  v87 = 0;
  v13 = operator new(0x28uLL);
  *v13 = &off_250AF4AC8;
  v14 = (uint64_t)v85;
  if (!v85)
  {
LABEL_21:
    v13[4] = v14;
    goto LABEL_23;
  }
  if (v85 != v84)
  {
    v14 = (*(uint64_t (**)(void))(*v85 + 16))();
    goto LABEL_21;
  }
  v13[4] = v13 + 1;
  (*(void (**)(_QWORD *))(v84[0] + 24))(v84);
LABEL_23:
  v15 = (uint64_t)(v11 + 24);
  v87 = v13;
  *((_QWORD *)v11 + 28) = 0;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_DWORD *)v11 + 16) = 1065353216;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v11 + 10) = v11 + 80;
  *((_QWORD *)v11 + 11) = v11 + 80;
  *((_OWORD *)v11 + 6) = xmmword_239EC69E0;
  *((_OWORD *)v11 + 7) = 0u;
  *((_OWORD *)v11 + 8) = 0u;
  *((_OWORD *)v11 + 9) = 0u;
  *((_QWORD *)v11 + 20) = 0;
  *((_QWORD *)v11 + 3) = &off_250AF4B10;
  *((_QWORD *)v11 + 24) = 0;
  *((_QWORD *)v11 + 29) = 0;
  *((_QWORD *)v11 + 30) = 0;
  *(_OWORD *)(v11 + 248) = v80;
  *((_QWORD *)v11 + 33) = v7;
  *((_QWORD *)v11 + 34) = v6;
  if (v6)
  {
    v16 = (unint64_t *)&v6->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_OWORD *)(v11 + 328) = 0uLL;
  *(_OWORD *)(v11 + 344) = 0uLL;
  v18 = (uint64_t *)(v11 + 280);
  *(_OWORD *)(v11 + 296) = 0uLL;
  *(_OWORD *)(v11 + 312) = 0uLL;
  *(_OWORD *)(v11 + 280) = 0uLL;
  *((_DWORD *)v11 + 90) = 1065353216;
  v78 = (uint64_t *)(v11 + 296);
  sub_2397A1618((pthread_mutex_t *)(v11 + 368));
  if (!*((_QWORD *)v11 + 39))
  {
    v39 = (char *)operator new(0x108uLL);
    *((_DWORD *)v39 + 6) = 0x7FFFFFFF;
    v40 = v39 + 24;
    *(_OWORD *)(v39 + 8) = 0u;
    *((_OWORD *)v39 + 2) = 0u;
    *(_QWORD *)v39 = &off_250AF4B50;
    *((_OWORD *)v39 + 3) = 0u;
    *((_OWORD *)v39 + 4) = 0u;
    v39[80] = 0;
    *(_OWORD *)(v39 + 88) = 0u;
    sub_2397A1618((pthread_mutex_t *)(v39 + 200));
    v41 = *((_DWORD *)v39 + 6);
    if (v41 >= 0x7FFFFFFF)
    {
      v41 = 0x7FFFFFFF;
      *v40 = 0x7FFFFFFF;
    }
    else if (v41 < 2)
    {
      v41 = 1;
    }
    *((_DWORD *)v39 + 6) = v41;
    pthread_cond_init((pthread_cond_t *)(v39 + 104), 0);
    pthread_cond_init((pthread_cond_t *)(v39 + 152), 0);
    v69 = (std::__shared_weak_count *)*((_QWORD *)v11 + 40);
    *((_QWORD *)v11 + 39) = v40;
    *((_QWORD *)v11 + 40) = v39;
    v18 = (uint64_t *)(v11 + 280);
    v15 = (uint64_t)(v11 + 24);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
  }
  if (!*v18)
  {
    v19 = operator new(0x120uLL);
    v19[1] = 0;
    v19[2] = 0;
    *v19 = &off_250AE9800;
    v20 = sub_2397A1740((uint64_t)(v19 + 3));
    v21 = (std::__shared_weak_count *)*((_QWORD *)v11 + 36);
    *((_QWORD *)v11 + 35) = v20;
    *((_QWORD *)v11 + 36) = v19;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = *v18;
    v25 = (pthread_rwlock_t *)(*v18 + 24);
    j__pthread_rwlock_wrlock(v25);
    *(_BYTE *)(v24 + 16) = 1;
    j__pthread_rwlock_unlock(v25);
    sub_2397A195C(v24);
    v26 = (_QWORD *)operator new();
    *v26 = &off_250AF4B88;
    v26[1] = v15;
    *(_QWORD *)(v24 + 224) = v26;
    sub_2397A1878((pthread_t *)v24);
  }
  if (!*v78)
  {
    v27 = *((_QWORD *)v11 + 33);
    v28 = *((_QWORD *)v11 + 34);
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = (std::__shared_weak_count *)*((_QWORD *)v11 + 38);
    *((_QWORD *)v11 + 37) = v27;
    *((_QWORD *)v11 + 38) = v28;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      v27 = *v78;
    }
    if (!v27)
    {
      v72 = *((_QWORD *)v11 + 32);
      v73 = operator new(0x178uLL);
      v73[1] = 0;
      v73[2] = 0;
      *v73 = &off_250ADB8B0;
      v74 = sub_2397A2A50((uint64_t)(v73 + 3), v72, 0);
      v75 = (std::__shared_weak_count *)*((_QWORD *)v11 + 38);
      *((_QWORD *)v11 + 37) = v74;
      *((_QWORD *)v11 + 38) = v73;
      if (v75)
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
    }
  }
  sub_239467C88(v15);
  if (*((_QWORD *)v11 + 44))
  {
    v34 = (_QWORD *)*((_QWORD *)v11 + 43);
    if (v34)
    {
      do
      {
        v35 = (_QWORD *)*v34;
        operator delete(v34);
        v34 = v35;
      }
      while (v35);
    }
    *((_QWORD *)v11 + 43) = 0;
    v36 = *((_QWORD *)v11 + 42);
    if (v36)
    {
      for (i = 0; i != v36; ++i)
        *(_QWORD *)(*((_QWORD *)v11 + 41) + 8 * i) = 0;
    }
    *((_QWORD *)v11 + 44) = 0;
  }
  v38 = (uint64_t)v89;
  if (!v89)
    goto LABEL_55;
  if (v89 != v88)
  {
    v38 = (*(uint64_t (**)(void))(*v89 + 16))();
LABEL_55:
    v91 = (_QWORD *)v38;
    goto LABEL_60;
  }
  v91 = v90;
  (*(void (**)(_QWORD *, _QWORD *))(v88[0] + 24))(v88, v90);
LABEL_60:
  v92 = v15;
  v94 = 0;
  v42 = operator new(0x30uLL);
  *v42 = &off_250AF4DF0;
  v43 = v42 + 1;
  v44 = (uint64_t)v91;
  if (!v91)
  {
LABEL_63:
    v42[4] = v44;
    goto LABEL_65;
  }
  if (v91 != v90)
  {
    v44 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v91 + 16))(v91, v43);
    goto LABEL_63;
  }
  v42[4] = v43;
  (*(void (**)(_QWORD *))(v90[0] + 24))(v90);
LABEL_65:
  v42[5] = v92;
  v94 = v42;
  sub_2397A1694((pthread_mutex_t *)(v11 + 368));
  if (!*((_QWORD *)v11 + 44))
  {
    if (!v94)
      sub_2394172E0();
    (*(void (**)(_BYTE *))(*(_QWORD *)v94 + 48))(v94);
  }
  sub_2397A16B4((pthread_mutex_t *)(v11 + 368));
  v45 = v94;
  if (v94 == v93)
  {
    v46 = 4;
    v45 = v93;
  }
  else
  {
    if (!v94)
      goto LABEL_73;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_73:
  v47 = v91;
  if (v91 == v90)
  {
    v48 = 4;
    v47 = v90;
  }
  else
  {
    if (!v91)
      goto LABEL_78;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_78:
  v49 = (uint64_t)v87;
  if (!v87)
  {
LABEL_81:
    v91 = (_QWORD *)v49;
    goto LABEL_83;
  }
  if (v87 != v86)
  {
    v49 = (*(uint64_t (**)(void))(*v87 + 16))();
    goto LABEL_81;
  }
  v91 = v90;
  (*(void (**)(_QWORD *, _QWORD *))(v86[0] + 24))(v86, v90);
LABEL_83:
  v92 = v15;
  v94 = 0;
  v50 = operator new(0x30uLL);
  *v50 = &off_250AF4E38;
  v51 = v50 + 1;
  v52 = (uint64_t)v91;
  if (!v91)
  {
LABEL_86:
    v50[4] = v52;
    goto LABEL_88;
  }
  if (v91 != v90)
  {
    v52 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v91 + 16))(v91, v51);
    goto LABEL_86;
  }
  v50[4] = v51;
  (*(void (**)(_QWORD *))(v90[0] + 24))(v90);
LABEL_88:
  v50[5] = v92;
  v94 = v50;
  sub_2397A1694((pthread_mutex_t *)(v11 + 368));
  if (!*((_QWORD *)v11 + 44))
  {
    if (!v94)
      sub_2394172E0();
    (*(void (**)(_BYTE *))(*(_QWORD *)v94 + 48))(v94);
  }
  sub_2397A16B4((pthread_mutex_t *)(v11 + 368));
  v53 = v94;
  if (v94 == v93)
  {
    v54 = 4;
    v53 = v93;
  }
  else
  {
    if (!v94)
      goto LABEL_96;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_96:
  v55 = v91;
  if (v91 == v90)
  {
    v56 = 4;
    v55 = v90;
  }
  else
  {
    if (!v91)
      goto LABEL_101;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_101:
  v57 = v87;
  if (v87 == v86)
  {
    v58 = 4;
    v57 = v86;
  }
  else
  {
    if (!v87)
      goto LABEL_106;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_106:
  v59 = v85;
  if (v85 == v84)
  {
    v60 = 4;
    v59 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_111;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_111:
  v61 = v89;
  if (v89 == v88)
  {
    v62 = 4;
    v61 = v88;
    goto LABEL_115;
  }
  if (v89)
  {
    v62 = 5;
LABEL_115:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  *a1 = v15;
  a1[1] = (uint64_t)v11;
  if (v81)
  {
    v63 = (unint64_t *)&v81->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v79)
  {
    v65 = (unint64_t *)&v79->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  result = v83;
  if (v83 == v82)
  {
    v68 = 4;
    result = v82;
  }
  else
  {
    if (!v83)
      return result;
    v68 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v68))();
}

void sub_239A723A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24,uint64_t a25,uint64_t a26,char *a27,char a28,uint64_t a29,uint64_t a30,char *a31,char a32,uint64_t a33,uint64_t a34,char *a35)
{
  _QWORD **v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  pthread_mutex_t *v40;
  std::__shared_weak_count *v41;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  std::__shared_weak_count_vtbl *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;

  std::__shared_weak_count::~__shared_weak_count(v41);
  operator delete(v43);
  sub_2397A163C(v40);
  sub_239420950(v39);
  sub_239A4D7C0(a12);
  sub_239416DA0(a13);
  sub_239416DA0(v37);
  sub_239A74534((uint64_t)(v35 + 3));
  v44 = *v35;
  if (*v35 == v35 - 3)
  {
    v45 = 4;
    v44 = v35 - 3;
  }
  else
  {
    if (!v44)
      goto LABEL_6;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_6:
  v46 = v38[8].__vftable;
  if (v46 == (std::__shared_weak_count_vtbl *)(v35 - 7))
  {
    v47 = 4;
    v46 = (std::__shared_weak_count_vtbl *)(v35 - 7);
  }
  else
  {
    if (!v46)
      goto LABEL_11;
    v47 = 5;
  }
  (*((void (**)(void))v46->~__shared_weak_count + v47))();
LABEL_11:
  sub_239A84F3C(v36);
  v48 = a31;
  if (a31 == &a28)
  {
    v49 = 4;
    v48 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_16;
    v49 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_16:
  v50 = a27;
  if (a27 == &a24)
  {
    v51 = 4;
    v50 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_21;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_21:
  v52 = a35;
  if (a35 == &a32)
  {
    v53 = 4;
    v52 = &a32;
  }
  else
  {
    if (!a35)
      goto LABEL_26;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_26:
  std::__shared_weak_count::~__shared_weak_count(v38);
  operator delete(v54);
  sub_239A74534((uint64_t)&a16);
  sub_239416DA0((uint64_t)&a14);
  v55 = a23;
  if (a23 == &a20)
  {
    v56 = 4;
    v55 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_31;
    v56 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v55 + 8 * v56))();
LABEL_31:
  _Unwind_Resume(a1);
}

uint64_t sub_239A726C4(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = *((_QWORD *)v2 + 5);
      if (v6)
      {
        v7 = *((_QWORD *)v2 + 6);
        v8 = (void *)*((_QWORD *)v2 + 5);
        if (v7 != v6)
        {
          do
          {
            if (*(char *)(v7 - 1) < 0)
              operator delete(*(void **)(v7 - 24));
            v7 -= 24;
          }
          while (v7 != v6);
          v8 = (void *)*((_QWORD *)v2 + 5);
        }
        *((_QWORD *)v2 + 6) = v6;
        operator delete(v8);
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *sub_239A7277C(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *result;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v5 = a2[3];
  if (!v5)
  {
    v45 = 0;
LABEL_9:
    v43 = (_QWORD *)v5;
    goto LABEL_10;
  }
  if ((_QWORD *)v5 == a2)
  {
    v45 = v44;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v44);
  }
  else
  {
    v45 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  v5 = a2[3];
  if (!v5)
    goto LABEL_9;
  if ((_QWORD *)v5 != a2)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    goto LABEL_9;
  }
  v43 = v42;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v42);
LABEL_10:
  v7 = *a3;
  v8 = (std::__shared_weak_count *)a3[1];
  v37 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v38 = 0;
    v39 = 0;
    v40 = v7;
    v41 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v38 = 0;
    v39 = 0;
    v40 = v7;
    v41 = 0;
  }
  v39 = (int)std::thread::hardware_concurrency();
  v12 = operator new(0x1B0uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_250AF4EC8;
  v13 = (uint64_t)v45;
  if (!v45)
    goto LABEL_20;
  if (v45 != v44)
  {
    v13 = (*(uint64_t (**)(void))(*v45 + 16))();
LABEL_20:
    v51 = (_QWORD *)v13;
    goto LABEL_22;
  }
  v51 = v50;
  (*(void (**)(_QWORD *, _QWORD *))(v44[0] + 24))(v44, v50);
LABEL_22:
  v53 = 0;
  v14 = operator new(0x28uLL);
  *v14 = &off_250AF4F00;
  v15 = v14 + 1;
  v16 = (uint64_t)v51;
  if (!v51)
  {
LABEL_25:
    v14[4] = v16;
    goto LABEL_27;
  }
  if (v51 != v50)
  {
    v16 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v51 + 16))(v51, v15);
    goto LABEL_25;
  }
  v14[4] = v15;
  (*(void (**)(_QWORD *))(v50[0] + 24))(v50);
LABEL_27:
  v53 = v14;
  v17 = (uint64_t)v43;
  if (!v43)
  {
LABEL_30:
    v47 = (_QWORD *)v17;
    goto LABEL_32;
  }
  if (v43 != v42)
  {
    v17 = (*(uint64_t (**)(void))(*v43 + 16))();
    goto LABEL_30;
  }
  v47 = v46;
  (*(void (**)(_QWORD *, _QWORD *))(v42[0] + 24))(v42, v46);
LABEL_32:
  v49 = 0;
  v18 = operator new(0x28uLL);
  *v18 = &off_250AF4F48;
  v19 = (uint64_t)v47;
  if (!v47)
  {
LABEL_35:
    v18[4] = v19;
    goto LABEL_37;
  }
  if (v47 != v46)
  {
    v19 = (*(uint64_t (**)(void))(*v47 + 16))();
    goto LABEL_35;
  }
  v18[4] = v18 + 1;
  (*(void (**)(_QWORD *))(v46[0] + 24))(v46);
LABEL_37:
  v49 = v18;
  sub_239A7458C((uint64_t)(v12 + 3), &v38, v52, v48);
  v20 = v49;
  if (v49 == v48)
  {
    v21 = 4;
    v20 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_42;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_42:
  v22 = v47;
  if (v47 == v46)
  {
    v23 = 4;
    v22 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_47;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_47:
  v24 = v53;
  if (v53 == v52)
  {
    v25 = 4;
    v24 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_52;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_52:
  v26 = v51;
  if (v51 == v50)
  {
    v27 = 4;
    v26 = v50;
    goto LABEL_56;
  }
  if (v51)
  {
    v27 = 5;
LABEL_56:
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
  *a1 = v12 + 3;
  a1[1] = v12;
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v37)
  {
    v31 = (unint64_t *)&v37->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v33 = v43;
  if (v43 == v42)
  {
    v34 = 4;
    v33 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_72;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_72:
  result = v45;
  if (v45 == v44)
  {
    v36 = 4;
    result = v44;
  }
  else
  {
    if (!v45)
      return result;
    v36 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v36))();
}

void sub_239A72BCC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_239A72BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  char *v32;
  uint64_t v33;

  v32 = a23;
  if (a23 == &a20)
  {
    v33 = 4;
    v32 = &a20;
  }
  else
  {
    if (!a23)
      _Unwind_Resume(exception_object);
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
  _Unwind_Resume(exception_object);
}

void sub_239A72D6C()
{
  JUMPOUT(0x239A72CECLL);
}

void sub_239A72D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  JUMPOUT(0x239A72CF4);
}

uint64_t sub_239A72DB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  if (*(_BYTE *)(a1 + 144) && *(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if (!*(_BYTE *)(a1 + 112))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 112))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
LABEL_7:
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v5 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v5)
      goto LABEL_17;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_17:
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v8)
    goto LABEL_21;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v11)
      goto LABEL_27;
  }
  else
  {
LABEL_21:
    v11 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v11)
      goto LABEL_27;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_27:
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return a1;
}

uint64_t sub_239A72F40(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;

  if (*(_BYTE *)(a1 + 232) && *(char *)(a1 + 231) < 0)
  {
    operator delete(*(void **)(a1 + 208));
    v2 = *(std::__shared_weak_count **)(a1 + 200);
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 200);
    if (!v2)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:
  v5 = *(std::__shared_weak_count **)(a1 + 184);
  if (!v5)
    goto LABEL_13;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(std::__shared_weak_count **)(a1 + 168);
    if (!v8)
      goto LABEL_19;
  }
  else
  {
LABEL_13:
    v8 = *(std::__shared_weak_count **)(a1 + 168);
    if (!v8)
      goto LABEL_19;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_19:
  v11 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v11)
    goto LABEL_23;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!*(_BYTE *)(a1 + 136))
      goto LABEL_27;
  }
  else
  {
LABEL_23:
    if (!*(_BYTE *)(a1 + 136))
      goto LABEL_27;
  }
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
LABEL_27:
  v14 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v17)
      goto LABEL_37;
  }
  else
  {
LABEL_31:
    v17 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v17)
      goto LABEL_37;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_37:
  v20 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v20)
    goto LABEL_41;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v23)
      goto LABEL_47;
  }
  else
  {
LABEL_41:
    v23 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v23)
      goto LABEL_47;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_47:
  v26 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v26)
    goto LABEL_51;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v29)
      goto LABEL_57;
  }
  else
  {
LABEL_51:
    v29 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v29)
      goto LABEL_57;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_57:
  v32 = *(std::__shared_weak_count **)(a1 + 8);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return a1;
}

uint64_t sub_239A73240(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  void *v75;
  _QWORD *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void **v92;
  void **v93;
  void **v94;

  if (*(_BYTE *)(a1 + 888))
  {
    v2 = *(_QWORD *)(a1 + 864);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 872);
      v4 = *(void **)(a1 + 864);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 864);
      }
      *(_QWORD *)(a1 + 872) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 856))
  {
    v5 = *(_QWORD *)(a1 + 832);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 840);
      v7 = *(void **)(a1 + 832);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0)
            operator delete(*(void **)(v6 - 24));
          v6 -= 24;
        }
        while (v6 != v5);
        v7 = *(void **)(a1 + 832);
      }
      *(_QWORD *)(a1 + 840) = v5;
      operator delete(v7);
    }
  }
  if (*(_BYTE *)(a1 + 824))
  {
    v8 = *(_QWORD *)(a1 + 800);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 808);
      v10 = *(void **)(a1 + 800);
      if (v9 != v8)
      {
        do
        {
          if (*(char *)(v9 - 1) < 0)
            operator delete(*(void **)(v9 - 24));
          v9 -= 24;
        }
        while (v9 != v8);
        v10 = *(void **)(a1 + 800);
      }
      *(_QWORD *)(a1 + 808) = v8;
      operator delete(v10);
    }
  }
  if (*(_BYTE *)(a1 + 792))
  {
    v11 = *(_QWORD *)(a1 + 768);
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 776);
      v13 = *(void **)(a1 + 768);
      if (v12 != v11)
      {
        do
        {
          if (*(char *)(v12 - 1) < 0)
            operator delete(*(void **)(v12 - 24));
          v12 -= 24;
        }
        while (v12 != v11);
        v13 = *(void **)(a1 + 768);
      }
      *(_QWORD *)(a1 + 776) = v11;
      operator delete(v13);
    }
  }
  if (*(_BYTE *)(a1 + 760))
    sub_239A726C4(a1 + 720);
  if (*(_BYTE *)(a1 + 712))
  {
    v14 = *(_QWORD **)(a1 + 688);
    if (v14)
    {
      do
      {
        v20 = (_QWORD *)*v14;
        v21 = v14[3];
        if (v21)
        {
          v22 = v14[4];
          v19 = (void *)v14[3];
          if (v22 != v21)
          {
            do
            {
              if (*(char *)(v22 - 1) < 0)
                operator delete(*(void **)(v22 - 24));
              v22 -= 24;
            }
            while (v22 != v21);
            v19 = (void *)v14[3];
          }
          v14[4] = v21;
          operator delete(v19);
        }
        operator delete(v14);
        v14 = v20;
      }
      while (v20);
    }
    v15 = *(void **)(a1 + 672);
    *(_QWORD *)(a1 + 672) = 0;
    if (v15)
      operator delete(v15);
  }
  if (*(_BYTE *)(a1 + 664))
  {
    v16 = *(_QWORD *)(a1 + 640);
    if (v16)
    {
      v17 = *(_QWORD *)(a1 + 648);
      v18 = *(void **)(a1 + 640);
      if (v17 != v16)
      {
        do
        {
          if (*(char *)(v17 - 1) < 0)
            operator delete(*(void **)(v17 - 24));
          v17 -= 24;
        }
        while (v17 != v16);
        v18 = *(void **)(a1 + 640);
      }
      *(_QWORD *)(a1 + 648) = v16;
      operator delete(v18);
    }
  }
  if (*(_BYTE *)(a1 + 632))
  {
    v23 = *(_QWORD *)(a1 + 608);
    if (v23)
    {
      v24 = *(_QWORD *)(a1 + 616);
      v25 = *(void **)(a1 + 608);
      if (v24 != v23)
      {
        do
        {
          if (*(char *)(v24 - 1) < 0)
            operator delete(*(void **)(v24 - 24));
          v24 -= 24;
        }
        while (v24 != v23);
        v25 = *(void **)(a1 + 608);
      }
      *(_QWORD *)(a1 + 616) = v23;
      operator delete(v25);
    }
  }
  if (*(_BYTE *)(a1 + 600))
  {
    v26 = *(_QWORD **)(a1 + 576);
    if (v26)
    {
      do
      {
        v34 = (_QWORD *)*v26;
        v35 = v26[3];
        if (v35)
        {
          v36 = v26[4];
          v33 = (void *)v26[3];
          if (v36 != v35)
          {
            do
            {
              if (*(char *)(v36 - 1) < 0)
                operator delete(*(void **)(v36 - 24));
              v36 -= 24;
            }
            while (v36 != v35);
            v33 = (void *)v26[3];
          }
          v26[4] = v35;
          operator delete(v33);
        }
        operator delete(v26);
        v26 = v34;
      }
      while (v34);
    }
    v27 = *(void **)(a1 + 560);
    *(_QWORD *)(a1 + 560) = 0;
    if (v27)
      operator delete(v27);
  }
  if (*(_BYTE *)(a1 + 552))
  {
    v28 = *(_QWORD **)(a1 + 528);
    if (v28)
    {
      do
      {
        v38 = (_QWORD *)*v28;
        v39 = v28[3];
        if (v39)
        {
          v40 = v28[4];
          v37 = (void *)v28[3];
          if (v40 != v39)
          {
            do
            {
              if (*(char *)(v40 - 1) < 0)
                operator delete(*(void **)(v40 - 24));
              v40 -= 24;
            }
            while (v40 != v39);
            v37 = (void *)v28[3];
          }
          v28[4] = v39;
          operator delete(v37);
        }
        operator delete(v28);
        v28 = v38;
      }
      while (v38);
    }
    v29 = *(void **)(a1 + 512);
    *(_QWORD *)(a1 + 512) = 0;
    if (v29)
      operator delete(v29);
  }
  if (*(_BYTE *)(a1 + 504))
  {
    v30 = *(_QWORD *)(a1 + 480);
    if (v30)
    {
      v31 = *(_QWORD *)(a1 + 488);
      v32 = *(void **)(a1 + 480);
      if (v31 != v30)
      {
        do
        {
          if (*(char *)(v31 - 1) < 0)
            operator delete(*(void **)(v31 - 24));
          v31 -= 24;
        }
        while (v31 != v30);
        v32 = *(void **)(a1 + 480);
      }
      *(_QWORD *)(a1 + 488) = v30;
      operator delete(v32);
    }
  }
  if (*(_BYTE *)(a1 + 472))
  {
    v41 = *(_QWORD **)(a1 + 448);
    if (v41)
    {
      do
      {
        v47 = (_QWORD *)*v41;
        v48 = v41[3];
        if (v48)
        {
          v49 = v41[4];
          v46 = (void *)v41[3];
          if (v49 != v48)
          {
            do
            {
              if (*(char *)(v49 - 1) < 0)
                operator delete(*(void **)(v49 - 24));
              v49 -= 24;
            }
            while (v49 != v48);
            v46 = (void *)v41[3];
          }
          v41[4] = v48;
          operator delete(v46);
        }
        operator delete(v41);
        v41 = v47;
      }
      while (v47);
    }
    v42 = *(void **)(a1 + 432);
    *(_QWORD *)(a1 + 432) = 0;
    if (v42)
      operator delete(v42);
  }
  if (*(_BYTE *)(a1 + 424))
  {
    v43 = *(_QWORD *)(a1 + 400);
    if (v43)
    {
      v44 = *(_QWORD *)(a1 + 408);
      v45 = *(void **)(a1 + 400);
      if (v44 != v43)
      {
        do
        {
          if (*(char *)(v44 - 1) < 0)
            operator delete(*(void **)(v44 - 24));
          v44 -= 24;
        }
        while (v44 != v43);
        v45 = *(void **)(a1 + 400);
      }
      *(_QWORD *)(a1 + 408) = v43;
      operator delete(v45);
    }
  }
  if (*(_BYTE *)(a1 + 392))
  {
    v50 = *(_QWORD **)(a1 + 368);
    if (v50)
    {
      do
      {
        v58 = (_QWORD *)*v50;
        v59 = v50[3];
        if (v59)
        {
          v60 = v50[4];
          v57 = (void *)v50[3];
          if (v60 != v59)
          {
            do
            {
              if (*(char *)(v60 - 1) < 0)
                operator delete(*(void **)(v60 - 24));
              v60 -= 24;
            }
            while (v60 != v59);
            v57 = (void *)v50[3];
          }
          v50[4] = v59;
          operator delete(v57);
        }
        operator delete(v50);
        v50 = v58;
      }
      while (v58);
    }
    v51 = *(void **)(a1 + 352);
    *(_QWORD *)(a1 + 352) = 0;
    if (v51)
      operator delete(v51);
  }
  if (*(_BYTE *)(a1 + 344))
  {
    v52 = *(_QWORD **)(a1 + 320);
    if (v52)
    {
      do
      {
        v62 = (_QWORD *)*v52;
        v63 = v52[3];
        if (v63)
        {
          v64 = v52[4];
          v61 = (void *)v52[3];
          if (v64 != v63)
          {
            do
            {
              if (*(char *)(v64 - 1) < 0)
                operator delete(*(void **)(v64 - 24));
              v64 -= 24;
            }
            while (v64 != v63);
            v61 = (void *)v52[3];
          }
          v52[4] = v63;
          operator delete(v61);
        }
        operator delete(v52);
        v52 = v62;
      }
      while (v62);
    }
    v53 = *(void **)(a1 + 304);
    *(_QWORD *)(a1 + 304) = 0;
    if (v53)
      operator delete(v53);
  }
  if (*(_BYTE *)(a1 + 296))
  {
    v54 = *(_QWORD *)(a1 + 272);
    if (v54)
    {
      v55 = *(_QWORD *)(a1 + 280);
      v56 = *(void **)(a1 + 272);
      if (v55 != v54)
      {
        do
        {
          if (*(char *)(v55 - 1) < 0)
            operator delete(*(void **)(v55 - 24));
          v55 -= 24;
        }
        while (v55 != v54);
        v56 = *(void **)(a1 + 272);
      }
      *(_QWORD *)(a1 + 280) = v54;
      operator delete(v56);
    }
  }
  if (*(_BYTE *)(a1 + 264))
  {
    v65 = *(_QWORD **)(a1 + 240);
    if (v65)
    {
      do
      {
        v71 = (_QWORD *)*v65;
        v72 = v65[3];
        if (v72)
        {
          v73 = v65[4];
          v70 = (void *)v65[3];
          if (v73 != v72)
          {
            do
            {
              if (*(char *)(v73 - 1) < 0)
                operator delete(*(void **)(v73 - 24));
              v73 -= 24;
            }
            while (v73 != v72);
            v70 = (void *)v65[3];
          }
          v65[4] = v72;
          operator delete(v70);
        }
        operator delete(v65);
        v65 = v71;
      }
      while (v71);
    }
    v66 = *(void **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = 0;
    if (v66)
      operator delete(v66);
  }
  if (*(_BYTE *)(a1 + 216))
  {
    v67 = *(_QWORD *)(a1 + 192);
    if (v67)
    {
      v68 = *(_QWORD *)(a1 + 200);
      v69 = *(void **)(a1 + 192);
      if (v68 != v67)
      {
        do
        {
          if (*(char *)(v68 - 1) < 0)
            operator delete(*(void **)(v68 - 24));
          v68 -= 24;
        }
        while (v68 != v67);
        v69 = *(void **)(a1 + 192);
      }
      *(_QWORD *)(a1 + 200) = v67;
      operator delete(v69);
    }
  }
  if (*(_BYTE *)(a1 + 184))
  {
    v74 = *(_QWORD **)(a1 + 160);
    if (v74)
    {
      do
      {
        v82 = (_QWORD *)*v74;
        v83 = v74[3];
        if (v83)
        {
          v84 = v74[4];
          v81 = (void *)v74[3];
          if (v84 != v83)
          {
            do
            {
              if (*(char *)(v84 - 1) < 0)
                operator delete(*(void **)(v84 - 24));
              v84 -= 24;
            }
            while (v84 != v83);
            v81 = (void *)v74[3];
          }
          v74[4] = v83;
          operator delete(v81);
        }
        operator delete(v74);
        v74 = v82;
      }
      while (v82);
    }
    v75 = *(void **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    if (v75)
      operator delete(v75);
  }
  if (*(_BYTE *)(a1 + 136))
  {
    v76 = *(_QWORD **)(a1 + 112);
    if (v76)
    {
      do
      {
        v86 = (_QWORD *)*v76;
        v87 = v76[3];
        if (v87)
        {
          v88 = v76[4];
          v85 = (void *)v76[3];
          if (v88 != v87)
          {
            do
            {
              if (*(char *)(v88 - 1) < 0)
                operator delete(*(void **)(v88 - 24));
              v88 -= 24;
            }
            while (v88 != v87);
            v85 = (void *)v76[3];
          }
          v76[4] = v87;
          operator delete(v85);
        }
        operator delete(v76);
        v76 = v86;
      }
      while (v86);
    }
    v77 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (v77)
      operator delete(v77);
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v78 = *(_QWORD *)(a1 + 64);
    if (v78)
    {
      v79 = *(_QWORD *)(a1 + 72);
      v80 = *(void **)(a1 + 64);
      if (v79 != v78)
      {
        do
        {
          if (*(char *)(v79 - 1) < 0)
            operator delete(*(void **)(v79 - 24));
          v79 -= 24;
        }
        while (v79 != v78);
        v80 = *(void **)(a1 + 64);
      }
      *(_QWORD *)(a1 + 72) = v78;
      operator delete(v80);
    }
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v89 = *(_QWORD *)(a1 + 32);
    if (v89)
    {
      v90 = *(_QWORD *)(a1 + 40);
      v91 = *(void **)(a1 + 32);
      if (v90 != v89)
      {
        do
        {
          if (*(char *)(v90 - 1) < 0)
            operator delete(*(void **)(v90 - 24));
          v90 -= 24;
        }
        while (v90 != v89);
        v91 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v89;
      operator delete(v91);
    }
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v92 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v93 = *(void ***)(a1 + 8);
      v94 = *(void ***)a1;
      if (v93 != v92)
      {
        do
        {
          if (*((char *)v93 - 1) < 0)
            operator delete(*(v93 - 3));
          v93 -= 3;
        }
        while (v93 != v92);
        v94 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v92;
      operator delete(v94);
    }
  }
  return a1;
}

void **sub_239A73AEC(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;
  void **v11;
  void **v12;
  void *v13;
  void **v14;
  void **v15;
  void *v16;
  void **v17;
  void **v18;
  void *v19;
  void **v20;
  void **v21;
  void *v22;
  void **v23;
  void **v24;
  void *v25;
  void **v26;
  void **v27;
  void *v28;
  void **v29;
  void **v30;
  void *v31;
  void **v32;
  void **v33;
  void *v34;
  void **v35;
  void **v36;
  void *v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  void *v43;
  void **v44;
  void **v45;
  void *v46;
  void **v47;
  void **v48;
  void *v49;
  void **v50;
  void **v51;
  void *v52;
  void **v53;
  void **v54;
  void *v55;
  void **v56;
  void **v57;
  void *v58;
  void **v59;
  void **v60;
  void *v61;
  void **v62;
  void **v63;
  void *v64;
  void **v65;
  void **v66;
  void *v67;
  void **v68;
  void **v69;
  void *v70;
  void **v71;
  void **v72;
  void *v73;
  void **v74;
  void **v75;
  void *v76;
  void **v77;
  void **v78;
  void *v79;
  void **v80;
  void **v81;
  void *v82;
  void **v83;
  void **v84;
  void *v85;
  void **v86;
  void **v87;
  void *v88;
  void **v89;
  void **v90;
  void *v91;
  void **v92;
  void **v93;
  void *v94;
  void **v95;
  void **v96;
  void *v97;
  void **v98;
  void **v99;
  void *v100;
  void **v101;
  void **v102;
  void *v103;
  void **v104;
  void **v105;
  void *v106;
  void **v107;
  void **v108;
  void *v109;

  v2 = (void **)a1[105];
  if (v2)
  {
    v3 = (void **)a1[106];
    v4 = a1[105];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = a1[105];
    }
    a1[106] = v2;
    operator delete(v4);
  }
  v5 = (void **)a1[102];
  if (v5)
  {
    v6 = (void **)a1[103];
    v7 = a1[102];
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = a1[102];
    }
    a1[103] = v5;
    operator delete(v7);
  }
  v8 = (void **)a1[99];
  if (v8)
  {
    v9 = (void **)a1[100];
    v10 = a1[99];
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = a1[99];
    }
    a1[100] = v8;
    operator delete(v10);
  }
  v11 = (void **)a1[96];
  if (v11)
  {
    v12 = (void **)a1[97];
    v13 = a1[96];
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != v11);
      v13 = a1[96];
    }
    a1[97] = v11;
    operator delete(v13);
  }
  v14 = (void **)a1[93];
  if (v14)
  {
    v15 = (void **)a1[94];
    v16 = a1[93];
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*(v15 - 3));
        v15 -= 3;
      }
      while (v15 != v14);
      v16 = a1[93];
    }
    a1[94] = v14;
    operator delete(v16);
  }
  v17 = (void **)a1[90];
  if (v17)
  {
    v18 = (void **)a1[91];
    v19 = a1[90];
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v18 - 1) < 0)
          operator delete(*(v18 - 3));
        v18 -= 3;
      }
      while (v18 != v17);
      v19 = a1[90];
    }
    a1[91] = v17;
    operator delete(v19);
  }
  v20 = (void **)a1[87];
  if (v20)
  {
    v21 = (void **)a1[88];
    v22 = a1[87];
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v21 - 1) < 0)
          operator delete(*(v21 - 3));
        v21 -= 3;
      }
      while (v21 != v20);
      v22 = a1[87];
    }
    a1[88] = v20;
    operator delete(v22);
  }
  v23 = (void **)a1[84];
  if (v23)
  {
    v24 = (void **)a1[85];
    v25 = a1[84];
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v24 - 1) < 0)
          operator delete(*(v24 - 3));
        v24 -= 3;
      }
      while (v24 != v23);
      v25 = a1[84];
    }
    a1[85] = v23;
    operator delete(v25);
  }
  v26 = (void **)a1[81];
  if (v26)
  {
    v27 = (void **)a1[82];
    v28 = a1[81];
    if (v27 != v26)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = a1[81];
    }
    a1[82] = v26;
    operator delete(v28);
  }
  v29 = (void **)a1[78];
  if (v29)
  {
    v30 = (void **)a1[79];
    v31 = a1[78];
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = a1[78];
    }
    a1[79] = v29;
    operator delete(v31);
  }
  v32 = (void **)a1[75];
  if (v32)
  {
    v33 = (void **)a1[76];
    v34 = a1[75];
    if (v33 != v32)
    {
      do
      {
        if (*((char *)v33 - 1) < 0)
          operator delete(*(v33 - 3));
        v33 -= 3;
      }
      while (v33 != v32);
      v34 = a1[75];
    }
    a1[76] = v32;
    operator delete(v34);
  }
  v35 = (void **)a1[72];
  if (v35)
  {
    v36 = (void **)a1[73];
    v37 = a1[72];
    if (v36 != v35)
    {
      do
      {
        if (*((char *)v36 - 1) < 0)
          operator delete(*(v36 - 3));
        v36 -= 3;
      }
      while (v36 != v35);
      v37 = a1[72];
    }
    a1[73] = v35;
    operator delete(v37);
  }
  v38 = (void **)a1[69];
  if (v38)
  {
    v39 = (void **)a1[70];
    v40 = a1[69];
    if (v39 != v38)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = a1[69];
    }
    a1[70] = v38;
    operator delete(v40);
  }
  v41 = (void **)a1[66];
  if (v41)
  {
    v42 = (void **)a1[67];
    v43 = a1[66];
    if (v42 != v41)
    {
      do
      {
        if (*((char *)v42 - 1) < 0)
          operator delete(*(v42 - 3));
        v42 -= 3;
      }
      while (v42 != v41);
      v43 = a1[66];
    }
    a1[67] = v41;
    operator delete(v43);
  }
  v44 = (void **)a1[63];
  if (v44)
  {
    v45 = (void **)a1[64];
    v46 = a1[63];
    if (v45 != v44)
    {
      do
      {
        if (*((char *)v45 - 1) < 0)
          operator delete(*(v45 - 3));
        v45 -= 3;
      }
      while (v45 != v44);
      v46 = a1[63];
    }
    a1[64] = v44;
    operator delete(v46);
  }
  v47 = (void **)a1[60];
  if (v47)
  {
    v48 = (void **)a1[61];
    v49 = a1[60];
    if (v48 != v47)
    {
      do
      {
        if (*((char *)v48 - 1) < 0)
          operator delete(*(v48 - 3));
        v48 -= 3;
      }
      while (v48 != v47);
      v49 = a1[60];
    }
    a1[61] = v47;
    operator delete(v49);
  }
  v50 = (void **)a1[57];
  if (v50)
  {
    v51 = (void **)a1[58];
    v52 = a1[57];
    if (v51 != v50)
    {
      do
      {
        if (*((char *)v51 - 1) < 0)
          operator delete(*(v51 - 3));
        v51 -= 3;
      }
      while (v51 != v50);
      v52 = a1[57];
    }
    a1[58] = v50;
    operator delete(v52);
  }
  v53 = (void **)a1[54];
  if (v53)
  {
    v54 = (void **)a1[55];
    v55 = a1[54];
    if (v54 != v53)
    {
      do
      {
        if (*((char *)v54 - 1) < 0)
          operator delete(*(v54 - 3));
        v54 -= 3;
      }
      while (v54 != v53);
      v55 = a1[54];
    }
    a1[55] = v53;
    operator delete(v55);
  }
  v56 = (void **)a1[51];
  if (v56)
  {
    v57 = (void **)a1[52];
    v58 = a1[51];
    if (v57 != v56)
    {
      do
      {
        if (*((char *)v57 - 1) < 0)
          operator delete(*(v57 - 3));
        v57 -= 3;
      }
      while (v57 != v56);
      v58 = a1[51];
    }
    a1[52] = v56;
    operator delete(v58);
  }
  v59 = (void **)a1[48];
  if (v59)
  {
    v60 = (void **)a1[49];
    v61 = a1[48];
    if (v60 != v59)
    {
      do
      {
        if (*((char *)v60 - 1) < 0)
          operator delete(*(v60 - 3));
        v60 -= 3;
      }
      while (v60 != v59);
      v61 = a1[48];
    }
    a1[49] = v59;
    operator delete(v61);
  }
  v62 = (void **)a1[45];
  if (v62)
  {
    v63 = (void **)a1[46];
    v64 = a1[45];
    if (v63 != v62)
    {
      do
      {
        if (*((char *)v63 - 1) < 0)
          operator delete(*(v63 - 3));
        v63 -= 3;
      }
      while (v63 != v62);
      v64 = a1[45];
    }
    a1[46] = v62;
    operator delete(v64);
  }
  v65 = (void **)a1[42];
  if (v65)
  {
    v66 = (void **)a1[43];
    v67 = a1[42];
    if (v66 != v65)
    {
      do
      {
        if (*((char *)v66 - 1) < 0)
          operator delete(*(v66 - 3));
        v66 -= 3;
      }
      while (v66 != v65);
      v67 = a1[42];
    }
    a1[43] = v65;
    operator delete(v67);
  }
  v68 = (void **)a1[39];
  if (v68)
  {
    v69 = (void **)a1[40];
    v70 = a1[39];
    if (v69 != v68)
    {
      do
      {
        if (*((char *)v69 - 1) < 0)
          operator delete(*(v69 - 3));
        v69 -= 3;
      }
      while (v69 != v68);
      v70 = a1[39];
    }
    a1[40] = v68;
    operator delete(v70);
  }
  v71 = (void **)a1[36];
  if (v71)
  {
    v72 = (void **)a1[37];
    v73 = a1[36];
    if (v72 != v71)
    {
      do
      {
        if (*((char *)v72 - 1) < 0)
          operator delete(*(v72 - 3));
        v72 -= 3;
      }
      while (v72 != v71);
      v73 = a1[36];
    }
    a1[37] = v71;
    operator delete(v73);
  }
  v74 = (void **)a1[33];
  if (v74)
  {
    v75 = (void **)a1[34];
    v76 = a1[33];
    if (v75 != v74)
    {
      do
      {
        if (*((char *)v75 - 1) < 0)
          operator delete(*(v75 - 3));
        v75 -= 3;
      }
      while (v75 != v74);
      v76 = a1[33];
    }
    a1[34] = v74;
    operator delete(v76);
  }
  v77 = (void **)a1[30];
  if (v77)
  {
    v78 = (void **)a1[31];
    v79 = a1[30];
    if (v78 != v77)
    {
      do
      {
        if (*((char *)v78 - 1) < 0)
          operator delete(*(v78 - 3));
        v78 -= 3;
      }
      while (v78 != v77);
      v79 = a1[30];
    }
    a1[31] = v77;
    operator delete(v79);
  }
  v80 = (void **)a1[27];
  if (v80)
  {
    v81 = (void **)a1[28];
    v82 = a1[27];
    if (v81 != v80)
    {
      do
      {
        if (*((char *)v81 - 1) < 0)
          operator delete(*(v81 - 3));
        v81 -= 3;
      }
      while (v81 != v80);
      v82 = a1[27];
    }
    a1[28] = v80;
    operator delete(v82);
  }
  v83 = (void **)a1[24];
  if (v83)
  {
    v84 = (void **)a1[25];
    v85 = a1[24];
    if (v84 != v83)
    {
      do
      {
        if (*((char *)v84 - 1) < 0)
          operator delete(*(v84 - 3));
        v84 -= 3;
      }
      while (v84 != v83);
      v85 = a1[24];
    }
    a1[25] = v83;
    operator delete(v85);
  }
  v86 = (void **)a1[21];
  if (v86)
  {
    v87 = (void **)a1[22];
    v88 = a1[21];
    if (v87 != v86)
    {
      do
      {
        if (*((char *)v87 - 1) < 0)
          operator delete(*(v87 - 3));
        v87 -= 3;
      }
      while (v87 != v86);
      v88 = a1[21];
    }
    a1[22] = v86;
    operator delete(v88);
  }
  v89 = (void **)a1[18];
  if (v89)
  {
    v90 = (void **)a1[19];
    v91 = a1[18];
    if (v90 != v89)
    {
      do
      {
        if (*((char *)v90 - 1) < 0)
          operator delete(*(v90 - 3));
        v90 -= 3;
      }
      while (v90 != v89);
      v91 = a1[18];
    }
    a1[19] = v89;
    operator delete(v91);
  }
  v92 = (void **)a1[15];
  if (v92)
  {
    v93 = (void **)a1[16];
    v94 = a1[15];
    if (v93 != v92)
    {
      do
      {
        if (*((char *)v93 - 1) < 0)
          operator delete(*(v93 - 3));
        v93 -= 3;
      }
      while (v93 != v92);
      v94 = a1[15];
    }
    a1[16] = v92;
    operator delete(v94);
  }
  v95 = (void **)a1[12];
  if (v95)
  {
    v96 = (void **)a1[13];
    v97 = a1[12];
    if (v96 != v95)
    {
      do
      {
        if (*((char *)v96 - 1) < 0)
          operator delete(*(v96 - 3));
        v96 -= 3;
      }
      while (v96 != v95);
      v97 = a1[12];
    }
    a1[13] = v95;
    operator delete(v97);
  }
  v98 = (void **)a1[9];
  if (v98)
  {
    v99 = (void **)a1[10];
    v100 = a1[9];
    if (v99 != v98)
    {
      do
      {
        if (*((char *)v99 - 1) < 0)
          operator delete(*(v99 - 3));
        v99 -= 3;
      }
      while (v99 != v98);
      v100 = a1[9];
    }
    a1[10] = v98;
    operator delete(v100);
  }
  v101 = (void **)a1[6];
  if (v101)
  {
    v102 = (void **)a1[7];
    v103 = a1[6];
    if (v102 != v101)
    {
      do
      {
        if (*((char *)v102 - 1) < 0)
          operator delete(*(v102 - 3));
        v102 -= 3;
      }
      while (v102 != v101);
      v103 = a1[6];
    }
    a1[7] = v101;
    operator delete(v103);
  }
  v104 = (void **)a1[3];
  if (v104)
  {
    v105 = (void **)a1[4];
    v106 = a1[3];
    if (v105 != v104)
    {
      do
      {
        if (*((char *)v105 - 1) < 0)
          operator delete(*(v105 - 3));
        v105 -= 3;
      }
      while (v105 != v104);
      v106 = a1[3];
    }
    a1[4] = v104;
    operator delete(v106);
  }
  v107 = (void **)*a1;
  if (*a1)
  {
    v108 = (void **)a1[1];
    v109 = *a1;
    if (v108 != v107)
    {
      do
      {
        if (*((char *)v108 - 1) < 0)
          operator delete(*(v108 - 3));
        v108 -= 3;
      }
      while (v108 != v107);
      v109 = *a1;
    }
    a1[1] = v107;
    operator delete(v109);
  }
  return a1;
}

uint64_t sub_239A74534(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_239A7458C(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  pthread_rwlock_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  void **v33;
  char *v34;
  _DWORD *v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  _QWORD v62[3];
  _QWORD *v63;
  uint64_t v64;
  _BYTE v65[24];
  _BYTE *v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = a1 + 56;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_OWORD *)(a1 + 72) = xmmword_239EC69E0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &off_250AF4F90;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 240) = a2[2];
  v8 = a2[3];
  *(_QWORD *)(a1 + 248) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (uint64_t *)(a1 + 256);
  *(_OWORD *)(a1 + 304) = 0uLL;
  *(_OWORD *)(a1 + 320) = 0uLL;
  v60 = (uint64_t *)(a1 + 256);
  v61 = (uint64_t *)(a1 + 272);
  v12 = (_QWORD *)(a1 + 288);
  v13 = (_QWORD *)(a1 + 304);
  *(_OWORD *)(a1 + 272) = 0uLL;
  *(_OWORD *)(a1 + 288) = 0uLL;
  *(_OWORD *)(a1 + 256) = 0uLL;
  *(_DWORD *)(a1 + 336) = 1065353216;
  sub_2397A1618((pthread_mutex_t *)(a1 + 344));
  if (!*v12)
  {
    v34 = (char *)operator new(0x108uLL);
    *((_DWORD *)v34 + 6) = 0x7FFFFFFF;
    v35 = v34 + 24;
    *(_OWORD *)(v34 + 8) = 0u;
    *((_OWORD *)v34 + 2) = 0u;
    *(_QWORD *)v34 = &off_250AF4FD0;
    *((_OWORD *)v34 + 3) = 0u;
    *((_OWORD *)v34 + 4) = 0u;
    v34[80] = 0;
    *(_OWORD *)(v34 + 88) = 0u;
    sub_2397A1618((pthread_mutex_t *)(v34 + 200));
    v36 = *((_DWORD *)v34 + 6);
    if (v36 >= 0x7FFFFFFF)
    {
      v36 = 0x7FFFFFFF;
      *v35 = 0x7FFFFFFF;
    }
    else if (v36 < 2)
    {
      v36 = 1;
    }
    *((_DWORD *)v34 + 6) = v36;
    pthread_cond_init((pthread_cond_t *)(v34 + 104), 0);
    pthread_cond_init((pthread_cond_t *)(v34 + 152), 0);
    v51 = *(std::__shared_weak_count **)(a1 + 296);
    *(_QWORD *)(a1 + 288) = v35;
    *(_QWORD *)(a1 + 296) = v34;
    v11 = v60;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  if (!*v11)
  {
    v14 = operator new(0x120uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_250AE9800;
    v15 = sub_2397A1740((uint64_t)(v14 + 3));
    v16 = *(std::__shared_weak_count **)(a1 + 264);
    *(_QWORD *)(a1 + 256) = v15;
    *(_QWORD *)(a1 + 264) = v14;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *v11;
    v20 = (pthread_rwlock_t *)(*v11 + 24);
    j__pthread_rwlock_wrlock(v20);
    *(_BYTE *)(v19 + 16) = 1;
    j__pthread_rwlock_unlock(v20);
    sub_2397A195C(v19);
    v21 = (_QWORD *)operator new();
    *v21 = &off_250AF5008;
    v21[1] = a1;
    *(_QWORD *)(v19 + 224) = v21;
    sub_2397A1878((pthread_t *)v19);
  }
  if (!*v61)
  {
    v22 = *(_QWORD *)(a1 + 240);
    v23 = *(_QWORD *)(a1 + 248);
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = *(std::__shared_weak_count **)(a1 + 280);
    *(_QWORD *)(a1 + 272) = v22;
    *(_QWORD *)(a1 + 280) = v23;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      v22 = *v61;
    }
    if (!v22)
    {
      v54 = *(_QWORD *)(a1 + 232);
      v55 = operator new(0x178uLL);
      v55[1] = 0;
      v55[2] = 0;
      *v55 = &off_250ADB8B0;
      v56 = sub_2397A2A50((uint64_t)(v55 + 3), v54, 0);
      v57 = *(std::__shared_weak_count **)(a1 + 280);
      *(_QWORD *)(a1 + 272) = v56;
      *(_QWORD *)(a1 + 280) = v55;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
    }
  }
  sub_239A74F1C(a1);
  if (*(_QWORD *)(a1 + 328))
  {
    v29 = *(void ***)(a1 + 320);
    if (v29)
    {
      do
      {
        v33 = (void **)*v29;
        if (*((char *)v29 + 39) < 0)
          operator delete(v29[2]);
        operator delete(v29);
        v29 = v33;
      }
      while (v33);
    }
    *(_QWORD *)(a1 + 320) = 0;
    v30 = *(_QWORD *)(a1 + 312);
    if (v30)
    {
      for (i = 0; i != v30; ++i)
        *(_QWORD *)(*v13 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  v32 = a3[3];
  if (!v32)
    goto LABEL_32;
  if ((_QWORD *)v32 != a3)
  {
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
LABEL_32:
    v63 = (_QWORD *)v32;
    goto LABEL_40;
  }
  v63 = v62;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v62);
LABEL_40:
  v64 = a1;
  v66 = 0;
  v37 = operator new(0x30uLL);
  *v37 = &off_250AF5270;
  v38 = (uint64_t)v63;
  if (!v63)
  {
LABEL_43:
    v37[4] = v38;
    goto LABEL_45;
  }
  if (v63 != v62)
  {
    v38 = (*(uint64_t (**)(void))(*v63 + 16))();
    goto LABEL_43;
  }
  v37[4] = v37 + 1;
  (*(void (**)(_QWORD *))(v62[0] + 24))(v62);
LABEL_45:
  v37[5] = v64;
  v66 = v37;
  sub_2397A1694((pthread_mutex_t *)(a1 + 344));
  if (!*(_QWORD *)(a1 + 328))
  {
    if (!v66)
      sub_2394172E0();
    (*(void (**)(_BYTE *))(*(_QWORD *)v66 + 48))(v66);
  }
  sub_2397A16B4((pthread_mutex_t *)(a1 + 344));
  v39 = v66;
  if (v66 == v65)
  {
    v40 = 4;
    v39 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_53;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_53:
  v41 = v63;
  if (v63 == v62)
  {
    v42 = 4;
    v41 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_58;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_58:
  v43 = a4[3];
  if (!v43)
  {
LABEL_61:
    v63 = (_QWORD *)v43;
    goto LABEL_63;
  }
  if ((_QWORD *)v43 != a4)
  {
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
    goto LABEL_61;
  }
  v63 = v62;
  (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v62);
LABEL_63:
  v64 = a1;
  v66 = 0;
  v44 = operator new(0x30uLL);
  *v44 = &off_250AF52B8;
  v45 = (uint64_t)v63;
  if (!v63)
  {
LABEL_66:
    v44[4] = v45;
    goto LABEL_68;
  }
  if (v63 != v62)
  {
    v45 = (*(uint64_t (**)(void))(*v63 + 16))();
    goto LABEL_66;
  }
  v44[4] = v44 + 1;
  (*(void (**)(_QWORD *))(v62[0] + 24))(v62);
LABEL_68:
  v44[5] = v64;
  v66 = v44;
  sub_2397A1694((pthread_mutex_t *)(a1 + 344));
  if (!*(_QWORD *)(a1 + 328))
  {
    if (!v66)
      sub_2394172E0();
    (*(void (**)(_BYTE *))(*(_QWORD *)v66 + 48))(v66);
  }
  sub_2397A16B4((pthread_mutex_t *)(a1 + 344));
  v46 = v66;
  if (v66 == v65)
  {
    v47 = 4;
    v46 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_76;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_76:
  v48 = v63;
  if (v63 == v62)
  {
    v49 = 4;
    v48 = v62;
    goto LABEL_80;
  }
  if (v63)
  {
    v49 = 5;
LABEL_80:
    (*(void (**)(void))(*v48 + 8 * v49))();
  }
  return a1;
}

void sub_239A74C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  _QWORD **v22;
  uint64_t v23;
  pthread_mutex_t *v24;
  std::__shared_weak_count *v25;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v27);
  sub_2397A163C(v24);
  sub_23942823C(v23);
  sub_239A4D7C0(a10);
  sub_239416DA0(a12);
  sub_239416DA0(a11);
  sub_239A74534(v21 + 224);
  v28 = *v22;
  if (*v22 == (_QWORD *)(v21 + 176))
  {
    v29 = 4;
    v28 = (_QWORD *)(v21 + 176);
  }
  else
  {
    if (!v28)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_6:
  v30 = *(_QWORD **)(v21 + 168);
  if (v30 == (_QWORD *)(v21 + 144))
  {
    v31 = 4;
    v30 = (_QWORD *)(v21 + 144);
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_11:
  sub_239A74E00(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_239A74E00(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;

  *(_QWORD *)a1 = &off_250AF4FB0;
  sub_239A74F1C(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  if (*(_QWORD *)(a1 + 72))
  {
    v2 = *(_QWORD *)(a1 + 56);
    v3 = *(char **)(a1 + 64);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v2 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *(_QWORD *)(a1 + 72) = 0;
    if (v3 != (char *)(a1 + 56))
    {
      do
      {
        v12 = (char *)*((_QWORD *)v3 + 1);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v12;
      }
      while (v12 != (char *)(a1 + 56));
    }
  }
  v5 = *(char **)(a1 + 24);
  if (v5)
  {
    do
    {
      v8 = *(char **)v5;
      v9 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v5[39] < 0)
        operator delete(*((void **)v5 + 2));
      operator delete(v5);
      v5 = v8;
    }
    while (v8);
  }
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

void sub_239A74F1C(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t i;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  uint64_t v14;

  v2 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 72);
    if (!v3)
      break;
    v4 = *(char **)(a1 + 56);
    if (v4[39] < 0)
    {
      sub_23941A7F8(__p, *((void **)v4 + 2), *((_QWORD *)v4 + 3));
      v4 = *(char **)(a1 + 56);
      v3 = *(_QWORD *)(a1 + 72);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)v4 + 1);
      v14 = *((_QWORD *)v4 + 4);
    }
    v5 = *(_QWORD **)v4;
    v5[1] = *((_QWORD *)v4 + 1);
    **((_QWORD **)v4 + 1) = v5;
    *(_QWORD *)(a1 + 72) = v3 - 1;
    if (v4[39] < 0)
      operator delete(*((void **)v4 + 2));
    operator delete(v4);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v6 = *(char **)(a1 + 24);
    if (v6)
    {
      do
      {
        v9 = *(char **)v6;
        v10 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        if (v6[39] < 0)
          operator delete(*((void **)v6 + 2));
        operator delete(v6);
        v6 = v9;
      }
      while (v9);
    }
    *(_QWORD *)(a1 + 24) = 0;
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      for (i = 0; i != v7; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 32) = 0;
  }
  std::mutex::unlock(v2);
}

void sub_239A75084(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_239A7509C(uint64_t a1)
{
  sub_239A74E00(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A750C0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF52B8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A7511C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF52B8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A75188(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  *v2 = &off_250AF52B8;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
LABEL_6:
  v2[5] = *(_QWORD *)(a1 + 40);
  return v2;
}

void sub_239A75204(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A75218(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = &off_250AF52B8;
  v4 = a2 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      a2[4] = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  a2[5] = *(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *sub_239A75290(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A752C4(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *sub_239A75314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = a1 + 8;
    if (v1 == v3)
    {
      v10 = v9;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    }
  }
  else
  {
    v10 = 0;
  }
  v4 = v2 + 176;
  if ((_QWORD *)(v2 + 176) != v9)
  {
    v5 = v10;
    v6 = *(_QWORD *)(v2 + 200);
    if (v10 == v9)
    {
      if (v6 == v4)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v2 + 200) + 24))(*(_QWORD *)(v2 + 200), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 200) + 32))(*(_QWORD *)(v2 + 200));
        *(_QWORD *)(v2 + 200) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, uint64_t))(v11[0] + 24))(v11, v2 + 176);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v9[0] + 24))(v9, v2 + 176);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(v2 + 200);
      }
      *(_QWORD *)(v2 + 200) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v2 + 176, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 200) + 32))(*(_QWORD *)(v2 + 200));
      *(_QWORD *)(v2 + 200) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(v2 + 200);
      *(_QWORD *)(v2 + 200) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_239A75508(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

_QWORD *sub_239A75514(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF5270;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A75570(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF5270;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A755DC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  *v2 = &off_250AF5270;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
LABEL_6:
  v2[5] = *(_QWORD *)(a1 + 40);
  return v2;
}

void sub_239A75658(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A7566C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = &off_250AF5270;
  v4 = a2 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      a2[4] = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  a2[5] = *(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *sub_239A756E4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A75718(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *sub_239A75768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = a1 + 8;
    if (v1 == v3)
    {
      v10 = v9;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    }
  }
  else
  {
    v10 = 0;
  }
  v4 = v2 + 144;
  if ((_QWORD *)(v2 + 144) != v9)
  {
    v5 = v10;
    v6 = *(_QWORD *)(v2 + 168);
    if (v10 == v9)
    {
      if (v6 == v4)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v2 + 168) + 24))(*(_QWORD *)(v2 + 168), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 168) + 32))(*(_QWORD *)(v2 + 168));
        *(_QWORD *)(v2 + 168) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, uint64_t))(v11[0] + 24))(v11, v2 + 144);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v9[0] + 24))(v9, v2 + 144);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(v2 + 168);
      }
      *(_QWORD *)(v2 + 168) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v2 + 144, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 168) + 32))(*(_QWORD *)(v2 + 168));
      *(_QWORD *)(v2 + 168) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(v2 + 168);
      *(_QWORD *)(v2 + 168) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_239A7595C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_239A7596C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239A75990(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  int *v3;
  BOOL v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  BOOL v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _OWORD *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  BOOL v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  BOOL v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t *v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  char v78;
  void *__dst[2];
  uint64_t v80;
  void *v81[2];
  uint64_t v82;
  void *v83[2];
  uint64_t v84;
  void *__p[2];
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  char v89;
  _BYTE v90[24];
  _BYTE *v91;
  _BYTE v92[24];
  _BYTE *v93;
  _QWORD v94[3];
  _QWORD *v95;
  _BYTE v96[24];
  _BYTE *v97;
  _BYTE v98[24];
  _BYTE *v99;
  _BYTE v100[24];
  _BYTE *v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int **)(v1 + 288);
  if (v2)
  {
    sub_239A766BC((uint64_t)&v88, v2);
    v3 = (int *)v88;
    if ((_QWORD)v88)
      v4 = v89 == 0;
    else
      v4 = 1;
    if (!v4)
    {
      while (1)
      {
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
        *(_QWORD *)&v87 = v3;
        *((_QWORD *)&v87 + 1) = *((_QWORD *)&v88 + 1);
        if (*((_QWORD *)&v88 + 1))
        {
          v10 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v12 = *v3;
        switch(*v3)
        {
          case 0:
            if (v9)
            {
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v14 = __ldxr(p_shared_owners);
              while (__stxr(v14 + 1, p_shared_owners));
            }
            if (*((char *)v3 + 31) < 0)
            {
              sub_23941A7F8(__p, *((void **)v3 + 1), *((_QWORD *)v3 + 2));
            }
            else
            {
              v15 = *(_OWORD *)(v3 + 2);
              v86 = *((_QWORD *)v3 + 3);
              *(_OWORD *)__p = v15;
            }
            if (v9)
            {
              v43 = (unint64_t *)&v9->__shared_owners_;
              do
                v44 = __ldxr(v43);
              while (__stxr(v44 + 1, v43));
            }
            v101 = 0;
            v45 = operator new(0x20uLL);
            *v45 = &off_250AF5030;
            v45[1] = v3;
            v45[2] = v9;
            v45[3] = v1;
            v101 = v45;
            v46 = sub_239A768B4(v1, (uint64_t)__p, (uint64_t)v100);
            v47 = v101;
            if (v101 == v100)
            {
              v47 = v100;
              v48 = 4;
LABEL_82:
              (*(void (**)(void))(*v47 + 8 * v48))();
            }
            else if (v101)
            {
              v48 = 5;
              goto LABEL_82;
            }
            if (SHIBYTE(v86) < 0)
            {
              operator delete(__p[0]);
              if (v46)
                goto LABEL_88;
            }
            else if (v46)
            {
LABEL_88:
              if (v9)
              {
                v49 = (unint64_t *)&v9->__shared_owners_;
                do
                  v50 = __ldaxr(v49);
                while (__stlxr(v50 - 1, v49));
                goto LABEL_152;
              }
              goto LABEL_154;
            }
            sub_239A6F858(*(unsigned int **)(v1 + 288), &v87);
            goto LABEL_88;
          case 1:
            if (v9)
            {
              v25 = (unint64_t *)&v9->__shared_owners_;
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
            }
            v27 = v3 + 16;
            v28 = *((char *)v3 + 87);
            if (*((_BYTE *)v3 + 104))
            {
              if (v28 < 0)
              {
                sub_23941A7F8(v81, *((void **)v3 + 8), *((_QWORD *)v3 + 9));
              }
              else
              {
                *(_OWORD *)v81 = *v27;
                v82 = *((_QWORD *)v3 + 10);
              }
              if (v9)
              {
                v54 = (unint64_t *)&v9->__shared_owners_;
                do
                  v55 = __ldxr(v54);
                while (__stxr(v55 + 1, v54));
              }
              v97 = 0;
              v56 = operator new(0x20uLL);
              *v56 = &off_250AF50C0;
              v56[1] = v3;
              v56[2] = v9;
              v56[3] = v1;
              v97 = v56;
              sub_2397A1694((pthread_mutex_t *)(v1 + 344));
              v57 = sub_239514158((_QWORD *)(v1 + 304), (uint64_t)v81);
              if (v57)
              {
                if (!v97)
                  sub_2394172E0();
                (*(void (**)(_BYTE *))(*(_QWORD *)v97 + 48))(v97);
              }
              sub_2397A16B4((pthread_mutex_t *)(v1 + 344));
              v58 = v97;
              if (v97 == v96)
              {
                v58 = v96;
                v59 = 4;
              }
              else
              {
                if (!v97)
                {
LABEL_131:
                  if (SHIBYTE(v82) < 0)
                    operator delete(v81[0]);
                  if (!v57)
                  {
                    sub_239A444D4((uint64_t)"unknown file", 793, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                    sub_239A4475C();
                    abort();
                  }
LABEL_149:
                  if (v9)
                  {
                    v66 = (unint64_t *)&v9->__shared_owners_;
                    do
                      v50 = __ldaxr(v66);
                    while (__stlxr(v50 - 1, v66));
                    goto LABEL_152;
                  }
                  goto LABEL_154;
                }
                v59 = 5;
              }
              (*(void (**)(void))(*v58 + 8 * v59))();
              goto LABEL_131;
            }
            if (v28 < 0)
            {
              sub_23941A7F8(v83, *((void **)v3 + 8), *((_QWORD *)v3 + 9));
            }
            else
            {
              *(_OWORD *)v83 = *v27;
              v84 = *((_QWORD *)v3 + 10);
            }
            if (v9)
            {
              v60 = (unint64_t *)&v9->__shared_owners_;
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            v99 = 0;
            v62 = operator new(0x20uLL);
            *v62 = &off_250AF50C0;
            v62[1] = v3;
            v62[2] = v9;
            v62[3] = v1;
            v99 = v62;
            v63 = sub_239A768B4(v1, (uint64_t)v83, (uint64_t)v98);
            v64 = v99;
            if (v99 == v98)
            {
              v64 = v98;
              v65 = 4;
            }
            else
            {
              if (!v99)
                goto LABEL_144;
              v65 = 5;
            }
            (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_144:
            if (SHIBYTE(v84) < 0)
            {
              operator delete(v83[0]);
              if (v63)
                goto LABEL_149;
            }
            else if (v63)
            {
              goto LABEL_149;
            }
            sub_239A6F858(*(unsigned int **)(v1 + 288), &v87);
            goto LABEL_149;
          case 2:
            if (v9)
            {
              v22 = (unint64_t *)&v9->__shared_owners_;
              do
                v23 = __ldxr(v22);
              while (__stxr(v23 + 1, v22));
            }
            if (*((char *)v3 + 167) < 0)
            {
              sub_23941A7F8(__dst, *((void **)v3 + 18), *((_QWORD *)v3 + 19));
            }
            else
            {
              *(_OWORD *)__dst = *((_OWORD *)v3 + 9);
              v80 = *((_QWORD *)v3 + 20);
            }
            if (v9)
            {
              v33 = (unint64_t *)&v9->__shared_owners_;
              do
                v34 = __ldxr(v33);
              while (__stxr(v34 + 1, v33));
            }
            v95 = 0;
            v35 = operator new(0x20uLL);
            *v35 = &off_250AF5150;
            v35[1] = v3;
            v35[2] = v9;
            v35[3] = v1;
            v95 = v35;
            sub_2397A1694((pthread_mutex_t *)(v1 + 344));
            v36 = sub_239514158((_QWORD *)(v1 + 304), (uint64_t)__dst);
            if (!v36)
            {
              sub_239513CF4(v1 + 304, (uint64_t)__dst, (uint64_t)__dst);
              sub_239A7798C(*(_QWORD *)(v1 + 272), v94);
            }
            sub_2397A16B4((pthread_mutex_t *)(v1 + 344));
            v37 = v95;
            if (v95 == v94)
            {
              v37 = v94;
              v38 = 4;
            }
            else
            {
              if (!v95)
                goto LABEL_110;
              v38 = 5;
            }
            (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_110:
            if (SHIBYTE(v80) < 0)
            {
              operator delete(__dst[0]);
              if (!v36)
                goto LABEL_115;
            }
            else if (!v36)
            {
LABEL_115:
              if (v9)
              {
                v53 = (unint64_t *)&v9->__shared_owners_;
                do
                  v50 = __ldaxr(v53);
                while (__stlxr(v50 - 1, v53));
                goto LABEL_152;
              }
              goto LABEL_154;
            }
            sub_239A6F858(*(unsigned int **)(v1 + 288), &v87);
            goto LABEL_115;
          case 3:
            v77 = *(_OWORD *)(v1 + 208);
            v24 = *((_QWORD *)v3 + 30);
            if (v24)
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v24 + 48))(v24, &v77);
            goto LABEL_154;
          default:
            if (v12 != 99)
            {
              if (v12 != 100)
                goto LABEL_154;
              if (v9)
              {
                v16 = (unint64_t *)&v9->__shared_owners_;
                do
                  v17 = __ldxr(v16);
                while (__stxr(v17 + 1, v16));
                do
                  v18 = __ldxr(v16);
                while (__stxr(v18 + 1, v16));
              }
              v91 = 0;
              v39 = operator new(0x20uLL);
              *v39 = &off_250AF51E0;
              v39[1] = v3;
              v39[2] = v9;
              v39[3] = v1;
              v91 = v39;
              sub_2397A1694((pthread_mutex_t *)(v1 + 344));
              v40 = *(_QWORD *)(v1 + 328);
              if (!v40)
              {
                if (!v91)
                  sub_2394172E0();
                (*(void (**)(_BYTE *))(*(_QWORD *)v91 + 48))(v91);
              }
              sub_2397A16B4((pthread_mutex_t *)(v1 + 344));
              v41 = v91;
              if (v91 == v90)
              {
                v41 = v90;
                v42 = 4;
LABEL_101:
                (*(void (**)(void))(*v41 + 8 * v42))();
              }
              else if (v91)
              {
                v42 = 5;
                goto LABEL_101;
              }
              if (v40)
                sub_239A6F858(*(unsigned int **)(v1 + 288), &v87);
              if (v9)
              {
                v52 = (unint64_t *)&v9->__shared_owners_;
                do
                  v50 = __ldaxr(v52);
                while (__stlxr(v50 - 1, v52));
                goto LABEL_152;
              }
              goto LABEL_154;
            }
            if (v9)
            {
              v19 = (unint64_t *)&v9->__shared_owners_;
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
              do
                v21 = __ldxr(v19);
              while (__stxr(v21 + 1, v19));
            }
            v93 = 0;
            v29 = operator new(0x20uLL);
            *v29 = &off_250AF5198;
            v29[1] = v3;
            v29[2] = v9;
            v29[3] = v1;
            v93 = v29;
            sub_2397A1694((pthread_mutex_t *)(v1 + 344));
            v30 = *(_QWORD *)(v1 + 328);
            if (!v30)
            {
              if (!v93)
                sub_2394172E0();
              (*(void (**)(_BYTE *))(*(_QWORD *)v93 + 48))(v93);
            }
            sub_2397A16B4((pthread_mutex_t *)(v1 + 344));
            v31 = v93;
            if (v93 == v92)
            {
              v31 = v92;
              v32 = 4;
            }
            else
            {
              if (!v93)
                goto LABEL_94;
              v32 = 5;
            }
            (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_94:
            if (v30)
              sub_239A6F858(*(unsigned int **)(v1 + 288), &v87);
            if (v9)
            {
              v51 = (unint64_t *)&v9->__shared_owners_;
              do
                v50 = __ldaxr(v51);
              while (__stlxr(v50 - 1, v51));
LABEL_152:
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
            }
LABEL_154:
            sub_239A766BC((uint64_t)&v77, *(unsigned int **)(v1 + 288));
            v67 = v77;
            v77 = 0uLL;
            v68 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
            v88 = v67;
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            v89 = v78;
            v71 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
            if (!*((_QWORD *)&v77 + 1))
              goto LABEL_163;
            v72 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
              v74 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
              if (*((_QWORD *)&v87 + 1))
              {
LABEL_164:
                v75 = (unint64_t *)&v74->__shared_owners_;
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
            }
            else
            {
LABEL_163:
              v74 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
              if (*((_QWORD *)&v87 + 1))
                goto LABEL_164;
            }
            v3 = (int *)v88;
            if ((_QWORD)v88)
              v8 = v89 == 0;
            else
              v8 = 1;
            if (v8)
              goto LABEL_7;
            break;
        }
      }
    }
LABEL_7:
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_239A761F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,char *a54)
{
  std::__shared_weak_count *v54;
  pthread_mutex_t *v55;
  char *v57;
  uint64_t v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;

  sub_2397A16B4(v55);
  v57 = a54;
  if (a54 == &a51)
  {
    v58 = 4;
    v57 = &a51;
  }
  else
  {
    if (!a54)
    {
LABEL_6:
      if (v54)
      {
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v60 = __ldaxr(p_shared_owners);
        while (__stlxr(v60 - 1, p_shared_owners));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (a42)
      {
        v61 = (unint64_t *)&a42->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))a42->__on_zero_shared)(a42);
          std::__shared_weak_count::__release_weak(a42);
        }
      }
      if (a44)
      {
        v63 = (unint64_t *)&a44->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))a44->__on_zero_shared)(a44);
          std::__shared_weak_count::__release_weak(a44);
        }
      }
      _Unwind_Resume(a1);
    }
    v58 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
  goto LABEL_6;
}

uint64_t sub_239A766BC(uint64_t a1, unsigned int *a2)
{
  pthread_mutex_t *v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v17;

  v4 = (pthread_mutex_t *)(a2 + 44);
  sub_2397A1694((pthread_mutex_t *)(a2 + 44));
  if (*((_QWORD *)a2 + 6))
  {
LABEL_4:
    v5 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + ((*((_QWORD *)a2 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *((_QWORD *)a2 + 5));
    v17 = v5;
    if (*((_QWORD *)&v5 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v8 = *(std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)a2 + 2)
                                                    + ((*((_QWORD *)a2 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *((_QWORD *)a2 + 5)
                                        + 8);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    v11 = *((_QWORD *)a2 + 6) - 1;
    v12 = *((_QWORD *)a2 + 5) + 1;
    *((_QWORD *)a2 + 5) = v12;
    *((_QWORD *)a2 + 6) = v11;
    if (v12 >= 0x200)
    {
      operator delete(**((void ***)a2 + 2));
      *((_QWORD *)a2 + 2) += 8;
      v11 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a2 + 5) -= 256;
    }
    if (v11 < *a2)
      pthread_cond_signal((pthread_cond_t *)(a2 + 20));
    *(_OWORD *)a1 = v17;
    if (*((_QWORD *)&v17 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      *(_BYTE *)(a1 + 16) = 1;
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    else
    {
      *(_BYTE *)(a1 + 16) = 1;
    }
  }
  else
  {
    while (!*((_BYTE *)a2 + 56))
    {
      ++*((_QWORD *)a2 + 9);
      pthread_cond_wait((pthread_cond_t *)(a2 + 32), v4);
      --*((_QWORD *)a2 + 9);
      if (*((_QWORD *)a2 + 6))
        goto LABEL_4;
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
  return sub_2397A16B4(v4);
}

void sub_239A76888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;

  sub_239A4D7C0((uint64_t)&a9);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

BOOL sub_239A768B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  uint64_t *v7;
  uint64_t v8;

  v6 = (pthread_mutex_t *)(a1 + 344);
  sub_2397A1694((pthread_mutex_t *)(a1 + 344));
  v7 = sub_239514158((_QWORD *)(a1 + 304), a2);
  if (!v7)
  {
    v8 = *(_QWORD *)(a3 + 24);
    if (!v8)
      sub_2394172E0();
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  }
  sub_2397A16B4(v6);
  return v7 == 0;
}

void sub_239A76930(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A76948(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF51E0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A769AC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF51E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A76A20(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF51E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A76A78(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF51E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A76AB0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A76B08(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t sub_239A76B60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned __int16 i;
  uint64_t v34;
  uint64_t v36;
  void *__dst[2];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  void *__p[2];
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  void *v47[2];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  pthread_cond_t v58;
  pthread_cond_t v59;
  pthread_mutex_t v60;
  _BYTE v61[24];
  _BYTE *v62;
  uint64_t v63;

  v1 = a1;
  v63 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 24);
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  sub_2397A1618(&v60);
  v51 = 0x7FFFFFFF;
  pthread_cond_init(&v58, 0);
  pthread_cond_init(&v59, 0);
  v3 = (uint64_t *)v2[3];
  if (!v3)
    goto LABEL_73;
  v36 = v1;
  v4 = 0;
  do
  {
    while (1)
    {
      if (*((char *)v3 + 39) < 0)
      {
        sub_23941A7F8(__p, (void *)v3[2], v3[3]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v3 + 1);
        v42 = v3[4];
      }
      v6 = v3[5];
      v5 = (std::__shared_weak_count *)v3[6];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      if (v6 && v2[25])
      {
        if (SHIBYTE(v42) < 0)
        {
          sub_23941A7F8(__dst, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)__p;
          v38 = v42;
        }
        *(_QWORD *)&v39 = v6;
        *((_QWORD *)&v39 + 1) = v5;
        if (v5)
        {
          v9 = (unint64_t *)&v5->__shared_owners_;
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        *(_QWORD *)&v40 = &v51;
        *((_QWORD *)&v40 + 1) = v2;
        v11 = v2[34];
        if (!*(_QWORD *)(v11 + 272))
        {
          sub_239A444D4((uint64_t)"unknown file", 546, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        if (SHIBYTE(v38) < 0)
        {
          sub_23941A7F8(v47, __dst[0], (unint64_t)__dst[1]);
        }
        else
        {
          *(_OWORD *)v47 = *(_OWORD *)__dst;
          v48 = v38;
        }
        v49 = v39;
        if (*((_QWORD *)&v39 + 1))
        {
          v12 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v50 = v40;
        v14 = *(unsigned int **)(v11 + 272);
        if (SHIBYTE(v48) < 0)
        {
          sub_23941A7F8(v43, v47[0], (unint64_t)v47[1]);
        }
        else
        {
          *(_OWORD *)v43 = *(_OWORD *)v47;
          v44 = v48;
        }
        v45 = v49;
        if (*((_QWORD *)&v49 + 1))
        {
          v15 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v46 = v50;
        v62 = 0;
        v17 = (char *)operator new(0x48uLL);
        *(_QWORD *)v17 = off_250AF5228;
        *(_OWORD *)(v17 + 8) = *(_OWORD *)v43;
        *((_QWORD *)v17 + 3) = v44;
        v43[0] = 0;
        v43[1] = 0;
        v44 = 0;
        v18 = v45;
        v45 = 0uLL;
        v19 = v50;
        *((_OWORD *)v17 + 2) = v18;
        *((_OWORD *)v17 + 3) = v19;
        v62 = v17;
        sub_2394D0CC4(v14, (uint64_t)v61);
        v20 = v62;
        if (v62 == v61)
        {
          v20 = v61;
          v21 = 4;
        }
        else
        {
          if (!v62)
          {
LABEL_39:
            v22 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
            if (!*((_QWORD *)&v45 + 1))
              goto LABEL_43;
            v23 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
              if ((SHIBYTE(v44) & 0x80000000) == 0)
              {
LABEL_44:
                v25 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
                if (!*((_QWORD *)&v49 + 1))
                  goto LABEL_51;
                goto LABEL_48;
              }
            }
            else
            {
LABEL_43:
              if ((SHIBYTE(v44) & 0x80000000) == 0)
                goto LABEL_44;
            }
            operator delete(v43[0]);
            v25 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
            if (!*((_QWORD *)&v49 + 1))
              goto LABEL_51;
LABEL_48:
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
              if ((SHIBYTE(v48) & 0x80000000) == 0)
              {
LABEL_52:
                v28 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
                if (!*((_QWORD *)&v39 + 1))
                  goto LABEL_59;
                goto LABEL_56;
              }
LABEL_55:
              operator delete(v47[0]);
              v28 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
              if (!*((_QWORD *)&v39 + 1))
                goto LABEL_59;
LABEL_56:
              v29 = (unint64_t *)&v28->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
                if ((SHIBYTE(v38) & 0x80000000) == 0)
                  goto LABEL_61;
                goto LABEL_60;
              }
LABEL_59:
              if ((SHIBYTE(v38) & 0x80000000) == 0)
              {
LABEL_61:
                ++v4;
                goto LABEL_62;
              }
LABEL_60:
              operator delete(__dst[0]);
              goto LABEL_61;
            }
LABEL_51:
            if ((SHIBYTE(v48) & 0x80000000) == 0)
              goto LABEL_52;
            goto LABEL_55;
          }
          v21 = 5;
        }
        (*(void (**)(void))(*v20 + 8 * v21))();
        goto LABEL_39;
      }
LABEL_62:
      if (v5)
      {
        v31 = (unint64_t *)&v5->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (SHIBYTE(v42) < 0)
        break;
      v3 = (uint64_t *)*v3;
      if (!v3)
        goto LABEL_69;
    }
    operator delete(__p[0]);
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_69:
  v1 = v36;
  if (v4 && (unsigned __int16)sub_2395BFB54(&v51) >= 0x100u)
  {
    do
      --v4;
    while (v4 && (unsigned __int16)sub_2395BFB54(&v51) > 0xFFu);
  }
LABEL_73:
  sub_2395C2A4C((uint64_t)&v51);
  for (i = sub_2395BFB54(&v51); i >= 0x100u; i = sub_2395BFB54(&v51))
    ;
  v34 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 304);
  if (v34)
  {
    LOBYTE(v47[0]) = 1;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v34 + 48))(v34, v47);
  }
  return sub_2395C29C4((uint64_t)&v51);
}

void sub_239A7706C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,void *__p,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_2395C29C4((uint64_t)&a52);
  _Unwind_Resume(a1);
}

uint64_t sub_239A772CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_250AF5228;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_6;
    }
  }
  if (*(char *)(a1 + 31) < 0)
LABEL_6:
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_239A7734C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_250AF5228;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_10:
      JUMPOUT(0x23B83E31CLL);
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_10;
}

char *sub_239A773DC(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_250AF5228;
  v3 = v2 + 8;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_23941A7F8(v3, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 8);
    *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  }
  v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)v2 + 4) = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 5) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  return v2;
}

void sub_239A77464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_239A77478(uint64_t a1, __n128 *a2)
{
  unsigned __int8 *v4;
  __int128 v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __n128 result;

  a2->n128_u64[0] = (unint64_t)off_250AF5228;
  v4 = &a2->n128_u8[8];
  if (*(char *)(a1 + 31) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    a2[1].n128_u64[1] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_QWORD *)(a1 + 40);
  a2[2].n128_u64[0] = *(_QWORD *)(a1 + 32);
  a2[2].n128_u64[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  result = *(__n128 *)(a1 + 48);
  a2[3] = result;
  return result;
}

void sub_239A774F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(*(void **)(a1 + 8));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_8;
}

void sub_239A7756C(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 5);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((__p[31] & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (__p[31] < 0)
LABEL_6:
    operator delete(*((void **)__p + 1));
LABEL_7:
  operator delete(__p);
}

uint64_t sub_239A775E0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  char v12;
  void *__p[2];
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    sub_23941A7F8(__p, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 24);
  }
  v6 = *(_QWORD *)(v2 + 200);
  if (!v6)
    sub_2394172E0();
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v6 + 48))(v6, &v15, __p);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  v7 = v16;
  if (v16)
  {
    v8 = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(unsigned int **)(a1 + 48);
  v12 = 1;
  return sub_2395BFE44(v10, &v12);
}

void sub_239A776D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239A77730(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF5198;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A77794(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF5198;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A77808(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF5198;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A77860(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF5198;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A77898(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A778F0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t sub_239A77948(uint64_t a1)
{
  uint64_t result;

  sub_239A74F1C(*(_QWORD *)(a1 + 24));
  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

_QWORD *sub_239A7798C(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  _QWORD *v4;
  _QWORD *v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned int **)(a1 + 272);
  if (!v2)
  {
    sub_239A444D4((uint64_t)"unknown file", 546, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v4 = (_QWORD *)a2[3];
  if (!v4)
  {
    v18 = 0;
    goto LABEL_10;
  }
  if (v4 == a2)
  {
    v18 = v17;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v17);
    v4 = v18;
    v2 = *(unsigned int **)(a1 + 272);
    if (v18)
      goto LABEL_8;
LABEL_10:
    v14 = v4;
    goto LABEL_11;
  }
  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
  v18 = v4;
  v2 = *(unsigned int **)(a1 + 272);
  if (!v4)
    goto LABEL_10;
LABEL_8:
  if (v4 != v17)
  {
    v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    goto LABEL_10;
  }
  v14 = v13;
  (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v13);
LABEL_11:
  v16 = 0;
  v5 = operator new(0x30uLL);
  v6 = v5;
  *v5 = &off_250AF8098;
  if (v14)
  {
    if (v14 == v13)
    {
      v5[4] = v5 + 1;
      (*(void (**)(_QWORD *))(v13[0] + 24))(v13);
    }
    else
    {
      v5[4] = v14;
      v14 = 0;
    }
  }
  else
  {
    v5[4] = 0;
  }
  v16 = v6;
  sub_2394D0CC4(v2, (uint64_t)v15);
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_21;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_21:
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_26;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_26:
  result = v18;
  if (v18 == v17)
  {
    v12 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_239A77BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239A77C78(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF8098;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A77CD4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF8098;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A77D40(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  *v2 = &off_250AF8098;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_239A77DB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A77DC8(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_250AF8098;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *sub_239A77E3C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A77E70(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_239A77EC0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    sub_2394172E0();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

_QWORD *sub_239A77EE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF5150;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A77F48(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF5150;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A77FBC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF5150;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A78014(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF5150;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A7804C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A780A4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_239A780FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(v3 + 176);
  v18 = *(_QWORD *)(v3 + 168);
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (*(char *)(v3 + 167) < 0)
  {
    sub_23941A7F8(__p, *(void **)(v3 + 144), *(_QWORD *)(v3 + 152));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v3 + 144);
    v17 = *(_QWORD *)(v3 + 160);
  }
  v7 = *(_QWORD *)(v2 + 200);
  if (!v7)
    sub_2394172E0();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v7 + 48))(v7, &v18, __p);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  v9 = v19;
  if (v19)
  {
    v10 = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 208);
  if (v13)
  {
    LOBYTE(v14[0]) = v8;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, v14);
    v12 = *(_QWORD *)(a1 + 8);
  }
  if (*(char *)(v12 + 167) < 0)
  {
    sub_23941A7F8(v14, *(void **)(v12 + 144), *(_QWORD *)(v12 + 152));
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)(v12 + 144);
    v15 = *(_QWORD *)(v12 + 160);
  }
  sub_239A782CC(v2, (uint64_t)v14);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_239A78254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  v23 = *(std::__shared_weak_count **)(v21 - 40);
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A782CC(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  void *v7;
  void *__p;
  char v10;

  v4 = (pthread_mutex_t *)(a1 + 344);
  sub_2397A1694((pthread_mutex_t *)(a1 + 344));
  v5 = (_QWORD *)(a1 + 304);
  v6 = sub_239514158(v5, a2);
  if (v6)
  {
    sub_239A78378((uint64_t)&__p, v5, v6);
    v7 = __p;
    if (__p)
    {
      if (v10 && *((char *)__p + 39) < 0)
        operator delete(*((void **)__p + 2));
      operator delete(v7);
    }
  }
  return sub_2397A16B4(v4);
}

void sub_239A78360(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A78378(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

_QWORD *sub_239A784AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF50C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A78510(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF50C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A78584(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF50C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A785DC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF50C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A78614(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A7866C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_239A786C4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  _BYTE *v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  int8x8_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t *v53;
  uint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  __int128 v57;
  float v58;
  float v59;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  size_t prime;
  int8x8_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  void *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  int v85;
  std::string::size_type size;
  const void **v87;
  std::string *p_src;
  uint64_t v89;
  unint64_t *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  int v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  BOOL v102;
  _QWORD *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  __int128 v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  _BYTE *v148;
  __int128 v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  _QWORD *v157;
  __int128 v158;
  __int128 v159;
  std::string v160;
  __int128 v161;
  char v162;
  uint64_t v163;
  std::string v164;
  void *__dst[2];
  std::string v166;
  __int128 v167;
  unsigned __int8 v168;
  uint64_t v169;
  void *v170[2];
  uint64_t v171;
  std::string __src;
  __int128 v173;
  unsigned __int8 v174;
  std::string __str;
  std::string v176;
  __int128 v177;
  _QWORD v178[3];
  _QWORD *v179;
  std::string __p;
  __int128 v181;
  _QWORD v182[6];
  char v183;
  uint64_t v184;
  std::string v185;
  __int128 v186;
  _BYTE v187[24];
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD v192[3];
  _QWORD *v193;
  uint64_t v194;

  v194 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(v2 + 88);
  if (!*(_QWORD *)(v2 + 88))
  {
    v14 = *(_QWORD *)(v2 + 136);
    if (v14)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 48))(v14, &__p);
    }
    return;
  }
  v4 = a1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (__int128 *)(v2 + 64);
  std::mutex::lock((std::mutex *)(v5 + 80));
  if (!sub_239A7A694((_QWORD *)(v5 + 8), v2 + 64))
  {
    if ((unint64_t)(*(_QWORD *)(v5 + 32) + 1) <= *(_QWORD *)(v5 + 48))
    {
      v36 = operator new(0x28uLL);
      v37 = v36 + 2;
      *v36 = 0;
      v36[1] = 0;
      if (*(char *)(v2 + 87) < 0)
      {
        sub_23941A7F8(v37, *(void **)(v2 + 64), *(_QWORD *)(v2 + 72));
      }
      else
      {
        v38 = *v6;
        v36[4] = *(_QWORD *)(v2 + 80);
        *(_OWORD *)v37 = v38;
      }
      *v36 = v5 + 56;
      v39 = *(_QWORD **)(v5 + 64);
      v36[1] = v39;
      *v39 = v36;
      v40 = *(_QWORD *)(v5 + 72) + 1;
      *(_QWORD *)(v5 + 64) = v36;
      *(_QWORD *)(v5 + 72) = v40;
      sub_239A7A890(v5 + 8, v2 + 64, v2 + 64, v3);
      __src.__r_.__value_.__s.__data_[0] = 0;
      v174 = 0;
    }
    else if (*(_QWORD *)(v5 + 72))
    {
      v15 = v5 + 56;
      v16 = *(_QWORD *)(v5 + 56);
      if (*(char *)(v16 + 39) < 0)
      {
        sub_23941A7F8(__dst, *(void **)(v16 + 16), *(_QWORD *)(v16 + 24));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(v16 + 16);
        v166.__r_.__value_.__r.__words[0] = *(_QWORD *)(v16 + 32);
      }
      v157 = (_QWORD *)(v5 + 8);
      v41 = sub_239A7A694((_QWORD *)(v5 + 8), (uint64_t)__dst);
      v42 = v41[5];
      v43 = (std::__shared_weak_count *)v41[6];
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(p_shared_owners);
        while (__stxr(v45 + 1, p_shared_owners));
      }
      v46 = *(char **)(v5 + 56);
      v47 = *(_QWORD *)v46;
      *(_QWORD *)(v47 + 8) = *((_QWORD *)v46 + 1);
      **((_QWORD **)v46 + 1) = v47;
      --*(_QWORD *)(v5 + 72);
      if (v46[39] < 0)
        operator delete(*((void **)v46 + 2));
      operator delete(v46);
      v48 = sub_239A7A694(v157, (uint64_t)__dst);
      if (v48)
      {
        v49 = v48;
        v50 = *(int8x8_t *)(v5 + 16);
        v51 = v48[1];
        v52 = (uint8x8_t)vcnt_s8(v50);
        v52.i16[0] = vaddlv_u8(v52);
        if (v52.u32[0] > 1uLL)
        {
          if (v51 >= *(_QWORD *)&v50)
            v51 %= *(_QWORD *)&v50;
        }
        else
        {
          v51 &= *(_QWORD *)&v50 - 1;
        }
        v53 = *(uint64_t **)(*v157 + 8 * v51);
        do
        {
          v54 = v53;
          v53 = (uint64_t *)*v53;
        }
        while (v53 != v48);
        if (v54 == (uint64_t *)(v5 + 24))
          goto LABEL_301;
        v55 = v54[1];
        if (v52.u32[0] > 1uLL)
        {
          if (v55 >= *(_QWORD *)&v50)
            v55 %= *(_QWORD *)&v50;
        }
        else
        {
          v55 &= *(_QWORD *)&v50 - 1;
        }
        if (v55 != v51)
        {
LABEL_301:
          if (!*v48)
            goto LABEL_302;
          v140 = *(_QWORD *)(*v48 + 8);
          if (v52.u32[0] > 1uLL)
          {
            if (v140 >= *(_QWORD *)&v50)
              v140 %= *(_QWORD *)&v50;
          }
          else
          {
            v140 &= *(_QWORD *)&v50 - 1;
          }
          if (v140 != v51)
LABEL_302:
            *(_QWORD *)(*v157 + 8 * v51) = 0;
        }
        v141 = *v48;
        if (*v48)
        {
          v142 = *(_QWORD *)(v141 + 8);
          if (v52.u32[0] > 1uLL)
          {
            if (v142 >= *(_QWORD *)&v50)
              v142 %= *(_QWORD *)&v50;
          }
          else
          {
            v142 &= *(_QWORD *)&v50 - 1;
          }
          v143 = v5 + 56;
          if (v142 != v51)
          {
            *(_QWORD *)(*v157 + 8 * v142) = v54;
            v141 = *v48;
          }
        }
        else
        {
          v143 = v5 + 56;
        }
        *v54 = v141;
        *v48 = 0;
        --*(_QWORD *)(v5 + 32);
        v144 = (std::__shared_weak_count *)v48[6];
        if (v144)
        {
          v145 = (unint64_t *)&v144->__shared_owners_;
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        if (*((char *)v49 + 39) < 0)
          operator delete((void *)v49[2]);
        operator delete(v49);
        v15 = v143;
      }
      v147 = operator new(0x28uLL);
      v148 = v147 + 2;
      *v147 = 0;
      v147[1] = 0;
      if (*(char *)(v2 + 87) < 0)
      {
        sub_23941A7F8(v148, *(void **)(v2 + 64), *(_QWORD *)(v2 + 72));
      }
      else
      {
        v149 = *v6;
        v147[4] = *(_QWORD *)(v2 + 80);
        *(_OWORD *)v148 = v149;
      }
      *v147 = v15;
      v150 = *(_QWORD **)(v5 + 64);
      v147[1] = v150;
      *v150 = v147;
      v151 = *(_QWORD *)(v5 + 72) + 1;
      *(_QWORD *)(v5 + 64) = v147;
      *(_QWORD *)(v5 + 72) = v151;
      sub_239A7A890((uint64_t)v157, v2 + 64, v2 + 64, v3);
      if (v166.__r_.__value_.__s.__data_[7] < 0)
      {
        sub_23941A7F8(&__p, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
        __p.__r_.__value_.__r.__words[2] = v166.__r_.__value_.__r.__words[0];
      }
      if (v43)
      {
        v152 = (unint64_t *)&v43->__shared_owners_;
        do
          v153 = __ldxr(v152);
        while (__stxr(v153 + 1, v152));
        __src = __p;
        *(_QWORD *)&v173 = v42;
        *((_QWORD *)&v173 + 1) = v43;
        v174 = 1;
        do
          v154 = __ldaxr(v152);
        while (__stlxr(v154 - 1, v152));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      else
      {
        __src = __p;
        v173 = (unint64_t)v42;
        v174 = 1;
      }
      if (v166.__r_.__value_.__s.__data_[7] < 0)
        operator delete(__dst[0]);
    }
    else
    {
      if (*(char *)(v2 + 87) < 0)
      {
        sub_23941A7F8(&__p, *(void **)(v2 + 64), *(_QWORD *)(v2 + 72));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v6;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 80);
      }
      v135 = *(_QWORD *)(v2 + 88);
      v136 = *(_QWORD *)(v2 + 96);
      *(_QWORD *)&v181 = v135;
      *((_QWORD *)&v181 + 1) = v136;
      if (v136)
      {
        v137 = (unint64_t *)(v136 + 8);
        do
          v138 = __ldxr(v137);
        while (__stxr(v138 + 1, v137));
        v139 = v181;
      }
      else
      {
        v139 = v135;
      }
      __src = __p;
      v173 = v139;
      v174 = 1;
    }
    goto LABEL_136;
  }
  v7 = *(char *)(v2 + 87);
  if (v7 >= 0)
    v8 = (uint64_t *)(v2 + 64);
  else
    v8 = *(uint64_t **)(v2 + 64);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v2 + 87);
  else
    v9 = *(_QWORD *)(v2 + 72);
  v10 = sub_239428940((uint64_t)&__p, v8, v9);
  v11 = v10;
  v12 = *(_QWORD *)(v5 + 16);
  v156 = (uint64_t *)(v5 + 8);
  if (!v12)
    goto LABEL_86;
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v1 = v10;
    if (v10 >= v12)
      v1 = v10 % v12;
  }
  else
  {
    v1 = (v12 - 1) & v10;
  }
  v17 = *(_QWORD **)(*(_QWORD *)(v5 + 8) + 8 * v1);
  if (!v17 || (v18 = (_QWORD *)*v17) == 0)
  {
LABEL_86:
    v56 = operator new(0x38uLL);
    v18 = v56;
    *v56 = 0;
    v56[1] = v11;
    if (*(char *)(v2 + 87) < 0)
    {
      sub_23941A7F8((_BYTE *)v56 + 16, *(void **)(v2 + 64), *(_QWORD *)(v2 + 72));
    }
    else
    {
      v57 = *v6;
      v56[4] = *(_QWORD *)(v2 + 80);
      *((_OWORD *)v56 + 1) = v57;
    }
    v18[5] = 0;
    v18[6] = 0;
    v58 = (float)(unint64_t)(*(_QWORD *)(v5 + 32) + 1);
    v59 = *(float *)(v5 + 40);
    if (!v12 || (float)(v59 * (float)v12) < v58)
    {
      v60 = 1;
      if (v12 >= 3)
        v60 = (v12 & (v12 - 1)) != 0;
      v61 = v60 | (2 * v12);
      v62 = vcvtps_u32_f32(v58 / v59);
      if (v61 <= v62)
        prime = v62;
      else
        prime = v61;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v64 = *(int8x8_t *)(v5 + 16);
      if (prime > *(_QWORD *)&v64)
        goto LABEL_101;
      if (prime < *(_QWORD *)&v64)
      {
        v65 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 32) / *(float *)(v5 + 40));
        if (*(_QWORD *)&v64 < 3uLL || (v66 = (uint8x8_t)vcnt_s8(v64), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
        {
          v65 = std::__next_prime(v65);
        }
        else
        {
          v67 = 1 << -(char)__clz(v65 - 1);
          if (v65 >= 2)
            v65 = v67;
        }
        if (prime <= v65)
          prime = v65;
        if (prime < *(_QWORD *)&v64)
LABEL_101:
          sub_239A501C8((uint64_t)v156, prime);
      }
      v12 = *(_QWORD *)(v5 + 16);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v11 >= v12)
          v1 = v11 % v12;
        else
          v1 = v11;
      }
      else
      {
        v1 = (v12 - 1) & v11;
      }
    }
    v68 = *v156;
    v69 = *(_QWORD **)(*v156 + 8 * v1);
    if (v69)
    {
      *v18 = *v69;
    }
    else
    {
      *v18 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = v18;
      *(_QWORD *)(v68 + 8 * v1) = v5 + 24;
      if (!*v18)
      {
LABEL_126:
        v22 = v4;
        ++*(_QWORD *)(v5 + 32);
LABEL_127:
        v30 = *(_QWORD *)(v2 + 88);
        v29 = *(_QWORD *)(v2 + 96);
        if (v29)
          goto LABEL_128;
        goto LABEL_130;
      }
      v70 = *(_QWORD *)(*v18 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v70 >= v12)
          v70 %= v12;
      }
      else
      {
        v70 &= v12 - 1;
      }
      v69 = (_QWORD *)(*v156 + 8 * v70);
    }
    *v69 = v18;
    goto LABEL_126;
  }
  v19 = *(_BYTE *)(v2 + 87);
  if (v19 >= 0)
    v20 = *(unsigned __int8 *)(v2 + 87);
  else
    v20 = *(_QWORD *)(v2 + 72);
  if (v19 >= 0)
    v21 = (unsigned __int8 *)(v2 + 64);
  else
    v21 = *(unsigned __int8 **)(v2 + 64);
  if (v13.u32[0] < 2uLL)
  {
    v22 = v4;
    while (1)
    {
      v31 = v18[1];
      if (v31 == v11)
      {
        v32 = *((unsigned __int8 *)v18 + 39);
        if ((v32 & 0x80u) == 0)
          v33 = *((unsigned __int8 *)v18 + 39);
        else
          v33 = v18[3];
        if (v33 == v20)
        {
          if ((v32 & 0x80) != 0)
          {
            v155 = v20;
            v35 = memcmp((const void *)v18[2], v21, v18[3]);
            v20 = v155;
            if (!v35)
              goto LABEL_127;
          }
          else
          {
            if (!*((_BYTE *)v18 + 39))
              goto LABEL_127;
            v34 = 0;
            while (*((unsigned __int8 *)v18 + v34 + 16) == v21[v34])
            {
              if (v32 == ++v34)
                goto LABEL_127;
            }
          }
        }
      }
      else if ((v31 & (v12 - 1)) != v1)
      {
        goto LABEL_86;
      }
      v18 = (_QWORD *)*v18;
      if (!v18)
        goto LABEL_86;
    }
  }
  while (1)
  {
    v23 = v18[1];
    if (v23 != v11)
    {
      if (v23 >= v12)
        v23 %= v12;
      if (v23 != v1)
        goto LABEL_86;
      goto LABEL_32;
    }
    v24 = *((unsigned __int8 *)v18 + 39);
    if ((v24 & 0x80u) == 0)
      v25 = *((unsigned __int8 *)v18 + 39);
    else
      v25 = v18[3];
    if (v25 != v20)
      goto LABEL_32;
    if ((v24 & 0x80) != 0)
      break;
    if (!*((_BYTE *)v18 + 39))
      goto LABEL_47;
    v26 = 0;
    while (*((unsigned __int8 *)v18 + v26 + 16) == v21[v26])
    {
      if (v24 == ++v26)
        goto LABEL_47;
    }
LABEL_32:
    v18 = (_QWORD *)*v18;
    if (!v18)
      goto LABEL_86;
  }
  v27 = v20;
  v28 = memcmp((const void *)v18[2], v21, v18[3]);
  v20 = v27;
  if (v28)
    goto LABEL_32;
LABEL_47:
  v22 = v4;
  v30 = *(_QWORD *)(v2 + 88);
  v29 = *(_QWORD *)(v2 + 96);
  if (!v29)
    goto LABEL_130;
LABEL_128:
  v71 = (unint64_t *)(v29 + 8);
  do
    v72 = __ldxr(v71);
  while (__stxr(v72 + 1, v71));
LABEL_130:
  v73 = (std::__shared_weak_count *)v18[6];
  v18[5] = v30;
  v18[6] = v29;
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  __src.__r_.__value_.__s.__data_[0] = 0;
  v174 = 0;
  v4 = v22;
LABEL_136:
  std::mutex::unlock((std::mutex *)(v5 + 80));
  v76 = *(_QWORD *)(v4 + 8);
  if (*(_BYTE *)(v76 + 104))
  {
    if (*(char *)(v76 + 87) < 0)
    {
      sub_23941A7F8(v170, *(void **)(v76 + 64), *(_QWORD *)(v76 + 72));
    }
    else
    {
      *(_OWORD *)v170 = *(_OWORD *)(v76 + 64);
      v171 = *(_QWORD *)(v76 + 80);
    }
    if (sub_2397A1B98((pthread_mutex_t *)(v5 + 344)))
    {
      sub_2397A16B4((pthread_mutex_t *)(v5 + 344));
      sub_239A444D4((uint64_t)"unknown file", 495, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v77 = sub_239514158((_QWORD *)(v5 + 304), (uint64_t)v170);
    if (v77)
    {
      sub_239A78378((uint64_t)&__p, (_QWORD *)(v5 + 304), v77);
      v78 = (void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        if (__p.__r_.__value_.__s.__data_[16] && *(char *)(__p.__r_.__value_.__r.__words[0] + 39) < 0)
          operator delete(*(void **)(__p.__r_.__value_.__r.__words[0] + 16));
        operator delete(v78);
      }
    }
    if (SHIBYTE(v171) < 0)
      operator delete(v170[0]);
  }
  v79 = v4;
  v80 = v174;
  if (!v174)
  {
    v81 = *(_QWORD *)(v79 + 8);
    goto LABEL_166;
  }
  v81 = *(_QWORD *)(v79 + 8);
  if (!*(_QWORD *)(v5 + 200))
    goto LABEL_166;
  v82 = *(unsigned __int8 *)(v81 + 87);
  if ((v82 & 0x80u) == 0)
    v83 = *(unsigned __int8 *)(v81 + 87);
  else
    v83 = *(_QWORD *)(v81 + 72);
  v84 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  v85 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
  size = __src.__r_.__value_.__l.__size_;
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v84 = __src.__r_.__value_.__l.__size_;
  if (v83 != v84)
    goto LABEL_172;
  v87 = (const void **)(v81 + 64);
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_src = &__src;
  else
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  if ((v82 & 0x80) != 0)
  {
    if (memcmp(*v87, p_src, *(_QWORD *)(v81 + 72)))
      goto LABEL_172;
LABEL_171:
    if (!*(_BYTE *)(v81 + 104))
      goto LABEL_172;
LABEL_166:
    v89 = *(_QWORD *)(v81 + 136);
    if (v89)
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v89 + 48))(v89, &__p);
    }
    if (v80)
      goto LABEL_277;
    return;
  }
  if (!*(_BYTE *)(v81 + 87))
    goto LABEL_171;
  while (*(unsigned __int8 *)v87 == p_src->__r_.__value_.__s.__data_[0])
  {
    v87 = (const void **)((char *)v87 + 1);
    p_src = (std::string *)((char *)p_src + 1);
    if (!--v82)
      goto LABEL_171;
  }
LABEL_172:
  v90 = *(unint64_t **)(v79 + 16);
  __dst[0] = (void *)v81;
  __dst[1] = v90;
  if (v90)
  {
    v91 = v90 + 1;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  v166.__r_.__value_.__s.__data_[0] = 0;
  v168 = 0;
  if (v85 < 0)
    sub_23941A7F8(&v166, __src.__r_.__value_.__l.__data_, size);
  else
    v166 = __src;
  v167 = v173;
  if (*((_QWORD *)&v173 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  v168 = 1;
  v169 = v5;
  if (v85 < 0)
    sub_23941A7F8(&v164, __src.__r_.__value_.__l.__data_, size);
  else
    v164 = __src;
  v159 = *(_OWORD *)__dst;
  if (__dst[1])
  {
    v95 = (unint64_t *)((char *)__dst[1] + 8);
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  v160.__r_.__value_.__s.__data_[0] = 0;
  v162 = 0;
  v97 = v168;
  if (v168)
  {
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      sub_23941A7F8(&v160, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
    else
      v160 = v166;
    v161 = v167;
    if (*((_QWORD *)&v167 + 1))
    {
      v98 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    v162 = 1;
  }
  v100 = v169;
  v163 = v169;
  v193 = 0;
  v101 = (char *)operator new(0x50uLL);
  *(_QWORD *)v101 = off_250AF5108;
  *(_OWORD *)(v101 + 8) = v159;
  v159 = 0uLL;
  v101[24] = 0;
  v101[64] = 0;
  if (v97)
  {
    *((std::string *)v101 + 1) = v160;
    memset(&v160, 0, sizeof(v160));
    *((_OWORD *)v101 + 3) = v161;
    v161 = 0uLL;
    v101[64] = 1;
  }
  *((_QWORD *)v101 + 9) = v100;
  v193 = v101;
  v102 = sub_239A79EAC(v5, (uint64_t)&v164, v192);
  v103 = v193;
  if (v193 == v192)
  {
    v104 = 4;
    v103 = v192;
LABEL_201:
    (*(void (**)(void))(*v103 + 8 * v104))();
  }
  else if (v193)
  {
    v104 = 5;
    goto LABEL_201;
  }
  if (v162)
  {
    v105 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v106 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v160.__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)&v159 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v159 + 1) + 16))(*((_QWORD *)&v159 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v159 + 1));
    }
  }
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v164.__r_.__value_.__l.__data_);
    if (v102)
      goto LABEL_263;
  }
  else if (v102)
  {
    goto LABEL_263;
  }
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    sub_23941A7F8(&v176, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  else
    v176 = __src;
  v177 = v173;
  if (*((_QWORD *)&v173 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
  }
  v112 = v178;
  v113 = *(_QWORD *)(v79 + 8);
  v114 = *(_QWORD *)(v113 + 136);
  if (v114)
  {
    if (v114 != v113 + 112)
    {
      v114 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v114 + 16))(v114);
      goto LABEL_228;
    }
    v179 = v178;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v114 + 24))(v114, v178);
  }
  else
  {
LABEL_228:
    v179 = (_QWORD *)v114;
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 2;
  *(_QWORD *)&v181 = 0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  v184 = 0;
  memset(v182, 0, sizeof(v182));
  v183 = 0;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    sub_23941A7F8(&v185, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    v185 = v176;
  v186 = v177;
  if (*((_QWORD *)&v177 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  v117 = (uint64_t)v179;
  if (v179)
  {
    if (v179 != v178)
    {
      v117 = (*(uint64_t (**)(void))(*v179 + 16))();
      goto LABEL_239;
    }
    v188 = v187;
    (*(void (**)(_QWORD *, _BYTE *))(v178[0] + 24))(v178, v187);
  }
  else
  {
LABEL_239:
    v188 = (_BYTE *)v117;
  }
  v189 = 0;
  v190 = 0;
  v191 = 0;
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    sub_23941A7F8(&__str, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_);
  else
    __str = v176;
  std::string::operator=((std::string *)&__p.__r_.__value_.__r.__words[1], &__str);
  std::string::operator=((std::string *)&v182[1], &__str);
  std::string::operator=(&v185, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v118 = operator new(0x150uLL);
  v118[1] = 0;
  v118[2] = 0;
  *v118 = &off_250AF77A0;
  *(_QWORD *)&v158 = sub_239A6F410((uint64_t)(v118 + 3), (uint64_t)&__p);
  *((_QWORD *)&v158 + 1) = v118;
  sub_239A6F660((uint64_t)&__p);
  if (v179 == v178)
  {
    v119 = 4;
LABEL_250:
    (*(void (**)(_QWORD *))(*v112 + 8 * v119))(v112);
  }
  else if (v179)
  {
    v119 = 5;
    v112 = v179;
    goto LABEL_250;
  }
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
  if (*((_QWORD *)&v177 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v176.__r_.__value_.__l.__data_);
  sub_239A6F858(*(unsigned int **)(v5 + 288), &v158);
  v123 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
  if (*((_QWORD *)&v158 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
LABEL_263:
  if (v168)
  {
    v126 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
    if (*((_QWORD *)&v167 + 1))
    {
      v127 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);
  }
  v129 = (std::__shared_weak_count *)__dst[1];
  if (__dst[1])
  {
    v130 = (unint64_t *)((char *)__dst[1] + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  if (v174)
  {
LABEL_277:
    v132 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
    if (!*((_QWORD *)&v173 + 1))
      goto LABEL_281;
    v133 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
LABEL_282:
        operator delete(__src.__r_.__value_.__l.__data_);
    }
    else
    {
LABEL_281:
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_282;
    }
  }
}

void sub_239A797DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12)
{
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

void sub_239A79E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,std::__shared_weak_count *a53,char a54)
{
  unint64_t *p_shared_owners;
  unint64_t v56;

  if (a44 < 0)
    operator delete(__p);
  if (a54)
  {
    if (a53)
    {
      p_shared_owners = (unint64_t *)&a53->__shared_owners_;
      do
        v56 = __ldaxr(p_shared_owners);
      while (__stlxr(v56 - 1, p_shared_owners));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))a53->__on_zero_shared)(a53);
        std::__shared_weak_count::__release_weak(a53);
      }
    }
    if (a51 < 0)
      operator delete(a46);
  }
  _Unwind_Resume(a1);
}

BOOL sub_239A79EAC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  pthread_mutex_t *v6;
  uint64_t *v7;

  v6 = (pthread_mutex_t *)(a1 + 344);
  if (sub_2397A1B98((pthread_mutex_t *)(a1 + 344)))
  {
    sub_2397A16B4(v6);
    sub_239A444D4((uint64_t)"unknown file", 531, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v7 = sub_239514158((_QWORD *)(a1 + 304), a2);
  if (!v7)
  {
    sub_239513CF4(a1 + 304, a2, a2);
    sub_239A7798C(*(_QWORD *)(a1 + 272), a3);
  }
  return v7 == 0;
}

uint64_t sub_239A79F5C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = off_250AF5108;
  if (!*(_BYTE *)(a1 + 64))
    goto LABEL_7;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (*(char *)(a1 + 47) < 0)
        goto LABEL_13;
LABEL_7:
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        return a1;
      goto LABEL_8;
    }
  }
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    goto LABEL_7;
LABEL_13:
  operator delete(*(void **)(a1 + 24));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
LABEL_8:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_239A7A024(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = off_250AF5108;
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (v4)
    {
LABEL_6:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
        goto LABEL_7;
LABEL_13:
      operator delete(*(void **)(a1 + 24));
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        goto LABEL_14;
      goto LABEL_8;
    }
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (*(char *)(a1 + 47) < 0)
      goto LABEL_13;
  }
LABEL_7:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
LABEL_8:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_14:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A7A0FC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x50uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = off_250AF5108;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_239A7A5AC((_BYTE *)v2 + 24, (__int128 *)(a1 + 24));
  v3[9] = *(_QWORD *)(a1 + 72);
  return v3;
}

void sub_239A7A170(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_239A7A1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *result;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_250AF5108;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_239A7A5AC((_BYTE *)(a2 + 24), (__int128 *)(a1 + 24));
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  return result;
}

void sub_239A7A21C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239A7A260(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (!*(_BYTE *)(a1 + 64))
    goto LABEL_7;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (*(char *)(a1 + 47) < 0)
        goto LABEL_14;
LABEL_7:
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        return;
      goto LABEL_8;
    }
  }
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    goto LABEL_7;
LABEL_14:
  operator delete(*(void **)(a1 + 24));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return;
LABEL_8:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_239A7A320(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (!__p[64])
    goto LABEL_7;
  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (__p[47] < 0)
        goto LABEL_13;
LABEL_7:
      v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
      if (!v5)
        goto LABEL_14;
      goto LABEL_8;
    }
  }
  if ((__p[47] & 0x80000000) == 0)
    goto LABEL_7;
LABEL_13:
  operator delete(*((void **)__p + 3));
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v5)
    goto LABEL_14;
LABEL_8:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_14:
  operator delete(__p);
}

void sub_239A7A3DC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = (_OWORD *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_23941A7F8(__p, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)__p = *v6;
    v16 = *(_QWORD *)(a1 + 40);
  }
  v7 = *(_QWORD *)(v2 + 200);
  if (!v7)
    sub_2394172E0();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v7 + 48))(v7, &v17, __p);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  v9 = v18;
  if (v18)
  {
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136);
  if (v12)
  {
    LOBYTE(v13[0]) = v8;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 48))(v12, v13);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    sub_23941A7F8(v13, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)v13 = *v6;
    v14 = *(_QWORD *)(a1 + 40);
  }
  sub_239A782CC(v2, (uint64_t)v13);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

void sub_239A7A534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_239A7A5AC(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *__dst = 0;
  __dst[40] = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    v5 = *((_QWORD *)a2 + 4);
    *((_QWORD *)__dst + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)__dst + 4) = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    __dst[40] = 1;
  }
  return __dst;
}

void sub_239A7A638(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(_BYTE *)(v1 + 40))
  {
    v3 = *(std::__shared_weak_count **)(v1 + 32);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_239A7A694(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_239428940((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v10 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = v2[23];
        if (v13 >= 0)
          v14 = v2[23];
        else
          v14 = *((_QWORD *)v2 + 1);
        if (v13 < 0)
          v2 = *(_BYTE **)v2;
        if (v9.u32[0] < 2uLL)
        {
          v15 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v21 = v12[1];
            if (v21 == v8)
            {
              v22 = *((unsigned __int8 *)v12 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v12 + 39);
              else
                v23 = v12[3];
              if (v23 == v14)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v2, v12[3]))
                    return v12;
                }
                else
                {
                  if (!*((_BYTE *)v12 + 39))
                    return v12;
                  v24 = 0;
                  while (*((unsigned __int8 *)v12 + v24 + 16) == v2[v24])
                  {
                    if (v22 == ++v24)
                      return v12;
                  }
                }
              }
            }
            else if ((v21 & v15) != v10)
            {
              return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v17 = v12[1];
          if (v17 == v8)
          {
            v18 = *((unsigned __int8 *)v12 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v12 + 39);
            else
              v19 = v12[3];
            if (v19 == v14)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v2, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v20 = 0;
                while (*((unsigned __int8 *)v12 + v20 + 16) == v2[v20])
                {
                  if (v18 == ++v20)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v17 >= *(_QWORD *)&v7)
              v17 %= *(_QWORD *)&v7;
            if (v17 != v10)
              return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

void sub_239A7A890(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unsigned __int8 *j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *i;
  _QWORD *v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD v46[2];
  char v47;

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = sub_239428940((uint64_t)v46, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = v16[1];
            if (v24 == v12)
            {
              v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0)
                v26 = *((unsigned __int8 *)v16 + 39);
              else
                v26 = v16[3];
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3]))
                    return;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return;
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25)
                      return;
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3]))
                  return;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return;
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20)
                    return;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v29 = operator new(0x38uLL);
  v46[0] = v29;
  v46[1] = a1 + 16;
  v47 = 0;
  *v29 = 0;
  v29[1] = v12;
  v30 = v29 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v30, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v30 = *(_OWORD *)a3;
    v29[4] = *(_QWORD *)(a3 + 16);
  }
  v31 = a4[1];
  v29[5] = *a4;
  v29[6] = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v47 = 1;
  v34 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v35 = *(float *)(a1 + 32);
  if (!v13 || (float)(v35 * (float)v13) < v34)
  {
    v36 = 1;
    if (v13 >= 3)
      v36 = (v13 & (v13 - 1)) != 0;
    v37 = v36 | (2 * v13);
    v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_69;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_69:
        sub_239A501C8(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v4 = v12 % v13;
      else
        v4 = v12;
    }
    else
    {
      v4 = (v13 - 1) & v12;
    }
  }
  v44 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v44)
  {
    *(_QWORD *)v46[0] = *v44;
    *v44 = v46[0];
  }
  else
  {
    *(_QWORD *)v46[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v46[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v46[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v46[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v45 >= v13)
          v45 %= v13;
      }
      else
      {
        v45 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v46[0];
    }
  }
  ++*(_QWORD *)(a1 + 24);
}

void sub_239A7ACB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239A7ACD4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239A7ACD4(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          if ((*(char *)(v2 + 39) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
      if (*(char *)(v2 + 39) < 0)
LABEL_8:
        operator delete(*(void **)(v2 + 16));
    }
LABEL_9:
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *sub_239A7AD6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF5030;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A7ADD0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF5030;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A7AE44(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF5030;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A7AE9C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF5030;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A7AED4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A7AF2C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_239A7AF84(_QWORD *a1)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  void *__p[2];
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 1;
  v3 = a1[1];
  v4 = a1[3];
  ++*(_QWORD *)(v4 + 208);
  std::mutex::lock((std::mutex *)(v4 + 80));
  v5 = (unsigned __int8 *)(v3 + 8);
  v6 = *(char *)(v3 + 31);
  if (v6 >= 0)
    v7 = (uint64_t *)(v3 + 8);
  else
    v7 = *(uint64_t **)(v3 + 8);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v3 + 31);
  else
    v8 = *(_QWORD *)(v3 + 16);
  v9 = sub_239428940((uint64_t)&v59, v7, v8);
  v10 = *(int8x8_t *)(v4 + 16);
  if (!*(_QWORD *)&v10)
    goto LABEL_63;
  v11 = v9;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v13 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v13 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v14 = *(uint64_t ***)(*(_QWORD *)(v4 + 8) + 8 * v13);
  if (!v14 || (v15 = *v14) == 0)
  {
LABEL_63:
    std::mutex::unlock((std::mutex *)(v4 + 80));
    v36 = *(_QWORD *)v2;
    if (!*(_QWORD *)(v4 + 168))
    {
      v41 = *(_QWORD *)(v36 + 56);
      if (!v41)
        return;
      v59 = 0;
      v60 = 0;
      LOBYTE(__p[0]) = 1;
      (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v41 + 48))(v41, &v59, __p);
      v28 = v60;
      if (!v60)
        return;
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
LABEL_92:
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      return;
    }
    v28 = (std::__shared_weak_count *)a1[2];
    v37 = *(_QWORD *)v2;
    if (v28)
    {
      v38 = (unint64_t *)&v28->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      v37 = *(_QWORD *)v2;
    }
    if (*(char *)(v37 + 31) < 0)
    {
      sub_23941A7F8(__p, *(void **)(v37 + 8), *(_QWORD *)(v37 + 16));
    }
    else
    {
      v40 = *(_OWORD *)(v37 + 8);
      v58 = *(_QWORD *)(v37 + 24);
      *(_OWORD *)__p = v40;
    }
    if (v28)
    {
      v44 = (unint64_t *)&v28->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v61 = 0;
    v46 = (uint64_t *)operator new(0x20uLL);
    *v46 = (uint64_t)&off_250AF5078;
    v46[1] = v36;
    v46[2] = (uint64_t)v28;
    v46[3] = v4;
    v61 = v46;
    v49 = sub_239A79EAC(v4, (uint64_t)__p, &v59);
    v50 = v61;
    if (v61 == &v59)
    {
      v51 = 4;
      v50 = &v59;
    }
    else
    {
      if (!v61)
        goto LABEL_84;
      v51 = 5;
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 8 * v51))(v50, v47, v48);
LABEL_84:
    if (SHIBYTE(v58) < 0)
    {
      operator delete(__p[0]);
      if (v49)
      {
LABEL_86:
        if (!v28)
          return;
LABEL_90:
        v52 = (unint64_t *)&v28->__shared_owners_;
        do
          v43 = __ldaxr(v52);
        while (__stlxr(v43 - 1, v52));
        goto LABEL_92;
      }
    }
    else if (v49)
    {
      goto LABEL_86;
    }
    sub_239A6F858(*(unsigned int **)(v4 + 288), v2);
    --*(_QWORD *)(v4 + 208);
    if (!v28)
      return;
    goto LABEL_90;
  }
  v16 = *(_BYTE *)(v3 + 31);
  v17 = *(unsigned __int8 **)(v3 + 8);
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(v3 + 31);
  else
    v18 = *(_QWORD *)(v3 + 16);
  if (v16 < 0)
    v5 = v17;
  if (v12.u32[0] < 2uLL)
  {
    v19 = *(_QWORD *)&v10 - 1;
    while (1)
    {
      v24 = v15[1];
      if (v11 == v24)
      {
        v25 = *((unsigned __int8 *)v15 + 39);
        if ((v25 & 0x80u) == 0)
          v26 = *((unsigned __int8 *)v15 + 39);
        else
          v26 = v15[3];
        if (v26 == v18)
        {
          if ((v25 & 0x80) != 0)
          {
            if (!memcmp((const void *)v15[2], v5, v15[3]))
              goto LABEL_54;
          }
          else
          {
            if (!*((_BYTE *)v15 + 39))
              goto LABEL_54;
            v27 = 0;
            while (*((unsigned __int8 *)v15 + v27 + 16) == v5[v27])
            {
              if (v25 == ++v27)
                goto LABEL_53;
            }
          }
        }
      }
      else if ((v24 & v19) != v13)
      {
        goto LABEL_63;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_63;
    }
  }
  while (1)
  {
    v20 = v15[1];
    if (v11 != v20)
    {
      if (v20 >= *(_QWORD *)&v10)
        v20 %= *(_QWORD *)&v10;
      if (v20 != v13)
        goto LABEL_63;
      goto LABEL_22;
    }
    v21 = *((unsigned __int8 *)v15 + 39);
    if ((v21 & 0x80u) == 0)
      v22 = *((unsigned __int8 *)v15 + 39);
    else
      v22 = v15[3];
    if (v22 != v18)
      goto LABEL_22;
    if ((v21 & 0x80) != 0)
      break;
    if (!*((_BYTE *)v15 + 39))
      goto LABEL_54;
    v23 = 0;
    while (*((unsigned __int8 *)v15 + v23 + 16) == v5[v23])
    {
      if (v21 == ++v23)
      {
LABEL_53:
        if (!v15)
          goto LABEL_63;
        goto LABEL_54;
      }
    }
LABEL_22:
    v15 = (uint64_t *)*v15;
    if (!v15)
      goto LABEL_63;
  }
  if (memcmp((const void *)v15[2], v5, v15[3]))
    goto LABEL_22;
LABEL_54:
  v29 = v15[5];
  v28 = (std::__shared_weak_count *)v15[6];
  if (v28)
  {
    v30 = (unint64_t *)&v28->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  std::mutex::unlock((std::mutex *)(v4 + 80));
  ++*(_QWORD *)(v4 + 216);
  v32 = *(_QWORD *)v2;
  v33 = *(_QWORD *)(*(_QWORD *)v2 + 56);
  if (v33)
  {
    v59 = v29;
    v60 = v28;
    if (v28)
    {
      v34 = (unint64_t *)&v28->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      v33 = *(_QWORD *)(v32 + 56);
      LOBYTE(__p[0]) = 1;
      if (!v33)
        sub_2394172E0();
    }
    else
    {
      LOBYTE(__p[0]) = 1;
    }
    (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v33 + 48))(v33, &v59, __p);
    v53 = v60;
    if (v60)
    {
      v54 = (unint64_t *)&v60->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  if (v28)
  {
    v56 = (unint64_t *)&v28->__shared_owners_;
    do
      v43 = __ldaxr(v56);
    while (__stlxr(v43 - 1, v56));
    goto LABEL_92;
  }
}

void sub_239A7B444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  if (v18)
  {
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239A7B59C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF5078;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A7B600(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF5078;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A7B674(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF5078;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A7B6CC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF5078;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A7B704(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A7B75C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_239A7B7B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  void *__p[2];
  uint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  void *__dst[2];
  uint64_t v41;
  void *v42;
  std::__shared_weak_count *v43;
  char v44;
  _BYTE v45[24];
  _BYTE *v46;
  void *v47[2];
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(char *)(v3 + 31) < 0)
  {
    sub_23941A7F8(__p, *(void **)(v3 + 8), *(_QWORD *)(v3 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(v3 + 8);
    v37 = *(_QWORD *)(v3 + 24);
    *(_OWORD *)__p = v4;
  }
  v5 = *(_QWORD *)(v2 + 168);
  if (!v5)
    sub_2394172E0();
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v5 + 48))(&v38, v5, __p);
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  v6 = *(_QWORD *)(a1 + 8);
  if (v38)
  {
    v7 = *(_QWORD *)(v6 + 56);
    if (v7)
    {
      v47[0] = v38;
      v47[1] = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v7 = *(_QWORD *)(v6 + 56);
        LOBYTE(__dst[0]) = 1;
        if (!v7)
          sub_2394172E0();
      }
      else
      {
        LOBYTE(__dst[0]) = 1;
      }
      (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v7 + 48))(v7, v47, __dst);
      v16 = (std::__shared_weak_count *)v47[1];
      if (v47[1])
      {
        v17 = (unint64_t *)((char *)v47[1] + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    v19 = *(_QWORD *)(a1 + 8);
    if (*(char *)(v19 + 31) < 0)
    {
      sub_23941A7F8(__dst, *(void **)(v19 + 8), *(_QWORD *)(v19 + 16));
    }
    else
    {
      v20 = *(_OWORD *)(v19 + 8);
      v41 = *(_QWORD *)(v19 + 24);
      *(_OWORD *)__dst = v20;
    }
    v42 = v38;
    v43 = v39;
    if (v39)
    {
      v21 = (unint64_t *)&v39->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v44 = 1;
    v23 = v45;
    v46 = 0;
    sub_239A6F17C((uint64_t)v47, (__int128 *)__dst);
    v24 = operator new(0x150uLL);
    v24[1] = 0;
    v24[2] = 0;
    *v24 = &off_250AF77A0;
    *(_QWORD *)&v35 = sub_239A6F410((uint64_t)(v24 + 3), (uint64_t)v47);
    *((_QWORD *)&v35 + 1) = v24;
    sub_239A6F660((uint64_t)v47);
    if (v46 == v45)
    {
      v25 = 4;
    }
    else
    {
      if (!v46)
      {
LABEL_39:
        v26 = v43;
        if (!v43)
          goto LABEL_43;
        v27 = (unint64_t *)&v43->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          if ((SHIBYTE(v41) & 0x80000000) == 0)
            goto LABEL_45;
        }
        else
        {
LABEL_43:
          if ((SHIBYTE(v41) & 0x80000000) == 0)
          {
LABEL_45:
            sub_239A6F858(*(unsigned int **)(v2 + 288), &v35);
            v29 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              v30 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            goto LABEL_55;
          }
        }
        operator delete(__dst[0]);
        goto LABEL_45;
      }
      v25 = 5;
      v23 = v46;
    }
    (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
    goto LABEL_39;
  }
  v10 = *(_QWORD *)(v6 + 56);
  if (v10)
  {
    v47[0] = 0;
    v47[1] = 0;
    LOBYTE(__dst[0]) = 1;
    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v10 + 48))(v10, v47, __dst);
    v11 = (std::__shared_weak_count *)v47[1];
    if (v47[1])
    {
      v12 = (unint64_t *)((char *)v47[1] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 8);
  if (*(char *)(v14 + 31) < 0)
  {
    sub_23941A7F8(v47, *(void **)(v14 + 8), *(_QWORD *)(v14 + 16));
  }
  else
  {
    v15 = *(_OWORD *)(v14 + 8);
    v48 = *(_QWORD *)(v14 + 24);
    *(_OWORD *)v47 = v15;
  }
  sub_239A782CC(v2, (uint64_t)v47);
  if (SHIBYTE(v48) < 0)
    operator delete(v47[0]);
LABEL_55:
  v32 = v39;
  if (v39)
  {
    v33 = (unint64_t *)&v39->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_239A7BB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  unint64_t *p_shared_owners;
  unint64_t v40;

  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A7BCF8(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 + 8);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 += 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v12 = (uint64_t)v6[1];
          ++v6;
          v7 = v12;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v14 = v13 >> 3;
  if (v14 == 1)
  {
    v15 = 128;
    goto LABEL_20;
  }
  if (v14 == 2)
  {
    v15 = 256;
LABEL_20:
    *(_QWORD *)(a1 + 32) = v15;
  }
  if (v2 != v3)
  {
    do
    {
      v16 = *v2++;
      operator delete(v16);
    }
    while (v2 != v3);
    v18 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    if (v17 != v18)
      *(_QWORD *)(a1 + 16) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239A7BE7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF4FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A7BE8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF4FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A7BEBC(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 200);
  sub_2397A1694((pthread_mutex_t *)(a1 + 200));
  v3 = *(unsigned __int8 *)(a1 + 80);
  sub_2397A16B4(v2);
  if (!v3)
    sub_239A7BF40(a1 + 24);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 104));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 152));
  sub_2397A163C(v2);
  return sub_239A7BCF8(a1 + 32);
}

uint64_t sub_239A7BF40(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v4;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    while (1)
    {
      sub_2397A16B4(v2);
      if (pthread_cond_signal((pthread_cond_t *)(a1 + 80)))
        break;
      sub_2397A1694(v2);
      if (*(uint64_t *)(a1 + 64) <= 0)
        goto LABEL_4;
    }
    v4 = 261;
LABEL_15:
    sub_239A444D4((uint64_t)"unknown file", v4, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
LABEL_4:
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    while (1)
    {
      sub_2397A16B4(v2);
      if (pthread_cond_signal((pthread_cond_t *)(a1 + 128)))
        break;
      sub_2397A1694(v2);
      if (*(uint64_t *)(a1 + 72) <= 0)
        return sub_2397A16B4(v2);
    }
    v4 = 287;
    goto LABEL_15;
  }
  return sub_2397A16B4(v2);
}

void sub_239A7C0C0(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

void sub_239A7C0E0(uint64_t a1)
{
  sub_239A7C104(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A7C104(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t i;
  void **v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void **v37;
  void **v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250AF4F90;
  if (*(_QWORD *)(a1 + 272))
  {
    v3 = *(_QWORD *)(a1 + 240);
    v2 = *(std::__shared_weak_count **)(a1 + 248);
    if (!v2)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (v6)
    {
LABEL_7:
      if (v3)
        goto LABEL_10;
      goto LABEL_8;
    }
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!v3)
LABEL_8:
      sub_2397A3758(*(_QWORD *)(a1 + 272));
  }
LABEL_10:
  v7 = *(_QWORD *)(a1 + 288);
  if (v7)
    sub_239A7BF40(v7);
  while (1)
  {
    v42[0] = &off_250AF5300;
    v43 = v42;
    sub_2397A1694((pthread_mutex_t *)(a1 + 344));
    v8 = *(_QWORD *)(a1 + 328);
    if (!v8)
    {
      if (!v43)
        sub_2394172E0();
      (*(void (**)(_QWORD *))(*v43 + 48))(v43);
    }
    sub_2397A16B4((pthread_mutex_t *)(a1 + 344));
    v9 = v43;
    if (v43 == v42)
    {
      v9 = v42;
      v10 = 4;
    }
    else
    {
      if (!v43)
        goto LABEL_20;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_20:
    if (!v8)
      break;
    sub_2397A186C(1);
  }
  v11 = *(_QWORD *)(a1 + 256);
  if (v11)
  {
    sub_2397A195C(v11);
    v12 = *(std::__shared_weak_count **)(a1 + 264);
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  if (*(_QWORD *)(a1 + 288))
  {
    v15 = *(std::__shared_weak_count **)(a1 + 296);
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  if (*(_QWORD *)(a1 + 328))
  {
    v18 = *(void ***)(a1 + 320);
    if (v18)
    {
      do
      {
        v38 = (void **)*v18;
        if (*((char *)v18 + 39) < 0)
          operator delete(v18[2]);
        operator delete(v18);
        v18 = v38;
      }
      while (v38);
    }
    *(_QWORD *)(a1 + 320) = 0;
    v19 = *(_QWORD *)(a1 + 312);
    if (v19)
    {
      for (i = 0; i != v19; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  sub_2397A163C((pthread_mutex_t *)(a1 + 344));
  v21 = *(void ***)(a1 + 320);
  if (v21)
  {
    do
    {
      v37 = (void **)*v21;
      if (*((char *)v21 + 39) < 0)
        operator delete(v21[2]);
      operator delete(v21);
      v21 = v37;
    }
    while (v37);
  }
  v22 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v22)
    operator delete(v22);
  v23 = *(std::__shared_weak_count **)(a1 + 296);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(std::__shared_weak_count **)(a1 + 280);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(std::__shared_weak_count **)(a1 + 264);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *(std::__shared_weak_count **)(a1 + 248);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = *(_QWORD **)(a1 + 200);
  if (v35 == (_QWORD *)(a1 + 176))
  {
    v36 = 4;
    v35 = (_QWORD *)(a1 + 176);
LABEL_73:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  else if (v35)
  {
    v36 = 5;
    goto LABEL_73;
  }
  v39 = *(_QWORD **)(a1 + 168);
  if (v39 == (_QWORD *)(a1 + 144))
  {
    v40 = 4;
    v39 = (_QWORD *)(a1 + 144);
LABEL_78:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  else if (v39)
  {
    v40 = 5;
    goto LABEL_78;
  }
  return sub_239A74E00(a1);
}

void sub_239A7C4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

void sub_239A7C560()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A7C574()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250AF5300;
  return result;
}

void sub_239A7C598(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250AF5300;
}

void sub_239A7C5B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF4EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A7C5C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF4EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A7C5F4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_239A7C604(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF2E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A7C614(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF2E00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239A7C644(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = a1[7];
  if (v2)
  {
    v3 = a1[8];
    v4 = (void *)a1[7];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[7];
    }
    a1[8] = v2;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)a1[6];
  if (!v5)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)a1[4];
    if (!v8)
      return;
  }
  else
  {
LABEL_13:
    v8 = (std::__shared_weak_count *)a1[4];
    if (!v8)
      return;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

_QWORD *sub_239A7C738(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF4F48;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A7C794(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF4F48;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A7C800(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_250AF4F48;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_239A7C874(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A7C888(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_250AF4F48;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *sub_239A7C8FC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A7C930(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

BOOL sub_239A7C980(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::ios_base *v18;
  uint64_t v19;
  void **v20;
  void *v21;
  void *v23;
  char v24;
  char v25;
  const void *v26[3];
  void *v27[3];
  void *__p;
  char v29;
  void *v30[2];
  unsigned __int8 v31;
  char v32;
  uint64_t v33;
  uint64_t v34[8];
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38[19];
  uint64_t v39;
  _BYTE v40[408];
  _QWORD v41[22];

  v41[19] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_2394172E0();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(&v23, v3, a3);
  if (!v25)
    return 0;
  v5 = *a2;
  v6 = MEMORY[0x24BEDB840];
  v7 = MEMORY[0x24BEDB840] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB7E8];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  v41[0] = MEMORY[0x24BEDB840] + 64;
  v39 = v9;
  *(_QWORD *)&v40[*(_QWORD *)(v9 - 24) - 8] = v10;
  v11 = (std::ios_base *)&v40[*(_QWORD *)(v39 - 24) - 8];
  std::ios_base::init(v11, v40);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v39 = v6 + 24;
  v41[0] = v7;
  MEMORY[0x23B83DC80](v40);
  std::ofstream::open();
  if ((v40[*(_QWORD *)(v39 - 24) + 24] & 5) != 0)
  {
    v12 = 0;
  }
  else
  {
    HIBYTE(v26[2]) = 18;
    strcpy((char *)v26, "CorePhotogrammetry");
    sub_2395AC84C(v26, v27);
    v13 = MEMORY[0x24BEDB870];
    v14 = MEMORY[0x24BEDB870] + 64;
    v15 = (uint64_t *)MEMORY[0x24BEDB800];
    v16 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
    v17 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
    v38[0] = MEMORY[0x24BEDB870] + 64;
    v33 = v16;
    *(uint64_t *)((char *)&v34[-1] + *(_QWORD *)(v16 - 24)) = v17;
    v18 = (std::ios_base *)((char *)&v34[-1] + *(_QWORD *)(v33 - 24));
    std::ios_base::init(v18, v34);
    v18[1].__vftable = 0;
    v18[1].__fmtflags_ = -1;
    v33 = v13 + 24;
    v38[0] = v14;
    std::streambuf::basic_streambuf();
    v19 = MEMORY[0x24BEDB848];
    v34[0] = MEMORY[0x24BEDB848] + 16;
    v35 = 0u;
    v36 = 0u;
    v37 = 16;
    if ((sub_239590654(v5, &v33) & 1) != 0)
    {
      std::stringbuf::str();
      sub_2395ABE70((const void **)&__p, (uint64_t)v27, (uint64_t)v30);
      if (v29 < 0)
        operator delete(__p);
      v12 = v32 != 0;
      if (v32)
      {
        v20 = (v31 & 0x80u) == 0 ? v30 : (void **)v30[0];
        v21 = (v31 & 0x80u) == 0 ? (void *)v31 : v30[1];
        sub_239458500(&v39, (uint64_t)v20, (uint64_t)v21);
        if (v32)
        {
          if ((char)v31 < 0)
            operator delete(v30[0]);
        }
      }
    }
    else
    {
      v12 = 0;
    }
    v33 = *v15;
    *(uint64_t *)((char *)&v34[-1] + *(_QWORD *)(v33 - 24)) = v15[3];
    v34[0] = v19 + 16;
    if (SBYTE7(v36) < 0)
      operator delete((void *)v35);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x23B83E250](v38);
    if (v27[0])
    {
      v27[1] = v27[0];
      operator delete(v27[0]);
    }
    if (SHIBYTE(v26[2]) < 0)
      operator delete((void *)v26[0]);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)&v40[*(_QWORD *)(v39 - 24) - 8], *(_DWORD *)&v40[*(_QWORD *)(v39 - 24) + 24] | 4);
  }
  v39 = *v8;
  *(_QWORD *)&v40[*(_QWORD *)(v39 - 24) - 8] = v8[3];
  MEMORY[0x23B83DC8C](v40);
  std::ostream::~ostream();
  MEMORY[0x23B83E250](v41);
  if (v25 && v24 < 0)
    operator delete(v23);
  return v12;
}

void sub_239A7CD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;

  if (a34 && a33 < 0)
    operator delete(__p);
  a35 = *v76;
  *(uint64_t *)((char *)&a35 + *(_QWORD *)(a35 - 24)) = v76[3];
  a36 = v74 + 16;
  if (a49 < 0)
    operator delete(a44);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B83E250](v73);
  if (a22)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  a71 = *v75;
  *(uint64_t *)((char *)&a71 + *(_QWORD *)(a71 - 24)) = v75[3];
  MEMORY[0x23B83DC8C](v72);
  std::ostream::~ostream();
  MEMORY[0x23B83E250](v71);
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(a9);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_239A7CE54(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF4F00;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A7CEB0(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF4F00;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A7CF1C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_250AF4F00;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_239A7CF90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A7CFA4(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_250AF4F00;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *sub_239A7D018(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A7D04C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_239A7D09C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  char v13;
  std::string::size_type size;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  char v20;
  char v21;
  const void *v22[3];
  void *v23[3];
  uint64_t v24[2];
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  void *v28[2];
  unsigned __int8 v29;
  char v30;
  std::string v31;
  _QWORD v32[2];
  _BYTE v33[408];
  _QWORD v34[21];

  v34[19] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_2394172E0();
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v3 + 48))(&v19);
  if (!v21)
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF2C18;
  v4[1].__vftable = 0;
  v6 = (uint64_t)&v4[1];
  v4[1].__shared_owners_ = 0;
  v4[1].__shared_weak_owners_ = 0;
  v7 = MEMORY[0x24BEDB838];
  v8 = MEMORY[0x24BEDB838] + 64;
  v9 = (_QWORD *)MEMORY[0x24BEDB7E0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  v34[0] = MEMORY[0x24BEDB838] + 64;
  v32[0] = v10;
  *(_QWORD *)((char *)v32 + *(_QWORD *)(v10 - 24)) = v11;
  v32[1] = 0;
  v12 = (std::ios_base *)((char *)v32 + *(_QWORD *)(v32[0] - 24));
  std::ios_base::init(v12, v33);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v32[0] = v7 + 24;
  v34[0] = v8;
  MEMORY[0x23B83DC80](v33);
  std::ifstream::open();
  if ((v33[*(_QWORD *)(v32[0] - 24) + 16] & 5) == 0)
  {
    HIBYTE(v22[2]) = 18;
    strcpy((char *)v22, "CorePhotogrammetry");
    sub_2395AC84C(v22, v23);
    sub_239A7D600(&v31, *(_QWORD **)&v33[*(_QWORD *)(v32[0] - 24) + 24]);
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__r_.__value_.__l.__size_;
    if (size)
    {
      sub_2395AC2E8((const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)v23, (uint64_t)v28);
      if (v30)
      {
        sub_2394988CC((uint64_t)v24);
        if ((v29 & 0x80u) == 0)
          v15 = v28;
        else
          v15 = (void **)v28[0];
        if ((v29 & 0x80u) == 0)
          v16 = v29;
        else
          v16 = (uint64_t)v28[1];
        sub_239458500(v25, (uint64_t)v15, v16);
        v13 = sub_239594E58(v24, v6, -1.0);
        v24[0] = *MEMORY[0x24BEDB7F0];
        v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(uint64_t *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v25[0] = v17;
        v25[1] = MEMORY[0x24BEDB848] + 16;
        if (v26 < 0)
          operator delete((void *)v25[9]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](&v27);
        if (v30 && (char)v29 < 0)
          operator delete(v28[0]);
      }
      else
      {
        v13 = 0;
      }
      if ((*((_BYTE *)&v31.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_26;
    }
    else
    {
      v13 = 0;
      if ((*((_BYTE *)&v31.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_26:
        if (v23[0])
        {
          v23[1] = v23[0];
          operator delete(v23[0]);
        }
        if (SHIBYTE(v22[2]) < 0)
          operator delete((void *)v22[0]);
        if (!std::filebuf::close())
          std::ios_base::clear((std::ios_base *)((char *)v32 + *(_QWORD *)(v32[0] - 24)), *(_DWORD *)&v33[*(_QWORD *)(v32[0] - 24) + 16] | 4);
        goto LABEL_32;
      }
    }
    operator delete(v31.__r_.__value_.__l.__data_);
    goto LABEL_26;
  }
  v13 = 0;
LABEL_32:
  v32[0] = *v9;
  *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = v9[3];
  MEMORY[0x23B83DC8C](v33);
  std::istream::~istream();
  MEMORY[0x23B83E250](v34);
  if ((v13 & 1) != 0)
  {
    *a2 = v6;
    a2[1] = (uint64_t)v4;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v21)
  {
    if (v20 < 0)
      operator delete(v19);
  }
}

void sub_239A7D450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  char a66;
  void *a67;
  char a72;
  uint64_t a73;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t *v77;
  void *v79;
  unint64_t v80;

  if (a66 && a65 < 0)
    operator delete(__p);
  if (a72 < 0)
  {
    operator delete(a67);
    v79 = a22;
    if (!a22)
    {
LABEL_6:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else
  {
    v79 = a22;
    if (!a22)
      goto LABEL_6;
  }
  operator delete(v79);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_11:
    a73 = *v77;
    *(uint64_t *)((char *)&a73 + *(_QWORD *)(a73 - 24)) = v77[3];
    MEMORY[0x23B83DC8C](v75);
    std::istream::~istream();
    MEMORY[0x23B83E250](v74);
    do
      v80 = __ldaxr(v76);
    while (__stlxr(v80 - 1, v76));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
    if (a15)
    {
      if (a14 < 0)
      {
        operator delete(a9);
        _Unwind_Resume(a1);
      }
    }
    _Unwind_Resume(a1);
  }
LABEL_10:
  operator delete(a16);
  goto LABEL_11;
}

void sub_239A7D600(std::string *this, _QWORD *a2)
{
  std::string::value_type *v4;
  std::string::value_type v5;
  uint64_t v6;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (a2)
  {
    v4 = (std::string::value_type *)a2[3];
    if (v4 != (std::string::value_type *)a2[4])
      goto LABEL_5;
    if ((*(unsigned int (**)(_QWORD *))(*a2 + 72))(a2) == -1)
      return;
    v4 = (std::string::value_type *)a2[3];
    if (v4 == (std::string::value_type *)a2[4])
      v5 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
LABEL_5:
      v5 = *v4;
    std::string::push_back(this, v5);
    v6 = a2[3];
    if (v6 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v6 + 1;
  }
}

void sub_239A7D6B4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_239A7D6D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_239A7D6E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AF2DB8;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_239A7D720(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AF2DB8;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A7D76C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = off_250AF2DB8;
  v2[1] = v3;
  v4 = v2 + 2;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 16);
    v2[4] = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_239A7D7D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_239A7D7E4(char *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  __int128 v4;

  v2 = *((_QWORD *)result + 1);
  *a2 = off_250AF2DB8;
  a2[1] = v2;
  v3 = a2 + 2;
  if (result[39] < 0)
    return (char *)sub_23941A7F8(v3, *((void **)result + 2), *((_QWORD *)result + 3));
  v4 = *((_OWORD *)result + 1);
  a2[4] = *((_QWORD *)result + 4);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_239A7D824(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void sub_239A7D838(void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

unint64_t sub_239A7D868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t result;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;

  v3 = (_BYTE *)a2;
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  result = sub_239428940((uint64_t)&v28, (uint64_t *)a2, v8);
  v10 = (int8x8_t)v6[1];
  if (!*(_QWORD *)&v10)
    goto LABEL_52;
  v11 = result;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = result;
    if (result >= *(_QWORD *)&v10)
      v13 = result % *(_QWORD *)&v10;
  }
  else
  {
    v13 = (*(_QWORD *)&v10 - 1) & result;
  }
  v14 = *(uint64_t ***)(*v6 + 8 * v13);
  if (!v14 || (v15 = *v14) == 0)
  {
LABEL_52:
    v27 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_53;
  }
  v16 = v3[23];
  if (v16 >= 0)
    v17 = v3[23];
  else
    v17 = *((_QWORD *)v3 + 1);
  if (v16 < 0)
    v3 = *(_BYTE **)v3;
  if (v12.u32[0] < 2uLL)
  {
    v18 = *(_QWORD *)&v10 - 1;
    while (1)
    {
      v23 = v15[1];
      if (v23 == v11)
      {
        v24 = *((unsigned __int8 *)v15 + 39);
        if ((v24 & 0x80u) == 0)
          v25 = *((unsigned __int8 *)v15 + 39);
        else
          v25 = v15[3];
        if (v25 == v17)
        {
          if ((v24 & 0x80) != 0)
          {
            result = memcmp((const void *)v15[2], v3, v15[3]);
            if (!(_DWORD)result)
              goto LABEL_51;
          }
          else
          {
            if (!*((_BYTE *)v15 + 39))
              goto LABEL_51;
            v26 = 0;
            while (*((unsigned __int8 *)v15 + v26 + 16) == v3[v26])
            {
              if (v24 == ++v26)
                goto LABEL_50;
            }
          }
        }
      }
      else if ((v23 & v18) != v13)
      {
        goto LABEL_52;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_52;
    }
  }
  while (1)
  {
    v19 = v15[1];
    if (v19 != v11)
    {
      if (v19 >= *(_QWORD *)&v10)
        v19 %= *(_QWORD *)&v10;
      if (v19 != v13)
        goto LABEL_52;
      goto LABEL_19;
    }
    v20 = *((unsigned __int8 *)v15 + 39);
    if ((v20 & 0x80u) == 0)
      v21 = *((unsigned __int8 *)v15 + 39);
    else
      v21 = v15[3];
    if (v21 != v17)
      goto LABEL_19;
    if ((v20 & 0x80) != 0)
      break;
    if (!*((_BYTE *)v15 + 39))
      goto LABEL_51;
    v22 = 0;
    while (*((unsigned __int8 *)v15 + v22 + 16) == v3[v22])
    {
      if (v20 == ++v22)
      {
LABEL_50:
        if (!v15)
          goto LABEL_52;
        goto LABEL_51;
      }
    }
LABEL_19:
    v15 = (uint64_t *)*v15;
    if (!v15)
      goto LABEL_52;
  }
  result = memcmp((const void *)v15[2], v3, v15[3]);
  if ((_DWORD)result)
    goto LABEL_19;
LABEL_51:
  result = (unint64_t)sub_2396F295C(v15 + 5, a1 + 16, (uint64_t)&v28);
  *(_OWORD *)a3 = v28;
  *(_QWORD *)(a3 + 16) = v29;
  v27 = 1;
LABEL_53:
  *(_BYTE *)(a3 + 24) = v27;
  return result;
}

_QWORD *sub_239A7DA9C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250AF7EE8;
  v9 = 0;
  v11 = 0;
  sub_239A7DBE8((uint64_t)(a1 + 3), a2, v8, v10);
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_10;
  }
  if (v9)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_239A7DB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  std::__shared_weak_count *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  std::__shared_weak_count::~__shared_weak_count(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_239A7DBE8(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  pthread_rwlock_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  char *v34;
  _DWORD *v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  _QWORD v62[3];
  _QWORD *v63;
  uint64_t v64;
  _BYTE v65[24];
  _BYTE *v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = a1 + 56;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_OWORD *)(a1 + 72) = xmmword_239EC69E0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &off_250AF7FB0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 240) = a2[2];
  v8 = a2[3];
  *(_QWORD *)(a1 + 248) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (uint64_t *)(a1 + 256);
  *(_OWORD *)(a1 + 304) = 0uLL;
  *(_OWORD *)(a1 + 320) = 0uLL;
  v60 = (uint64_t *)(a1 + 256);
  v61 = (uint64_t *)(a1 + 272);
  v12 = (_QWORD *)(a1 + 288);
  v13 = (_QWORD *)(a1 + 304);
  *(_OWORD *)(a1 + 272) = 0uLL;
  *(_OWORD *)(a1 + 288) = 0uLL;
  *(_OWORD *)(a1 + 256) = 0uLL;
  *(_DWORD *)(a1 + 336) = 1065353216;
  sub_2397A1618((pthread_mutex_t *)(a1 + 344));
  if (!*v12)
  {
    v34 = (char *)operator new(0x108uLL);
    *((_DWORD *)v34 + 6) = 0x7FFFFFFF;
    v35 = v34 + 24;
    *(_OWORD *)(v34 + 8) = 0u;
    *((_OWORD *)v34 + 2) = 0u;
    *(_QWORD *)v34 = &off_250AF7FF0;
    *((_OWORD *)v34 + 3) = 0u;
    *((_OWORD *)v34 + 4) = 0u;
    v34[80] = 0;
    *(_OWORD *)(v34 + 88) = 0u;
    sub_2397A1618((pthread_mutex_t *)(v34 + 200));
    v36 = *((_DWORD *)v34 + 6);
    if (v36 >= 0x7FFFFFFF)
    {
      v36 = 0x7FFFFFFF;
      *v35 = 0x7FFFFFFF;
    }
    else if (v36 < 2)
    {
      v36 = 1;
    }
    *((_DWORD *)v34 + 6) = v36;
    pthread_cond_init((pthread_cond_t *)(v34 + 104), 0);
    pthread_cond_init((pthread_cond_t *)(v34 + 152), 0);
    v51 = *(std::__shared_weak_count **)(a1 + 296);
    *(_QWORD *)(a1 + 288) = v35;
    *(_QWORD *)(a1 + 296) = v34;
    v11 = v60;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  if (!*v11)
  {
    v14 = operator new(0x120uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_250AE9800;
    v15 = sub_2397A1740((uint64_t)(v14 + 3));
    v16 = *(std::__shared_weak_count **)(a1 + 264);
    *(_QWORD *)(a1 + 256) = v15;
    *(_QWORD *)(a1 + 264) = v14;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *v11;
    v20 = (pthread_rwlock_t *)(*v11 + 24);
    j__pthread_rwlock_wrlock(v20);
    *(_BYTE *)(v19 + 16) = 1;
    j__pthread_rwlock_unlock(v20);
    sub_2397A195C(v19);
    v21 = (_QWORD *)operator new();
    *v21 = &off_250AF8028;
    v21[1] = a1;
    *(_QWORD *)(v19 + 224) = v21;
    sub_2397A1878((pthread_t *)v19);
  }
  if (!*v61)
  {
    v22 = *(_QWORD *)(a1 + 240);
    v23 = *(_QWORD *)(a1 + 248);
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = *(std::__shared_weak_count **)(a1 + 280);
    *(_QWORD *)(a1 + 272) = v22;
    *(_QWORD *)(a1 + 280) = v23;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      v22 = *v61;
    }
    if (!v22)
    {
      v54 = *(_QWORD *)(a1 + 232);
      v55 = operator new(0x178uLL);
      v55[1] = 0;
      v55[2] = 0;
      *v55 = &off_250ADB8B0;
      v56 = sub_2397A2A50((uint64_t)(v55 + 3), v54, 0);
      v57 = *(std::__shared_weak_count **)(a1 + 280);
      *(_QWORD *)(a1 + 272) = v56;
      *(_QWORD *)(a1 + 280) = v55;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
    }
  }
  sub_239467C88(a1);
  if (*(_QWORD *)(a1 + 328))
  {
    v29 = *(_QWORD **)(a1 + 320);
    if (v29)
    {
      do
      {
        v30 = (_QWORD *)*v29;
        operator delete(v29);
        v29 = v30;
      }
      while (v30);
    }
    *(_QWORD *)(a1 + 320) = 0;
    v31 = *(_QWORD *)(a1 + 312);
    if (v31)
    {
      for (i = 0; i != v31; ++i)
        *(_QWORD *)(*v13 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  v33 = a3[3];
  if (!v33)
    goto LABEL_33;
  if ((_QWORD *)v33 != a3)
  {
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
LABEL_33:
    v63 = (_QWORD *)v33;
    goto LABEL_38;
  }
  v63 = v62;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v62);
LABEL_38:
  v64 = a1;
  v66 = 0;
  v37 = operator new(0x30uLL);
  *v37 = &off_250AF8310;
  v38 = (uint64_t)v63;
  if (!v63)
  {
LABEL_41:
    v37[4] = v38;
    goto LABEL_43;
  }
  if (v63 != v62)
  {
    v38 = (*(uint64_t (**)(void))(*v63 + 16))();
    goto LABEL_41;
  }
  v37[4] = v37 + 1;
  (*(void (**)(_QWORD *))(v62[0] + 24))(v62);
LABEL_43:
  v37[5] = v64;
  v66 = v37;
  sub_2397A1694((pthread_mutex_t *)(a1 + 344));
  if (!*(_QWORD *)(a1 + 328))
  {
    if (!v66)
      sub_2394172E0();
    (*(void (**)(_BYTE *))(*(_QWORD *)v66 + 48))(v66);
  }
  sub_2397A16B4((pthread_mutex_t *)(a1 + 344));
  v39 = v66;
  if (v66 == v65)
  {
    v40 = 4;
    v39 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_51;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_51:
  v41 = v63;
  if (v63 == v62)
  {
    v42 = 4;
    v41 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_56;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_56:
  v43 = a4[3];
  if (!v43)
  {
LABEL_59:
    v63 = (_QWORD *)v43;
    goto LABEL_61;
  }
  if ((_QWORD *)v43 != a4)
  {
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
    goto LABEL_59;
  }
  v63 = v62;
  (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v62);
LABEL_61:
  v64 = a1;
  v66 = 0;
  v44 = operator new(0x30uLL);
  *v44 = &off_250AF8358;
  v45 = (uint64_t)v63;
  if (!v63)
  {
LABEL_64:
    v44[4] = v45;
    goto LABEL_66;
  }
  if (v63 != v62)
  {
    v45 = (*(uint64_t (**)(void))(*v63 + 16))();
    goto LABEL_64;
  }
  v44[4] = v44 + 1;
  (*(void (**)(_QWORD *))(v62[0] + 24))(v62);
LABEL_66:
  v44[5] = v64;
  v66 = v44;
  sub_2397A1694((pthread_mutex_t *)(a1 + 344));
  if (!*(_QWORD *)(a1 + 328))
  {
    if (!v66)
      sub_2394172E0();
    (*(void (**)(_BYTE *))(*(_QWORD *)v66 + 48))(v66);
  }
  sub_2397A16B4((pthread_mutex_t *)(a1 + 344));
  v46 = v66;
  if (v66 == v65)
  {
    v47 = 4;
    v46 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_74;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_74:
  v48 = v63;
  if (v63 == v62)
  {
    v49 = 4;
    v48 = v62;
    goto LABEL_78;
  }
  if (v63)
  {
    v49 = 5;
LABEL_78:
    (*(void (**)(void))(*v48 + 8 * v49))();
  }
  return a1;
}

void sub_239A7E270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  _QWORD **v22;
  uint64_t v23;
  pthread_mutex_t *v24;
  std::__shared_weak_count *v25;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v27);
  sub_2397A163C(v24);
  sub_239420950(v23);
  sub_239A4D7C0(a10);
  sub_239416DA0(a12);
  sub_239416DA0(a11);
  sub_239A74534(v21 + 224);
  v28 = *v22;
  if (*v22 == (_QWORD *)(v21 + 176))
  {
    v29 = 4;
    v28 = (_QWORD *)(v21 + 176);
  }
  else
  {
    if (!v28)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_6:
  v30 = *(_QWORD **)(v21 + 168);
  if (v30 == (_QWORD *)(v21 + 144))
  {
    v31 = 4;
    v30 = (_QWORD *)(v21 + 144);
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_11:
  sub_239A7E444(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_239A7E444(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_QWORD *)a1 = &off_250AF7FD0;
  sub_239467C88(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 56);
    v2 = *(uint64_t **)(a1 + 64);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 72) = 0;
    if (v2 != (uint64_t *)(a1 + 56))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 56));
    }
  }
  v6 = *(_QWORD **)(a1 + 24);
  while (v6)
  {
    v9 = v6;
    v6 = (_QWORD *)*v6;
    v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    operator delete(v9);
  }
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_239A7E538(uint64_t a1)
{
  sub_239A7E444(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A7E55C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF8358;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A7E5B8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF8358;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A7E624(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  *v2 = &off_250AF8358;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
LABEL_6:
  v2[5] = *(_QWORD *)(a1 + 40);
  return v2;
}

void sub_239A7E6A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A7E6B4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = &off_250AF8358;
  v4 = a2 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      a2[4] = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  a2[5] = *(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *sub_239A7E72C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A7E760(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *sub_239A7E7B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = a1 + 8;
    if (v1 == v3)
    {
      v10 = v9;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    }
  }
  else
  {
    v10 = 0;
  }
  v4 = v2 + 176;
  if ((_QWORD *)(v2 + 176) != v9)
  {
    v5 = v10;
    v6 = *(_QWORD *)(v2 + 200);
    if (v10 == v9)
    {
      if (v6 == v4)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v2 + 200) + 24))(*(_QWORD *)(v2 + 200), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 200) + 32))(*(_QWORD *)(v2 + 200));
        *(_QWORD *)(v2 + 200) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, uint64_t))(v11[0] + 24))(v11, v2 + 176);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v9[0] + 24))(v9, v2 + 176);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(v2 + 200);
      }
      *(_QWORD *)(v2 + 200) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v2 + 176, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 200) + 32))(*(_QWORD *)(v2 + 200));
      *(_QWORD *)(v2 + 200) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(v2 + 200);
      *(_QWORD *)(v2 + 200) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_239A7E9A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

_QWORD *sub_239A7E9B0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF8310;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A7EA0C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF8310;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A7EA78(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  *v2 = &off_250AF8310;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
LABEL_6:
  v2[5] = *(_QWORD *)(a1 + 40);
  return v2;
}

void sub_239A7EAF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A7EB08(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = &off_250AF8310;
  v4 = a2 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      a2[4] = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  a2[5] = *(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *sub_239A7EB80(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A7EBB4(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *sub_239A7EC04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 32;
  v2 = *(_QWORD *)(a1 + 32);
  v4 = (_QWORD *)(*(_QWORD *)(v3 + 8) + 144);
  if (v2)
  {
    v5 = a1 + 8;
    if (v2 == v5)
    {
      v9 = v8;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_239A7ECE0(v8, v4);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

_QWORD *sub_239A7ECE0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_239A7EE48(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_239A7EE58(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239A7EE7C(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  int *v3;
  BOOL v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int8x8_t v35;
  uint8x8_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  int8x8_t v43;
  uint8x8_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t *v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v90;
  char v91;
  __int128 v92;
  __int128 v93;
  char v94;
  _BYTE v95[24];
  _BYTE *v96;
  _BYTE v97[24];
  _BYTE *v98;
  _QWORD v99[3];
  _QWORD *v100;
  _BYTE v101[24];
  _BYTE *v102;
  _BYTE v103[24];
  _BYTE *v104;
  _BYTE v105[24];
  _BYTE *v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int **)(v1 + 288);
  if (v2)
  {
    sub_239A7FBD8((uint64_t)&v93, v2);
    v3 = (int *)v93;
    if ((_QWORD)v93)
      v4 = v94 == 0;
    else
      v4 = 1;
    if (!v4)
    {
      v8 = (_QWORD *)(v1 + 304);
      while (2)
      {
        v10 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
        *(_QWORD *)&v92 = v3;
        *((_QWORD *)&v92 + 1) = *((_QWORD *)&v93 + 1);
        if (*((_QWORD *)&v93 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = *v3;
        switch(*v3)
        {
          case 0:
            if (v10)
            {
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v15 = __ldxr(p_shared_owners);
              while (__stxr(v15 + 1, p_shared_owners));
              v16 = *((_QWORD *)v3 + 1);
              do
                v17 = __ldxr(p_shared_owners);
              while (__stxr(v17 + 1, p_shared_owners));
            }
            else
            {
              v16 = *((_QWORD *)v3 + 1);
            }
            v106 = 0;
            v50 = operator new(0x20uLL);
            *v50 = &off_250AF8050;
            v50[1] = v3;
            v50[2] = v10;
            v50[3] = v1;
            v106 = v50;
            v51 = sub_239A7FDD0(v1, v16, (uint64_t)v105);
            v52 = v106;
            if (v106 == v105)
            {
              v52 = v105;
              v53 = 4;
            }
            else
            {
              if (!v106)
                goto LABEL_82;
              v53 = 5;
            }
            (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_82:
            if ((v51 & 1) == 0)
              sub_239A7FF28(*(unsigned int **)(v1 + 288), &v92);
            if (v10)
            {
              v58 = (unint64_t *)&v10->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              goto LABEL_166;
            }
            goto LABEL_168;
          case 1:
            if (v10)
            {
              v29 = (unint64_t *)&v10->__shared_owners_;
              do
                v30 = __ldxr(v29);
              while (__stxr(v30 + 1, v29));
              v31 = *((unsigned __int8 *)v3 + 72);
              v32 = *((_QWORD *)v3 + 6);
              do
                v33 = __ldxr(v29);
              while (__stxr(v33 + 1, v29));
              if (!v31)
              {
LABEL_77:
                v104 = 0;
                v54 = operator new(0x20uLL);
                *v54 = &off_250AF8160;
                v54[1] = v3;
                v54[2] = v10;
                v54[3] = v1;
                v104 = v54;
                v55 = sub_239A7FDD0(v1, v32, (uint64_t)v103);
                v56 = v104;
                if (v104 == v103)
                {
                  v56 = v103;
                  v57 = 4;
LABEL_160:
                  (*(void (**)(void))(*v56 + 8 * v57))();
                }
                else if (v104)
                {
                  v57 = 5;
                  goto LABEL_160;
                }
                if ((v55 & 1) == 0)
                  sub_239A7FF28(*(unsigned int **)(v1 + 288), &v92);
                goto LABEL_163;
              }
            }
            else
            {
              v32 = *((_QWORD *)v3 + 6);
              if (!*((_BYTE *)v3 + 72))
                goto LABEL_77;
            }
            v102 = 0;
            v34 = operator new(0x20uLL);
            *v34 = &off_250AF8160;
            v34[1] = v3;
            v34[2] = v10;
            v34[3] = v1;
            v102 = v34;
            sub_2397A1694((pthread_mutex_t *)(v1 + 344));
            v35 = *(int8x8_t *)(v1 + 312);
            if (!*(_QWORD *)&v35)
              goto LABEL_151;
            v36 = (uint8x8_t)vcnt_s8(v35);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              v37 = v32;
              if (*(_QWORD *)&v35 <= v32)
                v37 = v32 % *(_QWORD *)&v35;
            }
            else
            {
              v37 = (*(_QWORD *)&v35 - 1) & v32;
            }
            v71 = *(_QWORD **)(*v8 + 8 * v37);
            if (!v71 || (v72 = (_QWORD *)*v71) == 0)
            {
LABEL_151:
              v76 = 0;
              goto LABEL_152;
            }
            if (v36.u32[0] < 2uLL)
            {
              v73 = *(_QWORD *)&v35 - 1;
              while (1)
              {
                v75 = v72[1];
                if (v75 == v32)
                {
                  if (v72[2] == v32)
                    goto LABEL_184;
                }
                else if ((v75 & v73) != v37)
                {
                  goto LABEL_151;
                }
                v72 = (_QWORD *)*v72;
                if (!v72)
                  goto LABEL_151;
              }
            }
            while (1)
            {
              v74 = v72[1];
              if (v74 == v32)
                break;
              if (v74 >= *(_QWORD *)&v35)
                v74 %= *(_QWORD *)&v35;
              if (v74 != v37)
                goto LABEL_151;
LABEL_141:
              v72 = (_QWORD *)*v72;
              if (!v72)
                goto LABEL_151;
            }
            if (v72[2] != v32)
              goto LABEL_141;
LABEL_184:
            if (!v102)
              sub_2394172E0();
            (*(void (**)(_BYTE *))(*(_QWORD *)v102 + 48))(v102);
            v76 = 1;
LABEL_152:
            sub_2397A16B4((pthread_mutex_t *)(v1 + 344));
            v77 = v102;
            if (v102 == v101)
            {
              v77 = v101;
              v78 = 4;
LABEL_156:
              (*(void (**)(void))(*v77 + 8 * v78))();
            }
            else if (v102)
            {
              v78 = 5;
              goto LABEL_156;
            }
            if ((v76 & 1) == 0)
            {
              sub_239A444D4((uint64_t)"unknown file", 793, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
LABEL_163:
            if (v10)
            {
              v79 = (unint64_t *)&v10->__shared_owners_;
              do
                v59 = __ldaxr(v79);
              while (__stlxr(v59 - 1, v79));
              goto LABEL_166;
            }
LABEL_168:
            sub_239A7FBD8((uint64_t)&v90, *(unsigned int **)(v1 + 288));
            v80 = v90;
            v90 = 0uLL;
            v81 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
            v93 = v80;
            if (v81)
            {
              v82 = (unint64_t *)&v81->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            v94 = v91;
            v84 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
            if (!*((_QWORD *)&v90 + 1))
              goto LABEL_177;
            v85 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
              v87 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
              if (*((_QWORD *)&v92 + 1))
              {
LABEL_178:
                v88 = (unint64_t *)&v87->__shared_owners_;
                do
                  v89 = __ldaxr(v88);
                while (__stlxr(v89 - 1, v88));
                if (!v89)
                {
                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                  std::__shared_weak_count::__release_weak(v87);
                }
              }
            }
            else
            {
LABEL_177:
              v87 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
              if (*((_QWORD *)&v92 + 1))
                goto LABEL_178;
            }
            v3 = (int *)v93;
            if ((_QWORD)v93)
              v9 = v94 == 0;
            else
              v9 = 1;
            if (v9)
              break;
            continue;
          case 2:
            if (v10)
            {
              v24 = (unint64_t *)&v10->__shared_owners_;
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
              v26 = *((_QWORD *)v3 + 14);
              do
                v27 = __ldxr(v24);
              while (__stxr(v27 + 1, v24));
            }
            else
            {
              v26 = *((_QWORD *)v3 + 14);
            }
            v100 = 0;
            v42 = operator new(0x20uLL);
            *v42 = &off_250AF81F0;
            v42[1] = v3;
            v42[2] = v10;
            v42[3] = v1;
            v100 = v42;
            *(_QWORD *)&v90 = v26;
            sub_2397A1694((pthread_mutex_t *)(v1 + 344));
            v43 = *(int8x8_t *)(v1 + 312);
            if (!*(_QWORD *)&v43)
              goto LABEL_122;
            v44 = (uint8x8_t)vcnt_s8(v43);
            v44.i16[0] = vaddlv_u8(v44);
            if (v44.u32[0] > 1uLL)
            {
              v45 = v26;
              if (*(_QWORD *)&v43 <= v26)
                v45 = v26 % *(_QWORD *)&v43;
            }
            else
            {
              v45 = (*(_QWORD *)&v43 - 1) & v26;
            }
            v62 = *(_QWORD **)(*v8 + 8 * v45);
            if (!v62)
              goto LABEL_122;
            v63 = (_QWORD *)*v62;
            if (!v63)
              goto LABEL_122;
            if (v44.u32[0] < 2uLL)
            {
              v64 = *(_QWORD *)&v43 - 1;
              while (1)
              {
                v66 = v63[1];
                if (v66 == v26)
                {
                  if (v63[2] == v26)
                    goto LABEL_121;
                }
                else if ((v66 & v64) != v45)
                {
                  goto LABEL_122;
                }
                v63 = (_QWORD *)*v63;
                if (!v63)
                  goto LABEL_122;
              }
            }
            while (1)
            {
              v65 = v63[1];
              if (v65 == v26)
              {
                if (v63[2] == v26)
                {
LABEL_121:
                  v67 = 0;
                  goto LABEL_123;
                }
              }
              else
              {
                if (v65 >= *(_QWORD *)&v43)
                  v65 %= *(_QWORD *)&v43;
                if (v65 != v45)
                {
LABEL_122:
                  sub_239465800(v1 + 304, (unint64_t *)&v90, &v90);
                  sub_239A7798C(*(_QWORD *)(v1 + 272), v99);
                  v67 = 1;
LABEL_123:
                  sub_2397A16B4((pthread_mutex_t *)(v1 + 344));
                  v68 = v100;
                  if (v100 == v99)
                  {
                    v68 = v99;
                    v69 = 4;
LABEL_127:
                    (*(void (**)(void))(*v68 + 8 * v69))();
                  }
                  else if (v100)
                  {
                    v69 = 5;
                    goto LABEL_127;
                  }
                  if ((v67 & 1) == 0)
                    sub_239A7FF28(*(unsigned int **)(v1 + 288), &v92);
                  if (v10)
                  {
                    v70 = (unint64_t *)&v10->__shared_owners_;
                    do
                      v59 = __ldaxr(v70);
                    while (__stlxr(v59 - 1, v70));
                    goto LABEL_166;
                  }
                  goto LABEL_168;
                }
              }
              v63 = (_QWORD *)*v63;
              if (!v63)
                goto LABEL_122;
            }
          case 3:
            v90 = *(_OWORD *)(v1 + 208);
            v28 = *((_QWORD *)v3 + 24);
            if (v28)
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v28 + 48))(v28, &v90);
            goto LABEL_168;
          default:
            if (v13 != 99)
            {
              if (v13 != 100)
                goto LABEL_168;
              if (v10)
              {
                v18 = (unint64_t *)&v10->__shared_owners_;
                do
                  v19 = __ldxr(v18);
                while (__stxr(v19 + 1, v18));
                do
                  v20 = __ldxr(v18);
                while (__stxr(v20 + 1, v18));
              }
              v96 = 0;
              v46 = operator new(0x20uLL);
              *v46 = &off_250AF8280;
              v46[1] = v3;
              v46[2] = v10;
              v46[3] = v1;
              v96 = v46;
              sub_2397A1694((pthread_mutex_t *)(v1 + 344));
              v47 = *(_QWORD *)(v1 + 328);
              if (!v47)
              {
                if (!v96)
                  sub_2394172E0();
                (*(void (**)(_BYTE *))(*(_QWORD *)v96 + 48))(v96);
              }
              sub_2397A16B4((pthread_mutex_t *)(v1 + 344));
              v48 = v96;
              if (v96 == v95)
              {
                v48 = v95;
                v49 = 4;
              }
              else
              {
                if (!v96)
                {
LABEL_98:
                  if (v47)
                    sub_239A7FF28(*(unsigned int **)(v1 + 288), &v92);
                  if (!v10)
                    goto LABEL_168;
                  v61 = (unint64_t *)&v10->__shared_owners_;
                  do
                    v59 = __ldaxr(v61);
                  while (__stlxr(v59 - 1, v61));
                  goto LABEL_166;
                }
                v49 = 5;
              }
              (*(void (**)(void))(*v48 + 8 * v49))();
              goto LABEL_98;
            }
            if (v10)
            {
              v21 = (unint64_t *)&v10->__shared_owners_;
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
              do
                v23 = __ldxr(v21);
              while (__stxr(v23 + 1, v21));
            }
            v98 = 0;
            v38 = operator new(0x20uLL);
            *v38 = &off_250AF8238;
            v38[1] = v3;
            v38[2] = v10;
            v38[3] = v1;
            v98 = v38;
            sub_2397A1694((pthread_mutex_t *)(v1 + 344));
            v39 = *(_QWORD *)(v1 + 328);
            if (!v39)
            {
              if (!v98)
                sub_2394172E0();
              (*(void (**)(_BYTE *))(*(_QWORD *)v98 + 48))(v98);
            }
            sub_2397A16B4((pthread_mutex_t *)(v1 + 344));
            v40 = v98;
            if (v98 == v97)
            {
              v40 = v97;
              v41 = 4;
            }
            else
            {
              if (!v98)
              {
LABEL_90:
                if (v39)
                  sub_239A7FF28(*(unsigned int **)(v1 + 288), &v92);
                if (!v10)
                  goto LABEL_168;
                v60 = (unint64_t *)&v10->__shared_owners_;
                do
                  v59 = __ldaxr(v60);
                while (__stlxr(v59 - 1, v60));
LABEL_166:
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                  std::__shared_weak_count::__release_weak(v10);
                }
                goto LABEL_168;
              }
              v41 = 5;
            }
            (*(void (**)(void))(*v40 + 8 * v41))();
            goto LABEL_90;
        }
        break;
      }
    }
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
    if (*((_QWORD *)&v93 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_239A7F78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  std::__shared_weak_count *v34;
  pthread_mutex_t *v35;
  char *v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;

  sub_2397A16B4(v35);
  v37 = a34;
  if (a34 == &a31)
  {
    v38 = 4;
    v37 = &a31;
  }
  else
  {
    if (!a34)
    {
LABEL_6:
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (a14)
      {
        v41 = (unint64_t *)&a14->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
          std::__shared_weak_count::__release_weak(a14);
        }
      }
      if (a16)
      {
        v43 = (unint64_t *)&a16->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
          std::__shared_weak_count::__release_weak(a16);
        }
      }
      _Unwind_Resume(a1);
    }
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
  goto LABEL_6;
}

uint64_t sub_239A7FBD8(uint64_t a1, unsigned int *a2)
{
  pthread_mutex_t *v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v17;

  v4 = (pthread_mutex_t *)(a2 + 44);
  sub_2397A1694((pthread_mutex_t *)(a2 + 44));
  if (*((_QWORD *)a2 + 6))
  {
LABEL_4:
    v5 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + ((*((_QWORD *)a2 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *((_QWORD *)a2 + 5));
    v17 = v5;
    if (*((_QWORD *)&v5 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v8 = *(std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)a2 + 2)
                                                    + ((*((_QWORD *)a2 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *((_QWORD *)a2 + 5)
                                        + 8);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    v11 = *((_QWORD *)a2 + 6) - 1;
    v12 = *((_QWORD *)a2 + 5) + 1;
    *((_QWORD *)a2 + 5) = v12;
    *((_QWORD *)a2 + 6) = v11;
    if (v12 >= 0x200)
    {
      operator delete(**((void ***)a2 + 2));
      *((_QWORD *)a2 + 2) += 8;
      v11 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a2 + 5) -= 256;
    }
    if (v11 < *a2)
      pthread_cond_signal((pthread_cond_t *)(a2 + 20));
    *(_OWORD *)a1 = v17;
    if (*((_QWORD *)&v17 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      *(_BYTE *)(a1 + 16) = 1;
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    else
    {
      *(_BYTE *)(a1 + 16) = 1;
    }
  }
  else
  {
    while (!*((_BYTE *)a2 + 56))
    {
      ++*((_QWORD *)a2 + 9);
      pthread_cond_wait((pthread_cond_t *)(a2 + 32), v4);
      --*((_QWORD *)a2 + 9);
      if (*((_QWORD *)a2 + 6))
        goto LABEL_4;
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
  return sub_2397A16B4(v4);
}

void sub_239A7FDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;

  sub_239A4D7C0((uint64_t)&a9);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_239A7FDD0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (pthread_mutex_t *)(a1 + 344);
  sub_2397A1694((pthread_mutex_t *)(a1 + 344));
  v7 = *(int8x8_t *)(a1 + 312);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = a2;
      if (*(_QWORD *)&v7 <= a2)
        v9 = a2 % *(_QWORD *)&v7;
    }
    else
    {
      v9 = (*(_QWORD *)&v7 - 1) & a2;
    }
    v10 = *(_QWORD **)(*(_QWORD *)(a1 + 304) + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == a2)
            {
              if (v11[2] == a2)
                goto LABEL_21;
            }
            else if ((v14 & v12) != v9)
            {
              goto LABEL_22;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == a2)
          {
            if (v11[2] == a2)
            {
LABEL_21:
              v15 = 0;
              goto LABEL_24;
            }
          }
          else
          {
            if (v13 >= *(_QWORD *)&v7)
              v13 %= *(_QWORD *)&v7;
            if (v13 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_22:
  v16 = *(_QWORD *)(a3 + 24);
  if (!v16)
    sub_2394172E0();
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
  v15 = 1;
LABEL_24:
  sub_2397A16B4(v6);
  return v15;
}

void sub_239A7FF10(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A7FF28(unsigned int *a1, _OWORD *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  void *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  _OWORD *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  size_t v103;
  char *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  int64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 *v114;
  _OWORD *v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  void *v119;
  _OWORD *v120;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  v5 = *((_QWORD *)a1 + 6);
  if (v5 >= *a1)
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      v5 = *((_QWORD *)a1 + 6);
      if (v5 < *a1)
        goto LABEL_4;
    }
    goto LABEL_5;
  }
LABEL_4:
  if (*((_BYTE *)a1 + 56))
  {
LABEL_5:
    v6 = 0;
    goto LABEL_100;
  }
  v7 = (char *)*((_QWORD *)a1 + 3);
  v8 = (char *)*((_QWORD *)a1 + 2);
  v9 = v7 - v8;
  if (v7 == v8)
    v10 = 0;
  else
    v10 = 32 * (v7 - v8) - 1;
  v11 = *((_QWORD *)a1 + 5);
  v12 = v11 + v5;
  if (v10 == v11 + v5)
  {
    if (v11 >= 0x100)
    {
      *((_QWORD *)a1 + 5) = v11 - 256;
      v13 = v8 + 8;
      v14 = *(_QWORD *)v8;
      *((_QWORD *)a1 + 2) = v8 + 8;
      if (*((char **)a1 + 4) != v7)
      {
LABEL_92:
        *(_QWORD *)v7 = v14;
        goto LABEL_93;
      }
      v15 = (char *)*((_QWORD *)a1 + 1);
      if (v13 > v15)
      {
        v16 = (v13 - v15) >> 3;
        if (v16 >= -1)
          v17 = v16 + 1;
        else
          v17 = v16 + 2;
        v18 = v17 >> 1;
        v19 = -v18;
        v20 = &v13[-8 * v18];
        v21 = v7 - v13;
        if (v7 == v13)
        {
          v22 = v7;
        }
        else
        {
          memmove(&v13[-8 * v18], v13, v7 - v13);
          v22 = (char *)*((_QWORD *)a1 + 2);
        }
        v7 = &v20[v21];
        *((_QWORD *)a1 + 2) = &v22[8 * v19];
        *((_QWORD *)a1 + 3) = &v20[v21];
        goto LABEL_92;
      }
      if (v7 == v15)
        v33 = 1;
      else
        v33 = (v7 - v15) >> 2;
      if (!(v33 >> 61))
      {
        v34 = (char *)operator new(8 * v33);
        v35 = &v34[8 * (v33 >> 2)];
        v37 = v7 - v13;
        v36 = v7 == v13;
        v7 = v35;
        if (v36)
          goto LABEL_90;
        v7 = &v35[v37 & 0xFFFFFFFFFFFFFFF8];
        v38 = v37 - 8;
        if (v38 >= 0x38)
        {
          v81 = &v34[8 * (v33 >> 2)];
          v39 = v81;
          if ((unint64_t)(v81 - v13) >= 0x20)
          {
            v82 = (v38 >> 3) + 1;
            v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
            v39 = &v35[v83];
            v84 = (__int128 *)(v8 + 24);
            v85 = v81 + 16;
            v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v87 = *v84;
              *(v85 - 1) = *(v84 - 1);
              *v85 = v87;
              v84 += 2;
              v85 += 2;
              v86 -= 4;
            }
            while (v86);
            if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_90:
              *((_QWORD *)a1 + 1) = v34;
              *((_QWORD *)a1 + 2) = v35;
              *((_QWORD *)a1 + 3) = v7;
              *((_QWORD *)a1 + 4) = &v34[8 * v33];
              if (v15)
              {
                operator delete(v15);
                v7 = (char *)*((_QWORD *)a1 + 3);
              }
              goto LABEL_92;
            }
            v13 += v83;
          }
        }
        else
        {
          v39 = &v34[8 * (v33 >> 2)];
        }
        do
        {
          v88 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v39 = v88;
          v39 += 8;
        }
        while (v39 != v7);
        goto LABEL_90;
      }
LABEL_130:
      sub_239418A80();
    }
    v23 = v9 >> 3;
    v24 = (char *)*((_QWORD *)a1 + 4);
    v25 = (char *)*((_QWORD *)a1 + 1);
    v26 = v24 - v25;
    if (v9 >> 3 < (unint64_t)((v24 - v25) >> 3))
    {
      if (v24 != v7)
      {
        *(_QWORD *)v7 = operator new(0x1000uLL);
LABEL_93:
        *((_QWORD *)a1 + 3) += 8;
LABEL_94:
        v8 = (char *)*((_QWORD *)a1 + 2);
        v5 = *((_QWORD *)a1 + 6);
        v12 = v5 + *((_QWORD *)a1 + 5);
        goto LABEL_95;
      }
      v40 = operator new(0x1000uLL);
      v41 = v8;
      if (v25 != v8)
      {
LABEL_105:
        *((_QWORD *)v41 - 1) = v40;
        v94 = (char *)*((_QWORD *)a1 + 2);
        v95 = (char *)*((_QWORD *)a1 + 3);
        *((_QWORD *)a1 + 2) = v94 - 8;
        v96 = *((_QWORD *)v94 - 1);
        *((_QWORD *)a1 + 2) = v94;
        if (v95 != *((char **)a1 + 4))
        {
LABEL_106:
          *(_QWORD *)v95 = v96;
          goto LABEL_93;
        }
        v97 = (char *)*((_QWORD *)a1 + 1);
        if (v94 > v97)
        {
          v98 = (v94 - v97) >> 3;
          if (v98 >= -1)
            v99 = v98 + 1;
          else
            v99 = v98 + 2;
          v100 = v99 >> 1;
          v101 = -v100;
          v102 = &v94[-8 * v100];
          v103 = v95 - v94;
          if (v103)
          {
            memmove(&v94[-8 * v100], v94, v103);
            v94 = (char *)*((_QWORD *)a1 + 2);
          }
          v104 = &v102[v103];
          *((_QWORD *)a1 + 2) = &v94[8 * v101];
          *((_QWORD *)a1 + 3) = v104;
          *(_QWORD *)v104 = v96;
          goto LABEL_93;
        }
        if (v95 == v97)
          v105 = 1;
        else
          v105 = (v95 - v97) >> 2;
        if (v105 >> 61)
          goto LABEL_130;
        v106 = (char *)operator new(8 * v105);
        v107 = &v106[8 * (v105 >> 2)];
        v108 = v95 - v94;
        v36 = v95 == v94;
        v95 = v107;
        if (!v36)
        {
          v95 = &v107[v108 & 0xFFFFFFFFFFFFFFF8];
          v109 = v108 - 8;
          if (v109 < 0x38)
          {
            v110 = &v106[8 * (v105 >> 2)];
            goto LABEL_126;
          }
          v111 = &v106[8 * (v105 >> 2)];
          v110 = v111;
          if ((unint64_t)(v111 - v94) < 0x20)
          {
            do
            {
LABEL_126:
              v118 = *(_QWORD *)v94;
              v94 += 8;
              *(_QWORD *)v110 = v118;
              v110 += 8;
            }
            while (v110 != v95);
            goto LABEL_127;
          }
          v112 = (v109 >> 3) + 1;
          v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
          v110 = &v107[v113];
          v114 = (__int128 *)(v94 + 16);
          v115 = v111 + 16;
          v116 = v112 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v117 = *v114;
            *(v115 - 1) = *(v114 - 1);
            *v115 = v117;
            v114 += 2;
            v115 += 2;
            v116 -= 4;
          }
          while (v116);
          if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v94 += v113;
            goto LABEL_126;
          }
        }
LABEL_127:
        *((_QWORD *)a1 + 1) = v106;
        *((_QWORD *)a1 + 2) = v107;
        *((_QWORD *)a1 + 3) = v95;
        *((_QWORD *)a1 + 4) = &v106[8 * v105];
        if (v97)
        {
          operator delete(v97);
          v95 = (char *)*((_QWORD *)a1 + 3);
        }
        goto LABEL_106;
      }
      if (v7 == v8)
        v42 = 1;
      else
        v42 = v26 >> 2;
      if (v42 >> 61)
        goto LABEL_130;
      v43 = (char *)operator new(8 * v42);
      v44 = (v42 + 3) >> 2;
      v41 = &v43[8 * v44];
      v45 = &v43[8 * v42];
      v46 = v41;
      if (v7 != v8)
      {
        v46 = &v41[(v7 - v25) & 0xFFFFFFFFFFFFFFF8];
        v47 = v7 - v25 - 8;
        v48 = &v43[8 * v44];
        v49 = v8;
        if (v47 > 0x37)
        {
          v50 = &v43[8 * v44];
          v48 = v50;
          v49 = v8;
          if ((unint64_t)(v50 - v25) >= 0x20)
          {
            v51 = (v47 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v48 = &v41[v52];
            v53 = (__int128 *)(v8 + 16);
            v54 = v50 + 16;
            v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v56 = *v53;
              *(v54 - 1) = *(v53 - 1);
              *v54 = v56;
              v53 += 2;
              v54 += 2;
              v55 -= 4;
            }
            while (v55);
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            {
              *((_QWORD *)a1 + 1) = v43;
              *((_QWORD *)a1 + 2) = v41;
              *((_QWORD *)a1 + 3) = v46;
              *((_QWORD *)a1 + 4) = v45;
LABEL_104:
              operator delete(v8);
              v41 = (char *)*((_QWORD *)a1 + 2);
              goto LABEL_105;
            }
            v49 = &v8[v52];
          }
        }
        do
        {
          v93 = *(_QWORD *)v49;
          v49 += 8;
          *(_QWORD *)v48 = v93;
          v48 += 8;
        }
        while (v48 != v46);
      }
      *((_QWORD *)a1 + 1) = v43;
      *((_QWORD *)a1 + 2) = v41;
      *((_QWORD *)a1 + 3) = v46;
      *((_QWORD *)a1 + 4) = v45;
      if (!v8)
        goto LABEL_105;
      goto LABEL_104;
    }
    if (v24 == v25)
      v27 = 1;
    else
      v27 = v26 >> 2;
    if (v27 >> 61)
      goto LABEL_130;
    v28 = (char *)operator new(8 * v27);
    v120 = a2;
    v29 = operator new(0x1000uLL);
    v30 = &v28[8 * v23];
    v31 = &v28[8 * v27];
    if (v23 == v27)
    {
      v119 = v29;
      if (v9 < 1)
      {
        if (v7 == v8)
          v57 = 1;
        else
          v57 = v9 >> 2;
        if (v57 >> 61)
          sub_239418A80();
        v30 = (char *)operator new(8 * v57);
        v31 = &v30[8 * v57];
        operator delete(v28);
        v8 = (char *)*((_QWORD *)a1 + 2);
        v7 = (char *)*((_QWORD *)a1 + 3);
        v28 = v30;
      }
      else
      {
        v32 = v23 + 2;
        if (v23 >= -1)
          v32 = v23 + 1;
        v30 -= 8 * (v32 >> 1);
      }
      v29 = v119;
    }
    *(_QWORD *)v30 = v29;
    v58 = v30 + 8;
    if (v7 == v8)
    {
      v59 = v30;
      v60 = v30 + 8;
LABEL_57:
      v61 = (void *)*((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = v28;
      *((_QWORD *)a1 + 2) = v59;
      *((_QWORD *)a1 + 3) = v60;
      *((_QWORD *)a1 + 4) = v31;
      a2 = v120;
      if (v61)
        operator delete(v61);
      goto LABEL_94;
    }
    while (v30 != v28)
    {
      v62 = v30;
      v60 = v58;
LABEL_60:
      v63 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v62 - 1) = v63;
      v59 = v62 - 8;
      v58 = v60;
      v30 = v59;
      if (v7 == *((char **)a1 + 2))
        goto LABEL_57;
    }
    if (v58 < v31)
    {
      v64 = (v31 - v58) >> 3;
      if (v64 >= -1)
        v65 = v64 + 1;
      else
        v65 = v64 + 2;
      v60 = &v58[8 * (v65 >> 1)];
      v62 = &v30[8 * (v65 >> 1)];
      if (v58 == v30)
      {
        v28 = v58;
      }
      else
      {
        memmove(&v30[8 * (v65 >> 1)], v30, v58 - v30);
        v28 = v30;
      }
      goto LABEL_60;
    }
    if (v31 == v30)
      v66 = 1;
    else
      v66 = (v31 - v30) >> 2;
    if (v66 >> 61)
      sub_239418A80();
    v67 = (char *)operator new(8 * v66);
    v28 = v67;
    v68 = (v66 + 3) >> 2;
    v62 = &v67[8 * v68];
    v60 = v62;
    v69 = v58 - v30;
    if (v58 != v30)
    {
      v60 = &v62[v69 & 0xFFFFFFFFFFFFFFF8];
      v70 = v69 - 8;
      v71 = &v67[8 * v68];
      v72 = v30;
      if (v70 >= 0x38)
      {
        v73 = 8 * v68;
        v71 = &v67[8 * v68];
        v72 = v30;
        if ((unint64_t)(v71 - v30) >= 0x20)
        {
          v74 = (v70 >> 3) + 1;
          v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          v71 = &v62[v75];
          v76 = (__int128 *)(v30 + 16);
          v77 = &v67[v73 + 16];
          v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v79 = *v76;
            *((_OWORD *)v77 - 1) = *(v76 - 1);
            *(_OWORD *)v77 = v79;
            v76 += 2;
            v77 += 32;
            v78 -= 4;
          }
          while (v78);
          if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_80;
          v72 = &v30[v75];
        }
      }
      do
      {
        v80 = *(_QWORD *)v72;
        v72 += 8;
        *(_QWORD *)v71 = v80;
        v71 += 8;
      }
      while (v71 != v60);
    }
LABEL_80:
    v31 = &v67[8 * v66];
    operator delete(v30);
    goto LABEL_60;
  }
LABEL_95:
  v89 = *a2;
  *(_OWORD *)(*(_QWORD *)&v8[(v12 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v12) = *a2;
  if (*((_QWORD *)&v89 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
    v5 = *((_QWORD *)a1 + 6);
  }
  *((_QWORD *)a1 + 6) = v5 + 1;
  pthread_cond_signal((pthread_cond_t *)(a1 + 32));
  v6 = 1;
LABEL_100:
  sub_2397A16B4(v4);
  return v6;
}

void sub_239A8069C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  pthread_mutex_t *v9;
  void *v10;

  operator delete(__p);
  operator delete(v10);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A806EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF8280;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A80750(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF8280;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A807C4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF8280;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A8081C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF8280;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A80854(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A808AC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t sub_239A80904(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned __int16 i;
  uint64_t v27;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  pthread_cond_t v37;
  pthread_cond_t v38;
  pthread_mutex_t v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v1 = a1;
  v42 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 24);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  sub_2397A1618(&v39);
  v30 = 0x7FFFFFFF;
  pthread_cond_init(&v37, 0);
  pthread_cond_init(&v38, 0);
  v3 = (_QWORD *)v2[3];
  if (!v3)
    goto LABEL_44;
  v29 = v1;
  v4 = 0;
  do
  {
    v6 = v3[2];
    v5 = v3[3];
    v7 = (std::__shared_weak_count *)v3[4];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    if (!v5 || !v2[25])
    {
      if (!v7)
        goto LABEL_4;
      goto LABEL_36;
    }
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v12 = v2[34];
      if (!*(_QWORD *)(v12 + 272))
      {
LABEL_50:
        sub_239A444D4((uint64_t)"unknown file", 546, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v13 = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v15 = *(unsigned int **)(v12 + 272);
      do
        v16 = __ldxr(v13);
      while (__stxr(v16 + 1, v13));
    }
    else
    {
      v15 = *(unsigned int **)(v2[34] + 272);
      if (!v15)
        goto LABEL_50;
    }
    v41 = 0;
    v17 = operator new(0x38uLL);
    *v17 = &off_250AF82C8;
    v17[1] = v6;
    v17[2] = v5;
    v17[3] = v7;
    v17[4] = &v30;
    v17[5] = v2;
    v41 = v17;
    sub_2394D0CC4(v15, (uint64_t)v40);
    v18 = v41;
    if (v41 == v40)
    {
      v18 = v40;
      v19 = 4;
      goto LABEL_26;
    }
    if (v41)
    {
      v19 = 5;
LABEL_26:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
    if (!v7)
    {
      ++v4;
      goto LABEL_4;
    }
    v20 = (unint64_t *)&v7->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    ++v4;
    v22 = (unint64_t *)&v7->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_36:
    v24 = (unint64_t *)&v7->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_4:
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  v1 = v29;
  if (v4 && (unsigned __int16)sub_2395BFB54(&v30) >= 0x100u)
  {
    do
      --v4;
    while (v4 && (unsigned __int16)sub_2395BFB54(&v30) > 0xFFu);
  }
LABEL_44:
  sub_2395C2A4C((uint64_t)&v30);
  for (i = sub_2395BFB54(&v30); i >= 0x100u; i = sub_2395BFB54(&v30))
    ;
  v27 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 256);
  if (v27)
  {
    v40[0] = 1;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v27 + 48))(v27, v40);
  }
  return sub_2395C29C4((uint64_t)&v30);
}

void sub_239A80C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_2395C29C4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A80E4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF82C8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A80EB0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF82C8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A80F24(__n128 *a1)
{
  __n128 *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 result;

  v2 = (__n128 *)operator new(0x38uLL);
  v3 = a1->n128_u64[1];
  v4 = a1[1].n128_u64[0];
  v2->n128_u64[0] = (unint64_t)&off_250AF82C8;
  v2->n128_u64[1] = v3;
  v5 = a1[1].n128_u64[1];
  v2[1].n128_u64[0] = v4;
  v2[1].n128_u64[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = a1[2];
  v2[2] = result;
  return result;
}

__n128 sub_239A80F80(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = a1->n128_u64[1];
  v3 = a1[1].n128_u64[0];
  a2->n128_u64[0] = (unint64_t)&off_250AF82C8;
  a2->n128_u64[1] = v2;
  v4 = a1[1].n128_u64[1];
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u64[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = a1[2];
  a2[2] = result;
  return result;
}

void sub_239A80FBC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A81014(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t sub_239A8106C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  v2 = a1[5];
  v3 = (std::__shared_weak_count *)a1[3];
  v12 = a1[2];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v14 = a1[1];
  v6 = *(_QWORD *)(v2 + 200);
  if (!v6)
    sub_2394172E0();
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v12, &v14);
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (unsigned int *)a1[4];
  LOBYTE(v14) = 1;
  return sub_2395BFE44(v10, &v14);
}

void sub_239A8112C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239A81170(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF8238;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A811D4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF8238;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A81248(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF8238;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A812A0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF8238;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A812D8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A81330(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t sub_239A81388(uint64_t a1)
{
  uint64_t result;

  sub_239467C88(*(_QWORD *)(a1 + 24));
  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 224);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

_QWORD *sub_239A813CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF81F0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A81430(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF81F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A814A4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF81F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A814FC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF81F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A81534(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A8158C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t sub_239A815E4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 8);
  v4 = (std::__shared_weak_count *)v3[16];
  v15 = v3[15];
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v3 = *(_QWORD **)(a1 + 8);
  }
  v17 = v3[14];
  v7 = *(_QWORD *)(v2 + 200);
  if (!v7)
    sub_2394172E0();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v15, &v17);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 160);
  if (v13)
  {
    LOBYTE(v17) = v8;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v17);
    v12 = *(_QWORD *)(a1 + 8);
  }
  return sub_239A81718(v2, *(_QWORD *)(v12 + 112));
}

void sub_239A816D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A81718(uint64_t a1, unint64_t a2)
{
  pthread_mutex_t *v4;
  int8x8_t v5;
  _QWORD *v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *__p;

  v4 = (pthread_mutex_t *)(a1 + 344);
  sub_2397A1694((pthread_mutex_t *)(a1 + 344));
  v5 = *(int8x8_t *)(a1 + 312);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 304);
    v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v8 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v8 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*v6 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == a2)
            {
              if (v10[2] == a2)
                goto LABEL_22;
            }
            else if ((v13 & v11) != v8)
            {
              return sub_2397A16B4(v4);
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              return sub_2397A16B4(v4);
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == a2)
          {
            if (v10[2] == a2)
            {
LABEL_22:
              sub_239A78378((uint64_t)&__p, v6, v10);
              if (__p)
                operator delete(__p);
              return sub_2397A16B4(v4);
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v5)
              v12 %= *(_QWORD *)&v5;
            if (v12 != v8)
              return sub_2397A16B4(v4);
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  return sub_2397A16B4(v4);
}

_QWORD *sub_239A81848(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF8160;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A818AC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF8160;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A81920(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF8160;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A81978(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF8160;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A819B0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A81A08(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_239A81A60(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD **v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  float v43;
  float v44;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  size_t prime;
  unint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  int8x8_t v72;
  _QWORD *v73;
  uint8x8_t v74;
  unint64_t v75;
  _QWORD **v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  char v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  __int128 v128;
  void *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  _QWORD v132[3];
  _QWORD *v133;
  void *__p[9];
  char v135;
  uint64_t v136;
  void *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD v145[3];
  _QWORD *v146;
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)a1[1];
  if (!v2[7])
  {
    v10 = v2[13];
    if (v10)
    {
      LOBYTE(__p[0]) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 48))(v10, __p);
    }
    return;
  }
  v4 = a1[3];
  std::mutex::lock((std::mutex *)(v4 + 80));
  v5 = (uint64_t *)(v4 + 8);
  v6 = v2[6];
  v7 = *(_QWORD *)(v4 + 16);
  if (!v7)
    goto LABEL_24;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  v1 = (std::__shared_weak_count *)v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v9 = v2[6];
    if (v6 >= v7)
      v9 = v6 % v7;
  }
  else
  {
    v9 = (v7 - 1) & v6;
  }
  v11 = *(_QWORD **)(*v5 + 8 * v9);
  if (!v11 || (v12 = (_QWORD *)*v11) == 0)
  {
LABEL_24:
    if ((unint64_t)(*(_QWORD *)(v4 + 32) + 1) > *(_QWORD *)(v4 + 48))
    {
      v16 = *(_QWORD *)(v4 + 72);
      if (v16)
      {
        v17 = *(uint64_t **)(v4 + 56);
        v6 = v17[2];
        if ((v7 & (v7 - 1)) != 0)
        {
          v25 = v17[2];
          if (v6 >= v7)
            v25 = v6 % v7;
          v18 = *(_QWORD **)(*v5 + 8 * v25);
          do
          {
            do
              v18 = (_QWORD *)*v18;
            while (v18[1] != v6);
          }
          while (v18[2] != v6);
        }
        else
        {
          v18 = *(_QWORD **)(*v5 + 8 * (v6 & (v7 - 1)));
          do
          {
            do
              v18 = (_QWORD *)*v18;
            while (v18[1] != v6);
          }
          while (v18[2] != v6);
        }
        v7 = v18[3];
        v1 = (std::__shared_weak_count *)v18[4];
        if (v1)
        {
          p_shared_owners = (unint64_t *)&v1->__shared_owners_;
          do
            v27 = __ldxr(p_shared_owners);
          while (__stxr(v27 + 1, p_shared_owners));
          v17 = *(uint64_t **)(v4 + 56);
          v16 = *(_QWORD *)(v4 + 72);
        }
        v28 = *v17;
        *(_QWORD *)(v28 + 8) = v17[1];
        *(_QWORD *)v17[1] = v28;
        *(_QWORD *)(v4 + 72) = v16 - 1;
        operator delete(v17);
        v29 = *(int8x8_t *)(v4 + 16);
        if (v29)
        {
          v30 = (uint8x8_t)vcnt_s8(v29);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            v31 = v6;
            if (v6 >= *(_QWORD *)&v29)
              v31 = v6 % *(_QWORD *)&v29;
          }
          else
          {
            v31 = (*(_QWORD *)&v29 - 1) & v6;
          }
          v32 = *v5;
          v33 = *(_QWORD ***)(*v5 + 8 * v31);
          if (v33)
          {
            v34 = *v33;
            if (*v33)
            {
              v35 = *(_QWORD *)&v29 - 1;
              if (v30.u32[0] < 2uLL)
              {
                while (1)
                {
                  v36 = v34[1];
                  if (v36 == v6)
                  {
                    if (v34[2] == v6)
                      goto LABEL_98;
                  }
                  else if ((v36 & v35) != v31)
                  {
                    goto LABEL_140;
                  }
                  v34 = (_QWORD *)*v34;
                  if (!v34)
                    goto LABEL_140;
                }
              }
              do
              {
                v37 = v34[1];
                if (v37 == v6)
                {
                  if (v34[2] == v6)
                  {
LABEL_98:
                    if (v30.u32[0] > 1uLL)
                    {
                      v50 = v6;
                      if (v6 >= *(_QWORD *)&v29)
                        v50 = v6 % *(_QWORD *)&v29;
                    }
                    else
                    {
                      v50 = v35 & v6;
                    }
                    v54 = *(_QWORD **)(v32 + 8 * v50);
                    do
                    {
                      v55 = v54;
                      v54 = (_QWORD *)*v54;
                    }
                    while (v54 != v34);
                    if (v55 == (_QWORD *)(v4 + 24))
                      goto LABEL_125;
                    v56 = v55[1];
                    if (v30.u32[0] > 1uLL)
                    {
                      if (v56 >= *(_QWORD *)&v29)
                        v56 %= *(_QWORD *)&v29;
                    }
                    else
                    {
                      v56 &= v35;
                    }
                    if (v56 != v50)
                    {
LABEL_125:
                      if (!*v34)
                        goto LABEL_126;
                      v57 = *(_QWORD *)(*v34 + 8);
                      if (v30.u32[0] > 1uLL)
                      {
                        if (v57 >= *(_QWORD *)&v29)
                          v57 %= *(_QWORD *)&v29;
                      }
                      else
                      {
                        v57 &= v35;
                      }
                      if (v57 != v50)
LABEL_126:
                        *(_QWORD *)(v32 + 8 * v50) = 0;
                    }
                    v58 = *v34;
                    v127 = v7;
                    if (*v34)
                    {
                      v59 = *(_QWORD *)(v58 + 8);
                      if (v30.u32[0] > 1uLL)
                      {
                        if (v59 >= *(_QWORD *)&v29)
                          v59 %= *(_QWORD *)&v29;
                      }
                      else
                      {
                        v59 &= v35;
                      }
                      if (v59 != v50)
                      {
                        *(_QWORD *)(*v5 + 8 * v59) = v55;
                        v58 = *v34;
                      }
                    }
                    *v55 = v58;
                    *v34 = 0;
                    --*(_QWORD *)(v4 + 32);
                    v60 = (std::__shared_weak_count *)v34[4];
                    if (v60)
                    {
                      v61 = (unint64_t *)&v60->__shared_owners_;
                      do
                        v62 = __ldaxr(v61);
                      while (__stlxr(v62 - 1, v61));
                      if (!v62)
                      {
                        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                        std::__shared_weak_count::__release_weak(v60);
                      }
                    }
                    operator delete(v34);
                    v7 = v127;
                    break;
                  }
                }
                else
                {
                  if (v37 >= *(_QWORD *)&v29)
                    v37 %= *(_QWORD *)&v29;
                  if (v37 != v31)
                    break;
                }
                v34 = (_QWORD *)*v34;
              }
              while (v34);
            }
          }
        }
LABEL_140:
        v63 = operator new(0x18uLL);
        v63[2] = v2[6];
        *v63 = v4 + 56;
        v64 = *(_QWORD **)(v4 + 64);
        v63[1] = v64;
        *v64 = v63;
        v65 = *(_QWORD *)(v4 + 72) + 1;
        *(_QWORD *)(v4 + 64) = v63;
        *(_QWORD *)(v4 + 72) = v65;
        sub_239A83668(v4 + 8, v2[6], v2[6], v2[7], v2[8]);
        if (v1)
        {
          v66 = (unint64_t *)&v1->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
          do
            v68 = __ldaxr(v66);
          while (__stlxr(v68 - 1, v66));
          v69 = 0;
          v22 = 0;
          if (!v68)
            goto LABEL_145;
          goto LABEL_147;
        }
      }
      else
      {
        v7 = v2[7];
        v1 = (std::__shared_weak_count *)v2[8];
        if (v1)
        {
          v23 = (unint64_t *)&v1->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
      }
      v22 = 0;
      goto LABEL_147;
    }
    v19 = operator new(0x18uLL);
    v19[2] = v6;
    *v19 = v4 + 56;
    v20 = *(_QWORD **)(v4 + 64);
    v19[1] = v20;
    *v20 = v19;
    v21 = *(_QWORD *)(v4 + 72) + 1;
    *(_QWORD *)(v4 + 64) = v19;
    *(_QWORD *)(v4 + 72) = v21;
    sub_239A83668(v4 + 8, v2[6], v2[6], v2[7], v2[8]);
    goto LABEL_32;
  }
  v13 = v7 - 1;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v14 = v12[1];
      if (v14 == v6)
      {
        if (v12[2] == v6)
          goto LABEL_67;
      }
      else if ((v14 & v13) != v9)
      {
        goto LABEL_24;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v15 = v12[1];
    if (v15 == v6)
      break;
    if (v15 >= v7)
      v15 %= v7;
    if (v15 != v9)
      goto LABEL_24;
LABEL_19:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_24;
  }
  if (v12[2] != v6)
    goto LABEL_19;
LABEL_67:
  if (v8.u32[0] > 1uLL)
  {
    v38 = v2[6];
    if (v6 >= v7)
      v38 = v6 % v7;
  }
  else
  {
    v38 = v13 & v6;
  }
  v39 = *(_QWORD ***)(*v5 + 8 * v38);
  if (v39)
  {
    v40 = *v39;
    if (*v39)
    {
      if (v8.u32[0] < 2uLL)
      {
        while (1)
        {
          v41 = v40[1];
          if (v41 == v6)
          {
            if (v40[2] == v6)
              goto LABEL_266;
          }
          else if ((v41 & v13) != v38)
          {
            goto LABEL_86;
          }
          v40 = (_QWORD *)*v40;
          if (!v40)
            goto LABEL_86;
        }
      }
      do
      {
        v42 = v40[1];
        if (v42 == v6)
        {
          if (v40[2] == v6)
            goto LABEL_266;
        }
        else
        {
          if (v42 >= v7)
            v42 %= v7;
          if (v42 != v38)
            break;
        }
        v40 = (_QWORD *)*v40;
      }
      while (v40);
    }
  }
LABEL_86:
  v40 = operator new(0x28uLL);
  *v40 = 0;
  v40[1] = v6;
  v40[3] = 0;
  v40[4] = 0;
  v40[2] = v6;
  v43 = (float)(unint64_t)(*(_QWORD *)(v4 + 32) + 1);
  v44 = *(float *)(v4 + 40);
  if ((float)(v44 * (float)v7) < v43)
  {
    v46 = v7 < 3 || (unint64_t)v1 > 1;
    v47 = v46 | (2 * v7);
    v48 = vcvtps_u32_f32(v43 / v44);
    if (v47 <= v48)
      prime = v48;
    else
      prime = v47;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(v4 + 16);
    }
    if (prime > v7)
      goto LABEL_103;
    if (prime < v7)
    {
      v51 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 32) / *(float *)(v4 + 40));
      if (v7 < 3 || (v52 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
      {
        v51 = std::__next_prime(v51);
      }
      else
      {
        v53 = 1 << -(char)__clz(v51 - 1);
        if (v51 >= 2)
          v51 = v53;
      }
      if (prime <= v51)
        prime = v51;
      if (prime < v7)
LABEL_103:
        sub_239A501C8(v4 + 8, prime);
    }
    v7 = *(_QWORD *)(v4 + 16);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v38 = v6 % v7;
      else
        v38 = v6;
    }
    else
    {
      v38 = (v7 - 1) & v6;
    }
  }
  v118 = *v5;
  v119 = *(_QWORD **)(*v5 + 8 * v38);
  if (v119)
  {
    *v40 = *v119;
    goto LABEL_264;
  }
  *v40 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v40;
  *(_QWORD *)(v118 + 8 * v38) = v4 + 24;
  if (*v40)
  {
    v120 = *(_QWORD *)(*v40 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v120 >= v7)
        v120 %= v7;
    }
    else
    {
      v120 &= v7 - 1;
    }
    v119 = (_QWORD *)(*v5 + 8 * v120);
LABEL_264:
    *v119 = v40;
  }
  ++*(_QWORD *)(v4 + 32);
LABEL_266:
  v122 = v2[7];
  v121 = v2[8];
  if (v121)
  {
    v123 = (unint64_t *)(v121 + 8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  v1 = (std::__shared_weak_count *)v40[4];
  v40[3] = v122;
  v40[4] = v121;
  if (!v1)
  {
LABEL_32:
    v6 = 0;
    v22 = 1;
    goto LABEL_147;
  }
  v125 = (unint64_t *)&v1->__shared_owners_;
  do
    v126 = __ldaxr(v125);
  while (__stlxr(v126 - 1, v125));
  v6 = 0;
  v69 = 1;
  v22 = 1;
  if (!v126)
  {
LABEL_145:
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
    v22 = v69;
  }
LABEL_147:
  std::mutex::unlock((std::mutex *)(v4 + 80));
  v70 = a1[1];
  if (*(_BYTE *)(v70 + 72))
  {
    v71 = *(_QWORD *)(v70 + 48);
    if (sub_2397A1B98((pthread_mutex_t *)(v4 + 344)))
    {
      sub_2397A16B4((pthread_mutex_t *)(v4 + 344));
      sub_239A444D4((uint64_t)"unknown file", 495, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v72 = *(int8x8_t *)(v4 + 312);
    if (v72)
    {
      v73 = (_QWORD *)(v4 + 304);
      v74 = (uint8x8_t)vcnt_s8(v72);
      v74.i16[0] = vaddlv_u8(v74);
      if (v74.u32[0] > 1uLL)
      {
        v75 = v71;
        if (*(_QWORD *)&v72 <= v71)
          v75 = v71 % *(_QWORD *)&v72;
      }
      else
      {
        v75 = (*(_QWORD *)&v72 - 1) & v71;
      }
      v76 = *(_QWORD ***)(*v73 + 8 * v75);
      if (v76)
      {
        v77 = *v76;
        if (*v76)
        {
          if (v74.u32[0] < 2uLL)
          {
            v78 = *(_QWORD *)&v72 - 1;
            while (1)
            {
              v80 = v77[1];
              if (v80 == v71)
              {
                if (v77[2] == v71)
                  goto LABEL_170;
              }
              else if ((v80 & v78) != v75)
              {
                goto LABEL_172;
              }
              v77 = (_QWORD *)*v77;
              if (!v77)
                goto LABEL_172;
            }
          }
          do
          {
            v79 = v77[1];
            if (v79 == v71)
            {
              if (v77[2] == v71)
              {
LABEL_170:
                sub_239A78378((uint64_t)__p, v73, v77);
                if (__p[0])
                  operator delete(__p[0]);
                break;
              }
            }
            else
            {
              if (v79 >= *(_QWORD *)&v72)
                v79 %= *(_QWORD *)&v72;
              if (v79 != v75)
                break;
            }
            v77 = (_QWORD *)*v77;
          }
          while (v77);
        }
      }
    }
  }
LABEL_172:
  if (!v22)
  {
    v81 = a1[1];
    if (!*(_QWORD *)(v4 + 200) || *(_QWORD *)(v81 + 48) == v6 && *(_BYTE *)(v81 + 72))
      goto LABEL_177;
    v86 = (std::__shared_weak_count *)a1[2];
    if (v86)
    {
      v87 = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    if (v1)
    {
      v89 = (unint64_t *)&v1->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    if (v86)
    {
      v91 = (unint64_t *)&v86->__shared_owners_;
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    if (v1)
    {
      v93 = (unint64_t *)&v1->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
    v146 = 0;
    v95 = operator new(0x40uLL);
    *v95 = &off_250AF81A8;
    v95[1] = v81;
    v95[2] = v86;
    v95[3] = v6;
    v95[4] = v7;
    v95[5] = v1;
    *((_BYTE *)v95 + 48) = 1;
    v95[7] = v4;
    v146 = v95;
    v96 = sub_239A82B00(v4, v6, v145);
    v97 = v146;
    if (v146 == v145)
    {
      v98 = 4;
      v97 = v145;
    }
    else
    {
      if (!v146)
        goto LABEL_205;
      v98 = 5;
    }
    (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_205:
    if ((v96 & 1) != 0)
    {
LABEL_237:
      if (v1)
      {
        v114 = (unint64_t *)&v1->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
          std::__shared_weak_count::__release_weak(v1);
        }
      }
      if (v86)
      {
        v116 = (unint64_t *)&v86->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      goto LABEL_179;
    }
    v129 = (void *)v6;
    v130 = v7;
    v131 = v1;
    if (v1)
    {
      v99 = (unint64_t *)&v1->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v101 = v132;
    v102 = a1[1];
    v103 = *(_QWORD *)(v102 + 104);
    if (v103)
    {
      if (v103 == v102 + 80)
      {
        v133 = v132;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v103 + 24))(v103, v132);
LABEL_214:
        LODWORD(__p[0]) = 2;
        __p[7] = 0;
        __p[8] = 0;
        __p[5] = 0;
        v135 = 0;
        v136 = 0;
        v137 = v129;
        v138 = v130;
        v139 = v131;
        if (v131)
        {
          v104 = &v131->__shared_owners_;
          do
            v105 = __ldxr((unint64_t *)v104);
          while (__stxr(v105 + 1, (unint64_t *)v104));
        }
        v106 = (uint64_t)v133;
        if (v133)
        {
          if (v133 == v132)
          {
            v141 = &v140;
            (*(void (**)(_QWORD *))(v132[0] + 24))(v132);
LABEL_222:
            v143 = 0;
            v144 = 0;
            __p[1] = v129;
            __p[6] = v129;
            v142 = 0;
            v137 = v129;
            v107 = operator new(0x120uLL);
            v107[1] = 0;
            v107[2] = 0;
            *v107 = &off_250AF8128;
            *(_QWORD *)&v128 = sub_239A82C70((uint64_t)(v107 + 3), (uint64_t)__p);
            *((_QWORD *)&v128 + 1) = v107;
            sub_239A82E8C(__p);
            if (v133 == v132)
            {
              v108 = 4;
            }
            else
            {
              if (!v133)
                goto LABEL_227;
              v108 = 5;
              v101 = v133;
            }
            (*(void (**)(_QWORD *))(*v101 + 8 * v108))(v101);
LABEL_227:
            if (v131)
            {
              v109 = &v131->__shared_owners_;
              do
                v110 = __ldaxr((unint64_t *)v109);
              while (__stlxr(v110 - 1, (unint64_t *)v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
            sub_239A7FF28(*(unsigned int **)(v4 + 288), &v128);
            v111 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
            if (*((_QWORD *)&v128 + 1))
            {
              v112 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            goto LABEL_237;
          }
          v106 = (*(uint64_t (**)(void))(*v133 + 16))();
        }
        v141 = (uint64_t *)v106;
        goto LABEL_222;
      }
      v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
    }
    v133 = (_QWORD *)v103;
    goto LABEL_214;
  }
  v81 = a1[1];
LABEL_177:
  v82 = *(_QWORD *)(v81 + 104);
  if (v82)
  {
    LOBYTE(__p[0]) = 1;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v82 + 48))(v82, __p);
  }
LABEL_179:
  if (v1)
    v83 = v22;
  else
    v83 = 1;
  if ((v83 & 1) == 0)
  {
    v84 = (unint64_t *)&v1->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A82764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  std::mutex *v36;
  _QWORD *v37;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;

  v39 = (std::__shared_weak_count *)v37[4];
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(v37);
  std::mutex::unlock(v36);
  _Unwind_Resume(a1);
}

uint64_t sub_239A82B00(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  pthread_mutex_t *v6;
  _QWORD *v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v17 = a2;
  v6 = (pthread_mutex_t *)(a1 + 344);
  if (sub_2397A1B98((pthread_mutex_t *)(a1 + 344)))
  {
    sub_2397A16B4(v6);
    sub_239A444D4((uint64_t)"unknown file", 531, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v7 = (_QWORD *)(a1 + 304);
  v8 = *(int8x8_t *)(a1 + 312);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8(v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = a2;
      if (*(_QWORD *)&v8 <= a2)
        v10 = a2 % *(_QWORD *)&v8;
    }
    else
    {
      v10 = (*(_QWORD *)&v8 - 1) & a2;
    }
    v11 = *(_QWORD **)(*v7 + 8 * v10);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v9.u32[0] < 2uLL)
        {
          v13 = *(_QWORD *)&v8 - 1;
          while (1)
          {
            v15 = v12[1];
            if (v15 == a2)
            {
              if (v12[2] == a2)
                return 0;
            }
            else if ((v15 & v13) != v10)
            {
              goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == a2)
          {
            if (v12[2] == a2)
              return 0;
          }
          else
          {
            if (v14 >= *(_QWORD *)&v8)
              v14 %= *(_QWORD *)&v8;
            if (v14 != v10)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  sub_239465800((uint64_t)v7, &v17, &v17);
  sub_239A7798C(*(_QWORD *)(a1 + 272), a3);
  return 1;
}

uint64_t sub_239A82C70(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (!v5)
  {
    v4 = (_QWORD *)(a1 + 40);
    goto LABEL_5;
  }
  if (v5 != a2 + 16)
  {
    *(_QWORD *)(a1 + 40) = v5;
LABEL_5:
    *v4 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 40) = a1 + 16;
  (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
LABEL_7:
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = (_QWORD *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  if (!v7)
  {
    v6 = (_QWORD *)(a1 + 104);
    goto LABEL_11;
  }
  if (v7 != a2 + 80)
  {
    *(_QWORD *)(a1 + 104) = v7;
LABEL_11:
    *v6 = 0;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 104) = a1 + 80;
  (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
LABEL_13:
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v8 = (_QWORD *)(a2 + 160);
  v9 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  if (!v9)
  {
    v8 = (_QWORD *)(a1 + 160);
    goto LABEL_17;
  }
  if (v9 != a2 + 136)
  {
    *(_QWORD *)(a1 + 160) = v9;
LABEL_17:
    *v8 = 0;
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 160) = a1 + 136;
  (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8);
LABEL_19:
  v10 = (_QWORD *)(a2 + 192);
  v11 = *(_QWORD *)(a2 + 192);
  if (!v11)
  {
    v10 = (_QWORD *)(a1 + 192);
    goto LABEL_23;
  }
  if (v11 != a2 + 168)
  {
    *(_QWORD *)(a1 + 192) = v11;
LABEL_23:
    *v10 = 0;
    goto LABEL_25;
  }
  *(_QWORD *)(a1 + 192) = a1 + 168;
  (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
LABEL_25:
  v12 = (_QWORD *)(a2 + 224);
  v13 = *(_QWORD *)(a2 + 224);
  if (!v13)
  {
    v12 = (_QWORD *)(a1 + 224);
    goto LABEL_29;
  }
  if (v13 != a2 + 200)
  {
    *(_QWORD *)(a1 + 224) = v13;
LABEL_29:
    *v12 = 0;
    goto LABEL_31;
  }
  *(_QWORD *)(a1 + 224) = a1 + 200;
  (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 24))(*v12);
LABEL_31:
  v14 = *(_QWORD *)(a2 + 256);
  if (v14)
  {
    v15 = (_QWORD *)(a2 + 256);
    if (v14 == a2 + 232)
    {
      *(_QWORD *)(a1 + 256) = a1 + 232;
      (*(void (**)(_QWORD))(*(_QWORD *)*v15 + 24))(*v15);
      return a1;
    }
    *(_QWORD *)(a1 + 256) = v14;
  }
  else
  {
    v15 = (_QWORD *)(a1 + 256);
  }
  *v15 = 0;
  return a1;
}

_QWORD *sub_239A82E8C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = a1 + 29;
  v3 = (_QWORD *)a1[32];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[28];
  if (v5 == a1 + 25)
  {
    v6 = 4;
    v5 = a1 + 25;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[24];
  if (v7 == a1 + 21)
  {
    v8 = 4;
    v7 = a1 + 21;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[20];
  if (v9 == a1 + 17)
  {
    v10 = 4;
    v9 = a1 + 17;
    goto LABEL_20;
  }
  if (v9)
  {
    v10 = 5;
LABEL_20:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v11 = (std::__shared_weak_count *)a1[16];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (_QWORD *)a1[13];
  if (v14 == a1 + 10)
  {
    v15 = 4;
    v14 = a1 + 10;
    goto LABEL_30;
  }
  if (v14)
  {
    v15 = 5;
LABEL_30:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  v16 = (std::__shared_weak_count *)a1[8];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (_QWORD *)a1[5];
  if (v19 == a1 + 2)
  {
    v20 = 4;
    v19 = a1 + 2;
    goto LABEL_40;
  }
  if (v19)
  {
    v20 = 5;
LABEL_40:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  return a1;
}

uint64_t sub_239A8303C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_239A830C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF8128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A830D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF8128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A83104(uint64_t a1)
{
  return sub_239A82E8C((_QWORD *)(a1 + 24));
}

uint64_t sub_239A83110(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

uint64_t sub_239A83198(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_250AF81A8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_239A8323C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_250AF81A8;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A832F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x40uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_250AF81A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = 0;
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    v7 = *(_QWORD *)(a1 + 32);
    result[3] = *(_QWORD *)(a1 + 24);
    result[4] = v7;
    v8 = *(_QWORD *)(a1 + 40);
    result[5] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    *((_BYTE *)result + 48) = 1;
  }
  result[7] = *(_QWORD *)(a1 + 56);
  return result;
}

uint64_t sub_239A83388(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_250AF81A8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (*(_BYTE *)(result + 48))
  {
    v6 = *(_QWORD *)(result + 32);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
    *(_QWORD *)(a2 + 32) = v6;
    v7 = *(_QWORD *)(result + 40);
    *(_QWORD *)(a2 + 40) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_BYTE *)(a2 + 48) = 1;
  }
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(result + 56);
  return result;
}

void sub_239A83400(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (!*(_BYTE *)(a1 + 48))
    goto LABEL_6;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  else
  {
LABEL_6:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_239A834A8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((_BYTE *)__p + 48))
  {
    v2 = (std::__shared_weak_count *)__p[5];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(__p);
}

uint64_t sub_239A83540(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;

  v2 = a1[7];
  v3 = (std::__shared_weak_count *)a1[5];
  v13 = a1[4];
  v14 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v15 = a1[3];
  v6 = *(_QWORD *)(v2 + 200);
  if (!v6)
    sub_2394172E0();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v13, &v15);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(_QWORD *)(a1[1] + 104);
  if (v11)
  {
    LOBYTE(v15) = v7;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v15);
  }
  return sub_239A81718(v2, a1[3]);
}

void sub_239A83624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239A83668(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v11 <= a2)
        v5 = a2 % v11;
    }
    else
    {
      v5 = (v11 - 1) & a2;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == a2)
            {
              if (v14[2] == a2)
                return;
            }
            else if ((v16 & (v11 - 1)) != v5)
            {
              goto LABEL_22;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_22;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == a2)
          {
            if (v14[2] == a2)
              return;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v5)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_22:
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x28uLL);
  *v18 = 0;
  v18[1] = a2;
  v18[2] = a3;
  v18[3] = a4;
  v18[4] = a5;
  if (a5)
  {
    v19 = (unint64_t *)(a5 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v27)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v27)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v27 < 3uLL || (v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < *(_QWORD *)&v27)
LABEL_37:
        sub_239A501C8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= a2)
        v5 = a2 % v11;
      else
        v5 = a2;
    }
    else
    {
      v5 = (v11 - 1) & a2;
    }
  }
  v31 = *(_QWORD *)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v32)
  {
    *v18 = *v32;
LABEL_61:
    *v32 = v18;
    goto LABEL_62;
  }
  *v18 = *v17;
  *v17 = v18;
  *(_QWORD *)(v31 + 8 * v5) = v17;
  if (*v18)
  {
    v33 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11)
        v33 %= v11;
    }
    else
    {
      v33 &= v11 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
}

void sub_239A8396C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A83980(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF8050;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A839E4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF8050;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A83A58(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF8050;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A83AB0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF8050;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A83AE8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A83B40(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_239A83B98(_QWORD *a1)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 1;
  v3 = a1[1];
  v4 = a1[3];
  ++*(_QWORD *)(v4 + 208);
  std::mutex::lock((std::mutex *)(v4 + 80));
  v5 = *(int8x8_t *)(v4 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v3 + 8);
    v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = *(_QWORD *)(v3 + 8);
      if (v6 >= *(_QWORD *)&v5)
        v8 = v6 % *(_QWORD *)&v5;
    }
    else
    {
      v8 = (*(_QWORD *)&v5 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)(v4 + 8) + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v6 == v13)
            {
              if (v10[2] == v6)
                goto LABEL_47;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v6 == v12)
          {
            if (v10[2] == v6)
            {
LABEL_47:
              v28 = v10[3];
              v15 = (std::__shared_weak_count *)v10[4];
              if (v15)
              {
                p_shared_owners = (unint64_t *)&v15->__shared_owners_;
                do
                  v30 = __ldxr(p_shared_owners);
                while (__stxr(v30 + 1, p_shared_owners));
              }
              std::mutex::unlock((std::mutex *)(v4 + 80));
              ++*(_QWORD *)(v4 + 216);
              v31 = *(_QWORD *)v2;
              v32 = *(_QWORD *)(*(_QWORD *)v2 + 40);
              if (v32)
              {
                v40 = v28;
                v41 = v15;
                if (v15)
                {
                  v33 = (unint64_t *)&v15->__shared_owners_;
                  do
                    v34 = __ldxr(v33);
                  while (__stxr(v34 + 1, v33));
                  v32 = *(_QWORD *)(v31 + 40);
                  v39 = 1;
                  if (!v32)
                    sub_2394172E0();
                }
                else
                {
                  v39 = 1;
                }
                (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v32 + 48))(v32, &v40, &v39);
                v35 = v41;
                if (v41)
                {
                  v36 = (unint64_t *)&v41->__shared_owners_;
                  do
                    v37 = __ldaxr(v36);
                  while (__stlxr(v37 - 1, v36));
                  if (!v37)
                  {
                    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                    std::__shared_weak_count::__release_weak(v35);
                  }
                }
              }
              if (v15)
              {
                v38 = (unint64_t *)&v15->__shared_owners_;
                do
                  v22 = __ldaxr(v38);
                while (__stlxr(v22 - 1, v38));
LABEL_44:
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              return;
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v5)
              v12 %= *(_QWORD *)&v5;
            if (v12 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  std::mutex::unlock((std::mutex *)(v4 + 80));
  v14 = *(_QWORD *)v2;
  if (*(_QWORD *)(v4 + 168))
  {
    v15 = (std::__shared_weak_count *)a1[2];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = *(_QWORD *)(*(_QWORD *)v2 + 8);
      do
        v19 = __ldxr(v16);
      while (__stxr(v19 + 1, v16));
    }
    else
    {
      v18 = *(_QWORD *)(v14 + 8);
    }
    v23 = (uint64_t *)operator new(0x20uLL);
    *v23 = (uint64_t)&off_250AF80E0;
    v23[1] = v14;
    v23[2] = (uint64_t)v15;
    v23[3] = v4;
    v42 = v23;
    v24 = sub_239A82B00(v4, v18, &v40);
    v25 = v42;
    if (v42 == &v40)
    {
      v26 = 4;
      v25 = &v40;
    }
    else
    {
      if (!v42)
        goto LABEL_39;
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_39:
    if ((v24 & 1) == 0)
    {
      sub_239A7FF28(*(unsigned int **)(v4 + 288), v2);
      --*(_QWORD *)(v4 + 208);
    }
    if (v15)
    {
      v27 = (unint64_t *)&v15->__shared_owners_;
      do
        v22 = __ldaxr(v27);
      while (__stlxr(v22 - 1, v27));
      goto LABEL_44;
    }
    return;
  }
  v20 = *(_QWORD *)(v14 + 40);
  if (v20)
  {
    v40 = 0;
    v41 = 0;
    v39 = 1;
    (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v20 + 48))(v20, &v40, &v39);
    v15 = v41;
    if (v41)
    {
      v21 = (unint64_t *)&v41->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      goto LABEL_44;
    }
  }
}

void sub_239A83F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239A84058(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF80E0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A840BC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF80E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A84130(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF80E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A84188(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF80E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A841C0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A84218(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_239A84270(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32[2];
  std::__shared_weak_count *v33;
  char v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = *(_QWORD *)(v2 + 168);
  if (!v3)
    sub_2394172E0();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(&v30, v3, &v37);
  v4 = *(_QWORD *)(a1 + 8);
  if (v30)
  {
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      v37 = v30;
      v38 = v31;
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        v5 = *(_QWORD *)(v4 + 40);
        LOBYTE(v32[0]) = 1;
        if (!v5)
          sub_2394172E0();
      }
      else
      {
        LOBYTE(v32[0]) = 1;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v37, v32);
      v12 = v38;
      if (v38)
      {
        v13 = (unint64_t *)&v38->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    v32[0] = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v32[1] = v30;
    v33 = v31;
    if (v31)
    {
      v15 = (unint64_t *)&v31->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v34 = 1;
    v17 = v35;
    v36 = 0;
    sub_239A846A8((uint64_t)&v37, v32);
    v18 = operator new(0x120uLL);
    v18[1] = 0;
    v18[2] = 0;
    *v18 = &off_250AF8128;
    *(_QWORD *)&v29 = sub_239A82C70((uint64_t)(v18 + 3), (uint64_t)&v37);
    *((_QWORD *)&v29 + 1) = v18;
    sub_239A82E8C(&v37);
    if (v36 == v35)
    {
      v19 = 4;
    }
    else
    {
      if (!v36)
        goto LABEL_30;
      v19 = 5;
      v17 = v36;
    }
    (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_30:
    v20 = v33;
    if (v33)
    {
      v21 = (unint64_t *)&v33->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    sub_239A7FF28(*(unsigned int **)(v2 + 288), &v29);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    goto LABEL_40;
  }
  v8 = *(_QWORD *)(v4 + 40);
  if (v8)
  {
    v37 = 0;
    v38 = 0;
    LOBYTE(v32[0]) = 1;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v37, v32);
    v9 = v38;
    if (v38)
    {
      v10 = (unint64_t *)&v38->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  sub_239A81718(v2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
LABEL_40:
  v26 = v31;
  if (v31)
  {
    v27 = (unint64_t *)&v31->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_239A8456C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,std::__shared_weak_count *a22)
{
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  if (a12)
  {
    v25 = (unint64_t *)&a12->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A846A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_DWORD *)a1 = 1;
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  v6 = a2[2];
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 24);
  v9 = a2[7];
  if (v9)
  {
    if ((uint64_t *)v9 == a2 + 4)
    {
      *(_QWORD *)(a1 + 104) = a1 + 80;
      (*(void (**)(uint64_t))(*(_QWORD *)a2[7] + 24))(a2[7]);
      goto LABEL_9;
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  *(_QWORD *)(a1 + 104) = v9;
LABEL_9:
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  v10 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 112) = v10;
  return a1;
}

void sub_239A84770(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_QWORD **)(v1 + 40);
  if (v6 == (_QWORD *)(v1 + 16))
  {
    v7 = 4;
    v6 = (_QWORD *)(v1 + 16);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_239A847E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF7FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A847F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF7FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A84824(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 200);
  sub_2397A1694((pthread_mutex_t *)(a1 + 200));
  v3 = *(unsigned __int8 *)(a1 + 80);
  sub_2397A16B4(v2);
  if (!v3)
    sub_239A848A8(a1 + 24);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 104));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 152));
  sub_2397A163C(v2);
  return sub_239A7BCF8(a1 + 32);
}

uint64_t sub_239A848A8(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v4;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    while (1)
    {
      sub_2397A16B4(v2);
      if (pthread_cond_signal((pthread_cond_t *)(a1 + 80)))
        break;
      sub_2397A1694(v2);
      if (*(uint64_t *)(a1 + 64) <= 0)
        goto LABEL_4;
    }
    v4 = 261;
LABEL_15:
    sub_239A444D4((uint64_t)"unknown file", v4, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
LABEL_4:
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    while (1)
    {
      sub_2397A16B4(v2);
      if (pthread_cond_signal((pthread_cond_t *)(a1 + 128)))
        break;
      sub_2397A1694(v2);
      if (*(uint64_t *)(a1 + 72) <= 0)
        return sub_2397A16B4(v2);
    }
    v4 = 287;
    goto LABEL_15;
  }
  return sub_2397A16B4(v2);
}

void sub_239A84A28(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

void sub_239A84A48(uint64_t a1)
{
  sub_239A84A6C(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A84A6C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t i;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250AF7FB0;
  if (*(_QWORD *)(a1 + 272))
  {
    v3 = *(_QWORD *)(a1 + 240);
    v2 = *(std::__shared_weak_count **)(a1 + 248);
    if (!v2)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (v6)
    {
LABEL_7:
      if (v3)
        goto LABEL_10;
      goto LABEL_8;
    }
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!v3)
LABEL_8:
      sub_2397A3758(*(_QWORD *)(a1 + 272));
  }
LABEL_10:
  v7 = *(_QWORD *)(a1 + 288);
  if (v7)
    sub_239A848A8(v7);
  while (1)
  {
    v42[0] = &off_250AF83A0;
    v43 = v42;
    sub_2397A1694((pthread_mutex_t *)(a1 + 344));
    v8 = *(_QWORD *)(a1 + 328);
    if (!v8)
    {
      if (!v43)
        sub_2394172E0();
      (*(void (**)(_QWORD *))(*v43 + 48))(v43);
    }
    sub_2397A16B4((pthread_mutex_t *)(a1 + 344));
    v9 = v43;
    if (v43 == v42)
    {
      v9 = v42;
      v10 = 4;
    }
    else
    {
      if (!v43)
        goto LABEL_20;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_20:
    if (!v8)
      break;
    sub_2397A186C(1);
  }
  v11 = *(_QWORD *)(a1 + 256);
  if (v11)
  {
    sub_2397A195C(v11);
    v12 = *(std::__shared_weak_count **)(a1 + 264);
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  if (*(_QWORD *)(a1 + 288))
  {
    v15 = *(std::__shared_weak_count **)(a1 + 296);
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  if (*(_QWORD *)(a1 + 328))
  {
    v18 = *(_QWORD **)(a1 + 320);
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        operator delete(v18);
        v18 = v19;
      }
      while (v19);
    }
    *(_QWORD *)(a1 + 320) = 0;
    v20 = *(_QWORD *)(a1 + 312);
    if (v20)
    {
      for (i = 0; i != v20; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  sub_2397A163C((pthread_mutex_t *)(a1 + 344));
  v22 = *(_QWORD **)(a1 + 320);
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  v24 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v24)
    operator delete(v24);
  v25 = *(std::__shared_weak_count **)(a1 + 296);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(std::__shared_weak_count **)(a1 + 280);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(std::__shared_weak_count **)(a1 + 264);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *(std::__shared_weak_count **)(a1 + 248);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *(_QWORD **)(a1 + 200);
  if (v37 == (_QWORD *)(a1 + 176))
  {
    v38 = 4;
    v37 = (_QWORD *)(a1 + 176);
LABEL_69:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  else if (v37)
  {
    v38 = 5;
    goto LABEL_69;
  }
  v39 = *(_QWORD **)(a1 + 168);
  if (v39 == (_QWORD *)(a1 + 144))
  {
    v40 = 4;
    v39 = (_QWORD *)(a1 + 144);
LABEL_74:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  else if (v39)
  {
    v40 = 5;
    goto LABEL_74;
  }
  return sub_239A7E444(a1);
}

void sub_239A84E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

void sub_239A84E98()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A84EAC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250AF83A0;
  return result;
}

void sub_239A84ED0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250AF83A0;
}

void sub_239A84EEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF7EE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A84EFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF7EE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A84F2C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_239A84F3C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_QWORD *)a1 = &off_250AF4B30;
  sub_239467C88(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 56);
    v2 = *(uint64_t **)(a1 + 64);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 72) = 0;
    if (v2 != (uint64_t *)(a1 + 56))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 56));
    }
  }
  v6 = *(_QWORD **)(a1 + 24);
  while (v6)
  {
    v9 = v6;
    v6 = (_QWORD *)*v6;
    v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    operator delete(v9);
  }
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_239A85030(uint64_t a1)
{
  sub_239A84F3C(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A85054(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF4E38;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A850B0(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF4E38;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A8511C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  *v2 = &off_250AF4E38;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
LABEL_6:
  v2[5] = *(_QWORD *)(a1 + 40);
  return v2;
}

void sub_239A85198(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A851AC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = &off_250AF4E38;
  v4 = a2 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      a2[4] = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  a2[5] = *(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *sub_239A85224(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A85258(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *sub_239A852A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = a1 + 8;
    if (v1 == v3)
    {
      v10 = v9;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    }
  }
  else
  {
    v10 = 0;
  }
  v4 = v2 + 176;
  if ((_QWORD *)(v2 + 176) != v9)
  {
    v5 = v10;
    v6 = *(_QWORD *)(v2 + 200);
    if (v10 == v9)
    {
      if (v6 == v4)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v2 + 200) + 24))(*(_QWORD *)(v2 + 200), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 200) + 32))(*(_QWORD *)(v2 + 200));
        *(_QWORD *)(v2 + 200) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, uint64_t))(v11[0] + 24))(v11, v2 + 176);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v9[0] + 24))(v9, v2 + 176);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(v2 + 200);
      }
      *(_QWORD *)(v2 + 200) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v2 + 176, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 200) + 32))(*(_QWORD *)(v2 + 200));
      *(_QWORD *)(v2 + 200) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(v2 + 200);
      *(_QWORD *)(v2 + 200) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_239A8549C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

_QWORD *sub_239A854A8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF4DF0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A85504(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF4DF0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A85570(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  *v2 = &off_250AF4DF0;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
LABEL_6:
  v2[5] = *(_QWORD *)(a1 + 40);
  return v2;
}

void sub_239A855EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A85600(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = &off_250AF4DF0;
  v4 = a2 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      a2[4] = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  a2[5] = *(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *sub_239A85678(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A856AC(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *sub_239A856FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = a1 + 8;
    if (v1 == v3)
    {
      v10 = v9;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    }
  }
  else
  {
    v10 = 0;
  }
  v4 = v2 + 144;
  if ((_QWORD *)(v2 + 144) != v9)
  {
    v5 = v10;
    v6 = *(_QWORD *)(v2 + 168);
    if (v10 == v9)
    {
      if (v6 == v4)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v2 + 168) + 24))(*(_QWORD *)(v2 + 168), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 168) + 32))(*(_QWORD *)(v2 + 168));
        *(_QWORD *)(v2 + 168) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, uint64_t))(v11[0] + 24))(v11, v2 + 144);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v9[0] + 24))(v9, v2 + 144);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(v2 + 168);
      }
      *(_QWORD *)(v2 + 168) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v2 + 144, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 168) + 32))(*(_QWORD *)(v2 + 168));
      *(_QWORD *)(v2 + 168) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(v2 + 168);
      *(_QWORD *)(v2 + 168) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_239A858F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_239A85900(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239A85924(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  int *v3;
  BOOL v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int8x8_t v35;
  uint8x8_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  int8x8_t v43;
  uint8x8_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t *v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v90;
  char v91;
  __int128 v92;
  __int128 v93;
  char v94;
  _BYTE v95[24];
  _BYTE *v96;
  _BYTE v97[24];
  _BYTE *v98;
  _QWORD v99[3];
  _QWORD *v100;
  _BYTE v101[24];
  _BYTE *v102;
  _BYTE v103[24];
  _BYTE *v104;
  _BYTE v105[24];
  _BYTE *v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int **)(v1 + 288);
  if (v2)
  {
    sub_239A86680((uint64_t)&v93, v2);
    v3 = (int *)v93;
    if ((_QWORD)v93)
      v4 = v94 == 0;
    else
      v4 = 1;
    if (!v4)
    {
      v8 = (_QWORD *)(v1 + 304);
      while (2)
      {
        v10 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
        *(_QWORD *)&v92 = v3;
        *((_QWORD *)&v92 + 1) = *((_QWORD *)&v93 + 1);
        if (*((_QWORD *)&v93 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = *v3;
        switch(*v3)
        {
          case 0:
            if (v10)
            {
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v15 = __ldxr(p_shared_owners);
              while (__stxr(v15 + 1, p_shared_owners));
              v16 = *((_QWORD *)v3 + 1);
              do
                v17 = __ldxr(p_shared_owners);
              while (__stxr(v17 + 1, p_shared_owners));
            }
            else
            {
              v16 = *((_QWORD *)v3 + 1);
            }
            v106 = 0;
            v50 = operator new(0x20uLL);
            *v50 = &off_250AF4BB0;
            v50[1] = v3;
            v50[2] = v10;
            v50[3] = v1;
            v106 = v50;
            v51 = sub_239A86878(v1, v16, (uint64_t)v105);
            v52 = v106;
            if (v106 == v105)
            {
              v52 = v105;
              v53 = 4;
            }
            else
            {
              if (!v106)
                goto LABEL_82;
              v53 = 5;
            }
            (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_82:
            if ((v51 & 1) == 0)
              sub_239A869D0(*(unsigned int **)(v1 + 288), &v92);
            if (v10)
            {
              v58 = (unint64_t *)&v10->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              goto LABEL_166;
            }
            goto LABEL_168;
          case 1:
            if (v10)
            {
              v29 = (unint64_t *)&v10->__shared_owners_;
              do
                v30 = __ldxr(v29);
              while (__stxr(v30 + 1, v29));
              v31 = *((unsigned __int8 *)v3 + 72);
              v32 = *((_QWORD *)v3 + 6);
              do
                v33 = __ldxr(v29);
              while (__stxr(v33 + 1, v29));
              if (!v31)
              {
LABEL_77:
                v104 = 0;
                v54 = operator new(0x20uLL);
                *v54 = &off_250AF4C40;
                v54[1] = v3;
                v54[2] = v10;
                v54[3] = v1;
                v104 = v54;
                v55 = sub_239A86878(v1, v32, (uint64_t)v103);
                v56 = v104;
                if (v104 == v103)
                {
                  v56 = v103;
                  v57 = 4;
LABEL_160:
                  (*(void (**)(void))(*v56 + 8 * v57))();
                }
                else if (v104)
                {
                  v57 = 5;
                  goto LABEL_160;
                }
                if ((v55 & 1) == 0)
                  sub_239A869D0(*(unsigned int **)(v1 + 288), &v92);
                goto LABEL_163;
              }
            }
            else
            {
              v32 = *((_QWORD *)v3 + 6);
              if (!*((_BYTE *)v3 + 72))
                goto LABEL_77;
            }
            v102 = 0;
            v34 = operator new(0x20uLL);
            *v34 = &off_250AF4C40;
            v34[1] = v3;
            v34[2] = v10;
            v34[3] = v1;
            v102 = v34;
            sub_2397A1694((pthread_mutex_t *)(v1 + 344));
            v35 = *(int8x8_t *)(v1 + 312);
            if (!*(_QWORD *)&v35)
              goto LABEL_151;
            v36 = (uint8x8_t)vcnt_s8(v35);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              v37 = v32;
              if (*(_QWORD *)&v35 <= v32)
                v37 = v32 % *(_QWORD *)&v35;
            }
            else
            {
              v37 = (*(_QWORD *)&v35 - 1) & v32;
            }
            v71 = *(_QWORD **)(*v8 + 8 * v37);
            if (!v71 || (v72 = (_QWORD *)*v71) == 0)
            {
LABEL_151:
              v76 = 0;
              goto LABEL_152;
            }
            if (v36.u32[0] < 2uLL)
            {
              v73 = *(_QWORD *)&v35 - 1;
              while (1)
              {
                v75 = v72[1];
                if (v75 == v32)
                {
                  if (v72[2] == v32)
                    goto LABEL_184;
                }
                else if ((v75 & v73) != v37)
                {
                  goto LABEL_151;
                }
                v72 = (_QWORD *)*v72;
                if (!v72)
                  goto LABEL_151;
              }
            }
            while (1)
            {
              v74 = v72[1];
              if (v74 == v32)
                break;
              if (v74 >= *(_QWORD *)&v35)
                v74 %= *(_QWORD *)&v35;
              if (v74 != v37)
                goto LABEL_151;
LABEL_141:
              v72 = (_QWORD *)*v72;
              if (!v72)
                goto LABEL_151;
            }
            if (v72[2] != v32)
              goto LABEL_141;
LABEL_184:
            if (!v102)
              sub_2394172E0();
            (*(void (**)(_BYTE *))(*(_QWORD *)v102 + 48))(v102);
            v76 = 1;
LABEL_152:
            sub_2397A16B4((pthread_mutex_t *)(v1 + 344));
            v77 = v102;
            if (v102 == v101)
            {
              v77 = v101;
              v78 = 4;
LABEL_156:
              (*(void (**)(void))(*v77 + 8 * v78))();
            }
            else if (v102)
            {
              v78 = 5;
              goto LABEL_156;
            }
            if ((v76 & 1) == 0)
            {
              sub_239A444D4((uint64_t)"unknown file", 793, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
LABEL_163:
            if (v10)
            {
              v79 = (unint64_t *)&v10->__shared_owners_;
              do
                v59 = __ldaxr(v79);
              while (__stlxr(v59 - 1, v79));
              goto LABEL_166;
            }
LABEL_168:
            sub_239A86680((uint64_t)&v90, *(unsigned int **)(v1 + 288));
            v80 = v90;
            v90 = 0uLL;
            v81 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
            v93 = v80;
            if (v81)
            {
              v82 = (unint64_t *)&v81->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            v94 = v91;
            v84 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
            if (!*((_QWORD *)&v90 + 1))
              goto LABEL_177;
            v85 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
              v87 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
              if (*((_QWORD *)&v92 + 1))
              {
LABEL_178:
                v88 = (unint64_t *)&v87->__shared_owners_;
                do
                  v89 = __ldaxr(v88);
                while (__stlxr(v89 - 1, v88));
                if (!v89)
                {
                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                  std::__shared_weak_count::__release_weak(v87);
                }
              }
            }
            else
            {
LABEL_177:
              v87 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
              if (*((_QWORD *)&v92 + 1))
                goto LABEL_178;
            }
            v3 = (int *)v93;
            if ((_QWORD)v93)
              v9 = v94 == 0;
            else
              v9 = 1;
            if (v9)
              break;
            continue;
          case 2:
            if (v10)
            {
              v24 = (unint64_t *)&v10->__shared_owners_;
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
              v26 = *((_QWORD *)v3 + 14);
              do
                v27 = __ldxr(v24);
              while (__stxr(v27 + 1, v24));
            }
            else
            {
              v26 = *((_QWORD *)v3 + 14);
            }
            v100 = 0;
            v42 = operator new(0x20uLL);
            *v42 = &off_250AF4CD0;
            v42[1] = v3;
            v42[2] = v10;
            v42[3] = v1;
            v100 = v42;
            *(_QWORD *)&v90 = v26;
            sub_2397A1694((pthread_mutex_t *)(v1 + 344));
            v43 = *(int8x8_t *)(v1 + 312);
            if (!*(_QWORD *)&v43)
              goto LABEL_122;
            v44 = (uint8x8_t)vcnt_s8(v43);
            v44.i16[0] = vaddlv_u8(v44);
            if (v44.u32[0] > 1uLL)
            {
              v45 = v26;
              if (*(_QWORD *)&v43 <= v26)
                v45 = v26 % *(_QWORD *)&v43;
            }
            else
            {
              v45 = (*(_QWORD *)&v43 - 1) & v26;
            }
            v62 = *(_QWORD **)(*v8 + 8 * v45);
            if (!v62)
              goto LABEL_122;
            v63 = (_QWORD *)*v62;
            if (!v63)
              goto LABEL_122;
            if (v44.u32[0] < 2uLL)
            {
              v64 = *(_QWORD *)&v43 - 1;
              while (1)
              {
                v66 = v63[1];
                if (v66 == v26)
                {
                  if (v63[2] == v26)
                    goto LABEL_121;
                }
                else if ((v66 & v64) != v45)
                {
                  goto LABEL_122;
                }
                v63 = (_QWORD *)*v63;
                if (!v63)
                  goto LABEL_122;
              }
            }
            while (1)
            {
              v65 = v63[1];
              if (v65 == v26)
              {
                if (v63[2] == v26)
                {
LABEL_121:
                  v67 = 0;
                  goto LABEL_123;
                }
              }
              else
              {
                if (v65 >= *(_QWORD *)&v43)
                  v65 %= *(_QWORD *)&v43;
                if (v65 != v45)
                {
LABEL_122:
                  sub_239465800(v1 + 304, (unint64_t *)&v90, &v90);
                  sub_239A7798C(*(_QWORD *)(v1 + 272), v99);
                  v67 = 1;
LABEL_123:
                  sub_2397A16B4((pthread_mutex_t *)(v1 + 344));
                  v68 = v100;
                  if (v100 == v99)
                  {
                    v68 = v99;
                    v69 = 4;
LABEL_127:
                    (*(void (**)(void))(*v68 + 8 * v69))();
                  }
                  else if (v100)
                  {
                    v69 = 5;
                    goto LABEL_127;
                  }
                  if ((v67 & 1) == 0)
                    sub_239A869D0(*(unsigned int **)(v1 + 288), &v92);
                  if (v10)
                  {
                    v70 = (unint64_t *)&v10->__shared_owners_;
                    do
                      v59 = __ldaxr(v70);
                    while (__stlxr(v59 - 1, v70));
                    goto LABEL_166;
                  }
                  goto LABEL_168;
                }
              }
              v63 = (_QWORD *)*v63;
              if (!v63)
                goto LABEL_122;
            }
          case 3:
            v90 = *(_OWORD *)(v1 + 208);
            v28 = *((_QWORD *)v3 + 24);
            if (v28)
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v28 + 48))(v28, &v90);
            goto LABEL_168;
          default:
            if (v13 != 99)
            {
              if (v13 != 100)
                goto LABEL_168;
              if (v10)
              {
                v18 = (unint64_t *)&v10->__shared_owners_;
                do
                  v19 = __ldxr(v18);
                while (__stxr(v19 + 1, v18));
                do
                  v20 = __ldxr(v18);
                while (__stxr(v20 + 1, v18));
              }
              v96 = 0;
              v46 = operator new(0x20uLL);
              *v46 = &off_250AF4D60;
              v46[1] = v3;
              v46[2] = v10;
              v46[3] = v1;
              v96 = v46;
              sub_2397A1694((pthread_mutex_t *)(v1 + 344));
              v47 = *(_QWORD *)(v1 + 328);
              if (!v47)
              {
                if (!v96)
                  sub_2394172E0();
                (*(void (**)(_BYTE *))(*(_QWORD *)v96 + 48))(v96);
              }
              sub_2397A16B4((pthread_mutex_t *)(v1 + 344));
              v48 = v96;
              if (v96 == v95)
              {
                v48 = v95;
                v49 = 4;
              }
              else
              {
                if (!v96)
                {
LABEL_98:
                  if (v47)
                    sub_239A869D0(*(unsigned int **)(v1 + 288), &v92);
                  if (!v10)
                    goto LABEL_168;
                  v61 = (unint64_t *)&v10->__shared_owners_;
                  do
                    v59 = __ldaxr(v61);
                  while (__stlxr(v59 - 1, v61));
                  goto LABEL_166;
                }
                v49 = 5;
              }
              (*(void (**)(void))(*v48 + 8 * v49))();
              goto LABEL_98;
            }
            if (v10)
            {
              v21 = (unint64_t *)&v10->__shared_owners_;
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
              do
                v23 = __ldxr(v21);
              while (__stxr(v23 + 1, v21));
            }
            v98 = 0;
            v38 = operator new(0x20uLL);
            *v38 = &off_250AF4D18;
            v38[1] = v3;
            v38[2] = v10;
            v38[3] = v1;
            v98 = v38;
            sub_2397A1694((pthread_mutex_t *)(v1 + 344));
            v39 = *(_QWORD *)(v1 + 328);
            if (!v39)
            {
              if (!v98)
                sub_2394172E0();
              (*(void (**)(_BYTE *))(*(_QWORD *)v98 + 48))(v98);
            }
            sub_2397A16B4((pthread_mutex_t *)(v1 + 344));
            v40 = v98;
            if (v98 == v97)
            {
              v40 = v97;
              v41 = 4;
            }
            else
            {
              if (!v98)
              {
LABEL_90:
                if (v39)
                  sub_239A869D0(*(unsigned int **)(v1 + 288), &v92);
                if (!v10)
                  goto LABEL_168;
                v60 = (unint64_t *)&v10->__shared_owners_;
                do
                  v59 = __ldaxr(v60);
                while (__stlxr(v59 - 1, v60));
LABEL_166:
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                  std::__shared_weak_count::__release_weak(v10);
                }
                goto LABEL_168;
              }
              v41 = 5;
            }
            (*(void (**)(void))(*v40 + 8 * v41))();
            goto LABEL_90;
        }
        break;
      }
    }
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
    if (*((_QWORD *)&v93 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_239A86234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  std::__shared_weak_count *v34;
  pthread_mutex_t *v35;
  char *v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;

  sub_2397A16B4(v35);
  v37 = a34;
  if (a34 == &a31)
  {
    v38 = 4;
    v37 = &a31;
  }
  else
  {
    if (!a34)
    {
LABEL_6:
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (a14)
      {
        v41 = (unint64_t *)&a14->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
          std::__shared_weak_count::__release_weak(a14);
        }
      }
      if (a16)
      {
        v43 = (unint64_t *)&a16->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
          std::__shared_weak_count::__release_weak(a16);
        }
      }
      _Unwind_Resume(a1);
    }
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
  goto LABEL_6;
}

uint64_t sub_239A86680(uint64_t a1, unsigned int *a2)
{
  pthread_mutex_t *v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v17;

  v4 = (pthread_mutex_t *)(a2 + 44);
  sub_2397A1694((pthread_mutex_t *)(a2 + 44));
  if (*((_QWORD *)a2 + 6))
  {
LABEL_4:
    v5 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + ((*((_QWORD *)a2 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *((_QWORD *)a2 + 5));
    v17 = v5;
    if (*((_QWORD *)&v5 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v8 = *(std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)a2 + 2)
                                                    + ((*((_QWORD *)a2 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *((_QWORD *)a2 + 5)
                                        + 8);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    v11 = *((_QWORD *)a2 + 6) - 1;
    v12 = *((_QWORD *)a2 + 5) + 1;
    *((_QWORD *)a2 + 5) = v12;
    *((_QWORD *)a2 + 6) = v11;
    if (v12 >= 0x200)
    {
      operator delete(**((void ***)a2 + 2));
      *((_QWORD *)a2 + 2) += 8;
      v11 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a2 + 5) -= 256;
    }
    if (v11 < *a2)
      pthread_cond_signal((pthread_cond_t *)(a2 + 20));
    *(_OWORD *)a1 = v17;
    if (*((_QWORD *)&v17 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      *(_BYTE *)(a1 + 16) = 1;
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    else
    {
      *(_BYTE *)(a1 + 16) = 1;
    }
  }
  else
  {
    while (!*((_BYTE *)a2 + 56))
    {
      ++*((_QWORD *)a2 + 9);
      pthread_cond_wait((pthread_cond_t *)(a2 + 32), v4);
      --*((_QWORD *)a2 + 9);
      if (*((_QWORD *)a2 + 6))
        goto LABEL_4;
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
  return sub_2397A16B4(v4);
}

void sub_239A8684C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;

  sub_239A4D7C0((uint64_t)&a9);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_239A86878(uint64_t a1, unint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (pthread_mutex_t *)(a1 + 344);
  sub_2397A1694((pthread_mutex_t *)(a1 + 344));
  v7 = *(int8x8_t *)(a1 + 312);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = a2;
      if (*(_QWORD *)&v7 <= a2)
        v9 = a2 % *(_QWORD *)&v7;
    }
    else
    {
      v9 = (*(_QWORD *)&v7 - 1) & a2;
    }
    v10 = *(_QWORD **)(*(_QWORD *)(a1 + 304) + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == a2)
            {
              if (v11[2] == a2)
                goto LABEL_21;
            }
            else if ((v14 & v12) != v9)
            {
              goto LABEL_22;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == a2)
          {
            if (v11[2] == a2)
            {
LABEL_21:
              v15 = 0;
              goto LABEL_24;
            }
          }
          else
          {
            if (v13 >= *(_QWORD *)&v7)
              v13 %= *(_QWORD *)&v7;
            if (v13 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_22:
  v16 = *(_QWORD *)(a3 + 24);
  if (!v16)
    sub_2394172E0();
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
  v15 = 1;
LABEL_24:
  sub_2397A16B4(v6);
  return v15;
}

void sub_239A869B8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A869D0(unsigned int *a1, _OWORD *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  void *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  _OWORD *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  size_t v103;
  char *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  int64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 *v114;
  _OWORD *v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  void *v119;
  _OWORD *v120;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  v5 = *((_QWORD *)a1 + 6);
  if (v5 >= *a1)
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      v5 = *((_QWORD *)a1 + 6);
      if (v5 < *a1)
        goto LABEL_4;
    }
    goto LABEL_5;
  }
LABEL_4:
  if (*((_BYTE *)a1 + 56))
  {
LABEL_5:
    v6 = 0;
    goto LABEL_100;
  }
  v7 = (char *)*((_QWORD *)a1 + 3);
  v8 = (char *)*((_QWORD *)a1 + 2);
  v9 = v7 - v8;
  if (v7 == v8)
    v10 = 0;
  else
    v10 = 32 * (v7 - v8) - 1;
  v11 = *((_QWORD *)a1 + 5);
  v12 = v11 + v5;
  if (v10 == v11 + v5)
  {
    if (v11 >= 0x100)
    {
      *((_QWORD *)a1 + 5) = v11 - 256;
      v13 = v8 + 8;
      v14 = *(_QWORD *)v8;
      *((_QWORD *)a1 + 2) = v8 + 8;
      if (*((char **)a1 + 4) != v7)
      {
LABEL_92:
        *(_QWORD *)v7 = v14;
        goto LABEL_93;
      }
      v15 = (char *)*((_QWORD *)a1 + 1);
      if (v13 > v15)
      {
        v16 = (v13 - v15) >> 3;
        if (v16 >= -1)
          v17 = v16 + 1;
        else
          v17 = v16 + 2;
        v18 = v17 >> 1;
        v19 = -v18;
        v20 = &v13[-8 * v18];
        v21 = v7 - v13;
        if (v7 == v13)
        {
          v22 = v7;
        }
        else
        {
          memmove(&v13[-8 * v18], v13, v7 - v13);
          v22 = (char *)*((_QWORD *)a1 + 2);
        }
        v7 = &v20[v21];
        *((_QWORD *)a1 + 2) = &v22[8 * v19];
        *((_QWORD *)a1 + 3) = &v20[v21];
        goto LABEL_92;
      }
      if (v7 == v15)
        v33 = 1;
      else
        v33 = (v7 - v15) >> 2;
      if (!(v33 >> 61))
      {
        v34 = (char *)operator new(8 * v33);
        v35 = &v34[8 * (v33 >> 2)];
        v37 = v7 - v13;
        v36 = v7 == v13;
        v7 = v35;
        if (v36)
          goto LABEL_90;
        v7 = &v35[v37 & 0xFFFFFFFFFFFFFFF8];
        v38 = v37 - 8;
        if (v38 >= 0x38)
        {
          v81 = &v34[8 * (v33 >> 2)];
          v39 = v81;
          if ((unint64_t)(v81 - v13) >= 0x20)
          {
            v82 = (v38 >> 3) + 1;
            v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
            v39 = &v35[v83];
            v84 = (__int128 *)(v8 + 24);
            v85 = v81 + 16;
            v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v87 = *v84;
              *(v85 - 1) = *(v84 - 1);
              *v85 = v87;
              v84 += 2;
              v85 += 2;
              v86 -= 4;
            }
            while (v86);
            if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_90:
              *((_QWORD *)a1 + 1) = v34;
              *((_QWORD *)a1 + 2) = v35;
              *((_QWORD *)a1 + 3) = v7;
              *((_QWORD *)a1 + 4) = &v34[8 * v33];
              if (v15)
              {
                operator delete(v15);
                v7 = (char *)*((_QWORD *)a1 + 3);
              }
              goto LABEL_92;
            }
            v13 += v83;
          }
        }
        else
        {
          v39 = &v34[8 * (v33 >> 2)];
        }
        do
        {
          v88 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v39 = v88;
          v39 += 8;
        }
        while (v39 != v7);
        goto LABEL_90;
      }
LABEL_130:
      sub_239418A80();
    }
    v23 = v9 >> 3;
    v24 = (char *)*((_QWORD *)a1 + 4);
    v25 = (char *)*((_QWORD *)a1 + 1);
    v26 = v24 - v25;
    if (v9 >> 3 < (unint64_t)((v24 - v25) >> 3))
    {
      if (v24 != v7)
      {
        *(_QWORD *)v7 = operator new(0x1000uLL);
LABEL_93:
        *((_QWORD *)a1 + 3) += 8;
LABEL_94:
        v8 = (char *)*((_QWORD *)a1 + 2);
        v5 = *((_QWORD *)a1 + 6);
        v12 = v5 + *((_QWORD *)a1 + 5);
        goto LABEL_95;
      }
      v40 = operator new(0x1000uLL);
      v41 = v8;
      if (v25 != v8)
      {
LABEL_105:
        *((_QWORD *)v41 - 1) = v40;
        v94 = (char *)*((_QWORD *)a1 + 2);
        v95 = (char *)*((_QWORD *)a1 + 3);
        *((_QWORD *)a1 + 2) = v94 - 8;
        v96 = *((_QWORD *)v94 - 1);
        *((_QWORD *)a1 + 2) = v94;
        if (v95 != *((char **)a1 + 4))
        {
LABEL_106:
          *(_QWORD *)v95 = v96;
          goto LABEL_93;
        }
        v97 = (char *)*((_QWORD *)a1 + 1);
        if (v94 > v97)
        {
          v98 = (v94 - v97) >> 3;
          if (v98 >= -1)
            v99 = v98 + 1;
          else
            v99 = v98 + 2;
          v100 = v99 >> 1;
          v101 = -v100;
          v102 = &v94[-8 * v100];
          v103 = v95 - v94;
          if (v103)
          {
            memmove(&v94[-8 * v100], v94, v103);
            v94 = (char *)*((_QWORD *)a1 + 2);
          }
          v104 = &v102[v103];
          *((_QWORD *)a1 + 2) = &v94[8 * v101];
          *((_QWORD *)a1 + 3) = v104;
          *(_QWORD *)v104 = v96;
          goto LABEL_93;
        }
        if (v95 == v97)
          v105 = 1;
        else
          v105 = (v95 - v97) >> 2;
        if (v105 >> 61)
          goto LABEL_130;
        v106 = (char *)operator new(8 * v105);
        v107 = &v106[8 * (v105 >> 2)];
        v108 = v95 - v94;
        v36 = v95 == v94;
        v95 = v107;
        if (!v36)
        {
          v95 = &v107[v108 & 0xFFFFFFFFFFFFFFF8];
          v109 = v108 - 8;
          if (v109 < 0x38)
          {
            v110 = &v106[8 * (v105 >> 2)];
            goto LABEL_126;
          }
          v111 = &v106[8 * (v105 >> 2)];
          v110 = v111;
          if ((unint64_t)(v111 - v94) < 0x20)
          {
            do
            {
LABEL_126:
              v118 = *(_QWORD *)v94;
              v94 += 8;
              *(_QWORD *)v110 = v118;
              v110 += 8;
            }
            while (v110 != v95);
            goto LABEL_127;
          }
          v112 = (v109 >> 3) + 1;
          v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
          v110 = &v107[v113];
          v114 = (__int128 *)(v94 + 16);
          v115 = v111 + 16;
          v116 = v112 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v117 = *v114;
            *(v115 - 1) = *(v114 - 1);
            *v115 = v117;
            v114 += 2;
            v115 += 2;
            v116 -= 4;
          }
          while (v116);
          if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v94 += v113;
            goto LABEL_126;
          }
        }
LABEL_127:
        *((_QWORD *)a1 + 1) = v106;
        *((_QWORD *)a1 + 2) = v107;
        *((_QWORD *)a1 + 3) = v95;
        *((_QWORD *)a1 + 4) = &v106[8 * v105];
        if (v97)
        {
          operator delete(v97);
          v95 = (char *)*((_QWORD *)a1 + 3);
        }
        goto LABEL_106;
      }
      if (v7 == v8)
        v42 = 1;
      else
        v42 = v26 >> 2;
      if (v42 >> 61)
        goto LABEL_130;
      v43 = (char *)operator new(8 * v42);
      v44 = (v42 + 3) >> 2;
      v41 = &v43[8 * v44];
      v45 = &v43[8 * v42];
      v46 = v41;
      if (v7 != v8)
      {
        v46 = &v41[(v7 - v25) & 0xFFFFFFFFFFFFFFF8];
        v47 = v7 - v25 - 8;
        v48 = &v43[8 * v44];
        v49 = v8;
        if (v47 > 0x37)
        {
          v50 = &v43[8 * v44];
          v48 = v50;
          v49 = v8;
          if ((unint64_t)(v50 - v25) >= 0x20)
          {
            v51 = (v47 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v48 = &v41[v52];
            v53 = (__int128 *)(v8 + 16);
            v54 = v50 + 16;
            v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v56 = *v53;
              *(v54 - 1) = *(v53 - 1);
              *v54 = v56;
              v53 += 2;
              v54 += 2;
              v55 -= 4;
            }
            while (v55);
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            {
              *((_QWORD *)a1 + 1) = v43;
              *((_QWORD *)a1 + 2) = v41;
              *((_QWORD *)a1 + 3) = v46;
              *((_QWORD *)a1 + 4) = v45;
LABEL_104:
              operator delete(v8);
              v41 = (char *)*((_QWORD *)a1 + 2);
              goto LABEL_105;
            }
            v49 = &v8[v52];
          }
        }
        do
        {
          v93 = *(_QWORD *)v49;
          v49 += 8;
          *(_QWORD *)v48 = v93;
          v48 += 8;
        }
        while (v48 != v46);
      }
      *((_QWORD *)a1 + 1) = v43;
      *((_QWORD *)a1 + 2) = v41;
      *((_QWORD *)a1 + 3) = v46;
      *((_QWORD *)a1 + 4) = v45;
      if (!v8)
        goto LABEL_105;
      goto LABEL_104;
    }
    if (v24 == v25)
      v27 = 1;
    else
      v27 = v26 >> 2;
    if (v27 >> 61)
      goto LABEL_130;
    v28 = (char *)operator new(8 * v27);
    v120 = a2;
    v29 = operator new(0x1000uLL);
    v30 = &v28[8 * v23];
    v31 = &v28[8 * v27];
    if (v23 == v27)
    {
      v119 = v29;
      if (v9 < 1)
      {
        if (v7 == v8)
          v57 = 1;
        else
          v57 = v9 >> 2;
        if (v57 >> 61)
          sub_239418A80();
        v30 = (char *)operator new(8 * v57);
        v31 = &v30[8 * v57];
        operator delete(v28);
        v8 = (char *)*((_QWORD *)a1 + 2);
        v7 = (char *)*((_QWORD *)a1 + 3);
        v28 = v30;
      }
      else
      {
        v32 = v23 + 2;
        if (v23 >= -1)
          v32 = v23 + 1;
        v30 -= 8 * (v32 >> 1);
      }
      v29 = v119;
    }
    *(_QWORD *)v30 = v29;
    v58 = v30 + 8;
    if (v7 == v8)
    {
      v59 = v30;
      v60 = v30 + 8;
LABEL_57:
      v61 = (void *)*((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = v28;
      *((_QWORD *)a1 + 2) = v59;
      *((_QWORD *)a1 + 3) = v60;
      *((_QWORD *)a1 + 4) = v31;
      a2 = v120;
      if (v61)
        operator delete(v61);
      goto LABEL_94;
    }
    while (v30 != v28)
    {
      v62 = v30;
      v60 = v58;
LABEL_60:
      v63 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v62 - 1) = v63;
      v59 = v62 - 8;
      v58 = v60;
      v30 = v59;
      if (v7 == *((char **)a1 + 2))
        goto LABEL_57;
    }
    if (v58 < v31)
    {
      v64 = (v31 - v58) >> 3;
      if (v64 >= -1)
        v65 = v64 + 1;
      else
        v65 = v64 + 2;
      v60 = &v58[8 * (v65 >> 1)];
      v62 = &v30[8 * (v65 >> 1)];
      if (v58 == v30)
      {
        v28 = v58;
      }
      else
      {
        memmove(&v30[8 * (v65 >> 1)], v30, v58 - v30);
        v28 = v30;
      }
      goto LABEL_60;
    }
    if (v31 == v30)
      v66 = 1;
    else
      v66 = (v31 - v30) >> 2;
    if (v66 >> 61)
      sub_239418A80();
    v67 = (char *)operator new(8 * v66);
    v28 = v67;
    v68 = (v66 + 3) >> 2;
    v62 = &v67[8 * v68];
    v60 = v62;
    v69 = v58 - v30;
    if (v58 != v30)
    {
      v60 = &v62[v69 & 0xFFFFFFFFFFFFFFF8];
      v70 = v69 - 8;
      v71 = &v67[8 * v68];
      v72 = v30;
      if (v70 >= 0x38)
      {
        v73 = 8 * v68;
        v71 = &v67[8 * v68];
        v72 = v30;
        if ((unint64_t)(v71 - v30) >= 0x20)
        {
          v74 = (v70 >> 3) + 1;
          v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          v71 = &v62[v75];
          v76 = (__int128 *)(v30 + 16);
          v77 = &v67[v73 + 16];
          v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v79 = *v76;
            *((_OWORD *)v77 - 1) = *(v76 - 1);
            *(_OWORD *)v77 = v79;
            v76 += 2;
            v77 += 32;
            v78 -= 4;
          }
          while (v78);
          if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_80;
          v72 = &v30[v75];
        }
      }
      do
      {
        v80 = *(_QWORD *)v72;
        v72 += 8;
        *(_QWORD *)v71 = v80;
        v71 += 8;
      }
      while (v71 != v60);
    }
LABEL_80:
    v31 = &v67[8 * v66];
    operator delete(v30);
    goto LABEL_60;
  }
LABEL_95:
  v89 = *a2;
  *(_OWORD *)(*(_QWORD *)&v8[(v12 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v12) = *a2;
  if (*((_QWORD *)&v89 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
    v5 = *((_QWORD *)a1 + 6);
  }
  *((_QWORD *)a1 + 6) = v5 + 1;
  pthread_cond_signal((pthread_cond_t *)(a1 + 32));
  v6 = 1;
LABEL_100:
  sub_2397A16B4(v4);
  return v6;
}

void sub_239A87144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  pthread_mutex_t *v9;
  void *v10;

  operator delete(__p);
  operator delete(v10);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A87194(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF4D60;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A871F8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF4D60;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A8726C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF4D60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A872C4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF4D60;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A872FC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A87354(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t sub_239A873AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned __int16 i;
  uint64_t v27;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  pthread_cond_t v37;
  pthread_cond_t v38;
  pthread_mutex_t v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v1 = a1;
  v42 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 24);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  sub_2397A1618(&v39);
  v30 = 0x7FFFFFFF;
  pthread_cond_init(&v37, 0);
  pthread_cond_init(&v38, 0);
  v3 = (_QWORD *)v2[3];
  if (!v3)
    goto LABEL_44;
  v29 = v1;
  v4 = 0;
  do
  {
    v6 = v3[2];
    v5 = v3[3];
    v7 = (std::__shared_weak_count *)v3[4];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    if (!v5 || !v2[25])
    {
      if (!v7)
        goto LABEL_4;
      goto LABEL_36;
    }
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v12 = v2[34];
      if (!*(_QWORD *)(v12 + 272))
      {
LABEL_50:
        sub_239A444D4((uint64_t)"unknown file", 546, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v13 = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v15 = *(unsigned int **)(v12 + 272);
      do
        v16 = __ldxr(v13);
      while (__stxr(v16 + 1, v13));
    }
    else
    {
      v15 = *(unsigned int **)(v2[34] + 272);
      if (!v15)
        goto LABEL_50;
    }
    v41 = 0;
    v17 = operator new(0x38uLL);
    *v17 = &off_250AF4DA8;
    v17[1] = v6;
    v17[2] = v5;
    v17[3] = v7;
    v17[4] = &v30;
    v17[5] = v2;
    v41 = v17;
    sub_2394D0CC4(v15, (uint64_t)v40);
    v18 = v41;
    if (v41 == v40)
    {
      v18 = v40;
      v19 = 4;
      goto LABEL_26;
    }
    if (v41)
    {
      v19 = 5;
LABEL_26:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
    if (!v7)
    {
      ++v4;
      goto LABEL_4;
    }
    v20 = (unint64_t *)&v7->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    ++v4;
    v22 = (unint64_t *)&v7->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_36:
    v24 = (unint64_t *)&v7->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_4:
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  v1 = v29;
  if (v4 && (unsigned __int16)sub_2395BFB54(&v30) >= 0x100u)
  {
    do
      --v4;
    while (v4 && (unsigned __int16)sub_2395BFB54(&v30) > 0xFFu);
  }
LABEL_44:
  sub_2395C2A4C((uint64_t)&v30);
  for (i = sub_2395BFB54(&v30); i >= 0x100u; i = sub_2395BFB54(&v30))
    ;
  v27 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 256);
  if (v27)
  {
    v40[0] = 1;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v27 + 48))(v27, v40);
  }
  return sub_2395C29C4((uint64_t)&v30);
}

void sub_239A87704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_2395C29C4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A878F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF4DA8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A87958(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF4DA8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239A879CC(__n128 *a1)
{
  __n128 *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 result;

  v2 = (__n128 *)operator new(0x38uLL);
  v3 = a1->n128_u64[1];
  v4 = a1[1].n128_u64[0];
  v2->n128_u64[0] = (unint64_t)&off_250AF4DA8;
  v2->n128_u64[1] = v3;
  v5 = a1[1].n128_u64[1];
  v2[1].n128_u64[0] = v4;
  v2[1].n128_u64[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = a1[2];
  v2[2] = result;
  return result;
}

__n128 sub_239A87A28(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = a1->n128_u64[1];
  v3 = a1[1].n128_u64[0];
  a2->n128_u64[0] = (unint64_t)&off_250AF4DA8;
  a2->n128_u64[1] = v2;
  v4 = a1[1].n128_u64[1];
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u64[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = a1[2];
  a2[2] = result;
  return result;
}

void sub_239A87A64(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A87ABC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t sub_239A87B14(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  v2 = a1[5];
  v3 = (std::__shared_weak_count *)a1[3];
  v12 = a1[2];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v14 = a1[1];
  v6 = *(_QWORD *)(v2 + 200);
  if (!v6)
    sub_2394172E0();
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v12, &v14);
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (unsigned int *)a1[4];
  LOBYTE(v14) = 1;
  return sub_2395BFE44(v10, &v14);
}

void sub_239A87BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239A87C18(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF4D18;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A87C7C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF4D18;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A87CF0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF4D18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A87D48(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF4D18;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A87D80(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A87DD8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t sub_239A87E30(uint64_t a1)
{
  uint64_t result;

  sub_239467C88(*(_QWORD *)(a1 + 24));
  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 224);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

_QWORD *sub_239A87E74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF4CD0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A87ED8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF4CD0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A87F4C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF4CD0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A87FA4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF4CD0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A87FDC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A88034(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t sub_239A8808C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 8);
  v4 = (std::__shared_weak_count *)v3[16];
  v15 = v3[15];
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v3 = *(_QWORD **)(a1 + 8);
  }
  v17 = v3[14];
  v7 = *(_QWORD *)(v2 + 200);
  if (!v7)
    sub_2394172E0();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v15, &v17);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 160);
  if (v13)
  {
    LOBYTE(v17) = v8;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v17);
    v12 = *(_QWORD *)(a1 + 8);
  }
  return sub_239A881C0(v2, *(_QWORD *)(v12 + 112));
}

void sub_239A8817C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A881C0(uint64_t a1, unint64_t a2)
{
  pthread_mutex_t *v4;
  int8x8_t v5;
  _QWORD *v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *__p;

  v4 = (pthread_mutex_t *)(a1 + 344);
  sub_2397A1694((pthread_mutex_t *)(a1 + 344));
  v5 = *(int8x8_t *)(a1 + 312);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 304);
    v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v8 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v8 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*v6 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == a2)
            {
              if (v10[2] == a2)
                goto LABEL_22;
            }
            else if ((v13 & v11) != v8)
            {
              return sub_2397A16B4(v4);
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              return sub_2397A16B4(v4);
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == a2)
          {
            if (v10[2] == a2)
            {
LABEL_22:
              sub_239A78378((uint64_t)&__p, v6, v10);
              if (__p)
                operator delete(__p);
              return sub_2397A16B4(v4);
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v5)
              v12 %= *(_QWORD *)&v5;
            if (v12 != v8)
              return sub_2397A16B4(v4);
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  return sub_2397A16B4(v4);
}

_QWORD *sub_239A882F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF4C40;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A88354(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF4C40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A883C8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF4C40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A88420(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF4C40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A88458(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A884B0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_239A88508(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD **v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  float v43;
  float v44;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  size_t prime;
  unint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  int8x8_t v72;
  _QWORD *v73;
  uint8x8_t v74;
  unint64_t v75;
  _QWORD **v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  char v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  __int128 v128;
  void *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  _QWORD v132[3];
  _QWORD *v133;
  void *__p[9];
  char v135;
  uint64_t v136;
  void *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD v145[3];
  _QWORD *v146;
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)a1[1];
  if (!v2[7])
  {
    v10 = v2[13];
    if (v10)
    {
      LOBYTE(__p[0]) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 48))(v10, __p);
    }
    return;
  }
  v4 = a1[3];
  std::mutex::lock((std::mutex *)(v4 + 80));
  v5 = (uint64_t *)(v4 + 8);
  v6 = v2[6];
  v7 = *(_QWORD *)(v4 + 16);
  if (!v7)
    goto LABEL_24;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  v1 = (std::__shared_weak_count *)v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v9 = v2[6];
    if (v6 >= v7)
      v9 = v6 % v7;
  }
  else
  {
    v9 = (v7 - 1) & v6;
  }
  v11 = *(_QWORD **)(*v5 + 8 * v9);
  if (!v11 || (v12 = (_QWORD *)*v11) == 0)
  {
LABEL_24:
    if ((unint64_t)(*(_QWORD *)(v4 + 32) + 1) > *(_QWORD *)(v4 + 48))
    {
      v16 = *(_QWORD *)(v4 + 72);
      if (v16)
      {
        v17 = *(uint64_t **)(v4 + 56);
        v6 = v17[2];
        if ((v7 & (v7 - 1)) != 0)
        {
          v25 = v17[2];
          if (v6 >= v7)
            v25 = v6 % v7;
          v18 = *(_QWORD **)(*v5 + 8 * v25);
          do
          {
            do
              v18 = (_QWORD *)*v18;
            while (v18[1] != v6);
          }
          while (v18[2] != v6);
        }
        else
        {
          v18 = *(_QWORD **)(*v5 + 8 * (v6 & (v7 - 1)));
          do
          {
            do
              v18 = (_QWORD *)*v18;
            while (v18[1] != v6);
          }
          while (v18[2] != v6);
        }
        v7 = v18[3];
        v1 = (std::__shared_weak_count *)v18[4];
        if (v1)
        {
          p_shared_owners = (unint64_t *)&v1->__shared_owners_;
          do
            v27 = __ldxr(p_shared_owners);
          while (__stxr(v27 + 1, p_shared_owners));
          v17 = *(uint64_t **)(v4 + 56);
          v16 = *(_QWORD *)(v4 + 72);
        }
        v28 = *v17;
        *(_QWORD *)(v28 + 8) = v17[1];
        *(_QWORD *)v17[1] = v28;
        *(_QWORD *)(v4 + 72) = v16 - 1;
        operator delete(v17);
        v29 = *(int8x8_t *)(v4 + 16);
        if (v29)
        {
          v30 = (uint8x8_t)vcnt_s8(v29);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            v31 = v6;
            if (v6 >= *(_QWORD *)&v29)
              v31 = v6 % *(_QWORD *)&v29;
          }
          else
          {
            v31 = (*(_QWORD *)&v29 - 1) & v6;
          }
          v32 = *v5;
          v33 = *(_QWORD ***)(*v5 + 8 * v31);
          if (v33)
          {
            v34 = *v33;
            if (*v33)
            {
              v35 = *(_QWORD *)&v29 - 1;
              if (v30.u32[0] < 2uLL)
              {
                while (1)
                {
                  v36 = v34[1];
                  if (v36 == v6)
                  {
                    if (v34[2] == v6)
                      goto LABEL_98;
                  }
                  else if ((v36 & v35) != v31)
                  {
                    goto LABEL_140;
                  }
                  v34 = (_QWORD *)*v34;
                  if (!v34)
                    goto LABEL_140;
                }
              }
              do
              {
                v37 = v34[1];
                if (v37 == v6)
                {
                  if (v34[2] == v6)
                  {
LABEL_98:
                    if (v30.u32[0] > 1uLL)
                    {
                      v50 = v6;
                      if (v6 >= *(_QWORD *)&v29)
                        v50 = v6 % *(_QWORD *)&v29;
                    }
                    else
                    {
                      v50 = v35 & v6;
                    }
                    v54 = *(_QWORD **)(v32 + 8 * v50);
                    do
                    {
                      v55 = v54;
                      v54 = (_QWORD *)*v54;
                    }
                    while (v54 != v34);
                    if (v55 == (_QWORD *)(v4 + 24))
                      goto LABEL_125;
                    v56 = v55[1];
                    if (v30.u32[0] > 1uLL)
                    {
                      if (v56 >= *(_QWORD *)&v29)
                        v56 %= *(_QWORD *)&v29;
                    }
                    else
                    {
                      v56 &= v35;
                    }
                    if (v56 != v50)
                    {
LABEL_125:
                      if (!*v34)
                        goto LABEL_126;
                      v57 = *(_QWORD *)(*v34 + 8);
                      if (v30.u32[0] > 1uLL)
                      {
                        if (v57 >= *(_QWORD *)&v29)
                          v57 %= *(_QWORD *)&v29;
                      }
                      else
                      {
                        v57 &= v35;
                      }
                      if (v57 != v50)
LABEL_126:
                        *(_QWORD *)(v32 + 8 * v50) = 0;
                    }
                    v58 = *v34;
                    v127 = v7;
                    if (*v34)
                    {
                      v59 = *(_QWORD *)(v58 + 8);
                      if (v30.u32[0] > 1uLL)
                      {
                        if (v59 >= *(_QWORD *)&v29)
                          v59 %= *(_QWORD *)&v29;
                      }
                      else
                      {
                        v59 &= v35;
                      }
                      if (v59 != v50)
                      {
                        *(_QWORD *)(*v5 + 8 * v59) = v55;
                        v58 = *v34;
                      }
                    }
                    *v55 = v58;
                    *v34 = 0;
                    --*(_QWORD *)(v4 + 32);
                    v60 = (std::__shared_weak_count *)v34[4];
                    if (v60)
                    {
                      v61 = (unint64_t *)&v60->__shared_owners_;
                      do
                        v62 = __ldaxr(v61);
                      while (__stlxr(v62 - 1, v61));
                      if (!v62)
                      {
                        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                        std::__shared_weak_count::__release_weak(v60);
                      }
                    }
                    operator delete(v34);
                    v7 = v127;
                    break;
                  }
                }
                else
                {
                  if (v37 >= *(_QWORD *)&v29)
                    v37 %= *(_QWORD *)&v29;
                  if (v37 != v31)
                    break;
                }
                v34 = (_QWORD *)*v34;
              }
              while (v34);
            }
          }
        }
LABEL_140:
        v63 = operator new(0x18uLL);
        v63[2] = v2[6];
        *v63 = v4 + 56;
        v64 = *(_QWORD **)(v4 + 64);
        v63[1] = v64;
        *v64 = v63;
        v65 = *(_QWORD *)(v4 + 72) + 1;
        *(_QWORD *)(v4 + 64) = v63;
        *(_QWORD *)(v4 + 72) = v65;
        sub_239A89CE0(v4 + 8, v2[6], v2[6], v2[7], v2[8]);
        if (v1)
        {
          v66 = (unint64_t *)&v1->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
          do
            v68 = __ldaxr(v66);
          while (__stlxr(v68 - 1, v66));
          v69 = 0;
          v22 = 0;
          if (!v68)
            goto LABEL_145;
          goto LABEL_147;
        }
      }
      else
      {
        v7 = v2[7];
        v1 = (std::__shared_weak_count *)v2[8];
        if (v1)
        {
          v23 = (unint64_t *)&v1->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
      }
      v22 = 0;
      goto LABEL_147;
    }
    v19 = operator new(0x18uLL);
    v19[2] = v6;
    *v19 = v4 + 56;
    v20 = *(_QWORD **)(v4 + 64);
    v19[1] = v20;
    *v20 = v19;
    v21 = *(_QWORD *)(v4 + 72) + 1;
    *(_QWORD *)(v4 + 64) = v19;
    *(_QWORD *)(v4 + 72) = v21;
    sub_239A89CE0(v4 + 8, v2[6], v2[6], v2[7], v2[8]);
    goto LABEL_32;
  }
  v13 = v7 - 1;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v14 = v12[1];
      if (v14 == v6)
      {
        if (v12[2] == v6)
          goto LABEL_67;
      }
      else if ((v14 & v13) != v9)
      {
        goto LABEL_24;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v15 = v12[1];
    if (v15 == v6)
      break;
    if (v15 >= v7)
      v15 %= v7;
    if (v15 != v9)
      goto LABEL_24;
LABEL_19:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_24;
  }
  if (v12[2] != v6)
    goto LABEL_19;
LABEL_67:
  if (v8.u32[0] > 1uLL)
  {
    v38 = v2[6];
    if (v6 >= v7)
      v38 = v6 % v7;
  }
  else
  {
    v38 = v13 & v6;
  }
  v39 = *(_QWORD ***)(*v5 + 8 * v38);
  if (v39)
  {
    v40 = *v39;
    if (*v39)
    {
      if (v8.u32[0] < 2uLL)
      {
        while (1)
        {
          v41 = v40[1];
          if (v41 == v6)
          {
            if (v40[2] == v6)
              goto LABEL_266;
          }
          else if ((v41 & v13) != v38)
          {
            goto LABEL_86;
          }
          v40 = (_QWORD *)*v40;
          if (!v40)
            goto LABEL_86;
        }
      }
      do
      {
        v42 = v40[1];
        if (v42 == v6)
        {
          if (v40[2] == v6)
            goto LABEL_266;
        }
        else
        {
          if (v42 >= v7)
            v42 %= v7;
          if (v42 != v38)
            break;
        }
        v40 = (_QWORD *)*v40;
      }
      while (v40);
    }
  }
LABEL_86:
  v40 = operator new(0x28uLL);
  *v40 = 0;
  v40[1] = v6;
  v40[3] = 0;
  v40[4] = 0;
  v40[2] = v6;
  v43 = (float)(unint64_t)(*(_QWORD *)(v4 + 32) + 1);
  v44 = *(float *)(v4 + 40);
  if ((float)(v44 * (float)v7) < v43)
  {
    v46 = v7 < 3 || (unint64_t)v1 > 1;
    v47 = v46 | (2 * v7);
    v48 = vcvtps_u32_f32(v43 / v44);
    if (v47 <= v48)
      prime = v48;
    else
      prime = v47;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(v4 + 16);
    }
    if (prime > v7)
      goto LABEL_103;
    if (prime < v7)
    {
      v51 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 32) / *(float *)(v4 + 40));
      if (v7 < 3 || (v52 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
      {
        v51 = std::__next_prime(v51);
      }
      else
      {
        v53 = 1 << -(char)__clz(v51 - 1);
        if (v51 >= 2)
          v51 = v53;
      }
      if (prime <= v51)
        prime = v51;
      if (prime < v7)
LABEL_103:
        sub_239A501C8(v4 + 8, prime);
    }
    v7 = *(_QWORD *)(v4 + 16);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v38 = v6 % v7;
      else
        v38 = v6;
    }
    else
    {
      v38 = (v7 - 1) & v6;
    }
  }
  v118 = *v5;
  v119 = *(_QWORD **)(*v5 + 8 * v38);
  if (v119)
  {
    *v40 = *v119;
    goto LABEL_264;
  }
  *v40 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v40;
  *(_QWORD *)(v118 + 8 * v38) = v4 + 24;
  if (*v40)
  {
    v120 = *(_QWORD *)(*v40 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v120 >= v7)
        v120 %= v7;
    }
    else
    {
      v120 &= v7 - 1;
    }
    v119 = (_QWORD *)(*v5 + 8 * v120);
LABEL_264:
    *v119 = v40;
  }
  ++*(_QWORD *)(v4 + 32);
LABEL_266:
  v122 = v2[7];
  v121 = v2[8];
  if (v121)
  {
    v123 = (unint64_t *)(v121 + 8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  v1 = (std::__shared_weak_count *)v40[4];
  v40[3] = v122;
  v40[4] = v121;
  if (!v1)
  {
LABEL_32:
    v6 = 0;
    v22 = 1;
    goto LABEL_147;
  }
  v125 = (unint64_t *)&v1->__shared_owners_;
  do
    v126 = __ldaxr(v125);
  while (__stlxr(v126 - 1, v125));
  v6 = 0;
  v69 = 1;
  v22 = 1;
  if (!v126)
  {
LABEL_145:
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
    v22 = v69;
  }
LABEL_147:
  std::mutex::unlock((std::mutex *)(v4 + 80));
  v70 = a1[1];
  if (*(_BYTE *)(v70 + 72))
  {
    v71 = *(_QWORD *)(v70 + 48);
    if (sub_2397A1B98((pthread_mutex_t *)(v4 + 344)))
    {
      sub_2397A16B4((pthread_mutex_t *)(v4 + 344));
      sub_239A444D4((uint64_t)"unknown file", 495, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v72 = *(int8x8_t *)(v4 + 312);
    if (v72)
    {
      v73 = (_QWORD *)(v4 + 304);
      v74 = (uint8x8_t)vcnt_s8(v72);
      v74.i16[0] = vaddlv_u8(v74);
      if (v74.u32[0] > 1uLL)
      {
        v75 = v71;
        if (*(_QWORD *)&v72 <= v71)
          v75 = v71 % *(_QWORD *)&v72;
      }
      else
      {
        v75 = (*(_QWORD *)&v72 - 1) & v71;
      }
      v76 = *(_QWORD ***)(*v73 + 8 * v75);
      if (v76)
      {
        v77 = *v76;
        if (*v76)
        {
          if (v74.u32[0] < 2uLL)
          {
            v78 = *(_QWORD *)&v72 - 1;
            while (1)
            {
              v80 = v77[1];
              if (v80 == v71)
              {
                if (v77[2] == v71)
                  goto LABEL_170;
              }
              else if ((v80 & v78) != v75)
              {
                goto LABEL_172;
              }
              v77 = (_QWORD *)*v77;
              if (!v77)
                goto LABEL_172;
            }
          }
          do
          {
            v79 = v77[1];
            if (v79 == v71)
            {
              if (v77[2] == v71)
              {
LABEL_170:
                sub_239A78378((uint64_t)__p, v73, v77);
                if (__p[0])
                  operator delete(__p[0]);
                break;
              }
            }
            else
            {
              if (v79 >= *(_QWORD *)&v72)
                v79 %= *(_QWORD *)&v72;
              if (v79 != v75)
                break;
            }
            v77 = (_QWORD *)*v77;
          }
          while (v77);
        }
      }
    }
  }
LABEL_172:
  if (!v22)
  {
    v81 = a1[1];
    if (!*(_QWORD *)(v4 + 200) || *(_QWORD *)(v81 + 48) == v6 && *(_BYTE *)(v81 + 72))
      goto LABEL_177;
    v86 = (std::__shared_weak_count *)a1[2];
    if (v86)
    {
      v87 = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    if (v1)
    {
      v89 = (unint64_t *)&v1->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    if (v86)
    {
      v91 = (unint64_t *)&v86->__shared_owners_;
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    if (v1)
    {
      v93 = (unint64_t *)&v1->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
    v146 = 0;
    v95 = operator new(0x40uLL);
    *v95 = &off_250AF4C88;
    v95[1] = v81;
    v95[2] = v86;
    v95[3] = v6;
    v95[4] = v7;
    v95[5] = v1;
    *((_BYTE *)v95 + 48) = 1;
    v95[7] = v4;
    v146 = v95;
    v96 = sub_239A82B00(v4, v6, v145);
    v97 = v146;
    if (v146 == v145)
    {
      v98 = 4;
      v97 = v145;
    }
    else
    {
      if (!v146)
        goto LABEL_205;
      v98 = 5;
    }
    (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_205:
    if ((v96 & 1) != 0)
    {
LABEL_237:
      if (v1)
      {
        v114 = (unint64_t *)&v1->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
          std::__shared_weak_count::__release_weak(v1);
        }
      }
      if (v86)
      {
        v116 = (unint64_t *)&v86->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      goto LABEL_179;
    }
    v129 = (void *)v6;
    v130 = v7;
    v131 = v1;
    if (v1)
    {
      v99 = (unint64_t *)&v1->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v101 = v132;
    v102 = a1[1];
    v103 = *(_QWORD *)(v102 + 104);
    if (v103)
    {
      if (v103 == v102 + 80)
      {
        v133 = v132;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v103 + 24))(v103, v132);
LABEL_214:
        LODWORD(__p[0]) = 2;
        __p[7] = 0;
        __p[8] = 0;
        __p[5] = 0;
        v135 = 0;
        v136 = 0;
        v137 = v129;
        v138 = v130;
        v139 = v131;
        if (v131)
        {
          v104 = &v131->__shared_owners_;
          do
            v105 = __ldxr((unint64_t *)v104);
          while (__stxr(v105 + 1, (unint64_t *)v104));
        }
        v106 = (uint64_t)v133;
        if (v133)
        {
          if (v133 == v132)
          {
            v141 = &v140;
            (*(void (**)(_QWORD *))(v132[0] + 24))(v132);
LABEL_222:
            v143 = 0;
            v144 = 0;
            __p[1] = v129;
            __p[6] = v129;
            v142 = 0;
            v137 = v129;
            v107 = operator new(0x120uLL);
            v107[1] = 0;
            v107[2] = 0;
            *v107 = &off_250AF31F8;
            *(_QWORD *)&v128 = sub_239A895A8((uint64_t)(v107 + 3), (uint64_t)__p);
            *((_QWORD *)&v128 + 1) = v107;
            sub_239A82E8C(__p);
            if (v133 == v132)
            {
              v108 = 4;
            }
            else
            {
              if (!v133)
                goto LABEL_227;
              v108 = 5;
              v101 = v133;
            }
            (*(void (**)(_QWORD *))(*v101 + 8 * v108))(v101);
LABEL_227:
            if (v131)
            {
              v109 = &v131->__shared_owners_;
              do
                v110 = __ldaxr((unint64_t *)v109);
              while (__stlxr(v110 - 1, (unint64_t *)v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
            sub_239A869D0(*(unsigned int **)(v4 + 288), &v128);
            v111 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
            if (*((_QWORD *)&v128 + 1))
            {
              v112 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            goto LABEL_237;
          }
          v106 = (*(uint64_t (**)(void))(*v133 + 16))();
        }
        v141 = (uint64_t *)v106;
        goto LABEL_222;
      }
      v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
    }
    v133 = (_QWORD *)v103;
    goto LABEL_214;
  }
  v81 = a1[1];
LABEL_177:
  v82 = *(_QWORD *)(v81 + 104);
  if (v82)
  {
    LOBYTE(__p[0]) = 1;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v82 + 48))(v82, __p);
  }
LABEL_179:
  if (v1)
    v83 = v22;
  else
    v83 = 1;
  if ((v83 & 1) == 0)
  {
    v84 = (unint64_t *)&v1->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A8920C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  std::mutex *v36;
  _QWORD *v37;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;

  v39 = (std::__shared_weak_count *)v37[4];
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(v37);
  std::mutex::unlock(v36);
  _Unwind_Resume(a1);
}

uint64_t sub_239A895A8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (!v5)
  {
    v4 = (_QWORD *)(a1 + 40);
    goto LABEL_5;
  }
  if (v5 != a2 + 16)
  {
    *(_QWORD *)(a1 + 40) = v5;
LABEL_5:
    *v4 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 40) = a1 + 16;
  (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
LABEL_7:
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = (_QWORD *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  if (!v7)
  {
    v6 = (_QWORD *)(a1 + 104);
    goto LABEL_11;
  }
  if (v7 != a2 + 80)
  {
    *(_QWORD *)(a1 + 104) = v7;
LABEL_11:
    *v6 = 0;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 104) = a1 + 80;
  (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
LABEL_13:
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v8 = (_QWORD *)(a2 + 160);
  v9 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  if (!v9)
  {
    v8 = (_QWORD *)(a1 + 160);
    goto LABEL_17;
  }
  if (v9 != a2 + 136)
  {
    *(_QWORD *)(a1 + 160) = v9;
LABEL_17:
    *v8 = 0;
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 160) = a1 + 136;
  (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8);
LABEL_19:
  v10 = (_QWORD *)(a2 + 192);
  v11 = *(_QWORD *)(a2 + 192);
  if (!v11)
  {
    v10 = (_QWORD *)(a1 + 192);
    goto LABEL_23;
  }
  if (v11 != a2 + 168)
  {
    *(_QWORD *)(a1 + 192) = v11;
LABEL_23:
    *v10 = 0;
    goto LABEL_25;
  }
  *(_QWORD *)(a1 + 192) = a1 + 168;
  (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
LABEL_25:
  v12 = (_QWORD *)(a2 + 224);
  v13 = *(_QWORD *)(a2 + 224);
  if (!v13)
  {
    v12 = (_QWORD *)(a1 + 224);
    goto LABEL_29;
  }
  if (v13 != a2 + 200)
  {
    *(_QWORD *)(a1 + 224) = v13;
LABEL_29:
    *v12 = 0;
    goto LABEL_31;
  }
  *(_QWORD *)(a1 + 224) = a1 + 200;
  (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 24))(*v12);
LABEL_31:
  v14 = *(_QWORD *)(a2 + 256);
  if (v14)
  {
    v15 = (_QWORD *)(a2 + 256);
    if (v14 == a2 + 232)
    {
      *(_QWORD *)(a1 + 256) = a1 + 232;
      (*(void (**)(_QWORD))(*(_QWORD *)*v15 + 24))(*v15);
      return a1;
    }
    *(_QWORD *)(a1 + 256) = v14;
  }
  else
  {
    v15 = (_QWORD *)(a1 + 256);
  }
  *v15 = 0;
  return a1;
}

void sub_239A897C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF31F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A897D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF31F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A89804(uint64_t a1)
{
  return sub_239A82E8C((_QWORD *)(a1 + 24));
}

uint64_t sub_239A89810(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_250AF4C88;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_239A898B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_250AF4C88;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A89968(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x40uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_250AF4C88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = 0;
  *((_BYTE *)result + 48) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    v7 = *(_QWORD *)(a1 + 32);
    result[3] = *(_QWORD *)(a1 + 24);
    result[4] = v7;
    v8 = *(_QWORD *)(a1 + 40);
    result[5] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    *((_BYTE *)result + 48) = 1;
  }
  result[7] = *(_QWORD *)(a1 + 56);
  return result;
}

uint64_t sub_239A89A00(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_250AF4C88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (*(_BYTE *)(result + 48))
  {
    v6 = *(_QWORD *)(result + 32);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
    *(_QWORD *)(a2 + 32) = v6;
    v7 = *(_QWORD *)(result + 40);
    *(_QWORD *)(a2 + 40) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_BYTE *)(a2 + 48) = 1;
  }
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(result + 56);
  return result;
}

void sub_239A89A78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (!*(_BYTE *)(a1 + 48))
    goto LABEL_6;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  else
  {
LABEL_6:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_239A89B20(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((_BYTE *)__p + 48))
  {
    v2 = (std::__shared_weak_count *)__p[5];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(__p);
}

uint64_t sub_239A89BB8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;

  v2 = a1[7];
  v3 = (std::__shared_weak_count *)a1[5];
  v13 = a1[4];
  v14 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v15 = a1[3];
  v6 = *(_QWORD *)(v2 + 200);
  if (!v6)
    sub_2394172E0();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v13, &v15);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(_QWORD *)(a1[1] + 104);
  if (v11)
  {
    LOBYTE(v15) = v7;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v15);
  }
  return sub_239A881C0(v2, a1[3]);
}

void sub_239A89C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239A89CE0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v11 <= a2)
        v5 = a2 % v11;
    }
    else
    {
      v5 = (v11 - 1) & a2;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == a2)
            {
              if (v14[2] == a2)
                return;
            }
            else if ((v16 & (v11 - 1)) != v5)
            {
              goto LABEL_22;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_22;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == a2)
          {
            if (v14[2] == a2)
              return;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v5)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_22:
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x28uLL);
  *v18 = 0;
  v18[1] = a2;
  v18[2] = a3;
  v18[3] = a4;
  v18[4] = a5;
  if (a5)
  {
    v19 = (unint64_t *)(a5 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v27)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v27)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v27 < 3uLL || (v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < *(_QWORD *)&v27)
LABEL_37:
        sub_239A501C8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= a2)
        v5 = a2 % v11;
      else
        v5 = a2;
    }
    else
    {
      v5 = (v11 - 1) & a2;
    }
  }
  v31 = *(_QWORD *)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v32)
  {
    *v18 = *v32;
LABEL_61:
    *v32 = v18;
    goto LABEL_62;
  }
  *v18 = *v17;
  *v17 = v18;
  *(_QWORD *)(v31 + 8 * v5) = v17;
  if (*v18)
  {
    v33 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11)
        v33 %= v11;
    }
    else
    {
      v33 &= v11 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
}

void sub_239A89FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239A89FF8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF4BB0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A8A05C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF4BB0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A8A0D0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF4BB0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A8A128(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF4BB0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A8A160(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A8A1B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_239A8A210(_QWORD *a1)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 1;
  v3 = a1[1];
  v4 = a1[3];
  ++*(_QWORD *)(v4 + 208);
  std::mutex::lock((std::mutex *)(v4 + 80));
  v5 = *(int8x8_t *)(v4 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v3 + 8);
    v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = *(_QWORD *)(v3 + 8);
      if (v6 >= *(_QWORD *)&v5)
        v8 = v6 % *(_QWORD *)&v5;
    }
    else
    {
      v8 = (*(_QWORD *)&v5 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)(v4 + 8) + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v6 == v13)
            {
              if (v10[2] == v6)
                goto LABEL_47;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v6 == v12)
          {
            if (v10[2] == v6)
            {
LABEL_47:
              v28 = v10[3];
              v15 = (std::__shared_weak_count *)v10[4];
              if (v15)
              {
                p_shared_owners = (unint64_t *)&v15->__shared_owners_;
                do
                  v30 = __ldxr(p_shared_owners);
                while (__stxr(v30 + 1, p_shared_owners));
              }
              std::mutex::unlock((std::mutex *)(v4 + 80));
              ++*(_QWORD *)(v4 + 216);
              v31 = *(_QWORD *)v2;
              v32 = *(_QWORD *)(*(_QWORD *)v2 + 40);
              if (v32)
              {
                v40 = v28;
                v41 = v15;
                if (v15)
                {
                  v33 = (unint64_t *)&v15->__shared_owners_;
                  do
                    v34 = __ldxr(v33);
                  while (__stxr(v34 + 1, v33));
                  v32 = *(_QWORD *)(v31 + 40);
                  v39 = 1;
                  if (!v32)
                    sub_2394172E0();
                }
                else
                {
                  v39 = 1;
                }
                (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v32 + 48))(v32, &v40, &v39);
                v35 = v41;
                if (v41)
                {
                  v36 = (unint64_t *)&v41->__shared_owners_;
                  do
                    v37 = __ldaxr(v36);
                  while (__stlxr(v37 - 1, v36));
                  if (!v37)
                  {
                    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                    std::__shared_weak_count::__release_weak(v35);
                  }
                }
              }
              if (v15)
              {
                v38 = (unint64_t *)&v15->__shared_owners_;
                do
                  v22 = __ldaxr(v38);
                while (__stlxr(v22 - 1, v38));
LABEL_44:
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              return;
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v5)
              v12 %= *(_QWORD *)&v5;
            if (v12 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  std::mutex::unlock((std::mutex *)(v4 + 80));
  v14 = *(_QWORD *)v2;
  if (*(_QWORD *)(v4 + 168))
  {
    v15 = (std::__shared_weak_count *)a1[2];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = *(_QWORD *)(*(_QWORD *)v2 + 8);
      do
        v19 = __ldxr(v16);
      while (__stxr(v19 + 1, v16));
    }
    else
    {
      v18 = *(_QWORD *)(v14 + 8);
    }
    v23 = (uint64_t *)operator new(0x20uLL);
    *v23 = (uint64_t)&off_250AF4BF8;
    v23[1] = v14;
    v23[2] = (uint64_t)v15;
    v23[3] = v4;
    v42 = v23;
    v24 = sub_239A82B00(v4, v18, &v40);
    v25 = v42;
    if (v42 == &v40)
    {
      v26 = 4;
      v25 = &v40;
    }
    else
    {
      if (!v42)
        goto LABEL_39;
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_39:
    if ((v24 & 1) == 0)
    {
      sub_239A869D0(*(unsigned int **)(v4 + 288), v2);
      --*(_QWORD *)(v4 + 208);
    }
    if (v15)
    {
      v27 = (unint64_t *)&v15->__shared_owners_;
      do
        v22 = __ldaxr(v27);
      while (__stlxr(v22 - 1, v27));
      goto LABEL_44;
    }
    return;
  }
  v20 = *(_QWORD *)(v14 + 40);
  if (v20)
  {
    v40 = 0;
    v41 = 0;
    v39 = 1;
    (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v20 + 48))(v20, &v40, &v39);
    v15 = v41;
    if (v41)
    {
      v21 = (unint64_t *)&v41->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      goto LABEL_44;
    }
  }
}

void sub_239A8A598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239A8A6D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_250AF4BF8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_239A8A734(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_250AF4BF8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A8A7A8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_250AF4BF8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_239A8A800(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_250AF4BF8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_239A8A838(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239A8A890(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_239A8A8E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32[2];
  std::__shared_weak_count *v33;
  char v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = *(_QWORD *)(v2 + 168);
  if (!v3)
    sub_2394172E0();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(&v30, v3, &v37);
  v4 = *(_QWORD *)(a1 + 8);
  if (v30)
  {
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      v37 = v30;
      v38 = v31;
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        v5 = *(_QWORD *)(v4 + 40);
        LOBYTE(v32[0]) = 1;
        if (!v5)
          sub_2394172E0();
      }
      else
      {
        LOBYTE(v32[0]) = 1;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v37, v32);
      v12 = v38;
      if (v38)
      {
        v13 = (unint64_t *)&v38->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    v32[0] = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v32[1] = v30;
    v33 = v31;
    if (v31)
    {
      v15 = (unint64_t *)&v31->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v34 = 1;
    v17 = v35;
    v36 = 0;
    sub_239A8AD20((uint64_t)&v37, v32);
    v18 = operator new(0x120uLL);
    v18[1] = 0;
    v18[2] = 0;
    *v18 = &off_250AF31F8;
    *(_QWORD *)&v29 = sub_239A895A8((uint64_t)(v18 + 3), (uint64_t)&v37);
    *((_QWORD *)&v29 + 1) = v18;
    sub_239A82E8C(&v37);
    if (v36 == v35)
    {
      v19 = 4;
    }
    else
    {
      if (!v36)
        goto LABEL_30;
      v19 = 5;
      v17 = v36;
    }
    (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_30:
    v20 = v33;
    if (v33)
    {
      v21 = (unint64_t *)&v33->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    sub_239A869D0(*(unsigned int **)(v2 + 288), &v29);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    goto LABEL_40;
  }
  v8 = *(_QWORD *)(v4 + 40);
  if (v8)
  {
    v37 = 0;
    v38 = 0;
    LOBYTE(v32[0]) = 1;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v37, v32);
    v9 = v38;
    if (v38)
    {
      v10 = (unint64_t *)&v38->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  sub_239A881C0(v2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
LABEL_40:
  v26 = v31;
  if (v31)
  {
    v27 = (unint64_t *)&v31->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_239A8ABE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,std::__shared_weak_count *a22)
{
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  if (a12)
  {
    v25 = (unint64_t *)&a12->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A8AD20(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_DWORD *)a1 = 1;
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  v6 = a2[2];
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 24);
  v9 = a2[7];
  if (v9)
  {
    if ((uint64_t *)v9 == a2 + 4)
    {
      *(_QWORD *)(a1 + 104) = a1 + 80;
      (*(void (**)(uint64_t))(*(_QWORD *)a2[7] + 24))(a2[7]);
      goto LABEL_9;
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  *(_QWORD *)(a1 + 104) = v9;
LABEL_9:
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  v10 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 112) = v10;
  return a1;
}

void sub_239A8ADE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_QWORD **)(v1 + 40);
  if (v6 == (_QWORD *)(v1 + 16))
  {
    v7 = 4;
    v6 = (_QWORD *)(v1 + 16);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_239A8AE5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF4B50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A8AE6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF4B50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A8AE9C(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 200);
  sub_2397A1694((pthread_mutex_t *)(a1 + 200));
  v3 = *(unsigned __int8 *)(a1 + 80);
  sub_2397A16B4(v2);
  if (!v3)
    sub_239A8AF20(a1 + 24);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 104));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 152));
  sub_2397A163C(v2);
  return sub_239A7BCF8(a1 + 32);
}

uint64_t sub_239A8AF20(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v4;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    while (1)
    {
      sub_2397A16B4(v2);
      if (pthread_cond_signal((pthread_cond_t *)(a1 + 80)))
        break;
      sub_2397A1694(v2);
      if (*(uint64_t *)(a1 + 64) <= 0)
        goto LABEL_4;
    }
    v4 = 261;
LABEL_15:
    sub_239A444D4((uint64_t)"unknown file", v4, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
LABEL_4:
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    while (1)
    {
      sub_2397A16B4(v2);
      if (pthread_cond_signal((pthread_cond_t *)(a1 + 128)))
        break;
      sub_2397A1694(v2);
      if (*(uint64_t *)(a1 + 72) <= 0)
        return sub_2397A16B4(v2);
    }
    v4 = 287;
    goto LABEL_15;
  }
  return sub_2397A16B4(v2);
}

void sub_239A8B0A0(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

void sub_239A8B0C0(uint64_t a1)
{
  sub_239A8B0E4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A8B0E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t i;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250AF4B10;
  if (*(_QWORD *)(a1 + 272))
  {
    v3 = *(_QWORD *)(a1 + 240);
    v2 = *(std::__shared_weak_count **)(a1 + 248);
    if (!v2)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (v6)
    {
LABEL_7:
      if (v3)
        goto LABEL_10;
      goto LABEL_8;
    }
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!v3)
LABEL_8:
      sub_2397A3758(*(_QWORD *)(a1 + 272));
  }
LABEL_10:
  v7 = *(_QWORD *)(a1 + 288);
  if (v7)
    sub_239A8AF20(v7);
  while (1)
  {
    v42[0] = &off_250AF4E80;
    v43 = v42;
    sub_2397A1694((pthread_mutex_t *)(a1 + 344));
    v8 = *(_QWORD *)(a1 + 328);
    if (!v8)
    {
      if (!v43)
        sub_2394172E0();
      (*(void (**)(_QWORD *))(*v43 + 48))(v43);
    }
    sub_2397A16B4((pthread_mutex_t *)(a1 + 344));
    v9 = v43;
    if (v43 == v42)
    {
      v9 = v42;
      v10 = 4;
    }
    else
    {
      if (!v43)
        goto LABEL_20;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_20:
    if (!v8)
      break;
    sub_2397A186C(1);
  }
  v11 = *(_QWORD *)(a1 + 256);
  if (v11)
  {
    sub_2397A195C(v11);
    v12 = *(std::__shared_weak_count **)(a1 + 264);
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  if (*(_QWORD *)(a1 + 288))
  {
    v15 = *(std::__shared_weak_count **)(a1 + 296);
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  if (*(_QWORD *)(a1 + 328))
  {
    v18 = *(_QWORD **)(a1 + 320);
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        operator delete(v18);
        v18 = v19;
      }
      while (v19);
    }
    *(_QWORD *)(a1 + 320) = 0;
    v20 = *(_QWORD *)(a1 + 312);
    if (v20)
    {
      for (i = 0; i != v20; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  sub_2397A163C((pthread_mutex_t *)(a1 + 344));
  v22 = *(_QWORD **)(a1 + 320);
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  v24 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v24)
    operator delete(v24);
  v25 = *(std::__shared_weak_count **)(a1 + 296);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(std::__shared_weak_count **)(a1 + 280);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(std::__shared_weak_count **)(a1 + 264);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *(std::__shared_weak_count **)(a1 + 248);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *(_QWORD **)(a1 + 200);
  if (v37 == (_QWORD *)(a1 + 176))
  {
    v38 = 4;
    v37 = (_QWORD *)(a1 + 176);
LABEL_69:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  else if (v37)
  {
    v38 = 5;
    goto LABEL_69;
  }
  v39 = *(_QWORD **)(a1 + 168);
  if (v39 == (_QWORD *)(a1 + 144))
  {
    v40 = 4;
    v39 = (_QWORD *)(a1 + 144);
LABEL_74:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  else if (v39)
  {
    v40 = 5;
    goto LABEL_74;
  }
  return sub_239A84F3C(a1);
}

void sub_239A8B494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

void sub_239A8B510()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A8B524()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250AF4E80;
  return result;
}

void sub_239A8B548(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250AF4E80;
}

_QWORD *sub_239A8B564(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF4AC8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A8B5C0(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF4AC8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A8B62C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_250AF4AC8;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_239A8B6A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A8B6B4(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_250AF4AC8;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *sub_239A8B728(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A8B75C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_239A8B7AC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  char v11;
  char v12;
  _QWORD v13[3];
  std::__fs::filesystem::path __p;
  char v15;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 32);
  v13[0] = *a3;
  if (!v5)
    sub_2394172E0();
  (*(void (**)(std::__fs::filesystem::path *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(&__p, v5, v13);
  if (!v15)
  {
    sub_239A444D4((uint64_t)"unknown file", 2051, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_23979C50C(v4, v13);
  if (!v15)
    sub_2394875CC();
  v10 = 1064514355;
  v11 = 0;
  v12 = 0;
  v6 = sub_23961F718((uint64_t)v13, &__p, 4, (unsigned int *)&v10);
  sub_23979B260(v13);
  if (v15 && SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_239A8B8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (a21 && a20 < 0)
    operator delete(__p);
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239A8B94C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF4A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A8B95C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF4A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239A8B98C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_239A8B99C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF4A48;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A8B9F8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF4A48;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

char *sub_239A8BA64(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_250AF4A48;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      *((_QWORD *)v2 + 4) = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  *((_QWORD *)v2 + 4) = v4;
LABEL_6:
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return v2;
}

void sub_239A8BAE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_239A8BAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  *(_QWORD *)a2 = &off_250AF4A48;
  v4 = a2 + 8;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      *(_QWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  result = *(__n128 *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

_QWORD *sub_239A8BB7C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A8BBB0(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

BOOL sub_239A8BC00(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  _BOOL8 v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[16];
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  char v27;
  char v28;
  char v29;
  void *__p;
  char v31;
  char v32;
  uint64_t v33;
  _BYTE v34[408];
  _QWORD v35[20];

  v35[19] = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v33 = *a3;
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    sub_2394172E0();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(&__p, v6, &v33);
  if (v32)
  {
    v7 = MEMORY[0x24BEDB840];
    v8 = MEMORY[0x24BEDB840] + 64;
    v9 = (uint64_t *)MEMORY[0x24BEDB7E8];
    v10 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
    v11 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
    v35[0] = MEMORY[0x24BEDB840] + 64;
    v33 = v10;
    *(_QWORD *)&v34[*(_QWORD *)(v10 - 24) - 8] = v11;
    v12 = (std::ios_base *)&v34[*(_QWORD *)(v33 - 24) - 8];
    std::ios_base::init(v12, v34);
    v12[1].__vftable = 0;
    v12[1].__fmtflags_ = -1;
    v33 = v7 + 24;
    v35[0] = v8;
    MEMORY[0x23B83DC80](v34);
    if (!v32)
      sub_2394875CC();
    std::ofstream::open();
    if ((v34[*(_QWORD *)(v33 - 24) + 24] & 5) != 0)
    {
      v13 = 0;
    }
    else
    {
      v17 = *(_OWORD *)(a1 + 40);
      v18 = *(_QWORD *)(a1 + 56);
      sub_23961C874(v5, &v33, 4, (uint64_t)&v17, (uint64_t)v19);
      v13 = v29 != 0;
      if (!v29 && v28)
      {
        if (v27)
        {
          if (v26 < 0)
            operator delete(v25);
          if (v24 < 0)
            operator delete(v23);
        }
        if (v22 && v21 < 0)
          operator delete(v20);
      }
    }
    v33 = *v9;
    *(_QWORD *)&v34[*(_QWORD *)(v33 - 24) - 8] = v9[3];
    MEMORY[0x23B83DC8C](v34);
    std::ostream::~ostream();
    MEMORY[0x23B83E250](v35);
    if (v32 && v31 < 0)
      operator delete(__p);
  }
  else
  {
    v13 = 0;
  }
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v13;
}

void sub_239A8BE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36)
{
  std::__shared_weak_count *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t *p_shared_owners;
  unint64_t v42;

  a36 = *v39;
  *(uint64_t *)((char *)&a36 + *(_QWORD *)(a36 - 24)) = v39[3];
  MEMORY[0x23B83DC8C](v38);
  std::ostream::~ostream();
  MEMORY[0x23B83E250](v37);
  if (a35 && a34 < 0)
    operator delete(__p);
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_239A8BF28(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250AF4A00;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239A8BF84(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250AF4A00;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

char *sub_239A8BFF0(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_250AF4A00;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      *((_QWORD *)v2 + 4) = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  *((_QWORD *)v2 + 4) = v4;
LABEL_6:
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return v2;
}

void sub_239A8C074(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_239A8C088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  *(_QWORD *)a2 = &off_250AF4A00;
  v4 = a2 + 8;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      *(_QWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  result = *(__n128 *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

_QWORD *sub_239A8C108(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_239A8C13C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_239A8C18C(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[144];
  void *__p;
  char v23;
  char v24;
  _QWORD v25[2];
  _BYTE v26[408];
  _QWORD v27[20];

  v27[19] = *MEMORY[0x24BDAC8D0];
  v25[0] = *a2;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    sub_2394172E0();
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(&__p, v5, v25);
  if (v24)
  {
    v6 = MEMORY[0x24BEDB838];
    v7 = MEMORY[0x24BEDB838] + 64;
    v8 = (_QWORD *)MEMORY[0x24BEDB7E0];
    v9 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
    v10 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
    v27[0] = MEMORY[0x24BEDB838] + 64;
    v25[0] = v9;
    *(_QWORD *)((char *)v25 + *(_QWORD *)(v9 - 24)) = v10;
    v25[1] = 0;
    v11 = (std::ios_base *)((char *)v25 + *(_QWORD *)(v25[0] - 24));
    std::ios_base::init(v11, v26);
    v11[1].__vftable = 0;
    v11[1].__fmtflags_ = -1;
    v25[0] = v6 + 24;
    v27[0] = v7;
    MEMORY[0x23B83DC80](v26);
    if (!v24)
      sub_2394875CC();
    std::ifstream::open();
    if ((v26[*(_QWORD *)(v25[0] - 24) + 16] & 5) != 0)
    {
      *a3 = 0;
      a3[1] = 0;
    }
    else
    {
      v19 = *(_OWORD *)(a1 + 40);
      v20 = *(_QWORD *)(a1 + 56);
      sub_23961BD14(v25, 0, (uint64_t)&v19, (uint64_t)v21);
      if (v21[136])
      {
        v12 = sub_239620FD4((uint64_t)v21);
        v13 = operator new(0xA0uLL);
        v13[1] = 0;
        v13[2] = 0;
        *v13 = &off_250ADD758;
        v13[3] = &off_250ADBEA0;
        *((_OWORD *)v13 + 2) = *(_OWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        v14 = *(_OWORD *)(v12 + 88);
        v15 = *(_OWORD *)(v12 + 104);
        v16 = *(_OWORD *)(v12 + 72);
        v13[18] = *(_QWORD *)(v12 + 120);
        *((_OWORD *)v13 + 7) = v14;
        *((_OWORD *)v13 + 8) = v15;
        *((_OWORD *)v13 + 6) = v16;
        v17 = *(_OWORD *)(v12 + 56);
        v18 = *(_OWORD *)(v12 + 24);
        *((_OWORD *)v13 + 4) = *(_OWORD *)(v12 + 40);
        *((_OWORD *)v13 + 5) = v17;
        *((_OWORD *)v13 + 3) = v18;
        *((_WORD *)v13 + 76) = *(_WORD *)(v12 + 128);
        *a3 = v13 + 3;
        a3[1] = v13;
      }
      else
      {
        *a3 = 0;
        a3[1] = 0;
      }
      sub_239621094((uint64_t)v21);
    }
    v25[0] = *v8;
    *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = v8[3];
    MEMORY[0x23B83DC8C](v26);
    std::istream::~istream();
    MEMORY[0x23B83E250](v27);
    if (v24)
    {
      if (v23 < 0)
        operator delete(__p);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_239A8C404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;

  a37 = *v39;
  *(uint64_t *)((char *)&a37 + *(_QWORD *)(a37 - 24)) = v39[3];
  MEMORY[0x23B83DC8C](v38);
  std::istream::~istream();
  MEMORY[0x23B83E250](v37);
  if (a36)
  {
    if (a35 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_239A8C48C(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AF2D70;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_239A8C4C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AF2D70;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A8C514(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = off_250AF2D70;
  v2[1] = v3;
  v4 = v2 + 2;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 16);
    v2[4] = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_239A8C578(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_239A8C58C(char *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  __int128 v4;

  v2 = *((_QWORD *)result + 1);
  *a2 = off_250AF2D70;
  a2[1] = v2;
  v3 = a2 + 2;
  if (result[39] < 0)
    return (char *)sub_23941A7F8(v3, *((void **)result + 2), *((_QWORD *)result + 3));
  v4 = *((_OWORD *)result + 1);
  a2[4] = *((_QWORD *)result + 4);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_239A8C5CC(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void sub_239A8C5E0(void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint8x8_t sub_239A8C610@<D0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>, uint8x8_t result@<D0>)
{
  _QWORD *v5;
  int8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v5 = *(_QWORD **)(a1 + 8);
  v6 = (int8x8_t)v5[1];
  if (v6)
  {
    v7 = *a2;
    result = (uint8x8_t)vcnt_s8(v6);
    result.i16[0] = vaddlv_u8(result);
    if (result.u32[0] > 1uLL)
    {
      v8 = *a2;
      if (*(_QWORD *)&v6 <= v7)
        v8 = v7 % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & v7;
    }
    v9 = *(_QWORD **)(*v5 + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (result.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == v7)
            {
              if (v10[2] == v7)
                goto LABEL_23;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == v7)
          {
            if (v10[2] == v7)
            {
LABEL_23:
              sub_2396F295C(v10 + 3, a1 + 16, (uint64_t)&v14);
              result = (uint8x8_t)v14;
              *(_OWORD *)a3 = v14;
              *(_QWORD *)(a3 + 16) = v15;
              *(_BYTE *)(a3 + 24) = 1;
              return result;
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v6)
              v12 %= *(_QWORD *)&v6;
            if (v12 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  return result;
}

void sub_239A8C740(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250B00DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239A8C750(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250B00DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239A8C780(uint64_t a1)
{
  OpaqueVTPixelTransferSession *v2;
  _QWORD *v3;
  OpaqueVTPixelTransferSession *v4;

  std::mutex::~mutex((std::mutex *)(a1 + 32));
  v4 = *(OpaqueVTPixelTransferSession **)(a1 + 24);
  v3 = (_QWORD *)(a1 + 24);
  v2 = v4;
  *v3 = 0;
  if (v4)
    sub_239769318((int)v3, v2);
}

uint64_t sub_239A8C7C0(uint64_t a1, uint64_t a2)
{
  char *v5;
  char *v6;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_239490944((char *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    sub_239490944((char *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    sub_239490944((char *)(a1 + 64), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_239A8D520((_BYTE *)(a1 + 96), a2 + 96);
  sub_239A8D520((_BYTE *)(a1 + 144), a2 + 144);
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    sub_239490944((char *)(a1 + 192), *(_QWORD *)(a2 + 192), *(_QWORD *)(a2 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3));
    *(_BYTE *)(a1 + 216) = 1;
  }
  sub_239A8D520((_BYTE *)(a1 + 224), a2 + 224);
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    sub_239490944((char *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3));
    *(_BYTE *)(a1 + 296) = 1;
  }
  sub_239A8D520((_BYTE *)(a1 + 304), a2 + 304);
  sub_239A8D520((_BYTE *)(a1 + 352), a2 + 352);
  v6 = (char *)(a1 + 400);
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  if (*(_BYTE *)(a2 + 424))
  {
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 416) = 0;
    sub_239490944(v6, *(_QWORD *)(a2 + 400), *(_QWORD *)(a2 + 408), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 408) - *(_QWORD *)(a2 + 400)) >> 3));
    *(_BYTE *)(a1 + 424) = 1;
  }
  sub_239A8D520((_BYTE *)(a1 + 432), a2 + 432);
  v5 = (char *)(a1 + 480);
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  if (*(_BYTE *)(a2 + 504))
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 496) = 0;
    sub_239490944(v5, *(_QWORD *)(a2 + 480), *(_QWORD *)(a2 + 488), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 3));
    *(_BYTE *)(a1 + 504) = 1;
  }
  sub_239A8D520((_BYTE *)(a1 + 512), a2 + 512);
  sub_239A8D520((_BYTE *)(a1 + 560), a2 + 560);
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  if (*(_BYTE *)(a2 + 632))
  {
    *(_QWORD *)(a1 + 608) = 0;
    *(_QWORD *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 624) = 0;
    sub_239490944((char *)(a1 + 608), *(_QWORD *)(a2 + 608), *(_QWORD *)(a2 + 616), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3));
    *(_BYTE *)(a1 + 632) = 1;
  }
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  if (*(_BYTE *)(a2 + 664))
  {
    *(_QWORD *)(a1 + 640) = 0;
    *(_QWORD *)(a1 + 648) = 0;
    *(_QWORD *)(a1 + 656) = 0;
    sub_239490944((char *)(a1 + 640), *(_QWORD *)(a2 + 640), *(_QWORD *)(a2 + 648), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 648) - *(_QWORD *)(a2 + 640)) >> 3));
    *(_BYTE *)(a1 + 664) = 1;
  }
  sub_239A8D520((_BYTE *)(a1 + 672), a2 + 672);
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  if (*(_BYTE *)(a2 + 760))
  {
    sub_239A8D5F8(a1 + 720, a2 + 720);
    *(_BYTE *)(a1 + 760) = 1;
  }
  *(_BYTE *)(a1 + 768) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  if (*(_BYTE *)(a2 + 792))
  {
    *(_QWORD *)(a1 + 768) = 0;
    *(_QWORD *)(a1 + 776) = 0;
    *(_QWORD *)(a1 + 784) = 0;
    sub_239490944((char *)(a1 + 768), *(_QWORD *)(a2 + 768), *(_QWORD *)(a2 + 776), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 776) - *(_QWORD *)(a2 + 768)) >> 3));
    *(_BYTE *)(a1 + 792) = 1;
  }
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 824) = 0;
  if (*(_BYTE *)(a2 + 824))
  {
    *(_QWORD *)(a1 + 800) = 0;
    *(_QWORD *)(a1 + 808) = 0;
    *(_QWORD *)(a1 + 816) = 0;
    sub_239490944((char *)(a1 + 800), *(_QWORD *)(a2 + 800), *(_QWORD *)(a2 + 808), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 808) - *(_QWORD *)(a2 + 800)) >> 3));
    *(_BYTE *)(a1 + 824) = 1;
  }
  *(_BYTE *)(a1 + 832) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  if (*(_BYTE *)(a2 + 856))
  {
    *(_QWORD *)(a1 + 832) = 0;
    *(_QWORD *)(a1 + 840) = 0;
    *(_QWORD *)(a1 + 848) = 0;
    sub_239490944((char *)(a1 + 832), *(_QWORD *)(a2 + 832), *(_QWORD *)(a2 + 840), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 840) - *(_QWORD *)(a2 + 832)) >> 3));
    *(_BYTE *)(a1 + 856) = 1;
  }
  *(_BYTE *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 888) = 0;
  if (*(_BYTE *)(a2 + 888))
  {
    *(_QWORD *)(a1 + 864) = 0;
    *(_QWORD *)(a1 + 872) = 0;
    *(_QWORD *)(a1 + 880) = 0;
    sub_239490944((char *)(a1 + 864), *(_QWORD *)(a2 + 864), *(_QWORD *)(a2 + 872), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 872) - *(_QWORD *)(a2 + 864)) >> 3));
    *(_BYTE *)(a1 + 888) = 1;
  }
  return a1;
}

void sub_239A8CC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v36;

  if (*(_BYTE *)(v22 + 888))
  {
    v36 = *v23;
    if (*v23)
    {
      v32 = *(_QWORD *)(v22 + 872);
      v33 = (void *)*v23;
      if (v32 != v36)
      {
        v34 = *v23;
        do
        {
          if (*(char *)(v32 - 1) < 0)
          {
            operator delete(*(void **)(v32 - 24));
            v34 = v36;
          }
          v32 -= 24;
        }
        while (v32 != v34);
        v33 = (void *)*v23;
      }
      *(_QWORD *)(v22 + 872) = v36;
      operator delete(v33);
    }
  }
  sub_239A495AC(v28);
  sub_239A495AC(v29);
  sub_239A495AC(v25);
  if (*(_BYTE *)(v22 + 760))
    sub_239A726C4(a22);
  sub_239A8DB60(a12);
  sub_239A495AC(v30);
  sub_239A495AC(v26);
  sub_239A8DB60(a13);
  sub_239A8DB60(a14);
  sub_239A495AC(*(_QWORD *)(v31 - 96));
  sub_239A8DB60(a15);
  sub_239A495AC(*(_QWORD *)(v31 - 88));
  sub_239A8DB60(a16);
  sub_239A8DB60(a17);
  sub_239A495AC(a18);
  sub_239A8DB60(a19);
  sub_239A495AC(v27);
  sub_239A8DB60(a20);
  sub_239A8DB60(a21);
  sub_239A495AC(v24);
  sub_239A495AC(a11);
  sub_239A495AC(v22);
  _Unwind_Resume(a1);
}

void sub_239A8D20C()
{
  JUMPOUT(0x239A8D194);
}

void sub_239A8D218()
{
  JUMPOUT(0x239A8D19CLL);
}

void sub_239A8D224()
{
  JUMPOUT(0x239A8D1ACLL);
}

void sub_239A8D230()
{
  JUMPOUT(0x239A8D1BCLL);
}

void sub_239A8D23C()
{
  JUMPOUT(0x239A8D1C4);
}

void sub_239A8D248()
{
  JUMPOUT(0x239A8D1D4);
}

void sub_239A8D254()
{
  JUMPOUT(0x239A8D1E4);
}

void sub_239A8D260()
{
  JUMPOUT(0x239A8D1ECLL);
}

uint64_t sub_239A8D26C(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AF2E38;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_239A8D2A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AF2E38;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239A8D2F4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = off_250AF2E38;
  v2[1] = v3;
  v4 = v2 + 2;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 16);
    v2[4] = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_239A8D358(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_239A8D36C(char *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  __int128 v4;

  v2 = *((_QWORD *)result + 1);
  *a2 = off_250AF2E38;
  a2[1] = v2;
  v3 = a2 + 2;
  if (result[39] < 0)
    return (char *)sub_23941A7F8(v3, *((void **)result + 2), *((_QWORD *)result + 3));
  v4 = *((_OWORD *)result + 1);
  a2[4] = *((_QWORD *)result + 4);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_239A8D3AC(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void sub_239A8D3C0(void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint8x8_t sub_239A8D3F0@<D0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>, uint8x8_t result@<D0>)
{
  _QWORD *v5;
  int8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v5 = *(_QWORD **)(a1 + 8);
  v6 = (int8x8_t)v5[1];
  if (v6)
  {
    v7 = *a2;
    result = (uint8x8_t)vcnt_s8(v6);
    result.i16[0] = vaddlv_u8(result);
    if (result.u32[0] > 1uLL)
    {
      v8 = *a2;
      if (*(_QWORD *)&v6 <= v7)
        v8 = v7 % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & v7;
    }
    v9 = *(_QWORD **)(*v5 + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (result.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == v7)
            {
              if (v10[2] == v7)
                goto LABEL_23;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == v7)
          {
            if (v10[2] == v7)
            {
LABEL_23:
              sub_2396F295C(v10 + 3, a1 + 16, (uint64_t)&v14);
              result = (uint8x8_t)v14;
              *(_OWORD *)a3 = v14;
              *(_QWORD *)(a3 + 16) = v15;
              *(_BYTE *)(a3 + 24) = 1;
              return result;
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v6)
              v12 %= *(_QWORD *)&v6;
            if (v12 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  return result;
}

_BYTE *sub_239A8D520(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    sub_239A8DC0C((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_239A8D570(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(v1 + 40))
  {
    v3 = *(_QWORD **)(v1 + 16);
    if (v3)
    {
      do
      {
        v6 = (_QWORD *)*v3;
        v7 = v3[3];
        if (v7)
        {
          v8 = v3[4];
          v5 = (void *)v3[3];
          if (v8 != v7)
          {
            do
            {
              if (*(char *)(v8 - 1) < 0)
                operator delete(*(void **)(v8 - 24));
              v8 -= 24;
            }
            while (v8 != v7);
            v5 = (void *)v3[3];
          }
          v3[4] = v7;
          operator delete(v5);
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6);
    }
    v4 = *(void **)v1;
    *(_QWORD *)v1 = 0;
    if (v4)
      operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239A8D5F8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t *i;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  uint64_t **v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void **v32;
  unsigned __int8 *v33;
  char *v34;
  char *v35;
  __int128 v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  int8x8_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD v50[2];
  char v51;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239A501C8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v6 = *(int8x8_t *)(a1 + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v12 = *((char *)i + 39);
    if (v12 >= 0)
      v13 = i + 2;
    else
      v13 = (uint64_t *)i[2];
    if (v12 >= 0)
      v14 = *((unsigned __int8 *)i + 39);
    else
      v14 = i[3];
    v15 = sub_239428940((uint64_t)v50, v13, v14);
    v16 = v15;
    v17 = *(_QWORD *)(a1 + 8);
    if (v17)
    {
      v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        v2 = v15;
        if (v15 >= v17)
          v2 = v15 % v17;
      }
      else
      {
        v2 = (v17 - 1) & v15;
      }
      v19 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
      if (v19)
      {
        v20 = *v19;
        if (*v19)
        {
          v21 = *((_BYTE *)i + 39);
          if (v21 >= 0)
            v22 = *((unsigned __int8 *)i + 39);
          else
            v22 = i[3];
          if (v21 >= 0)
            v23 = (unsigned __int8 *)(i + 2);
          else
            v23 = (unsigned __int8 *)i[2];
          if (v18.u32[0] < 2uLL)
          {
            while (1)
            {
              v29 = v20[1];
              if (v29 == v16)
              {
                v30 = *((unsigned __int8 *)v20 + 39);
                if ((v30 & 0x80u) == 0)
                  v31 = *((unsigned __int8 *)v20 + 39);
                else
                  v31 = v20[3];
                if (v31 == v22)
                {
                  v32 = (const void **)(v20 + 2);
                  if ((v30 & 0x80) != 0)
                  {
                    if (!memcmp(*v32, v23, v20[3]))
                      goto LABEL_22;
                  }
                  else
                  {
                    if (!*((_BYTE *)v20 + 39))
                      goto LABEL_22;
                    v33 = v23;
                    while (*(unsigned __int8 *)v32 == *v33)
                    {
                      v32 = (const void **)((char *)v32 + 1);
                      ++v33;
                      if (!--v30)
                        goto LABEL_22;
                    }
                  }
                }
              }
              else if ((v29 & (v17 - 1)) != v2)
              {
                goto LABEL_76;
              }
              v20 = (uint64_t *)*v20;
              if (!v20)
                goto LABEL_76;
            }
          }
          do
          {
            v24 = v20[1];
            if (v24 == v16)
            {
              v25 = *((unsigned __int8 *)v20 + 39);
              if ((v25 & 0x80u) == 0)
                v26 = *((unsigned __int8 *)v20 + 39);
              else
                v26 = v20[3];
              if (v26 == v22)
              {
                v27 = (const void **)(v20 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v23, v20[3]))
                    goto LABEL_22;
                }
                else
                {
                  if (!*((_BYTE *)v20 + 39))
                    goto LABEL_22;
                  v28 = v23;
                  while (*(unsigned __int8 *)v27 == *v28)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    ++v28;
                    if (!--v25)
                      goto LABEL_22;
                  }
                }
              }
            }
            else
            {
              if (v24 >= v17)
                v24 %= v17;
              if (v24 != v2)
                break;
            }
            v20 = (uint64_t *)*v20;
          }
          while (v20);
        }
      }
    }
LABEL_76:
    v34 = (char *)operator new(0x40uLL);
    v35 = v34;
    v50[0] = v34;
    v50[1] = a1 + 16;
    v51 = 0;
    *(_QWORD *)v34 = 0;
    *((_QWORD *)v34 + 1) = v16;
    if (*((char *)i + 39) < 0)
    {
      sub_23941A7F8(v34 + 16, (void *)i[2], i[3]);
    }
    else
    {
      v36 = *((_OWORD *)i + 1);
      *((_QWORD *)v34 + 4) = i[4];
      *((_OWORD *)v34 + 1) = v36;
    }
    *((_QWORD *)v35 + 5) = 0;
    *((_QWORD *)v35 + 6) = 0;
    *((_QWORD *)v35 + 7) = 0;
    sub_239490944(v35 + 40, i[5], i[6], 0xAAAAAAAAAAAAAAABLL * ((i[6] - i[5]) >> 3));
    v51 = 1;
    v37 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v38 = *(float *)(a1 + 32);
    if (!v17 || (float)(v38 * (float)v17) < v37)
    {
      v39 = (v17 & (v17 - 1)) != 0;
      if (v17 < 3)
        v39 = 1;
      v40 = v39 | (2 * v17);
      v41 = vcvtps_u32_f32(v37 / v38);
      if (v40 <= v41)
        v42 = v41;
      else
        v42 = v40;
      if (v42 == 1)
      {
        v42 = 2;
      }
      else if ((v42 & (v42 - 1)) != 0)
      {
        v42 = std::__next_prime(v42);
      }
      v43 = *(int8x8_t *)(a1 + 8);
      if (v42 > *(_QWORD *)&v43)
        goto LABEL_91;
      if (v42 < *(_QWORD *)&v43)
      {
        v44 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (*(_QWORD *)&v43 < 3uLL || (v45 = (uint8x8_t)vcnt_s8(v43), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
        {
          v44 = std::__next_prime(v44);
        }
        else
        {
          v46 = 1 << -(char)__clz(v44 - 1);
          if (v44 >= 2)
            v44 = v46;
        }
        if (v42 <= v44)
          v42 = v44;
        if (v42 < *(_QWORD *)&v43)
LABEL_91:
          sub_239A501C8(a1, v42);
      }
      v17 = *(_QWORD *)(a1 + 8);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v16 >= v17)
          v2 = v16 % v17;
        else
          v2 = v16;
      }
      else
      {
        v2 = (v17 - 1) & v16;
      }
    }
    v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v47)
    {
      *(_QWORD *)v50[0] = *v47;
      *v47 = v50[0];
    }
    else
    {
      *(_QWORD *)v50[0] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v50[0];
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
      if (*(_QWORD *)v50[0])
      {
        v48 = *(_QWORD *)(*(_QWORD *)v50[0] + 8);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v48 >= v17)
            v48 %= v17;
        }
        else
        {
          v48 &= v17 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v48) = v50[0];
      }
    }
    ++*(_QWORD *)(a1 + 24);
LABEL_22:
    ;
  }
  return a1;
}

void sub_239A8DB18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239A726C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A8DB60(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 16);
    if (v2)
    {
      do
      {
        v6 = (_QWORD *)*v2;
        v7 = v2[3];
        if (v7)
        {
          v8 = v2[4];
          v5 = (void *)v2[3];
          if (v8 != v7)
          {
            do
            {
              if (*(char *)(v8 - 1) < 0)
                operator delete(*(void **)(v8 - 24));
              v8 -= 24;
            }
            while (v8 != v7);
            v5 = (void *)v2[3];
          }
          v2[4] = v7;
          operator delete(v5);
        }
        operator delete(v2);
        v2 = v6;
      }
      while (v6);
    }
    v3 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_239A8DC0C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  _QWORD *i;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  int8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239A501C8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v6 = *(int8x8_t *)(a1 + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    v12 = i[2];
    v13 = *(_QWORD *)(a1 + 8);
    if (v13)
    {
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v2 = i[2];
        if (v12 >= v13)
          v2 = v12 % v13;
      }
      else
      {
        v2 = (v13 - 1) & v12;
      }
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v15)
      {
        v16 = (_QWORD *)*v15;
        if (v16)
        {
          if (v14.u32[0] < 2uLL)
          {
            while (1)
            {
              v18 = v16[1];
              if (v18 == v12)
              {
                if (v16[2] == v12)
                  goto LABEL_76;
              }
              else if ((v18 & (v13 - 1)) != v2)
              {
                goto LABEL_39;
              }
              v16 = (_QWORD *)*v16;
              if (!v16)
                goto LABEL_39;
            }
          }
          do
          {
            v17 = v16[1];
            if (v17 == v12)
            {
              if (v16[2] == v12)
                goto LABEL_76;
            }
            else
            {
              if (v17 >= v13)
                v17 %= v13;
              if (v17 != v2)
                break;
            }
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
      }
    }
LABEL_39:
    v19 = operator new(0x30uLL);
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = v12;
    *((_QWORD *)v19 + 2) = i[2];
    *((_QWORD *)v19 + 4) = 0;
    *((_QWORD *)v19 + 5) = 0;
    v33 = v19;
    *((_QWORD *)v19 + 3) = 0;
    sub_239490944((char *)v19 + 24, i[3], i[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(i[4] - i[3]) >> 3));
    v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v21 = *(float *)(a1 + 32);
    if (!v13 || (float)(v21 * (float)v13) < v20)
    {
      v22 = (v13 & (v13 - 1)) != 0;
      if (v13 < 3)
        v22 = 1;
      v23 = v22 | (2 * v13);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        v25 = v24;
      else
        v25 = v23;
      if (v25 == 1)
      {
        v25 = 2;
      }
      else if ((v25 & (v25 - 1)) != 0)
      {
        v25 = std::__next_prime(v25);
      }
      v26 = *(int8x8_t *)(a1 + 8);
      if (v25 > *(_QWORD *)&v26)
        goto LABEL_51;
      if (v25 < *(_QWORD *)&v26)
      {
        v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (*(_QWORD *)&v26 < 3uLL || (v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
        {
          v27 = std::__next_prime(v27);
        }
        else
        {
          v29 = 1 << -(char)__clz(v27 - 1);
          if (v27 >= 2)
            v27 = v29;
        }
        if (v25 <= v27)
          v25 = v27;
        if (v25 < *(_QWORD *)&v26)
LABEL_51:
          sub_239A501C8(a1, v25);
      }
      v13 = *(_QWORD *)(a1 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v12 >= v13)
          v2 = v12 % v13;
        else
          v2 = v12;
      }
      else
      {
        v2 = (v13 - 1) & v12;
      }
    }
    v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v30)
    {
      *(_QWORD *)v33 = *v30;
      *v30 = v33;
    }
    else
    {
      *(_QWORD *)v33 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v33;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
      if (*(_QWORD *)v33)
      {
        v31 = *(_QWORD *)(*(_QWORD *)v33 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v31 >= v13)
            v31 %= v13;
        }
        else
        {
          v31 &= v13 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v33;
      }
    }
    ++*(_QWORD *)(a1 + 24);
LABEL_76:
    ;
  }
  return a1;
}

void sub_239A8DFF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239A8E020(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239A8E020(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      if (v7)
      {
        v8 = v2[4];
        v5 = (void *)v2[3];
        if (v8 != v7)
        {
          do
          {
            if (*(char *)(v8 - 1) < 0)
              operator delete(*(void **)(v8 - 24));
            v8 -= 24;
          }
          while (v8 != v7);
          v5 = (void *)v2[3];
        }
        v2[4] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_239A8E0C4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      if (v3)
      {
        v4 = v2[4];
        v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 1) < 0)
              operator delete(*(void **)(v4 - 24));
            v4 -= 24;
          }
          while (v4 != v3);
          v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_239A8E150(std::__fs::filesystem::path *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::string *v6;
  std::string __p;
  void *v8[2];
  char v9;

  sub_2396F295C((uint64_t *)(a2 + 32), a2 + 8, (uint64_t)v8);
  memset(&__p, 0, sizeof(__p));
  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (std::string *)a3;
  else
    v6 = *(std::string **)a3;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  sub_23948900C(&__p, v6, (std::string *)((char *)v6 + v5));
  sub_239498A04((std::__fs::filesystem::path *)&__p, (uint64_t)v8, a1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v9 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v8[0]);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v9 < 0)
    goto LABEL_10;
}

void sub_239A8E1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL sub_239A8E230(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  std::ios_base *v10;
  _BOOL4 v11;
  unsigned __int8 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  std::ios_base *v21;
  int v22;
  int8x16_t *v23;
  size_t v24;
  size_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  const char *v30;
  size_t v31;
  size_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int8x16_t *v37;
  size_t v38;
  size_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  const char *v44;
  size_t v45;
  const void *v46;
  const void **v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int8x16_t *v51;
  size_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  void **v60;
  void *v61;
  uint64_t v62;
  void **v63;
  uint64_t v64;
  void *v65;
  std::ios_base *v66;
  void **v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  std::ios_base *v73;
  int16x8_t v74;
  int32x4_t v75;
  double v76;
  int32x4_t v77;
  const char *v78;
  const char *v79;
  size_t v80;
  size_t v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  const char *v86;
  const char *v87;
  size_t v88;
  size_t v89;
  _OWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  const char *v94;
  const char *v95;
  size_t v96;
  size_t v97;
  _OWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  const char *v102;
  const char *v103;
  size_t v104;
  size_t v105;
  _OWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  const char *v110;
  size_t v111;
  size_t v112;
  _OWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  const char *v117;
  const char *v118;
  size_t v119;
  size_t v120;
  _OWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  const char *v125;
  size_t v126;
  size_t v127;
  _OWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  unsigned __int8 *v132;
  size_t v133;
  size_t v134;
  _OWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  int8x8_t *v139;
  size_t v140;
  size_t v141;
  _OWORD *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  const char *v146;
  size_t v147;
  size_t v148;
  _OWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  const char *v153;
  size_t v154;
  size_t v155;
  _OWORD *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  const char *v160;
  size_t v161;
  size_t v162;
  _OWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  const char *v167;
  const char *v168;
  size_t v169;
  size_t v170;
  _OWORD *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  const char *v175;
  const char *v176;
  size_t v177;
  size_t v178;
  _OWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  const char *v183;
  const char *v184;
  size_t v185;
  size_t v186;
  _OWORD *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  const char *v191;
  size_t v192;
  size_t v193;
  _OWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  const char *v198;
  const char *v199;
  size_t v200;
  size_t v201;
  _OWORD *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  const char *v206;
  const char *v207;
  size_t v208;
  size_t v209;
  _OWORD *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  const char *v214;
  const char *v215;
  size_t v216;
  size_t v217;
  _BYTE *v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  const char *v222;
  const char *v223;
  size_t v224;
  size_t v225;
  _BYTE *v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  const char *v230;
  const char *v231;
  size_t v232;
  size_t v233;
  _BYTE *v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  const char *v238;
  size_t v239;
  size_t v240;
  _OWORD *v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  const char *v245;
  const char *v246;
  size_t v247;
  size_t v248;
  _OWORD *v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  _QWORD *v253;
  uint64_t v254;
  void **v255;
  void *v256;
  uint64_t v257;
  void **v258;
  uint64_t v259;
  void **v260;
  uint64_t v261;
  void *v262;
  void *v263;
  void *v264;
  char v265;
  const void *v266[3];
  void *v267[3];
  void *v268[2];
  unint64_t v269;
  int v270;
  int v271;
  const void *v272[4];
  void *v273;
  size_t v274;
  unint64_t v275;
  uint64_t *v276;
  _QWORD v277[8];
  __int128 v278;
  __int128 v279;
  int v280;
  _QWORD v281[19];
  void *__p;
  uint64_t v283;
  void *v284;
  char v285;
  __int128 v286;
  __int16 v287;
  uint64_t v288;
  int v289;
  int8x16_t v290[2];
  uint64_t v291;
  char v292[8];
  __int128 v293;
  __int16 v294;
  void *p_p;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v297;
  int v298;
  const char *v299;
  int v300;
  const char *v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  _QWORD v304[19];
  _OWORD __dst[3];
  _BYTE v306[24];
  uint64_t v307;

  v307 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 4))
  {
    sub_239A444D4((uint64_t)"unknown file", 410, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  *(_DWORD *)(a1 + 2248) = a2;
  v3 = a1 + 896;
  v4 = a1 + 8;
  if (sub_239BB3AE8(a1 + 896, a1 + 8))
  {
    sub_2396F295C((uint64_t *)(a1 + 128), v4, (uint64_t)&v264);
    if (*(_BYTE *)(a1 + 4))
    {
      if (*(_BYTE *)(a1 + 2304))
      {
        v5 = MEMORY[0x24BEDB840];
        v6 = MEMORY[0x24BEDB840] + 64;
        v7 = MEMORY[0x24BEDB7E8];
        v9 = *(void **)(MEMORY[0x24BEDB7E8] + 8);
        v8 = *(void **)(MEMORY[0x24BEDB7E8] + 16);
        v304[0] = MEMORY[0x24BEDB840] + 64;
        p_p = v9;
        v263 = v8;
        *(void **)((char *)&p_p + *((_QWORD *)v9 - 3)) = v8;
        v10 = (std::ios_base *)((char *)&p_p + *((_QWORD *)p_p - 3));
        std::ios_base::init(v10, &rep);
        v10[1].__vftable = 0;
        v10[1].__fmtflags_ = -1;
        p_p = (void *)(v5 + 24);
        v304[0] = v6;
        MEMORY[0x23B83DC80](&rep);
        std::ofstream::open();
        if ((*((_BYTE *)&v299 + *((_QWORD *)p_p - 3)) & 5) != 0)
        {
          v11 = 0;
          goto LABEL_89;
        }
        HIBYTE(v266[2]) = 18;
        strcpy((char *)v266, "CorePhotogrammetry");
        sub_2395AC84C(v266, v267);
        v17 = MEMORY[0x24BEDB870];
        v18 = MEMORY[0x24BEDB870] + 64;
        v19 = *(uint64_t **)(MEMORY[0x24BEDB800] + 8);
        v20 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
        v281[0] = MEMORY[0x24BEDB870] + 64;
        v276 = v19;
        *(_QWORD *)((char *)&v277[-1] + *(v19 - 3)) = v20;
        v21 = (std::ios_base *)((char *)&v277[-1] + *(v276 - 3));
        std::ios_base::init(v21, v277);
        v21[1].__vftable = 0;
        v21[1].__fmtflags_ = -1;
        v276 = (uint64_t *)(v17 + 24);
        v281[0] = v18;
        std::streambuf::basic_streambuf();
        v277[0] = MEMORY[0x24BEDB848] + 16;
        v278 = 0u;
        v279 = 0u;
        v280 = 16;
        sub_2396157EC((uint64_t)&__p, 1);
        v22 = *(_DWORD *)(a1 + 2248);
        v270 = *(_DWORD *)(a1 + 2300);
        v271 = v22;
        v293 = xmmword_239F0CDA4;
        v294 = 96;
        v23 = sub_239A91B18((int8x16_t *)&v293);
        v24 = strlen(v23->i8);
        if (v24 > 0x7FFFFFFFFFFFFFF7)
          sub_23941A5AC();
        v25 = v24;
        if (v24 >= 0x17)
        {
          v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17)
            v27 = v24 | 7;
          v28 = v27 + 1;
          v26 = operator new(v27 + 1);
          *((_QWORD *)&__dst[0] + 1) = v25;
          *(_QWORD *)&__dst[1] = v28 | 0x8000000000000000;
          *(_QWORD *)&__dst[0] = v26;
        }
        else
        {
          BYTE7(__dst[1]) = v24;
          v26 = __dst;
          if (!v24)
          {
LABEL_24:
            *((_BYTE *)v26 + v25) = 0;
            v29 = (_QWORD *)operator new();
            *v29 = &off_250AF2E80;
            v29[1] = a1 + 2288;
            sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v29);
            v291 = 0x7E42717865746D1DLL;
            strcpy(v292, "rhsi");
            v30 = sub_239510ECC((uint64_t)&v291);
            v31 = strlen(v30);
            if (v31 > 0x7FFFFFFFFFFFFFF7)
              sub_23941A5AC();
            v32 = v31;
            if (v31 >= 0x17)
            {
              v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17)
                v34 = v31 | 7;
              v35 = v34 + 1;
              v33 = operator new(v34 + 1);
              *(_QWORD *)&v306[8] = v32;
              *(_QWORD *)&v306[16] = v35 | 0x8000000000000000;
              *(_QWORD *)v306 = v33;
            }
            else
            {
              v306[23] = v31;
              v33 = v306;
              if (!v31)
              {
LABEL_32:
                v33[v32] = 0;
                v36 = (_QWORD *)operator new();
                *v36 = &off_250AF2EB0;
                v36[1] = a1 + 2256;
                sub_23961580C((uint64_t)&__p, (uint64_t)v306, (uint64_t)v36);
                strcpy(v290[0].i8, "7VSSRShDVZG[Rh^SD");
                v37 = sub_239A91B18(v290);
                v38 = strlen(v37->i8);
                if (v38 > 0x7FFFFFFFFFFFFFF7)
                  sub_23941A5AC();
                v39 = v38;
                if (v38 >= 0x17)
                {
                  v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v38 | 7) != 0x17)
                    v41 = v38 | 7;
                  v42 = v41 + 1;
                  v40 = operator new(v41 + 1);
                  v274 = v39;
                  v275 = v42 | 0x8000000000000000;
                  v273 = v40;
                }
                else
                {
                  HIBYTE(v275) = v38;
                  v40 = &v273;
                  if (!v38)
                  {
LABEL_40:
                    *((_BYTE *)v40 + v39) = 0;
                    v43 = (_QWORD *)operator new();
                    *v43 = &off_250AF2EE0;
                    v43[1] = a1 + 2264;
                    sub_23961580C((uint64_t)&__p, (uint64_t)&v273, (uint64_t)v43);
                    v288 = 0x617E656D6B666D0ELL;
                    v289 = 8020071;
                    v44 = sub_23958E4C8((uint64_t)&v288);
                    v45 = strlen(v44);
                    if (v45 > 0x7FFFFFFFFFFFFFF7)
                      sub_23941A5AC();
                    v46 = (const void *)v45;
                    if (v45 >= 0x17)
                    {
                      v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v45 | 7) != 0x17)
                        v48 = v45 | 7;
                      v49 = v48 + 1;
                      v47 = (const void **)operator new(v48 + 1);
                      v272[1] = v46;
                      v272[2] = (const void *)(v49 | 0x8000000000000000);
                      v272[0] = v47;
                    }
                    else
                    {
                      HIBYTE(v272[2]) = v45;
                      v47 = v272;
                      if (!v45)
                      {
LABEL_48:
                        *((_BYTE *)v46 + (_QWORD)v47) = 0;
                        v50 = (_QWORD *)operator new();
                        *v50 = &off_250ADF420;
                        v50[1] = &v271;
                        sub_23961580C((uint64_t)&__p, (uint64_t)v272, (uint64_t)v50);
                        v286 = xmmword_239F0CDC8;
                        v287 = 45;
                        v51 = sub_239A91B18((int8x16_t *)&v286);
                        v52 = strlen(v51->i8);
                        if (v52 > 0x7FFFFFFFFFFFFFF7)
                          sub_23941A5AC();
                        v53 = (void *)v52;
                        if (v52 >= 0x17)
                        {
                          v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v52 | 7) != 0x17)
                            v55 = v52 | 7;
                          v56 = v55 + 1;
                          v54 = operator new(v55 + 1);
                          v268[1] = v53;
                          v269 = v56 | 0x8000000000000000;
                          v268[0] = v54;
                        }
                        else
                        {
                          HIBYTE(v269) = v52;
                          v54 = v268;
                          if (!v52)
                          {
LABEL_56:
                            *((_BYTE *)v53 + (_QWORD)v54) = 0;
                            v57 = (_QWORD *)operator new();
                            *v57 = &off_250ADF420;
                            v57[1] = &v270;
                            sub_23961580C((uint64_t)&__p, (uint64_t)v268, (uint64_t)v57);
                            v7 = MEMORY[0x24BEDB7E8];
                            if (SHIBYTE(v269) < 0)
                            {
                              operator delete(v268[0]);
                              if ((SHIBYTE(v272[2]) & 0x80000000) == 0)
                              {
LABEL_58:
                                if ((SHIBYTE(v275) & 0x80000000) == 0)
                                  goto LABEL_59;
                                goto LABEL_107;
                              }
                            }
                            else if ((SHIBYTE(v272[2]) & 0x80000000) == 0)
                            {
                              goto LABEL_58;
                            }
                            operator delete((void *)v272[0]);
                            if ((SHIBYTE(v275) & 0x80000000) == 0)
                            {
LABEL_59:
                              if ((v306[23] & 0x80000000) == 0)
                                goto LABEL_60;
                              goto LABEL_108;
                            }
LABEL_107:
                            operator delete(v273);
                            if ((v306[23] & 0x80000000) == 0)
                            {
LABEL_60:
                              if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
                              {
LABEL_61:
                                sub_2395902F0((uint64_t)&__p, &v276);
                                v58 = v284;
                                if (v284)
                                {
                                  do
                                  {
                                    v59 = v58[5];
                                    if (v59)
                                      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
                                    v58 = (_QWORD *)*v58;
                                  }
                                  while (v58);
                                  v60 = (void **)v284;
                                  if (v284)
                                  {
                                    do
                                    {
                                      v67 = (void **)*v60;
                                      if (*((char *)v60 + 39) < 0)
                                        operator delete(v60[2]);
                                      operator delete(v60);
                                      v60 = v67;
                                    }
                                    while (v67);
                                  }
                                }
                                v61 = __p;
                                __p = 0;
                                if (v61)
                                  operator delete(v61);
                                std::stringbuf::str();
                                v5 = MEMORY[0x24BEDB840];
                                v62 = MEMORY[0x24BEDB800];
                                sub_2395ABE70((const void **)__dst, (uint64_t)v267, (uint64_t)&__p);
                                if (SBYTE7(__dst[1]) < 0)
                                  operator delete(*(void **)&__dst[0]);
                                v11 = v285 != 0;
                                if (v285)
                                {
                                  v63 = SHIBYTE(v284) >= 0 ? &__p : (void **)__p;
                                  v64 = SHIBYTE(v284) >= 0 ? HIBYTE(v284) : v283;
                                  sub_239458500(&p_p, (uint64_t)v63, v64);
                                  if (v285)
                                  {
                                    if (SHIBYTE(v284) < 0)
                                      operator delete(__p);
                                  }
                                }
                                v276 = *(uint64_t **)v62;
                                *(_QWORD *)((char *)&v277[-1] + *(v276 - 3)) = *(_QWORD *)(v62 + 24);
                                v277[0] = MEMORY[0x24BEDB848] + 16;
                                if (SBYTE7(v279) < 0)
                                  operator delete((void *)v278);
                                std::streambuf::~streambuf();
                                std::ostream::~ostream();
                                MEMORY[0x23B83E250](v281);
                                if (v267[0])
                                {
                                  v267[1] = v267[0];
                                  operator delete(v267[0]);
                                }
                                if (SHIBYTE(v266[2]) < 0)
                                  operator delete((void *)v266[0]);
                                if (!std::filebuf::close())
                                  std::ios_base::clear((std::ios_base *)((char *)&p_p + *((_QWORD *)p_p - 3)), *(_DWORD *)((char *)&v299 + *((_QWORD *)p_p - 3)) | 4);
LABEL_89:
                                v65 = *(void **)v7;
                                p_p = v65;
                                v262 = *(void **)(v7 + 24);
                                *(void **)((char *)&p_p + *((_QWORD *)v65 - 3)) = v262;
                                MEMORY[0x23B83DC8C](&rep);
                                std::ostream::~ostream();
                                MEMORY[0x23B83E250](v304);
                                sub_2396F295C((uint64_t *)(a1 + 104), v4, (uint64_t)v268);
                                if (!v11)
                                {
                                  v16 = 0;
                                  if ((SHIBYTE(v269) & 0x80000000) == 0)
                                    goto LABEL_97;
                                  goto LABEL_96;
                                }
                                v304[0] = v5 + 64;
                                p_p = v9;
                                *(void **)((char *)&p_p + *((_QWORD *)v9 - 3)) = v263;
                                v66 = (std::ios_base *)((char *)&p_p + *((_QWORD *)p_p - 3));
                                std::ios_base::init(v66, &rep);
                                v66[1].__vftable = 0;
                                v66[1].__fmtflags_ = -1;
                                p_p = (void *)(v5 + 24);
                                v304[0] = v5 + 64;
                                MEMORY[0x23B83DC80](&rep);
                                std::ofstream::open();
                                if ((*((_BYTE *)&v299 + *((_QWORD *)p_p - 3)) & 5) != 0)
                                {
                                  v16 = 0;
                                  goto LABEL_411;
                                }
                                HIBYTE(v272[2]) = 18;
                                strcpy((char *)v272, "CorePhotogrammetry");
                                sub_2395AC84C(v272, &v273);
                                v69 = MEMORY[0x24BEDB870];
                                v70 = MEMORY[0x24BEDB870] + 64;
                                v71 = *(uint64_t **)(MEMORY[0x24BEDB800] + 8);
                                v72 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
                                v281[0] = MEMORY[0x24BEDB870] + 64;
                                v276 = v71;
                                *(_QWORD *)((char *)&v277[-1] + *(v71 - 3)) = v72;
                                v73 = (std::ios_base *)((char *)&v277[-1] + *(v276 - 3));
                                std::ios_base::init(v73, v277);
                                v73[1].__vftable = 0;
                                v73[1].__fmtflags_ = -1;
                                v276 = (uint64_t *)(v69 + 24);
                                v281[0] = v70;
                                std::streambuf::basic_streambuf();
                                v277[0] = MEMORY[0x24BEDB848] + 16;
                                v278 = 0u;
                                v279 = 0u;
                                v280 = 16;
                                *(double *)v74.i64 = sub_2396157EC((uint64_t)&__p, 1);
                                if (!*(_BYTE *)(a1 + 920))
                                {
LABEL_117:
                                  if (!*(_BYTE *)(a1 + 952))
                                    goto LABEL_129;
                                  *(_QWORD *)v306 = 0x1611071713071062;
                                  *(_WORD *)&v306[12] = 13;
                                  *(_DWORD *)&v306[8] = 67898173;
                                  sub_23971A32C((uint64_t)v306, v74);
                                  v87 = v86;
                                  v88 = strlen(v86);
                                  if (v88 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v89 = v88;
                                  if (v88 >= 0x17)
                                  {
                                    v91 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v88 | 7) != 0x17)
                                      v91 = v88 | 7;
                                    v92 = v91 + 1;
                                    v90 = operator new(v91 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v89;
                                    *(_QWORD *)&__dst[1] = v92 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v90;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v88;
                                    v90 = __dst;
                                    if (!v88)
                                      goto LABEL_126;
                                  }
                                  memmove(v90, v87, v89);
LABEL_126:
                                  *((_BYTE *)v90 + v89) = 0;
                                  if (!*(_BYTE *)(a1 + 952))
                                    sub_2394875CC();
                                  v93 = (_QWORD *)operator new();
                                  *v93 = &off_250AF2F10;
                                  v93[1] = a1 + 928;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v93);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_129:
                                  if (!*(_BYTE *)(a1 + 984))
                                    goto LABEL_141;
                                  *(_OWORD *)v306 = xmmword_239F0CDEB;
                                  *(_DWORD *)&v306[15] = 8350335;
                                  sub_23958E450((uint64_t)v306, (int32x4_t)xmmword_239F0CDEB, (int8x16_t)v75, v76, v77);
                                  v95 = v94;
                                  v96 = strlen(v94);
                                  if (v96 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v97 = v96;
                                  if (v96 >= 0x17)
                                  {
                                    v99 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v96 | 7) != 0x17)
                                      v99 = v96 | 7;
                                    v100 = v99 + 1;
                                    v98 = operator new(v99 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v97;
                                    *(_QWORD *)&__dst[1] = v100 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v98;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v96;
                                    v98 = __dst;
                                    if (!v96)
                                      goto LABEL_138;
                                  }
                                  memmove(v98, v95, v97);
LABEL_138:
                                  *((_BYTE *)v98 + v97) = 0;
                                  if (!*(_BYTE *)(a1 + 984))
                                    sub_2394875CC();
                                  v101 = (_QWORD *)operator new();
                                  *v101 = &off_250AF2F10;
                                  v101[1] = a1 + 960;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v101);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_141:
                                  if (!*(_BYTE *)(a1 + 1032))
                                    goto LABEL_153;
                                  *(_QWORD *)v306 = 0x142209080D13147DLL;
                                  *(_WORD *)&v306[12] = 14;
                                  *(_DWORD *)&v306[8] = 404364304;
                                  sub_23971A32C((uint64_t)v306, v74);
                                  v103 = v102;
                                  v104 = strlen(v102);
                                  if (v104 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v105 = v104;
                                  if (v104 >= 0x17)
                                  {
                                    v107 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v104 | 7) != 0x17)
                                      v107 = v104 | 7;
                                    v108 = v107 + 1;
                                    v106 = operator new(v107 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v105;
                                    *(_QWORD *)&__dst[1] = v108 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v106;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v104;
                                    v106 = __dst;
                                    if (!v104)
                                      goto LABEL_150;
                                  }
                                  memmove(v106, v103, v105);
LABEL_150:
                                  *((_BYTE *)v106 + v105) = 0;
                                  if (!*(_BYTE *)(a1 + 1032))
                                    sub_2394875CC();
                                  v109 = (_QWORD *)operator new();
                                  *v109 = &off_250AF2F40;
                                  v109[1] = a1 + 992;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v109);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_153:
                                  if (!*(_BYTE *)(a1 + 1080))
                                    goto LABEL_165;
                                  *(_QWORD *)v306 = 0xB39121316080F66;
                                  v306[12] = 0;
                                  *(_DWORD *)&v306[8] = 353178887;
                                  v110 = sub_239510ECC((uint64_t)v306);
                                  v111 = strlen(v110);
                                  if (v111 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v112 = v111;
                                  if (v111 >= 0x17)
                                  {
                                    v114 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v111 | 7) != 0x17)
                                      v114 = v111 | 7;
                                    v115 = v114 + 1;
                                    v113 = operator new(v114 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v112;
                                    *(_QWORD *)&__dst[1] = v115 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v113;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v111;
                                    v113 = __dst;
                                    if (!v111)
                                      goto LABEL_162;
                                  }
                                  memmove(v113, v110, v112);
LABEL_162:
                                  *((_BYTE *)v113 + v112) = 0;
                                  if (!*(_BYTE *)(a1 + 1080))
                                    sub_2394875CC();
                                  v116 = (_QWORD *)operator new();
                                  *v116 = &off_250AF2F40;
                                  v116[1] = a1 + 1040;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v116);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_165:
                                  if (!*(_BYTE *)(a1 + 1112))
                                    goto LABEL_177;
                                  strcpy(v306, "([NEw[KMFMwZMNMZMFKM");
                                  sub_2396EFB50((uint64_t)v306, *(int32x4_t *)"([NEw[KMFMwZMNMZMFKM", (int8x16_t)v75, v76, v77);
                                  v118 = v117;
                                  v119 = strlen(v117);
                                  if (v119 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v120 = v119;
                                  if (v119 >= 0x17)
                                  {
                                    v122 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v119 | 7) != 0x17)
                                      v122 = v119 | 7;
                                    v123 = v122 + 1;
                                    v121 = operator new(v122 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v120;
                                    *(_QWORD *)&__dst[1] = v123 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v121;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v119;
                                    v121 = __dst;
                                    if (!v119)
                                      goto LABEL_174;
                                  }
                                  memmove(v121, v118, v120);
LABEL_174:
                                  *((_BYTE *)v121 + v120) = 0;
                                  if (!*(_BYTE *)(a1 + 1112))
                                    sub_2394875CC();
                                  v124 = (_QWORD *)operator new();
                                  *v124 = &off_250AF2F10;
                                  v124[1] = a1 + 1088;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v124);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_177:
                                  if (!*(_BYTE *)(a1 + 1160))
                                    goto LABEL_189;
                                  strcpy(v306, "W32'#?\b:6'$");
                                  v125 = sub_23958E4C8((uint64_t)v306);
                                  v126 = strlen(v125);
                                  if (v126 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v127 = v126;
                                  if (v126 >= 0x17)
                                  {
                                    v129 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v126 | 7) != 0x17)
                                      v129 = v126 | 7;
                                    v130 = v129 + 1;
                                    v128 = operator new(v129 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v127;
                                    *(_QWORD *)&__dst[1] = v130 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v128;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v126;
                                    v128 = __dst;
                                    if (!v126)
                                      goto LABEL_186;
                                  }
                                  memmove(v128, v125, v127);
LABEL_186:
                                  *((_BYTE *)v128 + v127) = 0;
                                  if (!*(_BYTE *)(a1 + 1160))
                                    sub_2394875CC();
                                  v131 = (_QWORD *)operator new();
                                  *v131 = &off_250AF2F40;
                                  v131[1] = a1 + 1120;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v131);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_189:
                                  if (!*(_BYTE *)(a1 + 1192))
                                    goto LABEL_201;
                                  *(_OWORD *)v306 = xmmword_239F0CE13;
                                  *(_QWORD *)&v306[14] = 0x647E797F607B73;
                                  v132 = sub_239A90BEC(v306, (int8x16_t)xmmword_239F0CE13, v75, v76, v77);
                                  v133 = strlen((const char *)v132);
                                  if (v133 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v134 = v133;
                                  if (v133 >= 0x17)
                                  {
                                    v136 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v133 | 7) != 0x17)
                                      v136 = v133 | 7;
                                    v137 = v136 + 1;
                                    v135 = operator new(v136 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v134;
                                    *(_QWORD *)&__dst[1] = v137 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v135;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v133;
                                    v135 = __dst;
                                    if (!v133)
                                      goto LABEL_198;
                                  }
                                  memmove(v135, v132, v134);
LABEL_198:
                                  *((_BYTE *)v135 + v134) = 0;
                                  if (!*(_BYTE *)(a1 + 1192))
                                    sub_2394875CC();
                                  v138 = (_QWORD *)operator new();
                                  *v138 = &off_250AF2F10;
                                  v138[1] = a1 + 1168;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v138);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_201:
                                  if (!*(_BYTE *)(a1 + 1240))
                                    goto LABEL_213;
                                  strcpy(v306, ":\\_[NOH_I");
                                  v139 = sub_23950FF84((int8x8_t *)v306);
                                  v140 = strlen((const char *)v139);
                                  if (v140 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v141 = v140;
                                  if (v140 >= 0x17)
                                  {
                                    v143 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v140 | 7) != 0x17)
                                      v143 = v140 | 7;
                                    v144 = v143 + 1;
                                    v142 = operator new(v143 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v141;
                                    *(_QWORD *)&__dst[1] = v144 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v142;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v140;
                                    v142 = __dst;
                                    if (!v140)
                                      goto LABEL_210;
                                  }
                                  memmove(v142, v139, v141);
LABEL_210:
                                  *((_BYTE *)v142 + v141) = 0;
                                  if (!*(_BYTE *)(a1 + 1240))
                                    sub_2394875CC();
                                  v145 = (_QWORD *)operator new();
                                  *v145 = &off_250AF2F40;
                                  v145[1] = a1 + 1200;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v145);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_213:
                                  if (!*(_BYTE *)(a1 + 1288))
                                    goto LABEL_225;
                                  strcpy(v306, " MATCHES");
                                  v146 = sub_239513718(v306);
                                  v147 = strlen(v146);
                                  if (v147 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v148 = v147;
                                  if (v147 >= 0x17)
                                  {
                                    v150 = (v147 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v147 | 7) != 0x17)
                                      v150 = v147 | 7;
                                    v151 = v150 + 1;
                                    v149 = operator new(v150 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v148;
                                    *(_QWORD *)&__dst[1] = v151 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v149;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v147;
                                    v149 = __dst;
                                    if (!v147)
                                      goto LABEL_222;
                                  }
                                  memmove(v149, v146, v148);
LABEL_222:
                                  *((_BYTE *)v149 + v148) = 0;
                                  if (!*(_BYTE *)(a1 + 1288))
                                    sub_2394875CC();
                                  v152 = (_QWORD *)operator new();
                                  *v152 = &off_250AF2F40;
                                  v152[1] = a1 + 1248;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v152);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_225:
                                  if (!*(_BYTE *)(a1 + 1320))
                                    goto LABEL_237;
                                  strcpy(v306, "/\\IBp\\LJAJ");
                                  v153 = (const char *)sub_23958E518((uint64_t)v306);
                                  v154 = strlen(v153);
                                  if (v154 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v155 = v154;
                                  if (v154 >= 0x17)
                                  {
                                    v157 = (v154 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v154 | 7) != 0x17)
                                      v157 = v154 | 7;
                                    v158 = v157 + 1;
                                    v156 = operator new(v157 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v155;
                                    *(_QWORD *)&__dst[1] = v158 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v156;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v154;
                                    v156 = __dst;
                                    if (!v154)
                                      goto LABEL_234;
                                  }
                                  memmove(v156, v153, v155);
LABEL_234:
                                  *((_BYTE *)v156 + v155) = 0;
                                  if (!*(_BYTE *)(a1 + 1320))
                                    sub_2394875CC();
                                  v159 = (_QWORD *)operator new();
                                  *v159 = &off_250AF2F10;
                                  v159[1] = a1 + 1296;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v159);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_237:
                                  if (!*(_BYTE *)(a1 + 1368))
                                    goto LABEL_249;
                                  strcpy(&v306[4], "rj");
                                  *(_DWORD *)v306 = 1786278937;
                                  v160 = sub_239513174(v306);
                                  v161 = strlen(v160);
                                  if (v161 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v162 = v161;
                                  if (v161 >= 0x17)
                                  {
                                    v164 = (v161 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v161 | 7) != 0x17)
                                      v164 = v161 | 7;
                                    v165 = v164 + 1;
                                    v163 = operator new(v164 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v162;
                                    *(_QWORD *)&__dst[1] = v165 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v163;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v161;
                                    v163 = __dst;
                                    if (!v161)
                                      goto LABEL_246;
                                  }
                                  memmove(v163, v160, v162);
LABEL_246:
                                  *((_BYTE *)v163 + v162) = 0;
                                  if (!*(_BYTE *)(a1 + 1368))
                                    sub_2394875CC();
                                  v166 = (_QWORD *)operator new();
                                  *v166 = &off_250AF2F40;
                                  v166[1] = a1 + 1328;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v166);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_249:
                                  if (!*(_BYTE *)(a1 + 1400))
                                    goto LABEL_261;
                                  strcpy(v306, "5@[Q\\FAZGAPQjFSXjFVP[P");
                                  sub_2396EFBE0((uint64_t)v306, *(int32x4_t *)"5@[Q\\FAZGAPQjFSXjFVP[P", (int8x16_t)v75, v76, v77);
                                  v168 = v167;
                                  v169 = strlen(v167);
                                  if (v169 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v170 = v169;
                                  if (v169 >= 0x17)
                                  {
                                    v172 = (v169 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v169 | 7) != 0x17)
                                      v172 = v169 | 7;
                                    v173 = v172 + 1;
                                    v171 = operator new(v172 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v170;
                                    *(_QWORD *)&__dst[1] = v173 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v171;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v169;
                                    v171 = __dst;
                                    if (!v169)
                                      goto LABEL_258;
                                  }
                                  memmove(v171, v168, v170);
LABEL_258:
                                  *((_BYTE *)v171 + v170) = 0;
                                  if (!*(_BYTE *)(a1 + 1400))
                                    sub_2394875CC();
                                  v174 = (_QWORD *)operator new();
                                  *v174 = &off_250AF2F10;
                                  v174[1] = a1 + 1376;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v174);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_261:
                                  if (!*(_BYTE *)(a1 + 1448))
                                    goto LABEL_273;
                                  *(_OWORD *)v306 = xmmword_239F0CE40;
                                  strcpy(&v306[16], "ik}");
                                  sub_23958E55C((uint64_t)v306, (int32x4_t)xmmword_239F0CE40, (int8x16_t)v75, v76, v77);
                                  v176 = v175;
                                  v177 = strlen(v175);
                                  if (v177 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v178 = v177;
                                  if (v177 >= 0x17)
                                  {
                                    v180 = (v177 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v177 | 7) != 0x17)
                                      v180 = v177 | 7;
                                    v181 = v180 + 1;
                                    v179 = operator new(v180 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v178;
                                    *(_QWORD *)&__dst[1] = v181 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v179;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v177;
                                    v179 = __dst;
                                    if (!v177)
                                      goto LABEL_270;
                                  }
                                  memmove(v179, v176, v178);
LABEL_270:
                                  *((_BYTE *)v179 + v178) = 0;
                                  if (!*(_BYTE *)(a1 + 1448))
                                    sub_2394875CC();
                                  v182 = (_QWORD *)operator new();
                                  *v182 = &off_250AF2F40;
                                  v182[1] = a1 + 1408;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v182);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_273:
                                  if (!*(_BYTE *)(a1 + 1496))
                                    goto LABEL_285;
                                  strcpy(v306, "0E^TYCD_BDUTo]QC[C");
                                  sub_23958E450((uint64_t)v306, *(int32x4_t *)"0E^TYCD_BDUTo]QC[C", (int8x16_t)v75, v76, v77);
                                  v184 = v183;
                                  v185 = strlen(v183);
                                  if (v185 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v186 = v185;
                                  if (v185 >= 0x17)
                                  {
                                    v188 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v185 | 7) != 0x17)
                                      v188 = v185 | 7;
                                    v189 = v188 + 1;
                                    v187 = operator new(v188 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v186;
                                    *(_QWORD *)&__dst[1] = v189 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v187;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v185;
                                    v187 = __dst;
                                    if (!v185)
                                      goto LABEL_282;
                                  }
                                  memmove(v187, v184, v186);
LABEL_282:
                                  *((_BYTE *)v187 + v186) = 0;
                                  if (!*(_BYTE *)(a1 + 1496))
                                    sub_2394875CC();
                                  v190 = (_QWORD *)operator new();
                                  *v190 = &off_250AF2F40;
                                  v190[1] = a1 + 1456;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v190);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_285:
                                  if (!*(_BYTE *)(a1 + 1528))
                                    goto LABEL_297;
                                  strcpy(v306, "2B][\\FmQ^]GV");
                                  v191 = sub_239510ECC((uint64_t)v306);
                                  v192 = strlen(v191);
                                  if (v192 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v193 = v192;
                                  if (v192 >= 0x17)
                                  {
                                    v195 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v192 | 7) != 0x17)
                                      v195 = v192 | 7;
                                    v196 = v195 + 1;
                                    v194 = operator new(v195 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v193;
                                    *(_QWORD *)&__dst[1] = v196 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v194;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v192;
                                    v194 = __dst;
                                    if (!v192)
                                      goto LABEL_294;
                                  }
                                  memmove(v194, v191, v193);
LABEL_294:
                                  *((_BYTE *)v194 + v193) = 0;
                                  if (!*(_BYTE *)(a1 + 1528))
                                    sub_2394875CC();
                                  v197 = (_QWORD *)operator new();
                                  *v197 = &off_250AF2F10;
                                  v197[1] = a1 + 1504;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v197);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_297:
                                  if (!*(_BYTE *)(a1 + 1560))
                                    goto LABEL_309;
                                  *(_OWORD *)v306 = xmmword_239F0CE67;
                                  *(_DWORD *)&v306[16] = 1640466;
                                  sub_23958E55C((uint64_t)v306, (int32x4_t)xmmword_239F0CE67, (int8x16_t)v75, v76, v77);
                                  v199 = v198;
                                  v200 = strlen(v198);
                                  if (v200 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v201 = v200;
                                  if (v200 >= 0x17)
                                  {
                                    v203 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v200 | 7) != 0x17)
                                      v203 = v200 | 7;
                                    v204 = v203 + 1;
                                    v202 = operator new(v203 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v201;
                                    *(_QWORD *)&__dst[1] = v204 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v202;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v200;
                                    v202 = __dst;
                                    if (!v200)
                                      goto LABEL_306;
                                  }
                                  memmove(v202, v199, v201);
LABEL_306:
                                  *((_BYTE *)v202 + v201) = 0;
                                  if (!*(_BYTE *)(a1 + 1560))
                                    sub_2394875CC();
                                  v205 = (_QWORD *)operator new();
                                  *v205 = &off_250AF2F10;
                                  v205[1] = a1 + 1536;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v205);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_309:
                                  if (!*(_BYTE *)(a1 + 1608) || !*(_QWORD *)(a1 + 1592))
                                    goto LABEL_322;
                                  *(_OWORD *)v306 = xmmword_239F0CE7B;
                                  strcpy(&v306[16], "o~i");
                                  sub_23958E55C((uint64_t)v306, (int32x4_t)xmmword_239F0CE7B, (int8x16_t)v75, v76, v77);
                                  v207 = v206;
                                  v208 = strlen(v206);
                                  if (v208 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v209 = v208;
                                  if (v208 >= 0x17)
                                  {
                                    v211 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v208 | 7) != 0x17)
                                      v211 = v208 | 7;
                                    v212 = v211 + 1;
                                    v210 = operator new(v211 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v209;
                                    *(_QWORD *)&__dst[1] = v212 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v210;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v208;
                                    v210 = __dst;
                                    if (!v208)
                                      goto LABEL_319;
                                  }
                                  memmove(v210, v207, v209);
LABEL_319:
                                  *((_BYTE *)v210 + v209) = 0;
                                  if (!*(_BYTE *)(a1 + 1608))
                                    sub_2394875CC();
                                  v213 = (_QWORD *)operator new();
                                  *v213 = &off_250AF2F40;
                                  v213[1] = a1 + 1568;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v213);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_322:
                                  if (!*(_BYTE *)(a1 + 1656) || !*(_QWORD *)(a1 + 1640))
                                    goto LABEL_335;
                                  __dst[0] = xmmword_239F0CE8F;
                                  *(_OWORD *)((char *)__dst + 14) = *(__int128 *)((char *)&xmmword_239F0CE8F + 14);
                                  sub_2396F0EE8((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F0CE8F + 14), (int8x16_t)v75, v76, v77);
                                  v215 = v214;
                                  v216 = strlen(v214);
                                  if (v216 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v217 = v216;
                                  if (v216 >= 0x17)
                                  {
                                    v219 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v216 | 7) != 0x17)
                                      v219 = v216 | 7;
                                    v220 = v219 + 1;
                                    v218 = operator new(v219 + 1);
                                    *(_QWORD *)&v306[8] = v217;
                                    *(_QWORD *)&v306[16] = v220 | 0x8000000000000000;
                                    *(_QWORD *)v306 = v218;
                                  }
                                  else
                                  {
                                    v306[23] = v216;
                                    v218 = v306;
                                    if (!v216)
                                      goto LABEL_332;
                                  }
                                  memmove(v218, v215, v217);
LABEL_332:
                                  v218[v217] = 0;
                                  if (!*(_BYTE *)(a1 + 1656))
                                    sub_2394875CC();
                                  v221 = (_QWORD *)operator new();
                                  *v221 = &off_250AF2F70;
                                  v221[1] = a1 + 1616;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)v306, (uint64_t)v221);
                                  if ((v306[23] & 0x80000000) != 0)
                                    operator delete(*(void **)v306);
LABEL_335:
                                  if (!*(_BYTE *)(a1 + 1688))
                                    goto LABEL_347;
                                  strcpy((char *)__dst, "3R__lUAR^VlF]WZ@G\\AGVWl@U^l@PV]V");
                                  sub_2396EFE38((uint64_t)__dst, *(int32x4_t *)"3R__lUAR^VlF]WZ@G\\AGVWl@U^l@PV]V", *(int8x16_t *)"G\\AGVWl@U^l@PV]V", v76, v77);
                                  v223 = v222;
                                  v224 = strlen(v222);
                                  if (v224 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v225 = v224;
                                  if (v224 >= 0x17)
                                  {
                                    v227 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v224 | 7) != 0x17)
                                      v227 = v224 | 7;
                                    v228 = v227 + 1;
                                    v226 = operator new(v227 + 1);
                                    *(_QWORD *)&v306[8] = v225;
                                    *(_QWORD *)&v306[16] = v228 | 0x8000000000000000;
                                    *(_QWORD *)v306 = v226;
                                  }
                                  else
                                  {
                                    v306[23] = v224;
                                    v226 = v306;
                                    if (!v224)
                                      goto LABEL_344;
                                  }
                                  memmove(v226, v223, v225);
LABEL_344:
                                  v226[v225] = 0;
                                  if (!*(_BYTE *)(a1 + 1688))
                                    sub_2394875CC();
                                  v229 = (_QWORD *)operator new();
                                  *v229 = &off_250AF2F10;
                                  v229[1] = a1 + 1664;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)v306, (uint64_t)v229);
                                  if ((v306[23] & 0x80000000) != 0)
                                    operator delete(*(void **)v306);
LABEL_347:
                                  if (!*(_BYTE *)(a1 + 1720))
                                    goto LABEL_359;
                                  __dst[0] = xmmword_239F0CECE;
                                  *(_OWORD *)((char *)__dst + 15) = *(__int128 *)((char *)&xmmword_239F0CECE + 15);
                                  sub_2396EFF58((uint64_t)__dst, *(int32x4_t *)((char *)&xmmword_239F0CECE + 15), (int8x16_t)v75, v76, v77);
                                  v231 = v230;
                                  v232 = strlen(v230);
                                  if (v232 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v233 = v232;
                                  if (v232 >= 0x17)
                                  {
                                    v235 = (v232 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v232 | 7) != 0x17)
                                      v235 = v232 | 7;
                                    v236 = v235 + 1;
                                    v234 = operator new(v235 + 1);
                                    *(_QWORD *)&v306[8] = v233;
                                    *(_QWORD *)&v306[16] = v236 | 0x8000000000000000;
                                    *(_QWORD *)v306 = v234;
                                  }
                                  else
                                  {
                                    v306[23] = v232;
                                    v234 = v306;
                                    if (!v232)
                                      goto LABEL_356;
                                  }
                                  memmove(v234, v231, v233);
LABEL_356:
                                  v234[v233] = 0;
                                  if (!*(_BYTE *)(a1 + 1720))
                                    sub_2394875CC();
                                  v237 = (_QWORD *)operator new();
                                  *v237 = &off_250AF2F10;
                                  v237[1] = a1 + 1696;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)v306, (uint64_t)v237);
                                  if ((v306[23] & 0x80000000) != 0)
                                    operator delete(*(void **)v306);
LABEL_359:
                                  if (!*(_BYTE *)(a1 + 1752))
                                    goto LABEL_371;
                                  *(_WORD *)&v306[4] = 8;
                                  *(_DWORD *)v306 = 319098208;
                                  v238 = sub_239A90C78(v306);
                                  v239 = strlen(v238);
                                  if (v239 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v240 = v239;
                                  if (v239 >= 0x17)
                                  {
                                    v242 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v239 | 7) != 0x17)
                                      v242 = v239 | 7;
                                    v243 = v242 + 1;
                                    v241 = operator new(v242 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v240;
                                    *(_QWORD *)&__dst[1] = v243 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v241;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v239;
                                    v241 = __dst;
                                    if (!v239)
                                      goto LABEL_368;
                                  }
                                  memmove(v241, v238, v240);
LABEL_368:
                                  *((_BYTE *)v241 + v240) = 0;
                                  if (!*(_BYTE *)(a1 + 1752))
                                    sub_2394875CC();
                                  v244 = (_QWORD *)operator new();
                                  *v244 = &off_250AF2F10;
                                  v244[1] = a1 + 1728;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v244);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
LABEL_371:
                                  if (!*(_BYTE *)(a1 + 1784))
                                  {
LABEL_383:
                                    sub_2395902F0((uint64_t)&__p, &v276);
                                    v253 = v284;
                                    if (v284)
                                    {
                                      do
                                      {
                                        v254 = v253[5];
                                        if (v254)
                                          (*(void (**)(uint64_t))(*(_QWORD *)v254 + 8))(v254);
                                        v253 = (_QWORD *)*v253;
                                      }
                                      while (v253);
                                      v255 = (void **)v284;
                                      if (v284)
                                      {
                                        do
                                        {
                                          v260 = (void **)*v255;
                                          if (*((char *)v255 + 39) < 0)
                                            operator delete(v255[2]);
                                          operator delete(v255);
                                          v255 = v260;
                                        }
                                        while (v260);
                                      }
                                    }
                                    v256 = __p;
                                    __p = 0;
                                    if (v256)
                                      operator delete(v256);
                                    std::stringbuf::str();
                                    v257 = MEMORY[0x24BEDB800];
                                    sub_2395ABE70((const void **)__dst, (uint64_t)&v273, (uint64_t)&__p);
                                    if (SBYTE7(__dst[1]) < 0)
                                      operator delete(*(void **)&__dst[0]);
                                    v16 = v285 != 0;
                                    if (v285)
                                    {
                                      v258 = SHIBYTE(v284) >= 0 ? &__p : (void **)__p;
                                      v259 = SHIBYTE(v284) >= 0 ? HIBYTE(v284) : v283;
                                      sub_239458500(&p_p, (uint64_t)v258, v259);
                                      if (v285)
                                      {
                                        if (SHIBYTE(v284) < 0)
                                          operator delete(__p);
                                      }
                                    }
                                    v276 = *(uint64_t **)v257;
                                    *(_QWORD *)((char *)&v277[-1] + *(v276 - 3)) = *(_QWORD *)(v257 + 24);
                                    v277[0] = MEMORY[0x24BEDB848] + 16;
                                    if (SBYTE7(v279) < 0)
                                      operator delete((void *)v278);
                                    std::streambuf::~streambuf();
                                    std::ostream::~ostream();
                                    MEMORY[0x23B83E250](v281);
                                    if (v273)
                                    {
                                      v274 = (size_t)v273;
                                      operator delete(v273);
                                    }
                                    if (SHIBYTE(v272[2]) < 0)
                                      operator delete((void *)v272[0]);
                                    if (!std::filebuf::close())
                                      std::ios_base::clear((std::ios_base *)((char *)&p_p + *((_QWORD *)p_p - 3)), *(_DWORD *)((char *)&v299 + *((_QWORD *)p_p - 3)) | 4);
LABEL_411:
                                    p_p = v65;
                                    *(void **)((char *)&p_p + *((_QWORD *)v65 - 3)) = v262;
                                    MEMORY[0x23B83DC8C](&rep);
                                    std::ostream::~ostream();
                                    MEMORY[0x23B83E250](v304);
                                    if ((SHIBYTE(v269) & 0x80000000) == 0)
                                    {
LABEL_97:
                                      if (v265 < 0)
                                        operator delete(v264);
                                      return v16;
                                    }
LABEL_96:
                                    operator delete(v268[0]);
                                    goto LABEL_97;
                                  }
                                  *(_QWORD *)v306 = 0x512151418051460;
                                  v306[14] = 0;
                                  *(_WORD *)&v306[12] = 2067;
                                  *(_DWORD *)&v306[8] = 84754180;
                                  sub_23958E5E0((uint64_t)v306);
                                  v246 = v245;
                                  v247 = strlen(v245);
                                  if (v247 > 0x7FFFFFFFFFFFFFF7)
                                    sub_23941A5AC();
                                  v248 = v247;
                                  if (v247 >= 0x17)
                                  {
                                    v250 = (v247 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v247 | 7) != 0x17)
                                      v250 = v247 | 7;
                                    v251 = v250 + 1;
                                    v249 = operator new(v250 + 1);
                                    *((_QWORD *)&__dst[0] + 1) = v248;
                                    *(_QWORD *)&__dst[1] = v251 | 0x8000000000000000;
                                    *(_QWORD *)&__dst[0] = v249;
                                  }
                                  else
                                  {
                                    BYTE7(__dst[1]) = v247;
                                    v249 = __dst;
                                    if (!v247)
                                      goto LABEL_380;
                                  }
                                  memmove(v249, v246, v248);
LABEL_380:
                                  *((_BYTE *)v249 + v248) = 0;
                                  if (!*(_BYTE *)(a1 + 1784))
                                    sub_2394875CC();
                                  v252 = (_QWORD *)operator new();
                                  *v252 = &off_250AF2F10;
                                  v252[1] = a1 + 1760;
                                  sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v252);
                                  if (SBYTE7(__dst[1]) < 0)
                                    operator delete(*(void **)&__dst[0]);
                                  goto LABEL_383;
                                }
                                *(_OWORD *)v306 = xmmword_239F0CDDA;
                                v306[16] = 0;
                                sub_2396EFA24((uint64_t)v306);
                                v79 = v78;
                                v80 = strlen(v78);
                                if (v80 > 0x7FFFFFFFFFFFFFF7)
                                  sub_23941A5AC();
                                v81 = v80;
                                if (v80 >= 0x17)
                                {
                                  v83 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v80 | 7) != 0x17)
                                    v83 = v80 | 7;
                                  v84 = v83 + 1;
                                  v82 = operator new(v83 + 1);
                                  *((_QWORD *)&__dst[0] + 1) = v81;
                                  *(_QWORD *)&__dst[1] = v84 | 0x8000000000000000;
                                  *(_QWORD *)&__dst[0] = v82;
                                }
                                else
                                {
                                  BYTE7(__dst[1]) = v80;
                                  v82 = __dst;
                                  if (!v80)
                                    goto LABEL_114;
                                }
                                memmove(v82, v79, v81);
LABEL_114:
                                *((_BYTE *)v82 + v81) = 0;
                                if (!*(_BYTE *)(a1 + 920))
                                  sub_2394875CC();
                                v85 = (_QWORD *)operator new();
                                *v85 = &off_250AF2F10;
                                v85[1] = v3;
                                sub_23961580C((uint64_t)&__p, (uint64_t)__dst, (uint64_t)v85);
                                if (SBYTE7(__dst[1]) < 0)
                                  operator delete(*(void **)&__dst[0]);
                                goto LABEL_117;
                              }
LABEL_109:
                              operator delete(*(void **)&__dst[0]);
                              goto LABEL_61;
                            }
LABEL_108:
                            operator delete(*(void **)v306);
                            if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
                              goto LABEL_61;
                            goto LABEL_109;
                          }
                        }
                        memmove(v54, v51, (size_t)v53);
                        goto LABEL_56;
                      }
                    }
                    memmove(v47, v44, (size_t)v46);
                    goto LABEL_48;
                  }
                }
                memmove(v40, v37, v39);
                goto LABEL_40;
              }
            }
            memmove(v33, v30, v32);
            goto LABEL_32;
          }
        }
        memmove(v26, v23, v25);
        goto LABEL_24;
      }
      v261 = 391;
    }
    else
    {
      v261 = 390;
    }
    sub_239A444D4((uint64_t)"unknown file", v261, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v12 = atomic_load((unsigned __int8 *)&qword_25693D990);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25693D990))
  {
    sub_2399FF268(&v276);
    sub_23941A4FC(&p_p, "cv3dapi.pg");
    sub_239A03BC8(&v276, (uint64_t)&p_p, &qword_25693D988);
    if (SHIBYTE(v297) < 0)
      operator delete(p_p);
    __cxa_guard_release(&qword_25693D990);
  }
  __p = (void *)qword_25693D988;
  if (**(int **)(qword_25693D988 + 56) <= 5)
  {
    if (*(_BYTE *)(qword_25693D988 + 72))
    {
      p_p = &__p;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v297 = std::chrono::system_clock::now().__d_.__rep_;
      v298 = 5;
      v299 = "unknown file";
      v300 = 418;
      v303 = 0;
      v301 = "unknown function";
      v302 = 0;
      sub_239A58DD4((uint64_t)&p_p, "Failed to verify files at current checkpoint");
      sub_239A47720((uint64_t)&p_p);
      sub_239A47720((uint64_t)&p_p);
      v13 = v303;
      if (v303)
      {
        p_shared_owners = (unint64_t *)&v303->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
  return 0;
}

