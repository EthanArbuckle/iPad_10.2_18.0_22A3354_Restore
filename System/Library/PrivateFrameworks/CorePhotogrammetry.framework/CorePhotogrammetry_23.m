void sub_239C70B9C(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (STACK[0x240])
  {
    operator delete((void *)STACK[0x240]);
    v2 = (void *)STACK[0x258];
    if (!STACK[0x258])
    {
LABEL_3:
      v3 = (void *)STACK[0x270];
      if (!STACK[0x270])
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v2 = (void *)STACK[0x258];
    if (!STACK[0x258])
      goto LABEL_3;
  }
  STACK[0x260] = (unint64_t)v2;
  operator delete(v2);
  v3 = (void *)STACK[0x270];
  if (!STACK[0x270])
  {
LABEL_4:
    v4 = (void *)STACK[0x288];
    if (!STACK[0x288])
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  STACK[0x278] = (unint64_t)v3;
  operator delete(v3);
  v4 = (void *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_5:
    v5 = (void *)STACK[0x2A0];
    if (!STACK[0x2A0])
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  STACK[0x290] = (unint64_t)v4;
  operator delete(v4);
  v5 = (void *)STACK[0x2A0];
  if (!STACK[0x2A0])
  {
LABEL_6:
    v6 = (void *)STACK[0x2C0];
    if (!STACK[0x2C0])
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    STACK[0x2C8] = (unint64_t)v6;
    operator delete(v6);
    _Unwind_Resume(a1);
  }
LABEL_12:
  STACK[0x2A8] = (unint64_t)v5;
  operator delete(v5);
  v6 = (void *)STACK[0x2C0];
  if (!STACK[0x2C0])
    goto LABEL_14;
  goto LABEL_13;
}

_QWORD *sub_239C71050(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    do
    {
      v11 = &v7[v8];
      v12 = v3 + v8;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      v14 = *(_BYTE **)(v3 + v8);
      v13 = *(_BYTE **)(v3 + v8 + 8);
      v15 = v13 - v14;
      if (v13 != v14)
      {
        if (v15 < 0)
          sub_2394189F8();
        v9 = (char *)operator new(v13 - v14);
        *(_QWORD *)v11 = v9;
        *((_QWORD *)v11 + 1) = v9;
        *((_QWORD *)v11 + 2) = &v9[128 * (v15 >> 7)];
        v10 = v15 & 0xFFFFFFFFFFFFFF80;
        memcpy(v9, v14, v10);
        *((_QWORD *)v11 + 1) = &v9[v10];
      }
      v8 += 24;
    }
    while (v12 + 24 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_239C7119C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239C71220(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  char *v21;
  char *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  char *v67;
  char *v68;
  size_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t j;
  _OWORD *v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  void (**v118)();
  uint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  float64x2_t v122;
  int64x2_t v123;
  float64x2_t v128;
  int8x16_t v130;
  int64x2_t v131;
  float64x2_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t i;
  _OWORD *v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  void (**v149)();
  uint64_t v150;
  uint64_t v151;
  _OWORD *v152;
  float64x2_t v153;
  int64x2_t v154;
  float64x2_t v159;
  int8x16_t v161;
  int64x2_t v162;
  float64x2_t v163;
  char v164;
  char v165;
  double v166;
  __int128 v167;
  _QWORD *v168;
  uint64_t v169;
  __int128 v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  double v178;
  _QWORD *v179;
  uint64_t v180;
  double v181;
  __int128 v182;
  double v185;
  _QWORD *v186;
  uint64_t v187;
  double v188;
  uint64_t v189;
  double v190;
  _QWORD *v191;
  const std::locale::facet *v192;
  std::string *v193;
  std::string *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  _QWORD *v199;
  uint64_t v200;
  _BYTE *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  _OWORD *v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  _QWORD *v212;
  _BYTE *v213;
  _QWORD *v214;
  _BYTE *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  double v221;
  _QWORD *v222;
  const std::locale::facet *v223;
  std::string *v224;
  std::string *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  _OWORD *v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  double *v243;
  double *v244;
  _QWORD *v245;
  _BYTE *v246;
  uint64_t v247;
  _BYTE *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  char *v254;
  _BYTE *v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  char *v261;
  unint64_t *v262;
  char *v263;
  unint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  __int128 v269;
  unint64_t v270;
  unsigned int v271;
  uint64_t v272;
  char *v273;
  _QWORD *v274;
  _BYTE *v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  char *v281;
  unint64_t *v282;
  char *v283;
  unint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  __int128 v289;
  unint64_t v290;
  unsigned int v291;
  uint64_t v292;
  char *v293;
  _QWORD *v294;
  _BYTE *v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  char *v303;
  unint64_t v304;
  uint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  __int128 v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  char *v313;
  _QWORD *v314;
  _BYTE *v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  char *v321;
  char *v322;
  char *v323;
  unint64_t v324;
  uint64_t v325;
  char *v326;
  char *v327;
  uint64_t v328;
  __int128 v329;
  uint64_t v330;
  unsigned int v331;
  uint64_t v332;
  char *v333;
  _QWORD *v334;
  _BYTE *v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  char *v341;
  char *v342;
  char *v343;
  unint64_t v344;
  uint64_t v345;
  char *v346;
  char *v347;
  uint64_t v348;
  __int128 v349;
  uint64_t v350;
  double v351;
  double v352;
  int v353;
  size_t v354;
  size_t v355;
  double *v356;
  double v357;
  double *v358;
  uint64_t v359;
  double v360;
  double v361;
  _QWORD *v362;
  const std::locale::facet *v363;
  _QWORD *v364;
  double v365;
  double v366;
  char v367;
  char *v368;
  int v369;
  int v370;
  double v371;
  double *v372;
  unint64_t v373;
  unint64_t v374;
  float64x2_t *v375;
  uint64_t v376;
  float64x2_t v377;
  float64x2_t v378;
  double v379;
  double v380;
  uint64_t v382;
  const void *v383;
  int64_t v384;
  char *v385;
  double *v386;
  uint64_t v387;
  double v388;
  double v389;
  _QWORD *v390;
  _QWORD *v391;
  const std::locale::facet *v392;
  BOOL v394;
  double v395;
  uint64_t v397;
  double v398;
  _QWORD *v399;
  const std::locale::facet *v400;
  int v401;
  uint64_t v402;
  _BYTE *v403;
  double v404;
  __int128 v405;
  _QWORD *v406;
  _BYTE *v407;
  _QWORD *v408;
  _BYTE *v409;
  _QWORD *v410;
  const std::locale::facet *v411;
  char *v412;
  char *v413;
  unint64_t v414;
  uint64_t v415;
  char *v416;
  char *v417;
  uint64_t v418;
  __int128 v419;
  uint64_t v420;
  double v421;
  double v422;
  int v423;
  size_t v424;
  size_t v425;
  double *v426;
  double v427;
  double *v428;
  uint64_t v429;
  double v430;
  double v431;
  _QWORD *v432;
  const std::locale::facet *v433;
  _QWORD *v434;
  double v435;
  double v436;
  char v437;
  char *v438;
  int v439;
  int v440;
  double v441;
  double *v442;
  unint64_t v443;
  unint64_t v444;
  float64x2_t *v445;
  uint64_t v446;
  float64x2_t v447;
  float64x2_t v448;
  double v449;
  double v450;
  uint64_t v452;
  const void *v453;
  int64_t v454;
  char *v455;
  double *v456;
  uint64_t v457;
  double v458;
  double v459;
  _QWORD *v460;
  _QWORD *v461;
  const std::locale::facet *v462;
  BOOL v464;
  double v465;
  uint64_t v467;
  double v468;
  _QWORD *v469;
  const std::locale::facet *v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  double v474;
  __int128 v475;
  double *v476;
  double *v477;
  _QWORD *v478;
  _BYTE *v479;
  _QWORD *v480;
  const std::locale::facet *v481;
  int v482;
  _QWORD *v483;
  const std::locale::facet *v484;
  int v485;
  _QWORD *v486;
  const std::locale::facet *v487;
  _QWORD *v488;
  const std::locale::facet *v489;
  _QWORD *v490;
  const std::locale::facet *v491;
  _QWORD *v492;
  _QWORD *v493;
  const std::locale::facet *v494;
  _QWORD *v495;
  _QWORD *v496;
  const std::locale::facet *v497;
  std::bad_alloc *v498;
  std::bad_alloc *v499;
  std::bad_alloc *exception;
  std::bad_alloc *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  char v508;
  char v509;
  uint64_t v510;
  uint64_t v511;
  _BYTE v512[200];
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  float64x2_t v517;
  __int128 v518;
  int64x2_t v519;
  __int128 v520;
  float64x2_t v521;
  __int128 v522;
  float64x2_t v523;
  float64x2_t v524;
  unsigned int v525;
  char v526;
  uint64_t v527;
  uint64_t v528;
  void *v529;
  char *v530;
  char *v531;
  void *v532;
  uint64_t v533;
  unsigned int v534;
  void *__dst;
  size_t v536;
  unsigned int v537;
  double v538;
  uint64_t (**v539)();
  int64x2_t v540;
  int64x2_t v541;
  double v542;
  int64x2_t v543;
  _BYTE v544[16];
  _BYTE *v545;
  _BYTE v546[184];
  _DWORD v547[2];
  uint64_t v548;
  unsigned __int8 v549;
  __int128 v550;
  _BYTE v551[24];
  __int128 __src;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  __int128 v557;
  _BYTE v558[40];
  __int128 v559;
  int64x2_t *v560;
  __int128 *p_src;
  uint64_t v562;
  uint64_t v563;
  __int128 v564;
  _BYTE v565[88];
  __int128 v566;
  void (**v567)();
  uint64_t v568;
  uint64_t v569;
  int v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  __int128 v577;
  _BYTE v578[40];
  __int128 v579;
  __int16 v580;
  uint64_t v581;
  _BYTE *v582;
  __int128 v583;
  int64x2_t **v584;
  __int128 v585;
  uint64_t v586;
  __int128 v587;
  _QWORD v588[3];
  __int128 v589;
  _BYTE v590[12];
  int v591;
  _BYTE v592[72];
  char v593;
  uint64_t v594;
  void (**v595)();
  __int128 v596;
  __int128 v597;
  _BYTE v598[25];
  _BYTE v599[24];
  _BYTE *v600;
  _BYTE v601[24];
  _BYTE *v602;
  double v603;
  __int128 v604;
  __int128 v605;
  uint64_t v606;
  uint64_t v607;
  std::string v608;
  std::string *v609;
  _BYTE v610[24];
  _BYTE *v611;
  uint64_t v612;

  v1 = a1;
  v612 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 112) = 0x3EB0C6F7A0B5ED8DLL;
  *(_OWORD *)(a1 + 96) = xmmword_239F0C010;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 440);
  if (*(_BYTE *)(a1 + 459))
  {
    v2 = 0;
    v3 = 0x3F1A36E2EB1C432DLL;
  }
  else
  {
    v2 = *(_BYTE *)(a1 + 458);
    *(_QWORD *)(a1 + 208) = 0x3EB0C6F7A0B5ED8DLL;
    v3 = 0x3F50624DD2F1A9FCLL;
  }
  *(_BYTE *)(a1 + 224) = v2;
  *(_QWORD *)(a1 + 216) = v3;
  *(_BYTE *)(a1 + 88) = 0;
  v4 = *(_DWORD *)(a1 + 444);
  if (!v4)
  {
    __asm { FMOV            V0.2D, #1.0 }
    v540 = _Q0;
    sub_239C921F8((uint64_t)&v541);
    memset(v547, 0, 5);
    v548 = 0;
    v549 = 0;
    __src = 0uLL;
    v550 = 0u;
    memset(v551, 0, 20);
    v57 = operator new();
    *(_OWORD *)(v57 + 72) = 0u;
    *(_OWORD *)(v57 + 56) = 0u;
    *(_OWORD *)(v57 + 40) = 0u;
    *(_OWORD *)(v57 + 24) = 0u;
    *(_OWORD *)(v57 + 8) = 0u;
    *(_QWORD *)(v57 + 96) = 0;
    *(_QWORD *)(v57 + 104) = 0;
    *(_QWORD *)(v57 + 88) = 0;
    *(_QWORD *)v57 = &off_250AFE480;
    v555 = v57;
    v58 = operator new();
    *(_OWORD *)(v58 + 72) = 0u;
    *(_OWORD *)(v58 + 56) = 0u;
    *(_OWORD *)(v58 + 40) = 0u;
    *(_OWORD *)(v58 + 24) = 0u;
    *(_OWORD *)(v58 + 8) = 0u;
    *(_QWORD *)(v58 + 96) = 0;
    *(_QWORD *)(v58 + 104) = 0;
    *(_QWORD *)(v58 + 88) = 0;
    *(_QWORD *)v58 = &off_250AFE3C0;
    v556 = v58;
    v59 = operator new();
    *(_OWORD *)(v59 + 72) = 0u;
    *(_OWORD *)(v59 + 56) = 0u;
    *(_OWORD *)(v59 + 40) = 0u;
    *(_OWORD *)(v59 + 24) = 0u;
    *(_OWORD *)(v59 + 8) = 0u;
    *(_QWORD *)(v59 + 96) = 0;
    *(_QWORD *)(v59 + 104) = 0;
    *(_QWORD *)(v59 + 88) = 0;
    *(_QWORD *)v59 = &off_250AFE000;
    v553 = v59;
    v60 = operator new();
    *(_OWORD *)(v60 + 72) = 0u;
    *(_OWORD *)(v60 + 56) = 0u;
    *(_OWORD *)(v60 + 40) = 0u;
    *(_OWORD *)(v60 + 24) = 0u;
    *(_OWORD *)(v60 + 8) = 0u;
    *(_QWORD *)(v60 + 96) = 0;
    *(_QWORD *)(v60 + 104) = 0;
    *(_QWORD *)(v60 + 88) = 0;
    *(_QWORD *)v60 = &off_250AFDF40;
    v557 = 0u;
    memset(v558, 0, 32);
    v554 = v60;
    *(_QWORD *)&v558[32] = &v541;
    *(_QWORD *)&v559 = v551;
    v560 = 0;
    *((_QWORD *)&v559 + 1) = 0;
    memset(v565, 0, 80);
    v564 = 0u;
    p_src = 0;
    *(_QWORD *)&v565[80] = off_250AFC470;
    v569 = 0;
    v568 = 0;
    v570 = 0;
    v572 = 0;
    v571 = 0;
    LODWORD(v567) = 0;
    v566 = 0uLL;
    v61 = operator new();
    *(_OWORD *)(v61 + 72) = 0u;
    *(_OWORD *)(v61 + 56) = 0u;
    *(_OWORD *)(v61 + 40) = 0u;
    *(_OWORD *)(v61 + 24) = 0u;
    *(_OWORD *)(v61 + 8) = 0u;
    *(_QWORD *)(v61 + 96) = 0;
    *(_QWORD *)(v61 + 104) = 0;
    *(_QWORD *)(v61 + 88) = 0;
    *(_QWORD *)v61 = &off_250AFE480;
    v575 = v61;
    v62 = operator new();
    *(_OWORD *)(v62 + 72) = 0u;
    *(_OWORD *)(v62 + 56) = 0u;
    *(_OWORD *)(v62 + 40) = 0u;
    *(_OWORD *)(v62 + 24) = 0u;
    *(_OWORD *)(v62 + 8) = 0u;
    *(_QWORD *)(v62 + 96) = 0;
    *(_QWORD *)(v62 + 104) = 0;
    *(_QWORD *)(v62 + 88) = 0;
    *(_QWORD *)v62 = &off_250AFE3C0;
    v576 = v62;
    v63 = operator new();
    *(_OWORD *)(v63 + 72) = 0u;
    *(_OWORD *)(v63 + 56) = 0u;
    *(_OWORD *)(v63 + 40) = 0u;
    *(_OWORD *)(v63 + 24) = 0u;
    *(_OWORD *)(v63 + 8) = 0u;
    *(_QWORD *)(v63 + 96) = 0;
    *(_QWORD *)(v63 + 104) = 0;
    *(_QWORD *)(v63 + 88) = 0;
    *(_QWORD *)v63 = &off_250AFE000;
    v573 = v63;
    v64 = operator new();
    *(_OWORD *)(v64 + 72) = 0u;
    *(_OWORD *)(v64 + 56) = 0u;
    *(_OWORD *)(v64 + 40) = 0u;
    *(_OWORD *)(v64 + 24) = 0u;
    *(_OWORD *)(v64 + 8) = 0u;
    *(_QWORD *)(v64 + 88) = 0;
    *(_OWORD *)(v64 + 96) = 0u;
    *(_QWORD *)v64 = &off_250AFDF40;
    v574 = v64;
    v581 = 0;
    v577 = 0u;
    memset(v578, 0, 34);
    v582 = &v558[32];
    *(_QWORD *)&v565[80] = &off_250AFC430;
    v586 = 0;
    LOWORD(v585) = v585 & 0x7FF0 | 0xC;
    BYTE4(v585) = 1;
    *((_QWORD *)&v585 + 1) = 0;
    v584 = 0;
    v583 = 0u;
    v65 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
    v587 = 0u;
    memset(v588, 0, sizeof(v588));
    *((_QWORD *)&v583 + 1) = v65;
    v539 = off_250AFC0D8;
    LODWORD(v589) = 2;
    DWORD2(v589) = -3;
    memset(&v592[2], 0, 46);
    *(_DWORD *)v590 = -3;
    *(_QWORD *)&v590[4] = 0;
    *(_WORD *)v592 = 1;
    v592[48] = 1;
    v66 = *(void **)(v1 + 464);
    v68 = *(char **)(v1 + 48);
    v67 = *(char **)(v1 + 56);
    v69 = v67 - v68;
    v70 = (v67 - v68) >> 7;
    v71 = *(_QWORD *)(v1 + 480) - (_QWORD)v66;
    v591 = 0;
    *(_QWORD *)&v592[56] = 0;
    *(_QWORD *)(v1 + 472) = v66;
    if (v70 > v71 >> 7)
    {
      if ((v69 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v72 = (char *)operator new(v69);
      *(_QWORD *)(v1 + 464) = v72;
      *(_QWORD *)(v1 + 472) = v72;
      *(_QWORD *)(v1 + 480) = &v72[128 * v70];
      if (v66)
      {
        operator delete(v66);
        v68 = *(char **)(v1 + 48);
        v67 = *(char **)(v1 + 56);
      }
    }
    if (v68 != v67)
    {
      v73 = *(char **)(v1 + 472);
      do
      {
        v81 = *(_QWORD *)(v1 + 480);
        if ((unint64_t)v73 < v81)
        {
          v74 = *(_OWORD *)v68;
          v75 = *((_OWORD *)v68 + 1);
          v76 = *((_OWORD *)v68 + 3);
          *((_OWORD *)v73 + 2) = *((_OWORD *)v68 + 2);
          *((_OWORD *)v73 + 3) = v76;
          *(_OWORD *)v73 = v74;
          *((_OWORD *)v73 + 1) = v75;
          v77 = *((_OWORD *)v68 + 4);
          v78 = *((_OWORD *)v68 + 5);
          v79 = *((_OWORD *)v68 + 7);
          *((_OWORD *)v73 + 6) = *((_OWORD *)v68 + 6);
          *((_OWORD *)v73 + 7) = v79;
          *((_OWORD *)v73 + 4) = v77;
          *((_OWORD *)v73 + 5) = v78;
          v80 = v73 + 128;
        }
        else
        {
          v82 = *(char **)(v1 + 464);
          v83 = (v73 - v82) >> 7;
          v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 57)
            sub_2394189F8();
          v85 = v81 - (_QWORD)v82;
          if (v85 >> 6 > v84)
            v84 = v85 >> 6;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFF80)
            v86 = 0x1FFFFFFFFFFFFFFLL;
          else
            v86 = v84;
          if (v86)
          {
            if (v86 >> 57)
              sub_239418A80();
            v87 = (char *)operator new(v86 << 7);
          }
          else
          {
            v87 = 0;
          }
          v88 = &v87[128 * v83];
          v89 = *(_OWORD *)v68;
          v90 = *((_OWORD *)v68 + 1);
          v91 = *((_OWORD *)v68 + 3);
          *((_OWORD *)v88 + 2) = *((_OWORD *)v68 + 2);
          *((_OWORD *)v88 + 3) = v91;
          *(_OWORD *)v88 = v89;
          *((_OWORD *)v88 + 1) = v90;
          v92 = *((_OWORD *)v68 + 4);
          v93 = *((_OWORD *)v68 + 5);
          v94 = *((_OWORD *)v68 + 7);
          *((_OWORD *)v88 + 6) = *((_OWORD *)v68 + 6);
          *((_OWORD *)v88 + 7) = v94;
          *((_OWORD *)v88 + 4) = v92;
          *((_OWORD *)v88 + 5) = v93;
          v95 = v88;
          if (v73 != v82)
          {
            do
            {
              v96 = *((_OWORD *)v73 - 8);
              v97 = *((_OWORD *)v73 - 7);
              v98 = *((_OWORD *)v73 - 5);
              *((_OWORD *)v95 - 6) = *((_OWORD *)v73 - 6);
              *((_OWORD *)v95 - 5) = v98;
              *((_OWORD *)v95 - 8) = v96;
              *((_OWORD *)v95 - 7) = v97;
              v99 = *((_OWORD *)v73 - 4);
              v100 = *((_OWORD *)v73 - 3);
              v101 = *((_OWORD *)v73 - 1);
              *((_OWORD *)v95 - 2) = *((_OWORD *)v73 - 2);
              *((_OWORD *)v95 - 1) = v101;
              *((_OWORD *)v95 - 4) = v99;
              *((_OWORD *)v95 - 3) = v100;
              v95 -= 128;
              v73 -= 128;
            }
            while (v73 != v82);
            v73 = *(char **)(v1 + 464);
          }
          v80 = v88 + 128;
          *(_QWORD *)(v1 + 464) = v95;
          *(_QWORD *)(v1 + 472) = v88 + 128;
          *(_QWORD *)(v1 + 480) = &v87[128 * v86];
          if (v73)
            operator delete(v73);
        }
        *(_QWORD *)(v1 + 472) = v80;
        v68 += 128;
        v73 = v80;
      }
      while (v68 != v67);
      if (*(_QWORD *)(v1 + 56) != *(_QWORD *)(v1 + 48))
      {
        v133 = *(_QWORD *)(v1 + 464);
        if (v133)
        {
          v134 = 0;
          for (i = 1; ; ++i)
          {
            *(_DWORD *)v512 = i - 1;
            v136 = (_OWORD *)(v133 + v134);
            v512[4] = 1;
            *(_QWORD *)&v512[8] = v133 + v134;
            if (v133)
            {
              *(_OWORD *)&v512[80] = v136[4];
              *(_OWORD *)&v512[96] = v136[5];
              *(_OWORD *)&v512[112] = v136[6];
              *(_OWORD *)&v512[128] = v136[7];
              *(_OWORD *)&v512[16] = *v136;
              *(_OWORD *)&v512[32] = v136[1];
              *(_OWORD *)&v512[48] = v136[2];
              *(_OWORD *)&v512[64] = v136[3];
              if (sub_239C75C58((uint64_t)&v541, (int *)v512))
                v547[0] = 0;
            }
            if (i >= (uint64_t)(*(_QWORD *)(v1 + 56) - *(_QWORD *)(v1 + 48)) >> 7)
              break;
            v133 = *(_QWORD *)(v1 + 464);
            v134 += 128;
          }
        }
      }
    }
    v137 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 488) = v137;
    v525 = 0;
    v527 = v1 + 488;
    v526 = *(_BYTE *)(v1 + 456) ^ 1;
    v528 = v137;
    if (sub_239C76078((uint64_t)&v541, &v525))
      v547[0] = 0;
    v138 = *(_QWORD *)(v1 + 8) - *(_QWORD *)v1;
    if (v138)
    {
      v139 = 0;
      LODWORD(v140) = 0;
      v141 = 0;
      v142 = v138 / 24;
      if ((unint64_t)(v138 / 24) <= 1)
        v143 = 1;
      else
        v143 = v138 / 24;
      v511 = v1;
      v503 = v143;
      v505 = v138 / 24;
      do
      {
        v144 = v1;
        v145 = (_QWORD *)(*(_QWORD *)v1 + 24 * v141);
        v146 = v145[1] - *v145;
        if (v146)
        {
          v509 = v139;
          v147 = 0;
          v148 = (_QWORD *)(*(_QWORD *)(v144 + 24) + 24 * v141);
          v507 = v141;
          v149 = (void (**)())v141;
          v140 = (int)v140;
          if ((unint64_t)(v146 >> 7) <= 1)
            v150 = 1;
          else
            v150 = v146 >> 7;
          do
          {
            v151 = *v145 + v147;
            v152 = (_OWORD *)(*v148 + v147);
            v513 = v152[4];
            v514 = v152[5];
            v515 = v152[6];
            v516 = v152[7];
            *(_OWORD *)&v512[136] = *v152;
            *(_OWORD *)&v512[152] = v152[1];
            *(_OWORD *)&v512[168] = v152[2];
            *(_OWORD *)&v512[184] = v152[3];
            v153.f64[0] = *(float64_t *)(v151 + 16);
            v154 = *(int64x2_t *)(v151 + 32);
            _D3 = *(_QWORD *)(v151 + 80);
            _Q4 = *(int64x2_t *)(v151 + 64);
            _D5 = *(double *)(v151 + 112);
            _Q6 = *(float64x2_t *)(v151 + 96);
            v159 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v151, v154);
            _Q1 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v151, v154);
            v153.f64[1] = *(float64_t *)(v151 + 48);
            v161 = vextq_s8((int8x16_t)_Q1, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
            v162 = vzip1q_s64(_Q4, (int64x2_t)_Q1);
            v163 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v159, vnegq_f64(_Q6).f64[0]), _Q1, _Q6, 1), v153, _D5, 0);
            _Q4.i64[0] = *(_QWORD *)(v151 + 72);
            __asm
            {
              FMLS            D1, D4, V6.D[1]
              FMLS            D1, D3, V5.D[0]
            }
            _Q4.i64[0] = vdupq_laneq_s64(v162, 1).u64[0];
            _Q4.i64[1] = v161.i64[0];
            _Q1.f64[1] = 1.0;
            *(_QWORD *)v512 = v140;
            *(_OWORD *)&v512[72] = xmmword_239F13AC0;
            *(_OWORD *)&v512[88] = unk_239F13AD0;
            *(_OWORD *)&v512[104] = xmmword_239F13AE0;
            *(_OWORD *)&v512[120] = unk_239F13AF0;
            *(_OWORD *)&v512[8] = xmmword_239F13A80;
            *(_OWORD *)&v512[24] = *(_OWORD *)algn_239F13A90;
            *(_OWORD *)&v512[40] = xmmword_239F13AA0;
            *(float64x2_t *)&v512[56] = xmmword_239F13AB0;
            v521 = v153;
            v522 = _D3;
            v517 = v159;
            v518 = v162.u64[0];
            v519 = _Q4;
            v520 = v161.u64[1];
            v523 = v163;
            v524 = _Q1;
            v595 = v149;
            if ((sub_239C7642C(&v541, (uint64_t *)v512, (unsigned __int32 *)&v595, 0, 0) & 1) == 0)
            {
              v1 = v511;
              v165 = v509;
              goto LABEL_303;
            }
            v547[0] = 0;
            ++v140;
            v147 += 128;
            --v150;
          }
          while (v150);
          v141 = v507;
          v143 = v503;
          v142 = v505;
        }
        v139 = ++v141 >= v142;
        v1 = v511;
      }
      while (v141 != v143);
    }
    memset(v547, 0, 5);
    if (DWORD2(v550) != *(unsigned __int8 *)(v1 + 459))
      DWORD2(v550) = *(unsigned __int8 *)(v1 + 459);
    v595 = off_250AFEA50;
    v170 = *(_OWORD *)(v1 + 96);
    v596 = *(_OWORD *)(v1 + 80);
    v597 = v170;
    *(_OWORD *)v598 = *(_OWORD *)(v1 + 112);
    *(_OWORD *)&v598[9] = *(_OWORD *)(v1 + 121);
    v171 = v599;
    v172 = *(_QWORD *)(v1 + 168);
    if (v172)
    {
      if (v172 == v1 + 144)
      {
        v600 = v599;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v1 + 144) + 24))(v1 + 144, v599);
LABEL_120:
        v174 = *(_QWORD *)(v1 + 200);
        if (v174)
        {
          if (v174 == v1 + 176)
          {
            v602 = v601;
            (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 176) + 24))(v1 + 176);
LABEL_147:
            v603 = -1.0;
            v595 = (void (**)())&off_250AFE9E8;
            v182 = *(_OWORD *)(v1 + 224);
            v604 = *(_OWORD *)(v1 + 208);
            v605 = v182;
            v606 = *((_QWORD *)&v604 + 1);
            v607 = 0x4000000000000000;
            kdebug_trace();
            ((void (*)(char *@<X8>))v595[2])(v610);
            ((void (*)(std::string *@<X8>))*v539)(&v608);
            if ((v610[23] & 0x80000000) != 0)
            {
              sub_23941A7F8(v512, *(void **)v610, *(unint64_t *)&v610[8]);
            }
            else
            {
              *(_OWORD *)v512 = *(_OWORD *)v610;
              *(_QWORD *)&v512[16] = *(_QWORD *)&v610[16];
            }
            if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_23941A7F8(&v512[24], v608.__r_.__value_.__l.__data_, v608.__r_.__value_.__l.__size_);
              *(_QWORD *)&v512[48] = 0;
              *(_DWORD *)&v512[56] = 0;
              __asm { FMOV            V0.2D, #-1.0 }
              *(_OWORD *)&v512[64] = _Q0;
              memset(&v512[80], 0, 120);
              if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v608.__r_.__value_.__l.__data_);
            }
            else
            {
              *(std::string *)&v512[24] = v608;
              *(_QWORD *)&v512[48] = 0;
              *(_DWORD *)&v512[56] = 0;
              __asm { FMOV            V0.2D, #-1.0 }
              *(_OWORD *)&v512[64] = _Q0;
              memset(&v512[80], 0, 120);
            }
            if ((v610[23] & 0x80000000) != 0)
              operator delete(*(void **)v610);
            sub_239C2F538(v512, 1uLL, 2uLL);
            kdebug_trace();
            v185 = ((double (*)(_QWORD *))v539[4])(&v539);
            v609 = 0;
            *(_QWORD *)v610 = &off_250AFC4B0;
            *(_QWORD *)&v610[8] = &v539;
            *(_QWORD *)&v610[16] = v549;
            v611 = v610;
            sub_23965A910(v610, &v608);
            v186 = v611;
            if (v611 == v610)
            {
              v187 = 4;
              v186 = v610;
            }
            else
            {
              if (!v611)
                goto LABEL_161;
              v187 = 5;
            }
            (*(void (**)(void))(*v186 + 8 * v187))();
LABEL_161:
            if (((unsigned int (__cdecl *)())v595[3])())
            {
              v549 = 1;
              if (((unsigned int (*)(uint64_t))v595[5])((uint64_t)&v595))
                ((void (*)(uint64_t, double))v595[6])((uint64_t)&v595, 0.0);
              else
                ((void (*)(uint64_t))v595[7])((uint64_t)&v595);
              v188 = ((double (*)(uint64_t))v595[4])((uint64_t)&v595);
              ((void (*)(uint64_t, double))v539[12])((uint64_t)&v539, v188);
            }
            kdebug_trace();
            if (v598[8])
            {
              *(_QWORD *)v610 = &v539;
              *(_QWORD *)&v610[8] = *(_QWORD *)&v598[16];
              *(_QWORD *)&v610[16] = &__dst;
              sub_239C773F0((double *)v610);
              v220 = (uint64_t)__dst;
              if (*(double *)&__dst <= 0.0)
              {
                v221 = 1.0e20;
                v220 = 0x3DDB7CDFD9D7BDBBLL;
              }
              else
              {
                v221 = 1.0 / (*(double *)&__dst * *(double *)&__dst);
              }
              v540.i64[0] = v220;
              *(double *)&v540.i64[1] = v221;
              memset(v547, 0, 5);
            }
            if (((unsigned int (*)(uint64_t))v539[1])((uint64_t)&v539))
            {
              if (BYTE8(v596))
              {
                v222 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
                std::ios_base::getloc((const std::ios_base *)((char *)v222 + *(_QWORD *)(*v222 - 24)));
                v223 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
                ((void (*)(const std::locale::facet *, uint64_t))v223->__vftable[2].~facet_0)(v223, 10);
                std::locale::~locale((std::locale *)v610);
                std::ostream::put();
                std::ostream::flush();
              }
              *(_DWORD *)&v512[56] = 0;
              v224 = v609;
              if (!v609)
                goto LABEL_675;
              goto LABEL_247;
            }
            *(_QWORD *)&v512[64] = sub_239C778BC((uint64_t)&v539, (uint64_t)&v512[80]);
            *(_QWORD *)&v512[72] = *(_QWORD *)&v512[64];
            v603 = *(double *)&v512[64];
            sub_23945D3D0(&v512[104], *(char **)&v512[80], *(char **)&v512[88], (uint64_t)(*(_QWORD *)&v512[88] - *(_QWORD *)&v512[80]) >> 3);
            kdebug_trace();
            v227 = sub_239C78350((uint64_t)&v541);
            v228 = v227;
            *(_QWORD *)&v512[128] += v227;
            v229 = *(char **)&v512[144];
            if (*(_QWORD *)&v512[144] >= *(_QWORD *)&v512[152])
            {
              v255 = *(_BYTE **)&v512[136];
              v256 = *(_QWORD *)&v512[144] - *(_QWORD *)&v512[136];
              v257 = (uint64_t)(*(_QWORD *)&v512[144] - *(_QWORD *)&v512[136]) >> 3;
              v258 = v257 + 1;
              if ((unint64_t)(v257 + 1) >> 61)
                sub_2394189F8();
              v259 = *(_QWORD *)&v512[152] - *(_QWORD *)&v512[136];
              if ((uint64_t)(*(_QWORD *)&v512[152] - *(_QWORD *)&v512[136]) >> 2 > v258)
                v258 = v259 >> 2;
              if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFF8)
                v260 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v260 = v258;
              if (v260)
              {
                if (v260 >> 61)
                  sub_239418A80();
                v261 = (char *)operator new(8 * v260);
              }
              else
              {
                v261 = 0;
              }
              v282 = (unint64_t *)&v261[8 * v257];
              v283 = &v261[8 * v260];
              *v282 = v228;
              v230 = v282 + 1;
              if (v229 != v255)
              {
                v284 = v229 - v255 - 8;
                if (v284 < 0x58)
                  goto LABEL_696;
                if ((unint64_t)(v229 - v261 - v256) < 0x20)
                  goto LABEL_696;
                v285 = (v284 >> 3) + 1;
                v286 = &v261[8 * v257 - 16];
                v287 = v229 - 16;
                v288 = v285 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v289 = *(_OWORD *)v287;
                  *((_OWORD *)v286 - 1) = *((_OWORD *)v287 - 1);
                  *(_OWORD *)v286 = v289;
                  v286 -= 32;
                  v287 -= 32;
                  v288 -= 4;
                }
                while (v288);
                v282 -= v285 & 0x3FFFFFFFFFFFFFFCLL;
                v229 -= 8 * (v285 & 0x3FFFFFFFFFFFFFFCLL);
                if (v285 != (v285 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_696:
                  do
                  {
                    v290 = *((_QWORD *)v229 - 1);
                    v229 -= 8;
                    *--v282 = v290;
                  }
                  while (v229 != v255);
                }
              }
              *(_QWORD *)&v512[136] = v282;
              *(_QWORD *)&v512[144] = v230;
              *(_QWORD *)&v512[152] = v283;
              if (v255)
                operator delete(v255);
            }
            else
            {
              **(_QWORD **)&v512[144] = v227;
              v230 = v229 + 8;
            }
            *(_QWORD *)&v512[144] = v230;
            v291 = sub_239C77FD4((uint64_t)&v541);
            v292 = v291;
            *(_QWORD *)&v512[160] += v291;
            *(_QWORD *)&v512[168] += 6 * v291;
            v293 = *(char **)&v512[184];
            if (*(_QWORD *)&v512[184] >= *(_QWORD *)&v512[192])
            {
              v295 = *(_BYTE **)&v512[176];
              v296 = *(_QWORD *)&v512[184] - *(_QWORD *)&v512[176];
              v297 = (uint64_t)(*(_QWORD *)&v512[184] - *(_QWORD *)&v512[176]) >> 3;
              v298 = v297 + 1;
              if ((unint64_t)(v297 + 1) >> 61)
                goto LABEL_685;
              v299 = *(_QWORD *)&v512[192] - *(_QWORD *)&v512[176];
              if ((uint64_t)(*(_QWORD *)&v512[192] - *(_QWORD *)&v512[176]) >> 2 > v298)
                v298 = v299 >> 2;
              if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFF8)
                v300 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v300 = v298;
              if (v300)
              {
                if (v300 >> 61)
                  goto LABEL_689;
                v301 = (char *)operator new(8 * v300);
              }
              else
              {
                v301 = 0;
              }
              v322 = &v301[8 * v297];
              v323 = &v301[8 * v300];
              *(_QWORD *)v322 = v292;
              v294 = v322 + 8;
              if (v293 != v295)
              {
                v324 = v293 - v295 - 8;
                if (v324 < 0x58)
                  goto LABEL_697;
                if ((unint64_t)(v293 - v301 - v296) < 0x20)
                  goto LABEL_697;
                v325 = (v324 >> 3) + 1;
                v326 = &v301[8 * v297 - 16];
                v327 = v293 - 16;
                v328 = v325 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v329 = *(_OWORD *)v327;
                  *((_OWORD *)v326 - 1) = *((_OWORD *)v327 - 1);
                  *(_OWORD *)v326 = v329;
                  v326 -= 32;
                  v327 -= 32;
                  v328 -= 4;
                }
                while (v328);
                v322 -= 8 * (v325 & 0x3FFFFFFFFFFFFFFCLL);
                v293 -= 8 * (v325 & 0x3FFFFFFFFFFFFFFCLL);
                if (v325 != (v325 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_697:
                  do
                  {
                    v330 = *((_QWORD *)v293 - 1);
                    v293 -= 8;
                    *((_QWORD *)v322 - 1) = v330;
                    v322 -= 8;
                  }
                  while (v293 != v295);
                }
              }
              *(_QWORD *)&v512[176] = v322;
              *(_QWORD *)&v512[184] = v294;
              *(_QWORD *)&v512[192] = v323;
              if (v295)
                operator delete(v295);
            }
            else
            {
              **(_QWORD **)&v512[184] = v291;
              v294 = v293 + 8;
            }
            *(_QWORD *)&v512[184] = v294;
            v331 = sub_239C77C58((uint64_t)&v541);
            v332 = v331;
            *(int64x2_t *)&v512[160] = vaddq_s64(*(int64x2_t *)&v512[160], vdupq_n_s64(v331));
            v333 = *(char **)&v512[184];
            if (*(_QWORD *)&v512[184] < *(_QWORD *)&v512[192])
            {
              **(_QWORD **)&v512[184] = v331;
              v334 = v333 + 8;
LABEL_539:
              *(_QWORD *)&v512[184] = v334;
              if (((unsigned int (__cdecl *)())v595[3])())
              {
                if (((unsigned int (*)(uint64_t))v595[5])((uint64_t)&v595))
                {
                  ((void (*)(uint64_t))v539[11])((uint64_t)&v539);
                  ((void (*)(uint64_t, double))v595[6])((uint64_t)&v595, v421);
                }
                else
                {
                  ((void (*)(uint64_t))v595[7])((uint64_t)&v595);
                }
                v422 = ((double (*)(uint64_t))v595[4])((uint64_t)&v595);
                ((void (*)(uint64_t, double))v539[12])((uint64_t)&v539, v422);
              }
              v423 = *(_DWORD *)&v551[16];
              v424 = 8 * *(unsigned int *)&v551[16];
              v425 = (v424 + 31) & 0xFFFFFFFE0;
              *(double *)&__dst = 0.0;
              v536 = v425 >> 3;
              *(_QWORD *)v610 = 0;
              malloc_type_posix_memalign((void **)v610, 0x20uLL, v425, 0x100BBD03uLL);
              v426 = *(double **)v610;
              __dst = *(void **)v610;
              if (!*(_QWORD *)v610)
              {
                exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                v501 = std::bad_alloc::bad_alloc(exception);
                __cxa_throw(v501, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
              }
              if (v423)
              {
                memcpy(*(void **)v610, *(const void **)v551, v424);
                v426 = (double *)__dst;
              }
              v171 = v599;
              v537 = *(_DWORD *)&v551[16];
              v427 = fabs(*v426);
              if (*(_DWORD *)&v551[16] != 1)
              {
                v428 = v426 + 1;
                v429 = 8 * *(unsigned int *)&v551[16] - 8;
                do
                {
                  v430 = *v428++;
                  v431 = fabs(v430);
                  if (v427 < v431)
                    v427 = v431;
                  v429 -= 8;
                }
                while (v429);
              }
              if (v427 < v427 * *(double *)&v597)
              {
                if (BYTE8(v596))
                {
                  v432 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
                  std::ios_base::getloc((const std::ios_base *)((char *)v432 + *(_QWORD *)(*v432 - 24)));
                  v433 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
                  ((void (*)(const std::locale::facet *, uint64_t))v433->__vftable[2].~facet_0)(v433, 10);
                  std::locale::~locale((std::locale *)v610);
                  std::ostream::put();
                  std::ostream::flush();
                  sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
                  v434 = (_QWORD *)std::ostream::operator<<();
                  sub_239458500(v434, (uint64_t)"][", 2);
                  if (v427 == 0.0)
                    sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
                  else
                    std::ostream::operator<<();
                  sub_239458500(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
                  v495 = (_QWORD *)std::ostream::operator<<();
                  v496 = sub_239458500(v495, (uint64_t)"]", 1);
                  std::ios_base::getloc((const std::ios_base *)((char *)v496 + *(_QWORD *)(*v496 - 24)));
                  v497 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
                  ((void (*)(const std::locale::facet *, uint64_t))v497->__vftable[2].~facet_0)(v497, 10);
                  std::locale::~locale((std::locale *)v610);
                  std::ostream::put();
                  std::ostream::flush();
                }
                *(_DWORD *)&v512[56] = 1;
                goto LABEL_674;
              }
              v435 = v603;
              kdebug_trace();
              v533 = 0;
              v532 = 0;
              v534 = 0;
              v436 = v427;
              while (1)
              {
                v439 = *(_DWORD *)&v512[48];
                if (*(int *)&v512[48] >= SDWORD1(v596))
                  goto LABEL_663;
                v440 = ++*(_DWORD *)&v512[48];
                if (((unsigned int (*)(uint64_t, uint64_t))v539[2])((uint64_t)&v539, (uint64_t)&v532))
                {
                  v485 = BYTE8(v596);
                  if (BYTE8(v596))
                  {
                    v486 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
                    std::ios_base::getloc((const std::ios_base *)((char *)v486 + *(_QWORD *)(*v486 - 24)));
                    v487 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
                    ((void (*)(const std::locale::facet *, uint64_t))v487->__vftable[2].~facet_0)(v487, 10);
                    std::locale::~locale((std::locale *)v610);
                    std::ostream::put();
                    std::ostream::flush();
                    v485 = 0;
                  }
                  goto LABEL_662;
                }
                ++*(_DWORD *)&v512[52];
                if (v534)
                {
                  v441 = *(double *)v532 * *(double *)v532;
                  if (v534 != 1)
                  {
                    v442 = (double *)((char *)v532 + 8);
                    v443 = (v534 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
                    if (v443 >= 3)
                    {
                      v444 = v443 + 1;
                      v445 = (float64x2_t *)((char *)v532 + 24);
                      v446 = v444 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v447 = vmulq_f64(v445[-1], v445[-1]);
                        v448 = vmulq_f64(*v445, *v445);
                        v441 = v441 + v447.f64[0] + v447.f64[1] + v448.f64[0] + v448.f64[1];
                        v445 += 2;
                        v446 -= 4;
                      }
                      while (v446);
                      if (v444 == (v444 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_572;
                      v442 += v444 & 0x3FFFFFFFFFFFFFFCLL;
                    }
                    do
                    {
                      v449 = *v442++;
                      v441 = v441 + v449 * v449;
                    }
                    while (v442 != (double *)((char *)v532 + 8 * v534));
                  }
                }
                else
                {
                  v441 = 0.0;
                }
LABEL_572:
                v450 = sqrt(v441);
                if (v450 < *((double *)&v597 + 1) * (v185 + *((double *)&v597 + 1)) && v439 >= (int)v596)
                {
                  if (BYTE8(v596))
                  {
                    v490 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
                    std::ios_base::getloc((const std::ios_base *)((char *)v490 + *(_QWORD *)(*v490 - 24)));
                    v491 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
                    ((void (*)(const std::locale::facet *, uint64_t))v491->__vftable[2].~facet_0)(v491, 10);
                    std::locale::~locale((std::locale *)v610);
                    std::ostream::put();
                    std::ostream::flush();
                    ((void (*)(uint64_t, double, double, double, double))v595[8])((uint64_t)&v595, v435, v450, v436, v427);
                  }
                  v485 = 2;
LABEL_662:
                  *(_DWORD *)&v512[56] = v485;
LABEL_663:
                  *(double *)&v512[72] = v603;
                  if (v600)
                    (*(void (**)(_BYTE *))(*(_QWORD *)v600 + 48))(v600);
                  free(v532);
                  v171 = v599;
LABEL_674:
                  free(__dst);
                  v224 = v609;
                  if (!v609)
LABEL_675:
                    sub_2394172E0();
LABEL_247:
                  (*(void (**)(std::string *))(v224->__r_.__value_.__r.__words[0] + 48))(v224);
                  v225 = v609;
                  if (v609 == &v608)
                  {
                    v226 = 4;
                    v225 = &v608;
LABEL_253:
                    (*(void (**)(void))(v225->__r_.__value_.__r.__words[0] + 8 * v226))();
                  }
                  else if (v609)
                  {
                    v226 = 5;
                    goto LABEL_253;
                  }
                  kdebug_trace();
                  sub_239C19F80(v1 + 240, (__int128 *)v512);
                  if (*(_QWORD *)&v512[176])
                  {
                    *(_QWORD *)&v512[184] = *(_QWORD *)&v512[176];
                    operator delete(*(void **)&v512[176]);
                  }
                  if (*(_QWORD *)&v512[136])
                  {
                    *(_QWORD *)&v512[144] = *(_QWORD *)&v512[136];
                    operator delete(*(void **)&v512[136]);
                  }
                  if (*(_QWORD *)&v512[104])
                  {
                    *(_QWORD *)&v512[112] = *(_QWORD *)&v512[104];
                    operator delete(*(void **)&v512[104]);
                  }
                  if (*(_QWORD *)&v512[80])
                  {
                    *(_QWORD *)&v512[88] = *(_QWORD *)&v512[80];
                    operator delete(*(void **)&v512[80]);
                  }
                  if ((v512[47] & 0x80000000) != 0)
                    operator delete(*(void **)&v512[24]);
                  if ((v512[23] & 0x80000000) != 0)
                    operator delete(*(void **)v512);
                  v231 = v541.i64[1];
                  if ((double *)v541.i64[1] != &v542)
                  {
                    do
                    {
                      if (*(_BYTE *)(v231 + 44))
                      {
                        v236 = *(_OWORD **)(v231 + 48);
                        v237 = *(_OWORD *)(v231 + 56);
                        v238 = *(_OWORD *)(v231 + 72);
                        v239 = *(_OWORD *)(v231 + 104);
                        v236[2] = *(_OWORD *)(v231 + 88);
                        v236[3] = v239;
                        *v236 = v237;
                        v236[1] = v238;
                        v240 = *(_OWORD *)(v231 + 120);
                        v241 = *(_OWORD *)(v231 + 136);
                        v242 = *(_OWORD *)(v231 + 168);
                        v236[6] = *(_OWORD *)(v231 + 152);
                        v236[7] = v242;
                        v236[4] = v240;
                        v236[5] = v241;
                      }
                      v243 = *(double **)(v231 + 8);
                      if (v243)
                      {
                        do
                        {
                          v244 = v243;
                          v243 = *(double **)v243;
                        }
                        while (v243);
                      }
                      else
                      {
                        do
                        {
                          v244 = *(double **)(v231 + 16);
                          _ZF = *(_QWORD *)v244 == v231;
                          v231 = (uint64_t)v244;
                        }
                        while (!_ZF);
                      }
                      v231 = (uint64_t)v244;
                    }
                    while (v244 != &v542);
                  }
                  v232 = v543.i64[1];
                  if ((_BYTE *)v543.i64[1] != v544)
                  {
                    do
                    {
                      if (*(_BYTE *)(v232 + 44))
                        **(_QWORD **)(v232 + 48) = *(_QWORD *)(v232 + 56);
                      v245 = *(_QWORD **)(v232 + 8);
                      if (v245)
                      {
                        do
                        {
                          v246 = v245;
                          v245 = (_QWORD *)*v245;
                        }
                        while (v245);
                      }
                      else
                      {
                        do
                        {
                          v246 = *(_BYTE **)(v232 + 16);
                          _ZF = *(_QWORD *)v246 == v232;
                          v232 = (uint64_t)v246;
                        }
                        while (!_ZF);
                      }
                      v232 = (uint64_t)v246;
                    }
                    while (v246 != v544);
                  }
                  if (*(_BYTE *)(v1 + 88))
                  {
                    sub_2394988CC((uint64_t)v512);
                    *(_QWORD *)v610 = operator new(0x20uLL);
                    *(_OWORD *)&v610[8] = xmmword_239F0C4A0;
                    strcpy(*(char **)v610, "Object Transform Optimization");
                    sub_239C1A0F4(v1 + 240, &v512[16], (uint64_t)v610);
                    if ((v610[23] & 0x80000000) != 0)
                      operator delete(*(void **)v610);
                    *(_QWORD *)v512 = *MEMORY[0x24BEDB7F0];
                    v233 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&v512[*(_QWORD *)(*(_QWORD *)v512 - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&v512[16] = v233;
                    *(_QWORD *)&v512[24] = MEMORY[0x24BEDB848] + 16;
                    if ((v512[111] & 0x80000000) != 0)
                      operator delete(*(void **)&v512[88]);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x23B83E250](&v512[128]);
                  }
                  v595 = off_250AFEA50;
                  v234 = v601;
                  if (v602 == v601)
                  {
                    v235 = 4;
LABEL_296:
                    (*(void (**)(void))(*v234 + 8 * v235))();
                  }
                  else if (v602)
                  {
                    v235 = 5;
                    v234 = v602;
                    goto LABEL_296;
                  }
                  if (v600 == v599)
                  {
                    v247 = 4;
LABEL_301:
                    (*(void (**)(_QWORD *))(*v171 + 8 * v247))(v171);
                  }
                  else if (v600)
                  {
                    v247 = 5;
                    v171 = v600;
                    goto LABEL_301;
                  }
                  v165 = 1;
LABEL_303:
                  v539 = off_250AFC0D8;
                  if ((_DWORD)v589 != 2)
                    sub_239A23A84((uint64_t)&v589 + 8);
                  sub_239C77324((uint64_t)&v539);
                  if ((v165 & 1) != 0)
                    goto LABEL_235;
                  return 0;
                }
                ((void (*)(uint64_t, _QWORD *))v539[5])((uint64_t)&v539, &v532);
                v452 = *(unsigned int *)&v551[16];
                sub_23945215C((uint64_t)&__dst, *(unsigned int *)&v551[16]);
                if ((_DWORD)v452)
                  memcpy(__dst, *(const void **)v551, 8 * v452);
                v537 = *(_DWORD *)&v551[16];
                if (v602)
                  (*(void (**)(_BYTE *))(*(_QWORD *)v602 + 48))(v602);
                v529 = 0;
                v530 = 0;
                v531 = 0;
                v453 = *(const void **)&v512[104];
                v454 = *(_QWORD *)&v512[112] - *(_QWORD *)&v512[104];
                if (*(_QWORD *)&v512[112] != *(_QWORD *)&v512[104])
                {
                  if (v454 < 0)
                    sub_2394189F8();
                  v529 = operator new(*(_QWORD *)&v512[112] - *(_QWORD *)&v512[104]);
                  v530 = (char *)v529;
                  v455 = (char *)v529 + 8 * (v454 >> 3);
                  v531 = v455;
                  memcpy(v529, v453, v454);
                  v530 = v455;
                }
                v435 = sub_239C778BC((uint64_t)&v539, (uint64_t)&v512[104]);
                v436 = fabs(*(double *)__dst);
                if (v537 != 1)
                {
                  v456 = (double *)((char *)__dst + 8);
                  v457 = 8 * v537 - 8;
                  do
                  {
                    v458 = *v456++;
                    v459 = fabs(v458);
                    if (v436 < v459)
                      v436 = v459;
                    v457 -= 8;
                  }
                  while (v457);
                }
                if (BYTE8(v596))
                  ((void (*)(uint64_t, double, double, double, double))v595[8])((uint64_t)&v595, v435, v450, v436, v427);
                if (v435 == 0.0)
                {
                  if (BYTE8(v596))
                  {
                    v460 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
                    v461 = sub_239458500(v460, (uint64_t)"N.A.", 4);
                    std::ios_base::getloc((const std::ios_base *)((char *)v461 + *(_QWORD *)(*v461 - 24)));
                    v462 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
                    ((void (*)(const std::locale::facet *, uint64_t))v462->__vftable[2].~facet_0)(v462, 10);
                    std::locale::~locale((std::locale *)v610);
                    std::ostream::put();
                    goto LABEL_615;
                  }
                  goto LABEL_616;
                }
                if (vabdd_f64(v435, v603) < v435 * *(double *)v598 && v439 >= (int)v596)
                {
                  if (BYTE8(v596))
                  {
                    sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
                    v469 = (_QWORD *)std::ostream::operator<<();
                    std::ios_base::getloc((const std::ios_base *)((char *)v469 + *(_QWORD *)(*v469 - 24)));
                    v470 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
                    ((void (*)(const std::locale::facet *, uint64_t))v470->__vftable[2].~facet_0)(v470, 10);
                    std::locale::~locale((std::locale *)v610);
                    std::ostream::put();
LABEL_615:
                    std::ostream::flush();
                  }
LABEL_616:
                  v603 = v435;
                  v471 = 3;
LABEL_617:
                  v437 = 0;
                  *(_DWORD *)&v512[56] = v471;
                  v438 = (char *)v529;
                  if (!v529)
                    goto LABEL_559;
                  goto LABEL_558;
                }
                if (DWORD2(v550))
                {
                  memset(v610, 0, 20);
                  ((void (*)(uint64_t, uint64_t))v539[19])((uint64_t)&v539, (uint64_t)v610);
                  v464 = ((BOOL (*)(double *, uint64_t, double **, double **, double))v595[10])((double *)&v595, (uint64_t)&v532, (double **)&__dst, (double **)v610, v435);
                  free(*(void **)v610);
                  if (!v464)
                    goto LABEL_620;
                }
                else if (!((BOOL (*)(double *, uint64_t, double **, double))v595[9])((double *)&v595, (uint64_t)&v532, (double **)&__dst, v435))
                {
LABEL_620:
                  --*(_DWORD *)&v512[52];
                  v472 = v541.i64[1];
                  if ((double *)v541.i64[1] != &v542)
                  {
                    do
                    {
                      if (*(_BYTE *)(v472 + 44))
                      {
                        *(_OWORD *)(v472 + 56) = *(_OWORD *)(v472 + 200);
                        *(_OWORD *)(v472 + 72) = *(_OWORD *)(v472 + 216);
                        *(_OWORD *)(v472 + 88) = *(_OWORD *)(v472 + 232);
                        *(_OWORD *)(v472 + 104) = *(_OWORD *)(v472 + 248);
                        *(_OWORD *)(v472 + 120) = *(_OWORD *)(v472 + 264);
                        *(_OWORD *)(v472 + 136) = *(_OWORD *)(v472 + 280);
                        v475 = *(_OWORD *)(v472 + 312);
                        *(_OWORD *)(v472 + 152) = *(_OWORD *)(v472 + 296);
                        *(_OWORD *)(v472 + 168) = v475;
                      }
                      v476 = *(double **)(v472 + 8);
                      if (v476)
                      {
                        do
                        {
                          v477 = v476;
                          v476 = *(double **)v476;
                        }
                        while (v476);
                      }
                      else
                      {
                        do
                        {
                          v477 = *(double **)(v472 + 16);
                          _ZF = *(_QWORD *)v477 == v472;
                          v472 = (uint64_t)v477;
                        }
                        while (!_ZF);
                      }
                      v472 = (uint64_t)v477;
                    }
                    while (v477 != &v542);
                  }
                  v473 = v543.i64[1];
                  if ((_BYTE *)v543.i64[1] != v544)
                  {
                    do
                    {
                      if (*(_BYTE *)(v473 + 44))
                        *(_QWORD *)(v473 + 56) = *(_QWORD *)(v473 + 80);
                      v478 = *(_QWORD **)(v473 + 8);
                      if (v478)
                      {
                        do
                        {
                          v479 = v478;
                          v478 = (_QWORD *)*v478;
                        }
                        while (v478);
                      }
                      else
                      {
                        do
                        {
                          v479 = *(_BYTE **)(v473 + 16);
                          _ZF = *(_QWORD *)v479 == v473;
                          v473 = (uint64_t)v479;
                        }
                        while (!_ZF);
                      }
                      v473 = (uint64_t)v479;
                    }
                    while (v479 != v544);
                  }
                  LOBYTE(v547[0]) = 0;
                  *(_WORD *)((char *)v547 + 3) = 0;
                  BYTE1(v547[0]) = BYTE2(v547[0]);
                  sub_23945D3D0(&v512[104], (char *)v529, v530, (v530 - (_BYTE *)v529) >> 3);
                  if (((unsigned int (__cdecl *)())v595[3])())
                  {
                    v474 = ((double (*)(uint64_t))v595[4])((uint64_t)&v595);
                    ((void (*)(uint64_t, double))v539[12])((uint64_t)&v539, v474);
                  }
                  goto LABEL_624;
                }
                if (((unsigned int (__cdecl *)())v595[3])())
                {
                  v465 = ((double (*)(uint64_t))v595[4])((uint64_t)&v595);
                  ((void (*)(uint64_t, double))v539[12])((uint64_t)&v539, v465);
                }
                if (v436 < v427 * *(double *)&v597 && v439 >= (int)v596)
                {
                  if (BYTE8(v596))
                  {
                    v480 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
                    std::ios_base::getloc((const std::ios_base *)((char *)v480 + *(_QWORD *)(*v480 - 24)));
                    v481 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
                    ((void (*)(const std::locale::facet *, uint64_t))v481->__vftable[2].~facet_0)(v481, 10);
                    std::locale::~locale((std::locale *)v610);
                    std::ostream::put();
                    std::ostream::flush();
                    ((void (*)(uint64_t, double, double, double, double))v595[8])((uint64_t)&v595, v435, v450, v436, v427);
                  }
                  v471 = 1;
                  goto LABEL_617;
                }
                if (v440 < SDWORD1(v596) && v598[8])
                {
                  *(_QWORD *)v610 = &v539;
                  *(_QWORD *)&v610[8] = *(_QWORD *)&v598[16];
                  *(_QWORD *)&v610[16] = &v538;
                  sub_239C773F0((double *)v610);
                  v467 = 0x3DDB7CDFD9D7BDBBLL;
                  v468 = 1.0e20;
                  if (v538 > 0.0)
                  {
                    v467 = *(_QWORD *)&v538;
                    v468 = 1.0 / (v538 * v538);
                  }
                  v540.i64[0] = v467;
                  *(double *)&v540.i64[1] = v468;
                  memset(v547, 0, 5);
                  v603 = sub_239C778BC((uint64_t)&v539, (uint64_t)&v512[104]);
                }
LABEL_624:
                if (v440 < SDWORD1(v596) && v600)
                  (*(void (**)(_BYTE *))(*(_QWORD *)v600 + 48))(v600);
                v437 = 1;
                v438 = (char *)v529;
                if (!v529)
                  goto LABEL_559;
LABEL_558:
                v530 = v438;
                operator delete(v438);
LABEL_559:
                if ((v437 & 1) == 0)
                  goto LABEL_663;
              }
            }
            v335 = *(_BYTE **)&v512[176];
            v336 = *(_QWORD *)&v512[184] - *(_QWORD *)&v512[176];
            v337 = (uint64_t)(*(_QWORD *)&v512[184] - *(_QWORD *)&v512[176]) >> 3;
            v338 = v337 + 1;
            if (!((unint64_t)(v337 + 1) >> 61))
            {
              v339 = *(_QWORD *)&v512[192] - *(_QWORD *)&v512[176];
              if ((uint64_t)(*(_QWORD *)&v512[192] - *(_QWORD *)&v512[176]) >> 2 > v338)
                v338 = v339 >> 2;
              if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFF8)
                v340 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v340 = v338;
              if (!v340)
              {
                v341 = 0;
LABEL_530:
                v412 = &v341[8 * v337];
                v413 = &v341[8 * v340];
                *(_QWORD *)v412 = v332;
                v334 = v412 + 8;
                if (v333 != v335)
                {
                  v414 = v333 - v335 - 8;
                  if (v414 < 0x58)
                    goto LABEL_698;
                  if ((unint64_t)(v333 - &v341[v336]) < 0x20)
                    goto LABEL_698;
                  v415 = (v414 >> 3) + 1;
                  v416 = &v341[8 * v337 - 16];
                  v417 = v333 - 16;
                  v418 = v415 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v419 = *(_OWORD *)v417;
                    *((_OWORD *)v416 - 1) = *((_OWORD *)v417 - 1);
                    *(_OWORD *)v416 = v419;
                    v416 -= 32;
                    v417 -= 32;
                    v418 -= 4;
                  }
                  while (v418);
                  v412 -= 8 * (v415 & 0x3FFFFFFFFFFFFFFCLL);
                  v333 -= 8 * (v415 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v415 != (v415 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_698:
                    do
                    {
                      v420 = *((_QWORD *)v333 - 1);
                      v333 -= 8;
                      *((_QWORD *)v412 - 1) = v420;
                      v412 -= 8;
                    }
                    while (v333 != v335);
                  }
                }
                *(_QWORD *)&v512[176] = v412;
                *(_QWORD *)&v512[184] = v334;
                *(_QWORD *)&v512[192] = v413;
                if (v335)
                  operator delete(v335);
                goto LABEL_539;
              }
              if (!(v340 >> 61))
              {
                v341 = (char *)operator new(8 * v340);
                goto LABEL_530;
              }
LABEL_689:
              sub_239418A80();
            }
LABEL_685:
            sub_2394189F8();
          }
          v174 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 16))(v174);
        }
        v602 = (_BYTE *)v174;
        goto LABEL_147;
      }
      v172 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v172 + 16))(v172);
    }
    v600 = (_BYTE *)v172;
    goto LABEL_120;
  }
  result = 0;
  if (v4 != 1)
    return result;
  __asm { FMOV            V0.2D, #1.0 }
  v540 = _Q0;
  v541 = _Q0;
  v542 = 2.0;
  sub_239C921F8((uint64_t)&v543);
  BYTE4(v550) = 0;
  LODWORD(v550) = 0;
  *((_QWORD *)&v550 + 1) = 0;
  v551[0] = 0;
  v555 = 0;
  v554 = 0;
  *(_OWORD *)&v551[8] = 0u;
  __src = 0u;
  LODWORD(v553) = 0;
  v11 = operator new();
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)v11 = &off_250AFE480;
  *((_QWORD *)&v557 + 1) = v11;
  v12 = operator new();
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_QWORD *)(v12 + 96) = 0;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)v12 = &off_250AFE3C0;
  *(_QWORD *)v558 = v12;
  v13 = operator new();
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 104) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)v13 = &off_250AFE000;
  v556 = v13;
  v14 = operator new();
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_QWORD *)(v14 + 96) = 0;
  *(_QWORD *)(v14 + 104) = 0;
  *(_QWORD *)(v14 + 88) = 0;
  *(_QWORD *)v14 = &off_250AFDF40;
  memset(&v558[8], 0, 32);
  v559 = 0u;
  *(_QWORD *)&v557 = v14;
  v560 = &v543;
  p_src = &__src;
  v563 = 0;
  v562 = 0;
  v566 = 0u;
  memset(&v565[8], 0, 80);
  *(_QWORD *)&v564 = 0;
  v567 = off_250AFC870;
  v572 = 0;
  v571 = 0;
  LODWORD(v573) = 0;
  v575 = 0;
  v574 = 0;
  v570 = 0;
  v568 = 0;
  v569 = 0;
  v15 = operator new();
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_QWORD *)(v15 + 96) = 0;
  *(_QWORD *)(v15 + 104) = 0;
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)v15 = &off_250AFE480;
  *((_QWORD *)&v577 + 1) = v15;
  v16 = operator new();
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 8) = 0u;
  *(_QWORD *)(v16 + 96) = 0;
  *(_QWORD *)(v16 + 104) = 0;
  *(_QWORD *)(v16 + 88) = 0;
  *(_QWORD *)v16 = &off_250AFE3C0;
  *(_QWORD *)v578 = v16;
  v17 = operator new();
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_QWORD *)(v17 + 96) = 0;
  *(_QWORD *)(v17 + 104) = 0;
  *(_QWORD *)(v17 + 88) = 0;
  *(_QWORD *)v17 = &off_250AFE000;
  v576 = v17;
  v18 = operator new();
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_OWORD *)(v18 + 8) = 0u;
  *(_QWORD *)(v18 + 88) = 0;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_QWORD *)v18 = &off_250AFDF40;
  *(_QWORD *)&v577 = v18;
  *((_QWORD *)&v583 + 1) = 0;
  memset(&v578[8], 0, 32);
  v579 = 0u;
  v580 = 0;
  v584 = &v560;
  v567 = (void (**)())&off_250AFC830;
  v588[0] = 0;
  LOWORD(v587) = v587 & 0x7FF0 | 0xC;
  BYTE4(v587) = 1;
  *((_QWORD *)&v587 + 1) = 0;
  v585 = 0u;
  v586 = 0;
  v19 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  *(_OWORD *)&v588[1] = 0u;
  v589 = 0u;
  *(_QWORD *)v590 = 0;
  *((_QWORD *)&v585 + 1) = v19;
  v539 = off_250AFC4F8;
  *(_DWORD *)&v590[8] = 2;
  *(_DWORD *)v592 = -3;
  memset(&v592[26], 0, 46);
  *(_DWORD *)&v592[8] = -3;
  *(_QWORD *)&v592[12] = 0;
  *(_WORD *)&v592[24] = 1;
  v593 = 1;
  v20 = *(void **)(v1 + 464);
  v22 = *(char **)(v1 + 48);
  v21 = *(char **)(v1 + 56);
  v23 = v21 - v22;
  v24 = (v21 - v22) >> 7;
  v25 = *(_QWORD *)(v1 + 480) - (_QWORD)v20;
  *(_DWORD *)&v592[20] = 0;
  v594 = 0;
  *(_QWORD *)(v1 + 472) = v20;
  if (v24 > v25 >> 7)
  {
    if ((v23 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v26 = (char *)operator new(v23);
    *(_QWORD *)(v1 + 464) = v26;
    *(_QWORD *)(v1 + 472) = v26;
    *(_QWORD *)(v1 + 480) = &v26[128 * v24];
    if (v20)
    {
      operator delete(v20);
      v22 = *(char **)(v1 + 48);
      v21 = *(char **)(v1 + 56);
    }
  }
  if (v22 != v21)
  {
    v27 = *(char **)(v1 + 472);
    do
    {
      v35 = *(_QWORD *)(v1 + 480);
      if ((unint64_t)v27 < v35)
      {
        v28 = *(_OWORD *)v22;
        v29 = *((_OWORD *)v22 + 1);
        v30 = *((_OWORD *)v22 + 3);
        *((_OWORD *)v27 + 2) = *((_OWORD *)v22 + 2);
        *((_OWORD *)v27 + 3) = v30;
        *(_OWORD *)v27 = v28;
        *((_OWORD *)v27 + 1) = v29;
        v31 = *((_OWORD *)v22 + 4);
        v32 = *((_OWORD *)v22 + 5);
        v33 = *((_OWORD *)v22 + 7);
        *((_OWORD *)v27 + 6) = *((_OWORD *)v22 + 6);
        *((_OWORD *)v27 + 7) = v33;
        *((_OWORD *)v27 + 4) = v31;
        *((_OWORD *)v27 + 5) = v32;
        v34 = v27 + 128;
      }
      else
      {
        v36 = *(char **)(v1 + 464);
        v37 = (v27 - v36) >> 7;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 57)
          sub_2394189F8();
        v39 = v35 - (_QWORD)v36;
        if (v39 >> 6 > v38)
          v38 = v39 >> 6;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFF80)
          v40 = 0x1FFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          if (v40 >> 57)
            sub_239418A80();
          v41 = (char *)operator new(v40 << 7);
        }
        else
        {
          v41 = 0;
        }
        v42 = &v41[128 * v37];
        v43 = *(_OWORD *)v22;
        v44 = *((_OWORD *)v22 + 1);
        v45 = *((_OWORD *)v22 + 3);
        *((_OWORD *)v42 + 2) = *((_OWORD *)v22 + 2);
        *((_OWORD *)v42 + 3) = v45;
        *(_OWORD *)v42 = v43;
        *((_OWORD *)v42 + 1) = v44;
        v46 = *((_OWORD *)v22 + 4);
        v47 = *((_OWORD *)v22 + 5);
        v48 = *((_OWORD *)v22 + 7);
        *((_OWORD *)v42 + 6) = *((_OWORD *)v22 + 6);
        *((_OWORD *)v42 + 7) = v48;
        *((_OWORD *)v42 + 4) = v46;
        *((_OWORD *)v42 + 5) = v47;
        v49 = v42;
        if (v27 != v36)
        {
          do
          {
            v50 = *((_OWORD *)v27 - 8);
            v51 = *((_OWORD *)v27 - 7);
            v52 = *((_OWORD *)v27 - 5);
            *((_OWORD *)v49 - 6) = *((_OWORD *)v27 - 6);
            *((_OWORD *)v49 - 5) = v52;
            *((_OWORD *)v49 - 8) = v50;
            *((_OWORD *)v49 - 7) = v51;
            v53 = *((_OWORD *)v27 - 4);
            v54 = *((_OWORD *)v27 - 3);
            v55 = *((_OWORD *)v27 - 1);
            *((_OWORD *)v49 - 2) = *((_OWORD *)v27 - 2);
            *((_OWORD *)v49 - 1) = v55;
            *((_OWORD *)v49 - 4) = v53;
            *((_OWORD *)v49 - 3) = v54;
            v49 -= 128;
            v27 -= 128;
          }
          while (v27 != v36);
          v27 = *(char **)(v1 + 464);
        }
        v34 = v42 + 128;
        *(_QWORD *)(v1 + 464) = v49;
        *(_QWORD *)(v1 + 472) = v42 + 128;
        *(_QWORD *)(v1 + 480) = &v41[128 * v40];
        if (v27)
          operator delete(v27);
      }
      *(_QWORD *)(v1 + 472) = v34;
      v22 += 128;
      v27 = v34;
    }
    while (v22 != v21);
    if (*(_QWORD *)(v1 + 56) != *(_QWORD *)(v1 + 48))
    {
      v102 = *(_QWORD *)(v1 + 464);
      if (v102)
      {
        v103 = 0;
        for (j = 1; ; ++j)
        {
          *(_DWORD *)v512 = j - 1;
          v105 = (_OWORD *)(v102 + v103);
          v512[4] = 1;
          *(_QWORD *)&v512[8] = v102 + v103;
          if (v102)
          {
            *(_OWORD *)&v512[80] = v105[4];
            *(_OWORD *)&v512[96] = v105[5];
            *(_OWORD *)&v512[112] = v105[6];
            *(_OWORD *)&v512[128] = v105[7];
            *(_OWORD *)&v512[16] = *v105;
            *(_OWORD *)&v512[32] = v105[1];
            *(_OWORD *)&v512[48] = v105[2];
            *(_OWORD *)&v512[64] = v105[3];
            if (sub_239C75C58((uint64_t)&v543, (int *)v512))
              LODWORD(v550) = 0;
          }
          if (j >= (uint64_t)(*(_QWORD *)(v1 + 56) - *(_QWORD *)(v1 + 48)) >> 7)
            break;
          v102 = *(_QWORD *)(v1 + 464);
          v103 += 128;
        }
      }
    }
  }
  v106 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 488) = v106;
  v525 = 0;
  v527 = v1 + 488;
  v526 = *(_BYTE *)(v1 + 456) ^ 1;
  v528 = v106;
  if (sub_239C76078((uint64_t)&v543, &v525))
    LODWORD(v550) = 0;
  v107 = *(_QWORD *)(v1 + 8) - *(_QWORD *)v1;
  if (v107)
  {
    v108 = 0;
    LODWORD(v109) = 0;
    v110 = 0;
    v111 = v107 / 24;
    if ((unint64_t)(v107 / 24) <= 1)
      v112 = 1;
    else
      v112 = v107 / 24;
    v510 = v1;
    v502 = v112;
    v504 = v107 / 24;
    do
    {
      v113 = v1;
      v114 = (_QWORD *)(*(_QWORD *)v1 + 24 * v110);
      v115 = v114[1] - *v114;
      if (v115)
      {
        v508 = v108;
        v116 = 0;
        v117 = (_QWORD *)(*(_QWORD *)(v113 + 24) + 24 * v110);
        v506 = v110;
        v118 = (void (**)())v110;
        v109 = (int)v109;
        if ((unint64_t)(v115 >> 7) <= 1)
          v119 = 1;
        else
          v119 = v115 >> 7;
        do
        {
          v120 = *v114 + v116;
          v121 = (_OWORD *)(*v117 + v116);
          v513 = v121[4];
          v514 = v121[5];
          v515 = v121[6];
          v516 = v121[7];
          *(_OWORD *)&v512[136] = *v121;
          *(_OWORD *)&v512[152] = v121[1];
          *(_OWORD *)&v512[168] = v121[2];
          *(_OWORD *)&v512[184] = v121[3];
          v122.f64[0] = *(float64_t *)(v120 + 16);
          v123 = *(int64x2_t *)(v120 + 32);
          _D3 = *(_QWORD *)(v120 + 80);
          _Q4 = *(int64x2_t *)(v120 + 64);
          _D5 = *(double *)(v120 + 112);
          _Q6 = *(float64x2_t *)(v120 + 96);
          v128 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v120, v123);
          _Q1 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v120, v123);
          v122.f64[1] = *(float64_t *)(v120 + 48);
          v130 = vextq_s8((int8x16_t)_Q1, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
          v131 = vzip1q_s64(_Q4, (int64x2_t)_Q1);
          v132 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v128, vnegq_f64(_Q6).f64[0]), _Q1, _Q6, 1), v122, _D5, 0);
          _Q4.i64[0] = *(_QWORD *)(v120 + 72);
          __asm
          {
            FMLS            D1, D4, V6.D[1]
            FMLS            D1, D3, V5.D[0]
          }
          _Q4.i64[0] = vdupq_laneq_s64(v131, 1).u64[0];
          _Q4.i64[1] = v130.i64[0];
          _Q1.f64[1] = 1.0;
          *(_QWORD *)v512 = v109;
          *(_OWORD *)&v512[72] = xmmword_239F13AC0;
          *(_OWORD *)&v512[88] = unk_239F13AD0;
          *(_OWORD *)&v512[104] = xmmword_239F13AE0;
          *(_OWORD *)&v512[120] = unk_239F13AF0;
          *(_OWORD *)&v512[8] = xmmword_239F13A80;
          *(_OWORD *)&v512[24] = *(_OWORD *)algn_239F13A90;
          *(_OWORD *)&v512[40] = xmmword_239F13AA0;
          *(float64x2_t *)&v512[56] = xmmword_239F13AB0;
          v521 = v122;
          v522 = _D3;
          v517 = v128;
          v518 = v131.u64[0];
          v519 = _Q4;
          v520 = v130.u64[1];
          v523 = v132;
          v524 = _Q1;
          v595 = v118;
          if ((sub_239C7642C(&v543, (uint64_t *)v512, (unsigned __int32 *)&v595, 0, 0) & 1) == 0)
          {
            v1 = v510;
            v164 = v508;
            goto LABEL_232;
          }
          LODWORD(v550) = 0;
          ++v109;
          v116 += 128;
          --v119;
        }
        while (v119);
        v110 = v506;
        v112 = v502;
        v111 = v504;
      }
      v108 = ++v110 >= v111;
      v1 = v510;
    }
    while (v110 != v112);
  }
  v541.i64[0] = *(_QWORD *)(v1 + 448);
  v166 = *(double *)v541.i64;
  *(double *)&v541.i64[1] = v166 * v166;
  v542 = v166 + v166;
  LODWORD(v550) = 0;
  BYTE4(v550) = 0;
  if (*(_DWORD *)&v551[16] != *(unsigned __int8 *)(v1 + 459))
    *(_DWORD *)&v551[16] = *(unsigned __int8 *)(v1 + 459);
  v595 = off_250AFEA50;
  v167 = *(_OWORD *)(v1 + 96);
  v596 = *(_OWORD *)(v1 + 80);
  v597 = v167;
  *(_OWORD *)v598 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)&v598[9] = *(_OWORD *)(v1 + 121);
  v168 = v599;
  v169 = *(_QWORD *)(v1 + 168);
  if (!v169)
    goto LABEL_107;
  if (v169 != v1 + 144)
  {
    v169 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v169 + 16))(v169);
LABEL_107:
    v600 = (_BYTE *)v169;
    goto LABEL_115;
  }
  v600 = v599;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v169 + 24))(v169, v599);
LABEL_115:
  v173 = *(_QWORD *)(v1 + 200);
  if (!v173)
  {
LABEL_118:
    v602 = (_BYTE *)v173;
    goto LABEL_125;
  }
  if (v173 != v1 + 176)
  {
    v173 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 16))(v173);
    goto LABEL_118;
  }
  v602 = v601;
  (*(void (**)(uint64_t))(*(_QWORD *)v173 + 24))(v173);
LABEL_125:
  v603 = -1.0;
  v595 = (void (**)())&off_250AFE9E8;
  v175 = *(_OWORD *)(v1 + 224);
  v604 = *(_OWORD *)(v1 + 208);
  v605 = v175;
  v606 = *((_QWORD *)&v604 + 1);
  v607 = 0x4000000000000000;
  kdebug_trace();
  ((void (*)(char *@<X8>))v595[2])(v610);
  ((void (*)(std::string *@<X8>))*v539)(&v608);
  if ((v610[23] & 0x80000000) != 0)
  {
    sub_23941A7F8(v512, *(void **)v610, *(unint64_t *)&v610[8]);
  }
  else
  {
    *(_OWORD *)v512 = *(_OWORD *)v610;
    *(_QWORD *)&v512[16] = *(_QWORD *)&v610[16];
  }
  if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&v512[24], v608.__r_.__value_.__l.__data_, v608.__r_.__value_.__l.__size_);
    *(_QWORD *)&v512[48] = 0;
    *(_DWORD *)&v512[56] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v512[64] = _Q0;
    memset(&v512[80], 0, 120);
    if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v608.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)&v512[24] = v608;
    *(_QWORD *)&v512[48] = 0;
    *(_DWORD *)&v512[56] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v512[64] = _Q0;
    memset(&v512[80], 0, 120);
  }
  if ((v610[23] & 0x80000000) != 0)
    operator delete(*(void **)v610);
  sub_239C2F538(v512, 1uLL, 2uLL);
  kdebug_trace();
  v178 = ((double (*)(_QWORD *))v539[4])(&v539);
  v609 = 0;
  *(_QWORD *)v610 = &off_250AFC8B0;
  *(_QWORD *)&v610[8] = &v539;
  *(_QWORD *)&v610[16] = v551[0];
  v611 = v610;
  sub_23965A910(v610, &v608);
  v179 = v611;
  if (v611 == v610)
  {
    v180 = 4;
    v179 = v610;
  }
  else
  {
    if (!v611)
      goto LABEL_139;
    v180 = 5;
  }
  (*(void (**)(void))(*v179 + 8 * v180))();
LABEL_139:
  if (((unsigned int (__cdecl *)())v595[3])())
  {
    v551[0] = 1;
    if (((unsigned int (*)(uint64_t))v595[5])((uint64_t)&v595))
      ((void (*)(uint64_t, double))v595[6])((uint64_t)&v595, 0.0);
    else
      ((void (*)(uint64_t))v595[7])((uint64_t)&v595);
    v181 = ((double (*)(uint64_t))v595[4])((uint64_t)&v595);
    ((void (*)(uint64_t, double))v539[12])((uint64_t)&v539, v181);
  }
  kdebug_trace();
  if (v598[8])
  {
    *(_QWORD *)v610 = &v539;
    *(_QWORD *)&v610[8] = *(_QWORD *)&v598[16];
    *(_QWORD *)&v610[16] = &__dst;
    sub_239C93680((double *)v610);
    v189 = (uint64_t)__dst;
    if (*(double *)&__dst <= 0.0)
    {
      v190 = 1.0e20;
      v189 = 0x3DDB7CDFD9D7BDBBLL;
    }
    else
    {
      v190 = 1.0 / (*(double *)&__dst * *(double *)&__dst);
    }
    v540.i64[0] = v189;
    *(double *)&v540.i64[1] = v190;
    LODWORD(v550) = 0;
    BYTE4(v550) = 0;
  }
  if (((unsigned int (*)(uint64_t))v539[1])((uint64_t)&v539))
  {
    if (BYTE8(v596))
    {
      v191 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
      std::ios_base::getloc((const std::ios_base *)((char *)v191 + *(_QWORD *)(*v191 - 24)));
      v192 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v192->__vftable[2].~facet_0)(v192, 10);
      std::locale::~locale((std::locale *)v610);
      std::ostream::put();
      std::ostream::flush();
    }
    *(_DWORD *)&v512[56] = 0;
    v193 = v609;
    if (!v609)
      goto LABEL_670;
    goto LABEL_176;
  }
  *(_QWORD *)&v512[64] = sub_239C93B4C((uint64_t)&v539, (uint64_t)&v512[80]);
  *(_QWORD *)&v512[72] = *(_QWORD *)&v512[64];
  v603 = *(double *)&v512[64];
  sub_23945D3D0(&v512[104], *(char **)&v512[80], *(char **)&v512[88], (uint64_t)(*(_QWORD *)&v512[88] - *(_QWORD *)&v512[80]) >> 3);
  kdebug_trace();
  v196 = sub_239C78350((uint64_t)&v543);
  v197 = v196;
  *(_QWORD *)&v512[128] += v196;
  v198 = *(char **)&v512[144];
  if (*(_QWORD *)&v512[144] >= *(_QWORD *)&v512[152])
  {
    v248 = *(_BYTE **)&v512[136];
    v249 = *(_QWORD *)&v512[144] - *(_QWORD *)&v512[136];
    v250 = (uint64_t)(*(_QWORD *)&v512[144] - *(_QWORD *)&v512[136]) >> 3;
    v251 = v250 + 1;
    if ((unint64_t)(v250 + 1) >> 61)
      sub_2394189F8();
    v252 = *(_QWORD *)&v512[152] - *(_QWORD *)&v512[136];
    if ((uint64_t)(*(_QWORD *)&v512[152] - *(_QWORD *)&v512[136]) >> 2 > v251)
      v251 = v252 >> 2;
    if ((unint64_t)v252 >= 0x7FFFFFFFFFFFFFF8)
      v253 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v253 = v251;
    if (v253)
    {
      if (v253 >> 61)
        sub_239418A80();
      v254 = (char *)operator new(8 * v253);
    }
    else
    {
      v254 = 0;
    }
    v262 = (unint64_t *)&v254[8 * v250];
    v263 = &v254[8 * v253];
    *v262 = v197;
    v199 = v262 + 1;
    if (v198 != v248)
    {
      v264 = v198 - v248 - 8;
      if (v264 < 0x58)
        goto LABEL_699;
      if ((unint64_t)(v198 - v254 - v249) < 0x20)
        goto LABEL_699;
      v265 = (v264 >> 3) + 1;
      v266 = &v254[8 * v250 - 16];
      v267 = v198 - 16;
      v268 = v265 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v269 = *(_OWORD *)v267;
        *((_OWORD *)v266 - 1) = *((_OWORD *)v267 - 1);
        *(_OWORD *)v266 = v269;
        v266 -= 32;
        v267 -= 32;
        v268 -= 4;
      }
      while (v268);
      v262 -= v265 & 0x3FFFFFFFFFFFFFFCLL;
      v198 -= 8 * (v265 & 0x3FFFFFFFFFFFFFFCLL);
      if (v265 != (v265 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_699:
        do
        {
          v270 = *((_QWORD *)v198 - 1);
          v198 -= 8;
          *--v262 = v270;
        }
        while (v198 != v248);
      }
    }
    *(_QWORD *)&v512[136] = v262;
    *(_QWORD *)&v512[144] = v199;
    *(_QWORD *)&v512[152] = v263;
    if (v248)
      operator delete(v248);
  }
  else
  {
    **(_QWORD **)&v512[144] = v196;
    v199 = v198 + 8;
  }
  *(_QWORD *)&v512[144] = v199;
  v271 = sub_239C77FD4((uint64_t)&v543);
  v272 = v271;
  *(_QWORD *)&v512[160] += v271;
  *(_QWORD *)&v512[168] += 6 * v271;
  v273 = *(char **)&v512[184];
  if (*(_QWORD *)&v512[184] >= *(_QWORD *)&v512[192])
  {
    v275 = *(_BYTE **)&v512[176];
    v276 = *(_QWORD *)&v512[184] - *(_QWORD *)&v512[176];
    v277 = (uint64_t)(*(_QWORD *)&v512[184] - *(_QWORD *)&v512[176]) >> 3;
    v278 = v277 + 1;
    if ((unint64_t)(v277 + 1) >> 61)
      goto LABEL_684;
    v279 = *(_QWORD *)&v512[192] - *(_QWORD *)&v512[176];
    if ((uint64_t)(*(_QWORD *)&v512[192] - *(_QWORD *)&v512[176]) >> 2 > v278)
      v278 = v279 >> 2;
    if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFF8)
      v280 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v280 = v278;
    if (v280)
    {
      if (v280 >> 61)
        goto LABEL_688;
      v281 = (char *)operator new(8 * v280);
    }
    else
    {
      v281 = 0;
    }
    v302 = &v281[8 * v277];
    v303 = &v281[8 * v280];
    *(_QWORD *)v302 = v272;
    v274 = v302 + 8;
    if (v273 != v275)
    {
      v304 = v273 - v275 - 8;
      if (v304 < 0x58)
        goto LABEL_700;
      if ((unint64_t)(v273 - v281 - v276) < 0x20)
        goto LABEL_700;
      v305 = (v304 >> 3) + 1;
      v306 = &v281[8 * v277 - 16];
      v307 = v273 - 16;
      v308 = v305 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v309 = *(_OWORD *)v307;
        *((_OWORD *)v306 - 1) = *((_OWORD *)v307 - 1);
        *(_OWORD *)v306 = v309;
        v306 -= 32;
        v307 -= 32;
        v308 -= 4;
      }
      while (v308);
      v302 -= 8 * (v305 & 0x3FFFFFFFFFFFFFFCLL);
      v273 -= 8 * (v305 & 0x3FFFFFFFFFFFFFFCLL);
      if (v305 != (v305 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_700:
        do
        {
          v310 = *((_QWORD *)v273 - 1);
          v273 -= 8;
          *((_QWORD *)v302 - 1) = v310;
          v302 -= 8;
        }
        while (v273 != v275);
      }
    }
    *(_QWORD *)&v512[176] = v302;
    *(_QWORD *)&v512[184] = v274;
    *(_QWORD *)&v512[192] = v303;
    if (v275)
      operator delete(v275);
  }
  else
  {
    **(_QWORD **)&v512[184] = v271;
    v274 = v273 + 8;
  }
  *(_QWORD *)&v512[184] = v274;
  v311 = sub_239C77C58((uint64_t)&v543);
  v312 = v311;
  *(int64x2_t *)&v512[160] = vaddq_s64(*(int64x2_t *)&v512[160], vdupq_n_s64(v311));
  v313 = *(char **)&v512[184];
  if (*(_QWORD *)&v512[184] >= *(_QWORD *)&v512[192])
  {
    v315 = *(_BYTE **)&v512[176];
    v316 = *(_QWORD *)&v512[184] - *(_QWORD *)&v512[176];
    v317 = (uint64_t)(*(_QWORD *)&v512[184] - *(_QWORD *)&v512[176]) >> 3;
    v318 = v317 + 1;
    if (!((unint64_t)(v317 + 1) >> 61))
    {
      v319 = *(_QWORD *)&v512[192] - *(_QWORD *)&v512[176];
      if ((uint64_t)(*(_QWORD *)&v512[192] - *(_QWORD *)&v512[176]) >> 2 > v318)
        v318 = v319 >> 2;
      if ((unint64_t)v319 >= 0x7FFFFFFFFFFFFFF8)
        v320 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v320 = v318;
      if (!v320)
      {
        v321 = 0;
LABEL_411:
        v342 = &v321[8 * v317];
        v343 = &v321[8 * v320];
        *(_QWORD *)v342 = v312;
        v314 = v342 + 8;
        if (v313 != v315)
        {
          v344 = v313 - v315 - 8;
          if (v344 < 0x58)
            goto LABEL_701;
          if ((unint64_t)(v313 - &v321[v316]) < 0x20)
            goto LABEL_701;
          v345 = (v344 >> 3) + 1;
          v346 = &v321[8 * v317 - 16];
          v347 = v313 - 16;
          v348 = v345 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v349 = *(_OWORD *)v347;
            *((_OWORD *)v346 - 1) = *((_OWORD *)v347 - 1);
            *(_OWORD *)v346 = v349;
            v346 -= 32;
            v347 -= 32;
            v348 -= 4;
          }
          while (v348);
          v342 -= 8 * (v345 & 0x3FFFFFFFFFFFFFFCLL);
          v313 -= 8 * (v345 & 0x3FFFFFFFFFFFFFFCLL);
          if (v345 != (v345 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_701:
            do
            {
              v350 = *((_QWORD *)v313 - 1);
              v313 -= 8;
              *((_QWORD *)v342 - 1) = v350;
              v342 -= 8;
            }
            while (v313 != v315);
          }
        }
        *(_QWORD *)&v512[176] = v342;
        *(_QWORD *)&v512[184] = v314;
        *(_QWORD *)&v512[192] = v343;
        if (v315)
          operator delete(v315);
        goto LABEL_420;
      }
      if (!(v320 >> 61))
      {
        v321 = (char *)operator new(8 * v320);
        goto LABEL_411;
      }
LABEL_688:
      sub_239418A80();
    }
LABEL_684:
    sub_2394189F8();
  }
  **(_QWORD **)&v512[184] = v311;
  v314 = v313 + 8;
LABEL_420:
  *(_QWORD *)&v512[184] = v314;
  if (((unsigned int (__cdecl *)())v595[3])())
  {
    if (((unsigned int (*)(uint64_t))v595[5])((uint64_t)&v595))
    {
      ((void (*)(uint64_t))v539[11])((uint64_t)&v539);
      ((void (*)(uint64_t, double))v595[6])((uint64_t)&v595, v351);
    }
    else
    {
      ((void (*)(uint64_t))v595[7])((uint64_t)&v595);
    }
    v352 = ((double (*)(uint64_t))v595[4])((uint64_t)&v595);
    ((void (*)(uint64_t, double))v539[12])((uint64_t)&v539, v352);
  }
  v353 = v553;
  v354 = 8 * v553;
  v355 = (v354 + 31) & 0xFFFFFFFE0;
  *(double *)&__dst = 0.0;
  v536 = v355 >> 3;
  *(_QWORD *)v610 = 0;
  malloc_type_posix_memalign((void **)v610, 0x20uLL, v355, 0x100BBD03uLL);
  v356 = *(double **)v610;
  __dst = *(void **)v610;
  if (!*(_QWORD *)v610)
  {
    v498 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v499 = std::bad_alloc::bad_alloc(v498);
    __cxa_throw(v499, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if (v353)
  {
    memcpy(*(void **)v610, (const void *)__src, v354);
    v356 = (double *)__dst;
  }
  v168 = v599;
  v537 = v553;
  v357 = fabs(*v356);
  if ((_DWORD)v553 != 1)
  {
    v358 = v356 + 1;
    v359 = 8 * v553 - 8;
    do
    {
      v360 = *v358++;
      v361 = fabs(v360);
      if (v357 < v361)
        v357 = v361;
      v359 -= 8;
    }
    while (v359);
  }
  if (v357 < v357 * *(double *)&v597)
  {
    if (BYTE8(v596))
    {
      v362 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
      std::ios_base::getloc((const std::ios_base *)((char *)v362 + *(_QWORD *)(*v362 - 24)));
      v363 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v363->__vftable[2].~facet_0)(v363, 10);
      std::locale::~locale((std::locale *)v610);
      std::ostream::put();
      std::ostream::flush();
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
      v364 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v364, (uint64_t)"][", 2);
      if (v357 == 0.0)
        sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
      else
        std::ostream::operator<<();
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
      v492 = (_QWORD *)std::ostream::operator<<();
      v493 = sub_239458500(v492, (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v493 + *(_QWORD *)(*v493 - 24)));
      v494 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v494->__vftable[2].~facet_0)(v494, 10);
      std::locale::~locale((std::locale *)v610);
      std::ostream::put();
      std::ostream::flush();
    }
    *(_DWORD *)&v512[56] = 1;
    goto LABEL_669;
  }
  v365 = v603;
  kdebug_trace();
  v533 = 0;
  v532 = 0;
  v534 = 0;
  v366 = v357;
  do
  {
    v369 = *(_DWORD *)&v512[48];
    if (*(int *)&v512[48] >= SDWORD1(v596))
      break;
    v370 = ++*(_DWORD *)&v512[48];
    if (((unsigned int (*)(uint64_t, uint64_t))v539[2])((uint64_t)&v539, (uint64_t)&v532))
    {
      v482 = BYTE8(v596);
      if (BYTE8(v596))
      {
        v483 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
        std::ios_base::getloc((const std::ios_base *)((char *)v483 + *(_QWORD *)(*v483 - 24)));
        v484 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v484->__vftable[2].~facet_0)(v484, 10);
        std::locale::~locale((std::locale *)v610);
        std::ostream::put();
        std::ostream::flush();
        v482 = 0;
      }
      goto LABEL_655;
    }
    ++*(_DWORD *)&v512[52];
    if (v534)
    {
      v371 = *(double *)v532 * *(double *)v532;
      if (v534 != 1)
      {
        v372 = (double *)((char *)v532 + 8);
        v373 = (v534 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
        if (v373 >= 3)
        {
          v374 = v373 + 1;
          v375 = (float64x2_t *)((char *)v532 + 24);
          v376 = v374 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v377 = vmulq_f64(v375[-1], v375[-1]);
            v378 = vmulq_f64(*v375, *v375);
            v371 = v371 + v377.f64[0] + v377.f64[1] + v378.f64[0] + v378.f64[1];
            v375 += 2;
            v376 -= 4;
          }
          while (v376);
          if (v374 == (v374 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_453;
          v372 += v374 & 0x3FFFFFFFFFFFFFFCLL;
        }
        do
        {
          v379 = *v372++;
          v371 = v371 + v379 * v379;
        }
        while (v372 != (double *)((char *)v532 + 8 * v534));
      }
    }
    else
    {
      v371 = 0.0;
    }
LABEL_453:
    v380 = sqrt(v371);
    if (v380 < *((double *)&v597 + 1) * (v178 + *((double *)&v597 + 1)) && v369 >= (int)v596)
    {
      if (BYTE8(v596))
      {
        v488 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
        std::ios_base::getloc((const std::ios_base *)((char *)v488 + *(_QWORD *)(*v488 - 24)));
        v489 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v489->__vftable[2].~facet_0)(v489, 10);
        std::locale::~locale((std::locale *)v610);
        std::ostream::put();
        std::ostream::flush();
        ((void (*)(uint64_t, double, double, double, double))v595[8])((uint64_t)&v595, v365, v380, v366, v357);
      }
      v482 = 2;
LABEL_655:
      *(_DWORD *)&v512[56] = v482;
      break;
    }
    ((void (*)(uint64_t, _QWORD *))v539[5])((uint64_t)&v539, &v532);
    v382 = v553;
    sub_23945215C((uint64_t)&__dst, v553);
    if ((_DWORD)v382)
      memcpy(__dst, (const void *)__src, 8 * v382);
    v537 = v553;
    if (v602)
      (*(void (**)(_BYTE *))(*(_QWORD *)v602 + 48))(v602);
    v529 = 0;
    v530 = 0;
    v531 = 0;
    v383 = *(const void **)&v512[104];
    v384 = *(_QWORD *)&v512[112] - *(_QWORD *)&v512[104];
    if (*(_QWORD *)&v512[112] != *(_QWORD *)&v512[104])
    {
      if (v384 < 0)
        sub_2394189F8();
      v529 = operator new(*(_QWORD *)&v512[112] - *(_QWORD *)&v512[104]);
      v530 = (char *)v529;
      v385 = (char *)v529 + 8 * (v384 >> 3);
      v531 = v385;
      memcpy(v529, v383, v384);
      v530 = v385;
    }
    v365 = sub_239C93B4C((uint64_t)&v539, (uint64_t)&v512[104]);
    v366 = fabs(*(double *)__dst);
    if (v537 != 1)
    {
      v386 = (double *)((char *)__dst + 8);
      v387 = 8 * v537 - 8;
      do
      {
        v388 = *v386++;
        v389 = fabs(v388);
        if (v366 < v389)
          v366 = v389;
        v387 -= 8;
      }
      while (v387);
    }
    if (BYTE8(v596))
      ((void (*)(uint64_t, double, double, double, double))v595[8])((uint64_t)&v595, v365, v380, v366, v357);
    if (v365 == 0.0)
    {
      if (BYTE8(v596))
      {
        v390 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
        v391 = sub_239458500(v390, (uint64_t)"N.A.", 4);
        std::ios_base::getloc((const std::ios_base *)((char *)v391 + *(_QWORD *)(*v391 - 24)));
        v392 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v392->__vftable[2].~facet_0)(v392, 10);
        std::locale::~locale((std::locale *)v610);
        std::ostream::put();
        goto LABEL_496;
      }
      goto LABEL_497;
    }
    if (vabdd_f64(v365, v603) < v365 * *(double *)v598 && v369 >= (int)v596)
    {
      if (BYTE8(v596))
      {
        sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
        v399 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v399 + *(_QWORD *)(*v399 - 24)));
        v400 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v400->__vftable[2].~facet_0)(v400, 10);
        std::locale::~locale((std::locale *)v610);
        std::ostream::put();
LABEL_496:
        std::ostream::flush();
      }
LABEL_497:
      v603 = v365;
      v401 = 3;
LABEL_498:
      v367 = 0;
      *(_DWORD *)&v512[56] = v401;
      v368 = (char *)v529;
      if (!v529)
        continue;
      goto LABEL_439;
    }
    if (*(_DWORD *)&v551[16])
    {
      memset(v610, 0, 20);
      ((void (*)(uint64_t, uint64_t))v539[19])((uint64_t)&v539, (uint64_t)v610);
      v394 = ((BOOL (*)(double *, uint64_t, double **, double **, double))v595[10])((double *)&v595, (uint64_t)&v532, (double **)&__dst, (double **)v610, v365);
      free(*(void **)v610);
      if (!v394)
        goto LABEL_501;
    }
    else if (!((BOOL (*)(double *, uint64_t, double **, double))v595[9])((double *)&v595, (uint64_t)&v532, (double **)&__dst, v365))
    {
LABEL_501:
      --*(_DWORD *)&v512[52];
      v402 = v543.i64[1];
      if ((_BYTE *)v543.i64[1] != v544)
      {
        do
        {
          if (*(_BYTE *)(v402 + 44))
          {
            *(_OWORD *)(v402 + 56) = *(_OWORD *)(v402 + 200);
            *(_OWORD *)(v402 + 72) = *(_OWORD *)(v402 + 216);
            *(_OWORD *)(v402 + 88) = *(_OWORD *)(v402 + 232);
            *(_OWORD *)(v402 + 104) = *(_OWORD *)(v402 + 248);
            *(_OWORD *)(v402 + 120) = *(_OWORD *)(v402 + 264);
            *(_OWORD *)(v402 + 136) = *(_OWORD *)(v402 + 280);
            v405 = *(_OWORD *)(v402 + 312);
            *(_OWORD *)(v402 + 152) = *(_OWORD *)(v402 + 296);
            *(_OWORD *)(v402 + 168) = v405;
          }
          v406 = *(_QWORD **)(v402 + 8);
          if (v406)
          {
            do
            {
              v407 = v406;
              v406 = (_QWORD *)*v406;
            }
            while (v406);
          }
          else
          {
            do
            {
              v407 = *(_BYTE **)(v402 + 16);
              _ZF = *(_QWORD *)v407 == v402;
              v402 = (uint64_t)v407;
            }
            while (!_ZF);
          }
          v402 = (uint64_t)v407;
        }
        while (v407 != v544);
      }
      v403 = v545;
      if (v545 != v546)
      {
        do
        {
          if (v403[44])
            *((_QWORD *)v403 + 7) = *((_QWORD *)v403 + 10);
          v408 = (_QWORD *)*((_QWORD *)v403 + 1);
          if (v408)
          {
            do
            {
              v409 = v408;
              v408 = (_QWORD *)*v408;
            }
            while (v408);
          }
          else
          {
            do
            {
              v409 = (_BYTE *)*((_QWORD *)v403 + 2);
              _ZF = *(_QWORD *)v409 == (_QWORD)v403;
              v403 = v409;
            }
            while (!_ZF);
          }
          v403 = v409;
        }
        while (v409 != v546);
      }
      LOBYTE(v550) = 0;
      *(_WORD *)((char *)&v550 + 3) = 0;
      BYTE1(v550) = BYTE2(v550);
      sub_23945D3D0(&v512[104], (char *)v529, v530, (v530 - (_BYTE *)v529) >> 3);
      if (((unsigned int (__cdecl *)())v595[3])())
      {
        v404 = ((double (*)(uint64_t))v595[4])((uint64_t)&v595);
        ((void (*)(uint64_t, double))v539[12])((uint64_t)&v539, v404);
      }
      goto LABEL_505;
    }
    if (((unsigned int (__cdecl *)())v595[3])())
    {
      v395 = ((double (*)(uint64_t))v595[4])((uint64_t)&v595);
      ((void (*)(uint64_t, double))v539[12])((uint64_t)&v539, v395);
    }
    if (v366 < v357 * *(double *)&v597 && v369 >= (int)v596)
    {
      if (BYTE8(v596))
      {
        v410 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
        std::ios_base::getloc((const std::ios_base *)((char *)v410 + *(_QWORD *)(*v410 - 24)));
        v411 = std::locale::use_facet((const std::locale *)v610, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v411->__vftable[2].~facet_0)(v411, 10);
        std::locale::~locale((std::locale *)v610);
        std::ostream::put();
        std::ostream::flush();
        ((void (*)(uint64_t, double, double, double, double))v595[8])((uint64_t)&v595, v365, v380, v366, v357);
      }
      v401 = 1;
      goto LABEL_498;
    }
    if (v370 < SDWORD1(v596) && v598[8])
    {
      *(_QWORD *)v610 = &v539;
      *(_QWORD *)&v610[8] = *(_QWORD *)&v598[16];
      *(_QWORD *)&v610[16] = &v538;
      sub_239C93680((double *)v610);
      v397 = 0x3DDB7CDFD9D7BDBBLL;
      v398 = 1.0e20;
      if (v538 > 0.0)
      {
        v397 = *(_QWORD *)&v538;
        v398 = 1.0 / (v538 * v538);
      }
      v540.i64[0] = v397;
      *(double *)&v540.i64[1] = v398;
      LODWORD(v550) = 0;
      BYTE4(v550) = 0;
      v603 = sub_239C93B4C((uint64_t)&v539, (uint64_t)&v512[104]);
    }
LABEL_505:
    if (v370 < SDWORD1(v596) && v600)
      (*(void (**)(_BYTE *))(*(_QWORD *)v600 + 48))(v600);
    v367 = 1;
    v368 = (char *)v529;
    if (!v529)
      continue;
LABEL_439:
    v530 = v368;
    operator delete(v368);
  }
  while ((v367 & 1) != 0);
  *(double *)&v512[72] = v603;
  if (v600)
    (*(void (**)(_BYTE *))(*(_QWORD *)v600 + 48))(v600);
  free(v532);
  v168 = v599;
LABEL_669:
  free(__dst);
  v193 = v609;
  if (!v609)
LABEL_670:
    sub_2394172E0();
LABEL_176:
  (*(void (**)(std::string *))(v193->__r_.__value_.__r.__words[0] + 48))(v193);
  v194 = v609;
  if (v609 == &v608)
  {
    v195 = 4;
    v194 = &v608;
LABEL_182:
    (*(void (**)(void))(v194->__r_.__value_.__r.__words[0] + 8 * v195))();
  }
  else if (v609)
  {
    v195 = 5;
    goto LABEL_182;
  }
  kdebug_trace();
  sub_239C19F80(v1 + 240, (__int128 *)v512);
  if (*(_QWORD *)&v512[176])
  {
    *(_QWORD *)&v512[184] = *(_QWORD *)&v512[176];
    operator delete(*(void **)&v512[176]);
  }
  if (*(_QWORD *)&v512[136])
  {
    *(_QWORD *)&v512[144] = *(_QWORD *)&v512[136];
    operator delete(*(void **)&v512[136]);
  }
  if (*(_QWORD *)&v512[104])
  {
    *(_QWORD *)&v512[112] = *(_QWORD *)&v512[104];
    operator delete(*(void **)&v512[104]);
  }
  if (*(_QWORD *)&v512[80])
  {
    *(_QWORD *)&v512[88] = *(_QWORD *)&v512[80];
    operator delete(*(void **)&v512[80]);
  }
  if ((v512[47] & 0x80000000) != 0)
    operator delete(*(void **)&v512[24]);
  if ((v512[23] & 0x80000000) != 0)
    operator delete(*(void **)v512);
  v200 = v543.i64[1];
  if ((_BYTE *)v543.i64[1] != v544)
  {
    do
    {
      if (*(_BYTE *)(v200 + 44))
      {
        v205 = *(_OWORD **)(v200 + 48);
        v206 = *(_OWORD *)(v200 + 56);
        v207 = *(_OWORD *)(v200 + 72);
        v208 = *(_OWORD *)(v200 + 104);
        v205[2] = *(_OWORD *)(v200 + 88);
        v205[3] = v208;
        *v205 = v206;
        v205[1] = v207;
        v209 = *(_OWORD *)(v200 + 120);
        v210 = *(_OWORD *)(v200 + 136);
        v211 = *(_OWORD *)(v200 + 168);
        v205[6] = *(_OWORD *)(v200 + 152);
        v205[7] = v211;
        v205[4] = v209;
        v205[5] = v210;
      }
      v212 = *(_QWORD **)(v200 + 8);
      if (v212)
      {
        do
        {
          v213 = v212;
          v212 = (_QWORD *)*v212;
        }
        while (v212);
      }
      else
      {
        do
        {
          v213 = *(_BYTE **)(v200 + 16);
          _ZF = *(_QWORD *)v213 == v200;
          v200 = (uint64_t)v213;
        }
        while (!_ZF);
      }
      v200 = (uint64_t)v213;
    }
    while (v213 != v544);
  }
  v201 = v545;
  if (v545 != v546)
  {
    do
    {
      if (v201[44])
        **((_QWORD **)v201 + 6) = *((_QWORD *)v201 + 7);
      v214 = (_QWORD *)*((_QWORD *)v201 + 1);
      if (v214)
      {
        do
        {
          v215 = v214;
          v214 = (_QWORD *)*v214;
        }
        while (v214);
      }
      else
      {
        do
        {
          v215 = (_BYTE *)*((_QWORD *)v201 + 2);
          _ZF = *(_QWORD *)v215 == (_QWORD)v201;
          v201 = v215;
        }
        while (!_ZF);
      }
      v201 = v215;
    }
    while (v215 != v546);
  }
  if (*(_BYTE *)(v1 + 88))
  {
    sub_2394988CC((uint64_t)v512);
    *(_QWORD *)v610 = operator new(0x20uLL);
    *(_OWORD *)&v610[8] = xmmword_239F0C4A0;
    strcpy(*(char **)v610, "Object Transform Optimization");
    sub_239C1A0F4(v1 + 240, &v512[16], (uint64_t)v610);
    if ((v610[23] & 0x80000000) != 0)
      operator delete(*(void **)v610);
    *(_QWORD *)v512 = *MEMORY[0x24BEDB7F0];
    v202 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)&v512[*(_QWORD *)(*(_QWORD *)v512 - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    *(_QWORD *)&v512[16] = v202;
    *(_QWORD *)&v512[24] = MEMORY[0x24BEDB848] + 16;
    if ((v512[111] & 0x80000000) != 0)
      operator delete(*(void **)&v512[88]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x23B83E250](&v512[128]);
  }
  v595 = off_250AFEA50;
  v203 = v601;
  if (v602 == v601)
  {
    v204 = 4;
LABEL_225:
    (*(void (**)(void))(*v203 + 8 * v204))();
  }
  else if (v602)
  {
    v204 = 5;
    v203 = v602;
    goto LABEL_225;
  }
  if (v600 == v599)
  {
    v216 = 4;
LABEL_230:
    (*(void (**)(_QWORD *))(*v168 + 8 * v216))(v168);
  }
  else if (v600)
  {
    v216 = 5;
    v168 = v600;
    goto LABEL_230;
  }
  v164 = 1;
LABEL_232:
  v539 = off_250AFC4F8;
  if (*(_DWORD *)&v590[8] != 2)
    sub_239A23A84((uint64_t)v592);
  sub_239C935B0((uint64_t)&v539);
  if ((v164 & 1) == 0)
    return 0;
LABEL_235:
  v217 = *(_QWORD *)(v1 + 48);
  if (*(_QWORD *)(v1 + 56) != v217)
  {
    v218 = 0;
    v219 = 0;
    do
    {
      memmove((void *)(v217 + v218), (const void *)(*(_QWORD *)(v1 + 464) + v218), 0x80uLL);
      ++v219;
      v217 = *(_QWORD *)(v1 + 48);
      v218 += 128;
    }
    while (v219 < (*(_QWORD *)(v1 + 56) - v217) >> 7);
  }
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v1 + 488);
  return 1;
}

void sub_239C75238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, _QWORD *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;

  std::locale::~locale((std::locale *)(v45 - 200));
  free((void *)STACK[0x200]);
  free((void *)STACK[0x218]);
  v46 = *(_QWORD *)(v45 - 208);
  if (!v46)
    sub_2394172E0();
  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 48))(v46);
  v47 = *(_QWORD **)(v45 - 208);
  if (v47 == (_QWORD *)(v45 - 232))
  {
    v48 = 4;
    v47 = (_QWORD *)(v45 - 232);
  }
  else
  {
    if (!v47)
    {
      v49 = a45;
      if (a45)
        goto LABEL_15;
      goto LABEL_7;
    }
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
  v49 = a45;
  if (a45)
  {
LABEL_15:
    operator delete(v49);
    v50 = a40;
    if (a40)
    {
LABEL_16:
      operator delete(v50);
      v51 = a36;
      if (a36)
      {
LABEL_17:
        operator delete(v51);
        v52 = a33;
        if (a33)
        {
LABEL_18:
          operator delete(v52);
          if ((a28 & 0x80000000) == 0)
          {
LABEL_19:
            if ((a22 & 0x80000000) == 0)
              goto LABEL_21;
            goto LABEL_20;
          }
LABEL_11:
          operator delete(__p);
          if ((a22 & 0x80000000) == 0)
            goto LABEL_21;
LABEL_20:
          operator delete(a17);
LABEL_21:
          kdebug_trace();
          STACK[0x628] = (unint64_t)off_250AFEA50;
          if ((_QWORD *)STACK[0x6A8] == a14)
          {
            v53 = 4;
          }
          else
          {
            if (!STACK[0x6A8])
              goto LABEL_26;
            v53 = 5;
            a14 = (_QWORD *)STACK[0x6A8];
          }
          (*(void (**)(void))(*a14 + 8 * v53))();
LABEL_26:
          if ((_QWORD *)STACK[0x688] == a13)
          {
            v54 = 4;
          }
          else
          {
            if (!STACK[0x688])
              goto LABEL_31;
            v54 = 5;
            a13 = (_QWORD *)STACK[0x688];
          }
          (*(void (**)(void))(*a13 + 8 * v54))();
LABEL_31:
          JUMPOUT(0x239C75B54);
        }
LABEL_10:
        if ((a28 & 0x80000000) == 0)
          goto LABEL_19;
        goto LABEL_11;
      }
LABEL_9:
      v52 = a33;
      if (a33)
        goto LABEL_18;
      goto LABEL_10;
    }
LABEL_8:
    v51 = a36;
    if (a36)
      goto LABEL_17;
    goto LABEL_9;
  }
LABEL_7:
  v50 = a40;
  if (a40)
    goto LABEL_16;
  goto LABEL_8;
}

void sub_239C759CC(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  free((void *)STACK[0x4A0]);
  free((void *)STACK[0x488]);
  v2 = (void *)STACK[0x468];
  if (STACK[0x468])
  {
    STACK[0x470] = (unint64_t)v2;
    operator delete(v2);
    v3 = (void *)STACK[0x450];
    if (!STACK[0x450])
    {
LABEL_3:
      v4 = (void *)STACK[0x438];
      if (!STACK[0x438])
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v3 = (void *)STACK[0x450];
    if (!STACK[0x450])
      goto LABEL_3;
  }
  STACK[0x458] = (unint64_t)v3;
  operator delete(v3);
  v4 = (void *)STACK[0x438];
  if (!STACK[0x438])
  {
LABEL_4:
    v5 = (void *)STACK[0x420];
    if (!STACK[0x420])
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  STACK[0x440] = (unint64_t)v4;
  operator delete(v4);
  v5 = (void *)STACK[0x420];
  if (!STACK[0x420])
  {
LABEL_5:
    v6 = (void *)STACK[0x3F8];
    if (!STACK[0x3F8])
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_11:
  STACK[0x428] = (unint64_t)v5;
  operator delete(v5);
  v6 = (void *)STACK[0x3F8];
  if (!STACK[0x3F8])
  {
LABEL_7:
    sub_239C91FAC((uint64_t)&STACK[0x238]);
    _Unwind_Resume(a1);
  }
LABEL_6:
  STACK[0x400] = (unint64_t)v6;
  operator delete(v6);
  goto LABEL_7;
}

void sub_239C75A64(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  free((void *)STACK[0x4B8]);
  free((void *)STACK[0x4A0]);
  v2 = (void *)STACK[0x480];
  if (STACK[0x480])
  {
    STACK[0x488] = (unint64_t)v2;
    operator delete(v2);
    v3 = (void *)STACK[0x468];
    if (!STACK[0x468])
    {
LABEL_3:
      v4 = (void *)STACK[0x450];
      if (!STACK[0x450])
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v3 = (void *)STACK[0x468];
    if (!STACK[0x468])
      goto LABEL_3;
  }
  STACK[0x470] = (unint64_t)v3;
  operator delete(v3);
  v4 = (void *)STACK[0x450];
  if (!STACK[0x450])
  {
LABEL_4:
    v5 = (void *)STACK[0x438];
    if (!STACK[0x438])
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  STACK[0x458] = (unint64_t)v4;
  operator delete(v4);
  v5 = (void *)STACK[0x438];
  if (!STACK[0x438])
  {
LABEL_5:
    v6 = (void *)STACK[0x410];
    if (!STACK[0x410])
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_11:
  STACK[0x440] = (unint64_t)v5;
  operator delete(v5);
  v6 = (void *)STACK[0x410];
  if (!STACK[0x410])
  {
LABEL_7:
    sub_239C9BDE8((uint64_t)&STACK[0x238]);
    _Unwind_Resume(a1);
  }
LABEL_6:
  STACK[0x418] = (unint64_t)v6;
  operator delete(v6);
  goto LABEL_7;
}

void sub_239C75AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unint64_t v16;

  free((void *)STACK[0x370]);
  STACK[0x238] = v16;
  sub_239C92064(a16);
  _Unwind_Resume(a1);
}

void sub_239C75B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  STACK[0x238] = (unint64_t)off_250AFC0D8;
  if (LODWORD(STACK[0x5A0]) != 2)
    sub_239A23A84(a12);
  sub_239C77324((uint64_t)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_239C75B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  STACK[0x238] = (unint64_t)off_250AFC4F8;
  if (LODWORD(STACK[0x5B8]) != 2)
    sub_239A23A84(a12);
  sub_239C935B0((uint64_t)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_239C75BBC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

uint64_t sub_239C75BD4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &unk_250AFC248;
  sub_239C91ED0((uint64_t)(a1 + 73));
  v2 = (void *)a1[70];
  if (v2)
  {
    a1[71] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[67];
  if (v3)
  {
    a1[68] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[64];
  if (v4)
  {
    a1[65] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[61];
  if (v5)
  {
    a1[62] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[56];
  if (v6)
  {
    a1[57] = v6;
    operator delete(v6);
  }
  return sub_239C91FAC((uint64_t)a1);
}

uint64_t sub_239C75C58(uint64_t a1, int *a2)
{
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  unsigned int v54;

  v3 = *a2;
  v5 = (_QWORD *)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 16);
  if (!v4)
    goto LABEL_13;
  v6 = (_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  do
  {
    v8 = *(_DWORD *)(v7 + 32);
    v9 = v8 >= v3;
    if (v8 >= v3)
      v10 = (uint64_t *)v7;
    else
      v10 = (uint64_t *)(v7 + 8);
    if (v9)
      v6 = (_QWORD *)v7;
    v7 = *v10;
  }
  while (*v10);
  if (v6 == v5)
  {
LABEL_13:
    v12 = *((_BYTE *)a2 + 4) == 0;
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    v15 = a2 + 4;
    v6 = (_QWORD *)(a1 + 16);
  }
  else
  {
    if (*((_DWORD *)v6 + 8) == v3)
      return 0;
    v12 = *((_BYTE *)a2 + 4) == 0;
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    v15 = a2 + 4;
    if (v5 != v6)
    {
      v19 = *((_DWORD *)v6 + 8);
      if (v3 >= v19)
      {
        if (v19 >= v3)
          goto LABEL_34;
        v20 = v6 + 1;
        v21 = (_QWORD *)v6[1];
        if (v21)
        {
          do
          {
            v20 = v21;
            v21 = (_QWORD *)*v21;
            v6 = v20;
            v22 = v20;
          }
          while (v21);
        }
        else
        {
          v22 = v6;
          do
          {
            v26 = v22;
            v22 = (_QWORD *)v22[2];
          }
          while ((_QWORD *)*v22 != v26);
        }
        if (v22 != v5 && v3 >= *((_DWORD *)v22 + 8))
        {
          while (1)
          {
            while (1)
            {
              v6 = v4;
              v27 = *((_DWORD *)v4 + 8);
              if (v3 >= v27)
                break;
              v4 = (_QWORD *)*v6;
              v5 = v6;
              if (!*v6)
                goto LABEL_53;
            }
            if (v27 >= v3)
              break;
            v5 = v6 + 1;
            v4 = (_QWORD *)v6[1];
            if (!v4)
              goto LABEL_54;
          }
LABEL_81:
          v20 = v5;
        }
        goto LABEL_33;
      }
    }
  }
  v16 = (_QWORD *)*v6;
  v17 = v6;
  if (*(_QWORD **)(a1 + 8) == v6)
    goto LABEL_28;
  if (v16)
  {
    v18 = (_QWORD *)*v6;
    do
    {
      v17 = v18;
      v18 = (_QWORD *)v18[1];
    }
    while (v18);
  }
  else
  {
    v23 = v6;
    do
    {
      v17 = (_QWORD *)v23[2];
      v24 = *v17 == (_QWORD)v23;
      v23 = v17;
    }
    while (v24);
  }
  if (*((_DWORD *)v17 + 8) < v3)
  {
LABEL_28:
    v24 = v16 == 0;
    if (v16)
      v20 = v17 + 1;
    else
      v20 = v6;
    if (!v24)
      v6 = v17;
  }
  else
  {
    if (v4)
    {
      do
      {
        while (1)
        {
          v6 = v4;
          v25 = *((_DWORD *)v4 + 8);
          if (v3 < v25)
            break;
          if (v25 >= v3)
            goto LABEL_81;
          v5 = v6 + 1;
          v4 = (_QWORD *)v6[1];
          if (!v4)
            goto LABEL_54;
        }
        v4 = (_QWORD *)*v6;
        v5 = v6;
      }
      while (*v6);
LABEL_53:
      v5 = v6;
LABEL_54:
      v28 = (char *)operator new(0x148uLL);
      *((_DWORD *)v28 + 8) = v3;
      *((_QWORD *)v28 + 5) = v13;
      *((_QWORD *)v28 + 6) = v14;
      v30 = v15[2];
      v29 = v15[3];
      v31 = v15[1];
      *(_OWORD *)(v28 + 56) = *v15;
      *(_OWORD *)(v28 + 72) = v31;
      *(_OWORD *)(v28 + 88) = v30;
      *(_OWORD *)(v28 + 104) = v29;
      v33 = v15[6];
      v32 = v15[7];
      v34 = v15[4];
      *(_OWORD *)(v28 + 136) = v15[5];
      *(_OWORD *)(v28 + 152) = v33;
      *(_OWORD *)(v28 + 168) = v32;
      *(_OWORD *)(v28 + 120) = v34;
      *((_DWORD *)v28 + 46) = -1;
      v28[188] = 1;
      *((_DWORD *)v28 + 48) = 0;
      *(_OWORD *)(v28 + 264) = xmmword_239F13AC0;
      *(_OWORD *)(v28 + 280) = unk_239F13AD0;
      *(_OWORD *)(v28 + 296) = xmmword_239F13AE0;
      *(_OWORD *)(v28 + 312) = unk_239F13AF0;
      *(_OWORD *)(v28 + 200) = xmmword_239F13A80;
      *(_OWORD *)(v28 + 216) = *(_OWORD *)algn_239F13A90;
      *(_OWORD *)(v28 + 232) = xmmword_239F13AA0;
      *(float64x2_t *)(v28 + 248) = xmmword_239F13AB0;
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = v6;
      *v5 = v28;
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        *(_QWORD *)(a1 + 8) = v35;
        v36 = (uint64_t *)*v5;
      }
      else
      {
        v36 = (uint64_t *)v28;
      }
      sub_2394213B8(*(uint64_t **)(a1 + 16), v36);
      ++*(_QWORD *)(a1 + 24);
      if (v12)
        goto LABEL_80;
LABEL_58:
      v38 = *(char **)(a1 + 208);
      v37 = *(_QWORD *)(a1 + 216);
      if ((unint64_t)v38 >= v37)
      {
        v40 = *(char **)(a1 + 200);
        v41 = (v38 - v40) >> 2;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62)
          sub_2394189F8();
        v43 = v37 - (_QWORD)v40;
        if (v43 >> 1 > v42)
          v42 = v43 >> 1;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
          v44 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44)
        {
          if (v44 >> 62)
            sub_239418A80();
          v45 = operator new(4 * v44);
        }
        else
        {
          v45 = 0;
        }
        v46 = (unsigned int *)&v45[4 * v41];
        v47 = &v45[4 * v44];
        *v46 = v3;
        v39 = v46 + 1;
        if (v38 != v40)
        {
          v48 = v38 - v40 - 4;
          if (v48 < 0x2C)
            goto LABEL_86;
          if ((unint64_t)(v40 - v45) < 0x20)
            goto LABEL_86;
          v49 = (v48 >> 2) + 1;
          v50 = &v45[4 * v41 - 16];
          v51 = v38 - 16;
          v52 = v49 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v53 = *(_OWORD *)v51;
            *(v50 - 1) = *((_OWORD *)v51 - 1);
            *v50 = v53;
            v50 -= 2;
            v51 -= 32;
            v52 -= 8;
          }
          while (v52);
          v46 -= v49 & 0x7FFFFFFFFFFFFFF8;
          v38 -= 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
          if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_86:
            do
            {
              v54 = *((_DWORD *)v38 - 1);
              v38 -= 4;
              *--v46 = v54;
            }
            while (v38 != v40);
          }
        }
        *(_QWORD *)(a1 + 200) = v46;
        *(_QWORD *)(a1 + 208) = v39;
        *(_QWORD *)(a1 + 216) = v47;
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_DWORD *)v38 = v3;
        v39 = v38 + 4;
      }
      *(_QWORD *)(a1 + 208) = v39;
      goto LABEL_80;
    }
    v6 = (_QWORD *)(a1 + 16);
    v20 = (_QWORD *)(a1 + 16);
  }
LABEL_33:
  v5 = v20;
  if (!*v20)
    goto LABEL_54;
LABEL_34:
  if (!v12)
    goto LABEL_58;
LABEL_80:
  *(_BYTE *)(a1 + 98) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  return 1;
}

uint64_t sub_239C76078(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  unsigned int v48;

  v3 = *a2;
  v5 = (_QWORD *)(a1 + 40);
  v4 = *(_QWORD **)(a1 + 40);
  if (!v4)
    goto LABEL_13;
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  do
  {
    v8 = *(_DWORD *)(v7 + 32);
    v9 = v8 >= v3;
    if (v8 >= v3)
      v10 = (uint64_t *)v7;
    else
      v10 = (uint64_t *)(v7 + 8);
    if (v9)
      v6 = (_QWORD *)v7;
    v7 = *v10;
  }
  while (*v10);
  if (v6 == v5)
  {
LABEL_13:
    v12 = *((_BYTE *)a2 + 4) == 0;
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 2);
    v6 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (*((_DWORD *)v6 + 8) == v3)
      return 0;
    v12 = *((_BYTE *)a2 + 4) == 0;
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 2);
    if (v5 != v6)
    {
      v19 = *((_DWORD *)v6 + 8);
      if (v3 >= v19)
      {
        if (v19 >= v3)
          goto LABEL_34;
        v20 = v6 + 1;
        v21 = (_QWORD *)v6[1];
        if (v21)
        {
          do
          {
            v20 = v21;
            v21 = (_QWORD *)*v21;
            v6 = v20;
            v22 = v20;
          }
          while (v21);
        }
        else
        {
          v22 = v6;
          do
          {
            v26 = v22;
            v22 = (_QWORD *)v22[2];
          }
          while ((_QWORD *)*v22 != v26);
        }
        if (v22 != v5 && v3 >= *((_DWORD *)v22 + 8))
        {
          while (1)
          {
            while (1)
            {
              v6 = v4;
              v27 = *((_DWORD *)v4 + 8);
              if (v3 >= v27)
                break;
              v4 = (_QWORD *)*v6;
              v5 = v6;
              if (!*v6)
                goto LABEL_53;
            }
            if (v27 >= v3)
              break;
            v5 = v6 + 1;
            v4 = (_QWORD *)v6[1];
            if (!v4)
              goto LABEL_54;
          }
LABEL_81:
          v20 = v5;
        }
        goto LABEL_33;
      }
    }
  }
  v16 = (_QWORD *)*v6;
  v17 = v6;
  if (*(_QWORD **)(a1 + 32) == v6)
    goto LABEL_28;
  if (v16)
  {
    v18 = (_QWORD *)*v6;
    do
    {
      v17 = v18;
      v18 = (_QWORD *)v18[1];
    }
    while (v18);
  }
  else
  {
    v23 = v6;
    do
    {
      v17 = (_QWORD *)v23[2];
      v24 = *v17 == (_QWORD)v23;
      v23 = v17;
    }
    while (v24);
  }
  if (*((_DWORD *)v17 + 8) < v3)
  {
LABEL_28:
    v24 = v16 == 0;
    if (v16)
      v20 = v17 + 1;
    else
      v20 = v6;
    if (!v24)
      v6 = v17;
  }
  else
  {
    if (v4)
    {
      do
      {
        while (1)
        {
          v6 = v4;
          v25 = *((_DWORD *)v4 + 8);
          if (v3 < v25)
            break;
          if (v25 >= v3)
            goto LABEL_81;
          v5 = v6 + 1;
          v4 = (_QWORD *)v6[1];
          if (!v4)
            goto LABEL_54;
        }
        v4 = (_QWORD *)*v6;
        v5 = v6;
      }
      while (*v6);
LABEL_53:
      v5 = v6;
LABEL_54:
      v28 = operator new(0x58uLL);
      v28[8] = v3;
      *((_QWORD *)v28 + 5) = v13;
      *((_QWORD *)v28 + 6) = v14;
      *((_QWORD *)v28 + 7) = v15;
      v28[16] = -1;
      *((_BYTE *)v28 + 68) = 1;
      v28[18] = 0;
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = v6;
      *v5 = v28;
      v29 = **(_QWORD **)(a1 + 32);
      if (v29)
      {
        *(_QWORD *)(a1 + 32) = v29;
        v30 = (uint64_t *)*v5;
      }
      else
      {
        v30 = (uint64_t *)v28;
      }
      sub_2394213B8(*(uint64_t **)(a1 + 40), v30);
      ++*(_QWORD *)(a1 + 48);
      if (v12)
        goto LABEL_80;
LABEL_58:
      v32 = *(char **)(a1 + 232);
      v31 = *(_QWORD *)(a1 + 240);
      if ((unint64_t)v32 >= v31)
      {
        v34 = *(char **)(a1 + 224);
        v35 = (v32 - v34) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          sub_2394189F8();
        v37 = v31 - (_QWORD)v34;
        if (v37 >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          if (v38 >> 62)
            sub_239418A80();
          v39 = operator new(4 * v38);
        }
        else
        {
          v39 = 0;
        }
        v40 = (unsigned int *)&v39[4 * v35];
        v41 = &v39[4 * v38];
        *v40 = v3;
        v33 = v40 + 1;
        if (v32 != v34)
        {
          v42 = v32 - v34 - 4;
          if (v42 < 0x2C)
            goto LABEL_86;
          if ((unint64_t)(v34 - v39) < 0x20)
            goto LABEL_86;
          v43 = (v42 >> 2) + 1;
          v44 = &v39[4 * v35 - 16];
          v45 = v32 - 16;
          v46 = v43 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *v44 = v47;
            v44 -= 2;
            v45 -= 32;
            v46 -= 8;
          }
          while (v46);
          v40 -= v43 & 0x7FFFFFFFFFFFFFF8;
          v32 -= 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
          if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_86:
            do
            {
              v48 = *((_DWORD *)v32 - 1);
              v32 -= 4;
              *--v40 = v48;
            }
            while (v32 != v34);
          }
        }
        *(_QWORD *)(a1 + 224) = v40;
        *(_QWORD *)(a1 + 232) = v33;
        *(_QWORD *)(a1 + 240) = v41;
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_DWORD *)v32 = v3;
        v33 = v32 + 4;
      }
      *(_QWORD *)(a1 + 232) = v33;
      goto LABEL_80;
    }
    v6 = (_QWORD *)(a1 + 40);
    v20 = (_QWORD *)(a1 + 40);
  }
LABEL_33:
  v5 = v20;
  if (!*v20)
    goto LABEL_54;
LABEL_34:
  if (!v12)
    goto LABEL_58;
LABEL_80:
  *(_BYTE *)(a1 + 98) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  return 1;
}

uint64_t sub_239C7642C(int64x2_t *a1, uint64_t *a2, unsigned __int32 *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int32 v24;
  int64x2_t *v25;
  unsigned __int32 v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned __int32 v30;
  int64x2_t *v31;
  unsigned __int32 v32;
  BOOL v33;
  uint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  char *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  char *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  char *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  char *v167;
  char *v168;
  int64_t v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  char *v203;
  char *v204;
  char *v205;

  v8 = *a2;
  v9 = (char *)a1[3].i64[1];
  v10 = (char *)a1[4].i64[0];
  if (v9 == v10)
  {
    v10 = (char *)a1[3].i64[1];
  }
  else if (*((_QWORD *)v10 - 68) >= v8)
  {
    v11 = 0xF0F0F0F0F0F0F0F1 * ((v10 - v9) >> 5);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[544 * (v11 >> 1)];
      v14 = *(_QWORD *)v13;
      v15 = v13 + 544;
      v11 += ~(v11 >> 1);
      if (v14 < v8)
        v9 = v15;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  v17 = *a2;
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v17 = *a2;
  }
  v175 = *(_OWORD *)(a2 + 9);
  v176 = *(_OWORD *)(a2 + 11);
  v177 = *(_OWORD *)(a2 + 13);
  v178 = *(_OWORD *)(a2 + 15);
  v171 = *(_OWORD *)(a2 + 1);
  v172 = *(_OWORD *)(a2 + 3);
  v173 = *(_OWORD *)(a2 + 5);
  v174 = *(_OWORD *)(a2 + 7);
  v182 = *(_OWORD *)(a2 + 23);
  v181 = *(_OWORD *)(a2 + 21);
  v180 = *(_OWORD *)(a2 + 19);
  v179 = *(_OWORD *)(a2 + 17);
  v186 = *(_OWORD *)(a2 + 31);
  v185 = *(_OWORD *)(a2 + 29);
  v184 = *(_OWORD *)(a2 + 27);
  v183 = *(_OWORD *)(a2 + 25);
  v189 = *(_OWORD *)(a2 + 37);
  v190 = *(_OWORD *)(a2 + 39);
  v187 = *(_OWORD *)(a2 + 33);
  v188 = *(_OWORD *)(a2 + 35);
  v193 = *(_OWORD *)(a2 + 45);
  v194 = *(_OWORD *)(a2 + 47);
  v191 = *(_OWORD *)(a2 + 41);
  v192 = *(_OWORD *)(a2 + 43);
  v170 = v17;
  *(_QWORD *)&v202 = a4;
  *((_QWORD *)&v202 + 1) = a5;
  if (a5)
  {
    v20 = (unint64_t *)&a5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  v23 = a1[1].i64[0];
  if (!v23)
    goto LABEL_44;
  v24 = *a3;
  v25 = a1 + 1;
  do
  {
    v26 = *(_DWORD *)(v23 + 32);
    v27 = v26 >= v24;
    if (v26 >= v24)
      v28 = (uint64_t *)v23;
    else
      v28 = (uint64_t *)(v23 + 8);
    if (v27)
      v25 = (int64x2_t *)v23;
    v23 = *v28;
  }
  while (*v28);
  if (v25 == &a1[1])
    goto LABEL_44;
  if (v25[2].i32[0] > v24)
    goto LABEL_44;
  ++v25[12].i32[0];
  v29 = a1[2].i64[1];
  if (!v29)
    goto LABEL_44;
  v30 = a3[1];
  v31 = (int64x2_t *)((char *)a1 + 40);
  do
  {
    v32 = *(_DWORD *)(v29 + 32);
    v33 = v32 >= v30;
    if (v32 >= v30)
      v34 = (uint64_t *)v29;
    else
      v34 = (uint64_t *)(v29 + 8);
    if (v33)
      v31 = (int64x2_t *)v29;
    v29 = *v34;
  }
  while (*v34);
  if (v31 != (int64x2_t *)&a1[2].u64[1] && v31[2].i32[0] <= v30 && ((++v31[4].i32[2], v25[2].i8[12]) || v31[2].i8[12]))
  {
    v38 = (char *)a1[4].i64[0];
    *(_QWORD *)&v195 = (char *)v25 + 40;
    *((_QWORD *)&v195 + 1) = (char *)v31 + 40;
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
    if (v38 == v10 || *(_QWORD *)v10 != v8)
    {
      v40 = a1[4].u64[1];
      v41 = a1[3].i64[1];
      v42 = (uint64_t)&v10[-v41];
      v168 = (char *)v41;
      v169 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v10[-v41] >> 5);
      if ((unint64_t)v38 >= v40)
      {
        v97 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v38[-v41] >> 5) + 1;
        if (v97 > 0x78787878787878)
          sub_2394189F8();
        if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v40 - v41) >> 5) > v97)
          v97 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v40 - v41) >> 5);
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v40 - v41) >> 5) >= 0x3C3C3C3C3C3C3CLL)
          v98 = 0x78787878787878;
        else
          v98 = v97;
        if (v98)
        {
          v167 = &v10[-v41];
          if (v98 > 0x78787878787878)
            sub_239418A80();
          v99 = (char *)operator new(544 * v98);
          v42 = (uint64_t)v167;
        }
        else
        {
          v99 = 0;
        }
        v105 = &v99[544 * v169];
        v205 = &v99[544 * v98];
        if (v169 == v98)
        {
          if (v42 < 1)
          {
            if (v10 == v168)
              v107 = 1;
            else
              v107 = 2 * v169;
            if (v107 > 0x78787878787878)
              sub_239418A80();
            v108 = (char *)operator new(544 * v107);
            v105 = &v108[544 * (v107 >> 2)];
            v205 = &v108[544 * v107];
            if (v99)
              operator delete(v99);
          }
          else
          {
            v106 = v169 + 2;
            if (v169 >= -1)
              v106 = v169 + 1;
            v105 -= 544 * (v106 >> 1);
          }
        }
        *(_QWORD *)v105 = v8;
        *((_QWORD *)v105 + 1) = v170;
        *((_OWORD *)v105 + 1) = v171;
        *((_OWORD *)v105 + 2) = v172;
        *((_OWORD *)v105 + 3) = v173;
        *((_OWORD *)v105 + 4) = v174;
        *((_OWORD *)v105 + 7) = v177;
        *((_OWORD *)v105 + 8) = v178;
        *((_OWORD *)v105 + 5) = v175;
        *((_OWORD *)v105 + 6) = v176;
        *((_OWORD *)v105 + 11) = v181;
        *((_OWORD *)v105 + 12) = v182;
        *((_OWORD *)v105 + 9) = v179;
        *((_OWORD *)v105 + 10) = v180;
        *((_OWORD *)v105 + 15) = v185;
        *((_OWORD *)v105 + 16) = v186;
        *((_OWORD *)v105 + 13) = v183;
        *((_OWORD *)v105 + 14) = v184;
        *((_OWORD *)v105 + 19) = v189;
        *((_OWORD *)v105 + 20) = v190;
        *((_OWORD *)v105 + 17) = v187;
        *((_OWORD *)v105 + 18) = v188;
        *((_OWORD *)v105 + 23) = v193;
        *((_OWORD *)v105 + 24) = v194;
        *((_OWORD *)v105 + 21) = v191;
        *((_OWORD *)v105 + 22) = v192;
        *((_OWORD *)v105 + 25) = v195;
        *((_OWORD *)v105 + 26) = v196;
        *((_OWORD *)v105 + 27) = v197;
        *((_OWORD *)v105 + 30) = v200;
        *((_OWORD *)v105 + 31) = v201;
        *((_OWORD *)v105 + 28) = v198;
        *((_OWORD *)v105 + 29) = v199;
        *((_QWORD *)v105 + 64) = 0xBFF0000000000000;
        *(_OWORD *)(v105 + 520) = v202;
        v105[536] = 0;
        v109 = (uint64_t)(v105 + 544);
        v203 = v105 + 544;
        v110 = (char *)a1[3].i64[1];
        if (v110 != v10)
        {
          v111 = 0;
          do
          {
            v112 = &v105[v111];
            v113 = &v10[v111];
            *(_QWORD *)&v105[v111 - 544] = *(_QWORD *)&v10[v111 - 544];
            v114 = &v105[v111 - 528];
            *(_QWORD *)&v105[v111 - 536] = *(_QWORD *)&v10[v111 - 536];
            v115 = *(_OWORD *)&v10[v111 - 528];
            v116 = *(_OWORD *)&v10[v111 - 512];
            v117 = *(_OWORD *)&v10[v111 - 480];
            *((_OWORD *)v114 + 2) = *(_OWORD *)&v10[v111 - 496];
            *((_OWORD *)v114 + 3) = v117;
            *(_OWORD *)v114 = v115;
            *((_OWORD *)v114 + 1) = v116;
            v118 = *(_OWORD *)&v10[v111 - 464];
            v119 = *(_OWORD *)&v10[v111 - 448];
            v120 = *(_OWORD *)&v10[v111 - 416];
            *((_OWORD *)v114 + 6) = *(_OWORD *)&v10[v111 - 432];
            *((_OWORD *)v114 + 7) = v120;
            v121 = &v105[v111 - 400];
            *((_OWORD *)v114 + 4) = v118;
            *((_OWORD *)v114 + 5) = v119;
            v122 = *(_OWORD *)&v10[v111 - 288];
            v124 = *(_OWORD *)&v10[v111 - 336];
            v123 = *(_OWORD *)&v10[v111 - 320];
            *((_OWORD *)v121 + 6) = *(_OWORD *)&v10[v111 - 304];
            *((_OWORD *)v121 + 7) = v122;
            *((_OWORD *)v121 + 4) = v124;
            *((_OWORD *)v121 + 5) = v123;
            v125 = *(_OWORD *)&v10[v111 - 400];
            v126 = *(_OWORD *)&v10[v111 - 384];
            v127 = *(_OWORD *)&v10[v111 - 352];
            *((_OWORD *)v121 + 2) = *(_OWORD *)&v10[v111 - 368];
            *((_OWORD *)v121 + 3) = v127;
            *(_OWORD *)v121 = v125;
            *((_OWORD *)v121 + 1) = v126;
            v128 = *(_OWORD *)&v10[v111 - 160];
            v130 = *(_OWORD *)&v10[v111 - 208];
            v129 = *(_OWORD *)&v10[v111 - 192];
            *((_OWORD *)v112 - 11) = *(_OWORD *)&v10[v111 - 176];
            *((_OWORD *)v112 - 10) = v128;
            *((_OWORD *)v112 - 13) = v130;
            *((_OWORD *)v112 - 12) = v129;
            v131 = *(_OWORD *)&v10[v111 - 272];
            v132 = *(_OWORD *)&v10[v111 - 256];
            v133 = *(_OWORD *)&v10[v111 - 224];
            *((_OWORD *)v112 - 15) = *(_OWORD *)&v10[v111 - 240];
            *((_OWORD *)v112 - 14) = v133;
            *((_OWORD *)v112 - 16) = v132;
            *(_OWORD *)&v105[v111 - 272] = v131;
            *((_OWORD *)v112 - 9) = *(_OWORD *)&v10[v111 - 144];
            v134 = *(_OWORD *)&v10[v111 - 112];
            *((_OWORD *)v112 - 8) = *(_OWORD *)&v10[v111 - 128];
            *((_OWORD *)v112 - 7) = v134;
            v135 = *(_OWORD *)&v10[v111 - 96];
            v136 = *(_OWORD *)&v10[v111 - 80];
            v137 = *(_OWORD *)&v10[v111 - 48];
            *((_OWORD *)v112 - 4) = *(_OWORD *)&v10[v111 - 64];
            *((_OWORD *)v112 - 3) = v137;
            *((_OWORD *)v112 - 6) = v135;
            *((_OWORD *)v112 - 5) = v136;
            *((_QWORD *)v112 - 4) = *(_QWORD *)&v10[v111 - 32];
            *(_OWORD *)(v112 - 24) = *(_OWORD *)&v10[v111 - 24];
            *((_QWORD *)v113 - 3) = 0;
            *((_QWORD *)v113 - 2) = 0;
            *(v112 - 8) = v10[v111 - 8];
            v111 -= 544;
          }
          while (&v10[v111] != v110);
          v105 += v111;
          v109 = (uint64_t)v203;
        }
        v138 = (char *)a1[4].i64[0];
        if (v138 != v10)
        {
          do
          {
            *(_QWORD *)v109 = *(_QWORD *)v10;
            *(_QWORD *)(v109 + 8) = *((_QWORD *)v10 + 1);
            v139 = *((_OWORD *)v10 + 1);
            v140 = *((_OWORD *)v10 + 2);
            v141 = *((_OWORD *)v10 + 4);
            *(_OWORD *)(v109 + 48) = *((_OWORD *)v10 + 3);
            *(_OWORD *)(v109 + 64) = v141;
            *(_OWORD *)(v109 + 16) = v139;
            *(_OWORD *)(v109 + 32) = v140;
            v142 = *((_OWORD *)v10 + 5);
            v143 = *((_OWORD *)v10 + 6);
            v144 = *((_OWORD *)v10 + 8);
            *(_OWORD *)(v109 + 112) = *((_OWORD *)v10 + 7);
            *(_OWORD *)(v109 + 128) = v144;
            *(_OWORD *)(v109 + 80) = v142;
            *(_OWORD *)(v109 + 96) = v143;
            v145 = *((_OWORD *)v10 + 16);
            v147 = *((_OWORD *)v10 + 13);
            v146 = *((_OWORD *)v10 + 14);
            *(_OWORD *)(v109 + 240) = *((_OWORD *)v10 + 15);
            *(_OWORD *)(v109 + 256) = v145;
            *(_OWORD *)(v109 + 208) = v147;
            *(_OWORD *)(v109 + 224) = v146;
            v148 = *((_OWORD *)v10 + 9);
            v149 = *((_OWORD *)v10 + 10);
            v150 = *((_OWORD *)v10 + 12);
            *(_OWORD *)(v109 + 176) = *((_OWORD *)v10 + 11);
            *(_OWORD *)(v109 + 192) = v150;
            *(_OWORD *)(v109 + 144) = v148;
            *(_OWORD *)(v109 + 160) = v149;
            v151 = *((_OWORD *)v10 + 24);
            v153 = *((_OWORD *)v10 + 21);
            v152 = *((_OWORD *)v10 + 22);
            *(_OWORD *)(v109 + 368) = *((_OWORD *)v10 + 23);
            *(_OWORD *)(v109 + 384) = v151;
            *(_OWORD *)(v109 + 336) = v153;
            *(_OWORD *)(v109 + 352) = v152;
            v154 = *((_OWORD *)v10 + 17);
            v155 = *((_OWORD *)v10 + 18);
            v156 = *((_OWORD *)v10 + 20);
            *(_OWORD *)(v109 + 304) = *((_OWORD *)v10 + 19);
            *(_OWORD *)(v109 + 320) = v156;
            *(_OWORD *)(v109 + 272) = v154;
            *(_OWORD *)(v109 + 288) = v155;
            *(_OWORD *)(v109 + 400) = *((_OWORD *)v10 + 25);
            v157 = *((_OWORD *)v10 + 27);
            *(_OWORD *)(v109 + 416) = *((_OWORD *)v10 + 26);
            *(_OWORD *)(v109 + 432) = v157;
            v158 = *((_OWORD *)v10 + 28);
            v159 = *((_OWORD *)v10 + 29);
            v160 = *((_OWORD *)v10 + 31);
            *(_OWORD *)(v109 + 480) = *((_OWORD *)v10 + 30);
            *(_OWORD *)(v109 + 496) = v160;
            *(_OWORD *)(v109 + 448) = v158;
            *(_OWORD *)(v109 + 464) = v159;
            *(_QWORD *)(v109 + 512) = *((_QWORD *)v10 + 64);
            *(_QWORD *)(v109 + 520) = *((_QWORD *)v10 + 65);
            *(_QWORD *)(v109 + 528) = *((_QWORD *)v10 + 66);
            *(_OWORD *)(v10 + 520) = 0uLL;
            *(_BYTE *)(v109 + 536) = v10[536];
            v109 += 544;
            v10 += 544;
          }
          while (v10 != v138);
          v10 = (char *)a1[4].i64[0];
        }
        v161 = (char *)a1[3].i64[1];
        a1[3].i64[1] = (uint64_t)v105;
        a1[4].i64[0] = v109;
        a1[4].i64[1] = (uint64_t)v205;
        if (v10 != v161)
        {
          do
          {
            v204 = v10 - 544;
            v162 = (std::__shared_weak_count *)*((_QWORD *)v10 - 2);
            if (v162)
            {
              v163 = (unint64_t *)&v162->__shared_owners_;
              do
                v164 = __ldaxr(v163);
              while (__stlxr(v164 - 1, v163));
              if (!v164)
              {
                ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                std::__shared_weak_count::__release_weak(v162);
              }
            }
            v10 = v204;
          }
          while (v204 != v161);
          v10 = v161;
        }
        if (v10)
          operator delete(v10);
      }
      else if (v10 == v38)
      {
        *(_QWORD *)v38 = v8;
        v104 = v41 + 32 * ((uint64_t)&v10[-v41] >> 5);
        *(_QWORD *)(v104 + 8) = v170;
        v104 += 8;
        *(_OWORD *)(v104 + 56) = v174;
        *(_OWORD *)(v104 + 40) = v173;
        *(_OWORD *)(v104 + 24) = v172;
        *(_OWORD *)(v104 + 8) = v171;
        *(_OWORD *)(v104 + 120) = v178;
        *(_OWORD *)(v104 + 104) = v177;
        *(_OWORD *)(v104 + 88) = v176;
        *(_OWORD *)(v104 + 72) = v175;
        *(_OWORD *)(v104 + 200) = v183;
        *(_OWORD *)(v104 + 248) = v186;
        *(_OWORD *)(v104 + 232) = v185;
        *(_OWORD *)(v104 + 216) = v184;
        *(_OWORD *)(v104 + 184) = v182;
        *(_OWORD *)(v104 + 168) = v181;
        *(_OWORD *)(v104 + 152) = v180;
        *(_OWORD *)(v104 + 136) = v179;
        *(_OWORD *)(v104 + 328) = v191;
        *(_OWORD *)(v104 + 376) = v194;
        *(_OWORD *)(v104 + 360) = v193;
        *(_OWORD *)(v104 + 344) = v192;
        *(_OWORD *)(v104 + 312) = v190;
        *(_OWORD *)(v104 + 296) = v189;
        *(_OWORD *)(v104 + 280) = v188;
        *(_OWORD *)(v104 + 264) = v187;
        *(_OWORD *)(v104 + 392) = v195;
        *(_OWORD *)(v104 + 424) = v197;
        *(_OWORD *)(v104 + 408) = v196;
        *(_OWORD *)(v104 + 488) = v201;
        *(_OWORD *)(v104 + 472) = v200;
        *(_OWORD *)(v104 + 456) = v199;
        *(_OWORD *)(v104 + 440) = v198;
        *(_QWORD *)(v104 + 504) = 0xBFF0000000000000;
        *(_OWORD *)(v104 + 512) = v202;
        *(_BYTE *)(v104 + 528) = 0;
        a1[4].i64[0] = (uint64_t)(v38 + 544);
      }
      else
      {
        v43 = v38 - 544;
        v44 = a1[4].i64[0];
        if ((unint64_t)v38 >= 0x220)
        {
          v45 = v38 - 544;
          v44 = a1[4].i64[0];
          do
          {
            *(_QWORD *)v44 = *(_QWORD *)v45;
            *(_QWORD *)(v44 + 8) = *((_QWORD *)v45 + 1);
            v46 = *((_OWORD *)v45 + 1);
            v47 = *((_OWORD *)v45 + 2);
            v48 = *((_OWORD *)v45 + 4);
            *(_OWORD *)(v44 + 48) = *((_OWORD *)v45 + 3);
            *(_OWORD *)(v44 + 64) = v48;
            *(_OWORD *)(v44 + 16) = v46;
            *(_OWORD *)(v44 + 32) = v47;
            v49 = *((_OWORD *)v45 + 5);
            v50 = *((_OWORD *)v45 + 6);
            v51 = *((_OWORD *)v45 + 8);
            *(_OWORD *)(v44 + 112) = *((_OWORD *)v45 + 7);
            *(_OWORD *)(v44 + 128) = v51;
            *(_OWORD *)(v44 + 80) = v49;
            *(_OWORD *)(v44 + 96) = v50;
            v52 = *((_OWORD *)v45 + 16);
            v54 = *((_OWORD *)v45 + 13);
            v53 = *((_OWORD *)v45 + 14);
            *(_OWORD *)(v44 + 240) = *((_OWORD *)v45 + 15);
            *(_OWORD *)(v44 + 256) = v52;
            *(_OWORD *)(v44 + 208) = v54;
            *(_OWORD *)(v44 + 224) = v53;
            v55 = *((_OWORD *)v45 + 9);
            v56 = *((_OWORD *)v45 + 10);
            v57 = *((_OWORD *)v45 + 12);
            *(_OWORD *)(v44 + 176) = *((_OWORD *)v45 + 11);
            *(_OWORD *)(v44 + 192) = v57;
            *(_OWORD *)(v44 + 144) = v55;
            *(_OWORD *)(v44 + 160) = v56;
            v58 = *((_OWORD *)v45 + 24);
            v60 = *((_OWORD *)v45 + 21);
            v59 = *((_OWORD *)v45 + 22);
            *(_OWORD *)(v44 + 368) = *((_OWORD *)v45 + 23);
            *(_OWORD *)(v44 + 384) = v58;
            *(_OWORD *)(v44 + 336) = v60;
            *(_OWORD *)(v44 + 352) = v59;
            v61 = *((_OWORD *)v45 + 17);
            v62 = *((_OWORD *)v45 + 18);
            v63 = *((_OWORD *)v45 + 20);
            *(_OWORD *)(v44 + 304) = *((_OWORD *)v45 + 19);
            *(_OWORD *)(v44 + 320) = v63;
            *(_OWORD *)(v44 + 272) = v61;
            *(_OWORD *)(v44 + 288) = v62;
            *(_OWORD *)(v44 + 400) = *((_OWORD *)v45 + 25);
            v64 = *((_OWORD *)v45 + 27);
            *(_OWORD *)(v44 + 416) = *((_OWORD *)v45 + 26);
            *(_OWORD *)(v44 + 432) = v64;
            v65 = *((_OWORD *)v45 + 28);
            v66 = *((_OWORD *)v45 + 29);
            v67 = *((_OWORD *)v45 + 31);
            *(_OWORD *)(v44 + 480) = *((_OWORD *)v45 + 30);
            *(_OWORD *)(v44 + 496) = v67;
            *(_OWORD *)(v44 + 448) = v65;
            *(_OWORD *)(v44 + 464) = v66;
            *(_QWORD *)(v44 + 512) = *((_QWORD *)v45 + 64);
            *(_QWORD *)(v44 + 520) = *((_QWORD *)v45 + 65);
            *(_QWORD *)(v44 + 528) = *((_QWORD *)v45 + 66);
            *(_OWORD *)(v45 + 520) = 0uLL;
            *(_BYTE *)(v44 + 536) = v45[536];
            v44 += 544;
            v45 += 544;
          }
          while (v45 < v38);
        }
        a1[4].i64[0] = v44;
        if (v38 != v10 + 544)
        {
          v68 = 0uLL;
          do
          {
            v69 = v43 - 544;
            v70 = v38 - 544;
            *(_QWORD *)v70 = *((_QWORD *)v43 - 68);
            *((_QWORD *)v38 - 67) = *((_QWORD *)v43 - 67);
            v71 = *((_OWORD *)v43 - 33);
            v72 = *((_OWORD *)v43 - 32);
            v73 = *((_OWORD *)v43 - 30);
            *((_OWORD *)v70 + 3) = *((_OWORD *)v43 - 31);
            *((_OWORD *)v70 + 4) = v73;
            *((_OWORD *)v70 + 1) = v71;
            *((_OWORD *)v70 + 2) = v72;
            v74 = *((_OWORD *)v43 - 29);
            v75 = *((_OWORD *)v43 - 28);
            v76 = *((_OWORD *)v43 - 26);
            *((_OWORD *)v70 + 7) = *((_OWORD *)v43 - 27);
            *((_OWORD *)v70 + 8) = v76;
            *((_OWORD *)v70 + 5) = v74;
            *((_OWORD *)v70 + 6) = v75;
            v77 = *((_OWORD *)v43 - 18);
            v79 = *((_OWORD *)v43 - 21);
            v78 = *((_OWORD *)v43 - 20);
            *((_OWORD *)v70 + 15) = *((_OWORD *)v43 - 19);
            *((_OWORD *)v70 + 16) = v77;
            *((_OWORD *)v70 + 13) = v79;
            *((_OWORD *)v70 + 14) = v78;
            v80 = *((_OWORD *)v43 - 25);
            v81 = *((_OWORD *)v43 - 24);
            v82 = *((_OWORD *)v43 - 22);
            *((_OWORD *)v70 + 11) = *((_OWORD *)v43 - 23);
            *((_OWORD *)v70 + 12) = v82;
            *((_OWORD *)v70 + 9) = v80;
            *((_OWORD *)v70 + 10) = v81;
            v83 = *((_OWORD *)v43 - 10);
            v85 = *((_OWORD *)v43 - 13);
            v84 = *((_OWORD *)v43 - 12);
            *((_OWORD *)v38 - 11) = *((_OWORD *)v43 - 11);
            *((_OWORD *)v38 - 10) = v83;
            *((_OWORD *)v38 - 13) = v85;
            *((_OWORD *)v38 - 12) = v84;
            v86 = *((_OWORD *)v43 - 17);
            v87 = *((_OWORD *)v43 - 16);
            v88 = *((_OWORD *)v43 - 14);
            *((_OWORD *)v38 - 15) = *((_OWORD *)v43 - 15);
            *((_OWORD *)v38 - 14) = v88;
            *((_OWORD *)v38 - 16) = v87;
            *((_OWORD *)v70 + 17) = v86;
            *((_QWORD *)v38 - 18) = *((_QWORD *)v43 - 18);
            *((_QWORD *)v38 - 17) = *((_QWORD *)v43 - 17);
            v89 = *((_OWORD *)v43 - 7);
            *((_OWORD *)v38 - 8) = *((_OWORD *)v43 - 8);
            *((_OWORD *)v38 - 7) = v89;
            v90 = *((_OWORD *)v43 - 6);
            v91 = *((_OWORD *)v43 - 5);
            v92 = *((_OWORD *)v43 - 3);
            *((_OWORD *)v38 - 4) = *((_OWORD *)v43 - 4);
            *((_OWORD *)v38 - 3) = v92;
            *((_OWORD *)v38 - 6) = v90;
            *((_OWORD *)v38 - 5) = v91;
            *((_QWORD *)v38 - 4) = *((_QWORD *)v43 - 4);
            v93 = *(_OWORD *)(v43 - 24);
            *(_OWORD *)(v43 - 24) = v68;
            v94 = (std::__shared_weak_count *)*((_QWORD *)v38 - 2);
            *(_OWORD *)(v38 - 24) = v93;
            if (v94)
            {
              v95 = (unint64_t *)&v94->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
                v68 = 0uLL;
              }
            }
            *(v38 - 8) = *(v43 - 8);
            v38 -= 544;
            v43 -= 544;
          }
          while (v69 != v10);
        }
        *(_QWORD *)v10 = v8;
        v100 = &v168[544 * v169];
        *((_QWORD *)v100 + 1) = v170;
        *((_OWORD *)v100 + 5) = v175;
        *((_OWORD *)v100 + 6) = v176;
        *((_OWORD *)v100 + 7) = v177;
        *((_OWORD *)v100 + 8) = v178;
        *((_OWORD *)v100 + 1) = v171;
        *((_OWORD *)v100 + 2) = v172;
        *((_OWORD *)v100 + 3) = v173;
        *((_OWORD *)v100 + 4) = v174;
        *((_OWORD *)v100 + 15) = v185;
        *((_OWORD *)v100 + 16) = v186;
        *((_OWORD *)v100 + 13) = v183;
        *((_OWORD *)v100 + 14) = v184;
        *((_OWORD *)v100 + 11) = v181;
        *((_OWORD *)v100 + 12) = v182;
        *((_OWORD *)v100 + 9) = v179;
        *((_OWORD *)v100 + 10) = v180;
        *((_OWORD *)v100 + 19) = v189;
        *((_OWORD *)v100 + 20) = v190;
        *((_OWORD *)v100 + 17) = v187;
        *((_OWORD *)v100 + 18) = v188;
        *((_OWORD *)v100 + 23) = v193;
        *((_OWORD *)v100 + 24) = v194;
        *((_OWORD *)v100 + 21) = v191;
        *((_OWORD *)v100 + 22) = v192;
        *((_OWORD *)v100 + 25) = v195;
        *((_OWORD *)v100 + 26) = v196;
        *((_OWORD *)v100 + 30) = v200;
        *((_OWORD *)v100 + 31) = v201;
        *((_OWORD *)v100 + 28) = v198;
        *((_OWORD *)v100 + 29) = v199;
        *((_OWORD *)v100 + 27) = v197;
        *((_QWORD *)v100 + 64) = 0xBFF0000000000000;
        *((_QWORD *)v100 + 65) = v202;
        v101 = (std::__shared_weak_count *)*((_QWORD *)v100 + 66);
        *((_QWORD *)v100 + 66) = *((_QWORD *)&v202 + 1);
        if (v101)
        {
          v102 = (unint64_t *)&v101->__shared_owners_;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        v168[544 * v169 + 536] = 0;
      }
      v39 = 0;
    }
    if (v39)
    {
      v165 = (unint64_t *)&v39->__shared_owners_;
      do
        v166 = __ldaxr(v165);
      while (__stlxr(v166 - 1, v165));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    a1[6].i8[2] = 0;
    a1[6].i8[0] = 0;
    a1[5] = vaddq_s64(a1[5], (int64x2_t)xmmword_239F0C4B0);
    return 1;
  }
  else
  {
LABEL_44:
    v16 = 0;
    if (*((_QWORD *)&v202 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v202 + 1) + 16))(*((_QWORD *)&v202 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v202 + 1));
      }
    }
  }
  return v16;
}

void sub_239C772F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_239C785B0(v8 - 256);
  sub_239C78500((uint64_t)va);
  sub_239C78558((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

uint64_t sub_239C77324(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_250AFC190;
  free(*(void **)(a1 + 832));
  if (*(__int16 *)(a1 + 808) < 0)
  {
    free(*(void **)(a1 + 792));
    *(_OWORD *)(a1 + 800) = 0u;
    *(_OWORD *)(a1 + 816) = 0u;
    *(_OWORD *)(a1 + 784) = 0u;
  }
  else
  {
    v2 = *(void **)(a1 + 792);
    if (v2)
    {
      free(v2);
      *(_QWORD *)(a1 + 792) = 0;
    }
    v3 = *(void **)(a1 + 800);
    if (v3)
    {
      free(v3);
      *(_QWORD *)(a1 + 800) = 0;
    }
    v4 = *(void **)(a1 + 816);
    if (v4)
    {
      free(v4);
      *(_QWORD *)(a1 + 816) = 0;
    }
    *(_QWORD *)(a1 + 824) = 0;
  }
  return sub_239C75BD4((_QWORD *)a1);
}

uint64_t sub_239C773AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFC0D8;
  if (*(_DWORD *)(a1 + 872) != 2)
    sub_239A23A84(a1 + 880);
  return sub_239C77324(a1);
}

void sub_239C773F0(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  double v80;
  unint64_t v81;
  void *__p;
  double *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  __int128 v110;
  float64x2_t v111;
  int64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  _BYTE v115[32];
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  char v119;

  __p = 0;
  v83 = 0;
  v84 = 0;
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 88) - *(_QWORD *)(*(_QWORD *)a1 + 80);
  if (!v3)
  {
    **((_QWORD **)a1 + 2) = 0x3FF0000000000000;
    return;
  }
  sub_23945E108((uint64_t)&__p, 0xF0F0F0F0F0F0F0F1 * (v3 >> 5));
  v4 = (double *)__p;
  v5 = *(_QWORD *)(v2 + 80);
  v6 = *(_QWORD *)(v2 + 88);
  if (v5 != v6)
  {
    do
    {
      v85 = *(_QWORD *)(v5 + 8);
      v7 = *(_OWORD *)(v5 + 64);
      v9 = *(_OWORD *)(v5 + 16);
      v8 = *(_OWORD *)(v5 + 32);
      v88 = *(_OWORD *)(v5 + 48);
      v89 = v7;
      v86 = v9;
      v87 = v8;
      v10 = *(_OWORD *)(v5 + 128);
      v12 = *(_OWORD *)(v5 + 80);
      v11 = *(_OWORD *)(v5 + 96);
      v92 = *(_OWORD *)(v5 + 112);
      v93 = v10;
      v90 = v12;
      v91 = v11;
      v13 = *(float64x2_t *)(v5 + 144);
      v14 = *(float64x2_t *)(v5 + 160);
      v15 = *(float64x2_t *)(v5 + 192);
      v96 = *(float64x2_t *)(v5 + 176);
      v97 = v15;
      v94 = v13;
      v95 = v14;
      v16 = *(float64x2_t *)(v5 + 208);
      v17 = *(float64x2_t *)(v5 + 224);
      v18 = *(float64x2_t *)(v5 + 256);
      v100 = *(float64x2_t *)(v5 + 240);
      v101 = v18;
      v98 = v16;
      v99 = v17;
      v19 = *(float64x2_t *)(v5 + 272);
      v20 = *(float64x2_t *)(v5 + 288);
      v21 = *(float64x2_t *)(v5 + 320);
      v104 = *(float64x2_t *)(v5 + 304);
      v105 = v21;
      v102 = v19;
      v103 = v20;
      v22 = *(float64x2_t *)(v5 + 336);
      v23 = *(float64x2_t *)(v5 + 352);
      v24 = *(float64x2_t *)(v5 + 384);
      v108 = *(float64x2_t *)(v5 + 368);
      v109 = v24;
      v106 = v22;
      v107 = v23;
      v25 = *(float64x2_t *)(v5 + 416);
      v110 = *(_OWORD *)(v5 + 400);
      v26 = *(int64x2_t *)(v5 + 432);
      v111 = v25;
      v112 = v26;
      v27 = *(float64x2_t *)(v5 + 448);
      v28 = *(float64x2_t *)(v5 + 464);
      v29 = *(float64x2_t *)(v5 + 480);
      v30 = *(_OWORD *)(v5 + 496);
      *(float64x2_t *)v115 = v29;
      *(_OWORD *)&v115[16] = v30;
      v113 = v27;
      v114 = v28;
      v116 = *(_QWORD *)(v5 + 512);
      v117 = *(_QWORD *)(v5 + 520);
      v31 = *(std::__shared_weak_count **)(v5 + 528);
      v118 = v31;
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
      }
      v119 = *(_BYTE *)(v5 + 536);
      v29.f64[0] = *(float64_t *)(*((_QWORD *)&v110 + 1) + 16);
      v34 = vmulq_n_f64(v108, v29.f64[0]);
      *(_QWORD *)&v35.f64[0] = *(_OWORD *)&vmulq_f64(v109, v29);
      v35.f64[1] = v109.f64[1];
      v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v94.f64[0]), v104, v94, 1), v106, v95.f64[0]), v34, v95, 1);
      v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103, v94.f64[0]), v105, v94, 1), v107, v95.f64[0]), v35, v95, 1);
      v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v96.f64[0]), v104, v96, 1), v106, v97.f64[0]), v34, v97, 1);
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103, v96.f64[0]), v105, v96, 1), v107, v97.f64[0]), v35, v97, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v98.f64[0]), v104, v98, 1), v106, v99.f64[0]), v34, v99, 1);
      v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103, v98.f64[0]), v105, v98, 1), v107, v99.f64[0]), v35, v99, 1);
      v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v100.f64[0]), v104, v100, 1), v106, v101.f64[0]), v34, v101, 1);
      v43 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103, v100.f64[0]), v105, v100, 1), v107, v101.f64[0]), v35, v101, 1);
      v45 = *(float64x2_t *)(v110 + 16);
      v44 = *(float64x2_t *)(v110 + 32);
      v47 = *(float64x2_t *)(v110 + 48);
      v46 = *(float64x2_t *)(v110 + 64);
      v49 = *(float64x2_t *)(v110 + 80);
      v48 = *(float64x2_t *)(v110 + 96);
      v51 = *(float64x2_t *)(v110 + 112);
      v50 = *(float64x2_t *)(v110 + 128);
      v52 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v45.f64[0]), v38, v45, 1), v40, v44.f64[0]), v42, v44, 1);
      v53 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v37, v45.f64[0]), v39, v45, 1), v41, v44.f64[0]), v43, v44, 1);
      v54 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v47.f64[0]), v38, v47, 1), v40, v46.f64[0]), v42, v46, 1);
      *(_QWORD *)&v45.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v37, v47.f64[0]), v39, v47, 1), v41, v46.f64[0]), v43, v46, 1);
      v55 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v49.f64[0]), v38, v49, 1), v40, v48.f64[0]), v42, v48, 1);
      v47.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v37, v49.f64[0]), v39, v49, 1), v41, v48.f64[0]), v43, v48, 1).f64[0];
      v56 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v51.f64[0]), v38, v51, 1), v40, v50.f64[0]), v42, v50, 1);
      *(_QWORD *)&v37.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v37, v51.f64[0]), v39, v51, 1), v41, v50.f64[0]), v43, v50, 1);
      v38.f64[0] = v52.f64[0] + -1.0;
      v39.f64[0] = *(double *)&v54.i64[1] + -1.0;
      v39.f64[1] = v45.f64[0];
      v38.f64[1] = v52.f64[1];
      *(double *)v115 = v47.f64[0] + -1.0;
      v111 = v38;
      v112 = vzip1q_s64(v53, v54);
      v113 = v39;
      v114 = v55;
      *(float64x2_t *)&v115[8] = v56;
      *(float64_t *)&v115[24] = v37.f64[0];
      if (v117)
        (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v117 + 24))(v117, &v111);
      _V5.D[1] = v111.f64[1];
      _D7 = v111.f64[1];
      __asm { FMLA            D6, D7, V5.D[1] }
      _D5 = v112.i64[1];
      __asm { FMLA            D6, D5, V4.D[1] }
      _D4 = v113.f64[1];
      __asm { FMLA            D6, D4, V3.D[1] }
      _D3 = v114.f64[1];
      __asm { FMLA            D6, D3, V2.D[1] }
      _D2 = *(_QWORD *)&v115[8];
      __asm { FMLA            D6, D2, V1.D[1] }
      _D1 = *(_QWORD *)&v115[24];
      __asm { FMLA            D6, D1, V0.D[1] }
      v116 = _D6;
      v74 = v118;
      *(_QWORD *)v4++ = _D6;
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v5 += 544;
    }
    while (v5 != v6);
    v4 = (double *)__p;
  }
  if (v4 != v83)
  {
    v77 = (_BYTE)v83 - (_BYTE)v4;
    v78 = v83 - v4;
    v79 = v78 >> 1;
    sub_2395F71EC(v4, &v4[v78 >> 1], v83);
    v4 = (double *)__p;
    v80 = *((double *)__p + (v78 >> 1));
    if ((v77 & 8) == 0)
    {
      v81 = v79 - 1;
      if (v79 - 1 != v78)
      {
        sub_2395F71EC((double *)__p, (double *)__p + v81, (double *)__p + v78);
        v4 = (double *)__p;
      }
      v80 = (v80 + v4[v81]) * 0.5;
    }
    **((double **)a1 + 2) = sqrt(v80) * a1[1];
    goto LABEL_25;
  }
  **((_QWORD **)a1 + 2) = 0x3FF0000000000000;
  if (v4)
  {
LABEL_25:
    v83 = v4;
    operator delete(v4);
  }
}

void sub_239C77860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_239C778BC(uint64_t a1, uint64_t a2)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  uint64_t v70;

  kdebug_trace();
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v5)
  {
    if (v5 >= 9)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 8;
  }
  else
  {
    sub_23945E108(a2, 1uLL);
  }
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  if (v6 == v7)
  {
    v9 = 0.0;
    goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 275))
  {
    v8 = v7 - v6 - 544;
    v9 = 0.0;
    if (v8 <= 0x21F)
      goto LABEL_12;
    v10 = v8 / 0x220 + 1;
    v11 = *(_QWORD *)(a1 + 80);
    v12 = v10 & 0xFFFFFFFFFFFFFELL;
    do
    {
      v9 = v9 + *(double *)(v11 + 512) + *(double *)(v11 + 1056);
      v11 += 1088;
      v12 -= 2;
    }
    while (v12);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFELL))
    {
      v6 += 544 * (v10 & 0xFFFFFFFFFFFFFELL);
      do
      {
LABEL_12:
        v9 = v9 + *(double *)(v6 + 512);
        v6 += 544;
      }
      while (v6 != v7);
    }
  }
  else
  {
    v9 = 0.0;
    do
    {
      v32 = *(float64x2_t **)(v6 + 400);
      v34 = *(float64x2_t *)(v6 + 272);
      v33 = *(float64x2_t *)(v6 + 288);
      v36 = *(float64x2_t *)(v6 + 304);
      v35 = *(float64x2_t *)(v6 + 320);
      v38 = *(float64x2_t *)(v6 + 336);
      v37 = *(float64x2_t *)(v6 + 352);
      _Q2.f64[0] = *(float64_t *)(*(_QWORD *)(v6 + 408) + 16);
      v39 = vmulq_n_f64(*(float64x2_t *)(v6 + 368), _Q2.f64[0]);
      *(_QWORD *)&v40.f64[0] = *(_OWORD *)&vmulq_f64(*(float64x2_t *)(v6 + 384), _Q2);
      v40.f64[1] = *(float64_t *)(v6 + 392);
      v42 = *(float64x2_t *)(v6 + 144);
      v41 = *(float64x2_t *)(v6 + 160);
      v44 = *(float64x2_t *)(v6 + 176);
      v43 = *(float64x2_t *)(v6 + 192);
      v46 = *(float64x2_t *)(v6 + 208);
      v45 = *(float64x2_t *)(v6 + 224);
      v48 = *(float64x2_t *)(v6 + 240);
      v47 = *(float64x2_t *)(v6 + 256);
      v49 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, v42.f64[0]), v36, v42, 1), v38, v41.f64[0]), v39, v41, 1);
      v50 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33, v42.f64[0]), v35, v42, 1), v37, v41.f64[0]), v40, v41, 1);
      v51 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, v44.f64[0]), v36, v44, 1), v38, v43.f64[0]), v39, v43, 1);
      v52 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33, v44.f64[0]), v35, v44, 1), v37, v43.f64[0]), v40, v43, 1);
      v53 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, v46.f64[0]), v36, v46, 1), v38, v45.f64[0]), v39, v45, 1);
      v54 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33, v46.f64[0]), v35, v46, 1), v37, v45.f64[0]), v40, v45, 1);
      v55 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, v48.f64[0]), v36, v48, 1), v38, v47.f64[0]), v39, v47, 1);
      v56 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33, v48.f64[0]), v35, v48, 1), v37, v47.f64[0]), v40, v47, 1);
      v58 = v32[1];
      v57 = v32[2];
      v60 = v32[3];
      v59 = v32[4];
      v62 = v32[5];
      v61 = v32[6];
      v64 = v32[7];
      v63 = v32[8];
      v65 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, v58.f64[0]), v51, v58, 1), v53, v57.f64[0]), v55, v57, 1);
      v66 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, v58.f64[0]), v52, v58, 1), v54, v57.f64[0]), v56, v57, 1);
      v67 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, v60.f64[0]), v51, v60, 1), v53, v59.f64[0]), v55, v59, 1);
      *(_QWORD *)&v58.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, v60.f64[0]), v52, v60, 1), v54, v59.f64[0]), v56, v59, 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, v62.f64[0]), v51, v62, 1), v53, v61.f64[0]), v55, v61, 1);
      v60.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, v62.f64[0]), v52, v62, 1), v54, v61.f64[0]), v56, v61, 1).f64[0];
      v69 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, v64.f64[0]), v51, v64, 1), v53, v63.f64[0]), v55, v63, 1);
      *(_QWORD *)&v50.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, v64.f64[0]), v52, v64, 1), v54, v63.f64[0]), v56, v63, 1);
      v51.f64[0] = v65.f64[0] + -1.0;
      v52.f64[0] = *(double *)&v67.i64[1] + -1.0;
      v52.f64[1] = v58.f64[0];
      v51.f64[1] = v65.f64[1];
      *(double *)(v6 + 480) = v60.f64[0] + -1.0;
      *(float64x2_t *)(v6 + 416) = v51;
      *(int64x2_t *)(v6 + 432) = vzip1q_s64(v66, v67);
      *(float64x2_t *)(v6 + 448) = v52;
      *(float64x2_t *)(v6 + 464) = v68;
      *(float64x2_t *)(v6 + 488) = v69;
      *(float64_t *)(v6 + 504) = v50.f64[0];
      v70 = *(_QWORD *)(v6 + 520);
      if (v70)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 24))(v70, v6 + 416);
      _Q2 = *(float64x2_t *)(v6 + 464);
      _Q5 = *(_OWORD *)(v6 + 416);
      _D7 = *(_QWORD *)(v6 + 424);
      __asm { FMLA            D6, D7, V5.D[1] }
      *(_QWORD *)&_Q5 = *(_QWORD *)(v6 + 440);
      __asm { FMLA            D6, D5, V4.D[1] }
      _D4 = *(_QWORD *)(v6 + 456);
      __asm { FMLA            D6, D4, V3.D[1] }
      _D3 = _Q2.f64[1];
      __asm { FMLA            D6, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(v6 + 488);
      __asm { FMLA            D6, D2, V1.D[1] }
      _D1 = *(_QWORD *)(v6 + 504);
      __asm { FMLA            D6, D1, V0.D[1] }
      v31 = *(double *)(a1 + 16) * _D6;
      *(double *)(v6 + 512) = v31;
      v9 = v9 + v31;
      v6 += 544;
    }
    while (v6 != v7);
  }
LABEL_15:
  **(double **)a2 = v9 * 0.5;
  *(_BYTE *)(a1 + 275) = 1;
  v13 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v14 = **(double **)a2;
  kdebug_trace();
  return v13 + v14;
}

void sub_239C77C3C(_Unwind_Exception *a1)
{
  sub_239C302B4();
  _Unwind_Resume(a1);
}

uint64_t sub_239C77C58(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t *v29;
  _DWORD *v30;
  unsigned int v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v38[2];
  void *v39[2];
  int v40;
  void *v41[2];
  void *__p[2];
  int v43;
  unsigned int v44;
  unsigned int *v45;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (v2 != (_QWORD *)(a1 + 40))
    {
      v3 = 0;
      while (1)
      {
        if ((*((_BYTE *)v2 + 68) & 6) != 0)
        {
          v4 = (_QWORD *)v2[1];
          if (v4)
            goto LABEL_9;
        }
        else
        {
          v3 += *((unsigned __int8 *)v2 + 44);
          v4 = (_QWORD *)v2[1];
          if (v4)
          {
            do
            {
LABEL_9:
              v5 = v4;
              v4 = (_QWORD *)*v4;
            }
            while (v4);
            goto LABEL_4;
          }
        }
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
LABEL_4:
        v2 = v5;
        if (v5 == (_QWORD *)(a1 + 40))
          return v3;
      }
    }
    return 0;
  }
  else
  {
    *(_OWORD *)v38 = 0u;
    *(_OWORD *)v39 = 0u;
    v40 = 1065353216;
    *(_OWORD *)v41 = 0u;
    *(_OWORD *)__p = 0u;
    v43 = 1065353216;
    v7 = *(_QWORD **)(a1 + 8);
    if (v7 == (_QWORD *)(a1 + 16))
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        if ((*((_BYTE *)v7 + 188) & 6) != 0)
          v8 = 1;
        v9 = (_QWORD *)v7[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v7[2];
            v6 = *v10 == (_QWORD)v7;
            v7 = v10;
          }
          while (!v6);
        }
        v7 = v10;
      }
      while (v10 != (_QWORD *)(a1 + 16));
    }
    v11 = *(uint64_t **)(a1 + 32);
    v12 = (uint64_t *)(a1 + 40);
    if (v11 == (uint64_t *)(a1 + 40))
    {
      v3 = 0;
    }
    else
    {
      LODWORD(v3) = 0;
      v13 = 0;
      do
      {
        if ((*((_BYTE *)v11 + 68) & 6) != 0)
          v8 = 1;
        if (*((_BYTE *)v11 + 44))
          v3 = (v13 + 1);
        else
          v3 = v3;
        if (*((_BYTE *)v11 + 44))
          ++v13;
        v14 = (uint64_t *)v11[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v11[2];
            v6 = *v15 == (_QWORD)v11;
            v11 = v15;
          }
          while (!v6);
        }
        v11 = v15;
      }
      while (v15 != v12);
    }
    if (v8)
    {
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(a1 + 64);
      if (v16 != v17)
      {
        do
        {
          v18 = *(_QWORD *)(v16 + 400);
          if ((*(_BYTE *)(v18 + 148) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v16 + 408) + 28) & 6) != 0)
          {
            v44 = *(_DWORD *)v18;
            v45 = &v44;
            v19 = sub_2395EC77C((uint64_t)v38, &v44, (uint64_t)&unk_239EC6E98, &v45);
            ++*((_DWORD *)v19 + 5);
            v44 = **(_DWORD **)(v16 + 408);
            v45 = &v44;
            v20 = sub_2395EC77C((uint64_t)v41, &v44, (uint64_t)&unk_239EC6E98, &v45);
            ++*((_DWORD *)v20 + 5);
          }
          v16 += 544;
        }
        while (v16 != v17);
        v21 = __p[0];
        if (__p[0])
        {
          if (*v12)
          {
            v22 = 0;
            v23 = __p[0];
            do
            {
              v25 = v23[4];
              v24 = a1 + 40;
              v26 = *v12;
              do
              {
                v27 = *(_DWORD *)(v26 + 32);
                v28 = v27 >= v25;
                if (v27 >= v25)
                  v29 = (uint64_t *)v26;
                else
                  v29 = (uint64_t *)(v26 + 8);
                if (v28)
                  v24 = v26;
                v26 = *v29;
              }
              while (*v29);
              if ((uint64_t *)v24 == v12 || v25 < *(_DWORD *)(v24 + 32))
                v24 = a1 + 40;
              if (*(_DWORD *)(v24 + 72) == v23[5])
                ++v22;
              v23 = *(_DWORD **)v23;
            }
            while (v23);
          }
          else
          {
            v22 = 0;
            v30 = __p[0];
            do
            {
              if (*(_DWORD *)(a1 + 112) == v30[5])
                ++v22;
              v30 = *(_DWORD **)v30;
            }
            while (v30);
          }
          v28 = v3 >= v22;
          v31 = v3 - v22;
          if (v28)
            v3 = v31;
          else
            v3 = 0;
          do
          {
            v32 = (_QWORD *)*v21;
            operator delete(v21);
            v21 = v32;
          }
          while (v32);
        }
      }
    }
    v33 = v41[0];
    v41[0] = 0;
    if (v33)
      operator delete(v33);
    v34 = v39[0];
    if (v39[0])
    {
      do
      {
        v35 = (_QWORD *)*v34;
        operator delete(v34);
        v34 = v35;
      }
      while (v35);
    }
    v36 = v38[0];
    v38[0] = 0;
    if (v36)
      operator delete(v36);
  }
  return v3;
}

void sub_239C77FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239C292B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239C77FD4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _DWORD *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v36[2];
  void *v37[2];
  int v38;
  void *v39[2];
  void *__p[2];
  int v41;
  unsigned int v42;
  unsigned int *v43;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(_QWORD **)(a1 + 8);
    if (v2 != (_QWORD *)(a1 + 16))
    {
      v3 = 0;
      while (1)
      {
        if ((*((_BYTE *)v2 + 188) & 6) != 0)
        {
          v4 = (_QWORD *)v2[1];
          if (v4)
            goto LABEL_9;
        }
        else
        {
          v3 += *((unsigned __int8 *)v2 + 44);
          v4 = (_QWORD *)v2[1];
          if (v4)
          {
            do
            {
LABEL_9:
              v5 = v4;
              v4 = (_QWORD *)*v4;
            }
            while (v4);
            goto LABEL_4;
          }
        }
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
LABEL_4:
        v2 = v5;
        if (v5 == (_QWORD *)(a1 + 16))
          return v3;
      }
    }
    return 0;
  }
  else
  {
    *(_OWORD *)v36 = 0u;
    *(_OWORD *)v37 = 0u;
    v38 = 1065353216;
    *(_OWORD *)v39 = 0u;
    *(_OWORD *)__p = 0u;
    v41 = 1065353216;
    v7 = *(uint64_t **)(a1 + 8);
    v8 = (uint64_t *)(a1 + 16);
    if (v7 == (uint64_t *)(a1 + 16))
    {
      v3 = 0;
      v9 = 0;
    }
    else
    {
      LODWORD(v3) = 0;
      v9 = 0;
      v10 = 0;
      do
      {
        if ((*((_BYTE *)v7 + 188) & 6) != 0)
          v9 = 1;
        if (*((_BYTE *)v7 + 44))
          v3 = (v10 + 1);
        else
          v3 = v3;
        if (*((_BYTE *)v7 + 44))
          ++v10;
        v11 = (uint64_t *)v7[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (uint64_t *)v7[2];
            v6 = *v12 == (_QWORD)v7;
            v7 = v12;
          }
          while (!v6);
        }
        v7 = v12;
      }
      while (v12 != v8);
    }
    v13 = *(_QWORD **)(a1 + 32);
    if (v13 != (_QWORD *)(a1 + 40))
    {
      do
      {
        if ((*((_BYTE *)v13 + 68) & 6) != 0)
          v9 = 1;
        v16 = (_QWORD *)v13[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v13[2];
            v6 = *v17 == (_QWORD)v13;
            v13 = v17;
          }
          while (!v6);
        }
        v13 = v17;
      }
      while (v17 != (_QWORD *)(a1 + 40));
    }
    if (v9)
    {
      v14 = *(_QWORD *)(a1 + 56);
      v15 = *(_QWORD *)(a1 + 64);
      if (v14 == v15)
        goto LABEL_67;
      do
      {
        v18 = *(_QWORD *)(v14 + 400);
        if ((*(_BYTE *)(v18 + 148) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v14 + 408) + 28) & 6) != 0)
        {
          v42 = *(_DWORD *)v18;
          v43 = &v42;
          v19 = sub_2395EC77C((uint64_t)v36, &v42, (uint64_t)&unk_239EC6E98, &v43);
          ++*((_DWORD *)v19 + 5);
          v42 = **(_DWORD **)(v14 + 408);
          v43 = &v42;
          v20 = sub_2395EC77C((uint64_t)v39, &v42, (uint64_t)&unk_239EC6E98, &v43);
          ++*((_DWORD *)v20 + 5);
        }
        v14 += 544;
      }
      while (v14 != v15);
      v21 = v37[0];
      if (!v37[0])
      {
LABEL_67:
        v22 = 0;
      }
      else if (*v8)
      {
        v22 = 0;
        do
        {
          v24 = v21[4];
          v23 = a1 + 16;
          v25 = *v8;
          do
          {
            v26 = *(_DWORD *)(v25 + 32);
            v27 = v26 >= v24;
            if (v26 >= v24)
              v28 = (uint64_t *)v25;
            else
              v28 = (uint64_t *)(v25 + 8);
            if (v27)
              v23 = v25;
            v25 = *v28;
          }
          while (*v28);
          if ((uint64_t *)v23 == v8 || v24 < *(_DWORD *)(v23 + 32))
            v23 = a1 + 16;
          if (*(_DWORD *)(v23 + 192) == v21[5])
            ++v22;
          v21 = *(_DWORD **)v21;
        }
        while (v21);
      }
      else
      {
        v22 = 0;
        do
        {
          if (*(_DWORD *)(a1 + 208) == v21[5])
            ++v22;
          v21 = *(_DWORD **)v21;
        }
        while (v21);
      }
      if (v3 >= v22)
        v3 = v3 - v22;
      else
        v3 = 0;
      v29 = __p[0];
      if (__p[0])
      {
        do
        {
          v30 = (_QWORD *)*v29;
          operator delete(v29);
          v29 = v30;
        }
        while (v30);
      }
    }
    v31 = v39[0];
    v39[0] = 0;
    if (v31)
      operator delete(v31);
    v32 = v37[0];
    if (v37[0])
    {
      do
      {
        v33 = (_QWORD *)*v32;
        operator delete(v32);
        v32 = v33;
      }
      while (v33);
    }
    v34 = v36[0];
    v36[0] = 0;
    if (v34)
      operator delete(v34);
  }
  return v3;
}

void sub_239C7833C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239C292B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_239C78350(uint64_t a1)
{
  unint64_t result;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 96))
    return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 5);
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 == (_QWORD *)(a1 + 16))
  {
LABEL_4:
    v3 = *(_QWORD **)(a1 + 32);
    if (v3 == (_QWORD *)(a1 + 40))
      return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 5);
    while ((*((_BYTE *)v3 + 68) & 6) == 0)
    {
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v6 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v6);
      }
      v3 = v8;
      if (v8 == (_QWORD *)(a1 + 40))
        return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 5);
    }
  }
  else
  {
    while ((*((_BYTE *)v2 + 188) & 6) == 0)
    {
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
      if (v5 == (_QWORD *)(a1 + 16))
        goto LABEL_4;
    }
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  if (v9 == v10)
    return 0;
  result = 0;
  v11 = 0;
  do
  {
    if ((*(_BYTE *)(*(_QWORD *)(v9 + 400) + 148) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v9 + 408) + 28) & 6) == 0)
      result = ++v11;
    v9 += 544;
  }
  while (v9 != v10);
  return result;
}

void sub_239C78484()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239C78498(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFC4B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239C784D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFC4B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239C784F0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 288) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t sub_239C78500(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 528);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_239C78558(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 520);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_239C785B0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 544;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239C7863C(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v5, "SparseHessian");
  v4 = 8;
  strcpy((char *)__p, "Cholesky");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 8uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_239C786F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239C78734(uint64_t a1)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char **v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  _QWORD **v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  _DWORD *v46;
  int v47;
  int v48;
  _DWORD *v49;
  int v50;
  unsigned int v51;
  _DWORD *v52;
  int v53;
  int v54;
  _BYTE *v55;
  _BYTE *v56;
  int64_t v57;
  char *v58;
  _BYTE *v59;
  _BYTE *v60;
  int64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  _QWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  int v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  int64x2_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int64x2_t *v94;
  _QWORD *v95;
  _QWORD *v96;
  BOOL v97;
  _DWORD *v98;
  _DWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int *v106;
  int v107;
  int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  float64x2_t *v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  unsigned int *v117;
  unsigned int *v118;
  int v119;
  int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  std::bad_alloc *exception;
  std::bad_alloc *v131;
  unsigned int v132;
  uint64_t v133;
  _QWORD *v134;
  void *v135;
  char *v136;
  char *v137;
  void *v138;
  void *v139;
  char *v140;
  void *v141[3];
  void *v142[3];
  void *v143[3];
  unsigned int v144[4];
  void *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  int32x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  std::mutex v154;
  _BYTE memptr[64];
  uint64_t v156;
  float64x2_t v157;
  void **v158;
  uint64_t v159;
  void **v160;
  void **i;
  uint64_t v162;

  v162 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v2 = sub_239C8746C(a1 + 24);
  v3 = sub_239C87AB0(a1 + 24);
  if (!(((*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 2)
       + ((*(_QWORD *)(a1 + 696) - *(_QWORD *)(a1 + 688)) >> 2)))
  {
    v4 = 1;
    if (!v2 || v3 < v2)
      goto LABEL_154;
  }
  v5 = a1 + 584;
  v6 = (char **)(a1 + 688);
  if (!*(_BYTE *)(a1 + 120))
  {
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 121))
    {
LABEL_87:
      sub_239C87BC8((int64x2_t *)(a1 + 24));
      v65 = *(_DWORD *)(a1 + 284);
      memset(memptr, 0, 48);
      v66 = *(_QWORD *)(a1 + 432);
      if (*(_BYTE *)(v66 + 96))
      {
        *(_QWORD *)memptr = operator new(0x100uLL);
        *(_QWORD *)&memptr[8] = *(_QWORD *)memptr;
        *(_QWORD *)&memptr[16] = *(_QWORD *)memptr + 256;
        *(_QWORD *)&memptr[24] = operator new(0x100uLL);
        *(_QWORD *)&memptr[32] = *(_QWORD *)&memptr[24];
        *(_QWORD *)&memptr[40] = *(_QWORD *)&memptr[24] + 256;
        sub_239C88398(v66, (uint64_t)memptr);
        sub_239C885AC(v66, (uint64_t)&memptr[24]);
      }
      sub_239C887C0(*(_QWORD *)(a1 + 440), (char **)memptr);
      sub_239C88A2C((uint64_t *)(a1 + 448), (int **)memptr, v65);
      if (*(_QWORD *)&memptr[24])
      {
        *(_QWORD *)&memptr[32] = *(_QWORD *)&memptr[24];
        operator delete(*(void **)&memptr[24]);
      }
      if (*(_QWORD *)memptr)
      {
        *(_QWORD *)&memptr[8] = *(_QWORD *)memptr;
        operator delete(*(void **)memptr);
      }
      kdebug_trace();
      goto LABEL_94;
    }
    if (*(_DWORD *)(a1 + 308) == 1)
      v7 = 3;
    else
      v7 = 1;
    if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 584) + 24))(a1 + 584) + 96))
    {
LABEL_86:
      kdebug_trace();
      v4 = 1;
      goto LABEL_154;
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(a1 + 584);
    v9 = sub_239C8BBCC(v8);
    memset(memptr, 0, 24);
    v11 = *(const void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
    v12 = v10 - *(_QWORD *)v9;
    v133 = a1 + 584;
    v132 = v7;
    if (v10 == *(_QWORD *)v9)
    {
      v14 = (char **)(a1 + 688);
      v15 = 0;
      v13 = 0;
    }
    else
    {
      if (v12 < 0)
        goto LABEL_156;
      v13 = (char *)operator new(v12);
      v14 = (char **)(a1 + 688);
      v15 = &v13[4 * (v12 >> 2)];
      *(_QWORD *)memptr = v13;
      *(_QWORD *)&memptr[16] = v15;
      memcpy(v13, v11, v12);
      *(_QWORD *)&memptr[8] = v15;
    }
    memset(&memptr[24], 0, 24);
    v17 = *(_BYTE **)(v9 + 24);
    v16 = *(_BYTE **)(v9 + 32);
    v18 = v16 - v17;
    v134 = (_QWORD *)v9;
    if (v16 == v17)
    {
      v20 = 0;
      v19 = 0;
      goto LABEL_18;
    }
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = (char *)operator new(v16 - v17);
      v20 = &v19[4 * (v18 >> 2)];
      *(_QWORD *)&memptr[24] = v19;
      *(_QWORD *)&memptr[40] = v20;
      memcpy(v19, v17, v18);
      *(_QWORD *)&memptr[32] = v20;
LABEL_18:
      v21 = (char **)(v134 + 6);
      v6 = v14;
      if (v13 == v15 && v19 == v20)
      {
        v5 = a1 + 584;
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
        sub_239C8C2F8((uint64_t)&v151, (char **)(v22 + 72), v21);
        sub_239C8C2F8((uint64_t)&v157, v6, (char **)&v151);
        sub_239C8C554(a1 + 616, (char **)&v157);
        if (v159)
        {
          v160 = (void **)v159;
          operator delete((void *)v159);
        }
        if (*(_QWORD *)&v157.f64[0])
        {
          v157.f64[1] = v157.f64[0];
          operator delete(*(void **)&v157.f64[0]);
        }
        if (*(_QWORD *)&v152.f64[1])
        {
          v153.f64[0] = v152.f64[1];
          operator delete(*(void **)&v152.f64[1]);
        }
        if (*(_QWORD *)&v151.f64[0])
        {
          v151.f64[1] = v151.f64[0];
          operator delete(*(void **)&v151.f64[0]);
        }
        v23 = 0;
        goto LABEL_81;
      }
      v5 = a1 + 584;
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
      sub_239C8D418((uint64_t)&v157, (char **)memptr, v21);
      sub_239C8C2F8((uint64_t)&v151, (char **)(v24 + 72), (char **)&v157);
      if (v159)
      {
        v160 = (void **)v159;
        operator delete((void *)v159);
      }
      if (*(_QWORD *)&v157.f64[0])
      {
        v157.f64[1] = v157.f64[0];
        operator delete(*(void **)&v157.f64[0]);
      }
      sub_239C8D418((uint64_t)&v157, (char **)&v151, (char **)memptr);
      v25 = ((*(_QWORD *)&v153.f64[0] - *(_QWORD *)&v152.f64[1]) >> 2)
          + 6 * ((*(_QWORD *)&v151.f64[1] - *(_QWORD *)&v151.f64[0]) >> 2);
      *(_DWORD *)(a1 + 608) = v25;
      sub_23945215C(a1 + 592, v25);
      v26 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 24))(v133);
      LODWORD(v148) = 0;
      v135 = v26;
      v136 = (char *)&v151;
      v27 = sub_239C8D630(&v135, (_QWORD *)(a1 + 592), &v148);
      v28 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v133 + 24))(v133, v27);
      sub_239C8D80C((uint64_t)&v157, (_QWORD *)(v28 + 8));
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
      sub_239C887C0(v29, (char **)&v157);
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
      sub_239C8D9D8((_QWORD *)(v30 + 40));
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
      v32 = *(unsigned int *)(v31 + 16);
      if ((_DWORD)v32)
        bzero(*(void **)v31, 8 * v32);
      if (((*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 2)
         + ((*(_QWORD *)(a1 + 696) - *(_QWORD *)(a1 + 688)) >> 2))
      {
        v33 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
        sub_239C80714(v33, (_QWORD *)(a1 + 616));
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v133 + 16))(v133, v132);
      v148 = 0;
      v149 = 0;
      v150.i32[0] = 0;
      v145 = 0;
      v146 = 0;
      v147 = 0;
      v34 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 584) + 40);
      if (*(_BYTE *)(a1 + 736))
      {
        v35 = v34(v133);
        sub_239C8DE90(v35, memptr, (uint64_t)&v145);
      }
      else
      {
        v36 = v34(v133);
        sub_239C8DD0C(v36, memptr, (uint64_t)&v145, (uint64_t)&v148);
      }
      memset(v143, 0, sizeof(v143));
      memset(v142, 0, sizeof(v142));
      v37 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
      sub_239C8DF5C(v37, memptr, &v151, (uint64_t)v143, (uint64_t)v142);
      sub_239C887C0(a1 + 616, (char **)&v151);
      sub_239C8D9D8((_QWORD *)(a1 + 656));
      v38 = *(unsigned int *)(a1 + 632);
      if ((_DWORD)v38)
        bzero(*(void **)(a1 + 616), 8 * v38);
      memset(v141, 0, sizeof(v141));
      v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 584) + 40);
      if (*(_BYTE *)(a1 + 736))
      {
        v40 = v39(v133);
        sub_239C8DE90(v40, &v151, (uint64_t)v141);
      }
      else
      {
        v41 = v39(v133);
        sub_239C8DD0C(v41, &v151, (uint64_t)v141, a1 + 616);
      }
      if (*(_BYTE *)(a1 + 737))
      {
        LOBYTE(v135) = *(_BYTE *)(a1 + 736);
        v42 = *(_QWORD *)(a1 + 768);
        if (!v42)
          sub_2394172E0();
        if (((*(uint64_t (**)(uint64_t, void **, void **, void **, void **, void **, uint64_t))(*(_QWORD *)v42 + 48))(v42, &v145, &v148, v143, &v135, v141, a1 + 616) & 1) != 0)
        {
LABEL_48:
          if (*(_DWORD *)(*(_QWORD *)(a1 + 656) + 8) >= *(_DWORD *)(*(_QWORD *)(a1 + 664) + 8))
            v43 = *(_DWORD **)(a1 + 656);
          else
            v43 = *(_DWORD **)(a1 + 664);
          v44 = v43[2];
          v45 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v43 + 48))(v43) * v44;
          LODWORD(v135) = 0;
          HIDWORD(v135) = v45;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 672) + 8) >= *(_DWORD *)(*(_QWORD *)(a1 + 680) + 8))
            v46 = *(_DWORD **)(a1 + 672);
          else
            v46 = *(_DWORD **)(a1 + 680);
          v47 = v46[2];
          v48 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v46 + 48))(v46);
          LODWORD(v136) = v45;
          HIDWORD(v136) = v48 * v47;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 656) + 12) >= *(_DWORD *)(*(_QWORD *)(a1 + 672) + 12))
            v49 = *(_DWORD **)(a1 + 656);
          else
            v49 = *(_DWORD **)(a1 + 672);
          v50 = v49[3];
          v51 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v49 + 56))(v49) * v50;
          v144[0] = 0;
          v144[1] = v51;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 664) + 12) >= *(_DWORD *)(*(_QWORD *)(a1 + 680) + 12))
            v52 = *(_DWORD **)(a1 + 664);
          else
            v52 = *(_DWORD **)(a1 + 680);
          v53 = v52[3];
          v54 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v52 + 56))(v52);
          v144[2] = v51;
          v144[3] = v54 * v53;
          sub_239C8E1D0((uint64_t *)(a1 + 656), (uint64_t *)v141, (unsigned int *)&v135, v144);
          v135 = 0;
          v136 = 0;
          v137 = 0;
          v56 = (_BYTE *)v134[12];
          v55 = (_BYTE *)v134[13];
          v57 = v55 - v56;
          if (v55 != v56)
          {
            if (v57 < 0)
              goto LABEL_158;
            v135 = operator new(v55 - v56);
            v136 = (char *)v135;
            v58 = (char *)v135 + 4 * (v57 >> 2);
            v137 = v58;
            memcpy(v135, v56, v57);
            v136 = v58;
          }
          v138 = 0;
          v139 = 0;
          v140 = 0;
          v60 = (_BYTE *)v134[15];
          v59 = (_BYTE *)v134[16];
          v61 = v59 - v60;
          if (v59 == v60)
          {
LABEL_66:
            v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
            sub_239C8C554(v63, (char **)memptr);
            v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
            sub_239C8E8A8(v64, (uint64_t)&v135);
            if (v138)
            {
              v139 = v138;
              operator delete(v138);
            }
            if (v135)
            {
              v136 = (char *)v135;
              operator delete(v135);
            }
            v23 = 0;
            goto LABEL_73;
          }
          if ((v61 & 0x8000000000000000) == 0)
          {
            v138 = operator new(v61);
            v139 = v138;
            v62 = (char *)v138 + 4 * (v61 >> 2);
            v140 = v62;
            memcpy(v138, v60, v61);
            v139 = v62;
            goto LABEL_66;
          }
LABEL_158:
          sub_2394189F8();
        }
      }
      else if (sub_239C2B370((uint64_t)&v145, (uint64_t)&v148, (uint64_t)v143, *(_BYTE *)(a1 + 736) != 0, (uint64_t)v141, a1 + 616))
      {
        goto LABEL_48;
      }
      v23 = 1;
LABEL_73:
      free(v141[0]);
      free(v142[0]);
      free(v143[0]);
      free(v145);
      free(v148);
      if (v159)
      {
        v160 = (void **)v159;
        operator delete((void *)v159);
      }
      if (*(_QWORD *)&v157.f64[0])
      {
        v157.f64[1] = v157.f64[0];
        operator delete(*(void **)&v157.f64[0]);
      }
      if (*(_QWORD *)&v152.f64[1])
      {
        v153.f64[0] = v152.f64[1];
        operator delete(*(void **)&v152.f64[1]);
      }
      if (*(_QWORD *)&v151.f64[0])
      {
        v151.f64[1] = v151.f64[0];
        operator delete(*(void **)&v151.f64[0]);
      }
LABEL_81:
      if (*(_QWORD *)&memptr[24])
      {
        *(_QWORD *)&memptr[32] = *(_QWORD *)&memptr[24];
        operator delete(*(void **)&memptr[24]);
      }
      if (*(_QWORD *)memptr)
      {
        *(_QWORD *)&memptr[8] = *(_QWORD *)memptr;
        operator delete(*(void **)memptr);
      }
      if (v23)
        goto LABEL_86;
      goto LABEL_87;
    }
LABEL_156:
    sub_2394189F8();
  }
LABEL_94:
  if (*(_BYTE *)(a1 + 273))
  {
    v4 = 0;
  }
  else
  {
    v67 = *(_QWORD *)(a1 + 368);
    v68 = *(void **)(v67 + 16);
    v69 = *(_QWORD *)(v67 + 24) - (_QWORD)v68;
    if (v69 >= 1)
      bzero(v68, 8 * (((unint64_t)v69 >> 3) - ((unint64_t)v69 > 7)) + 8);
    v70 = *(_QWORD *)(a1 + 376);
    v71 = *(void **)(v70 + 16);
    v72 = *(_QWORD *)(v70 + 24) - (_QWORD)v71;
    if (v72 >= 1)
      bzero(v71, 8 * (((unint64_t)v72 >> 3) - ((unint64_t)v72 > 7)) + 8);
    v73 = *(_QWORD *)(a1 + 352);
    v74 = *(void **)(v73 + 16);
    v75 = *(_QWORD *)(v73 + 24) - (_QWORD)v74;
    if (v75 >= 1)
      bzero(v74, 8 * (((unint64_t)v75 >> 3) - ((unint64_t)v75 > 7)) + 8);
    v76 = *(_QWORD *)(a1 + 360);
    v77 = *(void **)(v76 + 16);
    v78 = *(_QWORD *)(v76 + 24) - (_QWORD)v77;
    if (v78 >= 1)
      bzero(v77, 8 * (((unint64_t)v78 >> 3) - ((unint64_t)v78 > 7)) + 8);
    v79 = *(unsigned int *)(a1 + 328);
    if ((_DWORD)v79)
      bzero(*(void **)(a1 + 312), 8 * v79);
    if (((*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 2)
       + ((*(_QWORD *)(a1 + 696) - *(_QWORD *)(a1 + 688)) >> 2))
    {
      kdebug_trace();
      sub_239C80714((_QWORD *)(a1 + 312), (_QWORD *)(a1 + 616));
      v80 = (8
           * (((*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 2)
            + 6 * ((*(_QWORD *)(a1 + 696) - *(_QWORD *)(a1 + 688)) >> 2))
           + 31) & 0xFFFFFFFE0;
      *(_QWORD *)memptr = 0;
      malloc_type_posix_memalign((void **)memptr, 0x20uLL, v80, 0x100BBD03uLL);
      v81 = *(_QWORD **)memptr;
      if (!*(_QWORD *)memptr)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v131 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v131, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v82 = *(_DWORD **)(a1 + 688);
      v83 = *(_DWORD **)(a1 + 696);
      if (v82 == v83)
      {
        v84 = 0;
      }
      else
      {
        v84 = 0;
        v85 = *(_QWORD **)(a1 + 32);
        do
        {
          if (*((_DWORD *)v85 + 8) != *v82)
          {
            v95 = v85;
            do
            {
              v96 = (_QWORD *)v95[1];
              if (v96)
              {
                do
                {
                  v85 = v96;
                  v96 = (_QWORD *)*v96;
                }
                while (v96);
              }
              else
              {
                do
                {
                  v85 = (_QWORD *)v95[2];
                  v97 = *v85 == (_QWORD)v95;
                  v95 = v85;
                }
                while (!v97);
              }
              v95 = v85;
            }
            while (*((_DWORD *)v85 + 8) != *v82);
          }
          v86 = v85[9];
          v87 = v85[13];
          v88 = *(_OWORD *)(v85 + 11);
          v89 = v85[17];
          v90 = *(_OWORD *)(v85 + 15);
          *(_OWORD *)memptr = *(_OWORD *)(v85 + 7);
          *(_OWORD *)&memptr[24] = v88;
          *(_QWORD *)&memptr[16] = v86;
          *(_QWORD *)&memptr[40] = v87;
          *(_OWORD *)&memptr[48] = v90;
          v156 = v89;
          v152.f64[0] = 0.0;
          v151 = 0uLL;
          sub_239458B60((float64x2_t *)memptr, v151.f64);
          v91.i64[0] = *(_QWORD *)&v152.f64[0];
          v92.i64[0] = v85[21];
          v93 = *(int8x16_t *)(v85 + 19);
          v94 = (int64x2_t *)&v81[v84];
          *v94 = (int64x2_t)v151;
          v94[1] = vzip1q_s64(v91, (int64x2_t)v93);
          v94[2] = (int64x2_t)vextq_s8(v93, v92, 8uLL);
          v84 += 6;
          ++v82;
        }
        while (v82 != v83);
      }
      v98 = *(_DWORD **)(a1 + 712);
      v99 = *(_DWORD **)(a1 + 720);
      if (v98 == v99)
      {
        v103 = *(_QWORD *)(a1 + 712);
      }
      else
      {
        v100 = *(_QWORD **)(a1 + 56);
        do
        {
          if (*((_DWORD *)v100 + 8) == *v98)
          {
            v101 = v100;
          }
          else
          {
            do
            {
              v102 = (_QWORD *)v100[1];
              if (v102)
              {
                do
                {
                  v101 = v102;
                  v102 = (_QWORD *)*v102;
                }
                while (v102);
              }
              else
              {
                do
                {
                  v101 = (_QWORD *)v100[2];
                  v97 = *v101 == (_QWORD)v100;
                  v100 = v101;
                }
                while (!v97);
              }
              v100 = v101;
            }
            while (*((_DWORD *)v101 + 8) != *v98);
          }
          v81[v84++] = v101[7];
          ++v98;
          v100 = v101;
        }
        while (v98 != v99);
        v103 = *(_QWORD *)(a1 + 720);
        v98 = *(_DWORD **)(a1 + 712);
      }
      if (((unint64_t)(v103 - (_QWORD)v98) >> 2)
         + ((*(_QWORD *)(a1 + 696) - *(_QWORD *)(a1 + 688)) >> 2))
      {
        v148 = 0;
        v149 = 0;
        v150 = 0;
        sub_239C7B3A8((_QWORD *)(a1 + 656), (uint64_t)&v148);
        sub_239C1BE20((uint64_t *)&v148);
        v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
        LODWORD(v151.f64[0]) = 0;
        v145 = 0;
        v146 = 0;
        LODWORD(v147) = *(_DWORD *)(a1 + 608);
        sub_23945215C((uint64_t)&v145, v147);
        if ((_DWORD)v147)
          bzero(v145, 8 * v147);
        *(_QWORD *)memptr = v104;
        *(_QWORD *)&memptr[8] = v6;
        sub_239C7B188(memptr, (uint64_t *)(a1 + 592), &v145, &v151);
        v105 = *(unsigned int **)(a1 + 688);
        v106 = *(unsigned int **)(a1 + 696);
        if (v105 != v106)
        {
          v107 = 0;
          v108 = 0;
          v109 = *(unsigned int **)(a1 + 384);
          do
          {
            if (*v109 < *v105)
            {
              do
              {
                v110 = v109[1];
                ++v109;
                ++v107;
              }
              while (v110 < *v105);
            }
            v111 = *(_DWORD *)(a1 + 648) + 6 * v108;
            v135 = (void *)vrev64_s32(v150);
            v136 = (char *)v148 + 8 * v111;
            LODWORD(v137) = v111;
            v112 = (float64x2_t *)(*(_QWORD *)(a1 + 312) + 8 * (*(_DWORD *)(a1 + 344) + 6 * v107));
            v113 = *v112;
            v114 = v112[2];
            v152 = v112[1];
            v153 = v114;
            v151 = v113;
            *(_QWORD *)memptr = &v151;
            *(_QWORD *)&v157.f64[1] = &v135;
            v158 = &v145;
            v159 = 0x3FF0000000000000;
            sub_239C86C4C((uint64_t)&memptr[8], (uint64_t)&v157);
            v115 = vsubq_f64(**(float64x2_t **)memptr, *(float64x2_t *)&memptr[8]);
            v116 = vsubq_f64(*(float64x2_t *)(*(_QWORD *)memptr + 32), *(float64x2_t *)&memptr[40]);
            v112[1] = vsubq_f64(*(float64x2_t *)(*(_QWORD *)memptr + 16), *(float64x2_t *)&memptr[24]);
            v112[2] = v116;
            *v112 = v115;
            ++v105;
            ++v108;
          }
          while (v105 != v106);
        }
        v117 = *(unsigned int **)(a1 + 712);
        v118 = *(unsigned int **)(a1 + 720);
        if (v117 != v118)
        {
          v119 = 0;
          v120 = 0;
          v121 = *(unsigned int **)(a1 + 408);
          do
          {
            if (*v121 < *v117)
            {
              do
              {
                v122 = v121[1];
                ++v121;
                ++v119;
              }
              while (v122 < *v117);
            }
            v123 = *(_DWORD *)(a1 + 652) + v120;
            *(int32x2_t *)&v157.f64[0] = vrev64_s32(v150);
            *(_QWORD *)&v157.f64[1] = (char *)v148 + 8 * v123;
            LODWORD(v158) = v123;
            v124 = (*(_DWORD *)(a1 + 348) + v119);
            v125 = *(_QWORD *)(a1 + 312);
            v135 = *(void **)(v125 + 8 * v124);
            *(_QWORD *)&v151.f64[0] = &v135;
            *(_QWORD *)&memptr[8] = &v157;
            *(_QWORD *)&memptr[16] = &v145;
            *(_QWORD *)&memptr[24] = 0x3FF0000000000000;
            sub_239C86D04(&v151.f64[1], (uint64_t)memptr);
            *(double *)(v125 + 8 * v124) = **(double **)&v151.f64[0] - v151.f64[1];
            ++v117;
            ++v120;
          }
          while (v117 != v118);
        }
        free(v145);
        free(v148);
      }
      free(v81);
      kdebug_trace();
    }
    v126 = *(void **)(a1 + 440);
    v151.f64[0] = *(float64_t *)(a1 + 432);
    *(_QWORD *)&v151.f64[1] = a1 + 488;
    *(_QWORD *)&v152.f64[0] = a1 + 8;
    *(_QWORD *)&v152.f64[1] = v126;
    v153.f64[0] = 0.0;
    LODWORD(v153.f64[1]) = 2;
    memset(v154.__m_.__opaque, 0, sizeof(v154.__m_.__opaque));
    v154.__m_.__sig = 850045863;
    v148 = v126;
    v145 = v126;
    v127 = *(_QWORD *)(*(_QWORD *)&v151.f64[0] + 56);
    v128 = *(_QWORD *)(*(_QWORD *)&v151.f64[0] + 64);
    *(_QWORD *)&v157.f64[0] = &v151;
    *(_QWORD *)&v157.f64[1] = &v135;
    v158 = (void **)(a1 + 8);
    v159 = (uint64_t)memptr;
    v160 = &v148;
    for (i = &v145; v127 != v128; v127 += 544)
      sub_239C80F60(&v157, v127);
    std::mutex::~mutex(&v154);
    v4 = 0;
    *(_WORD *)(a1 + 273) = 1;
  }
LABEL_154:
  kdebug_trace();
  return v4;
}

void sub_239C79700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  char *v49;
  uint64_t v50;
  char *v52;
  void *v53;
  void *v54;

  v52 = v49;
  while (1)
  {
    v54 = (void *)*((_QWORD *)v52 - 3);
    v52 -= 24;
    v53 = v54;
    if (v54)
    {
      *((_QWORD *)v49 - 2) = v53;
      operator delete(v53);
    }
    v49 = v52;
    if (v52 == &a12)
    {
      free(a18);
      free(a21);
      free(a24);
      free(a29);
      free(a32);
      sub_2394FCFA8(v50 - 152);
      sub_2394FCFA8((uint64_t)&a35);
      sub_2394FCFA8((uint64_t)&a49);
      sub_239C25A28();
      sub_239C22568();
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_239C798FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int **v6;
  int v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  double *v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  uint64_t v15;
  float64x2_t *v16;
  float64x2_t *v17;
  uint64_t v18;
  float64x2_t v19;
  double *v20;
  double v21;
  std::bad_alloc *exception;
  std::bad_alloc *v24;
  double v25;
  void *v26[2];
  unsigned int v27;
  void *v28[2];
  unsigned int v29;
  void *memptr;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  v5 = (_QWORD *)(a1 + 352);
  v6 = (unsigned int **)(a1 + 536);
  if (*(_DWORD *)(a1 + 284))
    sub_239C7C654(a1 + 784, v5, v6, (unsigned int **)(a1 + 536));
  else
    sub_239C7B50C(a1 + 784, v5, v6, (unsigned int **)(a1 + 536));
  kdebug_trace();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2);
  if (*(_BYTE *)(a1 + 288))
  {
    v7 = *(_DWORD *)(a1 + 304);
    if (v7 != 1)
    {
      if (!v7)
        sub_239C7D830((unsigned int *)(a1 + 784), *(double *)(a1 + 296));
      goto LABEL_22;
    }
    v28[0] = 0;
    v28[1] = 0;
    v29 = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, v28);
    v25 = *(double *)(a1 + 296);
    v8 = (8 * v29 + 31) & 0xFFFFFFFE0;
    v26[1] = (void *)(v8 >> 3);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x100BBD03uLL);
    v9 = (char *)memptr;
    v26[0] = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v24 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v24, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v10 = v29;
    v27 = v29;
    if (!v29)
      goto LABEL_21;
    v11 = (double *)v28[0];
    v12 = (v29 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v12 < 3)
    {
      v13 = (double *)memptr;
    }
    else
    {
      v13 = (double *)memptr;
      if ((unint64_t)memptr - (unint64_t)v28[0] >= 0x20)
      {
        v14 = v12 + 1;
        v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        v13 = (double *)((char *)memptr + v15);
        v16 = (float64x2_t *)((char *)v28[0] + 16);
        v17 = (float64x2_t *)((char *)memptr + 16);
        v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = vmulq_n_f64(*v16, v25);
          v17[-1] = vmulq_n_f64(v16[-1], v25);
          *v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_21;
        v11 = (double *)((char *)v11 + v15);
      }
    }
    v20 = (double *)&v9[8 * v10];
    do
    {
      v21 = *v11++;
      *v13++ = v25 * v21;
    }
    while (v13 != v20);
LABEL_21:
    sub_239C7DFC4((unsigned int *)(a1 + 784), (uint64_t *)v26);
    free(v26[0]);
    free(v28[0]);
  }
LABEL_22:
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2))
  {
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)(a1 + 276) = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_239C79B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  free(a12);
  free(a15);
  _Unwind_Resume(a1);
}

void sub_239C79BB8(_Unwind_Exception *a1)
{
  sub_239C2ED74();
  _Unwind_Resume(a1);
}

void sub_239C79BCC(_Unwind_Exception *a1)
{
  sub_239C2ED44();
  _Unwind_Resume(a1);
}

double sub_239C79BDC(uint64_t a1)
{
  size_t v2;
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  int64x2_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int64x2_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _DWORD *v20;
  _DWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  double *v27;
  double v28;
  double *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float64x2_t *v33;
  float64x2_t *v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  std::bad_alloc *exception;
  std::bad_alloc *v45;
  void **v46;
  void *v47[3];
  void *v48[2];
  unsigned int v49;
  void *memptr[2];
  void **v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  void ***v57;
  void **v58;
  uint64_t v59;
  int64x2_t v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v2 = (8
      * (((*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 2)
       + 6 * ((*(_QWORD *)(a1 + 696) - *(_QWORD *)(a1 + 688)) >> 2))
      + 31) & 0xFFFFFFFE0;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v2, 0x100BBD03uLL);
  v3 = memptr[0];
  if (!memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v45 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v45, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v4 = *(_DWORD **)(a1 + 688);
  v5 = *(_DWORD **)(a1 + 696);
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD **)(a1 + 32);
    do
    {
      if (*((_DWORD *)v7 + 8) != *v4)
      {
        v17 = v7;
        do
        {
          v18 = (_QWORD *)v17[1];
          if (v18)
          {
            do
            {
              v7 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v7 = (_QWORD *)v17[2];
              v19 = *v7 == (_QWORD)v17;
              v17 = v7;
            }
            while (!v19);
          }
          v17 = v7;
        }
        while (*((_DWORD *)v7 + 8) != *v4);
      }
      v8 = (void **)v7[9];
      v9 = v7[13];
      v10 = *(_OWORD *)(v7 + 11);
      v11 = v7[17];
      v12 = *(_OWORD *)(v7 + 15);
      *(_OWORD *)memptr = *(_OWORD *)(v7 + 7);
      v51 = v8;
      v52 = v10;
      v53 = v9;
      v54 = v12;
      v55 = v11;
      v61 = 0;
      v60 = 0uLL;
      sub_239458B60((float64x2_t *)memptr, (double *)v60.i64);
      v13.i64[0] = v61;
      v14.i64[0] = v7[21];
      v15 = *(int8x16_t *)(v7 + 19);
      v16 = (int64x2_t *)&v3[v6];
      *v16 = v60;
      v16[1] = vzip1q_s64(v13, (int64x2_t)v15);
      v16[2] = (int64x2_t)vextq_s8(v15, v14, 8uLL);
      v6 += 6;
      ++v4;
    }
    while (v4 != v5);
  }
  v20 = *(_DWORD **)(a1 + 712);
  v21 = *(_DWORD **)(a1 + 720);
  if (v20 == v21)
  {
    v25 = *(_QWORD *)(a1 + 712);
  }
  else
  {
    v22 = *(_QWORD **)(a1 + 56);
    do
    {
      if (*((_DWORD *)v22 + 8) == *v20)
      {
        v23 = v22;
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v22[1];
          if (v24)
          {
            do
            {
              v23 = v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v23 = (_QWORD *)v22[2];
              v19 = *v23 == (_QWORD)v22;
              v22 = v23;
            }
            while (!v19);
          }
          v22 = v23;
        }
        while (*((_DWORD *)v23 + 8) != *v20);
      }
      v3[v6++] = v23[7];
      ++v20;
      v22 = v23;
    }
    while (v20 != v21);
    v25 = *(_QWORD *)(a1 + 720);
    v20 = *(_DWORD **)(a1 + 712);
  }
  if (((unint64_t)(v25 - (_QWORD)v20) >> 2)
     + ((*(_QWORD *)(a1 + 696) - *(_QWORD *)(a1 + 688)) >> 2))
  {
    v26 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 584) + 32))(a1 + 584);
    v60.i32[0] = 0;
    v48[0] = 0;
    v48[1] = 0;
    v49 = *(_DWORD *)(a1 + 608);
    sub_23945215C((uint64_t)v48, v49);
    if (v49)
      bzero(v48[0], 8 * v49);
    memptr[0] = v26;
    memptr[1] = (void *)(a1 + 688);
    sub_239C7B188(memptr, (uint64_t *)(a1 + 592), v48, &v60);
    memset(v47, 0, sizeof(v47));
    sub_239C7B3A8((_QWORD *)(a1 + 656), (uint64_t)v47);
    sub_239C1BE20((uint64_t *)v47);
    if (v49)
    {
      v27 = *(double **)(a1 + 616);
      v28 = *(double *)v48[0] * *v27;
      if (v49 != 1)
      {
        v29 = (double *)((char *)v48[0] + 8);
        v30 = (v49 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
        if (v30 >= 3)
        {
          v31 = v30 + 1;
          v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
          v29 = (double *)((char *)v29 + v32);
          v33 = (float64x2_t *)(v27 + 3);
          v34 = (float64x2_t *)((char *)v48[0] + 24);
          v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v36 = vmulq_f64(v34[-1], v33[-1]);
            v37 = vmulq_f64(*v34, *v33);
            v28 = v28 + v36.f64[0] + v36.f64[1] + v37.f64[0] + v37.f64[1];
            v33 += 2;
            v34 += 2;
            v35 -= 4;
          }
          while (v35);
          if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_45;
          v27 = (double *)((char *)v27 + v32);
        }
        v38 = v27 + 1;
        do
        {
          v39 = *v29++;
          v40 = v39;
          v41 = *v38++;
          v28 = v28 + v40 * v41;
        }
        while (v29 != (double *)((char *)v48[0] + 8 * v49));
      }
    }
    else
    {
      v28 = 0.0;
    }
LABEL_45:
    v46 = v48;
    v57 = &v46;
    v58 = v47;
    v59 = 0x3FE0000000000000;
    memptr[1] = &v56;
    v51 = v48;
    *(_QWORD *)&v52 = 0x3FF0000000000000;
    sub_239C1C794((double *)&v60.i64[1], (double *)memptr);
    v42 = *(double *)&v60.i64[1] - v28;
    free(v47[0]);
    free(v48[0]);
    goto LABEL_46;
  }
  v42 = 0.0;
LABEL_46:
  free(v3);
  return v42;
}

void sub_239C7A018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  free(a11);
  free(a14);
  free(v14);
  _Unwind_Resume(a1);
}

double sub_239C7A05C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  double v4;
  double *v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v21;
  _QWORD *v22;
  double *v23;
  double *v24;
  float64x2_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v2 = (_QWORD *)a1[4];
  v3 = a1 + 5;
  v4 = 0.0;
  if (v2 != a1 + 5)
  {
    do
    {
      if ((*((_BYTE *)v2 + 188) & 2) == 0 && *((_BYTE *)v2 + 44))
      {
        v7 = v2[9];
        v8 = v2[13];
        v9 = *(_OWORD *)(v2 + 11);
        v10 = v2[17];
        v11 = *(_OWORD *)(v2 + 15);
        v25 = *(float64x2_t *)(v2 + 7);
        v26 = v7;
        v27 = v9;
        v28 = v8;
        v29 = v11;
        v30 = v10;
        v32 = 0;
        v31 = 0uLL;
        sub_239458B60(&v25, (double *)&v31);
        _V1.D[1] = *((_QWORD *)&v31 + 1);
        _D5 = *((_QWORD *)&v31 + 1);
        __asm { FMLA            D4, D5, V1.D[1] }
        _D1 = v2[20];
        __asm { FMLA            D0, D1, V3.D[1] }
        v4 = v4 + _D0 + *((double *)v2 + 21) * *((double *)v2 + 21);
      }
      v21 = (_QWORD *)v2[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v2[2];
          _ZF = *v22 == (_QWORD)v2;
          v2 = v22;
        }
        while (!_ZF);
      }
      v2 = v22;
    }
    while (v22 != v3);
  }
  v5 = (double *)a1[7];
  if (v5 != (double *)(a1 + 8))
  {
    do
    {
      if ((*((_BYTE *)v5 + 68) & 2) == 0 && *((_BYTE *)v5 + 44))
        v4 = v4 + v5[7] * v5[7];
      v23 = (double *)*((_QWORD *)v5 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(double **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (double *)*((_QWORD *)v5 + 2);
          _ZF = *(_QWORD *)v24 == (_QWORD)v5;
          v5 = v24;
        }
        while (!_ZF);
      }
      v5 = v24;
    }
    while (v24 != (double *)(a1 + 8));
  }
  return v4;
}

uint64_t sub_239C7A1D4(uint64_t a1, _QWORD *a2)
{
  float64x2_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  double v10;
  double v18;
  double cosval;
  double v20;
  __double2 v21;
  float64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  double v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  _QWORD *v41;
  _QWORD *v42;
  double *v43;
  uint64_t result;
  uint64_t v45;
  double v46;
  double *v47;
  double *v48;
  float64x2_t v49;

  kdebug_trace();
  v5 = *(_QWORD **)(a1 + 432);
  v6 = (_QWORD *)v5[1];
  if (v6 != v5 + 2)
  {
    do
    {
      v7 = *((unsigned int *)v6 + 46);
      if ((_DWORD)v7 != -1)
      {
        *(_OWORD *)(v6 + 25) = *(_OWORD *)(v6 + 7);
        *(_OWORD *)(v6 + 27) = *(_OWORD *)(v6 + 9);
        *(_OWORD *)(v6 + 29) = *(_OWORD *)(v6 + 11);
        *(_OWORD *)(v6 + 31) = *(_OWORD *)(v6 + 13);
        v8 = *(_OWORD *)(v6 + 21);
        *(_OWORD *)(v6 + 37) = *(_OWORD *)(v6 + 19);
        *(_OWORD *)(v6 + 39) = v8;
        *(_OWORD *)(v6 + 35) = *(_OWORD *)(v6 + 17);
        *(_OWORD *)(v6 + 33) = *(_OWORD *)(v6 + 15);
        v9 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 536) + 4 * v7);
        v10 = *(double *)(v9 + 16);
        _Q7 = *(float64x2_t *)v9;
        _D13 = *(double *)(v9 + 8);
        _Q0 = vmulq_f64(_Q7, _Q7);
        __asm { FMLA            D0, D13, V7.D[1] }
        v18 = _Q0.f64[0] + v10 * v10;
        if (v18 >= 0.0000002635)
        {
          v20 = sqrt(v18);
          v49 = *(float64x2_t *)v9;
          v21 = __sincos_stret(v20);
          cosval = v21.__cosval;
          _Q7.f64[0] = v49.f64[0];
          _Q0.f64[0] = v21.__sinval / v20;
          v4.f64[0] = 1.0 / v18 * (1.0 - v21.__cosval);
        }
        else
        {
          v4.f64[0] = 0.5 - v18 * (v18 / -720.0 + 0.0416666667);
          _Q0.f64[0] = 1.0 - v18 * (0.166666667 - v18 * (v18 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v18 * v4.f64[0];
        }
        v22 = _Q7.f64[0] * v4.f64[0];
        v23 = _D13 * v4.f64[0];
        v24 = cosval + _Q7.f64[0] * v4.f64[0] * _Q7.f64[0];
        v25 = cosval + _D13 * v4.f64[0] * _D13;
        v26 = cosval + v10 * v4.f64[0] * v10;
        v4.f64[0] = _D13 * (_Q7.f64[0] * v4.f64[0]);
        v27 = v10 * v22;
        v28 = v10 * v23;
        v29 = _Q7.f64[0] * _Q0.f64[0];
        v30 = _D13 * _Q0.f64[0];
        _Q0.f64[0] = v10 * _Q0.f64[0];
        v31 = v4.f64[0] - _Q0.f64[0];
        v32 = v30 + v27;
        _Q0.f64[0] = v4.f64[0] + _Q0.f64[0];
        v4.f64[0] = v28 - v29;
        v33 = v27 - v30;
        v34 = v29 + v28;
        v35 = *((double *)v6 + 9);
        v36 = *(float64x2_t *)(v6 + 7);
        v37 = *((double *)v6 + 13);
        v38 = *(float64x2_t *)(v6 + 11);
        v39 = *((double *)v6 + 17);
        v40 = *(float64x2_t *)(v6 + 15);
        *((double *)v6 + 9) = v35 * v24 + v37 * _Q0.f64[0] + v39 * v33;
        *(float64x2_t *)(v6 + 7) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v24), v38, _Q0.f64[0]), v40, v33);
        *((double *)v6 + 13) = v35 * v31 + v37 * v25 + v39 * v34;
        *(float64x2_t *)(v6 + 11) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v31), v38, v25), v40, v34);
        *((double *)v6 + 17) = v35 * v32 + v37 * v4.f64[0] + v39 * v26;
        *(float64x2_t *)(v6 + 15) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v32), v38, v4.f64[0]), v40, v26);
        _Q0.f64[0] = (float64_t)v6[21];
        v4.f64[0] = *(float64_t *)(v9 + 40);
        *(float64x2_t *)(v6 + 19) = vaddq_f64(*(float64x2_t *)(v6 + 19), *(float64x2_t *)(v9 + 24));
        v6[21] = *(_OWORD *)&vaddq_f64(_Q0, v4);
      }
      v41 = (_QWORD *)v6[1];
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (_QWORD *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (_QWORD *)v6[2];
          _ZF = *v42 == (_QWORD)v6;
          v6 = v42;
        }
        while (!_ZF);
      }
      v6 = v42;
    }
    while (v42 != v5 + 2);
  }
  v43 = (double *)v5[4];
  if (v43 != (double *)(v5 + 5))
  {
    do
    {
      v45 = *((unsigned int *)v43 + 16);
      if ((_DWORD)v45 != -1)
      {
        v46 = v43[7];
        v43[10] = v46;
        v43[7] = *(double *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 560) + 4 * v45)) + v46;
      }
      v47 = (double *)*((_QWORD *)v43 + 1);
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = *(double **)v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = (double *)*((_QWORD *)v43 + 2);
          _ZF = *(_QWORD *)v48 == (_QWORD)v43;
          v43 = v48;
        }
        while (!_ZF);
      }
      v43 = v48;
    }
    while (v48 != (double *)(v5 + 5));
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 274) = *(_BYTE *)(a1 + 273);
  *(_WORD *)(a1 + 272) = 0;
  *(_WORD *)(a1 + 275) = 0;
  return result;
}

BOOL sub_239C7A550(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  int *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[6];
  uint64_t v15;

  v4 = *(_OWORD *)(a1 + 800);
  v11 = *(_OWORD *)(a1 + 784);
  v12 = v4;
  v13 = *(_QWORD *)(a1 + 816);
  WORD4(v12) = WORD4(v4) & 0xFFF1 | 0xC;
  if (*(_DWORD *)(a1 + 872) != 2)
  {
    sub_239A23A84(a1 + 880);
    *(_DWORD *)(a1 + 872) = 2;
  }
  *(_DWORD *)(a1 + 880) = -3;
  v5 = (int *)(a1 + 872);
  *(_OWORD *)(a1 + 906) = 0u;
  *(_OWORD *)(a1 + 922) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_DWORD *)(a1 + 888) = -3;
  *(_DWORD *)(a1 + 900) = 0;
  *(_QWORD *)(a1 + 892) = 0;
  *(_WORD *)(a1 + 904) = 1;
  *(_BYTE *)(a1 + 952) = 1;
  *(_QWORD *)(a1 + 960) = 0;
  sub_239A23AC4(SparseFactorizationCholesky, (uint64_t)&v11, (uint64_t)v14);
  v6 = v14[5];
  *(_OWORD *)(a1 + 944) = v14[4];
  *(_OWORD *)(a1 + 960) = v6;
  *(_QWORD *)(a1 + 976) = v15;
  v7 = v14[1];
  *(_OWORD *)(a1 + 880) = v14[0];
  *(_OWORD *)(a1 + 896) = v7;
  v8 = v14[3];
  *(_OWORD *)(a1 + 912) = v14[2];
  *(_OWORD *)(a1 + 928) = v8;
  v9 = *(_DWORD *)(a1 + 880);
  switch(v9)
  {
    case -4:
    case -3:
      goto LABEL_6;
    case -2:
    case -1:
      v9 = 1;
      goto LABEL_7;
    case 0:
      goto LABEL_7;
    default:
      if (v9 == -2147483647)
      {
LABEL_6:
        v9 = 2;
LABEL_7:
        *v5 = v9;
      }
      else
      {
        v9 = *v5;
      }
      *(_BYTE *)(a1 + 272) = v9 == 0;
      if (v9)
        return 1;
      sub_239C7B08C(a1 + 872, a2, (uint64_t)a2);
      return *(_BYTE *)(a1 + 272) == 0;
  }
}

uint64_t sub_239C7A6B4()
{
  return 1;
}

uint64_t sub_239C7A6BC()
{
  return 0;
}

void sub_239C7A6C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFC0D8;
  if (*(_DWORD *)(a1 + 872) != 2)
    sub_239A23A84(a1 + 880);
  sub_239C77324(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239C7A71C(uint64_t a1)
{
  return sub_239C7AF40(a1 + 312);
}

uint64_t sub_239C7A724(uint64_t result, double a2)
{
  *(double *)(result + 296) = a2;
  return result;
}

uint64_t sub_239C7A72C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 736) = a2;
  return result;
}

uint64_t sub_239C7A734(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 736);
}

BOOL sub_239C7A73C(_QWORD *a1)
{
  return ((a1[90] - a1[89]) >> 2) + ((a1[87] - a1[86]) >> 2) != 0;
}

uint64_t sub_239C7A768(uint64_t a1)
{
  return a1 + 616;
}

uint64_t sub_239C7A770(uint64_t a1)
{
  return a1 + 616;
}

double sub_239C7A778(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(unsigned int *)(a1 + 328);
  if (v4 != (_DWORD)v5)
  {
    *(_DWORD *)(a2 + 16) = v5;
    sub_23945215C(a2, v5);
  }
  v7 = *(unsigned int *)(a1 + 336);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 344);
    v10 = 4 * v7;
    do
    {
      v11 = (__int128 *)(*(_QWORD *)(a1 + 312) + 8 * v9);
      v12 = (_OWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 536) + v8));
      v6 = v11[2];
      v13 = *v11;
      v12[1] = v11[1];
      v12[2] = v6;
      *v12 = v13;
      v8 += 4;
      v9 += 6;
    }
    while (v10 != v8);
  }
  v14 = *(unsigned int *)(a1 + 340);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = *(_DWORD *)(a1 + 348);
    do
    {
      *(_QWORD *)&v6 = *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * (v16 + v15));
      *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 560) + 4 * v15++)) = v6;
    }
    while (v14 != v15);
  }
  return *(double *)&v6;
}

void sub_239C7A838(uint64_t a1, uint64_t a2)
{
  sub_239C7AA00((_QWORD *)(a1 + 352), a2, a1 + 536);
}

BOOL sub_239C7A848(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  unsigned int v6;
  uint64_t v7;
  int v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  _QWORD v12[2];
  void *memptr;
  _QWORD *v14;

  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  v1 = *(_DWORD *)(a1 + 872);
  if (!v1)
  {
    *(_QWORD *)(a1 + 856) = *(_QWORD *)(a1 + 440) + 72;
    *(_QWORD *)(a1 + 864) = a1 + 488;
    v3 = *(_DWORD *)(a1 + 896) * *(unsigned __int8 *)(a1 + 904);
    *(_DWORD *)(a1 + 848) = v3;
    *(_DWORD *)(a1 + 852) = v3;
    sub_23945215C(a1 + 832, v3 * (unint64_t)v3);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * v3 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v4 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if ((_DWORD)v3)
    {
      bzero(memptr, 8 * v3);
      for (i = 0; i != v3; ++i)
      {
        v4[i] = 0x3FF0000000000000;
        v6 = *(_DWORD *)(a1 + 848);
        v7 = *(_QWORD *)(a1 + 832);
        v8 = *(_DWORD *)(a1 + 872);
        if (v4 == (_QWORD *)(v7 + 8 * v6 * i))
        {
          if (!v8 && v6 == *(_DWORD *)(a1 + 892) * *(unsigned __int8 *)(a1 + 904))
          {
            v14 = v4;
            memptr = (void *)v6;
            sub_239A2424C(a1 + 880, (uint64_t)&memptr, 0);
          }
        }
        else if (!v8 && (_DWORD)v3 == *(_DWORD *)(a1 + 892) * *(unsigned __int8 *)(a1 + 904))
        {
          v14 = v4;
          memptr = (void *)v3;
          v12[1] = v7 + 8 * v6 * i;
          v12[0] = v6;
          if (v7)
            sub_239A23C90(a1 + 880, (uint64_t)v12, (uint64_t)&memptr, 0);
        }
        v4[i] = 0;
      }
    }
    free(v4);
  }
  return v1 == 0;
}

void sub_239C7A9EC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_239C7AA00(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  int64_t v19;
  void *v20;
  size_t v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t i;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  int64_t v36;
  char *v37;
  char *v38;

  v6 = *a1;
  v7 = *(_DWORD *)(v6 + 8) * (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1);
  v8 = (_DWORD *)a1[1];
  v9 = v8[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 48))(v8);
  if (v7 <= v9)
    v7 = v9;
  v10 = (_DWORD *)a1[2];
  v11 = v10[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 48))(v10);
  v12 = (_DWORD *)a1[3];
  v13 = v12[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 48))(v12);
  if (v11 > v13)
    v13 = v11;
  v14 = v13 + v7;
  *(_DWORD *)(a2 + 16) = v14;
  sub_23945215C(a2, v14);
  v15 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v15)
    bzero(*(void **)a2, 8 * v15);
  v16 = *a1;
  v18 = *(const void **)a3;
  v17 = *(_QWORD *)(a3 + 8);
  v19 = v17 - *(_QWORD *)a3;
  if (v17 == *(_QWORD *)a3)
  {
    v20 = 0;
    v22 = 0;
    v23 = *(unsigned int *)(v16 + 12);
    if (!(_DWORD)v23)
      goto LABEL_26;
  }
  else
  {
    if (v19 < 0)
      sub_2394189F8();
    v20 = operator new(v17 - *(_QWORD *)a3);
    v21 = 4 * (v19 >> 2);
    memcpy(v20, v18, v19);
    if (v21)
    {
      if ((v21 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v22 = (unsigned int *)operator new(4 * (v19 >> 2));
      v19 = (int64_t)&v22[v19 >> 2];
      memcpy(v22, v20, v21);
      v23 = *(unsigned int *)(v16 + 12);
      if (!(_DWORD)v23)
        goto LABEL_26;
    }
    else
    {
      v22 = 0;
      v19 = 0;
      v23 = *(unsigned int *)(v16 + 12);
      if (!(_DWORD)v23)
        goto LABEL_26;
    }
  }
  for (i = 0; i < v23; ++i)
  {
    v25 = (uint64_t *)(*(_QWORD *)(v16 + 88) + 24 * i);
    v26 = *v25;
    v27 = v25[1];
    if (v26 != v27)
    {
      while (i != *(_DWORD *)v26)
      {
        v26 += 16;
        if (v26 == v27)
          goto LABEL_18;
      }
      if ((v19 - (uint64_t)v22) >> 2 <= i)
        sub_23941D884();
      v28 = (_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * *(_QWORD *)(v26 + 8));
      v29 = *(_QWORD *)a2 + 8 * v22[i];
      *(_QWORD *)&v30 = *v28;
      if (v28 == *(_QWORD **)a2)
      {
        *(_QWORD *)&v31 = v28[14];
        *(_QWORD *)&v32 = v28[28];
        *((_QWORD *)&v30 + 1) = v28[7];
        *((_QWORD *)&v31 + 1) = v28[21];
        *((_QWORD *)&v32 + 1) = v28[35];
        *(_OWORD *)(v29 + 16) = v31;
        *(_OWORD *)(v29 + 32) = v32;
        *(_OWORD *)v29 = v30;
        v23 = *(unsigned int *)(v16 + 12);
      }
      else
      {
        *(_QWORD *)v29 = v30;
        *(_QWORD *)(v29 + 8) = v28[7];
        *(_QWORD *)(v29 + 16) = v28[14];
        *(_QWORD *)(v29 + 24) = v28[21];
        *(_QWORD *)(v29 + 32) = v28[28];
        *(_QWORD *)(v29 + 40) = v28[35];
      }
    }
LABEL_18:
    ;
  }
LABEL_26:
  if (v22)
    operator delete(v22);
  if (v20)
    operator delete(v20);
  v33 = a1[3];
  v35 = *(_BYTE **)(a3 + 24);
  v34 = *(_BYTE **)(a3 + 32);
  v36 = v34 - v35;
  if (v34 == v35)
  {
    v38 = 0;
    v37 = 0;
  }
  else
  {
    if (v36 < 0)
      sub_2394189F8();
    v37 = (char *)operator new(v34 - v35);
    v38 = &v37[4 * (v36 >> 2)];
    memcpy(v37, v35, v36);
  }
  sub_239C7ADC4(v33, (_QWORD *)a2, v37, v38);
  if (v37)
    operator delete(v37);
}

void sub_239C7AD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (!__p || (operator delete(__p), v13))
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_239C7ADC4(uint64_t a1, _QWORD *a2, _BYTE *a3, _BYTE *a4)
{
  int64_t v6;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v6 = a4 - a3;
  if (a4 == a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(unsigned int *)(a1 + 12);
    if (!(_DWORD)v10)
      goto LABEL_16;
  }
  else
  {
    if (v6 < 0)
      sub_2394189F8();
    v8 = (char *)operator new(a4 - a3);
    v9 = &v8[4 * (v6 >> 2)];
    memcpy(v8, a3, v6);
    v10 = *(unsigned int *)(a1 + 12);
    if (!(_DWORD)v10)
      goto LABEL_16;
  }
  for (i = 0; i < v10; ++i)
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 24 * i);
    v13 = *v12;
    v14 = v12[1];
    if (v13 != v14)
    {
      while (i != *(_DWORD *)v13)
      {
        v13 += 16;
        if (v13 == v14)
          goto LABEL_8;
      }
      if ((v9 - v8) >> 2 <= i)
        sub_23941D884();
      v15 = *(unsigned int *)&v8[4 * i];
      v16 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(v13 + 8));
      v17 = (_QWORD *)*a2;
      if (v16 == (_QWORD *)*a2)
      {
        v17[v15] = *v16;
        v10 = *(unsigned int *)(a1 + 12);
      }
      else
      {
        v17[v15] = *v16;
      }
    }
LABEL_8:
    ;
  }
LABEL_16:
  if (v8)
    operator delete(v8);
}

void sub_239C7AF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239C7AF40(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  double v5;
  unsigned int *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  float64_t *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unint64_t v21;
  uint64_t v22;
  double v23;

  v1 = *(_QWORD *)(result + 40);
  v2 = *(unsigned int *)(v1 + 8);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v1 + 88);
    v5 = 0.0;
    do
    {
      v6 = *(unsigned int **)(v4 + 24 * v3);
      v7 = *(unsigned int **)(v4 + 24 * v3 + 8);
      if (v7 != v6)
      {
        while (1)
        {
          v8 = *v6;
          if (v3 <= v8)
            break;
          v6 += 4;
          if (v6 == v7)
            goto LABEL_3;
        }
        if (v6 != v7 && v3 == v8)
        {
          v9 = *(_QWORD *)(v1 + 16);
          if (v9)
          {
            v10 = (float64_t *)(v9 + 8 * *((_QWORD *)v6 + 1));
            v11.f64[0] = *v10;
            v12.f64[0] = v10[14];
            v13.f64[0] = v10[28];
            v11.f64[1] = v10[7];
            v13.f64[1] = v10[35];
            v12.f64[1] = v10[21];
            v14 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v11), vabsq_f64(v13)), vabsq_f64(v12)));
            if (v5 < v14)
              v5 = v14;
          }
        }
      }
LABEL_3:
      ++v3;
    }
    while (v3 != v2);
  }
  else
  {
    v5 = 0.0;
  }
  v15 = *(_QWORD *)(result + 64);
  v16 = *(unsigned int *)(v15 + 8);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = *(_QWORD *)(v15 + 88);
    do
    {
      v19 = *(unsigned int **)(v18 + 24 * v17);
      v20 = *(unsigned int **)(v18 + 24 * v17 + 8);
      if (v20 != v19)
      {
        while (1)
        {
          v21 = *v19;
          if (v17 <= v21)
            break;
          v19 += 4;
          if (v19 == v20)
            goto LABEL_17;
        }
        if (v19 != v20 && v17 == v21)
        {
          v22 = *(_QWORD *)(v15 + 16);
          if (v22)
          {
            v23 = fabs(*(double *)(v22 + 8 * *((_QWORD *)v19 + 1)));
            if (v5 < v23)
              v5 = v23;
          }
        }
      }
LABEL_17:
      ++v17;
    }
    while (v17 != v16);
  }
  return result;
}

void sub_239C7B08C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  v5 = *(_QWORD *)a3;
  if (*a2 == *(_QWORD *)a3)
  {
    if (!*(_DWORD *)a1)
    {
      v12 = *(_DWORD *)(a3 + 16);
      if (v12 == *(_DWORD *)(a1 + 20) * *(unsigned __int8 *)(a1 + 32))
      {
        v15 = *a2;
        v14 = v12;
        sub_239A2424C(a1 + 8, (uint64_t)&v14, 0);
      }
    }
  }
  else
  {
    v6 = a1 + 8;
    if (!*(_DWORD *)a1)
    {
      v8 = *((_DWORD *)a2 + 4);
      v9 = *(unsigned __int8 *)(a1 + 32);
      if (v8 == *(_DWORD *)(a1 + 20) * v9)
      {
        v10 = *(_DWORD *)(a3 + 16);
        v11 = (*(_DWORD *)(a1 + 24) * v9);
        if (v10 != (_DWORD)v11)
        {
          *(_DWORD *)(a3 + 16) = v11;
          sub_23945215C(a3, v11);
          v8 = *((_DWORD *)a2 + 4);
          v10 = *(_DWORD *)(a3 + 16);
          v4 = *a2;
          v5 = *(_QWORD *)a3;
        }
        v15 = v4;
        v14 = v8;
        v13[1] = v5;
        v13[0] = v10;
        if (v5)
        {
          if (v4)
            sub_239A23C90(v6, (uint64_t)v13, (uint64_t)&v14, 0);
        }
      }
    }
  }
}

float64_t sub_239C7B188(_QWORD *a1, uint64_t *a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v12;
  uint64_t v13;
  float64x2_t *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int64x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float64x2_t v22;
  float64x2_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  _DWORD *v28;
  _DWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  float64x2_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  float64x2_t v41;
  uint64_t v42;

  v7 = *a2;
  v8 = a1[1];
  v9 = *(_DWORD **)v8;
  v10 = *(_DWORD **)(v8 + 8);
  if (*(_DWORD **)v8 != v10)
  {
    v12 = *(_QWORD **)(*a1 + 8);
    do
    {
      if (*((_DWORD *)v12 + 8) == *v9)
      {
        v25 = v12;
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v12[1];
          if (v26)
          {
            do
            {
              v25 = v26;
              v26 = (_QWORD *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v25 = (_QWORD *)v12[2];
              v27 = *v25 == (_QWORD)v12;
              v12 = v25;
            }
            while (!v27);
          }
          v12 = v25;
        }
        while (*((_DWORD *)v25 + 8) != *v9);
      }
      v13 = v25[9];
      v14 = (float64x2_t *)(v7 + 8 * *a4);
      v15 = v25[13];
      v16 = *(_OWORD *)(v25 + 11);
      v17 = v25[17];
      v18 = *(_OWORD *)(v25 + 15);
      v35 = *(float64x2_t *)(v25 + 7);
      v36 = v13;
      v37 = v16;
      v38 = v15;
      v39 = v18;
      v40 = v17;
      v42 = 0;
      v41 = 0uLL;
      sub_239458B60(&v35, v41.f64);
      v19.i64[0] = v42;
      v20.i64[0] = v25[21];
      v21 = *(int8x16_t *)(v25 + 19);
      v22 = vsubq_f64((float64x2_t)vextq_s8(v21, v20, 8uLL), v14[2]);
      v23 = vsubq_f64((float64x2_t)vzip1q_s64(v19, (int64x2_t)v21), v14[1]);
      v24 = *a3 + 8 * *a4;
      *(float64x2_t *)v24 = vsubq_f64(v41, *v14);
      *(float64x2_t *)(v24 + 16) = v23;
      *(float64x2_t *)(v24 + 32) = v22;
      *a4 += 6;
      ++v9;
      v12 = v25;
    }
    while (v9 != v10);
    v7 = *a2;
    v8 = a1[1];
  }
  v28 = *(_DWORD **)(v8 + 24);
  v29 = *(_DWORD **)(v8 + 32);
  if (v28 != v29)
  {
    v30 = *(_QWORD **)(*a1 + 32);
    do
    {
      if (*((_DWORD *)v30 + 8) == *v28)
      {
        v32 = v30;
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v30[1];
          if (v33)
          {
            do
            {
              v32 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v32 = (_QWORD *)v30[2];
              v27 = *v32 == (_QWORD)v30;
              v30 = v32;
            }
            while (!v27);
          }
          v30 = v32;
        }
        while (*((_DWORD *)v32 + 8) != *v28);
      }
      v31 = 8 * *a4;
      v23.f64[0] = *((double *)v32 + 7) - *(double *)(v7 + v31);
      *(float64_t *)(*a3 + v31) = v23.f64[0];
      ++*a4;
      ++v28;
      v30 = v32;
    }
    while (v28 != v29);
  }
  return v23.f64[0];
}

uint64_t sub_239C7B3A8(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  int v16;

  if (*(_DWORD *)(*a1 + 8) >= *(_DWORD *)(a1[1] + 8))
    v4 = (_DWORD *)*a1;
  else
    v4 = (_DWORD *)a1[1];
  v5 = v4[2];
  v6 = (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v4 + 48))(v4) * v5;
  if (*(_DWORD *)(a1[2] + 8) >= *(_DWORD *)(a1[3] + 8))
    v7 = (_DWORD *)a1[2];
  else
    v7 = (_DWORD *)a1[3];
  v8 = v7[2];
  v9 = v6 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 48))(v7) * v8;
  if (*(_DWORD *)(*a1 + 12) >= *(_DWORD *)(a1[2] + 12))
    v10 = (_DWORD *)*a1;
  else
    v10 = (_DWORD *)a1[2];
  v11 = v10[3];
  v12 = (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v10 + 56))(v10) * v11;
  if (*(_DWORD *)(a1[1] + 12) >= *(_DWORD *)(a1[3] + 12))
    v13 = (_DWORD *)a1[1];
  else
    v13 = (_DWORD *)a1[3];
  v14 = v13[3];
  v15 = v12 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 56))(v13) * v14;
  *(_DWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 20) = v15;
  sub_23945215C(a2, v15 * (unint64_t)v9);
  v16 = *(_DWORD *)(a2 + 20);
  if (v16 * *(_DWORD *)(a2 + 16))
    bzero(*(void **)a2, 8 * (v16 * *(_DWORD *)(a2 + 16)));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 64))(a1[2], a2, v6);
  (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)a1[3] + 64))(a1[3], a2, v6 | ((unint64_t)v12 << 32));
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, a2, 0);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)a1[1] + 64))(a1[1], a2, v12 << 32);
}

void sub_239C7B50C(uint64_t a1, _QWORD *a2, unsigned int **a3, unsigned int **a4)
{
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  _DWORD *v36;
  unsigned int v37;
  _DWORD *v38;
  unsigned int v39;
  _DWORD *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  unsigned int v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  unsigned int *v65;
  unint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  int v73;
  unint64_t v74;
  __n128 v75;
  unint64_t v76;
  __n128 *v77;
  __n128 *v78;
  unint64_t v79;
  __n128 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 *v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int *v92;
  unint64_t v93;
  __n128 *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  __n128 *v102;
  __n128 *v103;
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  __n128 *v120;
  __n128 *v121;
  __n128 v122;
  __n128 *v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  __n128 *v143;
  __n128 *v144;
  __n128 v145;
  __n128 *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  __n128 *v163;
  __n128 *v164;
  __n128 v165;
  __n128 *v166;
  unint64_t v167;
  uint64_t v168;
  unsigned int *v169;
  uint64_t v170;
  size_t v171;
  uint64_t v172;
  __n128 *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unsigned __int32 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  unsigned int v188;
  char *v189;
  uint64_t v190;
  size_t v191;
  unint64_t v192;
  unsigned int *v193;
  unsigned int v194;
  _QWORD *v195;
  unsigned int v196;
  unsigned int v197;
  std::bad_alloc *exception;
  std::bad_alloc *v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int *v208;
  unsigned int *v209;
  unsigned int *v210;
  unsigned int *v211;
  unsigned int *v212;
  uint64_t v214;
  unsigned int *v215;
  unint64_t v216;
  unsigned int **v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int *v231;
  unsigned int *v232;
  unsigned int *v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __n128 *v246;
  uint64_t v247;
  unsigned int *v248;
  unsigned int *v249;
  unsigned int *v250;
  void *memptr;

  v7 = *a2;
  v8 = *(_DWORD *)(v7 + 8) * (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  v9 = (_DWORD *)a2[1];
  v10 = v9[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 48))(v9);
  if (v8 <= v10)
    v8 = v10;
  v11 = (_DWORD *)a2[2];
  v12 = v11[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 48))(v11);
  v13 = (_DWORD *)a2[3];
  v14 = v13[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 48))(v13);
  if (v12 > v14)
    v14 = v12;
  v15 = v14 + v8;
  v16 = *a3;
  v17 = a3[1];
  v217 = a3;
  if (*a3 != v17)
  {
    v18 = v16 + 1;
    if (v16 + 1 != v17)
    {
      v19 = *v16;
      v20 = v16 + 1;
      do
      {
        v22 = *v20++;
        v21 = v22;
        v23 = v19 >= v22;
        if (v19 <= v22)
          v19 = v21;
        if (!v23)
          v16 = v18;
        v18 = v20;
      }
      while (v20 != v17);
    }
    v24 = *v16 + 6;
    if (v24 > v15)
      v15 = v24;
  }
  v25 = a3[3];
  v26 = a3[4];
  if (v25 != v26)
  {
    v27 = v25 + 1;
    if (v25 + 1 != v26)
    {
      v28 = *v25;
      v29 = v25 + 1;
      do
      {
        v31 = *v29++;
        v30 = v31;
        v32 = v28 >= v31;
        if (v28 <= v31)
          v28 = v30;
        if (!v32)
          v25 = v27;
        v27 = v29;
      }
      while (v29 != v26);
    }
    v33 = *v25;
    if (v33 + 1 > v15)
      v15 = v33 + 1;
  }
  v34 = *a2;
  v35 = *(_DWORD *)(v34 + 12) * (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
  v36 = (_DWORD *)a2[2];
  v37 = v36[3] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v36 + 56))(v36);
  if (v35 <= v37)
    v35 = v37;
  v38 = (_DWORD *)a2[1];
  v39 = v38[3] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v38 + 56))(v38);
  v40 = (_DWORD *)a2[3];
  v41 = v40[3] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v40 + 56))(v40);
  if (v39 > v41)
    v41 = v39;
  v42 = v41 + v35;
  v43 = *a4;
  v44 = a4[1];
  if (*a4 != v44)
  {
    v45 = v43 + 1;
    if (v43 + 1 != v44)
    {
      v46 = *v43;
      v47 = v43 + 1;
      do
      {
        v49 = *v47++;
        v48 = v49;
        v50 = v46 >= v49;
        if (v46 <= v49)
          v46 = v48;
        if (!v50)
          v43 = v45;
        v45 = v47;
      }
      while (v47 != v44);
    }
    v51 = *v43 + 6;
    if (v51 > v42)
      v42 = v51;
  }
  v52 = a4[3];
  v53 = a4[4];
  if (v52 != v53)
  {
    v54 = v52 + 1;
    if (v52 + 1 != v53)
    {
      v55 = *v52;
      v56 = v52 + 1;
      do
      {
        v58 = *v56++;
        v57 = v58;
        v59 = v55 >= v58;
        if (v55 <= v58)
          v55 = v57;
        if (!v59)
          v52 = v54;
        v54 = v56;
      }
      while (v56 != v53);
    }
    v60 = *v52;
    if (v60 + 1 > v42)
      v42 = v60 + 1;
  }
  v61 = 0;
  v62 = *(unsigned __int8 *)(a1 + 28);
  v248 = 0;
  v249 = 0;
  v250 = 0;
  v63 = v42 / v62;
  v247 = v62;
  if (v42 >= v62)
  {
    v64 = v42 / v62;
    v65 = (unsigned int *)operator new(v64 * 4);
    v61 = v65;
    v248 = v65;
    v250 = &v65[v64];
    v66 = (v63 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v67 = v65;
    if (v66 >= 7)
    {
      v68 = (v66 + 1) & 0x7FFFFFFFFFFFFFF8;
      v69 = v65;
      v70 = v68;
      do
      {
        *(_OWORD *)v69 = 0uLL;
        *((_OWORD *)v69 + 1) = 0uLL;
        v69 += 8;
        v70 -= 8;
      }
      while (v70);
      if (v66 + 1 == v68)
        goto LABEL_56;
      v67 = &v65[v68];
    }
    do
      *v67++ = 0;
    while (v67 != &v65[v64]);
LABEL_56:
    v249 = &v65[v64];
  }
  v200 = v63;
  v214 = a1;
  v71 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 40))(a2[2]);
  v72 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  v73 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  v74 = (6 * v71)
      + (unint64_t)v72
      + (36 * v73)
      + (unint64_t)(6 * (*(unsigned int (**)(_QWORD))(*(_QWORD *)a2[1] + 40))(a2[1]));
  v76 = *(unsigned __int8 *)(v214 + 28) * *(unsigned __int8 *)(v214 + 28);
  v202 = v42;
  if (v74 >= v76)
  {
    v79 = v74 / v76;
    v80 = (__n128 *)operator new(32 * (v74 / v76));
    v78 = &v80[2 * v79];
    v77 = v80;
  }
  else
  {
    v77 = 0;
    v78 = 0;
  }
  v81 = v247;
  v235 = v15 / v247;
  v82 = a2[2];
  LODWORD(v83) = 6 / v247;
  v203 = a2;
  v201 = 6 / v247;
  if (*(_DWORD *)(v82 + 12) && v247 <= 6)
  {
    if ((_DWORD)v247 == 1)
    {
      v106 = 0;
      v107 = *(_QWORD *)(v82 + 16);
      if (v83 <= 1)
        v83 = 1;
      else
        v83 = v83;
      v84 = v77;
      v238 = v83;
      v243 = *(_QWORD *)(v82 + 16);
      v209 = v61;
      v218 = a2[2];
      do
      {
        v108 = *(_QWORD *)(v82 + 88) + 24 * v106;
        v109 = *(unsigned int **)v108;
        v226 = v106;
        v231 = *(unsigned int **)(v108 + 8);
        v110 = (*a4)[v106];
        v222 = (unint64_t)v231 - *(_QWORD *)v108;
        if (v231 != *(unsigned int **)v108)
        {
          do
          {
            v112 = 0;
            v113 = v217[3][*v109];
            do
            {
              v114 = v107 + 8 * (*((_QWORD *)v109 + 1) + v112);
              v115 = v113 + v235 * (unint64_t)(v110 + v112);
              if (v84 < v78)
              {
                v84->n128_u64[0] = v115;
                v84->n128_u32[2] = v113;
                v84[1].n128_u64[0] = v114;
                v84[1].n128_u32[2] = 1;
                v84 += 2;
              }
              else
              {
                v116 = ((char *)v84 - (char *)v77) >> 5;
                v117 = v116 + 1;
                if ((unint64_t)(v116 + 1) >> 59)
                  sub_2394189F8();
                if (v78 - v77 > v117)
                  v117 = v78 - v77;
                if ((unint64_t)((char *)v78 - (char *)v77) >= 0x7FFFFFFFFFFFFFE0)
                  v118 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v118 = v117;
                if (v118)
                {
                  if (v118 >> 59)
                    sub_239418A80();
                  v119 = (char *)operator new(32 * v118);
                }
                else
                {
                  v119 = 0;
                }
                v120 = (__n128 *)&v119[32 * v116];
                v120->n128_u64[0] = v115;
                v120->n128_u32[2] = v113;
                v120[1].n128_u64[0] = v114;
                v120[1].n128_u32[2] = 1;
                if (v84 == v77)
                {
                  v123 = (__n128 *)&v119[32 * v116];
                }
                else
                {
                  v121 = (__n128 *)&v119[32 * v116];
                  do
                  {
                    v75 = v84[-2];
                    v122 = v84[-1];
                    v123 = v121 - 2;
                    v121[-2] = v75;
                    v121[-1] = v122;
                    v84 -= 2;
                    v121 -= 2;
                  }
                  while (v84 != v77);
                }
                v78 = (__n128 *)&v119[32 * v118];
                v84 = v120 + 2;
                if (v77)
                  operator delete(v77);
                v77 = v123;
                v83 = v238;
                v107 = v243;
              }
              ++v112;
            }
            while (v112 != v83);
            v109 += 4;
          }
          while (v109 != v231);
        }
        v61 = v209;
        v111 = v222 >> 4;
        v209[v110] += v222 >> 4;
        v209[(v110 + 1)] += v222 >> 4;
        if ((_DWORD)v83 != 2)
        {
          v209[(v110 + 2)] += v111;
          if ((_DWORD)v83 != 3)
          {
            v209[(v110 + 3)] += v111;
            if ((_DWORD)v83 != 4)
            {
              v209[(v110 + 4)] += v111;
              if ((_DWORD)v83 != 5)
                v209[(v110 + 5)] += v111;
            }
          }
        }
        v106 = v226 + 1;
        v82 = v218;
        v81 = v247;
      }
      while (v226 + 1 < (unint64_t)*(unsigned int *)(v218 + 12));
    }
    else
    {
      v192 = 0;
      v193 = *a4;
      if (v83 <= 1)
        v194 = 1;
      else
        v194 = 6 / v247;
      v195 = (_QWORD *)(*(_QWORD *)(v82 + 88) + 8);
      do
      {
        v196 = ((*v195 - *(v195 - 1)) >> 4) / v247;
        v197 = v193[v192] / v247;
        v61[v197] += v196;
        if (v247 < 4)
        {
          v61[v197 + 1] += v196;
          if (v194 != 2)
          {
            v61[v197 + 2] += v196;
            if (v194 != 3)
            {
              v61[v197 + 3] += v196;
              if (v194 != 4)
              {
                v61[v197 + 4] += v196;
                if (v194 != 5)
                  v61[v197 + 5] += v196;
              }
            }
          }
        }
        ++v192;
        v195 += 3;
      }
      while (v192 < *(unsigned int *)(v82 + 12));
      v84 = v77;
      v81 = v247;
    }
  }
  else
  {
    v84 = v77;
  }
  v85 = v203;
  v86 = v203[3];
  if (*(_DWORD *)(v86 + 12) && (_DWORD)v81 == 1)
  {
    v87 = 0;
    v88 = *(_QWORD *)(v86 + 16);
    v89 = v77;
    v242 = v88;
    v208 = v248;
    v221 = v203[3];
    do
    {
      v90 = *(_QWORD *)(v86 + 88) + 24 * v87;
      v91 = *(unsigned int **)v90;
      v92 = *(unsigned int **)(v90 + 8);
      v225 = (unint64_t)v92 - *(_QWORD *)v90;
      v230 = a4[3][v87];
      v237 = v87;
      if (v225)
      {
        v93 = a4[3][v87] * (unint64_t)v235;
        v94 = v89;
        do
        {
          v95 = v217[3][*v91];
          v96 = v93 + v95;
          v97 = v88 + 8 * *((_QWORD *)v91 + 1);
          if (v84 < v78)
          {
            v84->n128_u64[0] = v96;
            v84->n128_u32[2] = v95;
            v84[1].n128_u64[0] = v97;
            v84[1].n128_u32[2] = 1;
            v84 += 2;
            v89 = v94;
          }
          else
          {
            v98 = ((char *)v84 - (char *)v94) >> 5;
            v99 = v98 + 1;
            if ((unint64_t)(v98 + 1) >> 59)
              sub_2394189F8();
            if (v78 - v94 > v99)
              v99 = v78 - v94;
            if ((unint64_t)((char *)v78 - (char *)v94) >= 0x7FFFFFFFFFFFFFE0)
              v100 = 0x7FFFFFFFFFFFFFFLL;
            else
              v100 = v99;
            if (v100)
            {
              if (v100 >> 59)
                sub_239418A80();
              v101 = (char *)operator new(32 * v100);
            }
            else
            {
              v101 = 0;
            }
            v102 = (__n128 *)&v101[32 * v98];
            v102->n128_u64[0] = v96;
            v102->n128_u32[2] = v95;
            v102[1].n128_u64[0] = v97;
            v102[1].n128_u32[2] = 1;
            if (v84 == v94)
            {
              v89 = (__n128 *)&v101[32 * v98];
            }
            else
            {
              v103 = (__n128 *)&v101[32 * v98];
              do
              {
                v75 = v84[-2];
                v104 = v84[-1];
                v89 = v103 - 2;
                v103[-2] = v75;
                v103[-1] = v104;
                v84 -= 2;
                v103 -= 2;
              }
              while (v84 != v94);
            }
            v78 = (__n128 *)&v101[32 * v100];
            v84 = v102 + 2;
            if (v94)
              operator delete(v94);
            v88 = v242;
          }
          v91 += 4;
          v94 = v89;
        }
        while (v91 != v92);
      }
      v61 = v208;
      v81 = v247;
      v208[v230] += v225 >> 4;
      v87 = v237 + 1;
      v86 = v221;
    }
    while (v237 + 1 < (unint64_t)*(unsigned int *)(v221 + 12));
    v77 = v89;
    v105 = v214;
    v85 = v203;
  }
  else
  {
    v105 = v214;
  }
  v124 = *v85;
  if (*(_DWORD *)(*v85 + 12))
    v125 = v81 > 6;
  else
    v125 = 1;
  if (!v125)
  {
    v126 = 0;
    v223 = *(_QWORD *)(v124 + 16);
    v219 = 6 * v81;
    if (v201 <= 1)
      v127 = 1;
    else
      v127 = v201;
    v244 = v127;
    v210 = v248;
    v204 = v124;
    do
    {
      v128 = *(_QWORD *)(v124 + 88) + 24 * v126;
      v129 = *(unsigned int **)v128;
      v130 = (*a4)[v126] / v81;
      v215 = *(unsigned int **)(v128 + 8);
      v205 = (unint64_t)v215 - *(_QWORD *)v128;
      v206 = v126;
      v227 = v130;
      if (v215 != *(unsigned int **)v128)
      {
        do
        {
          v132 = 0;
          v133 = (*v217)[*v129] / v81;
          v232 = v129;
          do
          {
            v134 = 0;
            v135 = v235 * (unint64_t)(v130 + v132);
            v239 = v132;
            v136 = v223 + 8 * (*((_QWORD *)v129 + 1) + (v219 * v132));
            do
            {
              v137 = v133 + v134;
              v138 = v135 + v137;
              if (v84 < v78)
              {
                v84->n128_u64[0] = v138;
                v84->n128_u32[2] = v137;
                v84[1].n128_u64[0] = v136;
                v84[1].n128_u32[2] = 6;
                v84 += 2;
              }
              else
              {
                v139 = ((char *)v84 - (char *)v77) >> 5;
                v140 = v139 + 1;
                if ((unint64_t)(v139 + 1) >> 59)
                  sub_2394189F8();
                if (v78 - v77 > v140)
                  v140 = v78 - v77;
                if ((unint64_t)((char *)v78 - (char *)v77) >= 0x7FFFFFFFFFFFFFE0)
                  v141 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v141 = v140;
                if (v141)
                {
                  if (v141 >> 59)
                    sub_239418A80();
                  v142 = (char *)operator new(32 * v141);
                }
                else
                {
                  v142 = 0;
                }
                v143 = (__n128 *)&v142[32 * v139];
                v143->n128_u64[0] = v138;
                v143->n128_u32[2] = v137;
                v143[1].n128_u64[0] = v136;
                v143[1].n128_u32[2] = 6;
                if (v84 == v77)
                {
                  v146 = (__n128 *)&v142[32 * v139];
                }
                else
                {
                  v144 = (__n128 *)&v142[32 * v139];
                  do
                  {
                    v75 = v84[-2];
                    v145 = v84[-1];
                    v146 = v144 - 2;
                    v144[-2] = v75;
                    v144[-1] = v145;
                    v84 -= 2;
                    v144 -= 2;
                  }
                  while (v84 != v77);
                }
                v78 = (__n128 *)&v142[32 * v141];
                v84 = v143 + 2;
                if (v77)
                  operator delete(v77);
                v77 = v146;
                v81 = v247;
                v127 = v244;
              }
              ++v134;
              v136 += 8 * v81;
            }
            while (v134 != v127);
            v132 = v239 + 1;
            v130 = v227;
            v129 = v232;
          }
          while (v239 + 1 != v127);
          v129 = v232 + 4;
        }
        while (v232 + 4 != v215);
      }
      v131 = 6 * (v205 >> 4) / v81;
      v61 = v210;
      v210[v130] += v131;
      v81 = v247;
      if (v247 <= 3)
      {
        v210[v130 + 1] += v131;
        v81 = v247;
        if ((_DWORD)v127 != 2)
        {
          v210[v130 + 2] += v131;
          v81 = v247;
          if ((_DWORD)v127 != 3)
          {
            v210[v130 + 3] += v131;
            v81 = v247;
            if ((_DWORD)v127 != 4)
            {
              v210[v130 + 4] += v131;
              v81 = v247;
              if ((_DWORD)v127 != 5)
              {
                v81 = v247;
                v210[v130 + 5] += v131;
              }
            }
          }
        }
      }
      v126 = v206 + 1;
      v124 = v204;
    }
    while (v206 + 1 < (unint64_t)*(unsigned int *)(v204 + 12));
    v105 = v214;
    v85 = v203;
  }
  v147 = v85[1];
  if (*(_DWORD *)(v147 + 12) && (_DWORD)v81 == 1)
  {
    v148 = 0;
    v228 = *(_QWORD *)(v147 + 16);
    if (v201 <= 1)
      v149 = 1;
    else
      v149 = v201;
    v245 = v149;
    v207 = v147;
    v211 = v248;
    do
    {
      v150 = *(_QWORD *)(v147 + 88) + 24 * v148;
      v151 = *(unsigned int **)v150;
      v233 = *(unsigned int **)(v150 + 8);
      v216 = (unint64_t)v233 - *(_QWORD *)v150;
      v220 = a4[3][v148];
      v224 = v148;
      if (v233 != *(unsigned int **)v150)
      {
        v152 = a4[3][v148] * (unint64_t)v235;
        v153 = v247;
        do
        {
          v154 = 0;
          v155 = (*v217)[*v151];
          v240 = v151;
          v156 = v228 + 8 * *((_QWORD *)v151 + 1);
          do
          {
            v157 = v155 + v154;
            v158 = v152 + v157;
            if (v84 < v78)
            {
              v84->n128_u64[0] = v158;
              v84->n128_u32[2] = v157;
              v84[1].n128_u64[0] = v156;
              v84[1].n128_u32[2] = 6;
              v84 += 2;
            }
            else
            {
              v159 = ((char *)v84 - (char *)v77) >> 5;
              v160 = v159 + 1;
              if ((unint64_t)(v159 + 1) >> 59)
                sub_2394189F8();
              if (v78 - v77 > v160)
                v160 = v78 - v77;
              if ((unint64_t)((char *)v78 - (char *)v77) >= 0x7FFFFFFFFFFFFFE0)
                v161 = 0x7FFFFFFFFFFFFFFLL;
              else
                v161 = v160;
              if (v161)
              {
                if (v161 >> 59)
                  sub_239418A80();
                v162 = (char *)operator new(32 * v161);
              }
              else
              {
                v162 = 0;
              }
              v163 = (__n128 *)&v162[32 * v159];
              v163->n128_u64[0] = v158;
              v163->n128_u32[2] = v157;
              v163[1].n128_u64[0] = v156;
              v163[1].n128_u32[2] = 6;
              if (v84 == v77)
              {
                v166 = (__n128 *)&v162[32 * v159];
              }
              else
              {
                v164 = (__n128 *)&v162[32 * v159];
                do
                {
                  v75 = v84[-2];
                  v165 = v84[-1];
                  v166 = v164 - 2;
                  v164[-2] = v75;
                  v164[-1] = v165;
                  v84 -= 2;
                  v164 -= 2;
                }
                while (v84 != v77);
              }
              v78 = (__n128 *)&v162[32 * v161];
              v84 = v163 + 2;
              if (v77)
                operator delete(v77);
              v77 = v166;
              v153 = v247;
              v149 = v245;
            }
            ++v154;
            v156 += 8 * v153;
          }
          while (v154 != v149);
          v151 = v240 + 4;
        }
        while (v240 + 4 != v233);
      }
      v61 = v211;
      v211[v220] += 6 * (v216 >> 4);
      v148 = v224 + 1;
      v147 = v207;
    }
    while (v224 + 1 < (unint64_t)*(unsigned int *)(v207 + 12));
    v105 = v214;
  }
  v167 = 126 - 2 * __clz(((char *)v84 - (char *)v77) >> 5);
  if (v84 == v77)
    v168 = 0;
  else
    v168 = v167;
  sub_239C7F7EC((uint64_t)v77, v84, v168, 1, v75);
  *(_WORD *)(v105 + 24) &= ~1u;
  sub_239C7F1C4(v105, v235, &v248);
  v212 = v61;
  if (v202 >= v247)
  {
    v170 = 0;
    v171 = 8 * v247;
    if (v200 <= 1)
      v172 = 1;
    else
      v172 = v200;
    v229 = v172;
    v173 = v77;
    do
    {
      v174 = *(_QWORD *)(v105 + 8);
      v175 = *(_QWORD *)(v174 + 8 * v170);
      v234 = v170 + 1;
      v236 = *(_QWORD *)(v174 + 8 * (v170 + 1));
      if (v175 != v236)
      {
        v176 = 8 * v175;
        do
        {
          *(_DWORD *)(*(_QWORD *)(v105 + 16) + 4 * v175) = v173->n128_u32[2];
          v177 = v173[1].n128_u64[0];
          v178 = v173[1].n128_u32[2];
          v179 = *(unsigned __int8 *)(v105 + 28);
          v180 = *(_QWORD *)(v105 + 32);
          v181 = (v179 * v179);
          v241 = v176;
          v246 = v173;
          if (v177 == v180 + 8 * v175 * v181)
          {
            memptr = 0;
            malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * (_DWORD)v181 + 31) & 0xFFFE0, 0x100BBD03uLL);
            v186 = (char *)memptr;
            v187 = v247;
            if (!memptr)
            {
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v199 = std::bad_alloc::bad_alloc(exception);
              __cxa_throw(v199, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
            }
            v188 = 0;
            v189 = (char *)memptr;
            do
            {
              memmove(v189, (const void *)(v177 + 8 * v188), v171);
              v188 += v178;
              v189 += v171;
              --v187;
            }
            while (v187);
            v105 = v214;
            if ((_DWORD)v179)
            {
              v190 = 0;
              v191 = 8 * v179;
              do
              {
                memmove((void *)(v177 + v190), &v186[v190], v191);
                v190 += v191;
                --v179;
              }
              while (v179);
            }
            free(v186);
          }
          else
          {
            v182 = 0;
            v183 = (char *)(v180
                          + v176 * *(unsigned __int8 *)(v105 + 28) * (unint64_t)*(unsigned __int8 *)(v105 + 28));
            v184 = 8 * v179;
            v185 = v247;
            do
            {
              memmove(v183, (const void *)(v177 + 8 * v182), v171);
              v183 += v184;
              v182 += v178;
              --v185;
            }
            while (v185);
          }
          v173 = v246 + 2;
          ++v175;
          v176 = v241 + 8;
        }
        while (v175 != v236);
      }
      v170 = v234;
    }
    while (v234 != v229);
  }
  v169 = v212;
  if (v77)
  {
    operator delete(v77);
    v169 = v248;
  }
  if (v169)
  {
    v249 = v169;
    operator delete(v169);
  }
}

void sub_239C7C600(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v4;

  if (v1)
    operator delete(v1);
  v4 = *(void **)(v2 - 120);
  if (v4)
  {
    *(_QWORD *)(v2 - 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_239C7C654(uint64_t a1, _QWORD *a2, unsigned int **a3, unsigned int **a4)
{
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  _DWORD *v35;
  unsigned int v36;
  _DWORD *v37;
  unsigned int v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t v60;
  size_t v61;
  unsigned int *v62;
  int v63;
  unsigned int v64;
  int v65;
  unint64_t v66;
  __n128 v67;
  unint64_t v68;
  __n128 *v69;
  __n128 *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __n128 *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  __n128 *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  __n128 *v91;
  __n128 *v92;
  __n128 v93;
  uint64_t v94;
  __n128 *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  __n128 *v103;
  __n128 *v104;
  __n128 v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  __n128 *v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  __n128 *v127;
  __n128 *v128;
  __n128 v129;
  __n128 *v130;
  __n128 *v131;
  __n128 *v132;
  __n128 v133;
  __n128 *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int *v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  __n128 *v152;
  __n128 *v153;
  __n128 v154;
  __n128 *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned int *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  __n128 *v167;
  __n128 *v168;
  __n128 v169;
  __n128 *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  __n128 *v174;
  uint64_t v175;
  unsigned int *v176;
  uint64_t v177;
  unsigned int v178;
  unint64_t v179;
  uint64_t v180;
  __n128 *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  __n128 *v188;
  __n128 *v189;
  __n128 v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  __n128 *v197;
  __n128 *v198;
  __n128 v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __n128 *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  char *v211;
  uint64_t v212;
  size_t v213;
  unsigned int *v214;
  std::bad_alloc *exception;
  std::bad_alloc *v216;
  _QWORD *v217;
  unsigned int v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v224;
  unsigned int *v225;
  unint64_t v226;
  unsigned int **v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int *v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int *v235;
  unint64_t v236;
  unsigned int *v237;
  unsigned int *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  unsigned int *v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int *v249;
  unsigned int *v250;
  unsigned int *v251;
  void *memptr;

  v6 = *a2;
  v7 = *(_DWORD *)(v6 + 8) * (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  v8 = (_DWORD *)a2[1];
  v9 = v8[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 48))(v8);
  if (v7 <= v9)
    v7 = v9;
  v10 = (_DWORD *)a2[2];
  v11 = v10[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 48))(v10);
  v12 = (_DWORD *)a2[3];
  v13 = v12[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 48))(v12);
  if (v11 > v13)
    v13 = v11;
  v14 = v13 + v7;
  v15 = *a3;
  v16 = a3[1];
  v228 = a3;
  if (*a3 != v16)
  {
    v17 = v15 + 1;
    if (v15 + 1 != v16)
    {
      v18 = *v15;
      v19 = v15 + 1;
      do
      {
        v21 = *v19++;
        v20 = v21;
        v22 = v18 >= v21;
        if (v18 <= v21)
          v18 = v20;
        if (!v22)
          v15 = v17;
        v17 = v19;
      }
      while (v19 != v16);
    }
    v23 = *v15 + 6;
    if (v23 > v14)
      v14 = v23;
  }
  v24 = a3[3];
  v25 = a3[4];
  if (v24 != v25)
  {
    v26 = v24 + 1;
    if (v24 + 1 != v25)
    {
      v27 = *v24;
      v28 = v24 + 1;
      do
      {
        v30 = *v28++;
        v29 = v30;
        v31 = v27 >= v30;
        if (v27 <= v30)
          v27 = v29;
        if (!v31)
          v24 = v26;
        v26 = v28;
      }
      while (v28 != v25);
    }
    v32 = *v24;
    if (v32 + 1 > v14)
      v14 = v32 + 1;
  }
  v33 = *a2;
  v34 = *(_DWORD *)(v33 + 12) * (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
  v35 = (_DWORD *)a2[2];
  v36 = v35[3] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v35 + 56))(v35);
  if (v34 <= v36)
    v34 = v36;
  v37 = (_DWORD *)a2[1];
  v38 = v37[3] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v37 + 56))(v37);
  v39 = (_DWORD *)a2[3];
  v40 = v39[3] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v39 + 56))(v39);
  if (v38 > v40)
    v40 = v38;
  v41 = v40 + v34;
  v42 = *a4;
  v43 = a4[1];
  if (*a4 != v43)
  {
    v44 = v42 + 1;
    if (v42 + 1 != v43)
    {
      v45 = *v42;
      v46 = v42 + 1;
      do
      {
        v48 = *v46++;
        v47 = v48;
        v49 = v45 >= v48;
        if (v45 <= v48)
          v45 = v47;
        if (!v49)
          v42 = v44;
        v44 = v46;
      }
      while (v46 != v43);
    }
    v50 = *v42 + 6;
    if (v50 > v41)
      v41 = v50;
  }
  v51 = a4[3];
  v52 = a4[4];
  if (v51 != v52)
  {
    v53 = v51 + 1;
    if (v51 + 1 != v52)
    {
      v54 = *v51;
      v55 = v51 + 1;
      do
      {
        v57 = *v55++;
        v56 = v57;
        v58 = v54 >= v57;
        if (v54 <= v57)
          v54 = v56;
        if (!v58)
          v51 = v53;
        v53 = v55;
      }
      while (v55 != v52);
    }
    v59 = *v51;
    if (v59 + 1 > v41)
      v41 = v59 + 1;
  }
  v60 = v41;
  v249 = 0;
  v250 = 0;
  v251 = 0;
  if (v41)
  {
    v61 = v41;
    v62 = (unsigned int *)operator new(v61 * 4);
    v249 = v62;
    v251 = &v62[v61];
    bzero(v62, 4 * v60);
    v250 = &v62[v61];
  }
  else
  {
    v62 = 0;
  }
  v63 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 40))(a2[2]);
  v64 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  v65 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  v222 = v60;
  v66 = (6 * v63)
      + (unint64_t)v64
      + (36 * v65)
      + (unint64_t)(6 * (*(unsigned int (**)(_QWORD))(*(_QWORD *)a2[1] + 40))(a2[1]));
  v68 = *(unsigned __int8 *)(a1 + 28) * *(unsigned __int8 *)(a1 + 28);
  v218 = v14;
  if (v66 >= v68)
  {
    v71 = v66 / v68;
    v69 = (__n128 *)operator new(32 * (v66 / v68));
    v70 = &v69[2 * v71];
  }
  else
  {
    v69 = 0;
    v70 = 0;
  }
  v244 = v62;
  v217 = a2;
  v72 = a2[2];
  v73 = *(unsigned int *)(v72 + 12);
  if ((_DWORD)v73)
  {
    v74 = 0;
    v75 = *(_QWORD *)(v72 + 16);
    v76 = v69;
    v239 = v75;
    v224 = a2[2];
    do
    {
      v77 = *(_QWORD *)(v72 + 88) + 24 * v74;
      v78 = *(unsigned int **)v77;
      v232 = *(unsigned int **)(v77 + 8);
      if (*(unsigned int **)v77 != v232)
      {
        v229 = v74;
        v79 = (*a4)[v74];
        v242 = v79;
        do
        {
          v80 = v228[3][*v78];
          v244 = v249;
          if (v79 >= v80)
          {
            v94 = 0;
            v95 = v69;
            do
            {
              v96 = v79 + v94;
              v97 = v75 + 8 * (*((_QWORD *)v78 + 1) + v94);
              v98 = v80 + v218 * (unint64_t)v96;
              if (v76 < v70)
              {
                v76->n128_u64[0] = v98;
                v76->n128_u32[2] = v80;
                v76[1].n128_u64[0] = v97;
                v76[1].n128_u32[2] = 1;
                v76 += 2;
                v69 = v95;
              }
              else
              {
                v99 = ((char *)v76 - (char *)v95) >> 5;
                v100 = v99 + 1;
                if ((unint64_t)(v99 + 1) >> 59)
                  sub_2394189F8();
                if (v70 - v95 > v100)
                  v100 = v70 - v95;
                if ((unint64_t)((char *)v70 - (char *)v95) >= 0x7FFFFFFFFFFFFFE0)
                  v101 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v101 = v100;
                if (v101)
                {
                  if (v101 >> 59)
                    sub_239418A80();
                  v102 = (char *)operator new(32 * v101);
                }
                else
                {
                  v102 = 0;
                }
                v103 = (__n128 *)&v102[32 * v99];
                v103->n128_u64[0] = v98;
                v103->n128_u32[2] = v80;
                v103[1].n128_u64[0] = v97;
                v103[1].n128_u32[2] = 1;
                if (v76 == v95)
                {
                  v69 = (__n128 *)&v102[32 * v99];
                }
                else
                {
                  v104 = (__n128 *)&v102[32 * v99];
                  do
                  {
                    v67 = v76[-2];
                    v105 = v76[-1];
                    v69 = v104 - 2;
                    v104[-2] = v67;
                    v104[-1] = v105;
                    v76 -= 2;
                    v104 -= 2;
                  }
                  while (v76 != v95);
                }
                v70 = (__n128 *)&v102[32 * v101];
                v76 = v103 + 2;
                if (v95)
                  operator delete(v95);
                v75 = v239;
                v79 = v242;
              }
              ++v244[v96];
              ++v94;
              v95 = v69;
            }
            while (v94 != 6);
          }
          else
          {
            v81 = 0;
            v82 = v218 * (unint64_t)v80;
            v83 = v69;
            do
            {
              v84 = v79 + v81;
              v85 = v75 + 8 * (*((_QWORD *)v78 + 1) + v81);
              v86 = v82 + v84;
              if (v76 < v70)
              {
                v76->n128_u64[0] = v86;
                v76->n128_u32[2] = v84;
                v76[1].n128_u64[0] = v85;
                v76[1].n128_u32[2] = 1;
                v76 += 2;
                v69 = v83;
              }
              else
              {
                v87 = ((char *)v76 - (char *)v83) >> 5;
                v88 = v87 + 1;
                if ((unint64_t)(v87 + 1) >> 59)
                  sub_2394189F8();
                if (v70 - v83 > v88)
                  v88 = v70 - v83;
                if ((unint64_t)((char *)v70 - (char *)v83) >= 0x7FFFFFFFFFFFFFE0)
                  v89 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v89 = v88;
                if (v89)
                {
                  if (v89 >> 59)
                    sub_239418A80();
                  v90 = (char *)operator new(32 * v89);
                }
                else
                {
                  v90 = 0;
                }
                v91 = (__n128 *)&v90[32 * v87];
                v91->n128_u64[0] = v86;
                v91->n128_u32[2] = v84;
                v91[1].n128_u64[0] = v85;
                v91[1].n128_u32[2] = 1;
                if (v76 == v83)
                {
                  v69 = (__n128 *)&v90[32 * v87];
                }
                else
                {
                  v92 = (__n128 *)&v90[32 * v87];
                  do
                  {
                    v67 = v76[-2];
                    v93 = v76[-1];
                    v69 = v92 - 2;
                    v92[-2] = v67;
                    v92[-1] = v93;
                    v76 -= 2;
                    v92 -= 2;
                  }
                  while (v76 != v83);
                }
                v70 = (__n128 *)&v90[32 * v89];
                v76 = v91 + 2;
                if (v83)
                  operator delete(v83);
                v82 = v218 * (unint64_t)v80;
                v75 = v239;
                v79 = v242;
              }
              ++v244[v80];
              ++v81;
              v83 = v69;
            }
            while (v81 != 6);
          }
          v78 += 4;
        }
        while (v78 != v232);
        v72 = v224;
        v73 = *(unsigned int *)(v224 + 12);
        v74 = v229;
      }
      ++v74;
    }
    while (v74 < v73);
  }
  else
  {
    v76 = v69;
  }
  v106 = v217[3];
  v107 = *(unsigned int *)(v106 + 12);
  if ((_DWORD)v107)
  {
    v108 = 0;
    v109 = *(_QWORD *)(v106 + 16);
    v110 = v69;
    v240 = v109;
    v233 = v217[3];
    do
    {
      v111 = *(_QWORD *)(v106 + 88) + 24 * v108;
      v113 = *(unsigned int **)v111;
      v112 = *(unsigned int **)(v111 + 8);
      if (*(unsigned int **)v111 != v112)
      {
        v236 = v108;
        v114 = a4[3][v108];
        v244 = v249;
        do
        {
          v115 = v228[3][*v113];
          v116 = v109 + 8 * *((_QWORD *)v113 + 1);
          if (v114 >= v115)
          {
            v118 = v114 * (unint64_t)v218 + v115;
            if (v76 < v70)
            {
              v76->n128_u64[0] = v118;
              v76->n128_u32[2] = v115;
              v76[1].n128_u64[0] = v116;
              v76[1].n128_u32[2] = 1;
              v76 += 2;
              v115 = v114;
            }
            else
            {
              v119 = ((char *)v76 - (char *)v110) >> 5;
              v120 = v119 + 1;
              if ((unint64_t)(v119 + 1) >> 59)
                goto LABEL_298;
              if (v70 - v110 > v120)
                v120 = v70 - v110;
              if ((unint64_t)((char *)v70 - (char *)v110) >= 0x7FFFFFFFFFFFFFE0)
                v121 = 0x7FFFFFFFFFFFFFFLL;
              else
                v121 = v120;
              if (v121)
              {
                if (v121 >> 59)
                  goto LABEL_299;
                v122 = (char *)operator new(32 * v121);
              }
              else
              {
                v122 = 0;
              }
              v127 = (__n128 *)&v122[32 * v119];
              v127->n128_u64[0] = v118;
              v127->n128_u32[2] = v115;
              v127[1].n128_u64[0] = v116;
              v127[1].n128_u32[2] = 1;
              if (v76 == v110)
              {
                v130 = (__n128 *)&v122[32 * v119];
              }
              else
              {
                v128 = (__n128 *)&v122[32 * v119];
                do
                {
                  v67 = v76[-2];
                  v129 = v76[-1];
                  v130 = v128 - 2;
                  v128[-2] = v67;
                  v128[-1] = v129;
                  v76 -= 2;
                  v128 -= 2;
                }
                while (v76 != v110);
              }
              v70 = (__n128 *)&v122[32 * v121];
              v76 = v127 + 2;
              if (v110)
                operator delete(v110);
              v110 = v130;
              v115 = v114;
              v109 = v240;
            }
          }
          else
          {
            v117 = v114 + v218 * (unint64_t)v115;
            if (v76 >= v70)
            {
              v123 = ((char *)v76 - (char *)v110) >> 5;
              v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 59)
LABEL_298:
                sub_2394189F8();
              if (v70 - v110 > v124)
                v124 = v70 - v110;
              if ((unint64_t)((char *)v70 - (char *)v110) >= 0x7FFFFFFFFFFFFFE0)
                v125 = 0x7FFFFFFFFFFFFFFLL;
              else
                v125 = v124;
              if (v125)
              {
                if (v125 >> 59)
LABEL_299:
                  sub_239418A80();
                v126 = (char *)operator new(32 * v125);
              }
              else
              {
                v126 = 0;
              }
              v131 = (__n128 *)&v126[32 * v123];
              v131->n128_u64[0] = v117;
              v131->n128_u32[2] = v114;
              v131[1].n128_u64[0] = v116;
              v131[1].n128_u32[2] = 1;
              if (v76 == v110)
              {
                v134 = (__n128 *)&v126[32 * v123];
              }
              else
              {
                v132 = (__n128 *)&v126[32 * v123];
                do
                {
                  v67 = v76[-2];
                  v133 = v76[-1];
                  v134 = v132 - 2;
                  v132[-2] = v67;
                  v132[-1] = v133;
                  v76 -= 2;
                  v132 -= 2;
                }
                while (v76 != v110);
              }
              v70 = (__n128 *)&v126[32 * v125];
              v76 = v131 + 2;
              if (v110)
                operator delete(v110);
              v110 = v134;
              v109 = v240;
            }
            else
            {
              v76->n128_u64[0] = v117;
              v76->n128_u32[2] = v114;
              v76[1].n128_u64[0] = v116;
              v76[1].n128_u32[2] = 1;
              v76 += 2;
            }
          }
          ++v244[v115];
          v113 += 4;
        }
        while (v113 != v112);
        v106 = v233;
        v108 = v236;
        v107 = *(unsigned int *)(v233 + 12);
      }
      ++v108;
    }
    while (v108 < v107);
  }
  else
  {
    v110 = v69;
  }
  v135 = *v217;
  v136 = *(unsigned int *)(*v217 + 12);
  if ((_DWORD)v136)
  {
    v137 = 0;
    v234 = *(_QWORD *)(v135 + 16);
    v138 = v244;
    v219 = *v217;
    do
    {
      v139 = *(_QWORD *)(v135 + 88) + 24 * v137;
      v140 = *(unsigned int **)v139;
      v225 = *(unsigned int **)(v139 + 8);
      if (*(unsigned int **)v139 != v225)
      {
        v220 = v137;
        v241 = (*a4)[v137];
        do
        {
          v141 = (*v228)[*v140];
          v237 = v140;
          v245 = v141;
          v142 = 0;
          if (v241 < v141)
          {
            do
            {
              v143 = 0;
              v144 = v241 + v142;
              v243 = v142;
              v145 = v234 + 8 * (*((_QWORD *)v140 + 1) + 6 * v142);
              v138 = v249;
              do
              {
                v146 = v141 + v143;
                v147 = v144 + v218 * (unint64_t)v146;
                if (v76 < v70)
                {
                  v76->n128_u64[0] = v147;
                  v76->n128_u32[2] = v144;
                  v76[1].n128_u64[0] = v145;
                  v76[1].n128_u32[2] = 1;
                  v76 += 2;
                }
                else
                {
                  v148 = ((char *)v76 - (char *)v110) >> 5;
                  v149 = v148 + 1;
                  if ((unint64_t)(v148 + 1) >> 59)
                    sub_2394189F8();
                  if (v70 - v110 > v149)
                    v149 = v70 - v110;
                  if ((unint64_t)((char *)v70 - (char *)v110) >= 0x7FFFFFFFFFFFFFE0)
                    v150 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v150 = v149;
                  if (v150)
                  {
                    if (v150 >> 59)
                      sub_239418A80();
                    v151 = (char *)operator new(32 * v150);
                  }
                  else
                  {
                    v151 = 0;
                  }
                  v152 = (__n128 *)&v151[32 * v148];
                  v152->n128_u64[0] = v147;
                  v152->n128_u32[2] = v144;
                  v152[1].n128_u64[0] = v145;
                  v152[1].n128_u32[2] = 1;
                  if (v76 == v110)
                  {
                    v155 = (__n128 *)&v151[32 * v148];
                  }
                  else
                  {
                    v153 = (__n128 *)&v151[32 * v148];
                    do
                    {
                      v67 = v76[-2];
                      v154 = v76[-1];
                      v155 = v153 - 2;
                      v153[-2] = v67;
                      v153[-1] = v154;
                      v76 -= 2;
                      v153 -= 2;
                    }
                    while (v76 != v110);
                  }
                  v70 = (__n128 *)&v151[32 * v150];
                  v76 = v152 + 2;
                  if (v110)
                    operator delete(v110);
                  v110 = v155;
                  v141 = v245;
                }
                ++v138[v146];
                ++v143;
                v145 += 8;
              }
              while (v143 != 6);
              v142 = v243 + 1;
              v140 = v237;
            }
            while (v243 != 5);
          }
          else
          {
            do
            {
              v156 = 0;
              v157 = v241 + v142;
              v158 = v218 * (unint64_t)v157;
              v230 = v142;
              v159 = v234 + 8 * (*((_QWORD *)v140 + 1) + 6 * v142);
              v138 = v249;
              do
              {
                v160 = v141 + v156;
                v161 = v158 + v160;
                if (v76 < v70)
                {
                  v76->n128_u64[0] = v161;
                  v76->n128_u32[2] = v160;
                  v76[1].n128_u64[0] = v159;
                  v76[1].n128_u32[2] = 6;
                  v76 += 2;
                }
                else
                {
                  v162 = v138;
                  v163 = ((char *)v76 - (char *)v110) >> 5;
                  v164 = v163 + 1;
                  if ((unint64_t)(v163 + 1) >> 59)
                    sub_2394189F8();
                  if (v70 - v110 > v164)
                    v164 = v70 - v110;
                  if ((unint64_t)((char *)v70 - (char *)v110) >= 0x7FFFFFFFFFFFFFE0)
                    v165 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v165 = v164;
                  if (v165)
                  {
                    if (v165 >> 59)
                      sub_239418A80();
                    v166 = (char *)operator new(32 * v165);
                  }
                  else
                  {
                    v166 = 0;
                  }
                  v167 = (__n128 *)&v166[32 * v163];
                  v167->n128_u64[0] = v161;
                  v167->n128_u32[2] = v160;
                  v167[1].n128_u64[0] = v159;
                  v167[1].n128_u32[2] = 6;
                  if (v76 == v110)
                  {
                    v170 = (__n128 *)&v166[32 * v163];
                    v138 = v162;
                  }
                  else
                  {
                    v168 = (__n128 *)&v166[32 * v163];
                    v138 = v162;
                    do
                    {
                      v67 = v76[-2];
                      v169 = v76[-1];
                      v170 = v168 - 2;
                      v168[-2] = v67;
                      v168[-1] = v169;
                      v76 -= 2;
                      v168 -= 2;
                    }
                    while (v76 != v110);
                  }
                  v70 = (__n128 *)&v166[32 * v165];
                  v76 = v167 + 2;
                  if (v110)
                    operator delete(v110);
                  v110 = v170;
                  v141 = v245;
                  v158 = v218 * (unint64_t)v157;
                }
                ++v138[v157];
                ++v156;
                v159 += 8;
              }
              while (v156 != 6);
              v142 = v230 + 1;
              v140 = v237;
            }
            while (v230 != 5);
          }
          v140 += 4;
        }
        while (v140 != v225);
        v135 = v219;
        v137 = v220;
        v136 = *(unsigned int *)(v219 + 12);
      }
      ++v137;
    }
    while (v137 < v136);
  }
  else
  {
    v138 = v244;
  }
  v171 = v217[1];
  v172 = *(unsigned int *)(v171 + 12);
  if ((_DWORD)v172)
  {
    v173 = 0;
    v231 = *(_QWORD *)(v171 + 16);
    v174 = v110;
    v221 = v217[1];
    do
    {
      v175 = *(_QWORD *)(v171 + 88) + 24 * v173;
      v176 = *(unsigned int **)v175;
      v235 = *(unsigned int **)(v175 + 8);
      if (*(unsigned int **)v175 != v235)
      {
        v226 = v173;
        v177 = a4[3][v173];
        do
        {
          v178 = (*v228)[*v176];
          v238 = v176;
          v179 = v231 + 8 * *((_QWORD *)v176 + 1);
          v246 = v249;
          v248 = v178;
          v180 = 0;
          v181 = v174;
          if (v177 >= v178)
          {
            do
            {
              v191 = v178 + v180;
              v192 = v177 * (unint64_t)v218 + v191;
              if (v76 < v70)
              {
                v76->n128_u64[0] = v192;
                v76->n128_u32[2] = v191;
                v76[1].n128_u64[0] = v179;
                v76[1].n128_u32[2] = 6;
                v76 += 2;
                v174 = v181;
              }
              else
              {
                v193 = ((char *)v76 - (char *)v181) >> 5;
                v194 = v193 + 1;
                if ((unint64_t)(v193 + 1) >> 59)
                  sub_2394189F8();
                if (v70 - v181 > v194)
                  v194 = v70 - v181;
                if ((unint64_t)((char *)v70 - (char *)v181) >= 0x7FFFFFFFFFFFFFE0)
                  v195 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v195 = v194;
                if (v195)
                {
                  if (v195 >> 59)
                    sub_239418A80();
                  v196 = (char *)operator new(32 * v195);
                }
                else
                {
                  v196 = 0;
                }
                v197 = (__n128 *)&v196[32 * v193];
                v197->n128_u64[0] = v192;
                v197->n128_u32[2] = v191;
                v197[1].n128_u64[0] = v179;
                v197[1].n128_u32[2] = 6;
                if (v76 == v181)
                {
                  v174 = (__n128 *)&v196[32 * v193];
                }
                else
                {
                  v198 = (__n128 *)&v196[32 * v193];
                  do
                  {
                    v67 = v76[-2];
                    v199 = v76[-1];
                    v174 = v198 - 2;
                    v198[-2] = v67;
                    v198[-1] = v199;
                    v76 -= 2;
                    v198 -= 2;
                  }
                  while (v76 != v181);
                }
                v70 = (__n128 *)&v196[32 * v195];
                v76 = v197 + 2;
                if (v181)
                  operator delete(v181);
                v178 = v248;
              }
              ++v246[v177];
              ++v180;
              v179 += 8;
              v181 = v174;
            }
            while (v180 != 6);
          }
          else
          {
            do
            {
              v182 = v178 + v180;
              v183 = v177 + v218 * (unint64_t)v182;
              if (v76 < v70)
              {
                v76->n128_u64[0] = v183;
                v76->n128_u32[2] = v177;
                v76[1].n128_u64[0] = v179;
                v76[1].n128_u32[2] = 1;
                v76 += 2;
                v174 = v181;
              }
              else
              {
                v184 = ((char *)v76 - (char *)v181) >> 5;
                v185 = v184 + 1;
                if ((unint64_t)(v184 + 1) >> 59)
                  sub_2394189F8();
                if (v70 - v181 > v185)
                  v185 = v70 - v181;
                if ((unint64_t)((char *)v70 - (char *)v181) >= 0x7FFFFFFFFFFFFFE0)
                  v186 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v186 = v185;
                if (v186)
                {
                  if (v186 >> 59)
                    sub_239418A80();
                  v187 = (char *)operator new(32 * v186);
                }
                else
                {
                  v187 = 0;
                }
                v188 = (__n128 *)&v187[32 * v184];
                v188->n128_u64[0] = v183;
                v188->n128_u32[2] = v177;
                v188[1].n128_u64[0] = v179;
                v188[1].n128_u32[2] = 1;
                if (v76 == v181)
                {
                  v174 = (__n128 *)&v187[32 * v184];
                }
                else
                {
                  v189 = (__n128 *)&v187[32 * v184];
                  do
                  {
                    v67 = v76[-2];
                    v190 = v76[-1];
                    v174 = v189 - 2;
                    v189[-2] = v67;
                    v189[-1] = v190;
                    v76 -= 2;
                    v189 -= 2;
                  }
                  while (v76 != v181);
                }
                v70 = (__n128 *)&v187[32 * v186];
                v76 = v188 + 2;
                if (v181)
                  operator delete(v181);
                v178 = v248;
              }
              ++v246[v182];
              ++v180;
              v179 += 8;
              v181 = v174;
            }
            while (v180 != 6);
          }
          v176 = v238 + 4;
        }
        while (v238 + 4 != v235);
        v171 = v221;
        v172 = *(unsigned int *)(v221 + 12);
        v138 = v246;
        v173 = v226;
      }
      ++v173;
    }
    while (v173 < v172);
  }
  else
  {
    v174 = v110;
  }
  v200 = 126 - 2 * __clz(((char *)v76 - (char *)v174) >> 5);
  if (v76 == v174)
    v201 = 0;
  else
    v201 = v200;
  sub_239C7E5EC((uint64_t)v174, v76, v201, 1, v67);
  *(_WORD *)(a1 + 24) &= ~1u;
  sub_239C7F1C4(a1, v218, &v249);
  v247 = v138;
  if ((_DWORD)v222)
  {
    v202 = 0;
    v203 = v174;
    do
    {
      v204 = *(_QWORD *)(a1 + 8);
      v205 = *(_QWORD *)(v204 + 8 * v202++);
      v206 = *(_QWORD *)(v204 + 8 * v202);
      while (v205 != v206)
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v205) = v203->n128_u32[2];
        v207 = (_QWORD *)v203[1].n128_u64[0];
        v208 = *(unsigned __int8 *)(a1 + 28);
        v209 = (v208 * v208);
        v210 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v205 * v209);
        if (v207 == v210)
        {
          memptr = 0;
          malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * (_DWORD)v209 + 31) & 0xFFFE0, 0x100BBD03uLL);
          v211 = (char *)memptr;
          if (!memptr)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v216 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v216, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)memptr = *v207;
          if ((_DWORD)v208)
          {
            v212 = 0;
            v213 = 8 * v208;
            do
            {
              memmove((char *)v207 + v212, &v211[v212], v213);
              v212 += v213;
              --v208;
            }
            while (v208);
          }
          free(v211);
        }
        else
        {
          *v210 = *v207;
        }
        v203 += 2;
        ++v205;
      }
    }
    while (v202 != v222);
  }
  v214 = v247;
  if (v174)
  {
    operator delete(v174);
    v214 = v249;
  }
  if (v214)
  {
    v250 = v214;
    operator delete(v214);
  }
}

void sub_239C7D7CC(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v4;

  if (v1)
    operator delete(v1);
  v4 = *(void **)(v2 - 120);
  if (v4)
  {
    *(_QWORD *)(v2 - 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_239C7D830(unsigned int *a1, double a2)
{
  unsigned int *v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unsigned int *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  int64x2_t v75;
  int64x2_t *v76;
  uint64_t v77;
  int v78;
  uint64_t i;
  char *v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  std::bad_alloc *exception;
  std::bad_alloc *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  size_t size;
  unsigned int *v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  void *memptr;
  int v105;
  uint64_t v106;
  _QWORD v107[3];

  v3 = a1;
  v107[1] = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  if (*a1 >= v4)
    v5 = v4;
  else
    v5 = *a1;
  if ((_DWORD)v5)
  {
    v102 = 0;
    v6 = (uint64_t *)*((_QWORD *)a1 + 1);
    v7 = *v6;
    while (1)
    {
      v8 = v102 + 1;
      v9 = v6[v102 + 1];
      if (v7 == v9)
        break;
      v10 = 8 * v7;
      while (1)
      {
        v11 = *(unsigned int *)(*((_QWORD *)a1 + 2) + 4 * v7);
        if (v102 <= v11)
          break;
        ++v7;
        v10 += 8;
        if (v9 == v7)
          goto LABEL_18;
      }
      if (v102 != v11)
        break;
      v12 = *((unsigned __int8 *)a1 + 28);
      if (*((_BYTE *)a1 + 28))
      {
        v13 = (double *)(*((_QWORD *)a1 + 4) + (v12 * v12) * v10);
        v14 = 8 * v12 + 8;
        do
        {
          *v13 = *v13 + a2;
          v13 = (double *)((char *)v13 + v14);
          --v12;
        }
        while (v12);
      }
      v7 = v9;
      ++v102;
      if (v8 == v5)
        return;
    }
  }
  else
  {
    LODWORD(v102) = 0;
  }
LABEL_18:
  if ((_DWORD)v102 != (_DWORD)v5)
  {
    if (v4 == (_DWORD)v102)
    {
      v15 = 0;
    }
    else
    {
      v15 = operator new(4 * (v4 - v102));
      bzero(v15, 4 * (v4 - v102));
    }
    ++*v15;
    v16 = (v102 + 1);
    if (v16 >= v4)
    {
      v18 = 1;
      v4 = v102 + 1;
    }
    else
    {
      v17 = *((_QWORD *)v3 + 1);
      v18 = 1;
      v19 = v102;
      do
      {
        v20 = *(_QWORD *)(v17 + 8 * v16);
        v21 = *(_QWORD *)(v17 + 8 * (v19 + 2));
        if (v20 != v21)
        {
          while (v16 > *(unsigned int *)(*((_QWORD *)v3 + 2) + 4 * v20))
          {
            if (v21 == ++v20)
              goto LABEL_34;
          }
        }
        if (v20 == v21 || v16 != *(_DWORD *)(*((_QWORD *)v3 + 2) + 4 * v20))
        {
LABEL_34:
          if (v16 < v5)
          {
            ++v15[(v16 - v102)];
            v18 = (v18 + 1);
          }
        }
        else
        {
          v22 = *((unsigned __int8 *)v3 + 28);
          if (*((_BYTE *)v3 + 28))
          {
            v23 = (double *)(*((_QWORD *)v3 + 4) + 8 * v20 * (v22 * v22));
            v24 = 8 * v22 + 8;
            do
            {
              *v23 = *v23 + a2;
              v23 = (double *)((char *)v23 + v24);
              --v22;
            }
            while (v22);
          }
        }
        v19 = v16++;
      }
      while (v4 != (_DWORD)v16);
    }
    v103 = *((unsigned __int8 *)v3 + 28);
    v25 = v18;
    v26 = v18;
    v93 = (v103 * v103);
    *((_QWORD *)v3 + 4) = malloc_type_realloc(*((void **)v3 + 4), 8 * v93 * (*((_QWORD *)v3 + 5) + v18), 0x100004000313F17uLL);
    v27 = (char *)malloc_type_realloc(*((void **)v3 + 2), 4 * (*((_QWORD *)v3 + 5) + v26), 0x100004052888210uLL);
    *((_QWORD *)v3 + 2) = v27;
    v28 = *((_QWORD *)v3 + 4);
    v29 = *((_QWORD *)v3 + 5);
    v30 = v29 + v26;
    *((_QWORD *)v3 + 5) = v29 + v26;
    if (v4 > v102)
    {
      v31 = v25;
      v32 = &v27[4 * v29];
      v33 = &v27[4 * v30];
      v34 = v28 + 8 * v29 * v93;
      v35 = (char *)(v28 + 8 * v30 * v93);
      v36 = 8 * v103;
      size = ((_WORD)v36 + 31) & 0xFE0;
      v89 = (v103 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v88 = (v89 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v37 = v4;
      v38 = v103 * (unint64_t)v103;
      v39 = -8 * v38;
      v91 = v3;
      v92 = v15;
      v101 = -8 * v38;
      v87 = -16 * v38;
      do
      {
        v42 = 8 * v37;
        v43 = v37 - 1;
        v44 = *((_QWORD *)v3 + 1);
        v45 = *(_QWORD *)(v44 + 8 * v37);
        v46 = *(_QWORD *)(v44 + 8 * (v37 - 1));
        v47 = v45 - v46;
        *(_QWORD *)(v44 + v42) = v45 + v31;
        v98 = v43;
        if (!v15[(v43 - v102)])
        {
          v33 -= 4 * v47;
          v41 = -(uint64_t)(v45 - v46);
          if ((_DWORD)v45 != (_DWORD)v46)
          {
            v59 = v34;
            v60 = v31;
            memmove(v33, &v32[-4 * (v45 - v46)], 4 * (v45 - v46));
            v31 = v60;
            v34 = v59;
            v3 = v91;
            v15 = v92;
          }
          v61 = v93 * v47;
          v40 = -v61;
          v62 = &v35[-8 * v61];
          if ((_DWORD)v61)
          {
            v63 = v3;
            v64 = v34;
            v65 = &v35[-8 * v61];
            v66 = v41;
            v67 = -v61;
            v68 = v31;
            memmove(v65, (const void *)(v34 - 8 * v61), 8 * v61);
            v31 = v68;
            v40 = v67;
            v41 = v66;
            v34 = v64;
            v3 = v63;
            v15 = v92;
          }
          goto LABEL_42;
        }
        v99 = v31;
        v48 = v93 * v47;
        v95 = v34;
        v49 = v34 - 8 * v93 * v47;
        v97 = (v45 - v46);
        v50 = &v32[-4 * v47];
        v51 = 8 * (v103 * v103);
        v96 = v32;
        v94 = v93 * v47;
        if (v47)
        {
          v52 = v103;
          if ((_DWORD)v103)
          {
            v53 = v46 - v45;
            v54 = v93 * (~(_DWORD)v46 + v45);
            v55 = v45 - v46;
            while (1)
            {
              v56 = *(_DWORD *)&v50[4 * v55 - 4];
              if (v56 < v43)
                break;
              *((_DWORD *)v33 - 1) = v56;
              v33 -= 4;
              v35 += v101;
              v57 = v49;
              memmove(v35, (const void *)(v49 + 8 * v54), v51);
              v49 = v57;
              v51 = 8 * (v103 * v103);
              v52 = v103;
              v54 -= v93;
              --v55;
              if (__CFADD__(v53++, 1))
              {
                v55 = 0;
                goto LABEL_62;
              }
            }
            v57 = v49;
          }
          else
          {
            v55 = v45 - v46;
            while (1)
            {
              v69 = v55 - 1;
              v70 = *(_DWORD *)&v50[4 * v69];
              if (v70 < v43)
                break;
              *((_DWORD *)v33 - 1) = v70;
              v33 -= 4;
              v35 += v39;
              --v55;
              if (!v69)
              {
                v57 = v34 - 8 * v48;
                v55 = 0;
                goto LABEL_62;
              }
            }
            v57 = v34 - 8 * v48;
          }
        }
        else
        {
          v57 = v34 - 8 * v48;
          v55 = 0;
          v52 = v103;
        }
LABEL_62:
        *((_DWORD *)v33 - 1) = v43;
        v33 -= 4;
        v62 = &v35[-8 * v93];
        v105 = v52;
        v106 = *(_QWORD *)&a2;
        if (v52)
        {
          v71 = &v35[-8 * v93];
          v72 = v103;
          do
          {
            bzero(v71, v36);
            v71 += v36;
            --v72;
          }
          while (v72);
        }
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, size, 0x100BBD03uLL);
        v73 = memptr;
        if (!memptr)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v86 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v86, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        v32 = v96;
        v3 = v91;
        if (!(_DWORD)v103)
        {
          free(memptr);
          v31 = (v99 - 1);
          if (v55)
          {
            v34 = v95;
            v39 = v101;
            v40 = -v94;
            v83 = v55 - 1;
            do
            {
              *((_DWORD *)v33 - 1) = *(_DWORD *)&v50[4 * v83];
              v33 -= 4;
              v62 += v101;
            }
            while ((unint64_t)v83--);
            v15 = v92;
            v41 = -v97;
            goto LABEL_42;
          }
          v15 = v92;
          goto LABEL_40;
        }
        v74 = memptr;
        if (v89 > 0xE)
        {
          if (memptr >= v107 || (v74 = memptr, &v106 >= (uint64_t *)((char *)memptr + v36)))
          {
            v75 = vdupq_lane_s64(v106, 0);
            v76 = (int64x2_t *)((char *)memptr + 16);
            v77 = (v89 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v76[-1] = v75;
              *v76 = v75;
              v76 += 2;
              v77 -= 4;
            }
            while (v77);
            if (v89 + 1 == v88)
              goto LABEL_75;
            v74 = &v73[v88];
          }
        }
        do
          *v74++ = v106;
        while (v74 != &v73[v103]);
LABEL_75:
        v78 = 0;
        for (i = 0; i != v103; ++i)
        {
          *(_QWORD *)&v62[8 * v78] = v73[i];
          v78 += v103 + 1;
        }
        free(v73);
        v100 = v99 - 1;
        if (v55)
        {
          v80 = &v96[4 * v55 - 4 + -4 * v97];
          v81 = v93 * (v55 - 1);
          do
          {
            v82 = *(_DWORD *)v80;
            v80 -= 4;
            *((_DWORD *)v33 - 1) = v82;
            v33 -= 4;
            memmove(&v35[v87], (const void *)(v57 + 8 * v81), 8 * v93);
            v81 -= v93;
            v35 += v101;
            --v55;
          }
          while (v55);
          v62 = &v35[v101];
          v3 = v91;
          v15 = v92;
          v31 = v100;
          v34 = v95;
          v32 = v96;
          v39 = v101;
          v36 = 8 * v103;
          goto LABEL_41;
        }
        v15 = v92;
        v31 = v100;
LABEL_40:
        v34 = v95;
        v39 = v101;
LABEL_41:
        v40 = -v94;
        v41 = -v97;
LABEL_42:
        v32 += 4 * v41;
        v35 = v62;
        v34 += 8 * v40;
        v37 = v98;
      }
      while (v98 > v102);
    }
    operator delete(v15);
  }
}

void sub_239C7DFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p)
{
  void *v22;

  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t *sub_239C7DFC4(unsigned int *a1, uint64_t *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  double *v64;
  uint64_t v65;
  char *v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  uint64_t v82;
  int v84;
  _DWORD *__p;
  uint64_t v86;
  unsigned int v87;
  char *v88;
  size_t v89;
  uint64_t v90;

  v2 = a1;
  v3 = a1[1];
  if (*a1 >= v3)
    v4 = v3;
  else
    v4 = *a1;
  v5 = *((unsigned __int8 *)a1 + 28);
  if (!(_DWORD)v4)
  {
    LODWORD(v7) = 0;
    goto LABEL_18;
  }
  v6 = (uint64_t *)*((_QWORD *)a1 + 1);
  if (*((_BYTE *)a1 + 28))
  {
    v7 = 0;
    v8 = *v6;
    v9 = 8 * (v5 * v5);
    while (1)
    {
      v10 = v7 + 1;
      v11 = v6[v7 + 1];
      if (v8 == v11)
        break;
      v12 = v9 * v8;
      while (1)
      {
        v13 = *(unsigned int *)(*((_QWORD *)a1 + 2) + 4 * v8);
        if (v7 <= v13)
          break;
        ++v8;
        v12 += v9;
        if (v11 == v8)
          goto LABEL_18;
      }
      if (v7 != v13)
        break;
      v14 = v7 * v5;
      v15 = *a2;
      v16 = (double *)(*((_QWORD *)a1 + 4) + v12);
      v17 = v5;
      do
      {
        *v16 = *(double *)(v15 + 8 * v14++) + *v16;
        v16 += v5 + 1;
        --v17;
      }
      while (v17);
      v8 = v11;
      ++v7;
      if (v10 == v4)
        return a2;
    }
LABEL_18:
    if ((_DWORD)v7 == (_DWORD)v4)
      return a2;
    goto LABEL_19;
  }
  v72 = 0;
  v73 = *v6;
  while (1)
  {
    v74 = v72 + 1;
    v75 = v6[v72 + 1];
    if (v73 == v75)
      break;
    while (1)
    {
      v76 = *(unsigned int *)(*((_QWORD *)a1 + 2) + 4 * v73);
      if (v72 <= v76)
        break;
      if (v75 == ++v73)
        goto LABEL_82;
    }
    if (v72 != v76)
      break;
    v73 = v6[++v72];
    if (v74 == v4)
      return a2;
  }
LABEL_82:
  LODWORD(v7) = v72;
  if ((_DWORD)v72 != (_DWORD)v4)
  {
LABEL_19:
    v79 = v5;
    if (v3 == (_DWORD)v7)
    {
      v18 = 0;
    }
    else
    {
      v18 = operator new(4 * (v3 - v7));
      bzero(v18, 4 * (v3 - v7));
    }
    ++*v18;
    v19 = (v7 + 1);
    __p = v18;
    if (v19 >= v3)
    {
      v21 = (v5 * v5);
      v22 = 1;
      v3 = v7 + 1;
    }
    else
    {
      v20 = *((_QWORD *)v2 + 1);
      v21 = (v5 * v5);
      v22 = 1;
      v23 = v7;
      do
      {
        v24 = *(_QWORD *)(v20 + 8 * v19);
        v25 = *(_QWORD *)(v20 + 8 * (v23 + 2));
        if (v24 != v25)
        {
          while (v19 > *(unsigned int *)(*((_QWORD *)v2 + 2) + 4 * v24))
          {
            if (v25 == ++v24)
              goto LABEL_34;
          }
        }
        if (v24 == v25 || v19 != *(_DWORD *)(*((_QWORD *)v2 + 2) + 4 * v24))
        {
LABEL_34:
          if (v19 < v4)
          {
            ++v18[(v19 - v7)];
            ++v22;
          }
        }
        else if ((_DWORD)v5)
        {
          v26 = (double *)(*((_QWORD *)v2 + 4) + 8 * v24 * v21);
          v27 = v19 * v5;
          v28 = *a2;
          v29 = v5;
          do
          {
            *v26 = *(double *)(v28 + 8 * v27++) + *v26;
            v26 += v5 + 1;
            --v29;
          }
          while (v29);
        }
        v23 = v19++;
      }
      while (v3 != (_DWORD)v19);
    }
    v87 = v22;
    v30 = v22;
    v89 = 8 * v21;
    v90 = v21;
    *((_QWORD *)v2 + 4) = malloc_type_realloc(*((void **)v2 + 4), 8 * v21 * (*((_QWORD *)v2 + 5) + v22), 0x100004000313F17uLL);
    v31 = (char *)malloc_type_realloc(*((void **)v2 + 2), 4 * (*((_QWORD *)v2 + 5) + v30), 0x100004052888210uLL);
    *((_QWORD *)v2 + 2) = v31;
    v32 = *((_QWORD *)v2 + 4);
    v33 = *((_QWORD *)v2 + 5);
    v34 = v33 + v30;
    *((_QWORD *)v2 + 5) = v33 + v30;
    v35 = v90;
    if (v3 > v7)
    {
      v36 = &v31[4 * v33];
      v37 = &v31[4 * v34];
      v38 = v32 + 8 * v33 * v90;
      v39 = (char *)(v32 + 8 * v34 * v90);
      v80 = v2;
      v40 = v3;
      v77 = 8 * v5 + 8;
      v78 = 8 * v5 * (unint64_t)v5;
      v84 = v7;
      do
      {
        v43 = 8 * v40--;
        v44 = *((_QWORD *)v2 + 1);
        v45 = *(_QWORD *)(v44 + v43);
        v46 = *(_QWORD *)(v44 + 8 * v40);
        v47 = v45 - v46;
        *(_QWORD *)(v44 + v43) = v45 + v87;
        v88 = v36;
        v86 = v38;
        if (__p[(v40 - v7)])
        {
          v48 = v35 * v47;
          v49 = v38 - 8 * v48;
          v50 = (v45 - v46);
          v51 = &v36[-4 * v47];
          if (v47)
          {
            if ((_DWORD)v5)
            {
              v82 = v35 * v47;
              v52 = v46 - v45;
              v53 = v35 * (~(_DWORD)v46 + v45);
              while (1)
              {
                v54 = *(_DWORD *)&v51[4 * v47 - 4];
                if (v54 < v40)
                  break;
                *((_DWORD *)v37 - 1) = v54;
                v37 -= 4;
                v39 -= 8 * v90;
                memmove(v39, (const void *)(v49 + 8 * v53), v89);
                v35 = v90;
                v53 -= v90;
                --v47;
                if (__CFADD__(v52++, 1))
                {
                  v47 = 0;
                  break;
                }
              }
              v5 = v79;
              v36 = v88;
              v48 = v82;
            }
            else
            {
              while (1)
              {
                v60 = v47 - 1;
                v61 = *(_DWORD *)&v51[4 * v60];
                if (v61 < v40)
                  break;
                *((_DWORD *)v37 - 1) = v61;
                v37 -= 4;
                v39 -= 8 * v90;
                --v47;
                if (!v60)
                {
                  v47 = 0;
                  break;
                }
              }
            }
          }
          v42 = -v48;
          v41 = -v50;
          *((_DWORD *)v37 - 1) = v40;
          v37 -= 4;
          v57 = &v39[-8 * v90];
          if ((_DWORD)v5)
          {
            v81 = v42;
            bzero(&v39[-8 * v90], v78);
            v62 = v40 * v5;
            v63 = *a2;
            v64 = (double *)&v39[-8 * v90];
            v65 = v5;
            do
            {
              *v64 = *(double *)(v63 + 8 * v62++) + *v64;
              v64 = (double *)((char *)v64 + v77);
              --v65;
            }
            while (v65);
            --v87;
            LODWORD(v7) = v84;
            v35 = v90;
            v36 = v88;
            if (v47)
            {
              v66 = &v88[4 * v47 - 4 + -4 * v50];
              v67 = v90 * (v47 - 1);
              do
              {
                v68 = *(_DWORD *)v66;
                v66 -= 4;
                *((_DWORD *)v37 - 1) = v68;
                v37 -= 4;
                memmove(&v39[-16 * v90], (const void *)(v49 + 8 * v67), v89);
                v35 = v90;
                v67 -= v90;
                v39 -= 8 * v90;
                --v47;
              }
              while (v47);
              v57 = &v39[-8 * v90];
              v5 = v79;
              v2 = v80;
              LODWORD(v7) = v84;
              v36 = v88;
            }
            else
            {
              v2 = v80;
            }
            v42 = v81;
            v41 = -v50;
          }
          else
          {
            --v87;
            if (v47)
            {
              v69 = v47 - 1;
              v2 = v80;
              do
              {
                *((_DWORD *)v37 - 1) = *(_DWORD *)&v51[4 * v69];
                v37 -= 4;
                v57 -= 8 * v90;
              }
              while ((unint64_t)v69--);
              LODWORD(v7) = v84;
            }
            else
            {
              v2 = v80;
              LODWORD(v7) = v84;
            }
          }
        }
        else
        {
          v37 -= 4 * v47;
          v41 = -(uint64_t)(v45 - v46);
          if ((_DWORD)v45 != (_DWORD)v46)
          {
            memmove(v37, &v36[-4 * (v45 - v46)], 4 * (v45 - v46));
            v41 = -(uint64_t)v47;
            v35 = v90;
          }
          v56 = v35 * v47;
          v42 = -v56;
          v57 = &v39[-8 * v56];
          if ((_DWORD)v56)
          {
            v58 = v41;
            v59 = -v56;
            memmove(v57, (const void *)(v86 - 8 * v56), 8 * v56);
            v42 = v59;
            v41 = v58;
            v35 = v90;
          }
          v36 = v88;
        }
        v36 += 4 * v41;
        v39 = v57;
        v38 = v86 + 8 * v42;
      }
      while (v40 > v7);
    }
    operator delete(__p);
  }
  return a2;
}

void sub_239C7E5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_239C7E5EC(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __n128 *v28;
  unint64_t v29;
  __n128 *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __int128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 *v45;
  unint64_t v46;
  __n128 *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  unint64_t v60;
  unint64_t v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  unint64_t v74;
  __n128 *v75;
  __n128 v76;
  __n128 v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  BOOL v81;
  __n128 v82;
  unint64_t v83;
  unint64_t v84;
  __n128 *v85;
  unint64_t v86;
  __n128 v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  __n128 *v91;
  unint64_t v92;
  unint64_t v93;
  __n128 v94;
  __n128 v95;
  unint64_t v96;
  __n128 *v97;
  unint64_t v98;
  __int128 v99;
  __n128 *v100;
  BOOL v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  __n128 *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  int64_t v111;
  int64_t v112;
  BOOL v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  BOOL v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _OWORD *v122;
  __int128 v123;
  uint64_t v124;
  __n128 v125;
  __n128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  unint64_t v130;
  __n128 v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  unint64_t v142;
  _OWORD *v143;
  unint64_t v144;
  _OWORD *v145;
  __int128 v146;
  __int128 v147;
  __n128 v148;
  __int128 v149;
  __n128 v150;
  __int128 v151;
  __n128 v152;
  __n128 v153;
  __int128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __int128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __int128 v187;
  __n128 v188;
  __int128 v189;
  __int128 v190;
  __n128 v191;
  __n128 v192;
  __int128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __int128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  __n128 v211;
  __int128 v212;
  unint64_t v213;
  __n128 v214;
  __int128 v215;
  __int128 v216;
  __n128 v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;

_QWORD *sub_239C7F1C4(uint64_t a1, int a2, unsigned int **a3)
{
  void *v6;
  void *v7;
  void *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  _QWORD *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;

  if (*(__int16 *)(a1 + 24) < 0)
  {
    free(*(void **)(a1 + 8));
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    v6 = *(void **)(a1 + 8);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v7 = *(void **)(a1 + 16);
    if (v7)
    {
      free(v7);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v8 = *(void **)(a1 + 32);
    if (v8)
    {
      free(v8);
      *(_QWORD *)(a1 + 32) = 0;
    }
    *(_QWORD *)(a1 + 40) = 0;
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = (char *)v9 - (char *)*a3;
  v12 = v11 >> 2;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = v11 >> 2;
  result = malloc_type_malloc(2 * v11 + 8, 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 8) = result;
  *result = 0;
  if (v9 == v10)
  {
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    v14 = result;
    result = 0;
    v15 = *a3;
    v16 = 2;
    if ((unint64_t)(v12 + 1) > 2)
      v16 = v12 + 1;
    v17 = v16 - 1;
    v18 = v14 + 1;
    do
    {
      v19 = *v15++;
      result = (_QWORD *)((char *)result + v19);
      *v18++ = result;
      --v17;
    }
    while (v17);
    *(_QWORD *)(a1 + 40) = result;
    if (result)
    {
      *(_QWORD *)(a1 + 16) = malloc_type_calloc((size_t)result, 4uLL, 0x100004052888210uLL);
      result = malloc_type_malloc(8 * *(_QWORD *)(a1 + 40) * *(unsigned __int8 *)(a1 + 28) * *(unsigned __int8 *)(a1 + 28), 0x9004C1C4uLL);
      *(_QWORD *)(a1 + 32) = result;
    }
  }
  return result;
}

__n128 sub_239C7F310(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;

  v6 = a2->n128_u64[0];
  v7 = a3->n128_u64[0];
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      v10 = *a2;
      result = a2[1];
      v11 = a3[1];
      *a2 = *a3;
      a2[1] = v11;
      *a3 = v10;
      a3[1] = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        v12 = *a1;
        result = a1[1];
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        *a2 = v12;
        a2[1] = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      v8 = *a1;
      result = a1[1];
      v9 = a3[1];
      *a1 = *a3;
      a1[1] = v9;
LABEL_9:
      *a3 = v8;
      a3[1] = result;
      goto LABEL_10;
    }
    v14 = *a1;
    result = a1[1];
    v15 = a2[1];
    *a1 = *a2;
    a1[1] = v15;
    *a2 = v14;
    a2[1] = result;
    if (a3->n128_u64[0] < a2->n128_u64[0])
    {
      v8 = *a2;
      result = a2[1];
      v16 = a3[1];
      *a2 = *a3;
      a2[1] = v16;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4->n128_u64[0] < a3->n128_u64[0])
  {
    v17 = *a3;
    result = a3[1];
    v18 = a4[1];
    *a3 = *a4;
    a3[1] = v18;
    *a4 = v17;
    a4[1] = result;
    if (a3->n128_u64[0] < a2->n128_u64[0])
    {
      v19 = *a2;
      result = a2[1];
      v20 = a3[1];
      *a2 = *a3;
      a2[1] = v20;
      *a3 = v19;
      a3[1] = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        v21 = *a1;
        result = a1[1];
        v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        *a2 = v21;
        a2[1] = result;
      }
    }
  }
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    v23 = *a4;
    result = a4[1];
    v24 = a5[1];
    *a4 = *a5;
    a4[1] = v24;
    *a5 = v23;
    a5[1] = result;
    if (a4->n128_u64[0] < a3->n128_u64[0])
    {
      v25 = *a3;
      result = a3[1];
      v26 = a4[1];
      *a3 = *a4;
      a3[1] = v26;
      *a4 = v25;
      a4[1] = result;
      if (a3->n128_u64[0] < a2->n128_u64[0])
      {
        v27 = *a2;
        result = a2[1];
        v28 = a3[1];
        *a2 = *a3;
        a2[1] = v28;
        *a3 = v27;
        a3[1] = result;
        if (a2->n128_u64[0] < a1->n128_u64[0])
        {
          v29 = *a1;
          result = a1[1];
          v30 = a2[1];
          *a1 = *a2;
          a1[1] = v30;
          *a2 = v29;
          a2[1] = result;
        }
      }
    }
  }
  return result;
}

BOOL sub_239C7F49C(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  __n128 *v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __n128 v57;
  __int128 v58;
  __n128 v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __n128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __int128 v74;
  uint64_t v75;

  v3 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v5 = *(_QWORD *)(a2 - 32);
      v4 = (__n128 *)(a2 - 32);
      if (v5 < *(_QWORD *)a1)
        goto LABEL_9;
      return 1;
    case 3:
      v14 = (__n128 *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a2 - 32);
      v4 = (__n128 *)(a2 - 32);
      v16 = v17;
      if (v15 >= *(_QWORD *)a1)
      {
        if (v16 < v15)
        {
          v36 = *v14;
          v35 = *(__n128 *)(a1 + 48);
          v37 = v4[1];
          *v14 = *v4;
          *(__n128 *)(a1 + 48) = v37;
          *v4 = v36;
          v4[1] = v35;
LABEL_44:
          if (*(_QWORD *)(a1 + 32) < *(_QWORD *)a1)
          {
            v71 = *(__n128 *)a1;
            v70 = *(__n128 *)(a1 + 16);
            v72 = v14[1];
            *(__n128 *)a1 = *v14;
            *(__n128 *)(a1 + 16) = v72;
            *v14 = v71;
            v14[1] = v70;
          }
        }
      }
      else
      {
        if (v16 < v15)
        {
LABEL_9:
          v19 = *(__n128 *)a1;
          v18 = *(__n128 *)(a1 + 16);
          v20 = v4[1];
          *(__n128 *)a1 = *v4;
          *(__n128 *)(a1 + 16) = v20;
LABEL_10:
          *v4 = v19;
          v4[1] = v18;
          return 1;
        }
        v57 = *(__n128 *)a1;
        v56 = *(_OWORD *)(a1 + 16);
        v58 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v58;
        *v14 = v57;
        *(_OWORD *)(a1 + 48) = v56;
        if (v4->n128_u64[0] < *(_QWORD *)(a1 + 32))
        {
          v19 = *v14;
          v18 = *(__n128 *)(a1 + 48);
          v59 = v4[1];
          *v14 = *v4;
          *(__n128 *)(a1 + 48) = v59;
          goto LABEL_10;
        }
      }
      return 1;
    case 4:
      v14 = (__n128 *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 32);
      v22 = (__n128 *)(a1 + 64);
      v23 = *(_QWORD *)(a1 + 64);
      v24 = (__n128 *)(a2 - 32);
      v25 = *(_QWORD *)a1;
      if (v21 >= *(_QWORD *)a1)
      {
        if (v23 < v21)
        {
          v39 = *v14;
          v38 = *(_OWORD *)(a1 + 48);
          v40 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v40;
          *v22 = v39;
          *(_OWORD *)(a1 + 80) = v38;
          if (v14->n128_u64[0] < v25)
          {
            v42 = *(__n128 *)a1;
            v41 = *(_OWORD *)(a1 + 16);
            v43 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v43;
            *v14 = v42;
            *(_OWORD *)(a1 + 48) = v41;
          }
        }
      }
      else
      {
        if (v23 >= v21)
        {
          v61 = *(__n128 *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v62 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v62;
          *v14 = v61;
          *(_OWORD *)(a1 + 48) = v60;
          if (v23 >= *(_QWORD *)(a1 + 32))
            goto LABEL_41;
          v27 = *v14;
          v26 = *(_OWORD *)(a1 + 48);
          v63 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v63;
        }
        else
        {
          v27 = *(__n128 *)a1;
          v26 = *(_OWORD *)(a1 + 16);
          v28 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v22;
          *(_OWORD *)(a1 + 16) = v28;
        }
        *v22 = v27;
        *(_OWORD *)(a1 + 80) = v26;
      }
LABEL_41:
      if (v24->n128_u64[0] >= v22->n128_u64[0])
        return 1;
      v65 = *v22;
      v64 = *(_OWORD *)(a1 + 80);
      v66 = *(_OWORD *)(a2 - 16);
      *v22 = *v24;
      *(_OWORD *)(a1 + 80) = v66;
      *v24 = v65;
      *(_OWORD *)(a2 - 16) = v64;
      if (v22->n128_u64[0] >= v14->n128_u64[0])
        return 1;
      v68 = *v14;
      v67 = *(_OWORD *)(a1 + 48);
      v69 = *(_OWORD *)(a1 + 80);
      *v14 = *v22;
      *(_OWORD *)(a1 + 48) = v69;
      *v22 = v68;
      *(_OWORD *)(a1 + 80) = v67;
      goto LABEL_44;
    case 5:
      sub_239C7F310((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), (__n128 *)(a2 - 32), a3);
      return 1;
    default:
      v6 = (__n128 *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = (__n128 *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)a1;
      if (v9 >= *(_QWORD *)a1)
      {
        if (v7 < v9)
        {
          v30 = *v8;
          v29 = *(_OWORD *)(a1 + 48);
          v31 = *(_OWORD *)(a1 + 80);
          *v8 = *v6;
          *(_OWORD *)(a1 + 48) = v31;
          *v6 = v30;
          *(_OWORD *)(a1 + 80) = v29;
          if (v8->n128_u64[0] < v10)
          {
            v33 = *(__n128 *)a1;
            v32 = *(_OWORD *)(a1 + 16);
            v34 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v8;
            *(_OWORD *)(a1 + 16) = v34;
            *v8 = v33;
            *(_OWORD *)(a1 + 48) = v32;
          }
        }
      }
      else
      {
        if (v7 >= v9)
        {
          v45 = *(__n128 *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v46 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v8;
          *(_OWORD *)(a1 + 16) = v46;
          *v8 = v45;
          *(_OWORD *)(a1 + 48) = v44;
          if (v7 >= *(_QWORD *)(a1 + 32))
            goto LABEL_26;
          v12 = *v8;
          v11 = *(_OWORD *)(a1 + 48);
          v47 = *(_OWORD *)(a1 + 80);
          *v8 = *v6;
          *(_OWORD *)(a1 + 48) = v47;
        }
        else
        {
          v12 = *(__n128 *)a1;
          v11 = *(_OWORD *)(a1 + 16);
          v13 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v6;
          *(_OWORD *)(a1 + 16) = v13;
        }
        *v6 = v12;
        *(_OWORD *)(a1 + 80) = v11;
      }
LABEL_26:
      v48 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      while (1)
      {
        v52 = *(_QWORD *)v48;
        if (*(_QWORD *)v48 < v6->n128_u64[0])
        {
          v74 = *(_OWORD *)(v48 + 8);
          v75 = *(_QWORD *)(v48 + 24);
          v53 = v49;
          do
          {
            v54 = a1 + v53;
            v55 = *(_OWORD *)(a1 + v53 + 80);
            *(_OWORD *)(v54 + 96) = *(_OWORD *)(a1 + v53 + 64);
            *(_OWORD *)(v54 + 112) = v55;
            if (v53 == -64)
            {
              v51 = a1;
              goto LABEL_29;
            }
            v53 -= 32;
          }
          while (v52 < *(_QWORD *)(v54 + 32));
          v51 = a1 + v53 + 96;
LABEL_29:
          *(_QWORD *)v51 = v52;
          *(_OWORD *)(v51 + 8) = v74;
          *(_QWORD *)(v51 + 24) = v75;
          if (++v50 == 8)
            return v48 + 32 == a2;
        }
        v6 = (__n128 *)v48;
        v49 += 32;
        v48 += 32;
        if (v48 == a2)
          return 1;
      }
  }
}

__n128 sub_239C7F7EC(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __n128 *v28;
  unint64_t v29;
  __n128 *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __int128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 *v45;
  unint64_t v46;
  __n128 *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  unint64_t v60;
  unint64_t v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  unint64_t v74;
  __n128 *v75;
  __n128 v76;
  __n128 v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  BOOL v81;
  __n128 v82;
  unint64_t v83;
  unint64_t v84;
  __n128 *v85;
  unint64_t v86;
  __n128 v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  __n128 *v91;
  unint64_t v92;
  unint64_t v93;
  __n128 v94;
  __n128 v95;
  unint64_t v96;
  __n128 *v97;
  unint64_t v98;
  __int128 v99;
  __n128 *v100;
  BOOL v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  __n128 *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  int64_t v111;
  int64_t v112;
  BOOL v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  BOOL v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _OWORD *v122;
  __int128 v123;
  uint64_t v124;
  __n128 v125;
  __n128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  unint64_t v130;
  __n128 v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  unint64_t v142;
  _OWORD *v143;
  unint64_t v144;
  _OWORD *v145;
  __int128 v146;
  __int128 v147;
  __n128 v148;
  __int128 v149;
  __n128 v150;
  __int128 v151;
  __n128 v152;
  __n128 v153;
  __int128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __int128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __int128 v187;
  __n128 v188;
  __int128 v189;
  __int128 v190;
  __n128 v191;
  __n128 v192;
  __int128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __int128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  __n128 v211;
  __int128 v212;
  unint64_t v213;
  __n128 v214;
  __int128 v215;
  __int128 v216;
  __n128 v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;

BOOL sub_239C803C4(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  __n128 *v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __n128 v57;
  __int128 v58;
  __n128 v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __n128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __int128 v74;
  uint64_t v75;

  v3 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v5 = *(_QWORD *)(a2 - 32);
      v4 = (__n128 *)(a2 - 32);
      if (v5 < *(_QWORD *)a1)
        goto LABEL_9;
      return 1;
    case 3:
      v14 = (__n128 *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a2 - 32);
      v4 = (__n128 *)(a2 - 32);
      v16 = v17;
      if (v15 >= *(_QWORD *)a1)
      {
        if (v16 < v15)
        {
          v36 = *v14;
          v35 = *(__n128 *)(a1 + 48);
          v37 = v4[1];
          *v14 = *v4;
          *(__n128 *)(a1 + 48) = v37;
          *v4 = v36;
          v4[1] = v35;
LABEL_44:
          if (*(_QWORD *)(a1 + 32) < *(_QWORD *)a1)
          {
            v71 = *(__n128 *)a1;
            v70 = *(__n128 *)(a1 + 16);
            v72 = v14[1];
            *(__n128 *)a1 = *v14;
            *(__n128 *)(a1 + 16) = v72;
            *v14 = v71;
            v14[1] = v70;
          }
        }
      }
      else
      {
        if (v16 < v15)
        {
LABEL_9:
          v19 = *(__n128 *)a1;
          v18 = *(__n128 *)(a1 + 16);
          v20 = v4[1];
          *(__n128 *)a1 = *v4;
          *(__n128 *)(a1 + 16) = v20;
LABEL_10:
          *v4 = v19;
          v4[1] = v18;
          return 1;
        }
        v57 = *(__n128 *)a1;
        v56 = *(_OWORD *)(a1 + 16);
        v58 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v58;
        *v14 = v57;
        *(_OWORD *)(a1 + 48) = v56;
        if (v4->n128_u64[0] < *(_QWORD *)(a1 + 32))
        {
          v19 = *v14;
          v18 = *(__n128 *)(a1 + 48);
          v59 = v4[1];
          *v14 = *v4;
          *(__n128 *)(a1 + 48) = v59;
          goto LABEL_10;
        }
      }
      return 1;
    case 4:
      v14 = (__n128 *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 32);
      v22 = (__n128 *)(a1 + 64);
      v23 = *(_QWORD *)(a1 + 64);
      v24 = (__n128 *)(a2 - 32);
      v25 = *(_QWORD *)a1;
      if (v21 >= *(_QWORD *)a1)
      {
        if (v23 < v21)
        {
          v39 = *v14;
          v38 = *(_OWORD *)(a1 + 48);
          v40 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v40;
          *v22 = v39;
          *(_OWORD *)(a1 + 80) = v38;
          if (v14->n128_u64[0] < v25)
          {
            v42 = *(__n128 *)a1;
            v41 = *(_OWORD *)(a1 + 16);
            v43 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v43;
            *v14 = v42;
            *(_OWORD *)(a1 + 48) = v41;
          }
        }
      }
      else
      {
        if (v23 >= v21)
        {
          v61 = *(__n128 *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v62 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v62;
          *v14 = v61;
          *(_OWORD *)(a1 + 48) = v60;
          if (v23 >= *(_QWORD *)(a1 + 32))
            goto LABEL_41;
          v27 = *v14;
          v26 = *(_OWORD *)(a1 + 48);
          v63 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v63;
        }
        else
        {
          v27 = *(__n128 *)a1;
          v26 = *(_OWORD *)(a1 + 16);
          v28 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v22;
          *(_OWORD *)(a1 + 16) = v28;
        }
        *v22 = v27;
        *(_OWORD *)(a1 + 80) = v26;
      }
LABEL_41:
      if (v24->n128_u64[0] >= v22->n128_u64[0])
        return 1;
      v65 = *v22;
      v64 = *(_OWORD *)(a1 + 80);
      v66 = *(_OWORD *)(a2 - 16);
      *v22 = *v24;
      *(_OWORD *)(a1 + 80) = v66;
      *v24 = v65;
      *(_OWORD *)(a2 - 16) = v64;
      if (v22->n128_u64[0] >= v14->n128_u64[0])
        return 1;
      v68 = *v14;
      v67 = *(_OWORD *)(a1 + 48);
      v69 = *(_OWORD *)(a1 + 80);
      *v14 = *v22;
      *(_OWORD *)(a1 + 48) = v69;
      *v22 = v68;
      *(_OWORD *)(a1 + 80) = v67;
      goto LABEL_44;
    case 5:
      sub_239C7F310((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), (__n128 *)(a2 - 32), a3);
      return 1;
    default:
      v6 = (__n128 *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = (__n128 *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)a1;
      if (v9 >= *(_QWORD *)a1)
      {
        if (v7 < v9)
        {
          v30 = *v8;
          v29 = *(_OWORD *)(a1 + 48);
          v31 = *(_OWORD *)(a1 + 80);
          *v8 = *v6;
          *(_OWORD *)(a1 + 48) = v31;
          *v6 = v30;
          *(_OWORD *)(a1 + 80) = v29;
          if (v8->n128_u64[0] < v10)
          {
            v33 = *(__n128 *)a1;
            v32 = *(_OWORD *)(a1 + 16);
            v34 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v8;
            *(_OWORD *)(a1 + 16) = v34;
            *v8 = v33;
            *(_OWORD *)(a1 + 48) = v32;
          }
        }
      }
      else
      {
        if (v7 >= v9)
        {
          v45 = *(__n128 *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v46 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v8;
          *(_OWORD *)(a1 + 16) = v46;
          *v8 = v45;
          *(_OWORD *)(a1 + 48) = v44;
          if (v7 >= *(_QWORD *)(a1 + 32))
            goto LABEL_26;
          v12 = *v8;
          v11 = *(_OWORD *)(a1 + 48);
          v47 = *(_OWORD *)(a1 + 80);
          *v8 = *v6;
          *(_OWORD *)(a1 + 48) = v47;
        }
        else
        {
          v12 = *(__n128 *)a1;
          v11 = *(_OWORD *)(a1 + 16);
          v13 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v6;
          *(_OWORD *)(a1 + 16) = v13;
        }
        *v6 = v12;
        *(_OWORD *)(a1 + 80) = v11;
      }
LABEL_26:
      v48 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      while (1)
      {
        v52 = *(_QWORD *)v48;
        if (*(_QWORD *)v48 < v6->n128_u64[0])
        {
          v74 = *(_OWORD *)(v48 + 8);
          v75 = *(_QWORD *)(v48 + 24);
          v53 = v49;
          do
          {
            v54 = a1 + v53;
            v55 = *(_OWORD *)(a1 + v53 + 80);
            *(_OWORD *)(v54 + 96) = *(_OWORD *)(a1 + v53 + 64);
            *(_OWORD *)(v54 + 112) = v55;
            if (v53 == -64)
            {
              v51 = a1;
              goto LABEL_29;
            }
            v53 -= 32;
          }
          while (v52 < *(_QWORD *)(v54 + 32));
          v51 = a1 + v53 + 96;
LABEL_29:
          *(_QWORD *)v51 = v52;
          *(_OWORD *)(v51 + 8) = v74;
          *(_QWORD *)(v51 + 24) = v75;
          if (++v50 == 8)
            return v48 + 32 == a2;
        }
        v6 = (__n128 *)v48;
        v49 += 32;
        v48 += 32;
        if (v48 == a2)
          return 1;
      }
  }
}

void sub_239C80714(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  int64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  void *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE *v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t *v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _DWORD *v67;
  unsigned int *v68;
  _QWORD *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  int *v90;
  int *i;
  int v92;
  int v93;
  __int128 *v94;
  _OWORD *v95;
  __int128 v96;
  __int128 v97;
  int *v98;
  int *v99;
  int v100;
  int v101;
  _QWORD *v102;
  _QWORD *v103;
  unsigned int *v104;
  char *v105;
  void *__p[2];
  void *v107[2];
  __int128 v108;
  void *__dst[2];
  void *v110[2];
  __int128 v111;

  *(_OWORD *)v110 = 0u;
  v111 = 0u;
  *(_OWORD *)__dst = 0u;
  v4 = a1[10] - a1[9];
  if (v4)
  {
    sub_23942CB44((uint64_t)__dst, v4 >> 2);
    v5 = (unsigned int *)a1[9];
    v6 = (unsigned int *)a1[10];
    v7 = (unsigned int *)__dst[0];
    v8 = (unsigned int *)a2[9];
    v9 = (unsigned int *)a2[10];
    if (v5 != v6 && v8 != v9)
    {
      do
      {
        v11 = *v5;
        if (*v5 < *v8)
        {
          if (++v5 == v6)
            break;
        }
        else
        {
          if (*v8 >= v11)
          {
            *v7++ = v11;
            ++v5;
          }
          ++v8;
          if (v5 == v6)
            break;
        }
      }
      while (v8 != v9);
    }
  }
  else
  {
    v7 = 0;
  }
  if (v7 != __dst[1])
    __dst[1] = v7;
  v12 = (unsigned int *)a1[12];
  v13 = (unsigned int *)a1[13];
  v14 = v13 - v12;
  v15 = (char *)v110[1];
  v16 = (uint64_t)(v111 - (unint64_t)v110[1]) >> 2;
  if (v14 <= v16)
  {
    if (v14 < v16)
      *(_QWORD *)&v111 = (char *)v110[1] + 4 * v14;
  }
  else
  {
    sub_23942CB44((uint64_t)&v110[1], v14 - v16);
    v12 = (unsigned int *)a1[12];
    v13 = (unsigned int *)a1[13];
    v15 = (char *)v110[1];
  }
  if (v12 != v13)
  {
    v17 = (unsigned int *)a2[12];
    v18 = (unsigned int *)a2[13];
    while (v17 != v18)
    {
      v19 = *v12;
      if (*v12 < *v17)
      {
        if (++v12 == v13)
          break;
      }
      else
      {
        if (*v17 >= v19)
        {
          *(_DWORD *)v15 = v19;
          v15 += 4;
          ++v12;
        }
        ++v17;
        if (v12 == v13)
          break;
      }
    }
  }
  if (v15 != (char *)v111)
    *(_QWORD *)&v111 = v15;
  v102 = a1;
  v103 = a2;
  *(_OWORD *)v107 = 0u;
  v108 = 0u;
  *(_OWORD *)__p = 0u;
  v21 = (unsigned int *)__dst[0];
  v20 = (unsigned int *)__dst[1];
  if (__dst[0] != __dst[1])
  {
    v22 = (char *)__dst[1] - (char *)__dst[0];
    if ((void *)((char *)__dst[1] - (char *)__dst[0]) < (void *)0x7FFFFFFFFFFFFFFDLL)
    {
      v23 = operator new(2 * v22);
      v24 = 0;
      v25 = 0;
      __p[0] = v23;
      __p[1] = v23;
      v107[0] = &v23[v22 >> 2];
      v26 = (unsigned int *)v103[9];
      v27 = (unsigned int *)v102[9];
      v104 = v20;
      while (1)
      {
        v29 = *v21;
        if (*v26 < *v21)
        {
          do
          {
            v30 = v26[1];
            ++v26;
            ++v25;
          }
          while (v30 < v29);
        }
        if (*v27 < v29)
        {
          do
          {
            v31 = v27[1];
            ++v27;
            v24 = (v24 + 1);
          }
          while (v31 < v29);
        }
        if (v23 >= v107[0])
          break;
        *v23 = v25 | (unint64_t)(v24 << 32);
        v28 = v23 + 1;
LABEL_35:
        __p[1] = v28;
        ++v21;
        v23 = v28;
        if (v21 == v20)
        {
          v15 = (char *)v111;
          goto LABEL_68;
        }
      }
      v32 = __p[0];
      v33 = (char *)v23 - (char *)__p[0];
      v34 = ((char *)v23 - (char *)__p[0]) >> 3;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
LABEL_127:
        sub_2394189F8();
      v36 = (char *)v107[0] - (char *)__p[0];
      if (((char *)v107[0] - (char *)__p[0]) >> 2 > v35)
        v35 = v36 >> 2;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 61)
LABEL_126:
          sub_239418A80();
        v38 = operator new(8 * v37);
      }
      else
      {
        v38 = 0;
      }
      v39 = (unint64_t *)&v38[8 * v34];
      v40 = &v38[8 * v37];
      *v39 = v25 | (unint64_t)(v24 << 32);
      v28 = v39 + 1;
      if (v23 == (_QWORD *)v32)
      {
        __p[0] = &v38[8 * v34];
        __p[1] = v39 + 1;
        v107[0] = v40;
        v20 = v104;
LABEL_59:
        operator delete(v23);
        goto LABEL_35;
      }
      v41 = (char *)(v23 - 1) - v32;
      if (v41 <= 0x167
        || &v38[v33 - 8 - (v41 & 0xFFFFFFFFFFFFFFF8)] > &v38[v33 - 8]
        || (_QWORD *)((char *)v23 - (v41 & 0xFFFFFFFFFFFFFFF8) - 8) > v23 - 1
        || (unint64_t)((char *)v23 - v38 - v33) < 0x20)
      {
        v42 = v23;
        v20 = v104;
      }
      else
      {
        v44 = (v41 >> 3) + 1;
        v42 = &v23[-(v44 & 0x3FFFFFFFFFFFFFFCLL)];
        v45 = &v38[8 * v34 - 16];
        v46 = (__int128 *)(v23 - 2);
        v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        v20 = v104;
        do
        {
          v48 = *v46;
          *(v45 - 1) = *(v46 - 1);
          *v45 = v48;
          v45 -= 2;
          v46 -= 2;
          v47 -= 4;
        }
        while (v47);
        v39 -= v44 & 0x3FFFFFFFFFFFFFFCLL;
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_56;
      }
      do
      {
        v43 = *--v42;
        *--v39 = v43;
      }
      while (v42 != (_QWORD *)v32);
      v32 = __p[0];
LABEL_56:
      __p[0] = v39;
      __p[1] = v28;
      v23 = v32;
      v107[0] = v40;
      if (!v32)
        goto LABEL_35;
      goto LABEL_59;
    }
LABEL_128:
    sub_2394189F8();
  }
LABEL_68:
  v49 = (char *)v110[1];
  if (v110[1] != v15)
  {
    v50 = v15 - (char *)v110[1];
    v51 = (v15 - (char *)v110[1]) >> 2;
    v52 = (char *)v107[1];
    if (v51 <= (uint64_t)(*((_QWORD *)&v108 + 1) - (unint64_t)v107[1]) >> 3)
      goto LABEL_81;
    if (v50 > 0x7FFFFFFFFFFFFFFCLL)
      goto LABEL_128;
    v53 = (char *)v108;
    v54 = (char *)operator new(2 * v50);
    v55 = v108 - (unint64_t)v107[1];
    v56 = &v54[(v108 - (unint64_t)v107[1]) & 0xFFFFFFFFFFFFFFF8];
    v57 = v56;
    if ((void *)v108 != v107[1])
    {
      if ((unint64_t)(v55 - 8) < 0x58)
      {
        v57 = &v54[(v108 - (unint64_t)v107[1]) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_78:
          v64 = *((_QWORD *)v53 - 1);
          v53 -= 8;
          *((_QWORD *)v57 - 1) = v64;
          v57 -= 8;
        }
        while (v53 != v52);
        goto LABEL_79;
      }
      v57 = &v54[(v108 - (unint64_t)v107[1]) & 0xFFFFFFFFFFFFFFF8];
      if ((_QWORD)v108 - (_QWORD)&v54[v55 & 0xFFFFFFFFFFFFFFF8] < 0x20uLL)
        goto LABEL_78;
      v58 = v55 >> 3;
      v59 = ((unint64_t)(v55 - 8) >> 3) + 1;
      v60 = &v54[8 * v58 - 16];
      v61 = (__int128 *)(v108 - 16);
      v62 = v59 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v63 = *v61;
        *((_OWORD *)v60 - 1) = *(v61 - 1);
        *(_OWORD *)v60 = v63;
        v60 -= 32;
        v61 -= 2;
        v62 -= 4;
      }
      while (v62);
      v57 = &v56[-8 * (v59 & 0x3FFFFFFFFFFFFFFCLL)];
      v53 -= 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
      if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_78;
    }
LABEL_79:
    v107[1] = v57;
    *(_QWORD *)&v108 = v56;
    *((_QWORD *)&v108 + 1) = &v54[8 * v51];
    if (v52)
    {
      operator delete(v52);
      v49 = (char *)v110[1];
      v15 = (char *)v111;
    }
LABEL_81:
    if (v49 != v15)
    {
      v65 = 0;
      v66 = 0;
      v67 = (_DWORD *)v103[12];
      v68 = (unsigned int *)v102[12];
      v105 = v15;
      do
      {
        v70 = *(_DWORD *)v49;
        if (*v67 < *(_DWORD *)v49)
        {
          do
          {
            v71 = v67[1];
            ++v67;
            ++v66;
          }
          while (v71 < v70);
        }
        if (*v68 < v70)
        {
          do
          {
            v72 = v68[1];
            ++v68;
            v65 = (v65 + 1);
          }
          while (v72 < v70);
        }
        v73 = (char *)v108;
        if ((unint64_t)v108 < *((_QWORD *)&v108 + 1))
        {
          *(_QWORD *)v108 = v66 | (unint64_t)(v65 << 32);
          v69 = v73 + 8;
        }
        else
        {
          v74 = (char *)v107[1];
          v75 = v108 - (unint64_t)v107[1];
          v76 = (uint64_t)(v108 - (unint64_t)v107[1]) >> 3;
          v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 61)
            goto LABEL_127;
          v78 = *((_QWORD *)&v108 + 1) - (unint64_t)v107[1];
          if ((uint64_t)(*((_QWORD *)&v108 + 1) - (unint64_t)v107[1]) >> 2 > v77)
            v77 = v78 >> 2;
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
            v79 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v79 = v77;
          if (v79)
          {
            if (v79 >> 61)
              goto LABEL_126;
            v80 = v79;
            v81 = (char *)operator new(8 * v79);
            v79 = v80;
          }
          else
          {
            v81 = 0;
          }
          v82 = &v81[8 * v76];
          *(_QWORD *)v82 = v66 | (unint64_t)(v65 << 32);
          v69 = v82 + 8;
          if (v73 == v74)
          {
            v74 = v73;
          }
          else
          {
            v83 = v73 - 8 - v74;
            if (v83 < 0x58)
              goto LABEL_131;
            if ((unint64_t)(v73 - &v81[v75]) < 0x20)
              goto LABEL_131;
            v84 = (v83 >> 3) + 1;
            v85 = &v81[8 * v76 - 16];
            v86 = v73 - 16;
            v87 = v84 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v88 = *(_OWORD *)v86;
              *((_OWORD *)v85 - 1) = *((_OWORD *)v86 - 1);
              *(_OWORD *)v85 = v88;
              v85 -= 32;
              v86 -= 32;
              v87 -= 4;
            }
            while (v87);
            v82 -= 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
            v73 -= 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
            if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_131:
              do
              {
                v89 = *((_QWORD *)v73 - 1);
                v73 -= 8;
                *((_QWORD *)v82 - 1) = v89;
                v82 -= 8;
              }
              while (v73 != v74);
              v74 = (char *)v107[1];
            }
          }
          v107[1] = v82;
          *(_QWORD *)&v108 = v69;
          *((_QWORD *)&v108 + 1) = &v81[8 * v79];
          if (v74)
            operator delete(v74);
          v15 = v105;
        }
        *(_QWORD *)&v108 = v69;
        v49 += 4;
      }
      while (v49 != v15);
    }
  }
  sub_239C87238((_QWORD *)v102[7], v103[7], &v107[1], (unsigned int *)__p[0], (unsigned int *)__p[1]);
  sub_239C86DA4((_QWORD *)v102[8], v103[8], &v107[1], (unsigned int *)v107[1], (unsigned int *)v108);
  sub_239C86FCC((_QWORD *)v102[5], v103[5], __p, (unsigned int *)__p[0], (unsigned int *)__p[1]);
  sub_239C87238((_QWORD *)v102[6], v103[6], __p, (unsigned int *)v107[1], (unsigned int *)v108);
  v90 = (int *)__p[0];
  for (i = (int *)__p[1]; v90 != i; *v95 = v97)
  {
    v92 = *v90;
    v93 = v90[1];
    v90 += 2;
    v94 = (__int128 *)(*v103 + 8 * (*((_DWORD *)v103 + 8) + 6 * v92));
    v95 = (_OWORD *)(*v102 + 8 * (*((_DWORD *)v102 + 8) + 6 * v93));
    v96 = v94[2];
    v97 = *v94;
    v95[1] = v94[1];
    v95[2] = v96;
  }
  v98 = (int *)v107[1];
  v99 = (int *)v108;
  if (v107[1] != (void *)v108)
  {
    do
    {
      v100 = *v98;
      v101 = v98[1];
      v98 += 2;
      *(_QWORD *)(*v102 + 8 * (*((_DWORD *)v102 + 9) + v101)) = *(_QWORD *)(*v103
                                                                                          + 8
                                                                                          * (*((_DWORD *)v103 + 9) + v100));
    }
    while (v98 != v99);
    v98 = (int *)v107[1];
  }
  if (v98)
  {
    *(_QWORD *)&v108 = v98;
    operator delete(v98);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v110[1])
  {
    *(void **)&v111 = v110[1];
    operator delete(v110[1]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
}

void sub_239C80F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_2394FCFA8((uint64_t)va);
  sub_2394FCFA8((uint64_t)va1);
  _Unwind_Resume(a1);
}

float64x2_t *sub_239C80F60(float64x2_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  float64x2_t *v6;
  int v7;
  _QWORD *v8;
  float64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  float64_t v14;
  float64_t v15;
  int64x2_t *v16;
  _QWORD *v17;
  unsigned int v18;
  unint64_t *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unsigned int v39;
  unint64_t *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t *v188;
  unsigned int v189;
  unint64_t *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64_t v209;
  int64x2_t *v210;
  int64x2_t *v211;
  float64_t v212;
  float64x2_t *v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t *v228;
  float64x2_t v229;
  float64x2_t v230;
  uint64_t v231;
  uint64_t v232;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;

  v2 = *(_QWORD *)(a2 + 400);
  v3 = *(_QWORD *)(a2 + 408);
  if (((*(unsigned __int8 *)(v3 + 28) >> 2) & 1) == (char)(32 * *(_BYTE *)(v2 + 148)) >> 7)
    v4 = 2;
  else
    v4 = 1;
  if ((v4 & *(_DWORD *)(*(_QWORD *)&result->f64[0] + 40)) == 0)
    return result;
  v6 = result;
  v7 = *(unsigned __int8 *)(v2 + 4);
  if (*(_BYTE *)(v2 + 4))
  {
    if (*(_DWORD *)(v2 + 144) == -1)
      return result;
  }
  if (*(_BYTE *)(v3 + 4) && *(_DWORD *)(v3 + 24) == -1)
    return result;
  v8 = *(_QWORD **)(*(_QWORD *)&result->f64[0] + 8);
  v9 = result->f64[1];
  **(_BYTE **)&v9 = v7;
  if (v7)
    v10 = *(_DWORD *)(*v8 + 4 * *(unsigned int *)(v2 + 144));
  else
    v10 = -1;
  *(_DWORD *)(*(_QWORD *)&v9 + 4) = v10;
  v11 = *(_QWORD *)(a2 + 408);
  v12 = *(unsigned __int8 *)(v11 + 4);
  *(_BYTE *)(*(_QWORD *)&v9 + 8) = v12;
  if (v12)
    v13 = *(_DWORD *)(v8[3] + 4 * *(unsigned int *)(v11 + 24));
  else
    v13 = -1;
  *(_DWORD *)(*(_QWORD *)&v9 + 12) = v13;
  result = (float64x2_t *)sub_239C81C88(a2 + 8, *(_QWORD *)&result[1].f64[0], *(_QWORD *)&result[1].f64[1]);
  v14 = v6->f64[1];
  v15 = v6[1].f64[1];
  v16 = (int64x2_t *)(*(_QWORD *)&v15 + 288);
  v17 = **(_QWORD ***)&v6[2].f64[0];
  if (*(_BYTE *)(*(_QWORD *)&v14 + 8))
  {
    v18 = *(_DWORD *)(*(_QWORD *)&v14 + 12);
    v19 = (unint64_t *)v17[8];
    v20 = v19[11] + 24 * v18;
    v22 = *(char **)v20;
    v21 = *(char **)(v20 + 8);
    if (*(char **)v20 != v21)
    {
      while (*(_DWORD *)v22 < v18)
      {
        v22 += 16;
        if (v22 == v21)
          goto LABEL_24;
      }
    }
    if (v22 != v21)
    {
      if (*(_DWORD *)v22 == v18)
      {
        result = (float64x2_t *)(v19[2] + 8 * *((_QWORD *)v22 + 1));
LABEL_25:
        _Q5 = *(_OWORD *)(*(_QWORD *)&v15 + 576);
        _D7 = *(_QWORD *)(*(_QWORD *)&v15 + 584);
        __asm { FMLA            D6, D7, V5.D[1] }
        *(_QWORD *)&_Q5 = *(_QWORD *)(*(_QWORD *)&v15 + 600);
        __asm { FMLA            D6, D5, V4.D[1] }
        _D4 = *(_QWORD *)(*(_QWORD *)&v15 + 616);
        __asm { FMLA            D6, D4, V3.D[1] }
        _D3 = *(_QWORD *)(*(_QWORD *)&v15 + 632);
        __asm { FMLA            D6, D3, V2.D[1] }
        _D2 = *(_QWORD *)(*(_QWORD *)&v15 + 648);
        __asm { FMLA            D6, D2, V1.D[1] }
        _D1 = *(_QWORD *)(*(_QWORD *)&v15 + 664);
        __asm { FMLA            D6, D1, V0.D[1] }
        result->f64[0] = result->f64[0] + _D6;
        goto LABEL_26;
      }
      v21 = v22;
    }
LABEL_24:
    result = (float64x2_t *)sub_239C82854(v19, (char **)v20, v18, v21);
    goto LABEL_25;
  }
LABEL_26:
  if (**(_BYTE **)&v14)
  {
    v39 = *(_DWORD *)(*(_QWORD *)&v14 + 4);
    v40 = (unint64_t *)v17[5];
    v41 = v40[11] + 24 * v39;
    v43 = *(char **)v41;
    v42 = *(char **)(v41 + 8);
    if (*(char **)v41 != v42)
    {
      while (*(_DWORD *)v43 < v39)
      {
        v43 += 16;
        if (v43 == v42)
          goto LABEL_35;
      }
    }
    if (v43 != v42)
    {
      if (*(_DWORD *)v43 == v39)
      {
        result = (float64x2_t *)(v40[2] + 8 * *((_QWORD *)v43 + 1));
LABEL_36:
        v44 = *(float64x2_t *)(*(_QWORD *)&v15 + 16);
        v45 = *(float64x2_t *)(*(_QWORD *)&v15 + 96);
        v46 = *(float64x2_t *)(*(_QWORD *)&v15 + 112);
        v47 = (float64x2_t)vzip1q_s64(**(int64x2_t **)&v15, (int64x2_t)v45);
        v48 = (float64x2_t)vzip2q_s64(**(int64x2_t **)&v15, (int64x2_t)v45);
        v49 = (float64x2_t)vzip1q_s64((int64x2_t)v44, (int64x2_t)v46);
        v50 = (float64x2_t)vzip2q_s64((int64x2_t)v44, (int64x2_t)v46);
        v51 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, **(double **)&v15), v48, **(float64x2_t **)&v15, 1), v49, v44.f64[0]), v50, v44, 1);
        v52 = *(float64x2_t *)(*(_QWORD *)&v15 + 192);
        v53 = *(float64x2_t *)(*(_QWORD *)&v15 + 208);
        v54 = *(float64x2_t *)(*(_QWORD *)&v15 + 304);
        v55 = (float64x2_t)vzip1q_s64((int64x2_t)v52, *v16);
        v56 = (float64x2_t)vzip2q_s64((int64x2_t)v52, *v16);
        v57 = (float64x2_t)vzip1q_s64((int64x2_t)v53, (int64x2_t)v54);
        v58 = (float64x2_t)vzip2q_s64((int64x2_t)v53, (int64x2_t)v54);
        v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, **(double **)&v15), v56, **(float64x2_t **)&v15, 1), v57, v44.f64[0]), v58, v44, 1);
        v60 = *(float64x2_t *)(*(_QWORD *)&v15 + 384);
        v61 = *(float64x2_t *)(*(_QWORD *)&v15 + 400);
        v63 = *(float64x2_t *)(*(_QWORD *)&v15 + 480);
        v62 = *(float64x2_t *)(*(_QWORD *)&v15 + 496);
        v64 = (float64x2_t)vzip1q_s64((int64x2_t)v60, (int64x2_t)v63);
        v65 = (float64x2_t)vzip2q_s64((int64x2_t)v60, (int64x2_t)v63);
        v66 = (float64x2_t)vzip1q_s64((int64x2_t)v61, (int64x2_t)v62);
        v67 = (float64x2_t)vzip2q_s64((int64x2_t)v61, (int64x2_t)v62);
        v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v64, **(double **)&v15), v65, **(float64x2_t **)&v15, 1), v66, v44.f64[0]), v67, v44, 1);
        v248 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, v45.f64[0]), v48, v45, 1), v49, v46.f64[0]), v50, v46, 1);
        v250 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, v45.f64[0]), v56, v45, 1), v57, v46.f64[0]), v58, v46, 1);
        v69 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v64, v45.f64[0]), v65, v45, 1), v66, v46.f64[0]), v67, v46, 1);
        v70 = vmlaq_laneq_f64(vmulq_n_f64(v47, v52.f64[0]), v48, v52, 1);
        v71 = vmlaq_laneq_f64(vmulq_n_f64(v55, v52.f64[0]), v56, v52, 1);
        v72 = vmlaq_laneq_f64(vmulq_n_f64(v64, v52.f64[0]), v65, v52, 1);
        v73 = vmlaq_laneq_f64(vmulq_n_f64(v47, *(double *)v16->i64), v48, *(float64x2_t *)v16, 1);
        v74 = vmlaq_laneq_f64(vmulq_n_f64(v55, *(double *)v16->i64), v56, *(float64x2_t *)v16, 1);
        v75 = vmlaq_laneq_f64(vmulq_n_f64(v64, *(double *)v16->i64), v65, *(float64x2_t *)v16, 1);
        v76 = vmlaq_laneq_f64(vmulq_n_f64(v47, v60.f64[0]), v48, v60, 1);
        v77 = vmlaq_laneq_f64(vmulq_n_f64(v55, v60.f64[0]), v56, v60, 1);
        v78 = vmlaq_laneq_f64(vmulq_n_f64(v64, v60.f64[0]), v65, v60, 1);
        v79 = vmlaq_laneq_f64(vmulq_n_f64(v47, v63.f64[0]), v48, v63, 1);
        v80 = vmlaq_laneq_f64(vmulq_n_f64(v55, v63.f64[0]), v56, v63, 1);
        v81 = *(float64x2_t *)(*(_QWORD *)&v15 + 32);
        v82 = *(float64x2_t *)(*(_QWORD *)&v15 + 48);
        v83 = vmlaq_laneq_f64(vmulq_n_f64(v64, v63.f64[0]), v65, v63, 1);
        v85 = *(float64x2_t *)(*(_QWORD *)&v15 + 128);
        v84 = *(float64x2_t *)(*(_QWORD *)&v15 + 144);
        v271 = vmlaq_laneq_f64(vmlaq_n_f64(v70, v49, v53.f64[0]), v50, v53, 1);
        v263 = vmlaq_laneq_f64(vmlaq_n_f64(v72, v66, v53.f64[0]), v67, v53, 1);
        v267 = vmlaq_laneq_f64(vmlaq_n_f64(v71, v57, v53.f64[0]), v58, v53, 1);
        v86 = *(float64x2_t *)(*(_QWORD *)&v15 + 224);
        v261 = vmlaq_laneq_f64(vmlaq_n_f64(v73, v49, v54.f64[0]), v50, v54, 1);
        v246 = vmlaq_laneq_f64(vmlaq_n_f64(v74, v57, v54.f64[0]), v58, v54, 1);
        v87 = vmlaq_laneq_f64(vmlaq_n_f64(v75, v66, v54.f64[0]), v67, v54, 1);
        v88 = *(float64x2_t *)(*(_QWORD *)&v15 + 320);
        v89 = vmlaq_laneq_f64(vmlaq_n_f64(v76, v49, v61.f64[0]), v50, v61, 1);
        v90 = vmlaq_laneq_f64(vmlaq_n_f64(v77, v57, v61.f64[0]), v58, v61, 1);
        v257 = vmlaq_laneq_f64(vmlaq_n_f64(v78, v66, v61.f64[0]), v67, v61, 1);
        v91 = *(float64x2_t *)(*(_QWORD *)&v15 + 416);
        v92 = *(float64x2_t *)(*(_QWORD *)&v15 + 512);
        v93 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v49, v62.f64[0]), v50, v62, 1);
        v94 = (float64x2_t)vzip1q_s64((int64x2_t)v86, (int64x2_t)v88);
        v95 = vmlaq_n_f64(v80, v57, v62.f64[0]);
        v96 = (float64x2_t)vzip1q_s64((int64x2_t)v91, (int64x2_t)v92);
        v97 = vmlaq_laneq_f64(v95, v58, v62, 1);
        v98 = (float64x2_t)vzip2q_s64((int64x2_t)v86, (int64x2_t)v88);
        v99 = vmlaq_n_f64(v83, v66, v62.f64[0]);
        v100 = (float64x2_t)vzip2q_s64((int64x2_t)v91, (int64x2_t)v92);
        v101 = vmlaq_laneq_f64(v99, v67, v62, 1);
        v102 = (float64x2_t)vzip1q_s64((int64x2_t)v81, (int64x2_t)v85);
        v103 = (float64x2_t)vzip2q_s64((int64x2_t)v81, (int64x2_t)v85);
        v104 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v96, v81.f64[0]), v100, v81, 1);
        v105 = (float64x2_t)vzip1q_s64((int64x2_t)v82, (int64x2_t)v84);
        v106 = (float64x2_t)vzip2q_s64((int64x2_t)v82, (int64x2_t)v84);
        v254 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v51, v102, v81.f64[0]), v103, v81, 1), v105, v82.f64[0]), v106, v82, 1);
        v107 = *(float64x2_t *)(*(_QWORD *)&v15 + 240);
        v108 = *(float64x2_t *)(*(_QWORD *)&v15 + 336);
        v109 = (float64x2_t)vzip1q_s64((int64x2_t)v107, (int64x2_t)v108);
        v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v59, v94, v81.f64[0]), v98, v81, 1), v109, v82.f64[0]);
        v111 = (float64x2_t)vzip2q_s64((int64x2_t)v107, (int64x2_t)v108);
        v252 = vmlaq_laneq_f64(v110, v111, v82, 1);
        v112 = *(float64x2_t *)(*(_QWORD *)&v15 + 432);
        v113 = *(float64x2_t *)(*(_QWORD *)&v15 + 528);
        v114 = (float64x2_t)vzip1q_s64((int64x2_t)v112, (int64x2_t)v113);
        v115 = vmlaq_n_f64(v104, v114, v82.f64[0]);
        v116 = (float64x2_t)vzip2q_s64((int64x2_t)v112, (int64x2_t)v113);
        v259 = vmlaq_laneq_f64(v115, v116, v82, 1);
        v117 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v248, v102, v85.f64[0]), v103, v85, 1), v105, v84.f64[0]), v106, v84, 1);
        v118 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v250, v94, v85.f64[0]), v98, v85, 1), v109, v84.f64[0]), v111, v84, 1);
        v119 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v69, v96, v85.f64[0]), v100, v85, 1), v114, v84.f64[0]), v116, v84, 1);
        v272 = vmlaq_laneq_f64(vmlaq_n_f64(v271, v102, v86.f64[0]), v103, v86, 1);
        v268 = vmlaq_laneq_f64(vmlaq_n_f64(v267, v94, v86.f64[0]), v98, v86, 1);
        v264 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v96, v86.f64[0]), v100, v86, 1);
        v120 = vmlaq_laneq_f64(vmlaq_n_f64(v261, v102, v88.f64[0]), v103, v88, 1);
        v121 = vmlaq_laneq_f64(vmlaq_n_f64(v246, v94, v88.f64[0]), v98, v88, 1);
        v122 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v96, v88.f64[0]), v100, v88, 1);
        v123 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v94, v91.f64[0]), v98, v91, 1);
        v124 = vmlaq_laneq_f64(vmlaq_n_f64(v257, v96, v91.f64[0]), v100, v91, 1);
        v125 = vmlaq_laneq_f64(vmlaq_n_f64(v97, v94, v92.f64[0]), v98, v92, 1);
        v127 = *(float64x2_t *)(*(_QWORD *)&v15 + 64);
        v126 = *(float64x2_t *)(*(_QWORD *)&v15 + 80);
        v128 = vmlaq_laneq_f64(vmlaq_n_f64(v101, v96, v92.f64[0]), v100, v92, 1);
        v130 = *(float64x2_t *)(*(_QWORD *)&v15 + 160);
        v129 = *(float64x2_t *)(*(_QWORD *)&v15 + 176);
        v273 = vmlaq_laneq_f64(vmlaq_n_f64(v272, v105, v107.f64[0]), v106, v107, 1);
        v269 = vmlaq_laneq_f64(vmlaq_n_f64(v268, v109, v107.f64[0]), v111, v107, 1);
        v265 = vmlaq_laneq_f64(vmlaq_n_f64(v264, v114, v107.f64[0]), v116, v107, 1);
        v131 = *(float64x2_t *)(*(_QWORD *)&v15 + 256);
        v262 = vmlaq_laneq_f64(vmlaq_n_f64(v120, v105, v108.f64[0]), v106, v108, 1);
        v132 = vmlaq_laneq_f64(vmlaq_n_f64(v121, v109, v108.f64[0]), v111, v108, 1);
        v133 = vmlaq_laneq_f64(vmlaq_n_f64(v122, v114, v108.f64[0]), v116, v108, 1);
        v134 = *(float64x2_t *)(*(_QWORD *)&v15 + 352);
        v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v89, v102, v91.f64[0]), v103, v91, 1), v105, v112.f64[0]), v106, v112, 1);
        v136 = vmlaq_laneq_f64(vmlaq_n_f64(v123, v109, v112.f64[0]), v111, v112, 1);
        v258 = vmlaq_laneq_f64(vmlaq_n_f64(v124, v114, v112.f64[0]), v116, v112, 1);
        v137 = *(float64x2_t *)(*(_QWORD *)&v15 + 448);
        v138 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v93, v102, v92.f64[0]), v103, v92, 1), v105, v113.f64[0]);
        v139 = *(float64x2_t *)(*(_QWORD *)&v15 + 544);
        v140 = vmlaq_laneq_f64(v138, v106, v113, 1);
        v141 = vmlaq_n_f64(v125, v109, v113.f64[0]);
        v142 = (float64x2_t)vzip1q_s64((int64x2_t)v137, (int64x2_t)v139);
        v143 = vmlaq_laneq_f64(v141, v111, v113, 1);
        v144 = (float64x2_t)vzip2q_s64((int64x2_t)v131, (int64x2_t)v134);
        v145 = (float64x2_t)vzip2q_s64((int64x2_t)v137, (int64x2_t)v139);
        v146 = vmlaq_laneq_f64(vmlaq_n_f64(v128, v114, v113.f64[0]), v116, v113, 1);
        v147 = (float64x2_t)vzip1q_s64((int64x2_t)v127, (int64x2_t)v130);
        v148 = (float64x2_t)vzip2q_s64((int64x2_t)v127, (int64x2_t)v130);
        v149 = vmlaq_laneq_f64(vmlaq_n_f64(v259, v142, v127.f64[0]), v145, v127, 1);
        v247 = (float64x2_t)vzip1q_s64((int64x2_t)v131, (int64x2_t)v134);
        v249 = (float64x2_t)vzip1q_s64((int64x2_t)v126, (int64x2_t)v129);
        v251 = (float64x2_t)vzip2q_s64((int64x2_t)v126, (int64x2_t)v129);
        v150 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v254, v147, v127.f64[0]), v148, v127, 1), v249, v126.f64[0]), v251, v126, 1);
        v151 = *(float64x2_t *)(*(_QWORD *)&v15 + 272);
        v152 = *(float64x2_t *)(*(_QWORD *)&v15 + 368);
        v153 = (float64x2_t)vzip1q_s64((int64x2_t)v151, (int64x2_t)v152);
        v154 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v252, v247, v127.f64[0]), v144, v127, 1), v153, v126.f64[0]);
        v155 = (float64x2_t)vzip2q_s64((int64x2_t)v151, (int64x2_t)v152);
        v253 = vmlaq_laneq_f64(v154, v155, v126, 1);
        v255 = v150;
        v156 = *(float64x2_t *)(*(_QWORD *)&v15 + 464);
        v157 = *(float64x2_t *)(*(_QWORD *)&v15 + 560);
        v158 = (float64x2_t)vzip1q_s64((int64x2_t)v156, (int64x2_t)v157);
        v159 = vmlaq_n_f64(v149, v158, v126.f64[0]);
        v160 = (float64x2_t)vzip2q_s64((int64x2_t)v156, (int64x2_t)v157);
        v161 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v118, v247, v130.f64[0]), v144, v130, 1), v153, v129.f64[0]), v155, v129, 1);
        v162 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v119, v142, v130.f64[0]), v145, v130, 1), v158, v129.f64[0]), v160, v129, 1);
        v274 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v273, v147, v131.f64[0]), v148, v131, 1), v249, v151.f64[0]), v251, v151, 1);
        v266 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v265, v142, v131.f64[0]), v145, v131, 1), v158, v151.f64[0]), v160, v151, 1);
        v270 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v269, v247, v131.f64[0]), v144, v131, 1), v153, v151.f64[0]), v155, v151, 1);
        v256 = vaddq_f64(*result, v255);
        v260 = vaddq_f64(result[2], vmlaq_laneq_f64(v159, v160, v126, 1));
        v163 = vaddq_f64(result[3], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v117, v147, v130.f64[0]), v148, v130, 1), v249, v129.f64[0]), v251, v129, 1));
        v164 = vaddq_f64(result[4], v161);
        v165 = vaddq_f64(result[5], v162);
        v166 = vmlaq_laneq_f64(vmlaq_n_f64(v262, v147, v134.f64[0]), v148, v134, 1);
        v167 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v247, v134.f64[0]), v144, v134, 1);
        v168 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v142, v134.f64[0]), v145, v134, 1);
        v169 = vaddq_f64(result[6], v274);
        v170 = vaddq_f64(result[7], v270);
        v171 = vmlaq_laneq_f64(vmlaq_n_f64(v135, v147, v137.f64[0]), v148, v137, 1);
        v172 = vmlaq_laneq_f64(vmlaq_n_f64(v136, v247, v137.f64[0]), v144, v137, 1);
        v173 = vmlaq_laneq_f64(vmlaq_n_f64(v258, v142, v137.f64[0]), v145, v137, 1);
        v174 = vmlaq_laneq_f64(vmlaq_n_f64(v140, v147, v139.f64[0]), v148, v139, 1);
        v175 = vmlaq_laneq_f64(vmlaq_n_f64(v143, v247, v139.f64[0]), v144, v139, 1);
        v176 = vmlaq_laneq_f64(vmlaq_n_f64(v146, v142, v139.f64[0]), v145, v139, 1);
        v177 = vaddq_f64(result[8], v266);
        v178 = vaddq_f64(result[9], vmlaq_laneq_f64(vmlaq_n_f64(v166, v249, v152.f64[0]), v251, v152, 1));
        v179 = vaddq_f64(result[10], vmlaq_laneq_f64(vmlaq_n_f64(v167, v153, v152.f64[0]), v155, v152, 1));
        v180 = vaddq_f64(result[11], vmlaq_laneq_f64(vmlaq_n_f64(v168, v158, v152.f64[0]), v160, v152, 1));
        v181 = vaddq_f64(result[12], vmlaq_laneq_f64(vmlaq_n_f64(v171, v249, v156.f64[0]), v251, v156, 1));
        v182 = vaddq_f64(result[13], vmlaq_laneq_f64(vmlaq_n_f64(v172, v153, v156.f64[0]), v155, v156, 1));
        v183 = vmlaq_laneq_f64(vmlaq_n_f64(v175, v153, v157.f64[0]), v155, v157, 1);
        v184 = vaddq_f64(result[14], vmlaq_laneq_f64(vmlaq_n_f64(v173, v158, v156.f64[0]), v160, v156, 1));
        v185 = vaddq_f64(result[15], vmlaq_laneq_f64(vmlaq_n_f64(v174, v249, v157.f64[0]), v251, v157, 1));
        v186 = vaddq_f64(result[16], v183);
        result[1] = vaddq_f64(result[1], v253);
        *result = v256;
        result[4] = v164;
        result[5] = v165;
        result[2] = v260;
        result[3] = v163;
        v187 = vaddq_f64(result[17], vmlaq_laneq_f64(vmlaq_n_f64(v176, v158, v157.f64[0]), v160, v157, 1));
        result[6] = v169;
        result[7] = v170;
        result[10] = v179;
        result[11] = v180;
        result[8] = v177;
        result[9] = v178;
        result[12] = v181;
        result[13] = v182;
        result[16] = v186;
        result[17] = v187;
        result[14] = v184;
        result[15] = v185;
        if (!**(_BYTE **)&v14 || !*(_BYTE *)(*(_QWORD *)&v14 + 8))
          goto LABEL_48;
        v188 = (float64x2_t *)(*(_QWORD *)&v15 + 576);
        v189 = *(_DWORD *)(*(_QWORD *)&v14 + 4);
        v190 = (unint64_t *)v17[6];
        v191 = v190[11] + 24 * *(unsigned int *)(*(_QWORD *)&v14 + 12);
        v193 = *(char **)v191;
        v192 = *(char **)(v191 + 8);
        if (*(char **)v191 != v192)
        {
          while (*(_DWORD *)v193 < v189)
          {
            v193 += 16;
            if (v193 == v192)
              goto LABEL_46;
          }
        }
        if (v193 != v192)
        {
          if (*(_DWORD *)v193 == v189)
          {
            result = (float64x2_t *)(v190[2] + 8 * *((_QWORD *)v193 + 1));
LABEL_47:
            v194 = *(float64x2_t *)(*(_QWORD *)&v15 + 592);
            v195 = *(float64x2_t *)(*(_QWORD *)&v15 + 608);
            v196 = *(float64x2_t *)(*(_QWORD *)&v15 + 624);
            v197 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**(int64x2_t **)&v15, *(int64x2_t *)(*(_QWORD *)&v15 + 96)), v188->f64[0]), (float64x2_t)vzip2q_s64(**(int64x2_t **)&v15, *(int64x2_t *)(*(_QWORD *)&v15 + 96)), *v188, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 16), *(int64x2_t *)(*(_QWORD *)&v15 + 112)), v194.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 16), *(int64x2_t *)(*(_QWORD *)&v15 + 112)),
                             v194,
                             1),
                           (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 32), *(int64x2_t *)(*(_QWORD *)&v15 + 128)), v195.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 32), *(int64x2_t *)(*(_QWORD *)&v15 + 128)), v195, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 48), *(int64x2_t *)(*(_QWORD *)&v15 + 144)), v196.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 48), *(int64x2_t *)(*(_QWORD *)&v15 + 144)), v196, 1);
            v198 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 192), *v16), v188->f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 192), *v16), *v188, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 208), *(int64x2_t *)(*(_QWORD *)&v15 + 304)), v194.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 208), *(int64x2_t *)(*(_QWORD *)&v15 + 304)),
                             v194,
                             1),
                           (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 224), *(int64x2_t *)(*(_QWORD *)&v15 + 320)), v195.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 224), *(int64x2_t *)(*(_QWORD *)&v15 + 320)), v195, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 240), *(int64x2_t *)(*(_QWORD *)&v15 + 336)), v196.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 240), *(int64x2_t *)(*(_QWORD *)&v15 + 336)), v196, 1);
            v199 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 384), *(int64x2_t *)(*(_QWORD *)&v15 + 480)), v188->f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 384), *(int64x2_t *)(*(_QWORD *)&v15 + 480)), *v188, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 400), *(int64x2_t *)(*(_QWORD *)&v15 + 496)),
                               v194.f64[0]),
                             (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 400), *(int64x2_t *)(*(_QWORD *)&v15 + 496)), v194, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 416), *(int64x2_t *)(*(_QWORD *)&v15 + 512)), v195.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 416), *(int64x2_t *)(*(_QWORD *)&v15 + 512)), v195, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 432), *(int64x2_t *)(*(_QWORD *)&v15 + 528)), v196.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 432),
                                    *(int64x2_t *)(*(_QWORD *)&v15 + 528)),
                     v196,
                     1);
            v200 = *(float64x2_t *)(*(_QWORD *)&v15 + 640);
            v201 = vmlaq_laneq_f64(vmlaq_n_f64(v197, (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 64), *(int64x2_t *)(*(_QWORD *)&v15 + 160)), v200.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 64), *(int64x2_t *)(*(_QWORD *)&v15 + 160)), v200, 1);
            v202 = vmlaq_laneq_f64(vmlaq_n_f64(v198, (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 256), *(int64x2_t *)(*(_QWORD *)&v15 + 352)), v200.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 256), *(int64x2_t *)(*(_QWORD *)&v15 + 352)), v200, 1);
            v203 = vmlaq_laneq_f64(vmlaq_n_f64(v199, (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 448), *(int64x2_t *)(*(_QWORD *)&v15 + 544)), v200.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 448), *(int64x2_t *)(*(_QWORD *)&v15 + 544)), v200, 1);
            v204 = *(float64x2_t *)(*(_QWORD *)&v15 + 656);
            v205 = vmlaq_laneq_f64(vmlaq_n_f64(v201, (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 80), *(int64x2_t *)(*(_QWORD *)&v15 + 176)), v204.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 80), *(int64x2_t *)(*(_QWORD *)&v15 + 176)), v204, 1);
            v206 = vmlaq_laneq_f64(vmlaq_n_f64(v202, (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 272), *(int64x2_t *)(*(_QWORD *)&v15 + 368)), v204.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 272), *(int64x2_t *)(*(_QWORD *)&v15 + 368)), v204, 1);
            v207 = vaddq_f64(result[2], vmlaq_laneq_f64(vmlaq_n_f64(v203, (float64x2_t)vzip1q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 464), *(int64x2_t *)(*(_QWORD *)&v15 + 560)), v204.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(*(_QWORD *)&v15 + 464), *(int64x2_t *)(*(_QWORD *)&v15 + 560)), v204, 1));
            v208 = vaddq_f64(result[1], v206);
            *result = vaddq_f64(*result, v205);
            result[1] = v208;
            result[2] = v207;
            goto LABEL_48;
          }
          v192 = v193;
        }
LABEL_46:
        result = (float64x2_t *)sub_239C82A5C(v190, (char **)v191, v189, v192);
        goto LABEL_47;
      }
      v42 = v43;
    }
LABEL_35:
    result = (float64x2_t *)sub_239C82958(v40, (char **)v41, v39, v42);
    goto LABEL_36;
  }
LABEL_48:
  v209 = v6[2].f64[1];
  v210 = *(int64x2_t **)&v6[1].f64[1];
  v211 = v210 + 18;
  v212 = v6->f64[1];
  v213 = (float64x2_t *)(a2 + 416);
  if (**(_BYTE **)&v212)
  {
    v214 = *(float64x2_t *)(a2 + 432);
    v215 = *(float64x2_t *)(a2 + 448);
    v216 = *(float64x2_t *)(a2 + 464);
    v217 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v210, v210[6]), v213->f64[0]), (float64x2_t)vzip2q_s64(*v210, v210[6]), *v213, 1), (float64x2_t)vzip1q_s64(v210[1], v210[7]), v214.f64[0]), (float64x2_t)vzip2q_s64(v210[1], v210[7]), v214, 1), (float64x2_t)vzip1q_s64(v210[2], v210[8]), v215.f64[0]), (float64x2_t)vzip2q_s64(v210[2], v210[8]), v215,
                 1),
               (float64x2_t)vzip1q_s64(v210[3], v210[9]),
               v216.f64[0]),
             (float64x2_t)vzip2q_s64(v210[3], v210[9]),
             v216,
             1);
    v218 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v210[12], *v211), v213->f64[0]), (float64x2_t)vzip2q_s64(v210[12], *v211), *v213, 1), (float64x2_t)vzip1q_s64(v210[13], v210[19]), v214.f64[0]), (float64x2_t)vzip2q_s64(v210[13], v210[19]), v214, 1), (float64x2_t)vzip1q_s64(v210[14], v210[20]), v215.f64[0]), (float64x2_t)vzip2q_s64(v210[14], v210[20]), v215,
                 1),
               (float64x2_t)vzip1q_s64(v210[15], v210[21]),
               v216.f64[0]),
             (float64x2_t)vzip2q_s64(v210[15], v210[21]),
             v216,
             1);
    v219 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v210[24], v210[30]), v213->f64[0]), (float64x2_t)vzip2q_s64(v210[24], v210[30]), *v213, 1), (float64x2_t)vzip1q_s64(v210[25], v210[31]), v214.f64[0]), (float64x2_t)vzip2q_s64(v210[25], v210[31]), v214, 1), (float64x2_t)vzip1q_s64(v210[26], v210[32]), v215.f64[0]), (float64x2_t)vzip2q_s64(v210[26], v210[32]), v215,
                 1),
               (float64x2_t)vzip1q_s64(v210[27], v210[33]),
               v216.f64[0]),
             (float64x2_t)vzip2q_s64(v210[27], v210[33]),
             v216,
             1);
    v220 = *(float64x2_t *)(a2 + 480);
    v221 = vmlaq_laneq_f64(vmlaq_n_f64(v217, (float64x2_t)vzip1q_s64(v210[4], v210[10]), v220.f64[0]), (float64x2_t)vzip2q_s64(v210[4], v210[10]), v220, 1);
    v222 = vmlaq_laneq_f64(vmlaq_n_f64(v218, (float64x2_t)vzip1q_s64(v210[16], v210[22]), v220.f64[0]), (float64x2_t)vzip2q_s64(v210[16], v210[22]), v220, 1);
    v223 = vmlaq_laneq_f64(vmlaq_n_f64(v219, (float64x2_t)vzip1q_s64(v210[28], v210[34]), v220.f64[0]), (float64x2_t)vzip2q_s64(v210[28], v210[34]), v220, 1);
    v224 = *(float64x2_t *)(a2 + 496);
    v225 = vmlaq_laneq_f64(vmlaq_n_f64(v221, (float64x2_t)vzip1q_s64(v210[5], v210[11]), v224.f64[0]), (float64x2_t)vzip2q_s64(v210[5], v210[11]), v224, 1);
    v226 = vmlaq_laneq_f64(vmlaq_n_f64(v222, (float64x2_t)vzip1q_s64(v210[17], v210[23]), v224.f64[0]), (float64x2_t)vzip2q_s64(v210[17], v210[23]), v224, 1);
    v227 = vmlaq_laneq_f64(vmlaq_n_f64(v223, (float64x2_t)vzip1q_s64(v210[29], v210[35]), v224.f64[0]), (float64x2_t)vzip2q_s64(v210[29], v210[35]), v224, 1);
    v228 = (float64x2_t *)(***(_QWORD ***)&v209
                         + 8
                         * (*(_DWORD *)(**(_QWORD **)&v209 + 32)
                                        + 6 * *(_DWORD *)(*(_QWORD *)&v212 + 4)));
    v229 = vsubq_f64(v228[2], v227);
    v230 = vsubq_f64(v228[1], v226);
    *v228 = vsubq_f64(*v228, v225);
    v228[1] = v230;
    v228[2] = v229;
  }
  if (*(_BYTE *)(*(_QWORD *)&v212 + 8))
  {
    v231 = **(_QWORD **)&v209;
    v232 = 8 * (*(_DWORD *)(v231 + 36) + *(_DWORD *)(*(_QWORD *)&v212 + 12));
    _Q1 = v211[22];
    _Q0 = v211[23];
    _Q3 = v211[20];
    _Q2 = v211[21];
    _Q5 = v211[18];
    _Q4 = v211[19];
    _D19 = *(_QWORD *)(a2 + 424);
    __asm { FMLA            D20, D19, V5.D[1] }
    _Q5.i64[0] = *(_QWORD *)(a2 + 440);
    __asm { FMLA            D20, D5, V4.D[1] }
    _Q4.i64[0] = *(_QWORD *)(a2 + 456);
    __asm { FMLA            D20, D4, V3.D[1] }
    _Q3.i64[0] = *(_QWORD *)(a2 + 472);
    __asm { FMLA            D20, D3, V2.D[1] }
    _Q2.i64[0] = *(_QWORD *)(a2 + 488);
    __asm { FMLA            D20, D2, V1.D[1] }
    _Q1.i64[0] = *(_QWORD *)(a2 + 504);
    __asm { FMLA            D20, D1, V0.D[1] }
    *(double *)(*(_QWORD *)v231 + v232) = *(double *)(*(_QWORD *)v231 + v232) - _D20;
  }
  return result;
}

void *sub_239C81C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float64x2_t v3;
  float64x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  __int128 v33;
  __int128 *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  int64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  __int128 v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  void *result;
  float64x2_t *v90;
  int v91;
  float64x2_t *v92;
  const void *v93;
  float64x2_t *v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t *v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t *v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  double v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  _QWORD *v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v162[72];
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171[72];
  uint64_t v172;

  v172 = *MEMORY[0x24BDAC8D0];
  v7 = (float64x2_t *)(a3 + 360);
  v8 = a1 + 264;
  v10 = *(float64x2_t **)(a1 + 392);
  v9 = *(_QWORD *)(a1 + 400);
  v11 = *(float64x2_t *)(a1 + 296);
  v168 = *(float64x2_t *)(a1 + 264);
  v169 = v11;
  v170 = *(float64x2_t *)(a1 + 328);
  v3.f64[0] = *(float64_t *)(v9 + 16);
  v167 = vmulq_n_f64(*(float64x2_t *)(a1 + 360), v3.f64[0]);
  v12 = *(float64x2_t *)(a1 + 152);
  v13 = *(float64x2_t *)(a1 + 136);
  v14 = *(float64x2_t *)(a1 + 184);
  v15 = *(float64x2_t *)(a1 + 168);
  v16 = *(float64x2_t *)(a1 + 216);
  v17 = *(float64x2_t *)(a1 + 200);
  v18 = *(float64x2_t *)(a1 + 248);
  v19 = *(float64x2_t *)(a1 + 232);
  v20 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, v13.f64[0]), v11, v13, 1), v170, v12.f64[0]), v167, v12, 1);
  v21 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, v15.f64[0]), v11, v15, 1), v170, v14.f64[0]), v167, v14, 1);
  v22 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, v17.f64[0]), v11, v17, 1), v170, v16.f64[0]), v167, v16, 1);
  v23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, v19.f64[0]), v11, v19, 1), v170, v18.f64[0]), v167, v18, 1);
  v25 = v10[1];
  v24 = v10[2];
  v27 = v10[3];
  v26 = v10[4];
  v29 = v10[5];
  v28 = v10[6];
  v31 = v10[7];
  v30 = v10[8];
  v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v25.f64[0]), v21, v25, 1), v22, v24.f64[0]), v23, v24, 1);
  *(double *)&v33 = v32.f64[0] + -1.0;
  *((_QWORD *)&v33 + 1) = *(_QWORD *)&v32.f64[1];
  *(_OWORD *)(a1 + 408) = v33;
  v34 = (__int128 *)(a1 + 408);
  v35 = *(float64x2_t *)(a1 + 312);
  v36 = *(float64x2_t *)(a1 + 344);
  *(_QWORD *)&v37.f64[0] = *(_OWORD *)&vmulq_f64(*(float64x2_t *)(a1 + 376), v3);
  v37.f64[1] = *(float64_t *)(a1 + 384);
  v163 = *(float64x2_t *)(a1 + 280);
  v164 = v37;
  v165 = v35;
  v166 = v36;
  v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, v13.f64[0]), v35, v13, 1), v36, v12.f64[0]), v37, v12, 1);
  v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, v15.f64[0]), v35, v15, 1), v36, v14.f64[0]), v37, v14, 1);
  v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, v17.f64[0]), v35, v17, 1), v36, v16.f64[0]), v37, v16, 1);
  v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, v19.f64[0]), v35, v19, 1), v36, v18.f64[0]), v37, v18, 1);
  v42 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v27.f64[0]), v21, v27, 1), v22, v26.f64[0]), v23, v26, 1);
  *(_QWORD *)&v17.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v27.f64[0]), v39, v27, 1), v40, v26.f64[0]), v41, v26, 1);
  v43 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v29.f64[0]), v21, v29, 1), v22, v28.f64[0]), v23, v28, 1);
  v44 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v31.f64[0]), v21, v31, 1), v22, v30.f64[0]), v23, v30, 1);
  v22.f64[0] = *(double *)&v42.i64[1] + -1.0;
  v22.f64[1] = v17.f64[0];
  *(float64x2_t *)(a1 + 440) = v22;
  *(float64x2_t *)(a1 + 456) = v43;
  *(int64x2_t *)(a1 + 424) = vzip1q_s64((int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v25.f64[0]), v39, v25, 1), v40, v24.f64[0]), v41, v24, 1), v42);
  *(double *)(a1 + 472) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v29.f64[0]), v39, v29, 1), v40, v28.f64[0]), v41, v28, 1).f64[0]+ -1.0;
  *(float64x2_t *)(a1 + 480) = v44;
  *(_QWORD *)(a1 + 496) = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v31.f64[0]), v39, v31, 1), v40, v30.f64[0]), v41, v30, 1);
  v171[0].f64[0] = 0.0;
  sub_239C82B60((_QWORD *)a3, v171);
  *(_OWORD *)(a3 + 640) = 0u;
  *(_OWORD *)(a3 + 656) = 0u;
  *(_OWORD *)(a3 + 608) = 0u;
  *(_OWORD *)(a3 + 624) = 0u;
  *(_OWORD *)(a3 + 576) = 0u;
  *(_OWORD *)(a3 + 592) = 0u;
  v45 = *(float64x2_t *)(a1 + 152);
  v46 = *(float64x2_t *)(a1 + 136);
  v47 = *(float64x2_t *)(a1 + 184);
  v48 = *(float64x2_t *)(a1 + 168);
  v49 = *(float64x2_t *)(a1 + 216);
  v50 = *(float64x2_t *)(a1 + 200);
  v52 = v168;
  v51 = v169;
  v53 = v170;
  v55 = v166;
  v54 = v167;
  v56 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, v46.f64[0]), v169, v46, 1), v170, v45.f64[0]), v167, v45, 1);
  v58 = v163;
  v57 = v164;
  v59 = v165;
  v60 = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, v46.f64[0]), v165, v46, 1), v166, v45.f64[0]), v164, v45, 1);
  v61 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, v48.f64[0]), v169, v48, 1), v170, v47.f64[0]), v167, v47, 1);
  *(_QWORD *)&v46.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, v48.f64[0]), v165, v48, 1), v166, v47.f64[0]), v164, v47, 1);
  v62 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, v50.f64[0]), v169, v50, 1), v170, v49.f64[0]), v167, v49, 1);
  *(_QWORD *)&v48.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v163, v50.f64[0]), v165, v50, 1), v166, v49.f64[0]), v164, v49, 1);
  *v7 = v56;
  *(_QWORD *)(a3 + 376) = v60;
  v7[6] = v61;
  *(float64_t *)(a3 + 472) = v46.f64[0];
  v7[12] = v62;
  *(float64_t *)(a3 + 568) = v48.f64[0];
  v63 = *(_OWORD *)(v8 + 96);
  *(_QWORD *)(a3 + 664) = *((_QWORD *)v34 - 4);
  *(_OWORD *)(a3 + 648) = v63;
  v64 = *(float64x2_t *)(a1 + 152);
  v65 = *(float64x2_t *)(a1 + 136);
  v66 = *(float64x2_t *)(a1 + 184);
  v67 = *(float64x2_t *)(a1 + 168);
  v68 = *(float64x2_t *)(a1 + 216);
  v69 = *(float64x2_t *)(a1 + 200);
  v70 = *(float64x2_t *)(a1 + 248);
  v71 = *(float64x2_t *)(a1 + 232);
  v72 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v65.f64[0]), v51, v65, 1), v53, v64.f64[0]), v54, v64, 1);
  v73 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, v65.f64[0]), v59, v65, 1), v55, v64.f64[0]), v57, v64, 1);
  v74 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v67.f64[0]), v51, v67, 1), v53, v66.f64[0]), v54, v66, 1);
  v75 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, v67.f64[0]), v59, v67, 1), v55, v66.f64[0]), v57, v66, 1);
  v76 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v69.f64[0]), v51, v69, 1), v53, v68.f64[0]), v54, v68, 1);
  v77 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, v69.f64[0]), v59, v69, 1), v55, v68.f64[0]), v57, v68, 1);
  v78 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v71.f64[0]), v51, v71, 1), v53, v70.f64[0]), v54, v70, 1);
  v79 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, v71.f64[0]), v59, v71, 1), v55, v70.f64[0]), v57, v70, 1);
  v81 = v10[1];
  v80 = v10[2];
  v83 = v10[3];
  v82 = v10[4];
  v85 = v10[5];
  v84 = v10[6];
  v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, v81.f64[0]), v74, v81, 1), v76, v80.f64[0]), v78, v80, 1);
  v59.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v73, v81.f64[0]), v75, v81, 1), v77, v80.f64[0]), v79, v80, 1).f64[0];
  v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, v83.f64[0]), v74, v83, 1), v76, v82.f64[0]), v78, v82, 1);
  v81.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v73, v83.f64[0]), v75, v83, 1), v77, v82.f64[0]), v79, v82, 1).f64[0];
  v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, v85.f64[0]), v74, v85, 1), v76, v84.f64[0]), v78, v84, 1);
  v73.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v73, v85.f64[0]), v75, v85, 1), v77, v84.f64[0]), v79, v84, 1).f64[0];
  *(float64x2_t *)(a3 + 96) = vnegq_f64(v88);
  *(double *)(a3 + 112) = -v73.f64[0];
  *(float64x2_t *)(a3 + 192) = v87;
  *(float64_t *)(a3 + 208) = v81.f64[0];
  *(float64x2_t *)(a3 + 24) = v88;
  *(float64_t *)(a3 + 40) = v73.f64[0];
  *(float64x2_t *)(a3 + 216) = vnegq_f64(v86);
  *(double *)(a3 + 232) = -v59.f64[0];
  *(float64x2_t *)(a3 + 48) = vnegq_f64(v87);
  *(double *)(a3 + 64) = -v81.f64[0];
  *(float64x2_t *)(a3 + 144) = v86;
  *(float64_t *)(a3 + 160) = v59.f64[0];
  result = *(void **)(a1 + 512);
  if (result)
  {
    (*(void (**)(void *, __int128 *))(*(_QWORD *)result + 24))(result, v34);
    v90 = *(float64x2_t **)(a1 + 512);
    v91 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v90->f64[0] + 16))(v90);
    result = sub_239C82DA4(*(unsigned __int8 *)(*(_QWORD *)(a1 + 392) + 4));
    if (*(_BYTE *)(*(_QWORD *)(a1 + 400) + 4))
    {
      v92 = (float64x2_t *)(a3 + 576);
      switch(v91)
      {
        case 0:
          if (a3 + 672 > (unint64_t)&v90[1] && &v90[73] > v92)
          {
            MEMORY[0x24BDAC7A8](result);
            result = memcpy(v162, v93, sizeof(v162));
          }
          result = (void *)MEMORY[0x24BDAC7A8](result);
          v94 = v162;
          v95 = *(float64x2_t *)(a3 + 592);
          v162[-6] = *v92;
          v162[-5] = v95;
          v96 = *(float64x2_t *)(a3 + 624);
          v162[-4] = *(float64x2_t *)(a3 + 608);
          v162[-3] = v96;
          v97 = *(float64x2_t *)(a3 + 656);
          v162[-2] = *(float64x2_t *)(a3 + 640);
          v162[-1] = v97;
          v99 = v162[-6];
          v101 = v99;
          v100 = v162[-5];
          v102 = v100;
          v103 = v162[-4];
          v104 = v103;
          v105 = v162[-3];
          v106 = v105;
          v107 = v162[-2];
          v109 = v107;
          v108 = v162[-1];
          v110 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v98[1], v99.f64[0]), v98[7], v99, 1), v98[13], v100.f64[0]), v98[19], v100, 1), v98[25], v103.f64[0]), v98[31], v103,
                               1),
                             v98[37],
                             v105.f64[0]),
                           v98[43],
                           v105,
                           1),
                         v98[49],
                         v107.f64[0]),
                       v98[55],
                       v107,
                       1),
                     v98[61],
                     v108.f64[0]),
                   v98[67],
                   v108,
                   1);
          *(float64x2_t *)(a3 + 576) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v98, v99.f64[0]), v98[6], v99, 1), v98[12], v100.f64[0]), v98[18], v100, 1),
                                                       v98[24],
                                                       v103.f64[0]),
                                                     v98[30],
                                                     v103,
                                                     1),
                                                   v98[36],
                                                   v105.f64[0]),
                                                 v98[42],
                                                 v105,
                                                 1),
                                               v98[48],
                                               v107.f64[0]),
                                             v98[54],
                                             v107,
                                             1),
                                           v98[60],
                                           v108.f64[0]),
                                         v98[66],
                                         v108,
                                         1);
          *(float64x2_t *)(a3 + 592) = v110;
          v111 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v98[3], v99.f64[0]), v98[9], v99, 1), v98[15], v100.f64[0]), v98[21], v100, 1), v98[27], v103.f64[0]), v98[33], v103,
                               1),
                             v98[39],
                             v105.f64[0]),
                           v98[45],
                           v105,
                           1),
                         v98[51],
                         v107.f64[0]),
                       v98[57],
                       v107,
                       1),
                     v98[63],
                     v108.f64[0]),
                   v98[69],
                   v108,
                   1);
          *(float64x2_t *)(a3 + 608) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v98[2], v99.f64[0]), v98[8], v99, 1), v98[14], v100.f64[0]), v98[20], v100, 1),
                                                       v98[26],
                                                       v103.f64[0]),
                                                     v98[32],
                                                     v103,
                                                     1),
                                                   v98[38],
                                                   v105.f64[0]),
                                                 v98[44],
                                                 v105,
                                                 1),
                                               v98[50],
                                               v107.f64[0]),
                                             v98[56],
                                             v107,
                                             1),
                                           v98[62],
                                           v108.f64[0]),
                                         v98[68],
                                         v108,
                                         1);
          *(float64x2_t *)(a3 + 624) = v111;
          v112 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v98[4], v101.f64[0]), v98[10], v101, 1), v98[16], v102.f64[0]), v98[22], v102, 1), v98[28], v104.f64[0]), v98[34], v104, 1), v98[40], v106.f64[0]), v98[46],
                   v106,
                   1);
          v113 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v98[5], v101.f64[0]), v98[11], v101, 1), v98[17], v102.f64[0]), v98[23], v102, 1), v98[29], v104.f64[0]), v98[35], v104, 1), v98[41], v106.f64[0]), v98[47],
                   v106,
                   1);
          v115 = v98[52];
          v114 = v98[53];
          v117 = v98[58];
          v116 = v98[59];
          v118 = v98[65];
          v119 = v98[64];
          v120 = v98[71];
          v121 = v98[70];
          goto LABEL_11;
        case 1:
          v123 = *(float64x2_t *)((char *)v7 + 232);
          v122 = (float64x2_t *)((char *)v7 + 232);
          v124 = vmulq_f64(*(float64x2_t *)(a3 + 656), v90[6]);
          v125 = vmulq_f64(v122[3], v90[5]);
          v126 = vmulq_f64(v122[2], v90[4]);
          v127 = vmulq_f64(*(float64x2_t *)(a3 + 576), v90[1]);
          v128 = vmulq_f64(v122[1], v90[3]);
          *v122 = vmulq_f64(v123, v90[2]);
          v122[1] = v128;
          v122[-1] = v127;
          --v122;
          v122[3] = v126;
          v122[4] = v125;
          v122[5] = v124;
          break;
        case 2:
          v129 = v90[1].f64[0];
          v130 = vmulq_n_f64(*(float64x2_t *)(a3 + 656), v129);
          v131 = vmulq_n_f64(*(float64x2_t *)(a3 + 640), v129);
          v132 = vmulq_n_f64(*(float64x2_t *)(a3 + 624), v129);
          v133 = vmulq_n_f64(*(float64x2_t *)(a3 + 608), v129);
          v134 = vmulq_n_f64(*(float64x2_t *)(a3 + 592), v129);
          *v92 = vmulq_n_f64(*v92, v129);
          *(float64x2_t *)(a3 + 592) = v134;
          *(float64x2_t *)(a3 + 608) = v133;
          *(float64x2_t *)(a3 + 624) = v132;
          *(float64x2_t *)(a3 + 640) = v131;
          *(float64x2_t *)(a3 + 656) = v130;
          break;
        case 4:
          v135 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v90->f64[0] + 56))(v171, v90);
          result = (void *)MEMORY[0x24BDAC7A8](v135);
          v94 = &v163;
          v136 = *(float64x2_t *)(a3 + 592);
          v162[66] = *v92;
          v162[67] = v136;
          v137 = *(float64x2_t *)(a3 + 624);
          v162[68] = *(float64x2_t *)(a3 + 608);
          v162[69] = v137;
          v138 = *(float64x2_t *)(a3 + 656);
          v162[70] = *(float64x2_t *)(a3 + 640);
          v162[71] = v138;
          v139 = v162[66];
          v140 = v162[67];
          v141 = v162[68];
          v142 = v162[69];
          v109 = v162[70];
          v143 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171[1], v162[66].f64[0]), v171[7], v162[66], 1), v171[13], v162[67].f64[0]), v171[19], v162[67], 1), v171[25], v162[68].f64[0]), v171[31], v162[68],
                               1),
                             v171[37],
                             v162[69].f64[0]),
                           v171[43],
                           v162[69],
                           1),
                         v171[49],
                         v162[70].f64[0]),
                       v171[55],
                       v162[70],
                       1),
                     v171[61],
                     v138.f64[0]),
                   v171[67],
                   v138,
                   1);
          *(float64x2_t *)(a3 + 576) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171[0], v162[66].f64[0]), v171[6], v162[66], 1), v171[12], v162[67].f64[0]), v171[18], v162[67], 1),
                                                       v171[24],
                                                       v162[68].f64[0]),
                                                     v171[30],
                                                     v162[68],
                                                     1),
                                                   v171[36],
                                                   v162[69].f64[0]),
                                                 v171[42],
                                                 v162[69],
                                                 1),
                                               v171[48],
                                               v162[70].f64[0]),
                                             v171[54],
                                             v162[70],
                                             1),
                                           v171[60],
                                           v138.f64[0]),
                                         v171[66],
                                         v138,
                                         1);
          *(float64x2_t *)(a3 + 592) = v143;
          v144 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171[3], v139.f64[0]), v171[9], v139, 1), v171[15], v140.f64[0]), v171[21], v140, 1), v171[27], v141.f64[0]), v171[33], v141,
                               1),
                             v171[39],
                             v142.f64[0]),
                           v171[45],
                           v142,
                           1),
                         v171[51],
                         v109.f64[0]),
                       v171[57],
                       v109,
                       1),
                     v171[63],
                     v138.f64[0]),
                   v171[69],
                   v138,
                   1);
          *(float64x2_t *)(a3 + 608) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171[2], v139.f64[0]), v171[8], v139, 1), v171[14], v140.f64[0]), v171[20], v140, 1),
                                                       v171[26],
                                                       v141.f64[0]),
                                                     v171[32],
                                                     v141,
                                                     1),
                                                   v171[38],
                                                   v142.f64[0]),
                                                 v171[44],
                                                 v142,
                                                 1),
                                               v171[50],
                                               v109.f64[0]),
                                             v171[56],
                                             v109,
                                             1),
                                           v171[62],
                                           v138.f64[0]),
                                         v171[68],
                                         v138,
                                         1);
          *(float64x2_t *)(a3 + 624) = v144;
          v112 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171[4], v139.f64[0]), v171[10], v139, 1), v171[16], v140.f64[0]), v171[22], v140, 1), v171[28], v141.f64[0]), v171[34], v141, 1), v171[40], v142.f64[0]), v171[46],
                   v142,
                   1);
          v113 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171[5], v139.f64[0]), v171[11], v139, 1), v171[17], v140.f64[0]), v171[23], v140, 1), v171[29], v141.f64[0]), v171[35], v141, 1), v171[41], v142.f64[0]), v171[47],
                   v142,
                   1);
          v114 = v171[53];
          v115 = v171[52];
          v116 = v171[59];
          v117 = v171[58];
          v118 = v171[65];
          v119 = v171[64];
          v120 = v171[71];
          v121 = v171[70];
LABEL_11:
          v145 = v94[-1];
          *(float64x2_t *)(a3 + 640) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v112, v115, v109.f64[0]), v117, v109, 1), v119, v145.f64[0]), v121, v145, 1);
          *(float64x2_t *)(a3 + 656) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v113, v114, v109.f64[0]), v116, v109, 1), v118, v145.f64[0]), v120, v145, 1);
          break;
        default:
          break;
      }
    }
  }
  _Q5 = *v34;
  _D7 = *((_QWORD *)v34 + 1);
  __asm { FMLA            D6, D7, V5.D[1] }
  *(_QWORD *)&_Q5 = *((_QWORD *)v34 + 3);
  __asm { FMLA            D6, D5, V4.D[1] }
  _D4 = *((_QWORD *)v34 + 5);
  __asm { FMLA            D6, D4, V3.D[1] }
  _D3 = *((_QWORD *)v34 + 7);
  __asm { FMLA            D6, D3, V2.D[1] }
  _D2 = *((_QWORD *)v34 + 9);
  __asm { FMLA            D6, D2, V1.D[1] }
  _D1 = *((_QWORD *)v34 + 11);
  __asm { FMLA            D6, D1, V0.D[1] }
  *(double *)(a1 + 504) = *(double *)(a2 + 8) * _D6;
  return result;
}

uint64_t sub_239C82854(unint64_t *a1, char **a2, int a3, char *a4)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;

  v8 = a1[10];
  v9 = a1 + 2;
  if (v8)
  {
    v11 = a1[6];
    v10 = a1[7];
    v12 = ((v10 - v11) << 6) - 1;
    v13 = a1[9];
    if (v10 == v11)
      v12 = 0;
    v14 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v11 + (((v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v12 - (v8 + v13) + 1 >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      a1[7] -= 8;
    }
  }
  else
  {
    v15 = (void *)a1[3];
    *(_QWORD *)&v18 = 0;
    sub_239C2323C(a1 + 2, v15, 1uLL, (uint64_t *)&v18);
    v14 = a1[3] - 8;
  }
  v16 = (v14 - *v9) >> 3;
  LODWORD(v18) = a3;
  *((_QWORD *)&v18 + 1) = v16;
  sub_239C22598(a2, a4, &v18);
  return v14;
}

uint64_t sub_239C82958(unint64_t *a1, char **a2, int a3, char *a4)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;

  v8 = a1[10];
  v9 = a1 + 2;
  if (v8)
  {
    v11 = a1[6];
    v10 = a1[7];
    v12 = ((v10 - v11) << 6) - 1;
    v13 = a1[9];
    if (v10 == v11)
      v12 = 0;
    v14 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v11 + (((v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v12 - (v8 + v13) + 1 >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      a1[7] -= 8;
    }
  }
  else
  {
    v15 = (void *)a1[3];
    *(_QWORD *)&v18 = 0;
    sub_239C2323C(a1 + 2, v15, 0x24uLL, (uint64_t *)&v18);
    v14 = a1[3] - 288;
  }
  v16 = (v14 - *v9) >> 3;
  LODWORD(v18) = a3;
  *((_QWORD *)&v18 + 1) = v16;
  sub_239C22598(a2, a4, &v18);
  return v14;
}

uint64_t sub_239C82A5C(unint64_t *a1, char **a2, int a3, char *a4)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;

  v8 = a1[10];
  v9 = a1 + 2;
  if (v8)
  {
    v11 = a1[6];
    v10 = a1[7];
    v12 = ((v10 - v11) << 6) - 1;
    v13 = a1[9];
    if (v10 == v11)
      v12 = 0;
    v14 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v11 + (((v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v12 - (v8 + v13) + 1 >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      a1[7] -= 8;
    }
  }
  else
  {
    v15 = (void *)a1[3];
    *(_QWORD *)&v18 = 0;
    sub_239C2323C(a1 + 2, v15, 6uLL, (uint64_t *)&v18);
    v14 = a1[3] - 48;
  }
  v16 = (v14 - *v9) >> 3;
  LODWORD(v18) = a3;
  *((_QWORD *)&v18 + 1) = v16;
  sub_239C22598(a2, a4, &v18);
  return v14;
}

double sub_239C82B60(_QWORD *a1, _QWORD *a2)
{
  double result;

  *a1 = *a2;
  a1[1] = *a2;
  a1[2] = *a2;
  a1[3] = *a2;
  a1[4] = *a2;
  a1[5] = *a2;
  a1[6] = *a2;
  a1[7] = *a2;
  a1[8] = *a2;
  a1[9] = *a2;
  a1[10] = *a2;
  a1[11] = *a2;
  a1[12] = *a2;
  a1[13] = *a2;
  a1[14] = *a2;
  a1[15] = *a2;
  a1[16] = *a2;
  a1[17] = *a2;
  a1[18] = *a2;
  a1[19] = *a2;
  a1[20] = *a2;
  a1[21] = *a2;
  a1[22] = *a2;
  a1[23] = *a2;
  a1[24] = *a2;
  a1[25] = *a2;
  a1[26] = *a2;
  a1[27] = *a2;
  a1[28] = *a2;
  a1[29] = *a2;
  a1[30] = *a2;
  a1[31] = *a2;
  a1[32] = *a2;
  a1[33] = *a2;
  a1[34] = *a2;
  a1[35] = *a2;
  a1[36] = *a2;
  a1[37] = *a2;
  a1[38] = *a2;
  a1[39] = *a2;
  a1[40] = *a2;
  a1[41] = *a2;
  a1[42] = *a2;
  a1[43] = *a2;
  a1[44] = *a2;
  a1[45] = *a2;
  a1[46] = *a2;
  a1[47] = *a2;
  a1[48] = *a2;
  a1[49] = *a2;
  a1[50] = *a2;
  a1[51] = *a2;
  a1[52] = *a2;
  a1[53] = *a2;
  a1[54] = *a2;
  a1[55] = *a2;
  a1[56] = *a2;
  a1[57] = *a2;
  a1[58] = *a2;
  a1[59] = *a2;
  a1[60] = *a2;
  a1[61] = *a2;
  a1[62] = *a2;
  a1[63] = *a2;
  a1[64] = *a2;
  a1[65] = *a2;
  a1[66] = *a2;
  a1[67] = *a2;
  a1[68] = *a2;
  a1[69] = *a2;
  a1[70] = *a2;
  result = *(double *)a2;
  a1[71] = *a2;
  return result;
}

int8x16_t *sub_239C82DA4(uint64_t a1)
{
  int8x16_t *result;
  unint64_t v2;
  float64x2_t *v3;
  int v4;
  _OWORD *v5;
  float64x2_t *v6;
  float64x2_t *v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  uint64_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int8x16_t v413;
  int8x16_t v414;
  int8x16_t v415;
  int8x16_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  unint64_t v423;
  int8x16_t v424;
  unint64_t v425;
  int8x16_t v426;
  int8x16_t v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  int8x16_t v433;
  int8x16_t v434;
  unint64_t v435;
  float64x2_t *v436;
  int8x16_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  int8x16_t v441;
  int8x16_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  int8x16_t v446;
  int8x16_t v447;
  unint64_t v448;
  unint64_t v449;
  int8x16_t v450;
  int8x16_t v451;
  unint64_t v452;
  unint64_t v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  int8x16_t v473;
  int8x16_t v474;
  int8x16_t v475;
  int8x16_t v476;
  int8x16_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int8x16_t v480;
  int8x16_t v481;
  int8x16_t v482;
  int8x16_t v483;
  int8x16_t v484;
  int8x16_t v485;
  int8x16_t v486;
  int8x16_t v487;
  int8x16_t v488;
  int8x16_t v489;
  int8x16_t v490;
  int8x16_t v491;
  int8x16_t v492;
  int8x16_t v493;
  int8x16_t v494;
  int8x16_t v495;
  int8x16_t v496;
  int8x16_t v497;
  int8x16_t v498;
  int8x16_t v499;
  int8x16_t v500;
  int8x16_t v501;
  int8x16_t v502;
  int8x16_t v503;
  int8x16_t v504;
  int8x16_t v505;
  int8x16_t v506;
  int8x16_t v507;
  int8x16_t v508;
  int8x16_t v509;
  int8x16_t v510;
  int8x16_t v511;
  int8x16_t v512;
  int8x16_t v513;
  int8x16_t v514;
  double v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  _QWORD *v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590[72];
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  int8x16_t v594;
  int8x16_t v595;
  int8x16_t v596;
  int8x16_t v597;
  int8x16_t v598;
  float64x2_t v599;
  int8x16_t v600;
  float64x2_t v601;
  int8x16_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  int8x16_t v607;
  int8x16_t v608;
  int8x16_t v609;
  int8x16_t v610;
  int8x16_t v611;
  int8x16_t v612;
  int8x16_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  int8x16_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  int8x16_t v638;
  int8x16_t v639;
  int8x16_t v640;
  int8x16_t v641;
  int8x16_t v642;
  int8x16_t v643;
  int8x16_t v644;
  int8x16_t v645;
  int8x16_t v646;
  int8x16_t v647;
  int8x16_t v648;
  int8x16_t v649;
  int8x16_t v650;
  int8x16_t v651;
  int8x16_t v652;
  int8x16_t v653;
  int8x16_t v654;
  int8x16_t v655;
  int8x16_t v656;
  int8x16_t v657;
  int8x16_t v658;
  int8x16_t v659;
  int8x16_t v660;
  int8x16_t v661;
  int8x16_t v662;
  int8x16_t v663;
  int8x16_t v664;
  int8x16_t v665;
  int8x16_t v666;
  int8x16_t v667;
  int8x16_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  int8x16_t v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  int8x16_t v702;
  int8x16_t v703;
  int8x16_t v704;
  int8x16_t v705;
  int8x16_t v706;
  int8x16_t v707;
  int8x16_t v708;
  int8x16_t v709;
  int8x16_t v710;
  int8x16_t v711;
  int8x16_t v712;
  int8x16_t v713;
  int8x16_t v714;
  int8x16_t v715;
  int8x16_t v716;
  int8x16_t v717;
  int8x16_t v718;
  int8x16_t v719;
  int8x16_t v720;
  int8x16_t v721;
  int8x16_t v722;
  int8x16_t v723;
  int8x16_t v724;
  int8x16_t v725;
  int8x16_t v726;
  int8x16_t v727;
  int8x16_t v728;
  int8x16_t v729;
  int8x16_t v730;
  int8x16_t v731;
  int8x16_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  int8x16_t v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  int8x16_t v766;
  int8x16_t v767;
  int8x16_t v768;
  int8x16_t v769;
  int8x16_t v770;
  int8x16_t v771;
  int8x16_t v772;
  int8x16_t v773;
  int8x16_t v774;
  int8x16_t v775;
  int8x16_t v776;
  int8x16_t v777;
  int8x16_t v778;
  int8x16_t v779;
  int8x16_t v780;
  int8x16_t v781;
  int8x16_t v782;
  int8x16_t v783;
  int8x16_t v784;
  int8x16_t v785;
  int8x16_t v786;
  int8x16_t v787;
  int8x16_t v788;
  int8x16_t v789;
  int8x16_t v790;
  int8x16_t v791;
  int8x16_t v792;
  int8x16_t v793;
  int8x16_t v794;
  int8x16_t v795;
  int8x16_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  int8x16_t v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808;
  __int128 v809;
  __int128 v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  int8x16_t v830;
  int8x16_t v831;
  int8x16_t v832;
  int8x16_t v833;
  int8x16_t v834;
  int8x16_t v835;
  int8x16_t v836;
  int8x16_t v837;
  int8x16_t v838;
  int8x16_t v839;
  int8x16_t v840;
  int8x16_t v841;
  int8x16_t v842;
  int8x16_t v843;
  int8x16_t v844;
  int8x16_t v845;
  int8x16_t v846;
  int8x16_t v847;
  int8x16_t v848;
  int8x16_t v849;
  int8x16_t v850;
  int8x16_t v851;
  int8x16_t v852;
  int8x16_t v853;
  int8x16_t v854;
  int8x16_t v855;
  int8x16_t v856;
  int8x16_t v857;
  int8x16_t v858;
  float64x2_t v859;
  int8x16_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  int8x16_t v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  __int128 v882;
  __int128 v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  int8x16_t v894;
  int8x16_t v895;
  int8x16_t v896;
  int8x16_t v897;
  int8x16_t v898;
  int8x16_t v899;
  int8x16_t v900;
  int8x16_t v901;
  int8x16_t v902;
  int8x16_t v903;
  int8x16_t v904;
  int8x16_t v905;
  int8x16_t v906;
  int8x16_t v907;
  int8x16_t v908;
  int8x16_t v909;
  int8x16_t v910;
  int8x16_t v911;
  int8x16_t v912;
  int8x16_t v913;
  int8x16_t v914;
  int8x16_t v915;
  int8x16_t v916;
  int8x16_t v917;
  int8x16_t v918;
  int8x16_t v919;
  int8x16_t v920;
  int8x16_t v921;
  int8x16_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  __int128 v939;
  __int128 v940;
  __int128 v941;
  __int128 v942;
  __int128 v943;
  __int128 v944;
  __int128 v945;
  __int128 v946;
  __int128 v947;
  __int128 v948;
  __int128 v949;
  __int128 v950;
  __int128 v951;
  __int128 v952;
  __int128 v953;
  __int128 v954;
  __int128 v955;
  __int128 v956;
  __int128 v957;
  int8x16_t v958;
  int8x16_t v959;
  int8x16_t v960;
  int8x16_t v961;
  int8x16_t v962;
  int8x16_t v963;
  int8x16_t v964;
  int8x16_t v965;
  int8x16_t v966;
  int8x16_t v967;
  int8x16_t v968;
  int8x16_t v969;
  int8x16_t v970;
  int8x16_t v971;
  int8x16_t v972;
  int8x16_t v973;
  int8x16_t v974;
  int8x16_t v975;
  int8x16_t v976;
  int8x16_t v977;
  int8x16_t v978;
  int8x16_t v979;
  int8x16_t v980;
  int8x16_t v981;
  int8x16_t v982;
  int8x16_t v983;
  int8x16_t v984;
  int8x16_t v985;
  int8x16_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  __int128 v994;
  __int128 v995;
  __int128 v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  __int128 v1001;
  __int128 v1002;
  __int128 v1003;
  __int128 v1004;
  __int128 v1005;
  __int128 v1006;
  __int128 v1007;
  __int128 v1008;
  __int128 v1009;
  __int128 v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  __int128 v1016;
  __int128 v1017;
  __int128 v1018;
  __int128 v1019;
  __int128 v1020;
  __int128 v1021;
  int8x16_t v1022;
  int8x16_t v1023;
  int8x16_t v1024;
  int8x16_t v1025;
  int8x16_t v1026;
  int8x16_t v1027;
  int8x16_t v1028;
  int8x16_t v1029;
  int8x16_t v1030;
  int8x16_t v1031;
  int8x16_t v1032;
  int8x16_t v1033;
  int8x16_t v1034;
  int8x16_t v1035;
  int8x16_t v1036;
  int8x16_t v1037;
  int8x16_t v1038;
  int8x16_t v1039;
  int8x16_t v1040;
  int8x16_t v1041;
  int8x16_t v1042;
  int8x16_t v1043;
  int8x16_t v1044;
  int8x16_t v1045;
  int8x16_t v1046;
  int8x16_t v1047;
  int8x16_t v1048;
  int8x16_t v1049;
  int8x16_t v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  float64x2_t v1055;
  float64x2_t v1056;
  float64x2_t v1057;
  __int128 v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  __int128 v1075;
  __int128 v1076;
  __int128 v1077;
  __int128 v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  int8x16_t v1086;
  int8x16_t v1087;
  int8x16_t v1088;
  int8x16_t v1089;
  int8x16_t v1090;
  int8x16_t v1091;
  int8x16_t v1092;
  int8x16_t v1093;
  int8x16_t v1094;
  int8x16_t v1095;
  int8x16_t v1096;
  int8x16_t v1097;
  int8x16_t v1098;
  int8x16_t v1099;
  int8x16_t v1100;
  int8x16_t v1101;
  int8x16_t v1102;
  int8x16_t v1103;
  int8x16_t v1104;
  int8x16_t v1105;
  int8x16_t v1106;
  int8x16_t v1107;
  int8x16_t v1108;
  int8x16_t v1109;
  int8x16_t v1110;
  int8x16_t v1111;
  int8x16_t v1112;
  int8x16_t v1113;
  int8x16_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  __int128 v1138;
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  int8x16_t v1150;
  int8x16_t v1151;
  int8x16_t v1152;
  int8x16_t v1153;
  int8x16_t v1154;
  int8x16_t v1155;
  int8x16_t v1156;
  int8x16_t v1157;
  int8x16_t v1158;
  int8x16_t v1159;
  int8x16_t v1160;
  int8x16_t v1161;
  int8x16_t v1162;
  __int128 v1163;
  int8x16_t v1164;
  int8x16_t v1165;
  __int128 v1166;
  int8x16_t v1167;
  int8x16_t v1168;
  int8x16_t v1169;
  __int128 v1170;
  __int128 v1171;
  int8x16_t v1172;
  __int128 v1173;
  int8x16_t v1174;
  int8x16_t v1175;
  int8x16_t v1176;
  __int128 v1177;
  __int128 v1178;
  float64x2_t v1179;
  float64x2_t v1180;
  float64x2_t v1181;
  float64x2_t v1182;
  float64x2_t v1183;
  float64x2_t v1184;
  float64x2_t v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  __int128 v1189;
  __int128 v1190;
  __int128 v1191;
  __int128 v1192;
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  __int128 v1200;
  __int128 v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  __int128 v1205;
  __int128 v1206;
  __int128 v1207;
  __int128 v1208;
  __int128 v1209;
  __int128 v1210;
  __int128 v1211;
  __int128 v1212;
  __int128 v1213;
  int8x16_t v1214;
  int8x16_t v1215;
  int8x16_t v1216;
  int8x16_t v1217;
  int8x16_t v1218;
  int8x16_t v1219;
  int8x16_t v1220;
  int8x16_t v1221;
  int8x16_t v1222;
  int8x16_t v1223;
  int8x16_t v1224;
  int8x16_t v1225;
  __int128 v1226;
  __int128 v1227;
  int8x16_t v1228;
  int8x16_t v1229;
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  __int128 v1233;
  __int128 v1234;
  __int128 v1235;
  __int128 v1236;
  __int128 v1237;
  __int128 v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  float64x2_t v1245;
  float64x2_t v1246;
  float64x2_t v1247;
  float64x2_t v1248;
  float64x2_t v1249;
  __int128 v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  __int128 v1254;
  __int128 v1255;
  __int128 v1256;
  __int128 v1257;
  __int128 v1258;
  __int128 v1259;
  __int128 v1260;
  __int128 v1261;
  __int128 v1262;
  __int128 v1263;
  __int128 v1264;
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  __int128 v1272;
  __int128 v1273;
  __int128 v1274;
  __int128 v1275;
  __int128 v1276;
  __int128 v1277;
  int8x16_t v1278;
  int8x16_t v1279;
  int8x16_t v1280;
  int8x16_t v1281;
  int8x16_t v1282;
  int8x16_t v1283;
  int8x16_t v1284;
  int8x16_t v1285;
  int8x16_t v1286;
  int8x16_t v1287;
  int8x16_t v1288;
  int8x16_t v1289;
  __int128 v1290;
  __int128 v1291;
  int8x16_t v1292;
  int8x16_t v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  float64x2_t v1307;
  float64x2_t v1308;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  __int128 v1317;
  __int128 v1318;
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  __int128 v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  __int128 v1326;
  __int128 v1327;
  __int128 v1328;
  __int128 v1329;
  __int128 v1330;
  __int128 v1331;
  __int128 v1332;
  __int128 v1333;
  __int128 v1334;
  __int128 v1335;
  __int128 v1336;
  __int128 v1337;
  __int128 v1338;
  __int128 v1339;
  __int128 v1340;
  __int128 v1341;
  int8x16_t v1342;
  int8x16_t v1343;
  int8x16_t v1344;
  int8x16_t v1345;
  int8x16_t v1346;
  int8x16_t v1347;
  int8x16_t v1348;
  int8x16_t v1349;
  int8x16_t v1350;
  int8x16_t v1351;
  int8x16_t v1352;
  int8x16_t v1353;
  __int128 v1354;
  __int128 v1355;
  int8x16_t v1356;
  int8x16_t v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  __int128 v1362;
  __int128 v1363;
  __int128 v1364;
  __int128 v1365;
  __int128 v1366;
  __int128 v1367;
  __int128 v1368;
  __int128 v1369;
  __int128 v1370;
  float64x2_t v1371;
  float64x2_t v1372;
  float64x2_t v1373;
  float64x2_t v1374;
  float64x2_t v1375;
  float64x2_t v1376;
  float64x2_t v1377;
  __int128 v1378;
  __int128 v1379;
  __int128 v1380;
  __int128 v1381;
  __int128 v1382;
  __int128 v1383;
  __int128 v1384;
  __int128 v1385;
  __int128 v1386;
  __int128 v1387;
  __int128 v1388;
  __int128 v1389;
  __int128 v1390;
  __int128 v1391;
  __int128 v1392;
  __int128 v1393;
  __int128 v1394;
  __int128 v1395;
  __int128 v1396;
  __int128 v1397;
  __int128 v1398;
  __int128 v1399;
  __int128 v1400;
  __int128 v1401;
  __int128 v1402;
  __int128 v1403;
  __int128 v1404;
  __int128 v1405;
  float64x2_t v1406;
  float64x2_t v1407;
  float64x2_t v1408;
  float64x2_t v1409;
  float64x2_t v1410;
  float64x2_t v1411;
  float64x2_t v1412;
  float64x2_t v1413;
  float64x2_t v1414;
  float64x2_t v1415;
  float64x2_t v1416;
  float64x2_t v1417;
  float64x2_t v1418;
  float64x2_t v1419;
  float64x2_t v1420;
  float64x2_t v1421;
  float64x2_t v1422;
  float64x2_t v1423;
  float64x2_t v1424;
  float64x2_t v1425;
  float64x2_t v1426;
  float64x2_t v1427;
  float64x2_t v1428;
  float64x2_t v1429;
  float64x2_t v1430;
  float64x2_t v1431;
  float64x2_t v1432;
  float64x2_t v1433;
  float64x2_t v1434;
  float64x2_t v1435;
  float64x2_t v1436;
  float64x2_t v1437;
  float64x2_t v1438;
  float64x2_t v1439;
  float64x2_t v1440;
  float64x2_t v1441;
  float64x2_t v1442;
  float64x2_t v1443;
  float64x2_t v1444;
  float64x2_t v1445;
  float64x2_t v1446;
  float64x2_t v1447;
  float64x2_t v1448;
  float64x2_t v1449;
  float64x2_t v1450;
  float64x2_t v1451;
  float64x2_t v1452;
  float64x2_t v1453;
  float64x2_t v1454;
  float64x2_t v1455;
  float64x2_t v1456;
  float64x2_t v1457;
  float64x2_t v1458;
  float64x2_t v1459;
  float64x2_t v1460;
  float64x2_t v1461;
  float64x2_t v1462;
  float64x2_t v1463;
  float64x2_t v1464;
  float64x2_t v1465;
  float64x2_t v1466;
  float64x2_t v1467;
  float64x2_t v1468;
  float64x2_t v1469;
  float64x2_t v1470;
  float64x2_t v1471;
  float64x2_t v1472;
  float64x2_t v1473;
  float64x2_t v1474;
  float64x2_t v1475;
  float64x2_t v1476;
  float64x2_t v1477;
  uint64_t v1478;

  result = (int8x16_t *)MEMORY[0x24BDAC7A8](a1);
  v1478 = *MEMORY[0x24BDAC8D0];
  if ((_BYTE)result)
  {
    v5 = (_OWORD *)v2;
    switch(v4)
    {
      case 0:
        v6 = v3 + 1;
        if (v2 + 576 > (unint64_t)&v3[1] && (unint64_t)&v3[73] > v2)
        {
          MEMORY[0x24BDAC7A8](result);
          result = (int8x16_t *)memcpy(v590, v6, sizeof(v590));
          v6 = v590;
        }
        MEMORY[0x24BDAC7A8](result);
        v7 = &v590[-36];
        result = (int8x16_t *)memcpy(&v590[-36], v5, 0x240uLL);
        v9 = *v6;
        v8 = v6[1];
        v11 = v6[6];
        v10 = v6[7];
        v13 = v6[12];
        v12 = v6[13];
        v15 = v6[18];
        v14 = v6[19];
        v16 = v590[-35];
        v17 = v590[-36];
        v18 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v6, v7->f64[0]), v11, *v7, 1), v13, v16.f64[0]), v15, v16, 1);
        v19 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v8, v7->f64[0]), v10, *v7, 1), v12, v16.f64[0]), v14, v16, 1);
        v20 = v590[-30];
        v635 = v590[-31];
        v22 = v590[-30];
        v21 = v590[-29];
        v23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v9, v20.f64[0]), v11, v20, 1), v13, v21.f64[0]), v15, v21, 1);
        v24 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v8, v20.f64[0]), v10, v20, 1), v12, v21.f64[0]), v14, v21, 1);
        v25 = v590[-24];
        v636 = v590[-25];
        v26 = v590[-24];
        v27 = v590[-23];
        v28 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v9, v25.f64[0]), v11, v25, 1), v13, v27.f64[0]), v15, v27, 1);
        v29 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v8, v25.f64[0]), v10, v25, 1), v12, v27.f64[0]), v14, v27, 1);
        v30 = v590[-18];
        v637 = v590[-19];
        v31 = vmlaq_laneq_f64(vmulq_n_f64(v9, v30.f64[0]), v11, v30, 1);
        v33 = v590[-18];
        v32 = v590[-17];
        v34 = vmlaq_laneq_f64(vmlaq_n_f64(v31, v13, v32.f64[0]), v15, v32, 1);
        v35 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v8, v30.f64[0]), v10, v30, 1), v12, v32.f64[0]), v14, v32, 1);
        v37 = v6[24];
        v36 = v6[25];
        v38 = v6[30];
        v39 = v6[31];
        v41 = v6[36];
        v40 = v6[37];
        v43 = v6[42];
        v42 = v6[43];
        v44 = v590[-16];
        v46 = v590[-35];
        v45 = v590[-34];
        v48 = v45;
        v47 = v590[-33];
        v49 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v18, v37, v45.f64[0]), v38, v45, 1), v41, v47.f64[0]), v43, v47, 1);
        v50 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v19, v36, v45.f64[0]), v39, v45, 1), v40, v47.f64[0]), v42, v47, 1);
        v52 = v590[-29];
        v51 = v590[-28];
        v53 = v51;
        v54 = v590[-27];
        v55 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v23, v37, v51.f64[0]), v38, v51, 1), v41, v54.f64[0]), v43, v54, 1);
        v56 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v24, v36, v51.f64[0]), v39, v51, 1), v40, v54.f64[0]), v42, v54, 1);
        v58 = v590[-23];
        v57 = v590[-22];
        v59 = v57;
        v60 = v590[-21];
        v61 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v28, v37, v57.f64[0]), v38, v57, 1), v41, v60.f64[0]), v43, v60, 1);
        v62 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v29, v36, v57.f64[0]), v39, v57, 1), v40, v60.f64[0]), v42, v60, 1);
        v63 = vmlaq_laneq_f64(vmlaq_n_f64(v34, v37, v44.f64[0]), v38, v44, 1);
        v65 = v44;
        v64 = v590[-15];
        v66 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v41, v64.f64[0]), v43, v64, 1);
        v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v35, v36, v44.f64[0]), v39, v44, 1), v40, v64.f64[0]), v42, v64, 1);
        v69 = v6[48];
        v68 = v6[49];
        v71 = v6[54];
        v70 = v6[55];
        v73 = v590[-33];
        v72 = v590[-32];
        v74 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v69, v72.f64[0]), v71, v72, 1);
        v75 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v68, v72.f64[0]), v70, v72, 1);
        v77 = v590[-27];
        v76 = v590[-26];
        v78 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v69, v76.f64[0]), v71, v76, 1);
        v79 = vmlaq_laneq_f64(vmlaq_n_f64(v56, v68, v76.f64[0]), v70, v76, 1);
        v81 = v60;
        v80 = v590[-20];
        v82 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v69, v80.f64[0]), v71, v80, 1);
        v83 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v68, v80.f64[0]), v70, v80, 1);
        v85 = v590[-15];
        v84 = v590[-14];
        v86 = vmlaq_n_f64(v66, v69, v84.f64[0]);
        v87 = v6[60];
        v88 = v6[61];
        v89 = vmlaq_laneq_f64(v86, v71, v84, 1);
        v90 = v6[67];
        v91 = v6[66];
        v92 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v68, v84.f64[0]), v70, v84, 1);
        v94 = v590[-32];
        v93 = v590[-31];
        v95 = vmlaq_laneq_f64(vmlaq_n_f64(v74, v87, v93.f64[0]), v91, v93, 1);
        v96 = vmlaq_laneq_f64(vmlaq_n_f64(v75, v88, v93.f64[0]), v90, v93, 1);
        v97 = v590[-26];
        v98 = v590[-25];
        v99 = vmlaq_laneq_f64(vmlaq_n_f64(v78, v87, v98.f64[0]), v91, v98, 1);
        v100 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v88, v98.f64[0]), v90, v98, 1);
        v101 = v590[-20];
        v102 = v590[-19];
        v103 = vmlaq_laneq_f64(vmlaq_n_f64(v82, v87, v102.f64[0]), v91, v102, 1);
        v104 = vmlaq_laneq_f64(vmlaq_n_f64(v83, v88, v102.f64[0]), v90, v102, 1);
        v106 = v590[-14];
        v105 = v590[-13];
        *v5 = v95;
        v5[1] = v96;
        v5[6] = v99;
        v5[7] = v100;
        v5[12] = v103;
        v5[13] = v104;
        v5[18] = vmlaq_laneq_f64(vmlaq_n_f64(v89, v87, v105.f64[0]), v91, v105, 1);
        v5[19] = vmlaq_laneq_f64(vmlaq_n_f64(v92, v88, v105.f64[0]), v90, v105, 1);
        v108 = v6[2];
        v107 = v6[3];
        v110 = v6[8];
        v109 = v6[9];
        v111 = v590[-30];
        v112 = v590[-24];
        v113 = vmlaq_laneq_f64(vmulq_n_f64(v108, v7->f64[0]), v110, *v7, 1);
        v114 = vmlaq_laneq_f64(vmulq_n_f64(v107, v7->f64[0]), v109, *v7, 1);
        v115 = vmlaq_laneq_f64(vmulq_n_f64(v108, v111.f64[0]), v110, v111, 1);
        v116 = vmlaq_laneq_f64(vmulq_n_f64(v107, v111.f64[0]), v109, v111, 1);
        v117 = vmlaq_laneq_f64(vmulq_n_f64(v108, v112.f64[0]), v110, v112, 1);
        v118 = vmlaq_laneq_f64(vmulq_n_f64(v107, v112.f64[0]), v109, v112, 1);
        v119 = v590[-18];
        v120 = vmlaq_laneq_f64(vmulq_n_f64(v108, v119.f64[0]), v110, v119, 1);
        v121 = vmlaq_laneq_f64(vmulq_n_f64(v107, v119.f64[0]), v109, v119, 1);
        v122 = v6[14];
        v123 = v6[15];
        v124 = v590[-35];
        v125 = v6[20];
        v126 = v6[21];
        v127 = vmlaq_laneq_f64(vmlaq_n_f64(v113, v122, v124.f64[0]), v125, v124, 1);
        v128 = vmlaq_laneq_f64(vmlaq_n_f64(v114, v123, v124.f64[0]), v126, v124, 1);
        v129 = v590[-29];
        v130 = vmlaq_laneq_f64(vmlaq_n_f64(v115, v122, v129.f64[0]), v125, v129, 1);
        v131 = vmlaq_laneq_f64(vmlaq_n_f64(v116, v123, v129.f64[0]), v126, v129, 1);
        v132 = v590[-23];
        v133 = vmlaq_laneq_f64(vmlaq_n_f64(v117, v122, v132.f64[0]), v125, v132, 1);
        v134 = vmlaq_laneq_f64(vmlaq_n_f64(v118, v123, v132.f64[0]), v126, v132, 1);
        v135 = v590[-17];
        v136 = vmlaq_laneq_f64(vmlaq_n_f64(v120, v122, v135.f64[0]), v125, v135, 1);
        v137 = vmlaq_laneq_f64(vmlaq_n_f64(v121, v123, v135.f64[0]), v126, v135, 1);
        v138 = v6[26];
        v139 = v6[27];
        v140 = v590[-34];
        v141 = v6[32];
        v142 = v6[33];
        v143 = vmlaq_laneq_f64(vmlaq_n_f64(v127, v138, v140.f64[0]), v141, v140, 1);
        v144 = vmlaq_laneq_f64(vmlaq_n_f64(v128, v139, v140.f64[0]), v142, v140, 1);
        v145 = v590[-28];
        v146 = vmlaq_laneq_f64(vmlaq_n_f64(v130, v138, v145.f64[0]), v141, v145, 1);
        v147 = vmlaq_laneq_f64(vmlaq_n_f64(v131, v139, v145.f64[0]), v142, v145, 1);
        v148 = v590[-22];
        v149 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v138, v148.f64[0]), v141, v148, 1);
        v150 = vmlaq_laneq_f64(vmlaq_n_f64(v134, v139, v148.f64[0]), v142, v148, 1);
        v151 = v590[-16];
        v152 = vmlaq_laneq_f64(vmlaq_n_f64(v136, v138, v151.f64[0]), v141, v151, 1);
        v153 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v139, v151.f64[0]), v142, v151, 1);
        v154 = v6[38];
        v155 = v6[39];
        v156 = v590[-33];
        v157 = v6[44];
        v158 = v6[45];
        v159 = vmlaq_laneq_f64(vmlaq_n_f64(v143, v154, v156.f64[0]), v157, v156, 1);
        v160 = vmlaq_laneq_f64(vmlaq_n_f64(v144, v155, v156.f64[0]), v158, v156, 1);
        v161 = v590[-27];
        v162 = vmlaq_laneq_f64(vmlaq_n_f64(v146, v154, v161.f64[0]), v157, v161, 1);
        v163 = vmlaq_laneq_f64(vmlaq_n_f64(v147, v155, v161.f64[0]), v158, v161, 1);
        v164 = v590[-21];
        v165 = vmlaq_laneq_f64(vmlaq_n_f64(v149, v154, v164.f64[0]), v157, v164, 1);
        v166 = vmlaq_laneq_f64(vmlaq_n_f64(v150, v155, v164.f64[0]), v158, v164, 1);
        v167 = v590[-15];
        v168 = vmlaq_laneq_f64(vmlaq_n_f64(v152, v154, v167.f64[0]), v157, v167, 1);
        v169 = vmlaq_laneq_f64(vmlaq_n_f64(v153, v155, v167.f64[0]), v158, v167, 1);
        v170 = v6[50];
        v171 = v6[51];
        v172 = v590[-32];
        v173 = v6[56];
        v174 = v6[57];
        v175 = vmlaq_laneq_f64(vmlaq_n_f64(v159, v170, v172.f64[0]), v173, v172, 1);
        v176 = vmlaq_laneq_f64(vmlaq_n_f64(v160, v171, v172.f64[0]), v174, v172, 1);
        v177 = v590[-26];
        v178 = vmlaq_laneq_f64(vmlaq_n_f64(v162, v170, v177.f64[0]), v173, v177, 1);
        v179 = vmlaq_laneq_f64(vmlaq_n_f64(v163, v171, v177.f64[0]), v174, v177, 1);
        v180 = v590[-20];
        v181 = vmlaq_laneq_f64(vmlaq_n_f64(v165, v170, v180.f64[0]), v173, v180, 1);
        v182 = vmlaq_laneq_f64(vmlaq_n_f64(v166, v171, v180.f64[0]), v174, v180, 1);
        v183 = v590[-14];
        v184 = vmlaq_laneq_f64(vmlaq_n_f64(v168, v170, v183.f64[0]), v173, v183, 1);
        v185 = vmlaq_laneq_f64(vmlaq_n_f64(v169, v171, v183.f64[0]), v174, v183, 1);
        v186 = v6[62];
        v187 = v6[63];
        v188 = v590[-31];
        v189 = v6[68];
        v190 = vmlaq_laneq_f64(vmlaq_n_f64(v175, v186, v188.f64[0]), v189, v188, 1);
        v191 = v6[69];
        v192 = vmlaq_laneq_f64(vmlaq_n_f64(v176, v187, v188.f64[0]), v191, v188, 1);
        v193 = v590[-25];
        v194 = vmlaq_laneq_f64(vmlaq_n_f64(v178, v186, v193.f64[0]), v189, v193, 1);
        v195 = vmlaq_laneq_f64(vmlaq_n_f64(v179, v187, v193.f64[0]), v191, v193, 1);
        v196 = v590[-19];
        v197 = vmlaq_laneq_f64(vmlaq_n_f64(v181, v186, v196.f64[0]), v189, v196, 1);
        v198 = vmlaq_laneq_f64(vmlaq_n_f64(v182, v187, v196.f64[0]), v191, v196, 1);
        v199 = v590[-13];
        v5[2] = v190;
        v5[3] = v192;
        v5[8] = v194;
        v5[9] = v195;
        v5[14] = v197;
        v5[15] = v198;
        v5[20] = vmlaq_laneq_f64(vmlaq_n_f64(v184, v186, v199.f64[0]), v189, v199, 1);
        v5[21] = vmlaq_laneq_f64(vmlaq_n_f64(v185, v187, v199.f64[0]), v191, v199, 1);
        v201 = v6[4];
        v200 = v6[5];
        v203 = v6[10];
        v202 = v6[11];
        v205 = v6[16];
        v204 = v6[17];
        v207 = v6[22];
        v206 = v6[23];
        v208 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v201, v17.f64[0]), v203, v17, 1), v205, v46.f64[0]), v207, v46, 1);
        v209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v200, v17.f64[0]), v202, v17, 1), v204, v46.f64[0]), v206, v46, 1);
        v210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v201, v22.f64[0]), v203, v22, 1), v205, v52.f64[0]), v207, v52, 1);
        v211 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v200, v22.f64[0]), v202, v22, 1), v204, v52.f64[0]), v206, v52, 1);
        v212 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v201, v26.f64[0]), v203, v26, 1), v205, v58.f64[0]), v207, v58, 1);
        v213 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v200, v26.f64[0]), v202, v26, 1), v204, v58.f64[0]), v206, v58, 1);
        v214 = vmlaq_laneq_f64(vmulq_n_f64(v201, v33.f64[0]), v203, v33, 1);
        v215 = v590[-17];
        v216 = vmlaq_laneq_f64(vmlaq_n_f64(v214, v205, v215.f64[0]), v207, v215, 1);
        v217 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v200, v33.f64[0]), v202, v33, 1), v204, v215.f64[0]), v206, v215, 1);
        v219 = v6[28];
        v218 = v6[29];
        v221 = v6[34];
        v220 = v6[35];
        v222 = v6[40];
        v223 = v6[41];
        v224 = vmlaq_laneq_f64(vmlaq_n_f64(v208, v219, v48.f64[0]), v221, v48, 1);
        v225 = vmlaq_laneq_f64(vmlaq_n_f64(v209, v218, v48.f64[0]), v220, v48, 1);
        v226 = v6[46];
        v227 = v6[47];
        v228 = vmlaq_laneq_f64(vmlaq_n_f64(v225, v223, v73.f64[0]), v227, v73, 1);
        v229 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v210, v219, v53.f64[0]), v221, v53, 1), v222, v77.f64[0]), v226, v77, 1);
        v230 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v211, v218, v53.f64[0]), v220, v53, 1), v223, v77.f64[0]), v227, v77, 1);
        v231 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v212, v219, v59.f64[0]), v221, v59, 1), v222, v81.f64[0]), v226, v81, 1);
        v232 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v213, v218, v59.f64[0]), v220, v59, 1), v223, v81.f64[0]), v227, v81, 1);
        v233 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v216, v219, v65.f64[0]), v221, v65, 1), v222, v85.f64[0]), v226, v85, 1);
        v234 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v217, v218, v65.f64[0]), v220, v65, 1), v223, v85.f64[0]), v227, v85, 1);
        v236 = v6[52];
        v235 = v6[53];
        v238 = v6[58];
        v237 = v6[59];
        v239 = v6[65];
        v240 = v6[64];
        v241 = v6[71];
        v242 = v6[70];
        v243 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v224, v222, v73.f64[0]), v226, v73, 1), v236, v94.f64[0]), v238, v94, 1), v240, v635.f64[0]), v242, v635, 1);
        v244 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v228, v235, v94.f64[0]), v237, v94, 1), v239, v635.f64[0]), v241, v635, 1);
        v245 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v229, v236, v97.f64[0]), v238, v97, 1), v240, v636.f64[0]), v242, v636, 1);
        v246 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v230, v235, v97.f64[0]), v237, v97, 1), v239, v636.f64[0]), v241, v636, 1);
        v247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v231, v236, v101.f64[0]), v238, v101, 1), v240, v637.f64[0]), v242, v637, 1);
        v248 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v232, v235, v101.f64[0]), v237, v101, 1), v239, v637.f64[0]), v241, v637, 1);
        v249 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v236, v106.f64[0]), v238, v106, 1);
        v250 = v590[-13];
        v251 = v590[-12];
        v5[4] = v243;
        v5[5] = v244;
        v5[10] = v245;
        v5[11] = v246;
        v5[16] = v247;
        v5[17] = v248;
        v5[22] = vmlaq_laneq_f64(vmlaq_n_f64(v249, v240, v250.f64[0]), v242, v250, 1);
        v5[23] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v234, v235, v106.f64[0]), v237, v106, 1), v239, v250.f64[0]), v241, v250, 1);
        v252 = v6[1];
        v254 = v6[6];
        v253 = v6[7];
        v256 = v6[12];
        v255 = v6[13];
        v258 = v6[18];
        v257 = v6[19];
        v259 = v590[-12];
        v260 = v590[-11];
        v261 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v6, v251.f64[0]), v254, v251, 1), v256, v260.f64[0]), v258, v260, 1);
        v262 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v252, v251.f64[0]), v253, v251, 1), v255, v260.f64[0]), v257, v260, 1);
        v263 = v590[-7];
        v264 = v590[-6];
        v265 = vmlaq_laneq_f64(vmulq_n_f64(*v6, v264.f64[0]), v254, v264, 1);
        v266 = v264;
        v267 = v590[-5];
        v268 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v256, v267.f64[0]), v258, v267, 1);
        v269 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v252, v264.f64[0]), v253, v264, 1), v255, v267.f64[0]), v257, v267, 1);
        v271 = v6[24];
        v270 = v6[25];
        v272 = v6[30];
        v273 = v6[31];
        v275 = v6[36];
        v274 = v6[37];
        v277 = v6[42];
        v276 = v6[43];
        v278 = v590[-11];
        v279 = v590[-10];
        v280 = v279;
        v281 = v590[-9];
        v282 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v261, v271, v279.f64[0]), v272, v279, 1), v275, v281.f64[0]), v277, v281, 1);
        v283 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v262, v270, v279.f64[0]), v273, v279, 1), v274, v281.f64[0]), v276, v281, 1);
        v284 = v590[-5];
        v285 = v590[-4];
        v286 = vmlaq_laneq_f64(vmlaq_n_f64(v268, v271, v285.f64[0]), v272, v285, 1);
        v288 = v285;
        v287 = v590[-3];
        v289 = vmlaq_laneq_f64(vmlaq_n_f64(v286, v275, v287.f64[0]), v277, v287, 1);
        v290 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v269, v270, v285.f64[0]), v273, v285, 1), v274, v287.f64[0]), v276, v287, 1);
        v291 = v6[48];
        v292 = v6[49];
        v294 = v6[54];
        v293 = v6[55];
        v296 = v6[60];
        v295 = v6[61];
        v297 = v6[67];
        v298 = v6[66];
        v299 = v590[-9];
        v300 = v590[-8];
        v301 = v300;
        v302 = v263;
        v303 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v282, v291, v300.f64[0]), v294, v300, 1), v296, v302.f64[0]), v298, v302, 1);
        v304 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v283, v292, v300.f64[0]), v293, v300, 1), v295, v302.f64[0]), v297, v302, 1);
        v305 = v590[-3];
        v306 = v590[-2];
        v307 = vmlaq_laneq_f64(vmlaq_n_f64(v289, v291, v306.f64[0]), v294, v306, 1);
        v308 = v306;
        v309 = v590[-1];
        v5[24] = v303;
        v5[25] = v304;
        v5[30] = vmlaq_laneq_f64(vmlaq_n_f64(v307, v296, v309.f64[0]), v298, v309, 1);
        v5[31] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v290, v292, v306.f64[0]), v293, v306, 1), v295, v309.f64[0]), v297, v309, 1);
        v311 = v6[2];
        v310 = v6[3];
        v313 = v6[8];
        v312 = v6[9];
        v315 = v6[14];
        v314 = v6[15];
        v317 = v6[20];
        v316 = v6[21];
        v319 = v590[-12];
        v318 = v590[-11];
        v320 = vmlaq_laneq_f64(vmulq_n_f64(v311, v319.f64[0]), v313, v319, 1);
        v321 = vmlaq_laneq_f64(vmulq_n_f64(v310, v319.f64[0]), v312, v319, 1);
        v322 = v590[-6];
        v323 = v590[-5];
        v324 = vmlaq_laneq_f64(vmlaq_n_f64(v320, v315, v318.f64[0]), v317, v318, 1);
        v325 = vmlaq_laneq_f64(vmlaq_n_f64(v321, v314, v318.f64[0]), v316, v318, 1);
        v326 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v311, v322.f64[0]), v313, v322, 1), v315, v323.f64[0]), v317, v323, 1);
        v327 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v310, v322.f64[0]), v312, v322, 1), v314, v323.f64[0]), v316, v323, 1);
        v329 = v6[26];
        v328 = v6[27];
        v331 = v6[32];
        v330 = v6[33];
        v333 = v6[38];
        v332 = v6[39];
        v335 = v6[44];
        v334 = v6[45];
        v336 = v590[-10];
        v337 = vmlaq_laneq_f64(vmlaq_n_f64(v324, v329, v336.f64[0]), v331, v336, 1);
        v338 = vmlaq_laneq_f64(vmlaq_n_f64(v325, v328, v336.f64[0]), v330, v336, 1);
        v339 = v590[-9];
        v340 = vmlaq_laneq_f64(vmlaq_n_f64(v337, v333, v339.f64[0]), v335, v339, 1);
        v341 = vmlaq_laneq_f64(vmlaq_n_f64(v338, v332, v339.f64[0]), v334, v339, 1);
        v342 = v590[-4];
        v343 = vmlaq_n_f64(v326, v329, v342.f64[0]);
        v344 = v590[-3];
        v345 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v343, v331, v342, 1), v333, v344.f64[0]), v335, v344, 1);
        v346 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v327, v328, v342.f64[0]), v330, v342, 1), v332, v344.f64[0]), v334, v344, 1);
        v348 = v6[50];
        v347 = v6[51];
        v350 = v6[56];
        v349 = v6[57];
        v352 = v6[62];
        v351 = v6[63];
        v353 = v6[69];
        v354 = v6[68];
        v355 = v590[-8];
        v356 = vmlaq_laneq_f64(vmlaq_n_f64(v340, v348, v355.f64[0]), v350, v355, 1);
        v357 = vmlaq_laneq_f64(vmlaq_n_f64(v341, v347, v355.f64[0]), v349, v355, 1);
        v358 = v590[-7];
        v359 = vmlaq_laneq_f64(vmlaq_n_f64(v356, v352, v358.f64[0]), v354, v358, 1);
        v360 = vmlaq_laneq_f64(vmlaq_n_f64(v357, v351, v358.f64[0]), v353, v358, 1);
        v361 = v590[-2];
        v362 = vmlaq_n_f64(v345, v348, v361.f64[0]);
        v363 = v590[-1];
        v5[26] = v359;
        v5[27] = v360;
        v5[32] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v362, v350, v361, 1), v352, v363.f64[0]), v354, v363, 1);
        v5[33] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v346, v347, v361.f64[0]), v349, v361, 1), v351, v363.f64[0]), v353, v363, 1);
        v365 = v6[4];
        v364 = v6[5];
        v367 = v6[10];
        v366 = v6[11];
        v369 = v6[16];
        v368 = v6[17];
        v371 = v6[22];
        v370 = v6[23];
        v372 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v365, v259.f64[0]), v367, v259, 1), v369, v278.f64[0]), v371, v278, 1);
        v373 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v364, v259.f64[0]), v366, v259, 1), v368, v278.f64[0]), v370, v278, 1);
        v374 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v365, v266.f64[0]), v367, v266, 1), v369, v284.f64[0]), v371, v284, 1);
        v375 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v364, v266.f64[0]), v366, v266, 1), v368, v284.f64[0]), v370, v284, 1);
        v377 = v6[28];
        v376 = v6[29];
        v379 = v6[34];
        v378 = v6[35];
        v381 = v6[40];
        v380 = v6[41];
        v383 = v6[46];
        v382 = v6[47];
        v384 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v372, v377, v280.f64[0]), v379, v280, 1), v381, v299.f64[0]), v383, v299, 1);
        v385 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v373, v376, v280.f64[0]), v378, v280, 1), v380, v299.f64[0]), v382, v299, 1);
        v386 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v374, v377, v288.f64[0]), v379, v288, 1), v381, v305.f64[0]), v383, v305, 1);
        v387 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v375, v376, v288.f64[0]), v378, v288, 1), v380, v305.f64[0]), v382, v305, 1);
        v389 = v6[52];
        v388 = v6[53];
        v391 = v6[58];
        v390 = v6[59];
        v392 = v6[65];
        v393 = v6[64];
        v394 = v6[71];
        v395 = v6[70];
        v396 = v590[-1];
        v5[28] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v384, v389, v301.f64[0]), v391, v301, 1), v393, v263.f64[0]), v395, v263, 1);
        v5[29] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v385, v388, v301.f64[0]), v390, v301, 1), v392, v263.f64[0]), v394, v263, 1);
        v5[34] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v386, v389, v308.f64[0]), v391, v308, 1), v393, v396.f64[0]), v395, v396, 1);
        v5[35] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v387, v388, v308.f64[0]), v390, v308, 1), v392, v396.f64[0]), v394, v396, 1);
        break;
      case 1:
        v397 = 0;
        v398 = *(int8x16_t *)(v2 + 544);
        v400 = *(int8x16_t *)(v2 + 512);
        v399 = *(int8x16_t *)(v2 + 528);
        v402 = *(int8x16_t *)(v2 + 480);
        v401 = *(int8x16_t *)(v2 + 496);
        v404 = *(int8x16_t *)(v2 + 448);
        v403 = *(int8x16_t *)(v2 + 464);
        v406 = *(int8x16_t *)(v2 + 416);
        v405 = *(int8x16_t *)(v2 + 432);
        v633 = *(float64x2_t *)(v2 + 560);
        v617 = (float64x2_t)vextq_s8((int8x16_t)v633, (int8x16_t)v633, 8uLL);
        v407 = *(int8x16_t *)(v2 + 384);
        v408 = *(int8x16_t *)(v2 + 400);
        v637 = (float64x2_t)v398;
        v616 = (float64x2_t)vextq_s8(v398, v398, 8uLL);
        v636 = (float64x2_t)v399;
        v615 = (float64x2_t)vextq_s8(v399, v399, 8uLL);
        v635 = (float64x2_t)v400;
        v614 = (float64x2_t)vextq_s8(v400, v400, 8uLL);
        v409 = *(int8x16_t *)(v2 + 352);
        v410 = *(int8x16_t *)(v2 + 368);
        v634 = (float64x2_t)v401;
        v613 = vextq_s8(v401, v401, 8uLL);
        v632 = (float64x2_t)v402;
        v612 = vextq_s8(v402, v402, 8uLL);
        v631 = (float64x2_t)v403;
        v611 = vextq_s8(v403, v403, 8uLL);
        v412 = *(int8x16_t *)(v2 + 320);
        v411 = *(int8x16_t *)(v2 + 336);
        v629 = (float64x2_t)v405;
        v630 = (float64x2_t)v404;
        v610 = vextq_s8(v404, v404, 8uLL);
        v609 = vextq_s8(v405, v405, 8uLL);
        v627 = (float64x2_t)v408;
        v628 = (float64x2_t)v406;
        v608 = vextq_s8(v406, v406, 8uLL);
        v414 = *(int8x16_t *)(v2 + 288);
        v413 = *(int8x16_t *)(v2 + 304);
        v415 = *(int8x16_t *)(v2 + 272);
        v625 = (float64x2_t)v410;
        v626 = (float64x2_t)v407;
        v606 = (float64x2_t)vextq_s8(v407, v407, 8uLL);
        v607 = vextq_s8(v408, v408, 8uLL);
        v605 = (float64x2_t)vextq_s8(v410, v410, 8uLL);
        result = &v830;
        v417 = *(int8x16_t *)(v2 + 240);
        v416 = *(int8x16_t *)(v2 + 256);
        v623 = (float64x2_t)v411;
        v624 = (float64x2_t)v409;
        v604 = (float64x2_t)vextq_s8(v409, v409, 8uLL);
        v603 = (float64x2_t)vextq_s8(v411, v411, 8uLL);
        v621 = (float64x2_t)v413;
        v622 = (float64x2_t)v412;
        v602 = vextq_s8(v412, v412, 8uLL);
        v419 = *(int8x16_t *)(v2 + 208);
        v418 = *(int8x16_t *)(v2 + 224);
        v601 = (float64x2_t)vextq_s8(v413, v413, 8uLL);
        v619 = (float64x2_t)v415;
        v620 = v414;
        v600 = vextq_s8(v414, v414, 8uLL);
        v599 = (float64x2_t)vextq_s8(v415, v415, 8uLL);
        v421 = *(int8x16_t *)(v2 + 176);
        v420 = *(int8x16_t *)(v2 + 192);
        v618 = (float64x2_t)v416;
        v598 = vextq_s8(v416, v416, 8uLL);
        v422.i64[0] = v417.i64[0];
        v423 = vextq_s8(v417, v417, 8uLL).u64[0];
        v424.i64[0] = v418.i64[0];
        v425 = vextq_s8(v418, v418, 8uLL).u64[0];
        v427 = *(int8x16_t *)(v2 + 144);
        v426 = *(int8x16_t *)(v2 + 160);
        v428 = v419.i64[0];
        v429 = vextq_s8(v419, v419, 8uLL).u64[0];
        v430 = v420.i64[0];
        v431 = vextq_s8(v420, v420, 8uLL).u64[0];
        v432 = vextq_s8(v421, v421, 8uLL).u64[0];
        v434 = *(int8x16_t *)(v2 + 112);
        v433 = *(int8x16_t *)(v2 + 128);
        v435 = vextq_s8(v426, v426, 8uLL).u64[0];
        v436 = (float64x2_t *)(v2 + 64);
        v437 = *(int8x16_t *)(v2 + 64);
        v438 = vextq_s8(v427, v427, 8uLL).u64[0];
        v439 = vextq_s8(v433, v433, 8uLL).u64[0];
        v440 = vextq_s8(v434, v434, 8uLL).u64[0];
        v442 = *(int8x16_t *)(v2 + 80);
        v441 = *(int8x16_t *)(v2 + 96);
        v443 = vextq_s8(v441, v441, 8uLL).u64[0];
        v444 = vextq_s8(v442, v442, 8uLL).u64[0];
        v445 = vextq_s8(v437, v437, 8uLL).u64[0];
        v446 = *(int8x16_t *)(v2 + 32);
        v447 = *(int8x16_t *)(v2 + 48);
        v448 = vextq_s8(v447, v447, 8uLL).u64[0];
        v449 = vextq_s8(v446, v446, 8uLL).u64[0];
        v451 = *(int8x16_t *)v2;
        v450 = *(int8x16_t *)(v2 + 16);
        v452 = vextq_s8(v450, v450, 8uLL).u64[0];
        v453 = vextq_s8(v451, v451, 8uLL).u64[0];
        do
        {
          v451.i64[1] = v453;
          v450.i64[1] = v452;
          v446.i64[1] = v449;
          v447.i64[1] = v448;
          v437.i64[1] = v445;
          v442.i64[1] = v444;
          v441.i64[1] = v443;
          v434.i64[1] = v440;
          v433.i64[1] = v439;
          v427.i64[1] = v438;
          v426.i64[1] = v435;
          v421.i64[1] = v432;
          *(_QWORD *)&v454 = v430;
          *((_QWORD *)&v454 + 1) = v431;
          *(_QWORD *)&v455 = v428;
          *((_QWORD *)&v455 + 1) = v429;
          v424.i64[1] = v425;
          v422.i64[1] = v423;
          *(float64_t *)&v457 = v618.f64[0];
          *(float64_t *)&v456 = v619.f64[0];
          *((_QWORD *)&v457 + 1) = v598.i64[0];
          *((_QWORD *)&v456 + 1) = *(_QWORD *)&v599.f64[0];
          *(_QWORD *)&v458 = v620.i64[0];
          *(float64_t *)&v459 = v621.f64[0];
          *((_QWORD *)&v458 + 1) = v600.i64[0];
          *((_QWORD *)&v459 + 1) = *(_QWORD *)&v601.f64[0];
          *(float64_t *)&v460 = v622.f64[0];
          *(float64_t *)&v461 = v623.f64[0];
          *((_QWORD *)&v460 + 1) = v602.i64[0];
          *((_QWORD *)&v461 + 1) = *(_QWORD *)&v603.f64[0];
          *(float64_t *)&v463 = v624.f64[0];
          *(float64_t *)&v462 = v625.f64[0];
          *((_QWORD *)&v463 + 1) = *(_QWORD *)&v604.f64[0];
          *((_QWORD *)&v462 + 1) = *(_QWORD *)&v605.f64[0];
          *(float64_t *)&v464 = v626.f64[0];
          *(float64_t *)&v465 = v627.f64[0];
          *((_QWORD *)&v464 + 1) = *(_QWORD *)&v606.f64[0];
          *((_QWORD *)&v465 + 1) = v607.i64[0];
          *(float64_t *)&v466 = v628.f64[0];
          *(float64_t *)&v467 = v629.f64[0];
          *((_QWORD *)&v466 + 1) = v608.i64[0];
          *((_QWORD *)&v467 + 1) = v609.i64[0];
          *(float64_t *)&v468 = v630.f64[0];
          *((_QWORD *)&v468 + 1) = v610.i64[0];
          v469.f64[0] = v631.f64[0];
          *(_QWORD *)&v469.f64[1] = v611.i64[0];
          v631 = v469;
          v469.f64[0] = v632.f64[0];
          *(_QWORD *)&v469.f64[1] = v612.i64[0];
          v632 = v469;
          v469.f64[0] = v634.f64[0];
          *(_QWORD *)&v469.f64[1] = v613.i64[0];
          v634 = v469;
          v469.f64[0] = v635.f64[0];
          v469.f64[1] = v614.f64[0];
          v635 = v469;
          v469.f64[0] = v636.f64[0];
          v469.f64[1] = v615.f64[0];
          v636 = v469;
          v469.f64[0] = v637.f64[0];
          v469.f64[1] = v616.f64[0];
          v637 = v469;
          v469.f64[0] = v633.f64[0];
          v469.f64[1] = v617.f64[0];
          v633 = v469;
          v470 = *v436;
          v626 = v436[1];
          v471 = v3[6];
          v630 = vmulq_f64(v470, v3[5]);
          v629 = vmulq_f64(v436[-1], v3[4]);
          v628 = vmulq_f64(v436[-2], v3[3]);
          v627 = vmulq_f64(v436[-3], v3[2]);
          v472 = vmulq_f64(v436[-4], v3[1]);
          v624.f64[1] = v472.f64[1];
          v625 = v471;
          v1342 = v451;
          v1343 = v450;
          v1344 = v446;
          v1345 = v447;
          v1346 = v437;
          v1347 = v442;
          v1348 = v441;
          v1349 = v434;
          v1350 = v433;
          v1351 = v427;
          v1352 = v426;
          v1353 = v421;
          v1354 = v454;
          v1355 = v455;
          v1356 = v424;
          v1357 = v422;
          v1358 = v457;
          v1359 = v456;
          v1360 = v458;
          v1361 = v459;
          v1362 = v460;
          v1363 = v461;
          v1364 = v463;
          v1365 = v462;
          v1366 = v464;
          v1367 = v465;
          v1368 = v466;
          v1369 = v467;
          v1370 = v468;
          v1371 = v631;
          v1372 = v632;
          v1373 = v634;
          v1374 = v635;
          v1375 = v636;
          v1376 = v637;
          v1377 = v633;
          v1342.i64[v397 & 0x7F] = *(_QWORD *)&v472.f64[0];
          v1341 = v1405;
          v1340 = v1404;
          v1339 = v1403;
          v1338 = v1402;
          v1337 = v1401;
          v1336 = v1400;
          v1335 = v1399;
          v1334 = v1398;
          v1333 = v1397;
          v1332 = v1396;
          v1331 = v1395;
          v1330 = v1394;
          v1329 = v1393;
          v1328 = v1392;
          v1327 = v1391;
          v1326 = v1390;
          v1325 = v1389;
          v1324 = v1388;
          v1323 = v1387;
          v1322 = v1386;
          v1321 = v1385;
          v1320 = v1384;
          v1319 = v1383;
          v1318 = v1382;
          v1317 = v1381;
          v1316 = v1380;
          v1315 = v1379;
          v1314 = v1378;
          v1313 = v1377;
          v1312 = v1376;
          v1311 = v1375;
          v1310 = v1374;
          v1309 = v1373;
          v1308 = v1372;
          v1307 = v1371;
          v1306 = v1370;
          v1305 = v1369;
          v1304 = v1368;
          v1303 = v1367;
          v1302 = v1366;
          v1301 = v1365;
          v1300 = v1364;
          v1299 = v1363;
          v1298 = v1362;
          v1297 = v1361;
          v1296 = v1360;
          v1295 = v1359;
          v1294 = v1358;
          v1293 = v1357;
          v1292 = v1356;
          v1291 = v1355;
          v1290 = v1354;
          v1289 = v1353;
          v1288 = v1352;
          v1287 = v1351;
          v1286 = v1350;
          v1285 = v1349;
          v1284 = v1348;
          v1283 = v1347;
          v1282 = v1346;
          v1281 = v1345;
          v1280 = v1344;
          v1279 = v1343;
          v1278 = v1342;
          v1278.i64[((_BYTE)v397 + 1) & 0x7F] = *(_QWORD *)&v624.f64[1];
          v1277 = v1341;
          v1276 = v1340;
          v1275 = v1339;
          v1274 = v1338;
          v1273 = v1337;
          v1272 = v1336;
          v1271 = v1335;
          v1270 = v1334;
          v1269 = v1333;
          v1268 = v1332;
          v1267 = v1331;
          v1266 = v1330;
          v1265 = v1329;
          v1264 = v1328;
          v1263 = v1327;
          v1262 = v1326;
          v1261 = v1325;
          v1260 = v1324;
          v1259 = v1323;
          v1258 = v1322;
          v1257 = v1321;
          v1256 = v1320;
          v1255 = v1319;
          v1254 = v1318;
          v1253 = v1317;
          v1252 = v1316;
          v1251 = v1315;
          v1250 = v1314;
          v1249 = v1313;
          v1248 = v1312;
          v1247 = v1311;
          v1246 = v1310;
          v1245 = v1309;
          v1244 = v1308;
          v1243 = v1307;
          v1242 = v1306;
          v1241 = v1305;
          v1240 = v1304;
          v1239 = v1303;
          v1238 = v1302;
          v1237 = v1301;
          v1236 = v1300;
          v1235 = v1299;
          v1234 = v1298;
          v1233 = v1297;
          v1232 = v1296;
          v1231 = v1295;
          v1230 = v1294;
          v1229 = v1293;
          v1228 = v1292;
          v1227 = v1291;
          v1226 = v1290;
          v1225 = v1289;
          v1224 = v1288;
          v1223 = v1287;
          v1222 = v1286;
          v1221 = v1285;
          v1220 = v1284;
          v1219 = v1283;
          v1218 = v1282;
          v1217 = v1281;
          v1216 = v1280;
          v1215 = v1279;
          v1214 = v1278;
          v1214.i64[((_BYTE)v397 + 2) & 0x7F] = *(_QWORD *)&v627.f64[0];
          v1213 = v1277;
          v1212 = v1276;
          v1211 = v1275;
          v1210 = v1274;
          v1209 = v1273;
          v1208 = v1272;
          v1207 = v1271;
          v1206 = v1270;
          v1205 = v1269;
          v1204 = v1268;
          v1203 = v1267;
          v1202 = v1266;
          v1201 = v1265;
          v1200 = v1264;
          v1199 = v1263;
          v1198 = v1262;
          v1197 = v1261;
          v1196 = v1260;
          v1195 = v1259;
          v1194 = v1258;
          v1193 = v1257;
          v1192 = v1256;
          v1191 = v1255;
          v1190 = v1254;
          v1189 = v1253;
          v1188 = v1252;
          v1187 = v1251;
          v1186 = v1250;
          v1185 = v1249;
          v1184 = v1248;
          v1183 = v1247;
          v1182 = v1246;
          v1181 = v1245;
          v1180 = v1244;
          v1179 = v1243;
          v1178 = v1242;
          v1177 = v1241;
          v1176 = v1240;
          v1175 = v1239;
          v1174 = v1238;
          v1173 = v1237;
          v1172 = v1236;
          v1171 = v1235;
          v1170 = v1234;
          v1169 = v1233;
          v1168 = v1232;
          v1167 = v1231;
          v1166 = v1230;
          v1165 = v1229;
          v1164 = v1228;
          v1163 = v1227;
          v1162 = v1226;
          v1161 = v1225;
          v1160 = v1224;
          v1159 = v1223;
          v1158 = v1222;
          v1157 = v1221;
          v1156 = v1220;
          v1155 = v1219;
          v1154 = v1218;
          v1153 = v1217;
          v1152 = v1216;
          v1151 = v1215;
          v1150 = v1214;
          v1150.i64[((_BYTE)v397 + 3) & 0x7F] = *(_QWORD *)&v627.f64[1];
          v1149 = v1213;
          v1148 = v1212;
          v1147 = v1211;
          v1146 = v1210;
          v1145 = v1209;
          v1144 = v1208;
          v1143 = v1207;
          v1142 = v1206;
          v1141 = v1205;
          v1140 = v1204;
          v1139 = v1203;
          v1138 = v1202;
          v1137 = v1201;
          v1136 = v1200;
          v1135 = v1199;
          v1134 = v1198;
          v1133 = v1197;
          v1132 = v1196;
          v1131 = v1195;
          v1130 = v1194;
          v1129 = v1193;
          v1128 = v1192;
          v1127 = v1191;
          v1126 = v1190;
          v1125 = v1189;
          v1124 = v1188;
          v1123 = v1187;
          v1122 = v1186;
          v1121 = v1185;
          v1120 = v1184;
          v1119 = v1183;
          v1118 = v1182;
          v1117 = v1181;
          v1116 = v1180;
          v1115 = v1179;
          v1114 = v1178;
          v1113 = v1177;
          v1112 = (int8x16_t)v1176;
          v1111 = (int8x16_t)v1175;
          v1110 = (int8x16_t)v1174;
          v1109 = v1173;
          v1108 = (int8x16_t)v1172;
          v1107 = v1171;
          v1106 = v1170;
          v1105 = (int8x16_t)v1169;
          v1104 = (int8x16_t)v1168;
          v1103 = (int8x16_t)v1167;
          v1102 = v1166;
          v1101 = v1165;
          v1100 = v1164;
          v1099 = v1163;
          v1098 = (int8x16_t)v1162;
          v1097 = v1161;
          v1096 = v1160;
          v1095 = v1159;
          v1094 = v1158;
          v1093 = v1157;
          v1092 = v1156;
          v1091 = v1155;
          v1090 = v1154;
          v1089 = v1153;
          v1088 = v1152;
          v1087 = v1151;
          v1086 = v1150;
          v1086.i64[((_BYTE)v397 + 4) & 0x7F] = *(_QWORD *)&v628.f64[0];
          v1085 = v1149;
          v1084 = v1148;
          v1083 = v1147;
          v1082 = v1146;
          v1081 = v1145;
          v1080 = v1144;
          v1079 = v1143;
          v1078 = v1142;
          v1077 = v1141;
          v1076 = v1140;
          v1075 = v1139;
          v1074 = v1138;
          v1073 = v1137;
          v1072 = v1136;
          v1071 = v1135;
          v1070 = v1134;
          v1069 = v1133;
          v1068 = v1132;
          v1067 = v1131;
          v1066 = v1130;
          v1065 = v1129;
          v1064 = v1128;
          v1063 = v1127;
          v1062 = v1126;
          v1061 = v1125;
          v1060 = v1124;
          v1059 = v1123;
          v1058 = v1122;
          v1057 = v1121;
          v1056 = v1120;
          v1055 = v1119;
          v1054 = v1118;
          v1053 = v1117;
          v1052 = v1116;
          v1051 = v1115;
          v1050 = (int8x16_t)v1114;
          v1049 = (int8x16_t)v1113;
          v1048 = v1112;
          v1047 = v1111;
          v1046 = v1110;
          v1045 = (int8x16_t)v1109;
          v1044 = v1108;
          v1043 = (int8x16_t)v1107;
          v1042 = (int8x16_t)v1106;
          v1041 = v1105;
          v1040 = v1104;
          v1039 = v1103;
          v1038 = (int8x16_t)v1102;
          v1037 = v1101;
          v1036 = v1100;
          v1035 = (int8x16_t)v1099;
          v1034 = v1098;
          v1033 = v1097;
          v1032 = v1096;
          v1031 = v1095;
          v1030 = v1094;
          v1029 = v1093;
          v1028 = v1092;
          v1027 = v1091;
          v1026 = v1090;
          v1025 = v1089;
          v1024 = v1088;
          v1023 = v1087;
          v1022 = v1086;
          v1022.i64[((_BYTE)v397 + 5) & 0x7F] = *(_QWORD *)&v628.f64[1];
          v1021 = v1085;
          v1020 = v1084;
          v1019 = v1083;
          v1018 = v1082;
          v1017 = v1081;
          v1016 = v1080;
          v1015 = v1079;
          v1014 = v1078;
          v1013 = v1077;
          v1012 = v1076;
          v1011 = v1075;
          v1010 = v1074;
          v1009 = v1073;
          v1008 = v1072;
          v1007 = v1071;
          v1006 = v1070;
          v1005 = v1069;
          v1004 = v1068;
          v1003 = v1067;
          v1002 = v1066;
          v1001 = v1065;
          v1000 = v1064;
          v999 = v1063;
          v998 = v1062;
          v997 = v1061;
          v996 = v1060;
          v995 = v1059;
          v994 = v1058;
          v993 = v1057;
          v992 = v1056;
          v991 = v1055;
          v990 = v1054;
          v989 = v1053;
          v988 = v1052;
          v987 = v1051;
          v986 = v1050;
          v985 = v1049;
          v984 = v1048;
          v983 = v1047;
          v982 = v1046;
          v981 = v1045;
          v980 = v1044;
          v979 = v1043;
          v978 = v1042;
          v977 = v1041;
          v976 = v1040;
          v975 = v1039;
          v974 = v1038;
          v973 = v1037;
          v972 = v1036;
          v971 = v1035;
          v970 = v1034;
          v969 = v1033;
          v968 = v1032;
          v967 = v1031;
          v966 = v1030;
          v965 = v1029;
          v964 = v1028;
          v963 = v1027;
          v962 = v1026;
          v961 = v1025;
          v960 = v1024;
          v959 = v1023;
          v958 = v1022;
          v958.i64[((_BYTE)v397 + 6) & 0x7F] = *(_QWORD *)&v629.f64[0];
          v957 = v1021;
          v956 = v1020;
          v955 = v1019;
          v954 = v1018;
          v953 = v1017;
          v952 = v1016;
          v951 = v1015;
          v950 = v1014;
          v949 = v1013;
          v948 = v1012;
          v947 = v1011;
          v946 = v1010;
          v945 = v1009;
          v944 = v1008;
          v943 = v1007;
          v942 = v1006;
          v941 = v1005;
          v940 = v1004;
          v939 = v1003;
          v938 = v1002;
          v937 = v1001;
          v936 = v1000;
          v935 = v999;
          v934 = v998;
          v933 = v997;
          v932 = v996;
          v931 = v995;
          v930 = v994;
          v929 = v993;
          v928 = v992;
          v927 = v991;
          v926 = v990;
          v925 = v989;
          v924 = v988;
          v923 = v987;
          v922 = v986;
          v921 = v985;
          v920 = v984;
          v919 = v983;
          v918 = v982;
          v917 = v981;
          v916 = v980;
          v915 = v979;
          v914 = v978;
          v913 = v977;
          v912 = v976;
          v911 = v975;
          v910 = v974;
          v909 = v973;
          v908 = v972;
          v907 = v971;
          v906 = v970;
          v905 = v969;
          v904 = v968;
          v903 = v967;
          v902 = v966;
          v901 = v965;
          v900 = v964;
          v899 = v963;
          v898 = v962;
          v897 = v961;
          v896 = v960;
          v895 = v959;
          v894 = v958;
          v894.i64[((_BYTE)v397 + 7) & 0x7F] = *(_QWORD *)&v629.f64[1];
          v893 = v957;
          v892 = v956;
          v891 = v955;
          v890 = v954;
          v889 = v953;
          v888 = v952;
          v887 = v951;
          v886 = v950;
          v885 = v949;
          v884 = v948;
          v883 = v947;
          v882 = v946;
          v881 = v945;
          v880 = v944;
          v879 = v943;
          v878 = v942;
          v877 = v941;
          v876 = v940;
          v875 = v939;
          v874 = v938;
          v873 = v937;
          v872 = v936;
          v871 = v935;
          v870 = v934;
          v869 = v933;
          v868 = v932;
          v867 = v931;
          v866 = v930;
          v865 = (int8x16_t)v929;
          v864 = v928;
          v863 = v927;
          v862 = v926;
          v861 = v925;
          v860 = (int8x16_t)v924;
          v859 = v923;
          v858 = v922;
          v857 = v921;
          v856 = v920;
          v855 = v919;
          v854 = v918;
          v853 = v917;
          v852 = v916;
          v851 = v915;
          v850 = v914;
          v849 = v913;
          v848 = v912;
          v847 = v911;
          v846 = v910;
          v845 = v909;
          v844 = v908;
          v843 = v907;
          v842 = v906;
          v841 = v905;
          v840 = v904;
          v839 = v903;
          v838 = v902;
          v837 = v901;
          v836 = v900;
          v835 = v899;
          v834 = v898;
          v833 = v897;
          v832 = v896;
          v831 = v895;
          v830 = v894;
          v830.i64[((_BYTE)v397 + 8) & 0x7F] = *(_QWORD *)&v630.f64[0];
          v637 = vmulq_f64(v626, v625);
          v829 = v893;
          v828 = v892;
          v827 = v891;
          v826 = v890;
          v825 = v889;
          v824 = v888;
          v823 = v887;
          v822 = v886;
          v821 = v885;
          v820 = v884;
          v819 = v883;
          v818 = v882;
          v817 = v881;
          v816 = v880;
          v815 = v879;
          v814 = v878;
          v813 = v877;
          v812 = v876;
          v811 = v875;
          v810 = v874;
          v809 = v873;
          v808 = v872;
          v807 = v871;
          v806 = v870;
          v805 = v869;
          v804 = v868;
          v803 = v867;
          v802 = v866;
          v801 = v865;
          v800 = v864;
          v799 = v863;
          v798 = v862;
          v797 = v861;
          v796 = v860;
          v795 = (int8x16_t)v859;
          v794 = v858;
          v793 = v857;
          v792 = v856;
          v791 = v855;
          v790 = v854;
          v789 = v853;
          v788 = v852;
          v787 = v851;
          v786 = v850;
          v785 = v849;
          v784 = v848;
          v783 = v847;
          v782 = v846;
          v781 = v845;
          v780 = v844;
          v779 = v843;
          v778 = v842;
          v777 = v841;
          v776 = v840;
          v775 = v839;
          v774 = v838;
          v773 = v837;
          v772 = v836;
          v771 = v835;
          v770 = v834;
          v769 = v833;
          v768 = v832;
          v767 = v831;
          v766 = v830;
          v766.i64[((_BYTE)v397 + 9) & 0x7F] = *(_QWORD *)&v630.f64[1];
          v765 = v829;
          v764 = v828;
          v763 = v827;
          v762 = v826;
          v761 = v825;
          v760 = v824;
          v759 = v823;
          v758 = v822;
          v757 = v821;
          v756 = v820;
          v755 = v819;
          v754 = v818;
          v753 = v817;
          v752 = v816;
          v751 = v815;
          v750 = v814;
          v749 = v813;
          v748 = v812;
          v747 = v811;
          v746 = v810;
          v745 = v809;
          v744 = v808;
          v743 = v807;
          v742 = v806;
          v741 = v805;
          v740 = v804;
          v739 = v803;
          v738 = v802;
          v737 = v801;
          v736 = v800;
          v735 = v799;
          v734 = v798;
          v733 = v797;
          v732 = v796;
          v731 = v795;
          v730 = v794;
          v729 = v793;
          v728 = v792;
          v727 = v791;
          v726 = v790;
          v725 = v789;
          v724 = v788;
          v723 = v787;
          v722 = v786;
          v721 = v785;
          v720 = v784;
          v719 = v783;
          v718 = v782;
          v717 = v781;
          v716 = v780;
          v715 = v779;
          v714 = v778;
          v713 = v777;
          v712 = v776;
          v711 = v775;
          v710 = v774;
          v709 = v773;
          v708 = v772;
          v707 = v771;
          v706 = v770;
          v705 = v769;
          v704 = v768;
          v703 = v767;
          v702 = v766;
          v702.i64[((_BYTE)v397 + 10) & 0x7F] = *(_QWORD *)&v637.f64[0];
          v701 = v765;
          v700 = v764;
          v699 = v763;
          v698 = v762;
          v697 = v761;
          v696 = v760;
          v695 = v759;
          v694 = v758;
          v693 = v757;
          v692 = v756;
          v691 = v755;
          v690 = v754;
          v689 = v753;
          v688 = v752;
          v687 = v751;
          v686 = v750;
          v685 = v749;
          v684 = v748;
          v683 = v747;
          v682 = v746;
          v681 = v745;
          v680 = v744;
          v679 = v743;
          v678 = v742;
          v677 = v741;
          v676 = v740;
          v675 = v739;
          v674 = v738;
          v673 = v737;
          v672 = v736;
          v671 = v735;
          v670 = v734;
          v669 = v733;
          v668 = v732;
          v667 = v731;
          v666 = v730;
          v665 = v729;
          v664 = v728;
          v663 = v727;
          v662 = v726;
          v661 = v725;
          v660 = v724;
          v659 = v723;
          v658 = v722;
          v657 = v721;
          v656 = v720;
          v655 = v719;
          v654 = v718;
          v653 = v717;
          v652 = v716;
          v651 = v715;
          v650 = v714;
          v649 = v713;
          v648 = v712;
          v647 = v711;
          v646 = v710;
          v645 = v709;
          v644 = v708;
          v643 = v707;
          v642 = v706;
          v641 = v705;
          v640 = v704;
          v639 = v703;
          v638 = v702;
          v638.i64[((_BYTE)v397 + 11) & 0x7F] = *(_QWORD *)&v637.f64[1];
          v473 = v673;
          v637 = v672;
          v636 = v671;
          v635 = v670;
          v634 = v669;
          v474 = v668;
          v475 = v667;
          v476 = v666;
          v477 = v665;
          v478 = v664;
          v427 = v663;
          v433 = v662;
          v479 = v661;
          v480 = v660;
          v481 = v659;
          v482 = v658;
          v483 = v657;
          v484 = v656;
          v485 = v655;
          v486 = v654;
          v487 = v653;
          v488 = v652;
          v489 = v651;
          v490 = v650;
          v491 = v649;
          v492 = v648;
          v493 = v647;
          v494 = v646;
          v495 = v645;
          v496 = v644;
          v497 = v643;
          v594 = v644;
          v595 = v643;
          v498 = v642;
          v499 = v641;
          v596 = v642;
          v597 = v641;
          v446 = v640;
          v450 = v639;
          v451 = v638;
          *(int8x16_t *)(v2 + 32) = v640;
          *(int8x16_t *)(v2 + 48) = v499;
          *(int8x16_t *)(v2 + 64) = v498;
          *(int8x16_t *)(v2 + 80) = v497;
          *(int8x16_t *)(v2 + 96) = v496;
          *(int8x16_t *)(v2 + 112) = v495;
          *(int8x16_t *)(v2 + 128) = v494;
          *(int8x16_t *)(v2 + 144) = v493;
          v500 = v494;
          v501 = v493;
          *(int8x16_t *)(v2 + 160) = v492;
          *(int8x16_t *)(v2 + 176) = v491;
          v397 += 12;
          v436 += 6;
          *(int8x16_t *)(v2 + 192) = v490;
          *(int8x16_t *)(v2 + 208) = v489;
          *(int8x16_t *)(v2 + 224) = v488;
          *(int8x16_t *)(v2 + 240) = v487;
          *(int8x16_t *)(v2 + 256) = v486;
          *(int8x16_t *)(v2 + 272) = v485;
          *(int8x16_t *)(v2 + 288) = v484;
          *(int8x16_t *)(v2 + 304) = v483;
          v502 = v482;
          *(int8x16_t *)(v2 + 320) = v482;
          *(int8x16_t *)(v2 + 336) = v481;
          *(int8x16_t *)(v2 + 352) = v480;
          *(int8x16_t *)(v2 + 368) = v479;
          v503 = v479;
          *(int8x16_t *)(v2 + 384) = v433;
          *(int8x16_t *)(v2 + 400) = v427;
          *(int8x16_t *)(v2 + 416) = v478;
          *(int8x16_t *)(v2 + 432) = v477;
          v504 = v477;
          v505 = v476;
          *(int8x16_t *)(v2 + 448) = v476;
          *(int8x16_t *)(v2 + 464) = v475;
          v506 = v475;
          v507 = (int8x16_t)v634;
          *(int8x16_t *)(v2 + 480) = v474;
          *(int8x16_t *)(v2 + 496) = v507;
          v426 = (int8x16_t)v635;
          v421 = (int8x16_t)v636;
          *(float64x2_t *)(v2 + 512) = v635;
          *(int8x16_t *)(v2 + 528) = v421;
          v508 = (int8x16_t)v637;
          *(float64x2_t *)(v2 + 544) = v637;
          *(int8x16_t *)(v2 + 560) = v473;
          *(int8x16_t *)v2 = v451;
          *(int8x16_t *)(v2 + 16) = v450;
          v633 = (float64x2_t)v473;
          v617 = (float64x2_t)vextq_s8(v473, v473, 8uLL);
          v616 = (float64x2_t)vextq_s8(v508, v508, 8uLL);
          v509 = v421;
          v421.i64[0] = v491.i64[0];
          v615 = (float64x2_t)vextq_s8(v509, v509, 8uLL);
          v424 = v426;
          v426.i64[0] = v492.i64[0];
          v614 = (float64x2_t)vextq_s8(v424, v424, 8uLL);
          v632 = (float64x2_t)v474;
          v612 = vextq_s8(v474, v474, 8uLL);
          v613 = vextq_s8(v507, v507, 8uLL);
          v631 = (float64x2_t)v506;
          v611 = vextq_s8(v506, v506, 8uLL);
          v629 = (float64x2_t)v504;
          v630 = (float64x2_t)v505;
          v610 = vextq_s8(v505, v505, 8uLL);
          v609 = vextq_s8(v504, v504, 8uLL);
          v608 = vextq_s8(v478, v478, 8uLL);
          v510 = v427;
          v427.i64[0] = v501.i64[0];
          v627 = (float64x2_t)v510;
          v628 = (float64x2_t)v478;
          v607 = vextq_s8(v510, v510, 8uLL);
          v511 = v433;
          v433.i64[0] = v500.i64[0];
          v625 = (float64x2_t)v503;
          v626 = (float64x2_t)v511;
          v606 = (float64x2_t)vextq_s8(v511, v511, 8uLL);
          v604 = (float64x2_t)vextq_s8(v480, v480, 8uLL);
          v605 = (float64x2_t)vextq_s8(v503, v503, 8uLL);
          v512 = v481;
          v434 = v495;
          v623 = (float64x2_t)v512;
          v624 = (float64x2_t)v480;
          v603 = (float64x2_t)vextq_s8(v512, v512, 8uLL);
          v621 = (float64x2_t)v483;
          v622 = (float64x2_t)v502;
          v602 = vextq_s8(v502, v502, 8uLL);
          v601 = (float64x2_t)vextq_s8(v483, v483, 8uLL);
          v619 = (float64x2_t)v485;
          v620 = v484;
          v600 = vextq_s8(v484, v484, 8uLL);
          v599 = (float64x2_t)vextq_s8(v485, v485, 8uLL);
          v513 = v486;
          v441 = v594;
          v442 = v595;
          v618 = (float64x2_t)v513;
          v598 = vextq_s8(v513, v513, 8uLL);
          v422 = v487;
          v423 = vextq_s8(v422, v422, 8uLL).u64[0];
          v424.i64[0] = v488.i64[0];
          v425 = vextq_s8(v488, v488, 8uLL).u64[0];
          v514 = v489;
          v437 = v596;
          v447 = v597;
          v428 = v514.i64[0];
          v429 = vextq_s8(v514, v514, 8uLL).u64[0];
          v430 = v490.i64[0];
          v431 = vextq_s8(v490, v490, 8uLL).u64[0];
          v432 = vextq_s8(v491, v491, 8uLL).u64[0];
          v435 = vextq_s8(v492, v492, 8uLL).u64[0];
          v438 = vextq_s8(v501, v501, 8uLL).u64[0];
          v439 = vextq_s8(v500, v500, 8uLL).u64[0];
          v440 = vextq_s8(v434, v434, 8uLL).u64[0];
          v443 = vextq_s8(v441, v441, 8uLL).u64[0];
          v444 = vextq_s8(v442, v442, 8uLL).u64[0];
          v445 = vextq_s8(v437, v437, 8uLL).u64[0];
          v448 = vextq_s8(v447, v447, 8uLL).u64[0];
          v449 = vextq_s8(v446, v446, 8uLL).u64[0];
          v452 = vextq_s8(v450, v450, 8uLL).u64[0];
          v453 = vextq_s8(v451, v451, 8uLL).u64[0];
        }
        while (v397 != 72);
        break;
      case 2:
        v515 = v3[1].f64[0];
        v517 = *(float64x2_t *)(v2 + 464);
        v516 = *(float64x2_t *)(v2 + 480);
        v519 = *(float64x2_t *)(v2 + 432);
        v518 = *(float64x2_t *)(v2 + 448);
        v521 = *(float64x2_t *)(v2 + 400);
        v520 = *(float64x2_t *)(v2 + 416);
        v523 = *(float64x2_t *)(v2 + 368);
        v522 = *(float64x2_t *)(v2 + 384);
        v525 = *(float64x2_t *)(v2 + 336);
        v524 = *(float64x2_t *)(v2 + 352);
        v527 = *(float64x2_t *)(v2 + 304);
        v526 = *(float64x2_t *)(v2 + 320);
        v529 = *(float64x2_t *)(v2 + 272);
        v528 = *(float64x2_t *)(v2 + 288);
        v531 = *(float64x2_t *)(v2 + 240);
        v530 = *(float64x2_t *)(v2 + 256);
        v533 = *(float64x2_t *)(v2 + 208);
        v532 = *(float64x2_t *)(v2 + 224);
        v534 = *(float64x2_t *)(v2 + 176);
        v535 = *(float64x2_t *)(v2 + 192);
        v537 = *(float64x2_t *)(v2 + 144);
        v536 = *(float64x2_t *)(v2 + 160);
        v539 = *(float64x2_t *)(v2 + 112);
        v538 = *(float64x2_t *)(v2 + 128);
        v541 = *(float64x2_t *)(v2 + 80);
        v540 = *(float64x2_t *)(v2 + 96);
        v542 = *(float64x2_t *)(v2 + 48);
        v543 = *(float64x2_t *)(v2 + 64);
        v544 = *(float64x2_t *)(v2 + 16);
        v545 = *(float64x2_t *)(v2 + 32);
        v637 = vmulq_n_f64(*(float64x2_t *)v2, v515);
        v636 = vmulq_n_f64(v544, v515);
        v635 = vmulq_n_f64(v545, v515);
        v634 = vmulq_n_f64(v542, v515);
        v633 = vmulq_n_f64(v543, v515);
        v546 = vmulq_n_f64(*(float64x2_t *)(v2 + 496), v515);
        v547 = vmulq_n_f64(*(float64x2_t *)(v2 + 512), v515);
        v548 = vmulq_n_f64(*(float64x2_t *)(v2 + 528), v515);
        v549 = *(float64x2_t *)(v2 + 560);
        *(float64x2_t *)(v2 + 544) = vmulq_n_f64(*(float64x2_t *)(v2 + 544), v515);
        *(float64x2_t *)(v2 + 560) = vmulq_n_f64(v549, v515);
        *(float64x2_t *)(v2 + 512) = v547;
        *(float64x2_t *)(v2 + 528) = v548;
        *(float64x2_t *)(v2 + 480) = vmulq_n_f64(v516, v515);
        *(float64x2_t *)(v2 + 496) = v546;
        *(float64x2_t *)(v2 + 448) = vmulq_n_f64(v518, v515);
        *(float64x2_t *)(v2 + 464) = vmulq_n_f64(v517, v515);
        *(float64x2_t *)(v2 + 416) = vmulq_n_f64(v520, v515);
        *(float64x2_t *)(v2 + 432) = vmulq_n_f64(v519, v515);
        *(float64x2_t *)(v2 + 384) = vmulq_n_f64(v522, v515);
        *(float64x2_t *)(v2 + 400) = vmulq_n_f64(v521, v515);
        *(float64x2_t *)(v2 + 352) = vmulq_n_f64(v524, v515);
        *(float64x2_t *)(v2 + 368) = vmulq_n_f64(v523, v515);
        *(float64x2_t *)(v2 + 320) = vmulq_n_f64(v526, v515);
        *(float64x2_t *)(v2 + 336) = vmulq_n_f64(v525, v515);
        *(float64x2_t *)(v2 + 288) = vmulq_n_f64(v528, v515);
        *(float64x2_t *)(v2 + 304) = vmulq_n_f64(v527, v515);
        *(float64x2_t *)(v2 + 256) = vmulq_n_f64(v530, v515);
        *(float64x2_t *)(v2 + 272) = vmulq_n_f64(v529, v515);
        *(float64x2_t *)(v2 + 224) = vmulq_n_f64(v532, v515);
        *(float64x2_t *)(v2 + 240) = vmulq_n_f64(v531, v515);
        *(float64x2_t *)(v2 + 192) = vmulq_n_f64(v535, v515);
        *(float64x2_t *)(v2 + 208) = vmulq_n_f64(v533, v515);
        *(float64x2_t *)(v2 + 160) = vmulq_n_f64(v536, v515);
        *(float64x2_t *)(v2 + 176) = vmulq_n_f64(v534, v515);
        *(float64x2_t *)(v2 + 128) = vmulq_n_f64(v538, v515);
        *(float64x2_t *)(v2 + 144) = vmulq_n_f64(v537, v515);
        *(float64x2_t *)(v2 + 96) = vmulq_n_f64(v540, v515);
        *(float64x2_t *)(v2 + 112) = vmulq_n_f64(v539, v515);
        *(float64x2_t *)(v2 + 64) = v633;
        *(float64x2_t *)(v2 + 80) = vmulq_n_f64(v541, v515);
        *(float64x2_t *)(v2 + 48) = v634;
        *(float64x2_t *)(v2 + 32) = v635;
        *(float64x2_t *)(v2 + 16) = v636;
        *(float64x2_t *)v2 = v637;
        break;
      case 4:
        v550 = (*(_QWORD *(**)(float64x2_t *__return_ptr, float64x2_t *))(*(_QWORD *)&v3->f64[0] + 56))(&v1406, v3);
        MEMORY[0x24BDAC7A8](v550);
        result = (int8x16_t *)memcpy(&v590[36], v5, 0x240uLL);
        v635 = v1435;
        v633 = v1441;
        v632 = v1447;
        v631 = v1453;
        v630 = v1459;
        v626 = v1465;
        v615 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1406, v590[42].f64[0]), v1412, v590[42], 1), v1418, v590[43].f64[0]), v1424, v590[43], 1), v1430, v590[44].f64[0]), v1436, v590[44],
                             1),
                           v1442,
                           v590[45].f64[0]),
                         v1448,
                         v590[45],
                         1),
                       v1454,
                       v590[46].f64[0]),
                     v1460,
                     v590[46],
                     1),
                   v1466,
                   v590[47].f64[0]),
                 v1472,
                 v590[47],
                 1);
        v616 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1407, v590[36].f64[0]), v1413, v590[36], 1), v1419, v590[37].f64[0]), v1425, v590[37], 1), v1431, v590[38].f64[0]), v1437, v590[38],
                             1),
                           v1443,
                           v590[39].f64[0]),
                         v1449,
                         v590[39],
                         1),
                       v1455,
                       v590[40].f64[0]),
                     v1461,
                     v590[40],
                     1),
                   v1467,
                   v590[41].f64[0]),
                 v1473,
                 v590[41],
                 1);
        v618 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1407, v590[42].f64[0]), v1413, v590[42], 1), v1419, v590[43].f64[0]), v1425, v590[43], 1), v1431, v590[44].f64[0]), v1437, v590[44],
                             1),
                           v1443,
                           v590[45].f64[0]),
                         v1449,
                         v590[45],
                         1),
                       v1455,
                       v590[46].f64[0]),
                     v1461,
                     v590[46],
                     1),
                   v1467,
                   v590[47].f64[0]),
                 v1473,
                 v590[47],
                 1);
        v619 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1406, v590[36].f64[0]), v1412, v590[36], 1), v1418, v590[37].f64[0]), v1424, v590[37], 1), v1430, v590[38].f64[0]), v1436, v590[38],
                             1),
                           v1442,
                           v590[39].f64[0]),
                         v1448,
                         v590[39],
                         1),
                       v1454,
                       v590[40].f64[0]),
                     v1460,
                     v590[40],
                     1),
                   v1466,
                   v590[41].f64[0]),
                 v1472,
                 v590[41],
                 1);
        v617 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1406, v590[48].f64[0]), v1412, v590[48], 1), v1418, v590[49].f64[0]), v1424, v590[49], 1), v1430, v590[50].f64[0]), v1436, v590[50],
                             1),
                           v1442,
                           v590[51].f64[0]),
                         v1448,
                         v590[51],
                         1),
                       v1454,
                       v590[52].f64[0]),
                     v1460,
                     v590[52],
                     1),
                   v1466,
                   v590[53].f64[0]),
                 v1472,
                 v590[53],
                 1);
        v614 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1407, v590[48].f64[0]), v1413, v590[48], 1), v1419, v590[49].f64[0]), v1425, v590[49], 1), v1431, v590[50].f64[0]), v1437, v590[50],
                             1),
                           v1443,
                           v590[51].f64[0]),
                         v1449,
                         v590[51],
                         1),
                       v1455,
                       v590[52].f64[0]),
                     v1461,
                     v590[52],
                     1),
                   v1467,
                   v590[53].f64[0]),
                 v1473,
                 v590[53],
                 1);
        v592 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1407, v590[54].f64[0]), v1413, v590[54], 1), v1419, v590[55].f64[0]), v1425, v590[55], 1), v1431, v590[56].f64[0]), v1437, v590[56],
                             1),
                           v1443,
                           v590[57].f64[0]),
                         v1449,
                         v590[57],
                         1),
                       v1455,
                       v590[58].f64[0]),
                     v1461,
                     v590[58],
                     1),
                   v1467,
                   v590[59].f64[0]),
                 v1473,
                 v590[59],
                 1);
        v593 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1406, v590[54].f64[0]), v1412, v590[54], 1), v1418, v590[55].f64[0]), v1424, v590[55], 1), v1430, v590[56].f64[0]), v1436, v590[56],
                             1),
                           v1442,
                           v590[57].f64[0]),
                         v1448,
                         v590[57],
                         1),
                       v1454,
                       v590[58].f64[0]),
                     v1460,
                     v590[58],
                     1),
                   v1466,
                   v590[59].f64[0]),
                 v1472,
                 v590[59],
                 1);
        v591 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1408, v590[36].f64[0]), v1414, v590[36], 1), v1420, v590[37].f64[0]), v1426, v590[37], 1), v1432, v590[38].f64[0]), v1438, v590[38],
                             1),
                           v1444,
                           v590[39].f64[0]),
                         v1450,
                         v590[39],
                         1),
                       v1456,
                       v590[40].f64[0]),
                     v1462,
                     v590[40],
                     1),
                   v1468,
                   v590[41].f64[0]),
                 v1474,
                 v590[41],
                 1);
        v551 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1409, v590[36].f64[0]), v1415, v590[36], 1), v1421, v590[37].f64[0]), v1427, v590[37], 1), v1433, v590[38].f64[0]), v1439, v590[38],
                             1),
                           v1445,
                           v590[39].f64[0]),
                         v1451,
                         v590[39],
                         1),
                       v1457,
                       v590[40].f64[0]),
                     v1463,
                     v590[40],
                     1),
                   v1469,
                   v590[41].f64[0]),
                 v1475,
                 v590[41],
                 1);
        v552 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1408, v590[42].f64[0]), v1414, v590[42], 1), v1420, v590[43].f64[0]), v1426, v590[43], 1), v1432, v590[44].f64[0]), v1438, v590[44],
                             1),
                           v1444,
                           v590[45].f64[0]),
                         v1450,
                         v590[45],
                         1),
                       v1456,
                       v590[46].f64[0]),
                     v1462,
                     v590[46],
                     1),
                   v1468,
                   v590[47].f64[0]),
                 v1474,
                 v590[47],
                 1);
        v553 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1409, v590[42].f64[0]), v1415, v590[42], 1), v1421, v590[43].f64[0]), v1427, v590[43], 1), v1433, v590[44].f64[0]), v1439, v590[44],
                             1),
                           v1445,
                           v590[45].f64[0]),
                         v1451,
                         v590[45],
                         1),
                       v1457,
                       v590[46].f64[0]),
                     v1463,
                     v590[46],
                     1),
                   v1469,
                   v590[47].f64[0]),
                 v1475,
                 v590[47],
                 1);
        v554 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1408, v590[48].f64[0]), v1414, v590[48], 1), v1420, v590[49].f64[0]), v1426, v590[49], 1), v1432, v590[50].f64[0]), v1438, v590[50],
                             1),
                           v1444,
                           v590[51].f64[0]),
                         v1450,
                         v590[51],
                         1),
                       v1456,
                       v590[52].f64[0]),
                     v1462,
                     v590[52],
                     1),
                   v1468,
                   v590[53].f64[0]),
                 v1474,
                 v590[53],
                 1);
        v555 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1409, v590[48].f64[0]), v1415, v590[48], 1), v1421, v590[49].f64[0]), v1427, v590[49], 1), v1433, v590[50].f64[0]), v1439, v590[50],
                             1),
                           v1445,
                           v590[51].f64[0]),
                         v1451,
                         v590[51],
                         1),
                       v1457,
                       v590[52].f64[0]),
                     v1463,
                     v590[52],
                     1),
                   v1469,
                   v590[53].f64[0]),
                 v1475,
                 v590[53],
                 1);
        v556 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1408, v590[54].f64[0]), v1414, v590[54], 1), v1420, v590[55].f64[0]), v1426, v590[55], 1), v1432, v590[56].f64[0]), v1438, v590[56],
                             1),
                           v1444,
                           v590[57].f64[0]),
                         v1450,
                         v590[57],
                         1),
                       v1456,
                       v590[58].f64[0]),
                     v1462,
                     v590[58],
                     1),
                   v1468,
                   v590[59].f64[0]),
                 v1474,
                 v590[59],
                 1);
        v557 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1409, v590[54].f64[0]), v1415, v590[54], 1), v1421, v590[55].f64[0]), v1427, v590[55], 1), v1433, v590[56].f64[0]), v1439, v590[56],
                             1),
                           v1445,
                           v590[57].f64[0]),
                         v1451,
                         v590[57],
                         1),
                       v1457,
                       v590[58].f64[0]),
                     v1463,
                     v590[58],
                     1),
                   v1469,
                   v590[59].f64[0]),
                 v1475,
                 v590[59],
                 1);
        v604 = v1440;
        v605 = v1434;
        v601 = v1446;
        v599 = v1452;
        v606 = v1458;
        v603 = v1464;
        v558 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1410, v590[36].f64[0]), v1416, v590[36], 1), v1422, v590[37].f64[0]), v1428, v590[37], 1), v1434, v590[38].f64[0]), v1440, v590[38],
                             1),
                           v1446,
                           v590[39].f64[0]),
                         v1452,
                         v590[39],
                         1),
                       v1458,
                       v590[40].f64[0]),
                     v1464,
                     v590[40],
                     1),
                   v1470,
                   v590[41].f64[0]),
                 v1476,
                 v590[41],
                 1);
        v559 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1411, v590[36].f64[0]), v1417, v590[36], 1), v1423, v590[37].f64[0]), v1429, v590[37], 1), v1435, v590[38].f64[0]), v1441, v590[38],
                             1),
                           v1447,
                           v590[39].f64[0]),
                         v1453,
                         v590[39],
                         1),
                       v1459,
                       v590[40].f64[0]),
                     v1465,
                     v590[40],
                     1),
                   v1471,
                   v590[41].f64[0]),
                 v1477,
                 v590[41],
                 1);
        v560 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1410, v590[42].f64[0]), v1416, v590[42], 1), v1422, v590[43].f64[0]), v1428, v590[43], 1), v1434, v590[44].f64[0]), v1440, v590[44],
                             1),
                           v1446,
                           v590[45].f64[0]),
                         v1452,
                         v590[45],
                         1),
                       v1458,
                       v590[46].f64[0]),
                     v1464,
                     v590[46],
                     1),
                   v1470,
                   v590[47].f64[0]),
                 v1476,
                 v590[47],
                 1);
        v561 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1411, v590[42].f64[0]), v1417, v590[42], 1), v1423, v590[43].f64[0]), v1429, v590[43], 1), v1435, v590[44].f64[0]), v1441, v590[44],
                             1),
                           v1447,
                           v590[45].f64[0]),
                         v1453,
                         v590[45],
                         1),
                       v1459,
                       v590[46].f64[0]),
                     v1465,
                     v590[46],
                     1),
                   v1471,
                   v590[47].f64[0]),
                 v1477,
                 v590[47],
                 1);
        v562 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1410, v590[48].f64[0]), v1416, v590[48], 1), v1422, v590[49].f64[0]), v1428, v590[49], 1), v1434, v590[50].f64[0]), v1440, v590[50],
                             1),
                           v1446,
                           v590[51].f64[0]),
                         v1452,
                         v590[51],
                         1),
                       v1458,
                       v590[52].f64[0]),
                     v1464,
                     v590[52],
                     1),
                   v1470,
                   v590[53].f64[0]),
                 v1476,
                 v590[53],
                 1);
        v563 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1411, v590[48].f64[0]), v1417, v590[48], 1), v1423, v590[49].f64[0]), v1429, v590[49], 1), v1435, v590[50].f64[0]), v1441, v590[50],
                             1),
                           v1447,
                           v590[51].f64[0]),
                         v1453,
                         v590[51],
                         1),
                       v1459,
                       v590[52].f64[0]),
                     v1465,
                     v590[52],
                     1),
                   v1471,
                   v590[53].f64[0]),
                 v1477,
                 v590[53],
                 1);
        v564 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1410, v590[54].f64[0]), v1416, v590[54], 1), v1422, v590[55].f64[0]), v1428, v590[55], 1), v1434, v590[56].f64[0]), v1440, v590[56],
                             1),
                           v1446,
                           v590[57].f64[0]),
                         v1452,
                         v590[57],
                         1),
                       v1458,
                       v590[58].f64[0]),
                     v1464,
                     v590[58],
                     1),
                   v1470,
                   v590[59].f64[0]),
                 v1476,
                 v590[59],
                 1);
        v565 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1411, v590[54].f64[0]), v1417, v590[54], 1), v1423, v590[55].f64[0]), v1429, v590[55], 1), v1435, v590[56].f64[0]), v1441, v590[56],
                             1),
                           v1447,
                           v590[57].f64[0]),
                         v1453,
                         v590[57],
                         1),
                       v1459,
                       v590[58].f64[0]),
                     v1465,
                     v590[58],
                     1),
                   v1471,
                   v590[59].f64[0]),
                 v1477,
                 v590[59],
                 1);
        v623 = v590[65];
        v624 = v590[62];
        v625 = v590[68];
        v621 = v590[63];
        v622 = v590[69];
        v566 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1406, v590[60].f64[0]), v1412, v590[60], 1), v1418, v590[61].f64[0]), v1424, v590[61], 1), v1430, v590[62].f64[0]), v1436, v590[62],
                             1),
                           v1442,
                           v590[63].f64[0]),
                         v1448,
                         v590[63],
                         1),
                       v1454,
                       v590[64].f64[0]),
                     v1460,
                     v590[64],
                     1),
                   v1466,
                   v590[65].f64[0]),
                 v1472,
                 v590[65],
                 1);
        v567 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1407, v590[60].f64[0]), v1413, v590[60], 1), v1419, v590[61].f64[0]), v1425, v590[61], 1), v1431, v590[62].f64[0]), v1437, v590[62],
                             1),
                           v1443,
                           v590[63].f64[0]),
                         v1449,
                         v590[63],
                         1),
                       v1455,
                       v590[64].f64[0]),
                     v1461,
                     v590[64],
                     1),
                   v1467,
                   v590[65].f64[0]),
                 v1473,
                 v590[65],
                 1);
        v627 = v590[64];
        v628 = v590[70];
        v568 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1406, v590[66].f64[0]), v1412, v590[66], 1), v1418, v590[67].f64[0]), v1424, v590[67], 1), v1430, v590[68].f64[0]), v1436, v590[68],
                             1),
                           v1442,
                           v590[69].f64[0]),
                         v1448,
                         v590[69],
                         1),
                       v1454,
                       v590[70].f64[0]),
                     v1460,
                     v590[70],
                     1),
                   v1466,
                   v590[71].f64[0]),
                 v1472,
                 v590[71],
                 1);
        v569 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1407, v590[66].f64[0]), v1413, v590[66], 1), v1419, v590[67].f64[0]), v1425, v590[67], 1), v1431, v590[68].f64[0]), v1437, v590[68],
                             1),
                           v1443,
                           v590[69].f64[0]),
                         v1449,
                         v590[69],
                         1),
                       v1455,
                       v590[70].f64[0]),
                     v1461,
                     v590[70],
                     1),
                   v1467,
                   v590[71].f64[0]),
                 v1473,
                 v590[71],
                 1);
        v570 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1408, v590[60].f64[0]), v1414, v590[60], 1), v1420, v590[61].f64[0]), v1426, v590[61], 1), v1432, v590[62].f64[0]), v1438, v590[62],
                             1),
                           v1444,
                           v590[63].f64[0]),
                         v1450,
                         v590[63],
                         1),
                       v1456,
                       v590[64].f64[0]),
                     v1462,
                     v590[64],
                     1),
                   v1468,
                   v590[65].f64[0]),
                 v1474,
                 v590[65],
                 1);
        v571 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1409, v590[60].f64[0]), v1415, v590[60], 1), v1421, v590[61].f64[0]), v1427, v590[61], 1), v1433, v590[62].f64[0]), v1439, v590[62],
                             1),
                           v1445,
                           v590[63].f64[0]),
                         v1451,
                         v590[63],
                         1),
                       v1457,
                       v590[64].f64[0]),
                     v1463,
                     v590[64],
                     1),
                   v1469,
                   v590[65].f64[0]),
                 v1475,
                 v590[65],
                 1);
        v572 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1408, v590[66].f64[0]), v1414, v590[66], 1), v1420, v590[67].f64[0]), v1426, v590[67], 1), v1432, v590[68].f64[0]), v1438, v590[68],
                             1),
                           v1444,
                           v590[69].f64[0]),
                         v1450,
                         v590[69],
                         1),
                       v1456,
                       v590[70].f64[0]),
                     v1462,
                     v590[70],
                     1),
                   v1468,
                   v590[71].f64[0]),
                 v1474,
                 v590[71],
                 1);
        v573 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1409, v590[66].f64[0]), v1415, v590[66], 1), v1421, v590[67].f64[0]), v1427, v590[67], 1), v1433, v590[68].f64[0]), v1439, v590[68],
                             1),
                           v1445,
                           v590[69].f64[0]),
                         v1451,
                         v590[69],
                         1),
                       v1457,
                       v590[70].f64[0]),
                     v1463,
                     v590[70],
                     1),
                   v1469,
                   v590[71].f64[0]),
                 v1475,
                 v590[71],
                 1);
        v574 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1410, v590[60].f64[0]), v1416, v590[60], 1), v1422, v590[61].f64[0]), v1428, v590[61], 1);
        v575 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1411, v590[60].f64[0]), v1417, v590[60], 1), v1423, v590[61].f64[0]), v1429, v590[61], 1);
        v576 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1410, v590[66].f64[0]), v1416, v590[66], 1), v1422, v590[67].f64[0]), v1428, v590[67], 1);
        v577 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1411, v590[66].f64[0]), v1417, v590[66], 1), v1423, v590[67].f64[0]), v1429, v590[67], 1);
        v578 = v616;
        *v5 = v619;
        v5[1] = v578;
        v579 = v618;
        v5[6] = v615;
        v5[7] = v579;
        v580 = v614;
        v5[12] = v617;
        v5[13] = v580;
        v581 = v592;
        v5[18] = v593;
        v5[19] = v581;
        v5[2] = v591;
        v5[3] = v551;
        v5[8] = v552;
        v5[9] = v553;
        v5[14] = v554;
        v5[15] = v555;
        v5[20] = v556;
        v5[21] = v557;
        v5[4] = v558;
        v5[5] = v559;
        v5[10] = v560;
        v5[11] = v561;
        v5[16] = v562;
        v5[17] = v563;
        v5[22] = v564;
        v5[23] = v565;
        v5[24] = v566;
        v5[25] = v567;
        v5[30] = v568;
        v5[31] = v569;
        v5[26] = v570;
        v5[27] = v571;
        v5[32] = v572;
        v5[33] = v573;
        v582 = v1471;
        v583 = v1477;
        v584 = v590[71];
        v585 = v626;
        v586 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v575, v635, v624.f64[0]), v633, v624, 1), v632, v621.f64[0]), v631, v621, 1), v630, v627.f64[0]), v626, v627, 1), v1471, v623.f64[0]), v1477,
                 v623,
                 1);
        v587 = v628;
        v588 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v576, v605, v625.f64[0]), v604, v625, 1), v601, v622.f64[0]), v599, v622, 1), v606, v628.f64[0]), v603, v628, 1), v1470, v590[71].f64[0]), v1476,
                 v590[71],
                 1);
        v589 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v577, v635, v625.f64[0]), v633, v625, 1), v632, v622.f64[0]), v631, v622, 1), v630, v628.f64[0]);
        v5[28] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v574, v605, v624.f64[0]), v604, v624, 1), v601, v621.f64[0]), v599, v621, 1), v606, v627.f64[0]), v603, v627, 1), v1470, v623.f64[0]), v1476,
                   v623,
                   1);
        v5[29] = v586;
        v5[34] = v588;
        v5[35] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v589, v585, v587, 1), v582, v584.f64[0]), v583, v584, 1);
        break;
      default:
        return result;
    }
  }
  return result;
}

double sub_239C86C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const double *v4;
  uint64_t v5;
  double result;
  __int128 v7;
  _OWORD __Y[2];
  __int128 v9;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(const double **)(v3 + 8);
  if (&v4[-*(unsigned int *)(v3 + 16)] == (const double *)a1 || (v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)v5 == a1))
  {
    sub_239C86C4C(__Y);
    v7 = __Y[1];
    *(_OWORD *)a1 = __Y[0];
    *(_OWORD *)(a1 + 16) = v7;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 32) = v9;
  }
  else if (6 * *(_DWORD *)v3 && *(_DWORD *)(v5 + 16))
  {
    sub_239A22E8C(0, 6, *(_DWORD *)v3, v4, *(_DWORD *)(v3 + 4), *(const double **)v5, 1, (double *)a1, *(double *)(a2 + 24), 0.0, 1);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

void sub_239C86D04(double *a1, uint64_t a2)
{
  uint64_t v3;
  const double *v4;
  uint64_t v5;
  double __Y;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(const double **)(v3 + 8);
  if (&v4[-*(unsigned int *)(v3 + 16)] == a1 || (v5 = *(_QWORD *)(a2 + 16), *(double **)v5 == a1))
  {
    sub_239C86D04(&__Y);
    *a1 = __Y;
  }
  else if (*(_DWORD *)v3 && *(_DWORD *)(v5 + 16))
  {
    sub_239A22E8C(0, 1, *(_DWORD *)v3, v4, *(_DWORD *)(v3 + 4), *(const double **)v5, 1, a1, *(double *)(a2 + 24), 0.0, 1);
  }
  else
  {
    *a1 = 0.0;
  }
}

_QWORD *sub_239C86DA4(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int *v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  if (a4 != a5)
  {
    v39 = v5;
    v40 = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v34 = a5;
      v35 = result + 2;
      v32 = a2;
      v33 = a3;
      v31 = result;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v8 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v8)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return result;
      }
      v10 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 24 * *v7);
      v11 = result[11] + 24 * v7[1];
      v12 = *v10;
      v13 = v10[1];
      while (1)
      {
        if (v12 == v13)
          goto LABEL_4;
        v14 = *v9;
        while (*(_DWORD *)v12 != v14)
        {
          if (*(_DWORD *)v12 > v14)
            goto LABEL_30;
          v12 += 16;
          if (v12 == v13)
            goto LABEL_4;
        }
        v15 = *(_QWORD *)(v12 + 8);
        v16 = *(_QWORD *)(a2 + 16);
        v17 = v9[1];
        v18 = *(char **)v11;
        v19 = *(char **)(v11 + 8);
        if (*(char **)v11 != v19)
        {
          while (*(_DWORD *)v18 < v17)
          {
            v18 += 16;
            if (v18 == v19)
              goto LABEL_21;
          }
        }
        if (v18 != v19)
        {
          if (*(_DWORD *)v18 == v17)
          {
            v20 = (_QWORD *)(*v35 + 8 * *((_QWORD *)v18 + 1));
            goto LABEL_29;
          }
          v19 = v18;
        }
LABEL_21:
        v21 = result[10];
        v36 = *(_QWORD *)(a2 + 16);
        v37 = *(_QWORD *)(v12 + 8);
        if (v21)
        {
          v23 = result[6];
          v22 = result[7];
          v24 = ((v22 - v23) << 6) - 1;
          v25 = result[9];
          if (v22 == v23)
            v24 = 0;
          v20 = (_QWORD *)(result[2]
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v23 + (((unint64_t)(v25 + v21 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v25 + v21 - 1) & 0x1FF)));
          result[10] = v21 - 1;
          if ((unint64_t)(v24 - (v21 + v25) + 1) >= 0x400)
          {
            v26 = result;
            operator delete(*(void **)(v22 - 8));
            v26[7] -= 8;
          }
          v27 = v35;
        }
        else
        {
          v28 = (void *)result[3];
          *(_QWORD *)&v38 = 0;
          v27 = v35;
          v29 = result;
          sub_239C2323C(v35, v28, 1uLL, (uint64_t *)&v38);
          v20 = (_QWORD *)(v29[3] - 8);
        }
        v30 = (uint64_t)((uint64_t)v20 - *v27) >> 3;
        LODWORD(v38) = v17;
        *((_QWORD *)&v38 + 1) = v30;
        sub_239C22598((char **)v11, v19, &v38);
        a3 = v33;
        a5 = v34;
        result = v31;
        a2 = v32;
        v16 = v36;
        v15 = v37;
LABEL_29:
        *v20 = *(_QWORD *)(v16 + 8 * v15);
LABEL_30:
        if (v12 != v13)
        {
          v9 += 2;
          if (v9 != v8)
            continue;
        }
        goto LABEL_4;
      }
    }
  }
  return result;
}

_QWORD *sub_239C86FCC(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  char *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned int *v52;
  unint64_t *v53;
  uint64_t v54;
  unsigned int *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  if (a4 != a5)
  {
    v57 = v5;
    v58 = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v52 = a5;
      v53 = result + 2;
      v50 = a2;
      v51 = a3;
      v49 = result;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v8 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v8)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return result;
      }
      v10 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 24 * *v7);
      v11 = result[11] + 24 * v7[1];
      v12 = *v10;
      v13 = v10[1];
      while (1)
      {
        if (v12 == v13)
          goto LABEL_4;
        v14 = *v9;
        while (*(_DWORD *)v12 != v14)
        {
          if (*(_DWORD *)v12 > v14)
            goto LABEL_30;
          v12 += 16;
          if (v12 == v13)
            goto LABEL_4;
        }
        v15 = *(_QWORD *)(v12 + 8);
        v16 = *(_QWORD *)(a2 + 16);
        v17 = v9[1];
        v18 = *(char **)v11;
        v19 = *(char **)(v11 + 8);
        if (*(char **)v11 != v19)
        {
          while (*(_DWORD *)v18 < v17)
          {
            v18 += 16;
            if (v18 == v19)
              goto LABEL_21;
          }
        }
        if (v18 != v19)
        {
          if (*(_DWORD *)v18 == v17)
          {
            v20 = (_OWORD *)(*v53 + 8 * *((_QWORD *)v18 + 1));
            goto LABEL_29;
          }
          v19 = v18;
        }
LABEL_21:
        v21 = result[10];
        v54 = *(_QWORD *)(a2 + 16);
        v55 = v8;
        if (v21)
        {
          v23 = result[6];
          v22 = result[7];
          v24 = ((v22 - v23) << 6) - 1;
          v25 = result[9];
          if (v22 == v23)
            v24 = 0;
          v20 = (_OWORD *)(result[2]
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v23 + (((unint64_t)(v25 + v21 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v25 + v21 - 1) & 0x1FF)));
          result[10] = v21 - 1;
          if ((unint64_t)(v24 - (v21 + v25) + 1) >= 0x400)
          {
            v26 = result;
            operator delete(*(void **)(v22 - 8));
            v26[7] -= 8;
          }
          v27 = v53;
        }
        else
        {
          v28 = (void *)result[3];
          *(_QWORD *)&v56 = 0;
          v27 = v53;
          v29 = result;
          sub_239C2323C(v53, v28, 0x24uLL, (uint64_t *)&v56);
          v20 = (_OWORD *)(v29[3] - 288);
        }
        v30 = (uint64_t)((uint64_t)v20 - *v27) >> 3;
        LODWORD(v56) = v17;
        *((_QWORD *)&v56 + 1) = v30;
        sub_239C22598((char **)v11, v19, &v56);
        a3 = v51;
        a5 = v52;
        result = v49;
        a2 = v50;
        v16 = v54;
        v8 = v55;
LABEL_29:
        v31 = (__int128 *)(v16 + 8 * v15);
        v32 = *v31;
        v33 = v31[1];
        v34 = v31[2];
        v35 = v31[3];
        v36 = v31[4];
        v37 = v31[5];
        v38 = v31[6];
        v39 = v31[7];
        v40 = v31[8];
        v41 = v31[9];
        v42 = v31[10];
        v43 = v31[11];
        v44 = v31[12];
        v45 = v31[13];
        v46 = v31[14];
        v47 = v31[15];
        v48 = v31[17];
        v20[16] = v31[16];
        v20[17] = v48;
        v20[14] = v46;
        v20[15] = v47;
        v20[12] = v44;
        v20[13] = v45;
        v20[10] = v42;
        v20[11] = v43;
        v20[8] = v40;
        v20[9] = v41;
        v20[6] = v38;
        v20[7] = v39;
        v20[4] = v36;
        v20[5] = v37;
        v20[2] = v34;
        v20[3] = v35;
        *v20 = v32;
        v20[1] = v33;
LABEL_30:
        if (v12 != v13)
        {
          v9 += 2;
          if (v9 != v8)
            continue;
        }
        goto LABEL_4;
      }
    }
  }
  return result;
}

_QWORD *sub_239C87238(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  char *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int *v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  if (a4 != a5)
  {
    v42 = v5;
    v43 = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v37 = a5;
      v38 = result + 2;
      v35 = a2;
      v36 = a3;
      v34 = result;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v8 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v8)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return result;
      }
      v10 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 24 * *v7);
      v11 = result[11] + 24 * v7[1];
      v12 = *v10;
      v13 = v10[1];
      while (1)
      {
        if (v12 == v13)
          goto LABEL_4;
        v14 = *v9;
        while (*(_DWORD *)v12 != v14)
        {
          if (*(_DWORD *)v12 > v14)
            goto LABEL_30;
          v12 += 16;
          if (v12 == v13)
            goto LABEL_4;
        }
        v15 = *(_QWORD *)(v12 + 8);
        v16 = *(_QWORD *)(a2 + 16);
        v17 = v9[1];
        v18 = *(char **)v11;
        v19 = *(char **)(v11 + 8);
        if (*(char **)v11 != v19)
        {
          while (*(_DWORD *)v18 < v17)
          {
            v18 += 16;
            if (v18 == v19)
              goto LABEL_21;
          }
        }
        if (v18 != v19)
        {
          if (*(_DWORD *)v18 == v17)
          {
            v20 = (_OWORD *)(*v38 + 8 * *((_QWORD *)v18 + 1));
            goto LABEL_29;
          }
          v19 = v18;
        }
LABEL_21:
        v21 = result[10];
        v39 = *(_QWORD *)(a2 + 16);
        v40 = *(_QWORD *)(v12 + 8);
        if (v21)
        {
          v23 = result[6];
          v22 = result[7];
          v24 = ((v22 - v23) << 6) - 1;
          v25 = result[9];
          if (v22 == v23)
            v24 = 0;
          v20 = (_OWORD *)(result[2]
                         + 8
                         * *(_QWORD *)(*(_QWORD *)(v23 + (((unint64_t)(v25 + v21 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v25 + v21 - 1) & 0x1FF)));
          result[10] = v21 - 1;
          if ((unint64_t)(v24 - (v21 + v25) + 1) >= 0x400)
          {
            v26 = result;
            operator delete(*(void **)(v22 - 8));
            v26[7] -= 8;
          }
          v27 = v38;
        }
        else
        {
          v28 = (void *)result[3];
          *(_QWORD *)&v41 = 0;
          v27 = v38;
          v29 = result;
          sub_239C2323C(v38, v28, 6uLL, (uint64_t *)&v41);
          v20 = (_OWORD *)(v29[3] - 48);
        }
        v30 = (uint64_t)((uint64_t)v20 - *v27) >> 3;
        LODWORD(v41) = v17;
        *((_QWORD *)&v41 + 1) = v30;
        sub_239C22598((char **)v11, v19, &v41);
        a3 = v36;
        a5 = v37;
        result = v34;
        a2 = v35;
        v16 = v39;
        v15 = v40;
LABEL_29:
        v31 = (__int128 *)(v16 + 8 * v15);
        v32 = *v31;
        v33 = v31[2];
        v20[1] = v31[1];
        v20[2] = v33;
        *v20 = v32;
LABEL_30:
        if (v12 != v13)
        {
          v9 += 2;
          if (v9 != v8)
            continue;
        }
        goto LABEL_4;
      }
    }
  }
  return result;
}

uint64_t sub_239C8746C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int *v8;
  int v9;
  unsigned int *v10;
  unsigned int *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t i;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  BOOL v30;
  uint64_t *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  BOOL v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;
  void *v65[2];
  void *v66;
  unsigned int v67;
  void *v68;
  void *__p;
  unsigned int v70;
  void **v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74[2];
  unsigned int v75;
  unsigned int v76;
  void *v77[2];
  __int128 v78;
  int v79;
  __int128 v80;
  __int128 v81;
  int v82;
  __int128 v83;
  __int128 v84;
  int v85;
  __int128 v86;
  __int128 v87;
  int v88;

  if (!*(_BYTE *)(a1 + 96))
  {
    v83 = 0u;
    v84 = 0u;
    v86 = 0u;
    v87 = 0u;
    v85 = 1065353216;
    v88 = 1065353216;
    v78 = 0u;
    *(_OWORD *)v77 = 0u;
    v80 = 0u;
    v81 = 0u;
    v79 = 1065353216;
    v82 = 1065353216;
    v75 = 0;
    v7 = (unsigned int *)(a1 + 16);
    v8 = *(unsigned int **)(a1 + 8);
    if (v8 == (unsigned int *)(a1 + 16))
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      do
      {
        if ((v8[47] & 6) != 0)
        {
          sub_239456168((uint64_t)&v83, v8 + 8, v8 + 8);
          v9 = 1;
        }
        if (*((_BYTE *)v8 + 44))
          ++v75;
        v10 = (unsigned int *)*((_QWORD *)v8 + 1);
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = *(unsigned int **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (unsigned int *)*((_QWORD *)v8 + 2);
            v6 = *(_QWORD *)v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v6);
        }
        v8 = v11;
      }
      while (v11 != v7);
    }
    v76 = 0;
    v15 = *(unsigned int **)(a1 + 32);
    v16 = (unsigned int *)(a1 + 40);
    if (v15 != (unsigned int *)(a1 + 40))
    {
      do
      {
        if ((v15[17] & 6) != 0)
        {
          sub_239456168((uint64_t)&v86, v15 + 8, v15 + 8);
          v9 = 1;
        }
        if (*((_BYTE *)v15 + 44))
          ++v76;
        v19 = (unsigned int *)*((_QWORD *)v15 + 1);
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = *(unsigned int **)v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (unsigned int *)*((_QWORD *)v15 + 2);
            v6 = *(_QWORD *)v20 == (_QWORD)v15;
            v15 = v20;
          }
          while (!v6);
        }
        v15 = v20;
      }
      while (v20 != v16);
    }
    if (v9)
    {
      v17 = *(_QWORD *)(a1 + 56);
      for (i = *(_QWORD *)(a1 + 64); v17 != i; v17 += 544)
      {
        v21 = *(_QWORD *)(v17 + 400);
        if ((*(_BYTE *)(v21 + 148) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v17 + 408) + 28) & 6) != 0)
        {
          v74[0] = *(_DWORD *)v21;
          v65[0] = v74;
          v22 = sub_2395EC77C((uint64_t)v77, v74, (uint64_t)&unk_239EC6E98, (_DWORD **)v65);
          ++*((_DWORD *)v22 + 5);
          v74[0] = **(_DWORD **)(v17 + 408);
          v65[0] = v74;
          v23 = sub_2395EC77C((uint64_t)&v80, v74, (uint64_t)&unk_239EC6E98, (_DWORD **)v65);
          ++*((_DWORD *)v23 + 5);
        }
      }
      sub_239559050((uint64_t)v65, (uint64_t)&v83);
      sub_239559050((uint64_t)&v68, (uint64_t)&v86);
      v71 = v77;
      v72 = v74;
      v73 = &v75;
      v24 = (uint64_t *)v78;
      if ((_QWORD)v78)
      {
        if (*(_QWORD *)v7)
        {
          v25 = 0;
          do
          {
            v27 = *((_DWORD *)v24 + 4);
            v26 = (unsigned int *)(a1 + 16);
            v28 = *(unsigned int **)v7;
            do
            {
              v29 = v28[8];
              v30 = v29 >= v27;
              if (v29 >= v27)
                v31 = (uint64_t *)v28;
              else
                v31 = (uint64_t *)(v28 + 2);
              if (v30)
                v26 = v28;
              v28 = (unsigned int *)*v31;
            }
            while (*v31);
            if (v26 == v7 || v27 < v26[8])
              v26 = (unsigned int *)(a1 + 16);
            if (v26[48] == *((_DWORD *)v24 + 5))
              ++v25;
            v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
        else
        {
          v25 = 0;
          do
          {
            if (*(_DWORD *)(a1 + 208) == *((_DWORD *)v24 + 5))
              ++v25;
            v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
      }
      else
      {
        v25 = 0;
      }
      v32 = v67;
      if (v25 > v67)
        v32 = v25;
      v30 = v75 >= v32;
      v33 = v75 - v32;
      if (v30)
        v34 = v33;
      else
        v34 = 0;
      v74[0] = v34;
      v35 = (uint64_t *)v81;
      if ((_QWORD)v81)
      {
        if (*(_QWORD *)v16)
        {
          v36 = 0;
          do
          {
            v38 = *((_DWORD *)v35 + 4);
            v37 = (unsigned int *)(a1 + 40);
            v39 = *(unsigned int **)v16;
            do
            {
              v40 = v39[8];
              v41 = v40 >= v38;
              if (v40 >= v38)
                v42 = (uint64_t *)v39;
              else
                v42 = (uint64_t *)(v39 + 2);
              if (v41)
                v37 = v39;
              v39 = (unsigned int *)*v42;
            }
            while (*v42);
            if (v37 == v16 || v38 < v37[8])
              v37 = (unsigned int *)(a1 + 40);
            if (v37[18] == *((_DWORD *)v35 + 5))
              ++v36;
            v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
        else
        {
          v36 = 0;
          do
          {
            if (*(_DWORD *)(a1 + 112) == *((_DWORD *)v35 + 5))
              ++v36;
            v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
      }
      else
      {
        v36 = 0;
      }
      v43 = v70;
      if (v36 > v70)
        v43 = v36;
      v30 = v76 >= v43;
      v44 = v76 - v43;
      if (v30)
        v45 = v44;
      else
        v45 = 0;
      v74[1] = v45;
      v46 = __p;
      if (__p)
      {
        do
        {
          v47 = (_QWORD *)*v46;
          operator delete(v46);
          v46 = v47;
        }
        while (v47);
      }
      v48 = v68;
      v68 = 0;
      if (v48)
        operator delete(v48);
      v49 = v66;
      if (v66)
      {
        do
        {
          v50 = (_QWORD *)*v49;
          operator delete(v49);
          v49 = v50;
        }
        while (v50);
      }
      v3 = v45 + 6 * v34;
      v51 = v65[0];
      v65[0] = 0;
      if (v51)
        operator delete(v51);
    }
    else
    {
      v3 = v76 + 6 * v75;
    }
    v52 = (_QWORD *)v81;
    if ((_QWORD)v81)
    {
      do
      {
        v53 = (_QWORD *)*v52;
        operator delete(v52);
        v52 = v53;
      }
      while (v53);
    }
    v54 = (void *)v80;
    *(_QWORD *)&v80 = 0;
    if (v54)
      operator delete(v54);
    v55 = (_QWORD *)v78;
    if ((_QWORD)v78)
    {
      do
      {
        v56 = (_QWORD *)*v55;
        operator delete(v55);
        v55 = v56;
      }
      while (v56);
    }
    v57 = v77[0];
    v77[0] = 0;
    if (v57)
      operator delete(v57);
    v58 = (_QWORD *)v87;
    if ((_QWORD)v87)
    {
      do
      {
        v59 = (_QWORD *)*v58;
        operator delete(v58);
        v58 = v59;
      }
      while (v59);
    }
    v60 = (void *)v86;
    *(_QWORD *)&v86 = 0;
    if (v60)
      operator delete(v60);
    v61 = (_QWORD *)v84;
    if ((_QWORD)v84)
    {
      do
      {
        v62 = (_QWORD *)*v61;
        operator delete(v61);
        v61 = v62;
      }
      while (v62);
    }
    v63 = (void *)v83;
    *(_QWORD *)&v83 = 0;
    if (v63)
      operator delete(v63);
    return v3;
  }
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)(a1 + 16))
  {
    v3 = 0;
    while (1)
    {
      if ((*((_BYTE *)v2 + 188) & 6) != 0)
      {
        v4 = (_QWORD *)v2[1];
        if (v4)
          goto LABEL_11;
      }
      else
      {
        if (*((_BYTE *)v2 + 44))
          v3 += 6;
        v4 = (_QWORD *)v2[1];
        if (v4)
        {
          do
          {
LABEL_11:
            v5 = v4;
            v4 = (_QWORD *)*v4;
          }
          while (v4);
          goto LABEL_4;
        }
      }
      do
      {
        v5 = (_QWORD *)v2[2];
        v6 = *v5 == (_QWORD)v2;
        v2 = v5;
      }
      while (!v6);
LABEL_4:
      v2 = v5;
      if (v5 == (_QWORD *)(a1 + 16))
        goto LABEL_30;
    }
  }
  v3 = 0;
LABEL_30:
  v12 = *(_QWORD **)(a1 + 32);
  if (v12 != (_QWORD *)(a1 + 40))
  {
    do
    {
      if ((*((_BYTE *)v12 + 68) & 6) != 0)
      {
        v13 = (_QWORD *)v12[1];
        if (v13)
          goto LABEL_37;
      }
      else
      {
        v3 += *((unsigned __int8 *)v12 + 44);
        v13 = (_QWORD *)v12[1];
        if (v13)
        {
          do
          {
LABEL_37:
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
          goto LABEL_32;
        }
      }
      do
      {
        v14 = (_QWORD *)v12[2];
        v6 = *v14 == (_QWORD)v12;
        v12 = v14;
      }
      while (!v6);
LABEL_32:
      v12 = v14;
    }
    while (v14 != (_QWORD *)(a1 + 40));
  }
  return v3;
}

void sub_239C87A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, _QWORD *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  _QWORD *v27;
  _QWORD *v28;

  v27 = __p;
  if (__p)
  {
    do
    {
      v28 = (_QWORD *)*v27;
      operator delete(v27);
      v27 = v28;
    }
    while (v28);
  }
  if (a10)
    operator delete(a10);
  sub_239C292B0((uint64_t)&a25);
  sub_239C292B0(v25 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_239C87AB0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 96))
    return *(_QWORD *)(a1 + 88);
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 == (_QWORD *)(a1 + 16))
  {
LABEL_4:
    v3 = *(_QWORD **)(a1 + 32);
    if (v3 == (_QWORD *)(a1 + 40))
      return *(_QWORD *)(a1 + 88);
    while ((*((_BYTE *)v3 + 68) & 6) == 0)
    {
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v6 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v6);
      }
      v3 = v8;
      if (v8 == (_QWORD *)(a1 + 40))
        return *(_QWORD *)(a1 + 88);
    }
  }
  else
  {
    while ((*((_BYTE *)v2 + 188) & 6) == 0)
    {
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
      if (v5 == (_QWORD *)(a1 + 16))
        goto LABEL_4;
    }
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v9 + 400) + 148) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v9 + 408) + 28) & 6) == 0)
        ++v11;
      v9 += 544;
    }
    while (v9 != v10);
  }
  return 12 * v11;
}

void sub_239C87BC8(int64x2_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64x2_t *v4;
  int64x2_t *v5;
  int64x2_t *v6;
  uint64_t *v7;
  int64x2_t *v8;
  int v9;
  int v10;
  int v11;
  int64x2_t *v12;
  int64x2_t *v13;
  BOOL v14;
  uint64_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  uint64_t *v18;
  int64x2_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int64x2_t *v22;
  uint64_t *v23;
  int64x2_t *v24;
  int64x2_t *v25;
  uint64_t *v26;
  int64x2_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  int64x2_t *v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  int64x2_t v38;
  _QWORD *v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;

  sub_239C8BBCC((uint64_t)a1);
  if (a1[6].i8[1])
  {
    v3 = a1[3].i64[1];
    v2 = a1[4].i64[0];
    if (v3 != v2)
    {
      while (!*(_BYTE *)(v3 + 536))
      {
        v3 += 544;
        if (v3 == v2)
          goto LABEL_5;
      }
      v37 = *(_QWORD *)(v3 + 408);
      --*(_DWORD *)(*(_QWORD *)(v3 + 400) + 152);
      --*(_DWORD *)(v37 + 32);
      v38 = (int64x2_t)xmmword_239F0C4C0;
      a1[5] = vaddq_s64(a1[5], (int64x2_t)xmmword_239F0C4C0);
      if (v3 != v2)
      {
        v39 = (_QWORD *)(v3 + 544);
        if (v3 + 544 == v2)
        {
          v41 = v3;
          if (v3 == v2)
            goto LABEL_5;
        }
        else
        {
          v40 = 0uLL;
          v41 = v3;
          do
          {
            v42 = v39;
            if (*(_BYTE *)(v3 + 1080))
            {
              --*(_DWORD *)(*(_QWORD *)(v3 + 944) + 152);
              --*(_DWORD *)(*(_QWORD *)(v3 + 952) + 32);
              a1[5] = vaddq_s64(a1[5], v38);
            }
            else
            {
              *(_QWORD *)v41 = *v39;
              *(_QWORD *)(v41 + 8) = *(_QWORD *)(v3 + 552);
              v43 = *(_OWORD *)(v3 + 560);
              v44 = *(_OWORD *)(v3 + 576);
              v45 = *(_OWORD *)(v3 + 592);
              *(_OWORD *)(v41 + 64) = *(_OWORD *)(v3 + 608);
              *(_OWORD *)(v41 + 48) = v45;
              *(_OWORD *)(v41 + 32) = v44;
              *(_OWORD *)(v41 + 16) = v43;
              v46 = *(_OWORD *)(v3 + 624);
              v47 = *(_OWORD *)(v3 + 640);
              v48 = *(_OWORD *)(v3 + 656);
              *(_OWORD *)(v41 + 128) = *(_OWORD *)(v3 + 672);
              *(_OWORD *)(v41 + 112) = v48;
              *(_OWORD *)(v41 + 96) = v47;
              *(_OWORD *)(v41 + 80) = v46;
              v49 = *(_OWORD *)(v3 + 784);
              v50 = *(_OWORD *)(v3 + 800);
              v51 = *(_OWORD *)(v3 + 768);
              *(_OWORD *)(v41 + 208) = *(_OWORD *)(v3 + 752);
              *(_OWORD *)(v41 + 256) = v50;
              *(_OWORD *)(v41 + 240) = v49;
              *(_OWORD *)(v41 + 224) = v51;
              v52 = *(_OWORD *)(v3 + 688);
              v53 = *(_OWORD *)(v3 + 704);
              v54 = *(_OWORD *)(v3 + 720);
              *(_OWORD *)(v41 + 192) = *(_OWORD *)(v3 + 736);
              *(_OWORD *)(v41 + 176) = v54;
              *(_OWORD *)(v41 + 160) = v53;
              *(_OWORD *)(v41 + 144) = v52;
              v55 = *(_OWORD *)(v3 + 912);
              v56 = *(_OWORD *)(v3 + 928);
              v57 = *(_OWORD *)(v3 + 896);
              *(_OWORD *)(v41 + 336) = *(_OWORD *)(v3 + 880);
              *(_OWORD *)(v41 + 384) = v56;
              *(_OWORD *)(v41 + 368) = v55;
              *(_OWORD *)(v41 + 352) = v57;
              v58 = *(_OWORD *)(v3 + 816);
              v59 = *(_OWORD *)(v3 + 832);
              v60 = *(_OWORD *)(v3 + 848);
              *(_OWORD *)(v41 + 320) = *(_OWORD *)(v3 + 864);
              *(_OWORD *)(v41 + 304) = v60;
              *(_OWORD *)(v41 + 288) = v59;
              *(_OWORD *)(v41 + 272) = v58;
              *(_QWORD *)(v41 + 400) = *(_QWORD *)(v3 + 944);
              *(_QWORD *)(v41 + 408) = *(_QWORD *)(v3 + 952);
              v61 = *(_OWORD *)(v3 + 960);
              *(_OWORD *)(v41 + 432) = *(_OWORD *)(v3 + 976);
              *(_OWORD *)(v41 + 416) = v61;
              v62 = *(_OWORD *)(v3 + 992);
              v63 = *(_OWORD *)(v3 + 1008);
              v64 = *(_OWORD *)(v3 + 1024);
              *(_OWORD *)(v41 + 496) = *(_OWORD *)(v3 + 1040);
              *(_OWORD *)(v41 + 480) = v64;
              *(_OWORD *)(v41 + 464) = v63;
              *(_OWORD *)(v41 + 448) = v62;
              *(_QWORD *)(v41 + 512) = *(_QWORD *)(v3 + 1056);
              v65 = *(_OWORD *)(v3 + 1064);
              *(_OWORD *)(v3 + 1064) = v40;
              v66 = *(std::__shared_weak_count **)(v41 + 528);
              *(_OWORD *)(v41 + 520) = v65;
              if (v66)
              {
                p_shared_owners = (unint64_t *)&v66->__shared_owners_;
                do
                  v68 = __ldaxr(p_shared_owners);
                while (__stlxr(v68 - 1, p_shared_owners));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                  v40 = 0uLL;
                  v38 = (int64x2_t)xmmword_239F0C4C0;
                }
              }
              *(_BYTE *)(v41 + 536) = *(_BYTE *)(v3 + 1080);
              v41 += 544;
            }
            v39 = v42 + 68;
            v3 = (uint64_t)v42;
          }
          while (v42 + 68 != (_QWORD *)v2);
          v2 = a1[4].i64[0];
          if (v41 == v2)
            goto LABEL_5;
        }
        while (v2 != v41)
        {
          v69 = *(std::__shared_weak_count **)(v2 - 16);
          if (v69)
          {
            v70 = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          v2 -= 544;
        }
        a1[4].i64[0] = v41;
      }
    }
  }
LABEL_5:
  v4 = (int64x2_t *)a1->i64[1];
  v5 = a1 + 1;
  if (v4 != &a1[1])
  {
    do
    {
      if ((v4[11].i8[12] & 6) != 0)
      {
        v16 = (int64x2_t *)v4->i64[1];
        v17 = v16;
        v18 = (uint64_t *)v4;
        if (v16)
        {
          do
          {
            v19 = v17;
            v17 = (int64x2_t *)v17->i64[0];
          }
          while (v17);
        }
        else
        {
          do
          {
            v19 = (int64x2_t *)v18[2];
            v14 = v19->i64[0] == (_QWORD)v18;
            v18 = (uint64_t *)v19;
          }
          while (!v14);
        }
        v20 = (uint64_t *)v4;
        if (v16)
        {
          do
          {
            v21 = (uint64_t *)v16;
            v16 = (int64x2_t *)v16->i64[0];
          }
          while (v16);
        }
        else
        {
          do
          {
            v21 = (uint64_t *)v20[2];
            v14 = *v21 == (_QWORD)v20;
            v20 = v21;
          }
          while (!v14);
        }
        if ((int64x2_t *)a1->i64[1] == v4)
          a1->i64[1] = (uint64_t)v21;
        v15 = (uint64_t *)a1[1].i64[0];
        --a1[1].i64[1];
        sub_2394F0930(v15, v4->i64);
        operator delete(v4);
      }
      else
      {
        v4[11].i8[12] = 0;
        v22 = (int64x2_t *)v4->i64[1];
        if (v22)
        {
          do
          {
            v19 = v22;
            v22 = (int64x2_t *)v22->i64[0];
          }
          while (v22);
        }
        else
        {
          do
          {
            v19 = (int64x2_t *)v4[1].i64[0];
            v14 = v19->i64[0] == (_QWORD)v4;
            v4 = v19;
          }
          while (!v14);
        }
      }
      v4 = v19;
    }
    while (v19 != v5);
  }
  v6 = (int64x2_t *)a1[2].i64[0];
  v7 = &a1[2].i64[1];
  if (v6 != (int64x2_t *)&a1[2].u64[1])
  {
    do
    {
      if ((v6[4].i8[4] & 6) != 0)
      {
        v24 = (int64x2_t *)v6->i64[1];
        v25 = v24;
        v26 = (uint64_t *)v6;
        if (v24)
        {
          do
          {
            v27 = v25;
            v25 = (int64x2_t *)v25->i64[0];
          }
          while (v25);
        }
        else
        {
          do
          {
            v27 = (int64x2_t *)v26[2];
            v14 = v27->i64[0] == (_QWORD)v26;
            v26 = (uint64_t *)v27;
          }
          while (!v14);
        }
        v28 = (uint64_t *)v6;
        if (v24)
        {
          do
          {
            v29 = (uint64_t *)v24;
            v24 = (int64x2_t *)v24->i64[0];
          }
          while (v24);
        }
        else
        {
          do
          {
            v29 = (uint64_t *)v28[2];
            v14 = *v29 == (_QWORD)v28;
            v28 = v29;
          }
          while (!v14);
        }
        if ((int64x2_t *)a1[2].i64[0] == v6)
          a1[2].i64[0] = (uint64_t)v29;
        v23 = (uint64_t *)a1[2].i64[1];
        --a1[3].i64[0];
        sub_2394F0930(v23, v6->i64);
        operator delete(v6);
      }
      else
      {
        v6[4].i8[4] = 0;
        v30 = (int64x2_t *)v6->i64[1];
        if (v30)
        {
          do
          {
            v27 = v30;
            v30 = (int64x2_t *)v30->i64[0];
          }
          while (v30);
        }
        else
        {
          do
          {
            v27 = (int64x2_t *)v6[1].i64[0];
            v14 = v27->i64[0] == (_QWORD)v6;
            v6 = v27;
          }
          while (!v14);
        }
      }
      v6 = v27;
    }
    while (v27 != (int64x2_t *)v7);
  }
  a1[6].i16[0] = 1;
  a1[7].i64[0] = a1[6].i64[1];
  a1[10].i64[0] = a1[9].i64[1];
  a1[13].i64[0] = a1[12].i64[1];
  a1[8].i64[1] = a1[8].i64[0];
  a1[11].i64[1] = a1[11].i64[0];
  a1[14].i64[1] = a1[14].i64[0];
  v8 = (int64x2_t *)a1->i64[1];
  if (v8 != v5)
  {
    v9 = 0;
    do
    {
      v10 = v8[2].u8[12];
      if (v8[2].i8[12])
        v11 = v9;
      else
        v11 = -1;
      v8[11].i32[2] = v11;
      v12 = (int64x2_t *)v8->i64[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (int64x2_t *)v12->i64[0];
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (int64x2_t *)v8[1].i64[0];
          v14 = v13->i64[0] == (_QWORD)v8;
          v8 = v13;
        }
        while (!v14);
      }
      v9 += v10;
      v8 = v13;
    }
    while (v13 != v5);
  }
  v31 = (uint64_t *)a1[2].i64[0];
  if (v31 != v7)
  {
    v32 = 0;
    do
    {
      v33 = *((unsigned __int8 *)v31 + 44);
      if (*((_BYTE *)v31 + 44))
        v34 = v32;
      else
        v34 = -1;
      *((_DWORD *)v31 + 16) = v34;
      v35 = (uint64_t *)v31[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (uint64_t *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (uint64_t *)v31[2];
          v14 = *v36 == (_QWORD)v31;
          v31 = v36;
        }
        while (!v14);
      }
      v32 += v33;
      v31 = v36;
    }
    while (v36 != v7);
  }
}

void sub_239C88398(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;

  if (*(_BYTE *)(a1 + 96))
  {
    v4 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v5 = *(unsigned int *)(a1 + 24);
    if (v5 > (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v4) >> 2)
    {
      v6 = 4 * v5;
      v7 = (char *)operator new(4 * v5);
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = &v7[v6];
      if (v4)
        operator delete(v4);
    }
    v8 = *(_QWORD **)(a1 + 8);
    v9 = (_QWORD *)(a1 + 16);
    if (v8 != (_QWORD *)(a1 + 16))
    {
      do
      {
        if (*((_BYTE *)v8 + 44))
        {
          v11 = *(char **)(a2 + 8);
          v10 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v11 >= v10)
          {
            v13 = *(char **)a2;
            v14 = (uint64_t)&v11[-*(_QWORD *)a2];
            v15 = v14 >> 2;
            v16 = (v14 >> 2) + 1;
            if (v16 >> 62)
              sub_2394189F8();
            v17 = v10 - (_QWORD)v13;
            if (v17 >> 1 > v16)
              v16 = v17 >> 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
              v18 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v18 = v16;
            if (v18)
            {
              if (v18 >> 62)
                sub_239418A80();
              v19 = operator new(4 * v18);
            }
            else
            {
              v19 = 0;
            }
            v20 = &v19[4 * v15];
            *v20 = *((_DWORD *)v8 + 8);
            v12 = v20 + 1;
            if (v11 != v13)
            {
              v21 = v11 - 4 - v13;
              if (v21 < 0x2C)
                goto LABEL_42;
              if ((unint64_t)(v11 - &v19[v14]) < 0x20)
                goto LABEL_42;
              v22 = (v21 >> 2) + 1;
              v23 = &v19[4 * v15 - 16];
              v24 = v11 - 16;
              v25 = v22 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v26 = *(_OWORD *)v24;
                *(v23 - 1) = *((_OWORD *)v24 - 1);
                *v23 = v26;
                v23 -= 2;
                v24 -= 32;
                v25 -= 8;
              }
              while (v25);
              v20 -= v22 & 0x7FFFFFFFFFFFFFF8;
              v11 -= 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
              if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_42:
                do
                {
                  v27 = *((_DWORD *)v11 - 1);
                  v11 -= 4;
                  *--v20 = v27;
                }
                while (v11 != v13);
              }
            }
            *(_QWORD *)a2 = v20;
            *(_QWORD *)(a2 + 8) = v12;
            *(_QWORD *)(a2 + 16) = &v19[4 * v18];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_DWORD *)v11 = *((_DWORD *)v8 + 8);
            v12 = v11 + 4;
          }
          *(_QWORD *)(a2 + 8) = v12;
        }
        v28 = (_QWORD *)v8[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v8[2];
            v30 = *v29 == (_QWORD)v8;
            v8 = v29;
          }
          while (!v30);
        }
        v8 = v29;
      }
      while (v29 != v9);
    }
  }
}

void sub_239C885AC(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;

  if (*(_BYTE *)(a1 + 96))
  {
    v4 = *(char **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    v5 = *(unsigned int *)(a1 + 48);
    if (v5 > (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v4) >> 2)
    {
      v6 = 4 * v5;
      v7 = (char *)operator new(4 * v5);
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = &v7[v6];
      if (v4)
        operator delete(v4);
    }
    v8 = *(_QWORD **)(a1 + 32);
    v9 = (_QWORD *)(a1 + 40);
    if (v8 != (_QWORD *)(a1 + 40))
    {
      do
      {
        if (*((_BYTE *)v8 + 44))
        {
          v11 = *(char **)(a2 + 8);
          v10 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v11 >= v10)
          {
            v13 = *(char **)a2;
            v14 = (uint64_t)&v11[-*(_QWORD *)a2];
            v15 = v14 >> 2;
            v16 = (v14 >> 2) + 1;
            if (v16 >> 62)
              sub_2394189F8();
            v17 = v10 - (_QWORD)v13;
            if (v17 >> 1 > v16)
              v16 = v17 >> 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
              v18 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v18 = v16;
            if (v18)
            {
              if (v18 >> 62)
                sub_239418A80();
              v19 = operator new(4 * v18);
            }
            else
            {
              v19 = 0;
            }
            v20 = &v19[4 * v15];
            *v20 = *((_DWORD *)v8 + 8);
            v12 = v20 + 1;
            if (v11 != v13)
            {
              v21 = v11 - 4 - v13;
              if (v21 < 0x2C)
                goto LABEL_42;
              if ((unint64_t)(v11 - &v19[v14]) < 0x20)
                goto LABEL_42;
              v22 = (v21 >> 2) + 1;
              v23 = &v19[4 * v15 - 16];
              v24 = v11 - 16;
              v25 = v22 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v26 = *(_OWORD *)v24;
                *(v23 - 1) = *((_OWORD *)v24 - 1);
                *v23 = v26;
                v23 -= 2;
                v24 -= 32;
                v25 -= 8;
              }
              while (v25);
              v20 -= v22 & 0x7FFFFFFFFFFFFFF8;
              v11 -= 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
              if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_42:
                do
                {
                  v27 = *((_DWORD *)v11 - 1);
                  v11 -= 4;
                  *--v20 = v27;
                }
                while (v11 != v13);
              }
            }
            *(_QWORD *)a2 = v20;
            *(_QWORD *)(a2 + 8) = v12;
            *(_QWORD *)(a2 + 16) = &v19[4 * v18];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_DWORD *)v11 = *((_DWORD *)v8 + 8);
            v12 = v11 + 4;
          }
          *(_QWORD *)(a2 + 8) = v12;
        }
        v28 = (_QWORD *)v8[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v8[2];
            v30 = *v29 == (_QWORD)v8;
            v8 = v29;
          }
          while (!v30);
        }
        v8 = v29;
      }
      while (v29 != v9);
    }
  }
}

void sub_239C887C0(uint64_t a1, char **a2)
{
  void *v4;
  _BYTE *v5;
  char *v6;
  _BYTE *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  sub_239C25B28(a1, 0);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64));
  v4 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  v5 = *(_BYTE **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  if (*(_QWORD *)(a1 + 88) - (_QWORD)v4 <= 0xFFuLL)
  {
    v6 = (char *)operator new(0x100uLL);
    *(_QWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a1 + 88) = v6 + 256;
    if (v4)
    {
      operator delete(v4);
      v5 = *(_BYTE **)(a1 + 96);
    }
  }
  if (*(_QWORD *)(a1 + 112) - (_QWORD)v5 <= 0xFFuLL)
  {
    v7 = *(_BYTE **)(a1 + 104);
    v8 = (char *)operator new(0x100uLL);
    v9 = v7 - v5;
    v10 = &v8[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
    v11 = v10;
    if (v7 == v5)
      goto LABEL_13;
    if ((unint64_t)(v9 - 4) >= 0x2C)
    {
      v11 = &v8[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
      if (v7 - v8 - (v9 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v12 = v9 >> 2;
        v13 = ((unint64_t)(v9 - 4) >> 2) + 1;
        v14 = &v8[4 * v12 - 16];
        v15 = (__int128 *)(v7 - 16);
        v16 = v13 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v17 = *v15;
          *((_OWORD *)v14 - 1) = *(v15 - 1);
          *(_OWORD *)v14 = v17;
          v14 -= 32;
          v15 -= 2;
          v16 -= 8;
        }
        while (v16);
        v11 = &v10[-4 * (v13 & 0x7FFFFFFFFFFFFFF8)];
        v7 -= 4 * (v13 & 0x7FFFFFFFFFFFFFF8);
        if (v13 == (v13 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_13:
          *(_QWORD *)(a1 + 96) = v11;
          *(_QWORD *)(a1 + 104) = v10;
          *(_QWORD *)(a1 + 112) = v8 + 256;
          if (v5)
            operator delete(v5);
          goto LABEL_15;
        }
      }
    }
    else
    {
      v11 = &v8[(v7 - v5) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v11 - 1) = v18;
      v11 -= 4;
    }
    while (v7 != v5);
    goto LABEL_13;
  }
LABEL_15:
  if ((char **)(a1 + 72) != a2)
  {
    sub_23942156C((_QWORD *)(a1 + 72), *a2, a2[1], (a2[1] - *a2) >> 2);
    sub_23942156C((_QWORD *)(a1 + 96), a2[3], a2[4], (a2[4] - a2[3]) >> 2);
  }
  v19 = (*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2;
  v20 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
  (*(void (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56), v20 >> 2, v19);
  (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), v20 >> 2, v20 >> 2);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), v19, v19);
  (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v19, v20 >> 2);
  *(_QWORD *)(a1 + 24) = (v20 << 30) & 0xFFFFFFFF00000000 | v19;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 6 * v19;
  v21 = 6 * (_DWORD)v19 + (v20 >> 2);
  *(_DWORD *)(a1 + 16) = v21;
  sub_23945215C(a1, v21);
}

void sub_239C88A2C(uint64_t *a1, int **a2, int a3)
{
  _DWORD *v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  _DWORD *v9;
  int v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int *v22;
  int *v23;
  unsigned int *v24;
  int v25;
  unint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int *v41;
  int *v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int32x4_t *v48;
  int32x4_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int32x4_t v53;
  int32x4_t *v54;
  int32x4_t v55;
  int32x4_t v56;
  uint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  unint64_t v63;
  int32x4_t *v64;
  int32x4_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int32x4_t v70;
  int32x4_t *v71;
  int32x4_t v72;
  int32x4_t v73;
  uint64_t v74;
  unint64_t v75;
  _DWORD *v76;
  unint64_t v77;
  _DWORD *v78;
  _DWORD *v79;

  v5 = (_DWORD *)*a1;
  a1[1] = *a1;
  a1[3] = 0;
  v6 = a1 + 3;
  a1[4] = 0;
  v7 = *a2;
  v8 = a2[1];
  if (*a2 == v8)
  {
    v9 = v5;
  }
  else
  {
    do
    {
      v10 = *v7;
      v11 = a1[2];
      if ((unint64_t)v5 < v11)
      {
        *v5 = 0;
        v5[1] = v10;
        v9 = v5 + 3;
        v5[2] = 6;
      }
      else
      {
        v12 = (_DWORD *)*a1;
        v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 2);
        v14 = v13 + 1;
        if (v13 + 1 > 0x1555555555555555)
LABEL_98:
          sub_2394189F8();
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v12) >> 2);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0xAAAAAAAAAAAAAAALL)
          v16 = 0x1555555555555555;
        else
          v16 = v14;
        if (v16)
        {
          if (v16 > 0x1555555555555555)
LABEL_99:
            sub_239418A80();
          v17 = (char *)operator new(12 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[12 * v13];
        *(_DWORD *)v18 = 0;
        *((_DWORD *)v18 + 1) = v10;
        *((_DWORD *)v18 + 2) = 6;
        v19 = v18;
        if (v5 != v12)
        {
          do
          {
            v20 = *(_QWORD *)(v5 - 3);
            v5 -= 3;
            v21 = v5[2];
            *(_QWORD *)(v19 - 12) = v20;
            v19 -= 12;
            *((_DWORD *)v19 + 2) = v21;
          }
          while (v5 != v12);
          v5 = (_DWORD *)*a1;
        }
        v9 = v18 + 12;
        *a1 = (uint64_t)v19;
        a1[1] = (uint64_t)(v18 + 12);
        a1[2] = (uint64_t)&v17[12 * v16];
        if (v5)
          operator delete(v5);
      }
      a1[1] = (uint64_t)v9;
      ++v7;
      v5 = v9;
    }
    while (v7 != v8);
  }
  v22 = a2[3];
  v23 = a2[4];
  if (v22 != v23)
  {
    while (1)
    {
      v25 = *v22;
      v26 = a1[2];
      if ((unint64_t)v9 < v26)
      {
        *v9 = 1;
        v9[1] = v25;
        v24 = v9 + 3;
        v9[2] = 1;
      }
      else
      {
        v27 = (_DWORD *)*a1;
        v28 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 2);
        v29 = v28 + 1;
        if (v28 + 1 > 0x1555555555555555)
          goto LABEL_98;
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (_QWORD)v27) >> 2);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0xAAAAAAAAAAAAAAALL)
          v31 = 0x1555555555555555;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 > 0x1555555555555555)
            goto LABEL_99;
          v32 = (char *)operator new(12 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[12 * v28];
        *(_DWORD *)v33 = 1;
        *((_DWORD *)v33 + 1) = v25;
        *((_DWORD *)v33 + 2) = 1;
        v34 = v33;
        if (v9 != v27)
        {
          do
          {
            v35 = *(_QWORD *)(v9 - 3);
            v9 -= 3;
            v36 = v9[2];
            *(_QWORD *)(v34 - 12) = v35;
            v34 -= 12;
            *((_DWORD *)v34 + 2) = v36;
          }
          while (v9 != v27);
          v9 = (_DWORD *)*a1;
        }
        v24 = (unsigned int *)(v33 + 12);
        *a1 = (uint64_t)v34;
        a1[1] = (uint64_t)(v33 + 12);
        a1[2] = (uint64_t)&v32[12 * v31];
        if (v9)
          operator delete(v9);
      }
      a1[1] = (uint64_t)v24;
      ++v22;
      v9 = v24;
      if (v22 == v23)
        goto LABEL_45;
    }
  }
  v24 = v9;
LABEL_45:
  if (a3 == 1)
  {
    v39 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - *a1) >> 2));
    if (v24 == (unsigned int *)*a1)
      v40 = 0;
    else
      v40 = v39;
    sub_239C8A1B0(*a1, v24, v40, 1);
  }
  else if (!a3)
  {
    v37 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - *a1) >> 2));
    if (v24 == (unsigned int *)*a1)
      v38 = 0;
    else
      v38 = v37;
    sub_239C88FC4(*a1, v24, v38, 1);
  }
  v41 = (int *)*a1;
  v42 = (int *)a1[1];
  if ((int *)*a1 != v42)
  {
    v43 = 0;
    do
    {
      v44 = v41[2];
      v41[2] = v43;
      v45 = *v41;
      v41 += 3;
      v43 += v44;
      ++v6[v45];
    }
    while (v41 != v42);
  }
  v46 = a1[11];
  a1[6] = a1[5];
  a1[12] = v46;
  a1[9] = a1[8];
  a1[15] = a1[14];
  v47 = a1[3];
  if (v47)
  {
    sub_23942CB44((uint64_t)(a1 + 5), v47);
    v48 = (int32x4_t *)a1[5];
    v49 = (int32x4_t *)a1[6];
    if (v48 != v49)
    {
      v50 = (char *)v49 - (char *)v48 - 4;
      if (v50 < 0x1C)
      {
        LODWORD(v51) = 0;
        goto LABEL_66;
      }
      v52 = (v50 >> 2) + 1;
      v51 = v52 & 0x7FFFFFFFFFFFFFF8;
      v53 = (int32x4_t)xmmword_239EC6870;
      v54 = v48 + 1;
      v55.i64[0] = 0x400000004;
      v55.i64[1] = 0x400000004;
      v56.i64[0] = 0x800000008;
      v56.i64[1] = 0x800000008;
      v57 = v52 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v54[-1] = v53;
        *v54 = vaddq_s32(v53, v55);
        v53 = vaddq_s32(v53, v56);
        v54 += 2;
        v57 -= 8;
      }
      while (v57);
      if (v52 != v51)
      {
        v48 = (int32x4_t *)((char *)v48 + 4 * (v52 & 0x7FFFFFFFFFFFFFF8));
        do
        {
LABEL_66:
          v48->i32[0] = v51;
          v48 = (int32x4_t *)((char *)v48 + 4);
          LODWORD(v51) = v51 + 1;
        }
        while (v48 != v49);
      }
    }
  }
  v58 = a1[3];
  v59 = (_DWORD *)a1[11];
  v60 = (a1[12] - (uint64_t)v59) >> 2;
  if (v58 <= v60)
  {
    if (v58 < v60)
      a1[12] = (uint64_t)&v59[v58];
  }
  else
  {
    sub_23942CB44((uint64_t)(a1 + 11), v58 - v60);
    v59 = (_DWORD *)a1[11];
  }
  v61 = (_DWORD *)*a1;
  v62 = (_DWORD *)a1[1];
  while (v61 != v62)
  {
    if (!*v61)
      *v59++ = v61[2];
    v61 += 3;
  }
  v63 = a1[4];
  v64 = (int32x4_t *)a1[8];
  v65 = (int32x4_t *)a1[9];
  v66 = ((char *)v65 - (char *)v64) >> 2;
  if (v63 <= v66)
  {
    if (v63 < v66)
    {
      v65 = (int32x4_t *)((char *)v64 + 4 * v63);
      a1[9] = (uint64_t)v65;
    }
  }
  else
  {
    sub_23942CB44((uint64_t)(a1 + 8), v63 - v66);
    v64 = (int32x4_t *)a1[8];
    v65 = (int32x4_t *)a1[9];
  }
  if (v64 != v65)
  {
    v67 = (char *)v65 - (char *)v64 - 4;
    if (v67 < 0x1C)
    {
      LODWORD(v68) = 0;
      goto LABEL_87;
    }
    v69 = (v67 >> 2) + 1;
    v68 = v69 & 0x7FFFFFFFFFFFFFF8;
    v70 = (int32x4_t)xmmword_239EC6870;
    v71 = v64 + 1;
    v72.i64[0] = 0x400000004;
    v72.i64[1] = 0x400000004;
    v73.i64[0] = 0x800000008;
    v73.i64[1] = 0x800000008;
    v74 = v69 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v71[-1] = v70;
      *v71 = vaddq_s32(v70, v72);
      v70 = vaddq_s32(v70, v73);
      v71 += 2;
      v74 -= 8;
    }
    while (v74);
    if (v69 != v68)
    {
      v64 = (int32x4_t *)((char *)v64 + 4 * (v69 & 0x7FFFFFFFFFFFFFF8));
      do
      {
LABEL_87:
        v64->i32[0] = v68;
        v64 = (int32x4_t *)((char *)v64 + 4);
        LODWORD(v68) = v68 + 1;
      }
      while (v64 != v65);
    }
  }
  v75 = a1[4];
  v76 = (_DWORD *)a1[14];
  v77 = (a1[15] - (uint64_t)v76) >> 2;
  if (v75 <= v77)
  {
    if (v75 < v77)
      a1[15] = (uint64_t)&v76[v75];
  }
  else
  {
    sub_23942CB44((uint64_t)(a1 + 14), v75 - v77);
    v76 = (_DWORD *)a1[14];
  }
  v78 = (_DWORD *)*a1;
  v79 = (_DWORD *)a1[1];
  while (v78 != v79)
  {
    if (*v78 == 1)
      *v76++ = v78[2];
    v78 += 3;
  }
}

unint64_t sub_239C88FC4(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  BOOL v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  BOOL v48;
  BOOL v49;
  unsigned int v50;
  _BOOL4 v51;
  _BOOL4 v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  _BOOL4 v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  BOOL v80;
  BOOL v81;
  unsigned int v82;
  _BOOL4 v83;
  _BOOL4 v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  _BOOL4 v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  _BOOL4 v98;
  uint64_t v99;
  unsigned int v100;
  BOOL v101;
  _BOOL4 v102;
  _BOOL4 v103;
  _BOOL4 v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  BOOL v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int v112;
  BOOL v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  _BOOL4 v117;
  _BOOL4 v118;
  unsigned int v119;
  unsigned int v120;
  BOOL v121;
  BOOL v122;
  unint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  BOOL v128;
  BOOL v129;
  unsigned int v130;
  unsigned int v131;
  _BOOL4 v132;
  _BOOL4 v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  unsigned int v137;
  BOOL v138;
  unsigned int v139;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unsigned int *v143;
  unsigned int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  BOOL v150;
  BOOL v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  _BOOL4 v155;
  _BOOL4 v156;
  unsigned int v157;
  unsigned int v158;
  BOOL v159;
  BOOL v160;
  uint64_t v161;
  unsigned int v162;
  _BOOL4 v163;
  _QWORD *v164;
  unsigned int v165;
  unsigned int v166;
  BOOL v167;
  unsigned int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  uint64_t v171;
  unsigned int *v172;
  BOOL v173;
  char v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int *v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  _BOOL4 v181;
  unsigned int v182;
  uint64_t v183;
  char *v184;
  unsigned int v185;
  BOOL v186;
  BOOL v187;
  int64_t v188;
  int64_t v189;
  int64_t v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  _BOOL4 v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  _BOOL4 v200;
  _BOOL4 v201;
  _BOOL4 v202;
  unsigned int *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  unsigned int v208;
  _BOOL4 v209;
  unsigned int *v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  unsigned int v214;
  unsigned int *v215;
  unsigned int *v216;
  uint64_t v217;
  unsigned int v218;
  BOOL v219;
  BOOL v220;
  int64_t v221;
  uint64_t v223;
  unsigned int *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  _BOOL4 v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int v237;
  _BOOL4 v238;
  int v239;
  char *v240;
  uint64_t v241;
  BOOL v242;
  unsigned int v243;
  unsigned int v244;
  _BOOL4 v245;
  uint64_t v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v249 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v162 = *(a2 - 3);
        v173 = v162 == *v10;
        v163 = v162 < *v10;
        if (v173)
          v163 = *(a2 - 2) < v10[1];
        if (v163)
          goto LABEL_167;
        return result;
      case 3:
        v164 = v10 + 3;
        v165 = v10[3];
        v166 = v10[4];
        v167 = v165 < *v10;
        if (v165 == *v10)
          v167 = v166 < v10[1];
        v168 = *(a2 - 3);
        v169 = *(a2 - 2) < v166;
        v173 = v168 == v165;
        v170 = v168 < v165;
        if (v173)
          v170 = v169;
        if (v167)
        {
          if (v170)
          {
LABEL_167:
            v291 = v10[2];
            v268 = *(_QWORD *)v10;
            v171 = *(_QWORD *)v8;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v171;
            *(a2 - 1) = v291;
            *(_QWORD *)v8 = v268;
          }
          else
          {
            v294 = v10[2];
            v271 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v164;
            v10[2] = v10[5];
            *v164 = v271;
            v10[5] = v294;
            v243 = *(a2 - 3);
            v244 = v10[3];
            v173 = v243 == v244;
            v245 = v243 < v244;
            if (v173)
              v245 = *(a2 - 2) < v10[4];
            if (v245)
            {
              v246 = *v164;
              v247 = v10[5];
              v248 = *(a2 - 1);
              *v164 = *(_QWORD *)v8;
              v10[5] = v248;
              *(a2 - 1) = v247;
              *(_QWORD *)v8 = v246;
            }
          }
        }
        else if (v170)
        {
          v206 = *v164;
          v207 = v10[5];
          v208 = *(a2 - 1);
          *v164 = *(_QWORD *)v8;
          v10[5] = v208;
          *(a2 - 1) = v207;
          *(_QWORD *)v8 = v206;
          LODWORD(v206) = v10[3];
          v173 = (_DWORD)v206 == *v10;
          v209 = v206 < *v10;
          if (v173)
            v209 = v10[4] < v10[1];
          if (v209)
          {
            v292 = v10[2];
            v269 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v164;
            v10[2] = v10[5];
            *v164 = v269;
            v10[5] = v292;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_239C28A18(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_239C28C18(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 <= 287)
        {
          v172 = v10 + 3;
          v173 = v10 == a2 || v172 == a2;
          v174 = v173;
          if ((a4 & 1) != 0)
          {
            if ((v174 & 1) == 0)
            {
              v175 = 0;
              v176 = v10;
              do
              {
                v178 = v172;
                v179 = v176[3];
                v180 = v176[4];
                v181 = v179 < *v176;
                if (v179 == *v176)
                  v181 = v180 < v176[1];
                if (v181)
                {
                  v182 = v176[5];
                  v183 = v175;
                  do
                  {
                    v184 = (char *)v10 + v183;
                    *(_QWORD *)(v184 + 12) = *(_QWORD *)((char *)v10 + v183);
                    *((_DWORD *)v184 + 5) = *(unsigned int *)((char *)v10 + v183 + 8);
                    if (!v183)
                    {
                      v177 = v10;
                      goto LABEL_180;
                    }
                    v185 = *((_DWORD *)v184 - 3);
                    v186 = v180 < *((_DWORD *)v184 - 2);
                    v173 = v179 == v185;
                    v187 = v179 < v185;
                    if (!v173)
                      v186 = v187;
                    v183 -= 12;
                  }
                  while (v186);
                  v177 = (unsigned int *)((char *)v10 + v183 + 12);
LABEL_180:
                  *v177 = v179;
                  v177[1] = v180;
                  v177[2] = v182;
                }
                v172 = v178 + 3;
                v175 += 12;
                v176 = v178;
              }
              while (v178 + 3 != a2);
            }
          }
          else if ((v174 & 1) == 0)
          {
            do
            {
              v210 = v172;
              v211 = v7[3];
              v212 = v7[4];
              v213 = v211 < *v7;
              if (v211 == *v7)
                v213 = v212 < v7[1];
              if (v213)
              {
                v214 = v7[5];
                v215 = v210;
                do
                {
                  v216 = v215;
                  v217 = *(_QWORD *)(v215 - 3);
                  v215 -= 3;
                  *(_QWORD *)v216 = v217;
                  v216[2] = *(v216 - 1);
                  v218 = *(v216 - 6);
                  v219 = v212 < *(v216 - 5);
                  v173 = v211 == v218;
                  v220 = v211 < v218;
                  if (!v173)
                    v219 = v220;
                }
                while (v219);
                *v215 = v211;
                v215[1] = v212;
                v215[2] = v214;
              }
              v172 = v210 + 3;
              v7 = v210;
            }
            while (v210 + 3 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v188 = (unint64_t)(v12 - 2) >> 1;
            v189 = v188;
            do
            {
              v190 = v189;
              if (v188 >= v189)
              {
                v191 = (2 * v189) | 1;
                v192 = &v10[3 * v191];
                if (2 * v190 + 2 >= v12)
                {
                  v193 = *v192;
                }
                else
                {
                  v193 = v192[3];
                  v194 = v10[3 * v191 + 1] < v192[4];
                  if (*v192 != v193)
                    v194 = *v192 < v193;
                  if (v194)
                  {
                    v192 += 3;
                    v191 = 2 * v190 + 2;
                  }
                  else
                  {
                    v193 = *v192;
                  }
                }
                v195 = &v10[3 * v190];
                v196 = *v195;
                v197 = v195[1];
                v173 = v193 == *v195;
                LODWORD(result) = v193 < *v195;
                if (v173)
                  result = v192[1] < v197;
                else
                  result = result;
                if ((result & 1) == 0)
                {
                  result = v195[2];
                  do
                  {
                    v203 = v195;
                    v195 = v192;
                    v204 = *(_QWORD *)v192;
                    v203[2] = v195[2];
                    *(_QWORD *)v203 = v204;
                    if (v188 < v191)
                      break;
                    v205 = (2 * v191) | 1;
                    v192 = &v10[3 * v205];
                    v191 = 2 * v191 + 2;
                    if (v191 < v12)
                    {
                      v198 = *v192;
                      v199 = v192[3];
                      v200 = v10[3 * v205 + 1] < v192[4];
                      if (*v192 != v199)
                        v200 = *v192 < v199;
                      if (v200)
                      {
                        v198 = v192[3];
                        v192 += 3;
                      }
                      else
                      {
                        v191 = v205;
                      }
                    }
                    else
                    {
                      v198 = *v192;
                      v191 = v205;
                    }
                    v201 = v192[1] < v197;
                    v173 = v198 == v196;
                    v202 = v198 < v196;
                    if (!v173)
                      v201 = v202;
                  }
                  while (!v201);
                  *v195 = v196;
                  v195[1] = v197;
                  v195[2] = result;
                }
              }
              v189 = v190 - 1;
            }
            while (v190);
            v221 = v11 / 0xCuLL;
            do
            {
              v223 = 0;
              v293 = v10[2];
              v270 = *(_QWORD *)v10;
              v224 = v10;
              do
              {
                v226 = v223 + 1;
                v227 = (char *)&v224[3 * v223 + 3];
                v228 = (2 * v223) | 1;
                v229 = 2 * v223 + 2;
                if (v229 < v221)
                {
                  v230 = *((_DWORD *)v227 + 3);
                  v231 = v224[3 * v226 + 1] < *((_DWORD *)v227 + 4);
                  v173 = *(_DWORD *)v227 == v230;
                  result = *(_DWORD *)v227 < v230;
                  if (!v173)
                    v231 = result;
                  if (v231)
                  {
                    v227 += 12;
                    v228 = v229;
                  }
                }
                v225 = *(_QWORD *)v227;
                v224[2] = *((_DWORD *)v227 + 2);
                *(_QWORD *)v224 = v225;
                v224 = (unsigned int *)v227;
                v223 = v228;
              }
              while (v228 <= (uint64_t)((unint64_t)(v221 - 2) >> 1));
              a2 -= 3;
              if (v227 == (char *)a2)
              {
                *((_DWORD *)v227 + 2) = v293;
                *(_QWORD *)v227 = v270;
              }
              else
              {
                v232 = *(_QWORD *)a2;
                *((_DWORD *)v227 + 2) = a2[2];
                *(_QWORD *)v227 = v232;
                a2[2] = v293;
                *(_QWORD *)a2 = v270;
                v233 = v227 - (char *)v10 + 12;
                if (v233 >= 13)
                {
                  v234 = (v233 / 0xCuLL - 2) >> 1;
                  v235 = &v10[3 * v234];
                  v237 = *(_DWORD *)v227;
                  v236 = *((_DWORD *)v227 + 1);
                  v238 = *v235 < *(_DWORD *)v227;
                  if (*v235 == *(_DWORD *)v227)
                    v238 = v235[1] < v236;
                  if (v238)
                  {
                    v239 = *((_DWORD *)v227 + 2);
                    do
                    {
                      v240 = v227;
                      v227 = (char *)v235;
                      v241 = *(_QWORD *)v235;
                      result = *((unsigned int *)v227 + 2);
                      *((_DWORD *)v240 + 2) = result;
                      *(_QWORD *)v240 = v241;
                      if (!v234)
                        break;
                      v234 = (v234 - 1) >> 1;
                      v235 = &v10[3 * v234];
                      result = v235[1] < v236;
                      v242 = *v235 < v237;
                      if (*v235 == v237)
                        v242 = v235[1] < v236;
                    }
                    while (v242);
                    *(_DWORD *)v227 = v237;
                    *((_DWORD *)v227 + 1) = v236;
                    *((_DWORD *)v227 + 2) = v239;
                  }
                }
              }
            }
            while (v221-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[3 * ((unint64_t)v12 >> 1)];
        v15 = *(a2 - 3);
        v16 = *(a2 - 2);
        if ((unint64_t)v11 >= 0x601)
        {
          v17 = *v14;
          v18 = &v10[3 * v13 + 1];
          v19 = *v14 < *v10;
          if (*v14 == *v10)
            v19 = *v18 < v10[1];
          v20 = v16 < *v18;
          v173 = v15 == v17;
          v21 = v15 < v17;
          if (v173)
            v21 = v20;
          if (v19)
          {
            if (v21)
            {
              v272 = v10[2];
              v250 = *(_QWORD *)v10;
              v22 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v22;
              goto LABEL_35;
            }
            v278 = v10[2];
            v256 = *(_QWORD *)v10;
            v36 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v36;
            v14[2] = v278;
            *(_QWORD *)v14 = v256;
            v37 = *(a2 - 3);
            v38 = v37 < v256;
            if (v37 == (_DWORD)v256)
              v38 = *(a2 - 2) < *v18;
            if (v38)
            {
              v272 = v14[2];
              v250 = *(_QWORD *)v14;
              v39 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v39;
LABEL_35:
              *(a2 - 1) = v272;
              *(_QWORD *)v8 = v250;
            }
          }
          else if (v21)
          {
            v274 = v14[2];
            v252 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v274;
            *(_QWORD *)v8 = v252;
            v31 = *v14 < *v10;
            if (*v14 == *v10)
              v31 = *v18 < v10[1];
            if (v31)
            {
              v275 = v10[2];
              v253 = *(_QWORD *)v10;
              v32 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v32;
              v14[2] = v275;
              *(_QWORD *)v14 = v253;
            }
          }
          v40 = (uint64_t *)(v10 + 3);
          v41 = v10[3];
          v42 = &v10[3 * v13];
          v45 = *(v42 - 3);
          v43 = v42 - 3;
          v44 = v45;
          v46 = v43 + 1;
          v47 = v43[1];
          v48 = v47 < v10[4];
          v173 = v45 == v41;
          v49 = v45 < v41;
          if (!v173)
            v48 = v49;
          v50 = *(a2 - 6);
          v51 = *(a2 - 5) < v47;
          v173 = v50 == v44;
          v52 = v50 < v44;
          if (v173)
            v52 = v51;
          if (v48)
          {
            if (v52)
            {
              v53 = *v40;
              v54 = v10[5];
              v55 = *(a2 - 4);
              *v40 = *(_QWORD *)v249;
              v10[5] = v55;
              *(a2 - 4) = v54;
              *(_QWORD *)v249 = v53;
            }
            else
            {
              v66 = *v40;
              v67 = v10[5];
              v68 = v43[2];
              *v40 = *(_QWORD *)v43;
              v10[5] = v68;
              v43[2] = v67;
              *(_QWORD *)v43 = v66;
              v69 = v66;
              LODWORD(v66) = *(a2 - 6);
              v173 = (_DWORD)v66 == v69;
              v70 = v66 < v69;
              if (v173)
                v70 = *(a2 - 5) < *v46;
              if (v70)
              {
                v281 = v43[2];
                v259 = *(_QWORD *)v43;
                v71 = *(_QWORD *)v249;
                v43[2] = *(a2 - 4);
                *(_QWORD *)v43 = v71;
                *(a2 - 4) = v281;
                *(_QWORD *)v249 = v259;
              }
            }
          }
          else if (v52)
          {
            v279 = v43[2];
            v257 = *(_QWORD *)v43;
            v56 = *(_QWORD *)v249;
            v43[2] = *(a2 - 4);
            *(_QWORD *)v43 = v56;
            *(a2 - 4) = v279;
            *(_QWORD *)v249 = v257;
            v57 = v10[3];
            v58 = *v43 < v57;
            if (*v43 == v57)
              v58 = *v46 < v10[4];
            if (v58)
            {
              v59 = *v40;
              v60 = v10[5];
              v61 = v43[2];
              *v40 = *(_QWORD *)v43;
              v10[5] = v61;
              v43[2] = v60;
              *(_QWORD *)v43 = v59;
            }
          }
          v72 = (uint64_t *)(v10 + 6);
          v73 = v10[6];
          v74 = &v10[3 * v13];
          v77 = v74[3];
          v75 = v74 + 3;
          v76 = v77;
          v78 = v75 + 1;
          v79 = v75[1];
          v80 = v79 < v10[7];
          v173 = v77 == v73;
          v81 = v77 < v73;
          if (!v173)
            v80 = v81;
          v82 = *(a2 - 9);
          v83 = *(a2 - 8) < v79;
          v173 = v82 == v76;
          v84 = v82 < v76;
          if (v173)
            v84 = v83;
          if (v80)
          {
            if (v84)
            {
              v85 = *v72;
              v86 = v10[8];
              v87 = *(a2 - 7);
              *v72 = *(_QWORD *)v9;
              v10[8] = v87;
              *(a2 - 7) = v86;
              *(_QWORD *)v9 = v85;
            }
            else
            {
              v94 = *v72;
              v95 = v10[8];
              v96 = v75[2];
              *v72 = *(_QWORD *)v75;
              v10[8] = v96;
              v75[2] = v95;
              *(_QWORD *)v75 = v94;
              v97 = v94;
              LODWORD(v94) = *(a2 - 9);
              v173 = (_DWORD)v94 == v97;
              v98 = v94 < v97;
              if (v173)
                v98 = *(a2 - 8) < *v78;
              if (v98)
              {
                v283 = v75[2];
                v261 = *(_QWORD *)v75;
                v99 = *(_QWORD *)v9;
                v75[2] = *(a2 - 7);
                *(_QWORD *)v75 = v99;
                *(a2 - 7) = v283;
                *(_QWORD *)v9 = v261;
              }
            }
          }
          else if (v84)
          {
            v282 = v75[2];
            v260 = *(_QWORD *)v75;
            v88 = *(_QWORD *)v9;
            v75[2] = *(a2 - 7);
            *(_QWORD *)v75 = v88;
            *(a2 - 7) = v282;
            *(_QWORD *)v9 = v260;
            v89 = v10[6];
            v90 = *v75 < v89;
            if (*v75 == v89)
              v90 = *v78 < v10[7];
            if (v90)
            {
              v91 = *v72;
              v92 = v10[8];
              v93 = v75[2];
              *v72 = *(_QWORD *)v75;
              v10[8] = v93;
              v75[2] = v92;
              *(_QWORD *)v75 = v91;
            }
          }
          v100 = *v14;
          v101 = *v14 < *v43;
          if (*v14 == *v43)
            v101 = *v18 < *v46;
          result = *v78;
          v173 = *v75 == v100;
          v102 = *v75 < v100;
          if (v173)
            v102 = result < *v18;
          if (v101)
          {
            if (v102)
            {
              v284 = v43[2];
              v262 = *(_QWORD *)v43;
              *(_QWORD *)v43 = *(_QWORD *)v75;
              v43[2] = v75[2];
              goto LABEL_89;
            }
            v287 = v43[2];
            v265 = *(_QWORD *)v43;
            *(_QWORD *)v43 = *(_QWORD *)v14;
            v43[2] = v14[2];
            v14[2] = v287;
            *(_QWORD *)v14 = v265;
            v104 = *v78 < *v18;
            if (*v75 != *v14)
              v104 = *v75 < *v14;
            if (v104)
            {
              v284 = v14[2];
              v262 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v75;
              v14[2] = v75[2];
LABEL_89:
              v75[2] = v284;
              *(_QWORD *)v75 = v262;
            }
          }
          else if (v102)
          {
            v285 = v14[2];
            v263 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v75;
            v14[2] = v75[2];
            v75[2] = v285;
            *(_QWORD *)v75 = v263;
            v103 = *v18 < *v46;
            if (*v14 != *v43)
              v103 = *v14 < *v43;
            if (v103)
            {
              v286 = v43[2];
              v264 = *(_QWORD *)v43;
              *(_QWORD *)v43 = *(_QWORD *)v14;
              v43[2] = v14[2];
              v14[2] = v286;
              *(_QWORD *)v14 = v264;
            }
          }
          v288 = v10[2];
          v266 = *(_QWORD *)v10;
          v105 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v105;
          v14[2] = v288;
          *(_QWORD *)v14 = v266;
          goto LABEL_91;
        }
        v23 = *v10;
        v24 = v10[1];
        v25 = &v10[3 * v13 + 1];
        v26 = v24 < *v25;
        if (*v10 != *v14)
          v26 = *v10 < *v14;
        v27 = v16 < v24;
        v173 = v15 == v23;
        v28 = v15 < v23;
        if (v173)
          v28 = v27;
        if (v26)
        {
          if (v28)
          {
            v273 = v14[2];
            v251 = *(_QWORD *)v14;
            v29 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v29;
LABEL_52:
            *(a2 - 1) = v273;
            *(_QWORD *)v8 = v251;
            goto LABEL_91;
          }
          v280 = v14[2];
          v258 = *(_QWORD *)v14;
          v62 = *(_QWORD *)v10;
          v14[2] = v10[2];
          *(_QWORD *)v14 = v62;
          v10[2] = v280;
          *(_QWORD *)v10 = v258;
          v63 = *(a2 - 3);
          v173 = v63 == *v10;
          v64 = v63 < *v10;
          if (v173)
            v64 = *(a2 - 2) < v10[1];
          if (v64)
          {
            v273 = v10[2];
            v251 = *(_QWORD *)v10;
            v65 = *(_QWORD *)v8;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v65;
            goto LABEL_52;
          }
        }
        else if (v28)
        {
          v276 = v10[2];
          v254 = *(_QWORD *)v10;
          v33 = *(_QWORD *)v8;
          v10[2] = *(a2 - 1);
          *(_QWORD *)v10 = v33;
          *(a2 - 1) = v276;
          *(_QWORD *)v8 = v254;
          v34 = v10[1] < *v25;
          if (*v10 != *v14)
            v34 = *v10 < *v14;
          if (v34)
          {
            v277 = v14[2];
            v255 = *(_QWORD *)v14;
            v35 = *(_QWORD *)v10;
            v14[2] = v10[2];
            *(_QWORD *)v14 = v35;
            v10[2] = v277;
            *(_QWORD *)v10 = v255;
          }
        }
LABEL_91:
        --a3;
        v106 = *v10;
        if ((a4 & 1) == 0)
        {
          v107 = *(v10 - 3);
          v173 = v107 == v106;
          v108 = v107 < v106;
          if (v173)
            v108 = *(v10 - 2) < v10[1];
          if (!v108)
          {
            v136 = *(_QWORD *)(v10 + 1);
            v137 = *(a2 - 3);
            v173 = v106 == v137;
            v138 = v106 < v137;
            if (v173)
              v138 = v136 < *(a2 - 2);
            if (v138)
            {
              do
              {
                v139 = v10[3];
                v140 = v10[4];
                v10 += 3;
                v141 = v136 < v140;
                v173 = v106 == v139;
                v142 = v106 < v139;
                if (v173)
                  v142 = v141;
              }
              while (!v142);
            }
            else
            {
              v143 = v10 + 3;
              do
              {
                v10 = v143;
                if (v143 >= a2)
                  break;
                v144 = *v143;
                v145 = v136 < v10[1];
                v173 = v106 == v144;
                v146 = v106 < v144;
                if (!v173)
                  v145 = v146;
                v143 = v10 + 3;
              }
              while (!v145);
            }
            v147 = a2;
            if (v10 < a2)
            {
              v147 = a2;
              do
              {
                v148 = *(v147 - 3);
                v149 = *(v147 - 2);
                v147 -= 3;
                v150 = v136 < v149;
                v173 = v106 == v148;
                v151 = v106 < v148;
                if (v173)
                  v151 = v150;
              }
              while (v151);
            }
            while (v10 < v147)
            {
              v290 = v10[2];
              v267 = *(_QWORD *)v10;
              v152 = *(_QWORD *)v147;
              v10[2] = v147[2];
              *(_QWORD *)v10 = v152;
              v147[2] = v290;
              *(_QWORD *)v147 = v267;
              do
              {
                v153 = v10[3];
                v154 = v10[4];
                v10 += 3;
                v155 = v136 < v154;
                v173 = v106 == v153;
                v156 = v106 < v153;
                if (v173)
                  v156 = v155;
              }
              while (!v156);
              do
              {
                v157 = *(v147 - 3);
                v158 = *(v147 - 2);
                v147 -= 3;
                v159 = v136 < v158;
                v173 = v106 == v157;
                v160 = v106 < v157;
                if (v173)
                  v160 = v159;
              }
              while (v160);
            }
            if (v10 - 3 != v7)
            {
              v161 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v161;
            }
            a4 = 0;
            *(v10 - 3) = v106;
            *((_QWORD *)v10 - 1) = v136;
            continue;
          }
        }
        v109 = *(_QWORD *)(v10 + 1);
        v110 = v10;
        do
        {
          v111 = v110;
          v112 = v110[3];
          v110 += 3;
          v113 = v112 < v106;
          if (v112 == v106)
            v113 = v111[4] < v109;
        }
        while (v113);
        v114 = a2;
        if (v111 == v10)
        {
          v114 = a2;
          do
          {
            if (v110 >= v114)
              break;
            v119 = *(v114 - 3);
            v120 = *(v114 - 2);
            v114 -= 3;
            v121 = v120 < v109;
            v173 = v119 == v106;
            v122 = v119 < v106;
            if (v173)
              v122 = v121;
          }
          while (!v122);
        }
        else
        {
          do
          {
            v115 = *(v114 - 3);
            v116 = *(v114 - 2);
            v114 -= 3;
            v117 = v116 < v109;
            v173 = v115 == v106;
            v118 = v115 < v106;
            if (v173)
              v118 = v117;
          }
          while (!v118);
        }
        v10 = v110;
        if (v110 < v114)
        {
          v123 = (unint64_t)v114;
          do
          {
            v124 = *(_QWORD *)v10;
            v289 = v10[2];
            v125 = *(_DWORD *)(v123 + 8);
            *(_QWORD *)v10 = *(_QWORD *)v123;
            v10[2] = v125;
            *(_DWORD *)(v123 + 8) = v289;
            *(_QWORD *)v123 = v124;
            do
            {
              v126 = v10[3];
              v127 = v10[4];
              v10 += 3;
              v128 = v127 < v109;
              v173 = v126 == v106;
              v129 = v126 < v106;
              if (v173)
                v129 = v128;
            }
            while (v129);
            do
            {
              v130 = *(_DWORD *)(v123 - 12);
              v131 = *(_DWORD *)(v123 - 8);
              v123 -= 12;
              v132 = v131 < v109;
              v173 = v130 == v106;
              v133 = v130 < v106;
              if (v173)
                v133 = v132;
            }
            while (!v133);
          }
          while ((unint64_t)v10 < v123);
        }
        if (v10 - 3 != v7)
        {
          v134 = *(_QWORD *)(v10 - 3);
          v7[2] = *(v10 - 1);
          *(_QWORD *)v7 = v134;
        }
        *(v10 - 3) = v106;
        *((_QWORD *)v10 - 1) = v109;
        if (v110 < v114)
        {
LABEL_124:
          result = sub_239C88FC4(v7, v10 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v135 = sub_239C8B7B4(v7, v10 - 3);
        result = sub_239C8B7B4(v10, a2);
        if (!(_DWORD)result)
        {
          if (v135)
            continue;
          goto LABEL_124;
        }
        a2 = v10 - 3;
        if (!v135)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_239C8A1B0(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  BOOL v51;
  unsigned int v52;
  _BOOL4 v53;
  _BOOL4 v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  _BOOL4 v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  _BOOL4 v99;
  uint64_t v100;
  unsigned int v101;
  BOOL v102;
  _BOOL4 v103;
  unsigned int v104;
  unsigned int v105;
  _BOOL4 v106;
  unsigned int v107;
  _BOOL4 v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  BOOL v119;
  BOOL v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  _BOOL4 v124;
  _BOOL4 v125;
  unsigned int v126;
  unsigned int v127;
  BOOL v128;
  BOOL v129;
  unint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  BOOL v135;
  BOOL v136;
  unsigned int v137;
  unsigned int v138;
  _BOOL4 v139;
  _BOOL4 v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  unsigned int v144;
  BOOL v145;
  unsigned int v146;
  unsigned int v147;
  BOOL v148;
  BOOL v149;
  unsigned int *v150;
  unsigned int v151;
  _BOOL4 v152;
  _BOOL4 v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  BOOL v157;
  BOOL v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  _BOOL4 v162;
  _BOOL4 v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  BOOL v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  _BOOL4 v171;
  _QWORD *v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  BOOL v176;
  unsigned int v177;
  _BOOL4 v178;
  _BOOL4 v179;
  uint64_t v180;
  unsigned int *v181;
  BOOL v182;
  char v183;
  uint64_t v184;
  unsigned int *v185;
  unsigned int *v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  _BOOL4 v191;
  unsigned int v192;
  uint64_t v193;
  char *v194;
  unsigned int v195;
  BOOL v196;
  BOOL v197;
  int64_t v198;
  int64_t v199;
  int64_t v200;
  uint64_t v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  _BOOL4 v206;
  unsigned int *v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  _BOOL4 v211;
  unsigned int v212;
  unsigned int v213;
  _BOOL4 v214;
  BOOL v215;
  unsigned int v216;
  unsigned int v217;
  _BOOL4 v218;
  _BOOL4 v219;
  unsigned int *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  _BOOL4 v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  _BOOL4 v232;
  unsigned int v233;
  unsigned int *v234;
  unsigned int *v235;
  uint64_t v236;
  unsigned int v237;
  BOOL v238;
  BOOL v239;
  int64_t v240;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  unsigned int v250;
  _BOOL4 v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  _BOOL4 v259;
  int v260;
  char *v261;
  uint64_t v262;
  unsigned int v263;
  BOOL v264;
  unsigned int v265;
  unsigned int v266;
  _BOOL4 v267;
  uint64_t v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v271 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v169 = *(a2 - 2);
        v170 = v10[1];
        v182 = v169 == v170;
        v171 = v169 < v170;
        if (v182)
          v171 = *(a2 - 3) < *v10;
        if (v171)
          goto LABEL_167;
        return result;
      case 3:
        v172 = v10 + 3;
        v173 = v10[3];
        v174 = v10[4];
        v175 = v10[1];
        v182 = v174 == v175;
        v176 = v174 < v175;
        if (v182)
          v176 = v173 < *v10;
        v177 = *(a2 - 2);
        v178 = *(a2 - 3) < v173;
        v182 = v177 == v174;
        v179 = v177 < v174;
        if (!v182)
          v178 = v179;
        if (v176)
        {
          if (v178)
          {
LABEL_167:
            v313 = v10[2];
            v290 = *(_QWORD *)v10;
            v180 = *(_QWORD *)v8;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v180;
            *(a2 - 1) = v313;
            *(_QWORD *)v8 = v290;
          }
          else
          {
            v316 = v10[2];
            v293 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v172;
            v10[2] = v10[5];
            *v172 = v293;
            v10[5] = v316;
            v265 = *(a2 - 2);
            v266 = v10[4];
            v182 = v265 == v266;
            v267 = v265 < v266;
            if (v182)
              v267 = *(a2 - 3) < v10[3];
            if (v267)
            {
              v268 = *v172;
              v269 = v10[5];
              v270 = *(a2 - 1);
              *v172 = *(_QWORD *)v8;
              v10[5] = v270;
              *(a2 - 1) = v269;
              *(_QWORD *)v8 = v268;
            }
          }
        }
        else if (v178)
        {
          v223 = *v172;
          v224 = v10[5];
          v225 = *(a2 - 1);
          *v172 = *(_QWORD *)v8;
          v10[5] = v225;
          *(a2 - 1) = v224;
          *(_QWORD *)v8 = v223;
          LODWORD(v223) = v10[4];
          v226 = v10[1];
          v182 = (_DWORD)v223 == v226;
          v227 = v223 < v226;
          if (v182)
            v227 = v10[3] < *v10;
          if (v227)
          {
            v314 = v10[2];
            v291 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v172;
            v10[2] = v10[5];
            *v172 = v291;
            v10[5] = v314;
          }
        }
        return result;
      case 4:
        return (uint64_t)sub_239531FA8(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (uint64_t)sub_239C284A8(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 <= 287)
        {
          v181 = v10 + 3;
          v182 = v10 == a2 || v181 == a2;
          v183 = v182;
          if ((a4 & 1) != 0)
          {
            if ((v183 & 1) == 0)
            {
              v184 = 0;
              v185 = v10;
              do
              {
                v187 = v181;
                v189 = v185[3];
                v188 = v185[4];
                v190 = v185[1];
                v182 = v188 == v190;
                v191 = v188 < v190;
                if (v182)
                  v191 = v189 < *v185;
                if (v191)
                {
                  v192 = v185[5];
                  v193 = v184;
                  do
                  {
                    v194 = (char *)v10 + v193;
                    *(_QWORD *)(v194 + 12) = *(_QWORD *)((char *)v10 + v193);
                    *((_DWORD *)v194 + 5) = *(unsigned int *)((char *)v10 + v193 + 8);
                    if (!v193)
                    {
                      v186 = v10;
                      goto LABEL_180;
                    }
                    v195 = *((_DWORD *)v194 - 2);
                    v196 = v189 < *((_DWORD *)v194 - 3);
                    v182 = v188 == v195;
                    v197 = v188 < v195;
                    if (!v182)
                      v196 = v197;
                    v193 -= 12;
                  }
                  while (v196);
                  v186 = (unsigned int *)((char *)v10 + v193 + 12);
LABEL_180:
                  *v186 = v189;
                  v186[1] = v188;
                  v186[2] = v192;
                }
                v181 = v187 + 3;
                v184 += 12;
                v185 = v187;
              }
              while (v187 + 3 != a2);
            }
          }
          else if ((v183 & 1) == 0)
          {
            do
            {
              v228 = v181;
              v230 = v7[3];
              v229 = v7[4];
              v231 = v7[1];
              v182 = v229 == v231;
              v232 = v229 < v231;
              if (v182)
                v232 = v230 < *v7;
              if (v232)
              {
                v233 = v7[5];
                v234 = v228;
                do
                {
                  v235 = v234;
                  v236 = *(_QWORD *)(v234 - 3);
                  v234 -= 3;
                  *(_QWORD *)v235 = v236;
                  v235[2] = *(v235 - 1);
                  v237 = *(v235 - 5);
                  v238 = v230 < *(v235 - 6);
                  v182 = v229 == v237;
                  v239 = v229 < v237;
                  if (!v182)
                    v238 = v239;
                }
                while (v238);
                *v234 = v230;
                v234[1] = v229;
                v234[2] = v233;
              }
              v181 = v228 + 3;
              v7 = v228;
            }
            while (v228 + 3 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v198 = (unint64_t)(v12 - 2) >> 1;
            v199 = v198;
            do
            {
              v200 = v199;
              if (v198 >= v199)
              {
                v201 = (2 * v199) | 1;
                v202 = &v10[3 * v201];
                if (2 * v200 + 2 >= v12)
                {
                  v205 = *v202;
                }
                else
                {
                  v203 = v10[3 * v201 + 1];
                  v204 = v202[4];
                  v205 = *v202;
                  v182 = v203 == v204;
                  v206 = v203 < v204;
                  if (v182)
                    v206 = *v202 < v202[3];
                  if (v206)
                  {
                    v205 = v202[3];
                    v202 += 3;
                    v201 = 2 * v200 + 2;
                  }
                }
                v207 = &v10[3 * v200];
                v208 = v202[1];
                v209 = v207[1];
                v210 = *v207;
                LODWORD(result) = v205 < *v207;
                v182 = v208 == v209;
                v211 = v208 < v209;
                if (v182)
                  result = result;
                else
                  result = v211;
                if ((result & 1) == 0)
                {
                  result = v207[2];
                  do
                  {
                    v220 = v207;
                    v207 = v202;
                    v221 = *(_QWORD *)v202;
                    v220[2] = v207[2];
                    *(_QWORD *)v220 = v221;
                    if (v198 < v201)
                      break;
                    v222 = (2 * v201) | 1;
                    v202 = &v10[3 * v222];
                    v201 = 2 * v201 + 2;
                    if (v201 < v12)
                    {
                      v212 = v10[3 * v222 + 1];
                      v213 = v202[4];
                      v182 = v212 == v213;
                      v214 = v212 < v213;
                      if (v182)
                        v214 = *v202 < v202[3];
                      v215 = !v214;
                      v216 = v214 ? v202[3] : *v202;
                      if (v215)
                        v201 = v222;
                      else
                        v202 += 3;
                    }
                    else
                    {
                      v216 = *v202;
                      v201 = v222;
                    }
                    v217 = v202[1];
                    v218 = v216 < v210;
                    v182 = v217 == v209;
                    v219 = v217 < v209;
                    if (v182)
                      v219 = v218;
                  }
                  while (!v219);
                  *v207 = v210;
                  v207[1] = v209;
                  v207[2] = result;
                }
              }
              v199 = v200 - 1;
            }
            while (v200);
            v240 = v11 / 0xCuLL;
            do
            {
              v242 = 0;
              v315 = v10[2];
              v292 = *(_QWORD *)v10;
              v243 = (char *)v10;
              do
              {
                v245 = v242 + 1;
                v246 = &v243[12 * v242 + 12];
                v247 = (2 * v242) | 1;
                v248 = 2 * v242 + 2;
                if (v248 < v240)
                {
                  v249 = *(_DWORD *)&v243[12 * v245 + 4];
                  v250 = *((_DWORD *)v246 + 4);
                  result = *(_DWORD *)v246 < *((_DWORD *)v246 + 3);
                  v182 = v249 == v250;
                  v251 = v249 < v250;
                  if (v182)
                    v251 = *(_DWORD *)v246 < *((_DWORD *)v246 + 3);
                  if (v251)
                  {
                    v246 += 12;
                    v247 = v248;
                  }
                }
                v244 = *(_QWORD *)v246;
                *((_DWORD *)v243 + 2) = *((_DWORD *)v246 + 2);
                *(_QWORD *)v243 = v244;
                v243 = v246;
                v242 = v247;
              }
              while (v247 <= (uint64_t)((unint64_t)(v240 - 2) >> 1));
              a2 -= 3;
              if (v246 == (char *)a2)
              {
                *((_DWORD *)v246 + 2) = v315;
                *(_QWORD *)v246 = v292;
              }
              else
              {
                v252 = *(_QWORD *)a2;
                *((_DWORD *)v246 + 2) = a2[2];
                *(_QWORD *)v246 = v252;
                a2[2] = v315;
                *(_QWORD *)a2 = v292;
                v253 = v246 - (char *)v10 + 12;
                if (v253 >= 13)
                {
                  v254 = (v253 / 0xCuLL - 2) >> 1;
                  v255 = (char *)&v10[3 * v254];
                  v256 = *((_DWORD *)v255 + 1);
                  v258 = *(_DWORD *)v246;
                  v257 = *((_DWORD *)v246 + 1);
                  v182 = v256 == v257;
                  v259 = v256 < v257;
                  if (v182)
                    v259 = *(_DWORD *)v255 < *(_DWORD *)v246;
                  if (v259)
                  {
                    v260 = *((_DWORD *)v246 + 2);
                    do
                    {
                      v261 = v246;
                      v246 = v255;
                      v262 = *(_QWORD *)v255;
                      result = *((unsigned int *)v246 + 2);
                      *((_DWORD *)v261 + 2) = result;
                      *(_QWORD *)v261 = v262;
                      if (!v254)
                        break;
                      v254 = (v254 - 1) >> 1;
                      v255 = (char *)&v10[3 * v254];
                      v263 = *((_DWORD *)v255 + 1);
                      result = *(_DWORD *)v255 < v258;
                      v182 = v263 == v257;
                      v264 = v263 < v257;
                      if (v182)
                        v264 = *(_DWORD *)v255 < v258;
                    }
                    while (v264);
                    *(_DWORD *)v246 = v258;
                    *((_DWORD *)v246 + 1) = v257;
                    *((_DWORD *)v246 + 2) = v260;
                  }
                }
              }
            }
            while (v240-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[3 * ((unint64_t)v12 >> 1)];
        v16 = *(a2 - 3);
        v15 = *(a2 - 2);
        if ((unint64_t)v11 >= 0x601)
        {
          v17 = v10[1];
          v18 = &v10[3 * v13 + 1];
          v19 = *v18;
          v182 = *v18 == v17;
          v20 = *v18 < v17;
          if (v182)
            v20 = *v14 < *v10;
          v21 = v16 < *v14;
          v182 = v15 == v19;
          v22 = v15 < v19;
          if (v182)
            v22 = v21;
          if (v20)
          {
            if (v22)
            {
              v294 = v10[2];
              v272 = *(_QWORD *)v10;
              v23 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v23;
              goto LABEL_35;
            }
            v300 = v10[2];
            v278 = *(_QWORD *)v10;
            v38 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v38;
            v14[2] = v300;
            *(_QWORD *)v14 = v278;
            v39 = *(a2 - 2);
            v40 = v39 < *v18;
            if (v39 == *v18)
              v40 = *(a2 - 3) < *v14;
            if (v40)
            {
              v294 = v14[2];
              v272 = *(_QWORD *)v14;
              v41 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v41;
LABEL_35:
              *(a2 - 1) = v294;
              *(_QWORD *)v8 = v272;
            }
          }
          else if (v22)
          {
            v296 = v14[2];
            v274 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v296;
            *(_QWORD *)v8 = v274;
            v31 = v10[1];
            v32 = *v18 < v31;
            if (*v18 == v31)
              v32 = *v14 < *v10;
            if (v32)
            {
              v297 = v10[2];
              v275 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v33;
              v14[2] = v297;
              *(_QWORD *)v14 = v275;
            }
          }
          v42 = (uint64_t *)(v10 + 3);
          v43 = &v10[3 * v13];
          v46 = *(v43 - 3);
          v44 = v43 - 3;
          v45 = v46;
          v47 = v44 + 1;
          v48 = v44[1];
          v49 = v10[4];
          v50 = v46 < v10[3];
          v182 = v48 == v49;
          v51 = v48 < v49;
          if (v182)
            v51 = v50;
          v52 = *(a2 - 5);
          v53 = *(a2 - 6) < v45;
          v182 = v52 == v48;
          v54 = v52 < v48;
          if (v182)
            v54 = v53;
          if (v51)
          {
            if (v54)
            {
              v55 = *v42;
              v56 = v10[5];
              v57 = *(a2 - 4);
              *v42 = *(_QWORD *)v271;
              v10[5] = v57;
              *(a2 - 4) = v56;
              *(_QWORD *)v271 = v55;
            }
            else
            {
              v69 = *v42;
              v70 = v10[5];
              v71 = v44[2];
              *v42 = *(_QWORD *)v44;
              v10[5] = v71;
              v44[2] = v70;
              *(_QWORD *)v44 = v69;
              LODWORD(v69) = *(a2 - 5);
              v72 = v69 < *v47;
              if ((_DWORD)v69 == *v47)
                v72 = *(a2 - 6) < *v44;
              if (v72)
              {
                v303 = v44[2];
                v281 = *(_QWORD *)v44;
                v73 = *(_QWORD *)v271;
                v44[2] = *(a2 - 4);
                *(_QWORD *)v44 = v73;
                *(a2 - 4) = v303;
                *(_QWORD *)v271 = v281;
              }
            }
          }
          else if (v54)
          {
            v301 = v44[2];
            v279 = *(_QWORD *)v44;
            v58 = *(_QWORD *)v271;
            v44[2] = *(a2 - 4);
            *(_QWORD *)v44 = v58;
            *(a2 - 4) = v301;
            *(_QWORD *)v271 = v279;
            v59 = v10[4];
            v60 = *v47 < v59;
            if (*v47 == v59)
              v60 = *v44 < v10[3];
            if (v60)
            {
              v61 = *v42;
              v62 = v10[5];
              v63 = v44[2];
              *v42 = *(_QWORD *)v44;
              v10[5] = v63;
              v44[2] = v62;
              *(_QWORD *)v44 = v61;
            }
          }
          v74 = (uint64_t *)(v10 + 6);
          v75 = &v10[3 * v13];
          v78 = v75[3];
          v76 = v75 + 3;
          v77 = v78;
          v79 = v76 + 1;
          v80 = v76[1];
          v81 = v10[7];
          v82 = v78 < v10[6];
          v182 = v80 == v81;
          v83 = v80 < v81;
          if (v182)
            v83 = v82;
          v84 = *(a2 - 8);
          v85 = *(a2 - 9) < v77;
          v182 = v84 == v80;
          v86 = v84 < v80;
          if (v182)
            v86 = v85;
          if (v83)
          {
            if (v86)
            {
              v87 = *v74;
              v88 = v10[8];
              v89 = *(a2 - 7);
              *v74 = *(_QWORD *)v9;
              v10[8] = v89;
              *(a2 - 7) = v88;
              *(_QWORD *)v9 = v87;
            }
            else
            {
              v96 = *v74;
              v97 = v10[8];
              v98 = v76[2];
              *v74 = *(_QWORD *)v76;
              v10[8] = v98;
              v76[2] = v97;
              *(_QWORD *)v76 = v96;
              LODWORD(v96) = *(a2 - 8);
              v99 = v96 < *v79;
              if ((_DWORD)v96 == *v79)
                v99 = *(a2 - 9) < *v76;
              if (v99)
              {
                v305 = v76[2];
                v283 = *(_QWORD *)v76;
                v100 = *(_QWORD *)v9;
                v76[2] = *(a2 - 7);
                *(_QWORD *)v76 = v100;
                *(a2 - 7) = v305;
                *(_QWORD *)v9 = v283;
              }
            }
          }
          else if (v86)
          {
            v304 = v76[2];
            v282 = *(_QWORD *)v76;
            v90 = *(_QWORD *)v9;
            v76[2] = *(a2 - 7);
            *(_QWORD *)v76 = v90;
            *(a2 - 7) = v304;
            *(_QWORD *)v9 = v282;
            v91 = v10[7];
            v92 = *v79 < v91;
            if (*v79 == v91)
              v92 = *v76 < v10[6];
            if (v92)
            {
              v93 = *v74;
              v94 = v10[8];
              v95 = v76[2];
              *v74 = *(_QWORD *)v76;
              v10[8] = v95;
              v76[2] = v94;
              *(_QWORD *)v76 = v93;
            }
          }
          v101 = *v18;
          v102 = *v18 < *v47;
          if (*v18 == *v47)
            v102 = *v14 < *v44;
          result = *v76;
          v182 = *v79 == v101;
          v103 = *v79 < v101;
          if (v182)
            v103 = result < *v14;
          if (v102)
          {
            if (v103)
            {
              v306 = v44[2];
              v284 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v76;
              v44[2] = v76[2];
              goto LABEL_89;
            }
            v309 = v44[2];
            v287 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v14;
            v44[2] = v14[2];
            v14[2] = v309;
            *(_QWORD *)v14 = v287;
            v107 = *v18;
            v182 = *v79 == v107;
            v108 = *v79 < v107;
            if (v182)
              v108 = *v76 < *v14;
            if (v108)
            {
              v306 = v14[2];
              v284 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v76;
              v14[2] = v76[2];
LABEL_89:
              v76[2] = v306;
              *(_QWORD *)v76 = v284;
            }
          }
          else if (v103)
          {
            v307 = v14[2];
            v285 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v76;
            v14[2] = v76[2];
            v76[2] = v307;
            *(_QWORD *)v76 = v285;
            v104 = *v18;
            v105 = *v47;
            v182 = v104 == v105;
            v106 = v104 < v105;
            if (v182)
              v106 = *v14 < *v44;
            if (v106)
            {
              v308 = v44[2];
              v286 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v14;
              v44[2] = v14[2];
              v14[2] = v308;
              *(_QWORD *)v14 = v286;
            }
          }
          v310 = v10[2];
          v288 = *(_QWORD *)v10;
          v109 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v109;
          v14[2] = v310;
          *(_QWORD *)v14 = v288;
          goto LABEL_91;
        }
        v24 = v10[1];
        v25 = &v10[3 * v13 + 1];
        v26 = v24 < *v25;
        if (v24 == *v25)
          v26 = *v10 < *v14;
        v27 = v16 < *v10;
        v182 = v15 == v24;
        v28 = v15 < v24;
        if (v182)
          v28 = v27;
        if (v26)
        {
          if (v28)
          {
            v295 = v14[2];
            v273 = *(_QWORD *)v14;
            v29 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v29;
LABEL_52:
            *(a2 - 1) = v295;
            *(_QWORD *)v8 = v273;
            goto LABEL_91;
          }
          v302 = v14[2];
          v280 = *(_QWORD *)v14;
          v64 = *(_QWORD *)v10;
          v14[2] = v10[2];
          *(_QWORD *)v14 = v64;
          v10[2] = v302;
          *(_QWORD *)v10 = v280;
          v65 = *(a2 - 2);
          v66 = v10[1];
          v182 = v65 == v66;
          v67 = v65 < v66;
          if (v182)
            v67 = *(a2 - 3) < *v10;
          if (v67)
          {
            v295 = v10[2];
            v273 = *(_QWORD *)v10;
            v68 = *(_QWORD *)v8;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v68;
            goto LABEL_52;
          }
        }
        else if (v28)
        {
          v298 = v10[2];
          v276 = *(_QWORD *)v10;
          v34 = *(_QWORD *)v8;
          v10[2] = *(a2 - 1);
          *(_QWORD *)v10 = v34;
          *(a2 - 1) = v298;
          *(_QWORD *)v8 = v276;
          v35 = *v25;
          LODWORD(v34) = v10[1];
          v182 = (_DWORD)v34 == v35;
          v36 = v34 < v35;
          if (v182)
            v36 = *v10 < *v14;
          if (v36)
          {
            v299 = v14[2];
            v277 = *(_QWORD *)v14;
            v37 = *(_QWORD *)v10;
            v14[2] = v10[2];
            *(_QWORD *)v14 = v37;
            v10[2] = v299;
            *(_QWORD *)v10 = v277;
          }
        }
LABEL_91:
        --a3;
        v110 = *v10;
        if ((a4 & 1) == 0)
        {
          v111 = v10[1];
          v112 = *(v10 - 2);
          v182 = v112 == v111;
          v113 = v112 < v111;
          if (v182)
            v113 = *(v10 - 3) < v110;
          if (!v113)
          {
            v143 = *(_QWORD *)(v10 + 1);
            v144 = *(a2 - 2);
            v182 = (_DWORD)v143 == v144;
            v145 = v143 < v144;
            if (v182)
              v145 = v110 < *(a2 - 3);
            if (v145)
            {
              do
              {
                v146 = v10[3];
                v147 = v10[4];
                v10 += 3;
                v148 = v110 < v146;
                v182 = (_DWORD)v143 == v147;
                v149 = v143 < v147;
                if (!v182)
                  v148 = v149;
              }
              while (!v148);
            }
            else
            {
              v150 = v10 + 3;
              do
              {
                v10 = v150;
                if (v150 >= a2)
                  break;
                v151 = v150[1];
                v152 = v110 < *v10;
                v182 = (_DWORD)v143 == v151;
                v153 = v143 < v151;
                if (!v182)
                  v152 = v153;
                v150 = v10 + 3;
              }
              while (!v152);
            }
            v154 = a2;
            if (v10 < a2)
            {
              v154 = a2;
              do
              {
                v155 = *(v154 - 3);
                v156 = *(v154 - 2);
                v154 -= 3;
                v157 = v110 < v155;
                v182 = (_DWORD)v143 == v156;
                v158 = v143 < v156;
                if (!v182)
                  v157 = v158;
              }
              while (v157);
            }
            while (v10 < v154)
            {
              v312 = v10[2];
              v289 = *(_QWORD *)v10;
              v159 = *(_QWORD *)v154;
              v10[2] = v154[2];
              *(_QWORD *)v10 = v159;
              v154[2] = v312;
              *(_QWORD *)v154 = v289;
              do
              {
                v160 = v10[3];
                v161 = v10[4];
                v10 += 3;
                v162 = v110 < v160;
                v182 = (_DWORD)v143 == v161;
                v163 = v143 < v161;
                if (!v182)
                  v162 = v163;
              }
              while (!v162);
              do
              {
                v164 = *(v154 - 3);
                v165 = *(v154 - 2);
                v154 -= 3;
                v166 = v110 < v164;
                v182 = (_DWORD)v143 == v165;
                v167 = v143 < v165;
                if (!v182)
                  v166 = v167;
              }
              while (v166);
            }
            if (v10 - 3 != v7)
            {
              v168 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v168;
            }
            a4 = 0;
            *(v10 - 3) = v110;
            *((_QWORD *)v10 - 1) = v143;
            continue;
          }
        }
        v114 = *(_QWORD *)(v10 + 1);
        v115 = v10;
        do
        {
          v116 = v115;
          v117 = v115[3];
          v115 += 3;
          v118 = v116[4];
          v119 = v117 < v110;
          v182 = v118 == (_DWORD)v114;
          v120 = v118 < v114;
          if (!v182)
            v119 = v120;
        }
        while (v119);
        v121 = a2;
        if (v116 == v10)
        {
          v121 = a2;
          do
          {
            if (v115 >= v121)
              break;
            v126 = *(v121 - 3);
            v127 = *(v121 - 2);
            v121 -= 3;
            v128 = v126 < v110;
            v182 = v127 == (_DWORD)v114;
            v129 = v127 < v114;
            if (!v182)
              v128 = v129;
          }
          while (!v128);
        }
        else
        {
          do
          {
            v122 = *(v121 - 3);
            v123 = *(v121 - 2);
            v121 -= 3;
            v124 = v122 < v110;
            v182 = v123 == (_DWORD)v114;
            v125 = v123 < v114;
            if (!v182)
              v124 = v125;
          }
          while (!v124);
        }
        v10 = v115;
        if (v115 < v121)
        {
          v130 = (unint64_t)v121;
          do
          {
            v131 = *(_QWORD *)v10;
            v311 = v10[2];
            v132 = *(_DWORD *)(v130 + 8);
            *(_QWORD *)v10 = *(_QWORD *)v130;
            v10[2] = v132;
            *(_DWORD *)(v130 + 8) = v311;
            *(_QWORD *)v130 = v131;
            do
            {
              v133 = v10[3];
              v134 = v10[4];
              v10 += 3;
              v135 = v133 < v110;
              v182 = v134 == (_DWORD)v114;
              v136 = v134 < v114;
              if (!v182)
                v135 = v136;
            }
            while (v135);
            do
            {
              v137 = *(_DWORD *)(v130 - 12);
              v138 = *(_DWORD *)(v130 - 8);
              v130 -= 12;
              v139 = v137 < v110;
              v182 = v138 == (_DWORD)v114;
              v140 = v138 < v114;
              if (!v182)
                v139 = v140;
            }
            while (!v139);
          }
          while ((unint64_t)v10 < v130);
        }
        if (v10 - 3 != v7)
        {
          v141 = *(_QWORD *)(v10 - 3);
          v7[2] = *(v10 - 1);
          *(_QWORD *)v7 = v141;
        }
        *(v10 - 3) = v110;
        *((_QWORD *)v10 - 1) = v114;
        if (v115 < v121)
        {
LABEL_124:
          result = sub_239C8A1B0(v7, v10 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v142 = sub_239C8B39C(v7, v10 - 3);
        result = sub_239C8B39C(v10, a2);
        if (!(_DWORD)result)
        {
          if (v142)
            continue;
          goto LABEL_124;
        }
        a2 = v10 - 3;
        if (!v142)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_239C8B39C(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  _BOOL4 v73;
  _BOOL4 v74;
  unsigned int v75;
  uint64_t v76;
  char *v77;
  unsigned int v78;
  BOOL v79;
  BOOL v80;

  v2 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v2;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
        }
        else
        {
          v51 = a1[2];
          v52 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v52;
          a1[5] = v51;
          v53 = *(a2 - 2);
          v54 = a1[4];
          v8 = v53 == v54;
          v55 = v53 < v54;
          if (v8)
            v55 = *(a2 - 3) < a1[3];
          if (v55)
          {
            v56 = a1[5];
            v57 = *v13;
            v58 = *(a2 - 1);
            *v13 = *(_QWORD *)v18;
            a1[5] = v58;
            *(_QWORD *)v18 = v57;
            *(a2 - 1) = v56;
          }
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
        }
      }
      return 1;
    case 4uLL:
      sub_239531FA8(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_239C284A8(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v71 = *v66;
    v70 = v66[1];
    v72 = v24[1];
    v73 = *v66 < *v24;
    v8 = v70 == v72;
    v74 = v70 < v72;
    if (!v8)
      v73 = v74;
    if (v73)
    {
      v75 = v66[2];
      v76 = v67;
      do
      {
        v77 = (char *)a1 + v76;
        *(_QWORD *)(v77 + 36) = *(_QWORD *)((char *)a1 + v76 + 24);
        *((_DWORD *)v77 + 11) = *(unsigned int *)((char *)a1 + v76 + 32);
        if (v76 == -24)
        {
          v69 = a1;
          goto LABEL_41;
        }
        v78 = *((_DWORD *)v77 + 4);
        v79 = v71 < *((_DWORD *)v77 + 3);
        v8 = v70 == v78;
        v80 = v70 < v78;
        if (!v8)
          v79 = v80;
        v76 -= 12;
      }
      while (v79);
      v69 = (unsigned int *)((char *)a1 + v76 + 36);
LABEL_41:
      *v69 = v71;
      v69[1] = v70;
      v69[2] = v75;
      if (++v68 == 8)
        return v66 + 3 == a2;
    }
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
}

BOOL sub_239C8B7B4(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  _BOOL4 v71;
  _BOOL4 v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  unsigned int v76;
  BOOL v77;
  BOOL v78;

  v2 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v2;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
        }
        else
        {
          v50 = a1[2];
          v51 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v51;
          a1[5] = v50;
          v52 = *(a2 - 3);
          v53 = a1[3];
          v7 = v52 == v53;
          v54 = v52 < v53;
          if (v7)
            v54 = *(a2 - 2) < a1[4];
          if (v54)
          {
            v55 = a1[5];
            v56 = *v12;
            v57 = *(a2 - 1);
            *v12 = *(_QWORD *)v16;
            a1[5] = v57;
            *(_QWORD *)v16 = v56;
            *(a2 - 1) = v55;
          }
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
        }
      }
      return 1;
    case 4uLL:
      sub_239C28A18(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_239C28C18(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v68 = *v64;
    v69 = v64[1];
    v70 = *v23;
    v71 = v69 < v23[1];
    v7 = *v64 == v70;
    v72 = *v64 < v70;
    if (!v7)
      v71 = v72;
    if (v71)
    {
      v73 = v64[2];
      v74 = v65;
      do
      {
        v75 = (char *)a1 + v74;
        *(_QWORD *)(v75 + 36) = *(_QWORD *)((char *)a1 + v74 + 24);
        *((_DWORD *)v75 + 11) = *(unsigned int *)((char *)a1 + v74 + 32);
        if (v74 == -24)
        {
          v67 = a1;
          goto LABEL_43;
        }
        v76 = *((_DWORD *)v75 + 3);
        v77 = v69 < *((_DWORD *)v75 + 4);
        v7 = v68 == v76;
        v78 = v68 < v76;
        if (!v7)
          v77 = v78;
        v74 -= 12;
      }
      while (v77);
      v67 = (unsigned int *)((char *)a1 + v74 + 36);
LABEL_43:
      *v67 = v68;
      v67[1] = v69;
      v67[2] = v73;
      if (++v66 == 8)
        return v64 + 3 == a2;
    }
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
}

uint64_t sub_239C8BBCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  size_t v5;
  void *v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  unint64_t prime;
  void *v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _DWORD *v21;
  uint64_t *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  _DWORD *v47;
  uint64_t *v48;
  _DWORD *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  uint64_t *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _DWORD *v65;
  unint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  void **v80;
  void **v81;
  void *v82[2];
  void *v83[2];
  float v84;
  void *v85[2];
  void *__p[2];
  float v87;
  unsigned int v88;
  unsigned int *v89;

  if (!*(_BYTE *)(a1 + 98))
  {
    if (!*(_BYTE *)(a1 + 97))
    {
      v2 = *(_QWORD *)(a1 + 152);
      v3 = *(_QWORD *)(a1 + 160);
      *(_BYTE *)(a1 + 97) = v2 != v3;
      if (v2 == v3)
        *(_BYTE *)(a1 + 97) = *(_QWORD *)(a1 + 176) != *(_QWORD *)(a1 + 184);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 97))
    {
LABEL_131:
      *(_BYTE *)(a1 + 98) = 1;
      return a1 + 104;
    }
    *(_OWORD *)v82 = 0u;
    *(_OWORD *)v83 = 0u;
    v84 = 1.0;
    *(_OWORD *)v85 = 0u;
    *(_OWORD *)__p = 0u;
    v87 = 1.0;
    v4 = (float)*(unint64_t *)(a1 + 24);
    v5 = (unint64_t)v4;
    if ((unint64_t)v4 == 1)
    {
      v5 = 2;
LABEL_22:
      sub_239427FE0((uint64_t)v82, v5);
LABEL_23:
      prime = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / v87);
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v12 = v85[1];
      if ((void *)prime > v85[1])
        goto LABEL_28;
      if ((void *)prime < v85[1])
      {
        v13 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v87);
        if (v85[1] < (void *)3
          || (v14 = (uint8x8_t)vcnt_s8((int8x8_t)v85[1]), v14.i16[0] = vaddlv_u8(v14), v14.u32[0] > 1uLL))
        {
          v13 = std::__next_prime(v13);
        }
        else
        {
          v15 = 1 << -(char)__clz(v13 - 1);
          if (v13 >= 2)
            v13 = v15;
        }
        if (prime <= v13)
          prime = v13;
        if (prime < (unint64_t)v12)
LABEL_28:
          sub_239427FE0((uint64_t)v85, prime);
      }
      v16 = *(_QWORD *)(a1 + 56);
      for (i = *(_QWORD *)(a1 + 64); v16 != i; v16 += 544)
      {
        v18 = *(_QWORD *)(v16 + 400);
        if (*(_BYTE *)(v16 + 536)
          || (*(_BYTE *)(v18 + 148) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v16 + 408) + 28) & 6) != 0)
        {
          *(_BYTE *)(v16 + 536) = 1;
          v88 = *(_DWORD *)v18;
          v89 = &v88;
          v19 = sub_2395EC77C((uint64_t)v82, &v88, (uint64_t)&unk_239EC6E98, &v89);
          ++*((_DWORD *)v19 + 5);
          v88 = **(_DWORD **)(v16 + 408);
          v89 = &v88;
          v20 = sub_2395EC77C((uint64_t)v85, &v88, (uint64_t)&unk_239EC6E98, &v89);
          ++*((_DWORD *)v20 + 5);
        }
      }
      v21 = v83[0];
      if (v83[0])
      {
        v80 = (void **)(a1 + 152);
        v22 = (uint64_t *)(a1 + 16);
        do
        {
          v24 = *v22;
          if (!*v22)
            goto LABEL_61;
          v25 = v21[4];
          v26 = a1 + 16;
          do
          {
            v27 = *(_DWORD *)(v24 + 32);
            v28 = v27 >= v25;
            if (v27 >= v25)
              v29 = (uint64_t *)v24;
            else
              v29 = (uint64_t *)(v24 + 8);
            if (v28)
              v26 = v24;
            v24 = *v29;
          }
          while (*v29);
          if ((uint64_t *)v26 == v22 || v25 < *(_DWORD *)(v26 + 32))
LABEL_61:
            v26 = a1 + 16;
          if (*(_DWORD *)(v26 + 192) == v21[5] && (*(_BYTE *)(v26 + 188) & 6) == 0)
          {
            v31 = *(char **)(a1 + 160);
            v30 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v31 < v30)
            {
              *(_DWORD *)v31 = *(_DWORD *)(v26 + 32);
              v23 = v31 + 4;
            }
            else
            {
              v32 = (char *)*v80;
              v33 = v31 - (_BYTE *)*v80;
              v34 = v33 >> 2;
              v35 = (v33 >> 2) + 1;
              if (v35 >> 62)
LABEL_133:
                sub_2394189F8();
              v36 = v30 - (_QWORD)v32;
              if (v36 >> 1 > v35)
                v35 = v36 >> 1;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                v37 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                if (v37 >> 62)
LABEL_134:
                  sub_239418A80();
                v38 = operator new(4 * v37);
              }
              else
              {
                v38 = 0;
              }
              v39 = &v38[4 * v34];
              *v39 = *(_DWORD *)(v26 + 32);
              v23 = v39 + 1;
              if (v31 != v32)
              {
                v40 = v31 - 4 - v32;
                if (v40 < 0x2C)
                  goto LABEL_137;
                if ((unint64_t)(v31 - &v38[v33]) < 0x20)
                  goto LABEL_137;
                v41 = (v40 >> 2) + 1;
                v42 = &v38[4 * v34 - 16];
                v43 = v31 - 16;
                v44 = v41 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v45 = *(_OWORD *)v43;
                  *(v42 - 1) = *((_OWORD *)v43 - 1);
                  *v42 = v45;
                  v42 -= 2;
                  v43 -= 32;
                  v44 -= 8;
                }
                while (v44);
                v39 -= v41 & 0x7FFFFFFFFFFFFFF8;
                v31 -= 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
                if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_137:
                  do
                  {
                    v46 = *((_DWORD *)v31 - 1);
                    v31 -= 4;
                    *--v39 = v46;
                  }
                  while (v31 != v32);
                }
              }
              *(_QWORD *)(a1 + 152) = v39;
              *(_QWORD *)(a1 + 160) = v23;
              *(_QWORD *)(a1 + 168) = &v38[4 * v37];
              if (v32)
                operator delete(v32);
            }
            *(_QWORD *)(a1 + 160) = v23;
            *(_BYTE *)(v26 + 188) ^= 2u;
          }
          v21 = *(_DWORD **)v21;
        }
        while (v21);
      }
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v47 = __p[0];
      if (__p[0])
      {
        v81 = (void **)(a1 + 176);
        v48 = (uint64_t *)(a1 + 40);
        do
        {
          v50 = *v48;
          if (!*v48)
            goto LABEL_100;
          v51 = v47[4];
          v52 = a1 + 40;
          do
          {
            v53 = *(_DWORD *)(v50 + 32);
            v54 = v53 >= v51;
            if (v53 >= v51)
              v55 = (uint64_t *)v50;
            else
              v55 = (uint64_t *)(v50 + 8);
            if (v54)
              v52 = v50;
            v50 = *v55;
          }
          while (*v55);
          if ((uint64_t *)v52 == v48 || v51 < *(_DWORD *)(v52 + 32))
LABEL_100:
            v52 = a1 + 40;
          if (*(_DWORD *)(v52 + 72) == v47[5] && (*(_BYTE *)(v52 + 68) & 6) == 0)
          {
            v57 = *(char **)(a1 + 184);
            v56 = *(_QWORD *)(a1 + 192);
            if ((unint64_t)v57 < v56)
            {
              *(_DWORD *)v57 = *(_DWORD *)(v52 + 32);
              v49 = v57 + 4;
            }
            else
            {
              v58 = (char *)*v81;
              v59 = v57 - (_BYTE *)*v81;
              v60 = v59 >> 2;
              v61 = (v59 >> 2) + 1;
              if (v61 >> 62)
                goto LABEL_133;
              v62 = v56 - (_QWORD)v58;
              if (v62 >> 1 > v61)
                v61 = v62 >> 1;
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
                v63 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v63 = v61;
              if (v63)
              {
                if (v63 >> 62)
                  goto LABEL_134;
                v64 = operator new(4 * v63);
              }
              else
              {
                v64 = 0;
              }
              v65 = &v64[4 * v60];
              *v65 = *(_DWORD *)(v52 + 32);
              v49 = v65 + 1;
              if (v57 != v58)
              {
                v66 = v57 - 4 - v58;
                if (v66 < 0x2C)
                  goto LABEL_138;
                if ((unint64_t)(v57 - &v64[v59]) < 0x20)
                  goto LABEL_138;
                v67 = (v66 >> 2) + 1;
                v68 = &v64[4 * v60 - 16];
                v69 = v57 - 16;
                v70 = v67 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v71 = *(_OWORD *)v69;
                  *(v68 - 1) = *((_OWORD *)v69 - 1);
                  *v68 = v71;
                  v68 -= 2;
                  v69 -= 32;
                  v70 -= 8;
                }
                while (v70);
                v65 -= v67 & 0x7FFFFFFFFFFFFFF8;
                v57 -= 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
                if (v67 != (v67 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_138:
                  do
                  {
                    v72 = *((_DWORD *)v57 - 1);
                    v57 -= 4;
                    *--v65 = v72;
                  }
                  while (v57 != v58);
                }
              }
              *(_QWORD *)(a1 + 176) = v65;
              *(_QWORD *)(a1 + 184) = v49;
              *(_QWORD *)(a1 + 192) = &v64[4 * v63];
              if (v58)
                operator delete(v58);
            }
            *(_QWORD *)(a1 + 184) = v49;
            *(_BYTE *)(v52 + 68) ^= 2u;
          }
          v47 = *(_DWORD **)v47;
        }
        while (v47);
      }
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v73 = __p[0];
      if (__p[0])
      {
        do
        {
          v74 = (_QWORD *)*v73;
          operator delete(v73);
          v73 = v74;
        }
        while (v74);
      }
      v75 = v85[0];
      v85[0] = 0;
      if (v75)
        operator delete(v75);
      v76 = v83[0];
      if (v83[0])
      {
        do
        {
          v77 = (_QWORD *)*v76;
          operator delete(v76);
          v76 = v77;
        }
        while (v77);
      }
      v78 = v82[0];
      v82[0] = 0;
      if (v78)
        operator delete(v78);
      goto LABEL_131;
    }
    if ((v5 & ((unint64_t)v4 - 1)) != 0)
    {
      v5 = std::__next_prime((unint64_t)v4);
      v6 = v82[1];
      v7 = (void *)v5 >= v82[1];
      if ((void *)v5 > v82[1])
        goto LABEL_22;
    }
    else
    {
      v6 = 0;
      v7 = 1;
      if (v5)
        goto LABEL_22;
    }
    if (v7)
      goto LABEL_23;
    v8 = vcvtps_u32_f32((float)(unint64_t)v83[1] / v84);
    if ((unint64_t)v6 < 3
      || (v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (v5 <= v8)
      v5 = v8;
    if (v5 >= (unint64_t)v6)
      goto LABEL_23;
    goto LABEL_22;
  }
  return a1 + 104;
}

void sub_239C8C2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239C292B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239C8C2F8(uint64_t a1, char **a2, char **a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int64_t v12;
  _BOOL8 v13;
  void **p_dst;
  char *v15;
  unsigned int v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int64_t v28;
  char *v29;
  void **v30;
  _BOOL8 v31;
  unsigned int v32;
  char *v33;
  void *__dst;
  char *v35;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v6 = a2[1] - *a2;
  if (v6)
  {
    sub_23942CB44(a1, v6 >> 2);
    v7 = *a2;
    v8 = a2[1];
    v9 = *(char **)a1;
    v11 = *a3;
    v10 = a3[1];
    __dst = *(void **)a1;
    v35 = v11;
    if (v7 == v8)
    {
      v12 = 0;
    }
    else
    {
      while (1)
      {
        v15 = v35;
        if (v35 == v10)
          break;
        v16 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 >= *(_DWORD *)v35)
        {
          v13 = *(_DWORD *)v35 >= v16;
          p_dst = (void **)&v35;
        }
        else
        {
          v15 = (char *)__dst;
          *(_DWORD *)__dst = v16;
          p_dst = &__dst;
          v13 = 1;
        }
        v7 += 4 * v13;
        *p_dst = v15 + 4;
        if (v7 == v8)
        {
          v12 = 0;
          v9 = (char *)__dst;
          goto LABEL_13;
        }
      }
      v9 = (char *)__dst;
      v12 = v8 - v7;
      if (v8 != v7)
        memmove(__dst, v7, v8 - v7);
    }
  }
  else
  {
    v12 = 0;
    v9 = 0;
    v17 = *a3;
    __dst = 0;
    v35 = v17;
  }
LABEL_13:
  v18 = &v9[v12];
  if (v18 != *(char **)(a1 + 8))
    *(_QWORD *)(a1 + 8) = v18;
  v19 = a2[3];
  v20 = a2[4];
  v21 = (v20 - v19) >> 2;
  v22 = *(char **)(a1 + 24);
  v23 = (uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v22) >> 2;
  v24 = v21 >= v23;
  v25 = v21 - v23;
  if (v25 != 0 && v24)
  {
    sub_23942CB44(a1 + 24, v25);
    v19 = a2[3];
    v20 = a2[4];
    v22 = *(char **)(a1 + 24);
  }
  else if (!v24)
  {
    *(_QWORD *)(a1 + 32) = &v22[4 * v21];
  }
  v27 = a3[3];
  v26 = a3[4];
  __dst = v22;
  v35 = v27;
  if (v19 == v20)
  {
    v28 = 0;
  }
  else
  {
    while (1)
    {
      v29 = v35;
      if (v35 == v26)
        break;
      v32 = *(_DWORD *)v19;
      if (*(_DWORD *)v19 < *(_DWORD *)v35)
      {
        v29 = (char *)__dst;
        *(_DWORD *)__dst = v32;
        v30 = &__dst;
        v31 = 1;
      }
      else
      {
        v31 = *(_DWORD *)v35 >= v32;
        v30 = (void **)&v35;
      }
      v19 += 4 * v31;
      *v30 = v29 + 4;
      if (v19 == v20)
      {
        v28 = 0;
        v22 = (char *)__dst;
        goto LABEL_30;
      }
    }
    v22 = (char *)__dst;
    v28 = v20 - v19;
    if (v19 != v20)
      memmove(__dst, v19, v20 - v19);
  }
LABEL_30:
  v33 = &v22[v28];
  if (v33 != *(char **)(a1 + 32))
    *(_QWORD *)(a1 + 32) = v33;
}

void sub_239C8C540(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394FCFA8(v1);
  _Unwind_Resume(a1);
}

void sub_239C8C554(uint64_t a1, char **a2)
{
  uint64_t *v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  size_t v27;
  char *v28;
  unsigned int *v29;
  char *v30;
  unsigned int *v31;
  uint64_t *v32;
  unsigned int *v33;
  uint64_t v34;
  _OWORD *v35;
  unsigned int *v36;
  uint64_t v37;
  __int128 v38;
  char *v39;
  char *v40;
  BOOL v41;
  unsigned int *v42;
  char *v43;
  char *v44;
  char *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t *v48;
  unsigned int *v49;
  unsigned int *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  void *v60;
  unint64_t v61;
  char *v62;
  unsigned int v63;
  unsigned int *v64;
  char *v65;
  unsigned int *v66;
  uint64_t v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  char v79;
  uint64_t *v80;
  _DWORD *v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  uint64_t *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  _DWORD *v103;
  int v104;
  uint64_t v105;
  _DWORD *v106;
  int v107;
  uint64_t v108;
  unsigned int *v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  _BYTE *v124;
  uint64_t *v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  __int128 *v131;
  uint64_t v132;
  __int128 v133;
  unsigned int v134;
  unint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  const void *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unsigned int v153;
  uint64_t v154;
  const void *v155;
  uint64_t v156;
  int v157;
  BOOL v158;
  char **v159;
  unsigned int *v160;
  char *v161;
  char *v162;
  char *v163;
  int64_t v164;
  char *v165;
  char *v166;
  unsigned int *v167;
  int v168;
  unint64_t v169;
  __int128 v171;
  __int128 v172;
  unsigned int *v173;
  void *__p[2];
  void *v175[2];
  char *v176;
  __int128 v177;

  v3 = (uint64_t *)a1;
  v172 = 0u;
  v173 = 0;
  v171 = 0u;
  v5 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    if (v4 - v5 >= 0)
    {
      v6 = (unsigned int *)operator new(v4 - v5);
      v7 = v6;
      v8 = &v6[(v4 - v5) >> 2];
      *(_QWORD *)&v171 = v6;
      *((_QWORD *)&v171 + 1) = v6;
      v9 = (char *)v3[9];
      v10 = (char *)v3[10];
      v159 = a2;
      v11 = 0;
      if (v9 != v10)
      {
        while (*(_DWORD *)v9 < *(_DWORD *)v5)
        {
          v9 += 4;
          ++v11;
          if (v9 == v10)
            goto LABEL_47;
        }
      }
      if (v9 == v10)
      {
LABEL_47:
        v12 = v6;
        v14 = v6;
        v13 = v6;
        goto LABEL_49;
      }
      v12 = v6;
      v13 = v6;
      v14 = v6;
      v15 = (char *)v3[10];
      while (*(_DWORD *)v5 != *(_DWORD *)v9)
      {
        v9 += 4;
LABEL_33:
        v5 += 4;
        if (v5 != v4)
        {
          ++v11;
          if (v9 != v15)
            continue;
        }
        *((_QWORD *)&v171 + 1) = v7;
        *(_QWORD *)&v171 = v12;
LABEL_49:
        v41 = v13 != v14;
        v40 = v159[3];
        if (v40 != v159[4])
        {
          v39 = v159[4];
          goto LABEL_51;
        }
        v48 = v3;
        if (v13 == v14)
          goto LABEL_211;
LABEL_102:
        v80 = v48;
        sub_239C2DED8(v48[7], v12, v7);
        sub_239C2E074(v80[7], *((unint64_t *)&v172 + 1), (uint64_t)v173);
        sub_239C2DED8(v80[8], *((unsigned int **)&v172 + 1), v173);
        sub_239C2E074(v80[8], *((unint64_t *)&v172 + 1), (uint64_t)v173);
        sub_239C2DED8(v80[5], (unsigned int *)v171, *((unsigned int **)&v171 + 1));
        sub_239C2E074(v80[5], v171, *((uint64_t *)&v171 + 1));
        sub_239C2DED8(v80[6], *((unsigned int **)&v172 + 1), v173);
        sub_239C2E074(v80[6], v171, *((uint64_t *)&v171 + 1));
        *(_OWORD *)v175 = 0u;
        v177 = 0u;
        *(_OWORD *)__p = 0u;
        v81 = (_DWORD *)v171;
        v82 = *((_QWORD *)&v171 + 1) - v171;
        if (*((_QWORD *)&v171 + 1) != (_QWORD)v171)
        {
          if ((unint64_t)v82 <= 0x7FFFFFFFFFFFFFFCLL)
          {
            v83 = (char *)operator new(2 * v82);
            __p[0] = v83;
            __p[1] = v83;
            v176 = &v83[8 * (v82 >> 2)];
            while (1)
            {
              v85 = (6 * *v81);
              v86 = (char *)__p[0];
              v87 = v83 - (char *)__p[0];
              if (v83 != __p[0] && *((_DWORD *)v83 - 2) == (_DWORD)v85)
              {
                *((_DWORD *)v83 - 2) = v85 + 6;
                goto LABEL_107;
              }
              v88 = (v85 + 6);
              if (v83 >= v176)
                break;
              *(_QWORD *)v83 = v88 | (v85 << 32);
              v84 = v83 + 8;
LABEL_106:
              __p[1] = v84;
              v83 = (char *)v84;
LABEL_107:
              if (++v81 == *((_DWORD **)&v171 + 1))
              {
                v103 = __p[0];
                goto LABEL_142;
              }
            }
            v89 = v87 >> 3;
            v90 = (v87 >> 3) + 1;
            if (v90 >> 61)
              goto LABEL_215;
            v91 = v176 - (char *)__p[0];
            if ((v176 - (char *)__p[0]) >> 2 > v90)
              v90 = v91 >> 2;
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
              v92 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v92 = v90;
            if (v92)
            {
              if (v92 >> 61)
LABEL_214:
                sub_239418A80();
              v93 = operator new(8 * v92);
            }
            else
            {
              v93 = 0;
            }
            v94 = (uint64_t *)&v93[8 * v89];
            *v94 = v88 | (v85 << 32);
            v84 = v94 + 1;
            if (v83 == __p[0])
            {
              v86 = v83;
              goto LABEL_128;
            }
            v95 = v83 - 8 - (char *)__p[0];
            if (v95 < 0x168)
            {
              v96 = v83;
              goto LABEL_125;
            }
            if (&v93[(v87 & 0xFFFFFFFFFFFFFFF8) - 8 - (v95 & 0xFFFFFFFFFFFFFFF8)] > &v93[(v87 & 0xFFFFFFFFFFFFFFF8)
                                                                                            - 8])
            {
              v96 = v83;
            }
            else
            {
              if (&v83[-(v95 & 0xFFFFFFFFFFFFFFF8) - 8] <= v83 - 8)
              {
                if (v83 - v93 - (v87 & 0xFFFFFFFFFFFFFFF8) < 0x20)
                {
                  v96 = v83;
                  goto LABEL_125;
                }
                v98 = (v95 >> 3) + 1;
                v96 = &v83[-8 * (v98 & 0x3FFFFFFFFFFFFFFCLL)];
                v99 = &v93[8 * v89 - 16];
                v100 = (__int128 *)(v83 - 16);
                v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v102 = *v100;
                  *(v99 - 1) = *(v100 - 1);
                  *v99 = v102;
                  v99 -= 2;
                  v100 -= 2;
                  v101 -= 4;
                }
                while (v101);
                v94 -= v98 & 0x3FFFFFFFFFFFFFFCLL;
                if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_125;
LABEL_128:
                __p[0] = v94;
                v176 = &v93[8 * v92];
                if (v86)
                  operator delete(v86);
                goto LABEL_106;
              }
              v96 = v83;
            }
            do
            {
LABEL_125:
              v97 = *((_QWORD *)v96 - 1);
              v96 -= 8;
              *--v94 = v97;
            }
            while (v96 != __p[0]);
            v86 = (char *)__p[0];
            goto LABEL_128;
          }
LABEL_215:
          sub_2394189F8();
        }
        v103 = 0;
        v83 = 0;
LABEL_142:
        if (((v83 - (char *)v103) & 0x7FFFFFFF0) != 0)
        {
          v104 = v103[1];
          v105 = ((unint64_t)(v83 - (char *)v103) >> 3) - 1;
          v106 = v103 + 3;
          do
          {
            v104 += *v106 - *(v106 - 3);
            *v106 = v104;
            v106 += 2;
            --v105;
          }
          while (v105);
        }
        v107 = *(_DWORD *)(a1 + 24);
        v108 = *((_QWORD *)&v171 + 1);
        v109 = (unsigned int *)*((_QWORD *)&v172 + 1);
        v110 = (unint64_t)v173 - *((_QWORD *)&v172 + 1);
        v111 = ((uint64_t)v173 - *((_QWORD *)&v172 + 1)) >> 2;
        v112 = 0;
        if (v111)
        {
          if (v110 > 0x7FFFFFFFFFFFFFFCLL)
            goto LABEL_215;
          v113 = (uint64_t *)operator new(2 * v110);
          v114 = v113;
          v175[1] = v114;
          *((_QWORD *)&v177 + 1) = &v113[v111];
          v112 = (unsigned int *)v114;
          if (*((unsigned int **)&v172 + 1) != v173)
          {
LABEL_151:
            v168 = v107;
            while (1)
            {
              v116 = *v109;
              v117 = (uint64_t *)v175[1];
              v118 = (char *)v114 - (char *)v175[1];
              if (v114 != v175[1] && *((_DWORD *)v114 - 2) == (_DWORD)v116)
              {
                *((_DWORD *)v114 - 2) = v116 + 1;
                goto LABEL_154;
              }
              v119 = (v116 + 1);
              if ((unint64_t)v114 >= *((_QWORD *)&v177 + 1))
                break;
              *v114 = v119 | (v116 << 32);
              v115 = v114 + 1;
LABEL_153:
              v114 = v115;
LABEL_154:
              if (++v109 == v173)
              {
                v112 = (unsigned int *)v175[1];
                v107 = v168;
                v108 = *((_QWORD *)&v171 + 1);
                goto LABEL_188;
              }
            }
            v120 = v118 >> 3;
            v121 = (v118 >> 3) + 1;
            if (v121 >> 61)
              goto LABEL_215;
            v122 = *((_QWORD *)&v177 + 1) - (unint64_t)v175[1];
            if ((uint64_t)(*((_QWORD *)&v177 + 1) - (unint64_t)v175[1]) >> 2 > v121)
              v121 = v122 >> 2;
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8)
              v123 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v123 = v121;
            if (v123)
            {
              if (v123 >> 61)
                goto LABEL_214;
              v124 = operator new(8 * v123);
            }
            else
            {
              v124 = 0;
            }
            v125 = (uint64_t *)&v124[8 * v120];
            *v125 = v119 | (v116 << 32);
            v115 = v125 + 1;
            if (v114 == v175[1])
            {
              v117 = v114;
              goto LABEL_175;
            }
            v126 = (char *)(v114 - 1) - (char *)v175[1];
            if (v126 < 0x168)
            {
              v127 = v114;
              goto LABEL_172;
            }
            if (&v124[(v118 & 0xFFFFFFFFFFFFFFF8) - 8 - (v126 & 0xFFFFFFFFFFFFFFF8)] > &v124[(v118 & 0xFFFFFFFFFFFFFFF8)
                                                                                                - 8])
            {
              v127 = v114;
            }
            else
            {
              if ((uint64_t *)((char *)v114 - (v126 & 0xFFFFFFFFFFFFFFF8) - 8) <= v114 - 1)
              {
                if ((char *)v114 - v124 - (v118 & 0xFFFFFFFFFFFFFFF8) < 0x20)
                {
                  v127 = v114;
                  goto LABEL_172;
                }
                v129 = (v126 >> 3) + 1;
                v127 = &v114[-(v129 & 0x3FFFFFFFFFFFFFFCLL)];
                v130 = &v124[8 * v120 - 16];
                v131 = (__int128 *)(v114 - 2);
                v132 = v129 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v133 = *v131;
                  *(v130 - 1) = *(v131 - 1);
                  *v130 = v133;
                  v130 -= 2;
                  v131 -= 2;
                  v132 -= 4;
                }
                while (v132);
                v125 -= v129 & 0x3FFFFFFFFFFFFFFCLL;
                if (v129 != (v129 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_172;
LABEL_175:
                v175[1] = v125;
                *((_QWORD *)&v177 + 1) = &v124[8 * v123];
                if (v117)
                  operator delete(v117);
                goto LABEL_153;
              }
              v127 = v114;
            }
            do
            {
LABEL_172:
              v128 = *--v127;
              *--v125 = v128;
            }
            while (v127 != v175[1]);
            v117 = (uint64_t *)v175[1];
            goto LABEL_175;
          }
        }
        else
        {
          v114 = 0;
          if (*((unsigned int **)&v172 + 1) != v173)
            goto LABEL_151;
        }
LABEL_188:
        v134 = 6 * (v107 - ((unint64_t)(v108 - v171) >> 2));
        v135 = (char *)v114 - (char *)v112;
        v136 = ((unint64_t)((char *)v114 - (char *)v112) >> 3);
        if ((v135 & 0x7FFFFFFF0) != 0)
        {
          v137 = v112[1];
          v138 = v136 - 1;
          v139 = v112 + 3;
          do
          {
            v137 += *v139 - *(v139 - 3);
            *v139 = v137;
            v139 += 2;
            --v138;
          }
          while (v138);
        }
        v140 = *(_DWORD *)(a1 + 28) - (((unint64_t)v173 - *((_QWORD *)&v172 + 1)) >> 2);
        v169 = v140 + v134;
        v141 = *(_QWORD *)a1;
        v142 = (unsigned int *)__p[0];
        v143 = (char *)__p[1] - (char *)__p[0];
        if ((((char *)__p[1] - (char *)__p[0]) & 0x7FFFFFFF8) != 0)
        {
          v144 = 0;
          v145 = (v143 >> 3) - 1;
          v146 = (v143 >> 3);
          do
          {
            v147 = v134;
            if (v144 < v145)
              v147 = v142[3];
            v148 = v142[1];
            v149 = (const void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 32) + 8 * *v142);
            v150 = (uint64_t)v149 + 8 * v147 + -8 * v148;
            if ((const void *)v150 != v149)
              memmove((void *)(v141 + 8 * v148), v149, v150 - (_QWORD)v149);
            ++v144;
            v142 += 2;
          }
          while (v146 != v144);
        }
        if ((v135 & 0x7FFFFFFF8) != 0)
        {
          v151 = 0;
          v152 = (v135 >> 3) - 1;
          do
          {
            v153 = v140;
            if (v151 < v152)
              v153 = v112[3];
            v154 = v112[1];
            v155 = (const void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 36) + 8 * *v112);
            v156 = (uint64_t)v155 + 8 * v153 + -8 * v154;
            if ((const void *)v156 != v155)
              memmove((void *)(v141 + 8 * v134 + 8 * v154), v155, v156 - (_QWORD)v155);
            ++v151;
            v112 += 2;
          }
          while (v136 != v151);
        }
        *(_DWORD *)(a1 + 16) = v169;
        sub_23945215C(a1, v169);
        v12 = (unsigned int *)v171;
        v51 = (char *)*((_QWORD *)&v172 + 1);
        v157 = *(_DWORD *)(a1 + 28) - (((unint64_t)v173 - *((_QWORD *)&v172 + 1)) >> 2);
        *(_DWORD *)(a1 + 24) -= (*((_QWORD *)&v171 + 1) - (_QWORD)v171) >> 2;
        *(_DWORD *)(a1 + 28) = v157;
        *(_DWORD *)(a1 + 36) = v134 + *(_DWORD *)(a1 + 32);
        if (v175[1])
          operator delete(v175[1]);
        if (__p[0])
          operator delete(__p[0]);
        goto LABEL_209;
      }
      if (v14 < v8)
      {
        *v14 = v11;
        v7 = v14 + 1;
LABEL_30:
        v27 = v10 - (v9 + 4);
        if (v27)
        {
          v28 = v15;
          v165 = v5;
          v29 = v13;
          v30 = v4;
          v31 = v7;
          v32 = v3;
          v33 = v8;
          memmove(v9, v9 + 4, v27);
          v8 = v33;
          v3 = v32;
          v7 = v31;
          v4 = v30;
          v13 = v29;
          v5 = v165;
          v15 = v28;
        }
        v10 = &v9[v27];
        v3[10] = (uint64_t)v10;
        v15 -= 4;
        v14 = v7;
        goto LABEL_33;
      }
      v16 = (char *)v14 - (char *)v13;
      v17 = v14 - v13;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62)
LABEL_216:
        sub_2394189F8();
      if (((char *)v8 - (char *)v13) >> 1 > v18)
        v18 = ((char *)v8 - (char *)v13) >> 1;
      if ((unint64_t)((char *)v8 - (char *)v13) >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      v162 = v15;
      if (v19)
      {
        v164 = (char *)v14 - (char *)v13;
        if (v19 >> 62)
LABEL_217:
          sub_239418A80();
        v20 = v14;
        v21 = v19;
        v22 = operator new(4 * v19);
        v19 = v21;
        v14 = v20;
        v16 = v164;
      }
      else
      {
        v22 = 0;
      }
      v12 = (unsigned int *)&v22[4 * v17];
      *v12 = v11;
      v7 = v12 + 1;
      if (v14 == v13)
      {
        v3 = (uint64_t *)a1;
        v8 = (unsigned int *)&v22[4 * v19];
        if (!v13)
          goto LABEL_29;
        goto LABEL_28;
      }
      v23 = (char *)(v14 - 1) - (char *)v13;
      if (v23 < 0xBC
        || &v22[v16 - 4 - (v23 & 0xFFFFFFFFFFFFFFFCLL)] > &v22[v16 - 4]
        || (unsigned int *)((char *)v14 - (v23 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v14 - 1
        || (unint64_t)((char *)v14 - &v22[v16]) < 0x20)
      {
        v24 = v14;
        v3 = (uint64_t *)a1;
      }
      else
      {
        v34 = (v23 >> 2) + 1;
        v24 = &v14[-(v34 & 0x7FFFFFFFFFFFFFF8)];
        v35 = &v22[4 * v17 - 16];
        v36 = v14 - 4;
        v37 = v34 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v38 = *(_OWORD *)v36;
          *(v35 - 1) = *((_OWORD *)v36 - 1);
          *v35 = v38;
          v35 -= 2;
          v36 -= 8;
          v37 -= 8;
        }
        while (v37);
        v12 -= v34 & 0x7FFFFFFFFFFFFFF8;
        v3 = (uint64_t *)a1;
        if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_27:
          v8 = (unsigned int *)&v22[4 * v19];
          if (!v13)
          {
LABEL_29:
            v13 = v12;
            v15 = v162;
            goto LABEL_30;
          }
LABEL_28:
          v26 = v8;
          operator delete(v13);
          v8 = v26;
          v10 = (char *)v3[10];
          goto LABEL_29;
        }
      }
      do
      {
        v25 = *--v24;
        *--v12 = v25;
      }
      while (v24 != v13);
      goto LABEL_27;
    }
LABEL_218:
    sub_2394189F8();
  }
  v40 = a2[3];
  v39 = a2[4];
  if (v40 == v39)
    return;
  v12 = 0;
  v7 = 0;
  v41 = 0;
LABEL_51:
  if (v39 - v40 < 0)
    goto LABEL_218;
  v42 = (unsigned int *)operator new(v39 - v40);
  v160 = v7;
  v43 = (char *)&v42[(v39 - v40) >> 2];
  *((_QWORD *)&v172 + 1) = v42;
  v173 = v42;
  v44 = (char *)v3[12];
  v45 = (char *)v3[13];
  v46 = v42;
  v47 = 0;
  if (v44 != v45)
  {
    do
    {
      if (*(_DWORD *)v44 >= *(_DWORD *)v40)
        goto LABEL_56;
      v44 += 4;
      ++v47;
    }
    while (v44 != v45);
    v48 = v3;
LABEL_94:
    v51 = (char *)v42;
    v50 = v42;
    goto LABEL_96;
  }
LABEL_56:
  v48 = v3;
  if (v44 == v45)
    goto LABEL_94;
  v158 = v41;
  v49 = v42;
  v50 = v42;
  v51 = (char *)v42;
  v52 = v45;
  v163 = v39;
  do
  {
    if (*(_DWORD *)v40 != *(_DWORD *)v44)
    {
      v44 += 4;
      goto LABEL_82;
    }
    if (v51 >= v43)
    {
      v54 = (char *)(v51 - (char *)v50);
      v55 = (v51 - (char *)v50) >> 2;
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 62)
        goto LABEL_216;
      if ((v43 - (char *)v50) >> 1 > v56)
        v56 = (v43 - (char *)v50) >> 1;
      if ((unint64_t)(v43 - (char *)v50) >= 0x7FFFFFFFFFFFFFFCLL)
        v57 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v57 = v56;
      v161 = v52;
      if (v57)
      {
        v166 = (char *)(v51 - (char *)v50);
        if (v57 >> 62)
          goto LABEL_217;
        v58 = v51;
        v59 = v57;
        v60 = operator new(4 * v57);
        v57 = v59;
        v51 = v58;
        v54 = v166;
      }
      else
      {
        v60 = 0;
      }
      v49 = (unsigned int *)((char *)v60 + 4 * v55);
      *v49 = v47;
      v46 = v49 + 1;
      if (v51 == (char *)v50)
      {
        v53 = a1;
        v39 = v163;
        v43 = (char *)v60 + 4 * v57;
        if (!v50)
          goto LABEL_78;
        goto LABEL_77;
      }
      v61 = v51 - 4 - (char *)v50;
      if (v61 < 0xBC
        || &v54[(_QWORD)v60 - 4 - (v61 & 0xFFFFFFFFFFFFFFFCLL)] > &v54[(_QWORD)v60 - 4]
        || &v51[-(v61 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v51 - 4
        || (unint64_t)(v51 - &v54[(_QWORD)v60]) < 0x20)
      {
        v62 = v51;
        v53 = a1;
        v39 = v163;
      }
      else
      {
        v74 = (v61 >> 2) + 1;
        v62 = &v51[-4 * (v74 & 0x7FFFFFFFFFFFFFF8)];
        v75 = (char *)v60 + 4 * v55 - 16;
        v76 = v51 - 16;
        v77 = v74 & 0x7FFFFFFFFFFFFFF8;
        v39 = v163;
        do
        {
          v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          *v75 = v78;
          v75 -= 2;
          v76 -= 32;
          v77 -= 8;
        }
        while (v77);
        v49 -= v74 & 0x7FFFFFFFFFFFFFF8;
        v53 = a1;
        if (v74 == (v74 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_76:
          v43 = (char *)v60 + 4 * v57;
          if (!v50)
          {
LABEL_78:
            v50 = v49;
            v52 = v161;
            goto LABEL_79;
          }
LABEL_77:
          v64 = v50;
          v65 = v43;
          v66 = v46;
          v67 = v53;
          operator delete(v64);
          v53 = v67;
          v46 = v66;
          v43 = v65;
          v45 = *(char **)(v67 + 104);
          goto LABEL_78;
        }
      }
      do
      {
        v63 = *((_DWORD *)v62 - 1);
        v62 -= 4;
        *--v49 = v63;
      }
      while (v62 != (char *)v50);
      goto LABEL_76;
    }
    *(_DWORD *)v51 = v47;
    v46 = (unsigned int *)(v51 + 4);
    v53 = (uint64_t)v48;
LABEL_79:
    v68 = v45 - (v44 + 4);
    if (v68)
    {
      v69 = v52;
      v70 = v43;
      v167 = v50;
      v71 = v40;
      v72 = v46;
      v73 = v53;
      memmove(v44, v44 + 4, v68);
      v53 = v73;
      v46 = v72;
      v40 = v71;
      v43 = v70;
      v52 = v69;
      v39 = v163;
      v50 = v167;
    }
    v45 = &v44[v68];
    v48 = (uint64_t *)v53;
    *(_QWORD *)(v53 + 104) = v45;
    v52 -= 4;
    v51 = (char *)v46;
LABEL_82:
    v40 += 4;
    if (v40 == v39)
      break;
    ++v47;
  }
  while (v44 != v52);
  v173 = v46;
  *((_QWORD *)&v172 + 1) = v49;
  v41 = v158;
LABEL_96:
  v79 = v50 != (unsigned int *)v51 || v41;
  v7 = v160;
  if ((v79 & 1) != 0)
    goto LABEL_102;
LABEL_209:
  if (v51)
    operator delete(v51);
LABEL_211:
  if (v12)
    operator delete(v12);
}

void sub_239C8D3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_2394FCFA8((uint64_t)va1);
  sub_2394FCFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239C8D418(uint64_t a1, char **a2, char **a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;
  _BOOL4 v14;
  size_t v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  int v27;
  _BOOL4 v28;
  size_t v29;
  void *v30;
  char *v31;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v6 = *a2;
  v7 = a2[1];
  v8 = v7 - *a2;
  v9 = *a3;
  v10 = a3[1];
  v11 = ((v10 - *a3) >> 2) + (v8 >> 2);
  if (v11)
  {
    sub_23942CB44(a1, v11);
    v6 = *a2;
    v7 = a2[1];
    v9 = *a3;
    v10 = a3[1];
    v12 = *(_DWORD **)a1;
  }
  else
  {
    v12 = 0;
  }
  while (v6 != v7)
  {
    if (v9 == v10)
    {
      v15 = v7 - v6;
      v16 = v12;
      v9 = v6;
      goto LABEL_12;
    }
    v13 = *(_DWORD *)v9;
    v14 = *(_DWORD *)v9 >= *(_DWORD *)v6;
    if (*(_DWORD *)v9 >= *(_DWORD *)v6)
      v13 = *(_DWORD *)v6;
    v9 += 4 * (*(_DWORD *)v6 >= *(_DWORD *)v9);
    v6 += 4 * v14;
    *v12++ = v13;
  }
  v15 = v10 - v9;
  if (v9 == v10)
    goto LABEL_13;
  v16 = v12;
LABEL_12:
  memmove(v16, v9, v15);
LABEL_13:
  v17 = (char *)v12 + v15;
  if (v17 != *(char **)(a1 + 8))
    *(_QWORD *)(a1 + 8) = v17;
  v18 = a2[3];
  v19 = a2[4];
  v20 = a3[3];
  v21 = a3[4];
  v22 = ((v21 - v20) >> 2) + ((v19 - v18) >> 2);
  v23 = *(_DWORD **)(a1 + 24);
  v24 = (uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v23) >> 2;
  v25 = v22 >= v24;
  v26 = v22 - v24;
  if (v26 != 0 && v25)
  {
    sub_23942CB44(a1 + 24, v26);
    v18 = a2[3];
    v19 = a2[4];
    v20 = a3[3];
    v21 = a3[4];
    v23 = *(_DWORD **)(a1 + 24);
  }
  else if (!v25)
  {
    *(_QWORD *)(a1 + 32) = &v23[v22];
  }
  while (v18 != v19)
  {
    if (v20 == v21)
    {
      v29 = v19 - v18;
      v30 = v23;
      v20 = v18;
      goto LABEL_28;
    }
    v27 = *(_DWORD *)v20;
    v28 = *(_DWORD *)v20 >= *(_DWORD *)v18;
    if (*(_DWORD *)v20 >= *(_DWORD *)v18)
      v27 = *(_DWORD *)v18;
    v20 += 4 * (*(_DWORD *)v18 >= *(_DWORD *)v20);
    v18 += 4 * v28;
    *v23++ = v27;
  }
  v29 = v21 - v20;
  if (v20 == v21)
    goto LABEL_29;
  v30 = v23;
LABEL_28:
  memmove(v30, v20, v29);
LABEL_29:
  v31 = (char *)v23 + v29;
  if (v31 != *(char **)(a1 + 32))
    *(_QWORD *)(a1 + 32) = v31;
}

void sub_239C8D61C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394FCFA8(v1);
  _Unwind_Resume(a1);
}

double sub_239C8D630(_QWORD *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int64x2_t v15;
  __int128 v16;
  int8x16_t v17;
  int8x16_t v18;
  int64x2_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  _DWORD *v24;
  _DWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  float64x2_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v6 = a1[1];
  v7 = *(_DWORD **)v6;
  v8 = *(_DWORD **)(v6 + 8);
  if (*(_DWORD **)v6 != v8)
  {
    v9 = *(_QWORD **)(*a1 + 8);
    do
    {
      if (*((_DWORD *)v9 + 8) == *v7)
      {
        v21 = v9;
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v9[1];
          if (v22)
          {
            do
            {
              v21 = v22;
              v22 = (_QWORD *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v21 = (_QWORD *)v9[2];
              v23 = *v21 == (_QWORD)v9;
              v9 = v21;
            }
            while (!v23);
          }
          v9 = v21;
        }
        while (*((_DWORD *)v21 + 8) != *v7);
      }
      v10 = v21[9];
      v11 = v21[13];
      v12 = *(_OWORD *)(v21 + 11);
      v13 = v21[17];
      v14 = *(_OWORD *)(v21 + 15);
      v30 = *(float64x2_t *)(v21 + 7);
      v31 = v10;
      v32 = v12;
      v33 = v11;
      v34 = v14;
      v35 = v13;
      v37 = 0;
      v36 = 0uLL;
      sub_239458B60(&v30, (double *)&v36);
      v15.i64[0] = v37;
      v16 = v36;
      v17.i64[0] = v21[21];
      v18 = *(int8x16_t *)(v21 + 19);
      v19 = vzip1q_s64(v15, (int64x2_t)v18);
      v20 = *a2 + 8 * *a3;
      *(int64x2_t *)(v20 + 16) = v19;
      *(int8x16_t *)(v20 + 32) = vextq_s8(v18, v17, 8uLL);
      *(_OWORD *)v20 = v16;
      *a3 += 6;
      ++v7;
      v9 = v21;
    }
    while (v7 != v8);
    v6 = a1[1];
  }
  v24 = *(_DWORD **)(v6 + 24);
  v25 = *(_DWORD **)(v6 + 32);
  if (v24 != v25)
  {
    v26 = *(_QWORD **)(*a1 + 32);
    do
    {
      if (*((_DWORD *)v26 + 8) == *v24)
      {
        v27 = v26;
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v26[1];
          if (v28)
          {
            do
            {
              v27 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v27 = (_QWORD *)v26[2];
              v23 = *v27 == (_QWORD)v26;
              v26 = v27;
            }
            while (!v23);
          }
          v26 = v27;
        }
        while (*((_DWORD *)v27 + 8) != *v24);
      }
      v19.i64[0] = v27[7];
      *(_QWORD *)(*a2 + 8 * (*a3)++) = v19.i64[0];
      ++v24;
      v26 = v27;
    }
    while (v24 != v25);
  }
  return *(double *)v19.i64;
}

uint64_t sub_239C8D80C(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  BOOL v6;
  _QWORD *v7;
  int v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _QWORD *v18;
  int v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  v4 = *(_DWORD **)result;
  v5 = *(_DWORD **)(result + 8);
  v6 = (_QWORD *)*a2 == a2 + 1 || v4 == v5;
  if (v6)
  {
    v7 = (_QWORD *)*a2;
  }
  else
  {
    v8 = 0;
    do
    {
      if (*v4 == *((_DWORD *)v3 + 8))
      {
        if (*((_BYTE *)v3 + 44))
          v9 = v8;
        else
          v9 = -1;
        v8 += *((unsigned __int8 *)v3 + 44);
        ++v4;
      }
      else
      {
        v9 = -1;
      }
      *((_DWORD *)v3 + 46) = v9;
      v10 = (_QWORD *)v3[1];
      if (v10)
      {
        do
        {
          v7 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v6 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v6);
      }
      if (v7 == v2)
        break;
      v3 = v7;
    }
    while (v4 != v5);
  }
  if (v7 != v2)
  {
    do
    {
      *((_DWORD *)v7 + 46) = -1;
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v6 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v6);
      }
      v7 = v12;
    }
    while (v12 != v2);
  }
  v13 = (_QWORD *)a2[3];
  v14 = a2 + 4;
  v15 = *(_DWORD **)(result + 24);
  v16 = *(_DWORD **)(result + 32);
  if (v13 == a2 + 4 || v15 == v16)
  {
    v18 = (_QWORD *)a2[3];
  }
  else
  {
    v19 = 0;
    do
    {
      if (*v15 == *((_DWORD *)v13 + 8))
      {
        if (*((_BYTE *)v13 + 44))
          v20 = v19;
        else
          v20 = -1;
        v19 += *((unsigned __int8 *)v13 + 44);
        ++v15;
      }
      else
      {
        v20 = -1;
      }
      *((_DWORD *)v13 + 16) = v20;
      v21 = (_QWORD *)v13[1];
      if (v21)
      {
        do
        {
          v18 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v13[2];
          v6 = *v18 == (_QWORD)v13;
          v13 = v18;
        }
        while (!v6);
      }
      if (v18 == v14)
        break;
      v13 = v18;
    }
    while (v15 != v16);
  }
  if (v18 != v14)
  {
    do
    {
      *((_DWORD *)v18 + 16) = -1;
      v22 = (_QWORD *)v18[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v18[2];
          v6 = *v23 == (_QWORD)v18;
          v18 = v23;
        }
        while (!v6);
      }
      v18 = v23;
    }
    while (v23 != v14);
  }
  return result;
}

void sub_239C8D9D8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t j;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t k;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t m;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v2 = a1[2];
  v3 = *(unsigned int *)(v2 + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v6 = (uint64_t *)(*(_QWORD *)(v2 + 88) + 24 * i);
      v5 = *v6;
      v7 = v6[1];
      if (*v6 != v7)
      {
        v8 = *(_QWORD *)(v2 + 48);
        v9 = *(_QWORD *)(v2 + 56);
        v10 = *(_QWORD *)(v2 + 80);
        do
        {
          v11 = ((v9 - v8) << 6) - 1;
          if (v9 == v8)
            v11 = 0;
          v12 = *(_QWORD *)(v2 + 72) + v10;
          if (v11 == v12)
          {
            sub_2396DA1D4(v2 + 40);
            v8 = *(_QWORD *)(v2 + 48);
            v9 = *(_QWORD *)(v2 + 56);
            v12 = *(_QWORD *)(v2 + 80) + *(_QWORD *)(v2 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v8 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v12 & 0x1FF)) = *(_QWORD *)(v5 + 8);
          v10 = *(_QWORD *)(v2 + 80) + 1;
          *(_QWORD *)(v2 + 80) = v10;
          v5 += 16;
        }
        while (v5 != v7);
        v5 = *v6;
        v3 = *(unsigned int *)(v2 + 12);
      }
      v6[1] = v5;
    }
  }
  v13 = a1[3];
  v14 = *(unsigned int *)(v13 + 12);
  if ((_DWORD)v14)
  {
    for (j = 0; j < v14; ++j)
    {
      v17 = (uint64_t *)(*(_QWORD *)(v13 + 88) + 24 * j);
      v16 = *v17;
      v18 = v17[1];
      if (*v17 != v18)
      {
        v19 = *(_QWORD *)(v13 + 48);
        v20 = *(_QWORD *)(v13 + 56);
        v21 = *(_QWORD *)(v13 + 80);
        do
        {
          v22 = ((v20 - v19) << 6) - 1;
          if (v20 == v19)
            v22 = 0;
          v23 = *(_QWORD *)(v13 + 72) + v21;
          if (v22 == v23)
          {
            sub_2396DA1D4(v13 + 40);
            v19 = *(_QWORD *)(v13 + 48);
            v20 = *(_QWORD *)(v13 + 56);
            v23 = *(_QWORD *)(v13 + 80) + *(_QWORD *)(v13 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v19 + ((v23 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v23 & 0x1FF)) = *(_QWORD *)(v16 + 8);
          v21 = *(_QWORD *)(v13 + 80) + 1;
          *(_QWORD *)(v13 + 80) = v21;
          v16 += 16;
        }
        while (v16 != v18);
        v16 = *v17;
        v14 = *(unsigned int *)(v13 + 12);
      }
      v17[1] = v16;
    }
  }
  v24 = *a1;
  v25 = *(unsigned int *)(*a1 + 12);
  if ((_DWORD)v25)
  {
    for (k = 0; k < v25; ++k)
    {
      v28 = (uint64_t *)(*(_QWORD *)(v24 + 88) + 24 * k);
      v27 = *v28;
      v29 = v28[1];
      if (*v28 != v29)
      {
        v30 = *(_QWORD *)(v24 + 48);
        v31 = *(_QWORD *)(v24 + 56);
        v32 = *(_QWORD *)(v24 + 80);
        do
        {
          v33 = ((v31 - v30) << 6) - 1;
          if (v31 == v30)
            v33 = 0;
          v34 = *(_QWORD *)(v24 + 72) + v32;
          if (v33 == v34)
          {
            sub_2396DA1D4(v24 + 40);
            v30 = *(_QWORD *)(v24 + 48);
            v31 = *(_QWORD *)(v24 + 56);
            v34 = *(_QWORD *)(v24 + 80) + *(_QWORD *)(v24 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v30 + ((v34 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v34 & 0x1FF)) = *(_QWORD *)(v27 + 8);
          v32 = *(_QWORD *)(v24 + 80) + 1;
          *(_QWORD *)(v24 + 80) = v32;
          v27 += 16;
        }
        while (v27 != v29);
        v27 = *v28;
        v25 = *(unsigned int *)(v24 + 12);
      }
      v28[1] = v27;
    }
  }
  v35 = a1[1];
  v36 = *(unsigned int *)(v35 + 12);
  if ((_DWORD)v36)
  {
    for (m = 0; m < v36; ++m)
    {
      v39 = (uint64_t *)(*(_QWORD *)(v35 + 88) + 24 * m);
      v38 = *v39;
      v40 = v39[1];
      if (*v39 != v40)
      {
        v41 = *(_QWORD *)(v35 + 48);
        v42 = *(_QWORD *)(v35 + 56);
        v43 = *(_QWORD *)(v35 + 80);
        do
        {
          v44 = ((v42 - v41) << 6) - 1;
          if (v42 == v41)
            v44 = 0;
          v45 = *(_QWORD *)(v35 + 72) + v43;
          if (v44 == v45)
          {
            sub_2396DA1D4(v35 + 40);
            v41 = *(_QWORD *)(v35 + 48);
            v42 = *(_QWORD *)(v35 + 56);
            v45 = *(_QWORD *)(v35 + 80) + *(_QWORD *)(v35 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v41 + ((v45 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v45 & 0x1FF)) = *(_QWORD *)(v38 + 8);
          v43 = *(_QWORD *)(v35 + 80) + 1;
          *(_QWORD *)(v35 + 80) = v43;
          v38 += 16;
        }
        while (v38 != v40);
        v38 = *v39;
        v36 = *(unsigned int *)(v35 + 12);
      }
      v39[1] = v38;
    }
  }
}

void sub_239C8DD0C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  int *v9;
  int *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  int *v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  _DWORD v24[2];
  void *v25[2];
  void *__p[2];
  __int128 v27;

  *(_OWORD *)__p = 0u;
  v27 = 0u;
  *(_OWORD *)v25 = 0u;
  v8 = (_QWORD *)(a1 + 40);
  v24[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
  v24[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56));
  sub_239C90518(a2, a1 + 72, v24, (uint64_t)v25);
  sub_239C90E9C(v8, a3, (unsigned int **)v25, (unsigned int **)v25);
  v9 = (int *)v25[0];
  v10 = (int *)v25[1];
  v11 = (((unint64_t)v27 - (unint64_t)__p[1]) >> 3)
      + 6 * ((unint64_t)((char *)v25[1] - (char *)v25[0]) >> 3);
  if (*(_DWORD *)(a4 + 16) != (_DWORD)v11)
  {
    *(_DWORD *)(a4 + 16) = v11;
    sub_23945215C(a4, v11);
    v9 = (int *)v25[0];
    v10 = (int *)v25[1];
  }
  if (v9 != v10)
  {
    v12 = *(_DWORD *)(a1 + 32);
    do
    {
      v13 = *v9;
      v14 = v9[1];
      v9 += 2;
      v15 = (__int128 *)(*(_QWORD *)a1 + 8 * (v12 + 6 * v13));
      v16 = (_OWORD *)(*(_QWORD *)a4 + 8 * v14);
      v17 = v15[2];
      v18 = *v15;
      v16[1] = v15[1];
      v16[2] = v17;
      *v16 = v18;
    }
    while (v9 != v10);
  }
  v19 = (int *)__p[1];
  v20 = (int *)v27;
  if (__p[1] != (void *)v27)
  {
    v21 = *(_DWORD *)(a1 + 36);
    do
    {
      v22 = *v19;
      v23 = v19[1];
      v19 += 2;
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v23) = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v22 + v21));
    }
    while (v19 != v20);
    v19 = (int *)__p[1];
  }
  if (v19)
  {
    *(_QWORD *)&v27 = v19;
    operator delete(v19);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_239C8DE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2394FCFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239C8DE90(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _DWORD v7[2];
  void *v8[2];
  void *__p[2];
  __int128 v10;

  *(_OWORD *)__p = 0u;
  v10 = 0u;
  *(_OWORD *)v8 = 0u;
  v6 = (_QWORD *)(a1 + 40);
  v7[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
  v7[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56));
  sub_239C90518(a2, a1 + 72, v7, (uint64_t)v8);
  sub_239C90E9C(v6, a3, (unsigned int **)v8, (unsigned int **)v8);
  if (__p[1])
  {
    *(void **)&v10 = __p[1];
    operator delete(__p[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_239C8DF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2394FCFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239C8DF5C(_QWORD **a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _BYTE *v22;
  int v23;
  uint64_t *v24;
  void *v25[2];
  void *__p[2];
  __int128 v27;
  _DWORD v28[2];
  void *v29[2];
  void *v30[2];
  __int128 v31;
  uint64_t *v32;

  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  *(_OWORD *)v29 = 0u;
  v24 = (uint64_t *)(a1 + 5);
  v28[0] = (*(uint64_t (**)(_QWORD *))(*a1[5] + 48))(a1[5]);
  v28[1] = (*(uint64_t (**)(_QWORD *))(*a1[7] + 48))(a1[7]);
  sub_239C90518(a2, (uint64_t)(a1 + 9), v28, (uint64_t)v29);
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  *(_OWORD *)v25 = 0u;
  sub_239C90518(a3, (uint64_t)(a1 + 9), v28, (uint64_t)v25);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v24 + 48))(*v24);
  v10 = v29[0];
  v22 = v29[1];
  LODWORD(a2) = (*(uint64_t (**)(_QWORD *))(*a1[7] + 48))(a1[7]);
  v11 = v30[1];
  v12 = v31;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v24 + 56))(*v24);
  v15 = v25[0];
  v14 = v25[1];
  v16 = (*(uint64_t (**)(_QWORD *))(*a1[6] + 56))(a1[6]);
  v17 = (_DWORD)a2 * ((unint64_t)(v12 - (_QWORD)v11) >> 3);
  v18 = v13 * ((unint64_t)(v14 - v15) >> 3) + v16 * (((unint64_t)v27 - (unint64_t)__p[1]) >> 3);
  v19 = v17 + v23 * ((unint64_t)(v22 - v10) >> 3);
  *(_DWORD *)(a4 + 16) = v19;
  *(_DWORD *)(a4 + 20) = v18;
  sub_23945215C(a4, v18 * (unint64_t)v19);
  v20 = *(_DWORD *)(a4 + 20);
  if (v20 * *(_DWORD *)(a4 + 16))
    bzero(*(void **)a4, 8 * (v20 * *(_DWORD *)(a4 + 16)));
  if (v18 != *(_DWORD *)(a5 + 16) || v19 != *(_DWORD *)(a5 + 20))
  {
    *(_DWORD *)(a5 + 16) = v18;
    *(_DWORD *)(a5 + 20) = v19;
    sub_23945215C(a5, v18 * (unint64_t)v19);
    v18 = *(_DWORD *)(a5 + 16);
    v19 = *(_DWORD *)(a5 + 20);
  }
  if (v19 * v18)
    bzero(*(void **)a5, 8 * v19 * v18);
  sub_239C90AE4(v24, a5, (unsigned int **)v25, (unsigned int **)v29);
  sub_239C90AE4(v24, a4, (unsigned int **)v29, (unsigned int **)v25);
  v32 = (uint64_t *)a5;
  sub_239C2D710(a4, &v32);
  if (__p[1])
  {
    *(void **)&v27 = __p[1];
    operator delete(__p[1]);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  if (v30[1])
  {
    *(void **)&v31 = v30[1];
    operator delete(v30[1]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
}

void sub_239C8E1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_2394FCFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239C8E1D0(uint64_t *a1, uint64_t *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  unsigned int v24;
  __int128 v25;
  unsigned int v26;
  int v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _OWORD *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  __int128 *v61;
  _OWORD *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  _OWORD *v66;
  size_t v67;
  __int128 *v68;
  _BYTE *v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  __int128 *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  const double *v87;
  uint64_t v88;
  float64x2_t v89;
  float64x2_t *v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  int v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;

  v7 = a1[2];
  v8 = *(unsigned int *)(v7 + 12);
  if ((_DWORD)v8)
  {
    for (i = 0; i < v8; ++i)
    {
      v11 = (uint64_t *)(*(_QWORD *)(v7 + 88) + 24 * i);
      v10 = *v11;
      v12 = v11[1];
      if (*v11 != v12)
      {
        v13 = *(_QWORD *)(v7 + 48);
        v14 = *(_QWORD *)(v7 + 56);
        v15 = *(_QWORD *)(v7 + 80);
        do
        {
          v16 = ((v14 - v13) << 6) - 1;
          if (v14 == v13)
            v16 = 0;
          v17 = *(_QWORD *)(v7 + 72) + v15;
          if (v16 == v17)
          {
            sub_2396DA1D4(v7 + 40);
            v13 = *(_QWORD *)(v7 + 48);
            v14 = *(_QWORD *)(v7 + 56);
            v17 = *(_QWORD *)(v7 + 80) + *(_QWORD *)(v7 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v13 + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v17 & 0x1FF)) = *(_QWORD *)(v10 + 8);
          v15 = *(_QWORD *)(v7 + 80) + 1;
          *(_QWORD *)(v7 + 80) = v15;
          v10 += 16;
        }
        while (v10 != v12);
        v10 = *v11;
        v8 = *(unsigned int *)(v7 + 12);
      }
      v11[1] = v10;
    }
  }
  v18 = a2;
  sub_239C8F888(a1[3], a2, a3[2] | ((unint64_t)a4[2] << 32));
  sub_239C8FE00(*a1, a2, *a3 | ((unint64_t)*a4 << 32));
  v19 = a1[1];
  v20 = *(unsigned int *)(v19 + 12);
  if ((_DWORD)v20 && *(_DWORD *)(v19 + 8))
  {
    v21 = 0;
    v22 = *a3;
    v23 = (_QWORD *)(v19 + 16);
    v92 = a4[2];
    v24 = 1;
    v25 = 0uLL;
    v94 = *a3;
    while (!v24)
    {
LABEL_16:
      if (++v21 >= v20)
        return;
    }
    v26 = 0;
    v98 = *(_QWORD *)(v19 + 88) + 24 * v21;
    v93 = v21;
    v27 = v92 + v21;
    v96 = v92 + v21;
    while (1)
    {
      v30 = *v18;
      v34 = *((_DWORD *)v18 + 4);
      v35 = *(char **)v98;
      v36 = *(char **)(v98 + 8);
      if (*(char **)v98 != v36)
      {
        while (*(_DWORD *)v35 < v26)
        {
          v35 += 16;
          if (v35 == v36)
            goto LABEL_30;
        }
      }
      if (v35 != v36)
      {
        if (*(_DWORD *)v35 == v26)
        {
          v28 = (_OWORD *)(*v23 + 8 * *((_QWORD *)v35 + 1));
          goto LABEL_21;
        }
        v36 = v35;
      }
LABEL_30:
      v97 = *v18;
      v37 = *(_QWORD *)(v19 + 80);
      if (v37)
      {
        v39 = *(_QWORD *)(v19 + 48);
        v38 = *(_QWORD *)(v19 + 56);
        v40 = ((v38 - v39) << 6) - 1;
        v41 = *(_QWORD *)(v19 + 72);
        if (v38 == v39)
          v40 = 0;
        v28 = (_OWORD *)(*(_QWORD *)(v19 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v39 + (((unint64_t)(v41 + v37 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v41 + v37 - 1) & 0x1FF)));
        *(_QWORD *)(v19 + 80) = v37 - 1;
        if ((unint64_t)(v40 - (v37 + v41) + 1) >= 0x400)
        {
          operator delete(*(void **)(v38 - 8));
          *(_QWORD *)(v19 + 56) -= 8;
        }
        goto LABEL_20;
      }
      *(_QWORD *)&v99 = 0;
      v42 = *(_QWORD *)(v19 + 16);
      v43 = *(_QWORD *)(v19 + 24);
      v44 = v43 - v42;
      v45 = (uint64_t)(v43 - v42) >> 3;
      v46 = (__int128 *)(v42 + ((v43 - v42) & 0xFFFFFFFFFFFFFFF8));
      v47 = *(_QWORD *)(v19 + 32);
      if (v47 - v43 < 0x30)
      {
        v48 = v45 + 6;
        if ((unint64_t)(v45 + 6) >> 61)
          sub_2394189F8();
        v49 = v47 - v42;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          if (v50 >> 61)
            sub_239418A80();
          v51 = operator new(8 * v50);
          v25 = 0uLL;
          v45 = (uint64_t)(v43 - v42) >> 3;
        }
        else
        {
          v51 = 0;
        }
        v57 = &v51[8 * v45];
        v57[1] = v25;
        v57[2] = v25;
        *v57 = v25;
        if (v42 == v43)
        {
          v59 = &v51[8 * v45];
        }
        else
        {
          if (v44 - 8 < 0x68)
          {
            v58 = (char *)(v42 + ((v43 - v42) & 0xFFFFFFFFFFFFFFF8));
            v59 = &v51[8 * v45];
            goto LABEL_58;
          }
          v58 = (char *)(v42 + ((v43 - v42) & 0xFFFFFFFFFFFFFFF8));
          v59 = &v51[8 * v45];
          if (v42 + (v44 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v51[v44 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_101;
          v60 = ((v44 - 8) >> 3) + 1;
          v58 = (char *)v46 - 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
          v61 = (__int128 *)(v42 + 8 * v45 - 16);
          v62 = &v51[8 * v45 - 16];
          v63 = v60 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v64 = *v61;
            *(v62 - 1) = *(v61 - 1);
            *v62 = v64;
            v61 -= 2;
            v62 -= 2;
            v63 -= 4;
          }
          while (v63);
          v59 = (char *)v57 - 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
          if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_101:
            do
            {
LABEL_58:
              v65 = *((_QWORD *)v58 - 1);
              v58 -= 8;
              *((_QWORD *)v59 - 1) = v65;
              v59 -= 8;
            }
            while (v58 != (char *)v42);
          }
        }
        v66 = v57 + 3;
        v67 = v43 - (_QWORD)v46;
        if (v67)
        {
          v68 = v46;
          v69 = v51;
          memmove(v57 + 3, v68, v67);
          v51 = v69;
        }
        *(_QWORD *)(v19 + 16) = v59;
        *(_QWORD *)(v19 + 24) = (char *)v66 + v67;
        *(_QWORD *)(v19 + 32) = &v51[8 * v50];
        if (v42)
          operator delete((void *)v42);
        goto LABEL_19;
      }
      v52 = v43 - (_QWORD)v46;
      if (v43 - (unint64_t)v46 > 0x2F)
      {
        v54 = *(_QWORD *)(v19 + 24);
        v53 = 6;
        goto LABEL_72;
      }
      v53 = v52 >> 3;
      v54 = v43 + 8 * (6 - (v52 >> 3));
      v55 = 40 - (v52 & 0xFFFFFFFFFFFFFFF8);
      if (v55 < 0x68)
      {
        v56 = *(_QWORD **)(v19 + 24);
        goto LABEL_70;
      }
      if (v43 < (unint64_t)&v99 + 8 && (unint64_t)&v99 < v43 + v55 + 8)
        break;
      v70 = (v55 >> 3) + 1;
      v71 = *(_OWORD **)(v19 + 24);
      v72 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        *v71 = v25;
        v71[1] = v25;
        v71 += 2;
        v72 -= 4;
      }
      while (v72);
      if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v56 = (_QWORD *)(v43 + 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL));
        do
LABEL_70:
          *v56++ = v99;
        while (v56 != (_QWORD *)v54);
      }
      *(_QWORD *)(v19 + 24) = v54;
      if ((__int128 *)v43 == v46)
        goto LABEL_19;
LABEL_72:
      v73 = v54 - (_QWORD)(v46 + 3);
      v74 = v73 >> 3;
      v75 = (uint64_t *)(v54 - 48);
      v76 = (_QWORD *)v54;
      if (v54 - 48 < v43)
      {
        v77 = (v44 & 0xFFFFFFFFFFFFFFF8) + v73;
        v78 = v42 + v77 + 8;
        if (v43 > v78)
          v78 = v43;
        v79 = v78 + ~v42 - v77;
        if (v79 > 0x57)
        {
          v80 = (v79 >> 3) + 1;
          v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
          v75 = (uint64_t *)((char *)v75 + v81);
          v82 = (_OWORD *)(v54 + 16);
          v83 = (__int128 *)(v42 + 8 * v74 + 8 * v45 + 16);
          v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v85 = *v83;
            *(v82 - 1) = *(v83 - 1);
            *v82 = v85;
            v82 += 2;
            v83 += 2;
            v84 -= 4;
          }
          while (v84);
          v76 = (_QWORD *)(v54 + v81);
          if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_81;
        }
        else
        {
          v76 = (_QWORD *)v54;
        }
        do
        {
          v86 = *v75++;
          *v76++ = v86;
        }
        while ((unint64_t)v75 < v43);
      }
LABEL_81:
      *(_QWORD *)(v19 + 24) = v76;
      if ((__int128 *)v54 != v46 + 3)
      {
        memmove((void *)(v54 - 8 * v74), (const void *)(v42 + ((v43 - v42) & 0xFFFFFFFFFFFFFFF8)), v73);
        v45 = (uint64_t)(v43 - v42) >> 3;
      }
      v87 = (const double *)&v99;
      if (v46 <= &v99)
      {
        v88 = 48;
        if (*(_QWORD *)(v19 + 24) <= (unint64_t)&v99)
          v88 = 0;
        v87 = (const double *)((char *)&v99 + v88);
      }
      if (v53 >= 0xA
        && (v46 >= (__int128 *)(v87 + 1) || (unint64_t)v87 >= v42 + (v44 & 0xFFFFFFFFFFFFFFF8) + 8 * v53))
      {
        v46 = (__int128 *)((char *)v46 + 8 * (v53 & 0xFFFFFFFFFFFFFFFCLL));
        v89 = vld1q_dup_f64(v87);
        v90 = (float64x2_t *)(v42 + 8 * v45 + 16);
        v91 = v53 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v90[-1] = v89;
          *v90 = v89;
          v90 += 2;
          v91 -= 4;
        }
        while (v91);
        if (v53 == (v53 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_19;
        v53 &= 3u;
      }
      do
      {
        *(double *)v46 = *v87;
        v46 = (__int128 *)((char *)v46 + 8);
        --v53;
      }
      while (v53);
LABEL_19:
      v28 = (_OWORD *)(*(_QWORD *)(v19 + 24) - 48);
      v23 = (_QWORD *)(v19 + 16);
      v18 = a2;
      v22 = v94;
      v27 = v96;
LABEL_20:
      v29 = ((uint64_t)v28 - *v23) >> 3;
      LODWORD(v99) = v26;
      *((_QWORD *)&v99 + 1) = v29;
      sub_239C22598((char **)v98, v36, &v99);
      v25 = 0uLL;
      v30 = v97;
LABEL_21:
      v31 = (__int128 *)(v30 + 8 * (v22 + 6 * v26 + v34 * v27));
      v32 = *v31;
      v33 = v31[2];
      v28[1] = v31[1];
      v28[2] = v33;
      *v28 = v32;
      ++v26;
      v24 = *(_DWORD *)(v19 + 8);
      if (v26 >= v24)
      {
        v20 = *(unsigned int *)(v19 + 12);
        v21 = v93;
        goto LABEL_16;
      }
    }
    v56 = *(_QWORD **)(v19 + 24);
    goto LABEL_70;
  }
}

void sub_239C8E8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  char *v6;
  char v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char **v11;
  void **v12;
  size_t v13;
  unint64_t v14;
  _BYTE *v15;
  void **v16;
  char **v17;
  _BYTE *v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  char **v41;
  uint64_t v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  int v51;
  uint64_t *v52;
  void **v53;
  char *v54;
  uint64_t v55;
  _DWORD *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _DWORD *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  char *v74;
  _DWORD *v75;
  unsigned int *v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  _DWORD *v80;
  _DWORD *v81;
  int64_t v82;
  _QWORD *v83;
  void *v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int64_t v91;
  unint64_t v92;
  _BYTE *v93;
  uint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  _DWORD *v103;
  uint64_t v104;
  _DWORD *v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  _BYTE *v110;
  _BYTE *v111;
  unsigned int *v112;
  unsigned int *v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int64_t v138;
  unint64_t v139;
  _BYTE *v140;
  char *v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  int v150;
  unint64_t v151;
  _DWORD *v152;
  int v153;
  uint64_t v154;
  unsigned int v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  const void *v162;
  uint64_t v163;
  char *v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  const void *v173;
  uint64_t v174;
  _DWORD *v175;
  unsigned int v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  const void *v180;
  uint64_t v181;
  char *v182;
  int v183;
  std::bad_alloc *exception;
  std::bad_alloc *v185;
  uint64_t v186;
  char v188;
  int v189;
  uint64_t v191;
  char **v192;
  void **v193;
  uint64_t *v194;
  _BYTE *v195;
  void **v196;
  int v197;
  void *v198[2];
  void *v199[2];
  __int128 v200;
  void *__p[2];
  void *v202[2];
  __int128 v203;
  void *memptr;

  v2 = a1;
  v3 = 0;
  v4 = 0;
  *(_OWORD *)v199 = 0u;
  v200 = 0u;
  v186 = a1 + 72;
  v5 = 1;
  *(_OWORD *)v198 = 0u;
  do
  {
    v7 = v5;
    v8 = (_QWORD *)(a2 + 24 * v3);
    v9 = (char *)*v8;
    v11 = (char **)(v8 + 1);
    v10 = v8[1];
    if (*v8 != v10)
    {
      v12 = &v198[3 * v3];
      v13 = v10 - (_QWORD)v9;
      v14 = (v10 - (uint64_t)v9) >> 2;
      v193 = v12;
      v194 = (uint64_t *)(v12 + 2);
      v15 = *v12;
      v188 = v7;
      v189 = v4;
      v191 = v3;
      if (v14 <= ((_BYTE *)v12[2] - (_BYTE *)*v12) >> 2)
      {
        v6 = (char *)*v12;
        goto LABEL_19;
      }
      if ((v13 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v16 = &v198[3 * v3];
      v19 = v16[1];
      v17 = (char **)(v16 + 1);
      v18 = v19;
      v20 = (char *)operator new(v13);
      v21 = v19 - v15;
      v22 = &v20[(v19 - v15) & 0xFFFFFFFFFFFFFFFCLL];
      v6 = v22;
      if (v19 != v15)
      {
        v23 = v18 - 4 - v15;
        if (v23 < 0x2C)
        {
          v6 = &v20[(v18 - v15) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_16:
            v30 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v6 - 1) = v30;
            v6 -= 4;
          }
          while (v18 != v15);
          goto LABEL_17;
        }
        v6 = &v20[(v18 - v15) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(v18 - &v20[v21 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
          goto LABEL_16;
        v24 = v21 >> 2;
        v25 = (v23 >> 2) + 1;
        v26 = &v20[4 * v24 - 16];
        v27 = (__int128 *)(v18 - 16);
        v28 = v25 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)v26 = v29;
          v26 -= 32;
          v27 -= 2;
          v28 -= 8;
        }
        while (v28);
        v6 = &v22[-4 * (v25 & 0x7FFFFFFFFFFFFFF8)];
        v18 -= 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
        if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_16;
      }
LABEL_17:
      *v12 = v6;
      *v17 = v22;
      *v194 = (uint64_t)&v20[4 * v14];
      if (v15)
      {
        operator delete(v15);
        v14 = (uint64_t)&(*v11)[-*v8] >> 2;
      }
LABEL_19:
      v31 = v186 + 24 * v191;
      v32 = *(char **)(v31 + 8);
      v192 = (char **)(v31 + 8);
      v33 = *(char **)v31;
      v34 = (uint64_t)&v32[-*(_QWORD *)v31] >> 2;
      v35 = v14 + v34;
      v196 = (void **)v31;
      v36 = (_QWORD *)(v31 + 16);
      if (v35 <= (uint64_t)(*(_QWORD *)(v31 + 16) - *(_QWORD *)v31) >> 2)
      {
        v38 = *(char **)(v31 + 8);
        v39 = *(char **)(v186 + 24 * v191);
        v41 = (char **)(v31 + 8);
LABEL_32:
        v48 = (char *)*v8;
        v49 = *v11;
        v50 = v193;
        v51 = 0;
        if (v39 != v38)
        {
          v52 = v194;
          while (*(_DWORD *)v39 <= *(_DWORD *)v48)
          {
            v39 += 4;
            ++v51;
            if (v39 == v38)
              goto LABEL_38;
          }
          v38 = v39;
          if (v48 != v49)
            goto LABEL_41;
          goto LABEL_3;
        }
        v52 = v194;
LABEL_38:
        if (v48 == v49)
        {
LABEL_3:
          v2 = a1;
          v7 = v188;
          v4 = v189 | (v6 != v198[3 * v191 + 1]);
          goto LABEL_4;
        }
LABEL_41:
        v53 = &v198[3 * v191 + 1];
        while (1)
        {
          if (v38 != *v41 && *(_DWORD *)v48 == *(_DWORD *)v38)
            goto LABEL_42;
          v54 = (char *)*v53;
          v55 = *v52;
          if ((unint64_t)*v53 >= *v52)
            break;
          *(_DWORD *)v54 = v51;
          v56 = v54 + 4;
LABEL_69:
          *v53 = v56;
          v38 = sub_239C2C8E4(v196, v38, v48);
          v48 += 4;
LABEL_42:
          v38 += 4;
          ++v51;
          if (v48 == v49)
          {
            v6 = (char *)*v50;
            goto LABEL_3;
          }
        }
        v57 = v49;
        v58 = (char *)*v50;
        v59 = (uint64_t)&v54[-*v50];
        v60 = v59 >> 2;
        v61 = (v59 >> 2) + 1;
        if (v61 >> 62)
          sub_2394189F8();
        v62 = v55 - (_QWORD)v58;
        if (v62 >> 1 > v61)
          v61 = v62 >> 1;
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
          v63 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        if (v63)
        {
          if (v63 >> 62)
            sub_239418A80();
          v64 = operator new(4 * v63);
        }
        else
        {
          v64 = 0;
        }
        v65 = &v64[4 * v60];
        *v65 = v51;
        v56 = v65 + 1;
        if (v54 == v58)
        {
          v52 = v194;
        }
        else
        {
          v66 = v54 - 4 - v58;
          if (v66 >= 0x2C)
          {
            v67 = v54 - &v64[v59];
            v52 = v194;
            if (v67 >= 0x20)
            {
              v68 = (v66 >> 2) + 1;
              v69 = &v64[4 * v60 - 16];
              v70 = v54 - 16;
              v71 = v68 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v72 = *(_OWORD *)v70;
                *(v69 - 1) = *((_OWORD *)v70 - 1);
                *v69 = v72;
                v69 -= 2;
                v70 -= 32;
                v71 -= 8;
              }
              while (v71);
              v65 -= v68 & 0x7FFFFFFFFFFFFFF8;
              v54 -= 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
              if (v68 == (v68 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_66;
            }
          }
          else
          {
            v52 = v194;
          }
          do
          {
            v73 = *((_DWORD *)v54 - 1);
            v54 -= 4;
            *--v65 = v73;
          }
          while (v54 != v58);
        }
LABEL_66:
        v74 = &v64[4 * v63];
        v50 = v193;
        *v193 = v65;
        *v52 = (uint64_t)v74;
        if (v58)
          operator delete(v58);
        v49 = v57;
        v53 = &v198[3 * v191 + 1];
        v41 = v192;
        goto LABEL_69;
      }
      if (v35 >> 62)
        sub_2394189F8();
      v37 = operator new(4 * v35);
      v38 = &v37[4 * v34];
      v39 = v38;
      if (v32 != v33)
      {
        v40 = v32 - 4 - v33;
        if (v40 < 0x2C)
        {
          v39 = &v37[4 * v34];
          do
          {
LABEL_29:
            v47 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v39 - 1) = v47;
            v39 -= 4;
          }
          while (v32 != v33);
          goto LABEL_30;
        }
        v39 = &v37[4 * v34];
        if ((unint64_t)(v33 - v37) < 0x20)
          goto LABEL_29;
        v42 = (v40 >> 2) + 1;
        v43 = &v37[4 * v34 - 16];
        v44 = v32 - 16;
        v45 = v42 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v46 = *(_OWORD *)v44;
          *(v43 - 1) = *((_OWORD *)v44 - 1);
          *v43 = v46;
          v43 -= 2;
          v44 -= 32;
          v45 -= 8;
        }
        while (v45);
        v39 = &v38[-4 * (v42 & 0x7FFFFFFFFFFFFFF8)];
        v32 -= 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
        if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_29;
      }
LABEL_30:
      *v196 = v39;
      v41 = v192;
      *v192 = v38;
      *v36 = &v37[4 * v35];
      if (v33)
      {
        operator delete(v33);
        v39 = (char *)*v196;
        v38 = *v192;
      }
      goto LABEL_32;
    }
LABEL_4:
    v5 = 0;
    v3 = 1;
  }
  while ((v7 & 1) != 0);
  if ((v4 & 1) == 0)
    goto LABEL_210;
  v75 = *(_DWORD **)(v2 + 56);
  if (v75[2])
  {
    v76 = (unsigned int *)v198[0];
  }
  else
  {
    v76 = (unsigned int *)v198[0];
    if (!v75[3])
    {
      (*(void (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)v75 + 24))(*(_QWORD *)(v2 + 56), ((unint64_t)v200 - (unint64_t)v199[1]) >> 2, (unint64_t)((char *)v198[1] - (char *)v198[0]) >> 2);
      goto LABEL_75;
    }
  }
  sub_239C2CC34(*(_QWORD *)(v2 + 56), v76, (unsigned int *)v198[1], (uint64_t)(v200 - (unint64_t)v199[1]) >> 2);
  sub_239C2D040((uint64_t)v75, (char *)v199[1], (char *)v200);
LABEL_75:
  v77 = *(_DWORD **)(v2 + 64);
  if (v77[2] || v77[3])
  {
    sub_239C2CC34(*(_QWORD *)(v2 + 64), (unsigned int *)v199[1], (unsigned int *)v200, (uint64_t)(v200 - (unint64_t)v199[1]) >> 2);
    sub_239C2D040((uint64_t)v77, (char *)v199[1], (char *)v200);
  }
  else
  {
    (*(void (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)v77 + 24))(*(_QWORD *)(v2 + 64), ((unint64_t)v200 - (unint64_t)v199[1]) >> 2, ((unint64_t)v200 - (unint64_t)v199[1]) >> 2);
  }
  v78 = *(_DWORD **)(v2 + 40);
  if (v78[2] || v78[3])
  {
    sub_239C2CC34(*(_QWORD *)(v2 + 40), (unsigned int *)v198[0], (unsigned int *)v198[1], ((char *)v198[1] - (char *)v198[0]) >> 2);
    sub_239C2D040((uint64_t)v78, (char *)v198[0], (char *)v198[1]);
  }
  else
  {
    (*(void (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)v78 + 24))(*(_QWORD *)(v2 + 40), (unint64_t)((char *)v198[1] - (char *)v198[0]) >> 2, (unint64_t)((char *)v198[1] - (char *)v198[0]) >> 2);
  }
  v79 = *(_DWORD **)(v2 + 48);
  if (v79[2] || v79[3])
  {
    sub_239C2CC34(*(_QWORD *)(v2 + 48), (unsigned int *)v199[1], (unsigned int *)v200, ((char *)v198[1] - (char *)v198[0]) >> 2);
    sub_239C2D040((uint64_t)v79, (char *)v198[0], (char *)v198[1]);
  }
  else
  {
    (*(void (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)v79 + 24))(*(_QWORD *)(v2 + 48), (unint64_t)((char *)v198[1] - (char *)v198[0]) >> 2, ((unint64_t)v200 - (unint64_t)v199[1]) >> 2);
  }
  *(_OWORD *)v202 = 0u;
  v203 = 0u;
  *(_OWORD *)__p = 0u;
  v81 = v198[0];
  v80 = v198[1];
  v82 = (char *)v198[1] - (char *)v198[0];
  if (v198[1] != v198[0])
  {
    if ((unint64_t)v82 <= 0x7FFFFFFFFFFFFFFCLL)
    {
      v83 = operator new(2 * v82);
      __p[0] = v83;
      __p[1] = v83;
      v202[0] = &v83[v82 >> 2];
      while (1)
      {
        v85 = (6 * *v81);
        v86 = __p[0];
        v87 = (char *)v83 - (char *)__p[0];
        if (v83 != __p[0] && *((_DWORD *)v83 - 1) == (_DWORD)v85)
        {
          *((_DWORD *)v83 - 1) = v85 + 6;
          goto LABEL_89;
        }
        v88 = (v85 + 6);
        if (v83 >= v202[0])
          break;
        *v83 = v85 | (v88 << 32);
        v84 = v83 + 1;
LABEL_88:
        __p[1] = v84;
        v83 = v84;
LABEL_89:
        if (++v81 == v80)
        {
          v103 = __p[0];
          v2 = a1;
          goto LABEL_124;
        }
      }
      v89 = v87 >> 3;
      v90 = (v87 >> 3) + 1;
      if (v90 >> 61)
        goto LABEL_224;
      v91 = (char *)v202[0] - (char *)__p[0];
      if (((char *)v202[0] - (char *)__p[0]) >> 2 > v90)
        v90 = v91 >> 2;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
        v92 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      if (v92)
      {
        if (v92 >> 61)
LABEL_223:
          sub_239418A80();
        v93 = operator new(8 * v92);
      }
      else
      {
        v93 = 0;
      }
      v94 = (uint64_t *)&v93[8 * v89];
      *v94 = v85 | (v88 << 32);
      v84 = v94 + 1;
      if (v83 == (_QWORD *)v86)
      {
        v86 = v83;
        goto LABEL_110;
      }
      v95 = (char *)(v83 - 1) - v86;
      if (v95 >= 0x168)
      {
        if (&v93[(v87 & 0xFFFFFFFFFFFFFFF8) - 8 - (v95 & 0xFFFFFFFFFFFFFFF8)] > &v93[(v87 & 0xFFFFFFFFFFFFFFF8)
                                                                                        - 8])
        {
          v96 = v83;
        }
        else if ((_QWORD *)((char *)v83 - (v95 & 0xFFFFFFFFFFFFFFF8) - 8) > v83 - 1)
        {
          v96 = v83;
        }
        else if ((char *)v83 - v93 - (v87 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
        {
          v98 = (v95 >> 3) + 1;
          v96 = &v83[-(v98 & 0x3FFFFFFFFFFFFFFCLL)];
          v99 = &v93[8 * v89 - 16];
          v100 = (__int128 *)(v83 - 2);
          v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v102 = *v100;
            *(v99 - 1) = *(v100 - 1);
            *v99 = v102;
            v99 -= 2;
            v100 -= 2;
            v101 -= 4;
          }
          while (v101);
          v94 -= v98 & 0x3FFFFFFFFFFFFFFCLL;
          if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_110;
        }
        else
        {
          v96 = v83;
        }
      }
      else
      {
        v96 = v83;
      }
      do
      {
        v97 = *--v96;
        *--v94 = v97;
      }
      while (v96 != (_QWORD *)v86);
      v86 = __p[0];
LABEL_110:
      __p[0] = v94;
      v202[0] = &v93[8 * v92];
      if (v86)
        operator delete(v86);
      goto LABEL_88;
    }
LABEL_224:
    sub_2394189F8();
  }
  v103 = 0;
  v83 = 0;
LABEL_124:
  if ((((char *)v83 - (char *)v103) & 0x7FFFFFFF0) != 0)
  {
    v104 = ((unint64_t)((char *)v83 - (char *)v103) >> 3);
    v107 = *v103;
    v105 = v103 + 2;
    v106 = v107;
    v108 = v104 - 1;
    do
    {
      v106 += *v105 - *(v105 - 1);
      *v105 = v106;
      v105 += 2;
      --v108;
    }
    while (v108);
  }
  v109 = *(_DWORD *)(v2 + 24);
  v111 = v198[0];
  v110 = v198[1];
  v113 = (unsigned int *)v199[1];
  v112 = (unsigned int *)v200;
  v114 = v200 - (unint64_t)v199[1];
  v115 = (uint64_t)(v200 - (unint64_t)v199[1]) >> 2;
  v116 = (char *)v202[1];
  if (v115 <= (uint64_t)(*((_QWORD *)&v203 + 1) - (unint64_t)v202[1]) >> 3)
  {
    v120 = (char *)v203;
    if (v199[1] != (void *)v200)
    {
LABEL_142:
      v195 = v110;
      v197 = v109;
      while (1)
      {
        v132 = *v113;
        v133 = (char *)v202[1];
        v134 = v120 - (char *)v202[1];
        if (v120 != v202[1] && *((_DWORD *)v120 - 1) == (_DWORD)v132)
        {
          *((_DWORD *)v120 - 1) = v132 + 1;
          goto LABEL_145;
        }
        v135 = (v132 + 1);
        if ((unint64_t)v120 >= *((_QWORD *)&v203 + 1))
          break;
        *(_QWORD *)v120 = v132 | (v135 << 32);
        v131 = v120 + 8;
LABEL_144:
        *(_QWORD *)&v203 = v131;
        v120 = v131;
LABEL_145:
        if (++v113 == v112)
        {
          v116 = (char *)v202[1];
          v109 = v197;
          v110 = v195;
          goto LABEL_179;
        }
      }
      v136 = v134 >> 3;
      v137 = (v134 >> 3) + 1;
      if (v137 >> 61)
        goto LABEL_224;
      v138 = *((_QWORD *)&v203 + 1) - (unint64_t)v202[1];
      if ((uint64_t)(*((_QWORD *)&v203 + 1) - (unint64_t)v202[1]) >> 2 > v137)
        v137 = v138 >> 2;
      if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
        v139 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v139 = v137;
      if (v139)
      {
        if (v139 >> 61)
          goto LABEL_223;
        v140 = operator new(8 * v139);
      }
      else
      {
        v140 = 0;
      }
      v141 = &v140[8 * v136];
      *(_QWORD *)v141 = v132 | (v135 << 32);
      v131 = v141 + 8;
      if (v120 == v133)
      {
        v133 = v120;
        goto LABEL_166;
      }
      v142 = v120 - 8 - v133;
      if (v142 >= 0x168)
      {
        if (&v140[(v134 & 0xFFFFFFFFFFFFFFF8) - 8 - (v142 & 0xFFFFFFFFFFFFFFF8)] > &v140[(v134 & 0xFFFFFFFFFFFFFFF8)
                                                                                            - 8])
        {
          v143 = v120;
        }
        else if (&v120[-(v142 & 0xFFFFFFFFFFFFFFF8) - 8] > v120 - 8)
        {
          v143 = v120;
        }
        else if (v120 - v140 - (v134 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
        {
          v145 = (v142 >> 3) + 1;
          v143 = &v120[-8 * (v145 & 0x3FFFFFFFFFFFFFFCLL)];
          v146 = &v140[8 * v136 - 16];
          v147 = v120 - 16;
          v148 = v145 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v149 = *(_OWORD *)v147;
            *(v146 - 1) = *((_OWORD *)v147 - 1);
            *v146 = v149;
            v146 -= 2;
            v147 -= 32;
            v148 -= 4;
          }
          while (v148);
          v141 -= 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
          if (v145 == (v145 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_166;
        }
        else
        {
          v143 = v120;
        }
      }
      else
      {
        v143 = v120;
      }
      do
      {
        v144 = *((_QWORD *)v143 - 1);
        v143 -= 8;
        *((_QWORD *)v141 - 1) = v144;
        v141 -= 8;
      }
      while (v143 != v133);
      v133 = (char *)v202[1];
LABEL_166:
      v202[1] = v141;
      *((_QWORD *)&v203 + 1) = &v140[8 * v139];
      if (v133)
        operator delete(v133);
      goto LABEL_144;
    }
    goto LABEL_179;
  }
  if (v114 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_224;
  v117 = (char *)v203;
  v118 = (char *)operator new(2 * v114);
  v119 = v117 - v116;
  v120 = &v118[(v117 - v116) & 0xFFFFFFFFFFFFFFF8];
  v121 = &v118[8 * v115];
  v122 = v120;
  if (v117 != v116)
  {
    v123 = v117 - v116 - 8;
    if (v123 < 0x58)
    {
      v122 = &v118[(v117 - v116) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_138:
        v130 = *((_QWORD *)v117 - 1);
        v117 -= 8;
        *((_QWORD *)v122 - 1) = v130;
        v122 -= 8;
      }
      while (v117 != v116);
      goto LABEL_139;
    }
    v122 = &v118[(v117 - v116) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v117[-(v119 & 0xFFFFFFFFFFFFFFF8)] - v118) < 0x20)
      goto LABEL_138;
    v124 = v119 >> 3;
    v125 = (v123 >> 3) + 1;
    v126 = &v118[8 * v124 - 16];
    v127 = v117 - 16;
    v128 = v125 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v129 = *(_OWORD *)v127;
      *((_OWORD *)v126 - 1) = *((_OWORD *)v127 - 1);
      *(_OWORD *)v126 = v129;
      v126 -= 32;
      v127 -= 32;
      v128 -= 4;
    }
    while (v128);
    v122 = &v120[-8 * (v125 & 0x3FFFFFFFFFFFFFFCLL)];
    v117 -= 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
    if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_138;
  }
LABEL_139:
  v202[1] = v122;
  *(_QWORD *)&v203 = v120;
  *((_QWORD *)&v203 + 1) = v121;
  if (v116)
    operator delete(v116);
  v116 = v122;
  if (v113 != v112)
    goto LABEL_142;
LABEL_179:
  v150 = 6 * (v109 + ((unint64_t)(v110 - v111) >> 2));
  v151 = v120 - v116;
  if (((v120 - v116) & 0x7FFFFFFF0) != 0)
  {
    v152 = v116 + 8;
    v153 = *(_DWORD *)v116;
    v154 = (v151 >> 3) - 1;
    do
    {
      v153 += *v152 - *(v152 - 1);
      *v152 = v153;
      v152 += 2;
      --v154;
    }
    while (v154);
  }
  v155 = *(_DWORD *)(a1 + 28);
  v156 = v155 + (((unint64_t)v200 - (unint64_t)v199[1]) >> 2) + v150;
  if (v156 <= *(_DWORD *)(a1 + 8))
  {
    v164 = *(char **)a1;
    if ((v151 & 0x7FFFFFFF8) != 0)
    {
      v165 = (v151 >> 3) - 1;
      do
      {
        v166 = v165;
        v167 = *(unsigned int *)&v116[8 * v165];
        if (8 * v155 != 8 * v167)
          memmove(&v164[8 * v150 + 8 * *(unsigned int *)&v116[8 * v165 + 4]], (const void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 36) + 8 * v167), 8 * v155 - 8 * v167);
        --v165;
        v155 = v167;
      }
      while (v166);
    }
    v168 = (unsigned int *)__p[0];
    if ((((char *)__p[1] - (char *)__p[0]) & 0x7FFFFFFF8) != 0)
    {
      v169 = 6 * *(_DWORD *)(a1 + 24);
      v170 = ((unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3) - 1;
      do
      {
        v171 = v170;
        v172 = v168[2 * v170];
        v173 = (const void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 32) + 8 * v172);
        v174 = (uint64_t)v173 + 8 * v169 + -8 * v172;
        if ((const void *)v174 != v173)
          memmove(&v164[8 * v168[2 * v170 + 1]], v173, v174 - (_QWORD)v173);
        --v170;
        v169 = v172;
      }
      while (v171);
    }
    v175 = (_DWORD *)a1;
    *(_DWORD *)(a1 + 16) = v156;
    sub_23945215C(a1, v156);
  }
  else
  {
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * (v155 + (((unint64_t)v200 - (unint64_t)v199[1]) >> 2) + v150) + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v157 = (char *)memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v185 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v185, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if ((((_QWORD)v203 - (unint64_t)v202[1]) & 0x7FFFFFFF8) != 0)
    {
      v158 = *(unsigned int *)(a1 + 28);
      v159 = (((unint64_t)v203 - (unint64_t)v202[1]) >> 3) - 1;
      do
      {
        v160 = v158;
        v161 = v159;
        v158 = *((unsigned int *)v202[1] + 2 * v159);
        v162 = (const void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 36) + 8 * v158);
        v163 = (uint64_t)v162 + 8 * v160 + -8 * v158;
        if ((const void *)v163 != v162)
          memmove(&v157[8 * v150 + 8 * *((unsigned int *)v202[1] + 2 * v159 + 1)], v162, v163 - (_QWORD)v162);
        --v159;
      }
      while (v161);
    }
    if ((((char *)__p[1] - (char *)__p[0]) & 0x7FFFFFFF8) != 0)
    {
      v176 = 6 * *(_DWORD *)(a1 + 24);
      v177 = ((unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3) - 1;
      do
      {
        v178 = v177;
        v179 = *((unsigned int *)__p[0] + 2 * v177);
        v180 = (const void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 32) + 8 * v179);
        v181 = (uint64_t)v180 + 8 * v176 + -8 * v179;
        if ((const void *)v181 != v180)
          memmove(&v157[8 * *((unsigned int *)__p[0] + 2 * v177 + 1)], v180, v181 - (_QWORD)v180);
        --v177;
        v176 = v179;
      }
      while (v178);
    }
    v175 = (_DWORD *)a1;
    v182 = *(char **)a1;
    *(_QWORD *)a1 = v157;
    *(_QWORD *)(a1 + 8) = ((8 * v156 + 31) & 0xFFFFFFFE0uLL) >> 3;
    *(_DWORD *)(a1 + 16) = v156;
    free(v182);
  }
  v183 = v175[7] + (((unint64_t)v200 - (unint64_t)v199[1]) >> 2);
  v175[6] += (unint64_t)((char *)v198[1] - (char *)v198[0]) >> 2;
  v175[7] = v183;
  v175[9] = v150 + v175[8];
  if (v202[1])
  {
    *(void **)&v203 = v202[1];
    operator delete(v202[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_210:
  if (v199[1])
  {
    *(void **)&v200 = v199[1];
    operator delete(v199[1]);
  }
  if (v198[0])
  {
    v198[1] = v198[0];
    operator delete(v198[0]);
  }
}

void sub_239C8F838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_2394FCFA8((uint64_t)va1);
  sub_2394FCFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239C8F888(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  char **v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _QWORD *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  __int128 *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  int v66;
  _QWORD *v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  __int128 v71;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a2;
    v5 = 0;
    v6 = a1 + 40;
    v67 = (_QWORD *)(a1 + 16);
    v62 = 1;
    v59 = HIDWORD(a3);
    v60 = a1 + 40;
    v63 = a3;
    while (1)
    {
      v7 = *(_QWORD *)(a1 + 88);
      v8 = (uint64_t *)(v7 + 24 * v5);
      v9 = *v8;
      v10 = v8[1];
      if (*v8 != v10)
      {
        v11 = *(_QWORD *)(a1 + 48);
        v12 = *(_QWORD *)(a1 + 56);
        v13 = *(_QWORD *)(a1 + 80);
        do
        {
          v14 = ((v12 - v11) << 6) - 1;
          if (v12 == v11)
            v14 = 0;
          v15 = *(_QWORD *)(a1 + 72) + v13;
          if (v14 == v15)
          {
            sub_2396DA1D4(v6);
            v11 = *(_QWORD *)(a1 + 48);
            v12 = *(_QWORD *)(a1 + 56);
            v15 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v11 + ((v15 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v15 & 0x1FF)) = *(_QWORD *)(v9 + 8);
          v13 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v13;
          v9 += 16;
        }
        while (v9 != v10);
        v9 = *v8;
        v7 = *(_QWORD *)(a1 + 88);
      }
      v8[1] = v9;
      v16 = v5 + 1;
      v17 = *(_DWORD *)(a1 + 8);
      v61 = v5 + 1;
      if (v17 < (int)v5 + 1)
        v16 = *(_DWORD *)(a1 + 8);
      v18 = v63;
      if (v16)
        break;
LABEL_3:
      ++v62;
      v6 = v60;
      v5 = v61;
      if (v61 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v19 = 0;
    v20 = (char **)(v7 + 24 * v5);
    v21 = v5 + v59;
    v22 = v62;
    if (v17 < v62)
      v22 = *(_DWORD *)(a1 + 8);
    v68 = v22;
    v66 = v5 + v59;
    while (1)
    {
      v25 = *v3;
      v26 = *((_DWORD *)v3 + 4);
      v27 = *v20;
      v28 = v20[1];
      if (*v20 != v28)
      {
        while (*(_DWORD *)v27 < v19)
        {
          v27 += 16;
          if (v27 == v28)
            goto LABEL_30;
        }
      }
      if (v27 != v28)
      {
        if (*(_DWORD *)v27 == v19)
        {
          v23 = (_QWORD *)(*v67 + 8 * *((_QWORD *)v27 + 1));
          goto LABEL_21;
        }
        v28 = v27;
      }
LABEL_30:
      v29 = *(_QWORD *)(a1 + 80);
      v70 = *((_DWORD *)v3 + 4);
      v69 = *v3;
      if (v29)
      {
        v31 = *(_QWORD *)(a1 + 48);
        v30 = *(_QWORD *)(a1 + 56);
        v32 = ((v30 - v31) << 6) - 1;
        v33 = *(_QWORD *)(a1 + 72);
        if (v30 == v31)
          v32 = 0;
        v23 = (_QWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v31 + (((unint64_t)(v33 + v29 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v33 + v29 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v29 - 1;
        if ((unint64_t)(v32 - (v29 + v33) + 1) >= 0x400)
        {
          operator delete(*(void **)(v30 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        goto LABEL_20;
      }
      *(_QWORD *)&v71 = 0;
      v35 = *(char **)(a1 + 16);
      v34 = *(char **)(a1 + 24);
      v36 = v34 - v35;
      v37 = (v34 - v35) >> 3;
      v38 = &v35[(v34 - v35) & 0xFFFFFFFFFFFFFFF8];
      v39 = *(char **)(a1 + 32);
      if (v39 == v34)
        break;
      if (v34 == v38)
      {
        *(_QWORD *)v34 = 0;
        *(_QWORD *)(a1 + 24) = v34 + 8;
        v3 = a2;
      }
      else
      {
        v40 = v34 - 8;
        if ((unint64_t)v34 < 8)
        {
          v41 = *(_QWORD **)(a1 + 24);
          v3 = a2;
        }
        else
        {
          v41 = *(_QWORD **)(a1 + 24);
          v3 = a2;
          do
          {
            v57 = *(_QWORD *)v40;
            v40 += 8;
            *v41++ = v57;
          }
          while (v40 < v34);
        }
        *(_QWORD *)(a1 + 24) = v41;
        if (v34 != v38 + 8)
        {
          memmove(&v34[-8 * ((v34 - (v38 + 8)) >> 3)], v38, v34 - (v38 + 8));
          v38 = &v35[(v34 - v35) & 0xFFFFFFFFFFFFFFF8];
        }
        v58 = &v71;
        if (v38 <= (char *)&v71)
          v58 = (__int128 *)((char *)&v71 + 8 * (*(_QWORD *)(a1 + 24) > (unint64_t)&v71));
        *(_QWORD *)v38 = *(_QWORD *)v58;
      }
LABEL_19:
      v23 = (_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
      v21 = v66;
LABEL_20:
      v24 = ((uint64_t)v23 - *v67) >> 3;
      LODWORD(v71) = v19;
      *((_QWORD *)&v71 + 1) = v24;
      sub_239C22598(v20, v28, &v71);
      v25 = v69;
      v26 = v70;
LABEL_21:
      *v23 = *(_QWORD *)(v25 + 8 * (v19 + v18 + v26 * v21));
      if (++v19 == v68)
        goto LABEL_3;
    }
    v42 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61)
      sub_2394189F8();
    v43 = v39 - v35;
    if (v43 >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    v64 = v42;
    if (v42)
    {
      if (v42 >> 61)
        sub_239418A80();
      v44 = operator new(8 * v42);
      v38 = &v35[(v34 - v35) & 0xFFFFFFFFFFFFFFF8];
      v37 = (v34 - v35) >> 3;
    }
    else
    {
      v44 = 0;
    }
    v45 = &v44[8 * v37];
    *v45 = 0;
    v46 = (char *)(v45 + 1);
    if (v35 == v34)
    {
      v3 = a2;
    }
    else
    {
      v47 = v36 - 8;
      if ((unint64_t)(v36 - 8) >= 0x68)
      {
        v49 = &v35[v36 & 0xFFFFFFFFFFFFFFF8] - &v44[v36 & 0xFFFFFFFFFFFFFFF8];
        v48 = v38;
        v3 = a2;
        if (v49 >= 0x20)
        {
          v50 = (v47 >> 3) + 1;
          v48 = &v38[-8 * (v50 & 0x3FFFFFFFFFFFFFFCLL)];
          v51 = &v35[8 * v37 - 16];
          v52 = &v44[8 * v37 - 16];
          v53 = v50 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v54 = *(_OWORD *)v51;
            *(v52 - 1) = *((_OWORD *)v51 - 1);
            *v52 = v54;
            v51 -= 32;
            v52 -= 2;
            v53 -= 4;
          }
          while (v53);
          v45 -= v50 & 0x3FFFFFFFFFFFFFFCLL;
          if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_59;
        }
      }
      else
      {
        v48 = v38;
        v3 = a2;
      }
      do
      {
        v55 = *((_QWORD *)v48 - 1);
        v48 -= 8;
        *--v45 = v55;
      }
      while (v48 != v35);
    }
LABEL_59:
    v56 = v34 - v38;
    if (v56)
      memmove(v46, v38, v56);
    *(_QWORD *)(a1 + 16) = v45;
    *(_QWORD *)(a1 + 24) = &v46[v56];
    *(_QWORD *)(a1 + 32) = &v44[8 * v64];
    v18 = v63;
    if (v35)
      operator delete(v35);
    goto LABEL_19;
  }
}

void sub_239C8FE00(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  char **v22;
  unsigned int v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _OWORD *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  _OWORD *v82;
  size_t v83;
  __int128 *v84;
  _BYTE *v85;
  uint64_t v86;
  _OWORD *v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t *v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  const double *v103;
  uint64_t v104;
  float64x2_t v105;
  float64x2_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int v111;
  unint64_t v112;
  _QWORD *v113;
  int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  __int128 v119;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v8 = (_QWORD *)(a1 + 16);
    v108 = HIDWORD(a3);
    v111 = 1;
    v9 = 0uLL;
    v115 = a3;
    v113 = (_QWORD *)(a1 + 16);
    v109 = a1 + 40;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 88);
      v11 = (uint64_t *)(v10 + 24 * v6);
      v12 = *v11;
      v13 = v11[1];
      if (*v11 != v13)
      {
        v14 = *(_QWORD *)(a1 + 48);
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(_QWORD *)(a1 + 80);
        do
        {
          v17 = ((v15 - v14) << 6) - 1;
          if (v15 == v14)
            v17 = 0;
          v18 = *(_QWORD *)(a1 + 72) + v16;
          if (v17 == v18)
          {
            sub_2396DA1D4(v7);
            v9 = 0uLL;
            v14 = *(_QWORD *)(a1 + 48);
            v15 = *(_QWORD *)(a1 + 56);
            v18 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v14 + ((v18 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v18 & 0x1FF)) = *(_QWORD *)(v12 + 8);
          v16 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v16;
          v12 += 16;
        }
        while (v12 != v13);
        v12 = *v11;
        v10 = *(_QWORD *)(a1 + 88);
      }
      v11[1] = v12;
      v19 = v6 + 1;
      v20 = *(_DWORD *)(a1 + 8);
      v110 = v6 + 1;
      if (v20 < (int)v6 + 1)
        v19 = *(_DWORD *)(a1 + 8);
      if (v19)
        break;
LABEL_3:
      ++v111;
      v7 = v109;
      v6 = v110;
      if (v110 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v21 = 0;
    v22 = (char **)(v10 + 24 * v6);
    v23 = v111;
    if (v20 < v111)
      v23 = *(_DWORD *)(a1 + 8);
    v116 = v23;
    v117 = v108 + 6 * v6;
    while (1)
    {
      v26 = *v4;
      v51 = *((unsigned int *)v4 + 4);
      v52 = *v22;
      v53 = v22[1];
      if (*v22 != v53)
      {
        while (*(_DWORD *)v52 < v21)
        {
          v52 += 16;
          if (v52 == v53)
            goto LABEL_29;
        }
      }
      if (v52 != v53)
      {
        if (*(_DWORD *)v52 == v21)
        {
          v24 = (_OWORD *)(*v8 + 8 * *((_QWORD *)v52 + 1));
          goto LABEL_20;
        }
        v53 = v52;
      }
LABEL_29:
      v54 = *(_QWORD *)(a1 + 80);
      v118 = *v4;
      if (v54)
      {
        v56 = *(_QWORD *)(a1 + 48);
        v55 = *(_QWORD *)(a1 + 56);
        v57 = ((v55 - v56) << 6) - 1;
        v58 = *(_QWORD *)(a1 + 72);
        if (v55 == v56)
          v57 = 0;
        v24 = (_OWORD *)(*(_QWORD *)(a1 + 16)
                       + 8
                       * *(_QWORD *)(*(_QWORD *)(v56 + (((unint64_t)(v58 + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v58 + v54 - 1) & 0x1FF)));
        *(_QWORD *)(a1 + 80) = v54 - 1;
        if ((unint64_t)(v57 - (v54 + v58) + 1) >= 0x400)
        {
          operator delete(*(void **)(v55 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        goto LABEL_19;
      }
      *(_QWORD *)&v119 = 0;
      v60 = *(_QWORD *)(a1 + 16);
      v59 = *(_QWORD *)(a1 + 24);
      v61 = v59 - v60;
      v62 = (uint64_t)(v59 - v60) >> 3;
      v63 = (__int128 *)(v60 + ((v59 - v60) & 0xFFFFFFFFFFFFFFF8));
      v64 = *(_QWORD *)(a1 + 32);
      if (v64 - v59 < 0x120)
      {
        v65 = v62 + 36;
        if ((unint64_t)(v62 + 36) >> 61)
          sub_2394189F8();
        v66 = v64 - v60;
        if (v66 >> 2 > v65)
          v65 = v66 >> 2;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        v112 = v65;
        if (v65)
        {
          if (v65 >> 61)
            sub_239418A80();
          v67 = operator new(8 * v65);
          v9 = 0uLL;
          v62 = (uint64_t)(v59 - v60) >> 3;
        }
        else
        {
          v67 = 0;
        }
        v73 = &v67[8 * v62];
        v73[16] = v9;
        v73[17] = v9;
        v73[14] = v9;
        v73[15] = v9;
        v73[12] = v9;
        v73[13] = v9;
        v73[10] = v9;
        v73[11] = v9;
        v73[8] = v9;
        v73[9] = v9;
        v73[6] = v9;
        v73[7] = v9;
        v73[4] = v9;
        v73[5] = v9;
        v73[2] = v9;
        v73[3] = v9;
        *v73 = v9;
        v73[1] = v9;
        if (v60 == v59)
        {
          v75 = &v67[8 * v62];
        }
        else
        {
          if (v61 - 8 < 0x68)
          {
            v74 = (char *)(v60 + ((v59 - v60) & 0xFFFFFFFFFFFFFFF8));
            v75 = &v67[8 * v62];
            goto LABEL_56;
          }
          v74 = (char *)(v60 + ((v59 - v60) & 0xFFFFFFFFFFFFFFF8));
          v75 = &v67[8 * v62];
          if (v60 + (v61 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v67[v61 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_99;
          v76 = ((v61 - 8) >> 3) + 1;
          v74 = (char *)v63 - 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
          v77 = (__int128 *)(v60 + 8 * v62 - 16);
          v78 = &v67[8 * v62 - 16];
          v79 = v76 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v80 = *v77;
            *(v78 - 1) = *(v77 - 1);
            *v78 = v80;
            v77 -= 2;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          v75 = (char *)v73 - 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
          if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_99:
            do
            {
LABEL_56:
              v81 = *((_QWORD *)v74 - 1);
              v74 -= 8;
              *((_QWORD *)v75 - 1) = v81;
              v75 -= 8;
            }
            while (v74 != (char *)v60);
          }
        }
        v82 = v73 + 18;
        v83 = v59 - (_QWORD)v63;
        if (v83)
        {
          v84 = v63;
          v85 = v67;
          memmove(v73 + 18, v84, v83);
          v67 = v85;
        }
        *(_QWORD *)(a1 + 16) = v75;
        *(_QWORD *)(a1 + 24) = (char *)v82 + v83;
        *(_QWORD *)(a1 + 32) = &v67[8 * v112];
        if (v60)
          operator delete((void *)v60);
        goto LABEL_18;
      }
      v68 = v59 - (_QWORD)v63;
      if (v59 - (unint64_t)v63 > 0x11F)
      {
        v70 = *(_QWORD *)(a1 + 24);
        v69 = 36;
        goto LABEL_70;
      }
      v69 = v68 >> 3;
      v70 = v59 + 8 * (36 - (v68 >> 3));
      v71 = 280 - (v68 & 0xFFFFFFFFFFFFFFF8);
      if (v71 < 0x68)
      {
        v72 = *(_QWORD **)(a1 + 24);
        goto LABEL_68;
      }
      if (v59 < (unint64_t)&v119 + 8 && (unint64_t)&v119 < v59 + v71 + 8)
        break;
      v86 = (v71 >> 3) + 1;
      v87 = *(_OWORD **)(a1 + 24);
      v88 = v86 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        *v87 = v9;
        v87[1] = v9;
        v87 += 2;
        v88 -= 4;
      }
      while (v88);
      if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v72 = (_QWORD *)(v59 + 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL));
        do
LABEL_68:
          *v72++ = v119;
        while (v72 != (_QWORD *)v70);
      }
      *(_QWORD *)(a1 + 24) = v70;
      if ((__int128 *)v59 == v63)
        goto LABEL_18;
LABEL_70:
      v89 = v70 - (_QWORD)(v63 + 18);
      v90 = v89 >> 3;
      v91 = (uint64_t *)(v70 - 288);
      v92 = (_QWORD *)v70;
      if (v70 - 288 < v59)
      {
        v93 = (v61 & 0xFFFFFFFFFFFFFFF8) + v89;
        v94 = v60 + v93 + 8;
        if (v59 > v94)
          v94 = v59;
        v95 = v94 + ~v60 - v93;
        if (v95 > 0x57)
        {
          v96 = (v95 >> 3) + 1;
          v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
          v91 = (uint64_t *)((char *)v91 + v97);
          v98 = (_OWORD *)(v70 + 16);
          v99 = (__int128 *)(v60 + 8 * v90 + 8 * v62 + 16);
          v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v101 = *v99;
            *(v98 - 1) = *(v99 - 1);
            *v98 = v101;
            v98 += 2;
            v99 += 2;
            v100 -= 4;
          }
          while (v100);
          v92 = (_QWORD *)(v70 + v97);
          if (v96 == (v96 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_79;
        }
        else
        {
          v92 = (_QWORD *)v70;
        }
        do
        {
          v102 = *v91++;
          *v92++ = v102;
        }
        while ((unint64_t)v91 < v59);
      }
LABEL_79:
      *(_QWORD *)(a1 + 24) = v92;
      if ((__int128 *)v70 != v63 + 18)
      {
        memmove((void *)(v70 - 8 * v90), (const void *)(v60 + ((v59 - v60) & 0xFFFFFFFFFFFFFFF8)), v89);
        v62 = (uint64_t)(v59 - v60) >> 3;
      }
      v103 = (const double *)&v119;
      if (v63 <= &v119)
      {
        v104 = 288;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v119)
          v104 = 0;
        v103 = (const double *)((char *)&v119 + v104);
      }
      if (v69 >= 0xA
        && (v63 >= (__int128 *)(v103 + 1) || (unint64_t)v103 >= v60 + (v61 & 0xFFFFFFFFFFFFFFF8) + 8 * v69))
      {
        v63 = (__int128 *)((char *)v63 + 8 * (v69 & 0xFFFFFFFFFFFFFFFCLL));
        v105 = vld1q_dup_f64(v103);
        v106 = (float64x2_t *)(v60 + 8 * v62 + 16);
        v107 = v69 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v106[-1] = v105;
          *v106 = v105;
          v106 += 2;
          v107 -= 4;
        }
        while (v107);
        if (v69 == (v69 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_18;
        v69 &= 3u;
      }
      do
      {
        *(double *)v63 = *v103;
        v63 = (__int128 *)((char *)v63 + 8);
        --v69;
      }
      while (v69);
LABEL_18:
      v24 = (_OWORD *)(*(_QWORD *)(a1 + 24) - 288);
      v4 = a2;
      v3 = v115;
      v8 = v113;
LABEL_19:
      v25 = ((uint64_t)v24 - *v8) >> 3;
      LODWORD(v119) = v21;
      *((_QWORD *)&v119 + 1) = v25;
      sub_239C22598(v22, v53, &v119);
      v9 = 0uLL;
      v26 = v118;
LABEL_20:
      v27 = (__int128 *)(v26 + 8 * (v3 + 6 * v21 + (_DWORD)v51 * v117));
      v29 = v27[1];
      v28 = v27[2];
      v30 = *v27;
      v31 = (__int128 *)((char *)v27 + 8 * v51);
      v33 = v31[1];
      v32 = v31[2];
      v34 = *v31;
      v35 = &v27[v51];
      v37 = v35[1];
      v36 = v35[2];
      v38 = *v35;
      v39 = (__int128 *)((char *)v27 + 24 * v51);
      v41 = v39[1];
      v40 = v39[2];
      v42 = *v39;
      v43 = &v27[2 * v51];
      v45 = v43[1];
      v44 = v43[2];
      v46 = *v43;
      v47 = (__int128 *)((char *)v27 + 40 * v51);
      v49 = v47[1];
      v48 = v47[2];
      v50 = *v47;
      *v24 = v30;
      v24[1] = v29;
      v24[2] = v28;
      v24[3] = v34;
      v24[4] = v33;
      v24[5] = v32;
      v24[6] = v38;
      v24[7] = v37;
      v24[8] = v36;
      v24[9] = v42;
      v24[10] = v41;
      v24[11] = v40;
      v24[12] = v46;
      v24[13] = v45;
      v24[14] = v44;
      v24[15] = v50;
      v24[16] = v49;
      v24[17] = v48;
      if (++v21 == v116)
        goto LABEL_3;
    }
    v72 = *(_QWORD **)(a1 + 24);
    goto LABEL_68;
  }
}

void sub_239C90518(_QWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  unsigned int v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  unint64_t v88;
  int v89;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  unint64_t v96;
  void **v97;

  v5 = a1[1];
  if (*a1 == v5)
    goto LABEL_42;
  v8 = v5 - *a1;
  v9 = v8 >> 2;
  v10 = *(unint64_t **)a4;
  if (v8 >> 2 > (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)a4) >> 3))
  {
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFDLL)
      goto LABEL_87;
    v11 = *(unint64_t **)(a4 + 8);
    v12 = (char *)operator new(2 * v8);
    v13 = (char *)v11 - (char *)v10;
    v14 = &v12[((char *)v11 - (char *)v10) & 0xFFFFFFFFFFFFFFF8];
    v15 = v14;
    if (v11 == v10)
      goto LABEL_12;
    if ((unint64_t)(v13 - 8) >= 0x58)
    {
      v15 = &v12[((char *)v11 - (char *)v10) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)((char *)v11 - &v12[v13 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v16 = v13 >> 3;
        v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
        v18 = &v12[8 * v16 - 16];
        v19 = (__int128 *)(v11 - 2);
        v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *v19;
          *((_OWORD *)v18 - 1) = *(v19 - 1);
          *(_OWORD *)v18 = v21;
          v18 -= 32;
          v19 -= 2;
          v20 -= 4;
        }
        while (v20);
        v15 = &v14[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
        v11 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
        if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_12:
          *(_QWORD *)a4 = v15;
          *(_QWORD *)(a4 + 8) = v14;
          *(_QWORD *)(a4 + 16) = &v12[8 * v9];
          if (v10)
            operator delete(v10);
          goto LABEL_14;
        }
      }
    }
    else
    {
      v15 = &v12[((char *)v11 - (char *)v10) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v22 = *--v11;
      *((_QWORD *)v15 - 1) = v22;
      v15 -= 8;
    }
    while (v11 != v10);
    goto LABEL_12;
  }
LABEL_14:
  v24 = *(_DWORD **)a2;
  v23 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v23)
  {
    v25 = 0;
    v26 = 0;
    v29 = a1;
    v28 = (_DWORD *)*a1;
    v27 = (_DWORD *)v29[1];
    v92 = v27;
    v94 = v23;
    while (1)
    {
      if (*v24 == *v28)
      {
        v32 = *(unint64_t **)(a4 + 8);
        v31 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v32 < v31)
        {
          *v32 = v25 | (unint64_t)(v26 << 32);
          v30 = v32 + 1;
        }
        else
        {
          v33 = *(unint64_t **)a4;
          v34 = (uint64_t)v32 - *(_QWORD *)a4;
          v35 = v34 >> 3;
          v36 = (v34 >> 3) + 1;
          if (v36 >> 61)
            goto LABEL_87;
          v37 = v31 - (_QWORD)v33;
          if (v37 >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          v96 = v36;
          if (v36)
          {
            if (v36 >> 61)
LABEL_88:
              sub_239418A80();
            v38 = operator new(8 * v36);
          }
          else
          {
            v38 = 0;
          }
          v39 = (unint64_t *)&v38[8 * v35];
          *v39 = v25 | (unint64_t)(v26 << 32);
          v30 = v39 + 1;
          if (v32 == v33)
          {
            v33 = v32;
          }
          else
          {
            v40 = (char *)(v32 - 1) - (char *)v33;
            if (v40 < 0x58)
              goto LABEL_91;
            if ((unint64_t)((char *)v32 - &v38[v34]) < 0x20)
              goto LABEL_91;
            v41 = (v40 >> 3) + 1;
            v42 = &v38[8 * v35 - 16];
            v43 = (__int128 *)(v32 - 2);
            v44 = v41 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v45 = *v43;
              *(v42 - 1) = *(v43 - 1);
              *v42 = v45;
              v42 -= 2;
              v43 -= 2;
              v44 -= 4;
            }
            while (v44);
            v39 -= v41 & 0x3FFFFFFFFFFFFFFCLL;
            v32 -= v41 & 0x3FFFFFFFFFFFFFFCLL;
            if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v46 = *--v32;
                *--v39 = v46;
              }
              while (v32 != v33);
              v33 = *(unint64_t **)a4;
            }
          }
          *(_QWORD *)a4 = v39;
          *(_QWORD *)(a4 + 8) = v30;
          *(_QWORD *)(a4 + 16) = &v38[8 * v96];
          if (v33)
            operator delete(v33);
          v27 = v92;
          v23 = v94;
        }
        *(_QWORD *)(a4 + 8) = v30;
        v26 = (*a3 + v26);
        if (++v28 == v27)
          goto LABEL_43;
      }
      ++v24;
      ++v25;
      if (v24 == v23)
        goto LABEL_43;
    }
  }
LABEL_42:
  v26 = 0;
LABEL_43:
  v47 = a1[3];
  v48 = a1[4];
  if (v47 != v48)
  {
    v49 = *(_BYTE **)(a4 + 24);
    v50 = v48 - v47;
    v51 = v50 >> 2;
    v97 = (void **)(a4 + 24);
    if (v50 >> 2 <= (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 40) - (_QWORD)v49) >> 3))
      goto LABEL_56;
    if ((unint64_t)v50 <= 0x7FFFFFFFFFFFFFFCLL)
    {
      v52 = *(_BYTE **)(a4 + 32);
      v53 = (char *)operator new(2 * v50);
      v54 = v52 - v49;
      v55 = &v53[(v52 - v49) & 0xFFFFFFFFFFFFFFF8];
      v56 = v55;
      if (v52 == v49)
        goto LABEL_54;
      if ((unint64_t)(v54 - 8) >= 0x58)
      {
        v56 = &v53[(v52 - v49) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v52 - &v53[v54 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
        {
          v57 = v54 >> 3;
          v58 = ((unint64_t)(v54 - 8) >> 3) + 1;
          v59 = &v53[8 * v57 - 16];
          v60 = (__int128 *)(v52 - 16);
          v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v62 = *v60;
            *((_OWORD *)v59 - 1) = *(v60 - 1);
            *(_OWORD *)v59 = v62;
            v59 -= 32;
            v60 -= 2;
            v61 -= 4;
          }
          while (v61);
          v56 = &v55[-8 * (v58 & 0x3FFFFFFFFFFFFFFCLL)];
          v52 -= 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_54:
            *(_QWORD *)(a4 + 24) = v56;
            *(_QWORD *)(a4 + 32) = v55;
            *(_QWORD *)(a4 + 40) = &v53[8 * v51];
            if (v49)
              operator delete(v49);
LABEL_56:
            v65 = *(_DWORD **)(a2 + 24);
            v64 = *(_DWORD **)(a2 + 32);
            if (v65 != v64)
            {
              v66 = 0;
              v68 = (_DWORD *)a1[3];
              v67 = (_DWORD *)a1[4];
              v69 = v26;
              v93 = v67;
              v95 = *(_DWORD **)(a2 + 32);
              while (1)
              {
                if (*v65 == *v68)
                {
                  v72 = *(char **)(a4 + 32);
                  v71 = *(_QWORD *)(a4 + 40);
                  if ((unint64_t)v72 < v71)
                  {
                    *(_QWORD *)v72 = v66 | (unint64_t)(v69 << 32);
                    v70 = v72 + 8;
                  }
                  else
                  {
                    v73 = (char *)*v97;
                    v74 = v72 - (_BYTE *)*v97;
                    v75 = v74 >> 3;
                    v76 = (v74 >> 3) + 1;
                    if (v76 >> 61)
                      goto LABEL_87;
                    v77 = v71 - (_QWORD)v73;
                    if (v77 >> 2 > v76)
                      v76 = v77 >> 2;
                    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
                      v78 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v78 = v76;
                    if (v78)
                    {
                      if (v78 >> 61)
                        goto LABEL_88;
                      v79 = v69;
                      v80 = operator new(8 * v78);
                      v69 = v79;
                    }
                    else
                    {
                      v80 = 0;
                    }
                    v81 = (unint64_t *)&v80[8 * v75];
                    *v81 = v66 | (unint64_t)(v69 << 32);
                    v70 = v81 + 1;
                    if (v72 == v73)
                    {
                      v73 = v72;
                    }
                    else
                    {
                      v82 = v72 - 8 - v73;
                      if (v82 < 0x58)
                        goto LABEL_92;
                      if ((unint64_t)(v72 - &v80[v74]) < 0x20)
                        goto LABEL_92;
                      v83 = (v82 >> 3) + 1;
                      v84 = &v80[8 * v75 - 16];
                      v85 = v72 - 16;
                      v86 = v83 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v87 = *(_OWORD *)v85;
                        *(v84 - 1) = *((_OWORD *)v85 - 1);
                        *v84 = v87;
                        v84 -= 2;
                        v85 -= 32;
                        v86 -= 4;
                      }
                      while (v86);
                      v81 -= v83 & 0x3FFFFFFFFFFFFFFCLL;
                      v72 -= 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_92:
                        do
                        {
                          v88 = *((_QWORD *)v72 - 1);
                          v72 -= 8;
                          *--v81 = v88;
                        }
                        while (v72 != v73);
                        v73 = (char *)*v97;
                      }
                    }
                    *(_QWORD *)(a4 + 24) = v81;
                    *(_QWORD *)(a4 + 32) = v70;
                    *(_QWORD *)(a4 + 40) = &v80[8 * v78];
                    if (v73)
                    {
                      v89 = v69;
                      operator delete(v73);
                      LODWORD(v69) = v89;
                    }
                    v67 = v93;
                    v64 = v95;
                  }
                  *(_QWORD *)(a4 + 32) = v70;
                  if (++v68 == v67)
                    return;
                  v69 = (a3[1] + v69);
                }
                ++v65;
                ++v66;
                if (v65 == v64)
                  return;
              }
            }
            return;
          }
        }
      }
      else
      {
        v56 = &v53[(v52 - v49) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v63 = *((_QWORD *)v52 - 1);
        v52 -= 8;
        *((_QWORD *)v56 - 1) = v63;
        v56 -= 8;
      }
      while (v52 != v49);
      goto LABEL_54;
    }
LABEL_87:
    sub_2394189F8();
  }
}

uint64_t *sub_239C90AE4(uint64_t *result, uint64_t a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int8x16_t *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint64_t v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  int8x16_t *v49;
  int8x16_t *v50;
  int8x16_t *v51;
  unsigned int *v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  __int128 *v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;

  if (a3[3] != a3[4])
  {
    v4 = a4[3];
    v5 = a4[4];
    if (v4 != v5)
    {
      v6 = result[3];
      do
      {
        v7 = a3[3];
        v8 = a3[4];
        if (v7 != v8)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v6 + 88) + 24 * *v4);
          v9 = *(_QWORD *)(*(_QWORD *)(v6 + 88) + 24 * *v4 + 8);
          do
          {
            if (v10 == v9)
              break;
            v11 = *v7;
            while (*(_DWORD *)v10 < v11)
            {
              v10 += 16;
              if (v10 == v9)
                goto LABEL_4;
            }
            if (*(_DWORD *)v10 == v11)
              *(_QWORD *)(*(_QWORD *)a2 + 8 * (v7[1] + *(_DWORD *)(a2 + 16) * v4[1])) = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * *(_QWORD *)(v10 + 8));
            if (v10 == v9)
              break;
            v7 += 2;
          }
          while (v7 != v8);
        }
LABEL_4:
        v4 += 2;
      }
      while (v4 != v5);
    }
  }
  v12 = *a3;
  v13 = a3[1];
  if (*a3 != v13)
  {
    v14 = *a4;
    v15 = a4[1];
    if (*a4 != v15)
    {
      v16 = *result;
      do
      {
        v17 = *a3;
        v18 = a3[1];
        if (*a3 != v18)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 24 * *v14);
          v19 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 24 * *v14 + 8);
          do
          {
            if (v20 == v19)
              break;
            v21 = *v17;
            while (*(_DWORD *)v20 < v21)
            {
              v20 += 16;
              if (v20 == v19)
                goto LABEL_20;
            }
            if (*(_DWORD *)v20 == v21)
            {
              v22 = (int8x16_t *)(*(_QWORD *)(v16 + 16) + 8 * *(_QWORD *)(v20 + 8));
              if (v22 == *(int8x16_t **)a2)
              {
                v32 = v22[16];
                v31 = v22[17];
                v30 = v22[14];
                v29 = v22[15];
                v28 = v22[12];
                v27 = v22[13];
                v26 = v22[10];
                v25 = v22[11];
                v38 = v22[8];
                v37 = v22[9];
                v66 = vextq_s8(v32, v32, 8uLL).u64[0];
                v67 = vextq_s8(v31, v31, 8uLL).u64[0];
                v33 = vextq_s8(v30, v30, 8uLL).u64[0];
                v34 = vextq_s8(v27, v27, 8uLL).u64[0];
                v35 = vextq_s8(v28, v28, 8uLL).u64[0];
                v64 = vextq_s8(v25, v25, 8uLL).u64[0];
                v65 = vextq_s8(v29, v29, 8uLL).u64[0];
                v36 = vextq_s8(v26, v26, 8uLL).u64[0];
                v24 = v22[6];
                v23 = v22[7];
              }
              else
              {
                v24 = v22[6];
                v23 = v22[7];
                v26 = v22[10];
                v25 = v22[11];
                v28 = v22[12];
                v27 = v22[13];
                v30 = v22[14];
                v29 = v22[15];
                v32 = v22[16];
                v31 = v22[17];
                v66 = vextq_s8(v32, v32, 8uLL).u64[0];
                v67 = vextq_s8(v31, v31, 8uLL).u64[0];
                v33 = vextq_s8(v30, v30, 8uLL).u64[0];
                v34 = vextq_s8(v27, v27, 8uLL).u64[0];
                v35 = vextq_s8(v28, v28, 8uLL).u64[0];
                v64 = vextq_s8(v25, v25, 8uLL).u64[0];
                v65 = vextq_s8(v29, v29, 8uLL).u64[0];
                v36 = vextq_s8(v26, v26, 8uLL).u64[0];
                v38 = v22[8];
                v37 = v22[9];
              }
              v40 = v22[4];
              v39 = v22[5];
              v42 = v22[2];
              v41 = v22[3];
              v44 = *v22;
              v43 = v22[1];
              v30.i64[1] = v33;
              v27.i64[1] = v34;
              v28.i64[1] = v35;
              v42.i64[1] = vextq_s8(v42, v42, 8uLL).u64[0];
              v45 = *(unsigned int *)(a2 + 16);
              v43.i64[1] = vextq_s8(v43, v43, 8uLL).u64[0];
              v44.i64[1] = vextq_s8(v44, v44, 8uLL).u64[0];
              v39.i64[1] = vextq_s8(v39, v39, 8uLL).u64[0];
              v40.i64[1] = vextq_s8(v40, v40, 8uLL).u64[0];
              v41.i64[1] = vextq_s8(v41, v41, 8uLL).u64[0];
              v38.i64[1] = vextq_s8(v38, v38, 8uLL).u64[0];
              v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
              v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
              v25.i64[1] = v64;
              v26.i64[1] = v36;
              v37.i64[1] = vextq_s8(v37, v37, 8uLL).u64[0];
              v31.i64[1] = v67;
              v32.i64[1] = v66;
              v29.i64[1] = v65;
              v46 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v17[1] + (_DWORD)v45 * v14[1]));
              *v46 = v44;
              v46[1] = v43;
              v46[2] = v42;
              v47 = (int8x16_t *)((char *)v46 + 8 * v45);
              *v47 = v41;
              v47[1] = v40;
              v47[2] = v39;
              v48 = &v46[v45];
              *v48 = v24;
              v48[1] = v23;
              v48[2] = v38;
              v49 = (int8x16_t *)((char *)v46 + 24 * v45);
              *v49 = v37;
              v49[1] = v26;
              v49[2] = v25;
              v50 = &v46[2 * v45];
              *v50 = v28;
              v50[1] = v27;
              v50[2] = v30;
              v51 = (int8x16_t *)((char *)v46 + 40 * v45);
              *v51 = v29;
              v51[1] = v32;
              v51[2] = v31;
            }
            if (v20 == v19)
              break;
            v17 += 2;
          }
          while (v17 != v18);
        }
LABEL_20:
        v14 += 2;
      }
      while (v14 != v15);
      v12 = *a3;
      v13 = a3[1];
    }
    if (v12 != v13)
    {
      v52 = a4[3];
      v53 = a4[4];
      if (v52 != v53)
      {
        v54 = result[1];
        do
        {
          v55 = *a3;
          v56 = a3[1];
          if (*a3 != v56)
          {
            v58 = *(_QWORD *)(*(_QWORD *)(v54 + 88) + 24 * *v52);
            v57 = *(_QWORD *)(*(_QWORD *)(v54 + 88) + 24 * *v52 + 8);
            do
            {
              if (v58 == v57)
                break;
              v59 = *v55;
              while (*(_DWORD *)v58 < v59)
              {
                v58 += 16;
                if (v58 == v57)
                  goto LABEL_40;
              }
              if (*(_DWORD *)v58 == v59)
              {
                v60 = (__int128 *)(*(_QWORD *)(v54 + 16) + 8 * *(_QWORD *)(v58 + 8));
                result = *(uint64_t **)a2;
                v61 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v55[1] + *(_DWORD *)(a2 + 16) * v52[1]));
                v62 = v60[2];
                v63 = *v60;
                v61[1] = v60[1];
                v61[2] = v62;
                *v61 = v63;
              }
              if (v58 == v57)
                break;
              v55 += 2;
            }
            while (v55 != v56);
          }
LABEL_40:
          v52 += 2;
        }
        while (v52 != v53);
      }
    }
  }
  return result;
}

void sub_239C90E9C(_QWORD *a1, uint64_t a2, unsigned int **a3, unsigned int **a4)
{
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int8x16_t v27;
  unint64_t v28;
  int8x16_t v29;
  unint64_t v30;
  int8x16_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int8x16_t *v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  uint64_t v76;
  int8x16_t *v77;
  int8x16_t *v78;
  int8x16_t *v79;
  int8x16_t *v80;
  int8x16_t *v81;
  int8x16_t *v82;
  unsigned int *v83;
  unsigned int *v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  __int128 *v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1);
  v9 = (unint64_t)((char *)a3[1] - (char *)*a3) >> 3;
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[2] + 48))(a1[2]);
  v11 = (unint64_t)((char *)a3[4] - (char *)a3[3]) >> 3;
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 56))(*a1)
      * ((unint64_t)((char *)a4[1] - (char *)*a4) >> 3);
  v13 = v12
      + (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 56))(a1[1])
      * ((unint64_t)((char *)a4[4] - (char *)a4[3]) >> 3);
  v14 = v8 * v9 + v10 * v11;
  *(_DWORD *)(a2 + 16) = v14;
  *(_DWORD *)(a2 + 20) = v13;
  sub_23945215C(a2, v13 * (unint64_t)v14);
  v15 = *(_DWORD *)(a2 + 20);
  if (v15 * *(_DWORD *)(a2 + 16))
    bzero(*(void **)a2, 8 * (v15 * *(_DWORD *)(a2 + 16)));
  v16 = a3[3];
  v17 = a3[4];
  if (v16 != v17)
  {
    v18 = *a4;
    v19 = a4[1];
    if (*a4 != v19)
    {
      v20 = a1[2];
      do
      {
        v21 = a3[3];
        v22 = a3[4];
        if (v21 != v22)
        {
          v24 = *(_QWORD *)(*(_QWORD *)(v20 + 88) + 24 * *v18);
          v23 = *(_QWORD *)(*(_QWORD *)(v20 + 88) + 24 * *v18 + 8);
          do
          {
            if (v24 == v23)
              break;
            v25 = *v21;
            while (*(_DWORD *)v24 < v25)
            {
              v24 += 16;
              if (v24 == v23)
                goto LABEL_6;
            }
            if (*(_DWORD *)v24 == v25)
            {
              v26 = *(_QWORD *)(v20 + 16) + 8 * *(_QWORD *)(v24 + 8);
              if (v26 == *(_QWORD *)a2)
              {
                v29 = *(int8x16_t *)(v26 + 16);
                v31 = *(int8x16_t *)(v26 + 32);
                v27 = *(int8x16_t *)v26;
                v32 = vextq_s8(v31, v31, 8uLL).u64[0];
                v30 = vextq_s8(v29, v29, 8uLL).u64[0];
                v28 = vextq_s8(v27, v27, 8uLL).u64[0];
              }
              else
              {
                v27.i64[0] = *(_QWORD *)v26;
                v28 = *(_QWORD *)(v26 + 8);
                v29.i64[0] = *(_QWORD *)(v26 + 16);
                v30 = *(_QWORD *)(v26 + 24);
                v31.i64[0] = *(_QWORD *)(v26 + 32);
                v32 = *(_QWORD *)(v26 + 40);
              }
              v33 = *(unsigned int *)(a2 + 16);
              v34 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v21[1] + (_DWORD)v33 * v18[1]));
              *v34 = v27.i64[0];
              v34[v33] = v28;
              v34[2 * v33] = v29.i64[0];
              v34[3 * v33] = v30;
              v34[4 * v33] = v31.i64[0];
              v34[5 * v33] = v32;
            }
            if (v24 == v23)
              break;
            v21 += 2;
          }
          while (v21 != v22);
        }
LABEL_6:
        v18 += 2;
      }
      while (v18 != v19);
      v16 = a3[3];
      v17 = a3[4];
    }
    if (v16 != v17)
    {
      v35 = a4[3];
      v36 = a4[4];
      if (v35 != v36)
      {
        v37 = a1[3];
        do
        {
          v38 = a3[3];
          v39 = a3[4];
          if (v38 != v39)
          {
            v41 = *(_QWORD *)(*(_QWORD *)(v37 + 88) + 24 * *v35);
            v40 = *(_QWORD *)(*(_QWORD *)(v37 + 88) + 24 * *v35 + 8);
            do
            {
              if (v41 == v40)
                break;
              v42 = *v38;
              while (*(_DWORD *)v41 < v42)
              {
                v41 += 16;
                if (v41 == v40)
                  goto LABEL_26;
              }
              if (*(_DWORD *)v41 == v42)
                *(_QWORD *)(*(_QWORD *)a2 + 8 * (v38[1] + *(_DWORD *)(a2 + 16) * v35[1])) = *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8 * *(_QWORD *)(v41 + 8));
              if (v41 == v40)
                break;
              v38 += 2;
            }
            while (v38 != v39);
          }
LABEL_26:
          v35 += 2;
        }
        while (v35 != v36);
      }
    }
  }
  v43 = *a3;
  v44 = a3[1];
  if (*a3 != v44)
  {
    v45 = *a4;
    v46 = a4[1];
    if (*a4 != v46)
    {
      v47 = *a1;
      do
      {
        v48 = *a3;
        v49 = a3[1];
        if (*a3 != v49)
        {
          v51 = *(_QWORD *)(*(_QWORD *)(v47 + 88) + 24 * *v45);
          v50 = *(_QWORD *)(*(_QWORD *)(v47 + 88) + 24 * *v45 + 8);
          do
          {
            if (v51 == v50)
              break;
            v52 = *v48;
            while (*(_DWORD *)v51 < v52)
            {
              v51 += 16;
              if (v51 == v50)
                goto LABEL_42;
            }
            if (*(_DWORD *)v51 == v52)
            {
              v53 = (int8x16_t *)(*(_QWORD *)(v47 + 16) + 8 * *(_QWORD *)(v51 + 8));
              if (v53 == *(int8x16_t **)a2)
              {
                v63 = v53[16];
                v62 = v53[17];
                v61 = v53[14];
                v60 = v53[15];
                v59 = v53[12];
                v58 = v53[13];
                v57 = v53[10];
                v56 = v53[11];
                v69 = v53[8];
                v68 = v53[9];
                v97 = vextq_s8(v63, v63, 8uLL).u64[0];
                v98 = vextq_s8(v62, v62, 8uLL).u64[0];
                v64 = vextq_s8(v61, v61, 8uLL).u64[0];
                v65 = vextq_s8(v58, v58, 8uLL).u64[0];
                v66 = vextq_s8(v59, v59, 8uLL).u64[0];
                v95 = vextq_s8(v56, v56, 8uLL).u64[0];
                v96 = vextq_s8(v60, v60, 8uLL).u64[0];
                v67 = vextq_s8(v57, v57, 8uLL).u64[0];
                v55 = v53[6];
                v54 = v53[7];
              }
              else
              {
                v55 = v53[6];
                v54 = v53[7];
                v57 = v53[10];
                v56 = v53[11];
                v59 = v53[12];
                v58 = v53[13];
                v61 = v53[14];
                v60 = v53[15];
                v63 = v53[16];
                v62 = v53[17];
                v97 = vextq_s8(v63, v63, 8uLL).u64[0];
                v98 = vextq_s8(v62, v62, 8uLL).u64[0];
                v64 = vextq_s8(v61, v61, 8uLL).u64[0];
                v65 = vextq_s8(v58, v58, 8uLL).u64[0];
                v66 = vextq_s8(v59, v59, 8uLL).u64[0];
                v95 = vextq_s8(v56, v56, 8uLL).u64[0];
                v96 = vextq_s8(v60, v60, 8uLL).u64[0];
                v67 = vextq_s8(v57, v57, 8uLL).u64[0];
                v69 = v53[8];
                v68 = v53[9];
              }
              v71 = v53[4];
              v70 = v53[5];
              v73 = v53[2];
              v72 = v53[3];
              v75 = *v53;
              v74 = v53[1];
              v61.i64[1] = v64;
              v58.i64[1] = v65;
              v59.i64[1] = v66;
              v73.i64[1] = vextq_s8(v73, v73, 8uLL).u64[0];
              v76 = *(unsigned int *)(a2 + 16);
              v74.i64[1] = vextq_s8(v74, v74, 8uLL).u64[0];
              v75.i64[1] = vextq_s8(v75, v75, 8uLL).u64[0];
              v70.i64[1] = vextq_s8(v70, v70, 8uLL).u64[0];
              v71.i64[1] = vextq_s8(v71, v71, 8uLL).u64[0];
              v72.i64[1] = vextq_s8(v72, v72, 8uLL).u64[0];
              v69.i64[1] = vextq_s8(v69, v69, 8uLL).u64[0];
              v54.i64[1] = vextq_s8(v54, v54, 8uLL).u64[0];
              v55.i64[1] = vextq_s8(v55, v55, 8uLL).u64[0];
              v56.i64[1] = v95;
              v57.i64[1] = v67;
              v68.i64[1] = vextq_s8(v68, v68, 8uLL).u64[0];
              v62.i64[1] = v98;
              v63.i64[1] = v97;
              v60.i64[1] = v96;
              v77 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v48[1] + (_DWORD)v76 * v45[1]));
              *v77 = v75;
              v77[1] = v74;
              v77[2] = v73;
              v78 = (int8x16_t *)((char *)v77 + 8 * v76);
              *v78 = v72;
              v78[1] = v71;
              v78[2] = v70;
              v79 = &v77[v76];
              *v79 = v55;
              v79[1] = v54;
              v79[2] = v69;
              v80 = (int8x16_t *)((char *)v77 + 24 * v76);
              *v80 = v68;
              v80[1] = v57;
              v80[2] = v56;
              v81 = &v77[2 * v76];
              *v81 = v59;
              v81[1] = v58;
              v81[2] = v61;
              v82 = (int8x16_t *)((char *)v77 + 40 * v76);
              *v82 = v60;
              v82[1] = v63;
              v82[2] = v62;
            }
            if (v51 == v50)
              break;
            v48 += 2;
          }
          while (v48 != v49);
        }
LABEL_42:
        v45 += 2;
      }
      while (v45 != v46);
      v43 = *a3;
      v44 = a3[1];
    }
    if (v43 != v44)
    {
      v83 = a4[3];
      v84 = a4[4];
      if (v83 != v84)
      {
        v85 = a1[1];
        do
        {
          v86 = *a3;
          v87 = a3[1];
          if (*a3 != v87)
          {
            v89 = *(_QWORD *)(*(_QWORD *)(v85 + 88) + 24 * *v83);
            v88 = *(_QWORD *)(*(_QWORD *)(v85 + 88) + 24 * *v83 + 8);
            do
            {
              if (v89 == v88)
                break;
              v90 = *v86;
              while (*(_DWORD *)v89 < v90)
              {
                v89 += 16;
                if (v89 == v88)
                  goto LABEL_62;
              }
              if (*(_DWORD *)v89 == v90)
              {
                v91 = (__int128 *)(*(_QWORD *)(v85 + 16) + 8 * *(_QWORD *)(v89 + 8));
                v92 = (_OWORD *)(*(_QWORD *)a2 + 8 * (v86[1] + *(_DWORD *)(a2 + 16) * v83[1]));
                v93 = v91[2];
                v94 = *v91;
                v92[1] = v91[1];
                v92[2] = v93;
                *v92 = v94;
              }
              if (v89 == v88)
                break;
              v86 += 2;
            }
            while (v86 != v87);
          }
LABEL_62:
          v83 += 2;
        }
        while (v83 != v84);
      }
    }
  }
}

uint64_t sub_239C91454(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  unint64_t v20;
  int8x16_t v21;
  unint64_t v22;
  int8x16_t v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int8x16_t v32;
  unint64_t v33;
  int8x16_t v34;
  unint64_t v35;
  int8x16_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4);
          v8 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4 + 8);
LABEL_8:
          if (v9 != v8)
          {
            v10 = *v6;
            while (*(_DWORD *)v9 != v10)
            {
              if (*(_DWORD *)v9 > v10)
                goto LABEL_16;
              v9 += 16;
              if (v9 == v8)
                goto LABEL_5;
            }
            v11 = a4[1];
            v12 = v6[1];
            v13 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v9 + 8);
            v14 = *((unsigned int *)a2 + 4);
            v15 = *a2;
            if (v11 < v12)
            {
              v16 = (int8x16_t *)(v15 + 8 * (v11 + (_DWORD)v14 * v12));
              v17 = *(int8x16_t *)v13;
              v18 = *(int8x16_t *)(v13 + 32);
              v16[1] = *(int8x16_t *)(v13 + 16);
              v16[2] = v18;
              *v16 = v17;
LABEL_16:
              if (v9 == v8)
                continue;
              goto LABEL_22;
            }
            if (v13 == v15)
            {
              v21 = *(int8x16_t *)(v13 + 16);
              v23 = *(int8x16_t *)(v13 + 32);
              v19 = *(int8x16_t *)v13;
              v24 = vextq_s8(v23, v23, 8uLL).u64[0];
              v22 = vextq_s8(v21, v21, 8uLL).u64[0];
              v20 = vextq_s8(v19, v19, 8uLL).u64[0];
            }
            else
            {
              v19.i64[0] = *(_QWORD *)v13;
              v20 = *(_QWORD *)(v13 + 8);
              v21.i64[0] = *(_QWORD *)(v13 + 16);
              v22 = *(_QWORD *)(v13 + 24);
              v23.i64[0] = *(_QWORD *)(v13 + 32);
              v24 = *(_QWORD *)(v13 + 40);
            }
            v25 = (_QWORD *)(v15 + 8 * (v12 + (_DWORD)v14 * v11));
            *v25 = v19.i64[0];
            v25[v14] = v20;
            v25[2 * v14] = v21.i64[0];
            v25[3 * v14] = v22;
            v25[4 * v14] = v23.i64[0];
            v25[5 * v14] = v24;
            if (v9 == v8)
              continue;
LABEL_22:
            v6 += 2;
            if (v6 != v7)
              goto LABEL_8;
          }
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v26 = *a3;
        v27 = a3[1];
        if (*a3 != v27)
        {
          v29 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4);
          v28 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4 + 8);
          do
          {
            if (v29 == v28)
              break;
            v30 = *v26;
            while (*(_DWORD *)v29 < v30)
            {
              v29 += 16;
              if (v29 == v28)
                goto LABEL_26;
            }
            if (*(_DWORD *)v29 == v30)
            {
              v31 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v29 + 8);
              if (v31 == *a2)
              {
                v34 = *(int8x16_t *)(v31 + 16);
                v36 = *(int8x16_t *)(v31 + 32);
                v32 = *(int8x16_t *)v31;
                v37 = vextq_s8(v36, v36, 8uLL).u64[0];
                v35 = vextq_s8(v34, v34, 8uLL).u64[0];
                v33 = vextq_s8(v32, v32, 8uLL).u64[0];
              }
              else
              {
                v32.i64[0] = *(_QWORD *)v31;
                v33 = *(_QWORD *)(v31 + 8);
                v34.i64[0] = *(_QWORD *)(v31 + 16);
                v35 = *(_QWORD *)(v31 + 24);
                v36.i64[0] = *(_QWORD *)(v31 + 32);
                v37 = *(_QWORD *)(v31 + 40);
              }
              v38 = *((unsigned int *)a2 + 4);
              v39 = (_QWORD *)(*a2 + 8 * (v26[1] + (_DWORD)v38 * a4[1]));
              *v39 = v32.i64[0];
              v39[v38] = v33;
              v39[2 * v38] = v34.i64[0];
              v39[3 * v38] = v35;
              v39[4 * v38] = v36.i64[0];
              v39[5 * v38] = v37;
            }
            if (v29 == v28)
              break;
            v26 += 2;
          }
          while (v26 != v27);
        }
LABEL_26:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_239C91690(uint64_t result, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4);
          v8 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4 + 8);
          do
          {
            if (v9 == v8)
              break;
            v10 = *v6;
            while (*(_DWORD *)v9 != v10)
            {
              if (*(_DWORD *)v9 > v10)
                goto LABEL_20;
              v9 += 16;
              if (v9 == v8)
                goto LABEL_5;
            }
            v11 = a4[1];
            v12 = v6[1];
            v13 = v11 <= v12 ? v6[1] : a4[1];
            if (v11 >= v12)
              v11 = v6[1];
            *(_QWORD *)(*(_QWORD *)a2 + 8 * (v11 + *(_DWORD *)(a2 + 16) * v13)) = *(_QWORD *)(*(_QWORD *)(result + 16)
                                                                                              + 8
                                                                                              * *(_QWORD *)(v9 + 8));
LABEL_20:
            if (v9 == v8)
              break;
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v14 = *a3;
        v15 = a3[1];
        if (*a3 != v15)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4);
          v16 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4 + 8);
          do
          {
            if (v17 == v16)
              break;
            v18 = *v14;
            while (*(_DWORD *)v17 < v18)
            {
              v17 += 16;
              if (v17 == v16)
                goto LABEL_25;
            }
            if (*(_DWORD *)v17 == v18)
              *(_QWORD *)(*(_QWORD *)a2 + 8 * (v14[1] + *(_DWORD *)(a2 + 16) * a4[1])) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v17 + 8));
            if (v17 == v16)
              break;
            v14 += 2;
          }
          while (v14 != v15);
        }
LABEL_25:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_239C917EC(uint64_t result, uint64_t a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *v15;
  __int8 *v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64x2_t *v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t *v65;
  int8x16_t *v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int8x16_t *v69;
  unsigned int *v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  int8x16_t *v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  uint64_t v98;
  int8x16_t *v99;
  int8x16_t *v100;
  int8x16_t *v101;
  int8x16_t *v102;
  int8x16_t *v103;
  int8x16_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4);
          v8 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4 + 8);
          do
          {
            if (v9 == v8)
              break;
            v10 = *v6;
            while (*(_DWORD *)v9 != v10)
            {
              if (*(_DWORD *)v9 > v10)
                goto LABEL_21;
              v9 += 16;
              if (v9 == v8)
                goto LABEL_5;
            }
            v11 = a4[1];
            v12 = v6[1];
            v13 = *(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v9 + 8);
            v14 = *(unsigned int *)(a2 + 16);
            v15 = *(int8x16_t **)a2;
            if (v11 >= v12)
            {
              if ((int8x16_t *)v13 == v15)
              {
                v53 = *(int8x16_t *)(v13 + 256);
                v54 = *(int8x16_t *)(v13 + 272);
                v48 = *(int8x16_t *)(v13 + 224);
                v52 = *(int8x16_t *)(v13 + 240);
                v46 = *(int8x16_t *)(v13 + 192);
                v47 = *(int8x16_t *)(v13 + 208);
                v41 = *(int8x16_t *)(v13 + 160);
                v42 = *(int8x16_t *)(v13 + 176);
                v36 = *(int8x16_t *)(v13 + 128);
                v40 = *(int8x16_t *)(v13 + 144);
                v107 = vextq_s8(v53, v53, 8uLL).u64[0];
                v109 = vextq_s8(v54, v54, 8uLL).u64[0];
                v111 = vextq_s8(v52, v52, 8uLL).u64[0];
                v105 = vextq_s8(v48, v48, 8uLL).u64[0];
                v50 = vextq_s8(v47, v47, 8uLL).u64[0];
                v51 = vextq_s8(v46, v46, 8uLL).u64[0];
                v44 = vextq_s8(v42, v42, 8uLL).u64[0];
                v45 = vextq_s8(v41, v41, 8uLL).u64[0];
                v34 = *(int8x16_t *)(v13 + 96);
                v35 = *(int8x16_t *)(v13 + 112);
              }
              else
              {
                v34 = *(int8x16_t *)(v13 + 96);
                v35 = *(int8x16_t *)(v13 + 112);
                v41 = *(int8x16_t *)(v13 + 160);
                v42 = *(int8x16_t *)(v13 + 176);
                v46 = *(int8x16_t *)(v13 + 192);
                v47 = *(int8x16_t *)(v13 + 208);
                v48 = *(int8x16_t *)(v13 + 224);
                v52 = *(int8x16_t *)(v13 + 240);
                v53 = *(int8x16_t *)(v13 + 256);
                v54 = *(int8x16_t *)(v13 + 272);
                v107 = vextq_s8(v53, v53, 8uLL).u64[0];
                v109 = vextq_s8(v54, v54, 8uLL).u64[0];
                v111 = vextq_s8(v52, v52, 8uLL).u64[0];
                v105 = vextq_s8(v48, v48, 8uLL).u64[0];
                v50 = vextq_s8(v47, v47, 8uLL).u64[0];
                v51 = vextq_s8(v46, v46, 8uLL).u64[0];
                v44 = vextq_s8(v42, v42, 8uLL).u64[0];
                v45 = vextq_s8(v41, v41, 8uLL).u64[0];
                v36 = *(int8x16_t *)(v13 + 128);
                v40 = *(int8x16_t *)(v13 + 144);
              }
              v43 = vextq_s8(v40, v40, 8uLL).u64[0];
              v37 = vextq_s8(v36, v36, 8uLL).u64[0];
              v38 = vextq_s8(v35, v35, 8uLL).u64[0];
              v60 = *(int8x16_t *)(v13 + 64);
              v59 = *(int8x16_t *)(v13 + 80);
              v39 = vextq_s8(v34, v34, 8uLL).u64[0];
              v62 = *(int8x16_t *)(v13 + 32);
              v61 = *(int8x16_t *)(v13 + 48);
              v64 = *(int8x16_t *)v13;
              v63 = *(int8x16_t *)(v13 + 16);
              v62.i64[1] = vextq_s8(v62, v62, 8uLL).u64[0];
              v63.i64[1] = vextq_s8(v63, v63, 8uLL).u64[0];
              v64.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
              v59.i64[1] = vextq_s8(v59, v59, 8uLL).u64[0];
              v16 = &v15->i8[8 * v12 + 8 * (_DWORD)v14 * v11];
              v60.i64[1] = vextq_s8(v60, v60, 8uLL).u64[0];
              v61.i64[1] = vextq_s8(v61, v61, 8uLL).u64[0];
              *(int8x16_t *)v16 = v64;
              *((int8x16_t *)v16 + 1) = v63;
              *((int8x16_t *)v16 + 2) = v62;
              v65 = (int8x16_t *)&v16[8 * v14];
              *v65 = v61;
              v65[1] = v60;
              v65[2] = v59;
              v56 = v109;
              v55 = v111;
              v49 = v105;
              v57 = v107;
            }
            else
            {
              v16 = &v15->i8[8 * v11 + 8 * (_DWORD)v14 * v12];
              v17 = *(int64x2_t *)(v13 + 16);
              v19 = *(int64x2_t *)(v13 + 64);
              v18 = *(int64x2_t *)(v13 + 80);
              v21 = *(int64x2_t *)(v13 + 32);
              v20 = *(int64x2_t *)(v13 + 48);
              v23 = *(int64x2_t *)(v13 + 96);
              v22 = *(int64x2_t *)(v13 + 112);
              v24 = *(int64x2_t *)(v13 + 128);
              v25 = *(int64x2_t *)(v13 + 192);
              v26 = *(int64x2_t *)(v13 + 208);
              v27 = *(int64x2_t *)(v13 + 224);
              v28 = vzip1q_s64(*(int64x2_t *)v13, v20);
              v29 = vzip1q_s64(v23, *(int64x2_t *)(v13 + 144));
              v30 = vzip1q_s64(v25, *(int64x2_t *)(v13 + 240));
              v31.i64[0] = vdupq_laneq_s64(v23, 1).u64[0];
              v31.i64[1] = *(_QWORD *)(v13 + 152);
              v32 = vzip2q_s64(*(int64x2_t *)v13, v20);
              v33.i64[0] = vdupq_laneq_s64(v25, 1).u64[0];
              v33.i64[1] = *(_QWORD *)(v13 + 248);
              v34 = (int8x16_t)vzip1q_s64(v17, v19);
              v35 = (int8x16_t)vzip1q_s64(v22, *(int64x2_t *)(v13 + 160));
              v36 = (int8x16_t)vzip1q_s64(v26, *(int64x2_t *)(v13 + 256));
              v37 = vextq_s8(v36, v36, 8uLL).u64[0];
              v38 = vextq_s8(v35, v35, 8uLL).u64[0];
              v39 = vextq_s8(v34, v34, 8uLL).u64[0];
              v40 = (int8x16_t)vzip2q_s64(v17, v19);
              v41.i64[0] = vdupq_laneq_s64(v22, 1).u64[0];
              v41.i64[1] = *(_QWORD *)(v13 + 168);
              v42.i64[0] = vdupq_laneq_s64(v26, 1).u64[0];
              v42.i64[1] = *(_QWORD *)(v13 + 264);
              v43 = vextq_s8(v40, v40, 8uLL).u64[0];
              v44 = vextq_s8(v42, v42, 8uLL).u64[0];
              v45 = vextq_s8(v41, v41, 8uLL).u64[0];
              v46 = (int8x16_t)vzip1q_s64(v21, v18);
              v47 = (int8x16_t)vzip1q_s64(v24, *(int64x2_t *)(v13 + 176));
              v48 = (int8x16_t)vzip1q_s64(v27, *(int64x2_t *)(v13 + 272));
              v49 = vextq_s8(v48, v48, 8uLL).u64[0];
              v50 = vextq_s8(v47, v47, 8uLL).u64[0];
              v51 = vextq_s8(v46, v46, 8uLL).u64[0];
              v52 = (int8x16_t)vzip2q_s64(v21, v18);
              v53.i64[0] = vdupq_laneq_s64(v24, 1).u64[0];
              v53.i64[1] = *(_QWORD *)(v13 + 184);
              v54.i64[0] = vdupq_laneq_s64(v27, 1).u64[0];
              v54.i64[1] = *(_QWORD *)(v13 + 280);
              v55 = vextq_s8(v52, v52, 8uLL).u64[0];
              v56 = vextq_s8(v54, v54, 8uLL).u64[0];
              v57 = vextq_s8(v53, v53, 8uLL).u64[0];
              *((int64x2_t *)v16 + 1) = v29;
              *((int64x2_t *)v16 + 2) = v30;
              *(int64x2_t *)v16 = v28;
              v58 = (int64x2_t *)&v16[8 * v14];
              v58[1] = v31;
              v58[2] = v33;
              *v58 = v32;
            }
            v34.i64[1] = v39;
            v35.i64[1] = v38;
            v66 = (int8x16_t *)&v16[16 * v14];
            *v66 = v34;
            v66[1] = v35;
            v36.i64[1] = v37;
            v66[2] = v36;
            v67 = (int8x16_t *)&v16[24 * v14];
            v42.i64[1] = v44;
            v41.i64[1] = v45;
            v40.i64[1] = v43;
            v67[1] = v41;
            v67[2] = v42;
            *v67 = v40;
            v48.i64[1] = v49;
            v68 = (int8x16_t *)&v16[32 * v14];
            v47.i64[1] = v50;
            v46.i64[1] = v51;
            v68[1] = v47;
            v68[2] = v48;
            *v68 = v46;
            v69 = (int8x16_t *)&v16[40 * v14];
            v54.i64[1] = v56;
            v53.i64[1] = v57;
            v52.i64[1] = v55;
            v69[1] = v53;
            v69[2] = v54;
            *v69 = v52;
LABEL_21:
            if (v9 == v8)
              break;
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v70 = *a3;
        v71 = a3[1];
        if (*a3 != v71)
        {
          v73 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4);
          v72 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4 + 8);
          do
          {
            if (v73 == v72)
              break;
            v74 = *v70;
            while (*(_DWORD *)v73 < v74)
            {
              v73 += 16;
              if (v73 == v72)
                goto LABEL_26;
            }
            if (*(_DWORD *)v73 == v74)
            {
              v75 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v73 + 8));
              if (v75 == *(int8x16_t **)a2)
              {
                v85 = v75[16];
                v84 = v75[17];
                v83 = v75[14];
                v82 = v75[15];
                v81 = v75[12];
                v80 = v75[13];
                v79 = v75[10];
                v78 = v75[11];
                v91 = v75[8];
                v90 = v75[9];
                v110 = vextq_s8(v85, v85, 8uLL).u64[0];
                v112 = vextq_s8(v84, v84, 8uLL).u64[0];
                v86 = vextq_s8(v83, v83, 8uLL).u64[0];
                v87 = vextq_s8(v80, v80, 8uLL).u64[0];
                v88 = vextq_s8(v81, v81, 8uLL).u64[0];
                v106 = vextq_s8(v78, v78, 8uLL).u64[0];
                v108 = vextq_s8(v82, v82, 8uLL).u64[0];
                v89 = vextq_s8(v79, v79, 8uLL).u64[0];
                v77 = v75[6];
                v76 = v75[7];
              }
              else
              {
                v77 = v75[6];
                v76 = v75[7];
                v79 = v75[10];
                v78 = v75[11];
                v81 = v75[12];
                v80 = v75[13];
                v83 = v75[14];
                v82 = v75[15];
                v85 = v75[16];
                v84 = v75[17];
                v110 = vextq_s8(v85, v85, 8uLL).u64[0];
                v112 = vextq_s8(v84, v84, 8uLL).u64[0];
                v86 = vextq_s8(v83, v83, 8uLL).u64[0];
                v87 = vextq_s8(v80, v80, 8uLL).u64[0];
                v88 = vextq_s8(v81, v81, 8uLL).u64[0];
                v106 = vextq_s8(v78, v78, 8uLL).u64[0];
                v108 = vextq_s8(v82, v82, 8uLL).u64[0];
                v89 = vextq_s8(v79, v79, 8uLL).u64[0];
                v91 = v75[8];
                v90 = v75[9];
              }
              v93 = v75[4];
              v92 = v75[5];
              v95 = v75[2];
              v94 = v75[3];
              v97 = *v75;
              v96 = v75[1];
              v83.i64[1] = v86;
              v80.i64[1] = v87;
              v81.i64[1] = v88;
              v95.i64[1] = vextq_s8(v95, v95, 8uLL).u64[0];
              v98 = *(unsigned int *)(a2 + 16);
              v96.i64[1] = vextq_s8(v96, v96, 8uLL).u64[0];
              v97.i64[1] = vextq_s8(v97, v97, 8uLL).u64[0];
              v92.i64[1] = vextq_s8(v92, v92, 8uLL).u64[0];
              v93.i64[1] = vextq_s8(v93, v93, 8uLL).u64[0];
              v94.i64[1] = vextq_s8(v94, v94, 8uLL).u64[0];
              v91.i64[1] = vextq_s8(v91, v91, 8uLL).u64[0];
              v76.i64[1] = vextq_s8(v76, v76, 8uLL).u64[0];
              v77.i64[1] = vextq_s8(v77, v77, 8uLL).u64[0];
              v78.i64[1] = v106;
              v79.i64[1] = v89;
              v90.i64[1] = vextq_s8(v90, v90, 8uLL).u64[0];
              v84.i64[1] = v112;
              v85.i64[1] = v110;
              v82.i64[1] = v108;
              v99 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (v70[1] + (_DWORD)v98 * a4[1]));
              *v99 = v97;
              v99[1] = v96;
              v99[2] = v95;
              v100 = (int8x16_t *)((char *)v99 + 8 * v98);
              *v100 = v94;
              v100[1] = v93;
              v100[2] = v92;
              v101 = &v99[v98];
              *v101 = v77;
              v101[1] = v76;
              v101[2] = v91;
              v102 = (int8x16_t *)((char *)v99 + 24 * v98);
              *v102 = v90;
              v102[1] = v79;
              v102[2] = v78;
              v103 = &v99[2 * v98];
              *v103 = v81;
              v103[1] = v80;
              v103[2] = v83;
              v104 = (int8x16_t *)((char *)v99 + 40 * v98);
              *v104 = v82;
              v104[1] = v85;
              v104[2] = v84;
            }
            if (v73 == v72)
              break;
            v70 += 2;
          }
          while (v70 != v71);
        }
LABEL_26:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_239C91D00(uint64_t result, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int *a5, char a6)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int8x16_t *v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int8x16_t *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  __int128 *v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;

  if (*a3 != a3[1])
  {
    if ((a6 & 1) != 0)
    {
      for (; a4 != a5; a4 += 2)
      {
        v6 = *a3;
        v7 = a3[1];
        if (*a3 != v7)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4);
          v8 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4 + 8);
          do
          {
            if (v9 == v8)
              break;
            v10 = *v6;
            while (*(_DWORD *)v9 != v10)
            {
              if (*(_DWORD *)v9 > v10)
                goto LABEL_16;
              v9 += 16;
              if (v9 == v8)
                goto LABEL_5;
            }
            v11 = a4[1];
            v12 = v6[1];
            v13 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v9 + 8));
            v14 = *((unsigned int *)a2 + 4);
            v15 = *a2;
            v17 = v13[1];
            v16 = v13[2];
            v18 = *v13;
            v19 = vextq_s8(v16, v16, 8uLL).u64[0];
            v20 = vextq_s8(v17, v17, 8uLL).u64[0];
            v21 = vextq_s8(v18, v18, 8uLL).u64[0];
            if (v11 < v12)
            {
              v22 = (_QWORD *)(v15 + 8 * (v11 + (_DWORD)v14 * v12));
              *v22 = v18.i64[0];
              v22[v14] = v21;
              v22[2 * v14] = v17.i64[0];
              v22[3 * v14] = v20;
              v22[4 * v14] = v16.i64[0];
              v22[5 * v14] = v19;
LABEL_16:
              if (v9 == v8)
                break;
              goto LABEL_19;
            }
            v18.i64[1] = v21;
            v17.i64[1] = v20;
            v23 = (int8x16_t *)(v15 + 8 * (v12 + (_DWORD)v14 * v11));
            *v23 = v18;
            v23[1] = v17;
            v16.i64[1] = v19;
            v23[2] = v16;
            if (v9 == v8)
              break;
LABEL_19:
            v6 += 2;
          }
          while (v6 != v7);
        }
LABEL_5:
        ;
      }
    }
    else
    {
      for (; a4 != a5; a4 += 2)
      {
        v24 = *a3;
        v25 = a3[1];
        if (*a3 != v25)
        {
          v27 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4);
          v26 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24 * *a4 + 8);
          do
          {
            if (v27 == v26)
              break;
            v28 = *v24;
            while (*(_DWORD *)v27 < v28)
            {
              v27 += 16;
              if (v27 == v26)
                goto LABEL_23;
            }
            if (*(_DWORD *)v27 == v28)
            {
              v29 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v27 + 8));
              v30 = (_OWORD *)(*a2 + 8 * (v24[1] + *((_DWORD *)a2 + 4) * a4[1]));
              v31 = v29[2];
              v32 = *v29;
              v30[1] = v29[1];
              v30[2] = v31;
              *v30 = v32;
            }
            if (v27 == v26)
              break;
            v24 += 2;
          }
          while (v24 != v25);
        }
LABEL_23:
        ;
      }
    }
  }
  return result;
}

uint64_t sub_239C91ED0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_250AFC470;
  v2 = (_QWORD *)(a1 + 160);
  v3 = *(_QWORD **)(a1 + 184);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 128);
  if (v5)
  {
    *(_QWORD *)(a1 + 136) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 104);
  if (v6)
  {
    *(_QWORD *)(a1 + 112) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 96);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 80);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_239C91FAC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &unk_250AFC2F8;
  v2 = *(void **)(a1 + 408);
  if (v2)
  {
    *(_QWORD *)(a1 + 416) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 384);
  if (v3)
  {
    *(_QWORD *)(a1 + 392) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 368);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 376);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 352);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 360);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  free(*(void **)(a1 + 312));
  *(_QWORD *)a1 = &unk_250AFC3A8;
  sub_239C92064(a1 + 24);
  return a1;
}

uint64_t sub_239C92064(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  *(_QWORD *)a1 = &off_250AFC410;
  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 200);
  if (v3)
  {
    *(_QWORD *)(a1 + 208) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 176);
  if (v4)
  {
    *(_QWORD *)(a1 + 184) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 152);
  if (v5)
  {
    *(_QWORD *)(a1 + 160) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 128);
  if (v6)
  {
    *(_QWORD *)(a1 + 136) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 104);
  if (v7)
  {
    *(_QWORD *)(a1 + 112) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(void **)(a1 + 56);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 16);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 544;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v8;
    operator delete(v10);
  }
  sub_239A61F08(*(_QWORD **)(a1 + 40));
  sub_239A61F08(*(_QWORD **)(a1 + 16));
  return a1;
}

void sub_239C9217C(uint64_t a1)
{
  sub_239C92064(a1);
  JUMPOUT(0x23B83E31CLL);
}

double sub_239C921A0()
{
  return 0.0;
}

void sub_239C921C8(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "SparseHessian");
}

uint64_t sub_239C921F8(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_250AFC410;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 98) = 1;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  v2 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 104) = v2;
  *(_QWORD *)(a1 + 112) = v2;
  *(_QWORD *)(a1 + 120) = v2 + 256;
  v3 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 152) = v3;
  *(_QWORD *)(a1 + 160) = v3;
  *(_QWORD *)(a1 + 168) = v3 + 256;
  v4 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 200) = v4;
  *(_QWORD *)(a1 + 208) = v4;
  *(_QWORD *)(a1 + 216) = v4 + 256;
  v5 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 136) = v5;
  *(_QWORD *)(a1 + 144) = v5 + 256;
  v6 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 176) = v6;
  *(_QWORD *)(a1 + 184) = v6;
  *(_QWORD *)(a1 + 192) = v6 + 256;
  v7 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 224) = v7;
  *(_QWORD *)(a1 + 232) = v7;
  *(_QWORD *)(a1 + 240) = v7 + 256;
  return a1;
}

void sub_239C9231C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  _QWORD **v6;
  _QWORD **v7;
  void **v8;
  char *v10;
  void **v11;
  char *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v8 = v5;
  sub_2394FCFA8(v4);
  sub_2394FCFA8(v3);
  sub_2394FCFA8(v2);
  v10 = (char *)*v8;
  if (*v8)
  {
    v11 = v8;
    v12 = *(char **)(v1 + 64);
    v13 = v10;
    if (v12 != v10)
    {
      do
      {
        v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 2);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 544;
      }
      while (v12 != v10);
      v13 = *v11;
    }
    *(_QWORD *)(v1 + 64) = v10;
    operator delete(v13);
  }
  sub_239A61F08(*v7);
  sub_239A61F08(*v6);
  _Unwind_Resume(a1);
}

void sub_239C923CC(uint64_t a1)
{
  sub_239C91ED0(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239C923F0(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  float64x2_t v12;
  __int128 *v13;
  char *v14;
  uint64_t *v15;
  uint64_t *i;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[5];
  int v22;
  std::mutex v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 192);
  __asm { FMOV            V0.2D, #1.0 }
  v11 = _Q0;
  v8 = v2[1];
  v21[0] = *v2;
  v21[1] = v2 + 7;
  v21[2] = &v11;
  v21[3] = v8;
  v21[4] = 0;
  v22 = a2;
  memset(v23.__m_.__opaque, 0, sizeof(v23.__m_.__opaque));
  v23.__m_.__sig = 850045863;
  v18 = v8;
  v19 = v8;
  v9 = *(_QWORD *)(v21[0] + 56);
  v10 = *(_QWORD *)(v21[0] + 64);
  *(_QWORD *)&v12.f64[0] = v21;
  *(_QWORD *)&v12.f64[1] = &v17;
  v13 = &v11;
  v14 = &v20;
  v15 = &v19;
  for (i = &v18; v9 != v10; v9 += 544)
    sub_239C80F60(&v12, v9);
  std::mutex::~mutex(&v23);
}

void sub_239C924DC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239C924F0(uint64_t a1)
{
  return **(_QWORD **)(a1 + 192);
}

uint64_t sub_239C924FC(uint64_t a1)
{
  return **(_QWORD **)(a1 + 192);
}

uint64_t sub_239C92508(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8);
}

_QWORD *sub_239C92514(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_250AFD820;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_250AFD880;
  sub_2394D0C00((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_239C925B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_250AFD820;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_250AFD880;
  sub_2394D0C00((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_239C9266C(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (6 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v22 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v22;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = &v12[8 * v16 - 16];
    v19 = (__int128 *)(v10 - 16);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v19;
      *((_OWORD *)v18 - 1) = *(v19 - 1);
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v15 = &v14[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_239C92798(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 6uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_239C927C0()
{
  return 6;
}

uint64_t sub_239C927C8()
{
  return 1;
}

uint64_t sub_239C927D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  __int128 *v8;
  int v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v8 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          v9 = *v6;
          v6 += 4;
          v10 = (_OWORD *)(*(_QWORD *)a2 + 8 * (a3 + 6 * v9 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3))));
          v11 = v8[2];
          v12 = *v8;
          v10[1] = v8[1];
          v10[2] = v11;
          *v10 = v12;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_239C9285C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_250AFD820;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_250AFD880;
  sub_2394D0C00((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_239C92900(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_250AFD820;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_250AFD880;
  sub_2394D0C00((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_239C929B4(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (36 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v22 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v22;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = &v12[8 * v16 - 16];
    v19 = (__int128 *)(v10 - 16);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v19;
      *((_OWORD *)v18 - 1) = *(v19 - 1);
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v15 = &v14[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_239C92AE0(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x24uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_239C92B10()
{
  return 6;
}

uint64_t sub_239C92B18()
{
  return 6;
}

uint64_t sub_239C92B20(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int v30;
  uint64_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v38 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          if (v38 == *(int8x16_t **)a2)
          {
            v17 = v38[16];
            v16 = v38[17];
            v15 = v38[14];
            v14 = v38[15];
            v13 = v38[12];
            v12 = v38[13];
            v11 = v38[10];
            v10 = v38[11];
            v23 = v38[8];
            v22 = v38[9];
            v41 = vextq_s8(v17, v17, 8uLL).u64[0];
            v42 = vextq_s8(v16, v16, 8uLL).u64[0];
            v18 = vextq_s8(v15, v15, 8uLL).u64[0];
            v19 = vextq_s8(v12, v12, 8uLL).u64[0];
            v20 = vextq_s8(v13, v13, 8uLL).u64[0];
            v39 = vextq_s8(v10, v10, 8uLL).u64[0];
            v40 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = vextq_s8(v11, v11, 8uLL).u64[0];
            v9 = v38[6];
            v8 = v38[7];
          }
          else
          {
            v9 = v38[6];
            v8 = v38[7];
            v11 = v38[10];
            v10 = v38[11];
            v13 = v38[12];
            v12 = v38[13];
            v15 = v38[14];
            v14 = v38[15];
            v17 = v38[16];
            v16 = v38[17];
            v41 = vextq_s8(v17, v17, 8uLL).u64[0];
            v42 = vextq_s8(v16, v16, 8uLL).u64[0];
            v18 = vextq_s8(v15, v15, 8uLL).u64[0];
            v19 = vextq_s8(v12, v12, 8uLL).u64[0];
            v20 = vextq_s8(v13, v13, 8uLL).u64[0];
            v39 = vextq_s8(v10, v10, 8uLL).u64[0];
            v40 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = vextq_s8(v11, v11, 8uLL).u64[0];
            v23 = v38[8];
            v22 = v38[9];
          }
          v25 = v38[4];
          v24 = v38[5];
          v27 = v38[2];
          v26 = v38[3];
          v29 = *v38;
          v28 = v38[1];
          v15.i64[1] = v18;
          v12.i64[1] = v19;
          v13.i64[1] = v20;
          v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
          v30 = *v6;
          v6 += 4;
          v31 = *(unsigned int *)(a2 + 16);
          v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
          v29.i64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
          v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
          v25.i64[1] = vextq_s8(v25, v25, 8uLL).u64[0];
          v26.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
          v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v10.i64[1] = v39;
          v11.i64[1] = v21;
          v22.i64[1] = vextq_s8(v22, v22, 8uLL).u64[0];
          v16.i64[1] = v42;
          v32 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (a3 + 6 * v30 + v31 * (HIDWORD(a3) + 6 * i)));
          v17.i64[1] = v41;
          v14.i64[1] = v40;
          *v32 = v29;
          v32[1] = v28;
          v32[2] = v27;
          v33 = (int8x16_t *)((char *)v32 + 8 * v31);
          *v33 = v26;
          v33[1] = v25;
          v33[2] = v24;
          v34 = &v32[v31];
          *v34 = v9;
          v34[1] = v8;
          v34[2] = v23;
          v35 = (int8x16_t *)((char *)v32 + 24 * v31);
          *v35 = v22;
          v35[1] = v11;
          v35[2] = v10;
          v36 = &v32[2 * v31];
          *v36 = v13;
          v36[1] = v12;
          v36[2] = v15;
          v37 = (int8x16_t *)((char *)v32 + 40 * v31);
          *v37 = v14;
          v37[1] = v17;
          v37[2] = v16;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_239C92D20(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v8 = (uint64_t *)(*(_QWORD *)(result + 88) + 24 * i);
      v9 = *v8;
      v10 = v8[1];
      if (v9 != v10)
      {
        while (i != *(_DWORD *)v9)
        {
          v9 += 16;
          if (v9 == v10)
            goto LABEL_5;
        }
        v5 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v9 + 8));
        v6 = *a2 + 8 * (a3 + 6 * i);
        *(_QWORD *)&v7 = *v5;
        if (v5 == (_QWORD *)*a2)
        {
          *(_QWORD *)&v11 = v5[14];
          *(_QWORD *)&v12 = v5[28];
          *((_QWORD *)&v7 + 1) = v5[7];
          *((_QWORD *)&v11 + 1) = v5[21];
          *((_QWORD *)&v12 + 1) = v5[35];
          *(_OWORD *)(v6 + 16) = v11;
          *(_OWORD *)(v6 + 32) = v12;
          *(_OWORD *)v6 = v7;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          *(_QWORD *)(v6 + 8) = v5[7];
          *(_QWORD *)(v6 + 16) = v5[14];
          *(_QWORD *)(v6 + 24) = v5[21];
          *(_QWORD *)(v6 + 32) = v5[28];
          *(_QWORD *)(v6 + 40) = v5[35];
        }
      }
LABEL_5:
      ;
    }
  }
  return result;
}

_QWORD *sub_239C92DF8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_250AFD820;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_250AFD880;
  sub_2394D0C00((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_239C92E9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_250AFD820;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_250AFD880;
  sub_2394D0C00((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_239C92F50(_QWORD *a1, unsigned int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = a2;
  v6 = a3 * a2;
  if (v4 >= a2 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v22 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v22;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v10 - &v12[v13 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = &v12[8 * v16 - 16];
    v19 = (__int128 *)(v10 - 16);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v19;
      *((_OWORD *)v18 - 1) = *(v19 - 1);
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v15 = &v14[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_239C93078(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_239C93090()
{
  return 1;
}

uint64_t sub_239C93098()
{
  return 1;
}

uint64_t sub_239C930A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v8 = *((_QWORD *)v6 + 1);
          v9 = *v6;
          v6 += 4;
          *(_QWORD *)(*(_QWORD *)a2 + 8 * (v9 + a3 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3)))) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v8);
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_239C93114(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v8 = (uint64_t *)(*(_QWORD *)(result + 88) + 24 * i);
      v9 = *v8;
      v10 = v8[1];
      if (v9 != v10)
      {
        while (i != *(_DWORD *)v9)
        {
          v9 += 16;
          if (v9 == v10)
            goto LABEL_5;
        }
        v5 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v9 + 8));
        v6 = (i + a3);
        v7 = (_QWORD *)*a2;
        if (v5 == (_QWORD *)*a2)
        {
          v7[v6] = *v5;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          v7[v6] = *v5;
        }
      }
LABEL_5:
      ;
    }
  }
  return result;
}

_QWORD *sub_239C9319C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_250AFD820;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_250AFD880;
  sub_2394D0C00((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_239C93240(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_250AFD820;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_250AFD880;
  sub_2394D0C00((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_239C932F4(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (6 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v22 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v22;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = &v12[8 * v16 - 16];
    v19 = (__int128 *)(v10 - 16);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v19;
      *((_OWORD *)v18 - 1) = *(v19 - 1);
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v15 = &v14[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_239C93420(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 6uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_239C93448()
{
  return 1;
}

uint64_t sub_239C93450()
{
  return 6;
}

uint64_t sub_239C93458(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  int8x16_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v17 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v17 == *(_QWORD *)a2)
          {
            v10 = *(int8x16_t *)(v17 + 16);
            v12 = *(int8x16_t *)(v17 + 32);
            v8 = *(int8x16_t *)v17;
            v13 = vextq_s8(v12, v12, 8uLL).u64[0];
            v11 = vextq_s8(v10, v10, 8uLL).u64[0];
            v9 = vextq_s8(v8, v8, 8uLL).u64[0];
          }
          else
          {
            v8.i64[0] = *(_QWORD *)v17;
            v9 = *(_QWORD *)(v17 + 8);
            v10.i64[0] = *(_QWORD *)(v17 + 16);
            v11 = *(_QWORD *)(v17 + 24);
            v12.i64[0] = *(_QWORD *)(v17 + 32);
            v13 = *(_QWORD *)(v17 + 40);
          }
          v14 = *v6;
          v6 += 4;
          v15 = *(unsigned int *)(a2 + 16);
          v16 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v14 + a3 + v15 * (HIDWORD(a3) + 6 * i)));
          *v16 = v8.i64[0];
          v16[v15] = v9;
          v16[2 * v15] = v10.i64[0];
          v16[3 * v15] = v11;
          v16[4 * v15] = v12.i64[0];
          v16[5 * v15] = v13;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_239C9352C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &unk_250AFC668;
  sub_239C9BD0C((uint64_t)(a1 + 76));
  v2 = (void *)a1[73];
  if (v2)
  {
    a1[74] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[70];
  if (v3)
  {
    a1[71] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[67];
  if (v4)
  {
    a1[68] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[64];
  if (v5)
  {
    a1[65] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[59];
  if (v6)
  {
    a1[60] = v6;
    operator delete(v6);
  }
  return sub_239C9BDE8((uint64_t)a1);
}

uint64_t sub_239C935B0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_250AFC5B0;
  free(*(void **)(a1 + 856));
  if (*(__int16 *)(a1 + 832) < 0)
  {
    free(*(void **)(a1 + 816));
    *(_OWORD *)(a1 + 824) = 0u;
    *(_OWORD *)(a1 + 840) = 0u;
    *(_OWORD *)(a1 + 808) = 0u;
  }
  else
  {
    v2 = *(void **)(a1 + 816);
    if (v2)
    {
      free(v2);
      *(_QWORD *)(a1 + 816) = 0;
    }
    v3 = *(void **)(a1 + 824);
    if (v3)
    {
      free(v3);
      *(_QWORD *)(a1 + 824) = 0;
    }
    v4 = *(void **)(a1 + 840);
    if (v4)
    {
      free(v4);
      *(_QWORD *)(a1 + 840) = 0;
    }
    *(_QWORD *)(a1 + 848) = 0;
  }
  return sub_239C9352C((_QWORD *)a1);
}

uint64_t sub_239C9363C(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFC4F8;
  if (*(_DWORD *)(a1 + 896) != 2)
    sub_239A23A84(a1 + 904);
  return sub_239C935B0(a1);
}

void sub_239C93680(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  double v80;
  unint64_t v81;
  void *__p;
  double *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  __int128 v110;
  float64x2_t v111;
  int64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  _BYTE v115[32];
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  char v119;

  __p = 0;
  v83 = 0;
  v84 = 0;
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104);
  if (!v3)
  {
    **((_QWORD **)a1 + 2) = 0x3FF0000000000000;
    return;
  }
  sub_23945E108((uint64_t)&__p, 0xF0F0F0F0F0F0F0F1 * (v3 >> 5));
  v4 = (double *)__p;
  v5 = *(_QWORD *)(v2 + 104);
  v6 = *(_QWORD *)(v2 + 112);
  if (v5 != v6)
  {
    do
    {
      v85 = *(_QWORD *)(v5 + 8);
      v7 = *(_OWORD *)(v5 + 64);
      v9 = *(_OWORD *)(v5 + 16);
      v8 = *(_OWORD *)(v5 + 32);
      v88 = *(_OWORD *)(v5 + 48);
      v89 = v7;
      v86 = v9;
      v87 = v8;
      v10 = *(_OWORD *)(v5 + 128);
      v12 = *(_OWORD *)(v5 + 80);
      v11 = *(_OWORD *)(v5 + 96);
      v92 = *(_OWORD *)(v5 + 112);
      v93 = v10;
      v90 = v12;
      v91 = v11;
      v13 = *(float64x2_t *)(v5 + 144);
      v14 = *(float64x2_t *)(v5 + 160);
      v15 = *(float64x2_t *)(v5 + 192);
      v96 = *(float64x2_t *)(v5 + 176);
      v97 = v15;
      v94 = v13;
      v95 = v14;
      v16 = *(float64x2_t *)(v5 + 208);
      v17 = *(float64x2_t *)(v5 + 224);
      v18 = *(float64x2_t *)(v5 + 256);
      v100 = *(float64x2_t *)(v5 + 240);
      v101 = v18;
      v98 = v16;
      v99 = v17;
      v19 = *(float64x2_t *)(v5 + 272);
      v20 = *(float64x2_t *)(v5 + 288);
      v21 = *(float64x2_t *)(v5 + 320);
      v104 = *(float64x2_t *)(v5 + 304);
      v105 = v21;
      v102 = v19;
      v103 = v20;
      v22 = *(float64x2_t *)(v5 + 336);
      v23 = *(float64x2_t *)(v5 + 352);
      v24 = *(float64x2_t *)(v5 + 384);
      v108 = *(float64x2_t *)(v5 + 368);
      v109 = v24;
      v106 = v22;
      v107 = v23;
      v25 = *(float64x2_t *)(v5 + 416);
      v110 = *(_OWORD *)(v5 + 400);
      v26 = *(int64x2_t *)(v5 + 432);
      v111 = v25;
      v112 = v26;
      v27 = *(float64x2_t *)(v5 + 448);
      v28 = *(float64x2_t *)(v5 + 464);
      v29 = *(float64x2_t *)(v5 + 480);
      v30 = *(_OWORD *)(v5 + 496);
      *(float64x2_t *)v115 = v29;
      *(_OWORD *)&v115[16] = v30;
      v113 = v27;
      v114 = v28;
      v116 = *(_QWORD *)(v5 + 512);
      v117 = *(_QWORD *)(v5 + 520);
      v31 = *(std::__shared_weak_count **)(v5 + 528);
      v118 = v31;
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
      }
      v119 = *(_BYTE *)(v5 + 536);
      v29.f64[0] = *(float64_t *)(*((_QWORD *)&v110 + 1) + 16);
      v34 = vmulq_n_f64(v108, v29.f64[0]);
      *(_QWORD *)&v35.f64[0] = *(_OWORD *)&vmulq_f64(v109, v29);
      v35.f64[1] = v109.f64[1];
      v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v94.f64[0]), v104, v94, 1), v106, v95.f64[0]), v34, v95, 1);
      v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103, v94.f64[0]), v105, v94, 1), v107, v95.f64[0]), v35, v95, 1);
      v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v96.f64[0]), v104, v96, 1), v106, v97.f64[0]), v34, v97, 1);
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103, v96.f64[0]), v105, v96, 1), v107, v97.f64[0]), v35, v97, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v98.f64[0]), v104, v98, 1), v106, v99.f64[0]), v34, v99, 1);
      v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103, v98.f64[0]), v105, v98, 1), v107, v99.f64[0]), v35, v99, 1);
      v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v100.f64[0]), v104, v100, 1), v106, v101.f64[0]), v34, v101, 1);
      v43 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103, v100.f64[0]), v105, v100, 1), v107, v101.f64[0]), v35, v101, 1);
      v45 = *(float64x2_t *)(v110 + 16);
      v44 = *(float64x2_t *)(v110 + 32);
      v47 = *(float64x2_t *)(v110 + 48);
      v46 = *(float64x2_t *)(v110 + 64);
      v49 = *(float64x2_t *)(v110 + 80);
      v48 = *(float64x2_t *)(v110 + 96);
      v51 = *(float64x2_t *)(v110 + 112);
      v50 = *(float64x2_t *)(v110 + 128);
      v52 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v45.f64[0]), v38, v45, 1), v40, v44.f64[0]), v42, v44, 1);
      v53 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v37, v45.f64[0]), v39, v45, 1), v41, v44.f64[0]), v43, v44, 1);
      v54 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v47.f64[0]), v38, v47, 1), v40, v46.f64[0]), v42, v46, 1);
      *(_QWORD *)&v45.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v37, v47.f64[0]), v39, v47, 1), v41, v46.f64[0]), v43, v46, 1);
      v55 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v49.f64[0]), v38, v49, 1), v40, v48.f64[0]), v42, v48, 1);
      v47.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v37, v49.f64[0]), v39, v49, 1), v41, v48.f64[0]), v43, v48, 1).f64[0];
      v56 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v51.f64[0]), v38, v51, 1), v40, v50.f64[0]), v42, v50, 1);
      *(_QWORD *)&v37.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v37, v51.f64[0]), v39, v51, 1), v41, v50.f64[0]), v43, v50, 1);
      v38.f64[0] = v52.f64[0] + -1.0;
      v39.f64[0] = *(double *)&v54.i64[1] + -1.0;
      v39.f64[1] = v45.f64[0];
      v38.f64[1] = v52.f64[1];
      *(double *)v115 = v47.f64[0] + -1.0;
      v111 = v38;
      v112 = vzip1q_s64(v53, v54);
      v113 = v39;
      v114 = v55;
      *(float64x2_t *)&v115[8] = v56;
      *(float64_t *)&v115[24] = v37.f64[0];
      if (v117)
        (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v117 + 24))(v117, &v111);
      _V5.D[1] = v111.f64[1];
      _D7 = v111.f64[1];
      __asm { FMLA            D6, D7, V5.D[1] }
      _D5 = v112.i64[1];
      __asm { FMLA            D6, D5, V4.D[1] }
      _D4 = v113.f64[1];
      __asm { FMLA            D6, D4, V3.D[1] }
      _D3 = v114.f64[1];
      __asm { FMLA            D6, D3, V2.D[1] }
      _D2 = *(_QWORD *)&v115[8];
      __asm { FMLA            D6, D2, V1.D[1] }
      _D1 = *(_QWORD *)&v115[24];
      __asm { FMLA            D6, D1, V0.D[1] }
      v116 = _D6;
      v74 = v118;
      *(_QWORD *)v4++ = _D6;
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v5 += 544;
    }
    while (v5 != v6);
    v4 = (double *)__p;
  }
  if (v4 != v83)
  {
    v77 = (_BYTE)v83 - (_BYTE)v4;
    v78 = v83 - v4;
    v79 = v78 >> 1;
    sub_2395F71EC(v4, &v4[v78 >> 1], v83);
    v4 = (double *)__p;
    v80 = *((double *)__p + (v78 >> 1));
    if ((v77 & 8) == 0)
    {
      v81 = v79 - 1;
      if (v79 - 1 != v78)
      {
        sub_2395F71EC((double *)__p, (double *)__p + v81, (double *)__p + v78);
        v4 = (double *)__p;
      }
      v80 = (v80 + v4[v81]) * 0.5;
    }
    **((double **)a1 + 2) = sqrt(v80) * a1[1];
    goto LABEL_25;
  }
  **((_QWORD **)a1 + 2) = 0x3FF0000000000000;
  if (v4)
  {
LABEL_25:
    v83 = v4;
    operator delete(v4);
  }
}

void sub_239C93AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_239C93B4C(uint64_t a1, uint64_t a2)
{
  float64x2_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  uint64_t v56;
  double v79;
  double v80;
  double v81;
  double v82;

  kdebug_trace();
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v5)
  {
    if (v5 >= 9)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 8;
  }
  else
  {
    sub_23945E108(a2, 1uLL);
  }
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  if (v6 == v7)
  {
    v9 = 0.0;
    goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 299))
  {
    v8 = v7 - v6 - 544;
    v9 = 0.0;
    if (v8 <= 0x21F)
      goto LABEL_12;
    v10 = v8 / 0x220 + 1;
    v11 = *(_QWORD *)(a1 + 104);
    v12 = v10 & 0xFFFFFFFFFFFFFELL;
    do
    {
      v9 = v9 + *(double *)(v11 + 512) + *(double *)(v11 + 1056);
      v11 += 1088;
      v12 -= 2;
    }
    while (v12);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFELL))
    {
      v6 += 544 * (v10 & 0xFFFFFFFFFFFFFELL);
      do
      {
LABEL_12:
        v9 = v9 + *(double *)(v6 + 512);
        v6 += 544;
      }
      while (v6 != v7);
    }
  }
  else
  {
    v9 = 0.0;
    do
    {
      v17 = (float64x2_t *)(v6 + 416);
      v18 = *(float64x2_t **)(v6 + 400);
      v20 = *(float64x2_t *)(v6 + 272);
      v19 = *(float64x2_t *)(v6 + 288);
      v22 = *(float64x2_t *)(v6 + 304);
      v21 = *(float64x2_t *)(v6 + 320);
      v24 = *(float64x2_t *)(v6 + 336);
      v23 = *(float64x2_t *)(v6 + 352);
      v4.f64[0] = *(float64_t *)(*(_QWORD *)(v6 + 408) + 16);
      v25 = vmulq_n_f64(*(float64x2_t *)(v6 + 368), v4.f64[0]);
      *(_QWORD *)&v26.f64[0] = *(_OWORD *)&vmulq_f64(*(float64x2_t *)(v6 + 384), v4);
      v26.f64[1] = *(float64_t *)(v6 + 392);
      v28 = *(float64x2_t *)(v6 + 144);
      v27 = *(float64x2_t *)(v6 + 160);
      v30 = *(float64x2_t *)(v6 + 176);
      v29 = *(float64x2_t *)(v6 + 192);
      v32 = *(float64x2_t *)(v6 + 208);
      v31 = *(float64x2_t *)(v6 + 224);
      v34 = *(float64x2_t *)(v6 + 240);
      v33 = *(float64x2_t *)(v6 + 256);
      v35 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v28.f64[0]), v22, v28, 1), v24, v27.f64[0]), v25, v27, 1);
      v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v28.f64[0]), v21, v28, 1), v23, v27.f64[0]), v26, v27, 1);
      v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v30.f64[0]), v22, v30, 1), v24, v29.f64[0]), v25, v29, 1);
      v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v30.f64[0]), v21, v30, 1), v23, v29.f64[0]), v26, v29, 1);
      v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v32.f64[0]), v22, v32, 1), v24, v31.f64[0]), v25, v31, 1);
      v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v32.f64[0]), v21, v32, 1), v23, v31.f64[0]), v26, v31, 1);
      v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v34.f64[0]), v22, v34, 1), v24, v33.f64[0]), v25, v33, 1);
      v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v34.f64[0]), v21, v34, 1), v23, v33.f64[0]), v26, v33, 1);
      v44 = v18[1];
      v43 = v18[2];
      v46 = v18[3];
      v45 = v18[4];
      v48 = v18[5];
      v47 = v18[6];
      v50 = v18[7];
      v49 = v18[8];
      v51 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, v44.f64[0]), v37, v44, 1), v39, v43.f64[0]), v41, v43, 1);
      v52 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v44.f64[0]), v38, v44, 1), v40, v43.f64[0]), v42, v43, 1);
      v53 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, v46.f64[0]), v37, v46, 1), v39, v45.f64[0]), v41, v45, 1);
      *(_QWORD *)&v44.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v46.f64[0]), v38, v46, 1), v40, v45.f64[0]), v42, v45, 1);
      v54 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, v48.f64[0]), v37, v48, 1), v39, v47.f64[0]), v41, v47, 1);
      v46.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v48.f64[0]), v38, v48, 1), v40, v47.f64[0]), v42, v47, 1).f64[0];
      v55 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, v50.f64[0]), v37, v50, 1), v39, v49.f64[0]), v41, v49, 1);
      *(_QWORD *)&v36.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v50.f64[0]), v38, v50, 1), v40, v49.f64[0]), v42, v49, 1);
      v37.f64[0] = v51.f64[0] + -1.0;
      v38.f64[0] = *(double *)&v53.i64[1] + -1.0;
      v38.f64[1] = v44.f64[0];
      v37.f64[1] = v51.f64[1];
      *(double *)(v6 + 480) = v46.f64[0] + -1.0;
      *(float64x2_t *)(v6 + 416) = v37;
      *(int64x2_t *)(v6 + 432) = vzip1q_s64(v52, v53);
      *(float64x2_t *)(v6 + 448) = v38;
      *(float64x2_t *)(v6 + 464) = v54;
      *(float64x2_t *)(v6 + 488) = v55;
      *(float64_t *)(v6 + 504) = v36.f64[0];
      v56 = *(_QWORD *)(v6 + 520);
      if (v56)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 24))(v56, v6 + 416);
      _Q4 = *(float64x2_t *)(v6 + 480);
      _Q5 = *(float64x2_t *)(v6 + 496);
      _Q2 = *(float64x2_t *)(v6 + 448);
      _Q3 = *(float64x2_t *)(v6 + 464);
      _Q0 = *v17;
      _Q1 = *(float64x2_t *)(v6 + 432);
      _D7 = *(_QWORD *)(v6 + 424);
      __asm { FMLA            D6, D7, V0.D[1] }
      _D7 = _Q1.f64[1];
      __asm { FMLA            D6, D7, V1.D[1] }
      _D7 = _Q2.f64[1];
      __asm { FMLA            D6, D7, V2.D[1] }
      _D7 = _Q3.f64[1];
      __asm { FMLA            D6, D7, V3.D[1] }
      _D7 = _Q4.f64[1];
      __asm { FMLA            D6, D7, V4.D[1] }
      _D7 = _Q5.f64[1];
      __asm { FMLA            D6, D7, V5.D[1] }
      v79 = *(double *)(a1 + 16) * _D6;
      v80 = *(double *)(a1 + 32);
      v81 = 1.0;
      if (v79 > v80)
      {
        v82 = sqrt(v79);
        v79 = -(v80 - *(double *)(a1 + 40) * v82);
        v81 = *(double *)(a1 + 24) / v82;
      }
      *(double *)(v6 + 512) = v79;
      v16 = sqrt(v81);
      *(_QWORD *)&_Q5.f64[1] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
      *(_QWORD *)&_Q4.f64[1] = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
      *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
      *(_QWORD *)&_Q2.f64[1] = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
      v4 = vmulq_n_f64(_Q2, v16);
      *(_QWORD *)&_Q1.f64[1] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
      *(_QWORD *)&_Q0.f64[1] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
      *v17 = vmulq_n_f64(_Q0, v16);
      *(float64x2_t *)(v6 + 432) = vmulq_n_f64(_Q1, v16);
      *(float64x2_t *)(v6 + 448) = v4;
      *(float64x2_t *)(v6 + 464) = vmulq_n_f64(_Q3, v16);
      *(float64x2_t *)(v6 + 480) = vmulq_n_f64(_Q4, v16);
      *(float64x2_t *)(v6 + 496) = vmulq_n_f64(_Q5, v16);
      v9 = v9 + v79;
      v6 += 544;
    }
    while (v6 != v7);
  }
LABEL_15:
  **(double **)a2 = v9 * 0.5;
  *(_BYTE *)(a1 + 299) = 1;
  v13 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v14 = **(double **)a2;
  kdebug_trace();
  return v13 + v14;
}

void sub_239C93F48(_Unwind_Exception *a1)
{
  sub_239C302B4();
  _Unwind_Resume(a1);
}

void sub_239C93F68()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239C93F7C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFC8B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239C93FB4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFC8B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239C93FD4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 312) = *(_BYTE *)(result + 16);
  return result;
}

void sub_239C93FE4(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v5, "SparseHessian");
  v4 = 8;
  strcpy((char *)__p, "Cholesky");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 8uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_239C940A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239C940DC(uint64_t a1)
{
  int64x2_t *v2;
  unsigned int v3;
  unint64_t v4;
  float64x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  _QWORD **v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  _DWORD *v46;
  int v47;
  int v48;
  _DWORD *v49;
  int v50;
  unsigned int v51;
  _DWORD *v52;
  int v53;
  int v54;
  _BYTE *v55;
  _BYTE *v56;
  int64_t v57;
  char *v58;
  _BYTE *v59;
  _BYTE *v60;
  int64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  _QWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  int v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  float64_t v89;
  __int128 v90;
  int64x2_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int64x2_t *v94;
  _QWORD *v95;
  _QWORD *v96;
  _DWORD *v98;
  _DWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int *v106;
  int v107;
  int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  float64x2_t *v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  unsigned int *v117;
  unsigned int *v118;
  int v119;
  int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  float64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  unsigned int v134;
  int v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  __int128 v157;
  float64x2_t *v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  int64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  __int128 v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  double v197;
  float64x2_t v198;
  float64x2_t v199;
  uint64_t v200;
  double v222;
  double v223;
  double v224;
  double v225;
  float64x2_t v226;
  void **v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  unint64_t *v233;
  uint64_t v234;
  char *v235;
  char *v236;
  double *v237;
  unint64_t *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  float64x2_t *v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  unint64_t *v354;
  uint64_t v355;
  char *v356;
  char *v357;
  float64x2_t *v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t *v374;
  float64x2_t v375;
  float64x2_t v376;
  uint64_t v377;
  std::bad_alloc *exception;
  std::bad_alloc *v398;
  uint64_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  unsigned int v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  uint64_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  _QWORD *v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  char **v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  void *v429;
  char *v430;
  char *v431;
  void *v432;
  void *v433;
  char *v434;
  void *v435[3];
  void *v436[3];
  void *v437[3];
  unsigned int v438[4];
  void *v439;
  uint64_t v440;
  uint64_t v441;
  void *v442;
  uint64_t v443;
  int32x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  std::mutex v448;
  _BYTE memptr[64];
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  _BYTE v459[32];
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  _BYTE v467[32];
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  _BYTE v472[32];
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  _BYTE v477[32];
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  _BYTE v482[32];
  void **v483;
  void **v484;
  void **v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;

  v488 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v2 = (int64x2_t *)(a1 + 48);
  v3 = sub_239C8746C(a1 + 48);
  v4 = sub_239C87AB0(a1 + 48);
  if (((*(_QWORD *)(a1 + 744) - *(_QWORD *)(a1 + 736)) >> 2)
     + ((*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 2)
    || (v6 = 1, v3) && v4 >= v3)
  {
    v7 = a1 + 608;
    v425 = (char **)(a1 + 712);
    v417 = a1;
    if (*(_BYTE *)(a1 + 144))
    {
LABEL_94:
      if (*(_BYTE *)(a1 + 297))
      {
        v6 = 0;
        goto LABEL_213;
      }
      v67 = *(_QWORD *)(a1 + 392);
      v68 = *(void **)(v67 + 16);
      v69 = *(_QWORD *)(v67 + 24) - (_QWORD)v68;
      if (v69 >= 1)
        bzero(v68, 8 * (((unint64_t)v69 >> 3) - ((unint64_t)v69 > 7)) + 8);
      v70 = *(_QWORD *)(a1 + 400);
      v71 = *(void **)(v70 + 16);
      v72 = *(_QWORD *)(v70 + 24) - (_QWORD)v71;
      if (v72 >= 1)
        bzero(v71, 8 * (((unint64_t)v72 >> 3) - ((unint64_t)v72 > 7)) + 8);
      v73 = *(_QWORD *)(a1 + 376);
      v74 = *(void **)(v73 + 16);
      v75 = *(_QWORD *)(v73 + 24) - (_QWORD)v74;
      if (v75 >= 1)
        bzero(v74, 8 * (((unint64_t)v75 >> 3) - ((unint64_t)v75 > 7)) + 8);
      v76 = *(_QWORD *)(a1 + 384);
      v77 = *(void **)(v76 + 16);
      v78 = *(_QWORD *)(v76 + 24) - (_QWORD)v77;
      if (v78 >= 1)
        bzero(v77, 8 * (((unint64_t)v78 >> 3) - ((unint64_t)v78 > 7)) + 8);
      v79 = *(unsigned int *)(a1 + 352);
      if ((_DWORD)v79)
        bzero(*(void **)(a1 + 336), 8 * v79);
      if (((*(_QWORD *)(a1 + 744) - *(_QWORD *)(a1 + 736)) >> 2)
         + ((*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 2))
      {
        kdebug_trace();
        sub_239C80714((_QWORD *)(a1 + 336), (_QWORD *)(a1 + 640));
        v80 = (8
             * (((*(_QWORD *)(a1 + 744) - *(_QWORD *)(a1 + 736)) >> 2)
              + 6 * ((*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 2))
             + 31) & 0xFFFFFFFE0;
        *(_QWORD *)memptr = 0;
        malloc_type_posix_memalign((void **)memptr, 0x20uLL, v80, 0x100BBD03uLL);
        v81 = *(_QWORD **)memptr;
        if (!*(_QWORD *)memptr)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v398 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v398, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        v82 = *(_DWORD **)(a1 + 712);
        v83 = *(_DWORD **)(a1 + 720);
        if (v82 == v83)
        {
          v84 = 0;
        }
        else
        {
          v84 = 0;
          v85 = *(_QWORD **)(a1 + 56);
          do
          {
            if (*((_DWORD *)v85 + 8) != *v82)
            {
              v95 = v85;
              do
              {
                v96 = (_QWORD *)v95[1];
                if (v96)
                {
                  do
                  {
                    v85 = v96;
                    v96 = (_QWORD *)*v96;
                  }
                  while (v96);
                }
                else
                {
                  do
                  {
                    v85 = (_QWORD *)v95[2];
                    _ZF = *v85 == (_QWORD)v95;
                    v95 = v85;
                  }
                  while (!_ZF);
                }
                v95 = v85;
              }
              while (*((_DWORD *)v85 + 8) != *v82);
            }
            v86 = v85[9];
            v87 = v85[13];
            v88 = *(_OWORD *)(v85 + 11);
            v89 = *((double *)v85 + 17);
            v90 = *(_OWORD *)(v85 + 15);
            *(_OWORD *)memptr = *(_OWORD *)(v85 + 7);
            *(_OWORD *)&memptr[24] = v88;
            *(_QWORD *)&memptr[16] = v86;
            *(_QWORD *)&memptr[40] = v87;
            *(_OWORD *)&memptr[48] = v90;
            v450.f64[0] = v89;
            v446.f64[0] = 0.0;
            v445 = 0uLL;
            sub_239458B60((float64x2_t *)memptr, v445.f64);
            v91.i64[0] = *(_QWORD *)&v446.f64[0];
            v92.i64[0] = v85[21];
            v93 = *(int8x16_t *)(v85 + 19);
            v94 = (int64x2_t *)&v81[v84];
            *v94 = (int64x2_t)v445;
            v94[1] = vzip1q_s64(v91, (int64x2_t)v93);
            v94[2] = (int64x2_t)vextq_s8(v93, v92, 8uLL);
            v84 += 6;
            ++v82;
          }
          while (v82 != v83);
        }
        v98 = *(_DWORD **)(a1 + 736);
        v99 = *(_DWORD **)(a1 + 744);
        if (v98 == v99)
        {
          v103 = *(_QWORD *)(a1 + 736);
        }
        else
        {
          v100 = *(_QWORD **)(a1 + 80);
          do
          {
            if (*((_DWORD *)v100 + 8) == *v98)
            {
              v101 = v100;
            }
            else
            {
              do
              {
                v102 = (_QWORD *)v100[1];
                if (v102)
                {
                  do
                  {
                    v101 = v102;
                    v102 = (_QWORD *)*v102;
                  }
                  while (v102);
                }
                else
                {
                  do
                  {
                    v101 = (_QWORD *)v100[2];
                    _ZF = *v101 == (_QWORD)v100;
                    v100 = v101;
                  }
                  while (!_ZF);
                }
                v100 = v101;
              }
              while (*((_DWORD *)v101 + 8) != *v98);
            }
            v81[v84++] = v101[7];
            ++v98;
            v100 = v101;
          }
          while (v98 != v99);
          v103 = *(_QWORD *)(a1 + 744);
          v98 = *(_DWORD **)(a1 + 736);
        }
        if (((unint64_t)(v103 - (_QWORD)v98) >> 2)
           + ((*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 2))
        {
          v442 = 0;
          v443 = 0;
          v444 = 0;
          sub_239C7B3A8((_QWORD *)(a1 + 680), (uint64_t)&v442);
          sub_239C1BE20((uint64_t *)&v442);
          v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
          LODWORD(v445.f64[0]) = 0;
          v439 = 0;
          v440 = 0;
          LODWORD(v441) = *(_DWORD *)(a1 + 632);
          sub_23945215C((uint64_t)&v439, v441);
          if ((_DWORD)v441)
            bzero(v439, 8 * v441);
          *(_QWORD *)memptr = v104;
          *(_QWORD *)&memptr[8] = v425;
          sub_239C7B188(memptr, (uint64_t *)(a1 + 616), &v439, &v445);
          v105 = *(unsigned int **)(a1 + 712);
          v106 = *(unsigned int **)(a1 + 720);
          if (v105 != v106)
          {
            v107 = 0;
            v108 = 0;
            v109 = *(unsigned int **)(v417 + 408);
            do
            {
              if (*v109 < *v105)
              {
                do
                {
                  v110 = v109[1];
                  ++v109;
                  ++v107;
                }
                while (v110 < *v105);
              }
              v111 = *(_DWORD *)(v417 + 672) + 6 * v108;
              v429 = (void *)vrev64_s32(v444);
              v430 = (char *)v442 + 8 * v111;
              LODWORD(v431) = v111;
              v112 = (float64x2_t *)(*(_QWORD *)(v417 + 336) + 8 * (*(_DWORD *)(v417 + 368) + 6 * v107));
              v113 = *v112;
              v114 = v112[2];
              v446 = v112[1];
              v447 = v114;
              v445 = v113;
              *(_QWORD *)memptr = &v445;
              v484 = &v429;
              v485 = &v439;
              v486 = 0x3FF0000000000000;
              sub_239C86C4C((uint64_t)&memptr[8], (uint64_t)&v483);
              v115 = vsubq_f64(**(float64x2_t **)memptr, *(float64x2_t *)&memptr[8]);
              v116 = vsubq_f64(*(float64x2_t *)(*(_QWORD *)memptr + 32), *(float64x2_t *)&memptr[40]);
              v112[1] = vsubq_f64(*(float64x2_t *)(*(_QWORD *)memptr + 16), *(float64x2_t *)&memptr[24]);
              v112[2] = v116;
              *v112 = v115;
              ++v105;
              ++v108;
            }
            while (v105 != v106);
          }
          a1 = v417;
          v117 = *(unsigned int **)(v417 + 736);
          v118 = *(unsigned int **)(v417 + 744);
          if (v117 != v118)
          {
            v119 = 0;
            v120 = 0;
            v121 = *(unsigned int **)(v417 + 432);
            do
            {
              if (*v121 < *v117)
              {
                do
                {
                  v122 = v121[1];
                  ++v121;
                  ++v119;
                }
                while (v122 < *v117);
              }
              v123 = *(_DWORD *)(a1 + 676) + v120;
              v483 = (void **)vrev64_s32(v444);
              v484 = (void **)((char *)v442 + 8 * v123);
              LODWORD(v485) = v123;
              v124 = (*(_DWORD *)(a1 + 372) + v119);
              v125 = *(_QWORD *)(a1 + 336);
              v429 = *(void **)(v125 + 8 * v124);
              *(_QWORD *)&v445.f64[0] = &v429;
              *(_QWORD *)&memptr[8] = &v483;
              *(_QWORD *)&memptr[16] = &v439;
              *(_QWORD *)&memptr[24] = 0x3FF0000000000000;
              sub_239C86D04(&v445.f64[1], (uint64_t)memptr);
              *(double *)(v125 + 8 * v124) = **(double **)&v445.f64[0] - v445.f64[1];
              ++v117;
              ++v120;
              a1 = v417;
            }
            while (v117 != v118);
          }
          free(v439);
          free(v442);
        }
        free(v81);
        kdebug_trace();
      }
      v126 = *(double *)(a1 + 464);
      v445.f64[0] = *(float64_t *)(a1 + 456);
      *(_QWORD *)&v445.f64[1] = a1 + 512;
      *(_QWORD *)&v446.f64[0] = a1 + 8;
      v446.f64[1] = v126;
      v413 = v126;
      v447.f64[0] = 0.0;
      LODWORD(v447.f64[1]) = 2;
      memset(v448.__m_.__opaque, 0, sizeof(v448.__m_.__opaque));
      v448.__m_.__sig = 850045863;
      v128 = *(_QWORD *)(*(_QWORD *)&v445.f64[0] + 56);
      v127 = *(_QWORD *)(*(_QWORD *)&v445.f64[0] + 64);
      if (v128 == v127)
      {
LABEL_212:
        std::mutex::~mutex(&v448);
        v6 = 0;
        *(_WORD *)(v417 + 297) = 1;
        goto LABEL_213;
      }
      v399 = *(_QWORD *)(*(_QWORD *)&v445.f64[0] + 64);
      while (1)
      {
        v130 = *(_QWORD *)(v128 + 400);
        v129 = *(_QWORD *)(v128 + 408);
        if (((*(unsigned __int8 *)(v129 + 28) >> 2) & 1) == (char)(32 * *(_BYTE *)(v130 + 148)) >> 7)
          v131 = 2;
        else
          v131 = 1;
        if ((v131 & LODWORD(v447.f64[1])) == 0)
          goto LABEL_153;
        v132 = *(unsigned __int8 *)(v130 + 4);
        if (*(_BYTE *)(v130 + 4))
        {
          if (*(_DWORD *)(v130 + 144) == -1)
            goto LABEL_153;
        }
        v133 = *(unsigned __int8 *)(v129 + 4);
        if (*(_BYTE *)(v129 + 4))
        {
          if (*(_DWORD *)(v129 + 24) == -1)
            goto LABEL_153;
        }
        if (*(_BYTE *)(v130 + 4))
        {
          v134 = *(_DWORD *)(**(_QWORD **)&v445.f64[1] + 4 * *(unsigned int *)(v130 + 144));
          if (*(_BYTE *)(v129 + 4))
            goto LABEL_164;
        }
        else
        {
          v134 = -1;
          if (*(_BYTE *)(v129 + 4))
          {
LABEL_164:
            v135 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v445.f64[1] + 24) + 4 * *(unsigned int *)(v129 + 24));
            goto LABEL_167;
          }
        }
        v135 = -1;
LABEL_167:
        v404 = v135;
        v418 = *(float64x2_t *)(v128 + 272);
        v422 = *(float64x2_t *)(v128 + 304);
        v426 = *(float64x2_t *)(v128 + 336);
        v5.f64[0] = *(float64_t *)(v129 + 16);
        v414 = vmulq_n_f64(*(float64x2_t *)(v128 + 368), v5.f64[0]);
        v137 = *(float64x2_t *)(v128 + 144);
        v136 = *(float64x2_t *)(v128 + 160);
        v139 = *(float64x2_t *)(v128 + 176);
        v138 = *(float64x2_t *)(v128 + 192);
        v141 = *(float64x2_t *)(v128 + 208);
        v140 = *(float64x2_t *)(v128 + 224);
        v143 = *(float64x2_t *)(v128 + 240);
        v142 = *(float64x2_t *)(v128 + 256);
        v144 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v137.f64[0]), v422, v137, 1), v426, v136.f64[0]), v414, v136, 1);
        v145 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v139.f64[0]), v422, v139, 1), v426, v138.f64[0]), v414, v138, 1);
        v146 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v141.f64[0]), v422, v141, 1), v426, v140.f64[0]), v414, v140, 1);
        v147 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v143.f64[0]), v422, v143, 1), v426, v142.f64[0]), v414, v142, 1);
        v149 = *(float64x2_t *)(v130 + 16);
        v148 = *(float64x2_t *)(v130 + 32);
        v151 = *(float64x2_t *)(v130 + 48);
        v150 = *(float64x2_t *)(v130 + 64);
        v153 = *(float64x2_t *)(v130 + 80);
        v152 = *(float64x2_t *)(v130 + 96);
        v155 = *(float64x2_t *)(v130 + 112);
        v154 = *(float64x2_t *)(v130 + 128);
        v156 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v144, v149.f64[0]), v145, v149, 1), v146, v148.f64[0]), v147, v148, 1);
        *(double *)&v157 = v156.f64[0] + -1.0;
        *((_QWORD *)&v157 + 1) = *(_QWORD *)&v156.f64[1];
        *(_OWORD *)(v128 + 416) = v157;
        v158 = (float64x2_t *)(v128 + 416);
        *(_QWORD *)&v159.f64[0] = *(_OWORD *)&vmulq_f64(*(float64x2_t *)(v128 + 384), v5);
        v159.f64[1] = *(float64_t *)(v128 + 392);
        v405 = *(float64x2_t *)(v128 + 288);
        v408 = *(float64x2_t *)(v128 + 320);
        v411 = *(float64x2_t *)(v128 + 352);
        v160 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v405, v137.f64[0]), v408, v137, 1), v411, v136.f64[0]), v159, v136, 1);
        v161 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v405, v139.f64[0]), v408, v139, 1), v411, v138.f64[0]), v159, v138, 1);
        v162 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v405, v141.f64[0]), v408, v141, 1), v411, v140.f64[0]), v159, v140, 1);
        v163 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v405, v143.f64[0]), v408, v143, 1), v411, v142.f64[0]), v159, v142, 1);
        v164 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v144, v151.f64[0]), v145, v151, 1), v146, v150.f64[0]), v147, v150, 1);
        *(_QWORD *)&v141.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v160, v151.f64[0]), v161, v151, 1), v162, v150.f64[0]), v163, v150, 1);
        v165 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v144, v153.f64[0]), v145, v153, 1), v146, v152.f64[0]), v147, v152, 1);
        v166 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v144, v155.f64[0]), v145, v155, 1), v146, v154.f64[0]), v147, v154, 1);
        v146.f64[0] = *(double *)&v164.i64[1] + -1.0;
        v146.f64[1] = v141.f64[0];
        *(float64x2_t *)(v128 + 448) = v146;
        *(float64x2_t *)(v128 + 464) = v165;
        *(int64x2_t *)(v128 + 432) = vzip1q_s64((int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v160, v149.f64[0]), v161, v149, 1), v162, v148.f64[0]), v163, v148, 1), v164);
        *(double *)(v128 + 480) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v160, v153.f64[0]), v161, v153, 1), v162, v152.f64[0]), v163, v152, 1).f64[0]+ -1.0;
        *(float64x2_t *)(v128 + 488) = v166;
        *(_QWORD *)(v128 + 504) = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v160, v155.f64[0]), v161, v155, 1), v162, v154.f64[0]), v163, v154, 1);
        v483 = 0;
        sub_239C82B60(memptr, &v483);
        *(_QWORD *)v482 = 0;
        v480 = 0u;
        v481 = 0u;
        v478 = 0u;
        v479 = 0u;
        v168 = *(float64x2_t *)(v128 + 144);
        v167 = *(float64x2_t *)(v128 + 160);
        v170 = *(float64x2_t *)(v128 + 176);
        v169 = *(float64x2_t *)(v128 + 192);
        v172 = *(float64x2_t *)(v128 + 208);
        v171 = *(float64x2_t *)(v128 + 224);
        v5.f64[1] = v405.f64[1];
        *(float64x2_t *)&v467[8] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v168.f64[0]), v422, v168, 1), v426, v167.f64[0]), v414, v167, 1);
        *(_QWORD *)&v467[24] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v405, v168.f64[0]), v408, v168, 1), v411, v167.f64[0]), v159, v167, 1);
        *(float64x2_t *)&v472[8] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v170.f64[0]), v422, v170, 1), v426, v169.f64[0]), v414, v169, 1);
        *(_QWORD *)&v472[24] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v405, v170.f64[0]), v408, v170, 1), v411, v169.f64[0]), v159, v169, 1);
        *(float64x2_t *)&v477[8] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v172.f64[0]), v422, v172, 1), v426, v171.f64[0]), v414, v171, 1);
        *(_QWORD *)&v477[24] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v405, v172.f64[0]), v408, v172, 1), v411, v171.f64[0]), v159, v171, 1);
        v173 = *(_OWORD *)(v128 + 368);
        *(_QWORD *)&v482[24] = *(_QWORD *)(v128 + 384);
        *(_OWORD *)&v482[8] = v173;
        v175 = *(float64x2_t *)(v128 + 144);
        v174 = *(float64x2_t *)(v128 + 160);
        v177 = *(float64x2_t *)(v128 + 176);
        v176 = *(float64x2_t *)(v128 + 192);
        v179 = *(float64x2_t *)(v128 + 208);
        v178 = *(float64x2_t *)(v128 + 224);
        v181 = *(float64x2_t *)(v128 + 240);
        v180 = *(float64x2_t *)(v128 + 256);
        v182 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v175.f64[0]), v422, v175, 1), v426, v174.f64[0]), v414, v174, 1);
        v183 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v405, v175.f64[0]), v408, v175, 1), v411, v174.f64[0]), v159, v174, 1);
        v184 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v177.f64[0]), v422, v177, 1), v426, v176.f64[0]), v414, v176, 1);
        v185 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v405, v177.f64[0]), v408, v177, 1), v411, v176.f64[0]), v159, v176, 1);
        v186 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v179.f64[0]), v422, v179, 1), v426, v178.f64[0]), v414, v178, 1);
        v187 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v405, v179.f64[0]), v408, v179, 1), v411, v178.f64[0]), v159, v178, 1);
        v188 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v181.f64[0]), v422, v181, 1), v426, v180.f64[0]), v414, v180, 1);
        v189 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v405, v181.f64[0]), v408, v181, 1), v411, v180.f64[0]), v159, v180, 1);
        v191 = *(float64x2_t *)(v130 + 16);
        v190 = *(float64x2_t *)(v130 + 32);
        v193 = *(float64x2_t *)(v130 + 48);
        v192 = *(float64x2_t *)(v130 + 64);
        v195 = *(float64x2_t *)(v130 + 80);
        v194 = *(float64x2_t *)(v130 + 96);
        v196 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v182, v191.f64[0]), v184, v191, 1), v186, v190.f64[0]), v188, v190, 1);
        v197 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v183, v191.f64[0]), v185, v191, 1), v187, v190.f64[0]), v189, v190, 1).f64[0];
        v198 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v182, v193.f64[0]), v184, v193, 1), v186, v192.f64[0]), v188, v192, 1);
        v199 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v182, v195.f64[0]), v184, v195, 1), v186, v194.f64[0]), v188, v194, 1);
        v452 = vnegq_f64(v199);
        v458 = v198;
        *(float64x2_t *)&memptr[24] = v199;
        *(float64x2_t *)&v459[8] = vnegq_f64(v196);
        *(double *)v459 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v183, v193.f64[0]), v185, v193, 1), v187, v192.f64[0]), v189, v192, 1).f64[0];
        *(double *)&v459[24] = -v197;
        *(float64x2_t *)&memptr[48] = vnegq_f64(v198);
        *(double *)&memptr[40] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v183, v195.f64[0]), v185, v195, 1), v187, v194.f64[0]), v189, v194, 1).f64[0];
        v450.f64[0] = -*(double *)v459;
        v455 = v196;
        v453.f64[0] = -*(double *)&memptr[40];
        v456.f64[0] = v197;
        v200 = *(_QWORD *)(v128 + 520);
        if (v200)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v200 + 24))(v200, v128 + 416);
        _Q4 = *(float64x2_t *)(v128 + 480);
        _Q6 = *(float64x2_t *)(v128 + 496);
        _Q2 = *(float64x2_t *)(v128 + 448);
        _Q5 = *(float64x2_t *)(v128 + 464);
        _Q1 = *v158;
        _Q3 = *(float64x2_t *)(v128 + 432);
        _D7 = *(_QWORD *)(v128 + 424);
        __asm { FMLA            D0, D7, V1.D[1] }
        _D7 = _Q3.f64[1];
        __asm { FMLA            D0, D7, V3.D[1] }
        _D7 = _Q2.f64[1];
        __asm { FMLA            D0, D7, V2.D[1] }
        _D7 = _Q5.f64[1];
        __asm { FMLA            D0, D7, V5.D[1] }
        _D7 = _Q4.f64[1];
        __asm { FMLA            D0, D7, V4.D[1] }
        _D7 = _Q6.f64[1];
        __asm { FMLA            D0, D7, V6.D[1] }
        v222 = *(double *)(v417 + 16) * _D0;
        v223 = *(double *)(v417 + 32);
        v224 = 1.0;
        if (v222 > v223)
        {
          v225 = sqrt(v222);
          v222 = -(v223 - *(double *)(v417 + 40) * v225);
          v224 = *(double *)(v417 + 24) / v225;
        }
        *(double *)(v128 + 512) = v222;
        *(_QWORD *)&_Q6.f64[1] = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
        v226.f64[0] = sqrt(v224);
        *(_QWORD *)&_Q4.f64[1] = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
        *(_QWORD *)&_Q5.f64[1] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
        *(_QWORD *)&_Q2.f64[1] = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
        *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
        *(_QWORD *)&_Q1.f64[1] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
        *v158 = vmulq_n_f64(_Q1, v226.f64[0]);
        *(float64x2_t *)(v128 + 432) = vmulq_n_f64(_Q3, v226.f64[0]);
        *(float64x2_t *)(v128 + 448) = vmulq_n_f64(_Q2, v226.f64[0]);
        *(float64x2_t *)(v128 + 464) = vmulq_n_f64(_Q5, v226.f64[0]);
        *(float64x2_t *)(v128 + 480) = vmulq_n_f64(_Q4, v226.f64[0]);
        *(float64x2_t *)(v128 + 496) = vmulq_n_f64(_Q6, v226.f64[0]);
        v227 = *(void ***)(v128 + 520);
        if (v227)
        {
          v429 = *(void **)&v226.f64[0];
          v483 = (void **)memptr;
          v484 = v227;
          LODWORD(v485) = (*((uint64_t (**)(void **))*v227 + 2))(v227);
          v486 = v128 + 400;
          sub_239C976DC((uint64_t)&v483);
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)(v128 + 400) + 4))
          {
            *(float64x2_t *)v477 = vmulq_n_f64(*(float64x2_t *)v477, v226.f64[0]);
            *(float64x2_t *)&v477[16] = vmulq_n_f64(*(float64x2_t *)&v477[16], v226.f64[0]);
            v475 = vmulq_n_f64(v475, v226.f64[0]);
            v476 = vmulq_n_f64(v476, v226.f64[0]);
            v473 = vmulq_n_f64(v473, v226.f64[0]);
            v474 = vmulq_n_f64(v474, v226.f64[0]);
            *(float64x2_t *)v472 = vmulq_n_f64(*(float64x2_t *)v472, v226.f64[0]);
            *(float64x2_t *)&v472[16] = vmulq_n_f64(*(float64x2_t *)&v472[16], v226.f64[0]);
            v470 = vmulq_n_f64(v470, v226.f64[0]);
            v471 = vmulq_n_f64(v471, v226.f64[0]);
            v468 = vmulq_n_f64(v468, v226.f64[0]);
            v469 = vmulq_n_f64(v469, v226.f64[0]);
            *(float64x2_t *)v467 = vmulq_n_f64(*(float64x2_t *)v467, v226.f64[0]);
            *(float64x2_t *)&v467[16] = vmulq_n_f64(*(float64x2_t *)&v467[16], v226.f64[0]);
            v465 = vmulq_n_f64(v465, v226.f64[0]);
            v466 = vmulq_n_f64(v466, v226.f64[0]);
            v463 = vmulq_n_f64(v463, v226.f64[0]);
            v464 = vmulq_n_f64(v464, v226.f64[0]);
            v461 = vmulq_n_f64(v461, v226.f64[0]);
            v462 = vmulq_n_f64(v462, v226.f64[0]);
            *(float64x2_t *)&v459[16] = vmulq_n_f64(*(float64x2_t *)&v459[16], v226.f64[0]);
            v460 = vmulq_n_f64(v460, v226.f64[0]);
            v458 = vmulq_n_f64(v458, v226.f64[0]);
            *(float64x2_t *)v459 = vmulq_n_f64(*(float64x2_t *)v459, v226.f64[0]);
            v456 = vmulq_n_f64(v456, v226.f64[0]);
            v457 = vmulq_n_f64(v457, v226.f64[0]);
            v454 = vmulq_n_f64(v454, v226.f64[0]);
            v455 = vmulq_n_f64(v455, v226.f64[0]);
            v452 = vmulq_n_f64(v452, v226.f64[0]);
            v453 = vmulq_n_f64(v453, v226.f64[0]);
            v450 = vmulq_n_f64(v450, v226.f64[0]);
            v451 = vmulq_n_f64(v451, v226.f64[0]);
            *(float64x2_t *)&memptr[32] = vmulq_n_f64(*(float64x2_t *)&memptr[32], v226.f64[0]);
            *(float64x2_t *)&memptr[48] = vmulq_n_f64(*(float64x2_t *)&memptr[48], v226.f64[0]);
            *(float64x2_t *)memptr = vmulq_n_f64(*(float64x2_t *)memptr, v226.f64[0]);
            *(float64x2_t *)&memptr[16] = vmulq_n_f64(*(float64x2_t *)&memptr[16], v226.f64[0]);
          }
          if (*(_BYTE *)(*(_QWORD *)(v128 + 408) + 4))
          {
            v228.f64[0] = v226.f64[0];
            v228.f64[1] = v226.f64[0];
            v229 = vmulq_f64(v228, *(float64x2_t *)&v482[16]);
            v228.f64[0] = v226.f64[0];
            v228.f64[1] = v226.f64[0];
            v230 = vmulq_f64(v228, *(float64x2_t *)v482);
            v228.f64[0] = v226.f64[0];
            v228.f64[1] = v226.f64[0];
            v231 = vmulq_f64(v228, v481);
            v228.f64[0] = v226.f64[0];
            v228.f64[1] = v226.f64[0];
            v232 = vmulq_f64(v228, v480);
            v228.f64[0] = v226.f64[0];
            v228.f64[1] = v226.f64[0];
            v226.f64[1] = v226.f64[0];
            v478 = vmulq_f64(v226, v478);
            v479 = vmulq_f64(v228, v479);
            v480 = v232;
            v481 = v231;
            *(float64x2_t *)v482 = v230;
            *(float64x2_t *)&v482[16] = v229;
          }
        }
        if (v133)
        {
          v233 = *(unint64_t **)(*(_QWORD *)&v413 + 64);
          v234 = v233[11] + 24 * v404;
          v236 = *(char **)v234;
          v235 = *(char **)(v234 + 8);
          if (*(char **)v234 != v235)
          {
            while (*(_DWORD *)v236 < v404)
            {
              v236 += 16;
              if (v236 == v235)
                goto LABEL_186;
            }
          }
          if (v236 != v235)
          {
            if (*(_DWORD *)v236 == v404)
            {
              v237 = (double *)(v233[2] + 8 * *((_QWORD *)v236 + 1));
LABEL_187:
              _V5.D[1] = v478.f64[1];
              _D7 = v478.f64[1];
              __asm { FMLA            D6, D7, V5.D[1] }
              _D5 = v479.f64[1];
              __asm { FMLA            D6, D5, V4.D[1] }
              _D4 = v480.f64[1];
              __asm { FMLA            D6, D4, V3.D[1] }
              _D3 = v481.f64[1];
              __asm { FMLA            D6, D3, V2.D[1] }
              _D2 = *(_QWORD *)&v482[8];
              __asm { FMLA            D6, D2, V1.D[1] }
              _D1 = *(_QWORD *)&v482[24];
              __asm { FMLA            D6, D1, V0.D[1] }
              *v237 = *v237 + _D6;
              goto LABEL_188;
            }
            v235 = v236;
          }
LABEL_186:
          v237 = (double *)sub_239C82854(v233, (char **)v234, v404, v235);
          goto LABEL_187;
        }
LABEL_188:
        if (!v132)
          goto LABEL_210;
        v251 = *(unint64_t **)(*(_QWORD *)&v413 + 40);
        v252 = v251[11] + 24 * v134;
        v254 = *(char **)v252;
        v253 = *(char **)(v252 + 8);
        if (*(char **)v252 != v253)
        {
          while (*(_DWORD *)v254 < v134)
          {
            v254 += 16;
            if (v254 == v253)
              goto LABEL_197;
          }
        }
        if (v254 != v253)
        {
          if (*(_DWORD *)v254 == v134)
          {
            v255 = (float64x2_t *)(v251[2] + 8 * *((_QWORD *)v254 + 1));
            goto LABEL_198;
          }
          v253 = v254;
        }
LABEL_197:
        v255 = (float64x2_t *)sub_239C82958(v251, (char **)v252, v134, v253);
LABEL_198:
        v256 = (float64x2_t)vzip1q_s64(*(int64x2_t *)memptr, (int64x2_t)v452);
        v257 = (float64x2_t)vzip2q_s64(*(int64x2_t *)memptr, (int64x2_t)v452);
        v258 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&memptr[16], (int64x2_t)v453);
        v259 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&memptr[16], (int64x2_t)v453);
        v260 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, *(double *)memptr), v257, *(float64x2_t *)memptr, 1), v258, *(double *)&memptr[16]), v259, *(float64x2_t *)&memptr[16], 1);
        v261 = (float64x2_t)vzip1q_s64((int64x2_t)v458, (int64x2_t)v463);
        v262 = (float64x2_t)vzip2q_s64((int64x2_t)v458, (int64x2_t)v463);
        v263 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v459, (int64x2_t)v464);
        v264 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v459, (int64x2_t)v464);
        v265 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v261, *(double *)memptr), v262, *(float64x2_t *)memptr, 1), v263, *(double *)&memptr[16]), v264, *(float64x2_t *)&memptr[16], 1);
        v266 = (float64x2_t)vzip1q_s64((int64x2_t)v468, (int64x2_t)v473);
        v267 = (float64x2_t)vzip2q_s64((int64x2_t)v468, (int64x2_t)v473);
        v268 = (float64x2_t)vzip1q_s64((int64x2_t)v469, (int64x2_t)v474);
        v269 = (float64x2_t)vzip2q_s64((int64x2_t)v469, (int64x2_t)v474);
        v270 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v266, *(double *)memptr), v267, *(float64x2_t *)memptr, 1), v268, *(double *)&memptr[16]), v269, *(float64x2_t *)&memptr[16], 1);
        v271 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v256, v452.f64[0]), v257, v452, 1), v258, v453.f64[0]), v259, v453, 1);
        v272 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v261, v452.f64[0]), v262, v452, 1), v263, v453.f64[0]), v264, v453, 1);
        v409 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v266, v452.f64[0]), v267, v452, 1), v268, v453.f64[0]), v269, v453, 1);
        v273 = vmlaq_laneq_f64(vmulq_n_f64(v256, v458.f64[0]), v257, v458, 1);
        v274 = vmlaq_laneq_f64(vmulq_n_f64(v261, v458.f64[0]), v262, v458, 1);
        v275 = vmlaq_laneq_f64(vmulq_n_f64(v266, v458.f64[0]), v267, v458, 1);
        v276 = vmlaq_laneq_f64(vmulq_n_f64(v256, v463.f64[0]), v257, v463, 1);
        v277 = vmlaq_laneq_f64(vmulq_n_f64(v261, v463.f64[0]), v262, v463, 1);
        v278 = vmlaq_laneq_f64(vmulq_n_f64(v266, v463.f64[0]), v267, v463, 1);
        v279 = vmlaq_laneq_f64(vmulq_n_f64(v256, v468.f64[0]), v257, v468, 1);
        v280 = vmlaq_laneq_f64(vmulq_n_f64(v261, v468.f64[0]), v262, v468, 1);
        v281 = vmlaq_laneq_f64(vmulq_n_f64(v266, v468.f64[0]), v267, v468, 1);
        v282 = vmlaq_laneq_f64(vmulq_n_f64(v256, v473.f64[0]), v257, v473, 1);
        v283 = vmlaq_laneq_f64(vmulq_n_f64(v261, v473.f64[0]), v262, v473, 1);
        v284 = vmlaq_laneq_f64(vmulq_n_f64(v266, v473.f64[0]), v267, v473, 1);
        v285 = vmlaq_laneq_f64(vmlaq_n_f64(v273, v258, *(double *)v459), v259, *(float64x2_t *)v459, 1);
        v400 = vmlaq_laneq_f64(vmlaq_n_f64(v274, v263, *(double *)v459), v264, *(float64x2_t *)v459, 1);
        v423 = vmlaq_laneq_f64(vmlaq_n_f64(v276, v258, v464.f64[0]), v259, v464, 1);
        v427 = vmlaq_laneq_f64(vmlaq_n_f64(v275, v268, *(double *)v459), v269, *(float64x2_t *)v459, 1);
        v415 = vmlaq_laneq_f64(vmlaq_n_f64(v277, v263, v464.f64[0]), v264, v464, 1);
        v419 = vmlaq_laneq_f64(vmlaq_n_f64(v278, v268, v464.f64[0]), v269, v464, 1);
        v286 = vmlaq_laneq_f64(vmlaq_n_f64(v279, v258, v469.f64[0]), v259, v469, 1);
        v287 = vmlaq_laneq_f64(vmlaq_n_f64(v280, v263, v469.f64[0]), v264, v469, 1);
        v288 = vmlaq_laneq_f64(vmlaq_n_f64(v281, v268, v469.f64[0]), v269, v469, 1);
        v289 = vmlaq_laneq_f64(vmlaq_n_f64(v282, v258, v474.f64[0]), v259, v474, 1);
        v290 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v459[16], (int64x2_t)v465);
        v291 = vmlaq_n_f64(v283, v263, v474.f64[0]);
        v292 = (float64x2_t)vzip1q_s64((int64x2_t)v470, (int64x2_t)v475);
        v293 = vmlaq_laneq_f64(v291, v264, v474, 1);
        v294 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v459[16], (int64x2_t)v465);
        v295 = vmlaq_n_f64(v284, v268, v474.f64[0]);
        v296 = (float64x2_t)vzip2q_s64((int64x2_t)v470, (int64x2_t)v475);
        v297 = vmlaq_laneq_f64(v295, v269, v474, 1);
        v298 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&memptr[32], (int64x2_t)v454);
        v299 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&memptr[32], (int64x2_t)v454);
        v300 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&memptr[48], (int64x2_t)v455);
        v301 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&memptr[48], (int64x2_t)v455);
        v406 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v260, v298, *(double *)&memptr[32]), v299, *(float64x2_t *)&memptr[32], 1), v300, *(double *)&memptr[48]), v301, *(float64x2_t *)&memptr[48], 1);
        v302 = (float64x2_t)vzip1q_s64((int64x2_t)v460, (int64x2_t)v466);
        v303 = (float64x2_t)vzip2q_s64((int64x2_t)v460, (int64x2_t)v466);
        v304 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v265, v290, *(double *)&memptr[32]), v294, *(float64x2_t *)&memptr[32], 1), v302, *(double *)&memptr[48]), v303, *(float64x2_t *)&memptr[48], 1);
        v305 = (float64x2_t)vzip1q_s64((int64x2_t)v471, (int64x2_t)v476);
        v306 = (float64x2_t)vzip2q_s64((int64x2_t)v471, (int64x2_t)v476);
        v402 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v270, v292, *(double *)&memptr[32]), v296, *(float64x2_t *)&memptr[32], 1), v305, *(double *)&memptr[48]), v306, *(float64x2_t *)&memptr[48], 1);
        v307 = vmlaq_laneq_f64(vmlaq_n_f64(v272, v290, v454.f64[0]), v294, v454, 1);
        v308 = vmlaq_laneq_f64(vmlaq_n_f64(v409, v292, v454.f64[0]), v296, v454, 1);
        v309 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v271, v298, v454.f64[0]), v299, v454, 1), v300, v455.f64[0]), v301, v455, 1);
        v410 = vmlaq_laneq_f64(vmlaq_n_f64(v307, v302, v455.f64[0]), v303, v455, 1);
        v310 = vmlaq_laneq_f64(vmlaq_n_f64(v308, v305, v455.f64[0]), v306, v455, 1);
        v311 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v285, v298, *(double *)&v459[16]), v299, *(float64x2_t *)&v459[16], 1), v300, v460.f64[0]), v301, v460, 1);
        v312 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v400, v290, *(double *)&v459[16]), v294, *(float64x2_t *)&v459[16], 1), v302, v460.f64[0]), v303, v460, 1);
        v313 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v427, v292, *(double *)&v459[16]), v296, *(float64x2_t *)&v459[16], 1), v305, v460.f64[0]), v306, v460, 1);
        v424 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v423, v298, v465.f64[0]), v299, v465, 1), v300, v466.f64[0]), v301, v466, 1);
        v416 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v415, v290, v465.f64[0]), v294, v465, 1), v302, v466.f64[0]), v303, v466, 1);
        v314 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v419, v292, v465.f64[0]), v296, v465, 1), v305, v466.f64[0]), v306, v466, 1);
        v412 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v286, v298, v470.f64[0]), v299, v470, 1), v300, v471.f64[0]), v301, v471, 1);
        v315 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v287, v290, v470.f64[0]), v294, v470, 1), v302, v471.f64[0]), v303, v471, 1);
        v316 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v288, v292, v470.f64[0]), v296, v470, 1), v305, v471.f64[0]), v306, v471, 1);
        v317 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v289, v298, v475.f64[0]), v299, v475, 1), v300, v476.f64[0]), v301, v476, 1);
        v318 = (float64x2_t)vzip1q_s64((int64x2_t)v461, *(int64x2_t *)v467);
        v319 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v472, *(int64x2_t *)v477);
        v320 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v293, v290, v475.f64[0]), v294, v475, 1), v302, v476.f64[0]), v303, v476, 1);
        v321 = (float64x2_t)vzip2q_s64((int64x2_t)v461, *(int64x2_t *)v467);
        v322 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v472, *(int64x2_t *)v477);
        v323 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v297, v292, v475.f64[0]), v296, v475, 1), v305, v476.f64[0]), v306, v476, 1);
        v324 = (float64x2_t)vzip1q_s64((int64x2_t)v450, (int64x2_t)v456);
        v325 = (float64x2_t)vzip2q_s64((int64x2_t)v450, (int64x2_t)v456);
        v326 = vmlaq_laneq_f64(vmlaq_n_f64(v304, v318, v450.f64[0]), v321, v450, 1);
        v327 = vmlaq_laneq_f64(vmlaq_n_f64(v402, v319, v450.f64[0]), v322, v450, 1);
        v403 = (float64x2_t)vzip1q_s64((int64x2_t)v451, (int64x2_t)v457);
        v328 = (float64x2_t)vzip2q_s64((int64x2_t)v451, (int64x2_t)v457);
        v329 = (float64x2_t)vzip1q_s64((int64x2_t)v462, *(int64x2_t *)&v467[16]);
        v330 = (float64x2_t)vzip2q_s64((int64x2_t)v462, *(int64x2_t *)&v467[16]);
        v407 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v406, v324, v450.f64[0]), v325, v450, 1), v403, v451.f64[0]), v328, v451, 1);
        v331 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v472[16], *(int64x2_t *)&v477[16]);
        v332 = vmlaq_n_f64(v327, v331, v451.f64[0]);
        v333 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v472[16], *(int64x2_t *)&v477[16]);
        v428 = vmlaq_laneq_f64(vmlaq_n_f64(v313, v319, v461.f64[0]), v322, v461, 1);
        v420 = vmlaq_laneq_f64(vmlaq_n_f64(v314, v319, *(double *)v467), v322, *(float64x2_t *)v467, 1);
        v401 = vaddq_f64(v255[2], vmlaq_laneq_f64(v332, v333, v451, 1));
        v334 = vaddq_f64(v255[1], vmlaq_laneq_f64(vmlaq_n_f64(v326, v329, v451.f64[0]), v330, v451, 1));
        v335 = vaddq_f64(v255[5], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v310, v319, v456.f64[0]), v322, v456, 1), v331, v457.f64[0]), v333, v457, 1));
        v336 = vaddq_f64(v255[4], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v410, v318, v456.f64[0]), v321, v456, 1), v329, v457.f64[0]), v330, v457, 1));
        v337 = vaddq_f64(v255[3], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v309, v324, v456.f64[0]), v325, v456, 1), v403, v457.f64[0]), v328, v457, 1));
        v338 = vmlaq_laneq_f64(vmlaq_n_f64(v412, v324, *(double *)v472), v325, *(float64x2_t *)v472, 1);
        v339 = vmlaq_laneq_f64(vmlaq_n_f64(v316, v319, *(double *)v472), v322, *(float64x2_t *)v472, 1);
        v340 = vmlaq_laneq_f64(vmlaq_n_f64(v317, v324, *(double *)v477), v325, *(float64x2_t *)v477, 1);
        v341 = vmlaq_laneq_f64(vmlaq_n_f64(v323, v319, *(double *)v477), v322, *(float64x2_t *)v477, 1);
        v342 = vaddq_f64(v255[8], vmlaq_laneq_f64(vmlaq_n_f64(v428, v331, v462.f64[0]), v333, v462, 1));
        v343 = vaddq_f64(v255[7], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v312, v318, v461.f64[0]), v321, v461, 1), v329, v462.f64[0]), v330, v462, 1));
        v344 = vaddq_f64(v255[6], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v311, v324, v461.f64[0]), v325, v461, 1), v403, v462.f64[0]), v328, v462, 1));
        v345 = vaddq_f64(v255[11], vmlaq_laneq_f64(vmlaq_n_f64(v420, v331, *(double *)&v467[16]), v333, *(float64x2_t *)&v467[16], 1));
        v346 = vaddq_f64(v255[10], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v416, v318, *(double *)v467), v321, *(float64x2_t *)v467, 1), v329, *(double *)&v467[16]), v330, *(float64x2_t *)&v467[16], 1));
        v347 = vaddq_f64(v255[9], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v424, v324, *(double *)v467), v325, *(float64x2_t *)v467, 1), v403, *(double *)&v467[16]), v328, *(float64x2_t *)&v467[16], 1));
        v348 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v315, v318, *(double *)v472), v321, *(float64x2_t *)v472, 1), v329, *(double *)&v472[16]), v330, *(float64x2_t *)&v472[16], 1);
        v5 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v320, v318, *(double *)v477), v321, *(float64x2_t *)v477, 1), v329, *(double *)&v477[16]), v330, *(float64x2_t *)&v477[16], 1);
        v349 = vaddq_f64(v255[14], vmlaq_laneq_f64(vmlaq_n_f64(v339, v331, *(double *)&v472[16]), v333, *(float64x2_t *)&v472[16], 1));
        v350 = vaddq_f64(v255[13], v348);
        v351 = vaddq_f64(v255[12], vmlaq_laneq_f64(vmlaq_n_f64(v338, v403, *(double *)&v472[16]), v328, *(float64x2_t *)&v472[16], 1));
        v352 = vaddq_f64(v255[17], vmlaq_laneq_f64(vmlaq_n_f64(v341, v331, *(double *)&v477[16]), v333, *(float64x2_t *)&v477[16], 1));
        v353 = vaddq_f64(v255[15], vmlaq_laneq_f64(vmlaq_n_f64(v340, v403, *(double *)&v477[16]), v328, *(float64x2_t *)&v477[16], 1));
        *v255 = vaddq_f64(*v255, v407);
        v255[1] = v334;
        v255[2] = v401;
        v255[3] = v337;
        v255[4] = v336;
        v255[5] = v335;
        v255[6] = v344;
        v255[7] = v343;
        v255[8] = v342;
        v255[9] = v347;
        v255[10] = v346;
        v255[11] = v345;
        v255[12] = v351;
        v255[13] = v350;
        v255[14] = v349;
        v255[15] = v353;
        v255[16] = vaddq_f64(v255[16], v5);
        v255[17] = v352;
        if (v133)
        {
          v354 = *(unint64_t **)(*(_QWORD *)&v413 + 48);
          v355 = v354[11] + 24 * v404;
          v357 = *(char **)v355;
          v356 = *(char **)(v355 + 8);
          if (*(char **)v355 != v356)
          {
            while (*(_DWORD *)v357 < v134)
            {
              v357 += 16;
              if (v357 == v356)
                goto LABEL_207;
            }
          }
          if (v357 != v356)
          {
            if (*(_DWORD *)v357 == v134)
            {
              v358 = (float64x2_t *)(v354[2] + 8 * *((_QWORD *)v357 + 1));
LABEL_208:
              v359 = vaddq_f64(v358[2], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v468, (int64x2_t)v473), v478.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v468, (int64x2_t)v473), v478, 1), (float64x2_t)vzip1q_s64((int64x2_t)v469, (int64x2_t)v474),
                                           v479.f64[0]),
                                         (float64x2_t)vzip2q_s64((int64x2_t)v469, (int64x2_t)v474),
                                         v479,
                                         1),
                                       (float64x2_t)vzip1q_s64((int64x2_t)v470, (int64x2_t)v475),
                                       v480.f64[0]),
                                     (float64x2_t)vzip2q_s64((int64x2_t)v470, (int64x2_t)v475),
                                     v480,
                                     1),
                                   (float64x2_t)vzip1q_s64((int64x2_t)v471, (int64x2_t)v476),
                                   v481.f64[0]),
                                 (float64x2_t)vzip2q_s64((int64x2_t)v471, (int64x2_t)v476),
                                 v481,
                                 1),
                               (float64x2_t)vzip1q_s64(*(int64x2_t *)v472, *(int64x2_t *)v477),
                               *(double *)v482),
                             (float64x2_t)vzip2q_s64(*(int64x2_t *)v472, *(int64x2_t *)v477),
                             *(float64x2_t *)v482,
                             1),
                           (float64x2_t)vzip1q_s64(*(int64x2_t *)&v472[16], *(int64x2_t *)&v477[16]),
                           *(double *)&v482[16]),
                         (float64x2_t)vzip2q_s64(*(int64x2_t *)&v472[16], *(int64x2_t *)&v477[16]),
                         *(float64x2_t *)&v482[16],
                         1));
              v360 = vaddq_f64(v358[1], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v458, (int64x2_t)v463), v478.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v458, (int64x2_t)v463), v478, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)v459, (int64x2_t)v464),
                                           v479.f64[0]),
                                         (float64x2_t)vzip2q_s64(*(int64x2_t *)v459, (int64x2_t)v464),
                                         v479,
                                         1),
                                       (float64x2_t)vzip1q_s64(*(int64x2_t *)&v459[16], (int64x2_t)v465),
                                       v480.f64[0]),
                                     (float64x2_t)vzip2q_s64(*(int64x2_t *)&v459[16], (int64x2_t)v465),
                                     v480,
                                     1),
                                   (float64x2_t)vzip1q_s64((int64x2_t)v460, (int64x2_t)v466),
                                   v481.f64[0]),
                                 (float64x2_t)vzip2q_s64((int64x2_t)v460, (int64x2_t)v466),
                                 v481,
                                 1),
                               (float64x2_t)vzip1q_s64((int64x2_t)v461, *(int64x2_t *)v467),
                               *(double *)v482),
                             (float64x2_t)vzip2q_s64((int64x2_t)v461, *(int64x2_t *)v467),
                             *(float64x2_t *)v482,
                             1),
                           (float64x2_t)vzip1q_s64((int64x2_t)v462, *(int64x2_t *)&v467[16]),
                           *(double *)&v482[16]),
                         (float64x2_t)vzip2q_s64((int64x2_t)v462, *(int64x2_t *)&v467[16]),
                         *(float64x2_t *)&v482[16],
                         1));
              *v358 = vaddq_f64(*v358, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)memptr, (int64x2_t)v452), v478.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)memptr, (int64x2_t)v452), v478, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)&memptr[16], (int64x2_t)v453),
                                            v479.f64[0]),
                                          (float64x2_t)vzip2q_s64(*(int64x2_t *)&memptr[16], (int64x2_t)v453),
                                          v479,
                                          1),
                                        (float64x2_t)vzip1q_s64(*(int64x2_t *)&memptr[32], (int64x2_t)v454),
                                        v480.f64[0]),
                                      (float64x2_t)vzip2q_s64(*(int64x2_t *)&memptr[32], (int64x2_t)v454),
                                      v480,
                                      1),
                                    (float64x2_t)vzip1q_s64(*(int64x2_t *)&memptr[48], (int64x2_t)v455),
                                    v481.f64[0]),
                                  (float64x2_t)vzip2q_s64(*(int64x2_t *)&memptr[48], (int64x2_t)v455),
                                  v481,
                                  1),
                                (float64x2_t)vzip1q_s64((int64x2_t)v450, (int64x2_t)v456),
                                *(double *)v482),
                              (float64x2_t)vzip2q_s64((int64x2_t)v450, (int64x2_t)v456),
                              *(float64x2_t *)v482,
                              1),
                            (float64x2_t)vzip1q_s64((int64x2_t)v451, (int64x2_t)v457),
                            *(double *)&v482[16]),
                          (float64x2_t)vzip2q_s64((int64x2_t)v451, (int64x2_t)v457),
                          *(float64x2_t *)&v482[16],
                          1));
              v358[1] = v360;
              v358[2] = v359;
              goto LABEL_209;
            }
            v356 = v357;
          }
LABEL_207:
          v358 = (float64x2_t *)sub_239C82A5C(v354, (char **)v355, v134, v356);
          goto LABEL_208;
        }
LABEL_209:
        v361 = *(float64x2_t *)(v128 + 432);
        v362 = *(float64x2_t *)(v128 + 448);
        v363 = *(float64x2_t *)(v128 + 464);
        v364 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)memptr, (int64x2_t)v452), v158->f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)memptr, (int64x2_t)v452), *v158, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)&memptr[16], (int64x2_t)v453), v361.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&memptr[16], (int64x2_t)v453), v361, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)&memptr[32], (int64x2_t)v454), v362.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&memptr[32], (int64x2_t)v454), v362,
                     1),
                   (float64x2_t)vzip1q_s64(*(int64x2_t *)&memptr[48], (int64x2_t)v455),
                   v363.f64[0]),
                 (float64x2_t)vzip2q_s64(*(int64x2_t *)&memptr[48], (int64x2_t)v455),
                 v363,
                 1);
        v365 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v458, (int64x2_t)v463), v158->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v458, (int64x2_t)v463), *v158, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)v459, (int64x2_t)v464), v361.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v459, (int64x2_t)v464), v361, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)&v459[16], (int64x2_t)v465), v362.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v459[16], (int64x2_t)v465), v362,
                     1),
                   (float64x2_t)vzip1q_s64((int64x2_t)v460, (int64x2_t)v466),
                   v363.f64[0]),
                 (float64x2_t)vzip2q_s64((int64x2_t)v460, (int64x2_t)v466),
                 v363,
                 1);
        v366 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v468, (int64x2_t)v473), v158->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v468, (int64x2_t)v473), *v158, 1), (float64x2_t)vzip1q_s64((int64x2_t)v469, (int64x2_t)v474), v361.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v469, (int64x2_t)v474), v361, 1), (float64x2_t)vzip1q_s64((int64x2_t)v470, (int64x2_t)v475), v362.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v470, (int64x2_t)v475), v362,
                     1),
                   (float64x2_t)vzip1q_s64((int64x2_t)v471, (int64x2_t)v476),
                   v363.f64[0]),
                 (float64x2_t)vzip2q_s64((int64x2_t)v471, (int64x2_t)v476),
                 v363,
                 1);
        v367 = *(float64x2_t *)(v128 + 480);
        v368 = vmlaq_laneq_f64(vmlaq_n_f64(v364, (float64x2_t)vzip1q_s64((int64x2_t)v450, (int64x2_t)v456), v367.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v450, (int64x2_t)v456), v367, 1);
        v369 = vmlaq_laneq_f64(vmlaq_n_f64(v365, (float64x2_t)vzip1q_s64((int64x2_t)v461, *(int64x2_t *)v467), v367.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v461, *(int64x2_t *)v467), v367, 1);
        v370 = vmlaq_laneq_f64(vmlaq_n_f64(v366, (float64x2_t)vzip1q_s64(*(int64x2_t *)v472, *(int64x2_t *)v477), v367.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v472, *(int64x2_t *)v477), v367, 1);
        v371 = *(float64x2_t *)(v128 + 496);
        v372 = vmlaq_laneq_f64(vmlaq_n_f64(v368, (float64x2_t)vzip1q_s64((int64x2_t)v451, (int64x2_t)v457), v371.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v451, (int64x2_t)v457), v371, 1);
        v373 = vmlaq_laneq_f64(vmlaq_n_f64(v369, (float64x2_t)vzip1q_s64((int64x2_t)v462, *(int64x2_t *)&v467[16]), v371.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v462, *(int64x2_t *)&v467[16]), v371, 1);
        v374 = (float64x2_t *)(**(_QWORD **)&v413 + 8 * (*(_DWORD *)(*(_QWORD *)&v413 + 32) + 6 * v134));
        v375 = vsubq_f64(v374[2], vmlaq_laneq_f64(vmlaq_n_f64(v370, (float64x2_t)vzip1q_s64(*(int64x2_t *)&v472[16], *(int64x2_t *)&v477[16]), v371.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v472[16], *(int64x2_t *)&v477[16]), v371, 1));
        v376 = vsubq_f64(v374[1], v373);
        *v374 = vsubq_f64(*v374, v372);
        v374[1] = v376;
        v374[2] = v375;
LABEL_210:
        v127 = v399;
        if (v133)
        {
          v377 = 8 * (*(_DWORD *)(*(_QWORD *)&v413 + 36) + v404);
          _V1.D[1] = *(_QWORD *)&v482[8];
          _V0.D[1] = *(_QWORD *)&v482[24];
          _V3.D[1] = v480.f64[1];
          _V2.D[1] = v481.f64[1];
          _V5.D[1] = v478.f64[1];
          _V4.D[1] = v479.f64[1];
          _D19 = *(_QWORD *)(v128 + 424);
          __asm { FMLA            D20, D19, V5.D[1] }
          _D5 = *(_QWORD *)(v128 + 440);
          __asm { FMLA            D20, D5, V4.D[1] }
          _D4 = *(_QWORD *)(v128 + 456);
          __asm { FMLA            D20, D4, V3.D[1] }
          _D3 = *(_QWORD *)(v128 + 472);
          __asm { FMLA            D20, D3, V2.D[1] }
          _D2 = *(_QWORD *)(v128 + 488);
          __asm { FMLA            D20, D2, V1.D[1] }
          _D1 = *(_QWORD *)(v128 + 504);
          __asm { FMLA            D20, D1, V0.D[1] }
          *(double *)(**(_QWORD **)&v413 + v377) = *(double *)(**(_QWORD **)&v413 + v377) - _D20;
        }
LABEL_153:
        v128 += 544;
        if (v128 == v127)
          goto LABEL_212;
      }
    }
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 145))
    {
LABEL_87:
      sub_239C87BC8(v2);
      v65 = *(_DWORD *)(a1 + 308);
      memset(memptr, 0, 48);
      v66 = *(_QWORD *)(a1 + 456);
      if (*(_BYTE *)(v66 + 96))
      {
        *(_QWORD *)memptr = operator new(0x100uLL);
        *(_QWORD *)&memptr[8] = *(_QWORD *)memptr;
        *(_QWORD *)&memptr[16] = *(_QWORD *)memptr + 256;
        *(_QWORD *)&memptr[24] = operator new(0x100uLL);
        *(_QWORD *)&memptr[32] = *(_QWORD *)&memptr[24];
        *(_QWORD *)&memptr[40] = *(_QWORD *)&memptr[24] + 256;
        sub_239C88398(v66, (uint64_t)memptr);
        sub_239C885AC(v66, (uint64_t)&memptr[24]);
      }
      sub_239C887C0(*(_QWORD *)(a1 + 464), (char **)memptr);
      sub_239C88A2C((uint64_t *)(a1 + 472), (int **)memptr, v65);
      if (*(_QWORD *)&memptr[24])
      {
        *(_QWORD *)&memptr[32] = *(_QWORD *)&memptr[24];
        operator delete(*(void **)&memptr[24]);
      }
      if (*(_QWORD *)memptr)
      {
        *(_QWORD *)&memptr[8] = *(_QWORD *)memptr;
        operator delete(*(void **)memptr);
      }
      kdebug_trace();
      goto LABEL_94;
    }
    if (*(_DWORD *)(a1 + 332) == 1)
      v8 = 3;
    else
      v8 = 1;
    if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 608) + 24))(a1 + 608) + 96))
    {
LABEL_86:
      kdebug_trace();
      v6 = 1;
      goto LABEL_213;
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(a1 + 608);
    v10 = sub_239C8BBCC(v9);
    v421 = (_QWORD *)v10;
    memset(memptr, 0, 24);
    v12 = *(const void **)v10;
    v11 = *(_QWORD *)(v10 + 8);
    v13 = v11 - *(_QWORD *)v10;
    if (v11 == *(_QWORD *)v10)
    {
      v15 = 0;
      v14 = 0;
    }
    else
    {
      if (v13 < 0)
        goto LABEL_215;
      v14 = (char *)operator new(v11 - *(_QWORD *)v10);
      v15 = &v14[4 * (v13 >> 2)];
      *(_QWORD *)memptr = v14;
      *(_QWORD *)&memptr[16] = v15;
      memcpy(v14, v12, v13);
      *(_QWORD *)&memptr[8] = v15;
    }
    memset(&memptr[24], 0, 24);
    v17 = (_BYTE *)v421[3];
    v16 = (_BYTE *)v421[4];
    v18 = v16 - v17;
    if (v16 == v17)
    {
      v20 = 0;
      v19 = 0;
      goto LABEL_18;
    }
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = (char *)operator new(v16 - v17);
      v20 = &v19[4 * (v18 >> 2)];
      *(_QWORD *)&memptr[24] = v19;
      *(_QWORD *)&memptr[40] = v20;
      memcpy(v19, v17, v18);
      *(_QWORD *)&memptr[32] = v20;
LABEL_18:
      v21 = (char **)(v421 + 6);
      a1 = v417;
      if (v14 == v15 && v19 == v20)
      {
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
        sub_239C8C2F8((uint64_t)&v445, (char **)(v22 + 72), v21);
        sub_239C8C2F8((uint64_t)&v483, v425, (char **)&v445);
        sub_239C8C554(v417 + 640, (char **)&v483);
        if (v486)
        {
          v487 = v486;
          operator delete((void *)v486);
        }
        if (v483)
        {
          v484 = v483;
          operator delete(v483);
        }
        if (*(_QWORD *)&v446.f64[1])
        {
          v447.f64[0] = v446.f64[1];
          operator delete(*(void **)&v446.f64[1]);
        }
        if (*(_QWORD *)&v445.f64[0])
        {
          v445.f64[1] = v445.f64[0];
          operator delete(*(void **)&v445.f64[0]);
        }
        v23 = 0;
        goto LABEL_81;
      }
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      sub_239C8D418((uint64_t)&v483, (char **)memptr, v21);
      sub_239C8C2F8((uint64_t)&v445, (char **)(v24 + 72), (char **)&v483);
      if (v486)
      {
        v487 = v486;
        operator delete((void *)v486);
      }
      if (v483)
      {
        v484 = v483;
        operator delete(v483);
      }
      sub_239C8D418((uint64_t)&v483, (char **)&v445, (char **)memptr);
      v25 = ((*(_QWORD *)&v447.f64[0] - *(_QWORD *)&v446.f64[1]) >> 2)
          + 6 * ((*(_QWORD *)&v445.f64[1] - *(_QWORD *)&v445.f64[0]) >> 2);
      *(_DWORD *)(v417 + 632) = v25;
      sub_23945215C(v417 + 616, v25);
      v26 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      LODWORD(v442) = 0;
      v429 = v26;
      v430 = (char *)&v445;
      v27 = sub_239C8D630(&v429, (_QWORD *)(v417 + 616), &v442);
      v28 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v7 + 24))(v7, v27);
      sub_239C8D80C((uint64_t)&v483, (_QWORD *)(v28 + 8));
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      sub_239C887C0(v29, (char **)&v483);
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      sub_239C8D9D8((_QWORD *)(v30 + 40));
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      v32 = *(unsigned int *)(v31 + 16);
      if ((_DWORD)v32)
        bzero(*(void **)v31, 8 * v32);
      if (((*(_QWORD *)(v417 + 744) - *(_QWORD *)(v417 + 736)) >> 2)
         + ((*(_QWORD *)(v417 + 720) - *(_QWORD *)(v417 + 712)) >> 2))
      {
        v33 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
        sub_239C80714(v33, (_QWORD *)(v417 + 640));
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v8);
      v442 = 0;
      v443 = 0;
      v444.i32[0] = 0;
      v439 = 0;
      v440 = 0;
      v441 = 0;
      v34 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v417 + 608) + 40);
      if (*(_BYTE *)(v417 + 760))
      {
        v35 = v34(v7);
        sub_239C8DE90(v35, memptr, (uint64_t)&v439);
      }
      else
      {
        v36 = v34(v7);
        sub_239C8DD0C(v36, memptr, (uint64_t)&v439, (uint64_t)&v442);
      }
      memset(v437, 0, sizeof(v437));
      memset(v436, 0, sizeof(v436));
      v37 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      sub_239C8DF5C(v37, memptr, &v445, (uint64_t)v437, (uint64_t)v436);
      sub_239C887C0(v417 + 640, (char **)&v445);
      sub_239C8D9D8((_QWORD *)(v417 + 680));
      v38 = *(unsigned int *)(v417 + 656);
      if ((_DWORD)v38)
        bzero(*(void **)(v417 + 640), 8 * v38);
      memset(v435, 0, sizeof(v435));
      v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v417 + 608) + 40);
      if (*(_BYTE *)(v417 + 760))
      {
        v40 = v39(v7);
        sub_239C8DE90(v40, &v445, (uint64_t)v435);
      }
      else
      {
        v41 = v39(v7);
        sub_239C8DD0C(v41, &v445, (uint64_t)v435, v417 + 640);
      }
      if (*(_BYTE *)(v417 + 761))
      {
        LOBYTE(v429) = *(_BYTE *)(v417 + 760);
        v42 = *(_QWORD *)(v417 + 792);
        if (!v42)
          sub_2394172E0();
        if (((*(uint64_t (**)(uint64_t, void **, void **, void **, void **, void **, uint64_t))(*(_QWORD *)v42 + 48))(v42, &v439, &v442, v437, &v429, v435, v417 + 640) & 1) != 0)
        {
LABEL_48:
          if (*(_DWORD *)(*(_QWORD *)(v417 + 680) + 8) >= *(_DWORD *)(*(_QWORD *)(v417 + 688) + 8))
            v43 = *(_DWORD **)(v417 + 680);
          else
            v43 = *(_DWORD **)(v417 + 688);
          v44 = v43[2];
          v45 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v43 + 48))(v43) * v44;
          LODWORD(v429) = 0;
          HIDWORD(v429) = v45;
          if (*(_DWORD *)(*(_QWORD *)(v417 + 696) + 8) >= *(_DWORD *)(*(_QWORD *)(v417 + 704) + 8))
            v46 = *(_DWORD **)(v417 + 696);
          else
            v46 = *(_DWORD **)(v417 + 704);
          v47 = v46[2];
          v48 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v46 + 48))(v46);
          LODWORD(v430) = v45;
          HIDWORD(v430) = v48 * v47;
          if (*(_DWORD *)(*(_QWORD *)(v417 + 680) + 12) >= *(_DWORD *)(*(_QWORD *)(v417 + 696) + 12))
            v49 = *(_DWORD **)(v417 + 680);
          else
            v49 = *(_DWORD **)(v417 + 696);
          v50 = v49[3];
          v51 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v49 + 56))(v49) * v50;
          v438[0] = 0;
          v438[1] = v51;
          if (*(_DWORD *)(*(_QWORD *)(v417 + 688) + 12) >= *(_DWORD *)(*(_QWORD *)(v417 + 704) + 12))
            v52 = *(_DWORD **)(v417 + 688);
          else
            v52 = *(_DWORD **)(v417 + 704);
          v53 = v52[3];
          v54 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v52 + 56))(v52);
          v438[2] = v51;
          v438[3] = v54 * v53;
          sub_239C8E1D0((uint64_t *)(v417 + 680), (uint64_t *)v435, (unsigned int *)&v429, v438);
          v429 = 0;
          v430 = 0;
          v431 = 0;
          v56 = (_BYTE *)v421[12];
          v55 = (_BYTE *)v421[13];
          v57 = v55 - v56;
          if (v55 != v56)
          {
            if (v57 < 0)
              goto LABEL_217;
            v429 = operator new(v55 - v56);
            v430 = (char *)v429;
            v58 = (char *)v429 + 4 * (v57 >> 2);
            v431 = v58;
            memcpy(v429, v56, v57);
            v430 = v58;
          }
          v432 = 0;
          v433 = 0;
          v434 = 0;
          v60 = (_BYTE *)v421[15];
          v59 = (_BYTE *)v421[16];
          v61 = v59 - v60;
          if (v59 == v60)
          {
LABEL_66:
            v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            sub_239C8C554(v63, (char **)memptr);
            v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            sub_239C8E8A8(v64, (uint64_t)&v429);
            if (v432)
            {
              v433 = v432;
              operator delete(v432);
            }
            if (v429)
            {
              v430 = (char *)v429;
              operator delete(v429);
            }
            v23 = 0;
            goto LABEL_73;
          }
          if ((v61 & 0x8000000000000000) == 0)
          {
            v432 = operator new(v61);
            v433 = v432;
            v62 = (char *)v432 + 4 * (v61 >> 2);
            v434 = v62;
            memcpy(v432, v60, v61);
            v433 = v62;
            goto LABEL_66;
          }
LABEL_217:
          sub_2394189F8();
        }
      }
      else if (sub_239C2B370((uint64_t)&v439, (uint64_t)&v442, (uint64_t)v437, *(_BYTE *)(v417 + 760) != 0, (uint64_t)v435, v417 + 640))
      {
        goto LABEL_48;
      }
      v23 = 1;
LABEL_73:
      free(v435[0]);
      free(v436[0]);
      free(v437[0]);
      free(v439);
      free(v442);
      if (v486)
      {
        v487 = v486;
        operator delete((void *)v486);
      }
      if (v483)
      {
        v484 = v483;
        operator delete(v483);
      }
      if (*(_QWORD *)&v446.f64[1])
      {
        v447.f64[0] = v446.f64[1];
        operator delete(*(void **)&v446.f64[1]);
      }
      if (*(_QWORD *)&v445.f64[0])
      {
        v445.f64[1] = v445.f64[0];
        operator delete(*(void **)&v445.f64[0]);
      }
LABEL_81:
      if (*(_QWORD *)&memptr[24])
      {
        *(_QWORD *)&memptr[32] = *(_QWORD *)&memptr[24];
        operator delete(*(void **)&memptr[24]);
      }
      if (*(_QWORD *)memptr)
      {
        *(_QWORD *)&memptr[8] = *(_QWORD *)memptr;
        operator delete(*(void **)memptr);
      }
      if (v23)
        goto LABEL_86;
      goto LABEL_87;
    }
LABEL_215:
    sub_2394189F8();
  }
LABEL_213:
  kdebug_trace();
  return v6;
}

void sub_239C963D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
  char *v63;
  uint64_t v64;
  char *v66;
  void *v67;
  void *v68;

  v66 = v63;
  while (1)
  {
    v68 = (void *)*((_QWORD *)v66 - 3);
    v66 -= 24;
    v67 = v68;
    if (v68)
    {
      *((_QWORD *)v63 - 2) = v67;
      operator delete(v67);
    }
    v63 = v66;
    if (v66 == &a40)
    {
      free(a46);
      free(a49);
      free(a52);
      free(a57);
      free(a60);
      sub_2394FCFA8(v64 - 216);
      sub_2394FCFA8((uint64_t)&a63);
      sub_2394FCFA8((uint64_t)&STACK[0x220]);
      sub_239C25A28();
      sub_239C22568();
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_239C965CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int **v6;
  int v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  double *v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  uint64_t v15;
  float64x2_t *v16;
  float64x2_t *v17;
  uint64_t v18;
  float64x2_t v19;
  double *v20;
  double v21;
  std::bad_alloc *exception;
  std::bad_alloc *v24;
  double v25;
  void *v26[2];
  unsigned int v27;
  void *v28[2];
  unsigned int v29;
  void *memptr;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  v5 = (_QWORD *)(a1 + 376);
  v6 = (unsigned int **)(a1 + 560);
  if (*(_DWORD *)(a1 + 308))
    sub_239C7C654(a1 + 808, v5, v6, (unsigned int **)(a1 + 560));
  else
    sub_239C7B50C(a1 + 808, v5, v6, (unsigned int **)(a1 + 560));
  kdebug_trace();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2);
  if (*(_BYTE *)(a1 + 312))
  {
    v7 = *(_DWORD *)(a1 + 328);
    if (v7 != 1)
    {
      if (!v7)
        sub_239C7D830((unsigned int *)(a1 + 808), *(double *)(a1 + 320));
      goto LABEL_22;
    }
    v28[0] = 0;
    v28[1] = 0;
    v29 = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, v28);
    v25 = *(double *)(a1 + 320);
    v8 = (8 * v29 + 31) & 0xFFFFFFFE0;
    v26[1] = (void *)(v8 >> 3);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x100BBD03uLL);
    v9 = (char *)memptr;
    v26[0] = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v24 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v24, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v10 = v29;
    v27 = v29;
    if (!v29)
      goto LABEL_21;
    v11 = (double *)v28[0];
    v12 = (v29 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v12 < 3)
    {
      v13 = (double *)memptr;
    }
    else
    {
      v13 = (double *)memptr;
      if ((unint64_t)memptr - (unint64_t)v28[0] >= 0x20)
      {
        v14 = v12 + 1;
        v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        v13 = (double *)((char *)memptr + v15);
        v16 = (float64x2_t *)((char *)v28[0] + 16);
        v17 = (float64x2_t *)((char *)memptr + 16);
        v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = vmulq_n_f64(*v16, v25);
          v17[-1] = vmulq_n_f64(v16[-1], v25);
          *v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_21;
        v11 = (double *)((char *)v11 + v15);
      }
    }
    v20 = (double *)&v9[8 * v10];
    do
    {
      v21 = *v11++;
      *v13++ = v25 * v21;
    }
    while (v13 != v20);
LABEL_21:
    sub_239C7DFC4((unsigned int *)(a1 + 808), (uint64_t *)v26);
    free(v26[0]);
    free(v28[0]);
  }
LABEL_22:
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2))
  {
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)(a1 + 300) = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_239C9685C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  free(a12);
  free(a15);
  _Unwind_Resume(a1);
}

void sub_239C96888(_Unwind_Exception *a1)
{
  sub_239C2ED74();
  _Unwind_Resume(a1);
}

void sub_239C9689C(_Unwind_Exception *a1)
{
  sub_239C2ED44();
  _Unwind_Resume(a1);
}

double sub_239C968AC(uint64_t a1)
{
  size_t v2;
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  int64x2_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int64x2_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _DWORD *v20;
  _DWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  double *v27;
  double v28;
  double *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float64x2_t *v33;
  float64x2_t *v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  std::bad_alloc *exception;
  std::bad_alloc *v45;
  void **v46;
  void *v47[3];
  void *v48[2];
  unsigned int v49;
  void *memptr[2];
  void **v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  void ***v57;
  void **v58;
  uint64_t v59;
  int64x2_t v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v2 = (8
      * (((*(_QWORD *)(a1 + 744) - *(_QWORD *)(a1 + 736)) >> 2)
       + 6 * ((*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 2))
      + 31) & 0xFFFFFFFE0;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v2, 0x100BBD03uLL);
  v3 = memptr[0];
  if (!memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v45 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v45, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v4 = *(_DWORD **)(a1 + 712);
  v5 = *(_DWORD **)(a1 + 720);
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD **)(a1 + 56);
    do
    {
      if (*((_DWORD *)v7 + 8) != *v4)
      {
        v17 = v7;
        do
        {
          v18 = (_QWORD *)v17[1];
          if (v18)
          {
            do
            {
              v7 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v7 = (_QWORD *)v17[2];
              v19 = *v7 == (_QWORD)v17;
              v17 = v7;
            }
            while (!v19);
          }
          v17 = v7;
        }
        while (*((_DWORD *)v7 + 8) != *v4);
      }
      v8 = (void **)v7[9];
      v9 = v7[13];
      v10 = *(_OWORD *)(v7 + 11);
      v11 = v7[17];
      v12 = *(_OWORD *)(v7 + 15);
      *(_OWORD *)memptr = *(_OWORD *)(v7 + 7);
      v51 = v8;
      v52 = v10;
      v53 = v9;
      v54 = v12;
      v55 = v11;
      v61 = 0;
      v60 = 0uLL;
      sub_239458B60((float64x2_t *)memptr, (double *)v60.i64);
      v13.i64[0] = v61;
      v14.i64[0] = v7[21];
      v15 = *(int8x16_t *)(v7 + 19);
      v16 = (int64x2_t *)&v3[v6];
      *v16 = v60;
      v16[1] = vzip1q_s64(v13, (int64x2_t)v15);
      v16[2] = (int64x2_t)vextq_s8(v15, v14, 8uLL);
      v6 += 6;
      ++v4;
    }
    while (v4 != v5);
  }
  v20 = *(_DWORD **)(a1 + 736);
  v21 = *(_DWORD **)(a1 + 744);
  if (v20 == v21)
  {
    v25 = *(_QWORD *)(a1 + 736);
  }
  else
  {
    v22 = *(_QWORD **)(a1 + 80);
    do
    {
      if (*((_DWORD *)v22 + 8) == *v20)
      {
        v23 = v22;
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v22[1];
          if (v24)
          {
            do
            {
              v23 = v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v23 = (_QWORD *)v22[2];
              v19 = *v23 == (_QWORD)v22;
              v22 = v23;
            }
            while (!v19);
          }
          v22 = v23;
        }
        while (*((_DWORD *)v23 + 8) != *v20);
      }
      v3[v6++] = v23[7];
      ++v20;
      v22 = v23;
    }
    while (v20 != v21);
    v25 = *(_QWORD *)(a1 + 744);
    v20 = *(_DWORD **)(a1 + 736);
  }
  if (((unint64_t)(v25 - (_QWORD)v20) >> 2)
     + ((*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 2))
  {
    v26 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 608) + 32))(a1 + 608);
    v60.i32[0] = 0;
    v48[0] = 0;
    v48[1] = 0;
    v49 = *(_DWORD *)(a1 + 632);
    sub_23945215C((uint64_t)v48, v49);
    if (v49)
      bzero(v48[0], 8 * v49);
    memptr[0] = v26;
    memptr[1] = (void *)(a1 + 712);
    sub_239C7B188(memptr, (uint64_t *)(a1 + 616), v48, &v60);
    memset(v47, 0, sizeof(v47));
    sub_239C7B3A8((_QWORD *)(a1 + 680), (uint64_t)v47);
    sub_239C1BE20((uint64_t *)v47);
    if (v49)
    {
      v27 = *(double **)(a1 + 640);
      v28 = *(double *)v48[0] * *v27;
      if (v49 != 1)
      {
        v29 = (double *)((char *)v48[0] + 8);
        v30 = (v49 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
        if (v30 >= 3)
        {
          v31 = v30 + 1;
          v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
          v29 = (double *)((char *)v29 + v32);
          v33 = (float64x2_t *)(v27 + 3);
          v34 = (float64x2_t *)((char *)v48[0] + 24);
          v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v36 = vmulq_f64(v34[-1], v33[-1]);
            v37 = vmulq_f64(*v34, *v33);
            v28 = v28 + v36.f64[0] + v36.f64[1] + v37.f64[0] + v37.f64[1];
            v33 += 2;
            v34 += 2;
            v35 -= 4;
          }
          while (v35);
          if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_45;
          v27 = (double *)((char *)v27 + v32);
        }
        v38 = v27 + 1;
        do
        {
          v39 = *v29++;
          v40 = v39;
          v41 = *v38++;
          v28 = v28 + v40 * v41;
        }
        while (v29 != (double *)((char *)v48[0] + 8 * v49));
      }
    }
    else
    {
      v28 = 0.0;
    }
LABEL_45:
    v46 = v48;
    v57 = &v46;
    v58 = v47;
    v59 = 0x3FE0000000000000;
    memptr[1] = &v56;
    v51 = v48;
    *(_QWORD *)&v52 = 0x3FF0000000000000;
    sub_239C1C794((double *)&v60.i64[1], (double *)memptr);
    v42 = *(double *)&v60.i64[1] - v28;
    free(v47[0]);
    free(v48[0]);
    goto LABEL_46;
  }
  v42 = 0.0;
LABEL_46:
  free(v3);
  return v42;
}

void sub_239C96CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  free(a11);
  free(a14);
  free(v14);
  _Unwind_Resume(a1);
}

double sub_239C96D2C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  double v4;
  double *v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v21;
  _QWORD *v22;
  double *v23;
  double *v24;
  float64x2_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v2 = (_QWORD *)a1[7];
  v3 = a1 + 8;
  v4 = 0.0;
  if (v2 != a1 + 8)
  {
    do
    {
      if ((*((_BYTE *)v2 + 188) & 2) == 0 && *((_BYTE *)v2 + 44))
      {
        v7 = v2[9];
        v8 = v2[13];
        v9 = *(_OWORD *)(v2 + 11);
        v10 = v2[17];
        v11 = *(_OWORD *)(v2 + 15);
        v25 = *(float64x2_t *)(v2 + 7);
        v26 = v7;
        v27 = v9;
        v28 = v8;
        v29 = v11;
        v30 = v10;
        v32 = 0;
        v31 = 0uLL;
        sub_239458B60(&v25, (double *)&v31);
        _V1.D[1] = *((_QWORD *)&v31 + 1);
        _D5 = *((_QWORD *)&v31 + 1);
        __asm { FMLA            D4, D5, V1.D[1] }
        _D1 = v2[20];
        __asm { FMLA            D0, D1, V3.D[1] }
        v4 = v4 + _D0 + *((double *)v2 + 21) * *((double *)v2 + 21);
      }
      v21 = (_QWORD *)v2[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v2[2];
          _ZF = *v22 == (_QWORD)v2;
          v2 = v22;
        }
        while (!_ZF);
      }
      v2 = v22;
    }
    while (v22 != v3);
  }
  v5 = (double *)a1[10];
  if (v5 != (double *)(a1 + 11))
  {
    do
    {
      if ((*((_BYTE *)v5 + 68) & 2) == 0 && *((_BYTE *)v5 + 44))
        v4 = v4 + v5[7] * v5[7];
      v23 = (double *)*((_QWORD *)v5 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(double **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (double *)*((_QWORD *)v5 + 2);
          _ZF = *(_QWORD *)v24 == (_QWORD)v5;
          v5 = v24;
        }
        while (!_ZF);
      }
      v5 = v24;
    }
    while (v24 != (double *)(a1 + 11));
  }
  return v4;
}

uint64_t sub_239C96EA4(uint64_t a1, _QWORD *a2)
{
  float64x2_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  double v10;
  double v18;
  double cosval;
  double v20;
  __double2 v21;
  float64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  double v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  _QWORD *v41;
  _QWORD *v42;
  double *v43;
  uint64_t result;
  uint64_t v45;
  double v46;
  double *v47;
  double *v48;
  float64x2_t v49;

  kdebug_trace();
  v5 = *(_QWORD **)(a1 + 456);
  v6 = (_QWORD *)v5[1];
  if (v6 != v5 + 2)
  {
    do
    {
      v7 = *((unsigned int *)v6 + 46);
      if ((_DWORD)v7 != -1)
      {
        *(_OWORD *)(v6 + 25) = *(_OWORD *)(v6 + 7);
        *(_OWORD *)(v6 + 27) = *(_OWORD *)(v6 + 9);
        *(_OWORD *)(v6 + 29) = *(_OWORD *)(v6 + 11);
        *(_OWORD *)(v6 + 31) = *(_OWORD *)(v6 + 13);
        v8 = *(_OWORD *)(v6 + 21);
        *(_OWORD *)(v6 + 37) = *(_OWORD *)(v6 + 19);
        *(_OWORD *)(v6 + 39) = v8;
        *(_OWORD *)(v6 + 35) = *(_OWORD *)(v6 + 17);
        *(_OWORD *)(v6 + 33) = *(_OWORD *)(v6 + 15);
        v9 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 560) + 4 * v7);
        v10 = *(double *)(v9 + 16);
        _Q7 = *(float64x2_t *)v9;
        _D13 = *(double *)(v9 + 8);
        _Q0 = vmulq_f64(_Q7, _Q7);
        __asm { FMLA            D0, D13, V7.D[1] }
        v18 = _Q0.f64[0] + v10 * v10;
        if (v18 >= 0.0000002635)
        {
          v20 = sqrt(v18);
          v49 = *(float64x2_t *)v9;
          v21 = __sincos_stret(v20);
          cosval = v21.__cosval;
          _Q7.f64[0] = v49.f64[0];
          _Q0.f64[0] = v21.__sinval / v20;
          v4.f64[0] = 1.0 / v18 * (1.0 - v21.__cosval);
        }
        else
        {
          v4.f64[0] = 0.5 - v18 * (v18 / -720.0 + 0.0416666667);
          _Q0.f64[0] = 1.0 - v18 * (0.166666667 - v18 * (v18 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v18 * v4.f64[0];
        }
        v22 = _Q7.f64[0] * v4.f64[0];
        v23 = _D13 * v4.f64[0];
        v24 = cosval + _Q7.f64[0] * v4.f64[0] * _Q7.f64[0];
        v25 = cosval + _D13 * v4.f64[0] * _D13;
        v26 = cosval + v10 * v4.f64[0] * v10;
        v4.f64[0] = _D13 * (_Q7.f64[0] * v4.f64[0]);
        v27 = v10 * v22;
        v28 = v10 * v23;
        v29 = _Q7.f64[0] * _Q0.f64[0];
        v30 = _D13 * _Q0.f64[0];
        _Q0.f64[0] = v10 * _Q0.f64[0];
        v31 = v4.f64[0] - _Q0.f64[0];
        v32 = v30 + v27;
        _Q0.f64[0] = v4.f64[0] + _Q0.f64[0];
        v4.f64[0] = v28 - v29;
        v33 = v27 - v30;
        v34 = v29 + v28;
        v35 = *((double *)v6 + 9);
        v36 = *(float64x2_t *)(v6 + 7);
        v37 = *((double *)v6 + 13);
        v38 = *(float64x2_t *)(v6 + 11);
        v39 = *((double *)v6 + 17);
        v40 = *(float64x2_t *)(v6 + 15);
        *((double *)v6 + 9) = v35 * v24 + v37 * _Q0.f64[0] + v39 * v33;
        *(float64x2_t *)(v6 + 7) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v24), v38, _Q0.f64[0]), v40, v33);
        *((double *)v6 + 13) = v35 * v31 + v37 * v25 + v39 * v34;
        *(float64x2_t *)(v6 + 11) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v31), v38, v25), v40, v34);
        *((double *)v6 + 17) = v35 * v32 + v37 * v4.f64[0] + v39 * v26;
        *(float64x2_t *)(v6 + 15) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v32), v38, v4.f64[0]), v40, v26);
        _Q0.f64[0] = (float64_t)v6[21];
        v4.f64[0] = *(float64_t *)(v9 + 40);
        *(float64x2_t *)(v6 + 19) = vaddq_f64(*(float64x2_t *)(v6 + 19), *(float64x2_t *)(v9 + 24));
        v6[21] = *(_OWORD *)&vaddq_f64(_Q0, v4);
      }
      v41 = (_QWORD *)v6[1];
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (_QWORD *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (_QWORD *)v6[2];
          _ZF = *v42 == (_QWORD)v6;
          v6 = v42;
        }
        while (!_ZF);
      }
      v6 = v42;
    }
    while (v42 != v5 + 2);
  }
  v43 = (double *)v5[4];
  if (v43 != (double *)(v5 + 5))
  {
    do
    {
      v45 = *((unsigned int *)v43 + 16);
      if ((_DWORD)v45 != -1)
      {
        v46 = v43[7];
        v43[10] = v46;
        v43[7] = *(double *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 584) + 4 * v45)) + v46;
      }
      v47 = (double *)*((_QWORD *)v43 + 1);
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = *(double **)v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = (double *)*((_QWORD *)v43 + 2);
          _ZF = *(_QWORD *)v48 == (_QWORD)v43;
          v43 = v48;
        }
        while (!_ZF);
      }
      v43 = v48;
    }
    while (v48 != (double *)(v5 + 5));
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 298) = *(_BYTE *)(a1 + 297);
  *(_WORD *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 299) = 0;
  return result;
}

BOOL sub_239C97220(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[6];
  uint64_t v15;

  v4 = a1 + 896;
  v13 = *(_QWORD *)(a1 + 840);
  v5 = *(_OWORD *)(a1 + 824);
  v11 = *(_OWORD *)(a1 + 808);
  v12 = v5;
  WORD4(v12) = WORD4(v5) & 0xFFF1 | 0xC;
  if (*(_DWORD *)(a1 + 896) != 2)
  {
    sub_239A23A84(a1 + 904);
    *(_DWORD *)(a1 + 896) = 2;
  }
  *(_DWORD *)(v4 + 8) = -3;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 930) = 0u;
  *(_OWORD *)(a1 + 946) = 0u;
  *(_DWORD *)(a1 + 912) = -3;
  *(_DWORD *)(a1 + 924) = 0;
  *(_QWORD *)(v4 + 20) = 0;
  *(_WORD *)(a1 + 928) = 1;
  *(_BYTE *)(a1 + 976) = 1;
  *(_QWORD *)(v4 + 88) = 0;
  sub_239A23AC4(SparseFactorizationCholesky, (uint64_t)&v11, (uint64_t)v14);
  v6 = v14[2];
  *(_OWORD *)(v4 + 56) = v14[3];
  v7 = v14[5];
  *(_OWORD *)(v4 + 72) = v14[4];
  *(_OWORD *)(v4 + 88) = v7;
  v8 = v14[1];
  *(_OWORD *)(v4 + 8) = v14[0];
  *(_OWORD *)(v4 + 24) = v8;
  *(_QWORD *)(a1 + 1000) = v15;
  *(_OWORD *)(v4 + 40) = v6;
  v9 = *(_DWORD *)(v4 + 8);
  switch(v9)
  {
    case -4:
    case -3:
      goto LABEL_6;
    case -2:
    case -1:
      v9 = 1;
      goto LABEL_7;
    case 0:
      goto LABEL_7;
    default:
      if (v9 == -2147483647)
      {
LABEL_6:
        v9 = 2;
LABEL_7:
        *(_DWORD *)v4 = v9;
      }
      else
      {
        v9 = *(_DWORD *)v4;
      }
      *(_BYTE *)(a1 + 296) = v9 == 0;
      if (v9)
        return 1;
      sub_239C7B08C(v4, a2, (uint64_t)a2);
      return *(_BYTE *)(a1 + 296) == 0;
  }
}

uint64_t sub_239C97390()
{
  return 1;
}

uint64_t sub_239C97398()
{
  return 0;
}

void sub_239C973A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFC4F8;
  if (*(_DWORD *)(a1 + 896) != 2)
    sub_239A23A84(a1 + 904);
  sub_239C935B0(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239C973F8(uint64_t a1)
{
  return sub_239C7AF40(a1 + 336);
}

uint64_t sub_239C97400(uint64_t result, double a2)
{
  *(double *)(result + 320) = a2;
  return result;
}

uint64_t sub_239C97408(uint64_t result, char a2)
{
  *(_BYTE *)(result + 760) = a2;
  return result;
}

uint64_t sub_239C97410(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 760);
}

BOOL sub_239C97418(_QWORD *a1)
{
  return ((a1[93] - a1[92]) >> 2) + ((a1[90] - a1[89]) >> 2) != 0;
}

uint64_t sub_239C97444(uint64_t a1)
{
  return a1 + 640;
}

uint64_t sub_239C9744C(uint64_t a1)
{
  return a1 + 640;
}

double sub_239C97454(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(unsigned int *)(a1 + 352);
  if (v4 != (_DWORD)v5)
  {
    *(_DWORD *)(a2 + 16) = v5;
    sub_23945215C(a2, v5);
  }
  v7 = *(unsigned int *)(a1 + 360);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 368);
    v10 = 4 * v7;
    do
    {
      v11 = (__int128 *)(*(_QWORD *)(a1 + 336) + 8 * v9);
      v12 = (_OWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 560) + v8));
      v6 = v11[2];
      v13 = *v11;
      v12[1] = v11[1];
      v12[2] = v6;
      *v12 = v13;
      v8 += 4;
      v9 += 6;
    }
    while (v10 != v8);
  }
  v14 = *(unsigned int *)(a1 + 364);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = *(_DWORD *)(a1 + 372);
    do
    {
      *(_QWORD *)&v6 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * (v16 + v15));
      *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 584) + 4 * v15++)) = v6;
    }
    while (v14 != v15);
  }
  return *(double *)&v6;
}

void sub_239C97514(uint64_t a1, uint64_t a2)
{
  sub_239C7AA00((_QWORD *)(a1 + 376), a2, a1 + 560);
}

BOOL sub_239C97524(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  unsigned int v6;
  uint64_t v7;
  int v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  _QWORD v12[2];
  void *memptr;
  _QWORD *v14;

  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  v1 = *(_DWORD *)(a1 + 896);
  if (!v1)
  {
    *(_QWORD *)(a1 + 880) = *(_QWORD *)(a1 + 464) + 72;
    *(_QWORD *)(a1 + 888) = a1 + 512;
    v3 = *(_DWORD *)(a1 + 920) * *(unsigned __int8 *)(a1 + 928);
    *(_DWORD *)(a1 + 872) = v3;
    *(_DWORD *)(a1 + 876) = v3;
    sub_23945215C(a1 + 856, v3 * (unint64_t)v3);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * v3 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v4 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if ((_DWORD)v3)
    {
      bzero(memptr, 8 * v3);
      for (i = 0; i != v3; ++i)
      {
        v4[i] = 0x3FF0000000000000;
        v6 = *(_DWORD *)(a1 + 872);
        v7 = *(_QWORD *)(a1 + 856);
        v8 = *(_DWORD *)(a1 + 896);
        if (v4 == (_QWORD *)(v7 + 8 * v6 * i))
        {
          if (!v8 && v6 == *(_DWORD *)(a1 + 916) * *(unsigned __int8 *)(a1 + 928))
          {
            v14 = v4;
            memptr = (void *)v6;
            sub_239A2424C(a1 + 904, (uint64_t)&memptr, 0);
          }
        }
        else if (!v8 && (_DWORD)v3 == *(_DWORD *)(a1 + 916) * *(unsigned __int8 *)(a1 + 928))
        {
          v14 = v4;
          memptr = (void *)v3;
          v12[1] = v7 + 8 * v6 * i;
          v12[0] = v6;
          if (v7)
            sub_239A23C90(a1 + 904, (uint64_t)v12, (uint64_t)&memptr, 0);
        }
        v4[i] = 0;
      }
    }
    free(v4);
  }
  return v1 == 0;
}

void sub_239C976C8(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

float64x2_t *sub_239C976DC(uint64_t a1)
{
  float64x2_t *result;
  double *v2;
  double *v3;
  float64x2_t **v4;
  int v5;
  double v6;
  unint64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  uint64_t v218;
  int8x16_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  int8x16_t v260;
  int8x16_t v261;
  unint64_t v262;
  float64x2_t *v263;
  int8x16_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  int8x16_t v268;
  int8x16_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  int8x16_t v273;
  int8x16_t v274;
  unint64_t v275;
  unint64_t v276;
  int8x16_t v277;
  int8x16_t v278;
  unint64_t v279;
  unint64_t v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int8x16_t v313;
  int8x16_t v314;
  int8x16_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int8x16_t v318;
  int8x16_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  int8x16_t v340;
  int8x16_t v341;
  int8x16_t v342;
  int8x16_t v343;
  int8x16_t v344;
  double v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t *v416;
  _QWORD *v417;
  float64x2_t *v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  double v810;
  float64x2_t *v811;
  unint64_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t *v851;
  _QWORD *v852;
  __int128 v854;
  __int128 v855;
  __int128 v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  _BYTE v868[1152];
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  int8x16_t v875;
  int8x16_t v876;
  int8x16_t v877;
  int8x16_t v878;
  int8x16_t v879;
  int8x16_t v880;
  int8x16_t v881;
  int8x16_t v882;
  int8x16_t v883;
  int8x16_t v884;
  int8x16_t v885;
  int8x16_t v886;
  int8x16_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  float64x2_t v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  float64x2_t v904;
  float64x2_t v905;
  float64x2_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  int8x16_t v919;
  int8x16_t v920;
  int8x16_t v921;
  int8x16_t v922;
  int8x16_t v923;
  int8x16_t v924;
  int8x16_t v925;
  int8x16_t v926;
  int8x16_t v927;
  int8x16_t v928;
  int8x16_t v929;
  int8x16_t v930;
  int8x16_t v931;
  int8x16_t v932;
  int8x16_t v933;
  int8x16_t v934;
  int8x16_t v935;
  int8x16_t v936;
  int8x16_t v937;
  int8x16_t v938;
  int8x16_t v939;
  int8x16_t v940;
  int8x16_t v941;
  int8x16_t v942;
  int8x16_t v943;
  int8x16_t v944;
  int8x16_t v945;
  int8x16_t v946;
  int8x16_t v947;
  int8x16_t v948;
  int8x16_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  int8x16_t v954;
  __int128 v955;
  __int128 v956;
  __int128 v957;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  __int128 v964;
  __int128 v965;
  __int128 v966;
  __int128 v967;
  __int128 v968;
  __int128 v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  __int128 v981;
  __int128 v982;
  int8x16_t v983;
  int8x16_t v984;
  int8x16_t v985;
  int8x16_t v986;
  int8x16_t v987;
  int8x16_t v988;
  int8x16_t v989;
  int8x16_t v990;
  int8x16_t v991;
  int8x16_t v992;
  int8x16_t v993;
  int8x16_t v994;
  int8x16_t v995;
  int8x16_t v996;
  int8x16_t v997;
  int8x16_t v998;
  int8x16_t v999;
  int8x16_t v1000;
  int8x16_t v1001;
  int8x16_t v1002;
  int8x16_t v1003;
  int8x16_t v1004;
  int8x16_t v1005;
  int8x16_t v1006;
  int8x16_t v1007;
  int8x16_t v1008;
  int8x16_t v1009;
  int8x16_t v1010;
  int8x16_t v1011;
  int8x16_t v1012;
  int8x16_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  int8x16_t v1018;
  __int128 v1019;
  __int128 v1020;
  __int128 v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  __int128 v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  __int128 v1034;
  __int128 v1035;
  __int128 v1036;
  __int128 v1037;
  __int128 v1038;
  __int128 v1039;
  __int128 v1040;
  __int128 v1041;
  __int128 v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  int8x16_t v1047;
  int8x16_t v1048;
  int8x16_t v1049;
  int8x16_t v1050;
  int8x16_t v1051;
  int8x16_t v1052;
  int8x16_t v1053;
  int8x16_t v1054;
  int8x16_t v1055;
  int8x16_t v1056;
  int8x16_t v1057;
  int8x16_t v1058;
  int8x16_t v1059;
  int8x16_t v1060;
  int8x16_t v1061;
  int8x16_t v1062;
  int8x16_t v1063;
  int8x16_t v1064;
  int8x16_t v1065;
  int8x16_t v1066;
  int8x16_t v1067;
  int8x16_t v1068;
  int8x16_t v1069;
  int8x16_t v1070;
  int8x16_t v1071;
  int8x16_t v1072;
  int8x16_t v1073;
  int8x16_t v1074;
  int8x16_t v1075;
  int8x16_t v1076;
  int8x16_t v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  int8x16_t v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  __int128 v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  int8x16_t v1111;
  int8x16_t v1112;
  int8x16_t v1113;
  int8x16_t v1114;
  int8x16_t v1115;
  int8x16_t v1116;
  int8x16_t v1117;
  int8x16_t v1118;
  int8x16_t v1119;
  int8x16_t v1120;
  int8x16_t v1121;
  int8x16_t v1122;
  int8x16_t v1123;
  int8x16_t v1124;
  int8x16_t v1125;
  int8x16_t v1126;
  int8x16_t v1127;
  int8x16_t v1128;
  int8x16_t v1129;
  int8x16_t v1130;
  int8x16_t v1131;
  int8x16_t v1132;
  int8x16_t v1133;
  int8x16_t v1134;
  int8x16_t v1135;
  int8x16_t v1136;
  int8x16_t v1137;
  int8x16_t v1138;
  int8x16_t v1139;
  float64x2_t v1140;
  int8x16_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  int8x16_t v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  __int128 v1172;
  __int128 v1173;
  __int128 v1174;
  int8x16_t v1175;
  int8x16_t v1176;
  int8x16_t v1177;
  int8x16_t v1178;
  int8x16_t v1179;
  int8x16_t v1180;
  int8x16_t v1181;
  int8x16_t v1182;
  int8x16_t v1183;
  int8x16_t v1184;
  int8x16_t v1185;
  int8x16_t v1186;
  int8x16_t v1187;
  int8x16_t v1188;
  int8x16_t v1189;
  int8x16_t v1190;
  int8x16_t v1191;
  int8x16_t v1192;
  int8x16_t v1193;
  int8x16_t v1194;
  int8x16_t v1195;
  int8x16_t v1196;
  int8x16_t v1197;
  int8x16_t v1198;
  int8x16_t v1199;
  int8x16_t v1200;
  int8x16_t v1201;
  int8x16_t v1202;
  int8x16_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  __int128 v1211;
  __int128 v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  __int128 v1225;
  __int128 v1226;
  __int128 v1227;
  __int128 v1228;
  __int128 v1229;
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  __int128 v1233;
  __int128 v1234;
  __int128 v1235;
  __int128 v1236;
  __int128 v1237;
  __int128 v1238;
  int8x16_t v1239;
  int8x16_t v1240;
  int8x16_t v1241;
  int8x16_t v1242;
  int8x16_t v1243;
  int8x16_t v1244;
  int8x16_t v1245;
  int8x16_t v1246;
  int8x16_t v1247;
  int8x16_t v1248;
  int8x16_t v1249;
  int8x16_t v1250;
  int8x16_t v1251;
  int8x16_t v1252;
  int8x16_t v1253;
  int8x16_t v1254;
  int8x16_t v1255;
  int8x16_t v1256;
  int8x16_t v1257;
  int8x16_t v1258;
  int8x16_t v1259;
  int8x16_t v1260;
  int8x16_t v1261;
  int8x16_t v1262;
  int8x16_t v1263;
  int8x16_t v1264;
  int8x16_t v1265;
  int8x16_t v1266;
  int8x16_t v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  float64x2_t v1270;
  float64x2_t v1271;
  float64x2_t v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  __int128 v1275;
  __int128 v1276;
  __int128 v1277;
  __int128 v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  __int128 v1283;
  __int128 v1284;
  __int128 v1285;
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  __int128 v1290;
  __int128 v1291;
  __int128 v1292;
  __int128 v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  __int128 v1302;
  int8x16_t v1303;
  int8x16_t v1304;
  int8x16_t v1305;
  int8x16_t v1306;
  int8x16_t v1307;
  int8x16_t v1308;
  int8x16_t v1309;
  int8x16_t v1310;
  int8x16_t v1311;
  int8x16_t v1312;
  int8x16_t v1313;
  int8x16_t v1314;
  int8x16_t v1315;
  int8x16_t v1316;
  int8x16_t v1317;
  int8x16_t v1318;
  int8x16_t v1319;
  int8x16_t v1320;
  int8x16_t v1321;
  int8x16_t v1322;
  int8x16_t v1323;
  int8x16_t v1324;
  int8x16_t v1325;
  int8x16_t v1326;
  int8x16_t v1327;
  int8x16_t v1328;
  int8x16_t v1329;
  int8x16_t v1330;
  int8x16_t v1331;
  float64x2_t v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  __int128 v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  __int128 v1352;
  __int128 v1353;
  __int128 v1354;
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  __int128 v1362;
  __int128 v1363;
  __int128 v1364;
  __int128 v1365;
  __int128 v1366;
  int8x16_t v1367;
  int8x16_t v1368;
  int8x16_t v1369;
  int8x16_t v1370;
  int8x16_t v1371;
  int8x16_t v1372;
  int8x16_t v1373;
  int8x16_t v1374;
  int8x16_t v1375;
  int8x16_t v1376;
  int8x16_t v1377;
  int8x16_t v1378;
  int8x16_t v1379;
  int8x16_t v1380;
  int8x16_t v1381;
  int8x16_t v1382;
  int8x16_t v1383;
  int8x16_t v1384;
  int8x16_t v1385;
  int8x16_t v1386;
  int8x16_t v1387;
  int8x16_t v1388;
  int8x16_t v1389;
  int8x16_t v1390;
  int8x16_t v1391;
  int8x16_t v1392;
  int8x16_t v1393;
  int8x16_t v1394;
  int8x16_t v1395;
  float64x2_t v1396;
  float64x2_t v1397;
  float64x2_t v1398;
  float64x2_t v1399;
  float64x2_t v1400;
  float64x2_t v1401;
  float64x2_t v1402;
  __int128 v1403;
  __int128 v1404;
  __int128 v1405;
  __int128 v1406;
  __int128 v1407;
  __int128 v1408;
  __int128 v1409;
  __int128 v1410;
  __int128 v1411;
  __int128 v1412;
  __int128 v1413;
  __int128 v1414;
  __int128 v1415;
  __int128 v1416;
  __int128 v1417;
  __int128 v1418;
  __int128 v1419;
  __int128 v1420;
  __int128 v1421;
  __int128 v1422;
  __int128 v1423;
  __int128 v1424;
  __int128 v1425;
  __int128 v1426;
  __int128 v1427;
  __int128 v1428;
  __int128 v1429;
  __int128 v1430;
  int8x16_t v1431;
  int8x16_t v1432;
  int8x16_t v1433;
  int8x16_t v1434;
  int8x16_t v1435;
  int8x16_t v1436;
  int8x16_t v1437;
  int8x16_t v1438;
  int8x16_t v1439;
  int8x16_t v1440;
  int8x16_t v1441;
  int8x16_t v1442;
  int8x16_t v1443;
  int8x16_t v1444;
  __int128 v1445;
  int8x16_t v1446;
  int8x16_t v1447;
  int8x16_t v1448;
  int8x16_t v1449;
  __int128 v1450;
  int8x16_t v1451;
  int8x16_t v1452;
  int8x16_t v1453;
  int8x16_t v1454;
  int8x16_t v1455;
  int8x16_t v1456;
  int8x16_t v1457;
  int8x16_t v1458;
  __int128 v1459;
  float64x2_t v1460;
  float64x2_t v1461;
  float64x2_t v1462;
  float64x2_t v1463;
  float64x2_t v1464;
  float64x2_t v1465;
  float64x2_t v1466;
  __int128 v1467;
  __int128 v1468;
  __int128 v1469;
  __int128 v1470;
  __int128 v1471;
  __int128 v1472;
  __int128 v1473;
  __int128 v1474;
  __int128 v1475;
  __int128 v1476;
  __int128 v1477;
  __int128 v1478;
  __int128 v1479;
  __int128 v1480;
  __int128 v1481;
  __int128 v1482;
  __int128 v1483;
  __int128 v1484;
  __int128 v1485;
  __int128 v1486;
  __int128 v1487;
  __int128 v1488;
  __int128 v1489;
  __int128 v1490;
  __int128 v1491;
  __int128 v1492;
  __int128 v1493;
  __int128 v1494;
  int8x16_t v1495;
  int8x16_t v1496;
  int8x16_t v1497;
  int8x16_t v1498;
  int8x16_t v1499;
  int8x16_t v1500;
  int8x16_t v1501;
  int8x16_t v1502;
  int8x16_t v1503;
  int8x16_t v1504;
  int8x16_t v1505;
  int8x16_t v1506;
  __int128 v1507;
  int8x16_t v1508;
  __int128 v1509;
  __int128 v1510;
  int8x16_t v1511;
  __int128 v1512;
  __int128 v1513;
  __int128 v1514;
  __int128 v1515;
  __int128 v1516;
  __int128 v1517;
  __int128 v1518;
  __int128 v1519;
  __int128 v1520;
  __int128 v1521;
  __int128 v1522;
  __int128 v1523;
  float64x2_t v1524;
  float64x2_t v1525;
  float64x2_t v1526;
  float64x2_t v1527;
  float64x2_t v1528;
  float64x2_t v1529;
  float64x2_t v1530;
  __int128 v1531;
  __int128 v1532;
  __int128 v1533;
  __int128 v1534;
  __int128 v1535;
  __int128 v1536;
  __int128 v1537;
  __int128 v1538;
  __int128 v1539;
  __int128 v1540;
  __int128 v1541;
  __int128 v1542;
  __int128 v1543;
  __int128 v1544;
  __int128 v1545;
  __int128 v1546;
  __int128 v1547;
  __int128 v1548;
  __int128 v1549;
  __int128 v1550;
  __int128 v1551;
  __int128 v1552;
  __int128 v1553;
  __int128 v1554;
  __int128 v1555;
  __int128 v1556;
  __int128 v1557;
  __int128 v1558;
  int8x16_t v1559;
  int8x16_t v1560;
  int8x16_t v1561;
  int8x16_t v1562;
  int8x16_t v1563;
  int8x16_t v1564;
  int8x16_t v1565;
  int8x16_t v1566;
  int8x16_t v1567;
  int8x16_t v1568;
  int8x16_t v1569;
  int8x16_t v1570;
  __int128 v1571;
  int8x16_t v1572;
  __int128 v1573;
  __int128 v1574;
  int8x16_t v1575;
  __int128 v1576;
  __int128 v1577;
  __int128 v1578;
  __int128 v1579;
  __int128 v1580;
  __int128 v1581;
  __int128 v1582;
  __int128 v1583;
  __int128 v1584;
  __int128 v1585;
  __int128 v1586;
  __int128 v1587;
  float64x2_t v1588;
  float64x2_t v1589;
  float64x2_t v1590;
  float64x2_t v1591;
  float64x2_t v1592;
  float64x2_t v1593;
  float64x2_t v1594;
  __int128 v1595;
  __int128 v1596;
  __int128 v1597;
  __int128 v1598;
  __int128 v1599;
  __int128 v1600;
  __int128 v1601;
  __int128 v1602;
  __int128 v1603;
  __int128 v1604;
  __int128 v1605;
  __int128 v1606;
  __int128 v1607;
  __int128 v1608;
  __int128 v1609;
  __int128 v1610;
  __int128 v1611;
  __int128 v1612;
  __int128 v1613;
  __int128 v1614;
  __int128 v1615;
  __int128 v1616;
  __int128 v1617;
  __int128 v1618;
  __int128 v1619;
  __int128 v1620;
  __int128 v1621;
  __int128 v1622;
  int8x16_t v1623;
  int8x16_t v1624;
  int8x16_t v1625;
  int8x16_t v1626;
  int8x16_t v1627;
  int8x16_t v1628;
  int8x16_t v1629;
  int8x16_t v1630;
  int8x16_t v1631;
  int8x16_t v1632;
  int8x16_t v1633;
  int8x16_t v1634;
  __int128 v1635;
  int8x16_t v1636;
  __int128 v1637;
  __int128 v1638;
  int8x16_t v1639;
  __int128 v1640;
  __int128 v1641;
  __int128 v1642;
  __int128 v1643;
  __int128 v1644;
  __int128 v1645;
  __int128 v1646;
  __int128 v1647;
  __int128 v1648;
  __int128 v1649;
  __int128 v1650;
  __int128 v1651;
  float64x2_t v1652;
  float64x2_t v1653;
  float64x2_t v1654;
  float64x2_t v1655;
  float64x2_t v1656;
  float64x2_t v1657;
  float64x2_t v1658;
  __int128 v1659;
  __int128 v1660;
  __int128 v1661;
  __int128 v1662;
  __int128 v1663;
  __int128 v1664;
  __int128 v1665;
  __int128 v1666;
  __int128 v1667;
  __int128 v1668;
  __int128 v1669;
  __int128 v1670;
  __int128 v1671;
  __int128 v1672;
  __int128 v1673;
  __int128 v1674;
  __int128 v1675;
  __int128 v1676;
  __int128 v1677;
  __int128 v1678;
  __int128 v1679;
  __int128 v1680;
  __int128 v1681;
  __int128 v1682;
  __int128 v1683;
  __int128 v1684;
  __int128 v1685;
  __int128 v1686;
  _QWORD v1687[144];
  uint64_t v1688;

  result = (float64x2_t *)MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = (float64x2_t **)result;
  v1688 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(**(_QWORD **)&result[1].f64[1] + 4))
  {
    v5 = LODWORD(result[1].f64[0]);
    v6 = *v2;
    v7 = *(_QWORD *)&result->f64[0];
    result = *(float64x2_t **)&result->f64[1];
    switch(v5)
    {
      case 0:
        v8 = vmulq_n_f64(result[6], v6);
        v9 = vmulq_n_f64(result[5], v6);
        v10 = vmulq_n_f64(result[4], v6);
        v11 = vmulq_n_f64(result[3], v6);
        v12 = vmulq_n_f64(result[2], v6);
        v13 = vmulq_n_f64(result[1], v6);
        v14 = vmulq_n_f64(result[12], v6);
        v15 = vmulq_n_f64(result[11], v6);
        v16 = vmulq_n_f64(result[10], v6);
        v17 = vmulq_n_f64(result[9], v6);
        v18 = vmulq_n_f64(result[8], v6);
        v19 = vmulq_n_f64(result[7], v6);
        v20 = *(float64x2_t *)v7;
        v21 = vmlaq_laneq_f64(vmulq_n_f64(v13, *(double *)v7), v19, *(float64x2_t *)v7, 1);
        v22 = *(float64x2_t *)(v7 + 96);
        v23 = *(float64x2_t *)(v7 + 192);
        v24 = vmlaq_laneq_f64(vmulq_n_f64(v12, *(double *)v7), v18, *(float64x2_t *)v7, 1);
        v918 = vmlaq_laneq_f64(vmulq_n_f64(v11, *(double *)v7), v17, *(float64x2_t *)v7, 1);
        v25 = vmlaq_laneq_f64(vmulq_n_f64(v10, v20.f64[0]), v16, v20, 1);
        v26 = vmlaq_laneq_f64(vmulq_n_f64(v9, v20.f64[0]), v15, v20, 1);
        v917 = vmlaq_laneq_f64(vmulq_n_f64(v8, v20.f64[0]), v14, v20, 1);
        v27 = vmlaq_laneq_f64(vmulq_n_f64(v13, v22.f64[0]), v19, v22, 1);
        v28 = vmlaq_laneq_f64(vmulq_n_f64(v12, v22.f64[0]), v18, v22, 1);
        v916 = vmlaq_laneq_f64(vmulq_n_f64(v11, v22.f64[0]), v17, v22, 1);
        v899 = vmlaq_laneq_f64(vmulq_n_f64(v10, v22.f64[0]), v16, v22, 1);
        v898 = vmlaq_laneq_f64(vmulq_n_f64(v9, v22.f64[0]), v15, v22, 1);
        v29 = vmlaq_laneq_f64(vmulq_n_f64(v13, v23.f64[0]), v19, v23, 1);
        v914 = vmlaq_laneq_f64(vmulq_n_f64(v12, v23.f64[0]), v18, v23, 1);
        v915 = vmlaq_laneq_f64(vmulq_n_f64(v8, v22.f64[0]), v14, v22, 1);
        v912 = vmlaq_laneq_f64(vmulq_n_f64(v11, v23.f64[0]), v17, v23, 1);
        v911 = vmlaq_laneq_f64(vmulq_n_f64(v10, v23.f64[0]), v16, v23, 1);
        v913 = vmlaq_laneq_f64(vmulq_n_f64(v9, v23.f64[0]), v15, v23, 1);
        v910 = vmlaq_laneq_f64(vmulq_n_f64(v8, v23.f64[0]), v14, v23, 1);
        v30 = *(float64x2_t *)(v7 + 288);
        v909 = vmlaq_laneq_f64(vmulq_n_f64(v13, v30.f64[0]), v19, v30, 1);
        v908 = vmlaq_laneq_f64(vmulq_n_f64(v12, v30.f64[0]), v18, v30, 1);
        v907 = vmlaq_laneq_f64(vmulq_n_f64(v11, v30.f64[0]), v17, v30, 1);
        v906 = vmlaq_laneq_f64(vmulq_n_f64(v10, v30.f64[0]), v16, v30, 1);
        v905 = vmlaq_laneq_f64(vmulq_n_f64(v9, v30.f64[0]), v15, v30, 1);
        v904 = vmlaq_laneq_f64(vmulq_n_f64(v8, v30.f64[0]), v14, v30, 1);
        v31 = *(float64x2_t *)(v7 + 384);
        v903 = vmlaq_laneq_f64(vmulq_n_f64(v13, v31.f64[0]), v19, v31, 1);
        v902 = vmlaq_laneq_f64(vmulq_n_f64(v12, v31.f64[0]), v18, v31, 1);
        v901 = vmlaq_laneq_f64(vmulq_n_f64(v11, v31.f64[0]), v17, v31, 1);
        v900 = vmlaq_laneq_f64(vmulq_n_f64(v10, v31.f64[0]), v16, v31, 1);
        v897 = vmlaq_laneq_f64(vmulq_n_f64(v9, v31.f64[0]), v15, v31, 1);
        v32 = vmlaq_laneq_f64(vmulq_n_f64(v8, v31.f64[0]), v14, v31, 1);
        v33 = *(float64x2_t *)(v7 + 480);
        v896 = vmlaq_laneq_f64(vmulq_n_f64(v13, v33.f64[0]), v19, v33, 1);
        v895 = vmlaq_laneq_f64(vmulq_n_f64(v12, v33.f64[0]), v18, v33, 1);
        v894 = vmlaq_laneq_f64(vmulq_n_f64(v11, v33.f64[0]), v17, v33, 1);
        v34 = vmlaq_laneq_f64(vmulq_n_f64(v10, v33.f64[0]), v16, v33, 1);
        v35 = vmlaq_laneq_f64(vmulq_n_f64(v9, v33.f64[0]), v15, v33, 1);
        v36 = vmlaq_laneq_f64(vmulq_n_f64(v8, v33.f64[0]), v14, v33, 1);
        v37 = vmulq_n_f64(result[18], v6);
        v38 = vmulq_n_f64(result[17], v6);
        v39 = vmulq_n_f64(result[16], v6);
        v40 = vmulq_n_f64(result[15], v6);
        v41 = vmulq_n_f64(result[14], v6);
        v42 = vmulq_n_f64(result[13], v6);
        v43 = vmulq_n_f64(result[24], v6);
        v44 = vmulq_n_f64(result[23], v6);
        v45 = vmulq_n_f64(result[22], v6);
        v46 = vmulq_n_f64(result[21], v6);
        v47 = vmulq_n_f64(result[20], v6);
        v48 = vmulq_n_f64(result[19], v6);
        v49 = *(float64x2_t *)(v7 + 16);
        v50 = vmlaq_laneq_f64(vmlaq_n_f64(v21, v42, v49.f64[0]), v48, v49, 1);
        v51 = vmlaq_laneq_f64(vmlaq_n_f64(v24, v41, v49.f64[0]), v47, v49, 1);
        v918 = vmlaq_laneq_f64(vmlaq_n_f64(v918, v40, v49.f64[0]), v46, v49, 1);
        v52 = vmlaq_laneq_f64(vmlaq_n_f64(v25, v39, v49.f64[0]), v45, v49, 1);
        v53 = vmlaq_laneq_f64(vmlaq_n_f64(v26, v38, v49.f64[0]), v44, v49, 1);
        v917 = vmlaq_laneq_f64(vmlaq_n_f64(v917, v37, v49.f64[0]), v43, v49, 1);
        v54 = *(float64x2_t *)(v7 + 112);
        v55 = vmlaq_laneq_f64(vmlaq_n_f64(v27, v42, v54.f64[0]), v48, v54, 1);
        v56 = vmlaq_laneq_f64(vmlaq_n_f64(v28, v41, v54.f64[0]), v47, v54, 1);
        v916 = vmlaq_laneq_f64(vmlaq_n_f64(v916, v40, v54.f64[0]), v46, v54, 1);
        v57 = vmlaq_laneq_f64(vmlaq_n_f64(v899, v39, v54.f64[0]), v45, v54, 1);
        v58 = vmlaq_laneq_f64(vmlaq_n_f64(v898, v38, v54.f64[0]), v44, v54, 1);
        v915 = vmlaq_laneq_f64(vmlaq_n_f64(v915, v37, v54.f64[0]), v43, v54, 1);
        v59 = *(float64x2_t *)(v7 + 208);
        v60 = vmlaq_laneq_f64(vmlaq_n_f64(v29, v42, v59.f64[0]), v48, v59, 1);
        v914 = vmlaq_laneq_f64(vmlaq_n_f64(v914, v41, v59.f64[0]), v47, v59, 1);
        v912 = vmlaq_laneq_f64(vmlaq_n_f64(v912, v40, v59.f64[0]), v46, v59, 1);
        v911 = vmlaq_laneq_f64(vmlaq_n_f64(v911, v39, v59.f64[0]), v45, v59, 1);
        v913 = vmlaq_laneq_f64(vmlaq_n_f64(v913, v38, v59.f64[0]), v44, v59, 1);
        v910 = vmlaq_laneq_f64(vmlaq_n_f64(v910, v37, v59.f64[0]), v43, v59, 1);
        v61 = *(float64x2_t *)(v7 + 304);
        v909 = vmlaq_laneq_f64(vmlaq_n_f64(v909, v42, v61.f64[0]), v48, v61, 1);
        v908 = vmlaq_laneq_f64(vmlaq_n_f64(v908, v41, v61.f64[0]), v47, v61, 1);
        v907 = vmlaq_laneq_f64(vmlaq_n_f64(v907, v40, v61.f64[0]), v46, v61, 1);
        v906 = vmlaq_laneq_f64(vmlaq_n_f64(v906, v39, v61.f64[0]), v45, v61, 1);
        v905 = vmlaq_laneq_f64(vmlaq_n_f64(v905, v38, v61.f64[0]), v44, v61, 1);
        v904 = vmlaq_laneq_f64(vmlaq_n_f64(v904, v37, v61.f64[0]), v43, v61, 1);
        v62 = *(float64x2_t *)(v7 + 400);
        v903 = vmlaq_laneq_f64(vmlaq_n_f64(v903, v42, v62.f64[0]), v48, v62, 1);
        v902 = vmlaq_laneq_f64(vmlaq_n_f64(v902, v41, v62.f64[0]), v47, v62, 1);
        v901 = vmlaq_laneq_f64(vmlaq_n_f64(v901, v40, v62.f64[0]), v46, v62, 1);
        v900 = vmlaq_laneq_f64(vmlaq_n_f64(v900, v39, v62.f64[0]), v45, v62, 1);
        v63 = vmlaq_laneq_f64(vmlaq_n_f64(v897, v38, v62.f64[0]), v44, v62, 1);
        v64 = vmlaq_laneq_f64(vmlaq_n_f64(v32, v37, v62.f64[0]), v43, v62, 1);
        v65 = *(float64x2_t *)(v7 + 496);
        v66 = vmlaq_laneq_f64(vmlaq_n_f64(v896, v42, v65.f64[0]), v48, v65, 1);
        v67 = vmlaq_laneq_f64(vmlaq_n_f64(v895, v41, v65.f64[0]), v47, v65, 1);
        v68 = vmlaq_laneq_f64(vmlaq_n_f64(v894, v40, v65.f64[0]), v46, v65, 1);
        v69 = vmlaq_laneq_f64(vmlaq_n_f64(v34, v39, v65.f64[0]), v45, v65, 1);
        v70 = vmlaq_laneq_f64(vmlaq_n_f64(v35, v38, v65.f64[0]), v44, v65, 1);
        v71 = vmlaq_laneq_f64(vmlaq_n_f64(v36, v37, v65.f64[0]), v43, v65, 1);
        v72 = vmulq_n_f64(result[30], v6);
        v73 = vmulq_n_f64(result[29], v6);
        v74 = vmulq_n_f64(result[28], v6);
        v75 = vmulq_n_f64(result[27], v6);
        v76 = vmulq_n_f64(result[26], v6);
        v77 = vmulq_n_f64(result[25], v6);
        v78 = vmulq_n_f64(result[36], v6);
        v79 = vmulq_n_f64(result[35], v6);
        v80 = vmulq_n_f64(result[34], v6);
        v81 = vmulq_n_f64(result[33], v6);
        v82 = vmulq_n_f64(result[32], v6);
        v83 = vmulq_n_f64(result[31], v6);
        v84 = *(float64x2_t *)(v7 + 32);
        v85 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v77, v84.f64[0]), v83, v84, 1);
        v86 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v76, v84.f64[0]), v82, v84, 1);
        v918 = vmlaq_laneq_f64(vmlaq_n_f64(v918, v75, v84.f64[0]), v81, v84, 1);
        v87 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v74, v84.f64[0]), v80, v84, 1);
        v88 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v73, v84.f64[0]), v79, v84, 1);
        v917 = vmlaq_laneq_f64(vmlaq_n_f64(v917, v72, v84.f64[0]), v78, v84, 1);
        v89 = *(float64x2_t *)(v7 + 128);
        v90 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v77, v89.f64[0]), v83, v89, 1);
        v91 = vmlaq_laneq_f64(vmlaq_n_f64(v56, v76, v89.f64[0]), v82, v89, 1);
        v916 = vmlaq_laneq_f64(vmlaq_n_f64(v916, v75, v89.f64[0]), v81, v89, 1);
        v92 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v74, v89.f64[0]), v80, v89, 1);
        v93 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v73, v89.f64[0]), v79, v89, 1);
        v915 = vmlaq_laneq_f64(vmlaq_n_f64(v915, v72, v89.f64[0]), v78, v89, 1);
        v94 = *(float64x2_t *)(v7 + 224);
        v95 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v77, v94.f64[0]), v83, v94, 1);
        v914 = vmlaq_laneq_f64(vmlaq_n_f64(v914, v76, v94.f64[0]), v82, v94, 1);
        v912 = vmlaq_laneq_f64(vmlaq_n_f64(v912, v75, v94.f64[0]), v81, v94, 1);
        v911 = vmlaq_laneq_f64(vmlaq_n_f64(v911, v74, v94.f64[0]), v80, v94, 1);
        v913 = vmlaq_laneq_f64(vmlaq_n_f64(v913, v73, v94.f64[0]), v79, v94, 1);
        v910 = vmlaq_laneq_f64(vmlaq_n_f64(v910, v72, v94.f64[0]), v78, v94, 1);
        v96 = *(float64x2_t *)(v7 + 320);
        v909 = vmlaq_laneq_f64(vmlaq_n_f64(v909, v77, v96.f64[0]), v83, v96, 1);
        v908 = vmlaq_laneq_f64(vmlaq_n_f64(v908, v76, v96.f64[0]), v82, v96, 1);
        v907 = vmlaq_laneq_f64(vmlaq_n_f64(v907, v75, v96.f64[0]), v81, v96, 1);
        v906 = vmlaq_laneq_f64(vmlaq_n_f64(v906, v74, v96.f64[0]), v80, v96, 1);
        v905 = vmlaq_laneq_f64(vmlaq_n_f64(v905, v73, v96.f64[0]), v79, v96, 1);
        v904 = vmlaq_laneq_f64(vmlaq_n_f64(v904, v72, v96.f64[0]), v78, v96, 1);
        v97 = *(float64x2_t *)(v7 + 416);
        v903 = vmlaq_laneq_f64(vmlaq_n_f64(v903, v77, v97.f64[0]), v83, v97, 1);
        v902 = vmlaq_laneq_f64(vmlaq_n_f64(v902, v76, v97.f64[0]), v82, v97, 1);
        v901 = vmlaq_laneq_f64(vmlaq_n_f64(v901, v75, v97.f64[0]), v81, v97, 1);
        v900 = vmlaq_laneq_f64(vmlaq_n_f64(v900, v74, v97.f64[0]), v80, v97, 1);
        v98 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v73, v97.f64[0]), v79, v97, 1);
        v99 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v72, v97.f64[0]), v78, v97, 1);
        v100 = *(float64x2_t *)(v7 + 512);
        v101 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v77, v100.f64[0]), v83, v100, 1);
        v102 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v76, v100.f64[0]), v82, v100, 1);
        v103 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v75, v100.f64[0]), v81, v100, 1);
        v104 = vmlaq_laneq_f64(vmlaq_n_f64(v69, v74, v100.f64[0]), v80, v100, 1);
        v105 = vmlaq_laneq_f64(vmlaq_n_f64(v70, v73, v100.f64[0]), v79, v100, 1);
        v106 = vmlaq_laneq_f64(vmlaq_n_f64(v71, v72, v100.f64[0]), v78, v100, 1);
        v107 = vmulq_n_f64(result[42], v6);
        v108 = vmulq_n_f64(result[41], v6);
        v109 = vmulq_n_f64(result[40], v6);
        v110 = vmulq_n_f64(result[39], v6);
        v111 = vmulq_n_f64(result[38], v6);
        v112 = vmulq_n_f64(result[37], v6);
        v113 = vmulq_n_f64(result[48], v6);
        v114 = vmulq_n_f64(result[47], v6);
        v115 = vmulq_n_f64(result[46], v6);
        v116 = vmulq_n_f64(result[45], v6);
        v117 = vmulq_n_f64(result[44], v6);
        v118 = vmulq_n_f64(result[43], v6);
        v119 = *(float64x2_t *)(v7 + 48);
        v120 = vmlaq_laneq_f64(vmlaq_n_f64(v85, v112, v119.f64[0]), v118, v119, 1);
        v121 = vmlaq_laneq_f64(vmlaq_n_f64(v86, v111, v119.f64[0]), v117, v119, 1);
        v918 = vmlaq_laneq_f64(vmlaq_n_f64(v918, v110, v119.f64[0]), v116, v119, 1);
        v122 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v109, v119.f64[0]), v115, v119, 1);
        v123 = vmlaq_laneq_f64(vmlaq_n_f64(v88, v108, v119.f64[0]), v114, v119, 1);
        v917 = vmlaq_laneq_f64(vmlaq_n_f64(v917, v107, v119.f64[0]), v113, v119, 1);
        v124 = *(float64x2_t *)(v7 + 144);
        v125 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v112, v124.f64[0]), v118, v124, 1);
        v126 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v111, v124.f64[0]), v117, v124, 1);
        v916 = vmlaq_laneq_f64(vmlaq_n_f64(v916, v110, v124.f64[0]), v116, v124, 1);
        v127 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v109, v124.f64[0]), v115, v124, 1);
        v128 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v108, v124.f64[0]), v114, v124, 1);
        v915 = vmlaq_laneq_f64(vmlaq_n_f64(v915, v107, v124.f64[0]), v113, v124, 1);
        v129 = *(float64x2_t *)(v7 + 240);
        v130 = vmlaq_laneq_f64(vmlaq_n_f64(v95, v112, v129.f64[0]), v118, v129, 1);
        v914 = vmlaq_laneq_f64(vmlaq_n_f64(v914, v111, v129.f64[0]), v117, v129, 1);
        v912 = vmlaq_laneq_f64(vmlaq_n_f64(v912, v110, v129.f64[0]), v116, v129, 1);
        v911 = vmlaq_laneq_f64(vmlaq_n_f64(v911, v109, v129.f64[0]), v115, v129, 1);
        v913 = vmlaq_laneq_f64(vmlaq_n_f64(v913, v108, v129.f64[0]), v114, v129, 1);
        v910 = vmlaq_laneq_f64(vmlaq_n_f64(v910, v107, v129.f64[0]), v113, v129, 1);
        v131 = *(float64x2_t *)(v7 + 336);
        v909 = vmlaq_laneq_f64(vmlaq_n_f64(v909, v112, v131.f64[0]), v118, v131, 1);
        v908 = vmlaq_laneq_f64(vmlaq_n_f64(v908, v111, v131.f64[0]), v117, v131, 1);
        v907 = vmlaq_laneq_f64(vmlaq_n_f64(v907, v110, v131.f64[0]), v116, v131, 1);
        v906 = vmlaq_laneq_f64(vmlaq_n_f64(v906, v109, v131.f64[0]), v115, v131, 1);
        v905 = vmlaq_laneq_f64(vmlaq_n_f64(v905, v108, v131.f64[0]), v114, v131, 1);
        v904 = vmlaq_laneq_f64(vmlaq_n_f64(v904, v107, v131.f64[0]), v113, v131, 1);
        v132 = *(float64x2_t *)(v7 + 432);
        v903 = vmlaq_laneq_f64(vmlaq_n_f64(v903, v112, v132.f64[0]), v118, v132, 1);
        v902 = vmlaq_laneq_f64(vmlaq_n_f64(v902, v111, v132.f64[0]), v117, v132, 1);
        v901 = vmlaq_laneq_f64(vmlaq_n_f64(v901, v110, v132.f64[0]), v116, v132, 1);
        v900 = vmlaq_laneq_f64(vmlaq_n_f64(v900, v109, v132.f64[0]), v115, v132, 1);
        v133 = vmlaq_laneq_f64(vmlaq_n_f64(v98, v108, v132.f64[0]), v114, v132, 1);
        v134 = vmlaq_laneq_f64(vmlaq_n_f64(v99, v107, v132.f64[0]), v113, v132, 1);
        v135 = *(float64x2_t *)(v7 + 528);
        v136 = vmlaq_laneq_f64(vmlaq_n_f64(v101, v112, v135.f64[0]), v118, v135, 1);
        v137 = vmlaq_laneq_f64(vmlaq_n_f64(v102, v111, v135.f64[0]), v117, v135, 1);
        v138 = vmlaq_laneq_f64(vmlaq_n_f64(v103, v110, v135.f64[0]), v116, v135, 1);
        v139 = vmlaq_laneq_f64(vmlaq_n_f64(v104, v109, v135.f64[0]), v115, v135, 1);
        v140 = vmlaq_laneq_f64(vmlaq_n_f64(v105, v108, v135.f64[0]), v114, v135, 1);
        v141 = vmlaq_laneq_f64(vmlaq_n_f64(v106, v107, v135.f64[0]), v113, v135, 1);
        v142 = vmulq_n_f64(result[54], v6);
        v143 = vmulq_n_f64(result[53], v6);
        v144 = vmulq_n_f64(result[52], v6);
        v145 = vmulq_n_f64(result[51], v6);
        v146 = vmulq_n_f64(result[50], v6);
        v147 = vmulq_n_f64(result[49], v6);
        v148 = vmulq_n_f64(result[60], v6);
        v149 = vmulq_n_f64(result[59], v6);
        v150 = vmulq_n_f64(result[58], v6);
        v151 = vmulq_n_f64(result[57], v6);
        v152 = vmulq_n_f64(result[56], v6);
        v153 = vmulq_n_f64(result[55], v6);
        v154 = *(float64x2_t *)(v7 + 64);
        v155 = vmlaq_laneq_f64(vmlaq_n_f64(v120, v147, v154.f64[0]), v153, v154, 1);
        v156 = vmlaq_laneq_f64(vmlaq_n_f64(v121, v146, v154.f64[0]), v152, v154, 1);
        v918 = vmlaq_laneq_f64(vmlaq_n_f64(v918, v145, v154.f64[0]), v151, v154, 1);
        v157 = vmlaq_laneq_f64(vmlaq_n_f64(v122, v144, v154.f64[0]), v150, v154, 1);
        v158 = vmlaq_laneq_f64(vmlaq_n_f64(v123, v143, v154.f64[0]), v149, v154, 1);
        v917 = vmlaq_laneq_f64(vmlaq_n_f64(v917, v142, v154.f64[0]), v148, v154, 1);
        v159 = *(float64x2_t *)(v7 + 160);
        v160 = vmlaq_laneq_f64(vmlaq_n_f64(v125, v147, v159.f64[0]), v153, v159, 1);
        v161 = vmlaq_laneq_f64(vmlaq_n_f64(v126, v146, v159.f64[0]), v152, v159, 1);
        v916 = vmlaq_laneq_f64(vmlaq_n_f64(v916, v145, v159.f64[0]), v151, v159, 1);
        v162 = vmlaq_laneq_f64(vmlaq_n_f64(v127, v144, v159.f64[0]), v150, v159, 1);
        v163 = vmlaq_laneq_f64(vmlaq_n_f64(v128, v143, v159.f64[0]), v149, v159, 1);
        v915 = vmlaq_laneq_f64(vmlaq_n_f64(v915, v142, v159.f64[0]), v148, v159, 1);
        v164 = *(float64x2_t *)(v7 + 256);
        v165 = vmlaq_laneq_f64(vmlaq_n_f64(v130, v147, v164.f64[0]), v153, v164, 1);
        v914 = vmlaq_laneq_f64(vmlaq_n_f64(v914, v146, v164.f64[0]), v152, v164, 1);
        v912 = vmlaq_laneq_f64(vmlaq_n_f64(v912, v145, v164.f64[0]), v151, v164, 1);
        v911 = vmlaq_laneq_f64(vmlaq_n_f64(v911, v144, v164.f64[0]), v150, v164, 1);
        v913 = vmlaq_laneq_f64(vmlaq_n_f64(v913, v143, v164.f64[0]), v149, v164, 1);
        v910 = vmlaq_laneq_f64(vmlaq_n_f64(v910, v142, v164.f64[0]), v148, v164, 1);
        v166 = *(float64x2_t *)(v7 + 352);
        v909 = vmlaq_laneq_f64(vmlaq_n_f64(v909, v147, v166.f64[0]), v153, v166, 1);
        v908 = vmlaq_laneq_f64(vmlaq_n_f64(v908, v146, v166.f64[0]), v152, v166, 1);
        v907 = vmlaq_laneq_f64(vmlaq_n_f64(v907, v145, v166.f64[0]), v151, v166, 1);
        v906 = vmlaq_laneq_f64(vmlaq_n_f64(v906, v144, v166.f64[0]), v150, v166, 1);
        v905 = vmlaq_laneq_f64(vmlaq_n_f64(v905, v143, v166.f64[0]), v149, v166, 1);
        v904 = vmlaq_laneq_f64(vmlaq_n_f64(v904, v142, v166.f64[0]), v148, v166, 1);
        v167 = *(float64x2_t *)(v7 + 448);
        v903 = vmlaq_laneq_f64(vmlaq_n_f64(v903, v147, v167.f64[0]), v153, v167, 1);
        v902 = vmlaq_laneq_f64(vmlaq_n_f64(v902, v146, v167.f64[0]), v152, v167, 1);
        v901 = vmlaq_laneq_f64(vmlaq_n_f64(v901, v145, v167.f64[0]), v151, v167, 1);
        v900 = vmlaq_laneq_f64(vmlaq_n_f64(v900, v144, v167.f64[0]), v150, v167, 1);
        v168 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v143, v167.f64[0]), v149, v167, 1);
        v169 = vmlaq_laneq_f64(vmlaq_n_f64(v134, v142, v167.f64[0]), v148, v167, 1);
        v170 = *(float64x2_t *)(v7 + 544);
        v171 = vmlaq_laneq_f64(vmlaq_n_f64(v136, v147, v170.f64[0]), v153, v170, 1);
        v172 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v146, v170.f64[0]), v152, v170, 1);
        v173 = vmlaq_laneq_f64(vmlaq_n_f64(v138, v145, v170.f64[0]), v151, v170, 1);
        v895 = vmlaq_laneq_f64(vmlaq_n_f64(v139, v144, v170.f64[0]), v150, v170, 1);
        v896 = vmlaq_laneq_f64(vmlaq_n_f64(v140, v143, v170.f64[0]), v149, v170, 1);
        v897 = v168;
        v174 = vmlaq_laneq_f64(vmlaq_n_f64(v141, v142, v170.f64[0]), v148, v170, 1);
        v175 = vmulq_n_f64(result[66], v6);
        v176 = vmulq_n_f64(result[65], v6);
        v177 = vmulq_n_f64(result[64], v6);
        v178 = vmulq_n_f64(result[63], v6);
        v179 = vmulq_n_f64(result[62], v6);
        v180 = vmulq_n_f64(result[61], v6);
        v181 = vmulq_n_f64(result[72], v6);
        v182 = vmulq_n_f64(result[71], v6);
        v183 = vmulq_n_f64(result[70], v6);
        v184 = vmulq_n_f64(result[69], v6);
        v185 = vmulq_n_f64(result[68], v6);
        v186 = vmulq_n_f64(result[67], v6);
        v187 = *(float64x2_t *)(v7 + 80);
        v918 = vmlaq_laneq_f64(vmlaq_n_f64(v918, v178, v187.f64[0]), v184, v187, 1);
        v893 = vmlaq_laneq_f64(vmlaq_n_f64(v157, v177, v187.f64[0]), v183, v187, 1);
        v894 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v179, v187.f64[0]), v185, v187, 1);
        v891 = vmlaq_laneq_f64(vmlaq_n_f64(v155, v180, v187.f64[0]), v186, v187, 1);
        v892 = vmlaq_laneq_f64(vmlaq_n_f64(v158, v176, v187.f64[0]), v182, v187, 1);
        v917 = vmlaq_laneq_f64(vmlaq_n_f64(v917, v175, v187.f64[0]), v181, v187, 1);
        v188 = *(float64x2_t *)(v7 + 176);
        v889 = vmlaq_laneq_f64(vmlaq_n_f64(v161, v179, v188.f64[0]), v185, v188, 1);
        v890 = vmlaq_laneq_f64(vmlaq_n_f64(v160, v180, v188.f64[0]), v186, v188, 1);
        v916 = vmlaq_laneq_f64(vmlaq_n_f64(v916, v178, v188.f64[0]), v184, v188, 1);
        v898 = vmlaq_laneq_f64(vmlaq_n_f64(v163, v176, v188.f64[0]), v182, v188, 1);
        v899 = vmlaq_laneq_f64(vmlaq_n_f64(v162, v177, v188.f64[0]), v183, v188, 1);
        v915 = vmlaq_laneq_f64(vmlaq_n_f64(v915, v175, v188.f64[0]), v181, v188, 1);
        v189 = *(float64x2_t *)(v7 + 272);
        v888 = vmlaq_laneq_f64(vmlaq_n_f64(v165, v180, v189.f64[0]), v186, v189, 1);
        v914 = vmlaq_laneq_f64(vmlaq_n_f64(v914, v179, v189.f64[0]), v185, v189, 1);
        v190 = vmlaq_laneq_f64(vmlaq_n_f64(v912, v178, v189.f64[0]), v184, v189, 1);
        v191 = vmlaq_laneq_f64(vmlaq_n_f64(v911, v177, v189.f64[0]), v183, v189, 1);
        v913 = vmlaq_laneq_f64(vmlaq_n_f64(v913, v176, v189.f64[0]), v182, v189, 1);
        v192 = vmlaq_laneq_f64(vmlaq_n_f64(v910, v175, v189.f64[0]), v181, v189, 1);
        v193 = *(float64x2_t *)(v7 + 368);
        v194 = vmlaq_laneq_f64(vmlaq_n_f64(v909, v180, v193.f64[0]), v186, v193, 1);
        v195 = vmlaq_laneq_f64(vmlaq_n_f64(v908, v179, v193.f64[0]), v185, v193, 1);
        v196 = vmlaq_laneq_f64(vmlaq_n_f64(v907, v178, v193.f64[0]), v184, v193, 1);
        v197 = vmlaq_laneq_f64(vmlaq_n_f64(v906, v177, v193.f64[0]), v183, v193, 1);
        v198 = vmlaq_laneq_f64(vmlaq_n_f64(v905, v176, v193.f64[0]), v182, v193, 1);
        v199 = vmlaq_laneq_f64(vmlaq_n_f64(v904, v175, v193.f64[0]), v181, v193, 1);
        v200 = *(float64x2_t *)(v7 + 464);
        v201 = vmlaq_laneq_f64(vmlaq_n_f64(v903, v180, v200.f64[0]), v186, v200, 1);
        v202 = vmlaq_laneq_f64(vmlaq_n_f64(v902, v179, v200.f64[0]), v185, v200, 1);
        v203 = vmlaq_laneq_f64(vmlaq_n_f64(v901, v178, v200.f64[0]), v184, v200, 1);
        v204 = vmlaq_laneq_f64(vmlaq_n_f64(v900, v177, v200.f64[0]), v183, v200, 1);
        v205 = vmlaq_laneq_f64(vmlaq_n_f64(v897, v176, v200.f64[0]), v182, v200, 1);
        v206 = vmlaq_laneq_f64(vmlaq_n_f64(v169, v175, v200.f64[0]), v181, v200, 1);
        v207 = *(float64x2_t *)(v7 + 560);
        v208 = vmlaq_laneq_f64(vmlaq_n_f64(v171, v180, v207.f64[0]), v186, v207, 1);
        v209 = vmlaq_laneq_f64(vmlaq_n_f64(v895, v177, v207.f64[0]), v183, v207, 1);
        v210 = vmlaq_laneq_f64(vmlaq_n_f64(v896, v176, v207.f64[0]), v182, v207, 1);
        v211 = v917;
        *(float64x2_t *)(v7 + 64) = v892;
        *(float64x2_t *)(v7 + 80) = v211;
        v212 = v893;
        *(float64x2_t *)(v7 + 32) = v918;
        *(float64x2_t *)(v7 + 48) = v212;
        v213 = v894;
        *(float64x2_t *)v7 = v891;
        *(float64x2_t *)(v7 + 16) = v213;
        v214 = v915;
        *(float64x2_t *)(v7 + 160) = v898;
        *(float64x2_t *)(v7 + 176) = v214;
        v215 = v899;
        *(float64x2_t *)(v7 + 128) = v916;
        *(float64x2_t *)(v7 + 144) = v215;
        v216 = v889;
        *(float64x2_t *)(v7 + 96) = v890;
        *(float64x2_t *)(v7 + 112) = v216;
        *(float64x2_t *)(v7 + 256) = v913;
        *(float64x2_t *)(v7 + 272) = v192;
        *(float64x2_t *)(v7 + 224) = v190;
        *(float64x2_t *)(v7 + 240) = v191;
        v217 = v914;
        *(float64x2_t *)(v7 + 192) = v888;
        *(float64x2_t *)(v7 + 208) = v217;
        *(float64x2_t *)(v7 + 352) = v198;
        *(float64x2_t *)(v7 + 368) = v199;
        *(float64x2_t *)(v7 + 320) = v196;
        *(float64x2_t *)(v7 + 336) = v197;
        *(float64x2_t *)(v7 + 288) = v194;
        *(float64x2_t *)(v7 + 304) = v195;
        *(float64x2_t *)(v7 + 448) = v205;
        *(float64x2_t *)(v7 + 464) = v206;
        *(float64x2_t *)(v7 + 416) = v203;
        *(float64x2_t *)(v7 + 432) = v204;
        *(float64x2_t *)(v7 + 384) = v201;
        *(float64x2_t *)(v7 + 400) = v202;
        *(float64x2_t *)(v7 + 544) = v210;
        *(float64x2_t *)(v7 + 560) = vmlaq_laneq_f64(vmlaq_n_f64(v174, v175, v207.f64[0]), v181, v207, 1);
        *(float64x2_t *)(v7 + 512) = vmlaq_laneq_f64(vmlaq_n_f64(v173, v178, v207.f64[0]), v184, v207, 1);
        *(float64x2_t *)(v7 + 528) = v209;
        *(float64x2_t *)(v7 + 480) = v208;
        *(float64x2_t *)(v7 + 496) = vmlaq_laneq_f64(vmlaq_n_f64(v172, v179, v207.f64[0]), v185, v207, 1);
        break;
      case 1:
        v218 = 0;
        v219 = (int8x16_t)vmulq_n_f64(result[6], v6);
        v220 = (int8x16_t)vmulq_n_f64(result[5], v6);
        v221 = (int8x16_t)vmulq_n_f64(result[4], v6);
        v222 = (int8x16_t)vmulq_n_f64(result[3], v6);
        v223 = (int8x16_t)vmulq_n_f64(result[2], v6);
        v224 = (int8x16_t)vmulq_n_f64(result[1], v6);
        v225 = *(int8x16_t *)(v7 + 544);
        v227 = *(int8x16_t *)(v7 + 512);
        v226 = *(int8x16_t *)(v7 + 528);
        v228 = *(int8x16_t *)(v7 + 480);
        v249 = *(int8x16_t *)(v7 + 496);
        v230 = *(int8x16_t *)(v7 + 448);
        v229 = *(int8x16_t *)(v7 + 464);
        v232 = *(int8x16_t *)(v7 + 416);
        v231 = *(int8x16_t *)(v7 + 432);
        v234 = *(int8x16_t *)(v7 + 384);
        v233 = *(int8x16_t *)(v7 + 400);
        v236 = *(int8x16_t *)(v7 + 352);
        v235 = *(int8x16_t *)(v7 + 368);
        v237 = *(int8x16_t *)(v7 + 336);
        v914 = *(float64x2_t *)(v7 + 560);
        v915 = (float64x2_t)v249;
        v899 = (float64x2_t)vextq_s8((int8x16_t)v914, (int8x16_t)v914, 8uLL);
        v917 = (float64x2_t)v226;
        v918 = (float64x2_t)v225;
        v898 = (float64x2_t)vextq_s8(v225, v225, 8uLL);
        v897 = (float64x2_t)vextq_s8(v226, v226, 8uLL);
        v916 = (float64x2_t)v227;
        v896 = (float64x2_t)vextq_s8(v227, v227, 8uLL);
        v219.i64[1] = vextq_s8(v219, v219, 8uLL).u64[0];
        v220.i64[1] = vextq_s8(v220, v220, 8uLL).u64[0];
        v873 = (float64x2_t)v220;
        v874 = (float64x2_t)v219;
        v239 = *(int8x16_t *)(v7 + 304);
        v238 = *(int8x16_t *)(v7 + 320);
        v221.i64[1] = vextq_s8(v221, v221, 8uLL).u64[0];
        v912 = (float64x2_t)v229;
        v913 = (float64x2_t)v228;
        v894 = (float64x2_t)vextq_s8(v228, v228, 8uLL);
        v895 = (float64x2_t)vextq_s8(v249, v249, 8uLL);
        v222.i64[1] = vextq_s8(v222, v222, 8uLL).u64[0];
        v871 = (float64x2_t)v222;
        v872 = (float64x2_t)v221;
        v223.i64[1] = vextq_s8(v223, v223, 8uLL).u64[0];
        v910 = (float64x2_t)v231;
        v911 = (float64x2_t)v230;
        v892 = (float64x2_t)vextq_s8(v230, v230, 8uLL);
        v893 = (float64x2_t)vextq_s8(v229, v229, 8uLL);
        v224.i64[1] = vextq_s8(v224, v224, 8uLL).u64[0];
        v869 = (float64x2_t)v224;
        v870 = (float64x2_t)v223;
        v891 = (float64x2_t)vextq_s8(v231, v231, 8uLL);
        result = (float64x2_t *)&v1111;
        v908 = (float64x2_t)v233;
        v909 = (float64x2_t)v232;
        v241 = *(int8x16_t *)(v7 + 272);
        v240 = *(int8x16_t *)(v7 + 288);
        v889 = (float64x2_t)vextq_s8(v233, v233, 8uLL);
        v890 = (float64x2_t)vextq_s8(v232, v232, 8uLL);
        v906 = (float64x2_t)v235;
        v907 = (float64x2_t)v234;
        v887 = vextq_s8(v235, v235, 8uLL);
        v888 = (float64x2_t)vextq_s8(v234, v234, 8uLL);
        v243 = *(int8x16_t *)(v7 + 240);
        v242 = *(int8x16_t *)(v7 + 256);
        v904 = (float64x2_t)v237;
        v905 = (float64x2_t)v236;
        v885 = vextq_s8(v237, v237, 8uLL);
        v886 = vextq_s8(v236, v236, 8uLL);
        v902 = (float64x2_t)v239;
        v903 = (float64x2_t)v238;
        v884 = vextq_s8(v238, v238, 8uLL);
        v245 = *(int8x16_t *)(v7 + 208);
        v244 = *(int8x16_t *)(v7 + 224);
        v900 = (float64x2_t)v241;
        v901 = (float64x2_t)v240;
        v882 = vextq_s8(v240, v240, 8uLL);
        v883 = vextq_s8(v239, v239, 8uLL);
        v246 = vextq_s8(v241, v241, 8uLL);
        v248 = *(int8x16_t *)(v7 + 176);
        v247 = *(int8x16_t *)(v7 + 192);
        v249.i64[0] = v242.i64[0];
        v880 = vextq_s8(v242, v242, 8uLL);
        v881 = v246;
        v250 = v243.i64[0];
        v879 = vextq_s8(v243, v243, 8uLL);
        v251 = v244.i64[0];
        v252 = vextq_s8(v244, v244, 8uLL).u64[0];
        v253 = *(int8x16_t *)(v7 + 144);
        v254 = *(int8x16_t *)(v7 + 160);
        v255.i64[0] = v245.i64[0];
        v256 = vextq_s8(v245, v245, 8uLL).u64[0];
        v257 = v247.i64[0];
        v258 = vextq_s8(v247, v247, 8uLL).u64[0];
        v259 = vextq_s8(v248, v248, 8uLL).u64[0];
        v261 = *(int8x16_t *)(v7 + 112);
        v260 = *(int8x16_t *)(v7 + 128);
        v262 = vextq_s8(v254, v254, 8uLL).u64[0];
        v263 = (float64x2_t *)(v7 + 64);
        v264 = *(int8x16_t *)(v7 + 64);
        v265 = vextq_s8(v253, v253, 8uLL).u64[0];
        v266 = vextq_s8(v260, v260, 8uLL).u64[0];
        v267 = vextq_s8(v261, v261, 8uLL).u64[0];
        v269 = *(int8x16_t *)(v7 + 80);
        v268 = *(int8x16_t *)(v7 + 96);
        v270 = vextq_s8(v268, v268, 8uLL).u64[0];
        v271 = vextq_s8(v269, v269, 8uLL).u64[0];
        v272 = vextq_s8(v264, v264, 8uLL).u64[0];
        v274 = *(int8x16_t *)(v7 + 32);
        v273 = *(int8x16_t *)(v7 + 48);
        v275 = vextq_s8(v273, v273, 8uLL).u64[0];
        v276 = vextq_s8(v274, v274, 8uLL).u64[0];
        v278 = *(int8x16_t *)v7;
        v277 = *(int8x16_t *)(v7 + 16);
        v279 = vextq_s8(v277, v277, 8uLL).u64[0];
        v280 = vextq_s8(v278, v278, 8uLL).u64[0];
        do
        {
          v278.i64[1] = v280;
          v277.i64[1] = v279;
          v274.i64[1] = v276;
          v273.i64[1] = v275;
          v264.i64[1] = v272;
          v269.i64[1] = v271;
          v268.i64[1] = v270;
          v261.i64[1] = v267;
          v260.i64[1] = v266;
          v253.i64[1] = v265;
          v254.i64[1] = v262;
          v248.i64[1] = v259;
          *(_QWORD *)&v281 = v257;
          *((_QWORD *)&v281 + 1) = v258;
          v255.i64[1] = v256;
          *(_QWORD *)&v282 = v251;
          *((_QWORD *)&v282 + 1) = v252;
          *(_QWORD *)&v283 = v250;
          *((_QWORD *)&v283 + 1) = v879.i64[0];
          v249.i64[1] = v880.i64[0];
          *(float64_t *)&v284 = v900.f64[0];
          *(float64_t *)&v285 = v901.f64[0];
          *((_QWORD *)&v284 + 1) = v881.i64[0];
          *((_QWORD *)&v285 + 1) = v882.i64[0];
          *(float64_t *)&v287 = v902.f64[0];
          *(float64_t *)&v286 = v903.f64[0];
          *((_QWORD *)&v287 + 1) = v883.i64[0];
          *((_QWORD *)&v286 + 1) = v884.i64[0];
          *(float64_t *)&v289 = v904.f64[0];
          *(float64_t *)&v288 = v905.f64[0];
          *((_QWORD *)&v289 + 1) = v885.i64[0];
          *((_QWORD *)&v288 + 1) = v886.i64[0];
          *(float64_t *)&v291 = v906.f64[0];
          *(float64_t *)&v290 = v907.f64[0];
          *((_QWORD *)&v291 + 1) = v887.i64[0];
          *((_QWORD *)&v290 + 1) = *(_QWORD *)&v888.f64[0];
          *(float64_t *)&v292 = v908.f64[0];
          *(float64_t *)&v293 = v909.f64[0];
          *((_QWORD *)&v292 + 1) = *(_QWORD *)&v889.f64[0];
          *((_QWORD *)&v293 + 1) = *(_QWORD *)&v890.f64[0];
          *(float64_t *)&v294 = v910.f64[0];
          *(float64_t *)&v295 = v911.f64[0];
          *((_QWORD *)&v294 + 1) = *(_QWORD *)&v891.f64[0];
          *((_QWORD *)&v295 + 1) = *(_QWORD *)&v892.f64[0];
          v296.f64[0] = v912.f64[0];
          v296.f64[1] = v893.f64[0];
          v912 = v296;
          v297.f64[0] = v913.f64[0];
          v297.f64[1] = v894.f64[0];
          v913 = v297;
          v298.f64[0] = v915.f64[0];
          v298.f64[1] = v895.f64[0];
          v915 = v298;
          v298.f64[0] = v916.f64[0];
          v298.f64[1] = v896.f64[0];
          v916 = v298;
          v298.f64[0] = v917.f64[0];
          v298.f64[1] = v897.f64[0];
          v917 = v298;
          v298.f64[0] = v918.f64[0];
          v298.f64[1] = v898.f64[0];
          v918 = v298;
          v298.f64[0] = v914.f64[0];
          v298.f64[1] = v899.f64[0];
          v914 = v298;
          v299 = v263[-4];
          v300 = v263[-2];
          v907 = v263[-3];
          v908 = v300;
          v301 = *v263;
          v909 = v263[-1];
          v910 = v301;
          v911 = v263[1];
          v1623 = v278;
          v1624 = v277;
          v1625 = v274;
          v1626 = v273;
          v1627 = v264;
          v1628 = v269;
          v1629 = v268;
          v1630 = v261;
          v1631 = v260;
          v1632 = v253;
          v302 = vmulq_f64(v869, v299);
          v906.f64[1] = v302.f64[1];
          v1633 = v254;
          v1634 = v248;
          v1635 = v281;
          v1636 = v255;
          v1637 = v282;
          v1638 = v283;
          v1639 = v249;
          v1640 = v284;
          v1641 = v285;
          v1642 = v287;
          v1643 = v286;
          v1644 = v289;
          v1645 = v288;
          v1646 = v291;
          v1647 = v290;
          v1648 = v292;
          v1649 = v293;
          v1650 = v294;
          v1651 = v295;
          v1652 = v912;
          v1653 = v913;
          v1654 = v915;
          v1655 = v916;
          v1656 = v917;
          v1657 = v918;
          v1658 = v914;
          v1623.i64[v218 & 0x7F] = *(_QWORD *)&v302.f64[0];
          v1622 = v1686;
          v1621 = v1685;
          v1620 = v1684;
          v1619 = v1683;
          v1618 = v1682;
          v1617 = v1681;
          v1616 = v1680;
          v1615 = v1679;
          v1614 = v1678;
          v1613 = v1677;
          v1612 = v1676;
          v1611 = v1675;
          v1610 = v1674;
          v1609 = v1673;
          v1608 = v1672;
          v1607 = v1671;
          v1606 = v1670;
          v1605 = v1669;
          v1604 = v1668;
          v1603 = v1667;
          v1602 = v1666;
          v1601 = v1665;
          v1600 = v1664;
          v1599 = v1663;
          v1598 = v1662;
          v1597 = v1661;
          v1596 = v1660;
          v1595 = v1659;
          v1594 = v1658;
          v1593 = v1657;
          v1592 = v1656;
          v1591 = v1655;
          v1590 = v1654;
          v1589 = v1653;
          v1588 = v1652;
          v1587 = v1651;
          v1586 = v1650;
          v1585 = v1649;
          v1584 = v1648;
          v1583 = v1647;
          v1582 = v1646;
          v1581 = v1645;
          v1580 = v1644;
          v1579 = v1643;
          v1578 = v1642;
          v1577 = v1641;
          v1576 = v1640;
          v1575 = v1639;
          v1574 = v1638;
          v1573 = v1637;
          v1572 = v1636;
          v1571 = v1635;
          v1570 = v1634;
          v1569 = v1633;
          v1568 = v1632;
          v1567 = v1631;
          v1566 = v1630;
          v1565 = v1629;
          v1564 = v1628;
          v1563 = v1627;
          v1562 = v1626;
          v1561 = v1625;
          v1560 = v1624;
          v1559 = v1623;
          v1559.i64[((_BYTE)v218 + 1) & 0x7F] = *(_QWORD *)&v906.f64[1];
          v1558 = v1622;
          v1557 = v1621;
          v1556 = v1620;
          v1555 = v1619;
          v1554 = v1618;
          v1553 = v1617;
          v1552 = v1616;
          v1551 = v1615;
          v1550 = v1614;
          v1549 = v1613;
          v1548 = v1612;
          v1547 = v1611;
          v1546 = v1610;
          v1545 = v1609;
          v1544 = v1608;
          v1543 = v1607;
          v1542 = v1606;
          v1541 = v1605;
          v1540 = v1604;
          v1539 = v1603;
          v1538 = v1602;
          v1537 = v1601;
          v1536 = v1600;
          v1535 = v1599;
          v1534 = v1598;
          v1533 = v1597;
          v1532 = v1596;
          v1531 = v1595;
          v1530 = v1594;
          v1529 = v1593;
          v1528 = v1592;
          v1527 = v1591;
          v1526 = v1590;
          v1525 = v1589;
          v1524 = v1588;
          v1523 = v1587;
          v1522 = v1586;
          v303 = vmulq_f64(v870, v907);
          v918.f64[1] = v303.f64[1];
          v1521 = v1585;
          v1520 = v1584;
          v1519 = v1583;
          v1518 = v1582;
          v1517 = v1581;
          v1516 = v1580;
          v1515 = v1579;
          v1514 = v1578;
          v1513 = v1577;
          v1512 = v1576;
          v1511 = v1575;
          v1510 = v1574;
          v1509 = v1573;
          v1508 = v1572;
          v1507 = v1571;
          v1506 = v1570;
          v1505 = v1569;
          v1504 = v1568;
          v1503 = v1567;
          v1502 = v1566;
          v1501 = v1565;
          v1500 = v1564;
          v1499 = v1563;
          v1498 = v1562;
          v1497 = v1561;
          v1496 = v1560;
          v1495 = v1559;
          v1495.i64[((_BYTE)v218 + 2) & 0x7F] = *(_QWORD *)&v303.f64[0];
          v1494 = v1558;
          v1493 = v1557;
          v1492 = v1556;
          v1491 = v1555;
          v1490 = v1554;
          v1489 = v1553;
          v1488 = v1552;
          v1487 = v1551;
          v1486 = v1550;
          v1485 = v1549;
          v1484 = v1548;
          v1483 = v1547;
          v1482 = v1546;
          v1481 = v1545;
          v1480 = v1544;
          v1479 = v1543;
          v1478 = v1542;
          v1477 = v1541;
          v1476 = v1540;
          v1475 = v1539;
          v1474 = v1538;
          v1473 = v1537;
          v1472 = v1536;
          v1471 = v1535;
          v1470 = v1534;
          v1469 = v1533;
          v1468 = v1532;
          v1467 = v1531;
          v1466 = v1530;
          v1465 = v1529;
          v1464 = v1528;
          v1463 = v1527;
          v1462 = v1526;
          v1461 = v1525;
          v1460 = v1524;
          v1459 = v1523;
          v1458 = v1522;
          v1457 = v1521;
          v1456 = v1520;
          v1455 = v1519;
          v1454 = v1518;
          v1453 = v1517;
          v1452 = v1516;
          v1451 = v1515;
          v1450 = v1514;
          v1449 = v1513;
          v1448 = v1512;
          v1447 = v1511;
          v1446 = v1510;
          v1445 = v1509;
          v1444 = v1508;
          v1443 = v1507;
          v1442 = v1506;
          v1441 = v1505;
          v1440 = v1504;
          v1439 = v1503;
          v1438 = v1502;
          v1437 = v1501;
          v1436 = v1500;
          v1435 = v1499;
          v1434 = v1498;
          v1433 = v1497;
          v1432 = v1496;
          v1431 = v1495;
          v1431.i64[((_BYTE)v218 + 3) & 0x7F] = *(_QWORD *)&v918.f64[1];
          v1430 = v1494;
          v1429 = v1493;
          v1428 = v1492;
          v1427 = v1491;
          v1426 = v1490;
          v1425 = v1489;
          v1424 = v1488;
          v1423 = v1487;
          v1422 = v1486;
          v1421 = v1485;
          v1420 = v1484;
          v1419 = v1483;
          v1418 = v1482;
          v1417 = v1481;
          v1416 = v1480;
          v1415 = v1479;
          v1414 = v1478;
          v1413 = v1477;
          v1412 = v1476;
          v1411 = v1475;
          v1410 = v1474;
          v1409 = v1473;
          v1408 = v1472;
          v1407 = v1471;
          v1406 = v1470;
          v1405 = v1469;
          v1404 = v1468;
          v1403 = v1467;
          v1402 = v1466;
          v1401 = v1465;
          v1400 = v1464;
          v1399 = v1463;
          v1398 = v1462;
          v1397 = v1461;
          v1396 = v1460;
          v1395 = v1459;
          v304 = vmulq_f64(v871, v908);
          v918.f64[1] = v304.f64[1];
          v1394 = (int8x16_t)v1458;
          v1393 = (int8x16_t)v1457;
          v1392 = (int8x16_t)v1456;
          v1391 = (int8x16_t)v1455;
          v1390 = (int8x16_t)v1454;
          v1389 = (int8x16_t)v1453;
          v1388 = (int8x16_t)v1452;
          v1387 = (int8x16_t)v1451;
          v1386 = v1450;
          v1385 = (int8x16_t)v1449;
          v1384 = (int8x16_t)v1448;
          v1383 = v1447;
          v1382 = (int8x16_t)v1446;
          v1381 = v1445;
          v1380 = v1444;
          v1379 = (int8x16_t)v1443;
          v1378 = v1442;
          v1377 = v1441;
          v1376 = v1440;
          v1375 = v1439;
          v1374 = v1438;
          v1373 = v1437;
          v1372 = v1436;
          v1371 = v1435;
          v1370 = v1434;
          v1369 = v1433;
          v1368 = v1432;
          v1367 = v1431;
          v1367.i64[((_BYTE)v218 + 4) & 0x7F] = *(_QWORD *)&v304.f64[0];
          v1366 = v1430;
          v1365 = v1429;
          v1364 = v1428;
          v1363 = v1427;
          v1362 = v1426;
          v1361 = v1425;
          v1360 = v1424;
          v1359 = v1423;
          v1358 = v1422;
          v1357 = v1421;
          v1356 = v1420;
          v1355 = v1419;
          v1354 = v1418;
          v1353 = v1417;
          v1352 = v1416;
          v1351 = v1415;
          v1350 = v1414;
          v1349 = v1413;
          v1348 = v1412;
          v1347 = v1411;
          v1346 = v1410;
          v1345 = v1409;
          v1344 = v1408;
          v1343 = v1407;
          v1342 = v1406;
          v1341 = v1405;
          v1340 = v1404;
          v1339 = v1403;
          v1338 = v1402;
          v1337 = v1401;
          v1336 = v1400;
          v1335 = v1399;
          v1334 = v1398;
          v1333 = v1397;
          v1332 = v1396;
          v1331 = (int8x16_t)v1395;
          v1330 = v1394;
          v1329 = v1393;
          v1328 = v1392;
          v1327 = v1391;
          v1326 = v1390;
          v1325 = v1389;
          v1324 = v1388;
          v1323 = v1387;
          v1322 = (int8x16_t)v1386;
          v1321 = v1385;
          v1320 = v1384;
          v1319 = v1383;
          v1318 = v1382;
          v1317 = (int8x16_t)v1381;
          v1316 = v1380;
          v1315 = v1379;
          v1314 = v1378;
          v1313 = v1377;
          v1312 = v1376;
          v1311 = v1375;
          v1310 = v1374;
          v1309 = v1373;
          v1308 = v1372;
          v1307 = v1371;
          v1306 = v1370;
          v1305 = v1369;
          v1304 = v1368;
          v1303 = v1367;
          v1303.i64[((_BYTE)v218 + 5) & 0x7F] = *(_QWORD *)&v918.f64[1];
          v1302 = v1366;
          v1301 = v1365;
          v1300 = v1364;
          v1299 = v1363;
          v1298 = v1362;
          v1297 = v1361;
          v1296 = v1360;
          v1295 = v1359;
          v1294 = v1358;
          v1293 = v1357;
          v1292 = v1356;
          v1291 = v1355;
          v1290 = v1354;
          v1289 = v1353;
          v1288 = v1352;
          v1287 = v1351;
          v1286 = v1350;
          v1285 = v1349;
          v1284 = v1348;
          v1283 = v1347;
          v1282 = v1346;
          v1281 = v1345;
          v1280 = v1344;
          v1279 = v1343;
          v1278 = v1342;
          v1277 = v1341;
          v1276 = v1340;
          v1275 = v1339;
          v1274 = v1338;
          v1273 = v1337;
          v1272 = v1336;
          v1271 = v1335;
          v1270 = v1334;
          v1269 = v1333;
          v1268 = v1332;
          v305 = vmulq_f64(v872, v909);
          v918.f64[1] = v305.f64[1];
          v1267 = v1331;
          v1266 = v1330;
          v1265 = v1329;
          v1264 = v1328;
          v1263 = v1327;
          v1262 = v1326;
          v1261 = v1325;
          v1260 = v1324;
          v1259 = v1323;
          v1258 = v1322;
          v1257 = v1321;
          v1256 = v1320;
          v1255 = v1319;
          v1254 = v1318;
          v1253 = v1317;
          v1252 = v1316;
          v1251 = v1315;
          v1250 = v1314;
          v1249 = v1313;
          v1248 = v1312;
          v1247 = v1311;
          v1246 = v1310;
          v1245 = v1309;
          v1244 = v1308;
          v1243 = v1307;
          v1242 = v1306;
          v1241 = v1305;
          v1240 = v1304;
          v1239 = v1303;
          v1239.i64[((_BYTE)v218 + 6) & 0x7F] = *(_QWORD *)&v305.f64[0];
          v1238 = v1302;
          v1237 = v1301;
          v1236 = v1300;
          v1235 = v1299;
          v1234 = v1298;
          v1233 = v1297;
          v1232 = v1296;
          v1231 = v1295;
          v1230 = v1294;
          v1229 = v1293;
          v1228 = v1292;
          v1227 = v1291;
          v1226 = v1290;
          v1225 = v1289;
          v1224 = v1288;
          v1223 = v1287;
          v1222 = v1286;
          v1221 = v1285;
          v1220 = v1284;
          v1219 = v1283;
          v1218 = v1282;
          v1217 = v1281;
          v1216 = v1280;
          v1215 = v1279;
          v1214 = v1278;
          v1213 = v1277;
          v1212 = v1276;
          v1211 = v1275;
          v1210 = v1274;
          v1209 = v1273;
          v1208 = v1272;
          v1207 = v1271;
          v1206 = v1270;
          v1205 = v1269;
          v1204 = v1268;
          v1203 = v1267;
          v1202 = v1266;
          v1201 = v1265;
          v1200 = v1264;
          v1199 = v1263;
          v1198 = v1262;
          v1197 = v1261;
          v1196 = v1260;
          v1195 = v1259;
          v1194 = v1258;
          v1193 = v1257;
          v1192 = v1256;
          v1191 = v1255;
          v1190 = v1254;
          v1189 = v1253;
          v1188 = v1252;
          v1187 = v1251;
          v1186 = v1250;
          v1185 = v1249;
          v1184 = v1248;
          v1183 = v1247;
          v1182 = v1246;
          v1181 = v1245;
          v1180 = v1244;
          v1179 = v1243;
          v1178 = v1242;
          v1177 = v1241;
          v1176 = v1240;
          v1175 = v1239;
          v1175.i64[((_BYTE)v218 + 7) & 0x7F] = *(_QWORD *)&v918.f64[1];
          v1174 = v1238;
          v1173 = v1237;
          v1172 = v1236;
          v1171 = v1235;
          v1170 = v1234;
          v1169 = v1233;
          v1168 = v1232;
          v1167 = v1231;
          v1166 = v1230;
          v1165 = v1229;
          v1164 = v1228;
          v1163 = v1227;
          v1162 = v1226;
          v1161 = v1225;
          v1160 = v1224;
          v1159 = v1223;
          v1158 = v1222;
          v1157 = v1221;
          v1156 = v1220;
          v1155 = v1219;
          v1154 = v1218;
          v1153 = v1217;
          v1152 = v1216;
          v1151 = v1215;
          v1150 = v1214;
          v1149 = v1213;
          v1148 = v1212;
          v1147 = v1211;
          v1146 = (int8x16_t)v1210;
          v1145 = v1209;
          v1144 = v1208;
          v1143 = v1207;
          v1142 = v1206;
          v1141 = (int8x16_t)v1205;
          v306 = vmulq_f64(v873, v910);
          v918.f64[1] = v306.f64[1];
          v1140 = v1204;
          v1139 = v1203;
          v1138 = v1202;
          v1137 = v1201;
          v1136 = v1200;
          v1135 = v1199;
          v1134 = v1198;
          v1133 = v1197;
          v1132 = v1196;
          v1131 = v1195;
          v1130 = v1194;
          v1129 = v1193;
          v1128 = v1192;
          v1127 = v1191;
          v1126 = v1190;
          v1125 = v1189;
          v1124 = v1188;
          v1123 = v1187;
          v1122 = v1186;
          v1121 = v1185;
          v1120 = v1184;
          v1119 = v1183;
          v1118 = v1182;
          v1117 = v1181;
          v1116 = v1180;
          v1115 = v1179;
          v1114 = v1178;
          v1113 = v1177;
          v1112 = v1176;
          v1111 = v1175;
          v1111.i64[((_BYTE)v218 + 8) & 0x7F] = *(_QWORD *)&v306.f64[0];
          v1110 = v1174;
          v1109 = v1173;
          v1108 = v1172;
          v1107 = v1171;
          v1106 = v1170;
          v1105 = v1169;
          v1104 = v1168;
          v1103 = v1167;
          v1102 = v1166;
          v1101 = v1165;
          v1100 = v1164;
          v1099 = v1163;
          v1098 = v1162;
          v1097 = v1161;
          v1096 = v1160;
          v1095 = v1159;
          v1094 = v1158;
          v1093 = v1157;
          v1092 = v1156;
          v1091 = v1155;
          v1090 = v1154;
          v1089 = v1153;
          v1088 = v1152;
          v1087 = v1151;
          v1086 = v1150;
          v1085 = v1149;
          v1084 = v1148;
          v1083 = v1147;
          v1082 = v1146;
          v1081 = v1145;
          v1080 = v1144;
          v1079 = v1143;
          v1078 = v1142;
          v1077 = v1141;
          v1076 = (int8x16_t)v1140;
          v1075 = v1139;
          v1074 = v1138;
          v1073 = v1137;
          v1072 = v1136;
          v1071 = v1135;
          v1070 = v1134;
          v1069 = v1133;
          v1068 = v1132;
          v1067 = v1131;
          v1066 = v1130;
          v1065 = v1129;
          v1064 = v1128;
          v1063 = v1127;
          v1062 = v1126;
          v1061 = v1125;
          v1060 = v1124;
          v1059 = v1123;
          v1058 = v1122;
          v1057 = v1121;
          v1056 = v1120;
          v1055 = v1119;
          v1054 = v1118;
          v1053 = v1117;
          v1052 = v1116;
          v1051 = v1115;
          v1050 = v1114;
          v1049 = v1113;
          v1048 = v1112;
          v1047 = v1111;
          v1047.i64[((_BYTE)v218 + 9) & 0x7F] = *(_QWORD *)&v918.f64[1];
          v1046 = v1110;
          v1045 = v1109;
          v1044 = v1108;
          v1043 = v1107;
          v1042 = v1106;
          v1041 = v1105;
          v1040 = v1104;
          v1039 = v1103;
          v1038 = v1102;
          v1037 = v1101;
          v1036 = v1100;
          v1035 = v1099;
          v1034 = v1098;
          v1033 = v1097;
          v1032 = v1096;
          v1031 = v1095;
          v1030 = v1094;
          v1029 = v1093;
          v1028 = v1092;
          v1027 = v1091;
          v1026 = v1090;
          v1025 = v1089;
          v1024 = v1088;
          v1023 = v1087;
          v1022 = v1086;
          v1021 = v1085;
          v1020 = v1084;
          v1019 = v1083;
          v1018 = v1082;
          v1017 = v1081;
          v1016 = v1080;
          v1015 = v1079;
          v1014 = v1078;
          v307 = vmulq_f64(v874, v911);
          v918.f64[1] = v307.f64[1];
          v1013 = v1077;
          v1012 = v1076;
          v1011 = v1075;
          v1010 = v1074;
          v1009 = v1073;
          v1008 = v1072;
          v1007 = v1071;
          v1006 = v1070;
          v1005 = v1069;
          v1004 = v1068;
          v1003 = v1067;
          v1002 = v1066;
          v1001 = v1065;
          v1000 = v1064;
          v999 = v1063;
          v998 = v1062;
          v997 = v1061;
          v996 = v1060;
          v995 = v1059;
          v994 = v1058;
          v993 = v1057;
          v992 = v1056;
          v991 = v1055;
          v990 = v1054;
          v989 = v1053;
          v988 = v1052;
          v987 = v1051;
          v986 = v1050;
          v985 = v1049;
          v984 = v1048;
          v983 = v1047;
          v983.i64[((_BYTE)v218 + 10) & 0x7F] = *(_QWORD *)&v307.f64[0];
          v982 = v1046;
          v981 = v1045;
          v980 = v1044;
          v979 = v1043;
          v978 = v1042;
          v977 = v1041;
          v976 = v1040;
          v975 = v1039;
          v974 = v1038;
          v973 = v1037;
          v972 = v1036;
          v971 = v1035;
          v970 = v1034;
          v969 = v1033;
          v968 = v1032;
          v967 = v1031;
          v966 = v1030;
          v965 = v1029;
          v964 = v1028;
          v963 = v1027;
          v962 = v1026;
          v961 = v1025;
          v960 = v1024;
          v959 = v1023;
          v958 = v1022;
          v957 = v1021;
          v956 = v1020;
          v955 = v1019;
          v954 = v1018;
          v953 = v1017;
          v952 = v1016;
          v951 = v1015;
          v950 = v1014;
          v949 = v1013;
          v948 = v1012;
          v947 = v1011;
          v946 = v1010;
          v945 = v1009;
          v944 = v1008;
          v943 = v1007;
          v942 = v1006;
          v941 = v1005;
          v940 = v1004;
          v939 = v1003;
          v938 = v1002;
          v937 = v1001;
          v936 = v1000;
          v935 = v999;
          v934 = v998;
          v932 = v996;
          v933 = v997;
          v930 = v994;
          v931 = v995;
          v928 = v992;
          v929 = v993;
          v926 = v990;
          v927 = v991;
          v924 = v988;
          v925 = v989;
          v922 = v986;
          v923 = v987;
          v920 = v984;
          v921 = v985;
          v919 = v983;
          v919.i64[((_BYTE)v218 + 11) & 0x7F] = *(_QWORD *)&v918.f64[1];
          v308 = v954;
          v917 = v952;
          v918 = v953;
          v915 = v950;
          v916 = v951;
          v254 = v949;
          v309 = v948;
          v310 = v947;
          v311 = v946;
          v255 = v945;
          v253 = v944;
          v312 = v943;
          v313 = v942;
          v314 = v941;
          v315 = v940;
          v316 = v939;
          v317 = v938;
          v318 = v937;
          v319 = v936;
          v320 = v935;
          v321 = v934;
          v322 = v932;
          v323 = v933;
          v264 = v930;
          v324 = v931;
          v325 = v928;
          v326 = v929;
          v327 = v926;
          v328 = v927;
          v877 = v927;
          v878 = v926;
          v329 = v924;
          v330 = v925;
          v875 = v925;
          v876 = v924;
          v273 = v922;
          v331 = v923;
          v277 = v920;
          v274 = v921;
          v278 = v919;
          *(int8x16_t *)(v7 + 32) = v921;
          *(int8x16_t *)(v7 + 48) = v273;
          *(int8x16_t *)(v7 + 64) = v331;
          *(int8x16_t *)(v7 + 80) = v329;
          *(int8x16_t *)(v7 + 96) = v330;
          *(int8x16_t *)(v7 + 112) = v327;
          *(int8x16_t *)(v7 + 128) = v328;
          *(int8x16_t *)(v7 + 144) = v325;
          v332 = v325;
          v333 = v326;
          *(int8x16_t *)(v7 + 160) = v326;
          *(int8x16_t *)(v7 + 176) = v264;
          v218 += 12;
          v263 += 6;
          *(int8x16_t *)(v7 + 192) = v324;
          *(int8x16_t *)(v7 + 208) = v322;
          *(int8x16_t *)(v7 + 224) = v323;
          *(int8x16_t *)(v7 + 240) = v321;
          *(int8x16_t *)(v7 + 256) = v320;
          *(int8x16_t *)(v7 + 272) = v319;
          *(int8x16_t *)(v7 + 288) = v318;
          *(int8x16_t *)(v7 + 304) = v317;
          *(int8x16_t *)(v7 + 320) = v316;
          *(int8x16_t *)(v7 + 336) = v315;
          *(int8x16_t *)(v7 + 352) = v314;
          *(int8x16_t *)(v7 + 368) = v313;
          *(int8x16_t *)(v7 + 384) = v312;
          *(int8x16_t *)(v7 + 400) = v253;
          *(int8x16_t *)(v7 + 416) = v255;
          *(int8x16_t *)(v7 + 432) = v311;
          v334 = v310;
          *(int8x16_t *)(v7 + 448) = v310;
          *(int8x16_t *)(v7 + 464) = v309;
          v335 = v309;
          v336 = (int8x16_t)v915;
          v337 = (int8x16_t)v916;
          *(int8x16_t *)(v7 + 480) = v254;
          *(int8x16_t *)(v7 + 496) = v336;
          v339 = (int8x16_t)v917;
          v338 = (int8x16_t)v918;
          *(int8x16_t *)(v7 + 512) = v337;
          *(int8x16_t *)(v7 + 528) = v339;
          *(int8x16_t *)(v7 + 544) = v338;
          *(int8x16_t *)(v7 + 560) = v308;
          *(int8x16_t *)v7 = v278;
          *(int8x16_t *)(v7 + 16) = v277;
          v914 = (float64x2_t)v308;
          v899 = (float64x2_t)vextq_s8(v308, v308, 8uLL);
          v340 = vextq_s8(v338, v338, 8uLL);
          v248 = v264;
          v264.i64[0] = v331.i64[0];
          v898 = (float64x2_t)v340;
          v897 = (float64x2_t)vextq_s8(v339, v339, 8uLL);
          v896 = (float64x2_t)vextq_s8(v337, v337, 8uLL);
          v341 = v254;
          v254.i64[0] = v333.i64[0];
          v912 = (float64x2_t)v335;
          v913 = (float64x2_t)v341;
          v894 = (float64x2_t)vextq_s8(v341, v341, 8uLL);
          v895 = (float64x2_t)vextq_s8(v336, v336, 8uLL);
          v893 = (float64x2_t)vextq_s8(v335, v335, 8uLL);
          v910 = (float64x2_t)v311;
          v911 = (float64x2_t)v334;
          v892 = (float64x2_t)vextq_s8(v334, v334, 8uLL);
          v891 = (float64x2_t)vextq_s8(v311, v311, 8uLL);
          v890 = (float64x2_t)vextq_s8(v255, v255, 8uLL);
          v342 = v253;
          v253.i64[0] = v332.i64[0];
          v908 = (float64x2_t)v342;
          v909 = (float64x2_t)v255;
          v889 = (float64x2_t)vextq_s8(v342, v342, 8uLL);
          v906 = (float64x2_t)v313;
          v907 = (float64x2_t)v312;
          v888 = (float64x2_t)vextq_s8(v312, v312, 8uLL);
          v887 = vextq_s8(v313, v313, 8uLL);
          v904 = (float64x2_t)v315;
          v905 = (float64x2_t)v314;
          v886 = vextq_s8(v314, v314, 8uLL);
          v885 = vextq_s8(v315, v315, 8uLL);
          v884 = vextq_s8(v316, v316, 8uLL);
          v343 = v317;
          v260 = v877;
          v261 = v878;
          v902 = (float64x2_t)v343;
          v903 = (float64x2_t)v316;
          v883 = vextq_s8(v343, v343, 8uLL);
          v900 = (float64x2_t)v319;
          v901 = (float64x2_t)v318;
          v882 = vextq_s8(v318, v318, 8uLL);
          v881 = vextq_s8(v319, v319, 8uLL);
          v249 = v320;
          v880 = vextq_s8(v249, v249, 8uLL);
          v250 = v321.i64[0];
          v879 = vextq_s8(v321, v321, 8uLL);
          v344 = v323;
          v268 = v875;
          v269 = v876;
          v251 = v344.i64[0];
          v252 = vextq_s8(v344, v344, 8uLL).u64[0];
          v255.i64[0] = v322.i64[0];
          v256 = vextq_s8(v322, v322, 8uLL).u64[0];
          v257 = v324.i64[0];
          v258 = vextq_s8(v324, v324, 8uLL).u64[0];
          v259 = vextq_s8(v248, v248, 8uLL).u64[0];
          v262 = vextq_s8(v333, v333, 8uLL).u64[0];
          v265 = vextq_s8(v332, v332, 8uLL).u64[0];
          v266 = vextq_s8(v260, v260, 8uLL).u64[0];
          v267 = vextq_s8(v261, v261, 8uLL).u64[0];
          v270 = vextq_s8(v268, v268, 8uLL).u64[0];
          v271 = vextq_s8(v269, v269, 8uLL).u64[0];
          v272 = vextq_s8(v331, v331, 8uLL).u64[0];
          v275 = vextq_s8(v273, v273, 8uLL).u64[0];
          v276 = vextq_s8(v274, v274, 8uLL).u64[0];
          v279 = vextq_s8(v277, v277, 8uLL).u64[0];
          v280 = vextq_s8(v278, v278, 8uLL).u64[0];
        }
        while (v218 != 72);
        break;
      case 2:
        v345 = v6 * result[1].f64[0];
        v347 = *(float64x2_t *)(v7 + 464);
        v346 = *(float64x2_t *)(v7 + 480);
        v349 = *(float64x2_t *)(v7 + 432);
        v348 = *(float64x2_t *)(v7 + 448);
        v351 = *(float64x2_t *)(v7 + 400);
        v350 = *(float64x2_t *)(v7 + 416);
        v353 = *(float64x2_t *)(v7 + 368);
        v352 = *(float64x2_t *)(v7 + 384);
        v355 = *(float64x2_t *)(v7 + 336);
        v354 = *(float64x2_t *)(v7 + 352);
        v357 = *(float64x2_t *)(v7 + 304);
        v356 = *(float64x2_t *)(v7 + 320);
        v359 = *(float64x2_t *)(v7 + 272);
        v358 = *(float64x2_t *)(v7 + 288);
        v361 = *(float64x2_t *)(v7 + 240);
        v360 = *(float64x2_t *)(v7 + 256);
        v363 = *(float64x2_t *)(v7 + 208);
        v362 = *(float64x2_t *)(v7 + 224);
        v364 = *(float64x2_t *)(v7 + 176);
        v365 = *(float64x2_t *)(v7 + 192);
        v367 = *(float64x2_t *)(v7 + 144);
        v366 = *(float64x2_t *)(v7 + 160);
        v369 = *(float64x2_t *)(v7 + 112);
        v368 = *(float64x2_t *)(v7 + 128);
        v371 = *(float64x2_t *)(v7 + 80);
        v370 = *(float64x2_t *)(v7 + 96);
        v372 = *(float64x2_t *)(v7 + 48);
        v373 = *(float64x2_t *)(v7 + 64);
        v374 = *(float64x2_t *)(v7 + 16);
        v375 = *(float64x2_t *)(v7 + 32);
        v918 = vmulq_n_f64(*(float64x2_t *)v7, v345);
        v917 = vmulq_n_f64(v374, v345);
        v915 = vmulq_n_f64(v372, v345);
        v916 = vmulq_n_f64(v375, v345);
        v914 = vmulq_n_f64(v373, v345);
        v376 = vmulq_n_f64(*(float64x2_t *)(v7 + 496), v345);
        v377 = vmulq_n_f64(*(float64x2_t *)(v7 + 512), v345);
        v378 = vmulq_n_f64(*(float64x2_t *)(v7 + 528), v345);
        v379 = *(float64x2_t *)(v7 + 560);
        *(float64x2_t *)(v7 + 544) = vmulq_n_f64(*(float64x2_t *)(v7 + 544), v345);
        *(float64x2_t *)(v7 + 560) = vmulq_n_f64(v379, v345);
        *(float64x2_t *)(v7 + 512) = v377;
        *(float64x2_t *)(v7 + 528) = v378;
        *(float64x2_t *)(v7 + 480) = vmulq_n_f64(v346, v345);
        *(float64x2_t *)(v7 + 496) = v376;
        *(float64x2_t *)(v7 + 448) = vmulq_n_f64(v348, v345);
        *(float64x2_t *)(v7 + 464) = vmulq_n_f64(v347, v345);
        *(float64x2_t *)(v7 + 416) = vmulq_n_f64(v350, v345);
        *(float64x2_t *)(v7 + 432) = vmulq_n_f64(v349, v345);
        *(float64x2_t *)(v7 + 384) = vmulq_n_f64(v352, v345);
        *(float64x2_t *)(v7 + 400) = vmulq_n_f64(v351, v345);
        *(float64x2_t *)(v7 + 352) = vmulq_n_f64(v354, v345);
        *(float64x2_t *)(v7 + 368) = vmulq_n_f64(v353, v345);
        *(float64x2_t *)(v7 + 320) = vmulq_n_f64(v356, v345);
        *(float64x2_t *)(v7 + 336) = vmulq_n_f64(v355, v345);
        *(float64x2_t *)(v7 + 288) = vmulq_n_f64(v358, v345);
        *(float64x2_t *)(v7 + 304) = vmulq_n_f64(v357, v345);
        *(float64x2_t *)(v7 + 256) = vmulq_n_f64(v360, v345);
        *(float64x2_t *)(v7 + 272) = vmulq_n_f64(v359, v345);
        *(float64x2_t *)(v7 + 224) = vmulq_n_f64(v362, v345);
        *(float64x2_t *)(v7 + 240) = vmulq_n_f64(v361, v345);
        *(float64x2_t *)(v7 + 192) = vmulq_n_f64(v365, v345);
        *(float64x2_t *)(v7 + 208) = vmulq_n_f64(v363, v345);
        *(float64x2_t *)(v7 + 160) = vmulq_n_f64(v366, v345);
        *(float64x2_t *)(v7 + 176) = vmulq_n_f64(v364, v345);
        *(float64x2_t *)(v7 + 128) = vmulq_n_f64(v368, v345);
        *(float64x2_t *)(v7 + 144) = vmulq_n_f64(v367, v345);
        *(float64x2_t *)(v7 + 96) = vmulq_n_f64(v370, v345);
        *(float64x2_t *)(v7 + 112) = vmulq_n_f64(v369, v345);
        *(float64x2_t *)(v7 + 80) = vmulq_n_f64(v371, v345);
        goto LABEL_9;
      case 3:
        v381 = *(float64x2_t *)(v7 + 464);
        v380 = *(float64x2_t *)(v7 + 480);
        v383 = *(float64x2_t *)(v7 + 432);
        v382 = *(float64x2_t *)(v7 + 448);
        v385 = *(float64x2_t *)(v7 + 400);
        v384 = *(float64x2_t *)(v7 + 416);
        v387 = *(float64x2_t *)(v7 + 368);
        v386 = *(float64x2_t *)(v7 + 384);
        v389 = *(float64x2_t *)(v7 + 336);
        v388 = *(float64x2_t *)(v7 + 352);
        v391 = *(float64x2_t *)(v7 + 304);
        v390 = *(float64x2_t *)(v7 + 320);
        v392 = *(float64x2_t *)(v7 + 272);
        v393 = *(float64x2_t *)(v7 + 288);
        v395 = *(float64x2_t *)(v7 + 240);
        v394 = *(float64x2_t *)(v7 + 256);
        v397 = *(float64x2_t *)(v7 + 208);
        v396 = *(float64x2_t *)(v7 + 224);
        v398 = *(float64x2_t *)(v7 + 176);
        v399 = *(float64x2_t *)(v7 + 192);
        v401 = *(float64x2_t *)(v7 + 144);
        v400 = *(float64x2_t *)(v7 + 160);
        v403 = *(float64x2_t *)(v7 + 112);
        v402 = *(float64x2_t *)(v7 + 128);
        v405 = *(float64x2_t *)(v7 + 80);
        v404 = *(float64x2_t *)(v7 + 96);
        v406 = *(float64x2_t *)(v7 + 48);
        v407 = *(float64x2_t *)(v7 + 64);
        v408 = *(float64x2_t *)(v7 + 16);
        v409 = *(float64x2_t *)(v7 + 32);
        v918 = vmulq_n_f64(*(float64x2_t *)v7, v6);
        v917 = vmulq_n_f64(v408, v6);
        v915 = vmulq_n_f64(v406, v6);
        v916 = vmulq_n_f64(v409, v6);
        v913 = vmulq_n_f64(v405, v6);
        v914 = vmulq_n_f64(v407, v6);
        v410 = vmulq_n_f64(*(float64x2_t *)(v7 + 496), v6);
        v411 = vmulq_n_f64(*(float64x2_t *)(v7 + 512), v6);
        v412 = vmulq_n_f64(*(float64x2_t *)(v7 + 528), v6);
        v413 = *(float64x2_t *)(v7 + 560);
        *(float64x2_t *)(v7 + 544) = vmulq_n_f64(*(float64x2_t *)(v7 + 544), v6);
        *(float64x2_t *)(v7 + 560) = vmulq_n_f64(v413, v6);
        *(float64x2_t *)(v7 + 512) = v411;
        *(float64x2_t *)(v7 + 528) = v412;
        *(float64x2_t *)(v7 + 480) = vmulq_n_f64(v380, v6);
        *(float64x2_t *)(v7 + 496) = v410;
        *(float64x2_t *)(v7 + 448) = vmulq_n_f64(v382, v6);
        *(float64x2_t *)(v7 + 464) = vmulq_n_f64(v381, v6);
        *(float64x2_t *)(v7 + 416) = vmulq_n_f64(v384, v6);
        *(float64x2_t *)(v7 + 432) = vmulq_n_f64(v383, v6);
        *(float64x2_t *)(v7 + 384) = vmulq_n_f64(v386, v6);
        *(float64x2_t *)(v7 + 400) = vmulq_n_f64(v385, v6);
        *(float64x2_t *)(v7 + 352) = vmulq_n_f64(v388, v6);
        *(float64x2_t *)(v7 + 368) = vmulq_n_f64(v387, v6);
        *(float64x2_t *)(v7 + 320) = vmulq_n_f64(v390, v6);
        *(float64x2_t *)(v7 + 336) = vmulq_n_f64(v389, v6);
        *(float64x2_t *)(v7 + 288) = vmulq_n_f64(v393, v6);
        *(float64x2_t *)(v7 + 304) = vmulq_n_f64(v391, v6);
        *(float64x2_t *)(v7 + 256) = vmulq_n_f64(v394, v6);
        *(float64x2_t *)(v7 + 272) = vmulq_n_f64(v392, v6);
        *(float64x2_t *)(v7 + 224) = vmulq_n_f64(v396, v6);
        *(float64x2_t *)(v7 + 240) = vmulq_n_f64(v395, v6);
        *(float64x2_t *)(v7 + 192) = vmulq_n_f64(v399, v6);
        *(float64x2_t *)(v7 + 208) = vmulq_n_f64(v397, v6);
        *(float64x2_t *)(v7 + 160) = vmulq_n_f64(v400, v6);
        *(float64x2_t *)(v7 + 176) = vmulq_n_f64(v398, v6);
        *(float64x2_t *)(v7 + 128) = vmulq_n_f64(v402, v6);
        *(float64x2_t *)(v7 + 144) = vmulq_n_f64(v401, v6);
        *(float64x2_t *)(v7 + 96) = vmulq_n_f64(v404, v6);
        *(float64x2_t *)(v7 + 112) = vmulq_n_f64(v403, v6);
        *(float64x2_t *)(v7 + 80) = v913;
LABEL_9:
        v414 = v914;
        *(float64x2_t *)(v7 + 48) = v915;
        *(float64x2_t *)(v7 + 64) = v414;
        v415 = v916;
        *(float64x2_t *)(v7 + 16) = v917;
        *(float64x2_t *)(v7 + 32) = v415;
        *(float64x2_t *)v7 = v918;
        break;
      case 4:
        v416 = (float64x2_t *)v1687;
        v417 = (*(_QWORD *(**)(_QWORD *__return_ptr, double))(*(_QWORD *)&result->f64[0] + 64))(v1687, *v2);
        if (v7 + 576 > (unint64_t)v1687 && (unint64_t)&v1688 > v7)
        {
          MEMORY[0x24BDAC7A8](v417);
          v416 = (float64x2_t *)v868;
          v417 = memcpy(v868, v1687, sizeof(v868));
        }
        MEMORY[0x24BDAC7A8](v417);
        v419 = (float64x2_t *)&v868[-576];
        result = (float64x2_t *)memcpy(&v868[-576], (const void *)v7, 0x240uLL);
        v421 = *v416;
        v420 = v416[1];
        v423 = v416[6];
        v422 = v416[7];
        v425 = v416[12];
        v424 = v416[13];
        v427 = v416[18];
        v426 = v416[19];
        v428 = *(float64x2_t *)&v868[-560];
        v429 = vmlaq_laneq_f64(vmulq_n_f64(*v416, v419->f64[0]), v423, *v419, 1);
        v918 = *(float64x2_t *)&v868[-576];
        v430 = vmlaq_laneq_f64(vmlaq_n_f64(v429, v425, v428.f64[0]), v427, v428, 1);
        v431 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v420, v918.f64[0]), v422, v918, 1), v424, v428.f64[0]), v426, v428, 1);
        v433 = *(float64x2_t *)&v868[-496];
        v432 = *(float64x2_t *)&v868[-480];
        v435 = v432;
        v434 = *(float64x2_t *)&v868[-464];
        v436 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v421, v432.f64[0]), v423, v432, 1), v425, v434.f64[0]), v427, v434, 1);
        v437 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v420, v432.f64[0]), v422, v432, 1), v424, v434.f64[0]), v426, v434, 1);
        v438 = *(float64x2_t *)&v868[-384];
        v439 = v438;
        v440 = *(float64x2_t *)&v868[-368];
        v441 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v421, v438.f64[0]), v423, v438, 1), v425, v440.f64[0]), v427, v440, 1);
        v442 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v420, v438.f64[0]), v422, v438, 1), v424, v440.f64[0]), v426, v440, 1);
        v443 = *(float64x2_t *)&v868[-304];
        v444 = *(float64x2_t *)&v868[-288];
        v916 = *(float64x2_t *)&v868[-400];
        v917 = v443;
        v445 = vmlaq_laneq_f64(vmulq_n_f64(v421, v444.f64[0]), v423, v444, 1);
        v447 = *(float64x2_t *)&v868[-288];
        v446 = *(float64x2_t *)&v868[-272];
        v448 = vmlaq_laneq_f64(vmlaq_n_f64(v445, v425, v446.f64[0]), v427, v446, 1);
        v449 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v420, v444.f64[0]), v422, v444, 1), v424, v446.f64[0]), v426, v446, 1);
        v451 = v416[24];
        v450 = v416[25];
        v452 = v416[30];
        v453 = v416[31];
        v455 = v416[36];
        v454 = v416[37];
        v457 = v416[42];
        v456 = v416[43];
        v458 = *(float64x2_t *)&v868[-256];
        v460 = *(float64x2_t *)&v868[-560];
        v459 = *(float64x2_t *)&v868[-544];
        v462 = v459;
        v461 = *(float64x2_t *)&v868[-528];
        v463 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v430, v451, v459.f64[0]), v452, v459, 1), v455, v461.f64[0]), v457, v461, 1);
        v464 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v431, v450, v459.f64[0]), v453, v459, 1), v454, v461.f64[0]), v456, v461, 1);
        v466 = *(float64x2_t *)&v868[-464];
        v465 = *(float64x2_t *)&v868[-448];
        v467 = v465;
        v468 = *(float64x2_t *)&v868[-432];
        v469 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v436, v451, v465.f64[0]), v452, v465, 1), v455, v468.f64[0]), v457, v468, 1);
        v470 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v437, v450, v465.f64[0]), v453, v465, 1), v454, v468.f64[0]), v456, v468, 1);
        v472 = *(float64x2_t *)&v868[-368];
        v471 = *(float64x2_t *)&v868[-352];
        v473 = v471;
        v474 = *(float64x2_t *)&v868[-336];
        v475 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v441, v451, v471.f64[0]), v452, v471, 1), v455, v474.f64[0]), v457, v474, 1);
        v476 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v442, v450, v471.f64[0]), v453, v471, 1), v454, v474.f64[0]), v456, v474, 1);
        v477 = vmlaq_laneq_f64(vmlaq_n_f64(v448, v451, v458.f64[0]), v452, v458, 1);
        v479 = v458;
        v478 = *(float64x2_t *)&v868[-240];
        v480 = vmlaq_laneq_f64(vmlaq_n_f64(v477, v455, v478.f64[0]), v457, v478, 1);
        v481 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v449, v450, v458.f64[0]), v453, v458, 1), v454, v478.f64[0]), v456, v478, 1);
        v483 = v416[48];
        v482 = v416[49];
        v485 = v416[54];
        v484 = v416[55];
        v487 = *(float64x2_t *)&v868[-528];
        v486 = *(float64x2_t *)&v868[-512];
        v488 = vmlaq_laneq_f64(vmlaq_n_f64(v463, v483, v486.f64[0]), v485, v486, 1);
        v489 = vmlaq_laneq_f64(vmlaq_n_f64(v464, v482, v486.f64[0]), v484, v486, 1);
        v491 = *(float64x2_t *)&v868[-432];
        v490 = *(float64x2_t *)&v868[-416];
        v492 = vmlaq_laneq_f64(vmlaq_n_f64(v469, v483, v490.f64[0]), v485, v490, 1);
        v493 = vmlaq_laneq_f64(vmlaq_n_f64(v470, v482, v490.f64[0]), v484, v490, 1);
        v495 = v474;
        v494 = *(float64x2_t *)&v868[-320];
        v496 = vmlaq_laneq_f64(vmlaq_n_f64(v475, v483, v494.f64[0]), v485, v494, 1);
        v497 = vmlaq_laneq_f64(vmlaq_n_f64(v476, v482, v494.f64[0]), v484, v494, 1);
        v499 = *(float64x2_t *)&v868[-240];
        v498 = *(float64x2_t *)&v868[-224];
        v500 = vmlaq_n_f64(v480, v483, v498.f64[0]);
        v501 = v416[60];
        v502 = v416[61];
        v503 = vmlaq_laneq_f64(v500, v485, v498, 1);
        v504 = v416[67];
        v505 = v416[66];
        v506 = vmlaq_laneq_f64(vmlaq_n_f64(v481, v482, v498.f64[0]), v484, v498, 1);
        v508 = *(float64x2_t *)&v868[-512];
        v507 = *(float64x2_t *)&v868[-496];
        v509 = vmlaq_laneq_f64(vmlaq_n_f64(v488, v501, v507.f64[0]), v505, v507, 1);
        v510 = vmlaq_laneq_f64(vmlaq_n_f64(v489, v502, v507.f64[0]), v504, v507, 1);
        v511 = *(float64x2_t *)&v868[-416];
        v512 = *(float64x2_t *)&v868[-400];
        v513 = vmlaq_laneq_f64(vmlaq_n_f64(v492, v501, v512.f64[0]), v505, v512, 1);
        v514 = vmlaq_laneq_f64(vmlaq_n_f64(v493, v502, v512.f64[0]), v504, v512, 1);
        v515 = *(float64x2_t *)&v868[-320];
        v516 = *(float64x2_t *)&v868[-304];
        v517 = vmlaq_laneq_f64(vmlaq_n_f64(v496, v501, v516.f64[0]), v505, v516, 1);
        v518 = vmlaq_laneq_f64(vmlaq_n_f64(v497, v502, v516.f64[0]), v504, v516, 1);
        v520 = *(float64x2_t *)&v868[-224];
        v519 = *(float64x2_t *)&v868[-208];
        *(float64x2_t *)v7 = v509;
        *(float64x2_t *)(v7 + 16) = v510;
        *(float64x2_t *)(v7 + 96) = v513;
        *(float64x2_t *)(v7 + 112) = v514;
        *(float64x2_t *)(v7 + 192) = v517;
        *(float64x2_t *)(v7 + 208) = v518;
        *(float64x2_t *)(v7 + 288) = vmlaq_laneq_f64(vmlaq_n_f64(v503, v501, v519.f64[0]), v505, v519, 1);
        *(float64x2_t *)(v7 + 304) = vmlaq_laneq_f64(vmlaq_n_f64(v506, v502, v519.f64[0]), v504, v519, 1);
        v522 = v416[2];
        v521 = v416[3];
        v524 = v416[8];
        v523 = v416[9];
        v525 = *(float64x2_t *)&v868[-480];
        v526 = *(float64x2_t *)&v868[-384];
        v527 = vmlaq_laneq_f64(vmulq_n_f64(v522, v419->f64[0]), v524, *v419, 1);
        v528 = vmlaq_laneq_f64(vmulq_n_f64(v521, v419->f64[0]), v523, *v419, 1);
        v529 = vmlaq_laneq_f64(vmulq_n_f64(v522, v525.f64[0]), v524, v525, 1);
        v530 = vmlaq_laneq_f64(vmulq_n_f64(v521, v525.f64[0]), v523, v525, 1);
        v531 = vmlaq_laneq_f64(vmulq_n_f64(v522, v526.f64[0]), v524, v526, 1);
        v532 = vmlaq_laneq_f64(vmulq_n_f64(v521, v526.f64[0]), v523, v526, 1);
        v533 = *(float64x2_t *)&v868[-288];
        v534 = vmlaq_laneq_f64(vmulq_n_f64(v522, v533.f64[0]), v524, v533, 1);
        v535 = vmlaq_laneq_f64(vmulq_n_f64(v521, v533.f64[0]), v523, v533, 1);
        v536 = v416[14];
        v537 = v416[15];
        v538 = *(float64x2_t *)&v868[-560];
        v539 = v416[20];
        v540 = v416[21];
        v541 = vmlaq_laneq_f64(vmlaq_n_f64(v527, v536, v538.f64[0]), v539, v538, 1);
        v542 = vmlaq_laneq_f64(vmlaq_n_f64(v528, v537, v538.f64[0]), v540, v538, 1);
        v543 = *(float64x2_t *)&v868[-464];
        v544 = vmlaq_laneq_f64(vmlaq_n_f64(v529, v536, v543.f64[0]), v539, v543, 1);
        v545 = vmlaq_laneq_f64(vmlaq_n_f64(v530, v537, v543.f64[0]), v540, v543, 1);
        v546 = *(float64x2_t *)&v868[-368];
        v547 = vmlaq_laneq_f64(vmlaq_n_f64(v531, v536, v546.f64[0]), v539, v546, 1);
        v548 = vmlaq_laneq_f64(vmlaq_n_f64(v532, v537, v546.f64[0]), v540, v546, 1);
        v549 = *(float64x2_t *)&v868[-272];
        v550 = vmlaq_laneq_f64(vmlaq_n_f64(v534, v536, v549.f64[0]), v539, v549, 1);
        v551 = vmlaq_laneq_f64(vmlaq_n_f64(v535, v537, v549.f64[0]), v540, v549, 1);
        v552 = v416[26];
        v553 = v416[27];
        v554 = *(float64x2_t *)&v868[-544];
        v555 = v416[32];
        v556 = v416[33];
        v557 = vmlaq_laneq_f64(vmlaq_n_f64(v541, v552, v554.f64[0]), v555, v554, 1);
        v558 = vmlaq_laneq_f64(vmlaq_n_f64(v542, v553, v554.f64[0]), v556, v554, 1);
        v559 = *(float64x2_t *)&v868[-448];
        v560 = vmlaq_laneq_f64(vmlaq_n_f64(v544, v552, v559.f64[0]), v555, v559, 1);
        v561 = vmlaq_laneq_f64(vmlaq_n_f64(v545, v553, v559.f64[0]), v556, v559, 1);
        v562 = *(float64x2_t *)&v868[-352];
        v563 = vmlaq_laneq_f64(vmlaq_n_f64(v547, v552, v562.f64[0]), v555, v562, 1);
        v564 = vmlaq_laneq_f64(vmlaq_n_f64(v548, v553, v562.f64[0]), v556, v562, 1);
        v565 = *(float64x2_t *)&v868[-256];
        v566 = vmlaq_laneq_f64(vmlaq_n_f64(v550, v552, v565.f64[0]), v555, v565, 1);
        v567 = vmlaq_laneq_f64(vmlaq_n_f64(v551, v553, v565.f64[0]), v556, v565, 1);
        v568 = v416[38];
        v569 = v416[39];
        v570 = *(float64x2_t *)&v868[-528];
        v571 = v416[44];
        v572 = v416[45];
        v573 = vmlaq_laneq_f64(vmlaq_n_f64(v557, v568, v570.f64[0]), v571, v570, 1);
        v574 = vmlaq_laneq_f64(vmlaq_n_f64(v558, v569, v570.f64[0]), v572, v570, 1);
        v575 = *(float64x2_t *)&v868[-432];
        v576 = vmlaq_laneq_f64(vmlaq_n_f64(v560, v568, v575.f64[0]), v571, v575, 1);
        v577 = vmlaq_laneq_f64(vmlaq_n_f64(v561, v569, v575.f64[0]), v572, v575, 1);
        v578 = *(float64x2_t *)&v868[-336];
        v579 = vmlaq_laneq_f64(vmlaq_n_f64(v563, v568, v578.f64[0]), v571, v578, 1);
        v580 = vmlaq_laneq_f64(vmlaq_n_f64(v564, v569, v578.f64[0]), v572, v578, 1);
        v581 = *(float64x2_t *)&v868[-240];
        v582 = vmlaq_laneq_f64(vmlaq_n_f64(v566, v568, v581.f64[0]), v571, v581, 1);
        v583 = vmlaq_laneq_f64(vmlaq_n_f64(v567, v569, v581.f64[0]), v572, v581, 1);
        v584 = v416[50];
        v585 = v416[51];
        v586 = *(float64x2_t *)&v868[-512];
        v587 = v416[56];
        v588 = v416[57];
        v589 = vmlaq_laneq_f64(vmlaq_n_f64(v573, v584, v586.f64[0]), v587, v586, 1);
        v590 = vmlaq_laneq_f64(vmlaq_n_f64(v574, v585, v586.f64[0]), v588, v586, 1);
        v591 = *(float64x2_t *)&v868[-416];
        v592 = vmlaq_laneq_f64(vmlaq_n_f64(v576, v584, v591.f64[0]), v587, v591, 1);
        v593 = vmlaq_laneq_f64(vmlaq_n_f64(v577, v585, v591.f64[0]), v588, v591, 1);
        v594 = *(float64x2_t *)&v868[-320];
        v595 = vmlaq_laneq_f64(vmlaq_n_f64(v579, v584, v594.f64[0]), v587, v594, 1);
        v596 = vmlaq_laneq_f64(vmlaq_n_f64(v580, v585, v594.f64[0]), v588, v594, 1);
        v597 = *(float64x2_t *)&v868[-224];
        v598 = vmlaq_laneq_f64(vmlaq_n_f64(v582, v584, v597.f64[0]), v587, v597, 1);
        v599 = vmlaq_laneq_f64(vmlaq_n_f64(v583, v585, v597.f64[0]), v588, v597, 1);
        v600 = v416[62];
        v601 = v416[63];
        v602 = *(float64x2_t *)&v868[-496];
        v603 = v416[68];
        v604 = vmlaq_laneq_f64(vmlaq_n_f64(v589, v600, v602.f64[0]), v603, v602, 1);
        v605 = v416[69];
        v606 = vmlaq_laneq_f64(vmlaq_n_f64(v590, v601, v602.f64[0]), v605, v602, 1);
        v607 = *(float64x2_t *)&v868[-400];
        v608 = vmlaq_laneq_f64(vmlaq_n_f64(v592, v600, v607.f64[0]), v603, v607, 1);
        v609 = vmlaq_laneq_f64(vmlaq_n_f64(v593, v601, v607.f64[0]), v605, v607, 1);
        v610 = *(float64x2_t *)&v868[-304];
        v611 = vmlaq_laneq_f64(vmlaq_n_f64(v595, v600, v610.f64[0]), v603, v610, 1);
        v612 = vmlaq_laneq_f64(vmlaq_n_f64(v596, v601, v610.f64[0]), v605, v610, 1);
        v613 = *(float64x2_t *)&v868[-208];
        *(float64x2_t *)(v7 + 32) = v604;
        *(float64x2_t *)(v7 + 48) = v606;
        *(float64x2_t *)(v7 + 128) = v608;
        *(float64x2_t *)(v7 + 144) = v609;
        *(float64x2_t *)(v7 + 224) = v611;
        *(float64x2_t *)(v7 + 240) = v612;
        *(float64x2_t *)(v7 + 320) = vmlaq_laneq_f64(vmlaq_n_f64(v598, v600, v613.f64[0]), v603, v613, 1);
        *(float64x2_t *)(v7 + 336) = vmlaq_laneq_f64(vmlaq_n_f64(v599, v601, v613.f64[0]), v605, v613, 1);
        v615 = v416[4];
        v614 = v416[5];
        v617 = v416[10];
        v616 = v416[11];
        v619 = v416[16];
        v618 = v416[17];
        v621 = v416[22];
        v620 = v416[23];
        v622 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v615, v918.f64[0]), v617, v918, 1), v619, v460.f64[0]), v621, v460, 1);
        v623 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v614, v918.f64[0]), v616, v918, 1), v618, v460.f64[0]), v620, v460, 1);
        v624 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v615, v435.f64[0]), v617, v435, 1), v619, v466.f64[0]), v621, v466, 1);
        v625 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v614, v435.f64[0]), v616, v435, 1), v618, v466.f64[0]), v620, v466, 1);
        v626 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v615, v439.f64[0]), v617, v439, 1), v619, v472.f64[0]), v621, v472, 1);
        v627 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v614, v439.f64[0]), v616, v439, 1), v618, v472.f64[0]), v620, v472, 1);
        v628 = vmlaq_laneq_f64(vmulq_n_f64(v615, v447.f64[0]), v617, v447, 1);
        v629 = *(float64x2_t *)&v868[-272];
        v630 = vmlaq_laneq_f64(vmlaq_n_f64(v628, v619, v629.f64[0]), v621, v629, 1);
        v631 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v614, v447.f64[0]), v616, v447, 1), v618, v629.f64[0]), v620, v629, 1);
        v633 = v416[28];
        v632 = v416[29];
        v635 = v416[34];
        v634 = v416[35];
        v636 = v416[40];
        v637 = v416[41];
        v638 = vmlaq_laneq_f64(vmlaq_n_f64(v622, v633, v462.f64[0]), v635, v462, 1);
        v639 = vmlaq_laneq_f64(vmlaq_n_f64(v623, v632, v462.f64[0]), v634, v462, 1);
        v640 = v416[46];
        v641 = v416[47];
        v642 = vmlaq_laneq_f64(vmlaq_n_f64(v639, v637, v487.f64[0]), v641, v487, 1);
        v643 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v624, v633, v467.f64[0]), v635, v467, 1), v636, v491.f64[0]), v640, v491, 1);
        v644 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v625, v632, v467.f64[0]), v634, v467, 1), v637, v491.f64[0]), v641, v491, 1);
        v645 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v626, v633, v473.f64[0]), v635, v473, 1), v636, v495.f64[0]), v640, v495, 1);
        v646 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v627, v632, v473.f64[0]), v634, v473, 1), v637, v495.f64[0]), v641, v495, 1);
        v647 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v630, v633, v479.f64[0]), v635, v479, 1), v636, v499.f64[0]), v640, v499, 1);
        v648 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v631, v632, v479.f64[0]), v634, v479, 1), v637, v499.f64[0]), v641, v499, 1);
        v650 = v416[52];
        v649 = v416[53];
        v652 = v416[58];
        v651 = v416[59];
        v653 = v416[65];
        v654 = v416[64];
        v655 = v416[71];
        v656 = v416[70];
        v657 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v638, v636, v487.f64[0]), v640, v487, 1), v650, v508.f64[0]), v652, v508, 1), v654, v433.f64[0]), v656, v433, 1);
        v658 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v643, v650, v511.f64[0]), v652, v511, 1), v654, v916.f64[0]), v656, v916, 1);
        v659 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v644, v649, v511.f64[0]), v651, v511, 1), v653, v916.f64[0]), v655, v916, 1);
        v660 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v645, v650, v515.f64[0]), v652, v515, 1), v654, v917.f64[0]), v656, v917, 1);
        v661 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v646, v649, v515.f64[0]), v651, v515, 1), v653, v917.f64[0]), v655, v917, 1);
        v662 = vmlaq_laneq_f64(vmlaq_n_f64(v647, v650, v520.f64[0]), v652, v520, 1);
        v663 = *(float64x2_t *)&v868[-208];
        v664 = *(float64x2_t *)&v868[-192];
        *(float64x2_t *)(v7 + 64) = v657;
        *(float64x2_t *)(v7 + 80) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v642, v649, v508.f64[0]), v651, v508, 1), v653, v433.f64[0]), v655, v433, 1);
        *(float64x2_t *)(v7 + 160) = v658;
        *(float64x2_t *)(v7 + 176) = v659;
        *(float64x2_t *)(v7 + 256) = v660;
        *(float64x2_t *)(v7 + 272) = v661;
        *(float64x2_t *)(v7 + 352) = vmlaq_laneq_f64(vmlaq_n_f64(v662, v654, v663.f64[0]), v656, v663, 1);
        *(float64x2_t *)(v7 + 368) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v648, v649, v520.f64[0]), v651, v520, 1), v653, v663.f64[0]), v655, v663, 1);
        v665 = v416[1];
        v667 = v416[6];
        v666 = v416[7];
        v669 = v416[12];
        v668 = v416[13];
        v671 = v416[18];
        v670 = v416[19];
        v672 = *(float64x2_t *)&v868[-192];
        v673 = *(float64x2_t *)&v868[-176];
        v674 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v416, v664.f64[0]), v667, v664, 1), v669, v673.f64[0]), v671, v673, 1);
        v675 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v665, v664.f64[0]), v666, v664, 1), v668, v673.f64[0]), v670, v673, 1);
        v676 = *(float64x2_t *)&v868[-112];
        v677 = *(float64x2_t *)&v868[-96];
        v678 = vmlaq_laneq_f64(vmulq_n_f64(*v416, v677.f64[0]), v667, v677, 1);
        v679 = v677;
        v680 = *(float64x2_t *)&v868[-80];
        v681 = vmlaq_laneq_f64(vmlaq_n_f64(v678, v669, v680.f64[0]), v671, v680, 1);
        v682 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v665, v677.f64[0]), v666, v677, 1), v668, v680.f64[0]), v670, v680, 1);
        v684 = v416[24];
        v683 = v416[25];
        v685 = v416[30];
        v686 = v416[31];
        v688 = v416[36];
        v687 = v416[37];
        v690 = v416[42];
        v689 = v416[43];
        v691 = *(float64x2_t *)&v868[-176];
        v692 = *(float64x2_t *)&v868[-160];
        v693 = v692;
        v694 = *(float64x2_t *)&v868[-144];
        v695 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v674, v684, v692.f64[0]), v685, v692, 1), v688, v694.f64[0]), v690, v694, 1);
        v696 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v675, v683, v692.f64[0]), v686, v692, 1), v687, v694.f64[0]), v689, v694, 1);
        v697 = *(float64x2_t *)&v868[-80];
        v698 = *(float64x2_t *)&v868[-64];
        v699 = vmlaq_laneq_f64(vmlaq_n_f64(v681, v684, v698.f64[0]), v685, v698, 1);
        v701 = v698;
        v700 = *(float64x2_t *)&v868[-48];
        v702 = vmlaq_laneq_f64(vmlaq_n_f64(v699, v688, v700.f64[0]), v690, v700, 1);
        v703 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v682, v683, v698.f64[0]), v686, v698, 1), v687, v700.f64[0]), v689, v700, 1);
        v704 = v416[48];
        v705 = v416[49];
        v707 = v416[54];
        v706 = v416[55];
        v709 = v416[60];
        v708 = v416[61];
        v710 = v416[67];
        v711 = v416[66];
        v712 = *(float64x2_t *)&v868[-144];
        v713 = *(float64x2_t *)&v868[-128];
        v714 = v713;
        v715 = v676;
        v716 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v695, v704, v713.f64[0]), v707, v713, 1), v709, v715.f64[0]), v711, v715, 1);
        v717 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v696, v705, v713.f64[0]), v706, v713, 1), v708, v715.f64[0]), v710, v715, 1);
        v718 = *(float64x2_t *)&v868[-48];
        v719 = *(float64x2_t *)&v868[-32];
        v720 = vmlaq_laneq_f64(vmlaq_n_f64(v702, v704, v719.f64[0]), v707, v719, 1);
        v721 = v719;
        v722 = *(float64x2_t *)&v868[-16];
        *(float64x2_t *)(v7 + 384) = v716;
        *(float64x2_t *)(v7 + 400) = v717;
        *(float64x2_t *)(v7 + 480) = vmlaq_laneq_f64(vmlaq_n_f64(v720, v709, v722.f64[0]), v711, v722, 1);
        *(float64x2_t *)(v7 + 496) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v703, v705, v719.f64[0]), v706, v719, 1), v708, v722.f64[0]), v710, v722, 1);
        v724 = v416[2];
        v723 = v416[3];
        v726 = v416[8];
        v725 = v416[9];
        v728 = v416[14];
        v727 = v416[15];
        v730 = v416[20];
        v729 = v416[21];
        v732 = *(float64x2_t *)&v868[-192];
        v731 = *(float64x2_t *)&v868[-176];
        v733 = vmlaq_laneq_f64(vmulq_n_f64(v724, v732.f64[0]), v726, v732, 1);
        v734 = vmlaq_laneq_f64(vmulq_n_f64(v723, v732.f64[0]), v725, v732, 1);
        v735 = *(float64x2_t *)&v868[-96];
        v736 = *(float64x2_t *)&v868[-80];
        v737 = vmlaq_laneq_f64(vmlaq_n_f64(v733, v728, v731.f64[0]), v730, v731, 1);
        v738 = vmlaq_laneq_f64(vmlaq_n_f64(v734, v727, v731.f64[0]), v729, v731, 1);
        v739 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v724, v735.f64[0]), v726, v735, 1), v728, v736.f64[0]), v730, v736, 1);
        v740 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v723, v735.f64[0]), v725, v735, 1), v727, v736.f64[0]), v729, v736, 1);
        v742 = v416[26];
        v741 = v416[27];
        v744 = v416[32];
        v743 = v416[33];
        v746 = v416[38];
        v745 = v416[39];
        v748 = v416[44];
        v747 = v416[45];
        v749 = *(float64x2_t *)&v868[-160];
        v750 = vmlaq_laneq_f64(vmlaq_n_f64(v737, v742, v749.f64[0]), v744, v749, 1);
        v751 = vmlaq_laneq_f64(vmlaq_n_f64(v738, v741, v749.f64[0]), v743, v749, 1);
        v752 = *(float64x2_t *)&v868[-144];
        v753 = vmlaq_laneq_f64(vmlaq_n_f64(v750, v746, v752.f64[0]), v748, v752, 1);
        v754 = vmlaq_laneq_f64(vmlaq_n_f64(v751, v745, v752.f64[0]), v747, v752, 1);
        v755 = *(float64x2_t *)&v868[-64];
        v756 = vmlaq_n_f64(v739, v742, v755.f64[0]);
        v757 = *(float64x2_t *)&v868[-48];
        v758 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v756, v744, v755, 1), v746, v757.f64[0]), v748, v757, 1);
        v759 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v740, v741, v755.f64[0]), v743, v755, 1), v745, v757.f64[0]), v747, v757, 1);
        v761 = v416[50];
        v760 = v416[51];
        v763 = v416[56];
        v762 = v416[57];
        v765 = v416[62];
        v764 = v416[63];
        v766 = v416[69];
        v767 = v416[68];
        v768 = *(float64x2_t *)&v868[-128];
        v769 = vmlaq_laneq_f64(vmlaq_n_f64(v753, v761, v768.f64[0]), v763, v768, 1);
        v770 = vmlaq_laneq_f64(vmlaq_n_f64(v754, v760, v768.f64[0]), v762, v768, 1);
        v771 = *(float64x2_t *)&v868[-112];
        v772 = vmlaq_laneq_f64(vmlaq_n_f64(v769, v765, v771.f64[0]), v767, v771, 1);
        v773 = vmlaq_laneq_f64(vmlaq_n_f64(v770, v764, v771.f64[0]), v766, v771, 1);
        v774 = *(float64x2_t *)&v868[-32];
        v775 = vmlaq_n_f64(v758, v761, v774.f64[0]);
        v776 = *(float64x2_t *)&v868[-16];
        *(float64x2_t *)(v7 + 416) = v772;
        *(float64x2_t *)(v7 + 432) = v773;
        *(float64x2_t *)(v7 + 512) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v775, v763, v774, 1), v765, v776.f64[0]), v767, v776, 1);
        *(float64x2_t *)(v7 + 528) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v759, v760, v774.f64[0]), v762, v774, 1), v764, v776.f64[0]), v766, v776, 1);
        v778 = v416[4];
        v777 = v416[5];
        v780 = v416[10];
        v779 = v416[11];
        v782 = v416[16];
        v781 = v416[17];
        v784 = v416[22];
        v783 = v416[23];
        v785 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v778, v672.f64[0]), v780, v672, 1), v782, v691.f64[0]), v784, v691, 1);
        v786 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v777, v672.f64[0]), v779, v672, 1), v781, v691.f64[0]), v783, v691, 1);
        v787 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v778, v679.f64[0]), v780, v679, 1), v782, v697.f64[0]), v784, v697, 1);
        v788 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v777, v679.f64[0]), v779, v679, 1), v781, v697.f64[0]), v783, v697, 1);
        v790 = v416[28];
        v789 = v416[29];
        v792 = v416[34];
        v791 = v416[35];
        v794 = v416[40];
        v793 = v416[41];
        v796 = v416[46];
        v795 = v416[47];
        v797 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v785, v790, v693.f64[0]), v792, v693, 1), v794, v712.f64[0]), v796, v712, 1);
        v798 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v786, v789, v693.f64[0]), v791, v693, 1), v793, v712.f64[0]), v795, v712, 1);
        v799 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v787, v790, v701.f64[0]), v792, v701, 1), v794, v718.f64[0]), v796, v718, 1);
        v800 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v788, v789, v701.f64[0]), v791, v701, 1), v793, v718.f64[0]), v795, v718, 1);
        v802 = v416[52];
        v801 = v416[53];
        v804 = v416[58];
        v803 = v416[59];
        v805 = v416[65];
        v806 = v416[64];
        v807 = v416[71];
        v808 = v416[70];
        v809 = *(float64x2_t *)&v868[-16];
        *(float64x2_t *)(v7 + 448) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v797, v802, v714.f64[0]), v804, v714, 1), v806, v676.f64[0]), v808, v676, 1);
        *(float64x2_t *)(v7 + 464) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v798, v801, v714.f64[0]), v803, v714, 1), v805, v676.f64[0]), v807, v676, 1);
        *(float64x2_t *)(v7 + 544) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v799, v802, v721.f64[0]), v804, v721, 1), v806, v809.f64[0]), v808, v809, 1);
        *(float64x2_t *)(v7 + 560) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v800, v801, v721.f64[0]), v803, v721, 1), v805, v809.f64[0]), v807, v809, 1);
        break;
      default:
        break;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)&v4[3]->f64[1] + 4))
  {
    v810 = *v3;
    v811 = *v4;
    result = v4[1];
    v812 = (unint64_t)&(*v4)[36];
    switch(*((_DWORD *)v4 + 4))
    {
      case 0:
        v813 = (*v4)[37];
        v815 = (*v4)[38];
        v814 = (*v4)[39];
        v816 = (*v4)[40];
        v817 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vmulq_n_f64(result[1], v810), *(double *)v812), vmulq_n_f64(result[7], v810), *(float64x2_t *)v812, 1), vmulq_n_f64(result[13], v810), v813.f64[0]), vmulq_n_f64(result[19], v810), v813, 1), vmulq_n_f64(result[25], v810), v815.f64[0]),
                         vmulq_n_f64(result[31], v810),
                         v815,
                         1),
                       vmulq_n_f64(result[37], v810),
                       v814.f64[0]),
                     vmulq_n_f64(result[43], v810),
                     v814,
                     1),
                   vmulq_n_f64(result[49], v810),
                   v816.f64[0]),
                 vmulq_n_f64(result[55], v810),
                 v816,
                 1);
        v818 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vmulq_n_f64(result[2], v810), *(double *)v812), vmulq_n_f64(result[8], v810), *(float64x2_t *)v812, 1), vmulq_n_f64(result[14], v810), v813.f64[0]), vmulq_n_f64(result[20], v810), v813, 1), vmulq_n_f64(result[26], v810), v815.f64[0]),
                         vmulq_n_f64(result[32], v810),
                         v815,
                         1),
                       vmulq_n_f64(result[38], v810),
                       v814.f64[0]),
                     vmulq_n_f64(result[44], v810),
                     v814,
                     1),
                   vmulq_n_f64(result[50], v810),
                   v816.f64[0]),
                 vmulq_n_f64(result[56], v810),
                 v816,
                 1);
        v819 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vmulq_n_f64(result[3], v810), *(double *)v812), vmulq_n_f64(result[9], v810), *(float64x2_t *)v812, 1), vmulq_n_f64(result[15], v810), v813.f64[0]), vmulq_n_f64(result[21], v810), v813, 1), vmulq_n_f64(result[27], v810), v815.f64[0]),
                         vmulq_n_f64(result[33], v810),
                         v815,
                         1),
                       vmulq_n_f64(result[39], v810),
                       v814.f64[0]),
                     vmulq_n_f64(result[45], v810),
                     v814,
                     1),
                   vmulq_n_f64(result[51], v810),
                   v816.f64[0]),
                 vmulq_n_f64(result[57], v810),
                 v816,
                 1);
        v820 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vmulq_n_f64(result[4], v810), *(double *)v812), vmulq_n_f64(result[10], v810), *(float64x2_t *)v812, 1), vmulq_n_f64(result[16], v810), v813.f64[0]), vmulq_n_f64(result[22], v810), v813, 1), vmulq_n_f64(result[28], v810), v815.f64[0]),
                         vmulq_n_f64(result[34], v810),
                         v815,
                         1),
                       vmulq_n_f64(result[40], v810),
                       v814.f64[0]),
                     vmulq_n_f64(result[46], v810),
                     v814,
                     1),
                   vmulq_n_f64(result[52], v810),
                   v816.f64[0]),
                 vmulq_n_f64(result[58], v810),
                 v816,
                 1);
        v821 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vmulq_n_f64(result[5], v810), *(double *)v812), vmulq_n_f64(result[11], v810), *(float64x2_t *)v812, 1), vmulq_n_f64(result[17], v810), v813.f64[0]), vmulq_n_f64(result[23], v810), v813, 1), vmulq_n_f64(result[29], v810), v815.f64[0]),
                         vmulq_n_f64(result[35], v810),
                         v815,
                         1),
                       vmulq_n_f64(result[41], v810),
                       v814.f64[0]),
                     vmulq_n_f64(result[47], v810),
                     v814,
                     1),
                   vmulq_n_f64(result[53], v810),
                   v816.f64[0]),
                 vmulq_n_f64(result[59], v810),
                 v816,
                 1);
        v822 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vmulq_n_f64(result[6], v810), *(double *)v812), vmulq_n_f64(result[12], v810), *(float64x2_t *)v812, 1), vmulq_n_f64(result[18], v810), v813.f64[0]), vmulq_n_f64(result[24], v810), v813, 1), vmulq_n_f64(result[30], v810), v815.f64[0]),
                         vmulq_n_f64(result[36], v810),
                         v815,
                         1),
                       vmulq_n_f64(result[42], v810),
                       v814.f64[0]),
                     vmulq_n_f64(result[48], v810),
                     v814,
                     1),
                   vmulq_n_f64(result[54], v810),
                   v816.f64[0]),
                 vmulq_n_f64(result[60], v810),
                 v816,
                 1);
        v823 = vmulq_n_f64(result[66], v810);
        v824 = vmulq_n_f64(result[65], v810);
        v825 = vmulq_n_f64(result[64], v810);
        v826 = vmulq_n_f64(result[63], v810);
        v827 = vmulq_n_f64(result[62], v810);
        v828 = vmulq_n_f64(result[61], v810);
        v829 = vmulq_n_f64(result[72], v810);
        v830 = vmulq_n_f64(result[71], v810);
        v831 = vmulq_n_f64(result[70], v810);
        v832 = vmulq_n_f64(result[69], v810);
        v833 = vmulq_n_f64(result[68], v810);
        v834 = vmulq_n_f64(result[67], v810);
        v835 = (*v4)[41];
        (*v4)[40] = vmlaq_laneq_f64(vmlaq_n_f64(v821, v824, v835.f64[0]), v830, v835, 1);
        *(float64x2_t *)(v812 + 80) = vmlaq_laneq_f64(vmlaq_n_f64(v822, v823, v835.f64[0]), v829, v835, 1);
        *(float64x2_t *)(v812 + 32) = vmlaq_laneq_f64(vmlaq_n_f64(v819, v826, v835.f64[0]), v832, v835, 1);
        *(float64x2_t *)(v812 + 48) = vmlaq_laneq_f64(vmlaq_n_f64(v820, v825, v835.f64[0]), v831, v835, 1);
        *(float64x2_t *)v812 = vmlaq_laneq_f64(vmlaq_n_f64(v817, v828, v835.f64[0]), v834, v835, 1);
        *(float64x2_t *)(v812 + 16) = vmlaq_laneq_f64(vmlaq_n_f64(v818, v827, v835.f64[0]), v833, v835, 1);
        break;
      case 1:
        v836 = vmulq_n_f64(result[1], v810);
        v837 = vmulq_n_f64(result[2], v810);
        v838 = vmulq_n_f64(result[3], v810);
        v839 = vmulq_n_f64(result[4], v810);
        v840 = vmulq_n_f64(result[5], v810);
        v841 = vmulq_f64(vmulq_n_f64(result[6], v810), v811[41]);
        v842 = vmulq_f64(v840, v811[40]);
        v843 = vmulq_f64(v839, v811[39]);
        v844 = vmulq_f64(v838, v811[38]);
        v845 = vmulq_f64(v837, v811[37]);
        *(float64x2_t *)v812 = vmulq_f64(v836, v811[36]);
        *(float64x2_t *)(v812 + 16) = v845;
        *(float64x2_t *)(v812 + 32) = v844;
        *(float64x2_t *)(v812 + 48) = v843;
        *(float64x2_t *)(v812 + 64) = v842;
        *(float64x2_t *)(v812 + 80) = v841;
        break;
      case 2:
        v810 = v810 * result[1].f64[0];
        goto LABEL_22;
      case 3:
LABEL_22:
        v846 = vmulq_n_f64((*v4)[41], v810);
        v847 = vmulq_n_f64((*v4)[40], v810);
        v848 = vmulq_n_f64((*v4)[39], v810);
        v849 = vmulq_n_f64((*v4)[38], v810);
        v850 = vmulq_n_f64((*v4)[37], v810);
        *(float64x2_t *)v812 = vmulq_n_f64(*(float64x2_t *)v812, v810);
        *(float64x2_t *)(v812 + 16) = v850;
        *(float64x2_t *)(v812 + 32) = v849;
        *(float64x2_t *)(v812 + 48) = v848;
        *(float64x2_t *)(v812 + 64) = v847;
        *(float64x2_t *)(v812 + 80) = v846;
        break;
      case 4:
        v851 = (float64x2_t *)v1687;
        v852 = (*(_QWORD *(**)(_QWORD *__return_ptr, double))(*(_QWORD *)&result->f64[0] + 64))(v1687, v810);
        if (v812 + 96 > (unint64_t)v1687 && (unint64_t)&v1688 > v812)
        {
          MEMORY[0x24BDAC7A8](v852);
          v851 = (float64x2_t *)&v868[-1152];
          v852 = memcpy(&v868[-1152], v1687, 0x480uLL);
        }
        result = (float64x2_t *)MEMORY[0x24BDAC7A8](v852);
        v854 = *(_OWORD *)(v812 + 16);
        *(_OWORD *)&v868[-96] = *(_OWORD *)v812;
        *(_OWORD *)&v868[-80] = v854;
        v855 = *(_OWORD *)(v812 + 48);
        *(_OWORD *)&v868[-64] = *(_OWORD *)(v812 + 32);
        *(_OWORD *)&v868[-48] = v855;
        v856 = *(_OWORD *)(v812 + 80);
        *(_OWORD *)&v868[-32] = *(_OWORD *)(v812 + 64);
        *(_OWORD *)&v868[-16] = v856;
        v857 = *(float64x2_t *)&v868[-96];
        v859 = v857;
        v858 = *(float64x2_t *)&v868[-80];
        v860 = *(float64x2_t *)&v868[-64];
        v861 = *(float64x2_t *)&v868[-48];
        v862 = *(float64x2_t *)&v868[-32];
        v863 = *(float64x2_t *)&v868[-16];
        v864 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v851[1], v857.f64[0]), v851[7], v857, 1), v851[13], v858.f64[0]), v851[19], v858, 1), v851[25], v860.f64[0]), v851[31], v860,
                             1),
                           v851[37],
                           v861.f64[0]),
                         v851[43],
                         v861,
                         1),
                       v851[49],
                       v862.f64[0]),
                     v851[55],
                     v862,
                     1),
                   v851[61],
                   v863.f64[0]),
                 v851[67],
                 v863,
                 1);
        v811[36] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v851, v857.f64[0]), v851[6], v857, 1), v851[12], v858.f64[0]), v851[18], v858, 1), v851[24], v860.f64[0]), v851[30], v860,
                                 1),
                               v851[36],
                               v861.f64[0]),
                             v851[42],
                             v861,
                             1),
                           v851[48],
                           v862.f64[0]),
                         v851[54],
                         v862,
                         1),
                       v851[60],
                       v863.f64[0]),
                     v851[66],
                     v863,
                     1);
        v811[37] = v864;
        v865 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v851[3], v857.f64[0]), v851[9], v857, 1), v851[15], v858.f64[0]), v851[21], v858, 1), v851[27], v860.f64[0]), v851[33], v860,
                             1),
                           v851[39],
                           v861.f64[0]),
                         v851[45],
                         v861,
                         1),
                       v851[51],
                       v862.f64[0]),
                     v851[57],
                     v862,
                     1),
                   v851[63],
                   v863.f64[0]),
                 v851[69],
                 v863,
                 1);
        v811[38] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v851[2], v857.f64[0]), v851[8], v857, 1), v851[14], v858.f64[0]), v851[20], v858, 1), v851[26], v860.f64[0]), v851[32], v860,
                                 1),
                               v851[38],
                               v861.f64[0]),
                             v851[44],
                             v861,
                             1),
                           v851[50],
                           v862.f64[0]),
                         v851[56],
                         v862,
                         1),
                       v851[62],
                       v863.f64[0]),
                     v851[68],
                     v863,
                     1);
        v811[39] = v865;
        v866 = *(float64x2_t *)&v868[-16];
        v867 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v851[5], v859.f64[0]), v851[11], v859, 1), v851[17], v858.f64[0]), v851[23], v858, 1), v851[29], v860.f64[0]), v851[35], v860,
                             1),
                           v851[41],
                           v861.f64[0]),
                         v851[47],
                         v861,
                         1),
                       v851[53],
                       v862.f64[0]),
                     v851[59],
                     v862,
                     1),
                   v851[65],
                   v866.f64[0]),
                 v851[71],
                 v866,
                 1);
        v811[40] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v851[4], v859.f64[0]), v851[10], v859, 1), v851[16], v858.f64[0]), v851[22], v858, 1), v851[28], v860.f64[0]), v851[34], v860,
                                 1),
                               v851[40],
                               v861.f64[0]),
                             v851[46],
                             v861,
                             1),
                           v851[52],
                           v862.f64[0]),
                         v851[58],
                         v862,
                         1),
                       v851[64],
                       v866.f64[0]),
                     v851[70],
                     v866,
                     1);
        v811[41] = v867;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_239C9BD0C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_250AFC870;
  v2 = (_QWORD *)(a1 + 160);
  v3 = *(_QWORD **)(a1 + 184);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 128);
  if (v5)
  {
    *(_QWORD *)(a1 + 136) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 104);
  if (v6)
  {
    *(_QWORD *)(a1 + 112) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 96);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 80);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_239C9BDE8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &unk_250AFC718;
  v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(_QWORD *)(a1 + 440) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 408);
  if (v3)
  {
    *(_QWORD *)(a1 + 416) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 392);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 400);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 376);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 384);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  free(*(void **)(a1 + 336));
  *(_QWORD *)a1 = &unk_250AFC7C8;
  sub_239C92064(a1 + 48);
  return a1;
}

double sub_239C9BEA0()
{
  return 0.0;
}

void sub_239C9BEC8(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "SparseHessian");
}

void sub_239C9BEFC(uint64_t a1)
{
  sub_239C9BD0C(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239C9BF20(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  double *v22;
  unint64_t *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  float64x2_t *v40;
  uint64_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  unint64_t *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  float64x2_t *v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t *v150;
  float64x2_t v151;
  float64x2_t v152;
  uint64_t v153;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  __int128 v193;
  int64x2_t v194;
  int64x2_t v195;
  int64x2_t v196;
  int64x2_t v197;
  int64x2_t v198;
  int64x2_t v199;
  int64x2_t v200;
  int64x2_t v201;
  int64x2_t v202;
  int64x2_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  int64x2_t v220;
  int64x2_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  int64x2_t v225;
  int64x2_t v226;
  int64x2_t v227;
  int64x2_t v228;
  int64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  uint64_t v236;
  _QWORD *v237;
  __int128 *v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  std::mutex v242;
  uint64_t v243;

  v243 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 192);
  __asm { FMOV            V0.2D, #1.0 }
  v193 = _Q0;
  v8 = v2[1];
  v236 = *v2;
  v237 = v2 + 7;
  v238 = &v193;
  v239 = v8;
  v240 = 0;
  v241 = a2;
  memset(v242.__m_.__opaque, 0, sizeof(v242.__m_.__opaque));
  v242.__m_.__sig = 850045863;
  v9 = *(_QWORD *)(v236 + 56);
  v10 = *(_QWORD *)(v236 + 64);
  while (v9 != v10)
  {
    v12 = *(_QWORD *)(v9 + 400);
    v11 = *(_QWORD *)(v9 + 408);
    if (((*(unsigned __int8 *)(v11 + 28) >> 2) & 1) == (char)(32 * *(_BYTE *)(v12 + 148)) >> 7)
      v13 = 2;
    else
      v13 = 1;
    if ((v13 & v241) == 0)
      goto LABEL_3;
    v14 = *(unsigned __int8 *)(v12 + 4);
    if (*(_BYTE *)(v12 + 4))
    {
      if (*(_DWORD *)(v12 + 144) == -1)
        goto LABEL_3;
    }
    v15 = *(unsigned __int8 *)(v11 + 4);
    if (*(_BYTE *)(v11 + 4))
    {
      if (*(_DWORD *)(v11 + 24) == -1)
        goto LABEL_3;
    }
    if (*(_BYTE *)(v12 + 4))
    {
      v16 = *(_DWORD *)(*v237 + 4 * *(unsigned int *)(v12 + 144));
      if (*(_BYTE *)(v11 + 4))
        goto LABEL_14;
    }
    else
    {
      v16 = -1;
      if (*(_BYTE *)(v11 + 4))
      {
LABEL_14:
        v17 = *(_DWORD *)(v237[3] + 4 * *(unsigned int *)(v11 + 24));
        goto LABEL_17;
      }
    }
    v17 = -1;
LABEL_17:
    sub_239C81C88(v9 + 8, (uint64_t)&v193, (uint64_t)&v194);
    if (!v15)
      goto LABEL_28;
    v18 = *(unint64_t **)(v8 + 64);
    v19 = v18[11] + 24 * v17;
    v21 = *(char **)v19;
    v20 = *(char **)(v19 + 8);
    if (*(char **)v19 != v20)
    {
      while (*(_DWORD *)v21 < v17)
      {
        v21 += 16;
        if (v21 == v20)
          goto LABEL_26;
      }
    }
    if (v21 == v20)
      goto LABEL_26;
    if (*(_DWORD *)v21 != v17)
    {
      v20 = v21;
LABEL_26:
      v22 = (double *)sub_239C82854(v18, (char **)v19, v17, v20);
      goto LABEL_27;
    }
    v22 = (double *)(v18[2] + 8 * *((_QWORD *)v21 + 1));
LABEL_27:
    _V5.D[1] = v230.f64[1];
    _D7 = v230.f64[1];
    __asm { FMLA            D6, D7, V5.D[1] }
    _D5 = v231.f64[1];
    __asm { FMLA            D6, D5, V4.D[1] }
    _D4 = v232.f64[1];
    __asm { FMLA            D6, D4, V3.D[1] }
    _D3 = v233.f64[1];
    __asm { FMLA            D6, D3, V2.D[1] }
    _D2 = v234.f64[1];
    __asm { FMLA            D6, D2, V1.D[1] }
    _D1 = v235.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    *v22 = *v22 + _D6;
LABEL_28:
    if (!v14)
    {
      v41 = v9 + 416;
      goto LABEL_52;
    }
    v36 = *(unint64_t **)(v8 + 40);
    v37 = v36[11] + 24 * v16;
    v39 = *(char **)v37;
    v38 = *(char **)(v37 + 8);
    if (*(char **)v37 != v38)
    {
      while (*(_DWORD *)v39 < v16)
      {
        v39 += 16;
        if (v39 == v38)
          goto LABEL_38;
      }
    }
    if (v39 != v38)
    {
      if (*(_DWORD *)v39 == v16)
      {
        v40 = (float64x2_t *)(v36[2] + 8 * *((_QWORD *)v39 + 1));
        goto LABEL_39;
      }
      v38 = v39;
    }
LABEL_38:
    v40 = (float64x2_t *)sub_239C82958(v36, (char **)v37, v16, v38);
LABEL_39:
    v42 = (float64x2_t)vzip1q_s64(v194, v200);
    v43 = (float64x2_t)vzip2q_s64(v194, v200);
    v44 = (float64x2_t)vzip1q_s64(v195, v201);
    v45 = (float64x2_t)vzip2q_s64(v195, v201);
    v46 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, *(double *)v194.i64), v43, (float64x2_t)v194, 1), v44, *(double *)v195.i64), v45, (float64x2_t)v195, 1);
    v47 = (float64x2_t)vzip1q_s64(v206, v212);
    v48 = (float64x2_t)vzip2q_s64(v206, v212);
    v49 = (float64x2_t)vzip1q_s64(v207, v213);
    v50 = (float64x2_t)vzip2q_s64(v207, v213);
    v51 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, *(double *)v194.i64), v48, (float64x2_t)v194, 1), v49, *(double *)v195.i64), v50, (float64x2_t)v195, 1);
    v52 = (float64x2_t)vzip1q_s64(v218, v224);
    v53 = (float64x2_t)vzip2q_s64(v218, v224);
    v54 = (float64x2_t)vzip1q_s64(v219, v225);
    v55 = (float64x2_t)vzip2q_s64(v219, v225);
    v56 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, *(double *)v194.i64), v53, (float64x2_t)v194, 1), v54, *(double *)v195.i64), v55, (float64x2_t)v195, 1);
    v57 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, *(double *)v200.i64), v43, (float64x2_t)v200, 1), v44, *(double *)v201.i64), v45, (float64x2_t)v201, 1);
    v179 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, *(double *)v200.i64), v48, (float64x2_t)v200, 1), v49, *(double *)v201.i64), v50, (float64x2_t)v201, 1);
    v188 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, *(double *)v200.i64), v53, (float64x2_t)v200, 1), v54, *(double *)v201.i64), v55, (float64x2_t)v201, 1);
    v58 = vmlaq_laneq_f64(vmulq_n_f64(v42, *(double *)v206.i64), v43, (float64x2_t)v206, 1);
    v59 = vmlaq_laneq_f64(vmulq_n_f64(v47, *(double *)v206.i64), v48, (float64x2_t)v206, 1);
    v60 = vmlaq_laneq_f64(vmulq_n_f64(v42, *(double *)v212.i64), v43, (float64x2_t)v212, 1);
    v61 = vmlaq_laneq_f64(vmulq_n_f64(v47, *(double *)v212.i64), v48, (float64x2_t)v212, 1);
    v62 = vmlaq_laneq_f64(vmulq_n_f64(v42, *(double *)v218.i64), v43, (float64x2_t)v218, 1);
    v63 = vmlaq_laneq_f64(vmulq_n_f64(v47, *(double *)v218.i64), v48, (float64x2_t)v218, 1);
    v64 = vmlaq_laneq_f64(vmulq_n_f64(v42, *(double *)v224.i64), v43, (float64x2_t)v224, 1);
    v65 = vmlaq_laneq_f64(vmulq_n_f64(v47, *(double *)v224.i64), v48, (float64x2_t)v224, 1);
    v66 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v44, *(double *)v207.i64), v45, (float64x2_t)v207, 1);
    v172 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v49, *(double *)v207.i64), v50, (float64x2_t)v207, 1);
    v173 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, *(double *)v206.i64), v53, (float64x2_t)v206, 1), v54, *(double *)v207.i64), v55, (float64x2_t)v207, 1);
    v174 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v44, *(double *)v213.i64), v45, (float64x2_t)v213, 1);
    v175 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v49, *(double *)v213.i64), v50, (float64x2_t)v213, 1);
    v190 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, *(double *)v212.i64), v53, (float64x2_t)v212, 1), v54, *(double *)v213.i64), v55, (float64x2_t)v213, 1);
    v184 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v49, *(double *)v219.i64), v50, (float64x2_t)v219, 1);
    v186 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v44, *(double *)v219.i64), v45, (float64x2_t)v219, 1);
    v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, *(double *)v218.i64), v53, (float64x2_t)v218, 1), v54, *(double *)v219.i64), v55, (float64x2_t)v219, 1);
    v68 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v44, *(double *)v225.i64), v45, (float64x2_t)v225, 1);
    v69 = (float64x2_t)vzip1q_s64(v208, v214);
    v70 = vmlaq_n_f64(v65, v49, *(double *)v225.i64);
    v71 = (float64x2_t)vzip1q_s64(v220, v226);
    v72 = vmlaq_laneq_f64(v70, v50, (float64x2_t)v225, 1);
    v73 = (float64x2_t)vzip2q_s64(v208, v214);
    v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, *(double *)v224.i64), v53, (float64x2_t)v224, 1), v54, *(double *)v225.i64);
    v75 = (float64x2_t)vzip2q_s64(v220, v226);
    v76 = vmlaq_laneq_f64(v74, v55, (float64x2_t)v225, 1);
    v77 = (float64x2_t)vzip1q_s64(v196, v202);
    v78 = (float64x2_t)vzip2q_s64(v196, v202);
    v79 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v69, *(double *)v196.i64), v73, (float64x2_t)v196, 1);
    v80 = vmlaq_laneq_f64(vmlaq_n_f64(v56, v71, *(double *)v196.i64), v75, (float64x2_t)v196, 1);
    v81 = (float64x2_t)vzip1q_s64(v197, v203);
    v82 = (float64x2_t)vzip2q_s64(v197, v203);
    v83 = (float64x2_t)vzip1q_s64(v209, v215);
    v84 = (float64x2_t)vzip2q_s64(v209, v215);
    v181 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v83, *(double *)v197.i64), v84, (float64x2_t)v197, 1);
    v182 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v46, v77, *(double *)v196.i64), v78, (float64x2_t)v196, 1), v81, *(double *)v197.i64), v82, (float64x2_t)v197, 1);
    v85 = (float64x2_t)vzip1q_s64(v221, v227);
    v86 = (float64x2_t)vzip2q_s64(v221, v227);
    v177 = vmlaq_laneq_f64(vmlaq_n_f64(v80, v85, *(double *)v197.i64), v86, (float64x2_t)v197, 1);
    v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v57, v77, *(double *)v202.i64), v78, (float64x2_t)v202, 1), v81, *(double *)v203.i64), v82, (float64x2_t)v203, 1);
    v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v179, v69, *(double *)v202.i64), v73, (float64x2_t)v202, 1), v83, *(double *)v203.i64), v84, (float64x2_t)v203, 1);
    v189 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v188, v71, *(double *)v202.i64), v75, (float64x2_t)v202, 1), v85, *(double *)v203.i64), v86, (float64x2_t)v203, 1);
    v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v66, v77, *(double *)v208.i64), v78, (float64x2_t)v208, 1), v81, *(double *)v209.i64), v82, (float64x2_t)v209, 1);
    v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v172, v69, *(double *)v208.i64), v73, (float64x2_t)v208, 1), v83, *(double *)v209.i64), v84, (float64x2_t)v209, 1);
    v91 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v173, v71, *(double *)v208.i64), v75, (float64x2_t)v208, 1), v85, *(double *)v209.i64), v86, (float64x2_t)v209, 1);
    v92 = vmlaq_laneq_f64(vmlaq_n_f64(v184, v69, *(double *)v220.i64), v73, (float64x2_t)v220, 1);
    v93 = vmlaq_laneq_f64(vmlaq_n_f64(v72, v69, *(double *)v226.i64), v73, (float64x2_t)v226, 1);
    v94 = vmlaq_laneq_f64(vmlaq_n_f64(v76, v71, *(double *)v226.i64), v75, (float64x2_t)v226, 1);
    v95 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v174, v77, *(double *)v214.i64), v78, (float64x2_t)v214, 1), v81, *(double *)v215.i64), v82, (float64x2_t)v215, 1);
    v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v175, v69, *(double *)v214.i64), v73, (float64x2_t)v214, 1), v83, *(double *)v215.i64), v84, (float64x2_t)v215, 1);
    v191 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v190, v71, *(double *)v214.i64), v75, (float64x2_t)v214, 1), v85, *(double *)v215.i64), v86, (float64x2_t)v215, 1);
    v185 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v83, *(double *)v221.i64), v84, (float64x2_t)v221, 1);
    v187 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v186, v77, *(double *)v220.i64), v78, (float64x2_t)v220, 1), v81, *(double *)v221.i64), v82, (float64x2_t)v221, 1);
    v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v67, v71, *(double *)v220.i64), v75, (float64x2_t)v220, 1), v85, *(double *)v221.i64), v86, (float64x2_t)v221, 1);
    v98 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v68, v77, *(double *)v226.i64), v78, (float64x2_t)v226, 1), v81, *(double *)v227.i64), v82, (float64x2_t)v227, 1);
    v99 = (float64x2_t)vzip1q_s64(v210, v216);
    v100 = (float64x2_t)vzip1q_s64(v222, v228);
    v101 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v83, *(double *)v227.i64), v84, (float64x2_t)v227, 1);
    v102 = (float64x2_t)vzip2q_s64(v210, v216);
    v103 = vmlaq_n_f64(v94, v85, *(double *)v227.i64);
    v104 = (float64x2_t)vzip2q_s64(v222, v228);
    v105 = (float64x2_t)vzip1q_s64(v198, v204);
    v106 = (float64x2_t)vzip2q_s64(v198, v204);
    v107 = vmlaq_laneq_f64(vmlaq_n_f64(v177, v100, *(double *)v198.i64), v104, (float64x2_t)v198, 1);
    v180 = (float64x2_t)vzip1q_s64(v199, v205);
    v178 = (float64x2_t)vzip2q_s64(v199, v205);
    v183 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v182, v105, *(double *)v198.i64), v106, (float64x2_t)v198, 1), v180, *(double *)v199.i64), v178, (float64x2_t)v199, 1);
    v176 = (float64x2_t)vzip1q_s64(v211, v217);
    v108 = (float64x2_t)vzip2q_s64(v211, v217);
    v109 = (float64x2_t)vzip1q_s64(v223, v229);
    v110 = (float64x2_t)vzip2q_s64(v223, v229);
    v111 = vmlaq_laneq_f64(vmlaq_n_f64(v96, v99, *(double *)v216.i64), v102, (float64x2_t)v216, 1);
    v192 = vmlaq_laneq_f64(vmlaq_n_f64(v191, v100, *(double *)v216.i64), v104, (float64x2_t)v216, 1);
    v112 = vaddq_f64(v40[2], vmlaq_laneq_f64(vmlaq_n_f64(v107, v109, *(double *)v199.i64), v110, (float64x2_t)v199, 1));
    v113 = vaddq_f64(v40[1], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v181, v99, *(double *)v198.i64), v102, (float64x2_t)v198, 1), v176, *(double *)v199.i64), v108, (float64x2_t)v199, 1));
    v114 = vaddq_f64(v40[5], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v189, v100, *(double *)v204.i64), v104, (float64x2_t)v204, 1), v109, *(double *)v205.i64), v110, (float64x2_t)v205, 1));
    v115 = vaddq_f64(v40[4], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v88, v99, *(double *)v204.i64), v102, (float64x2_t)v204, 1), v176, *(double *)v205.i64), v108, (float64x2_t)v205, 1));
    v116 = vaddq_f64(v40[3], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v87, v105, *(double *)v204.i64), v106, (float64x2_t)v204, 1), v180, *(double *)v205.i64), v178, (float64x2_t)v205, 1));
    v117 = vmlaq_laneq_f64(vmlaq_n_f64(v187, v105, *(double *)v222.i64), v106, (float64x2_t)v222, 1);
    v118 = vmlaq_laneq_f64(vmlaq_n_f64(v185, v99, *(double *)v222.i64), v102, (float64x2_t)v222, 1);
    v119 = vmlaq_laneq_f64(vmlaq_n_f64(v97, v100, *(double *)v222.i64), v104, (float64x2_t)v222, 1);
    v120 = vmlaq_laneq_f64(vmlaq_n_f64(v98, v105, *(double *)v228.i64), v106, (float64x2_t)v228, 1);
    v121 = vmlaq_laneq_f64(vmlaq_n_f64(v101, v99, *(double *)v228.i64), v102, (float64x2_t)v228, 1);
    v122 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v103, v86, (float64x2_t)v227, 1), v100, *(double *)v228.i64), v104, (float64x2_t)v228, 1);
    v123 = vaddq_f64(v40[8], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v91, v100, *(double *)v210.i64), v104, (float64x2_t)v210, 1), v109, *(double *)v211.i64), v110, (float64x2_t)v211, 1));
    v124 = vaddq_f64(v40[7], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v90, v99, *(double *)v210.i64), v102, (float64x2_t)v210, 1), v176, *(double *)v211.i64), v108, (float64x2_t)v211, 1));
    v125 = vaddq_f64(v40[6], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v89, v105, *(double *)v210.i64), v106, (float64x2_t)v210, 1), v180, *(double *)v211.i64), v178, (float64x2_t)v211, 1));
    v126 = vaddq_f64(v40[11], vmlaq_laneq_f64(vmlaq_n_f64(v192, v109, *(double *)v217.i64), v110, (float64x2_t)v217, 1));
    v127 = vaddq_f64(v40[10], vmlaq_laneq_f64(vmlaq_n_f64(v111, v176, *(double *)v217.i64), v108, (float64x2_t)v217, 1));
    v128 = vaddq_f64(v40[9], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v95, v105, *(double *)v216.i64), v106, (float64x2_t)v216, 1), v180, *(double *)v217.i64), v178, (float64x2_t)v217, 1));
    v129 = vmlaq_laneq_f64(vmlaq_n_f64(v118, v176, *(double *)v223.i64), v108, (float64x2_t)v223, 1);
    v130 = vmlaq_laneq_f64(vmlaq_n_f64(v121, v176, *(double *)v229.i64), v108, (float64x2_t)v229, 1);
    v131 = vaddq_f64(v40[14], vmlaq_laneq_f64(vmlaq_n_f64(v119, v109, *(double *)v223.i64), v110, (float64x2_t)v223, 1));
    v132 = vaddq_f64(v40[13], v129);
    v133 = vaddq_f64(v40[12], vmlaq_laneq_f64(vmlaq_n_f64(v117, v180, *(double *)v223.i64), v178, (float64x2_t)v223, 1));
    v134 = vaddq_f64(v40[17], vmlaq_laneq_f64(vmlaq_n_f64(v122, v109, *(double *)v229.i64), v110, (float64x2_t)v229, 1));
    v135 = vaddq_f64(v40[15], vmlaq_laneq_f64(vmlaq_n_f64(v120, v180, *(double *)v229.i64), v178, (float64x2_t)v229, 1));
    *v40 = vaddq_f64(*v40, v183);
    v40[1] = v113;
    v40[2] = v112;
    v40[3] = v116;
    v40[4] = v115;
    v40[5] = v114;
    v40[6] = v125;
    v40[7] = v124;
    v40[8] = v123;
    v40[9] = v128;
    v40[10] = v127;
    v40[11] = v126;
    v40[12] = v133;
    v40[13] = v132;
    v40[14] = v131;
    v40[15] = v135;
    v40[16] = vaddq_f64(v40[16], v130);
    v40[17] = v134;
    if (!v15)
      goto LABEL_50;
    v136 = *(unint64_t **)(v8 + 48);
    v137 = v136[11] + 24 * v17;
    v139 = *(char **)v137;
    v138 = *(char **)(v137 + 8);
    if (*(char **)v137 != v138)
    {
      while (*(_DWORD *)v139 < v16)
      {
        v139 += 16;
        if (v139 == v138)
          goto LABEL_48;
      }
    }
    if (v139 == v138)
      goto LABEL_48;
    if (*(_DWORD *)v139 != v16)
    {
      v138 = v139;
LABEL_48:
      v140 = (float64x2_t *)sub_239C82A5C(v136, (char **)v137, v16, v138);
      goto LABEL_49;
    }
    v140 = (float64x2_t *)(v136[2] + 8 * *((_QWORD *)v139 + 1));
LABEL_49:
    v141 = vaddq_f64(v140[2], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v218, v224), v230.f64[0]), (float64x2_t)vzip2q_s64(v218, v224), v230, 1), (float64x2_t)vzip1q_s64(v219, v225), v231.f64[0]), (float64x2_t)vzip2q_s64(v219, v225),
                               v231,
                               1),
                             (float64x2_t)vzip1q_s64(v220, v226),
                             v232.f64[0]),
                           (float64x2_t)vzip2q_s64(v220, v226),
                           v232,
                           1),
                         (float64x2_t)vzip1q_s64(v221, v227),
                         v233.f64[0]),
                       (float64x2_t)vzip2q_s64(v221, v227),
                       v233,
                       1),
                     (float64x2_t)vzip1q_s64(v222, v228),
                     v234.f64[0]),
                   (float64x2_t)vzip2q_s64(v222, v228),
                   v234,
                   1),
                 (float64x2_t)vzip1q_s64(v223, v229),
                 v235.f64[0]),
               (float64x2_t)vzip2q_s64(v223, v229),
               v235,
               1));
    v142 = vaddq_f64(v140[1], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v206, v212), v230.f64[0]), (float64x2_t)vzip2q_s64(v206, v212), v230, 1), (float64x2_t)vzip1q_s64(v207, v213), v231.f64[0]), (float64x2_t)vzip2q_s64(v207, v213),
                               v231,
                               1),
                             (float64x2_t)vzip1q_s64(v208, v214),
                             v232.f64[0]),
                           (float64x2_t)vzip2q_s64(v208, v214),
                           v232,
                           1),
                         (float64x2_t)vzip1q_s64(v209, v215),
                         v233.f64[0]),
                       (float64x2_t)vzip2q_s64(v209, v215),
                       v233,
                       1),
                     (float64x2_t)vzip1q_s64(v210, v216),
                     v234.f64[0]),
                   (float64x2_t)vzip2q_s64(v210, v216),
                   v234,
                   1),
                 (float64x2_t)vzip1q_s64(v211, v217),
                 v235.f64[0]),
               (float64x2_t)vzip2q_s64(v211, v217),
               v235,
               1));
    *v140 = vaddq_f64(*v140, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v194, v200), v230.f64[0]), (float64x2_t)vzip2q_s64(v194, v200), v230, 1), (float64x2_t)vzip1q_s64(v195, v201), v231.f64[0]), (float64x2_t)vzip2q_s64(v195, v201),
                                v231,
                                1),
                              (float64x2_t)vzip1q_s64(v196, v202),
                              v232.f64[0]),
                            (float64x2_t)vzip2q_s64(v196, v202),
                            v232,
                            1),
                          (float64x2_t)vzip1q_s64(v197, v203),
                          v233.f64[0]),
                        (float64x2_t)vzip2q_s64(v197, v203),
                        v233,
                        1),
                      (float64x2_t)vzip1q_s64(v198, v204),
                      v234.f64[0]),
                    (float64x2_t)vzip2q_s64(v198, v204),
                    v234,
                    1),
                  (float64x2_t)vzip1q_s64(v199, v205),
                  v235.f64[0]),
                (float64x2_t)vzip2q_s64(v199, v205),
                v235,
                1));
    v140[1] = v142;
    v140[2] = v141;
LABEL_50:
    v41 = v9 + 416;
    v143 = *(float64x2_t *)(v9 + 432);
    v144 = *(float64x2_t *)(v9 + 448);
    v145 = *(float64x2_t *)(v9 + 464);
    v146 = *(float64x2_t *)(v9 + 480);
    v147 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v194, v200), *(double *)v41), (float64x2_t)vzip2q_s64(v194, v200), *(float64x2_t *)v41, 1), (float64x2_t)vzip1q_s64(v195, v201), v143.f64[0]), (float64x2_t)vzip2q_s64(v195, v201), v143, 1), (float64x2_t)vzip1q_s64(v196, v202), v144.f64[0]),
                     (float64x2_t)vzip2q_s64(v196, v202),
                     v144,
                     1),
                   (float64x2_t)vzip1q_s64(v197, v203),
                   v145.f64[0]),
                 (float64x2_t)vzip2q_s64(v197, v203),
                 v145,
                 1),
               (float64x2_t)vzip1q_s64(v198, v204),
               v146.f64[0]),
             (float64x2_t)vzip2q_s64(v198, v204),
             v146,
             1);
    v148 = *(float64x2_t *)(v9 + 496);
    v149 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v206, v212), *(double *)v41), (float64x2_t)vzip2q_s64(v206, v212), *(float64x2_t *)v41, 1), (float64x2_t)vzip1q_s64(v207, v213), v143.f64[0]), (float64x2_t)vzip2q_s64(v207, v213), v143, 1),
                           (float64x2_t)vzip1q_s64(v208, v214),
                           v144.f64[0]),
                         (float64x2_t)vzip2q_s64(v208, v214),
                         v144,
                         1),
                       (float64x2_t)vzip1q_s64(v209, v215),
                       v145.f64[0]),
                     (float64x2_t)vzip2q_s64(v209, v215),
                     v145,
                     1),
                   (float64x2_t)vzip1q_s64(v210, v216),
                   v146.f64[0]),
                 (float64x2_t)vzip2q_s64(v210, v216),
                 v146,
                 1),
               (float64x2_t)vzip1q_s64(v211, v217),
               v148.f64[0]),
             (float64x2_t)vzip2q_s64(v211, v217),
             v148,
             1);
    v150 = (float64x2_t *)(*(_QWORD *)v8 + 8 * (*(_DWORD *)(v8 + 32) + 6 * v16));
    v151 = vsubq_f64(v150[2], vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v218, v224), *(double *)v41), (float64x2_t)vzip2q_s64(v218, v224), *(float64x2_t *)v41, 1), (float64x2_t)vzip1q_s64(v219, v225), v143.f64[0]), (float64x2_t)vzip2q_s64(v219, v225),
                               v143,
                               1),
                             (float64x2_t)vzip1q_s64(v220, v226),
                             v144.f64[0]),
                           (float64x2_t)vzip2q_s64(v220, v226),
                           v144,
                           1),
                         (float64x2_t)vzip1q_s64(v221, v227),
                         v145.f64[0]),
                       (float64x2_t)vzip2q_s64(v221, v227),
                       v145,
                       1),
                     (float64x2_t)vzip1q_s64(v222, v228),
                     v146.f64[0]),
                   (float64x2_t)vzip2q_s64(v222, v228),
                   v146,
                   1),
                 (float64x2_t)vzip1q_s64(v223, v229),
                 v148.f64[0]),
               (float64x2_t)vzip2q_s64(v223, v229),
               v148,
               1));
    v152 = vsubq_f64(v150[1], v149);
    *v150 = vsubq_f64(*v150, vmlaq_laneq_f64(vmlaq_n_f64(v147, (float64x2_t)vzip1q_s64(v199, v205), v148.f64[0]), (float64x2_t)vzip2q_s64(v199, v205), v148, 1));
    v150[1] = v152;
    v150[2] = v151;
LABEL_52:
    if (v15)
    {
      v153 = 8 * (*(_DWORD *)(v8 + 36) + v17);
      _V1.D[1] = v234.f64[1];
      _V0.D[1] = v235.f64[1];
      _V3.D[1] = v232.f64[1];
      _V2.D[1] = v233.f64[1];
      _V5.D[1] = v230.f64[1];
      _V4.D[1] = v231.f64[1];
      _D19 = *(_QWORD *)(v41 + 8);
      __asm { FMLA            D20, D19, V5.D[1] }
      _D5 = *(_QWORD *)(v41 + 24);
      __asm { FMLA            D20, D5, V4.D[1] }
      _D4 = *(_QWORD *)(v41 + 40);
      __asm { FMLA            D20, D4, V3.D[1] }
      _D3 = *(_QWORD *)(v41 + 56);
      __asm { FMLA            D20, D3, V2.D[1] }
      _D2 = *(_QWORD *)(v41 + 72);
      __asm { FMLA            D20, D2, V1.D[1] }
      _D1 = *(_QWORD *)(v41 + 88);
      __asm { FMLA            D20, D1, V0.D[1] }
      *(double *)(*(_QWORD *)v8 + v153) = *(double *)(*(_QWORD *)v8 + v153) - _D20;
    }
LABEL_3:
    v9 += 544;
  }
  std::mutex::~mutex(&v242);
}

void sub_239C9CCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::~mutex(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_239C9CCDC(uint64_t a1)
{
  return **(_QWORD **)(a1 + 192);
}

uint64_t sub_239C9CCE8(uint64_t a1)
{
  return **(_QWORD **)(a1 + 192);
}

uint64_t sub_239C9CCF4(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8);
}

uint64_t sub_239C9CD00(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  if (*(_QWORD *)(*a1 + 8 * a2) != a2)
  {
    v4 = sub_239C9CD00();
    *(_QWORD *)(*a1 + 8 * v2) = v4;
    return v4;
  }
  return v2;
}

void sub_239C9CD44(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  int *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int *v12;
  unint64_t v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  int8x8_t v48;
  uint8x8_t v49;
  unint64_t v50;
  int8x8_t **v51;
  int8x8_t *v52;
  uint64_t v53;
  int8x8_t v54;
  int8x8_t v55;
  int8x8_t v56;
  uint8x8_t v57;
  unint64_t v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t **v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _BYTE *v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t **v90;
  uint64_t **v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  _BYTE *v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t **v112;
  unint64_t v113;
  int64x2_t *v114;
  _BYTE *v115;
  unint64_t v116;
  unint64_t v117;
  int64x2_t v118;
  int64x2_t *v119;
  int64x2_t v120;
  int64x2_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t **v126;
  char *v127;
  uint64_t *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  int64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  _OWORD *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t **v142;
  uint64_t **v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  void *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t i;
  uint64_t v153;
  char *v154;
  unint64_t *v155;
  uint64_t *v156;
  uint64_t **v157;
  uint64_t **v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  _BYTE *v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  void *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  int8x8_t v193;
  unint64_t v194;
  uint8x8_t v195;
  unint64_t v196;
  uint64_t **v197;
  uint64_t *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unsigned int *v202;
  unint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  int8x8_t v208;
  uint8x8_t v209;
  unint64_t v210;
  int8x8_t **v211;
  int8x8_t *v212;
  uint64_t v213;
  int8x8_t v214;
  int8x8_t v215;
  int8x8_t v216;
  uint8x8_t v217;
  unint64_t v218;
  uint64_t **v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  int8x8_t v226;
  uint8x8_t v227;
  unint64_t v228;
  uint64_t **v229;
  uint64_t *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  _QWORD **v240;
  _QWORD *v241;
  unint64_t v242;
  _QWORD *v243;
  _QWORD **v244;
  unint64_t v245;
  _QWORD *v246;
  uint8x8_t v247;
  unint64_t v248;
  uint64_t **v249;
  uint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  _QWORD *v255;
  unint64_t v256;
  _QWORD *v257;
  uint8x8_t v258;
  unint64_t v259;
  uint64_t **v260;
  uint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t **v266;
  uint64_t **v267;
  uint64_t *v268;
  unint64_t v269;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  _BYTE *v276;
  int v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t **v286;
  uint64_t **v287;
  unint64_t v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  _BYTE *v295;
  int v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t *v309;
  uint64_t *v310;
  char *v311;
  char v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t *v315;
  uint64_t **v316;
  _QWORD *v317;
  void *v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint8x8_t v325;
  unint64_t v326;
  _QWORD *v327;
  _QWORD *v328;
  unint64_t v329;
  uint64_t v330;
  uint8x8_t v331;
  unint64_t v332;
  _QWORD *v333;
  _QWORD *v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  _QWORD *v342;
  unint64_t v343;
  uint8x8_t v344;
  unint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  int8x8_t v353;
  unint64_t v354;
  uint8x8_t v355;
  unint64_t v356;
  uint64_t **v357;
  uint64_t *v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  float32x2_t *v362;
  float v363;
  char v364;
  double v365;
  double v366;
  uint64_t *v367;
  uint64_t **v368;
  char *v369;
  _QWORD *v370;
  _QWORD *v371;
  _QWORD *v372;
  void *v373;
  _QWORD *v374;
  _QWORD *v375;
  unint64_t v376;
  _QWORD *v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t *v380;
  uint64_t *v381;
  uint64_t v382;
  char *v383;
  unint64_t v384;
  int64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t v390;
  unint64_t v391;
  char *v392;
  char *v393;
  uint64_t *v394;
  unint64_t v395;
  uint64_t v396;
  __int128 *v397;
  char *v398;
  __int128 v399;
  uint64_t v400;
  int8x8_t v401;
  BOOL v402;
  uint64_t v403;
  unint64_t v404;
  uint8x8_t v405;
  unint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  char *v412;
  _QWORD *v413;
  _QWORD *v414;
  void *v415;
  _QWORD *v416;
  void *v417;
  _QWORD *v418;
  _QWORD *v419;
  void *v420;
  _QWORD *v421;
  _QWORD *v422;
  void *v423;
  _QWORD *v424;
  _QWORD *v425;
  _QWORD *v426;
  void *v427;
  _QWORD *v428;
  _QWORD *v429;
  _QWORD *v430;
  int v431;
  _QWORD *v432;
  _QWORD *v434;
  unsigned int *v435;
  unsigned int *v436;
  unsigned int *v437;
  _QWORD *v438;
  _QWORD *v439;
  _QWORD *v441;
  unsigned int *v442;
  uint64_t *v443;
  int8x8_t *v444;
  unsigned int *v445;
  char *v446;
  unsigned int *v447;
  int v448;
  _QWORD *v449;
  void *v450[2];
  void *v451[2];
  int v452;
  char *v453;
  uint64_t *v454;
  char *v455;
  _BYTE v456[40];
  __int128 v457;
  __int16 v458;
  char v459;
  __int16 v460;
  char v461;
  void *v462[2];
  void *v463[2];
  int v464;
  void *v465[2];
  void *v466[2];
  int v467;
  void *__p[2];
  void *v469[2];
  int v470;
  void *v471[2];
  void *v472[2];
  __int128 v473;
  void *v474[2];
  uint64_t v475;
  _QWORD *v476;
  _QWORD *v477;
  uint64_t v478;
  char *v479;
  char *v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t *v483;
  unint64_t v484;
  _QWORD **v485;
  _QWORD *v486[2];
  _QWORD v487[3];
  _QWORD *v488;
  uint64_t v489;

  v7 = a1;
  v489 = *MEMORY[0x24BDAC8D0];
  v486[0] = 0;
  v486[1] = 0;
  v484 = 0;
  v485 = v486;
  v482 = (uint64_t *)&v483;
  v483 = 0;
  v479 = 0;
  v480 = 0;
  v481 = 0;
  sub_2396C6A9C(a1, (uint64_t)&v479, 1);
  v8 = (int *)v479;
  v9 = *(uint64_t **)(v7 + 88);
  if (v9)
  {
    v448 = -1;
    while (1)
    {
      v10 = *((_DWORD *)v9 + 55);
      if ((v10 & 0x80000000) == 0)
      {
        if (v448 >= v10)
          v11 = *((_DWORD *)v9 + 55);
        else
          v11 = v448;
        if (v448 != -1)
          v10 = v11;
        v448 = v10;
        if (!v10)
          break;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_12;
    }
    v448 = 0;
LABEL_12:
    if (v480 != v479)
      goto LABEL_13;
LABEL_38:
    v18 = -1;
    goto LABEL_41;
  }
  v448 = -1;
  if (v480 == v479)
    goto LABEL_38;
LABEL_13:
  v12 = (int *)(v479 + 8);
  if (v479 + 8 != v480)
  {
    v13 = *(_QWORD *)v479;
    v14 = (int *)(v479 + 8);
    do
    {
      v16 = *(_QWORD *)v14;
      v14 += 2;
      v15 = v16;
      v17 = v13 >= v16;
      if (v13 <= v16)
        v13 = v15;
      if (!v17)
        v8 = v12;
      v12 = v14;
    }
    while (v14 != (int *)v480);
  }
  v18 = *v8;
  v487[0] = &off_250AFC8F8;
  v487[1] = &v485;
  v487[2] = &v482;
  v488 = v487;
  v19 = *(_DWORD **)v7;
  v20 = (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 6;
  if (*(_QWORD *)(v7 + 8) != *(_QWORD *)v7 && *v19 == -1)
  {
    LODWORD(v21) = 0;
    while (1)
    {
      v21 = (v21 + 1);
      if (v20 <= v21)
        break;
      if (v19[16 * v21] != -1)
        goto LABEL_23;
    }
    LODWORD(v21) = -1;
  }
  else
  {
    LODWORD(v21) = 0;
  }
LABEL_23:
  if (v20 <= v21)
    v22 = 0xFFFFFFFFLL;
  else
    v22 = v21;
  if ((_DWORD)v22 != -1)
  {
    v23 = v19[16 * v22];
LABEL_28:
    *(_QWORD *)v456 = v23;
    if (!v488)
      sub_2394172E0();
    if ((*(unsigned int (**)(_QWORD *, _BYTE *, _DWORD *))(*v488 + 48))(v488, v456, &v19[16 * v22 + 2]))
    {
      v19 = *(_DWORD **)v7;
      while (1)
      {
        v22 = (v22 + 1);
        if ((uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 6 <= v22)
          break;
        v23 = v19[16 * v22];
        if ((_DWORD)v23 != -1)
        {
          if ((_DWORD)v22 != -1)
            goto LABEL_28;
          break;
        }
      }
    }
  }
  v24 = v488;
  if (v488 == v487)
  {
    v25 = 4;
    v24 = v487;
  }
  else
  {
    if (!v488)
      goto LABEL_41;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_41:
  v431 = v18;
  v476 = 0;
  v477 = 0;
  v478 = 0;
  sub_239433C1C(v7, (uint64_t)&v476, 1);
  v26 = (_QWORD *)a5[1];
  v441 = (_QWORD *)*a5;
  v27 = v476;
  v28 = v477;
  v444 = (int8x8_t *)v7;
  v438 = a5;
  v439 = v26;
  v432 = a3;
  if (v476 != v477)
  {
    v429 = v477;
    do
    {
      v29 = *v27;
      if (v26 != v441)
      {
        v31 = (_QWORD *)*a5;
        v30 = (_QWORD *)a5[1];
        if ((_QWORD *)*a5 != v30)
        {
          while (*v31 != v29)
          {
            if (++v31 == v30)
            {
              v31 = (_QWORD *)a5[1];
              break;
            }
          }
        }
        if (v31 != v30)
          goto LABEL_44;
      }
      v32 = (int8x8_t)a3[1];
      if (v32)
      {
        v33 = *v27;
        v34 = (uint8x8_t)vcnt_s8(v32);
        v34.i16[0] = vaddlv_u8(v34);
        if (v34.u32[0] > 1uLL)
        {
          v35 = *v27;
          if (*(_QWORD *)&v32 <= v33)
            v35 = v33 % *(_QWORD *)&v32;
        }
        else
        {
          v35 = (v32.i32[0] - 1) & v33;
        }
        v36 = *(uint64_t ***)(*a3 + 8 * v35);
        if (v36)
        {
          v37 = *v36;
          if (*v36)
          {
            if (v34.u32[0] < 2uLL)
            {
              v38 = *(_QWORD *)&v32 - 1;
              while (1)
              {
                v40 = v37[1];
                if (v40 == v33)
                {
                  if (*((_DWORD *)v37 + 4) == (_DWORD)v29)
                    goto LABEL_70;
                }
                else if ((v40 & v38) != v35)
                {
                  goto LABEL_44;
                }
                v37 = (uint64_t *)*v37;
                if (!v37)
                  goto LABEL_44;
              }
            }
            do
            {
              v39 = v37[1];
              if (v39 == v33)
              {
                if (*((_DWORD *)v37 + 4) == (_DWORD)v29)
                {
LABEL_70:
                  v434 = v27;
                  sub_239C4E434(v471, *(uint64_t **)(v37[3] + 16));
                  v41 = (unsigned int *)v471[0];
                  v42 = (unsigned int *)v471[1];
                  v436 = (unsigned int *)v471[1];
                  if (v471[0] == v471[1])
                  {
                    if (!v471[0])
                      goto LABEL_73;
                    goto LABEL_72;
                  }
LABEL_76:
                  v44 = *v41;
                  v43 = v41[1];
                  if (v439 != v441)
                  {
                    v46 = (_QWORD *)*v438;
                    v45 = (_QWORD *)v438[1];
                    if ((_QWORD *)*v438 != v45)
                    {
                      while (*v46 != v43)
                      {
                        if (++v46 == v45)
                        {
                          v46 = (_QWORD *)v438[1];
                          break;
                        }
                      }
                    }
                    if (v46 != v45)
                      goto LABEL_75;
                  }
                  v47 = (_QWORD *)v37[3];
                  v48 = (int8x8_t)v47[1];
                  if (!*(_QWORD *)&v48)
                    goto LABEL_122;
                  v49 = (uint8x8_t)vcnt_s8(v48);
                  v49.i16[0] = vaddlv_u8(v49);
                  if (v49.u32[0] > 1uLL)
                  {
                    v50 = *v41;
                    if (*(_QWORD *)&v48 <= v44)
                      v50 = v44 % *(_QWORD *)&v48;
                  }
                  else
                  {
                    v50 = (v48.i32[0] - 1) & v44;
                  }
                  v51 = *(int8x8_t ***)(*v47 + 8 * v50);
                  if (!v51 || (v52 = *v51) == 0)
                  {
LABEL_122:
                    v62 = 0;
                    v63 = 0;
                    goto LABEL_123;
                  }
                  if (v49.u32[0] < 2uLL)
                  {
                    v53 = *(_QWORD *)&v48 - 1;
                    while (1)
                    {
                      v55 = v52[1];
                      if (*(_QWORD *)&v55 == v44)
                      {
                        if (v52[2].i32[0] == (_DWORD)v44)
                          goto LABEL_102;
                      }
                      else if ((*(_QWORD *)&v55 & v53) != v50)
                      {
                        goto LABEL_122;
                      }
                      v52 = (int8x8_t *)*v52;
                      if (!v52)
                        goto LABEL_122;
                    }
                  }
                  while (1)
                  {
                    v54 = v52[1];
                    if (*(_QWORD *)&v54 == v44)
                    {
                      if (v52[2].i32[0] == (_DWORD)v44)
                      {
LABEL_102:
                        v56 = v52[4];
                        if (!*(_QWORD *)&v56)
                          goto LABEL_122;
                        v57 = (uint8x8_t)vcnt_s8(v56);
                        v57.i16[0] = vaddlv_u8(v57);
                        if (v57.u32[0] > 1uLL)
                        {
                          v58 = v41[1];
                          if (*(_QWORD *)&v56 <= v43)
                            v58 = v43 % *(_QWORD *)&v56;
                        }
                        else
                        {
                          v58 = (v56.i32[0] - 1) & v43;
                        }
                        v59 = *(uint64_t ***)(*(_QWORD *)&v52[3] + 8 * v58);
                        if (!v59)
                          goto LABEL_122;
                        v60 = *v59;
                        if (!v60)
                          goto LABEL_122;
                        if (v57.u32[0] < 2uLL)
                        {
                          v61 = *(_QWORD *)&v56 - 1;
                          while (1)
                          {
                            v65 = v60[1];
                            if (v65 == v43)
                            {
                              if (*((_DWORD *)v60 + 4) == (_DWORD)v43)
                                goto LABEL_208;
                            }
                            else if ((v65 & v61) != v58)
                            {
                              goto LABEL_122;
                            }
                            v62 = 0;
                            v63 = 0;
                            v60 = (uint64_t *)*v60;
                            if (!v60)
                              goto LABEL_123;
                          }
                        }
                        while (2)
                        {
                          v64 = v60[1];
                          if (v64 != v43)
                          {
                            if (v64 >= *(_QWORD *)&v56)
                              v64 %= *(_QWORD *)&v56;
                            if (v64 != v58)
                              goto LABEL_122;
                            goto LABEL_112;
                          }
                          if (*((_DWORD *)v60 + 4) != (_DWORD)v43)
                          {
LABEL_112:
                            v62 = 0;
                            v63 = 0;
                            v60 = (uint64_t *)*v60;
                            if (!v60)
                              goto LABEL_123;
                            continue;
                          }
                          break;
                        }
LABEL_208:
                        v108 = v60 + 3;
                        v63 = (unint64_t)v108 & 0xFFFFFFFFFFFFFF00;
                        v62 = v108;
LABEL_123:
                        sub_23943F628((uint64_t **)(v63 | v62), (uint64_t)v456);
                        if (v456[24])
                        {
                          v66 = *(unsigned int **)v456;
                          v445 = *(unsigned int **)&v456[8];
                          if (*(_QWORD *)v456 != *(_QWORD *)&v456[8])
                          {
                            v442 = v41;
                            v67 = v484;
                            while (1)
                            {
                              v69 = *v66;
                              v68 = v66[1];
                              v70 = &v483;
                              v71 = &v483;
                              v72 = v483;
                              if (v483)
                                break;
LABEL_135:
                              v76 = (uint64_t *)operator new(0x38uLL);
                              v76[4] = v44;
                              v76[5] = v69;
                              v76[6] = -1;
                              *v76 = 0;
                              v76[1] = 0;
                              v76[2] = (uint64_t)v70;
                              *v71 = v76;
                              if (*v482)
                              {
                                v482 = (uint64_t *)*v482;
                                v76 = *v71;
                              }
                              v77 = v483;
                              *((_BYTE *)v76 + 24) = v76 == v483;
                              if (v76 != v77)
                              {
                                do
                                {
                                  v78 = v76[2];
                                  if (*(_BYTE *)(v78 + 24))
                                    break;
                                  v79 = *(uint64_t **)(v78 + 16);
                                  v80 = *v79;
                                  if (*v79 == v78)
                                  {
                                    v83 = v79[1];
                                    if (!v83 || (v84 = *(unsigned __int8 *)(v83 + 24), v81 = (_BYTE *)(v83 + 24), v84))
                                    {
                                      if (*(uint64_t **)v78 == v76)
                                      {
                                        v85 = v76[2];
                                      }
                                      else
                                      {
                                        v85 = *(_QWORD *)(v78 + 8);
                                        v86 = *(_QWORD *)v85;
                                        *(_QWORD *)(v78 + 8) = *(_QWORD *)v85;
                                        if (v86)
                                        {
                                          *(_QWORD *)(v86 + 16) = v78;
                                          v79 = *(uint64_t **)(v78 + 16);
                                        }
                                        *(_QWORD *)(v85 + 16) = v79;
                                        *(_QWORD *)(*(_QWORD *)(v78 + 16) + 8 * (**(_QWORD **)(v78 + 16) != v78)) = v85;
                                        *(_QWORD *)v85 = v78;
                                        *(_QWORD *)(v78 + 16) = v85;
                                        v79 = *(uint64_t **)(v85 + 16);
                                        v78 = *v79;
                                      }
                                      *(_BYTE *)(v85 + 24) = 1;
                                      *((_BYTE *)v79 + 24) = 0;
                                      v89 = *(_QWORD *)(v78 + 8);
                                      *v79 = v89;
                                      if (v89)
                                        *(_QWORD *)(v89 + 16) = v79;
                                      *(_QWORD *)(v78 + 16) = v79[2];
                                      *(_QWORD *)(v79[2] + 8 * (*(_QWORD *)v79[2] != (_QWORD)v79)) = v78;
                                      *(_QWORD *)(v78 + 8) = v79;
                                      goto LABEL_163;
                                    }
                                  }
                                  else if (!v80
                                         || (v82 = *(unsigned __int8 *)(v80 + 24), v81 = (_BYTE *)(v80 + 24), v82))
                                  {
                                    if (*(uint64_t **)v78 == v76)
                                    {
                                      v87 = v76[1];
                                      *(_QWORD *)v78 = v87;
                                      if (v87)
                                      {
                                        *(_QWORD *)(v87 + 16) = v78;
                                        v79 = *(uint64_t **)(v78 + 16);
                                      }
                                      v76[2] = (uint64_t)v79;
                                      *(_QWORD *)(*(_QWORD *)(v78 + 16) + 8 * (**(_QWORD **)(v78 + 16) != v78)) = v76;
                                      v76[1] = v78;
                                      *(_QWORD *)(v78 + 16) = v76;
                                      v79 = (uint64_t *)v76[2];
                                    }
                                    else
                                    {
                                      v76 = (uint64_t *)v76[2];
                                    }
                                    *((_BYTE *)v76 + 24) = 1;
                                    *((_BYTE *)v79 + 24) = 0;
                                    v78 = v79[1];
                                    v88 = *(uint64_t **)v78;
                                    v79[1] = *(_QWORD *)v78;
                                    if (v88)
                                      v88[2] = (uint64_t)v79;
                                    *(_QWORD *)(v78 + 16) = v79[2];
                                    *(_QWORD *)(v79[2] + 8 * (*(_QWORD *)v79[2] != (_QWORD)v79)) = v78;
                                    *(_QWORD *)v78 = v79;
LABEL_163:
                                    v79[2] = v78;
                                    break;
                                  }
                                  *(_BYTE *)(v78 + 24) = 1;
                                  v76 = v79;
                                  *((_BYTE *)v79 + 24) = v79 == v77;
                                  *v81 = 1;
                                }
                                while (v79 != v77);
                              }
                              v484 = ++v67;
                              v72 = v483;
LABEL_165:
                              v90 = &v483;
LABEL_167:
                              v91 = v90;
                              if (v72)
                              {
                                do
                                {
                                  v90 = (uint64_t **)v72;
                                  v92 = v72[4];
                                  if (v92 > v43)
                                  {
LABEL_166:
                                    v72 = *v90;
                                    goto LABEL_167;
                                  }
                                  if (v92 >= v43)
                                  {
                                    v93 = v90[5];
                                    if ((unint64_t)v93 > v68)
                                      goto LABEL_166;
                                    if ((unint64_t)v93 >= v68)
                                      goto LABEL_204;
                                  }
                                  v72 = v90[1];
                                }
                                while (v72);
                                v91 = v90 + 1;
                              }
                              v94 = (uint64_t *)operator new(0x38uLL);
                              v94[4] = v43;
                              v94[5] = v68;
                              v94[6] = -1;
                              *v94 = 0;
                              v94[1] = 0;
                              v94[2] = (uint64_t)v90;
                              *v91 = v94;
                              if (*v482)
                              {
                                v482 = (uint64_t *)*v482;
                                v94 = *v91;
                              }
                              v95 = v483;
                              *((_BYTE *)v94 + 24) = v94 == v483;
                              if (v94 != v95)
                              {
                                do
                                {
                                  v96 = v94[2];
                                  if (*(_BYTE *)(v96 + 24))
                                    break;
                                  v97 = *(uint64_t **)(v96 + 16);
                                  v98 = *v97;
                                  if (*v97 == v96)
                                  {
                                    v101 = v97[1];
                                    if (!v101
                                      || (v102 = *(unsigned __int8 *)(v101 + 24), v99 = (_BYTE *)(v101 + 24), v102))
                                    {
                                      if (*(uint64_t **)v96 == v94)
                                      {
                                        v103 = v94[2];
                                      }
                                      else
                                      {
                                        v103 = *(_QWORD *)(v96 + 8);
                                        v104 = *(_QWORD *)v103;
                                        *(_QWORD *)(v96 + 8) = *(_QWORD *)v103;
                                        if (v104)
                                        {
                                          *(_QWORD *)(v104 + 16) = v96;
                                          v97 = *(uint64_t **)(v96 + 16);
                                        }
                                        *(_QWORD *)(v103 + 16) = v97;
                                        *(_QWORD *)(*(_QWORD *)(v96 + 16) + 8 * (**(_QWORD **)(v96 + 16) != v96)) = v103;
                                        *(_QWORD *)v103 = v96;
                                        *(_QWORD *)(v96 + 16) = v103;
                                        v97 = *(uint64_t **)(v103 + 16);
                                        v96 = *v97;
                                      }
                                      *(_BYTE *)(v103 + 24) = 1;
                                      *((_BYTE *)v97 + 24) = 0;
                                      v107 = *(_QWORD *)(v96 + 8);
                                      *v97 = v107;
                                      if (v107)
                                        *(_QWORD *)(v107 + 16) = v97;
                                      *(_QWORD *)(v96 + 16) = v97[2];
                                      *(_QWORD *)(v97[2] + 8 * (*(_QWORD *)v97[2] != (_QWORD)v97)) = v96;
                                      *(_QWORD *)(v96 + 8) = v97;
                                      goto LABEL_202;
                                    }
                                  }
                                  else if (!v98
                                         || (v100 = *(unsigned __int8 *)(v98 + 24), v99 = (_BYTE *)(v98 + 24), v100))
                                  {
                                    if (*(uint64_t **)v96 == v94)
                                    {
                                      v105 = v94[1];
                                      *(_QWORD *)v96 = v105;
                                      if (v105)
                                      {
                                        *(_QWORD *)(v105 + 16) = v96;
                                        v97 = *(uint64_t **)(v96 + 16);
                                      }
                                      v94[2] = (uint64_t)v97;
                                      *(_QWORD *)(*(_QWORD *)(v96 + 16) + 8 * (**(_QWORD **)(v96 + 16) != v96)) = v94;
                                      v94[1] = v96;
                                      *(_QWORD *)(v96 + 16) = v94;
                                      v97 = (uint64_t *)v94[2];
                                    }
                                    else
                                    {
                                      v94 = (uint64_t *)v94[2];
                                    }
                                    *((_BYTE *)v94 + 24) = 1;
                                    *((_BYTE *)v97 + 24) = 0;
                                    v96 = v97[1];
                                    v106 = *(uint64_t **)v96;
                                    v97[1] = *(_QWORD *)v96;
                                    if (v106)
                                      v106[2] = (uint64_t)v97;
                                    *(_QWORD *)(v96 + 16) = v97[2];
                                    *(_QWORD *)(v97[2] + 8 * (*(_QWORD *)v97[2] != (_QWORD)v97)) = v96;
                                    *(_QWORD *)v96 = v97;
LABEL_202:
                                    v97[2] = v96;
                                    break;
                                  }
                                  *(_BYTE *)(v96 + 24) = 1;
                                  v94 = v97;
                                  *((_BYTE *)v97 + 24) = v97 == v95;
                                  *v99 = 1;
                                }
                                while (v97 != v95);
                              }
                              v484 = ++v67;
LABEL_204:
                              v66 += 3;
                              if (v66 == v445)
                              {
                                v66 = *(unsigned int **)v456;
                                v7 = (uint64_t)v444;
                                v41 = v442;
                                v42 = v436;
                                goto LABEL_206;
                              }
                            }
                            v73 = v483;
                            while (2)
                            {
                              while (1)
                              {
                                v70 = (uint64_t **)v73;
                                v74 = v73[4];
                                if (v74 > v44)
                                  break;
                                if (v74 >= v44)
                                {
                                  v75 = v70[5];
                                  if ((unint64_t)v75 > v69)
                                    break;
                                  if ((unint64_t)v75 >= v69)
                                    goto LABEL_165;
                                }
                                v73 = v70[1];
                                if (!v73)
                                {
                                  v71 = v70 + 1;
                                  goto LABEL_135;
                                }
                              }
                              v73 = *v70;
                              v71 = v70;
                              if (!*v70)
                                goto LABEL_135;
                              continue;
                            }
                          }
LABEL_206:
                          if (v66)
                          {
                            *(_QWORD *)&v456[8] = v66;
                            operator delete(v66);
                          }
                        }
LABEL_75:
                        v41 += 2;
                        if (v41 == v42)
                        {
                          v41 = (unsigned int *)v471[0];
                          if (!v471[0])
                          {
LABEL_73:
                            a5 = v438;
                            v26 = v439;
                            a3 = v432;
                            v27 = v434;
                            v28 = v429;
                            goto LABEL_44;
                          }
LABEL_72:
                          v471[1] = v41;
                          operator delete(v41);
                          goto LABEL_73;
                        }
                        goto LABEL_76;
                      }
                    }
                    else
                    {
                      if (*(_QWORD *)&v54 >= *(_QWORD *)&v48)
                        *(_QWORD *)&v54 %= *(_QWORD *)&v48;
                      if (*(_QWORD *)&v54 != v50)
                        goto LABEL_122;
                    }
                    v52 = (int8x8_t *)*v52;
                    if (!v52)
                      goto LABEL_122;
                  }
                }
              }
              else
              {
                if (v39 >= *(_QWORD *)&v32)
                  v39 %= *(_QWORD *)&v32;
                if (v39 != v35)
                  break;
              }
              v37 = (uint64_t *)*v37;
            }
            while (v37);
          }
        }
      }
LABEL_44:
      ++v27;
    }
    while (v27 != v28);
  }
  v109 = v482;
  if (v482 != (uint64_t *)&v483)
  {
    v110 = 0;
    do
    {
      v109[6] = v110;
      v111 = (uint64_t *)v109[1];
      if (v111)
      {
        do
        {
          v112 = (uint64_t **)v111;
          v111 = (uint64_t *)*v111;
        }
        while (v111);
      }
      else
      {
        do
        {
          v112 = (uint64_t **)v109[2];
          v402 = *v112 == v109;
          v109 = (uint64_t *)v112;
        }
        while (!v402);
      }
      ++v110;
      v109 = (uint64_t *)v112;
    }
    while (v112 != &v483);
  }
  v475 = 0;
  v473 = 0u;
  *(_OWORD *)v474 = 0u;
  *(_OWORD *)v471 = 0u;
  *(_OWORD *)v472 = 0u;
  v113 = v484;
  *(_QWORD *)v456 = 1;
  if (v484)
  {
    sub_2396DA790((uint64_t)v474, v484, (uint64_t *)v456);
    v114 = (int64x2_t *)v471[0];
    v115 = v471[1];
  }
  else
  {
    v114 = 0;
    v115 = 0;
  }
  v116 = (v115 - (_BYTE *)v114) >> 3;
  if (v113 <= v116)
  {
    if (v113 < v116)
      v471[1] = (char *)v114 + 8 * v113;
    if (!v113)
      goto LABEL_234;
  }
  else
  {
    sub_23946DAD4((uint64_t)v471, v113 - v116);
    v114 = (int64x2_t *)v471[0];
  }
  if (v113 > 3)
  {
    v117 = v113 & 0xFFFFFFFFFFFFFFFCLL;
    v118 = (int64x2_t)xmmword_239EC6860;
    v119 = v114 + 1;
    v120 = vdupq_n_s64(2uLL);
    v121 = vdupq_n_s64(4uLL);
    v122 = v113 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v119[-1] = v118;
      *v119 = vaddq_s64(v118, v120);
      v118 = vaddq_s64(v118, v121);
      v119 += 2;
      v122 -= 4;
    }
    while (v122);
    if (v117 == v113)
      goto LABEL_234;
  }
  else
  {
    v117 = 0;
  }
  do
  {
    v114->i64[v117] = v117;
    ++v117;
  }
  while (v113 != v117);
LABEL_234:
  *(_QWORD *)v456 = 0;
  v123 = (uint64_t)(v473 - (unint64_t)v472[1]) >> 3;
  if (v113 <= v123)
  {
    if (v113 < v123)
      *(_QWORD *)&v473 = (char *)v472[1] + 8 * v113;
  }
  else
  {
    sub_2396DA790((uint64_t)&v472[1], v113 - v123, (uint64_t *)v456);
  }
  v124 = v479;
  v446 = v480;
  if (v479 != v480)
  {
LABEL_241:
    v125 = *(_QWORD *)v124;
    memset(v456, 0, 32);
    *(_DWORD *)&v456[32] = 1065353216;
    sub_239C6DE64((char *)v7, v125, v456);
    __p[0] = 0;
    __p[1] = 0;
    v469[0] = 0;
    v126 = *(uint64_t ***)&v456[16];
    if (!*(_QWORD *)&v456[16])
      goto LABEL_332;
    v127 = 0;
    do
    {
      v128 = v126[4];
      v129 = *((int *)v126 + 14);
      if (v127 < v469[0])
      {
        *(_QWORD *)v127 = v128;
        *((_QWORD *)v127 + 1) = v129;
        v127 += 16;
      }
      else
      {
        v130 = (char *)__p[0];
        v131 = (v127 - (char *)__p[0]) >> 4;
        v132 = v131 + 1;
        if ((unint64_t)(v131 + 1) >> 60)
          sub_2394189F8();
        v133 = (char *)v469[0] - (char *)__p[0];
        if (((char *)v469[0] - (char *)__p[0]) >> 3 > v132)
          v132 = v133 >> 3;
        if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF0)
          v134 = 0xFFFFFFFFFFFFFFFLL;
        else
          v134 = v132;
        if (v134)
        {
          if (v134 >> 60)
            sub_239418A80();
          v135 = (char *)operator new(16 * v134);
        }
        else
        {
          v135 = 0;
        }
        v136 = &v135[16 * v131];
        *(_QWORD *)v136 = v128;
        *((_QWORD *)v136 + 1) = v129;
        if (v127 == v130)
        {
          v138 = v127;
          v137 = &v135[16 * v131];
        }
        else
        {
          v137 = &v135[16 * v131];
          do
          {
            *((_OWORD *)v137 - 1) = *((_OWORD *)v127 - 1);
            v137 -= 16;
            v127 -= 16;
          }
          while (v127 != v130);
          v138 = (char *)__p[0];
        }
        v127 = v136 + 16;
        __p[0] = v137;
        __p[1] = v136 + 16;
        v469[0] = &v135[16 * v134];
        if (v138)
          operator delete(v138);
      }
      __p[1] = v127;
      v126 = (uint64_t **)*v126;
    }
    while (v126);
    v139 = __p[0];
    v140 = v127 - (char *)__p[0];
    if (v127 == __p[0])
      goto LABEL_328;
    v141 = v483;
    v142 = &v483;
    v143 = &v483;
    if (!v483)
      goto LABEL_273;
    v144 = *(_QWORD *)__p[0];
    v145 = *((_QWORD *)__p[0] + 1);
    while (1)
    {
      v142 = (uint64_t **)v141;
      v146 = v141[4];
      if (v144 < v146)
        goto LABEL_266;
      if (v146 < v144)
      {
LABEL_271:
        v141 = v142[1];
        if (!v141)
        {
          v143 = v142 + 1;
LABEL_273:
          v148 = operator new(0x38uLL);
          *((_OWORD *)v148 + 2) = *v139;
          *((_QWORD *)v148 + 6) = 0;
          *(_QWORD *)v148 = 0;
          *((_QWORD *)v148 + 1) = 0;
          *((_QWORD *)v148 + 2) = v142;
          *v143 = (uint64_t *)v148;
          v149 = (uint64_t *)v148;
          if (*v482)
          {
            v482 = (uint64_t *)*v482;
            v149 = *v143;
          }
          sub_2394213B8(v483, v149);
          ++v484;
          if ((unint64_t)v140 >= 0x11)
          {
LABEL_276:
            v150 = *((_QWORD *)v148 + 6);
            if ((unint64_t)(v140 >> 4) <= 2)
              v151 = 2;
            else
              v151 = v140 >> 4;
            for (i = 1; i != v151; ++i)
            {
              v155 = (unint64_t *)((char *)__p[0] + 16 * i);
              v156 = v483;
              v157 = &v483;
              v158 = &v483;
              if (v483)
              {
                v159 = *v155;
                v160 = v155[1];
                while (1)
                {
                  v157 = (uint64_t **)v156;
                  v161 = v156[4];
                  if (v159 < v161)
                    goto LABEL_285;
                  if (v161 < v159)
                    goto LABEL_290;
                  v162 = v157[5];
                  if (v160 < (unint64_t)v162)
                  {
LABEL_285:
                    v156 = *v157;
                    v158 = v157;
                    if (!*v157)
                      break;
                  }
                  else
                  {
                    if ((unint64_t)v162 >= v160)
                    {
                      v174 = (uint64_t)v157[6];
                      goto LABEL_323;
                    }
LABEL_290:
                    v156 = v157[1];
                    if (!v156)
                    {
                      v158 = v157 + 1;
                      break;
                    }
                  }
                }
              }
              v163 = (uint64_t *)operator new(0x38uLL);
              *((_OWORD *)v163 + 2) = *(_OWORD *)v155;
              v163[6] = 0;
              *v163 = 0;
              v163[1] = 0;
              v163[2] = (uint64_t)v157;
              *v158 = v163;
              if (*v482)
              {
                v482 = (uint64_t *)*v482;
                v163 = *v158;
              }
              v164 = v483;
              *((_BYTE *)v163 + 24) = v163 == v483;
              if (v163 != v164)
              {
                do
                {
                  v165 = v163[2];
                  if (*(_BYTE *)(v165 + 24))
                    break;
                  v166 = *(uint64_t **)(v165 + 16);
                  v167 = *v166;
                  if (*v166 == v165)
                  {
                    v170 = v166[1];
                    if (!v170 || (v171 = *(unsigned __int8 *)(v170 + 24), v168 = (_BYTE *)(v170 + 24), v171))
                    {
                      if (*(uint64_t **)v165 == v163)
                      {
                        v172 = v163[2];
                      }
                      else
                      {
                        v172 = *(_QWORD *)(v165 + 8);
                        v173 = *(_QWORD *)v172;
                        *(_QWORD *)(v165 + 8) = *(_QWORD *)v172;
                        if (v173)
                        {
                          *(_QWORD *)(v173 + 16) = v165;
                          v166 = *(uint64_t **)(v165 + 16);
                        }
                        *(_QWORD *)(v172 + 16) = v166;
                        *(_QWORD *)(*(_QWORD *)(v165 + 16) + 8 * (**(_QWORD **)(v165 + 16) != v165)) = v172;
                        *(_QWORD *)v172 = v165;
                        *(_QWORD *)(v165 + 16) = v172;
                        v166 = *(uint64_t **)(v172 + 16);
                        v165 = *v166;
                      }
                      *(_BYTE *)(v172 + 24) = 1;
                      *((_BYTE *)v166 + 24) = 0;
                      v177 = *(_QWORD *)(v165 + 8);
                      *v166 = v177;
                      if (v177)
                        *(_QWORD *)(v177 + 16) = v166;
                      *(_QWORD *)(v165 + 16) = v166[2];
                      *(_QWORD *)(v166[2] + 8 * (*(_QWORD *)v166[2] != (_QWORD)v166)) = v165;
                      *(_QWORD *)(v165 + 8) = v166;
                      goto LABEL_321;
                    }
                  }
                  else if (!v167 || (v169 = *(unsigned __int8 *)(v167 + 24), v168 = (_BYTE *)(v167 + 24), v169))
                  {
                    if (*(uint64_t **)v165 == v163)
                    {
                      v175 = v163[1];
                      *(_QWORD *)v165 = v175;
                      if (v175)
                      {
                        *(_QWORD *)(v175 + 16) = v165;
                        v166 = *(uint64_t **)(v165 + 16);
                      }
                      v163[2] = (uint64_t)v166;
                      *(_QWORD *)(*(_QWORD *)(v165 + 16) + 8 * (**(_QWORD **)(v165 + 16) != v165)) = v163;
                      v163[1] = v165;
                      *(_QWORD *)(v165 + 16) = v163;
                      v166 = (uint64_t *)v163[2];
                    }
                    else
                    {
                      v163 = (uint64_t *)v163[2];
                    }
                    *((_BYTE *)v163 + 24) = 1;
                    *((_BYTE *)v166 + 24) = 0;
                    v165 = v166[1];
                    v176 = *(uint64_t **)v165;
                    v166[1] = *(_QWORD *)v165;
                    if (v176)
                      v176[2] = (uint64_t)v166;
                    *(_QWORD *)(v165 + 16) = v166[2];
                    *(_QWORD *)(v166[2] + 8 * (*(_QWORD *)v166[2] != (_QWORD)v166)) = v165;
                    *(_QWORD *)v165 = v166;
LABEL_321:
                    v166[2] = v165;
                    break;
                  }
                  *(_BYTE *)(v165 + 24) = 1;
                  v163 = v166;
                  *((_BYTE *)v166 + 24) = v166 == v164;
                  *v168 = 1;
                }
                while (v166 != v164);
              }
              v174 = 0;
              ++v484;
LABEL_323:
              v178 = sub_239C9CD00(v471, v150);
              v179 = sub_239C9CD00(v471, v174);
              if (v178 != v179)
              {
                v154 = (char *)v472[1] + 8 * v178;
                v180 = *(_QWORD *)v154;
                v181 = *((_QWORD *)v472[1] + v179);
                if (*(_QWORD *)v154 < v181)
                {
                  *((_QWORD *)v471[0] + v178) = v179;
                  v153 = *((_QWORD *)v474[0] + v178);
                  v154 = (char *)v474[0] + 8 * v179;
                }
                else
                {
                  *((_QWORD *)v471[0] + v179) = v178;
                  *((_QWORD *)v474[0] + v178) += *((_QWORD *)v474[0] + v179);
                  if (v180 > v181)
                    continue;
                  v153 = 1;
                }
                *(_QWORD *)v154 += v153;
              }
            }
          }
LABEL_328:
          if (__p[0])
            operator delete(__p[0]);
          v182 = *(_QWORD **)&v456[16];
          if (*(_QWORD *)&v456[16])
          {
            do
            {
              v183 = (_QWORD *)*v182;
              operator delete(v182);
              v182 = v183;
            }
            while (v183);
          }
LABEL_332:
          v184 = *(void **)v456;
          *(_QWORD *)v456 = 0;
          if (v184)
            operator delete(v184);
          v124 += 8;
          v7 = (uint64_t)v444;
          if (v124 == v446)
            break;
          goto LABEL_241;
        }
      }
      else
      {
        v147 = v142[5];
        if (v145 >= (unint64_t)v147)
        {
          if ((unint64_t)v147 >= v145)
          {
            v148 = v142;
            if ((unint64_t)v140 >= 0x11)
              goto LABEL_276;
            goto LABEL_328;
          }
          goto LABEL_271;
        }
LABEL_266:
        v141 = *v142;
        v143 = v142;
        if (!*v142)
          goto LABEL_273;
      }
    }
  }
  v186 = v476;
  v185 = v477;
  v187 = v438;
  v188 = v439;
  v189 = v432;
  if (v476 != v477)
  {
    v428 = v477;
    do
    {
      v190 = *v186;
      if (v188 == v441)
        goto LABEL_349;
      v192 = (_QWORD *)*v187;
      v191 = (_QWORD *)v187[1];
      if ((_QWORD *)*v187 != v191)
      {
        while (*v192 != v190)
        {
          if (++v192 == v191)
          {
            v192 = (_QWORD *)v187[1];
            break;
          }
        }
      }
      if (v192 == v191)
      {
LABEL_349:
        v193 = (int8x8_t)v189[1];
        if (v193)
        {
          v194 = *v186;
          v195 = (uint8x8_t)vcnt_s8(v193);
          v195.i16[0] = vaddlv_u8(v195);
          if (v195.u32[0] > 1uLL)
          {
            v196 = *v186;
            if (*(_QWORD *)&v193 <= v194)
              v196 = v194 % *(_QWORD *)&v193;
          }
          else
          {
            v196 = (v193.i32[0] - 1) & v194;
          }
          v197 = *(uint64_t ***)(*v189 + 8 * v196);
          if (v197)
          {
            v198 = *v197;
            if (*v197)
            {
              if (v195.u32[0] < 2uLL)
              {
                v199 = *(_QWORD *)&v193 - 1;
                while (1)
                {
                  v201 = v198[1];
                  if (v201 == v194)
                  {
                    if (*((_DWORD *)v198 + 4) == (_DWORD)v190)
                      goto LABEL_364;
                  }
                  else if ((v201 & v199) != v196)
                  {
                    goto LABEL_337;
                  }
                  v198 = (uint64_t *)*v198;
                  if (!v198)
                    goto LABEL_337;
                }
              }
              while (1)
              {
                v200 = v198[1];
                if (v200 == v194)
                  break;
                if (v200 >= *(_QWORD *)&v193)
                  v200 %= *(_QWORD *)&v193;
                if (v200 != v196)
                  goto LABEL_337;
LABEL_353:
                v198 = (uint64_t *)*v198;
                if (!v198)
                  goto LABEL_337;
              }
              if (*((_DWORD *)v198 + 4) != (_DWORD)v190)
                goto LABEL_353;
LABEL_364:
              sub_239C4E434(__p, *(uint64_t **)(v198[3] + 16));
              v430 = v186;
              v443 = sub_2395D7BEC(v7, v190);
              v202 = (unsigned int *)__p[0];
              v437 = (unsigned int *)__p[1];
              if (__p[0] == __p[1])
              {
                if (__p[0])
                  goto LABEL_366;
                goto LABEL_367;
              }
              while (2)
              {
                v204 = *v202;
                v203 = v202[1];
                if (v188 != v441)
                {
                  v206 = (_QWORD *)*v187;
                  v205 = (_QWORD *)v187[1];
                  if ((_QWORD *)*v187 != v205)
                  {
                    while (*v206 != v203)
                    {
                      if (++v206 == v205)
                      {
                        v206 = (_QWORD *)v187[1];
                        break;
                      }
                    }
                  }
                  if (v206 != v205)
                    goto LABEL_369;
                }
                v207 = (_QWORD *)v198[3];
                v208 = (int8x8_t)v207[1];
                if (!*(_QWORD *)&v208)
                  goto LABEL_416;
                v209 = (uint8x8_t)vcnt_s8(v208);
                v209.i16[0] = vaddlv_u8(v209);
                if (v209.u32[0] > 1uLL)
                {
                  v210 = *v202;
                  if (*(_QWORD *)&v208 <= v204)
                    v210 = v204 % *(_QWORD *)&v208;
                }
                else
                {
                  v210 = (v208.i32[0] - 1) & v204;
                }
                v211 = *(int8x8_t ***)(*v207 + 8 * v210);
                if (!v211 || (v212 = *v211) == 0)
                {
LABEL_416:
                  v222 = 0;
                  v223 = 0;
                  goto LABEL_417;
                }
                if (v209.u32[0] < 2uLL)
                {
                  v213 = *(_QWORD *)&v208 - 1;
                  while (1)
                  {
                    v215 = v212[1];
                    if (*(_QWORD *)&v215 == v204)
                    {
                      if (v212[2].i32[0] == (_DWORD)v204)
                        goto LABEL_396;
                    }
                    else if ((*(_QWORD *)&v215 & v213) != v210)
                    {
                      goto LABEL_416;
                    }
                    v212 = (int8x8_t *)*v212;
                    if (!v212)
                      goto LABEL_416;
                  }
                }
                while (2)
                {
                  v214 = v212[1];
                  if (*(_QWORD *)&v214 != v204)
                  {
                    if (*(_QWORD *)&v214 >= *(_QWORD *)&v208)
                      *(_QWORD *)&v214 %= *(_QWORD *)&v208;
                    if (*(_QWORD *)&v214 != v210)
                      goto LABEL_416;
                    goto LABEL_385;
                  }
                  if (v212[2].i32[0] != (_DWORD)v204)
                  {
LABEL_385:
                    v212 = (int8x8_t *)*v212;
                    if (!v212)
                      goto LABEL_416;
                    continue;
                  }
                  break;
                }
LABEL_396:
                v216 = v212[4];
                if (!*(_QWORD *)&v216)
                  goto LABEL_416;
                v217 = (uint8x8_t)vcnt_s8(v216);
                v217.i16[0] = vaddlv_u8(v217);
                if (v217.u32[0] > 1uLL)
                {
                  v218 = v202[1];
                  if (*(_QWORD *)&v216 <= v203)
                    v218 = v203 % *(_QWORD *)&v216;
                }
                else
                {
                  v218 = (v216.i32[0] - 1) & v203;
                }
                v219 = *(uint64_t ***)(*(_QWORD *)&v212[3] + 8 * v218);
                if (!v219)
                  goto LABEL_416;
                v220 = *v219;
                if (!v220)
                  goto LABEL_416;
                if (v217.u32[0] < 2uLL)
                {
                  v221 = *(_QWORD *)&v216 - 1;
                  while (1)
                  {
                    v225 = v220[1];
                    if (v225 == v203)
                    {
                      if (*((_DWORD *)v220 + 4) == (_DWORD)v203)
                        goto LABEL_605;
                    }
                    else if ((v225 & v221) != v218)
                    {
                      goto LABEL_416;
                    }
                    v222 = 0;
                    v223 = 0;
                    v220 = (uint64_t *)*v220;
                    if (!v220)
                      goto LABEL_417;
                  }
                }
                while (2)
                {
                  v224 = v220[1];
                  if (v224 != v203)
                  {
                    if (v224 >= *(_QWORD *)&v216)
                      v224 %= *(_QWORD *)&v216;
                    if (v224 != v218)
                      goto LABEL_416;
                    goto LABEL_406;
                  }
                  if (*((_DWORD *)v220 + 4) != (_DWORD)v203)
                  {
LABEL_406:
                    v222 = 0;
                    v223 = 0;
                    v220 = (uint64_t *)*v220;
                    if (!v220)
                      goto LABEL_417;
                    continue;
                  }
                  break;
                }
LABEL_605:
                v309 = v220 + 3;
                v223 = (unint64_t)v309 & 0xFFFFFFFFFFFFFF00;
                v222 = v309;
LABEL_417:
                sub_23943F628((uint64_t **)(v223 | v222), (uint64_t)v456);
                if (!v456[24])
                  goto LABEL_369;
                v226 = v444[10];
                if (!*(_QWORD *)&v226)
                  goto LABEL_850;
                v227 = (uint8x8_t)vcnt_s8(v226);
                v227.i16[0] = vaddlv_u8(v227);
                if (v227.u32[0] > 1uLL)
                {
                  v228 = v203;
                  if (*(_QWORD *)&v226 <= v203)
                    v228 = v203 % *(_QWORD *)&v226;
                }
                else
                {
                  v228 = (v226.i32[0] - 1) & v203;
                }
                v229 = *(uint64_t ***)(*(_QWORD *)&v444[9] + 8 * v228);
                if (!v229 || (v230 = *v229) == 0)
                {
LABEL_850:
                  sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                v435 = v202;
                if (v227.u32[0] < 2uLL)
                {
                  v231 = *(_QWORD *)&v226 - 1;
                  while (1)
                  {
                    v233 = v230[1];
                    if (v233 == v203)
                    {
                      if (*((_DWORD *)v230 + 4) == (_DWORD)v203)
                        goto LABEL_438;
                    }
                    else if ((v233 & v231) != v228)
                    {
                      goto LABEL_850;
                    }
                    v230 = (uint64_t *)*v230;
                    if (!v230)
                      goto LABEL_850;
                  }
                }
                while (2)
                {
                  v232 = v230[1];
                  if (v232 != v203)
                  {
                    if (v232 >= *(_QWORD *)&v226)
                      v232 %= *(_QWORD *)&v226;
                    if (v232 != v228)
                      goto LABEL_850;
LABEL_428:
                    v230 = (uint64_t *)*v230;
                    if (!v230)
                      goto LABEL_850;
                    continue;
                  }
                  break;
                }
                if (*((_DWORD *)v230 + 4) != (_DWORD)v203)
                  goto LABEL_428;
LABEL_438:
                v234 = *(unsigned int **)v456;
                v447 = *(unsigned int **)&v456[8];
                if (*(_QWORD *)v456 == *(_QWORD *)&v456[8])
                  goto LABEL_603;
                while (2)
                {
                  v237 = *v234;
                  v238 = v234[1];
                  if ((v448 & 0x80000000) == 0 && *((_DWORD *)v443 + 49) != *((_DWORD *)v230 + 55))
                  {
                    v239 = v486[0];
                    if (v486[0])
                    {
                      v240 = v486;
                      v241 = v486[0];
                      do
                      {
                        v242 = v241[4];
                        if (v242 < v204)
                        {
                          ++v241;
                        }
                        else if (v242 <= v204)
                        {
                          if (v241[5] < v237)
                            ++v241;
                          else
                            v240 = (_QWORD **)v241;
                        }
                        else
                        {
                          v240 = (_QWORD **)v241;
                        }
                        v241 = (_QWORD *)*v241;
                      }
                      while (v241);
                      if (v240 == v486)
                      {
                        v244 = v486;
                      }
                      else
                      {
                        v243 = v240[4];
                        if ((unint64_t)v243 <= v204)
                        {
                          if ((unint64_t)v243 < v204 || (unint64_t)v240[5] <= v237)
                          {
                            v245 = (unint64_t)v444[5];
                            if (!v245)
                              goto LABEL_851;
                            v246 = v240[6];
                            v247 = (uint8x8_t)vcnt_s8((int8x8_t)v245);
                            v247.i16[0] = vaddlv_u8(v247);
                            if (v247.u32[0] > 1uLL)
                            {
                              v248 = v246;
                              if (v245 <= v246)
                                v248 = v246 % v245;
                            }
                            else
                            {
                              v248 = ((_DWORD)v245 - 1) & v246;
                            }
                            v249 = *(uint64_t ***)(*(_QWORD *)&v444[4] + 8 * v248);
                            if (!v249 || (v250 = *v249) == 0)
                            {
LABEL_851:
                              sub_239A444D4((uint64_t)"unknown file", 649, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                              sub_239A4475C();
                              abort();
                            }
                            if (v247.u32[0] < 2uLL)
                            {
                              v251 = v245 - 1;
                              while (1)
                              {
                                v253 = v250[1];
                                if (v253 == v246)
                                {
                                  if (*((_DWORD *)v250 + 4) == (_DWORD)v246)
                                    goto LABEL_482;
                                }
                                else if ((v253 & v251) != v248)
                                {
                                  goto LABEL_851;
                                }
                                v250 = (uint64_t *)*v250;
                                if (!v250)
                                  goto LABEL_851;
                              }
                            }
                            while (1)
                            {
                              v252 = v250[1];
                              if (v252 == v246)
                              {
                                if (*((_DWORD *)v250 + 4) == (_DWORD)v246)
                                {
LABEL_482:
                                  v244 = v486;
                                  if (*((_BYTE *)v250 + 52) != 2)
                                    goto LABEL_442;
                                  goto LABEL_486;
                                }
                              }
                              else
                              {
                                if (v252 >= v245)
                                  v252 %= v245;
                                if (v252 != v248)
                                  goto LABEL_851;
                              }
                              v250 = (uint64_t *)*v250;
                              if (!v250)
                                goto LABEL_851;
                            }
                          }
                          v244 = v486;
                        }
                        else
                        {
                          v244 = v486;
                        }
                      }
                      do
                      {
LABEL_486:
                        v254 = v239[4];
                        if (v254 < v203)
                        {
                          ++v239;
                        }
                        else if (v254 <= v203)
                        {
                          if (v239[5] < v238)
                            ++v239;
                          else
                            v244 = (_QWORD **)v239;
                        }
                        else
                        {
                          v244 = (_QWORD **)v239;
                        }
                        v239 = (_QWORD *)*v239;
                      }
                      while (v239);
                      if (v244 != v486)
                      {
                        v255 = v244[4];
                        if ((unint64_t)v255 <= v203
                          && ((unint64_t)v255 < v203 || (unint64_t)v244[5] <= v238))
                        {
                          v256 = (unint64_t)v444[5];
                          if (!v256)
                            goto LABEL_852;
                          v257 = v244[6];
                          v258 = (uint8x8_t)vcnt_s8((int8x8_t)v256);
                          v258.i16[0] = vaddlv_u8(v258);
                          if (v258.u32[0] > 1uLL)
                          {
                            v259 = v257;
                            if (v256 <= v257)
                              v259 = v257 % v256;
                          }
                          else
                          {
                            v259 = ((_DWORD)v256 - 1) & v257;
                          }
                          v260 = *(uint64_t ***)(*(_QWORD *)&v444[4] + 8 * v259);
                          if (!v260 || (v261 = *v260) == 0)
                          {
LABEL_852:
                            sub_239A444D4((uint64_t)"unknown file", 649, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                            sub_239A4475C();
                            abort();
                          }
                          if (v258.u32[0] < 2uLL)
                          {
                            v262 = v256 - 1;
                            while (1)
                            {
                              v264 = v261[1];
                              if (v264 == v257)
                              {
                                if (*((_DWORD *)v261 + 4) == (_DWORD)v257)
                                  goto LABEL_516;
                              }
                              else if ((v264 & v262) != v259)
                              {
                                goto LABEL_852;
                              }
                              v261 = (uint64_t *)*v261;
                              if (!v261)
                                goto LABEL_852;
                            }
                          }
                          while (1)
                          {
                            v263 = v261[1];
                            if (v263 == v257)
                            {
                              if (*((_DWORD *)v261 + 4) == (_DWORD)v257)
                              {
LABEL_516:
                                if (*((_BYTE *)v261 + 52) == 2)
                                  break;
                                goto LABEL_442;
                              }
                            }
                            else
                            {
                              if (v263 >= v256)
                                v263 %= v256;
                              if (v263 != v259)
                                goto LABEL_852;
                            }
                            v261 = (uint64_t *)*v261;
                            if (!v261)
                              goto LABEL_852;
                          }
                        }
                      }
                    }
                  }
                  v265 = v483;
                  v266 = &v483;
                  v267 = &v483;
                  if (v483)
                  {
                    v268 = v483;
                    while (1)
                    {
                      v266 = (uint64_t **)v268;
                      v269 = v268[4];
                      if (v269 > v204)
                        goto LABEL_519;
                      if (v269 < v204)
                        goto LABEL_524;
                      v270 = v266[5];
                      if ((unint64_t)v270 > v237)
                      {
LABEL_519:
                        v268 = *v266;
                        v267 = v266;
                        if (!*v266)
                          break;
                      }
                      else
                      {
                        if ((unint64_t)v270 >= v237)
                        {
                          v282 = (uint64_t)v266[6];
                          goto LABEL_557;
                        }
LABEL_524:
                        v268 = v266[1];
                        if (!v268)
                        {
                          v267 = v266 + 1;
                          break;
                        }
                      }
                    }
                  }
                  v271 = (uint64_t *)operator new(0x38uLL);
                  v271[4] = v204;
                  v271[5] = v237;
                  v271[6] = 0;
                  *v271 = 0;
                  v271[1] = 0;
                  v271[2] = (uint64_t)v266;
                  *v267 = v271;
                  if (*v482)
                  {
                    v482 = (uint64_t *)*v482;
                    v271 = *v267;
                  }
                  v272 = v483;
                  *((_BYTE *)v271 + 24) = v271 == v483;
                  if (v271 != v272)
                  {
                    do
                    {
                      v273 = v271[2];
                      if (*(_BYTE *)(v273 + 24))
                        break;
                      v274 = *(uint64_t **)(v273 + 16);
                      v275 = *v274;
                      if (*v274 == v273)
                      {
                        v278 = v274[1];
                        if (!v278 || (v279 = *(unsigned __int8 *)(v278 + 24), v276 = (_BYTE *)(v278 + 24), v279))
                        {
                          if (*(uint64_t **)v273 == v271)
                          {
                            v280 = v271[2];
                          }
                          else
                          {
                            v280 = *(_QWORD *)(v273 + 8);
                            v281 = *(_QWORD *)v280;
                            *(_QWORD *)(v273 + 8) = *(_QWORD *)v280;
                            if (v281)
                            {
                              *(_QWORD *)(v281 + 16) = v273;
                              v274 = *(uint64_t **)(v273 + 16);
                            }
                            *(_QWORD *)(v280 + 16) = v274;
                            *(_QWORD *)(*(_QWORD *)(v273 + 16) + 8 * (**(_QWORD **)(v273 + 16) != v273)) = v280;
                            *(_QWORD *)v280 = v273;
                            *(_QWORD *)(v273 + 16) = v280;
                            v274 = *(uint64_t **)(v280 + 16);
                            v273 = *v274;
                          }
                          *(_BYTE *)(v280 + 24) = 1;
                          *((_BYTE *)v274 + 24) = 0;
                          v285 = *(_QWORD *)(v273 + 8);
                          *v274 = v285;
                          if (v285)
                            *(_QWORD *)(v285 + 16) = v274;
                          *(_QWORD *)(v273 + 16) = v274[2];
                          *(_QWORD *)(v274[2] + 8 * (*(_QWORD *)v274[2] != (_QWORD)v274)) = v273;
                          *(_QWORD *)(v273 + 8) = v274;
                          goto LABEL_555;
                        }
                      }
                      else if (!v275 || (v277 = *(unsigned __int8 *)(v275 + 24), v276 = (_BYTE *)(v275 + 24), v277))
                      {
                        if (*(uint64_t **)v273 == v271)
                        {
                          v283 = v271[1];
                          *(_QWORD *)v273 = v283;
                          if (v283)
                          {
                            *(_QWORD *)(v283 + 16) = v273;
                            v274 = *(uint64_t **)(v273 + 16);
                          }
                          v271[2] = (uint64_t)v274;
                          *(_QWORD *)(*(_QWORD *)(v273 + 16) + 8 * (**(_QWORD **)(v273 + 16) != v273)) = v271;
                          v271[1] = v273;
                          *(_QWORD *)(v273 + 16) = v271;
                          v274 = (uint64_t *)v271[2];
                        }
                        else
                        {
                          v271 = (uint64_t *)v271[2];
                        }
                        *((_BYTE *)v271 + 24) = 1;
                        *((_BYTE *)v274 + 24) = 0;
                        v273 = v274[1];
                        v284 = *(uint64_t **)v273;
                        v274[1] = *(_QWORD *)v273;
                        if (v284)
                          v284[2] = (uint64_t)v274;
                        *(_QWORD *)(v273 + 16) = v274[2];
                        *(_QWORD *)(v274[2] + 8 * (*(_QWORD *)v274[2] != (_QWORD)v274)) = v273;
                        *(_QWORD *)v273 = v274;
LABEL_555:
                        v274[2] = v273;
                        break;
                      }
                      *(_BYTE *)(v273 + 24) = 1;
                      v271 = v274;
                      *((_BYTE *)v274 + 24) = v274 == v272;
                      *v276 = 1;
                    }
                    while (v274 != v272);
                  }
                  v282 = 0;
                  v265 = v483;
                  ++v484;
LABEL_557:
                  v286 = &v483;
LABEL_559:
                  v287 = v286;
                  if (v265)
                  {
                    while (1)
                    {
                      v286 = (uint64_t **)v265;
                      v288 = v265[4];
                      if (v288 > v203)
                      {
LABEL_558:
                        v265 = *v286;
                        goto LABEL_559;
                      }
                      if (v288 >= v203)
                      {
                        v289 = v286[5];
                        if ((unint64_t)v289 > v238)
                          goto LABEL_558;
                        if ((unint64_t)v289 >= v238)
                          break;
                      }
                      v265 = v286[1];
                      if (!v265)
                      {
                        v287 = v286 + 1;
                        goto LABEL_566;
                      }
                    }
                    v301 = (uint64_t)v286[6];
                  }
                  else
                  {
LABEL_566:
                    v290 = (uint64_t *)operator new(0x38uLL);
                    v290[4] = v203;
                    v290[5] = v238;
                    v290[6] = 0;
                    *v290 = 0;
                    v290[1] = 0;
                    v290[2] = (uint64_t)v286;
                    *v287 = v290;
                    if (*v482)
                    {
                      v482 = (uint64_t *)*v482;
                      v290 = *v287;
                    }
                    v291 = v483;
                    *((_BYTE *)v290 + 24) = v290 == v483;
                    if (v290 != v291)
                    {
                      do
                      {
                        v292 = v290[2];
                        if (*(_BYTE *)(v292 + 24))
                          break;
                        v293 = *(uint64_t **)(v292 + 16);
                        v294 = *v293;
                        if (*v293 == v292)
                        {
                          v297 = v293[1];
                          if (!v297 || (v298 = *(unsigned __int8 *)(v297 + 24), v295 = (_BYTE *)(v297 + 24), v298))
                          {
                            if (*(uint64_t **)v292 == v290)
                            {
                              v299 = v290[2];
                            }
                            else
                            {
                              v299 = *(_QWORD *)(v292 + 8);
                              v300 = *(_QWORD *)v299;
                              *(_QWORD *)(v292 + 8) = *(_QWORD *)v299;
                              if (v300)
                              {
                                *(_QWORD *)(v300 + 16) = v292;
                                v293 = *(uint64_t **)(v292 + 16);
                              }
                              *(_QWORD *)(v299 + 16) = v293;
                              *(_QWORD *)(*(_QWORD *)(v292 + 16) + 8 * (**(_QWORD **)(v292 + 16) != v292)) = v299;
                              *(_QWORD *)v299 = v292;
                              *(_QWORD *)(v292 + 16) = v299;
                              v293 = *(uint64_t **)(v299 + 16);
                              v292 = *v293;
                            }
                            *(_BYTE *)(v299 + 24) = 1;
                            *((_BYTE *)v293 + 24) = 0;
                            v304 = *(_QWORD *)(v292 + 8);
                            *v293 = v304;
                            if (v304)
                              *(_QWORD *)(v304 + 16) = v293;
                            *(_QWORD *)(v292 + 16) = v293[2];
                            *(_QWORD *)(v293[2] + 8 * (*(_QWORD *)v293[2] != (_QWORD)v293)) = v292;
                            *(_QWORD *)(v292 + 8) = v293;
                            goto LABEL_595;
                          }
                        }
                        else if (!v294 || (v296 = *(unsigned __int8 *)(v294 + 24), v295 = (_BYTE *)(v294 + 24), v296))
                        {
                          if (*(uint64_t **)v292 == v290)
                          {
                            v302 = v290[1];
                            *(_QWORD *)v292 = v302;
                            if (v302)
                            {
                              *(_QWORD *)(v302 + 16) = v292;
                              v293 = *(uint64_t **)(v292 + 16);
                            }
                            v290[2] = (uint64_t)v293;
                            *(_QWORD *)(*(_QWORD *)(v292 + 16) + 8 * (**(_QWORD **)(v292 + 16) != v292)) = v290;
                            v290[1] = v292;
                            *(_QWORD *)(v292 + 16) = v290;
                            v293 = (uint64_t *)v290[2];
                          }
                          else
                          {
                            v290 = (uint64_t *)v290[2];
                          }
                          *((_BYTE *)v290 + 24) = 1;
                          *((_BYTE *)v293 + 24) = 0;
                          v292 = v293[1];
                          v303 = *(uint64_t **)v292;
                          v293[1] = *(_QWORD *)v292;
                          if (v303)
                            v303[2] = (uint64_t)v293;
                          *(_QWORD *)(v292 + 16) = v293[2];
                          *(_QWORD *)(v293[2] + 8 * (*(_QWORD *)v293[2] != (_QWORD)v293)) = v292;
                          *(_QWORD *)v292 = v293;
LABEL_595:
                          v293[2] = v292;
                          break;
                        }
                        *(_BYTE *)(v292 + 24) = 1;
                        v290 = v293;
                        *((_BYTE *)v293 + 24) = v293 == v291;
                        *v295 = 1;
                      }
                      while (v293 != v291);
                    }
                    v301 = 0;
                    ++v484;
                  }
                  v305 = sub_239C9CD00(v471, v282);
                  v306 = sub_239C9CD00(v471, v301);
                  if (v305 != v306)
                  {
                    v236 = (char *)v472[1] + 8 * v305;
                    v307 = *(_QWORD *)v236;
                    v308 = *((_QWORD *)v472[1] + v306);
                    if (*(_QWORD *)v236 < v308)
                    {
                      *((_QWORD *)v471[0] + v305) = v306;
                      v235 = *((_QWORD *)v474[0] + v305);
                      v236 = (char *)v474[0] + 8 * v306;
                    }
                    else
                    {
                      *((_QWORD *)v471[0] + v306) = v305;
                      *((_QWORD *)v474[0] + v305) += *((_QWORD *)v474[0] + v306);
                      if (v307 > v308)
                        goto LABEL_442;
                      v235 = 1;
                    }
                    *(_QWORD *)v236 += v235;
                  }
LABEL_442:
                  v234 += 3;
                  if (v234 != v447)
                    continue;
                  break;
                }
                v187 = v438;
                v188 = v439;
                v189 = v432;
                v202 = v435;
                if (v456[24])
                {
                  v234 = *(unsigned int **)v456;
LABEL_603:
                  v187 = v438;
                  v188 = v439;
                  v189 = v432;
                  v202 = v435;
                  if (v234)
                  {
                    *(_QWORD *)&v456[8] = v234;
                    operator delete(v234);
                  }
                }
LABEL_369:
                v202 += 2;
                if (v202 != v437)
                  continue;
                break;
              }
              v202 = (unsigned int *)__p[0];
              if (__p[0])
              {
LABEL_366:
                __p[1] = v202;
                operator delete(v202);
              }
LABEL_367:
              v7 = (uint64_t)v444;
              v185 = v428;
              v186 = v430;
            }
          }
        }
      }
LABEL_337:
      ++v186;
    }
    while (v186 != v185);
  }
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v469 = 0u;
  v470 = 1065353216;
  *(_OWORD *)v465 = 0u;
  *(_OWORD *)v466 = 0u;
  v467 = 1065353216;
  memset(v456, 0, 32);
  *(_DWORD *)&v456[32] = 1065353216;
  v310 = v482;
  if (v482 != (uint64_t *)&v483)
  {
    do
    {
      v462[0] = (void *)v310[4];
      v450[0] = 0;
      v450[0] = (void *)(sub_239C9CD00(v471, v310[6]) + v431 + 1);
      v311 = sub_239C9FB14((uint64_t *)v456, (unint64_t)v450[0], v450);
      sub_239465800((uint64_t)(v311 + 24), (unint64_t *)v462, v462);
      if ((v312 & 1) != 0)
      {
        v313 = sub_239C9CD00(v471, v310[6]);
        v314 = *((_QWORD *)v474[0] + v313);
        if (v314 < a4 || v314 >= 0x3E8)
          sub_239465800((uint64_t)v465, (unint64_t *)v450, v450);
      }
      else
      {
        sub_239465800((uint64_t)__p, (unint64_t *)v450, v450);
      }
      v315 = (uint64_t *)v310[1];
      if (v315)
      {
        do
        {
          v316 = (uint64_t **)v315;
          v315 = (uint64_t *)*v315;
        }
        while (v315);
      }
      else
      {
        do
        {
          v316 = (uint64_t **)v310[2];
          v402 = *v316 == v310;
          v310 = (uint64_t *)v316;
        }
        while (!v402);
      }
      v310 = (uint64_t *)v316;
    }
    while (v316 != &v483);
    v317 = *(_QWORD **)&v456[16];
    if (*(_QWORD *)&v456[16])
    {
      do
      {
        v370 = (_QWORD *)*v317;
        v371 = (_QWORD *)v317[5];
        if (v371)
        {
          do
          {
            v372 = (_QWORD *)*v371;
            operator delete(v371);
            v371 = v372;
          }
          while (v372);
        }
        v373 = (void *)v317[3];
        v317[3] = 0;
        if (v373)
          operator delete(v373);
        operator delete(v317);
        v317 = v370;
      }
      while (v370);
    }
    v318 = *(void **)v456;
    *(_QWORD *)v456 = 0;
    if (v318)
      operator delete(v318);
  }
  *(_OWORD *)v462 = 0u;
  *(_OWORD *)v463 = 0u;
  v464 = 1065353216;
  v319 = v482;
  if (v482 == (uint64_t *)&v483)
    goto LABEL_817;
  v320 = v431 + 1;
  while (2)
  {
    v321 = v319[4];
    v322 = *((unsigned int *)v319 + 10);
    v323 = sub_239C9CD00(v471, v319[6]);
    v324 = v323 + v320;
    v450[0] = (void *)(v323 + v320);
    if (__p[1])
    {
      v325 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v325.i16[0] = vaddlv_u8(v325);
      if (v325.u32[0] > 1uLL)
      {
        v326 = v323 + v320;
        if ((void *)v324 >= __p[1])
          v326 = v324 % (unint64_t)__p[1];
      }
      else
      {
        v326 = ((unint64_t)__p[1] - 1) & v324;
      }
      v327 = (_QWORD *)*((_QWORD *)__p[0] + v326);
      if (v327)
      {
        v328 = (_QWORD *)*v327;
        if (v328)
        {
          if (v325.u32[0] < 2uLL)
          {
            while (1)
            {
              v330 = v328[1];
              if (v330 == v324)
              {
                if (v328[2] == v324)
                  goto LABEL_734;
              }
              else if ((v330 & ((uint64_t)__p[1] - 1)) != v326)
              {
                goto LABEL_648;
              }
              v328 = (_QWORD *)*v328;
              if (!v328)
                goto LABEL_648;
            }
          }
          do
          {
            v329 = v328[1];
            if (v329 == v324)
            {
              if (v328[2] == v324)
                goto LABEL_734;
            }
            else
            {
              if ((void *)v329 >= __p[1])
                v329 %= (unint64_t)__p[1];
              if (v329 != v326)
                break;
            }
            v328 = (_QWORD *)*v328;
          }
          while (v328);
        }
      }
    }
LABEL_648:
    if (v465[1])
    {
      v331 = (uint8x8_t)vcnt_s8((int8x8_t)v465[1]);
      v331.i16[0] = vaddlv_u8(v331);
      if (v331.u32[0] > 1uLL)
      {
        v332 = v323 + v320;
        if ((void *)v324 >= v465[1])
          v332 = v324 % (unint64_t)v465[1];
      }
      else
      {
        v332 = ((unint64_t)v465[1] - 1) & v324;
      }
      v333 = (_QWORD *)*((_QWORD *)v465[0] + v332);
      if (v333)
      {
        v334 = (_QWORD *)*v333;
        if (v334)
        {
          if (v331.u32[0] < 2uLL)
          {
            while (1)
            {
              v336 = v334[1];
              if (v336 == v324)
              {
                if (v334[2] == v324)
                  goto LABEL_734;
              }
              else if ((v336 & ((uint64_t)v465[1] - 1)) != v332)
              {
                goto LABEL_668;
              }
              v334 = (_QWORD *)*v334;
              if (!v334)
                goto LABEL_668;
            }
          }
          do
          {
            v335 = v334[1];
            if (v335 == v324)
            {
              if (v334[2] == v324)
                goto LABEL_734;
            }
            else
            {
              if ((void *)v335 >= v465[1])
                v335 %= (unint64_t)v465[1];
              if (v335 != v332)
                break;
            }
            v334 = (_QWORD *)*v334;
          }
          while (v334);
        }
      }
    }
LABEL_668:
    v337 = v486[0];
    if (v486[0])
    {
      v339 = v319[4];
      v338 = v319[5];
      v340 = (unint64_t *)v486;
      do
      {
        v341 = v337[4];
        if (v341 < v339)
        {
          ++v337;
        }
        else if (v339 >= v341)
        {
          if (v337[5] < v338)
            ++v337;
          else
            v340 = v337;
        }
        else
        {
          v340 = v337;
        }
        v337 = (unint64_t *)*v337;
      }
      while (v337);
      if (v340 != (unint64_t *)v486)
      {
        v342 = (_QWORD *)v340[4];
        if (v339 >= (unint64_t)v342 && ((unint64_t)v342 < v339 || v338 >= v340[5]))
        {
          v369 = sub_239C9FB14((uint64_t *)v462, v324, v450);
          sub_239465800((uint64_t)(v369 + 24), v340 + 6, v340 + 6);
          goto LABEL_734;
        }
      }
    }
    v343 = a2[1];
    if (!v343)
      goto LABEL_849;
    v344 = (uint8x8_t)vcnt_s8((int8x8_t)v343);
    v344.i16[0] = vaddlv_u8(v344);
    if (v344.u32[0] > 1uLL)
    {
      v345 = v321;
      if (v343 <= v321)
        v345 = v321 % v343;
    }
    else
    {
      v345 = ((_DWORD)v343 - 1) & v321;
    }
    v346 = *(uint64_t ***)(*a2 + 8 * v345);
    if (!v346 || (v347 = *v346) == 0)
LABEL_849:
      sub_23941D898("unordered_map::at: key not found");
    if (v344.u32[0] < 2uLL)
    {
      v348 = v343 - 1;
      while (1)
      {
        v350 = v347[1];
        if (v350 == v321)
        {
          if (*((_DWORD *)v347 + 4) == (_DWORD)v321)
            goto LABEL_700;
        }
        else if ((v350 & v348) != v345)
        {
          goto LABEL_849;
        }
        v347 = (uint64_t *)*v347;
        if (!v347)
          goto LABEL_849;
      }
    }
    while (1)
    {
      v349 = v347[1];
      if (v349 == v321)
        break;
      if (v349 >= v343)
        v349 %= v343;
      if (v349 != v345)
        goto LABEL_849;
LABEL_690:
      v347 = (uint64_t *)*v347;
      if (!v347)
        goto LABEL_849;
    }
    if (*((_DWORD *)v347 + 4) != (_DWORD)v321)
      goto LABEL_690;
LABEL_700:
    v351 = (_QWORD *)v347[3];
    if (v351[4] <= v322 || ((*(_QWORD *)(v351[3] + ((v322 >> 3) & 0x1FFFFFF8)) >> v322) & 1) == 0)
    {
      sub_239A444D4((uint64_t)"unknown file", 117, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v352 = v351[6];
    v353 = v444[5];
    if (v353)
    {
      v354 = (v323 + v320);
      v355 = (uint8x8_t)vcnt_s8(v353);
      v355.i16[0] = vaddlv_u8(v355);
      if (v355.u32[0] > 1uLL)
      {
        v356 = (v323 + v320);
        if (*(_QWORD *)&v353 <= v354)
          v356 = v354 % *(_QWORD *)&v353;
      }
      else
      {
        v356 = (v353.i32[0] - 1) & v354;
      }
      v357 = *(uint64_t ***)(*(_QWORD *)&v444[4] + 8 * v356);
      if (v357)
      {
        v358 = *v357;
        if (v358)
        {
          if (v355.u32[0] < 2uLL)
          {
            v359 = *(_QWORD *)&v353 - 1;
            while (1)
            {
              v361 = v358[1];
              if (v361 == v354)
              {
                if (*((_DWORD *)v358 + 4) == (_DWORD)v324)
                  goto LABEL_724;
              }
              else if ((v361 & v359) != v356)
              {
                goto LABEL_722;
              }
              v358 = (uint64_t *)*v358;
              if (!v358)
                goto LABEL_722;
            }
          }
          do
          {
            v360 = v358[1];
            if (v360 == v354)
            {
              if (*((_DWORD *)v358 + 4) == (_DWORD)v324)
                goto LABEL_724;
            }
            else
            {
              if (v360 >= *(_QWORD *)&v353)
                v360 %= *(_QWORD *)&v353;
              if (v360 != v356)
                break;
            }
            v358 = (uint64_t *)*v358;
          }
          while (v358);
        }
      }
    }
LABEL_722:
    memset(v456, 0, 24);
    *(_WORD *)&v456[27] = 0;
    v456[32] = 0;
    v461 = 0;
    sub_2395D7DC4((uint64_t)v444, v324, (uint64_t *)v456);
    if (v461)
      sub_239916980((uint64_t)&v457 + 8);
LABEL_724:
    v362 = (float32x2_t *)(v352 + 24 * v322);
    LOWORD(v453) = v362[1].i16[0];
    BYTE2(v453) = v362[1].i8[2];
    v363 = v362[2].f32[1];
    if (v363 <= 0.0)
    {
      v364 = 1;
      if (v363 != 0.0)
      {
        v365 = v363 >= 0.0 ? v363 : 0.0 - v363;
        if (v365 > 0.00000001)
          v364 = 0;
      }
    }
    else
    {
      v364 = 2;
    }
    v366 = v362[1].f32[1];
    *(_QWORD *)v456 = v324;
    *(_QWORD *)&v456[8] = v321;
    *(float64x2_t *)&v456[16] = vcvtq_f64_f32(*v362);
    *(_DWORD *)&v456[32] = v322;
    *(double *)&v457 = v366;
    WORD5(v457) = BYTE2(v453);
    WORD4(v457) = (_WORD)v453;
    BYTE12(v457) = v364;
    sub_2395D8064(v444, (unsigned int *)v456, 0);
LABEL_734:
    v367 = (uint64_t *)v319[1];
    if (v367)
    {
      do
      {
        v368 = (uint64_t **)v367;
        v367 = (uint64_t *)*v367;
      }
      while (v367);
    }
    else
    {
      do
      {
        v368 = (uint64_t **)v319[2];
        v402 = *v368 == v319;
        v319 = (uint64_t *)v368;
      }
      while (!v402);
    }
    v319 = (uint64_t *)v368;
    if (v368 != &v483)
      continue;
    break;
  }
  if (v463[1])
  {
    v374 = v463[0];
    if (v463[0])
    {
      do
      {
        if (v374[6])
        {
          v375 = (_QWORD *)v374[5];
          v454 = 0;
          v455 = 0;
          v453 = 0;
          v376 = -1;
          v377 = v375;
          do
          {
            v378 = v376;
            v377 = (_QWORD *)*v377;
            ++v376;
          }
          while (v377);
          if (v376 >= 0x1FFFFFFFFFFFFFFFLL)
            sub_2394189F8();
          v449 = v374;
          v379 = v378 + 2;
          v380 = (uint64_t *)operator new(8 * (v378 + 2));
          v381 = v380;
          v453 = (char *)v380;
          v455 = (char *)&v380[v379];
          v382 = -8;
          v383 = (char *)v380;
          do
          {
            v384 = v382;
            *(_QWORD *)v383 = v375[2];
            v383 += 8;
            v375 = (_QWORD *)*v375;
            v382 += 8;
          }
          while (v375);
          v385 = v383 - (char *)v380;
          v386 = *v380;
          v387 = v383 - (char *)v380 - 8;
          if (v383 - (char *)v380 != 8)
            memmove(v380, v380 + 1, v383 - (char *)v380 - 8);
          v388 = v387 >> 3;
          v389 = (uint64_t *)((char *)v381 + v387);
          v454 = v389;
          if (v388 <= (uint64_t)v376)
          {
            v374 = v449;
            *v389 = v449[2];
            v394 = v389 + 1;
          }
          else
          {
            if (2 * (v379 & 0x1FFFFFFFFFFFFFFFLL) <= v388 + 1)
              v390 = v388 + 1;
            else
              v390 = 2 * (v379 & 0x1FFFFFFFFFFFFFFFLL);
            if (v379 == 0xFFFFFFFFFFFFFFFLL)
              v391 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v391 = v390;
            if (v391 >> 61)
              sub_239418A80();
            v392 = (char *)operator new(8 * v391);
            v393 = &v392[8 * v388];
            *(_QWORD *)v393 = v449[2];
            v394 = (uint64_t *)(v393 + 8);
            if (v385 != 8)
            {
              if ((unint64_t)(v385 - 16) < 0x18)
                goto LABEL_861;
              v395 = ((unint64_t)(v385 - 16) >> 3) + 1;
              v389 -= v395 & 0x3FFFFFFFFFFFFFFCLL;
              v396 = ((v384 >> 3) + 1) & 0x3FFFFFFFFFFFFFFCLL;
              v397 = (__int128 *)&v381[v388 - 2];
              v398 = &v392[8 * v388 - 16];
              do
              {
                v399 = *v397;
                *((_OWORD *)v398 - 1) = *(v397 - 1);
                *(_OWORD *)v398 = v399;
                v397 -= 2;
                v398 -= 32;
                v396 -= 4;
              }
              while (v396);
              v393 -= 8 * (v395 & 0x3FFFFFFFFFFFFFFCLL);
              if (v395 != (v395 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_861:
                do
                {
                  v400 = *--v389;
                  *((_QWORD *)v393 - 1) = v400;
                  v393 -= 8;
                }
                while (v389 != v381);
              }
            }
            v453 = v393;
            v454 = v394;
            v455 = &v392[8 * v391];
            operator delete(v381);
            v381 = (uint64_t *)v453;
            v374 = v449;
          }
          v454 = v394;
          v401 = v444[5];
          v402 = v381 == v394 || *(_QWORD *)&v401 == 0;
          if (!v402)
          {
            if (!*(_QWORD *)&v401)
              goto LABEL_811;
LABEL_782:
            v403 = *v381;
            v404 = *v381;
            v405 = (uint8x8_t)vcnt_s8(v401);
            v405.i16[0] = vaddlv_u8(v405);
            if (v405.u32[0] > 1uLL)
            {
              v406 = *v381;
              if (*(_QWORD *)&v401 <= v404)
                v406 = v404 % *(_QWORD *)&v401;
            }
            else
            {
              v406 = (v401.i32[0] - 1) & v404;
            }
            v407 = *(uint64_t ***)(*(_QWORD *)&v444[4] + 8 * v406);
            if (v407)
            {
              v408 = *v407;
              if (v408)
              {
                if (v405.u32[0] < 2uLL)
                {
                  v409 = *(_QWORD *)&v401 - 1;
                  while (1)
                  {
                    v411 = v408[1];
                    if (v411 == v404)
                    {
                      if (*((_DWORD *)v408 + 4) == (_DWORD)v403)
                        goto LABEL_802;
                    }
                    else if ((v411 & v409) != v406)
                    {
                      goto LABEL_811;
                    }
                    v408 = (uint64_t *)*v408;
                    if (!v408)
                      goto LABEL_811;
                  }
                }
                do
                {
                  v410 = v408[1];
                  if (v410 == v404)
                  {
                    if (*((_DWORD *)v408 + 4) == (_DWORD)v403)
                    {
LABEL_802:
                      *(_OWORD *)v450 = 0u;
                      *(_OWORD *)v451 = 0u;
                      v452 = 1065353216;
                      sub_239C6DE64((char *)v444, v403, v450);
                      sub_239CA0020(v444, v403);
                      v412 = (char *)v451[0];
                      if (v451[0])
                      {
                        do
                        {
                          *(_DWORD *)v456 = *((_DWORD *)v412 + 4);
                          *(_OWORD *)&v456[8] = *(_OWORD *)(v412 + 24);
                          *(_OWORD *)&v456[24] = *(_OWORD *)(v412 + 40);
                          v457 = *(_OWORD *)(v412 + 56);
                          v459 = v412[74];
                          v458 = *((_WORD *)v412 + 36);
                          v460 = *(_WORD *)(v412 + 75);
                          *(_QWORD *)&v456[8] = v386;
                          if (!sub_239CA0518(v444, *(unsigned int *)&v456[16], v386))
                            sub_2395D8064(v444, (unsigned int *)&v456[8], 0);
                          v412 = *(char **)v412;
                        }
                        while (v412);
                        v413 = v451[0];
                        if (v451[0])
                        {
                          do
                          {
                            v414 = (_QWORD *)*v413;
                            operator delete(v413);
                            v413 = v414;
                          }
                          while (v414);
                        }
                      }
                      v415 = v450[0];
                      v450[0] = 0;
                      if (v415)
                        operator delete(v415);
                      break;
                    }
                  }
                  else
                  {
                    if (v410 >= *(_QWORD *)&v401)
                      v410 %= *(_QWORD *)&v401;
                    if (v410 != v406)
                      break;
                  }
                  v408 = (uint64_t *)*v408;
                }
                while (v408);
              }
            }
LABEL_811:
            while (++v381 != v394)
            {
              v401 = v444[5];
              if (v401)
                goto LABEL_782;
            }
            v381 = (uint64_t *)v453;
          }
          if (v381)
          {
            v454 = v381;
            operator delete(v381);
          }
        }
        v374 = (_QWORD *)*v374;
      }
      while (v374);
    }
  }
LABEL_817:
  sub_239E253F4((uint64_t)v444, a4);
  v416 = v463[0];
  if (v463[0])
  {
    do
    {
      v424 = (_QWORD *)*v416;
      v425 = (_QWORD *)v416[5];
      if (v425)
      {
        do
        {
          v426 = (_QWORD *)*v425;
          operator delete(v425);
          v425 = v426;
        }
        while (v426);
      }
      v427 = (void *)v416[3];
      v416[3] = 0;
      if (v427)
        operator delete(v427);
      operator delete(v416);
      v416 = v424;
    }
    while (v424);
  }
  v417 = v462[0];
  v462[0] = 0;
  if (v417)
    operator delete(v417);
  v418 = v466[0];
  if (v466[0])
  {
    do
    {
      v419 = (_QWORD *)*v418;
      operator delete(v418);
      v418 = v419;
    }
    while (v419);
  }
  v420 = v465[0];
  v465[0] = 0;
  if (v420)
    operator delete(v420);
  v421 = v469[0];
  if (v469[0])
  {
    do
    {
      v422 = (_QWORD *)*v421;
      operator delete(v421);
      v421 = v422;
    }
    while (v422);
  }
  v423 = __p[0];
  __p[0] = 0;
  if (v423)
    operator delete(v423);
  if (v474[0])
  {
    v474[1] = v474[0];
    operator delete(v474[0]);
  }
  if (v472[1])
  {
    *(void **)&v473 = v472[1];
    operator delete(v472[1]);
  }
  if (v471[0])
  {
    v471[1] = v471[0];
    operator delete(v471[0]);
  }
  if (v476)
  {
    v477 = v476;
    operator delete(v476);
  }
  if (v479)
  {
    v480 = v479;
    operator delete(v479);
  }
  sub_239A61F08(v483);
  sub_239A61F08(v486[0]);
}

void sub_239C9F864(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)(v1 - 120);
  if (v3 == (_QWORD *)(v1 - 144))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 144);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(v1 - 216);
  if (v5)
  {
    *(_QWORD *)(v1 - 208) = v5;
    operator delete(v5);
  }
  sub_239A61F08(*(_QWORD **)(v1 - 184));
  sub_239A61F08(*(_QWORD **)(v1 - 160));
  _Unwind_Resume(a1);
}

char *sub_239C9FB14(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_QWORD *)v10 + 2) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      sub_239418A80();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_59;
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_64;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_64:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = (void *)*a1;
      *a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = a1[1];
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v5);
  if (v37)
  {
    *(_QWORD *)v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v5) = v13;
  if (*(_QWORD *)v10)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_239C9FF8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239C5201C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239C9FFA0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[5];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[3];
      v2[3] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_239CA0020(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  unint64_t v14;
  _DWORD *v15;
  BOOL v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  int8x8_t **v21;
  int8x8_t *v22;
  uint64_t v23;
  int8x8_t v24;
  int8x8_t v25;
  int8x8_t v26;
  uint8x8_t v27;
  unint64_t v28;
  int8x8_t *v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  void *__p;

  v2 = a1[5];
  if (!v2)
    return;
  v5 = a2;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v6.i16[0] = vaddlv_u8(v6);
  v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    v8 = a2;
    if (v2 <= a2)
      v8 = a2 % v2;
  }
  else
  {
    v8 = ((_DWORD)v2 - 1) & a2;
  }
  v9 = *(void ***)(a1[4] + 8 * v8);
  if (!v9)
    return;
  v10 = *v9;
  if (!*v9)
    return;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == a2)
      {
        if (*((_DWORD *)v10 + 4) == a2)
          goto LABEL_22;
      }
      else if ((v12 & (v2 - 1)) != v8)
      {
        return;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        return;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == a2)
      break;
    if (v11 >= v2)
      v11 %= v2;
    if (v11 != v8)
      return;
LABEL_11:
    v10 = (_QWORD *)*v10;
    if (!v10)
      return;
  }
  if (*((_DWORD *)v10 + 4) != a2)
    goto LABEL_11;
LABEL_22:
  v13 = (uint64_t **)v10[16];
  if (!v13)
    goto LABEL_73;
  while (2)
  {
    v14 = *((unsigned int *)v13 + 5);
    if (v14 >= (uint64_t)(a1[1] - *a1) >> 6
      || ((v15 = (_DWORD *)(*a1 + (v14 << 6)), *v15 != -1) ? (v16 = (_DWORD)v14 == -1) : (v16 = 1), v16))
    {
      v46 = 222;
LABEL_108:
      sub_239A444D4((uint64_t)"unknown file", v46, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    *v15 = -1;
    --a1[3];
    v17 = (int8x8_t)a1[10];
    if (!*(_QWORD *)&v17)
      goto LABEL_106;
    v18 = *((unsigned int *)v13 + 4);
    v19 = (uint8x8_t)vcnt_s8(v17);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      v20 = *((unsigned int *)v13 + 4);
      if (*(_QWORD *)&v17 <= v18)
        v20 = v18 % *(_QWORD *)&v17;
    }
    else
    {
      v20 = (v17.i32[0] - 1) & v18;
    }
    v21 = *(int8x8_t ***)(a1[9] + 8 * v20);
    if (!v21 || (v22 = *v21) == 0)
    {
LABEL_106:
      v46 = 226;
      goto LABEL_108;
    }
    if (v19.u32[0] < 2uLL)
    {
      v23 = *(_QWORD *)&v17 - 1;
      while (1)
      {
        v25 = v22[1];
        if (*(_QWORD *)&v25 == v18)
        {
          if (v22[2].i32[0] == (_DWORD)v18)
            goto LABEL_50;
        }
        else if ((*(_QWORD *)&v25 & v23) != v20)
        {
          goto LABEL_106;
        }
        v22 = (int8x8_t *)*v22;
        if (!v22)
          goto LABEL_106;
      }
    }
    while (2)
    {
      v24 = v22[1];
      if (*(_QWORD *)&v24 != v18)
      {
        if (*(_QWORD *)&v24 >= *(_QWORD *)&v17)
          *(_QWORD *)&v24 %= *(_QWORD *)&v17;
        if (*(_QWORD *)&v24 != v20)
          goto LABEL_106;
        goto LABEL_40;
      }
      if (v22[2].i32[0] != (_DWORD)v18)
      {
LABEL_40:
        v22 = (int8x8_t *)*v22;
        if (!v22)
          goto LABEL_106;
        continue;
      }
      break;
    }
LABEL_50:
    v26 = v22[55];
    if (!*(_QWORD *)&v26)
      goto LABEL_107;
    v27 = (uint8x8_t)vcnt_s8(v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      v28 = v5;
      if (*(_QWORD *)&v26 <= v5)
        v28 = v5 % *(_QWORD *)&v26;
    }
    else
    {
      v28 = (v26.i32[0] - 1) & v5;
    }
    v29 = v22 + 54;
    v30 = *(uint64_t ***)(*(_QWORD *)&v22[54] + 8 * v28);
    if (!v30 || (v31 = *v30) == 0)
    {
LABEL_107:
      v46 = 230;
      goto LABEL_108;
    }
    if (v27.u32[0] < 2uLL)
    {
      v32 = *(_QWORD *)&v26 - 1;
      while (1)
      {
        v34 = v31[1];
        if (v34 == v5)
        {
          if (*((_DWORD *)v31 + 4) == a2)
            goto LABEL_70;
        }
        else if ((v34 & v32) != v28)
        {
          goto LABEL_107;
        }
        v31 = (uint64_t *)*v31;
        if (!v31)
          goto LABEL_107;
      }
    }
    while (2)
    {
      v33 = v31[1];
      if (v33 != v5)
      {
        if (v33 >= *(_QWORD *)&v26)
          v33 %= *(_QWORD *)&v26;
        if (v33 != v28)
          goto LABEL_107;
LABEL_60:
        v31 = (uint64_t *)*v31;
        if (!v31)
          goto LABEL_107;
        continue;
      }
      break;
    }
    if (*((_DWORD *)v31 + 4) != a2)
      goto LABEL_60;
LABEL_70:
    sub_239A78378((uint64_t)&__p, v29, v31);
    if (__p)
      operator delete(__p);
    v13 = (uint64_t **)*v13;
    if (v13)
      continue;
    break;
  }
  v2 = a1[5];
  v5 = v10[1];
  v35 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v35.i16[0] = vaddlv_u8(v35);
  v7 = v35.u32[0];
LABEL_73:
  if (v7 > 1)
  {
    if (v5 >= v2)
      v5 %= v2;
  }
  else
  {
    v5 &= v2 - 1;
  }
  v36 = a1[4];
  v37 = *(_QWORD **)(v36 + 8 * v5);
  do
  {
    v38 = v37;
    v37 = (_QWORD *)*v37;
  }
  while (v37 != v10);
  if (v38 == a1 + 6)
    goto LABEL_90;
  v39 = v38[1];
  if (v7 > 1)
  {
    if (v39 >= v2)
      v39 %= v2;
  }
  else
  {
    v39 &= v2 - 1;
  }
  if (v39 != v5)
  {
LABEL_90:
    if (!*v10)
      goto LABEL_91;
    v40 = *(_QWORD *)(*v10 + 8);
    if (v7 > 1)
    {
      if (v40 >= v2)
        v40 %= v2;
    }
    else
    {
      v40 &= v2 - 1;
    }
    if (v40 != v5)
LABEL_91:
      *(_QWORD *)(v36 + 8 * v5) = 0;
  }
  v41 = *v10;
  if (*v10)
  {
    v42 = *(_QWORD *)(v41 + 8);
    if (v7 > 1)
    {
      if (v42 >= v2)
        v42 %= v2;
    }
    else
    {
      v42 &= v2 - 1;
    }
    if (v42 != v5)
    {
      *(_QWORD *)(a1[4] + 8 * v42) = v38;
      v41 = *v10;
    }
  }
  *v38 = v41;
  *v10 = 0;
  --a1[7];
  v43 = (_QWORD *)v10[16];
  if (v43)
  {
    do
    {
      v44 = (_QWORD *)*v43;
      operator delete(v43);
      v43 = v44;
    }
    while (v44);
  }
  v45 = (void *)v10[14];
  v10[14] = 0;
  if (v45)
    operator delete(v45);
  if (*((_BYTE *)v10 + 104))
    sub_239916980((uint64_t)(v10 + 9));
  operator delete(v10);
}

BOOL sub_239CA0518(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = a1[10];
  if (!v3)
    goto LABEL_51;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = ((_DWORD)v3 - 1) & a2;
  }
  v6 = *(uint64_t ***)(a1[9] + 8 * v5);
  if (!v6 || (v7 = *v6) == 0)
  {
LABEL_51:
    sub_239A444D4((uint64_t)"unknown file", 108, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (v4.u32[0] < 2uLL)
  {
    v8 = v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v7 + 4) == a2)
          goto LABEL_21;
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_51;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_51;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= v3)
      v9 %= v3;
    if (v9 != v5)
      goto LABEL_51;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      goto LABEL_51;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_11;
LABEL_21:
  v11 = v7[55];
  if (!v11)
    return 0;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = a3;
    if (v11 <= a3)
      v13 = a3 % v11;
  }
  else
  {
    v13 = ((_DWORD)v11 - 1) & a3;
  }
  v14 = *(uint64_t ***)(v7[54] + 8 * v13);
  if (!v14)
    return 0;
  v15 = *v14;
  if (!v15)
    return 0;
  if (v12.u32[0] < 2uLL)
  {
    v16 = v11 - 1;
    while (1)
    {
      v18 = v15[1];
      if (v18 == a3)
      {
        if (*((_DWORD *)v15 + 4) == a3)
          goto LABEL_42;
      }
      else if ((v18 & v16) != v13)
      {
        return 0;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        return 0;
    }
  }
  while (1)
  {
    v17 = v15[1];
    if (v17 == a3)
      break;
    if (v17 >= v11)
      v17 %= v11;
    if (v17 != v13)
      return 0;
LABEL_31:
    v15 = (uint64_t *)*v15;
    if (!v15)
      return 0;
  }
  if (*((_DWORD *)v15 + 4) != a3)
    goto LABEL_31;
LABEL_42:
  v19 = *((unsigned int *)v15 + 5);
  if (v19 >= (uint64_t)(a1[1] - *a1) >> 6)
    return 0;
  return (_DWORD)v19 != -1 && *(_DWORD *)(*a1 + (v19 << 6)) != -1;
}

void sub_239CA0730()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239CA0744(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFC8F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239CA077C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFC8F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239CA079C(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v4 = (uint64_t *)*((int *)a3 + 8);
  v6 = *a3;
  v5 = a3[1];
  v7 = *(uint64_t ***)(a1 + 8);
  v9 = v7 + 1;
  v8 = v7[1];
  if (v8)
  {
    while (1)
    {
      v10 = (uint64_t **)v8;
      v11 = v8[4];
      if ((unint64_t)v5 < v11)
        goto LABEL_3;
      if (v11 < (unint64_t)v5)
      {
LABEL_8:
        v8 = v10[1];
        if (!v8)
        {
          v9 = v10 + 1;
          goto LABEL_10;
        }
      }
      else
      {
        v12 = v10[5];
        if (v12 <= v4)
        {
          if (v12 >= v4)
            goto LABEL_13;
          goto LABEL_8;
        }
LABEL_3:
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_10;
      }
    }
  }
  v10 = v7 + 1;
LABEL_10:
  v13 = (uint64_t *)v10;
  v10 = (uint64_t **)operator new(0x38uLL);
  v10[4] = v5;
  v10[5] = v4;
  v10[6] = 0;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v13;
  *v9 = (uint64_t *)v10;
  v14 = (uint64_t *)**v7;
  v15 = (uint64_t *)v10;
  if (v14)
  {
    *v7 = v14;
    v15 = *v9;
  }
  sub_2394213B8(v7[1], v15);
  v7[2] = (uint64_t *)((char *)v7[2] + 1);
LABEL_13:
  v10[6] = v6;
  v16 = *(uint64_t ***)(a1 + 16);
  v18 = v16 + 1;
  v17 = v16[1];
  if (v17)
  {
    while (1)
    {
      v19 = (uint64_t **)v17;
      v20 = v17[4];
      if ((unint64_t)v5 < v20)
        goto LABEL_15;
      if (v20 < (unint64_t)v5)
      {
LABEL_20:
        v17 = v19[1];
        if (!v17)
        {
          v18 = v19 + 1;
          goto LABEL_22;
        }
      }
      else
      {
        v21 = v19[5];
        if (v21 <= v4)
        {
          if (v21 >= v4)
            goto LABEL_25;
          goto LABEL_20;
        }
LABEL_15:
        v17 = *v19;
        v18 = v19;
        if (!*v19)
          goto LABEL_22;
      }
    }
  }
  v19 = v16 + 1;
LABEL_22:
  v22 = (uint64_t *)v19;
  v19 = (uint64_t **)operator new(0x38uLL);
  v19[4] = v5;
  v19[5] = v4;
  v19[6] = 0;
  *v19 = 0;
  v19[1] = 0;
  v19[2] = v22;
  *v18 = (uint64_t *)v19;
  v23 = (uint64_t *)**v16;
  v24 = (uint64_t *)v19;
  if (v23)
  {
    *v16 = v23;
    v24 = *v18;
  }
  sub_2394213B8(v16[1], v24);
  v16[2] = (uint64_t *)((char *)v16[2] + 1);
LABEL_25:
  v19[6] = (uint64_t *)-1;
  return 1;
}

void sub_239CA0938(void **a1, int8x8_t *a2, uint64_t *a3, int8x8_t *a4, int8x8_t **a5, _QWORD *a6, unsigned int **a7)
{
  _QWORD *v7;
  int8x8_t *v9;
  uint64_t *v10;
  int8x8_t v11;
  int v12;
  BOOL v13;
  void ***v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x8_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int8x8_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t *v44;
  int8x8_t v45;
  uint8x8_t v46;
  unint64_t v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unsigned int *v64;
  unsigned int v65;
  _BYTE *v66;
  _BYTE *v67;
  int64_t v68;
  char *v69;
  char *v70;
  unsigned int *v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unint64_t v75;
  uint64_t **v76;
  unsigned int v77;
  _QWORD *v78;
  _QWORD *v79;
  int8x8_t v80;
  uint8x8_t v81;
  unint64_t v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  int8x8_t v96;
  uint8x8_t v97;
  unint64_t v98;
  int8x8_t *v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  _QWORD *v109;
  float32x2_t *v110;
  uint64_t v111;
  float v112;
  char v113;
  float v114;
  int8x8_t v115;
  uint8x8_t v116;
  unint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int8x8_t v123;
  uint8x8_t v124;
  unint64_t v125;
  uint64_t **v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unsigned int *v132;
  _DWORD *v133;
  char *v134;
  char *v135;
  void *v136;
  char v137;
  char *v138;
  uint64_t *v139;
  uint64_t *v140;
  int v141;
  char v142;
  float v143;
  char v144;
  double v145;
  double v146;
  __int16 v147;
  unsigned __int8 v148;
  __int16 v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  int64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  int64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  int v188;
  float v189;
  char v190;
  double v191;
  void **v192;
  double v193;
  __int16 v194;
  unsigned __int8 v195;
  __int16 v196;
  uint64_t v197;
  char *v198;
  unsigned int *v199;
  void **v200;
  void **v201;
  void **v202;
  void **v203;
  uint64_t *v204;
  float64x2_t *v205;
  unsigned int *v206;
  unsigned int *v207;
  unsigned int *v208;
  void *v209;
  int64_t v210;
  uint64_t v211;
  int64_t v212;
  uint64_t *v213;
  _QWORD *v214;
  unsigned int *v215;
  int8x8_t *v216;
  void ***v217;
  void ***v218;
  _DWORD *v219;
  uint64_t *v220;
  unsigned int *v221;
  int v223;
  uint64_t v224;
  unsigned int *v225;
  unint64_t v226;
  float32x2_t *v227;
  char v229;
  uint64_t *v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  void *__p;
  void *v237;
  _DWORD *v238;
  void *v239;
  char *v240;
  uint64_t v241;
  void *v242;
  void **v243;
  float64x2_t v244;
  __int128 v245;
  _QWORD v246[4];
  char v247;
  unsigned int *v248;
  unsigned int *v249;
  char v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  unsigned int *v257;
  unsigned int *v258;
  unsigned int *v259;

  v7 = a6;
  v9 = a4;
  v10 = a3;
  v11 = a2[6];
  v12 = -1;
  if (a2[7])
    v13 = *(_QWORD *)&v11 == 0;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      if (*(_DWORD *)(*(_QWORD *)&v11 + 16) > v12)
        v12 = *(_DWORD *)(*(_QWORD *)&v11 + 16);
      v11 = **(int8x8_t **)&v11;
    }
    while (v11);
  }
  v217 = (void ***)*a6;
  v218 = (void ***)a6[1];
  if (v218 != (void ***)*a6)
  {
    v14 = (void ***)*a6;
    while (*v14 != a1)
    {
      if (++v14 == v218)
      {
        v14 = (void ***)a6[1];
        break;
      }
    }
    if (v14 != v218)
      return;
  }
  v15 = (int)a1;
  v16 = a1;
  v17 = a3[1];
  if (!v17)
    goto LABEL_34;
  v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    v19 = a1;
    if (v17 <= a1)
      v19 = a1 % v17;
  }
  else
  {
    v19 = ((_DWORD)v17 - 1) & a1;
  }
  v20 = *(uint64_t ***)(*a3 + 8 * v19);
  if (!v20 || (v21 = *v20) == 0)
  {
LABEL_34:
    v25 = (char *)operator new(0x40uLL);
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = &off_250AFC940;
    *(_OWORD *)(v25 + 40) = 0u;
    *((_DWORD *)v25 + 14) = 1065353216;
    *(_QWORD *)&v244.f64[0] = v25;
    *(_OWORD *)(v25 + 24) = 0u;
    LODWORD(v242) = (_DWORD)a1;
    v243 = (void **)(v25 + 24);
    v248 = 0;
    v249 = 0;
    v234 = (_QWORD *)*((_QWORD *)sub_239CA1F34(v10, a1, (uint64_t)&v242) + 3);
    v26 = *(std::__shared_weak_count **)&v244.f64[0];
    if (*(_QWORD *)&v244.f64[0])
    {
      v27 = (unint64_t *)(*(_QWORD *)&v244.f64[0] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (std::__shared_weak_count *)v249;
    if (v249)
    {
      v30 = (unint64_t *)(v249 + 2);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v15 = (int)a1;
    v32 = v9[1];
    if (v32)
      goto LABEL_45;
    goto LABEL_108;
  }
  if (v18.u32[0] < 2uLL)
  {
    v22 = v17 - 1;
    while (1)
    {
      v24 = v21[1];
      if (v24 == a1)
      {
        if (*((_DWORD *)v21 + 4) == (_DWORD)a1)
          goto LABEL_107;
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_34;
      }
      v21 = (uint64_t *)*v21;
      if (!v21)
        goto LABEL_34;
    }
  }
  while (1)
  {
    v23 = v21[1];
    if (v23 == a1)
      break;
    if (v23 >= v17)
      v23 %= v17;
    if (v23 != v19)
      goto LABEL_34;
LABEL_24:
    v21 = (uint64_t *)*v21;
    if (!v21)
      goto LABEL_34;
  }
  if (*((_DWORD *)v21 + 4) != (_DWORD)a1)
    goto LABEL_24;
LABEL_107:
  v234 = (_QWORD *)v21[3];
  v32 = a4[1];
  if (!*(_QWORD *)&v32)
    goto LABEL_108;
LABEL_45:
  v33 = (uint8x8_t)vcnt_s8(v32);
  v33.i16[0] = vaddlv_u8(v33);
  if (v33.u32[0] > 1uLL)
  {
    v34 = v16;
    if (*(_QWORD *)&v32 <= v16)
      v34 = v16 % *(_QWORD *)&v32;
  }
  else
  {
    v34 = (v32.i32[0] - 1) & v16;
  }
  v35 = *(uint64_t ***)(*(_QWORD *)v9 + 8 * v34);
  if (!v35 || (v36 = *v35) == 0)
LABEL_108:
    sub_23941D898("unordered_map::at: key not found");
  if (v33.u32[0] < 2uLL)
  {
    v37 = *(_QWORD *)&v32 - 1;
    while (1)
    {
      v39 = v36[1];
      if (v39 == v16)
      {
        if (*((_DWORD *)v36 + 4) == v15)
          goto LABEL_64;
      }
      else if ((v39 & v37) != v34)
      {
        goto LABEL_108;
      }
      v36 = (uint64_t *)*v36;
      if (!v36)
        goto LABEL_108;
    }
  }
  while (1)
  {
    v38 = v36[1];
    if (v38 == v16)
      break;
    if (v38 >= *(_QWORD *)&v32)
      v38 %= *(_QWORD *)&v32;
    if (v38 != v34)
      goto LABEL_108;
LABEL_54:
    v36 = (uint64_t *)*v36;
    if (!v36)
      goto LABEL_108;
  }
  if (*((_DWORD *)v36 + 4) != v15)
    goto LABEL_54;
LABEL_64:
  if (!v36[3])
    return;
  v40 = a2[11];
  if (v40)
  {
    v41 = -1;
    do
    {
      v42 = *(_DWORD *)(*(_QWORD *)&v40 + 220);
      if ((v42 & 0x80000000) == 0)
      {
        v43 = v41 >= v42 ? *(_DWORD *)(*(_QWORD *)&v40 + 220) : v41;
        v41 = v41 == -1 ? *(_DWORD *)(*(_QWORD *)&v40 + 220) : v43;
        if (!v41)
          break;
      }
      v40 = **(int8x8_t **)&v40;
    }
    while (v40);
  }
  else
  {
    v41 = -1;
  }
  v44 = sub_2395D7BEC((uint64_t)a2, a1);
  v45 = (*a5)[1];
  if (!*(_QWORD *)&v45)
    return;
  v46 = (uint8x8_t)vcnt_s8(v45);
  v46.i16[0] = vaddlv_u8(v46);
  if (v46.u32[0] > 1uLL)
  {
    v47 = v16;
    if (*(_QWORD *)&v45 <= v16)
      v47 = v16 % *(_QWORD *)&v45;
  }
  else
  {
    v47 = (v45.i32[0] - 1) & v16;
  }
  v48 = *(uint64_t ***)(*(_QWORD *)*a5 + 8 * v47);
  if (!v48)
    return;
  v49 = *v48;
  if (!v49)
    return;
  if (v46.u32[0] < 2uLL)
  {
    v50 = *(_QWORD *)&v45 - 1;
    while (1)
    {
      v52 = v49[1];
      if (v52 == v16)
      {
        if (*((_DWORD *)v49 + 4) == (_DWORD)a1)
          goto LABEL_98;
      }
      else if ((v52 & v50) != v47)
      {
        return;
      }
      v49 = (uint64_t *)*v49;
      if (!v49)
        return;
    }
  }
  while (2)
  {
    v51 = v49[1];
    if (v51 != v16)
    {
      if (v51 >= *(_QWORD *)&v45)
        v51 %= *(_QWORD *)&v45;
      if (v51 != v47)
        return;
      goto LABEL_88;
    }
    if (*((_DWORD *)v49 + 4) != (_DWORD)a1)
    {
LABEL_88:
      v49 = (uint64_t *)*v49;
      if (!v49)
        return;
      continue;
    }
    break;
  }
LABEL_98:
  v223 = v41;
  v53 = (uint64_t *)v49[5];
  v258 = 0;
  v259 = 0;
  v257 = 0;
  v213 = v10;
  v214 = v7;
  v216 = v9;
  v230 = v44;
  if (v53)
  {
    v54 = -1;
    v55 = v53;
    do
    {
      v56 = v54;
      v55 = (_QWORD *)*v55;
      ++v54;
    }
    while (v55);
    if (v54 >= 0x1C71C71C71C71C7)
      sub_2394189F8();
    v57 = v56 + 2;
    v58 = 0;
    v257 = (unsigned int *)operator new(144 * (v56 + 2));
    v258 = v257;
    v259 = &v257[36 * v57];
    v248 = v257;
    v254 = (char *)v257;
    v242 = &v259;
    v243 = (void **)&v254;
    *(_QWORD *)&v244.f64[0] = &v248;
    LOBYTE(v244.f64[1]) = 0;
    v59 = v257;
    do
    {
      v64 = &v59[v58];
      v65 = *((_DWORD *)v53 + 4);
      *(_QWORD *)&v59[v58 + 2] = 0;
      *v64 = v65;
      *((_QWORD *)v64 + 2) = 0;
      *((_QWORD *)v64 + 3) = 0;
      v67 = (_BYTE *)v53[3];
      v66 = (_BYTE *)v53[4];
      v68 = v66 - v67;
      if (v66 != v67)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v68 >> 2) >= 0x1555555555555556)
          sub_2394189F8();
        v69 = (char *)operator new(v68);
        *(_QWORD *)&v59[v58 + 2] = v69;
        v70 = &v69[4 * (v68 >> 2)];
        *((_QWORD *)v64 + 2) = v69;
        *((_QWORD *)v64 + 3) = v70;
        memcpy(v69, v67, v68);
        *((_QWORD *)v64 + 2) = v70;
      }
      *((_QWORD *)v64 + 4) = v53[6];
      v60 = *(_OWORD *)(v53 + 7);
      v61 = *(_OWORD *)(v53 + 9);
      *(_OWORD *)(v64 + 18) = *(_OWORD *)(v53 + 11);
      *(_OWORD *)(v64 + 14) = v61;
      *(_OWORD *)(v64 + 10) = v60;
      v62 = *(_OWORD *)(v53 + 13);
      v63 = *(_OWORD *)(v53 + 15);
      *(_OWORD *)(v64 + 30) = *(_OWORD *)(v53 + 17);
      *(_OWORD *)(v64 + 26) = v63;
      *(_OWORD *)(v64 + 22) = v62;
      v64[34] = *((_DWORD *)v53 + 38);
      v53 = (uint64_t *)*v53;
      v248 = v64 + 36;
      v58 += 36;
    }
    while (v53);
    v71 = &v59[v58];
    v258 = &v59[v58];
    v10 = v213;
    v7 = v214;
    v9 = v216;
  }
  else
  {
    v71 = 0;
    v59 = 0;
  }
  v72 = 126 - 2 * __clz(0x8E38E38E38E38E39 * (((char *)v71 - (char *)v59) >> 4));
  v242 = a2;
  v243 = (void **)((char *)v230 + 196);
  v219 = (_DWORD *)v230 + 49;
  if (v71 == v59)
    v73 = 0;
  else
    v73 = v72;
  sub_239CA23BC(v59, v71, (uint64_t)&v242, v73, 1);
  v254 = 0;
  v255 = 0;
  v256 = 0;
  v251 = 0;
  v252 = 0;
  v253 = 0;
  v74 = v257;
  v215 = v258;
  if (v257 != v258)
  {
    v226 = v12 + 1;
    do
    {
      v221 = v74;
      v77 = *v74;
      v76 = (uint64_t **)(v74 + 2);
      v75 = v77;
      if (v218 != v217)
      {
        v79 = (_QWORD *)*v7;
        v78 = (_QWORD *)v7[1];
        if ((_QWORD *)*v7 != v78)
        {
          while (*v79 != v75)
          {
            if (++v79 == v78)
            {
              v79 = (_QWORD *)v7[1];
              break;
            }
          }
        }
        if (v79 != v78)
          goto LABEL_117;
      }
      v80 = (int8x8_t)v10[1];
      if (!*(_QWORD *)&v80)
        goto LABEL_144;
      v81 = (uint8x8_t)vcnt_s8(v80);
      v81.i16[0] = vaddlv_u8(v81);
      if (v81.u32[0] > 1uLL)
      {
        v82 = v75;
        if (*(_QWORD *)&v80 <= v75)
          v82 = v75 % *(_QWORD *)&v80;
      }
      else
      {
        v82 = (v80.i32[0] - 1) & v75;
      }
      v83 = *(uint64_t ***)(*v10 + 8 * v82);
      if (!v83 || (v84 = *v83) == 0)
      {
LABEL_144:
        v88 = (char *)operator new(0x40uLL);
        *((_QWORD *)v88 + 1) = 0;
        *((_QWORD *)v88 + 2) = 0;
        *(_QWORD *)v88 = &off_250AFC940;
        *(_OWORD *)(v88 + 40) = 0u;
        *(_OWORD *)(v88 + 24) = 0u;
        *((_DWORD *)v88 + 14) = 1065353216;
        LODWORD(v242) = *v221;
        v243 = (void **)(v88 + 24);
        *(_QWORD *)&v244.f64[0] = v88;
        v248 = 0;
        v249 = 0;
        v89 = (_QWORD *)*((_QWORD *)sub_239CA1F34(v10, v242, (uint64_t)&v242) + 3);
        v90 = *(std::__shared_weak_count **)&v244.f64[0];
        if (*(_QWORD *)&v244.f64[0])
        {
          v91 = (unint64_t *)(*(_QWORD *)&v244.f64[0] + 8);
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v93 = (std::__shared_weak_count *)v249;
        if (v249)
        {
          v94 = (unint64_t *)(v249 + 2);
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        v75 = *v221;
        v96 = v9[1];
        if (v96)
          goto LABEL_155;
LABEL_345:
        sub_23941D898("unordered_map::at: key not found");
      }
      if (v81.u32[0] < 2uLL)
      {
        v85 = *(_QWORD *)&v80 - 1;
        while (1)
        {
          v87 = v84[1];
          if (v87 == v75)
          {
            if (*((_DWORD *)v84 + 4) == (_DWORD)v75)
              goto LABEL_344;
          }
          else if ((v87 & v85) != v82)
          {
            goto LABEL_144;
          }
          v84 = (uint64_t *)*v84;
          if (!v84)
            goto LABEL_144;
        }
      }
      while (1)
      {
        v86 = v84[1];
        if (v86 == v75)
          break;
        if (v86 >= *(_QWORD *)&v80)
          v86 %= *(_QWORD *)&v80;
        if (v86 != v82)
          goto LABEL_144;
LABEL_134:
        v84 = (uint64_t *)*v84;
        if (!v84)
          goto LABEL_144;
      }
      if (*((_DWORD *)v84 + 4) != (_DWORD)v75)
        goto LABEL_134;
LABEL_344:
      v89 = (_QWORD *)v84[3];
      v96 = v9[1];
      if (!*(_QWORD *)&v96)
        goto LABEL_345;
LABEL_155:
      v97 = (uint8x8_t)vcnt_s8(v96);
      v97.i16[0] = vaddlv_u8(v97);
      if (v97.u32[0] > 1uLL)
      {
        v98 = v75;
        v99 = v216;
        if (*(_QWORD *)&v96 <= v75)
          v98 = v75 % *(_QWORD *)&v96;
      }
      else
      {
        v98 = (v96.i32[0] - 1) & v75;
        v99 = v216;
      }
      v100 = *(uint64_t ***)(*(_QWORD *)v99 + 8 * v98);
      if (!v100)
        goto LABEL_345;
      v101 = *v100;
      if (!*v100)
        goto LABEL_345;
      if (v97.u32[0] < 2uLL)
      {
        v102 = *(_QWORD *)&v96 - 1;
        while (1)
        {
          v104 = v101[1];
          if (v104 == v75)
          {
            if (*((_DWORD *)v101 + 4) == (_DWORD)v75)
              goto LABEL_174;
          }
          else if ((v104 & v102) != v98)
          {
            goto LABEL_345;
          }
          v101 = (uint64_t *)*v101;
          if (!v101)
            goto LABEL_345;
        }
      }
      while (2)
      {
        v103 = v101[1];
        if (v103 != v75)
        {
          if (v103 >= *(_QWORD *)&v96)
            v103 %= *(_QWORD *)&v96;
          if (v103 != v98)
            goto LABEL_345;
LABEL_164:
          v101 = (uint64_t *)*v101;
          if (!v101)
            goto LABEL_345;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v101 + 4) != (_DWORD)v75)
        goto LABEL_164;
LABEL_174:
      if (!v101[3])
      {
        sub_239A444D4((uint64_t)"unknown file", 449, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v220 = sub_2395D7BEC((uint64_t)a2, v75);
      sub_23943F628(v76, (uint64_t)&v248);
      if (!v250)
        goto LABEL_116;
      v105 = v248;
      v225 = v249;
      if (v248 == v249)
      {
LABEL_342:
        v10 = v213;
        v7 = v214;
        v9 = v216;
        if (v105)
        {
          v249 = v105;
          operator delete(v105);
        }
        goto LABEL_117;
      }
      v224 = (uint64_t)v89;
      while (2)
      {
        v106 = *v105;
        v107 = (_QWORD *)v36[3];
        if (v107[4] <= v106 || ((*(_QWORD *)(v107[3] + ((v106 >> 3) & 0x1FFFFFF8)) >> v106) & 1) == 0)
        {
          sub_239A444D4((uint64_t)"unknown file", 117, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v108 = v105[1];
        v109 = (_QWORD *)v101[3];
        if (v109[4] <= v108 || ((*(_QWORD *)(v109[3] + ((v108 >> 3) & 0x1FFFFFF8)) >> v108) & 1) == 0)
        {
          sub_239A444D4((uint64_t)"unknown file", 117, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v110 = (float32x2_t *)(v107[6] + 24 * v106);
        v111 = v109[6] + 24 * v108;
        v112 = v110[2].f32[1];
        if (v112 <= 0.0 || *(float *)(v111 + 20) <= 0.0)
        {
          if (v112 == 0.0)
            goto LABEL_196;
          if (v112 < 0.0)
            v112 = 0.0 - v112;
          if (v112 <= 0.000001)
            goto LABEL_196;
          v114 = *(float *)(v111 + 20);
          if (v114 == 0.0)
            goto LABEL_196;
          if (v114 < 0.0)
            v114 = 0.0 - v114;
          if (v114 <= 0.000001)
          {
LABEL_196:
            v231 = 1;
            v113 = 1;
          }
          else
          {
            v113 = 0;
            v231 = 1;
          }
        }
        else
        {
          v231 = 0;
          v113 = 2;
        }
        v115 = (int8x8_t)v234[1];
        v227 = (float32x2_t *)(v109[6] + 24 * v108);
        if (!*(_QWORD *)&v115)
          goto LABEL_217;
        v116 = (uint8x8_t)vcnt_s8(v115);
        v116.i16[0] = vaddlv_u8(v116);
        if (v116.u32[0] > 1uLL)
        {
          v117 = *v105;
          if (*(_QWORD *)&v115 <= v106)
            v117 = v106 % *(_QWORD *)&v115;
        }
        else
        {
          v117 = (v115.i32[0] - 1) & v106;
        }
        v118 = *(uint64_t ***)(*v234 + 8 * v117);
        if (v118)
        {
          v119 = *v118;
          if (*v118)
          {
            if (v116.u32[0] < 2uLL)
            {
              v120 = *(_QWORD *)&v115 - 1;
              while (1)
              {
                v122 = v119[1];
                if (v122 == v106)
                {
                  if (*((_DWORD *)v119 + 4) == (_DWORD)v106)
                    goto LABEL_218;
                }
                else if ((v122 & v120) != v117)
                {
                  goto LABEL_217;
                }
                v119 = (uint64_t *)*v119;
                if (!v119)
                  goto LABEL_218;
              }
            }
            do
            {
              v121 = v119[1];
              if (v121 == v106)
              {
                if (*((_DWORD *)v119 + 4) == (_DWORD)v106)
                  break;
              }
              else
              {
                if (v121 >= *(_QWORD *)&v115)
                  v121 %= *(_QWORD *)&v115;
                if (v121 != v117)
                  goto LABEL_217;
              }
              v119 = (uint64_t *)*v119;
            }
            while (v119);
          }
        }
        else
        {
LABEL_217:
          v119 = 0;
        }
LABEL_218:
        v123 = (int8x8_t)v89[1];
        if (!*(_QWORD *)&v123)
          goto LABEL_238;
        v124 = (uint8x8_t)vcnt_s8(v123);
        v124.i16[0] = vaddlv_u8(v124);
        if (v124.u32[0] > 1uLL)
        {
          v125 = v105[1];
          if (*(_QWORD *)&v123 <= v108)
            v125 = v108 % *(_QWORD *)&v123;
        }
        else
        {
          v125 = (v123.i32[0] - 1) & v108;
        }
        v126 = *(uint64_t ***)(*v89 + 8 * v125);
        if (!v126 || (v127 = *v126) == 0)
        {
LABEL_238:
          if (v119)
          {
            v229 = 0;
            v131 = *((unsigned int *)v119 + 5);
            goto LABEL_255;
          }
          v242 = 0;
          v243 = 0;
          v244.f64[0] = 0.0;
          BYTE3(v244.f64[1]) = 0;
          BYTE4(v244.f64[1]) = v113;
          LOBYTE(v245) = 0;
          v247 = 0;
          v132 = *a7;
          if (!*a7)
            goto LABEL_252;
          v239 = 0;
          v240 = 0;
          v241 = 0;
          v133 = operator new(4uLL);
          __p = v133;
          *v133 = v106;
          v237 = v133 + 1;
          v238 = v133 + 1;
          sub_2394829F4(v132, &__p, &v239);
          if (__p)
          {
            v237 = __p;
            operator delete(__p);
          }
          if (v247)
          {
            sub_2395EAD60((uint64_t)&v245, (unsigned int *)v239);
            v134 = (char *)v239;
            if (!v239)
              goto LABEL_252;
LABEL_247:
            v135 = v240;
            v136 = v134;
            if (v240 != v134)
            {
              v137 = v113;
              do
              {
                v138 = v135 - 48;
                sub_239916980((uint64_t)(v135 - 32));
                v135 = v138;
              }
              while (v138 != v134);
              v136 = v239;
              v113 = v137;
            }
            v240 = v134;
            operator delete(v136);
            goto LABEL_252;
          }
          v245 = *(_OWORD *)v239;
          sub_23948A5BC(v246, (uint64_t)v239 + 16);
          v247 = 1;
          v134 = (char *)v239;
          if (v239)
            goto LABEL_247;
LABEL_252:
          sub_2395D7DC4((uint64_t)a2, v226, (uint64_t *)&v242);
          if (v247)
            sub_239916980((uint64_t)v246);
          v229 = 0;
          v131 = v226++;
LABEL_255:
          v139 = sub_2395D7CD8((uint64_t)a2, v131);
          v140 = v139;
          if (v223 < 0)
          {
            v141 = *((unsigned __int8 *)v139 + 28);
          }
          else
          {
            v141 = *((unsigned __int8 *)v139 + 28);
            if (*v219 != *((_DWORD *)v220 + 49) && v141 != 2)
              goto LABEL_178;
          }
          v13 = v141 == 2;
          v142 = v231 ^ 1;
          if (!v13)
            v142 = 1;
          if ((v142 & 1) == 0)
            *((_BYTE *)v139 + 28) = v113;
          if (!v119)
          {
            v143 = v110[2].f32[1];
            if (v143 <= 0.0)
            {
              v144 = 1;
              if (v143 != 0.0)
              {
                v145 = v143 >= 0.0 ? v143 : 0.0 - v143;
                if (v145 > 0.00000001)
                  v144 = 0;
              }
            }
            else
            {
              v144 = 2;
            }
            v146 = v110[1].f32[1];
            v147 = v110[1].i16[0];
            v148 = v110[1].u8[2];
            v242 = (void *)v131;
            v243 = a1;
            v244 = vcvtq_f64_f32(*v110);
            LODWORD(v245) = v106;
            *((double *)&v245 + 1) = v146;
            WORD1(v246[0]) = v148;
            LOWORD(v246[0]) = v147;
            BYTE4(v246[0]) = v144;
            sub_2395D8064(a2, (unsigned int *)&v242, 0);
            v149 = v110[1].i16[0];
            *((_BYTE *)v140 + 26) = v110[1].i8[2];
            *((_WORD *)v140 + 12) = v149;
            if (*((_BYTE *)v140 + 80))
            {
              if (*a7)
              {
                v150 = v140[7];
                v151 = v252;
                if (v252 < v253)
                {
                  *(_QWORD *)v252 = v150;
                  v152 = v151 + 8;
                  goto LABEL_302;
                }
                v153 = v251;
                v154 = v252 - v251;
                v155 = (v252 - v251) >> 3;
                v156 = v155 + 1;
                if ((unint64_t)(v155 + 1) >> 61)
                  sub_2394189F8();
                v157 = v253 - v251;
                if ((v253 - v251) >> 2 > v156)
                  v156 = v157 >> 2;
                if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8)
                  v158 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v158 = v156;
                if (v158)
                {
                  v210 = v252 - v251;
                  v211 = v140[7];
                  v232 = (v252 - v251) >> 3;
                  if (v158 >> 61)
                    sub_239418A80();
                  v159 = v158;
                  v160 = (char *)operator new(8 * v158);
                  v155 = v232;
                  v158 = v159;
                  v154 = v210;
                  v150 = v211;
                }
                else
                {
                  v160 = 0;
                }
                v161 = &v160[8 * v155];
                *(_QWORD *)v161 = v150;
                v162 = v161 + 8;
                if (v151 == v153)
                {
                  v153 = v151;
                }
                else
                {
                  v163 = v151 - 8 - v153;
                  if (v163 < 0x58)
                    goto LABEL_379;
                  if ((unint64_t)(v151 - &v160[v154]) < 0x20)
                    goto LABEL_379;
                  v164 = (v163 >> 3) + 1;
                  v165 = &v160[8 * v155 - 16];
                  v166 = v151 - 16;
                  v167 = v164 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v168 = *(_OWORD *)v166;
                    *((_OWORD *)v165 - 1) = *((_OWORD *)v166 - 1);
                    *(_OWORD *)v165 = v168;
                    v165 -= 32;
                    v166 -= 32;
                    v167 -= 4;
                  }
                  while (v167);
                  v161 -= 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
                  v151 -= 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v164 != (v164 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_379:
                    do
                    {
                      v169 = *((_QWORD *)v151 - 1);
                      v151 -= 8;
                      *((_QWORD *)v161 - 1) = v169;
                      v161 -= 8;
                    }
                    while (v151 != v153);
                    v153 = v251;
                  }
                }
                v251 = v161;
                v252 = v162;
                v253 = &v160[8 * v158];
                if (v153)
                {
                  v152 = v162;
                  operator delete(v153);
LABEL_302:
                  v162 = v152;
                }
                v252 = v162;
                v170 = v255;
                if (v255 < v256)
                {
                  *(_DWORD *)v255 = v106;
                  v171 = v170 + 4;
                  goto LABEL_324;
                }
                v172 = v254;
                v173 = v255 - v254;
                v174 = (v255 - v254) >> 2;
                v175 = v174 + 1;
                if ((unint64_t)(v174 + 1) >> 62)
                  sub_2394189F8();
                v176 = v256 - v254;
                if ((v256 - v254) >> 1 > v175)
                  v175 = v176 >> 1;
                if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL)
                  v177 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v177 = v175;
                if (v177)
                {
                  v212 = v255 - v254;
                  v233 = (v255 - v254) >> 2;
                  if (v177 >> 62)
                    sub_239418A80();
                  v178 = v177;
                  v179 = (char *)operator new(4 * v177);
                  v174 = v233;
                  v177 = v178;
                  v173 = v212;
                }
                else
                {
                  v179 = 0;
                }
                v180 = &v179[4 * v174];
                *(_DWORD *)v180 = v106;
                v181 = v180 + 4;
                if (v170 != v172)
                {
                  v182 = v170 - 4 - v172;
                  if (v182 < 0x2C)
                    goto LABEL_380;
                  if ((unint64_t)(v170 - &v179[v173]) < 0x20)
                    goto LABEL_380;
                  v183 = (v182 >> 2) + 1;
                  v184 = &v179[4 * v174 - 16];
                  v185 = v170 - 16;
                  v186 = v183 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v187 = *(_OWORD *)v185;
                    *((_OWORD *)v184 - 1) = *((_OWORD *)v185 - 1);
                    *(_OWORD *)v184 = v187;
                    v184 -= 32;
                    v185 -= 32;
                    v186 -= 8;
                  }
                  while (v186);
                  v180 -= 4 * (v183 & 0x7FFFFFFFFFFFFFF8);
                  v170 -= 4 * (v183 & 0x7FFFFFFFFFFFFFF8);
                  if (v183 != (v183 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_380:
                    do
                    {
                      v188 = *((_DWORD *)v170 - 1);
                      v170 -= 4;
                      *((_DWORD *)v180 - 1) = v188;
                      v180 -= 4;
                    }
                    while (v170 != v172);
                  }
                }
                v254 = v180;
                v255 = v181;
                v256 = &v179[4 * v177];
                if (v172)
                {
                  v171 = v181;
                  operator delete(v172);
LABEL_324:
                  v181 = v171;
                }
                v255 = v181;
              }
            }
          }
          if ((v229 & 1) == 0)
          {
            v189 = v227[2].f32[1];
            if (v189 <= 0.0)
            {
              v190 = 1;
              if (v189 != 0.0)
              {
                v191 = v189 >= 0.0 ? v189 : 0.0 - v189;
                if (v191 > 0.00000001)
                  v190 = 0;
              }
            }
            else
            {
              v190 = 2;
            }
            v192 = (void **)*v221;
            v193 = v227[1].f32[1];
            v194 = v227[1].i16[0];
            v195 = v227[1].u8[2];
            v242 = (void *)v131;
            v243 = v192;
            v244 = vcvtq_f64_f32(*v227);
            LODWORD(v245) = v108;
            *((double *)&v245 + 1) = v193;
            WORD1(v246[0]) = v195;
            LOWORD(v246[0]) = v194;
            BYTE4(v246[0]) = v190;
            sub_2395D8064(a2, (unsigned int *)&v242, 0);
            v196 = v227[1].i16[0];
            *((_BYTE *)v140 + 26) = v227[1].i8[2];
            *((_WORD *)v140 + 12) = v196;
          }
          sub_239CA4F38((uint64_t)v234, v106, v106 | ((unint64_t)v131 << 32));
          v89 = (_QWORD *)v224;
          sub_239CA4F38(v224, v108, (v131 << 32) | v108);
          goto LABEL_179;
        }
        if (v124.u32[0] < 2uLL)
        {
          v128 = *(_QWORD *)&v123 - 1;
          while (1)
          {
            v130 = v127[1];
            if (v130 == v108)
            {
              if (*((_DWORD *)v127 + 4) == (_DWORD)v108)
                goto LABEL_287;
            }
            else if ((v130 & v128) != v125)
            {
              goto LABEL_238;
            }
            v127 = (uint64_t *)*v127;
            if (!v127)
              goto LABEL_238;
          }
        }
        while (2)
        {
          v129 = v127[1];
          if (v129 != v108)
          {
            if (v129 >= *(_QWORD *)&v123)
              v129 %= *(_QWORD *)&v123;
            if (v129 != v125)
              goto LABEL_238;
            goto LABEL_228;
          }
          if (*((_DWORD *)v127 + 4) != (_DWORD)v108)
          {
LABEL_228:
            v127 = (uint64_t *)*v127;
            if (!v127)
              goto LABEL_238;
            continue;
          }
          break;
        }
LABEL_287:
        if (!v119)
        {
          v131 = *((unsigned int *)v127 + 5);
          goto LABEL_339;
        }
        v131 = *((unsigned int *)v119 + 5);
        if ((_DWORD)v131 == *((_DWORD *)v127 + 5))
        {
LABEL_339:
          v229 = 1;
          goto LABEL_255;
        }
LABEL_178:
        v89 = (_QWORD *)v224;
LABEL_179:
        v105 += 3;
        if (v105 != v225)
          continue;
        break;
      }
      if (v250)
      {
        v105 = v248;
        goto LABEL_342;
      }
LABEL_116:
      v10 = v213;
      v7 = v214;
      v9 = v216;
LABEL_117:
      v74 = v221 + 36;
    }
    while (v221 + 36 != v215);
  }
  v197 = (uint64_t)*a7;
  if (*a7)
  {
    v242 = 0;
    v243 = 0;
    v244.f64[0] = 0.0;
    sub_239483868((uint64_t *)&v251, v197, &v254, (float **)&v242);
    v199 = (unsigned int *)v254;
    v198 = v255;
    v200 = (void **)v242;
    v201 = v243;
    if (v254 != v255 || v242 != v243)
    {
      v202 = (void **)((char *)v242 + 8);
      do
      {
        do
        {
          v203 = v202;
          v248 = v199;
          v204 = sub_2394F126C((uint64_t)v234, v199, (uint64_t)&unk_239EC6E98, &v248);
          v205 = (float64x2_t *)sub_239C6CE88((uint64_t *)a2, a1, *((_DWORD *)v204 + 5));
          v205[1] = vaddq_f64(v205[1], vcvtq_f64_f32((float32x2_t)*(v203 - 1)));
          ++v199;
          v202 = v203 + 1;
        }
        while (v199 != (unsigned int *)v198);
      }
      while (v203 != v201);
      v200 = (void **)v242;
    }
    if (v200)
    {
      v243 = v200;
      operator delete(v200);
    }
  }
  if (v251)
  {
    v252 = v251;
    operator delete(v251);
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  v206 = v257;
  if (v257)
  {
    v207 = v258;
    v208 = v257;
    if (v258 != v257)
    {
      do
      {
        v209 = (void *)*((_QWORD *)v207 - 17);
        if (v209)
        {
          *((_QWORD *)v207 - 16) = v209;
          operator delete(v209);
        }
        v207 -= 36;
      }
      while (v207 != v206);
      v208 = v257;
    }
    v258 = v206;
    operator delete(v208);
  }
}

void sub_239CA1D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;
  void *v52;
  void *v53;

  if (__p)
    operator delete(__p);
  v52 = *(void **)(v50 - 192);
  if (v52)
  {
    *(_QWORD *)(v50 - 184) = v52;
    operator delete(v52);
  }
  v53 = *(void **)(v50 - 168);
  if (v53)
  {
    *(_QWORD *)(v50 - 160) = v53;
    operator delete(v53);
  }
  sub_239CA5220((void **)(v50 - 144));
  _Unwind_Resume(a1);
}

char *sub_239CA1F34(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = (char *)operator new(0x28uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v7 = a1[1];
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime >= v7)
      {
        v7 = a1[1];
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      sub_239418A80();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_58;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_63;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_63:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_58;
    }
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v3) = v13;
  if (*(_QWORD *)v10)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_239CA23A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239CA23BC(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  int v27;
  int v28;
  BOOL v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x8_t v36;
  unsigned int v37;
  unsigned int v38;
  uint8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t **v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  BOOL v59;
  unint64_t v60;
  unsigned int *j;
  uint64_t *v62;
  uint64_t *v63;
  int v64;
  int v65;
  int v66;
  BOOL v68;
  uint64_t *v69;
  uint64_t *v70;
  int v71;
  int v72;
  int v73;
  unint64_t v76;
  unint64_t v77;
  unsigned int *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  void *v87;
  int8x8_t v88;
  uint8x8_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  unint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t **v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  BOOL v108;
  unint64_t v109;
  uint64_t *v110;
  unint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t **v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t **v120;
  uint64_t v121;
  int v122;
  int v123;
  BOOL v125;
  void *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  void *v131;
  BOOL v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t *v138;
  uint64_t *v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  uint64_t *v144;
  uint64_t *v145;
  int v146;
  int v147;
  int v148;
  BOOL v150;
  uint64_t *v151;
  uint64_t *v152;
  int v153;
  int v154;
  int v155;
  BOOL v157;
  unint64_t i;
  uint64_t *v159;
  uint64_t *v160;
  int v161;
  int v162;
  int v163;
  BOOL v165;
  unsigned int v166;
  unint64_t v167;
  unint64_t v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  void *v177;
  int8x8_t v178;
  uint8x8_t v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int *v185;
  uint64_t v186;
  unsigned int *v187;
  uint64_t v188;
  uint64_t **v189;
  uint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t **v194;
  uint64_t *v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  BOOL v201;
  unint64_t v202;
  uint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t **v207;
  uint64_t *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t **v212;
  uint64_t v213;
  int v214;
  int v215;
  BOOL v217;
  void *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  void *v223;
  uint64_t *v224;
  uint64_t *v225;
  int v226;
  int v227;
  int v228;
  BOOL v229;
  BOOL v230;
  unsigned int v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  void *v240;
  unsigned int *v241;
  BOOL v243;
  unsigned int *v244;
  unsigned int *v245;
  uint64_t *v246;
  uint64_t *v247;
  int v248;
  int v249;
  int v250;
  BOOL v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  unsigned int *v257;
  unint64_t v258;
  unsigned int *v259;
  void *v260;
  _QWORD *v261;
  int8x8_t v262;
  uint8x8_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t **v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t **v272;
  uint64_t *v273;
  uint64_t v274;
  int v275;
  int v276;
  int v277;
  BOOL v278;
  unint64_t v280;
  uint64_t v281;
  void *v282;
  int64_t v283;
  int64_t v284;
  uint64_t v285;
  unsigned int *v286;
  uint64_t *v287;
  uint64_t *v288;
  int v289;
  int v290;
  int v291;
  BOOL v292;
  BOOL v293;
  unsigned int *v294;
  uint64_t *v295;
  uint64_t *v296;
  int v297;
  int v298;
  int v299;
  BOOL v301;
  void *v302;
  unsigned int *v303;
  uint64_t v304;
  unsigned int v305;
  unsigned int *v306;
  void **v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t *v314;
  int v315;
  int v316;
  int v317;
  BOOL v318;
  BOOL v319;
  uint64_t *v320;
  uint64_t *v321;
  int v322;
  int v323;
  int v324;
  BOOL v326;
  void *v327;
  int64_t v328;
  _DWORD *v329;
  BOOL v330;
  uint64_t v331;
  _DWORD *v332;
  unsigned int *v333;
  unsigned int v334;
  _QWORD *v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  unsigned int *v341;
  uint64_t v342;
  int64_t v343;
  int8x8_t v344;
  unsigned int *v345;
  unint64_t v346;
  uint8x8_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t **v357;
  uint64_t *v358;
  uint64_t v359;
  int v360;
  int v361;
  int v362;
  BOOL v363;
  BOOL v364;
  void *v365;
  unint64_t v366;
  __int128 *v367;
  _OWORD *v368;
  void *v369;
  _QWORD *v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  void *v375;
  uint64_t v376;
  unint64_t v377;
  unsigned int *v378;
  uint64_t *v379;
  uint64_t *v380;
  int v381;
  int v382;
  int v383;
  uint64_t v384;
  unint64_t v385;
  unsigned int v386;
  unint64_t v387;
  unsigned int *v388;
  void *v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  int8x8_t v394;
  uint8x8_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t **v404;
  uint64_t *v405;
  uint64_t v406;
  int v407;
  int v408;
  int v409;
  BOOL v410;
  unint64_t v412;
  void *v413;
  void *v414;
  unsigned int *v415;
  uint64_t *v416;
  uint64_t *v417;
  int v418;
  int v419;
  int v420;
  BOOL v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unsigned int v426;
  unsigned int *v427;
  unsigned int *v428;
  unint64_t v429;
  unsigned int *v430;
  void *v431;
  _QWORD *v432;
  __int128 v433;
  __int128 v434;
  int8x8_t v435;
  uint8x8_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t **v439;
  uint64_t *v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t **v445;
  uint64_t *v446;
  uint64_t v447;
  int v448;
  int v449;
  int v450;
  BOOL v451;
  BOOL v452;
  unint64_t v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  _OWORD *v457;
  _OWORD *v458;
  uint64_t v460;
  __int128 *v461;
  uint64_t v462;
  uint64_t v463;
  __int128 *v464;
  uint64_t v465;
  int64_t v466;
  _QWORD *v467;
  unint64_t v468;
  unsigned int v469;
  uint64_t v470;
  __int128 v471;
  uint64_t v472;
  uint64_t v473;
  __int128 v474;
  __int128 v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t v478;
  unsigned int *v479;
  unsigned int v480;
  uint64_t v481;
  __int128 v482;
  uint64_t v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  int64_t v488;
  uint64_t v489;
  unsigned int v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;

void sub_239CA4E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, uint64_t a20,uint64_t a21,__int128 a22)
{
  if ((_QWORD)a18)
    operator delete((void *)a18);
  _Unwind_Resume(exception_object);
}

void **sub_239CA4ED4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 48;
        sub_239916980((uint64_t)(v3 - 32));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_239CA4F38(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v23)
  {
    *v10 = *v23;
LABEL_59:
    *v23 = v10;
    goto LABEL_60;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v6) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_239CA520C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void **sub_239CA5220(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 17);
        if (v5)
        {
          *((_QWORD *)v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 144;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_239CA5290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  BOOL v21;
  unsigned int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  int v35;
  int v36;
  BOOL v37;
  BOOL v38;
  unsigned int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *v48;
  uint64_t *v49;
  uint64_t *v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void *v63;
  unsigned int v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  __int128 *v72;
  __int128 v73;
  __int128 v74;
  void *v75;
  uint64_t *v76;
  uint64_t *v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  void *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;

  v8 = sub_2395D7BEC(*(_QWORD *)a4, *(_DWORD *)a2);
  v9 = sub_2395D7BEC(*(_QWORD *)a4, *(_DWORD *)a1);
  v10 = *((_DWORD *)v8 + 49);
  v11 = **(_DWORD **)(a4 + 8);
  v12 = *((_DWORD *)v9 + 49);
  v13 = v10 != v11 || v12 == v11;
  if (v13
    && (v10 != v11 ? (v14 = v12 == v11) : (v14 = 0),
        v14
     || *(_DWORD *)(a2 + 36) + *(_DWORD *)(a2 + 32) <= (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32))))
  {
    v32 = sub_2395D7BEC(*(_QWORD *)a4, *(_DWORD *)a3);
    v33 = sub_2395D7BEC(*(_QWORD *)a4, *(_DWORD *)a2);
    v34 = *((_DWORD *)v32 + 49);
    v35 = **(_DWORD **)(a4 + 8);
    v36 = *((_DWORD *)v33 + 49);
    v37 = v34 != v35 || v36 == v35;
    if (!v37
      || (v34 != v35 ? (v38 = v36 == v35) : (v38 = 0),
          !v38
       && *(_DWORD *)(a3 + 36) + *(_DWORD *)(a3 + 32) > (*(_DWORD *)(a2 + 36) + *(_DWORD *)(a2 + 32))))
    {
      v39 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v39;
      v40 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v41 = *(_QWORD *)(a2 + 24);
      v42 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 24) = 0;
      v111 = *(_OWORD *)(a2 + 40);
      v116 = *(_OWORD *)(a2 + 56);
      v121 = *(_OWORD *)(a2 + 72);
      v96 = *(_OWORD *)(a2 + 88);
      v101 = *(_OWORD *)(a2 + 104);
      v106 = *(_OWORD *)(a2 + 120);
      v43 = *(_DWORD *)(a2 + 136);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
      v44 = *(_OWORD *)(a3 + 40);
      v45 = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(a2 + 72) = v45;
      *(_OWORD *)(a2 + 40) = v44;
      v46 = *(_OWORD *)(a3 + 88);
      v47 = *(_OWORD *)(a3 + 120);
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
      *(_OWORD *)(a2 + 120) = v47;
      *(_OWORD *)(a2 + 88) = v46;
      *(_DWORD *)(a2 + 136) = *(_DWORD *)(a3 + 136);
      v48 = *(void **)(a3 + 8);
      if (v48)
      {
        *(_QWORD *)(a3 + 16) = v48;
        v91 = v40;
        operator delete(v48);
        v40 = v91;
      }
      *(_OWORD *)(a3 + 8) = v40;
      *(_QWORD *)(a3 + 24) = v41;
      *(_QWORD *)(a3 + 32) = v42;
      *(_OWORD *)(a3 + 40) = v111;
      *(_OWORD *)(a3 + 56) = v116;
      *(_OWORD *)(a3 + 72) = v121;
      *(_OWORD *)(a3 + 88) = v96;
      *(_OWORD *)(a3 + 104) = v101;
      *(_OWORD *)(a3 + 120) = v106;
      *(_DWORD *)(a3 + 136) = v43;
      v49 = sub_2395D7BEC(*(_QWORD *)a4, *(_DWORD *)a2);
      v50 = sub_2395D7BEC(*(_QWORD *)a4, *(_DWORD *)a1);
      v51 = *((_DWORD *)v49 + 49);
      v52 = **(_DWORD **)(a4 + 8);
      v53 = *((_DWORD *)v50 + 49);
      if (v51 == v52 && v53 != v52
        || (v51 == v52 || v53 != v52)
        && *(_DWORD *)(a2 + 36) + *(_DWORD *)(a2 + 32) > (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32)))
      {
        v54 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v54;
        v55 = *(_OWORD *)(a1 + 8);
        v56 = *(_QWORD *)(a1 + 24);
        v57 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v112 = *(_OWORD *)(a1 + 40);
        v117 = *(_OWORD *)(a1 + 56);
        v122 = *(_OWORD *)(a1 + 72);
        v97 = *(_OWORD *)(a1 + 88);
        v102 = *(_OWORD *)(a1 + 104);
        v107 = *(_OWORD *)(a1 + 120);
        v58 = *(_DWORD *)(a1 + 136);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v59 = *(_OWORD *)(a2 + 40);
        v60 = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 56) = v60;
        *(_OWORD *)(a1 + 40) = v59;
        v61 = *(_OWORD *)(a2 + 88);
        v62 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = v62;
        *(_OWORD *)(a1 + 88) = v61;
        *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
        v63 = *(void **)(a2 + 8);
        if (v63)
        {
          *(_QWORD *)(a2 + 16) = v63;
          v92 = v55;
          operator delete(v63);
          v55 = v92;
        }
        *(_OWORD *)(a2 + 8) = v55;
        *(_QWORD *)(a2 + 24) = v56;
        *(_QWORD *)(a2 + 32) = v57;
        *(_OWORD *)(a2 + 40) = v112;
        *(_OWORD *)(a2 + 56) = v117;
        *(_OWORD *)(a2 + 72) = v122;
        *(_OWORD *)(a2 + 88) = v97;
        *(_OWORD *)(a2 + 104) = v102;
        *(_OWORD *)(a2 + 120) = v107;
        *(_DWORD *)(a2 + 136) = v58;
      }
    }
  }
  else
  {
    v15 = sub_2395D7BEC(*(_QWORD *)a4, *(_DWORD *)a3);
    v16 = sub_2395D7BEC(*(_QWORD *)a4, *(_DWORD *)a2);
    v17 = *((_DWORD *)v15 + 49);
    v18 = **(_DWORD **)(a4 + 8);
    v19 = *((_DWORD *)v16 + 49);
    v20 = v17 != v18 || v19 == v18;
    if (!v20
      || (v17 != v18 ? (v21 = v19 == v18) : (v21 = 0),
          !v21
       && *(_DWORD *)(a3 + 36) + *(_DWORD *)(a3 + 32) > (*(_DWORD *)(a2 + 36) + *(_DWORD *)(a2 + 32))))
    {
      v22 = *(_DWORD *)a1;
      *(_DWORD *)a1 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v22;
      v23 = *(_OWORD *)(a1 + 8);
      v24 = *(_QWORD *)(a1 + 24);
      v25 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v110 = *(_OWORD *)(a1 + 40);
      v115 = *(_OWORD *)(a1 + 56);
      v120 = *(_OWORD *)(a1 + 72);
      v95 = *(_OWORD *)(a1 + 88);
      v100 = *(_OWORD *)(a1 + 104);
      v105 = *(_OWORD *)(a1 + 120);
      v26 = *(_DWORD *)(a1 + 136);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 32);
      v27 = *(_OWORD *)(a3 + 40);
      v28 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a1 + 56) = v28;
      *(_OWORD *)(a1 + 40) = v27;
      v29 = *(_OWORD *)(a3 + 88);
      v30 = *(_OWORD *)(a3 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 120);
      *(_OWORD *)(a1 + 104) = v30;
      *(_OWORD *)(a1 + 88) = v29;
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a3 + 136);
      v31 = *(void **)(a3 + 8);
      if (v31)
      {
        *(_QWORD *)(a3 + 16) = v31;
        v90 = v23;
        operator delete(v31);
        v23 = v90;
      }
      *(_OWORD *)(a3 + 8) = v23;
      *(_QWORD *)(a3 + 24) = v24;
      *(_QWORD *)(a3 + 32) = v25;
      *(_OWORD *)(a3 + 40) = v110;
      *(_OWORD *)(a3 + 56) = v115;
      *(_OWORD *)(a3 + 72) = v120;
      *(_OWORD *)(a3 + 88) = v95;
      *(_OWORD *)(a3 + 104) = v100;
      *(_OWORD *)(a3 + 120) = v105;
LABEL_54:
      *(_DWORD *)(a3 + 136) = v26;
      return;
    }
    v64 = *(_DWORD *)a1;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v64;
    v65 = *(_OWORD *)(a1 + 8);
    v66 = *(_QWORD *)(a1 + 24);
    v67 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v113 = *(_OWORD *)(a1 + 40);
    v118 = *(_OWORD *)(a1 + 56);
    v123 = *(_OWORD *)(a1 + 72);
    v98 = *(_OWORD *)(a1 + 88);
    v103 = *(_OWORD *)(a1 + 104);
    v108 = *(_OWORD *)(a1 + 120);
    v68 = *(_DWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v69 = (__int128 *)(a2 + 40);
    v70 = *(_OWORD *)(a2 + 40);
    v71 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v71;
    *(_OWORD *)(a1 + 40) = v70;
    v72 = (__int128 *)(a2 + 88);
    v73 = *(_OWORD *)(a2 + 88);
    v74 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v74;
    *(_OWORD *)(a1 + 88) = v73;
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    v75 = *(void **)(a2 + 8);
    if (v75)
    {
      *(_QWORD *)(a2 + 16) = v75;
      v93 = v65;
      operator delete(v75);
      v65 = v93;
    }
    *(_OWORD *)(a2 + 8) = v65;
    *(_QWORD *)(a2 + 24) = v66;
    *(_QWORD *)(a2 + 32) = v67;
    *v69 = v113;
    *(_OWORD *)(a2 + 56) = v118;
    *(_OWORD *)(a2 + 72) = v123;
    *v72 = v98;
    *(_OWORD *)(a2 + 104) = v103;
    *(_OWORD *)(a2 + 120) = v108;
    *(_DWORD *)(a2 + 136) = v68;
    v76 = sub_2395D7BEC(*(_QWORD *)a4, *(_DWORD *)a3);
    v77 = sub_2395D7BEC(*(_QWORD *)a4, *(_DWORD *)a2);
    v78 = *((_DWORD *)v76 + 49);
    v79 = **(_DWORD **)(a4 + 8);
    v80 = *((_DWORD *)v77 + 49);
    if (v78 == v79 && v80 != v79
      || (v78 == v79 || v80 != v79)
      && *(_DWORD *)(a3 + 36) + *(_DWORD *)(a3 + 32) > (*(_DWORD *)(a2 + 36) + *(_DWORD *)(a2 + 32)))
    {
      v81 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v81;
      v82 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v83 = *(_QWORD *)(a2 + 24);
      v84 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 24) = 0;
      v114 = *v69;
      v119 = *(_OWORD *)(a2 + 56);
      v124 = *(_OWORD *)(a2 + 72);
      v99 = *v72;
      v104 = *(_OWORD *)(a2 + 104);
      v109 = *(_OWORD *)(a2 + 120);
      v26 = *(_DWORD *)(a2 + 136);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
      v85 = *(_OWORD *)(a3 + 40);
      v86 = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(a2 + 72) = v86;
      *v69 = v85;
      v87 = *(_OWORD *)(a3 + 88);
      v88 = *(_OWORD *)(a3 + 120);
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
      *(_OWORD *)(a2 + 120) = v88;
      *v72 = v87;
      *(_DWORD *)(a2 + 136) = *(_DWORD *)(a3 + 136);
      v89 = *(void **)(a3 + 8);
      if (v89)
      {
        *(_QWORD *)(a3 + 16) = v89;
        v94 = v82;
        operator delete(v89);
        v82 = v94;
      }
      *(_OWORD *)(a3 + 8) = v82;
      *(_QWORD *)(a3 + 24) = v83;
      *(_QWORD *)(a3 + 32) = v84;
      *(_OWORD *)(a3 + 40) = v114;
      *(_OWORD *)(a3 + 56) = v119;
      *(_OWORD *)(a3 + 72) = v124;
      *(_OWORD *)(a3 + 88) = v99;
      *(_OWORD *)(a3 + 104) = v104;
      *(_OWORD *)(a3 + 120) = v109;
      goto LABEL_54;
    }
  }
}

void sub_239CA5978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  uint64_t *v42;
  uint64_t *v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  sub_239CA5290(a1, a2, a3, a5);
  v10 = sub_2395D7BEC(*(_QWORD *)a5, *(_DWORD *)a4);
  v11 = sub_2395D7BEC(*(_QWORD *)a5, *(_DWORD *)a3);
  v12 = *((_DWORD *)v10 + 49);
  v13 = **(_DWORD **)(a5 + 8);
  v14 = *((_DWORD *)v11 + 49);
  v15 = v12 != v13 || v14 == v13;
  if (!v15
    || (v12 != v13 ? (v16 = v14 == v13) : (v16 = 0),
        !v16
     && *(_DWORD *)(a4 + 36) + *(_DWORD *)(a4 + 32) > (*(_DWORD *)(a3 + 36) + *(_DWORD *)(a3 + 32))))
  {
    v17 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v17;
    v18 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v19 = *(_QWORD *)(a3 + 24);
    v20 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 24) = 0;
    v69 = *(_OWORD *)(a3 + 40);
    v72 = *(_OWORD *)(a3 + 56);
    v75 = *(_OWORD *)(a3 + 72);
    v60 = *(_OWORD *)(a3 + 88);
    v63 = *(_OWORD *)(a3 + 104);
    v66 = *(_OWORD *)(a3 + 120);
    v21 = *(_DWORD *)(a3 + 136);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
    v22 = *(_OWORD *)(a4 + 40);
    v23 = *(_OWORD *)(a4 + 72);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(a4 + 56);
    *(_OWORD *)(a3 + 72) = v23;
    *(_OWORD *)(a3 + 40) = v22;
    v24 = *(_OWORD *)(a4 + 88);
    v25 = *(_OWORD *)(a4 + 120);
    *(_OWORD *)(a3 + 104) = *(_OWORD *)(a4 + 104);
    *(_OWORD *)(a3 + 120) = v25;
    *(_OWORD *)(a3 + 88) = v24;
    *(_DWORD *)(a3 + 136) = *(_DWORD *)(a4 + 136);
    v26 = *(void **)(a4 + 8);
    if (v26)
    {
      *(_QWORD *)(a4 + 16) = v26;
      v57 = v18;
      operator delete(v26);
      v18 = v57;
    }
    *(_OWORD *)(a4 + 8) = v18;
    *(_QWORD *)(a4 + 24) = v19;
    *(_QWORD *)(a4 + 32) = v20;
    *(_OWORD *)(a4 + 40) = v69;
    *(_OWORD *)(a4 + 56) = v72;
    *(_OWORD *)(a4 + 72) = v75;
    *(_OWORD *)(a4 + 88) = v60;
    *(_OWORD *)(a4 + 104) = v63;
    *(_OWORD *)(a4 + 120) = v66;
    *(_DWORD *)(a4 + 136) = v21;
    v27 = sub_2395D7BEC(*(_QWORD *)a5, *(_DWORD *)a3);
    v28 = sub_2395D7BEC(*(_QWORD *)a5, *(_DWORD *)a2);
    v29 = *((_DWORD *)v27 + 49);
    v30 = **(_DWORD **)(a5 + 8);
    v31 = *((_DWORD *)v28 + 49);
    if (v29 == v30 && v31 != v30
      || (v29 == v30 || v31 != v30)
      && *(_DWORD *)(a3 + 36) + *(_DWORD *)(a3 + 32) > (*(_DWORD *)(a2 + 36) + *(_DWORD *)(a2 + 32)))
    {
      v32 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v32;
      v33 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v34 = *(_QWORD *)(a2 + 24);
      v35 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 24) = 0;
      v70 = *(_OWORD *)(a2 + 40);
      v73 = *(_OWORD *)(a2 + 56);
      v76 = *(_OWORD *)(a2 + 72);
      v61 = *(_OWORD *)(a2 + 88);
      v64 = *(_OWORD *)(a2 + 104);
      v67 = *(_OWORD *)(a2 + 120);
      v36 = *(_DWORD *)(a2 + 136);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
      v37 = *(_OWORD *)(a3 + 40);
      v38 = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(a2 + 72) = v38;
      *(_OWORD *)(a2 + 40) = v37;
      v39 = *(_OWORD *)(a3 + 88);
      v40 = *(_OWORD *)(a3 + 120);
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
      *(_OWORD *)(a2 + 120) = v40;
      *(_OWORD *)(a2 + 88) = v39;
      *(_DWORD *)(a2 + 136) = *(_DWORD *)(a3 + 136);
      v41 = *(void **)(a3 + 8);
      if (v41)
      {
        *(_QWORD *)(a3 + 16) = v41;
        v58 = v33;
        operator delete(v41);
        v33 = v58;
      }
      *(_OWORD *)(a3 + 8) = v33;
      *(_QWORD *)(a3 + 24) = v34;
      *(_QWORD *)(a3 + 32) = v35;
      *(_OWORD *)(a3 + 40) = v70;
      *(_OWORD *)(a3 + 56) = v73;
      *(_OWORD *)(a3 + 72) = v76;
      *(_OWORD *)(a3 + 88) = v61;
      *(_OWORD *)(a3 + 104) = v64;
      *(_OWORD *)(a3 + 120) = v67;
      *(_DWORD *)(a3 + 136) = v36;
      v42 = sub_2395D7BEC(*(_QWORD *)a5, *(_DWORD *)a2);
      v43 = sub_2395D7BEC(*(_QWORD *)a5, *(_DWORD *)a1);
      v44 = *((_DWORD *)v42 + 49);
      v45 = **(_DWORD **)(a5 + 8);
      v46 = *((_DWORD *)v43 + 49);
      if (v44 == v45 && v46 != v45
        || (v44 == v45 || v46 != v45)
        && *(_DWORD *)(a2 + 36) + *(_DWORD *)(a2 + 32) > (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32)))
      {
        v47 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v47;
        v48 = *(_OWORD *)(a1 + 8);
        v49 = *(_QWORD *)(a1 + 24);
        v50 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v71 = *(_OWORD *)(a1 + 40);
        v74 = *(_OWORD *)(a1 + 56);
        v77 = *(_OWORD *)(a1 + 72);
        v62 = *(_OWORD *)(a1 + 88);
        v65 = *(_OWORD *)(a1 + 104);
        v68 = *(_OWORD *)(a1 + 120);
        v51 = *(_DWORD *)(a1 + 136);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v52 = *(_OWORD *)(a2 + 40);
        v53 = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 56) = v53;
        *(_OWORD *)(a1 + 40) = v52;
        v54 = *(_OWORD *)(a2 + 88);
        v55 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = v55;
        *(_OWORD *)(a1 + 88) = v54;
        *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
        v56 = *(void **)(a2 + 8);
        if (v56)
        {
          *(_QWORD *)(a2 + 16) = v56;
          v59 = v48;
          operator delete(v56);
          v48 = v59;
        }
        *(_OWORD *)(a2 + 8) = v48;
        *(_QWORD *)(a2 + 24) = v49;
        *(_QWORD *)(a2 + 32) = v50;
        *(_OWORD *)(a2 + 40) = v71;
        *(_OWORD *)(a2 + 56) = v74;
        *(_OWORD *)(a2 + 72) = v77;
        *(_OWORD *)(a2 + 88) = v62;
        *(_OWORD *)(a2 + 104) = v65;
        *(_OWORD *)(a2 + 120) = v68;
        *(_DWORD *)(a2 + 136) = v51;
      }
    }
  }
}

void sub_239CA5DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  uint64_t *v29;
  uint64_t *v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *v59;
  uint64_t *v60;
  uint64_t *v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  void *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;

  sub_239CA5978(a1, a2, a3, a4, a6);
  v12 = sub_2395D7BEC(*(_QWORD *)a6, *(_DWORD *)a5);
  v13 = sub_2395D7BEC(*(_QWORD *)a6, *(_DWORD *)a4);
  v14 = *((_DWORD *)v12 + 49);
  v15 = **(_DWORD **)(a6 + 8);
  v16 = *((_DWORD *)v13 + 49);
  v17 = v14 != v15 || v16 == v15;
  if (!v17
    || (v14 != v15 ? (v18 = v16 == v15) : (v18 = 0),
        !v18
     && *(_DWORD *)(a5 + 36) + *(_DWORD *)(a5 + 32) > (*(_DWORD *)(a4 + 36) + *(_DWORD *)(a4 + 32))))
  {
    v19 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v19;
    v20 = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v21 = *(_QWORD *)(a4 + 24);
    v22 = *(_QWORD *)(a4 + 32);
    *(_QWORD *)(a4 + 24) = 0;
    v91 = *(_OWORD *)(a4 + 40);
    v95 = *(_OWORD *)(a4 + 56);
    v99 = *(_OWORD *)(a4 + 72);
    v79 = *(_OWORD *)(a4 + 88);
    v83 = *(_OWORD *)(a4 + 104);
    v87 = *(_OWORD *)(a4 + 120);
    v23 = *(_DWORD *)(a4 + 136);
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 8);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(a5 + 32);
    v24 = *(_OWORD *)(a5 + 40);
    v25 = *(_OWORD *)(a5 + 72);
    *(_OWORD *)(a4 + 56) = *(_OWORD *)(a5 + 56);
    *(_OWORD *)(a4 + 72) = v25;
    *(_OWORD *)(a4 + 40) = v24;
    v26 = *(_OWORD *)(a5 + 88);
    v27 = *(_OWORD *)(a5 + 120);
    *(_OWORD *)(a4 + 104) = *(_OWORD *)(a5 + 104);
    *(_OWORD *)(a4 + 120) = v27;
    *(_OWORD *)(a4 + 88) = v26;
    *(_DWORD *)(a4 + 136) = *(_DWORD *)(a5 + 136);
    v28 = *(void **)(a5 + 8);
    if (v28)
    {
      *(_QWORD *)(a5 + 16) = v28;
      v75 = v20;
      operator delete(v28);
      v20 = v75;
    }
    *(_OWORD *)(a5 + 8) = v20;
    *(_QWORD *)(a5 + 24) = v21;
    *(_QWORD *)(a5 + 32) = v22;
    *(_OWORD *)(a5 + 40) = v91;
    *(_OWORD *)(a5 + 56) = v95;
    *(_OWORD *)(a5 + 72) = v99;
    *(_OWORD *)(a5 + 88) = v79;
    *(_OWORD *)(a5 + 104) = v83;
    *(_OWORD *)(a5 + 120) = v87;
    *(_DWORD *)(a5 + 136) = v23;
    v29 = sub_2395D7BEC(*(_QWORD *)a6, *(_DWORD *)a4);
    v30 = sub_2395D7BEC(*(_QWORD *)a6, *(_DWORD *)a3);
    v31 = *((_DWORD *)v29 + 49);
    v32 = **(_DWORD **)(a6 + 8);
    v33 = *((_DWORD *)v30 + 49);
    if (v31 == v32 && v33 != v32
      || (v31 == v32 || v33 != v32)
      && *(_DWORD *)(a4 + 36) + *(_DWORD *)(a4 + 32) > (*(_DWORD *)(a3 + 36) + *(_DWORD *)(a3 + 32)))
    {
      v34 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v34;
      v35 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v36 = *(_QWORD *)(a3 + 24);
      v37 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 24) = 0;
      v92 = *(_OWORD *)(a3 + 40);
      v96 = *(_OWORD *)(a3 + 56);
      v100 = *(_OWORD *)(a3 + 72);
      v80 = *(_OWORD *)(a3 + 88);
      v84 = *(_OWORD *)(a3 + 104);
      v88 = *(_OWORD *)(a3 + 120);
      v38 = *(_DWORD *)(a3 + 136);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
      v39 = *(_OWORD *)(a4 + 40);
      v40 = *(_OWORD *)(a4 + 72);
      *(_OWORD *)(a3 + 56) = *(_OWORD *)(a4 + 56);
      *(_OWORD *)(a3 + 72) = v40;
      *(_OWORD *)(a3 + 40) = v39;
      v41 = *(_OWORD *)(a4 + 88);
      v42 = *(_OWORD *)(a4 + 120);
      *(_OWORD *)(a3 + 104) = *(_OWORD *)(a4 + 104);
      *(_OWORD *)(a3 + 120) = v42;
      *(_OWORD *)(a3 + 88) = v41;
      *(_DWORD *)(a3 + 136) = *(_DWORD *)(a4 + 136);
      v43 = *(void **)(a4 + 8);
      if (v43)
      {
        *(_QWORD *)(a4 + 16) = v43;
        v76 = v35;
        v44 = v36;
        operator delete(v43);
        v36 = v44;
        v35 = v76;
      }
      *(_OWORD *)(a4 + 8) = v35;
      *(_QWORD *)(a4 + 24) = v36;
      *(_QWORD *)(a4 + 32) = v37;
      *(_OWORD *)(a4 + 40) = v92;
      *(_OWORD *)(a4 + 56) = v96;
      *(_OWORD *)(a4 + 72) = v100;
      *(_OWORD *)(a4 + 88) = v80;
      *(_OWORD *)(a4 + 104) = v84;
      *(_OWORD *)(a4 + 120) = v88;
      *(_DWORD *)(a4 + 136) = v38;
      v45 = sub_2395D7BEC(*(_QWORD *)a6, *(_DWORD *)a3);
      v46 = sub_2395D7BEC(*(_QWORD *)a6, *(_DWORD *)a2);
      v47 = *((_DWORD *)v45 + 49);
      v48 = **(_DWORD **)(a6 + 8);
      v49 = *((_DWORD *)v46 + 49);
      if (v47 == v48 && v49 != v48
        || (v47 == v48 || v49 != v48)
        && *(_DWORD *)(a3 + 36) + *(_DWORD *)(a3 + 32) > (*(_DWORD *)(a2 + 36) + *(_DWORD *)(a2 + 32)))
      {
        v50 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v50;
        v51 = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        v52 = *(_QWORD *)(a2 + 24);
        v53 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 24) = 0;
        v93 = *(_OWORD *)(a2 + 40);
        v97 = *(_OWORD *)(a2 + 56);
        v101 = *(_OWORD *)(a2 + 72);
        v81 = *(_OWORD *)(a2 + 88);
        v85 = *(_OWORD *)(a2 + 104);
        v89 = *(_OWORD *)(a2 + 120);
        v54 = *(_DWORD *)(a2 + 136);
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
        v55 = *(_OWORD *)(a3 + 40);
        v56 = *(_OWORD *)(a3 + 72);
        *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
        *(_OWORD *)(a2 + 72) = v56;
        *(_OWORD *)(a2 + 40) = v55;
        v57 = *(_OWORD *)(a3 + 88);
        v58 = *(_OWORD *)(a3 + 120);
        *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
        *(_OWORD *)(a2 + 120) = v58;
        *(_OWORD *)(a2 + 88) = v57;
        *(_DWORD *)(a2 + 136) = *(_DWORD *)(a3 + 136);
        v59 = *(void **)(a3 + 8);
        if (v59)
        {
          *(_QWORD *)(a3 + 16) = v59;
          v77 = v51;
          operator delete(v59);
          v51 = v77;
        }
        *(_OWORD *)(a3 + 8) = v51;
        *(_QWORD *)(a3 + 24) = v52;
        *(_QWORD *)(a3 + 32) = v53;
        *(_OWORD *)(a3 + 40) = v93;
        *(_OWORD *)(a3 + 56) = v97;
        *(_OWORD *)(a3 + 72) = v101;
        *(_OWORD *)(a3 + 88) = v81;
        *(_OWORD *)(a3 + 104) = v85;
        *(_OWORD *)(a3 + 120) = v89;
        *(_DWORD *)(a3 + 136) = v54;
        v60 = sub_2395D7BEC(*(_QWORD *)a6, *(_DWORD *)a2);
        v61 = sub_2395D7BEC(*(_QWORD *)a6, *(_DWORD *)a1);
        v62 = *((_DWORD *)v60 + 49);
        v63 = **(_DWORD **)(a6 + 8);
        v64 = *((_DWORD *)v61 + 49);
        if (v62 == v63 && v64 != v63
          || (v62 == v63 || v64 != v63)
          && *(_DWORD *)(a2 + 36) + *(_DWORD *)(a2 + 32) > (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32)))
        {
          v65 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v65;
          v66 = *(_OWORD *)(a1 + 8);
          v67 = *(_QWORD *)(a1 + 24);
          v68 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v94 = *(_OWORD *)(a1 + 40);
          v98 = *(_OWORD *)(a1 + 56);
          v102 = *(_OWORD *)(a1 + 72);
          v82 = *(_OWORD *)(a1 + 88);
          v86 = *(_OWORD *)(a1 + 104);
          v90 = *(_OWORD *)(a1 + 120);
          v69 = *(_DWORD *)(a1 + 136);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 8) = 0;
          *(_QWORD *)(a2 + 16) = 0;
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v70 = *(_OWORD *)(a2 + 40);
          v71 = *(_OWORD *)(a2 + 56);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
          *(_OWORD *)(a1 + 56) = v71;
          *(_OWORD *)(a1 + 40) = v70;
          v72 = *(_OWORD *)(a2 + 88);
          v73 = *(_OWORD *)(a2 + 104);
          *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
          *(_OWORD *)(a1 + 104) = v73;
          *(_OWORD *)(a1 + 88) = v72;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
          v74 = *(void **)(a2 + 8);
          if (v74)
          {
            *(_QWORD *)(a2 + 16) = v74;
            v78 = v66;
            operator delete(v74);
            v66 = v78;
          }
          *(_OWORD *)(a2 + 8) = v66;
          *(_QWORD *)(a2 + 24) = v67;
          *(_QWORD *)(a2 + 32) = v68;
          *(_OWORD *)(a2 + 40) = v94;
          *(_OWORD *)(a2 + 56) = v98;
          *(_OWORD *)(a2 + 72) = v102;
          *(_OWORD *)(a2 + 88) = v82;
          *(_OWORD *)(a2 + 104) = v86;
          *(_OWORD *)(a2 + 120) = v90;
          *(_DWORD *)(a2 + 136) = v69;
        }
      }
    }
  }
}

BOOL sub_239CA6370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  int v31;
  int v32;
  int v33;
  BOOL v35;
  void *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t *v48;
  uint64_t *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v4 = a2;
  v6 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = sub_2395D7BEC(*(_QWORD *)a3, *(_DWORD *)(a2 - 144));
      v9 = sub_2395D7BEC(*(_QWORD *)a3, *(_DWORD *)a1);
      v10 = *((_DWORD *)v8 + 49);
      v11 = **(_DWORD **)(a3 + 8);
      v12 = *((_DWORD *)v9 + 49);
      if (v10 != v11 || v12 == v11)
      {
        v14 = v10 != v11 && v12 == v11;
        if (v14
          || *(_DWORD *)(v4 - 108) + *(_DWORD *)(v4 - 112) <= (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32)))
        {
          return 1;
        }
      }
      v15 = *(_DWORD *)a1;
      *(_DWORD *)a1 = *(_DWORD *)(v4 - 144);
      *(_DWORD *)(v4 - 144) = v15;
      v16 = *(_OWORD *)(a1 + 8);
      v17 = *(_QWORD *)(a1 + 24);
      v18 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v71 = *(_OWORD *)(a1 + 40);
      v73 = *(_OWORD *)(a1 + 56);
      v75 = *(_OWORD *)(a1 + 72);
      v65 = *(_OWORD *)(a1 + 88);
      v67 = *(_OWORD *)(a1 + 104);
      v69 = *(_OWORD *)(a1 + 120);
      v19 = *(_DWORD *)(a1 + 136);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(v4 - 136);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 136) = 0;
      *(_QWORD *)(v4 - 128) = 0;
      *(_QWORD *)(v4 - 120) = 0;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v4 - 112);
      v20 = *(_OWORD *)(v4 - 104);
      v21 = *(_OWORD *)(v4 - 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(v4 - 72);
      *(_OWORD *)(a1 + 56) = v21;
      *(_OWORD *)(a1 + 40) = v20;
      v22 = *(_OWORD *)(v4 - 56);
      v23 = *(_OWORD *)(v4 - 40);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(v4 - 24);
      *(_OWORD *)(a1 + 104) = v23;
      *(_OWORD *)(a1 + 88) = v22;
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(v4 - 8);
      v24 = *(void **)(v4 - 136);
      if (v24)
      {
        *(_QWORD *)(v4 - 128) = v24;
        v63 = v16;
        operator delete(v24);
        v16 = v63;
      }
      *(_OWORD *)(v4 - 136) = v16;
      *(_QWORD *)(v4 - 120) = v17;
      *(_QWORD *)(v4 - 112) = v18;
      *(_OWORD *)(v4 - 104) = v71;
      *(_OWORD *)(v4 - 88) = v73;
      *(_OWORD *)(v4 - 72) = v75;
      *(_OWORD *)(v4 - 56) = v65;
      *(_OWORD *)(v4 - 40) = v67;
      *(_OWORD *)(v4 - 24) = v69;
      result = 1;
      *(_DWORD *)(v4 - 8) = v19;
      return result;
    case 3uLL:
      sub_239CA5290(a1, a1 + 144, a2 - 144, a3);
      return 1;
    case 4uLL:
      sub_239CA5978(a1, a1 + 144, a1 + 288, a2 - 144, a3);
      return 1;
    case 5uLL:
      sub_239CA5DCC(a1, a1 + 144, a1 + 288, a1 + 432, a2 - 144, a3);
      return 1;
    default:
      v25 = (unsigned int *)(a1 + 288);
      sub_239CA5290(a1, a1 + 144, a1 + 288, a3);
      v26 = a1 + 432;
      if (a1 + 432 == v4)
        return 1;
      v27 = 0;
      v28 = 0;
      v59 = v4;
      break;
  }
  while (1)
  {
    v29 = sub_2395D7BEC(*(_QWORD *)a3, *(_DWORD *)v26);
    v30 = sub_2395D7BEC(*(_QWORD *)a3, *v25);
    v31 = *((_DWORD *)v29 + 49);
    v32 = **(_DWORD **)(a3 + 8);
    v33 = *((_DWORD *)v30 + 49);
    if (v31 != v32 || v33 == v32)
    {
      v35 = v31 != v32 && v33 == v32;
      if (v35 || *(_DWORD *)(v26 + 36) + *(_DWORD *)(v26 + 32) <= v25[9] + v25[8])
        goto LABEL_17;
    }
    v62 = v28;
    v36 = 0;
    v37 = *(_DWORD *)v26;
    v64 = *(_QWORD *)(v26 + 8);
    v61 = *(_OWORD *)(v26 + 16);
    *(_QWORD *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v72 = *(_OWORD *)(v26 + 40);
    v74 = *(_OWORD *)(v26 + 56);
    v76 = *(_OWORD *)(v26 + 72);
    v66 = *(_OWORD *)(v26 + 88);
    v68 = *(_OWORD *)(v26 + 104);
    v70 = *(_OWORD *)(v26 + 120);
    v60 = *(_QWORD *)(v26 + 32);
    v38 = v27;
    v39 = *(_DWORD *)(v26 + 136);
    while (1)
    {
      v40 = a1 + v38;
      *(_DWORD *)(a1 + v38 + 432) = *(_DWORD *)(a1 + v38 + 288);
      v41 = (_QWORD *)(a1 + v38 + 440);
      if (v36)
      {
        *(_QWORD *)(v40 + 448) = v36;
        operator delete(v36);
        *v41 = 0;
        *(_QWORD *)(a1 + v38 + 448) = 0;
        *(_QWORD *)(a1 + v38 + 456) = 0;
      }
      v42 = (void **)(v40 + 296);
      *(_OWORD *)v41 = *(_OWORD *)(v40 + 296);
      v43 = *(_QWORD *)(v40 + 312);
      v44 = *(_QWORD *)(v40 + 320);
      *(_QWORD *)(v40 + 304) = 0;
      *(_QWORD *)(v40 + 312) = 0;
      *(_QWORD *)(v40 + 296) = 0;
      *(_QWORD *)(v40 + 456) = v43;
      *(_QWORD *)(v40 + 464) = v44;
      v45 = *(_OWORD *)(v40 + 344);
      *(_OWORD *)(v40 + 472) = *(_OWORD *)(v40 + 328);
      *(_OWORD *)(v40 + 488) = v45;
      *(_OWORD *)(v40 + 504) = *(_OWORD *)(v40 + 360);
      v46 = *(_OWORD *)(v40 + 376);
      v47 = *(_OWORD *)(v40 + 408);
      *(_OWORD *)(v40 + 536) = *(_OWORD *)(v40 + 392);
      *(_OWORD *)(v40 + 552) = v47;
      *(_OWORD *)(v40 + 520) = v46;
      *(_DWORD *)(v40 + 568) = *(_DWORD *)(v40 + 424);
      if (v38 == -288)
        break;
      v48 = sub_2395D7BEC(*(_QWORD *)a3, v37);
      v49 = sub_2395D7BEC(*(_QWORD *)a3, *(_DWORD *)(a1 + v38 + 144));
      v50 = *((_DWORD *)v48 + 49);
      v51 = **(_DWORD **)(a3 + 8);
      v52 = *((_DWORD *)v49 + 49);
      if ((v50 != v51 || v52 == v51)
        && (v50 != v51 && v52 == v51
         || HIDWORD(v60) + (int)v60 <= (*(_DWORD *)(a1 + v38 + 180) + *(_DWORD *)(a1 + v38 + 176))))
      {
        v53 = a1 + v38;
        v54 = a1 + v38 + 288;
        v55 = a1 + v38 + 296;
        v56 = (_OWORD *)(v53 + 376);
        v57 = (_OWORD *)(v53 + 328);
        goto LABEL_40;
      }
      v36 = *v42;
      v38 -= 144;
    }
    v55 = a1 + 8;
    v56 = (_OWORD *)(a1 + 88);
    v57 = (_OWORD *)(a1 + 40);
    v54 = a1;
LABEL_40:
    *(_DWORD *)v54 = v37;
    v58 = *(void **)v55;
    if (*(_QWORD *)v55)
    {
      *(_QWORD *)(v54 + 16) = v58;
      operator delete(v58);
      *(_QWORD *)v55 = 0;
      *(_QWORD *)(v55 + 8) = 0;
      *(_QWORD *)(v55 + 16) = 0;
    }
    *(_QWORD *)v55 = v64;
    *(_OWORD *)(v54 + 16) = v61;
    *(_QWORD *)(v54 + 32) = v60;
    *v57 = v72;
    v57[1] = v74;
    v57[2] = v76;
    *v56 = v66;
    v56[1] = v68;
    v56[2] = v70;
    v28 = v62 + 1;
    *(_DWORD *)(v54 + 136) = v39;
    if (v62 == 7)
      return v26 + 144 == v59;
    v4 = v59;
LABEL_17:
    v25 = (unsigned int *)v26;
    v27 += 144;
    v26 += 144;
    if (v26 == v4)
      return 1;
  }
}

void sub_239CA6884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239CA68A0(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 136);
      if (v5)
      {
        *(_QWORD *)(v3 - 128) = v5;
        operator delete(v5);
      }
      v3 -= 144;
    }
  }
  return a1;
}

void sub_239CA6900(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFC940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239CA6910(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFC940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239CA6940(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
}

void sub_239CA6994()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239CA69A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFC978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239CA69E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFC978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239CA6A00(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v4 = (uint64_t *)*((int *)a3 + 8);
  v6 = *a3;
  v5 = a3[1];
  v7 = *(uint64_t ***)(a1 + 8);
  v9 = v7 + 1;
  v8 = v7[1];
  if (v8)
  {
    while (1)
    {
      v10 = (uint64_t **)v8;
      v11 = v8[4];
      if ((unint64_t)v5 < v11)
        goto LABEL_3;
      if (v11 < (unint64_t)v5)
      {
LABEL_8:
        v8 = v10[1];
        if (!v8)
        {
          v9 = v10 + 1;
          goto LABEL_10;
        }
      }
      else
      {
        v12 = v10[5];
        if (v12 <= v4)
        {
          if (v12 >= v4)
            goto LABEL_13;
          goto LABEL_8;
        }
LABEL_3:
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_10;
      }
    }
  }
  v10 = v7 + 1;
LABEL_10:
  v13 = (uint64_t *)v10;
  v10 = (uint64_t **)operator new(0x38uLL);
  v10[4] = v5;
  v10[5] = v4;
  v10[6] = 0;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v13;
  *v9 = (uint64_t *)v10;
  v14 = (uint64_t *)**v7;
  v15 = (uint64_t *)v10;
  if (v14)
  {
    *v7 = v14;
    v15 = *v9;
  }
  sub_2394213B8(v7[1], v15);
  v7[2] = (uint64_t *)((char *)v7[2] + 1);
LABEL_13:
  v10[6] = v6;
  v16 = *(uint64_t ***)(a1 + 16);
  v18 = v16 + 1;
  v17 = v16[1];
  if (v17)
  {
    while (1)
    {
      v19 = (uint64_t **)v17;
      v20 = v17[4];
      if ((unint64_t)v5 < v20)
        goto LABEL_15;
      if (v20 < (unint64_t)v5)
      {
LABEL_20:
        v17 = v19[1];
        if (!v17)
        {
          v18 = v19 + 1;
          goto LABEL_22;
        }
      }
      else
      {
        v21 = v19[5];
        if (v21 <= v4)
        {
          if (v21 >= v4)
            goto LABEL_25;
          goto LABEL_20;
        }
LABEL_15:
        v17 = *v19;
        v18 = v19;
        if (!*v19)
          goto LABEL_22;
      }
    }
  }
  v19 = v16 + 1;
LABEL_22:
  v22 = (uint64_t *)v19;
  v19 = (uint64_t **)operator new(0x38uLL);
  v19[4] = v5;
  v19[5] = v4;
  v19[6] = 0;
  *v19 = 0;
  v19[1] = 0;
  v19[2] = v22;
  *v18 = (uint64_t *)v19;
  v23 = (uint64_t *)**v16;
  v24 = (uint64_t *)v19;
  if (v23)
  {
    *v16 = v23;
    v24 = *v18;
  }
  sub_2394213B8(v16[1], v24);
  v16[2] = (uint64_t *)((char *)v16[2] + 1);
LABEL_25:
  v19[6] = (uint64_t *)-1;
  return 1;
}

uint64_t sub_239CA6B9C(uint64_t *a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  int v11;
  void **v12;
  unint64_t *v13;
  unint64_t *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t *v18;
  float64x2_t v21;
  float64x2_t v22;
  int8x16_t v23;
  double v28;
  unint64_t v29;
  int8x16_t *v30;
  int8x16_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  double *v36;
  double *v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  float64x2_t v41;
  float64x2_t v42;
  float64_t v44;
  double v45;
  float64x2_t v46;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v55;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v66;
  float64x2_t v69;
  double v70;
  double v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  int8x16_t v78;
  float64x2_t v79;
  float64x2_t v80;
  void **v81;
  void **v82;
  void *v84;
  uint64_t *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int8x16_t v92;
  char *v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  int64x2_t v106;
  float64x2_t v107;
  int8x16_t v108;
  float64x2_t v109;
  float64x2_t v110;
  int64x2_t v111;
  double v112;
  double v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  _QWORD *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _QWORD *v126;
  void *v127;
  _QWORD *v128;
  void *v129;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  void *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  void *v138;
  void **v139;
  void **v140;
  _QWORD *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  void *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  int8x16_t v153;
  char *v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  int64x2_t v167;
  float64x2_t v168;
  int8x16_t v169;
  float64x2_t v170;
  float64x2_t v171;
  int64x2_t v172;
  double v173;
  double v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  unint64_t *v183;
  unint64_t *v184;
  unint64_t *v185;
  uint64_t v186;
  uint64_t *v188;
  uint64_t v190;
  unint64_t v191;
  __int128 v192;
  __int128 v193;
  void *v194;
  uint64_t *v195;
  char *v197;
  char *v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  int64x2_t v208;
  float64x2_t v209;
  int64x2_t v210;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v215;
  float64x2_t v217;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  int64x2_t v223;
  double v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v228;
  float64x2_t v231;
  void **v235;
  void **v236;
  float64x2_t v237;
  double v238;
  double v239;
  float64_t v240;
  float64_t v241;
  void **v242;
  char *v243;
  void **v244;
  char *v245;
  int8x16_t v246;
  double v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  double v256;
  double v257;
  double v259;
  double v262;
  double v263;
  long double v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  double v268;
  char *v270;
  _QWORD *v271;
  unint64_t *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char *v279;
  char *v280;
  char *v281;
  char *v282;
  unint64_t v283;
  uint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  __int128 v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  unint64_t v293;
  char *v294;
  __int128 v295;
  __int128 v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  _BYTE *v311;
  char *v312;
  unint64_t v313;
  uint64_t v314;
  _OWORD *v315;
  char *v316;
  uint64_t v317;
  __int128 v318;
  uint64_t v319;
  unint64_t v320;
  __int128 v321;
  __int128 v322;
  unint64_t v323;
  unint64_t v324;
  __int128 v325;
  __int128 v326;
  void *v327;
  uint64_t v328;
  char *v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  char *v334;
  void **v335;
  void **v336;
  void *v338;
  uint64_t *v339;
  double v340;
  float64x2_t v341;
  unint64_t v342;
  double v343;
  float64x2_t v344;
  double v345;
  double v346;
  double v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v355;
  float64x2_t v359;
  int64x2_t v361;
  double v362;
  double v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  _QWORD *v372;
  __int128 v373;
  __int128 v374;
  int8x16_t v375;
  size_t v376;
  char *v377;
  unint64_t *v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  _QWORD *v385;
  _QWORD *v386;
  void *v387;
  void *v388;
  unint64_t *v389;
  unint64_t *v390;
  __int128 v391;
  float64x2_t v392;
  float64x2_t v393;
  void **v394;
  void **v395;
  void *v396;
  unint64_t v397;
  void **v398;
  uint64_t *v399;
  uint8x8_t v400;
  unint64_t v401;
  uint64_t **v402;
  uint64_t *v403;
  unint64_t v404;
  unint64_t v405;
  _OWORD *v406;
  uint64_t *v407;
  _QWORD *v408;
  int8x16_t v409;
  __int128 v410;
  __int128 v411;
  int8x16_t v412;
  int8x16_t v413;
  int8x16_t v414;
  float64x2_t v415;
  float64x2_t v416;
  int8x16_t v417;
  _QWORD *v418;
  _QWORD *v419;
  void *v420;
  _QWORD *v421;
  _QWORD *v422;
  void *v423;
  _QWORD *v424;
  _QWORD *v425;
  void *v426;
  _QWORD *v427;
  _QWORD *v428;
  void *v429;
  _QWORD *v430;
  _QWORD *v431;
  void *v432;
  _QWORD *v433;
  _QWORD *v434;
  void *v435;
  std::bad_alloc *exception;
  std::bad_alloc *v437;
  std::bad_alloc *v438;
  std::bad_alloc *v439;
  uint64_t *v440;
  __int128 *v441;
  uint64_t v442;
  unint64_t *v443;
  uint64_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  char *v450;
  float64_t v451;
  double v452;
  double v453;
  float64_t v454;
  double v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  double v466;
  double v467;
  float64x2_t v468;
  float64x2_t v469;
  double v470;
  double v471;
  float64x2_t v472;
  float64x2_t v473;
  __int128 v474;
  double v475;
  double v476;
  float64x2_t v477;
  float64x2_t v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  float64x2_t v482;
  float64x2_t v483;
  int8x16_t v484;
  float64x2_t v485;
  double v486;
  double v487;
  float64x2_t v488;
  float64x2_t v489;
  unint64_t v490;
  float64x2_t v491;
  int8x16_t v492;
  int8x16_t v493;
  float64x2_t v494;
  double v495;
  float64x2_t v496;
  int8x16_t v497;
  float64x2_t v498;
  double v499;
  double v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  uint64_t v505;
  float64x2_t v506;
  int8x16_t v507;
  int8x16_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  int8x16_t v512;
  float64x2_t v513;
  double v514;
  double v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  unint64_t v519;
  float64x2_t v520;
  int8x16_t v521;
  int8x16_t v522;
  float64x2_t v523;
  double v524;
  float64x2_t v525;
  double v526;
  float64x2_t v527;
  double v528;
  double v529;
  float64x2_t v530;
  float64x2_t v531;
  uint64_t v532;
  float64x2_t v533;
  uint64_t v534;
  float64x2_t v535;
  int8x16_t v536;
  int8x16_t v537;
  float64x2_t v538;
  float64x2_t v539;
  unint64_t *v540;
  int8x16_t v541;
  void *memptr[2];
  _BYTE v543[32];
  float64x2_t v544;
  float64x2_t v545;
  __int128 v546;
  float64x2_t v547;
  float64x2_t v548;
  int8x16_t v549;
  uint64_t v550;
  uint64_t v551;
  int8x16_t v552;
  uint64_t v553;
  uint64_t v554;
  char v555;
  char v556;
  void *v557;
  char v558;
  void *__src;
  int v560[2];
  char *v561;
  void *v562[2];
  void *v563[2];
  int v564;
  void *v565[2];
  void *v566[2];
  int v567;
  void *v568[2];
  void *v569[2];
  int v570;
  void *v571[2];
  void *v572[2];
  int v573;
  void *v574[2];
  void *v575[2];
  int v576;
  void *v577[2];
  void *v578[2];
  int v579;
  float64x2_t v580;
  float64_t v581;
  void *v582;
  void **v583;
  uint64_t v584;
  void *v585;
  void **v586;
  uint64_t v587;
  void *v588[4];
  void *v589;
  void *v590;
  _QWORD v591[5];
  uint64_t v592[43];
  void *v593[4];
  void *v594;
  void *v595;
  _QWORD v596[5];
  uint64_t v597[43];
  void *v598;
  void *__p[2];
  __int128 v600;
  _BYTE v601[40];
  int v602;
  char *v603;
  char *v604;
  char *v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  _QWORD v610[7];
  __int128 v611;
  uint64_t v612;
  char v613;
  __int128 v614;
  uint64_t v615;
  char v616;
  uint64_t v617;
  char v618;
  uint64_t v619;
  uint64_t v620;
  __int128 v621;
  char v622;
  uint64_t v623;
  char v624[24];
  char v625[24];
  uint64_t v626;
  int v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  void *v637[2];
  uint64_t v638;
  int v639;
  __int128 v640;
  _BYTE v641[28];
  __int128 v642;
  __int128 v643;
  __int128 v644;
  uint64_t v645;

  v645 = *MEMORY[0x24BDAC8D0];
  sub_239A4E3D8((uint64_t)v593, a1);
  sub_239A4E3D8((uint64_t)v588, a2);
  v441 = a4;
  __p[1] = 0;
  __p[0] = 0;
  *(_QWORD *)&v600 = 0;
  sub_239433C1C((uint64_t)v588, (uint64_t)__p, 1);
  v7 = __p[0];
  v8 = (char *)__p[1];
  if (__p[0] == __p[1])
    goto LABEL_7;
  v9 = sub_2395D7BEC((uint64_t)v588, *(_QWORD *)__p[0]);
  v10 = v7 + 1;
  if (v7 + 1 == (_QWORD *)v8)
  {
LABEL_6:
    v7 = __p[0];
LABEL_7:
    if (v7)
    {
      __p[1] = v7;
      operator delete(v7);
    }
    if (v596[3] != v591[3])
    {
      sub_239A444D4((uint64_t)"unknown file", 60, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v586 = 0;
    v585 = 0;
    v587 = 0;
    v583 = 0;
    v582 = 0;
    v584 = 0;
    sub_2394B5624((uint64_t)v593, (uint64_t)&v585, 1);
    sub_239433C1C((uint64_t)v588, (uint64_t)&v582, 1);
    if (v585 == v586)
      goto LABEL_63;
    v12 = (void **)v582;
    if (v582 == v583)
    {
      v39 = 0;
      if (!v582)
      {
LABEL_66:
        if (v585)
        {
          v586 = (void **)v585;
          operator delete(v585);
        }
        goto LABEL_68;
      }
LABEL_65:
      v583 = v12;
      operator delete(v12);
      goto LABEL_66;
    }
    sub_239BF3D38(&v580, (uint64_t)v588);
    v577[1] = 0;
    v577[0] = 0;
    v578[0] = 0;
    v574[1] = 0;
    v574[0] = 0;
    v575[0] = 0;
    sub_2394B5624((uint64_t)v593, (uint64_t)v574, 1);
    v13 = (unint64_t *)v574[1];
    v14 = (unint64_t *)v574[0];
    v15 = (char *)v574[1] - (char *)v574[0];
    v442 = a3;
    v440 = a2;
    if (v574[1] == v574[0])
      goto LABEL_39;
    if ((unint64_t)v15 >= 0x5555555555555551)
      sub_2394189F8();
    v16 = v15 >> 3;
    v577[0] = operator new(24 * (v15 >> 3));
    v577[1] = v577[0];
    v578[0] = (char *)v577[0] + 24 * v16;
    do
    {
      v18 = sub_2394650AC((uint64_t)v593, *v14);
      *(_QWORD *)&_Q0.f64[0] = v18[10];
      _Q4 = *((_OWORD *)v18 + 8);
      *(_QWORD *)&v21.f64[0] = v18[22];
      *(_QWORD *)&v21.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v21);
      v22 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v18 + 10));
      *(_QWORD *)&_Q0.f64[1] = v18[14];
      v23 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*((int64x2_t *)v18 + 4), *((int64x2_t *)v18 + 6)), v22.f64[0]), (float64x2_t)vzip2q_s64(*((int64x2_t *)v18 + 4), *((int64x2_t *)v18 + 6)), v22, 1), _Q0, v21.f64[0]);
      _Q0.f64[0] = v22.f64[1];
      __asm { FMLA            D1, D0, V4.D[1] }
      v28 = vmlad_n_f64(_D1, *((double *)v18 + 18), v21.f64[0]);
      v29 = vextq_s8(v23, v23, 8uLL).u64[0];
      v30 = (int8x16_t *)v577[1];
      if (v577[1] < v578[0])
      {
        *((double *)v577[1] + 2) = v28;
        v23.i64[1] = v29;
        *v30 = v23;
        v17 = &v30[1].u64[1];
      }
      else
      {
        v31 = (int8x16_t *)v577[0];
        v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v577[1] - (char *)v577[0]) >> 3);
        v33 = v32 + 1;
        if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        if (0x5555555555555556 * (((char *)v578[0] - (char *)v577[0]) >> 3) > v33)
          v33 = 0x5555555555555556 * (((char *)v578[0] - (char *)v577[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v578[0] - (char *)v577[0]) >> 3) >= 0x555555555555555)
          v34 = 0xAAAAAAAAAAAAAAALL;
        else
          v34 = v33;
        if (v34)
        {
          v519 = v29;
          v526 = v28;
          v534 = v23.i64[0];
          if (v34 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v35 = (char *)operator new(24 * v34);
          v28 = v526;
          v23.i64[0] = v534;
          v29 = v519;
        }
        else
        {
          v35 = 0;
        }
        v36 = (double *)&v35[24 * v32];
        v36[2] = v28;
        v23.i64[1] = v29;
        *(int8x16_t *)v36 = v23;
        v37 = v36;
        if (v30 != v31)
        {
          do
          {
            v38 = *(__int128 *)((char *)&v30[-2] + 8);
            *(v37 - 1) = *(double *)&v30[-1].i64[1];
            *(_OWORD *)(v37 - 3) = v38;
            v37 -= 3;
            v30 = (int8x16_t *)((char *)v30 - 24);
          }
          while (v30 != v31);
          v30 = (int8x16_t *)v577[0];
        }
        v17 = (unint64_t *)(v36 + 3);
        v577[0] = v37;
        v577[1] = v36 + 3;
        v578[0] = &v35[24 * v34];
        if (v30)
          operator delete(v30);
      }
      v577[1] = v17;
      ++v14;
    }
    while (v14 != v13);
    if (v17 == v577[0])
    {
LABEL_39:
      v40 = 0;
      v520 = 0u;
      v527 = 0u;
      v506 = 0u;
      v513 = 0u;
      v491 = 0u;
      v498 = 0u;
      v535 = 0u;
      v485 = 0u;
    }
    else
    {
      v40 = sub_239E20BF0((uint64_t)v577, (uint64_t)v571, (uint64_t)v568, 0, 0, 1.0, 0.0);
      v42.f64[1] = 0.0;
      v520 = 0u;
      v527 = 0u;
      v506 = 0u;
      v513 = 0u;
      v491 = 0u;
      v498 = 0u;
      v535 = 0u;
      v485 = 0u;
      if ((v40 & 1) != 0)
      {
        *(void **)&v42.f64[0] = v572[0];
        *(void **)&v41.f64[0] = v569[0];
        __asm { FMOV            V6.2D, #0.5 }
        *(_QWORD *)&v44 = *(_OWORD *)&vmulq_f64(vaddq_f64(v42, v41), _Q6);
        v45 = vsubq_f64(v41, v42).f64[0];
        v46 = vsubq_f64(*(float64x2_t *)v568, *(float64x2_t *)v571);
        *(_QWORD *)&v543[8] = 0;
        v548.f64[1] = 1.0;
        v548.f64[0] = v44;
        v535 = vmulq_f64(vaddq_f64(*(float64x2_t *)v571, *(float64x2_t *)v568), _Q6);
        v547 = v535;
        *(_QWORD *)&v543[16] = vmuld_lane_f64(0.0, v46, 1);
        v545.f64[0] = 0.0 * v45;
        *(float64_t *)&v543[24] = v46.f64[1];
        memptr[0] = *(void **)&v46.f64[0];
        *(double *)&memptr[1] = 0.0 * v46.f64[0];
        *(double *)v543 = 0.0 * v46.f64[0];
        v544 = (float64x2_t)*(unint64_t *)&v543[16];
        v545.f64[1] = 0.0 * v45;
        v546 = *(unint64_t *)&v45;
        v506 = *(float64x2_t *)memptr;
        v513 = (float64x2_t)COERCE_UNSIGNED_INT64(0.0 * v46.f64[0]);
        v520 = (float64x2_t)*(unint64_t *)&v543[16];
        v527 = *(float64x2_t *)&v543[16];
        v491 = v545;
        v498 = (float64x2_t)*(unint64_t *)&v45;
        v485 = v548;
        sub_239A22BE8(__p);
      }
    }
    if (v574[0])
    {
      v574[1] = v574[0];
      operator delete(v574[0]);
    }
    if (v577[0])
    {
      v577[1] = v577[0];
      operator delete(v577[0]);
    }
    if ((v40 & 1) == 0)
    {
LABEL_63:
      v39 = 0;
    }
    else
    {
      __asm { FMOV            V0.2D, #-0.5 }
      v48 = vmulq_f64(v506, _Q0);
      v49 = vmlaq_f64(v48, _Q0, v527);
      v50 = vmulq_f64(v513, _Q0);
      v51 = vmlaq_f64(v50, _Q0, v520);
      v52 = vaddq_f64(v485, vmlaq_f64(v51, _Q0, v498));
      v53 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1);
      _Q3 = vdivq_f64(vaddq_f64(v535, vmlaq_f64(v49, _Q0, v491)), v53);
      v55 = vdivq_f64(v52, v53);
      __asm { FMOV            V7.2D, #0.5 }
      v57 = vaddq_f64(v485, vmlaq_f64(v51, _Q7, v498));
      v58 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v57, 1);
      v59 = vdivq_f64(vaddq_f64(v535, vmlaq_f64(v49, _Q7, v491)), v58);
      _Q5 = vdivq_f64(v57, v58);
      v61 = vaddq_f64(v485, vmlaq_f64(vmlaq_f64(v50, _Q7, v520), _Q0, v498));
      v62 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v61, 1);
      v63 = vdivq_f64(vaddq_f64(v535, vmlaq_f64(vmlaq_f64(v48, _Q7, v527), _Q0, v491)), v62);
      v64 = vdivq_f64(v61, v62);
      _Q16 = vaddq_f64(v535, vmlaq_f64(vmlaq_f64(vmulq_f64(v506, _Q7), _Q0, v527), _Q0, v491));
      v66 = vaddq_f64(v485, vmlaq_f64(vmlaq_f64(vmulq_f64(v513, _Q7), _Q0, v520), _Q0, v498));
      _Q7 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v66, 1);
      v69 = vsubq_f64(v55, vdivq_f64(v66, _Q7));
      _D17 = vsubq_f64(_Q3, vdivq_f64(_Q16, _Q7)).f64[1];
      __asm { FMLA            D16, D17, V7.D[1] }
      v69.f64[0] = sqrt(vmlad_n_f64(_Q16.f64[0], v69.f64[0], v69.f64[0]));
      *(_QWORD *)&v64.f64[0] = *(_OWORD *)&vsubq_f64(v55, v64);
      _Q16.f64[0] = vsubq_f64(_Q3, v63).f64[1];
      __asm { FMLA            D7, D16, V1.D[1] }
      v70 = sqrt(vmlad_n_f64(_Q7.f64[0], v64.f64[0], v64.f64[0]));
      *(_QWORD *)&v64.f64[0] = *(_OWORD *)&vsubq_f64(v55, _Q5);
      _Q2 = (int8x16_t)vsubq_f64(_Q3, v59);
      *(_QWORD *)&_Q5.f64[0] = _Q2.i64[1];
      __asm { FMLA            D3, D5, V2.D[1] }
      *(double *)_Q2.i64 = sqrt(vmlad_n_f64(_Q3.f64[0], v64.f64[0], v64.f64[0]));
      if (v69.f64[0] < v70)
        v69.f64[0] = v70;
      if (v69.f64[0] >= *(double *)_Q2.i64)
        v72 = v69.f64[0];
      else
        v72 = *(double *)_Q2.i64;
      sub_2396F62C4((uint64_t)v593, (uint64_t)&v580, 0, v69, v70, _Q2);
      v73 = 1.0 / v72;
      v74.f64[0] = v73;
      sub_239B60624((uint64_t)v593, 0, v74, v75);
      sub_2396F62C4((uint64_t)v588, (uint64_t)&v580, 0, v76, v77, v78);
      v79.f64[0] = v73;
      sub_239B60624((uint64_t)v588, 0, v79, v80);
      *(_OWORD *)v578 = 0u;
      *(_OWORD *)v577 = 0u;
      v579 = 1065353216;
      *(_OWORD *)v575 = 0u;
      *(_OWORD *)v574 = 0u;
      v576 = 1065353216;
      *(_OWORD *)v572 = 0u;
      *(_OWORD *)v571 = 0u;
      v573 = 1065353216;
      *(_OWORD *)v568 = 0u;
      *(_OWORD *)v569 = 0u;
      v570 = 1065353216;
      *(_OWORD *)v565 = 0u;
      *(_OWORD *)v566 = 0u;
      v567 = 1065353216;
      *(_OWORD *)v562 = 0u;
      *(_OWORD *)v563 = 0u;
      v564 = 1065353216;
      *(_QWORD *)v560 = 0;
      __src = 0;
      v561 = 0;
      v81 = (void **)v582;
      v82 = v583;
      if (v582 != v583)
      {
        __asm { FMOV            V0.2D, #-1.0 }
        v456 = _Q0;
        do
        {
          v84 = *v81;
          v598 = v84;
          v85 = sub_2395D7BEC((uint64_t)v588, v84);
          if (*((_BYTE *)v85 + 236))
            _ZF = *((_BYTE *)v85 + 237) == 0;
          else
            _ZF = 1;
          if (!_ZF)
          {
            v87 = v85[11];
            v514 = *((double *)v85 + 10);
            v521 = *((int8x16_t *)v85 + 4);
            v88 = v85[15];
            v499 = *((double *)v85 + 14);
            v507 = *((int8x16_t *)v85 + 6);
            v89 = v85[19];
            v486 = *((double *)v85 + 18);
            v492 = *((int8x16_t *)v85 + 8);
            v90 = v85[23];
            v528 = *((double *)v85 + 22);
            v536 = *((int8x16_t *)v85 + 10);
            v91 = sub_239C0BEEC((uint64_t)v571, (unint64_t)v84, &v598);
            v92 = v521;
            v470 = *(double *)vextq_s8(v507, v507, 8uLL).i64;
            v475 = *(double *)vextq_s8(v92, v92, 8uLL).i64;
            *(double *)&v92.i64[1] = v475;
            *(int8x16_t *)(v91 + 24) = v92;
            *((double *)v91 + 5) = v514;
            *((_QWORD *)v91 + 6) = v87;
            v92.i64[0] = v507.i64[0];
            *(double *)&v92.i64[1] = v470;
            *(int8x16_t *)(v91 + 56) = v92;
            *((double *)v91 + 9) = v499;
            *((_QWORD *)v91 + 10) = v88;
            v92.i64[0] = v492.i64[0];
            v466 = *(double *)vextq_s8(v492, v492, 8uLL).i64;
            *(double *)&v92.i64[1] = v466;
            *(int8x16_t *)(v91 + 88) = v92;
            *((double *)v91 + 13) = v486;
            *((_QWORD *)v91 + 14) = v89;
            v92.i64[0] = v536.i64[0];
            v480 = vextq_s8(v536, v536, 8uLL).u64[0];
            v92.i64[1] = v480;
            *(int8x16_t *)(v91 + 120) = v92;
            *((double *)v91 + 17) = v528;
            *((_QWORD *)v91 + 18) = v90;
            v93 = sub_239C0BEEC((uint64_t)v568, (unint64_t)v84, &v598);
            *(_QWORD *)&v94.f64[0] = v521.i64[0];
            v94.f64[1] = v475;
            *(_QWORD *)&v95.f64[0] = v521.i64[0];
            *(_QWORD *)&v95.f64[1] = v507.i64[0];
            *(_QWORD *)&v96.f64[0] = v507.i64[0];
            v96.f64[1] = v470;
            *(_QWORD *)&v97.f64[0] = v492.i64[0];
            v97.f64[1] = v466;
            v98.f64[0] = v475;
            v98.f64[1] = v470;
            v99.f64[0] = v514;
            v99.f64[1] = v499;
            _D6 = v486;
            _D7 = v466;
            _D29 = v528;
            *(_QWORD *)&_Q17.f64[0] = v536.i64[0];
            *(_QWORD *)&_Q17.f64[1] = v480;
            __asm
            {
              FMLS            D18, D28, V17.D[1]
              FMLS            D18, D25, V29.D[0]
            }
            *((_QWORD *)&_Q18 + 1) = 1.0;
            *(_OWORD *)(v93 + 40) = v492.u64[0];
            *(float64x2_t *)(v93 + 24) = v95;
            *(_OWORD *)(v93 + 72) = *(unint64_t *)&v466;
            *(float64x2_t *)(v93 + 56) = v98;
            *(_OWORD *)(v93 + 104) = *(unint64_t *)&v486;
            *(float64x2_t *)(v93 + 88) = v99;
            *(float64x2_t *)(v93 + 120) = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v95, vnegq_f64(_Q17).f64[0]), v98, _Q17, 1), v99, v528, 0);
            *(_OWORD *)(v93 + 136) = _Q18;
            *(double *)v543 = v514;
            *(float64x2_t *)memptr = v94;
            *(double *)&v543[24] = v499;
            *(float64x2_t *)&v543[8] = v96;
            v545.f64[0] = v486;
            v544 = v97;
            v114 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v95, *(double *)v521.i64), v98, v475), v99, v514);
            v106 = (int64x2_t)vmulq_f64(v97, v94);
            *(double *)v106.i64 = *(double *)v106.i64 + v466 * v475 + v486 * v514;
            v107 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v95, *(double *)v507.i64), v98, v470), v99, v499);
            v108 = (int8x16_t)vmulq_f64(v97, v96);
            *(double *)v108.i64 = *(double *)v108.i64 + v466 * v470 + v486 * v499;
            v109 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v95, *(double *)v492.i64), v98, v466), v99, v486);
            v110 = vmulq_f64(v97, v97);
            v110.f64[0] = v110.f64[0] + v466 * v466 + v486 * v486;
            v111 = (int64x2_t)vaddq_f64(v107, (float64x2_t)xmmword_239EC6830);
            *(_QWORD *)&v110.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v110, v456));
            v110.f64[1] = NAN;
            v112 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v114, (float64x2_t)xmmword_239EC6820)), v110), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v111, v108, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v106, v111)), vabsq_f64(v109))));
            v113 = -v499;
            *(_QWORD *)&v114.f64[0] = v521.i64[0];
            if (v112 > 0.0001
              || (*(_QWORD *)&v115.f64[0] = v521.i64[0],
                  v115.f64[1] = v475,
                  v116.f64[0] = v466,
                  *(_QWORD *)&v116.f64[1] = v492.i64[0],
                  v117.f64[0] = v470,
                  *(_QWORD *)&v117.f64[1] = v507.i64[0],
                  v118 = vmulq_f64(v115, vmlaq_n_f64(vmulq_n_f64(v116, v113), v117, v486)),
                  fabs(v514 * (v466 * *(double *)v507.i64 - v470 * *(double *)v492.i64)+ vsubq_f64(v118, (float64x2_t)vdupq_laneq_s64((int64x2_t)v118, 1)).f64[0]+ -1.0) > 0.0001))
            {
              if (v112 > 0.1
                || (v114.f64[1] = v475,
                    v119.f64[0] = v466,
                    *(_QWORD *)&v119.f64[1] = v492.i64[0],
                    v120 = vmulq_n_f64(v119, v113),
                    v119.f64[0] = v470,
                    *(_QWORD *)&v119.f64[1] = v507.i64[0],
                    v121 = vmulq_f64(v114, vmlaq_n_f64(v120, v119, v486)),
                    fabs(v514 * (v466 * *(double *)v507.i64 - v470 * *(double *)v492.i64)+ vsubq_f64(v121, (float64x2_t)vdupq_laneq_s64((int64x2_t)v121, 1)).f64[0]+ -1.0) > 0.1))
              {
                sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
              sub_239516070((float64x2_t *)memptr);
            }
            *(_OWORD *)v601 = *(_OWORD *)&v543[16];
            *(float64x2_t *)&v601[16] = v544;
            *(float64_t *)&v601[32] = v545.f64[0];
            v600 = *(_OWORD *)v543;
            *(_OWORD *)__p = *(_OWORD *)memptr;
            v122 = sub_239CA9988((uint64_t)v562, (unint64_t)v84, (uint64_t *)&v598);
            v122[3] = 0x3FF0000000000000;
            v123 = *(_OWORD *)__p;
            *((_OWORD *)v122 + 3) = v600;
            v124 = *(_OWORD *)&v601[16];
            *((_OWORD *)v122 + 4) = *(_OWORD *)v601;
            *((_OWORD *)v122 + 5) = v124;
            v122[12] = *(_QWORD *)&v601[32];
            *((_OWORD *)v122 + 2) = v123;
            *((double *)v122 + 15) = v528;
            *(_QWORD *)&v125 = v536.i64[0];
            *((_QWORD *)&v125 + 1) = v480;
            *(_OWORD *)(v122 + 13) = v125;
          }
          ++v81;
        }
        while (v81 != v82);
      }
      v139 = (void **)v585;
      v140 = v586;
      if (v585 != v586)
      {
        __asm { FMOV            V0.2D, #-1.0 }
        v457 = _Q0;
        do
        {
          v146 = *v139;
          v598 = v146;
          v147 = sub_2395D7BEC((uint64_t)v593, v146);
          if (*((_BYTE *)v147 + 232) == 2)
          {
            v148 = v147[11];
            v515 = *((double *)v147 + 10);
            v522 = *((int8x16_t *)v147 + 4);
            v149 = v147[15];
            v500 = *((double *)v147 + 14);
            v508 = *((int8x16_t *)v147 + 6);
            v150 = v147[19];
            v487 = *((double *)v147 + 18);
            v493 = *((int8x16_t *)v147 + 8);
            v151 = v147[23];
            v529 = *((double *)v147 + 22);
            v537 = *((int8x16_t *)v147 + 10);
            v152 = sub_239C0BEEC((uint64_t)v577, (unint64_t)v146, &v598);
            v153 = v522;
            v471 = *(double *)vextq_s8(v508, v508, 8uLL).i64;
            v476 = *(double *)vextq_s8(v153, v153, 8uLL).i64;
            *(double *)&v153.i64[1] = v476;
            *(int8x16_t *)(v152 + 24) = v153;
            *((double *)v152 + 5) = v515;
            *((_QWORD *)v152 + 6) = v148;
            v153.i64[0] = v508.i64[0];
            *(double *)&v153.i64[1] = v471;
            *(int8x16_t *)(v152 + 56) = v153;
            *((double *)v152 + 9) = v500;
            *((_QWORD *)v152 + 10) = v149;
            v153.i64[0] = v493.i64[0];
            v467 = *(double *)vextq_s8(v493, v493, 8uLL).i64;
            *(double *)&v153.i64[1] = v467;
            *(int8x16_t *)(v152 + 88) = v153;
            *((double *)v152 + 13) = v487;
            *((_QWORD *)v152 + 14) = v150;
            v153.i64[0] = v537.i64[0];
            v481 = vextq_s8(v537, v537, 8uLL).u64[0];
            v153.i64[1] = v481;
            *(int8x16_t *)(v152 + 120) = v153;
            *((double *)v152 + 17) = v529;
            *((_QWORD *)v152 + 18) = v151;
            v154 = sub_239C0BEEC((uint64_t)v574, (unint64_t)v146, &v598);
            *(_QWORD *)&v155.f64[0] = v522.i64[0];
            v155.f64[1] = v476;
            *(_QWORD *)&v156.f64[0] = v522.i64[0];
            *(_QWORD *)&v156.f64[1] = v508.i64[0];
            *(_QWORD *)&v157.f64[0] = v508.i64[0];
            v157.f64[1] = v471;
            *(_QWORD *)&v158.f64[0] = v493.i64[0];
            v158.f64[1] = v467;
            v159.f64[0] = v476;
            v159.f64[1] = v471;
            v160.f64[0] = v515;
            v160.f64[1] = v500;
            _D6 = v487;
            _D7 = v467;
            _D29 = v529;
            *(_QWORD *)&_Q17.f64[0] = v537.i64[0];
            *(_QWORD *)&_Q17.f64[1] = v481;
            __asm
            {
              FMLS            D18, D28, V17.D[1]
              FMLS            D18, D25, V29.D[0]
            }
            *((_QWORD *)&_Q18 + 1) = 1.0;
            *(_OWORD *)(v154 + 40) = v493.u64[0];
            *(float64x2_t *)(v154 + 24) = v156;
            *(_OWORD *)(v154 + 72) = *(unint64_t *)&v467;
            *(float64x2_t *)(v154 + 56) = v159;
            *(_OWORD *)(v154 + 104) = *(unint64_t *)&v487;
            *(float64x2_t *)(v154 + 88) = v160;
            *(float64x2_t *)(v154 + 120) = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v156, vnegq_f64(_Q17).f64[0]), v159, _Q17, 1), v160, v529, 0);
            *(_OWORD *)(v154 + 136) = _Q18;
            *(double *)v543 = v515;
            *(float64x2_t *)memptr = v155;
            *(double *)&v543[24] = v500;
            *(float64x2_t *)&v543[8] = v157;
            v545.f64[0] = v487;
            v544 = v158;
            v175 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v156, *(double *)v522.i64), v159, v476), v160, v515);
            v167 = (int64x2_t)vmulq_f64(v158, v155);
            *(double *)v167.i64 = *(double *)v167.i64 + v467 * v476 + v487 * v515;
            v168 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v156, *(double *)v508.i64), v159, v471), v160, v500);
            v169 = (int8x16_t)vmulq_f64(v158, v157);
            *(double *)v169.i64 = *(double *)v169.i64 + v467 * v471 + v487 * v500;
            v170 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v156, *(double *)v493.i64), v159, v467), v160, v487);
            v171 = vmulq_f64(v158, v158);
            v171.f64[0] = v171.f64[0] + v467 * v467 + v487 * v487;
            v172 = (int64x2_t)vaddq_f64(v168, (float64x2_t)xmmword_239EC6830);
            *(_QWORD *)&v171.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v171, v457));
            v171.f64[1] = NAN;
            v173 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v175, (float64x2_t)xmmword_239EC6820)), v171), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v172, v169, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v167, v172)), vabsq_f64(v170))));
            v174 = -v500;
            *(_QWORD *)&v175.f64[0] = v522.i64[0];
            if (v173 > 0.0001
              || (*(_QWORD *)&v176.f64[0] = v522.i64[0],
                  v176.f64[1] = v476,
                  v177.f64[0] = v467,
                  *(_QWORD *)&v177.f64[1] = v493.i64[0],
                  v178.f64[0] = v471,
                  *(_QWORD *)&v178.f64[1] = v508.i64[0],
                  v179 = vmulq_f64(v176, vmlaq_n_f64(vmulq_n_f64(v177, v174), v178, v487)),
                  fabs(v515 * (v467 * *(double *)v508.i64 - v471 * *(double *)v493.i64)+ vsubq_f64(v179, (float64x2_t)vdupq_laneq_s64((int64x2_t)v179, 1)).f64[0]+ -1.0) > 0.0001))
            {
              if (v173 > 0.1
                || (v175.f64[1] = v476,
                    v180.f64[0] = v467,
                    *(_QWORD *)&v180.f64[1] = v493.i64[0],
                    v181 = vmulq_n_f64(v180, v174),
                    v180.f64[0] = v471,
                    *(_QWORD *)&v180.f64[1] = v508.i64[0],
                    v182 = vmulq_f64(v175, vmlaq_n_f64(v181, v180, v487)),
                    fabs(v515 * (v467 * *(double *)v508.i64 - v471 * *(double *)v493.i64)+ vsubq_f64(v182, (float64x2_t)vdupq_laneq_s64((int64x2_t)v182, 1)).f64[0]+ -1.0) > 0.1))
              {
                sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
              sub_239516070((float64x2_t *)memptr);
            }
            *(_OWORD *)v601 = *(_OWORD *)&v543[16];
            *(float64x2_t *)&v601[16] = v544;
            *(float64_t *)&v601[32] = v545.f64[0];
            v600 = *(_OWORD *)v543;
            *(_OWORD *)__p = *(_OWORD *)memptr;
            v142 = sub_239CA9988((uint64_t)v565, (unint64_t)v146, (uint64_t *)&v598);
            v142[3] = 0x3FF0000000000000;
            v143 = *(_OWORD *)__p;
            *((_OWORD *)v142 + 3) = v600;
            v144 = *(_OWORD *)&v601[16];
            *((_OWORD *)v142 + 4) = *(_OWORD *)v601;
            *((_OWORD *)v142 + 5) = v144;
            v142[12] = *(_QWORD *)&v601[32];
            *((_OWORD *)v142 + 2) = v143;
            *((double *)v142 + 15) = v529;
            *(_QWORD *)&v145 = v537.i64[0];
            *((_QWORD *)&v145 + 1) = v481;
            *(_OWORD *)(v142 + 13) = v145;
          }
          ++v139;
        }
        while (v139 != v140);
      }
      v183 = (unint64_t *)v582;
      v443 = (unint64_t *)v583;
      if (v582 != v583)
      {
        v184 = 0;
        v185 = 0;
        v450 = 0;
        v186 = 0;
        __asm { FMOV            V0.2D, #-1.0 }
        v449 = _Q0;
        while (1)
        {
          v188 = sub_2395D7BEC((uint64_t)v588, *v183);
          if (*((_BYTE *)v188 + 236) && *((_BYTE *)v188 + 237) != 0)
            break;
LABEL_107:
          ++v183;
          ++v186;
          if (v183 == v443)
            goto LABEL_238;
        }
        v190 = 1;
        v444 = v186;
        while (1)
        {
          if (v190 + v186 >= (unint64_t)(((char *)v583 - (_BYTE *)v582) >> 3))
            goto LABEL_114;
          v194 = (void *)*((_QWORD *)v582 + v190 + v186);
          v598 = v194;
          v195 = sub_2395D7BEC((uint64_t)v588, v194);
          if (!*((_BYTE *)v195 + 236) || *((_BYTE *)v195 + 237) == 0)
            goto LABEL_114;
          __p[0] = (void *)*v183;
          memptr[0] = v194;
          v197 = sub_239C0BEEC((uint64_t)v568, (unint64_t)__p[0], __p);
          v501 = *(float64x2_t *)(v197 + 24);
          v509 = *(float64x2_t *)(v197 + 40);
          v516 = *(float64x2_t *)(v197 + 56);
          v523 = *(float64x2_t *)(v197 + 72);
          v530 = *(float64x2_t *)(v197 + 88);
          v538 = *(float64x2_t *)(v197 + 104);
          v488 = *(float64x2_t *)(v197 + 120);
          v494 = *(float64x2_t *)(v197 + 136);
          v198 = sub_239C0BEEC((uint64_t)v571, (unint64_t)v194, memptr);
          v199 = *(float64x2_t *)(v198 + 40);
          v200 = *(float64x2_t *)(v198 + 24);
          v201 = *(float64x2_t *)(v198 + 72);
          v202 = *(float64x2_t *)(v198 + 56);
          v203 = *(float64x2_t *)(v198 + 104);
          v204 = *(float64x2_t *)(v198 + 88);
          v205 = *(float64x2_t *)(v198 + 136);
          v206 = *(float64x2_t *)(v198 + 120);
          _Q0 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v200, v501.f64[0]), v202, v501, 1), v204, v509.f64[0]), v206, v509, 1);
          v208 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199, v501.f64[0]), v201, v501, 1), v203, v509.f64[0]), v205, v509, 1);
          v209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v200, v516.f64[0]), v202, v516, 1), v204, v523.f64[0]), v206, v523, 1);
          v210 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199, v516.f64[0]), v201, v516, 1), v203, v523.f64[0]), v205, v523, 1);
          v464 = v202;
          v468 = v200;
          v458 = v206;
          v461 = v204;
          _Q19 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v200, v530.f64[0]), v202, v530, 1), v204, v538.f64[0]), v206, v538, 1);
          v502 = v199;
          v477 = v203;
          v482 = v201;
          v472 = v205;
          *(_QWORD *)&v204.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199, v530.f64[0]), v201, v530, 1), v203, v538.f64[0]), v205, v538, 1);
          v539 = _Q0;
          *(float64x2_t *)memptr = _Q0;
          *(_QWORD *)v543 = v208.i64[0];
          *(float64x2_t *)&v543[8] = v209;
          *(_QWORD *)&v543[24] = v210.i64[0];
          v544 = _Q19;
          v545.f64[0] = v204.f64[0];
          v212 = (float64x2_t)vzip1q_s64((int64x2_t)_Q0, (int64x2_t)v209);
          v213 = (float64x2_t)vzip2q_s64((int64x2_t)_Q0, (int64x2_t)v209);
          _Q4 = (float64x2_t)vzip1q_s64(v208, v210);
          v215 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v212, _Q0.f64[0]), v213, _Q0, 1), _Q4, *(double *)v208.i64);
          _Q5 = (int64x2_t)vmulq_f64(_Q19, _Q0);
          _Q0.f64[0] = _Q0.f64[1];
          __asm { FMLA            D5, D0, V19.D[1] }
          v524 = *(double *)v210.i64;
          v531 = (float64x2_t)v208;
          *(double *)_Q5.i64 = vmlad_n_f64(*(double *)_Q5.i64, *(double *)v208.i64, v204.f64[0]);
          v217 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v212, v209.f64[0]), v213, v209, 1), _Q4, *(double *)v210.i64);
          _Q7 = (int8x16_t)vmulq_f64(_Q19, v209);
          _Q0.f64[0] = v209.f64[1];
          __asm { FMLA            D7, D0, V19.D[1] }
          *(double *)_Q7.i64 = vmlad_n_f64(*(double *)_Q7.i64, *(double *)v210.i64, v204.f64[0]);
          v219 = vmlaq_laneq_f64(vmulq_n_f64(v212, _Q19.f64[0]), v213, _Q19, 1);
          v220 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v204.f64[0], 0);
          v221 = vmlaq_n_f64(v219, _Q4, v204.f64[0]);
          _Q3 = vmulq_f64(_Q19, _Q19);
          _Q4.f64[0] = _Q19.f64[1];
          __asm { FMLA            D3, D4, V19.D[1] }
          v455 = v204.f64[0];
          _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v204.f64[0], v204.f64[0]);
          v223 = (int64x2_t)vaddq_f64(v217, (float64x2_t)xmmword_239EC6830);
          *(_QWORD *)&_Q3.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q3, v449));
          _Q3.f64[1] = NAN;
          v224 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v215, (float64x2_t)xmmword_239EC6820)), _Q3), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v223, _Q7, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q5, v223)), vabsq_f64(v221))));
          v510 = _Q19;
          v517 = v209;
          v225 = (float64x2_t)vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL);
          v226 = (float64x2_t)vextq_s8((int8x16_t)v209, (int8x16_t)v209, 8uLL);
          if (v224 > 0.0001)
            goto LABEL_356;
          _D7 = v209.f64[0];
          v228 = vmulq_f64(v539, vmlaq_f64(vmulq_n_f64(v225, -v524), v226, v220));
          _V16.D[1] = _Q19.f64[1];
          __asm { FMLA            D6, D7, V16.D[1] }
          if (fabs(_D6 * v531.f64[0] + vsubq_f64(v228, (float64x2_t)vdupq_laneq_s64((int64x2_t)v228, 1)).f64[0] + -1.0) > 0.0001)
          {
LABEL_356:
            if (v224 > 0.1)
              goto LABEL_333;
            v231 = vmulq_f64(v539, vmlaq_f64(vmulq_n_f64(v225, -v524), v226, v220));
            _V3.D[1] = _Q19.f64[1];
            _D2 = v209.f64[0];
            __asm { FMLA            D0, D2, V3.D[1] }
            if (fabs(_D0 * v531.f64[0] + vsubq_f64(v231, (float64x2_t)vdupq_laneq_s64((int64x2_t)v231, 1)).f64[0] + -1.0) > 0.1)
            {
LABEL_333:
              sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            sub_239516070((float64x2_t *)memptr);
          }
          *(_OWORD *)v601 = *(_OWORD *)&v543[16];
          *(float64x2_t *)&v601[16] = v544;
          *(float64_t *)&v601[32] = v545.f64[0];
          v600 = *(_OWORD *)v543;
          *(_OWORD *)__p = *(_OWORD *)memptr;
          v235 = (void **)v585;
          if (v585 == v586)
          {
            v236 = (void **)v585;
          }
          else
          {
            v236 = (void **)v585;
            do
            {
              if (*v236 == (void *)*v183)
                goto LABEL_130;
              ++v236;
            }
            while (v236 != v586);
            v236 = v586;
LABEL_130:
            while (*v235 != v598)
            {
              if (++v235 == v586)
              {
                v235 = v586;
                break;
              }
            }
          }
          v237 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v468, v488.f64[0]), v464, v488, 1), v461, v494.f64[0]), v458, v494, 1);
          *(_QWORD *)&v238 = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v502, v488.f64[0]), v482, v488, 1), v477, v494.f64[0]), v472, v494, 1);
          v239 = v238;
          v240 = v237.f64[1];
          v241 = v237.f64[0];
          v454 = v237.f64[0];
          if (v236 != v586)
            break;
          if (v235 != v586)
          {
            v495 = v238;
            v503 = v237;
            v451 = v237.f64[1];
            v242 = v568;
            goto LABEL_138;
          }
          v280 = *(char **)v560;
          v453 = v238;
          if (*(_QWORD *)v560 >= (unint64_t)v561)
          {
            v540 = v184;
            v305 = (char *)__src;
            v306 = *(_QWORD *)v560 - (_QWORD)__src;
            v307 = (uint64_t)(*(_QWORD *)v560 - (_QWORD)__src) >> 3;
            v308 = v307 + 1;
            if ((unint64_t)(v307 + 1) >> 61)
              sub_2394189F8();
            v309 = v561 - (_BYTE *)__src;
            if ((v561 - (_BYTE *)__src) >> 2 > v308)
              v308 = v309 >> 2;
            if ((unint64_t)v309 >= 0x7FFFFFFFFFFFFFF8)
              v310 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v310 = v308;
            if (v310)
            {
              if (v310 >> 61)
                sub_239418A80();
              v311 = operator new(8 * v310);
            }
            else
            {
              v311 = 0;
            }
            v312 = &v311[8 * v307];
            *(_QWORD *)v312 = 0x3FF0000000000000;
            v281 = v312 + 8;
            if (v280 != v305)
            {
              v313 = v280 - 8 - v305;
              if (v313 < 0x58)
                goto LABEL_357;
              if ((unint64_t)(v280 - &v311[v306]) < 0x20)
                goto LABEL_357;
              v314 = (v313 >> 3) + 1;
              v315 = &v311[8 * v307 - 16];
              v316 = v280 - 16;
              v317 = v314 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v318 = *(_OWORD *)v316;
                *(v315 - 1) = *((_OWORD *)v316 - 1);
                *v315 = v318;
                v315 -= 2;
                v316 -= 32;
                v317 -= 4;
              }
              while (v317);
              v312 -= 8 * (v314 & 0x3FFFFFFFFFFFFFFCLL);
              v280 -= 8 * (v314 & 0x3FFFFFFFFFFFFFFCLL);
              if (v314 != (v314 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_357:
                do
                {
                  v319 = *((_QWORD *)v280 - 1);
                  v280 -= 8;
                  *((_QWORD *)v312 - 1) = v319;
                  v312 -= 8;
                }
                while (v280 != v305);
              }
            }
            __src = v312;
            *(_QWORD *)v560 = v281;
            v561 = &v311[8 * v310];
            if (v305)
              operator delete(v305);
            v184 = v540;
            v186 = v444;
            v241 = v454;
          }
          else
          {
            **(_QWORD **)v560 = 0x3FF0000000000000;
            v281 = v280 + 8;
          }
          *(_QWORD *)v560 = v281;
          if (v185 >= (unint64_t *)v450)
          {
            v323 = 0xEEEEEEEEEEEEEEEFLL * (v185 - v184) + 1;
            if (v323 > 0x222222222222222)
              sub_2394189F8();
            if (0xDDDDDDDDDDDDDDDELL * ((v450 - (char *)v184) >> 3) > v323)
              v323 = 0xDDDDDDDDDDDDDDDELL * ((v450 - (char *)v184) >> 3);
            if (0xEEEEEEEEEEEEEEEFLL * ((v450 - (char *)v184) >> 3) >= 0x111111111111111)
              v291 = 0x222222222222222;
            else
              v291 = v323;
            if (v291)
            {
              if (v291 > 0x222222222222222)
                sub_239418A80();
              v292 = (char *)operator new(120 * v291);
            }
            else
            {
              v292 = 0;
            }
            v324 = *v183;
            v294 = &v292[8 * (v185 - v184)];
            v325 = *(_OWORD *)__p;
            *(_OWORD *)(v294 + 40) = v600;
            v326 = *(_OWORD *)&v601[16];
            *(_OWORD *)(v294 + 56) = *(_OWORD *)v601;
            *(_OWORD *)(v294 + 72) = v326;
            v327 = v598;
            *(_QWORD *)v294 = v324;
            *((_QWORD *)v294 + 1) = v327;
            *((_QWORD *)v294 + 2) = 0x3FF0000000000000;
            v328 = *(_QWORD *)&v601[32];
            *(_OWORD *)(v294 + 24) = v325;
            *((_QWORD *)v294 + 11) = v328;
            *((float64_t *)v294 + 12) = v241;
            *((float64_t *)v294 + 13) = v240;
            *((double *)v294 + 14) = v453;
            if (v185 == v184)
              goto LABEL_233;
            v299 = 0;
            do
            {
              v329 = &v294[v299 * 8];
              *((_QWORD *)v329 - 15) = v185[v299 - 15];
              *((_QWORD *)v329 - 14) = v185[v299 - 14];
              *((_QWORD *)v329 - 13) = v185[v299 - 13];
              *((_OWORD *)v329 - 6) = *(_OWORD *)&v185[v299 - 12];
              v330 = *(_OWORD *)&v185[v299 - 10];
              v331 = *(_OWORD *)&v185[v299 - 8];
              v332 = *(_OWORD *)&v185[v299 - 6];
              *((_QWORD *)v329 - 4) = v185[v299 - 4];
              *((_OWORD *)v329 - 4) = v331;
              *((_OWORD *)v329 - 3) = v332;
              *((_OWORD *)v329 - 5) = v330;
              v333 = *(_OWORD *)&v185[v299 - 3];
              *((_QWORD *)v329 - 1) = v185[v299 - 1];
              *(_OWORD *)(v329 - 24) = v333;
              v299 -= 15;
            }
            while (&v185[v299] != v184);
LABEL_232:
            v334 = &v294[v299 * 8];
LABEL_234:
            v450 = &v292[120 * v291];
            v185 = (unint64_t *)(v294 + 120);
            if (v184)
              operator delete(v184);
            v184 = (unint64_t *)v334;
            goto LABEL_114;
          }
          *v185 = *v183;
          v185[1] = (unint64_t)v598;
          v185[2] = 0x3FF0000000000000;
          v320 = *(_QWORD *)&v601[32];
          v321 = *(_OWORD *)&v601[16];
          *(_OWORD *)(v185 + 7) = *(_OWORD *)v601;
          v322 = *(_OWORD *)__p;
          *(_OWORD *)(v185 + 5) = v600;
          *(_OWORD *)(v185 + 9) = v321;
          *(_OWORD *)(v185 + 3) = v322;
          v185[11] = v320;
          *((float64_t *)v185 + 12) = v241;
          *((float64_t *)v185 + 13) = v240;
          *((double *)v185 + 14) = v453;
          v185 += 15;
LABEL_114:
          if (++v190 == 4)
            goto LABEL_107;
        }
        v495 = v238;
        v503 = v237;
        v451 = v237.f64[1];
        v242 = v574;
LABEL_138:
        v243 = sub_239C0BEEC((uint64_t)v242, *v183, v183);
        v465 = *(float64x2_t *)(v243 + 24);
        v469 = *(float64x2_t *)(v243 + 40);
        v473 = *(float64x2_t *)(v243 + 56);
        v478 = *(float64x2_t *)(v243 + 72);
        v483 = *(float64x2_t *)(v243 + 88);
        v489 = *(float64x2_t *)(v243 + 104);
        v459 = *(float64x2_t *)(v243 + 120);
        v462 = *(float64x2_t *)(v243 + 136);
        if (v235 == v586)
          v244 = v571;
        else
          v244 = v577;
        v245 = sub_239C0BEEC((uint64_t)v244, (unint64_t)v598, &v598);
        v246 = (int8x16_t)v503;
        v247 = *(double *)vextq_s8(v246, v246, 8uLL).i64;
        v248 = *(float64x2_t *)(v245 + 40);
        v249 = *(float64x2_t *)(v245 + 24);
        v250 = *(float64x2_t *)(v245 + 72);
        v251 = *(float64x2_t *)(v245 + 56);
        v252 = *(float64x2_t *)(v245 + 104);
        v253 = *(float64x2_t *)(v245 + 88);
        v254 = *(float64x2_t *)(v245 + 136);
        v255 = *(float64x2_t *)(v245 + 120);
        v256 = sqrt(*(double *)v246.i64 * *(double *)v246.i64 + v247 * v247 + v495 * v495);
        v257 = 0.0;
        if (v256 != 0.0 && v256 > 0.000001)
        {
          _Q2 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v249, v459.f64[0]), v251, v459, 1), v253, v462.f64[0]), v255, v462, 1);
          *(_QWORD *)&v259 = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v248, v459.f64[0]), v250, v459, 1), v252, v462.f64[0]), v254, v462, 1);
          _D6 = _Q2.i64[1];
          __asm { FMLA            D5, D6, V2.D[1] }
          v262 = sqrt(vmlad_n_f64(_D5, v259, v259));
          if (v262 != 0.0 && v262 > 0.000001)
          {
            v263 = (v503.f64[0] * *(double *)_Q2.i64 + v247 * *(double *)vextq_s8(_Q2, _Q2, 8uLL).i64 + v495 * v259)
                 / v256
                 / v262;
            if (v263 > 1.0)
              v263 = 1.0;
            if (v263 < -1.0)
              v263 = -1.0;
            v496 = *(float64x2_t *)(v245 + 72);
            v504 = *(float64x2_t *)(v245 + 40);
            v460 = *(float64x2_t *)(v245 + 136);
            v463 = *(float64x2_t *)(v245 + 104);
            v447 = *(float64x2_t *)(v245 + 56);
            v448 = *(float64x2_t *)(v245 + 24);
            v445 = *(float64x2_t *)(v245 + 120);
            v446 = *(float64x2_t *)(v245 + 88);
            v264 = acos(v263);
            v255 = v445;
            v253 = v446;
            v251 = v447;
            v249 = v448;
            v254 = v460;
            v252 = v463;
            v250 = v496;
            v248 = v504;
            v257 = v264 * 180.0;
          }
        }
        v265 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v249, v465.f64[0]), v251, v465, 1), v253, v469.f64[0]), v255, v469, 1);
        v266 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v249, v473.f64[0]), v251, v473, 1), v253, v478.f64[0]), v255, v478, 1);
        v267 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v249, v483.f64[0]), v251, v483, 1), v253, v489.f64[0]), v255, v489, 1);
        v268 = (vmlad_n_f64(vmlad_n_f64(vmulq_f64(v531, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v248, v465.f64[0]), v250, v465, 1), v252, v469.f64[0]), v254, v469, 1)).f64[0], v524, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v248, v473.f64[0]), v250, v473, 1), v252, v478.f64[0]), v254, v478, 1).f64[0]), v455, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v248, v483.f64[0]), v250, v483, 1), v252, v489.f64[0]), v254, v489,
                    1).f64[0])
              + vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v539, v265.f64[0]), v517, v266.f64[0]), v510, v267.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v539, v265, 1), v517, v266, 1), v510, v267, 1), 1)).f64[0]+ -1.0)* 0.5;
        if (v268 > 1.0)
          v268 = 1.0;
        if (v268 < -1.0)
          v268 = -1.0;
        if (acos(v268) * 180.0 / 3.14159265 > 15.0 || v257 / 3.14159265 > 15.0)
          goto LABEL_114;
        v452 = v239;
        v270 = *(char **)v560;
        if (*(_QWORD *)v560 >= (unint64_t)v561)
        {
          v272 = v184;
          v273 = (char *)__src;
          v274 = *(_QWORD *)v560 - (_QWORD)__src;
          v275 = (uint64_t)(*(_QWORD *)v560 - (_QWORD)__src) >> 3;
          v276 = v275 + 1;
          if ((unint64_t)(v275 + 1) >> 61)
            sub_2394189F8();
          v277 = v561 - (_BYTE *)__src;
          if ((v561 - (_BYTE *)__src) >> 2 > v276)
            v276 = v277 >> 2;
          if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8)
            v278 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v278 = v276;
          if (v278)
          {
            if (v278 >> 61)
              sub_239418A80();
            v279 = (char *)operator new(8 * v278);
          }
          else
          {
            v279 = 0;
          }
          v282 = &v279[8 * v275];
          *(_QWORD *)v282 = 0x4008000000000000;
          v271 = v282 + 8;
          if (v270 != v273)
          {
            v283 = v270 - 8 - v273;
            if (v283 < 0x58)
              goto LABEL_358;
            if ((unint64_t)(v270 - &v279[v274]) < 0x20)
              goto LABEL_358;
            v284 = (v283 >> 3) + 1;
            v285 = &v279[8 * v275 - 16];
            v286 = v270 - 16;
            v287 = v284 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v288 = *(_OWORD *)v286;
              *((_OWORD *)v285 - 1) = *((_OWORD *)v286 - 1);
              *(_OWORD *)v285 = v288;
              v285 -= 32;
              v286 -= 32;
              v287 -= 4;
            }
            while (v287);
            v282 -= 8 * (v284 & 0x3FFFFFFFFFFFFFFCLL);
            v270 -= 8 * (v284 & 0x3FFFFFFFFFFFFFFCLL);
            if (v284 != (v284 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_358:
              do
              {
                v289 = *((_QWORD *)v270 - 1);
                v270 -= 8;
                *((_QWORD *)v282 - 1) = v289;
                v282 -= 8;
              }
              while (v270 != v273);
            }
          }
          __src = v282;
          *(_QWORD *)v560 = v271;
          v561 = &v279[8 * v278];
          if (v273)
            operator delete(v273);
          v184 = v272;
          v186 = v444;
        }
        else
        {
          **(_QWORD **)v560 = 0x4008000000000000;
          v271 = v270 + 8;
        }
        *(_QWORD *)v560 = v271;
        if (v185 >= (unint64_t *)v450)
        {
          v290 = 0xEEEEEEEEEEEEEEEFLL * (v185 - v184) + 1;
          if (v290 > 0x222222222222222)
            sub_2394189F8();
          if (0xDDDDDDDDDDDDDDDELL * ((v450 - (char *)v184) >> 3) > v290)
            v290 = 0xDDDDDDDDDDDDDDDELL * ((v450 - (char *)v184) >> 3);
          if (0xEEEEEEEEEEEEEEEFLL * ((v450 - (char *)v184) >> 3) >= 0x111111111111111)
            v291 = 0x222222222222222;
          else
            v291 = v290;
          if (v291)
          {
            if (v291 > 0x222222222222222)
              sub_239418A80();
            v292 = (char *)operator new(120 * v291);
            v186 = v444;
          }
          else
          {
            v292 = 0;
          }
          v293 = *v183;
          v294 = &v292[8 * (v185 - v184)];
          v295 = *(_OWORD *)__p;
          *(_OWORD *)(v294 + 40) = v600;
          v296 = *(_OWORD *)&v601[16];
          *(_OWORD *)(v294 + 56) = *(_OWORD *)v601;
          *(_OWORD *)(v294 + 72) = v296;
          v297 = v598;
          *(_QWORD *)v294 = v293;
          *((_QWORD *)v294 + 1) = v297;
          *((_QWORD *)v294 + 2) = 0x3FF0000000000000;
          v298 = *(_QWORD *)&v601[32];
          *(_OWORD *)(v294 + 24) = v295;
          *((_QWORD *)v294 + 11) = v298;
          *((float64_t *)v294 + 12) = v454;
          *((float64_t *)v294 + 13) = v451;
          *((double *)v294 + 14) = v452;
          if (v185 != v184)
          {
            v299 = 0;
            do
            {
              v300 = &v294[v299 * 8];
              *((_QWORD *)v300 - 15) = v185[v299 - 15];
              *((_QWORD *)v300 - 14) = v185[v299 - 14];
              *((_QWORD *)v300 - 13) = v185[v299 - 13];
              *((_OWORD *)v300 - 6) = *(_OWORD *)&v185[v299 - 12];
              v301 = *(_OWORD *)&v185[v299 - 10];
              v302 = *(_OWORD *)&v185[v299 - 8];
              v303 = *(_OWORD *)&v185[v299 - 6];
              *((_QWORD *)v300 - 4) = v185[v299 - 4];
              *((_OWORD *)v300 - 4) = v302;
              *((_OWORD *)v300 - 3) = v303;
              *((_OWORD *)v300 - 5) = v301;
              v304 = *(_OWORD *)&v185[v299 - 3];
              *((_QWORD *)v300 - 1) = v185[v299 - 1];
              *(_OWORD *)(v300 - 24) = v304;
              v299 -= 15;
            }
            while (&v185[v299] != v184);
            goto LABEL_232;
          }
LABEL_233:
          v334 = v294;
          goto LABEL_234;
        }
        *v185 = *v183;
        v185[1] = (unint64_t)v598;
        v185[2] = 0x3FF0000000000000;
        v191 = *(_QWORD *)&v601[32];
        v192 = *(_OWORD *)&v601[16];
        *(_OWORD *)(v185 + 7) = *(_OWORD *)v601;
        v193 = *(_OWORD *)__p;
        *(_OWORD *)(v185 + 5) = v600;
        *(_OWORD *)(v185 + 9) = v192;
        *(_OWORD *)(v185 + 3) = v193;
        v185[11] = v191;
        *((float64_t *)v185 + 12) = v454;
        *((float64_t *)v185 + 13) = v451;
        *((double *)v185 + 14) = v452;
        v185 += 15;
        goto LABEL_114;
      }
      v184 = 0;
      v185 = 0;
LABEL_238:
      v335 = (void **)v585;
      v336 = v586;
      if (v585 != v586)
      {
        __asm { FMOV            V0.2D, #-1.0 }
        v511 = _Q0;
        do
        {
          v338 = *v335;
          v598 = v338;
          v339 = sub_2395D7BEC((uint64_t)v593, v338);
          if (*((_BYTE *)v339 + 232) != 2)
          {
            sub_239A444D4((uint64_t)"unknown file", 183, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          v340 = *((double *)v339 + 10);
          v341 = *((float64x2_t *)v339 + 4);
          v342 = vextq_s8((int8x16_t)v341, (int8x16_t)v341, 8uLL).u64[0];
          v343 = *((double *)v339 + 14);
          v344 = *((float64x2_t *)v339 + 6);
          *(_QWORD *)&v345 = vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          v346 = *((double *)v339 + 18);
          _Q5 = *((float64x2_t *)v339 + 8);
          *(_QWORD *)&v348 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
          v532 = v339[22];
          v541 = *((int8x16_t *)v339 + 10);
          *(float64x2_t *)memptr = v341;
          *(double *)v543 = v340;
          *(double *)&v543[24] = v343;
          *(float64x2_t *)&v543[8] = v344;
          v545.f64[0] = v346;
          v544 = _Q5;
          v349 = (float64x2_t)vzip1q_s64((int64x2_t)v341, (int64x2_t)v344);
          v350 = (float64x2_t)vzip2q_s64((int64x2_t)v341, (int64x2_t)v344);
          v351.f64[0] = v340;
          v351.f64[1] = v343;
          v352 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v349, v341.f64[0]), v350, v341, 1), v351, v340);
          _Q21 = (int64x2_t)vmulq_f64(_Q5, v341);
          _D22 = v341.f64[1];
          __asm { FMLA            D21, D22, V5.D[1] }
          *(double *)_Q21.i64 = *(double *)_Q21.i64 + v346 * v340;
          v355 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v349, v344.f64[0]), v350, v344, 1), v351, v343);
          _Q23 = (int8x16_t)vmulq_f64(_Q5, v344);
          _D24 = v344.f64[1];
          __asm { FMLA            D23, D24, V5.D[1] }
          _D24 = _Q5.f64[1];
          *(double *)_Q23.i64 = *(double *)_Q23.i64 + v346 * v343;
          v359 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v349, _Q5.f64[0]), v350, _Q5, 1), v351, v346);
          _Q19 = vmulq_f64(_Q5, _Q5);
          __asm { FMLA            D19, D24, V5.D[1] }
          _Q19.f64[0] = _Q19.f64[0] + v346 * v346;
          v361 = (int64x2_t)vaddq_f64(v355, (float64x2_t)xmmword_239EC6830);
          *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, v511));
          _Q19.f64[1] = NAN;
          v362 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v352, (float64x2_t)xmmword_239EC6820)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v361, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v361)), vabsq_f64(v359))));
          v363 = -v343;
          if (v362 > 0.0001
            || (v364.f64[0] = v341.f64[0],
                *(_QWORD *)&v364.f64[1] = v342,
                v365.f64[0] = v348,
                v365.f64[1] = _Q5.f64[0],
                v366.f64[0] = v345,
                v366.f64[1] = v344.f64[0],
                v367 = vmulq_f64(v364, vmlaq_n_f64(vmulq_n_f64(v365, v363), v366, v346)),
                fabs(v340 * (v348 * v344.f64[0] - v345 * _Q5.f64[0])+ vsubq_f64(v367, (float64x2_t)vdupq_laneq_s64((int64x2_t)v367, 1)).f64[0]+ -1.0) > 0.0001))
          {
            if (v362 > 0.1
              || (*(_QWORD *)&v341.f64[1] = v342,
                  v368.f64[0] = v348,
                  v368.f64[1] = _Q5.f64[0],
                  v369 = vmulq_n_f64(v368, v363),
                  v370.f64[0] = v345,
                  v370.f64[1] = v344.f64[0],
                  v371 = vmulq_f64(v341, vmlaq_n_f64(v369, v370, v346)),
                  fabs(v340 * (v348 * v344.f64[0] - v345 * _Q5.f64[0])+ vsubq_f64(v371, (float64x2_t)vdupq_laneq_s64((int64x2_t)v371, 1)).f64[0]+ -1.0) > 0.1))
            {
              sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            sub_239516070((float64x2_t *)memptr);
          }
          *(_OWORD *)v601 = *(_OWORD *)&v543[16];
          *(float64x2_t *)&v601[16] = v544;
          *(float64_t *)&v601[32] = v545.f64[0];
          v600 = *(_OWORD *)v543;
          *(_OWORD *)__p = *(_OWORD *)memptr;
          v372 = sub_239CA9988((uint64_t)v562, (unint64_t)v338, (uint64_t *)&v598);
          v372[3] = 0x3FF0000000000000;
          v373 = *(_OWORD *)__p;
          *((_OWORD *)v372 + 3) = v600;
          v374 = *(_OWORD *)&v601[16];
          *((_OWORD *)v372 + 4) = *(_OWORD *)v601;
          *((_OWORD *)v372 + 5) = v374;
          v375 = v541;
          v372[12] = *(_QWORD *)&v601[32];
          *((_OWORD *)v372 + 2) = v373;
          v372[15] = v532;
          v375.i64[1] = vextq_s8(v375, v375, 8uLL).u64[0];
          *(int8x16_t *)(v372 + 13) = v375;
          ++v335;
        }
        while (v335 != v336);
      }
      sub_239CAAEBC((uint64_t)__p, (uint64_t)v562);
      memset(&v601[8], 0, 32);
      v602 = 1065353216;
      v605 = 0;
      v603 = 0;
      v604 = 0;
      v376 = 0xEEEEEEEEEEEEEEEFLL * (v185 - v184);
      if (v185 != v184)
      {
        if (v376 > 0x222222222222222)
          sub_2394189F8();
        v377 = (char *)operator new((char *)v185 - (char *)v184);
        v603 = v377;
        v604 = v377;
        v605 = &v377[8 * (v185 - v184)];
        v378 = v184;
        do
        {
          *(_QWORD *)v377 = *v378;
          *((_QWORD *)v377 + 1) = v378[1];
          *((_QWORD *)v377 + 2) = v378[2];
          *(_OWORD *)(v377 + 24) = *(_OWORD *)(v378 + 3);
          v379 = *(_OWORD *)(v378 + 5);
          v380 = *(_OWORD *)(v378 + 7);
          v381 = *(_OWORD *)(v378 + 9);
          *((_QWORD *)v377 + 11) = v378[11];
          *(_OWORD *)(v377 + 72) = v381;
          *(_OWORD *)(v377 + 56) = v380;
          *(_OWORD *)(v377 + 40) = v379;
          v382 = *((_OWORD *)v378 + 6);
          *((_QWORD *)v377 + 14) = v378[14];
          *((_OWORD *)v377 + 6) = v382;
          v377 += 120;
          v378 += 15;
        }
        while (v378 != v185);
        v604 = v377;
      }
      memset(v610, 0, sizeof(v610));
      v609 = 0u;
      v608 = 0u;
      v607 = 0u;
      v606 = 0u;
      __asm { FMOV            V0.2D, #1.0 }
      v611 = _Q0;
      v612 = 0xA00000001;
      v613 = 0;
      v614 = xmmword_239F0C440;
      v615 = 0x3EB0C6F7A0B5ED8DLL;
      v616 = 0;
      v617 = 0x3FF7B8BAC710CB29;
      v618 = 0;
      v619 = 0;
      v620 = 0;
      v621 = xmmword_239F0C450;
      v622 = 1;
      v623 = 0x3FF0000000000000;
      v624[23] = 7;
      strcpy(v624, "NOT SET");
      v625[23] = 7;
      strcpy(v625, "NOT SET");
      v626 = 0;
      v627 = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      v474 = _Q0;
      v628 = _Q0;
      v629 = 0u;
      v630 = 0u;
      v631 = 0u;
      v632 = 0u;
      v633 = 0u;
      v634 = 0u;
      v635 = 0u;
      v636 = 0u;
      *(_OWORD *)v637 = 0u;
      v638 = 0;
      v639 = 1065353216;
      *(_QWORD *)&v640 = 0x100000032;
      *((_QWORD *)&v640 + 1) = 0x3FB999999999999ALL;
      *(_OWORD *)v641 = xmmword_239F0C000;
      *(_WORD *)&v641[16] = 257;
      v641[18] = 1;
      *(_QWORD *)&v641[20] = 0x40A0000042480000;
      v642 = 0u;
      v643 = 0u;
      v644 = 0u;
      if (v376 == (uint64_t)(*(_QWORD *)v560 - (_QWORD)__src) >> 3)
      {
        sub_23945D3D0(&v610[1], (char *)__src, *(char **)v560, v376);
        if (v638)
        {
          v385 = v637[1];
          if (v637[1])
          {
            do
            {
              v386 = (_QWORD *)*v385;
              operator delete(v385);
              v385 = v386;
            }
            while (v386);
          }
          v637[1] = 0;
          v387 = v637[0];
          if (v637[0])
          {
            v388 = 0;
            do
            {
              *(_QWORD *)(*((_QWORD *)&v636 + 1) + 8 * (_QWORD)v388) = 0;
              v388 = (char *)v388 + 1;
            }
            while (v387 != v388);
          }
          v638 = 0;
        }
      }
      v389 = (unint64_t *)v585;
      v390 = (unint64_t *)v586;
      if (v585 != v586)
      {
        do
        {
          sub_239465800((uint64_t)&v636 + 8, v389, v389);
          ++v389;
        }
        while (v389 != v390);
      }
      v391 = v441[1];
      v640 = *v441;
      *(_OWORD *)v641 = v391;
      *(_OWORD *)&v641[12] = *(__int128 *)((char *)v441 + 28);
      v39 = sub_239CAB680((uint64_t)__p);
      if ((v39 & 1) != 0)
      {
        sub_239B3BACC((char **)v442, (char **)v593);
        if ((uint64_t *)v442 != v440)
        {
          *(_DWORD *)(v442 + 488) = *((_DWORD *)v440 + 122);
          sub_239A99678((_QWORD *)(v442 + 456), (const std::string *)v440[59]);
        }
        v394 = (void **)v582;
        v395 = v583;
        if (v582 != v583)
        {
          do
          {
            v397 = (unint64_t)*v394;
            v398 = (void **)v585;
            if (v585 != v586)
            {
              while (*v398 != (void *)v397)
              {
                if (++v398 == v586)
                {
                  v398 = v586;
                  break;
                }
              }
            }
            if (v398 != v586)
            {
              v399 = sub_2395D7BEC((uint64_t)v593, *v394);
              sub_2395F81B8((uint64_t)memptr, (uint64_t)v399);
              if (v555 != 2)
              {
                sub_239A444D4((uint64_t)"unknown file", 213, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
              v556 = 1;
              sub_2395D7584(v442, v397, (char *)memptr);
              if (v558 < 0)
                operator delete(v557);
              v396 = *(void **)&v543[24];
              goto LABEL_268;
            }
            if (!__p[1])
              goto LABEL_332;
            v400 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v400.i16[0] = vaddlv_u8(v400);
            if (v400.u32[0] > 1uLL)
            {
              v401 = (unint64_t)*v394;
              if ((void *)v397 >= __p[1])
                v401 = v397 % (unint64_t)__p[1];
            }
            else
            {
              v401 = ((unint64_t)__p[1] - 1) & v397;
            }
            v402 = (uint64_t **)*((_QWORD *)__p[0] + v401);
            if (!v402 || (v403 = *v402) == 0)
LABEL_332:
              sub_23941D898("unordered_map::at: key not found");
            if (v400.u32[0] < 2uLL)
            {
              while (1)
              {
                v405 = v403[1];
                if (v397 == v405)
                {
                  if (v403[2] == v397)
                    goto LABEL_297;
                }
                else if ((v405 & ((unint64_t)__p[1] - 1)) != v401)
                {
                  goto LABEL_332;
                }
                v403 = (uint64_t *)*v403;
                if (!v403)
                  goto LABEL_332;
              }
            }
            while (1)
            {
              v404 = v403[1];
              if (v397 == v404)
                break;
              if ((void *)v404 >= __p[1])
                v404 %= (unint64_t)__p[1];
              if (v404 != v401)
                goto LABEL_332;
LABEL_287:
              v403 = (uint64_t *)*v403;
              if (!v403)
                goto LABEL_332;
            }
            if (v403[2] != v397)
              goto LABEL_287;
LABEL_297:
            *(_QWORD *)&v392.f64[0] = v403[3];
            v525 = v392;
            *(_QWORD *)&v392.f64[0] = v403[15];
            v518 = v392;
            v533 = *(float64x2_t *)(v403 + 13);
            memptr[0] = 0;
            malloc_type_posix_memalign(memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
            v406 = memptr[0];
            if (!memptr[0])
            {
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v437 = std::bad_alloc::bad_alloc(exception);
              __cxa_throw(v437, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
            }
            *((_QWORD *)memptr[0] + 4) = 0;
            *v406 = 0u;
            v406[1] = 0u;
            v479 = v403[6];
            v484 = *((int8x16_t *)v403 + 2);
            v490 = v403[9];
            v497 = *(int8x16_t *)(v403 + 7);
            v505 = v403[12];
            v512 = *((int8x16_t *)v403 + 5);
            v407 = sub_2395D7BEC((uint64_t)v588, v397);
            sub_2395F81B8((uint64_t)memptr, (uint64_t)v407);
            *(_OWORD *)memptr = v474;
            *(_OWORD *)v543 = v474;
            v543[16] = 1;
            v408 = *(_QWORD **)&v543[24];
            if (*(_QWORD *)&v544.f64[0] <= 4uLL)
            {
              free(*(void **)&v543[24]);
              *(_QWORD *)&v543[24] = 0;
              *(_QWORD *)&v544.f64[0] = 8;
              v598 = 0;
              malloc_type_posix_memalign(&v598, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
              v408 = v598;
              *(_QWORD *)&v543[24] = v598;
              if (!v598)
              {
                v438 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                v439 = std::bad_alloc::bad_alloc(v438);
                __cxa_throw(v439, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
              }
            }
            v409 = (int8x16_t)vdivq_f64(v533, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v525.f64[0], 0));
            v410 = *v406;
            v411 = v406[1];
            v412 = v484;
            v413 = v497;
            v414 = v512;
            v408[4] = *((_QWORD *)v406 + 4);
            *(_OWORD *)v408 = v410;
            *((_OWORD *)v408 + 1) = v411;
            LODWORD(v544.f64[1]) = 5;
            v546 = v479;
            v412.i64[1] = vextq_s8(v412, v412, 8uLL).u64[0];
            v545 = (float64x2_t)v412;
            v548 = (float64x2_t)v490;
            v413.i64[1] = vextq_s8(v413, v413, 8uLL).u64[0];
            v547 = (float64x2_t)v413;
            v550 = v505;
            v414.i64[1] = vextq_s8(v414, v414, 8uLL).u64[0];
            v549 = v414;
            v551 = 0;
            v553 = *(_OWORD *)&vdivq_f64(v518, v525);
            v409.i64[1] = vextq_s8(v409, v409, 8uLL).u64[0];
            v552 = v409;
            v554 = 0x3FF0000000000000;
            v556 = 0;
            v555 = 2;
            sub_2395D7584(v442, v397, (char *)memptr);
            if (v558 < 0)
              operator delete(v557);
            free(*(void **)&v543[24]);
            v396 = v406;
LABEL_268:
            free(v396);
            ++v394;
          }
          while (v394 != v395);
        }
        v392.f64[0] = 1.0 / v73;
        sub_239B60624(v442, 0, v392, v393);
        v415.f64[0] = v581;
        v416 = vnegq_f64(v415);
        *(float64x2_t *)memptr = vnegq_f64(v580);
        *(float64_t *)v543 = v416.f64[0];
        sub_2396F62C4(v442, (uint64_t)memptr, 0, v416, *(double *)memptr, v417);
      }
      sub_239CA9E84((uint64_t)__p);
      if (__src)
      {
        *(_QWORD *)v560 = __src;
        operator delete(__src);
      }
      if (v184)
        operator delete(v184);
      v418 = v563[0];
      if (v563[0])
      {
        do
        {
          v419 = (_QWORD *)*v418;
          operator delete(v418);
          v418 = v419;
        }
        while (v419);
      }
      v420 = v562[0];
      v562[0] = 0;
      if (v420)
        operator delete(v420);
      v421 = v566[0];
      if (v566[0])
      {
        do
        {
          v422 = (_QWORD *)*v421;
          operator delete(v421);
          v421 = v422;
        }
        while (v422);
      }
      v423 = v565[0];
      v565[0] = 0;
      if (v423)
        operator delete(v423);
      v424 = v569[0];
      if (v569[0])
      {
        do
        {
          v425 = (_QWORD *)*v424;
          operator delete(v424);
          v424 = v425;
        }
        while (v425);
      }
      v426 = v568[0];
      v568[0] = 0;
      if (v426)
        operator delete(v426);
      v427 = v572[0];
      if (v572[0])
      {
        do
        {
          v428 = (_QWORD *)*v427;
          operator delete(v427);
          v427 = v428;
        }
        while (v428);
      }
      v429 = v571[0];
      v571[0] = 0;
      if (v429)
        operator delete(v429);
      v430 = v575[0];
      if (v575[0])
      {
        do
        {
          v431 = (_QWORD *)*v430;
          operator delete(v430);
          v430 = v431;
        }
        while (v431);
      }
      v432 = v574[0];
      v574[0] = 0;
      if (v432)
        operator delete(v432);
      v433 = v578[0];
      if (v578[0])
      {
        do
        {
          v434 = (_QWORD *)*v433;
          operator delete(v433);
          v433 = v434;
        }
        while (v434);
      }
      v435 = v577[0];
      v577[0] = 0;
      if (v435)
        operator delete(v435);
    }
    v12 = (void **)v582;
    if (!v582)
      goto LABEL_66;
    goto LABEL_65;
  }
  v11 = *((_DWORD *)v9 + 49);
  while (v11 == *((_DWORD *)sub_2395D7BEC((uint64_t)v588, *v10) + 49))
  {
    if (++v10 == (_QWORD *)v8)
      goto LABEL_6;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v39 = 1;
LABEL_68:
  sub_239A4E1A4(v592);
  sub_239A4E2B0((uint64_t)v591);
  v126 = v590;
  if (v590)
  {
    do
    {
      v131 = (_QWORD *)*v126;
      v132 = (_QWORD *)v126[16];
      if (v132)
      {
        do
        {
          v133 = (_QWORD *)*v132;
          operator delete(v132);
          v132 = v133;
        }
        while (v133);
      }
      v134 = (void *)v126[14];
      v126[14] = 0;
      if (v134)
        operator delete(v134);
      if (*((_BYTE *)v126 + 104))
        sub_239916980((uint64_t)(v126 + 9));
      operator delete(v126);
      v126 = v131;
    }
    while (v131);
  }
  v127 = v589;
  v589 = 0;
  if (v127)
    operator delete(v127);
  if (v588[0])
  {
    v588[1] = v588[0];
    operator delete(v588[0]);
  }
  sub_239A4E1A4(v597);
  sub_239A4E2B0((uint64_t)v596);
  v128 = v595;
  if (v595)
  {
    do
    {
      v135 = (_QWORD *)*v128;
      v136 = (_QWORD *)v128[16];
      if (v136)
      {
        do
        {
          v137 = (_QWORD *)*v136;
          operator delete(v136);
          v136 = v137;
        }
        while (v137);
      }
      v138 = (void *)v128[14];
      v128[14] = 0;
      if (v138)
        operator delete(v138);
      if (*((_BYTE *)v128 + 104))
        sub_239916980((uint64_t)(v128 + 9));
      operator delete(v128);
      v128 = v135;
    }
    while (v135);
  }
  v129 = v594;
  v594 = 0;
  if (v129)
    operator delete(v129);
  if (v593[0])
  {
    v593[1] = v593[0];
    operator delete(v593[0]);
  }
  return v39;
}

void sub_239CA94AC(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)STACK[0x430];
  if (STACK[0x430])
  {
    STACK[0x438] = (unint64_t)v2;
    operator delete(v2);
    v3 = (void *)STACK[0x460];
    if (!STACK[0x460])
    {
LABEL_3:
      v4 = (void *)STACK[0x4A8];
      if (!STACK[0x4A8])
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v3 = (void *)STACK[0x460];
    if (!STACK[0x460])
      goto LABEL_3;
  }
  STACK[0x468] = (unint64_t)v3;
  operator delete(v3);
  v4 = (void *)STACK[0x4A8];
  if (!STACK[0x4A8])
  {
LABEL_4:
    v5 = (void *)STACK[0x4C0];
    if (!STACK[0x4C0])
      goto LABEL_10;
LABEL_9:
    STACK[0x4C8] = (unint64_t)v5;
    operator delete(v5);
LABEL_10:
    sub_239A4F8AC((uint64_t)&STACK[0x4D8]);
    sub_239A4F8AC((uint64_t)&STACK[0x6A0]);
    _Unwind_Resume(a1);
  }
LABEL_8:
  STACK[0x4B0] = (unint64_t)v4;
  operator delete(v4);
  v5 = (void *)STACK[0x4C0];
  if (!STACK[0x4C0])
    goto LABEL_10;
  goto LABEL_9;
}

_QWORD *sub_239CA9988(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x80uLL);
  *v10 = 0;
  v10[1] = v5;
  v13 = *a3;
  *((_OWORD *)v10 + 2) = xmmword_239F13A00;
  *((_OWORD *)v10 + 3) = *(_OWORD *)algn_239F13A10;
  v10[2] = v13;
  v10[3] = 0x3FF0000000000000;
  *((_OWORD *)v10 + 4) = xmmword_239F13A20;
  *((_OWORD *)v10 + 5) = *(_OWORD *)dbl_239F13A30;
  v10[12] = 0x3FF0000000000000;
  v10[13] = 0;
  v10[14] = 0;
  v10[15] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_239A501C8(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v23 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_239CA9C70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239CA9C84(char **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v9 = a1[1];
  v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 >= v8)
  {
    v15 = *a1;
    v16 = 0xEEEEEEEEEEEEEEEFLL * ((v9 - *a1) >> 3);
    v17 = v16 + 1;
    if (v16 + 1 > 0x222222222222222)
      sub_2394189F8();
    v18 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v8 - (_QWORD)v15) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x111111111111111)
      v19 = 0x222222222222222;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 > 0x222222222222222)
        sub_239418A80();
      v20 = (char *)operator new(120 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = *a3;
    v22 = &v20[120 * v16];
    *(_QWORD *)v22 = a2;
    *((_QWORD *)v22 + 1) = v21;
    *((_QWORD *)v22 + 2) = *(_QWORD *)a4;
    *(_OWORD *)(v22 + 40) = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(v22 + 56) = *(_OWORD *)(a4 + 40);
    *(_OWORD *)(v22 + 72) = *(_OWORD *)(a4 + 56);
    *((_QWORD *)v22 + 11) = *(_QWORD *)(a4 + 72);
    *(_OWORD *)(v22 + 24) = *(_OWORD *)(a4 + 8);
    *((_OWORD *)v22 + 6) = *(_OWORD *)(a4 + 80);
    v23 = *(_QWORD *)(a4 + 96);
    v14 = v22 + 120;
    *((_QWORD *)v22 + 14) = v23;
    if (v9 != v15)
    {
      v24 = 0;
      do
      {
        v25 = &v22[v24];
        *((_QWORD *)v25 - 15) = *(_QWORD *)&v9[v24 - 120];
        *((_QWORD *)v25 - 14) = *(_QWORD *)&v9[v24 - 112];
        *((_QWORD *)v25 - 13) = *(_QWORD *)&v9[v24 - 104];
        *((_OWORD *)v25 - 6) = *(_OWORD *)&v9[v24 - 96];
        v26 = *(_OWORD *)&v9[v24 - 80];
        v27 = *(_OWORD *)&v9[v24 - 64];
        v28 = *(_OWORD *)&v9[v24 - 48];
        *((_QWORD *)v25 - 4) = *(_QWORD *)&v9[v24 - 32];
        *((_OWORD *)v25 - 4) = v27;
        *((_OWORD *)v25 - 3) = v28;
        *((_OWORD *)v25 - 5) = v26;
        v29 = *(_OWORD *)&v9[v24 - 24];
        *((_QWORD *)v25 - 1) = *(_QWORD *)&v9[v24 - 8];
        *(_OWORD *)(v25 - 24) = v29;
        v24 -= 120;
      }
      while (&v9[v24] != v15);
      v22 += v24;
      v9 = *a1;
    }
    *a1 = v22;
    a1[1] = v14;
    a1[2] = &v20[120 * v19];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v9 = a2;
    *((_QWORD *)v9 + 1) = *a3;
    *((_QWORD *)v9 + 2) = *(_QWORD *)a4;
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(a4 + 8);
    v10 = *(_OWORD *)(a4 + 24);
    v11 = *(_OWORD *)(a4 + 40);
    v12 = *(_OWORD *)(a4 + 56);
    *((_QWORD *)v9 + 11) = *(_QWORD *)(a4 + 72);
    *(_OWORD *)(v9 + 72) = v12;
    *(_OWORD *)(v9 + 56) = v11;
    *(_OWORD *)(v9 + 40) = v10;
    v13 = *(_OWORD *)(a4 + 80);
    *((_QWORD *)v9 + 14) = *(_QWORD *)(a4 + 96);
    *((_OWORD *)v9 + 6) = v13;
    v14 = v9 + 120;
  }
  a1[1] = v14;
}

uint64_t sub_239CA9E84(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v27;
  void *v28;

  v2 = *(void **)(a1 + 712);
  if (v2)
  {
    *(_QWORD *)(a1 + 720) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 688);
  if (v3)
  {
    *(_QWORD *)(a1 + 696) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD **)(a1 + 616);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(void **)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(void **)(a1 + 576);
  if (v7)
  {
    *(_QWORD *)(a1 + 584) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 536);
  if (v8)
  {
    *(_QWORD *)(a1 + 544) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 504);
  if (v9)
  {
    *(_QWORD *)(a1 + 512) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 480);
  if (v10)
  {
    *(_QWORD *)(a1 + 488) = v10;
    operator delete(v10);
  }
  if (*(char *)(a1 + 447) < 0)
  {
    operator delete(*(void **)(a1 + 424));
    if ((*(char *)(a1 + 423) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((*(char *)(a1 + 423) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(*(void **)(a1 + 400));
LABEL_19:
  v11 = *(_QWORD **)(a1 + 360);
  if (v11 == (_QWORD *)(a1 + 336))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 336);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = *(_QWORD **)(a1 + 328);
  if (v13 == (_QWORD *)(a1 + 304))
  {
    v14 = 4;
    v13 = (_QWORD *)(a1 + 304);
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
  v15 = *(void **)(a1 + 200);
  if (v15)
  {
    *(_QWORD *)(a1 + 208) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 176);
  if (v16)
  {
    *(_QWORD *)(a1 + 184) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 152);
  if (v17)
  {
    *(_QWORD *)(a1 + 160) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 128);
  if (v18)
  {
    *(_QWORD *)(a1 + 136) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 104);
  if (v19)
  {
    *(_QWORD *)(a1 + 112) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 80);
  if (v20)
  {
    *(_QWORD *)(a1 + 88) = v20;
    operator delete(v20);
  }
  v21 = *(_QWORD **)(a1 + 56);
  if (v21)
  {
    do
    {
      v27 = (_QWORD *)*v21;
      v28 = (void *)v21[8];
      if (v28)
      {
        v21[9] = v28;
        operator delete(v28);
      }
      operator delete(v21);
      v21 = v27;
    }
    while (v27);
  }
  v22 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v22)
    operator delete(v22);
  v23 = *(_QWORD **)(a1 + 16);
  if (v23)
  {
    do
    {
      v24 = (_QWORD *)*v23;
      operator delete(v23);
      v23 = v24;
    }
    while (v24);
  }
  v25 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v25)
    operator delete(v25);
  return a1;
}

uint64_t sub_239CAA088(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  char v31;
  void *v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  std::chrono::system_clock::time_point v37;
  uint64_t v38;
  int v39;
  void *__dst;
  void *v41;
  uint64_t *v42;
  void *p_dst;
  char v44;
  int v45;
  void *v46;
  void *v47;
  void *__p;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54[79];
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int128 v59[23];
  __int128 v60[3];
  _OWORD v61[2];
  _QWORD v62[3];
  _QWORD *v63;
  _BYTE v64[24];
  _BYTE *v65;
  _OWORD v66[2];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v39 = a4;
  v37.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v38 = a1;
  v17 = *(_OWORD *)a5;
  v60[1] = *(_OWORD *)(a5 + 16);
  v18 = *(_OWORD *)(a5 + 48);
  v60[2] = *(_OWORD *)(a5 + 32);
  v61[0] = v18;
  *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)(a5 + 57);
  v60[0] = v17;
  v19 = v62;
  v20 = *(_QWORD *)(a5 + 104);
  if (v20)
  {
    if (v20 == a5 + 80)
    {
      v63 = v62;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v20 + 24))(v20, v62);
    }
    else
    {
      v63 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    }
  }
  else
  {
    v63 = 0;
  }
  v21 = v64;
  v22 = *(_QWORD *)(a5 + 136);
  if (!v22)
    goto LABEL_9;
  if (v22 != a5 + 112)
  {
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
LABEL_9:
    v65 = (_BYTE *)v22;
    goto LABEL_11;
  }
  v65 = v64;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v22 + 24))(v22, v64);
LABEL_11:
  v66[0] = *(_OWORD *)(a5 + 144);
  *(_OWORD *)((char *)v66 + 12) = *(_OWORD *)(a5 + 156);
  v23 = *(_DWORD *)(a5 + 164);
  if (v23 == 1)
  {
    sub_239DB1604((uint64_t)v54, *a2, a2[1], a3, &v39);
    __dst = &off_250AFCA08;
    v41 = a7;
    v42 = v54;
    p_dst = &__dst;
    sub_23965A910(&__dst, v62);
    v26 = p_dst;
    if (p_dst == &__dst)
    {
      v27 = 4;
      v26 = &__dst;
    }
    else
    {
      if (!p_dst)
        goto LABEL_39;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_39:
    sub_239DB1C0C((uint64_t)v54, (uint64_t)v60);
    if (*(_BYTE *)(a6 + 24))
    {
      if (!sub_239DB1DB4((uint64_t)v54, (unint64_t **)a6)
        || !sub_239DB2C2C((uint64_t)v54)
        || !sub_239DB3BC0((uint64_t)v54)
        || !sub_239DB4D7C(v54))
      {
        goto LABEL_44;
      }
      goto LABEL_57;
    }
    __dst = 0;
    v41 = 0;
    v42 = 0;
    sub_2394B5624(v54[0], (uint64_t)&__dst, 1);
    if (sub_239DB1DB4((uint64_t)v54, (unint64_t **)&__dst)
      && sub_239DB2C2C((uint64_t)v54)
      && sub_239DB3BC0((uint64_t)v54))
    {
      v31 = sub_239DB4D7C(v54);
      v32 = __dst;
      if (!__dst)
      {
LABEL_56:
        if ((v31 & 1) == 0)
        {
LABEL_44:
          sub_239CAA978((uint64_t)v54);
          v28 = 0;
          goto LABEL_66;
        }
LABEL_57:
        LODWORD(__dst) = v55;
        v42 = 0;
        p_dst = 0;
        v41 = 0;
        if (v57 != v56 && v57 - v56 < 0)
          sub_2394189F8();
        v29 = v58;
        sub_239CAA978((uint64_t)v54);
        goto LABEL_60;
      }
    }
    else
    {
      v31 = 0;
      v32 = __dst;
      if (!__dst)
        goto LABEL_56;
    }
    v41 = v32;
    operator delete(v32);
    goto LABEL_56;
  }
  if (v23)
  {
    v28 = 0;
    goto LABEL_66;
  }
  sub_239D00E14((uint64_t)v54, *a2, a2[1], a3, &v39, a9, a10);
  __dst = &off_250AFC9C0;
  v41 = a7;
  v42 = v54;
  p_dst = &__dst;
  sub_23965A910(&__dst, v62);
  v24 = p_dst;
  if (p_dst == &__dst)
  {
    v25 = 4;
    v24 = &__dst;
  }
  else
  {
    if (!p_dst)
      goto LABEL_22;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_22:
  sub_239D01100((uint64_t)v54, v60);
  if (!*(_BYTE *)(a6 + 24))
  {
    __dst = 0;
    v41 = 0;
    v42 = 0;
    sub_2394B5624(v54[0], (uint64_t)&__dst, 1);
    v30 = sub_239D01328((uint64_t)v54, (unint64_t **)&__dst);
    if (__dst)
    {
      v41 = __dst;
      operator delete(__dst);
    }
    if (v30)
      goto LABEL_24;
LABEL_48:
    sub_239C034C4((uint64_t)v54);
    v28 = 0;
    goto LABEL_66;
  }
  if (!sub_239D01328((uint64_t)v54, (unint64_t **)a6))
    goto LABEL_48;
LABEL_24:
  sub_239CAA6A8((char *)&__dst, v59);
  v29 = v45;
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v44 < 0)
    operator delete(p_dst);
  if (SHIBYTE(v42) < 0)
    operator delete(__dst);
  sub_239C034C4((uint64_t)v54);
LABEL_60:
  v33 = (float)(std::chrono::system_clock::now().__d_.__rep_ - v37.__d_.__rep_) / 1000000.0;
  switch(a4)
  {
    case 1:
      *(_QWORD *)(v38 + 248) += v29;
      *(float *)(v38 + 456) = v33 + *(float *)(v38 + 456);
      break;
    case 2:
      *(_QWORD *)(v38 + 256) += v29;
      *(float *)(v38 + 460) = v33 + *(float *)(v38 + 460);
      break;
    case 3:
      *(_QWORD *)(v38 + 264) += v29;
      *(float *)(v38 + 464) = v33 + *(float *)(v38 + 464);
      break;
    case 4:
      *(_QWORD *)(v38 + 272) = v29;
      *(float *)(v38 + 468) = v33;
      break;
    default:
      break;
  }
  v28 = 1;
LABEL_66:
  if (v65 == v64)
  {
    v34 = 4;
  }
  else
  {
    if (!v65)
      goto LABEL_71;
    v34 = 5;
    v21 = v65;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v34))(v21);
LABEL_71:
  if (v63 == v62)
  {
    v35 = 4;
    goto LABEL_75;
  }
  if (v63)
  {
    v35 = 5;
    v19 = v63;
LABEL_75:
    (*(void (**)(_QWORD *))(*v19 + 8 * v35))(v19);
  }
  return v28;
}

void sub_239CAA5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (__p)
    operator delete(__p);
  sub_239CAA978((uint64_t)&a38);
  sub_239A62FA8(&STACK[0x500]);
  _Unwind_Resume(a1);
}

void sub_239CAA66C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 104);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 104);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

char *sub_239CAA6A8(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;

  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_23941A7F8(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  v6 = a2[3];
  v7 = a2[4];
  *((_QWORD *)__dst + 10) = 0;
  *((_OWORD *)__dst + 3) = v6;
  *((_OWORD *)__dst + 4) = v7;
  *((_QWORD *)__dst + 11) = 0;
  *((_QWORD *)__dst + 12) = 0;
  v9 = (_BYTE *)*((_QWORD *)a2 + 10);
  v8 = (_BYTE *)*((_QWORD *)a2 + 11);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      sub_2394189F8();
    v11 = (char *)operator new(v8 - v9);
    *((_QWORD *)__dst + 10) = v11;
    *((_QWORD *)__dst + 11) = v11;
    v12 = &v11[8 * (v10 >> 3)];
    *((_QWORD *)__dst + 12) = v12;
    memcpy(v11, v9, v10);
    *((_QWORD *)__dst + 11) = v12;
  }
  *((_QWORD *)__dst + 13) = 0;
  *((_QWORD *)__dst + 14) = 0;
  *((_QWORD *)__dst + 15) = 0;
  v14 = (_BYTE *)*((_QWORD *)a2 + 13);
  v13 = (_BYTE *)*((_QWORD *)a2 + 14);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      sub_2394189F8();
    v16 = (char *)operator new(v13 - v14);
    *((_QWORD *)__dst + 13) = v16;
    *((_QWORD *)__dst + 14) = v16;
    v17 = &v16[8 * (v15 >> 3)];
    *((_QWORD *)__dst + 15) = v17;
    memcpy(v16, v14, v15);
    *((_QWORD *)__dst + 14) = v17;
  }
  v18 = *((_QWORD *)a2 + 16);
  *((_QWORD *)__dst + 17) = 0;
  *((_QWORD *)__dst + 16) = v18;
  *((_QWORD *)__dst + 18) = 0;
  *((_QWORD *)__dst + 19) = 0;
  v20 = (_BYTE *)*((_QWORD *)a2 + 17);
  v19 = (_BYTE *)*((_QWORD *)a2 + 18);
  v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0)
      sub_2394189F8();
    v22 = (char *)operator new(v19 - v20);
    *((_QWORD *)__dst + 17) = v22;
    *((_QWORD *)__dst + 18) = v22;
    v23 = &v22[8 * (v21 >> 3)];
    *((_QWORD *)__dst + 19) = v23;
    memcpy(v22, v20, v21);
    *((_QWORD *)__dst + 18) = v23;
  }
  v24 = a2[10];
  *((_QWORD *)__dst + 22) = 0;
  *((_OWORD *)__dst + 10) = v24;
  *((_QWORD *)__dst + 23) = 0;
  *((_QWORD *)__dst + 24) = 0;
  v26 = (_BYTE *)*((_QWORD *)a2 + 22);
  v25 = (_BYTE *)*((_QWORD *)a2 + 23);
  v27 = v25 - v26;
  if (v25 != v26)
  {
    if (v27 < 0)
      sub_2394189F8();
    v28 = (char *)operator new(v25 - v26);
    *((_QWORD *)__dst + 22) = v28;
    *((_QWORD *)__dst + 23) = v28;
    v29 = &v28[8 * (v27 >> 3)];
    *((_QWORD *)__dst + 24) = v29;
    memcpy(v28, v26, v27);
    *((_QWORD *)__dst + 23) = v29;
  }
  return __dst;
}

void sub_239CAA89C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239CAA978(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void **v23;
  void **v24;
  void *v25;
  void **v26;
  void **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;

  v2 = *(std::__shared_weak_count **)(a1 + 936);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 920);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 848));
  v8 = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(a1 + 832) = 0;
  if (v8)
    (*(void (**)(void))(a1 + 840))();
  v9 = *(void **)(a1 + 808);
  if (v9)
  {
    *(_QWORD *)(a1 + 816) = v9;
    operator delete(v9);
  }
  v10 = *(_QWORD **)(a1 + 768);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = *(void **)(a1 + 752);
  *(_QWORD *)(a1 + 752) = 0;
  if (v12)
    operator delete(v12);
  v13 = *(_QWORD **)(a1 + 728);
  if (v13)
  {
    do
    {
      v14 = (_QWORD *)*v13;
      operator delete(v13);
      v13 = v14;
    }
    while (v14);
  }
  v15 = *(void **)(a1 + 712);
  *(_QWORD *)(a1 + 712) = 0;
  if (v15)
    operator delete(v15);
  v16 = *(_QWORD **)(a1 + 688);
  if (v16)
  {
    do
    {
      v17 = (_QWORD *)*v16;
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v18 = *(void **)(a1 + 672);
  *(_QWORD *)(a1 + 672) = 0;
  if (v18)
    operator delete(v18);
  v19 = *(void **)(a1 + 640);
  if (v19)
  {
    *(_QWORD *)(a1 + 648) = v19;
    operator delete(v19);
  }
  v20 = *(_QWORD **)(a1 + 608);
  if (v20)
  {
    do
    {
      v21 = (_QWORD *)*v20;
      operator delete(v20);
      v20 = v21;
    }
    while (v21);
  }
  v22 = *(void **)(a1 + 592);
  *(_QWORD *)(a1 + 592) = 0;
  if (v22)
    operator delete(v22);
  v23 = *(void ***)(a1 + 568);
  if (v23)
  {
    do
    {
      v24 = (void **)*v23;
      free(v23[8]);
      operator delete(v23);
      v23 = v24;
    }
    while (v24);
  }
  v25 = *(void **)(a1 + 552);
  *(_QWORD *)(a1 + 552) = 0;
  if (v25)
    operator delete(v25);
  v26 = *(void ***)(a1 + 528);
  if (v26)
  {
    do
    {
      v27 = (void **)*v26;
      free(v26[8]);
      operator delete(v26);
      v26 = v27;
    }
    while (v27);
  }
  v28 = *(void **)(a1 + 512);
  *(_QWORD *)(a1 + 512) = 0;
  if (v28)
    operator delete(v28);
  v29 = *(_QWORD **)(a1 + 488);
  if (v29)
  {
    do
    {
      v30 = (_QWORD *)*v29;
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
  v31 = *(void **)(a1 + 472);
  *(_QWORD *)(a1 + 472) = 0;
  if (v31)
    operator delete(v31);
  v32 = *(_QWORD **)(a1 + 448);
  if (v32)
  {
    do
    {
      v33 = (_QWORD *)*v32;
      operator delete(v32);
      v32 = v33;
    }
    while (v33);
  }
  v34 = *(void **)(a1 + 432);
  *(_QWORD *)(a1 + 432) = 0;
  if (v34)
    operator delete(v34);
  v35 = *(_QWORD **)(a1 + 408);
  if (v35)
  {
    do
    {
      v36 = (_QWORD *)*v35;
      operator delete(v35);
      v35 = v36;
    }
    while (v36);
  }
  v37 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v37)
    operator delete(v37);
  v38 = *(_QWORD **)(a1 + 368);
  if (v38)
  {
    do
    {
      v39 = (_QWORD *)*v38;
      operator delete(v38);
      v38 = v39;
    }
    while (v39);
  }
  v40 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = 0;
  if (v40)
    operator delete(v40);
  v41 = *(_QWORD *)(a1 + 328);
  if (v41)
  {
    v42 = *(_QWORD *)(a1 + 336);
    v43 = *(void **)(a1 + 328);
    if (v42 != v41)
    {
      v44 = *(_QWORD *)(a1 + 336);
      do
      {
        v46 = *(void **)(v44 - 24);
        v44 -= 24;
        v45 = v46;
        if (v46)
        {
          *(_QWORD *)(v42 - 16) = v45;
          operator delete(v45);
        }
        v42 = v44;
      }
      while (v44 != v41);
      v43 = *(void **)(a1 + 328);
    }
    *(_QWORD *)(a1 + 336) = v41;
    operator delete(v43);
  }
  v47 = *(void **)(a1 + 304);
  if (v47)
  {
    *(_QWORD *)(a1 + 312) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(a1 + 280);
  if (v48)
  {
    *(_QWORD *)(a1 + 288) = v48;
    operator delete(v48);
  }
  v49 = *(_QWORD **)(a1 + 256);
  if (v49)
  {
    do
    {
      v50 = (_QWORD *)*v49;
      operator delete(v49);
      v49 = v50;
    }
    while (v50);
  }
  v51 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v51)
    operator delete(v51);
  v52 = *(void **)(a1 + 216);
  if (v52)
  {
    *(_QWORD *)(a1 + 224) = v52;
    operator delete(v52);
  }
  v53 = *(_QWORD **)(a1 + 176);
  if (v53 == (_QWORD *)(a1 + 152))
  {
    v54 = 4;
    v53 = (_QWORD *)(a1 + 152);
  }
  else
  {
    if (!v53)
      goto LABEL_80;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_80:
  v55 = *(_QWORD **)(a1 + 144);
  if (v55 == (_QWORD *)(a1 + 120))
  {
    v56 = 4;
    v55 = (_QWORD *)(a1 + 120);
    goto LABEL_84;
  }
  if (v55)
  {
    v56 = 5;
LABEL_84:
    (*(void (**)(void))(*v55 + 8 * v56))();
  }
  v57 = *(std::__shared_weak_count **)(a1 + 24);
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = *(std::__shared_weak_count **)(a1 + 8);
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return a1;
}

void sub_239CAAD70()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239CAAD84(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFCA08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239CAADBC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFCA08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239CAADDC(uint64_t a1)
{
  uint64_t result;

  result = sub_2396FD7B0(*(_QWORD *)(a1 + 8));
  if ((_DWORD)result)
    atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 792));
  return result;
}

void sub_239CAAE18()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239CAAE2C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFC9C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239CAAE64(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFC9C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239CAAE84(uint64_t a1)
{
  uint64_t result;

  result = sub_2396FD7B0(*(_QWORD *)(a1 + 8));
  if ((_DWORD)result)
    atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 1016));
  return result;
}

uint64_t sub_239CAAEBC(uint64_t a1, uint64_t a2)
{
  unint64_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239A501C8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  v10 = *(uint64_t **)(a2 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 8);
    do
    {
      v13 = v10[2];
      if (v12)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          prime = v10[2];
          if (v13 >= v12)
            prime = v13 % v12;
        }
        else
        {
          prime = (v12 - 1) & v13;
        }
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
        if (v15)
        {
          v16 = (_QWORD *)*v15;
          if (v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                v18 = v16[1];
                if (v18 == v13)
                {
                  if (v16[2] == v13)
                    goto LABEL_79;
                }
                else if ((v18 & (v12 - 1)) != prime)
                {
                  goto LABEL_40;
                }
                v16 = (_QWORD *)*v16;
                if (!v16)
                  goto LABEL_40;
              }
            }
            do
            {
              v17 = v16[1];
              if (v17 == v13)
              {
                if (v16[2] == v13)
                  goto LABEL_79;
              }
              else
              {
                if (v17 >= v12)
                  v17 %= v12;
                if (v17 != prime)
                  break;
              }
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_40:
      v19 = (char *)operator new(0x80uLL);
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v13;
      *((_QWORD *)v19 + 2) = v10[2];
      *((_QWORD *)v19 + 3) = v10[3];
      *((_OWORD *)v19 + 2) = *((_OWORD *)v10 + 2);
      v20 = *((_OWORD *)v10 + 3);
      v21 = *((_OWORD *)v10 + 4);
      v22 = *((_OWORD *)v10 + 5);
      *((_QWORD *)v19 + 12) = v10[12];
      *((_OWORD *)v19 + 4) = v21;
      *((_OWORD *)v19 + 5) = v22;
      *((_OWORD *)v19 + 3) = v20;
      v23 = *(_OWORD *)(v10 + 13);
      *((_QWORD *)v19 + 15) = v10[15];
      *(_OWORD *)(v19 + 104) = v23;
      v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v25 = *(float *)(a1 + 32);
      if (!v12 || (float)(v25 * (float)v12) < v24)
      {
        v26 = v12 < 3 || (v12 & (v12 - 1)) != 0;
        v27 = v26 | (2 * v12);
        v28 = vcvtps_u32_f32(v24 / v25);
        if (v27 <= v28)
          v29 = v28;
        else
          v29 = v27;
        if (v29 == 1)
        {
          v29 = 2;
        }
        else if ((v29 & (v29 - 1)) != 0)
        {
          v29 = std::__next_prime(v29);
          v12 = *(_QWORD *)(a1 + 8);
        }
        if (v29 > v12)
          goto LABEL_53;
        if (v29 < v12)
        {
          v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
          {
            v30 = std::__next_prime(v30);
          }
          else
          {
            v32 = 1 << -(char)__clz(v30 - 1);
            if (v30 >= 2)
              v30 = v32;
          }
          if (v29 <= v30)
            v29 = v30;
          if (v29 < v12)
LABEL_53:
            sub_239A501C8(a1, v29);
        }
        v12 = *(_QWORD *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v13 >= v12)
            prime = v13 % v12;
          else
            prime = v13;
        }
        else
        {
          prime = (v12 - 1) & v13;
        }
      }
      v33 = *(_QWORD *)a1;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
      if (v34)
      {
        *(_QWORD *)v19 = *v34;
      }
      else
      {
        *(_QWORD *)v19 = *v11;
        *v11 = v19;
        *(_QWORD *)(v33 + 8 * prime) = v11;
        if (!*(_QWORD *)v19)
          goto LABEL_78;
        v35 = *(_QWORD *)(*(_QWORD *)v19 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v35 >= v12)
            v35 %= v12;
        }
        else
        {
          v35 &= v12 - 1;
        }
        v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
      }
      *v34 = v19;
LABEL_78:
      ++*(_QWORD *)(a1 + 24);
LABEL_79:
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  return a1;
}

void sub_239CAB29C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

float64x2_t sub_239CAB2C4(float64x2_t *a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, float64x2_t a5, int8x16_t _Q1)
{
  int8x16_t v6;
  double v10;
  double v11;
  double v19;
  double v20;
  double v21;
  double v22;
  __double2 v23;
  double v24;
  double v25;
  float64x2_t v26;
  int8x16_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  int64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  int64x2_t v49;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  float64x2_t v54;
  double v55;
  float64x2_t v57;
  float64x2_t result;
  __int128 v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  _BYTE v66[32];
  float64x2_t v67;
  double v68;

  v10 = *(double *)a2;
  v11 = *(double *)(a2 + 24);
  _Q7 = *(_OWORD *)(a2 + 8);
  a5.f64[0] = *(float64_t *)(a2 + 48);
  v63 = a5;
  v64 = *(float64x2_t *)(a2 + 32);
  _D11 = *(double *)(a2 + 16);
  __asm { FMLA            D0, D11, V7.D[1] }
  v19 = _D0 + v11 * v11;
  if (v19 >= 0.0000002635)
  {
    v22 = sqrt(v19);
    v62 = *(_OWORD *)(a2 + 8);
    v23 = __sincos_stret(v22);
    *(double *)_Q1.i64 = v23.__cosval;
    *(_QWORD *)&_Q7 = v62;
    v21 = v23.__sinval / v22;
    v20 = 1.0 / v19 * (1.0 - v23.__cosval);
  }
  else
  {
    v20 = 0.5 - v19 * (v19 / -720.0 + 0.0416666667);
    v21 = 1.0 - v19 * (0.166666667 - v19 * (v19 / -5040.0 + 0.00833333333));
    *(double *)_Q1.i64 = 1.0 - v19 * v20;
  }
  v24 = *(double *)&_Q7 * v20;
  v25 = _D11 * v20;
  v26.f64[0] = *(double *)_Q1.i64 + *(double *)&_Q7 * v20 * *(double *)&_Q7;
  *(double *)v27.i64 = *(double *)_Q1.i64 + _D11 * v20 * _D11;
  v28 = *(double *)_Q1.i64 + v11 * v20 * v11;
  v29 = v11 * v24;
  v30 = v11 * v25;
  v31 = *(double *)&_Q7 * v21;
  v32 = _D11 * v21;
  v33 = v11 * v21;
  v34 = _D11 * v24 - v33;
  v35 = v32 + v11 * v24;
  v36.f64[0] = _D11 * v24 + v33;
  _D5 = v30 - v31;
  v38.f64[0] = v29 - v32;
  v39 = v31 + v30;
  v40.f64[0] = v26.f64[0];
  v40.f64[1] = v36.f64[0];
  v41.f64[0] = v35;
  v41.f64[1] = _D5;
  v42.f64[0] = v26.f64[0];
  v42.f64[1] = v34;
  v43.f64[0] = v34;
  *(_QWORD *)&v43.f64[1] = v27.i64[0];
  v44.i64[0] = *(_QWORD *)&v36.f64[0];
  v44.i64[1] = v27.i64[0];
  v45.f64[0] = v38.f64[0];
  v45.f64[1] = v39;
  *(double *)v66 = v35;
  v65 = v42;
  *(double *)&v66[24] = _D5;
  *(int64x2_t *)&v66[8] = v44;
  v68 = v28;
  v67 = v45;
  v46 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v40, v26.f64[0]), v43, v34), v41, v35);
  *(double *)v44.i64 = v38.f64[0] * v26.f64[0] + v39 * v34 + v28 * v35;
  v47 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v40, v36.f64[0]), v43, *(double *)v27.i64), v41, _D5);
  *(double *)v6.i64 = v38.f64[0] * v36.f64[0] + v39 * *(double *)v27.i64 + v28 * _D5;
  v48 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v40, v38.f64[0]), v43, v39), v41, v28);
  v41.f64[0] = v38.f64[0] * v38.f64[0] + v39 * v39 + v28 * v28;
  v49 = (int64x2_t)vaddq_f64(v47, (float64x2_t)xmmword_239EC6830);
  __asm { FMOV            V22.2D, #-1.0 }
  v51 = vabsq_f64(vaddq_f64(v46, (float64x2_t)xmmword_239EC6820));
  *(_QWORD *)&v41.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v41, _Q22));
  v41.f64[1] = NAN;
  v52 = vmaxnmq_f64(vmaxnmq_f64(v51, v41), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v49, v6, 8uLL)));
  v53 = vmaxnmvq_f64(vmaxnmq_f64(v52, vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v44, v49)), vabsq_f64(v48))));
  if (v53 > 0.0001
    || fabs(v35 * (v39 * v36.f64[0] - *(double *)v27.i64 * v38.f64[0])+ v26.f64[0] * (v28 * *(double *)v27.i64 - _D5 * v39)- v34 * (v28 * v36.f64[0] - _D5 * v38.f64[0])+ -1.0) > 0.0001)
  {
    if (v53 > 0.1
      || fabs(v35 * (v39 * v36.f64[0] - *(double *)v27.i64 * v38.f64[0])+ v26.f64[0] * (v28 * *(double *)v27.i64 - _D5 * v39)- v34 * (v28 * v36.f64[0] - _D5 * v38.f64[0])+ -1.0) > 0.1)
    {
      sub_239A444D4((uint64_t)"unknown file", 18, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_239516070(&v65);
    v28 = v68;
    v38 = v67;
    v27 = *(int8x16_t *)&v66[16];
    _Q1 = *(int8x16_t *)v66;
    v26 = v65;
    *(_QWORD *)&v39 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
    *(_QWORD *)&_D5 = vextq_s8(v27, v27, 8uLL).u64[0];
    *(_QWORD *)&v36.f64[0] = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
    *(_QWORD *)&v34 = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  }
  v54 = v64;
  v52.f64[0] = 1.0 / v10;
  v51.f64[0] = a3[1].f64[0];
  *(_QWORD *)&v55 = *(_OWORD *)&vsubq_f64(v51, v63);
  *(_QWORD *)&v54.f64[1] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
  _Q17 = vsubq_f64(*a3, v54);
  v38.f64[1] = v39;
  v26.f64[1] = v34;
  *(_QWORD *)&v36.f64[1] = v27.i64[0];
  __asm { FMLA            D1, D5, V17.D[1] }
  *(double *)_Q1.i64 = vmlad_n_f64(*(double *)_Q1.i64, v28, v55);
  v57 = vmulq_f64(v52, (float64x2_t)_Q1);
  _Q1 = vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, _Q17.f64[0]), v36, _Q17, 1), v38, v55), 1.0 / v10);
  _Q2 = *a1;
  v38.f64[0] = a1[1].f64[0];
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D5, D1, V2.D[1] }
  v57.f64[0] = -(_D5 + v38.f64[0] * v57.f64[0]) - a1[1].f64[1];
  *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vmulq_f64(v38, v57);
  result = vmulq_n_f64(*a1, v57.f64[0]);
  *a4 = result;
  a4[1].f64[0] = _Q1.f64[0];
  return result;
}

uint64_t sub_239CAB680(uint64_t a1)
{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  double v13;
  float64x2_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  double v18;
  __int128 v19;
  float64x2_t v20;
  float64x2_t v21;
  unint64_t v22;
  double v23;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v29;
  float64x2_t v32;
  float64x2_t v35;
  int64x2_t v37;
  double v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  float64x2_t v50;
  double v51;
  float64x2_t v52;
  _BYTE v53[32];
  float64x2_t v54;
  double v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  float64x2_t v60;
  __int128 v61;
  __int128 v62;
  float64x2_t v63;
  double v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 272) = 0x3EB0C6F7A0B5ED8DLL;
  *(_OWORD *)(a1 + 256) = xmmword_239F0C010;
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a1 + 640);
  if (*(_BYTE *)(a1 + 674))
  {
    v2 = 0;
    v3 = 0x3F1A36E2EB1C432DLL;
  }
  else
  {
    v2 = *(_BYTE *)(a1 + 673);
    *(_QWORD *)(a1 + 368) = 0x3EB0C6F7A0B5ED8DLL;
    v3 = 0x3F50624DD2F1A9FCLL;
  }
  *(_BYTE *)(a1 + 384) = v2;
  *(_QWORD *)(a1 + 376) = v3;
  *(_BYTE *)(a1 + 248) = 0;
  v4 = *(_DWORD *)(a1 + 644);
  if (v4)
  {
    result = 0;
    if (v4 != 1)
      return result;
    if ((sub_239CABA54(a1) & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_239CAF8C0(a1);
    if (!(_DWORD)result)
      return result;
  }
  v6 = *(uint64_t **)(a1 + 16);
  if (v6)
  {
    v7 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v50 = _Q0;
    do
    {
      v17 = (uint64_t *)(*(_QWORD *)(a1 + 128) + v7);
      v18 = *(double *)v17;
      v19 = *(_OWORD *)(v17 + 3);
      v20 = *(float64x2_t *)(v17 + 7);
      v62 = *(_OWORD *)(v17 + 5);
      v63 = v20;
      v64 = *((double *)v17 + 9);
      v60 = *(float64x2_t *)(v17 + 1);
      v61 = v19;
      v58 = *((_OWORD *)v17 + 5);
      v59 = v17[12];
      v51 = v18;
      v55 = v64;
      *(_OWORD *)&v53[16] = v62;
      v54 = v20;
      v52 = v60;
      *(_OWORD *)v53 = v19;
      v21 = v60;
      v22 = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
      *(_QWORD *)&v23 = vextq_s8(*(int8x16_t *)&v53[8], *(int8x16_t *)&v53[8], 8uLL).u64[0];
      _Q6 = v20;
      *(_QWORD *)&v25 = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
      v26 = (float64x2_t)vzip1q_s64((int64x2_t)v60, *(int64x2_t *)&v53[8]);
      v27 = (float64x2_t)vzip2q_s64((int64x2_t)v60, *(int64x2_t *)&v53[8]);
      *(_QWORD *)&_Q21.f64[0] = v19;
      _Q21.f64[1] = *((float64_t *)&v62 + 1);
      v29 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v52.f64[0]), v27, v52, 1), _Q21, *(double *)&v19);
      _Q22 = (int64x2_t)vmulq_f64(v20, v60);
      _D23 = v60.f64[1];
      __asm { FMLA            D22, D23, V6.D[1] }
      *(double *)_Q22.i64 = *(double *)_Q22.i64 + v64 * *(double *)&v19;
      v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, *((double *)&v19 + 1)), v27, *(float64x2_t *)&v53[8], 1), _Q21, *((double *)&v62 + 1));
      _Q24 = (int8x16_t)vmulq_f64(v20, *(float64x2_t *)&v53[8]);
      _D25 = v62;
      __asm { FMLA            D24, D25, V6.D[1] }
      *(double *)_Q24.i64 = *(double *)_Q24.i64 + v64 * *((double *)&v62 + 1);
      v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v20.f64[0]), v27, v20, 1), _Q21, v64);
      _Q20 = vmulq_f64(_Q6, _Q6);
      _Q21.f64[0] = v20.f64[1];
      __asm { FMLA            D20, D21, V6.D[1] }
      _Q20.f64[0] = _Q20.f64[0] + v55 * v55;
      v37 = (int64x2_t)vaddq_f64(v32, (float64x2_t)xmmword_239EC6830);
      *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q20, v50));
      _Q20.f64[1] = NAN;
      v38 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v29, (float64x2_t)xmmword_239EC6820)), _Q20), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v37, _Q24, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q22, v37)), vabsq_f64(v35))));
      v39 = -*((double *)&v62 + 1);
      if (v38 > 0.0001
        || (v40.f64[0] = v52.f64[0],
            *(_QWORD *)&v40.f64[1] = v22,
            v41.f64[0] = v25,
            v41.f64[1] = v54.f64[0],
            v42.f64[0] = v23,
            v42.f64[1] = *(float64_t *)&v53[8],
            v43 = vmulq_f64(v40, vmlaq_n_f64(vmulq_n_f64(v41, v39), v42, v55)),
            fabs(*(double *)v53 * (v25 * *(double *)&v53[8] - v23 * v54.f64[0])+ vsubq_f64(v43, (float64x2_t)vdupq_laneq_s64((int64x2_t)v43, 1)).f64[0]+ -1.0) > 0.0001))
      {
        if (v38 > 0.1
          || (*(_QWORD *)&v21.f64[1] = v22,
              v44.f64[0] = v25,
              v44.f64[1] = v54.f64[0],
              v45.f64[0] = v23,
              v45.f64[1] = *(float64_t *)&v53[8],
              v46 = vmulq_f64(v21, vmlaq_n_f64(vmulq_n_f64(v44, v39), v45, v55)),
              fabs(*(double *)v53 * (v25 * *(double *)&v53[8] - v23 * v54.f64[0])+ vsubq_f64(v46, (float64x2_t)vdupq_laneq_s64((int64x2_t)v46, 1)).f64[0]+ -1.0) > 0.1))
        {
          sub_239A444D4((uint64_t)"unknown file", 18, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        sub_239516070(&v52);
        v18 = v51;
      }
      v56 = v58;
      v57 = v59;
      *((double *)v6 + 3) = v18;
      *((float64x2_t *)v6 + 2) = v52;
      v13 = v55;
      v15 = *(_OWORD *)&v53[16];
      v14 = v54;
      *((_OWORD *)v6 + 3) = *(_OWORD *)v53;
      *((_OWORD *)v6 + 4) = v15;
      *((float64x2_t *)v6 + 5) = v14;
      *((double *)v6 + 12) = v13;
      v16 = v56;
      v6[15] = v57;
      *(_OWORD *)(v6 + 13) = v16;
      v6 = (uint64_t *)*v6;
      v7 += 104;
    }
    while (v6);
  }
  v47 = *(_QWORD **)(a1 + 56);
  if (v47)
  {
    v48 = *(uint64_t **)(a1 + 152);
    do
    {
      v49 = *v48++;
      v47[4] = v49;
      v47 = (_QWORD *)*v47;
    }
    while (v47);
  }
  return 1;
}

uint64_t sub_239CABA54(uint64_t a1)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  int8x8_t v48;
  uint8x8_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  _BOOL4 v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  int8x8_t v88;
  uint8x8_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  double v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  double v105;
  unint64_t *p_shared_owners;
  double v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  float64x2_t v119;
  unsigned int *v120;
  float64x2_t *v121;
  int v122;
  unint64_t v124;
  unint64_t v125;
  int8x8_t v126;
  uint8x8_t v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  double v139;
  float64x2_t v140;
  unint64_t v141;
  double v142;
  float64x2_t v143;
  double v144;
  double v145;
  double v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v151;
  float64x2_t v154;
  float64x2_t v157;
  int64x2_t v159;
  double v160;
  double v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  int8x16_t v170;
  double v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  double v174;
  unint64_t *v175;
  double v176;
  char v177;
  unint64_t v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t *v188;
  unint64_t v189;
  _QWORD *v190;
  double *v191;
  double *v192;
  double v193;
  double v194;
  unint64_t v195;
  uint64_t v196;
  double *v197;
  uint64_t v198;
  double v199;
  double *v200;
  double *v201;
  unint64_t v202;
  double v203;
  uint64_t v204;
  double *v205;
  uint64_t v206;
  double v207;
  uint64_t v208;
  int8x8_t v209;
  unint64_t v210;
  uint8x8_t v211;
  unint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  float64x2_t v220;
  uint64_t v224;
  float64x2_t v225;
  double v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count *v228;
  double v229;
  unint64_t *v230;
  double v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char v235;
  char v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  double *v246;
  double *v247;
  double v248;
  double v249;
  unint64_t v250;
  uint64_t v251;
  double *v252;
  uint64_t v253;
  double v254;
  double *v255;
  double *v256;
  unint64_t v257;
  double v258;
  uint64_t v259;
  double *v260;
  uint64_t v261;
  double v262;
  int8x16_t *v263;
  unsigned int *v264;
  int v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint8x8_t v270;
  unint64_t v271;
  unint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  int8x16_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  __int128 *v280;
  __int128 v281;
  __int128 v282;
  double v283;
  std::__shared_weak_count *v284;
  std::__shared_weak_count *v285;
  double v286;
  unint64_t *v287;
  double v288;
  unint64_t v289;
  unint64_t v290;
  char v291;
  char v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  double v301;
  double v302;
  _BYTE *v303;
  _BYTE *v304;
  int64_t v305;
  void *v306;
  unint64_t v307;
  unint64_t v308;
  double v309;
  double v310;
  _BYTE *v311;
  _BYTE *v312;
  int64_t v313;
  void *v314;
  unint64_t v315;
  unint64_t v316;
  double v317;
  double v318;
  double v319;
  __int128 v320;
  _QWORD *v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  __int128 v325;
  double v328;
  _QWORD *v329;
  uint64_t v330;
  double v331;
  int64x2_t v332;
  double v333;
  double v334;
  double v335;
  double v336;
  float64x2_t v337;
  uint64_t v338;
  double v339;
  _QWORD *v340;
  const std::locale::facet *v341;
  std::string *v342;
  std::string *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  _QWORD *v348;
  uint64_t *v349;
  _QWORD *v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  uint64_t v363;
  _BYTE *v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  char *v370;
  uint64_t *v371;
  unint64_t v372;
  uint64_t v373;
  char *v374;
  __int128 *v375;
  uint64_t v376;
  __int128 v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t *v381;
  uint64_t *v382;
  int64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  _BYTE *v387;
  unint64_t *v388;
  unint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  _OWORD *v392;
  uint64_t *v393;
  uint64_t v394;
  __int128 v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t *v399;
  unint64_t *v400;
  int64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  _BYTE *v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t *v408;
  uint64_t v409;
  _OWORD *v410;
  unint64_t *v411;
  uint64_t v412;
  __int128 v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  _QWORD *v417;
  unint64_t *v418;
  int64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  _BYTE *v423;
  unint64_t *v424;
  char *v425;
  unint64_t v426;
  unint64_t *v427;
  uint64_t v428;
  _OWORD *v429;
  unint64_t *v430;
  uint64_t v431;
  __int128 v432;
  unint64_t v433;
  unsigned int v434;
  uint64_t v435;
  char *v436;
  void *v437;
  _BYTE *v438;
  int64_t v439;
  int64_t v440;
  unint64_t v441;
  uint64_t v442;
  unint64_t v443;
  _BYTE *v444;
  _QWORD *v445;
  char *v446;
  unint64_t v447;
  uint64_t v448;
  _OWORD *v449;
  char *v450;
  uint64_t v451;
  __int128 v452;
  uint64_t v453;
  unsigned int v454;
  uint64_t v455;
  char *v456;
  void *v457;
  _BYTE *v458;
  int64_t v459;
  int64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  _BYTE *v464;
  _QWORD *v465;
  char *v466;
  unint64_t v467;
  uint64_t v468;
  _OWORD *v469;
  char *v470;
  uint64_t v471;
  __int128 v472;
  uint64_t v473;
  double v474;
  double v475;
  double v476;
  double v477;
  float64x2_t v478;
  double v479;
  double v480;
  unsigned int v481;
  size_t v482;
  size_t v483;
  double *v484;
  double v485;
  double *v486;
  uint64_t v487;
  double v488;
  double v489;
  _QWORD *v490;
  const std::locale::facet *v491;
  _QWORD *v492;
  double v493;
  double v494;
  char v495;
  int v496;
  int v497;
  double v498;
  double *v499;
  unint64_t v500;
  unint64_t v501;
  float64x2_t *v502;
  uint64_t v503;
  float64x2_t v504;
  float64x2_t v505;
  double v506;
  double v507;
  uint64_t v509;
  const void *v510;
  int64_t v511;
  char *v512;
  char *v513;
  double *v514;
  uint64_t v515;
  double v516;
  double v517;
  _QWORD *v518;
  _QWORD *v519;
  const std::locale::facet *v520;
  BOOL v522;
  int64x2_t v523;
  double v524;
  double v525;
  double v526;
  double v527;
  float64x2_t v528;
  double v529;
  uint64_t v531;
  double v532;
  _QWORD *v533;
  const std::locale::facet *v534;
  int v535;
  _QWORD *v536;
  _QWORD *v537;
  double v538;
  __int128 v539;
  __int128 v540;
  _QWORD *v541;
  _QWORD *v542;
  _QWORD *v543;
  _QWORD *v544;
  _QWORD *v545;
  const std::locale::facet *v546;
  int v547;
  _QWORD *v548;
  const std::locale::facet *v549;
  _QWORD *v550;
  const std::locale::facet *v551;
  _QWORD *v552;
  _QWORD *v553;
  const std::locale::facet *v554;
  std::bad_alloc *exception;
  std::bad_alloc *v556;
  float64x2_t v557;
  _BOOL4 v558;
  float64_t v559;
  float64_t v560;
  int8x16_t v561;
  int8x16_t v562;
  _QWORD *v563;
  uint64_t v564;
  std::__shared_weak_count *v565;
  std::__shared_weak_count *v566;
  std::__shared_weak_count *v567;
  std::__shared_weak_count *v568;
  void *v569[2];
  unsigned int v570;
  void *__dst[2];
  unsigned int v572;
  double v573;
  _BYTE v574[112];
  __int128 v575;
  void *v576[2];
  __int128 v577;
  int64x2_t v578;
  void *__p[2];
  _BYTE *v580;
  _BYTE v581[72];
  _BYTE v582[24];
  _BYTE *v583;
  _BYTE v584[24];
  _BYTE *v585;
  double v586;
  __int128 v587;
  __int128 v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t (**v591)();
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  uint64_t (**v602)();
  _QWORD *v603;
  _QWORD v604[2];
  _QWORD *v605;
  _QWORD v606[2];
  _OWORD v607[7];
  __int16 v608;
  char v609;
  uint64_t v610;
  _DWORD v611[2];
  uint64_t v612;
  unsigned __int8 v613;
  __int128 v614;
  __int128 __src;
  unsigned int v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  _QWORD v626[7];
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  void (**v633)();
  uint64_t v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  uint64_t v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int16 v649;
  uint64_t v650;
  _QWORD *v651;
  __int128 v652;
  uint64_t v653;
  __int16 v654;
  char v655;
  uint64_t v656;
  uint64_t v657;
  __int128 v658;
  __int128 v659;
  uint64_t v660;
  int v661;
  _DWORD v662[3];
  uint64_t v663;
  int v664;
  __int16 v665;
  __int128 v666;
  _BYTE v667[38];
  uint64_t v668;
  std::string v669;
  std::string *v670;
  _BYTE v671[24];
  _BYTE *v672;
  uint64_t v673;

  v673 = *MEMORY[0x24BDAC8D0];
  __asm { FMOV            V0.2D, #1.0 }
  v592 = _Q0;
  v593 = _Q0;
  v594 = xmmword_239F0C3E0;
  v595 = _Q0;
  v596 = xmmword_239F0C3F0;
  v597 = _Q0;
  v598 = _Q0;
  v599 = xmmword_239F0C3E0;
  v600 = _Q0;
  v601 = xmmword_239F0C3F0;
  v602 = &off_250AFCD88;
  v604[0] = 0;
  v603 = v604;
  v606[1] = 0;
  v606[0] = 0;
  v604[1] = 0;
  v605 = v606;
  v608 = 1;
  v609 = 1;
  memset(v607, 0, sizeof(v607));
  sub_239CE0F38((uint64_t)&v610);
  memset(v611, 0, 5);
  v612 = 0;
  v613 = 0;
  v618 = 0;
  v617 = 0;
  v614 = 0u;
  __src = 0u;
  v616 = 0;
  v7 = operator new();
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_QWORD *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)v7 = &off_250AFCDA8;
  v621 = v7;
  v8 = operator new();
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)v8 = &off_250AFE3C0;
  v622 = v8;
  v9 = operator new();
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)v9 = &off_250AFCE08;
  v619 = v9;
  v10 = operator new();
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_QWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)v10 = &off_250AFCE68;
  v623 = 0u;
  v624 = 0u;
  v625 = 0u;
  v620 = v10;
  v626[0] = &v602;
  v626[1] = &__src;
  memset(&v626[2], 0, 24);
  v631 = 0u;
  v632 = 0u;
  v629 = 0u;
  v630 = 0u;
  v627 = 0u;
  v628 = 0u;
  v633 = off_250AFD3A8;
  v638 = 0;
  v637 = 0;
  v639 = 0;
  v641 = 0;
  v640 = 0;
  v636 = 0;
  v634 = 0;
  v635 = 0;
  v11 = operator new();
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)v11 = &off_250AFCDA8;
  v644 = v11;
  v12 = operator new();
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_QWORD *)(v12 + 96) = 0;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)v12 = &off_250AFE3C0;
  v645 = v12;
  v13 = operator new();
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 104) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)v13 = &off_250AFCE08;
  v642 = v13;
  v14 = operator new();
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_QWORD *)(v14 + 88) = 0;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_QWORD *)v14 = &off_250AFCE68;
  v643 = v14;
  v650 = 0;
  v646 = 0u;
  v647 = 0u;
  v648 = 0u;
  v649 = 0;
  v651 = v626;
  v633 = (void (**)())&off_250AFD368;
  v657 = 0;
  v654 = v654 & 0x7FF0 | 0xC;
  v655 = 1;
  v656 = 0;
  v652 = 0u;
  v653 = 0;
  v15 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  v658 = 0u;
  v659 = 0u;
  v660 = 0;
  *((_QWORD *)&v652 + 1) = v15;
  v591 = off_250AFD030;
  v661 = 2;
  v662[0] = -3;
  v666 = 0u;
  memset(v667, 0, 30);
  v662[2] = -3;
  v663 = 0;
  v664 = 0;
  v665 = 1;
  v667[30] = 1;
  v668 = 0;
  v16 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 136) = v16;
  v17 = *(_QWORD *)(a1 + 24);
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 144) - (_QWORD)v16) >> 3) < v17)
  {
    if (v17 > 0x276276276276276)
      sub_2394189F8();
    v18 = (char *)operator new(104 * v17);
    *(_QWORD *)(a1 + 128) = v18;
    *(_QWORD *)(a1 + 136) = v18;
    *(_QWORD *)(a1 + 144) = &v18[104 * v17];
    if (v16)
      operator delete(v16);
  }
  v19 = *(uint64_t **)(a1 + 16);
  if (v19)
  {
    v20 = *(char **)(a1 + 136);
    do
    {
      v25 = v19[3];
      v26 = *((_OWORD *)v19 + 3);
      v27 = *((_OWORD *)v19 + 5);
      *(_OWORD *)&v574[32] = *((_OWORD *)v19 + 4);
      *(_OWORD *)&v574[48] = v27;
      *(_QWORD *)&v574[64] = v19[12];
      *(_OWORD *)v574 = *((_OWORD *)v19 + 2);
      *(_OWORD *)&v574[16] = v26;
      *(_OWORD *)v581 = *(_OWORD *)(v19 + 13);
      *(_QWORD *)&v581[16] = v19[15];
      v28 = *(_QWORD *)(a1 + 144);
      if ((unint64_t)v20 < v28)
      {
        *(_QWORD *)v20 = v25;
        *(_OWORD *)(v20 + 8) = *(_OWORD *)v574;
        v21 = *(_OWORD *)&v574[16];
        v22 = *(_OWORD *)&v574[32];
        v23 = *(_OWORD *)&v574[48];
        *((_QWORD *)v20 + 9) = *(_QWORD *)&v574[64];
        *(_OWORD *)(v20 + 56) = v23;
        *(_OWORD *)(v20 + 40) = v22;
        *(_OWORD *)(v20 + 24) = v21;
        *((_OWORD *)v20 + 5) = *(_OWORD *)v581;
        *((_QWORD *)v20 + 12) = *(_QWORD *)&v581[16];
        v24 = v20 + 104;
      }
      else
      {
        v29 = *(_BYTE **)(a1 + 128);
        v30 = 0x4EC4EC4EC4EC4EC5 * ((v20 - v29) >> 3) + 1;
        if (v30 > 0x276276276276276)
          sub_2394189F8();
        v31 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v28 - (_QWORD)v29) >> 3);
        if (2 * v31 > v30)
          v30 = 2 * v31;
        if (v31 >= 0x13B13B13B13B13BLL)
          v32 = 0x276276276276276;
        else
          v32 = v30;
        if (v32)
        {
          if (v32 > 0x276276276276276)
            sub_239418A80();
          v33 = (char *)operator new(104 * v32);
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[8 * ((v20 - v29) >> 3)];
        *(_QWORD *)v34 = v25;
        v35 = *(_OWORD *)v574;
        *(_OWORD *)(v34 + 24) = *(_OWORD *)&v574[16];
        v36 = *(_OWORD *)&v574[48];
        *(_OWORD *)(v34 + 40) = *(_OWORD *)&v574[32];
        *(_OWORD *)(v34 + 56) = v36;
        *((_QWORD *)v34 + 9) = *(_QWORD *)&v574[64];
        *(_OWORD *)(v34 + 8) = v35;
        *((_OWORD *)v34 + 5) = *(_OWORD *)v581;
        *((_QWORD *)v34 + 12) = *(_QWORD *)&v581[16];
        v37 = v34;
        if (v20 != v29)
        {
          do
          {
            v38 = *((_QWORD *)v20 - 13);
            v20 -= 104;
            *((_QWORD *)v37 - 13) = v38;
            v37 -= 104;
            *(_OWORD *)(v37 + 8) = *(_OWORD *)(v20 + 8);
            v39 = *(_OWORD *)(v20 + 24);
            v40 = *(_OWORD *)(v20 + 40);
            v41 = *(_OWORD *)(v20 + 56);
            *((_QWORD *)v37 + 9) = *((_QWORD *)v20 + 9);
            *(_OWORD *)(v37 + 56) = v41;
            *(_OWORD *)(v37 + 40) = v40;
            *(_OWORD *)(v37 + 24) = v39;
            v42 = *((_OWORD *)v20 + 5);
            *((_QWORD *)v37 + 12) = *((_QWORD *)v20 + 12);
            *((_OWORD *)v37 + 5) = v42;
          }
          while (v20 != v29);
          v20 = *(char **)(a1 + 128);
        }
        v24 = v34 + 104;
        *(_QWORD *)(a1 + 128) = v37;
        *(_QWORD *)(a1 + 136) = v34 + 104;
        *(_QWORD *)(a1 + 144) = &v33[104 * v32];
        if (v20)
          operator delete(v20);
      }
      *(_QWORD *)(a1 + 136) = v24;
      v19 = (uint64_t *)*v19;
      v20 = v24;
    }
    while (v19);
    v43 = *(_QWORD **)(a1 + 16);
    v563 = (_QWORD *)(a1 + 600);
    if (v43)
    {
      v44 = 0;
      v45 = *(_QWORD *)(a1 + 624) != 0;
      while (1)
      {
        v46 = *(_QWORD *)(a1 + 128);
        v47 = v43[2];
        *(_DWORD *)v574 = v47;
        *(_QWORD *)&v574[8] = v46 + 104 * v44;
        if (v45)
          break;
        v574[4] = 0;
        if (v46)
          goto LABEL_53;
LABEL_27:
        ++v44;
        v43 = (_QWORD *)*v43;
        v45 = 1;
        if (!v43)
          goto LABEL_56;
      }
      v48 = *(int8x8_t *)(a1 + 608);
      if (v48)
      {
        v49 = (uint8x8_t)vcnt_s8(v48);
        v49.i16[0] = vaddlv_u8(v49);
        if (v49.u32[0] > 1uLL)
        {
          v50 = v47;
          if (v47 >= *(_QWORD *)&v48)
            v50 = v47 % *(_QWORD *)&v48;
        }
        else
        {
          v50 = (*(_QWORD *)&v48 - 1) & v47;
        }
        v51 = *(_QWORD **)(*v563 + 8 * v50);
        if (v51)
        {
          v51 = (_QWORD *)*v51;
          if (v51)
          {
            if (v49.u32[0] < 2uLL)
            {
              v52 = *(_QWORD *)&v48 - 1;
              while (1)
              {
                v54 = v51[1];
                if (v54 == v47)
                {
                  if (v51[2] == v47)
                    goto LABEL_52;
                }
                else if ((v54 & v52) != v50)
                {
                  goto LABEL_51;
                }
                v51 = (_QWORD *)*v51;
                if (!v51)
                  goto LABEL_52;
              }
            }
            do
            {
              v53 = v51[1];
              if (v53 == v47)
              {
                if (v51[2] == v47)
                  break;
              }
              else
              {
                if (v53 >= *(_QWORD *)&v48)
                  v53 %= *(_QWORD *)&v48;
                if (v53 != v50)
                  goto LABEL_51;
              }
              v51 = (_QWORD *)*v51;
            }
            while (v51);
          }
        }
      }
      else
      {
LABEL_51:
        v51 = 0;
      }
LABEL_52:
      v574[4] = v51 == 0;
      if (!v46)
        goto LABEL_27;
LABEL_53:
      *(_QWORD *)&v574[16] = *(_QWORD *)(v46 + 104 * v44);
      v55 = v46 + 104 * v44;
      *(_OWORD *)&v574[40] = *(_OWORD *)(v55 + 24);
      *(_OWORD *)&v574[56] = *(_OWORD *)(v55 + 40);
      *(_OWORD *)&v574[72] = *(_OWORD *)(v55 + 56);
      *(_QWORD *)&v574[88] = *(_QWORD *)(v55 + 72);
      *(_OWORD *)&v574[24] = *(_OWORD *)(v55 + 8);
      *(_OWORD *)&v574[96] = *(_OWORD *)(v55 + 80);
      *(_QWORD *)&v575 = *(_QWORD *)(v55 + 96);
      if (sub_239CB35E0((uint64_t)&v602, (int *)v574))
        v611[0] = 0;
      goto LABEL_27;
    }
  }
  else
  {
    v563 = (_QWORD *)(a1 + 600);
  }
LABEL_56:
  v56 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 160) = v56;
  v57 = *(_QWORD *)(a1 + 64);
  if (v57 > (uint64_t)(*(_QWORD *)(a1 + 168) - (_QWORD)v56) >> 3)
  {
    if (v57 >> 61)
      sub_2394189F8();
    v58 = (char *)operator new(8 * v57);
    *(_QWORD *)(a1 + 152) = v58;
    *(_QWORD *)(a1 + 160) = v58;
    *(_QWORD *)(a1 + 168) = &v58[8 * v57];
    if (v56)
      operator delete(v56);
  }
  v59 = *(_QWORD **)(a1 + 56);
  if (v59)
  {
    v60 = *(char **)(a1 + 160);
    while (1)
    {
      v62 = v59[4];
      v63 = *(_QWORD *)(a1 + 168);
      if ((unint64_t)v60 >= v63)
        break;
      *(_QWORD *)v60 = v62;
      v61 = v60 + 8;
LABEL_63:
      *(_QWORD *)(a1 + 160) = v61;
      v59 = (_QWORD *)*v59;
      v60 = v61;
      if (!v59)
      {
        v79 = *(_QWORD **)(a1 + 56);
        if (v79)
        {
          v80 = 0;
          do
          {
            v81 = *(_QWORD *)(a1 + 152);
            *(_DWORD *)v574 = v79[2];
            v574[4] = 1;
            *(_QWORD *)&v574[8] = v81 + v80;
            if (v81)
            {
              *(_QWORD *)&v574[16] = *(_QWORD *)(v81 + v80);
              if (sub_239CB3BBC((uint64_t)&v602, (unsigned int *)v574))
                v611[0] = 0;
            }
            v79 = (_QWORD *)*v79;
            v80 += 8;
          }
          while (v79);
        }
        goto LABEL_99;
      }
    }
    v64 = *(char **)(a1 + 152);
    v65 = (v60 - v64) >> 3;
    v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 61)
      sub_2394189F8();
    v67 = v63 - (_QWORD)v64;
    if (v67 >> 2 > v66)
      v66 = v67 >> 2;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
      v68 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v68 = v66;
    if (v68)
    {
      if (v68 >> 61)
        sub_239418A80();
      v69 = operator new(8 * v68);
    }
    else
    {
      v69 = 0;
    }
    v70 = &v69[8 * v65];
    *v70 = v62;
    v61 = (char *)(v70 + 1);
    if (v60 == v64)
    {
      v64 = v60;
      goto LABEL_81;
    }
    v71 = v60 - 8 - v64;
    if (v71 >= 0x168)
    {
      if (&v69[v60 - v64 - 8 - (v71 & 0xFFFFFFFFFFFFFFF8)] > &v69[v60 - v64 - 8])
      {
        v72 = v60;
      }
      else if (&v60[-(v71 & 0xFFFFFFFFFFFFFFF8) - 8] > v60 - 8)
      {
        v72 = v60;
      }
      else if ((unint64_t)(v64 - v69) >= 0x20)
      {
        v74 = (v71 >> 3) + 1;
        v72 = &v60[-8 * (v74 & 0x3FFFFFFFFFFFFFFCLL)];
        v75 = &v69[8 * v65 - 16];
        v76 = v60 - 16;
        v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          *v75 = v78;
          v75 -= 2;
          v76 -= 32;
          v77 -= 4;
        }
        while (v77);
        v70 -= v74 & 0x3FFFFFFFFFFFFFFCLL;
        if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_81;
      }
      else
      {
        v72 = v60;
      }
    }
    else
    {
      v72 = v60;
    }
    do
    {
      v73 = *((_QWORD *)v72 - 1);
      v72 -= 8;
      *--v70 = v73;
    }
    while (v72 != v64);
    v64 = *(char **)(a1 + 152);
LABEL_81:
    *(_QWORD *)(a1 + 152) = v70;
    *(_QWORD *)(a1 + 160) = v61;
    *(_QWORD *)(a1 + 168) = &v69[8 * v68];
    if (v64)
      operator delete(v64);
    goto LABEL_63;
  }
LABEL_99:
  sub_239CB3A08((uint64_t)v607, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3));
  v83 = *(unsigned int **)(a1 + 80);
  v82 = *(unsigned int **)(a1 + 88);
  v84 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v82 - (char *)v83) >> 3) == (uint64_t)(*(_QWORD *)(a1 + 184)
                                                                             - *(_QWORD *)(a1 + 176)) >> 3
     && 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4) == (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3;
  v558 = v84;
  if (v83 == v82)
    goto LABEL_175;
  v85 = 0;
  do
  {
    v86 = *v83;
    v87 = v83[2];
    v88 = *(int8x8_t *)(a1 + 608);
    if (!*(_QWORD *)&v88)
      goto LABEL_144;
    v89 = (uint8x8_t)vcnt_s8(v88);
    v89.i16[0] = vaddlv_u8(v89);
    if (v89.u32[0] > 1uLL)
    {
      v90 = *v83;
      if (v86 >= *(_QWORD *)&v88)
        v90 = v86 % *(_QWORD *)&v88;
    }
    else
    {
      v90 = (v88.i32[0] - 1) & v86;
    }
    v91 = *(_QWORD **)(*v563 + 8 * v90);
    if (!v91)
      goto LABEL_144;
    v92 = (_QWORD *)*v91;
    if (!*v91)
      goto LABEL_144;
    v93 = *(_QWORD *)&v88 - 1;
    if (v89.u32[0] < 2uLL)
    {
      while (1)
      {
        v94 = v92[1];
        if (v94 == v86)
        {
          if (v92[2] == v86)
            goto LABEL_125;
        }
        else if ((v94 & v93) != v90)
        {
          goto LABEL_144;
        }
        v92 = (_QWORD *)*v92;
        if (!v92)
          goto LABEL_144;
      }
    }
    while (1)
    {
      v95 = v92[1];
      if (v95 == v86)
        break;
      if (v95 >= *(_QWORD *)&v88)
        v95 %= *(_QWORD *)&v88;
      if (v95 != v90)
        goto LABEL_144;
LABEL_119:
      v92 = (_QWORD *)*v92;
      if (!v92)
        goto LABEL_144;
    }
    if (v92[2] != v86)
      goto LABEL_119;
LABEL_125:
    if (v89.u32[0] > 1uLL)
    {
      v96 = v83[2];
      if (v87 >= *(_QWORD *)&v88)
        v96 = v87 % *(_QWORD *)&v88;
    }
    else
    {
      v96 = (v88.i32[0] - 1) & v87;
    }
    v97 = *(_QWORD **)(*v563 + 8 * v96);
    if (v97)
    {
      v98 = (_QWORD *)*v97;
      if (v98)
      {
        if (v89.u32[0] < 2uLL)
        {
          while (1)
          {
            v99 = v98[1];
            if (v99 == v87)
            {
              if (v98[2] == v87)
                goto LABEL_174;
            }
            else if ((v99 & v93) != v96)
            {
              goto LABEL_144;
            }
            v98 = (_QWORD *)*v98;
            if (!v98)
              goto LABEL_144;
          }
        }
        do
        {
          v100 = v98[1];
          if (v100 == v87)
          {
            if (v98[2] == v87)
              goto LABEL_174;
          }
          else
          {
            if (v100 >= *(_QWORD *)&v88)
              v100 %= *(_QWORD *)&v88;
            if (v100 != v96)
              break;
          }
          v98 = (_QWORD *)*v98;
        }
        while (v98);
      }
    }
LABEL_144:
    v101 = *((_QWORD *)v83 + 2);
    *(_OWORD *)&v574[32] = *(_OWORD *)(v83 + 10);
    *(_OWORD *)&v574[48] = *(_OWORD *)(v83 + 14);
    *(_OWORD *)&v574[64] = *(_OWORD *)(v83 + 18);
    *(_QWORD *)&v574[80] = *((_QWORD *)v83 + 11);
    *(_OWORD *)&v574[16] = *(_OWORD *)(v83 + 6);
    *(_OWORD *)&v574[88] = *((_OWORD *)v83 + 6);
    *(_QWORD *)&v574[104] = *((_QWORD *)v83 + 14);
    *(_QWORD *)v574 = v85;
    *(_QWORD *)&v574[8] = v101;
    if (v84)
    {
      v102 = *(double *)(*(_QWORD *)(a1 + 176) + 8 * v85);
      v103 = (std::__shared_weak_count *)operator new(0x30uLL);
      v104 = v103;
      v105 = 1.0 / v102;
      v103->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v103->__shared_owners_;
      v103->__shared_weak_owners_ = 0;
      v103->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFCF48;
      v103[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250AFCF80;
      if (1.0 / v102 < 1.0e-15)
        v107 = NAN;
      else
        v107 = 1.0 / sqrt(v105);
      *(double *)&v103[1].__shared_weak_owners_ = v107;
      LOBYTE(v103[1].__shared_owners_) = v105 >= 1.0e-15;
      *(_QWORD *)v671 = v103 + 1;
      *(_QWORD *)&v671[8] = v103;
      v669.__r_.__value_.__r.__words[0] = v86 | (v87 << 32);
      v568 = v103;
      do
        v109 = __ldxr(p_shared_owners);
      while (__stxr(v109 + 1, p_shared_owners));
      *(_QWORD *)v581 = v103 + 1;
      *(_QWORD *)&v581[8] = v103;
      do
        v110 = __ldxr(p_shared_owners);
      while (__stxr(v110 + 1, p_shared_owners));
      v111 = sub_239CB3F70((uint64_t)&v602, (uint64_t *)v574, (unsigned int *)&v669, (uint64_t)&v103[1], v103);
      v108 = v111;
      do
        v112 = __ldaxr(p_shared_owners);
      while (__stlxr(v112 - 1, p_shared_owners));
      if (v112)
      {
        if ((v111 & 1) == 0)
          goto LABEL_158;
LABEL_161:
        v611[0] = 0;
        v113 = v568;
        if (v568)
          goto LABEL_162;
LABEL_165:
        v116 = *(std::__shared_weak_count **)&v671[8];
        if (*(_QWORD *)&v671[8])
          goto LABEL_166;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
        if ((v108 & 1) != 0)
          goto LABEL_161;
LABEL_158:
        v113 = v568;
        if (!v568)
          goto LABEL_165;
LABEL_162:
        v114 = (unint64_t *)&v113->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (v115)
          goto LABEL_165;
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
        v116 = *(std::__shared_weak_count **)&v671[8];
        if (*(_QWORD *)&v671[8])
        {
LABEL_166:
          v117 = (unint64_t *)&v116->__shared_owners_;
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
      }
      v84 = v558;
    }
    else
    {
      *(_QWORD *)v671 = v86 | (v87 << 32);
      *(_OWORD *)v581 = 0uLL;
      v108 = sub_239CB3F70((uint64_t)&v602, (uint64_t *)v574, (unsigned int *)v671, 0, 0);
      if ((v108 & 1) != 0)
        v611[0] = 0;
    }
    if ((v108 & 1) == 0)
      goto LABEL_397;
    ++v85;
LABEL_174:
    v83 += 30;
  }
  while (v83 != v82);
LABEL_175:
  sub_239CB3A08((uint64_t)&v607[1] + 8, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4));
  v121 = *(float64x2_t **)(a1 + 104);
  v120 = *(unsigned int **)(a1 + 112);
  if (v121 == (float64x2_t *)v120)
    goto LABEL_253;
  v122 = 0;
  v119.f64[1] = -1.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v557 = _Q0;
  while (2)
  {
    v124 = LODWORD(v121->f64[0]);
    v125 = LODWORD(v121->f64[1]);
    v126 = *(int8x8_t *)(a1 + 608);
    if (!*(_QWORD *)&v126)
      goto LABEL_217;
    v127 = (uint8x8_t)vcnt_s8(v126);
    v127.i16[0] = vaddlv_u8(v127);
    if (v127.u32[0] > 1uLL)
    {
      v128 = LODWORD(v121->f64[0]);
      if (v124 >= *(_QWORD *)&v126)
        v128 = v124 % *(_QWORD *)&v126;
    }
    else
    {
      v128 = (v126.i32[0] - 1) & v124;
    }
    v129 = *(_QWORD **)(*v563 + 8 * v128);
    if (!v129)
      goto LABEL_217;
    v130 = (_QWORD *)*v129;
    if (!*v129)
      goto LABEL_217;
    v131 = *(_QWORD *)&v126 - 1;
    if (v127.u32[0] < 2uLL)
    {
      while (1)
      {
        v132 = v130[1];
        if (v132 == v124)
        {
          if (v130[2] == v124)
            goto LABEL_198;
        }
        else if ((v132 & v131) != v128)
        {
          goto LABEL_217;
        }
        v130 = (_QWORD *)*v130;
        if (!v130)
          goto LABEL_217;
      }
    }
    while (2)
    {
      v133 = v130[1];
      if (v133 != v124)
      {
        if (v133 >= *(_QWORD *)&v126)
          v133 %= *(_QWORD *)&v126;
        if (v133 != v128)
          goto LABEL_217;
        goto LABEL_192;
      }
      if (v130[2] != v124)
      {
LABEL_192:
        v130 = (_QWORD *)*v130;
        if (!v130)
          goto LABEL_217;
        continue;
      }
      break;
    }
LABEL_198:
    if (v127.u32[0] > 1uLL)
    {
      v134 = LODWORD(v121->f64[1]);
      if (v125 >= *(_QWORD *)&v126)
        v134 = v125 % *(_QWORD *)&v126;
    }
    else
    {
      v134 = (v126.i32[0] - 1) & v125;
    }
    v135 = *(_QWORD **)(*v563 + 8 * v134);
    if (v135)
    {
      v136 = (_QWORD *)*v135;
      if (v136)
      {
        if (v127.u32[0] < 2uLL)
        {
          while (1)
          {
            v137 = v136[1];
            if (v137 == v125)
            {
              if (v136[2] == v125)
                goto LABEL_252;
            }
            else if ((v137 & v131) != v134)
            {
              goto LABEL_217;
            }
            v136 = (_QWORD *)*v136;
            if (!v136)
              goto LABEL_217;
          }
        }
        do
        {
          v138 = v136[1];
          if (v138 == v125)
          {
            if (v136[2] == v125)
              goto LABEL_252;
          }
          else
          {
            if (v138 >= *(_QWORD *)&v126)
              v138 %= *(_QWORD *)&v126;
            if (v138 != v134)
              break;
          }
          v136 = (_QWORD *)*v136;
        }
        while (v136);
      }
    }
LABEL_217:
    v139 = v121[2].f64[0];
    v140 = v121[1];
    v141 = vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL).u64[0];
    v142 = v121[4].f64[0];
    v143 = v121[3];
    *(_QWORD *)&v144 = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u64[0];
    v145 = v121[6].f64[0];
    _Q5 = v121[5];
    *(_QWORD *)&v147 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
    v559 = v121[8].f64[0];
    v561 = (int8x16_t)v121[7];
    *(float64x2_t *)v581 = v140;
    *(double *)&v581[16] = v139;
    *(double *)&v581[40] = v142;
    *(float64x2_t *)&v581[24] = v143;
    *(double *)&v581[64] = v145;
    *(float64x2_t *)&v581[48] = _Q5;
    v148 = (float64x2_t)vzip1q_s64((int64x2_t)v140, (int64x2_t)v143);
    v149 = (float64x2_t)vzip2q_s64((int64x2_t)v140, (int64x2_t)v143);
    _Q20.f64[0] = v139;
    _Q20.f64[1] = v142;
    v151 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v140.f64[0]), v149, v140, 1), _Q20, v139);
    _Q21 = (int64x2_t)vmulq_f64(_Q5, v140);
    _D22 = v140.f64[1];
    __asm { FMLA            D21, D22, V5.D[1] }
    *(double *)_Q21.i64 = *(double *)_Q21.i64 + v145 * v139;
    v154 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v143.f64[0]), v149, v143, 1), _Q20, v142);
    _Q23 = (int8x16_t)vmulq_f64(_Q5, v143);
    _D24 = v143.f64[1];
    __asm { FMLA            D23, D24, V5.D[1] }
    *(double *)_Q23.i64 = *(double *)_Q23.i64 + v145 * v142;
    v157 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, _Q5.f64[0]), v149, _Q5, 1), _Q20, v145);
    _Q19 = vmulq_f64(_Q5, _Q5);
    _Q20.f64[0] = _Q5.f64[1];
    __asm { FMLA            D19, D20, V5.D[1] }
    _Q19.f64[0] = _Q19.f64[0] + v145 * v145;
    v159 = (int64x2_t)vaddq_f64(v154, (float64x2_t)xmmword_239EC6830);
    *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, v557));
    _Q19.f64[1] = NAN;
    v160 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v151, (float64x2_t)xmmword_239EC6820)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v159, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v159)), vabsq_f64(v157))));
    v161 = -v142;
    if (v160 > 0.0001
      || (v162.f64[0] = v140.f64[0],
          *(_QWORD *)&v162.f64[1] = v141,
          v163.f64[0] = v147,
          v163.f64[1] = _Q5.f64[0],
          v164.f64[0] = v144,
          v164.f64[1] = v143.f64[0],
          v165 = vmulq_f64(v162, vmlaq_n_f64(vmulq_n_f64(v163, v161), v164, v145)),
          fabs(v139 * (v147 * v143.f64[0] - v144 * _Q5.f64[0])+ vsubq_f64(v165, (float64x2_t)vdupq_laneq_s64((int64x2_t)v165, 1)).f64[0]+ -1.0) > 0.0001))
    {
      if (v160 > 0.1
        || (*(_QWORD *)&v140.f64[1] = v141,
            v166.f64[0] = v147,
            v166.f64[1] = _Q5.f64[0],
            v167 = vmulq_n_f64(v166, v161),
            v168.f64[0] = v144,
            v168.f64[1] = v143.f64[0],
            v169 = vmulq_f64(v140, vmlaq_n_f64(v167, v168, v145)),
            fabs(v139 * (v147 * v143.f64[0] - v144 * _Q5.f64[0])+ vsubq_f64(v169, (float64x2_t)vdupq_laneq_s64((int64x2_t)v169, 1)).f64[0]+ -1.0) > 0.1))
      {
        sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      sub_239516070((float64x2_t *)v581);
    }
    v170 = v561;
    *(_OWORD *)&v574[48] = *(_OWORD *)&v581[32];
    *(_OWORD *)&v574[64] = *(_OWORD *)&v581[48];
    *(_QWORD *)&v574[80] = *(_QWORD *)&v581[64];
    *(_OWORD *)&v574[16] = *(_OWORD *)v581;
    *(_OWORD *)&v574[32] = *(_OWORD *)&v581[16];
    *(_QWORD *)v574 = v122;
    *(_QWORD *)&v574[8] = 0x3FF0000000000000;
    *(float64_t *)&v574[104] = v559;
    v170.i64[1] = vextq_s8(v170, v170, 8uLL).u64[0];
    *(int8x16_t *)&v574[88] = v170;
    if (v84)
    {
      v171 = *(double *)(*(_QWORD *)(a1 + 200) + 8 * v122);
      v172 = (std::__shared_weak_count *)operator new(0x30uLL);
      v173 = v172;
      v174 = 1.0 / v171;
      v172->__shared_owners_ = 0;
      v175 = (unint64_t *)&v172->__shared_owners_;
      v172->__shared_weak_owners_ = 0;
      v172->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFCF48;
      v172[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250AFCF80;
      if (1.0 / v171 < 1.0e-15)
        v176 = NAN;
      else
        v176 = 1.0 / sqrt(v174);
      *(double *)&v172[1].__shared_weak_owners_ = v176;
      LOBYTE(v172[1].__shared_owners_) = v174 >= 1.0e-15;
      *(_QWORD *)v671 = v172 + 1;
      *(_QWORD *)&v671[8] = v172;
      v669.__r_.__value_.__r.__words[0] = v124 | (v125 << 32);
      v567 = v172;
      do
        v178 = __ldxr(v175);
      while (__stxr(v178 + 1, v175));
      *(_QWORD *)v581 = v172 + 1;
      *(_QWORD *)&v581[8] = v172;
      do
        v179 = __ldxr(v175);
      while (__stxr(v179 + 1, v175));
      v180 = sub_239CB4B84((uint64_t)&v602, (uint64_t *)v574, (unsigned int *)&v669, (uint64_t)&v172[1], v172);
      v177 = v180;
      do
        v181 = __ldaxr(v175);
      while (__stlxr(v181 - 1, v175));
      if (v181)
      {
        if ((v180 & 1) == 0)
          goto LABEL_236;
LABEL_239:
        v611[0] = 0;
        v182 = v567;
        if (v567)
          goto LABEL_240;
LABEL_243:
        v185 = *(std::__shared_weak_count **)&v671[8];
        if (*(_QWORD *)&v671[8])
          goto LABEL_244;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
        if ((v177 & 1) != 0)
          goto LABEL_239;
LABEL_236:
        v182 = v567;
        if (!v567)
          goto LABEL_243;
LABEL_240:
        v183 = (unint64_t *)&v182->__shared_owners_;
        do
          v184 = __ldaxr(v183);
        while (__stlxr(v184 - 1, v183));
        if (v184)
          goto LABEL_243;
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
        v185 = *(std::__shared_weak_count **)&v671[8];
        if (*(_QWORD *)&v671[8])
        {
LABEL_244:
          v186 = (unint64_t *)&v185->__shared_owners_;
          do
            v187 = __ldaxr(v186);
          while (__stlxr(v187 - 1, v186));
          if (!v187)
          {
            ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
            std::__shared_weak_count::__release_weak(v185);
          }
        }
      }
      v84 = v558;
    }
    else
    {
      *(_QWORD *)v671 = v124 | (v125 << 32);
      *(_OWORD *)v581 = 0uLL;
      v177 = sub_239CB4B84((uint64_t)&v602, (uint64_t *)v574, (unsigned int *)v671, 0, 0);
      if ((v177 & 1) != 0)
        v611[0] = 0;
    }
    if ((v177 & 1) == 0)
      goto LABEL_397;
    ++v122;
LABEL_252:
    v121 += 9;
    if (v121 != (float64x2_t *)v120)
      continue;
    break;
  }
LABEL_253:
  v188 = *(uint64_t **)(a1 + 56);
  if (v188)
  {
    v189 = 0;
    v190 = *(_QWORD **)(a1 + 56);
    do
    {
      v189 += (uint64_t)(v190[9] - v190[8]) >> 5;
      v190 = (_QWORD *)*v190;
    }
    while (v190);
    if (v189)
    {
      if (v84)
      {
        v191 = *(double **)(a1 + 176);
        v192 = *(double **)(a1 + 184);
        v193 = 0.0;
        v194 = 0.0;
        if (v191 != v192)
        {
          v195 = (char *)v192 - (char *)v191 - 8;
          if (v195 < 8)
          {
            do
            {
LABEL_264:
              v199 = *v191++;
              v194 = v194 + v199;
            }
            while (v191 != v192);
          }
          else
          {
            v196 = (v195 >> 3) + 1;
            v197 = v191 + 1;
            v198 = v196 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v194 = v194 + *(v197 - 1) + *v197;
              v197 += 2;
              v198 -= 2;
            }
            while (v198);
            if (v196 != (v196 & 0x3FFFFFFFFFFFFFFELL))
            {
              v191 += v196 & 0x3FFFFFFFFFFFFFFELL;
              goto LABEL_264;
            }
          }
        }
        v200 = *(double **)(a1 + 200);
        v201 = *(double **)(a1 + 208);
        if (v200 != v201)
        {
          v202 = (char *)v201 - (char *)v200 - 8;
          if (v202 >= 8)
          {
            v204 = (v202 >> 3) + 1;
            v205 = v200 + 1;
            v193 = 0.0;
            v206 = v204 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v193 = v193 + *(v205 - 1) + *v205;
              v205 += 2;
              v206 -= 2;
            }
            while (v206);
            if (v204 != (v204 & 0x3FFFFFFFFFFFFFFELL))
            {
              v200 += v204 & 0x3FFFFFFFFFFFFFFELL;
              goto LABEL_273;
            }
          }
          else
          {
            v193 = 0.0;
            do
            {
LABEL_273:
              v207 = *v200++;
              v193 = v193 + v207;
            }
            while (v200 != v201);
          }
        }
        v203 = v194 + v193;
      }
      else
      {
        v203 = (double)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3)
                      - 0x71C71C71C71C71C7 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4))
             + 1.0;
      }
      LODWORD(v208) = 0;
      *(double *)(a1 + 224) = v203 * *(float *)(a1 + 676) / (double)v189;
      while (1)
      {
        v209 = *(int8x8_t *)(a1 + 8);
        if (v209)
        {
          v210 = v188[3];
          v211 = (uint8x8_t)vcnt_s8(v209);
          v211.i16[0] = vaddlv_u8(v211);
          if (v211.u32[0] > 1uLL)
          {
            v212 = v188[3];
            if (v210 >= *(_QWORD *)&v209)
              v212 = v210 % *(_QWORD *)&v209;
          }
          else
          {
            v212 = (*(_QWORD *)&v209 - 1) & v210;
          }
          v213 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v212);
          if (v213)
          {
            v214 = (_QWORD *)*v213;
            if (v214)
              break;
          }
        }
LABEL_276:
        v188 = (uint64_t *)*v188;
        if (!v188)
          goto LABEL_327;
      }
      *(_QWORD *)&v119.f64[0] = v188[7];
      if (v211.u32[0] < 2uLL)
      {
        v215 = *(_QWORD *)&v209 - 1;
        while (1)
        {
          v217 = v214[1];
          if (v217 == v210)
          {
            if (v214[2] == v210)
              goto LABEL_298;
          }
          else if ((v217 & v215) != v212)
          {
            goto LABEL_276;
          }
          v214 = (_QWORD *)*v214;
          if (!v214)
            goto LABEL_276;
        }
      }
      while (2)
      {
        v216 = v214[1];
        if (v216 != v210)
        {
          if (v216 >= *(_QWORD *)&v209)
            v216 %= *(_QWORD *)&v209;
          if (v216 != v212)
            goto LABEL_276;
          goto LABEL_287;
        }
        if (v214[2] != v210)
        {
LABEL_287:
          v214 = (_QWORD *)*v214;
          if (!v214)
            goto LABEL_276;
          continue;
        }
        break;
      }
LABEL_298:
      v218 = (uint64_t *)v188[8];
      v219 = (uint64_t *)v188[9];
      if (v218 == v219)
        goto LABEL_276;
      v562 = (int8x16_t)vdivq_f64(*(float64x2_t *)(v188 + 5), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v119.f64[0], 0));
      v564 = *(_OWORD *)&vdivq_f64(v119, v119);
      v220 = (float64x2_t)vextq_s8(v562, v562, 8uLL);
      v560 = v220.f64[0];
      v208 = (int)v208;
      while (2)
      {
        *(_QWORD *)&v220.f64[0] = v218[3];
        _Q1 = *(float64x2_t *)(v218 + 1);
        _Q2 = vmulq_f64(_Q1, _Q1);
        _D3 = v218[2];
        __asm { FMLA            D2, D3, V1.D[1] }
        _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v220.f64[0] * v220.f64[0]);
        v224 = *(_OWORD *)&vmulq_f64(v220, _Q2);
        v225 = vmulq_n_f64(_Q1, _Q2.f64[0]);
        *(_QWORD *)v574 = v208;
        *(_QWORD *)&v574[24] = v564;
        *(_QWORD *)&_Q2.f64[0] = v562.i64[0];
        _Q2.f64[1] = v560;
        *(float64x2_t *)&v574[8] = _Q2;
        *(float64x2_t *)&v574[32] = v225;
        *(_QWORD *)&v574[48] = v224;
        v226 = *(double *)(a1 + 224);
        v227 = (std::__shared_weak_count *)operator new(0x30uLL);
        v228 = v227;
        v229 = 1.0 / v226;
        v227->__shared_owners_ = 0;
        v230 = (unint64_t *)&v227->__shared_owners_;
        v227->__shared_weak_owners_ = 0;
        v227->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFE808;
        v227[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250AFE840;
        if (1.0 / v226 < 1.0e-15)
          v231 = NAN;
        else
          v231 = 1.0 / sqrt(v229);
        *(double *)&v227[1].__shared_weak_owners_ = v231;
        LOBYTE(v227[1].__shared_owners_) = v229 >= 1.0e-15;
        *(_QWORD *)v671 = v227 + 1;
        *(_QWORD *)&v671[8] = v227;
        v232 = *v218;
        LODWORD(v669.__r_.__value_.__l.__data_) = v188[2];
        *(std::string::size_type *)((char *)v669.__r_.__value_.__r.__words + 4) = __PAIR64__(v232, v210);
        v566 = v227;
        do
          v233 = __ldxr(v230);
        while (__stxr(v233 + 1, v230));
        *(_QWORD *)v581 = v227 + 1;
        *(_QWORD *)&v581[8] = v227;
        do
          v234 = __ldxr(v230);
        while (__stxr(v234 + 1, v230));
        v235 = sub_239CB5798((uint64_t)&v602, (uint64_t *)v574, (unsigned int *)&v669, (uint64_t)&v227[1], v227);
        v236 = v235;
        do
          v237 = __ldaxr(v230);
        while (__stlxr(v237 - 1, v230));
        if (v237)
        {
          if ((v235 & 1) == 0)
            goto LABEL_311;
LABEL_314:
          v611[0] = 0;
          v238 = v566;
          if (v566)
            goto LABEL_315;
LABEL_318:
          v241 = *(std::__shared_weak_count **)&v671[8];
          if (*(_QWORD *)&v671[8])
            goto LABEL_319;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
          std::__shared_weak_count::__release_weak(v228);
          if ((v236 & 1) != 0)
            goto LABEL_314;
LABEL_311:
          v238 = v566;
          if (!v566)
            goto LABEL_318;
LABEL_315:
          v239 = (unint64_t *)&v238->__shared_owners_;
          do
            v240 = __ldaxr(v239);
          while (__stlxr(v240 - 1, v239));
          if (v240)
            goto LABEL_318;
          ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
          std::__shared_weak_count::__release_weak(v238);
          v241 = *(std::__shared_weak_count **)&v671[8];
          if (*(_QWORD *)&v671[8])
          {
LABEL_319:
            v242 = (unint64_t *)&v241->__shared_owners_;
            do
              v243 = __ldaxr(v242);
            while (__stlxr(v243 - 1, v242));
            if (!v243)
            {
              ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
              std::__shared_weak_count::__release_weak(v241);
            }
          }
        }
        if ((v236 & 1) == 0)
          goto LABEL_397;
        ++v208;
        v218 += 4;
        if (v218 == v219)
        {
          v84 = v558;
          goto LABEL_276;
        }
        continue;
      }
    }
  }
LABEL_327:
  v244 = *(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712);
  if (v244)
  {
    v245 = 0xCCCCCCCCCCCCCCCDLL * (v244 >> 3);
    sub_239CB5B70((uint64_t)&v607[4] + 8, v245);
    if (v84)
    {
      v246 = *(double **)(a1 + 176);
      v247 = *(double **)(a1 + 184);
      v248 = 0.0;
      v249 = 0.0;
      if (v246 != v247)
      {
        v250 = (char *)v247 - (char *)v246 - 8;
        if (v250 < 8)
        {
          do
          {
LABEL_335:
            v254 = *v246++;
            v249 = v249 + v254;
          }
          while (v246 != v247);
        }
        else
        {
          v251 = (v250 >> 3) + 1;
          v252 = v246 + 1;
          v253 = v251 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v249 = v249 + *(v252 - 1) + *v252;
            v252 += 2;
            v253 -= 2;
          }
          while (v253);
          if (v251 != (v251 & 0x3FFFFFFFFFFFFFFELL))
          {
            v246 += v251 & 0x3FFFFFFFFFFFFFFELL;
            goto LABEL_335;
          }
        }
      }
      v255 = *(double **)(a1 + 200);
      v256 = *(double **)(a1 + 208);
      if (v255 != v256)
      {
        v257 = (char *)v256 - (char *)v255 - 8;
        if (v257 >= 8)
        {
          v259 = (v257 >> 3) + 1;
          v260 = v255 + 1;
          v248 = 0.0;
          v261 = v259 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v248 = v248 + *(v260 - 1) + *v260;
            v260 += 2;
            v261 -= 2;
          }
          while (v261);
          if (v259 != (v259 & 0x3FFFFFFFFFFFFFFELL))
          {
            v255 += v259 & 0x3FFFFFFFFFFFFFFELL;
            goto LABEL_344;
          }
        }
        else
        {
          v248 = 0.0;
          do
          {
LABEL_344:
            v262 = *v255++;
            v248 = v248 + v262;
          }
          while (v255 != v256);
        }
      }
      v258 = v249 + v248;
    }
    else
    {
      v258 = (double)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3)
                    - 0x71C71C71C71C71C7 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4))
           + 1.0;
    }
    *(double *)(a1 + 232) = v258 * *(float *)(a1 + 680) / (double)v245;
    v263 = *(int8x16_t **)(a1 + 712);
    v264 = *(unsigned int **)(a1 + 720);
    if (v263 != (int8x16_t *)v264)
    {
      v265 = 0;
      do
      {
        v266 = v263->u32[0];
        v267 = *(_QWORD *)(a1 + 688);
        if (v266 < (*(_QWORD *)(a1 + 696) - v267) >> 5)
        {
          v268 = *(_QWORD *)(a1 + 8);
          if (v268)
          {
            v269 = v263->i64[1];
            v270 = (uint8x8_t)vcnt_s8((int8x8_t)v268);
            v270.i16[0] = vaddlv_u8(v270);
            v271 = v270.u32[0];
            if (v270.u32[0] > 1uLL)
            {
              v272 = v263->i64[1];
              if (v269 >= v268)
                v272 = v269 % v268;
            }
            else
            {
              v272 = ((_DWORD)v268 - 1) & v269;
            }
            v273 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v272);
            if (v273)
            {
              v274 = (_QWORD *)*v273;
              if (v274)
              {
                v275 = v263[2].i64[0];
                v276 = v263[1];
                if (v271 < 2)
                {
                  v277 = v268 - 1;
                  while (1)
                  {
                    v279 = v274[1];
                    if (v279 == v269)
                    {
                      if (v274[2] == v269)
                        goto LABEL_373;
                    }
                    else if ((v279 & v277) != v272)
                    {
                      goto LABEL_350;
                    }
                    v274 = (_QWORD *)*v274;
                    if (!v274)
                      goto LABEL_350;
                  }
                }
                do
                {
                  v278 = v274[1];
                  if (v278 == v269)
                  {
                    if (v274[2] == v269)
                    {
LABEL_373:
                      v280 = (__int128 *)(v267 + 32 * v266);
                      v281 = *v280;
                      v282 = v280[1];
                      *(_QWORD *)v574 = v265;
                      *(_OWORD *)&v574[24] = v282;
                      *(_OWORD *)&v574[8] = v281;
                      *(_QWORD *)&v574[56] = v275;
                      v276.i64[1] = vextq_s8(v276, v276, 8uLL).u64[0];
                      *(int8x16_t *)&v574[40] = v276;
                      v283 = *(double *)(a1 + 232);
                      v284 = (std::__shared_weak_count *)operator new(0x30uLL);
                      v285 = v284;
                      v286 = 1.0 / v283;
                      v284->__shared_owners_ = 0;
                      v287 = (unint64_t *)&v284->__shared_owners_;
                      v284->__shared_weak_owners_ = 0;
                      v284->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFE808;
                      v284[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250AFE840;
                      if (1.0 / v283 < 1.0e-15)
                        v288 = NAN;
                      else
                        v288 = 1.0 / sqrt(v286);
                      *(double *)&v284[1].__shared_weak_owners_ = v288;
                      LOBYTE(v284[1].__shared_owners_) = v286 >= 1.0e-15;
                      *(_QWORD *)v671 = v284 + 1;
                      *(_QWORD *)&v671[8] = v284;
                      LODWORD(v669.__r_.__value_.__l.__data_) = v269;
                      v565 = v284;
                      do
                        v289 = __ldxr(v287);
                      while (__stxr(v289 + 1, v287));
                      *(_QWORD *)v581 = v284 + 1;
                      *(_QWORD *)&v581[8] = v284;
                      do
                        v290 = __ldxr(v287);
                      while (__stxr(v290 + 1, v287));
                      v291 = sub_239CB5CF0((uint64_t)&v602, (uint64_t *)v574, (unsigned int *)&v669, (uint64_t)&v284[1], v284);
                      v292 = v291;
                      do
                        v293 = __ldaxr(v287);
                      while (__stlxr(v293 - 1, v287));
                      if (v293)
                      {
                        if ((v291 & 1) == 0)
                          goto LABEL_384;
LABEL_387:
                        v611[0] = 0;
                        v294 = v565;
                        if (v565)
                          goto LABEL_388;
                      }
                      else
                      {
                        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                        std::__shared_weak_count::__release_weak(v285);
                        if ((v292 & 1) != 0)
                          goto LABEL_387;
LABEL_384:
                        v294 = v565;
                        if (v565)
                        {
LABEL_388:
                          v295 = (unint64_t *)&v294->__shared_owners_;
                          do
                            v296 = __ldaxr(v295);
                          while (__stlxr(v296 - 1, v295));
                          if (!v296)
                          {
                            ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                            std::__shared_weak_count::__release_weak(v294);
                          }
                        }
                      }
                      v297 = *(std::__shared_weak_count **)&v671[8];
                      if (*(_QWORD *)&v671[8])
                      {
                        v298 = (unint64_t *)(*(_QWORD *)&v671[8] + 8);
                        do
                          v299 = __ldaxr(v298);
                        while (__stlxr(v299 - 1, v298));
                        if (!v299)
                        {
                          ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                          std::__shared_weak_count::__release_weak(v297);
                        }
                      }
                      if ((v292 & 1) != 0)
                      {
                        v265 += v292 & 1;
                        v84 = v558;
                        break;
                      }
LABEL_397:
                      v300 = 0;
                      goto LABEL_508;
                    }
                  }
                  else
                  {
                    if (v278 >= v268)
                      v278 %= v268;
                    if (v278 != v272)
                      break;
                  }
                  v274 = (_QWORD *)*v274;
                }
                while (v274);
              }
            }
          }
        }
LABEL_350:
        v263 = (int8x16_t *)((char *)v263 + 40);
      }
      while (v263 != (int8x16_t *)v264);
    }
  }
  v301 = 1.0;
  v302 = 1.0;
  if (v84)
  {
    v304 = *(_BYTE **)(a1 + 176);
    v303 = *(_BYTE **)(a1 + 184);
    v305 = v303 - v304;
    if (v303 != v304)
    {
      memset(v574, 0, 24);
      if (v305 < 0)
        sub_2394189F8();
      v306 = operator new(v303 - v304);
      v307 = v305 >> 3;
      memcpy(v306, v304, v305);
      v308 = (unint64_t)(v305 >> 3) >> 1;
      if (v307 >> 1 != v307)
        sub_2395F71EC((double *)v306, (double *)v306 + v308, (double *)v306 + v307);
      v302 = *((double *)v306 + v308);
      operator delete(v306);
    }
  }
  v309 = *(double *)(a1 + 648);
  v310 = v302 * v309;
  *(double *)&v593 = v302 * v309;
  *((double *)&v593 + 1) = v310 * v310;
  *(double *)&v594 = v310 + v310;
  memset(v611, 0, 5);
  if (v558)
  {
    v312 = *(_BYTE **)(a1 + 200);
    v311 = *(_BYTE **)(a1 + 208);
    v313 = v311 - v312;
    if (v311 != v312)
    {
      memset(v574, 0, 24);
      if (v313 < 0)
        sub_2394189F8();
      v314 = operator new(v311 - v312);
      v315 = v313 >> 3;
      memcpy(v314, v312, v313);
      v316 = (unint64_t)(v313 >> 3) >> 1;
      if (v315 >> 1 != v315)
        sub_2395F71EC((double *)v314, (double *)v314 + v316, (double *)v314 + v315);
      v301 = *((double *)v314 + v316);
      operator delete(v314);
      v309 = *(double *)(a1 + 648);
    }
  }
  *((double *)&v595 + 1) = v301 * v309;
  *(double *)&v596 = *((double *)&v595 + 1) * *((double *)&v595 + 1);
  v317 = *(double *)(a1 + 232);
  v318 = *(double *)(a1 + 224) * *(double *)(a1 + 656);
  *((double *)&v596 + 1) = *((double *)&v595 + 1) + *((double *)&v595 + 1);
  *(double *)&v598 = v318;
  *((double *)&v598 + 1) = v318 * v318;
  *(double *)&v599 = v318 + v318;
  *((double *)&v600 + 1) = v317 * *(double *)(a1 + 664);
  v319 = *((double *)&v600 + 1);
  *(double *)&v601 = v319 * v319;
  *((double *)&v601 + 1) = v319 + v319;
  memset(v611, 0, 5);
  if (DWORD2(v614) != *(unsigned __int8 *)(a1 + 674))
    DWORD2(v614) = *(unsigned __int8 *)(a1 + 674);
  *(_QWORD *)v581 = off_250AFEA50;
  v320 = *(_OWORD *)(a1 + 256);
  *(_OWORD *)&v581[8] = *(_OWORD *)(a1 + 240);
  *(_OWORD *)&v581[24] = v320;
  *(_OWORD *)&v581[40] = *(_OWORD *)(a1 + 272);
  *(_OWORD *)&v581[49] = *(_OWORD *)(a1 + 281);
  v321 = v582;
  v322 = *(_QWORD *)(a1 + 328);
  if (v322)
  {
    if (v322 != a1 + 304)
    {
      v322 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v322 + 16))(v322);
      goto LABEL_415;
    }
    v583 = v582;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v322 + 24))(v322, v582);
  }
  else
  {
LABEL_415:
    v583 = (_BYTE *)v322;
  }
  v323 = v584;
  v324 = *(_QWORD *)(a1 + 360);
  if (v324)
  {
    if (v324 != a1 + 336)
    {
      v324 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v324 + 16))(v324);
      goto LABEL_420;
    }
    v585 = v584;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v324 + 24))(v324, v584);
  }
  else
  {
LABEL_420:
    v585 = (_BYTE *)v324;
  }
  v586 = -1.0;
  *(_QWORD *)v581 = &off_250AFE9E8;
  v325 = *(_OWORD *)(a1 + 384);
  v587 = *(_OWORD *)(a1 + 368);
  v588 = v325;
  v589 = *((_QWORD *)&v587 + 1);
  v590 = 0x4000000000000000;
  kdebug_trace();
  (*(void (**)(char *@<X8>))(*(_QWORD *)v581 + 16))(v671);
  ((void (*)(std::string *@<X8>))*v591)(&v669);
  if ((v671[23] & 0x80000000) != 0)
  {
    sub_23941A7F8(v574, *(void **)v671, *(unint64_t *)&v671[8]);
  }
  else
  {
    *(_OWORD *)v574 = *(_OWORD *)v671;
    *(_QWORD *)&v574[16] = *(_QWORD *)&v671[16];
  }
  if (SHIBYTE(v669.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&v574[24], v669.__r_.__value_.__l.__data_, v669.__r_.__value_.__l.__size_);
    *(_QWORD *)&v574[48] = 0;
    *(_DWORD *)&v574[56] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v574[64] = _Q0;
    memset(&v574[80], 0, 32);
    v575 = 0u;
    *(_OWORD *)v576 = 0u;
    v577 = 0u;
    v578 = 0u;
    *(_OWORD *)__p = 0u;
    v580 = 0;
    if (SHIBYTE(v669.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v669.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)&v574[24] = v669;
    *(_QWORD *)&v574[48] = 0;
    *(_DWORD *)&v574[56] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v574[64] = _Q0;
    memset(&v574[80], 0, 32);
    v575 = 0u;
    *(_OWORD *)v576 = 0u;
    v577 = 0u;
    v578 = 0u;
    *(_OWORD *)__p = 0u;
    v580 = 0;
  }
  if ((v671[23] & 0x80000000) != 0)
    operator delete(*(void **)v671);
  sub_239C2F538(v574, 4uLL, 2uLL);
  kdebug_trace();
  v328 = ((double (*)(_QWORD *))v591[4])(&v591);
  v670 = 0;
  *(_QWORD *)v671 = &off_250AFD3E8;
  *(_QWORD *)&v671[8] = &v591;
  *(_QWORD *)&v671[16] = v613;
  v672 = v671;
  sub_23965A910(v671, &v669);
  v329 = v672;
  if (v672 == v671)
  {
    v330 = 4;
    v329 = v671;
LABEL_435:
    (*(void (**)(void))(*v329 + 8 * v330))();
  }
  else if (v672)
  {
    v330 = 5;
    goto LABEL_435;
  }
  if ((*(unsigned int (__cdecl **)())(*(_QWORD *)v581 + 24))())
  {
    v613 = 1;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v581 + 40))((uint64_t)v581))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v581 + 48))((uint64_t)v581, 0.0);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v581 + 56))((uint64_t)v581);
    v331 = (*(double (**)(uint64_t))(*(_QWORD *)v581 + 32))((uint64_t)v581);
    ((void (*)(uint64_t, double))v591[12])((uint64_t)&v591, v331);
  }
  kdebug_trace();
  if (v581[48])
  {
    v332.i64[0] = *(_QWORD *)&v581[56];
    if (v581[64])
    {
      *(_QWORD *)v671 = &v591;
      *(_QWORD *)&v671[8] = *(_QWORD *)&v581[56];
      *(_QWORD *)&v671[16] = __dst;
      sub_239CE1174((uint64_t)v671, v332, v333, v334, v335, v336, v337);
      v338 = (uint64_t)__dst[0];
      if (*(double *)__dst <= 0.0)
      {
        v339 = 1.0e20;
        v338 = 0x3DDB7CDFD9D7BDBBLL;
      }
      else
      {
        v339 = 1.0 / (*(double *)__dst * *(double *)__dst);
      }
      *(_QWORD *)&v592 = v338;
      *((double *)&v592 + 1) = v339;
      *((_QWORD *)&v594 + 1) = v338;
      *(double *)&v595 = v339;
      *(_QWORD *)&v597 = v338;
      *((double *)&v597 + 1) = v339;
      *((_QWORD *)&v599 + 1) = v338;
      *(double *)&v600 = v339;
      memset(v611, 0, 5);
    }
    else
    {
      sub_239CE15E8((uint64_t)&v591, v332, v333, v334, v335, v336, v337);
    }
  }
  if (((unsigned int (*)(uint64_t))v591[1])((uint64_t)&v591))
  {
    if (v581[16])
    {
      v340 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
      std::ios_base::getloc((const std::ios_base *)((char *)v340 + *(_QWORD *)(*v340 - 24)));
      v341 = std::locale::use_facet((const std::locale *)v671, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v341->__vftable[2].~facet_0)(v341, 10);
      std::locale::~locale((std::locale *)v671);
      std::ostream::put();
      std::ostream::flush();
    }
    *(_DWORD *)&v574[56] = 0;
    v342 = v670;
    if (!v670)
      goto LABEL_767;
    goto LABEL_452;
  }
  *(_QWORD *)&v574[64] = sub_239CE1C48((uint64_t)&v591, (uint64_t)&v574[80]);
  *(_QWORD *)&v574[72] = *(_QWORD *)&v574[64];
  v586 = *(double *)&v574[64];
  sub_23945D3D0(&v574[104], *(char **)&v574[80], *(char **)&v574[88], (uint64_t)(*(_QWORD *)&v574[88] - *(_QWORD *)&v574[80]) >> 3);
  kdebug_trace();
  v345 = sub_239CB89C0((uint64_t)&v602);
  v346 = v345;
  v347 = (uint64_t *)*((_QWORD *)&v577 + 1);
  v348 = (_QWORD *)v577;
  v576[0] = (char *)v576[0] + v345;
  if ((unint64_t)v577 < *((_QWORD *)&v577 + 1))
  {
    *(_QWORD *)v577 = v345;
    v349 = v348 + 1;
    goto LABEL_530;
  }
  v365 = v576[1];
  v366 = v577 - (unint64_t)v576[1];
  v367 = (uint64_t)(v577 - (unint64_t)v576[1]) >> 3;
  v368 = v367 + 1;
  if ((unint64_t)(v367 + 1) >> 61)
    goto LABEL_776;
  if ((uint64_t)(*((_QWORD *)&v577 + 1) - (unint64_t)v576[1]) >> 2 > v368)
    v368 = (uint64_t)(*((_QWORD *)&v577 + 1) - (unint64_t)v576[1]) >> 2;
  if (*((_QWORD *)&v577 + 1) - (unint64_t)v576[1] >= 0x7FFFFFFFFFFFFFF8)
    v369 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v369 = v368;
  if (v369)
  {
    if (!(v369 >> 61))
    {
      v370 = (char *)operator new(8 * v369);
      goto LABEL_521;
    }
LABEL_777:
    sub_239418A80();
  }
  v370 = 0;
LABEL_521:
  v371 = (uint64_t *)&v370[8 * v367];
  v347 = (uint64_t *)&v370[8 * v369];
  *v371 = v346;
  v349 = v371 + 1;
  if (v348 != (_QWORD *)v365)
  {
    v372 = (char *)v348 - v365 - 8;
    if (v372 < 0x58)
      goto LABEL_785;
    if ((unint64_t)((char *)v348 - v370 - v366) < 0x20)
      goto LABEL_785;
    v373 = (v372 >> 3) + 1;
    v374 = &v370[8 * v367 - 16];
    v375 = (__int128 *)(v348 - 2);
    v376 = v373 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v377 = *v375;
      *((_OWORD *)v374 - 1) = *(v375 - 1);
      *(_OWORD *)v374 = v377;
      v374 -= 32;
      v375 -= 2;
      v376 -= 4;
    }
    while (v376);
    v371 -= v373 & 0x3FFFFFFFFFFFFFFCLL;
    v348 -= v373 & 0x3FFFFFFFFFFFFFFCLL;
    if (v373 != (v373 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_785:
      do
      {
        v378 = *--v348;
        *--v371 = v378;
      }
      while (v348 != (_QWORD *)v365);
    }
  }
  v576[1] = v371;
  *(_QWORD *)&v577 = v349;
  *((_QWORD *)&v577 + 1) = v347;
  if (v365)
  {
    operator delete(v365);
    v347 = (uint64_t *)*((_QWORD *)&v577 + 1);
  }
LABEL_530:
  *(_QWORD *)&v577 = v349;
  v379 = sub_239CB8888((uint64_t)&v602);
  v380 = v379;
  v576[0] = (char *)v576[0] + v379;
  if (v349 < v347)
  {
    *v349 = v379;
    v381 = (unint64_t *)(v349 + 1);
    goto LABEL_553;
  }
  v382 = (uint64_t *)v576[1];
  v383 = (char *)v349 - (char *)v576[1];
  v384 = ((char *)v349 - (char *)v576[1]) >> 3;
  v385 = v384 + 1;
  if ((unint64_t)(v384 + 1) >> 61)
    goto LABEL_776;
  if (((char *)v347 - (char *)v576[1]) >> 2 > v385)
    v385 = ((char *)v347 - (char *)v576[1]) >> 2;
  if ((unint64_t)((char *)v347 - (char *)v576[1]) >= 0x7FFFFFFFFFFFFFF8)
    v386 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v386 = v385;
  if (v386)
  {
    if (v386 >> 61)
      goto LABEL_777;
    v387 = operator new(8 * v386);
  }
  else
  {
    v387 = 0;
  }
  v388 = (unint64_t *)&v387[8 * v384];
  v347 = (uint64_t *)&v387[8 * v386];
  *v388 = v380;
  v381 = v388 + 1;
  if (v349 != v382)
  {
    v389 = (char *)v349 - (char *)v382 - 8;
    if (v389 < 0x58)
    {
      v390 = v349;
      goto LABEL_550;
    }
    if ((unint64_t)((char *)v349 - v387 - v383) < 0x20)
    {
      v390 = v349;
      goto LABEL_550;
    }
    v391 = (v389 >> 3) + 1;
    v390 = &v349[-(v391 & 0x3FFFFFFFFFFFFFFCLL)];
    v392 = &v387[8 * v384 - 16];
    v393 = v349 - 2;
    v394 = v391 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v395 = *(_OWORD *)v393;
      *(v392 - 1) = *((_OWORD *)v393 - 1);
      *v392 = v395;
      v392 -= 2;
      v393 -= 4;
      v394 -= 4;
    }
    while (v394);
    v388 -= v391 & 0x3FFFFFFFFFFFFFFCLL;
    if (v391 != (v391 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_550:
        v396 = *--v390;
        *--v388 = v396;
      }
      while (v390 != v382);
    }
  }
  v576[1] = v388;
  *(_QWORD *)&v577 = v381;
  *((_QWORD *)&v577 + 1) = v347;
  if (v382)
  {
    operator delete(v382);
    v347 = (uint64_t *)*((_QWORD *)&v577 + 1);
  }
LABEL_553:
  *(_QWORD *)&v577 = v381;
  v397 = sub_239CB8740((uint64_t)&v602);
  v398 = v397;
  v576[0] = (char *)v576[0] + v397;
  if (v381 < (unint64_t *)v347)
  {
    *v381 = v397;
    v399 = v381 + 1;
    goto LABEL_576;
  }
  v400 = (unint64_t *)v576[1];
  v401 = (char *)v381 - (char *)v576[1];
  v402 = ((char *)v381 - (char *)v576[1]) >> 3;
  v403 = v402 + 1;
  if ((unint64_t)(v402 + 1) >> 61)
    goto LABEL_776;
  if (((char *)v347 - (char *)v576[1]) >> 2 > v403)
    v403 = ((char *)v347 - (char *)v576[1]) >> 2;
  if ((unint64_t)((char *)v347 - (char *)v576[1]) >= 0x7FFFFFFFFFFFFFF8)
    v404 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v404 = v403;
  if (v404)
  {
    if (v404 >> 61)
      goto LABEL_777;
    v405 = operator new(8 * v404);
  }
  else
  {
    v405 = 0;
  }
  v406 = (unint64_t *)&v405[8 * v402];
  v347 = (uint64_t *)&v405[8 * v404];
  *v406 = v398;
  v399 = v406 + 1;
  if (v381 != v400)
  {
    v407 = (char *)v381 - (char *)v400 - 8;
    if (v407 < 0x58)
    {
      v408 = v381;
      goto LABEL_573;
    }
    if ((unint64_t)((char *)v381 - v405 - v401) < 0x20)
    {
      v408 = v381;
      goto LABEL_573;
    }
    v409 = (v407 >> 3) + 1;
    v408 = &v381[-(v409 & 0x3FFFFFFFFFFFFFFCLL)];
    v410 = &v405[8 * v402 - 16];
    v411 = v381 - 2;
    v412 = v409 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v413 = *(_OWORD *)v411;
      *(v410 - 1) = *((_OWORD *)v411 - 1);
      *v410 = v413;
      v410 -= 2;
      v411 -= 4;
      v412 -= 4;
    }
    while (v412);
    v406 -= v409 & 0x3FFFFFFFFFFFFFFCLL;
    if (v409 != (v409 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_573:
        v414 = *--v408;
        *--v406 = v414;
      }
      while (v408 != v400);
    }
  }
  v576[1] = v406;
  *(_QWORD *)&v577 = v399;
  *((_QWORD *)&v577 + 1) = v347;
  if (v400)
  {
    operator delete(v400);
    v347 = (uint64_t *)*((_QWORD *)&v577 + 1);
  }
LABEL_576:
  *(_QWORD *)&v577 = v399;
  v415 = sub_239CB8628((uint64_t)&v602);
  v416 = v415;
  v576[0] = (char *)v576[0] + v415;
  if (v399 < (unint64_t *)v347)
  {
    *v399 = v415;
    v417 = v399 + 1;
    goto LABEL_599;
  }
  v418 = (unint64_t *)v576[1];
  v419 = (char *)v399 - (char *)v576[1];
  v420 = ((char *)v399 - (char *)v576[1]) >> 3;
  v421 = v420 + 1;
  if ((unint64_t)(v420 + 1) >> 61)
LABEL_776:
    sub_2394189F8();
  if (((char *)v347 - (char *)v576[1]) >> 2 > v421)
    v421 = ((char *)v347 - (char *)v576[1]) >> 2;
  if ((unint64_t)((char *)v347 - (char *)v576[1]) >= 0x7FFFFFFFFFFFFFF8)
    v422 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v422 = v421;
  if (v422)
  {
    if (v422 >> 61)
      goto LABEL_777;
    v423 = operator new(8 * v422);
  }
  else
  {
    v423 = 0;
  }
  v424 = (unint64_t *)&v423[8 * v420];
  v425 = &v423[8 * v422];
  *v424 = v416;
  v417 = v424 + 1;
  if (v399 != v418)
  {
    v426 = (char *)v399 - (char *)v418 - 8;
    if (v426 < 0x58)
    {
      v427 = v399;
      goto LABEL_596;
    }
    if ((unint64_t)((char *)v399 - v423 - v419) < 0x20)
    {
      v427 = v399;
      goto LABEL_596;
    }
    v428 = (v426 >> 3) + 1;
    v427 = &v399[-(v428 & 0x3FFFFFFFFFFFFFFCLL)];
    v429 = &v423[8 * v420 - 16];
    v430 = v399 - 2;
    v431 = v428 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v432 = *(_OWORD *)v430;
      *(v429 - 1) = *((_OWORD *)v430 - 1);
      *v429 = v432;
      v429 -= 2;
      v430 -= 4;
      v431 -= 4;
    }
    while (v431);
    v424 -= v428 & 0x3FFFFFFFFFFFFFFCLL;
    if (v428 != (v428 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_596:
        v433 = *--v427;
        *--v424 = v433;
      }
      while (v427 != v418);
    }
  }
  v576[1] = v424;
  *(_QWORD *)&v577 = v417;
  *((_QWORD *)&v577 + 1) = v425;
  if (v418)
    operator delete(v418);
LABEL_599:
  *(_QWORD *)&v577 = v417;
  v434 = sub_239CB8368((uint64_t)&v602);
  v435 = v434;
  v578.i64[0] += v434;
  v578.i64[1] = v578.i64[1] - v434 + 8 * v434;
  v436 = (char *)__p[1];
  if (__p[1] < v580)
  {
    *(_QWORD *)__p[1] = v434;
    v437 = v436 + 8;
    goto LABEL_620;
  }
  v438 = __p[0];
  v439 = (char *)__p[1] - (char *)__p[0];
  v440 = ((char *)__p[1] - (char *)__p[0]) >> 3;
  v441 = v440 + 1;
  if ((unint64_t)(v440 + 1) >> 61)
    goto LABEL_778;
  v442 = v580 - (char *)__p[0];
  if ((v580 - (char *)__p[0]) >> 2 > v441)
    v441 = v442 >> 2;
  if ((unint64_t)v442 >= 0x7FFFFFFFFFFFFFF8)
    v443 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v443 = v441;
  if (v443)
  {
    if (!(v443 >> 61))
    {
      v444 = operator new(8 * v443);
      goto LABEL_611;
    }
LABEL_782:
    sub_239418A80();
  }
  v444 = 0;
LABEL_611:
  v445 = &v444[8 * v440];
  v446 = &v444[8 * v443];
  *v445 = v435;
  v437 = v445 + 1;
  if (v436 != v438)
  {
    v447 = v436 - v438 - 8;
    if (v447 < 0x58)
      goto LABEL_786;
    if ((unint64_t)(v436 - v444 - v439) < 0x20)
      goto LABEL_786;
    v448 = (v447 >> 3) + 1;
    v449 = &v444[8 * v440 - 16];
    v450 = v436 - 16;
    v451 = v448 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v452 = *(_OWORD *)v450;
      *(v449 - 1) = *((_OWORD *)v450 - 1);
      *v449 = v452;
      v449 -= 2;
      v450 -= 32;
      v451 -= 4;
    }
    while (v451);
    v445 -= v448 & 0x3FFFFFFFFFFFFFFCLL;
    v436 -= 8 * (v448 & 0x3FFFFFFFFFFFFFFCLL);
    if (v448 != (v448 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_786:
      do
      {
        v453 = *((_QWORD *)v436 - 1);
        v436 -= 8;
        *--v445 = v453;
      }
      while (v436 != v438);
    }
  }
  __p[0] = v445;
  __p[1] = v437;
  v580 = v446;
  if (v438)
    operator delete(v438);
LABEL_620:
  __p[1] = v437;
  v454 = sub_239CB7DAC((uint64_t)&v602);
  v455 = v454;
  v578 = vaddq_s64(v578, vdupq_n_s64(v454));
  v456 = (char *)__p[1];
  if (__p[1] < v580)
  {
    *(_QWORD *)__p[1] = v454;
    v457 = v456 + 8;
    goto LABEL_641;
  }
  v458 = __p[0];
  v459 = (char *)__p[1] - (char *)__p[0];
  v460 = ((char *)__p[1] - (char *)__p[0]) >> 3;
  v461 = v460 + 1;
  if ((unint64_t)(v460 + 1) >> 61)
LABEL_778:
    sub_2394189F8();
  v462 = v580 - (char *)__p[0];
  if ((v580 - (char *)__p[0]) >> 2 > v461)
    v461 = v462 >> 2;
  if ((unint64_t)v462 >= 0x7FFFFFFFFFFFFFF8)
    v463 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v463 = v461;
  if (v463)
  {
    if (v463 >> 61)
      goto LABEL_782;
    v464 = operator new(8 * v463);
  }
  else
  {
    v464 = 0;
  }
  v465 = &v464[8 * v460];
  v466 = &v464[8 * v463];
  *v465 = v455;
  v457 = v465 + 1;
  if (v456 != v458)
  {
    v467 = v456 - v458 - 8;
    if (v467 < 0x58)
      goto LABEL_787;
    if ((unint64_t)(v456 - &v464[v459]) < 0x20)
      goto LABEL_787;
    v468 = (v467 >> 3) + 1;
    v469 = &v464[8 * v460 - 16];
    v470 = v456 - 16;
    v471 = v468 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v472 = *(_OWORD *)v470;
      *(v469 - 1) = *((_OWORD *)v470 - 1);
      *v469 = v472;
      v469 -= 2;
      v470 -= 32;
      v471 -= 4;
    }
    while (v471);
    v465 -= v468 & 0x3FFFFFFFFFFFFFFCLL;
    v456 -= 8 * (v468 & 0x3FFFFFFFFFFFFFFCLL);
    if (v468 != (v468 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_787:
      do
      {
        v473 = *((_QWORD *)v456 - 1);
        v456 -= 8;
        *--v465 = v473;
      }
      while (v456 != v458);
    }
  }
  __p[0] = v465;
  __p[1] = v457;
  v580 = v466;
  if (v458)
    operator delete(v458);
LABEL_641:
  __p[1] = v457;
  if ((*(unsigned int (__cdecl **)())(*(_QWORD *)v581 + 24))())
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v581 + 40))((uint64_t)v581))
    {
      ((void (*)(uint64_t, double, double, double, double, float64x2_t))v591[11])((uint64_t)&v591, v474, v475, v476, v477, v478);
      (*(void (**)(uint64_t, double))(*(_QWORD *)v581 + 48))((uint64_t)v581, v479);
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v581 + 56))((uint64_t)v581);
    }
    v480 = (*(double (**)(uint64_t))(*(_QWORD *)v581 + 32))((uint64_t)v581);
    ((void (*)(uint64_t, double))v591[12])((uint64_t)&v591, v480);
  }
  v481 = v616;
  v482 = 8 * v616;
  v483 = (v482 + 31) & 0xFFFFFFFE0;
  __dst[0] = 0;
  __dst[1] = (void *)(v483 >> 3);
  *(_QWORD *)v671 = 0;
  malloc_type_posix_memalign((void **)v671, 0x20uLL, v483, 0x100BBD03uLL);
  v484 = *(double **)v671;
  __dst[0] = *(void **)v671;
  if (!*(_QWORD *)v671)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v556 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v556, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if (v481)
  {
    memcpy(*(void **)v671, (const void *)__src, v482);
    v484 = (double *)__dst[0];
  }
  v572 = v616;
  v485 = fabs(*v484);
  if (v616 != 1)
  {
    v486 = v484 + 1;
    v487 = 8 * v616 - 8;
    do
    {
      v488 = *v486++;
      v489 = fabs(v488);
      if (v485 < v489)
        v485 = v489;
      v487 -= 8;
    }
    while (v487);
  }
  if (v485 < v485 * *(double *)&v581[24])
  {
    if (v581[16])
    {
      v490 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
      std::ios_base::getloc((const std::ios_base *)((char *)v490 + *(_QWORD *)(*v490 - 24)));
      v491 = std::locale::use_facet((const std::locale *)v671, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v491->__vftable[2].~facet_0)(v491, 10);
      std::locale::~locale((std::locale *)v671);
      std::ostream::put();
      std::ostream::flush();
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
      v492 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v492, (uint64_t)"][", 2);
      if (v485 == 0.0)
        sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
      else
        std::ostream::operator<<();
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
      v552 = (_QWORD *)std::ostream::operator<<();
      v553 = sub_239458500(v552, (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v553 + *(_QWORD *)(*v553 - 24)));
      v554 = std::locale::use_facet((const std::locale *)v671, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v554->__vftable[2].~facet_0)(v554, 10);
      std::locale::~locale((std::locale *)v671);
      std::ostream::put();
      std::ostream::flush();
    }
    *(_DWORD *)&v574[56] = 1;
    goto LABEL_766;
  }
  v493 = v586;
  kdebug_trace();
  v569[0] = 0;
  v569[1] = 0;
  v570 = 0;
  v494 = v485;
  while (2)
  {
    v496 = *(_DWORD *)&v574[48];
    if (*(int *)&v574[48] < *(int *)&v581[12])
    {
      v497 = ++*(_DWORD *)&v574[48];
      if (((unsigned int (*)(uint64_t, uint64_t))v591[2])((uint64_t)&v591, (uint64_t)v569))
      {
        v547 = v581[16];
        if (v581[16])
        {
          v548 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
          std::ios_base::getloc((const std::ios_base *)((char *)v548 + *(_QWORD *)(*v548 - 24)));
          v549 = std::locale::use_facet((const std::locale *)v671, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v549->__vftable[2].~facet_0)(v549, 10);
          std::locale::~locale((std::locale *)v671);
          std::ostream::put();
          std::ostream::flush();
          v547 = 0;
        }
        goto LABEL_759;
      }
      ++*(_DWORD *)&v574[52];
      if (v570)
      {
        v498 = *(double *)v569[0] * *(double *)v569[0];
        if (v570 != 1)
        {
          v499 = (double *)((char *)v569[0] + 8);
          v500 = (v570 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
          if (v500 < 3)
          {
            do
            {
LABEL_671:
              v506 = *v499++;
              v498 = v498 + v506 * v506;
            }
            while (v499 != (double *)((char *)v569[0] + 8 * v570));
          }
          else
          {
            v501 = v500 + 1;
            v502 = (float64x2_t *)((char *)v569[0] + 24);
            v503 = v501 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v504 = vmulq_f64(v502[-1], v502[-1]);
              v505 = vmulq_f64(*v502, *v502);
              v498 = v498 + v504.f64[0] + v504.f64[1] + v505.f64[0] + v505.f64[1];
              v502 += 2;
              v503 -= 4;
            }
            while (v503);
            if (v501 != (v501 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v499 += v501 & 0x3FFFFFFFFFFFFFFCLL;
              goto LABEL_671;
            }
          }
        }
      }
      else
      {
        v498 = 0.0;
      }
      v507 = sqrt(v498);
      if (v507 < *(double *)&v581[32] * (v328 + *(double *)&v581[32]) && v496 >= *(_DWORD *)&v581[8])
      {
        if (v581[16])
        {
          v550 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
          std::ios_base::getloc((const std::ios_base *)((char *)v550 + *(_QWORD *)(*v550 - 24)));
          v551 = std::locale::use_facet((const std::locale *)v671, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v551->__vftable[2].~facet_0)(v551, 10);
          std::locale::~locale((std::locale *)v671);
          std::ostream::put();
          std::ostream::flush();
          (*(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)v581 + 64))((uint64_t)v581, v493, v507, v494, v485);
        }
        v547 = 2;
LABEL_759:
        *(_DWORD *)&v574[56] = v547;
        break;
      }
      ((void (*)(uint64_t, _QWORD *))v591[5])((uint64_t)&v591, v569);
      v509 = v616;
      sub_23945215C((uint64_t)__dst, v616);
      if ((_DWORD)v509)
        memcpy(__dst[0], (const void *)__src, 8 * v509);
      v572 = v616;
      if (v585)
        (*(void (**)(_BYTE *))(*(_QWORD *)v585 + 48))(v585);
      v510 = *(const void **)&v574[104];
      v511 = v575 - *(_QWORD *)&v574[104];
      if ((_QWORD)v575 == *(_QWORD *)&v574[104])
      {
        v513 = 0;
        v512 = 0;
      }
      else
      {
        if (v511 < 0)
          sub_2394189F8();
        v512 = (char *)operator new(v575 - *(_QWORD *)&v574[104]);
        v513 = &v512[8 * (v511 >> 3)];
        memcpy(v512, v510, v511);
      }
      v493 = sub_239CE1C48((uint64_t)&v591, (uint64_t)&v574[104]);
      v494 = fabs(*(double *)__dst[0]);
      if (v572 != 1)
      {
        v514 = (double *)((char *)__dst[0] + 8);
        v515 = 8 * v572 - 8;
        do
        {
          v516 = *v514++;
          v517 = fabs(v516);
          if (v494 < v517)
            v494 = v517;
          v515 -= 8;
        }
        while (v515);
      }
      if (v581[16])
        (*(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)v581 + 64))((uint64_t)v581, v493, v507, v494, v485);
      if (v493 == 0.0)
      {
        if (v581[16])
        {
          v518 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
          v519 = sub_239458500(v518, (uint64_t)"N.A.", 4);
          std::ios_base::getloc((const std::ios_base *)((char *)v519 + *(_QWORD *)(*v519 - 24)));
          v520 = std::locale::use_facet((const std::locale *)v671, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v520->__vftable[2].~facet_0)(v520, 10);
          std::locale::~locale((std::locale *)v671);
          std::ostream::put();
          goto LABEL_719;
        }
        goto LABEL_720;
      }
      if (vabdd_f64(v493, v586) < v493 * *(double *)&v581[40] && v496 >= *(_DWORD *)&v581[8])
      {
        if (v581[16])
        {
          sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
          v533 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v533 + *(_QWORD *)(*v533 - 24)));
          v534 = std::locale::use_facet((const std::locale *)v671, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v534->__vftable[2].~facet_0)(v534, 10);
          std::locale::~locale((std::locale *)v671);
          std::ostream::put();
LABEL_719:
          std::ostream::flush();
        }
LABEL_720:
        v586 = v493;
        v535 = 3;
LABEL_721:
        v495 = 0;
        *(_DWORD *)&v574[56] = v535;
        if (!v512)
        {
LABEL_661:
          if ((v495 & 1) == 0)
            break;
          continue;
        }
LABEL_660:
        operator delete(v512);
        goto LABEL_661;
      }
      if (DWORD2(v614))
      {
        memset(v671, 0, 20);
        ((void (*)(uint64_t, uint64_t))v591[19])((uint64_t)&v591, (uint64_t)v671);
        v522 = (*(BOOL (**)(double *, uint64_t, double **, double **, double))(*(_QWORD *)v581 + 80))((double *)v581, (uint64_t)v569, (double **)__dst, (double **)v671, v493);
        free(*(void **)v671);
        if (v522)
          goto LABEL_704;
LABEL_724:
        --*(_DWORD *)&v574[52];
        v536 = v603;
        if (v603 != v604)
        {
          do
          {
            if (*((_BYTE *)v536 + 44))
            {
              v536[7] = v536[22];
              v539 = *(_OWORD *)(v536 + 25);
              v540 = *(_OWORD *)(v536 + 29);
              *((_OWORD *)v536 + 6) = *(_OWORD *)(v536 + 27);
              *((_OWORD *)v536 + 7) = v540;
              v536[16] = v536[31];
              *((_OWORD *)v536 + 4) = *(_OWORD *)(v536 + 23);
              *((_OWORD *)v536 + 5) = v539;
              *(_OWORD *)(v536 + 17) = *((_OWORD *)v536 + 16);
              v536[19] = v536[34];
            }
            v541 = (_QWORD *)v536[1];
            if (v541)
            {
              do
              {
                v542 = v541;
                v541 = (_QWORD *)*v541;
              }
              while (v541);
            }
            else
            {
              do
              {
                v542 = (_QWORD *)v536[2];
                _ZF = *v542 == (_QWORD)v536;
                v536 = v542;
              }
              while (!_ZF);
            }
            v536 = v542;
          }
          while (v542 != v604);
        }
        v537 = v605;
        if (v605 != v606)
        {
          do
          {
            if (*((_BYTE *)v537 + 44))
              v537[7] = v537[10];
            v543 = (_QWORD *)v537[1];
            if (v543)
            {
              do
              {
                v544 = v543;
                v543 = (_QWORD *)*v543;
              }
              while (v543);
            }
            else
            {
              do
              {
                v544 = (_QWORD *)v537[2];
                _ZF = *v544 == (_QWORD)v537;
                v537 = v544;
              }
              while (!_ZF);
            }
            v537 = v544;
          }
          while (v544 != v606);
        }
        LOBYTE(v611[0]) = 0;
        *(_WORD *)((char *)v611 + 3) = 0;
        BYTE1(v611[0]) = BYTE2(v611[0]);
        sub_23945D3D0(&v574[104], v512, v513, (v513 - v512) >> 3);
        if ((*(unsigned int (__cdecl **)())(*(_QWORD *)v581 + 24))())
        {
          v538 = (*(double (**)(uint64_t))(*(_QWORD *)v581 + 32))((uint64_t)v581);
          ((void (*)(uint64_t, double))v591[12])((uint64_t)&v591, v538);
        }
      }
      else
      {
        if (!(*(BOOL (**)(double *, uint64_t, double **, double))(*(_QWORD *)v581 + 72))((double *)v581, (uint64_t)v569, (double **)__dst, v493))goto LABEL_724;
LABEL_704:
        if ((*(unsigned int (__cdecl **)())(*(_QWORD *)v581 + 24))())
        {
          v529 = (*(double (**)(uint64_t))(*(_QWORD *)v581 + 32))((uint64_t)v581);
          ((void (*)(uint64_t, double))v591[12])((uint64_t)&v591, v529);
        }
        if (v494 < v485 * *(double *)&v581[24] && v496 >= *(_DWORD *)&v581[8])
        {
          if (v581[16])
          {
            v545 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
            std::ios_base::getloc((const std::ios_base *)((char *)v545 + *(_QWORD *)(*v545 - 24)));
            v546 = std::locale::use_facet((const std::locale *)v671, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v546->__vftable[2].~facet_0)(v546, 10);
            std::locale::~locale((std::locale *)v671);
            std::ostream::put();
            std::ostream::flush();
            (*(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)v581 + 64))((uint64_t)v581, v493, v507, v494, v485);
          }
          v535 = 1;
          goto LABEL_721;
        }
        if (v497 < *(int *)&v581[12] && v581[48])
        {
          v523.i64[0] = *(_QWORD *)&v581[56];
          if (v581[64])
          {
            *(_QWORD *)v671 = &v591;
            *(_QWORD *)&v671[8] = *(_QWORD *)&v581[56];
            *(_QWORD *)&v671[16] = &v573;
            sub_239CE1174((uint64_t)v671, v523, v524, v525, v526, v527, v528);
            v531 = 0x3DDB7CDFD9D7BDBBLL;
            v532 = 1.0e20;
            if (v573 > 0.0)
            {
              v531 = *(_QWORD *)&v573;
              v532 = 1.0 / (v573 * v573);
            }
            *(_QWORD *)&v592 = v531;
            *((double *)&v592 + 1) = v532;
            *((_QWORD *)&v594 + 1) = v531;
            *(double *)&v595 = v532;
            *(_QWORD *)&v597 = v531;
            *((double *)&v597 + 1) = v532;
            *((_QWORD *)&v599 + 1) = v531;
            *(double *)&v600 = v532;
            memset(v611, 0, 5);
          }
          else
          {
            sub_239CE15E8((uint64_t)&v591, v523, v524, v525, v526, v527, v528);
          }
          v586 = sub_239CE1C48((uint64_t)&v591, (uint64_t)&v574[104]);
        }
      }
      if (v497 < *(int *)&v581[12] && v583)
        (*(void (**)(_BYTE *))(*(_QWORD *)v583 + 48))(v583);
      v495 = 1;
      if (!v512)
        goto LABEL_661;
      goto LABEL_660;
    }
    break;
  }
  *(double *)&v574[72] = v586;
  if (v583)
    (*(void (**)(_BYTE *))(*(_QWORD *)v583 + 48))(v583);
  free(v569[0]);
LABEL_766:
  free(__dst[0]);
  v342 = v670;
  if (!v670)
LABEL_767:
    sub_2394172E0();
LABEL_452:
  (*(void (**)(std::string *))(v342->__r_.__value_.__r.__words[0] + 48))(v342);
  v343 = v670;
  if (v670 == &v669)
  {
    v344 = 4;
    v343 = &v669;
LABEL_458:
    (*(void (**)(void))(v343->__r_.__value_.__r.__words[0] + 8 * v344))();
  }
  else if (v670)
  {
    v344 = 5;
    goto LABEL_458;
  }
  kdebug_trace();
  sub_239C19F80(a1 + 400, (__int128 *)v574);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v576[1])
  {
    *(void **)&v577 = v576[1];
    operator delete(v576[1]);
  }
  if (*(_QWORD *)&v574[104])
  {
    *(_QWORD *)&v575 = *(_QWORD *)&v574[104];
    operator delete(*(void **)&v574[104]);
  }
  if (*(_QWORD *)&v574[80])
  {
    *(_QWORD *)&v574[88] = *(_QWORD *)&v574[80];
    operator delete(*(void **)&v574[80]);
  }
  if ((v574[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v574[24]);
    if ((v574[23] & 0x80000000) != 0)
      goto LABEL_499;
  }
  else
  {
    if ((v574[23] & 0x80000000) == 0)
      goto LABEL_469;
LABEL_499:
    operator delete(*(void **)v574);
  }
LABEL_469:
  v350 = v603;
  if (v603 != v604)
  {
    do
    {
      if (*((_BYTE *)v350 + 44))
      {
        v354 = v350[6];
        *(_QWORD *)v354 = v350[7];
        *(_OWORD *)(v354 + 8) = *((_OWORD *)v350 + 4);
        v355 = *((_OWORD *)v350 + 5);
        v356 = *((_OWORD *)v350 + 6);
        v357 = *((_OWORD *)v350 + 7);
        *(_QWORD *)(v354 + 72) = v350[16];
        *(_OWORD *)(v354 + 56) = v357;
        *(_OWORD *)(v354 + 40) = v356;
        *(_OWORD *)(v354 + 24) = v355;
        v358 = *(_OWORD *)(v350 + 17);
        *(_QWORD *)(v354 + 96) = v350[19];
        *(_OWORD *)(v354 + 80) = v358;
      }
      v359 = (_QWORD *)v350[1];
      if (v359)
      {
        do
        {
          v360 = v359;
          v359 = (_QWORD *)*v359;
        }
        while (v359);
      }
      else
      {
        do
        {
          v360 = (_QWORD *)v350[2];
          _ZF = *v360 == (_QWORD)v350;
          v350 = v360;
        }
        while (!_ZF);
      }
      v350 = v360;
    }
    while (v360 != v604);
  }
  v351 = v605;
  if (v605 != v606)
  {
    do
    {
      if (*((_BYTE *)v351 + 44))
        *(_QWORD *)v351[6] = v351[7];
      v361 = (_QWORD *)v351[1];
      if (v361)
      {
        do
        {
          v362 = v361;
          v361 = (_QWORD *)*v361;
        }
        while (v361);
      }
      else
      {
        do
        {
          v362 = (_QWORD *)v351[2];
          _ZF = *v362 == (_QWORD)v351;
          v351 = v362;
        }
        while (!_ZF);
      }
      v351 = v362;
    }
    while (v362 != v606);
  }
  if (*(_BYTE *)(a1 + 248))
  {
    sub_2394988CC((uint64_t)v574);
    *(_QWORD *)v671 = operator new(0x19uLL);
    *(_OWORD *)&v671[8] = xmmword_239EC7360;
    strcpy(*(char **)v671, "Pose Graph Optimization");
    sub_239C1A0F4(a1 + 400, &v574[16], (uint64_t)v671);
    if ((v671[23] & 0x80000000) != 0)
      operator delete(*(void **)v671);
    *(_QWORD *)v574 = *MEMORY[0x24BEDB7F0];
    v352 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)&v574[*(_QWORD *)(*(_QWORD *)v574 - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    *(_QWORD *)&v574[16] = v352;
    *(_QWORD *)&v574[24] = MEMORY[0x24BEDB848] + 16;
    if ((v574[111] & 0x80000000) != 0)
      operator delete(*(void **)&v574[88]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x23B83E250](v576);
  }
  *(_QWORD *)v581 = off_250AFEA50;
  if (v585 == v584)
  {
    v353 = 4;
LABEL_501:
    (*(void (**)(_QWORD *))(*v323 + 8 * v353))(v323);
  }
  else if (v585)
  {
    v353 = 5;
    v323 = v585;
    goto LABEL_501;
  }
  if (v583 == v582)
  {
    v363 = 4;
LABEL_506:
    (*(void (**)(_QWORD *))(*v321 + 8 * v363))(v321);
  }
  else if (v583)
  {
    v363 = 5;
    v321 = v583;
    goto LABEL_506;
  }
  v300 = 1;
LABEL_508:
  v591 = off_250AFD030;
  if (v661 != 2)
    sub_239A23A84((uint64_t)v662);
  sub_239CE10A4((uint64_t)&v591);
  return v300;
}

void sub_239CAF4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p)
{
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  std::locale::~locale((std::locale *)(v49 - 200));
  free(a42);
  free(a45);
  v50 = *(_QWORD *)(v49 - 208);
  if (!v50)
    sub_2394172E0();
  (*(void (**)(uint64_t))(*(_QWORD *)v50 + 48))(v50);
  v51 = *(_QWORD **)(v49 - 208);
  if (v51 == (_QWORD *)(v49 - 232))
  {
    v52 = 4;
    v51 = (_QWORD *)(v49 - 232);
  }
  else
  {
    if (!v51)
    {
LABEL_8:
      sub_239C0BE14((uint64_t)&__p);
      sub_239C30284();
      sub_239C1AAB0(&STACK[0x260]);
      JUMPOUT(0x239CAF8B0);
    }
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
  goto LABEL_8;
}

void sub_239CAF7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_239A4D7C0((uint64_t)&STACK[0x260]);
  sub_239A4D7C0((uint64_t)&a33);
  sub_239A4D7C0(v33 - 200);
  JUMPOUT(0x239CAF8B0);
}

void sub_239CAF8AC(_Unwind_Exception *a1)
{
  sub_239CE1130((uint64_t)&STACK[0x328]);
  _Unwind_Resume(a1);
}

uint64_t sub_239CAF8C0(uint64_t a1)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  int8x8_t v48;
  uint8x8_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  _BOOL4 v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  int8x8_t v88;
  uint8x8_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  double v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  double v105;
  unint64_t *p_shared_owners;
  double v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  float64x2_t v119;
  unsigned int *v120;
  float64x2_t *v121;
  int v122;
  unint64_t v124;
  unint64_t v125;
  int8x8_t v126;
  uint8x8_t v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  double v139;
  float64x2_t v140;
  unint64_t v141;
  double v142;
  float64x2_t v143;
  double v144;
  double v145;
  double v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v151;
  float64x2_t v154;
  float64x2_t v157;
  int64x2_t v159;
  double v160;
  double v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  int8x16_t v170;
  double v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  double v174;
  unint64_t *v175;
  double v176;
  char v177;
  unint64_t v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t *v188;
  unint64_t v189;
  _QWORD *v190;
  double *v191;
  double *v192;
  double v193;
  double v194;
  unint64_t v195;
  uint64_t v196;
  double *v197;
  uint64_t v198;
  double v199;
  double *v200;
  double *v201;
  unint64_t v202;
  double v203;
  uint64_t v204;
  double *v205;
  uint64_t v206;
  double v207;
  uint64_t v208;
  int8x8_t v209;
  unint64_t v210;
  uint8x8_t v211;
  unint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  float64x2_t v220;
  uint64_t v224;
  float64x2_t v225;
  double v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count *v228;
  double v229;
  unint64_t *v230;
  double v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char v235;
  char v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  double *v246;
  double *v247;
  double v248;
  double v249;
  unint64_t v250;
  uint64_t v251;
  double *v252;
  uint64_t v253;
  double v254;
  double *v255;
  double *v256;
  unint64_t v257;
  double v258;
  uint64_t v259;
  double *v260;
  uint64_t v261;
  double v262;
  int8x16_t *v263;
  unsigned int *v264;
  int v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint8x8_t v270;
  unint64_t v271;
  unint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  int8x16_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  __int128 *v280;
  __int128 v281;
  __int128 v282;
  double v283;
  std::__shared_weak_count *v284;
  std::__shared_weak_count *v285;
  double v286;
  unint64_t *v287;
  double v288;
  unint64_t v289;
  unint64_t v290;
  char v291;
  char v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  __int128 v301;
  _QWORD *v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  __int128 v306;
  double v309;
  _QWORD *v310;
  uint64_t v311;
  double v312;
  int64x2_t v313;
  double v314;
  double v315;
  double v316;
  double v317;
  float64x2_t v318;
  uint64_t v319;
  double v320;
  _QWORD *v321;
  const std::locale::facet *v322;
  std::string *v323;
  std::string *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t *v328;
  _QWORD *v329;
  uint64_t *v330;
  _QWORD *v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  _QWORD *v340;
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  uint64_t v344;
  _BYTE *v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  char *v351;
  uint64_t *v352;
  unint64_t v353;
  uint64_t v354;
  char *v355;
  __int128 *v356;
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t *v362;
  uint64_t *v363;
  int64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  _BYTE *v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  _OWORD *v373;
  uint64_t *v374;
  uint64_t v375;
  __int128 v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t *v380;
  unint64_t *v381;
  int64_t v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  _BYTE *v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t *v389;
  uint64_t v390;
  _OWORD *v391;
  unint64_t *v392;
  uint64_t v393;
  __int128 v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  _QWORD *v398;
  unint64_t *v399;
  int64_t v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  _BYTE *v404;
  unint64_t *v405;
  char *v406;
  unint64_t v407;
  unint64_t *v408;
  uint64_t v409;
  _OWORD *v410;
  unint64_t *v411;
  uint64_t v412;
  __int128 v413;
  unint64_t v414;
  unsigned int v415;
  uint64_t v416;
  char *v417;
  void *v418;
  _BYTE *v419;
  int64_t v420;
  int64_t v421;
  unint64_t v422;
  uint64_t v423;
  unint64_t v424;
  _BYTE *v425;
  _QWORD *v426;
  char *v427;
  unint64_t v428;
  uint64_t v429;
  _OWORD *v430;
  char *v431;
  uint64_t v432;
  __int128 v433;
  uint64_t v434;
  unsigned int v435;
  uint64_t v436;
  char *v437;
  void *v438;
  _BYTE *v439;
  int64_t v440;
  int64_t v441;
  unint64_t v442;
  uint64_t v443;
  unint64_t v444;
  _BYTE *v445;
  _QWORD *v446;
  char *v447;
  unint64_t v448;
  uint64_t v449;
  _OWORD *v450;
  char *v451;
  uint64_t v452;
  __int128 v453;
  uint64_t v454;
  double v455;
  double v456;
  double v457;
  double v458;
  float64x2_t v459;
  double v460;
  double v461;
  unsigned int v462;
  size_t v463;
  size_t v464;
  double *v465;
  double v466;
  double *v467;
  uint64_t v468;
  double v469;
  double v470;
  _QWORD *v471;
  const std::locale::facet *v472;
  _QWORD *v473;
  double v474;
  double v475;
  char v476;
  int v477;
  int v478;
  double v479;
  double *v480;
  unint64_t v481;
  unint64_t v482;
  float64x2_t *v483;
  uint64_t v484;
  float64x2_t v485;
  float64x2_t v486;
  double v487;
  double v488;
  uint64_t v490;
  const void *v491;
  int64_t v492;
  char *v493;
  char *v494;
  double *v495;
  uint64_t v496;
  double v497;
  double v498;
  _QWORD *v499;
  _QWORD *v500;
  const std::locale::facet *v501;
  BOOL v503;
  int64x2_t v504;
  double v505;
  double v506;
  double v507;
  double v508;
  float64x2_t v509;
  double v510;
  uint64_t v512;
  double v513;
  _QWORD *v514;
  const std::locale::facet *v515;
  int v516;
  _QWORD *v517;
  _QWORD *v518;
  double v519;
  __int128 v520;
  __int128 v521;
  _QWORD *v522;
  _QWORD *v523;
  _QWORD *v524;
  _QWORD *v525;
  _QWORD *v526;
  const std::locale::facet *v527;
  int v528;
  _QWORD *v529;
  const std::locale::facet *v530;
  _QWORD *v531;
  const std::locale::facet *v532;
  _QWORD *v533;
  _QWORD *v534;
  const std::locale::facet *v535;
  std::bad_alloc *exception;
  std::bad_alloc *v537;
  float64x2_t v538;
  _BOOL4 v539;
  float64_t v540;
  float64_t v541;
  int8x16_t v542;
  int8x16_t v543;
  _QWORD *v544;
  uint64_t v545;
  std::__shared_weak_count *v546;
  std::__shared_weak_count *v547;
  std::__shared_weak_count *v548;
  std::__shared_weak_count *v549;
  void *v550[2];
  unsigned int v551;
  void *__dst[2];
  unsigned int v553;
  double v554;
  _BYTE v555[112];
  __int128 v556;
  void *v557[2];
  __int128 v558;
  int64x2_t v559;
  void *__p[2];
  _BYTE *v561;
  _BYTE v562[72];
  _BYTE v563[24];
  _BYTE *v564;
  _BYTE v565[24];
  _BYTE *v566;
  double v567;
  __int128 v568;
  __int128 v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t (**v572)();
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  uint64_t (**v577)();
  _QWORD *v578;
  _QWORD v579[2];
  _QWORD *v580;
  _QWORD v581[2];
  _OWORD v582[7];
  __int16 v583;
  char v584;
  uint64_t v585;
  _DWORD v586[2];
  uint64_t v587;
  unsigned __int8 v588;
  __int128 v589;
  __int128 __src;
  unsigned int v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  _QWORD v601[7];
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  void (**v608)();
  uint64_t v609;
  uint64_t v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  int v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int16 v624;
  uint64_t v625;
  _QWORD *v626;
  __int128 v627;
  uint64_t v628;
  __int16 v629;
  char v630;
  uint64_t v631;
  uint64_t v632;
  __int128 v633;
  __int128 v634;
  uint64_t v635;
  int v636;
  _DWORD v637[3];
  uint64_t v638;
  int v639;
  __int16 v640;
  __int128 v641;
  _BYTE v642[38];
  uint64_t v643;
  std::string v644;
  std::string *v645;
  _BYTE v646[24];
  _BYTE *v647;
  uint64_t v648;

  v648 = *MEMORY[0x24BDAC8D0];
  __asm { FMOV            V0.2D, #1.0 }
  v573 = _Q0;
  v574 = _Q0;
  v575 = _Q0;
  v576 = _Q0;
  v577 = &off_250AFCD88;
  v579[0] = 0;
  v578 = v579;
  v581[1] = 0;
  v581[0] = 0;
  v579[1] = 0;
  v580 = v581;
  memset(v582, 0, sizeof(v582));
  v583 = 1;
  v584 = 1;
  sub_239CE0F38((uint64_t)&v585);
  memset(v586, 0, 5);
  v587 = 0;
  v588 = 0;
  v593 = 0;
  v592 = 0;
  v589 = 0u;
  __src = 0u;
  v591 = 0;
  v7 = operator new();
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_QWORD *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)v7 = &off_250AFCDA8;
  v596 = v7;
  v8 = operator new();
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)v8 = &off_250AFE3C0;
  v597 = v8;
  v9 = operator new();
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)v9 = &off_250AFCE08;
  v594 = v9;
  v10 = operator new();
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_QWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)v10 = &off_250AFCE68;
  v598 = 0u;
  v599 = 0u;
  v600 = 0u;
  v595 = v10;
  v601[0] = &v577;
  v601[1] = &__src;
  memset(&v601[2], 0, 24);
  v606 = 0u;
  v607 = 0u;
  v604 = 0u;
  v605 = 0u;
  v602 = 0u;
  v603 = 0u;
  v608 = off_250AFCF08;
  v613 = 0;
  v612 = 0;
  v614 = 0;
  v616 = 0;
  v615 = 0;
  v611 = 0;
  v609 = 0;
  v610 = 0;
  v11 = operator new();
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)v11 = &off_250AFCDA8;
  v619 = v11;
  v12 = operator new();
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_QWORD *)(v12 + 96) = 0;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)v12 = &off_250AFE3C0;
  v620 = v12;
  v13 = operator new();
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 104) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)v13 = &off_250AFCE08;
  v617 = v13;
  v14 = operator new();
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_QWORD *)(v14 + 88) = 0;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_QWORD *)v14 = &off_250AFCE68;
  v618 = v14;
  v625 = 0;
  v621 = 0u;
  v622 = 0u;
  v623 = 0u;
  v624 = 0;
  v626 = v601;
  v608 = (void (**)())&off_250AFCEC8;
  v632 = 0;
  v629 = v629 & 0x7FF0 | 0xC;
  v630 = 1;
  v631 = 0;
  v627 = 0u;
  v628 = 0;
  v15 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  v633 = 0u;
  v634 = 0u;
  v635 = 0;
  *((_QWORD *)&v627 + 1) = v15;
  v572 = off_250AFCA50;
  v636 = 2;
  v637[0] = -3;
  v641 = 0u;
  memset(v642, 0, 30);
  v637[2] = -3;
  v638 = 0;
  v639 = 0;
  v640 = 1;
  v642[30] = 1;
  v643 = 0;
  v16 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 136) = v16;
  v17 = *(_QWORD *)(a1 + 24);
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 144) - (_QWORD)v16) >> 3) < v17)
  {
    if (v17 > 0x276276276276276)
      sub_2394189F8();
    v18 = (char *)operator new(104 * v17);
    *(_QWORD *)(a1 + 128) = v18;
    *(_QWORD *)(a1 + 136) = v18;
    *(_QWORD *)(a1 + 144) = &v18[104 * v17];
    if (v16)
      operator delete(v16);
  }
  v19 = *(uint64_t **)(a1 + 16);
  if (v19)
  {
    v20 = *(char **)(a1 + 136);
    do
    {
      v25 = v19[3];
      v26 = *((_OWORD *)v19 + 3);
      v27 = *((_OWORD *)v19 + 5);
      *(_OWORD *)&v555[32] = *((_OWORD *)v19 + 4);
      *(_OWORD *)&v555[48] = v27;
      *(_QWORD *)&v555[64] = v19[12];
      *(_OWORD *)v555 = *((_OWORD *)v19 + 2);
      *(_OWORD *)&v555[16] = v26;
      *(_OWORD *)v562 = *(_OWORD *)(v19 + 13);
      *(_QWORD *)&v562[16] = v19[15];
      v28 = *(_QWORD *)(a1 + 144);
      if ((unint64_t)v20 < v28)
      {
        *(_QWORD *)v20 = v25;
        *(_OWORD *)(v20 + 8) = *(_OWORD *)v555;
        v21 = *(_OWORD *)&v555[16];
        v22 = *(_OWORD *)&v555[32];
        v23 = *(_OWORD *)&v555[48];
        *((_QWORD *)v20 + 9) = *(_QWORD *)&v555[64];
        *(_OWORD *)(v20 + 56) = v23;
        *(_OWORD *)(v20 + 40) = v22;
        *(_OWORD *)(v20 + 24) = v21;
        *((_OWORD *)v20 + 5) = *(_OWORD *)v562;
        *((_QWORD *)v20 + 12) = *(_QWORD *)&v562[16];
        v24 = v20 + 104;
      }
      else
      {
        v29 = *(_BYTE **)(a1 + 128);
        v30 = 0x4EC4EC4EC4EC4EC5 * ((v20 - v29) >> 3) + 1;
        if (v30 > 0x276276276276276)
          sub_2394189F8();
        v31 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v28 - (_QWORD)v29) >> 3);
        if (2 * v31 > v30)
          v30 = 2 * v31;
        if (v31 >= 0x13B13B13B13B13BLL)
          v32 = 0x276276276276276;
        else
          v32 = v30;
        if (v32)
        {
          if (v32 > 0x276276276276276)
            sub_239418A80();
          v33 = (char *)operator new(104 * v32);
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[8 * ((v20 - v29) >> 3)];
        *(_QWORD *)v34 = v25;
        v35 = *(_OWORD *)v555;
        *(_OWORD *)(v34 + 24) = *(_OWORD *)&v555[16];
        v36 = *(_OWORD *)&v555[48];
        *(_OWORD *)(v34 + 40) = *(_OWORD *)&v555[32];
        *(_OWORD *)(v34 + 56) = v36;
        *((_QWORD *)v34 + 9) = *(_QWORD *)&v555[64];
        *(_OWORD *)(v34 + 8) = v35;
        *((_OWORD *)v34 + 5) = *(_OWORD *)v562;
        *((_QWORD *)v34 + 12) = *(_QWORD *)&v562[16];
        v37 = v34;
        if (v20 != v29)
        {
          do
          {
            v38 = *((_QWORD *)v20 - 13);
            v20 -= 104;
            *((_QWORD *)v37 - 13) = v38;
            v37 -= 104;
            *(_OWORD *)(v37 + 8) = *(_OWORD *)(v20 + 8);
            v39 = *(_OWORD *)(v20 + 24);
            v40 = *(_OWORD *)(v20 + 40);
            v41 = *(_OWORD *)(v20 + 56);
            *((_QWORD *)v37 + 9) = *((_QWORD *)v20 + 9);
            *(_OWORD *)(v37 + 56) = v41;
            *(_OWORD *)(v37 + 40) = v40;
            *(_OWORD *)(v37 + 24) = v39;
            v42 = *((_OWORD *)v20 + 5);
            *((_QWORD *)v37 + 12) = *((_QWORD *)v20 + 12);
            *((_OWORD *)v37 + 5) = v42;
          }
          while (v20 != v29);
          v20 = *(char **)(a1 + 128);
        }
        v24 = v34 + 104;
        *(_QWORD *)(a1 + 128) = v37;
        *(_QWORD *)(a1 + 136) = v34 + 104;
        *(_QWORD *)(a1 + 144) = &v33[104 * v32];
        if (v20)
          operator delete(v20);
      }
      *(_QWORD *)(a1 + 136) = v24;
      v19 = (uint64_t *)*v19;
      v20 = v24;
    }
    while (v19);
    v43 = *(_QWORD **)(a1 + 16);
    v544 = (_QWORD *)(a1 + 600);
    if (v43)
    {
      v44 = 0;
      v45 = *(_QWORD *)(a1 + 624) != 0;
      while (1)
      {
        v46 = *(_QWORD *)(a1 + 128);
        v47 = v43[2];
        *(_DWORD *)v555 = v47;
        *(_QWORD *)&v555[8] = v46 + 104 * v44;
        if (v45)
          break;
        v555[4] = 0;
        if (v46)
          goto LABEL_53;
LABEL_27:
        ++v44;
        v43 = (_QWORD *)*v43;
        v45 = 1;
        if (!v43)
          goto LABEL_56;
      }
      v48 = *(int8x8_t *)(a1 + 608);
      if (v48)
      {
        v49 = (uint8x8_t)vcnt_s8(v48);
        v49.i16[0] = vaddlv_u8(v49);
        if (v49.u32[0] > 1uLL)
        {
          v50 = v47;
          if (v47 >= *(_QWORD *)&v48)
            v50 = v47 % *(_QWORD *)&v48;
        }
        else
        {
          v50 = (*(_QWORD *)&v48 - 1) & v47;
        }
        v51 = *(_QWORD **)(*v544 + 8 * v50);
        if (v51)
        {
          v51 = (_QWORD *)*v51;
          if (v51)
          {
            if (v49.u32[0] < 2uLL)
            {
              v52 = *(_QWORD *)&v48 - 1;
              while (1)
              {
                v54 = v51[1];
                if (v54 == v47)
                {
                  if (v51[2] == v47)
                    goto LABEL_52;
                }
                else if ((v54 & v52) != v50)
                {
                  goto LABEL_51;
                }
                v51 = (_QWORD *)*v51;
                if (!v51)
                  goto LABEL_52;
              }
            }
            do
            {
              v53 = v51[1];
              if (v53 == v47)
              {
                if (v51[2] == v47)
                  break;
              }
              else
              {
                if (v53 >= *(_QWORD *)&v48)
                  v53 %= *(_QWORD *)&v48;
                if (v53 != v50)
                  goto LABEL_51;
              }
              v51 = (_QWORD *)*v51;
            }
            while (v51);
          }
        }
      }
      else
      {
LABEL_51:
        v51 = 0;
      }
LABEL_52:
      v555[4] = v51 == 0;
      if (!v46)
        goto LABEL_27;
LABEL_53:
      *(_QWORD *)&v555[16] = *(_QWORD *)(v46 + 104 * v44);
      v55 = v46 + 104 * v44;
      *(_OWORD *)&v555[40] = *(_OWORD *)(v55 + 24);
      *(_OWORD *)&v555[56] = *(_OWORD *)(v55 + 40);
      *(_OWORD *)&v555[72] = *(_OWORD *)(v55 + 56);
      *(_QWORD *)&v555[88] = *(_QWORD *)(v55 + 72);
      *(_OWORD *)&v555[24] = *(_OWORD *)(v55 + 8);
      *(_OWORD *)&v555[96] = *(_OWORD *)(v55 + 80);
      *(_QWORD *)&v556 = *(_QWORD *)(v55 + 96);
      if (sub_239CB35E0((uint64_t)&v577, (int *)v555))
        v586[0] = 0;
      goto LABEL_27;
    }
  }
  else
  {
    v544 = (_QWORD *)(a1 + 600);
  }
LABEL_56:
  v56 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 160) = v56;
  v57 = *(_QWORD *)(a1 + 64);
  if (v57 > (uint64_t)(*(_QWORD *)(a1 + 168) - (_QWORD)v56) >> 3)
  {
    if (v57 >> 61)
      sub_2394189F8();
    v58 = (char *)operator new(8 * v57);
    *(_QWORD *)(a1 + 152) = v58;
    *(_QWORD *)(a1 + 160) = v58;
    *(_QWORD *)(a1 + 168) = &v58[8 * v57];
    if (v56)
      operator delete(v56);
  }
  v59 = *(_QWORD **)(a1 + 56);
  if (v59)
  {
    v60 = *(char **)(a1 + 160);
    while (1)
    {
      v62 = v59[4];
      v63 = *(_QWORD *)(a1 + 168);
      if ((unint64_t)v60 >= v63)
        break;
      *(_QWORD *)v60 = v62;
      v61 = v60 + 8;
LABEL_63:
      *(_QWORD *)(a1 + 160) = v61;
      v59 = (_QWORD *)*v59;
      v60 = v61;
      if (!v59)
      {
        v79 = *(_QWORD **)(a1 + 56);
        if (v79)
        {
          v80 = 0;
          do
          {
            v81 = *(_QWORD *)(a1 + 152);
            *(_DWORD *)v555 = v79[2];
            v555[4] = 1;
            *(_QWORD *)&v555[8] = v81 + v80;
            if (v81)
            {
              *(_QWORD *)&v555[16] = *(_QWORD *)(v81 + v80);
              if (sub_239CB3BBC((uint64_t)&v577, (unsigned int *)v555))
                v586[0] = 0;
            }
            v79 = (_QWORD *)*v79;
            v80 += 8;
          }
          while (v79);
        }
        goto LABEL_99;
      }
    }
    v64 = *(char **)(a1 + 152);
    v65 = (v60 - v64) >> 3;
    v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 61)
      sub_2394189F8();
    v67 = v63 - (_QWORD)v64;
    if (v67 >> 2 > v66)
      v66 = v67 >> 2;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
      v68 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v68 = v66;
    if (v68)
    {
      if (v68 >> 61)
        sub_239418A80();
      v69 = operator new(8 * v68);
    }
    else
    {
      v69 = 0;
    }
    v70 = &v69[8 * v65];
    *v70 = v62;
    v61 = (char *)(v70 + 1);
    if (v60 == v64)
    {
      v64 = v60;
      goto LABEL_81;
    }
    v71 = v60 - 8 - v64;
    if (v71 >= 0x168)
    {
      if (&v69[v60 - v64 - 8 - (v71 & 0xFFFFFFFFFFFFFFF8)] > &v69[v60 - v64 - 8])
      {
        v72 = v60;
      }
      else if (&v60[-(v71 & 0xFFFFFFFFFFFFFFF8) - 8] > v60 - 8)
      {
        v72 = v60;
      }
      else if ((unint64_t)(v64 - v69) >= 0x20)
      {
        v74 = (v71 >> 3) + 1;
        v72 = &v60[-8 * (v74 & 0x3FFFFFFFFFFFFFFCLL)];
        v75 = &v69[8 * v65 - 16];
        v76 = v60 - 16;
        v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          *v75 = v78;
          v75 -= 2;
          v76 -= 32;
          v77 -= 4;
        }
        while (v77);
        v70 -= v74 & 0x3FFFFFFFFFFFFFFCLL;
        if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_81;
      }
      else
      {
        v72 = v60;
      }
    }
    else
    {
      v72 = v60;
    }
    do
    {
      v73 = *((_QWORD *)v72 - 1);
      v72 -= 8;
      *--v70 = v73;
    }
    while (v72 != v64);
    v64 = *(char **)(a1 + 152);
LABEL_81:
    *(_QWORD *)(a1 + 152) = v70;
    *(_QWORD *)(a1 + 160) = v61;
    *(_QWORD *)(a1 + 168) = &v69[8 * v68];
    if (v64)
      operator delete(v64);
    goto LABEL_63;
  }
LABEL_99:
  sub_239CB3A08((uint64_t)v582, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3));
  v83 = *(unsigned int **)(a1 + 80);
  v82 = *(unsigned int **)(a1 + 88);
  v84 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v82 - (char *)v83) >> 3) == (uint64_t)(*(_QWORD *)(a1 + 184)
                                                                             - *(_QWORD *)(a1 + 176)) >> 3
     && 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4) == (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3;
  v539 = v84;
  if (v83 == v82)
    goto LABEL_175;
  v85 = 0;
  do
  {
    v86 = *v83;
    v87 = v83[2];
    v88 = *(int8x8_t *)(a1 + 608);
    if (!*(_QWORD *)&v88)
      goto LABEL_144;
    v89 = (uint8x8_t)vcnt_s8(v88);
    v89.i16[0] = vaddlv_u8(v89);
    if (v89.u32[0] > 1uLL)
    {
      v90 = *v83;
      if (v86 >= *(_QWORD *)&v88)
        v90 = v86 % *(_QWORD *)&v88;
    }
    else
    {
      v90 = (v88.i32[0] - 1) & v86;
    }
    v91 = *(_QWORD **)(*v544 + 8 * v90);
    if (!v91)
      goto LABEL_144;
    v92 = (_QWORD *)*v91;
    if (!*v91)
      goto LABEL_144;
    v93 = *(_QWORD *)&v88 - 1;
    if (v89.u32[0] < 2uLL)
    {
      while (1)
      {
        v94 = v92[1];
        if (v94 == v86)
        {
          if (v92[2] == v86)
            goto LABEL_125;
        }
        else if ((v94 & v93) != v90)
        {
          goto LABEL_144;
        }
        v92 = (_QWORD *)*v92;
        if (!v92)
          goto LABEL_144;
      }
    }
    while (1)
    {
      v95 = v92[1];
      if (v95 == v86)
        break;
      if (v95 >= *(_QWORD *)&v88)
        v95 %= *(_QWORD *)&v88;
      if (v95 != v90)
        goto LABEL_144;
LABEL_119:
      v92 = (_QWORD *)*v92;
      if (!v92)
        goto LABEL_144;
    }
    if (v92[2] != v86)
      goto LABEL_119;
LABEL_125:
    if (v89.u32[0] > 1uLL)
    {
      v96 = v83[2];
      if (v87 >= *(_QWORD *)&v88)
        v96 = v87 % *(_QWORD *)&v88;
    }
    else
    {
      v96 = (v88.i32[0] - 1) & v87;
    }
    v97 = *(_QWORD **)(*v544 + 8 * v96);
    if (v97)
    {
      v98 = (_QWORD *)*v97;
      if (v98)
      {
        if (v89.u32[0] < 2uLL)
        {
          while (1)
          {
            v99 = v98[1];
            if (v99 == v87)
            {
              if (v98[2] == v87)
                goto LABEL_174;
            }
            else if ((v99 & v93) != v96)
            {
              goto LABEL_144;
            }
            v98 = (_QWORD *)*v98;
            if (!v98)
              goto LABEL_144;
          }
        }
        do
        {
          v100 = v98[1];
          if (v100 == v87)
          {
            if (v98[2] == v87)
              goto LABEL_174;
          }
          else
          {
            if (v100 >= *(_QWORD *)&v88)
              v100 %= *(_QWORD *)&v88;
            if (v100 != v96)
              break;
          }
          v98 = (_QWORD *)*v98;
        }
        while (v98);
      }
    }
LABEL_144:
    v101 = *((_QWORD *)v83 + 2);
    *(_OWORD *)&v555[32] = *(_OWORD *)(v83 + 10);
    *(_OWORD *)&v555[48] = *(_OWORD *)(v83 + 14);
    *(_OWORD *)&v555[64] = *(_OWORD *)(v83 + 18);
    *(_QWORD *)&v555[80] = *((_QWORD *)v83 + 11);
    *(_OWORD *)&v555[16] = *(_OWORD *)(v83 + 6);
    *(_OWORD *)&v555[88] = *((_OWORD *)v83 + 6);
    *(_QWORD *)&v555[104] = *((_QWORD *)v83 + 14);
    *(_QWORD *)v555 = v85;
    *(_QWORD *)&v555[8] = v101;
    if (v84)
    {
      v102 = *(double *)(*(_QWORD *)(a1 + 176) + 8 * v85);
      v103 = (std::__shared_weak_count *)operator new(0x30uLL);
      v104 = v103;
      v105 = 1.0 / v102;
      v103->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v103->__shared_owners_;
      v103->__shared_weak_owners_ = 0;
      v103->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFCF48;
      v103[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250AFCF80;
      if (1.0 / v102 < 1.0e-15)
        v107 = NAN;
      else
        v107 = 1.0 / sqrt(v105);
      *(double *)&v103[1].__shared_weak_owners_ = v107;
      LOBYTE(v103[1].__shared_owners_) = v105 >= 1.0e-15;
      *(_QWORD *)v646 = v103 + 1;
      *(_QWORD *)&v646[8] = v103;
      v644.__r_.__value_.__r.__words[0] = v86 | (v87 << 32);
      v549 = v103;
      do
        v109 = __ldxr(p_shared_owners);
      while (__stxr(v109 + 1, p_shared_owners));
      *(_QWORD *)v562 = v103 + 1;
      *(_QWORD *)&v562[8] = v103;
      do
        v110 = __ldxr(p_shared_owners);
      while (__stxr(v110 + 1, p_shared_owners));
      v111 = sub_239CB3F70((uint64_t)&v577, (uint64_t *)v555, (unsigned int *)&v644, (uint64_t)&v103[1], v103);
      v108 = v111;
      do
        v112 = __ldaxr(p_shared_owners);
      while (__stlxr(v112 - 1, p_shared_owners));
      if (v112)
      {
        if ((v111 & 1) == 0)
          goto LABEL_158;
LABEL_161:
        v586[0] = 0;
        v113 = v549;
        if (v549)
          goto LABEL_162;
LABEL_165:
        v116 = *(std::__shared_weak_count **)&v646[8];
        if (*(_QWORD *)&v646[8])
          goto LABEL_166;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
        if ((v108 & 1) != 0)
          goto LABEL_161;
LABEL_158:
        v113 = v549;
        if (!v549)
          goto LABEL_165;
LABEL_162:
        v114 = (unint64_t *)&v113->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (v115)
          goto LABEL_165;
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
        v116 = *(std::__shared_weak_count **)&v646[8];
        if (*(_QWORD *)&v646[8])
        {
LABEL_166:
          v117 = (unint64_t *)&v116->__shared_owners_;
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
      }
      v84 = v539;
    }
    else
    {
      *(_QWORD *)v646 = v86 | (v87 << 32);
      *(_OWORD *)v562 = 0uLL;
      v108 = sub_239CB3F70((uint64_t)&v577, (uint64_t *)v555, (unsigned int *)v646, 0, 0);
      if ((v108 & 1) != 0)
        v586[0] = 0;
    }
    if ((v108 & 1) == 0)
      goto LABEL_397;
    ++v85;
LABEL_174:
    v83 += 30;
  }
  while (v83 != v82);
LABEL_175:
  sub_239CB3A08((uint64_t)&v582[1] + 8, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4));
  v121 = *(float64x2_t **)(a1 + 104);
  v120 = *(unsigned int **)(a1 + 112);
  if (v121 == (float64x2_t *)v120)
    goto LABEL_253;
  v122 = 0;
  v119.f64[1] = -1.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v538 = _Q0;
  while (2)
  {
    v124 = LODWORD(v121->f64[0]);
    v125 = LODWORD(v121->f64[1]);
    v126 = *(int8x8_t *)(a1 + 608);
    if (!*(_QWORD *)&v126)
      goto LABEL_217;
    v127 = (uint8x8_t)vcnt_s8(v126);
    v127.i16[0] = vaddlv_u8(v127);
    if (v127.u32[0] > 1uLL)
    {
      v128 = LODWORD(v121->f64[0]);
      if (v124 >= *(_QWORD *)&v126)
        v128 = v124 % *(_QWORD *)&v126;
    }
    else
    {
      v128 = (v126.i32[0] - 1) & v124;
    }
    v129 = *(_QWORD **)(*v544 + 8 * v128);
    if (!v129)
      goto LABEL_217;
    v130 = (_QWORD *)*v129;
    if (!*v129)
      goto LABEL_217;
    v131 = *(_QWORD *)&v126 - 1;
    if (v127.u32[0] < 2uLL)
    {
      while (1)
      {
        v132 = v130[1];
        if (v132 == v124)
        {
          if (v130[2] == v124)
            goto LABEL_198;
        }
        else if ((v132 & v131) != v128)
        {
          goto LABEL_217;
        }
        v130 = (_QWORD *)*v130;
        if (!v130)
          goto LABEL_217;
      }
    }
    while (2)
    {
      v133 = v130[1];
      if (v133 != v124)
      {
        if (v133 >= *(_QWORD *)&v126)
          v133 %= *(_QWORD *)&v126;
        if (v133 != v128)
          goto LABEL_217;
        goto LABEL_192;
      }
      if (v130[2] != v124)
      {
LABEL_192:
        v130 = (_QWORD *)*v130;
        if (!v130)
          goto LABEL_217;
        continue;
      }
      break;
    }
LABEL_198:
    if (v127.u32[0] > 1uLL)
    {
      v134 = LODWORD(v121->f64[1]);
      if (v125 >= *(_QWORD *)&v126)
        v134 = v125 % *(_QWORD *)&v126;
    }
    else
    {
      v134 = (v126.i32[0] - 1) & v125;
    }
    v135 = *(_QWORD **)(*v544 + 8 * v134);
    if (v135)
    {
      v136 = (_QWORD *)*v135;
      if (v136)
      {
        if (v127.u32[0] < 2uLL)
        {
          while (1)
          {
            v137 = v136[1];
            if (v137 == v125)
            {
              if (v136[2] == v125)
                goto LABEL_252;
            }
            else if ((v137 & v131) != v134)
            {
              goto LABEL_217;
            }
            v136 = (_QWORD *)*v136;
            if (!v136)
              goto LABEL_217;
          }
        }
        do
        {
          v138 = v136[1];
          if (v138 == v125)
          {
            if (v136[2] == v125)
              goto LABEL_252;
          }
          else
          {
            if (v138 >= *(_QWORD *)&v126)
              v138 %= *(_QWORD *)&v126;
            if (v138 != v134)
              break;
          }
          v136 = (_QWORD *)*v136;
        }
        while (v136);
      }
    }
LABEL_217:
    v139 = v121[2].f64[0];
    v140 = v121[1];
    v141 = vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL).u64[0];
    v142 = v121[4].f64[0];
    v143 = v121[3];
    *(_QWORD *)&v144 = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u64[0];
    v145 = v121[6].f64[0];
    _Q5 = v121[5];
    *(_QWORD *)&v147 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
    v540 = v121[8].f64[0];
    v542 = (int8x16_t)v121[7];
    *(float64x2_t *)v562 = v140;
    *(double *)&v562[16] = v139;
    *(double *)&v562[40] = v142;
    *(float64x2_t *)&v562[24] = v143;
    *(double *)&v562[64] = v145;
    *(float64x2_t *)&v562[48] = _Q5;
    v148 = (float64x2_t)vzip1q_s64((int64x2_t)v140, (int64x2_t)v143);
    v149 = (float64x2_t)vzip2q_s64((int64x2_t)v140, (int64x2_t)v143);
    _Q20.f64[0] = v139;
    _Q20.f64[1] = v142;
    v151 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v140.f64[0]), v149, v140, 1), _Q20, v139);
    _Q21 = (int64x2_t)vmulq_f64(_Q5, v140);
    _D22 = v140.f64[1];
    __asm { FMLA            D21, D22, V5.D[1] }
    *(double *)_Q21.i64 = *(double *)_Q21.i64 + v145 * v139;
    v154 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v143.f64[0]), v149, v143, 1), _Q20, v142);
    _Q23 = (int8x16_t)vmulq_f64(_Q5, v143);
    _D24 = v143.f64[1];
    __asm { FMLA            D23, D24, V5.D[1] }
    *(double *)_Q23.i64 = *(double *)_Q23.i64 + v145 * v142;
    v157 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, _Q5.f64[0]), v149, _Q5, 1), _Q20, v145);
    _Q19 = vmulq_f64(_Q5, _Q5);
    _Q20.f64[0] = _Q5.f64[1];
    __asm { FMLA            D19, D20, V5.D[1] }
    _Q19.f64[0] = _Q19.f64[0] + v145 * v145;
    v159 = (int64x2_t)vaddq_f64(v154, (float64x2_t)xmmword_239EC6830);
    *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, v538));
    _Q19.f64[1] = NAN;
    v160 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v151, (float64x2_t)xmmword_239EC6820)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v159, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v159)), vabsq_f64(v157))));
    v161 = -v142;
    if (v160 > 0.0001
      || (v162.f64[0] = v140.f64[0],
          *(_QWORD *)&v162.f64[1] = v141,
          v163.f64[0] = v147,
          v163.f64[1] = _Q5.f64[0],
          v164.f64[0] = v144,
          v164.f64[1] = v143.f64[0],
          v165 = vmulq_f64(v162, vmlaq_n_f64(vmulq_n_f64(v163, v161), v164, v145)),
          fabs(v139 * (v147 * v143.f64[0] - v144 * _Q5.f64[0])+ vsubq_f64(v165, (float64x2_t)vdupq_laneq_s64((int64x2_t)v165, 1)).f64[0]+ -1.0) > 0.0001))
    {
      if (v160 > 0.1
        || (*(_QWORD *)&v140.f64[1] = v141,
            v166.f64[0] = v147,
            v166.f64[1] = _Q5.f64[0],
            v167 = vmulq_n_f64(v166, v161),
            v168.f64[0] = v144,
            v168.f64[1] = v143.f64[0],
            v169 = vmulq_f64(v140, vmlaq_n_f64(v167, v168, v145)),
            fabs(v139 * (v147 * v143.f64[0] - v144 * _Q5.f64[0])+ vsubq_f64(v169, (float64x2_t)vdupq_laneq_s64((int64x2_t)v169, 1)).f64[0]+ -1.0) > 0.1))
      {
        sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      sub_239516070((float64x2_t *)v562);
    }
    v170 = v542;
    *(_OWORD *)&v555[48] = *(_OWORD *)&v562[32];
    *(_OWORD *)&v555[64] = *(_OWORD *)&v562[48];
    *(_QWORD *)&v555[80] = *(_QWORD *)&v562[64];
    *(_OWORD *)&v555[16] = *(_OWORD *)v562;
    *(_OWORD *)&v555[32] = *(_OWORD *)&v562[16];
    *(_QWORD *)v555 = v122;
    *(_QWORD *)&v555[8] = 0x3FF0000000000000;
    *(float64_t *)&v555[104] = v540;
    v170.i64[1] = vextq_s8(v170, v170, 8uLL).u64[0];
    *(int8x16_t *)&v555[88] = v170;
    if (v84)
    {
      v171 = *(double *)(*(_QWORD *)(a1 + 200) + 8 * v122);
      v172 = (std::__shared_weak_count *)operator new(0x30uLL);
      v173 = v172;
      v174 = 1.0 / v171;
      v172->__shared_owners_ = 0;
      v175 = (unint64_t *)&v172->__shared_owners_;
      v172->__shared_weak_owners_ = 0;
      v172->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFCF48;
      v172[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250AFCF80;
      if (1.0 / v171 < 1.0e-15)
        v176 = NAN;
      else
        v176 = 1.0 / sqrt(v174);
      *(double *)&v172[1].__shared_weak_owners_ = v176;
      LOBYTE(v172[1].__shared_owners_) = v174 >= 1.0e-15;
      *(_QWORD *)v646 = v172 + 1;
      *(_QWORD *)&v646[8] = v172;
      v644.__r_.__value_.__r.__words[0] = v124 | (v125 << 32);
      v548 = v172;
      do
        v178 = __ldxr(v175);
      while (__stxr(v178 + 1, v175));
      *(_QWORD *)v562 = v172 + 1;
      *(_QWORD *)&v562[8] = v172;
      do
        v179 = __ldxr(v175);
      while (__stxr(v179 + 1, v175));
      v180 = sub_239CB4B84((uint64_t)&v577, (uint64_t *)v555, (unsigned int *)&v644, (uint64_t)&v172[1], v172);
      v177 = v180;
      do
        v181 = __ldaxr(v175);
      while (__stlxr(v181 - 1, v175));
      if (v181)
      {
        if ((v180 & 1) == 0)
          goto LABEL_236;
LABEL_239:
        v586[0] = 0;
        v182 = v548;
        if (v548)
          goto LABEL_240;
LABEL_243:
        v185 = *(std::__shared_weak_count **)&v646[8];
        if (*(_QWORD *)&v646[8])
          goto LABEL_244;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
        if ((v177 & 1) != 0)
          goto LABEL_239;
LABEL_236:
        v182 = v548;
        if (!v548)
          goto LABEL_243;
LABEL_240:
        v183 = (unint64_t *)&v182->__shared_owners_;
        do
          v184 = __ldaxr(v183);
        while (__stlxr(v184 - 1, v183));
        if (v184)
          goto LABEL_243;
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
        v185 = *(std::__shared_weak_count **)&v646[8];
        if (*(_QWORD *)&v646[8])
        {
LABEL_244:
          v186 = (unint64_t *)&v185->__shared_owners_;
          do
            v187 = __ldaxr(v186);
          while (__stlxr(v187 - 1, v186));
          if (!v187)
          {
            ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
            std::__shared_weak_count::__release_weak(v185);
          }
        }
      }
      v84 = v539;
    }
    else
    {
      *(_QWORD *)v646 = v124 | (v125 << 32);
      *(_OWORD *)v562 = 0uLL;
      v177 = sub_239CB4B84((uint64_t)&v577, (uint64_t *)v555, (unsigned int *)v646, 0, 0);
      if ((v177 & 1) != 0)
        v586[0] = 0;
    }
    if ((v177 & 1) == 0)
      goto LABEL_397;
    ++v122;
LABEL_252:
    v121 += 9;
    if (v121 != (float64x2_t *)v120)
      continue;
    break;
  }
LABEL_253:
  v188 = *(uint64_t **)(a1 + 56);
  if (v188)
  {
    v189 = 0;
    v190 = *(_QWORD **)(a1 + 56);
    do
    {
      v189 += (uint64_t)(v190[9] - v190[8]) >> 5;
      v190 = (_QWORD *)*v190;
    }
    while (v190);
    if (v189)
    {
      if (v84)
      {
        v191 = *(double **)(a1 + 176);
        v192 = *(double **)(a1 + 184);
        v193 = 0.0;
        v194 = 0.0;
        if (v191 != v192)
        {
          v195 = (char *)v192 - (char *)v191 - 8;
          if (v195 < 8)
          {
            do
            {
LABEL_264:
              v199 = *v191++;
              v194 = v194 + v199;
            }
            while (v191 != v192);
          }
          else
          {
            v196 = (v195 >> 3) + 1;
            v197 = v191 + 1;
            v198 = v196 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v194 = v194 + *(v197 - 1) + *v197;
              v197 += 2;
              v198 -= 2;
            }
            while (v198);
            if (v196 != (v196 & 0x3FFFFFFFFFFFFFFELL))
            {
              v191 += v196 & 0x3FFFFFFFFFFFFFFELL;
              goto LABEL_264;
            }
          }
        }
        v200 = *(double **)(a1 + 200);
        v201 = *(double **)(a1 + 208);
        if (v200 != v201)
        {
          v202 = (char *)v201 - (char *)v200 - 8;
          if (v202 >= 8)
          {
            v204 = (v202 >> 3) + 1;
            v205 = v200 + 1;
            v193 = 0.0;
            v206 = v204 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v193 = v193 + *(v205 - 1) + *v205;
              v205 += 2;
              v206 -= 2;
            }
            while (v206);
            if (v204 != (v204 & 0x3FFFFFFFFFFFFFFELL))
            {
              v200 += v204 & 0x3FFFFFFFFFFFFFFELL;
              goto LABEL_273;
            }
          }
          else
          {
            v193 = 0.0;
            do
            {
LABEL_273:
              v207 = *v200++;
              v193 = v193 + v207;
            }
            while (v200 != v201);
          }
        }
        v203 = v194 + v193;
      }
      else
      {
        v203 = (double)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3)
                      - 0x71C71C71C71C71C7 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4))
             + 1.0;
      }
      LODWORD(v208) = 0;
      *(double *)(a1 + 224) = v203 * *(float *)(a1 + 676) / (double)v189;
      while (1)
      {
        v209 = *(int8x8_t *)(a1 + 8);
        if (v209)
        {
          v210 = v188[3];
          v211 = (uint8x8_t)vcnt_s8(v209);
          v211.i16[0] = vaddlv_u8(v211);
          if (v211.u32[0] > 1uLL)
          {
            v212 = v188[3];
            if (v210 >= *(_QWORD *)&v209)
              v212 = v210 % *(_QWORD *)&v209;
          }
          else
          {
            v212 = (*(_QWORD *)&v209 - 1) & v210;
          }
          v213 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v212);
          if (v213)
          {
            v214 = (_QWORD *)*v213;
            if (v214)
              break;
          }
        }
LABEL_276:
        v188 = (uint64_t *)*v188;
        if (!v188)
          goto LABEL_327;
      }
      *(_QWORD *)&v119.f64[0] = v188[7];
      if (v211.u32[0] < 2uLL)
      {
        v215 = *(_QWORD *)&v209 - 1;
        while (1)
        {
          v217 = v214[1];
          if (v217 == v210)
          {
            if (v214[2] == v210)
              goto LABEL_298;
          }
          else if ((v217 & v215) != v212)
          {
            goto LABEL_276;
          }
          v214 = (_QWORD *)*v214;
          if (!v214)
            goto LABEL_276;
        }
      }
      while (2)
      {
        v216 = v214[1];
        if (v216 != v210)
        {
          if (v216 >= *(_QWORD *)&v209)
            v216 %= *(_QWORD *)&v209;
          if (v216 != v212)
            goto LABEL_276;
          goto LABEL_287;
        }
        if (v214[2] != v210)
        {
LABEL_287:
          v214 = (_QWORD *)*v214;
          if (!v214)
            goto LABEL_276;
          continue;
        }
        break;
      }
LABEL_298:
      v218 = (uint64_t *)v188[8];
      v219 = (uint64_t *)v188[9];
      if (v218 == v219)
        goto LABEL_276;
      v543 = (int8x16_t)vdivq_f64(*(float64x2_t *)(v188 + 5), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v119.f64[0], 0));
      v545 = *(_OWORD *)&vdivq_f64(v119, v119);
      v220 = (float64x2_t)vextq_s8(v543, v543, 8uLL);
      v541 = v220.f64[0];
      v208 = (int)v208;
      while (2)
      {
        *(_QWORD *)&v220.f64[0] = v218[3];
        _Q1 = *(float64x2_t *)(v218 + 1);
        _Q2 = vmulq_f64(_Q1, _Q1);
        _D3 = v218[2];
        __asm { FMLA            D2, D3, V1.D[1] }
        _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v220.f64[0] * v220.f64[0]);
        v224 = *(_OWORD *)&vmulq_f64(v220, _Q2);
        v225 = vmulq_n_f64(_Q1, _Q2.f64[0]);
        *(_QWORD *)v555 = v208;
        *(_QWORD *)&v555[24] = v545;
        *(_QWORD *)&_Q2.f64[0] = v543.i64[0];
        _Q2.f64[1] = v541;
        *(float64x2_t *)&v555[8] = _Q2;
        *(float64x2_t *)&v555[32] = v225;
        *(_QWORD *)&v555[48] = v224;
        v226 = *(double *)(a1 + 224);
        v227 = (std::__shared_weak_count *)operator new(0x30uLL);
        v228 = v227;
        v229 = 1.0 / v226;
        v227->__shared_owners_ = 0;
        v230 = (unint64_t *)&v227->__shared_owners_;
        v227->__shared_weak_owners_ = 0;
        v227->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFE808;
        v227[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250AFE840;
        if (1.0 / v226 < 1.0e-15)
          v231 = NAN;
        else
          v231 = 1.0 / sqrt(v229);
        *(double *)&v227[1].__shared_weak_owners_ = v231;
        LOBYTE(v227[1].__shared_owners_) = v229 >= 1.0e-15;
        *(_QWORD *)v646 = v227 + 1;
        *(_QWORD *)&v646[8] = v227;
        v232 = *v218;
        LODWORD(v644.__r_.__value_.__l.__data_) = v188[2];
        *(std::string::size_type *)((char *)v644.__r_.__value_.__r.__words + 4) = __PAIR64__(v232, v210);
        v547 = v227;
        do
          v233 = __ldxr(v230);
        while (__stxr(v233 + 1, v230));
        *(_QWORD *)v562 = v227 + 1;
        *(_QWORD *)&v562[8] = v227;
        do
          v234 = __ldxr(v230);
        while (__stxr(v234 + 1, v230));
        v235 = sub_239CB5798((uint64_t)&v577, (uint64_t *)v555, (unsigned int *)&v644, (uint64_t)&v227[1], v227);
        v236 = v235;
        do
          v237 = __ldaxr(v230);
        while (__stlxr(v237 - 1, v230));
        if (v237)
        {
          if ((v235 & 1) == 0)
            goto LABEL_311;
LABEL_314:
          v586[0] = 0;
          v238 = v547;
          if (v547)
            goto LABEL_315;
LABEL_318:
          v241 = *(std::__shared_weak_count **)&v646[8];
          if (*(_QWORD *)&v646[8])
            goto LABEL_319;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
          std::__shared_weak_count::__release_weak(v228);
          if ((v236 & 1) != 0)
            goto LABEL_314;
LABEL_311:
          v238 = v547;
          if (!v547)
            goto LABEL_318;
LABEL_315:
          v239 = (unint64_t *)&v238->__shared_owners_;
          do
            v240 = __ldaxr(v239);
          while (__stlxr(v240 - 1, v239));
          if (v240)
            goto LABEL_318;
          ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
          std::__shared_weak_count::__release_weak(v238);
          v241 = *(std::__shared_weak_count **)&v646[8];
          if (*(_QWORD *)&v646[8])
          {
LABEL_319:
            v242 = (unint64_t *)&v241->__shared_owners_;
            do
              v243 = __ldaxr(v242);
            while (__stlxr(v243 - 1, v242));
            if (!v243)
            {
              ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
              std::__shared_weak_count::__release_weak(v241);
            }
          }
        }
        if ((v236 & 1) == 0)
          goto LABEL_397;
        ++v208;
        v218 += 4;
        if (v218 == v219)
        {
          v84 = v539;
          goto LABEL_276;
        }
        continue;
      }
    }
  }
LABEL_327:
  v244 = *(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712);
  if (v244)
  {
    v245 = 0xCCCCCCCCCCCCCCCDLL * (v244 >> 3);
    sub_239CB5B70((uint64_t)&v582[4] + 8, v245);
    if (v84)
    {
      v246 = *(double **)(a1 + 176);
      v247 = *(double **)(a1 + 184);
      v248 = 0.0;
      v249 = 0.0;
      if (v246 != v247)
      {
        v250 = (char *)v247 - (char *)v246 - 8;
        if (v250 < 8)
        {
          do
          {
LABEL_335:
            v254 = *v246++;
            v249 = v249 + v254;
          }
          while (v246 != v247);
        }
        else
        {
          v251 = (v250 >> 3) + 1;
          v252 = v246 + 1;
          v253 = v251 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v249 = v249 + *(v252 - 1) + *v252;
            v252 += 2;
            v253 -= 2;
          }
          while (v253);
          if (v251 != (v251 & 0x3FFFFFFFFFFFFFFELL))
          {
            v246 += v251 & 0x3FFFFFFFFFFFFFFELL;
            goto LABEL_335;
          }
        }
      }
      v255 = *(double **)(a1 + 200);
      v256 = *(double **)(a1 + 208);
      if (v255 != v256)
      {
        v257 = (char *)v256 - (char *)v255 - 8;
        if (v257 >= 8)
        {
          v259 = (v257 >> 3) + 1;
          v260 = v255 + 1;
          v248 = 0.0;
          v261 = v259 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v248 = v248 + *(v260 - 1) + *v260;
            v260 += 2;
            v261 -= 2;
          }
          while (v261);
          if (v259 != (v259 & 0x3FFFFFFFFFFFFFFELL))
          {
            v255 += v259 & 0x3FFFFFFFFFFFFFFELL;
            goto LABEL_344;
          }
        }
        else
        {
          v248 = 0.0;
          do
          {
LABEL_344:
            v262 = *v255++;
            v248 = v248 + v262;
          }
          while (v255 != v256);
        }
      }
      v258 = v249 + v248;
    }
    else
    {
      v258 = (double)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3)
                    - 0x71C71C71C71C71C7 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4))
           + 1.0;
    }
    *(double *)(a1 + 232) = v258 * *(float *)(a1 + 680) / (double)v245;
    v263 = *(int8x16_t **)(a1 + 712);
    v264 = *(unsigned int **)(a1 + 720);
    if (v263 != (int8x16_t *)v264)
    {
      v265 = 0;
      do
      {
        v266 = v263->u32[0];
        v267 = *(_QWORD *)(a1 + 688);
        if (v266 < (*(_QWORD *)(a1 + 696) - v267) >> 5)
        {
          v268 = *(_QWORD *)(a1 + 8);
          if (v268)
          {
            v269 = v263->i64[1];
            v270 = (uint8x8_t)vcnt_s8((int8x8_t)v268);
            v270.i16[0] = vaddlv_u8(v270);
            v271 = v270.u32[0];
            if (v270.u32[0] > 1uLL)
            {
              v272 = v263->i64[1];
              if (v269 >= v268)
                v272 = v269 % v268;
            }
            else
            {
              v272 = ((_DWORD)v268 - 1) & v269;
            }
            v273 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v272);
            if (v273)
            {
              v274 = (_QWORD *)*v273;
              if (v274)
              {
                v275 = v263[2].i64[0];
                v276 = v263[1];
                if (v271 < 2)
                {
                  v277 = v268 - 1;
                  while (1)
                  {
                    v279 = v274[1];
                    if (v279 == v269)
                    {
                      if (v274[2] == v269)
                        goto LABEL_373;
                    }
                    else if ((v279 & v277) != v272)
                    {
                      goto LABEL_350;
                    }
                    v274 = (_QWORD *)*v274;
                    if (!v274)
                      goto LABEL_350;
                  }
                }
                do
                {
                  v278 = v274[1];
                  if (v278 == v269)
                  {
                    if (v274[2] == v269)
                    {
LABEL_373:
                      v280 = (__int128 *)(v267 + 32 * v266);
                      v281 = *v280;
                      v282 = v280[1];
                      *(_QWORD *)v555 = v265;
                      *(_OWORD *)&v555[24] = v282;
                      *(_OWORD *)&v555[8] = v281;
                      *(_QWORD *)&v555[56] = v275;
                      v276.i64[1] = vextq_s8(v276, v276, 8uLL).u64[0];
                      *(int8x16_t *)&v555[40] = v276;
                      v283 = *(double *)(a1 + 232);
                      v284 = (std::__shared_weak_count *)operator new(0x30uLL);
                      v285 = v284;
                      v286 = 1.0 / v283;
                      v284->__shared_owners_ = 0;
                      v287 = (unint64_t *)&v284->__shared_owners_;
                      v284->__shared_weak_owners_ = 0;
                      v284->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFE808;
                      v284[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250AFE840;
                      if (1.0 / v283 < 1.0e-15)
                        v288 = NAN;
                      else
                        v288 = 1.0 / sqrt(v286);
                      *(double *)&v284[1].__shared_weak_owners_ = v288;
                      LOBYTE(v284[1].__shared_owners_) = v286 >= 1.0e-15;
                      *(_QWORD *)v646 = v284 + 1;
                      *(_QWORD *)&v646[8] = v284;
                      LODWORD(v644.__r_.__value_.__l.__data_) = v269;
                      v546 = v284;
                      do
                        v289 = __ldxr(v287);
                      while (__stxr(v289 + 1, v287));
                      *(_QWORD *)v562 = v284 + 1;
                      *(_QWORD *)&v562[8] = v284;
                      do
                        v290 = __ldxr(v287);
                      while (__stxr(v290 + 1, v287));
                      v291 = sub_239CB5CF0((uint64_t)&v577, (uint64_t *)v555, (unsigned int *)&v644, (uint64_t)&v284[1], v284);
                      v292 = v291;
                      do
                        v293 = __ldaxr(v287);
                      while (__stlxr(v293 - 1, v287));
                      if (v293)
                      {
                        if ((v291 & 1) == 0)
                          goto LABEL_384;
LABEL_387:
                        v586[0] = 0;
                        v294 = v546;
                        if (v546)
                          goto LABEL_388;
                      }
                      else
                      {
                        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                        std::__shared_weak_count::__release_weak(v285);
                        if ((v292 & 1) != 0)
                          goto LABEL_387;
LABEL_384:
                        v294 = v546;
                        if (v546)
                        {
LABEL_388:
                          v295 = (unint64_t *)&v294->__shared_owners_;
                          do
                            v296 = __ldaxr(v295);
                          while (__stlxr(v296 - 1, v295));
                          if (!v296)
                          {
                            ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                            std::__shared_weak_count::__release_weak(v294);
                          }
                        }
                      }
                      v297 = *(std::__shared_weak_count **)&v646[8];
                      if (*(_QWORD *)&v646[8])
                      {
                        v298 = (unint64_t *)(*(_QWORD *)&v646[8] + 8);
                        do
                          v299 = __ldaxr(v298);
                        while (__stlxr(v299 - 1, v298));
                        if (!v299)
                        {
                          ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                          std::__shared_weak_count::__release_weak(v297);
                        }
                      }
                      if ((v292 & 1) != 0)
                      {
                        v265 += v292 & 1;
                        break;
                      }
LABEL_397:
                      v300 = 0;
                      goto LABEL_496;
                    }
                  }
                  else
                  {
                    if (v278 >= v268)
                      v278 %= v268;
                    if (v278 != v272)
                      break;
                  }
                  v274 = (_QWORD *)*v274;
                }
                while (v274);
              }
            }
          }
        }
LABEL_350:
        v263 = (int8x16_t *)((char *)v263 + 40);
      }
      while (v263 != (int8x16_t *)v264);
    }
  }
  if (DWORD2(v589) != *(unsigned __int8 *)(a1 + 674))
  {
    DWORD2(v589) = *(unsigned __int8 *)(a1 + 674);
    BYTE2(v586[0]) = 0;
    LOWORD(v586[0]) = 0;
  }
  *(_QWORD *)v562 = off_250AFEA50;
  v301 = *(_OWORD *)(a1 + 256);
  *(_OWORD *)&v562[8] = *(_OWORD *)(a1 + 240);
  *(_OWORD *)&v562[24] = v301;
  *(_OWORD *)&v562[40] = *(_OWORD *)(a1 + 272);
  *(_OWORD *)&v562[49] = *(_OWORD *)(a1 + 281);
  v302 = v563;
  v303 = *(_QWORD *)(a1 + 328);
  if (v303)
  {
    if (v303 != a1 + 304)
    {
      v303 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v303 + 16))(v303);
      goto LABEL_403;
    }
    v564 = v563;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v303 + 24))(v303, v563);
  }
  else
  {
LABEL_403:
    v564 = (_BYTE *)v303;
  }
  v304 = v565;
  v305 = *(_QWORD *)(a1 + 360);
  if (v305)
  {
    if (v305 != a1 + 336)
    {
      v305 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v305 + 16))(v305);
      goto LABEL_408;
    }
    v566 = v565;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v305 + 24))(v305, v565);
  }
  else
  {
LABEL_408:
    v566 = (_BYTE *)v305;
  }
  v567 = -1.0;
  *(_QWORD *)v562 = &off_250AFE9E8;
  v306 = *(_OWORD *)(a1 + 384);
  v568 = *(_OWORD *)(a1 + 368);
  v569 = v306;
  v570 = *((_QWORD *)&v568 + 1);
  v571 = 0x4000000000000000;
  kdebug_trace();
  (*(void (**)(char *@<X8>))(*(_QWORD *)v562 + 16))(v646);
  ((void (*)(std::string *@<X8>))*v572)(&v644);
  if ((v646[23] & 0x80000000) != 0)
  {
    sub_23941A7F8(v555, *(void **)v646, *(unint64_t *)&v646[8]);
  }
  else
  {
    *(_OWORD *)v555 = *(_OWORD *)v646;
    *(_QWORD *)&v555[16] = *(_QWORD *)&v646[16];
  }
  if (SHIBYTE(v644.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&v555[24], v644.__r_.__value_.__l.__data_, v644.__r_.__value_.__l.__size_);
    *(_QWORD *)&v555[48] = 0;
    *(_DWORD *)&v555[56] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v555[64] = _Q0;
    memset(&v555[80], 0, 32);
    v556 = 0u;
    *(_OWORD *)v557 = 0u;
    v558 = 0u;
    v559 = 0u;
    *(_OWORD *)__p = 0u;
    v561 = 0;
    if (SHIBYTE(v644.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v644.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)&v555[24] = v644;
    *(_QWORD *)&v555[48] = 0;
    *(_DWORD *)&v555[56] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v555[64] = _Q0;
    memset(&v555[80], 0, 32);
    v556 = 0u;
    *(_OWORD *)v557 = 0u;
    v558 = 0u;
    v559 = 0u;
    *(_OWORD *)__p = 0u;
    v561 = 0;
  }
  if ((v646[23] & 0x80000000) != 0)
    operator delete(*(void **)v646);
  sub_239C2F538(v555, 4uLL, 2uLL);
  kdebug_trace();
  v309 = ((double (*)(_QWORD *))v572[4])(&v572);
  v645 = 0;
  *(_QWORD *)v646 = &off_250AFCFE8;
  *(_QWORD *)&v646[8] = &v572;
  *(_QWORD *)&v646[16] = v588;
  v647 = v646;
  sub_23965A910(v646, &v644);
  v310 = v647;
  if (v647 == v646)
  {
    v311 = 4;
    v310 = v646;
LABEL_423:
    (*(void (**)(void))(*v310 + 8 * v311))();
  }
  else if (v647)
  {
    v311 = 5;
    goto LABEL_423;
  }
  if ((*(unsigned int (__cdecl **)())(*(_QWORD *)v562 + 24))())
  {
    v588 = 1;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v562 + 40))((uint64_t)v562))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v562 + 48))((uint64_t)v562, 0.0);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v562 + 56))((uint64_t)v562);
    v312 = (*(double (**)(uint64_t))(*(_QWORD *)v562 + 32))((uint64_t)v562);
    ((void (*)(uint64_t, double))v572[12])((uint64_t)&v572, v312);
  }
  kdebug_trace();
  if (v562[48])
  {
    v313.i64[0] = *(_QWORD *)&v562[56];
    if (v562[64])
    {
      *(_QWORD *)v646 = &v572;
      *(_QWORD *)&v646[8] = *(_QWORD *)&v562[56];
      *(_QWORD *)&v646[16] = __dst;
      sub_239CB66FC((uint64_t)v646, v313, v314, v315, v316, v317, v318);
      v319 = (uint64_t)__dst[0];
      if (*(double *)__dst <= 0.0)
      {
        v320 = 1.0e20;
        v319 = 0x3DDB7CDFD9D7BDBBLL;
      }
      else
      {
        v320 = 1.0 / (*(double *)__dst * *(double *)__dst);
      }
      *(_QWORD *)&v573 = v319;
      *((double *)&v573 + 1) = v320;
      *(_QWORD *)&v574 = v319;
      *((double *)&v574 + 1) = v320;
      *(_QWORD *)&v575 = v319;
      *((double *)&v575 + 1) = v320;
      *(_QWORD *)&v576 = v319;
      *((double *)&v576 + 1) = v320;
      memset(v586, 0, 5);
    }
    else
    {
      sub_239CB6B70((uint64_t)&v572, v313, v314, v315, v316, v317, v318);
    }
  }
  if (((unsigned int (*)(uint64_t))v572[1])((uint64_t)&v572))
  {
    if (v562[16])
    {
      v321 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
      std::ios_base::getloc((const std::ios_base *)((char *)v321 + *(_QWORD *)(*v321 - 24)));
      v322 = std::locale::use_facet((const std::locale *)v646, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v322->__vftable[2].~facet_0)(v322, 10);
      std::locale::~locale((std::locale *)v646);
      std::ostream::put();
      std::ostream::flush();
    }
    *(_DWORD *)&v555[56] = 0;
    v323 = v645;
    if (!v645)
      goto LABEL_755;
    goto LABEL_440;
  }
  *(_QWORD *)&v555[64] = sub_239CB71D0((uint64_t)&v572, (uint64_t)&v555[80]);
  *(_QWORD *)&v555[72] = *(_QWORD *)&v555[64];
  v567 = *(double *)&v555[64];
  sub_23945D3D0(&v555[104], *(char **)&v555[80], *(char **)&v555[88], (uint64_t)(*(_QWORD *)&v555[88] - *(_QWORD *)&v555[80]) >> 3);
  kdebug_trace();
  v326 = sub_239CB89C0((uint64_t)&v577);
  v327 = v326;
  v328 = (uint64_t *)*((_QWORD *)&v558 + 1);
  v329 = (_QWORD *)v558;
  v557[0] = (char *)v557[0] + v326;
  if ((unint64_t)v558 < *((_QWORD *)&v558 + 1))
  {
    *(_QWORD *)v558 = v326;
    v330 = v329 + 1;
    goto LABEL_518;
  }
  v346 = v557[1];
  v347 = v558 - (unint64_t)v557[1];
  v348 = (uint64_t)(v558 - (unint64_t)v557[1]) >> 3;
  v349 = v348 + 1;
  if ((unint64_t)(v348 + 1) >> 61)
    goto LABEL_764;
  if ((uint64_t)(*((_QWORD *)&v558 + 1) - (unint64_t)v557[1]) >> 2 > v349)
    v349 = (uint64_t)(*((_QWORD *)&v558 + 1) - (unint64_t)v557[1]) >> 2;
  if (*((_QWORD *)&v558 + 1) - (unint64_t)v557[1] >= 0x7FFFFFFFFFFFFFF8)
    v350 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v350 = v349;
  if (v350)
  {
    if (!(v350 >> 61))
    {
      v351 = (char *)operator new(8 * v350);
      goto LABEL_509;
    }
LABEL_765:
    sub_239418A80();
  }
  v351 = 0;
LABEL_509:
  v352 = (uint64_t *)&v351[8 * v348];
  v328 = (uint64_t *)&v351[8 * v350];
  *v352 = v327;
  v330 = v352 + 1;
  if (v329 != (_QWORD *)v346)
  {
    v353 = (char *)v329 - v346 - 8;
    if (v353 < 0x58)
      goto LABEL_771;
    if ((unint64_t)((char *)v329 - v351 - v347) < 0x20)
      goto LABEL_771;
    v354 = (v353 >> 3) + 1;
    v355 = &v351[8 * v348 - 16];
    v356 = (__int128 *)(v329 - 2);
    v357 = v354 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v358 = *v356;
      *((_OWORD *)v355 - 1) = *(v356 - 1);
      *(_OWORD *)v355 = v358;
      v355 -= 32;
      v356 -= 2;
      v357 -= 4;
    }
    while (v357);
    v352 -= v354 & 0x3FFFFFFFFFFFFFFCLL;
    v329 -= v354 & 0x3FFFFFFFFFFFFFFCLL;
    if (v354 != (v354 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_771:
      do
      {
        v359 = *--v329;
        *--v352 = v359;
      }
      while (v329 != (_QWORD *)v346);
    }
  }
  v557[1] = v352;
  *(_QWORD *)&v558 = v330;
  *((_QWORD *)&v558 + 1) = v328;
  if (v346)
  {
    operator delete(v346);
    v328 = (uint64_t *)*((_QWORD *)&v558 + 1);
  }
LABEL_518:
  *(_QWORD *)&v558 = v330;
  v360 = sub_239CB8888((uint64_t)&v577);
  v361 = v360;
  v557[0] = (char *)v557[0] + v360;
  if (v330 < v328)
  {
    *v330 = v360;
    v362 = (unint64_t *)(v330 + 1);
    goto LABEL_541;
  }
  v363 = (uint64_t *)v557[1];
  v364 = (char *)v330 - (char *)v557[1];
  v365 = ((char *)v330 - (char *)v557[1]) >> 3;
  v366 = v365 + 1;
  if ((unint64_t)(v365 + 1) >> 61)
    goto LABEL_764;
  if (((char *)v328 - (char *)v557[1]) >> 2 > v366)
    v366 = ((char *)v328 - (char *)v557[1]) >> 2;
  if ((unint64_t)((char *)v328 - (char *)v557[1]) >= 0x7FFFFFFFFFFFFFF8)
    v367 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v367 = v366;
  if (v367)
  {
    if (v367 >> 61)
      goto LABEL_765;
    v368 = operator new(8 * v367);
  }
  else
  {
    v368 = 0;
  }
  v369 = (unint64_t *)&v368[8 * v365];
  v328 = (uint64_t *)&v368[8 * v367];
  *v369 = v361;
  v362 = v369 + 1;
  if (v330 != v363)
  {
    v370 = (char *)v330 - (char *)v363 - 8;
    if (v370 < 0x58)
    {
      v371 = v330;
      goto LABEL_538;
    }
    if ((unint64_t)((char *)v330 - v368 - v364) < 0x20)
    {
      v371 = v330;
      goto LABEL_538;
    }
    v372 = (v370 >> 3) + 1;
    v371 = &v330[-(v372 & 0x3FFFFFFFFFFFFFFCLL)];
    v373 = &v368[8 * v365 - 16];
    v374 = v330 - 2;
    v375 = v372 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v376 = *(_OWORD *)v374;
      *(v373 - 1) = *((_OWORD *)v374 - 1);
      *v373 = v376;
      v373 -= 2;
      v374 -= 4;
      v375 -= 4;
    }
    while (v375);
    v369 -= v372 & 0x3FFFFFFFFFFFFFFCLL;
    if (v372 != (v372 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_538:
        v377 = *--v371;
        *--v369 = v377;
      }
      while (v371 != v363);
    }
  }
  v557[1] = v369;
  *(_QWORD *)&v558 = v362;
  *((_QWORD *)&v558 + 1) = v328;
  if (v363)
  {
    operator delete(v363);
    v328 = (uint64_t *)*((_QWORD *)&v558 + 1);
  }
LABEL_541:
  *(_QWORD *)&v558 = v362;
  v378 = sub_239CB8740((uint64_t)&v577);
  v379 = v378;
  v557[0] = (char *)v557[0] + v378;
  if (v362 < (unint64_t *)v328)
  {
    *v362 = v378;
    v380 = v362 + 1;
    goto LABEL_564;
  }
  v381 = (unint64_t *)v557[1];
  v382 = (char *)v362 - (char *)v557[1];
  v383 = ((char *)v362 - (char *)v557[1]) >> 3;
  v384 = v383 + 1;
  if ((unint64_t)(v383 + 1) >> 61)
    goto LABEL_764;
  if (((char *)v328 - (char *)v557[1]) >> 2 > v384)
    v384 = ((char *)v328 - (char *)v557[1]) >> 2;
  if ((unint64_t)((char *)v328 - (char *)v557[1]) >= 0x7FFFFFFFFFFFFFF8)
    v385 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v385 = v384;
  if (v385)
  {
    if (v385 >> 61)
      goto LABEL_765;
    v386 = operator new(8 * v385);
  }
  else
  {
    v386 = 0;
  }
  v387 = (unint64_t *)&v386[8 * v383];
  v328 = (uint64_t *)&v386[8 * v385];
  *v387 = v379;
  v380 = v387 + 1;
  if (v362 != v381)
  {
    v388 = (char *)v362 - (char *)v381 - 8;
    if (v388 < 0x58)
    {
      v389 = v362;
      goto LABEL_561;
    }
    if ((unint64_t)((char *)v362 - v386 - v382) < 0x20)
    {
      v389 = v362;
      goto LABEL_561;
    }
    v390 = (v388 >> 3) + 1;
    v389 = &v362[-(v390 & 0x3FFFFFFFFFFFFFFCLL)];
    v391 = &v386[8 * v383 - 16];
    v392 = v362 - 2;
    v393 = v390 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v394 = *(_OWORD *)v392;
      *(v391 - 1) = *((_OWORD *)v392 - 1);
      *v391 = v394;
      v391 -= 2;
      v392 -= 4;
      v393 -= 4;
    }
    while (v393);
    v387 -= v390 & 0x3FFFFFFFFFFFFFFCLL;
    if (v390 != (v390 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_561:
        v395 = *--v389;
        *--v387 = v395;
      }
      while (v389 != v381);
    }
  }
  v557[1] = v387;
  *(_QWORD *)&v558 = v380;
  *((_QWORD *)&v558 + 1) = v328;
  if (v381)
  {
    operator delete(v381);
    v328 = (uint64_t *)*((_QWORD *)&v558 + 1);
  }
LABEL_564:
  *(_QWORD *)&v558 = v380;
  v396 = sub_239CB8628((uint64_t)&v577);
  v397 = v396;
  v557[0] = (char *)v557[0] + v396;
  if (v380 < (unint64_t *)v328)
  {
    *v380 = v396;
    v398 = v380 + 1;
    goto LABEL_587;
  }
  v399 = (unint64_t *)v557[1];
  v400 = (char *)v380 - (char *)v557[1];
  v401 = ((char *)v380 - (char *)v557[1]) >> 3;
  v402 = v401 + 1;
  if ((unint64_t)(v401 + 1) >> 61)
LABEL_764:
    sub_2394189F8();
  if (((char *)v328 - (char *)v557[1]) >> 2 > v402)
    v402 = ((char *)v328 - (char *)v557[1]) >> 2;
  if ((unint64_t)((char *)v328 - (char *)v557[1]) >= 0x7FFFFFFFFFFFFFF8)
    v403 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v403 = v402;
  if (v403)
  {
    if (v403 >> 61)
      goto LABEL_765;
    v404 = operator new(8 * v403);
  }
  else
  {
    v404 = 0;
  }
  v405 = (unint64_t *)&v404[8 * v401];
  v406 = &v404[8 * v403];
  *v405 = v397;
  v398 = v405 + 1;
  if (v380 != v399)
  {
    v407 = (char *)v380 - (char *)v399 - 8;
    if (v407 < 0x58)
    {
      v408 = v380;
      goto LABEL_584;
    }
    if ((unint64_t)((char *)v380 - v404 - v400) < 0x20)
    {
      v408 = v380;
      goto LABEL_584;
    }
    v409 = (v407 >> 3) + 1;
    v408 = &v380[-(v409 & 0x3FFFFFFFFFFFFFFCLL)];
    v410 = &v404[8 * v401 - 16];
    v411 = v380 - 2;
    v412 = v409 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v413 = *(_OWORD *)v411;
      *(v410 - 1) = *((_OWORD *)v411 - 1);
      *v410 = v413;
      v410 -= 2;
      v411 -= 4;
      v412 -= 4;
    }
    while (v412);
    v405 -= v409 & 0x3FFFFFFFFFFFFFFCLL;
    if (v409 != (v409 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_584:
        v414 = *--v408;
        *--v405 = v414;
      }
      while (v408 != v399);
    }
  }
  v557[1] = v405;
  *(_QWORD *)&v558 = v398;
  *((_QWORD *)&v558 + 1) = v406;
  if (v399)
    operator delete(v399);
LABEL_587:
  *(_QWORD *)&v558 = v398;
  v415 = sub_239CB8368((uint64_t)&v577);
  v416 = v415;
  v559.i64[0] += v415;
  v559.i64[1] = v559.i64[1] - v415 + 8 * v415;
  v417 = (char *)__p[1];
  if (__p[1] < v561)
  {
    *(_QWORD *)__p[1] = v415;
    v418 = v417 + 8;
    goto LABEL_608;
  }
  v419 = __p[0];
  v420 = (char *)__p[1] - (char *)__p[0];
  v421 = ((char *)__p[1] - (char *)__p[0]) >> 3;
  v422 = v421 + 1;
  if ((unint64_t)(v421 + 1) >> 61)
    goto LABEL_766;
  v423 = v561 - (char *)__p[0];
  if ((v561 - (char *)__p[0]) >> 2 > v422)
    v422 = v423 >> 2;
  if ((unint64_t)v423 >= 0x7FFFFFFFFFFFFFF8)
    v424 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v424 = v422;
  if (v424)
  {
    if (!(v424 >> 61))
    {
      v425 = operator new(8 * v424);
      goto LABEL_599;
    }
LABEL_768:
    sub_239418A80();
  }
  v425 = 0;
LABEL_599:
  v426 = &v425[8 * v421];
  v427 = &v425[8 * v424];
  *v426 = v416;
  v418 = v426 + 1;
  if (v417 != v419)
  {
    v428 = v417 - v419 - 8;
    if (v428 < 0x58)
      goto LABEL_772;
    if ((unint64_t)(v417 - v425 - v420) < 0x20)
      goto LABEL_772;
    v429 = (v428 >> 3) + 1;
    v430 = &v425[8 * v421 - 16];
    v431 = v417 - 16;
    v432 = v429 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v433 = *(_OWORD *)v431;
      *(v430 - 1) = *((_OWORD *)v431 - 1);
      *v430 = v433;
      v430 -= 2;
      v431 -= 32;
      v432 -= 4;
    }
    while (v432);
    v426 -= v429 & 0x3FFFFFFFFFFFFFFCLL;
    v417 -= 8 * (v429 & 0x3FFFFFFFFFFFFFFCLL);
    if (v429 != (v429 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_772:
      do
      {
        v434 = *((_QWORD *)v417 - 1);
        v417 -= 8;
        *--v426 = v434;
      }
      while (v417 != v419);
    }
  }
  __p[0] = v426;
  __p[1] = v418;
  v561 = v427;
  if (v419)
    operator delete(v419);
LABEL_608:
  __p[1] = v418;
  v435 = sub_239CB7DAC((uint64_t)&v577);
  v436 = v435;
  v559 = vaddq_s64(v559, vdupq_n_s64(v435));
  v437 = (char *)__p[1];
  if (__p[1] < v561)
  {
    *(_QWORD *)__p[1] = v435;
    v438 = v437 + 8;
    goto LABEL_629;
  }
  v439 = __p[0];
  v440 = (char *)__p[1] - (char *)__p[0];
  v441 = ((char *)__p[1] - (char *)__p[0]) >> 3;
  v442 = v441 + 1;
  if ((unint64_t)(v441 + 1) >> 61)
LABEL_766:
    sub_2394189F8();
  v443 = v561 - (char *)__p[0];
  if ((v561 - (char *)__p[0]) >> 2 > v442)
    v442 = v443 >> 2;
  if ((unint64_t)v443 >= 0x7FFFFFFFFFFFFFF8)
    v444 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v444 = v442;
  if (v444)
  {
    if (v444 >> 61)
      goto LABEL_768;
    v445 = operator new(8 * v444);
  }
  else
  {
    v445 = 0;
  }
  v446 = &v445[8 * v441];
  v447 = &v445[8 * v444];
  *v446 = v436;
  v438 = v446 + 1;
  if (v437 != v439)
  {
    v448 = v437 - v439 - 8;
    if (v448 < 0x58)
      goto LABEL_773;
    if ((unint64_t)(v437 - &v445[v440]) < 0x20)
      goto LABEL_773;
    v449 = (v448 >> 3) + 1;
    v450 = &v445[8 * v441 - 16];
    v451 = v437 - 16;
    v452 = v449 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v453 = *(_OWORD *)v451;
      *(v450 - 1) = *((_OWORD *)v451 - 1);
      *v450 = v453;
      v450 -= 2;
      v451 -= 32;
      v452 -= 4;
    }
    while (v452);
    v446 -= v449 & 0x3FFFFFFFFFFFFFFCLL;
    v437 -= 8 * (v449 & 0x3FFFFFFFFFFFFFFCLL);
    if (v449 != (v449 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_773:
      do
      {
        v454 = *((_QWORD *)v437 - 1);
        v437 -= 8;
        *--v446 = v454;
      }
      while (v437 != v439);
    }
  }
  __p[0] = v446;
  __p[1] = v438;
  v561 = v447;
  if (v439)
    operator delete(v439);
LABEL_629:
  __p[1] = v438;
  if ((*(unsigned int (__cdecl **)())(*(_QWORD *)v562 + 24))())
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v562 + 40))((uint64_t)v562))
    {
      ((void (*)(uint64_t, double, double, double, double, float64x2_t))v572[11])((uint64_t)&v572, v455, v456, v457, v458, v459);
      (*(void (**)(uint64_t, double))(*(_QWORD *)v562 + 48))((uint64_t)v562, v460);
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v562 + 56))((uint64_t)v562);
    }
    v461 = (*(double (**)(uint64_t))(*(_QWORD *)v562 + 32))((uint64_t)v562);
    ((void (*)(uint64_t, double))v572[12])((uint64_t)&v572, v461);
  }
  v462 = v591;
  v463 = 8 * v591;
  v464 = (v463 + 31) & 0xFFFFFFFE0;
  __dst[0] = 0;
  __dst[1] = (void *)(v464 >> 3);
  *(_QWORD *)v646 = 0;
  malloc_type_posix_memalign((void **)v646, 0x20uLL, v464, 0x100BBD03uLL);
  v465 = *(double **)v646;
  __dst[0] = *(void **)v646;
  if (!*(_QWORD *)v646)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v537 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v537, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if (v462)
  {
    memcpy(*(void **)v646, (const void *)__src, v463);
    v465 = (double *)__dst[0];
  }
  v553 = v591;
  v466 = fabs(*v465);
  if (v591 != 1)
  {
    v467 = v465 + 1;
    v468 = 8 * v591 - 8;
    do
    {
      v469 = *v467++;
      v470 = fabs(v469);
      if (v466 < v470)
        v466 = v470;
      v468 -= 8;
    }
    while (v468);
  }
  if (v466 < v466 * *(double *)&v562[24])
  {
    if (v562[16])
    {
      v471 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
      std::ios_base::getloc((const std::ios_base *)((char *)v471 + *(_QWORD *)(*v471 - 24)));
      v472 = std::locale::use_facet((const std::locale *)v646, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v472->__vftable[2].~facet_0)(v472, 10);
      std::locale::~locale((std::locale *)v646);
      std::ostream::put();
      std::ostream::flush();
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
      v473 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v473, (uint64_t)"][", 2);
      if (v466 == 0.0)
        sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
      else
        std::ostream::operator<<();
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
      v533 = (_QWORD *)std::ostream::operator<<();
      v534 = sub_239458500(v533, (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v534 + *(_QWORD *)(*v534 - 24)));
      v535 = std::locale::use_facet((const std::locale *)v646, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v535->__vftable[2].~facet_0)(v535, 10);
      std::locale::~locale((std::locale *)v646);
      std::ostream::put();
      std::ostream::flush();
    }
    *(_DWORD *)&v555[56] = 1;
    goto LABEL_754;
  }
  v474 = v567;
  kdebug_trace();
  v550[0] = 0;
  v550[1] = 0;
  v551 = 0;
  v475 = v466;
  while (2)
  {
    v477 = *(_DWORD *)&v555[48];
    if (*(int *)&v555[48] < *(int *)&v562[12])
    {
      v478 = ++*(_DWORD *)&v555[48];
      if (((unsigned int (*)(uint64_t, uint64_t))v572[2])((uint64_t)&v572, (uint64_t)v550))
      {
        v528 = v562[16];
        if (v562[16])
        {
          v529 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
          std::ios_base::getloc((const std::ios_base *)((char *)v529 + *(_QWORD *)(*v529 - 24)));
          v530 = std::locale::use_facet((const std::locale *)v646, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v530->__vftable[2].~facet_0)(v530, 10);
          std::locale::~locale((std::locale *)v646);
          std::ostream::put();
          std::ostream::flush();
          v528 = 0;
        }
        goto LABEL_747;
      }
      ++*(_DWORD *)&v555[52];
      if (v551)
      {
        v479 = *(double *)v550[0] * *(double *)v550[0];
        if (v551 != 1)
        {
          v480 = (double *)((char *)v550[0] + 8);
          v481 = (v551 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
          if (v481 < 3)
          {
            do
            {
LABEL_659:
              v487 = *v480++;
              v479 = v479 + v487 * v487;
            }
            while (v480 != (double *)((char *)v550[0] + 8 * v551));
          }
          else
          {
            v482 = v481 + 1;
            v483 = (float64x2_t *)((char *)v550[0] + 24);
            v484 = v482 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v485 = vmulq_f64(v483[-1], v483[-1]);
              v486 = vmulq_f64(*v483, *v483);
              v479 = v479 + v485.f64[0] + v485.f64[1] + v486.f64[0] + v486.f64[1];
              v483 += 2;
              v484 -= 4;
            }
            while (v484);
            if (v482 != (v482 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v480 += v482 & 0x3FFFFFFFFFFFFFFCLL;
              goto LABEL_659;
            }
          }
        }
      }
      else
      {
        v479 = 0.0;
      }
      v488 = sqrt(v479);
      if (v488 < *(double *)&v562[32] * (v309 + *(double *)&v562[32]) && v477 >= *(_DWORD *)&v562[8])
      {
        if (v562[16])
        {
          v531 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
          std::ios_base::getloc((const std::ios_base *)((char *)v531 + *(_QWORD *)(*v531 - 24)));
          v532 = std::locale::use_facet((const std::locale *)v646, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v532->__vftable[2].~facet_0)(v532, 10);
          std::locale::~locale((std::locale *)v646);
          std::ostream::put();
          std::ostream::flush();
          (*(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)v562 + 64))((uint64_t)v562, v474, v488, v475, v466);
        }
        v528 = 2;
LABEL_747:
        *(_DWORD *)&v555[56] = v528;
        break;
      }
      ((void (*)(uint64_t, _QWORD *))v572[5])((uint64_t)&v572, v550);
      v490 = v591;
      sub_23945215C((uint64_t)__dst, v591);
      if ((_DWORD)v490)
        memcpy(__dst[0], (const void *)__src, 8 * v490);
      v553 = v591;
      if (v566)
        (*(void (**)(_BYTE *))(*(_QWORD *)v566 + 48))(v566);
      v491 = *(const void **)&v555[104];
      v492 = v556 - *(_QWORD *)&v555[104];
      if ((_QWORD)v556 == *(_QWORD *)&v555[104])
      {
        v494 = 0;
        v493 = 0;
      }
      else
      {
        if (v492 < 0)
          sub_2394189F8();
        v493 = (char *)operator new(v556 - *(_QWORD *)&v555[104]);
        v494 = &v493[8 * (v492 >> 3)];
        memcpy(v493, v491, v492);
      }
      v474 = sub_239CB71D0((uint64_t)&v572, (uint64_t)&v555[104]);
      v475 = fabs(*(double *)__dst[0]);
      if (v553 != 1)
      {
        v495 = (double *)((char *)__dst[0] + 8);
        v496 = 8 * v553 - 8;
        do
        {
          v497 = *v495++;
          v498 = fabs(v497);
          if (v475 < v498)
            v475 = v498;
          v496 -= 8;
        }
        while (v496);
      }
      if (v562[16])
        (*(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)v562 + 64))((uint64_t)v562, v474, v488, v475, v466);
      if (v474 == 0.0)
      {
        if (v562[16])
        {
          v499 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
          v500 = sub_239458500(v499, (uint64_t)"N.A.", 4);
          std::ios_base::getloc((const std::ios_base *)((char *)v500 + *(_QWORD *)(*v500 - 24)));
          v501 = std::locale::use_facet((const std::locale *)v646, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v501->__vftable[2].~facet_0)(v501, 10);
          std::locale::~locale((std::locale *)v646);
          std::ostream::put();
          goto LABEL_707;
        }
        goto LABEL_708;
      }
      if (vabdd_f64(v474, v567) < v474 * *(double *)&v562[40] && v477 >= *(_DWORD *)&v562[8])
      {
        if (v562[16])
        {
          sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
          v514 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v514 + *(_QWORD *)(*v514 - 24)));
          v515 = std::locale::use_facet((const std::locale *)v646, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v515->__vftable[2].~facet_0)(v515, 10);
          std::locale::~locale((std::locale *)v646);
          std::ostream::put();
LABEL_707:
          std::ostream::flush();
        }
LABEL_708:
        v567 = v474;
        v516 = 3;
LABEL_709:
        v476 = 0;
        *(_DWORD *)&v555[56] = v516;
        if (!v493)
        {
LABEL_649:
          if ((v476 & 1) == 0)
            break;
          continue;
        }
LABEL_648:
        operator delete(v493);
        goto LABEL_649;
      }
      if (DWORD2(v589))
      {
        memset(v646, 0, 20);
        ((void (*)(uint64_t, uint64_t))v572[19])((uint64_t)&v572, (uint64_t)v646);
        v503 = (*(BOOL (**)(double *, uint64_t, double **, double **, double))(*(_QWORD *)v562 + 80))((double *)v562, (uint64_t)v550, (double **)__dst, (double **)v646, v474);
        free(*(void **)v646);
        if (v503)
          goto LABEL_692;
LABEL_712:
        --*(_DWORD *)&v555[52];
        v517 = v578;
        if (v578 != v579)
        {
          do
          {
            if (*((_BYTE *)v517 + 44))
            {
              v517[7] = v517[22];
              v520 = *(_OWORD *)(v517 + 25);
              v521 = *(_OWORD *)(v517 + 29);
              *((_OWORD *)v517 + 6) = *(_OWORD *)(v517 + 27);
              *((_OWORD *)v517 + 7) = v521;
              v517[16] = v517[31];
              *((_OWORD *)v517 + 4) = *(_OWORD *)(v517 + 23);
              *((_OWORD *)v517 + 5) = v520;
              *(_OWORD *)(v517 + 17) = *((_OWORD *)v517 + 16);
              v517[19] = v517[34];
            }
            v522 = (_QWORD *)v517[1];
            if (v522)
            {
              do
              {
                v523 = v522;
                v522 = (_QWORD *)*v522;
              }
              while (v522);
            }
            else
            {
              do
              {
                v523 = (_QWORD *)v517[2];
                _ZF = *v523 == (_QWORD)v517;
                v517 = v523;
              }
              while (!_ZF);
            }
            v517 = v523;
          }
          while (v523 != v579);
        }
        v518 = v580;
        if (v580 != v581)
        {
          do
          {
            if (*((_BYTE *)v518 + 44))
              v518[7] = v518[10];
            v524 = (_QWORD *)v518[1];
            if (v524)
            {
              do
              {
                v525 = v524;
                v524 = (_QWORD *)*v524;
              }
              while (v524);
            }
            else
            {
              do
              {
                v525 = (_QWORD *)v518[2];
                _ZF = *v525 == (_QWORD)v518;
                v518 = v525;
              }
              while (!_ZF);
            }
            v518 = v525;
          }
          while (v525 != v581);
        }
        LOBYTE(v586[0]) = 0;
        *(_WORD *)((char *)v586 + 3) = 0;
        BYTE1(v586[0]) = BYTE2(v586[0]);
        sub_23945D3D0(&v555[104], v493, v494, (v494 - v493) >> 3);
        if ((*(unsigned int (__cdecl **)())(*(_QWORD *)v562 + 24))())
        {
          v519 = (*(double (**)(uint64_t))(*(_QWORD *)v562 + 32))((uint64_t)v562);
          ((void (*)(uint64_t, double))v572[12])((uint64_t)&v572, v519);
        }
      }
      else
      {
        if (!(*(BOOL (**)(double *, uint64_t, double **, double))(*(_QWORD *)v562 + 72))((double *)v562, (uint64_t)v550, (double **)__dst, v474))goto LABEL_712;
LABEL_692:
        if ((*(unsigned int (__cdecl **)())(*(_QWORD *)v562 + 24))())
        {
          v510 = (*(double (**)(uint64_t))(*(_QWORD *)v562 + 32))((uint64_t)v562);
          ((void (*)(uint64_t, double))v572[12])((uint64_t)&v572, v510);
        }
        if (v475 < v466 * *(double *)&v562[24] && v477 >= *(_DWORD *)&v562[8])
        {
          if (v562[16])
          {
            v526 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
            std::ios_base::getloc((const std::ios_base *)((char *)v526 + *(_QWORD *)(*v526 - 24)));
            v527 = std::locale::use_facet((const std::locale *)v646, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v527->__vftable[2].~facet_0)(v527, 10);
            std::locale::~locale((std::locale *)v646);
            std::ostream::put();
            std::ostream::flush();
            (*(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)v562 + 64))((uint64_t)v562, v474, v488, v475, v466);
          }
          v516 = 1;
          goto LABEL_709;
        }
        if (v478 < *(int *)&v562[12] && v562[48])
        {
          v504.i64[0] = *(_QWORD *)&v562[56];
          if (v562[64])
          {
            *(_QWORD *)v646 = &v572;
            *(_QWORD *)&v646[8] = *(_QWORD *)&v562[56];
            *(_QWORD *)&v646[16] = &v554;
            sub_239CB66FC((uint64_t)v646, v504, v505, v506, v507, v508, v509);
            v512 = 0x3DDB7CDFD9D7BDBBLL;
            v513 = 1.0e20;
            if (v554 > 0.0)
            {
              v512 = *(_QWORD *)&v554;
              v513 = 1.0 / (v554 * v554);
            }
            *(_QWORD *)&v573 = v512;
            *((double *)&v573 + 1) = v513;
            *(_QWORD *)&v574 = v512;
            *((double *)&v574 + 1) = v513;
            *(_QWORD *)&v575 = v512;
            *((double *)&v575 + 1) = v513;
            *(_QWORD *)&v576 = v512;
            *((double *)&v576 + 1) = v513;
            memset(v586, 0, 5);
          }
          else
          {
            sub_239CB6B70((uint64_t)&v572, v504, v505, v506, v507, v508, v509);
          }
          v567 = sub_239CB71D0((uint64_t)&v572, (uint64_t)&v555[104]);
        }
      }
      if (v478 < *(int *)&v562[12] && v564)
        (*(void (**)(_BYTE *))(*(_QWORD *)v564 + 48))(v564);
      v476 = 1;
      if (!v493)
        goto LABEL_649;
      goto LABEL_648;
    }
    break;
  }
  *(double *)&v555[72] = v567;
  if (v564)
    (*(void (**)(_BYTE *))(*(_QWORD *)v564 + 48))(v564);
  free(v550[0]);
LABEL_754:
  free(__dst[0]);
  v323 = v645;
  if (!v645)
LABEL_755:
    sub_2394172E0();
LABEL_440:
  (*(void (**)(std::string *))(v323->__r_.__value_.__r.__words[0] + 48))(v323);
  v324 = v645;
  if (v645 == &v644)
  {
    v325 = 4;
    v324 = &v644;
LABEL_446:
    (*(void (**)(void))(v324->__r_.__value_.__r.__words[0] + 8 * v325))();
  }
  else if (v645)
  {
    v325 = 5;
    goto LABEL_446;
  }
  kdebug_trace();
  sub_239C19F80(a1 + 400, (__int128 *)v555);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v557[1])
  {
    *(void **)&v558 = v557[1];
    operator delete(v557[1]);
  }
  if (*(_QWORD *)&v555[104])
  {
    *(_QWORD *)&v556 = *(_QWORD *)&v555[104];
    operator delete(*(void **)&v555[104]);
  }
  if (*(_QWORD *)&v555[80])
  {
    *(_QWORD *)&v555[88] = *(_QWORD *)&v555[80];
    operator delete(*(void **)&v555[80]);
  }
  if ((v555[47] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v555[24]);
    if ((v555[23] & 0x80000000) != 0)
      goto LABEL_487;
  }
  else
  {
    if ((v555[23] & 0x80000000) == 0)
      goto LABEL_457;
LABEL_487:
    operator delete(*(void **)v555);
  }
LABEL_457:
  v331 = v578;
  if (v578 != v579)
  {
    do
    {
      if (*((_BYTE *)v331 + 44))
      {
        v335 = v331[6];
        *(_QWORD *)v335 = v331[7];
        *(_OWORD *)(v335 + 8) = *((_OWORD *)v331 + 4);
        v336 = *((_OWORD *)v331 + 5);
        v337 = *((_OWORD *)v331 + 6);
        v338 = *((_OWORD *)v331 + 7);
        *(_QWORD *)(v335 + 72) = v331[16];
        *(_OWORD *)(v335 + 56) = v338;
        *(_OWORD *)(v335 + 40) = v337;
        *(_OWORD *)(v335 + 24) = v336;
        v339 = *(_OWORD *)(v331 + 17);
        *(_QWORD *)(v335 + 96) = v331[19];
        *(_OWORD *)(v335 + 80) = v339;
      }
      v340 = (_QWORD *)v331[1];
      if (v340)
      {
        do
        {
          v341 = v340;
          v340 = (_QWORD *)*v340;
        }
        while (v340);
      }
      else
      {
        do
        {
          v341 = (_QWORD *)v331[2];
          _ZF = *v341 == (_QWORD)v331;
          v331 = v341;
        }
        while (!_ZF);
      }
      v331 = v341;
    }
    while (v341 != v579);
  }
  v332 = v580;
  if (v580 != v581)
  {
    do
    {
      if (*((_BYTE *)v332 + 44))
        *(_QWORD *)v332[6] = v332[7];
      v342 = (_QWORD *)v332[1];
      if (v342)
      {
        do
        {
          v343 = v342;
          v342 = (_QWORD *)*v342;
        }
        while (v342);
      }
      else
      {
        do
        {
          v343 = (_QWORD *)v332[2];
          _ZF = *v343 == (_QWORD)v332;
          v332 = v343;
        }
        while (!_ZF);
      }
      v332 = v343;
    }
    while (v343 != v581);
  }
  if (*(_BYTE *)(a1 + 248))
  {
    sub_2394988CC((uint64_t)v555);
    *(_QWORD *)v646 = operator new(0x19uLL);
    *(_OWORD *)&v646[8] = xmmword_239EC7360;
    strcpy(*(char **)v646, "Pose Graph Optimization");
    sub_239C1A0F4(a1 + 400, &v555[16], (uint64_t)v646);
    if ((v646[23] & 0x80000000) != 0)
      operator delete(*(void **)v646);
    *(_QWORD *)v555 = *MEMORY[0x24BEDB7F0];
    v333 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)&v555[*(_QWORD *)(*(_QWORD *)v555 - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    *(_QWORD *)&v555[16] = v333;
    *(_QWORD *)&v555[24] = MEMORY[0x24BEDB848] + 16;
    if ((v555[111] & 0x80000000) != 0)
      operator delete(*(void **)&v555[88]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x23B83E250](v557);
  }
  *(_QWORD *)v562 = off_250AFEA50;
  if (v566 == v565)
  {
    v334 = 4;
LABEL_489:
    (*(void (**)(_QWORD *))(*v304 + 8 * v334))(v304);
  }
  else if (v566)
  {
    v334 = 5;
    v304 = v566;
    goto LABEL_489;
  }
  if (v564 == v563)
  {
    v344 = 4;
LABEL_494:
    (*(void (**)(_QWORD *))(*v302 + 8 * v344))(v302);
  }
  else if (v564)
  {
    v344 = 5;
    v302 = v564;
    goto LABEL_494;
  }
  v300 = 1;
LABEL_496:
  v572 = off_250AFCA50;
  if (v636 != 2)
    sub_239A23A84((uint64_t)v637);
  sub_239CB662C((uint64_t)&v572);
  return v300;
}

void sub_239CB31B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p)
{
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  std::locale::~locale((std::locale *)(v49 - 200));
  free(a42);
  free(a45);
  v50 = *(_QWORD *)(v49 - 208);
  if (!v50)
    sub_2394172E0();
  (*(void (**)(uint64_t))(*(_QWORD *)v50 + 48))(v50);
  v51 = *(_QWORD **)(v49 - 208);
  if (v51 == (_QWORD *)(v49 - 232))
  {
    v52 = 4;
    v51 = (_QWORD *)(v49 - 232);
  }
  else
  {
    if (!v51)
    {
LABEL_8:
      sub_239C0BE14((uint64_t)&__p);
      sub_239C30284();
      sub_239C1AAB0(&STACK[0x260]);
      JUMPOUT(0x239CB354CLL);
    }
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
  goto LABEL_8;
}

void sub_239CB3464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_239A4D7C0((uint64_t)&STACK[0x260]);
  sub_239A4D7C0((uint64_t)&a33);
  sub_239A4D7C0(v33 - 200);
  JUMPOUT(0x239CB354CLL);
}

void sub_239CB3548(_Unwind_Exception *a1)
{
  sub_239CB66B8((uint64_t)&STACK[0x328]);
  _Unwind_Resume(a1);
}

uint64_t sub_239CB355C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &unk_250AFCBC0;
  sub_239CDFABC((uint64_t)(a1 + 88));
  v2 = (void *)a1[85];
  if (v2)
  {
    a1[86] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[82];
  if (v3)
  {
    a1[83] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[79];
  if (v4)
  {
    a1[80] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[76];
  if (v5)
  {
    a1[77] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[71];
  if (v6)
  {
    a1[72] = v6;
    operator delete(v6);
  }
  return sub_239CDFB98((uint64_t)a1);
}

uint64_t sub_239CB35E0(uint64_t a1, int *a2)
{
  unsigned int v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  BOOL v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  unsigned int v54;

  v3 = *a2;
  v4 = (uint64_t **)(a1 + 16);
  v5 = *(uint64_t **)(a1 + 16);
  if (!v5)
    goto LABEL_13;
  v6 = (uint64_t **)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  do
  {
    v8 = *(_DWORD *)(v7 + 32);
    v9 = v8 >= v3;
    if (v8 >= v3)
      v10 = (uint64_t *)v7;
    else
      v10 = (uint64_t *)(v7 + 8);
    if (v9)
      v6 = (uint64_t **)v7;
    v7 = *v10;
  }
  while (*v10);
  if (v6 == v4)
  {
LABEL_13:
    v12 = *((_BYTE *)a2 + 4) == 0;
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 2);
    v16 = a2 + 6;
    v17 = (__int128 *)(a2 + 24);
    v6 = (uint64_t **)(a1 + 16);
  }
  else
  {
    if (*((_DWORD *)v6 + 8) == v3)
      return 0;
    v12 = *((_BYTE *)a2 + 4) == 0;
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 2);
    v16 = a2 + 6;
    v17 = (__int128 *)(a2 + 24);
    if (v4 != v6)
    {
      v21 = *((_DWORD *)v6 + 8);
      if (v3 >= v21)
      {
        if (v21 >= v3)
          goto LABEL_53;
        v23 = v6 + 1;
        v22 = v6[1];
        if (v22)
        {
          do
          {
            v23 = (uint64_t **)v22;
            v22 = (uint64_t *)*v22;
            v6 = v23;
            v24 = v23;
          }
          while (v22);
        }
        else
        {
          v24 = v6;
          do
          {
            v28 = (uint64_t *)v24;
            v24 = (uint64_t **)v24[2];
          }
          while (*v24 != v28);
        }
        if (v24 != v4 && v3 >= *((_DWORD *)v24 + 8))
        {
          do
          {
            while (1)
            {
              v6 = (uint64_t **)v5;
              v29 = *((_DWORD *)v5 + 8);
              if (v3 >= v29)
                break;
              v5 = *v6;
              v4 = v6;
              if (!*v6)
                goto LABEL_51;
            }
            if (v29 >= v3)
              break;
            v4 = v6 + 1;
            v5 = v6[1];
          }
          while (v5);
          goto LABEL_40;
        }
        goto LABEL_52;
      }
    }
  }
  v18 = *v6;
  v19 = v6;
  if (*(uint64_t ***)(a1 + 8) == v6)
    goto LABEL_28;
  if (v18)
  {
    v20 = *v6;
    do
    {
      v19 = (uint64_t **)v20;
      v20 = (uint64_t *)v20[1];
    }
    while (v20);
  }
  else
  {
    v25 = v6;
    do
    {
      v19 = (uint64_t **)v25[2];
      v26 = *v19 == (uint64_t *)v25;
      v25 = v19;
    }
    while (v26);
  }
  if (*((_DWORD *)v19 + 8) < v3)
  {
LABEL_28:
    if (v18)
      v23 = v19 + 1;
    else
      v23 = v6;
    if (v18)
      v6 = v19;
  }
  else
  {
    if (!v5)
    {
      v6 = (uint64_t **)(a1 + 16);
LABEL_40:
      v23 = v4;
      goto LABEL_52;
    }
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v27 = *((_DWORD *)v5 + 8);
        if (v3 < v27)
          break;
        if (v27 < v3)
        {
          v4 = v6 + 1;
          v5 = v6[1];
          if (v5)
            continue;
        }
        goto LABEL_40;
      }
      v5 = *v6;
      v4 = v6;
    }
    while (*v6);
LABEL_51:
    v23 = v6;
  }
LABEL_52:
  if (!*v23)
  {
    v30 = (char *)operator new(0x118uLL);
    *((_DWORD *)v30 + 8) = v3;
    *((_QWORD *)v30 + 5) = v13;
    *((_QWORD *)v30 + 6) = v14;
    *((_QWORD *)v30 + 7) = v15;
    *((_OWORD *)v30 + 4) = *(_OWORD *)v16;
    v32 = *((_OWORD *)v16 + 2);
    v31 = *((_OWORD *)v16 + 3);
    v33 = *((_OWORD *)v16 + 1);
    *((_QWORD *)v30 + 16) = *((_QWORD *)v16 + 8);
    *((_OWORD *)v30 + 6) = v32;
    *((_OWORD *)v30 + 7) = v31;
    *((_OWORD *)v30 + 5) = v33;
    v34 = *v17;
    *((_QWORD *)v30 + 19) = *((_QWORD *)v17 + 2);
    *(_OWORD *)(v30 + 136) = v34;
    *((_DWORD *)v30 + 40) = -1;
    v30[164] = 1;
    *((_DWORD *)v30 + 42) = 0;
    *((_QWORD *)v30 + 22) = 0x3FF0000000000000;
    *((_QWORD *)v30 + 31) = 0x3FF0000000000000;
    *(_OWORD *)(v30 + 184) = xmmword_239F13A00;
    *(_OWORD *)(v30 + 200) = *(_OWORD *)algn_239F13A10;
    *(_OWORD *)(v30 + 216) = xmmword_239F13A20;
    *(_OWORD *)(v30 + 232) = *(_OWORD *)dbl_239F13A30;
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    *((_QWORD *)v30 + 2) = v6;
    *v23 = (uint64_t *)v30;
    v35 = **(_QWORD **)(a1 + 8);
    if (v35)
    {
      *(_QWORD *)(a1 + 8) = v35;
      v36 = *v23;
    }
    else
    {
      v36 = (uint64_t *)v30;
    }
    sub_2394213B8(*(uint64_t **)(a1 + 16), v36);
    ++*(_QWORD *)(a1 + 24);
    if (v12)
      goto LABEL_81;
LABEL_59:
    v38 = *(char **)(a1 + 280);
    v37 = *(_QWORD *)(a1 + 288);
    if ((unint64_t)v38 >= v37)
    {
      v40 = *(char **)(a1 + 272);
      v41 = (v38 - v40) >> 2;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62)
        sub_2394189F8();
      v43 = v37 - (_QWORD)v40;
      if (v43 >> 1 > v42)
        v42 = v43 >> 1;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
        v44 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        if (v44 >> 62)
          sub_239418A80();
        v45 = operator new(4 * v44);
      }
      else
      {
        v45 = 0;
      }
      v46 = (unsigned int *)&v45[4 * v41];
      v47 = &v45[4 * v44];
      *v46 = v3;
      v39 = v46 + 1;
      if (v38 != v40)
      {
        v48 = v38 - v40 - 4;
        if (v48 < 0x2C)
          goto LABEL_86;
        if ((unint64_t)(v40 - v45) < 0x20)
          goto LABEL_86;
        v49 = (v48 >> 2) + 1;
        v50 = &v45[4 * v41 - 16];
        v51 = v38 - 16;
        v52 = v49 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v53 = *(_OWORD *)v51;
          *(v50 - 1) = *((_OWORD *)v51 - 1);
          *v50 = v53;
          v50 -= 2;
          v51 -= 32;
          v52 -= 8;
        }
        while (v52);
        v46 -= v49 & 0x7FFFFFFFFFFFFFF8;
        v38 -= 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
        if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_86:
          do
          {
            v54 = *((_DWORD *)v38 - 1);
            v38 -= 4;
            *--v46 = v54;
          }
          while (v38 != v40);
        }
      }
      *(_QWORD *)(a1 + 272) = v46;
      *(_QWORD *)(a1 + 280) = v39;
      *(_QWORD *)(a1 + 288) = v47;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *(_DWORD *)v38 = v3;
      v39 = v38 + 4;
    }
    *(_QWORD *)(a1 + 280) = v39;
    goto LABEL_81;
  }
LABEL_53:
  if (!v12)
    goto LABEL_59;
LABEL_81:
  *(_BYTE *)(a1 + 170) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  return 1;
}

void sub_239CB3A08(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v2 = *(char **)a1;
  if (0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xF83E0F83E0F83FLL)
      sub_2394189F8();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 264 * a2;
    v6 = (char *)operator new(264 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *(_QWORD *)&v8[v9 - 264] = *(_QWORD *)&v4[v9 - 264];
        *((_QWORD *)v10 - 32) = *(_QWORD *)&v4[v9 - 256];
        *((_QWORD *)v10 - 31) = *(_QWORD *)&v4[v9 - 248];
        *((_OWORD *)v10 - 15) = *(_OWORD *)&v4[v9 - 240];
        v12 = *(_OWORD *)&v4[v9 - 224];
        v13 = *(_OWORD *)&v4[v9 - 208];
        v14 = *(_OWORD *)&v4[v9 - 192];
        *((_QWORD *)v10 - 22) = *(_QWORD *)&v4[v9 - 176];
        *((_OWORD *)v10 - 13) = v13;
        *((_OWORD *)v10 - 12) = v14;
        *((_OWORD *)v10 - 14) = v12;
        v15 = *(_OWORD *)&v4[v9 - 168];
        *((_QWORD *)v10 - 19) = *(_QWORD *)&v4[v9 - 152];
        *(_OWORD *)(v10 - 168) = v15;
        *((_OWORD *)v10 - 9) = *(_OWORD *)&v4[v9 - 144];
        v16 = *(_OWORD *)&v4[v9 - 48];
        v18 = *(_OWORD *)&v4[v9 - 96];
        v17 = *(_OWORD *)&v4[v9 - 80];
        *((_OWORD *)v10 - 4) = *(_OWORD *)&v4[v9 - 64];
        *((_OWORD *)v10 - 3) = v16;
        *((_OWORD *)v10 - 6) = v18;
        *((_OWORD *)v10 - 5) = v17;
        v19 = *(_OWORD *)&v4[v9 - 112];
        *((_OWORD *)v10 - 8) = *(_OWORD *)&v4[v9 - 128];
        *((_OWORD *)v10 - 7) = v19;
        *((_QWORD *)v10 - 4) = *(_QWORD *)&v4[v9 - 32];
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *(v10 - 8) = v4[v9 - 8];
        v9 -= 264;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v20 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v20 != v2)
      {
        v21 = (std::__shared_weak_count *)*((_QWORD *)v20 - 2);
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v20 -= 264;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_239CB3BBC(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  unsigned int v48;

  v3 = *a2;
  v5 = (_QWORD *)(a1 + 40);
  v4 = *(_QWORD **)(a1 + 40);
  if (!v4)
    goto LABEL_13;
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  do
  {
    v8 = *(_DWORD *)(v7 + 32);
    v9 = v8 >= v3;
    if (v8 >= v3)
      v10 = (uint64_t *)v7;
    else
      v10 = (uint64_t *)(v7 + 8);
    if (v9)
      v6 = (_QWORD *)v7;
    v7 = *v10;
  }
  while (*v10);
  if (v6 == v5)
  {
LABEL_13:
    v12 = *((_BYTE *)a2 + 4) == 0;
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 2);
    v6 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (*((_DWORD *)v6 + 8) == v3)
      return 0;
    v12 = *((_BYTE *)a2 + 4) == 0;
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 2);
    if (v5 != v6)
    {
      v19 = *((_DWORD *)v6 + 8);
      if (v3 >= v19)
      {
        if (v19 >= v3)
          goto LABEL_34;
        v20 = v6 + 1;
        v21 = (_QWORD *)v6[1];
        if (v21)
        {
          do
          {
            v20 = v21;
            v21 = (_QWORD *)*v21;
            v6 = v20;
            v22 = v20;
          }
          while (v21);
        }
        else
        {
          v22 = v6;
          do
          {
            v26 = v22;
            v22 = (_QWORD *)v22[2];
          }
          while ((_QWORD *)*v22 != v26);
        }
        if (v22 != v5 && v3 >= *((_DWORD *)v22 + 8))
        {
          while (1)
          {
            while (1)
            {
              v6 = v4;
              v27 = *((_DWORD *)v4 + 8);
              if (v3 >= v27)
                break;
              v4 = (_QWORD *)*v6;
              v5 = v6;
              if (!*v6)
                goto LABEL_53;
            }
            if (v27 >= v3)
              break;
            v5 = v6 + 1;
            v4 = (_QWORD *)v6[1];
            if (!v4)
              goto LABEL_54;
          }
LABEL_81:
          v20 = v5;
        }
        goto LABEL_33;
      }
    }
  }
  v16 = (_QWORD *)*v6;
  v17 = v6;
  if (*(_QWORD **)(a1 + 32) == v6)
    goto LABEL_28;
  if (v16)
  {
    v18 = (_QWORD *)*v6;
    do
    {
      v17 = v18;
      v18 = (_QWORD *)v18[1];
    }
    while (v18);
  }
  else
  {
    v23 = v6;
    do
    {
      v17 = (_QWORD *)v23[2];
      v24 = *v17 == (_QWORD)v23;
      v23 = v17;
    }
    while (v24);
  }
  if (*((_DWORD *)v17 + 8) < v3)
  {
LABEL_28:
    v24 = v16 == 0;
    if (v16)
      v20 = v17 + 1;
    else
      v20 = v6;
    if (!v24)
      v6 = v17;
  }
  else
  {
    if (v4)
    {
      do
      {
        while (1)
        {
          v6 = v4;
          v25 = *((_DWORD *)v4 + 8);
          if (v3 < v25)
            break;
          if (v25 >= v3)
            goto LABEL_81;
          v5 = v6 + 1;
          v4 = (_QWORD *)v6[1];
          if (!v4)
            goto LABEL_54;
        }
        v4 = (_QWORD *)*v6;
        v5 = v6;
      }
      while (*v6);
LABEL_53:
      v5 = v6;
LABEL_54:
      v28 = operator new(0x58uLL);
      v28[8] = v3;
      *((_QWORD *)v28 + 5) = v13;
      *((_QWORD *)v28 + 6) = v14;
      *((_QWORD *)v28 + 7) = v15;
      v28[16] = -1;
      *((_BYTE *)v28 + 68) = 1;
      v28[18] = 0;
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = v6;
      *v5 = v28;
      v29 = **(_QWORD **)(a1 + 32);
      if (v29)
      {
        *(_QWORD *)(a1 + 32) = v29;
        v30 = (uint64_t *)*v5;
      }
      else
      {
        v30 = (uint64_t *)v28;
      }
      sub_2394213B8(*(uint64_t **)(a1 + 40), v30);
      ++*(_QWORD *)(a1 + 48);
      if (v12)
        goto LABEL_80;
LABEL_58:
      v32 = *(char **)(a1 + 304);
      v31 = *(_QWORD *)(a1 + 312);
      if ((unint64_t)v32 >= v31)
      {
        v34 = *(char **)(a1 + 296);
        v35 = (v32 - v34) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          sub_2394189F8();
        v37 = v31 - (_QWORD)v34;
        if (v37 >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          if (v38 >> 62)
            sub_239418A80();
          v39 = operator new(4 * v38);
        }
        else
        {
          v39 = 0;
        }
        v40 = (unsigned int *)&v39[4 * v35];
        v41 = &v39[4 * v38];
        *v40 = v3;
        v33 = v40 + 1;
        if (v32 != v34)
        {
          v42 = v32 - v34 - 4;
          if (v42 < 0x2C)
            goto LABEL_86;
          if ((unint64_t)(v34 - v39) < 0x20)
            goto LABEL_86;
          v43 = (v42 >> 2) + 1;
          v44 = &v39[4 * v35 - 16];
          v45 = v32 - 16;
          v46 = v43 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *v44 = v47;
            v44 -= 2;
            v45 -= 32;
            v46 -= 8;
          }
          while (v46);
          v40 -= v43 & 0x7FFFFFFFFFFFFFF8;
          v32 -= 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
          if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_86:
            do
            {
              v48 = *((_DWORD *)v32 - 1);
              v32 -= 4;
              *--v40 = v48;
            }
            while (v32 != v34);
          }
        }
        *(_QWORD *)(a1 + 296) = v40;
        *(_QWORD *)(a1 + 304) = v33;
        *(_QWORD *)(a1 + 312) = v41;
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_DWORD *)v32 = v3;
        v33 = v32 + 4;
      }
      *(_QWORD *)(a1 + 304) = v33;
      goto LABEL_80;
    }
    v6 = (_QWORD *)(a1 + 40);
    v20 = (_QWORD *)(a1 + 40);
  }
LABEL_33:
  v5 = v20;
  if (!*v20)
    goto LABEL_54;
LABEL_34:
  if (!v12)
    goto LABEL_58;
LABEL_80:
  *(_BYTE *)(a1 + 170) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  return 1;
}

uint64_t sub_239CB3F70(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v39;
  std::__shared_weak_count *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  char *v129;
  char *v130;
  char *v131;

  v8 = *a2;
  v9 = *(char **)(a1 + 56);
  v10 = *(char **)(a1 + 64);
  if (v9 == v10)
  {
    v10 = *(char **)(a1 + 56);
  }
  else if (*((_QWORD *)v10 - 33) >= v8)
  {
    v11 = 0xF83E0F83E0F83E1 * ((v10 - v9) >> 3);
    do
    {
      v12 = v11 >> 1;
      v13 = (unint64_t *)&v9[264 * (v11 >> 1)];
      v14 = *v13;
      v15 = (char *)(v13 + 33);
      v11 += ~(v11 >> 1);
      if (v14 < v8)
        v9 = v15;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  v17 = *a2;
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v17 = *a2;
  }
  v112 = v17;
  v113 = a2[1];
  v116 = *((_OWORD *)a2 + 3);
  v117 = *((_OWORD *)a2 + 4);
  v114 = *((_OWORD *)a2 + 1);
  v115 = *((_OWORD *)a2 + 2);
  v119 = *(_OWORD *)(a2 + 11);
  v118 = a2[10];
  v120 = a2[13];
  *(_QWORD *)&v128 = a4;
  *((_QWORD *)&v128 + 1) = a5;
  if (a5)
  {
    v20 = (unint64_t *)&a5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  v23 = a1 + 16;
  v24 = *(_QWORD *)(a1 + 16);
  if (!v24)
    goto LABEL_43;
  v25 = *a3;
  v26 = a1 + 16;
  v27 = *(_QWORD *)(a1 + 16);
  do
  {
    v28 = *(_DWORD *)(v27 + 32);
    v29 = v28 >= v25;
    if (v28 >= v25)
      v30 = (uint64_t *)v27;
    else
      v30 = (uint64_t *)(v27 + 8);
    if (v29)
      v26 = v27;
    v27 = *v30;
  }
  while (*v30);
  if (v26 == v23 || *(_DWORD *)(v26 + 32) > v25)
    goto LABEL_43;
  ++*(_DWORD *)(v26 + 168);
  v31 = a3[1];
  v32 = a1 + 16;
  do
  {
    v33 = *(_DWORD *)(v24 + 32);
    v34 = v33 >= v31;
    if (v33 >= v31)
      v35 = (uint64_t *)v24;
    else
      v35 = (uint64_t *)(v24 + 8);
    if (v34)
      v32 = v24;
    v24 = *v35;
  }
  while (*v35);
  if (v32 != v23
    && *(_DWORD *)(v32 + 32) <= v31
    && ((++*(_DWORD *)(v32 + 168), *(_BYTE *)(v26 + 44)) || *(_BYTE *)(v32 + 44)))
  {
    v39 = *(char **)(a1 + 64);
    *(_QWORD *)&v121 = v26 + 40;
    *((_QWORD *)&v121 + 1) = v32 + 40;
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
    if (v39 == v10 || *(_QWORD *)v10 != v8)
    {
      v41 = *(_QWORD *)(a1 + 72);
      v42 = *(char **)(a1 + 56);
      v43 = v10 - v42;
      v110 = v42;
      v111 = 0xF83E0F83E0F83E1 * ((v10 - v42) >> 3);
      if ((unint64_t)v39 >= v41)
      {
        v72 = 0xF83E0F83E0F83E1 * ((v39 - v42) >> 3) + 1;
        if (v72 > 0xF83E0F83E0F83ELL)
          sub_2394189F8();
        v73 = 0xF83E0F83E0F83E1 * ((uint64_t)(v41 - (_QWORD)v42) >> 3);
        v74 = 0x1F07C1F07C1F07C2 * ((uint64_t)(v41 - (_QWORD)v42) >> 3);
        if (v74 > v72)
          v72 = v74;
        if (v73 >= 0x7C1F07C1F07C1FLL)
          v75 = 0xF83E0F83E0F83ELL;
        else
          v75 = v72;
        if (v75)
        {
          if (v75 > 0xF83E0F83E0F83ELL)
            sub_239418A80();
          v76 = (char *)operator new(264 * v75);
        }
        else
        {
          v76 = 0;
        }
        v78 = &v76[264 * v111];
        v131 = &v76[264 * v75];
        if (v111 == v75)
        {
          if (v43 < 1)
          {
            if (v10 == v110)
              v80 = 1;
            else
              v80 = 2 * v111;
            if (v80 > 0xF83E0F83E0F83ELL)
              sub_239418A80();
            v81 = (char *)operator new(264 * v80);
            v78 = &v81[264 * (v80 >> 2)];
            v131 = &v81[264 * v80];
            if (v76)
              operator delete(v76);
          }
          else
          {
            v79 = v111 + 2;
            if (v111 >= -1)
              v79 = v111 + 1;
            v78 -= 264 * (v79 >> 1);
          }
        }
        *(_QWORD *)v78 = v8;
        *((_QWORD *)v78 + 1) = v112;
        *((_QWORD *)v78 + 2) = v113;
        *(_OWORD *)(v78 + 40) = v115;
        *(_OWORD *)(v78 + 56) = v116;
        *(_OWORD *)(v78 + 72) = v117;
        *((_QWORD *)v78 + 11) = v118;
        *(_OWORD *)(v78 + 24) = v114;
        *((_QWORD *)v78 + 14) = v120;
        *((_OWORD *)v78 + 6) = v119;
        *(_OWORD *)(v78 + 120) = v121;
        *(_OWORD *)(v78 + 152) = v123;
        *(_OWORD *)(v78 + 136) = v122;
        *(_OWORD *)(v78 + 216) = v127;
        *(_OWORD *)(v78 + 200) = v126;
        *(_OWORD *)(v78 + 184) = v125;
        *(_OWORD *)(v78 + 168) = v124;
        *((_QWORD *)v78 + 29) = 0xBFF0000000000000;
        *((_OWORD *)v78 + 15) = v128;
        v78[256] = 0;
        v82 = v78 + 264;
        v129 = v78 + 264;
        v83 = *(char **)(a1 + 56);
        if (v83 != v10)
        {
          v84 = 0;
          do
          {
            v85 = &v78[v84];
            v86 = &v10[v84];
            *(_QWORD *)&v78[v84 - 264] = *(_QWORD *)&v10[v84 - 264];
            *((_QWORD *)v85 - 32) = *(_QWORD *)&v10[v84 - 256];
            *((_QWORD *)v85 - 31) = *(_QWORD *)&v10[v84 - 248];
            *((_OWORD *)v85 - 15) = *(_OWORD *)&v10[v84 - 240];
            v87 = *(_OWORD *)&v10[v84 - 224];
            v88 = *(_OWORD *)&v10[v84 - 208];
            v89 = *(_OWORD *)&v10[v84 - 192];
            *((_QWORD *)v85 - 22) = *(_QWORD *)&v10[v84 - 176];
            *((_OWORD *)v85 - 13) = v88;
            *((_OWORD *)v85 - 12) = v89;
            *((_OWORD *)v85 - 14) = v87;
            v90 = *(_OWORD *)&v10[v84 - 168];
            *((_QWORD *)v85 - 19) = *(_QWORD *)&v10[v84 - 152];
            *(_OWORD *)(v85 - 168) = v90;
            *((_OWORD *)v85 - 9) = *(_OWORD *)&v10[v84 - 144];
            v91 = *(_OWORD *)&v10[v84 - 48];
            v93 = *(_OWORD *)&v10[v84 - 96];
            v92 = *(_OWORD *)&v10[v84 - 80];
            *((_OWORD *)v85 - 4) = *(_OWORD *)&v10[v84 - 64];
            *((_OWORD *)v85 - 3) = v91;
            *((_OWORD *)v85 - 6) = v93;
            *((_OWORD *)v85 - 5) = v92;
            v94 = *(_OWORD *)&v10[v84 - 112];
            *((_OWORD *)v85 - 8) = *(_OWORD *)&v10[v84 - 128];
            *((_OWORD *)v85 - 7) = v94;
            *((_QWORD *)v85 - 4) = *(_QWORD *)&v10[v84 - 32];
            *(_OWORD *)(v85 - 24) = *(_OWORD *)&v10[v84 - 24];
            *((_QWORD *)v86 - 3) = 0;
            *((_QWORD *)v86 - 2) = 0;
            *(v85 - 8) = v10[v84 - 8];
            v84 -= 264;
          }
          while (&v10[v84] != v83);
          v78 += v84;
          v82 = v129;
        }
        v95 = *(char **)(a1 + 64);
        if (v95 != v10)
        {
          do
          {
            *(_QWORD *)v82 = *(_QWORD *)v10;
            *((_QWORD *)v82 + 1) = *((_QWORD *)v10 + 1);
            *((_QWORD *)v82 + 2) = *((_QWORD *)v10 + 2);
            *(_OWORD *)(v82 + 24) = *(_OWORD *)(v10 + 24);
            v96 = *(_OWORD *)(v10 + 40);
            v97 = *(_OWORD *)(v10 + 56);
            v98 = *(_OWORD *)(v10 + 72);
            *((_QWORD *)v82 + 11) = *((_QWORD *)v10 + 11);
            *(_OWORD *)(v82 + 72) = v98;
            *(_OWORD *)(v82 + 56) = v97;
            *(_OWORD *)(v82 + 40) = v96;
            v99 = *((_OWORD *)v10 + 6);
            *((_QWORD *)v82 + 14) = *((_QWORD *)v10 + 14);
            *((_OWORD *)v82 + 6) = v99;
            *(_OWORD *)(v82 + 120) = *(_OWORD *)(v10 + 120);
            v100 = *(_OWORD *)(v10 + 184);
            v101 = *(_OWORD *)(v10 + 200);
            v102 = *(_OWORD *)(v10 + 216);
            *(_OWORD *)(v82 + 168) = *(_OWORD *)(v10 + 168);
            *(_OWORD *)(v82 + 216) = v102;
            *(_OWORD *)(v82 + 200) = v101;
            *(_OWORD *)(v82 + 184) = v100;
            v103 = *(_OWORD *)(v10 + 136);
            *(_OWORD *)(v82 + 152) = *(_OWORD *)(v10 + 152);
            *(_OWORD *)(v82 + 136) = v103;
            *((_QWORD *)v82 + 29) = *((_QWORD *)v10 + 29);
            *((_OWORD *)v82 + 15) = *((_OWORD *)v10 + 15);
            *((_QWORD *)v10 + 30) = 0;
            *((_QWORD *)v10 + 31) = 0;
            v82[256] = v10[256];
            v82 += 264;
            v10 += 264;
          }
          while (v10 != v95);
          v10 = *(char **)(a1 + 64);
        }
        v104 = *(char **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v78;
        *(_QWORD *)(a1 + 64) = v82;
        *(_QWORD *)(a1 + 72) = v131;
        if (v10 != v104)
        {
          do
          {
            v130 = v10 - 264;
            v105 = (std::__shared_weak_count *)*((_QWORD *)v10 - 2);
            if (v105)
            {
              v106 = (unint64_t *)&v105->__shared_owners_;
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
            v10 = v130;
          }
          while (v130 != v104);
          v10 = v104;
        }
        if (v10)
          operator delete(v10);
      }
      else if (v10 == v39)
      {
        *(_QWORD *)v39 = v8;
        v77 = &v42[8 * ((v10 - v42) >> 3)];
        *((_QWORD *)v77 + 1) = v112;
        *((_QWORD *)v77 + 2) = v113;
        *(_OWORD *)(v77 + 24) = v114;
        *((_QWORD *)v77 + 11) = v118;
        *(_OWORD *)(v77 + 72) = v117;
        *(_OWORD *)(v77 + 56) = v116;
        *(_OWORD *)(v77 + 40) = v115;
        *((_QWORD *)v77 + 14) = v120;
        *((_OWORD *)v77 + 6) = v119;
        *(_OWORD *)(v77 + 120) = v121;
        *(_OWORD *)(v77 + 136) = v122;
        *(_OWORD *)(v77 + 152) = v123;
        *(_OWORD *)(v77 + 216) = v127;
        *(_OWORD *)(v77 + 200) = v126;
        *(_OWORD *)(v77 + 184) = v125;
        *(_OWORD *)(v77 + 168) = v124;
        *((_QWORD *)v77 + 29) = 0xBFF0000000000000;
        *((_OWORD *)v77 + 15) = v128;
        v77[256] = 0;
        *(_QWORD *)(a1 + 64) = v39 + 264;
      }
      else
      {
        v44 = v39 - 264;
        v45 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v39 >= 0x108)
        {
          v46 = v39 - 264;
          v45 = *(_QWORD *)(a1 + 64);
          do
          {
            *(_QWORD *)v45 = *(_QWORD *)v46;
            *(_QWORD *)(v45 + 8) = *((_QWORD *)v46 + 1);
            *(_QWORD *)(v45 + 16) = *((_QWORD *)v46 + 2);
            *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
            v47 = *(_OWORD *)(v46 + 40);
            v48 = *(_OWORD *)(v46 + 56);
            v49 = *(_OWORD *)(v46 + 72);
            *(_QWORD *)(v45 + 88) = *((_QWORD *)v46 + 11);
            *(_OWORD *)(v45 + 72) = v49;
            *(_OWORD *)(v45 + 56) = v48;
            *(_OWORD *)(v45 + 40) = v47;
            v50 = *((_OWORD *)v46 + 6);
            *(_QWORD *)(v45 + 112) = *((_QWORD *)v46 + 14);
            *(_OWORD *)(v45 + 96) = v50;
            *(_OWORD *)(v45 + 120) = *(_OWORD *)(v46 + 120);
            v51 = *(_OWORD *)(v46 + 184);
            v52 = *(_OWORD *)(v46 + 200);
            v53 = *(_OWORD *)(v46 + 216);
            *(_OWORD *)(v45 + 168) = *(_OWORD *)(v46 + 168);
            *(_OWORD *)(v45 + 216) = v53;
            *(_OWORD *)(v45 + 200) = v52;
            *(_OWORD *)(v45 + 184) = v51;
            v54 = *(_OWORD *)(v46 + 136);
            *(_OWORD *)(v45 + 152) = *(_OWORD *)(v46 + 152);
            *(_OWORD *)(v45 + 136) = v54;
            *(_QWORD *)(v45 + 232) = *((_QWORD *)v46 + 29);
            *(_OWORD *)(v45 + 240) = *((_OWORD *)v46 + 15);
            *((_QWORD *)v46 + 30) = 0;
            *((_QWORD *)v46 + 31) = 0;
            *(_BYTE *)(v45 + 256) = v46[256];
            v45 += 264;
            v46 += 264;
          }
          while (v46 < v39);
        }
        *(_QWORD *)(a1 + 64) = v45;
        if (v39 != v10 + 264)
        {
          do
          {
            v59 = v44 - 264;
            *((_QWORD *)v39 - 33) = *((_QWORD *)v44 - 33);
            *((_QWORD *)v39 - 32) = *((_QWORD *)v44 - 32);
            *((_QWORD *)v39 - 31) = *((_QWORD *)v44 - 31);
            *((_OWORD *)v39 - 15) = *((_OWORD *)v44 - 15);
            v60 = *((_OWORD *)v44 - 14);
            v61 = *((_OWORD *)v44 - 13);
            v62 = *((_OWORD *)v44 - 12);
            *((_QWORD *)v39 - 22) = *((_QWORD *)v44 - 22);
            *((_OWORD *)v39 - 13) = v61;
            *((_OWORD *)v39 - 12) = v62;
            *((_OWORD *)v39 - 14) = v60;
            v63 = *(_OWORD *)(v44 - 168);
            *((_QWORD *)v39 - 19) = *((_QWORD *)v44 - 19);
            *(_OWORD *)(v39 - 168) = v63;
            *((_QWORD *)v39 - 18) = *((_QWORD *)v44 - 18);
            *((_QWORD *)v39 - 17) = *((_QWORD *)v44 - 17);
            v64 = *((_OWORD *)v44 - 7);
            *((_OWORD *)v39 - 8) = *((_OWORD *)v44 - 8);
            *((_OWORD *)v39 - 7) = v64;
            v65 = *((_OWORD *)v44 - 6);
            v66 = *((_OWORD *)v44 - 5);
            v67 = *((_OWORD *)v44 - 3);
            *((_OWORD *)v39 - 4) = *((_OWORD *)v44 - 4);
            *((_OWORD *)v39 - 3) = v67;
            *((_OWORD *)v39 - 6) = v65;
            *((_OWORD *)v39 - 5) = v66;
            *((_QWORD *)v39 - 4) = *((_QWORD *)v44 - 4);
            v68 = *(_OWORD *)(v44 - 24);
            *((_QWORD *)v44 - 3) = 0;
            *((_QWORD *)v44 - 2) = 0;
            v69 = (std::__shared_weak_count *)*((_QWORD *)v39 - 2);
            *(_OWORD *)(v39 - 24) = v68;
            if (v69)
            {
              v70 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            *(v39 - 8) = *(v44 - 8);
            v39 -= 264;
            v44 -= 264;
          }
          while (v59 != v10);
        }
        v55 = &v110[264 * v111];
        *((_QWORD *)v55 + 2) = v113;
        *(_OWORD *)(v55 + 40) = v115;
        *(_OWORD *)(v55 + 56) = v116;
        *(_OWORD *)(v55 + 72) = v117;
        *(_QWORD *)v10 = v8;
        *((_QWORD *)v55 + 1) = v112;
        *((_QWORD *)v55 + 11) = v118;
        *(_OWORD *)(v55 + 24) = v114;
        *((_OWORD *)v55 + 6) = v119;
        *((_QWORD *)v55 + 14) = v120;
        *(_OWORD *)(v55 + 120) = v121;
        *(_OWORD *)(v55 + 216) = v127;
        *(_OWORD *)(v55 + 200) = v126;
        *(_OWORD *)(v55 + 184) = v125;
        *(_OWORD *)(v55 + 168) = v124;
        *(_OWORD *)(v55 + 152) = v123;
        *(_OWORD *)(v55 + 136) = v122;
        *((_QWORD *)v55 + 29) = 0xBFF0000000000000;
        v56 = (std::__shared_weak_count *)*((_QWORD *)v55 + 31);
        *((_OWORD *)v55 + 15) = v128;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v110[264 * v111 + 256] = 0;
      }
      v40 = 0;
    }
    if (v40)
    {
      v108 = (unint64_t *)&v40->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    *(_BYTE *)(a1 + 170) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_239F0C4B0);
    return 1;
  }
  else
  {
LABEL_43:
    v16 = 0;
    if (*((_QWORD *)&v128 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v128 + 1) + 16))(*((_QWORD *)&v128 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v128 + 1));
      }
    }
  }
  return v16;
}

void sub_239CB4B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_239CBA05C((uint64_t)&STACK[0x240]);
  sub_239CBA004((uint64_t)&a16);
  sub_239CB92A4((uint64_t)&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_239CB4B84(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v39;
  std::__shared_weak_count *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  char *v129;
  char *v130;
  char *v131;

  v8 = *a2;
  v9 = *(char **)(a1 + 80);
  v10 = *(char **)(a1 + 88);
  if (v9 == v10)
  {
    v10 = *(char **)(a1 + 80);
  }
  else if (*((_QWORD *)v10 - 33) >= v8)
  {
    v11 = 0xF83E0F83E0F83E1 * ((v10 - v9) >> 3);
    do
    {
      v12 = v11 >> 1;
      v13 = (unint64_t *)&v9[264 * (v11 >> 1)];
      v14 = *v13;
      v15 = (char *)(v13 + 33);
      v11 += ~(v11 >> 1);
      if (v14 < v8)
        v9 = v15;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  v17 = *a2;
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v17 = *a2;
  }
  v112 = v17;
  v113 = a2[1];
  v116 = *((_OWORD *)a2 + 3);
  v117 = *((_OWORD *)a2 + 4);
  v114 = *((_OWORD *)a2 + 1);
  v115 = *((_OWORD *)a2 + 2);
  v119 = *(_OWORD *)(a2 + 11);
  v118 = a2[10];
  v120 = a2[13];
  *(_QWORD *)&v128 = a4;
  *((_QWORD *)&v128 + 1) = a5;
  if (a5)
  {
    v20 = (unint64_t *)&a5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  v23 = a1 + 16;
  v24 = *(_QWORD *)(a1 + 16);
  if (!v24)
    goto LABEL_43;
  v25 = *a3;
  v26 = a1 + 16;
  v27 = *(_QWORD *)(a1 + 16);
  do
  {
    v28 = *(_DWORD *)(v27 + 32);
    v29 = v28 >= v25;
    if (v28 >= v25)
      v30 = (uint64_t *)v27;
    else
      v30 = (uint64_t *)(v27 + 8);
    if (v29)
      v26 = v27;
    v27 = *v30;
  }
  while (*v30);
  if (v26 == v23 || *(_DWORD *)(v26 + 32) > v25)
    goto LABEL_43;
  ++*(_DWORD *)(v26 + 168);
  v31 = a3[1];
  v32 = a1 + 16;
  do
  {
    v33 = *(_DWORD *)(v24 + 32);
    v34 = v33 >= v31;
    if (v33 >= v31)
      v35 = (uint64_t *)v24;
    else
      v35 = (uint64_t *)(v24 + 8);
    if (v34)
      v32 = v24;
    v24 = *v35;
  }
  while (*v35);
  if (v32 != v23
    && *(_DWORD *)(v32 + 32) <= v31
    && ((++*(_DWORD *)(v32 + 168), *(_BYTE *)(v26 + 44)) || *(_BYTE *)(v32 + 44)))
  {
    v39 = *(char **)(a1 + 88);
    *(_QWORD *)&v121 = v26 + 40;
    *((_QWORD *)&v121 + 1) = v32 + 40;
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
    if (v39 == v10 || *(_QWORD *)v10 != v8)
    {
      v41 = *(_QWORD *)(a1 + 96);
      v42 = *(char **)(a1 + 80);
      v43 = v10 - v42;
      v110 = v42;
      v111 = 0xF83E0F83E0F83E1 * ((v10 - v42) >> 3);
      if ((unint64_t)v39 >= v41)
      {
        v72 = 0xF83E0F83E0F83E1 * ((v39 - v42) >> 3) + 1;
        if (v72 > 0xF83E0F83E0F83ELL)
          sub_2394189F8();
        v73 = 0xF83E0F83E0F83E1 * ((uint64_t)(v41 - (_QWORD)v42) >> 3);
        v74 = 0x1F07C1F07C1F07C2 * ((uint64_t)(v41 - (_QWORD)v42) >> 3);
        if (v74 > v72)
          v72 = v74;
        if (v73 >= 0x7C1F07C1F07C1FLL)
          v75 = 0xF83E0F83E0F83ELL;
        else
          v75 = v72;
        if (v75)
        {
          if (v75 > 0xF83E0F83E0F83ELL)
            sub_239418A80();
          v76 = (char *)operator new(264 * v75);
        }
        else
        {
          v76 = 0;
        }
        v78 = &v76[264 * v111];
        v131 = &v76[264 * v75];
        if (v111 == v75)
        {
          if (v43 < 1)
          {
            if (v10 == v110)
              v80 = 1;
            else
              v80 = 2 * v111;
            if (v80 > 0xF83E0F83E0F83ELL)
              sub_239418A80();
            v81 = (char *)operator new(264 * v80);
            v78 = &v81[264 * (v80 >> 2)];
            v131 = &v81[264 * v80];
            if (v76)
              operator delete(v76);
          }
          else
          {
            v79 = v111 + 2;
            if (v111 >= -1)
              v79 = v111 + 1;
            v78 -= 264 * (v79 >> 1);
          }
        }
        *(_QWORD *)v78 = v8;
        *((_QWORD *)v78 + 1) = v112;
        *((_QWORD *)v78 + 2) = v113;
        *(_OWORD *)(v78 + 40) = v115;
        *(_OWORD *)(v78 + 56) = v116;
        *(_OWORD *)(v78 + 72) = v117;
        *((_QWORD *)v78 + 11) = v118;
        *(_OWORD *)(v78 + 24) = v114;
        *((_QWORD *)v78 + 14) = v120;
        *((_OWORD *)v78 + 6) = v119;
        *(_OWORD *)(v78 + 120) = v121;
        *(_OWORD *)(v78 + 152) = v123;
        *(_OWORD *)(v78 + 136) = v122;
        *(_OWORD *)(v78 + 216) = v127;
        *(_OWORD *)(v78 + 200) = v126;
        *(_OWORD *)(v78 + 184) = v125;
        *(_OWORD *)(v78 + 168) = v124;
        *((_QWORD *)v78 + 29) = 0xBFF0000000000000;
        *((_OWORD *)v78 + 15) = v128;
        v78[256] = 0;
        v82 = v78 + 264;
        v129 = v78 + 264;
        v83 = *(char **)(a1 + 80);
        if (v83 != v10)
        {
          v84 = 0;
          do
          {
            v85 = &v78[v84];
            v86 = &v10[v84];
            *(_QWORD *)&v78[v84 - 264] = *(_QWORD *)&v10[v84 - 264];
            *((_QWORD *)v85 - 32) = *(_QWORD *)&v10[v84 - 256];
            *((_QWORD *)v85 - 31) = *(_QWORD *)&v10[v84 - 248];
            *((_OWORD *)v85 - 15) = *(_OWORD *)&v10[v84 - 240];
            v87 = *(_OWORD *)&v10[v84 - 224];
            v88 = *(_OWORD *)&v10[v84 - 208];
            v89 = *(_OWORD *)&v10[v84 - 192];
            *((_QWORD *)v85 - 22) = *(_QWORD *)&v10[v84 - 176];
            *((_OWORD *)v85 - 13) = v88;
            *((_OWORD *)v85 - 12) = v89;
            *((_OWORD *)v85 - 14) = v87;
            v90 = *(_OWORD *)&v10[v84 - 168];
            *((_QWORD *)v85 - 19) = *(_QWORD *)&v10[v84 - 152];
            *(_OWORD *)(v85 - 168) = v90;
            *((_OWORD *)v85 - 9) = *(_OWORD *)&v10[v84 - 144];
            v91 = *(_OWORD *)&v10[v84 - 48];
            v93 = *(_OWORD *)&v10[v84 - 96];
            v92 = *(_OWORD *)&v10[v84 - 80];
            *((_OWORD *)v85 - 4) = *(_OWORD *)&v10[v84 - 64];
            *((_OWORD *)v85 - 3) = v91;
            *((_OWORD *)v85 - 6) = v93;
            *((_OWORD *)v85 - 5) = v92;
            v94 = *(_OWORD *)&v10[v84 - 112];
            *((_OWORD *)v85 - 8) = *(_OWORD *)&v10[v84 - 128];
            *((_OWORD *)v85 - 7) = v94;
            *((_QWORD *)v85 - 4) = *(_QWORD *)&v10[v84 - 32];
            *(_OWORD *)(v85 - 24) = *(_OWORD *)&v10[v84 - 24];
            *((_QWORD *)v86 - 3) = 0;
            *((_QWORD *)v86 - 2) = 0;
            *(v85 - 8) = v10[v84 - 8];
            v84 -= 264;
          }
          while (&v10[v84] != v83);
          v78 += v84;
          v82 = v129;
        }
        v95 = *(char **)(a1 + 88);
        if (v95 != v10)
        {
          do
          {
            *(_QWORD *)v82 = *(_QWORD *)v10;
            *((_QWORD *)v82 + 1) = *((_QWORD *)v10 + 1);
            *((_QWORD *)v82 + 2) = *((_QWORD *)v10 + 2);
            *(_OWORD *)(v82 + 24) = *(_OWORD *)(v10 + 24);
            v96 = *(_OWORD *)(v10 + 40);
            v97 = *(_OWORD *)(v10 + 56);
            v98 = *(_OWORD *)(v10 + 72);
            *((_QWORD *)v82 + 11) = *((_QWORD *)v10 + 11);
            *(_OWORD *)(v82 + 72) = v98;
            *(_OWORD *)(v82 + 56) = v97;
            *(_OWORD *)(v82 + 40) = v96;
            v99 = *((_OWORD *)v10 + 6);
            *((_QWORD *)v82 + 14) = *((_QWORD *)v10 + 14);
            *((_OWORD *)v82 + 6) = v99;
            *(_OWORD *)(v82 + 120) = *(_OWORD *)(v10 + 120);
            v100 = *(_OWORD *)(v10 + 184);
            v101 = *(_OWORD *)(v10 + 200);
            v102 = *(_OWORD *)(v10 + 216);
            *(_OWORD *)(v82 + 168) = *(_OWORD *)(v10 + 168);
            *(_OWORD *)(v82 + 216) = v102;
            *(_OWORD *)(v82 + 200) = v101;
            *(_OWORD *)(v82 + 184) = v100;
            v103 = *(_OWORD *)(v10 + 136);
            *(_OWORD *)(v82 + 152) = *(_OWORD *)(v10 + 152);
            *(_OWORD *)(v82 + 136) = v103;
            *((_QWORD *)v82 + 29) = *((_QWORD *)v10 + 29);
            *((_OWORD *)v82 + 15) = *((_OWORD *)v10 + 15);
            *((_QWORD *)v10 + 30) = 0;
            *((_QWORD *)v10 + 31) = 0;
            v82[256] = v10[256];
            v82 += 264;
            v10 += 264;
          }
          while (v10 != v95);
          v10 = *(char **)(a1 + 88);
        }
        v104 = *(char **)(a1 + 80);
        *(_QWORD *)(a1 + 80) = v78;
        *(_QWORD *)(a1 + 88) = v82;
        *(_QWORD *)(a1 + 96) = v131;
        if (v10 != v104)
        {
          do
          {
            v130 = v10 - 264;
            v105 = (std::__shared_weak_count *)*((_QWORD *)v10 - 2);
            if (v105)
            {
              v106 = (unint64_t *)&v105->__shared_owners_;
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
            v10 = v130;
          }
          while (v130 != v104);
          v10 = v104;
        }
        if (v10)
          operator delete(v10);
      }
      else if (v10 == v39)
      {
        *(_QWORD *)v39 = v8;
        v77 = &v42[8 * ((v10 - v42) >> 3)];
        *((_QWORD *)v77 + 1) = v112;
        *((_QWORD *)v77 + 2) = v113;
        *(_OWORD *)(v77 + 24) = v114;
        *((_QWORD *)v77 + 11) = v118;
        *(_OWORD *)(v77 + 72) = v117;
        *(_OWORD *)(v77 + 56) = v116;
        *(_OWORD *)(v77 + 40) = v115;
        *((_QWORD *)v77 + 14) = v120;
        *((_OWORD *)v77 + 6) = v119;
        *(_OWORD *)(v77 + 120) = v121;
        *(_OWORD *)(v77 + 136) = v122;
        *(_OWORD *)(v77 + 152) = v123;
        *(_OWORD *)(v77 + 216) = v127;
        *(_OWORD *)(v77 + 200) = v126;
        *(_OWORD *)(v77 + 184) = v125;
        *(_OWORD *)(v77 + 168) = v124;
        *((_QWORD *)v77 + 29) = 0xBFF0000000000000;
        *((_OWORD *)v77 + 15) = v128;
        v77[256] = 0;
        *(_QWORD *)(a1 + 88) = v39 + 264;
      }
      else
      {
        v44 = v39 - 264;
        v45 = *(_QWORD *)(a1 + 88);
        if ((unint64_t)v39 >= 0x108)
        {
          v46 = v39 - 264;
          v45 = *(_QWORD *)(a1 + 88);
          do
          {
            *(_QWORD *)v45 = *(_QWORD *)v46;
            *(_QWORD *)(v45 + 8) = *((_QWORD *)v46 + 1);
            *(_QWORD *)(v45 + 16) = *((_QWORD *)v46 + 2);
            *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
            v47 = *(_OWORD *)(v46 + 40);
            v48 = *(_OWORD *)(v46 + 56);
            v49 = *(_OWORD *)(v46 + 72);
            *(_QWORD *)(v45 + 88) = *((_QWORD *)v46 + 11);
            *(_OWORD *)(v45 + 72) = v49;
            *(_OWORD *)(v45 + 56) = v48;
            *(_OWORD *)(v45 + 40) = v47;
            v50 = *((_OWORD *)v46 + 6);
            *(_QWORD *)(v45 + 112) = *((_QWORD *)v46 + 14);
            *(_OWORD *)(v45 + 96) = v50;
            *(_OWORD *)(v45 + 120) = *(_OWORD *)(v46 + 120);
            v51 = *(_OWORD *)(v46 + 184);
            v52 = *(_OWORD *)(v46 + 200);
            v53 = *(_OWORD *)(v46 + 216);
            *(_OWORD *)(v45 + 168) = *(_OWORD *)(v46 + 168);
            *(_OWORD *)(v45 + 216) = v53;
            *(_OWORD *)(v45 + 200) = v52;
            *(_OWORD *)(v45 + 184) = v51;
            v54 = *(_OWORD *)(v46 + 136);
            *(_OWORD *)(v45 + 152) = *(_OWORD *)(v46 + 152);
            *(_OWORD *)(v45 + 136) = v54;
            *(_QWORD *)(v45 + 232) = *((_QWORD *)v46 + 29);
            *(_OWORD *)(v45 + 240) = *((_OWORD *)v46 + 15);
            *((_QWORD *)v46 + 30) = 0;
            *((_QWORD *)v46 + 31) = 0;
            *(_BYTE *)(v45 + 256) = v46[256];
            v45 += 264;
            v46 += 264;
          }
          while (v46 < v39);
        }
        *(_QWORD *)(a1 + 88) = v45;
        if (v39 != v10 + 264)
        {
          do
          {
            v59 = v44 - 264;
            *((_QWORD *)v39 - 33) = *((_QWORD *)v44 - 33);
            *((_QWORD *)v39 - 32) = *((_QWORD *)v44 - 32);
            *((_QWORD *)v39 - 31) = *((_QWORD *)v44 - 31);
            *((_OWORD *)v39 - 15) = *((_OWORD *)v44 - 15);
            v60 = *((_OWORD *)v44 - 14);
            v61 = *((_OWORD *)v44 - 13);
            v62 = *((_OWORD *)v44 - 12);
            *((_QWORD *)v39 - 22) = *((_QWORD *)v44 - 22);
            *((_OWORD *)v39 - 13) = v61;
            *((_OWORD *)v39 - 12) = v62;
            *((_OWORD *)v39 - 14) = v60;
            v63 = *(_OWORD *)(v44 - 168);
            *((_QWORD *)v39 - 19) = *((_QWORD *)v44 - 19);
            *(_OWORD *)(v39 - 168) = v63;
            *((_QWORD *)v39 - 18) = *((_QWORD *)v44 - 18);
            *((_QWORD *)v39 - 17) = *((_QWORD *)v44 - 17);
            v64 = *((_OWORD *)v44 - 7);
            *((_OWORD *)v39 - 8) = *((_OWORD *)v44 - 8);
            *((_OWORD *)v39 - 7) = v64;
            v65 = *((_OWORD *)v44 - 6);
            v66 = *((_OWORD *)v44 - 5);
            v67 = *((_OWORD *)v44 - 3);
            *((_OWORD *)v39 - 4) = *((_OWORD *)v44 - 4);
            *((_OWORD *)v39 - 3) = v67;
            *((_OWORD *)v39 - 6) = v65;
            *((_OWORD *)v39 - 5) = v66;
            *((_QWORD *)v39 - 4) = *((_QWORD *)v44 - 4);
            v68 = *(_OWORD *)(v44 - 24);
            *((_QWORD *)v44 - 3) = 0;
            *((_QWORD *)v44 - 2) = 0;
            v69 = (std::__shared_weak_count *)*((_QWORD *)v39 - 2);
            *(_OWORD *)(v39 - 24) = v68;
            if (v69)
            {
              v70 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            *(v39 - 8) = *(v44 - 8);
            v39 -= 264;
            v44 -= 264;
          }
          while (v59 != v10);
        }
        v55 = &v110[264 * v111];
        *((_QWORD *)v55 + 2) = v113;
        *(_OWORD *)(v55 + 40) = v115;
        *(_OWORD *)(v55 + 56) = v116;
        *(_OWORD *)(v55 + 72) = v117;
        *(_QWORD *)v10 = v8;
        *((_QWORD *)v55 + 1) = v112;
        *((_QWORD *)v55 + 11) = v118;
        *(_OWORD *)(v55 + 24) = v114;
        *((_OWORD *)v55 + 6) = v119;
        *((_QWORD *)v55 + 14) = v120;
        *(_OWORD *)(v55 + 120) = v121;
        *(_OWORD *)(v55 + 216) = v127;
        *(_OWORD *)(v55 + 200) = v126;
        *(_OWORD *)(v55 + 184) = v125;
        *(_OWORD *)(v55 + 168) = v124;
        *(_OWORD *)(v55 + 152) = v123;
        *(_OWORD *)(v55 + 136) = v122;
        *((_QWORD *)v55 + 29) = 0xBFF0000000000000;
        v56 = (std::__shared_weak_count *)*((_QWORD *)v55 + 31);
        *((_OWORD *)v55 + 15) = v128;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v110[264 * v111 + 256] = 0;
      }
      v40 = 0;
    }
    if (v40)
    {
      v108 = (unint64_t *)&v40->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    *(_BYTE *)(a1 + 170) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_239F0C4B0);
    return 1;
  }
  else
  {
LABEL_43:
    v16 = 0;
    if (*((_QWORD *)&v128 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v128 + 1) + 16))(*((_QWORD *)&v128 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v128 + 1));
      }
    }
  }
  return v16;
}

void sub_239CB576C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_239CBA05C((uint64_t)&STACK[0x240]);
  sub_239CBA004((uint64_t)&a16);
  sub_239CB92A4((uint64_t)&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_239CB5798(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  void **v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50[5];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  char v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  char v69;

  v8 = *a2;
  v9 = *(char **)(a1 + 104);
  v11 = *(char **)(a1 + 112);
  v10 = (void **)(a1 + 104);
  if (v9 == v11)
  {
    v11 = *(char **)(a1 + 104);
  }
  else if (*((_QWORD *)v11 - 18) >= v8)
  {
    v12 = 0x8E38E38E38E38E39 * ((v11 - v9) >> 4);
    do
    {
      v13 = v12 >> 1;
      v14 = &v9[144 * (v12 >> 1)];
      v16 = *(_QWORD *)v14;
      v15 = v14 + 144;
      v12 += ~(v12 >> 1);
      if (v16 < v8)
        v9 = v15;
      else
        v12 = v13;
    }
    while (v12);
    if (v9 != v11)
    {
      v11 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  v18 = *a2;
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v18 = *a2;
  }
  v59 = *(_OWORD *)(a2 + 1);
  v60 = *(_OWORD *)(a2 + 3);
  v61 = *(_OWORD *)(a2 + 5);
  v58 = v18;
  v62 = 0uLL;
  v63 = 0;
  v66 = 0xBFF0000000000000;
  v67 = a4;
  v68 = a5;
  if (a5)
  {
    v21 = (unint64_t *)&a5->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v69 = 0;
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  else
  {
    v69 = 0;
  }
  v24 = *(_QWORD *)(a1 + 40);
  if (!v24)
    goto LABEL_56;
  v25 = *a3;
  v26 = a1 + 40;
  do
  {
    v27 = *(_DWORD *)(v24 + 32);
    v28 = v27 >= v25;
    if (v27 >= v25)
      v29 = (uint64_t *)v24;
    else
      v29 = (uint64_t *)(v24 + 8);
    if (v28)
      v26 = v24;
    v24 = *v29;
  }
  while (*v29);
  if (v26 == a1 + 40)
    goto LABEL_56;
  if (*(_DWORD *)(v26 + 32) > v25)
    goto LABEL_56;
  *(_QWORD *)&v62 = v26 + 40;
  ++*(_DWORD *)(v26 + 72);
  v30 = a1 + 16;
  v31 = *(_QWORD *)(a1 + 16);
  if (!v31)
    goto LABEL_56;
  v32 = a3[1];
  v33 = a1 + 16;
  v34 = *(_QWORD *)(a1 + 16);
  do
  {
    v35 = *(_DWORD *)(v34 + 32);
    v36 = v35 >= v32;
    if (v35 >= v32)
      v37 = (uint64_t *)v34;
    else
      v37 = (uint64_t *)(v34 + 8);
    if (v36)
      v33 = v34;
    v34 = *v37;
  }
  while (*v37);
  if (v33 == v30 || *(_DWORD *)(v33 + 32) > v32)
    goto LABEL_56;
  *((_QWORD *)&v62 + 1) = v33 + 40;
  ++*(_DWORD *)(v33 + 168);
  v38 = a3[2];
  v39 = a1 + 16;
  do
  {
    v40 = *(_DWORD *)(v31 + 32);
    v41 = v40 >= v38;
    if (v40 >= v38)
      v42 = (uint64_t *)v31;
    else
      v42 = (uint64_t *)(v31 + 8);
    if (v41)
      v39 = v31;
    v31 = *v42;
  }
  while (*v42);
  if (v39 == v30
    || *(_DWORD *)(v39 + 32) > v38
    || (v63 = v39 + 40, ++*(_DWORD *)(v39 + 168), !*(_BYTE *)(v26 + 44))
    && !*(_BYTE *)(v33 + 44)
    && !*(_BYTE *)(v39 + 44))
  {
LABEL_56:
    v17 = 0;
    v43 = v68;
    if (!v68)
      return v17;
    goto LABEL_57;
  }
  *(_QWORD *)&v50[0] = v8;
  *((_QWORD *)&v50[0] + 1) = v58;
  v50[1] = v59;
  v50[2] = v60;
  v50[3] = v61;
  v50[4] = v62;
  v51 = v63;
  v53 = v65;
  v52 = v64;
  v54 = v66;
  v47 = v68;
  v55 = v67;
  v56 = v68;
  v67 = 0;
  v68 = 0;
  v57 = v69;
  if (*(char **)(a1 + 112) == v11 || *(_QWORD *)v11 != v8)
  {
    sub_239CB989C(v10, v11, v50);
    v47 = v56;
  }
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  *(_BYTE *)(a1 + 170) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_239F0C400);
  v17 = 1;
  v43 = v68;
  if (v68)
  {
LABEL_57:
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  return v17;
}

void sub_239CB5B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_239CB9F20((uint64_t)&a10);
  sub_239CB97B8((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_239CB5B70(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v2 = *(char **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x1E1E1E1E1E1E1E2)
      sub_2394189F8();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 136 * a2;
    v6 = (char *)operator new(136 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *((_QWORD *)v10 - 17) = *(_QWORD *)&v4[v9 - 136];
        *((_QWORD *)v10 - 16) = *(_QWORD *)&v4[v9 - 128];
        v12 = *(_OWORD *)&v4[v9 - 120];
        v13 = *(_OWORD *)&v4[v9 - 104];
        v14 = *(_OWORD *)&v4[v9 - 88];
        *((_QWORD *)v10 - 9) = *(_QWORD *)&v4[v9 - 72];
        *(_OWORD *)(v10 - 88) = v14;
        *(_OWORD *)(v10 - 104) = v13;
        *(_OWORD *)(v10 - 120) = v12;
        *((_QWORD *)v10 - 8) = *(_QWORD *)&v4[v9 - 64];
        v15 = *(_OWORD *)&v4[v9 - 56];
        *((_QWORD *)v10 - 5) = *(_QWORD *)&v4[v9 - 40];
        *(_OWORD *)(v10 - 56) = v15;
        *((_QWORD *)v10 - 4) = *(_QWORD *)&v4[v9 - 32];
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *(v10 - 8) = v4[v9 - 8];
        v9 -= 136;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v16 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v16 != v2)
      {
        v17 = (std::__shared_weak_count *)*((_QWORD *)v16 - 2);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v16 -= 136;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_239CB5CF0(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  char *v105;
  char *v106;
  char *v107;

  v8 = *a2;
  v9 = *(char **)(a1 + 128);
  v10 = *(char **)(a1 + 136);
  if (v9 == v10)
  {
    v10 = *(char **)(a1 + 128);
  }
  else if (*((_QWORD *)v10 - 17) >= v8)
  {
    v11 = 0xF0F0F0F0F0F0F0F1 * ((v10 - v9) >> 3);
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[136 * (v11 >> 1)];
      v15 = *(_QWORD *)v13;
      v14 = v13 + 136;
      v11 += ~(v11 >> 1);
      if (v15 < v8)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 != v10)
    {
      v10 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  v17 = *a2;
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v17 = *a2;
  }
  v98 = *(_OWORD *)(a2 + 1);
  v99 = *(_OWORD *)(a2 + 3);
  v100 = *(_OWORD *)(a2 + 5);
  v97 = v17;
  v101 = a2[7];
  *(_QWORD *)&v104 = a4;
  *((_QWORD *)&v104 + 1) = a5;
  if (a5)
  {
    v20 = (unint64_t *)&a5->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  v23 = *(_QWORD *)(a1 + 16);
  if (!v23)
    goto LABEL_43;
  v24 = *a3;
  v25 = a1 + 16;
  do
  {
    v26 = *(_DWORD *)(v23 + 32);
    v27 = v26 >= v24;
    if (v26 >= v24)
      v28 = (uint64_t *)v23;
    else
      v28 = (uint64_t *)(v23 + 8);
    if (v27)
      v25 = v23;
    v23 = *v28;
  }
  while (*v28);
  if (v25 != a1 + 16
    && *(_DWORD *)(v25 + 32) <= v24
    && (v29 = v25 + 40, ++*(_DWORD *)(v25 + 168), *(_BYTE *)(v25 + 44)))
  {
    v95 = v25 + 40;
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
    v31 = *(char **)(a1 + 136);
    if (v31 == v10 || *(_QWORD *)v10 != v8)
    {
      v32 = *(_QWORD *)(a1 + 144);
      v33 = *(_QWORD *)(a1 + 128);
      v34 = (uint64_t)&v10[-v33];
      if ((unint64_t)v31 >= v32)
      {
        v56 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v10[-v33] >> 3);
        v57 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v31[-v33] >> 3) + 1;
        if (v57 > 0x1E1E1E1E1E1E1E1)
          sub_2394189F8();
        v94 = *(char **)(a1 + 128);
        v58 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v32 - v33) >> 3);
        if (2 * v58 > v57)
          v57 = 2 * v58;
        if (v58 >= 0xF0F0F0F0F0F0F0)
          v59 = 0x1E1E1E1E1E1E1E1;
        else
          v59 = v57;
        if (v59)
        {
          if (v59 > 0x1E1E1E1E1E1E1E1)
            sub_239418A80();
          v60 = (char *)operator new(136 * v59);
        }
        else
        {
          v60 = 0;
        }
        v66 = v56;
        v67 = &v60[136 * v56];
        v107 = &v60[136 * v59];
        if (v66 == v59)
        {
          if (v34 < 1)
          {
            if (v10 == v94)
              v69 = 1;
            else
              v69 = 2 * v66;
            if (v69 > 0x1E1E1E1E1E1E1E1)
              sub_239418A80();
            v70 = (char *)operator new(136 * v69);
            v67 = &v70[136 * (v69 >> 2)];
            v107 = &v70[136 * v69];
            if (v60)
              operator delete(v60);
          }
          else
          {
            v68 = v66 + 2;
            if (v66 >= -1)
              v68 = v66 + 1;
            v67 -= 136 * (v68 >> 1);
          }
        }
        *(_QWORD *)v67 = v8;
        *((_QWORD *)v67 + 1) = v97;
        *((_QWORD *)v67 + 8) = v101;
        *((_OWORD *)v67 + 2) = v99;
        *((_OWORD *)v67 + 3) = v100;
        *((_OWORD *)v67 + 1) = v98;
        *((_QWORD *)v67 + 9) = v95;
        *((_OWORD *)v67 + 5) = v102;
        *((_QWORD *)v67 + 12) = v103;
        *((_QWORD *)v67 + 13) = 0xBFF0000000000000;
        *((_OWORD *)v67 + 7) = v104;
        v96 = 0uLL;
        v67[128] = 0;
        v71 = v67 + 136;
        v105 = v67 + 136;
        v72 = *(char **)(a1 + 128);
        if (v72 != v10)
        {
          v73 = 0;
          do
          {
            v74 = &v67[v73];
            v75 = &v10[v73];
            *((_QWORD *)v74 - 17) = *(_QWORD *)&v10[v73 - 136];
            *((_QWORD *)v74 - 16) = *(_QWORD *)&v10[v73 - 128];
            v76 = *(_OWORD *)&v10[v73 - 120];
            v77 = *(_OWORD *)&v10[v73 - 104];
            v78 = *(_OWORD *)&v10[v73 - 88];
            *((_QWORD *)v74 - 9) = *(_QWORD *)&v10[v73 - 72];
            *(_OWORD *)(v74 - 88) = v78;
            *(_OWORD *)(v74 - 104) = v77;
            *(_OWORD *)(v74 - 120) = v76;
            *((_QWORD *)v74 - 8) = *(_QWORD *)&v10[v73 - 64];
            v79 = *(_OWORD *)&v10[v73 - 56];
            *((_QWORD *)v74 - 5) = *(_QWORD *)&v10[v73 - 40];
            *(_OWORD *)(v74 - 56) = v79;
            *((_QWORD *)v74 - 4) = *(_QWORD *)&v10[v73 - 32];
            *(_OWORD *)(v74 - 24) = *(_OWORD *)&v10[v73 - 24];
            *((_QWORD *)v75 - 3) = 0;
            *((_QWORD *)v75 - 2) = 0;
            *(v74 - 8) = v10[v73 - 8];
            v73 -= 136;
          }
          while (&v10[v73] != v72);
          v67 += v73;
          v71 = v105;
        }
        v80 = *(char **)(a1 + 136);
        if (v80 != v10)
        {
          do
          {
            *(_QWORD *)v71 = *(_QWORD *)v10;
            *((_QWORD *)v71 + 1) = *((_QWORD *)v10 + 1);
            v81 = *((_OWORD *)v10 + 1);
            v82 = *((_OWORD *)v10 + 2);
            v83 = *((_OWORD *)v10 + 3);
            *((_QWORD *)v71 + 8) = *((_QWORD *)v10 + 8);
            *((_OWORD *)v71 + 2) = v82;
            *((_OWORD *)v71 + 3) = v83;
            *((_OWORD *)v71 + 1) = v81;
            *((_QWORD *)v71 + 9) = *((_QWORD *)v10 + 9);
            v84 = *((_OWORD *)v10 + 5);
            *((_QWORD *)v71 + 12) = *((_QWORD *)v10 + 12);
            *((_OWORD *)v71 + 5) = v84;
            *((_QWORD *)v71 + 13) = *((_QWORD *)v10 + 13);
            *((_OWORD *)v71 + 7) = *((_OWORD *)v10 + 7);
            *((_QWORD *)v10 + 14) = 0;
            *((_QWORD *)v10 + 15) = 0;
            v71[128] = v10[128];
            v71 += 136;
            v10 += 136;
          }
          while (v10 != v80);
          v10 = *(char **)(a1 + 136);
        }
        v85 = *(char **)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v67;
        *(_QWORD *)(a1 + 136) = v71;
        *(_QWORD *)(a1 + 144) = v107;
        if (v10 != v85)
        {
          do
          {
            v106 = v10 - 136;
            v86 = (std::__shared_weak_count *)*((_QWORD *)v10 - 2);
            if (v86)
            {
              v87 = (unint64_t *)&v86->__shared_owners_;
              do
                v88 = __ldaxr(v87);
              while (__stlxr(v88 - 1, v87));
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
            }
            v10 = v106;
          }
          while (v106 != v85);
          v10 = v85;
        }
        if (v10)
          operator delete(v10);
      }
      else if (v10 == v31)
      {
        *(_QWORD *)v31 = v8;
        v65 = v33 + 8 * ((uint64_t)&v10[-v33] >> 3);
        *(_QWORD *)(v65 + 8) = v97;
        *(_OWORD *)(v65 + 32) = v99;
        *(_OWORD *)(v65 + 48) = v100;
        *(_OWORD *)(v65 + 16) = v98;
        *(_QWORD *)(v65 + 64) = v101;
        *(_QWORD *)(v65 + 72) = v29;
        *(_QWORD *)(v65 + 96) = v103;
        *(_OWORD *)(v65 + 80) = v102;
        *(_QWORD *)(v65 + 104) = 0xBFF0000000000000;
        *(_OWORD *)(v65 + 112) = v104;
        v96 = 0uLL;
        *(_BYTE *)(v65 + 128) = 0;
        *(_QWORD *)(a1 + 136) = v31 + 136;
      }
      else
      {
        v91 = v29;
        v92 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v10[-v33] >> 3);
        v93 = *(_QWORD *)(a1 + 128);
        v96 = 0uLL;
        v35 = v31 - 136;
        v36 = *(_QWORD *)(a1 + 136);
        if ((unint64_t)v31 >= 0x88)
        {
          v37 = v31 - 136;
          v36 = *(_QWORD *)(a1 + 136);
          do
          {
            *(_QWORD *)v36 = *(_QWORD *)v37;
            *(_QWORD *)(v36 + 8) = *((_QWORD *)v37 + 1);
            v38 = *((_OWORD *)v37 + 1);
            v39 = *((_OWORD *)v37 + 2);
            v40 = *((_OWORD *)v37 + 3);
            *(_QWORD *)(v36 + 64) = *((_QWORD *)v37 + 8);
            *(_OWORD *)(v36 + 32) = v39;
            *(_OWORD *)(v36 + 48) = v40;
            *(_OWORD *)(v36 + 16) = v38;
            *(_QWORD *)(v36 + 72) = *((_QWORD *)v37 + 9);
            v41 = *((_OWORD *)v37 + 5);
            *(_QWORD *)(v36 + 96) = *((_QWORD *)v37 + 12);
            *(_OWORD *)(v36 + 80) = v41;
            *(_QWORD *)(v36 + 104) = *((_QWORD *)v37 + 13);
            *(_OWORD *)(v36 + 112) = *((_OWORD *)v37 + 7);
            *((_QWORD *)v37 + 14) = 0;
            *((_QWORD *)v37 + 15) = 0;
            *(_BYTE *)(v36 + 128) = v37[128];
            v36 += 136;
            v37 += 136;
          }
          while (v37 < v31);
        }
        *(_QWORD *)(a1 + 136) = v36;
        if (v31 != v10 + 136)
        {
          v42 = v31 - 136;
          v43 = v31;
          do
          {
            v47 = *((_QWORD *)v42 - 17);
            v42 -= 136;
            *((_QWORD *)v43 - 17) = v47;
            v43 -= 136;
            *((_QWORD *)v43 + 1) = *((_QWORD *)v42 + 1);
            v48 = *((_OWORD *)v42 + 1);
            v49 = *((_OWORD *)v42 + 2);
            v50 = *((_OWORD *)v42 + 3);
            *((_QWORD *)v43 + 8) = *((_QWORD *)v42 + 8);
            *((_OWORD *)v43 + 2) = v49;
            *((_OWORD *)v43 + 3) = v50;
            *((_OWORD *)v43 + 1) = v48;
            *((_QWORD *)v43 + 9) = *((_QWORD *)v42 + 9);
            v51 = *((_OWORD *)v42 + 5);
            *((_QWORD *)v43 + 12) = *((_QWORD *)v42 + 12);
            *((_OWORD *)v43 + 5) = v51;
            *((_QWORD *)v43 + 13) = *((_QWORD *)v42 + 13);
            v52 = *((_OWORD *)v42 + 7);
            *((_QWORD *)v42 + 14) = 0;
            *((_QWORD *)v42 + 15) = 0;
            v53 = (std::__shared_weak_count *)*((_QWORD *)v43 + 15);
            *((_OWORD *)v43 + 7) = v52;
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            *(v31 - 8) = *(v35 - 8);
            v31 = v43;
            v35 = v42;
          }
          while (v42 != v10);
        }
        *(_QWORD *)v10 = v8;
        v61 = v93 + 136 * v92;
        *(_QWORD *)(v61 + 8) = v97;
        *(_OWORD *)(v61 + 16) = v98;
        *(_OWORD *)(v61 + 32) = v99;
        *(_OWORD *)(v61 + 48) = v100;
        *(_QWORD *)(v61 + 64) = v101;
        *(_QWORD *)(v61 + 72) = v91;
        *(_OWORD *)(v61 + 80) = v102;
        *(_QWORD *)(v61 + 96) = v103;
        *(_QWORD *)(v61 + 104) = 0xBFF0000000000000;
        v62 = *(std::__shared_weak_count **)(v61 + 120);
        *(_OWORD *)(v61 + 112) = v104;
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        *(_BYTE *)(v93 + 136 * v92 + 128) = 0;
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
    }
    if (v30)
    {
      v89 = (unint64_t *)&v30->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    *(_BYTE *)(a1 + 170) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(int64x2_t *)(a1 + 152) = vaddq_s64(*(int64x2_t *)(a1 + 152), (int64x2_t)xmmword_239F0C400);
    return 1;
  }
  else
  {
LABEL_43:
    v16 = 0;
    if (*((_QWORD *)&v104 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v104 + 1) + 16))(*((_QWORD *)&v104 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v104 + 1));
      }
    }
  }
  return v16;
}

void sub_239CB6600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_239CB9810(v33 - 176);
  sub_239CB97B8((uint64_t)&a16);
  sub_239CB8AF8((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_239CB662C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_250AFCB08;
  free(*(void **)(a1 + 952));
  if (*(__int16 *)(a1 + 928) < 0)
  {
    free(*(void **)(a1 + 912));
    *(_OWORD *)(a1 + 920) = 0u;
    *(_OWORD *)(a1 + 936) = 0u;
    *(_OWORD *)(a1 + 904) = 0u;
  }
  else
  {
    v2 = *(void **)(a1 + 912);
    if (v2)
    {
      free(v2);
      *(_QWORD *)(a1 + 912) = 0;
    }
    v3 = *(void **)(a1 + 920);
    if (v3)
    {
      free(v3);
      *(_QWORD *)(a1 + 920) = 0;
    }
    v4 = *(void **)(a1 + 936);
    if (v4)
    {
      free(v4);
      *(_QWORD *)(a1 + 936) = 0;
    }
    *(_QWORD *)(a1 + 944) = 0;
  }
  return sub_239CB355C((_QWORD *)a1);
}

uint64_t sub_239CB66B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFCA50;
  if (*(_DWORD *)(a1 + 992) != 2)
    sub_239A23A84(a1 + 1000);
  return sub_239CB662C(a1);
}

void sub_239CB66FC(uint64_t a1, int64x2_t a2, double a3, double a4, double a5, double a6, float64x2_t a7)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  double *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;
  double v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  float64x2_t v43;
  float64x2_t v44;
  int8x16_t v45;
  float64x2_t v46;
  std::__shared_weak_count *v54;
  double *v55;
  unint64_t *v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  double v61;
  unint64_t v62;
  void *__p;
  double *v64;
  uint64_t v65;
  double *v66;
  double *v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  uint64_t v72;
  float64x2_t v73;
  double v74;
  double v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  char v78;
  float64x2_t v79[4];
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  float64x2_t v86;
  uint64_t v87;
  float64x2_t v88;
  uint64_t v89;
  float64x2_t v90[2];

  __p = 0;
  v64 = 0;
  v65 = 0;
  v8 = *(_QWORD **)a1;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  v10 = v8[17];
  v11 = v10 - v9;
  if (v10 != v9)
  {
    sub_23945E108((uint64_t)&__p, 0xF83E0F83E0F83E1 * (v11 >> 3));
    v11 = (uint64_t)__p;
    v9 = v8[16];
    v10 = v8[17];
  }
  v67 = (double *)v11;
  sub_239CB92FC(v9, v10, &v67, 0, a2, a3, a4, a5, a6, a7);
  v20 = __p;
  v21 = ((char *)v64 - (_BYTE *)__p) >> 3;
  v22 = v8[19];
  v23 = v8[20];
  v24 = 0xF83E0F83E0F83E1 * ((v23 - v22) >> 3);
  if (v21 >= v24 + v21)
  {
    if (v21 > v24 + v21)
      v64 = (double *)((char *)__p + 8 * v24 + 8 * v21);
  }
  else
  {
    sub_23945E108((uint64_t)&__p, v24);
    v20 = __p;
    v22 = v8[19];
    v23 = v8[20];
  }
  *(_QWORD *)&v79[0].f64[0] = &v20[8 * v21];
  v67 = (double *)v79;
  v68.f64[0] = 0.0;
  if (v22 != v23)
  {
    do
    {
      sub_239CB8ECC((uint64_t)&v67, v22, v12, v13, v14, v15, v16, v17, v18.f64[0], v19);
      v22 += 264;
    }
    while (v22 != v23);
    v20 = __p;
  }
  v25 = ((char *)v64 - v20) >> 3;
  v26 = v8[22];
  v27 = v8[23];
  v28 = 0x8E38E38E38E38E39 * ((v27 - v26) >> 4);
  if (v25 >= v28 + v25)
  {
    if (v25 > v28 + v25)
      v64 = (double *)&v20[8 * v28 + 8 * v25];
  }
  else
  {
    sub_23945E108((uint64_t)&__p, v28);
    v20 = __p;
    v26 = v8[22];
    v27 = v8[23];
  }
  v67 = (double *)&v20[8 * v25];
  sub_239CB8B50(v26, v27, &v67, 0, v12.f64[0], v13, v14, v15, v16, v17.f64[0], v18);
  v29 = (double *)__p;
  v30 = ((char *)v64 - (_BYTE *)__p) >> 3;
  v31 = v8[25];
  v32 = v8[26];
  v33 = 0xF0F0F0F0F0F0F0F1 * ((v32 - v31) >> 3);
  if (v30 >= v33 + v30)
  {
    if (v30 > v33 + v30)
      v64 = (double *)((char *)__p + 8 * v33 + 8 * v30);
  }
  else
  {
    sub_23945E108((uint64_t)&__p, v33);
    v29 = (double *)__p;
    v31 = v8[25];
    v32 = v8[26];
  }
  v66 = &v29[v30];
  if (v31 != v32)
  {
    do
    {
      v34 = *(double **)(v31 + 8);
      v35 = *(float64x2_t *)(v31 + 16);
      v36 = *(float64x2_t *)(v31 + 32);
      v37 = *(float64x2_t *)(v31 + 48);
      v38 = *(_QWORD *)(v31 + 72);
      v71 = *(_QWORD *)(v31 + 64);
      v69 = v36;
      v70 = v37;
      v68 = v35;
      v67 = v34;
      v72 = v38;
      v39 = *(double *)(v31 + 96);
      v73 = *(float64x2_t *)(v31 + 80);
      v74 = v39;
      v75 = *(double *)(v31 + 104);
      v40 = *(std::__shared_weak_count **)(v31 + 120);
      v76 = *(_QWORD *)(v31 + 112);
      v77 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
      }
      v78 = *(_BYTE *)(v31 + 128);
      v90[0] = v68;
      v90[1] = v69;
      v89 = v71;
      v88 = v70;
      v83 = *(_QWORD *)(v38 + 16);
      v43 = *(float64x2_t *)(v38 + 56);
      v79[1] = *(float64x2_t *)(v38 + 40);
      v79[2] = v43;
      v79[3] = *(float64x2_t *)(v38 + 72);
      v80 = *(_QWORD *)(v38 + 88);
      v79[0] = *(float64x2_t *)(v38 + 24);
      v82 = 0;
      v81 = 0uLL;
      sub_239458B60(v79, (double *)&v81);
      v85 = v82;
      v84 = v81;
      v44 = *(float64x2_t *)(v38 + 96);
      v87 = *(_QWORD *)(v38 + 112);
      v45.i64[0] = v87;
      v86 = v44;
      v46 = sub_239CAB2C4(v90, (uint64_t)&v83, &v88, &v73, v44, v45);
      if (v76)
        (*(void (**)(uint64_t, float64x2_t *, float64x2_t))(*(_QWORD *)v76 + 24))(v76, &v73, v46);
      _V1.D[1] = v73.f64[1];
      _D3 = v73.f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      v75 = _D2 + v74 * v74;
      v54 = v77;
      v55 = v66;
      *v66 = v75;
      v66 = v55 + 1;
      if (v54)
      {
        v56 = (unint64_t *)&v54->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v31 += 136;
    }
    while (v31 != v32);
    v29 = (double *)__p;
  }
  if (v29 == v64)
  {
    **(_QWORD **)(a1 + 16) = 0x3FF0000000000000;
    if (!v29)
      return;
  }
  else
  {
    v58 = (_BYTE)v64 - (_BYTE)v29;
    v59 = v64 - v29;
    v60 = v59 >> 1;
    sub_2395F71EC(v29, &v29[v59 >> 1], v64);
    v29 = (double *)__p;
    v61 = *((double *)__p + (v59 >> 1));
    if ((v58 & 8) == 0)
    {
      v62 = v60 - 1;
      if (v60 - 1 != v59)
      {
        sub_2395F71EC((double *)__p, (double *)__p + v62, (double *)__p + v59);
        v29 = (double *)__p;
      }
      v61 = (v61 + v29[v62]) * 0.5;
    }
    **(double **)(a1 + 16) = sqrt(v61) * *(double *)(a1 + 8);
  }
  v64 = v29;
  operator delete(v29);
}

void sub_239CB6B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239CB6B70(uint64_t a1, int64x2_t a2, double a3, double a4, double a5, double a6, float64x2_t a7)
{
  double v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  double *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  float64x2_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  unint64_t v47;
  double v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  double v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  float64x2_t v62;
  float64x2_t v63;
  int8x16_t v64;
  float64x2_t v65;
  std::__shared_weak_count *v73;
  double *v74;
  unint64_t *v75;
  unint64_t v76;
  double v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  double v81;
  unint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  double v90;
  void *v91;
  double *v92;
  uint64_t v93;
  double *v94;
  void *__p;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  uint64_t v99;
  uint64_t v100;
  float64x2_t v101;
  double v102;
  double v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  char v106;
  float64x2_t v107[4];
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  void *v111;
  __int128 v112;
  uint64_t v113;
  float64x2_t v114;
  uint64_t v115;
  float64x2_t v116;
  uint64_t v117;
  float64x2_t v118[2];

  v7 = *(double *)a2.i64;
  __p = 0;
  v96 = 0uLL;
  v11 = a1 + 128;
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(v11 + 8);
  v12 = v10 - v9;
  if (v10 != v9)
  {
    sub_23945E108((uint64_t)&__p, 0xF83E0F83E0F83E1 * (v12 >> 3));
    v12 = (uint64_t)__p;
    v9 = *(_QWORD *)(a1 + 128);
    v10 = *(_QWORD *)(a1 + 136);
  }
  *(_QWORD *)&v107[0].f64[0] = v12;
  sub_239CB92FC(v9, v10, (double **)v107, 0, a2, a3, a4, a5, a6, a7);
  v20 = (double *)__p;
  if (__p == *(void **)&v96.f64[0])
  {
    v26 = 1.0;
    if (!__p)
      goto LABEL_11;
  }
  else
  {
    v21 = LOBYTE(v96.f64[0]) - (_BYTE)__p;
    v22 = (uint64_t)(*(_QWORD *)&v96.f64[0] - (_QWORD)__p) >> 3;
    v23 = v22 >> 1;
    sub_2395F71EC((double *)__p, (double *)__p + (v22 >> 1), *(double **)&v96.f64[0]);
    v20 = (double *)__p;
    v24 = *((double *)__p + (v22 >> 1));
    if ((v21 & 8) == 0)
    {
      v25 = v23 - 1;
      if (v23 - 1 != v22)
      {
        sub_2395F71EC((double *)__p, (double *)__p + v25, (double *)__p + v22);
        v20 = (double *)__p;
      }
      v24 = (v24 + v20[v25]) * 0.5;
    }
    v26 = sqrt(v24) * v7;
  }
  *(_QWORD *)&v96.f64[0] = v20;
  operator delete(v20);
LABEL_11:
  __p = 0;
  v96 = 0uLL;
  v27 = *(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152);
  if (!v27)
  {
    v32 = *(double **)&v96.f64[0];
    if (!*(_QWORD *)&v96.f64[0])
    {
      v33 = 1.0;
      goto LABEL_26;
    }
    v29 = 0;
    goto LABEL_20;
  }
  sub_23945E108((uint64_t)&__p, 0xF83E0F83E0F83E1 * (v27 >> 3));
  v29 = (double *)__p;
  v30 = *(_QWORD *)(a1 + 152);
  v31 = *(_QWORD *)(a1 + 160);
  v111 = __p;
  v107[0] = (float64x2_t)(unint64_t)&v111;
  if (v30 != v31)
  {
    do
    {
      sub_239CB8ECC((uint64_t)v107, v30, v13, v14, v15, v16, v17, v18, v19.f64[0], v28);
      v30 += 264;
    }
    while (v30 != v31);
    v29 = (double *)__p;
  }
  v32 = *(double **)&v96.f64[0];
  if (v29 != *(double **)&v96.f64[0])
  {
LABEL_20:
    v34 = (_BYTE)v32 - (_BYTE)v29;
    v35 = v32 - v29;
    v36 = v35 >> 1;
    sub_2395F71EC(v29, &v29[v35 >> 1], v32);
    v29 = (double *)__p;
    v37 = *((double *)__p + (v35 >> 1));
    if ((v34 & 8) == 0)
    {
      v38 = v36 - 1;
      if (v36 - 1 != v35)
      {
        sub_2395F71EC((double *)__p, (double *)__p + v38, (double *)__p + v35);
        v29 = (double *)__p;
      }
      v37 = (v37 + v29[v38]) * 0.5;
    }
    v33 = sqrt(v37) * v7;
    goto LABEL_25;
  }
  v33 = 1.0;
  if (v29)
  {
LABEL_25:
    *(_QWORD *)&v96.f64[0] = v29;
    operator delete(v29);
  }
LABEL_26:
  __p = 0;
  v96 = 0uLL;
  v39 = *(_QWORD *)(a1 + 176);
  v40 = *(_QWORD *)(a1 + 184);
  v41 = v40 - v39;
  if (v40 != v39)
  {
    sub_23945E108((uint64_t)&__p, 0x8E38E38E38E38E39 * (v41 >> 4));
    v41 = (uint64_t)__p;
    v39 = *(_QWORD *)(a1 + 176);
    v40 = *(_QWORD *)(a1 + 184);
  }
  *(_QWORD *)&v107[0].f64[0] = v41;
  sub_239CB8B50(v39, v40, (double **)v107, 0, v13.f64[0], v14, v15, v16, v17, v18.f64[0], v19);
  v42 = (double *)__p;
  if (__p == *(void **)&v96.f64[0])
  {
    v48 = 1.0;
    if (!__p)
      goto LABEL_36;
  }
  else
  {
    v43 = LOBYTE(v96.f64[0]) - (_BYTE)__p;
    v44 = (uint64_t)(*(_QWORD *)&v96.f64[0] - (_QWORD)__p) >> 3;
    v45 = v44 >> 1;
    sub_2395F71EC((double *)__p, (double *)__p + (v44 >> 1), *(double **)&v96.f64[0]);
    v42 = (double *)__p;
    v46 = *((double *)__p + (v44 >> 1));
    if ((v43 & 8) == 0)
    {
      v47 = v45 - 1;
      if (v45 - 1 != v44)
      {
        sub_2395F71EC((double *)__p, (double *)__p + v47, (double *)__p + v44);
        v42 = (double *)__p;
      }
      v46 = (v46 + v42[v47]) * 0.5;
    }
    v48 = sqrt(v46) * v7;
  }
  *(_QWORD *)&v96.f64[0] = v42;
  operator delete(v42);
LABEL_36:
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v49 = *(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200);
  if (!v49)
  {
    v77 = 1.0;
    goto LABEL_61;
  }
  sub_23945E108((uint64_t)&v91, 0xF0F0F0F0F0F0F0F1 * (v49 >> 3));
  v50 = (double *)v91;
  v51 = *(_QWORD *)(a1 + 200);
  v52 = *(_QWORD *)(a1 + 208);
  v94 = (double *)v91;
  if (v51 != v52)
  {
    do
    {
      v53 = *(void **)(v51 + 8);
      v54 = *(float64x2_t *)(v51 + 16);
      v55 = *(float64x2_t *)(v51 + 32);
      v56 = *(float64x2_t *)(v51 + 48);
      v57 = *(_QWORD *)(v51 + 72);
      v99 = *(_QWORD *)(v51 + 64);
      v97 = v55;
      v98 = v56;
      v96 = v54;
      __p = v53;
      v100 = v57;
      v58 = *(double *)(v51 + 96);
      v101 = *(float64x2_t *)(v51 + 80);
      v102 = v58;
      v103 = *(double *)(v51 + 104);
      v59 = *(std::__shared_weak_count **)(v51 + 120);
      v104 = *(_QWORD *)(v51 + 112);
      v105 = v59;
      if (v59)
      {
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldxr(p_shared_owners);
        while (__stxr(v61 + 1, p_shared_owners));
      }
      v106 = *(_BYTE *)(v51 + 128);
      v118[0] = v96;
      v118[1] = v97;
      v117 = v99;
      v116 = v98;
      v111 = *(void **)(v57 + 16);
      v62 = *(float64x2_t *)(v57 + 56);
      v107[1] = *(float64x2_t *)(v57 + 40);
      v107[2] = v62;
      v107[3] = *(float64x2_t *)(v57 + 72);
      v108 = *(_QWORD *)(v57 + 88);
      v109 = 0uLL;
      v107[0] = *(float64x2_t *)(v57 + 24);
      v110 = 0;
      sub_239458B60(v107, (double *)&v109);
      v113 = v110;
      v112 = v109;
      v63 = *(float64x2_t *)(v57 + 96);
      v115 = *(_QWORD *)(v57 + 112);
      v64.i64[0] = v115;
      v114 = v63;
      v65 = sub_239CAB2C4(v118, (uint64_t)&v111, &v116, &v101, v63, v64);
      if (v104)
        (*(void (**)(uint64_t, float64x2_t *, float64x2_t))(*(_QWORD *)v104 + 24))(v104, &v101, v65);
      _V1.D[1] = v101.f64[1];
      _D3 = v101.f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      v103 = _D2 + v102 * v102;
      v73 = v105;
      v74 = v94;
      *v94 = v103;
      v94 = v74 + 1;
      if (v73)
      {
        v75 = (unint64_t *)&v73->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v51 += 136;
    }
    while (v51 != v52);
    v50 = (double *)v91;
  }
  if (v50 != v92)
  {
    v78 = (_BYTE)v92 - (_BYTE)v50;
    v79 = v92 - v50;
    v80 = v79 >> 1;
    sub_2395F71EC(v50, &v50[v79 >> 1], v92);
    v50 = (double *)v91;
    v81 = *((double *)v91 + (v79 >> 1));
    if ((v78 & 8) == 0)
    {
      v82 = v80 - 1;
      if (v80 - 1 != v79)
      {
        sub_2395F71EC((double *)v91, (double *)v91 + v82, (double *)v91 + v79);
        v50 = (double *)v91;
      }
      v81 = (v81 + v50[v82]) * 0.5;
    }
    v77 = sqrt(v81) * v7;
    goto LABEL_60;
  }
  v77 = 1.0;
  if (v50)
  {
LABEL_60:
    v92 = v50;
    operator delete(v50);
  }
LABEL_61:
  v83 = 1.0e20;
  v84 = 0x3DDB7CDFD9D7BDBBLL;
  v85 = 0x3DDB7CDFD9D7BDBBLL;
  v86 = 1.0e20;
  if (v26 > 0.0)
  {
    v85 = *(_QWORD *)&v26;
    v86 = 1.0 / (v26 * v26);
  }
  *(_QWORD *)(a1 + 8) = v85;
  *(double *)(a1 + 16) = v86;
  v87 = 0x3DDB7CDFD9D7BDBBLL;
  v88 = 1.0e20;
  if (v33 > 0.0)
  {
    v87 = *(_QWORD *)&v33;
    v88 = 1.0 / (v33 * v33);
  }
  *(_QWORD *)(a1 + 24) = v87;
  *(double *)(a1 + 32) = v88;
  v89 = 0x3DDB7CDFD9D7BDBBLL;
  v90 = 1.0e20;
  if (v48 > 0.0)
  {
    v89 = *(_QWORD *)&v48;
    v90 = 1.0 / (v48 * v48);
  }
  *(_QWORD *)(a1 + 40) = v89;
  *(double *)(a1 + 48) = v90;
  if (v77 > 0.0)
  {
    v84 = *(_QWORD *)&v77;
    v83 = 1.0 / (v77 * v77);
  }
  *(_QWORD *)(a1 + 56) = v84;
  *(double *)(a1 + 64) = v83;
  *(_DWORD *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 396) = 0;
}

void sub_239CB7154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_239CB71D0(uint64_t a1, uint64_t a2)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  double v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  const double *v30;
  double v31;
  double v33;
  double v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v42;
  float64x2_t v46;
  double v47;
  float64x2_t v49;
  int64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v54;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  double v72;
  int8x16_t v73;
  int8x16_t v74;
  uint64_t v75;
  double *v76;
  float64x2_t *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  float64x2_t *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  char *v86;
  float64_t v87;
  float64_t v88;
  float64x2_t v92;
  const double *v93;
  float64x2_t v94;
  double v95;
  double v103;
  float64x2_t v107;
  float64x2_t v110;
  double v113;
  double v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  float64x2_t v127;
  int8x16_t v128;
  int8x16_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  unint64_t v135;
  double v136;
  unint64_t v137;
  double *v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  const double *v142;
  double v143;
  float64x2_t v145;
  uint64_t v146;
  float64x2_t v148;
  double v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v154;
  double v155;
  uint64_t v156;
  float64x2_t *v157;
  char *v158;
  unint64_t v159;
  uint64_t v160;
  float64x2_t *v161;
  double v165;
  char *v166;
  float64_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  int8x16_t v172;
  float64x2_t v173;
  unint64_t v174;
  double *f64;
  uint64_t v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v183;
  double v184;
  int64x2_t v185;
  float64x2_t v186[4];
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  float64x2_t v193;
  uint64_t v194;
  float64x2_t v195;
  float64_t v196;
  float64x2_t v197[2];
  float64x2x3_t v198;
  float64x2x3_t v199;

  kdebug_trace();
  v15 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v15 > 0x1F)
  {
    if (v15 != 32)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 32;
  }
  else
  {
    sub_23945E108(a2, 4 - (v15 >> 3));
  }
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  v18 = *(unsigned __int8 *)(a1 + 395);
  v19 = 0.0;
  if (v16 == v17)
  {
    v25 = *(unsigned __int8 *)(a1 + 395);
    v21 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 395))
    {
      v20 = v17 - v16 - 264;
      v21 = 0.0;
      if (v20 > 0x107)
      {
        v22 = v20 / 0x108 + 1;
        v23 = *(_QWORD *)(a1 + 128);
        v24 = v22 & 0x1FFFFFFFFFFFFFELL;
        do
        {
          v21 = v21 + *(double *)(v23 + 232) + *(double *)(v23 + 496);
          v23 += 528;
          v24 -= 2;
        }
        while (v24);
        if (v22 == (v22 & 0x1FFFFFFFFFFFFFELL))
          goto LABEL_13;
        v16 += 264 * (v22 & 0x1FFFFFFFFFFFFFELL);
      }
      do
      {
        v21 = v21 + *(double *)(v16 + 232);
        v16 += 264;
      }
      while (v16 != v17);
LABEL_13:
      v25 = 1;
      goto LABEL_21;
    }
    v21 = 0.0;
    do
    {
      v28 = *(_QWORD *)(v16 + 120);
      v29 = *(_QWORD *)(v16 + 128);
      _Q6.f64[0] = 1.0 / *(double *)(v29 + 16);
      v30 = (const double *)(v29 + 24);
      v199 = vld3q_f64(v30);
      v31 = *(double *)(v29 + 88);
      _Q20 = *(float64x2_t *)(v29 + 72);
      v33 = *(double *)(v29 + 112);
      _Q31 = *(float64x2_t *)(v29 + 96);
      v10.f64[0] = _Q6.f64[0] * *(double *)(v16 + 16);
      _Q13 = *(float64x2_t *)(v16 + 24);
      v36 = *(double *)(v16 + 64);
      v37 = *(float64x2_t *)(v16 + 48);
      v38 = *(double *)(v16 + 88);
      v39 = *(float64x2_t *)(v16 + 72);
      v40 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199.val[0], _Q13.f64[0]), v199.val[1], _Q13, 1), v199.val[2], *(double *)(v16 + 40));
      _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199.val[0], v37.f64[0]), v199.val[1], v37, 1), v199.val[2], v36);
      v42 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199.val[0], v39.f64[0]), v199.val[1], v39, 1), v199.val[2], v38);
      v6.f64[0] = v10.f64[0] * *(double *)(v28 + 16);
      _Q11 = *(float64x2_t *)(v28 + 24);
      v183 = *(double *)(v28 + 64);
      v184 = *(double *)(v28 + 40);
      _Q9 = *(float64x2_t *)(v28 + 48);
      v11.f64[0] = *(float64_t *)(v28 + 88);
      _Q30 = *(float64x2_t *)(v28 + 72);
      v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, _Q11.f64[0]), _Q5, _Q11, 1), v42, v184);
      v47 = *(double *)(v28 + 112);
      _Q12 = *(float64x2_t *)(v28 + 96);
      v49 = vmulq_n_f64(v46, v6.f64[0]);
      v185 = (int64x2_t)v49;
      v50 = (int64x2_t)vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, _Q9.f64[0]), _Q5, _Q9, 1), v42, v183), v6.f64[0]);
      v46.f64[0] = v49.f64[0] + -1.0;
      v51 = (float64x2_t)vzip1q_s64((int64x2_t)v46, v50);
      *(float64x2_t *)(v16 + 136) = v51;
      v52 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199.val[0], _Q31.f64[0]), v199.val[1], _Q31, 1), v199.val[2], v33);
      _Q0 = *(float64x2_t *)(v16 + 96);
      v49.f64[0] = *(float64_t *)(v16 + 112);
      v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v199.val[0], _Q0.f64[0]), v199.val[1], _Q0, 1), v199.val[2], v49.f64[0]);
      _Q23 = vmulq_f64(_Q20, _Q31);
      v199.val[1].f64[0] = _Q31.f64[1];
      __asm { FMLA            D23, D24, V20.D[1] }
      v199.val[2].f64[0] = _Q13.f64[1];
      __asm { FMLA            D24, D25, V20.D[1] }
      _Q31.f64[0] = v37.f64[1];
      __asm { FMLA            D25, D31, V20.D[1] }
      _Q13.f64[0] = v39.f64[1];
      __asm { FMLA            D31, D13, V20.D[1] }
      _Q0.f64[0] = *(float64_t *)(v16 + 104);
      __asm { FMLA            D13, D0, V20.D[1] }
      _Q0.f64[0] = _Q23.f64[0] + v31 * v33;
      _D22 = v199.val[2].f64[0] + v31 * v36;
      _Q23.f64[0] = _Q31.f64[0] + v31 * v38;
      v49.f64[0] = _Q13.f64[0] + v31 * v49.f64[0];
      v60 = vmulq_f64(_Q6, v49);
      v61 = vmulq_n_f64(v54, _Q6.f64[0]);
      _Q6.f64[0] = -_Q6.f64[0];
      v62 = vmlaq_n_f64(v61, v52, _Q6.f64[0]);
      v63 = vmlaq_f64(v60, _Q6, _Q0);
      __asm
      {
        FMLA            D0, D22, V11.D[1]
        FMLA            D6, D22, V9.D[1]
      }
      v64 = vmlaq_laneq_f64(vmulq_n_f64(v40, _Q30.f64[0]), _Q5, _Q30, 1);
      __asm { FMLA            D24, D22, V30.D[1] }
      v65 = vmlaq_laneq_f64(vmulq_n_f64(v40, _Q12.f64[0]), _Q5, _Q12, 1);
      __asm { FMLA            D5, D22, V12.D[1] }
      _Q0.f64[0] = _Q0.f64[0] + _Q23.f64[0] * v184;
      _Q6.f64[0] = _Q6.f64[0] + _Q23.f64[0] * v183;
      v66 = vmlaq_n_f64(v64, v42, v11.f64[0]);
      v11.f64[0] = v199.val[1].f64[0] + _Q23.f64[0] * v11.f64[0];
      v67 = vmlaq_n_f64(v65, v42, v47);
      v42.f64[0] = _Q5.f64[0] + _Q23.f64[0] * v47;
      v68 = (int64x2_t)vmlaq_f64(v63, v42, v10);
      v69 = (int64x2_t)vmlaq_n_f64(v62, v67, v10.f64[0]);
      v70 = (int64x2_t)vmulq_f64(_Q0, v6);
      v71 = (int64x2_t)vmulq_n_f64(v66, v6.f64[0]);
      v72 = vmulq_f64(v11, v6).f64[0];
      v73 = (int8x16_t)vzip2q_s64(v185, vdupq_lane_s64(COERCE__INT64(*(double *)&v50.i64[1] + -1.0), 0));
      *(_QWORD *)&v7.f64[0] = vdupq_laneq_s64(v71, 1).u64[0];
      v74 = (int8x16_t)vzip1q_s64(v71, v69);
      *(_QWORD *)&v7.f64[1] = v69.i64[1];
      v6 = (float64x2_t)vzip1q_s64(v70, (int64x2_t)vmulq_f64(_Q6, v6));
      *(double *)v70.i64 = v72 + -1.0;
      v5 = (float64x2_t)vzip1q_s64(v70, v68);
      *(int8x16_t *)(v16 + 152) = v74;
      *(int8x16_t *)(v16 + 168) = v73;
      *(float64x2_t *)(v16 + 184) = v7;
      *(float64x2_t *)(v16 + 200) = v6;
      *(float64x2_t *)(v16 + 216) = v5;
      v75 = *(_QWORD *)(v16 + 240);
      if (v75)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 24))(v75, v16 + 136);
        v6 = *(float64x2_t *)(v16 + 200);
        v5 = *(float64x2_t *)(v16 + 216);
        v73 = *(int8x16_t *)(v16 + 168);
        v7 = *(float64x2_t *)(v16 + 184);
        v51 = *(float64x2_t *)(v16 + 136);
        v74 = *(int8x16_t *)(v16 + 152);
        _Q6 = (float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL);
        *(_QWORD *)&v26 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
        v4 = (float64x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL);
        v11 = (float64x2_t)vextq_s8(v73, v73, 8uLL);
        v10 = (float64x2_t)vextq_s8(v74, v74, 8uLL);
        v12 = (float64x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL);
      }
      else
      {
        v4 = (float64x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL);
        v10 = (float64x2_t)vextq_s8(v74, v74, 8uLL);
        _Q6 = (float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL);
        *(_QWORD *)&v26 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
        v12 = (float64x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL);
        v11 = (float64x2_t)vextq_s8(v73, v73, 8uLL);
      }
      v19 = 0.0;
      v51.f64[1] = v12.f64[0];
      v9 = vmulq_f64(v51, v51);
      v27 = *(double *)(a1 + 16)
          * (v9.f64[0]
           + v12.f64[0] * v12.f64[0]
           + *(double *)v74.i64 * *(double *)v74.i64
           + v10.f64[0] * v10.f64[0]
           + *(double *)v73.i64 * *(double *)v73.i64
           + v11.f64[0] * v11.f64[0]
           + v7.f64[0] * v7.f64[0]
           + v4.f64[0] * v4.f64[0]
           + v6.f64[0] * v6.f64[0]
           + v26 * v26
           + v5.f64[0] * v5.f64[0]
           + _Q6.f64[0] * _Q6.f64[0]);
      *(double *)(v16 + 232) = v27;
      v21 = v21 + v27;
      v16 += 264;
    }
    while (v16 != v17);
    v18 = *(unsigned __int8 *)(a1 + 395);
    v25 = v18;
  }
LABEL_21:
  v76 = *(double **)a2;
  **(double **)a2 = v21 * 0.5;
  v77 = *(float64x2_t **)(a1 + 152);
  v78 = *(char **)(a1 + 160);
  if (v77 == (float64x2_t *)v78)
    goto LABEL_36;
  if (v25)
  {
    v79 = v78 - (char *)v77 - 264;
    v19 = 0.0;
    if (v79 < 0x108)
    {
      v80 = *(_QWORD *)(a1 + 152);
      do
      {
LABEL_35:
        v19 = *(double *)(v80 + 232) + v19;
        v80 += 264;
      }
      while ((char *)v80 != v78);
      goto LABEL_36;
    }
    v130 = v79 / 0x108 + 1;
    v80 = (uint64_t)v77 + 264 * (v130 & 0x1FFFFFFFFFFFFFELL);
    v131 = v130 & 0x1FFFFFFFFFFFFFELL;
    do
    {
      v19 = v19 + v77[14].f64[1] + v77[31].f64[0];
      v77 += 33;
      v131 -= 2;
    }
    while (v131);
    if (v130 != (v130 & 0x1FFFFFFFFFFFFFELL))
      goto LABEL_35;
  }
  else
  {
    v81 = v77 + 15;
    v19 = 0.0;
    do
    {
      v4.f64[0] = v81[-14].f64[0];
      if (fabs(v4.f64[0] + -1.0) >= 2.22044605e-16)
      {
        sub_239A444D4((uint64_t)"unknown file", 181, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v88 = v81[-8].f64[1];
      v87 = v81[-7].f64[0];
      v5.f64[0] = *(float64_t *)(*(_QWORD *)&v88 + 16);
      v9.f64[0] = *(float64_t *)(*(_QWORD *)&v88 + 40);
      _Q17 = *(float64x2_t *)(*(_QWORD *)&v88 + 24);
      _Q6.f64[0] = *(float64_t *)(*(_QWORD *)&v88 + 64);
      _Q7 = *(float64x2_t *)(*(_QWORD *)&v88 + 48);
      v6.f64[0] = *(float64_t *)(*(_QWORD *)&v88 + 88);
      _Q4 = *(float64x2_t *)(*(_QWORD *)&v88 + 72);
      v7.f64[0] = *(float64_t *)(*(_QWORD *)&v88 + 112);
      v92 = *(float64x2_t *)(*(_QWORD *)&v88 + 96);
      v93 = (const double *)(*(_QWORD *)&v87 + 24);
      *(float64x2x3_t *)(&_Q23 - 2) = vld3q_f64(v93);
      v94 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v5.f64[0], 0);
      *(_QWORD *)&v95 = *(_OWORD *)&vdivq_f64(v7, v5);
      _Q5 = vdivq_f64(v92, v94);
      v94.f64[0] = *(float64_t *)(*(_QWORD *)&v87 + 16);
      v5.f64[0] = *(float64_t *)(*(_QWORD *)&v87 + 88);
      _Q24 = *(float64x2_t *)(*(_QWORD *)&v87 + 72);
      v12.f64[0] = *(float64_t *)(*(_QWORD *)&v87 + 112);
      _Q25 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v94.f64[0], 0);
      *(_QWORD *)&v94.f64[0] = *(_OWORD *)&vdivq_f64(v12, v94);
      _Q19 = vdivq_f64(*(float64x2_t *)(*(_QWORD *)&v87 + 96), _Q25);
      v14 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, _Q19.f64[0]), _Q22, _Q19, 1), _Q23, v94.f64[0]);
      _Q28 = vmulq_f64(_Q24, _Q19);
      _Q19.f64[0] = _Q19.f64[1];
      __asm { FMLA            D28, D19, V24.D[1] }
      _Q28.f64[0] = vmlad_n_f64(_Q28.f64[0], v5.f64[0], v94.f64[0]);
      _Q25.f64[0] = v81[-11].f64[0];
      v103 = v81[-10].f64[1];
      _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, v81[-14].f64[1]), _Q22, *(float64x2_t *)((char *)v81 - 216), 1), _Q23, v81[-13].f64[1]);
      _D20 = v81[-13].f64[0];
      __asm { FMLA            D31, D20, V24.D[1] }
      v107 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, v81[-12].f64[0]), _Q22, v81[-12], 1), _Q23, _Q25.f64[0]);
      _D27 = v81[-12].f64[1];
      __asm { FMLA            D31, D27, V24.D[1] }
      _Q25.f64[0] = _D31 + v5.f64[0] * _Q25.f64[0];
      v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, v81[-11].f64[1]), _Q22, *(float64x2_t *)((char *)v81 - 168), 1), _Q23, v103);
      _D30 = v81[-10].f64[0];
      __asm { FMLA            D31, D30, V24.D[1] }
      v113 = _D31 + v5.f64[0] * v103;
      v114 = v81[-8].f64[0];
      v115 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, v81[-9].f64[0]), _Q22, v81[-9], 1), _Q23, v114);
      _Q22.f64[0] = v81[-9].f64[1];
      __asm { FMLA            D21, D22, V24.D[1] }
      v5.f64[0] = _Q21.f64[0] + v5.f64[0] * v114;
      v116 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q18, _Q17.f64[0]), v107, _Q17, 1), v110, v9.f64[0]);
      __asm { FMLA            D23, D25, V17.D[1] }
      v9.f64[0] = _Q23.f64[0] + v113 * v9.f64[0];
      v117 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q18, _Q7.f64[0]), v107, _Q7, 1), v110, _Q6.f64[0]);
      __asm { FMLA            D23, D25, V7.D[1] }
      _Q6.f64[0] = _Q23.f64[0] + v113 * _Q6.f64[0];
      v118 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q18, _Q4.f64[0]), v107, _Q4, 1), v110, v6.f64[0]);
      __asm { FMLA            D23, D25, V4.D[1] }
      v6.f64[0] = _Q23.f64[0] + v113 * v6.f64[0];
      v119 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q18, _Q5.f64[0]), v107, _Q5, 1), v110, v95);
      __asm { FMLA            D18, D25, V5.D[1] }
      _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], v113, v95);
      v120 = (int64x2_t)vmlaq_n_f64(vsubq_f64(v115, v14), v119, v4.f64[0]);
      v5 = vmlaq_f64(vsubq_f64(v5, _Q28), _Q18, v4);
      v121 = (int64x2_t)vmulq_f64(v4, v9);
      v122 = (int64x2_t)vmulq_n_f64(v116, v4.f64[0]);
      v123 = (int64x2_t)vmulq_f64(v4, _Q6);
      v124 = (int64x2_t)vmulq_n_f64(v117, v4.f64[0]);
      v125 = (int64x2_t)vmulq_n_f64(v118, v4.f64[0]);
      v4 = vmulq_f64(v4, v6);
      v119.f64[0] = *(double *)v122.i64 + -1.0;
      v126 = vdupq_lane_s64(COERCE__INT64(*(double *)&v124.i64[1] + -1.0), 0);
      v4.f64[0] = v4.f64[0] + -1.0;
      v127 = (float64x2_t)vzip1q_s64((int64x2_t)v119, v124);
      v128 = (int8x16_t)vzip1q_s64(v125, v120);
      *(_QWORD *)&v7.f64[0] = vdupq_laneq_s64(v125, 1).u64[0];
      *(_QWORD *)&v7.f64[1] = v120.i64[1];
      v129 = (int8x16_t)vzip2q_s64(v122, v126);
      v6 = (float64x2_t)vzip1q_s64(v121, v123);
      v125.i64[0] = *(_QWORD *)&v4.f64[0];
      v125.i64[1] = *(_QWORD *)&v5.f64[0];
      *(int8x16_t *)((char *)v81 - 88) = v128;
      *(float64x2_t *)((char *)v81 - 40) = v6;
      *(float64x2_t *)((char *)v81 - 56) = v7;
      *(int64x2_t *)((char *)v81 - 24) = v125;
      *(float64x2_t *)((char *)v81 - 104) = v127;
      *(int8x16_t *)((char *)v81 - 72) = v129;
      if (*(_QWORD *)&v81->f64[0])
      {
        (*(void (**)(_QWORD, float64_t *))(**(_QWORD **)&v81->f64[0] + 24))(*(_QWORD *)&v81->f64[0], &v81[-7].f64[1]);
        v6 = *(float64x2_t *)((char *)v81 - 40);
        v4 = *(float64x2_t *)((char *)v81 - 24);
        v129 = *(int8x16_t *)((char *)&v81[-5] + 8);
        v7 = *(float64x2_t *)((char *)v81 - 56);
        v127 = *(float64x2_t *)((char *)v81 - 104);
        v128 = *(int8x16_t *)((char *)&v81[-6] + 8);
        v5 = (float64x2_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL);
        *(_QWORD *)&v83 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
        v9 = (float64x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL);
        *(_QWORD *)&v84 = vextq_s8(v129, v129, 8uLL).u64[0];
        *(_QWORD *)&v82 = vextq_s8(v128, v128, 8uLL).u64[0];
        v12 = (float64x2_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL);
      }
      else
      {
        *(_QWORD *)&v82 = vextq_s8(v128, v128, 8uLL).u64[0];
        v9 = (float64x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL);
        *(_QWORD *)&v83 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
        v12 = (float64x2_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL);
        *(_QWORD *)&v84 = vextq_s8(v129, v129, 8uLL).u64[0];
      }
      v127.f64[1] = v12.f64[0];
      _Q6 = vmulq_f64(v127, v127);
      v85 = *(double *)(a1 + 32)
          * (_Q6.f64[0]
           + v12.f64[0] * v12.f64[0]
           + *(double *)v128.i64 * *(double *)v128.i64
           + v82 * v82
           + *(double *)v129.i64 * *(double *)v129.i64
           + v84 * v84
           + v7.f64[0] * v7.f64[0]
           + v9.f64[0] * v9.f64[0]
           + v6.f64[0] * v6.f64[0]
           + v83 * v83
           + v4.f64[0] * v4.f64[0]
           + v5.f64[0] * v5.f64[0]);
      v81[-1].f64[1] = v85;
      v19 = v85 + v19;
      v86 = (char *)&v81[1].f64[1];
      v81 = (float64x2_t *)((char *)v81 + 264);
    }
    while (v86 != v78);
    v76 = *(double **)a2;
    v18 = *(unsigned __int8 *)(a1 + 395);
  }
LABEL_36:
  v76[1] = v19 * 0.5;
  v132 = *(_QWORD *)(a1 + 176);
  v133 = *(_QWORD *)(a1 + 184);
  v134 = 0.0;
  if (v132 == v133)
  {
    v136 = 0.0;
  }
  else
  {
    if (v18)
    {
      v135 = v133 - v132 - 144;
      v136 = 0.0;
      if (v135 > 0x8F)
      {
        v137 = v135 / 0x90 + 1;
        v138 = (double *)(v132 + 256);
        v139 = v137 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v136 = v136 + *(v138 - 18) + *v138;
          v138 += 36;
          v139 -= 2;
        }
        while (v139);
        if (v137 == (v137 & 0x3FFFFFFFFFFFFFELL))
          goto LABEL_44;
        v132 += 144 * (v137 & 0x3FFFFFFFFFFFFFELL);
      }
      do
      {
        v136 = v136 + *(double *)(v132 + 112);
        v132 += 144;
      }
      while (v132 != v133);
LABEL_44:
      v18 = 1;
      goto LABEL_51;
    }
    v136 = 0.0;
    do
    {
      v141 = *(_QWORD *)(v132 + 72);
      v142 = (const double *)(v141 + 24);
      v198 = vld3q_f64(v142);
      v7.f64[0] = *(float64_t *)(v141 + 16);
      v143 = *(double *)(v141 + 88);
      _Q5 = *(float64x2_t *)(v141 + 72);
      _Q6.f64[0] = *(float64_t *)(v141 + 112);
      v145 = *(float64x2_t *)(v141 + 96);
      v146 = *(_QWORD *)(v132 + 80);
      v9.f64[0] = *(float64_t *)(v146 + 16);
      _D19 = *(_QWORD *)(v146 + 64);
      _Q23.f64[0] = *(float64_t *)(v146 + 112);
      v148 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7.f64[0], 0);
      *(_QWORD *)&v149 = *(_OWORD *)&vdivq_f64(_Q6, v7);
      _Q6 = vdivq_f64(v145, v148);
      v150 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9.f64[0], 0);
      v9 = vdivq_f64(_Q23, v9);
      _Q23.f64[0] = *(float64_t *)(v132 + 32);
      v14.f64[0] = *(float64_t *)(*(_QWORD *)(v132 + 64) + 16);
      _Q23 = vmulq_f64(_Q23, v14);
      v151 = vmulq_n_f64(*(float64x2_t *)(v132 + 16), v14.f64[0]);
      v14 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v198.val[0], _Q6.f64[0]), v198.val[1], _Q6, 1), v198.val[2], v149);
      _Q27 = vmulq_f64(_Q5, _Q6);
      _Q6.f64[0] = _Q6.f64[1];
      __asm { FMLA            D27, D6, V5.D[1] }
      _Q27.f64[0] = vmlad_n_f64(_Q27.f64[0], v143, v149);
      _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v198.val[0], v151.f64[0]), v198.val[1], v151, 1), v198.val[2], _Q23.f64[0]);
      v198.val[0] = vmulq_f64(_Q5, v151);
      v198.val[1].f64[0] = v151.f64[1];
      __asm { FMLA            D0, D1, V5.D[1] }
      v198.val[0].f64[0] = vmlad_n_f64(v198.val[0].f64[0], v143, _Q23.f64[0]);
      *(_QWORD *)&v198.val[0].f64[0] = *(_OWORD *)&vsubq_f64(v198.val[0], _Q27);
      v198.val[1] = vsubq_f64(_Q3, v14);
      v198.val[2] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v146 + 24), v198.val[1].f64[0]), *(float64x2_t *)(v146 + 48), v198.val[1], 1), *(float64x2_t *)(v146 + 72), v198.val[0].f64[0]);
      __asm { FMLA            D3, D19, V1.D[1] }
      _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], *(double *)(v146 + 88), v198.val[0].f64[0]);
      v7 = vaddq_f64(v9, _Q3);
      v198.val[1] = vaddq_f64(vdivq_f64(*(float64x2_t *)(v146 + 96), v150), v198.val[2]);
      v198.val[2].f64[0] = v198.val[1].f64[1];
      __asm { FMLA            D0, D2, V1.D[1] }
      v198.val[2].f64[0] = 1.0 / sqrt(vmlad_n_f64(v198.val[0].f64[0], v7.f64[0], v7.f64[0]));
      v154 = vmlaq_n_f64(vnegq_f64(*(float64x2_t *)(v132 + 40)), v198.val[1], v198.val[2].f64[0]);
      *(float64x2_t *)(v132 + 88) = v154;
      v198.val[1].f64[0] = *(float64_t *)(v132 + 56);
      *(_QWORD *)&v155 = *(_OWORD *)&vmlaq_f64(vnegq_f64(v198.val[1]), v198.val[2], v7);
      *(double *)(v132 + 104) = v155;
      v156 = *(_QWORD *)(v132 + 120);
      if (v156)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v156 + 24))(v156, v132 + 88);
        v155 = *(double *)(v132 + 104);
        v154 = *(float64x2_t *)(v132 + 88);
      }
      v154.f64[1] = *(double *)vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).i64;
      v140 = *(double *)(a1 + 48) * (vmulq_f64(v154, v154).f64[0] + v154.f64[1] * v154.f64[1] + v155 * v155);
      *(double *)(v132 + 112) = v140;
      v136 = v136 + v140;
      v132 += 144;
    }
    while (v132 != v133);
    v76 = *(double **)a2;
    v18 = *(unsigned __int8 *)(a1 + 395);
  }
LABEL_51:
  v76[2] = v136 * 0.5;
  v157 = *(float64x2_t **)(a1 + 200);
  v158 = *(char **)(a1 + 208);
  if (v157 == (float64x2_t *)v158)
    goto LABEL_64;
  if (v18)
  {
    v159 = v158 - (char *)v157 - 136;
    if (v159 < 0x88)
    {
      v134 = 0.0;
      v160 = *(_QWORD *)(a1 + 200);
      do
      {
LABEL_63:
        v134 = *(double *)(v160 + 104) + v134;
        v160 += 136;
      }
      while ((char *)v160 != v158);
      goto LABEL_64;
    }
    v174 = v159 / 0x88 + 1;
    v160 = (uint64_t)v157 + 136 * (v174 & 0x3FFFFFFFFFFFFFELL);
    f64 = v157[15].f64;
    v134 = 0.0;
    v176 = v174 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      v134 = v134 + *(f64 - 17) + *f64;
      f64 += 34;
      v176 -= 2;
    }
    while (v176);
    if (v174 != (v174 & 0x3FFFFFFFFFFFFFELL))
      goto LABEL_63;
  }
  else
  {
    v161 = v157 + 7;
    v134 = 0.0;
    do
    {
      v167 = v161[-3].f64[1];
      v168 = v161[-5];
      v197[0] = v161[-6];
      v197[1] = v168;
      v169 = v161[-4];
      v196 = v161[-3].f64[0];
      v195 = v169;
      v190 = *(_QWORD *)(*(_QWORD *)&v167 + 16);
      v170 = *(float64x2_t *)(*(_QWORD *)&v167 + 56);
      v186[1] = *(float64x2_t *)(*(_QWORD *)&v167 + 40);
      v186[2] = v170;
      v186[3] = *(float64x2_t *)(*(_QWORD *)&v167 + 72);
      v187 = *(_QWORD *)(*(_QWORD *)&v167 + 88);
      v188 = 0uLL;
      v186[0] = *(float64x2_t *)(*(_QWORD *)&v167 + 24);
      v189 = 0;
      sub_239458B60(v186, (double *)&v188);
      v192 = v189;
      v191 = v188;
      v171 = *(float64x2_t *)(*(_QWORD *)&v167 + 96);
      v194 = *(_QWORD *)(*(_QWORD *)&v167 + 112);
      v172.i64[0] = v194;
      v193 = v171;
      v173 = sub_239CAB2C4(v197, (uint64_t)&v190, &v195, v161 - 2, v171, v172);
      if (*(_QWORD *)&v161->f64[0])
        (*(void (**)(_QWORD, float64x2_t *, float64x2_t))(**(_QWORD **)&v161->f64[0] + 24))(*(_QWORD *)&v161->f64[0], v161 - 2, v173);
      _Q1 = v161[-2];
      _D3 = v161[-2].f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      v165 = *(double *)(a1 + 64) * (_D2 + v161[-1].f64[0] * v161[-1].f64[0]);
      v161[-1].f64[1] = v165;
      v134 = v165 + v134;
      v166 = (char *)&v161[1].f64[1];
      v161 = (float64x2_t *)((char *)v161 + 136);
    }
    while (v166 != v158);
    v76 = *(double **)a2;
  }
LABEL_64:
  v76[3] = v134 * 0.5;
  *(_BYTE *)(a1 + 395) = 1;
  v177 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v178 = **(double **)a2;
  v179 = *(double *)(*(_QWORD *)a2 + 8);
  v180 = *(double *)(*(_QWORD *)a2 + 16);
  v181 = *(double *)(*(_QWORD *)a2 + 24);
  kdebug_trace();
  return v177 + v178 + v179 + v180 + v181;
}

void sub_239CB7D88(_Unwind_Exception *a1)
{
  sub_239C302B4();
  _Unwind_Resume(a1);
}

uint64_t sub_239CB7DAC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  _DWORD *v25;
  unsigned int v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v33[2];
  void *v34[2];
  int v35;
  void *v36[2];
  void *__p[2];
  int v38;

  if (*(_BYTE *)(a1 + 168))
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (v2 != (_QWORD *)(a1 + 40))
    {
      v3 = 0;
      while (1)
      {
        if ((*((_BYTE *)v2 + 68) & 6) != 0)
        {
          v4 = (_QWORD *)v2[1];
          if (v4)
            goto LABEL_9;
        }
        else
        {
          v3 += *((unsigned __int8 *)v2 + 44);
          v4 = (_QWORD *)v2[1];
          if (v4)
          {
            do
            {
LABEL_9:
              v5 = v4;
              v4 = (_QWORD *)*v4;
            }
            while (v4);
            goto LABEL_4;
          }
        }
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
LABEL_4:
        v2 = v5;
        if (v5 == (_QWORD *)(a1 + 40))
          return v3;
      }
    }
    return 0;
  }
  else
  {
    *(_OWORD *)v33 = 0u;
    *(_OWORD *)v34 = 0u;
    v35 = 1065353216;
    *(_OWORD *)v36 = 0u;
    *(_OWORD *)__p = 0u;
    v38 = 1065353216;
    v7 = *(_QWORD **)(a1 + 8);
    if (v7 == (_QWORD *)(a1 + 16))
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        if ((*((_BYTE *)v7 + 164) & 6) != 0)
          v8 = 1;
        v9 = (_QWORD *)v7[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v7[2];
            v6 = *v10 == (_QWORD)v7;
            v7 = v10;
          }
          while (!v6);
        }
        v7 = v10;
      }
      while (v10 != (_QWORD *)(a1 + 16));
    }
    v11 = *(uint64_t **)(a1 + 32);
    v12 = (uint64_t *)(a1 + 40);
    if (v11 == (uint64_t *)(a1 + 40))
    {
      v3 = 0;
    }
    else
    {
      LODWORD(v3) = 0;
      v13 = 0;
      do
      {
        if ((*((_BYTE *)v11 + 68) & 6) != 0)
          v8 = 1;
        if (*((_BYTE *)v11 + 44))
          v3 = (v13 + 1);
        else
          v3 = v3;
        if (*((_BYTE *)v11 + 44))
          ++v13;
        v14 = (uint64_t *)v11[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v11[2];
            v6 = *v15 == (_QWORD)v11;
            v11 = v15;
          }
          while (!v6);
        }
        v11 = v15;
      }
      while (v15 != v12);
    }
    if (v8)
    {
      sub_239CB806C((uint64_t *)(a1 + 56), (uint64_t)v33);
      v16 = __p[0];
      if (__p[0])
      {
        if (*v12)
        {
          v17 = 0;
          v18 = __p[0];
          do
          {
            v20 = v18[4];
            v19 = a1 + 40;
            v21 = *v12;
            do
            {
              v22 = *(_DWORD *)(v21 + 32);
              v23 = v22 >= v20;
              if (v22 >= v20)
                v24 = (uint64_t *)v21;
              else
                v24 = (uint64_t *)(v21 + 8);
              if (v23)
                v19 = v21;
              v21 = *v24;
            }
            while (*v24);
            if ((uint64_t *)v19 == v12 || v20 < *(_DWORD *)(v19 + 32))
              v19 = a1 + 40;
            if (*(_DWORD *)(v19 + 72) == v18[5])
              ++v17;
            v18 = *(_DWORD **)v18;
          }
          while (v18);
        }
        else
        {
          v17 = 0;
          v25 = __p[0];
          do
          {
            if (*(_DWORD *)(a1 + 112) == v25[5])
              ++v17;
            v25 = *(_DWORD **)v25;
          }
          while (v25);
        }
        v23 = v3 >= v17;
        v26 = v3 - v17;
        if (v23)
          v3 = v26;
        else
          v3 = 0;
        do
        {
          v27 = (_QWORD *)*v16;
          operator delete(v16);
          v16 = v27;
        }
        while (v27);
      }
    }
    v28 = v36[0];
    v36[0] = 0;
    if (v28)
      operator delete(v28);
    v29 = v34[0];
    if (v34[0])
    {
      do
      {
        v30 = (_QWORD *)*v29;
        operator delete(v29);
        v29 = v30;
      }
      while (v30);
    }
    v31 = v33[0];
    v33[0] = 0;
    if (v31)
      operator delete(v31);
  }
  return v3;
}

void sub_239CB8058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239C292B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_239CB806C(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t k;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;

  v3 = result;
  v4 = *result;
  v5 = result[1];
  if (*result != v5)
  {
    do
    {
      v7 = *(_QWORD *)(v4 + 120);
      if ((*(_BYTE *)(v7 + 124) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v4 + 128) + 124) & 6) != 0)
      {
        v20 = *(_DWORD *)v7;
        v21 = &v20;
        v6 = sub_2395EC77C(a2, &v20, (uint64_t)&unk_239EC6E98, &v21);
        ++*((_DWORD *)v6 + 5);
        v20 = **(_DWORD **)(v4 + 128);
        v21 = &v20;
        result = sub_2395EC77C(a2, &v20, (uint64_t)&unk_239EC6E98, &v21);
        ++*((_DWORD *)result + 5);
      }
      v4 += 264;
    }
    while (v4 != v5);
  }
  v8 = v3[3];
  for (i = v3[4]; v8 != i; v8 += 264)
  {
    v11 = *(_QWORD *)(v8 + 120);
    if ((*(_BYTE *)(v11 + 124) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 128) + 124) & 6) != 0)
    {
      v20 = *(_DWORD *)v11;
      v21 = &v20;
      v10 = sub_2395EC77C(a2, &v20, (uint64_t)&unk_239EC6E98, &v21);
      ++*((_DWORD *)v10 + 5);
      v20 = **(_DWORD **)(v8 + 128);
      v21 = &v20;
      result = sub_2395EC77C(a2, &v20, (uint64_t)&unk_239EC6E98, &v21);
      ++*((_DWORD *)result + 5);
    }
  }
  v12 = v3[6];
  for (j = v3[7]; v12 != j; v12 += 144)
  {
    v14 = *(_QWORD *)(v12 + 64);
    if ((*(_BYTE *)(v14 + 28) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v12 + 72) + 124) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v12 + 80) + 124) & 6) != 0)
    {
      v20 = *(_DWORD *)v14;
      v21 = &v20;
      v15 = sub_2395EC77C(a2 + 40, &v20, (uint64_t)&unk_239EC6E98, &v21);
      ++*((_DWORD *)v15 + 5);
      v20 = **(_DWORD **)(v12 + 72);
      v21 = &v20;
      v16 = sub_2395EC77C(a2, &v20, (uint64_t)&unk_239EC6E98, &v21);
      ++*((_DWORD *)v16 + 5);
      v20 = **(_DWORD **)(v12 + 80);
      v21 = &v20;
      result = sub_2395EC77C(a2, &v20, (uint64_t)&unk_239EC6E98, &v21);
      ++*((_DWORD *)result + 5);
    }
  }
  v17 = v3[9];
  for (k = v3[10]; v17 != k; v17 += 136)
  {
    v19 = *(_QWORD *)(v17 + 72);
    if ((*(_BYTE *)(v19 + 124) & 6) != 0)
    {
      v20 = *(_DWORD *)v19;
      v21 = &v20;
      result = sub_2395EC77C(a2, &v20, (uint64_t)&unk_239EC6E98, &v21);
      ++*((_DWORD *)result + 5);
    }
  }
  return result;
}

uint64_t sub_239CB8368(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  _DWORD *v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v31[2];
  void *v32[2];
  int v33;
  void *v34[2];
  void *__p[2];
  int v36;

  if (*(_BYTE *)(a1 + 168))
  {
    v2 = *(_QWORD **)(a1 + 8);
    if (v2 != (_QWORD *)(a1 + 16))
    {
      v3 = 0;
      while (1)
      {
        if ((*((_BYTE *)v2 + 164) & 6) != 0)
        {
          v4 = (_QWORD *)v2[1];
          if (v4)
            goto LABEL_9;
        }
        else
        {
          v3 += *((unsigned __int8 *)v2 + 44);
          v4 = (_QWORD *)v2[1];
          if (v4)
          {
            do
            {
LABEL_9:
              v5 = v4;
              v4 = (_QWORD *)*v4;
            }
            while (v4);
            goto LABEL_4;
          }
        }
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
LABEL_4:
        v2 = v5;
        if (v5 == (_QWORD *)(a1 + 16))
          return v3;
      }
    }
    return 0;
  }
  else
  {
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)v32 = 0u;
    v33 = 1065353216;
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)__p = 0u;
    v36 = 1065353216;
    v7 = *(uint64_t **)(a1 + 8);
    v8 = (uint64_t *)(a1 + 16);
    if (v7 == (uint64_t *)(a1 + 16))
    {
      v3 = 0;
      v9 = 0;
    }
    else
    {
      LODWORD(v3) = 0;
      v9 = 0;
      v10 = 0;
      do
      {
        if ((*((_BYTE *)v7 + 164) & 6) != 0)
          v9 = 1;
        if (*((_BYTE *)v7 + 44))
          v3 = (v10 + 1);
        else
          v3 = v3;
        if (*((_BYTE *)v7 + 44))
          ++v10;
        v11 = (uint64_t *)v7[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (uint64_t *)v7[2];
            v6 = *v12 == (_QWORD)v7;
            v7 = v12;
          }
          while (!v6);
        }
        v7 = v12;
      }
      while (v12 != v8);
    }
    v13 = *(_QWORD **)(a1 + 32);
    if (v13 != (_QWORD *)(a1 + 40))
    {
      do
      {
        if ((*((_BYTE *)v13 + 68) & 6) != 0)
          v9 = 1;
        v16 = (_QWORD *)v13[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v13[2];
            v6 = *v17 == (_QWORD)v13;
            v13 = v17;
          }
          while (!v6);
        }
        v13 = v17;
      }
      while (v17 != (_QWORD *)(a1 + 40));
    }
    if (v9)
    {
      sub_239CB806C((uint64_t *)(a1 + 56), (uint64_t)v31);
      v14 = v32[0];
      if (v32[0])
      {
        if (*v8)
        {
          v15 = 0;
          do
          {
            v19 = v14[4];
            v18 = a1 + 16;
            v20 = *v8;
            do
            {
              v21 = *(_DWORD *)(v20 + 32);
              v22 = v21 >= v19;
              if (v21 >= v19)
                v23 = (uint64_t *)v20;
              else
                v23 = (uint64_t *)(v20 + 8);
              if (v22)
                v18 = v20;
              v20 = *v23;
            }
            while (*v23);
            if ((uint64_t *)v18 == v8 || v19 < *(_DWORD *)(v18 + 32))
              v18 = a1 + 16;
            if (*(_DWORD *)(v18 + 168) == v14[5])
              ++v15;
            v14 = *(_DWORD **)v14;
          }
          while (v14);
        }
        else
        {
          v15 = 0;
          do
          {
            if (*(_DWORD *)(a1 + 184) == v14[5])
              ++v15;
            v14 = *(_DWORD **)v14;
          }
          while (v14);
        }
      }
      else
      {
        v15 = 0;
      }
      if (v3 >= v15)
        v3 = v3 - v15;
      else
        v3 = 0;
      v24 = __p[0];
      if (__p[0])
      {
        do
        {
          v25 = (_QWORD *)*v24;
          operator delete(v24);
          v24 = v25;
        }
        while (v25);
      }
    }
    v26 = v34[0];
    v34[0] = 0;
    if (v26)
      operator delete(v26);
    v27 = v32[0];
    if (v32[0])
    {
      do
      {
        v28 = (_QWORD *)*v27;
        operator delete(v27);
        v27 = v28;
      }
      while (v28);
    }
    v29 = v31[0];
    v31[0] = 0;
    if (v29)
      operator delete(v29);
  }
  return v3;
}

void sub_239CB8614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239C292B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_239CB8628(uint64_t a1)
{
  unint64_t result;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 168))
    return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3);
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 == (_QWORD *)(a1 + 16))
  {
LABEL_4:
    v3 = *(_QWORD **)(a1 + 32);
    if (v3 == (_QWORD *)(a1 + 40))
      return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3);
    while ((*((_BYTE *)v3 + 68) & 6) == 0)
    {
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v6 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v6);
      }
      v3 = v8;
      if (v8 == (_QWORD *)(a1 + 40))
        return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3);
    }
  }
  else
  {
    while ((*((_BYTE *)v2 + 164) & 6) == 0)
    {
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
      if (v5 == (_QWORD *)(a1 + 16))
        goto LABEL_4;
    }
  }
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 136);
  if (v9 == v10)
    return 0;
  result = 0;
  v11 = 0;
  do
  {
    if ((*(_BYTE *)(*(_QWORD *)(v9 + 72) + 124) & 6) == 0)
      result = ++v11;
    v9 += 136;
  }
  while (v9 != v10);
  return result;
}

unint64_t sub_239CB8740(uint64_t a1)
{
  unint64_t result;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 168))
    return 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4);
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 == (_QWORD *)(a1 + 16))
  {
LABEL_4:
    v3 = *(_QWORD **)(a1 + 32);
    if (v3 == (_QWORD *)(a1 + 40))
      return 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4);
    while ((*((_BYTE *)v3 + 68) & 6) == 0)
    {
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v6 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v6);
      }
      v3 = v8;
      if (v8 == (_QWORD *)(a1 + 40))
        return 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4);
    }
  }
  else
  {
    while ((*((_BYTE *)v2 + 164) & 6) == 0)
    {
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
      if (v5 == (_QWORD *)(a1 + 16))
        goto LABEL_4;
    }
  }
  v9 = *(_QWORD **)(a1 + 104);
  v10 = *(_QWORD **)(a1 + 112);
  if (v9 == v10)
    return 0;
  result = 0;
  v11 = 0;
  do
  {
    if ((*(_BYTE *)(v9[8] + 28) & 6) == 0
      && (*(_BYTE *)(v9[9] + 124) & 6) == 0
      && (*(_BYTE *)(v9[10] + 124) & 6) == 0)
    {
      result = ++v11;
    }
    v9 += 18;
  }
  while (v9 != v10);
  return result;
}

uint64_t sub_239CB8888(uint64_t a1)
{
  uint64_t result;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 168))
    return 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 == (_QWORD *)(a1 + 16))
  {
LABEL_4:
    v3 = *(_QWORD **)(a1 + 32);
    if (v3 == (_QWORD *)(a1 + 40))
      return 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
    while ((*((_BYTE *)v3 + 68) & 6) == 0)
    {
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v6 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v6);
      }
      v3 = v8;
      if (v8 == (_QWORD *)(a1 + 40))
        return 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
    }
  }
  else
  {
    while ((*((_BYTE *)v2 + 164) & 6) == 0)
    {
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
      if (v5 == (_QWORD *)(a1 + 16))
        goto LABEL_4;
    }
  }
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  if (v9 == v10)
    return 0;
  result = 0;
  v11 = 0;
  do
  {
    if ((*(_BYTE *)(*(_QWORD *)(v9 + 120) + 124) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v9 + 128) + 124) & 6) == 0)
      result = ++v11;
    v9 += 264;
  }
  while (v9 != v10);
  return result;
}

uint64_t sub_239CB89C0(uint64_t a1)
{
  uint64_t result;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 168))
    return 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3);
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 == (_QWORD *)(a1 + 16))
  {
LABEL_4:
    v3 = *(_QWORD **)(a1 + 32);
    if (v3 == (_QWORD *)(a1 + 40))
      return 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3);
    while ((*((_BYTE *)v3 + 68) & 6) == 0)
    {
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v6 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v6);
      }
      v3 = v8;
      if (v8 == (_QWORD *)(a1 + 40))
        return 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3);
    }
  }
  else
  {
    while ((*((_BYTE *)v2 + 164) & 6) == 0)
    {
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
      if (v5 == (_QWORD *)(a1 + 16))
        goto LABEL_4;
    }
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  if (v9 == v10)
    return 0;
  result = 0;
  v11 = 0;
  do
  {
    if ((*(_BYTE *)(*(_QWORD *)(v9 + 120) + 124) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v9 + 128) + 124) & 6) == 0)
      result = ++v11;
    v9 += 264;
  }
  while (v9 != v10);
  return result;
}

uint64_t sub_239CB8AF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

double **sub_239CB8B50(uint64_t a1, uint64_t a2, double **a3, char a4, double a5, double a6, double a7, double a8, double a9, double a10, float64x2_t _Q6)
{
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v16;
  float64x2_t v17;
  double v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const double *v23;
  double v24;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30;
  double v37;
  float64x2_t v38;
  double v39;
  double *v40;
  unint64_t *v41;
  unint64_t v42;
  double *v43;
  double v44;
  double v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  double *v49;
  unint64_t v50;
  float64x2_t v52;
  _BYTE v53[32];
  float64x2_t v54;
  uint64_t v55;
  float64x2_t v56;
  double v57;
  double v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  char v61;
  float64x2x3_t v62;

  if (a1 != a2)
  {
    v16 = a1;
    if (a4)
    {
      do
      {
        v44 = *(double *)(v16 + 104);
        v56 = *(float64x2_t *)(v16 + 88);
        v57 = v44;
        v45 = *(double *)(v16 + 112);
        v58 = v45;
        v46 = *(std::__shared_weak_count **)(v16 + 128);
        v59 = *(_QWORD *)(v16 + 120);
        v60 = v46;
        if (v46)
        {
          p_shared_owners = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldxr(p_shared_owners);
          while (__stxr(v48 + 1, p_shared_owners));
          v61 = *(_BYTE *)(v16 + 136);
          v49 = *a3;
          *v49 = v45;
          *a3 = v49 + 1;
          do
            v50 = __ldaxr(p_shared_owners);
          while (__stlxr(v50 - 1, p_shared_owners));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        else
        {
          v43 = *a3;
          *v43 = v45;
          *a3 = v43 + 1;
        }
        v16 += 144;
      }
      while (v16 != a2);
    }
    else
    {
      do
      {
        v17 = *(float64x2_t *)(v16 + 64);
        *(_OWORD *)v53 = *(_OWORD *)(v16 + 32);
        *(_OWORD *)&v53[16] = *(_OWORD *)(v16 + 48);
        v52 = *(float64x2_t *)(v16 + 16);
        v54 = v17;
        v55 = *(_QWORD *)(v16 + 80);
        v18 = *(double *)(v16 + 104);
        v56 = *(float64x2_t *)(v16 + 88);
        v57 = v18;
        v58 = *(double *)(v16 + 112);
        v19 = *(_QWORD *)(v16 + 120);
        v20 = *(std::__shared_weak_count **)(v16 + 128);
        v59 = v19;
        v60 = v20;
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v61 = *(_BYTE *)(v16 + 136);
        v23 = (const double *)(*(_QWORD *)&v17.f64[1] + 24);
        v62 = vld3q_f64(v23);
        v17.f64[0] = *(float64_t *)(*(_QWORD *)&v17.f64[1] + 16);
        v24 = *(double *)(*(_QWORD *)&v54.f64[1] + 88);
        _Q5 = *(float64x2_t *)(*(_QWORD *)&v54.f64[1] + 72);
        _Q6.f64[0] = *(float64_t *)(*(_QWORD *)&v54.f64[1] + 112);
        v11.f64[0] = *(float64_t *)(v55 + 16);
        _D19 = *(_QWORD *)(v55 + 64);
        v12.f64[0] = *(float64_t *)(v55 + 112);
        v27 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v17.f64[0], 0);
        *(_QWORD *)&v28 = *(_OWORD *)&vdivq_f64(_Q6, v17);
        _Q6 = vdivq_f64(*(float64x2_t *)(*(_QWORD *)&v54.f64[1] + 96), v27);
        v29 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0);
        v11 = vdivq_f64(v12, v11);
        v12.f64[0] = *(float64_t *)v53;
        v27.f64[0] = *(float64_t *)&v53[24];
        v13.f64[0] = *(float64_t *)(*(_QWORD *)&v54.f64[0] + 16);
        v12 = vmulq_f64(v12, v13);
        v30 = vmulq_n_f64(v52, v13.f64[0]);
        v13 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v62.val[0], _Q6.f64[0]), v62.val[1], _Q6, 1), v62.val[2], v28);
        _Q28 = vmulq_f64(_Q5, _Q6);
        _Q6.f64[0] = _Q6.f64[1];
        __asm { FMLA            D28, D6, V5.D[1] }
        _Q28.f64[0] = vmlad_n_f64(_Q28.f64[0], v24, v28);
        _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v62.val[0], v30.f64[0]), v62.val[1], v30, 1), v62.val[2], v12.f64[0]);
        v62.val[0] = vmulq_f64(_Q5, v30);
        v62.val[1].f64[0] = v30.f64[1];
        __asm { FMLA            D0, D1, V5.D[1] }
        v62.val[0].f64[0] = vmlad_n_f64(v62.val[0].f64[0], v24, v12.f64[0]);
        *(_QWORD *)&v62.val[0].f64[0] = *(_OWORD *)&vsubq_f64(v62.val[0], _Q28);
        v62.val[1] = vsubq_f64(_Q3, v13);
        v62.val[2] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v55 + 24), v62.val[1].f64[0]), *(float64x2_t *)(v55 + 48), v62.val[1], 1), *(float64x2_t *)(v55 + 72), v62.val[0].f64[0]);
        __asm { FMLA            D3, D19, V1.D[1] }
        _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], *(double *)(v55 + 88), v62.val[0].f64[0]);
        v62.val[1] = vaddq_f64(v11, _Q3);
        v62.val[2] = vaddq_f64(vdivq_f64(*(float64x2_t *)(v55 + 96), v29), v62.val[2]);
        _Q3.f64[0] = v62.val[2].f64[1];
        __asm { FMLA            D0, D3, V2.D[1] }
        _Q3.f64[0] = 1.0 / sqrt(vmlad_n_f64(v62.val[0].f64[0], v62.val[1].f64[0], v62.val[1].f64[0]));
        *(_QWORD *)&v37 = *(_OWORD *)&vmlaq_f64(vnegq_f64(v27), _Q3, v62.val[1]);
        v38 = vmlaq_n_f64(vnegq_f64(*(float64x2_t *)&v53[8]), v62.val[2], _Q3.f64[0]);
        v56 = v38;
        v57 = v37;
        if (v19)
        {
          (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v19 + 24))(v19, &v56);
          v37 = v57;
          v38 = v56;
          *(_QWORD *)&v39 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
          v20 = v60;
        }
        else
        {
          *(_QWORD *)&v39 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
        }
        v38.f64[1] = v39;
        v58 = vmulq_f64(v38, v38).f64[0] + v39 * v39 + v37 * v37;
        v40 = *a3;
        *v40 = v58;
        *a3 = v40 + 1;
        if (v20)
        {
          v41 = (unint64_t *)&v20->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v16 += 144;
      }
      while (v16 != a2);
    }
  }
  return a3;
}

void sub_239CB8E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  unint64_t *p_shared_owners;
  unint64_t v27;

  if (a25)
  {
    p_shared_owners = (unint64_t *)&a25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))a25->__on_zero_shared)(a25);
      std::__shared_weak_count::__release_weak(a25);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239CB8ECC(uint64_t a1, uint64_t a2, float64x2_t a3, double a4, double a5, double a6, double a7, float64x2_t a8, double a9, float64x2_t a10)
{
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  int64x2_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  float64x2_t v24;
  double v25;
  const double *v27;
  float64x2_t v31;
  float64x2_t v40;
  float64x2_t v43;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  double v55;
  int64x2_t v56;
  int8x16_t v57;
  float64x2_t v58;
  int8x16_t v59;
  int8x16_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t *v68;
  unint64_t v69;
  float64x2_t v70;
  _BYTE v71[32];
  float64x2_t v72;
  double v73;
  float64x2_t v74;
  double v75;
  __int128 v76;
  float64x2_t v77;
  int64x2_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  float64x2_t v82;
  double v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  char v86;
  float64x2x3_t v87;

  a3.f64[0] = *(float64_t *)(a2 + 16);
  *(_OWORD *)&v71[16] = *(_OWORD *)(a2 + 56);
  v72 = *(float64x2_t *)(a2 + 72);
  v73 = *(double *)(a2 + 88);
  v70 = *(float64x2_t *)(a2 + 24);
  *(_OWORD *)v71 = *(_OWORD *)(a2 + 40);
  v74 = *(float64x2_t *)(a2 + 96);
  v75 = *(double *)(a2 + 112);
  v13 = *(float64x2_t *)(a2 + 152);
  v76 = *(_OWORD *)(a2 + 120);
  v77 = *(float64x2_t *)(a2 + 136);
  v14 = *(float64x2_t *)(a2 + 216);
  v15 = *(float64x2_t *)(a2 + 184);
  v81 = *(int8x16_t *)(a2 + 200);
  v82 = v14;
  v16 = *(int64x2_t *)(a2 + 168);
  v78 = (int64x2_t)v13;
  v79 = (int8x16_t)v16;
  v80 = (int8x16_t)v15;
  v16.i64[0] = *(_QWORD *)(a2 + 232);
  v83 = *(double *)v16.i64;
  v17 = *(_QWORD *)(a2 + 240);
  v18 = *(std::__shared_weak_count **)(a2 + 248);
  v84 = v17;
  v85 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v86 = *(_BYTE *)(a2 + 256);
  if (!*(_BYTE *)(a1 + 8))
  {
    if (fabs(a3.f64[0] + -1.0) >= 2.22044605e-16)
    {
      sub_239A444D4((uint64_t)"unknown file", 181, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v13.f64[0] = *(float64_t *)(v76 + 16);
    v10.f64[0] = *(float64_t *)(v76 + 40);
    _Q18 = *(float64x2_t *)(v76 + 24);
    a10.f64[0] = *(float64_t *)(v76 + 64);
    _Q16 = *(float64x2_t *)(v76 + 48);
    a8.f64[0] = *(float64_t *)(v76 + 88);
    _Q6 = *(float64x2_t *)(v76 + 72);
    v15.f64[0] = *(float64_t *)(v76 + 112);
    v24 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13.f64[0], 0);
    *(_QWORD *)&v25 = *(_OWORD *)&vdivq_f64(v15, v13);
    _Q4 = vdivq_f64(*(float64x2_t *)(v76 + 96), v24);
    v24.f64[0] = *(float64_t *)(*((_QWORD *)&v76 + 1) + 16);
    v27 = (const double *)(*((_QWORD *)&v76 + 1) + 24);
    v87 = vld3q_f64(v27);
    v13.f64[0] = *(float64_t *)(*((_QWORD *)&v76 + 1) + 88);
    _Q21 = *(float64x2_t *)(*((_QWORD *)&v76 + 1) + 72);
    v11.f64[0] = *(float64_t *)(*((_QWORD *)&v76 + 1) + 112);
    _Q26 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24.f64[0], 0);
    *(_QWORD *)&v24.f64[0] = *(_OWORD *)&vdivq_f64(v11, v24);
    _Q20 = vdivq_f64(*(float64x2_t *)(*((_QWORD *)&v76 + 1) + 96), _Q26);
    v31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87.val[0], _Q20.f64[0]), v87.val[1], _Q20, 1), v87.val[2], v24.f64[0]);
    _Q29 = vmulq_f64(_Q21, _Q20);
    _Q20.f64[0] = _Q20.f64[1];
    __asm { FMLA            D29, D20, V21.D[1] }
    _Q29.f64[0] = vmlad_n_f64(_Q29.f64[0], v13.f64[0], v24.f64[0]);
    _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87.val[0], v70.f64[0]), v87.val[1], v70, 1), v87.val[2], *(double *)v71);
    _D22 = v70.f64[1];
    __asm { FMLA            D8, D22, V21.D[1] }
    v40 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87.val[0], *(double *)&v71[8]), v87.val[1], *(float64x2_t *)&v71[8], 1), v87.val[2], *(double *)&v71[24]);
    _D28 = *(_QWORD *)&v71[16];
    __asm { FMLA            D8, D28, V21.D[1] }
    _Q26.f64[0] = _D8 + v13.f64[0] * *(double *)&v71[24];
    v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87.val[0], v72.f64[0]), v87.val[1], v72, 1), v87.val[2], v73);
    _D31 = v72.f64[1];
    __asm { FMLA            D8, D31, V21.D[1] }
    v46 = _D8 + v13.f64[0] * v73;
    v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87.val[0], v74.f64[0]), v87.val[1], v74, 1), v87.val[2], v75);
    v87.val[1].f64[0] = v74.f64[1];
    __asm { FMLA            D23, D24, V21.D[1] }
    v13.f64[0] = v87.val[0].f64[0] + v13.f64[0] * v75;
    v87.val[0] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q19, _Q18.f64[0]), v40, _Q18, 1), v43, v10.f64[0]);
    __asm { FMLA            D24, D26, V18.D[1] }
    v10.f64[0] = v87.val[1].f64[0] + v46 * v10.f64[0];
    v48 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q19, _Q16.f64[0]), v40, _Q16, 1), v43, a10.f64[0]);
    __asm { FMLA            D24, D26, V16.D[1] }
    a10.f64[0] = v87.val[1].f64[0] + v46 * a10.f64[0];
    v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q19, _Q6.f64[0]), v40, _Q6, 1), v43, a8.f64[0]);
    __asm { FMLA            D24, D26, V6.D[1] }
    a8.f64[0] = v87.val[1].f64[0] + v46 * a8.f64[0];
    v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q19, _Q4.f64[0]), v40, _Q4, 1), v43, v25);
    __asm { FMLA            D19, D26, V4.D[1] }
    _Q19.f64[0] = vmlad_n_f64(_Q19.f64[0], v46, v25);
    v51 = (int64x2_t)vmlaq_n_f64(vsubq_f64(v47, v31), v50, a3.f64[0]);
    *(_QWORD *)&v13.f64[0] = *(_OWORD *)&vmlaq_f64(vsubq_f64(v13, _Q29), _Q19, a3);
    v52 = (int64x2_t)vmulq_n_f64(v87.val[0], a3.f64[0]);
    v53 = (int64x2_t)vmulq_n_f64(v48, a3.f64[0]);
    v54 = (int64x2_t)vmulq_n_f64(v49, a3.f64[0]);
    v55 = vmulq_f64(a3, a8).f64[0];
    v56 = vdupq_lane_s64(COERCE__INT64(*(double *)&v53.i64[1] + -1.0), 0);
    v57.i64[0] = vdupq_laneq_s64(v54, 1).u64[0];
    v15.f64[0] = v55 + -1.0;
    v57.i64[1] = v51.i64[1];
    v48.f64[0] = v15.f64[0];
    v48.f64[1] = v13.f64[0];
    *(double *)v16.i64 = *(double *)v52.i64 + -1.0;
    v58 = (float64x2_t)vzip1q_s64(v16, v53);
    v16 = vzip1q_s64(v54, v51);
    v59 = (int8x16_t)vzip1q_s64((int64x2_t)vmulq_f64(a3, v10), (int64x2_t)vmulq_f64(a3, a10));
    v81 = v59;
    v82 = v48;
    v77 = v58;
    v78 = v16;
    v60 = (int8x16_t)vzip2q_s64(v52, v56);
    v79 = v60;
    v80 = v57;
    if (v17)
    {
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v17 + 24))(v17, &v77);
      v59 = v81;
      v15 = v82;
      v60 = v79;
      v57 = v80;
      v58 = v77;
      v16 = v78;
      *(_QWORD *)&v13.f64[0] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
      *(_QWORD *)&v61 = vextq_s8(v59, v59, 8uLL).u64[0];
      *(_QWORD *)&v62 = vextq_s8(v57, v57, 8uLL).u64[0];
      *(_QWORD *)&v63 = vextq_s8(v60, v60, 8uLL).u64[0];
      *(_QWORD *)&v64 = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
      *(_QWORD *)&v65 = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
      v18 = v85;
    }
    else
    {
      *(_QWORD *)&v64 = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
      *(_QWORD *)&v62 = vextq_s8(v57, v57, 8uLL).u64[0];
      *(_QWORD *)&v61 = vextq_s8(v59, v59, 8uLL).u64[0];
      *(_QWORD *)&v65 = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
      *(_QWORD *)&v63 = vextq_s8(v60, v60, 8uLL).u64[0];
    }
    v58.f64[1] = v65;
    *(double *)v16.i64 = vmulq_f64(v58, v58).f64[0]
                       + v65 * v65
                       + *(double *)v16.i64 * *(double *)v16.i64
                       + v64 * v64
                       + *(double *)v60.i64 * *(double *)v60.i64
                       + v63 * v63
                       + *(double *)v57.i64 * *(double *)v57.i64
                       + v62 * v62
                       + *(double *)v59.i64 * *(double *)v59.i64
                       + v61 * v61
                       + v15.f64[0] * v15.f64[0]
                       + v13.f64[0] * v13.f64[0];
    v83 = *(double *)v16.i64;
  }
  v66 = *(_QWORD **)a1;
  v67 = **(_QWORD ***)a1;
  *v67 = v16.i64[0];
  *v66 = v67 + 1;
  if (v18)
  {
    v68 = (unint64_t *)&v18->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_239CB9290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239CB92A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239CB92A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 240);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

double **sub_239CB92FC(uint64_t a1, uint64_t a2, double **a3, char a4, int64x2_t a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  float64x2_t v10;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float64x2_t v19;
  double v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const double *v25;
  double v27;
  float64x2_t v29;
  float64x2_t v35;
  float64x2_t v38;
  float64x2_t v42;
  double v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  double v62;
  int64x2_t v63;
  int8x16_t v64;
  float64x2_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double *v73;
  unint64_t *v74;
  unint64_t v75;
  float64x2_t v77;
  _BYTE v78[32];
  float64x2_t v79;
  double v80;
  float64x2_t v81;
  double v82;
  __int128 v83;
  float64x2_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int64x2_t v89;
  double v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  char v93;
  float64x2x3_t v94;

  if (a1 != a2)
  {
    v15 = a1;
    do
    {
      a5.i64[0] = *(_QWORD *)(v15 + 16);
      v77 = *(float64x2_t *)(v15 + 24);
      v80 = *(double *)(v15 + 88);
      *(_OWORD *)&v78[16] = *(_OWORD *)(v15 + 56);
      v79 = *(float64x2_t *)(v15 + 72);
      *(_OWORD *)v78 = *(_OWORD *)(v15 + 40);
      v81 = *(float64x2_t *)(v15 + 96);
      v82 = *(double *)(v15 + 112);
      v83 = *(_OWORD *)(v15 + 120);
      v16 = *(int8x16_t *)(v15 + 152);
      v84 = *(float64x2_t *)(v15 + 136);
      v85 = v16;
      v17 = *(int8x16_t *)(v15 + 168);
      v18 = *(int8x16_t *)(v15 + 184);
      v19 = *(float64x2_t *)(v15 + 216);
      v88 = *(int8x16_t *)(v15 + 200);
      v89 = (int64x2_t)v19;
      v86 = v17;
      v87 = v18;
      v20 = *(double *)(v15 + 232);
      v90 = v20;
      v21 = *(_QWORD *)(v15 + 240);
      v22 = *(std::__shared_weak_count **)(v15 + 248);
      v91 = v21;
      v92 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
      }
      v93 = *(_BYTE *)(v15 + 256);
      if (!a4)
      {
        v25 = (const double *)(*((_QWORD *)&v83 + 1) + 24);
        v94 = vld3q_f64(v25);
        a10.f64[0] = 1.0 / *(double *)(*((_QWORD *)&v83 + 1) + 16);
        v19.f64[0] = *(float64_t *)(*((_QWORD *)&v83 + 1) + 88);
        _Q22 = *(float64x2_t *)(*((_QWORD *)&v83 + 1) + 72);
        v10.f64[0] = -a10.f64[0];
        v27 = *(double *)(*((_QWORD *)&v83 + 1) + 112);
        _Q2 = *(float64x2_t *)(*((_QWORD *)&v83 + 1) + 96);
        v29 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v94.val[0], _Q2.f64[0]), v94.val[1], _Q2, 1), v94.val[2], v27);
        _Q2.f64[0] = *(float64_t *)(*((_QWORD *)&v83 + 1) + 104);
        __asm { FMLA            D3, D2, V22.D[1] }
        _Q23.f64[0] = _D3 + v19.f64[0] * v27;
        *(double *)a5.i64 = *(double *)a5.i64 * a10.f64[0];
        v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v94.val[0], v77.f64[0]), v94.val[1], v77, 1), v94.val[2], *(double *)v78);
        _D3 = v77.f64[1];
        __asm { FMLA            D25, D3, V22.D[1] }
        v38 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v94.val[0], *(double *)&v78[8]), v94.val[1], *(float64x2_t *)&v78[8], 1), v94.val[2], *(double *)&v78[24]);
        _D7 = *(_QWORD *)&v78[16];
        __asm { FMLA            D25, D7, V22.D[1] }
        _D6 = _D25 + v19.f64[0] * *(double *)&v78[24];
        v42 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v94.val[0], v79.f64[0]), v94.val[1], v79, 1), v94.val[2], v80);
        _D24 = v79.f64[1];
        __asm { FMLA            D25, D24, V22.D[1] }
        v45 = _D25 + v19.f64[0] * v80;
        v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v94.val[0], v81.f64[0]), v94.val[1], v81, 1), v94.val[2], v82);
        v94.val[1].f64[0] = v81.f64[1];
        __asm { FMLA            D19, D20, V22.D[1] }
        v19.f64[0] = v94.val[0].f64[0] + v19.f64[0] * v82;
        v47 = vmulq_f64(a10, v19);
        v48 = vmlaq_n_f64(vmulq_n_f64(v46, a10.f64[0]), v29, -a10.f64[0]);
        v49 = vmlaq_f64(v47, v10, _Q23);
        v10.f64[0] = *(double *)a5.i64 * *(double *)(v83 + 16);
        v29.f64[0] = *(float64_t *)(v83 + 40);
        v94.val[0] = *(float64x2_t *)(v83 + 24);
        v94.val[1].f64[0] = *(float64_t *)(v83 + 64);
        v94.val[2] = *(float64x2_t *)(v83 + 48);
        _Q22.f64[0] = *(float64_t *)(v83 + 88);
        _Q23 = *(float64x2_t *)(v83 + 72);
        v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, v94.val[0].f64[0]), v38, v94.val[0], 1), v42, v29.f64[0]);
        __asm { FMLA            D25, D6, V19.D[1] }
        v29.f64[0] = _D25 + v45 * v29.f64[0];
        v94.val[0] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, v94.val[2].f64[0]), v38, v94.val[2], 1), v42, v94.val[1].f64[0]);
        __asm { FMLA            D25, D6, V21.D[1] }
        v94.val[1].f64[0] = _D25 + v45 * v94.val[1].f64[0];
        v94.val[2] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, _Q23.f64[0]), v38, _Q23, 1), v42, _Q22.f64[0]);
        __asm { FMLA            D25, D6, V23.D[1] }
        _Q22.f64[0] = _D25 + v45 * _Q22.f64[0];
        _Q23.f64[0] = *(float64_t *)(v83 + 112);
        _Q25 = *(float64x2_t *)(v83 + 96);
        __asm { FMLA            D2, D6, V25.D[1] }
        _Q2.f64[0] = _Q2.f64[0] + v45 * _Q23.f64[0];
        v55 = (int64x2_t)vmlaq_f64(v49, _Q2, (float64x2_t)a5);
        v56 = (int64x2_t)vmlaq_n_f64(v48, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, _Q25.f64[0]), v38, _Q25, 1), v42, _Q23.f64[0]), *(double *)a5.i64);
        v57 = (int64x2_t)vmulq_f64(v29, v10);
        v58 = (int64x2_t)vmulq_n_f64(v50, v10.f64[0]);
        v59 = (int64x2_t)vmulq_f64(v94.val[1], v10);
        v60 = (int64x2_t)vmulq_n_f64(v94.val[0], v10.f64[0]);
        v61 = (int64x2_t)vmulq_n_f64(v94.val[2], v10.f64[0]);
        v62 = vmulq_f64(_Q22, v10).f64[0];
        v10.f64[0] = *(double *)v58.i64 + -1.0;
        v63 = vdupq_lane_s64(COERCE__INT64(*(double *)&v60.i64[1] + -1.0), 0);
        v64.i64[0] = vdupq_laneq_s64(v61, 1).u64[0];
        v64.i64[1] = v56.i64[1];
        v94.val[0].f64[0] = v62 + -1.0;
        v65 = (float64x2_t)vzip1q_s64((int64x2_t)v10, v60);
        v66 = (int8x16_t)vzip1q_s64(v61, v56);
        v67 = (int8x16_t)vzip1q_s64(v57, v59);
        a5 = vzip1q_s64((int64x2_t)v94.val[0], v55);
        v88 = v67;
        v89 = a5;
        v85 = v66;
        v84 = v65;
        v68 = (int8x16_t)vzip2q_s64(v58, v63);
        v87 = v64;
        v86 = v68;
        if (v21)
        {
          (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v21 + 24))(v21, &v84);
          a5 = v89;
          v67 = v88;
          v64 = v87;
          v68 = v86;
          v66 = v85;
          v65 = v84;
          *(_QWORD *)&v69 = vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
          a10 = (float64x2_t)vextq_s8(v67, v67, 8uLL);
          v10 = (float64x2_t)vextq_s8(v64, v64, 8uLL);
          *(_QWORD *)&v70 = vextq_s8(v68, v68, 8uLL).u64[0];
          *(_QWORD *)&v71 = vextq_s8(v66, v66, 8uLL).u64[0];
          *(_QWORD *)&v72 = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
          v22 = v92;
        }
        else
        {
          a10 = (float64x2_t)vextq_s8(v67, v67, 8uLL);
          *(_QWORD *)&v71 = vextq_s8(v66, v66, 8uLL).u64[0];
          v10 = (float64x2_t)vextq_s8(v64, v64, 8uLL);
          *(_QWORD *)&v69 = vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
          *(_QWORD *)&v72 = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
          *(_QWORD *)&v70 = vextq_s8(v68, v68, 8uLL).u64[0];
        }
        v65.f64[1] = v72;
        v20 = vmulq_f64(v65, v65).f64[0]
            + v72 * v72
            + *(double *)v66.i64 * *(double *)v66.i64
            + v71 * v71
            + *(double *)v68.i64 * *(double *)v68.i64
            + v70 * v70
            + *(double *)v64.i64 * *(double *)v64.i64
            + v10.f64[0] * v10.f64[0]
            + *(double *)v67.i64 * *(double *)v67.i64
            + a10.f64[0] * a10.f64[0]
            + *(double *)a5.i64 * *(double *)a5.i64
            + v69 * v69;
        v90 = v20;
      }
      v73 = *a3;
      *v73 = v20;
      *a3 = v73 + 1;
      if (v22)
      {
        v74 = (unint64_t *)&v22->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v15 += 264;
    }
    while (v15 != a2);
  }
  return a3;
}

void sub_239CB96F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  unint64_t *p_shared_owners;
  unint64_t v42;

  if (a40)
  {
    p_shared_owners = (unint64_t *)&a40->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
      std::__shared_weak_count::__release_weak(a40);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239CB973C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239CB9750(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFCFE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239CB9788(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFCFE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239CB97A8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 408) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t sub_239CB97B8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_239CB9810(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 136;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_239CB989C(void **a1, char *a2, __int128 *a3)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  char *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  char *v80;
  __int128 v81;

  v4 = a2;
  v7 = (char *)*a1;
  v6 = (char *)a1[1];
  v8 = a2 - (_BYTE *)*a1;
  v9 = 0x8E38E38E38E38E39 * (v8 >> 4);
  v10 = (char *)a1[2];
  if (v6 >= v10)
  {
    v33 = 0x8E38E38E38E38E39 * ((v6 - v7) >> 4) + 1;
    if (v33 > 0x1C71C71C71C71C7)
      sub_2394189F8();
    v34 = 0x8E38E38E38E38E39 * ((v10 - v7) >> 4);
    if (2 * v34 > v33)
      v33 = 2 * v34;
    if (v34 >= 0xE38E38E38E38E3)
      v35 = 0x1C71C71C71C71C7;
    else
      v35 = v33;
    if (v35)
    {
      if (v35 > 0x1C71C71C71C71C7)
        sub_239418A80();
      v36 = (char *)operator new(144 * v35);
    }
    else
    {
      v36 = 0;
    }
    v46 = &v36[16 * (v8 >> 4)];
    v80 = &v36[144 * v35];
    if (v9 == v35)
    {
      if (v8 < 1)
      {
        if (v7 == v4)
          v48 = 1;
        else
          v48 = 0x1C71C71C71C71C72 * (v8 >> 4);
        if (v48 > 0x1C71C71C71C71C7)
          sub_239418A80();
        v49 = (char *)operator new(144 * v48);
        v46 = &v49[144 * (v48 >> 2)];
        v80 = &v49[144 * v48];
        if (v36)
          operator delete(v36);
      }
      else
      {
        v47 = v9 + 2;
        if (v9 >= -1)
          v47 = v9 + 1;
        v46 -= 144 * (v47 >> 1);
      }
    }
    v50 = a3[1];
    *(_OWORD *)v46 = *a3;
    *((_OWORD *)v46 + 1) = v50;
    v51 = a3[3];
    *((_OWORD *)v46 + 2) = a3[2];
    *((_OWORD *)v46 + 3) = v51;
    *((_QWORD *)v46 + 10) = *((_QWORD *)a3 + 10);
    *((_OWORD *)v46 + 4) = a3[4];
    *(_OWORD *)(v46 + 88) = *(__int128 *)((char *)a3 + 88);
    *((_QWORD *)v46 + 13) = *((_QWORD *)a3 + 13);
    *((_QWORD *)v46 + 14) = *((_QWORD *)a3 + 14);
    *(_OWORD *)(v46 + 120) = *(__int128 *)((char *)a3 + 120);
    *((_QWORD *)a3 + 15) = 0;
    *((_QWORD *)a3 + 16) = 0;
    v46[136] = *((_BYTE *)a3 + 136);
    v52 = v46 + 144;
    v53 = (char *)*a1;
    if (*a1 == v4)
    {
      v61 = v46;
    }
    else
    {
      v54 = 0;
      do
      {
        v55 = &v46[v54];
        v56 = &v4[v54];
        *((_QWORD *)v55 - 18) = *(_QWORD *)&v4[v54 - 144];
        *((_QWORD *)v55 - 17) = *(_QWORD *)&v4[v54 - 136];
        v57 = *(_OWORD *)&v4[v54 - 128];
        v58 = *(_OWORD *)&v4[v54 - 96];
        *((_OWORD *)v55 - 7) = *(_OWORD *)&v4[v54 - 112];
        *((_OWORD *)v55 - 6) = v58;
        *((_OWORD *)v55 - 8) = v57;
        v59 = *(_OWORD *)&v4[v54 - 80];
        *((_QWORD *)v55 - 8) = *(_QWORD *)&v4[v54 - 64];
        *((_OWORD *)v55 - 5) = v59;
        v60 = *(_OWORD *)&v4[v54 - 56];
        *((_QWORD *)v55 - 5) = *(_QWORD *)&v4[v54 - 40];
        *(_OWORD *)(v55 - 56) = v60;
        *((_QWORD *)v55 - 4) = *(_QWORD *)&v4[v54 - 32];
        *(_OWORD *)(v55 - 24) = *(_OWORD *)&v4[v54 - 24];
        *((_QWORD *)v56 - 3) = 0;
        *((_QWORD *)v56 - 2) = 0;
        *(v55 - 8) = v4[v54 - 8];
        v54 -= 144;
      }
      while (&v4[v54] != v53);
      v61 = &v46[v54];
      v52 = v46 + 144;
    }
    v62 = (char *)a1[1];
    if (v62 != v4)
    {
      do
      {
        *(_QWORD *)v52 = *(_QWORD *)v4;
        *((_QWORD *)v52 + 1) = *((_QWORD *)v4 + 1);
        v63 = *((_OWORD *)v4 + 1);
        v64 = *((_OWORD *)v4 + 3);
        *((_OWORD *)v52 + 2) = *((_OWORD *)v4 + 2);
        *((_OWORD *)v52 + 3) = v64;
        *((_OWORD *)v52 + 1) = v63;
        v65 = *((_OWORD *)v4 + 4);
        *((_QWORD *)v52 + 10) = *((_QWORD *)v4 + 10);
        *((_OWORD *)v52 + 4) = v65;
        v66 = *(_OWORD *)(v4 + 88);
        *((_QWORD *)v52 + 13) = *((_QWORD *)v4 + 13);
        *(_OWORD *)(v52 + 88) = v66;
        *((_QWORD *)v52 + 14) = *((_QWORD *)v4 + 14);
        *(_OWORD *)(v52 + 120) = *(_OWORD *)(v4 + 120);
        *((_QWORD *)v4 + 15) = 0;
        *((_QWORD *)v4 + 16) = 0;
        v52[136] = v4[136];
        v52 += 144;
        v4 += 144;
      }
      while (v4 != v62);
      v4 = (char *)a1[1];
    }
    v67 = (char *)*a1;
    *a1 = v61;
    a1[1] = v52;
    a1[2] = v80;
    if (v4 == v67)
    {
      if (!v4)
        return v46;
    }
    else
    {
      do
      {
        v79 = v4 - 144;
        v69 = (std::__shared_weak_count *)*((_QWORD *)v4 - 2);
        if (v69)
        {
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(p_shared_owners);
          while (__stlxr(v71 - 1, p_shared_owners));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v4 = v79;
      }
      while (v79 != v67);
      v4 = v67;
      if (!v67)
        return v46;
    }
    operator delete(v4);
    return v46;
  }
  v11 = (__int128 *)((char *)a3 + 88);
  if (a2 == v6)
  {
    *(_QWORD *)a2 = *(_QWORD *)a3;
    v41 = &v7[16 * (v8 >> 4)];
    *((_QWORD *)v41 + 1) = *((_QWORD *)a3 + 1);
    v42 = a3[1];
    v43 = a3[3];
    *((_OWORD *)v41 + 2) = a3[2];
    *((_OWORD *)v41 + 3) = v43;
    *((_OWORD *)v41 + 1) = v42;
    v44 = a3[4];
    *((_QWORD *)v41 + 10) = *((_QWORD *)a3 + 10);
    *((_OWORD *)v41 + 4) = v44;
    v45 = *v11;
    *((_QWORD *)v41 + 13) = *((_QWORD *)a3 + 13);
    *(_OWORD *)(v41 + 88) = v45;
    *((_QWORD *)v41 + 14) = *((_QWORD *)a3 + 14);
    *(_OWORD *)(v41 + 120) = *(__int128 *)((char *)a3 + 120);
    *((_QWORD *)a3 + 15) = 0;
    *((_QWORD *)a3 + 16) = 0;
    v41[136] = *((_BYTE *)a3 + 136);
    a1[1] = a2 + 144;
  }
  else
  {
    v77 = a3[1];
    v78 = a3[2];
    v81 = a3[3];
    v72 = *a3;
    v73 = a3[4];
    v12 = *((_QWORD *)a3 + 10);
    v76 = *((_QWORD *)a3 + 13);
    v13 = *((_QWORD *)a3 + 14);
    v74 = *(__int128 *)((char *)a3 + 120);
    v75 = *v11;
    *((_QWORD *)a3 + 15) = 0;
    *((_QWORD *)a3 + 16) = 0;
    v14 = (unint64_t)a1[1];
    v15 = v14 - 144;
    v16 = v14;
    v17 = *((_BYTE *)a3 + 136);
    if (v14 >= 0x90)
    {
      v18 = v14 - 144;
      v16 = (unint64_t)a1[1];
      do
      {
        *(_QWORD *)v16 = *(_QWORD *)v18;
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(v18 + 8);
        v19 = *(_OWORD *)(v18 + 16);
        v20 = *(_OWORD *)(v18 + 48);
        *(_OWORD *)(v16 + 32) = *(_OWORD *)(v18 + 32);
        *(_OWORD *)(v16 + 48) = v20;
        *(_OWORD *)(v16 + 16) = v19;
        v21 = *(_OWORD *)(v18 + 64);
        *(_QWORD *)(v16 + 80) = *(_QWORD *)(v18 + 80);
        *(_OWORD *)(v16 + 64) = v21;
        v22 = *(_OWORD *)(v18 + 88);
        *(_QWORD *)(v16 + 104) = *(_QWORD *)(v18 + 104);
        *(_OWORD *)(v16 + 88) = v22;
        *(_QWORD *)(v16 + 112) = *(_QWORD *)(v18 + 112);
        *(_OWORD *)(v16 + 120) = *(_OWORD *)(v18 + 120);
        *(_QWORD *)(v18 + 120) = 0;
        *(_QWORD *)(v18 + 128) = 0;
        *(_BYTE *)(v16 + 136) = *(_BYTE *)(v18 + 136);
        v16 += 144;
        v18 += 144;
      }
      while (v18 < v14);
    }
    a1[1] = (void *)v16;
    if ((char *)v14 != a2 + 144)
    {
      v23 = v14 - 144;
      v24 = v14;
      do
      {
        v25 = *(_QWORD *)(v23 - 144);
        v23 -= 144;
        *(_QWORD *)(v24 - 144) = v25;
        v24 -= 144;
        *(_QWORD *)(v24 + 8) = *(_QWORD *)(v23 + 8);
        v26 = *(_OWORD *)(v23 + 16);
        v27 = *(_OWORD *)(v23 + 48);
        *(_OWORD *)(v24 + 32) = *(_OWORD *)(v23 + 32);
        *(_OWORD *)(v24 + 48) = v27;
        *(_OWORD *)(v24 + 16) = v26;
        *(_QWORD *)(v24 + 64) = *(_QWORD *)(v23 + 64);
        *(_QWORD *)(v24 + 72) = *(_QWORD *)(v23 + 72);
        *(_QWORD *)(v24 + 80) = *(_QWORD *)(v23 + 80);
        v28 = *(_OWORD *)(v23 + 88);
        *(_QWORD *)(v24 + 104) = *(_QWORD *)(v23 + 104);
        *(_OWORD *)(v24 + 88) = v28;
        *(_QWORD *)(v24 + 112) = *(_QWORD *)(v23 + 112);
        v29 = *(_OWORD *)(v23 + 120);
        *(_QWORD *)(v23 + 120) = 0;
        *(_QWORD *)(v23 + 128) = 0;
        v30 = *(std::__shared_weak_count **)(v24 + 128);
        *(_OWORD *)(v24 + 120) = v29;
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        *(_BYTE *)(v14 - 8) = *(_BYTE *)(v15 - 8);
        v14 = v24;
        v15 = v23;
      }
      while ((char *)v23 != v4);
    }
    *(_OWORD *)v4 = v72;
    v37 = &v7[144 * v9];
    *((_OWORD *)v37 + 1) = v77;
    *((_OWORD *)v37 + 2) = v78;
    *((_OWORD *)v37 + 3) = v81;
    *((_OWORD *)v37 + 4) = v73;
    *((_QWORD *)v37 + 10) = v12;
    *(_OWORD *)(v37 + 88) = v75;
    *((_QWORD *)v37 + 13) = v76;
    *((_QWORD *)v37 + 14) = v13;
    v38 = (std::__shared_weak_count *)*((_QWORD *)v37 + 16);
    *(_OWORD *)(v37 + 120) = v74;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v7[144 * v9 + 136] = v17;
  }
  return v4;
}

void sub_239CB9F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_239CB9F78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239CB9F20(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_239CB9F78(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 144;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_239CBA004(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 248);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_239CBA05C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 264;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239CBA0EC()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239CBA100()
{
  return 2;
}

float64x2_t sub_239CBA108(uint64_t a1, float64x2_t *a2)
{
  double v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t result;

  v2 = *(double *)(a1 + 16);
  v3 = vmulq_n_f64(a2[5], v2);
  v4 = vmulq_n_f64(a2[4], v2);
  v5 = vmulq_n_f64(a2[3], v2);
  v6 = vmulq_n_f64(a2[2], v2);
  v7 = vmulq_n_f64(a2[1], v2);
  result = vmulq_n_f64(*a2, v2);
  *a2 = result;
  a2[1] = v7;
  a2[2] = v6;
  a2[3] = v5;
  a2[4] = v4;
  a2[5] = v3;
  return result;
}

float64x2_t sub_239CBA140(uint64_t a1, float64x2_t *a2, float64x2_t *a3)
{
  double v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t result;

  v3 = *(double *)(a1 + 16);
  v4 = vmulq_n_f64(*a2, v3);
  v5 = vmulq_n_f64(a2[5], v3);
  v6 = vmulq_n_f64(a2[4], v3);
  v7 = vmulq_n_f64(a2[3], v3);
  v8 = vmulq_n_f64(a2[2], v3);
  result = vmulq_n_f64(a2[1], v3);
  a3[2] = v8;
  a3[3] = v7;
  a3[4] = v6;
  a3[5] = v5;
  *a3 = v4;
  a3[1] = result;
  return result;
}

float64x2_t sub_239CBA178(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t result;

  v2 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)(a1 + 16), 0);
  v3 = vdivq_f64(a2[5], v2);
  v4 = vdivq_f64(a2[4], v2);
  v5 = vdivq_f64(a2[3], v2);
  v6 = vdivq_f64(a2[2], v2);
  v7 = vdivq_f64(a2[1], v2);
  result = vdivq_f64(*a2, v2);
  *a2 = result;
  a2[1] = v7;
  a2[2] = v6;
  a2[3] = v5;
  a2[4] = v4;
  a2[5] = v3;
  return result;
}

float64x2_t sub_239CBA1B4(uint64_t a1, float64x2_t *a2, float64x2_t *a3)
{
  const double *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t result;
  float64x2_t v10;

  v3 = (const double *)(a1 + 16);
  v4 = vld1q_dup_f64(v3);
  v5 = vdivq_f64(*a2, v4);
  v6 = vdivq_f64(a2[5], v4);
  v7 = vdivq_f64(a2[4], v4);
  v8 = vdivq_f64(a2[3], v4);
  result = vdivq_f64(a2[2], v4);
  v10 = vdivq_f64(a2[1], v4);
  a3[2] = result;
  a3[3] = v8;
  a3[4] = v7;
  a3[5] = v6;
  *a3 = v5;
  a3[1] = v10;
  return result;
}

double sub_239CBA1F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = v2;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_QWORD *)(a2 + 104) = v2;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_QWORD *)(a2 + 208) = v2;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_QWORD *)(a2 + 312) = v2;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_QWORD *)(a2 + 416) = v2;
  v4 = (_OWORD *)(a2 + 424);
  *(_QWORD *)(a2 + 520) = v2;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 560) = 0u;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_OWORD *)(a2 + 528) = 0u;
  *(_OWORD *)(a2 + 544) = 0u;
  *(_QWORD *)(a2 + 624) = v2;
  v5 = (_OWORD *)(a2 + 632);
  *(_QWORD *)(a2 + 728) = v2;
  *(_OWORD *)(a2 + 800) = 0u;
  *(_OWORD *)(a2 + 816) = 0u;
  *(_OWORD *)(a2 + 768) = 0u;
  *(_OWORD *)(a2 + 784) = 0u;
  *(_OWORD *)(a2 + 736) = 0u;
  *(_OWORD *)(a2 + 752) = 0u;
  *(_QWORD *)(a2 + 832) = v2;
  v6 = (_OWORD *)(a2 + 840);
  *(_QWORD *)(a2 + 936) = v2;
  *(_OWORD *)(a2 + 1008) = 0u;
  *(_OWORD *)(a2 + 1024) = 0u;
  *(_OWORD *)(a2 + 976) = 0u;
  *(_OWORD *)(a2 + 992) = 0u;
  *(_OWORD *)(a2 + 944) = 0u;
  *(_OWORD *)(a2 + 960) = 0u;
  *(_QWORD *)(a2 + 1040) = v2;
  v7 = (_OWORD *)(a2 + 1048);
  *(_QWORD *)(a2 + 1144) = v2;
  *(_OWORD *)(a2 + 216) = 0u;
  v8 = (_OWORD *)(a2 + 216);
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  *v4 = 0u;
  v4[1] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  *v6 = 0u;
  v6[1] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  *v7 = 0u;
  v7[1] = 0u;
  return result;
}

double sub_239CBA2D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v3;
  double result;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;

  v3 = *(double *)(a1 + 16) * a3;
  *(double *)a2 = v3;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(double *)(a2 + 104) = v3;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(double *)(a2 + 208) = v3;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *(double *)(a2 + 312) = v3;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(double *)(a2 + 416) = v3;
  v5 = (_OWORD *)(a2 + 424);
  *(double *)(a2 + 520) = v3;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 560) = 0u;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_OWORD *)(a2 + 528) = 0u;
  *(_OWORD *)(a2 + 544) = 0u;
  *(double *)(a2 + 624) = v3;
  v6 = (_OWORD *)(a2 + 632);
  *(double *)(a2 + 728) = v3;
  *(_OWORD *)(a2 + 800) = 0u;
  *(_OWORD *)(a2 + 816) = 0u;
  *(_OWORD *)(a2 + 768) = 0u;
  *(_OWORD *)(a2 + 784) = 0u;
  *(_OWORD *)(a2 + 736) = 0u;
  *(_OWORD *)(a2 + 752) = 0u;
  *(double *)(a2 + 832) = v3;
  v7 = (_OWORD *)(a2 + 840);
  *(double *)(a2 + 936) = v3;
  *(_OWORD *)(a2 + 1008) = 0u;
  *(_OWORD *)(a2 + 1024) = 0u;
  *(_OWORD *)(a2 + 976) = 0u;
  *(_OWORD *)(a2 + 992) = 0u;
  *(_OWORD *)(a2 + 944) = 0u;
  *(_OWORD *)(a2 + 960) = 0u;
  *(double *)(a2 + 1040) = v3;
  v8 = (_OWORD *)(a2 + 1048);
  *(double *)(a2 + 1144) = v3;
  *(_OWORD *)(a2 + 216) = 0u;
  v9 = (_OWORD *)(a2 + 216);
  v9[3] = 0u;
  v9[4] = 0u;
  v9[5] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  *v6 = 0u;
  v6[1] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  *v7 = 0u;
  v7[1] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  *v8 = 0u;
  v8[1] = 0u;
  return result;
}

double sub_239CBA3BC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double result;
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;

  v2 = *(double *)(a1 + 16) * *(double *)(a1 + 16);
  *(double *)a2 = v2;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(double *)(a2 + 104) = v2;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(double *)(a2 + 208) = v2;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *(double *)(a2 + 312) = v2;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(double *)(a2 + 416) = v2;
  v4 = (_OWORD *)(a2 + 424);
  *(double *)(a2 + 520) = v2;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 560) = 0u;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_OWORD *)(a2 + 528) = 0u;
  *(_OWORD *)(a2 + 544) = 0u;
  *(double *)(a2 + 624) = v2;
  v5 = (_OWORD *)(a2 + 632);
  *(double *)(a2 + 728) = v2;
  *(_OWORD *)(a2 + 800) = 0u;
  *(_OWORD *)(a2 + 816) = 0u;
  *(_OWORD *)(a2 + 768) = 0u;
  *(_OWORD *)(a2 + 784) = 0u;
  *(_OWORD *)(a2 + 736) = 0u;
  *(_OWORD *)(a2 + 752) = 0u;
  *(double *)(a2 + 832) = v2;
  v6 = (_OWORD *)(a2 + 840);
  *(double *)(a2 + 936) = v2;
  *(_OWORD *)(a2 + 1008) = 0u;
  *(_OWORD *)(a2 + 1024) = 0u;
  *(_OWORD *)(a2 + 976) = 0u;
  *(_OWORD *)(a2 + 992) = 0u;
  *(_OWORD *)(a2 + 944) = 0u;
  *(_OWORD *)(a2 + 960) = 0u;
  *(double *)(a2 + 1040) = v2;
  v7 = (_OWORD *)(a2 + 1048);
  *(double *)(a2 + 1144) = v2;
  *(_OWORD *)(a2 + 216) = 0u;
  v8 = (_OWORD *)(a2 + 216);
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  *v4 = 0u;
  v4[1] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  *v6 = 0u;
  v6[1] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  *v7 = 0u;
  v7[1] = 0u;
  return result;
}

double sub_239CBA4A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double result;
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;

  v2 = 1.0 / (*(double *)(a1 + 16) * *(double *)(a1 + 16));
  *(double *)a2 = v2;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(double *)(a2 + 104) = v2;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(double *)(a2 + 208) = v2;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *(double *)(a2 + 312) = v2;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(double *)(a2 + 416) = v2;
  v4 = (_OWORD *)(a2 + 424);
  *(double *)(a2 + 520) = v2;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 560) = 0u;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_OWORD *)(a2 + 528) = 0u;
  *(_OWORD *)(a2 + 544) = 0u;
  *(double *)(a2 + 624) = v2;
  v5 = (_OWORD *)(a2 + 632);
  *(double *)(a2 + 728) = v2;
  *(_OWORD *)(a2 + 800) = 0u;
  *(_OWORD *)(a2 + 816) = 0u;
  *(_OWORD *)(a2 + 768) = 0u;
  *(_OWORD *)(a2 + 784) = 0u;
  *(_OWORD *)(a2 + 736) = 0u;
  *(_OWORD *)(a2 + 752) = 0u;
  *(double *)(a2 + 832) = v2;
  v6 = (_OWORD *)(a2 + 840);
  *(double *)(a2 + 936) = v2;
  *(_OWORD *)(a2 + 1008) = 0u;
  *(_OWORD *)(a2 + 1024) = 0u;
  *(_OWORD *)(a2 + 976) = 0u;
  *(_OWORD *)(a2 + 992) = 0u;
  *(_OWORD *)(a2 + 944) = 0u;
  *(_OWORD *)(a2 + 960) = 0u;
  *(double *)(a2 + 1040) = v2;
  v7 = (_OWORD *)(a2 + 1048);
  *(double *)(a2 + 1144) = v2;
  *(_OWORD *)(a2 + 216) = 0u;
  v8 = (_OWORD *)(a2 + 216);
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  *v4 = 0u;
  v4[1] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  *v6 = 0u;
  v6[1] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  *v7 = 0u;
  v7[1] = 0u;
  return result;
}

void sub_239CBA594(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFCF48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239CBA5A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFCF48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239CBA5D4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_239CBA5E4(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v5, "SparseHessian");
  v4 = 8;
  strcpy((char *)__p, "Cholesky");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 8uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_239CBA6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239CBA6DC(uint64_t a1)
{
  unsigned int v2;
  unint64_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  __n128 v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char **v20;
  float64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;
  float64_t v26;
  char **v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  _QWORD **v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  int v51;
  _DWORD *v52;
  int v53;
  int v54;
  _DWORD *v55;
  int v56;
  int v57;
  _DWORD *v58;
  int v59;
  int v60;
  _BYTE *v61;
  _BYTE *v62;
  int64_t v63;
  int8x16_t *v64;
  _BYTE *v65;
  _BYTE *v66;
  int64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  float64_t v88;
  _DWORD *v89;
  _DWORD *v90;
  unsigned int v91;
  _QWORD *v92;
  float64x2_t v93;
  float64x2_t v94;
  int8x16_t v95;
  int8x16_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  BOOL v102;
  _DWORD *v103;
  _DWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  int v112;
  int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  int8x16_t v118;
  __int128 v119;
  __int128 v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  unsigned int *v125;
  unsigned int *v126;
  int v127;
  int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  float64_t v134;
  std::bad_alloc *exception;
  std::bad_alloc *v137;
  uint64_t v138;
  unsigned int v139;
  double v140;
  _QWORD *v141;
  uint64_t v142;
  void *v143;
  int8x16_t *v144;
  int8x16_t *v145;
  void *v146;
  void *v147;
  char *v148;
  void *v149[3];
  void *v150[3];
  void *v151[3];
  _DWORD v152[4];
  void *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  int32x2_t v158;
  int8x16_t v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  float64x2_t memptr[7];
  void **v164;
  void **v165;
  void **v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v2 = sub_239CD5C64(a1 + 72);
  v3 = sub_239CD61F0(a1 + 72);
  if (!(((*(_QWORD *)(a1 + 840) - *(_QWORD *)(a1 + 832)) >> 2)
       + ((*(_QWORD *)(a1 + 816) - *(_QWORD *)(a1 + 808)) >> 2)))
  {
    v10 = 1;
    if (!v2 || v3 < v2)
      goto LABEL_152;
  }
  v11 = a1 + 704;
  v12 = (char **)(a1 + 808);
  if (!*(_BYTE *)(a1 + 240))
  {
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 241))
    {
LABEL_87:
      sub_239CD646C(a1 + 72);
      v71 = *(_DWORD *)(a1 + 404);
      memset(memptr, 0, 48);
      v72 = *(_QWORD *)(a1 + 552);
      if (*(_BYTE *)(v72 + 168))
      {
        *(_QWORD *)&memptr[0].f64[0] = operator new(0x100uLL);
        memptr[0].f64[1] = memptr[0].f64[0];
        *(_QWORD *)&memptr[1].f64[0] = *(_QWORD *)&memptr[0].f64[0] + 256;
        *(_QWORD *)&memptr[1].f64[1] = operator new(0x100uLL);
        memptr[2].f64[0] = memptr[1].f64[1];
        *(_QWORD *)&memptr[2].f64[1] = *(_QWORD *)&memptr[1].f64[1] + 256;
        sub_239CD72E4(v72, (uint64_t)memptr);
        sub_239CD74F8(v72, (uint64_t)&memptr[1].f64[1]);
      }
      sub_239CD770C(*(_QWORD *)(a1 + 560), (char **)memptr);
      sub_239CD7978((uint64_t *)(a1 + 568), (int **)memptr, v71);
      if (*(_QWORD *)&memptr[1].f64[1])
      {
        memptr[2].f64[0] = memptr[1].f64[1];
        operator delete(*(void **)&memptr[1].f64[1]);
      }
      if (*(_QWORD *)&memptr[0].f64[0])
      {
        memptr[0].f64[1] = memptr[0].f64[0];
        operator delete(*(void **)&memptr[0].f64[0]);
      }
      kdebug_trace();
      goto LABEL_94;
    }
    if (*(_DWORD *)(a1 + 428) == 1)
      v13 = 3;
    else
      v13 = 1;
    if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 704) + 24))(a1 + 704) + 168))
    {
LABEL_86:
      kdebug_trace();
      v10 = 1;
      goto LABEL_152;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(a1 + 704);
    v15 = sub_239CDAB18(v14);
    memset(memptr, 0, 24);
    v17 = *(const void **)v15;
    v16 = *(_QWORD *)(v15 + 8);
    v18 = v16 - *(_QWORD *)v15;
    v138 = a1 + 704;
    v139 = v13;
    if (v16 == *(_QWORD *)v15)
    {
      v20 = (char **)(a1 + 808);
      v21 = 0.0;
      v19 = 0;
    }
    else
    {
      if (v18 < 0)
        goto LABEL_154;
      v19 = (char *)operator new(v18);
      v20 = (char **)(a1 + 808);
      *(_QWORD *)&v21 = &v19[4 * (v18 >> 2)];
      *(_QWORD *)&memptr[0].f64[0] = v19;
      memptr[1].f64[0] = v21;
      memcpy(v19, v17, v18);
      memptr[0].f64[1] = v21;
    }
    memset(&memptr[1].f64[1], 0, 24);
    v23 = *(_BYTE **)(v15 + 24);
    v22 = *(_BYTE **)(v15 + 32);
    v24 = v22 - v23;
    v141 = (_QWORD *)v15;
    if (v22 == v23)
    {
      v26 = 0.0;
      v25 = 0;
      goto LABEL_18;
    }
    if ((v24 & 0x8000000000000000) == 0)
    {
      v25 = (char *)operator new(v22 - v23);
      *(_QWORD *)&v26 = &v25[4 * (v24 >> 2)];
      *(_QWORD *)&memptr[1].f64[1] = v25;
      memptr[2].f64[1] = v26;
      memcpy(v25, v23, v24);
      memptr[2].f64[0] = v26;
LABEL_18:
      v27 = (char **)(v141 + 6);
      v12 = v20;
      if (v19 == *(char **)&v21 && v25 == *(char **)&v26)
      {
        v11 = a1 + 704;
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
        sub_239CDB480((uint64_t)&v159, (char **)(v28 + 72), v27);
        sub_239CDB480((uint64_t)&v164, v12, (char **)&v159);
        sub_239CDB6DC(a1 + 736, (char **)&v164);
        if (v167)
        {
          v168 = v167;
          operator delete((void *)v167);
        }
        if (v164)
        {
          v165 = v164;
          operator delete(v164);
        }
        if (*((_QWORD *)&v160 + 1))
        {
          *(_QWORD *)&v161 = *((_QWORD *)&v160 + 1);
          operator delete(*((void **)&v160 + 1));
        }
        if (v159.i64[0])
        {
          v159.i64[1] = v159.i64[0];
          operator delete((void *)v159.i64[0]);
        }
        v29 = 0;
        goto LABEL_81;
      }
      v11 = a1 + 704;
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
      sub_239CDC5A0((uint64_t)&v164, (char **)memptr, v27);
      sub_239CDB480((uint64_t)&v159, (char **)(v30 + 72), (char **)&v164);
      if (v167)
      {
        v168 = v167;
        operator delete((void *)v167);
      }
      if (v164)
      {
        v165 = v164;
        operator delete(v164);
      }
      sub_239CDC5A0((uint64_t)&v164, (char **)&v159, (char **)memptr);
      v31 = (((_QWORD)v161 - *((_QWORD *)&v160 + 1)) >> 2)
          - ((unint64_t)(v159.i64[1] - v159.i64[0]) >> 2)
          + 8 * ((unint64_t)(v159.i64[1] - v159.i64[0]) >> 2);
      *(_DWORD *)(a1 + 728) = v31;
      sub_23945215C(a1 + 712, v31);
      v32 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 24))(v138);
      LODWORD(v156) = 0;
      v143 = v32;
      v144 = &v159;
      v33 = sub_239CDC7B8(&v143, (_QWORD *)(a1 + 712), &v156);
      v34 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v138 + 24))(v138, v33);
      sub_239CDC990((uint64_t)&v164, (_QWORD *)(v34 + 8));
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
      sub_239CD770C(v35, (char **)&v164);
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
      sub_239C8D9D8((_QWORD *)(v36 + 40));
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
      v38 = *(unsigned int *)(v37 + 16);
      if ((_DWORD)v38)
        bzero(*(void **)v37, 8 * v38);
      if (((*(_QWORD *)(a1 + 840) - *(_QWORD *)(a1 + 832)) >> 2)
         + ((*(_QWORD *)(a1 + 816) - *(_QWORD *)(a1 + 808)) >> 2))
      {
        v39 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
        sub_239CC12AC(v39, (_QWORD *)(a1 + 736));
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v138 + 16))(v138, v139);
      v156 = 0;
      v157 = 0;
      v158.i32[0] = 0;
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v40 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 704) + 40);
      if (*(_BYTE *)(a1 + 856))
      {
        v41 = v40(v138);
        sub_239CDCCE8(v41, memptr, (uint64_t)&v153);
      }
      else
      {
        v42 = v40(v138);
        sub_239CDCB5C(v42, memptr, (uint64_t)&v153, (uint64_t)&v156);
      }
      memset(v151, 0, sizeof(v151));
      memset(v150, 0, sizeof(v150));
      v43 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
      sub_239CDCDB4(v43, memptr, &v159, (uint64_t)v151, (uint64_t)v150);
      sub_239CD770C(a1 + 736, (char **)&v159);
      sub_239C8D9D8((_QWORD *)(a1 + 776));
      v44 = *(unsigned int *)(a1 + 752);
      if ((_DWORD)v44)
        bzero(*(void **)(a1 + 736), 8 * v44);
      memset(v149, 0, sizeof(v149));
      v45 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 704) + 40);
      if (*(_BYTE *)(a1 + 856))
      {
        v46 = v45(v138);
        sub_239CDCCE8(v46, &v159, (uint64_t)v149);
      }
      else
      {
        v47 = v45(v138);
        sub_239CDCB5C(v47, &v159, (uint64_t)v149, a1 + 736);
      }
      if (*(_BYTE *)(a1 + 857))
      {
        LOBYTE(v143) = *(_BYTE *)(a1 + 856);
        v48 = *(_QWORD *)(a1 + 888);
        if (!v48)
          sub_2394172E0();
        if (((*(uint64_t (**)(uint64_t, void **, void **, void **, void **, void **, uint64_t))(*(_QWORD *)v48 + 48))(v48, &v153, &v156, v151, &v143, v149, a1 + 736) & 1) != 0)
        {
LABEL_48:
          if (*(_DWORD *)(*(_QWORD *)(a1 + 776) + 8) >= *(_DWORD *)(*(_QWORD *)(a1 + 784) + 8))
            v49 = *(_DWORD **)(a1 + 776);
          else
            v49 = *(_DWORD **)(a1 + 784);
          v50 = v49[2];
          v51 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v49 + 48))(v49) * v50;
          LODWORD(v143) = 0;
          HIDWORD(v143) = v51;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 792) + 8) >= *(_DWORD *)(*(_QWORD *)(a1 + 800) + 8))
            v52 = *(_DWORD **)(a1 + 792);
          else
            v52 = *(_DWORD **)(a1 + 800);
          v53 = v52[2];
          v54 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v52 + 48))(v52);
          LODWORD(v144) = v51;
          HIDWORD(v144) = v54 * v53;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 776) + 12) >= *(_DWORD *)(*(_QWORD *)(a1 + 792) + 12))
            v55 = *(_DWORD **)(a1 + 776);
          else
            v55 = *(_DWORD **)(a1 + 792);
          v56 = v55[3];
          v57 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 56))(v55) * v56;
          v152[0] = 0;
          v152[1] = v57;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 784) + 12) >= *(_DWORD *)(*(_QWORD *)(a1 + 800) + 12))
            v58 = *(_DWORD **)(a1 + 784);
          else
            v58 = *(_DWORD **)(a1 + 800);
          v59 = v58[3];
          v60 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v58 + 56))(v58);
          v152[2] = v57;
          v152[3] = v60 * v59;
          sub_239CDD028((_QWORD *)(a1 + 776), (uint64_t)v149, (int *)&v143, v152);
          v143 = 0;
          v144 = 0;
          v145 = 0;
          v62 = (_BYTE *)v141[12];
          v61 = (_BYTE *)v141[13];
          v63 = v61 - v62;
          if (v61 != v62)
          {
            if (v63 < 0)
              goto LABEL_156;
            v143 = operator new(v61 - v62);
            v144 = (int8x16_t *)v143;
            v64 = (int8x16_t *)((char *)v143 + 4 * (v63 >> 2));
            v145 = v64;
            memcpy(v143, v62, v63);
            v144 = v64;
          }
          v146 = 0;
          v147 = 0;
          v148 = 0;
          v66 = (_BYTE *)v141[15];
          v65 = (_BYTE *)v141[16];
          v67 = v65 - v66;
          if (v65 == v66)
          {
LABEL_66:
            v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
            sub_239CDB6DC(v69, (char **)memptr);
            v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
            sub_239CDDE5C(v70, (uint64_t)&v143);
            if (v146)
            {
              v147 = v146;
              operator delete(v146);
            }
            if (v143)
            {
              v144 = (int8x16_t *)v143;
              operator delete(v143);
            }
            v29 = 0;
            goto LABEL_73;
          }
          if ((v67 & 0x8000000000000000) == 0)
          {
            v146 = operator new(v67);
            v147 = v146;
            v68 = (char *)v146 + 4 * (v67 >> 2);
            v148 = v68;
            memcpy(v146, v66, v67);
            v147 = v68;
            goto LABEL_66;
          }
LABEL_156:
          sub_2394189F8();
        }
      }
      else if (sub_239C2B370((uint64_t)&v153, (uint64_t)&v156, (uint64_t)v151, *(_BYTE *)(a1 + 856) != 0, (uint64_t)v149, a1 + 736))
      {
        goto LABEL_48;
      }
      v29 = 1;
LABEL_73:
      free(v149[0]);
      free(v150[0]);
      free(v151[0]);
      free(v153);
      free(v156);
      if (v167)
      {
        v168 = v167;
        operator delete((void *)v167);
      }
      if (v164)
      {
        v165 = v164;
        operator delete(v164);
      }
      if (*((_QWORD *)&v160 + 1))
      {
        *(_QWORD *)&v161 = *((_QWORD *)&v160 + 1);
        operator delete(*((void **)&v160 + 1));
      }
      if (v159.i64[0])
      {
        v159.i64[1] = v159.i64[0];
        operator delete((void *)v159.i64[0]);
      }
LABEL_81:
      if (*(_QWORD *)&memptr[1].f64[1])
      {
        memptr[2].f64[0] = memptr[1].f64[1];
        operator delete(*(void **)&memptr[1].f64[1]);
      }
      if (*(_QWORD *)&memptr[0].f64[0])
      {
        memptr[0].f64[1] = memptr[0].f64[0];
        operator delete(*(void **)&memptr[0].f64[0]);
      }
      if (v29)
        goto LABEL_86;
      goto LABEL_87;
    }
LABEL_154:
    sub_2394189F8();
  }
LABEL_94:
  if (*(_BYTE *)(a1 + 393))
  {
    v10 = 0;
  }
  else
  {
    v73 = *(_QWORD *)(a1 + 488);
    v74 = *(void **)(v73 + 16);
    v75 = *(_QWORD *)(v73 + 24) - (_QWORD)v74;
    if (v75 >= 1)
      bzero(v74, 8 * (((unint64_t)v75 >> 3) - ((unint64_t)v75 > 7)) + 8);
    v76 = *(_QWORD *)(a1 + 496);
    v77 = *(void **)(v76 + 16);
    v78 = *(_QWORD *)(v76 + 24) - (_QWORD)v77;
    if (v78 >= 1)
      bzero(v77, 8 * (((unint64_t)v78 >> 3) - ((unint64_t)v78 > 7)) + 8);
    v79 = *(_QWORD *)(a1 + 472);
    v80 = *(void **)(v79 + 16);
    v81 = *(_QWORD *)(v79 + 24) - (_QWORD)v80;
    if (v81 >= 1)
      bzero(v80, 8 * (((unint64_t)v81 >> 3) - ((unint64_t)v81 > 7)) + 8);
    v82 = *(_QWORD *)(a1 + 480);
    v83 = *(void **)(v82 + 16);
    v84 = *(_QWORD *)(v82 + 24) - (_QWORD)v83;
    if (v84 >= 1)
      bzero(v83, 8 * (((unint64_t)v84 >> 3) - ((unint64_t)v84 > 7)) + 8);
    v85 = *(unsigned int *)(a1 + 448);
    if ((_DWORD)v85)
      bzero(*(void **)(a1 + 432), 8 * v85);
    if (((*(_QWORD *)(a1 + 840) - *(_QWORD *)(a1 + 832)) >> 2)
       + ((*(_QWORD *)(a1 + 816) - *(_QWORD *)(a1 + 808)) >> 2))
    {
      kdebug_trace();
      sub_239CC12AC((_QWORD *)(a1 + 432), (_QWORD *)(a1 + 736));
      v86 = (*(_QWORD *)(a1 + 816) - *(_QWORD *)(a1 + 808)) >> 2;
      v87 = (8
           * (((*(_QWORD *)(a1 + 840) - *(_QWORD *)(a1 + 832)) >> 2) - v86 + 8 * (_DWORD)v86)
           + 31) & 0xFFFFFFFE0;
      memptr[0].f64[0] = 0.0;
      malloc_type_posix_memalign((void **)memptr, 0x20uLL, v87, 0x100BBD03uLL);
      v88 = memptr[0].f64[0];
      if (!*(_QWORD *)&memptr[0].f64[0])
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v137 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v137, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v89 = *(_DWORD **)(a1 + 808);
      v90 = *(_DWORD **)(a1 + 816);
      if (v89 == v90)
      {
        v91 = 0;
      }
      else
      {
        v91 = 0;
        v92 = *(_QWORD **)(a1 + 80);
        do
        {
          if (*((_DWORD *)v92 + 8) != *v89)
          {
            v100 = v92;
            do
            {
              v101 = (_QWORD *)v100[1];
              if (v101)
              {
                do
                {
                  v92 = v101;
                  v101 = (_QWORD *)*v101;
                }
                while (v101);
              }
              else
              {
                do
                {
                  v92 = (_QWORD *)v100[2];
                  v102 = *v92 == (_QWORD)v100;
                  v100 = v92;
                }
                while (!v102);
              }
              v100 = v92;
            }
            while (*((_DWORD *)v92 + 8) != *v89);
          }
          v142 = v92[7];
          v93 = *((float64x2_t *)v92 + 7);
          memptr[2] = *((float64x2_t *)v92 + 6);
          memptr[3] = v93;
          memptr[4].f64[0] = (float64_t)v92[16];
          v94 = *((float64x2_t *)v92 + 5);
          memptr[0] = *((float64x2_t *)v92 + 4);
          memptr[1] = v94;
          *(_QWORD *)&v160 = 0;
          v159 = 0uLL;
          sub_239458B60(memptr, (double *)v159.i64);
          v95.i64[0] = v160;
          v96 = vextq_s8(v159, v95, 8uLL);
          *(_QWORD *)&v97 = v142;
          *((_QWORD *)&v97 + 1) = v159.i64[0];
          v98 = *(_OWORD *)(v92 + 17);
          v99 = *(_QWORD *)&v88 + 8 * v91;
          *(_QWORD *)(v99 + 48) = v92[19];
          *(int8x16_t *)(v99 + 16) = v96;
          *(_OWORD *)(v99 + 32) = v98;
          *(_OWORD *)v99 = v97;
          v91 += 7;
          ++v89;
        }
        while (v89 != v90);
      }
      v103 = *(_DWORD **)(a1 + 832);
      v104 = *(_DWORD **)(a1 + 840);
      if (v103 == v104)
      {
        v108 = *(_QWORD *)(a1 + 832);
      }
      else
      {
        v105 = *(_QWORD **)(a1 + 104);
        do
        {
          if (*((_DWORD *)v105 + 8) == *v103)
          {
            v106 = v105;
          }
          else
          {
            do
            {
              v107 = (_QWORD *)v105[1];
              if (v107)
              {
                do
                {
                  v106 = v107;
                  v107 = (_QWORD *)*v107;
                }
                while (v107);
              }
              else
              {
                do
                {
                  v106 = (_QWORD *)v105[2];
                  v102 = *v106 == (_QWORD)v105;
                  v105 = v106;
                }
                while (!v102);
              }
              v105 = v106;
            }
            while (*((_DWORD *)v106 + 8) != *v103);
          }
          *(_QWORD *)(*(_QWORD *)&v88 + 8 * v91++) = v106[7];
          ++v103;
          v105 = v106;
        }
        while (v103 != v104);
        v108 = *(_QWORD *)(a1 + 840);
        v103 = *(_DWORD **)(a1 + 832);
      }
      if (((unint64_t)(v108 - (_QWORD)v103) >> 2)
         + ((*(_QWORD *)(a1 + 816) - *(_QWORD *)(a1 + 808)) >> 2))
      {
        v156 = 0;
        v157 = 0;
        v158 = 0;
        v140 = v88;
        sub_239C7B3A8((_QWORD *)(a1 + 776), (uint64_t)&v156);
        sub_239C1BE20((uint64_t *)&v156);
        v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
        v159.i32[0] = 0;
        v153 = 0;
        v154 = 0;
        LODWORD(v155) = *(_DWORD *)(a1 + 728);
        sub_23945215C((uint64_t)&v153, v155);
        if ((_DWORD)v155)
          bzero(v153, 8 * v155);
        *(_QWORD *)&memptr[0].f64[0] = v109;
        *(_QWORD *)&memptr[0].f64[1] = v12;
        sub_239CBCEB8(memptr, (uint64_t *)(a1 + 712), &v153, &v159);
        v110 = *(unsigned int **)(a1 + 808);
        v111 = *(unsigned int **)(a1 + 816);
        if (v110 != v111)
        {
          v112 = 0;
          v113 = 0;
          v114 = *(unsigned int **)(a1 + 504);
          do
          {
            if (*v114 < *v110)
            {
              do
              {
                v115 = v114[1];
                ++v114;
                ++v112;
              }
              while (v115 < *v110);
            }
            v116 = *(_DWORD *)(a1 + 768) - v113 + 8 * v113;
            v143 = (void *)vrev64_s32(v158);
            v144 = (int8x16_t *)((char *)v156 + 8 * v116);
            LODWORD(v145) = v116;
            v117 = *(_QWORD *)(a1 + 432) + 8 * (*(_DWORD *)(a1 + 464) - v112 + 8 * v112);
            v118 = *(int8x16_t *)v117;
            v119 = *(_OWORD *)(v117 + 16);
            v120 = *(_OWORD *)(v117 + 32);
            v162 = *(_QWORD *)(v117 + 48);
            v160 = v119;
            v161 = v120;
            v159 = v118;
            *(_QWORD *)&memptr[0].f64[0] = &v159;
            v165 = &v143;
            v166 = &v153;
            v167 = 0x3FF0000000000000;
            sub_239CD5BA4((uint64_t)&memptr[0].f64[1], (uint64_t)&v164);
            v121.f64[0] = *(float64_t *)(*(_QWORD *)&memptr[0].f64[0] + 48);
            v122.f64[0] = memptr[3].f64[1];
            v123 = vsubq_f64(**(float64x2_t **)&memptr[0].f64[0], *(float64x2_t *)((char *)memptr + 8));
            v124 = vsubq_f64(*(float64x2_t *)(*(_QWORD *)&memptr[0].f64[0] + 32), *(float64x2_t *)((char *)&memptr[2] + 8));
            *(float64x2_t *)(v117 + 16) = vsubq_f64(*(float64x2_t *)(*(_QWORD *)&memptr[0].f64[0] + 16), *(float64x2_t *)((char *)&memptr[1] + 8));
            *(float64x2_t *)(v117 + 32) = v124;
            *(float64x2_t *)v117 = v123;
            *(_QWORD *)(v117 + 48) = *(_OWORD *)&vsubq_f64(v121, v122);
            ++v110;
            ++v113;
          }
          while (v110 != v111);
        }
        v125 = *(unsigned int **)(a1 + 832);
        v126 = *(unsigned int **)(a1 + 840);
        if (v125 != v126)
        {
          v127 = 0;
          v128 = 0;
          v129 = *(unsigned int **)(a1 + 528);
          do
          {
            if (*v129 < *v125)
            {
              do
              {
                v130 = v129[1];
                ++v129;
                ++v127;
              }
              while (v130 < *v125);
            }
            v131 = *(_DWORD *)(a1 + 772) + v128;
            v164 = (void **)vrev64_s32(v158);
            v165 = (void **)((char *)v156 + 8 * v131);
            LODWORD(v166) = v131;
            v132 = (*(_DWORD *)(a1 + 468) + v127);
            v133 = *(_QWORD *)(a1 + 432);
            v143 = *(void **)(v133 + 8 * v132);
            v159.i64[0] = (uint64_t)&v143;
            *(_QWORD *)&memptr[0].f64[1] = &v164;
            *(_QWORD *)&memptr[1].f64[0] = &v153;
            memptr[1].f64[1] = 1.0;
            sub_239C86D04((double *)&v159.i64[1], (uint64_t)memptr);
            *(double *)(v133 + 8 * v132) = *(double *)v159.i64[0] - *(double *)&v159.i64[1];
            ++v125;
            ++v128;
          }
          while (v125 != v126);
        }
        free(v153);
        free(v156);
        v88 = v140;
      }
      free(*(void **)&v88);
      kdebug_trace();
    }
    v134 = *(double *)(a1 + 560);
    memptr[0].f64[0] = *(float64_t *)(a1 + 552);
    *(_QWORD *)&memptr[0].f64[1] = a1 + 608;
    *(_QWORD *)&memptr[1].f64[0] = a1 + 8;
    memptr[1].f64[1] = v134;
    memptr[2].f64[0] = 0.0;
    LODWORD(memptr[2].f64[1]) = 2;
    memset(&memptr[3].f64[1], 0, 56);
    *(_QWORD *)&memptr[3].f64[0] = 850045863;
    sub_239CC2120(memptr, (float64x2_t)0, v4, v5, v6, v7, v8, v9);
    std::mutex::~mutex((std::mutex *)&memptr[3]);
    v10 = 0;
    *(_WORD *)(a1 + 393) = 1;
  }
LABEL_152:
  kdebug_trace();
  return v10;
}

void sub_239CBB66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  char *v43;
  uint64_t v44;
  char *v46;
  void *v47;
  void *v48;

  v46 = v43;
  while (1)
  {
    v48 = (void *)*((_QWORD *)v46 - 3);
    v46 -= 24;
    v47 = v48;
    if (v48)
    {
      *((_QWORD *)v43 - 2) = v47;
      operator delete(v47);
    }
    v43 = v46;
    if (v46 == &a13)
    {
      free(a19);
      free(a22);
      free(a25);
      free(a30);
      free(a33);
      sub_2394FCFA8(v44 - 152);
      sub_2394FCFA8((uint64_t)&a36);
      sub_2394FCFA8((uint64_t)&a43);
      sub_239C25A28();
      sub_239C22568();
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_239CBB864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int **v6;
  int v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  double *v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  uint64_t v15;
  float64x2_t *v16;
  float64x2_t *v17;
  uint64_t v18;
  float64x2_t v19;
  double *v20;
  double v21;
  std::bad_alloc *exception;
  std::bad_alloc *v24;
  double v25;
  void *v26[2];
  unsigned int v27;
  void *v28[2];
  unsigned int v29;
  void *memptr;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  v5 = (_QWORD *)(a1 + 472);
  v6 = (unsigned int **)(a1 + 656);
  if (*(_DWORD *)(a1 + 404))
    sub_239CBE280(a1 + 904, v5, v6, (unsigned int **)(a1 + 656));
  else
    sub_239CBD0D8(a1 + 904, v5, v6, (unsigned int **)(a1 + 656));
  kdebug_trace();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2);
  if (*(_BYTE *)(a1 + 408))
  {
    v7 = *(_DWORD *)(a1 + 424);
    if (v7 != 1)
    {
      if (!v7)
        sub_239C7D830((unsigned int *)(a1 + 904), *(double *)(a1 + 416));
      goto LABEL_22;
    }
    v28[0] = 0;
    v28[1] = 0;
    v29 = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, v28);
    v25 = *(double *)(a1 + 416);
    v8 = (8 * v29 + 31) & 0xFFFFFFFE0;
    v26[1] = (void *)(v8 >> 3);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x100BBD03uLL);
    v9 = (char *)memptr;
    v26[0] = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v24 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v24, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v10 = v29;
    v27 = v29;
    if (!v29)
      goto LABEL_21;
    v11 = (double *)v28[0];
    v12 = (v29 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v12 < 3)
    {
      v13 = (double *)memptr;
    }
    else
    {
      v13 = (double *)memptr;
      if ((unint64_t)memptr - (unint64_t)v28[0] >= 0x20)
      {
        v14 = v12 + 1;
        v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        v13 = (double *)((char *)memptr + v15);
        v16 = (float64x2_t *)((char *)v28[0] + 16);
        v17 = (float64x2_t *)((char *)memptr + 16);
        v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = vmulq_n_f64(*v16, v25);
          v17[-1] = vmulq_n_f64(v16[-1], v25);
          *v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_21;
        v11 = (double *)((char *)v11 + v15);
      }
    }
    v20 = (double *)&v9[8 * v10];
    do
    {
      v21 = *v11++;
      *v13++ = v25 * v21;
    }
    while (v13 != v20);
LABEL_21:
    sub_239C7DFC4((unsigned int *)(a1 + 904), (uint64_t *)v26);
    free(v26[0]);
    free(v28[0]);
  }
LABEL_22:
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2))
  {
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)(a1 + 396) = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_239CBBAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  free(a12);
  free(a15);
  _Unwind_Resume(a1);
}

void sub_239CBBB20(_Unwind_Exception *a1)
{
  sub_239C2ED74();
  _Unwind_Resume(a1);
}

void sub_239CBBB34(_Unwind_Exception *a1)
{
  sub_239C2ED44();
  _Unwind_Resume(a1);
}

double sub_239CBBB44(uint64_t a1)
{
  uint64_t v2;
  size_t v3;
  _QWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _DWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  double *v26;
  double v27;
  double *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  float64x2_t *v32;
  float64x2_t *v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  std::bad_alloc *exception;
  std::bad_alloc *v44;
  uint64_t v45;
  void **v46;
  void *v47[3];
  void *v48[2];
  unsigned int v49;
  void *memptr[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  void ***v56;
  void **v57;
  uint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v2 = (*(_QWORD *)(a1 + 816) - *(_QWORD *)(a1 + 808)) >> 2;
  v3 = (8 * (((*(_QWORD *)(a1 + 840) - *(_QWORD *)(a1 + 832)) >> 2) - v2 + 8 * (_DWORD)v2)
      + 31) & 0xFFFFFFFE0;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v3, 0x100BBD03uLL);
  v4 = memptr[0];
  if (!memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v44 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v44, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v5 = *(_DWORD **)(a1 + 808);
  v6 = *(_DWORD **)(a1 + 816);
  if (v5 == v6)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = *(_QWORD **)(a1 + 80);
    do
    {
      if (*((_DWORD *)v8 + 8) != *v5)
      {
        v16 = v8;
        do
        {
          v17 = (_QWORD *)v16[1];
          if (v17)
          {
            do
            {
              v8 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v8 = (_QWORD *)v16[2];
              v18 = *v8 == (_QWORD)v16;
              v16 = v8;
            }
            while (!v18);
          }
          v16 = v8;
        }
        while (*((_DWORD *)v8 + 8) != *v5);
      }
      v45 = v8[7];
      v9 = *((_OWORD *)v8 + 7);
      v52 = *((_OWORD *)v8 + 6);
      v53 = v9;
      v54 = v8[16];
      v10 = *((_OWORD *)v8 + 5);
      *(_OWORD *)memptr = *((_OWORD *)v8 + 4);
      v51 = v10;
      v60 = 0;
      v59 = 0uLL;
      sub_239458B60((float64x2_t *)memptr, (double *)v59.i64);
      v11.i64[0] = v60;
      v12 = vextq_s8(v59, v11, 8uLL);
      v13.i64[0] = v45;
      v13.i64[1] = v59.i64[0];
      v14 = *(int8x16_t *)(v8 + 17);
      v15 = (int8x16_t *)&v4[v7];
      v15[3].i64[0] = v8[19];
      v15[1] = v12;
      v15[2] = v14;
      *v15 = v13;
      v7 += 7;
      ++v5;
    }
    while (v5 != v6);
  }
  v19 = *(_DWORD **)(a1 + 832);
  v20 = *(_DWORD **)(a1 + 840);
  if (v19 == v20)
  {
    v24 = *(_QWORD *)(a1 + 832);
  }
  else
  {
    v21 = *(_QWORD **)(a1 + 104);
    do
    {
      if (*((_DWORD *)v21 + 8) == *v19)
      {
        v22 = v21;
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v21[1];
          if (v23)
          {
            do
            {
              v22 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v22 = (_QWORD *)v21[2];
              v18 = *v22 == (_QWORD)v21;
              v21 = v22;
            }
            while (!v18);
          }
          v21 = v22;
        }
        while (*((_DWORD *)v22 + 8) != *v19);
      }
      v4[v7++] = v22[7];
      ++v19;
      v21 = v22;
    }
    while (v19 != v20);
    v24 = *(_QWORD *)(a1 + 840);
    v19 = *(_DWORD **)(a1 + 832);
  }
  if (((unint64_t)(v24 - (_QWORD)v19) >> 2)
     + ((*(_QWORD *)(a1 + 816) - *(_QWORD *)(a1 + 808)) >> 2))
  {
    v25 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 704) + 32))(a1 + 704);
    v59.i32[0] = 0;
    v48[0] = 0;
    v48[1] = 0;
    v49 = *(_DWORD *)(a1 + 728);
    sub_23945215C((uint64_t)v48, v49);
    if (v49)
      bzero(v48[0], 8 * v49);
    memptr[0] = v25;
    memptr[1] = (void *)(a1 + 808);
    sub_239CBCEB8(memptr, (uint64_t *)(a1 + 712), v48, &v59);
    memset(v47, 0, sizeof(v47));
    sub_239C7B3A8((_QWORD *)(a1 + 776), (uint64_t)v47);
    sub_239C1BE20((uint64_t *)v47);
    if (v49)
    {
      v26 = *(double **)(a1 + 736);
      v27 = *(double *)v48[0] * *v26;
      if (v49 != 1)
      {
        v28 = (double *)((char *)v48[0] + 8);
        v29 = (v49 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
        if (v29 >= 3)
        {
          v30 = v29 + 1;
          v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
          v28 = (double *)((char *)v28 + v31);
          v32 = (float64x2_t *)(v26 + 3);
          v33 = (float64x2_t *)((char *)v48[0] + 24);
          v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v35 = vmulq_f64(v33[-1], v32[-1]);
            v36 = vmulq_f64(*v33, *v32);
            v27 = v27 + v35.f64[0] + v35.f64[1] + v36.f64[0] + v36.f64[1];
            v32 += 2;
            v33 += 2;
            v34 -= 4;
          }
          while (v34);
          if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_45;
          v26 = (double *)((char *)v26 + v31);
        }
        v37 = v26 + 1;
        do
        {
          v38 = *v28++;
          v39 = v38;
          v40 = *v37++;
          v27 = v27 + v39 * v40;
        }
        while (v28 != (double *)((char *)v48[0] + 8 * v49));
      }
    }
    else
    {
      v27 = 0.0;
    }
LABEL_45:
    v46 = v48;
    v56 = &v46;
    v57 = v47;
    v58 = 0x3FE0000000000000;
    memptr[1] = &v55;
    *(_QWORD *)&v51 = v48;
    *((_QWORD *)&v51 + 1) = 0x3FF0000000000000;
    sub_239C1C794((double *)&v59.i64[1], (double *)memptr);
    v41 = *(double *)&v59.i64[1] - v27;
    free(v47[0]);
    free(v48[0]);
    goto LABEL_46;
  }
  v41 = 0.0;
LABEL_46:
  free(v4);
  return v41;
}

void sub_239CBBF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  free(a13);
  free(a16);
  free(v16);
  _Unwind_Resume(a1);
}

double sub_239CBBFBC(_QWORD *a1)
{
  float64x2_t *v2;
  _QWORD *v3;
  double v4;
  double *v5;
  float64x2_t v7;
  float64x2_t v8;
  float64_t v18;
  float64_t v19;
  double *v20;
  double *v21;
  float64x2_t v22[4];
  float64_t v23;
  __int128 v24;
  uint64_t v25;

  v2 = (float64x2_t *)a1[10];
  v3 = a1 + 11;
  v4 = 0.0;
  if (v2 != (float64x2_t *)(a1 + 11))
  {
    do
    {
      if ((BYTE4(v2[10].f64[0]) & 2) == 0 && BYTE4(v2[2].f64[1]))
      {
        v7 = v2[7];
        v22[2] = v2[6];
        v22[3] = v7;
        v23 = v2[8].f64[0];
        v8 = v2[5];
        v22[0] = v2[4];
        v22[1] = v8;
        v25 = 0;
        v24 = 0uLL;
        sub_239458B60(v22, (double *)&v24);
        _V1.D[1] = *((_QWORD *)&v24 + 1);
        _D5 = *((_QWORD *)&v24 + 1);
        __asm { FMLA            D2, D5, V1.D[1] }
        _D1 = v2[9].f64[0];
        __asm { FMLA            D0, D1, V4.D[1] }
        v4 = v4 + _D0 + v2[9].f64[1] * v2[9].f64[1];
      }
      v18 = v2->f64[1];
      if (v18 == 0.0)
      {
        do
        {
          v19 = v2[1].f64[0];
          _ZF = **(_QWORD **)&v19 == (_QWORD)v2;
          v2 = *(float64x2_t **)&v19;
        }
        while (!_ZF);
      }
      else
      {
        do
        {
          v19 = v18;
          v18 = **(double **)&v18;
        }
        while (v18 != 0.0);
      }
      v2 = *(float64x2_t **)&v19;
    }
    while (*(_QWORD **)&v19 != v3);
  }
  v5 = (double *)a1[13];
  if (v5 != (double *)(a1 + 14))
  {
    do
    {
      if ((*((_BYTE *)v5 + 68) & 2) == 0 && *((_BYTE *)v5 + 44))
        v4 = v4 + v5[7] * v5[7];
      v20 = (double *)*((_QWORD *)v5 + 1);
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = *(double **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (double *)*((_QWORD *)v5 + 2);
          _ZF = *(_QWORD *)v21 == (_QWORD)v5;
          v5 = v21;
        }
        while (!_ZF);
      }
      v5 = v21;
    }
    while (v21 != (double *)(a1 + 14));
  }
  return v4;
}

uint64_t sub_239CBC134(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  double v7;
  __int128 v9;
  uint64_t v10;
  double v11;
  double v19;
  double cosval;
  double v21;
  __double2 v22;
  float64_t v23;
  double v24;
  float64x2_t v25;
  double v26;
  double v27;
  double v28;
  float64_t v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  double v35;
  double v37;
  float64x2_t v39;
  _QWORD *v42;
  _QWORD *v43;
  double *v44;
  uint64_t result;
  uint64_t v46;
  double v47;
  double *v48;
  double *v49;
  __int128 v50;

  kdebug_trace();
  v4 = *(_QWORD **)(a1 + 552);
  v5 = (_QWORD *)v4[1];
  if (v5 != v4 + 2)
  {
    do
    {
      v6 = *((unsigned int *)v5 + 40);
      if ((_DWORD)v6 != -1)
      {
        v7 = *((double *)v5 + 7);
        *((double *)v5 + 22) = v7;
        _Q2 = *((float64x2_t *)v5 + 4);
        *(_OWORD *)(v5 + 25) = *((_OWORD *)v5 + 5);
        v9 = *((_OWORD *)v5 + 7);
        *(_OWORD *)(v5 + 27) = *((_OWORD *)v5 + 6);
        *(_OWORD *)(v5 + 29) = v9;
        v5[31] = v5[16];
        *(float64x2_t *)(v5 + 23) = _Q2;
        *((_OWORD *)v5 + 16) = *(_OWORD *)(v5 + 17);
        v5[34] = v5[19];
        v10 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 656) + 4 * v6);
        *((double *)v5 + 7) = v7 + *(double *)v10;
        v11 = *(double *)(v10 + 24);
        _Q7 = *(float64x2_t *)(v10 + 8);
        _D13 = *(double *)(v10 + 16);
        _Q0 = vmulq_f64(_Q7, _Q7);
        __asm { FMLA            D0, D13, V7.D[1] }
        v19 = _Q0.f64[0] + v11 * v11;
        if (v19 >= 0.0000002635)
        {
          v21 = sqrt(v19);
          v50 = *(_OWORD *)(v10 + 8);
          v22 = __sincos_stret(v21);
          cosval = v22.__cosval;
          *(_QWORD *)&_Q7.f64[0] = v50;
          _Q0.f64[0] = v22.__sinval / v21;
          _Q2.f64[0] = 1.0 / v19 * (1.0 - v22.__cosval);
        }
        else
        {
          _Q2.f64[0] = 0.5 - v19 * (v19 / -720.0 + 0.0416666667);
          _Q0.f64[0] = 1.0 - v19 * (0.166666667 - v19 * (v19 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v19 * _Q2.f64[0];
        }
        v23 = _Q7.f64[0] * _Q2.f64[0];
        v24 = _D13 * _Q2.f64[0];
        v25.f64[0] = cosval + _Q7.f64[0] * _Q2.f64[0] * _Q7.f64[0];
        v26 = cosval + _D13 * _Q2.f64[0] * _D13;
        v27 = cosval + v11 * _Q2.f64[0] * v11;
        _Q2.f64[0] = _D13 * (_Q7.f64[0] * _Q2.f64[0]);
        v28 = v11 * v24;
        v29 = _Q7.f64[0] * _Q0.f64[0];
        v30 = _D13 * _Q0.f64[0];
        _Q0.f64[0] = v11 * _Q0.f64[0];
        v31.f64[0] = _Q2.f64[0] - _Q0.f64[0];
        v32.f64[0] = v30 + v11 * v23;
        v25.f64[1] = _Q2.f64[0] + _Q0.f64[0];
        v31.f64[1] = v26;
        _D3 = v29 + v28;
        v32.f64[1] = v28 - v29;
        _Q0.f64[0] = (float64_t)v5[10];
        _Q4 = *((float64x2_t *)v5 + 4);
        v35 = *((double *)v5 + 13);
        _Q7 = *(float64x2_t *)(v5 + 11);
        v37 = *((double *)v5 + 16);
        _Q19 = *((float64x2_t *)v5 + 7);
        v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, _Q4.f64[0]), v31, _Q4, 1), v32, _Q0.f64[0]);
        __asm { FMLA            D21, D3, V4.D[1] }
        _Q0.f64[0] = _D21 + v27 * _Q0.f64[0];
        __asm
        {
          FMLA            D21, D3, V7.D[1]
          FMLA            D2, D3, V19.D[1]
        }
        v5[10] = *(_QWORD *)&_Q0.f64[0];
        *((float64x2_t *)v5 + 4) = v39;
        *((double *)v5 + 13) = _D21 + v27 * v35;
        *(float64x2_t *)(v5 + 11) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, _Q7.f64[0]), v31, _Q7, 1), v32, v35);
        *((double *)v5 + 16) = _Q2.f64[0] + v27 * v37;
        *((float64x2_t *)v5 + 7) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, _Q19.f64[0]), v31, _Q19, 1), v32, v37);
        _Q0.f64[0] = (float64_t)v5[19];
        _Q2.f64[0] = *(float64_t *)(v10 + 48);
        *(float64x2_t *)(v5 + 17) = vaddq_f64(*(float64x2_t *)(v5 + 17), *(float64x2_t *)(v10 + 32));
        v5[19] = *(_OWORD *)&vaddq_f64(_Q0, _Q2);
      }
      v42 = (_QWORD *)v5[1];
      if (v42)
      {
        do
        {
          v43 = v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (_QWORD *)v5[2];
          _ZF = *v43 == (_QWORD)v5;
          v5 = v43;
        }
        while (!_ZF);
      }
      v5 = v43;
    }
    while (v43 != v4 + 2);
  }
  v44 = (double *)v4[4];
  if (v44 != (double *)(v4 + 5))
  {
    do
    {
      v46 = *((unsigned int *)v44 + 16);
      if ((_DWORD)v46 != -1)
      {
        v47 = v44[7];
        v44[10] = v47;
        v44[7] = *(double *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 680) + 4 * v46)) + v47;
      }
      v48 = (double *)*((_QWORD *)v44 + 1);
      if (v48)
      {
        do
        {
          v49 = v48;
          v48 = *(double **)v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          v49 = (double *)*((_QWORD *)v44 + 2);
          _ZF = *(_QWORD *)v49 == (_QWORD)v44;
          v44 = v49;
        }
        while (!_ZF);
      }
      v44 = v49;
    }
    while (v49 != (double *)(v4 + 5));
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 394) = *(_BYTE *)(a1 + 393);
  *(_WORD *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 395) = 0;
  return result;
}

BOOL sub_239CBC4BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[6];
  uint64_t v15;

  v4 = a1 + 992;
  v13 = *(_QWORD *)(a1 + 936);
  v5 = *(_OWORD *)(a1 + 920);
  v11 = *(_OWORD *)(a1 + 904);
  v12 = v5;
  WORD4(v12) = WORD4(v5) & 0xFFF1 | 0xC;
  if (*(_DWORD *)(a1 + 992) != 2)
  {
    sub_239A23A84(a1 + 1000);
    *(_DWORD *)(a1 + 992) = 2;
  }
  *(_DWORD *)(v4 + 8) = -3;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1026) = 0u;
  *(_OWORD *)(a1 + 1042) = 0u;
  *(_DWORD *)(a1 + 1008) = -3;
  *(_DWORD *)(a1 + 1020) = 0;
  *(_QWORD *)(v4 + 20) = 0;
  *(_WORD *)(a1 + 1024) = 1;
  *(_BYTE *)(a1 + 1072) = 1;
  *(_QWORD *)(v4 + 88) = 0;
  sub_239A23AC4(SparseFactorizationCholesky, (uint64_t)&v11, (uint64_t)v14);
  v6 = v14[2];
  *(_OWORD *)(v4 + 56) = v14[3];
  v7 = v14[5];
  *(_OWORD *)(v4 + 72) = v14[4];
  *(_OWORD *)(v4 + 88) = v7;
  v8 = v14[1];
  *(_OWORD *)(v4 + 8) = v14[0];
  *(_OWORD *)(v4 + 24) = v8;
  *(_QWORD *)(a1 + 1096) = v15;
  *(_OWORD *)(v4 + 40) = v6;
  v9 = *(_DWORD *)(v4 + 8);
  switch(v9)
  {
    case -4:
    case -3:
      goto LABEL_6;
    case -2:
    case -1:
      v9 = 1;
      goto LABEL_7;
    case 0:
      goto LABEL_7;
    default:
      if (v9 == -2147483647)
      {
LABEL_6:
        v9 = 2;
LABEL_7:
        *(_DWORD *)v4 = v9;
      }
      else
      {
        v9 = *(_DWORD *)v4;
      }
      *(_BYTE *)(a1 + 392) = v9 == 0;
      if (v9)
        return 1;
      sub_239C7B08C(v4, a2, (uint64_t)a2);
      return *(_BYTE *)(a1 + 392) == 0;
  }
}

uint64_t sub_239CBC62C()
{
  return 1;
}

uint64_t sub_239CBC634()
{
  return 0;
}

void sub_239CBC63C(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFCA50;
  if (*(_DWORD *)(a1 + 992) != 2)
    sub_239A23A84(a1 + 1000);
  sub_239CB662C(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239CBC694(uint64_t a1, double a2, double a3, double a4, double a5, float64x2_t a6)
{
  return sub_239CBCD54(a1 + 432, a2, a3, a4, a5, a6);
}

uint64_t sub_239CBC69C(uint64_t result, double a2)
{
  *(double *)(result + 416) = a2;
  return result;
}

uint64_t sub_239CBC6A4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 856) = a2;
  return result;
}

uint64_t sub_239CBC6AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 856);
}

BOOL sub_239CBC6B4(_QWORD *a1)
{
  return ((a1[105] - a1[104]) >> 2) + ((a1[102] - a1[101]) >> 2) != 0;
}

uint64_t sub_239CBC6E0(uint64_t a1)
{
  return a1 + 736;
}

uint64_t sub_239CBC6E8(uint64_t a1)
{
  return a1 + 736;
}

double sub_239CBC6F0(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(unsigned int *)(a1 + 448);
  if (v4 != (_DWORD)v5)
  {
    *(_DWORD *)(a2 + 16) = v5;
    sub_23945215C(a2, v5);
  }
  v7 = *(unsigned int *)(a1 + 456);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 464);
    v10 = 4 * v7;
    do
    {
      v11 = *(_QWORD *)(a1 + 432) + 8 * v9;
      v12 = *(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 656) + v8);
      result = *(double *)(v11 + 48);
      v13 = *(_OWORD *)(v11 + 32);
      v14 = *(_OWORD *)v11;
      *(_OWORD *)(v12 + 16) = *(_OWORD *)(v11 + 16);
      *(_OWORD *)(v12 + 32) = v13;
      *(double *)(v12 + 48) = result;
      *(_OWORD *)v12 = v14;
      v8 += 4;
      v9 += 7;
    }
    while (v10 != v8);
  }
  v15 = *(unsigned int *)(a1 + 460);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = *(_DWORD *)(a1 + 468);
    do
    {
      result = *(double *)(*(_QWORD *)(a1 + 432) + 8 * (v17 + v16));
      *(double *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 680) + 4 * v16++)) = result;
    }
    while (v15 != v16);
  }
  return result;
}

void sub_239CBC7B8(uint64_t a1, uint64_t a2)
{
  sub_239CBC980((_QWORD *)(a1 + 472), a2, a1 + 656);
}

BOOL sub_239CBC7C8(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  unsigned int v6;
  uint64_t v7;
  int v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  _QWORD v12[2];
  void *memptr;
  _QWORD *v14;

  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  v1 = *(_DWORD *)(a1 + 992);
  if (!v1)
  {
    *(_QWORD *)(a1 + 976) = *(_QWORD *)(a1 + 560) + 72;
    *(_QWORD *)(a1 + 984) = a1 + 608;
    v3 = *(_DWORD *)(a1 + 1016) * *(unsigned __int8 *)(a1 + 1024);
    *(_DWORD *)(a1 + 968) = v3;
    *(_DWORD *)(a1 + 972) = v3;
    sub_23945215C(a1 + 952, v3 * (unint64_t)v3);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * v3 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v4 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if ((_DWORD)v3)
    {
      bzero(memptr, 8 * v3);
      for (i = 0; i != v3; ++i)
      {
        v4[i] = 0x3FF0000000000000;
        v6 = *(_DWORD *)(a1 + 968);
        v7 = *(_QWORD *)(a1 + 952);
        v8 = *(_DWORD *)(a1 + 992);
        if (v4 == (_QWORD *)(v7 + 8 * v6 * i))
        {
          if (!v8 && v6 == *(_DWORD *)(a1 + 1012) * *(unsigned __int8 *)(a1 + 1024))
          {
            v14 = v4;
            memptr = (void *)v6;
            sub_239A2424C(a1 + 1000, (uint64_t)&memptr, 0);
          }
        }
        else if (!v8 && (_DWORD)v3 == *(_DWORD *)(a1 + 1012) * *(unsigned __int8 *)(a1 + 1024))
        {
          v14 = v4;
          memptr = (void *)v3;
          v12[1] = v7 + 8 * v6 * i;
          v12[0] = v6;
          if (v7)
            sub_239A23C90(a1 + 1000, (uint64_t)v12, (uint64_t)&memptr, 0);
        }
        v4[i] = 0;
      }
    }
    free(v4);
  }
  return v1 == 0;
}

void sub_239CBC96C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_239CBC980(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  int64_t v19;
  void *v20;
  size_t v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t i;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  int64_t v36;
  char *v37;
  char *v38;

  v6 = *a1;
  v7 = *(_DWORD *)(v6 + 8) * (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1);
  v8 = (_DWORD *)a1[1];
  v9 = v8[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 48))(v8);
  if (v7 <= v9)
    v7 = v9;
  v10 = (_DWORD *)a1[2];
  v11 = v10[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 48))(v10);
  v12 = (_DWORD *)a1[3];
  v13 = v12[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 48))(v12);
  if (v11 > v13)
    v13 = v11;
  v14 = v13 + v7;
  *(_DWORD *)(a2 + 16) = v14;
  sub_23945215C(a2, v14);
  v15 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v15)
    bzero(*(void **)a2, 8 * v15);
  v16 = *a1;
  v18 = *(const void **)a3;
  v17 = *(_QWORD *)(a3 + 8);
  v19 = v17 - *(_QWORD *)a3;
  if (v17 == *(_QWORD *)a3)
  {
    v20 = 0;
    v22 = 0;
    v23 = *(unsigned int *)(v16 + 12);
    if (!(_DWORD)v23)
      goto LABEL_26;
  }
  else
  {
    if (v19 < 0)
      sub_2394189F8();
    v20 = operator new(v17 - *(_QWORD *)a3);
    v21 = 4 * (v19 >> 2);
    memcpy(v20, v18, v19);
    if (v21)
    {
      if ((v21 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v22 = (unsigned int *)operator new(4 * (v19 >> 2));
      v19 = (int64_t)&v22[v19 >> 2];
      memcpy(v22, v20, v21);
      v23 = *(unsigned int *)(v16 + 12);
      if (!(_DWORD)v23)
        goto LABEL_26;
    }
    else
    {
      v22 = 0;
      v19 = 0;
      v23 = *(unsigned int *)(v16 + 12);
      if (!(_DWORD)v23)
        goto LABEL_26;
    }
  }
  for (i = 0; i < v23; ++i)
  {
    v25 = (uint64_t *)(*(_QWORD *)(v16 + 88) + 24 * i);
    v26 = *v25;
    v27 = v25[1];
    if (v26 != v27)
    {
      while (i != *(_DWORD *)v26)
      {
        v26 += 16;
        if (v26 == v27)
          goto LABEL_18;
      }
      if ((v19 - (uint64_t)v22) >> 2 <= i)
        sub_23941D884();
      v28 = (_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * *(_QWORD *)(v26 + 8));
      v29 = *(_QWORD *)a2 + 8 * v22[i];
      *(_QWORD *)&v30 = *v28;
      if (v28 == *(_QWORD **)a2)
      {
        *(_QWORD *)&v31 = v28[16];
        *(_QWORD *)&v32 = v28[32];
        *((_QWORD *)&v30 + 1) = v28[8];
        *((_QWORD *)&v31 + 1) = v28[24];
        *((_QWORD *)&v32 + 1) = v28[40];
        *(_QWORD *)(v29 + 48) = v28[48];
        *(_OWORD *)(v29 + 16) = v31;
        *(_OWORD *)(v29 + 32) = v32;
        *(_OWORD *)v29 = v30;
        v23 = *(unsigned int *)(v16 + 12);
      }
      else
      {
        *(_QWORD *)v29 = v30;
        *(_QWORD *)(v29 + 8) = v28[8];
        *(_QWORD *)(v29 + 16) = v28[16];
        *(_QWORD *)(v29 + 24) = v28[24];
        *(_QWORD *)(v29 + 32) = v28[32];
        *(_QWORD *)(v29 + 40) = v28[40];
        *(_QWORD *)(v29 + 48) = v28[48];
      }
    }
LABEL_18:
    ;
  }
LABEL_26:
  if (v22)
    operator delete(v22);
  if (v20)
    operator delete(v20);
  v33 = a1[3];
  v35 = *(_BYTE **)(a3 + 24);
  v34 = *(_BYTE **)(a3 + 32);
  v36 = v34 - v35;
  if (v34 == v35)
  {
    v38 = 0;
    v37 = 0;
  }
  else
  {
    if (v36 < 0)
      sub_2394189F8();
    v37 = (char *)operator new(v34 - v35);
    v38 = &v37[4 * (v36 >> 2)];
    memcpy(v37, v35, v36);
  }
  sub_239C7ADC4(v33, (_QWORD *)a2, v37, v38);
  if (v37)
    operator delete(v37);
}

void sub_239CBCCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (!__p || (operator delete(__p), v13))
    operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_239CBCD54(uint64_t result, double a2, double a3, double a4, double a5, float64x2_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  float64_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unint64_t v26;
  uint64_t v27;
  double v28;

  v6 = *(_QWORD *)(result + 40);
  v7 = *(unsigned int *)(v6 + 8);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_QWORD *)(v6 + 88);
    v10 = 0.0;
    do
    {
      v11 = *(unsigned int **)(v9 + 24 * v8);
      v12 = *(unsigned int **)(v9 + 24 * v8 + 8);
      if (v12 != v11)
      {
        while (1)
        {
          v13 = *v11;
          if (v8 <= v13)
            break;
          v11 += 4;
          if (v11 == v12)
            goto LABEL_3;
        }
        if (v11 != v12 && v8 == v13)
        {
          v14 = *(_QWORD *)(v6 + 16);
          if (v14)
          {
            v15 = (float64_t *)(v14 + 8 * *((_QWORD *)v11 + 1));
            v16.f64[0] = *v15;
            v17.f64[0] = v15[16];
            v18.f64[0] = v15[32];
            v17.f64[1] = v15[24];
            a6.f64[0] = v15[48];
            v16.f64[1] = v15[8];
            v18.f64[1] = v15[40];
            *(_QWORD *)&a6.f64[0] = *(_OWORD *)&vabsq_f64(a6);
            a6.f64[1] = NAN;
            v19 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v16), vabsq_f64(v18)), vmaxnmq_f64(vabsq_f64(v17), a6)));
            if (v10 < v19)
              v10 = v19;
          }
        }
      }
LABEL_3:
      ++v8;
    }
    while (v8 != v7);
  }
  else
  {
    v10 = 0.0;
  }
  v20 = *(_QWORD *)(result + 64);
  v21 = *(unsigned int *)(v20 + 8);
  if ((_DWORD)v21)
  {
    v22 = 0;
    v23 = *(_QWORD *)(v20 + 88);
    do
    {
      v24 = *(unsigned int **)(v23 + 24 * v22);
      v25 = *(unsigned int **)(v23 + 24 * v22 + 8);
      if (v25 != v24)
      {
        while (1)
        {
          v26 = *v24;
          if (v22 <= v26)
            break;
          v24 += 4;
          if (v24 == v25)
            goto LABEL_17;
        }
        if (v24 != v25 && v22 == v26)
        {
          v27 = *(_QWORD *)(v20 + 16);
          if (v27)
          {
            v28 = fabs(*(double *)(v27 + 8 * *((_QWORD *)v24 + 1)));
            if (v10 < v28)
              v10 = v28;
          }
        }
      }
LABEL_17:
      ++v22;
    }
    while (v22 != v21);
  }
  return result;
}

float64_t sub_239CBCEB8(_QWORD *a1, uint64_t *a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  _DWORD *v27;
  _DWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  float64_t v34;
  float64x2_t v35[4];
  uint64_t v36;
  int8x16_t v37;
  uint64_t v38;

  v7 = *a2;
  v8 = a1[1];
  v9 = *(_DWORD **)v8;
  v10 = *(_DWORD **)(v8 + 8);
  if (*(_DWORD **)v8 != v10)
  {
    v12 = *(_QWORD **)(*a1 + 8);
    do
    {
      if (*((_DWORD *)v12 + 8) == *v9)
      {
        v24 = v12;
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v12[1];
          if (v25)
          {
            do
            {
              v24 = v25;
              v25 = (_QWORD *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v24 = (_QWORD *)v12[2];
              v26 = *v24 == (_QWORD)v12;
              v12 = v24;
            }
            while (!v26);
          }
          v12 = v24;
        }
        while (*((_DWORD *)v24 + 8) != *v9);
      }
      v13 = (float64x2_t *)(v7 + 8 * *a4);
      v34 = *((double *)v24 + 7);
      v14 = *((float64x2_t *)v24 + 7);
      v35[2] = *((float64x2_t *)v24 + 6);
      v35[3] = v14;
      v36 = v24[16];
      v37 = 0uLL;
      v15 = *((float64x2_t *)v24 + 5);
      v35[0] = *((float64x2_t *)v24 + 4);
      v35[1] = v15;
      v38 = 0;
      sub_239458B60(v35, (double *)v37.i64);
      v16.i64[0] = v38;
      *(_QWORD *)&v17.f64[1] = v37.i64[1];
      v18 = (float64x2_t)vdupq_lane_s64(v37.i64[0], 0);
      v18.f64[0] = v34;
      v17.f64[0] = (float64_t)v24[19];
      v19.f64[0] = v13[3].f64[0];
      v20 = vsubq_f64(v18, *v13);
      v21 = vsubq_f64((float64x2_t)vextq_s8(v37, v16, 8uLL), v13[1]);
      v22 = vsubq_f64(*(float64x2_t *)(v24 + 17), v13[2]);
      v23 = *a3 + 8 * *a4;
      *(float64x2_t *)(v23 + 16) = v21;
      *(float64x2_t *)(v23 + 32) = v22;
      *(float64x2_t *)v23 = v20;
      *(_QWORD *)(v23 + 48) = *(_OWORD *)&vsubq_f64(v17, v19);
      *a4 += 7;
      ++v9;
      v12 = v24;
    }
    while (v9 != v10);
    v7 = *a2;
    v8 = a1[1];
  }
  v27 = *(_DWORD **)(v8 + 24);
  v28 = *(_DWORD **)(v8 + 32);
  if (v27 != v28)
  {
    v29 = *(_QWORD **)(*a1 + 32);
    do
    {
      if (*((_DWORD *)v29 + 8) == *v27)
      {
        v31 = v29;
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v29[1];
          if (v32)
          {
            do
            {
              v31 = v32;
              v32 = (_QWORD *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              v31 = (_QWORD *)v29[2];
              v26 = *v31 == (_QWORD)v29;
              v29 = v31;
            }
            while (!v26);
          }
          v29 = v31;
        }
        while (*((_DWORD *)v31 + 8) != *v27);
      }
      v30 = 8 * *a4;
      v21.f64[0] = *((double *)v31 + 7) - *(double *)(v7 + v30);
      *(float64_t *)(*a3 + v30) = v21.f64[0];
      ++*a4;
      ++v27;
      v29 = v31;
    }
    while (v27 != v28);
  }
  return v21.f64[0];
}

void sub_239CBD0D8(uint64_t a1, _QWORD *a2, unsigned int **a3, unsigned int **a4)
{
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  _DWORD *v36;
  unsigned int v37;
  _DWORD *v38;
  unsigned int v39;
  _DWORD *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  unsigned int v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  unsigned int *v65;
  unint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  int v73;
  unint64_t v74;
  __n128 v75;
  unint64_t v76;
  __n128 *v77;
  __n128 *v78;
  unint64_t v79;
  __n128 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 *v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int *v92;
  unint64_t v93;
  __n128 *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  __n128 *v102;
  __n128 *v103;
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  __n128 *v120;
  __n128 *v121;
  __n128 v122;
  __n128 *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  __n128 *v143;
  __n128 *v144;
  __n128 v145;
  __n128 *v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  __n128 *v165;
  __n128 *v166;
  __n128 v167;
  __n128 *v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int *v171;
  uint64_t v172;
  size_t v173;
  uint64_t v174;
  __n128 *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned __int32 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  unsigned int v190;
  char *v191;
  uint64_t v192;
  size_t v193;
  unint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  _QWORD *v197;
  unsigned int v198;
  unsigned int v199;
  std::bad_alloc *exception;
  std::bad_alloc *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int *v210;
  unsigned int *v211;
  unsigned int *v212;
  unsigned int *v213;
  unsigned int *v214;
  uint64_t v216;
  unsigned int *v217;
  unint64_t v218;
  unsigned int **v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int *v234;
  unsigned int *v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __n128 *v248;
  uint64_t v249;
  unsigned int *v250;
  unsigned int *v251;
  unsigned int *v252;
  void *memptr;

  v7 = *a2;
  v8 = *(_DWORD *)(v7 + 8) * (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  v9 = (_DWORD *)a2[1];
  v10 = v9[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 48))(v9);
  if (v8 <= v10)
    v8 = v10;
  v11 = (_DWORD *)a2[2];
  v12 = v11[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 48))(v11);
  v13 = (_DWORD *)a2[3];
  v14 = v13[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 48))(v13);
  if (v12 > v14)
    v14 = v12;
  v15 = v14 + v8;
  v16 = *a3;
  v17 = a3[1];
  v219 = a3;
  if (*a3 != v17)
  {
    v18 = v16 + 1;
    if (v16 + 1 != v17)
    {
      v19 = *v16;
      v20 = v16 + 1;
      do
      {
        v22 = *v20++;
        v21 = v22;
        v23 = v19 >= v22;
        if (v19 <= v22)
          v19 = v21;
        if (!v23)
          v16 = v18;
        v18 = v20;
      }
      while (v20 != v17);
    }
    v24 = *v16 + 7;
    if (v24 > v15)
      v15 = v24;
  }
  v25 = a3[3];
  v26 = a3[4];
  if (v25 != v26)
  {
    v27 = v25 + 1;
    if (v25 + 1 != v26)
    {
      v28 = *v25;
      v29 = v25 + 1;
      do
      {
        v31 = *v29++;
        v30 = v31;
        v32 = v28 >= v31;
        if (v28 <= v31)
          v28 = v30;
        if (!v32)
          v25 = v27;
        v27 = v29;
      }
      while (v29 != v26);
    }
    v33 = *v25;
    if (v33 + 1 > v15)
      v15 = v33 + 1;
  }
  v34 = *a2;
  v35 = *(_DWORD *)(v34 + 12) * (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
  v36 = (_DWORD *)a2[2];
  v37 = v36[3] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v36 + 56))(v36);
  if (v35 <= v37)
    v35 = v37;
  v38 = (_DWORD *)a2[1];
  v39 = v38[3] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v38 + 56))(v38);
  v40 = (_DWORD *)a2[3];
  v41 = v40[3] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v40 + 56))(v40);
  if (v39 > v41)
    v41 = v39;
  v42 = v41 + v35;
  v43 = *a4;
  v44 = a4[1];
  if (*a4 != v44)
  {
    v45 = v43 + 1;
    if (v43 + 1 != v44)
    {
      v46 = *v43;
      v47 = v43 + 1;
      do
      {
        v49 = *v47++;
        v48 = v49;
        v50 = v46 >= v49;
        if (v46 <= v49)
          v46 = v48;
        if (!v50)
          v43 = v45;
        v45 = v47;
      }
      while (v47 != v44);
    }
    v51 = *v43 + 7;
    if (v51 > v42)
      v42 = v51;
  }
  v52 = a4[3];
  v53 = a4[4];
  if (v52 != v53)
  {
    v54 = v52 + 1;
    if (v52 + 1 != v53)
    {
      v55 = *v52;
      v56 = v52 + 1;
      do
      {
        v58 = *v56++;
        v57 = v58;
        v59 = v55 >= v58;
        if (v55 <= v58)
          v55 = v57;
        if (!v59)
          v52 = v54;
        v54 = v56;
      }
      while (v56 != v53);
    }
    v60 = *v52;
    if (v60 + 1 > v42)
      v42 = v60 + 1;
  }
  v61 = 0;
  v62 = *(unsigned __int8 *)(a1 + 28);
  v250 = 0;
  v251 = 0;
  v252 = 0;
  v63 = v42 / v62;
  v249 = v62;
  if (v42 >= v62)
  {
    v64 = v42 / v62;
    v65 = (unsigned int *)operator new(v64 * 4);
    v61 = v65;
    v250 = v65;
    v252 = &v65[v64];
    v66 = (v63 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v67 = v65;
    if (v66 >= 7)
    {
      v68 = (v66 + 1) & 0x7FFFFFFFFFFFFFF8;
      v69 = v65;
      v70 = v68;
      do
      {
        *(_OWORD *)v69 = 0uLL;
        *((_OWORD *)v69 + 1) = 0uLL;
        v69 += 8;
        v70 -= 8;
      }
      while (v70);
      if (v66 + 1 == v68)
        goto LABEL_56;
      v67 = &v65[v68];
    }
    do
      *v67++ = 0;
    while (v67 != &v65[v64]);
LABEL_56:
    v251 = &v65[v64];
  }
  v202 = v63;
  v216 = a1;
  v71 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 40))(a2[2]);
  v72 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  v73 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  v74 = (7 * v71)
      + (unint64_t)v72
      + (49 * v73)
      + 7 * (*(unsigned int (**)(_QWORD))(*(_QWORD *)a2[1] + 40))(a2[1]);
  v76 = *(unsigned __int8 *)(v216 + 28) * *(unsigned __int8 *)(v216 + 28);
  v204 = v42;
  if (v74 >= v76)
  {
    v79 = v74 / v76;
    v80 = (__n128 *)operator new(32 * (v74 / v76));
    v78 = &v80[2 * v79];
    v77 = v80;
  }
  else
  {
    v77 = 0;
    v78 = 0;
  }
  v81 = v249;
  v237 = v15 / v249;
  v82 = a2[2];
  LODWORD(v83) = 7 / v249;
  v205 = a2;
  v203 = 7 / v249;
  if (*(_DWORD *)(v82 + 12) && v249 <= 7)
  {
    if ((_DWORD)v249 == 1)
    {
      v106 = 0;
      v107 = *(_QWORD *)(v82 + 16);
      if (v83 <= 1)
        v83 = 1;
      else
        v83 = v83;
      v84 = v77;
      v240 = v83;
      v245 = *(_QWORD *)(v82 + 16);
      v211 = v61;
      v220 = a2[2];
      do
      {
        v108 = *(_QWORD *)(v82 + 88) + 24 * v106;
        v109 = *(unsigned int **)v108;
        v228 = v106;
        v233 = *(unsigned int **)(v108 + 8);
        v110 = (*a4)[v106];
        v224 = (unint64_t)v233 - *(_QWORD *)v108;
        if (v233 != *(unsigned int **)v108)
        {
          do
          {
            v112 = 0;
            v113 = v219[3][*v109];
            do
            {
              v114 = v107 + 8 * (*((_QWORD *)v109 + 1) + v112);
              v115 = v113 + v237 * (unint64_t)(v110 + v112);
              if (v84 < v78)
              {
                v84->n128_u64[0] = v115;
                v84->n128_u32[2] = v113;
                v84[1].n128_u64[0] = v114;
                v84[1].n128_u32[2] = 1;
                v84 += 2;
              }
              else
              {
                v116 = ((char *)v84 - (char *)v77) >> 5;
                v117 = v116 + 1;
                if ((unint64_t)(v116 + 1) >> 59)
                  sub_2394189F8();
                if (v78 - v77 > v117)
                  v117 = v78 - v77;
                if ((unint64_t)((char *)v78 - (char *)v77) >= 0x7FFFFFFFFFFFFFE0)
                  v118 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v118 = v117;
                if (v118)
                {
                  if (v118 >> 59)
                    sub_239418A80();
                  v119 = (char *)operator new(32 * v118);
                }
                else
                {
                  v119 = 0;
                }
                v120 = (__n128 *)&v119[32 * v116];
                v120->n128_u64[0] = v115;
                v120->n128_u32[2] = v113;
                v120[1].n128_u64[0] = v114;
                v120[1].n128_u32[2] = 1;
                if (v84 == v77)
                {
                  v123 = (__n128 *)&v119[32 * v116];
                }
                else
                {
                  v121 = (__n128 *)&v119[32 * v116];
                  do
                  {
                    v75 = v84[-2];
                    v122 = v84[-1];
                    v123 = v121 - 2;
                    v121[-2] = v75;
                    v121[-1] = v122;
                    v84 -= 2;
                    v121 -= 2;
                  }
                  while (v84 != v77);
                }
                v78 = (__n128 *)&v119[32 * v118];
                v84 = v120 + 2;
                if (v77)
                  operator delete(v77);
                v77 = v123;
                v83 = v240;
                v107 = v245;
              }
              ++v112;
            }
            while (v112 != v83);
            v109 += 4;
          }
          while (v109 != v233);
        }
        v61 = v211;
        v111 = v224 >> 4;
        v211[v110] += v224 >> 4;
        v211[(v110 + 1)] += v224 >> 4;
        if ((_DWORD)v83 != 2)
        {
          v211[(v110 + 2)] += v111;
          if ((_DWORD)v83 != 3)
          {
            v211[(v110 + 3)] += v111;
            if ((_DWORD)v83 != 4)
            {
              v211[(v110 + 4)] += v111;
              if ((_DWORD)v83 != 5)
              {
                v211[(v110 + 5)] += v111;
                if ((_DWORD)v83 != 6)
                  v211[(v110 + 6)] += v111;
              }
            }
          }
        }
        v106 = v228 + 1;
        v82 = v220;
        v81 = v249;
      }
      while (v228 + 1 < (unint64_t)*(unsigned int *)(v220 + 12));
    }
    else
    {
      v194 = 0;
      v195 = *a4;
      if (v83 <= 1)
        v196 = 1;
      else
        v196 = 7 / v249;
      v197 = (_QWORD *)(*(_QWORD *)(v82 + 88) + 8);
      do
      {
        v198 = ((*v197 - *(v197 - 1)) >> 4) / v249;
        v199 = v195[v194] / v249;
        v61[v199] += v198;
        if (v249 < 4)
        {
          v61[v199 + 1] += v198;
          if (v196 != 2)
          {
            v61[v199 + 2] += v198;
            if (v196 != 3)
            {
              v61[v199 + 3] += v198;
              if (v196 != 4)
              {
                v61[v199 + 4] += v198;
                if (v196 != 5)
                {
                  v61[v199 + 5] += v198;
                  if (v196 != 6)
                    v61[v199 + 6] += v198;
                }
              }
            }
          }
        }
        ++v194;
        v197 += 3;
      }
      while (v194 < *(unsigned int *)(v82 + 12));
      v84 = v77;
      v81 = v249;
    }
  }
  else
  {
    v84 = v77;
  }
  v85 = v205;
  v86 = v205[3];
  if (*(_DWORD *)(v86 + 12) && (_DWORD)v81 == 1)
  {
    v87 = 0;
    v88 = *(_QWORD *)(v86 + 16);
    v89 = v77;
    v244 = v88;
    v210 = v250;
    v223 = v205[3];
    do
    {
      v90 = *(_QWORD *)(v86 + 88) + 24 * v87;
      v91 = *(unsigned int **)v90;
      v92 = *(unsigned int **)(v90 + 8);
      v227 = (unint64_t)v92 - *(_QWORD *)v90;
      v232 = a4[3][v87];
      v239 = v87;
      if (v227)
      {
        v93 = a4[3][v87] * (unint64_t)v237;
        v94 = v89;
        do
        {
          v95 = v219[3][*v91];
          v96 = v93 + v95;
          v97 = v88 + 8 * *((_QWORD *)v91 + 1);
          if (v84 < v78)
          {
            v84->n128_u64[0] = v96;
            v84->n128_u32[2] = v95;
            v84[1].n128_u64[0] = v97;
            v84[1].n128_u32[2] = 1;
            v84 += 2;
            v89 = v94;
          }
          else
          {
            v98 = ((char *)v84 - (char *)v94) >> 5;
            v99 = v98 + 1;
            if ((unint64_t)(v98 + 1) >> 59)
              sub_2394189F8();
            if (v78 - v94 > v99)
              v99 = v78 - v94;
            if ((unint64_t)((char *)v78 - (char *)v94) >= 0x7FFFFFFFFFFFFFE0)
              v100 = 0x7FFFFFFFFFFFFFFLL;
            else
              v100 = v99;
            if (v100)
            {
              if (v100 >> 59)
                sub_239418A80();
              v101 = (char *)operator new(32 * v100);
            }
            else
            {
              v101 = 0;
            }
            v102 = (__n128 *)&v101[32 * v98];
            v102->n128_u64[0] = v96;
            v102->n128_u32[2] = v95;
            v102[1].n128_u64[0] = v97;
            v102[1].n128_u32[2] = 1;
            if (v84 == v94)
            {
              v89 = (__n128 *)&v101[32 * v98];
            }
            else
            {
              v103 = (__n128 *)&v101[32 * v98];
              do
              {
                v75 = v84[-2];
                v104 = v84[-1];
                v89 = v103 - 2;
                v103[-2] = v75;
                v103[-1] = v104;
                v84 -= 2;
                v103 -= 2;
              }
              while (v84 != v94);
            }
            v78 = (__n128 *)&v101[32 * v100];
            v84 = v102 + 2;
            if (v94)
              operator delete(v94);
            v88 = v244;
          }
          v91 += 4;
          v94 = v89;
        }
        while (v91 != v92);
      }
      v61 = v210;
      v81 = v249;
      v210[v232] += v227 >> 4;
      v87 = v239 + 1;
      v86 = v223;
    }
    while (v239 + 1 < (unint64_t)*(unsigned int *)(v223 + 12));
    v77 = v89;
    v105 = v216;
    v85 = v205;
  }
  else
  {
    v105 = v216;
  }
  v124 = *v85;
  if (*(_DWORD *)(*v85 + 12) && v81 <= 7)
  {
    v125 = 0;
    v225 = *(_QWORD *)(v124 + 16);
    v221 = 7 * v81;
    if (v203 <= 1)
      v126 = 1;
    else
      v126 = v203;
    v246 = v126;
    v212 = v250;
    v206 = v124;
    do
    {
      v127 = *(_QWORD *)(v124 + 88) + 24 * v125;
      v129 = *(unsigned int **)v127;
      v128 = *(unsigned int **)(v127 + 8);
      v207 = (unint64_t)v128 - *(_QWORD *)v127;
      v208 = v125;
      v130 = (*a4)[v125] / v81;
      v217 = v128;
      v229 = v130;
      if (v128 != *(unsigned int **)v127)
      {
        do
        {
          v132 = 0;
          v133 = (*v219)[*v129] / v81;
          v234 = v129;
          do
          {
            v134 = 0;
            v135 = v237 * (unint64_t)(v130 + v132);
            v241 = v132;
            v136 = v225 + 8 * (*((_QWORD *)v129 + 1) + (v221 * v132));
            do
            {
              v137 = v133 + v134;
              v138 = v135 + v137;
              if (v84 < v78)
              {
                v84->n128_u64[0] = v138;
                v84->n128_u32[2] = v137;
                v84[1].n128_u64[0] = v136;
                v84[1].n128_u32[2] = 7;
                v84 += 2;
              }
              else
              {
                v139 = ((char *)v84 - (char *)v77) >> 5;
                v140 = v139 + 1;
                if ((unint64_t)(v139 + 1) >> 59)
                  sub_2394189F8();
                if (v78 - v77 > v140)
                  v140 = v78 - v77;
                if ((unint64_t)((char *)v78 - (char *)v77) >= 0x7FFFFFFFFFFFFFE0)
                  v141 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v141 = v140;
                if (v141)
                {
                  if (v141 >> 59)
                    sub_239418A80();
                  v142 = (char *)operator new(32 * v141);
                }
                else
                {
                  v142 = 0;
                }
                v143 = (__n128 *)&v142[32 * v139];
                v143->n128_u64[0] = v138;
                v143->n128_u32[2] = v137;
                v143[1].n128_u64[0] = v136;
                v143[1].n128_u32[2] = 7;
                if (v84 == v77)
                {
                  v146 = (__n128 *)&v142[32 * v139];
                }
                else
                {
                  v144 = (__n128 *)&v142[32 * v139];
                  do
                  {
                    v75 = v84[-2];
                    v145 = v84[-1];
                    v146 = v144 - 2;
                    v144[-2] = v75;
                    v144[-1] = v145;
                    v84 -= 2;
                    v144 -= 2;
                  }
                  while (v84 != v77);
                }
                v78 = (__n128 *)&v142[32 * v141];
                v84 = v143 + 2;
                if (v77)
                  operator delete(v77);
                v77 = v146;
                v81 = v249;
                v126 = v246;
              }
              ++v134;
              v136 += 8 * v81;
            }
            while (v134 != v126);
            v132 = v241 + 1;
            v130 = v229;
            v129 = v234;
          }
          while (v241 + 1 != v126);
          v129 = v234 + 4;
        }
        while (v234 + 4 != v217);
      }
      v131 = 7 * (v207 >> 4) / v81;
      v61 = v212;
      v212[v130] += v131;
      v81 = v249;
      if (v249 <= 3)
      {
        v212[v130 + 1] += v131;
        v81 = v249;
        if ((_DWORD)v126 != 2)
        {
          v212[v130 + 2] += v131;
          v81 = v249;
          if ((_DWORD)v126 != 3)
          {
            v212[v130 + 3] += v131;
            v81 = v249;
            if ((_DWORD)v126 != 4)
            {
              v212[v130 + 4] += v131;
              v81 = v249;
              if ((_DWORD)v126 != 5)
              {
                v212[v130 + 5] += v131;
                v81 = v249;
                if ((_DWORD)v126 != 6)
                {
                  v81 = v249;
                  v212[v130 + 6] += v131;
                }
              }
            }
          }
        }
      }
      v125 = v208 + 1;
      v124 = v206;
    }
    while (v208 + 1 < (unint64_t)*(unsigned int *)(v206 + 12));
    v105 = v216;
    v85 = v205;
  }
  v147 = v85[1];
  if (*(_DWORD *)(v147 + 12))
    v148 = (_DWORD)v81 == 1;
  else
    v148 = 0;
  if (v148)
  {
    v149 = 0;
    v230 = *(_QWORD *)(v147 + 16);
    if (v203 <= 1)
      v150 = 1;
    else
      v150 = v203;
    v247 = v150;
    v209 = v147;
    v213 = v250;
    do
    {
      v151 = *(_QWORD *)(v147 + 88) + 24 * v149;
      v153 = *(unsigned int **)v151;
      v152 = *(unsigned int **)(v151 + 8);
      v218 = (unint64_t)v152 - *(_QWORD *)v151;
      v235 = v152;
      v222 = a4[3][v149];
      v226 = v149;
      if (v152 != *(unsigned int **)v151)
      {
        v154 = a4[3][v149] * (unint64_t)v237;
        v155 = v249;
        do
        {
          v156 = 0;
          v157 = (*v219)[*v153];
          v242 = v153;
          v158 = v230 + 8 * *((_QWORD *)v153 + 1);
          do
          {
            v159 = v157 + v156;
            v160 = v154 + v159;
            if (v84 < v78)
            {
              v84->n128_u64[0] = v160;
              v84->n128_u32[2] = v159;
              v84[1].n128_u64[0] = v158;
              v84[1].n128_u32[2] = 7;
              v84 += 2;
            }
            else
            {
              v161 = ((char *)v84 - (char *)v77) >> 5;
              v162 = v161 + 1;
              if ((unint64_t)(v161 + 1) >> 59)
                sub_2394189F8();
              if (v78 - v77 > v162)
                v162 = v78 - v77;
              if ((unint64_t)((char *)v78 - (char *)v77) >= 0x7FFFFFFFFFFFFFE0)
                v163 = 0x7FFFFFFFFFFFFFFLL;
              else
                v163 = v162;
              if (v163)
              {
                if (v163 >> 59)
                  sub_239418A80();
                v164 = (char *)operator new(32 * v163);
              }
              else
              {
                v164 = 0;
              }
              v165 = (__n128 *)&v164[32 * v161];
              v165->n128_u64[0] = v160;
              v165->n128_u32[2] = v159;
              v165[1].n128_u64[0] = v158;
              v165[1].n128_u32[2] = 7;
              if (v84 == v77)
              {
                v168 = (__n128 *)&v164[32 * v161];
              }
              else
              {
                v166 = (__n128 *)&v164[32 * v161];
                do
                {
                  v75 = v84[-2];
                  v167 = v84[-1];
                  v168 = v166 - 2;
                  v166[-2] = v75;
                  v166[-1] = v167;
                  v84 -= 2;
                  v166 -= 2;
                }
                while (v84 != v77);
              }
              v78 = (__n128 *)&v164[32 * v163];
              v84 = v165 + 2;
              if (v77)
                operator delete(v77);
              v77 = v168;
              v155 = v249;
              v150 = v247;
            }
            ++v156;
            v158 += 8 * v155;
          }
          while (v156 != v150);
          v153 = v242 + 4;
        }
        while (v242 + 4 != v235);
      }
      v61 = v213;
      v213[v222] += 7 * (v218 >> 4);
      v149 = v226 + 1;
      v147 = v209;
    }
    while (v226 + 1 < (unint64_t)*(unsigned int *)(v209 + 12));
    v105 = v216;
  }
  v169 = 126 - 2 * __clz(((char *)v84 - (char *)v77) >> 5);
  if (v84 == v77)
    v170 = 0;
  else
    v170 = v169;
  sub_239CC0384((uint64_t)v77, v84, v170, 1, v75);
  *(_WORD *)(v105 + 24) &= ~1u;
  sub_239C7F1C4(v105, v237, &v250);
  v214 = v61;
  if (v204 >= v249)
  {
    v172 = 0;
    v173 = 8 * v249;
    if (v202 <= 1)
      v174 = 1;
    else
      v174 = v202;
    v231 = v174;
    v175 = v77;
    do
    {
      v176 = *(_QWORD *)(v105 + 8);
      v177 = *(_QWORD *)(v176 + 8 * v172);
      v236 = v172 + 1;
      v238 = *(_QWORD *)(v176 + 8 * (v172 + 1));
      if (v177 != v238)
      {
        v178 = 8 * v177;
        do
        {
          *(_DWORD *)(*(_QWORD *)(v105 + 16) + 4 * v177) = v175->n128_u32[2];
          v179 = v175[1].n128_u64[0];
          v180 = v175[1].n128_u32[2];
          v181 = *(unsigned __int8 *)(v105 + 28);
          v182 = *(_QWORD *)(v105 + 32);
          v183 = (v181 * v181);
          v243 = v178;
          v248 = v175;
          if (v179 == v182 + 8 * v177 * v183)
          {
            memptr = 0;
            malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * (_DWORD)v183 + 31) & 0xFFFE0, 0x100BBD03uLL);
            v188 = (char *)memptr;
            v189 = v249;
            if (!memptr)
            {
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v201 = std::bad_alloc::bad_alloc(exception);
              __cxa_throw(v201, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
            }
            v190 = 0;
            v191 = (char *)memptr;
            do
            {
              memmove(v191, (const void *)(v179 + 8 * v190), v173);
              v190 += v180;
              v191 += v173;
              --v189;
            }
            while (v189);
            v105 = v216;
            if ((_DWORD)v181)
            {
              v192 = 0;
              v193 = 8 * v181;
              do
              {
                memmove((void *)(v179 + v192), &v188[v192], v193);
                v192 += v193;
                --v181;
              }
              while (v181);
            }
            free(v188);
          }
          else
          {
            v184 = 0;
            v185 = (char *)(v182
                          + v178 * *(unsigned __int8 *)(v105 + 28) * (unint64_t)*(unsigned __int8 *)(v105 + 28));
            v186 = 8 * v181;
            v187 = v249;
            do
            {
              memmove(v185, (const void *)(v179 + 8 * v184), v173);
              v185 += v186;
              v184 += v180;
              --v187;
            }
            while (v187);
          }
          v175 = v248 + 2;
          ++v177;
          v178 = v243 + 8;
        }
        while (v177 != v238);
      }
      v172 = v236;
    }
    while (v236 != v231);
  }
  v171 = v214;
  if (v77)
  {
    operator delete(v77);
    v171 = v250;
  }
  if (v171)
  {
    v251 = v171;
    operator delete(v171);
  }
}

void sub_239CBE22C(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v4;

  if (v1)
    operator delete(v1);
  v4 = *(void **)(v2 - 120);
  if (v4)
  {
    *(_QWORD *)(v2 - 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_239CBE280(uint64_t a1, _QWORD *a2, unsigned int **a3, unsigned int **a4)
{
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  _DWORD *v35;
  unsigned int v36;
  _DWORD *v37;
  unsigned int v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t v60;
  size_t v61;
  unsigned int *v62;
  int v63;
  unsigned int v64;
  int v65;
  unint64_t v66;
  __n128 v67;
  unint64_t v68;
  __n128 *v69;
  __n128 *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __n128 *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  __n128 *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  __n128 *v91;
  __n128 *v92;
  __n128 v93;
  uint64_t v94;
  __n128 *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  __n128 *v103;
  __n128 *v104;
  __n128 v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  __n128 *v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  __n128 *v127;
  __n128 *v128;
  __n128 v129;
  __n128 *v130;
  __n128 *v131;
  __n128 *v132;
  __n128 v133;
  __n128 *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int *v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  __n128 *v152;
  __n128 *v153;
  __n128 v154;
  __n128 *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned int *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  __n128 *v167;
  __n128 *v168;
  __n128 v169;
  __n128 *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  __n128 *v174;
  uint64_t v175;
  unsigned int *v176;
  uint64_t v177;
  unsigned int v178;
  unint64_t v179;
  uint64_t v180;
  __n128 *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  __n128 *v188;
  __n128 *v189;
  __n128 v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  __n128 *v197;
  __n128 *v198;
  __n128 v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __n128 *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  char *v211;
  uint64_t v212;
  size_t v213;
  unsigned int *v214;
  std::bad_alloc *exception;
  std::bad_alloc *v216;
  _QWORD *v217;
  unsigned int v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v224;
  unsigned int *v225;
  unint64_t v226;
  unsigned int **v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int *v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int *v235;
  unint64_t v236;
  unsigned int *v237;
  unsigned int *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  unsigned int *v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int *v249;
  unsigned int *v250;
  unsigned int *v251;
  void *memptr;

  v6 = *a2;
  v7 = *(_DWORD *)(v6 + 8) * (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  v8 = (_DWORD *)a2[1];
  v9 = v8[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 48))(v8);
  if (v7 <= v9)
    v7 = v9;
  v10 = (_DWORD *)a2[2];
  v11 = v10[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 48))(v10);
  v12 = (_DWORD *)a2[3];
  v13 = v12[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 48))(v12);
  if (v11 > v13)
    v13 = v11;
  v14 = v13 + v7;
  v15 = *a3;
  v16 = a3[1];
  v228 = a3;
  if (*a3 != v16)
  {
    v17 = v15 + 1;
    if (v15 + 1 != v16)
    {
      v18 = *v15;
      v19 = v15 + 1;
      do
      {
        v21 = *v19++;
        v20 = v21;
        v22 = v18 >= v21;
        if (v18 <= v21)
          v18 = v20;
        if (!v22)
          v15 = v17;
        v17 = v19;
      }
      while (v19 != v16);
    }
    v23 = *v15 + 7;
    if (v23 > v14)
      v14 = v23;
  }
  v24 = a3[3];
  v25 = a3[4];
  if (v24 != v25)
  {
    v26 = v24 + 1;
    if (v24 + 1 != v25)
    {
      v27 = *v24;
      v28 = v24 + 1;
      do
      {
        v30 = *v28++;
        v29 = v30;
        v31 = v27 >= v30;
        if (v27 <= v30)
          v27 = v29;
        if (!v31)
          v24 = v26;
        v26 = v28;
      }
      while (v28 != v25);
    }
    v32 = *v24;
    if (v32 + 1 > v14)
      v14 = v32 + 1;
  }
  v33 = *a2;
  v34 = *(_DWORD *)(v33 + 12) * (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
  v35 = (_DWORD *)a2[2];
  v36 = v35[3] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v35 + 56))(v35);
  if (v34 <= v36)
    v34 = v36;
  v37 = (_DWORD *)a2[1];
  v38 = v37[3] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v37 + 56))(v37);
  v39 = (_DWORD *)a2[3];
  v40 = v39[3] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v39 + 56))(v39);
  if (v38 > v40)
    v40 = v38;
  v41 = v40 + v34;
  v42 = *a4;
  v43 = a4[1];
  if (*a4 != v43)
  {
    v44 = v42 + 1;
    if (v42 + 1 != v43)
    {
      v45 = *v42;
      v46 = v42 + 1;
      do
      {
        v48 = *v46++;
        v47 = v48;
        v49 = v45 >= v48;
        if (v45 <= v48)
          v45 = v47;
        if (!v49)
          v42 = v44;
        v44 = v46;
      }
      while (v46 != v43);
    }
    v50 = *v42 + 7;
    if (v50 > v41)
      v41 = v50;
  }
  v51 = a4[3];
  v52 = a4[4];
  if (v51 != v52)
  {
    v53 = v51 + 1;
    if (v51 + 1 != v52)
    {
      v54 = *v51;
      v55 = v51 + 1;
      do
      {
        v57 = *v55++;
        v56 = v57;
        v58 = v54 >= v57;
        if (v54 <= v57)
          v54 = v56;
        if (!v58)
          v51 = v53;
        v53 = v55;
      }
      while (v55 != v52);
    }
    v59 = *v51;
    if (v59 + 1 > v41)
      v41 = v59 + 1;
  }
  v60 = v41;
  v249 = 0;
  v250 = 0;
  v251 = 0;
  if (v41)
  {
    v61 = v41;
    v62 = (unsigned int *)operator new(v61 * 4);
    v249 = v62;
    v251 = &v62[v61];
    bzero(v62, 4 * v60);
    v250 = &v62[v61];
  }
  else
  {
    v62 = 0;
  }
  v63 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 40))(a2[2]);
  v64 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  v65 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  v222 = v60;
  v66 = (7 * v63)
      + (unint64_t)v64
      + (49 * v65)
      + 7 * (*(unsigned int (**)(_QWORD))(*(_QWORD *)a2[1] + 40))(a2[1]);
  v68 = *(unsigned __int8 *)(a1 + 28) * *(unsigned __int8 *)(a1 + 28);
  v218 = v14;
  if (v66 >= v68)
  {
    v71 = v66 / v68;
    v69 = (__n128 *)operator new(32 * (v66 / v68));
    v70 = &v69[2 * v71];
  }
  else
  {
    v69 = 0;
    v70 = 0;
  }
  v244 = v62;
  v217 = a2;
  v72 = a2[2];
  v73 = *(unsigned int *)(v72 + 12);
  if ((_DWORD)v73)
  {
    v74 = 0;
    v75 = *(_QWORD *)(v72 + 16);
    v76 = v69;
    v239 = v75;
    v224 = a2[2];
    do
    {
      v77 = *(_QWORD *)(v72 + 88) + 24 * v74;
      v78 = *(unsigned int **)v77;
      v232 = *(unsigned int **)(v77 + 8);
      if (*(unsigned int **)v77 != v232)
      {
        v229 = v74;
        v79 = (*a4)[v74];
        v242 = v79;
        do
        {
          v80 = v228[3][*v78];
          v244 = v249;
          if (v79 >= v80)
          {
            v94 = 0;
            v95 = v69;
            do
            {
              v96 = v79 + v94;
              v97 = v75 + 8 * (*((_QWORD *)v78 + 1) + v94);
              v98 = v80 + v218 * (unint64_t)v96;
              if (v76 < v70)
              {
                v76->n128_u64[0] = v98;
                v76->n128_u32[2] = v80;
                v76[1].n128_u64[0] = v97;
                v76[1].n128_u32[2] = 1;
                v76 += 2;
                v69 = v95;
              }
              else
              {
                v99 = ((char *)v76 - (char *)v95) >> 5;
                v100 = v99 + 1;
                if ((unint64_t)(v99 + 1) >> 59)
                  sub_2394189F8();
                if (v70 - v95 > v100)
                  v100 = v70 - v95;
                if ((unint64_t)((char *)v70 - (char *)v95) >= 0x7FFFFFFFFFFFFFE0)
                  v101 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v101 = v100;
                if (v101)
                {
                  if (v101 >> 59)
                    sub_239418A80();
                  v102 = (char *)operator new(32 * v101);
                }
                else
                {
                  v102 = 0;
                }
                v103 = (__n128 *)&v102[32 * v99];
                v103->n128_u64[0] = v98;
                v103->n128_u32[2] = v80;
                v103[1].n128_u64[0] = v97;
                v103[1].n128_u32[2] = 1;
                if (v76 == v95)
                {
                  v69 = (__n128 *)&v102[32 * v99];
                }
                else
                {
                  v104 = (__n128 *)&v102[32 * v99];
                  do
                  {
                    v67 = v76[-2];
                    v105 = v76[-1];
                    v69 = v104 - 2;
                    v104[-2] = v67;
                    v104[-1] = v105;
                    v76 -= 2;
                    v104 -= 2;
                  }
                  while (v76 != v95);
                }
                v70 = (__n128 *)&v102[32 * v101];
                v76 = v103 + 2;
                if (v95)
                  operator delete(v95);
                v75 = v239;
                v79 = v242;
              }
              ++v244[v96];
              ++v94;
              v95 = v69;
            }
            while (v94 != 7);
          }
          else
          {
            v81 = 0;
            v82 = v218 * (unint64_t)v80;
            v83 = v69;
            do
            {
              v84 = v79 + v81;
              v85 = v75 + 8 * (*((_QWORD *)v78 + 1) + v81);
              v86 = v82 + v84;
              if (v76 < v70)
              {
                v76->n128_u64[0] = v86;
                v76->n128_u32[2] = v84;
                v76[1].n128_u64[0] = v85;
                v76[1].n128_u32[2] = 1;
                v76 += 2;
                v69 = v83;
              }
              else
              {
                v87 = ((char *)v76 - (char *)v83) >> 5;
                v88 = v87 + 1;
                if ((unint64_t)(v87 + 1) >> 59)
                  sub_2394189F8();
                if (v70 - v83 > v88)
                  v88 = v70 - v83;
                if ((unint64_t)((char *)v70 - (char *)v83) >= 0x7FFFFFFFFFFFFFE0)
                  v89 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v89 = v88;
                if (v89)
                {
                  if (v89 >> 59)
                    sub_239418A80();
                  v90 = (char *)operator new(32 * v89);
                }
                else
                {
                  v90 = 0;
                }
                v91 = (__n128 *)&v90[32 * v87];
                v91->n128_u64[0] = v86;
                v91->n128_u32[2] = v84;
                v91[1].n128_u64[0] = v85;
                v91[1].n128_u32[2] = 1;
                if (v76 == v83)
                {
                  v69 = (__n128 *)&v90[32 * v87];
                }
                else
                {
                  v92 = (__n128 *)&v90[32 * v87];
                  do
                  {
                    v67 = v76[-2];
                    v93 = v76[-1];
                    v69 = v92 - 2;
                    v92[-2] = v67;
                    v92[-1] = v93;
                    v76 -= 2;
                    v92 -= 2;
                  }
                  while (v76 != v83);
                }
                v70 = (__n128 *)&v90[32 * v89];
                v76 = v91 + 2;
                if (v83)
                  operator delete(v83);
                v82 = v218 * (unint64_t)v80;
                v75 = v239;
                v79 = v242;
              }
              ++v244[v80];
              ++v81;
              v83 = v69;
            }
            while (v81 != 7);
          }
          v78 += 4;
        }
        while (v78 != v232);
        v72 = v224;
        v73 = *(unsigned int *)(v224 + 12);
        v74 = v229;
      }
      ++v74;
    }
    while (v74 < v73);
  }
  else
  {
    v76 = v69;
  }
  v106 = v217[3];
  v107 = *(unsigned int *)(v106 + 12);
  if ((_DWORD)v107)
  {
    v108 = 0;
    v109 = *(_QWORD *)(v106 + 16);
    v110 = v69;
    v240 = v109;
    v233 = v217[3];
    do
    {
      v111 = *(_QWORD *)(v106 + 88) + 24 * v108;
      v113 = *(unsigned int **)v111;
      v112 = *(unsigned int **)(v111 + 8);
      if (*(unsigned int **)v111 != v112)
      {
        v236 = v108;
        v114 = a4[3][v108];
        v244 = v249;
        do
        {
          v115 = v228[3][*v113];
          v116 = v109 + 8 * *((_QWORD *)v113 + 1);
          if (v114 >= v115)
          {
            v118 = v114 * (unint64_t)v218 + v115;
            if (v76 < v70)
            {
              v76->n128_u64[0] = v118;
              v76->n128_u32[2] = v115;
              v76[1].n128_u64[0] = v116;
              v76[1].n128_u32[2] = 1;
              v76 += 2;
              v115 = v114;
            }
            else
            {
              v119 = ((char *)v76 - (char *)v110) >> 5;
              v120 = v119 + 1;
              if ((unint64_t)(v119 + 1) >> 59)
                goto LABEL_298;
              if (v70 - v110 > v120)
                v120 = v70 - v110;
              if ((unint64_t)((char *)v70 - (char *)v110) >= 0x7FFFFFFFFFFFFFE0)
                v121 = 0x7FFFFFFFFFFFFFFLL;
              else
                v121 = v120;
              if (v121)
              {
                if (v121 >> 59)
                  goto LABEL_299;
                v122 = (char *)operator new(32 * v121);
              }
              else
              {
                v122 = 0;
              }
              v127 = (__n128 *)&v122[32 * v119];
              v127->n128_u64[0] = v118;
              v127->n128_u32[2] = v115;
              v127[1].n128_u64[0] = v116;
              v127[1].n128_u32[2] = 1;
              if (v76 == v110)
              {
                v130 = (__n128 *)&v122[32 * v119];
              }
              else
              {
                v128 = (__n128 *)&v122[32 * v119];
                do
                {
                  v67 = v76[-2];
                  v129 = v76[-1];
                  v130 = v128 - 2;
                  v128[-2] = v67;
                  v128[-1] = v129;
                  v76 -= 2;
                  v128 -= 2;
                }
                while (v76 != v110);
              }
              v70 = (__n128 *)&v122[32 * v121];
              v76 = v127 + 2;
              if (v110)
                operator delete(v110);
              v110 = v130;
              v115 = v114;
              v109 = v240;
            }
          }
          else
          {
            v117 = v114 + v218 * (unint64_t)v115;
            if (v76 >= v70)
            {
              v123 = ((char *)v76 - (char *)v110) >> 5;
              v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 59)
LABEL_298:
                sub_2394189F8();
              if (v70 - v110 > v124)
                v124 = v70 - v110;
              if ((unint64_t)((char *)v70 - (char *)v110) >= 0x7FFFFFFFFFFFFFE0)
                v125 = 0x7FFFFFFFFFFFFFFLL;
              else
                v125 = v124;
              if (v125)
              {
                if (v125 >> 59)
LABEL_299:
                  sub_239418A80();
                v126 = (char *)operator new(32 * v125);
              }
              else
              {
                v126 = 0;
              }
              v131 = (__n128 *)&v126[32 * v123];
              v131->n128_u64[0] = v117;
              v131->n128_u32[2] = v114;
              v131[1].n128_u64[0] = v116;
              v131[1].n128_u32[2] = 1;
              if (v76 == v110)
              {
                v134 = (__n128 *)&v126[32 * v123];
              }
              else
              {
                v132 = (__n128 *)&v126[32 * v123];
                do
                {
                  v67 = v76[-2];
                  v133 = v76[-1];
                  v134 = v132 - 2;
                  v132[-2] = v67;
                  v132[-1] = v133;
                  v76 -= 2;
                  v132 -= 2;
                }
                while (v76 != v110);
              }
              v70 = (__n128 *)&v126[32 * v125];
              v76 = v131 + 2;
              if (v110)
                operator delete(v110);
              v110 = v134;
              v109 = v240;
            }
            else
            {
              v76->n128_u64[0] = v117;
              v76->n128_u32[2] = v114;
              v76[1].n128_u64[0] = v116;
              v76[1].n128_u32[2] = 1;
              v76 += 2;
            }
          }
          ++v244[v115];
          v113 += 4;
        }
        while (v113 != v112);
        v106 = v233;
        v108 = v236;
        v107 = *(unsigned int *)(v233 + 12);
      }
      ++v108;
    }
    while (v108 < v107);
  }
  else
  {
    v110 = v69;
  }
  v135 = *v217;
  v136 = *(unsigned int *)(*v217 + 12);
  if ((_DWORD)v136)
  {
    v137 = 0;
    v234 = *(_QWORD *)(v135 + 16);
    v138 = v244;
    v219 = *v217;
    do
    {
      v139 = *(_QWORD *)(v135 + 88) + 24 * v137;
      v140 = *(unsigned int **)v139;
      v225 = *(unsigned int **)(v139 + 8);
      if (*(unsigned int **)v139 != v225)
      {
        v220 = v137;
        v241 = (*a4)[v137];
        do
        {
          v141 = (*v228)[*v140];
          v237 = v140;
          v245 = v141;
          v142 = 0;
          if (v241 < v141)
          {
            do
            {
              v143 = 0;
              v144 = v241 + v142;
              v243 = v142;
              v145 = v234 + 8 * (*((_QWORD *)v140 + 1) - v142 + 8 * v142);
              v138 = v249;
              do
              {
                v146 = v141 + v143;
                v147 = v144 + v218 * (unint64_t)v146;
                if (v76 < v70)
                {
                  v76->n128_u64[0] = v147;
                  v76->n128_u32[2] = v144;
                  v76[1].n128_u64[0] = v145;
                  v76[1].n128_u32[2] = 1;
                  v76 += 2;
                }
                else
                {
                  v148 = ((char *)v76 - (char *)v110) >> 5;
                  v149 = v148 + 1;
                  if ((unint64_t)(v148 + 1) >> 59)
                    sub_2394189F8();
                  if (v70 - v110 > v149)
                    v149 = v70 - v110;
                  if ((unint64_t)((char *)v70 - (char *)v110) >= 0x7FFFFFFFFFFFFFE0)
                    v150 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v150 = v149;
                  if (v150)
                  {
                    if (v150 >> 59)
                      sub_239418A80();
                    v151 = (char *)operator new(32 * v150);
                  }
                  else
                  {
                    v151 = 0;
                  }
                  v152 = (__n128 *)&v151[32 * v148];
                  v152->n128_u64[0] = v147;
                  v152->n128_u32[2] = v144;
                  v152[1].n128_u64[0] = v145;
                  v152[1].n128_u32[2] = 1;
                  if (v76 == v110)
                  {
                    v155 = (__n128 *)&v151[32 * v148];
                  }
                  else
                  {
                    v153 = (__n128 *)&v151[32 * v148];
                    do
                    {
                      v67 = v76[-2];
                      v154 = v76[-1];
                      v155 = v153 - 2;
                      v153[-2] = v67;
                      v153[-1] = v154;
                      v76 -= 2;
                      v153 -= 2;
                    }
                    while (v76 != v110);
                  }
                  v70 = (__n128 *)&v151[32 * v150];
                  v76 = v152 + 2;
                  if (v110)
                    operator delete(v110);
                  v110 = v155;
                  v141 = v245;
                }
                ++v138[v146];
                ++v143;
                v145 += 8;
              }
              while (v143 != 7);
              v142 = v243 + 1;
              v140 = v237;
            }
            while (v243 != 6);
          }
          else
          {
            do
            {
              v156 = 0;
              v157 = v241 + v142;
              v158 = v218 * (unint64_t)v157;
              v230 = v142;
              v159 = v234 + 8 * (*((_QWORD *)v140 + 1) - v142 + 8 * v142);
              v138 = v249;
              do
              {
                v160 = v141 + v156;
                v161 = v158 + v160;
                if (v76 < v70)
                {
                  v76->n128_u64[0] = v161;
                  v76->n128_u32[2] = v160;
                  v76[1].n128_u64[0] = v159;
                  v76[1].n128_u32[2] = 7;
                  v76 += 2;
                }
                else
                {
                  v162 = v138;
                  v163 = ((char *)v76 - (char *)v110) >> 5;
                  v164 = v163 + 1;
                  if ((unint64_t)(v163 + 1) >> 59)
                    sub_2394189F8();
                  if (v70 - v110 > v164)
                    v164 = v70 - v110;
                  if ((unint64_t)((char *)v70 - (char *)v110) >= 0x7FFFFFFFFFFFFFE0)
                    v165 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v165 = v164;
                  if (v165)
                  {
                    if (v165 >> 59)
                      sub_239418A80();
                    v166 = (char *)operator new(32 * v165);
                  }
                  else
                  {
                    v166 = 0;
                  }
                  v167 = (__n128 *)&v166[32 * v163];
                  v167->n128_u64[0] = v161;
                  v167->n128_u32[2] = v160;
                  v167[1].n128_u64[0] = v159;
                  v167[1].n128_u32[2] = 7;
                  if (v76 == v110)
                  {
                    v170 = (__n128 *)&v166[32 * v163];
                    v138 = v162;
                  }
                  else
                  {
                    v168 = (__n128 *)&v166[32 * v163];
                    v138 = v162;
                    do
                    {
                      v67 = v76[-2];
                      v169 = v76[-1];
                      v170 = v168 - 2;
                      v168[-2] = v67;
                      v168[-1] = v169;
                      v76 -= 2;
                      v168 -= 2;
                    }
                    while (v76 != v110);
                  }
                  v70 = (__n128 *)&v166[32 * v165];
                  v76 = v167 + 2;
                  if (v110)
                    operator delete(v110);
                  v110 = v170;
                  v141 = v245;
                  v158 = v218 * (unint64_t)v157;
                }
                ++v138[v157];
                ++v156;
                v159 += 8;
              }
              while (v156 != 7);
              v142 = v230 + 1;
              v140 = v237;
            }
            while (v230 != 6);
          }
          v140 += 4;
        }
        while (v140 != v225);
        v135 = v219;
        v137 = v220;
        v136 = *(unsigned int *)(v219 + 12);
      }
      ++v137;
    }
    while (v137 < v136);
  }
  else
  {
    v138 = v244;
  }
  v171 = v217[1];
  v172 = *(unsigned int *)(v171 + 12);
  if ((_DWORD)v172)
  {
    v173 = 0;
    v231 = *(_QWORD *)(v171 + 16);
    v174 = v110;
    v221 = v217[1];
    do
    {
      v175 = *(_QWORD *)(v171 + 88) + 24 * v173;
      v176 = *(unsigned int **)v175;
      v235 = *(unsigned int **)(v175 + 8);
      if (*(unsigned int **)v175 != v235)
      {
        v226 = v173;
        v177 = a4[3][v173];
        do
        {
          v178 = (*v228)[*v176];
          v238 = v176;
          v179 = v231 + 8 * *((_QWORD *)v176 + 1);
          v246 = v249;
          v248 = v178;
          v180 = 0;
          v181 = v174;
          if (v177 >= v178)
          {
            do
            {
              v191 = v178 + v180;
              v192 = v177 * (unint64_t)v218 + v191;
              if (v76 < v70)
              {
                v76->n128_u64[0] = v192;
                v76->n128_u32[2] = v191;
                v76[1].n128_u64[0] = v179;
                v76[1].n128_u32[2] = 7;
                v76 += 2;
                v174 = v181;
              }
              else
              {
                v193 = ((char *)v76 - (char *)v181) >> 5;
                v194 = v193 + 1;
                if ((unint64_t)(v193 + 1) >> 59)
                  sub_2394189F8();
                if (v70 - v181 > v194)
                  v194 = v70 - v181;
                if ((unint64_t)((char *)v70 - (char *)v181) >= 0x7FFFFFFFFFFFFFE0)
                  v195 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v195 = v194;
                if (v195)
                {
                  if (v195 >> 59)
                    sub_239418A80();
                  v196 = (char *)operator new(32 * v195);
                }
                else
                {
                  v196 = 0;
                }
                v197 = (__n128 *)&v196[32 * v193];
                v197->n128_u64[0] = v192;
                v197->n128_u32[2] = v191;
                v197[1].n128_u64[0] = v179;
                v197[1].n128_u32[2] = 7;
                if (v76 == v181)
                {
                  v174 = (__n128 *)&v196[32 * v193];
                }
                else
                {
                  v198 = (__n128 *)&v196[32 * v193];
                  do
                  {
                    v67 = v76[-2];
                    v199 = v76[-1];
                    v174 = v198 - 2;
                    v198[-2] = v67;
                    v198[-1] = v199;
                    v76 -= 2;
                    v198 -= 2;
                  }
                  while (v76 != v181);
                }
                v70 = (__n128 *)&v196[32 * v195];
                v76 = v197 + 2;
                if (v181)
                  operator delete(v181);
                v178 = v248;
              }
              ++v246[v177];
              ++v180;
              v179 += 8;
              v181 = v174;
            }
            while (v180 != 7);
          }
          else
          {
            do
            {
              v182 = v178 + v180;
              v183 = v177 + v218 * (unint64_t)v182;
              if (v76 < v70)
              {
                v76->n128_u64[0] = v183;
                v76->n128_u32[2] = v177;
                v76[1].n128_u64[0] = v179;
                v76[1].n128_u32[2] = 1;
                v76 += 2;
                v174 = v181;
              }
              else
              {
                v184 = ((char *)v76 - (char *)v181) >> 5;
                v185 = v184 + 1;
                if ((unint64_t)(v184 + 1) >> 59)
                  sub_2394189F8();
                if (v70 - v181 > v185)
                  v185 = v70 - v181;
                if ((unint64_t)((char *)v70 - (char *)v181) >= 0x7FFFFFFFFFFFFFE0)
                  v186 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v186 = v185;
                if (v186)
                {
                  if (v186 >> 59)
                    sub_239418A80();
                  v187 = (char *)operator new(32 * v186);
                }
                else
                {
                  v187 = 0;
                }
                v188 = (__n128 *)&v187[32 * v184];
                v188->n128_u64[0] = v183;
                v188->n128_u32[2] = v177;
                v188[1].n128_u64[0] = v179;
                v188[1].n128_u32[2] = 1;
                if (v76 == v181)
                {
                  v174 = (__n128 *)&v187[32 * v184];
                }
                else
                {
                  v189 = (__n128 *)&v187[32 * v184];
                  do
                  {
                    v67 = v76[-2];
                    v190 = v76[-1];
                    v174 = v189 - 2;
                    v189[-2] = v67;
                    v189[-1] = v190;
                    v76 -= 2;
                    v189 -= 2;
                  }
                  while (v76 != v181);
                }
                v70 = (__n128 *)&v187[32 * v186];
                v76 = v188 + 2;
                if (v181)
                  operator delete(v181);
                v178 = v248;
              }
              ++v246[v182];
              ++v180;
              v179 += 8;
              v181 = v174;
            }
            while (v180 != 7);
          }
          v176 = v238 + 4;
        }
        while (v238 + 4 != v235);
        v171 = v221;
        v172 = *(unsigned int *)(v221 + 12);
        v138 = v246;
        v173 = v226;
      }
      ++v173;
    }
    while (v173 < v172);
  }
  else
  {
    v174 = v110;
  }
  v200 = 126 - 2 * __clz(((char *)v76 - (char *)v174) >> 5);
  if (v76 == v174)
    v201 = 0;
  else
    v201 = v200;
  sub_239CBF45C((uint64_t)v174, v76, v201, 1, v67);
  *(_WORD *)(a1 + 24) &= ~1u;
  sub_239C7F1C4(a1, v218, &v249);
  v247 = v138;
  if ((_DWORD)v222)
  {
    v202 = 0;
    v203 = v174;
    do
    {
      v204 = *(_QWORD *)(a1 + 8);
      v205 = *(_QWORD *)(v204 + 8 * v202++);
      v206 = *(_QWORD *)(v204 + 8 * v202);
      while (v205 != v206)
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v205) = v203->n128_u32[2];
        v207 = (_QWORD *)v203[1].n128_u64[0];
        v208 = *(unsigned __int8 *)(a1 + 28);
        v209 = (v208 * v208);
        v210 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v205 * v209);
        if (v207 == v210)
        {
          memptr = 0;
          malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * (_DWORD)v209 + 31) & 0xFFFE0, 0x100BBD03uLL);
          v211 = (char *)memptr;
          if (!memptr)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v216 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v216, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)memptr = *v207;
          if ((_DWORD)v208)
          {
            v212 = 0;
            v213 = 8 * v208;
            do
            {
              memmove((char *)v207 + v212, &v211[v212], v213);
              v212 += v213;
              --v208;
            }
            while (v208);
          }
          free(v211);
        }
        else
        {
          *v210 = *v207;
        }
        v203 += 2;
        ++v205;
      }
    }
    while (v202 != v222);
  }
  v214 = v247;
  if (v174)
  {
    operator delete(v174);
    v214 = v249;
  }
  if (v214)
  {
    v250 = v214;
    operator delete(v214);
  }
}

void sub_239CBF3F8(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v4;

  if (v1)
    operator delete(v1);
  v4 = *(void **)(v2 - 120);
  if (v4)
  {
    *(_QWORD *)(v2 - 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_239CBF45C(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __n128 *v28;
  unint64_t v29;
  __n128 *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __int128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 *v45;
  unint64_t v46;
  __n128 *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  unint64_t v60;
  unint64_t v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  unint64_t v74;
  __n128 *v75;
  __n128 v76;
  __n128 v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  BOOL v81;
  __n128 v82;
  unint64_t v83;
  unint64_t v84;
  __n128 *v85;
  unint64_t v86;
  __n128 v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  __n128 *v91;
  unint64_t v92;
  unint64_t v93;
  __n128 v94;
  __n128 v95;
  unint64_t v96;
  __n128 *v97;
  unint64_t v98;
  __int128 v99;
  __n128 *v100;
  BOOL v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  __n128 *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  int64_t v111;
  int64_t v112;
  BOOL v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  BOOL v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _OWORD *v122;
  __int128 v123;
  uint64_t v124;
  __n128 v125;
  __n128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  unint64_t v130;
  __n128 v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  unint64_t v142;
  _OWORD *v143;
  unint64_t v144;
  _OWORD *v145;
  __int128 v146;
  __int128 v147;
  __n128 v148;
  __int128 v149;
  __n128 v150;
  __int128 v151;
  __n128 v152;
  __n128 v153;
  __int128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __int128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __int128 v187;
  __n128 v188;
  __int128 v189;
  __int128 v190;
  __n128 v191;
  __n128 v192;
  __int128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __int128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  __n128 v211;
  __int128 v212;
  unint64_t v213;
  __n128 v214;
  __int128 v215;
  __int128 v216;
  __n128 v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;

BOOL sub_239CC0034(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  __n128 *v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __n128 v57;
  __int128 v58;
  __n128 v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __n128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __int128 v74;
  uint64_t v75;

  v3 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v5 = *(_QWORD *)(a2 - 32);
      v4 = (__n128 *)(a2 - 32);
      if (v5 < *(_QWORD *)a1)
        goto LABEL_9;
      return 1;
    case 3:
      v14 = (__n128 *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a2 - 32);
      v4 = (__n128 *)(a2 - 32);
      v16 = v17;
      if (v15 >= *(_QWORD *)a1)
      {
        if (v16 < v15)
        {
          v36 = *v14;
          v35 = *(__n128 *)(a1 + 48);
          v37 = v4[1];
          *v14 = *v4;
          *(__n128 *)(a1 + 48) = v37;
          *v4 = v36;
          v4[1] = v35;
LABEL_44:
          if (*(_QWORD *)(a1 + 32) < *(_QWORD *)a1)
          {
            v71 = *(__n128 *)a1;
            v70 = *(__n128 *)(a1 + 16);
            v72 = v14[1];
            *(__n128 *)a1 = *v14;
            *(__n128 *)(a1 + 16) = v72;
            *v14 = v71;
            v14[1] = v70;
          }
        }
      }
      else
      {
        if (v16 < v15)
        {
LABEL_9:
          v19 = *(__n128 *)a1;
          v18 = *(__n128 *)(a1 + 16);
          v20 = v4[1];
          *(__n128 *)a1 = *v4;
          *(__n128 *)(a1 + 16) = v20;
LABEL_10:
          *v4 = v19;
          v4[1] = v18;
          return 1;
        }
        v57 = *(__n128 *)a1;
        v56 = *(_OWORD *)(a1 + 16);
        v58 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v58;
        *v14 = v57;
        *(_OWORD *)(a1 + 48) = v56;
        if (v4->n128_u64[0] < *(_QWORD *)(a1 + 32))
        {
          v19 = *v14;
          v18 = *(__n128 *)(a1 + 48);
          v59 = v4[1];
          *v14 = *v4;
          *(__n128 *)(a1 + 48) = v59;
          goto LABEL_10;
        }
      }
      return 1;
    case 4:
      v14 = (__n128 *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 32);
      v22 = (__n128 *)(a1 + 64);
      v23 = *(_QWORD *)(a1 + 64);
      v24 = (__n128 *)(a2 - 32);
      v25 = *(_QWORD *)a1;
      if (v21 >= *(_QWORD *)a1)
      {
        if (v23 < v21)
        {
          v39 = *v14;
          v38 = *(_OWORD *)(a1 + 48);
          v40 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v40;
          *v22 = v39;
          *(_OWORD *)(a1 + 80) = v38;
          if (v14->n128_u64[0] < v25)
          {
            v42 = *(__n128 *)a1;
            v41 = *(_OWORD *)(a1 + 16);
            v43 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v43;
            *v14 = v42;
            *(_OWORD *)(a1 + 48) = v41;
          }
        }
      }
      else
      {
        if (v23 >= v21)
        {
          v61 = *(__n128 *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v62 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v62;
          *v14 = v61;
          *(_OWORD *)(a1 + 48) = v60;
          if (v23 >= *(_QWORD *)(a1 + 32))
            goto LABEL_41;
          v27 = *v14;
          v26 = *(_OWORD *)(a1 + 48);
          v63 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v63;
        }
        else
        {
          v27 = *(__n128 *)a1;
          v26 = *(_OWORD *)(a1 + 16);
          v28 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v22;
          *(_OWORD *)(a1 + 16) = v28;
        }
        *v22 = v27;
        *(_OWORD *)(a1 + 80) = v26;
      }
LABEL_41:
      if (v24->n128_u64[0] >= v22->n128_u64[0])
        return 1;
      v65 = *v22;
      v64 = *(_OWORD *)(a1 + 80);
      v66 = *(_OWORD *)(a2 - 16);
      *v22 = *v24;
      *(_OWORD *)(a1 + 80) = v66;
      *v24 = v65;
      *(_OWORD *)(a2 - 16) = v64;
      if (v22->n128_u64[0] >= v14->n128_u64[0])
        return 1;
      v68 = *v14;
      v67 = *(_OWORD *)(a1 + 48);
      v69 = *(_OWORD *)(a1 + 80);
      *v14 = *v22;
      *(_OWORD *)(a1 + 48) = v69;
      *v22 = v68;
      *(_OWORD *)(a1 + 80) = v67;
      goto LABEL_44;
    case 5:
      sub_239C7F310((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), (__n128 *)(a2 - 32), a3);
      return 1;
    default:
      v6 = (__n128 *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = (__n128 *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)a1;
      if (v9 >= *(_QWORD *)a1)
      {
        if (v7 < v9)
        {
          v30 = *v8;
          v29 = *(_OWORD *)(a1 + 48);
          v31 = *(_OWORD *)(a1 + 80);
          *v8 = *v6;
          *(_OWORD *)(a1 + 48) = v31;
          *v6 = v30;
          *(_OWORD *)(a1 + 80) = v29;
          if (v8->n128_u64[0] < v10)
          {
            v33 = *(__n128 *)a1;
            v32 = *(_OWORD *)(a1 + 16);
            v34 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v8;
            *(_OWORD *)(a1 + 16) = v34;
            *v8 = v33;
            *(_OWORD *)(a1 + 48) = v32;
          }
        }
      }
      else
      {
        if (v7 >= v9)
        {
          v45 = *(__n128 *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v46 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v8;
          *(_OWORD *)(a1 + 16) = v46;
          *v8 = v45;
          *(_OWORD *)(a1 + 48) = v44;
          if (v7 >= *(_QWORD *)(a1 + 32))
            goto LABEL_26;
          v12 = *v8;
          v11 = *(_OWORD *)(a1 + 48);
          v47 = *(_OWORD *)(a1 + 80);
          *v8 = *v6;
          *(_OWORD *)(a1 + 48) = v47;
        }
        else
        {
          v12 = *(__n128 *)a1;
          v11 = *(_OWORD *)(a1 + 16);
          v13 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v6;
          *(_OWORD *)(a1 + 16) = v13;
        }
        *v6 = v12;
        *(_OWORD *)(a1 + 80) = v11;
      }
LABEL_26:
      v48 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      while (1)
      {
        v52 = *(_QWORD *)v48;
        if (*(_QWORD *)v48 < v6->n128_u64[0])
        {
          v74 = *(_OWORD *)(v48 + 8);
          v75 = *(_QWORD *)(v48 + 24);
          v53 = v49;
          do
          {
            v54 = a1 + v53;
            v55 = *(_OWORD *)(a1 + v53 + 80);
            *(_OWORD *)(v54 + 96) = *(_OWORD *)(a1 + v53 + 64);
            *(_OWORD *)(v54 + 112) = v55;
            if (v53 == -64)
            {
              v51 = a1;
              goto LABEL_29;
            }
            v53 -= 32;
          }
          while (v52 < *(_QWORD *)(v54 + 32));
          v51 = a1 + v53 + 96;
LABEL_29:
          *(_QWORD *)v51 = v52;
          *(_OWORD *)(v51 + 8) = v74;
          *(_QWORD *)(v51 + 24) = v75;
          if (++v50 == 8)
            return v48 + 32 == a2;
        }
        v6 = (__n128 *)v48;
        v49 += 32;
        v48 += 32;
        if (v48 == a2)
          return 1;
      }
  }
}

__n128 sub_239CC0384(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __n128 *v28;
  unint64_t v29;
  __n128 *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __int128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 *v45;
  unint64_t v46;
  __n128 *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  unint64_t v60;
  unint64_t v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  unint64_t v74;
  __n128 *v75;
  __n128 v76;
  __n128 v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  BOOL v81;
  __n128 v82;
  unint64_t v83;
  unint64_t v84;
  __n128 *v85;
  unint64_t v86;
  __n128 v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  __n128 *v91;
  unint64_t v92;
  unint64_t v93;
  __n128 v94;
  __n128 v95;
  unint64_t v96;
  __n128 *v97;
  unint64_t v98;
  __int128 v99;
  __n128 *v100;
  BOOL v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  __n128 *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  int64_t v111;
  int64_t v112;
  BOOL v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  BOOL v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _OWORD *v122;
  __int128 v123;
  uint64_t v124;
  __n128 v125;
  __n128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  unint64_t v130;
  __n128 v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  unint64_t v142;
  _OWORD *v143;
  unint64_t v144;
  _OWORD *v145;
  __int128 v146;
  __int128 v147;
  __n128 v148;
  __int128 v149;
  __n128 v150;
  __int128 v151;
  __n128 v152;
  __n128 v153;
  __int128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __int128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __int128 v187;
  __n128 v188;
  __int128 v189;
  __int128 v190;
  __n128 v191;
  __n128 v192;
  __int128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __int128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  __n128 v211;
  __int128 v212;
  unint64_t v213;
  __n128 v214;
  __int128 v215;
  __int128 v216;
  __n128 v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;

BOOL sub_239CC0F5C(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  __n128 *v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __n128 v57;
  __int128 v58;
  __n128 v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __n128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __int128 v74;
  uint64_t v75;

  v3 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v5 = *(_QWORD *)(a2 - 32);
      v4 = (__n128 *)(a2 - 32);
      if (v5 < *(_QWORD *)a1)
        goto LABEL_9;
      return 1;
    case 3:
      v14 = (__n128 *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a2 - 32);
      v4 = (__n128 *)(a2 - 32);
      v16 = v17;
      if (v15 >= *(_QWORD *)a1)
      {
        if (v16 < v15)
        {
          v36 = *v14;
          v35 = *(__n128 *)(a1 + 48);
          v37 = v4[1];
          *v14 = *v4;
          *(__n128 *)(a1 + 48) = v37;
          *v4 = v36;
          v4[1] = v35;
LABEL_44:
          if (*(_QWORD *)(a1 + 32) < *(_QWORD *)a1)
          {
            v71 = *(__n128 *)a1;
            v70 = *(__n128 *)(a1 + 16);
            v72 = v14[1];
            *(__n128 *)a1 = *v14;
            *(__n128 *)(a1 + 16) = v72;
            *v14 = v71;
            v14[1] = v70;
          }
        }
      }
      else
      {
        if (v16 < v15)
        {
LABEL_9:
          v19 = *(__n128 *)a1;
          v18 = *(__n128 *)(a1 + 16);
          v20 = v4[1];
          *(__n128 *)a1 = *v4;
          *(__n128 *)(a1 + 16) = v20;
LABEL_10:
          *v4 = v19;
          v4[1] = v18;
          return 1;
        }
        v57 = *(__n128 *)a1;
        v56 = *(_OWORD *)(a1 + 16);
        v58 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v58;
        *v14 = v57;
        *(_OWORD *)(a1 + 48) = v56;
        if (v4->n128_u64[0] < *(_QWORD *)(a1 + 32))
        {
          v19 = *v14;
          v18 = *(__n128 *)(a1 + 48);
          v59 = v4[1];
          *v14 = *v4;
          *(__n128 *)(a1 + 48) = v59;
          goto LABEL_10;
        }
      }
      return 1;
    case 4:
      v14 = (__n128 *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 32);
      v22 = (__n128 *)(a1 + 64);
      v23 = *(_QWORD *)(a1 + 64);
      v24 = (__n128 *)(a2 - 32);
      v25 = *(_QWORD *)a1;
      if (v21 >= *(_QWORD *)a1)
      {
        if (v23 < v21)
        {
          v39 = *v14;
          v38 = *(_OWORD *)(a1 + 48);
          v40 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v40;
          *v22 = v39;
          *(_OWORD *)(a1 + 80) = v38;
          if (v14->n128_u64[0] < v25)
          {
            v42 = *(__n128 *)a1;
            v41 = *(_OWORD *)(a1 + 16);
            v43 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v43;
            *v14 = v42;
            *(_OWORD *)(a1 + 48) = v41;
          }
        }
      }
      else
      {
        if (v23 >= v21)
        {
          v61 = *(__n128 *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v62 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v62;
          *v14 = v61;
          *(_OWORD *)(a1 + 48) = v60;
          if (v23 >= *(_QWORD *)(a1 + 32))
            goto LABEL_41;
          v27 = *v14;
          v26 = *(_OWORD *)(a1 + 48);
          v63 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v63;
        }
        else
        {
          v27 = *(__n128 *)a1;
          v26 = *(_OWORD *)(a1 + 16);
          v28 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v22;
          *(_OWORD *)(a1 + 16) = v28;
        }
        *v22 = v27;
        *(_OWORD *)(a1 + 80) = v26;
      }
LABEL_41:
      if (v24->n128_u64[0] >= v22->n128_u64[0])
        return 1;
      v65 = *v22;
      v64 = *(_OWORD *)(a1 + 80);
      v66 = *(_OWORD *)(a2 - 16);
      *v22 = *v24;
      *(_OWORD *)(a1 + 80) = v66;
      *v24 = v65;
      *(_OWORD *)(a2 - 16) = v64;
      if (v22->n128_u64[0] >= v14->n128_u64[0])
        return 1;
      v68 = *v14;
      v67 = *(_OWORD *)(a1 + 48);
      v69 = *(_OWORD *)(a1 + 80);
      *v14 = *v22;
      *(_OWORD *)(a1 + 48) = v69;
      *v22 = v68;
      *(_OWORD *)(a1 + 80) = v67;
      goto LABEL_44;
    case 5:
      sub_239C7F310((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), (__n128 *)(a2 - 32), a3);
      return 1;
    default:
      v6 = (__n128 *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = (__n128 *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)a1;
      if (v9 >= *(_QWORD *)a1)
      {
        if (v7 < v9)
        {
          v30 = *v8;
          v29 = *(_OWORD *)(a1 + 48);
          v31 = *(_OWORD *)(a1 + 80);
          *v8 = *v6;
          *(_OWORD *)(a1 + 48) = v31;
          *v6 = v30;
          *(_OWORD *)(a1 + 80) = v29;
          if (v8->n128_u64[0] < v10)
          {
            v33 = *(__n128 *)a1;
            v32 = *(_OWORD *)(a1 + 16);
            v34 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v8;
            *(_OWORD *)(a1 + 16) = v34;
            *v8 = v33;
            *(_OWORD *)(a1 + 48) = v32;
          }
        }
      }
      else
      {
        if (v7 >= v9)
        {
          v45 = *(__n128 *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v46 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v8;
          *(_OWORD *)(a1 + 16) = v46;
          *v8 = v45;
          *(_OWORD *)(a1 + 48) = v44;
          if (v7 >= *(_QWORD *)(a1 + 32))
            goto LABEL_26;
          v12 = *v8;
          v11 = *(_OWORD *)(a1 + 48);
          v47 = *(_OWORD *)(a1 + 80);
          *v8 = *v6;
          *(_OWORD *)(a1 + 48) = v47;
        }
        else
        {
          v12 = *(__n128 *)a1;
          v11 = *(_OWORD *)(a1 + 16);
          v13 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v6;
          *(_OWORD *)(a1 + 16) = v13;
        }
        *v6 = v12;
        *(_OWORD *)(a1 + 80) = v11;
      }
LABEL_26:
      v48 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      while (1)
      {
        v52 = *(_QWORD *)v48;
        if (*(_QWORD *)v48 < v6->n128_u64[0])
        {
          v74 = *(_OWORD *)(v48 + 8);
          v75 = *(_QWORD *)(v48 + 24);
          v53 = v49;
          do
          {
            v54 = a1 + v53;
            v55 = *(_OWORD *)(a1 + v53 + 80);
            *(_OWORD *)(v54 + 96) = *(_OWORD *)(a1 + v53 + 64);
            *(_OWORD *)(v54 + 112) = v55;
            if (v53 == -64)
            {
              v51 = a1;
              goto LABEL_29;
            }
            v53 -= 32;
          }
          while (v52 < *(_QWORD *)(v54 + 32));
          v51 = a1 + v53 + 96;
LABEL_29:
          *(_QWORD *)v51 = v52;
          *(_OWORD *)(v51 + 8) = v74;
          *(_QWORD *)(v51 + 24) = v75;
          if (++v50 == 8)
            return v48 + 32 == a2;
        }
        v6 = (__n128 *)v48;
        v49 += 32;
        v48 += 32;
        if (v48 == a2)
          return 1;
      }
  }
}

void sub_239CC12AC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  int64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  _QWORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  _DWORD *v66;
  unsigned int *v67;
  _QWORD *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  unsigned int *v96;
  unsigned int *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  __int128 *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  unsigned int *v120;
  unsigned int *v121;
  uint64_t v122;
  _QWORD *v123;
  unsigned int *v124;
  unsigned int *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  __int128 *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  unsigned int *v172;
  unsigned int *v173;
  unsigned int *v174;
  uint64_t v175;
  _QWORD *v176;
  unsigned int *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  __int128 *v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  int *v207;
  int *v208;
  int v209;
  int v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int *v217;
  unint64_t *v218;
  _QWORD *v219;
  unint64_t *v220;
  uint64_t v221;
  unint64_t *v222;
  uint64_t v223;
  unsigned int *v224;
  char *v225;
  uint64_t v226;
  unsigned int *v227;
  uint64_t v228;
  void *__p[2];
  void *v230[2];
  __int128 v231;
  void *__dst[2];
  void *v233[2];
  __int128 v234;
  __int128 v235;

  *(_OWORD *)v233 = 0u;
  v234 = 0u;
  *(_OWORD *)__dst = 0u;
  v4 = a1[10] - a1[9];
  if (v4)
  {
    sub_23942CB44((uint64_t)__dst, v4 >> 2);
    v5 = (unsigned int *)a1[9];
    v6 = (unsigned int *)a1[10];
    v7 = (unsigned int *)__dst[0];
    v8 = (unsigned int *)a2[9];
    v9 = (unsigned int *)a2[10];
    if (v5 != v6 && v8 != v9)
    {
      do
      {
        v11 = *v5;
        if (*v5 < *v8)
        {
          if (++v5 == v6)
            break;
        }
        else
        {
          if (*v8 >= v11)
          {
            *v7++ = v11;
            ++v5;
          }
          ++v8;
          if (v5 == v6)
            break;
        }
      }
      while (v8 != v9);
    }
  }
  else
  {
    v7 = 0;
  }
  if (v7 != __dst[1])
    __dst[1] = v7;
  v12 = (unsigned int *)a1[12];
  v13 = (unsigned int *)a1[13];
  v14 = v13 - v12;
  v15 = (char *)v233[1];
  v16 = (uint64_t)(v234 - (unint64_t)v233[1]) >> 2;
  if (v14 <= v16)
  {
    if (v14 < v16)
      *(_QWORD *)&v234 = (char *)v233[1] + 4 * v14;
  }
  else
  {
    sub_23942CB44((uint64_t)&v233[1], v14 - v16);
    v12 = (unsigned int *)a1[12];
    v13 = (unsigned int *)a1[13];
    v15 = (char *)v233[1];
  }
  if (v12 != v13)
  {
    v17 = (unsigned int *)a2[12];
    v18 = (unsigned int *)a2[13];
    while (v17 != v18)
    {
      v19 = *v12;
      if (*v12 < *v17)
      {
        if (++v12 == v13)
          break;
      }
      else
      {
        if (*v17 >= v19)
        {
          *(_DWORD *)v15 = v19;
          v15 += 4;
          ++v12;
        }
        ++v17;
        if (v12 == v13)
          break;
      }
    }
  }
  v211 = a1;
  v212 = a2;
  if (v15 != (char *)v234)
    *(_QWORD *)&v234 = v15;
  *(_OWORD *)v230 = 0u;
  v231 = 0u;
  *(_OWORD *)__p = 0u;
  v20 = (unsigned int *)__dst[0];
  v21 = (unsigned int *)__dst[1];
  if (__dst[0] != __dst[1])
  {
    v22 = (char *)__dst[1] - (char *)__dst[0];
    if ((void *)((char *)__dst[1] - (char *)__dst[0]) < (void *)0x7FFFFFFFFFFFFFFDLL)
    {
      v23 = operator new(2 * v22);
      v24 = 0;
      v25 = 0;
      __p[0] = v23;
      v230[0] = &v23[v22 >> 2];
      v26 = (unsigned int *)v212[9];
      v27 = (unsigned int *)a1[9];
      v224 = v21;
      while (1)
      {
        v29 = *v20;
        if (*v26 < *v20)
        {
          do
          {
            v30 = v26[1];
            ++v26;
            ++v25;
          }
          while (v30 < v29);
        }
        if (*v27 < v29)
        {
          do
          {
            v31 = v27[1];
            ++v27;
            v24 = (v24 + 1);
          }
          while (v31 < v29);
        }
        if (v23 >= v230[0])
          break;
        *v23 = v25 | (unint64_t)(v24 << 32);
        v28 = v23 + 1;
LABEL_35:
        __p[1] = v28;
        ++v20;
        v23 = v28;
        if (v20 == v21)
        {
          v15 = (char *)v234;
          goto LABEL_68;
        }
      }
      v32 = __p[0];
      v33 = ((char *)v23 - (char *)__p[0]) >> 3;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61)
LABEL_224:
        sub_2394189F8();
      v35 = (char *)v230[0] - (char *)__p[0];
      if (((char *)v230[0] - (char *)__p[0]) >> 2 > v34)
        v34 = v35 >> 2;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
      {
        if (v36 >> 61)
LABEL_223:
          sub_239418A80();
        v37 = (char *)operator new(8 * v36);
      }
      else
      {
        v37 = 0;
      }
      v38 = &v37[8 * v33];
      v39 = &v37[8 * v36];
      *(_QWORD *)v38 = v25 | (unint64_t)(v24 << 32);
      v28 = v38 + 8;
      if (v23 == __p[0])
      {
        __p[0] = &v37[8 * v33];
        v230[0] = v39;
        v21 = v224;
LABEL_59:
        operator delete(v23);
        goto LABEL_35;
      }
      v40 = (char *)(v23 - 1) - (char *)__p[0];
      if (v40 <= 0x167
        || &v37[(char *)v23 - (char *)__p[0] - 8 - (v40 & 0xFFFFFFFFFFFFFFF8)] > &v37[(char *)v23 - (char *)__p[0] - 8]
        || (_QWORD *)((char *)v23 - (v40 & 0xFFFFFFFFFFFFFFF8) - 8) > v23 - 1
        || (void *)((char *)__p[0] - (char *)v37) < (void *)0x20)
      {
        v41 = v23;
        v21 = v224;
      }
      else
      {
        v43 = (v40 >> 3) + 1;
        v41 = &v23[-(v43 & 0x3FFFFFFFFFFFFFFCLL)];
        v44 = &v37[8 * v33 - 16];
        v45 = (__int128 *)(v23 - 2);
        v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        v21 = v224;
        do
        {
          v47 = *v45;
          *((_OWORD *)v44 - 1) = *(v45 - 1);
          *(_OWORD *)v44 = v47;
          v44 -= 32;
          v45 -= 2;
          v46 -= 4;
        }
        while (v46);
        v38 -= 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
        if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_56;
      }
      do
      {
        v42 = *--v41;
        *((_QWORD *)v38 - 1) = v42;
        v38 -= 8;
      }
      while (v41 != __p[0]);
      v32 = __p[0];
LABEL_56:
      __p[0] = v38;
      v23 = v32;
      v230[0] = v39;
      if (!v32)
        goto LABEL_35;
      goto LABEL_59;
    }
LABEL_225:
    sub_2394189F8();
  }
LABEL_68:
  v48 = (char *)v233[1];
  if (v233[1] != v15)
  {
    v49 = v15 - (char *)v233[1];
    v50 = (v15 - (char *)v233[1]) >> 2;
    v51 = (char *)v230[1];
    if (v50 <= (uint64_t)(*((_QWORD *)&v231 + 1) - (unint64_t)v230[1]) >> 3)
      goto LABEL_81;
    if (v49 > 0x7FFFFFFFFFFFFFFCLL)
      goto LABEL_225;
    v52 = (char *)v231;
    v53 = (char *)operator new(2 * v49);
    v54 = v231 - (unint64_t)v230[1];
    v55 = &v53[(v231 - (unint64_t)v230[1]) & 0xFFFFFFFFFFFFFFF8];
    v56 = v55;
    if ((void *)v231 != v230[1])
    {
      if ((unint64_t)(v54 - 8) < 0x58)
      {
        v56 = &v53[(v231 - (unint64_t)v230[1]) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_78:
          v63 = *((_QWORD *)v52 - 1);
          v52 -= 8;
          *((_QWORD *)v56 - 1) = v63;
          v56 -= 8;
        }
        while (v52 != v51);
        goto LABEL_79;
      }
      v56 = &v53[(v231 - (unint64_t)v230[1]) & 0xFFFFFFFFFFFFFFF8];
      if ((_QWORD)v231 - (_QWORD)&v53[v54 & 0xFFFFFFFFFFFFFFF8] < 0x20uLL)
        goto LABEL_78;
      v57 = v54 >> 3;
      v58 = ((unint64_t)(v54 - 8) >> 3) + 1;
      v59 = &v53[8 * v57 - 16];
      v60 = (__int128 *)(v231 - 16);
      v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v62 = *v60;
        *((_OWORD *)v59 - 1) = *(v60 - 1);
        *(_OWORD *)v59 = v62;
        v59 -= 32;
        v60 -= 2;
        v61 -= 4;
      }
      while (v61);
      v56 = &v55[-8 * (v58 & 0x3FFFFFFFFFFFFFFCLL)];
      v52 -= 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_78;
    }
LABEL_79:
    v230[1] = v56;
    *(_QWORD *)&v231 = v55;
    *((_QWORD *)&v231 + 1) = &v53[8 * v50];
    if (v51)
    {
      operator delete(v51);
      v48 = (char *)v233[1];
      v15 = (char *)v234;
    }
LABEL_81:
    if (v48 != v15)
    {
      v64 = 0;
      v65 = 0;
      v66 = (_DWORD *)v212[12];
      v67 = (unsigned int *)v211[12];
      v225 = v15;
      do
      {
        v69 = *(_DWORD *)v48;
        if (*v66 < *(_DWORD *)v48)
        {
          do
          {
            v70 = v66[1];
            ++v66;
            ++v65;
          }
          while (v70 < v69);
        }
        if (*v67 < v69)
        {
          do
          {
            v71 = v67[1];
            ++v67;
            v64 = (v64 + 1);
          }
          while (v71 < v69);
        }
        v72 = (char *)v231;
        if ((unint64_t)v231 < *((_QWORD *)&v231 + 1))
        {
          *(_QWORD *)v231 = v65 | (unint64_t)(v64 << 32);
          v68 = v72 + 8;
        }
        else
        {
          v73 = (char *)v230[1];
          v74 = v231 - (unint64_t)v230[1];
          v75 = (uint64_t)(v231 - (unint64_t)v230[1]) >> 3;
          v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 61)
            goto LABEL_224;
          v77 = *((_QWORD *)&v231 + 1) - (unint64_t)v230[1];
          if ((uint64_t)(*((_QWORD *)&v231 + 1) - (unint64_t)v230[1]) >> 2 > v76)
            v76 = v77 >> 2;
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
            v78 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v78 = v76;
          if (v78)
          {
            if (v78 >> 61)
              goto LABEL_223;
            v79 = v78;
            v80 = (char *)operator new(8 * v78);
            v78 = v79;
          }
          else
          {
            v80 = 0;
          }
          v81 = &v80[8 * v75];
          *(_QWORD *)v81 = v65 | (unint64_t)(v64 << 32);
          v68 = v81 + 8;
          if (v72 == v73)
          {
            v73 = v72;
          }
          else
          {
            v82 = v72 - 8 - v73;
            if (v82 < 0x58)
              goto LABEL_228;
            if ((unint64_t)(v72 - &v80[v74]) < 0x20)
              goto LABEL_228;
            v83 = (v82 >> 3) + 1;
            v84 = &v80[8 * v75 - 16];
            v85 = v72 - 16;
            v86 = v83 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v87 = *(_OWORD *)v85;
              *((_OWORD *)v84 - 1) = *((_OWORD *)v85 - 1);
              *(_OWORD *)v84 = v87;
              v84 -= 32;
              v85 -= 32;
              v86 -= 4;
            }
            while (v86);
            v81 -= 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
            v72 -= 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
            if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_228:
              do
              {
                v88 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v81 - 1) = v88;
                v81 -= 8;
              }
              while (v72 != v73);
              v73 = (char *)v230[1];
            }
          }
          v230[1] = v81;
          *(_QWORD *)&v231 = v68;
          *((_QWORD *)&v231 + 1) = &v80[8 * v78];
          if (v73)
            operator delete(v73);
          v15 = v225;
        }
        *(_QWORD *)&v231 = v68;
        v48 += 4;
      }
      while (v48 != v15);
    }
  }
  v89 = (unsigned int *)__p[1];
  v90 = (unsigned int *)__p[0];
  v91 = (unsigned int *)v230[1];
  if (__p[0] == __p[1])
    goto LABEL_144;
  v93 = v211;
  v92 = v212;
  if (v230[1] != (void *)v231)
  {
    v94 = v212[7];
    v95 = (_QWORD *)v211[7];
    v218 = v95 + 2;
    v214 = v94;
    while (1)
    {
      v96 = (unsigned int *)v230[1];
      v97 = (unsigned int *)v231;
      if (v230[1] != (void *)v231)
        break;
LABEL_115:
      v90 += 2;
      if (v90 == v89)
      {
        v91 = (unsigned int *)v230[1];
LABEL_144:
        v93 = v211;
        v92 = v212;
        goto LABEL_145;
      }
    }
    v98 = (uint64_t *)(*(_QWORD *)(v94 + 88) + 24 * *v90);
    v99 = v95[11] + 24 * v90[1];
    v100 = *v98;
    v101 = v98[1];
    while (1)
    {
      if (v100 == v101)
        goto LABEL_115;
      v102 = *v96;
      while (*(_DWORD *)v100 != v102)
      {
        if (*(_DWORD *)v100 > v102)
          goto LABEL_140;
        v100 += 16;
        if (v100 == v101)
          goto LABEL_115;
      }
      v103 = *(_QWORD *)(v100 + 8);
      v104 = *(_QWORD *)(v94 + 16);
      v105 = v96[1];
      v106 = *(char **)v99;
      v107 = *(char **)(v99 + 8);
      if (*(char **)v99 != v107)
      {
        while (*(_DWORD *)v106 < v105)
        {
          v106 += 16;
          if (v106 == v107)
            goto LABEL_132;
        }
      }
      if (v106 != v107)
      {
        if (*(_DWORD *)v106 == v105)
        {
          v108 = *v218 + 8 * *((_QWORD *)v106 + 1);
          goto LABEL_139;
        }
        v107 = v106;
      }
LABEL_132:
      v221 = *(_QWORD *)(v94 + 16);
      v226 = *(_QWORD *)(v100 + 8);
      v109 = v95[10];
      if (v109)
      {
        v111 = v95[6];
        v110 = v95[7];
        v112 = ((v110 - v111) << 6) - 1;
        v113 = v95[9];
        if (v110 == v111)
          v112 = 0;
        v108 = v95[2]
             + 8
             * *(_QWORD *)(*(_QWORD *)(v111 + (((unint64_t)(v113 + v109 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v113 + v109 - 1) & 0x1FF));
        v95[10] = v109 - 1;
        if ((unint64_t)(v112 - (v109 + v113) + 1) >= 0x400)
        {
          operator delete(*(void **)(v110 - 8));
          v95[7] -= 8;
        }
      }
      else
      {
        v114 = (void *)v95[3];
        *(_QWORD *)&v235 = 0;
        sub_239C2323C(v218, v114, 7uLL, (uint64_t *)&v235);
        v108 = v95[3] - 56;
      }
      v115 = (uint64_t)(v108 - *v218) >> 3;
      LODWORD(v235) = v105;
      *((_QWORD *)&v235 + 1) = v115;
      sub_239C22598((char **)v99, v107, &v235);
      v94 = v214;
      v89 = (unsigned int *)__p[1];
      v104 = v221;
      v103 = v226;
LABEL_139:
      v116 = (__int128 *)(v104 + 8 * v103);
      v117 = *v116;
      v118 = v116[1];
      v119 = v116[2];
      *(_QWORD *)(v108 + 48) = *((_QWORD *)v116 + 6);
      *(_OWORD *)(v108 + 16) = v118;
      *(_OWORD *)(v108 + 32) = v119;
      *(_OWORD *)v108 = v117;
LABEL_140:
      if (v100 != v101)
      {
        v96 += 2;
        if (v96 != v97)
          continue;
      }
      goto LABEL_115;
    }
  }
LABEL_145:
  sub_239C86DA4((_QWORD *)v93[8], v92[8], &v230[1], v91, (unsigned int *)v231);
  v120 = (unsigned int *)__p[1];
  v121 = (unsigned int *)__p[0];
  if (__p[0] != __p[1])
  {
    v122 = v92[5];
    v123 = (_QWORD *)v93[5];
    v219 = v123;
    v222 = v123 + 2;
    v215 = v122;
    while (1)
    {
      v124 = (unsigned int *)__p[1];
      v125 = (unsigned int *)__p[0];
      if (__p[0] != __p[1])
        break;
LABEL_147:
      v121 += 2;
      if (v121 == v120)
      {
        v121 = (unsigned int *)__p[1];
        v172 = (unsigned int *)__p[0];
        v93 = v211;
        v92 = v212;
        goto LABEL_177;
      }
    }
    v126 = (uint64_t *)(*(_QWORD *)(v122 + 88) + 24 * *v121);
    v127 = v123[11] + 24 * v121[1];
    v128 = *v126;
    v129 = v126[1];
    while (1)
    {
      if (v128 == v129)
        goto LABEL_147;
      v130 = *v125;
      while (*(_DWORD *)v128 != v130)
      {
        if (*(_DWORD *)v128 > v130)
          goto LABEL_172;
        v128 += 16;
        if (v128 == v129)
          goto LABEL_147;
      }
      v131 = *(_QWORD *)(v128 + 8);
      v132 = *(_QWORD *)(v122 + 16);
      v133 = v125[1];
      v134 = *(char **)v127;
      v135 = *(char **)(v127 + 8);
      if (*(char **)v127 != v135)
      {
        while (*(_DWORD *)v134 < v133)
        {
          v134 += 16;
          if (v134 == v135)
            goto LABEL_164;
        }
      }
      if (v134 != v135)
      {
        if (*(_DWORD *)v134 == v133)
        {
          v136 = *v222 + 8 * *((_QWORD *)v134 + 1);
          goto LABEL_171;
        }
        v135 = v134;
      }
LABEL_164:
      v137 = v123[10];
      v227 = v124;
      if (v137)
      {
        v139 = v123[6];
        v138 = v123[7];
        v140 = ((v138 - v139) << 6) - 1;
        v141 = v123[9];
        if (v138 == v139)
          v140 = 0;
        v136 = v123[2]
             + 8
             * *(_QWORD *)(*(_QWORD *)(v139 + (((unint64_t)(v141 + v137 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v141 + v137 - 1) & 0x1FF));
        v123[10] = v137 - 1;
        if ((unint64_t)(v140 - (v137 + v141) + 1) >= 0x400)
        {
          v213 = v127;
          v142 = v123;
          operator delete(*(void **)(v138 - 8));
          v127 = v213;
          v142[7] -= 8;
        }
      }
      else
      {
        v143 = v127;
        v144 = (void *)v123[3];
        *(_QWORD *)&v235 = 0;
        sub_239C2323C(v222, v144, 0x31uLL, (uint64_t *)&v235);
        v136 = v219[3] - 392;
        v127 = v143;
      }
      v145 = (uint64_t)(v136 - *v222) >> 3;
      LODWORD(v235) = v133;
      *((_QWORD *)&v235 + 1) = v145;
      v146 = v127;
      sub_239C22598((char **)v127, v135, &v235);
      v122 = v215;
      v120 = (unsigned int *)__p[1];
      v127 = v146;
      v123 = v219;
      v124 = v227;
LABEL_171:
      v147 = (__int128 *)(v132 + 8 * v131);
      v148 = *v147;
      v149 = v147[1];
      v150 = v147[2];
      v151 = v147[3];
      v152 = v147[4];
      v153 = v147[5];
      v154 = v147[6];
      v155 = v147[7];
      v156 = v147[8];
      v157 = v147[9];
      v158 = v147[10];
      v159 = v147[11];
      v160 = v147[12];
      v161 = v147[13];
      v162 = v147[14];
      v163 = v147[15];
      v164 = v147[16];
      v165 = v147[17];
      v166 = v147[18];
      v167 = v147[19];
      v168 = v147[20];
      v169 = v147[21];
      v170 = v147[22];
      v171 = v147[23];
      *(_QWORD *)(v136 + 384) = *((_QWORD *)v147 + 48);
      *(_OWORD *)(v136 + 352) = v170;
      *(_OWORD *)(v136 + 368) = v171;
      *(_OWORD *)(v136 + 320) = v168;
      *(_OWORD *)(v136 + 336) = v169;
      *(_OWORD *)(v136 + 288) = v166;
      *(_OWORD *)(v136 + 304) = v167;
      *(_OWORD *)(v136 + 256) = v164;
      *(_OWORD *)(v136 + 272) = v165;
      *(_OWORD *)(v136 + 224) = v162;
      *(_OWORD *)(v136 + 240) = v163;
      *(_OWORD *)(v136 + 192) = v160;
      *(_OWORD *)(v136 + 208) = v161;
      *(_OWORD *)(v136 + 160) = v158;
      *(_OWORD *)(v136 + 176) = v159;
      *(_OWORD *)(v136 + 128) = v156;
      *(_OWORD *)(v136 + 144) = v157;
      *(_OWORD *)(v136 + 96) = v154;
      *(_OWORD *)(v136 + 112) = v155;
      *(_OWORD *)(v136 + 64) = v152;
      *(_OWORD *)(v136 + 80) = v153;
      *(_OWORD *)(v136 + 32) = v150;
      *(_OWORD *)(v136 + 48) = v151;
      *(_OWORD *)v136 = v148;
      *(_OWORD *)(v136 + 16) = v149;
LABEL_172:
      if (v128 != v129)
      {
        v125 += 2;
        if (v125 != v124)
          continue;
      }
      goto LABEL_147;
    }
  }
  v172 = (unsigned int *)__p[0];
LABEL_177:
  v174 = (unsigned int *)v230[1];
  v173 = (unsigned int *)v231;
  if (v230[1] == (void *)v231)
  {
LABEL_210:
    while (v172 != v121)
    {
      v200 = *v172;
      v201 = v172[1];
      v172 += 2;
      v202 = *v92 + 8 * (*((_DWORD *)v92 + 8) - v200 + 8 * v200);
      v203 = *v93 + 8 * (*((_DWORD *)v93 + 8) - v201 + 8 * v201);
      v204 = *(_QWORD *)(v202 + 48);
      v205 = *(_OWORD *)(v202 + 32);
      v206 = *(_OWORD *)v202;
      *(_OWORD *)(v203 + 16) = *(_OWORD *)(v202 + 16);
      *(_OWORD *)(v203 + 32) = v205;
      *(_QWORD *)(v203 + 48) = v204;
      *(_OWORD *)v203 = v206;
    }
  }
  else if (v172 != v121)
  {
    v175 = v92[6];
    v176 = (_QWORD *)v93[6];
    v217 = (unsigned int *)v231;
    v220 = v176 + 2;
    v216 = v175;
    while (1)
    {
      v177 = (unsigned int *)__p[0];
      if (__p[0] != __p[1])
        break;
LABEL_180:
      v174 += 2;
      if (v174 == v173)
      {
        v121 = (unsigned int *)__p[1];
        v172 = (unsigned int *)__p[0];
        v93 = v211;
        v92 = v212;
        goto LABEL_210;
      }
    }
    v178 = (uint64_t *)(*(_QWORD *)(v175 + 88) + 24 * *v174);
    v179 = v176[11] + 24 * v174[1];
    v180 = *v178;
    v181 = v178[1];
    while (1)
    {
      if (v180 == v181)
        goto LABEL_180;
      v182 = *v177;
      while (*(_DWORD *)v180 != v182)
      {
        if (*(_DWORD *)v180 > v182)
          goto LABEL_205;
        v180 += 16;
        if (v180 == v181)
          goto LABEL_180;
      }
      v183 = *(_QWORD *)(v180 + 8);
      v184 = *(_QWORD *)(v175 + 16);
      v185 = v177[1];
      v186 = *(char **)v179;
      v187 = *(char **)(v179 + 8);
      if (*(char **)v179 != v187)
      {
        while (*(_DWORD *)v186 < v185)
        {
          v186 += 16;
          if (v186 == v187)
            goto LABEL_197;
        }
      }
      if (v186 != v187)
      {
        if (*(_DWORD *)v186 == v185)
        {
          v188 = *v220 + 8 * *((_QWORD *)v186 + 1);
          goto LABEL_204;
        }
        v187 = v186;
      }
LABEL_197:
      v223 = *(_QWORD *)(v175 + 16);
      v228 = *(_QWORD *)(v180 + 8);
      v189 = v176[10];
      if (v189)
      {
        v191 = v176[6];
        v190 = v176[7];
        v192 = ((v190 - v191) << 6) - 1;
        v193 = v176[9];
        if (v190 == v191)
          v192 = 0;
        v188 = v176[2]
             + 8
             * *(_QWORD *)(*(_QWORD *)(v191 + (((unint64_t)(v193 + v189 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v193 + v189 - 1) & 0x1FF));
        v176[10] = v189 - 1;
        if ((unint64_t)(v192 - (v189 + v193) + 1) >= 0x400)
        {
          operator delete(*(void **)(v190 - 8));
          v176[7] -= 8;
        }
      }
      else
      {
        v194 = (void *)v176[3];
        *(_QWORD *)&v235 = 0;
        sub_239C2323C(v220, v194, 7uLL, (uint64_t *)&v235);
        v188 = v176[3] - 56;
      }
      v195 = (uint64_t)(v188 - *v220) >> 3;
      LODWORD(v235) = v185;
      *((_QWORD *)&v235 + 1) = v195;
      sub_239C22598((char **)v179, v187, &v235);
      v175 = v216;
      v173 = v217;
      v184 = v223;
      v183 = v228;
LABEL_204:
      v196 = (__int128 *)(v184 + 8 * v183);
      v197 = *v196;
      v198 = v196[1];
      v199 = v196[2];
      *(_QWORD *)(v188 + 48) = *((_QWORD *)v196 + 6);
      *(_OWORD *)(v188 + 16) = v198;
      *(_OWORD *)(v188 + 32) = v199;
      *(_OWORD *)v188 = v197;
LABEL_205:
      if (v180 != v181)
      {
        v177 += 2;
        if (v177 != __p[1])
          continue;
      }
      goto LABEL_180;
    }
  }
  v207 = (int *)v230[1];
  v208 = (int *)v231;
  if (v230[1] != (void *)v231)
  {
    do
    {
      v209 = *v207;
      v210 = v207[1];
      v207 += 2;
      *(_QWORD *)(*v93 + 8 * (*((_DWORD *)v93 + 9) + v210)) = *(_QWORD *)(*v92
                                                                                        + 8
                                                                                        * (*((_DWORD *)v92 + 9) + v209));
    }
    while (v207 != v208);
    v207 = (int *)v230[1];
  }
  if (v207)
  {
    *(_QWORD *)&v231 = v207;
    operator delete(v207);
  }
  if (__p[0])
    operator delete(__p[0]);
  if (v233[1])
  {
    *(void **)&v234 = v233[1];
    operator delete(v233[1]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
}

void sub_239CC20DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_2394FCFA8((uint64_t)va);
  sub_2394FCFA8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_239CC2120(_QWORD *a1, float64x2_t _Q0, float64x2_t _Q1, float64x2_t _Q2, float64x2_t _Q3, float64x2_t _Q4, __n128 _Q5, __n128 _Q6)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t *v23;
  int v24;
  float64x2_t *v25;
  unint64_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v58;
  float64x2_t v61;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v72;
  float64x2_t v74;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v153;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  unint64_t *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v239;
  float64x2_t v242;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v273;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v278;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v336;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  unint64_t *v400;
  uint64_t v401;
  char *v402;
  char *v403;
  uint64_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v417;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v434;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v452;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  unint64_t *v567;
  uint64_t v568;
  char *v569;
  char *v570;
  uint64_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v584;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v593;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v735;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v796;
  float64x2_t v797;
  uint64_t v799;
  float64x2_t v800;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v815;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v821;
  float64x2_t v822;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  int v829;
  int v830;
  int v831;
  _QWORD *v832;
  unsigned int v833;
  unsigned int v834;
  float64x2_t *v835;
  uint64_t v836;
  float64x2_t *v837;
  int v838;
  unint64_t *v840;
  uint64_t v841;
  char *v842;
  char *v843;
  uint64_t v844;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v867;
  float64x2_t v870;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v881;
  float64x2_t v883;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v899;
  float64x2_t v900;
  float64x2_t v902;
  float64x2_t v903;
  float64x2_t v905;
  float64x2_t v906;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v962;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  float64x2_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  unint64_t *v1021;
  uint64_t v1022;
  char *v1023;
  char *v1024;
  uint64_t v1025;
  float64x2_t v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1048;
  float64x2_t v1051;
  float64x2_t v1056;
  float64x2_t v1057;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  float64x2_t v1067;
  float64x2_t v1068;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1082;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t v1087;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1131;
  float64x2_t v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1145;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1169;
  float64x2_t v1170;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64x2_t v1178;
  float64x2_t v1179;
  float64x2_t v1180;
  float64x2_t v1181;
  float64x2_t v1182;
  float64x2_t v1183;
  float64x2_t v1185;
  float64x2_t v1186;
  float64x2_t v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  float64x2_t v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  unint64_t *v1209;
  uint64_t v1210;
  char *v1211;
  char *v1212;
  uint64_t v1213;
  float64x2_t v1214;
  float64x2_t v1215;
  float64x2_t v1216;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  float64x2_t v1226;
  float64x2_t v1229;
  float64x2_t v1230;
  float64x2_t v1239;
  float64x2_t v1240;
  float64x2_t v1243;
  float64x2_t v1245;
  float64x2_t v1246;
  float64x2_t v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  float64x2_t v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  float64x2_t v1261;
  float64x2_t v1263;
  float64x2_t v1264;
  float64x2_t v1265;
  float64x2_t v1266;
  float64x2_t v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  float64x2_t v1270;
  float64x2_t v1271;
  float64x2_t v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  float64x2_t v1276;
  float64x2_t v1277;
  float64x2_t v1278;
  float64x2_t v1280;
  float64x2_t v1281;
  float64x2_t v1282;
  float64x2_t v1283;
  float64x2_t v1285;
  float64x2_t v1286;
  float64x2_t v1287;
  float64x2_t v1288;
  float64x2_t v1289;
  float64x2_t v1291;
  float64x2_t v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  float64x2_t v1295;
  float64x2_t v1296;
  float64x2_t v1297;
  float64x2_t v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  float64x2_t v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  float64x2_t v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  float64x2_t v1320;
  float64x2_t v1321;
  float64x2_t v1324;
  float64x2_t v1325;
  float64x2_t v1326;
  float64x2_t v1328;
  float64x2_t v1329;
  float64x2_t v1330;
  float64x2_t v1331;
  float64x2_t v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  float64x2_t v1339;
  float64x2_t v1340;
  float64x2_t v1341;
  float64x2_t v1342;
  float64x2_t v1343;
  float64x2_t v1345;
  float64x2_t v1346;
  float64x2_t v1347;
  float64x2_t v1348;
  float64x2_t v1349;
  float64x2_t v1350;
  float64x2_t v1351;
  float64x2_t v1352;
  float64x2_t v1353;
  float64x2_t v1354;
  float64x2_t v1355;
  float64x2_t v1356;
  float64x2_t v1357;
  float64x2_t v1358;
  float64x2_t v1359;
  float64x2_t v1360;
  float64x2_t v1361;
  float64x2_t v1362;
  float64x2_t v1363;
  float64x2_t v1364;
  float64x2_t v1365;
  float64x2_t v1366;
  float64x2_t v1367;
  float64x2_t v1368;
  float64x2_t v1369;
  float64x2_t v1370;
  float64x2_t v1371;
  float64x2_t v1372;
  float64x2_t v1373;
  float64x2_t v1374;
  float64x2_t v1375;
  unint64_t *v1376;
  uint64_t v1377;
  char *v1378;
  char *v1379;
  uint64_t v1380;
  float64x2_t v1381;
  float64x2_t v1382;
  float64x2_t v1383;
  float64x2_t v1384;
  float64x2_t v1385;
  float64x2_t v1386;
  float64x2_t v1387;
  float64x2_t v1388;
  float64x2_t v1389;
  float64x2_t v1393;
  float64x2_t v1396;
  float64x2_t v1397;
  float64x2_t v1398;
  float64x2_t v1402;
  float64x2_t v1404;
  float64x2_t v1405;
  float64x2_t v1406;
  float64x2_t v1411;
  float64x2_t v1412;
  float64x2_t v1415;
  float64x2_t v1416;
  float64x2_t v1417;
  float64x2_t v1419;
  float64x2_t v1420;
  float64x2_t v1422;
  float64x2_t v1423;
  float64x2_t v1424;
  float64x2_t v1429;
  float64x2_t v1430;
  float64x2_t v1431;
  float64x2_t v1433;
  float64x2_t v1434;
  float64x2_t v1435;
  float64x2_t v1437;
  float64x2_t v1438;
  float64x2_t v1440;
  float64x2_t v1441;
  float64x2_t v1442;
  float64x2_t v1445;
  float64x2_t v1446;
  float64x2_t v1447;
  float64x2_t v1448;
  float64x2_t v1449;
  float64x2_t v1450;
  float64x2_t v1451;
  float64x2_t v1454;
  float64x2_t v1455;
  float64x2_t v1456;
  float64x2_t v1459;
  float64x2_t v1460;
  float64x2_t v1461;
  float64x2_t v1463;
  float64x2_t v1464;
  float64x2_t v1465;
  float64x2_t v1467;
  float64x2_t v1468;
  float64x2_t v1470;
  float64x2_t v1471;
  float64x2_t v1472;
  float64x2_t v1474;
  float64x2_t v1475;
  float64x2_t v1476;
  float64x2_t v1477;
  float64x2_t v1478;
  float64x2_t v1479;
  float64x2_t v1480;
  float64x2_t v1481;
  float64x2_t v1484;
  float64x2_t v1485;
  float64x2_t v1486;
  float64x2_t v1489;
  float64x2_t v1490;
  float64x2_t v1491;
  float64x2_t v1493;
  float64x2_t v1494;
  float64x2_t v1495;
  float64x2_t v1497;
  float64x2_t v1498;
  float64x2_t v1500;
  float64x2_t v1501;
  float64x2_t v1502;
  float64x2_t v1504;
  float64x2_t v1505;
  float64x2_t v1506;
  float64x2_t v1507;
  float64x2_t v1509;
  float64x2_t v1510;
  float64x2_t v1511;
  float64x2_t v1514;
  float64x2_t v1515;
  float64x2_t v1516;
  float64x2_t v1519;
  float64x2_t v1520;
  float64x2_t v1521;
  float64x2_t v1523;
  float64x2_t v1524;
  float64x2_t v1525;
  float64x2_t v1527;
  float64x2_t v1528;
  float64x2_t v1530;
  float64x2_t v1531;
  float64x2_t v1532;
  float64x2_t v1534;
  float64x2_t v1535;
  float64x2_t v1536;
  float64x2_t v1537;
  float64x2_t v1538;
  float64x2_t v1539;
  float64x2_t v1540;
  float64x2_t v1541;
  float64x2_t v1542;
  float64x2_t v1544;
  float64x2_t v1546;
  float64x2_t v1547;
  float64x2_t v1548;
  float64x2_t v1550;
  float64x2_t v1551;
  float64x2_t v1552;
  float64x2_t v1554;
  float64x2_t v1555;
  float64x2_t v1556;
  float64x2_t v1558;
  float64x2_t v1559;
  float64x2_t v1560;
  float64x2_t v1561;
  float64x2_t v1563;
  float64x2_t v1564;
  float64x2_t v1565;
  float64x2_t v1566;
  float64x2_t v1567;
  float64x2_t v1568;
  float64x2_t v1569;
  float64x2_t v1570;
  float64x2_t v1571;
  float64x2_t v1572;
  float64x2_t v1573;
  float64x2_t v1574;
  float64x2_t v1575;
  float64x2_t v1576;
  float64x2_t v1577;
  float64x2_t v1578;
  float64x2_t v1579;
  float64x2_t v1580;
  float64x2_t v1581;
  float64x2_t v1582;
  float64x2_t v1583;
  float64x2_t v1584;
  float64x2_t v1585;
  float64x2_t v1592;
  float64x2_t v1593;
  float64x2_t v1594;
  float64x2_t v1597;
  float64x2_t v1598;
  float64x2_t v1599;
  float64x2_t v1601;
  float64x2_t v1602;
  float64x2_t v1603;
  float64x2_t v1605;
  float64x2_t v1606;
  uint64_t v1608;
  float64x2_t v1609;
  float64x2_t v1616;
  float64x2_t v1617;
  float64x2_t v1618;
  float64x2_t v1621;
  float64x2_t v1622;
  float64x2_t v1624;
  float64x2_t v1626;
  float64x2_t v1627;
  float64x2_t v1628;
  float64x2_t v1630;
  float64x2_t v1631;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  int v1639;
  int v1640;
  int v1641;
  int v1642;
  _QWORD *v1643;
  unsigned int v1644;
  unsigned int v1645;
  uint64_t v1646;
  unsigned int v1647;
  float64x2_t v1648;
  float64x2_t v1649;
  float64x2_t v1650;
  unint64_t *v1651;
  uint64_t v1652;
  char *v1653;
  char *v1654;
  float64x2_t v1655;
  uint64_t v1656;
  const double *v1657;
  const double *v1658;
  const double *v1659;
  float64x2_t v1661;
  unint64_t *v1662;
  uint64_t v1663;
  char *v1664;
  char *v1665;
  uint64_t v1666;
  const double *v1667;
  const double *v1668;
  float64x2_t v1669;
  float64x2_t v1670;
  float64x2_t v1671;
  float64x2_t v1672;
  float64x2_t v1673;
  float64x2_t v1674;
  float64x2_t v1675;
  const double *v1676;
  float64x2_t v1677;
  float64x2_t v1678;
  float64x2_t v1679;
  float64x2_t v1686;
  float64x2_t v1687;
  float64x2_t v1688;
  float64x2_t v1689;
  float64x2_t v1690;
  float64x2_t v1691;
  float64x2_t v1692;
  unint64_t *v1693;
  uint64_t v1694;
  char *v1695;
  char *v1696;
  uint64_t v1697;
  float64x2_t v1698;
  float64x2_t v1700;
  float64x2_t v1702;
  float64x2_t v1703;
  float64x2_t v1704;
  float64x2_t v1705;
  float64x2_t v1706;
  float64x2_t v1710;
  float64x2_t v1711;
  float64x2_t v1714;
  float64x2_t v1715;
  float64x2_t v1716;
  float64x2_t v1719;
  float64x2_t v1720;
  float64x2_t v1721;
  float64x2_t v1724;
  float64x2_t v1725;
  float64x2_t v1726;
  float64x2_t v1729;
  float64x2_t v1730;
  float64x2_t v1731;
  float64x2_t v1734;
  float64x2_t v1735;
  float64x2_t v1736;
  float64x2_t v1737;
  float64x2_t v1738;
  float64x2_t v1739;
  float64x2_t v1740;
  float64x2_t v1741;
  float64x2_t v1742;
  float64x2_t v1743;
  float64x2_t v1744;
  float64x2_t v1745;
  float64x2_t v1746;
  float64x2_t v1747;
  float64x2_t v1748;
  float64x2_t v1749;
  float64x2_t v1750;
  float64x2_t v1751;
  float64x2_t v1752;
  float64x2_t v1753;
  float64x2_t v1754;
  float64x2_t v1755;
  float64x2_t v1756;
  float64x2_t v1757;
  float64x2_t v1758;
  float64x2_t v1759;
  float64x2_t v1760;
  float64x2_t v1761;
  unint64_t *v1762;
  uint64_t v1763;
  char *v1764;
  char *v1765;
  uint64_t v1766;
  const double *v1767;
  const double *v1768;
  const double *v1769;
  float64x2_t v1771;
  unint64_t *v1772;
  uint64_t v1773;
  char *v1774;
  char *v1775;
  uint64_t v1776;
  float64x2_t v1777;
  float64x2_t v1779;
  float64x2_t v1781;
  float64x2_t v1782;
  float64x2_t v1783;
  float64x2_t v1784;
  float64x2_t v1785;
  float64x2_t v1789;
  float64x2_t v1790;
  float64x2_t v1793;
  float64x2_t v1794;
  float64x2_t v1795;
  float64x2_t v1798;
  float64x2_t v1799;
  float64x2_t v1800;
  float64x2_t v1803;
  float64x2_t v1804;
  float64x2_t v1805;
  float64x2_t v1808;
  float64x2_t v1809;
  float64x2_t v1810;
  float64x2_t v1813;
  float64x2_t v1814;
  float64x2_t v1815;
  float64x2_t v1816;
  float64x2_t v1817;
  float64x2_t v1818;
  float64x2_t v1819;
  float64x2_t v1820;
  float64x2_t v1821;
  float64x2_t v1822;
  float64x2_t v1823;
  float64x2_t v1824;
  float64x2_t v1825;
  float64x2_t v1826;
  float64x2_t v1827;
  float64x2_t v1828;
  float64x2_t v1829;
  float64x2_t v1830;
  float64x2_t v1831;
  float64x2_t v1832;
  float64x2_t v1833;
  float64x2_t v1834;
  float64x2_t v1835;
  float64x2_t v1836;
  float64x2_t v1837;
  float64x2_t v1838;
  float64x2_t v1839;
  float64x2_t v1840;
  float64x2_t v1841;
  unint64_t *v1842;
  uint64_t v1843;
  char *v1844;
  char *v1845;
  uint64_t v1846;
  const double *v1847;
  const double *v1848;
  float64x2_t v1849;
  float64x2_t v1850;
  float64x2_t v1851;
  float64x2_t v1852;
  float64x2_t v1853;
  float64x2_t v1854;
  float64x2_t v1855;
  const double *v1856;
  float64x2_t v1857;
  float64x2_t v1858;
  float64x2_t v1865;
  float64x2_t v1866;
  float64x2_t v1867;
  float64x2_t v1868;
  float64x2_t v1869;
  unint64_t *v1870;
  uint64_t v1871;
  char *v1872;
  char *v1873;
  double *v1874;
  float64x2_t *v1875;
  uint64_t v1879;
  const double *v1880;
  const double *v1881;
  const double *v1882;
  uint64_t v1883;
  double v1885;
  float64x2_t v1886;
  const double *v1888;
  const double *v1889;
  const double *v1890;
  uint64_t v1891;
  double v1893;
  float64x2_t v1894;
  uint64_t v1896;
  uint64_t v1897;
  char *v1898;
  uint64_t v1899;
  float64x2_t v1900;
  float64x2_t v1901;
  float64x2_t v1903;
  float64x2_t v1904;
  float64x2_t v1907;
  float64x2_t v1908;
  float64x2_t v1911;
  double v1914;
  float64x2_t v1915;
  float64x2_t v1920;
  float64x2_t v1921;
  float64x2_t v1922;
  float64x2_t v1925;
  float64x2_t v1926;
  float64x2_t v1927;
  float64x2_t v1930;
  float64x2_t v1931;
  float64x2_t v1932;
  float64x2_t v1935;
  float64x2_t v1936;
  float64x2_t v1937;
  float64x2_t v1938;
  float64x2_t v1939;
  float64x2_t v1940;
  float64x2_t v1941;
  float64x2_t v1942;
  float64x2_t v1943;
  float64x2_t v1944;
  float64x2_t v1945;
  float64x2_t v1946;
  float64x2_t v1947;
  float64x2_t v1948;
  float64x2_t v1949;
  float64x2_t v1950;
  float64x2_t v1951;
  float64x2_t v1952;
  float64x2_t v1953;
  float64x2_t v1954;
  float64x2_t v1955;
  uint64_t v1956;
  float64x2_t v1957;
  float64x2_t v1958;
  float64x2_t v1959;
  float64x2_t v1960;
  float64x2_t v1961;
  float64x2_t v1962;
  float64x2_t v1963;
  float64x2_t v1964;
  float64x2_t v1965;
  float64x2_t v1966;
  float64x2_t v1967;
  float64x2_t v1968;
  float64x2_t v1969;
  float64x2_t v1970;
  uint64_t v1971;
  float64x2_t v1972;
  float64x2_t v1973;
  float64x2_t v1974;
  float64x2_t v1975;
  float64x2_t v1976;
  float64x2_t v1977;
  float64x2_t v1978;
  float64x2_t v1979;
  float64x2_t v1980;
  float64x2_t v1981;
  float64x2_t v1982;
  float64x2_t *v1983;
  float64x2_t v1984;
  uint64_t v1985;
  int v1986;
  int v1987;
  uint64_t v1988;
  unsigned int v1989;
  float64x2_t *v1990;
  double v1991;
  uint64_t v1992;
  uint64_t v1993;
  float64x2_t v1994;
  float64x2_t v1995;
  float64x2_t v1996;
  float64x2_t v1997;
  double v1999;
  int8x16_t v2000;
  int8x16_t v2001;
  float64x2_t v2002;
  int8x16_t v2003;
  int64x2_t v2004;
  int8x16_t v2005;
  int64x2_t v2006;
  int64x2_t v2007;
  int64x2_t v2008;
  float64x2_t v2016;
  double v2018;
  float64x2_t v2019;
  double v2021;
  float64x2_t v2022;
  double v2024;
  float64x2_t v2025;
  double v2027;
  float64x2_t v2028;
  double v2030;
  float64x2_t v2031;
  unint64_t *v2037;
  uint64_t v2038;
  char *v2039;
  uint64_t v2040;
  uint64_t v2041;
  float64x2_t v2042;
  float64x2_t v2043;
  float64_t v2044;
  float64_t v2045;
  float64x2_t v2046;
  float64x2_t v2047;
  float64_t v2048;
  float64_t v2049;
  float64_t v2050;
  float64_t v2051;
  float64x2_t v2052;
  float64x2_t v2053;
  float64x2_t v2054;
  float64x2_t v2055;
  float64x2_t v2056;
  float64x2_t v2057;
  float64x2_t v2058;
  float64x2_t v2059;
  float64_t v2060;
  float64_t v2061;
  float64_t v2062;
  float64_t v2063;
  float64x2_t v2064;
  float64x2_t v2065;
  float64x2_t v2066;
  float64x2_t v2067;
  float64x2_t v2068;
  float64x2_t v2069;
  float64x2_t v2070;
  float64x2_t v2071;
  float64x2_t v2072;
  float64x2_t v2073;
  uint64_t v2074;
  float64x2_t v2075;
  float64x2_t v2076;
  float64x2_t v2077;
  float64x2_t v2078;
  float64x2_t v2079;
  float64x2_t v2080;
  float64x2_t v2081;
  float64x2_t v2082;
  float64x2_t v2083;
  float64x2_t v2084;
  float64x2_t v2085;
  float64x2_t v2086;
  float64x2_t v2087;
  float64x2_t v2088;
  float64x2_t v2089;
  double v2090;
  double *v2091;
  float64x2_t v2092;
  double v2093;
  float64x2_t v2094;
  float64x2_t v2095;
  float64x2_t v2097;
  float64x2_t v2098;
  float64x2_t v2099;
  float64x2_t v2100;
  float64x2_t v2101;
  float64x2_t v2102;
  float64x2_t v2103;
  float64x2_t v2104;
  float64x2_t v2105;
  float64x2_t v2106;
  float64x2_t v2107;
  float64x2_t v2108;
  float64x2_t v2109;
  float64x2_t v2110;
  float64x2_t v2111;
  float64x2_t v2112;
  float64x2_t v2113;
  float64x2_t v2114;
  float64x2_t v2115;
  float64x2_t v2116;
  float64x2_t v2117;
  double v2118;
  double v2119;
  float64x2_t v2120;
  double v2121;
  float64_t v2122;
  float64_t v2123;
  float64_t v2124;
  float64_t v2125;
  float64x2_t v2126;
  float64x2_t v2127;
  float64x2_t v2128;
  float64x2_t v2129;
  float64x2_t v2130;
  float64x2_t v2131;
  float64x2_t v2132;
  float64x2_t v2133;
  float64x2_t v2134;
  float64x2_t v2135;
  float64x2_t v2136;
  float64x2_t v2137;
  float64x2_t v2138;
  float64x2_t v2139;
  float64x2_t v2140;
  float64x2_t v2141;
  float64x2_t v2142;
  float64x2_t v2143;
  float64x2_t v2144;
  float64x2_t v2145;
  float64x2_t v2146;
  float64x2_t v2147;
  float64x2_t v2148;
  float64x2_t v2149;
  float64x2_t v2150;
  float64x2_t v2151;
  float64x2_t v2152;
  float64x2_t v2153;
  float64x2_t v2154;
  float64x2_t v2155;
  float64x2_t v2156;
  float64x2_t v2157;
  float64x2_t v2158;
  float64x2_t v2159;
  float64x2_t v2160;
  float64x2_t v2161;
  float64x2_t v2162;
  float64x2_t v2163;
  float64x2_t v2164;
  float64x2_t v2165;
  float64x2_t v2166;
  float64x2_t v2167;
  double v2168;
  float64x2_t v2169;
  float64x2_t v2170;
  float64_t v2171;
  float64_t v2172;
  float64_t v2173;
  float64_t v2174;
  float64x2_t v2175;
  float64x2_t v2176;
  float64x2_t v2177;
  float64x2_t v2178;
  float64x2_t v2179;
  float64x2_t v2180;
  float64x2_t v2181;
  float64x2_t v2182;
  float64x2_t v2183;
  float64x2_t v2184;
  float64x2_t v2185;
  float64x2_t v2186;
  float64x2_t v2187;
  float64x2_t v2188;
  float64x2_t v2189;
  float64x2_t v2190;
  float64x2_t v2191;
  float64x2_t v2192;
  float64x2_t v2193;
  float64x2_t v2194;
  float64x2_t v2195;
  float64x2_t v2196;
  float64x2_t v2197;
  float64x2_t v2198;
  float64x2_t v2199;
  float64x2_t v2200;
  float64x2_t v2201;
  float64x2_t v2202;
  float64_t v2203;
  float64_t v2204;
  float64x2_t v2205;
  float64x2_t v2206;
  float64x2_t v2207;
  float64x2_t v2208;
  float64x2_t v2209;
  float64x2_t v2210;
  float64x2_t v2211;
  float64x2_t v2212;
  float64x2_t v2213;
  float64x2_t v2214;
  float64x2_t v2215;
  float64x2_t v2216;
  float64x2_t v2217;
  float64x2_t v2218;
  float64x2_t v2219;
  float64x2_t v2220;
  float64x2_t v2221;
  float64x2_t v2222;
  float64x2_t v2223;
  float64x2_t v2224;
  float64x2_t v2225;
  float64x2_t v2226;
  float64x2_t v2227;
  float64x2_t v2228;
  float64x2_t v2229;
  float64x2_t v2230;
  float64x2_t v2231;
  float64x2_t v2232;
  float64x2_t v2233;
  float64x2_t v2234;
  float64x2_t v2235;
  float64_t v2236;
  float64_t v2237;
  float64_t v2238;
  float64_t v2239;
  float64x2_t v2240;
  float64x2_t v2241;
  float64x2_t v2242;
  float64x2_t v2243;
  float64x2_t v2244;
  float64x2_t v2245;
  float64x2_t v2246;
  float64x2_t v2247;
  float64x2_t v2248;
  float64x2_t v2249;
  float64x2_t v2250;
  float64x2_t v2251;
  float64x2_t v2252;
  float64x2_t v2253;
  float64x2_t v2254;
  float64x2_t v2255;
  float64x2_t v2256;
  float64x2_t v2257;
  float64x2_t v2258;
  float64x2_t v2259;
  float64x2_t v2260;
  float64x2_t v2261;
  float64x2_t v2262;
  float64x2_t v2263;
  float64x2_t v2264;
  float64x2_t v2265;
  float64x2_t v2266;
  float64x2_t v2267;
  float64x2_t v2268;
  float64x2_t v2269;
  float64x2_t v2270;
  float64x2_t v2271;
  float64x2_t v2272;
  float64x2_t v2273;
  float64x2_t v2274;
  float64x2_t v2275;
  float64x2_t v2276;
  float64x2_t v2277;
  float64x2_t v2278;
  float64x2_t v2279;
  float64x2_t v2280;
  float64x2_t v2281;
  float64x2_t v2282;
  float64x2_t v2283;
  float64x2_t v2284;
  float64x2_t v2285;
  float64x2_t v2286;
  float64x2_t v2287;
  float64x2_t v2288;
  float64x2_t v2289;
  float64x2_t v2290;
  float64x2_t v2291;
  float64x2_t v2292;
  float64x2_t v2293;
  float64x2_t v2294;
  float64x2_t v2295;
  float64x2_t v2296;
  float64x2_t v2297;
  float64x2_t v2298;
  float64x2_t v2299;
  float64x2_t v2300;
  float64x2_t v2301;
  float64x2_t v2302;
  float64x2_t v2303;
  float64x2_t v2304;
  float64x2_t v2305;
  float64x2_t v2306;
  float64x2_t v2307;
  float64x2_t v2308;
  float64x2_t v2309;
  float64x2_t v2310;
  float64x2_t v2311;
  float64x2_t v2312;
  float64x2_t v2313;
  float64x2_t v2314;
  float64x2_t v2315;
  float64x2_t v2316;
  float64x2_t v2317;
  float64x2_t v2318;
  float64x2_t v2319;
  float64x2_t v2320;
  float64x2_t v2321;
  float64x2_t v2322;
  float64x2_t v2323;
  float64x2_t v2324;
  float64x2_t v2325;
  float64x2_t v2326;
  float64x2_t v2327;
  float64x2_t v2328;
  float64x2_t v2329;
  float64x2_t v2330;
  float64x2_t v2331;
  float64x2_t v2332;
  float64x2_t v2333;
  float64x2_t v2334;
  float64x2_t v2335;
  float64x2_t v2336;
  float64x2_t v2337;
  float64x2_t v2338;
  float64x2_t v2339;
  float64x2_t v2340;
  float64x2_t v2341;
  float64x2_t v2342;
  float64x2_t v2343;
  float64x2_t v2344;
  float64x2_t v2345;
  float64x2_t v2346;
  float64x2_t v2347;
  float64x2_t v2348;
  float64x2_t v2349;
  float64x2_t v2350;
  float64x2_t v2351;
  float64x2_t v2352;
  float64x2_t v2353;
  float64x2_t v2354;
  float64x2_t v2355;
  float64x2_t v2356;
  float64x2_t v2357;
  float64x2_t v2358;
  float64x2_t v2359;
  float64x2_t v2360;
  float64x2_t v2361;
  float64x2_t v2362;
  float64x2_t v2363;
  float64x2_t v2364;
  float64x2_t v2365;
  float64x2_t v2366;
  float64x2_t v2367;
  float64x2_t v2368;
  float64x2_t v2369;
  float64x2_t v2370;
  float64x2_t v2371;
  float64x2_t v2372;
  float64x2_t v2373;
  float64x2_t v2374;
  float64x2_t v2375;
  float64x2_t v2376;
  float64x2_t v2377;
  float64x2_t v2378;
  float64x2_t v2379;
  float64x2_t v2380;
  float64x2_t v2381;
  float64x2_t v2382;
  float64x2_t v2383;
  float64x2_t v2384;
  float64x2_t v2385;
  float64x2_t v2386;
  float64x2_t v2387;
  float64x2_t v2388;
  float64x2_t v2389;
  float64x2_t v2390;
  float64x2_t v2391;
  float64x2_t v2392;
  float64x2_t v2393;
  float64x2_t v2394;
  float64x2_t v2395;
  float64x2_t v2396;
  float64x2_t v2397;
  float64x2_t v2398;
  float64x2_t v2399;
  float64x2_t v2400;
  float64x2_t v2401;
  float64x2_t v2402;
  float64x2_t v2403;
  float64x2_t v2404;
  float64x2_t v2405;
  float64x2_t v2406;
  float64x2_t v2407;
  float64x2_t v2408;
  float64x2_t v2409;
  float64x2_t v2410;
  float64x2_t v2411;
  float64x2_t v2412;
  float64x2_t v2413;
  float64x2_t v2414;
  float64x2_t v2415;
  uint64_t v2416;
  float64x2_t __src;
  _BYTE v2418[32];
  float64x2_t v2419;
  _BYTE v2420[32];
  float64x2_t v2421;
  _BYTE v2422[32];
  float64x2_t v2423;
  _BYTE v2424[32];
  int64x2_t v2425;
  _BYTE v2426[32];
  int64x2_t v2427;
  _BYTE v2428[32];
  int64x2_t v2429;
  _BYTE v2430[32];
  int64x2_t v2431;
  int64x2_t v2432;
  int64x2_t v2433;
  int64x2_t v2434;
  int64x2_t v2435;
  int64x2_t v2436;
  int64x2_t v2437;
  int64x2_t v2438;
  int64x2_t v2439;
  int64x2_t v2440;
  int64x2_t v2441;
  int64x2_t v2442;
  int64x2_t v2443;
  int64x2_t v2444;
  __n128 v2445;
  float64x2_t v2446;
  float64x2_t v2447;
  float64x2_t v2448;
  float64x2_t v2449;
  float64x2_t v2450;
  float64x2_t v2451;
  float64x2_t v2452;
  int64x2_t v2453;
  int64x2_t v2454;
  int64x2_t v2455;
  int64x2_t v2456;
  int64x2_t v2457;
  float64x2_t v2458;
  int64x2_t v2459;
  int64x2_t v2460;
  int64x2_t v2461;
  int64x2_t v2462;
  int64x2_t v2463;
  float64x2_t v2464;
  int64x2_t v2465;
  int64x2_t v2466;
  int64x2_t v2467;
  int64x2_t v2468;
  int64x2_t v2469;
  float64x2_t v2470;
  int64x2_t v2471;
  int64x2_t v2472;
  int64x2_t v2473;
  int64x2_t v2474;
  int64x2_t v2475;
  float64x2_t v2476;
  int64x2_t v2477;
  int64x2_t v2478;
  int64x2_t v2479;
  int64x2_t v2480;
  int64x2_t v2481;
  float64x2_t v2482;
  int64x2_t v2483;
  int64x2_t v2484;
  int64x2_t v2485;
  int64x2_t v2486;
  int64x2_t v2487;
  float64x2_t v2488;
  float64x2_t v2489;
  float64x2_t v2490;
  float64x2_t v2491;
  float64x2_t v2492;
  float64x2_t v2493;
  _QWORD v2494[6];
  float64x2_t v2495;
  double v2496;
  float64x2x3_t v2497;
  float64x2x3_t v2498;
  float64x2x3_t v2499;
  float64x2x3_t v2500;
  float64x2x3_t v2501;
  float64x2x3_t v2502;
  float64x2x3_t v2503;
  float64x2x3_t v2504;
  float64x2x3_t v2505;
  float64x2x3_t v2506;
  float64x2x3_t v2507;
  float64x2x3_t v2508;
  float64x2x3_t v2509;
  float64x2x3_t v2510;
  float64x2x3_t v2511;
  float64x2x3_t v2512;

  v9 = a1;
  v2091 = (double *)a1[2];
  v2416 = a1[3];
  v10 = (_QWORD *)*a1;
  v12 = *(_QWORD *)(*a1 + 56);
  v11 = *(_QWORD *)(*a1 + 64);
  if (v12 != v11)
  {
    v2040 = *(_QWORD *)(*a1 + 64);
    while (1)
    {
      v13 = *(_QWORD *)(v12 + 120);
      v14 = *(_QWORD *)(v12 + 128);
      v15 = ((*(unsigned __int8 *)(v14 + 124) >> 2) & 1) == (char)(32 * *(_BYTE *)(v13 + 124)) >> 7 ? 2 : 1;
      if ((v15 & (_DWORD)v9[5]) != 0)
      {
        v16 = *(unsigned __int8 *)(v13 + 4);
        if (!*(_BYTE *)(v13 + 4) || *(_DWORD *)(v13 + 120) != -1)
        {
          v17 = *(unsigned __int8 *)(v14 + 4);
          if (!*(_BYTE *)(v14 + 4) || *(_DWORD *)(v14 + 120) != -1)
            break;
        }
      }
LABEL_3:
      v12 += 264;
      if (v12 == v11)
      {
        v2091 = (double *)v9[2];
        v2416 = v9[3];
        v10 = (_QWORD *)*v9;
        goto LABEL_68;
      }
    }
    v18 = (_QWORD *)v9[1];
    if (*(_BYTE *)(v13 + 4))
    {
      v19 = *(_DWORD *)(*v18 + 4 * *(unsigned int *)(v13 + 120));
      if (*(_BYTE *)(v14 + 4))
      {
LABEL_14:
        v20 = *(_DWORD *)(*v18 + 4 * *(unsigned int *)(v14 + 120));
        goto LABEL_17;
      }
    }
    else
    {
      v19 = -1;
      if (*(_BYTE *)(v14 + 4))
        goto LABEL_14;
    }
    v20 = -1;
LABEL_17:
    v21 = v12 + 136;
    sub_239CD0710(v12 + 8, v13, v14, (int64x2_t *)(v12 + 136), &__src, _Q0, _Q1, _Q2.f64[0], _Q3.f64[0], _Q4, _Q5.n128_f64[0], (float64x2_t)_Q6);
    v22 = *(_QWORD *)(v12 + 240);
    if (v22)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 24))(v22, v12 + 136);
      v23 = *(float64x2_t **)(v12 + 240);
      v24 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v23->f64[0] + 16))(v23);
      sub_239CD191C((void *)*(unsigned __int8 *)(*(_QWORD *)(v12 + 120) + 4), &__src, v23, v24);
      v25 = v23;
      v21 = v12 + 136;
      sub_239CD3A1C((void *)*(unsigned __int8 *)(*(_QWORD *)(v12 + 128) + 4), &__src, v25, v24);
    }
    _Q0 = *(float64x2_t *)(v12 + 216);
    _Q1 = *(float64x2_t *)(v12 + 200);
    _Q4 = *(float64x2_t *)(v12 + 152);
    _Q5 = *(__n128 *)(v12 + 136);
    _Q6 = (__n128)vmulq_f64((float64x2_t)_Q5, (float64x2_t)_Q5);
    _D7 = *(_QWORD *)(v12 + 144);
    __asm { FMLA            D6, D7, V5.D[1] }
    _Q5.n128_u64[0] = *(_QWORD *)&_Q4.f64[1];
    __asm { FMLA            D6, D5, V4.D[1] }
    _Q4.f64[0] = *(float64_t *)(v12 + 176);
    __asm { FMLA            D6, D4, V3.D[1] }
    _Q3.f64[0] = *(float64_t *)(v12 + 192);
    __asm { FMLA            D6, D3, V2.D[1] }
    _Q2.f64[0] = _Q1.f64[1];
    __asm { FMLA            D6, D2, V1.D[1] }
    _Q1.f64[0] = _Q0.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    _Q0.f64[0] = v2091[1] * _Q6.n128_f64[0];
    *(float64_t *)(v12 + 232) = _Q0.f64[0];
    if (!v17)
    {
LABEL_42:
      if (!v16)
        goto LABEL_65;
      v400 = *(unint64_t **)(v2416 + 40);
      v401 = v400[11] + 24 * v19;
      v403 = *(char **)v401;
      v402 = *(char **)(v401 + 8);
      if (*(char **)v401 != v402)
      {
        while (*(_DWORD *)v403 < v19)
        {
          v403 += 16;
          if (v403 == v402)
            goto LABEL_51;
        }
      }
      if (v403 != v402)
      {
        if (*(_DWORD *)v403 == v19)
        {
          v404 = v400[2] + 8 * *((_QWORD *)v403 + 1);
LABEL_52:
          v405 = (float64x2_t)vzip1q_s64((int64x2_t)__src, (int64x2_t)v2421);
          v406 = (float64x2_t)vzip2q_s64((int64x2_t)__src, (int64x2_t)v2421);
          v407 = vmlaq_laneq_f64(vmulq_n_f64(v405, __src.f64[0]), v406, __src, 1);
          _Q27 = (float64x2_t)vzip1q_s64(v2425, v2429);
          v409 = (float64x2_t)vzip2q_s64(v2425, v2429);
          v410 = (float64x2_t)vzip1q_s64(v2434, v2440);
          v411 = (float64x2_t)vzip2q_s64(v2434, v2440);
          v412 = vmlaq_laneq_f64(vmulq_n_f64(v410, __src.f64[0]), v411, __src, 1);
          _Q25 = v2446;
          _Q7 = vmulq_f64(v2446, __src);
          _D4 = __src.f64[1];
          __asm { FMLA            D7, D4, V25.D[1] }
          _Q16 = vmlaq_laneq_f64(vmulq_n_f64(v405, v2421.f64[0]), v406, v2421, 1);
          v417 = vmlaq_laneq_f64(vmulq_n_f64(v410, v2421.f64[0]), v411, v2421, 1);
          _Q29 = vmulq_f64(v2446, v2421);
          _D3 = v2421.f64[1];
          __asm { FMLA            D29, D3, V25.D[1] }
          v420 = vmlaq_laneq_f64(vmulq_n_f64(v405, *(double *)v2425.i64), v406, (float64x2_t)v2425, 1);
          v421 = vmlaq_laneq_f64(vmulq_n_f64(v410, *(double *)v2425.i64), v411, (float64x2_t)v2425, 1);
          _Q13 = vmulq_f64(v2446, (float64x2_t)v2425);
          _D2 = *(double *)&v2425.i64[1];
          __asm { FMLA            D13, D2, V25.D[1] }
          v2379 = vmlaq_laneq_f64(vmulq_n_f64(v405, *(double *)v2429.i64), v406, (float64x2_t)v2429, 1);
          v2067 = vmlaq_laneq_f64(vmulq_n_f64(v410, *(double *)v2429.i64), v411, (float64x2_t)v2429, 1);
          _Q2 = vmulq_f64(v2446, (float64x2_t)v2429);
          _D1 = *(double *)&v2429.i64[1];
          __asm { FMLA            D2, D1, V25.D[1] }
          v2053 = vmlaq_laneq_f64(vmulq_n_f64(v405, *(double *)v2434.i64), v406, (float64x2_t)v2434, 1);
          v2061 = _Q2.f64[1];
          v2046 = vmlaq_laneq_f64(vmulq_n_f64(v410, *(double *)v2434.i64), v411, (float64x2_t)v2434, 1);
          _Q1 = vmulq_f64(v2446, (float64x2_t)v2434);
          _D0 = *(double *)&v2434.i64[1];
          __asm { FMLA            D1, D0, V25.D[1] }
          v2044 = _Q1.f64[1];
          v2334 = vmlaq_laneq_f64(vmulq_n_f64(v405, *(double *)v2440.i64), v406, (float64x2_t)v2440, 1);
          v2290 = vmlaq_laneq_f64(vmulq_n_f64(_Q27, *(double *)v2440.i64), v409, (float64x2_t)v2440, 1);
          v2249 = vmlaq_laneq_f64(vmulq_n_f64(v410, *(double *)v2440.i64), v411, (float64x2_t)v2440, 1);
          _Q1 = vmulq_f64(v2446, (float64x2_t)v2440);
          _D0 = *(double *)&v2440.i64[1];
          __asm { FMLA            D1, D0, V25.D[1] }
          v2181 = vmlaq_laneq_f64(vmulq_n_f64(v405, v2446.f64[0]), v406, v2446, 1);
          v2236 = _Q1.f64[1];
          v430 = vmlaq_laneq_f64(vmulq_n_f64(_Q27, v2446.f64[0]), v409, v2446, 1);
          v431 = vmlaq_laneq_f64(vmulq_n_f64(v410, v2446.f64[0]), v411, v2446, 1);
          _Q19 = vmulq_f64(_Q25, _Q25);
          _D30 = v2446.f64[1];
          __asm { FMLA            D19, D30, V25.D[1] }
          v434 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2418, *(int64x2_t *)v2422);
          _Q0 = vmlaq_n_f64(v407, v434, *(double *)v2418);
          v436 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2418, *(int64x2_t *)v2422);
          v437 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2426, *(int64x2_t *)v2430);
          _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2426, *(int64x2_t *)v2430);
          v2103 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q27, __src.f64[0]), v409, __src, 1), v437, *(double *)v2418), _Q3, *(float64x2_t *)v2418, 1);
          v2133 = vmlaq_laneq_f64(_Q0, v436, *(float64x2_t *)v2418, 1);
          _Q1 = (float64x2_t)vzip1q_s64(v2435, v2441);
          _Q2 = (float64x2_t)vzip2q_s64(v2435, v2441);
          v2079 = vmlaq_laneq_f64(vmlaq_n_f64(v412, _Q1, *(double *)v2418), _Q2, *(float64x2_t *)v2418, 1);
          _Q0.f64[1] = v2447.f64[1];
          _Q20.f64[1] = _Q7.f64[1];
          _Q25.f64[0] = *(float64_t *)&v2418[8];
          __asm { FMLA            D20, D25, V0.D[1] }
          v443 = vmlaq_laneq_f64(vmlaq_n_f64(_Q16, v434, *(double *)v2422), v436, *(float64x2_t *)v2422, 1);
          v444 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q27, v2421.f64[0]), v409, v2421, 1), v437, *(double *)v2422), _Q3, *(float64x2_t *)v2422, 1);
          v445 = vmlaq_laneq_f64(vmlaq_n_f64(v417, _Q1, *(double *)v2422), _Q2, *(float64x2_t *)v2422, 1);
          _Q26.f64[1] = _Q29.f64[1];
          _Q25.f64[0] = *(float64_t *)&v2422[8];
          __asm { FMLA            D26, D25, V0.D[1] }
          v448 = vmlaq_laneq_f64(vmlaq_n_f64(v420, v434, *(double *)v2426), v436, *(float64x2_t *)v2426, 1);
          v449 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q27, *(double *)v2425.i64), v409, (float64x2_t)v2425, 1), v437, *(double *)v2426), _Q3, *(float64x2_t *)v2426, 1);
          v450 = vmlaq_laneq_f64(vmlaq_n_f64(v421, _Q1, *(double *)v2426), _Q2, *(float64x2_t *)v2426, 1);
          _Q8.f64[1] = _Q13.f64[1];
          _Q25.f64[0] = *(float64_t *)&v2426[8];
          __asm { FMLA            D8, D25, V0.D[1] }
          v2380 = vmlaq_laneq_f64(vmlaq_n_f64(v2379, v434, *(double *)v2430), v436, *(float64x2_t *)v2430, 1);
          v2154 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q27, *(double *)v2429.i64), v409, (float64x2_t)v2429, 1), v437, *(double *)v2430), _Q3, *(float64x2_t *)v2430, 1);
          _Q28.f64[1] = v2061;
          v452 = vmlaq_laneq_f64(vmlaq_n_f64(v2067, _Q1, *(double *)v2430), _Q2, *(float64x2_t *)v2430, 1);
          _Q25.f64[0] = *(float64_t *)&v2430[8];
          __asm { FMLA            D28, D25, V0.D[1] }
          v454 = vmlaq_laneq_f64(vmlaq_n_f64(v2053, v434, *(double *)v2435.i64), v436, (float64x2_t)v2435, 1);
          v455 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q27, *(double *)v2434.i64), v409, (float64x2_t)v2434, 1), v437, *(double *)v2435.i64), _Q3, (float64x2_t)v2435, 1);
          _Q27.f64[1] = v2044;
          v456 = vmlaq_laneq_f64(vmlaq_n_f64(v2046, _Q1, *(double *)v2435.i64), _Q2, (float64x2_t)v2435, 1);
          *(_QWORD *)&_Q25.f64[0] = v2435.i64[1];
          __asm { FMLA            D27, D25, V0.D[1] }
          v2335 = vmlaq_laneq_f64(vmlaq_n_f64(v2334, v434, *(double *)v2441.i64), v436, (float64x2_t)v2441, 1);
          v2291 = vmlaq_laneq_f64(vmlaq_n_f64(v2290, v437, *(double *)v2441.i64), _Q3, (float64x2_t)v2441, 1);
          v2250 = vmlaq_laneq_f64(vmlaq_n_f64(v2249, _Q1, *(double *)v2441.i64), _Q2, (float64x2_t)v2441, 1);
          *(_QWORD *)&_Q25.f64[0] = v2441.i64[1];
          __asm { FMLA            D16, D25, V0.D[1] }
          v2182 = vmlaq_laneq_f64(vmlaq_n_f64(v2181, v434, v2447.f64[0]), v436, v2447, 1);
          v457 = vmlaq_laneq_f64(vmlaq_n_f64(v430, v437, v2447.f64[0]), _Q3, v2447, 1);
          v458 = vmlaq_laneq_f64(vmlaq_n_f64(v431, _Q1, v2447.f64[0]), _Q2, v2447, 1);
          _Q2.f64[0] = v2447.f64[1];
          __asm { FMLA            D19, D2, V0.D[1] }
          v459 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2418[16], *(int64x2_t *)&v2422[16]);
          v460 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2418[16], *(int64x2_t *)&v2422[16]);
          v461 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2426[16], *(int64x2_t *)&v2430[16]);
          v462 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2426[16], *(int64x2_t *)&v2430[16]);
          v463 = (float64x2_t)vzip1q_s64(v2436, v2442);
          v464 = (float64x2_t)vzip2q_s64(v2436, v2442);
          v465 = vmlaq_laneq_f64(vmlaq_n_f64(v2079, v463, *(double *)&v2418[16]), v464, *(float64x2_t *)&v2418[16], 1);
          _Q0.f64[1] = v2448.f64[1];
          _Q3.f64[0] = *(float64_t *)&v2418[24];
          __asm { FMLA            D20, D3, V0.D[1] }
          v467 = vmlaq_laneq_f64(vmlaq_n_f64(v443, v459, *(double *)&v2422[16]), v460, *(float64x2_t *)&v2422[16], 1);
          v468 = vmlaq_laneq_f64(vmlaq_n_f64(v444, v461, *(double *)&v2422[16]), v462, *(float64x2_t *)&v2422[16], 1);
          v469 = vmlaq_laneq_f64(vmlaq_n_f64(v445, v463, *(double *)&v2422[16]), v464, *(float64x2_t *)&v2422[16], 1);
          _Q1.f64[0] = *(float64_t *)&v2422[24];
          __asm { FMLA            D26, D1, V0.D[1] }
          v471 = vmlaq_laneq_f64(vmlaq_n_f64(v448, v459, *(double *)&v2426[16]), v460, *(float64x2_t *)&v2426[16], 1);
          v472 = vmlaq_laneq_f64(vmlaq_n_f64(v449, v461, *(double *)&v2426[16]), v462, *(float64x2_t *)&v2426[16], 1);
          v473 = vmlaq_laneq_f64(vmlaq_n_f64(v450, v463, *(double *)&v2426[16]), v464, *(float64x2_t *)&v2426[16], 1);
          _Q1.f64[0] = *(float64_t *)&v2426[24];
          __asm { FMLA            D8, D1, V0.D[1] }
          v2381 = vmlaq_laneq_f64(vmlaq_n_f64(v2380, v459, *(double *)&v2430[16]), v460, *(float64x2_t *)&v2430[16], 1);
          v2155 = vmlaq_laneq_f64(vmlaq_n_f64(v2154, v461, *(double *)&v2430[16]), v462, *(float64x2_t *)&v2430[16], 1);
          v474 = vmlaq_laneq_f64(vmlaq_n_f64(v452, v463, *(double *)&v2430[16]), v464, *(float64x2_t *)&v2430[16], 1);
          _Q1.f64[0] = *(float64_t *)&v2430[24];
          __asm { FMLA            D28, D1, V0.D[1] }
          v476 = vmlaq_laneq_f64(vmlaq_n_f64(v454, v459, *(double *)v2436.i64), v460, (float64x2_t)v2436, 1);
          v477 = vmlaq_laneq_f64(vmlaq_n_f64(v455, v461, *(double *)v2436.i64), v462, (float64x2_t)v2436, 1);
          v478 = vmlaq_laneq_f64(vmlaq_n_f64(v456, v463, *(double *)v2436.i64), v464, (float64x2_t)v2436, 1);
          *(_QWORD *)&_Q1.f64[0] = v2436.i64[1];
          __asm { FMLA            D27, D1, V0.D[1] }
          v2336 = vmlaq_laneq_f64(vmlaq_n_f64(v2335, v459, *(double *)v2442.i64), v460, (float64x2_t)v2442, 1);
          v2292 = vmlaq_laneq_f64(vmlaq_n_f64(v2291, v461, *(double *)v2442.i64), v462, (float64x2_t)v2442, 1);
          v2251 = vmlaq_laneq_f64(vmlaq_n_f64(v2250, v463, *(double *)v2442.i64), v464, (float64x2_t)v2442, 1);
          *(_QWORD *)&_Q1.f64[0] = v2442.i64[1];
          __asm { FMLA            D3, D1, V0.D[1] }
          v2183 = vmlaq_laneq_f64(vmlaq_n_f64(v2182, v459, v2448.f64[0]), v460, v2448, 1);
          v479 = vmlaq_laneq_f64(vmlaq_n_f64(v457, v461, v2448.f64[0]), v462, v2448, 1);
          v480 = vmlaq_laneq_f64(vmlaq_n_f64(v458, v463, v2448.f64[0]), v464, v2448, 1);
          _Q3.f64[0] = v2448.f64[1];
          __asm { FMLA            D19, D3, V0.D[1] }
          _Q0 = (float64x2_t)vzip1q_s64((int64x2_t)v2419, (int64x2_t)v2423);
          v482 = (float64x2_t)vzip2q_s64((int64x2_t)v2419, (int64x2_t)v2423);
          v483 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2133, v459, *(double *)&v2418[16]), v460, *(float64x2_t *)&v2418[16], 1), _Q0, v2419.f64[0]), v482, v2419, 1);
          v484 = (float64x2_t)vzip1q_s64(v2427, v2431);
          v485 = (float64x2_t)vzip2q_s64(v2427, v2431);
          v2104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2103, v461, *(double *)&v2418[16]), v462, *(float64x2_t *)&v2418[16], 1), v484, v2419.f64[0]), v485, v2419, 1);
          v486 = (float64x2_t)vzip1q_s64(v2437, v2443);
          v487 = (float64x2_t)vzip2q_s64(v2437, v2443);
          v488 = vmlaq_laneq_f64(vmlaq_n_f64(v465, v486, v2419.f64[0]), v487, v2419, 1);
          _V30.D[1] = v2449.f64[1];
          _Q1.f64[0] = v2419.f64[1];
          __asm { FMLA            D20, D1, V30.D[1] }
          v491 = vmlaq_laneq_f64(vmlaq_n_f64(v467, _Q0, v2423.f64[0]), v482, v2423, 1);
          v492 = vmlaq_laneq_f64(vmlaq_n_f64(v468, v484, v2423.f64[0]), v485, v2423, 1);
          v493 = vmlaq_laneq_f64(vmlaq_n_f64(v469, v486, v2423.f64[0]), v487, v2423, 1);
          _Q1.f64[0] = v2423.f64[1];
          __asm { FMLA            D26, D1, V30.D[1] }
          v495 = vmlaq_laneq_f64(vmlaq_n_f64(v471, _Q0, *(double *)v2427.i64), v482, (float64x2_t)v2427, 1);
          v496 = vmlaq_laneq_f64(vmlaq_n_f64(v472, v484, *(double *)v2427.i64), v485, (float64x2_t)v2427, 1);
          v497 = vmlaq_laneq_f64(vmlaq_n_f64(v473, v486, *(double *)v2427.i64), v487, (float64x2_t)v2427, 1);
          *(_QWORD *)&_Q1.f64[0] = v2427.i64[1];
          __asm { FMLA            D8, D1, V30.D[1] }
          v2382 = vmlaq_laneq_f64(vmlaq_n_f64(v2381, _Q0, *(double *)v2431.i64), v482, (float64x2_t)v2431, 1);
          v2156 = vmlaq_laneq_f64(vmlaq_n_f64(v2155, v484, *(double *)v2431.i64), v485, (float64x2_t)v2431, 1);
          v498 = vmlaq_laneq_f64(vmlaq_n_f64(v474, v486, *(double *)v2431.i64), v487, (float64x2_t)v2431, 1);
          *(_QWORD *)&_Q1.f64[0] = v2431.i64[1];
          __asm { FMLA            D28, D1, V30.D[1] }
          v500 = vmlaq_laneq_f64(vmlaq_n_f64(v476, _Q0, *(double *)v2437.i64), v482, (float64x2_t)v2437, 1);
          v501 = vmlaq_laneq_f64(vmlaq_n_f64(v477, v484, *(double *)v2437.i64), v485, (float64x2_t)v2437, 1);
          v502 = vmlaq_laneq_f64(vmlaq_n_f64(v478, v486, *(double *)v2437.i64), v487, (float64x2_t)v2437, 1);
          *(_QWORD *)&_Q1.f64[0] = v2437.i64[1];
          __asm { FMLA            D27, D1, V30.D[1] }
          v2337 = vmlaq_laneq_f64(vmlaq_n_f64(v2336, _Q0, *(double *)v2443.i64), v482, (float64x2_t)v2443, 1);
          v2293 = vmlaq_laneq_f64(vmlaq_n_f64(v2292, v484, *(double *)v2443.i64), v485, (float64x2_t)v2443, 1);
          v2252 = vmlaq_laneq_f64(vmlaq_n_f64(v2251, v486, *(double *)v2443.i64), v487, (float64x2_t)v2443, 1);
          *(_QWORD *)&_Q1.f64[0] = v2443.i64[1];
          __asm { FMLA            D2, D1, V30.D[1] }
          v2184 = vmlaq_laneq_f64(vmlaq_n_f64(v2183, _Q0, v2449.f64[0]), v482, v2449, 1);
          v503 = vmlaq_laneq_f64(vmlaq_n_f64(v479, v484, v2449.f64[0]), v485, v2449, 1);
          v504 = vmlaq_laneq_f64(vmlaq_n_f64(v480, v486, v2449.f64[0]), v487, v2449, 1);
          _Q2.f64[0] = v2449.f64[1];
          __asm { FMLA            D19, D2, V30.D[1] }
          _Q2 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2420, *(int64x2_t *)v2424);
          v506 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2420, *(int64x2_t *)v2424);
          v507 = vmlaq_laneq_f64(vmlaq_n_f64(v483, _Q2, *(double *)v2420), v506, *(float64x2_t *)v2420, 1);
          v508 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2428, v2432);
          v509 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2428, v2432);
          v2105 = vmlaq_laneq_f64(vmlaq_n_f64(v2104, v508, *(double *)v2420), v509, *(float64x2_t *)v2420, 1);
          v510 = (float64x2_t)vzip1q_s64(v2438, v2444);
          v511 = (float64x2_t)vzip2q_s64(v2438, v2444);
          v512 = vmlaq_laneq_f64(vmlaq_n_f64(v488, v510, *(double *)v2420), v511, *(float64x2_t *)v2420, 1);
          _V30.D[1] = v2450.f64[1];
          _Q0.f64[0] = *(float64_t *)&v2420[8];
          __asm { FMLA            D20, D0, V30.D[1] }
          v515 = vmlaq_laneq_f64(vmlaq_n_f64(v491, _Q2, *(double *)v2424), v506, *(float64x2_t *)v2424, 1);
          v516 = vmlaq_laneq_f64(vmlaq_n_f64(v492, v508, *(double *)v2424), v509, *(float64x2_t *)v2424, 1);
          v517 = vmlaq_laneq_f64(vmlaq_n_f64(v493, v510, *(double *)v2424), v511, *(float64x2_t *)v2424, 1);
          _Q0.f64[0] = *(float64_t *)&v2424[8];
          __asm { FMLA            D26, D0, V30.D[1] }
          v519 = vmlaq_laneq_f64(vmlaq_n_f64(v495, _Q2, *(double *)v2428), v506, *(float64x2_t *)v2428, 1);
          v520 = vmlaq_laneq_f64(vmlaq_n_f64(v496, v508, *(double *)v2428), v509, *(float64x2_t *)v2428, 1);
          v521 = vmlaq_laneq_f64(vmlaq_n_f64(v497, v510, *(double *)v2428), v511, *(float64x2_t *)v2428, 1);
          _Q0.f64[0] = *(float64_t *)&v2428[8];
          __asm { FMLA            D8, D0, V30.D[1] }
          v2383 = vmlaq_laneq_f64(vmlaq_n_f64(v2382, _Q2, *(double *)v2432.i64), v506, (float64x2_t)v2432, 1);
          v2157 = vmlaq_laneq_f64(vmlaq_n_f64(v2156, v508, *(double *)v2432.i64), v509, (float64x2_t)v2432, 1);
          v522 = vmlaq_laneq_f64(vmlaq_n_f64(v498, v510, *(double *)v2432.i64), v511, (float64x2_t)v2432, 1);
          *(_QWORD *)&_Q0.f64[0] = v2432.i64[1];
          __asm { FMLA            D28, D0, V30.D[1] }
          v524 = vmlaq_laneq_f64(vmlaq_n_f64(v500, _Q2, *(double *)v2438.i64), v506, (float64x2_t)v2438, 1);
          v525 = vmlaq_laneq_f64(vmlaq_n_f64(v501, v508, *(double *)v2438.i64), v509, (float64x2_t)v2438, 1);
          v526 = vmlaq_laneq_f64(vmlaq_n_f64(v502, v510, *(double *)v2438.i64), v511, (float64x2_t)v2438, 1);
          *(_QWORD *)&_Q0.f64[0] = v2438.i64[1];
          __asm { FMLA            D27, D0, V30.D[1] }
          v2338 = vmlaq_laneq_f64(vmlaq_n_f64(v2337, _Q2, *(double *)v2444.i64), v506, (float64x2_t)v2444, 1);
          v2294 = vmlaq_laneq_f64(vmlaq_n_f64(v2293, v508, *(double *)v2444.i64), v509, (float64x2_t)v2444, 1);
          _Q1.f64[1] = v2236;
          v2253 = vmlaq_laneq_f64(vmlaq_n_f64(v2252, v510, *(double *)v2444.i64), v511, (float64x2_t)v2444, 1);
          *(_QWORD *)&_Q0.f64[0] = v2444.i64[1];
          __asm { FMLA            D1, D0, V30.D[1] }
          v2185 = vmlaq_laneq_f64(vmlaq_n_f64(v2184, _Q2, v2450.f64[0]), v506, v2450, 1);
          v527 = vmlaq_laneq_f64(vmlaq_n_f64(v503, v508, v2450.f64[0]), v509, v2450, 1);
          v528 = vmlaq_laneq_f64(vmlaq_n_f64(v504, v510, v2450.f64[0]), v511, v2450, 1);
          _Q2.f64[0] = v2450.f64[1];
          __asm { FMLA            D19, D2, V30.D[1] }
          v529 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2420[16], *(int64x2_t *)&v2424[16]);
          v530 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2420[16], *(int64x2_t *)&v2424[16]);
          v2134 = vmlaq_laneq_f64(vmlaq_n_f64(v507, v529, *(double *)&v2420[16]), v530, *(float64x2_t *)&v2420[16], 1);
          v507.f64[1] = *(float64_t *)&v2428[24];
          v531 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2428[16], v2433);
          v532 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2428[16], v2433);
          v533 = (float64x2_t)vzip1q_s64(v2439, (int64x2_t)v2445);
          v534 = (float64x2_t)vzip2q_s64(v2439, (int64x2_t)v2445);
          v2080 = vmlaq_laneq_f64(vmlaq_n_f64(v512, v533, *(double *)&v2420[16]), v534, *(float64x2_t *)&v2420[16], 1);
          _V30.D[1] = v2451.f64[1];
          _Q0.f64[0] = *(float64_t *)&v2420[24];
          __asm { FMLA            D20, D0, V30.D[1] }
          v536 = vmlaq_laneq_f64(vmlaq_n_f64(v515, v529, *(double *)&v2424[16]), v530, *(float64x2_t *)&v2424[16], 1);
          v537 = vmlaq_laneq_f64(vmlaq_n_f64(v516, v531, *(double *)&v2424[16]), v532, *(float64x2_t *)&v2424[16], 1);
          v538 = vmlaq_laneq_f64(vmlaq_n_f64(v517, v533, *(double *)&v2424[16]), v534, *(float64x2_t *)&v2424[16], 1);
          _Q0.f64[0] = *(float64_t *)&v2424[24];
          __asm { FMLA            D26, D0, V30.D[1] }
          v539 = vmlaq_laneq_f64(vmlaq_n_f64(v519, v529, *(double *)&v2428[16]), v530, *(float64x2_t *)&v2428[16], 1);
          v540 = vmlaq_laneq_f64(vmlaq_n_f64(v520, v531, *(double *)&v2428[16]), v532, *(float64x2_t *)&v2428[16], 1);
          v541 = vmlaq_laneq_f64(vmlaq_n_f64(v521, v533, *(double *)&v2428[16]), v534, *(float64x2_t *)&v2428[16], 1);
          _Q0.f64[0] = *(float64_t *)&v2428[24];
          __asm { FMLA            D8, D0, V30.D[1] }
          v2384 = vmlaq_laneq_f64(vmlaq_n_f64(v2383, v529, *(double *)v2433.i64), v530, (float64x2_t)v2433, 1);
          v542 = vmlaq_laneq_f64(vmlaq_n_f64(v2157, v531, *(double *)v2433.i64), v532, (float64x2_t)v2433, 1);
          v543 = vmlaq_laneq_f64(vmlaq_n_f64(v522, v533, *(double *)v2433.i64), v534, (float64x2_t)v2433, 1);
          *(_QWORD *)&_Q0.f64[0] = v2433.i64[1];
          __asm { FMLA            D28, D0, V30.D[1] }
          v544 = vmlaq_laneq_f64(vmlaq_n_f64(v524, v529, *(double *)v2439.i64), v530, (float64x2_t)v2439, 1);
          v545 = vmlaq_laneq_f64(vmlaq_n_f64(v525, v531, *(double *)v2439.i64), v532, (float64x2_t)v2439, 1);
          v546 = vmlaq_laneq_f64(vmlaq_n_f64(v526, v533, *(double *)v2439.i64), v534, (float64x2_t)v2439, 1);
          *(_QWORD *)&_Q0.f64[0] = v2439.i64[1];
          __asm { FMLA            D27, D0, V30.D[1] }
          v2339 = vmlaq_laneq_f64(vmlaq_n_f64(v2338, v529, v2445.n128_f64[0]), v530, (float64x2_t)v2445, 1);
          v2295 = vmlaq_laneq_f64(vmlaq_n_f64(v2294, v531, v2445.n128_f64[0]), v532, (float64x2_t)v2445, 1);
          v2254 = vmlaq_laneq_f64(vmlaq_n_f64(v2253, v533, v2445.n128_f64[0]), v534, (float64x2_t)v2445, 1);
          *(_QWORD *)&_Q0.f64[0] = v2445.n128_u64[1];
          __asm { FMLA            D1, D0, V30.D[1] }
          v2186 = vmlaq_laneq_f64(vmlaq_n_f64(v2185, v529, v2451.f64[0]), v530, v2451, 1);
          v2215 = _Q1;
          v547 = vmlaq_laneq_f64(vmlaq_n_f64(v527, v531, v2451.f64[0]), v532, v2451, 1);
          v548 = vmlaq_laneq_f64(vmlaq_n_f64(v528, v533, v2451.f64[0]), v534, v2451, 1);
          _Q0.f64[0] = v2451.f64[1];
          __asm { FMLA            D19, D0, V30.D[1] }
          v549 = vaddq_f64(*(float64x2_t *)(v404 + 16), vmlaq_laneq_f64(vmlaq_n_f64(v2105, v531, *(double *)&v2420[16]), v532, *(float64x2_t *)&v2420[16], 1));
          *(float64x2_t *)v404 = vaddq_f64(*(float64x2_t *)v404, v2134);
          *(float64x2_t *)(v404 + 16) = v549;
          v550 = vaddq_f64(*(float64x2_t *)(v404 + 32), v2080);
          *(float64x2_t *)(v404 + 32) = v550;
          v550.f64[0] = *(float64_t *)(v404 + 48);
          *(_QWORD *)(v404 + 48) = *(_OWORD *)&vaddq_f64(v550, _Q20);
          *(float64x2_t *)(v404 + 56) = vaddq_f64(*(float64x2_t *)(v404 + 56), v536);
          *(float64x2_t *)(v404 + 72) = vaddq_f64(*(float64x2_t *)(v404 + 72), v537);
          v551 = vaddq_f64(*(float64x2_t *)(v404 + 88), v538);
          *(float64x2_t *)(v404 + 88) = v551;
          v551.f64[0] = *(float64_t *)(v404 + 104);
          v552 = vaddq_f64(v551, _Q26);
          *(float64_t *)(v404 + 104) = v552.f64[0];
          v552.f64[0] = *(float64_t *)(v404 + 160);
          v553 = vaddq_f64(*(float64x2_t *)(v404 + 144), v541);
          v554 = vaddq_f64(*(float64x2_t *)(v404 + 128), v540);
          v507.f64[0] = *(float64_t *)(v404 + 216);
          v555 = vaddq_f64(*(float64x2_t *)(v404 + 200), v543);
          v556 = vaddq_f64(*(float64x2_t *)(v404 + 184), v542);
          v461.f64[1] = v2384.f64[1];
          v557 = vaddq_f64(*(float64x2_t *)(v404 + 168), v2384);
          v461.f64[0] = *(float64_t *)(v404 + 272);
          v558 = vaddq_f64(*(float64x2_t *)(v404 + 256), v546);
          v559 = vaddq_f64(*(float64x2_t *)(v404 + 240), v545);
          v560 = vaddq_f64(*(float64x2_t *)(v404 + 224), v544);
          v534.f64[0] = *(float64_t *)(v404 + 328);
          *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(v534, v2215);
          v561 = vaddq_f64(*(float64x2_t *)(v404 + 312), v2254);
          v562 = vaddq_f64(*(float64x2_t *)(v404 + 296), v2295);
          v563 = *(float64x2_t *)(v404 + 280);
          v564 = vaddq_f64(v563, v2339);
          v563.f64[0] = *(float64_t *)(v404 + 384);
          *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vaddq_f64(v563, _Q19);
          v565 = vaddq_f64(*(float64x2_t *)(v404 + 352), v547);
          v566 = vaddq_f64(*(float64x2_t *)(v404 + 336), v2186);
          *(float64x2_t *)(v404 + 112) = vaddq_f64(*(float64x2_t *)(v404 + 112), v539);
          *(float64x2_t *)(v404 + 128) = v554;
          *(float64x2_t *)(v404 + 144) = v553;
          *(_QWORD *)(v404 + 160) = *(_OWORD *)&vaddq_f64(v552, _Q8);
          *(float64x2_t *)(v404 + 168) = v557;
          *(float64x2_t *)(v404 + 184) = v556;
          *(float64x2_t *)(v404 + 200) = v555;
          *(_QWORD *)(v404 + 216) = *(_OWORD *)&vaddq_f64(v507, _Q28);
          *(float64x2_t *)(v404 + 224) = v560;
          *(float64x2_t *)(v404 + 240) = v559;
          *(float64x2_t *)(v404 + 256) = v558;
          *(_QWORD *)(v404 + 272) = *(_OWORD *)&vaddq_f64(v461, _Q27);
          *(float64x2_t *)(v404 + 280) = v564;
          *(float64x2_t *)(v404 + 296) = v562;
          *(float64x2_t *)(v404 + 312) = v561;
          *(float64_t *)(v404 + 328) = _Q20.f64[0];
          *(float64x2_t *)(v404 + 336) = v566;
          *(float64x2_t *)(v404 + 352) = v565;
          *(float64x2_t *)(v404 + 368) = vaddq_f64(*(float64x2_t *)(v404 + 368), v548);
          *(float64_t *)(v404 + 384) = _Q19.f64[0];
          if (!v17 || v20 < v19)
            goto LABEL_64;
          v567 = *(unint64_t **)(v2416 + 40);
          v568 = v567[11] + 24 * v20;
          v570 = *(char **)v568;
          v569 = *(char **)(v568 + 8);
          if (*(char **)v568 != v569)
          {
            while (*(_DWORD *)v570 < v19)
            {
              v570 += 16;
              if (v570 == v569)
                goto LABEL_62;
            }
          }
          if (v570 != v569)
          {
            if (*(_DWORD *)v570 == v19)
            {
              v571 = v567[2] + 8 * *((_QWORD *)v570 + 1);
LABEL_63:
              v572 = (float64x2_t)vzip1q_s64((int64x2_t)__src, (int64x2_t)v2421);
              v573 = (float64x2_t)vzip2q_s64((int64x2_t)__src, (int64x2_t)v2421);
              v574 = vmlaq_laneq_f64(vmulq_n_f64(v572, v2452.f64[0]), v573, v2452, 1);
              v575 = (float64x2_t)vzip1q_s64(v2425, v2429);
              v576 = (float64x2_t)vzip2q_s64(v2425, v2429);
              v577 = vmlaq_laneq_f64(vmulq_n_f64(v575, v2452.f64[0]), v576, v2452, 1);
              v578 = (float64x2_t)vzip1q_s64(v2434, v2440);
              v579 = (float64x2_t)vzip2q_s64(v2434, v2440);
              v580 = vmlaq_laneq_f64(vmulq_n_f64(v578, v2452.f64[0]), v579, v2452, 1);
              _V25.D[1] = v2446.f64[1];
              _Q1 = vmulq_f64(v2446, v2452);
              _D0 = v2452.f64[1];
              __asm { FMLA            D1, D0, V25.D[1] }
              v2237 = _Q1.f64[1];
              v2158 = vmlaq_laneq_f64(vmulq_n_f64(v572, v2458.f64[0]), v573, v2458, 1);
              v2187 = vmlaq_laneq_f64(vmulq_n_f64(v575, v2458.f64[0]), v576, v2458, 1);
              v584 = vmlaq_laneq_f64(vmulq_n_f64(v578, v2458.f64[0]), v579, v2458, 1);
              _Q21 = vmulq_f64(v2446, v2458);
              _D0 = v2458.f64[1];
              __asm { FMLA            D21, D0, V25.D[1] }
              v587 = vmlaq_laneq_f64(vmulq_n_f64(v572, v2464.f64[0]), v573, v2464, 1);
              v588 = vmlaq_laneq_f64(vmulq_n_f64(v575, v2464.f64[0]), v576, v2464, 1);
              v589 = vmlaq_laneq_f64(vmulq_n_f64(v578, v2464.f64[0]), v579, v2464, 1);
              _Q26 = vmulq_f64(v2446, v2464);
              _D2 = v2464.f64[1];
              __asm { FMLA            D26, D2, V25.D[1] }
              v2135 = vmlaq_laneq_f64(vmulq_n_f64(v572, v2470.f64[0]), v573, v2470, 1);
              _Q9 = vmlaq_laneq_f64(vmulq_n_f64(v575, v2470.f64[0]), v576, v2470, 1);
              v593 = vmlaq_laneq_f64(vmulq_n_f64(v578, v2470.f64[0]), v579, v2470, 1);
              _Q11 = vmulq_f64(v2446, v2470);
              _Q1.f64[0] = v2470.f64[1];
              __asm { FMLA            D11, D1, V25.D[1] }
              v595 = vmlaq_laneq_f64(vmulq_n_f64(v572, v2476.f64[0]), v573, v2476, 1);
              v596 = vmlaq_laneq_f64(vmulq_n_f64(v575, v2476.f64[0]), v576, v2476, 1);
              v597 = vmlaq_laneq_f64(vmulq_n_f64(v578, v2476.f64[0]), v579, v2476, 1);
              _Q15 = vmulq_f64(v2446, v2476);
              _D0 = v2476.f64[1];
              __asm { FMLA            D15, D0, V25.D[1] }
              v2340 = vmlaq_laneq_f64(vmulq_n_f64(v572, v2482.f64[0]), v573, v2482, 1);
              v2296 = vmlaq_laneq_f64(vmulq_n_f64(v575, v2482.f64[0]), v576, v2482, 1);
              v2255 = vmlaq_laneq_f64(vmulq_n_f64(v578, v2482.f64[0]), v579, v2482, 1);
              _Q1 = vmulq_f64(v2446, v2482);
              _D0 = v2482.f64[1];
              __asm { FMLA            D1, D0, V25.D[1] }
              v2123 = _Q1.f64[1];
              v2385 = vmlaq_laneq_f64(vmulq_n_f64(v572, v2488.f64[0]), v573, v2488, 1);
              v602 = vmlaq_laneq_f64(vmulq_n_f64(v575, v2488.f64[0]), v576, v2488, 1);
              v603 = vmlaq_laneq_f64(vmulq_n_f64(v578, v2488.f64[0]), v579, v2488, 1);
              _Q27 = vmulq_f64(v2446, v2488);
              _D0 = v2488.f64[1];
              __asm { FMLA            D27, D0, V25.D[1] }
              v606 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2426, *(int64x2_t *)v2430);
              v607 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2426, *(int64x2_t *)v2430);
              v608 = (float64x2_t)vzip1q_s64(v2435, v2441);
              _Q31 = (float64x2_t)vzip2q_s64(v2435, v2441);
              v610 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2418, *(int64x2_t *)v2422);
              v611 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2418, *(int64x2_t *)v2422);
              _Q3 = (float64x2_t)v2453;
              v613 = vmlaq_laneq_f64(vmlaq_n_f64(v574, v610, _Q3.f64[0]), v611, _Q3, 1);
              v614 = vmlaq_laneq_f64(vmlaq_n_f64(v577, v606, _Q3.f64[0]), v607, _Q3, 1);
              v615 = vmlaq_laneq_f64(vmlaq_n_f64(v580, v608, _Q3.f64[0]), _Q31, _Q3, 1);
              _V0.D[1] = v2447.f64[1];
              _Q7.f64[1] = v2237;
              *(_QWORD *)&_Q3.f64[0] = v2453.i64[1];
              __asm { FMLA            D7, D3, V0.D[1] }
              _Q3 = (float64x2_t)v2459;
              v620 = vmlaq_laneq_f64(vmlaq_n_f64(v2158, v610, _Q3.f64[0]), v611, _Q3, 1);
              v621 = vmlaq_laneq_f64(vmlaq_n_f64(v2187, v606, _Q3.f64[0]), v607, _Q3, 1);
              v622 = vmlaq_laneq_f64(vmlaq_n_f64(v584, v608, _Q3.f64[0]), _Q31, _Q3, 1);
              *(_QWORD *)&_Q3.f64[0] = v2459.i64[1];
              __asm { FMLA            D21, D3, V0.D[1] }
              _Q3 = (float64x2_t)v2465;
              v624 = vmlaq_laneq_f64(vmlaq_n_f64(v587, v610, _Q3.f64[0]), v611, _Q3, 1);
              v625 = vmlaq_laneq_f64(vmlaq_n_f64(v588, v606, _Q3.f64[0]), v607, _Q3, 1);
              v626 = vmlaq_laneq_f64(vmlaq_n_f64(v589, v608, _Q3.f64[0]), _Q31, _Q3, 1);
              *(_QWORD *)&_Q3.f64[0] = v2465.i64[1];
              __asm { FMLA            D26, D3, V0.D[1] }
              _Q3 = (float64x2_t)v2471;
              v628 = vmlaq_laneq_f64(vmlaq_n_f64(v2135, v610, _Q3.f64[0]), v611, _Q3, 1);
              v2216 = vmlaq_laneq_f64(vmlaq_n_f64(_Q9, v606, _Q3.f64[0]), v607, _Q3, 1);
              v629 = vmlaq_laneq_f64(vmlaq_n_f64(v593, v608, _Q3.f64[0]), _Q31, _Q3, 1);
              *(_QWORD *)&_Q3.f64[0] = v2471.i64[1];
              __asm { FMLA            D11, D3, V0.D[1] }
              _Q3 = (float64x2_t)v2477;
              v631 = vmlaq_laneq_f64(vmlaq_n_f64(v595, v610, _Q3.f64[0]), v611, _Q3, 1);
              v632 = vmlaq_laneq_f64(vmlaq_n_f64(v596, v606, _Q3.f64[0]), v607, _Q3, 1);
              v633 = vmlaq_laneq_f64(vmlaq_n_f64(v597, v608, _Q3.f64[0]), _Q31, _Q3, 1);
              *(_QWORD *)&_Q3.f64[0] = v2477.i64[1];
              __asm { FMLA            D15, D3, V0.D[1] }
              _Q3 = (float64x2_t)v2483;
              v2341 = vmlaq_laneq_f64(vmlaq_n_f64(v2340, v610, _Q3.f64[0]), v611, _Q3, 1);
              v2297 = vmlaq_laneq_f64(vmlaq_n_f64(v2296, v606, _Q3.f64[0]), v607, _Q3, 1);
              v2256 = vmlaq_laneq_f64(vmlaq_n_f64(v2255, v608, _Q3.f64[0]), _Q31, _Q3, 1);
              _Q9.f64[1] = v2123;
              *(_QWORD *)&_Q3.f64[0] = v2483.i64[1];
              __asm { FMLA            D9, D3, V0.D[1] }
              _Q3 = v2489;
              v2386 = vmlaq_laneq_f64(vmlaq_n_f64(v2385, v610, _Q3.f64[0]), v611, _Q3, 1);
              v636 = vmlaq_laneq_f64(vmlaq_n_f64(v602, v606, _Q3.f64[0]), v607, _Q3, 1);
              v637 = vmlaq_laneq_f64(vmlaq_n_f64(v603, v608, _Q3.f64[0]), _Q31, _Q3, 1);
              _Q3.f64[0] = v2489.f64[1];
              __asm { FMLA            D27, D3, V0.D[1] }
              v638 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2426[16], *(int64x2_t *)&v2430[16]);
              v639 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2426[16], *(int64x2_t *)&v2430[16]);
              v640 = (float64x2_t)vzip1q_s64(v2436, v2442);
              v641 = (float64x2_t)vzip2q_s64(v2436, v2442);
              v642 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2418[16], *(int64x2_t *)&v2422[16]);
              _Q2 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2418[16], *(int64x2_t *)&v2422[16]);
              _Q25 = (float64x2_t)v2454;
              v645 = vmlaq_laneq_f64(vmlaq_n_f64(v613, v642, _Q25.f64[0]), _Q2, _Q25, 1);
              v646 = vmlaq_laneq_f64(vmlaq_n_f64(v614, v638, _Q25.f64[0]), v639, _Q25, 1);
              v647 = vmlaq_laneq_f64(vmlaq_n_f64(v615, v640, _Q25.f64[0]), v641, _Q25, 1);
              _Q31.f64[1] = v2448.f64[1];
              *(_QWORD *)&_Q25.f64[0] = v2454.i64[1];
              __asm { FMLA            D7, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2460;
              v650 = vmlaq_laneq_f64(vmlaq_n_f64(v620, v642, _Q25.f64[0]), _Q2, _Q25, 1);
              v651 = vmlaq_laneq_f64(vmlaq_n_f64(v621, v638, _Q25.f64[0]), v639, _Q25, 1);
              v652 = vmlaq_laneq_f64(vmlaq_n_f64(v622, v640, _Q25.f64[0]), v641, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2460.i64[1];
              __asm { FMLA            D21, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2466;
              v654 = vmlaq_laneq_f64(vmlaq_n_f64(v624, v642, _Q25.f64[0]), _Q2, _Q25, 1);
              v655 = vmlaq_laneq_f64(vmlaq_n_f64(v625, v638, _Q25.f64[0]), v639, _Q25, 1);
              v656 = vmlaq_laneq_f64(vmlaq_n_f64(v626, v640, _Q25.f64[0]), v641, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2466.i64[1];
              __asm { FMLA            D26, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2472;
              v658 = vmlaq_laneq_f64(vmlaq_n_f64(v628, v642, _Q25.f64[0]), _Q2, _Q25, 1);
              v2217 = vmlaq_laneq_f64(vmlaq_n_f64(v2216, v638, _Q25.f64[0]), v639, _Q25, 1);
              v659 = vmlaq_laneq_f64(vmlaq_n_f64(v629, v640, _Q25.f64[0]), v641, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2472.i64[1];
              __asm { FMLA            D11, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2478;
              v661 = vmlaq_laneq_f64(vmlaq_n_f64(v631, v642, _Q25.f64[0]), _Q2, _Q25, 1);
              v662 = vmlaq_laneq_f64(vmlaq_n_f64(v632, v638, _Q25.f64[0]), v639, _Q25, 1);
              v663 = vmlaq_laneq_f64(vmlaq_n_f64(v633, v640, _Q25.f64[0]), v641, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2478.i64[1];
              __asm { FMLA            D15, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2484;
              v2342 = vmlaq_laneq_f64(vmlaq_n_f64(v2341, v642, _Q25.f64[0]), _Q2, _Q25, 1);
              v2298 = vmlaq_laneq_f64(vmlaq_n_f64(v2297, v638, _Q25.f64[0]), v639, _Q25, 1);
              v2257 = vmlaq_laneq_f64(vmlaq_n_f64(v2256, v640, _Q25.f64[0]), v641, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2484.i64[1];
              __asm { FMLA            D9, D25, V31.D[1] }
              v665 = v2490;
              v2387 = vmlaq_laneq_f64(vmlaq_n_f64(v2386, v642, v665.f64[0]), _Q2, v665, 1);
              v666 = vmlaq_laneq_f64(vmlaq_n_f64(v636, v638, v665.f64[0]), v639, v665, 1);
              v667 = vmlaq_laneq_f64(vmlaq_n_f64(v637, v640, v665.f64[0]), v641, v665, 1);
              _Q2.f64[0] = v2490.f64[1];
              __asm { FMLA            D27, D2, V31.D[1] }
              v668 = (float64x2_t)vzip1q_s64((int64x2_t)v2419, (int64x2_t)v2423);
              v669 = (float64x2_t)vzip2q_s64((int64x2_t)v2419, (int64x2_t)v2423);
              v670 = (float64x2_t)vzip1q_s64(v2427, v2431);
              v671 = (float64x2_t)vzip2q_s64(v2427, v2431);
              v672 = (float64x2_t)vzip1q_s64(v2437, v2443);
              _Q2 = (float64x2_t)vzip2q_s64(v2437, v2443);
              _Q25 = (float64x2_t)v2455;
              v675 = vmlaq_laneq_f64(vmlaq_n_f64(v645, v668, _Q25.f64[0]), v669, _Q25, 1);
              v676 = vmlaq_laneq_f64(vmlaq_n_f64(v646, v670, _Q25.f64[0]), v671, _Q25, 1);
              v677 = vmlaq_laneq_f64(vmlaq_n_f64(v647, v672, _Q25.f64[0]), _Q2, _Q25, 1);
              _Q31.f64[1] = v2449.f64[1];
              *(_QWORD *)&_Q25.f64[0] = v2455.i64[1];
              __asm { FMLA            D7, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2461;
              v680 = vmlaq_laneq_f64(vmlaq_n_f64(v650, v668, _Q25.f64[0]), v669, _Q25, 1);
              v681 = vmlaq_laneq_f64(vmlaq_n_f64(v651, v670, _Q25.f64[0]), v671, _Q25, 1);
              v682 = vmlaq_laneq_f64(vmlaq_n_f64(v652, v672, _Q25.f64[0]), _Q2, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2461.i64[1];
              __asm { FMLA            D21, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2467;
              v684 = vmlaq_laneq_f64(vmlaq_n_f64(v654, v668, _Q25.f64[0]), v669, _Q25, 1);
              v685 = vmlaq_laneq_f64(vmlaq_n_f64(v655, v670, _Q25.f64[0]), v671, _Q25, 1);
              v686 = vmlaq_laneq_f64(vmlaq_n_f64(v656, v672, _Q25.f64[0]), _Q2, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2467.i64[1];
              __asm { FMLA            D26, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2473;
              v688 = vmlaq_laneq_f64(vmlaq_n_f64(v658, v668, _Q25.f64[0]), v669, _Q25, 1);
              v2218 = vmlaq_laneq_f64(vmlaq_n_f64(v2217, v670, _Q25.f64[0]), v671, _Q25, 1);
              v689 = vmlaq_laneq_f64(vmlaq_n_f64(v659, v672, _Q25.f64[0]), _Q2, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2473.i64[1];
              __asm { FMLA            D11, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2479;
              v691 = vmlaq_laneq_f64(vmlaq_n_f64(v661, v668, _Q25.f64[0]), v669, _Q25, 1);
              v692 = vmlaq_laneq_f64(vmlaq_n_f64(v662, v670, _Q25.f64[0]), v671, _Q25, 1);
              v693 = vmlaq_laneq_f64(vmlaq_n_f64(v663, v672, _Q25.f64[0]), _Q2, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2479.i64[1];
              __asm { FMLA            D15, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2485;
              v2343 = vmlaq_laneq_f64(vmlaq_n_f64(v2342, v668, _Q25.f64[0]), v669, _Q25, 1);
              v2299 = vmlaq_laneq_f64(vmlaq_n_f64(v2298, v670, _Q25.f64[0]), v671, _Q25, 1);
              v2258 = vmlaq_laneq_f64(vmlaq_n_f64(v2257, v672, _Q25.f64[0]), _Q2, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2485.i64[1];
              __asm { FMLA            D9, D25, V31.D[1] }
              v695 = v2491;
              v2388 = vmlaq_laneq_f64(vmlaq_n_f64(v2387, v668, v695.f64[0]), v669, v695, 1);
              v696 = vmlaq_laneq_f64(vmlaq_n_f64(v666, v670, v695.f64[0]), v671, v695, 1);
              v697 = vmlaq_laneq_f64(vmlaq_n_f64(v667, v672, v695.f64[0]), _Q2, v695, 1);
              _Q2.f64[0] = v2491.f64[1];
              __asm { FMLA            D27, D2, V31.D[1] }
              v698 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2420, *(int64x2_t *)v2424);
              _Q0 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2420, *(int64x2_t *)v2424);
              v700 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2428, v2432);
              v701 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2428, v2432);
              v702 = (float64x2_t)vzip1q_s64(v2438, v2444);
              _Q2 = (float64x2_t)vzip2q_s64(v2438, v2444);
              _Q25 = (float64x2_t)v2456;
              v705 = vmlaq_laneq_f64(vmlaq_n_f64(v675, v698, _Q25.f64[0]), _Q0, _Q25, 1);
              v706 = vmlaq_laneq_f64(vmlaq_n_f64(v676, v700, _Q25.f64[0]), v701, _Q25, 1);
              v707 = vmlaq_laneq_f64(vmlaq_n_f64(v677, v702, _Q25.f64[0]), _Q2, _Q25, 1);
              _Q31.f64[1] = v2450.f64[1];
              *(_QWORD *)&_Q25.f64[0] = v2456.i64[1];
              __asm { FMLA            D7, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2462;
              v710 = vmlaq_laneq_f64(vmlaq_n_f64(v680, v698, _Q25.f64[0]), _Q0, _Q25, 1);
              v711 = vmlaq_laneq_f64(vmlaq_n_f64(v681, v700, _Q25.f64[0]), v701, _Q25, 1);
              v712 = vmlaq_laneq_f64(vmlaq_n_f64(v682, v702, _Q25.f64[0]), _Q2, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2462.i64[1];
              __asm { FMLA            D21, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2468;
              v714 = vmlaq_laneq_f64(vmlaq_n_f64(v684, v698, _Q25.f64[0]), _Q0, _Q25, 1);
              v715 = vmlaq_laneq_f64(vmlaq_n_f64(v685, v700, _Q25.f64[0]), v701, _Q25, 1);
              v716 = vmlaq_laneq_f64(vmlaq_n_f64(v686, v702, _Q25.f64[0]), _Q2, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2468.i64[1];
              __asm { FMLA            D26, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2474;
              v718 = vmlaq_laneq_f64(vmlaq_n_f64(v688, v698, _Q25.f64[0]), _Q0, _Q25, 1);
              v2219 = vmlaq_laneq_f64(vmlaq_n_f64(v2218, v700, _Q25.f64[0]), v701, _Q25, 1);
              v719 = vmlaq_laneq_f64(vmlaq_n_f64(v689, v702, _Q25.f64[0]), _Q2, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2474.i64[1];
              __asm { FMLA            D11, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2480;
              v721 = vmlaq_laneq_f64(vmlaq_n_f64(v691, v698, _Q25.f64[0]), _Q0, _Q25, 1);
              v722 = vmlaq_laneq_f64(vmlaq_n_f64(v692, v700, _Q25.f64[0]), v701, _Q25, 1);
              v723 = vmlaq_laneq_f64(vmlaq_n_f64(v693, v702, _Q25.f64[0]), _Q2, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2480.i64[1];
              __asm { FMLA            D15, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2486;
              v2344 = vmlaq_laneq_f64(vmlaq_n_f64(v2343, v698, _Q25.f64[0]), _Q0, _Q25, 1);
              v2300 = vmlaq_laneq_f64(vmlaq_n_f64(v2299, v700, _Q25.f64[0]), v701, _Q25, 1);
              v2259 = vmlaq_laneq_f64(vmlaq_n_f64(v2258, v702, _Q25.f64[0]), _Q2, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2486.i64[1];
              __asm { FMLA            D9, D25, V31.D[1] }
              v725 = v2492;
              v2389 = vmlaq_laneq_f64(vmlaq_n_f64(v2388, v698, v725.f64[0]), _Q0, v725, 1);
              v726 = vmlaq_laneq_f64(vmlaq_n_f64(v696, v700, v725.f64[0]), v701, v725, 1);
              v727 = vmlaq_laneq_f64(vmlaq_n_f64(v697, v702, v725.f64[0]), _Q2, v725, 1);
              _Q2.f64[0] = v2492.f64[1];
              __asm { FMLA            D27, D2, V31.D[1] }
              v728 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2420[16], *(int64x2_t *)&v2424[16]);
              v729 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2420[16], *(int64x2_t *)&v2424[16]);
              v730 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2428[16], v2433);
              v731 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2428[16], v2433);
              v732 = (float64x2_t)vzip1q_s64(v2439, (int64x2_t)v2445);
              v733 = (float64x2_t)vzip2q_s64(v2439, (int64x2_t)v2445);
              _Q25 = (float64x2_t)v2457;
              v2106 = vmlaq_laneq_f64(vmlaq_n_f64(v705, v728, _Q25.f64[0]), v729, _Q25, 1);
              v2136 = vmlaq_laneq_f64(vmlaq_n_f64(v706, v730, _Q25.f64[0]), v731, _Q25, 1);
              v735 = vmlaq_laneq_f64(vmlaq_n_f64(v707, v732, _Q25.f64[0]), v733, _Q25, 1);
              _Q31.f64[1] = v2451.f64[1];
              *(_QWORD *)&_Q25.f64[0] = v2457.i64[1];
              __asm { FMLA            D7, D25, V31.D[1] }
              _Q25 = (float64x2_t)v2463;
              v737 = vmlaq_laneq_f64(vmlaq_n_f64(v710, v728, _Q25.f64[0]), v729, _Q25, 1);
              v2188 = vmlaq_laneq_f64(vmlaq_n_f64(v711, v730, _Q25.f64[0]), v731, _Q25, 1);
              v738 = vmlaq_laneq_f64(vmlaq_n_f64(v712, v732, _Q25.f64[0]), v733, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2463.i64[1];
              __asm { FMLA            D21, D25, V31.D[1] }
              v739 = _Q21;
              _Q25 = (float64x2_t)v2469;
              v2159 = vmlaq_laneq_f64(vmlaq_n_f64(v714, v728, _Q25.f64[0]), v729, _Q25, 1);
              v741 = vmlaq_laneq_f64(vmlaq_n_f64(v715, v730, _Q25.f64[0]), v731, _Q25, 1);
              v742 = vmlaq_laneq_f64(vmlaq_n_f64(v716, v732, _Q25.f64[0]), v733, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2469.i64[1];
              __asm { FMLA            D26, D25, V31.D[1] }
              v743 = _Q26;
              _Q25 = (float64x2_t)v2475;
              v745 = vmlaq_laneq_f64(vmlaq_n_f64(v718, v728, _Q25.f64[0]), v729, _Q25, 1);
              v746 = vmlaq_laneq_f64(vmlaq_n_f64(v2219, v730, _Q25.f64[0]), v731, _Q25, 1);
              v747 = vmlaq_laneq_f64(vmlaq_n_f64(v719, v732, _Q25.f64[0]), v733, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2475.i64[1];
              __asm { FMLA            D11, D25, V31.D[1] }
              _Q8 = _Q11;
              _Q25 = (float64x2_t)v2481;
              v749 = vmlaq_laneq_f64(vmlaq_n_f64(v721, v728, _Q25.f64[0]), v729, _Q25, 1);
              v750 = vmlaq_laneq_f64(vmlaq_n_f64(v722, v730, _Q25.f64[0]), v731, _Q25, 1);
              v751 = vmlaq_laneq_f64(vmlaq_n_f64(v723, v732, _Q25.f64[0]), v733, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2481.i64[1];
              __asm { FMLA            D15, D25, V31.D[1] }
              v752 = _Q15;
              _Q25 = (float64x2_t)v2487;
              v754 = vmlaq_laneq_f64(vmlaq_n_f64(v2344, v728, _Q25.f64[0]), v729, _Q25, 1);
              v755 = vmlaq_laneq_f64(vmlaq_n_f64(v2300, v730, _Q25.f64[0]), v731, _Q25, 1);
              v756 = vmlaq_laneq_f64(vmlaq_n_f64(v2259, v732, _Q25.f64[0]), v733, _Q25, 1);
              *(_QWORD *)&_Q25.f64[0] = v2487.i64[1];
              __asm { FMLA            D9, D25, V31.D[1] }
              v757 = v2493;
              v2390 = vmlaq_laneq_f64(vmlaq_n_f64(v2389, v728, v757.f64[0]), v729, v757, 1);
              v758 = vmlaq_laneq_f64(vmlaq_n_f64(v726, v730, v757.f64[0]), v731, v757, 1);
              _Q0.f64[0] = v2493.f64[1];
              __asm { FMLA            D27, D0, V31.D[1] }
              v759 = vaddq_f64(*(float64x2_t *)(v571 + 32), v735);
              v760 = vaddq_f64(*(float64x2_t *)(v571 + 16), v2136);
              *(float64x2_t *)v571 = vaddq_f64(*(float64x2_t *)v571, v2106);
              *(float64x2_t *)(v571 + 16) = v760;
              *(float64x2_t *)(v571 + 32) = v759;
              v760.f64[0] = *(float64_t *)(v571 + 48);
              *(_QWORD *)(v571 + 48) = *(_OWORD *)&vaddq_f64(v760, _Q7);
              *(float64x2_t *)(v571 + 56) = vaddq_f64(*(float64x2_t *)(v571 + 56), v737);
              *(float64x2_t *)(v571 + 88) = vaddq_f64(*(float64x2_t *)(v571 + 88), v738);
              v759.f64[1] = v2159.f64[1];
              v761 = vaddq_f64(*(float64x2_t *)(v571 + 72), v2188);
              *(float64x2_t *)(v571 + 72) = v761;
              v761.f64[0] = *(float64_t *)(v571 + 104);
              *(_QWORD *)(v571 + 104) = *(_OWORD *)&vaddq_f64(v761, v739);
              v762 = *(float64x2_t *)(v571 + 128);
              v763 = vaddq_f64(*(float64x2_t *)(v571 + 144), v742);
              *(float64x2_t *)(v571 + 144) = v763;
              v763.f64[0] = *(float64_t *)(v571 + 160);
              *(_QWORD *)&v763.f64[0] = *(_OWORD *)&vaddq_f64(v763, v743);
              v764 = vaddq_f64(v762, v741);
              v759.f64[0] = *(float64_t *)(v571 + 216);
              v765 = vaddq_f64(*(float64x2_t *)(v571 + 184), v746);
              v766 = vaddq_f64(*(float64x2_t *)(v571 + 200), v747);
              v767 = vaddq_f64(*(float64x2_t *)(v571 + 168), v745);
              v735.f64[0] = *(float64_t *)(v571 + 272);
              v768 = vaddq_f64(*(float64x2_t *)(v571 + 240), v750);
              v769 = vaddq_f64(*(float64x2_t *)(v571 + 256), v751);
              v770 = vaddq_f64(*(float64x2_t *)(v571 + 224), v749);
              v743.f64[0] = *(float64_t *)(v571 + 328);
              *(_QWORD *)&v729.f64[0] = *(_OWORD *)&vaddq_f64(v743, _Q9);
              v771 = vaddq_f64(*(float64x2_t *)(v571 + 296), v755);
              v772 = vaddq_f64(*(float64x2_t *)(v571 + 312), v756);
              v773 = vaddq_f64(*(float64x2_t *)(v571 + 280), v754);
              v749.f64[0] = *(float64_t *)(v571 + 384);
              v774 = vaddq_f64(*(float64x2_t *)(v571 + 352), v758);
              v775 = vaddq_f64(*(float64x2_t *)(v571 + 368), vmlaq_laneq_f64(vmlaq_n_f64(v727, v732, v757.f64[0]), v733, v757, 1));
              *(float64x2_t *)(v571 + 112) = vaddq_f64(*(float64x2_t *)(v571 + 112), v2159);
              *(float64x2_t *)(v571 + 128) = v764;
              *(float64_t *)(v571 + 160) = v763.f64[0];
              *(float64x2_t *)(v571 + 168) = v767;
              *(float64x2_t *)(v571 + 200) = v766;
              *(float64x2_t *)(v571 + 184) = v765;
              *(_QWORD *)(v571 + 216) = *(_OWORD *)&vaddq_f64(v759, _Q8);
              *(float64x2_t *)(v571 + 240) = v768;
              *(float64x2_t *)(v571 + 256) = v769;
              *(float64x2_t *)(v571 + 224) = v770;
              *(_QWORD *)(v571 + 272) = *(_OWORD *)&vaddq_f64(v735, v752);
              *(float64x2_t *)(v571 + 296) = v771;
              *(float64x2_t *)(v571 + 312) = v772;
              *(float64x2_t *)(v571 + 280) = v773;
              *(float64_t *)(v571 + 328) = v729.f64[0];
              *(float64x2_t *)(v571 + 352) = v774;
              *(float64x2_t *)(v571 + 368) = v775;
              *(float64x2_t *)(v571 + 336) = vaddq_f64(*(float64x2_t *)(v571 + 336), v2390);
              *(_QWORD *)(v571 + 384) = *(_OWORD *)&vaddq_f64(v749, _Q27);
LABEL_64:
              v776 = *(float64x2_t *)(v21 + 16);
              _V21.D[1] = v2446.f64[1];
              _Q19 = vmulq_f64(v2446, *(float64x2_t *)v21);
              _D23 = *(_QWORD *)(v21 + 8);
              __asm { FMLA            D19, D23, V21.D[1] }
              _V2.D[1] = v2447.f64[1];
              _D17 = *(_QWORD *)(v21 + 24);
              __asm { FMLA            D19, D17, V2.D[1] }
              _Q2 = *(float64x2_t *)(v21 + 32);
              v783 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)__src, (int64x2_t)v2421), *(double *)v21), (float64x2_t)vzip2q_s64((int64x2_t)__src, (int64x2_t)v2421), *(float64x2_t *)v21, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)v2418, *(int64x2_t *)v2422), v776.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v2418, *(int64x2_t *)v2422), v776, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2418[16], *(int64x2_t *)&v2422[16]), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2418[16], *(int64x2_t *)&v2422[16]), _Q2, 1);
              v784 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v2425, v2429), *(double *)v21), (float64x2_t)vzip2q_s64(v2425, v2429), *(float64x2_t *)v21, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)v2426, *(int64x2_t *)v2430), v776.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v2426, *(int64x2_t *)v2430), v776, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2426[16], *(int64x2_t *)&v2430[16]), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2426[16], *(int64x2_t *)&v2430[16]), _Q2, 1);
              v785 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v2434, v2440), *(double *)v21), (float64x2_t)vzip2q_s64(v2434, v2440), *(float64x2_t *)v21, 1), (float64x2_t)vzip1q_s64(v2435, v2441), v776.f64[0]), (float64x2_t)vzip2q_s64(v2435, v2441), v776, 1), (float64x2_t)vzip1q_s64(v2436, v2442), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2436, v2442), _Q2, 1);
              _V6.D[1] = v2448.f64[1];
              _Q2.f64[0] = *(float64_t *)(v21 + 40);
              __asm { FMLA            D19, D2, V6.D[1] }
              _Q2 = *(float64x2_t *)(v21 + 48);
              v788 = vmlaq_laneq_f64(vmlaq_n_f64(v783, (float64x2_t)vzip1q_s64((int64x2_t)v2419, (int64x2_t)v2423), _Q2.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v2419, (int64x2_t)v2423), _Q2, 1);
              v789 = vmlaq_laneq_f64(vmlaq_n_f64(v784, (float64x2_t)vzip1q_s64(v2427, v2431), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2427, v2431), _Q2, 1);
              _Q5.n128_u64[1] = *(_QWORD *)&v2449.f64[1];
              v790 = vmlaq_laneq_f64(vmlaq_n_f64(v785, (float64x2_t)vzip1q_s64(v2437, v2443), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2437, v2443), _Q2, 1);
              _Q2.f64[0] = *(float64_t *)(v21 + 56);
              __asm { FMLA            D19, D2, V5.D[1] }
              _Q2 = *(float64x2_t *)(v21 + 64);
              v792 = vmlaq_laneq_f64(vmlaq_n_f64(v788, (float64x2_t)vzip1q_s64(*(int64x2_t *)v2420, *(int64x2_t *)v2424), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v2420, *(int64x2_t *)v2424), _Q2, 1);
              v793 = vmlaq_laneq_f64(vmlaq_n_f64(v789, (float64x2_t)vzip1q_s64(*(int64x2_t *)v2428, v2432), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v2428, v2432), _Q2, 1);
              v794 = vmlaq_laneq_f64(vmlaq_n_f64(v790, (float64x2_t)vzip1q_s64(v2438, v2444), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2438, v2444), _Q2, 1);
              _V4.D[1] = v2450.f64[1];
              _Q2.f64[0] = *(float64_t *)(v21 + 72);
              __asm { FMLA            D19, D2, V4.D[1] }
              _Q2 = *(float64x2_t *)(v21 + 80);
              v796 = vmlaq_laneq_f64(vmlaq_n_f64(v792, (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2420[16], *(int64x2_t *)&v2424[16]), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2420[16], *(int64x2_t *)&v2424[16]), _Q2, 1);
              _Q5.n128_u64[0] = v2439.i64[0];
              _Q6 = v2445;
              v797 = vmlaq_laneq_f64(vmlaq_n_f64(v793, (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2428[16], v2433), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2428[16], v2433), _Q2, 1);
              _Q3 = vmlaq_laneq_f64(vmlaq_n_f64(v794, (float64x2_t)vzip1q_s64(v2439, (int64x2_t)v2445), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2439, (int64x2_t)v2445), _Q2, 1);
              _V4.D[1] = v2451.f64[1];
              _Q2.f64[0] = *(float64_t *)(v21 + 88);
              __asm { FMLA            D19, D2, V4.D[1] }
              v799 = *(_QWORD *)v2416 + 8 * (*(_DWORD *)(v2416 + 32) - v19 + 8 * v19);
              _Q2.f64[0] = *(float64_t *)(v799 + 48);
              *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q19);
              _Q1 = vsubq_f64(*(float64x2_t *)(v799 + 16), v797);
              _Q4 = *(float64x2_t *)v799;
              *(float64x2_t *)v799 = vsubq_f64(*(float64x2_t *)v799, v796);
              *(float64x2_t *)(v799 + 16) = _Q1;
              _Q0 = vsubq_f64(*(float64x2_t *)(v799 + 32), _Q3);
              *(float64x2_t *)(v799 + 32) = _Q0;
              *(float64_t *)(v799 + 48) = _Q2.f64[0];
LABEL_65:
              v9 = a1;
              v11 = v2040;
              if (v17)
              {
                v800 = *(float64x2_t *)(v21 + 16);
                _V21.D[1] = v2488.f64[1];
                _Q19 = vmulq_f64(v2488, *(float64x2_t *)v21);
                _D23 = *(_QWORD *)(v21 + 8);
                __asm { FMLA            D19, D23, V21.D[1] }
                _V2.D[1] = v2489.f64[1];
                _D17 = *(_QWORD *)(v21 + 24);
                __asm { FMLA            D19, D17, V2.D[1] }
                _Q2 = *(float64x2_t *)(v21 + 32);
                v807 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v2452, (int64x2_t)v2458), *(double *)v21), (float64x2_t)vzip2q_s64((int64x2_t)v2452, (int64x2_t)v2458), *(float64x2_t *)v21, 1), (float64x2_t)vzip1q_s64(v2453, v2459), v800.f64[0]), (float64x2_t)vzip2q_s64(v2453, v2459), v800, 1), (float64x2_t)vzip1q_s64(v2454, v2460), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2454, v2460), _Q2,
                         1);
                v808 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v2464, (int64x2_t)v2470), *(double *)v21), (float64x2_t)vzip2q_s64((int64x2_t)v2464, (int64x2_t)v2470), *(float64x2_t *)v21, 1), (float64x2_t)vzip1q_s64(v2465, v2471), v800.f64[0]), (float64x2_t)vzip2q_s64(v2465, v2471), v800, 1), (float64x2_t)vzip1q_s64(v2466, v2472), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2466, v2472), _Q2,
                         1);
                v809 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v2476, (int64x2_t)v2482), *(double *)v21), (float64x2_t)vzip2q_s64((int64x2_t)v2476, (int64x2_t)v2482), *(float64x2_t *)v21, 1), (float64x2_t)vzip1q_s64(v2477, v2483), v800.f64[0]), (float64x2_t)vzip2q_s64(v2477, v2483), v800, 1), (float64x2_t)vzip1q_s64(v2478, v2484), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2478, v2484), _Q2,
                         1);
                _V6.D[1] = v2490.f64[1];
                _Q2.f64[0] = *(float64_t *)(v21 + 40);
                __asm { FMLA            D19, D2, V6.D[1] }
                _Q2 = *(float64x2_t *)(v21 + 48);
                v812 = vmlaq_laneq_f64(vmlaq_n_f64(v807, (float64x2_t)vzip1q_s64(v2455, v2461), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2455, v2461), _Q2, 1);
                v813 = vmlaq_laneq_f64(vmlaq_n_f64(v808, (float64x2_t)vzip1q_s64(v2467, v2473), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2467, v2473), _Q2, 1);
                _V5.D[1] = v2491.f64[1];
                v815 = vmlaq_laneq_f64(vmlaq_n_f64(v809, (float64x2_t)vzip1q_s64(v2479, v2485), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2479, v2485), _Q2, 1);
                _Q2.f64[0] = *(float64_t *)(v21 + 56);
                __asm { FMLA            D19, D2, V5.D[1] }
                _Q2 = *(float64x2_t *)(v21 + 64);
                v817 = vmlaq_laneq_f64(vmlaq_n_f64(v812, (float64x2_t)vzip1q_s64(v2456, v2462), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2456, v2462), _Q2, 1);
                v818 = vmlaq_laneq_f64(vmlaq_n_f64(v813, (float64x2_t)vzip1q_s64(v2468, v2474), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2468, v2474), _Q2, 1);
                v819 = vmlaq_laneq_f64(vmlaq_n_f64(v815, (float64x2_t)vzip1q_s64(v2480, v2486), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2480, v2486), _Q2, 1);
                _V4.D[1] = v2492.f64[1];
                _Q2.f64[0] = *(float64_t *)(v21 + 72);
                __asm { FMLA            D19, D2, V4.D[1] }
                _Q2 = *(float64x2_t *)(v21 + 80);
                v821 = vmlaq_laneq_f64(vmlaq_n_f64(v817, (float64x2_t)vzip1q_s64(v2457, v2463), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2457, v2463), _Q2, 1);
                _Q5 = (__n128)v2481;
                _Q6 = (__n128)v2487;
                v822 = vmlaq_laneq_f64(vmlaq_n_f64(v818, (float64x2_t)vzip1q_s64(v2469, v2475), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2469, v2475), _Q2, 1);
                _Q3 = vmlaq_laneq_f64(vmlaq_n_f64(v819, (float64x2_t)vzip1q_s64((int64x2_t)_Q5, (int64x2_t)_Q6), _Q2.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q5, (int64x2_t)_Q6), _Q2, 1);
                _V4.D[1] = v2493.f64[1];
                _Q2.f64[0] = *(float64_t *)(v21 + 88);
                __asm { FMLA            D19, D2, V4.D[1] }
                v824 = *(_QWORD *)v2416 + 8 * (*(_DWORD *)(v2416 + 32) - v20 + 8 * v20);
                _Q2.f64[0] = *(float64_t *)(v824 + 48);
                *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q19);
                _Q1 = vsubq_f64(*(float64x2_t *)(v824 + 16), v822);
                _Q4 = *(float64x2_t *)v824;
                *(float64x2_t *)v824 = vsubq_f64(*(float64x2_t *)v824, v821);
                *(float64x2_t *)(v824 + 16) = _Q1;
                _Q0 = vsubq_f64(*(float64x2_t *)(v824 + 32), _Q3);
                *(float64x2_t *)(v824 + 32) = _Q0;
                *(float64_t *)(v824 + 48) = _Q2.f64[0];
              }
              goto LABEL_3;
            }
            v569 = v570;
          }
LABEL_62:
          v571 = sub_239CCA368(v567, (char **)v568, v19, v569);
          goto LABEL_63;
        }
        v402 = v403;
      }
LABEL_51:
      v404 = sub_239CCA368(v400, (char **)v401, v19, v402);
      goto LABEL_52;
    }
    if (!v16 || v19 < v20)
    {
LABEL_32:
      v212 = *(unint64_t **)(v2416 + 40);
      v213 = v212[11] + 24 * v20;
      v215 = *(char **)v213;
      v214 = *(char **)(v213 + 8);
      if (*(char **)v213 != v214)
      {
        while (*(_DWORD *)v215 < v20)
        {
          v215 += 16;
          if (v215 == v214)
            goto LABEL_40;
        }
      }
      if (v215 != v214)
      {
        if (*(_DWORD *)v215 == v20)
        {
          v216 = v212[2] + 8 * *((_QWORD *)v215 + 1);
LABEL_41:
          _Q9 = (float64x2_t)vzip1q_s64((int64x2_t)v2452, (int64x2_t)v2458);
          v218 = (float64x2_t)vzip2q_s64((int64x2_t)v2452, (int64x2_t)v2458);
          v219 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2452.f64[0]), v218, v2452, 1);
          v220 = (float64x2_t)v2465;
          v221 = (float64x2_t)v2471;
          v222 = (float64x2_t)vzip1q_s64((int64x2_t)v2464, (int64x2_t)v2470);
          v223 = (float64x2_t)vzip2q_s64((int64x2_t)v2464, (int64x2_t)v2470);
          v224 = (float64x2_t)vzip1q_s64((int64x2_t)v2476, (int64x2_t)v2482);
          v225 = (float64x2_t)vzip2q_s64((int64x2_t)v2476, (int64x2_t)v2482);
          v226 = vmlaq_laneq_f64(vmulq_n_f64(v224, v2452.f64[0]), v225, v2452, 1);
          _Q26 = v2488;
          _Q7 = vmulq_f64(v2488, v2452);
          _D4 = v2452.f64[1];
          __asm { FMLA            D7, D4, V26.D[1] }
          _Q16 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2458.f64[0]), v218, v2458, 1);
          v231 = vmlaq_laneq_f64(vmulq_n_f64(v222, v2458.f64[0]), v223, v2458, 1);
          v232 = vmlaq_laneq_f64(vmulq_n_f64(v224, v2458.f64[0]), v225, v2458, 1);
          _Q14 = vmulq_f64(v2488, v2458);
          _D3 = v2458.f64[1];
          __asm { FMLA            D14, D3, V26.D[1] }
          v235 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2464.f64[0]), v218, v2464, 1);
          v236 = vmlaq_laneq_f64(vmulq_n_f64(v222, v2464.f64[0]), v223, v2464, 1);
          _Q25 = vmulq_f64(v2488, v2464);
          _D2 = v2464.f64[1];
          __asm { FMLA            D25, D2, V26.D[1] }
          v2056 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2470.f64[0]), v218, v2470, 1);
          v2065 = vmlaq_laneq_f64(vmulq_n_f64(v224, v2464.f64[0]), v225, v2464, 1);
          v239 = vmlaq_laneq_f64(vmulq_n_f64(v222, v2470.f64[0]), v223, v2470, 1);
          v2052 = vmlaq_laneq_f64(vmulq_n_f64(v224, v2470.f64[0]), v225, v2470, 1);
          _Q2 = vmulq_f64(v2488, v2470);
          _D1 = v2470.f64[1];
          __asm { FMLA            D2, D1, V26.D[1] }
          v242 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2476.f64[0]), v218, v2476, 1);
          v2244 = vmlaq_laneq_f64(vmulq_n_f64(v222, v2476.f64[0]), v223, v2476, 1);
          v2210 = vmlaq_laneq_f64(vmulq_n_f64(v224, v2476.f64[0]), v225, v2476, 1);
          _Q1 = vmulq_f64(v2488, v2476);
          _D0 = v2476.f64[1];
          __asm { FMLA            D1, D0, V26.D[1] }
          v2048 = _Q1.f64[1];
          v2050 = _Q2.f64[1];
          v2373 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2482.f64[0]), v218, v2482, 1);
          v2328 = vmlaq_laneq_f64(vmulq_n_f64(v222, v2482.f64[0]), v223, v2482, 1);
          v2176 = vmlaq_laneq_f64(vmulq_n_f64(v224, v2482.f64[0]), v225, v2482, 1);
          _Q1 = vmulq_f64(v2488, v2482);
          _D0 = v2482.f64[1];
          __asm { FMLA            D1, D0, V26.D[1] }
          v2284 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2488.f64[0]), v218, v2488, 1);
          v247 = vmlaq_laneq_f64(vmulq_n_f64(v222, v2488.f64[0]), v223, v2488, 1);
          v248 = vmlaq_laneq_f64(vmulq_n_f64(v224, v2488.f64[0]), v225, v2488, 1);
          _Q19 = vmulq_f64(_Q26, _Q26);
          _D31 = v2488.f64[1];
          __asm { FMLA            D19, D31, V26.D[1] }
          _Q26 = (float64x2_t)v2453;
          v252 = (float64x2_t)v2459;
          v253 = (float64x2_t)vzip1q_s64(v2453, v2459);
          v254 = vmlaq_n_f64(v219, v253, *(double *)v2453.i64);
          v255 = (float64x2_t)vzip2q_s64(v2453, v2459);
          v2128 = vmlaq_laneq_f64(v254, v255, (float64x2_t)v2453, 1);
          v2172 = _Q1.f64[1];
          v256 = (float64x2_t)vzip1q_s64(v2465, v2471);
          v257 = (float64x2_t)vzip2q_s64(v2465, v2471);
          v2098 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, v2452.f64[0]), v223, v2452, 1), v256, _Q26.f64[0]), v257, _Q26, 1);
          v2042 = (float64x2_t)v2483;
          v258 = (float64x2_t)v2477;
          v259 = (float64x2_t)vzip1q_s64(v2477, v2483);
          _Q2 = (float64x2_t)vzip2q_s64(v2477, v2483);
          v2077 = vmlaq_laneq_f64(vmlaq_n_f64(v226, v259, _Q26.f64[0]), _Q2, _Q26, 1);
          _Q0 = v2489;
          _Q20.f64[1] = _Q7.f64[1];
          *(_QWORD *)&_Q26.f64[0] = v2453.i64[1];
          __asm { FMLA            D20, D26, V0.D[1] }
          v264 = vmlaq_laneq_f64(vmlaq_n_f64(_Q16, v253, v252.f64[0]), v255, v252, 1);
          v265 = vmlaq_laneq_f64(vmlaq_n_f64(v231, v256, v252.f64[0]), v257, v252, 1);
          v266 = vmlaq_laneq_f64(vmlaq_n_f64(v232, v259, v252.f64[0]), _Q2, v252, 1);
          *(_QWORD *)&_Q26.f64[0] = v2459.i64[1];
          __asm { FMLA            D14, D26, V0.D[1] }
          v267 = vmlaq_laneq_f64(vmlaq_n_f64(v235, v253, v220.f64[0]), v255, v220, 1);
          v268 = vmlaq_laneq_f64(vmlaq_n_f64(v236, v256, v220.f64[0]), v257, v220, 1);
          v269 = vmlaq_laneq_f64(vmlaq_n_f64(v2065, v259, *(double *)v2465.i64), _Q2, (float64x2_t)v2465, 1);
          *(_QWORD *)&_Q26.f64[0] = v2465.i64[1];
          __asm { FMLA            D25, D26, V0.D[1] }
          v270 = vmlaq_laneq_f64(vmlaq_n_f64(v2056, v253, v221.f64[0]), v255, v221, 1);
          v271 = vmlaq_laneq_f64(vmlaq_n_f64(v239, v256, v221.f64[0]), v257, v221, 1);
          _Q11.f64[1] = v2050;
          v273 = vmlaq_laneq_f64(vmlaq_n_f64(v2052, v259, *(double *)v2471.i64), _Q2, (float64x2_t)v2471, 1);
          *(_QWORD *)&_Q26.f64[0] = v2471.i64[1];
          __asm { FMLA            D11, D26, V0.D[1] }
          v275 = vmlaq_laneq_f64(vmlaq_n_f64(v242, v253, v258.f64[0]), v255, v258, 1);
          v2245 = vmlaq_laneq_f64(vmlaq_n_f64(v2244, v256, v258.f64[0]), v257, v258, 1);
          v2211 = vmlaq_laneq_f64(vmlaq_n_f64(v2210, v259, v258.f64[0]), _Q2, v258, 1);
          _Q9.f64[1] = v2048;
          *(_QWORD *)&_Q26.f64[0] = v2477.i64[1];
          __asm { FMLA            D9, D26, V0.D[1] }
          v2374 = vmlaq_laneq_f64(vmlaq_n_f64(v2373, v253, v2042.f64[0]), v255, v2042, 1);
          v2329 = vmlaq_laneq_f64(vmlaq_n_f64(v2328, v256, v2042.f64[0]), v257, v2042, 1);
          v2177 = vmlaq_laneq_f64(vmlaq_n_f64(v2176, v259, v2042.f64[0]), _Q2, v2042, 1);
          *(_QWORD *)&_Q26.f64[0] = v2483.i64[1];
          __asm { FMLA            D16, D26, V0.D[1] }
          v2285 = vmlaq_laneq_f64(vmlaq_n_f64(v2284, v253, _Q0.f64[0]), v255, _Q0, 1);
          v276 = vmlaq_laneq_f64(vmlaq_n_f64(v247, v256, _Q0.f64[0]), v257, _Q0, 1);
          _Q3 = (float64x2_t)v2454;
          v278 = vmlaq_n_f64(v248, v259, v2489.f64[0]);
          _Q1 = (float64x2_t)v2460;
          v280 = vmlaq_laneq_f64(v278, _Q2, v2489, 1);
          _Q2.f64[0] = v2489.f64[1];
          __asm { FMLA            D19, D2, V0.D[1] }
          v281 = (float64x2_t)vzip1q_s64(v2454, v2460);
          v282 = (float64x2_t)vzip2q_s64(v2454, v2460);
          v2129 = vmlaq_laneq_f64(vmlaq_n_f64(v2128, v281, _Q3.f64[0]), v282, _Q3, 1);
          v283 = (float64x2_t)v2466;
          v284 = (float64x2_t)v2472;
          v285 = (float64x2_t)vzip1q_s64(v2466, v2472);
          v286 = (float64x2_t)vzip2q_s64(v2466, v2472);
          v2099 = vmlaq_laneq_f64(vmlaq_n_f64(v2098, v285, _Q3.f64[0]), v286, _Q3, 1);
          v287 = (float64x2_t)v2478;
          v288 = (float64x2_t)v2484;
          v289 = (float64x2_t)vzip1q_s64(v2478, v2484);
          v290 = (float64x2_t)vzip2q_s64(v2478, v2484);
          v291 = vmlaq_laneq_f64(vmlaq_n_f64(v2077, v289, _Q3.f64[0]), v290, _Q3, 1);
          _Q0 = v2490;
          *(_QWORD *)&_Q3.f64[0] = v2454.i64[1];
          __asm { FMLA            D20, D3, V0.D[1] }
          v294 = vmlaq_laneq_f64(vmlaq_n_f64(v264, v281, _Q1.f64[0]), v282, _Q1, 1);
          v295 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v285, _Q1.f64[0]), v286, _Q1, 1);
          v296 = vmlaq_laneq_f64(vmlaq_n_f64(v266, v289, _Q1.f64[0]), v290, _Q1, 1);
          *(_QWORD *)&_Q1.f64[0] = v2460.i64[1];
          __asm { FMLA            D14, D1, V0.D[1] }
          v297 = vmlaq_laneq_f64(vmlaq_n_f64(v267, v281, v283.f64[0]), v282, v283, 1);
          v298 = vmlaq_laneq_f64(vmlaq_n_f64(v268, v285, v283.f64[0]), v286, v283, 1);
          v299 = vmlaq_laneq_f64(vmlaq_n_f64(v269, v289, v283.f64[0]), v290, v283, 1);
          *(_QWORD *)&_Q1.f64[0] = v2466.i64[1];
          __asm { FMLA            D25, D1, V0.D[1] }
          v300 = vmlaq_laneq_f64(vmlaq_n_f64(v270, v281, v284.f64[0]), v282, v284, 1);
          v301 = vmlaq_laneq_f64(vmlaq_n_f64(v271, v285, v284.f64[0]), v286, v284, 1);
          v302 = vmlaq_laneq_f64(vmlaq_n_f64(v273, v289, v284.f64[0]), v290, v284, 1);
          *(_QWORD *)&_Q1.f64[0] = v2472.i64[1];
          __asm { FMLA            D11, D1, V0.D[1] }
          v304 = vmlaq_laneq_f64(vmlaq_n_f64(v275, v281, v287.f64[0]), v282, v287, 1);
          v2246 = vmlaq_laneq_f64(vmlaq_n_f64(v2245, v285, v287.f64[0]), v286, v287, 1);
          v2212 = vmlaq_laneq_f64(vmlaq_n_f64(v2211, v289, v287.f64[0]), v290, v287, 1);
          *(_QWORD *)&_Q1.f64[0] = v2478.i64[1];
          __asm { FMLA            D9, D1, V0.D[1] }
          v2375 = vmlaq_laneq_f64(vmlaq_n_f64(v2374, v281, v288.f64[0]), v282, v288, 1);
          v2330 = vmlaq_laneq_f64(vmlaq_n_f64(v2329, v285, v288.f64[0]), v286, v288, 1);
          v2178 = vmlaq_laneq_f64(vmlaq_n_f64(v2177, v289, v288.f64[0]), v290, v288, 1);
          *(_QWORD *)&_Q1.f64[0] = v2484.i64[1];
          __asm { FMLA            D3, D1, V0.D[1] }
          v2286 = vmlaq_laneq_f64(vmlaq_n_f64(v2285, v281, _Q0.f64[0]), v282, _Q0, 1);
          v305 = vmlaq_laneq_f64(vmlaq_n_f64(v276, v285, _Q0.f64[0]), v286, _Q0, 1);
          _Q1 = (float64x2_t)v2455;
          _Q2 = (float64x2_t)v2461;
          v308 = vmlaq_laneq_f64(vmlaq_n_f64(v280, v289, _Q0.f64[0]), v290, _Q0, 1);
          _Q3.f64[0] = v2490.f64[1];
          __asm { FMLA            D19, D3, V0.D[1] }
          v309 = (float64x2_t)vzip1q_s64(v2455, v2461);
          v310 = (float64x2_t)vzip2q_s64(v2455, v2461);
          v2130 = vmlaq_laneq_f64(vmlaq_n_f64(v2129, v309, _Q1.f64[0]), v310, _Q1, 1);
          v311 = (float64x2_t)v2467;
          v312 = (float64x2_t)v2473;
          v313 = (float64x2_t)vzip1q_s64(v2467, v2473);
          v314 = (float64x2_t)vzip2q_s64(v2467, v2473);
          v2100 = vmlaq_laneq_f64(vmlaq_n_f64(v2099, v313, _Q1.f64[0]), v314, _Q1, 1);
          v315 = (float64x2_t)v2479;
          v316 = (float64x2_t)v2485;
          v317 = (float64x2_t)vzip1q_s64(v2479, v2485);
          v318 = (float64x2_t)vzip2q_s64(v2479, v2485);
          v319 = vmlaq_laneq_f64(vmlaq_n_f64(v291, v317, _Q1.f64[0]), v318, _Q1, 1);
          _Q31 = v2491;
          *(_QWORD *)&_Q1.f64[0] = v2455.i64[1];
          __asm { FMLA            D20, D1, V31.D[1] }
          v322 = vmlaq_laneq_f64(vmlaq_n_f64(v294, v309, _Q2.f64[0]), v310, _Q2, 1);
          v323 = vmlaq_laneq_f64(vmlaq_n_f64(v295, v313, _Q2.f64[0]), v314, _Q2, 1);
          v324 = vmlaq_laneq_f64(vmlaq_n_f64(v296, v317, _Q2.f64[0]), v318, _Q2, 1);
          *(_QWORD *)&_Q1.f64[0] = v2461.i64[1];
          __asm { FMLA            D14, D1, V31.D[1] }
          v325 = vmlaq_laneq_f64(vmlaq_n_f64(v297, v309, v311.f64[0]), v310, v311, 1);
          v326 = vmlaq_laneq_f64(vmlaq_n_f64(v298, v313, v311.f64[0]), v314, v311, 1);
          v327 = vmlaq_laneq_f64(vmlaq_n_f64(v299, v317, v311.f64[0]), v318, v311, 1);
          *(_QWORD *)&_Q1.f64[0] = v2467.i64[1];
          __asm { FMLA            D25, D1, V31.D[1] }
          v328 = vmlaq_laneq_f64(vmlaq_n_f64(v300, v309, v312.f64[0]), v310, v312, 1);
          v329 = vmlaq_laneq_f64(vmlaq_n_f64(v301, v313, v312.f64[0]), v314, v312, 1);
          v330 = vmlaq_laneq_f64(vmlaq_n_f64(v302, v317, v312.f64[0]), v318, v312, 1);
          *(_QWORD *)&_Q1.f64[0] = v2473.i64[1];
          __asm { FMLA            D11, D1, V31.D[1] }
          v332 = vmlaq_laneq_f64(vmlaq_n_f64(v304, v309, v315.f64[0]), v310, v315, 1);
          v2247 = vmlaq_laneq_f64(vmlaq_n_f64(v2246, v313, v315.f64[0]), v314, v315, 1);
          v2213 = vmlaq_laneq_f64(vmlaq_n_f64(v2212, v317, v315.f64[0]), v318, v315, 1);
          *(_QWORD *)&_Q1.f64[0] = v2479.i64[1];
          __asm { FMLA            D9, D1, V31.D[1] }
          v2376 = vmlaq_laneq_f64(vmlaq_n_f64(v2375, v309, v316.f64[0]), v310, v316, 1);
          v2331 = vmlaq_laneq_f64(vmlaq_n_f64(v2330, v313, v316.f64[0]), v314, v316, 1);
          v2179 = vmlaq_laneq_f64(vmlaq_n_f64(v2178, v317, v316.f64[0]), v318, v316, 1);
          *(_QWORD *)&_Q1.f64[0] = v2485.i64[1];
          __asm { FMLA            D2, D1, V31.D[1] }
          v2287 = vmlaq_laneq_f64(vmlaq_n_f64(v2286, v309, _Q31.f64[0]), v310, _Q31, 1);
          v333 = vmlaq_laneq_f64(vmlaq_n_f64(v305, v313, _Q31.f64[0]), v314, _Q31, 1);
          _Q0 = (float64x2_t)v2456;
          _Q1 = (float64x2_t)v2462;
          v336 = vmlaq_laneq_f64(vmlaq_n_f64(v308, v317, _Q31.f64[0]), v318, _Q31, 1);
          _Q2.f64[0] = v2491.f64[1];
          __asm { FMLA            D19, D2, V31.D[1] }
          _Q2 = (float64x2_t)vzip1q_s64(v2456, v2462);
          v338 = (float64x2_t)vzip2q_s64(v2456, v2462);
          v2131 = vmlaq_laneq_f64(vmlaq_n_f64(v2130, _Q2, _Q0.f64[0]), v338, _Q0, 1);
          v339 = (float64x2_t)v2468;
          v340 = (float64x2_t)v2474;
          v341 = (float64x2_t)vzip1q_s64(v2468, v2474);
          v342 = (float64x2_t)vzip2q_s64(v2468, v2474);
          v2101 = vmlaq_laneq_f64(vmlaq_n_f64(v2100, v341, _Q0.f64[0]), v342, _Q0, 1);
          v343 = (float64x2_t)v2480;
          v344 = (float64x2_t)v2486;
          v345 = (float64x2_t)vzip1q_s64(v2480, v2486);
          v346 = (float64x2_t)vzip2q_s64(v2480, v2486);
          v347 = vmlaq_laneq_f64(vmlaq_n_f64(v319, v345, _Q0.f64[0]), v346, _Q0, 1);
          _Q31 = v2492;
          *(_QWORD *)&_Q0.f64[0] = v2456.i64[1];
          __asm { FMLA            D20, D0, V31.D[1] }
          v350 = vmlaq_laneq_f64(vmlaq_n_f64(v322, _Q2, _Q1.f64[0]), v338, _Q1, 1);
          v351 = vmlaq_laneq_f64(vmlaq_n_f64(v323, v341, _Q1.f64[0]), v342, _Q1, 1);
          v352 = vmlaq_laneq_f64(vmlaq_n_f64(v324, v345, _Q1.f64[0]), v346, _Q1, 1);
          *(_QWORD *)&_Q0.f64[0] = v2462.i64[1];
          __asm { FMLA            D14, D0, V31.D[1] }
          v353 = vmlaq_laneq_f64(vmlaq_n_f64(v325, _Q2, v339.f64[0]), v338, v339, 1);
          v354 = vmlaq_laneq_f64(vmlaq_n_f64(v326, v341, v339.f64[0]), v342, v339, 1);
          v355 = vmlaq_laneq_f64(vmlaq_n_f64(v327, v345, v339.f64[0]), v346, v339, 1);
          *(_QWORD *)&_Q0.f64[0] = v2468.i64[1];
          __asm { FMLA            D25, D0, V31.D[1] }
          v356 = vmlaq_laneq_f64(vmlaq_n_f64(v328, _Q2, v340.f64[0]), v338, v340, 1);
          v357 = vmlaq_laneq_f64(vmlaq_n_f64(v329, v341, v340.f64[0]), v342, v340, 1);
          v358 = vmlaq_laneq_f64(vmlaq_n_f64(v330, v345, v340.f64[0]), v346, v340, 1);
          *(_QWORD *)&_Q0.f64[0] = v2474.i64[1];
          __asm { FMLA            D11, D0, V31.D[1] }
          v360 = vmlaq_laneq_f64(vmlaq_n_f64(v332, _Q2, v343.f64[0]), v338, v343, 1);
          v2248 = vmlaq_laneq_f64(vmlaq_n_f64(v2247, v341, v343.f64[0]), v342, v343, 1);
          v2214 = vmlaq_laneq_f64(vmlaq_n_f64(v2213, v345, v343.f64[0]), v346, v343, 1);
          *(_QWORD *)&_Q0.f64[0] = v2480.i64[1];
          __asm { FMLA            D9, D0, V31.D[1] }
          v2377 = vmlaq_laneq_f64(vmlaq_n_f64(v2376, _Q2, v344.f64[0]), v338, v344, 1);
          v2332 = vmlaq_laneq_f64(vmlaq_n_f64(v2331, v341, v344.f64[0]), v342, v344, 1);
          v2180 = vmlaq_laneq_f64(vmlaq_n_f64(v2179, v345, v344.f64[0]), v346, v344, 1);
          *(_QWORD *)&_Q0.f64[0] = v2486.i64[1];
          __asm { FMLA            D1, D0, V31.D[1] }
          v2288 = vmlaq_laneq_f64(vmlaq_n_f64(v2287, _Q2, _Q31.f64[0]), v338, _Q31, 1);
          v361 = vmlaq_laneq_f64(vmlaq_n_f64(v333, v341, _Q31.f64[0]), v342, _Q31, 1);
          _Q0 = (float64x2_t)v2457;
          v363 = (float64x2_t)v2463;
          v364 = vmlaq_laneq_f64(vmlaq_n_f64(v336, v345, _Q31.f64[0]), v346, _Q31, 1);
          _Q2.f64[0] = v2492.f64[1];
          __asm { FMLA            D19, D2, V31.D[1] }
          v365 = (float64x2_t)vzip1q_s64(v2457, v2463);
          v366 = (float64x2_t)vzip2q_s64(v2457, v2463);
          v2132 = vmlaq_laneq_f64(vmlaq_n_f64(v2131, v365, _Q0.f64[0]), v366, _Q0, 1);
          v367 = (float64x2_t)v2469;
          v368 = (float64x2_t)v2475;
          v369 = (float64x2_t)vzip1q_s64(v2469, v2475);
          v370 = (float64x2_t)vzip2q_s64(v2469, v2475);
          v2102 = vmlaq_laneq_f64(vmlaq_n_f64(v2101, v369, _Q0.f64[0]), v370, _Q0, 1);
          v371 = (float64x2_t)v2481;
          v372 = (float64x2_t)v2487;
          v373 = (float64x2_t)vzip1q_s64(v2481, v2487);
          v374 = (float64x2_t)vzip2q_s64(v2481, v2487);
          v2078 = vmlaq_laneq_f64(vmlaq_n_f64(v347, v373, _Q0.f64[0]), v374, _Q0, 1);
          _Q31 = v2493;
          *(_QWORD *)&_Q0.f64[0] = v2457.i64[1];
          __asm { FMLA            D20, D0, V31.D[1] }
          *(_QWORD *)&_Q0.f64[0] = v2463.i64[1];
          __asm { FMLA            D14, D0, V31.D[1] }
          v376 = _Q14;
          v377 = vmlaq_laneq_f64(vmlaq_n_f64(v353, v365, v367.f64[0]), v366, v367, 1);
          *(_QWORD *)&_Q0.f64[0] = v2469.i64[1];
          __asm { FMLA            D25, D0, V31.D[1] }
          v378 = vmlaq_laneq_f64(vmlaq_n_f64(v356, v365, v368.f64[0]), v366, v368, 1);
          v379 = vmlaq_laneq_f64(vmlaq_n_f64(v357, v369, v368.f64[0]), v370, v368, 1);
          v380 = vmlaq_laneq_f64(vmlaq_n_f64(v358, v373, v368.f64[0]), v374, v368, 1);
          *(_QWORD *)&_Q0.f64[0] = v2475.i64[1];
          __asm { FMLA            D11, D0, V31.D[1] }
          v381 = _Q11;
          v2057 = vmlaq_laneq_f64(vmlaq_n_f64(v360, v365, v371.f64[0]), v366, v371, 1);
          v2066 = v379;
          v382 = vmlaq_laneq_f64(vmlaq_n_f64(v2248, v369, v371.f64[0]), v370, v371, 1);
          v383 = vmlaq_laneq_f64(vmlaq_n_f64(v2214, v373, v371.f64[0]), v374, v371, 1);
          *(_QWORD *)&_Q0.f64[0] = v2481.i64[1];
          __asm { FMLA            D9, D0, V31.D[1] }
          v2378 = vmlaq_laneq_f64(vmlaq_n_f64(v2377, v365, v372.f64[0]), v366, v372, 1);
          v2333 = vmlaq_laneq_f64(vmlaq_n_f64(v2332, v369, v372.f64[0]), v370, v372, 1);
          _Q11.f64[1] = v2172;
          v384 = vmlaq_laneq_f64(vmlaq_n_f64(v2180, v373, v372.f64[0]), v374, v372, 1);
          *(_QWORD *)&_Q0.f64[0] = v2487.i64[1];
          __asm { FMLA            D11, D0, V31.D[1] }
          v2289 = vmlaq_laneq_f64(vmlaq_n_f64(v2288, v365, _Q31.f64[0]), v366, _Q31, 1);
          _Q8 = vmlaq_laneq_f64(vmlaq_n_f64(v361, v369, _Q31.f64[0]), v370, _Q31, 1);
          v385 = vmlaq_laneq_f64(vmlaq_n_f64(v364, v373, _Q31.f64[0]), v374, _Q31, 1);
          _Q0.f64[0] = v2493.f64[1];
          __asm { FMLA            D19, D0, V31.D[1] }
          v386 = vaddq_f64(*(float64x2_t *)(v216 + 16), v2102);
          *(float64x2_t *)v216 = vaddq_f64(*(float64x2_t *)v216, v2132);
          *(float64x2_t *)(v216 + 16) = v386;
          v387 = vaddq_f64(*(float64x2_t *)(v216 + 32), v2078);
          *(float64x2_t *)(v216 + 32) = v387;
          v387.f64[0] = *(float64_t *)(v216 + 48);
          *(_QWORD *)(v216 + 48) = *(_OWORD *)&vaddq_f64(v387, _Q20);
          *(float64x2_t *)(v216 + 56) = vaddq_f64(*(float64x2_t *)(v216 + 56), vmlaq_laneq_f64(vmlaq_n_f64(v350, v365, v363.f64[0]), v366, v363, 1));
          *(float64x2_t *)(v216 + 72) = vaddq_f64(*(float64x2_t *)(v216 + 72), vmlaq_laneq_f64(vmlaq_n_f64(v351, v369, v363.f64[0]), v370, v363, 1));
          v388 = vaddq_f64(*(float64x2_t *)(v216 + 88), vmlaq_laneq_f64(vmlaq_n_f64(v352, v373, v363.f64[0]), v374, v363, 1));
          *(float64x2_t *)(v216 + 88) = v388;
          v388.f64[0] = *(float64_t *)(v216 + 104);
          v389 = vaddq_f64(v388, v376);
          *(float64_t *)(v216 + 104) = v389.f64[0];
          v389.f64[0] = *(float64_t *)(v216 + 160);
          *(_QWORD *)&v389.f64[0] = *(_OWORD *)&vaddq_f64(v389, _Q25);
          _Q1 = vaddq_f64(*(float64x2_t *)(v216 + 144), vmlaq_laneq_f64(vmlaq_n_f64(v355, v373, v367.f64[0]), v374, v367, 1));
          _Q2 = vaddq_f64(*(float64x2_t *)(v216 + 128), vmlaq_laneq_f64(vmlaq_n_f64(v354, v369, v367.f64[0]), v370, v367, 1));
          _Q3 = vaddq_f64(*(float64x2_t *)(v216 + 112), v377);
          v367.f64[0] = *(float64_t *)(v216 + 216);
          _Q4 = vaddq_f64(v367, v381);
          _Q5 = (__n128)vaddq_f64(*(float64x2_t *)(v216 + 200), v380);
          _Q6 = (__n128)vaddq_f64(*(float64x2_t *)(v216 + 184), v2066);
          v390 = vaddq_f64(*(float64x2_t *)(v216 + 168), v378);
          v371.f64[0] = *(float64_t *)(v216 + 272);
          v391 = vaddq_f64(*(float64x2_t *)(v216 + 256), v383);
          v392 = vaddq_f64(*(float64x2_t *)(v216 + 240), v382);
          v393 = vaddq_f64(*(float64x2_t *)(v216 + 224), v2057);
          _Q25.f64[0] = *(float64_t *)(v216 + 328);
          *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(_Q25, _Q11);
          v394 = vaddq_f64(*(float64x2_t *)(v216 + 312), v384);
          v395 = vaddq_f64(*(float64x2_t *)(v216 + 296), v2333);
          v396 = *(float64x2_t *)(v216 + 280);
          v397 = vaddq_f64(v396, v2378);
          v396.f64[0] = *(float64_t *)(v216 + 384);
          *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vaddq_f64(v396, _Q19);
          v398 = vaddq_f64(*(float64x2_t *)(v216 + 352), _Q8);
          v399 = vaddq_f64(*(float64x2_t *)(v216 + 336), v2289);
          *(float64x2_t *)(v216 + 112) = _Q3;
          *(float64x2_t *)(v216 + 128) = _Q2;
          *(float64x2_t *)(v216 + 144) = _Q1;
          *(float64_t *)(v216 + 160) = v389.f64[0];
          *(float64x2_t *)(v216 + 168) = v390;
          *(__n128 *)(v216 + 184) = _Q6;
          *(__n128 *)(v216 + 200) = _Q5;
          *(float64_t *)(v216 + 216) = _Q4.f64[0];
          *(float64x2_t *)(v216 + 224) = v393;
          *(float64x2_t *)(v216 + 240) = v392;
          *(float64x2_t *)(v216 + 256) = v391;
          *(_QWORD *)(v216 + 272) = *(_OWORD *)&vaddq_f64(v371, _Q9);
          *(float64x2_t *)(v216 + 280) = v397;
          *(float64x2_t *)(v216 + 296) = v395;
          *(float64x2_t *)(v216 + 312) = v394;
          *(float64_t *)(v216 + 328) = _Q20.f64[0];
          *(float64x2_t *)(v216 + 336) = v399;
          *(float64x2_t *)(v216 + 352) = v398;
          _Q0 = vaddq_f64(*(float64x2_t *)(v216 + 368), v385);
          *(float64x2_t *)(v216 + 368) = _Q0;
          *(float64_t *)(v216 + 384) = _Q19.f64[0];
          goto LABEL_42;
        }
        v214 = v215;
      }
LABEL_40:
      v216 = sub_239CCA368(v212, (char **)v213, v20, v214);
      goto LABEL_41;
    }
    v31 = *(unint64_t **)(v2416 + 40);
    v32 = v31[11] + 24 * v19;
    v34 = *(char **)v32;
    v33 = *(char **)(v32 + 8);
    if (*(char **)v32 != v33)
    {
      while (*(_DWORD *)v34 < v20)
      {
        v34 += 16;
        if (v34 == v33)
          goto LABEL_30;
      }
    }
    if (v34 != v33)
    {
      if (*(_DWORD *)v34 == v20)
      {
        v35 = v31[2] + 8 * *((_QWORD *)v34 + 1);
LABEL_31:
        _Q25 = (float64x2_t)vzip1q_s64((int64x2_t)v2452, (int64x2_t)v2458);
        v37 = (float64x2_t)vzip2q_s64((int64x2_t)v2452, (int64x2_t)v2458);
        v38 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, __src.f64[0]), v37, __src, 1);
        v39 = (float64x2_t)vzip1q_s64((int64x2_t)v2464, (int64x2_t)v2470);
        v40 = (float64x2_t)vzip2q_s64((int64x2_t)v2464, (int64x2_t)v2470);
        v41 = vmlaq_laneq_f64(vmulq_n_f64(v39, __src.f64[0]), v40, __src, 1);
        v42 = (float64x2_t)vzip1q_s64((int64x2_t)v2476, (int64x2_t)v2482);
        v43 = (float64x2_t)vzip2q_s64((int64x2_t)v2476, (int64x2_t)v2482);
        _Q17 = vmlaq_laneq_f64(vmulq_n_f64(v42, __src.f64[0]), v43, __src, 1);
        _V24.D[1] = v2488.f64[1];
        _Q16 = vmulq_f64(v2488, __src);
        _D0 = __src.f64[1];
        __asm { FMLA            D16, D0, V24.D[1] }
        _Q7 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, v2421.f64[0]), v37, v2421, 1);
        v49 = vmlaq_laneq_f64(vmulq_n_f64(v39, v2421.f64[0]), v40, v2421, 1);
        v50 = vmlaq_laneq_f64(vmulq_n_f64(v42, v2421.f64[0]), v43, v2421, 1);
        _Q1 = vmulq_f64(v2488, v2421);
        _D0 = v2421.f64[1];
        __asm { FMLA            D1, D0, V24.D[1] }
        v2171 = _Q1.f64[1];
        v53 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)v2425.i64), v37, (float64x2_t)v2425, 1);
        v54 = vmlaq_laneq_f64(vmulq_n_f64(v39, *(double *)v2425.i64), v40, (float64x2_t)v2425, 1);
        v55 = vmlaq_laneq_f64(vmulq_n_f64(v42, *(double *)v2425.i64), v43, (float64x2_t)v2425, 1);
        _Q12 = vmulq_f64(v2488, (float64x2_t)v2425);
        _D2 = *(double *)&v2425.i64[1];
        __asm { FMLA            D12, D2, V24.D[1] }
        v58 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)v2429.i64), v37, (float64x2_t)v2429, 1);
        _Q10 = vmlaq_laneq_f64(vmulq_n_f64(v39, *(double *)v2429.i64), v40, (float64x2_t)v2429, 1);
        v2126 = vmlaq_laneq_f64(vmulq_n_f64(v42, *(double *)v2429.i64), v43, (float64x2_t)v2429, 1);
        _Q2 = vmulq_f64(v2488, (float64x2_t)v2429);
        *(_QWORD *)&_Q1.f64[0] = v2429.i64[1];
        __asm { FMLA            D2, D1, V24.D[1] }
        v2122 = _Q2.f64[1];
        v61 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)v2434.i64), v37, (float64x2_t)v2434, 1);
        _Q14 = vmlaq_laneq_f64(vmulq_n_f64(v39, *(double *)v2434.i64), v40, (float64x2_t)v2434, 1);
        v2076 = vmlaq_laneq_f64(vmulq_n_f64(v42, *(double *)v2434.i64), v43, (float64x2_t)v2434, 1);
        _Q1 = vmulq_f64(v2488, (float64x2_t)v2434);
        _D0 = *(double *)&v2434.i64[1];
        __asm { FMLA            D1, D0, V24.D[1] }
        v2203 = _Q1.f64[1];
        v2368 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)v2440.i64), v37, (float64x2_t)v2440, 1);
        v2324 = vmlaq_laneq_f64(vmulq_n_f64(v39, *(double *)v2440.i64), v40, (float64x2_t)v2440, 1);
        v2064 = vmlaq_laneq_f64(vmulq_n_f64(v42, *(double *)v2440.i64), v43, (float64x2_t)v2440, 1);
        _Q1 = vmulq_f64(v2488, (float64x2_t)v2440);
        _D0 = *(double *)&v2440.i64[1];
        __asm { FMLA            D1, D0, V24.D[1] }
        v2060 = _Q1.f64[1];
        v67 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, v2446.f64[0]), v37, v2446, 1);
        v68 = vmlaq_laneq_f64(vmulq_n_f64(v39, v2446.f64[0]), v40, v2446, 1);
        v69 = vmlaq_laneq_f64(vmulq_n_f64(v42, v2446.f64[0]), v43, v2446, 1);
        _Q28 = vmulq_f64(v2488, v2446);
        _D0 = v2446.f64[1];
        __asm { FMLA            D28, D0, V24.D[1] }
        v72 = (float64x2_t)vzip1q_s64(v2465, v2471);
        _Q24 = (float64x2_t)vzip2q_s64(v2465, v2471);
        v74 = (float64x2_t)vzip1q_s64(v2477, v2483);
        _Q30 = (float64x2_t)vzip2q_s64(v2477, v2483);
        v76 = (float64x2_t)vzip1q_s64(v2453, v2459);
        v77 = (float64x2_t)vzip2q_s64(v2453, v2459);
        v78 = vmlaq_laneq_f64(vmlaq_n_f64(v38, v76, *(double *)v2418), v77, *(float64x2_t *)v2418, 1);
        v79 = vmlaq_laneq_f64(vmlaq_n_f64(v41, v72, *(double *)v2418), _Q24, *(float64x2_t *)v2418, 1);
        v2205 = vmlaq_laneq_f64(vmlaq_n_f64(_Q17, v74, *(double *)v2418), _Q30, *(float64x2_t *)v2418, 1);
        _V0.D[1] = v2489.f64[1];
        _D3 = *(_QWORD *)&v2418[8];
        __asm { FMLA            D16, D3, V0.D[1] }
        v82 = vmlaq_laneq_f64(vmlaq_n_f64(_Q7, v76, *(double *)v2422), v77, *(float64x2_t *)v2422, 1);
        v83 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v72, *(double *)v2422), _Q24, *(float64x2_t *)v2422, 1);
        v84 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v74, *(double *)v2422), _Q30, *(float64x2_t *)v2422, 1);
        _Q17.f64[1] = v2171;
        _D3 = *(_QWORD *)&v2422[8];
        __asm { FMLA            D17, D3, V0.D[1] }
        v86 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v76, *(double *)v2426), v77, *(float64x2_t *)v2426, 1);
        v87 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v72, *(double *)v2426), _Q24, *(float64x2_t *)v2426, 1);
        v88 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v74, *(double *)v2426), _Q30, *(float64x2_t *)v2426, 1);
        _D3 = *(_QWORD *)&v2426[8];
        __asm { FMLA            D12, D3, V0.D[1] }
        v90 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v76, *(double *)v2430), v77, *(float64x2_t *)v2430, 1);
        v2240 = vmlaq_laneq_f64(vmlaq_n_f64(_Q10, v72, *(double *)v2430), _Q24, *(float64x2_t *)v2430, 1);
        v91 = vmlaq_laneq_f64(vmlaq_n_f64(v2126, v74, *(double *)v2430), _Q30, *(float64x2_t *)v2430, 1);
        _Q10.f64[1] = v2122;
        _D3 = *(_QWORD *)&v2430[8];
        __asm { FMLA            D10, D3, V0.D[1] }
        v93 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v76, *(double *)v2435.i64), v77, (float64x2_t)v2435, 1);
        v2280 = vmlaq_laneq_f64(vmlaq_n_f64(_Q14, v72, *(double *)v2435.i64), _Q24, (float64x2_t)v2435, 1);
        v94 = vmlaq_laneq_f64(vmlaq_n_f64(v2076, v74, *(double *)v2435.i64), _Q30, (float64x2_t)v2435, 1);
        _D3 = *(double *)&v2435.i64[1];
        __asm { FMLA            D7, D3, V0.D[1] }
        v2369 = vmlaq_laneq_f64(vmlaq_n_f64(v2368, v76, *(double *)v2441.i64), v77, (float64x2_t)v2441, 1);
        v96 = vmlaq_laneq_f64(vmlaq_n_f64(v2324, v72, *(double *)v2441.i64), _Q24, (float64x2_t)v2441, 1);
        _Q25.f64[1] = v2060;
        v97 = vmlaq_laneq_f64(vmlaq_n_f64(v2064, v74, *(double *)v2441.i64), _Q30, (float64x2_t)v2441, 1);
        _D3 = *(double *)&v2441.i64[1];
        __asm { FMLA            D25, D3, V0.D[1] }
        v99 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v76, v2447.f64[0]), v77, v2447, 1);
        v100 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v72, v2447.f64[0]), _Q24, v2447, 1);
        v101 = vmlaq_laneq_f64(vmlaq_n_f64(v69, v74, v2447.f64[0]), _Q30, v2447, 1);
        _D3 = v2447.f64[1];
        __asm { FMLA            D28, D3, V0.D[1] }
        v103 = (float64x2_t)vzip1q_s64(v2466, v2472);
        v104 = (float64x2_t)vzip2q_s64(v2466, v2472);
        v105 = (float64x2_t)vzip1q_s64(v2478, v2484);
        v106 = (float64x2_t)vzip2q_s64(v2478, v2484);
        v107 = (float64x2_t)vzip1q_s64(v2454, v2460);
        _Q2 = (float64x2_t)vzip2q_s64(v2454, v2460);
        v109 = vmlaq_laneq_f64(vmlaq_n_f64(v78, v107, *(double *)&v2418[16]), _Q2, *(float64x2_t *)&v2418[16], 1);
        v110 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v103, *(double *)&v2418[16]), v104, *(float64x2_t *)&v2418[16], 1);
        v2206 = vmlaq_laneq_f64(vmlaq_n_f64(v2205, v105, *(double *)&v2418[16]), v106, *(float64x2_t *)&v2418[16], 1);
        _Q30.f64[1] = v2490.f64[1];
        _Q24.f64[0] = *(float64_t *)&v2418[24];
        __asm { FMLA            D16, D24, V30.D[1] }
        v111 = vmlaq_laneq_f64(vmlaq_n_f64(v82, v107, *(double *)&v2422[16]), _Q2, *(float64x2_t *)&v2422[16], 1);
        v112 = vmlaq_laneq_f64(vmlaq_n_f64(v83, v103, *(double *)&v2422[16]), v104, *(float64x2_t *)&v2422[16], 1);
        v113 = vmlaq_laneq_f64(vmlaq_n_f64(v84, v105, *(double *)&v2422[16]), v106, *(float64x2_t *)&v2422[16], 1);
        _Q24.f64[0] = *(float64_t *)&v2422[24];
        __asm { FMLA            D17, D24, V30.D[1] }
        v114 = vmlaq_laneq_f64(vmlaq_n_f64(v86, v107, *(double *)&v2426[16]), _Q2, *(float64x2_t *)&v2426[16], 1);
        v115 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v103, *(double *)&v2426[16]), v104, *(float64x2_t *)&v2426[16], 1);
        v116 = vmlaq_laneq_f64(vmlaq_n_f64(v88, v105, *(double *)&v2426[16]), v106, *(float64x2_t *)&v2426[16], 1);
        _Q24.f64[0] = *(float64_t *)&v2426[24];
        __asm { FMLA            D12, D24, V30.D[1] }
        v117 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v107, *(double *)&v2430[16]), _Q2, *(float64x2_t *)&v2430[16], 1);
        v2241 = vmlaq_laneq_f64(vmlaq_n_f64(v2240, v103, *(double *)&v2430[16]), v104, *(float64x2_t *)&v2430[16], 1);
        v118 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v105, *(double *)&v2430[16]), v106, *(float64x2_t *)&v2430[16], 1);
        _Q24.f64[0] = *(float64_t *)&v2430[24];
        __asm { FMLA            D10, D24, V30.D[1] }
        v119 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v107, *(double *)v2436.i64), _Q2, (float64x2_t)v2436, 1);
        v2281 = vmlaq_laneq_f64(vmlaq_n_f64(v2280, v103, *(double *)v2436.i64), v104, (float64x2_t)v2436, 1);
        v120 = vmlaq_laneq_f64(vmlaq_n_f64(v94, v105, *(double *)v2436.i64), v106, (float64x2_t)v2436, 1);
        *(_QWORD *)&_Q24.f64[0] = v2436.i64[1];
        __asm { FMLA            D14, D24, V30.D[1] }
        v2325 = vmlaq_laneq_f64(vmlaq_n_f64(v96, v103, *(double *)v2442.i64), v104, (float64x2_t)v2442, 1);
        v2370 = vmlaq_laneq_f64(vmlaq_n_f64(v2369, v107, *(double *)v2442.i64), _Q2, (float64x2_t)v2442, 1);
        v121 = vmlaq_laneq_f64(vmlaq_n_f64(v97, v105, *(double *)v2442.i64), v106, (float64x2_t)v2442, 1);
        *(_QWORD *)&_Q24.f64[0] = v2442.i64[1];
        __asm { FMLA            D25, D24, V30.D[1] }
        v122 = vmlaq_laneq_f64(vmlaq_n_f64(v99, v107, v2448.f64[0]), _Q2, v2448, 1);
        v123 = vmlaq_laneq_f64(vmlaq_n_f64(v100, v103, v2448.f64[0]), v104, v2448, 1);
        v124 = vmlaq_laneq_f64(vmlaq_n_f64(v101, v105, v2448.f64[0]), v106, v2448, 1);
        _Q2.f64[0] = v2448.f64[1];
        __asm { FMLA            D28, D2, V30.D[1] }
        v125 = (float64x2_t)vzip1q_s64(v2455, v2461);
        v126 = (float64x2_t)vzip2q_s64(v2455, v2461);
        v127 = (float64x2_t)vzip1q_s64(v2467, v2473);
        v128 = (float64x2_t)vzip2q_s64(v2467, v2473);
        v129 = (float64x2_t)vzip1q_s64(v2479, v2485);
        _Q2 = (float64x2_t)vzip2q_s64(v2479, v2485);
        v131 = vmlaq_laneq_f64(vmlaq_n_f64(v109, v125, v2419.f64[0]), v126, v2419, 1);
        v132 = vmlaq_laneq_f64(vmlaq_n_f64(v110, v127, v2419.f64[0]), v128, v2419, 1);
        v2207 = vmlaq_laneq_f64(vmlaq_n_f64(v2206, v129, v2419.f64[0]), _Q2, v2419, 1);
        _Q30.f64[1] = v2491.f64[1];
        _Q24.f64[0] = v2419.f64[1];
        __asm { FMLA            D16, D24, V30.D[1] }
        v133 = vmlaq_laneq_f64(vmlaq_n_f64(v111, v125, v2423.f64[0]), v126, v2423, 1);
        v134 = vmlaq_laneq_f64(vmlaq_n_f64(v112, v127, v2423.f64[0]), v128, v2423, 1);
        v135 = vmlaq_laneq_f64(vmlaq_n_f64(v113, v129, v2423.f64[0]), _Q2, v2423, 1);
        _Q24.f64[0] = v2423.f64[1];
        __asm { FMLA            D17, D24, V30.D[1] }
        v136 = vmlaq_laneq_f64(vmlaq_n_f64(v114, v125, *(double *)v2427.i64), v126, (float64x2_t)v2427, 1);
        v137 = vmlaq_laneq_f64(vmlaq_n_f64(v115, v127, *(double *)v2427.i64), v128, (float64x2_t)v2427, 1);
        v138 = vmlaq_laneq_f64(vmlaq_n_f64(v116, v129, *(double *)v2427.i64), _Q2, (float64x2_t)v2427, 1);
        *(_QWORD *)&_Q24.f64[0] = v2427.i64[1];
        __asm { FMLA            D12, D24, V30.D[1] }
        v139 = vmlaq_laneq_f64(vmlaq_n_f64(v117, v125, *(double *)v2431.i64), v126, (float64x2_t)v2431, 1);
        v2242 = vmlaq_laneq_f64(vmlaq_n_f64(v2241, v127, *(double *)v2431.i64), v128, (float64x2_t)v2431, 1);
        v140 = vmlaq_laneq_f64(vmlaq_n_f64(v118, v129, *(double *)v2431.i64), _Q2, (float64x2_t)v2431, 1);
        *(_QWORD *)&_Q24.f64[0] = v2431.i64[1];
        __asm { FMLA            D10, D24, V30.D[1] }
        v141 = vmlaq_laneq_f64(vmlaq_n_f64(v119, v125, *(double *)v2437.i64), v126, (float64x2_t)v2437, 1);
        v2282 = vmlaq_laneq_f64(vmlaq_n_f64(v2281, v127, *(double *)v2437.i64), v128, (float64x2_t)v2437, 1);
        v142 = vmlaq_laneq_f64(vmlaq_n_f64(v120, v129, *(double *)v2437.i64), _Q2, (float64x2_t)v2437, 1);
        _Q14.f64[1] = v2203;
        *(_QWORD *)&_Q24.f64[0] = v2437.i64[1];
        __asm { FMLA            D14, D24, V30.D[1] }
        v2371 = vmlaq_laneq_f64(vmlaq_n_f64(v2370, v125, *(double *)v2443.i64), v126, (float64x2_t)v2443, 1);
        v2326 = vmlaq_laneq_f64(vmlaq_n_f64(v2325, v127, *(double *)v2443.i64), v128, (float64x2_t)v2443, 1);
        v143 = vmlaq_laneq_f64(vmlaq_n_f64(v121, v129, *(double *)v2443.i64), _Q2, (float64x2_t)v2443, 1);
        *(_QWORD *)&_Q24.f64[0] = v2443.i64[1];
        __asm { FMLA            D25, D24, V30.D[1] }
        v144 = vmlaq_laneq_f64(vmlaq_n_f64(v122, v125, v2449.f64[0]), v126, v2449, 1);
        v145 = vmlaq_laneq_f64(vmlaq_n_f64(v123, v127, v2449.f64[0]), v128, v2449, 1);
        v146 = vmlaq_laneq_f64(vmlaq_n_f64(v124, v129, v2449.f64[0]), _Q2, v2449, 1);
        _Q2.f64[0] = v2449.f64[1];
        __asm { FMLA            D28, D2, V30.D[1] }
        v147 = (float64x2_t)vzip1q_s64(v2456, v2462);
        _Q0 = (float64x2_t)vzip2q_s64(v2456, v2462);
        v149 = (float64x2_t)vzip1q_s64(v2468, v2474);
        v150 = (float64x2_t)vzip2q_s64(v2468, v2474);
        v151 = (float64x2_t)vzip1q_s64(v2480, v2486);
        _Q2 = (float64x2_t)vzip2q_s64(v2480, v2486);
        v153 = vmlaq_laneq_f64(vmlaq_n_f64(v131, v147, *(double *)v2420), _Q0, *(float64x2_t *)v2420, 1);
        _Q6 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v149, *(double *)v2420), v150, *(float64x2_t *)v2420, 1);
        v2208 = vmlaq_laneq_f64(vmlaq_n_f64(v2207, v151, *(double *)v2420), _Q2, *(float64x2_t *)v2420, 1);
        _Q30.f64[1] = v2492.f64[1];
        _Q24.f64[0] = *(float64_t *)&v2420[8];
        __asm { FMLA            D16, D24, V30.D[1] }
        v155 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v147, *(double *)v2424), _Q0, *(float64x2_t *)v2424, 1);
        v156 = vmlaq_laneq_f64(vmlaq_n_f64(v134, v149, *(double *)v2424), v150, *(float64x2_t *)v2424, 1);
        v157 = vmlaq_laneq_f64(vmlaq_n_f64(v135, v151, *(double *)v2424), _Q2, *(float64x2_t *)v2424, 1);
        _Q24.f64[0] = *(float64_t *)&v2424[8];
        __asm { FMLA            D17, D24, V30.D[1] }
        v158 = vmlaq_laneq_f64(vmlaq_n_f64(v136, v147, *(double *)v2428), _Q0, *(float64x2_t *)v2428, 1);
        v159 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v149, *(double *)v2428), v150, *(float64x2_t *)v2428, 1);
        v160 = vmlaq_laneq_f64(vmlaq_n_f64(v138, v151, *(double *)v2428), _Q2, *(float64x2_t *)v2428, 1);
        _Q24.f64[0] = *(float64_t *)&v2428[8];
        __asm { FMLA            D12, D24, V30.D[1] }
        v161 = vmlaq_laneq_f64(vmlaq_n_f64(v139, v147, *(double *)v2432.i64), _Q0, (float64x2_t)v2432, 1);
        v2243 = vmlaq_laneq_f64(vmlaq_n_f64(v2242, v149, *(double *)v2432.i64), v150, (float64x2_t)v2432, 1);
        v162 = vmlaq_laneq_f64(vmlaq_n_f64(v140, v151, *(double *)v2432.i64), _Q2, (float64x2_t)v2432, 1);
        *(_QWORD *)&_Q24.f64[0] = v2432.i64[1];
        __asm { FMLA            D10, D24, V30.D[1] }
        v163 = vmlaq_laneq_f64(vmlaq_n_f64(v141, v147, *(double *)v2438.i64), _Q0, (float64x2_t)v2438, 1);
        v2283 = vmlaq_laneq_f64(vmlaq_n_f64(v2282, v149, *(double *)v2438.i64), v150, (float64x2_t)v2438, 1);
        v164 = vmlaq_laneq_f64(vmlaq_n_f64(v142, v151, *(double *)v2438.i64), _Q2, (float64x2_t)v2438, 1);
        *(_QWORD *)&_Q24.f64[0] = v2438.i64[1];
        __asm { FMLA            D14, D24, V30.D[1] }
        v2372 = vmlaq_laneq_f64(vmlaq_n_f64(v2371, v147, *(double *)v2444.i64), _Q0, (float64x2_t)v2444, 1);
        v2327 = vmlaq_laneq_f64(vmlaq_n_f64(v2326, v149, *(double *)v2444.i64), v150, (float64x2_t)v2444, 1);
        v165 = vmlaq_laneq_f64(vmlaq_n_f64(v143, v151, *(double *)v2444.i64), _Q2, (float64x2_t)v2444, 1);
        *(_QWORD *)&_Q24.f64[0] = v2444.i64[1];
        __asm { FMLA            D25, D24, V30.D[1] }
        v166 = vmlaq_laneq_f64(vmlaq_n_f64(v144, v147, v2450.f64[0]), _Q0, v2450, 1);
        v167 = vmlaq_laneq_f64(vmlaq_n_f64(v145, v149, v2450.f64[0]), v150, v2450, 1);
        v168 = vmlaq_laneq_f64(vmlaq_n_f64(v146, v151, v2450.f64[0]), _Q2, v2450, 1);
        _Q2.f64[0] = v2450.f64[1];
        __asm { FMLA            D28, D2, V30.D[1] }
        v169 = (float64x2_t)vzip1q_s64(v2457, v2463);
        v170 = (float64x2_t)vzip2q_s64(v2457, v2463);
        v171 = (float64x2_t)vzip1q_s64(v2469, v2475);
        v172 = (float64x2_t)vzip2q_s64(v2469, v2475);
        v173 = (float64x2_t)vzip1q_s64(v2481, v2487);
        v174 = (float64x2_t)vzip2q_s64(v2481, v2487);
        v2097 = vmlaq_laneq_f64(vmlaq_n_f64(v153, v169, *(double *)&v2420[16]), v170, *(float64x2_t *)&v2420[16], 1);
        v2127 = vmlaq_laneq_f64(vmlaq_n_f64(_Q6, v171, *(double *)&v2420[16]), v172, *(float64x2_t *)&v2420[16], 1);
        v175 = vmlaq_laneq_f64(vmlaq_n_f64(v2208, v173, *(double *)&v2420[16]), v174, *(float64x2_t *)&v2420[16], 1);
        _Q30.f64[1] = v2493.f64[1];
        _Q24.f64[0] = *(float64_t *)&v2420[24];
        __asm { FMLA            D16, D24, V30.D[1] }
        v2153 = vmlaq_laneq_f64(vmlaq_n_f64(v155, v169, *(double *)&v2424[16]), v170, *(float64x2_t *)&v2424[16], 1);
        v2175 = _Q16;
        v176 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v171, *(double *)&v2424[16]), v172, *(float64x2_t *)&v2424[16], 1);
        v177 = vmlaq_laneq_f64(vmlaq_n_f64(v157, v173, *(double *)&v2424[16]), v174, *(float64x2_t *)&v2424[16], 1);
        _Q24.f64[0] = *(float64_t *)&v2424[24];
        __asm { FMLA            D17, D24, V30.D[1] }
        v178 = _Q17;
        v2209 = vmlaq_laneq_f64(vmlaq_n_f64(v158, v169, *(double *)&v2428[16]), v170, *(float64x2_t *)&v2428[16], 1);
        v179 = vmlaq_laneq_f64(vmlaq_n_f64(v159, v171, *(double *)&v2428[16]), v172, *(float64x2_t *)&v2428[16], 1);
        v180 = vmlaq_laneq_f64(vmlaq_n_f64(v160, v173, *(double *)&v2428[16]), v174, *(float64x2_t *)&v2428[16], 1);
        _Q24.f64[0] = *(float64_t *)&v2428[24];
        __asm { FMLA            D12, D24, V30.D[1] }
        v181 = _Q12;
        v182 = vmlaq_laneq_f64(vmlaq_n_f64(v161, v169, *(double *)v2433.i64), v170, (float64x2_t)v2433, 1);
        v183 = vmlaq_laneq_f64(vmlaq_n_f64(v2243, v171, *(double *)v2433.i64), v172, (float64x2_t)v2433, 1);
        v184 = vmlaq_laneq_f64(vmlaq_n_f64(v162, v173, *(double *)v2433.i64), v174, (float64x2_t)v2433, 1);
        _Q6.f64[1] = _Q10.f64[1];
        *(_QWORD *)&_Q24.f64[0] = v2433.i64[1];
        __asm { FMLA            D6, D24, V30.D[1] }
        v185 = vmlaq_laneq_f64(vmlaq_n_f64(v163, v169, *(double *)v2439.i64), v170, (float64x2_t)v2439, 1);
        v186 = vmlaq_laneq_f64(vmlaq_n_f64(v2283, v171, *(double *)v2439.i64), v172, (float64x2_t)v2439, 1);
        v187 = vmlaq_laneq_f64(vmlaq_n_f64(v164, v173, *(double *)v2439.i64), v174, (float64x2_t)v2439, 1);
        _Q0.f64[1] = _Q14.f64[1];
        *(_QWORD *)&_Q24.f64[0] = v2439.i64[1];
        __asm { FMLA            D0, D24, V30.D[1] }
        v188 = _Q0;
        v189 = vmlaq_laneq_f64(vmlaq_n_f64(v2372, v169, v2445.n128_f64[0]), v170, (float64x2_t)v2445, 1);
        v190 = vmlaq_laneq_f64(vmlaq_n_f64(v2327, v171, v2445.n128_f64[0]), v172, (float64x2_t)v2445, 1);
        v191 = vmlaq_laneq_f64(vmlaq_n_f64(v165, v173, v2445.n128_f64[0]), v174, (float64x2_t)v2445, 1);
        *(_QWORD *)&_Q24.f64[0] = v2445.n128_u64[1];
        __asm { FMLA            D25, D24, V30.D[1] }
        v192 = vmlaq_laneq_f64(vmlaq_n_f64(v166, v169, v2451.f64[0]), v170, v2451, 1);
        v193 = vmlaq_laneq_f64(vmlaq_n_f64(v167, v171, v2451.f64[0]), v172, v2451, 1);
        v194 = vmlaq_laneq_f64(vmlaq_n_f64(v168, v173, v2451.f64[0]), v174, v2451, 1);
        _Q0.f64[0] = v2451.f64[1];
        __asm { FMLA            D28, D0, V30.D[1] }
        v195 = vaddq_f64(*(float64x2_t *)(v35 + 32), v175);
        v196 = vaddq_f64(*(float64x2_t *)v35, v2097);
        *(float64x2_t *)(v35 + 16) = vaddq_f64(*(float64x2_t *)(v35 + 16), v2127);
        *(float64x2_t *)(v35 + 32) = v195;
        *(float64x2_t *)v35 = v196;
        v196.f64[0] = *(float64_t *)(v35 + 48);
        *(_QWORD *)(v35 + 48) = *(_OWORD *)&vaddq_f64(v196, v2175);
        *(float64x2_t *)(v35 + 88) = vaddq_f64(*(float64x2_t *)(v35 + 88), v177);
        *(float64x2_t *)(v35 + 72) = vaddq_f64(*(float64x2_t *)(v35 + 72), v176);
        v197 = vaddq_f64(*(float64x2_t *)(v35 + 56), v2153);
        *(float64x2_t *)(v35 + 56) = v197;
        v197.f64[0] = *(float64_t *)(v35 + 104);
        *(_QWORD *)(v35 + 104) = *(_OWORD *)&vaddq_f64(v197, v178);
        v198 = vaddq_f64(*(float64x2_t *)(v35 + 144), v180);
        *(float64x2_t *)(v35 + 144) = v198;
        v198.f64[0] = *(float64_t *)(v35 + 160);
        *(_QWORD *)&v198.f64[0] = *(_OWORD *)&vaddq_f64(v198, v181);
        v199 = vaddq_f64(*(float64x2_t *)(v35 + 128), v179);
        v195.f64[0] = *(float64_t *)(v35 + 216);
        *(_QWORD *)&v195.f64[0] = *(_OWORD *)&vaddq_f64(v195, _Q6);
        v200 = vaddq_f64(*(float64x2_t *)(v35 + 168), v182);
        v201 = vaddq_f64(*(float64x2_t *)(v35 + 184), v183);
        v202 = vaddq_f64(*(float64x2_t *)(v35 + 200), v184);
        v177.f64[0] = *(float64_t *)(v35 + 272);
        v203 = vaddq_f64(*(float64x2_t *)(v35 + 224), v185);
        v204 = vaddq_f64(*(float64x2_t *)(v35 + 240), v186);
        v205 = vaddq_f64(*(float64x2_t *)(v35 + 256), v187);
        v179.f64[0] = *(float64_t *)(v35 + 328);
        *(_QWORD *)&v175.f64[0] = *(_OWORD *)&vaddq_f64(v179, _Q25);
        v206 = vaddq_f64(*(float64x2_t *)(v35 + 280), v189);
        v207 = vaddq_f64(*(float64x2_t *)(v35 + 296), v190);
        v208 = *(float64x2_t *)(v35 + 312);
        v209 = vaddq_f64(v208, v191);
        v208.f64[0] = *(float64_t *)(v35 + 384);
        v210 = vaddq_f64(*(float64x2_t *)(v35 + 336), v192);
        v211 = vaddq_f64(*(float64x2_t *)(v35 + 368), v194);
        *(float64x2_t *)(v35 + 112) = vaddq_f64(*(float64x2_t *)(v35 + 112), v2209);
        *(float64x2_t *)(v35 + 128) = v199;
        *(float64_t *)(v35 + 160) = v198.f64[0];
        *(float64x2_t *)(v35 + 200) = v202;
        *(float64x2_t *)(v35 + 184) = v201;
        *(float64x2_t *)(v35 + 168) = v200;
        *(float64_t *)(v35 + 216) = v195.f64[0];
        *(float64x2_t *)(v35 + 240) = v204;
        *(float64x2_t *)(v35 + 256) = v205;
        *(float64x2_t *)(v35 + 224) = v203;
        *(_QWORD *)(v35 + 272) = *(_OWORD *)&vaddq_f64(v177, v188);
        *(float64x2_t *)(v35 + 296) = v207;
        *(float64x2_t *)(v35 + 312) = v209;
        *(float64x2_t *)(v35 + 280) = v206;
        *(float64_t *)(v35 + 328) = v175.f64[0];
        *(float64x2_t *)(v35 + 352) = vaddq_f64(*(float64x2_t *)(v35 + 352), v193);
        *(float64x2_t *)(v35 + 368) = v211;
        *(float64x2_t *)(v35 + 336) = v210;
        *(_QWORD *)(v35 + 384) = *(_OWORD *)&vaddq_f64(v208, _Q28);
        goto LABEL_32;
      }
      v33 = v34;
    }
LABEL_30:
    v35 = sub_239CCA368(v31, (char **)v32, v20, v33);
    goto LABEL_31;
  }
LABEL_68:
  v826 = v10[10];
  v825 = v10[11];
  if (v826 == v825)
    goto LABEL_135;
  v2041 = v10[11];
  do
  {
    v827 = *(_QWORD *)(v826 + 120);
    v828 = *(_QWORD *)(v826 + 128);
    if (((*(unsigned __int8 *)(v828 + 124) >> 2) & 1) == (char)(32 * *(_BYTE *)(v827 + 124)) >> 7)
      v829 = 2;
    else
      v829 = 1;
    if ((v829 & (_DWORD)v9[5]) == 0)
      goto LABEL_70;
    v830 = *(unsigned __int8 *)(v827 + 4);
    if (*(_BYTE *)(v827 + 4))
    {
      if (*(_DWORD *)(v827 + 120) == -1)
        goto LABEL_70;
    }
    v831 = *(unsigned __int8 *)(v828 + 4);
    if (*(_BYTE *)(v828 + 4))
    {
      if (*(_DWORD *)(v828 + 120) == -1)
        goto LABEL_70;
    }
    v832 = (_QWORD *)v9[1];
    if (*(_BYTE *)(v827 + 4))
    {
      v833 = *(_DWORD *)(*v832 + 4 * *(unsigned int *)(v827 + 120));
      if (*(_BYTE *)(v828 + 4))
        goto LABEL_81;
    }
    else
    {
      v833 = -1;
      if (*(_BYTE *)(v828 + 4))
      {
LABEL_81:
        v834 = *(_DWORD *)(*v832 + 4 * *(unsigned int *)(v828 + 120));
        goto LABEL_84;
      }
    }
    v834 = -1;
LABEL_84:
    v835 = (float64x2_t *)(v826 + 136);
    sub_239CCB344(v826 + 8, v827, v828, v826 + 136, &__src, _Q0, _Q1);
    v836 = *(_QWORD *)(v826 + 240);
    if (v836)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v836 + 24))(v836, v826 + 136);
      v837 = *(float64x2_t **)(v826 + 240);
      v838 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v837->f64[0] + 16))(v837);
      sub_239CCC488((void *)*(unsigned __int8 *)(*(_QWORD *)(v826 + 120) + 4), &__src, v837, v838);
      sub_239CCE588((void *)*(unsigned __int8 *)(*(_QWORD *)(v826 + 128) + 4), &__src, v837, v838);
    }
    _Q0 = *(float64x2_t *)(v826 + 216);
    _Q1 = *(float64x2_t *)(v826 + 200);
    _Q4 = *(float64x2_t *)(v826 + 152);
    _Q5 = *(__n128 *)(v826 + 136);
    _Q6 = (__n128)vmulq_f64((float64x2_t)_Q5, (float64x2_t)_Q5);
    _D7 = *(_QWORD *)(v826 + 144);
    __asm { FMLA            D6, D7, V5.D[1] }
    _Q5.n128_u64[0] = *(_QWORD *)&_Q4.f64[1];
    __asm { FMLA            D6, D5, V4.D[1] }
    _Q4.f64[0] = *(float64_t *)(v826 + 176);
    __asm { FMLA            D6, D4, V3.D[1] }
    _Q3.f64[0] = *(float64_t *)(v826 + 192);
    __asm { FMLA            D6, D3, V2.D[1] }
    _Q2.f64[0] = _Q1.f64[1];
    __asm { FMLA            D6, D2, V1.D[1] }
    _Q1.f64[0] = _Q0.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    _Q0.f64[0] = v2091[3] * _Q6.n128_f64[0];
    *(float64_t *)(v826 + 232) = _Q0.f64[0];
    if (v831)
    {
      if (!v830 || v833 < v834)
      {
LABEL_99:
        v1021 = *(unint64_t **)(v2416 + 40);
        v1022 = v1021[11] + 24 * v834;
        v1024 = *(char **)v1022;
        v1023 = *(char **)(v1022 + 8);
        if (*(char **)v1022 != v1023)
        {
          while (*(_DWORD *)v1024 < v834)
          {
            v1024 += 16;
            if (v1024 == v1023)
              goto LABEL_107;
          }
        }
        if (v1024 != v1023)
        {
          if (*(_DWORD *)v1024 == v834)
          {
            v1025 = v1021[2] + 8 * *((_QWORD *)v1024 + 1);
LABEL_108:
            _Q9 = (float64x2_t)vzip1q_s64((int64x2_t)v2452, (int64x2_t)v2458);
            v1027 = (float64x2_t)vzip2q_s64((int64x2_t)v2452, (int64x2_t)v2458);
            v1028 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2452.f64[0]), v1027, v2452, 1);
            v1029 = (float64x2_t)v2465;
            v1030 = (float64x2_t)v2471;
            v1031 = (float64x2_t)vzip1q_s64((int64x2_t)v2464, (int64x2_t)v2470);
            v1032 = (float64x2_t)vzip2q_s64((int64x2_t)v2464, (int64x2_t)v2470);
            v1033 = (float64x2_t)vzip1q_s64((int64x2_t)v2476, (int64x2_t)v2482);
            v1034 = (float64x2_t)vzip2q_s64((int64x2_t)v2476, (int64x2_t)v2482);
            v1035 = vmlaq_laneq_f64(vmulq_n_f64(v1033, v2452.f64[0]), v1034, v2452, 1);
            _Q26 = v2488;
            _Q7 = vmulq_f64(v2488, v2452);
            _D4 = v2452.f64[1];
            __asm { FMLA            D7, D4, V26.D[1] }
            _Q16 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2458.f64[0]), v1027, v2458, 1);
            v1040 = vmlaq_laneq_f64(vmulq_n_f64(v1031, v2458.f64[0]), v1032, v2458, 1);
            v1041 = vmlaq_laneq_f64(vmulq_n_f64(v1033, v2458.f64[0]), v1034, v2458, 1);
            _Q14 = vmulq_f64(v2488, v2458);
            _D3 = v2458.f64[1];
            __asm { FMLA            D14, D3, V26.D[1] }
            v1044 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2464.f64[0]), v1027, v2464, 1);
            v1045 = vmlaq_laneq_f64(vmulq_n_f64(v1031, v2464.f64[0]), v1032, v2464, 1);
            _Q25 = vmulq_f64(v2488, v2464);
            _D2 = v2464.f64[1];
            __asm { FMLA            D25, D2, V26.D[1] }
            v2058 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2470.f64[0]), v1027, v2470, 1);
            v2069 = vmlaq_laneq_f64(vmulq_n_f64(v1033, v2464.f64[0]), v1034, v2464, 1);
            v1048 = vmlaq_laneq_f64(vmulq_n_f64(v1031, v2470.f64[0]), v1032, v2470, 1);
            v2054 = vmlaq_laneq_f64(vmulq_n_f64(v1033, v2470.f64[0]), v1034, v2470, 1);
            _Q2 = vmulq_f64(v2488, v2470);
            _D1 = v2470.f64[1];
            __asm { FMLA            D2, D1, V26.D[1] }
            v1051 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2476.f64[0]), v1027, v2476, 1);
            v2264 = vmlaq_laneq_f64(vmulq_n_f64(v1031, v2476.f64[0]), v1032, v2476, 1);
            v2225 = vmlaq_laneq_f64(vmulq_n_f64(v1033, v2476.f64[0]), v1034, v2476, 1);
            _Q1 = vmulq_f64(v2488, v2476);
            _D0 = v2476.f64[1];
            __asm { FMLA            D1, D0, V26.D[1] }
            v2049 = _Q1.f64[1];
            v2051 = _Q2.f64[1];
            v2396 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2482.f64[0]), v1027, v2482, 1);
            v2349 = vmlaq_laneq_f64(vmulq_n_f64(v1031, v2482.f64[0]), v1032, v2482, 1);
            v2190 = vmlaq_laneq_f64(vmulq_n_f64(v1033, v2482.f64[0]), v1034, v2482, 1);
            _Q1 = vmulq_f64(v2488, v2482);
            _D0 = v2482.f64[1];
            __asm { FMLA            D1, D0, V26.D[1] }
            v2305 = vmlaq_laneq_f64(vmulq_n_f64(_Q9, v2488.f64[0]), v1027, v2488, 1);
            v1056 = vmlaq_laneq_f64(vmulq_n_f64(v1031, v2488.f64[0]), v1032, v2488, 1);
            v1057 = vmlaq_laneq_f64(vmulq_n_f64(v1033, v2488.f64[0]), v1034, v2488, 1);
            _Q19 = vmulq_f64(_Q26, _Q26);
            _D31 = v2488.f64[1];
            __asm { FMLA            D19, D31, V26.D[1] }
            _Q26 = (float64x2_t)v2453;
            v1061 = (float64x2_t)v2459;
            v1062 = (float64x2_t)vzip1q_s64(v2453, v2459);
            v1063 = vmlaq_n_f64(v1028, v1062, *(double *)v2453.i64);
            v1064 = (float64x2_t)vzip2q_s64(v2453, v2459);
            v2139 = vmlaq_laneq_f64(v1063, v1064, (float64x2_t)v2453, 1);
            v2174 = _Q1.f64[1];
            v1065 = (float64x2_t)vzip1q_s64(v2465, v2471);
            v1066 = (float64x2_t)vzip2q_s64(v2465, v2471);
            v2108 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1031, v2452.f64[0]), v1032, v2452, 1), v1065, _Q26.f64[0]), v1066, _Q26, 1);
            v2043 = (float64x2_t)v2483;
            v1067 = (float64x2_t)v2477;
            v1068 = (float64x2_t)vzip1q_s64(v2477, v2483);
            _Q2 = (float64x2_t)vzip2q_s64(v2477, v2483);
            v2082 = vmlaq_laneq_f64(vmlaq_n_f64(v1035, v1068, _Q26.f64[0]), _Q2, _Q26, 1);
            _Q0 = v2489;
            _Q20.f64[1] = _Q7.f64[1];
            *(_QWORD *)&_Q26.f64[0] = v2453.i64[1];
            __asm { FMLA            D20, D26, V0.D[1] }
            v1073 = vmlaq_laneq_f64(vmlaq_n_f64(_Q16, v1062, v1061.f64[0]), v1064, v1061, 1);
            v1074 = vmlaq_laneq_f64(vmlaq_n_f64(v1040, v1065, v1061.f64[0]), v1066, v1061, 1);
            v1075 = vmlaq_laneq_f64(vmlaq_n_f64(v1041, v1068, v1061.f64[0]), _Q2, v1061, 1);
            *(_QWORD *)&_Q26.f64[0] = v2459.i64[1];
            __asm { FMLA            D14, D26, V0.D[1] }
            v1076 = vmlaq_laneq_f64(vmlaq_n_f64(v1044, v1062, v1029.f64[0]), v1064, v1029, 1);
            v1077 = vmlaq_laneq_f64(vmlaq_n_f64(v1045, v1065, v1029.f64[0]), v1066, v1029, 1);
            v1078 = vmlaq_laneq_f64(vmlaq_n_f64(v2069, v1068, *(double *)v2465.i64), _Q2, (float64x2_t)v2465, 1);
            *(_QWORD *)&_Q26.f64[0] = v2465.i64[1];
            __asm { FMLA            D25, D26, V0.D[1] }
            v1079 = vmlaq_laneq_f64(vmlaq_n_f64(v2058, v1062, v1030.f64[0]), v1064, v1030, 1);
            v1080 = vmlaq_laneq_f64(vmlaq_n_f64(v1048, v1065, v1030.f64[0]), v1066, v1030, 1);
            _Q11.f64[1] = v2051;
            v1082 = vmlaq_laneq_f64(vmlaq_n_f64(v2054, v1068, *(double *)v2471.i64), _Q2, (float64x2_t)v2471, 1);
            *(_QWORD *)&_Q26.f64[0] = v2471.i64[1];
            __asm { FMLA            D11, D26, V0.D[1] }
            v1084 = vmlaq_laneq_f64(vmlaq_n_f64(v1051, v1062, v1067.f64[0]), v1064, v1067, 1);
            v2265 = vmlaq_laneq_f64(vmlaq_n_f64(v2264, v1065, v1067.f64[0]), v1066, v1067, 1);
            v2226 = vmlaq_laneq_f64(vmlaq_n_f64(v2225, v1068, v1067.f64[0]), _Q2, v1067, 1);
            _Q9.f64[1] = v2049;
            *(_QWORD *)&_Q26.f64[0] = v2477.i64[1];
            __asm { FMLA            D9, D26, V0.D[1] }
            v2397 = vmlaq_laneq_f64(vmlaq_n_f64(v2396, v1062, v2043.f64[0]), v1064, v2043, 1);
            v2350 = vmlaq_laneq_f64(vmlaq_n_f64(v2349, v1065, v2043.f64[0]), v1066, v2043, 1);
            v2191 = vmlaq_laneq_f64(vmlaq_n_f64(v2190, v1068, v2043.f64[0]), _Q2, v2043, 1);
            *(_QWORD *)&_Q26.f64[0] = v2483.i64[1];
            __asm { FMLA            D16, D26, V0.D[1] }
            v2306 = vmlaq_laneq_f64(vmlaq_n_f64(v2305, v1062, _Q0.f64[0]), v1064, _Q0, 1);
            v1085 = vmlaq_laneq_f64(vmlaq_n_f64(v1056, v1065, _Q0.f64[0]), v1066, _Q0, 1);
            _Q3 = (float64x2_t)v2454;
            v1087 = vmlaq_n_f64(v1057, v1068, v2489.f64[0]);
            _Q1 = (float64x2_t)v2460;
            v1089 = vmlaq_laneq_f64(v1087, _Q2, v2489, 1);
            _Q2.f64[0] = v2489.f64[1];
            __asm { FMLA            D19, D2, V0.D[1] }
            v1090 = (float64x2_t)vzip1q_s64(v2454, v2460);
            v1091 = (float64x2_t)vzip2q_s64(v2454, v2460);
            v2140 = vmlaq_laneq_f64(vmlaq_n_f64(v2139, v1090, _Q3.f64[0]), v1091, _Q3, 1);
            v1092 = (float64x2_t)v2466;
            v1093 = (float64x2_t)v2472;
            v1094 = (float64x2_t)vzip1q_s64(v2466, v2472);
            v1095 = (float64x2_t)vzip2q_s64(v2466, v2472);
            v2109 = vmlaq_laneq_f64(vmlaq_n_f64(v2108, v1094, _Q3.f64[0]), v1095, _Q3, 1);
            v1096 = (float64x2_t)v2478;
            v1097 = (float64x2_t)v2484;
            v1098 = (float64x2_t)vzip1q_s64(v2478, v2484);
            v1099 = (float64x2_t)vzip2q_s64(v2478, v2484);
            v1100 = vmlaq_laneq_f64(vmlaq_n_f64(v2082, v1098, _Q3.f64[0]), v1099, _Q3, 1);
            _Q0 = v2490;
            *(_QWORD *)&_Q3.f64[0] = v2454.i64[1];
            __asm { FMLA            D20, D3, V0.D[1] }
            v1103 = vmlaq_laneq_f64(vmlaq_n_f64(v1073, v1090, _Q1.f64[0]), v1091, _Q1, 1);
            v1104 = vmlaq_laneq_f64(vmlaq_n_f64(v1074, v1094, _Q1.f64[0]), v1095, _Q1, 1);
            v1105 = vmlaq_laneq_f64(vmlaq_n_f64(v1075, v1098, _Q1.f64[0]), v1099, _Q1, 1);
            *(_QWORD *)&_Q1.f64[0] = v2460.i64[1];
            __asm { FMLA            D14, D1, V0.D[1] }
            v1106 = vmlaq_laneq_f64(vmlaq_n_f64(v1076, v1090, v1092.f64[0]), v1091, v1092, 1);
            v1107 = vmlaq_laneq_f64(vmlaq_n_f64(v1077, v1094, v1092.f64[0]), v1095, v1092, 1);
            v1108 = vmlaq_laneq_f64(vmlaq_n_f64(v1078, v1098, v1092.f64[0]), v1099, v1092, 1);
            *(_QWORD *)&_Q1.f64[0] = v2466.i64[1];
            __asm { FMLA            D25, D1, V0.D[1] }
            v1109 = vmlaq_laneq_f64(vmlaq_n_f64(v1079, v1090, v1093.f64[0]), v1091, v1093, 1);
            v1110 = vmlaq_laneq_f64(vmlaq_n_f64(v1080, v1094, v1093.f64[0]), v1095, v1093, 1);
            v1111 = vmlaq_laneq_f64(vmlaq_n_f64(v1082, v1098, v1093.f64[0]), v1099, v1093, 1);
            *(_QWORD *)&_Q1.f64[0] = v2472.i64[1];
            __asm { FMLA            D11, D1, V0.D[1] }
            v1113 = vmlaq_laneq_f64(vmlaq_n_f64(v1084, v1090, v1096.f64[0]), v1091, v1096, 1);
            v2266 = vmlaq_laneq_f64(vmlaq_n_f64(v2265, v1094, v1096.f64[0]), v1095, v1096, 1);
            v2227 = vmlaq_laneq_f64(vmlaq_n_f64(v2226, v1098, v1096.f64[0]), v1099, v1096, 1);
            *(_QWORD *)&_Q1.f64[0] = v2478.i64[1];
            __asm { FMLA            D9, D1, V0.D[1] }
            v2398 = vmlaq_laneq_f64(vmlaq_n_f64(v2397, v1090, v1097.f64[0]), v1091, v1097, 1);
            v2351 = vmlaq_laneq_f64(vmlaq_n_f64(v2350, v1094, v1097.f64[0]), v1095, v1097, 1);
            v2192 = vmlaq_laneq_f64(vmlaq_n_f64(v2191, v1098, v1097.f64[0]), v1099, v1097, 1);
            *(_QWORD *)&_Q1.f64[0] = v2484.i64[1];
            __asm { FMLA            D3, D1, V0.D[1] }
            v2307 = vmlaq_laneq_f64(vmlaq_n_f64(v2306, v1090, _Q0.f64[0]), v1091, _Q0, 1);
            v1114 = vmlaq_laneq_f64(vmlaq_n_f64(v1085, v1094, _Q0.f64[0]), v1095, _Q0, 1);
            _Q1 = (float64x2_t)v2455;
            _Q2 = (float64x2_t)v2461;
            v1117 = vmlaq_laneq_f64(vmlaq_n_f64(v1089, v1098, _Q0.f64[0]), v1099, _Q0, 1);
            _Q3.f64[0] = v2490.f64[1];
            __asm { FMLA            D19, D3, V0.D[1] }
            v1118 = (float64x2_t)vzip1q_s64(v2455, v2461);
            v1119 = (float64x2_t)vzip2q_s64(v2455, v2461);
            v2141 = vmlaq_laneq_f64(vmlaq_n_f64(v2140, v1118, _Q1.f64[0]), v1119, _Q1, 1);
            v1120 = (float64x2_t)v2467;
            v1121 = (float64x2_t)v2473;
            v1122 = (float64x2_t)vzip1q_s64(v2467, v2473);
            v1123 = (float64x2_t)vzip2q_s64(v2467, v2473);
            v2110 = vmlaq_laneq_f64(vmlaq_n_f64(v2109, v1122, _Q1.f64[0]), v1123, _Q1, 1);
            v1124 = (float64x2_t)v2479;
            v1125 = (float64x2_t)v2485;
            v1126 = (float64x2_t)vzip1q_s64(v2479, v2485);
            v1127 = (float64x2_t)vzip2q_s64(v2479, v2485);
            v1128 = vmlaq_laneq_f64(vmlaq_n_f64(v1100, v1126, _Q1.f64[0]), v1127, _Q1, 1);
            _Q31 = v2491;
            *(_QWORD *)&_Q1.f64[0] = v2455.i64[1];
            __asm { FMLA            D20, D1, V31.D[1] }
            v1131 = vmlaq_laneq_f64(vmlaq_n_f64(v1103, v1118, _Q2.f64[0]), v1119, _Q2, 1);
            v1132 = vmlaq_laneq_f64(vmlaq_n_f64(v1104, v1122, _Q2.f64[0]), v1123, _Q2, 1);
            v1133 = vmlaq_laneq_f64(vmlaq_n_f64(v1105, v1126, _Q2.f64[0]), v1127, _Q2, 1);
            *(_QWORD *)&_Q1.f64[0] = v2461.i64[1];
            __asm { FMLA            D14, D1, V31.D[1] }
            v1134 = vmlaq_laneq_f64(vmlaq_n_f64(v1106, v1118, v1120.f64[0]), v1119, v1120, 1);
            v1135 = vmlaq_laneq_f64(vmlaq_n_f64(v1107, v1122, v1120.f64[0]), v1123, v1120, 1);
            v1136 = vmlaq_laneq_f64(vmlaq_n_f64(v1108, v1126, v1120.f64[0]), v1127, v1120, 1);
            *(_QWORD *)&_Q1.f64[0] = v2467.i64[1];
            __asm { FMLA            D25, D1, V31.D[1] }
            v1137 = vmlaq_laneq_f64(vmlaq_n_f64(v1109, v1118, v1121.f64[0]), v1119, v1121, 1);
            v1138 = vmlaq_laneq_f64(vmlaq_n_f64(v1110, v1122, v1121.f64[0]), v1123, v1121, 1);
            v1139 = vmlaq_laneq_f64(vmlaq_n_f64(v1111, v1126, v1121.f64[0]), v1127, v1121, 1);
            *(_QWORD *)&_Q1.f64[0] = v2473.i64[1];
            __asm { FMLA            D11, D1, V31.D[1] }
            v1141 = vmlaq_laneq_f64(vmlaq_n_f64(v1113, v1118, v1124.f64[0]), v1119, v1124, 1);
            v2267 = vmlaq_laneq_f64(vmlaq_n_f64(v2266, v1122, v1124.f64[0]), v1123, v1124, 1);
            v2228 = vmlaq_laneq_f64(vmlaq_n_f64(v2227, v1126, v1124.f64[0]), v1127, v1124, 1);
            *(_QWORD *)&_Q1.f64[0] = v2479.i64[1];
            __asm { FMLA            D9, D1, V31.D[1] }
            v2399 = vmlaq_laneq_f64(vmlaq_n_f64(v2398, v1118, v1125.f64[0]), v1119, v1125, 1);
            v2352 = vmlaq_laneq_f64(vmlaq_n_f64(v2351, v1122, v1125.f64[0]), v1123, v1125, 1);
            v2193 = vmlaq_laneq_f64(vmlaq_n_f64(v2192, v1126, v1125.f64[0]), v1127, v1125, 1);
            *(_QWORD *)&_Q1.f64[0] = v2485.i64[1];
            __asm { FMLA            D2, D1, V31.D[1] }
            v2308 = vmlaq_laneq_f64(vmlaq_n_f64(v2307, v1118, _Q31.f64[0]), v1119, _Q31, 1);
            v1142 = vmlaq_laneq_f64(vmlaq_n_f64(v1114, v1122, _Q31.f64[0]), v1123, _Q31, 1);
            _Q0 = (float64x2_t)v2456;
            _Q1 = (float64x2_t)v2462;
            v1145 = vmlaq_laneq_f64(vmlaq_n_f64(v1117, v1126, _Q31.f64[0]), v1127, _Q31, 1);
            _Q2.f64[0] = v2491.f64[1];
            __asm { FMLA            D19, D2, V31.D[1] }
            _Q2 = (float64x2_t)vzip1q_s64(v2456, v2462);
            v1147 = (float64x2_t)vzip2q_s64(v2456, v2462);
            v2142 = vmlaq_laneq_f64(vmlaq_n_f64(v2141, _Q2, _Q0.f64[0]), v1147, _Q0, 1);
            v1148 = (float64x2_t)v2468;
            v1149 = (float64x2_t)v2474;
            v1150 = (float64x2_t)vzip1q_s64(v2468, v2474);
            v1151 = (float64x2_t)vzip2q_s64(v2468, v2474);
            v2111 = vmlaq_laneq_f64(vmlaq_n_f64(v2110, v1150, _Q0.f64[0]), v1151, _Q0, 1);
            v1152 = (float64x2_t)v2480;
            v1153 = (float64x2_t)v2486;
            v1154 = (float64x2_t)vzip1q_s64(v2480, v2486);
            v1155 = (float64x2_t)vzip2q_s64(v2480, v2486);
            v1156 = vmlaq_laneq_f64(vmlaq_n_f64(v1128, v1154, _Q0.f64[0]), v1155, _Q0, 1);
            _Q31 = v2492;
            *(_QWORD *)&_Q0.f64[0] = v2456.i64[1];
            __asm { FMLA            D20, D0, V31.D[1] }
            v1159 = vmlaq_laneq_f64(vmlaq_n_f64(v1131, _Q2, _Q1.f64[0]), v1147, _Q1, 1);
            v1160 = vmlaq_laneq_f64(vmlaq_n_f64(v1132, v1150, _Q1.f64[0]), v1151, _Q1, 1);
            v1161 = vmlaq_laneq_f64(vmlaq_n_f64(v1133, v1154, _Q1.f64[0]), v1155, _Q1, 1);
            *(_QWORD *)&_Q0.f64[0] = v2462.i64[1];
            __asm { FMLA            D14, D0, V31.D[1] }
            v1162 = vmlaq_laneq_f64(vmlaq_n_f64(v1134, _Q2, v1148.f64[0]), v1147, v1148, 1);
            v1163 = vmlaq_laneq_f64(vmlaq_n_f64(v1135, v1150, v1148.f64[0]), v1151, v1148, 1);
            v1164 = vmlaq_laneq_f64(vmlaq_n_f64(v1136, v1154, v1148.f64[0]), v1155, v1148, 1);
            *(_QWORD *)&_Q0.f64[0] = v2468.i64[1];
            __asm { FMLA            D25, D0, V31.D[1] }
            v1165 = vmlaq_laneq_f64(vmlaq_n_f64(v1137, _Q2, v1149.f64[0]), v1147, v1149, 1);
            v1166 = vmlaq_laneq_f64(vmlaq_n_f64(v1138, v1150, v1149.f64[0]), v1151, v1149, 1);
            v1167 = vmlaq_laneq_f64(vmlaq_n_f64(v1139, v1154, v1149.f64[0]), v1155, v1149, 1);
            *(_QWORD *)&_Q0.f64[0] = v2474.i64[1];
            __asm { FMLA            D11, D0, V31.D[1] }
            v1169 = vmlaq_laneq_f64(vmlaq_n_f64(v1141, _Q2, v1152.f64[0]), v1147, v1152, 1);
            v2268 = vmlaq_laneq_f64(vmlaq_n_f64(v2267, v1150, v1152.f64[0]), v1151, v1152, 1);
            v2229 = vmlaq_laneq_f64(vmlaq_n_f64(v2228, v1154, v1152.f64[0]), v1155, v1152, 1);
            *(_QWORD *)&_Q0.f64[0] = v2480.i64[1];
            __asm { FMLA            D9, D0, V31.D[1] }
            v2400 = vmlaq_laneq_f64(vmlaq_n_f64(v2399, _Q2, v1153.f64[0]), v1147, v1153, 1);
            v2353 = vmlaq_laneq_f64(vmlaq_n_f64(v2352, v1150, v1153.f64[0]), v1151, v1153, 1);
            v2194 = vmlaq_laneq_f64(vmlaq_n_f64(v2193, v1154, v1153.f64[0]), v1155, v1153, 1);
            *(_QWORD *)&_Q0.f64[0] = v2486.i64[1];
            __asm { FMLA            D1, D0, V31.D[1] }
            v2309 = vmlaq_laneq_f64(vmlaq_n_f64(v2308, _Q2, _Q31.f64[0]), v1147, _Q31, 1);
            v1170 = vmlaq_laneq_f64(vmlaq_n_f64(v1142, v1150, _Q31.f64[0]), v1151, _Q31, 1);
            _Q0 = (float64x2_t)v2457;
            v1172 = (float64x2_t)v2463;
            v1173 = vmlaq_laneq_f64(vmlaq_n_f64(v1145, v1154, _Q31.f64[0]), v1155, _Q31, 1);
            _Q2.f64[0] = v2492.f64[1];
            __asm { FMLA            D19, D2, V31.D[1] }
            v1174 = (float64x2_t)vzip1q_s64(v2457, v2463);
            v1175 = (float64x2_t)vzip2q_s64(v2457, v2463);
            v2143 = vmlaq_laneq_f64(vmlaq_n_f64(v2142, v1174, _Q0.f64[0]), v1175, _Q0, 1);
            v1176 = (float64x2_t)v2469;
            v1177 = (float64x2_t)v2475;
            v1178 = (float64x2_t)vzip1q_s64(v2469, v2475);
            v1179 = (float64x2_t)vzip2q_s64(v2469, v2475);
            v2112 = vmlaq_laneq_f64(vmlaq_n_f64(v2111, v1178, _Q0.f64[0]), v1179, _Q0, 1);
            v1180 = (float64x2_t)v2481;
            v1181 = (float64x2_t)v2487;
            v1182 = (float64x2_t)vzip1q_s64(v2481, v2487);
            v1183 = (float64x2_t)vzip2q_s64(v2481, v2487);
            v2083 = vmlaq_laneq_f64(vmlaq_n_f64(v1156, v1182, _Q0.f64[0]), v1183, _Q0, 1);
            _Q31 = v2493;
            *(_QWORD *)&_Q0.f64[0] = v2457.i64[1];
            __asm { FMLA            D20, D0, V31.D[1] }
            *(_QWORD *)&_Q0.f64[0] = v2463.i64[1];
            __asm { FMLA            D14, D0, V31.D[1] }
            v1185 = _Q14;
            v1186 = vmlaq_laneq_f64(vmlaq_n_f64(v1162, v1174, v1176.f64[0]), v1175, v1176, 1);
            *(_QWORD *)&_Q0.f64[0] = v2469.i64[1];
            __asm { FMLA            D25, D0, V31.D[1] }
            v1187 = vmlaq_laneq_f64(vmlaq_n_f64(v1165, v1174, v1177.f64[0]), v1175, v1177, 1);
            v1188 = vmlaq_laneq_f64(vmlaq_n_f64(v1166, v1178, v1177.f64[0]), v1179, v1177, 1);
            v1189 = vmlaq_laneq_f64(vmlaq_n_f64(v1167, v1182, v1177.f64[0]), v1183, v1177, 1);
            *(_QWORD *)&_Q0.f64[0] = v2475.i64[1];
            __asm { FMLA            D11, D0, V31.D[1] }
            v1190 = _Q11;
            v2059 = vmlaq_laneq_f64(vmlaq_n_f64(v1169, v1174, v1180.f64[0]), v1175, v1180, 1);
            v2070 = v1188;
            v1191 = vmlaq_laneq_f64(vmlaq_n_f64(v2268, v1178, v1180.f64[0]), v1179, v1180, 1);
            v1192 = vmlaq_laneq_f64(vmlaq_n_f64(v2229, v1182, v1180.f64[0]), v1183, v1180, 1);
            *(_QWORD *)&_Q0.f64[0] = v2481.i64[1];
            __asm { FMLA            D9, D0, V31.D[1] }
            v2401 = vmlaq_laneq_f64(vmlaq_n_f64(v2400, v1174, v1181.f64[0]), v1175, v1181, 1);
            v2354 = vmlaq_laneq_f64(vmlaq_n_f64(v2353, v1178, v1181.f64[0]), v1179, v1181, 1);
            _Q11.f64[1] = v2174;
            v1193 = vmlaq_laneq_f64(vmlaq_n_f64(v2194, v1182, v1181.f64[0]), v1183, v1181, 1);
            *(_QWORD *)&_Q0.f64[0] = v2487.i64[1];
            __asm { FMLA            D11, D0, V31.D[1] }
            v2310 = vmlaq_laneq_f64(vmlaq_n_f64(v2309, v1174, _Q31.f64[0]), v1175, _Q31, 1);
            _Q8 = vmlaq_laneq_f64(vmlaq_n_f64(v1170, v1178, _Q31.f64[0]), v1179, _Q31, 1);
            v1194 = vmlaq_laneq_f64(vmlaq_n_f64(v1173, v1182, _Q31.f64[0]), v1183, _Q31, 1);
            _Q0.f64[0] = v2493.f64[1];
            __asm { FMLA            D19, D0, V31.D[1] }
            v1195 = vaddq_f64(*(float64x2_t *)(v1025 + 16), v2112);
            *(float64x2_t *)v1025 = vaddq_f64(*(float64x2_t *)v1025, v2143);
            *(float64x2_t *)(v1025 + 16) = v1195;
            v1196 = vaddq_f64(*(float64x2_t *)(v1025 + 32), v2083);
            *(float64x2_t *)(v1025 + 32) = v1196;
            v1196.f64[0] = *(float64_t *)(v1025 + 48);
            *(_QWORD *)(v1025 + 48) = *(_OWORD *)&vaddq_f64(v1196, _Q20);
            *(float64x2_t *)(v1025 + 56) = vaddq_f64(*(float64x2_t *)(v1025 + 56), vmlaq_laneq_f64(vmlaq_n_f64(v1159, v1174, v1172.f64[0]), v1175, v1172, 1));
            *(float64x2_t *)(v1025 + 72) = vaddq_f64(*(float64x2_t *)(v1025 + 72), vmlaq_laneq_f64(vmlaq_n_f64(v1160, v1178, v1172.f64[0]), v1179, v1172, 1));
            v1197 = vaddq_f64(*(float64x2_t *)(v1025 + 88), vmlaq_laneq_f64(vmlaq_n_f64(v1161, v1182, v1172.f64[0]), v1183, v1172, 1));
            *(float64x2_t *)(v1025 + 88) = v1197;
            v1197.f64[0] = *(float64_t *)(v1025 + 104);
            v1198 = vaddq_f64(v1197, v1185);
            *(float64_t *)(v1025 + 104) = v1198.f64[0];
            v1198.f64[0] = *(float64_t *)(v1025 + 160);
            *(_QWORD *)&v1198.f64[0] = *(_OWORD *)&vaddq_f64(v1198, _Q25);
            _Q1 = vaddq_f64(*(float64x2_t *)(v1025 + 144), vmlaq_laneq_f64(vmlaq_n_f64(v1164, v1182, v1176.f64[0]), v1183, v1176, 1));
            _Q2 = vaddq_f64(*(float64x2_t *)(v1025 + 128), vmlaq_laneq_f64(vmlaq_n_f64(v1163, v1178, v1176.f64[0]), v1179, v1176, 1));
            _Q3 = vaddq_f64(*(float64x2_t *)(v1025 + 112), v1186);
            v1176.f64[0] = *(float64_t *)(v1025 + 216);
            _Q4 = vaddq_f64(v1176, v1190);
            _Q5 = (__n128)vaddq_f64(*(float64x2_t *)(v1025 + 200), v1189);
            _Q6 = (__n128)vaddq_f64(*(float64x2_t *)(v1025 + 184), v2070);
            v1199 = vaddq_f64(*(float64x2_t *)(v1025 + 168), v1187);
            v1180.f64[0] = *(float64_t *)(v1025 + 272);
            v1200 = vaddq_f64(*(float64x2_t *)(v1025 + 256), v1192);
            v1201 = vaddq_f64(*(float64x2_t *)(v1025 + 240), v1191);
            v1202 = vaddq_f64(*(float64x2_t *)(v1025 + 224), v2059);
            _Q25.f64[0] = *(float64_t *)(v1025 + 328);
            *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(_Q25, _Q11);
            v1203 = vaddq_f64(*(float64x2_t *)(v1025 + 312), v1193);
            v1204 = vaddq_f64(*(float64x2_t *)(v1025 + 296), v2354);
            v1205 = *(float64x2_t *)(v1025 + 280);
            v1206 = vaddq_f64(v1205, v2401);
            v1205.f64[0] = *(float64_t *)(v1025 + 384);
            *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vaddq_f64(v1205, _Q19);
            v1207 = vaddq_f64(*(float64x2_t *)(v1025 + 352), _Q8);
            v1208 = vaddq_f64(*(float64x2_t *)(v1025 + 336), v2310);
            *(float64x2_t *)(v1025 + 112) = _Q3;
            *(float64x2_t *)(v1025 + 128) = _Q2;
            *(float64x2_t *)(v1025 + 144) = _Q1;
            *(float64_t *)(v1025 + 160) = v1198.f64[0];
            *(float64x2_t *)(v1025 + 168) = v1199;
            *(__n128 *)(v1025 + 184) = _Q6;
            *(__n128 *)(v1025 + 200) = _Q5;
            *(float64_t *)(v1025 + 216) = _Q4.f64[0];
            *(float64x2_t *)(v1025 + 224) = v1202;
            *(float64x2_t *)(v1025 + 240) = v1201;
            *(float64x2_t *)(v1025 + 256) = v1200;
            *(_QWORD *)(v1025 + 272) = *(_OWORD *)&vaddq_f64(v1180, _Q9);
            *(float64x2_t *)(v1025 + 280) = v1206;
            *(float64x2_t *)(v1025 + 296) = v1204;
            *(float64x2_t *)(v1025 + 312) = v1203;
            *(float64_t *)(v1025 + 328) = _Q20.f64[0];
            *(float64x2_t *)(v1025 + 336) = v1208;
            *(float64x2_t *)(v1025 + 352) = v1207;
            _Q0 = vaddq_f64(*(float64x2_t *)(v1025 + 368), v1194);
            *(float64x2_t *)(v1025 + 368) = _Q0;
            *(float64_t *)(v1025 + 384) = _Q19.f64[0];
            goto LABEL_109;
          }
          v1023 = v1024;
        }
LABEL_107:
        v1025 = sub_239CCA368(v1021, (char **)v1022, v834, v1023);
        goto LABEL_108;
      }
      v840 = *(unint64_t **)(v2416 + 40);
      v841 = v840[11] + 24 * v833;
      v843 = *(char **)v841;
      v842 = *(char **)(v841 + 8);
      if (*(char **)v841 != v842)
      {
        while (*(_DWORD *)v843 < v834)
        {
          v843 += 16;
          if (v843 == v842)
            goto LABEL_97;
        }
      }
      if (v843 != v842)
      {
        if (*(_DWORD *)v843 == v834)
        {
          v844 = v840[2] + 8 * *((_QWORD *)v843 + 1);
LABEL_98:
          _Q25 = (float64x2_t)vzip1q_s64((int64x2_t)v2452, (int64x2_t)v2458);
          v846 = (float64x2_t)vzip2q_s64((int64x2_t)v2452, (int64x2_t)v2458);
          v847 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, __src.f64[0]), v846, __src, 1);
          v848 = (float64x2_t)vzip1q_s64((int64x2_t)v2464, (int64x2_t)v2470);
          v849 = (float64x2_t)vzip2q_s64((int64x2_t)v2464, (int64x2_t)v2470);
          v850 = vmlaq_laneq_f64(vmulq_n_f64(v848, __src.f64[0]), v849, __src, 1);
          v851 = (float64x2_t)vzip1q_s64((int64x2_t)v2476, (int64x2_t)v2482);
          v852 = (float64x2_t)vzip2q_s64((int64x2_t)v2476, (int64x2_t)v2482);
          _Q17 = vmlaq_laneq_f64(vmulq_n_f64(v851, __src.f64[0]), v852, __src, 1);
          _V24.D[1] = v2488.f64[1];
          _Q16 = vmulq_f64(v2488, __src);
          _D0 = __src.f64[1];
          __asm { FMLA            D16, D0, V24.D[1] }
          _Q7 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, v2421.f64[0]), v846, v2421, 1);
          v858 = vmlaq_laneq_f64(vmulq_n_f64(v848, v2421.f64[0]), v849, v2421, 1);
          v859 = vmlaq_laneq_f64(vmulq_n_f64(v851, v2421.f64[0]), v852, v2421, 1);
          _Q1 = vmulq_f64(v2488, v2421);
          _D0 = v2421.f64[1];
          __asm { FMLA            D1, D0, V24.D[1] }
          v2173 = _Q1.f64[1];
          v862 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)v2425.i64), v846, (float64x2_t)v2425, 1);
          v863 = vmlaq_laneq_f64(vmulq_n_f64(v848, *(double *)v2425.i64), v849, (float64x2_t)v2425, 1);
          v864 = vmlaq_laneq_f64(vmulq_n_f64(v851, *(double *)v2425.i64), v852, (float64x2_t)v2425, 1);
          _Q12 = vmulq_f64(v2488, (float64x2_t)v2425);
          _D2 = *(double *)&v2425.i64[1];
          __asm { FMLA            D12, D2, V24.D[1] }
          v867 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)v2429.i64), v846, (float64x2_t)v2429, 1);
          _Q10 = vmlaq_laneq_f64(vmulq_n_f64(v848, *(double *)v2429.i64), v849, (float64x2_t)v2429, 1);
          v2137 = vmlaq_laneq_f64(vmulq_n_f64(v851, *(double *)v2429.i64), v852, (float64x2_t)v2429, 1);
          _Q2 = vmulq_f64(v2488, (float64x2_t)v2429);
          *(_QWORD *)&_Q1.f64[0] = v2429.i64[1];
          __asm { FMLA            D2, D1, V24.D[1] }
          v2124 = _Q2.f64[1];
          v870 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)v2434.i64), v846, (float64x2_t)v2434, 1);
          _Q14 = vmlaq_laneq_f64(vmulq_n_f64(v848, *(double *)v2434.i64), v849, (float64x2_t)v2434, 1);
          v2081 = vmlaq_laneq_f64(vmulq_n_f64(v851, *(double *)v2434.i64), v852, (float64x2_t)v2434, 1);
          _Q1 = vmulq_f64(v2488, (float64x2_t)v2434);
          _D0 = *(double *)&v2434.i64[1];
          __asm { FMLA            D1, D0, V24.D[1] }
          v2204 = _Q1.f64[1];
          v2391 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)v2440.i64), v846, (float64x2_t)v2440, 1);
          v2345 = vmlaq_laneq_f64(vmulq_n_f64(v848, *(double *)v2440.i64), v849, (float64x2_t)v2440, 1);
          v2068 = vmlaq_laneq_f64(vmulq_n_f64(v851, *(double *)v2440.i64), v852, (float64x2_t)v2440, 1);
          _Q1 = vmulq_f64(v2488, (float64x2_t)v2440);
          _D0 = *(double *)&v2440.i64[1];
          __asm { FMLA            D1, D0, V24.D[1] }
          v2062 = _Q1.f64[1];
          v876 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, v2446.f64[0]), v846, v2446, 1);
          v877 = vmlaq_laneq_f64(vmulq_n_f64(v848, v2446.f64[0]), v849, v2446, 1);
          v878 = vmlaq_laneq_f64(vmulq_n_f64(v851, v2446.f64[0]), v852, v2446, 1);
          _Q28 = vmulq_f64(v2488, v2446);
          _D0 = v2446.f64[1];
          __asm { FMLA            D28, D0, V24.D[1] }
          v881 = (float64x2_t)vzip1q_s64(v2465, v2471);
          _Q24 = (float64x2_t)vzip2q_s64(v2465, v2471);
          v883 = (float64x2_t)vzip1q_s64(v2477, v2483);
          _Q30 = (float64x2_t)vzip2q_s64(v2477, v2483);
          v885 = (float64x2_t)vzip1q_s64(v2453, v2459);
          v886 = (float64x2_t)vzip2q_s64(v2453, v2459);
          v887 = vmlaq_laneq_f64(vmlaq_n_f64(v847, v885, *(double *)v2418), v886, *(float64x2_t *)v2418, 1);
          v888 = vmlaq_laneq_f64(vmlaq_n_f64(v850, v881, *(double *)v2418), _Q24, *(float64x2_t *)v2418, 1);
          v2220 = vmlaq_laneq_f64(vmlaq_n_f64(_Q17, v883, *(double *)v2418), _Q30, *(float64x2_t *)v2418, 1);
          _V0.D[1] = v2489.f64[1];
          _D3 = *(_QWORD *)&v2418[8];
          __asm { FMLA            D16, D3, V0.D[1] }
          v891 = vmlaq_laneq_f64(vmlaq_n_f64(_Q7, v885, *(double *)v2422), v886, *(float64x2_t *)v2422, 1);
          v892 = vmlaq_laneq_f64(vmlaq_n_f64(v858, v881, *(double *)v2422), _Q24, *(float64x2_t *)v2422, 1);
          v893 = vmlaq_laneq_f64(vmlaq_n_f64(v859, v883, *(double *)v2422), _Q30, *(float64x2_t *)v2422, 1);
          _Q17.f64[1] = v2173;
          _D3 = *(_QWORD *)&v2422[8];
          __asm { FMLA            D17, D3, V0.D[1] }
          v895 = vmlaq_laneq_f64(vmlaq_n_f64(v862, v885, *(double *)v2426), v886, *(float64x2_t *)v2426, 1);
          v896 = vmlaq_laneq_f64(vmlaq_n_f64(v863, v881, *(double *)v2426), _Q24, *(float64x2_t *)v2426, 1);
          v897 = vmlaq_laneq_f64(vmlaq_n_f64(v864, v883, *(double *)v2426), _Q30, *(float64x2_t *)v2426, 1);
          _D3 = *(_QWORD *)&v2426[8];
          __asm { FMLA            D12, D3, V0.D[1] }
          v899 = vmlaq_laneq_f64(vmlaq_n_f64(v867, v885, *(double *)v2430), v886, *(float64x2_t *)v2430, 1);
          v2260 = vmlaq_laneq_f64(vmlaq_n_f64(_Q10, v881, *(double *)v2430), _Q24, *(float64x2_t *)v2430, 1);
          v900 = vmlaq_laneq_f64(vmlaq_n_f64(v2137, v883, *(double *)v2430), _Q30, *(float64x2_t *)v2430, 1);
          _Q10.f64[1] = v2124;
          _D3 = *(_QWORD *)&v2430[8];
          __asm { FMLA            D10, D3, V0.D[1] }
          v902 = vmlaq_laneq_f64(vmlaq_n_f64(v870, v885, *(double *)v2435.i64), v886, (float64x2_t)v2435, 1);
          v2301 = vmlaq_laneq_f64(vmlaq_n_f64(_Q14, v881, *(double *)v2435.i64), _Q24, (float64x2_t)v2435, 1);
          v903 = vmlaq_laneq_f64(vmlaq_n_f64(v2081, v883, *(double *)v2435.i64), _Q30, (float64x2_t)v2435, 1);
          _D3 = *(double *)&v2435.i64[1];
          __asm { FMLA            D7, D3, V0.D[1] }
          v2392 = vmlaq_laneq_f64(vmlaq_n_f64(v2391, v885, *(double *)v2441.i64), v886, (float64x2_t)v2441, 1);
          v905 = vmlaq_laneq_f64(vmlaq_n_f64(v2345, v881, *(double *)v2441.i64), _Q24, (float64x2_t)v2441, 1);
          _Q25.f64[1] = v2062;
          v906 = vmlaq_laneq_f64(vmlaq_n_f64(v2068, v883, *(double *)v2441.i64), _Q30, (float64x2_t)v2441, 1);
          _D3 = *(double *)&v2441.i64[1];
          __asm { FMLA            D25, D3, V0.D[1] }
          v908 = vmlaq_laneq_f64(vmlaq_n_f64(v876, v885, v2447.f64[0]), v886, v2447, 1);
          v909 = vmlaq_laneq_f64(vmlaq_n_f64(v877, v881, v2447.f64[0]), _Q24, v2447, 1);
          v910 = vmlaq_laneq_f64(vmlaq_n_f64(v878, v883, v2447.f64[0]), _Q30, v2447, 1);
          _D3 = v2447.f64[1];
          __asm { FMLA            D28, D3, V0.D[1] }
          v912 = (float64x2_t)vzip1q_s64(v2466, v2472);
          v913 = (float64x2_t)vzip2q_s64(v2466, v2472);
          v914 = (float64x2_t)vzip1q_s64(v2478, v2484);
          v915 = (float64x2_t)vzip2q_s64(v2478, v2484);
          v916 = (float64x2_t)vzip1q_s64(v2454, v2460);
          _Q2 = (float64x2_t)vzip2q_s64(v2454, v2460);
          v918 = vmlaq_laneq_f64(vmlaq_n_f64(v887, v916, *(double *)&v2418[16]), _Q2, *(float64x2_t *)&v2418[16], 1);
          v919 = vmlaq_laneq_f64(vmlaq_n_f64(v888, v912, *(double *)&v2418[16]), v913, *(float64x2_t *)&v2418[16], 1);
          v2221 = vmlaq_laneq_f64(vmlaq_n_f64(v2220, v914, *(double *)&v2418[16]), v915, *(float64x2_t *)&v2418[16], 1);
          _Q30.f64[1] = v2490.f64[1];
          _Q24.f64[0] = *(float64_t *)&v2418[24];
          __asm { FMLA            D16, D24, V30.D[1] }
          v920 = vmlaq_laneq_f64(vmlaq_n_f64(v891, v916, *(double *)&v2422[16]), _Q2, *(float64x2_t *)&v2422[16], 1);
          v921 = vmlaq_laneq_f64(vmlaq_n_f64(v892, v912, *(double *)&v2422[16]), v913, *(float64x2_t *)&v2422[16], 1);
          v922 = vmlaq_laneq_f64(vmlaq_n_f64(v893, v914, *(double *)&v2422[16]), v915, *(float64x2_t *)&v2422[16], 1);
          _Q24.f64[0] = *(float64_t *)&v2422[24];
          __asm { FMLA            D17, D24, V30.D[1] }
          v923 = vmlaq_laneq_f64(vmlaq_n_f64(v895, v916, *(double *)&v2426[16]), _Q2, *(float64x2_t *)&v2426[16], 1);
          v924 = vmlaq_laneq_f64(vmlaq_n_f64(v896, v912, *(double *)&v2426[16]), v913, *(float64x2_t *)&v2426[16], 1);
          v925 = vmlaq_laneq_f64(vmlaq_n_f64(v897, v914, *(double *)&v2426[16]), v915, *(float64x2_t *)&v2426[16], 1);
          _Q24.f64[0] = *(float64_t *)&v2426[24];
          __asm { FMLA            D12, D24, V30.D[1] }
          v926 = vmlaq_laneq_f64(vmlaq_n_f64(v899, v916, *(double *)&v2430[16]), _Q2, *(float64x2_t *)&v2430[16], 1);
          v2261 = vmlaq_laneq_f64(vmlaq_n_f64(v2260, v912, *(double *)&v2430[16]), v913, *(float64x2_t *)&v2430[16], 1);
          v927 = vmlaq_laneq_f64(vmlaq_n_f64(v900, v914, *(double *)&v2430[16]), v915, *(float64x2_t *)&v2430[16], 1);
          _Q24.f64[0] = *(float64_t *)&v2430[24];
          __asm { FMLA            D10, D24, V30.D[1] }
          v928 = vmlaq_laneq_f64(vmlaq_n_f64(v902, v916, *(double *)v2436.i64), _Q2, (float64x2_t)v2436, 1);
          v2302 = vmlaq_laneq_f64(vmlaq_n_f64(v2301, v912, *(double *)v2436.i64), v913, (float64x2_t)v2436, 1);
          v929 = vmlaq_laneq_f64(vmlaq_n_f64(v903, v914, *(double *)v2436.i64), v915, (float64x2_t)v2436, 1);
          *(_QWORD *)&_Q24.f64[0] = v2436.i64[1];
          __asm { FMLA            D14, D24, V30.D[1] }
          v2346 = vmlaq_laneq_f64(vmlaq_n_f64(v905, v912, *(double *)v2442.i64), v913, (float64x2_t)v2442, 1);
          v2393 = vmlaq_laneq_f64(vmlaq_n_f64(v2392, v916, *(double *)v2442.i64), _Q2, (float64x2_t)v2442, 1);
          v930 = vmlaq_laneq_f64(vmlaq_n_f64(v906, v914, *(double *)v2442.i64), v915, (float64x2_t)v2442, 1);
          *(_QWORD *)&_Q24.f64[0] = v2442.i64[1];
          __asm { FMLA            D25, D24, V30.D[1] }
          v931 = vmlaq_laneq_f64(vmlaq_n_f64(v908, v916, v2448.f64[0]), _Q2, v2448, 1);
          v932 = vmlaq_laneq_f64(vmlaq_n_f64(v909, v912, v2448.f64[0]), v913, v2448, 1);
          v933 = vmlaq_laneq_f64(vmlaq_n_f64(v910, v914, v2448.f64[0]), v915, v2448, 1);
          _Q2.f64[0] = v2448.f64[1];
          __asm { FMLA            D28, D2, V30.D[1] }
          v934 = (float64x2_t)vzip1q_s64(v2455, v2461);
          v935 = (float64x2_t)vzip2q_s64(v2455, v2461);
          v936 = (float64x2_t)vzip1q_s64(v2467, v2473);
          v937 = (float64x2_t)vzip2q_s64(v2467, v2473);
          v938 = (float64x2_t)vzip1q_s64(v2479, v2485);
          _Q2 = (float64x2_t)vzip2q_s64(v2479, v2485);
          v940 = vmlaq_laneq_f64(vmlaq_n_f64(v918, v934, v2419.f64[0]), v935, v2419, 1);
          v941 = vmlaq_laneq_f64(vmlaq_n_f64(v919, v936, v2419.f64[0]), v937, v2419, 1);
          v2222 = vmlaq_laneq_f64(vmlaq_n_f64(v2221, v938, v2419.f64[0]), _Q2, v2419, 1);
          _Q30.f64[1] = v2491.f64[1];
          _Q24.f64[0] = v2419.f64[1];
          __asm { FMLA            D16, D24, V30.D[1] }
          v942 = vmlaq_laneq_f64(vmlaq_n_f64(v920, v934, v2423.f64[0]), v935, v2423, 1);
          v943 = vmlaq_laneq_f64(vmlaq_n_f64(v921, v936, v2423.f64[0]), v937, v2423, 1);
          v944 = vmlaq_laneq_f64(vmlaq_n_f64(v922, v938, v2423.f64[0]), _Q2, v2423, 1);
          _Q24.f64[0] = v2423.f64[1];
          __asm { FMLA            D17, D24, V30.D[1] }
          v945 = vmlaq_laneq_f64(vmlaq_n_f64(v923, v934, *(double *)v2427.i64), v935, (float64x2_t)v2427, 1);
          v946 = vmlaq_laneq_f64(vmlaq_n_f64(v924, v936, *(double *)v2427.i64), v937, (float64x2_t)v2427, 1);
          v947 = vmlaq_laneq_f64(vmlaq_n_f64(v925, v938, *(double *)v2427.i64), _Q2, (float64x2_t)v2427, 1);
          *(_QWORD *)&_Q24.f64[0] = v2427.i64[1];
          __asm { FMLA            D12, D24, V30.D[1] }
          v948 = vmlaq_laneq_f64(vmlaq_n_f64(v926, v934, *(double *)v2431.i64), v935, (float64x2_t)v2431, 1);
          v2262 = vmlaq_laneq_f64(vmlaq_n_f64(v2261, v936, *(double *)v2431.i64), v937, (float64x2_t)v2431, 1);
          v949 = vmlaq_laneq_f64(vmlaq_n_f64(v927, v938, *(double *)v2431.i64), _Q2, (float64x2_t)v2431, 1);
          *(_QWORD *)&_Q24.f64[0] = v2431.i64[1];
          __asm { FMLA            D10, D24, V30.D[1] }
          v950 = vmlaq_laneq_f64(vmlaq_n_f64(v928, v934, *(double *)v2437.i64), v935, (float64x2_t)v2437, 1);
          v2303 = vmlaq_laneq_f64(vmlaq_n_f64(v2302, v936, *(double *)v2437.i64), v937, (float64x2_t)v2437, 1);
          v951 = vmlaq_laneq_f64(vmlaq_n_f64(v929, v938, *(double *)v2437.i64), _Q2, (float64x2_t)v2437, 1);
          _Q14.f64[1] = v2204;
          *(_QWORD *)&_Q24.f64[0] = v2437.i64[1];
          __asm { FMLA            D14, D24, V30.D[1] }
          v2394 = vmlaq_laneq_f64(vmlaq_n_f64(v2393, v934, *(double *)v2443.i64), v935, (float64x2_t)v2443, 1);
          v2347 = vmlaq_laneq_f64(vmlaq_n_f64(v2346, v936, *(double *)v2443.i64), v937, (float64x2_t)v2443, 1);
          v952 = vmlaq_laneq_f64(vmlaq_n_f64(v930, v938, *(double *)v2443.i64), _Q2, (float64x2_t)v2443, 1);
          *(_QWORD *)&_Q24.f64[0] = v2443.i64[1];
          __asm { FMLA            D25, D24, V30.D[1] }
          v953 = vmlaq_laneq_f64(vmlaq_n_f64(v931, v934, v2449.f64[0]), v935, v2449, 1);
          v954 = vmlaq_laneq_f64(vmlaq_n_f64(v932, v936, v2449.f64[0]), v937, v2449, 1);
          v955 = vmlaq_laneq_f64(vmlaq_n_f64(v933, v938, v2449.f64[0]), _Q2, v2449, 1);
          _Q2.f64[0] = v2449.f64[1];
          __asm { FMLA            D28, D2, V30.D[1] }
          v956 = (float64x2_t)vzip1q_s64(v2456, v2462);
          _Q0 = (float64x2_t)vzip2q_s64(v2456, v2462);
          v958 = (float64x2_t)vzip1q_s64(v2468, v2474);
          v959 = (float64x2_t)vzip2q_s64(v2468, v2474);
          v960 = (float64x2_t)vzip1q_s64(v2480, v2486);
          _Q2 = (float64x2_t)vzip2q_s64(v2480, v2486);
          v962 = vmlaq_laneq_f64(vmlaq_n_f64(v940, v956, *(double *)v2420), _Q0, *(float64x2_t *)v2420, 1);
          _Q6 = vmlaq_laneq_f64(vmlaq_n_f64(v941, v958, *(double *)v2420), v959, *(float64x2_t *)v2420, 1);
          v2223 = vmlaq_laneq_f64(vmlaq_n_f64(v2222, v960, *(double *)v2420), _Q2, *(float64x2_t *)v2420, 1);
          _Q30.f64[1] = v2492.f64[1];
          _Q24.f64[0] = *(float64_t *)&v2420[8];
          __asm { FMLA            D16, D24, V30.D[1] }
          v964 = vmlaq_laneq_f64(vmlaq_n_f64(v942, v956, *(double *)v2424), _Q0, *(float64x2_t *)v2424, 1);
          v965 = vmlaq_laneq_f64(vmlaq_n_f64(v943, v958, *(double *)v2424), v959, *(float64x2_t *)v2424, 1);
          v966 = vmlaq_laneq_f64(vmlaq_n_f64(v944, v960, *(double *)v2424), _Q2, *(float64x2_t *)v2424, 1);
          _Q24.f64[0] = *(float64_t *)&v2424[8];
          __asm { FMLA            D17, D24, V30.D[1] }
          v967 = vmlaq_laneq_f64(vmlaq_n_f64(v945, v956, *(double *)v2428), _Q0, *(float64x2_t *)v2428, 1);
          v968 = vmlaq_laneq_f64(vmlaq_n_f64(v946, v958, *(double *)v2428), v959, *(float64x2_t *)v2428, 1);
          v969 = vmlaq_laneq_f64(vmlaq_n_f64(v947, v960, *(double *)v2428), _Q2, *(float64x2_t *)v2428, 1);
          _Q24.f64[0] = *(float64_t *)&v2428[8];
          __asm { FMLA            D12, D24, V30.D[1] }
          v970 = vmlaq_laneq_f64(vmlaq_n_f64(v948, v956, *(double *)v2432.i64), _Q0, (float64x2_t)v2432, 1);
          v2263 = vmlaq_laneq_f64(vmlaq_n_f64(v2262, v958, *(double *)v2432.i64), v959, (float64x2_t)v2432, 1);
          v971 = vmlaq_laneq_f64(vmlaq_n_f64(v949, v960, *(double *)v2432.i64), _Q2, (float64x2_t)v2432, 1);
          *(_QWORD *)&_Q24.f64[0] = v2432.i64[1];
          __asm { FMLA            D10, D24, V30.D[1] }
          v972 = vmlaq_laneq_f64(vmlaq_n_f64(v950, v956, *(double *)v2438.i64), _Q0, (float64x2_t)v2438, 1);
          v2304 = vmlaq_laneq_f64(vmlaq_n_f64(v2303, v958, *(double *)v2438.i64), v959, (float64x2_t)v2438, 1);
          v973 = vmlaq_laneq_f64(vmlaq_n_f64(v951, v960, *(double *)v2438.i64), _Q2, (float64x2_t)v2438, 1);
          *(_QWORD *)&_Q24.f64[0] = v2438.i64[1];
          __asm { FMLA            D14, D24, V30.D[1] }
          v2395 = vmlaq_laneq_f64(vmlaq_n_f64(v2394, v956, *(double *)v2444.i64), _Q0, (float64x2_t)v2444, 1);
          v2348 = vmlaq_laneq_f64(vmlaq_n_f64(v2347, v958, *(double *)v2444.i64), v959, (float64x2_t)v2444, 1);
          v974 = vmlaq_laneq_f64(vmlaq_n_f64(v952, v960, *(double *)v2444.i64), _Q2, (float64x2_t)v2444, 1);
          *(_QWORD *)&_Q24.f64[0] = v2444.i64[1];
          __asm { FMLA            D25, D24, V30.D[1] }
          v975 = vmlaq_laneq_f64(vmlaq_n_f64(v953, v956, v2450.f64[0]), _Q0, v2450, 1);
          v976 = vmlaq_laneq_f64(vmlaq_n_f64(v954, v958, v2450.f64[0]), v959, v2450, 1);
          v977 = vmlaq_laneq_f64(vmlaq_n_f64(v955, v960, v2450.f64[0]), _Q2, v2450, 1);
          _Q2.f64[0] = v2450.f64[1];
          __asm { FMLA            D28, D2, V30.D[1] }
          v978 = (float64x2_t)vzip1q_s64(v2457, v2463);
          v979 = (float64x2_t)vzip2q_s64(v2457, v2463);
          v980 = (float64x2_t)vzip1q_s64(v2469, v2475);
          v981 = (float64x2_t)vzip2q_s64(v2469, v2475);
          v982 = (float64x2_t)vzip1q_s64(v2481, v2487);
          v983 = (float64x2_t)vzip2q_s64(v2481, v2487);
          v2107 = vmlaq_laneq_f64(vmlaq_n_f64(v962, v978, *(double *)&v2420[16]), v979, *(float64x2_t *)&v2420[16], 1);
          v2138 = vmlaq_laneq_f64(vmlaq_n_f64(_Q6, v980, *(double *)&v2420[16]), v981, *(float64x2_t *)&v2420[16], 1);
          v984 = vmlaq_laneq_f64(vmlaq_n_f64(v2223, v982, *(double *)&v2420[16]), v983, *(float64x2_t *)&v2420[16], 1);
          _Q30.f64[1] = v2493.f64[1];
          _Q24.f64[0] = *(float64_t *)&v2420[24];
          __asm { FMLA            D16, D24, V30.D[1] }
          v2160 = vmlaq_laneq_f64(vmlaq_n_f64(v964, v978, *(double *)&v2424[16]), v979, *(float64x2_t *)&v2424[16], 1);
          v2189 = _Q16;
          v985 = vmlaq_laneq_f64(vmlaq_n_f64(v965, v980, *(double *)&v2424[16]), v981, *(float64x2_t *)&v2424[16], 1);
          v986 = vmlaq_laneq_f64(vmlaq_n_f64(v966, v982, *(double *)&v2424[16]), v983, *(float64x2_t *)&v2424[16], 1);
          _Q24.f64[0] = *(float64_t *)&v2424[24];
          __asm { FMLA            D17, D24, V30.D[1] }
          v987 = _Q17;
          v2224 = vmlaq_laneq_f64(vmlaq_n_f64(v967, v978, *(double *)&v2428[16]), v979, *(float64x2_t *)&v2428[16], 1);
          v988 = vmlaq_laneq_f64(vmlaq_n_f64(v968, v980, *(double *)&v2428[16]), v981, *(float64x2_t *)&v2428[16], 1);
          v989 = vmlaq_laneq_f64(vmlaq_n_f64(v969, v982, *(double *)&v2428[16]), v983, *(float64x2_t *)&v2428[16], 1);
          _Q24.f64[0] = *(float64_t *)&v2428[24];
          __asm { FMLA            D12, D24, V30.D[1] }
          v990 = _Q12;
          v991 = vmlaq_laneq_f64(vmlaq_n_f64(v970, v978, *(double *)v2433.i64), v979, (float64x2_t)v2433, 1);
          v992 = vmlaq_laneq_f64(vmlaq_n_f64(v2263, v980, *(double *)v2433.i64), v981, (float64x2_t)v2433, 1);
          v993 = vmlaq_laneq_f64(vmlaq_n_f64(v971, v982, *(double *)v2433.i64), v983, (float64x2_t)v2433, 1);
          _Q6.f64[1] = _Q10.f64[1];
          *(_QWORD *)&_Q24.f64[0] = v2433.i64[1];
          __asm { FMLA            D6, D24, V30.D[1] }
          v994 = vmlaq_laneq_f64(vmlaq_n_f64(v972, v978, *(double *)v2439.i64), v979, (float64x2_t)v2439, 1);
          v995 = vmlaq_laneq_f64(vmlaq_n_f64(v2304, v980, *(double *)v2439.i64), v981, (float64x2_t)v2439, 1);
          v996 = vmlaq_laneq_f64(vmlaq_n_f64(v973, v982, *(double *)v2439.i64), v983, (float64x2_t)v2439, 1);
          _Q0.f64[1] = _Q14.f64[1];
          *(_QWORD *)&_Q24.f64[0] = v2439.i64[1];
          __asm { FMLA            D0, D24, V30.D[1] }
          v997 = _Q0;
          v998 = vmlaq_laneq_f64(vmlaq_n_f64(v2395, v978, v2445.n128_f64[0]), v979, (float64x2_t)v2445, 1);
          v999 = vmlaq_laneq_f64(vmlaq_n_f64(v2348, v980, v2445.n128_f64[0]), v981, (float64x2_t)v2445, 1);
          v1000 = vmlaq_laneq_f64(vmlaq_n_f64(v974, v982, v2445.n128_f64[0]), v983, (float64x2_t)v2445, 1);
          *(_QWORD *)&_Q24.f64[0] = v2445.n128_u64[1];
          __asm { FMLA            D25, D24, V30.D[1] }
          v1001 = vmlaq_laneq_f64(vmlaq_n_f64(v975, v978, v2451.f64[0]), v979, v2451, 1);
          v1002 = vmlaq_laneq_f64(vmlaq_n_f64(v976, v980, v2451.f64[0]), v981, v2451, 1);
          v1003 = vmlaq_laneq_f64(vmlaq_n_f64(v977, v982, v2451.f64[0]), v983, v2451, 1);
          _Q0.f64[0] = v2451.f64[1];
          __asm { FMLA            D28, D0, V30.D[1] }
          v1004 = vaddq_f64(*(float64x2_t *)(v844 + 32), v984);
          v1005 = vaddq_f64(*(float64x2_t *)v844, v2107);
          *(float64x2_t *)(v844 + 16) = vaddq_f64(*(float64x2_t *)(v844 + 16), v2138);
          *(float64x2_t *)(v844 + 32) = v1004;
          *(float64x2_t *)v844 = v1005;
          v1005.f64[0] = *(float64_t *)(v844 + 48);
          *(_QWORD *)(v844 + 48) = *(_OWORD *)&vaddq_f64(v1005, v2189);
          *(float64x2_t *)(v844 + 88) = vaddq_f64(*(float64x2_t *)(v844 + 88), v986);
          *(float64x2_t *)(v844 + 72) = vaddq_f64(*(float64x2_t *)(v844 + 72), v985);
          v1006 = vaddq_f64(*(float64x2_t *)(v844 + 56), v2160);
          *(float64x2_t *)(v844 + 56) = v1006;
          v1006.f64[0] = *(float64_t *)(v844 + 104);
          *(_QWORD *)(v844 + 104) = *(_OWORD *)&vaddq_f64(v1006, v987);
          v1007 = vaddq_f64(*(float64x2_t *)(v844 + 144), v989);
          *(float64x2_t *)(v844 + 144) = v1007;
          v1007.f64[0] = *(float64_t *)(v844 + 160);
          *(_QWORD *)&v1007.f64[0] = *(_OWORD *)&vaddq_f64(v1007, v990);
          v1008 = vaddq_f64(*(float64x2_t *)(v844 + 128), v988);
          v1004.f64[0] = *(float64_t *)(v844 + 216);
          *(_QWORD *)&v1004.f64[0] = *(_OWORD *)&vaddq_f64(v1004, _Q6);
          v1009 = vaddq_f64(*(float64x2_t *)(v844 + 168), v991);
          v1010 = vaddq_f64(*(float64x2_t *)(v844 + 184), v992);
          v1011 = vaddq_f64(*(float64x2_t *)(v844 + 200), v993);
          v986.f64[0] = *(float64_t *)(v844 + 272);
          v1012 = vaddq_f64(*(float64x2_t *)(v844 + 224), v994);
          v1013 = vaddq_f64(*(float64x2_t *)(v844 + 240), v995);
          v1014 = vaddq_f64(*(float64x2_t *)(v844 + 256), v996);
          v988.f64[0] = *(float64_t *)(v844 + 328);
          *(_QWORD *)&v984.f64[0] = *(_OWORD *)&vaddq_f64(v988, _Q25);
          v1015 = vaddq_f64(*(float64x2_t *)(v844 + 280), v998);
          v1016 = vaddq_f64(*(float64x2_t *)(v844 + 296), v999);
          v1017 = *(float64x2_t *)(v844 + 312);
          v1018 = vaddq_f64(v1017, v1000);
          v1017.f64[0] = *(float64_t *)(v844 + 384);
          v1019 = vaddq_f64(*(float64x2_t *)(v844 + 336), v1001);
          v1020 = vaddq_f64(*(float64x2_t *)(v844 + 368), v1003);
          *(float64x2_t *)(v844 + 112) = vaddq_f64(*(float64x2_t *)(v844 + 112), v2224);
          *(float64x2_t *)(v844 + 128) = v1008;
          *(float64_t *)(v844 + 160) = v1007.f64[0];
          *(float64x2_t *)(v844 + 200) = v1011;
          *(float64x2_t *)(v844 + 184) = v1010;
          *(float64x2_t *)(v844 + 168) = v1009;
          *(float64_t *)(v844 + 216) = v1004.f64[0];
          *(float64x2_t *)(v844 + 240) = v1013;
          *(float64x2_t *)(v844 + 256) = v1014;
          *(float64x2_t *)(v844 + 224) = v1012;
          *(_QWORD *)(v844 + 272) = *(_OWORD *)&vaddq_f64(v986, v997);
          *(float64x2_t *)(v844 + 296) = v1016;
          *(float64x2_t *)(v844 + 312) = v1018;
          *(float64x2_t *)(v844 + 280) = v1015;
          *(float64_t *)(v844 + 328) = v984.f64[0];
          *(float64x2_t *)(v844 + 352) = vaddq_f64(*(float64x2_t *)(v844 + 352), v1002);
          *(float64x2_t *)(v844 + 368) = v1020;
          *(float64x2_t *)(v844 + 336) = v1019;
          *(_QWORD *)(v844 + 384) = *(_OWORD *)&vaddq_f64(v1017, _Q28);
          goto LABEL_99;
        }
        v842 = v843;
      }
LABEL_97:
      v844 = sub_239CCA368(v840, (char **)v841, v834, v842);
      goto LABEL_98;
    }
LABEL_109:
    if (!v830)
      goto LABEL_132;
    v1209 = *(unint64_t **)(v2416 + 40);
    v1210 = v1209[11] + 24 * v833;
    v1212 = *(char **)v1210;
    v1211 = *(char **)(v1210 + 8);
    if (*(char **)v1210 != v1211)
    {
      while (*(_DWORD *)v1212 < v833)
      {
        v1212 += 16;
        if (v1212 == v1211)
          goto LABEL_118;
      }
    }
    if (v1212 == v1211)
      goto LABEL_118;
    if (*(_DWORD *)v1212 != v833)
    {
      v1211 = v1212;
LABEL_118:
      v1213 = sub_239CCA368(v1209, (char **)v1210, v833, v1211);
      goto LABEL_119;
    }
    v1213 = v1209[2] + 8 * *((_QWORD *)v1212 + 1);
LABEL_119:
    v1214 = (float64x2_t)vzip1q_s64((int64x2_t)__src, (int64x2_t)v2421);
    v1215 = (float64x2_t)vzip2q_s64((int64x2_t)__src, (int64x2_t)v2421);
    v1216 = vmlaq_laneq_f64(vmulq_n_f64(v1214, __src.f64[0]), v1215, __src, 1);
    _Q27 = (float64x2_t)vzip1q_s64(v2425, v2429);
    v1218 = (float64x2_t)vzip2q_s64(v2425, v2429);
    v1219 = (float64x2_t)vzip1q_s64(v2434, v2440);
    v1220 = (float64x2_t)vzip2q_s64(v2434, v2440);
    v1221 = vmlaq_laneq_f64(vmulq_n_f64(v1219, __src.f64[0]), v1220, __src, 1);
    _Q25 = v2446;
    _Q7 = vmulq_f64(v2446, __src);
    _D4 = __src.f64[1];
    __asm { FMLA            D7, D4, V25.D[1] }
    _Q16 = vmlaq_laneq_f64(vmulq_n_f64(v1214, v2421.f64[0]), v1215, v2421, 1);
    v1226 = vmlaq_laneq_f64(vmulq_n_f64(v1219, v2421.f64[0]), v1220, v2421, 1);
    _Q29 = vmulq_f64(v2446, v2421);
    _D3 = v2421.f64[1];
    __asm { FMLA            D29, D3, V25.D[1] }
    v1229 = vmlaq_laneq_f64(vmulq_n_f64(v1214, *(double *)v2425.i64), v1215, (float64x2_t)v2425, 1);
    v1230 = vmlaq_laneq_f64(vmulq_n_f64(v1219, *(double *)v2425.i64), v1220, (float64x2_t)v2425, 1);
    _Q13 = vmulq_f64(v2446, (float64x2_t)v2425);
    _D2 = *(double *)&v2425.i64[1];
    __asm { FMLA            D13, D2, V25.D[1] }
    v2402 = vmlaq_laneq_f64(vmulq_n_f64(v1214, *(double *)v2429.i64), v1215, (float64x2_t)v2429, 1);
    v2071 = vmlaq_laneq_f64(vmulq_n_f64(v1219, *(double *)v2429.i64), v1220, (float64x2_t)v2429, 1);
    _Q2 = vmulq_f64(v2446, (float64x2_t)v2429);
    _D1 = *(double *)&v2429.i64[1];
    __asm { FMLA            D2, D1, V25.D[1] }
    v2055 = vmlaq_laneq_f64(vmulq_n_f64(v1214, *(double *)v2434.i64), v1215, (float64x2_t)v2434, 1);
    v2063 = _Q2.f64[1];
    v2047 = vmlaq_laneq_f64(vmulq_n_f64(v1219, *(double *)v2434.i64), v1220, (float64x2_t)v2434, 1);
    _Q1 = vmulq_f64(v2446, (float64x2_t)v2434);
    _D0 = *(double *)&v2434.i64[1];
    __asm { FMLA            D1, D0, V25.D[1] }
    v2045 = _Q1.f64[1];
    v2355 = vmlaq_laneq_f64(vmulq_n_f64(v1214, *(double *)v2440.i64), v1215, (float64x2_t)v2440, 1);
    v2311 = vmlaq_laneq_f64(vmulq_n_f64(_Q27, *(double *)v2440.i64), v1218, (float64x2_t)v2440, 1);
    v2269 = vmlaq_laneq_f64(vmulq_n_f64(v1219, *(double *)v2440.i64), v1220, (float64x2_t)v2440, 1);
    _Q1 = vmulq_f64(v2446, (float64x2_t)v2440);
    _D0 = *(double *)&v2440.i64[1];
    __asm { FMLA            D1, D0, V25.D[1] }
    v2195 = vmlaq_laneq_f64(vmulq_n_f64(v1214, v2446.f64[0]), v1215, v2446, 1);
    v2238 = _Q1.f64[1];
    v1239 = vmlaq_laneq_f64(vmulq_n_f64(_Q27, v2446.f64[0]), v1218, v2446, 1);
    v1240 = vmlaq_laneq_f64(vmulq_n_f64(v1219, v2446.f64[0]), v1220, v2446, 1);
    _Q19 = vmulq_f64(_Q25, _Q25);
    _D30 = v2446.f64[1];
    __asm { FMLA            D19, D30, V25.D[1] }
    v1243 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2418, *(int64x2_t *)v2422);
    _Q0 = vmlaq_n_f64(v1216, v1243, *(double *)v2418);
    v1245 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2418, *(int64x2_t *)v2422);
    v1246 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2426, *(int64x2_t *)v2430);
    _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2426, *(int64x2_t *)v2430);
    v2113 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q27, __src.f64[0]), v1218, __src, 1), v1246, *(double *)v2418), _Q3, *(float64x2_t *)v2418, 1);
    v2144 = vmlaq_laneq_f64(_Q0, v1245, *(float64x2_t *)v2418, 1);
    _Q1 = (float64x2_t)vzip1q_s64(v2435, v2441);
    _Q2 = (float64x2_t)vzip2q_s64(v2435, v2441);
    v2084 = vmlaq_laneq_f64(vmlaq_n_f64(v1221, _Q1, *(double *)v2418), _Q2, *(float64x2_t *)v2418, 1);
    _Q0.f64[1] = v2447.f64[1];
    _Q20.f64[1] = _Q7.f64[1];
    _Q25.f64[0] = *(float64_t *)&v2418[8];
    __asm { FMLA            D20, D25, V0.D[1] }
    v1252 = vmlaq_laneq_f64(vmlaq_n_f64(_Q16, v1243, *(double *)v2422), v1245, *(float64x2_t *)v2422, 1);
    v1253 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q27, v2421.f64[0]), v1218, v2421, 1), v1246, *(double *)v2422), _Q3, *(float64x2_t *)v2422, 1);
    v1254 = vmlaq_laneq_f64(vmlaq_n_f64(v1226, _Q1, *(double *)v2422), _Q2, *(float64x2_t *)v2422, 1);
    _Q26.f64[1] = _Q29.f64[1];
    _Q25.f64[0] = *(float64_t *)&v2422[8];
    __asm { FMLA            D26, D25, V0.D[1] }
    v1257 = vmlaq_laneq_f64(vmlaq_n_f64(v1229, v1243, *(double *)v2426), v1245, *(float64x2_t *)v2426, 1);
    v1258 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q27, *(double *)v2425.i64), v1218, (float64x2_t)v2425, 1), v1246, *(double *)v2426), _Q3, *(float64x2_t *)v2426, 1);
    v1259 = vmlaq_laneq_f64(vmlaq_n_f64(v1230, _Q1, *(double *)v2426), _Q2, *(float64x2_t *)v2426, 1);
    _Q8.f64[1] = _Q13.f64[1];
    _Q25.f64[0] = *(float64_t *)&v2426[8];
    __asm { FMLA            D8, D25, V0.D[1] }
    v2403 = vmlaq_laneq_f64(vmlaq_n_f64(v2402, v1243, *(double *)v2430), v1245, *(float64x2_t *)v2430, 1);
    v2161 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q27, *(double *)v2429.i64), v1218, (float64x2_t)v2429, 1), v1246, *(double *)v2430), _Q3, *(float64x2_t *)v2430, 1);
    _Q28.f64[1] = v2063;
    v1261 = vmlaq_laneq_f64(vmlaq_n_f64(v2071, _Q1, *(double *)v2430), _Q2, *(float64x2_t *)v2430, 1);
    _Q25.f64[0] = *(float64_t *)&v2430[8];
    __asm { FMLA            D28, D25, V0.D[1] }
    v1263 = vmlaq_laneq_f64(vmlaq_n_f64(v2055, v1243, *(double *)v2435.i64), v1245, (float64x2_t)v2435, 1);
    v1264 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q27, *(double *)v2434.i64), v1218, (float64x2_t)v2434, 1), v1246, *(double *)v2435.i64), _Q3, (float64x2_t)v2435, 1);
    _Q27.f64[1] = v2045;
    v1265 = vmlaq_laneq_f64(vmlaq_n_f64(v2047, _Q1, *(double *)v2435.i64), _Q2, (float64x2_t)v2435, 1);
    *(_QWORD *)&_Q25.f64[0] = v2435.i64[1];
    __asm { FMLA            D27, D25, V0.D[1] }
    v2356 = vmlaq_laneq_f64(vmlaq_n_f64(v2355, v1243, *(double *)v2441.i64), v1245, (float64x2_t)v2441, 1);
    v2312 = vmlaq_laneq_f64(vmlaq_n_f64(v2311, v1246, *(double *)v2441.i64), _Q3, (float64x2_t)v2441, 1);
    v2270 = vmlaq_laneq_f64(vmlaq_n_f64(v2269, _Q1, *(double *)v2441.i64), _Q2, (float64x2_t)v2441, 1);
    *(_QWORD *)&_Q25.f64[0] = v2441.i64[1];
    __asm { FMLA            D16, D25, V0.D[1] }
    v2196 = vmlaq_laneq_f64(vmlaq_n_f64(v2195, v1243, v2447.f64[0]), v1245, v2447, 1);
    v1266 = vmlaq_laneq_f64(vmlaq_n_f64(v1239, v1246, v2447.f64[0]), _Q3, v2447, 1);
    v1267 = vmlaq_laneq_f64(vmlaq_n_f64(v1240, _Q1, v2447.f64[0]), _Q2, v2447, 1);
    _Q2.f64[0] = v2447.f64[1];
    __asm { FMLA            D19, D2, V0.D[1] }
    v1268 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2418[16], *(int64x2_t *)&v2422[16]);
    v1269 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2418[16], *(int64x2_t *)&v2422[16]);
    v1270 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2426[16], *(int64x2_t *)&v2430[16]);
    v1271 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2426[16], *(int64x2_t *)&v2430[16]);
    v1272 = (float64x2_t)vzip1q_s64(v2436, v2442);
    v1273 = (float64x2_t)vzip2q_s64(v2436, v2442);
    v1274 = vmlaq_laneq_f64(vmlaq_n_f64(v2084, v1272, *(double *)&v2418[16]), v1273, *(float64x2_t *)&v2418[16], 1);
    _Q0.f64[1] = v2448.f64[1];
    _Q3.f64[0] = *(float64_t *)&v2418[24];
    __asm { FMLA            D20, D3, V0.D[1] }
    v1276 = vmlaq_laneq_f64(vmlaq_n_f64(v1252, v1268, *(double *)&v2422[16]), v1269, *(float64x2_t *)&v2422[16], 1);
    v1277 = vmlaq_laneq_f64(vmlaq_n_f64(v1253, v1270, *(double *)&v2422[16]), v1271, *(float64x2_t *)&v2422[16], 1);
    v1278 = vmlaq_laneq_f64(vmlaq_n_f64(v1254, v1272, *(double *)&v2422[16]), v1273, *(float64x2_t *)&v2422[16], 1);
    _Q1.f64[0] = *(float64_t *)&v2422[24];
    __asm { FMLA            D26, D1, V0.D[1] }
    v1280 = vmlaq_laneq_f64(vmlaq_n_f64(v1257, v1268, *(double *)&v2426[16]), v1269, *(float64x2_t *)&v2426[16], 1);
    v1281 = vmlaq_laneq_f64(vmlaq_n_f64(v1258, v1270, *(double *)&v2426[16]), v1271, *(float64x2_t *)&v2426[16], 1);
    v1282 = vmlaq_laneq_f64(vmlaq_n_f64(v1259, v1272, *(double *)&v2426[16]), v1273, *(float64x2_t *)&v2426[16], 1);
    _Q1.f64[0] = *(float64_t *)&v2426[24];
    __asm { FMLA            D8, D1, V0.D[1] }
    v2404 = vmlaq_laneq_f64(vmlaq_n_f64(v2403, v1268, *(double *)&v2430[16]), v1269, *(float64x2_t *)&v2430[16], 1);
    v2162 = vmlaq_laneq_f64(vmlaq_n_f64(v2161, v1270, *(double *)&v2430[16]), v1271, *(float64x2_t *)&v2430[16], 1);
    v1283 = vmlaq_laneq_f64(vmlaq_n_f64(v1261, v1272, *(double *)&v2430[16]), v1273, *(float64x2_t *)&v2430[16], 1);
    _Q1.f64[0] = *(float64_t *)&v2430[24];
    __asm { FMLA            D28, D1, V0.D[1] }
    v1285 = vmlaq_laneq_f64(vmlaq_n_f64(v1263, v1268, *(double *)v2436.i64), v1269, (float64x2_t)v2436, 1);
    v1286 = vmlaq_laneq_f64(vmlaq_n_f64(v1264, v1270, *(double *)v2436.i64), v1271, (float64x2_t)v2436, 1);
    v1287 = vmlaq_laneq_f64(vmlaq_n_f64(v1265, v1272, *(double *)v2436.i64), v1273, (float64x2_t)v2436, 1);
    *(_QWORD *)&_Q1.f64[0] = v2436.i64[1];
    __asm { FMLA            D27, D1, V0.D[1] }
    v2357 = vmlaq_laneq_f64(vmlaq_n_f64(v2356, v1268, *(double *)v2442.i64), v1269, (float64x2_t)v2442, 1);
    v2313 = vmlaq_laneq_f64(vmlaq_n_f64(v2312, v1270, *(double *)v2442.i64), v1271, (float64x2_t)v2442, 1);
    v2271 = vmlaq_laneq_f64(vmlaq_n_f64(v2270, v1272, *(double *)v2442.i64), v1273, (float64x2_t)v2442, 1);
    *(_QWORD *)&_Q1.f64[0] = v2442.i64[1];
    __asm { FMLA            D3, D1, V0.D[1] }
    v2197 = vmlaq_laneq_f64(vmlaq_n_f64(v2196, v1268, v2448.f64[0]), v1269, v2448, 1);
    v1288 = vmlaq_laneq_f64(vmlaq_n_f64(v1266, v1270, v2448.f64[0]), v1271, v2448, 1);
    v1289 = vmlaq_laneq_f64(vmlaq_n_f64(v1267, v1272, v2448.f64[0]), v1273, v2448, 1);
    _Q3.f64[0] = v2448.f64[1];
    __asm { FMLA            D19, D3, V0.D[1] }
    _Q0 = (float64x2_t)vzip1q_s64((int64x2_t)v2419, (int64x2_t)v2423);
    v1291 = (float64x2_t)vzip2q_s64((int64x2_t)v2419, (int64x2_t)v2423);
    v1292 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2144, v1268, *(double *)&v2418[16]), v1269, *(float64x2_t *)&v2418[16], 1), _Q0, v2419.f64[0]), v1291, v2419, 1);
    v1293 = (float64x2_t)vzip1q_s64(v2427, v2431);
    v1294 = (float64x2_t)vzip2q_s64(v2427, v2431);
    v2114 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v2113, v1270, *(double *)&v2418[16]), v1271, *(float64x2_t *)&v2418[16], 1), v1293, v2419.f64[0]), v1294, v2419, 1);
    v1295 = (float64x2_t)vzip1q_s64(v2437, v2443);
    v1296 = (float64x2_t)vzip2q_s64(v2437, v2443);
    v1297 = vmlaq_laneq_f64(vmlaq_n_f64(v1274, v1295, v2419.f64[0]), v1296, v2419, 1);
    _V30.D[1] = v2449.f64[1];
    _Q1.f64[0] = v2419.f64[1];
    __asm { FMLA            D20, D1, V30.D[1] }
    v1300 = vmlaq_laneq_f64(vmlaq_n_f64(v1276, _Q0, v2423.f64[0]), v1291, v2423, 1);
    v1301 = vmlaq_laneq_f64(vmlaq_n_f64(v1277, v1293, v2423.f64[0]), v1294, v2423, 1);
    v1302 = vmlaq_laneq_f64(vmlaq_n_f64(v1278, v1295, v2423.f64[0]), v1296, v2423, 1);
    _Q1.f64[0] = v2423.f64[1];
    __asm { FMLA            D26, D1, V30.D[1] }
    v1304 = vmlaq_laneq_f64(vmlaq_n_f64(v1280, _Q0, *(double *)v2427.i64), v1291, (float64x2_t)v2427, 1);
    v1305 = vmlaq_laneq_f64(vmlaq_n_f64(v1281, v1293, *(double *)v2427.i64), v1294, (float64x2_t)v2427, 1);
    v1306 = vmlaq_laneq_f64(vmlaq_n_f64(v1282, v1295, *(double *)v2427.i64), v1296, (float64x2_t)v2427, 1);
    *(_QWORD *)&_Q1.f64[0] = v2427.i64[1];
    __asm { FMLA            D8, D1, V30.D[1] }
    v2405 = vmlaq_laneq_f64(vmlaq_n_f64(v2404, _Q0, *(double *)v2431.i64), v1291, (float64x2_t)v2431, 1);
    v2163 = vmlaq_laneq_f64(vmlaq_n_f64(v2162, v1293, *(double *)v2431.i64), v1294, (float64x2_t)v2431, 1);
    v1307 = vmlaq_laneq_f64(vmlaq_n_f64(v1283, v1295, *(double *)v2431.i64), v1296, (float64x2_t)v2431, 1);
    *(_QWORD *)&_Q1.f64[0] = v2431.i64[1];
    __asm { FMLA            D28, D1, V30.D[1] }
    v1309 = vmlaq_laneq_f64(vmlaq_n_f64(v1285, _Q0, *(double *)v2437.i64), v1291, (float64x2_t)v2437, 1);
    v1310 = vmlaq_laneq_f64(vmlaq_n_f64(v1286, v1293, *(double *)v2437.i64), v1294, (float64x2_t)v2437, 1);
    v1311 = vmlaq_laneq_f64(vmlaq_n_f64(v1287, v1295, *(double *)v2437.i64), v1296, (float64x2_t)v2437, 1);
    *(_QWORD *)&_Q1.f64[0] = v2437.i64[1];
    __asm { FMLA            D27, D1, V30.D[1] }
    v2358 = vmlaq_laneq_f64(vmlaq_n_f64(v2357, _Q0, *(double *)v2443.i64), v1291, (float64x2_t)v2443, 1);
    v2314 = vmlaq_laneq_f64(vmlaq_n_f64(v2313, v1293, *(double *)v2443.i64), v1294, (float64x2_t)v2443, 1);
    v2272 = vmlaq_laneq_f64(vmlaq_n_f64(v2271, v1295, *(double *)v2443.i64), v1296, (float64x2_t)v2443, 1);
    *(_QWORD *)&_Q1.f64[0] = v2443.i64[1];
    __asm { FMLA            D2, D1, V30.D[1] }
    v2198 = vmlaq_laneq_f64(vmlaq_n_f64(v2197, _Q0, v2449.f64[0]), v1291, v2449, 1);
    v1312 = vmlaq_laneq_f64(vmlaq_n_f64(v1288, v1293, v2449.f64[0]), v1294, v2449, 1);
    v1313 = vmlaq_laneq_f64(vmlaq_n_f64(v1289, v1295, v2449.f64[0]), v1296, v2449, 1);
    _Q2.f64[0] = v2449.f64[1];
    __asm { FMLA            D19, D2, V30.D[1] }
    _Q2 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2420, *(int64x2_t *)v2424);
    v1315 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2420, *(int64x2_t *)v2424);
    v1316 = vmlaq_laneq_f64(vmlaq_n_f64(v1292, _Q2, *(double *)v2420), v1315, *(float64x2_t *)v2420, 1);
    v1317 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2428, v2432);
    v1318 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2428, v2432);
    v2115 = vmlaq_laneq_f64(vmlaq_n_f64(v2114, v1317, *(double *)v2420), v1318, *(float64x2_t *)v2420, 1);
    v1319 = (float64x2_t)vzip1q_s64(v2438, v2444);
    v1320 = (float64x2_t)vzip2q_s64(v2438, v2444);
    v1321 = vmlaq_laneq_f64(vmlaq_n_f64(v1297, v1319, *(double *)v2420), v1320, *(float64x2_t *)v2420, 1);
    _V30.D[1] = v2450.f64[1];
    _Q0.f64[0] = *(float64_t *)&v2420[8];
    __asm { FMLA            D20, D0, V30.D[1] }
    v1324 = vmlaq_laneq_f64(vmlaq_n_f64(v1300, _Q2, *(double *)v2424), v1315, *(float64x2_t *)v2424, 1);
    v1325 = vmlaq_laneq_f64(vmlaq_n_f64(v1301, v1317, *(double *)v2424), v1318, *(float64x2_t *)v2424, 1);
    v1326 = vmlaq_laneq_f64(vmlaq_n_f64(v1302, v1319, *(double *)v2424), v1320, *(float64x2_t *)v2424, 1);
    _Q0.f64[0] = *(float64_t *)&v2424[8];
    __asm { FMLA            D26, D0, V30.D[1] }
    v1328 = vmlaq_laneq_f64(vmlaq_n_f64(v1304, _Q2, *(double *)v2428), v1315, *(float64x2_t *)v2428, 1);
    v1329 = vmlaq_laneq_f64(vmlaq_n_f64(v1305, v1317, *(double *)v2428), v1318, *(float64x2_t *)v2428, 1);
    v1330 = vmlaq_laneq_f64(vmlaq_n_f64(v1306, v1319, *(double *)v2428), v1320, *(float64x2_t *)v2428, 1);
    _Q0.f64[0] = *(float64_t *)&v2428[8];
    __asm { FMLA            D8, D0, V30.D[1] }
    v2406 = vmlaq_laneq_f64(vmlaq_n_f64(v2405, _Q2, *(double *)v2432.i64), v1315, (float64x2_t)v2432, 1);
    v2164 = vmlaq_laneq_f64(vmlaq_n_f64(v2163, v1317, *(double *)v2432.i64), v1318, (float64x2_t)v2432, 1);
    v1331 = vmlaq_laneq_f64(vmlaq_n_f64(v1307, v1319, *(double *)v2432.i64), v1320, (float64x2_t)v2432, 1);
    *(_QWORD *)&_Q0.f64[0] = v2432.i64[1];
    __asm { FMLA            D28, D0, V30.D[1] }
    v1333 = vmlaq_laneq_f64(vmlaq_n_f64(v1309, _Q2, *(double *)v2438.i64), v1315, (float64x2_t)v2438, 1);
    v1334 = vmlaq_laneq_f64(vmlaq_n_f64(v1310, v1317, *(double *)v2438.i64), v1318, (float64x2_t)v2438, 1);
    v1335 = vmlaq_laneq_f64(vmlaq_n_f64(v1311, v1319, *(double *)v2438.i64), v1320, (float64x2_t)v2438, 1);
    *(_QWORD *)&_Q0.f64[0] = v2438.i64[1];
    __asm { FMLA            D27, D0, V30.D[1] }
    v2359 = vmlaq_laneq_f64(vmlaq_n_f64(v2358, _Q2, *(double *)v2444.i64), v1315, (float64x2_t)v2444, 1);
    v2315 = vmlaq_laneq_f64(vmlaq_n_f64(v2314, v1317, *(double *)v2444.i64), v1318, (float64x2_t)v2444, 1);
    _Q1.f64[1] = v2238;
    v2273 = vmlaq_laneq_f64(vmlaq_n_f64(v2272, v1319, *(double *)v2444.i64), v1320, (float64x2_t)v2444, 1);
    *(_QWORD *)&_Q0.f64[0] = v2444.i64[1];
    __asm { FMLA            D1, D0, V30.D[1] }
    v2199 = vmlaq_laneq_f64(vmlaq_n_f64(v2198, _Q2, v2450.f64[0]), v1315, v2450, 1);
    v1336 = vmlaq_laneq_f64(vmlaq_n_f64(v1312, v1317, v2450.f64[0]), v1318, v2450, 1);
    v1337 = vmlaq_laneq_f64(vmlaq_n_f64(v1313, v1319, v2450.f64[0]), v1320, v2450, 1);
    _Q2.f64[0] = v2450.f64[1];
    __asm { FMLA            D19, D2, V30.D[1] }
    v1338 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2420[16], *(int64x2_t *)&v2424[16]);
    v1339 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2420[16], *(int64x2_t *)&v2424[16]);
    v2145 = vmlaq_laneq_f64(vmlaq_n_f64(v1316, v1338, *(double *)&v2420[16]), v1339, *(float64x2_t *)&v2420[16], 1);
    v1316.f64[1] = *(float64_t *)&v2428[24];
    v1340 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2428[16], v2433);
    v1341 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2428[16], v2433);
    v1342 = (float64x2_t)vzip1q_s64(v2439, (int64x2_t)v2445);
    v1343 = (float64x2_t)vzip2q_s64(v2439, (int64x2_t)v2445);
    v2085 = vmlaq_laneq_f64(vmlaq_n_f64(v1321, v1342, *(double *)&v2420[16]), v1343, *(float64x2_t *)&v2420[16], 1);
    _V30.D[1] = v2451.f64[1];
    _Q0.f64[0] = *(float64_t *)&v2420[24];
    __asm { FMLA            D20, D0, V30.D[1] }
    v1345 = vmlaq_laneq_f64(vmlaq_n_f64(v1324, v1338, *(double *)&v2424[16]), v1339, *(float64x2_t *)&v2424[16], 1);
    v1346 = vmlaq_laneq_f64(vmlaq_n_f64(v1325, v1340, *(double *)&v2424[16]), v1341, *(float64x2_t *)&v2424[16], 1);
    v1347 = vmlaq_laneq_f64(vmlaq_n_f64(v1326, v1342, *(double *)&v2424[16]), v1343, *(float64x2_t *)&v2424[16], 1);
    _Q0.f64[0] = *(float64_t *)&v2424[24];
    __asm { FMLA            D26, D0, V30.D[1] }
    v1348 = vmlaq_laneq_f64(vmlaq_n_f64(v1328, v1338, *(double *)&v2428[16]), v1339, *(float64x2_t *)&v2428[16], 1);
    v1349 = vmlaq_laneq_f64(vmlaq_n_f64(v1329, v1340, *(double *)&v2428[16]), v1341, *(float64x2_t *)&v2428[16], 1);
    v1350 = vmlaq_laneq_f64(vmlaq_n_f64(v1330, v1342, *(double *)&v2428[16]), v1343, *(float64x2_t *)&v2428[16], 1);
    _Q0.f64[0] = *(float64_t *)&v2428[24];
    __asm { FMLA            D8, D0, V30.D[1] }
    v2407 = vmlaq_laneq_f64(vmlaq_n_f64(v2406, v1338, *(double *)v2433.i64), v1339, (float64x2_t)v2433, 1);
    v1351 = vmlaq_laneq_f64(vmlaq_n_f64(v2164, v1340, *(double *)v2433.i64), v1341, (float64x2_t)v2433, 1);
    v1352 = vmlaq_laneq_f64(vmlaq_n_f64(v1331, v1342, *(double *)v2433.i64), v1343, (float64x2_t)v2433, 1);
    *(_QWORD *)&_Q0.f64[0] = v2433.i64[1];
    __asm { FMLA            D28, D0, V30.D[1] }
    v1353 = vmlaq_laneq_f64(vmlaq_n_f64(v1333, v1338, *(double *)v2439.i64), v1339, (float64x2_t)v2439, 1);
    v1354 = vmlaq_laneq_f64(vmlaq_n_f64(v1334, v1340, *(double *)v2439.i64), v1341, (float64x2_t)v2439, 1);
    v1355 = vmlaq_laneq_f64(vmlaq_n_f64(v1335, v1342, *(double *)v2439.i64), v1343, (float64x2_t)v2439, 1);
    *(_QWORD *)&_Q0.f64[0] = v2439.i64[1];
    __asm { FMLA            D27, D0, V30.D[1] }
    v2360 = vmlaq_laneq_f64(vmlaq_n_f64(v2359, v1338, v2445.n128_f64[0]), v1339, (float64x2_t)v2445, 1);
    v2316 = vmlaq_laneq_f64(vmlaq_n_f64(v2315, v1340, v2445.n128_f64[0]), v1341, (float64x2_t)v2445, 1);
    v2274 = vmlaq_laneq_f64(vmlaq_n_f64(v2273, v1342, v2445.n128_f64[0]), v1343, (float64x2_t)v2445, 1);
    *(_QWORD *)&_Q0.f64[0] = v2445.n128_u64[1];
    __asm { FMLA            D1, D0, V30.D[1] }
    v2200 = vmlaq_laneq_f64(vmlaq_n_f64(v2199, v1338, v2451.f64[0]), v1339, v2451, 1);
    v2230 = _Q1;
    v1356 = vmlaq_laneq_f64(vmlaq_n_f64(v1336, v1340, v2451.f64[0]), v1341, v2451, 1);
    v1357 = vmlaq_laneq_f64(vmlaq_n_f64(v1337, v1342, v2451.f64[0]), v1343, v2451, 1);
    _Q0.f64[0] = v2451.f64[1];
    __asm { FMLA            D19, D0, V30.D[1] }
    v1358 = vaddq_f64(*(float64x2_t *)(v1213 + 16), vmlaq_laneq_f64(vmlaq_n_f64(v2115, v1340, *(double *)&v2420[16]), v1341, *(float64x2_t *)&v2420[16], 1));
    *(float64x2_t *)v1213 = vaddq_f64(*(float64x2_t *)v1213, v2145);
    *(float64x2_t *)(v1213 + 16) = v1358;
    v1359 = vaddq_f64(*(float64x2_t *)(v1213 + 32), v2085);
    *(float64x2_t *)(v1213 + 32) = v1359;
    v1359.f64[0] = *(float64_t *)(v1213 + 48);
    *(_QWORD *)(v1213 + 48) = *(_OWORD *)&vaddq_f64(v1359, _Q20);
    *(float64x2_t *)(v1213 + 56) = vaddq_f64(*(float64x2_t *)(v1213 + 56), v1345);
    *(float64x2_t *)(v1213 + 72) = vaddq_f64(*(float64x2_t *)(v1213 + 72), v1346);
    v1360 = vaddq_f64(*(float64x2_t *)(v1213 + 88), v1347);
    *(float64x2_t *)(v1213 + 88) = v1360;
    v1360.f64[0] = *(float64_t *)(v1213 + 104);
    v1361 = vaddq_f64(v1360, _Q26);
    *(float64_t *)(v1213 + 104) = v1361.f64[0];
    v1361.f64[0] = *(float64_t *)(v1213 + 160);
    v1362 = vaddq_f64(*(float64x2_t *)(v1213 + 144), v1350);
    v1363 = vaddq_f64(*(float64x2_t *)(v1213 + 128), v1349);
    v1316.f64[0] = *(float64_t *)(v1213 + 216);
    v1364 = vaddq_f64(*(float64x2_t *)(v1213 + 200), v1352);
    v1365 = vaddq_f64(*(float64x2_t *)(v1213 + 184), v1351);
    v1270.f64[1] = v2407.f64[1];
    v1366 = vaddq_f64(*(float64x2_t *)(v1213 + 168), v2407);
    v1270.f64[0] = *(float64_t *)(v1213 + 272);
    v1367 = vaddq_f64(*(float64x2_t *)(v1213 + 256), v1355);
    v1368 = vaddq_f64(*(float64x2_t *)(v1213 + 240), v1354);
    v1369 = vaddq_f64(*(float64x2_t *)(v1213 + 224), v1353);
    v1343.f64[0] = *(float64_t *)(v1213 + 328);
    *(_QWORD *)&_Q20.f64[0] = *(_OWORD *)&vaddq_f64(v1343, v2230);
    v1370 = vaddq_f64(*(float64x2_t *)(v1213 + 312), v2274);
    v1371 = vaddq_f64(*(float64x2_t *)(v1213 + 296), v2316);
    v1372 = *(float64x2_t *)(v1213 + 280);
    v1373 = vaddq_f64(v1372, v2360);
    v1372.f64[0] = *(float64_t *)(v1213 + 384);
    *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vaddq_f64(v1372, _Q19);
    v1374 = vaddq_f64(*(float64x2_t *)(v1213 + 352), v1356);
    v1375 = vaddq_f64(*(float64x2_t *)(v1213 + 336), v2200);
    *(float64x2_t *)(v1213 + 112) = vaddq_f64(*(float64x2_t *)(v1213 + 112), v1348);
    *(float64x2_t *)(v1213 + 128) = v1363;
    *(float64x2_t *)(v1213 + 144) = v1362;
    *(_QWORD *)(v1213 + 160) = *(_OWORD *)&vaddq_f64(v1361, _Q8);
    *(float64x2_t *)(v1213 + 168) = v1366;
    *(float64x2_t *)(v1213 + 184) = v1365;
    *(float64x2_t *)(v1213 + 200) = v1364;
    *(_QWORD *)(v1213 + 216) = *(_OWORD *)&vaddq_f64(v1316, _Q28);
    *(float64x2_t *)(v1213 + 224) = v1369;
    *(float64x2_t *)(v1213 + 240) = v1368;
    *(float64x2_t *)(v1213 + 256) = v1367;
    *(_QWORD *)(v1213 + 272) = *(_OWORD *)&vaddq_f64(v1270, _Q27);
    *(float64x2_t *)(v1213 + 280) = v1373;
    *(float64x2_t *)(v1213 + 296) = v1371;
    *(float64x2_t *)(v1213 + 312) = v1370;
    *(float64_t *)(v1213 + 328) = _Q20.f64[0];
    *(float64x2_t *)(v1213 + 336) = v1375;
    *(float64x2_t *)(v1213 + 352) = v1374;
    *(float64x2_t *)(v1213 + 368) = vaddq_f64(*(float64x2_t *)(v1213 + 368), v1357);
    *(float64_t *)(v1213 + 384) = _Q19.f64[0];
    if (!v831 || v834 < v833)
      goto LABEL_131;
    v1376 = *(unint64_t **)(v2416 + 40);
    v1377 = v1376[11] + 24 * v834;
    v1379 = *(char **)v1377;
    v1378 = *(char **)(v1377 + 8);
    if (*(char **)v1377 != v1378)
    {
      while (*(_DWORD *)v1379 < v833)
      {
        v1379 += 16;
        if (v1379 == v1378)
          goto LABEL_129;
      }
    }
    if (v1379 == v1378)
      goto LABEL_129;
    if (*(_DWORD *)v1379 != v833)
    {
      v1378 = v1379;
LABEL_129:
      v1380 = sub_239CCA368(v1376, (char **)v1377, v833, v1378);
      goto LABEL_130;
    }
    v1380 = v1376[2] + 8 * *((_QWORD *)v1379 + 1);
LABEL_130:
    v1381 = (float64x2_t)vzip1q_s64((int64x2_t)__src, (int64x2_t)v2421);
    v1382 = (float64x2_t)vzip2q_s64((int64x2_t)__src, (int64x2_t)v2421);
    v1383 = vmlaq_laneq_f64(vmulq_n_f64(v1381, v2452.f64[0]), v1382, v2452, 1);
    v1384 = (float64x2_t)vzip1q_s64(v2425, v2429);
    v1385 = (float64x2_t)vzip2q_s64(v2425, v2429);
    v1386 = vmlaq_laneq_f64(vmulq_n_f64(v1384, v2452.f64[0]), v1385, v2452, 1);
    v1387 = (float64x2_t)vzip1q_s64(v2434, v2440);
    v1388 = (float64x2_t)vzip2q_s64(v2434, v2440);
    v1389 = vmlaq_laneq_f64(vmulq_n_f64(v1387, v2452.f64[0]), v1388, v2452, 1);
    _V25.D[1] = v2446.f64[1];
    _Q1 = vmulq_f64(v2446, v2452);
    _D0 = v2452.f64[1];
    __asm { FMLA            D1, D0, V25.D[1] }
    v2239 = _Q1.f64[1];
    v2165 = vmlaq_laneq_f64(vmulq_n_f64(v1381, v2458.f64[0]), v1382, v2458, 1);
    v2201 = vmlaq_laneq_f64(vmulq_n_f64(v1384, v2458.f64[0]), v1385, v2458, 1);
    v1393 = vmlaq_laneq_f64(vmulq_n_f64(v1387, v2458.f64[0]), v1388, v2458, 1);
    _Q21 = vmulq_f64(v2446, v2458);
    _D0 = v2458.f64[1];
    __asm { FMLA            D21, D0, V25.D[1] }
    v1396 = vmlaq_laneq_f64(vmulq_n_f64(v1381, v2464.f64[0]), v1382, v2464, 1);
    v1397 = vmlaq_laneq_f64(vmulq_n_f64(v1384, v2464.f64[0]), v1385, v2464, 1);
    v1398 = vmlaq_laneq_f64(vmulq_n_f64(v1387, v2464.f64[0]), v1388, v2464, 1);
    _Q26 = vmulq_f64(v2446, v2464);
    _D2 = v2464.f64[1];
    __asm { FMLA            D26, D2, V25.D[1] }
    v2146 = vmlaq_laneq_f64(vmulq_n_f64(v1381, v2470.f64[0]), v1382, v2470, 1);
    _Q9 = vmlaq_laneq_f64(vmulq_n_f64(v1384, v2470.f64[0]), v1385, v2470, 1);
    v1402 = vmlaq_laneq_f64(vmulq_n_f64(v1387, v2470.f64[0]), v1388, v2470, 1);
    _Q11 = vmulq_f64(v2446, v2470);
    _Q1.f64[0] = v2470.f64[1];
    __asm { FMLA            D11, D1, V25.D[1] }
    v1404 = vmlaq_laneq_f64(vmulq_n_f64(v1381, v2476.f64[0]), v1382, v2476, 1);
    v1405 = vmlaq_laneq_f64(vmulq_n_f64(v1384, v2476.f64[0]), v1385, v2476, 1);
    v1406 = vmlaq_laneq_f64(vmulq_n_f64(v1387, v2476.f64[0]), v1388, v2476, 1);
    _Q15 = vmulq_f64(v2446, v2476);
    _D0 = v2476.f64[1];
    __asm { FMLA            D15, D0, V25.D[1] }
    v2361 = vmlaq_laneq_f64(vmulq_n_f64(v1381, v2482.f64[0]), v1382, v2482, 1);
    v2317 = vmlaq_laneq_f64(vmulq_n_f64(v1384, v2482.f64[0]), v1385, v2482, 1);
    v2275 = vmlaq_laneq_f64(vmulq_n_f64(v1387, v2482.f64[0]), v1388, v2482, 1);
    _Q1 = vmulq_f64(v2446, v2482);
    _D0 = v2482.f64[1];
    __asm { FMLA            D1, D0, V25.D[1] }
    v2125 = _Q1.f64[1];
    v2408 = vmlaq_laneq_f64(vmulq_n_f64(v1381, v2488.f64[0]), v1382, v2488, 1);
    v1411 = vmlaq_laneq_f64(vmulq_n_f64(v1384, v2488.f64[0]), v1385, v2488, 1);
    v1412 = vmlaq_laneq_f64(vmulq_n_f64(v1387, v2488.f64[0]), v1388, v2488, 1);
    _Q27 = vmulq_f64(v2446, v2488);
    _D0 = v2488.f64[1];
    __asm { FMLA            D27, D0, V25.D[1] }
    v1415 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2426, *(int64x2_t *)v2430);
    v1416 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2426, *(int64x2_t *)v2430);
    v1417 = (float64x2_t)vzip1q_s64(v2435, v2441);
    _Q31 = (float64x2_t)vzip2q_s64(v2435, v2441);
    v1419 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2418, *(int64x2_t *)v2422);
    v1420 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2418, *(int64x2_t *)v2422);
    _Q3 = (float64x2_t)v2453;
    v1422 = vmlaq_laneq_f64(vmlaq_n_f64(v1383, v1419, _Q3.f64[0]), v1420, _Q3, 1);
    v1423 = vmlaq_laneq_f64(vmlaq_n_f64(v1386, v1415, _Q3.f64[0]), v1416, _Q3, 1);
    v1424 = vmlaq_laneq_f64(vmlaq_n_f64(v1389, v1417, _Q3.f64[0]), _Q31, _Q3, 1);
    _V0.D[1] = v2447.f64[1];
    _Q7.f64[1] = v2239;
    *(_QWORD *)&_Q3.f64[0] = v2453.i64[1];
    __asm { FMLA            D7, D3, V0.D[1] }
    _Q3 = (float64x2_t)v2459;
    v1429 = vmlaq_laneq_f64(vmlaq_n_f64(v2165, v1419, _Q3.f64[0]), v1420, _Q3, 1);
    v1430 = vmlaq_laneq_f64(vmlaq_n_f64(v2201, v1415, _Q3.f64[0]), v1416, _Q3, 1);
    v1431 = vmlaq_laneq_f64(vmlaq_n_f64(v1393, v1417, _Q3.f64[0]), _Q31, _Q3, 1);
    *(_QWORD *)&_Q3.f64[0] = v2459.i64[1];
    __asm { FMLA            D21, D3, V0.D[1] }
    _Q3 = (float64x2_t)v2465;
    v1433 = vmlaq_laneq_f64(vmlaq_n_f64(v1396, v1419, _Q3.f64[0]), v1420, _Q3, 1);
    v1434 = vmlaq_laneq_f64(vmlaq_n_f64(v1397, v1415, _Q3.f64[0]), v1416, _Q3, 1);
    v1435 = vmlaq_laneq_f64(vmlaq_n_f64(v1398, v1417, _Q3.f64[0]), _Q31, _Q3, 1);
    *(_QWORD *)&_Q3.f64[0] = v2465.i64[1];
    __asm { FMLA            D26, D3, V0.D[1] }
    _Q3 = (float64x2_t)v2471;
    v1437 = vmlaq_laneq_f64(vmlaq_n_f64(v2146, v1419, _Q3.f64[0]), v1420, _Q3, 1);
    v2231 = vmlaq_laneq_f64(vmlaq_n_f64(_Q9, v1415, _Q3.f64[0]), v1416, _Q3, 1);
    v1438 = vmlaq_laneq_f64(vmlaq_n_f64(v1402, v1417, _Q3.f64[0]), _Q31, _Q3, 1);
    *(_QWORD *)&_Q3.f64[0] = v2471.i64[1];
    __asm { FMLA            D11, D3, V0.D[1] }
    _Q3 = (float64x2_t)v2477;
    v1440 = vmlaq_laneq_f64(vmlaq_n_f64(v1404, v1419, _Q3.f64[0]), v1420, _Q3, 1);
    v1441 = vmlaq_laneq_f64(vmlaq_n_f64(v1405, v1415, _Q3.f64[0]), v1416, _Q3, 1);
    v1442 = vmlaq_laneq_f64(vmlaq_n_f64(v1406, v1417, _Q3.f64[0]), _Q31, _Q3, 1);
    *(_QWORD *)&_Q3.f64[0] = v2477.i64[1];
    __asm { FMLA            D15, D3, V0.D[1] }
    _Q3 = (float64x2_t)v2483;
    v2362 = vmlaq_laneq_f64(vmlaq_n_f64(v2361, v1419, _Q3.f64[0]), v1420, _Q3, 1);
    v2318 = vmlaq_laneq_f64(vmlaq_n_f64(v2317, v1415, _Q3.f64[0]), v1416, _Q3, 1);
    v2276 = vmlaq_laneq_f64(vmlaq_n_f64(v2275, v1417, _Q3.f64[0]), _Q31, _Q3, 1);
    _Q9.f64[1] = v2125;
    *(_QWORD *)&_Q3.f64[0] = v2483.i64[1];
    __asm { FMLA            D9, D3, V0.D[1] }
    _Q3 = v2489;
    v2409 = vmlaq_laneq_f64(vmlaq_n_f64(v2408, v1419, _Q3.f64[0]), v1420, _Q3, 1);
    v1445 = vmlaq_laneq_f64(vmlaq_n_f64(v1411, v1415, _Q3.f64[0]), v1416, _Q3, 1);
    v1446 = vmlaq_laneq_f64(vmlaq_n_f64(v1412, v1417, _Q3.f64[0]), _Q31, _Q3, 1);
    _Q3.f64[0] = v2489.f64[1];
    __asm { FMLA            D27, D3, V0.D[1] }
    v1447 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2426[16], *(int64x2_t *)&v2430[16]);
    v1448 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2426[16], *(int64x2_t *)&v2430[16]);
    v1449 = (float64x2_t)vzip1q_s64(v2436, v2442);
    v1450 = (float64x2_t)vzip2q_s64(v2436, v2442);
    v1451 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2418[16], *(int64x2_t *)&v2422[16]);
    _Q2 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2418[16], *(int64x2_t *)&v2422[16]);
    _Q25 = (float64x2_t)v2454;
    v1454 = vmlaq_laneq_f64(vmlaq_n_f64(v1422, v1451, _Q25.f64[0]), _Q2, _Q25, 1);
    v1455 = vmlaq_laneq_f64(vmlaq_n_f64(v1423, v1447, _Q25.f64[0]), v1448, _Q25, 1);
    v1456 = vmlaq_laneq_f64(vmlaq_n_f64(v1424, v1449, _Q25.f64[0]), v1450, _Q25, 1);
    _Q31.f64[1] = v2448.f64[1];
    *(_QWORD *)&_Q25.f64[0] = v2454.i64[1];
    __asm { FMLA            D7, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2460;
    v1459 = vmlaq_laneq_f64(vmlaq_n_f64(v1429, v1451, _Q25.f64[0]), _Q2, _Q25, 1);
    v1460 = vmlaq_laneq_f64(vmlaq_n_f64(v1430, v1447, _Q25.f64[0]), v1448, _Q25, 1);
    v1461 = vmlaq_laneq_f64(vmlaq_n_f64(v1431, v1449, _Q25.f64[0]), v1450, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2460.i64[1];
    __asm { FMLA            D21, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2466;
    v1463 = vmlaq_laneq_f64(vmlaq_n_f64(v1433, v1451, _Q25.f64[0]), _Q2, _Q25, 1);
    v1464 = vmlaq_laneq_f64(vmlaq_n_f64(v1434, v1447, _Q25.f64[0]), v1448, _Q25, 1);
    v1465 = vmlaq_laneq_f64(vmlaq_n_f64(v1435, v1449, _Q25.f64[0]), v1450, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2466.i64[1];
    __asm { FMLA            D26, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2472;
    v1467 = vmlaq_laneq_f64(vmlaq_n_f64(v1437, v1451, _Q25.f64[0]), _Q2, _Q25, 1);
    v2232 = vmlaq_laneq_f64(vmlaq_n_f64(v2231, v1447, _Q25.f64[0]), v1448, _Q25, 1);
    v1468 = vmlaq_laneq_f64(vmlaq_n_f64(v1438, v1449, _Q25.f64[0]), v1450, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2472.i64[1];
    __asm { FMLA            D11, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2478;
    v1470 = vmlaq_laneq_f64(vmlaq_n_f64(v1440, v1451, _Q25.f64[0]), _Q2, _Q25, 1);
    v1471 = vmlaq_laneq_f64(vmlaq_n_f64(v1441, v1447, _Q25.f64[0]), v1448, _Q25, 1);
    v1472 = vmlaq_laneq_f64(vmlaq_n_f64(v1442, v1449, _Q25.f64[0]), v1450, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2478.i64[1];
    __asm { FMLA            D15, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2484;
    v2363 = vmlaq_laneq_f64(vmlaq_n_f64(v2362, v1451, _Q25.f64[0]), _Q2, _Q25, 1);
    v2319 = vmlaq_laneq_f64(vmlaq_n_f64(v2318, v1447, _Q25.f64[0]), v1448, _Q25, 1);
    v2277 = vmlaq_laneq_f64(vmlaq_n_f64(v2276, v1449, _Q25.f64[0]), v1450, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2484.i64[1];
    __asm { FMLA            D9, D25, V31.D[1] }
    v1474 = v2490;
    v2410 = vmlaq_laneq_f64(vmlaq_n_f64(v2409, v1451, v1474.f64[0]), _Q2, v1474, 1);
    v1475 = vmlaq_laneq_f64(vmlaq_n_f64(v1445, v1447, v1474.f64[0]), v1448, v1474, 1);
    v1476 = vmlaq_laneq_f64(vmlaq_n_f64(v1446, v1449, v1474.f64[0]), v1450, v1474, 1);
    _Q2.f64[0] = v2490.f64[1];
    __asm { FMLA            D27, D2, V31.D[1] }
    v1477 = (float64x2_t)vzip1q_s64((int64x2_t)v2419, (int64x2_t)v2423);
    v1478 = (float64x2_t)vzip2q_s64((int64x2_t)v2419, (int64x2_t)v2423);
    v1479 = (float64x2_t)vzip1q_s64(v2427, v2431);
    v1480 = (float64x2_t)vzip2q_s64(v2427, v2431);
    v1481 = (float64x2_t)vzip1q_s64(v2437, v2443);
    _Q2 = (float64x2_t)vzip2q_s64(v2437, v2443);
    _Q25 = (float64x2_t)v2455;
    v1484 = vmlaq_laneq_f64(vmlaq_n_f64(v1454, v1477, _Q25.f64[0]), v1478, _Q25, 1);
    v1485 = vmlaq_laneq_f64(vmlaq_n_f64(v1455, v1479, _Q25.f64[0]), v1480, _Q25, 1);
    v1486 = vmlaq_laneq_f64(vmlaq_n_f64(v1456, v1481, _Q25.f64[0]), _Q2, _Q25, 1);
    _Q31.f64[1] = v2449.f64[1];
    *(_QWORD *)&_Q25.f64[0] = v2455.i64[1];
    __asm { FMLA            D7, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2461;
    v1489 = vmlaq_laneq_f64(vmlaq_n_f64(v1459, v1477, _Q25.f64[0]), v1478, _Q25, 1);
    v1490 = vmlaq_laneq_f64(vmlaq_n_f64(v1460, v1479, _Q25.f64[0]), v1480, _Q25, 1);
    v1491 = vmlaq_laneq_f64(vmlaq_n_f64(v1461, v1481, _Q25.f64[0]), _Q2, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2461.i64[1];
    __asm { FMLA            D21, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2467;
    v1493 = vmlaq_laneq_f64(vmlaq_n_f64(v1463, v1477, _Q25.f64[0]), v1478, _Q25, 1);
    v1494 = vmlaq_laneq_f64(vmlaq_n_f64(v1464, v1479, _Q25.f64[0]), v1480, _Q25, 1);
    v1495 = vmlaq_laneq_f64(vmlaq_n_f64(v1465, v1481, _Q25.f64[0]), _Q2, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2467.i64[1];
    __asm { FMLA            D26, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2473;
    v1497 = vmlaq_laneq_f64(vmlaq_n_f64(v1467, v1477, _Q25.f64[0]), v1478, _Q25, 1);
    v2233 = vmlaq_laneq_f64(vmlaq_n_f64(v2232, v1479, _Q25.f64[0]), v1480, _Q25, 1);
    v1498 = vmlaq_laneq_f64(vmlaq_n_f64(v1468, v1481, _Q25.f64[0]), _Q2, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2473.i64[1];
    __asm { FMLA            D11, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2479;
    v1500 = vmlaq_laneq_f64(vmlaq_n_f64(v1470, v1477, _Q25.f64[0]), v1478, _Q25, 1);
    v1501 = vmlaq_laneq_f64(vmlaq_n_f64(v1471, v1479, _Q25.f64[0]), v1480, _Q25, 1);
    v1502 = vmlaq_laneq_f64(vmlaq_n_f64(v1472, v1481, _Q25.f64[0]), _Q2, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2479.i64[1];
    __asm { FMLA            D15, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2485;
    v2364 = vmlaq_laneq_f64(vmlaq_n_f64(v2363, v1477, _Q25.f64[0]), v1478, _Q25, 1);
    v2320 = vmlaq_laneq_f64(vmlaq_n_f64(v2319, v1479, _Q25.f64[0]), v1480, _Q25, 1);
    v2278 = vmlaq_laneq_f64(vmlaq_n_f64(v2277, v1481, _Q25.f64[0]), _Q2, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2485.i64[1];
    __asm { FMLA            D9, D25, V31.D[1] }
    v1504 = v2491;
    v2411 = vmlaq_laneq_f64(vmlaq_n_f64(v2410, v1477, v1504.f64[0]), v1478, v1504, 1);
    v1505 = vmlaq_laneq_f64(vmlaq_n_f64(v1475, v1479, v1504.f64[0]), v1480, v1504, 1);
    v1506 = vmlaq_laneq_f64(vmlaq_n_f64(v1476, v1481, v1504.f64[0]), _Q2, v1504, 1);
    _Q2.f64[0] = v2491.f64[1];
    __asm { FMLA            D27, D2, V31.D[1] }
    v1507 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2420, *(int64x2_t *)v2424);
    _Q0 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2420, *(int64x2_t *)v2424);
    v1509 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2428, v2432);
    v1510 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2428, v2432);
    v1511 = (float64x2_t)vzip1q_s64(v2438, v2444);
    _Q2 = (float64x2_t)vzip2q_s64(v2438, v2444);
    _Q25 = (float64x2_t)v2456;
    v1514 = vmlaq_laneq_f64(vmlaq_n_f64(v1484, v1507, _Q25.f64[0]), _Q0, _Q25, 1);
    v1515 = vmlaq_laneq_f64(vmlaq_n_f64(v1485, v1509, _Q25.f64[0]), v1510, _Q25, 1);
    v1516 = vmlaq_laneq_f64(vmlaq_n_f64(v1486, v1511, _Q25.f64[0]), _Q2, _Q25, 1);
    _Q31.f64[1] = v2450.f64[1];
    *(_QWORD *)&_Q25.f64[0] = v2456.i64[1];
    __asm { FMLA            D7, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2462;
    v1519 = vmlaq_laneq_f64(vmlaq_n_f64(v1489, v1507, _Q25.f64[0]), _Q0, _Q25, 1);
    v1520 = vmlaq_laneq_f64(vmlaq_n_f64(v1490, v1509, _Q25.f64[0]), v1510, _Q25, 1);
    v1521 = vmlaq_laneq_f64(vmlaq_n_f64(v1491, v1511, _Q25.f64[0]), _Q2, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2462.i64[1];
    __asm { FMLA            D21, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2468;
    v1523 = vmlaq_laneq_f64(vmlaq_n_f64(v1493, v1507, _Q25.f64[0]), _Q0, _Q25, 1);
    v1524 = vmlaq_laneq_f64(vmlaq_n_f64(v1494, v1509, _Q25.f64[0]), v1510, _Q25, 1);
    v1525 = vmlaq_laneq_f64(vmlaq_n_f64(v1495, v1511, _Q25.f64[0]), _Q2, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2468.i64[1];
    __asm { FMLA            D26, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2474;
    v1527 = vmlaq_laneq_f64(vmlaq_n_f64(v1497, v1507, _Q25.f64[0]), _Q0, _Q25, 1);
    v2234 = vmlaq_laneq_f64(vmlaq_n_f64(v2233, v1509, _Q25.f64[0]), v1510, _Q25, 1);
    v1528 = vmlaq_laneq_f64(vmlaq_n_f64(v1498, v1511, _Q25.f64[0]), _Q2, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2474.i64[1];
    __asm { FMLA            D11, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2480;
    v1530 = vmlaq_laneq_f64(vmlaq_n_f64(v1500, v1507, _Q25.f64[0]), _Q0, _Q25, 1);
    v1531 = vmlaq_laneq_f64(vmlaq_n_f64(v1501, v1509, _Q25.f64[0]), v1510, _Q25, 1);
    v1532 = vmlaq_laneq_f64(vmlaq_n_f64(v1502, v1511, _Q25.f64[0]), _Q2, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2480.i64[1];
    __asm { FMLA            D15, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2486;
    v2365 = vmlaq_laneq_f64(vmlaq_n_f64(v2364, v1507, _Q25.f64[0]), _Q0, _Q25, 1);
    v2321 = vmlaq_laneq_f64(vmlaq_n_f64(v2320, v1509, _Q25.f64[0]), v1510, _Q25, 1);
    v2279 = vmlaq_laneq_f64(vmlaq_n_f64(v2278, v1511, _Q25.f64[0]), _Q2, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2486.i64[1];
    __asm { FMLA            D9, D25, V31.D[1] }
    v1534 = v2492;
    v2412 = vmlaq_laneq_f64(vmlaq_n_f64(v2411, v1507, v1534.f64[0]), _Q0, v1534, 1);
    v1535 = vmlaq_laneq_f64(vmlaq_n_f64(v1505, v1509, v1534.f64[0]), v1510, v1534, 1);
    v1536 = vmlaq_laneq_f64(vmlaq_n_f64(v1506, v1511, v1534.f64[0]), _Q2, v1534, 1);
    _Q2.f64[0] = v2492.f64[1];
    __asm { FMLA            D27, D2, V31.D[1] }
    v1537 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2420[16], *(int64x2_t *)&v2424[16]);
    v1538 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2420[16], *(int64x2_t *)&v2424[16]);
    v1539 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2428[16], v2433);
    v1540 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2428[16], v2433);
    v1541 = (float64x2_t)vzip1q_s64(v2439, (int64x2_t)v2445);
    v1542 = (float64x2_t)vzip2q_s64(v2439, (int64x2_t)v2445);
    _Q25 = (float64x2_t)v2457;
    v2116 = vmlaq_laneq_f64(vmlaq_n_f64(v1514, v1537, _Q25.f64[0]), v1538, _Q25, 1);
    v2147 = vmlaq_laneq_f64(vmlaq_n_f64(v1515, v1539, _Q25.f64[0]), v1540, _Q25, 1);
    v1544 = vmlaq_laneq_f64(vmlaq_n_f64(v1516, v1541, _Q25.f64[0]), v1542, _Q25, 1);
    _Q31.f64[1] = v2451.f64[1];
    *(_QWORD *)&_Q25.f64[0] = v2457.i64[1];
    __asm { FMLA            D7, D25, V31.D[1] }
    _Q25 = (float64x2_t)v2463;
    v1546 = vmlaq_laneq_f64(vmlaq_n_f64(v1519, v1537, _Q25.f64[0]), v1538, _Q25, 1);
    v2202 = vmlaq_laneq_f64(vmlaq_n_f64(v1520, v1539, _Q25.f64[0]), v1540, _Q25, 1);
    v1547 = vmlaq_laneq_f64(vmlaq_n_f64(v1521, v1541, _Q25.f64[0]), v1542, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2463.i64[1];
    __asm { FMLA            D21, D25, V31.D[1] }
    v1548 = _Q21;
    _Q25 = (float64x2_t)v2469;
    v2166 = vmlaq_laneq_f64(vmlaq_n_f64(v1523, v1537, _Q25.f64[0]), v1538, _Q25, 1);
    v1550 = vmlaq_laneq_f64(vmlaq_n_f64(v1524, v1539, _Q25.f64[0]), v1540, _Q25, 1);
    v1551 = vmlaq_laneq_f64(vmlaq_n_f64(v1525, v1541, _Q25.f64[0]), v1542, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2469.i64[1];
    __asm { FMLA            D26, D25, V31.D[1] }
    v1552 = _Q26;
    _Q25 = (float64x2_t)v2475;
    v1554 = vmlaq_laneq_f64(vmlaq_n_f64(v1527, v1537, _Q25.f64[0]), v1538, _Q25, 1);
    v1555 = vmlaq_laneq_f64(vmlaq_n_f64(v2234, v1539, _Q25.f64[0]), v1540, _Q25, 1);
    v1556 = vmlaq_laneq_f64(vmlaq_n_f64(v1528, v1541, _Q25.f64[0]), v1542, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2475.i64[1];
    __asm { FMLA            D11, D25, V31.D[1] }
    _Q8 = _Q11;
    _Q25 = (float64x2_t)v2481;
    v1558 = vmlaq_laneq_f64(vmlaq_n_f64(v1530, v1537, _Q25.f64[0]), v1538, _Q25, 1);
    v1559 = vmlaq_laneq_f64(vmlaq_n_f64(v1531, v1539, _Q25.f64[0]), v1540, _Q25, 1);
    v1560 = vmlaq_laneq_f64(vmlaq_n_f64(v1532, v1541, _Q25.f64[0]), v1542, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2481.i64[1];
    __asm { FMLA            D15, D25, V31.D[1] }
    v1561 = _Q15;
    _Q25 = (float64x2_t)v2487;
    v1563 = vmlaq_laneq_f64(vmlaq_n_f64(v2365, v1537, _Q25.f64[0]), v1538, _Q25, 1);
    v1564 = vmlaq_laneq_f64(vmlaq_n_f64(v2321, v1539, _Q25.f64[0]), v1540, _Q25, 1);
    v1565 = vmlaq_laneq_f64(vmlaq_n_f64(v2279, v1541, _Q25.f64[0]), v1542, _Q25, 1);
    *(_QWORD *)&_Q25.f64[0] = v2487.i64[1];
    __asm { FMLA            D9, D25, V31.D[1] }
    v1566 = v2493;
    v2413 = vmlaq_laneq_f64(vmlaq_n_f64(v2412, v1537, v1566.f64[0]), v1538, v1566, 1);
    v1567 = vmlaq_laneq_f64(vmlaq_n_f64(v1535, v1539, v1566.f64[0]), v1540, v1566, 1);
    _Q0.f64[0] = v2493.f64[1];
    __asm { FMLA            D27, D0, V31.D[1] }
    v1568 = vaddq_f64(*(float64x2_t *)(v1380 + 32), v1544);
    v1569 = vaddq_f64(*(float64x2_t *)(v1380 + 16), v2147);
    *(float64x2_t *)v1380 = vaddq_f64(*(float64x2_t *)v1380, v2116);
    *(float64x2_t *)(v1380 + 16) = v1569;
    *(float64x2_t *)(v1380 + 32) = v1568;
    v1569.f64[0] = *(float64_t *)(v1380 + 48);
    *(_QWORD *)(v1380 + 48) = *(_OWORD *)&vaddq_f64(v1569, _Q7);
    *(float64x2_t *)(v1380 + 56) = vaddq_f64(*(float64x2_t *)(v1380 + 56), v1546);
    *(float64x2_t *)(v1380 + 88) = vaddq_f64(*(float64x2_t *)(v1380 + 88), v1547);
    v1568.f64[1] = v2166.f64[1];
    v1570 = vaddq_f64(*(float64x2_t *)(v1380 + 72), v2202);
    *(float64x2_t *)(v1380 + 72) = v1570;
    v1570.f64[0] = *(float64_t *)(v1380 + 104);
    *(_QWORD *)(v1380 + 104) = *(_OWORD *)&vaddq_f64(v1570, v1548);
    v1571 = *(float64x2_t *)(v1380 + 128);
    v1572 = vaddq_f64(*(float64x2_t *)(v1380 + 144), v1551);
    *(float64x2_t *)(v1380 + 144) = v1572;
    v1572.f64[0] = *(float64_t *)(v1380 + 160);
    *(_QWORD *)&v1572.f64[0] = *(_OWORD *)&vaddq_f64(v1572, v1552);
    v1573 = vaddq_f64(v1571, v1550);
    v1568.f64[0] = *(float64_t *)(v1380 + 216);
    v1574 = vaddq_f64(*(float64x2_t *)(v1380 + 184), v1555);
    v1575 = vaddq_f64(*(float64x2_t *)(v1380 + 200), v1556);
    v1576 = vaddq_f64(*(float64x2_t *)(v1380 + 168), v1554);
    v1544.f64[0] = *(float64_t *)(v1380 + 272);
    v1577 = vaddq_f64(*(float64x2_t *)(v1380 + 240), v1559);
    v1578 = vaddq_f64(*(float64x2_t *)(v1380 + 256), v1560);
    v1579 = vaddq_f64(*(float64x2_t *)(v1380 + 224), v1558);
    v1552.f64[0] = *(float64_t *)(v1380 + 328);
    *(_QWORD *)&v1538.f64[0] = *(_OWORD *)&vaddq_f64(v1552, _Q9);
    v1580 = vaddq_f64(*(float64x2_t *)(v1380 + 296), v1564);
    v1581 = vaddq_f64(*(float64x2_t *)(v1380 + 312), v1565);
    v1582 = vaddq_f64(*(float64x2_t *)(v1380 + 280), v1563);
    v1558.f64[0] = *(float64_t *)(v1380 + 384);
    v1583 = vaddq_f64(*(float64x2_t *)(v1380 + 352), v1567);
    v1584 = vaddq_f64(*(float64x2_t *)(v1380 + 368), vmlaq_laneq_f64(vmlaq_n_f64(v1536, v1541, v1566.f64[0]), v1542, v1566, 1));
    *(float64x2_t *)(v1380 + 112) = vaddq_f64(*(float64x2_t *)(v1380 + 112), v2166);
    *(float64x2_t *)(v1380 + 128) = v1573;
    *(float64_t *)(v1380 + 160) = v1572.f64[0];
    *(float64x2_t *)(v1380 + 168) = v1576;
    *(float64x2_t *)(v1380 + 200) = v1575;
    *(float64x2_t *)(v1380 + 184) = v1574;
    *(_QWORD *)(v1380 + 216) = *(_OWORD *)&vaddq_f64(v1568, _Q8);
    *(float64x2_t *)(v1380 + 240) = v1577;
    *(float64x2_t *)(v1380 + 256) = v1578;
    *(float64x2_t *)(v1380 + 224) = v1579;
    *(_QWORD *)(v1380 + 272) = *(_OWORD *)&vaddq_f64(v1544, v1561);
    *(float64x2_t *)(v1380 + 296) = v1580;
    *(float64x2_t *)(v1380 + 312) = v1581;
    *(float64x2_t *)(v1380 + 280) = v1582;
    *(float64_t *)(v1380 + 328) = v1538.f64[0];
    *(float64x2_t *)(v1380 + 352) = v1583;
    *(float64x2_t *)(v1380 + 368) = v1584;
    *(float64x2_t *)(v1380 + 336) = vaddq_f64(*(float64x2_t *)(v1380 + 336), v2413);
    *(_QWORD *)(v1380 + 384) = *(_OWORD *)&vaddq_f64(v1558, _Q27);
LABEL_131:
    v1585 = *(float64x2_t *)(v826 + 152);
    _V21.D[1] = v2446.f64[1];
    _Q19 = vmulq_f64(v2446, *v835);
    _D23 = *(_QWORD *)(v826 + 144);
    __asm { FMLA            D19, D23, V21.D[1] }
    _V2.D[1] = v2447.f64[1];
    _D17 = *(_QWORD *)(v826 + 160);
    __asm { FMLA            D19, D17, V2.D[1] }
    _Q2 = *(float64x2_t *)(v826 + 168);
    v1592 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)__src, (int64x2_t)v2421), v835->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)__src, (int64x2_t)v2421), *v835, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)v2418, *(int64x2_t *)v2422), v1585.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v2418, *(int64x2_t *)v2422), v1585, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2418[16], *(int64x2_t *)&v2422[16]), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2418[16], *(int64x2_t *)&v2422[16]), _Q2, 1);
    v1593 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v2425, v2429), v835->f64[0]), (float64x2_t)vzip2q_s64(v2425, v2429), *v835, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)v2426, *(int64x2_t *)v2430), v1585.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v2426, *(int64x2_t *)v2430), v1585, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2426[16], *(int64x2_t *)&v2430[16]), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2426[16], *(int64x2_t *)&v2430[16]), _Q2, 1);
    v1594 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v2434, v2440), v835->f64[0]), (float64x2_t)vzip2q_s64(v2434, v2440), *v835, 1), (float64x2_t)vzip1q_s64(v2435, v2441), v1585.f64[0]), (float64x2_t)vzip2q_s64(v2435, v2441), v1585, 1), (float64x2_t)vzip1q_s64(v2436, v2442), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2436, v2442), _Q2, 1);
    _V6.D[1] = v2448.f64[1];
    _Q2.f64[0] = *(float64_t *)(v826 + 176);
    __asm { FMLA            D19, D2, V6.D[1] }
    _Q2 = *(float64x2_t *)(v826 + 184);
    v1597 = vmlaq_laneq_f64(vmlaq_n_f64(v1592, (float64x2_t)vzip1q_s64((int64x2_t)v2419, (int64x2_t)v2423), _Q2.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v2419, (int64x2_t)v2423), _Q2, 1);
    v1598 = vmlaq_laneq_f64(vmlaq_n_f64(v1593, (float64x2_t)vzip1q_s64(v2427, v2431), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2427, v2431), _Q2, 1);
    _Q5.n128_u64[1] = *(_QWORD *)&v2449.f64[1];
    v1599 = vmlaq_laneq_f64(vmlaq_n_f64(v1594, (float64x2_t)vzip1q_s64(v2437, v2443), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2437, v2443), _Q2, 1);
    _Q2.f64[0] = *(float64_t *)(v826 + 192);
    __asm { FMLA            D19, D2, V5.D[1] }
    _Q2 = *(float64x2_t *)(v826 + 200);
    v1601 = vmlaq_laneq_f64(vmlaq_n_f64(v1597, (float64x2_t)vzip1q_s64(*(int64x2_t *)v2420, *(int64x2_t *)v2424), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v2420, *(int64x2_t *)v2424), _Q2, 1);
    v1602 = vmlaq_laneq_f64(vmlaq_n_f64(v1598, (float64x2_t)vzip1q_s64(*(int64x2_t *)v2428, v2432), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v2428, v2432), _Q2, 1);
    v1603 = vmlaq_laneq_f64(vmlaq_n_f64(v1599, (float64x2_t)vzip1q_s64(v2438, v2444), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2438, v2444), _Q2, 1);
    _V4.D[1] = v2450.f64[1];
    _Q2.f64[0] = *(float64_t *)(v826 + 208);
    __asm { FMLA            D19, D2, V4.D[1] }
    _Q2 = *(float64x2_t *)(v826 + 216);
    v1605 = vmlaq_laneq_f64(vmlaq_n_f64(v1601, (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2420[16], *(int64x2_t *)&v2424[16]), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2420[16], *(int64x2_t *)&v2424[16]), _Q2, 1);
    _Q5.n128_u64[0] = v2439.i64[0];
    _Q6 = v2445;
    v1606 = vmlaq_laneq_f64(vmlaq_n_f64(v1602, (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2428[16], v2433), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2428[16], v2433), _Q2, 1);
    _Q3 = vmlaq_laneq_f64(vmlaq_n_f64(v1603, (float64x2_t)vzip1q_s64(v2439, (int64x2_t)v2445), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2439, (int64x2_t)v2445), _Q2, 1);
    _V4.D[1] = v2451.f64[1];
    _Q2.f64[0] = *(float64_t *)(v826 + 224);
    __asm { FMLA            D19, D2, V4.D[1] }
    v1608 = *(_QWORD *)v2416 + 8 * (*(_DWORD *)(v2416 + 32) - v833 + 8 * v833);
    _Q2.f64[0] = *(float64_t *)(v1608 + 48);
    *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q19);
    _Q1 = vsubq_f64(*(float64x2_t *)(v1608 + 16), v1606);
    _Q4 = *(float64x2_t *)v1608;
    *(float64x2_t *)v1608 = vsubq_f64(*(float64x2_t *)v1608, v1605);
    *(float64x2_t *)(v1608 + 16) = _Q1;
    _Q0 = vsubq_f64(*(float64x2_t *)(v1608 + 32), _Q3);
    *(float64x2_t *)(v1608 + 32) = _Q0;
    *(float64_t *)(v1608 + 48) = _Q2.f64[0];
LABEL_132:
    v9 = a1;
    v825 = v2041;
    if (v831)
    {
      v1609 = *(float64x2_t *)(v826 + 152);
      _V21.D[1] = v2488.f64[1];
      _Q19 = vmulq_f64(v2488, *v835);
      _D23 = *(_QWORD *)(v826 + 144);
      __asm { FMLA            D19, D23, V21.D[1] }
      _V2.D[1] = v2489.f64[1];
      _D17 = *(_QWORD *)(v826 + 160);
      __asm { FMLA            D19, D17, V2.D[1] }
      _Q2 = *(float64x2_t *)(v826 + 168);
      v1616 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v2452, (int64x2_t)v2458), v835->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v2452, (int64x2_t)v2458), *v835, 1), (float64x2_t)vzip1q_s64(v2453, v2459), v1609.f64[0]), (float64x2_t)vzip2q_s64(v2453, v2459), v1609, 1), (float64x2_t)vzip1q_s64(v2454, v2460), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2454, v2460), _Q2, 1);
      v1617 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v2464, (int64x2_t)v2470), v835->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v2464, (int64x2_t)v2470), *v835, 1), (float64x2_t)vzip1q_s64(v2465, v2471), v1609.f64[0]), (float64x2_t)vzip2q_s64(v2465, v2471), v1609, 1), (float64x2_t)vzip1q_s64(v2466, v2472), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2466, v2472), _Q2, 1);
      v1618 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v2476, (int64x2_t)v2482), v835->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v2476, (int64x2_t)v2482), *v835, 1), (float64x2_t)vzip1q_s64(v2477, v2483), v1609.f64[0]), (float64x2_t)vzip2q_s64(v2477, v2483), v1609, 1), (float64x2_t)vzip1q_s64(v2478, v2484), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2478, v2484), _Q2, 1);
      _V6.D[1] = v2490.f64[1];
      _Q2.f64[0] = *(float64_t *)(v826 + 176);
      __asm { FMLA            D19, D2, V6.D[1] }
      _Q2 = *(float64x2_t *)(v826 + 184);
      v1621 = vmlaq_laneq_f64(vmlaq_n_f64(v1616, (float64x2_t)vzip1q_s64(v2455, v2461), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2455, v2461), _Q2, 1);
      v1622 = vmlaq_laneq_f64(vmlaq_n_f64(v1617, (float64x2_t)vzip1q_s64(v2467, v2473), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2467, v2473), _Q2, 1);
      _V5.D[1] = v2491.f64[1];
      v1624 = vmlaq_laneq_f64(vmlaq_n_f64(v1618, (float64x2_t)vzip1q_s64(v2479, v2485), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2479, v2485), _Q2, 1);
      _Q2.f64[0] = *(float64_t *)(v826 + 192);
      __asm { FMLA            D19, D2, V5.D[1] }
      _Q2 = *(float64x2_t *)(v826 + 200);
      v1626 = vmlaq_laneq_f64(vmlaq_n_f64(v1621, (float64x2_t)vzip1q_s64(v2456, v2462), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2456, v2462), _Q2, 1);
      v1627 = vmlaq_laneq_f64(vmlaq_n_f64(v1622, (float64x2_t)vzip1q_s64(v2468, v2474), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2468, v2474), _Q2, 1);
      v1628 = vmlaq_laneq_f64(vmlaq_n_f64(v1624, (float64x2_t)vzip1q_s64(v2480, v2486), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2480, v2486), _Q2, 1);
      _V4.D[1] = v2492.f64[1];
      _Q2.f64[0] = *(float64_t *)(v826 + 208);
      __asm { FMLA            D19, D2, V4.D[1] }
      _Q2 = *(float64x2_t *)(v826 + 216);
      v1630 = vmlaq_laneq_f64(vmlaq_n_f64(v1626, (float64x2_t)vzip1q_s64(v2457, v2463), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2457, v2463), _Q2, 1);
      _Q5 = (__n128)v2481;
      _Q6 = (__n128)v2487;
      v1631 = vmlaq_laneq_f64(vmlaq_n_f64(v1627, (float64x2_t)vzip1q_s64(v2469, v2475), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v2469, v2475), _Q2, 1);
      _Q3 = vmlaq_laneq_f64(vmlaq_n_f64(v1628, (float64x2_t)vzip1q_s64((int64x2_t)_Q5, (int64x2_t)_Q6), _Q2.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q5, (int64x2_t)_Q6), _Q2, 1);
      _V4.D[1] = v2493.f64[1];
      _Q2.f64[0] = *(float64_t *)(v826 + 224);
      __asm { FMLA            D19, D2, V4.D[1] }
      v1633 = *(_QWORD *)v2416 + 8 * (*(_DWORD *)(v2416 + 32) - v834 + 8 * v834);
      _Q2.f64[0] = *(float64_t *)(v1633 + 48);
      *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q19);
      _Q1 = vsubq_f64(*(float64x2_t *)(v1633 + 16), v1631);
      _Q4 = *(float64x2_t *)v1633;
      *(float64x2_t *)v1633 = vsubq_f64(*(float64x2_t *)v1633, v1630);
      *(float64x2_t *)(v1633 + 16) = _Q1;
      _Q0 = vsubq_f64(*(float64x2_t *)(v1633 + 32), _Q3);
      *(float64x2_t *)(v1633 + 32) = _Q0;
      *(float64_t *)(v1633 + 48) = _Q2.f64[0];
    }
LABEL_70:
    v826 += 264;
  }
  while (v826 != v825);
  v2091 = (double *)v9[2];
  v2416 = v9[3];
  v10 = (_QWORD *)*v9;
LABEL_135:
  v1634 = v10[13];
  v1635 = v10[14];
  if (v1634 == v1635)
    goto LABEL_237;
  v2074 = (uint64_t)(v2091 + 4);
  while (2)
  {
    v1637 = *(_QWORD *)(v1634 + 64);
    v1636 = *(_QWORD *)(v1634 + 72);
    v1638 = *(_QWORD *)(v1634 + 80);
    if (((*(unsigned __int8 *)(v1636 + 124) >> 2) & 1) + ((*(unsigned __int8 *)(v1637 + 28) >> 2) & 1) == (char)(32 * *(_BYTE *)(v1638 + 124)) >> 7)
      v1639 = 2;
    else
      v1639 = 1;
    if ((v1639 & (_DWORD)v9[5]) == 0)
      goto LABEL_137;
    v1640 = *(unsigned __int8 *)(v1637 + 4);
    if (*(_BYTE *)(v1637 + 4))
    {
      if (*(_DWORD *)(v1637 + 24) == -1)
        goto LABEL_137;
    }
    v1641 = *(unsigned __int8 *)(v1636 + 4);
    if (*(_BYTE *)(v1636 + 4))
    {
      if (*(_DWORD *)(v1636 + 120) == -1)
        goto LABEL_137;
    }
    v1642 = *(unsigned __int8 *)(v1638 + 4);
    if (*(_BYTE *)(v1638 + 4))
    {
      if (*(_DWORD *)(v1638 + 120) == -1)
        goto LABEL_137;
    }
    v1643 = (_QWORD *)v9[1];
    if (!*(_BYTE *)(v1637 + 4))
    {
      v1644 = -1;
      if (!*(_BYTE *)(v1636 + 4))
        goto LABEL_157;
LABEL_150:
      v1645 = *(_DWORD *)(*v1643 + 4 * *(unsigned int *)(v1636 + 120));
      v1646 = v1634 + 8;
      if (*(_BYTE *)(v1638 + 4))
        goto LABEL_151;
LABEL_158:
      _Q0.f64[0] = sub_239CCA46C(v1646, v2074, (uint64_t)&__src, _Q0, _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], _Q4, _Q5.n128_f64[0], (float64x2_t)_Q6);
      v1647 = -1;
      if (v1641)
        goto LABEL_188;
      goto LABEL_220;
    }
    v1644 = *(_DWORD *)(v1643[3] + 4 * *(unsigned int *)(v1637 + 24));
    if (*(_BYTE *)(v1636 + 4))
      goto LABEL_150;
LABEL_157:
    v1645 = -1;
    v1646 = v1634 + 8;
    if (!*(_BYTE *)(v1638 + 4))
      goto LABEL_158;
LABEL_151:
    v1647 = *(_DWORD *)(*v1643 + 4 * *(unsigned int *)(v1638 + 120));
    sub_239CCA46C(v1646, v2074, (uint64_t)&__src, _Q0, _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], _Q4, _Q5.n128_f64[0], (float64x2_t)_Q6);
    if (v1640)
    {
      v1651 = *(unint64_t **)(v2416 + 48);
      v1652 = v1651[11] + 24 * v1644;
      v1654 = *(char **)v1652;
      v1653 = *(char **)(v1652 + 8);
      if (*(char **)v1652 != v1653)
      {
        while (*(_DWORD *)v1654 < v1647)
        {
          v1654 += 16;
          if (v1654 == v1653)
            goto LABEL_164;
        }
      }
      if (v1654 != v1653)
      {
        if (*(_DWORD *)v1654 == v1647)
        {
          v1656 = v1651[2] + 8 * *((_QWORD *)v1654 + 1);
          goto LABEL_165;
        }
        v1653 = v1654;
      }
LABEL_164:
      v1656 = sub_239CCB240(v1651, (char **)v1652, v1647, v1653);
LABEL_165:
      v1657 = (const double *)&v2425;
      v2497 = vld3q_f64(v1657);
      v1658 = (const double *)&v2427;
      v2503 = vld3q_f64(v1658);
      v1659 = (const double *)&v2429;
      v2507 = vld3q_f64(v1659);
      v1650.f64[0] = *(float64_t *)(v1656 + 48);
      _V22.D[1] = *(double *)&v2431.i64[1];
      v1661 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2497.val[0], __src.f64[0]), v2497.val[1], __src, 1), v2497.val[2], *(double *)v2418);
      v2497.val[0] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2503.val[0], __src.f64[0]), v2503.val[1], __src, 1), v2503.val[2], *(double *)v2418);
      v2497.val[2] = vmulq_f64((float64x2_t)v2431, __src);
      v2503.val[0].f64[0] = __src.f64[1];
      __asm { FMLA            D2, D3, V22.D[1] }
      v2497.val[2].f64[0] = v2497.val[2].f64[0] + *(double *)v2432.i64 * *(double *)v2418;
      v1648 = vaddq_f64(v1650, v2497.val[2]);
      v2497.val[1] = vaddq_f64(*(float64x2_t *)(v1656 + 32), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2507.val[0], __src.f64[0]), v2507.val[1], __src, 1), v2507.val[2], *(double *)v2418));
      v2497.val[0] = vaddq_f64(*(float64x2_t *)(v1656 + 16), v2497.val[0]);
      v1649 = vaddq_f64(*(float64x2_t *)v1656, v1661);
      *(float64x2_t *)v1656 = v1649;
      *(float64x2_t *)(v1656 + 16) = v2497.val[0];
      *(float64x2_t *)(v1656 + 32) = v2497.val[1];
      *(float64_t *)(v1656 + 48) = v1648.f64[0];
    }
    if (v1641 && v1645 >= v1647)
    {
      v1662 = *(unint64_t **)(v2416 + 40);
      v1663 = v1662[11] + 24 * v1645;
      v1665 = *(char **)v1663;
      v1664 = *(char **)(v1663 + 8);
      if (*(char **)v1663 != v1664)
      {
        while (*(_DWORD *)v1665 < v1647)
        {
          v1665 += 16;
          if (v1665 == v1664)
            goto LABEL_176;
        }
      }
      if (v1665 != v1664)
      {
        if (*(_DWORD *)v1665 == v1647)
        {
          v1666 = v1662[2] + 8 * *((_QWORD *)v1665 + 1);
          goto LABEL_177;
        }
        v1664 = v1665;
      }
LABEL_176:
      v1666 = sub_239CCA368(v1662, (char **)v1663, v1647, v1664);
LABEL_177:
      v1667 = (const double *)&v2425;
      v2508 = vld3q_f64(v1667);
      v1668 = (const double *)&v2427;
      v2505 = vld3q_f64(v1668);
      v2167 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2508.val[0], *(double *)&v2418[8]), v2508.val[1], *(float64x2_t *)&v2418[8], 1), v2508.val[2], *(double *)&v2418[24]);
      v2148 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2505.val[0], *(double *)&v2418[8]), v2505.val[1], *(float64x2_t *)&v2418[8], 1), v2505.val[2], *(double *)&v2418[24]);
      v2117 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2508.val[0], v2419.f64[0]), v2508.val[1], v2419, 1), v2508.val[2], *(double *)v2420);
      v2092 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2505.val[0], v2419.f64[0]), v2505.val[1], v2419, 1), v2505.val[2], *(double *)v2420);
      v1649.f64[0] = *(float64_t *)&v2420[24];
      v2086 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2508.val[0], *(double *)&v2420[8]), v2508.val[1], *(float64x2_t *)&v2420[8], 1), v2508.val[2], *(double *)&v2420[24]);
      v2072 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2505.val[0], *(double *)&v2420[8]), v2505.val[1], *(float64x2_t *)&v2420[8], 1), v2505.val[2], *(double *)&v2420[24]);
      v1669 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2508.val[0], v2421.f64[0]), v2508.val[1], v2421, 1), v2508.val[2], *(double *)v2422);
      v1670 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2505.val[0], v2421.f64[0]), v2505.val[1], v2421, 1), v2505.val[2], *(double *)v2422);
      v1671 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2508.val[0], *(double *)&v2422[8]), v2508.val[1], *(float64x2_t *)&v2422[8], 1), v2508.val[2], *(double *)&v2422[24]);
      v1672 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2505.val[0], *(double *)&v2422[8]), v2505.val[1], *(float64x2_t *)&v2422[8], 1), v2505.val[2], *(double *)&v2422[24]);
      v1673 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2508.val[0], v2423.f64[0]), v2508.val[1], v2423, 1), v2508.val[2], *(double *)v2424);
      v1674 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2508.val[0], *(double *)&v2424[8]), v2508.val[1], *(float64x2_t *)&v2424[8], 1), v2508.val[2], *(double *)&v2424[24]);
      v1675 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2505.val[0], v2423.f64[0]), v2505.val[1], v2423, 1), v2505.val[2], *(double *)v2424);
      v1676 = (const double *)&v2429;
      v2498 = vld3q_f64(v1676);
      v1677 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2505.val[0], *(double *)&v2424[8]), v2505.val[1], *(float64x2_t *)&v2424[8], 1), v2505.val[2], *(double *)&v2424[24]);
      v2505.val[1] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2498.val[0], *(double *)&v2418[8]), v2498.val[1], *(float64x2_t *)&v2418[8], 1), v2498.val[2], *(double *)&v2418[24]);
      v2505.val[2] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2498.val[0], v2419.f64[0]), v2498.val[1], v2419, 1), v2498.val[2], *(double *)v2420);
      v2508.val[1] = v1649;
      v2508.val[2] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2498.val[0], *(double *)&v2420[8]), v2498.val[1], *(float64x2_t *)&v2420[8], 1), v2498.val[2], *(double *)&v2420[24]);
      v1678 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2498.val[0], v2421.f64[0]), v2498.val[1], v2421, 1), v2498.val[2], *(double *)v2422);
      v2505.val[0] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2498.val[0], *(double *)&v2422[8]), v2498.val[1], *(float64x2_t *)&v2422[8], 1), v2498.val[2], *(double *)&v2422[24]);
      v2508.val[0] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2498.val[0], v2423.f64[0]), v2498.val[1], v2423, 1), v2498.val[2], *(double *)v2424);
      v1679 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2498.val[0], *(double *)&v2424[8]), v2498.val[1], *(float64x2_t *)&v2424[8], 1), v2498.val[2], *(double *)&v2424[24]);
      *(_QWORD *)&v2498.val[0].f64[1] = v2431.i64[1];
      v2498.val[1].f64[0] = *(float64_t *)&v2418[16];
      v2498.val[2] = vmulq_f64((float64x2_t)v2431, *(float64x2_t *)&v2418[8]);
      __asm { FMLA            D2, D1, V0.D[1] }
      v2498.val[1].f64[0] = v2419.f64[1];
      _Q20 = vmulq_f64((float64x2_t)v2431, v2419);
      __asm { FMLA            D20, D1, V0.D[1] }
      v2498.val[1].f64[0] = *(float64_t *)&v2420[16];
      _Q22 = vmulq_f64((float64x2_t)v2431, *(float64x2_t *)&v2420[8]);
      __asm { FMLA            D22, D1, V0.D[1] }
      v2498.val[1].f64[0] = v2421.f64[1];
      _Q26 = vmulq_f64((float64x2_t)v2431, v2421);
      __asm { FMLA            D26, D1, V0.D[1] }
      v2498.val[1].f64[0] = *(float64_t *)&v2422[16];
      __asm { FMLA            D30, D1, V0.D[1] }
      v2498.val[1].f64[0] = v2423.f64[1];
      __asm { FMLA            D14, D1, V0.D[1] }
      v2498.val[1].f64[0] = *(float64_t *)&v2424[16];
      __asm { FMLA            D13, D1, V0.D[1] }
      v2498.val[1].f64[0] = v2498.val[2].f64[0] + *(double *)v2432.i64 * *(double *)&v2418[24];
      v2498.val[2].f64[0] = _Q20.f64[0] + *(double *)v2432.i64 * *(double *)v2420;
      _Q20.f64[0] = _Q22.f64[0] + *(double *)v2432.i64 * v2508.val[1].f64[0];
      _Q22.f64[0] = _Q26.f64[0] + *(double *)v2432.i64 * *(double *)v2422;
      _Q26.f64[0] = _D30 + *(double *)v2432.i64 * *(double *)&v2422[24];
      v2508.val[1].f64[0] = _D14 + *(double *)v2432.i64 * *(double *)v2424;
      v2498.val[0].f64[0] = _D13 + *(double *)v2432.i64 * *(double *)&v2424[24];
      *(float64x2_t *)(v1666 + 32) = vaddq_f64(*(float64x2_t *)(v1666 + 32), v2505.val[1]);
      v2505.val[1] = vaddq_f64(*(float64x2_t *)v1666, v2167);
      v1686 = vaddq_f64(*(float64x2_t *)(v1666 + 16), v2148);
      *(float64x2_t *)v1666 = v2505.val[1];
      *(float64x2_t *)(v1666 + 16) = v1686;
      v2505.val[1].f64[0] = *(float64_t *)(v1666 + 48);
      *(_QWORD *)(v1666 + 48) = *(_OWORD *)&vaddq_f64(v2505.val[1], v2498.val[1]);
      *(float64x2_t *)(v1666 + 88) = vaddq_f64(*(float64x2_t *)(v1666 + 88), v2505.val[2]);
      *(float64x2_t *)(v1666 + 72) = vaddq_f64(*(float64x2_t *)(v1666 + 72), v2092);
      v2498.val[1] = vaddq_f64(*(float64x2_t *)(v1666 + 56), v2117);
      *(float64x2_t *)(v1666 + 56) = v2498.val[1];
      v2498.val[1].f64[0] = *(float64_t *)(v1666 + 104);
      *(_QWORD *)(v1666 + 104) = *(_OWORD *)&vaddq_f64(v2498.val[1], v2498.val[2]);
      v2505.val[2] = vaddq_f64(*(float64x2_t *)(v1666 + 144), v2508.val[2]);
      v2498.val[1] = vaddq_f64(*(float64x2_t *)(v1666 + 112), v2086);
      v2498.val[2] = vaddq_f64(*(float64x2_t *)(v1666 + 128), v2072);
      *(float64x2_t *)(v1666 + 128) = v2498.val[2];
      *(float64x2_t *)(v1666 + 144) = v2505.val[2];
      *(float64x2_t *)(v1666 + 112) = v2498.val[1];
      v2498.val[1].f64[0] = *(float64_t *)(v1666 + 160);
      *(_QWORD *)&v2498.val[1].f64[0] = *(_OWORD *)&vaddq_f64(v2498.val[1], _Q20);
      v2498.val[2].f64[0] = *(float64_t *)(v1666 + 216);
      *(_QWORD *)&v2498.val[2].f64[0] = *(_OWORD *)&vaddq_f64(v2498.val[2], _Q22);
      v2505.val[1] = vaddq_f64(*(float64x2_t *)(v1666 + 168), v1669);
      v2505.val[2] = vaddq_f64(*(float64x2_t *)(v1666 + 184), v1670);
      v2508.val[2] = *(float64x2_t *)(v1666 + 200);
      v1687 = vaddq_f64(v2508.val[2], v1678);
      v2508.val[2].f64[0] = *(float64_t *)(v1666 + 272);
      v1688 = vaddq_f64(*(float64x2_t *)(v1666 + 224), v1671);
      v1689 = vaddq_f64(*(float64x2_t *)(v1666 + 240), v1672);
      v1690 = *(float64x2_t *)(v1666 + 256);
      v2505.val[0] = vaddq_f64(v1690, v2505.val[0]);
      v1690.f64[0] = *(float64_t *)(v1666 + 328);
      *(_QWORD *)&v1690.f64[0] = *(_OWORD *)&vaddq_f64(v1690, v2508.val[1]);
      v1691 = vaddq_f64(*(float64x2_t *)(v1666 + 280), v1673);
      v2508.val[1] = vaddq_f64(*(float64x2_t *)(v1666 + 296), v1675);
      v2508.val[0] = vaddq_f64(*(float64x2_t *)(v1666 + 312), v2508.val[0]);
      v1692 = vaddq_f64(*(float64x2_t *)(v1666 + 368), v1679);
      *(float64_t *)(v1666 + 160) = v2498.val[1].f64[0];
      *(float64x2_t *)(v1666 + 200) = v1687;
      *(float64x2_t *)(v1666 + 184) = v2505.val[2];
      *(float64x2_t *)(v1666 + 168) = v2505.val[1];
      *(float64_t *)(v1666 + 216) = v2498.val[2].f64[0];
      *(float64x2_t *)(v1666 + 240) = v1689;
      *(float64x2_t *)(v1666 + 256) = v2505.val[0];
      *(float64x2_t *)(v1666 + 224) = v1688;
      *(_QWORD *)(v1666 + 272) = *(_OWORD *)&vaddq_f64(v2508.val[2], _Q26);
      *(float64x2_t *)(v1666 + 296) = v2508.val[1];
      *(float64x2_t *)(v1666 + 312) = v2508.val[0];
      *(float64x2_t *)(v1666 + 280) = v1691;
      *(float64_t *)(v1666 + 328) = v1690.f64[0];
      v2498.val[1] = vaddq_f64(*(float64x2_t *)(v1666 + 336), v1674);
      v1648 = vaddq_f64(*(float64x2_t *)(v1666 + 352), v1677);
      *(float64x2_t *)(v1666 + 352) = v1648;
      *(float64x2_t *)(v1666 + 368) = v1692;
      *(float64x2_t *)(v1666 + 336) = v2498.val[1];
      v2498.val[1].f64[0] = *(float64_t *)(v1666 + 384);
      *(_QWORD *)(v1666 + 384) = *(_OWORD *)&vaddq_f64(v2498.val[1], v2498.val[0]);
    }
    v1693 = *(unint64_t **)(v2416 + 40);
    v1694 = v1693[11] + 24 * v1647;
    v1696 = *(char **)v1694;
    v1695 = *(char **)(v1694 + 8);
    if (*(char **)v1694 != v1695)
    {
      while (*(_DWORD *)v1696 < v1647)
      {
        v1696 += 16;
        if (v1696 == v1695)
          goto LABEL_186;
      }
    }
    if (v1696 != v1695)
    {
      if (*(_DWORD *)v1696 == v1647)
      {
        v1697 = v1693[2] + 8 * *((_QWORD *)v1696 + 1);
        goto LABEL_187;
      }
      v1695 = v1696;
    }
LABEL_186:
    v1697 = sub_239CCA368(v1693, (char **)v1694, v1647, v1695);
LABEL_187:
    v1698 = (float64x2_t)vzip1q_s64(v2427, *(int64x2_t *)&v2428[8]);
    *(_QWORD *)&_Q16.f64[0] = vdupq_laneq_s64(v2427, 1).u64[0];
    v1700 = (float64x2_t)vzip1q_s64(v2429, *(int64x2_t *)&v2430[8]);
    _Q25 = (float64x2_t)vzip1q_s64(v2425, *(int64x2_t *)&v2426[8]);
    v1702 = (float64x2_t)vzip2q_s64(v2425, *(int64x2_t *)&v2426[8]);
    v1703 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)v2425.i64), v1702, (float64x2_t)v2425, 1);
    _Q16.f64[1] = *(float64_t *)&v2428[16];
    v1704 = vmlaq_laneq_f64(vmulq_n_f64(v1698, *(double *)v2425.i64), _Q16, (float64x2_t)v2425, 1);
    *(_QWORD *)&v1705.f64[0] = vdupq_laneq_s64(v2429, 1).u64[0];
    v1705.f64[1] = *(float64_t *)&v2430[16];
    v1706 = vmlaq_laneq_f64(vmulq_n_f64(v1700, *(double *)v2425.i64), v1705, (float64x2_t)v2425, 1);
    _V23.D[1] = *(double *)&v2431.i64[1];
    _Q1 = vmulq_f64((float64x2_t)v2431, (float64x2_t)v2425);
    _D0 = *(double *)&v2425.i64[1];
    __asm { FMLA            D1, D0, V23.D[1] }
    v2149 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)&v2426[8]), v1702, *(float64x2_t *)&v2426[8], 1);
    v1710 = vmlaq_laneq_f64(vmulq_n_f64(v1698, *(double *)&v2426[8]), _Q16, *(float64x2_t *)&v2426[8], 1);
    v1711 = vmlaq_laneq_f64(vmulq_n_f64(v1700, *(double *)&v2426[8]), v1705, *(float64x2_t *)&v2426[8], 1);
    _D17 = *(_QWORD *)&v2426[16];
    __asm { FMLA            D0, D17, V23.D[1] }
    v2118 = _D0;
    v1714 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)v2427.i64), v1702, (float64x2_t)v2427, 1);
    v1715 = vmlaq_laneq_f64(vmulq_n_f64(v1698, *(double *)v2427.i64), _Q16, (float64x2_t)v2427, 1);
    v1716 = vmlaq_laneq_f64(vmulq_n_f64(v1700, *(double *)v2427.i64), v1705, (float64x2_t)v2427, 1);
    _D24 = *(double *)&v2427.i64[1];
    __asm { FMLA            D0, D24, V23.D[1] }
    v2093 = _D0;
    v1719 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)&v2428[8]), v1702, *(float64x2_t *)&v2428[8], 1);
    v1720 = vmlaq_laneq_f64(vmulq_n_f64(v1698, *(double *)&v2428[8]), _Q16, *(float64x2_t *)&v2428[8], 1);
    v1721 = vmlaq_laneq_f64(vmulq_n_f64(v1700, *(double *)&v2428[8]), v1705, *(float64x2_t *)&v2428[8], 1);
    _Q0 = vmulq_f64((float64x2_t)v2431, *(float64x2_t *)&v2428[8]);
    _D8 = *(_QWORD *)&v2428[16];
    __asm { FMLA            D0, D8, V23.D[1] }
    v2087 = _Q0;
    v1724 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)v2429.i64), v1702, (float64x2_t)v2429, 1);
    v1725 = vmlaq_laneq_f64(vmulq_n_f64(v1698, *(double *)v2429.i64), _Q16, (float64x2_t)v2429, 1);
    v1726 = vmlaq_laneq_f64(vmulq_n_f64(v1700, *(double *)v2429.i64), v1705, (float64x2_t)v2429, 1);
    _D31 = *(double *)&v2429.i64[1];
    __asm { FMLA            D15, D31, V23.D[1] }
    v1729 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)&v2430[8]), v1702, *(float64x2_t *)&v2430[8], 1);
    v1730 = vmlaq_laneq_f64(vmulq_n_f64(v1698, *(double *)&v2430[8]), _Q16, *(float64x2_t *)&v2430[8], 1);
    v1731 = vmlaq_laneq_f64(vmulq_n_f64(v1700, *(double *)&v2430[8]), v1705, *(float64x2_t *)&v2430[8], 1);
    _D21 = *(_QWORD *)&v2430[16];
    __asm { FMLA            D13, D21, V23.D[1] }
    v1734 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)v2431.i64), v1702, (float64x2_t)v2431, 1);
    v1735 = vmlaq_laneq_f64(vmulq_n_f64(v1698, *(double *)v2431.i64), _Q16, (float64x2_t)v2431, 1);
    v1736 = vmlaq_laneq_f64(vmulq_n_f64(v1700, *(double *)v2431.i64), v1705, (float64x2_t)v2431, 1);
    *(_QWORD *)&_Q25.f64[0] = v2431.i64[1];
    __asm { FMLA            D16, D25, V23.D[1] }
    v1737.f64[0] = *(float64_t *)v2428;
    v1737.f64[1] = *(float64_t *)&v2428[24];
    v1738 = vaddq_f64(*(float64x2_t *)(v1697 + 16), vmlaq_n_f64(v1704, v1737, *(double *)v2426));
    v1704.f64[0] = *(float64_t *)v2426;
    v1704.f64[1] = *(float64_t *)&v2426[24];
    _Q4 = vmlaq_n_f64(v1703, v1704, *(double *)v2426);
    v1739 = vaddq_f64(*(float64x2_t *)v1697, _Q4);
    _Q0.f64[0] = *(float64_t *)v2430;
    _Q25.f64[0] = *(float64_t *)&v2430[24];
    *(_QWORD *)&_Q4.f64[0] = v2432.i64[0];
    *(float64x2_t *)v1697 = v1739;
    *(float64x2_t *)(v1697 + 16) = v1738;
    _Q3.f64[0] = _Q0.f64[0];
    _Q3.f64[1] = _Q25.f64[0];
    *(float64x2_t *)(v1697 + 32) = vaddq_f64(*(float64x2_t *)(v1697 + 32), vmlaq_n_f64(v1706, _Q3, v1704.f64[0]));
    _Q5.n128_u64[1] = *(_QWORD *)&_Q1.f64[1];
    _Q5.n128_f64[0] = _Q1.f64[0] + _Q4.f64[0] * v1704.f64[0];
    v1740 = vmlaq_n_f64(v2149, v1704, v1704.f64[1]);
    _Q1.f64[0] = v2118 + _Q4.f64[0] * v1704.f64[1];
    v1648.f64[0] = v2093 + _Q4.f64[0] * v1737.f64[0];
    v1705.f64[1] = v2087.f64[1];
    v1702.f64[0] = v2087.f64[0] + _Q4.f64[0] * v1737.f64[1];
    v1741 = vmlaq_n_f64(v1724, v1704, _Q0.f64[0]);
    v1742 = vmlaq_n_f64(v1725, v1737, _Q0.f64[0]);
    v1743 = vmlaq_n_f64(v1726, _Q3, _Q0.f64[0]);
    _Q0.f64[0] = _D15 + _Q4.f64[0] * _Q0.f64[0];
    v1705.f64[0] = *(float64_t *)(v1697 + 48);
    _Q5.n128_u64[0] = *(_OWORD *)&vaddq_f64(v1705, (float64x2_t)_Q5);
    v1744 = vaddq_f64(*(float64x2_t *)(v1697 + 88), vmlaq_n_f64(v1711, _Q3, v1704.f64[1]));
    v1745 = vaddq_f64(*(float64x2_t *)(v1697 + 72), vmlaq_n_f64(v1710, v1737, v1704.f64[1]));
    v1746 = vaddq_f64(*(float64x2_t *)(v1697 + 56), v1740);
    v1740.f64[0] = *(float64_t *)(v1697 + 104);
    v1747 = vaddq_f64(v1740, _Q1);
    v1748 = vaddq_f64(*(float64x2_t *)(v1697 + 144), vmlaq_n_f64(v1716, _Q3, v1737.f64[0]));
    v1655 = vaddq_f64(*(float64x2_t *)(v1697 + 128), vmlaq_n_f64(v1715, v1737, v1737.f64[0]));
    v1749 = *(float64x2_t *)(v1697 + 112);
    v1750 = vaddq_f64(v1749, vmlaq_n_f64(v1714, v1704, v1737.f64[0]));
    v1749.f64[0] = *(float64_t *)(v1697 + 160);
    _Q2 = vaddq_f64(v1749, v1648);
    v1751 = vaddq_f64(*(float64x2_t *)(v1697 + 200), vmlaq_n_f64(v1721, _Q3, v1737.f64[1]));
    v1752 = vaddq_f64(*(float64x2_t *)(v1697 + 184), vmlaq_n_f64(v1720, v1737, v1737.f64[1]));
    v1753 = *(float64x2_t *)(v1697 + 168);
    v1754 = vaddq_f64(v1753, vmlaq_n_f64(v1719, v1704, v1737.f64[1]));
    v1753.f64[0] = *(float64_t *)(v1697 + 216);
    *(_QWORD *)&v1702.f64[0] = *(_OWORD *)&vaddq_f64(v1753, v1702);
    v1755 = vaddq_f64(*(float64x2_t *)(v1697 + 256), v1743);
    v1756 = vaddq_f64(*(float64x2_t *)(v1697 + 240), v1742);
    v1757 = *(float64x2_t *)(v1697 + 224);
    _Q8 = vaddq_f64(v1757, v1741);
    v1757.f64[0] = *(float64_t *)(v1697 + 272);
    *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vaddq_f64(v1757, _Q0);
    v1758 = vaddq_f64(*(float64x2_t *)(v1697 + 296), vmlaq_n_f64(v1730, v1737, _Q25.f64[0]));
    *(_QWORD *)(v1697 + 48) = _Q5.n128_u64[0];
    *(float64x2_t *)(v1697 + 56) = v1746;
    *(float64x2_t *)(v1697 + 72) = v1745;
    *(float64x2_t *)(v1697 + 88) = v1744;
    *(float64_t *)(v1697 + 104) = v1747.f64[0];
    *(float64x2_t *)(v1697 + 112) = v1750;
    *(float64x2_t *)(v1697 + 128) = v1655;
    *(float64x2_t *)(v1697 + 144) = v1748;
    *(float64_t *)(v1697 + 160) = _Q2.f64[0];
    *(float64x2_t *)(v1697 + 168) = v1754;
    *(float64x2_t *)(v1697 + 184) = v1752;
    *(float64x2_t *)(v1697 + 200) = v1751;
    *(float64_t *)(v1697 + 216) = v1702.f64[0];
    *(float64x2_t *)(v1697 + 224) = _Q8;
    *(float64x2_t *)(v1697 + 240) = v1756;
    *(float64x2_t *)(v1697 + 256) = v1755;
    *(float64_t *)(v1697 + 272) = _Q0.f64[0];
    *(float64x2_t *)(v1697 + 280) = vaddq_f64(*(float64x2_t *)(v1697 + 280), vmlaq_n_f64(v1729, v1704, _Q25.f64[0]));
    *(float64x2_t *)(v1697 + 296) = v1758;
    v1759 = vaddq_f64(*(float64x2_t *)(v1697 + 312), vmlaq_n_f64(v1731, _Q3, _Q25.f64[0]));
    *(float64x2_t *)(v1697 + 312) = v1759;
    v1759.f64[0] = _D13 + _Q4.f64[0] * _Q25.f64[0];
    v1747.f64[0] = *(float64_t *)(v1697 + 328);
    *(_QWORD *)(v1697 + 328) = *(_OWORD *)&vaddq_f64(v1747, v1759);
    v1760 = vaddq_f64(*(float64x2_t *)(v1697 + 352), vmlaq_n_f64(v1735, v1737, _Q4.f64[0]));
    _Q1 = vaddq_f64(*(float64x2_t *)(v1697 + 336), vmlaq_n_f64(v1734, v1704, _Q4.f64[0]));
    *(float64x2_t *)(v1697 + 336) = _Q1;
    *(float64x2_t *)(v1697 + 352) = v1760;
    _Q6 = (__n128)vmlaq_n_f64(v1736, _Q3, _Q4.f64[0]);
    v1761 = vaddq_f64(*(float64x2_t *)(v1697 + 368), (float64x2_t)_Q6);
    *(float64x2_t *)(v1697 + 368) = v1761;
    v1761.f64[0] = _Q16.f64[0] + _Q4.f64[0] * _Q4.f64[0];
    _Q1.f64[0] = *(float64_t *)(v1697 + 384);
    _Q0 = vaddq_f64(_Q1, v1761);
    *(float64_t *)(v1697 + 384) = _Q0.f64[0];
    if (!v1641)
      goto LABEL_220;
LABEL_188:
    if (v1640)
    {
      v1762 = *(unint64_t **)(v2416 + 48);
      v1763 = v1762[11] + 24 * v1644;
      v1765 = *(char **)v1763;
      v1764 = *(char **)(v1763 + 8);
      if (*(char **)v1763 != v1764)
      {
        while (*(_DWORD *)v1765 < v1645)
        {
          v1765 += 16;
          if (v1765 == v1764)
            goto LABEL_197;
        }
      }
      if (v1765 != v1764)
      {
        if (*(_DWORD *)v1765 == v1645)
        {
          v1766 = v1762[2] + 8 * *((_QWORD *)v1765 + 1);
          goto LABEL_198;
        }
        v1764 = v1765;
      }
LABEL_197:
      v1766 = sub_239CCB240(v1762, (char **)v1763, v1645, v1764);
LABEL_198:
      v1767 = (const double *)&v2418[8];
      v2499 = vld3q_f64(v1767);
      v1768 = (const double *)&v2420[8];
      v2504 = vld3q_f64(v1768);
      v1769 = (const double *)&v2422[8];
      v2509 = vld3q_f64(v1769);
      _Q6.n128_u64[0] = *(_QWORD *)(v1766 + 48);
      _V21.D[1] = *(_QWORD *)&v2424[16];
      v1771 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2499.val[0], __src.f64[0]), v2499.val[1], __src, 1), v2499.val[2], *(double *)v2418);
      v2499.val[0] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2504.val[0], __src.f64[0]), v2504.val[1], __src, 1), v2504.val[2], *(double *)v2418);
      v2499.val[2] = vmulq_f64(*(float64x2_t *)&v2424[8], __src);
      v2504.val[0].f64[0] = __src.f64[1];
      __asm { FMLA            D2, D3, V21.D[1] }
      v2499.val[2].f64[0] = v2499.val[2].f64[0] + *(double *)&v2424[24] * *(double *)v2418;
      _Q2 = vaddq_f64((float64x2_t)_Q6, v2499.val[2]);
      v2499.val[1] = vaddq_f64(*(float64x2_t *)(v1766 + 32), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2509.val[0], __src.f64[0]), v2509.val[1], __src, 1), v2509.val[2], *(double *)v2418));
      v2499.val[0] = vaddq_f64(*(float64x2_t *)(v1766 + 16), v2499.val[0]);
      *(float64x2_t *)v1766 = vaddq_f64(*(float64x2_t *)v1766, v1771);
      *(float64x2_t *)(v1766 + 16) = v2499.val[0];
      *(float64x2_t *)(v1766 + 32) = v2499.val[1];
      *(float64_t *)(v1766 + 48) = _Q2.f64[0];
    }
    v1772 = *(unint64_t **)(v2416 + 40);
    v1773 = v1772[11] + 24 * v1645;
    v1775 = *(char **)v1773;
    v1774 = *(char **)(v1773 + 8);
    if (*(char **)v1773 != v1774)
    {
      while (*(_DWORD *)v1775 < v1645)
      {
        v1775 += 16;
        if (v1775 == v1774)
          goto LABEL_207;
      }
    }
    if (v1775 == v1774)
    {
LABEL_207:
      v1776 = sub_239CCA368(v1772, (char **)v1773, v1645, v1774);
      goto LABEL_208;
    }
    if (*(_DWORD *)v1775 != v1645)
    {
      v1774 = v1775;
      goto LABEL_207;
    }
    v1776 = v1772[2] + 8 * *((_QWORD *)v1775 + 1);
LABEL_208:
    v1777 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2420[8], (int64x2_t)v2421);
    *(_QWORD *)&_Q16.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v2420[8], 1).u64[0];
    v1779 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2422[8], (int64x2_t)v2423);
    _Q25 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v2418[8], (int64x2_t)v2419);
    v1781 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v2418[8], (int64x2_t)v2419);
    v1782 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)&v2418[8]), v1781, *(float64x2_t *)&v2418[8], 1);
    _Q16.f64[1] = v2421.f64[1];
    v1783 = vmlaq_laneq_f64(vmulq_n_f64(v1777, *(double *)&v2418[8]), _Q16, *(float64x2_t *)&v2418[8], 1);
    *(_QWORD *)&v1784.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v2422[8], 1).u64[0];
    v1784.f64[1] = v2423.f64[1];
    v1785 = vmlaq_laneq_f64(vmulq_n_f64(v1779, *(double *)&v2418[8]), v1784, *(float64x2_t *)&v2418[8], 1);
    _V23.D[1] = *(_QWORD *)&v2424[16];
    _Q1 = vmulq_f64(*(float64x2_t *)&v2424[8], *(float64x2_t *)&v2418[8]);
    _D0 = *(_QWORD *)&v2418[16];
    __asm { FMLA            D1, D0, V23.D[1] }
    v2150 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, v2419.f64[0]), v1781, v2419, 1);
    v2168 = _Q1.f64[0];
    v1789 = vmlaq_laneq_f64(vmulq_n_f64(v1777, v2419.f64[0]), _Q16, v2419, 1);
    v1790 = vmlaq_laneq_f64(vmulq_n_f64(v1779, v2419.f64[0]), v1784, v2419, 1);
    _D17 = v2419.f64[1];
    __asm { FMLA            D0, D17, V23.D[1] }
    v2119 = _D0;
    v1793 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)&v2420[8]), v1781, *(float64x2_t *)&v2420[8], 1);
    v1794 = vmlaq_laneq_f64(vmulq_n_f64(v1777, *(double *)&v2420[8]), _Q16, *(float64x2_t *)&v2420[8], 1);
    v1795 = vmlaq_laneq_f64(vmulq_n_f64(v1779, *(double *)&v2420[8]), v1784, *(float64x2_t *)&v2420[8], 1);
    _Q0 = vmulq_f64(*(float64x2_t *)&v2424[8], *(float64x2_t *)&v2420[8]);
    _D24 = *(_QWORD *)&v2420[16];
    __asm { FMLA            D0, D24, V23.D[1] }
    v2094 = _Q0;
    v1798 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, v2421.f64[0]), v1781, v2421, 1);
    v1799 = vmlaq_laneq_f64(vmulq_n_f64(v1777, v2421.f64[0]), _Q16, v2421, 1);
    v1800 = vmlaq_laneq_f64(vmulq_n_f64(v1779, v2421.f64[0]), v1784, v2421, 1);
    _Q0 = vmulq_f64(*(float64x2_t *)&v2424[8], v2421);
    _D8 = v2421.f64[1];
    __asm { FMLA            D0, D8, V23.D[1] }
    v2088 = _Q0;
    v1803 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)&v2422[8]), v1781, *(float64x2_t *)&v2422[8], 1);
    v1804 = vmlaq_laneq_f64(vmulq_n_f64(v1777, *(double *)&v2422[8]), _Q16, *(float64x2_t *)&v2422[8], 1);
    v1805 = vmlaq_laneq_f64(vmulq_n_f64(v1779, *(double *)&v2422[8]), v1784, *(float64x2_t *)&v2422[8], 1);
    _D31 = *(_QWORD *)&v2422[16];
    __asm { FMLA            D15, D31, V23.D[1] }
    v1808 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, v2423.f64[0]), v1781, v2423, 1);
    v1809 = vmlaq_laneq_f64(vmulq_n_f64(v1777, v2423.f64[0]), _Q16, v2423, 1);
    v1810 = vmlaq_laneq_f64(vmulq_n_f64(v1779, v2423.f64[0]), v1784, v2423, 1);
    _D21 = v2423.f64[1];
    __asm { FMLA            D13, D21, V23.D[1] }
    v1813 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)&v2424[8]), v1781, *(float64x2_t *)&v2424[8], 1);
    v1814 = vmlaq_laneq_f64(vmulq_n_f64(v1777, *(double *)&v2424[8]), _Q16, *(float64x2_t *)&v2424[8], 1);
    v1815 = vmlaq_laneq_f64(vmulq_n_f64(v1779, *(double *)&v2424[8]), v1784, *(float64x2_t *)&v2424[8], 1);
    _Q25.f64[0] = *(float64_t *)&v2424[16];
    __asm { FMLA            D16, D25, V23.D[1] }
    v1816.f64[0] = *(float64_t *)&v2420[24];
    v1816.f64[1] = *(float64_t *)v2422;
    v1817 = vaddq_f64(*(float64x2_t *)(v1776 + 16), vmlaq_n_f64(v1783, v1816, *(double *)&v2418[24]));
    v1783.f64[0] = *(float64_t *)&v2418[24];
    v1783.f64[1] = *(float64_t *)v2420;
    _Q4 = vmlaq_n_f64(v1782, v1783, *(double *)&v2418[24]);
    v1818 = vaddq_f64(*(float64x2_t *)v1776, _Q4);
    _Q1.f64[0] = *(float64_t *)&v2422[24];
    _Q25.f64[0] = *(float64_t *)v2424;
    _Q4.f64[0] = *(float64_t *)&v2424[24];
    *(float64x2_t *)v1776 = v1818;
    *(float64x2_t *)(v1776 + 16) = v1817;
    _Q3.f64[0] = _Q1.f64[0];
    _Q3.f64[1] = _Q25.f64[0];
    *(float64x2_t *)(v1776 + 32) = vaddq_f64(*(float64x2_t *)(v1776 + 32), vmlaq_n_f64(v1785, _Q3, v1783.f64[0]));
    _Q2.f64[0] = v2168 + _Q4.f64[0] * v1783.f64[0];
    v1819 = vmlaq_n_f64(v2150, v1783, v1783.f64[1]);
    _Q0.f64[0] = v2119 + _Q4.f64[0] * v1783.f64[1];
    _Q5.n128_u64[1] = *(_QWORD *)&v2094.f64[1];
    _Q5.n128_f64[0] = v2094.f64[0] + _Q4.f64[0] * v1816.f64[0];
    v1781.f64[1] = v2088.f64[1];
    v1781.f64[0] = v2088.f64[0] + _Q4.f64[0] * v1816.f64[1];
    v1820 = vmlaq_n_f64(v1803, v1783, _Q1.f64[0]);
    v1821 = vmlaq_n_f64(v1804, v1816, _Q1.f64[0]);
    v1822 = vmlaq_n_f64(v1805, _Q3, _Q1.f64[0]);
    _Q1.f64[0] = _D15 + _Q4.f64[0] * _Q1.f64[0];
    v1784.f64[0] = *(float64_t *)(v1776 + 48);
    *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vaddq_f64(v1784, _Q2);
    v1823 = vaddq_f64(*(float64x2_t *)(v1776 + 88), vmlaq_n_f64(v1790, _Q3, v1783.f64[1]));
    v1824 = vaddq_f64(*(float64x2_t *)(v1776 + 72), vmlaq_n_f64(v1789, v1816, v1783.f64[1]));
    v1825 = vaddq_f64(*(float64x2_t *)(v1776 + 56), v1819);
    v1819.f64[0] = *(float64_t *)(v1776 + 104);
    *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vaddq_f64(v1819, _Q0);
    v1826 = vaddq_f64(*(float64x2_t *)(v1776 + 144), vmlaq_n_f64(v1795, _Q3, v1816.f64[0]));
    v1655 = vaddq_f64(*(float64x2_t *)(v1776 + 128), vmlaq_n_f64(v1794, v1816, v1816.f64[0]));
    v1827 = *(float64x2_t *)(v1776 + 112);
    v1828 = vaddq_f64(v1827, vmlaq_n_f64(v1793, v1783, v1816.f64[0]));
    v1827.f64[0] = *(float64_t *)(v1776 + 160);
    _Q5.n128_u64[0] = *(_OWORD *)&vaddq_f64(v1827, (float64x2_t)_Q5);
    v1829 = vaddq_f64(*(float64x2_t *)(v1776 + 200), vmlaq_n_f64(v1800, _Q3, v1816.f64[1]));
    v1830 = vaddq_f64(*(float64x2_t *)(v1776 + 184), vmlaq_n_f64(v1799, v1816, v1816.f64[1]));
    v1831 = *(float64x2_t *)(v1776 + 168);
    v1832 = vaddq_f64(v1831, vmlaq_n_f64(v1798, v1783, v1816.f64[1]));
    v1831.f64[0] = *(float64_t *)(v1776 + 216);
    *(_QWORD *)&v1781.f64[0] = *(_OWORD *)&vaddq_f64(v1831, v1781);
    v1833 = vaddq_f64(*(float64x2_t *)(v1776 + 256), v1822);
    v1834 = vaddq_f64(*(float64x2_t *)(v1776 + 240), v1821);
    v1835 = *(float64x2_t *)(v1776 + 224);
    _Q8 = vaddq_f64(v1835, v1820);
    v1835.f64[0] = *(float64_t *)(v1776 + 272);
    v1836 = vaddq_f64(v1835, _Q1);
    v1837 = vaddq_f64(*(float64x2_t *)(v1776 + 296), vmlaq_n_f64(v1809, v1816, _Q25.f64[0]));
    *(float64_t *)(v1776 + 48) = _Q2.f64[0];
    *(float64x2_t *)(v1776 + 56) = v1825;
    *(float64x2_t *)(v1776 + 72) = v1824;
    *(float64x2_t *)(v1776 + 88) = v1823;
    *(float64_t *)(v1776 + 104) = _Q0.f64[0];
    *(float64x2_t *)(v1776 + 112) = v1828;
    *(float64x2_t *)(v1776 + 128) = v1655;
    *(float64x2_t *)(v1776 + 144) = v1826;
    *(_QWORD *)(v1776 + 160) = _Q5.n128_u64[0];
    *(float64x2_t *)(v1776 + 168) = v1832;
    *(float64x2_t *)(v1776 + 184) = v1830;
    *(float64x2_t *)(v1776 + 200) = v1829;
    *(float64_t *)(v1776 + 216) = v1781.f64[0];
    *(float64x2_t *)(v1776 + 224) = _Q8;
    *(float64x2_t *)(v1776 + 240) = v1834;
    *(float64x2_t *)(v1776 + 256) = v1833;
    *(float64_t *)(v1776 + 272) = v1836.f64[0];
    *(float64x2_t *)(v1776 + 280) = vaddq_f64(*(float64x2_t *)(v1776 + 280), vmlaq_n_f64(v1808, v1783, _Q25.f64[0]));
    *(float64x2_t *)(v1776 + 296) = v1837;
    v1838 = vaddq_f64(*(float64x2_t *)(v1776 + 312), vmlaq_n_f64(v1810, _Q3, _Q25.f64[0]));
    *(float64x2_t *)(v1776 + 312) = v1838;
    v1838.f64[0] = _D13 + _Q4.f64[0] * _Q25.f64[0];
    v1836.f64[0] = *(float64_t *)(v1776 + 328);
    *(_QWORD *)(v1776 + 328) = *(_OWORD *)&vaddq_f64(v1836, v1838);
    v1839 = vmlaq_n_f64(v1814, v1816, _Q4.f64[0]);
    v1840 = vaddq_f64(*(float64x2_t *)(v1776 + 352), v1839);
    _Q1 = vaddq_f64(*(float64x2_t *)(v1776 + 336), vmlaq_n_f64(v1813, v1783, _Q4.f64[0]));
    *(float64x2_t *)(v1776 + 336) = _Q1;
    *(float64x2_t *)(v1776 + 352) = v1840;
    _Q6 = (__n128)vmlaq_n_f64(v1815, _Q3, _Q4.f64[0]);
    v1841 = vaddq_f64(*(float64x2_t *)(v1776 + 368), (float64x2_t)_Q6);
    *(float64x2_t *)(v1776 + 368) = v1841;
    v1841.f64[0] = _Q16.f64[0] + _Q4.f64[0] * _Q4.f64[0];
    _Q1.f64[0] = *(float64_t *)(v1776 + 384);
    _Q0 = vaddq_f64(_Q1, v1841);
    *(float64_t *)(v1776 + 384) = _Q0.f64[0];
    if (v1642 && v1647 >= v1645)
    {
      v1842 = *(unint64_t **)(v2416 + 40);
      v1843 = v1842[11] + 24 * v1647;
      v1845 = *(char **)v1843;
      v1844 = *(char **)(v1843 + 8);
      if (*(char **)v1843 != v1844)
      {
        while (*(_DWORD *)v1845 < v1645)
        {
          v1845 += 16;
          if (v1845 == v1844)
            goto LABEL_218;
        }
      }
      if (v1845 != v1844)
      {
        if (*(_DWORD *)v1845 == v1645)
        {
          v1846 = v1842[2] + 8 * *((_QWORD *)v1845 + 1);
          goto LABEL_219;
        }
        v1844 = v1845;
      }
LABEL_218:
      v1846 = sub_239CCA368(v1842, (char **)v1843, v1645, v1844);
LABEL_219:
      v1847 = (const double *)&v2418[8];
      v2506 = vld3q_f64(v1847);
      v2169 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2506.val[0], *(double *)v2425.i64), v2506.val[1], (float64x2_t)v2425, 1), v2506.val[2], *(double *)v2426);
      v1848 = (const double *)&v2420[8];
      v2512 = vld3q_f64(v1848);
      v2151 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2512.val[0], *(double *)v2425.i64), v2512.val[1], (float64x2_t)v2425, 1), v2512.val[2], *(double *)v2426);
      v2120 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2506.val[0], *(double *)&v2426[8]), v2506.val[1], *(float64x2_t *)&v2426[8], 1), v2506.val[2], *(double *)&v2426[24]);
      v2095 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2512.val[0], *(double *)&v2426[8]), v2512.val[1], *(float64x2_t *)&v2426[8], 1), v2512.val[2], *(double *)&v2426[24]);
      v2089 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2506.val[0], *(double *)v2427.i64), v2506.val[1], (float64x2_t)v2427, 1), v2506.val[2], *(double *)v2428);
      v2073 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2512.val[0], *(double *)v2427.i64), v2512.val[1], (float64x2_t)v2427, 1), v2512.val[2], *(double *)v2428);
      v1849 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2506.val[0], *(double *)&v2428[8]), v2506.val[1], *(float64x2_t *)&v2428[8], 1), v2506.val[2], *(double *)&v2428[24]);
      v1850 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2512.val[0], *(double *)&v2428[8]), v2512.val[1], *(float64x2_t *)&v2428[8], 1), v2512.val[2], *(double *)&v2428[24]);
      v1851 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2506.val[0], *(double *)v2429.i64), v2506.val[1], (float64x2_t)v2429, 1), v2506.val[2], *(double *)v2430);
      v1852 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2512.val[0], *(double *)v2429.i64), v2512.val[1], (float64x2_t)v2429, 1), v2512.val[2], *(double *)v2430);
      v1853 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2506.val[0], *(double *)&v2430[8]), v2506.val[1], *(float64x2_t *)&v2430[8], 1), v2506.val[2], *(double *)&v2430[24]);
      v1854 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2506.val[0], *(double *)v2431.i64), v2506.val[1], (float64x2_t)v2431, 1), v2506.val[2], *(double *)v2432.i64);
      v1855 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2512.val[0], *(double *)&v2430[8]), v2512.val[1], *(float64x2_t *)&v2430[8], 1), v2512.val[2], *(double *)&v2430[24]);
      v1856 = (const double *)&v2422[8];
      v2500 = vld3q_f64(v1856);
      v1857 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2512.val[0], *(double *)v2431.i64), v2512.val[1], (float64x2_t)v2431, 1), v2512.val[2], *(double *)v2432.i64);
      v2512.val[0] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2500.val[0], *(double *)v2425.i64), v2500.val[1], (float64x2_t)v2425, 1), v2500.val[2], *(double *)v2426);
      v2512.val[1] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2500.val[0], *(double *)&v2426[8]), v2500.val[1], *(float64x2_t *)&v2426[8], 1), v2500.val[2], *(double *)&v2426[24]);
      v2512.val[2] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2500.val[0], *(double *)v2427.i64), v2500.val[1], (float64x2_t)v2427, 1), v2500.val[2], *(double *)v2428);
      v1858 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2500.val[0], *(double *)&v2428[8]), v2500.val[1], *(float64x2_t *)&v2428[8], 1), v2500.val[2], *(double *)&v2428[24]);
      v2506.val[0] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2500.val[0], *(double *)v2429.i64), v2500.val[1], (float64x2_t)v2429, 1), v2500.val[2], *(double *)v2430);
      v2506.val[2] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2500.val[0], *(double *)&v2430[8]), v2500.val[1], *(float64x2_t *)&v2430[8], 1), v2500.val[2], *(double *)&v2430[24]);
      v2506.val[1] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2500.val[0], *(double *)v2431.i64), v2500.val[1], (float64x2_t)v2431, 1), v2500.val[2], *(double *)v2432.i64);
      v2500.val[0].f64[1] = *(float64_t *)&v2424[16];
      *(_QWORD *)&v2500.val[1].f64[0] = v2425.i64[1];
      v2500.val[2] = vmulq_f64(*(float64x2_t *)&v2424[8], (float64x2_t)v2425);
      __asm { FMLA            D2, D1, V0.D[1] }
      v2500.val[1].f64[0] = *(float64_t *)&v2426[16];
      _Q17 = vmulq_f64(*(float64x2_t *)&v2424[8], *(float64x2_t *)&v2426[8]);
      __asm { FMLA            D17, D1, V0.D[1] }
      *(_QWORD *)&v2500.val[1].f64[0] = v2427.i64[1];
      _Q20 = vmulq_f64(*(float64x2_t *)&v2424[8], (float64x2_t)v2427);
      __asm { FMLA            D20, D1, V0.D[1] }
      v2500.val[1].f64[0] = *(float64_t *)&v2428[16];
      _Q26 = vmulq_f64(*(float64x2_t *)&v2424[8], *(float64x2_t *)&v2428[8]);
      __asm { FMLA            D26, D1, V0.D[1] }
      *(_QWORD *)&v2500.val[1].f64[0] = v2429.i64[1];
      __asm { FMLA            D30, D1, V0.D[1] }
      v2500.val[1].f64[0] = *(float64_t *)&v2430[16];
      __asm { FMLA            D14, D1, V0.D[1] }
      *(_QWORD *)&v2500.val[1].f64[0] = v2431.i64[1];
      __asm { FMLA            D13, D1, V0.D[1] }
      v2500.val[1].f64[0] = v2500.val[2].f64[0] + *(double *)&v2424[24] * *(double *)v2426;
      v2500.val[2].f64[0] = _Q17.f64[0] + *(double *)&v2424[24] * *(double *)&v2426[24];
      _Q17.f64[0] = _Q20.f64[0] + *(double *)&v2424[24] * *(double *)v2428;
      _Q20.f64[0] = _Q26.f64[0] + *(double *)&v2424[24] * *(double *)&v2428[24];
      _Q26.f64[0] = _D30 + *(double *)&v2424[24] * *(double *)v2430;
      v1839.f64[0] = _D14 + *(double *)&v2424[24] * *(double *)&v2430[24];
      v2500.val[0].f64[0] = _D13 + *(double *)&v2424[24] * *(double *)v2432.i64;
      *(float64x2_t *)(v1846 + 32) = vaddq_f64(*(float64x2_t *)(v1846 + 32), v2512.val[0]);
      _Q8.f64[1] = v2151.f64[1];
      v2512.val[0] = vaddq_f64(*(float64x2_t *)v1846, v2169);
      v1865 = vaddq_f64(*(float64x2_t *)(v1846 + 16), v2151);
      *(float64x2_t *)v1846 = v2512.val[0];
      *(float64x2_t *)(v1846 + 16) = v1865;
      v2512.val[0].f64[0] = *(float64_t *)(v1846 + 48);
      *(_QWORD *)(v1846 + 48) = *(_OWORD *)&vaddq_f64(v2512.val[0], v2500.val[1]);
      *(float64x2_t *)(v1846 + 88) = vaddq_f64(*(float64x2_t *)(v1846 + 88), v2512.val[1]);
      *(float64x2_t *)(v1846 + 72) = vaddq_f64(*(float64x2_t *)(v1846 + 72), v2095);
      v2500.val[1] = vaddq_f64(*(float64x2_t *)(v1846 + 56), v2120);
      *(float64x2_t *)(v1846 + 56) = v2500.val[1];
      v2500.val[1].f64[0] = *(float64_t *)(v1846 + 104);
      *(_QWORD *)(v1846 + 104) = *(_OWORD *)&vaddq_f64(v2500.val[1], v2500.val[2]);
      *(float64x2_t *)(v1846 + 144) = vaddq_f64(*(float64x2_t *)(v1846 + 144), v2512.val[2]);
      v2500.val[1] = vaddq_f64(*(float64x2_t *)(v1846 + 112), v2089);
      v2500.val[2] = vaddq_f64(*(float64x2_t *)(v1846 + 128), v2073);
      *(float64x2_t *)(v1846 + 112) = v2500.val[1];
      *(float64x2_t *)(v1846 + 128) = v2500.val[2];
      v2500.val[1].f64[0] = *(float64_t *)(v1846 + 160);
      *(_QWORD *)&v2500.val[1].f64[0] = *(_OWORD *)&vaddq_f64(v2500.val[1], _Q17);
      v2500.val[2].f64[0] = *(float64_t *)(v1846 + 216);
      *(_QWORD *)&v2500.val[2].f64[0] = *(_OWORD *)&vaddq_f64(v2500.val[2], _Q20);
      v1866 = vaddq_f64(*(float64x2_t *)(v1846 + 168), v1849);
      v1867 = vaddq_f64(*(float64x2_t *)(v1846 + 184), v1850);
      v1868 = *(float64x2_t *)(v1846 + 200);
      _Q3 = vaddq_f64(v1868, v1858);
      v1868.f64[0] = *(float64_t *)(v1846 + 272);
      v1655 = vaddq_f64(*(float64x2_t *)(v1846 + 224), v1851);
      v2512.val[0] = vaddq_f64(*(float64x2_t *)(v1846 + 240), v1852);
      v2512.val[1] = *(float64x2_t *)(v1846 + 256);
      _Q4 = vaddq_f64(v2512.val[1], v2506.val[0]);
      v2512.val[1].f64[0] = *(float64_t *)(v1846 + 328);
      *(_QWORD *)&v2512.val[1].f64[0] = *(_OWORD *)&vaddq_f64(v2512.val[1], v1839);
      v2512.val[2] = vaddq_f64(*(float64x2_t *)(v1846 + 280), v1853);
      v1869 = vaddq_f64(*(float64x2_t *)(v1846 + 296), v1855);
      _Q6 = (__n128)vaddq_f64(*(float64x2_t *)(v1846 + 312), v2506.val[2]);
      _Q5 = (__n128)vaddq_f64(*(float64x2_t *)(v1846 + 368), v2506.val[1]);
      *(float64_t *)(v1846 + 160) = v2500.val[1].f64[0];
      *(float64x2_t *)(v1846 + 200) = _Q3;
      *(float64x2_t *)(v1846 + 184) = v1867;
      *(float64x2_t *)(v1846 + 168) = v1866;
      *(float64_t *)(v1846 + 216) = v2500.val[2].f64[0];
      *(float64x2_t *)(v1846 + 240) = v2512.val[0];
      *(float64x2_t *)(v1846 + 256) = _Q4;
      *(float64x2_t *)(v1846 + 224) = v1655;
      *(_QWORD *)(v1846 + 272) = *(_OWORD *)&vaddq_f64(v1868, _Q26);
      *(float64x2_t *)(v1846 + 296) = v1869;
      *(__n128 *)(v1846 + 312) = _Q6;
      *(float64x2_t *)(v1846 + 280) = v2512.val[2];
      *(float64_t *)(v1846 + 328) = v2512.val[1].f64[0];
      _Q1 = vaddq_f64(*(float64x2_t *)(v1846 + 336), v1854);
      _Q2 = vaddq_f64(*(float64x2_t *)(v1846 + 352), v1857);
      *(float64x2_t *)(v1846 + 352) = _Q2;
      *(__n128 *)(v1846 + 368) = _Q5;
      *(float64x2_t *)(v1846 + 336) = _Q1;
      _Q1.f64[0] = *(float64_t *)(v1846 + 384);
      _Q0 = vaddq_f64(_Q1, v2500.val[0]);
      *(float64_t *)(v1846 + 384) = _Q0.f64[0];
    }
LABEL_220:
    if (v1640)
    {
      v1870 = *(unint64_t **)(v2416 + 64);
      v1871 = v1870[11] + 24 * v1644;
      v1873 = *(char **)v1871;
      v1872 = *(char **)(v1871 + 8);
      if (*(char **)v1871 != v1872)
      {
        while (*(_DWORD *)v1873 < v1644)
        {
          v1873 += 16;
          if (v1873 == v1872)
            goto LABEL_230;
        }
      }
      if (v1873 != v1872)
      {
        if (*(_DWORD *)v1873 == v1644)
        {
          v1874 = (double *)(v1870[2] + 8 * *((_QWORD *)v1873 + 1));
          goto LABEL_231;
        }
        v1872 = v1873;
      }
LABEL_230:
      v1874 = (double *)sub_239C82854(v1870, (char **)v1871, v1644, v1872);
LABEL_231:
      _V1.D[1] = __src.f64[1];
      _D3 = __src.f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      *v1874 = *v1874 + _D2 + *(double *)v2418 * *(double *)v2418;
      v1875 = (float64x2_t *)(v1634 + 88);
      v1879 = 8 * (*(_DWORD *)(v2416 + 36) + v1644);
      _Q1.f64[1] = __src.f64[1];
      _Q2.f64[0] = *(float64_t *)(v1634 + 104);
      _Q4 = vmulq_f64(__src, *(float64x2_t *)(v1634 + 88));
      _Q3.f64[0] = *(float64_t *)(v1634 + 96);
      __asm { FMLA            D4, D3, V1.D[1] }
      _Q1.f64[0] = *(float64_t *)(*(_QWORD *)v2416 + v1879);
      _Q0.f64[0] = _Q1.f64[0] - (_Q4.f64[0] + *(double *)v2418 * _Q2.f64[0]);
      *(float64_t *)(*(_QWORD *)v2416 + v1879) = _Q0.f64[0];
    }
    else
    {
      v1875 = (float64x2_t *)(v1634 + 88);
    }
    if (v1641)
    {
      v1880 = (const double *)&v2418[8];
      v2501 = vld3q_f64(v1880);
      v1881 = (const double *)&v2420[8];
      *(float64x2x3_t *)(&_Q4 - 1) = vld3q_f64(v1881);
      v1882 = (const double *)&v2422[8];
      v2510 = vld3q_f64(v1882);
      v1883 = *(_QWORD *)v2416 + 8 * (*(_DWORD *)(v2416 + 32) - v1645 + 8 * v1645);
      _Q6 = *(__n128 *)v1883;
      v1655.f64[0] = *(float64_t *)(v1883 + 48);
      _V22.D[1] = *(_QWORD *)&v2424[16];
      v1885 = v1875[1].f64[0];
      v1886 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2501.val[0], v1875->f64[0]), v2501.val[1], *v1875, 1), v2501.val[2], v1885);
      v2501.val[0] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v1875->f64[0]), _Q4, *v1875, 1), (float64x2_t)_Q5, v1885);
      _Q2 = vmulq_f64(*(float64x2_t *)&v2424[8], *v1875);
      _Q3.f64[0] = v1875->f64[1];
      __asm { FMLA            D2, D3, V22.D[1] }
      _Q2.f64[0] = _Q2.f64[0] + *(double *)&v2424[24] * v1885;
      *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(v1655, _Q2);
      _Q1 = vsubq_f64(*(float64x2_t *)(v1883 + 32), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2510.val[0], v1875->f64[0]), v2510.val[1], *v1875, 1), v2510.val[2], v1885));
      _Q0 = vsubq_f64(*(float64x2_t *)(v1883 + 16), v2501.val[0]);
      _Q3 = vsubq_f64(*(float64x2_t *)v1883, v1886);
      *(float64x2_t *)v1883 = _Q3;
      *(float64x2_t *)(v1883 + 16) = _Q0;
      *(float64x2_t *)(v1883 + 32) = _Q1;
      *(float64_t *)(v1883 + 48) = _Q2.f64[0];
    }
    v9 = a1;
    if (v1642)
    {
      v1888 = (const double *)&v2425;
      v2502 = vld3q_f64(v1888);
      v1889 = (const double *)&v2427;
      *(float64x2x3_t *)(&_Q4 - 1) = vld3q_f64(v1889);
      v1890 = (const double *)&v2429;
      v2511 = vld3q_f64(v1890);
      v1891 = *(_QWORD *)v2416 + 8 * (*(_DWORD *)(v2416 + 32) - v1647 + 8 * v1647);
      _Q6 = *(__n128 *)v1891;
      v1655.f64[0] = *(float64_t *)(v1891 + 48);
      _V22.D[1] = *(double *)&v2431.i64[1];
      v1893 = v1875[1].f64[0];
      v1894 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2502.val[0], v1875->f64[0]), v2502.val[1], *v1875, 1), v2502.val[2], v1893);
      v2502.val[0] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, v1875->f64[0]), _Q4, *v1875, 1), (float64x2_t)_Q5, v1893);
      _Q2 = vmulq_f64((float64x2_t)v2431, *v1875);
      _Q3.f64[0] = v1875->f64[1];
      __asm { FMLA            D2, D3, V22.D[1] }
      _Q2.f64[0] = _Q2.f64[0] + *(double *)v2432.i64 * v1893;
      *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(v1655, _Q2);
      _Q1 = vsubq_f64(*(float64x2_t *)(v1891 + 32), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v2511.val[0], v1875->f64[0]), v2511.val[1], *v1875, 1), v2511.val[2], v1893));
      _Q0 = vsubq_f64(*(float64x2_t *)(v1891 + 16), v2502.val[0]);
      _Q3 = vsubq_f64(*(float64x2_t *)v1891, v1894);
      *(float64x2_t *)v1891 = _Q3;
      *(float64x2_t *)(v1891 + 16) = _Q0;
      *(float64x2_t *)(v1891 + 32) = _Q1;
      *(float64_t *)(v1891 + 48) = _Q2.f64[0];
    }
LABEL_137:
    v1634 += 144;
    if (v1634 != v1635)
      continue;
    break;
  }
  v2091 = (double *)v9[2];
  v2416 = v9[3];
  v10 = (_QWORD *)*v9;
LABEL_237:
  v1896 = v10[16];
  v1897 = v10[17];
  if (v1896 != v1897)
  {
    while (2)
    {
      v1985 = *(_QWORD *)(v1896 + 72);
      if ((*(_BYTE *)(v1985 + 124) & 4) != 0)
        v1986 = 1;
      else
        v1986 = 2;
      if ((v1986 & (_DWORD)v9[5]) == 0)
        goto LABEL_242;
      v1987 = *(unsigned __int8 *)(v1985 + 4);
      if (*(_BYTE *)(v1985 + 4))
      {
        v1988 = *(unsigned int *)(v1985 + 120);
        if ((_DWORD)v1988 != -1)
        {
          v1989 = *(_DWORD *)(*(_QWORD *)v9[1] + 4 * v1988);
          goto LABEL_251;
        }
        goto LABEL_242;
      }
      v1989 = -1;
LABEL_251:
      v1990 = (float64x2_t *)(v1896 + 80);
      _Q4.f64[0] = *(float64_t *)(v1896 + 64);
      v1991 = sub_239CCA038(v1985, (float64x2_t *)(v1896 + 80), (uint64_t)&__src, *(float64x2_t *)(v1896 + 16), *(float64x2_t *)(v1896 + 32), *(float64x2_t *)(v1896 + 48), *(float64_t *)vextq_s8(*(int8x16_t *)(v1896 + 48), *(int8x16_t *)(v1896 + 48), 8uLL).i64, _Q4);
      v1992 = *(_QWORD *)(v1896 + 112);
      if (v1992)
      {
        (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v1992 + 24))(v1992, v1896 + 80, v1991);
        v1993 = *(_QWORD *)(v1896 + 112);
        switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1993 + 16))(v1993))
        {
          case 0u:
            v1997 = *(float64x2_t *)(v1993 + 16);
            _D2 = *(_QWORD *)(v1993 + 56);
            v1901 = *(float64x2_t *)(v1993 + 40);
            v1999 = *(double *)(v1993 + 80);
            _Q4 = *(float64x2_t *)(v1993 + 64);
            goto LABEL_257;
          case 1u:
            v1994.f64[0] = *(float64_t *)v2424;
            v2000.i64[1] = *(_QWORD *)&v2422[8];
            v2001.i64[1] = *(_QWORD *)&v2420[8];
            v1996.f64[0] = *(float64_t *)(v1993 + 32);
            v2002 = *(float64x2_t *)(v1993 + 16);
            v2003.i64[0] = *(_OWORD *)&vmulq_f64(*(float64x2_t *)v2418, v1996);
            v2003.i64[1] = *(_QWORD *)&v2418[8];
            v2004 = (int64x2_t)vmulq_f64(v2002, (float64x2_t)vextq_s8(v2003, *(int8x16_t *)&v2418[16], 8uLL));
            v2005 = vextq_s8((int8x16_t)v2004, (int8x16_t)vmulq_laneq_f64(v1996, *(float64x2_t *)&v2418[16], 1), 8uLL);
            v2006 = vzip1q_s64((int64x2_t)v2003, v2004);
            v2001.i64[0] = *(_OWORD *)&vmulq_f64(v1996, *(float64x2_t *)v2420);
            v2007 = (int64x2_t)vmulq_f64(v2002, (float64x2_t)vextq_s8(v2001, *(int8x16_t *)&v2420[16], 8uLL));
            v1900 = (float64x2_t)vextq_s8((int8x16_t)v2007, (int8x16_t)vmulq_laneq_f64(v1996, *(float64x2_t *)&v2420[16], 1), 8uLL);
            v1901 = (float64x2_t)vzip1q_s64((int64x2_t)v2001, v2007);
            _Q4 = vmulq_f64(v2002, v2421);
            v2000.i64[0] = *(_OWORD *)&vmulq_f64(v1996, *(float64x2_t *)v2422);
            v2008 = (int64x2_t)vmulq_f64(v2002, (float64x2_t)vextq_s8(v2000, *(int8x16_t *)&v2422[16], 8uLL));
            *(_QWORD *)v2424 = *(_OWORD *)&vmulq_f64(v1996, v1994);
            __src = vmulq_f64(__src, v2002);
            *(int64x2_t *)v2418 = v2006;
            *(int8x16_t *)&v2418[16] = v2005;
            v2419 = vmulq_f64(v2002, v2419);
            *(float64x2_t *)v2420 = v1901;
            *(float64x2_t *)&v2420[16] = v1900;
            v2421 = _Q4;
            *(int64x2_t *)v2422 = vzip1q_s64((int64x2_t)v2000, v2008);
            *(int8x16_t *)&v2422[16] = vextq_s8((int8x16_t)v2008, (int8x16_t)vmulq_laneq_f64(v1996, *(float64x2_t *)&v2422[16], 1), 8uLL);
            v2423 = vmulq_f64(v2002, v2423);
            break;
          case 2u:
            v1994.f64[0] = *(float64_t *)(v1993 + 16);
            v1995.f64[0] = *(float64_t *)v2424;
            v1901 = vmulq_n_f64(*(float64x2_t *)v2420, v1994.f64[0]);
            v1900 = vmulq_n_f64(v2419, v1994.f64[0]);
            _Q4 = vmulq_n_f64(*(float64x2_t *)&v2418[16], v1994.f64[0]);
            __src = vmulq_n_f64(__src, v1994.f64[0]);
            *(float64x2_t *)v2418 = vmulq_n_f64(*(float64x2_t *)v2418, v1994.f64[0]);
            *(float64x2_t *)&v2418[16] = _Q4;
            v2419 = v1900;
            *(float64x2_t *)v2420 = v1901;
            *(float64x2_t *)&v2420[16] = vmulq_n_f64(*(float64x2_t *)&v2420[16], v1994.f64[0]);
            v2421 = vmulq_n_f64(v2421, v1994.f64[0]);
            *(float64x2_t *)v2422 = vmulq_n_f64(*(float64x2_t *)v2422, v1994.f64[0]);
            *(float64x2_t *)&v2422[16] = vmulq_n_f64(*(float64x2_t *)&v2422[16], v1994.f64[0]);
            v2423 = vmulq_n_f64(v2423, v1994.f64[0]);
            *(_QWORD *)v2424 = *(_OWORD *)&vmulq_f64(v1994, v1995);
            break;
          case 4u:
            (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v1993 + 56))(v2494, v1993);
            v1997 = *(float64x2_t *)v2494;
            _D2 = v2494[5];
            v1901 = *(float64x2_t *)&v2494[3];
            v1999 = v2496;
            _Q4 = v2495;
LABEL_257:
            _V19.D[1] = __src.f64[1];
            _V22.D[1] = *(_QWORD *)&v2418[16];
            _V24.D[1] = v2419.f64[1];
            _V26.D[1] = *(_QWORD *)&v2420[16];
            _V28.D[1] = v2421.f64[1];
            _V20.D[1] = *(_QWORD *)&v2422[16];
            _V16.D[1] = v2423.f64[1];
            v2016 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1997, __src.f64[0]), v1901, __src, 1), _Q4, *(double *)v2418);
            __asm { FMLA            D29, D2, V19.D[1] }
            v2018 = _D29 + v1999 * *(double *)v2418;
            v2019 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1997, *(double *)&v2418[8]), v1901, *(float64x2_t *)&v2418[8], 1), _Q4, *(double *)&v2418[24]);
            __asm { FMLA            D29, D2, V22.D[1] }
            v2021 = _D29 + v1999 * *(double *)&v2418[24];
            v2022 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1997, v2419.f64[0]), v1901, v2419, 1), _Q4, *(double *)v2420);
            __asm { FMLA            D29, D2, V24.D[1] }
            v2024 = _D29 + v1999 * *(double *)v2420;
            v2025 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1997, *(double *)&v2420[8]), v1901, *(float64x2_t *)&v2420[8], 1), _Q4, *(double *)&v2420[24]);
            __asm { FMLA            D29, D2, V26.D[1] }
            v2027 = _D29 + v1999 * *(double *)&v2420[24];
            v2028 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1997, v2421.f64[0]), v1901, v2421, 1), _Q4, *(double *)v2422);
            __asm { FMLA            D29, D2, V28.D[1] }
            v2030 = _D29 + v1999 * *(double *)v2422;
            v2031 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1997, *(double *)&v2422[8]), v1901, *(float64x2_t *)&v2422[8], 1), _Q4, *(double *)&v2422[24]);
            __asm { FMLA            D29, D2, V20.D[1] }
            v1900 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1997, v2423.f64[0]), v1901, v2423, 1), _Q4, *(double *)v2424);
            __asm { FMLA            D1, D2, V16.D[1] }
            __src = v2016;
            *(double *)v2418 = v2018;
            *(float64x2_t *)&v2418[8] = v2019;
            *(double *)&v2418[24] = v2021;
            v2419 = v2022;
            *(double *)v2420 = v2024;
            *(float64x2_t *)&v2420[8] = v2025;
            *(double *)&v2420[24] = v2027;
            v2421 = v2028;
            *(double *)v2422 = v2030;
            *(float64x2_t *)&v2422[8] = v2031;
            *(double *)&v2422[24] = _D29 + v1999 * *(double *)&v2422[24];
            v2423 = v1900;
            *(double *)v2424 = _D1 + v1999 * *(double *)v2424;
            break;
          default:
            break;
        }
      }
      _Q1 = *(_OWORD *)(v1896 + 80);
      _D3 = *(_QWORD *)(v1896 + 88);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(double *)(v1896 + 104) = v2091[7] * (_D2 + *(double *)(v1896 + 96) * *(double *)(v1896 + 96));
      v9 = a1;
      if (!v1987)
      {
LABEL_242:
        v1896 += 136;
        if (v1896 == v1897)
          return;
        continue;
      }
      break;
    }
    v2037 = *(unint64_t **)(v2416 + 40);
    v2038 = v2037[11] + 24 * v1989;
    v2039 = *(char **)v2038;
    v1898 = *(char **)(v2038 + 8);
    if (*(char **)v2038 != v1898)
    {
      while (*(_DWORD *)v2039 < v1989)
      {
        v2039 += 16;
        if (v2039 == v1898)
          goto LABEL_240;
      }
    }
    if (v2039 != v1898)
    {
      if (*(_DWORD *)v2039 == v1989)
      {
        v1899 = v2037[2] + 8 * *((_QWORD *)v2039 + 1);
        goto LABEL_241;
      }
      v1898 = v2039;
    }
LABEL_240:
    v1899 = sub_239CCA368(v2037, (char **)v2038, v1989, v1898);
LABEL_241:
    _V1.D[1] = v2423.f64[1];
    v1903 = (float64x2_t)vzip1q_s64((int64x2_t)v2419, *(int64x2_t *)&v2420[8]);
    v1904 = (float64x2_t)vzip1q_s64((int64x2_t)v2421, *(int64x2_t *)&v2422[8]);
    *(_QWORD *)&_Q7.f64[0] = vdupq_laneq_s64((int64x2_t)v2419, 1).u64[0];
    _Q7.f64[1] = *(float64_t *)&v2420[16];
    *(_QWORD *)&_Q2.f64[0] = vdupq_laneq_s64((int64x2_t)v2421, 1).u64[0];
    _Q2.f64[1] = *(float64_t *)&v2422[16];
    v1907 = (float64x2_t)vzip1q_s64((int64x2_t)__src, *(int64x2_t *)&v2418[8]);
    v1908 = (float64x2_t)vzip2q_s64((int64x2_t)__src, *(int64x2_t *)&v2418[8]);
    v2414 = vmlaq_laneq_f64(vmulq_n_f64(v1903, __src.f64[0]), _Q7, __src, 1);
    v2366 = vmlaq_laneq_f64(vmulq_n_f64(v1904, __src.f64[0]), _Q2, __src, 1);
    _D16 = __src.f64[1];
    __asm { FMLA            D20, D16, V1.D[1] }
    v1911 = vmlaq_laneq_f64(vmulq_n_f64(v1903, *(double *)&v2418[8]), _Q7, *(float64x2_t *)&v2418[8], 1);
    v2322 = vmlaq_laneq_f64(vmulq_n_f64(v1904, *(double *)&v2418[8]), _Q2, *(float64x2_t *)&v2418[8], 1);
    _D23 = *(_QWORD *)&v2418[16];
    __asm { FMLA            D4, D23, V1.D[1] }
    v1914 = _D4;
    v2235 = vmlaq_laneq_f64(vmulq_n_f64(v1903, v2419.f64[0]), _Q7, v2419, 1);
    v1915 = vmlaq_laneq_f64(vmulq_n_f64(v1904, v2419.f64[0]), _Q2, v2419, 1);
    _D28 = v2419.f64[1];
    __asm { FMLA            D25, D28, V1.D[1] }
    v2170 = vmlaq_laneq_f64(vmulq_n_f64(v1903, *(double *)&v2420[8]), _Q7, *(float64x2_t *)&v2420[8], 1);
    v2152 = vmlaq_laneq_f64(vmulq_n_f64(v1904, *(double *)&v2420[8]), _Q2, *(float64x2_t *)&v2420[8], 1);
    _D29 = *(_QWORD *)&v2420[16];
    __asm { FMLA            D4, D29, V1.D[1] }
    v2121 = _D4;
    v1920 = vmlaq_laneq_f64(vmulq_n_f64(v1907, v2421.f64[0]), v1908, v2421, 1);
    v1921 = vmlaq_laneq_f64(vmulq_n_f64(v1903, v2421.f64[0]), _Q7, v2421, 1);
    v1922 = vmlaq_laneq_f64(vmulq_n_f64(v1904, v2421.f64[0]), _Q2, v2421, 1);
    _Q4 = vmulq_f64(v2423, v2421);
    _D24 = v2421.f64[1];
    __asm { FMLA            D4, D24, V1.D[1] }
    v2090 = _Q4.f64[0];
    v1925 = vmlaq_laneq_f64(vmulq_n_f64(v1907, *(double *)&v2422[8]), v1908, *(float64x2_t *)&v2422[8], 1);
    v1926 = vmlaq_laneq_f64(vmulq_n_f64(v1903, *(double *)&v2422[8]), _Q7, *(float64x2_t *)&v2422[8], 1);
    v1927 = vmlaq_laneq_f64(vmulq_n_f64(v1904, *(double *)&v2422[8]), _Q2, *(float64x2_t *)&v2422[8], 1);
    _D17 = *(_QWORD *)&v2422[16];
    __asm { FMLA            D15, D17, V1.D[1] }
    v1930 = vmlaq_laneq_f64(vmulq_n_f64(v1907, v2423.f64[0]), v1908, v2423, 1);
    v1931 = vmlaq_laneq_f64(vmulq_n_f64(v1903, v2423.f64[0]), _Q7, v2423, 1);
    v1932 = vmlaq_laneq_f64(vmulq_n_f64(v1904, v2423.f64[0]), _Q2, v2423, 1);
    _Q7.f64[0] = v2423.f64[1];
    __asm { FMLA            D27, D7, V1.D[1] }
    _Q7.f64[0] = *(float64_t *)v2420;
    _Q7.f64[1] = *(float64_t *)&v2420[24];
    _Q1.f64[0] = *(float64_t *)v2422;
    _Q1.f64[1] = *(float64_t *)&v2422[24];
    _Q2.f64[0] = *(float64_t *)v2418;
    _Q2.f64[1] = *(float64_t *)&v2418[24];
    v1935 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1907, __src.f64[0]), v1908, __src, 1), _Q2, *(double *)v2418);
    v1936 = vmlaq_n_f64(v2366, _Q1, *(double *)v2418);
    _Q8.f64[0] = _D20 + *(double *)v2424 * *(double *)v2418;
    v1937 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1907, *(double *)&v2418[8]), v1908, *(float64x2_t *)&v2418[8], 1), _Q2, *(double *)&v2418[24]);
    v1938 = vmlaq_n_f64(v1911, _Q7, *(double *)&v2418[24]);
    v1939 = vmlaq_n_f64(v2322, _Q1, *(double *)&v2418[24]);
    _Q4.f64[0] = v1914 + *(double *)v2424 * *(double *)&v2418[24];
    v2075 = _Q4;
    v1940 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1907, v2419.f64[0]), v1908, v2419, 1), _Q2, *(double *)v2420);
    v1941 = vmlaq_n_f64(v2235, _Q7, *(double *)v2420);
    v1942 = vmlaq_n_f64(v1915, _Q1, *(double *)v2420);
    v1901.f64[0] = _D25 + *(double *)v2424 * *(double *)v2420;
    v2323 = v1901;
    v1943 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1907, *(double *)&v2420[8]), v1908, *(float64x2_t *)&v2420[8], 1), _Q2, *(double *)&v2420[24]);
    v1944 = vmlaq_n_f64(v2170, _Q7, *(double *)&v2420[24]);
    v1945 = vmlaq_n_f64(v2152, _Q1, *(double *)&v2420[24]);
    v1907.f64[0] = v2121 + *(double *)v2424 * *(double *)&v2420[24];
    v1946 = vmlaq_n_f64(v1920, _Q2, *(double *)v2422);
    v1947 = vmlaq_n_f64(v1921, _Q7, *(double *)v2422);
    v1948 = vmlaq_n_f64(v1922, _Q1, *(double *)v2422);
    v1900.f64[0] = v2090 + *(double *)v2424 * *(double *)v2422;
    v1949 = vmlaq_n_f64(v1925, _Q2, *(double *)&v2422[24]);
    v1950 = vmlaq_n_f64(v1926, _Q7, *(double *)&v2422[24]);
    v1951 = vmlaq_n_f64(v1927, _Q1, *(double *)&v2422[24]);
    v1908.f64[0] = _D15 + *(double *)v2424 * *(double *)&v2422[24];
    v1952 = vmlaq_n_f64(v1930, _Q2, *(double *)v2424);
    v1953 = vmlaq_n_f64(v1931, _Q7, *(double *)v2424);
    v1954 = vmlaq_n_f64(v1932, _Q1, *(double *)v2424);
    v1904.f64[0] = _D27 + *(double *)v2424 * *(double *)v2424;
    v2367 = vaddq_f64(*(float64x2_t *)(v1899 + 16), vmlaq_n_f64(v2414, _Q7, *(double *)v2418));
    v2415 = vaddq_f64(*(float64x2_t *)v1899, v1935);
    v1955 = vaddq_f64(*(float64x2_t *)(v1899 + 32), v1936);
    v1935.f64[0] = *(float64_t *)(v1899 + 48);
    v1956 = *(_OWORD *)&vaddq_f64(v1935, _Q8);
    v1957 = vaddq_f64(*(float64x2_t *)(v1899 + 56), v1937);
    v1958 = vaddq_f64(*(float64x2_t *)(v1899 + 72), v1938);
    v1959 = *(float64x2_t *)(v1899 + 88);
    v1960 = vaddq_f64(v1959, v1939);
    v1959.f64[0] = *(float64_t *)(v1899 + 104);
    *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vaddq_f64(v1959, v2075);
    v1961 = vaddq_f64(*(float64x2_t *)(v1899 + 112), v1940);
    v1962 = vaddq_f64(*(float64x2_t *)(v1899 + 128), v1941);
    v1963 = *(float64x2_t *)(v1899 + 144);
    v1964 = vaddq_f64(v1963, v1942);
    v1963.f64[0] = *(float64_t *)(v1899 + 160);
    *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(v1963, v2323);
    v1965 = vaddq_f64(*(float64x2_t *)(v1899 + 168), v1943);
    v1966 = vaddq_f64(*(float64x2_t *)(v1899 + 184), v1944);
    v1967 = *(float64x2_t *)(v1899 + 200);
    v1968 = vaddq_f64(v1967, v1945);
    v1967.f64[0] = *(float64_t *)(v1899 + 216);
    *(_QWORD *)&v1907.f64[0] = *(_OWORD *)&vaddq_f64(v1967, v1907);
    v1969 = vaddq_f64(*(float64x2_t *)(v1899 + 224), v1946);
    _Q8 = vaddq_f64(*(float64x2_t *)(v1899 + 240), v1947);
    v1970 = vaddq_f64(*(float64x2_t *)(v1899 + 256), v1948);
    v1948.f64[0] = *(float64_t *)(v1899 + 272);
    v1971 = *(_OWORD *)&vaddq_f64(v1948, v1900);
    v1972 = vaddq_f64(*(float64x2_t *)(v1899 + 280), v1949);
    v1973 = vaddq_f64(*(float64x2_t *)(v1899 + 296), v1950);
    v1974 = vaddq_f64(*(float64x2_t *)(v1899 + 312), v1951);
    v1950.f64[0] = *(float64_t *)(v1899 + 328);
    *(_QWORD *)&v1908.f64[0] = *(_OWORD *)&vaddq_f64(v1950, v1908);
    v1975 = vaddq_f64(*(float64x2_t *)(v1899 + 336), v1952);
    v1976 = vaddq_f64(*(float64x2_t *)(v1899 + 352), v1953);
    v1977 = *(float64x2_t *)(v1899 + 368);
    v1978 = vaddq_f64(v1977, v1954);
    v1977.f64[0] = *(float64_t *)(v1899 + 384);
    *(float64x2_t *)(v1899 + 32) = v1955;
    *(float64x2_t *)(v1899 + 16) = v2367;
    *(float64x2_t *)v1899 = v2415;
    *(_QWORD *)(v1899 + 48) = v1956;
    *(float64x2_t *)(v1899 + 88) = v1960;
    *(float64x2_t *)(v1899 + 72) = v1958;
    *(float64x2_t *)(v1899 + 56) = v1957;
    *(float64_t *)(v1899 + 104) = _Q2.f64[0];
    *(float64x2_t *)(v1899 + 128) = v1962;
    *(float64x2_t *)(v1899 + 144) = v1964;
    *(float64x2_t *)(v1899 + 112) = v1961;
    *(float64_t *)(v1899 + 160) = _Q1.f64[0];
    *(float64x2_t *)(v1899 + 200) = v1968;
    *(float64x2_t *)(v1899 + 184) = v1966;
    *(float64x2_t *)(v1899 + 168) = v1965;
    *(float64_t *)(v1899 + 216) = v1907.f64[0];
    *(float64x2_t *)(v1899 + 240) = _Q8;
    *(float64x2_t *)(v1899 + 256) = v1970;
    *(float64x2_t *)(v1899 + 224) = v1969;
    *(_QWORD *)(v1899 + 272) = v1971;
    *(float64x2_t *)(v1899 + 296) = v1973;
    *(float64x2_t *)(v1899 + 312) = v1974;
    *(float64x2_t *)(v1899 + 280) = v1972;
    *(float64_t *)(v1899 + 328) = v1908.f64[0];
    *(float64x2_t *)(v1899 + 352) = v1976;
    *(float64x2_t *)(v1899 + 368) = v1978;
    *(float64x2_t *)(v1899 + 336) = v1975;
    *(_QWORD *)(v1899 + 384) = *(_OWORD *)&vaddq_f64(v1977, v1904);
    *(_QWORD *)&v1969.f64[0] = vdupq_laneq_s64((int64x2_t)v2419, 1).u64[0];
    v1969.f64[1] = *(float64_t *)&v2420[16];
    *(_QWORD *)&v1965.f64[0] = vdupq_laneq_s64((int64x2_t)v2421, 1).u64[0];
    v1965.f64[1] = *(float64_t *)&v2422[16];
    _Q2.f64[1] = v2423.f64[1];
    v1979 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v2421, *(int64x2_t *)&v2422[8]), v1990->f64[0]), v1965, *v1990, 1);
    _Q4 = vmulq_f64(v2423, *v1990);
    _Q1.f64[0] = *(float64_t *)(v1896 + 88);
    __asm { FMLA            D4, D1, V2.D[1] }
    _Q1.f64[0] = *(float64_t *)v2418;
    _Q2.f64[0] = *(float64_t *)(v1896 + 96);
    _Q1.f64[1] = *(float64_t *)&v2418[24];
    v1980 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)__src, *(int64x2_t *)&v2418[8]), v1990->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)__src, *(int64x2_t *)&v2418[8]), *v1990, 1), _Q1, _Q2.f64[0]);
    _Q1.f64[0] = *(float64_t *)v2420;
    _Q1.f64[1] = *(float64_t *)&v2420[24];
    v1981 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v2419, *(int64x2_t *)&v2420[8]), v1990->f64[0]), v1969, *v1990, 1), _Q1, _Q2.f64[0]);
    _Q1.f64[0] = *(float64_t *)v2422;
    _Q1.f64[1] = *(float64_t *)&v2422[24];
    v1982 = vmlaq_n_f64(v1979, _Q1, _Q2.f64[0]);
    _Q1.f64[0] = _Q4.f64[0] + *(double *)v2424 * _Q2.f64[0];
    v1983 = (float64x2_t *)(*(_QWORD *)v2416 + 8 * (*(_DWORD *)(v2416 + 32) - v1989 + 8 * v1989));
    _Q2.f64[0] = v1983[3].f64[0];
    v1984 = vsubq_f64(v1983[1], v1981);
    *v1983 = vsubq_f64(*v1983, v1980);
    v1983[1] = v1984;
    v1983[2] = vsubq_f64(v1983[2], v1982);
    *(_QWORD *)&v1983[3].f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q1);
    goto LABEL_242;
  }
}

double sub_239CCA038(uint64_t a1, float64x2_t *a2, uint64_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, float64_t a7, float64x2_t a8)
{
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int8x16_t v15;
  double v24;
  double v25;
  double cosval;
  double v27;
  __double2 v28;
  double v29;
  double v30;
  float64x2_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v49;
  float64x2_t v52;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double result;
  double v60;
  unint64_t v61;
  float64_t v62;
  float64x2_t v63;
  unint64_t v64;
  int8x16_t v69;
  double v70;
  float64x2_t v71[4];
  uint64_t v72;
  int8x16_t v73;
  double v74;
  double v75;
  int8x16_t v76;
  double v77;
  int8x16_t v78;
  float64_t v79;
  float64x2_t v80;
  unint64_t v81;
  float64x2_t v82[2];

  v64 = *(_QWORD *)&a6.f64[0];
  a6.f64[1] = a7;
  v82[0] = a4;
  v82[1] = a5;
  v81 = *(_QWORD *)&a8.f64[0];
  v80 = a6;
  v11 = *(double *)(a1 + 16);
  v75 = v11;
  v12 = *(float64x2_t *)(a1 + 40);
  v13 = *(float64x2_t *)(a1 + 72);
  v71[2] = *(float64x2_t *)(a1 + 56);
  v71[3] = v13;
  v72 = *(_QWORD *)(a1 + 88);
  v71[0] = *(float64x2_t *)(a1 + 24);
  v71[1] = v12;
  v74 = 0.0;
  v73 = 0uLL;
  sub_239458B60(v71, (double *)v73.i64);
  v69 = v73;
  v70 = v74;
  v77 = v74;
  v76 = v73;
  v14.f64[0] = *(float64_t *)(a1 + 112);
  v15 = *(int8x16_t *)(a1 + 96);
  *(_QWORD *)&v60 = vextq_s8(v69, v69, 8uLL).u64[0];
  v61 = vextq_s8(v15, v15, 8uLL).u64[0];
  v62 = *(double *)v15.i64;
  v63 = v14;
  v79 = v14.f64[0];
  v78 = v15;
  sub_239CAB2C4(v82, (uint64_t)&v75, &v80, a2, v14, v15);
  _Q2 = (float64x2_t)v69;
  _Q0 = vmulq_f64(_Q2, _Q2);
  _D1 = v69.i64[1];
  __asm { FMLA            D0, D1, V2.D[1] }
  v24 = _Q0.f64[0] + v70 * v70;
  if (v24 >= 0.0000002635)
  {
    v27 = sqrt(v24);
    v28 = __sincos_stret(v27);
    cosval = v28.__cosval;
    v25 = v28.__sinval / v27;
    _Q0.f64[0] = 1.0 / v24 * (1.0 - v28.__cosval);
  }
  else
  {
    _Q0.f64[0] = 0.5 - v24 * (v24 / -720.0 + 0.0416666667);
    v25 = 1.0 - v24 * (0.166666667 - v24 * (v24 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v24 * _Q0.f64[0];
  }
  v29 = *(double *)v69.i64 * _Q0.f64[0];
  v30 = v60 * _Q0.f64[0];
  v31.f64[0] = cosval + *(double *)v69.i64 * _Q0.f64[0] * *(double *)v69.i64;
  v32 = cosval + v60 * _Q0.f64[0] * v60;
  _Q0.f64[0] = cosval + v70 * _Q0.f64[0] * v70;
  v33 = v70 * v29;
  v34 = v70 * v30;
  v35 = *(double *)v69.i64 * v25;
  v36 = v60 * v25;
  v37 = v70 * v25;
  v38.f64[0] = v60 * v29 - v37;
  v39.f64[0] = v36 + v70 * v29;
  v40.f64[0] = v60 * v29 + v37;
  _D4 = v34 - v35;
  v42.f64[0] = v31.f64[0];
  v42.f64[1] = v40.f64[0];
  v43.f64[0] = v33 - v36;
  v31.f64[1] = v38.f64[0];
  v38.f64[1] = v32;
  _D16 = v35 + v34;
  _Q18.f64[0] = v62;
  *(_QWORD *)&_Q18.f64[1] = v61;
  *(_QWORD *)&_Q17.f64[0] = v64;
  _Q17.f64[1] = a7;
  _Q1 = vsubq_f64(_Q17, _Q18);
  v39.f64[1] = _D4;
  v40.f64[1] = v32;
  _V23.D[1] = *(_QWORD *)&a4.f64[1];
  v49 = vsubq_f64(a8, v63);
  v43.f64[1] = _D16;
  _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, _Q1.f64[0]), v40, _Q1, 1), v43, v49.f64[0]);
  __asm { FMLA            D17, D4, V1.D[1] }
  _Q2.f64[0] = _Q2.f64[1];
  __asm { FMLA            D4, D2, V23.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_D4, vmlad_n_f64(_Q17.f64[0], _Q0.f64[0], v49.f64[0]), a5.f64[0]) / (v11 * v11);
  v52 = vmulq_n_f64(a4, _Q2.f64[0]);
  *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vmulq_f64(a5, _Q2);
  _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v42, a4.f64[0]), v38, a4, 1), v39, a5.f64[0]);
  __asm { FMLA            D18, D16, V23.D[1] }
  _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], _Q0.f64[0], a5.f64[0]);
  _Q0.f64[0] = 1.0 / v11;
  v40.f64[0] = 1.0 / v11 * _Q3.f64[0];
  v43.f64[0] = vmuld_lane_f64(1.0 / v11, _Q3, 1);
  v54 = _Q18.f64[0] * (1.0 / v11);
  __asm { FMLS            D21, D18, V1.D[1] }
  v49.f64[0] = vmlad_n_f64(-_Q3.f64[0] * v49.f64[0], _Q18.f64[0], _Q1.f64[0]);
  __asm { FMLS            D18, D1, V3.D[1] }
  v55 = vnegq_f64(a5);
  v56 = vnegq_f64(a4);
  v57 = vmulq_n_f64(v56, _Q21.f64[0]);
  _Q21.f64[0] = _Q21.f64[0] * v55.f64[0];
  v58 = vmulq_n_f64(v56, v49.f64[0]);
  v49.f64[0] = v49.f64[0] * v55.f64[0];
  _Q2.f64[1] = *(float64_t *)(a3 + 24);
  *(float64x2_t *)a3 = v52;
  *(float64x2_t *)(a3 + 16) = _Q2;
  v55.f64[0] = _Q18.f64[0] * v55.f64[0];
  *(_QWORD *)(a3 + 40) = *(_OWORD *)&vmulq_f64(_Q0, _Q21);
  *(float64x2_t *)(a3 + 24) = vmulq_n_f64(v57, 1.0 / v11);
  *(float64x2_t *)(a3 + 48) = vmulq_n_f64(v58, 1.0 / v11);
  *(_QWORD *)(a3 + 64) = *(_OWORD *)&vmulq_f64(_Q0, v49);
  *(float64x2_t *)(a3 + 72) = vmulq_n_f64(vmulq_n_f64(v56, _Q18.f64[0]), 1.0 / v11);
  *(_QWORD *)(a3 + 88) = *(_OWORD *)&vmulq_f64(_Q0, v55);
  *(double *)(a3 + 112) = v40.f64[0] * a5.f64[0];
  *(float64x2_t *)(a3 + 96) = vmulq_n_f64(a4, v40.f64[0]);
  *(double *)(a3 + 136) = v43.f64[0] * a5.f64[0];
  *(float64x2_t *)(a3 + 120) = vmulq_n_f64(a4, v43.f64[0]);
  result = v54 * a5.f64[0];
  *(double *)(a3 + 160) = v54 * a5.f64[0];
  *(float64x2_t *)(a3 + 144) = vmulq_n_f64(a4, v54);
  return result;
}

uint64_t sub_239CCA368(unint64_t *a1, char **a2, int a3, char *a4)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;

  v8 = a1[10];
  v9 = a1 + 2;
  if (v8)
  {
    v11 = a1[6];
    v10 = a1[7];
    v12 = ((v10 - v11) << 6) - 1;
    v13 = a1[9];
    if (v10 == v11)
      v12 = 0;
    v14 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v11 + (((v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v12 - (v8 + v13) + 1 >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      a1[7] -= 8;
    }
  }
  else
  {
    v15 = (void *)a1[3];
    *(_QWORD *)&v18 = 0;
    sub_239C2323C(a1 + 2, v15, 0x31uLL, (uint64_t *)&v18);
    v14 = a1[3] - 392;
  }
  v16 = (v14 - *v9) >> 3;
  LODWORD(v18) = a3;
  *((_QWORD *)&v18 + 1) = v16;
  sub_239C22598(a2, a4, &v18);
  return v14;
}

double sub_239CCA46C(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t a4, double a5, double a6, double a7, float64x2_t _Q4, double a9, float64x2_t a10)
{
  float64x2_t v10;
  float64x2_t v11;
  uint64_t v16;
  uint64_t v17;
  const double *v18;
  float64x2_t v22;
  double v23;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v35;
  float64x2_t v36;
  double v40;
  float64x2_t v41;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64_t v47;
  float64x2_t v55;
  float64x2_t v59;
  float64x2_t v61;
  float64x2_t v63;
  float64x2_t v68;
  float64x2_t v75;
  int64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  uint64_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  double v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t *v101;
  uint64_t v102;
  uint64_t v104;
  int v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  int v110;
  float64x2_t v111;
  float64x2_t v113;
  double v114;
  float64x2_t v115;
  double v116;
  float64x2_t v119;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  int8x16_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int8x16_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  int64x2_t v142;
  int8x16_t v143;
  int64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  int64x2_t v147;
  float64x2_t v148;
  int8x16_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  double v158;
  double v160;
  double v162;
  double v164;
  double v166;
  double v168;
  double v170;
  float64x2_t v172;
  double v174;
  double v176;
  float64x2_t v177;
  double v179;
  float64x2_t v180;
  double v182;
  float64x2_t v183;
  double v185;
  float64x2_t v188;
  float64x2_t v190;
  double v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  int8x16_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int8x16_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  int64x2_t v212;
  int8x16_t v213;
  int64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  int64x2_t v217;
  float64x2_t v218;
  int64x2_t v219;
  int8x16_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  double v231;
  double v233;
  double v235;
  double v237;
  double v239;
  double v241;
  double v243;
  float64x2_t v245;
  double v247;
  float64x2_t v248;
  double v250;
  float64x2_t v251;
  double v253;
  float64x2_t v254;
  double v256;
  float64x2_t v257;
  double v259;
  double result;
  double v266;
  float64_t v267;
  float64x2_t v268;
  double v269;
  float64x2_t v270;
  double v271;
  float64x2_t v272;
  float64x2_t v273;
  uint64_t v274;
  float64x2_t v275;
  float64_t v276;
  float64x2x3_t v277;

  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  a4.f64[0] = *(float64_t *)(v16 + 16);
  v18 = (const double *)(v16 + 24);
  v277 = vld3q_f64(v18);
  _Q4.f64[0] = *(float64_t *)(v16 + 88);
  _Q5 = *(float64x2_t *)(v16 + 72);
  a10.f64[0] = *(float64_t *)(v16 + 112);
  v10.f64[0] = *(float64_t *)(v17 + 16);
  _D21 = *(_QWORD *)(v17 + 64);
  v11.f64[0] = *(float64_t *)(v17 + 112);
  _Q18 = *(float64x2_t *)(v17 + 96);
  v22 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4.f64[0], 0);
  *(_QWORD *)&v23 = *(_OWORD *)&vdivq_f64(a10, a4);
  _Q7 = vdivq_f64(*(float64x2_t *)(v16 + 96), v22);
  v25 = vdivq_f64(v11, v10);
  v26 = vdivq_f64(_Q18, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10.f64[0], 0));
  v27 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v277.val[0], _Q7.f64[0]), v277.val[1], _Q7, 1), v277.val[2], v23);
  _Q27 = vmulq_f64(_Q5, _Q7);
  _Q7.f64[0] = _Q7.f64[1];
  __asm { FMLA            D27, D7, V5.D[1] }
  _Q27.f64[0] = vmlad_n_f64(_Q27.f64[0], _Q4.f64[0], v23);
  _Q18.f64[0] = *(float64_t *)(a1 + 24);
  _Q17 = *(float64x2_t *)(a1 + 8);
  v10.f64[0] = *(float64_t *)(*(_QWORD *)(a1 + 56) + 16);
  _Q7 = vmulq_f64(_Q18, v10);
  v35 = vmulq_n_f64(_Q17, v10.f64[0]);
  v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v277.val[0], v35.f64[0]), v277.val[1], v35, 1), v277.val[2], _Q7.f64[0]);
  v277.val[0] = vmulq_f64(_Q5, v35);
  v277.val[1].f64[0] = v35.f64[1];
  __asm { FMLA            D1, D2, V5.D[1] }
  v277.val[0].f64[0] = vmlad_n_f64(v277.val[0].f64[0], _Q4.f64[0], _Q7.f64[0]);
  *(_QWORD *)&v277.val[0].f64[0] = *(_OWORD *)&vsubq_f64(v277.val[0], _Q27);
  v277.val[1] = vsubq_f64(v36, v27);
  __asm { FMLA            D4, D21, V2.D[1] }
  _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], *(double *)(v17 + 88), v277.val[0].f64[0]);
  _Q4 = vaddq_f64(v25, _Q4);
  _Q5 = vaddq_f64(v26, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v17 + 24), v277.val[1].f64[0]), *(float64x2_t *)(v17 + 48), v277.val[1], 1), *(float64x2_t *)(v17 + 72), v277.val[0].f64[0]));
  v277.val[0].f64[0] = _Q5.f64[1];
  v277.val[1] = vmulq_f64(_Q5, _Q5);
  __asm { FMLA            D2, D1, V5.D[1] }
  v277.val[2] = vnegq_f64(_Q5);
  _Q6 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q5.f64[0], 0);
  _Q6.f64[0] = 1.0;
  v40 = vmuld_lane_f64(v277.val[2].f64[0], _Q5, 1);
  v41 = vmulq_n_f64(v277.val[2], _Q5.f64[0]);
  _Q21 = vmulq_n_f64(v277.val[2], _Q4.f64[0]);
  v277.val[2].f64[0] = sqrt(vmlad_n_f64(v277.val[1].f64[0], _Q4.f64[0], _Q4.f64[0]));
  v43 = vdivq_f64(_Q6, v277.val[2]);
  v44 = vmlaq_n_f64(vnegq_f64(*(float64x2_t *)(a1 + 32)), _Q5, v43.f64[0]);
  *(float64x2_t *)(a1 + 80) = v44;
  v44.f64[0] = *(float64_t *)(a1 + 48);
  v45 = vmlaq_f64(vnegq_f64(v44), v43, _Q4);
  *(float64_t *)(a1 + 96) = v45.f64[0];
  v45.f64[0] = v277.val[2].f64[0] * (v277.val[2].f64[0] * v277.val[2].f64[0]);
  v277.val[1].f64[0] = vmuld_n_f64(_Q5.f64[0], _Q5.f64[0]) / v45.f64[0];
  *(_QWORD *)&v46.f64[0] = *(_OWORD *)&vsubq_f64(v43, v277.val[1]);
  v277.val[1].f64[1] = v45.f64[0];
  v46.f64[1] = vdivq_f64(v41, *(float64x2_t *)(&v277 + 16)).f64[1];
  _Q6.f64[0] = v40 / v45.f64[0];
  v270 = vdivq_f64(_Q21, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v45.f64[0], 0));
  v47 = -_Q4.f64[0] * _Q5.f64[0] / v45.f64[0];
  _Q6.f64[1] = v43.f64[0] - vmuld_lane_f64(_Q5.f64[1], _Q5, 1) / v45.f64[0];
  _D14 = vmuld_lane_f64(-_Q4.f64[0], _Q5, 1) / v45.f64[0];
  v266 = v43.f64[0] - vmuld_n_f64(_Q4.f64[0], _Q4.f64[0]) / v45.f64[0];
  v45.f64[0] = *(float64_t *)(v16 + 40);
  _Q19 = *(float64x2_t *)(v16 + 24);
  v41.f64[0] = *(float64_t *)(v16 + 64);
  _Q24 = *(float64x2_t *)(v16 + 48);
  v25.f64[0] = *(float64_t *)(v16 + 88);
  _Q27 = *(float64x2_t *)(v16 + 72);
  v36.f64[0] = *(float64_t *)(v17 + 40);
  _Q29 = *(float64x2_t *)(v17 + 24);
  _Q30.f64[0] = *(float64_t *)(v17 + 64);
  _Q31 = *(float64x2_t *)(v17 + 48);
  _D8 = *(double *)(v17 + 88);
  v55 = *(float64x2_t *)(v17 + 72);
  _Q22 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q29, _Q19.f64[0]), _Q31, _Q24.f64[0]), v55, _Q27.f64[0]);
  _Q21.f64[0] = vmlad_n_f64(vmlad_n_f64(v36.f64[0] * _Q19.f64[0], _Q30.f64[0], _Q24.f64[0]), _D8, _Q27.f64[0]);
  _Q26 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q29, _Q19, 1), _Q31, _Q24, 1), v55, _Q27, 1);
  __asm
  {
    FMLA            D23, D30, V24.D[1]
    FMLA            D23, D8, V27.D[1]
  }
  _Q27 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q29, v45.f64[0]), _Q31, v41.f64[0]), v55, v25.f64[0]);
  _Q29.f64[0] = vmulq_f64(v36, v45).f64[0] + _Q30.f64[0] * v41.f64[0] + _D8 * v25.f64[0];
  v59 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q22, _Q17.f64[0]), _Q26, _Q17, 1), _Q27, _Q18.f64[0]);
  __asm { FMLA            D19, D23, V17.D[1] }
  *(float64x2_t *)a3 = v59;
  *(double *)(a3 + 16) = _Q19.f64[0] + _Q29.f64[0] * _Q18.f64[0];
  v59.f64[0] = *(float64_t *)(v16 + 16);
  _Q30.f64[0] = *(float64_t *)(v17 + 16);
  _Q31.f64[0] = *(float64_t *)(v16 + 112);
  _Q9 = *(float64x2_t *)(v16 + 96);
  v61 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q22, _Q9.f64[0]), _Q26, _Q9, 1), _Q27, _Q31.f64[0]);
  __asm { FMLA            D18, D23, V9.D[1] }
  _Q18.f64[0] = _Q18.f64[0] + _Q29.f64[0] * _Q31.f64[0];
  _Q19.f64[0] = v59.f64[0] * v59.f64[0];
  *(_QWORD *)&_Q4.f64[0] = *(_OWORD *)&vdivq_f64(_Q18, _Q19);
  _Q8 = vdivq_f64(v61, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v59.f64[0] * v59.f64[0]), 0));
  v61.f64[0] = *(float64_t *)(v17 + 112);
  _Q19.f64[0] = _Q30.f64[0] * _Q30.f64[0];
  v268 = vdivq_f64(vnegq_f64(*(float64x2_t *)(v17 + 96)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(_Q30.f64[0] * _Q30.f64[0]), 0));
  *(_QWORD *)&v269 = *(_OWORD *)&vdivq_f64(vnegq_f64(v61), _Q19);
  v63 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v59.f64[0], 0);
  *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vdivq_f64(vnegq_f64(_Q29), v59);
  _Q20 = vdivq_f64(vnegq_f64(_Q27), v63);
  _Q24 = vdivq_f64(vnegq_f64((float64x2_t)vextq_s8((int8x16_t)_Q26, _Q23, 8uLL)), v63);
  _Q25 = vdivq_f64(vnegq_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q21, (int64x2_t)_Q26)), v63);
  _Q28 = vdivq_f64(vnegq_f64(_Q22), v63);
  v68 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q30.f64[0], 0);
  __asm { FMOV            V10.2D, #1.0 }
  *(_QWORD *)&v271 = *(_OWORD *)&vdivq_f64(_Q10, _Q30);
  *(_QWORD *)&_Q7.f64[0] = *(_OWORD *)&vsubq_f64(_Q7, vdivq_f64(_Q31, v59));
  _Q16 = vsubq_f64(v35, vdivq_f64(_Q9, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v59.f64[0], 0)));
  _D30 = _Q16.f64[1];
  __asm
  {
    FMLS            D13, D30, V27.D[0]
    FMLS            D10, D7, V22.D[0]
    FMLS            D9, D16, V26.D[0]
    FMLS            D3, D30, V27.D[1]
    FMLS            D30, D7, V22.D[1]
    FMLS            D18, D16, V26.D[1]
    FMLS            D11, D23, V16.D[0]
  }
  v75 = vmlaq_laneq_f64(vmulq_n_f64(_Q22, _Q16.f64[0]), _Q26, _Q16, 1);
  __asm
  {
    FMLA            D26, D23, V16.D[1]
    FMLS            D1, D29, V16.D[1]
    FMLS            D5, D21, V7.D[0]
  }
  _Q0 = (int64x2_t)vmlaq_n_f64(v75, _Q27, _Q7.f64[0]);
  _Q26.f64[0] = vmlad_n_f64(_Q26.f64[0], _Q29.f64[0], _Q7.f64[0]);
  *(_QWORD *)&_Q31.f64[0] = vdupq_laneq_s64(_Q0, 1).u64[0];
  _Q31.f64[1] = -*(double *)_Q0.i64;
  __asm { FMLA            D16, D14, V8.D[1] }
  _Q21 = vdivq_f64((float64x2_t)xmmword_239EC6840, v68);
  _Q22 = vdivq_f64((float64x2_t)0, v68);
  v79 = vzip1q_s64((int64x2_t)0, _Q0);
  v80 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, _Q8.f64[0]), _Q6, _Q8, 1), v270, _Q4.f64[0]);
  _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v266, _Q4.f64[0]);
  v81 = vmlaq_n_f64(vmulq_n_f64(v46, _D13), _Q6, v277.val[2].f64[0]);
  v277.val[2].f64[0] = v47 * _D13 + _D14 * v277.val[2].f64[0];
  _Q8.f64[0] = 0.0;
  _Q8.f64[1] = _Q26.f64[0];
  *(double *)&v82 = -_Q26.f64[0];
  _Q29.f64[0] = -*(double *)&_Q0.i64[1];
  v83 = vmlaq_n_f64(v81, v270, v277.val[0].f64[0]);
  _Q4.f64[0] = v266;
  v267 = v277.val[2].f64[0] + v266 * v277.val[0].f64[0];
  v84 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v46, _Q10.f64[0]), _Q6, _D30), v270, _Q5.f64[0]);
  v277.val[0] = (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(v82, 0), (int8x16_t)v79, 8uLL);
  *(_QWORD *)&_D13 = vdupq_laneq_s64(v79, 1).u64[0];
  _Q27.f64[0] = v47 * _Q10.f64[0] + _D14 * _D30 + v266 * _Q5.f64[0];
  v86 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v46, _Q9.f64[0]), _Q6, _Q18.f64[0]), v270, _D11);
  v277.val[2].f64[0] = v47 * _Q9.f64[0] + _D14 * _Q18.f64[0] + v266 * _D11;
  v87 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, _Q28.f64[0]), _Q6, _Q28, 1), v270, _Q25.f64[0]);
  __asm { FMLA            D10, D14, V28.D[1] }
  _Q10.f64[0] = vmlad_n_f64(_Q10.f64[0], v266, _Q25.f64[0]);
  v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v46, _Q25, 1), _Q6, _Q24.f64[0]), v270, _Q24, 1);
  __asm { FMLA            D25, D4, V24.D[1] }
  _Q5.f64[0] = v266;
  v89 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, _Q20.f64[0]), _Q6, _Q20, 1), v270, _Q19.f64[0]);
  __asm { FMLA            D11, D14, V20.D[1] }
  v91 = vmlad_n_f64(_D11, v266, _Q19.f64[0]);
  _Q0.i64[1] = *(_QWORD *)&v268.f64[1];
  __asm { FMLA            D20, D14, V0.D[1] }
  v92 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v268.f64[0]), _Q6, v268, 1), v270, v269);
  __asm { FMLS            D0, D14, V8.D[1] }
  v93 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v46, vnegq_f64(_Q8).f64[0]), _Q6, _Q8, 1), v270, _Q29.f64[0], 0);
  __asm
  {
    FMLS            D0, D5, V29.D[0]
    FMLS            D8, D14, V1.D[1]
  }
  v94 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v46, vnegq_f64(v277.val[0]).f64[0]), _Q6, v277.val[0], 1), v270, _D13, 0);
  __asm { FMLS            D8, D5, V13.D[0] }
  v95 = vmlaq_f64(vmlsq_laneq_f64(vmulq_n_f64(v46, vnegq_f64(_Q31).f64[0]), _Q6, _Q31, 1), (float64x2_t)vdupq_n_s64(0x8000000000000000), v270);
  __asm { FMLS            D1, D14, V31.D[1] }
  v96 = vmlaq_laneq_f64(vmulq_n_f64(v46, _Q21.f64[0]), _Q6, _Q21, 1);
  v97 = vmlaq_n_f64(vmulq_laneq_f64(v46, _Q22, 1), _Q6, _Q21.f64[0]);
  v98 = vmlaq_laneq_f64(vmulq_n_f64(v46, _Q22.f64[0]), _Q6, _Q22, 1);
  __asm
  {
    FMLA            D6, D14, V21.D[1]
    FMLA            D15, D14, V22.D[1]
    FMLA            D13, D5, V21.D[1]
  }
  *(float64x2_t *)(a3 + 24) = v80;
  *(float64_t *)(a3 + 40) = _Q16.f64[0];
  *(float64_t *)(a3 + 64) = v267;
  *(float64x2_t *)(a3 + 48) = v83;
  *(float64_t *)(a3 + 88) = _Q27.f64[0];
  *(float64x2_t *)(a3 + 72) = v84;
  *(float64_t *)(a3 + 112) = v277.val[2].f64[0];
  *(float64x2_t *)(a3 + 96) = v86;
  *(float64x2_t *)(a3 + 120) = v87;
  *(float64_t *)(a3 + 136) = _Q10.f64[0];
  *(float64x2_t *)(a3 + 144) = v88;
  *(float64_t *)(a3 + 160) = _Q25.f64[0];
  *(float64x2_t *)(a3 + 168) = v89;
  *(double *)(a3 + 184) = v91;
  *(float64x2_t *)(a3 + 192) = v92;
  *(double *)(a3 + 208) = vmlad_n_f64(_Q20.f64[0], v266, v269);
  *(float64x2_t *)(a3 + 216) = v93;
  *(_QWORD *)(a3 + 232) = _Q0.i64[0];
  *(float64x2_t *)(a3 + 240) = v94;
  *(float64_t *)(a3 + 256) = _Q8.f64[0];
  v101 = (float64x2_t *)(a3 + 264);
  *(float64x2_t *)(a3 + 264) = v95;
  *(double *)(a3 + 280) = v277.val[0].f64[0] + v266 * -0.0;
  *(float64x2_t *)(a3 + 288) = vmlaq_n_f64(v96, v270, _Q22.f64[0]);
  *(double *)(a3 + 304) = vmlad_n_f64(_Q6.f64[0], v266, _Q22.f64[0]);
  *(float64x2_t *)(a3 + 312) = vmlaq_laneq_f64(v97, v270, _Q21, 1);
  *(_QWORD *)(a3 + 328) = _D13;
  *(float64x2_t *)(a3 + 336) = vmlaq_n_f64(v98, v270, v271);
  *(double *)(a3 + 352) = vmlad_n_f64(_D15, v266, v271);
  v102 = *(_QWORD *)(a1 + 112);
  if (v102)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 24))(v102);
    v104 = *(_QWORD *)(a1 + 112);
    v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 16))(v104);
    v110 = v105;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 4))
    {
      switch(v105)
      {
        case 0:
          v111 = *(float64x2_t *)(v104 + 16);
          _D2 = *(_QWORD *)(v104 + 56);
          v113 = *(float64x2_t *)(v104 + 40);
          v114 = *(double *)(v104 + 80);
          v115 = *(float64x2_t *)(v104 + 64);
          goto LABEL_9;
        case 1:
          v107.f64[0] = *(float64_t *)(a3 + 16);
          v108.f64[0] = *(float64_t *)(v104 + 32);
          v107 = vmulq_f64(v107, v108);
          v106 = vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)(v104 + 16));
          goto LABEL_7;
        case 2:
          v106.f64[0] = *(float64_t *)(v104 + 16);
          v107.f64[0] = *(float64_t *)(a3 + 16);
          v107 = vmulq_f64(v106, v107);
          v106 = vmulq_n_f64(*(float64x2_t *)a3, v106.f64[0]);
LABEL_7:
          *(float64x2_t *)a3 = v106;
          *(float64_t *)(a3 + 16) = v107.f64[0];
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v104 + 56))(&v272, v104);
          v111 = v272;
          _D2 = v274;
          v113 = v273;
          v114 = v276;
          v115 = v275;
LABEL_9:
          v116 = *(double *)(a3 + 16);
          _Q7 = *(float64x2_t *)a3;
          v107 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v111, *(double *)a3), v113, *(float64x2_t *)a3, 1), v115, v116);
          __asm { FMLA            D0, D2, V7.D[1] }
          *(float64x2_t *)a3 = v107;
          *(double *)(a3 + 16) = _D0 + v114 * v116;
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 4))
    {
      switch(v110)
      {
        case 0:
          v119 = *(float64x2_t *)(v104 + 16);
          _D2 = *(_QWORD *)(v104 + 56);
          v121 = *(float64x2_t *)(v104 + 40);
          v106.f64[0] = *(float64_t *)(v104 + 80);
          v122 = *(float64x2_t *)(v104 + 64);
          goto LABEL_16;
        case 1:
          v106.f64[0] = *(float64_t *)(a3 + 184);
          v123 = *(float64x2_t *)(a3 + 168);
          v124 = *(float64x2_t *)(a3 + 152);
          v125 = *(float64x2_t *)(a3 + 136);
          v126 = *(float64x2_t *)(a3 + 120);
          v127 = *(float64x2_t *)(a3 + 104);
          v128 = *(float64x2_t *)(a3 + 88);
          v129 = *(float64x2_t *)(a3 + 72);
          v130 = *(float64x2_t *)(a3 + 56);
          v109.f64[0] = *(float64_t *)(v104 + 32);
          v131 = vmulq_f64(*(float64x2_t *)(a3 + 24), *(float64x2_t *)(v104 + 16));
          v132 = vmulq_f64(*(float64x2_t *)(a3 + 40), v109);
          v133.f64[0] = v132.f64[0];
          v133.f64[1] = *(float64_t *)(a3 + 48);
          *(float64x2_t *)(a3 + 24) = v131;
          *(float64x2_t *)(a3 + 40) = v133;
          v134 = (float64x2_t)vextq_s8((int8x16_t)v133, (int8x16_t)v130, 8uLL);
          v133.f64[0] = *(float64_t *)(v104 + 32);
          v135 = (int8x16_t)vmulq_laneq_f64(v133, v130, 1);
          v136 = (int64x2_t)vmulq_f64(v134, *(float64x2_t *)(v104 + 16));
          v137 = vzip1q_s64((int64x2_t)v132, v136);
          *(float64x2_t *)(a3 + 24) = v131;
          *(int64x2_t *)(a3 + 40) = v137;
          v138 = vextq_s8((int8x16_t)v136, v135, 8uLL);
          *(int8x16_t *)(a3 + 56) = v138;
          v132.f64[0] = *(float64_t *)(v104 + 32);
          v139 = *(float64x2_t *)(v104 + 16);
          v140 = vmulq_f64(v129, v139);
          v141 = vmulq_f64(v128, v132);
          v128.f64[0] = v141.f64[0];
          *(int8x16_t *)(a3 + 56) = v138;
          *(int64x2_t *)(a3 + 40) = v137;
          *(float64x2_t *)(a3 + 24) = v131;
          *(float64x2_t *)(a3 + 72) = v140;
          *(float64x2_t *)(a3 + 88) = v128;
          v139.f64[0] = *(float64_t *)(v104 + 32);
          v142 = (int64x2_t)vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v128, (int8x16_t)v127, 8uLL), *(float64x2_t *)(v104 + 16));
          v143 = vextq_s8((int8x16_t)v142, (int8x16_t)vmulq_laneq_f64(v139, v127, 1), 8uLL);
          v144 = vzip1q_s64((int64x2_t)v141, v142);
          *(int8x16_t *)(a3 + 56) = v138;
          *(int64x2_t *)(a3 + 40) = v137;
          *(float64x2_t *)(a3 + 24) = v131;
          *(float64x2_t *)(a3 + 72) = v140;
          *(int64x2_t *)(a3 + 88) = v144;
          *(int8x16_t *)(a3 + 104) = v143;
          v141.f64[0] = *(float64_t *)(v104 + 32);
          v145 = *(float64x2_t *)(v104 + 16);
          v146 = vmulq_f64(v126, v145);
          v147 = (int64x2_t)vmulq_f64(v125, v141);
          *(_QWORD *)&v125.f64[0] = v147.i64[0];
          *(int8x16_t *)(a3 + 104) = v143;
          *(int64x2_t *)(a3 + 88) = v144;
          *(float64x2_t *)(a3 + 72) = v140;
          *(int64x2_t *)(a3 + 40) = v137;
          *(float64x2_t *)(a3 + 24) = v131;
          *(int8x16_t *)(a3 + 56) = v138;
          *(float64x2_t *)(a3 + 120) = v146;
          *(float64x2_t *)(a3 + 136) = v125;
          v145.f64[0] = *(float64_t *)(v104 + 32);
          v148 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v125, (int8x16_t)v124, 8uLL), *(float64x2_t *)(v104 + 16));
          v109 = (float64x2_t)vzip1q_s64(v147, (int64x2_t)v148);
          *(float64x2_t *)(a3 + 120) = v146;
          *(int8x16_t *)(a3 + 104) = v143;
          *(int64x2_t *)(a3 + 88) = v144;
          *(float64x2_t *)(a3 + 72) = v140;
          *(int8x16_t *)(a3 + 56) = v138;
          *(float64x2_t *)(a3 + 24) = v131;
          *(int64x2_t *)(a3 + 40) = v137;
          *(float64x2_t *)(a3 + 136) = v109;
          v149 = vextq_s8((int8x16_t)v148, (int8x16_t)vmulq_laneq_f64(v145, v124, 1), 8uLL);
          *(int8x16_t *)(a3 + 152) = v149;
          v148.f64[0] = *(float64_t *)(v104 + 32);
          v106 = vmulq_f64(v106, v148);
          v107 = vmulq_f64(v123, *(float64x2_t *)(v104 + 16));
          *(int8x16_t *)(a3 + 152) = v149;
          *(float64x2_t *)(a3 + 136) = v109;
          *(float64x2_t *)(a3 + 120) = v146;
          *(int8x16_t *)(a3 + 104) = v143;
          *(int64x2_t *)(a3 + 88) = v144;
          *(float64x2_t *)(a3 + 72) = v140;
          *(int8x16_t *)(a3 + 56) = v138;
          *(int64x2_t *)(a3 + 40) = v137;
          *(float64x2_t *)(a3 + 24) = v131;
          *(float64x2_t *)(a3 + 168) = v107;
          *(float64_t *)(a3 + 184) = v106.f64[0];
          break;
        case 2:
          v106.f64[0] = *(float64_t *)(v104 + 16);
          v107.f64[0] = *(float64_t *)(a3 + 184);
          v107 = vmulq_f64(v106, v107);
          v109 = vmulq_n_f64(*(float64x2_t *)(a3 + 168), v106.f64[0]);
          v150 = vmulq_n_f64(*(float64x2_t *)(a3 + 152), v106.f64[0]);
          v151 = vmulq_n_f64(*(float64x2_t *)(a3 + 136), v106.f64[0]);
          v152 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), v106.f64[0]);
          v153 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), v106.f64[0]);
          v154 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), v106.f64[0]);
          v155 = vmulq_n_f64(*(float64x2_t *)(a3 + 72), v106.f64[0]);
          v156 = vmulq_n_f64(*(float64x2_t *)(a3 + 56), v106.f64[0]);
          v157 = vmulq_n_f64(*(float64x2_t *)(a3 + 40), v106.f64[0]);
          v106 = vmulq_n_f64(*(float64x2_t *)(a3 + 24), v106.f64[0]);
          *(float64x2_t *)(a3 + 24) = v106;
          *(float64x2_t *)(a3 + 40) = v157;
          *(float64x2_t *)(a3 + 56) = v156;
          *(float64x2_t *)(a3 + 72) = v155;
          *(float64x2_t *)(a3 + 88) = v154;
          *(float64x2_t *)(a3 + 104) = v153;
          *(float64x2_t *)(a3 + 120) = v152;
          *(float64x2_t *)(a3 + 136) = v151;
          *(float64x2_t *)(a3 + 152) = v150;
          *(float64x2_t *)(a3 + 168) = v109;
          *(float64_t *)(a3 + 184) = v107.f64[0];
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v104 + 56))(&v272, v104);
          v119 = v272;
          _D2 = v274;
          v121 = v273;
          v106.f64[0] = v276;
          v122 = v275;
LABEL_16:
          v158 = *(double *)(a3 + 40);
          _Q19 = *(float64x2_t *)(a3 + 24);
          v160 = *(double *)(a3 + 64);
          _Q22 = *(float64x2_t *)(a3 + 48);
          v162 = *(double *)(a3 + 88);
          _Q24 = *(float64x2_t *)(a3 + 72);
          v164 = *(double *)(a3 + 112);
          _Q26 = *(float64x2_t *)(a3 + 96);
          v166 = *(double *)(a3 + 136);
          _Q28 = *(float64x2_t *)(a3 + 120);
          v168 = *(double *)(a3 + 160);
          _Q20 = *(float64x2_t *)(a3 + 144);
          v170 = *(double *)(a3 + 184);
          _Q16 = *(float64x2_t *)(a3 + 168);
          v172 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, _Q19.f64[0]), v121, _Q19, 1), v122, v158);
          __asm { FMLA            D29, D2, V19.D[1] }
          v174 = _D29 + v106.f64[0] * v158;
          v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, _Q22.f64[0]), v121, _Q22, 1), v122, v160);
          __asm { FMLA            D29, D2, V22.D[1] }
          v176 = _D29 + v106.f64[0] * v160;
          v177 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, _Q24.f64[0]), v121, _Q24, 1), v122, v162);
          __asm { FMLA            D29, D2, V24.D[1] }
          v179 = _D29 + v106.f64[0] * v162;
          v180 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, _Q26.f64[0]), v121, _Q26, 1), v122, v164);
          __asm { FMLA            D29, D2, V26.D[1] }
          v182 = _D29 + v106.f64[0] * v164;
          v183 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, _Q28.f64[0]), v121, _Q28, 1), v122, v166);
          __asm { FMLA            D29, D2, V28.D[1] }
          v185 = _D29 + v106.f64[0] * v166;
          __asm
          {
            FMLA            D29, D2, V20.D[1]
            FMLA            D1, D2, V16.D[1]
          }
          *(float64x2_t *)(a3 + 24) = v172;
          *(double *)(a3 + 40) = v174;
          *(float64x2_t *)(a3 + 48) = v109;
          *(double *)(a3 + 64) = v176;
          *(float64x2_t *)(a3 + 72) = v177;
          *(double *)(a3 + 88) = v179;
          *(float64x2_t *)(a3 + 96) = v180;
          *(double *)(a3 + 112) = v182;
          *(float64x2_t *)(a3 + 120) = v183;
          *(double *)(a3 + 136) = v185;
          *(float64x2_t *)(a3 + 144) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, _Q20.f64[0]), v121, _Q20, 1), v122, v168);
          *(double *)(a3 + 160) = _D29 + v106.f64[0] * v168;
          *(float64x2_t *)(a3 + 168) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, _Q16.f64[0]), v121, _Q16, 1), v122, v170);
          *(double *)(a3 + 184) = _D1 + v106.f64[0] * v170;
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 4))
    {
      switch(v110)
      {
        case 0:
          v188 = *(float64x2_t *)(v104 + 16);
          _D2 = *(_QWORD *)(v104 + 56);
          v190 = *(float64x2_t *)(v104 + 40);
          v191 = *(double *)(v104 + 80);
          v192 = *(float64x2_t *)(v104 + 64);
          goto LABEL_23;
        case 1:
          v106.f64[0] = *(float64_t *)(a3 + 352);
          v194 = *(float64x2_t *)(a3 + 320);
          v193 = *(float64x2_t *)(a3 + 336);
          v196 = *(float64x2_t *)(a3 + 288);
          v195 = *(float64x2_t *)(a3 + 304);
          v198 = *(float64x2_t *)(a3 + 256);
          v197 = *(float64x2_t *)(a3 + 272);
          v199 = *(float64x2_t *)(a3 + 224);
          v200 = *(float64x2_t *)(a3 + 240);
          v109.f64[0] = *(float64_t *)(v104 + 32);
          v201 = vmulq_f64(*(float64x2_t *)(a3 + 192), *(float64x2_t *)(v104 + 16));
          v202 = vmulq_f64(*(float64x2_t *)(a3 + 208), v109);
          v203.f64[0] = v202.f64[0];
          v203.f64[1] = *(float64_t *)(a3 + 216);
          *(float64x2_t *)(a3 + 192) = v201;
          *(float64x2_t *)(a3 + 208) = v203;
          v204 = (float64x2_t)vextq_s8((int8x16_t)v203, (int8x16_t)v199, 8uLL);
          v203.f64[0] = *(float64_t *)(v104 + 32);
          v205 = (int8x16_t)vmulq_laneq_f64(v203, v199, 1);
          v206 = (int64x2_t)vmulq_f64(v204, *(float64x2_t *)(v104 + 16));
          v207 = vzip1q_s64((int64x2_t)v202, v206);
          *(float64x2_t *)(a3 + 192) = v201;
          *(int64x2_t *)(a3 + 208) = v207;
          v208 = vextq_s8((int8x16_t)v206, v205, 8uLL);
          *(int8x16_t *)(a3 + 224) = v208;
          v202.f64[0] = *(float64_t *)(v104 + 32);
          v209 = *(float64x2_t *)(v104 + 16);
          v210 = vmulq_f64(v200, v209);
          v211 = vmulq_f64(v198, v202);
          v198.f64[0] = v211.f64[0];
          *(float64x2_t *)(a3 + 192) = v201;
          *(int64x2_t *)(a3 + 208) = v207;
          *(int8x16_t *)(a3 + 224) = v208;
          *(float64x2_t *)(a3 + 240) = v210;
          *(float64x2_t *)(a3 + 256) = v198;
          v209.f64[0] = *(float64_t *)(v104 + 32);
          v212 = (int64x2_t)vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v198, (int8x16_t)v197, 8uLL), *(float64x2_t *)(v104 + 16));
          v213 = vextq_s8((int8x16_t)v212, (int8x16_t)vmulq_laneq_f64(v209, v197, 1), 8uLL);
          v214 = vzip1q_s64((int64x2_t)v211, v212);
          *(float64x2_t *)(a3 + 192) = v201;
          *(int64x2_t *)(a3 + 208) = v207;
          *(int8x16_t *)(a3 + 224) = v208;
          *(float64x2_t *)(a3 + 240) = v210;
          *(int64x2_t *)(a3 + 256) = v214;
          *(int8x16_t *)(a3 + 272) = v213;
          v211.f64[0] = *(float64_t *)(v104 + 32);
          v215 = *(float64x2_t *)(v104 + 16);
          v216 = vmulq_f64(v196, v215);
          v217 = (int64x2_t)vmulq_f64(v195, v211);
          *(_QWORD *)&v195.f64[0] = v217.i64[0];
          *(int64x2_t *)(a3 + 256) = v214;
          *(int8x16_t *)(a3 + 272) = v213;
          *(float64x2_t *)(a3 + 192) = v201;
          *(int64x2_t *)(a3 + 208) = v207;
          *(int8x16_t *)(a3 + 224) = v208;
          *(float64x2_t *)(a3 + 240) = v210;
          *(float64x2_t *)(a3 + 288) = v216;
          *(float64x2_t *)(a3 + 304) = v195;
          v215.f64[0] = *(float64_t *)(v104 + 32);
          v218 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v195, (int8x16_t)v194, 8uLL), *(float64x2_t *)(v104 + 16));
          v219 = vzip1q_s64(v217, (int64x2_t)v218);
          *(int64x2_t *)(a3 + 256) = v214;
          *(int8x16_t *)(a3 + 272) = v213;
          *(int8x16_t *)(a3 + 224) = v208;
          *(float64x2_t *)(a3 + 240) = v210;
          *(float64x2_t *)(a3 + 192) = v201;
          *(int64x2_t *)(a3 + 208) = v207;
          *(float64x2_t *)(a3 + 288) = v216;
          *(int64x2_t *)(a3 + 304) = v219;
          v220 = vextq_s8((int8x16_t)v218, (int8x16_t)vmulq_laneq_f64(v215, v194, 1), 8uLL);
          *(int8x16_t *)(a3 + 320) = v220;
          v218.f64[0] = *(float64_t *)(v104 + 32);
          v221 = vmulq_f64(v193, *(float64x2_t *)(v104 + 16));
          *(float64x2_t *)(a3 + 288) = v216;
          *(int64x2_t *)(a3 + 304) = v219;
          *(int64x2_t *)(a3 + 256) = v214;
          *(int8x16_t *)(a3 + 272) = v213;
          *(int8x16_t *)(a3 + 224) = v208;
          *(float64x2_t *)(a3 + 240) = v210;
          *(float64x2_t *)(a3 + 192) = v201;
          *(int64x2_t *)(a3 + 208) = v207;
          *(int8x16_t *)(a3 + 320) = v220;
          *(float64x2_t *)(a3 + 336) = v221;
          *(_QWORD *)(a3 + 352) = *(_OWORD *)&vmulq_f64(v106, v218);
          break;
        case 2:
          v106.f64[0] = *(float64_t *)(v104 + 16);
          v107.f64[0] = *(float64_t *)(a3 + 352);
          v222 = vmulq_n_f64(*(float64x2_t *)(a3 + 336), v106.f64[0]);
          v223 = vmulq_n_f64(*(float64x2_t *)(a3 + 320), v106.f64[0]);
          v224 = vmulq_n_f64(*(float64x2_t *)(a3 + 304), v106.f64[0]);
          v225 = vmulq_n_f64(*(float64x2_t *)(a3 + 288), v106.f64[0]);
          v226 = vmulq_n_f64(*(float64x2_t *)(a3 + 272), v106.f64[0]);
          v227 = vmulq_n_f64(*(float64x2_t *)(a3 + 256), v106.f64[0]);
          v228 = vmulq_n_f64(*(float64x2_t *)(a3 + 240), v106.f64[0]);
          v229 = vmulq_n_f64(*(float64x2_t *)(a3 + 224), v106.f64[0]);
          v230 = vmulq_n_f64(*(float64x2_t *)(a3 + 208), v106.f64[0]);
          *(float64x2_t *)(a3 + 192) = vmulq_n_f64(*(float64x2_t *)(a3 + 192), v106.f64[0]);
          *(float64x2_t *)(a3 + 208) = v230;
          *(float64x2_t *)(a3 + 224) = v229;
          *(float64x2_t *)(a3 + 240) = v228;
          *(float64x2_t *)(a3 + 256) = v227;
          *(float64x2_t *)(a3 + 272) = v226;
          *(float64x2_t *)(a3 + 288) = v225;
          *(float64x2_t *)(a3 + 304) = v224;
          *(float64x2_t *)(a3 + 320) = v223;
          *(float64x2_t *)(a3 + 336) = v222;
          *(_QWORD *)(a3 + 352) = *(_OWORD *)&vmulq_f64(v106, v107);
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v104 + 56))(&v272, v104);
          v188 = v272;
          _D2 = v274;
          v190 = v273;
          v191 = v276;
          v192 = v275;
LABEL_23:
          v231 = *(double *)(a3 + 208);
          _Q19 = *(float64x2_t *)(a3 + 192);
          v233 = *(double *)(a3 + 232);
          _Q22 = *(float64x2_t *)(a3 + 216);
          v235 = *(double *)(a3 + 256);
          _Q24 = *(float64x2_t *)(a3 + 240);
          v237 = v101[1].f64[0];
          _Q26 = *v101;
          v239 = v101[2].f64[1];
          _Q28 = *(float64x2_t *)((char *)v101 + 24);
          v241 = v101[4].f64[0];
          _Q20 = v101[3];
          v243 = v101[5].f64[1];
          _Q16 = *(float64x2_t *)((char *)v101 + 72);
          v245 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, _Q19.f64[0]), v190, _Q19, 1), v192, v231);
          __asm { FMLA            D29, D2, V19.D[1] }
          v247 = _D29 + v191 * v231;
          v248 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, _Q22.f64[0]), v190, _Q22, 1), v192, v233);
          __asm { FMLA            D29, D2, V22.D[1] }
          v250 = _D29 + v191 * v233;
          v251 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, _Q24.f64[0]), v190, _Q24, 1), v192, v235);
          __asm { FMLA            D29, D2, V24.D[1] }
          v253 = _D29 + v191 * v235;
          v254 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, v101->f64[0]), v190, *v101, 1), v192, v237);
          __asm { FMLA            D29, D2, V26.D[1] }
          v256 = _D29 + v191 * v237;
          v257 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, _Q28.f64[0]), v190, _Q28, 1), v192, v239);
          __asm { FMLA            D29, D2, V28.D[1] }
          v259 = _D29 + v191 * v239;
          __asm
          {
            FMLA            D29, D2, V20.D[1]
            FMLA            D1, D2, V16.D[1]
          }
          *(float64x2_t *)(a3 + 192) = v245;
          *(double *)(a3 + 208) = v247;
          *(float64x2_t *)(a3 + 216) = v248;
          *(double *)(a3 + 232) = v250;
          *(float64x2_t *)(a3 + 240) = v251;
          *(double *)(a3 + 256) = v253;
          *v101 = v254;
          v101[1].f64[0] = v256;
          *(float64x2_t *)((char *)v101 + 24) = v257;
          v101[2].f64[1] = v259;
          v101[3] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, _Q20.f64[0]), v190, _Q20, 1), v192, v241);
          v101[4].f64[0] = _D29 + v191 * v241;
          *(float64x2_t *)((char *)v101 + 72) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v188, _Q16.f64[0]), v190, _Q16, 1), v192, v243);
          v101[5].f64[1] = _D1 + v191 * v243;
          break;
        default:
          break;
      }
    }
  }
  _Q1 = *(_OWORD *)(a1 + 80);
  _D3 = *(_QWORD *)(a1 + 88);
  __asm { FMLA            D2, D3, V1.D[1] }
  result = *(double *)(a2 + 8) * (_D2 + *(double *)(a1 + 96) * *(double *)(a1 + 96));
  *(double *)(a1 + 104) = result;
  return result;
}

