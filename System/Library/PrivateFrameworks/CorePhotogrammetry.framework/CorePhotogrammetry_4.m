void sub_23956D588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23956D668(uint64_t a1)
{
  uint64_t v2;
  int v3;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 40);
  sub_2397A1694((pthread_mutex_t *)(v2 + 632));
  v3 = *(unsigned __int8 *)(v2 + 512);
  sub_2397A16B4((pthread_mutex_t *)(v2 + 632));
  if (!v3)
  {
    sub_239575E10(v2 + 456);
    sub_2397A2D24(v2 + 48);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56));
}

void sub_23956D6EC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 296))
  {
    sub_2397A1694((pthread_mutex_t *)(a1 + 344));
    if (*(_QWORD *)(a3 + 24))
    {
      v23 = 0;
      v8 = *(_QWORD *)(a1 + 32);
      if (!v8)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v8 + 48))(&v24, v8, a2, &v23);
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        sub_2394172E0();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v24);
      v10 = v25;
      if (!v25)
        goto LABEL_30;
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
    }
    else
    {
      v24 = 0;
      v19 = *(_QWORD *)(a1 + 32);
      if (!v19)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v19 + 48))(&v21, v19, a2, &v24);
      v10 = v22;
      if (!v22)
        goto LABEL_30;
      v20 = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(v20);
      while (__stlxr(v12 - 1, v20));
    }
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_30:
    sub_2397A16B4((pthread_mutex_t *)(a1 + 344));
    return;
  }
  sub_23956F66C(&v24, a2, a3);
  sub_23956EF70((unsigned int *)(a1 + 56), &v24);
  v6 = v28;
  if (v28 == v27)
  {
    v7 = 4;
    v6 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_14;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_14:
  v13 = v26;
  if (v26)
  {
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v25;
  if (v25)
  {
    v17 = (unint64_t *)&v25->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_23956D904(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23956D95C(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  uint64_t result;

  v2 = (pthread_mutex_t *)(a1 + 232);
  sub_2397A1694((pthread_mutex_t *)(a1 + 232));
  v3 = *(unsigned __int8 *)(a1 + 112);
  result = sub_2397A16B4(v2);
  if (!v3)
  {
    sub_23956ED04(a1 + 56);
    result = *(_QWORD *)(a1 + 40);
    if (result)
      return sub_2397A2D24(result);
  }
  return result;
}

void sub_23956D9C4()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23956D9D8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250ADE420;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_23956DA18(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADE420;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_23956DA40(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  void **v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  os_signpost_id_t spid;
  uint8_t buf[4];
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v7 = (_QWORD *)a1[1];
  spid = *(_QWORD *)(v7[57] + 8 * *a3);
  v9 = *(uint64_t **)a2;
  v8 = *(std::__shared_weak_count **)(a2 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v35 = v8;
  v13 = *(_QWORD **)(a2 + 16);
  v12 = *(std::__shared_weak_count **)(a2 + 24);
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = *v9;
  v16 = v9[1];
  v18 = operator new(0x30uLL);
  v19 = 0xF0F0F0F0F0F0F0F1 * ((v16 - v17) >> 3);
  v18[1] = 0;
  v18[2] = 0;
  *v18 = &off_250ADE468;
  v20 = (void **)(v18 + 3);
  sub_2395547C4(v18 + 3, v19);
  *a4 = v18 + 3;
  a4[1] = v18;
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v21 = v7[56];
    if (os_signpost_enabled(v21))
    {
      *(_DWORD *)buf = 134217984;
      v38 = v6;
      _os_signpost_emit_with_name_impl(&dword_23940C000, v21, OS_SIGNPOST_INTERVAL_BEGIN, spid, "EstimateMasks", "At thread %zu", buf, 0xCu);
    }
  }
  v22 = v7[53] + 16 * v6;
  v23 = *(uint64_t **)v22;
  v24 = *(std::__shared_weak_count **)(v22 + 8);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (!v13)
    goto LABEL_17;
  if (0xF0F0F0F0F0F0F0F1 * ((v9[1] - *v9) >> 3) != (uint64_t)(v13[1] - *v13) >> 4)
  {
    v13 = 0;
LABEL_17:
    v27 = 0;
    goto LABEL_18;
  }
  v27 = 1;
LABEL_18:
  sub_23957A4B4(v23, v9, v20, a1[2], a1[3], v13, v27);
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v28 = v7[56];
    if (os_signpost_enabled(v28))
    {
      *(_DWORD *)buf = 134217984;
      v38 = v6;
      _os_signpost_emit_with_name_impl(&dword_23940C000, v28, OS_SIGNPOST_INTERVAL_END, spid, "EstimateMasks", "At thread %zu", buf, 0xCu);
    }
  }
  if (v24)
  {
    v29 = (unint64_t *)&v24->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v12)
  {
    v31 = (unint64_t *)&v12->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v35)
  {
    v33 = (unint64_t *)&v35->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_23956DD14(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, _Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;
  _Unwind_Exception *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (v13)
    sub_239EBED3C();
  sub_239EC0814((std::__shared_weak_count **)(v12 + 8), a1, a2, (uint64_t)&exception_object);
  v16 = exception_object;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (a9)
  {
    v19 = (unint64_t *)&a9->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
      std::__shared_weak_count::__release_weak(a9);
    }
  }
  _Unwind_Resume(v16);
}

void sub_23956DDDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23956DDEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23956DE1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 88;
        sub_239416DA0(v3 - 80);
        nullsub_4(v5);
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

uint64_t sub_23956DE94(uint64_t a1, int a2)
{
  unsigned int v3;

  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_2397A1618((pthread_mutex_t *)(a1 + 176));
  v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 0x7FFFFFFFu)
  {
    *(_DWORD *)a1 = 0x7FFFFFFF;
    v3 = 0x7FFFFFFF;
  }
  else if (v3 < 2)
  {
    v3 = 1;
  }
  *(_DWORD *)a1 = v3;
  pthread_cond_init((pthread_cond_t *)(a1 + 80), 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 128), 0);
  return a1;
}

void sub_23956DF34(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  sub_23956DFC8(v2);
  v4 = *(void ***)(v1 + 16);
  v5 = *(void ***)(v1 + 24);
  if (v4 != v5)
  {
    do
    {
      v6 = *v4++;
      operator delete(v6);
    }
    while (v4 != v5);
    v8 = *(_QWORD *)(v1 + 16);
    v7 = *(_QWORD *)(v1 + 24);
    if (v7 != v8)
      *(_QWORD *)(v1 + 24) = v7 + ((v8 - v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_23956DFA4(uint64_t a1)
{
  sub_23956CAB0(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23956DFC8(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v17 = (char *)v3 - (char *)v2;
    if (v17 < 0x11)
      goto LABEL_25;
    goto LABEL_24;
  }
  v4 = a1[4];
  v5 = &v2[v4 >> 6];
  v6 = (char *)*v5 + 64 * (v4 & 0x3F);
  v7 = *(uint64_t *)((char *)v2 + (((a1[5] + v4) >> 3) & 0x1FFFFFFFFFFFFFF8)) + 64 * ((a1[5] + v4) & 0x3F);
  if (v6 != (_QWORD *)v7)
  {
    while (1)
    {
      v8 = (_QWORD *)v6[7];
      if (v8 == v6 + 4)
        break;
      if (v8)
      {
        v9 = 5;
LABEL_9:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
      v10 = (std::__shared_weak_count *)v6[3];
      if (!v10)
        goto LABEL_14;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        v13 = (std::__shared_weak_count *)v6[1];
        if (v13)
        {
LABEL_15:
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      else
      {
LABEL_14:
        v13 = (std::__shared_weak_count *)v6[1];
        if (v13)
          goto LABEL_15;
      }
      v6 += 8;
      if ((char *)v6 - (_BYTE *)*v5 == 4096)
      {
        v16 = v5[1];
        ++v5;
        v6 = v16;
      }
      if (v6 == (_QWORD *)v7)
      {
        v2 = (void **)a1[1];
        v3 = (void **)a1[2];
        goto LABEL_23;
      }
    }
    v8 = v6 + 4;
    v9 = 4;
    goto LABEL_9;
  }
LABEL_23:
  a1[5] = 0;
  v17 = (char *)v3 - (char *)v2;
  if (v17 < 0x11)
    goto LABEL_25;
  do
  {
LABEL_24:
    operator delete(*v2);
    v18 = a1[2];
    v2 = (void **)(a1[1] + 8);
    a1[1] = v2;
    v17 = v18 - (_QWORD)v2;
  }
  while (v17 > 0x10);
LABEL_25:
  if (v17 >> 3 == 1)
  {
    v19 = 32;
  }
  else
  {
    if (v17 >> 3 != 2)
      return;
    v19 = 64;
  }
  a1[4] = v19;
}

_QWORD *sub_23956E184(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = (std::__shared_weak_count *)a1[1];
      if (v8)
        goto LABEL_11;
      return a1;
    }
  }
  v8 = (std::__shared_weak_count *)a1[1];
  if (!v8)
    return a1;
LABEL_11:
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_23956E264()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_23956E278(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADE4D0;
  result[1] = v3;
  return result;
}

uint64_t sub_23956E2AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADE4D0;
  a2[1] = v2;
  return result;
}

void sub_23956E2C8(uint64_t a1, uint64_t *a2)
{
  sub_23956E2D4((_QWORD *)(a1 + 8), *a2);
}

void sub_23956E2D4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  _BYTE v32[24];
  _BYTE *v33;
  char v34;
  _BYTE v35[8];
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  _BYTE v38[24];
  _BYTE *v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = (unsigned int *)(*a1 + 56);
  sub_23956E634(v4, (uint64_t)v35);
  while (v40)
  {
    if (v39)
    {
      v29 = a2;
      v5 = *(_QWORD *)(v3 + 32);
      if (!v5)
        sub_2394172E0();
      (*(void (**)(__int128 *__return_ptr, uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v5 + 48))(&v30, v5, v35, &v29);
      if (!v39)
        sub_2394172E0();
      (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v39 + 48))(v39, &v30);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        goto LABEL_15;
      }
    }
    else
    {
      *(_QWORD *)&v30 = a2;
      v9 = *(_QWORD *)(v3 + 32);
      if (!v9)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v9 + 48))(&v27, v9, v35, &v30);
      v6 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
LABEL_15:
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    sub_23956E634(v4, (uint64_t)&v30);
    sub_23956EAD4((uint64_t)v35, &v30);
    v40 = v34;
    v11 = v33;
    if (v33 == v32)
    {
      v11 = v32;
      v12 = 4;
      goto LABEL_21;
    }
    if (v33)
    {
      v12 = 5;
LABEL_21:
      (*(void (**)(void))(*v11 + 8 * v12))();
    }
    v13 = v31;
    if (!v31)
      goto LABEL_26;
    v14 = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
LABEL_27:
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    else
    {
LABEL_26:
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
        goto LABEL_27;
    }
  }
  v19 = v39;
  if (v39 == v38)
  {
    v20 = 4;
    v19 = v38;
    goto LABEL_37;
  }
  if (v39)
  {
    v20 = 5;
LABEL_37:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  v21 = v37;
  if (v37)
  {
    v22 = (unint64_t *)&v37->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v36;
  if (v36)
  {
    v25 = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_23956E5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_23956E184((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23956E5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_23956E184((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23956E5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_23956E184((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_23956E620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_23956E184((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23956E634@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v21;
  __int128 v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6))
  {
LABEL_4:
    sub_23956E8D4(&v21, (_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + ((*((_QWORD *)a1 + 5) >> 3) & 0x1FFFFFFFFFFFFFF8))+ ((*((_QWORD *)a1 + 5) & 0x3FLL) << 6)));
    sub_23956E9A4((uint64_t)(a1 + 2));
    if (*((_QWORD *)a1 + 6) < (unint64_t)*a1)
      pthread_cond_signal((pthread_cond_t *)(a1 + 20));
    sub_23956E8D4((_QWORD *)a2, &v21);
    *(_BYTE *)(a2 + 64) = 1;
    v5 = v24;
    if (v24 == v23)
    {
      v6 = 4;
      v5 = v23;
    }
    else
    {
      if (!v24)
      {
LABEL_11:
        v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
        if (*((_QWORD *)&v22 + 1))
        {
          v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v10 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
        if (!*((_QWORD *)&v21 + 1))
          return sub_2397A16B4(v4);
        v11 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (v12)
          return sub_2397A16B4(v4);
LABEL_20:
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        return sub_2397A16B4(v4);
      }
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_11;
  }
  while (!*((_BYTE *)a1 + 56))
  {
    ++*((_QWORD *)a1 + 9);
    pthread_cond_wait((pthread_cond_t *)(a1 + 32), v4);
    --*((_QWORD *)a1 + 9);
    if (*((_QWORD *)a1 + 6))
      goto LABEL_4;
  }
  v21 = 0u;
  v22 = 0u;
  v24 = 0;
  sub_23956E8D4((_QWORD *)a2, &v21);
  *(_BYTE *)(a2 + 64) = 0;
  v13 = v24;
  if (v24 == v23)
  {
    v14 = 4;
    v13 = v23;
    goto LABEL_25;
  }
  if (v24)
  {
    v14 = 5;
LABEL_25:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
      goto LABEL_20;
  }
  return sub_2397A16B4(v4);
}

void sub_23956E88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;

  sub_23956E184(&a9);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23956E8D4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a2[7];
  if (!v9)
    goto LABEL_10;
  if ((_QWORD *)v9 != a2 + 4)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_10:
    a1[7] = v9;
    return a1;
  }
  a1[7] = a1 + 4;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[7] + 24))(a2[7], a1 + 4);
  return a1;
}

void sub_23956E984(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 24))
    sub_239EBEC08();
  sub_239EC086C((std::__shared_weak_count **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_23956E9A4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int64x2_t v11;

  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((*(_QWORD *)(a1 + 32) >> 3) & 0x1FFFFFFFFFFFFFF8))
                + ((*(_QWORD *)(a1 + 32) & 0x3FLL) << 6));
  v3 = (_QWORD *)v2[7];
  if (v3 == v2 + 4)
  {
    v4 = 4;
    v3 = v2 + 4;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)v2[3];
  if (!v5)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)v2[1];
    if (!v8)
      goto LABEL_16;
  }
  else
  {
LABEL_10:
    v8 = (std::__shared_weak_count *)v2[1];
    if (!v8)
      goto LABEL_16;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_16:
  v11 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_239EC65F0);
  *(int64x2_t *)(a1 + 32) = v11;
  if (v11.i64[0] >= 0x80uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 64;
  }
}

uint64_t sub_23956EAD4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 **v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 **v16;
  __int128 *v17;

  v4 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = a2[1];
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v9 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v13 = (__int128 **)(a1 + 56);
      v12 = *(_QWORD **)(a1 + 56);
      v14 = (_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 56) = 0;
      if (v12 != (_QWORD *)(a1 + 32))
        goto LABEL_11;
LABEL_14:
      v15 = 4;
      v12 = v14;
      goto LABEL_15;
    }
  }
  v13 = (__int128 **)(a1 + 56);
  v12 = *(_QWORD **)(a1 + 56);
  v14 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 56) = 0;
  if (v12 == (_QWORD *)(a1 + 32))
    goto LABEL_14;
LABEL_11:
  if (!v12)
    goto LABEL_16;
  v15 = 5;
LABEL_15:
  (*(void (**)(void))(*v12 + 8 * v15))();
LABEL_16:
  v16 = (__int128 **)a2 + 7;
  v17 = (__int128 *)*((_QWORD *)a2 + 7);
  if (!v17)
  {
    v16 = v13;
    goto LABEL_20;
  }
  if (v17 != a2 + 2)
  {
    *v13 = v17;
LABEL_20:
    *v16 = 0;
    return a1;
  }
  *v13 = (__int128 *)v14;
  (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)*v16 + 24))(*v16, v14);
  return a1;
}

uint64_t sub_23956EC30(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_23956ED04(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  v4 = (void **)(a1 + 8);
  sub_23956DFC8((_QWORD *)(a1 + 8));
  v5 = *(void ***)(a1 + 16);
  v6 = *(void ***)(a1 + 24);
  if (v5 != v6)
  {
    do
    {
      v7 = *v5++;
      operator delete(v7);
    }
    while (v5 != v6);
    v9 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    if (v8 != v9)
      *(_QWORD *)(a1 + 24) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v4)
    operator delete(*v4);
  return a1;
}

uint64_t sub_23956ED04(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v3 = pthread_cond_signal((pthread_cond_t *)(a1 + 80));
      if ((_DWORD)v3)
        sub_239EBED10(v3, v4);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v5 = pthread_cond_signal((pthread_cond_t *)(a1 + 128));
      if ((_DWORD)v5)
        sub_239EBECE4(v5, v6);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  sub_2397A16B4(v2);
  return 1;
}

void sub_23956EE4C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

void sub_23956EE68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23956EE78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23956EEA8(uint64_t a1)
{
  return sub_23956EEB4(a1 + 24);
}

uint64_t sub_23956EEB4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  sub_239916980(a1 + 224);
  sub_239416DA0(a1 + 112);
  nullsub_4(a1 + 104);
  v2 = *(_QWORD **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
  {
    v3 = sub_239420C38(v2);
    MEMORY[0x23B83E31C](v3, 0x10E0C40BC756B95);
  }
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_9:
    operator delete(*(void **)(a1 + 48));
    v4 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (!v4)
      return a1;
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
LABEL_6:
    v5 = sub_23964F698(v4);
    MEMORY[0x23B83E31C](v5, 0x60C40CE5A77A8);
  }
  return a1;
}

uint64_t sub_23956EF70(unsigned int *a1, _QWORD *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  v5 = *((_QWORD *)a1 + 6);
  if (v5 >= *a1)
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      v5 = *((_QWORD *)a1 + 6);
      if (v5 < *a1)
        goto LABEL_4;
    }
    goto LABEL_5;
  }
LABEL_4:
  if (*((_BYTE *)a1 + 56))
  {
LABEL_5:
    v6 = 0;
    goto LABEL_14;
  }
  v7 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  v9 = 8 * (v8 - v7) - 1;
  if (v8 == v7)
    v9 = 0;
  if (v9 == *((_QWORD *)a1 + 5) + v5)
  {
    sub_23956F0B0((uint64_t)(a1 + 2));
    v7 = *((_QWORD *)a1 + 2);
    v8 = *((_QWORD *)a1 + 3);
  }
  if (v8 == v7)
  {
    v11 = 0;
  }
  else
  {
    v10 = *((_QWORD *)a1 + 6) + *((_QWORD *)a1 + 5);
    v11 = (_QWORD *)(*(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v10 & 0x3F) << 6));
  }
  sub_23956E8D4(v11, a2);
  ++*((_QWORD *)a1 + 6);
  pthread_cond_signal((pthread_cond_t *)(a1 + 32));
  v6 = 1;
LABEL_14:
  sub_2397A16B4(v4);
  return v6;
}

void sub_23956F090(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

void sub_23956F0B0(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x40;
  v4 = v2 - 64;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_23956F60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_23956F628(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23956F63C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23956F654(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23956F66C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
    goto LABEL_10;
  if (v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_10:
    a1[7] = v10;
    return a1;
  }
  a1[7] = a1 + 4;
  (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
  return a1;
}

void sub_23956F714(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 24))
    sub_239EBEC08();
  sub_239EC086C((std::__shared_weak_count **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_23956F734(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23956F744(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23956F774(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_23956F784(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  os_signpost_id_t v14;
  uint64_t v15;
  _BYTE v17[16];
  void *__p;
  char v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250ADE588;
  v20[0] = &off_250ADE5B8;
  v20[1] = a1;
  v21 = v20;
  sub_2397A1C7C((uint64_t)v17, a2);
  sub_23956F99C(a1, (uint64_t)v20, (uint64_t)v17, 0x7FFFFFFFu);
  if (v19 < 0)
  {
    operator delete(__p);
    v8 = v21;
    if (v21 != v20)
      goto LABEL_3;
LABEL_6:
    v9 = 4;
    v8 = v20;
    goto LABEL_7;
  }
  v8 = v21;
  if (v21 == v20)
    goto LABEL_6;
LABEL_3:
  if (!v8)
    goto LABEL_8;
  v9 = 5;
LABEL_7:
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
  *(_QWORD *)a1 = &off_250ADE588;
  *(_QWORD *)(a1 + 408) = a3;
  *(_QWORD *)(a1 + 416) = a4;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 424) = os_log_create("com.apple.corepg", "image.imageengine");
  v11 = *(_QWORD *)(a1 + 432);
  v10 = *(_QWORD *)(a1 + 440);
  v12 = (v10 - v11) >> 3;
  if (a2 <= v12)
  {
    if (a2 < v12)
    {
      v10 = v11 + 8 * a2;
      *(_QWORD *)(a1 + 440) = v10;
    }
  }
  else
  {
    sub_23946DAD4(a1 + 432, a2 - v12);
    v11 = *(_QWORD *)(a1 + 432);
    v10 = *(_QWORD *)(a1 + 440);
  }
  if (v10 != v11)
  {
    v13 = 0;
    do
    {
      v14 = os_signpost_id_generate(*(os_log_t *)(a1 + 424));
      v15 = *(_QWORD *)(a1 + 432);
      *(_QWORD *)(v15 + 8 * v13++) = v14;
    }
    while (v13 < (*(_QWORD *)(a1 + 440) - v15) >> 3);
  }
  return a1;
}

void sub_23956F90C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 440) = v4;
    operator delete(v4);
  }
  sub_23956FC54(v1);
  _Unwind_Resume(a1);
}

void sub_23956F930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  if (a17 < 0)
    operator delete(__p);
  if (a22 == &a19)
  {
    (*(void (**)(void))(a19 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a22)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a22 + 40))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_23956F99C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250ADE600;
  v7 = a1 + 8;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8)
  {
    if (v8 == a2)
    {
      *(_QWORD *)(a1 + 32) = v7;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v7);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_DWORD *)a3 <= a4)
    v9 = a4;
  else
    v9 = *(_DWORD *)a3;
  sub_2395705A8(a1 + 56, v9);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)a3;
  if (*(char *)(a3 + 39) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 312), *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v10 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)(a1 + 312) = v10;
  }
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a3 + 40);
  sub_2397A1618((pthread_mutex_t *)(a1 + 344));
  if (*(_QWORD *)(a1 + 296))
  {
    v11 = operator new(0x178uLL);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = &off_250ADB8B0;
    v12 = sub_2397A2A4C((uint64_t)(v11 + 3), a1 + 296);
    v13 = *(std::__shared_weak_count **)(a1 + 48);
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v11;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = *(unint64_t **)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 296);
    v21[0] = &off_250ADE630;
    v21[1] = a1;
    v22 = v21;
    sub_2397A3340(v16, v17, v21, 0);
    v18 = v22;
    if (v22 == v21)
    {
      v19 = 4;
      v18 = v21;
      goto LABEL_22;
    }
    if (v22)
    {
      v19 = 5;
LABEL_22:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
  }
  return a1;
}

void sub_23956FB90(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  sub_239571194(v4);
  sub_239416DA0(v3);
  v6 = *(_QWORD **)(v1 + 32);
  if (v6 == v2)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v2 = *(_QWORD **)(v1 + 32);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v7))(v2);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_23956FC54(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_250ADE600;
  v2 = (pthread_mutex_t *)(a1 + 232);
  sub_2397A1694((pthread_mutex_t *)(a1 + 232));
  v3 = *(unsigned __int8 *)(a1 + 112);
  sub_2397A16B4(v2);
  if (!v3)
  {
    sub_239571268(a1 + 56);
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
      sub_2397A2D24(v4);
  }
  sub_2397A163C((pthread_mutex_t *)(a1 + 344));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  sub_239571194(a1 + 56);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_10:
    v8 = (_QWORD *)(a1 + 8);
    v9 = *(_QWORD **)(a1 + 32);
    if (v9 != (_QWORD *)(a1 + 8))
      goto LABEL_11;
LABEL_14:
    v10 = 4;
    v9 = v8;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = (_QWORD *)(a1 + 8);
  v9 = *(_QWORD **)(a1 + 32);
  if (v9 == (_QWORD *)(a1 + 8))
    goto LABEL_14;
LABEL_11:
  if (v9)
  {
    v10 = 5;
LABEL_15:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

uint64_t sub_23956FD5C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_250ADE588;
  os_release(*(void **)(a1 + 424));
  v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(_QWORD *)(a1 + 440) = v2;
    operator delete(v2);
  }
  return sub_23956FC54(a1);
}

void sub_23956FDA4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_250ADE588;
  os_release(*(void **)(a1 + 424));
  v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(_QWORD *)(a1 + 440) = v2;
    operator delete(v2);
  }
  sub_23956FC54(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23956FE00(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  pthread_mutex_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 296))
  {
    v11 = (pthread_mutex_t *)(a1 + 344);
    sub_2397A1694((pthread_mutex_t *)(a1 + 344));
    if (a3[3])
    {
      v25 = 0;
      v12 = *(_QWORD *)(a1 + 32);
      if (!v12)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v12 + 48))(&v26, v12, a2, &v25);
      v13 = a3[3];
      if (!v13)
        sub_2394172E0();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v26);
      v14 = v27;
      if (!v27)
        goto LABEL_33;
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
    }
    else
    {
      v26 = 0;
      v21 = *(_QWORD *)(a1 + 32);
      if (!v21)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v21 + 48))(&v23, v21, a2, &v26);
      v14 = v24;
      if (!v24)
        goto LABEL_33;
      v22 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v22);
      while (__stlxr(v16 - 1, v22));
    }
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_33:
    sub_2397A16B4(v11);
    return;
  }
  v6 = (std::__shared_weak_count *)a2[1];
  v26 = *a2;
  v27 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v28 = a2[2];
  v9 = v29;
  v10 = a3[3];
  if (!v10)
    goto LABEL_8;
  if ((_QWORD *)v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_8:
    v30 = (_BYTE *)v10;
    goto LABEL_17;
  }
  v30 = v29;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v29);
LABEL_17:
  sub_2395713CC((unsigned int *)(a1 + 56), &v26);
  if (v30 == v29)
  {
    v17 = 4;
  }
  else
  {
    if (!v30)
      goto LABEL_22;
    v17 = 5;
    v9 = v30;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v17))(v9);
LABEL_22:
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_239570038(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

void sub_2395700BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239570888((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2395700D0(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  uint64_t result;

  v2 = (pthread_mutex_t *)(a1 + 232);
  sub_2397A1694((pthread_mutex_t *)(a1 + 232));
  v3 = *(unsigned __int8 *)(a1 + 112);
  result = sub_2397A16B4(v2);
  if (!v3)
  {
    sub_239571268(a1 + 56);
    result = *(_QWORD *)(a1 + 40);
    if (result)
      return sub_2397A2D24(result);
  }
  return result;
}

void sub_239570138()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_23957014C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADE5B8;
  result[1] = v3;
  return result;
}

uint64_t sub_239570180(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADE5B8;
  a2[1] = v2;
  return result;
}

void sub_23957019C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  sub_2395701A8((uint64_t *)(a1 + 8), a2, *a3, a4);
}

void sub_2395701A8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  os_signpost_id_t v14;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  __n128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  os_signpost_id_t v39;
  uint64_t v40;
  uint64_t (**v41)();
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  char *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint8_t buf[4];
  uint64_t v50;
  std::__shared_weak_count *v51;
  _QWORD v52[6];

  v52[4] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v8 = *(_QWORD *)a2;
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  v47 = *(_QWORD *)a2;
  v48 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = *(_DWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 20);
  v13 = *(_QWORD *)(v8 + 112);
  v14 = *(_QWORD *)(*(_QWORD *)(v6 + 432) + 8 * a3);
  v45 = 0;
  v46 = 0;
  v16 = (_DWORD)v13 == v12 && HIDWORD(v13) == v11;
  if (v11 && v12 && !v16)
  {
    v17 = operator new(0xA0uLL);
    v40 = a3;
    v17[1] = 0;
    v17[2] = 0;
    *v17 = &off_250ADD758;
    v17[3] = &off_250ADBEA0;
    v18 = (uint64_t)(v17 + 3);
    sub_239542AE8((_WORD *)v17 + 16);
    v45 = (char *)(v17 + 3);
    v46 = (std::__shared_weak_count *)v17;
    v39 = v14;
    v19 = v14 - 1;
    if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v20 = *(NSObject **)(v6 + 424);
      if (os_signpost_enabled(v20))
      {
        *(_DWORD *)buf = 134217984;
        v50 = v40;
        _os_signpost_emit_with_name_impl(&dword_23940C000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v39, "Resize", "At thread %zu", buf, 0xCu);
      }
    }
    v41 = &off_250ADB778;
    sub_23946936C(v8, (uint64_t)&v42);
    sub_239713FB0(&v41, 0, buf, COERCE_UNSIGNED_INT64((float)((float)v12 / (float)v13)), COERCE_UNSIGNED_INT64((float)((float)v11 / (float)HIDWORD(v13))));
    sub_23953B120(v18, (uint64_t)buf);
    v21 = nullsub_4(v52);
    v22 = v51;
    if (v51)
    {
      v23 = (unint64_t *)&v51->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v21);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    j_nullsub_4_89(buf);
    v25 = nullsub_4(&v44);
    v26 = v43;
    if (v43)
    {
      v27 = (unint64_t *)&v43->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    j_nullsub_4_89(&v41);
    if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v29 = *(NSObject **)(v6 + 424);
      if (os_signpost_enabled(v29))
      {
        *(_DWORD *)buf = 134217984;
        v50 = v40;
        _os_signpost_emit_with_name_impl(&dword_23940C000, v29, OS_SIGNPOST_INTERVAL_END, v39, "Resize", "At thread %zu", buf, 0xCu);
      }
    }
  }
  else
  {
    if (v7)
    {
      v30 = (unint64_t *)&v7->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v45 = (char *)v8;
    v46 = v7;
  }
  v32 = v46;
  *a4 = v45;
  a4[1] = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    a4[2] = v13;
    do
      v35 = __ldaxr(v33);
    while (__stlxr(v35 - 1, v33));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  else
  {
    a4[2] = v13;
  }
  v36 = v48;
  if (v48)
  {
    v37 = (unint64_t *)&v48->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_239570504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;
  uint64_t v18;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v16 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  sub_239422DD0((uint64_t)va3);
  sub_239422DD0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_239570538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  j_nullsub_4_89((uint64_t *)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_23957055C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v14;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  nullsub_4(v11);
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v14);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23957058C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395705A8(uint64_t a1, int a2)
{
  unsigned int v3;

  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_2397A1618((pthread_mutex_t *)(a1 + 176));
  v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 0x7FFFFFFFu)
  {
    *(_DWORD *)a1 = 0x7FFFFFFF;
    v3 = 0x7FFFFFFF;
  }
  else if (v3 < 2)
  {
    v3 = 1;
  }
  *(_DWORD *)a1 = v3;
  pthread_cond_init((pthread_cond_t *)(a1 + 80), 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 128), 0);
  return a1;
}

void sub_239570648(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  sub_2395706DC(v2);
  v4 = *(void ***)(v1 + 16);
  v5 = *(void ***)(v1 + 24);
  if (v4 != v5)
  {
    do
    {
      v6 = *v4++;
      operator delete(v6);
    }
    while (v4 != v5);
    v8 = *(_QWORD *)(v1 + 16);
    v7 = *(_QWORD *)(v1 + 24);
    if (v7 != v8)
      *(_QWORD *)(v1 + 24) = v7 + ((v8 - v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_2395706B8(uint64_t a1)
{
  sub_23956FC54(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2395706DC(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v14 = (char *)v3 - (char *)v2;
    if (v14 < 0x11)
      goto LABEL_21;
    goto LABEL_20;
  }
  v4 = a1[4];
  v5 = &v2[v4 / 0x49];
  v6 = (unint64_t)*v5 + 56 * (v4 % 0x49);
  v7 = (unint64_t)v2[(a1[5] + v4) / 0x49] + 56 * ((a1[5] + v4) % 0x49);
  if (v6 != v7)
  {
    while (1)
    {
      v8 = *(_QWORD **)(v6 + 48);
      if (v8 == (_QWORD *)(v6 + 24))
        break;
      if (v8)
      {
        v9 = 5;
LABEL_9:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
      v10 = *(std::__shared_weak_count **)(v6 + 8);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
          v6 += 56;
          if (v6 - (_QWORD)*v5 != 4088)
            goto LABEL_4;
LABEL_15:
          v13 = (unint64_t)v5[1];
          ++v5;
          v6 = v13;
          goto LABEL_4;
        }
      }
      v6 += 56;
      if (v6 - (_QWORD)*v5 == 4088)
        goto LABEL_15;
LABEL_4:
      if (v6 == v7)
      {
        v2 = (void **)a1[1];
        v3 = (void **)a1[2];
        goto LABEL_19;
      }
    }
    v8 = (_QWORD *)(v6 + 24);
    v9 = 4;
    goto LABEL_9;
  }
LABEL_19:
  a1[5] = 0;
  v14 = (char *)v3 - (char *)v2;
  if (v14 < 0x11)
    goto LABEL_21;
  do
  {
LABEL_20:
    operator delete(*v2);
    v15 = a1[2];
    v2 = (void **)(a1[1] + 8);
    a1[1] = v2;
    v14 = v15 - (_QWORD)v2;
  }
  while (v14 > 0x10);
LABEL_21:
  if (v14 >> 3 == 1)
  {
    v16 = 36;
  }
  else
  {
    if (v14 >> 3 != 2)
      return;
    v16 = 73;
  }
  a1[4] = v16;
}

uint64_t sub_239570888(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_239570924()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239570938(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADE630;
  result[1] = v3;
  return result;
}

uint64_t sub_23957096C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADE630;
  a2[1] = v2;
  return result;
}

void sub_239570988(uint64_t a1, uint64_t *a2)
{
  sub_239570994((_QWORD *)(a1 + 8), *a2);
}

void sub_239570994(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD *v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[24];
  _BYTE *v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = (unsigned int *)(*a1 + 56);
  sub_239570D6C(v4, (uint64_t)&v36);
  while (v40)
  {
    if (v39)
    {
      v30 = a2;
      v5 = *(_QWORD *)(v3 + 32);
      if (!v5)
        sub_2394172E0();
      (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v5 + 48))(&v31, v5, &v36, &v30);
      if (!v39)
        sub_2394172E0();
      (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v39 + 48))(v39, &v31);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        goto LABEL_15;
      }
    }
    else
    {
      *(_QWORD *)&v31 = a2;
      v9 = *(_QWORD *)(v3 + 32);
      if (!v9)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, __int128 *))(*(_QWORD *)v9 + 48))(&v28, v9, &v36, &v31);
      v6 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
LABEL_15:
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    sub_239570D6C(v4, (uint64_t)&v31);
    v11 = v31;
    v31 = 0uLL;
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    v36 = v11;
    if (!v12)
      goto LABEL_21;
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v15 = v39;
      v37 = v32;
      v39 = 0;
      if (v15 == v38)
      {
LABEL_25:
        v15 = v38;
        v16 = 4;
        goto LABEL_26;
      }
    }
    else
    {
LABEL_21:
      v15 = v39;
      v37 = v32;
      v39 = 0;
      if (v15 == v38)
        goto LABEL_25;
    }
    if (!v15)
      goto LABEL_27;
    v16 = 5;
LABEL_26:
    (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_27:
    v17 = &v39;
    if (!v34)
      goto LABEL_30;
    if (v34 != v33)
    {
      v39 = v34;
      v17 = &v34;
LABEL_30:
      *v17 = 0;
      goto LABEL_32;
    }
    v39 = v38;
    (*(void (**)(_QWORD *, _BYTE *))(v33[0] + 24))(v33, v38);
LABEL_32:
    v40 = v35;
    v18 = v34;
    if (v34 == v33)
    {
      v18 = v33;
      v19 = 4;
    }
    else
    {
      if (!v34)
        goto LABEL_37;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_37:
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v23 = v39;
  if (v39 == v38)
  {
    v24 = 4;
    v23 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_47;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_47:
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_239570CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239570D6C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  _QWORD v40[3];
  _QWORD *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6))
  {
LABEL_4:
    v5 = *((_QWORD *)a1 + 5);
    v6 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * (v5 / 0x49));
    v7 = v5 % 0x49;
    v8 = (uint64_t *)(v6 + 56 * v7);
    v37 = *v8;
    v9 = (std::__shared_weak_count *)v8[1];
    v38 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v39 = v8[2];
    v12 = v40;
    v13 = v6 + 56 * v7;
    v16 = *(_QWORD *)(v13 + 48);
    v15 = (_QWORD *)(v13 + 48);
    v14 = v16;
    if (v16)
    {
      if (v14 == v6 + 56 * v7 + 24)
      {
        v41 = v40;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v15 + 24))(*v15, v40);
LABEL_13:
        v17 = *((_QWORD *)a1 + 5);
        v18 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * (v17 / 0x49));
        v19 = v17 % 0x49;
        v20 = v18 + 56 * (v17 % 0x49);
        v21 = (_QWORD *)(v20 + 24);
        v22 = *(_QWORD **)(v20 + 48);
        if (v22 == (_QWORD *)(v20 + 24))
        {
          v23 = 4;
          v22 = v21;
        }
        else
        {
          if (!v22)
          {
LABEL_18:
            v24 = *(std::__shared_weak_count **)(v18 + 56 * v19 + 8);
            if (!v24)
              goto LABEL_22;
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
              v27 = *((_QWORD *)a1 + 6) - 1;
              v32 = *((_QWORD *)a1 + 5) + 1;
              *((_QWORD *)a1 + 5) = v32;
              *((_QWORD *)a1 + 6) = v27;
              if (v32 < 0x92)
              {
LABEL_24:
                if (v27 < *a1)
                  pthread_cond_signal((pthread_cond_t *)(a1 + 20));
                *(_QWORD *)a2 = v37;
                *(_QWORD *)(a2 + 8) = v38;
                if (v38)
                {
                  v29 = (unint64_t *)&v38->__shared_owners_;
                  do
                    v30 = __ldxr(v29);
                  while (__stxr(v30 + 1, v29));
                }
                v31 = v41;
                *(_QWORD *)(a2 + 16) = v39;
                if (v31)
                {
                  if (v31 == v40)
                  {
                    *(_QWORD *)(a2 + 48) = a2 + 24;
                    (*(void (**)(_QWORD *))(v40[0] + 24))(v40);
LABEL_36:
                    *(_BYTE *)(a2 + 56) = 1;
                    if (v41 == v40)
                    {
                      v33 = 4;
                    }
                    else
                    {
                      if (!v41)
                      {
LABEL_41:
                        if (v38)
                        {
                          v34 = (unint64_t *)&v38->__shared_owners_;
                          do
                            v35 = __ldaxr(v34);
                          while (__stlxr(v35 - 1, v34));
                          if (!v35)
                          {
                            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                            std::__shared_weak_count::__release_weak(v38);
                          }
                        }
                        return sub_2397A16B4(v4);
                      }
                      v33 = 5;
                      v12 = v41;
                    }
                    (*(void (**)(_QWORD *))(*v12 + 8 * v33))(v12);
                    goto LABEL_41;
                  }
                  v31 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v31 + 16))(v31);
                }
                *(_QWORD *)(a2 + 48) = v31;
                goto LABEL_36;
              }
            }
            else
            {
LABEL_22:
              v27 = *((_QWORD *)a1 + 6) - 1;
              v28 = *((_QWORD *)a1 + 5) + 1;
              *((_QWORD *)a1 + 5) = v28;
              *((_QWORD *)a1 + 6) = v27;
              if (v28 < 0x92)
                goto LABEL_24;
            }
            operator delete(**((void ***)a1 + 2));
            *((_QWORD *)a1 + 2) += 8;
            v27 = *((_QWORD *)a1 + 6);
            *((_QWORD *)a1 + 5) -= 73;
            goto LABEL_24;
          }
          v23 = 5;
        }
        (*(void (**)(void))(*v22 + 8 * v23))();
        goto LABEL_18;
      }
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    }
    v41 = (_QWORD *)v14;
    goto LABEL_13;
  }
  while (!*((_BYTE *)a1 + 56))
  {
    ++*((_QWORD *)a1 + 9);
    pthread_cond_wait((pthread_cond_t *)(a1 + 32), v4);
    --*((_QWORD *)a1 + 9);
    if (*((_QWORD *)a1 + 6))
      goto LABEL_4;
  }
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  return sub_2397A16B4(v4);
}

void sub_2395710D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;

  sub_239570888((uint64_t)&a9);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_239571194(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_239571268(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  v4 = (void **)(a1 + 8);
  sub_2395706DC((_QWORD *)(a1 + 8));
  v5 = *(void ***)(a1 + 16);
  v6 = *(void ***)(a1 + 24);
  if (v5 != v6)
  {
    do
    {
      v7 = *v5++;
      operator delete(v7);
    }
    while (v5 != v6);
    v9 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    if (v8 != v9)
      *(_QWORD *)(a1 + 24) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v4)
    operator delete(*v4);
  return a1;
}

uint64_t sub_239571268(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v3 = pthread_cond_signal((pthread_cond_t *)(a1 + 80));
      if ((_DWORD)v3)
        sub_239EBED10(v3, v4);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v5 = pthread_cond_signal((pthread_cond_t *)(a1 + 128));
      if ((_DWORD)v5)
        sub_239EBECE4(v5, v6);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  sub_2397A16B4(v2);
  return 1;
}

void sub_2395713B0(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395713CC(unsigned int *a1, _QWORD *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6) < (unint64_t)*a1)
  {
LABEL_4:
    if (!*((_BYTE *)a1 + 56))
    {
      sub_2395714A4((_QWORD *)a1 + 1, a2);
      pthread_cond_signal((pthread_cond_t *)(a1 + 32));
      v5 = 1;
      goto LABEL_7;
    }
  }
  else
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      if (*((_QWORD *)a1 + 6) < (unint64_t)*a1)
        goto LABEL_4;
    }
  }
  v5 = 0;
LABEL_7:
  sub_2397A16B4(v4);
  return v5;
}

void sub_239571484(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395714A4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 73 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_2395715F0((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x49));
  v9 = v7 % 0x49;
  v10 = a2[1];
  v11 = (_QWORD *)(v8 + 56 * (v7 % 0x49));
  *v11 = *a2;
  v11[1] = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v11[2] = a2[2];
  result = a2[6];
  if (result)
  {
    if ((_QWORD *)result == a2 + 3)
    {
      *(_QWORD *)(v8 + 56 * v9 + 48) = v8 + 56 * v9 + 24;
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[6] + 24))(a2[6]);
      goto LABEL_13;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  *(_QWORD *)(v8 + 56 * v9 + 48) = result;
LABEL_13:
  ++a1[5];
  return result;
}

void sub_2395715D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void sub_2395715F0(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x49;
  v4 = v2 - 73;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFF8uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFF8uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF8uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_239571B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_239571B68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239571B7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239571B94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239571BAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239571BBC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239571BEC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_239571BFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE6B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239571C0C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE6B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239571C3C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_239571C50()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239571C64(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250ADE6E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_239571CA4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADE6E8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_239571CCC(uint64_t a1@<X0>, uint64_t *a2@<X1>, void ***a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t shared_owners;
  char *v24;
  unint64_t shared_weak_owners;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  std::__shared_weak_count_vtbl *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  std::__shared_weak_count_vtbl *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  void (__cdecl *v60)(std::__shared_weak_count *__hidden);
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void ***v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  void **v91;
  void **v92;
  char **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  _BYTE v99[15];
  _BYTE *v100;
  void **v101;
  std::__shared_weak_count *v102;
  __int128 v103;
  char v104;
  _QWORD v105[3];
  _QWORD *v106;
  void (__cdecl *v107)(std::__shared_weak_count *__hidden);
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v89 = *(_QWORD *)(a1 + 8);
  v5 = (std::__shared_weak_count *)operator new(0x30uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5[1].__vftable = 0;
  v91 = (void **)&v5[1].__vftable;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE730;
  v5[1].__shared_owners_ = 0;
  v5[1].__shared_weak_owners_ = 0;
  v94 = v5;
  v7 = (std::__shared_weak_count *)operator new(0x30uLL);
  v7->__shared_owners_ = 0;
  v8 = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE768;
  v7[1].__vftable = 0;
  v92 = (void **)&v7[1].__vftable;
  v7[1].__shared_owners_ = 0;
  v7[1].__shared_weak_owners_ = 0;
  v96 = v7;
  v9 = operator new(0x30uLL);
  v86 = a3;
  v87 = a1;
  v9[1] = 0;
  v88 = v9 + 1;
  v9[2] = 0;
  *v9 = &off_250ADE7A0;
  v9[3] = 0;
  v90 = v9 + 3;
  v9[4] = 0;
  v9[5] = 0;
  v97 = (std::__shared_weak_count *)v9;
  v10 = operator new(0x30uLL);
  v10[1] = 0;
  v11 = v10 + 1;
  v10[2] = 0;
  v10[3] = 0;
  v93 = (char **)(v10 + 3);
  *v10 = &off_250ADE7D8;
  v10[4] = 0;
  v10[5] = 0;
  v12 = *a2;
  v13 = a2[1] - *a2;
  v98 = (std::__shared_weak_count *)v10;
  if (v13)
  {
    v14 = 0xCCCCCCCCCCCCCCCDLL * (v13 >> 4);
    if (v14 >> 60)
      sub_2394189F8();
    v15 = (std::__shared_weak_count_vtbl *)operator new(0xCCCCCCCCCCCCCCD0 * (v13 >> 4));
    v16 = 0;
    v7[1].__vftable = v15;
    v7[1].__shared_owners_ = (uint64_t)v15;
    v7[1].__shared_weak_owners_ = (uint64_t)&v15[16 * v14 / 0x28];
    while (1)
    {
      v17 = v12 + 80 * v16;
      v101 = *(void ***)v17;
      v18 = *(std::__shared_weak_count **)(v17 + 8);
      v102 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      LOBYTE(v103) = 0;
      v104 = 0;
      if (*(_BYTE *)(v17 + 32))
      {
        v103 = *(_OWORD *)(v17 + 16);
        v104 = 1;
      }
      v21 = *(_QWORD *)(v17 + 64);
      if (!v21)
        goto LABEL_13;
      if (v21 != v17 + 40)
        break;
      v106 = v105;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v17 + 64) + 24))(*(_QWORD *)(v17 + 64), v105);
LABEL_15:
      v107 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))(v17 + 72);
      v22 = (uint64_t)v101;
      shared_owners = v5[1].__shared_owners_;
      if (shared_owners >= v5[1].__shared_weak_owners_)
      {
        v24 = sub_239572B3C(v91, (uint64_t)v101);
      }
      else
      {
        *(_QWORD *)shared_owners = &off_250ADBEA0;
        sub_239827500(shared_owners + 8, v22 + 8);
        *(_WORD *)(shared_owners + 128) = *(_WORD *)(v22 + 128);
        v24 = (char *)(shared_owners + 136);
        v5[1].__shared_owners_ = shared_owners + 136;
      }
      v5[1].__shared_owners_ = (uint64_t)v24;
      if (v104)
      {
        *(_QWORD *)v99 = *(_QWORD *)((char *)&v103 + 1);
        *(_QWORD *)&v99[7] = *((_QWORD *)&v103 + 1);
        v26 = (_QWORD *)v7[1].__shared_owners_;
        shared_weak_owners = v7[1].__shared_weak_owners_;
        if ((unint64_t)v26 >= shared_weak_owners)
        {
          v28 = *v92;
          v29 = ((char *)v26 - (_BYTE *)*v92) >> 4;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 60)
            sub_2394189F8();
          v31 = shared_weak_owners - (_QWORD)v28;
          if (v31 >> 3 > v30)
            v30 = v31 >> 3;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v32 = 0xFFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            if (v32 >> 60)
              goto LABEL_117;
            v33 = (char *)operator new(16 * v32);
            v7 = v96;
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[16 * v29];
          *v34 = v103;
          *(_QWORD *)(v34 + 1) = *(_QWORD *)((char *)&v103 + 1);
          *((_QWORD *)v34 + 1) = *((_QWORD *)&v103 + 1);
          v35 = (std::__shared_weak_count_vtbl *)v34;
          if (v26 != v28)
          {
            do
            {
              *(_OWORD *)&v35[-1].__get_deleter = *((_OWORD *)v26 - 1);
              v35 = (std::__shared_weak_count_vtbl *)((char *)v35 - 16);
              v26 -= 2;
            }
            while (v26 != v28);
            v26 = *v92;
          }
          v27 = v34 + 16;
          v7[1].__vftable = v35;
          v7[1].__shared_owners_ = (uint64_t)(v34 + 16);
          v7[1].__shared_weak_owners_ = (uint64_t)&v33[16 * v32];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *(_BYTE *)v26 = v103;
          *(_QWORD *)((char *)v26 + 1) = *(_QWORD *)v99;
          v26[1] = *(_QWORD *)&v99[7];
          v27 = v26 + 2;
        }
        v7[1].__shared_owners_ = (uint64_t)v27;
      }
      v36 = v97[1].__shared_owners_;
      if (v36 >= v97[1].__shared_weak_owners_)
      {
        v97[1].__shared_owners_ = sub_239572DBC(v90, v105);
        v38 = v98;
        v40 = (char *)v98[1].__shared_owners_;
        v39 = v98[1].__shared_weak_owners_;
        if ((unint64_t)v40 >= v39)
          goto LABEL_43;
        goto LABEL_69;
      }
      v37 = (uint64_t)v106;
      if (!v106)
        goto LABEL_41;
      if (v106 != v105)
      {
        v37 = (*(uint64_t (**)(void))(*v106 + 16))();
LABEL_41:
        *(_QWORD *)(v36 + 24) = v37;
        goto LABEL_68;
      }
      *(_QWORD *)(v36 + 24) = v36;
      (*(void (**)(_QWORD *, unint64_t))(*v106 + 24))(v106, v36);
LABEL_68:
      v97[1].__shared_owners_ = v36 + 32;
      v97[1].__shared_owners_ = v36 + 32;
      v38 = v98;
      v40 = (char *)v98[1].__shared_owners_;
      v39 = v98[1].__shared_weak_owners_;
      if ((unint64_t)v40 >= v39)
      {
LABEL_43:
        v41 = *v93;
        v42 = v40 - *v93;
        v43 = v42 >> 3;
        v44 = (v42 >> 3) + 1;
        if (v44 >> 61)
          sub_2394189F8();
        v45 = v39 - (_QWORD)v41;
        if (v45 >> 2 > v44)
          v44 = v45 >> 2;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          if (v46 >> 61)
LABEL_117:
            sub_239418A80();
          v47 = operator new(8 * v46);
          v48 = (std::__shared_weak_count_vtbl *)&v47[8 * v43];
          v48->~__shared_weak_count = v107;
          v49 = (uint64_t)&v48->~__shared_weak_count_0;
          if (v40 != v41)
          {
LABEL_52:
            v50 = v40 - 8 - v41;
            if (v50 < 0x58)
            {
              v51 = &v98->__vftable;
              goto LABEL_61;
            }
            v52 = v40 - &v47[v42];
            v51 = &v98->__vftable;
            if (v52 < 0x20)
              goto LABEL_123;
            v53 = (v50 >> 3) + 1;
            v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
            v55 = &v40[-v54];
            v48 = (std::__shared_weak_count_vtbl *)((char *)v48 - v54);
            v56 = &v47[8 * v43 - 16];
            v57 = v40 - 16;
            v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v59 = *(_OWORD *)v57;
              *(v56 - 1) = *((_OWORD *)v57 - 1);
              *v56 = v59;
              v56 -= 2;
              v57 -= 32;
              v58 -= 4;
            }
            while (v58);
            v40 = v55;
            if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_123:
              do
              {
LABEL_61:
                v60 = (void (__cdecl *)(std::__shared_weak_count *__hidden))*((_QWORD *)v40 - 1);
                v40 -= 8;
                v48[-1].__on_zero_shared_weak = v60;
                v48 = (std::__shared_weak_count_vtbl *)((char *)v48 - 8);
              }
              while (v40 != v41);
            }
            v40 = *v93;
            v51[3] = v48;
            v51[4] = v49;
            v51[5] = &v47[8 * v46];
            v5 = v94;
            v7 = v96;
            if (v40)
LABEL_63:
              operator delete(v40);
LABEL_64:
            v51[4] = v49;
            v61 = v106;
            if (v106 == v105)
              goto LABEL_70;
            goto LABEL_65;
          }
        }
        else
        {
          v47 = 0;
          v48 = (std::__shared_weak_count_vtbl *)(8 * v43);
          *(_QWORD *)(8 * v43) = v107;
          v49 = 8 * v43 + 8;
          if (v40 != v41)
            goto LABEL_52;
        }
        v51 = &v98->__vftable;
        v98[1].__vftable = v48;
        v98[1].__shared_owners_ = v49;
        v98[1].__shared_weak_owners_ = (uint64_t)&v47[8 * v46];
        v5 = v94;
        v7 = v96;
        if (v40)
          goto LABEL_63;
        goto LABEL_64;
      }
LABEL_69:
      *(_QWORD *)v40 = v107;
      v5 = v94;
      v7 = v96;
      v38[1].__shared_owners_ = (uint64_t)(v40 + 8);
      v61 = v106;
      if (v106 == v105)
      {
LABEL_70:
        v61 = v105;
        v62 = 4;
        goto LABEL_71;
      }
LABEL_65:
      if (!v61)
        goto LABEL_72;
      v62 = 5;
LABEL_71:
      (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_72:
      if (v102)
      {
        v63 = &v102->__shared_owners_;
        do
          v64 = __ldaxr((unint64_t *)v63);
        while (__stlxr(v64 - 1, (unint64_t *)v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      ++v16;
      v12 = *a2;
      if (v16 >= 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4))
        goto LABEL_77;
    }
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
LABEL_13:
    v106 = (_QWORD *)v21;
    goto LABEL_15;
  }
LABEL_77:
  if (sub_23957A4AC(**(_QWORD **)(*(_QWORD *)(v89 + 24) + 424)) != 1)
    v7[1].__shared_owners_ = (uint64_t)v7[1].__vftable;
  v65 = *(_QWORD *)(v89 + 24);
  v101 = v91;
  v102 = v5;
  do
    v66 = __ldxr(p_shared_owners);
  while (__stxr(v66 + 1, p_shared_owners));
  *(_QWORD *)&v103 = v92;
  *((_QWORD *)&v103 + 1) = v7;
  do
    v67 = __ldxr(v8);
  while (__stxr(v67 + 1, v8));
  do
    v68 = __ldxr(v88);
  while (__stxr(v68 + 1, v88));
  do
    v69 = __ldxr(v11);
  while (__stxr(v69 + 1, v11));
  v100 = 0;
  v70 = (char *)operator new(0x38uLL);
  *(_QWORD *)v70 = &off_250ADE810;
  *(_OWORD *)(v70 + 8) = *(_OWORD *)(v87 + 16);
  *((_QWORD *)v70 + 3) = v90;
  *((_QWORD *)v70 + 4) = v97;
  *((_QWORD *)v70 + 5) = v93;
  *((_QWORD *)v70 + 6) = v98;
  v100 = v70;
  (*(void (**)(uint64_t, void ***, _BYTE *))(*(_QWORD *)v65 + 16))(v65, &v101, v99);
  v71 = v100;
  if (v100 == v99)
  {
    v73 = 4;
    v71 = v99;
    v72 = v98;
    goto LABEL_89;
  }
  v72 = v98;
  if (v100)
  {
    v73 = 5;
LABEL_89:
    (*(void (**)(void))(*v71 + 8 * v73))();
  }
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v75 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v102;
  if (v102)
  {
    v78 = &v102->__shared_owners_;
    do
      v79 = __ldaxr((unint64_t *)v78);
    while (__stlxr(v79 - 1, (unint64_t *)v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  *v86 = v91;
  v86[1] = (void **)&v5->__vftable;
  do
    v80 = __ldxr(p_shared_owners);
  while (__stxr(v80 + 1, p_shared_owners));
  v86[2] = v92;
  v86[3] = (void **)&v7->__vftable;
  do
    v81 = __ldxr(v8);
  while (__stxr(v81 + 1, v8));
  do
    v82 = __ldaxr(v11);
  while (__stlxr(v82 - 1, v11));
  if (!v82)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
  }
  do
    v83 = __ldaxr(v88);
  while (__stlxr(v83 - 1, v88));
  if (!v83)
  {
    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
    std::__shared_weak_count::__release_weak(v97);
  }
  do
    v84 = __ldaxr(v8);
  while (__stlxr(v84 - 1, v8));
  if (!v84)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v85 = __ldaxr(p_shared_owners);
  while (__stlxr(v85 - 1, p_shared_owners));
  if (!v85)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_2395725BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,std::__shared_weak_count *a22,std::__shared_weak_count *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  unint64_t *v37;
  unint64_t *v38;
  char *v39;
  unint64_t *v40;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;

  v42 = a28;
  if (a28 == v39)
  {
    v43 = 4;
    v42 = &a25;
  }
  else
  {
    if (!a28)
    {
LABEL_6:
      v44 = a32;
      if (a32)
      {
        p_shared_owners = (unint64_t *)&a32->__shared_owners_;
        do
          v46 = __ldaxr(p_shared_owners);
        while (__stlxr(v46 - 1, p_shared_owners));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = a30;
      if (a30)
      {
        v48 = (unint64_t *)&a30->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      do
        v50 = __ldaxr(v40);
      while (__stlxr(v50 - 1, v40));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
        std::__shared_weak_count::__release_weak(a23);
      }
      do
        v51 = __ldaxr(a11);
      while (__stlxr(v51 - 1, a11));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
        std::__shared_weak_count::__release_weak(a22);
      }
      do
        v52 = __ldaxr(v38);
      while (__stlxr(v52 - 1, v38));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
        std::__shared_weak_count::__release_weak(a21);
      }
      do
        v53 = __ldaxr(v37);
      while (__stlxr(v53 - 1, v37));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
        std::__shared_weak_count::__release_weak(a19);
      }
      _Unwind_Resume(exception_object);
    }
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
  goto LABEL_6;
}

uint64_t sub_23957284C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)(a1 + 40);
  v3 = *(_QWORD **)(a1 + 64);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2395728E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2395728F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239572924(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 136;
        sub_239416DA0(v3 - 128);
        nullsub_4(v5);
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void sub_23957299C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2395729AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2395729DC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_2395729F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE7A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239572A08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE7A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239572A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v4);
      return;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v1)
      {
        v8 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 32) = v1;
        operator delete(v8);
        return;
      }
    }
  }
}

void sub_239572AE0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE7D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239572AF0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE7D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239572B20(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

char *sub_239572B3C(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v15;
  char *v16;

  v3 = 0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1)
    sub_2394189F8();
  if (0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0xF0F0F0F0F0F0F0)
    v6 = 0x1E1E1E1E1E1E1E1;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x1E1E1E1E1E1E1E1)
      sub_239418A80();
    v7 = (char *)operator new(136 * v6);
  }
  else
  {
    v7 = 0;
  }
  v15 = &v7[136 * v3];
  v16 = &v7[136 * v6];
  *(_QWORD *)v15 = &off_250ADBEA0;
  sub_239827500((uint64_t)(v15 + 8), a2 + 8);
  *((_WORD *)v15 + 64) = *(_WORD *)(a2 + 128);
  v8 = v15 + 136;
  v10 = (char *)*a1;
  v9 = (char *)a1[1];
  if (v9 == *a1)
  {
    *a1 = v15;
    a1[1] = v8;
    a1[2] = v16;
  }
  else
  {
    v11 = 0;
    do
    {
      *(_QWORD *)&v15[v11 - 136] = &off_250ADBEA0;
      sub_239827500((uint64_t)&v15[v11 - 128], (uint64_t)&v9[v11 - 128]);
      *(_WORD *)&v15[v11 - 8] = *(_WORD *)&v9[v11 - 8];
      v11 -= 136;
    }
    while (&v9[v11] != v10);
    v12 = (char *)*a1;
    v9 = (char *)a1[1];
    v13 = &v15[v11];
    v8 = v15 + 136;
    *a1 = v13;
    a1[1] = v15 + 136;
    a1[2] = v16;
    if (v9 != v12)
    {
      do
      {
        sub_239416DA0((uint64_t)(v9 - 128));
        nullsub_4(v9 - 136);
        v9 -= 136;
      }
      while (v9 != v12);
      v9 = v12;
    }
  }
  if (v9)
    operator delete(v9);
  return v8;
}

void sub_239572D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_239572D58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239572D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  nullsub_4(v4 - 136);
  for (; v2; v2 += 136)
  {
    sub_239416DA0(v3 + v2 + 8);
    nullsub_4(v3 + v2);
  }
  sub_239572D58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239572D58(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = i - 136;
    *(_QWORD *)(a1 + 16) = i - 136;
    sub_239416DA0(i - 128);
    nullsub_4(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_239572DBC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char **v14;
  char **v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_2394189F8();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 59)
      sub_239418A80();
    v8 = (char *)operator new(32 * v7);
    v9 = (uint64_t)&v8[32 * v3];
    v24 = v9;
    v25 = v9;
    v27 = &v8[32 * v7];
    v10 = (_QWORD *)a2[3];
    if (v10)
      goto LABEL_10;
LABEL_13:
    *(_QWORD *)(v9 + 24) = 0;
    goto LABEL_14;
  }
  v9 = 32 * v3;
  v24 = v9;
  v25 = v9;
  v27 = 0;
  v10 = (_QWORD *)a2[3];
  if (!v10)
    goto LABEL_13;
LABEL_10:
  if (v10 == a2)
  {
    *(_QWORD *)(v9 + 24) = v9;
    (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v9);
    v9 = v24;
    v11 = v25 + 32;
    v26 = v25 + 32;
    v13 = (char *)*a1;
    v12 = (char *)a1[1];
    if (v12 != (char *)*a1)
      goto LABEL_15;
LABEL_25:
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v27;
    goto LABEL_33;
  }
  *(_QWORD *)(v9 + 24) = (*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
LABEL_14:
  v11 = v9 + 32;
  v26 = v9 + 32;
  v13 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == (char *)*a1)
    goto LABEL_25;
LABEL_15:
  v14 = (char **)(v9 - 8);
  do
  {
    v16 = (char *)*((_QWORD *)v12 - 1);
    v17 = v12 - 32;
    v15 = v14;
    if (!v16)
      goto LABEL_17;
    if (v17 != v16)
    {
      *v14 = v16;
      v15 = (char **)(v12 - 8);
LABEL_17:
      *v15 = 0;
      goto LABEL_18;
    }
    *v14 = (char *)(v14 - 3);
    (*(void (**)(_QWORD))(**((_QWORD **)v12 - 1) + 24))(*((_QWORD *)v12 - 1));
LABEL_18:
    v14 -= 4;
    v12 = v17;
  }
  while (v17 != v13);
  v18 = (char *)*a1;
  v12 = (char *)a1[1];
  v19 = v14 + 1;
  v11 = v26;
  *a1 = (uint64_t)v19;
  a1[1] = v26;
  a1[2] = (uint64_t)v27;
  if (v12 != v18)
  {
    while (1)
    {
      v22 = v12 - 32;
      v20 = (char *)*((_QWORD *)v12 - 1);
      if (v22 == v20)
      {
        v20 = v22;
        v21 = 4;
      }
      else
      {
        if (!v20)
          goto LABEL_28;
        v21 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_28:
      v12 = v22;
      if (v22 == v18)
      {
        v12 = v18;
        break;
      }
    }
  }
LABEL_33:
  if (v12)
    operator delete(v12);
  return v11;
}

void sub_239572FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239572FE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239572FE8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v6 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      v7 = (_QWORD *)*(v2 - 1);
      if (v7 == v6)
      {
        v5 = 4;
      }
      else
      {
        if (!v7)
          goto LABEL_7;
        v6 = v7;
        v5 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v5))();
      v6 = *(_QWORD **)(a1 + 16);
LABEL_7:
      v2 = v6;
    }
    while (v6 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_239573064(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_250ADE810;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[4];
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = (std::__shared_weak_count *)a1[4];
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_23957311C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_250ADE810;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x23B83E31CLL);
}

char *sub_2395731D4(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (char *)operator new(0x38uLL);
  *(_QWORD *)result = &off_250ADE810;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 6) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t sub_23957324C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a2 = &off_250ADE810;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_2395732A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_239573340(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)__p[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[4];
      if (v5)
        goto LABEL_6;
LABEL_9:
      operator delete(__p);
      return;
    }
  }
  v5 = (std::__shared_weak_count *)__p[4];
  if (!v5)
    goto LABEL_9;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    goto LABEL_9;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  operator delete(__p);
}

void sub_2395733EC(_QWORD *a1, uint64_t **a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _BYTE *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  _QWORD *v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v3 = (std::__shared_weak_count *)a1[4];
  v44 = (_QWORD *)a1[3];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = (std::__shared_weak_count *)a1[6];
  v43 = (_QWORD *)a1[5];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a2;
  if (*a2)
    v10 = v43 == 0;
  else
    v10 = 1;
  if (!v10 && v44 != 0)
  {
    v12 = (uint64_t)(v44[1] - *v44) >> 5;
    v14 = *v9;
    v13 = v9[1];
    if (v12 == 0x2E8BA2E8BA2E8BA3 * ((v13 - *v9) >> 3) && v13 != v14 && v12 == (uint64_t)(v43[1] - *v43) >> 3)
    {
      v20 = 0;
      v41 = a1[1];
      while (1)
      {
        v21 = (std::__shared_weak_count *)operator new(0x70uLL);
        v21->__shared_owners_ = 0;
        v22 = (unint64_t *)&v21->__shared_owners_;
        v21->__shared_weak_owners_ = 0;
        v21->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB878;
        v21[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB628;
        sub_23982619C((uint64_t)&v21[1].__shared_owners_, v14 + 88 * v20 + 8);
        LOWORD(v21[4].__shared_owners_) = *(_WORD *)(v14 + 88 * v20 + 80);
        v23 = *(_QWORD *)(*v43 + 8 * v20);
        v24 = *(_QWORD *)(v41 + 56);
        v45 = v21 + 1;
        v46 = v21;
        do
          v25 = __ldxr(v22);
        while (__stxr(v25 + 1, v22));
        v47 = v23;
        v26 = (_QWORD *)(*v44 + 32 * v20);
        v48 = a1[2];
        v27 = (_QWORD *)v26[3];
        if (!v27)
          break;
        if (v27 != v26)
        {
          v28 = (*(uint64_t (**)(_QWORD))(*v27 + 16))(v26[3]);
LABEL_38:
          v50 = (_QWORD *)v28;
          goto LABEL_40;
        }
        v50 = v49;
        (*(void (**)(_QWORD *, _QWORD *))(*v26 + 24))(v26, v49);
LABEL_40:
        v52 = 0;
        v29 = operator new(0x30uLL);
        v30 = v29;
        v31 = v48;
        v32 = v50;
        *v29 = &off_250ADE858;
        v29[1] = v31;
        if (v32)
        {
          if (v32 == v49)
          {
            v29[5] = v29 + 2;
            (*(void (**)(_QWORD *))(v49[0] + 24))(v49);
          }
          else
          {
            v29[5] = v32;
            v50 = 0;
          }
        }
        else
        {
          v29[5] = 0;
        }
        v52 = v30;
        (*(void (**)(uint64_t, std::__shared_weak_count **, _BYTE *))(*(_QWORD *)v24 + 16))(v24, &v45, v51);
        v33 = v52;
        if (v52 == v51)
        {
          v33 = v51;
          v34 = 4;
        }
        else
        {
          if (!v52)
            goto LABEL_50;
          v34 = 5;
        }
        (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_50:
        v35 = v50;
        if (v50 == v49)
        {
          v35 = v49;
          v36 = 4;
        }
        else
        {
          if (!v50)
            goto LABEL_55;
          v36 = 5;
        }
        (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_55:
        v37 = v46;
        if (v46)
        {
          v38 = (unint64_t *)&v46->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        do
          v40 = __ldaxr(v22);
        while (__stlxr(v40 - 1, v22));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        ++v20;
        v14 = **a2;
        if (v20 >= 0x2E8BA2E8BA2E8BA3 * (((*a2)[1] - v14) >> 3))
          goto LABEL_19;
      }
      v28 = 0;
      goto LABEL_38;
    }
  }
LABEL_19:
  if (v6)
  {
    v16 = (unint64_t *)&v6->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2395737E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239573964(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250ADE858;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2395739C0(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250ADE858;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239573A2C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_250ADE858;
  v2[1] = v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 16)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
LABEL_4:
    v2[5] = v4;
    return v2;
  }
  v2[5] = v2 + 2;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_239573AB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239573AC4(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADE858;
  a2[1] = v3;
  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    if (v4 == result + 16)
    {
      a2[5] = a2 + 2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 40));
      a2[5] = result;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return result;
}

uint64_t sub_239573B48(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 16;
  result = *(_QWORD *)(a1 + 40);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_239573B84(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *sub_239573BD4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  double v11;
  double v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __n128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *result;
  uint64_t v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  _BYTE v30[16];
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = a1 + 16;
    if (v4 == a1 + 16)
    {
      v36 = v35;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 24))(v5, v35);
    }
    else
    {
      v36 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    v36 = 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *a2;
  v7 = a2[1];
  v33 = *a2;
  v34 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if ((*(_DWORD *)(v6 + 72) & 0x80000000) == 0)
  {
    v26 = &off_250ADB778;
    sub_2394247FC(v8, (uint64_t)&v27);
    *(float *)&v11 = (float)*(int *)(v6 + 72);
    *(float *)&v12 = (float)*(int *)(v6 + 76);
    sub_239713AF4((uint64_t)&v26, (uint64_t)v30, v11, v12);
    sub_239422CF0(v8, (uint64_t)v30);
    v13 = nullsub_4(&v32);
    v14 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    j_nullsub_4_89(v30);
    v17 = nullsub_4(&v29);
    v18 = v28;
    if (v28)
    {
      v19 = (unint64_t *)&v28->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v17);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    j_nullsub_4_89(&v26);
  }
  if (!v36)
    sub_2394172E0();
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v36 + 48))(v36, &v33);
  v21 = v34;
  if (v34)
  {
    v22 = (unint64_t *)&v34->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      result = v36;
      if (v36 != v35)
        goto LABEL_27;
LABEL_30:
      v25 = 4;
      result = v35;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v25))();
    }
  }
  result = v36;
  if (v36 == v35)
    goto LABEL_30;
LABEL_27:
  if (!result)
    return result;
  v25 = 5;
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v25))();
}

void sub_239573E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  __n128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;

  nullsub_4(v20 + 32);
  if (a20)
    sub_239EBED3C();
  j_nullsub_4_89(&a18);
  v23 = nullsub_4(&a14);
  v24 = a12;
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v24->__on_zero_shared)(v24, v23);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  j_nullsub_4_89(&a10);
  v27 = *(std::__shared_weak_count **)(v21 - 80);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(_QWORD *)(v21 - 48);
  if (v30 == v21 - 72)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v21 - 72) + 32))(v21 - 72);
    _Unwind_Resume(a1);
  }
  if (!v30)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
  _Unwind_Resume(a1);
}

_QWORD *sub_239573F28(_QWORD *a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5, unsigned int a6)
{
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_250ADE8A0;
  v12 = a1 + 1;
  v13 = (_QWORD *)a3[3];
  if (v13)
  {
    if (v13 == a3)
    {
      a1[4] = v12;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a3[3] + 24))(a3[3], v12);
    }
    else
    {
      a1[4] = (*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
    }
  }
  else
  {
    a1[4] = 0;
  }
  a1[5] = a2;
  sub_2397A2A50((uint64_t)(a1 + 6), a4, 0);
  a1[50] = 0;
  a1[51] = 0;
  a1[52] = 0;
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v14 = (char *)operator new(24 * a4);
    a1[50] = v14;
    a1[52] = &v14[24 * a4];
    bzero(v14, 24 * ((24 * a4 - 24) / 0x18) + 24);
    a1[51] = &v14[24 * ((24 * a4 - 24) / 0x18) + 24];
  }
  v15 = *(_QWORD *)(a5 + 24);
  if (!v15)
    goto LABEL_12;
  if (v15 != a5)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
LABEL_12:
    a1[56] = v15;
    goto LABEL_14;
  }
  a1[56] = a1 + 53;
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24), a1 + 53);
LABEL_14:
  if ((int)a4 * (int)a2 <= a6)
    v16 = a6;
  else
    v16 = a4 * a2;
  sub_239574348((uint64_t)(a1 + 57), v16);
  v17 = v26;
  v18 = a3[3];
  if (!v18)
    goto LABEL_20;
  if ((_QWORD *)v18 != a3)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
LABEL_20:
    v27 = (_QWORD *)v18;
    goto LABEL_22;
  }
  v27 = v26;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v26);
LABEL_22:
  v29 = 0;
  v19 = operator new(0x30uLL);
  v20 = v19;
  v21 = v27;
  *v19 = &off_250ADE8C0;
  v19[1] = a1;
  if (v21)
  {
    if (v21 == v26)
    {
      v19[5] = v19 + 2;
      (*(void (**)(_QWORD *))(v26[0] + 24))(v26);
    }
    else
    {
      v19[5] = v21;
      v27 = 0;
    }
  }
  else
  {
    v19[5] = 0;
  }
  v29 = v20;
  sub_2397A3340(a1 + 6, a4, v28, 0);
  v22 = v29;
  if (v29 == v28)
  {
    v23 = 4;
    v22 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (v27 == v26)
  {
    v24 = 4;
    goto LABEL_36;
  }
  if (v27)
  {
    v24 = 5;
    v17 = v27;
LABEL_36:
    (*(void (**)(_QWORD *))(*v17 + 8 * v24))(v17);
  }
  return a1;
}

void sub_239574220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239574348(uint64_t a1, int a2)
{
  unsigned int v3;

  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_2397A1618((pthread_mutex_t *)(a1 + 176));
  v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 0x7FFFFFFFu)
  {
    *(_DWORD *)a1 = 0x7FFFFFFF;
    v3 = 0x7FFFFFFF;
  }
  else if (v3 < 2)
  {
    v3 = 1;
  }
  *(_DWORD *)a1 = v3;
  pthread_cond_init((pthread_cond_t *)(a1 + 80), 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 128), 0);
  return a1;
}

void sub_2395743E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  sub_2395745A4(v2);
  v4 = *(void ***)(v1 + 16);
  v5 = *(void ***)(v1 + 24);
  if (v4 != v5)
  {
    do
    {
      v6 = *v4++;
      operator delete(v6);
    }
    while (v4 != v5);
    v8 = *(_QWORD *)(v1 + 16);
    v7 = *(_QWORD *)(v1 + 24);
    if (v7 != v8)
      *(_QWORD *)(v1 + 24) = v7 + ((v8 - v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_239574458(uint64_t a1)
{
  sub_239575F74(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23957447C(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
LABEL_23:
      v1[1] = v2;
      operator delete(v5);
      return;
    }
    v6 = (void **)v1[1];
    while (1)
    {
      v9 = (char *)*(v6 - 3);
      v6 -= 3;
      v8 = v9;
      if (!v9)
        goto LABEL_6;
      v10 = (char *)*(v4 - 2);
      v7 = v8;
      if (v10 != v8)
        break;
LABEL_5:
      *(v4 - 2) = v8;
      operator delete(v7);
LABEL_6:
      v4 = v6;
      if (v6 == v2)
      {
        v5 = **a1;
        goto LABEL_23;
      }
    }
    while (1)
    {
      v11 = (char *)*((_QWORD *)v10 - 2);
      if (v11 == v10 - 40)
        break;
      if (v11)
      {
        v12 = 5;
LABEL_15:
        (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)v10 - 9);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v10 -= 80;
      if (v10 == v8)
      {
        v7 = *v6;
        goto LABEL_5;
      }
    }
    v11 = v10 - 40;
    v12 = 4;
    goto LABEL_15;
  }
}

void sub_2395745A4(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v14 = (char *)v3 - (char *)v2;
    if (v14 < 0x11)
      goto LABEL_21;
    goto LABEL_20;
  }
  v4 = a1[4];
  v5 = &v2[v4 / 0x33];
  v6 = (unint64_t)*v5 + 80 * (v4 % 0x33);
  v7 = (unint64_t)v2[(a1[5] + v4) / 0x33] + 80 * ((a1[5] + v4) % 0x33);
  if (v6 != v7)
  {
    while (1)
    {
      v8 = *(_QWORD **)(v6 + 64);
      if (v8 == (_QWORD *)(v6 + 40))
        break;
      if (v8)
      {
        v9 = 5;
LABEL_9:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
      v10 = *(std::__shared_weak_count **)(v6 + 8);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
          v6 += 80;
          if (v6 - (_QWORD)*v5 != 4080)
            goto LABEL_4;
LABEL_15:
          v13 = (unint64_t)v5[1];
          ++v5;
          v6 = v13;
          goto LABEL_4;
        }
      }
      v6 += 80;
      if (v6 - (_QWORD)*v5 == 4080)
        goto LABEL_15;
LABEL_4:
      if (v6 == v7)
      {
        v2 = (void **)a1[1];
        v3 = (void **)a1[2];
        goto LABEL_19;
      }
    }
    v8 = (_QWORD *)(v6 + 40);
    v9 = 4;
    goto LABEL_9;
  }
LABEL_19:
  a1[5] = 0;
  v14 = (char *)v3 - (char *)v2;
  if (v14 < 0x11)
    goto LABEL_21;
  do
  {
LABEL_20:
    operator delete(*v2);
    v15 = a1[2];
    v2 = (void **)(a1[1] + 8);
    a1[1] = v2;
    v14 = v15 - (_QWORD)v2;
  }
  while (v14 > 0x10);
LABEL_21:
  if (v14 >> 3 == 1)
  {
    v16 = 25;
  }
  else
  {
    if (v14 >> 3 != 2)
      return;
    v16 = 51;
  }
  a1[4] = v16;
}

_QWORD *sub_239574750(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250ADE8C0;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2395747AC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250ADE8C0;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239574818(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_250ADE8C0;
  v2[1] = v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 16)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
LABEL_4:
    v2[5] = v4;
    return v2;
  }
  v2[5] = v2 + 2;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_23957489C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395748B0(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADE8C0;
  a2[1] = v3;
  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    if (v4 == result + 16)
    {
      a2[5] = a2 + 2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 40));
      a2[5] = result;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return result;
}

uint64_t sub_239574934(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 16;
  result = *(_QWORD *)(a1 + 40);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_239574970(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_2395749C0(uint64_t a1, uint64_t *a2)
{
  sub_2395749CC((_QWORD *)(a1 + 8), *a2);
}

void sub_2395749CC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char **v5;
  char **v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  _BYTE v74[24];
  _BYTE *v75;
  char v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  char v80;
  _BYTE v81[24];
  _BYTE *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 400);
  v5 = (char **)(v4 + 24 * a2);
  sub_239575150(v5, *(_QWORD *)(*a1 + 40));
  v6 = v5 + 1;
  v7 = v5[1];
  v8 = *v5;
  while (v7 != v8)
  {
    v9 = (char *)*((_QWORD *)v7 - 2);
    if (v9 == v7 - 40)
    {
      v9 = v7 - 40;
      v10 = 4;
    }
    else
    {
      if (!v9)
        goto LABEL_9;
      v10 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_9:
    v11 = (std::__shared_weak_count *)*((_QWORD *)v7 - 9);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v7 -= 80;
  }
  *v6 = v8;
  sub_239575364((unsigned int *)(v3 + 456), (uint64_t)&v77);
  if (v84)
  {
    v14 = (_QWORD *)(v4 + 24 * a2 + 16);
    do
    {
      v15 = *v6;
      if ((unint64_t)*v6 >= *v14)
      {
        v20 = sub_239575878((void **)v5, (uint64_t)&v77);
        goto LABEL_30;
      }
      *(_QWORD *)v15 = v77;
      v16 = v78;
      *((_QWORD *)v15 + 1) = v78;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v15[16] = 0;
      v15[32] = 0;
      if (v80)
      {
        *((_OWORD *)v15 + 1) = v79;
        v15[32] = 1;
      }
      v19 = (uint64_t)v82;
      if (v82)
      {
        if (v82 == v81)
        {
          *((_QWORD *)v15 + 8) = v15 + 40;
          (*(void (**)(_BYTE *))(*(_QWORD *)v82 + 24))(v82);
          goto LABEL_29;
        }
        v19 = (*(uint64_t (**)(void))(*(_QWORD *)v82 + 16))();
      }
      *((_QWORD *)v15 + 8) = v19;
LABEL_29:
      *((_QWORD *)v15 + 9) = v83;
      v20 = v15 + 80;
      *v6 = v15 + 80;
LABEL_30:
      *v6 = v20;
      if (0xCCCCCCCCCCCCCCCDLL * ((v20 - *v5) >> 4) != *(_QWORD *)(v3 + 40))
        goto LABEL_66;
      if (*(_QWORD *)(v3 + 448))
      {
        v71 = a2;
        v21 = a1[4];
        if (!v21)
          sub_2394172E0();
        (*(void (**)(__int128 *__return_ptr, uint64_t, char **, uint64_t *))(*(_QWORD *)v21 + 48))(&v72, v21, v5, &v71);
        v22 = *(_QWORD *)(v3 + 448);
        if (!v22)
          sub_2394172E0();
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v22 + 48))(v22, &v72);
        v23 = v73;
        if (!v73)
          goto LABEL_38;
        v24 = (unint64_t *)&v73->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
          v26 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
          if (*((_QWORD *)&v72 + 1))
          {
LABEL_39:
            v27 = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            goto LABEL_50;
          }
        }
        else
        {
LABEL_38:
          v26 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
          if (*((_QWORD *)&v72 + 1))
            goto LABEL_39;
        }
      }
      else
      {
        *(_QWORD *)&v72 = a2;
        v29 = a1[4];
        if (!v29)
          sub_2394172E0();
        (*(void (**)(uint64_t *__return_ptr, uint64_t, char **, __int128 *))(*(_QWORD *)v29 + 48))(&v68, v29, v5, &v72);
        v30 = v70;
        if (!v70)
          goto LABEL_47;
        v31 = (unint64_t *)&v70->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
          v26 = v69;
          if (v69)
          {
LABEL_48:
            v33 = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(v33);
            while (__stlxr(v28 - 1, v33));
LABEL_50:
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
        }
        else
        {
LABEL_47:
          v26 = v69;
          if (v69)
            goto LABEL_48;
        }
      }
      v34 = *v6;
      v35 = *v5;
      while (v34 != v35)
      {
        v36 = (char *)*((_QWORD *)v34 - 2);
        if (v36 == v34 - 40)
        {
          v36 = v34 - 40;
          v37 = 4;
          goto LABEL_59;
        }
        if (v36)
        {
          v37 = 5;
LABEL_59:
          (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
        }
        v38 = (std::__shared_weak_count *)*((_QWORD *)v34 - 9);
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v34 -= 80;
      }
      *v6 = v35;
LABEL_66:
      sub_239575364((unsigned int *)(v3 + 456), (uint64_t)&v72);
      sub_239575BAC((uint64_t)&v77, &v72);
      v84 = v76;
      v41 = v75;
      if (v75 == v74)
      {
        v41 = v74;
        v42 = 4;
LABEL_70:
        (*(void (**)(void))(*v41 + 8 * v42))();
      }
      else if (v75)
      {
        v42 = 5;
        goto LABEL_70;
      }
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
    while (v84);
  }
  if (*v5 == *v6)
    goto LABEL_103;
  if (*(_QWORD *)(v3 + 448))
  {
    v71 = a2;
    v46 = a1[4];
    if (!v46)
      sub_2394172E0();
    (*(void (**)(__int128 *__return_ptr, uint64_t, char **, uint64_t *))(*(_QWORD *)v46 + 48))(&v72, v46, v5, &v71);
    v47 = *(_QWORD *)(v3 + 448);
    if (!v47)
      sub_2394172E0();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v47 + 48))(v47, &v72);
    v48 = v73;
    if (v73)
    {
      v49 = (unint64_t *)&v73->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      goto LABEL_102;
    }
LABEL_103:
    v59 = v82;
    if (v82 != v81)
      goto LABEL_104;
LABEL_107:
    v60 = 4;
    v59 = v81;
    goto LABEL_108;
  }
  *(_QWORD *)&v72 = a2;
  v54 = a1[4];
  if (!v54)
    sub_2394172E0();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, char **, __int128 *))(*(_QWORD *)v54 + 48))(&v65, v54, v5, &v72);
  v55 = v67;
  if (v67)
  {
    v56 = (unint64_t *)&v67->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v51 = v66;
  if (!v66)
    goto LABEL_103;
  v58 = (unint64_t *)&v66->__shared_owners_;
  do
    v53 = __ldaxr(v58);
  while (__stlxr(v53 - 1, v58));
LABEL_102:
  if (v53)
    goto LABEL_103;
  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
  std::__shared_weak_count::__release_weak(v51);
  v59 = v82;
  if (v82 == v81)
    goto LABEL_107;
LABEL_104:
  if (v59)
  {
    v60 = 5;
LABEL_108:
    (*(void (**)(void))(*v59 + 8 * v60))();
  }
  v61 = v78;
  if (v78)
  {
    v62 = (unint64_t *)&v78->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_239575078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_23957284C((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_23957508C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_239420490((uint64_t)&a21);
  sub_23957284C((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_239575128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_23957284C((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_23957513C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_23957284C((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_239575150(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v2 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= a2)
    return;
  if (a2 >= 0x333333333333334)
    sub_2394189F8();
  v4 = a1[1];
  v5 = 80 * a2;
  v6 = (char *)operator new(80 * a2);
  v7 = &v6[v5];
  v8 = &v6[v4 - v2];
  if (v4 != v2)
  {
    v9 = 0;
    v10 = v4;
    while (1)
    {
      v12 = &v8[v9];
      v13 = &v4[v9];
      *((_OWORD *)v12 - 5) = *(_OWORD *)&v4[v9 - 80];
      *((_QWORD *)v13 - 10) = 0;
      *((_QWORD *)v13 - 9) = 0;
      v8[v9 - 64] = 0;
      *(v12 - 48) = 0;
      if (v4[v9 - 48])
      {
        *(_OWORD *)&v8[v9 - 64] = *((_OWORD *)v13 - 4);
        *(v12 - 48) = 1;
      }
      v14 = (char *)*((_QWORD *)v13 - 2);
      if (v14)
      {
        v15 = &v8[v9];
        if (&v4[v9 - 40] == v14)
        {
          *((_QWORD *)v15 - 2) = v12 - 40;
          (*(void (**)(char *))(*(_QWORD *)v14 + 24))(v14);
          goto LABEL_7;
        }
        v11 = v10 - 16;
        *((_QWORD *)v15 - 2) = v14;
      }
      else
      {
        v11 = &v8[v9 - 16];
      }
      *(_QWORD *)v11 = 0;
LABEL_7:
      v10 -= 80;
      *(_QWORD *)&v8[v9 - 8] = *(_QWORD *)&v4[v9 - 8];
      v9 -= 80;
      if (&v4[v9] == v2)
      {
        v16 = *a1;
        v2 = a1[1];
        *a1 = &v8[v9];
        a1[1] = v8;
        a1[2] = v7;
        if (v2 == v16)
        {
LABEL_28:
          if (v2)
            goto LABEL_29;
          return;
        }
        while (2)
        {
          v17 = (char *)*((_QWORD *)v2 - 2);
          if (v17 == v2 - 40)
          {
            v17 = v2 - 40;
            v18 = 4;
LABEL_21:
            (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
          }
          else if (v17)
          {
            v18 = 5;
            goto LABEL_21;
          }
          v19 = (std::__shared_weak_count *)*((_QWORD *)v2 - 9);
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(p_shared_owners);
            while (__stlxr(v21 - 1, p_shared_owners));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v2 -= 80;
          if (v2 == v16)
          {
            v2 = v16;
            goto LABEL_28;
          }
          continue;
        }
      }
    }
  }
  *a1 = v8;
  a1[1] = v8;
  a1[2] = v7;
  if (v2)
LABEL_29:
    operator delete(v2);
}

uint64_t sub_239575364@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  char v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6))
  {
LABEL_4:
    v5 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * (*((_QWORD *)a1 + 5) / 0x33uLL)) + 80 * (*((_QWORD *)a1 + 5) % 0x33uLL);
    v28 = *(_QWORD *)v5;
    v6 = *(std::__shared_weak_count **)(v5 + 8);
    v29 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    LOBYTE(v30) = 0;
    v31 = 0;
    if (*(_BYTE *)(v5 + 32))
    {
      v30 = *(_OWORD *)(v5 + 16);
      v31 = 1;
    }
    v9 = v32;
    v10 = *(_QWORD *)(v5 + 64);
    if (v10)
    {
      if (v10 == v5 + 40)
      {
        v33 = v32;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v5 + 64) + 24))(*(_QWORD *)(v5 + 64), v32);
LABEL_15:
        v34 = *(_QWORD *)(v5 + 72);
        v11 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * (*((_QWORD *)a1 + 5) / 0x33uLL))
            + 80 * (*((_QWORD *)a1 + 5) % 0x33uLL);
        v12 = *(_QWORD **)(v11 + 64);
        if (v12 == (_QWORD *)(v11 + 40))
        {
          v13 = 4;
          v12 = (_QWORD *)(v11 + 40);
        }
        else
        {
          if (!v12)
          {
LABEL_20:
            v14 = *(std::__shared_weak_count **)(v11 + 8);
            if (!v14)
              goto LABEL_24;
            v15 = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
              v17 = *((_QWORD *)a1 + 6) - 1;
              v22 = *((_QWORD *)a1 + 5) + 1;
              *((_QWORD *)a1 + 5) = v22;
              *((_QWORD *)a1 + 6) = v17;
              if (v22 < 0x66)
              {
LABEL_26:
                if (v17 < *a1)
                  pthread_cond_signal((pthread_cond_t *)(a1 + 20));
                *(_QWORD *)a2 = v28;
                *(_QWORD *)(a2 + 8) = v29;
                if (v29)
                {
                  v19 = (unint64_t *)&v29->__shared_owners_;
                  do
                    v20 = __ldxr(v19);
                  while (__stxr(v20 + 1, v19));
                }
                *(_BYTE *)(a2 + 16) = 0;
                *(_BYTE *)(a2 + 32) = 0;
                if (v31)
                {
                  *(_OWORD *)(a2 + 16) = v30;
                  *(_BYTE *)(a2 + 32) = 1;
                }
                v21 = (uint64_t)v33;
                if (v33)
                {
                  if (v33 == v32)
                  {
                    *(_QWORD *)(a2 + 64) = a2 + 40;
                    (*(void (**)(_QWORD *))(v32[0] + 24))(v32);
LABEL_40:
                    v23 = v33;
                    *(_QWORD *)(a2 + 72) = v34;
                    *(_BYTE *)(a2 + 80) = 1;
                    if (v23 == v32)
                    {
                      v24 = 4;
                    }
                    else
                    {
                      if (!v23)
                      {
LABEL_45:
                        if (v29)
                        {
                          v25 = (unint64_t *)&v29->__shared_owners_;
                          do
                            v26 = __ldaxr(v25);
                          while (__stlxr(v26 - 1, v25));
                          if (!v26)
                          {
                            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                            std::__shared_weak_count::__release_weak(v29);
                          }
                        }
                        return sub_2397A16B4(v4);
                      }
                      v24 = 5;
                      v9 = v23;
                    }
                    (*(void (**)(_QWORD *))(*v9 + 8 * v24))(v9);
                    goto LABEL_45;
                  }
                  v21 = (*(uint64_t (**)(void))(*v33 + 16))();
                }
                *(_QWORD *)(a2 + 64) = v21;
                goto LABEL_40;
              }
            }
            else
            {
LABEL_24:
              v17 = *((_QWORD *)a1 + 6) - 1;
              v18 = *((_QWORD *)a1 + 5) + 1;
              *((_QWORD *)a1 + 5) = v18;
              *((_QWORD *)a1 + 6) = v17;
              if (v18 < 0x66)
                goto LABEL_26;
            }
            operator delete(**((void ***)a1 + 2));
            *((_QWORD *)a1 + 2) += 8;
            v17 = *((_QWORD *)a1 + 6);
            *((_QWORD *)a1 + 5) -= 51;
            goto LABEL_26;
          }
          v13 = 5;
        }
        (*(void (**)(void))(*v12 + 8 * v13))();
        goto LABEL_20;
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
    v33 = (_QWORD *)v10;
    goto LABEL_15;
  }
  while (!*((_BYTE *)a1 + 56))
  {
    ++*((_QWORD *)a1 + 9);
    pthread_cond_wait((pthread_cond_t *)(a1 + 32), v4);
    --*((_QWORD *)a1 + 9);
    if (*((_QWORD *)a1 + 6))
      goto LABEL_4;
  }
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  return sub_2397A16B4(v4);
}

void sub_239575700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pthread_mutex_t *v2;
  va_list va;

  va_start(va, a2);
  sub_23957284C((uint64_t)va);
  sub_2397A16B4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_2395757BC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    v4 = *(_QWORD **)(i - 16);
    if (v4 == (_QWORD *)(i - 40))
    {
      v4 = (_QWORD *)(i - 40);
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_9;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
    v6 = *(std::__shared_weak_count **)(i - 72);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_239575878(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_2394189F8();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_239418A80();
    v7 = (char *)operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v3];
  v34 = &v7[80 * v6];
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *((_QWORD *)v8 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v8[16] = 0;
  v8[32] = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)(a2 + 16);
    v8[32] = 1;
  }
  v12 = *(_QWORD *)(a2 + 64);
  if (v12)
  {
    if (v12 == a2 + 40)
    {
      *((_QWORD *)v8 + 8) = v8 + 40;
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v13 = v8;
      v14 = v8;
      goto LABEL_21;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  }
  *((_QWORD *)v8 + 8) = v12;
  v13 = v8;
  v14 = v8;
LABEL_21:
  *((_QWORD *)v8 + 9) = *(_QWORD *)(a2 + 72);
  v15 = v14 + 80;
  v32 = v14 + 80;
  v17 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    v25 = (char *)a1[1];
    goto LABEL_34;
  }
  v18 = 0;
  v19 = (char *)a1[1];
  do
  {
    v21 = &v13[v18];
    v22 = &v16[v18];
    *((_OWORD *)v21 - 5) = *(_OWORD *)&v16[v18 - 80];
    *((_QWORD *)v22 - 10) = 0;
    *((_QWORD *)v22 - 9) = 0;
    v13[v18 - 64] = 0;
    *(v21 - 48) = 0;
    if (v16[v18 - 48])
    {
      *(_OWORD *)&v13[v18 - 64] = *((_OWORD *)v22 - 4);
      *(v21 - 48) = 1;
    }
    v23 = (char *)*((_QWORD *)v22 - 2);
    if (!v23)
    {
      v20 = &v13[v18 - 16];
LABEL_24:
      *(_QWORD *)v20 = 0;
      goto LABEL_25;
    }
    v24 = &v13[v18];
    if (&v16[v18 - 40] != v23)
    {
      v20 = v19 - 16;
      *((_QWORD *)v24 - 2) = v23;
      goto LABEL_24;
    }
    *((_QWORD *)v24 - 2) = v21 - 40;
    (*(void (**)(_QWORD))(**((_QWORD **)v22 - 2) + 24))(*((_QWORD *)v22 - 2));
LABEL_25:
    v19 -= 80;
    *(_QWORD *)&v13[v18 - 8] = *(_QWORD *)&v16[v18 - 8];
    v18 -= 80;
  }
  while (&v16[v18] != v17);
  v25 = (char *)*a1;
  v16 = (char *)a1[1];
  v13 += v18;
  v15 = v32;
LABEL_34:
  *a1 = v13;
  a1[1] = v15;
  a1[2] = v34;
  if (v16 == v25)
  {
    if (v16)
      goto LABEL_36;
    return v15;
  }
  while (2)
  {
    v33 = v16 - 80;
    v27 = (char *)*((_QWORD *)v16 - 2);
    if (v27 == v16 - 40)
    {
      v27 = v16 - 40;
      v28 = 4;
LABEL_43:
      (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
    }
    else if (v27)
    {
      v28 = 5;
      goto LABEL_43;
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)v16 - 9);
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v16 -= 80;
    if (v33 != v25)
      continue;
    break;
  }
  v16 = v25;
  if (!v25)
    return v15;
LABEL_36:
  operator delete(v16);
  return v15;
}

void sub_239575B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(_QWORD *)(v2 + 8))
    sub_239EBEC08();
  sub_2395757BC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239575BAC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int v10;
  _QWORD *result;
  __int128 **v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 **v15;
  __int128 *v16;

  v4 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (!v5)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_5:
    v8 = a2 + 1;
    v9 = (_OWORD *)(a1 + 16);
    v10 = *(unsigned __int8 *)(a1 + 32);
    if (v10 == *((unsigned __int8 *)a2 + 32))
      goto LABEL_6;
LABEL_10:
    if (!v10)
    {
      *v9 = *v8;
      *(_BYTE *)(a1 + 32) = 1;
      v12 = (__int128 **)(a1 + 64);
      result = *(_QWORD **)(a1 + 64);
      v13 = (_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 64) = 0;
      if (result != (_QWORD *)(a1 + 40))
        goto LABEL_13;
      goto LABEL_16;
    }
    *(_BYTE *)(a1 + 32) = 0;
LABEL_12:
    v12 = (__int128 **)(a1 + 64);
    result = *(_QWORD **)(a1 + 64);
    v13 = (_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 64) = 0;
    if (result != (_QWORD *)(a1 + 40))
      goto LABEL_13;
LABEL_16:
    v14 = 4;
    result = v13;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = a2 + 1;
  v9 = (_OWORD *)(a1 + 16);
  v10 = *(unsigned __int8 *)(a1 + 32);
  if (v10 != *((unsigned __int8 *)a2 + 32))
    goto LABEL_10;
LABEL_6:
  if (!v10)
    goto LABEL_12;
  *v9 = *v8;
  v12 = (__int128 **)(a1 + 64);
  result = *(_QWORD **)(a1 + 64);
  v13 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  if (result == (_QWORD *)(a1 + 40))
    goto LABEL_16;
LABEL_13:
  if (!result)
    goto LABEL_18;
  v14 = 5;
LABEL_17:
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
LABEL_18:
  v15 = (__int128 **)(a2 + 4);
  v16 = (__int128 *)*((_QWORD *)a2 + 8);
  if (!v16)
  {
    v15 = v12;
    goto LABEL_22;
  }
  if (v16 != (__int128 *)((char *)a2 + 40))
  {
    *v12 = v16;
LABEL_22:
    *v15 = 0;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    return result;
  }
  *v12 = (__int128 *)v13;
  result = (_QWORD *)(*(uint64_t (**)(__int128 *, _QWORD *))(*(_QWORD *)*v15 + 24))(*v15, v13);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  return result;
}

uint64_t sub_239575D3C(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_239575E10(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  v4 = (void **)(a1 + 8);
  sub_2395745A4((_QWORD *)(a1 + 8));
  v5 = *(void ***)(a1 + 16);
  v6 = *(void ***)(a1 + 24);
  if (v5 != v6)
  {
    do
    {
      v7 = *v5++;
      operator delete(v7);
    }
    while (v5 != v6);
    v9 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    if (v8 != v9)
      *(_QWORD *)(a1 + 24) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v4)
    operator delete(*v4);
  return a1;
}

uint64_t sub_239575E10(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v3 = pthread_cond_signal((pthread_cond_t *)(a1 + 80));
      if ((_DWORD)v3)
        sub_239EBED10(v3, v4);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v5 = pthread_cond_signal((pthread_cond_t *)(a1 + 128));
      if ((_DWORD)v5)
        sub_239EBECE4(v5, v6);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  sub_2397A16B4(v2);
  return 1;
}

void sub_239575F58(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239575F74(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v9;

  *(_QWORD *)a1 = &off_250ADE8A0;
  v2 = (pthread_mutex_t *)(a1 + 632);
  sub_2397A1694((pthread_mutex_t *)(a1 + 632));
  v3 = *(unsigned __int8 *)(a1 + 512);
  sub_2397A16B4(v2);
  if (!v3)
  {
    sub_239575E10(a1 + 456);
    sub_2397A2D24(a1 + 48);
  }
  sub_239575D3C(a1 + 456);
  v4 = *(_QWORD **)(a1 + 448);
  if (v4 == (_QWORD *)(a1 + 424))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 424);
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  v9 = (void **)(a1 + 400);
  sub_23957447C(&v9);
  sub_2397A2E14(a1 + 48);
  v6 = *(_QWORD **)(a1 + 32);
  if (v6 == (_QWORD *)(a1 + 8))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 8);
    goto LABEL_12;
  }
  if (v6)
  {
    v7 = 5;
LABEL_12:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_239576068(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239576078(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2395760A8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2395760B8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  os_signpost_id_t v14;
  uint64_t v15;
  _BYTE v17[16];
  void *__p;
  char v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250ADE940;
  v20[0] = &off_250ADE970;
  v20[1] = a1;
  v21 = v20;
  sub_2397A1C7C((uint64_t)v17, a2);
  sub_2395762D0(a1, (uint64_t)v20, (uint64_t)v17, 0x7FFFFFFFu);
  if (v19 < 0)
  {
    operator delete(__p);
    v8 = v21;
    if (v21 != v20)
      goto LABEL_3;
LABEL_6:
    v9 = 4;
    v8 = v20;
    goto LABEL_7;
  }
  v8 = v21;
  if (v21 == v20)
    goto LABEL_6;
LABEL_3:
  if (!v8)
    goto LABEL_8;
  v9 = 5;
LABEL_7:
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
  *(_QWORD *)a1 = &off_250ADE940;
  *(_QWORD *)(a1 + 408) = a3;
  *(_QWORD *)(a1 + 416) = a4;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 424) = os_log_create("com.apple.corepg", "image.imageengine");
  v11 = *(_QWORD *)(a1 + 432);
  v10 = *(_QWORD *)(a1 + 440);
  v12 = (v10 - v11) >> 3;
  if (a2 <= v12)
  {
    if (a2 < v12)
    {
      v10 = v11 + 8 * a2;
      *(_QWORD *)(a1 + 440) = v10;
    }
  }
  else
  {
    sub_23946DAD4(a1 + 432, a2 - v12);
    v11 = *(_QWORD *)(a1 + 432);
    v10 = *(_QWORD *)(a1 + 440);
  }
  if (v10 != v11)
  {
    v13 = 0;
    do
    {
      v14 = os_signpost_id_generate(*(os_log_t *)(a1 + 424));
      v15 = *(_QWORD *)(a1 + 432);
      *(_QWORD *)(v15 + 8 * v13++) = v14;
    }
    while (v13 < (*(_QWORD *)(a1 + 440) - v15) >> 3);
  }
  return a1;
}

void sub_239576240(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 440) = v4;
    operator delete(v4);
  }
  sub_239576588(v1);
  _Unwind_Resume(a1);
}

void sub_239576264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  if (a17 < 0)
    operator delete(__p);
  if (a22 == &a19)
  {
    (*(void (**)(void))(a19 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a22)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a22 + 40))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395762D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250ADE9B8;
  v7 = a1 + 8;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8)
  {
    if (v8 == a2)
    {
      *(_QWORD *)(a1 + 32) = v7;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v7);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_DWORD *)a3 <= a4)
    v9 = a4;
  else
    v9 = *(_DWORD *)a3;
  sub_239576EDC(a1 + 56, v9);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)a3;
  if (*(char *)(a3 + 39) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 312), *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v10 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)(a1 + 312) = v10;
  }
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a3 + 40);
  sub_2397A1618((pthread_mutex_t *)(a1 + 344));
  if (*(_QWORD *)(a1 + 296))
  {
    v11 = operator new(0x178uLL);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = &off_250ADB8B0;
    v12 = sub_2397A2A4C((uint64_t)(v11 + 3), a1 + 296);
    v13 = *(std::__shared_weak_count **)(a1 + 48);
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v11;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = *(unint64_t **)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 296);
    v21[0] = &off_250ADE9E8;
    v21[1] = a1;
    v22 = v21;
    sub_2397A3340(v16, v17, v21, 0);
    v18 = v22;
    if (v22 == v21)
    {
      v19 = 4;
      v18 = v21;
      goto LABEL_22;
    }
    if (v22)
    {
      v19 = 5;
LABEL_22:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
  }
  return a1;
}

void sub_2395764C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  sub_239577884(v4);
  sub_239416DA0(v3);
  v6 = *(_QWORD **)(v1 + 32);
  if (v6 == v2)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v2 = *(_QWORD **)(v1 + 32);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v7))(v2);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_239576588(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_250ADE9B8;
  v2 = (pthread_mutex_t *)(a1 + 232);
  sub_2397A1694((pthread_mutex_t *)(a1 + 232));
  v3 = *(unsigned __int8 *)(a1 + 112);
  sub_2397A16B4(v2);
  if (!v3)
  {
    sub_239577958(a1 + 56);
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
      sub_2397A2D24(v4);
  }
  sub_2397A163C((pthread_mutex_t *)(a1 + 344));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  sub_239577884(a1 + 56);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_10:
    v8 = (_QWORD *)(a1 + 8);
    v9 = *(_QWORD **)(a1 + 32);
    if (v9 != (_QWORD *)(a1 + 8))
      goto LABEL_11;
LABEL_14:
    v10 = 4;
    v9 = v8;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = (_QWORD *)(a1 + 8);
  v9 = *(_QWORD **)(a1 + 32);
  if (v9 == (_QWORD *)(a1 + 8))
    goto LABEL_14;
LABEL_11:
  if (v9)
  {
    v10 = 5;
LABEL_15:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

uint64_t sub_239576690(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_250ADE940;
  os_release(*(void **)(a1 + 424));
  v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(_QWORD *)(a1 + 440) = v2;
    operator delete(v2);
  }
  return sub_239576588(a1);
}

void sub_2395766D8(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_250ADE940;
  os_release(*(void **)(a1 + 424));
  v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(_QWORD *)(a1 + 440) = v2;
    operator delete(v2);
  }
  sub_239576588(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239576734(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  pthread_mutex_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 296))
  {
    v11 = (pthread_mutex_t *)(a1 + 344);
    sub_2397A1694((pthread_mutex_t *)(a1 + 344));
    if (a3[3])
    {
      v25 = 0;
      v12 = *(_QWORD *)(a1 + 32);
      if (!v12)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v12 + 48))(&v26, v12, a2, &v25);
      v13 = a3[3];
      if (!v13)
        sub_2394172E0();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v26);
      v14 = v27;
      if (!v27)
        goto LABEL_33;
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
    }
    else
    {
      v26 = 0;
      v21 = *(_QWORD *)(a1 + 32);
      if (!v21)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v21 + 48))(&v23, v21, a2, &v26);
      v14 = v24;
      if (!v24)
        goto LABEL_33;
      v22 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v22);
      while (__stlxr(v16 - 1, v22));
    }
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_33:
    sub_2397A16B4(v11);
    return;
  }
  v6 = (std::__shared_weak_count *)a2[1];
  v26 = *a2;
  v27 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v28 = a2[2];
  v9 = v29;
  v10 = a3[3];
  if (!v10)
    goto LABEL_8;
  if ((_QWORD *)v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_8:
    v30 = (_BYTE *)v10;
    goto LABEL_17;
  }
  v30 = v29;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v29);
LABEL_17:
  sub_239577ABC((unsigned int *)(a1 + 56), &v26);
  if (v30 == v29)
  {
    v17 = 4;
  }
  else
  {
    if (!v30)
      goto LABEL_22;
    v17 = 5;
    v9 = v30;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v17))(v9);
LABEL_22:
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_23957696C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

void sub_2395769F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239570888((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239576A04(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  uint64_t result;

  v2 = (pthread_mutex_t *)(a1 + 232);
  sub_2397A1694((pthread_mutex_t *)(a1 + 232));
  v3 = *(unsigned __int8 *)(a1 + 112);
  result = sub_2397A16B4(v2);
  if (!v3)
  {
    sub_239577958(a1 + 56);
    result = *(_QWORD *)(a1 + 40);
    if (result)
      return sub_2397A2D24(result);
  }
  return result;
}

void sub_239576A6C()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239576A80(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADE970;
  result[1] = v3;
  return result;
}

uint64_t sub_239576AB4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADE970;
  a2[1] = v2;
  return result;
}

void sub_239576AD0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  sub_239576ADC((uint64_t *)(a1 + 8), a2, *a3, a4);
}

void sub_239576ADC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  os_signpost_id_t v14;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  __n128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  os_signpost_id_t v39;
  uint64_t v40;
  uint64_t (**v41)();
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  char *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint8_t buf[4];
  uint64_t v50;
  std::__shared_weak_count *v51;
  _QWORD v52[6];

  v52[4] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v8 = *(_QWORD *)a2;
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  v47 = *(_QWORD *)a2;
  v48 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = *(_DWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 20);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = *(_QWORD *)(*(_QWORD *)(v6 + 432) + 8 * a3);
  v45 = 0;
  v46 = 0;
  v16 = (_DWORD)v13 == v12 && HIDWORD(v13) == v11;
  if (v11 && v12 && !v16)
  {
    v17 = operator new(0x70uLL);
    v40 = a3;
    v17[1] = 0;
    v17[2] = 0;
    *v17 = &off_250ADB878;
    v17[3] = &off_250ADB628;
    v18 = (uint64_t)(v17 + 3);
    sub_239422F30((_WORD *)v17 + 16);
    v45 = (char *)(v17 + 3);
    v46 = (std::__shared_weak_count *)v17;
    v39 = v14;
    v19 = v14 - 1;
    if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v20 = *(NSObject **)(v6 + 424);
      if (os_signpost_enabled(v20))
      {
        *(_DWORD *)buf = 134217984;
        v50 = v40;
        _os_signpost_emit_with_name_impl(&dword_23940C000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v39, "Resize", "At thread %zu", buf, 0xCu);
      }
    }
    v41 = &off_250ADB778;
    sub_2394247FC(v8, (uint64_t)&v42);
    sub_239713FB0(&v41, 0, buf, COERCE_UNSIGNED_INT64((float)((float)v12 / (float)v13)), COERCE_UNSIGNED_INT64((float)((float)v11 / (float)HIDWORD(v13))));
    sub_239422CF0(v18, (uint64_t)buf);
    v21 = nullsub_4(v52);
    v22 = v51;
    if (v51)
    {
      v23 = (unint64_t *)&v51->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v21);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    j_nullsub_4_89(buf);
    v25 = nullsub_4(&v44);
    v26 = v43;
    if (v43)
    {
      v27 = (unint64_t *)&v43->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    j_nullsub_4_89(&v41);
    if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v29 = *(NSObject **)(v6 + 424);
      if (os_signpost_enabled(v29))
      {
        *(_DWORD *)buf = 134217984;
        v50 = v40;
        _os_signpost_emit_with_name_impl(&dword_23940C000, v29, OS_SIGNPOST_INTERVAL_END, v39, "Resize", "At thread %zu", buf, 0xCu);
      }
    }
  }
  else
  {
    if (v7)
    {
      v30 = (unint64_t *)&v7->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v45 = (char *)v8;
    v46 = v7;
  }
  v32 = v46;
  *a4 = v45;
  a4[1] = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    a4[2] = v13;
    do
      v35 = __ldaxr(v33);
    while (__stlxr(v35 - 1, v33));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  else
  {
    a4[2] = v13;
  }
  v36 = v48;
  if (v48)
  {
    v37 = (unint64_t *)&v48->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_239576E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;
  uint64_t v18;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v16 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  sub_239422DD0((uint64_t)va3);
  sub_239422DD0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_239576E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  j_nullsub_4_89((uint64_t *)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_239576E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v14;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  nullsub_4(v11);
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v14);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_239576EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_239576EDC(uint64_t a1, int a2)
{
  unsigned int v3;

  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_2397A1618((pthread_mutex_t *)(a1 + 176));
  v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 0x7FFFFFFFu)
  {
    *(_DWORD *)a1 = 0x7FFFFFFF;
    v3 = 0x7FFFFFFF;
  }
  else if (v3 < 2)
  {
    v3 = 1;
  }
  *(_DWORD *)a1 = v3;
  pthread_cond_init((pthread_cond_t *)(a1 + 80), 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 128), 0);
  return a1;
}

void sub_239576F7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  sub_2395706DC(v2);
  v4 = *(void ***)(v1 + 16);
  v5 = *(void ***)(v1 + 24);
  if (v4 != v5)
  {
    do
    {
      v6 = *v4++;
      operator delete(v6);
    }
    while (v4 != v5);
    v8 = *(_QWORD *)(v1 + 16);
    v7 = *(_QWORD *)(v1 + 24);
    if (v7 != v8)
      *(_QWORD *)(v1 + 24) = v7 + ((v8 - v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_239576FEC(uint64_t a1)
{
  sub_239576588(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239577014()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239577028(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADE9E8;
  result[1] = v3;
  return result;
}

uint64_t sub_23957705C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADE9E8;
  a2[1] = v2;
  return result;
}

void sub_239577078(uint64_t a1, uint64_t *a2)
{
  sub_239577084((_QWORD *)(a1 + 8), *a2);
}

void sub_239577084(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD *v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[24];
  _BYTE *v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = (unsigned int *)(*a1 + 56);
  sub_23957745C(v4, (uint64_t)&v36);
  while (v40)
  {
    if (v39)
    {
      v30 = a2;
      v5 = *(_QWORD *)(v3 + 32);
      if (!v5)
        sub_2394172E0();
      (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v5 + 48))(&v31, v5, &v36, &v30);
      if (!v39)
        sub_2394172E0();
      (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v39 + 48))(v39, &v31);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        goto LABEL_15;
      }
    }
    else
    {
      *(_QWORD *)&v31 = a2;
      v9 = *(_QWORD *)(v3 + 32);
      if (!v9)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, __int128 *))(*(_QWORD *)v9 + 48))(&v28, v9, &v36, &v31);
      v6 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
LABEL_15:
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    sub_23957745C(v4, (uint64_t)&v31);
    v11 = v31;
    v31 = 0uLL;
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    v36 = v11;
    if (!v12)
      goto LABEL_21;
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v15 = v39;
      v37 = v32;
      v39 = 0;
      if (v15 == v38)
      {
LABEL_25:
        v15 = v38;
        v16 = 4;
        goto LABEL_26;
      }
    }
    else
    {
LABEL_21:
      v15 = v39;
      v37 = v32;
      v39 = 0;
      if (v15 == v38)
        goto LABEL_25;
    }
    if (!v15)
      goto LABEL_27;
    v16 = 5;
LABEL_26:
    (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_27:
    v17 = &v39;
    if (!v34)
      goto LABEL_30;
    if (v34 != v33)
    {
      v39 = v34;
      v17 = &v34;
LABEL_30:
      *v17 = 0;
      goto LABEL_32;
    }
    v39 = v38;
    (*(void (**)(_QWORD *, _BYTE *))(v33[0] + 24))(v33, v38);
LABEL_32:
    v40 = v35;
    v18 = v34;
    if (v34 == v33)
    {
      v18 = v33;
      v19 = 4;
    }
    else
    {
      if (!v34)
        goto LABEL_37;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_37:
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v23 = v39;
  if (v39 == v38)
  {
    v24 = 4;
    v23 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_47;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_47:
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_2395773C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23957745C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  _QWORD v40[3];
  _QWORD *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6))
  {
LABEL_4:
    v5 = *((_QWORD *)a1 + 5);
    v6 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * (v5 / 0x49));
    v7 = v5 % 0x49;
    v8 = (uint64_t *)(v6 + 56 * v7);
    v37 = *v8;
    v9 = (std::__shared_weak_count *)v8[1];
    v38 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v39 = v8[2];
    v12 = v40;
    v13 = v6 + 56 * v7;
    v16 = *(_QWORD *)(v13 + 48);
    v15 = (_QWORD *)(v13 + 48);
    v14 = v16;
    if (v16)
    {
      if (v14 == v6 + 56 * v7 + 24)
      {
        v41 = v40;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v15 + 24))(*v15, v40);
LABEL_13:
        v17 = *((_QWORD *)a1 + 5);
        v18 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * (v17 / 0x49));
        v19 = v17 % 0x49;
        v20 = v18 + 56 * (v17 % 0x49);
        v21 = (_QWORD *)(v20 + 24);
        v22 = *(_QWORD **)(v20 + 48);
        if (v22 == (_QWORD *)(v20 + 24))
        {
          v23 = 4;
          v22 = v21;
        }
        else
        {
          if (!v22)
          {
LABEL_18:
            v24 = *(std::__shared_weak_count **)(v18 + 56 * v19 + 8);
            if (!v24)
              goto LABEL_22;
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
              v27 = *((_QWORD *)a1 + 6) - 1;
              v32 = *((_QWORD *)a1 + 5) + 1;
              *((_QWORD *)a1 + 5) = v32;
              *((_QWORD *)a1 + 6) = v27;
              if (v32 < 0x92)
              {
LABEL_24:
                if (v27 < *a1)
                  pthread_cond_signal((pthread_cond_t *)(a1 + 20));
                *(_QWORD *)a2 = v37;
                *(_QWORD *)(a2 + 8) = v38;
                if (v38)
                {
                  v29 = (unint64_t *)&v38->__shared_owners_;
                  do
                    v30 = __ldxr(v29);
                  while (__stxr(v30 + 1, v29));
                }
                v31 = v41;
                *(_QWORD *)(a2 + 16) = v39;
                if (v31)
                {
                  if (v31 == v40)
                  {
                    *(_QWORD *)(a2 + 48) = a2 + 24;
                    (*(void (**)(_QWORD *))(v40[0] + 24))(v40);
LABEL_36:
                    *(_BYTE *)(a2 + 56) = 1;
                    if (v41 == v40)
                    {
                      v33 = 4;
                    }
                    else
                    {
                      if (!v41)
                      {
LABEL_41:
                        if (v38)
                        {
                          v34 = (unint64_t *)&v38->__shared_owners_;
                          do
                            v35 = __ldaxr(v34);
                          while (__stlxr(v35 - 1, v34));
                          if (!v35)
                          {
                            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                            std::__shared_weak_count::__release_weak(v38);
                          }
                        }
                        return sub_2397A16B4(v4);
                      }
                      v33 = 5;
                      v12 = v41;
                    }
                    (*(void (**)(_QWORD *))(*v12 + 8 * v33))(v12);
                    goto LABEL_41;
                  }
                  v31 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v31 + 16))(v31);
                }
                *(_QWORD *)(a2 + 48) = v31;
                goto LABEL_36;
              }
            }
            else
            {
LABEL_22:
              v27 = *((_QWORD *)a1 + 6) - 1;
              v28 = *((_QWORD *)a1 + 5) + 1;
              *((_QWORD *)a1 + 5) = v28;
              *((_QWORD *)a1 + 6) = v27;
              if (v28 < 0x92)
                goto LABEL_24;
            }
            operator delete(**((void ***)a1 + 2));
            *((_QWORD *)a1 + 2) += 8;
            v27 = *((_QWORD *)a1 + 6);
            *((_QWORD *)a1 + 5) -= 73;
            goto LABEL_24;
          }
          v23 = 5;
        }
        (*(void (**)(void))(*v22 + 8 * v23))();
        goto LABEL_18;
      }
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    }
    v41 = (_QWORD *)v14;
    goto LABEL_13;
  }
  while (!*((_BYTE *)a1 + 56))
  {
    ++*((_QWORD *)a1 + 9);
    pthread_cond_wait((pthread_cond_t *)(a1 + 32), v4);
    --*((_QWORD *)a1 + 9);
    if (*((_QWORD *)a1 + 6))
      goto LABEL_4;
  }
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  return sub_2397A16B4(v4);
}

void sub_2395777C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;

  sub_239570888((uint64_t)&a9);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_239577884(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_239577958(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  v4 = (void **)(a1 + 8);
  sub_2395706DC((_QWORD *)(a1 + 8));
  v5 = *(void ***)(a1 + 16);
  v6 = *(void ***)(a1 + 24);
  if (v5 != v6)
  {
    do
    {
      v7 = *v5++;
      operator delete(v7);
    }
    while (v5 != v6);
    v9 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    if (v8 != v9)
      *(_QWORD *)(a1 + 24) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v4)
    operator delete(*v4);
  return a1;
}

uint64_t sub_239577958(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v3 = pthread_cond_signal((pthread_cond_t *)(a1 + 80));
      if ((_DWORD)v3)
        sub_239EBED10(v3, v4);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v5 = pthread_cond_signal((pthread_cond_t *)(a1 + 128));
      if ((_DWORD)v5)
        sub_239EBECE4(v5, v6);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  sub_2397A16B4(v2);
  return 1;
}

void sub_239577AA0(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239577ABC(unsigned int *a1, _QWORD *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6) < (unint64_t)*a1)
  {
LABEL_4:
    if (!*((_BYTE *)a1 + 56))
    {
      sub_239577B94((_QWORD *)a1 + 1, a2);
      pthread_cond_signal((pthread_cond_t *)(a1 + 32));
      v5 = 1;
      goto LABEL_7;
    }
  }
  else
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      if (*((_QWORD *)a1 + 6) < (unint64_t)*a1)
        goto LABEL_4;
    }
  }
  v5 = 0;
LABEL_7:
  sub_2397A16B4(v4);
  return v5;
}

void sub_239577B74(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239577B94(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 73 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_239577CE0((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x49));
  v9 = v7 % 0x49;
  v10 = a2[1];
  v11 = (_QWORD *)(v8 + 56 * (v7 % 0x49));
  *v11 = *a2;
  v11[1] = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v11[2] = a2[2];
  result = a2[6];
  if (result)
  {
    if ((_QWORD *)result == a2 + 3)
    {
      *(_QWORD *)(v8 + 56 * v9 + 48) = v8 + 56 * v9 + 24;
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[6] + 24))(a2[6]);
      goto LABEL_13;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  *(_QWORD *)(v8 + 56 * v9 + 48) = result;
LABEL_13:
  ++a1[5];
  return result;
}

void sub_239577CC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void sub_239577CE0(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x49;
  v4 = v2 - 73;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFF8uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFF8uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF8uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_23957823C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_239578258(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23957826C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239578284(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23957829C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250ADEA30;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2395782F8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250ADEA30;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239578364(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x48uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_250ADEA30;
  v2[1] = v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 16)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
LABEL_4:
    v2[5] = v4;
    goto LABEL_6;
  }
  v2[5] = v2 + 2;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  *((_BYTE *)v2 + 48) = 0;
  *((_BYTE *)v2 + 64) = 0;
  if (*(_BYTE *)(a1 + 64))
  {
    *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
    *((_BYTE *)v2 + 64) = 1;
  }
  return v2;
}

void sub_239578400(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239578414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  _OWORD *v6;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_250ADEA30;
  *(_QWORD *)(a2 + 8) = v4;
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    if (result == a1 + 16)
    {
      *(_QWORD *)(a2 + 40) = a2 + 16;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
      *(_BYTE *)(a2 + 48) = 0;
      v6 = (_OWORD *)(a2 + 48);
      *(_BYTE *)(a2 + 64) = 0;
      if (!*(_BYTE *)(a1 + 64))
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a2 + 40) = result;
      *(_BYTE *)(a2 + 48) = 0;
      v6 = (_OWORD *)(a2 + 48);
      *(_BYTE *)(a2 + 64) = 0;
      if (!*(_BYTE *)(a1 + 64))
        return result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 48) = 0;
    v6 = (_OWORD *)(a2 + 48);
    *(_BYTE *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a1 + 64))
      return result;
  }
  *v6 = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(a2 + 64) = 1;
  return result;
}

uint64_t sub_2395784D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 16;
  result = *(_QWORD *)(a1 + 40);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_239578514(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_239578564(uint64_t a1, uint64_t *a2, __n128 a3)
{
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  char v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a1 + 64);
  if (*(_BYTE *)(a1 + 64))
  {
    v5 = *(_DWORD *)(a1 + 48);
    v3 = *(_DWORD *)(a1 + 52);
    v6 = v5 & 0xFFFFFF00;
    a3.n128_u64[0] = *(_QWORD *)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *a2;
    v9 = (std::__shared_weak_count *)a2[1];
    if (!v9)
      goto LABEL_7;
  }
  else
  {
    v6 = 0;
    LOBYTE(v5) = 0;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *a2;
    v9 = (std::__shared_weak_count *)a2[1];
    if (!v9)
      goto LABEL_7;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
LABEL_7:
  v12 = a2[2];
  if (v4)
  {
    v13 = (float)*(unsigned int *)(v8 + 112) / (float)v12;
    v15 = (float)(v13 * (float)(v5 | v6));
    v14 = v15 & 0xFFFFFF00;
    v3 = (float)(v13 * (float)v3);
    a3.n128_u64[0] = (unint64_t)vcvt_u32_f32(vmul_n_f32(vcvt_f32_u32((uint32x2_t)a3.n128_u64[0]), (float)*(unsigned int *)(v8 + 116) / (float)HIDWORD(v12)));
    v15 = v15;
    v16 = *(_QWORD *)(v7 + 40);
    v17 = (std::__shared_weak_count *)a2[1];
    v29 = *a2;
    v30 = v17;
    if (!v17)
      goto LABEL_13;
  }
  else
  {
    v15 = 0;
    v14 = 0;
    v16 = *(_QWORD *)(v7 + 40);
    v17 = (std::__shared_weak_count *)a2[1];
    v29 = *a2;
    v30 = v17;
    if (!v17)
      goto LABEL_13;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
LABEL_13:
  LOBYTE(v31) = 0;
  v34 = 0;
  if (v4)
  {
    v31 = v14 | v15;
    v32 = v3;
    v33 = a3.n128_u64[0];
    v34 = 1;
  }
  v20 = v35;
  v21 = *(_QWORD *)(a1 + 40);
  if (v21)
  {
    v22 = a1 + 16;
    if (v21 == v22)
    {
      v36 = v35;
      (*(void (**)(uint64_t, _BYTE *, __n128))(*(_QWORD *)v22 + 24))(v22, v35, a3);
    }
    else
    {
      v36 = (_BYTE *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v21 + 16))(v21, a3);
    }
  }
  else
  {
    v36 = 0;
  }
  v37 = v12;
  sub_239578890((unsigned int *)(v16 + 456), (uint64_t)&v29);
  if (v36 == v35)
  {
    v23 = 4;
    goto LABEL_24;
  }
  if (v36)
  {
    v23 = 5;
    v20 = v36;
LABEL_24:
    (*(void (**)(_QWORD *))(*v20 + 8 * v23))(v20);
  }
  v24 = v30;
  if (v30)
  {
    v25 = (unint64_t *)&v30->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v9)
  {
    v27 = (unint64_t *)&v9->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_2395787C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (v18)
  {
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239578890(unsigned int *a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6) < (unint64_t)*a1)
  {
LABEL_4:
    if (!*((_BYTE *)a1 + 56))
    {
      sub_239578968((_QWORD *)a1 + 1, a2);
      pthread_cond_signal((pthread_cond_t *)(a1 + 32));
      v5 = 1;
      goto LABEL_7;
    }
  }
  else
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      if (*((_QWORD *)a1 + 6) < (unint64_t)*a1)
        goto LABEL_4;
    }
  }
  v5 = 0;
LABEL_7:
  sub_2397A16B4(v4);
  return v5;
}

void sub_239578948(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239578968(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 51 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_239578AB8((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x33));
  v9 = *(_QWORD *)(a2 + 8);
  v10 = v8 + 80 * (v7 % 0x33);
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *(_QWORD *)(v10 + 8) = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_BYTE *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(a2 + 16);
    *(_BYTE *)(v10 + 32) = 1;
  }
  result = *(_QWORD *)(a2 + 64);
  if (result)
  {
    if (result == a2 + 40)
    {
      *(_QWORD *)(v10 + 64) = v10 + 40;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 64) + 24))(*(_QWORD *)(a2 + 64));
      goto LABEL_15;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  *(_QWORD *)(v10 + 64) = result;
LABEL_15:
  *(_QWORD *)(v10 + 72) = *(_QWORD *)(a2 + 72);
  ++a1[5];
  return result;
}

void sub_239578AA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void sub_239578AB8(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x33;
  v4 = v2 - 51;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFF0uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFF0uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_239579014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_239579030(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239579044(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23957905C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239579074()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_239579084(uint64_t a1, uint64_t *a2, float a3, float a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int16 v31;

  kdebug_trace();
  v25 = &off_250ADB628;
  sub_2395793A0((_DWORD *)(a1 + 64), &v26);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = HIDWORD(v8);
  if (HIDWORD(v8))
  {
    v10 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 64))
    {
      v11 = 0;
      v12 = 0;
      v13 = (float)v8;
      v14 = *a2;
      v15 = (float)*(unsigned int *)(*a2 + 64) / v13;
      v16 = (float)v9;
      if (v9 <= 1)
        v9 = 1;
      v17 = (float)*(unsigned int *)(*a2 + 68) / v16;
      do
      {
        v18 = 0;
        v19 = vcvtms_u32_f32(v17 * (float)v11);
        do
        {
          while (1)
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32)
                                     + (*(_DWORD *)(a1 + 72) * v18 + *(_DWORD *)(a1 + 76) * v11));
            if ((float)v20 > a4
              && *(float *)(*(_QWORD *)(v14 + 56)
                          + 4
                          * (*(_DWORD *)(v14 + 72) * vcvtms_u32_f32(v15 * (float)v18)
                           + *(_DWORD *)(v14 + 76) * v19)) < (float)(1.0 / a3))
            {
              break;
            }
            *(_BYTE *)(*((_QWORD *)&v27 + 1) + (v30 * v18++ + HIDWORD(v30) * v11)) = v20;
            if (v10 == v18)
              goto LABEL_6;
          }
          *(_BYTE *)(*((_QWORD *)&v27 + 1) + (v30 * v18 + HIDWORD(v30) * v11)) = 0;
          ++v12;
          ++v18;
        }
        while (v10 != v18);
LABEL_6:
        ++v11;
      }
      while (v11 != v9);
      if (v12 >= 1001)
      {
        v21 = v26;
        v26 = 0uLL;
        v22 = *(std::__shared_weak_count **)(a1 + 16);
        *(_OWORD *)(a1 + 8) = v21;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        *(_OWORD *)(a1 + 24) = v27;
        *(_OWORD *)(a1 + 40) = v28;
        *(_OWORD *)(a1 + 56) = v29;
        *(_QWORD *)(a1 + 72) = v30;
        *(_WORD *)(a1 + 80) = v31;
      }
    }
  }
  kdebug_trace();
  sub_239416DA0((uint64_t)&v26);
  nullsub_4(&v25);
}

void sub_2395792AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2395792C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  sub_2395647D4(a1, &v7);
  sub_2395795F0(a2, &v6);
  sub_23957971C(a1, a2);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23957933C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395793A0@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_239579508(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB708;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_2398263E0((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[36] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_23980F8F0(result);
    return MEMORY[0x23B83E31C](v12, 0x1091C406A8758A4);
  }
  return result;
}

void sub_2395794B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239423260((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395794C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_239423260((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395794EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_239423260((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239579508@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  _OWORD v6[2];
  _QWORD v7[6];

  v7[5] = &off_250ADB668;
  sub_23981E58C(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_250ADB688;
  *(_OWORD *)(v3 + 8) = v6[0];
  *(_OWORD *)(v3 + 20) = *(_OWORD *)((char *)v6 + 12);
  sub_239916924((__n128 *)(v3 + 40), (__n128 *)v7);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)&v7[3];
  *a2 = v3;
  return sub_23980F8F0((uint64_t)v5);
}

void sub_2395795AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  __n128 v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4);
  sub_23980F8F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395795DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23980F8F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395795F0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_18;
  }
  else
  {
LABEL_14:
    if (!v5)
      goto LABEL_18;
  }
  if (*(_BYTE *)(a1 + 81))
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), 1);
    return;
  }
LABEL_18:
  *a2 = 0;
}

void *sub_23957971C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  void *result;
  size_t v8;
  const void *v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  size_t v16;

  v3 = a1;
  v4 = *(_DWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 76);
  if (v5 == *(_DWORD *)(a2 + 76) && v5 == v4)
  {
    v8 = *(unsigned int *)(a1 + 68) * (unint64_t)v4;
    v9 = *(const void **)(a1 + 56);
    if (*(_BYTE *)(a1 + 80))
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(std::__shared_weak_count **)(a1 + 16);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      a1 = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v11 + 88))(v11, 0, "unknown location");
      v9 = *(const void **)(v3 + 56);
    }
    if (v8 && !v9)
      sub_239EBF50C(a1, a2);
    result = *(void **)(a2 + 32);
    if (*(_BYTE *)(a2 + 80) && result)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "unknown location");
      result = *(void **)(a2 + 32);
    }
    if (v8 && !result)
      sub_239EBF50C(0, a2);
    if (v8)
      return memmove(result, v9, v8);
  }
  else
  {
    v16 = *(unsigned int *)(a1 + 64);
    return (void *)sub_239579874(a1, a2, &v16);
  }
  return result;
}

uint64_t sub_239579874(uint64_t a1, uint64_t a2, size_t *a3)
{
  BOOL v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  sub_2395647D4(a1, &v10);
  sub_2395795F0(a2, &v9);
  if (*(_DWORD *)(a1 + 64))
    v6 = *(_DWORD *)(a1 + 68) == 0;
  else
    v6 = 1;
  if (!v6)
    sub_239579970(a3, a1, a2);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23957990C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

size_t *sub_239579970(size_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  size_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _OWORD v23[2];

  v4 = *(_DWORD *)(a2 + 64);
  v3 = *(_DWORD *)(a2 + 68);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v8 = result;
    v19 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 76);
    v10 = *(unsigned int *)(a3 + 76);
    v20 = *(unsigned int *)(a2 + 72) | ((unint64_t)*(unsigned int *)(a3 + 72) << 32);
    v18 = 0;
    v21 = v3 - 1;
    v22 = v9 | (v10 << 32);
    v11 = *(char **)(a2 + 56);
    if (*(_BYTE *)(a2 + 80) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "unknown location");
      v11 = *(char **)(a2 + 56);
    }
    v17 = *(char **)(a3 + 32);
    if (*(_BYTE *)(a3 + 80))
    {
      if (v17)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "unknown location");
        v17 = *(char **)(a3 + 32);
      }
    }
    memset(v23, 0, sizeof(v23));
    return (size_t *)sub_23949FA00(&v18, (uint64_t)v23, v8, v11, v17);
  }
  return result;
}

uint64_t sub_239579AAC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  int64x2_t v12;
  int8x16_t v13;
  void **v14;
  void **v15;
  void *v16;
  unsigned int v17;
  int64x2_t v18;
  int8x16_t v19;
  void **v20;
  void **v21;
  void *v22;
  int v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *size;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *__p[2];
  uint64_t v40;
  char v41;
  uint64_t (**v42)();
  char v43;
  std::__shared_weak_count *v44;
  void *v45;
  char v46;
  char v47;
  std::string v48[7];
  void *v49[2];
  char v50;
  uint64_t v51;
  unsigned int v52[4];

  *(_QWORD *)a1 = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 104) = &off_250ADBC88;
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 48) = 0u;
  v7 = (void **)(a1 + 48);
  v8 = a1 + 72;
  *(_QWORD *)(a1 + 96) = 0;
  v9 = (uint64_t *)(a1 + 96);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_239467E48(a1 + 112);
  LODWORD(v49[0]) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  v48[0].__r_.__value_.__r.__words[0] = 0;
  __p[0] = 0;
  sub_23957F64C((_QWORD *)(a1 + 224), __p, (unint64_t *)v48, 1, v49, 1, 0);
  kdebug_trace();
  v10 = *(_DWORD *)(a1 + 24);
  if (v10 == 1)
  {
    MEMORY[0x23B83DBFC](v8, "BBoxObjectSegmentation");
    v51 = sub_239583400();
    v52[0] = v17;
    sub_23957A084((unsigned int *)&v51, (unsigned int *)&v51 + 1, v52, __p);
    v50 = 1;
    LOWORD(v49[0]) = 46;
    sub_23941AE44((uint64_t)__p[0], (uint64_t)__p[1], (uint64_t)v49, v48, v18, v19);
    if (*(char *)(a1 + 71) < 0)
      operator delete(*v7);
    *(std::string *)v7 = v48[0];
    *((_BYTE *)&v48[0].__r_.__value_.__s + 23) = 0;
    v48[0].__r_.__value_.__s.__data_[0] = 0;
    if (v50 < 0)
      operator delete(v49[0]);
    v20 = (void **)__p[0];
    if (__p[0])
    {
      v21 = (void **)__p[1];
      v22 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v21 - 1) < 0)
            operator delete(*(v21 - 3));
          v21 -= 3;
        }
        while (v21 != v20);
        v22 = __p[0];
      }
      __p[1] = v20;
      operator delete(v22);
    }
    v23 = 2;
  }
  else
  {
    if (!v10)
    {
      MEMORY[0x23B83DBFC](v8, "RGBObjectSegmentation");
      v51 = sub_239583400();
      v52[0] = v11;
      sub_23957A084((unsigned int *)&v51, (unsigned int *)&v51 + 1, v52, __p);
      v50 = 1;
      LOWORD(v49[0]) = 46;
      sub_23941AE44((uint64_t)__p[0], (uint64_t)__p[1], (uint64_t)v49, v48, v12, v13);
      if (*(char *)(a1 + 71) < 0)
        operator delete(*v7);
      *(std::string *)v7 = v48[0];
      *((_BYTE *)&v48[0].__r_.__value_.__s + 23) = 0;
      v48[0].__r_.__value_.__s.__data_[0] = 0;
      if (v50 < 0)
        operator delete(v49[0]);
      v14 = (void **)__p[0];
      if (__p[0])
      {
        v15 = (void **)__p[1];
        v16 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v15 - 1) < 0)
              operator delete(*(v15 - 3));
            v15 -= 3;
          }
          while (v15 != v14);
          v16 = __p[0];
        }
        __p[1] = v14;
        operator delete(v16);
      }
    }
    v23 = 0;
  }
  v24 = *((_QWORD *)a2 + 3);
  LOBYTE(v45) = 0;
  v47 = 0;
  sub_23955F6EC(v48, v23, v24, (uint64_t)&v45);
  if (v47 && v46 < 0)
    operator delete(v45);
  sub_23957A204((uint64_t)v48, (uint64_t)__p);
  if (v43)
  {
    sub_239A444D4((uint64_t)"unknown file", 62, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v25 = operator new();
  *(_OWORD *)v25 = *(_OWORD *)__p;
  v26 = v40;
  __p[1] = 0;
  v40 = 0;
  __p[0] = 0;
  *(_QWORD *)(v25 + 16) = v26;
  v27 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v25;
  if (v27)
  {
    v28 = sub_23964F698(v27);
    MEMORY[0x23B83E31C](v28, 0x60C40CE5A77A8);
  }
  v42 = &off_250ADC870;
  v29 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  nullsub_4(&v42);
  if (v41)
    sub_23964F698((uint64_t)__p);
  sub_23955F6F0((uint64_t)v48);
  v32 = operator new();
  sub_2397A9868((std::__shared_weak_count_vtbl **)v48);
  sub_23971AF90(v32, v48);
  size = (std::__shared_weak_count *)v48[0].__r_.__value_.__l.__size_;
  if (v48[0].__r_.__value_.__l.__size_)
  {
    v34 = (unint64_t *)(v48[0].__r_.__value_.__l.__size_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v36 = (_QWORD *)*v9;
  *v9 = v32;
  if (v36)
  {
    v37 = sub_239420C38(v36);
    MEMORY[0x23B83E31C](v37, 0x10E0C40BC756B95);
  }
  kdebug_trace();
  return a1;
}

void sub_239579F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  _QWORD **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;

  if (*(char *)(v16 - 105) < 0)
    operator delete(*(void **)(v16 - 128));
  sub_23941B08C(&a9);
  sub_239916980(v14);
  sub_239416DA0(v13);
  nullsub_4(v12);
  sub_23957A42C(v10);
  if (*(char *)(v9 + 95) < 0)
    operator delete(*v11);
  if (*(char *)(v9 + 71) < 0)
  {
    operator delete(*v15);
    sub_23948EAF8((uint64_t *)v9);
    _Unwind_Resume(a1);
  }
  sub_23948EAF8((uint64_t *)v9);
  _Unwind_Resume(a1);
}

void sub_23957A038(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0)
      operator delete(__p);
  }
  JUMPOUT(0x239579FD8);
}

void sub_23957A05C()
{
  JUMPOUT(0x239579FE0);
}

void sub_23957A064()
{
  uint64_t v0;
  _QWORD **v1;
  uint64_t v2;

  nullsub_4(v2);
  sub_23957A42C(v1);
  if ((*(char *)(v0 + 95) & 0x80000000) == 0)
    JUMPOUT(0x23957A008);
  JUMPOUT(0x23957A000);
}

void sub_23957A084(unsigned int *a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, _QWORD *a4@<X8>)
{
  std::string v7;
  std::string v8;
  std::string __p;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_23957F964(a1, &v7);
  sub_23957F964(a2, &v8);
  sub_23957F964(a3, &__p);
  sub_23941B674(a4, (uint64_t)&v7, 3uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(v7.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_7;
}

void sub_23957A17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a9);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a14 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_23957A1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;

  while (1)
  {
    if (*((char *)v9 - 1) < 0)
      operator delete((void *)*(v9 - 3));
    v9 -= 3;
    if (v9 == &a9)
      JUMPOUT(0x23957A1D0);
  }
}

uint64_t sub_23957A204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __n128 v21;
  uint64_t result;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)();
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  sub_239650328(a1, (uint64_t)&v28);
  v4 = v30;
  if (v30)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = &off_250ADC870;
    *(_BYTE *)(a2 + 40) = v4;
    v5 = v32;
    *(_QWORD *)(a2 + 48) = v31;
    *(_QWORD *)(a2 + 56) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = (std::__shared_weak_count *)operator new(0xC8uLL);
    sub_23957FA98((uint64_t)v8, a1);
    v24 = v8 + 1;
    v25 = v8;
    v9 = v28;
    v28 = 0;
    v23 = v9;
    sub_23957FBFC(&v26, (uint64_t *)&v24, &v23);
    *(_OWORD *)a2 = v26;
    v10 = v27;
    v27 = 0;
    v26 = 0uLL;
    *(_QWORD *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 24) = 1;
    *(_QWORD *)(a2 + 32) = &off_250ADC870;
    *(_BYTE *)(a2 + 40) = v30;
    v11 = v32;
    *(_QWORD *)(a2 + 48) = v31;
    *(_QWORD *)(a2 + 56) = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    sub_23964F698((uint64_t)&v26);
    v14 = v23;
    v23 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v25;
    if (v25)
    {
      v16 = (unint64_t *)&v25->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v29 = &off_250ADC870;
  v18 = v32;
  if (v32)
  {
    v19 = (unint64_t *)&v32->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = nullsub_4(&v29);
  result = v28;
  v28 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v21);
  return result;
}

void sub_23957A3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_239416DA0((uint64_t)va);
  sub_239490014((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_23957A3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  sub_239490014(&a16);
  _Unwind_Resume(a1);
}

void sub_23957A418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239490014((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD **sub_23957A42C(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_239420C38(v2);
    MEMORY[0x23B83E31C](v3, 0x10E0C40BC756B95);
  }
  return a1;
}

std::string *sub_23957A474(const std::string *a1, std::string *this, std::string *a3)
{
  std::string::operator=(this, a1 + 3);
  return std::string::operator=(a3, a1 + 2);
}

uint64_t sub_23957A4AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_23957A4B4(uint64_t *a1, _QWORD *a2, void **a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  signed int v67;
  unsigned int v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  void *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  _OWORD v95[2];
  void *__p;
  __int128 v97;
  _OWORD v98[6];
  int v99;
  __n128 v100;
  uint64_t v101;
  void *v102[3];
  _BYTE v103[32];
  uint64_t v104;
  char v105;
  char v106;
  uint64_t (**v107)();
  _BYTE v108[80];
  void *v109;
  void *v110;
  char *v111;
  void *v112;
  void *v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD v120[3];
  _QWORD *v121;
  _QWORD v122[3];
  _QWORD *v123;
  pthread_mutex_t v124;
  void *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  v118 = a6;
  v119 = a7;
  if (!*a1)
  {
    v11 = (char *)*a3;
    v13 = (char *)a3[1];
    if (v13 != *a3)
    {
      do
      {
        v14 = v13 - 88;
        sub_239416DA0((uint64_t)(v13 - 80));
        nullsub_4(v14);
        v13 = v14;
      }
      while (v14 != v11);
    }
    goto LABEL_15;
  }
  if (*((_DWORD *)a1 + 6) == 1)
  {
    if (!(_BYTE)a7 || a6[1] == *a6)
    {
      v11 = (char *)*a3;
      v10 = (char *)a3[1];
      if (v10 != *a3)
      {
        do
        {
          v12 = v10 - 88;
          sub_239416DA0((uint64_t)(v10 - 80));
          nullsub_4(v12);
          v10 = v12;
        }
        while (v12 != v11);
      }
LABEL_15:
      v17 = 0;
      a3[1] = v11;
      return v17;
    }
  }
  else if ((_BYTE)a7 && a6[1] != *a6)
  {
    v11 = (char *)*a3;
    v15 = (char *)a3[1];
    if (v15 != *a3)
    {
      do
      {
        v16 = v15 - 88;
        sub_239416DA0((uint64_t)(v15 - 80));
        nullsub_4(v16);
        v15 = v16;
      }
      while (v16 != v11);
    }
    goto LABEL_15;
  }
  v19 = (char *)a3[1];
  v20 = 0x2E8BA2E8BA2E8BA3 * ((v19 - (_BYTE *)*a3) >> 3);
  v21 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a2[1] - *a2) >> 3);
  if (v21 != v20)
  {
    if (v21 <= v20)
    {
      if (v21 < v20)
      {
        v22 = (uint64_t)*a3 - 0x2D2D2D2D2D2D2D28 * ((uint64_t)(a2[1] - *a2) >> 3);
        if (v19 != (char *)v22)
        {
          do
          {
            v23 = v19 - 88;
            sub_239416DA0((uint64_t)(v19 - 80));
            nullsub_4(v23);
            v19 = v23;
          }
          while (v23 != (char *)v22);
        }
        a3[1] = (void *)v22;
      }
    }
    else
    {
      sub_23957FCF0(a3, v21 - v20);
    }
  }
  v24 = *(_QWORD *)(*(_QWORD *)*a1 + 48);
  if (!*(_BYTE *)(v24 + 80))
    return 0;
  if (*(_BYTE *)(v24 + 52))
  {
    v25 = *(_DWORD *)(v24 + 48);
    v117 = v25;
    if (*(_BYTE *)(v24 + 60))
      goto LABEL_27;
  }
  else
  {
    v25 = 0;
    v117 = 0;
    if (*(_BYTE *)(v24 + 60))
    {
LABEL_27:
      v26 = *(_DWORD *)(v24 + 56);
      v116 = v26;
      if (*(_BYTE *)(v24 + 68))
        goto LABEL_28;
      goto LABEL_88;
    }
  }
  v26 = 0;
  v116 = 0;
  if (*(_BYTE *)(v24 + 68))
  {
LABEL_28:
    v27 = *(_DWORD *)(v24 + 64);
    v28 = a1[4];
    v115 = v28;
    v29 = a2[1] - *a2;
    if (v29)
      goto LABEL_29;
    return 1;
  }
LABEL_88:
  v27 = 0;
  v28 = a1[4];
  v115 = v28;
  v29 = a2[1] - *a2;
  if (!v29)
    return 1;
LABEL_29:
  if (0xF0F0F0F0F0F0F0F1 * (v29 >> 3) <= v28)
  {
    v113 = 0;
    v112 = 0;
    v114 = 0;
    if (v28)
    {
      if (v28 >> 62)
        sub_2394189F8();
      v112 = operator new(4 * v28);
      v114 = (char *)v112 + 4 * v28;
      bzero(v112, 4 * v28);
      v113 = v114;
      v109 = operator new(4 * v28);
      v111 = (char *)v109 + 4 * v28;
      bzero(v109, 4 * v28);
      v110 = v111;
    }
    else
    {
      v110 = 0;
      v109 = 0;
      v111 = 0;
    }
    LODWORD(v125) = v25;
    HIDWORD(v125) = v27 * v26;
    v107 = &off_250ADBC88;
    sub_239469E68(&v125, (uint64_t)v108);
    v106 = 0;
    v67 = std::thread::hardware_concurrency();
    if (v115 >= v67)
      v68 = v67;
    else
      v68 = v115;
    sub_2397A2A50((uint64_t)&v125, v68, 0);
    LOBYTE(__p) = 8;
    HIBYTE(v101) = 0;
    v100.n128_u8[0] = 0;
    sub_23957E1BC((uint64_t)v103, &__p, (uint64_t)&v100);
    if (SHIBYTE(v101) < 0)
      operator delete((void *)v100.n128_u64[0]);
    LOBYTE(v104) = 0;
    v105 = 0;
    sub_2397A1618(&v124);
    v69 = v115;
    v123 = 0;
    v70 = operator new(0x50uLL);
    *v70 = &off_250ADEB38;
    v70[1] = a1;
    v70[2] = a2;
    v70[3] = &v112;
    v70[4] = &v109;
    v70[5] = &v117;
    v70[6] = &v118;
    v70[7] = &v107;
    v70[8] = &v116;
    v70[9] = &v115;
    v123 = v70;
    sub_2397A376C((unint64_t *)&v125, v69, v122, 0);
    v71 = v123;
    if (v123 == v122)
    {
      v72 = 4;
      v71 = v122;
    }
    else
    {
      if (!v123)
        goto LABEL_115;
      v72 = 5;
    }
    (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_115:
    memset(v102, 0, sizeof(v102));
    sub_23957B5A4(&v93, &v107);
    __p = &off_250ADB210;
    v97 = v94;
    v94 = 0uLL;
    v98[0] = v95[0];
    *(_OWORD *)((char *)v98 + 14) = *(_OWORD *)((char *)v95 + 14);
    v99 = 2;
    sub_23957B5F0((uint64_t)&v100, (uint64_t)&__p);
    sub_23957B504((uint64_t)v102, (uint64_t)&v100);
    sub_23948FA9C((uint64_t)&v100);
    sub_23948FAF4((uint64_t)&__p);
    sub_239416FF8((uint64_t)&v93);
    sub_23964F5CC(*a1, v102, 0, 0, (uint64_t)&v100);
    sub_23957B68C((uint64_t)v103, &v100);
    sub_23948FF04((uint64_t)&v100);
    if (!v105)
    {
      sub_239A444D4((uint64_t)"unknown file", 474, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v81 = v104;
    v84 = a2;
    v82 = *a2;
    v83 = v84[1];
    v121 = 0;
    v85 = operator new(0x40uLL);
    *v85 = &off_250ADED48;
    v85[1] = a1;
    v85[2] = v81;
    v85[3] = &v117;
    v85[4] = a3;
    v85[5] = &v112;
    v85[6] = &v109;
    v85[7] = &v106;
    v121 = v85;
    sub_2397A376C((unint64_t *)&v125, 0xF0F0F0F0F0F0F0F1 * ((v83 - v82) >> 3), v120, 0);
    v86 = v121;
    if (v121 == v120)
    {
      v87 = 4;
      v86 = v120;
    }
    else
    {
      if (!v121)
      {
LABEL_121:
        v17 = v106 == 0;
        sub_23948FB4C(v102);
        sub_2397A163C(&v124);
        sub_23948FF04((uint64_t)v103);
        sub_2397A2E14(&v125);
        sub_239416DA0((uint64_t)v108);
        nullsub_4(&v107);
        if (v109)
        {
          v110 = v109;
          operator delete(v109);
        }
        if (v112)
        {
          v113 = v112;
          operator delete(v112);
        }
        return v17;
      }
      v87 = 5;
    }
    (*(void (**)(void))(*v86 + 8 * v87))();
    goto LABEL_121;
  }
  v126 = 0;
  v125 = 0;
  v127 = 0;
  v100 = 0uLL;
  v101 = 0;
  sub_23957B1D8((char **)&v125, v28);
  sub_23957B368((char **)&v100, v115);
  if (a2[1] != *a2)
  {
    v88 = a1;
    v89 = 0;
    v30 = 0;
    v31 = v126;
    v32 = (char *)v125;
    while (1)
    {
      if (v31 != v32)
      {
        do
        {
          v34 = v31 - 136;
          sub_239416DA0((uint64_t)(v31 - 128));
          nullsub_4(v34);
          v31 = v34;
        }
        while (v34 != v32);
      }
      v126 = v32;
      v35 = v100.n128_u64[1];
      v36 = v100.n128_u64[0];
      if (v100.n128_u64[1] != v100.n128_u64[0])
      {
        do
        {
          v37 = v35 - 88;
          sub_239416DA0(v35 - 80);
          nullsub_4(v37);
          v35 = v37;
        }
        while (v37 != v36);
      }
      v100.n128_u64[1] = v36;
      v39 = *a2;
      v38 = a2[1];
      if (v30 < 0xF0F0F0F0F0F0F0F1 * ((v38 - *a2) >> 3))
      {
        v40 = v126;
        v41 = 136 * v30;
        v42 = v30;
        do
        {
          if ((unint64_t)v40 >= v127)
          {
            v40 = sub_239572B3C(&v125, v39 + v41);
          }
          else
          {
            *(_QWORD *)v40 = &off_250ADBEA0;
            sub_239827500((uint64_t)(v40 + 8), v39 + v41 + 8);
            *((_WORD *)v40 + 64) = *(_WORD *)(v39 + v41 + 128);
            v40 += 136;
          }
          v126 = v40;
          ++v42;
          v39 = *a2;
          v38 = a2[1];
          v41 += 136;
        }
        while (v42 < 0xF0F0F0F0F0F0F0F1 * ((v38 - *a2) >> 3));
      }
      if (!(_BYTE)v119)
      {
        LOBYTE(v46) = 0;
        v92 &= 0xFFFFFFFFFFFFFF00;
        if (v126 == v125)
          goto LABEL_81;
        goto LABEL_79;
      }
      __p = 0;
      v97 = 0uLL;
      v43 = v115;
      if (v115)
        break;
      v44 = 0;
      v45 = v30;
      if (v30 < 0xF0F0F0F0F0F0F0F1 * ((v38 - v39) >> 3))
        goto LABEL_58;
LABEL_76:
      v46 = (unint64_t)v118;
      v92 = v119;
      if (v44)
      {
        *(_QWORD *)&v97 = v44;
        operator delete(v44);
      }
      v89 = v46 >> 8;
      if (v126 == v125)
        goto LABEL_81;
LABEL_79:
      v57 = 0;
      v58 = 0;
      v59 = 88 * v30;
      do
      {
        v60 = (char *)*a3;
        v61 = v100.n128_u64[0] + v57;
        sub_2398263BC((char *)*a3 + v59 + v57 + 8, v100.n128_u64[0] + v57 + 8);
        *(_WORD *)&v60[v59 + 80 + v57] = *(_WORD *)(v61 + 80);
        ++v58;
        v57 += 88;
      }
      while (v58 < 0xF0F0F0F0F0F0F0F1 * ((v126 - (_BYTE *)v125) >> 3));
LABEL_81:
      v17 = sub_23957A4B4(v88, &v125, &v100, a4, a5, v46 | (v89 << 8), v92);
      v32 = v126;
      if (v126 == v125)
      {
        v31 = v126;
      }
      else
      {
        v62 = 0;
        v63 = 0;
        v64 = 88 * v30;
        do
        {
          v65 = (char *)*a3;
          v66 = v100.n128_u64[0] + v62;
          sub_2398263BC((char *)*a3 + v64 + v62 + 8, v100.n128_u64[0] + v62 + 8);
          *(_WORD *)&v65[v64 + 80 + v62] = *(_WORD *)(v66 + 80);
          ++v63;
          v31 = v126;
          v32 = (char *)v125;
          v62 += 88;
        }
        while (v63 < 0xF0F0F0F0F0F0F0F1 * ((v126 - (_BYTE *)v125) >> 3));
      }
      v30 += v115;
      if (v30 < 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a2[1] - *a2) >> 3))
        v33 = v17;
      else
        v33 = 0;
      if ((v33 & 1) == 0)
        goto LABEL_103;
    }
    if (v115 >> 60)
      sub_2394189F8();
    v44 = operator new(16 * v115);
    __p = v44;
    *(_QWORD *)&v97 = v44;
    *((_QWORD *)&v97 + 1) = &v44[v43];
    v45 = v30;
    if (v30 >= 0xF0F0F0F0F0F0F0F1 * ((v38 - v39) >> 3))
      goto LABEL_76;
    while (1)
    {
LABEL_58:
      v48 = (_OWORD *)(*v118 + 16 * v45);
      if ((unint64_t)v44 < *((_QWORD *)&v97 + 1))
      {
        *v44 = *v48;
        v47 = v44 + 1;
      }
      else
      {
        v49 = __p;
        v50 = ((char *)v44 - (_BYTE *)__p) >> 4;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 60)
          sub_2394189F8();
        v52 = *((_QWORD *)&v97 + 1) - (_QWORD)__p;
        if ((uint64_t)(*((_QWORD *)&v97 + 1) - (_QWORD)__p) >> 3 > v51)
          v51 = v52 >> 3;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
          v53 = 0xFFFFFFFFFFFFFFFLL;
        else
          v53 = v51;
        if (v53)
        {
          if (v53 >> 60)
            sub_239418A80();
          v54 = (char *)operator new(16 * v53);
          v55 = &v54[16 * v50];
          *(_OWORD *)v55 = *v48;
          v56 = v55;
          if (v44 != v49)
          {
            do
            {
LABEL_70:
              *((_OWORD *)v56 - 1) = *(v44 - 1);
              v56 -= 16;
              --v44;
            }
            while (v44 != v49);
            v44 = __p;
            v47 = v55 + 16;
            __p = v56;
            *(_QWORD *)&v97 = v55 + 16;
            *((_QWORD *)&v97 + 1) = &v54[16 * v53];
            if (!v44)
              goto LABEL_57;
LABEL_74:
            operator delete(v44);
            goto LABEL_57;
          }
        }
        else
        {
          v54 = 0;
          v55 = (char *)(16 * v50);
          *(_OWORD *)(16 * v50) = *v48;
          v56 = (char *)(16 * v50);
          if (v44 != v49)
            goto LABEL_70;
        }
        v47 = v55 + 16;
        __p = v56;
        *(_QWORD *)&v97 = v55 + 16;
        *((_QWORD *)&v97 + 1) = &v54[16 * v53];
        if (v44)
          goto LABEL_74;
      }
LABEL_57:
      *(_QWORD *)&v97 = v47;
      ++v45;
      v44 = v47;
      if (v45 >= 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a2[1] - *a2) >> 3))
      {
        v44 = __p;
        goto LABEL_76;
      }
    }
  }
  v17 = 1;
LABEL_103:
  v73 = v100.n128_u64[0];
  if (v100.n128_u64[0])
  {
    v74 = v100.n128_u64[1];
    v75 = (void *)v100.n128_u64[0];
    if (v100.n128_u64[1] != v100.n128_u64[0])
    {
      do
      {
        v76 = v74 - 88;
        sub_239416DA0(v74 - 80);
        nullsub_4(v76);
        v74 = v76;
      }
      while (v76 != v73);
      v75 = (void *)v100.n128_u64[0];
    }
    v100.n128_u64[1] = v73;
    operator delete(v75);
  }
  v77 = (char *)v125;
  if (v125)
  {
    v78 = v126;
    v79 = v125;
    if (v126 != v125)
    {
      do
      {
        v80 = v78 - 136;
        sub_239416DA0((uint64_t)(v78 - 128));
        nullsub_4(v80);
        v78 = v80;
      }
      while (v80 != v77);
      v79 = v125;
    }
    v126 = v77;
    operator delete(v79);
  }
  return v17;
}

void sub_23957AFE8(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_23957B14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  sub_239554DA4(&a37);
  sub_239557AA8((void **)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_23957B1D8(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;

  v2 = *a1;
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x1E1E1E1E1E1E1E2)
      sub_2394189F8();
    v4 = a1[1];
    v5 = 136 * a2;
    v6 = (char *)operator new(136 * a2);
    v7 = &v6[v4 - v2];
    v10 = &v6[v5];
    if (v4 == v2)
    {
      *a1 = v7;
      a1[1] = v7;
      a1[2] = &v6[v5];
    }
    else
    {
      v8 = 0;
      do
      {
        *(_QWORD *)&v7[v8 - 136] = &off_250ADBEA0;
        sub_239827500((uint64_t)&v7[v8 - 128], (uint64_t)&v4[v8 - 128]);
        *(_WORD *)&v7[v8 - 8] = *(_WORD *)&v4[v8 - 8];
        v8 -= 136;
      }
      while (&v4[v8] != v2);
      v9 = *a1;
      v2 = a1[1];
      *a1 = &v7[v8];
      a1[1] = v7;
      a1[2] = v10;
      if (v2 != v9)
      {
        do
        {
          sub_239416DA0((uint64_t)(v2 - 128));
          nullsub_4(v2 - 136);
          v2 -= 136;
        }
        while (v2 != v9);
        v2 = v9;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_23957B368(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;

  v2 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      sub_2394189F8();
    v4 = a1[1];
    v5 = 88 * a2;
    v6 = (char *)operator new(88 * a2);
    v7 = &v6[v4 - v2];
    v10 = &v6[v5];
    if (v4 == v2)
    {
      *a1 = v7;
      a1[1] = v7;
      a1[2] = &v6[v5];
    }
    else
    {
      v8 = 0;
      do
      {
        *(_QWORD *)&v7[v8 - 88] = &off_250ADB628;
        sub_23982619C((uint64_t)&v7[v8 - 80], (uint64_t)&v4[v8 - 80]);
        *(_WORD *)&v7[v8 - 8] = *(_WORD *)&v4[v8 - 8];
        v8 -= 88;
      }
      while (&v4[v8] != v2);
      v9 = *a1;
      v2 = a1[1];
      *a1 = &v7[v8];
      a1[1] = v7;
      a1[2] = v10;
      if (v2 != v9)
      {
        do
        {
          sub_239416DA0((uint64_t)(v2 - 80));
          nullsub_4(v2 - 88);
          v2 -= 88;
        }
        while (v2 != v9);
        v2 = v9;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_23957B504(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  char *result;
  char v6;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_239490B68((char **)a1, a2);
    *(_QWORD *)(a1 + 8) = result;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_DWORD *)(v3 + 120) = -1;
    v4 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *, unint64_t, uint64_t))off_250ADECE0[v4])(&v6, v3, a2);
      *(_DWORD *)(v3 + 120) = v4;
    }
    result = (char *)(v3 + 128);
    *(_QWORD *)(a1 + 8) = v3 + 128;
  }
  return result;
}

_QWORD *sub_23957B5A4(_QWORD *a1, _QWORD *a2)
{
  *a1 = &off_250ADB210;
  sub_239581714(a2, (uint64_t)(a1 + 1));
  return a1;
}

void sub_23957B5DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23957B5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[2];

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 120) = -1;
  v3 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_250ADEAB8[v3])(v5, a1, a2);
    *(_DWORD *)(a1 + 120) = v3;
  }
  return a1;
}

void sub_23957B650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_250ADEAA0[v15])(&a13, v13);
  *(_DWORD *)(v13 + 120) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_23957B68C(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  *(_BYTE *)(a1 + 8) = a2->n128_u8[8];
  v5 = a2[1].n128_u64[0];
  v4 = a2[1].n128_u64[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_23957E5F8((void **)(a1 + 32), a2 + 2);
  return a1;
}

uint64_t sub_23957B728(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, char a5, uint64_t *a6, float a7)
{
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  int v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  float v35;
  float v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  float v41;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _BYTE *v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __n128 v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __n128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  __int16 v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  char *v85;
  int v86;
  char *v87;
  __n128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  __n128 v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  __n128 v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  __n128 v120;
  uint64_t v121;
  __int128 v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  __int16 v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  char *v131;
  int v132;
  char *v133;
  __n128 v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  BOOL v145;
  int v147;
  float v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  size_t v153;
  unsigned int v154;
  unint64_t v155;
  int v156;
  uint64_t v157;
  float v158;
  int v159;
  int v160;
  uint64_t v161;
  float v162;
  unint64_t v163;
  int v164;
  unsigned int v165;
  float v166;
  int v167;
  int v168;
  _DWORD *v169;
  __int128 v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void **v177;
  void *v178;
  void **v179;
  void *v180;
  void **v181;
  void *v182;
  void **v183;
  void *v184;
  char *v185;
  void **v186;
  void *v187;
  char *v188;
  void **v189;
  void **v190;
  void **v191;
  void **v192;
  void **v193;
  char *v194;
  char *v195;
  __int128 v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  __int128 v200;
  unint64_t *v201;
  __n128 v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  __n128 v206;
  BOOL v207;
  char *v208;
  char *v209;
  void *v210;
  void **v211;
  void *v212;
  void **v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  char *v217;
  char *v218;
  void *v219;
  char *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unsigned int v229;
  _QWORD v230[3];
  uint64_t (**v231)();
  __int128 v232;
  _OWORD v233[2];
  uint64_t (**v234)();
  __int128 v235;
  _BYTE v236[30];
  int v237;
  _QWORD v238[3];
  void *v239;
  char *v240;
  unint64_t v241[5];
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  int v245;
  void *v246[12];
  unsigned int v247[4];
  void *v248;
  char *v249;
  unint64_t v250;
  char v251[8];
  char v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  void *v255[3];
  char v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  char v261;
  _BYTE __p[56];
  __int128 v263;
  void *v264;
  std::__shared_weak_count *v265;
  void *v266;
  int v267;
  uint64_t v268;

  v268 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  kdebug_trace();
  if (!*(_QWORD *)a1)
    return 0;
  v14 = *(_QWORD *)(**(_QWORD **)a1 + 48);
  if (!*(_BYTE *)(v14 + 80))
    return 0;
  if (*(_BYTE *)(v14 + 52))
  {
    v15 = *(unsigned int *)(v14 + 48);
    v16 = *(unsigned __int8 *)(v14 + 60);
    if (!*(_BYTE *)(v14 + 60))
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v16 = *(unsigned __int8 *)(v14 + 60);
  if (*(_BYTE *)(v14 + 60))
LABEL_5:
    v16 = *(_DWORD *)(v14 + 56);
LABEL_6:
  if (*(_BYTE *)(v14 + 68))
  {
    v17 = *(_DWORD *)(v14 + 64);
    if (!*(_BYTE *)(v14 + 76))
LABEL_336:
      sub_239EC08D0();
  }
  else
  {
    v17 = 0;
    if (!*(_BYTE *)(v14 + 76))
      goto LABEL_336;
  }
  v19 = *(unsigned int *)(v14 + 72);
  if ((_DWORD)v19 != 1)
    goto LABEL_336;
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 168) || v17 * (unint64_t)v16 * v19 != *(_DWORD *)(a1 + 172))
  {
    LODWORD(v234) = v15;
    HIDWORD(v234) = v17 * v16;
    *(_QWORD *)__p = &off_250ADBC88;
    sub_239469E68(&v234, (uint64_t)&__p[8]);
    v20 = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    v21 = *(std::__shared_weak_count **)(a1 + 120);
    *(_OWORD *)(a1 + 112) = v20;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = *(_OWORD *)&__p[40];
    *(_OWORD *)(a1 + 128) = *(_OWORD *)&__p[24];
    *(_OWORD *)(a1 + 144) = v24;
    *(_OWORD *)(a1 + 160) = v263;
    *(_QWORD *)(a1 + 176) = v264;
    sub_239416DA0((uint64_t)&__p[8]);
    nullsub_4(__p);
  }
  v260 = 0;
  v259 = 0;
  v258 = 0;
  v257 = 0;
  v25 = *(_DWORD *)(a2 + 16);
  if (v25 == 1)
  {
    v30 = *(_QWORD *)a2;
    v32 = *(std::__shared_weak_count **)(a2 + 8);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v257 = v30;
    v258 = v32;
    if (sub_23979A918(v30) != 875704422 && sub_23979A918(v30) != 875704438)
    {
      sub_239A444D4((uint64_t)"unknown file", 564, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v31 = sub_23979C8D0(v30);
    v229 = sub_23979CAD8(v30);
    v27 = 0;
  }
  else if (v25)
  {
    v30 = 0;
    v27 = 0;
    v229 = 0;
    v31 = 0;
  }
  else
  {
    v27 = *(_QWORD *)a2;
    v26 = *(std::__shared_weak_count **)(a2 + 8);
    if (v26)
    {
      v28 = (unint64_t *)&v26->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = 0;
    v259 = v27;
    v260 = v26;
    v31 = *(_DWORD *)(v27 + 112);
    v229 = *(_DWORD *)(v27 + 116);
  }
  LOBYTE(v234) = 8;
  __p[23] = 0;
  __p[0] = 0;
  sub_23957E1BC((uint64_t)v251, &v234, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  LOBYTE(v255[0]) = 0;
  v256 = 0;
  v248 = 0;
  v249 = 0;
  v250 = 0;
  if (a5)
  {
    v35 = (float)v15 / (float)v31;
    v36 = (float)v15 / (float)v229;
    v38 = *a4;
    v37 = a4[1];
    v40 = a4[2];
    v39 = a4[3];
    v41 = fabsf(v36 + -1.0);
    if (fabsf(v35 + -1.0) > 0.00000011921 || v41 > 0.00000011921)
    {
      v38 = (float)(v35 * (float)v38);
      v37 = (float)(v35 * (float)v37);
      v40 = (float)(v36 * (float)v40);
      v39 = (float)(v36 * (float)v39);
    }
    v43 = *(_DWORD *)(a1 + 16);
    v44 = (v38 - v43) & ~((int)(v38 - v43) >> 31);
    v45 = v37 + v43;
    if (v45 >= (int)v15)
      v45 = v15;
    v247[0] = v44;
    v247[1] = v45;
    v46 = (v40 - v43) & ~((int)(v40 - v43) >> 31);
    v47 = v39 + v43;
    if (v47 >= (int)v15)
      v47 = v15;
    v247[2] = v46;
    v247[3] = v47;
    v246[0] = &off_250ADB628;
    sub_239422F30(&v246[1]);
    sub_23957D410(v15, v15, v15, v15, v247, (uint64_t)v246);
    *(_QWORD *)&v243 = &off_250ADB350;
    sub_23941CBA8((uint64_t)v246, (uint64_t *)&v243 + 1);
    sub_23946A0B4(a1 + 104, &v242);
    v48 = *(_QWORD *)(a1 + 136);
    LODWORD(v231) = 4 * v15;
    HIDWORD(v231) = v15;
    if (4 * (_DWORD)v15)
      v49 = (_DWORD)v15 == 0;
    else
      v49 = 1;
    *(_QWORD *)__p = v48;
    v239 = &off_250ADB3D0;
    v50 = v15 << 34;
    if (v49)
      v50 = 0;
    v234 = (uint64_t (**)())(v50 | (4 * (_DWORD)v15 != 0));
    sub_23957FFF4(__p, &v231, (uint64_t *)&v234, (uint64_t)&v240);
    if (v27)
    {
      *(_QWORD *)__p = &off_250ADB468;
      sub_239425F30(v27, (uint64_t *)&__p[8]);
      sub_239711914((uint64_t)__p, (uint64_t)&v239, 0, 1, (uint64_t)&v243, 1u);
      v51 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v52 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = __p;
    }
    else
    {
      v66 = *(_QWORD *)(v30 + 8);
      v65 = *(_QWORD *)(v30 + 16);
      v238[0] = &off_250AE94F0;
      v238[1] = v66;
      v238[2] = v65;
      if (v65)
      {
        v67 = (unint64_t *)(v65 + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      sub_239419164((uint64_t)__p, (uint64_t)v238);
      sub_23979BCF4(v238);
      sub_239713404((uint64_t)__p, (uint64_t)&v239, 1, (uint64_t)&v243, 1u);
      v69 = v265;
      if (v265)
      {
        v70 = (unint64_t *)&v265->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = nullsub_4((char *)&v263 + 8);
      v73 = *(std::__shared_weak_count **)&__p[24];
      if (*(_QWORD *)&__p[24])
      {
        v74 = (unint64_t *)(*(_QWORD *)&__p[24] + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v73->__on_zero_shared)(v73, v72);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v54 = &__p[8];
    }
    nullsub_4(v54);
    v231 = &off_250ADB210;
    sub_239581714((_QWORD *)(a1 + 104), (uint64_t)&v232);
    v76 = v232;
    v234 = &off_250ADB210;
    v235 = v232;
    v232 = 0uLL;
    *(_OWORD *)v236 = v233[0];
    *(_OWORD *)&v236[14] = *(_OWORD *)((char *)v233 + 14);
    v237 = 2;
    v267 = -1;
    *(_QWORD *)__p = &off_250ADB210;
    if (*((_QWORD *)&v76 + 1))
    {
      v77 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
      v79 = *(_QWORD *)&v236[16];
      v80 = *(_DWORD *)&v236[24];
      v81 = *(_WORD *)&v236[28];
      do
        v82 = __ldxr(v77);
      while (__stxr(v82 + 1, v77));
    }
    else
    {
      v79 = *(_QWORD *)&v236[16];
      v80 = *(_DWORD *)&v236[24];
      v81 = *(_WORD *)&v236[28];
    }
    *(_OWORD *)&__p[8] = v76;
    *(_QWORD *)&__p[24] = *(_QWORD *)v236;
    *(_DWORD *)&__p[32] = *(_DWORD *)&v236[8];
    *(_QWORD *)&__p[40] = v79;
    *(_DWORD *)&__p[48] = v80;
    *(_WORD *)&__p[52] = v81;
    if (!*((_QWORD *)&v76 + 1))
      goto LABEL_98;
    v83 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v76 + 1));
      v267 = 2;
      v85 = v249;
      if ((unint64_t)v249 < v250)
        goto LABEL_99;
    }
    else
    {
LABEL_98:
      v267 = 2;
      v85 = v249;
      if ((unint64_t)v249 < v250)
      {
LABEL_99:
        *v85 = 0;
        *((_DWORD *)v85 + 30) = -1;
        v86 = v267;
        if (v267 != -1)
        {
          ((void (*)(char *, char *, _BYTE *))off_250ADECE0[v267])(&v261, v85, __p);
          *((_DWORD *)v85 + 30) = v86;
        }
        v87 = v85 + 128;
        goto LABEL_104;
      }
    }
    v87 = sub_239490B68((char **)&v248, (uint64_t)__p);
LABEL_104:
    v249 = v87;
    if (v267 != -1)
      ((void (*)(char *, _BYTE *))off_250ADEAA0[v267])(&v261, __p);
    v267 = -1;
    if (v237 != -1)
      ((void (*)(char *, uint64_t (***)()))off_250ADEAA0[v237])(&v261, &v234);
    v237 = -1;
    v88 = nullsub_4(v233);
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
    v55 = v229;
    if (*((_QWORD *)&v232 + 1))
    {
      v90 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v88);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    nullsub_4(&v231);
    kdebug_trace();
    kdebug_trace();
    sub_23964F5CC(*(_QWORD *)a1, &v248, 0, 0, (uint64_t)__p);
    v252 = __p[8];
    v92 = *(_QWORD *)&__p[16];
    v93 = *(std::__shared_weak_count **)&__p[24];
    if (*(_QWORD *)&__p[24])
    {
      v94 = (unint64_t *)(*(_QWORD *)&__p[24] + 8);
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    v96 = v254;
    v253 = v92;
    v254 = v93;
    if (v96)
    {
      v97 = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    sub_23957E5F8(v255, (__n128 *)&__p[32]);
    sub_23948FF04((uint64_t)__p);
    kdebug_trace();
    v99 = (std::__shared_weak_count *)v241[0];
    if (v241[0])
    {
      v100 = (unint64_t *)(v241[0] + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v102 = nullsub_4(&v239);
    v103 = v242;
    v242 = 0;
    if (v103)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v103 + 8))(v103, v102);
    v104 = (std::__shared_weak_count *)v244;
    if ((_QWORD)v244)
    {
      v105 = (unint64_t *)(v244 + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v104->__on_zero_shared)(v104, v102);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    nullsub_4(&v243);
    sub_239416DA0((uint64_t)&v246[1]);
    nullsub_4(v246);
    goto LABEL_189;
  }
  sub_23946A0B4(a1 + 104, &v243);
  v55 = v229;
  v56 = *(_QWORD *)(a1 + 136);
  LODWORD(v239) = v15;
  HIDWORD(v239) = v15;
  if ((_DWORD)v15)
    v57 = 3;
  else
    v57 = 0;
  v58 = (v57 * v15);
  *(_QWORD *)__p = v56;
  v234 = &off_250ADCAF8;
  if ((_DWORD)v15)
    v59 = (void *)((v58 << 32) | 3);
  else
    v59 = 0;
  v246[0] = v59;
  sub_2395823D4((uint64_t *)__p, &v239, v246, (uint64_t)&v235);
  if (v27)
  {
    *(_QWORD *)__p = &off_250ADB468;
    sub_239425F30(v27, (uint64_t *)&__p[8]);
    sub_239710518((uint64_t)__p, (uint64_t)&v234, 0, 1, 0, 0);
    v60 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v61 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = nullsub_4(__p);
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
    if (!*((_QWORD *)&v235 + 1))
      goto LABEL_152;
LABEL_148:
    v118 = (unint64_t *)&v64->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v64->__on_zero_shared)(v64, v63);
      std::__shared_weak_count::__release_weak(v64);
    }
    goto LABEL_152;
  }
  v108 = *(_QWORD *)(v30 + 8);
  v107 = *(_QWORD *)(v30 + 16);
  v230[0] = &off_250AE94F0;
  v230[1] = v108;
  v230[2] = v107;
  if (v107)
  {
    v109 = (unint64_t *)(v107 + 8);
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  sub_239419164((uint64_t)__p, (uint64_t)v230);
  sub_23979BCF4(v230);
  std::chrono::system_clock::now();
  sub_239712D2C((uint64_t)__p, (uint64_t)&v234, 1, 0, 0);
  v111 = v265;
  if (v265)
  {
    v112 = (unint64_t *)&v265->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = nullsub_4((char *)&v263 + 8);
  v115 = *(std::__shared_weak_count **)&__p[24];
  if (*(_QWORD *)&__p[24])
  {
    v116 = (unint64_t *)(*(_QWORD *)&__p[24] + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v115->__on_zero_shared)(v115, v114);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v63 = nullsub_4(&__p[8]);
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
  if (*((_QWORD *)&v235 + 1))
    goto LABEL_148;
LABEL_152:
  v120 = nullsub_4(&v234);
  v121 = v243;
  *(_QWORD *)&v243 = 0;
  if (v121)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v121 + 8))(v121, v120);
  v246[0] = &off_250ADB210;
  sub_239581714((_QWORD *)(a1 + 104), (uint64_t)&v246[1]);
  v122 = *(_OWORD *)&v246[1];
  v234 = &off_250ADB210;
  v235 = *(_OWORD *)&v246[1];
  *(_OWORD *)&v246[1] = 0uLL;
  *(_OWORD *)v236 = *(_OWORD *)&v246[3];
  *(_OWORD *)&v236[14] = *(_OWORD *)((char *)&v246[4] + 6);
  v237 = 2;
  v267 = -1;
  *(_QWORD *)__p = &off_250ADB210;
  if (*((_QWORD *)&v122 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
    v125 = *(_QWORD *)&v236[16];
    v126 = *(_DWORD *)&v236[24];
    v127 = *(_WORD *)&v236[28];
    do
      v128 = __ldxr(v123);
    while (__stxr(v128 + 1, v123));
  }
  else
  {
    v125 = *(_QWORD *)&v236[16];
    v126 = *(_DWORD *)&v236[24];
    v127 = *(_WORD *)&v236[28];
  }
  *(_OWORD *)&__p[8] = v122;
  *(_QWORD *)&__p[24] = *(_QWORD *)v236;
  *(_DWORD *)&__p[32] = *(_DWORD *)&v236[8];
  *(_QWORD *)&__p[40] = v125;
  *(_DWORD *)&__p[48] = v126;
  *(_WORD *)&__p[52] = v127;
  if (!*((_QWORD *)&v122 + 1))
    goto LABEL_165;
  v129 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
  do
    v130 = __ldaxr(v129);
  while (__stlxr(v130 - 1, v129));
  if (!v130)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v122 + 1) + 16))(*((_QWORD *)&v122 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v122 + 1));
    v267 = 2;
    v131 = v249;
    if ((unint64_t)v249 < v250)
      goto LABEL_166;
  }
  else
  {
LABEL_165:
    v267 = 2;
    v131 = v249;
    if ((unint64_t)v249 < v250)
    {
LABEL_166:
      *v131 = 0;
      *((_DWORD *)v131 + 30) = -1;
      v132 = v267;
      if (v267 != -1)
      {
        ((void (*)(__int128 *, char *, _BYTE *))off_250ADECE0[v267])(&v243, v131, __p);
        *((_DWORD *)v131 + 30) = v132;
      }
      v133 = v131 + 128;
      goto LABEL_171;
    }
  }
  v133 = sub_239490B68((char **)&v248, (uint64_t)__p);
LABEL_171:
  v249 = v133;
  if (v267 != -1)
    ((void (*)(__int128 *, _BYTE *))off_250ADEAA0[v267])(&v243, __p);
  v267 = -1;
  if (v237 != -1)
    ((void (*)(__int128 *, uint64_t (***)()))off_250ADEAA0[v237])(&v243, &v234);
  v237 = -1;
  v134 = nullsub_4(&v246[3]);
  v135 = (std::__shared_weak_count *)v246[2];
  if (v246[2])
  {
    v136 = (unint64_t *)((char *)v246[2] + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v135->__on_zero_shared)(v135, v134);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  nullsub_4(v246);
  kdebug_trace();
  kdebug_trace();
  sub_23964F5CC(*(_QWORD *)a1, &v248, 0, 0, (uint64_t)__p);
  v252 = __p[8];
  v138 = *(_QWORD *)&__p[16];
  v139 = *(std::__shared_weak_count **)&__p[24];
  if (*(_QWORD *)&__p[24])
  {
    v140 = (unint64_t *)(*(_QWORD *)&__p[24] + 8);
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  v142 = v254;
  v253 = v138;
  v254 = v139;
  if (v142)
  {
    v143 = (unint64_t *)&v142->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  sub_23957E5F8(v255, (__n128 *)&__p[32]);
  sub_23948FF04((uint64_t)__p);
  kdebug_trace();
LABEL_189:
  kdebug_trace();
  sub_239490E34((uint64_t)v255[0], (uint64_t)__p);
  if (*(_DWORD *)&__p[20])
    v145 = *(_DWORD *)&__p[12] == 0;
  else
    v145 = 1;
  if (v145 || HIDWORD(*(_QWORD *)&__p[12]) == 0)
    v147 = 0;
  else
    v147 = *(_DWORD *)&__p[20];
  if (v147 * *(_DWORD *)&__p[40] == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  LODWORD(v243) = v15;
  DWORD1(v243) = v15;
  v234 = &off_250ADED08;
  LOBYTE(v246[0]) = (_DWORD)v15 != 0;
  HIDWORD(v246[0]) = v15;
  sub_239581874(__p, &v243, (uint64_t *)v246, (uint64_t)&v235);
  v148 = (float)v15;
  *(float *)&v231 = (float)v31 / (float)v15;
  *(float *)v247 = (float)v55 / (float)v15;
  if (a7 > 0.0 && *(_BYTE *)(a1 + 40) && *a6)
  {
    if ((_DWORD)v15 != *(_DWORD *)(a1 + 192) || (_DWORD)v15 != *(_DWORD *)(a1 + 196))
    {
      __p[0] = v15;
      __p[1] = BYTE1(v15);
      __p[2] = BYTE2(v15);
      __p[3] = BYTE3(v15);
      __p[4] = v15;
      __p[5] = BYTE1(v15);
      __p[6] = BYTE2(v15);
      __p[7] = BYTE3(v15);
      __p[8] = (_DWORD)v15 != 0;
      __p[12] = v15;
      __p[13] = BYTE1(v15);
      __p[14] = BYTE2(v15);
      __p[15] = BYTE3(v15);
      __p[16] = 0;
      __p[24] = 0;
      v149 = 3;
      if (((4 * v15) & (4 * v15 - 1)) == 0)
        v149 = 4 * v15 - 1;
      v150 = v149 | (v149 >> 1) | ((v149 | (v149 >> 1)) >> 2);
      v151 = v150 | (v150 >> 4) | ((v150 | (v150 >> 4)) >> 8);
      v152 = v151 | (v151 >> 16) | ((v151 | (v151 >> 16)) >> 32);
      if (v152 + 1 > 8)
        v153 = v152 + 1;
      else
        v153 = 8;
      sub_2399168C0(&__p[32], (4 * v15 * v15) & 0x3FFFFFFFCLL, v153);
      *(_QWORD *)&v263 = v15 | ((unint64_t)v15 << 32);
      *((_QWORD *)&v263 + 1) = 4 * (((_DWORD)v15 != 0) | ((unint64_t)v15 << 32));
      *(_OWORD *)(a1 + 192) = *(_OWORD *)__p;
      *(_OWORD *)(a1 + 204) = *(_OWORD *)&__p[12];
      *(_OWORD *)(a1 + 248) = v263;
      sub_23991693C((_QWORD *)(a1 + 224), &__p[32]);
      sub_239916980((uint64_t)&__p[32]);
    }
    kdebug_trace();
    if ((_DWORD)v15)
    {
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v157 = *a6;
      v158 = (float)*(unsigned int *)(*a6 + 64) / v148;
      v159 = *(_DWORD *)&v236[16];
      v160 = *(_DWORD *)&v236[20];
      v161 = *(_QWORD *)v236;
      v162 = (float)*(unsigned int *)(*a6 + 68) / v148;
      while (1)
      {
        v163 = 0;
        v164 = vcvtms_u32_f32(v162 * (float)v155);
        v165 = v154;
        do
        {
          while (1)
          {
            v166 = *(float *)(v161 + 4 * v165);
            if ((float)(v166 * 255.0) <= 128.0)
            {
              v167 = *(_DWORD *)(a1 + 200);
              v168 = *(_DWORD *)(a1 + 204);
              v169 = *(_DWORD **)(a1 + 232);
              break;
            }
            v167 = *(_DWORD *)(a1 + 200);
            v168 = *(_DWORD *)(a1 + 204);
            v169 = *(_DWORD **)(a1 + 232);
            if (*(float *)(*(_QWORD *)(v157 + 56)
                          + 4
                          * (*(_DWORD *)(v157 + 72) * vcvtms_u32_f32(v158 * (float)v163)
                           + *(_DWORD *)(v157 + 76) * v164)) <= a7)
              break;
            v169[(v167 * v163 + v168 * v155)] = 0;
            ++v156;
            ++v163;
            v165 += v159;
            if (v15 == v163)
              goto LABEL_212;
          }
          *(float *)&v169[(v168 * v155 + v167 * v163++)] = v166;
          v165 += v159;
        }
        while (v15 != v163);
LABEL_212:
        ++v155;
        v154 += v160;
        if (v155 == v15)
        {
          if (v156 > 1000)
          {
            LODWORD(v239) = v15;
            HIDWORD(v239) = v15;
            v246[0] = v169;
            *(_QWORD *)__p = &off_250ADED08;
            *(_QWORD *)&v243 = ((_DWORD)v15 != 0) | ((unint64_t)v15 << 32);
            sub_239581874(v246, &v239, (uint64_t *)&v243, (uint64_t)&__p[8]);
            v170 = *(_OWORD *)&__p[8];
            *(_QWORD *)&__p[8] = 0;
            *(_QWORD *)&__p[16] = 0;
            v171 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
            v235 = v170;
            if (v171)
            {
              v172 = (unint64_t *)&v171->__shared_owners_;
              do
                v173 = __ldaxr(v172);
              while (__stlxr(v173 - 1, v172));
              if (!v173)
              {
                ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                std::__shared_weak_count::__release_weak(v171);
              }
            }
            *(_OWORD *)v236 = *(_OWORD *)&__p[24];
            *(_OWORD *)&v236[10] = *(_OWORD *)&__p[34];
            v174 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v175 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v176 = __ldaxr(v175);
              while (__stlxr(v176 - 1, v175));
              if (!v176)
              {
                ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                std::__shared_weak_count::__release_weak(v174);
              }
            }
            nullsub_4(__p);
          }
          break;
        }
      }
    }
    kdebug_trace();
    v55 = v229;
  }
  memset(v246, 0, 32);
  LODWORD(v246[4]) = 1065353216;
  sub_239719E98((uint64_t)__p, 14, (uint64_t)v246, 255.0, 0.0);
  v243 = 0u;
  v244 = 0u;
  v245 = 1065353216;
  sub_239719E98((uint64_t)&v263, 3, (uint64_t)&v243, 0.0, 0.0);
  sub_23942818C(&v239, (uint64_t)__p, 2uLL);
  v177 = (void **)v266;
  if (v266)
  {
    do
    {
      v189 = (void **)*v177;
      if (*((char *)v177 + 39) < 0)
        operator delete(v177[2]);
      operator delete(v177);
      v177 = v189;
    }
    while (v189);
  }
  v178 = v264;
  v264 = 0;
  if (v178)
    operator delete(v178);
  v179 = *(void ***)&__p[32];
  if (*(_QWORD *)&__p[32])
  {
    do
    {
      v190 = (void **)*v179;
      if (*((char *)v179 + 39) < 0)
        operator delete(v179[2]);
      operator delete(v179);
      v179 = v190;
    }
    while (v190);
  }
  v180 = *(void **)&__p[16];
  *(_QWORD *)&__p[16] = 0;
  if (v180)
    operator delete(v180);
  v181 = (void **)v244;
  if ((_QWORD)v244)
  {
    do
    {
      v191 = (void **)*v181;
      if (*((char *)v181 + 39) < 0)
        operator delete(v181[2]);
      operator delete(v181);
      v181 = v191;
    }
    while (v191);
  }
  v182 = (void *)v243;
  *(_QWORD *)&v243 = 0;
  if (v182)
    operator delete(v182);
  v183 = (void **)v246[2];
  if (v246[2])
  {
    do
    {
      v192 = (void **)*v183;
      if (*((char *)v183 + 39) < 0)
        operator delete(v183[2]);
      operator delete(v183);
      v183 = v192;
    }
    while (v192);
  }
  v184 = v246[0];
  v246[0] = 0;
  if (v184)
    operator delete(v184);
  if (fabsf(*(float *)&v231 + -1.0) > 0.00000011921 || fabsf(*(float *)v247 + -1.0) > 0.00000011921)
  {
    LODWORD(v246[0]) = 9;
    v185 = v240;
    if ((unint64_t)v240 >= v241[0])
    {
      v188 = (char *)sub_239428D8C(&v239, (int *)v246, (float *)&v231, (float *)v247);
    }
    else
    {
      memset(__p, 0, 32);
      *(_DWORD *)&__p[32] = 1065353216;
      sub_239719E98((uint64_t)v240, 9, (uint64_t)__p, *(float *)&v231, *(float *)v247);
      v186 = *(void ***)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        do
        {
          v193 = (void **)*v186;
          if (*((char *)v186 + 39) < 0)
            operator delete(v186[2]);
          operator delete(v186);
          v186 = v193;
        }
        while (v193);
      }
      v187 = *(void **)__p;
      *(_QWORD *)__p = 0;
      if (v187)
        operator delete(v187);
      v188 = v185 + 56;
    }
    v240 = v188;
  }
  if ((*(_DWORD *)(a1 + 8) & 0x80000000) == 0)
  {
    *(_DWORD *)__p = 12;
    v194 = v240;
    if ((unint64_t)v240 >= v241[0])
    {
      v195 = (char *)sub_23958252C(&v239, (int *)__p, (int *)(a1 + 8), (int *)(a1 + 12));
    }
    else
    {
      sub_2395827A8((uint64_t)v241, (uint64_t)v240, (int *)__p, (int *)(a1 + 8), (int *)(a1 + 12));
      v195 = v194 + 56;
    }
    v240 = v195;
  }
  if (*(_DWORD *)(a3 + 64) == v31 && *(_DWORD *)(a3 + 68) == v55)
  {
    if ((_DWORD)v15 == v55 && (_DWORD)v15 == v31)
      goto LABEL_289;
    LODWORD(v246[0]) = v15;
    HIDWORD(v246[0]) = v15;
    *(_QWORD *)__p = &off_250ADB628;
    sub_2395793A0(v246, &__p[8]);
    v196 = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    v197 = *(std::__shared_weak_count **)(a3 + 16);
    *(_OWORD *)(a3 + 8) = v196;
    if (v197)
    {
      v198 = (unint64_t *)&v197->__shared_owners_;
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      goto LABEL_286;
    }
  }
  else
  {
    v246[0] = (void *)__PAIR64__(v55, v31);
    *(_QWORD *)__p = &off_250ADB628;
    sub_2395793A0(v246, &__p[8]);
    v200 = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    v197 = *(std::__shared_weak_count **)(a3 + 16);
    *(_OWORD *)(a3 + 8) = v200;
    if (v197)
    {
      v201 = (unint64_t *)&v197->__shared_owners_;
      do
        v199 = __ldaxr(v201);
      while (__stlxr(v199 - 1, v201));
LABEL_286:
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
  }
  *(_OWORD *)(a3 + 24) = *(_OWORD *)&__p[24];
  *(_OWORD *)(a3 + 40) = *(_OWORD *)&__p[40];
  *(_OWORD *)(a3 + 56) = v263;
  *(_QWORD *)(a3 + 72) = v264;
  *(_WORD *)(a3 + 80) = (_WORD)v265;
  sub_239416DA0((uint64_t)&__p[8]);
  nullsub_4(__p);
LABEL_289:
  *(_QWORD *)__p = &off_250ADB210;
  sub_239581BA8((uint64_t)&v234, (uint64_t)&__p[8]);
  sub_239719898((uint64_t *)&v239, (int32x2_t *)__p, a3, *(_QWORD *)(a1 + 96));
  v202 = nullsub_4(&__p[24]);
  v203 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v204 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v203->__on_zero_shared)(v203, v202);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = nullsub_4(__p);
  if (*(_DWORD *)(a3 + 64))
    v207 = *(_DWORD *)(a3 + 68) == 0;
  else
    v207 = 1;
  v18 = !v207;
  v208 = (char *)v239;
  if (v239)
  {
    v209 = v240;
    v210 = v239;
    if (v240 != v239)
    {
      do
      {
        v211 = (void **)*((_QWORD *)v209 - 3);
        if (v211)
        {
          do
          {
            v213 = (void **)*v211;
            if (*((char *)v211 + 39) < 0)
              operator delete(v211[2]);
            operator delete(v211);
            v211 = v213;
          }
          while (v213);
        }
        v212 = (void *)*((_QWORD *)v209 - 5);
        *((_QWORD *)v209 - 5) = 0;
        if (v212)
          operator delete(v212);
        v209 -= 56;
      }
      while (v209 != v208);
      v210 = v239;
    }
    v240 = v208;
    operator delete(v210);
  }
  v214 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
  if (*((_QWORD *)&v235 + 1))
  {
    v215 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v214->__on_zero_shared)(v214, v206);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  nullsub_4(&v234);
  kdebug_trace();
  kdebug_trace();
  v217 = (char *)v248;
  if (v248)
  {
    v218 = v249;
    v219 = v248;
    if (v249 != v248)
    {
      do
      {
        v220 = v218 - 128;
        v221 = *((unsigned int *)v218 - 2);
        if ((_DWORD)v221 != -1)
          ((void (*)(_BYTE *, char *))off_250ADEAA0[v221])(__p, v218 - 128);
        *((_DWORD *)v218 - 2) = -1;
        v218 -= 128;
      }
      while (v220 != v217);
      v219 = v248;
    }
    v249 = v217;
    operator delete(v219);
  }
  sub_23948FF04((uint64_t)v251);
  v222 = v258;
  if (v258)
  {
    v223 = (unint64_t *)&v258->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = v260;
  if (v260)
  {
    v226 = (unint64_t *)&v260->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  return v18;
}

void sub_23957D01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,_Unwind_Exception *exception_object,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;

  nullsub_4(&STACK[0x270]);
  sub_23957E154((uint64_t)&a22);
  sub_23948FB4C(&a71);
  sub_23948FF04((uint64_t)&STACK[0x208]);
  sub_239416DA0((uint64_t)&STACK[0x248]);
  sub_239416DA0((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_23957D3F8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

double sub_23957D410(int a1, int a2, int a3, int a4, unsigned int *a5, uint64_t a6)
{
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  double result;
  float v17;
  float v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t StatusReg;
  int v30;
  unsigned int v31;
  unint64_t v32;
  _BOOL4 v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t *v41;
  uint64_t v42;
  int32x4_t *v43;
  int32x4_t v44;
  int32x4_t *v45;
  int32x4_t v46;
  int32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int32x4_t *v51;
  uint64_t v52;
  int32x4_t *v53;
  int32x4_t v54;
  int32x4_t *v55;
  int32x4_t v56;
  int32x4_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  signed int v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  BOOL v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  signed int v82;
  unsigned int v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  float v89;
  unsigned int v90;
  int v91;
  char v93;
  char v94;
  char v95;
  int v96;
  int v97;
  int v98;
  char v99;
  char v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  __n128 v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  __n128 v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  __n128 v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  __n128 v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  __n128 v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  __n128 v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  __n128 v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  __n128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  __n128 v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  int v140;
  int v141;
  int32x4_t *__p;
  int32x4_t *v143;
  int32x4_t *v144;
  __int8 *v145;
  int32x4_t *v146;
  int32x4_t *v147;
  __int8 *v148;
  int v149;
  unint64_t v150;
  _BYTE v151[12];
  unsigned int v152;
  char v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[2];
  std::__shared_weak_count *v158;
  uint64_t v159;
  int v160;
  int v161;
  _QWORD v162[2];
  std::__shared_weak_count *v163;
  _QWORD v164[2];
  std::__shared_weak_count *v165;
  _QWORD v166[2];
  std::__shared_weak_count *v167;
  _QWORD v168[2];
  std::__shared_weak_count *v169;
  _QWORD v170[2];
  std::__shared_weak_count *v171;
  _QWORD v172[2];
  std::__shared_weak_count *v173;
  _QWORD v174[2];
  std::__shared_weak_count *v175;
  _QWORD v176[2];
  std::__shared_weak_count *v177;
  _QWORD v178[2];
  std::__shared_weak_count *v179;
  uint64_t (**v180)();
  __int16 v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  void *v184;

  v150 = __PAIR64__(a4, a3);
  sub_2398D8228(1);
  sub_239422CF0(a6, (uint64_t)&v180);
  v12 = nullsub_4(&v183);
  v13 = v182;
  if (!v182)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v182->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
    std::__shared_weak_count::__release_weak(v13);
    j_nullsub_4_89(&v180);
    if (a1 < 2)
      return result;
  }
  else
  {
LABEL_5:
    j_nullsub_4_89(&v180);
    if (a1 < 2)
      return result;
  }
  v17 = (float)a3 / (float)a1;
  v18 = (float)a4 / (float)a2;
  v20 = (int)(float)(v17 * (float)*a5) & ~((int)(float)(v17 * (float)*a5) >> 31);
  if (a3 - 1 >= (int)(float)(v17 * (float)a5[1]))
    v21 = (int)(float)(v17 * (float)a5[1]);
  else
    v21 = a3 - 1;
  v19 = (int)(float)(v18 * (float)a5[2]);
  v22 = v19 & ~(v19 >> 31);
  if (a4 - 1 >= (int)(float)(v18 * (float)a5[3]))
    v23 = (int)(float)(v18 * (float)a5[3]);
  else
    v23 = a4 - 1;
  if ((int)v20 >= v21 || (int)v22 >= v23)
  {
    v22 = 0;
    v20 = 0;
    v23 = a4 - 1;
    v21 = a3 - 1;
  }
  LOWORD(v184) = -256;
  LODWORD(v150) = a3 + 2;
  HIDWORD(v150) = a4 + 2;
  v180 = &off_250ADB628;
  sub_23949E6D4(&v150, &v184, &v181);
  v150 = 0;
  *(_DWORD *)v151 = v20 + 1;
  *(_WORD *)&v151[4] = a4 + 2;
  v151[6] = (a4 + 2) >> 16;
  v151[7] = (a4 + 2) >> 24;
  sub_23949EC84((uint64_t)&v180, &v150, v178);
  v25 = v21 - v20 + 1;
  v150 = v20 + 1;
  *(_QWORD *)v151 = v25 | ((unint64_t)(v22 + 1) << 32);
  sub_23949EC84((uint64_t)&v180, &v150, v176);
  v150 = (v20 + 1) | ((unint64_t)(v23 + 2) << 32);
  *(_QWORD *)v151 = v25 | ((unint64_t)(a4 - v23) << 32);
  sub_23949EC84((uint64_t)&v180, &v150, v174);
  v26 = (unint64_t)(a4 + 2) << 32;
  v150 = (v21 + 2);
  *(_QWORD *)v151 = v26 | (a3 - v21);
  sub_23949EC84((uint64_t)&v180, &v150, v172);
  v150 = (v20 + 2) | ((unint64_t)(v22 + 2) << 32);
  *(_DWORD *)v151 = v21 + ~v20;
  *(_DWORD *)&v151[4] = v23 + ~v22;
  sub_23949EC84((uint64_t)&v180, &v150, v170);
  v150 = 0;
  *(_QWORD *)v151 = (a3 + 2) | 0x100000000;
  sub_23949EC84((uint64_t)&v180, &v150, v168);
  v150 = (unint64_t)(a4 + 1) << 32;
  *(_QWORD *)v151 = (a3 + 2) | 0x100000000;
  sub_23949EC84((uint64_t)&v180, &v150, v166);
  v150 = 0;
  *(_QWORD *)v151 = v26 | 1;
  sub_23949EC84((uint64_t)&v180, &v150, v164);
  v150 = (a3 + 1);
  *(_QWORD *)v151 = v26 | 1;
  sub_23949EC84((uint64_t)&v180, &v150, v162);
  v150 = 0x100000001;
  *(_DWORD *)v151 = a3;
  *(_DWORD *)&v151[4] = a4;
  sub_23949EC84((uint64_t)&v180, &v150, v157);
  sub_23957E7E4((uint64_t)v178, (uint64_t)&v184 + 1);
  sub_23957E7E4((uint64_t)v176, (uint64_t)&v184 + 1);
  sub_23957E7E4((uint64_t)v174, (uint64_t)&v184 + 1);
  sub_23957E7E4((uint64_t)v172, (uint64_t)&v184 + 1);
  sub_23957E7E4((uint64_t)v170, (uint64_t)&v184 + 1);
  sub_23957E7E4((uint64_t)v168, (uint64_t)&v184);
  sub_23957E7E4((uint64_t)v166, (uint64_t)&v184);
  sub_23957E7E4((uint64_t)v164, (uint64_t)&v184);
  sub_23957E7E4((uint64_t)v162, (uint64_t)&v184);
  v27 = ((unint64_t)a3 << 32) | 3;
  if (a3)
    v28 = a4 == 0;
  else
    v28 = 1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  if (v28)
  {
    v27 = 0;
    v30 = 0;
  }
  else
  {
    v30 = a4;
  }
  v31 = HIDWORD(v27) * v27;
  if (v28)
    v31 = 0;
  v149 = 0;
  if (HIDWORD(v27))
    v32 = v27 << 32;
  else
    v32 = 0;
  if (HIDWORD(v27))
    v33 = v27 == 0;
  else
    v33 = 1;
  v150 = v27;
  *(_DWORD *)v151 = v30;
  *(_QWORD *)&v151[4] = v32 | ((_DWORD)v27 != 0);
  v152 = v31;
  v153 = 0;
  v154 = 0;
  v146 = *(int32x4_t **)&v151[4];
  LODWORD(v147) = v31;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
  if (HIDWORD(v27))
    v34 = v33;
  else
    v34 = 1;
  if (v34)
    v27 = 0;
  v143 = (int32x4_t *)v27;
  if (v34)
    v35 = 0;
  else
    v35 = v30;
  LODWORD(v144) = v35;
  if (((4 * v31) & (4 * v31 - 1)) != 0)
    v36 = 4;
  else
    v36 = 4 * v31;
  sub_23957EC78((uint64_t)&v155, (unsigned int *)&v143, (uint64_t *)&v146, 1, (uint64_t)&v149, 1, v36);
  if ((int)(v20 + v21) < 0 != __OFADD__(v20, v21))
    v37 = v20 + v21 + 1;
  else
    v37 = v20 + v21;
  v38 = v22 + v23;
  if ((int)(v22 + v23) < 0 != __OFADD__(v22, v23))
    ++v38;
  v140 = v38;
  v141 = v37;
  v146 = 0;
  v147 = 0;
  __p = 0;
  v148 = 0;
  v39 = v23 - v22 + 1;
  v40 = v21 - v20;
  if (v23 - v22 != -1)
  {
    if ((unint64_t)-(uint64_t)(int)~(v23 - v22) >> 62)
      sub_2394189F8();
    v41 = (int32x4_t *)operator new(-4 * (int)~(v23 - v22));
    v146 = v41;
    v148 = &v41->i8[-4 * ~(v23 - v22)];
    __p = v41;
    if (v23 - v22 == -1)
    {
      v147 = v41;
      v40 = v21 - v20;
      goto LABEL_60;
    }
    v40 = v21 - v20;
    if (v39 >= 8)
    {
      v42 = v39 & 0xFFFFFFF8;
      v43 = (int32x4_t *)((char *)v41 + 4 * v42);
      v44 = (int32x4_t)xmmword_239EC6870;
      v45 = v41 + 1;
      v46.i64[0] = 0x400000004;
      v46.i64[1] = 0x400000004;
      v47.i64[0] = 0x800000008;
      v47.i64[1] = 0x800000008;
      v48 = v42;
      do
      {
        v45[-1] = v44;
        *v45 = vaddq_s32(v44, v46);
        v44 = vaddq_s32(v44, v47);
        v45 += 2;
        v48 -= 8;
      }
      while (v48);
      if (v42 == v39)
      {
LABEL_59:
        if (v23 - v22 == -2)
        {
          sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        goto LABEL_60;
      }
    }
    else
    {
      LODWORD(v42) = 0;
      v43 = v41;
    }
    do
    {
      v43->i32[0] = v42;
      v43 = (int32x4_t *)((char *)v43 + 4);
      LODWORD(v42) = v42 + 1;
    }
    while ((_DWORD)v39 != (_DWORD)v42);
    goto LABEL_59;
  }
LABEL_60:
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v49 = -(int)v25;
  if ((int)v40 >= -1)
    v49 = ~(_DWORD)v40;
  if (v49)
  {
    v50 = -v49;
    if ((unint64_t)-v49 >> 62)
      sub_2394189F8();
    v51 = (int32x4_t *)operator new(-4 * v49);
    v143 = v51;
    v144 = v51;
    v145 = &v51->i8[4 * v50];
    if (v21 - v20 == -1)
      goto LABEL_72;
    if (v40 >= 7)
    {
      v52 = (v40 + 1) & 0x1FFFFFFF8;
      v53 = (int32x4_t *)((char *)v51 + 4 * v52);
      v54 = (int32x4_t)xmmword_239EC6870;
      v55 = v51 + 1;
      v56.i64[0] = 0x400000004;
      v56.i64[1] = 0x400000004;
      v57.i64[0] = 0x800000008;
      v57.i64[1] = 0x800000008;
      v58 = v52;
      do
      {
        v55[-1] = v54;
        *v55 = vaddq_s32(v54, v56);
        v54 = vaddq_s32(v54, v57);
        v55 += 2;
        v58 -= 8;
      }
      while (v58);
      if (v40 + 1 == v52)
        goto LABEL_72;
    }
    else
    {
      LODWORD(v52) = 0;
      v53 = v51;
    }
    do
    {
      v53->i32[0] = v52;
      v53 = (int32x4_t *)((char *)v53 + 4);
      LODWORD(v52) = v52 + 1;
    }
    while ((_DWORD)v25 != (_DWORD)v52);
  }
  else
  {
    v51 = 0;
  }
LABEL_72:
  if (v21 - v20 == -2)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (a4 >= 1 && a3 >= 1)
  {
    v59 = 0;
    v60 = 0;
    v61 = v140 >> 1;
    v62 = v159;
    v63 = 0x7FFFFFFF;
    do
    {
      v64 = 0;
      v65 = v23 - v59;
      if (v59 >= v23)
        v66 = v23;
      else
        v66 = v59;
      v67 = v59 - v22;
      if (v59 >= v22)
        v68 = v66;
      else
        v68 = v22;
      v69 = v156;
      if (v59 >= v22)
        v70 = v23;
      else
        v70 = v22;
      v71 = v21;
      do
      {
        while (!*(_BYTE *)(v62 + (v160 * v64 + v161 * v59)))
        {
          *(_DWORD *)(v69 + 4 * (*(_DWORD *)&v151[8] * v64 + v152 * v59)) = v64;
          *(_DWORD *)(v69 + 4 * (*(_DWORD *)&v151[4] + *(_DWORD *)&v151[8] * v64 + v152 * v59)) = v59;
          *(_DWORD *)(v69 + 4 * (*(_DWORD *)&v151[8] * v64++ + 2 * *(_DWORD *)&v151[4] + v152 * v59)) = 0;
          --v71;
          if (a3 == v64)
            goto LABEL_76;
        }
        v75 = v20;
        v76 = v68;
        if (v64 >= v20)
        {
          v75 = v64 >= v21 ? v21 : v64;
          v76 = v64 <= v21 ? v70 : v68;
          if (v64 <= v21 && v59 >= v22 && v23 >= v59)
          {
            if (v65 >= v71)
              v77 = v21;
            else
              v77 = v64;
            if (v65 >= v71)
              v78 = v59;
            else
              v78 = v23;
            if (v67 >= v71)
              v79 = v21;
            else
              v79 = v64;
            if (v67 >= v71)
              v80 = v59;
            else
              v80 = v22;
            if (v59 > v61)
            {
              v81 = v78;
            }
            else
            {
              v77 = v79;
              v81 = v80;
            }
            v82 = v64 - v20;
            if (v65 >= (int)(v64 - v20))
              v83 = v20;
            else
              v83 = v64;
            if (v65 >= v82)
              v84 = v59;
            else
              v84 = v23;
            v85 = v67 < v82;
            if (v67 >= v82)
              v75 = v20;
            else
              v75 = v64;
            if (v85)
              v86 = v22;
            else
              v86 = v59;
            if (v59 <= v61)
            {
              v87 = v86;
            }
            else
            {
              v75 = v83;
              v87 = v84;
            }
            if (v64 <= v141 >> 1)
            {
              v76 = v87;
            }
            else
            {
              v75 = v77;
              v76 = v81;
            }
          }
        }
        v72 = (int)sqrtf((float)(int)((v64 - v75) * (v64 - v75) + (v59 - v76) * (v59 - v76)));
        *(_DWORD *)(v69 + 4 * (*(_DWORD *)&v151[8] * v64 + v152 * v59)) = v75;
        *(_DWORD *)(v69 + 4 * (*(_DWORD *)&v151[4] + *(_DWORD *)&v151[8] * v64 + v152 * v59)) = v76;
        *(_DWORD *)(v69 + 4 * (*(_DWORD *)&v151[8] * v64 + 2 * *(_DWORD *)&v151[4] + v152 * v59)) = v72;
        if (v60 <= v72)
          v73 = v72;
        else
          v73 = v60;
        v74 = v63 <= v72;
        if (v63 >= v72)
          v63 = v72;
        if (v74)
          v60 = v73;
        ++v64;
        --v71;
      }
      while (a3 != v64);
LABEL_76:
      ++v59;
    }
    while (v59 != a4);
    v88 = 0;
    v89 = (float)(v60 - v63);
    do
    {
      if ((int)v88 >= v23 || v88 <= v22)
      {
        v96 = 0;
        do
        {
          v97 = (int)(float)((float)((float)(*(_DWORD *)(v156
                                                       + 4
                                                       * (*(_DWORD *)&v151[8] * v96
                                                        + 2 * *(_DWORD *)&v151[4]
                                                        + v152 * v88))
                                           - v63)
                                   / v89)
                           * 255.0);
          if (v97 <= -128)
            LOBYTE(v98) = 0x80;
          else
            v98 = (int)(float)((float)((float)(*(_DWORD *)(v156
                                                         + 4
                                                         * (*(_DWORD *)&v151[8] * v96
                                                          + 2 * *(_DWORD *)&v151[4]
                                                          + v152 * v88))
                                             - v63)
                                     / v89)
                             * 255.0);
          v99 = v98 ^ 0x80;
          if (v97 > 127)
            v100 = -1;
          else
            v100 = v99;
          *(_BYTE *)(*(_QWORD *)(a6 + 32) + *(_DWORD *)(a6 + 72) * v96++ + *(_DWORD *)(a6 + 76) * v88) = v100;
        }
        while (a3 != v96);
      }
      else
      {
        v90 = 0;
        do
        {
          v91 = (int)(float)((float)((float)(*(_DWORD *)(v156
                                                       + 4
                                                       * (*(_DWORD *)&v151[8] * v90
                                                        + 2 * *(_DWORD *)&v151[4]
                                                        + v152 * v88))
                                           - v63)
                                   / v89)
                           * 255.0);
          if ((int)v90 < v21 && v90 > v20)
            v91 = -v91;
          if (v91 <= -128)
            v93 = 0x80;
          else
            v93 = v91;
          v94 = v93 ^ 0x80;
          if (v91 > 127)
            v95 = -1;
          else
            v95 = v94;
          *(_BYTE *)(*(_QWORD *)(a6 + 32) + *(_DWORD *)(a6 + 72) * v90++ + *(_DWORD *)(a6 + 76) * v88) = v95;
        }
        while (a3 != v90);
      }
      ++v88;
    }
    while (v88 != a4);
  }
  if (v51)
    operator delete(v51);
  if (__p)
    operator delete(__p);
  sub_239916980((uint64_t)&v155);
  v101 = v158;
  if (v158)
  {
    v102 = (unint64_t *)&v158->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = nullsub_4(v157);
  v105 = v163;
  if (v163)
  {
    v106 = (unint64_t *)&v163->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v105->__on_zero_shared)(v105, v104);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = nullsub_4(v162);
  v109 = v165;
  if (v165)
  {
    v110 = (unint64_t *)&v165->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v109->__on_zero_shared)(v109, v108);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = nullsub_4(v164);
  v113 = v167;
  if (v167)
  {
    v114 = (unint64_t *)&v167->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v113->__on_zero_shared)(v113, v112);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = nullsub_4(v166);
  v117 = v169;
  if (v169)
  {
    v118 = (unint64_t *)&v169->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v117->__on_zero_shared)(v117, v116);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = nullsub_4(v168);
  v121 = v171;
  if (v171)
  {
    v122 = (unint64_t *)&v171->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v121->__on_zero_shared)(v121, v120);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = nullsub_4(v170);
  v125 = v173;
  if (v173)
  {
    v126 = (unint64_t *)&v173->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v125->__on_zero_shared)(v125, v124);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = nullsub_4(v172);
  v129 = v175;
  if (v175)
  {
    v130 = (unint64_t *)&v175->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v129->__on_zero_shared)(v129, v128);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = nullsub_4(v174);
  v133 = v177;
  if (v177)
  {
    v134 = (unint64_t *)&v177->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v133->__on_zero_shared)(v133, v132);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = nullsub_4(v176);
  v137 = v179;
  if (v179)
  {
    v138 = (unint64_t *)&v179->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v137->__on_zero_shared)(v137, v136);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  nullsub_4(v178);
  sub_239416DA0((uint64_t)&v181);
  *(_QWORD *)&result = nullsub_4(&v180).n128_u64[0];
  return result;
}

void sub_23957DFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  operator delete(__p);
  sub_239916980(a10);
  sub_23941965C((uint64_t)&a32);
  sub_23941965C((uint64_t)&a39);
  sub_23941965C((uint64_t)&a46);
  sub_23941965C((uint64_t)&a53);
  sub_23941965C((uint64_t)&a60);
  sub_23941965C((uint64_t)&a67);
  sub_23941965C((uint64_t)&STACK[0x208]);
  sub_23941965C((uint64_t)&STACK[0x240]);
  sub_23941965C((uint64_t)&STACK[0x278]);
  sub_23941965C(v67 - 240);
  sub_239416DA0(a11);
  nullsub_4(v67 - 184);
  _Unwind_Resume(a1);
}

double sub_23957E154(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

uint64_t sub_23957E1BC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *(_QWORD *)a1 = &off_250ADC870;
  *(_BYTE *)(a1 + 8) = *a2;
  v5 = operator new();
  v6 = v5;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8((_BYTE *)v5, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a3;
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a3 + 16);
  }
  *(_QWORD *)(a1 + 16) = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &unk_250ADEA78;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  *(_QWORD *)(a1 + 24) = v7;
  return a1;
}

void sub_23957E274(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x23B83E31C](v2, 0x1012C40EC159624);
  nullsub_4(v1);
  _Unwind_Resume(a1);
}

void sub_23957E2B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_4(v1);
  _Unwind_Resume(a1);
}

void sub_23957E2D0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23957E2F4(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

void sub_23957E348(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_250ADB210;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

void sub_23957E43C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_250ADB210;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

void sub_23957E530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a2 = &off_250ADB210;
  v3 = *(_QWORD *)(a3 + 8);
  v4 = *(std::__shared_weak_count **)(a3 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_QWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 48);
    v9 = *(_WORD *)(a3 + 52);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 48);
    v9 = *(_WORD *)(a3 + 52);
  }
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  v11 = *(_QWORD *)(a3 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 40) = v7;
  *(_DWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 52) = v9;
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_23957E5F8(void **a1, __n128 *a2)
{
  char *v3;
  char *v4;
  void *v5;
  __n128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (*((unsigned __int8 *)a1 + 24) == a2[1].n128_u8[8])
  {
    if (*((_BYTE *)a1 + 24))
      sub_23957E70C(a1, a2);
  }
  else if (*((_BYTE *)a1 + 24))
  {
    v3 = (char *)*a1;
    if (*a1)
    {
      v4 = (char *)a1[1];
      v5 = *a1;
      if (v4 != v3)
      {
        do
        {
          if (*(v4 - 8))
          {
            v6 = nullsub_4(v4 - 40);
            v7 = (std::__shared_weak_count *)*((_QWORD *)v4 - 6);
            if (v7)
            {
              p_shared_owners = (unint64_t *)&v7->__shared_owners_;
              do
                v9 = __ldaxr(p_shared_owners);
              while (__stlxr(v9 - 1, p_shared_owners));
              if (!v9)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v6);
                std::__shared_weak_count::__release_weak(v7);
              }
            }
            nullsub_4(v4 - 64);
          }
          v4 -= 120;
        }
        while (v4 != v3);
        v5 = *a1;
      }
      a1[1] = v3;
      operator delete(v5);
    }
    *((_BYTE *)a1 + 24) = 0;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    *(__n128 *)a1 = *a2;
    a1[2] = (void *)a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *((_BYTE *)a1 + 24) = 1;
  }
}

__n128 sub_23957E70C(void **a1, __n128 *a2)
{
  char *v4;
  char *v5;
  void *v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __n128 result;

  v4 = (char *)*a1;
  if (*a1)
  {
    v5 = (char *)a1[1];
    v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        if (*(v5 - 8))
        {
          v7 = nullsub_4(v5 - 40);
          v8 = (std::__shared_weak_count *)*((_QWORD *)v5 - 6);
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          nullsub_4(v5 - 64);
        }
        v5 -= 120;
      }
      while (v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_23957E7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_19;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_25;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_25;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_25:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_14;
LABEL_19:
    v14 = 0;
    v15 = a1;
    v16 = a2;
    if (*(_DWORD *)(a1 + 40) != 1)
      goto LABEL_15;
LABEL_20:
    sub_23957E960(&v15);
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_19;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v14, v4, 1);
  v15 = a1;
  v16 = a2;
  if (*(_DWORD *)(a1 + 40) == 1)
    goto LABEL_20;
LABEL_15:
  v17 = a2;
  if (*(_DWORD *)(a1 + 32) && *(_DWORD *)(a1 + 36))
    sub_23957EB1C((uint64_t)&v17, a1);
LABEL_21:
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23957E93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23957E960(_QWORD *result)
{
  unsigned __int8 *v1;
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;

  v2 = *result;
  v1 = (unsigned __int8 *)result[1];
  v3 = *(unsigned int *)(*result + 32);
  v4 = *(unsigned int *)(*result + 44);
  if ((_DWORD)v4 == *(_DWORD *)(*result + 40) * (_DWORD)v3)
  {
    v5 = *(_DWORD *)(v2 + 36);
    v6 = *(void **)(v2 + 24);
    if (*(_BYTE *)(v2 + 48))
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = *(_QWORD *)(v2 + 8);
      v9 = *(std::__shared_weak_count **)(v2 + 16);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v8 + 88))(v8, 1, "unknown location");
      v6 = *(void **)(v2 + 24);
    }
    return memset(v6, *v1, (v5 * v3));
  }
  else
  {
    v13 = *(_DWORD *)(v2 + 36);
    if ((_DWORD)v3)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (!v14)
    {
      v15 = v13 - 1;
      v16 = *(char **)(v2 + 24);
      if (*(_BYTE *)(v2 + 48))
        v17 = v16 == 0;
      else
        v17 = 1;
      if (!v17)
      {
        v18 = *(_QWORD *)(v2 + 8);
        v19 = *(std::__shared_weak_count **)(v2 + 16);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v18 + 88))(v18, 1, "unknown location");
        v16 = *(char **)(v2 + 24);
      }
      for (; v15; --v15)
      {
        memset(v16, *v1, v3);
        v16 += v4;
      }
      return memset(v16, *v1, v3);
    }
  }
  return result;
}

uint64_t sub_23957EB1C(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _BYTE **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  int v19;
  _BYTE *v20;

  v3 = *(_DWORD *)(a2 + 32);
  v2 = *(_DWORD *)(a2 + 36);
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = (_BYTE **)result;
    v7 = v2 - 1;
    v8 = *(unsigned int *)(a2 + 40);
    v9 = *(unsigned int *)(a2 + 44);
    v10 = *(_BYTE **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48))
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v12 + 88))(v12, 1, "unknown location");
      v10 = *(_BYTE **)(a2 + 24);
    }
    v17 = v3 - 1;
    if (v7)
    {
      if (v3 == 1)
      {
        do
        {
          *v10 = **v6;
          v10 += v9;
          --v7;
        }
        while (v7);
      }
      else
      {
        for (i = 0; i != v7; ++i)
        {
          v19 = v3 - 1;
          v20 = v10;
          do
          {
            *v20 = **v6;
            v20 += v8;
            --v19;
          }
          while (v19);
          *v20 = **v6;
          v10 += v9;
        }
      }
    }
    if (v3 != 1)
    {
      do
      {
        *v10 = **v6;
        v10 += v8;
        --v17;
      }
      while (v17);
    }
    *v10 = **v6;
  }
  return result;
}

uint64_t sub_23957EC78(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  char v32;
  BOOL v33;
  unsigned int v34;
  _QWORD v36[2];
  int v37;
  uint64_t v38;
  int v39;
  _QWORD v40[2];
  uint64_t v41;
  char v42;
  _QWORD v43[3];
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD v50[2];

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = 4 * v13 * v12;
  v19 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
  v21 = v20 | (v20 >> 16) | ((v20 | (v20 >> 16)) >> 32);
  if (v21 + 1 > 8)
    v22 = v21 + 1;
  else
    v22 = 8;
  sub_2399168C0((_QWORD *)a1, v18, v22);
  v24 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v24;
  *(_QWORD *)(a1 + 36) = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 44) = 4 * v12;
  v25 = *(_QWORD *)(a1 + 8);
  if (v25 && a6)
  {
    if (*(_DWORD *)(a1 + 24))
      v26 = *(_DWORD *)(a1 + 28) == 0;
    else
      v26 = 1;
    v27 = v26 || *(_DWORD *)(a1 + 32) == 0;
    v28 = v27;
    if (v27)
      v29 = 0;
    else
      v29 = *(_QWORD *)(a1 + 24);
    if (v27)
      v30 = 0;
    else
      v30 = *(_DWORD *)(a1 + 32);
    v36[0] = *(_QWORD *)(a1 + 8);
    v36[1] = v29;
    v37 = v30;
    v38 = v11 & 0x3FFFFFFF3FFFFFFFLL;
    v39 = v12 & 0x3FFFFFFF;
    if (v30 * (v12 & 0x3FFFFFFF) == -1)
    {
      sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v40[0] = v36;
    v40[1] = a5;
    if ((v11 & 0x3FFFFFFF) == 1)
    {
      if ((HIDWORD(v11) & 0x3FFFFFFF) == (_DWORD)v29)
      {
        sub_23957EEEC((unsigned int *)v40, v23);
      }
      else
      {
        v41 = v29;
        v43[0] = &v42;
        v43[1] = &v41;
        v43[2] = a5;
        if ((_DWORD)v29)
          v33 = HIDWORD(v29) == 0;
        else
          v33 = 1;
        if (v33)
          v28 = 1;
        if ((v28 & 1) == 0)
        {
          LODWORD(v44) = 0;
          HIDWORD(v44) = v29 - 1;
          v45 = 1;
          v46 = HIDWORD(v29) - 1;
          v49 = v12 & 0x3FFFFFFF;
          v50[0] = 0;
          v50[1] = 0;
          v47 = HIDWORD(v11) & 0x3FFFFFFF;
          v48 = v30 - 1;
          if (v30 != 1)
          {
            v34 = 0;
            do
            {
              sub_23957F240(&v44, (uint64_t)v50, (uint64_t)v43, v25);
              v25 += 4 * v49;
              ++v34;
            }
            while (v34 < v48);
          }
          sub_23957F240(&v44, (uint64_t)v50, (uint64_t)v43, v25);
        }
      }
    }
    else
    {
      v44 = a5;
      if ((_DWORD)v29)
        v31 = HIDWORD(v29) == 0;
      else
        v31 = 1;
      if (v31)
        v32 = 1;
      else
        v32 = v28;
      if ((v32 & 1) == 0)
        sub_23957F454((uint64_t)&v44, (uint64_t)v36);
    }
  }
  return a1;
}

void sub_23957EEC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

void sub_23957EED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_23957EEEC(unsigned int *result, uint64_t a2)
{
  const float *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  _DWORD *v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD v24[3];
  unsigned int v25[7];
  unint64_t v26[2];

  v3 = *(_QWORD *)result;
  v2 = (const float *)*((_QWORD *)result + 1);
  v4 = *(_DWORD *)(*(_QWORD *)result + 12);
  v6 = *(_DWORD *)(*(_QWORD *)result + 24);
  v5 = *(_DWORD *)(*(_QWORD *)result + 28);
  if (v5 == v6 * v4)
  {
    v7 = (v4 * *(_DWORD *)(v3 + 8) * *(_DWORD *)(v3 + 16));
    v8 = *(_QWORD *)v3;
    if ((_DWORD)v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    if (v9)
      sub_239EBF50C((uint64_t)result, a2);
    if ((_DWORD)v7)
    {
      if (v7 < 8
        || (v8 < (unint64_t)(v2 + 1) ? (v10 = v8 + 4 * v7 > (unint64_t)v2) : (v10 = 0), v10))
      {
        v11 = *(_DWORD **)v3;
        v12 = v7;
      }
      else
      {
        v11 = (_DWORD *)(v8 + 4 * (v7 & 0xFFFFFFF8));
        v12 = v7 & 7;
        v13 = vld1q_dup_f32(v2);
        v14 = (float32x4_t *)(v8 + 16);
        v15 = v7 & 0xFFFFFFF8;
        do
        {
          v14[-1] = v13;
          *v14 = v13;
          v14 += 2;
          v15 -= 8;
        }
        while (v15);
        if ((v7 & 0xFFFFFFF8) == v7)
          return result;
      }
      v21 = v12 + 1;
      do
      {
        *v11++ = *(_DWORD *)v2;
        --v21;
      }
      while (v21 > 1);
    }
  }
  else
  {
    v16 = *(_DWORD *)(v3 + 8);
    v22 = (v4 * v16);
    v24[0] = &v23;
    v24[1] = &v22;
    v24[2] = v2;
    v17 = *(_DWORD *)(v3 + 16);
    if (v16)
      v18 = v4 == 0;
    else
      v18 = 1;
    if (!v18 && v17 != 0)
    {
      v25[0] = 0;
      v25[1] = v16 - 1;
      v25[2] = *(_DWORD *)(v3 + 20);
      v25[3] = v4 - 1;
      v25[4] = v6;
      v25[5] = v17 - 1;
      v25[6] = v5;
      v20 = *(_QWORD *)v3;
      v26[0] = 0;
      v26[1] = 0;
      return sub_23957F028(v25, v26, (uint64_t)v24, v20);
    }
  }
  return result;
}

unsigned int *sub_23957F028(unsigned int *result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unsigned int v5;
  const float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = result[2] | ((unint64_t)result[4] << 32);
  *a2 = a4;
  a2[1] = v4;
  v5 = result[5];
  v6 = *(const float **)(a3 + 16);
  v7 = **(_QWORD **)(a3 + 8);
  if (v5)
  {
    if (v7 >= 1)
    {
      v8 = v7 & 0x3FFFFFFFFFFFFFFFLL;
      v9 = 4 * v7;
      if ((v7 & 0x3FFFFFFFFFFFFFFFLL) != 0)
      {
        v10 = 1;
      }
      else
      {
        v9 = 4;
        v10 = 0;
      }
      v11 = v8 - v10 + 1;
      if (v11 >= 8)
      {
        v17 = 0;
        while (a4)
        {
          if (a4 < (unint64_t)(v6 + 1))
          {
            v18 = (_DWORD *)a4;
            v19 = v7 & 0x3FFFFFFFFFFFFFFFLL;
            if ((unint64_t)v6 < a4 + v9)
              goto LABEL_26;
          }
          v18 = (_DWORD *)(a4 + 4 * (v11 & 0xFFFFFFFFFFFFFFF8));
          v20 = vld1q_dup_f32(v6);
          v21 = (float32x4_t *)(a4 + 16);
          v22 = v11 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v21[-1] = v20;
            *v21 = v20;
            v21 += 2;
            v22 -= 8;
          }
          while (v22);
          v19 = v8 - (v11 & 0xFFFFFFFFFFFFFFF8);
          if (v11 != (v11 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_26:
            v23 = v19 + 1;
            do
            {
              *v18++ = *(_DWORD *)v6;
              --v23;
            }
            while (v23 > 1);
          }
          a4 += 4 * result[6];
          if (++v17 >= result[5])
            goto LABEL_30;
        }
      }
      else
      {
        v12 = 0;
        v13 = v8 + 1;
        while (a4)
        {
          v14 = v13;
          v15 = (_DWORD *)a4;
          do
          {
            *v15++ = *(_DWORD *)v6;
            --v14;
          }
          while (v14 > 1);
          a4 += 4 * result[6];
          if (++v12 >= result[5])
            goto LABEL_30;
        }
      }
      goto LABEL_46;
    }
    if (v7)
    {
      v16 = 0;
      while (a4)
      {
        a4 += 4 * result[6];
        if (++v16 >= v5)
          goto LABEL_30;
      }
LABEL_46:
      sub_239EBF5BC(a2, (uint64_t)a2);
    }
    a4 += (4 * (v5 - 1) + 4) * result[6];
  }
LABEL_30:
  *a2 = a4;
  if (!a4 && v7)
    sub_239EBF50C((uint64_t)result, (uint64_t)a2);
  if (v7 >= 1)
  {
    v24 = v7 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = v24 - (v24 != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_38;
    v26 = 4 * v24;
    if (!v24)
      v26 = 4;
    if (a4 < (unint64_t)(v6 + 1) && (unint64_t)v6 < a4 + v26)
    {
LABEL_38:
      v27 = (_DWORD *)a4;
LABEL_39:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v6;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(a4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v6);
    v30 = (float32x4_t *)(a4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_39;
  }
  return result;
}

_DWORD *sub_23957F240(_DWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  unsigned int v5;
  const float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = result[2];
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v4;
  v5 = result[3];
  v6 = *(const float **)(a3 + 16);
  v7 = **(_QWORD **)(a3 + 8);
  if (v5)
  {
    if (v7 >= 1)
    {
      v8 = v7 & 0x3FFFFFFFFFFFFFFFLL;
      v9 = 4 * v7;
      if ((v7 & 0x3FFFFFFFFFFFFFFFLL) != 0)
      {
        v10 = 1;
      }
      else
      {
        v9 = 4;
        v10 = 0;
      }
      v11 = v8 - v10 + 1;
      if (v11 >= 8)
      {
        v17 = 0;
        while (a4)
        {
          if (a4 < (unint64_t)(v6 + 1))
          {
            v18 = (_DWORD *)a4;
            v19 = v7 & 0x3FFFFFFFFFFFFFFFLL;
            if ((unint64_t)v6 < a4 + v9)
              goto LABEL_26;
          }
          v18 = (_DWORD *)(a4 + 4 * (v11 & 0xFFFFFFFFFFFFFFF8));
          v20 = vld1q_dup_f32(v6);
          v21 = (float32x4_t *)(a4 + 16);
          v22 = v11 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v21[-1] = v20;
            *v21 = v20;
            v21 += 2;
            v22 -= 8;
          }
          while (v22);
          v19 = v8 - (v11 & 0xFFFFFFFFFFFFFFF8);
          if (v11 != (v11 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_26:
            v23 = v19 + 1;
            do
            {
              *v18++ = *(_DWORD *)v6;
              --v23;
            }
            while (v23 > 1);
          }
          a4 += 4 * result[4];
          if (++v17 >= result[3])
            goto LABEL_30;
        }
      }
      else
      {
        v12 = 0;
        v13 = v8 + 1;
        while (a4)
        {
          v14 = v13;
          v15 = (_DWORD *)a4;
          do
          {
            *v15++ = *(_DWORD *)v6;
            --v14;
          }
          while (v14 > 1);
          a4 += 4 * result[4];
          if (++v12 >= result[3])
            goto LABEL_30;
        }
      }
      goto LABEL_46;
    }
    if (v7)
    {
      v16 = 0;
      while (a4)
      {
        a4 += 4 * result[4];
        if (++v16 >= v5)
          goto LABEL_30;
      }
LABEL_46:
      sub_239EBF5BC((_QWORD *)a2, a2);
    }
    a4 += (4 * (v5 - 1) + 4) * result[4];
  }
LABEL_30:
  *(_QWORD *)a2 = a4;
  if (!a4 && v7)
    sub_239EBF50C((uint64_t)result, a2);
  if (v7 >= 1)
  {
    v24 = v7 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = v24 - (v24 != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_38;
    v26 = 4 * v24;
    if (!v24)
      v26 = 4;
    if (a4 < (unint64_t)(v6 + 1) && (unint64_t)v6 < a4 + v26)
    {
LABEL_38:
      v27 = (_DWORD *)a4;
LABEL_39:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v6;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(a4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v6);
    v30 = (float32x4_t *)(a4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_39;
  }
  return result;
}

uint64_t sub_23957F454(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v2 - 1;
    v8 = v3 - 1;
    v9 = *(unsigned int *)(a2 + 20);
    v10 = *(unsigned int *)(a2 + 24);
    v11 = *(_DWORD **)a2;
    v12 = *(_DWORD **)result;
    v13 = v4 - 1;
    if (v13)
    {
      v14 = *(unsigned int *)(a2 + 28);
      if (v8)
      {
        v15 = 0;
        v16 = 4 * v14;
        v17 = v10;
        if (v7)
        {
          result = 4 * v9;
          v18 = &v11[v17];
          do
          {
            v19 = 0;
            v20 = v18;
            v21 = v11;
            do
            {
              v22 = v20;
              v23 = v21;
              v24 = v7;
              do
              {
                *v23 = *v12;
                v23 = (_DWORD *)((char *)v23 + result);
                --v24;
              }
              while (v24);
              *v23 = *v12;
              v21 = (_DWORD *)((char *)v21 + v17 * 4);
              ++v19;
              v20 = &v22[v17];
            }
            while (v19 != v8);
            v25 = v7;
            do
            {
              *v22 = *v12;
              v22 = (_DWORD *)((char *)v22 + result);
              --v25;
            }
            while (v25);
            *v22 = *v12;
            v11 = (_DWORD *)((char *)v11 + v16);
            ++v15;
            v18 = (_DWORD *)((char *)v18 + v16);
          }
          while (v15 != v13);
        }
        else
        {
          do
          {
            result = (uint64_t)v11;
            v26 = v8;
            do
            {
              *(_DWORD *)result = *v12;
              result += v17 * 4;
              --v26;
            }
            while (v26);
            *(_DWORD *)result = *v12;
            v11 = (_DWORD *)((char *)v11 + v16);
            ++v15;
          }
          while (v15 != v13);
        }
      }
      else if (v7)
      {
        v27 = 0;
        v28 = 4 * v14;
        do
        {
          result = (uint64_t)v11;
          v29 = v7;
          do
          {
            *(_DWORD *)result = *v12;
            result += 4 * v9;
            --v29;
          }
          while (v29);
          *(_DWORD *)result = *v12;
          v11 = (_DWORD *)((char *)v11 + v28);
          ++v27;
        }
        while (v27 != v13);
      }
      else
      {
        do
        {
          *v11 = *v12;
          v11 += v14;
          --v13;
        }
        while (v13);
      }
    }
    if (v8)
    {
      if (v7)
      {
        v30 = 0;
        v31 = 4 * v10;
        do
        {
          v32 = v11;
          v33 = v7;
          do
          {
            result = *v12;
            *v32 = result;
            v32 += v9;
            --v33;
          }
          while (v33);
          *v32 = *v12;
          v11 = (_DWORD *)((char *)v11 + v31);
          ++v30;
        }
        while (v30 != v8);
      }
      else
      {
        v34 = 4 * v10;
        do
        {
          *v11 = *v12;
          v11 = (_DWORD *)((char *)v11 + v34);
          --v8;
        }
        while (v8);
      }
    }
    if (v7)
    {
      v35 = 4 * v9;
      do
      {
        *v11 = *v12;
        v11 = (_DWORD *)((char *)v11 + v35);
        --v7;
      }
      while (v7);
    }
    *v11 = *v12;
  }
  return result;
}

_QWORD *sub_23957F64C(_QWORD *a1, _DWORD *a2, unint64_t *a3, char a4, _DWORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  _QWORD v34[3];
  _QWORD v35[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = 4 * (v12 * HIDWORD(v11));
  v15 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
  v17 = v16 | (v16 >> 16) | ((v16 | (v16 >> 16)) >> 32);
  if (v17 + 1 > 8)
    v18 = v17 + 1;
  else
    v18 = 8;
  sub_2399168C0(a1, v14, v18);
  v20 = *(_QWORD *)a2;
  a1[3] = *(_QWORD *)a2;
  a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  v21 = (_DWORD *)a1[1];
  if (v21 && a6)
  {
    if (HIDWORD(v20))
      v22 = (_DWORD)v20 == 0;
    else
      v22 = 1;
    if (v22)
      v20 = 0;
    v23 = HIDWORD(v20);
    v34[0] = a1[1];
    v34[1] = v20;
    v34[2] = v11 & 0x3FFFFFFF3FFFFFFFLL;
    if (HIDWORD(v20) * ((v11 >> 30) >> 2) == -1)
    {
      sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v35[0] = v34;
    v35[1] = a5;
    v24 = v11 & 0x3FFFFFFF;
    if (v24 == 1)
    {
      sub_23957F848(v35, v19);
      return a1;
    }
    if ((_DWORD)v20 && HIDWORD(v20))
    {
      v25 = v20 - 1;
      v26 = v23 - 1;
      if (v26)
      {
        v27 = HIDWORD(v11) & 0x3FFFFFFF;
        if (!v25)
        {
          do
          {
            *v21 = *a5;
            v21 += v27;
            --v26;
          }
          while (v26);
LABEL_33:
          *v21 = *a5;
          return a1;
        }
        v28 = 0;
        v29 = 4 * v27;
        do
        {
          v30 = v21;
          v31 = v25;
          do
          {
            *v30 = *a5;
            v30 += v24;
            --v31;
          }
          while (v31);
          *v30 = *a5;
          v21 = (_DWORD *)((char *)v21 + v29);
          ++v28;
        }
        while (v28 != v26);
      }
      if (v25)
      {
        v32 = 4 * v24;
        do
        {
          *v21 = *a5;
          v21 = (_DWORD *)((char *)v21 + v32);
          --v25;
        }
        while (v25);
      }
      goto LABEL_33;
    }
  }
  return a1;
}

void sub_23957F834(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23957F848(_QWORD *result, uint64_t a2)
{
  const float *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  _DWORD *v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[3];
  _DWORD v23[5];
  _QWORD v24[2];

  v3 = *result;
  v2 = (const float *)result[1];
  v4 = *(_DWORD *)(*result + 8);
  v6 = *(_DWORD *)(*result + 16);
  v5 = *(_DWORD *)(*result + 20);
  if (v5 == v6 * v4)
  {
    v7 = (*(_DWORD *)(v3 + 12) * v4);
    v8 = *(_QWORD *)v3;
    if ((_DWORD)v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    if (v9)
      sub_239EBF50C((uint64_t)result, a2);
    if ((_DWORD)v7)
    {
      if (v7 < 8
        || (v8 < (unint64_t)(v2 + 1) ? (v10 = v8 + 4 * v7 > (unint64_t)v2) : (v10 = 0), v10))
      {
        v11 = *(_DWORD **)v3;
        v12 = v7;
      }
      else
      {
        v11 = (_DWORD *)(v8 + 4 * (v7 & 0xFFFFFFF8));
        v12 = v7 & 7;
        v13 = vld1q_dup_f32(v2);
        v14 = (float32x4_t *)(v8 + 16);
        v15 = v7 & 0xFFFFFFF8;
        do
        {
          v14[-1] = v13;
          *v14 = v13;
          v14 += 2;
          v15 -= 8;
        }
        while (v15);
        if ((v7 & 0xFFFFFFF8) == v7)
          return result;
      }
      v19 = v12 + 1;
      do
      {
        *v11++ = *(_DWORD *)v2;
        --v19;
      }
      while (v19 > 1);
    }
  }
  else
  {
    v20 = *(unsigned int *)(*result + 8);
    v22[0] = &v21;
    v22[1] = &v20;
    v22[2] = v2;
    v16 = *(_DWORD *)(v3 + 12);
    if (v4)
      v17 = v16 == 0;
    else
      v17 = 1;
    if (!v17)
    {
      v23[0] = 0;
      v23[1] = v4 - 1;
      v23[2] = v6;
      v23[3] = v16 - 1;
      v23[4] = v5;
      v18 = *(_QWORD *)v3;
      v24[0] = 0;
      v24[1] = 0;
      return sub_23948D0D0(v23, (uint64_t)v24, (uint64_t)v22, v18);
    }
  }
  return result;
}

void sub_23957F964(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  char *v3;
  int64x2_t v4;
  int8x16_t v5;
  char *v6;
  void **v7;
  void *v8;
  void *__p;
  char *v10;
  uint64_t v11;
  std::string v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::to_string(&v12, *a1);
  v3 = sub_23941ACDC(&__p, (uint64_t)&v12);
  v10 = v3;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    v3 = v10;
  }
  *((_BYTE *)&v12.__r_.__value_.__s + 23) = 0;
  v12.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v3, (uint64_t)&v12, a2, v4, v5);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v6 = (char *)__p;
  if (__p)
  {
    v7 = (void **)v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != (void **)v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_23957FA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23957FA98(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_250ADEB00;
  *(_QWORD *)(a1 + 24) = off_250AE2350;
  sub_23949021C(a1 + 32, (uint64_t *)(a2 + 8));
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 24) = off_250AE2310;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    if (*(char *)(a2 + 151) < 0)
    {
      sub_23941A7F8((_BYTE *)(a1 + 152), *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 152) = v4;
    }
    *(_BYTE *)(a1 + 176) = 1;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 24) = &off_250ADDF40;
  return a1;
}

void sub_23957FB64(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(_BYTE *)(v1 + 176))
  {
    if (*(char *)(v1 + 175) < 0)
      operator delete(*v3);
  }
  sub_2396504E0(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  _Unwind_Resume(a1);
}

void sub_23957FB98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_23957FBAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADEB00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23957FBBC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADEB00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23957FBEC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_23957FBFC(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = (std::__shared_weak_count *)a2[1];
  v14 = *a2;
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *a3;
  *a3 = 0;
  v13 = v7;
  sub_23964F5DC(a1, &v14, &v13);
  v8 = v13;
  v13 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v15;
  if (!v15)
    return a1;
  v10 = (unint64_t *)&v15->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_23957FCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23957FCF0(void **a1, unint64_t a2)
{
  _BYTE *v4;
  _WORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _WORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  v4 = a1[2];
  v5 = a1[1];
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - (_BYTE *)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[44 * a2];
      v12 = 88 * a2;
      do
      {
        *(_QWORD *)v5 = &off_250ADB628;
        sub_239422F30(v5 + 4);
        v5 += 44;
        v12 -= 88;
      }
      while (v12);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0x2E8BA2E8BA2E8BA3 * (((char *)v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x2E8BA2E8BA2E8BALL)
      sub_2394189F8();
    v8 = 0x2E8BA2E8BA2E8BA3 * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x1745D1745D1745DLL)
      v9 = 0x2E8BA2E8BA2E8BALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x2E8BA2E8BA2E8BALL)
        sub_239418A80();
      v10 = (char *)operator new(88 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[88 * v6];
    v20 = v13;
    v22 = &v10[88 * v9];
    v14 = 88 * a2;
    v15 = &v13[v14];
    do
    {
      *(_QWORD *)v13 = &off_250ADB628;
      sub_239422F30((_WORD *)v13 + 4);
      v13 += 88;
      v14 -= 88;
    }
    while (v14);
    v21 = v15;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 == *a1)
    {
      *a1 = v20;
      a1[1] = v15;
      a1[2] = v22;
    }
    else
    {
      v18 = 0;
      do
      {
        *(_QWORD *)&v20[v18 - 88] = &off_250ADB628;
        sub_23982619C((uint64_t)&v20[v18 - 80], (uint64_t)&v16[v18 - 80]);
        *(_WORD *)&v20[v18 - 8] = *(_WORD *)&v16[v18 - 8];
        v18 -= 88;
      }
      while (&v16[v18] != v17);
      v19 = (char *)*a1;
      v16 = (char *)a1[1];
      *a1 = &v20[v18];
      a1[1] = v21;
      a1[2] = v22;
      if (v16 != v19)
      {
        do
        {
          sub_239416DA0((uint64_t)(v16 - 80));
          nullsub_4(v16 - 88);
          v16 -= 88;
        }
        while (v16 != v19);
        v16 = v19;
      }
    }
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_23957FF90(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = i - 88;
    *(_QWORD *)(a1 + 16) = i - 88;
    sub_239416DA0(i - 80);
    nullsub_4(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_23957FFF4(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  if (a2[1])
    v4 = *a2 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a2;
  if (v4)
    v5 = 0;
  v6 = *a3;
  *(_QWORD *)&v10 = *a1;
  *((_QWORD *)&v10 + 1) = v5;
  v11 = v6;
  if (HIDWORD(v5) * HIDWORD(v6) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_23949F328(a4, &v12, &v10);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_2395800D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395800EC()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239580100(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_250ADEB38;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239580158(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250ADEB38;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

double sub_239580198(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  int32x4_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int32 v9;
  uint64_t **v10;
  unint64_t v11;
  uint32x2_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint32x4_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __n128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __n128 v32;
  uint64_t (**v33)();
  int32x4_t v34;
  int v35;
  __int32 v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  __n128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __n128 v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __n128 v60;
  uint64_t v61;
  double result;
  uint64_t (**v63)();
  uint64_t v64;
  std::__shared_weak_count *v65;
  _DWORD v66[2];
  uint64_t (**v67)();
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t (**v71)();
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t (**v74)();
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint32x4_t v77;
  uint64_t (**v78)();
  _WORD v79[64];
  uint64_t v80;
  uint64_t (**v81)();
  _BYTE v82[128];
  uint64_t v83;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  LODWORD(v78) = **(_DWORD **)(a1 + 40);
  HIDWORD(v78) = (_DWORD)v78;
  v81 = &off_250ADEB80;
  sub_2395809BC(&v78, (uint64_t)v82);
  sub_23946A0B4((uint64_t)&v81, &v80);
  v78 = &off_250ADDC30;
  sub_239580DB0(v79);
  v6 = *(_QWORD **)(a1 + 16);
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v6[1] - *v6) >> 3) <= v3)
  {
    v16 = **(_DWORD **)(a1 + 40);
    *(_DWORD *)(**(_QWORD **)(a1 + 24) + 4 * v3) = v16;
    *(_DWORD *)(**(_QWORD **)(a1 + 32) + 4 * v3) = v16;
    goto LABEL_54;
  }
  v7 = *v6 + 136 * v3;
  v8 = **(_QWORD **)(a1 + 24);
  *(_DWORD *)(v8 + 4 * v3) = *(_DWORD *)(v7 + 112);
  v9 = *(_DWORD *)(v7 + 116);
  *(_DWORD *)(**(_QWORD **)(a1 + 32) + 4 * v3) = v9;
  v10 = *(uint64_t ***)(a1 + 48);
  if (*((_BYTE *)v10 + 8))
  {
    v11 = **(_QWORD **)(a1 + 40);
    *(float *)v5.i32 = (float)v11;
    v12.i32[0] = v9;
    v12.i32[1] = *(_DWORD *)(v8 + 4 * v3);
    *(float32x2_t *)v5.i8 = vdiv_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0), vcvt_f32_u32(v12));
    v77 = 0uLL;
    v14 = *v10;
    v13 = **v10;
    if (v3 < (v14[1] - v13) >> 4)
      v77 = *(uint32x4_t *)(v13 + 16 * v3);
    if (fabsf(*(float *)&v5.i32[1] + -1.0) <= 0.00000011921)
    {
      v15 = v77;
      if (fabsf(*(float *)v5.i32 + -1.0) <= 0.00000011921)
      {
LABEL_27:
        v35 = *(_DWORD *)(v4 + 16);
        v36 = v15.i32[1] + v35;
        if (v15.i32[1] + v35 >= (int)v11)
          v36 = v11;
        v77.i32[0] = (v15.i32[0] - v35) & ~((v15.i32[0] - v35) >> 31);
        v77.i32[1] = v36;
        v37 = v15.i32[2] - v35;
        v38 = v15.i32[3] + v35;
        v39 = v37 & ~(v37 >> 31);
        if (v38 < (int)v11)
          LODWORD(v11) = v38;
        v77.i64[1] = __PAIR64__(v11, v39);
        v74 = &off_250ADB628;
        sub_239422F30(&v75);
        sub_23957D410(**(_DWORD **)(a1 + 40), **(_DWORD **)(a1 + 40), **(_DWORD **)(a1 + 40), **(_DWORD **)(a1 + 40), (unsigned int *)&v77, (uint64_t)&v74);
        v71 = &off_250ADB350;
        sub_23941CBA8((uint64_t)&v74, &v72);
        sub_23946A0B4(*(_QWORD *)(a1 + 56), &v70);
        v40 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32);
        v41 = **(_QWORD **)(a1 + 40);
        v42 = **(_QWORD **)(a1 + 64);
        v43 = **(_QWORD **)(a1 + 72);
        v44 = v42 / v43;
        v66[0] = v42 / v43;
        v66[1] = v41;
        v63 = (uint64_t (**)())(v40 + v41 * v3 * v42 / v43);
        v67 = &off_250ADB3D0;
        if ((_DWORD)v41)
          v45 = (_DWORD)v44 == 0;
        else
          v45 = 1;
        v46 = v44 << 32;
        if (v45)
          v46 = 0;
        v83 = v46 | (v66[0] != 0);
        sub_23957FFF4(&v63, v66, &v83, (uint64_t)&v68);
        v47 = **(_QWORD **)(a1 + 16) + 136 * v3;
        v63 = &off_250ADB468;
        sub_239425F30(v47, &v64);
        sub_239711914((uint64_t)&v63, (uint64_t)&v67, 0, 1, (uint64_t)&v71, 1u);
        v48 = v65;
        if (v65)
        {
          p_shared_owners = (unint64_t *)&v65->__shared_owners_;
          do
            v50 = __ldaxr(p_shared_owners);
          while (__stlxr(v50 - 1, p_shared_owners));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = nullsub_4(&v63);
        v52 = v69;
        if (v69)
        {
          v53 = (unint64_t *)&v69->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v52->__on_zero_shared)(v52, v51);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v55 = nullsub_4(&v67);
        v56 = v70;
        v70 = 0;
        if (v56)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v56 + 8))(v56, v55);
        v57 = v73;
        if (v73)
        {
          v58 = (unint64_t *)&v73->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v57->__on_zero_shared)(v57, v55);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        nullsub_4(&v71);
        sub_239416DA0((uint64_t)&v75);
        nullsub_4(&v74);
        goto LABEL_54;
      }
    }
    else
    {
      v15 = v77;
    }
    v34 = vrev64q_s32(v5);
    v15 = vcvtq_u32_f32(vmulq_f32((float32x4_t)vzip1q_s32(v34, v34), vcvtq_f32_u32(v15)));
    goto LABEL_27;
  }
  sub_23946A0B4(*(_QWORD *)(a1 + 56), &v67);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32);
  v18 = **(_QWORD **)(a1 + 40);
  v19 = **(_QWORD **)(a1 + 64);
  v20 = **(_QWORD **)(a1 + 72);
  v21 = v19 / v20;
  v77.i32[0] = v19 / v20;
  v77.i32[1] = v18;
  v74 = (uint64_t (**)())(v17 + v18 * v3 * v19 / v20);
  v63 = &off_250ADB3D0;
  if ((_DWORD)v18)
    v22 = (_DWORD)v21 == 0;
  else
    v22 = 1;
  v23 = v21 << 32;
  if (v22)
    v23 = 0;
  v71 = (uint64_t (**)())(v23 | (v77.i32[0] != 0));
  sub_23957FFF4(&v74, &v77, (uint64_t *)&v71, (uint64_t)&v64);
  v24 = **(_QWORD **)(a1 + 16) + 136 * v3;
  v74 = &off_250ADB468;
  sub_239425F30(v24, &v75);
  sub_239711914((uint64_t)&v74, (uint64_t)&v63, 0, 1, 0, 0);
  v25 = v76;
  if (v76)
  {
    v26 = (unint64_t *)&v76->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = nullsub_4(&v74);
  v29 = v65;
  if (v65)
  {
    v30 = (unint64_t *)&v65->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v29->__on_zero_shared)(v29, v28);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = nullsub_4(&v63);
  v33 = v67;
  v67 = 0;
  if (v33)
    (*((void (**)(uint64_t (**)(), __n128))*v33 + 1))(v33, v32);
LABEL_54:
  sub_239416DA0((uint64_t)v79);
  v60 = nullsub_4(&v78);
  v61 = v80;
  v80 = 0;
  if (v61)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v61 + 8))(v61, v60);
  sub_239416DA0((uint64_t)v82);
  *(_QWORD *)&result = nullsub_4(&v81).n128_u64[0];
  return result;
}

void sub_239580748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  __n128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __n128 v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;

  v53 = a38;
  if (a38)
  {
    p_shared_owners = (unint64_t *)&a38->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = nullsub_4(&a36);
  v57 = a12;
  if (a12)
  {
    v58 = (unint64_t *)&a12->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v57->__on_zero_shared)(v57, v56);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = nullsub_4(&a10);
  v61 = a21;
  a21 = 0;
  if (v61)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v61 + 8))(v61, v60);
  sub_239416DA0(v50);
  v62 = nullsub_4(&a49);
  v63 = *(_QWORD *)(v51 - 216);
  *(_QWORD *)(v51 - 216) = 0;
  if (v63)
  {
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v63 + 8))(v63, v62);
    sub_239416DA0(v49);
    nullsub_4(v51 - 208);
    _Unwind_Resume(a1);
  }
  sub_239416DA0(v49);
  nullsub_4(v51 - 208);
  _Unwind_Resume(a1);
}

void sub_239580980(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_4(v1 - 208);
  _Unwind_Resume(a1);
}

double sub_239580994(uint64_t a1)
{
  double result;

  sub_239416DA0(a1 + 8);
  *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  return result;
}

uint64_t sub_2395809BC@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_239580BF8(a1, &v14);
  v3 = v14;
  v15 = v14;
  if (v14)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v14;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADEBE0;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v14 = 0;
  v15 = 0;
  v17 = v3;
  v18 = v4;
  v16 = 0;
  sub_2398277C4(a2, &v17, 0);
  v6 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    v13 = sub_23976C294(result);
    return MEMORY[0x23B83E31C](v13, 0x10A3C40ED729E16);
  }
  return result;
}

void sub_239580AD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239580CF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239580AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    sub_239EBED3C();
  sub_239416DA0((uint64_t)&a11);
  sub_239580CF4(&a10);
  _Unwind_Resume(a1);
}

void sub_239580B14(uint64_t a1)
{
  sub_239416DA0(a1 + 8);
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239580B50()
{
  return 21;
}

uint64_t sub_239580B58(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_239580B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 88, 3, a1 + 100, 1);
}

uint64_t sub_239580B7C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_239580BF8@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _DWORD v7[4];
  _DWORD v8[8];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t (**v12)();

  v12 = &off_250ADEBC0;
  sub_2397851CC(a1, (uint64_t)v7);
  v3 = operator new();
  *(_QWORD *)v3 = off_250AE6F38;
  v4 = v8[6];
  *(_DWORD *)(v3 + 8) = v7[2];
  *(_BYTE *)(v3 + 16) = 0;
  *(_DWORD *)(v3 + 40) = -1;
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(uint64_t (***)(), uint64_t, _DWORD *))off_250ADEAD0[v4])(&v12, v3 + 16, v8);
    *(_DWORD *)(v3 + 40) = v4;
  }
  v5 = v10;
  *(_OWORD *)(v3 + 48) = v9;
  *(_OWORD *)(v3 + 64) = v5;
  *(_QWORD *)(v3 + 80) = v11;
  *(_QWORD *)v3 = off_250AE7958;
  *a2 = v3;
  return sub_23976C294((uint64_t)v7);
}

void sub_239580CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23976C294((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_239580CF4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_23976C294(v2);
    MEMORY[0x23B83E31C](v3, 0x10A3C40ED729E16);
  }
  return a1;
}

void sub_239580D3C()
{
  JUMPOUT(0x23B83E31CLL);
}

void sub_239580D54(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239580D78(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_23976C294(result);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

uint64_t sub_239580DB0@<X0>(_WORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int16 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  sub_239580F18(&v12);
  v13 = v12;
  if (v12)
  {
    v2 = (std::__shared_weak_count *)operator new();
    v3 = v12;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADECB8;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  }
  else
  {
    v2 = 0;
  }
  v14 = v2;
  v12 = 0;
  sub_239827CE0((uint64_t)a1, &v13, 0);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1);
  v5 = v4;
  if ((v4 & 0xFFFFFF) <= 0x10000)
    v5 = 0;
  v6 = v4 & 0xFF00;
  if ((v4 & 0xFF0000) == 0)
    v6 = 0;
  a1[60] = v6 & 0xFF00 | v5;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    v11 = sub_239818264(result);
    return MEMORY[0x23B83E31C](v11, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_239580EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239581014((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239580ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_239581014((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239580EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_239581014((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239580F18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _BYTE v4[8];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[7];

  v9[6] = &off_250ADEC18;
  sub_239822BA8((uint64_t)v4);
  v2 = operator new();
  *(_QWORD *)v2 = &off_250ADEC38;
  *(_OWORD *)(v2 + 8) = v5;
  *(_OWORD *)(v2 + 24) = v6;
  *(_OWORD *)(v2 + 40) = v7;
  *(_QWORD *)(v2 + 56) = v8;
  sub_239916924((__n128 *)(v2 + 64), (__n128 *)v9);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)&v9[3];
  *(_QWORD *)(v2 + 104) = v9[5];
  *a1 = v2;
  return sub_239818264((uint64_t)v4);
}

void sub_239580FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  __n128 v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4);
  sub_239818264((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239581000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239818264((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239581014(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_239818264(v2);
    MEMORY[0x23B83E31C](v3, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_23958105C()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239581070()
{
  return 24;
}

__int128 *sub_23958107C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2569309F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2569309F0))
  {
    v2 = sub_239581154();
    if (*((char *)v2 + 23) < 0)
    {
      sub_23941A7F8(&xmmword_2569309D8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2569309E8 = *((_QWORD *)v2 + 2);
      xmmword_2569309D8 = v3;
    }
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_2569309D8, &dword_23940C000);
    __cxa_guard_release(&qword_2569309F0);
  }
  if (byte_2569309EF >= 0)
    return &xmmword_2569309D8;
  else
    return (__int128 *)xmmword_2569309D8;
}

void sub_23958113C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2569309F0);
  _Unwind_Resume(a1);
}

__int128 *sub_239581154()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930A10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930A10))
    return &xmmword_2569309F8;
  v2 = sub_239581230();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&xmmword_2569309F8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_256930A08 = v2->__r_.__value_.__r.__words[2];
    xmmword_2569309F8 = v3;
  }
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_2569309F8, &dword_23940C000);
  __cxa_guard_release(&qword_256930A10);
  return &xmmword_2569309F8;
}

void sub_239581218(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930A10);
  _Unwind_Resume(a1);
}

std::string *sub_239581230()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930A30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930A30))
    return &stru_256930A18;
  sub_2395814D0((uint64_t)__p);
  sub_239581320((uint64_t)__p, &stru_256930A18);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930A18, &dword_23940C000);
  __cxa_guard_release(&qword_256930A30);
  return &stru_256930A18;
}

void sub_2395812E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_256930A30);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_256930A30);
  _Unwind_Resume(a1);
}

void sub_239581320(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  int64x2_t v5;
  int8x16_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *__p;
  void **v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_256930A50);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930A50))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb32f]", &xmmword_256930A38);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930A38, &dword_23940C000);
    __cxa_guard_release(&qword_256930A50);
  }
  if (byte_256930A4F < 0)
  {
    sub_23941A7F8(__dst, (void *)xmmword_256930A38, *((unint64_t *)&xmmword_256930A38 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_256930A38;
    v13 = unk_256930A48;
  }
  sub_23941B674(&__p, (uint64_t)__dst, 1uLL);
  sub_239A44200(a1, (uint64_t *)&__p, a2, v5, v6);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v11;
    v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_239581488(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930A50);
  _Unwind_Resume(a1);
}

void sub_2395814A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_23941B08C(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2395814D0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_256930A70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_256930A70))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb32f>]", qword_256930A58);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930A58, &dword_23940C000);
    __cxa_guard_release(&qword_256930A70);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_256930A90);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_256930A90))
  {
    v5 = sub_239423A18(qword_256930A58, "<", 0);
    sub_239423914(qword_256930A58, 0, v5, qword_256930A78);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930A78, &dword_23940C000);
    __cxa_guard_release(&qword_256930A90);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_256930AB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930AB0))
  {
    sub_239A44118((std::string::size_type)qword_256930A78, (std::string *)&xmmword_256930A98);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930A98, &dword_23940C000);
    __cxa_guard_release(&qword_256930AB0);
  }
  if (byte_256930AAF < 0)
  {
    sub_23941A7F8((_BYTE *)a1, (void *)xmmword_256930A98, *((unint64_t *)&xmmword_256930A98 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_256930A98;
    *(_QWORD *)(a1 + 16) = unk_256930AA8;
  }
}

void sub_23958166C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930AB0);
  _Unwind_Resume(a1);
}

void sub_239581684(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930A90);
  _Unwind_Resume(a1);
}

void sub_23958169C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930A70);
  _Unwind_Resume(a1);
}

void sub_2395816B8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2395816DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_239818264(result);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

void sub_239581714(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE v16[12];
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = a1[1];
  v4 = (std::__shared_weak_count *)a1[2];
  v19 = v3;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v17 = v3;
    v18 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v17 = v3;
    v18 = 0;
  }
  v8 = a1[4];
  sub_2398EB464((uint64_t)v16, 2, (uint64_t)(a1 + 8), 2, (uint64_t)(a1 + 9), 1);
  sub_239423D38(a2, &v17, (uint64_t)v16, v8, 1);
  v9 = nullsub_4(v16);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v9);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_239581834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_4(&a10);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_239581858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_239581874(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  if (a2[1])
    v4 = *a2 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a2;
  if (v4)
    v5 = 0;
  v6 = *a3;
  *(_QWORD *)&v10 = *a1;
  *((_QWORD *)&v10 + 1) = v5;
  v11 = v6;
  if (HIDWORD(v5) * HIDWORD(v6) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_239581A84(a4, &v12, &v10);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_239581954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239581968(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2395819D4()
{
  return 4;
}

uint64_t sub_2395819DC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2395819E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 2, a1 + 32, 2, a1 + 40, 4);
}

uint64_t sub_239581A00(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_239581A84(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_239581B90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void sub_239581BA8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2398EB464((uint64_t)&v18, 2, a1 + 32, 2, a1 + 40, 4);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 48);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 4;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_4(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_239581CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239581D08()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239581D1C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_250ADED48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_239581D6C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250ADED48;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_239581DA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __n128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v23;
  __n128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __n128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  __n128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __n128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  _BYTE v51[32];
  uint64_t v52;
  _BYTE v53[12];
  _DWORD v54[8];
  _DWORD v55[2];
  uint64_t (**v56)();
  uint64_t v57;
  std::__shared_weak_count *v58;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  sub_239490E34(*(_QWORD *)(a1 + 16), (uint64_t)&v52);
  if (*(_DWORD *)&v53[8])
    v5 = *(_DWORD *)v53 == 0;
  else
    v5 = 1;
  if (v5 || HIDWORD(*(_QWORD *)v53) == 0)
    v7 = 0;
  else
    v7 = *(_DWORD *)&v53[8];
  if (v7 * v54[2] == -1)
    sub_239EBF538();
  v8 = **(_QWORD **)(a1 + 24);
  v55[0] = v8;
  v55[1] = v8;
  v52 += 4 * (v54[3] * v3);
  v56 = &off_250ADED08;
  v9 = v8 << 32;
  if (!(_DWORD)v8)
    v9 = 0;
  v47 = (uint64_t (**)())(v9 | ((_DWORD)v8 != 0));
  sub_239581874(&v52, v55, (uint64_t *)&v47, (uint64_t)&v57);
  v47 = &off_250ADB210;
  sub_239581BA8((uint64_t)&v56, (uint64_t)&v48);
  sub_2397078F8((uint64_t)&v47, 1, &v52);
  sub_239422CF0(**(_QWORD **)(a1 + 32) + 88 * v3, (uint64_t)&v52);
  v10 = nullsub_4(v54);
  v11 = *(std::__shared_weak_count **)&v53[4];
  if (*(_QWORD *)&v53[4])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v53[4] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  j_nullsub_4_89(&v52);
  v14 = nullsub_4(&v50);
  v15 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v14);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  nullsub_4(&v47);
  v18 = (float)**(unint64_t **)(a1 + 24);
  v19 = (float)*(unsigned int *)(**(_QWORD **)(a1 + 40) + 4 * v3) / v18;
  v20 = (float)*(unsigned int *)(**(_QWORD **)(a1 + 48) + 4 * v3) / v18;
  v21 = fabsf(v20 + -1.0);
  if (fabsf(v19 + -1.0) > 0.00000011921 || v21 > 0.00000011921)
  {
    v23 = **(_QWORD **)(a1 + 32) + 88 * v3;
    v47 = &off_250ADB778;
    sub_2394247FC(v23, (uint64_t)&v48);
    sub_239713FB0(&v47, 0, &v52, COERCE_UNSIGNED_INT64(v19), COERCE_UNSIGNED_INT64(v20));
    sub_239422CF0(**(_QWORD **)(a1 + 32) + 88 * v3, (uint64_t)&v52);
    v24 = nullsub_4(v54);
    v25 = *(std::__shared_weak_count **)&v53[4];
    if (*(_QWORD *)&v53[4])
    {
      v26 = (unint64_t *)(*(_QWORD *)&v53[4] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v25->__on_zero_shared)(v25, v24);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    j_nullsub_4_89(&v52);
    v28 = nullsub_4(v51);
    v29 = v49;
    if (v49)
    {
      v30 = (unint64_t *)&v49->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v29->__on_zero_shared)(v29, v28);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    j_nullsub_4_89(&v47);
    v32 = **(_QWORD **)(a1 + 32);
    if (*(_DWORD *)(v32 + 88 * v3 + 64) != *(_DWORD *)(**(_QWORD **)(a1 + 40) + 4 * v3)
      || *(_DWORD *)(v32 + 88 * v3 + 68) != *(_DWORD *)(**(_QWORD **)(a1 + 48) + 4 * v3))
    {
      **(_BYTE **)(a1 + 56) = 1;
    }
  }
  if ((*(_DWORD *)(v4 + 8) & 0x80000000) == 0)
  {
    v33 = **(_QWORD **)(a1 + 32) + 88 * v3;
    v47 = &off_250ADB778;
    sub_2394247FC(v33, (uint64_t)&v48);
    *(float *)&v34 = (float)*(int *)(v4 + 8);
    *(float *)&v35 = (float)*(int *)(v4 + 12);
    sub_239713AF4((uint64_t)&v47, (uint64_t)&v52, v34, v35);
    sub_239422CF0(**(_QWORD **)(a1 + 32) + 88 * v3, (uint64_t)&v52);
    v36 = nullsub_4(v54);
    v37 = *(std::__shared_weak_count **)&v53[4];
    if (*(_QWORD *)&v53[4])
    {
      v38 = (unint64_t *)(*(_QWORD *)&v53[4] + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v37->__on_zero_shared)(v37, v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    j_nullsub_4_89(&v52);
    v40 = nullsub_4(v51);
    v41 = v49;
    if (v49)
    {
      v42 = (unint64_t *)&v49->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v41->__on_zero_shared)(v41, v40);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    j_nullsub_4_89(&v47);
  }
  v44 = v58;
  if (v58)
  {
    v45 = (unint64_t *)&v58->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  nullsub_4(&v56);
}

void sub_2395823D4(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _BYTE v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v18 = 0;
  v4 = *a1;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  *(_QWORD *)&v19[4] = v6;
  *(_DWORD *)v19 = 3;
  v7 = *(_QWORD *)v19;
  *(_DWORD *)v19 = 1;
  *(_QWORD *)&v19[4] = *a3;
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v7;
  v12 = HIDWORD(v6);
  v13 = *(_QWORD *)v19;
  v14 = *(_DWORD *)&v19[8];
  v15 = v6;
  v16 = *(_QWORD *)&v19[4];
  if (*(_DWORD *)&v19[8] * HIDWORD(v6) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_23949DDE0(a4, &v17, &v11);
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_239582518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23958252C(void **a1, int *a2, int *a3, int *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  void **v26;
  void *v27;
  void **v28;
  uint64_t v29;
  char *v30;
  char *v31;

  v5 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x492492492492492)
    sub_2394189F8();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v6)
    v6 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v10 = 0x492492492492492;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0x492492492492492)
      sub_239418A80();
    v11 = (char *)operator new(56 * v10);
  }
  else
  {
    v11 = 0;
  }
  v29 = (uint64_t)&v11[56 * v5];
  v31 = &v11[56 * v10];
  sub_2395827A8((uint64_t)(a1 + 2), v29, a2, a3, a4);
  v12 = v29;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    v24 = (char *)a1[1];
  }
  else
  {
    v15 = 0;
    do
    {
      v17 = v29 + v15;
      v18 = &v14[v15];
      v19 = *(_QWORD *)&v14[v15 - 56];
      *(_DWORD *)(v17 - 48) = *(_DWORD *)&v14[v15 - 48];
      *(_QWORD *)(v17 - 56) = v19;
      v20 = *(_QWORD *)&v14[v15 - 40];
      *((_QWORD *)v18 - 5) = 0;
      *(_QWORD *)(v17 - 40) = v20;
      *(_QWORD *)(v17 - 32) = *(_QWORD *)&v14[v15 - 32];
      *((_QWORD *)v18 - 4) = 0;
      v21 = *(_QWORD *)&v14[v15 - 24];
      *(_QWORD *)(v29 + v15 - 24) = v21;
      v22 = *(_QWORD *)&v14[v15 - 16];
      *(_QWORD *)(v17 - 16) = v22;
      *(_DWORD *)(v17 - 8) = *(_DWORD *)&v14[v15 - 8];
      if (v22)
      {
        v16 = *(_QWORD *)(v21 + 8);
        v23 = *(_QWORD *)(v17 - 32);
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v16 >= v23)
            v16 %= v23;
        }
        else
        {
          v16 &= v23 - 1;
        }
        *(_QWORD *)(v20 + 8 * v16) = v29 + v15 - 24;
        *(_QWORD *)&v14[v15 - 24] = 0;
        *(_QWORD *)&v14[v15 - 16] = 0;
      }
      v15 -= 56;
    }
    while (&v14[v15] != v13);
    v24 = (char *)*a1;
    v14 = (char *)a1[1];
    v12 = v29 + v15;
  }
  *a1 = (void *)v12;
  a1[1] = (void *)(v29 + 56);
  a1[2] = v31;
  if (v14 == v24)
  {
    if (v14)
LABEL_24:
      operator delete(v14);
  }
  else
  {
    do
    {
      v30 = v14 - 56;
      v26 = (void **)*((_QWORD *)v14 - 3);
      if (v26)
      {
        do
        {
          v28 = (void **)*v26;
          if (*((char *)v26 + 39) < 0)
            operator delete(v26[2]);
          operator delete(v26);
          v26 = v28;
        }
        while (v28);
      }
      v27 = (void *)*((_QWORD *)v14 - 5);
      *((_QWORD *)v14 - 5) = 0;
      if (v27)
        operator delete(v27);
      v14 -= 56;
    }
    while (v30 != v24);
    v14 = v24;
    if (v24)
      goto LABEL_24;
  }
  return v29 + 56;
}

void sub_239582794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394290A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395827A8(uint64_t a1, uint64_t a2, int *a3, int *a4, int *a5)
{
  int v6;
  float v7;
  float v8;
  void **v9;
  void *v10;
  void **v11;
  void *__p[2];
  void *v13[2];
  int v14;

  v6 = *a3;
  v7 = (float)*a4;
  v8 = (float)*a5;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v13 = 0u;
  v14 = 1065353216;
  sub_239719E98(a2, v6, (uint64_t)__p, v7, v8);
  v9 = (void **)v13[0];
  if (v13[0])
  {
    do
    {
      v11 = (void **)*v9;
      if (*((char *)v9 + 39) < 0)
        operator delete(v9[2]);
      operator delete(v9);
      v9 = v11;
    }
    while (v11);
  }
  v10 = __p[0];
  __p[0] = 0;
  if (v10)
    operator delete(v10);
}

void sub_239582838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23942823C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23958284C(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, std::string *a3@<X8>)
{
  int64x2_t v5;
  int8x16_t v6;
  void *v7;
  void *size;
  char v9;
  std::string::size_type v10;
  std::string::size_type v11;
  void *v12;
  int64x2_t v13;
  int8x16_t v14;
  std::string::size_type v15;
  int64x2_t v16;
  int8x16_t v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  int v21;
  std::__fs::filesystem::path::__string_view v22;
  std::string *p_s;
  std::basic_string_view<_CharT, _Traits>::size_type v24;
  std::basic_string_view<_CharT, _Traits>::size_type v25;
  std::__fs::filesystem::path::__string_view v26;
  int v27;
  std::__fs::filesystem::path::__string_view v28;
  std::string *v29;
  std::basic_string_view<_CharT, _Traits>::size_type v30;
  std::basic_string_view<_CharT, _Traits>::size_type v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  void *exception;
  std::__fs::filesystem::path v36;
  std::__fs::filesystem::path v37;
  std::__fs::filesystem::path v38;
  Dl_info __p;
  std::string __dst;
  char v41;
  std::string v42;
  void *v43[2];
  std::string::size_type v44;
  int v45;
  std::string __s;
  std::string v47;
  std::string v48;
  std::string v49;
  void *v50[2];
  void *v51;
  void *v52[2];
  char v53;
  std::string v54;
  _QWORD v55[18];

  v55[17] = *MEMORY[0x24BDAC8D0];
  v42.__r_.__value_.__r.__words[0] = a1;
  v38.__pn_.__r_.__value_.__r.__words[0] = a2;
  LODWORD(v36.__pn_.__r_.__value_.__l.__data_) = 320;
  v45 = 32;
  if (a1 == 4)
  {
    __s.__r_.__value_.__r.__words[0] = 0x100000002;
    LODWORD(__s.__r_.__value_.__r.__words[1]) = 1;
    sub_23957A084((unsigned int *)&__s, (unsigned int *)__s.__r_.__value_.__r.__words + 1, (unsigned int *)&__s.__r_.__value_.__r.__words[1], &__dst);
    HIBYTE(__p.dli_sname) = 1;
    LOWORD(__p.dli_fname) = 95;
    sub_23941AE44((uint64_t)__dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, (uint64_t)&__p, &v47, v5, v6);
    size = (void *)v47.__r_.__value_.__l.__size_;
    v7 = (void *)v47.__r_.__value_.__r.__words[0];
    LODWORD(v37.__pn_.__r_.__value_.__l.__data_) = v47.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v37.__pn_.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v47.__r_.__value_.__r.__words[2]
                                                                             + 3);
    v9 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    *((_BYTE *)&v47.__r_.__value_.__s + 23) = 0;
    v47.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.dli_sname) < 0)
      operator delete((void *)__p.dli_fname);
    v10 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      v11 = __dst.__r_.__value_.__l.__size_;
      v12 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ == __dst.__r_.__value_.__r.__words[0])
        goto LABEL_19;
      do
      {
        if (*(char *)(v11 - 1) < 0)
          operator delete(*(void **)(v11 - 24));
        v11 -= 24;
      }
      while (v11 != v10);
LABEL_18:
      v12 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_19:
      __dst.__r_.__value_.__l.__size_ = v10;
      operator delete(v12);
    }
  }
  else
  {
    __s.__r_.__value_.__r.__words[0] = 0x100000002;
    LODWORD(__s.__r_.__value_.__r.__words[1]) = 1;
    sub_23957A084((unsigned int *)&__s, (unsigned int *)__s.__r_.__value_.__r.__words + 1, (unsigned int *)&__s.__r_.__value_.__r.__words[1], &__dst);
    HIBYTE(__p.dli_sname) = 1;
    LOWORD(__p.dli_fname) = 95;
    sub_23941AE44((uint64_t)__dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, (uint64_t)&__p, &v47, v13, v14);
    size = (void *)v47.__r_.__value_.__l.__size_;
    v7 = (void *)v47.__r_.__value_.__r.__words[0];
    LODWORD(v37.__pn_.__r_.__value_.__l.__data_) = v47.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v37.__pn_.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v47.__r_.__value_.__r.__words[2]
                                                                             + 3);
    v9 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    *((_BYTE *)&v47.__r_.__value_.__s + 23) = 0;
    v47.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.dli_sname) < 0)
      operator delete((void *)__p.dli_fname);
    v10 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      v15 = __dst.__r_.__value_.__l.__size_;
      v12 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ == __dst.__r_.__value_.__r.__words[0])
        goto LABEL_19;
      do
      {
        if (*(char *)(v15 - 1) < 0)
          operator delete(*(void **)(v15 - 24));
        v15 -= 24;
      }
      while (v15 != v10);
      goto LABEL_18;
    }
  }
  sub_239583410("s", (int *)&v36, &v47);
  sub_239583560((unint64_t *)&v42, "ch", &v48);
  sub_239583780("fp", &v45, &v49);
  if (v9 < 0)
  {
    sub_23941A7F8(v50, v7, (unint64_t)size);
  }
  else
  {
    v50[0] = v7;
    v50[1] = size;
    LODWORD(v51) = v37.__pn_.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v51 + 3) = *(_DWORD *)((char *)v37.__pn_.__r_.__value_.__r.__words + 3);
    HIBYTE(v51) = v9;
  }
  v53 = 10;
  strcpy((char *)v52, "0000000000");
  sub_2395838D0("b", (unint64_t *)&v38, &v54);
  HIBYTE(__p.dli_sname) = 1;
  LOWORD(__p.dli_fname) = 95;
  sub_239583A20((uint64_t)&v47, (uint64_t)v55, (uint64_t)&__p, &__dst, v16, v17);
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__s, ".bundle");
  v18 = std::string::append(&__dst, (const std::string::value_type *)&__s, 7uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v44 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)v43 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(__p.dli_sname) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_49;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.dli_sname) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_50;
  }
LABEL_49:
  operator delete((void *)__p.dli_fname);
  if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((v53 & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v54.__r_.__value_.__l.__data_);
  if ((v53 & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v51) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v52[0]);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v50[0]);
  if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_54;
  }
LABEL_53:
  operator delete(v49.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
LABEL_55:
    operator delete(v47.__r_.__value_.__l.__data_);
    if ((v9 & 0x80) == 0)
      goto LABEL_33;
    goto LABEL_56;
  }
LABEL_54:
  operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_55;
LABEL_32:
  if ((v9 & 0x80) == 0)
    goto LABEL_33;
LABEL_56:
  operator delete(v7);
LABEL_33:
  std::operator+<char>();
  if (a1 == 4)
  {
    std::operator+<char>();
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    v42 = v47;
  }
  sub_2394988CC((uint64_t)&v47);
  sub_2396431C8((__int128 *)&v42, &v47.__r_.__value_.__r.__words[2], 1, &__dst);
  if (!v41)
  {
    if (!dladdr(sub_23958284C, &__p))
    {
LABEL_111:
      if (!v41)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x23B83DB6C](exception, "Failed to access model resource path");
        __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_112;
    }
    memset(&__s, 0, sizeof(__s));
    v20 = (std::string *)(__p.dli_fname - 1);
    do
    {
      v21 = v20->__r_.__value_.__s.__data_[1];
      v20 = (std::string *)((char *)v20 + 1);
    }
    while (v21);
    sub_23948900C(&__s, (std::string *)__p.dli_fname, v20);
    std::__fs::filesystem::__weakly_canonical(&v38, (const std::__fs::filesystem::path *)&__s, 0);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    v22 = std::__fs::filesystem::path::__extension(&v38);
    if (v22.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    if (v22.__size_ >= 0x17)
    {
      v24 = (v22.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22.__size_ | 7) != 0x17)
        v24 = v22.__size_ | 7;
      v25 = v24 + 1;
      p_s = (std::string *)operator new(v24 + 1);
      __s.__r_.__value_.__l.__size_ = v22.__size_;
      __s.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s;
    }
    else
    {
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = v22.__size_;
      p_s = &__s;
      if (!v22.__size_)
      {
LABEL_61:
        p_s->__r_.__value_.__s.__data_[v22.__size_] = 0;
        v37.__pn_ = __s;
        memset(&__s, 0, sizeof(__s));
        sub_23948900C(&__s, (std::string *)".so", (std::string *)"");
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26.__data_ = (const std::string_view::value_type *)&__s;
        else
          v26.__data_ = (const std::string_view::value_type *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26.__size_ = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v26.__size_ = __s.__r_.__value_.__l.__size_;
        v27 = std::__fs::filesystem::path::__compare(&v37, v26);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__s.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_69:
            if (!v27)
            {
LABEL_73:
              v28 = std::__fs::filesystem::path::__parent_path(&v38);
              if (v28.__size_ > 0x7FFFFFFFFFFFFFF7)
                sub_23941A5AC();
              if (v28.__size_ >= 0x17)
              {
                v30 = (v28.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v28.__size_ | 7) != 0x17)
                  v30 = v28.__size_ | 7;
                v31 = v30 + 1;
                v29 = (std::string *)operator new(v30 + 1);
                __s.__r_.__value_.__l.__size_ = v28.__size_;
                __s.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
                __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
              }
              else
              {
                *((_BYTE *)&__s.__r_.__value_.__s + 23) = v28.__size_;
                v29 = &__s;
                if (!v28.__size_)
                  goto LABEL_81;
              }
              memmove(v29, v28.__data_, v28.__size_);
LABEL_81:
              v29->__r_.__value_.__s.__data_[v28.__size_] = 0;
              v36.__pn_ = __s;
              memset(&__s, 0, sizeof(__s));
              sub_23948900C(&__s, (std::string *)"resources", (std::string *)"");
              sub_239498A04((std::__fs::filesystem::path *)&__s, (uint64_t)&v36, &v37);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
              if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v36.__pn_.__r_.__value_.__l.__data_);
              memset(&__s, 0, sizeof(__s));
              v32 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
              if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v33 = &v42;
              else
                v33 = (std::string *)v42.__r_.__value_.__r.__words[0];
              if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v32 = v42.__r_.__value_.__l.__size_;
              sub_23948900C(&__s, v33, (std::string *)((char *)v33 + v32));
              sub_239498A04((std::__fs::filesystem::path *)&__s, (uint64_t)&v37, &v36);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
              std::__fs::filesystem::__status(&v36, 0);
              if (__s.__r_.__value_.__s.__data_[0] && __s.__r_.__value_.__s.__data_[0] != 255)
              {
                if (v41)
                {
                  if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    sub_23941A7F8(&__s, v36.__pn_.__r_.__value_.__l.__data_, v36.__pn_.__r_.__value_.__l.__size_);
                  else
                    __s = v36.__pn_;
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  __dst = __s;
                }
                else
                {
                  if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    sub_23941A7F8(&__dst, v36.__pn_.__r_.__value_.__l.__data_, v36.__pn_.__r_.__value_.__l.__size_);
                  else
                    __dst = v36.__pn_;
                  v41 = 1;
                }
              }
              if (SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v36.__pn_.__r_.__value_.__l.__data_);
              if (SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v37.__pn_.__r_.__value_.__l.__data_);
            }
LABEL_109:
            if (SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v38.__pn_.__r_.__value_.__l.__data_);
            goto LABEL_111;
          }
        }
        else if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_69;
        }
        operator delete(v37.__pn_.__r_.__value_.__l.__data_);
        if (!v27)
          goto LABEL_73;
        goto LABEL_109;
      }
    }
    memmove(p_s, v22.__data_, v22.__size_);
    goto LABEL_61;
  }
LABEL_112:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(a3, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    if (v41 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    *a3 = __dst;
  }
  v47.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
  v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + *(_QWORD *)(v47.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v47.__r_.__value_.__r.__words[2] = v34;
  v48.__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v52[1]) < 0)
    operator delete(v51);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83E250](&v54.__r_.__value_.__r.__words[1]);
  if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v44) & 0x80000000) == 0)
      return;
LABEL_123:
    operator delete(v43[0]);
    return;
  }
  operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44) < 0)
    goto LABEL_123;
}

void sub_23958314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57)
{
  if (a55 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a24 < 0)
    operator delete(a19);
  if (a35 && a34 < 0)
  {
    operator delete(a29);
    sub_239498ABC((uint64_t)&a57);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_13:
      if (a48 < 0)
        operator delete(a43);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_239498ABC((uint64_t)&a57);
    if ((a41 & 0x80000000) == 0)
      goto LABEL_13;
  }
  operator delete(a36);
  goto LABEL_13;
}

void sub_2395833D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void **v39;

  while (1)
  {
    if (*((char *)v39 - 1) < 0)
      operator delete(*(v39 - 3));
    v39 -= 3;
    if (v39 == (void **)&a39)
      JUMPOUT(0x2395833C0);
  }
}

uint64_t sub_239583400()
{
  return 0x100000002;
}

void sub_239583410(const char *a1@<X0>, int *a2@<X1>, std::string *a3@<X8>)
{
  char *v5;
  int v6;
  int64x2_t v7;
  int8x16_t v8;
  _OWORD *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v16;
  unint64_t v17;
  std::string v18;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v5 = sub_239583C68(&__p, a1);
  v6 = *a2;
  v16 = v5;
  std::to_string(&v18, v6);
  v9 = v16;
  if ((unint64_t)v16 >= v17)
  {
    v11 = sub_23941ACDC(&__p, (uint64_t)&v18);
    v16 = v11;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      v11 = v16;
    }
  }
  else
  {
    v10 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
    *((_QWORD *)v16 + 2) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
    *v9 = v10;
    v11 = (char *)v9 + 24;
    v16 = (char *)v9 + 24;
  }
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v11, (uint64_t)&v18, a3, v7, v8);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v16;
    v14 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*(v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v16 = v12;
    operator delete(v14);
  }
}

void sub_239583520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_239583560(unint64_t *a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  char *v5;
  char *v6;
  size_t v7;
  int64x2_t v8;
  int8x16_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void **v16;
  void *v17;
  void *__p;
  char *v19;
  unint64_t v20;
  std::string v21;

  __p = 0;
  v19 = 0;
  v20 = 0;
  std::to_string(&v21, *a1);
  v5 = sub_23941ACDC(&__p, (uint64_t)&v21);
  v6 = v5;
  v19 = v5;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    v6 = v19;
    if ((unint64_t)v19 < v20)
    {
LABEL_3:
      v7 = strlen(a2);
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        sub_23941A5AC();
      v10 = v7;
      if (v7 >= 0x17)
      {
        v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17)
          v12 = v7 | 7;
        v13 = v12 + 1;
        v11 = operator new(v12 + 1);
        *((_QWORD *)v6 + 1) = v10;
        *((_QWORD *)v6 + 2) = v13 | 0x8000000000000000;
        *(_QWORD *)v6 = v11;
      }
      else
      {
        v6[23] = v7;
        v11 = v6;
        if (!v7)
          goto LABEL_11;
      }
      memmove(v11, a2, v10);
LABEL_11:
      *((_BYTE *)v11 + v10) = 0;
      v14 = v6 + 24;
      goto LABEL_14;
    }
  }
  else if ((unint64_t)v5 < v20)
  {
    goto LABEL_3;
  }
  v14 = sub_239583E94(&__p, a2);
LABEL_14:
  v19 = v14;
  *((_BYTE *)&v21.__r_.__value_.__s + 23) = 0;
  v21.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v14, (uint64_t)&v21, a3, v8, v9);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v15 = (char *)__p;
  if (__p)
  {
    v16 = (void **)v19;
    v17 = __p;
    if (v19 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != (void **)v15);
      v17 = __p;
    }
    v19 = v15;
    operator delete(v17);
  }
}

void sub_239583728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_239583780(const char *a1@<X0>, int *a2@<X1>, std::string *a3@<X8>)
{
  char *v5;
  int v6;
  int64x2_t v7;
  int8x16_t v8;
  _OWORD *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v16;
  unint64_t v17;
  std::string v18;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v5 = sub_239583E94(&__p, a1);
  v6 = *a2;
  v16 = v5;
  std::to_string(&v18, v6);
  v9 = v16;
  if ((unint64_t)v16 >= v17)
  {
    v11 = sub_23941ACDC(&__p, (uint64_t)&v18);
    v16 = v11;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      v11 = v16;
    }
  }
  else
  {
    v10 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
    *((_QWORD *)v16 + 2) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
    *v9 = v10;
    v11 = (char *)v9 + 24;
    v16 = (char *)v9 + 24;
  }
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v11, (uint64_t)&v18, a3, v7, v8);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v16;
    v14 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*(v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v16 = v12;
    operator delete(v14);
  }
}

void sub_239583890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_2395838D0(const char *a1@<X0>, unint64_t *a2@<X1>, std::string *a3@<X8>)
{
  char *v5;
  unint64_t v6;
  int64x2_t v7;
  int8x16_t v8;
  _OWORD *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v16;
  unint64_t v17;
  std::string v18;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v5 = sub_239583C68(&__p, a1);
  v6 = *a2;
  v16 = v5;
  std::to_string(&v18, v6);
  v9 = v16;
  if ((unint64_t)v16 >= v17)
  {
    v11 = sub_23941ACDC(&__p, (uint64_t)&v18);
    v16 = v11;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      v11 = v16;
    }
  }
  else
  {
    v10 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
    *((_QWORD *)v16 + 2) = *((_QWORD *)&v18.__r_.__value_.__l + 2);
    *v9 = v10;
    v11 = (char *)v9 + 24;
    v16 = (char *)v9 + 24;
  }
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  sub_23941AE44((uint64_t)__p, (uint64_t)v11, (uint64_t)&v18, a3, v7, v8);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v16;
    v14 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*(v13 - 1) < 0)
          operator delete(*((void **)v13 - 3));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v16 = v12;
    operator delete(v14);
  }
}

void sub_2395839E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_239583A20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>, int64x2_t a5@<Q3>, int8x16_t a6@<Q5>)
{
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int64x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  const double *v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  uint64_t i;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  int v43;
  const std::string::value_type *v44;
  std::string::size_type v45;

  v10 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  if (v10 <= 1)
    v11 = 1;
  else
    v11 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  v12 = v11 - 1;
  v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a3 + 8);
  v14 = v13 * v12;
  v15 = a2 - a1;
  if (a2 == a1)
  {
    v16 = 0;
  }
  else
  {
    if ((unint64_t)(v15 - 24) >= 0x60)
    {
      v18 = (v15 - 24) / 0x18uLL + 1;
      v19 = v18 & 3;
      if ((v18 & 3) == 0)
        v19 = 4;
      v20 = v18 - v19;
      v17 = a1 + 24 * v20;
      v21 = (unsigned __int8 *)(a1 + 47);
      v22 = 0uLL;
      v23.i64[0] = 255;
      v23.i64[1] = 255;
      v24 = 0uLL;
      do
      {
        a5.i8[0] = *(v21 - 24);
        a5.i8[4] = *v21;
        a6.i8[0] = v21[24];
        a6.i8[4] = v21[48];
        v25 = (const double *)(v21 - 39);
        v26 = (const double *)(v21 + 9);
        v27 = (unsigned __int128)vld3q_f64(v25);
        v28 = (unsigned __int128)vld3q_f64(v26);
        v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v29.i32[0];
        v30.i64[1] = v29.i32[1];
        v31 = v30;
        v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v32.i32[0];
        v30.i64[1] = v32.i32[1];
        v33 = v30;
        v30.i64[0] = a5.u32[0];
        v30.i64[1] = a5.u32[1];
        v34 = vbicq_s8(v30, v31);
        v30.i64[0] = a6.u32[0];
        v30.i64[1] = a6.u32[1];
        a5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v31), vandq_s8(v34, v23));
        a6 = vandq_s8((int8x16_t)v28, v33);
        v22 = vaddq_s64(a5, v22);
        v24 = vaddq_s64((int64x2_t)vorrq_s8(a6, vandq_s8(vbicq_s8(v30, v33), v23)), v24);
        v21 += 96;
        v20 -= 4;
      }
      while (v20);
      v16 = vaddvq_s64(vaddq_s64(v24, v22));
    }
    else
    {
      v16 = 0;
      v17 = a1;
    }
    do
    {
      v35 = *(unsigned __int8 *)(v17 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v17 + 8);
      v16 += v35;
      v17 += 24;
    }
    while (v17 != a2);
  }
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a4, v16 + v14);
  if (v15 >= 1)
  {
    v36 = *(char *)(a1 + 23);
    v37 = v36 >= 0 ? (const std::string::value_type *)a1 : *(const std::string::value_type **)a1;
    v38 = v36 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
    std::string::append(a4, v37, v38);
    if ((unint64_t)v10 >= 2)
    {
      for (i = a1 + 24; i != a2; i += 24)
      {
        v40 = *(char *)(a3 + 23);
        if (v40 >= 0)
          v41 = (const std::string::value_type *)a3;
        else
          v41 = *(const std::string::value_type **)a3;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(a3 + 23);
        else
          v42 = *(_QWORD *)(a3 + 8);
        std::string::append(a4, v41, v42);
        v43 = *(char *)(i + 23);
        if (v43 >= 0)
          v44 = (const std::string::value_type *)i;
        else
          v44 = *(const std::string::value_type **)i;
        if (v43 >= 0)
          v45 = *(unsigned __int8 *)(i + 23);
        else
          v45 = *(_QWORD *)(i + 8);
        std::string::append(a4, v44, v45);
      }
    }
  }
}

void sub_239583C44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_239583C68(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_239583E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_239583E94(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2395840AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395840C0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  int v4;

  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 128);
  v2 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 136) = v2;
  *(_DWORD *)(a2 + 152) = *(_DWORD *)(a1 + 176);
  *(_DWORD *)(a2 + 156) = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a1 + 196);
  *(_DWORD *)(a2 + 164) = *(_DWORD *)(a1 + 200);
  *(_DWORD *)(a2 + 168) = *(_DWORD *)(a1 + 208);
  *(_DWORD *)(a2 + 172) = *(_DWORD *)(a1 + 212);
  *(_DWORD *)(a2 + 176) = *(_DWORD *)(a1 + 216);
  *(_QWORD *)(a2 + 232) = *(_QWORD *)(a1 + 272);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 280);
  v3 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a2 + 256) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a2 + 272) = v3;
  *(_DWORD *)(a2 + 288) = *(_DWORD *)(a1 + 328);
  *(_OWORD *)(a2 + 296) = *(_OWORD *)(a1 + 336);
  *(_OWORD *)(a2 + 312) = *(_OWORD *)(a1 + 352);
  *(_QWORD *)(a2 + 328) = *(_QWORD *)(a1 + 368);
  v4 = *(_DWORD *)(a1 + 384) - 1;
  if (v4 <= 0x15)
    sub_2394202DC((_QWORD *)(a2 + 344), dword_239EC7380[v4]);
}

_QWORD *sub_2395841C8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[3];
  v9 = a2[4];
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a2[5];
  v13 = a2[6];
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = operator new(0x40uLL);
  *v16 = &off_250ADB9D8;
  v16[1] = v3;
  v16[2] = v4;
  v16[3] = v5;
  v16[4] = v8;
  v16[5] = v9;
  v16[6] = v12;
  v16[7] = v13;
  v27 = v16;
  sub_239587C2C(v26, a1);
  v23 = v27;
  if (v27 == v26)
  {
    v24 = 4;
    v23 = v26;
    goto LABEL_14;
  }
  if (v27)
  {
    v24 = 5;
LABEL_14:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v23 + 8 * v24))(v23, v17, v18, v19, v20, v21, v22);
  }
  return a1;
}

void sub_2395842FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23942FEFC(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_239584310(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = a1 + 16;
  v3 = (_QWORD *)a1[19];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[15];
  if (v5 == a1 + 12)
  {
    v6 = 4;
    v5 = a1 + 12;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[11];
  if (v7 == a1 + 8)
  {
    v8 = 4;
    v7 = a1 + 8;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[7];
  if (v9 == a1 + 4)
  {
    v10 = 4;
    v9 = a1 + 4;
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = (_QWORD *)a1[3];
  if (v11 == a1)
  {
    v12 = 4;
    v11 = a1;
    goto LABEL_25;
  }
  if (v11)
  {
    v12 = 5;
LABEL_25:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return a1;
}

uint64_t sub_23958441C(uint64_t a1)
{
  void *v2;

  if ((*(char *)(a1 + 535) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 503) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    operator delete(*(void **)(a1 + 480));
    v2 = *(void **)(a1 + 456);
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 512));
  if (*(char *)(a1 + 503) < 0)
    goto LABEL_7;
LABEL_3:
  v2 = *(void **)(a1 + 456);
  if (v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 464) = v2;
    operator delete(v2);
  }
LABEL_5:
  sub_239586EB4(a1 + 56);
  return a1;
}

uint64_t sub_239584488(uint64_t a1, uint64_t a2, const std::string *a3, char a4, __int128 *a5, uint64_t *a6, uint64_t a7, unsigned __int8 a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t (***v27)();
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  uint64_t v64[2];
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  _OWORD v68[3];
  char v69;
  _BYTE v70[400];
  void *__p[3];
  std::string v72;
  char v73;
  std::string v74;
  uint64_t v75;
  int v76;
  std::string v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  _QWORD *v81;
  _BYTE v82[24];
  _BYTE *v83;
  _BYTE v84[24];
  _BYTE *v85;
  _BYTE v86[24];
  _BYTE *v87;
  _BYTE v88[24];
  _BYTE *v89;
  _BYTE v90[8];
  _QWORD *v91;
  char v92;
  int v93;
  _QWORD v94[3];
  _QWORD *v95;
  _QWORD v96[3];
  _QWORD *v97;
  _BYTE v98[24];
  _BYTE *v99;
  _BYTE v100[24];
  _BYTE *v101;
  _QWORD v102[3];
  _QWORD *v103;
  _QWORD v104[8];
  int v105;
  int32x4_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  int v112;
  int32x4_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _BYTE v122[28];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  int v126;
  _BYTE v127[24];
  _BYTE *v128;
  _BYTE v129[568];
  uint64_t (**v130)();
  uint64_t *v131;
  uint64_t (***v132)();
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  v78 = a9;
  v79 = a10;
  v17 = a8;
  if (a8)
  {
    v18 = a7 + 416;
    v19 = *a5;
    v20 = a5[1];
    v21 = a5[2];
    *(_BYTE *)(a7 + 464) = *((_BYTE *)a5 + 48);
    *(_OWORD *)(a7 + 432) = v20;
    *(_OWORD *)(a7 + 448) = v21;
    *(_OWORD *)(a7 + 416) = v19;
    sub_239586B60(a7 + 472, (uint64_t)a5 + 56);
    if ((__int128 *)v18 != a5)
      sub_23945D3D0((_QWORD *)(a7 + 872), *((char **)a5 + 57), *((char **)a5 + 58), (uint64_t)(*((_QWORD *)a5 + 58) - *((_QWORD *)a5 + 57)) >> 3);
    std::string::operator=((std::string *)(a7 + 896), (const std::string *)a5 + 20);
    *(_BYTE *)(a7 + 920) = *((_BYTE *)a5 + 504);
    std::string::operator=((std::string *)(a7 + 928), (const std::string *)(a5 + 32));
    v22 = *((_QWORD *)a5 + 67);
    *(_DWORD *)(a7 + 960) = *((_DWORD *)a5 + 136);
    *(_QWORD *)(a7 + 952) = v22;
    *(_BYTE *)(a7 + 968) = *((_BYTE *)a5 + 552);
  }
  memset(&v77, 0, sizeof(v77));
  sub_23948900C(&v77, (std::string *)"", (std::string *)"");
  if (a4)
    std::string::operator=(&v77, a3);
  sub_239586CA4((uint64_t)v68);
  v23 = a5[1];
  v68[0] = *a5;
  v68[1] = v23;
  v68[2] = a5[2];
  v69 = *((_BYTE *)a5 + 48);
  sub_239586B60((uint64_t)v70, (uint64_t)a5 + 56);
  if (v68 != a5)
    sub_23945D3D0(__p, *((char **)a5 + 57), *((char **)a5 + 58), (uint64_t)(*((_QWORD *)a5 + 58) - *((_QWORD *)a5 + 57)) >> 3);
  std::string::operator=(&v72, (const std::string *)a5 + 20);
  v73 = *((_BYTE *)a5 + 504);
  std::string::operator=(&v74, (const std::string *)(a5 + 32));
  v75 = *((_QWORD *)a5 + 67);
  v76 = *((_DWORD *)a5 + 136);
  sub_2396FD800(a6, (uint64_t)v127);
  v104[0] = 0x42C8000000000000;
  sub_2396FCC68(v129, 100, v127, v104, 1.0);
  v24 = v128;
  if (v128 == v127)
  {
    v25 = 4;
    v24 = v127;
  }
  else
  {
    if (!v128)
      goto LABEL_14;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_14:
  sub_2396FD534(v64, v129, 100);
  v104[7] = 0;
  memset(v104, 0, 40);
  v104[6] = 0;
  *(_QWORD *)&v26 = 0x80000000800000;
  *((_QWORD *)&v26 + 1) = 0x80000000800000;
  v106 = vdupq_n_s32(0x7F7FFFFFu);
  v107 = v26;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v105 = 0;
  v112 = 0;
  v113 = v106;
  v114 = v26;
  v117 = 0;
  v115 = 0;
  v116 = 0;
  v121 = 0u;
  memset(v122, 0, sizeof(v122));
  v119 = 0u;
  v120 = 0u;
  v118 = 0;
  v126 = 0;
  v124 = 0u;
  v125 = 0u;
  v123 = xmmword_239EC7340;
  v95 = 0;
  v97 = 0;
  v99 = 0;
  v101 = 0;
  v103 = 0;
  sub_2395841C8(v94, v64);
  v130 = &off_250ADEE00;
  v131 = a6;
  v132 = &v130;
  sub_2394D9710(&v130, v96);
  v27 = v132;
  if (v132 == &v130)
  {
    v28 = 4;
    v27 = &v130;
  }
  else
  {
    if (!v132)
      goto LABEL_19;
    v28 = 5;
  }
  (*v27)[v28]();
LABEL_19:
  if (!(_BYTE)v79)
    goto LABEL_25;
  v130 = &off_250ADEE48;
  v131 = &v78;
  v132 = &v130;
  sub_2395881DC(&v130, v102);
  v29 = v132;
  if (v132 == &v130)
  {
    v30 = 4;
    v29 = &v130;
  }
  else
  {
    if (!v132)
      goto LABEL_25;
    v30 = 5;
  }
  (*v29)[v30]();
LABEL_25:
  v91 = v104;
  v92 = 1;
  v93 = 0;
  sub_239586FCC(v80, v94);
  v31 = sub_2399169B8(a1, (uint64_t)&v77, a2, (uint64_t)v68, (uint64_t)v90, v80);
  v32 = v89;
  if (v89 == v88)
  {
    v33 = 4;
    v32 = v88;
  }
  else
  {
    if (!v89)
      goto LABEL_30;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_30:
  v34 = v87;
  if (v87 == v86)
  {
    v35 = 4;
    v34 = v86;
  }
  else
  {
    if (!v87)
      goto LABEL_35;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_35:
  v36 = v85;
  if (v85 == v84)
  {
    v37 = 4;
    v36 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_40;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_40:
  v38 = v83;
  if (v83 == v82)
  {
    v39 = 4;
    v38 = v82;
  }
  else
  {
    if (!v83)
      goto LABEL_45;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_45:
  v40 = v81;
  if (v81 == v80)
  {
    v41 = 4;
    v40 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_50;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_50:
  if (v17)
  {
    sub_2395840C0((uint64_t)v104, a7);
    *(_QWORD *)a7 = v104[0];
    *(_OWORD *)(a7 + 88) = v108;
    v42 = v115;
    *(_QWORD *)(a7 + 336) = *((_QWORD *)&v125 + 1);
    *(_QWORD *)(a7 + 184) = v42;
    *(_QWORD *)(a7 + 192) = v116;
    *(_OWORD *)(a7 + 216) = v119;
    *(_QWORD *)(a7 + 200) = v117;
    *(_DWORD *)(a7 + 208) = v118;
  }
  v43 = v103;
  if (v103 == v102)
  {
    v44 = 4;
    v43 = v102;
  }
  else
  {
    if (!v103)
      goto LABEL_57;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_57:
  v45 = v101;
  if (v101 == v100)
  {
    v46 = 4;
    v45 = v100;
  }
  else
  {
    if (!v101)
      goto LABEL_62;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_62:
  v47 = v99;
  if (v99 == v98)
  {
    v48 = 4;
    v47 = v98;
  }
  else
  {
    if (!v99)
      goto LABEL_67;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_67:
  v49 = v97;
  if (v97 == v96)
  {
    v50 = 4;
    v49 = v96;
  }
  else
  {
    if (!v97)
      goto LABEL_72;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_72:
  v51 = v95;
  if (v95 == v94)
  {
    v52 = 4;
    v51 = v94;
    goto LABEL_76;
  }
  if (v95)
  {
    v52 = 5;
LABEL_76:
    (*(void (**)(void))(*v51 + 8 * v52))();
  }
  v53 = v67;
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v66;
  if (!v66)
    goto LABEL_86;
  v57 = (unint64_t *)&v66->__shared_owners_;
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
    v59 = v65;
    if (!v65)
      goto LABEL_90;
  }
  else
  {
LABEL_86:
    v59 = v65;
    if (!v65)
      goto LABEL_90;
  }
  v60 = (unint64_t *)&v59->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (v61)
  {
LABEL_90:
    sub_2396FCD14((uint64_t)v129);
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_100;
  }
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v59);
  sub_2396FCD14((uint64_t)v129);
  if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_91:
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_92;
    goto LABEL_101;
  }
LABEL_100:
  operator delete(v74.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_92:
    v62 = __p[0];
    if (!__p[0])
      goto LABEL_94;
    goto LABEL_93;
  }
LABEL_101:
  operator delete(v72.__r_.__value_.__l.__data_);
  v62 = __p[0];
  if (__p[0])
  {
LABEL_93:
    __p[1] = v62;
    operator delete(v62);
  }
LABEL_94:
  sub_239586EB4((uint64_t)v70);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  return v31;
}

void sub_239584BC8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x27F]) < 0)
    operator delete((void *)STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t sub_239584C6C(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, char a8)
{
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  std::chrono::system_clock::time_point v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  char *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::chrono::system_clock::time_point v38;
  std::chrono::system_clock::time_point v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t *v48;
  int v49;
  _DWORD *v50;
  uint64_t *v51;
  std::__fs::filesystem::path *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t **v55;
  uint64_t **v56;
  int v57;
  _DWORD *v58;
  uint64_t *v59;
  std::__fs::filesystem::path *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t **v63;
  uint64_t **v64;
  int v65;
  _DWORD *v66;
  uint64_t *v67;
  std::__fs::filesystem::path *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t **v71;
  uint64_t **v72;
  int v73;
  _DWORD *v74;
  uint64_t *v75;
  std::__fs::filesystem::path *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t **v79;
  uint64_t **v80;
  int v81;
  _DWORD *v82;
  uint64_t *v83;
  std::__fs::filesystem::path *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t **v87;
  int v88;
  _DWORD *v89;
  uint64_t *v90;
  std::__fs::filesystem::path *v91;
  uint64_t v92;
  uint64_t **v93;
  uint64_t *v94;
  uint64_t **v95;
  uint64_t **v96;
  int v97;
  char *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t **v101;
  uint64_t **v102;
  int v103;
  char *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t **v107;
  uint64_t **v108;
  int v109;
  char *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t **v113;
  uint64_t **v114;
  int v115;
  char *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t **v119;
  uint64_t **v120;
  int v121;
  char *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t **v125;
  int v126;
  char *v127;
  uint64_t *v128;
  unint64_t v129;
  __int128 v130;
  char *v131;
  std::__fs::filesystem::path *v132;
  unint64_t v133;
  __int128 v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  __int128 v139;
  int v140;
  char v141;
  char v142;
  void **v143;
  void **v144;
  void *v145;
  std::chrono::system_clock::time_point v146;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  uint64_t v150;
  std::__fs::filesystem::path v151;
  std::__fs::filesystem::path __replacement;
  std::string v153;
  __int16 v154;
  std::string v155;
  std::string v156;
  __int16 v157;
  std::string v158;
  std::string v159;
  __int16 v160;
  std::string v161;
  std::string v162;
  __int16 v163;
  std::string v164;
  std::string v165;
  __int16 v166;
  std::string v167;
  std::string __str;
  __int16 v169;
  std::string v170;
  void *v171;
  void **v172;
  uint64_t v173;
  void *__p[2];
  _QWORD *v175;
  uint64_t *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t *v179;
  uint64_t v180;
  _QWORD v181[4];
  uint64_t *v182;
  std::__shared_weak_count *v183;
  _QWORD *v184;
  std::__shared_weak_count *v185;
  std::__fs::filesystem::path __dst;
  std::__fs::filesystem::path *p_dst;
  uint64_t v188;
  _QWORD *v189;
  std::string v190;
  uint64_t v191;
  int v192;
  void *v193;
  char v194;
  _BYTE v195[24];
  _BYTE *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  _QWORD v203[73];

  v203[71] = *MEMORY[0x24BDAC8D0];
  v150 = a6;
  if (a6)
  {
    v13 = (__int128 *)(a5 + 416);
    v14 = *a3;
    v15 = a3[1];
    v16 = a3[2];
    *(_BYTE *)(a5 + 464) = *((_BYTE *)a3 + 48);
    *(_OWORD *)(a5 + 432) = v15;
    *(_OWORD *)(a5 + 448) = v16;
    *(_OWORD *)(a5 + 416) = v14;
    sub_239586B60(a5 + 472, (uint64_t)a3 + 56);
    if (v13 != a3)
      sub_23945D3D0((_QWORD *)(a5 + 872), *((char **)a3 + 57), *((char **)a3 + 58), (uint64_t)(*((_QWORD *)a3 + 58) - *((_QWORD *)a3 + 57)) >> 3);
    std::string::operator=((std::string *)(a5 + 896), (const std::string *)a3 + 20);
    *(_BYTE *)(a5 + 920) = *((_BYTE *)a3 + 504);
    std::string::operator=((std::string *)(a5 + 928), (const std::string *)(a3 + 32));
    v17 = *((_QWORD *)a3 + 67);
    *(_DWORD *)(a5 + 960) = *((_DWORD *)a3 + 136);
    *(_QWORD *)(a5 + 952) = v17;
    *(_BYTE *)(a5 + 968) = *((_BYTE *)a3 + 552);
  }
  v18.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  kdebug_trace();
  sub_2399FCB68();
  sub_2399FCBCC(v203);
  sub_2399FCAE8((int8x16_t *)&__dst);
  sub_2396FD800(a4, (uint64_t)v201);
  __dst.__pn_.__r_.__value_.__r.__words[0] = 0x40E0000000000000;
  sub_2396FCC68(v203, 1, v201, &__dst, 1.0);
  v19 = v202;
  if (v202 == v201)
  {
    v20 = 4;
    v19 = v201;
  }
  else
  {
    if (!v202)
      goto LABEL_10;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_10:
  HIBYTE(v175) = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FD394(&__dst, (uint64_t)v203, (__int128 *)__p);
  if (SHIBYTE(v175) < 0)
    operator delete(__p[0]);
  sub_2396FD3E8((uint64_t)&__dst);
  sub_2396FCD14((uint64_t)v203);
  kdebug_trace();
  kdebug_trace();
  v21 = (std::__shared_weak_count *)operator new(0xD0uLL);
  v21->__shared_owners_ = 0;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADED90;
  v22 = &v21[1].__vftable;
  sub_23996301C((uint64_t)&v21[1]);
  v184 = &v21[1].__vftable;
  v185 = v21;
  v23 = (char *)operator new(0x60uLL);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = &off_250ADEDC8;
  *(_OWORD *)(v23 + 24) = 0u;
  v24 = (uint64_t *)(v23 + 24);
  *(_OWORD *)(v23 + 72) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *((_QWORD *)v23 + 11) = 0;
  *((_QWORD *)v23 + 9) = v23 + 80;
  v182 = (uint64_t *)(v23 + 24);
  v183 = (std::__shared_weak_count *)v23;
  sub_2396FD800(a4, (uint64_t)v199);
  __dst.__pn_.__r_.__value_.__r.__words[0] = 0x4120000040E00000;
  sub_2396FCC68(v203, 1, v199, &__dst, 1.0);
  v25 = v200;
  if (v200 == v199)
  {
    v26 = 4;
    v25 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_17;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_17:
  HIBYTE(v175) = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FD394(&__dst, (uint64_t)v203, (__int128 *)__p);
  if (SHIBYTE(v175) < 0)
  {
    operator delete(__p[0]);
    LOWORD(__str.__r_.__value_.__l.__data_) = 1;
    __str.__r_.__value_.__s.__data_[2] = 1;
    HIDWORD(__str.__r_.__value_.__r.__words[0]) = 1;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else
  {
    LOWORD(__str.__r_.__value_.__l.__data_) = 1;
    __str.__r_.__value_.__s.__data_[2] = 1;
    HIDWORD(__str.__r_.__value_.__r.__words[0]) = 1;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
LABEL_19:
      *(_OWORD *)__p = *(_OWORD *)a1;
      v175 = *(_QWORD **)(a1 + 16);
      goto LABEL_22;
    }
  }
  sub_23941A7F8(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
LABEL_22:
  v27 = v150;
  v28 = sub_23994C314((uint64_t)__p, (uint64_t)v22, v24, (uint64_t)&__str);
  v29 = v28;
  if (SHIBYTE(v175) < 0)
  {
    operator delete(__p[0]);
    if ((v29 & 1) != 0)
      goto LABEL_24;
LABEL_28:
    if (v150)
      sub_2394202DC((_QWORD *)(a5 + 344), 8007);
    goto LABEL_30;
  }
  if ((v28 & 1) == 0)
    goto LABEL_28;
LABEL_24:
  sub_2399407A8(v22);
  v30 = v21[7].__shared_weak_owners_ - v21[7].__shared_owners_;
  if (v150 && v30 <= 7)
  {
    sub_2394202DC((_QWORD *)(a5 + 344), 8001);
LABEL_30:
    sub_2396FD3E8((uint64_t)&__dst);
    sub_2396FCD14((uint64_t)v203);
LABEL_31:
    v27 = 0;
    goto LABEL_32;
  }
  sub_2396FD3E8((uint64_t)&__dst);
  sub_2396FCD14((uint64_t)v203);
  if (v30 <= 7)
    goto LABEL_31;
  v38.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v150)
    *(double *)a5 = (double)(v38.__d_.__rep_ - v18.__d_.__rep_) / 1000000.0;
  v39.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  kdebug_trace();
  if (sub_2396FD7B0((uint64_t)a4))
  {
LABEL_55:
    if (!v150)
      goto LABEL_32;
    sub_2394202DC((_QWORD *)(a5 + 344), 2);
    goto LABEL_31;
  }
  kdebug_trace();
  sub_2396FD800(a4, (uint64_t)v197);
  __dst.__pn_.__r_.__value_.__r.__words[0] = 0x4170000041200000;
  sub_2396FCC68(v203, 1, v197, &__dst, 1.0);
  v40 = v198;
  if (v198 == v197)
  {
    v41 = 4;
    v40 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_52;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_52:
  HIBYTE(v175) = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FD394(&__dst, (uint64_t)v203, (__int128 *)__p);
  if (SHIBYTE(v175) < 0)
    operator delete(__p[0]);
  v42 = sub_23996008C((uint64_t)v22);
  sub_2396FD3E8((uint64_t)&__dst);
  sub_2396FCD14((uint64_t)v203);
  kdebug_trace();
  if (sub_2396FD7B0((uint64_t)a4))
    goto LABEL_55;
  kdebug_trace();
  sub_2396FD800(a4, (uint64_t)v195);
  __dst.__pn_.__r_.__value_.__r.__words[0] = 0x42C8000041700000;
  sub_2396FCC68(v203, 1, v195, &__dst, 1.0);
  v43 = v196;
  if (v196 == v195)
  {
    v44 = 4;
    v43 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_62;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_62:
  *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = 0;
  __dst.__pn_.__r_.__value_.__s.__data_[0] = 0;
  sub_2396FD394(v181, (uint64_t)v203, (__int128 *)&__dst);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  rep = v39.__d_.__rep_;
  LOBYTE(__p[0]) = 0;
  HIDWORD(__p[0]) = 1;
  LOWORD(__p[1]) = 0;
  sub_239953B78(&v175);
  LOBYTE(__p[0]) = 1;
  BYTE1(__p[1]) = 1;
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v45 = &v179;
  v46 = &v179;
  v47 = &v179;
  v48 = v179;
  if (v179)
  {
    while (1)
    {
      while (1)
      {
        v47 = (uint64_t **)v48;
        v49 = *((_DWORD *)v48 + 8);
        if (v49 < 2)
          break;
        v48 = *v47;
        v46 = v47;
        if (!*v47)
          goto LABEL_71;
      }
      if (v49 == 1)
        break;
      v48 = v47[1];
      if (!v48)
      {
        v46 = v47 + 1;
        goto LABEL_71;
      }
    }
    v50 = v47;
  }
  else
  {
LABEL_71:
    v50 = operator new(0x48uLL);
    v50[8] = 1;
    *((_QWORD *)v50 + 8) = 0;
    *(_QWORD *)v50 = 0;
    *((_QWORD *)v50 + 1) = 0;
    *((_QWORD *)v50 + 2) = v47;
    *v46 = (uint64_t *)v50;
    v51 = (uint64_t *)v50;
    if (*v178)
    {
      v178 = (_QWORD *)*v178;
      v51 = *v46;
    }
    sub_2394213B8(v179, v51);
    ++v180;
  }
  __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADEE90;
  __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)&v171;
  p_dst = &__dst;
  sub_23958886C(&__dst, (_QWORD *)v50 + 5);
  v52 = p_dst;
  if (p_dst == &__dst)
  {
    v53 = 4;
    v52 = &__dst;
  }
  else
  {
    if (!p_dst)
      goto LABEL_80;
    v53 = 5;
  }
  (*(void (**)(void))(v52->__pn_.__r_.__value_.__r.__words[0] + 8 * v53))();
LABEL_80:
  v54 = v179;
  v55 = &v179;
  v56 = &v179;
  if (v179)
  {
    while (1)
    {
      while (1)
      {
        v56 = (uint64_t **)v54;
        v57 = *((_DWORD *)v54 + 8);
        if (v57 < 3)
          break;
        v54 = *v56;
        v55 = v56;
        if (!*v56)
          goto LABEL_87;
      }
      if (v57 == 2)
        break;
      v54 = v56[1];
      if (!v54)
      {
        v55 = v56 + 1;
        goto LABEL_87;
      }
    }
    v58 = v56;
  }
  else
  {
LABEL_87:
    v58 = operator new(0x48uLL);
    v58[8] = 2;
    *((_QWORD *)v58 + 8) = 0;
    *(_QWORD *)v58 = 0;
    *((_QWORD *)v58 + 1) = 0;
    *((_QWORD *)v58 + 2) = v56;
    *v55 = (uint64_t *)v58;
    v59 = (uint64_t *)v58;
    if (*v178)
    {
      v178 = (_QWORD *)*v178;
      v59 = *v55;
    }
    sub_2394213B8(v179, v59);
    ++v180;
  }
  __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADEE90;
  __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)&v171;
  p_dst = &__dst;
  sub_23958886C(&__dst, (_QWORD *)v58 + 5);
  v60 = p_dst;
  if (p_dst == &__dst)
  {
    v61 = 4;
    v60 = &__dst;
  }
  else
  {
    if (!p_dst)
      goto LABEL_96;
    v61 = 5;
  }
  (*(void (**)(void))(v60->__pn_.__r_.__value_.__r.__words[0] + 8 * v61))();
LABEL_96:
  v62 = v179;
  v63 = &v179;
  v64 = &v179;
  if (v179)
  {
    while (1)
    {
      while (1)
      {
        v64 = (uint64_t **)v62;
        v65 = *((_DWORD *)v62 + 8);
        if (v65 < 4)
          break;
        v62 = *v64;
        v63 = v64;
        if (!*v64)
          goto LABEL_103;
      }
      if (v65 == 3)
        break;
      v62 = v64[1];
      if (!v62)
      {
        v63 = v64 + 1;
        goto LABEL_103;
      }
    }
    v66 = v64;
  }
  else
  {
LABEL_103:
    v66 = operator new(0x48uLL);
    v66[8] = 3;
    *((_QWORD *)v66 + 8) = 0;
    *(_QWORD *)v66 = 0;
    *((_QWORD *)v66 + 1) = 0;
    *((_QWORD *)v66 + 2) = v64;
    *v63 = (uint64_t *)v66;
    v67 = (uint64_t *)v66;
    if (*v178)
    {
      v178 = (_QWORD *)*v178;
      v67 = *v63;
    }
    sub_2394213B8(v179, v67);
    ++v180;
  }
  __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADEE90;
  __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)&v171;
  p_dst = &__dst;
  sub_23958886C(&__dst, (_QWORD *)v66 + 5);
  v68 = p_dst;
  if (p_dst == &__dst)
  {
    v69 = 4;
    v68 = &__dst;
  }
  else
  {
    if (!p_dst)
      goto LABEL_112;
    v69 = 5;
  }
  (*(void (**)(void))(v68->__pn_.__r_.__value_.__r.__words[0] + 8 * v69))();
LABEL_112:
  v70 = v179;
  v71 = &v179;
  v72 = &v179;
  if (v179)
  {
    while (1)
    {
      while (1)
      {
        v72 = (uint64_t **)v70;
        v73 = *((_DWORD *)v70 + 8);
        if (v73 < 5)
          break;
        v70 = *v72;
        v71 = v72;
        if (!*v72)
          goto LABEL_119;
      }
      if (v73 == 4)
        break;
      v70 = v72[1];
      if (!v70)
      {
        v71 = v72 + 1;
        goto LABEL_119;
      }
    }
    v74 = v72;
  }
  else
  {
LABEL_119:
    v74 = operator new(0x48uLL);
    v74[8] = 4;
    *((_QWORD *)v74 + 8) = 0;
    *(_QWORD *)v74 = 0;
    *((_QWORD *)v74 + 1) = 0;
    *((_QWORD *)v74 + 2) = v72;
    *v71 = (uint64_t *)v74;
    v75 = (uint64_t *)v74;
    if (*v178)
    {
      v178 = (_QWORD *)*v178;
      v75 = *v71;
    }
    sub_2394213B8(v179, v75);
    ++v180;
  }
  __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADEE90;
  __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)&v171;
  p_dst = &__dst;
  sub_23958886C(&__dst, (_QWORD *)v74 + 5);
  v76 = p_dst;
  if (p_dst == &__dst)
  {
    v77 = 4;
    v76 = &__dst;
  }
  else
  {
    if (!p_dst)
      goto LABEL_128;
    v77 = 5;
  }
  (*(void (**)(void))(v76->__pn_.__r_.__value_.__r.__words[0] + 8 * v77))();
LABEL_128:
  v78 = v179;
  v79 = &v179;
  v80 = &v179;
  if (v179)
  {
    while (1)
    {
      while (1)
      {
        v80 = (uint64_t **)v78;
        v81 = *((_DWORD *)v78 + 8);
        if (v81 < 6)
          break;
        v78 = *v80;
        v79 = v80;
        if (!*v80)
          goto LABEL_135;
      }
      if (v81 == 5)
        break;
      v78 = v80[1];
      if (!v78)
      {
        v79 = v80 + 1;
        goto LABEL_135;
      }
    }
    v82 = v80;
  }
  else
  {
LABEL_135:
    v82 = operator new(0x48uLL);
    v82[8] = 5;
    *((_QWORD *)v82 + 8) = 0;
    *(_QWORD *)v82 = 0;
    *((_QWORD *)v82 + 1) = 0;
    *((_QWORD *)v82 + 2) = v80;
    *v79 = (uint64_t *)v82;
    v83 = (uint64_t *)v82;
    if (*v178)
    {
      v178 = (_QWORD *)*v178;
      v83 = *v79;
    }
    sub_2394213B8(v179, v83);
    ++v180;
  }
  __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADEE90;
  __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)&v171;
  p_dst = &__dst;
  sub_23958886C(&__dst, (_QWORD *)v82 + 5);
  v84 = p_dst;
  if (p_dst == &__dst)
  {
    v85 = 4;
    v84 = &__dst;
  }
  else
  {
    if (!p_dst)
      goto LABEL_144;
    v85 = 5;
  }
  (*(void (**)(void))(v84->__pn_.__r_.__value_.__r.__words[0] + 8 * v85))();
LABEL_144:
  v86 = v179;
  v87 = &v179;
  if (v179)
  {
    while (1)
    {
      while (1)
      {
        v87 = (uint64_t **)v86;
        v88 = *((_DWORD *)v86 + 8);
        if (v88 < 8)
          break;
        v86 = *v87;
        v45 = v87;
        if (!*v87)
          goto LABEL_151;
      }
      if (v88 == 7)
        break;
      v86 = v87[1];
      if (!v86)
      {
        v45 = v87 + 1;
        goto LABEL_151;
      }
    }
    v89 = v87;
  }
  else
  {
LABEL_151:
    v89 = operator new(0x48uLL);
    v89[8] = 7;
    *((_QWORD *)v89 + 8) = 0;
    *(_QWORD *)v89 = 0;
    *((_QWORD *)v89 + 1) = 0;
    *((_QWORD *)v89 + 2) = v87;
    *v45 = (uint64_t *)v89;
    v90 = (uint64_t *)v89;
    if (*v178)
    {
      v178 = (_QWORD *)*v178;
      v90 = *v45;
    }
    sub_2394213B8(v179, v90);
    ++v180;
  }
  __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADEE90;
  __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)&v171;
  p_dst = &__dst;
  sub_23958886C(&__dst, (_QWORD *)v89 + 5);
  v91 = p_dst;
  if (p_dst == &__dst)
  {
    v92 = 4;
    v91 = &__dst;
  }
  else
  {
    if (!p_dst)
      goto LABEL_160;
    v92 = 5;
  }
  (*(void (**)(void))(v91->__pn_.__r_.__value_.__r.__words[0] + 8 * v92))();
LABEL_160:
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__str, "uchar");
  v169 = 100;
  *((_BYTE *)&v170.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v170, ".jpg");
  sub_2395895D4((uint64_t)(a3 + 4), (uint64_t)&__str);
  *((_BYTE *)&v165.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v165, "uchar");
  v166 = 100;
  *((_BYTE *)&v167.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v167, ".jpg");
  sub_2395895D4((uint64_t)a3 + 104, (uint64_t)&v165);
  *((_BYTE *)&v162.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v162, "uchar");
  v163 = 100;
  *((_BYTE *)&v164.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v164, ".jpg");
  sub_2395895D4((uint64_t)(a3 + 14), (uint64_t)&v162);
  *((_BYTE *)&v159.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v159, "uchar");
  v160 = 100;
  *((_BYTE *)&v161.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v161, ".jpg");
  sub_2395895D4((uint64_t)a3 + 184, (uint64_t)&v159);
  *((_BYTE *)&v156.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v156, "uchar");
  v157 = 100;
  *((_BYTE *)&v158.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v158, ".jpg");
  sub_2395895D4((uint64_t)a3 + 264, (uint64_t)&v156);
  *((_BYTE *)&v153.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v153, "uchar");
  v154 = 100;
  *((_BYTE *)&v155.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v155, ".jpg");
  sub_2395895D4((uint64_t)(a3 + 9), (uint64_t)&v153);
  v93 = &v176;
  v94 = v176;
  v95 = &v176;
  v96 = &v176;
  if (v176)
  {
    while (1)
    {
      while (1)
      {
        v96 = (uint64_t **)v94;
        v97 = *((_DWORD *)v94 + 8);
        if (v97 < 2)
          break;
        v94 = *v96;
        v95 = v96;
        if (!*v96)
          goto LABEL_167;
      }
      if (v97 == 1)
        break;
      v94 = v96[1];
      if (!v94)
      {
        v95 = v96 + 1;
        goto LABEL_167;
      }
    }
    v98 = (char *)v96;
  }
  else
  {
LABEL_167:
    v98 = (char *)operator new(0x60uLL);
    *((_DWORD *)v98 + 8) = 1;
    *(_OWORD *)(v98 + 56) = 0u;
    *(_OWORD *)(v98 + 40) = 0u;
    *((_QWORD *)v98 + 11) = 0;
    *(_OWORD *)(v98 + 72) = 0u;
    v98[63] = 5;
    v98[44] = 114;
    *((_DWORD *)v98 + 10) = 1634231157;
    *((_WORD *)v98 + 32) = 100;
    v98[95] = 4;
    *((_DWORD *)v98 + 18) = 1735420462;
    *(_QWORD *)v98 = 0;
    *((_QWORD *)v98 + 1) = 0;
    *((_QWORD *)v98 + 2) = v96;
    *v95 = (uint64_t *)v98;
    v99 = (uint64_t *)v98;
    if (*v175)
    {
      v175 = (_QWORD *)*v175;
      v99 = *v95;
    }
    sub_2394213B8(v176, v99);
    ++v177;
  }
  std::string::operator=((std::string *)(v98 + 40), &__str);
  *((_WORD *)v98 + 32) = v169;
  std::string::operator=((std::string *)v98 + 3, &v170);
  v100 = v176;
  v101 = &v176;
  v102 = &v176;
  if (v176)
  {
    while (1)
    {
      while (1)
      {
        v102 = (uint64_t **)v100;
        v103 = *((_DWORD *)v100 + 8);
        if (v103 < 3)
          break;
        v100 = *v102;
        v101 = v102;
        if (!*v102)
          goto LABEL_178;
      }
      if (v103 == 2)
        break;
      v100 = v102[1];
      if (!v100)
      {
        v101 = v102 + 1;
        goto LABEL_178;
      }
    }
    v104 = (char *)v102;
  }
  else
  {
LABEL_178:
    v104 = (char *)operator new(0x60uLL);
    *((_DWORD *)v104 + 8) = 2;
    *(_OWORD *)(v104 + 56) = 0u;
    *(_OWORD *)(v104 + 40) = 0u;
    *((_QWORD *)v104 + 11) = 0;
    *(_OWORD *)(v104 + 72) = 0u;
    v104[63] = 5;
    v104[44] = 114;
    *((_DWORD *)v104 + 10) = 1634231157;
    *((_WORD *)v104 + 32) = 100;
    v104[95] = 4;
    *((_DWORD *)v104 + 18) = 1735420462;
    *(_QWORD *)v104 = 0;
    *((_QWORD *)v104 + 1) = 0;
    *((_QWORD *)v104 + 2) = v102;
    *v101 = (uint64_t *)v104;
    v105 = (uint64_t *)v104;
    if (*v175)
    {
      v175 = (_QWORD *)*v175;
      v105 = *v101;
    }
    sub_2394213B8(v176, v105);
    ++v177;
  }
  std::string::operator=((std::string *)(v104 + 40), &v165);
  *((_WORD *)v104 + 32) = v166;
  std::string::operator=((std::string *)v104 + 3, &v167);
  v106 = v176;
  v107 = &v176;
  v108 = &v176;
  if (v176)
  {
    while (1)
    {
      while (1)
      {
        v108 = (uint64_t **)v106;
        v109 = *((_DWORD *)v106 + 8);
        if (v109 < 4)
          break;
        v106 = *v108;
        v107 = v108;
        if (!*v108)
          goto LABEL_189;
      }
      if (v109 == 3)
        break;
      v106 = v108[1];
      if (!v106)
      {
        v107 = v108 + 1;
        goto LABEL_189;
      }
    }
    v110 = (char *)v108;
  }
  else
  {
LABEL_189:
    v110 = (char *)operator new(0x60uLL);
    *((_DWORD *)v110 + 8) = 3;
    *(_OWORD *)(v110 + 56) = 0u;
    *(_OWORD *)(v110 + 40) = 0u;
    *((_QWORD *)v110 + 11) = 0;
    *(_OWORD *)(v110 + 72) = 0u;
    v110[63] = 5;
    v110[44] = 114;
    *((_DWORD *)v110 + 10) = 1634231157;
    *((_WORD *)v110 + 32) = 100;
    v110[95] = 4;
    *((_DWORD *)v110 + 18) = 1735420462;
    *(_QWORD *)v110 = 0;
    *((_QWORD *)v110 + 1) = 0;
    *((_QWORD *)v110 + 2) = v108;
    *v107 = (uint64_t *)v110;
    v111 = (uint64_t *)v110;
    if (*v175)
    {
      v175 = (_QWORD *)*v175;
      v111 = *v107;
    }
    sub_2394213B8(v176, v111);
    ++v177;
  }
  std::string::operator=((std::string *)(v110 + 40), &v162);
  *((_WORD *)v110 + 32) = v163;
  std::string::operator=((std::string *)v110 + 3, &v164);
  v112 = v176;
  v113 = &v176;
  v114 = &v176;
  if (v176)
  {
    while (1)
    {
      while (1)
      {
        v114 = (uint64_t **)v112;
        v115 = *((_DWORD *)v112 + 8);
        if (v115 < 5)
          break;
        v112 = *v114;
        v113 = v114;
        if (!*v114)
          goto LABEL_200;
      }
      if (v115 == 4)
        break;
      v112 = v114[1];
      if (!v112)
      {
        v113 = v114 + 1;
        goto LABEL_200;
      }
    }
    v116 = (char *)v114;
  }
  else
  {
LABEL_200:
    v116 = (char *)operator new(0x60uLL);
    *((_DWORD *)v116 + 8) = 4;
    *(_OWORD *)(v116 + 56) = 0u;
    *(_OWORD *)(v116 + 40) = 0u;
    *((_QWORD *)v116 + 11) = 0;
    *(_OWORD *)(v116 + 72) = 0u;
    v116[63] = 5;
    v116[44] = 114;
    *((_DWORD *)v116 + 10) = 1634231157;
    *((_WORD *)v116 + 32) = 100;
    v116[95] = 4;
    *((_DWORD *)v116 + 18) = 1735420462;
    *(_QWORD *)v116 = 0;
    *((_QWORD *)v116 + 1) = 0;
    *((_QWORD *)v116 + 2) = v114;
    *v113 = (uint64_t *)v116;
    v117 = (uint64_t *)v116;
    if (*v175)
    {
      v175 = (_QWORD *)*v175;
      v117 = *v113;
    }
    sub_2394213B8(v176, v117);
    ++v177;
  }
  std::string::operator=((std::string *)(v116 + 40), &v159);
  *((_WORD *)v116 + 32) = v160;
  std::string::operator=((std::string *)v116 + 3, &v161);
  v118 = v176;
  v119 = &v176;
  v120 = &v176;
  if (v176)
  {
    while (1)
    {
      while (1)
      {
        v120 = (uint64_t **)v118;
        v121 = *((_DWORD *)v118 + 8);
        if (v121 < 6)
          break;
        v118 = *v120;
        v119 = v120;
        if (!*v120)
          goto LABEL_211;
      }
      if (v121 == 5)
        break;
      v118 = v120[1];
      if (!v118)
      {
        v119 = v120 + 1;
        goto LABEL_211;
      }
    }
    v122 = (char *)v120;
  }
  else
  {
LABEL_211:
    v122 = (char *)operator new(0x60uLL);
    *((_DWORD *)v122 + 8) = 5;
    *(_OWORD *)(v122 + 56) = 0u;
    *(_OWORD *)(v122 + 40) = 0u;
    *((_QWORD *)v122 + 11) = 0;
    *(_OWORD *)(v122 + 72) = 0u;
    v122[63] = 5;
    v122[44] = 114;
    *((_DWORD *)v122 + 10) = 1634231157;
    *((_WORD *)v122 + 32) = 100;
    v122[95] = 4;
    *((_DWORD *)v122 + 18) = 1735420462;
    *(_QWORD *)v122 = 0;
    *((_QWORD *)v122 + 1) = 0;
    *((_QWORD *)v122 + 2) = v120;
    *v119 = (uint64_t *)v122;
    v123 = (uint64_t *)v122;
    if (*v175)
    {
      v175 = (_QWORD *)*v175;
      v123 = *v119;
    }
    sub_2394213B8(v176, v123);
    ++v177;
  }
  std::string::operator=((std::string *)(v122 + 40), &v156);
  *((_WORD *)v122 + 32) = v157;
  std::string::operator=((std::string *)v122 + 3, &v158);
  v124 = v176;
  v125 = &v176;
  if (v176)
  {
    while (1)
    {
      while (1)
      {
        v125 = (uint64_t **)v124;
        v126 = *((_DWORD *)v124 + 8);
        if (v126 < 8)
          break;
        v124 = *v125;
        v93 = v125;
        if (!*v125)
          goto LABEL_222;
      }
      if (v126 == 7)
        break;
      v124 = v125[1];
      if (!v124)
      {
        v93 = v125 + 1;
        goto LABEL_222;
      }
    }
    v127 = (char *)v125;
  }
  else
  {
LABEL_222:
    v127 = (char *)operator new(0x60uLL);
    *((_DWORD *)v127 + 8) = 7;
    *(_OWORD *)(v127 + 56) = 0u;
    *(_OWORD *)(v127 + 40) = 0u;
    *((_QWORD *)v127 + 11) = 0;
    *(_OWORD *)(v127 + 72) = 0u;
    v127[63] = 5;
    v127[44] = 114;
    *((_DWORD *)v127 + 10) = 1634231157;
    *((_WORD *)v127 + 32) = 100;
    v127[95] = 4;
    *((_DWORD *)v127 + 18) = 1735420462;
    *(_QWORD *)v127 = 0;
    *((_QWORD *)v127 + 1) = 0;
    *((_QWORD *)v127 + 2) = v125;
    *v93 = (uint64_t *)v127;
    v128 = (uint64_t *)v127;
    if (*v175)
    {
      v175 = (_QWORD *)*v175;
      v128 = *v93;
    }
    sub_2394213B8(v176, v128);
    ++v177;
  }
  std::string::operator=((std::string *)(v127 + 40), &v153);
  *((_WORD *)v127 + 32) = v154;
  std::string::operator=((std::string *)v127 + 3, &v155);
  if (v42)
  {
    if (*(char *)(a2 + 23) < 0)
      sub_23941A7F8(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    else
      __dst = *(std::__fs::filesystem::path *)a2;
    v27 = sub_2399516C0((uint64_t)&__dst, (uint64_t)v184, v182, (uint64_t)__p);
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  }
  else
  {
    v27 = 0;
  }
  if (a8)
  {
    v129 = *(_QWORD *)(a7 + 8);
    if (v129 >= *(_QWORD *)(a7 + 16))
    {
      v131 = sub_23958837C((char **)a7, a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_23941A7F8(*(_BYTE **)(a7 + 8), *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v130 = *(_OWORD *)a2;
        *(_QWORD *)(v129 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v129 = v130;
      }
      v131 = (char *)(v129 + 24);
      *(_QWORD *)(a7 + 8) = v129 + 24;
    }
    *(_QWORD *)(a7 + 8) = v131;
    if (*(char *)(a2 + 23) < 0)
      sub_23941A7F8(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    else
      __dst = *(std::__fs::filesystem::path *)a2;
    memset(&__replacement, 0, sizeof(__replacement));
    sub_23948900C(&__replacement.__pn_, (std::string *)".mtl", (std::string *)"");
    v132 = std::__fs::filesystem::path::replace_extension(&__dst, &__replacement);
    v133 = *(_QWORD *)(a7 + 8);
    if (v133 >= *(_QWORD *)(a7 + 16))
    {
      v135 = sub_23958837C((char **)a7, (uint64_t)v132);
    }
    else
    {
      if (SHIBYTE(v132->__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_23941A7F8(*(_BYTE **)(a7 + 8), v132->__pn_.__r_.__value_.__l.__data_, v132->__pn_.__r_.__value_.__l.__size_);
      }
      else
      {
        v134 = *(_OWORD *)&v132->__pn_.__r_.__value_.__l.__data_;
        *(_QWORD *)(v133 + 16) = *((_QWORD *)&v132->__pn_.__r_.__value_.__l + 2);
        *(_OWORD *)v133 = v134;
      }
      v135 = (char *)(v133 + 24);
      *(_QWORD *)(a7 + 8) = v133 + 24;
    }
    *(_QWORD *)(a7 + 8) = v135;
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    v137 = (char *)v171;
    v136 = (char *)v172;
    if (v171 != v172)
    {
      v138 = *(char **)(a7 + 8);
      do
      {
        while ((unint64_t)v138 >= *(_QWORD *)(a7 + 16))
        {
          v138 = sub_23958837C((char **)a7, (uint64_t)v137);
          *(_QWORD *)(a7 + 8) = v138;
          v137 += 24;
          if (v137 == v136)
            goto LABEL_260;
        }
        if (v137[23] < 0)
        {
          sub_23941A7F8(v138, *(void **)v137, *((_QWORD *)v137 + 1));
        }
        else
        {
          v139 = *(_OWORD *)v137;
          *((_QWORD *)v138 + 2) = *((_QWORD *)v137 + 2);
          *(_OWORD *)v138 = v139;
        }
        v138 += 24;
        *(_QWORD *)(a7 + 8) = v138;
        *(_QWORD *)(a7 + 8) = v138;
        v137 += 24;
      }
      while (v137 != v136);
    }
LABEL_260:
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)a3 + 424))
    v140 = v27;
  else
    v140 = 0;
  if (v140 != 1)
  {
    v141 = 1;
    goto LABEL_288;
  }
  sub_239587260((uint64_t)&__dst, (uint64_t *)__p);
  std::string::operator=(&v190, (const std::string *)(a3 + 32));
  v191 = *((_QWORD *)a3 + 67);
  v192 = *((_DWORD *)a3 + 136);
  MEMORY[0x23B83DBFC](&v193, "ObjectCapture");
  if (*(char *)(a2 + 23) < 0)
    sub_23941A7F8(&__replacement, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __replacement = *(std::__fs::filesystem::path *)a2;
  memset(&v151, 0, sizeof(v151));
  sub_23948900C(&v151.__pn_, (std::string *)".usdz", (std::string *)"");
  std::__fs::filesystem::path::replace_extension(&__replacement, &v151);
  if (SHIBYTE(v151.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_23941A7F8(&v151, __replacement.__pn_.__r_.__value_.__l.__data_, __replacement.__pn_.__r_.__value_.__l.__size_);
  else
    v151 = __replacement;
  v142 = sub_23995D19C((uint64_t)&v151, (uint64_t)v184, v182, (uint64_t)&__dst);
  if (SHIBYTE(v151.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__pn_.__r_.__value_.__l.__data_);
  if ((v142 & 1) != 0)
  {
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
      if ((v194 & 0x80000000) == 0)
      {
LABEL_280:
        if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_281:
          sub_2395879A4((uint64_t)&v188, v189);
          sub_23958781C((uint64_t)&__dst.__pn_.__r_.__value_.__r.__words[2], (uint64_t)p_dst);
          v141 = 1;
          v27 = 1;
          goto LABEL_288;
        }
LABEL_326:
        operator delete(v190.__r_.__value_.__l.__data_);
        goto LABEL_281;
      }
    }
    else if ((v194 & 0x80000000) == 0)
    {
      goto LABEL_280;
    }
    operator delete(v193);
    if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_281;
    goto LABEL_326;
  }
  if (v150)
    sub_2394202DC((_QWORD *)(a5 + 344), 8016);
  if ((SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v194 & 0x80000000) == 0)
      goto LABEL_286;
LABEL_328:
    operator delete(v193);
    if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_287;
LABEL_329:
    operator delete(v190.__r_.__value_.__l.__data_);
    goto LABEL_287;
  }
  operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
  if (v194 < 0)
    goto LABEL_328;
LABEL_286:
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_329;
LABEL_287:
  sub_2395879A4((uint64_t)&v188, v189);
  sub_23958781C((uint64_t)&__dst.__pn_.__r_.__value_.__r.__words[2], (uint64_t)p_dst);
  v141 = 0;
  v27 = 0;
LABEL_288:
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v155.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_290:
      if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_291;
      goto LABEL_304;
    }
  }
  else if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_290;
  }
  operator delete(v153.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_291:
    if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_292;
    goto LABEL_305;
  }
LABEL_304:
  operator delete(v158.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_292:
    if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_293;
    goto LABEL_306;
  }
LABEL_305:
  operator delete(v156.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_293:
    if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_294;
    goto LABEL_307;
  }
LABEL_306:
  operator delete(v161.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_294:
    if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_295;
    goto LABEL_308;
  }
LABEL_307:
  operator delete(v159.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_295:
    if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_296;
    goto LABEL_309;
  }
LABEL_308:
  operator delete(v164.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_296:
    if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_297;
    goto LABEL_310;
  }
LABEL_309:
  operator delete(v162.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_297:
    if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_298;
    goto LABEL_311;
  }
LABEL_310:
  operator delete(v167.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_298:
    if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_299;
    goto LABEL_312;
  }
LABEL_311:
  operator delete(v165.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_299:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_300;
    goto LABEL_313;
  }
LABEL_312:
  operator delete(v170.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_300:
    v143 = (void **)v171;
    if (!v171)
      goto LABEL_321;
    goto LABEL_314;
  }
LABEL_313:
  operator delete(__str.__r_.__value_.__l.__data_);
  v143 = (void **)v171;
  if (!v171)
    goto LABEL_321;
LABEL_314:
  v144 = v172;
  v145 = v143;
  if (v172 != v143)
  {
    do
    {
      if (*((char *)v144 - 1) < 0)
        operator delete(*(v144 - 3));
      v144 -= 3;
    }
    while (v144 != v143);
    v145 = v171;
  }
  v172 = v143;
  operator delete(v145);
LABEL_321:
  sub_2395879A4((uint64_t)&v178, v179);
  sub_23958781C((uint64_t)&v175, (uint64_t)v176);
  sub_2396FD3E8((uint64_t)v181);
  sub_2396FCD14((uint64_t)v203);
  if ((v141 & 1) == 0)
    goto LABEL_31;
  kdebug_trace();
  v146.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v150)
    *(double *)(a5 + 336) = (double)(v146.__d_.__rep_ - rep) / 1000000.0;
LABEL_32:
  v31 = v183;
  if (v183)
  {
    p_shared_owners = (unint64_t *)&v183->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v185;
  if (v185)
  {
    v35 = (unint64_t *)&v185->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return v27;
}

void sub_23958659C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *a70;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  *(_QWORD *)(v71 + 8) = v72;
  if (a24 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  sub_239586ACC((uint64_t)&a25);
  sub_239586ACC((uint64_t)&a32);
  sub_239586ACC((uint64_t)&a39);
  sub_239586ACC((uint64_t)&a46);
  sub_239586ACC((uint64_t)&a53);
  sub_239586ACC((uint64_t)&a60);
  sub_23941A260(&a67);
  sub_239586B24((uint64_t)&a70);
  sub_2396FD3E8((uint64_t)&STACK[0x220]);
  sub_2396FCD14((uint64_t)&STACK[0x368]);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    if (a14)
      sub_2394202DC((_QWORD *)(v70 + 344), 8005);
    __cxa_end_catch();
    JUMPOUT(0x239585010);
  }
  sub_239416DA0((uint64_t)&STACK[0x240]);
  sub_239416DA0((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_2395868CC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  sub_2396FD3E8((uint64_t)&STACK[0x260]);
  sub_2396FCD14((uint64_t)&STACK[0x368]);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    if (a14)
      sub_2394202DC((_QWORD *)(v14 + 344), 8005);
    __cxa_end_catch();
    JUMPOUT(0x239585010);
  }
  JUMPOUT(0x2395868B4);
}

void sub_239586994()
{
  __cxa_end_catch();
  JUMPOUT(0x2395868B4);
}

void sub_2395869A8(_Unwind_Exception *a1)
{
  sub_239416DA0((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_2395869BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2395869DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
    operator delete(__p);
  sub_2396FCD14((uint64_t)&STACK[0x368]);
  _Unwind_Resume(a1);
}

void sub_239586A00(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = STACK[0x360];
  if (STACK[0x360] == v1)
  {
    (*(void (**)(unint64_t *))(STACK[0x348] + 32))(&STACK[0x348]);
    _Unwind_Resume(a1);
  }
  if (v3)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 40))(v3);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_239586A48(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239586A64(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    operator delete(*(void **)(a1 + 72));
    goto LABEL_3;
  }
  if (*(char *)(a1 + 95) < 0)
    goto LABEL_5;
LABEL_3:
  sub_2395879A4(a1 + 40, *(_QWORD **)(a1 + 48));
  sub_23958781C(a1 + 16, *(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_239586ACC(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_239586B24(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 16;
  sub_2395879A4(a1 + 40, *(_QWORD **)(a1 + 48));
  sub_23958781C(v2, *(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_239586B60(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a2 + 176));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 204) = *(_BYTE *)(a2 + 204);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a2 + 296));
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)(a2 + 336));
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)(a2 + 376));
  return a1;
}

uint64_t sub_239586CA4(uint64_t a1)
{
  char *v2;

  *(_DWORD *)a1 = 1061997773;
  *(_OWORD *)(a1 + 4) = xmmword_239EC7350;
  *(_QWORD *)(a1 + 20) = 0x13DCCCCCDLL;
  *(_QWORD *)(a1 + 28) = 0x241000000;
  *(_QWORD *)(a1 + 36) = 1065353216;
  *(_DWORD *)(a1 + 44) = 2139095039;
  *(_QWORD *)(a1 + 56) = 4096;
  *(_BYTE *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 95) = 3;
  *(_DWORD *)(a1 + 72) = 6778480;
  *(_DWORD *)(a1 + 96) = 1065017672;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 135) = 3;
  *(_DWORD *)(a1 + 112) = 6778480;
  *(_DWORD *)(a1 + 136) = 1065017672;
  *(_BYTE *)(a1 + 144) = 1;
  *(_BYTE *)(a1 + 175) = 3;
  *(_DWORD *)(a1 + 152) = 6778480;
  *(_DWORD *)(a1 + 176) = 1065017672;
  *(_BYTE *)(a1 + 184) = 1;
  *(_BYTE *)(a1 + 215) = 3;
  *(_DWORD *)(a1 + 192) = 6778480;
  *(_DWORD *)(a1 + 216) = 1065017672;
  *(_BYTE *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 232) = 7501925;
  *(_BYTE *)(a1 + 255) = 3;
  *(_DWORD *)(a1 + 256) = 1065017672;
  *(_BYTE *)(a1 + 260) = 1;
  *(_BYTE *)(a1 + 264) = 1;
  *(_BYTE *)(a1 + 295) = 3;
  *(_DWORD *)(a1 + 272) = 6778480;
  *(_DWORD *)(a1 + 296) = 1065017672;
  *(_BYTE *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 6778480;
  *(_BYTE *)(a1 + 335) = 3;
  *(_DWORD *)(a1 + 336) = 1065017672;
  *(_BYTE *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 7501925;
  *(_BYTE *)(a1 + 375) = 3;
  *(_DWORD *)(a1 + 376) = 1065017672;
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 7501925;
  *(_BYTE *)(a1 + 415) = 3;
  *(_DWORD *)(a1 + 416) = 1065017672;
  *(_BYTE *)(a1 + 424) = 1;
  *(_BYTE *)(a1 + 455) = 4;
  strcpy((char *)(a1 + 432), "usdz");
  *(_BYTE *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  v2 = (char *)operator new(0x19uLL);
  *(_QWORD *)(a1 + 512) = v2;
  *(_QWORD *)(a1 + 528) = 0x8000000000000019;
  *(_QWORD *)(a1 + 520) = 23;
  strcpy(v2, "CorePhotogrammetry Bake");
  *(_QWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  return a1;
}

void sub_239586E4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_239586E68(v2);
  sub_239586EB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239586E68(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(void **)a1;
    if (!*(_QWORD *)a1)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_3:
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_239586EB4(uint64_t a1)
{
  if (*(char *)(a1 + 399) < 0)
  {
    operator delete(*(void **)(a1 + 376));
    if ((*(char *)(a1 + 359) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 319) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 359) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 336));
  if ((*(char *)(a1 + 319) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 279) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 296));
  if ((*(char *)(a1 + 279) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 239) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 256));
  if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 199) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 216));
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 176));
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 136));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_20:
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    goto LABEL_21;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_20;
LABEL_10:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
LABEL_21:
  operator delete(*(void **)(a1 + 16));
  return a1;
}

_QWORD *sub_239586FCC(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], a1);
      v5 = a1 + 4;
      v6 = a2[7];
      if (!v6)
      {
LABEL_10:
        a1[7] = v6;
        goto LABEL_12;
      }
    }
    else
    {
      a1[3] = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
      v5 = a1 + 4;
      v6 = a2[7];
      if (!v6)
        goto LABEL_10;
    }
  }
  else
  {
    a1[3] = 0;
    v5 = a1 + 4;
    v6 = a2[7];
    if (!v6)
      goto LABEL_10;
  }
  if ((_QWORD *)v6 != a2 + 4)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    goto LABEL_10;
  }
  a1[7] = v5;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[7] + 24))(a2[7], v5);
LABEL_12:
  v7 = a2[11];
  if (!v7)
  {
LABEL_15:
    a1[11] = v7;
    goto LABEL_17;
  }
  if ((_QWORD *)v7 != a2 + 8)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    goto LABEL_15;
  }
  a1[11] = a1 + 8;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[11] + 24))(a2[11], a1 + 8);
LABEL_17:
  v8 = a2[15];
  if (!v8)
  {
LABEL_20:
    a1[15] = v8;
    goto LABEL_22;
  }
  if ((_QWORD *)v8 != a2 + 12)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    goto LABEL_20;
  }
  a1[15] = a1 + 12;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[15] + 24))(a2[15], a1 + 12);
LABEL_22:
  v9 = a2[19];
  if (!v9)
  {
LABEL_25:
    a1[19] = v9;
    return a1;
  }
  if ((_QWORD *)v9 != a2 + 16)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    goto LABEL_25;
  }
  a1[19] = a1 + 16;
  (*(void (**)(_QWORD))(*(_QWORD *)a2[19] + 24))(a2[19]);
  return a1;
}

void sub_23958717C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v6 = (_QWORD *)v1[15];
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = (_QWORD *)v1[15];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  v8 = (_QWORD *)v1[11];
  if (v8 == v3)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
    v3 = (_QWORD *)v1[11];
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v9))(v3);
LABEL_11:
  v10 = (_QWORD *)v1[7];
  if (v10 == v2)
  {
    v11 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_16;
    v11 = 5;
    v2 = (_QWORD *)v1[7];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v11))(v2);
LABEL_16:
  v12 = (_QWORD *)v1[3];
  if (v12 == v1)
  {
    v13 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_21;
    v13 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v13))(v1);
LABEL_21:
  _Unwind_Resume(exception_object);
}

uint64_t sub_239587260(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int *v5;
  char *v6;
  int *v8;
  int *v9;
  BOOL v10;

  v4 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  sub_2395873FC((uint64_t *)(a1 + 16), (int *)a2[2], (int *)a2 + 6);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = (int *)a2[5];
  if (v5 != (int *)(a2 + 6))
  {
    do
    {
      sub_239587894((_QWORD **)(a1 + 40), (uint64_t *)(a1 + 48), v5 + 8, (uint64_t)(v5 + 8));
      v8 = (int *)*((_QWORD *)v5 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(int **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (int *)*((_QWORD *)v5 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != (int *)(a2 + 6));
  }
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  v6 = (char *)operator new(0x19uLL);
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = xmmword_239EC7360;
  strcpy(v6, "CorePhotogrammetry Bake");
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 135) = 13;
  strcpy((char *)(a1 + 112), "ObjectCapture");
  return a1;
}

void sub_2395873AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239586B24(v1);
  _Unwind_Resume(a1);
}

void sub_2395873C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_23958781C(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_2395873D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;
  uint64_t v3;
  uint64_t *v4;

  sub_2395879A4(v3, *v2);
  sub_23958781C(v1, *v4);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395873FC(uint64_t *result, int *a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  int *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_239587504(v7, v8, v18, &v17, v6 + 8);
      if (*result)
      {
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = (uint64_t **)result;
        sub_2395876B4((uint64_t)v7, (uint64_t)(v6 + 8), (uint64_t)&v16);
        v11 = v18[0];
        v12 = v16;
        *v16 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v11;
        *v10 = v12;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v12 = *v10;
        }
        result = sub_2394213B8((uint64_t *)v7[1], v12);
        ++v7[2];
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_10:
            v14 = v9;
            v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v14 = (int *)*((_QWORD *)v6 + 2);
        v15 = *(_QWORD *)v14 == (_QWORD)v6;
        v6 = v14;
      }
      while (!v15);
LABEL_3:
      v6 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

uint64_t *sub_239587504(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

_BYTE *sub_2395876B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *v7;
  _BYTE *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x60uLL);
  v7 = v6;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_23941A7F8(v6 + 40, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 24);
  }
  *((_WORD *)v7 + 32) = *(_WORD *)(a2 + 32);
  result = v7 + 72;
  if (*(char *)(a2 + 63) < 0)
  {
    result = sub_23941A7F8(result, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 40);
    *((_QWORD *)v7 + 11) = *(_QWORD *)(a2 + 56);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_23958777C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 63) < 0)
  {
    operator delete(*v3);
    sub_2395877B4(v1);
    _Unwind_Resume(a1);
  }
  sub_2395877B4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395877B4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 95) < 0)
      {
        operator delete(*(void **)(v2 + 72));
        if ((*(char *)(v2 + 63) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((*(char *)(v2 + 63) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 40));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_23958781C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_23958781C(a1, *(_QWORD *)a2);
    sub_23958781C(a1, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 95) < 0)
    {
      operator delete(*(void **)(a2 + 72));
      if ((*(char *)(a2 + 63) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a2 + 63) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a2);
      return;
    }
    operator delete(*(void **)(a2 + 40));
    operator delete((void *)a2);
  }
}

_DWORD *sub_239587894(_QWORD **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_239587504(a1, a2, &v15, &v14, a3);
  if (*v6)
    return (_DWORD *)*v6;
  v8 = v6;
  v9 = operator new(0x48uLL);
  v9[8] = *(_DWORD *)a4;
  v10 = *(_QWORD *)(a4 + 32);
  if (v10)
  {
    if (v10 == a4 + 8)
    {
      *((_QWORD *)v9 + 8) = v9 + 10;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      goto LABEL_8;
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  }
  *((_QWORD *)v9 + 8) = v10;
LABEL_8:
  v11 = v15;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v11;
  *v8 = (uint64_t)v9;
  v12 = (_QWORD *)**a1;
  v13 = (uint64_t *)v9;
  if (v12)
  {
    *a1 = v12;
    v13 = (uint64_t *)*v8;
  }
  sub_2394213B8(a1[1], v13);
  a1[2] = (_QWORD *)((char *)a1[2] + 1);
  return v9;
}

void sub_239587990(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2395879A4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;

  if (a2)
  {
    sub_2395879A4(a1, *a2);
    sub_2395879A4(a1, a2[1]);
    v4 = (_QWORD *)a2[8];
    if (v4 == a2 + 5)
    {
      v5 = 4;
      v4 = a2 + 5;
    }
    else
    {
      if (!v4)
      {
LABEL_8:
        operator delete(a2);
        return;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_8;
  }
}

void sub_239587A14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADED90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239587A24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADED90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239587A54(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_239587A64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADEDC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239587A74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADEDC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239587AA4(uint64_t a1)
{
  return sub_239587AB0(a1 + 24);
}

uint64_t sub_239587AB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  sub_239587BCC(a1 + 48, *(char **)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v2)
    {
LABEL_14:
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v4);
      goto LABEL_15;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        v5 = *(std::__shared_weak_count **)(v3 - 32);
        if (v5)
        {
LABEL_9:
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      else
      {
        v5 = *(std::__shared_weak_count **)(v3 - 32);
        if (v5)
          goto LABEL_9;
      }
      v3 -= 48;
      if (v3 == v2)
      {
        v4 = *(void **)(a1 + 24);
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v9 = *(void **)(a1 + 8);
    v10 = *(void **)a1;
    if (v9 != v8)
    {
      v11 = (uint64_t)v9 - 24;
      do
      {
        sub_239421038(v11, *(_QWORD **)(v11 + 8));
        if (*(char *)(v11 - 1) < 0)
          operator delete(*(void **)(v11 - 24));
        v11 -= 48;
      }
      while ((void *)(v11 + 24) != v8);
      v10 = *(void **)a1;
    }
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v10);
  }
  return a1;
}

void sub_239587BCC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_239587BCC(a1, *(_QWORD *)a2);
    sub_239587BCC(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

_QWORD *sub_239587C2C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_239587DC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_239587DD0()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239587DE4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADEE00;
  result[1] = v3;
  return result;
}

uint64_t sub_239587E18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADEE00;
  a2[1] = v2;
  return result;
}

uint64_t sub_239587E34(uint64_t a1)
{
  return sub_2396FD7B0(*(_QWORD *)(a1 + 8));
}

void sub_239587E40()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239587E54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADEE48;
  result[1] = v3;
  return result;
}

uint64_t sub_239587E88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADEE48;
  a2[1] = v2;
  return result;
}

void sub_239587EA4(uint64_t a1, std::string **a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a1 + 8);
  if ((std::string **)v2 != a2)
    sub_239587ED8(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
}

void sub_239587ED8(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  const std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  __int128 v17;
  std::string *v18;
  char *v19;
  std::string *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  const std::string *v28;

  v6 = __str;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) >= __sz)
  {
    v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        v20 = *(std::string **)a1;
      }
      else
      {
        v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v20;
        }
        while (v6 != a3);
        v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        --v12;
      }
      *(_QWORD *)(a1 + 8) = v20;
    }
    else
    {
      v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        v9 = *(std::string **)(a1 + 8);
      }
      v15 = v9;
      if (v13 != a3)
      {
        v16 = 0;
        do
        {
          v18 = &v9[v16];
          v19 = (char *)&v13[v16];
          if (SHIBYTE(v13[v16].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_23941A7F8(v18, *(void **)v19, *((_QWORD *)v19 + 1));
          }
          else
          {
            v17 = *(_OWORD *)v19;
            v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v17;
          }
          ++v16;
        }
        while (&v13[v16] != a3);
        v15 = &v9[v16];
      }
      *(_QWORD *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(std::string **)(a1 + 8);
      v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          --v10;
        }
        while (v10 != v9);
        v11 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_48;
    v21 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v22 = 2 * v21;
    if (2 * v21 <= __sz)
      v22 = __sz;
    v23 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v22;
    if (v23 > 0xAAAAAAAAAAAAAAALL)
LABEL_48:
      sub_2394189F8();
    v24 = 24 * v23;
    v25 = (char *)operator new(24 * v23);
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v25;
    *(_QWORD *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      v26 = 0;
      do
      {
        v27 = &v25[v26 * 24];
        v28 = &v6[v26];
        if (SHIBYTE(v6[v26].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_23941A7F8(v27, v28->__r_.__value_.__l.__data_, v28->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v27 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          *((_QWORD *)v27 + 2) = *((_QWORD *)&v28->__r_.__value_.__l + 2);
        }
        ++v26;
      }
      while (&v6[v26] != a3);
      v25 += v26 * 24;
    }
    *(_QWORD *)(a1 + 8) = v25;
  }
}

_QWORD *sub_2395881DC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_239588370(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

char *sub_23958837C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_23958853C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239588554()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239588568(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADEE90;
  result[1] = v3;
  return result;
}

uint64_t sub_23958859C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADEE90;
  a2[1] = v2;
  return result;
}

uint64_t sub_2395885B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v7;
  int v8;
  int v9;
  _BOOL4 v10;
  BOOL v11;
  std::string *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *v19[2];
  uint64_t v20;
  std::string v21;
  void *__p[2];
  uint64_t v23;

  *(_OWORD *)v19 = *(_OWORD *)a2;
  v20 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7 = (_DWORD *)(a4 + 32);
  v8 = *(char *)(a4 + 55);
  if ((v8 & 0x80000000) == 0)
  {
    if (v8 == 4)
    {
      if (*v7 != 1920492846)
        goto LABEL_4;
      goto LABEL_9;
    }
LABEL_11:
    v9 = SHIBYTE(v20);
    if (SHIBYTE(v20) < 0)
    {
      sub_23941A7F8(__p, v19[0], (unint64_t)v19[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v19;
      v23 = v20;
    }
    v10 = sub_239944938((uint64_t)__p, a3, *(unsigned __int16 *)(a4 + 24));
    goto LABEL_19;
  }
  if (*(_QWORD *)(a4 + 40) != 4)
    goto LABEL_11;
  v7 = *(_DWORD **)v7;
  if (*v7 != 1920492846)
  {
LABEL_4:
    if (*v7 == 1735290926)
    {
      v9 = SHIBYTE(v20);
      if (SHIBYTE(v20) < 0)
      {
        sub_23941A7F8(__p, v19[0], (unint64_t)v19[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v19;
        v23 = v20;
      }
      v10 = sub_239944A78((uint64_t)__p, a3);
      goto LABEL_19;
    }
    goto LABEL_11;
  }
LABEL_9:
  v9 = SHIBYTE(v20);
  if (SHIBYTE(v20) < 0)
  {
    sub_23941A7F8(__p, v19[0], (unint64_t)v19[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v19;
    v23 = v20;
  }
  v10 = sub_239944BB8((char *)__p, a3, 1);
LABEL_19:
  v11 = v10;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p[0]);
    if (v11)
      goto LABEL_21;
LABEL_30:
    v17 = 0;
    if ((v9 & 0x80) == 0)
      return v17;
    goto LABEL_34;
  }
  if (!v10)
    goto LABEL_30;
LABEL_21:
  memset(&v21, 0, sizeof(v21));
  if (v9 >= 0)
    v12 = (std::string *)v19;
  else
    v12 = (std::string *)v19[0];
  v13 = v9;
  if (v9 < 0)
    v13 = (unint64_t)v19[1];
  sub_23948900C(&v21, v12, (std::string *)((char *)v12 + v13));
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(v14 + 8);
  if (v15 >= *(_QWORD *)(v14 + 16))
  {
    *(_QWORD *)(v14 + 8) = sub_23958837C(*(char ***)(a1 + 8), (uint64_t)&v21);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
  }
  else
  {
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_23941A7F8(*(_BYTE **)(v14 + 8), v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    }
    else
    {
      v16 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
      *(_QWORD *)(v15 + 16) = *((_QWORD *)&v21.__r_.__value_.__l + 2);
      *(_OWORD *)v15 = v16;
    }
    *(_QWORD *)(v14 + 8) = v15 + 24;
    *(_QWORD *)(v14 + 8) = v15 + 24;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_37:
      operator delete(v21.__r_.__value_.__l.__data_);
      v17 = 1;
      if (v20 < 0)
        goto LABEL_34;
      return v17;
    }
  }
  v17 = 1;
  if ((v20 & 0x8000000000000000) == 0)
    return v17;
LABEL_34:
  operator delete(v19[0]);
  return v17;
}

void sub_23958880C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v26 + 8) = v27;
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23958886C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_239588A00(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

uint64_t sub_239588A0C(uint64_t a1, const std::__fs::filesystem::path *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t (***v20)();
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  uint64_t v51[2];
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  void *v55[2];
  int v56;
  char v57;
  _OWORD v58[3];
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  void *__p[3];
  std::string v72;
  char v73;
  std::string v74;
  uint64_t v75;
  int v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  _QWORD *v81;
  _BYTE v82[24];
  _BYTE *v83;
  _BYTE v84[24];
  _BYTE *v85;
  _BYTE v86[24];
  _BYTE *v87;
  _BYTE v88[568];
  _QWORD v89[3];
  _QWORD *v90;
  _QWORD v91[3];
  _QWORD *v92;
  _QWORD v93[3];
  _QWORD *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int32x4_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  int v111;
  int32x4_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _BYTE v121[28];
  __int128 v122;
  _OWORD v123[2];
  int v124;
  uint64_t (**v125)();
  uint64_t *v126;
  uint64_t (***v127)();
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  v78 = a7;
  v79 = a8;
  strcpy((char *)v55, "0.25");
  v56 = 65796;
  v57 = 0;
  sub_239586CA4((uint64_t)v58);
  v77 = 0;
  v60 = 0x100000800;
  v61 = 1;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v14 = *(_OWORD *)(a3 + 16);
  v58[0] = *(_OWORD *)a3;
  v58[1] = v14;
  v15 = *(_OWORD *)(a3 + 32);
  v59 = *(_BYTE *)(a3 + 48);
  v58[2] = v15;
  sub_239586B60((uint64_t)&v60, a3 + 56);
  if (v58 != (_OWORD *)a3)
    sub_23945D3D0(__p, *(char **)(a3 + 456), *(char **)(a3 + 464), (uint64_t)(*(_QWORD *)(a3 + 464) - *(_QWORD *)(a3 + 456)) >> 3);
  std::string::operator=(&v72, (const std::string *)(a3 + 480));
  v73 = *(_BYTE *)(a3 + 504);
  std::string::operator=(&v74, (const std::string *)(a3 + 512));
  v75 = *(_QWORD *)(a3 + 536);
  v76 = *(_DWORD *)(a3 + 544);
  MEMORY[0x23B83DBFC](v55, "1");
  v98 = 0;
  v97 = 0u;
  v96 = 0u;
  v95 = 0u;
  v103 = 0;
  v104 = 0;
  v99 = 0u;
  v100 = 0u;
  v102 = 0;
  v101 = 0;
  *(_QWORD *)&v16 = 0x80000000800000;
  *((_QWORD *)&v16 + 1) = 0x80000000800000;
  v105 = vdupq_n_s32(0x7F7FFFFFu);
  v106 = v16;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0;
  v112 = v105;
  v113 = v16;
  v115 = 0;
  v114 = 0;
  v117 = 0;
  v116 = 0;
  memset(v121, 0, sizeof(v121));
  v120 = 0u;
  v119 = 0u;
  v118 = 0u;
  v124 = 0;
  v122 = xmmword_239EC7340;
  memset(v123, 0, sizeof(v123));
  v90 = 0;
  v92 = 0;
  v94 = 0;
  sub_2396FD800(a4, (uint64_t)v86);
  v51[0] = 0x42C8000000000000;
  sub_2396FCC68(v88, 100, v86, v51, 1.0);
  v17 = v87;
  if (v87 == v86)
  {
    v18 = 4;
    v17 = v86;
  }
  else
  {
    if (!v87)
      goto LABEL_8;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_8:
  sub_2396FD534(v51, v88, 100);
  sub_2395841C8(v89, v51);
  v19 = v91;
  v125 = &off_250ADEED8;
  v126 = a4;
  v127 = &v125;
  sub_2394D9710(&v125, v91);
  v20 = v127;
  if (v127 == &v125)
  {
    v21 = 4;
    v20 = &v125;
  }
  else
  {
    if (!v127)
      goto LABEL_13;
    v21 = 5;
  }
  (*v20)[v21]();
LABEL_13:
  if (!(_BYTE)v79)
    goto LABEL_19;
  v125 = &off_250ADEF20;
  v126 = &v78;
  v127 = &v125;
  sub_2395881DC(&v125, v93);
  v22 = v127;
  if (v127 == &v125)
  {
    v23 = 4;
    v22 = &v125;
  }
  else
  {
    if (!v127)
      goto LABEL_19;
    v23 = 5;
  }
  (*v22)[v23]();
LABEL_19:
  v24 = (uint64_t)v90;
  if (!v90)
  {
LABEL_22:
    v81 = (_QWORD *)v24;
    goto LABEL_24;
  }
  if (v90 != v89)
  {
    v24 = (*(uint64_t (**)(void))(*v90 + 16))();
    goto LABEL_22;
  }
  v81 = v80;
  (*(void (**)(_QWORD *, _QWORD *))(v89[0] + 24))(v89, v80);
LABEL_24:
  v25 = v82;
  v26 = (uint64_t)v92;
  if (!v92)
  {
LABEL_27:
    v83 = (_BYTE *)v26;
    goto LABEL_29;
  }
  if (v92 != v91)
  {
    v26 = (*(uint64_t (**)(void))(*v92 + 16))();
    goto LABEL_27;
  }
  v83 = v82;
  (*(void (**)(_QWORD *, _BYTE *))(v91[0] + 24))(v91, v82);
LABEL_29:
  v27 = v84;
  v28 = (uint64_t)v94;
  if (!v94)
  {
LABEL_32:
    v85 = (_BYTE *)v28;
    goto LABEL_34;
  }
  if (v94 != v93)
  {
    v28 = (*(uint64_t (**)(void))(*v94 + 16))();
    goto LABEL_32;
  }
  v85 = v84;
  (*(void (**)(_QWORD *, _BYTE *))(v93[0] + 24))(v93, v84);
LABEL_34:
  v29 = sub_23993799C(a1, a2, (uint64_t)v55, (uint64_t)&v95, 1u, v80);
  if (v85 == v84)
  {
    v30 = 4;
  }
  else
  {
    if (!v85)
      goto LABEL_39;
    v30 = 5;
    v27 = v85;
  }
  (*(void (**)(_QWORD *))(*v27 + 8 * v30))(v27);
LABEL_39:
  if (v83 == v82)
  {
    v31 = 4;
  }
  else
  {
    if (!v83)
      goto LABEL_44;
    v31 = 5;
    v25 = v83;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v31))(v25);
LABEL_44:
  v32 = v81;
  if (v81 == v80)
  {
    v33 = 4;
    v32 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_49;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_49:
  if (a6)
  {
    v34 = v96;
    *(_OWORD *)(a5 + 976) = v95;
    *(_OWORD *)(a5 + 992) = v34;
    *(_OWORD *)(a5 + 1008) = v97;
    *(_QWORD *)(a5 + 1024) = v98;
  }
  v35 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v53;
  if (v53)
  {
    v39 = (unint64_t *)&v53->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v52;
  if (v52)
  {
    v42 = (unint64_t *)&v52->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  sub_2396FCD14((uint64_t)v88);
  v44 = v94;
  if (v94 == v93)
  {
    v45 = 4;
    v44 = v93;
  }
  else
  {
    if (!v94)
      goto LABEL_71;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_71:
  if (v92 == v91)
  {
    v46 = 4;
  }
  else
  {
    if (!v92)
      goto LABEL_76;
    v46 = 5;
    v19 = v92;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v46))(v19);
LABEL_76:
  v47 = v90;
  if (v90 == v89)
  {
    v48 = 4;
    v47 = v89;
  }
  else
  {
    if (!v90)
      goto LABEL_81;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_81:
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v74.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_83:
      v49 = __p[0];
      if (!__p[0])
        goto LABEL_85;
      goto LABEL_84;
    }
  }
  else if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_83;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  v49 = __p[0];
  if (__p[0])
  {
LABEL_84:
    __p[1] = v49;
    operator delete(v49);
  }
LABEL_85:
  sub_239586EB4((uint64_t)&v60);
  if ((char)v56 < 0)
    operator delete(v55[0]);
  return v29;
}

void sub_2395890B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  _QWORD *v16;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;

  if ((_QWORD *)STACK[0x2D0] == v16)
  {
    v18 = 4;
  }
  else
  {
    if (!STACK[0x2D0])
      goto LABEL_6;
    v18 = 5;
    v16 = (_QWORD *)STACK[0x2D0];
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v18))(v16);
LABEL_6:
  v19 = (unint64_t *)STACK[0x2B0];
  if ((unint64_t *)STACK[0x2B0] == &STACK[0x298])
  {
    v20 = 4;
    v19 = &STACK[0x298];
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_11:
  sub_23942FEFC(&a9);
  sub_2396FCD14((uint64_t)&STACK[0x318]);
  sub_2395891D0(&STACK[0x550]);
  sub_23958927C((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_2395891BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_23958927C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395891D0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[7];
  if (v5 == a1 + 4)
  {
    v6 = 4;
    v5 = a1 + 4;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[3];
  if (v7 == a1)
  {
    v8 = 4;
    v7 = a1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

uint64_t sub_23958927C(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 567) < 0)
  {
    operator delete(*(void **)(a1 + 544));
    if ((*(char *)(a1 + 535) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(void **)(a1 + 488);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 535) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 512));
  v2 = *(void **)(a1 + 488);
  if (v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 496) = v2;
    operator delete(v2);
  }
LABEL_5:
  sub_239586EB4(a1 + 88);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_23958930C()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239589320(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADEED8;
  result[1] = v3;
  return result;
}

uint64_t sub_239589354(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADEED8;
  a2[1] = v2;
  return result;
}

uint64_t sub_239589370(uint64_t a1)
{
  return sub_2396FD7B0(*(_QWORD *)(a1 + 8));
}

void sub_23958937C()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239589390(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADEF20;
  result[1] = v3;
  return result;
}

uint64_t sub_2395893C4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADEF20;
  a2[1] = v2;
  return result;
}

void sub_2395893E0(uint64_t a1, std::string **a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a1 + 8);
  if ((std::string **)v2 != a2)
    sub_239587ED8(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
}

void sub_239589414(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int16 v14;

  v14 = 0;
  *a2 = sub_239589F70((uint64_t)(a1 + 7), (uint64_t)&v14, a3);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v5 = (uint64_t *)a1[7];
  v6 = (uint64_t *)a1[8];
  if (v5 != v6)
  {
    v7 = v4;
    do
    {
      v8 = *v5;
      v9 = (std::__shared_weak_count *)v5[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v7);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_2395894F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_239EBED3C();
  _Unwind_Resume(exception_object);
}

uint64_t sub_239589508(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_239589588(uint64_t a1)
{
  sub_239421038(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

double sub_2395895D4(uint64_t a1, uint64_t a2)
{
  void **v3;
  double result;
  __int128 v5;
  uint64_t v6;

  *(_WORD *)(a2 + 24) = (int)(*(float *)(a1 + 32) * 100.0);
  std::operator+<char>();
  v3 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*v3);
  result = *(double *)&v5;
  *(_OWORD *)v3 = v5;
  *(_QWORD *)(a2 + 48) = v6;
  return result;
}

uint64_t sub_23958964C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v6 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    while (*(_QWORD *)v6)
    {
      v6 += 16;
      v7 = (v7 + 1);
      if (v6 == v5)
        goto LABEL_8;
    }
  }
  if (v6 == v5)
  {
LABEL_8:
    v19 = 0;
    v20 = 0;
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
    {
      v8 = sub_2394E46BC((char **)a1, (uint64_t)&v19);
      v9 = v20;
      *(_QWORD *)(a1 + 8) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a1 + 8) = v5 + 16;
    }
  }
  v12 = operator new(0x58uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_250ADEF68;
  v13 = v12 + 4;
  v12[3] = off_250AF0C30;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v13, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a3;
    v12[6] = *(_QWORD *)(a3 + 16);
  }
  v12[3] = off_250ADEFA0;
  v12[9] = 0;
  v12[10] = 0;
  v12[7] = sub_239589F64;
  v12[8] = 0;
  v14 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v15 = (std::__shared_weak_count *)v14[1];
  *v14 = v12 + 3;
  v14[1] = v12;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v7;
}

void sub_2395897D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2395897EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_239589804(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADEF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239589814(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADEF68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239589844(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_239589854(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_250ADEFA0;
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  return sub_23995E4A4((uint64_t)a1);
}

void sub_2395898D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_250ADEFA0;
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  sub_23995E4A4((uint64_t)a1);
  JUMPOUT(0x23B83E31CLL);
}

unint64_t sub_239589960(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
}

void sub_23958997C(uint64_t a1, unint64_t a2)
{
  sub_23955C844((char **)(a1 + 40), a2);
}

void sub_239589984(uint64_t a1, unint64_t a2)
{
  char **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v3 = (char **)(a1 + 40);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3);
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if (v8 != 0 && v7)
  {
    sub_239589D2C(v3, v8);
  }
  else if (!v7)
  {
    v9 = v4 + 24 * a2;
    while (v5 != v9)
    {
      if (*(char *)(v5 - 1) < 0)
        operator delete(*(void **)(v5 - 24));
      v5 -= 24;
    }
    *(_QWORD *)(a1 + 48) = v9;
  }
}

void sub_239589A10(_QWORD *a1)
{
  void **v1;
  void **v2;

  v1 = (void **)a1[5];
  v2 = (void **)a1[6];
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  if (v1)
  {
    while (v2 != v1)
    {
      if (*((char *)v2 - 1) < 0)
        operator delete(*(v2 - 3));
      v2 -= 3;
    }
    operator delete(v1);
  }
}

void sub_239589A68(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  int v4;
  void *__p[2];
  uint64_t v6;

  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  v2 = *(_QWORD **)(a1 + 48);
  if ((unint64_t)v2 >= *(_QWORD *)(a1 + 56))
  {
    v3 = sub_23941ACDC((void **)(a1 + 40), (uint64_t)__p);
    v4 = SHIBYTE(v6);
    *(_QWORD *)(a1 + 48) = v3;
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
    *(_QWORD *)(a1 + 48) = v2 + 3;
  }
}

void sub_239589AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239589AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  std::string __p;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = (__int128 *)(v6 + 24 * a2);
  if (*((char *)v7 + 23) < 0)
  {
    sub_23941A7F8(&__p, *(void **)v7, *((_QWORD *)v7 + 1));
    v6 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v8 = *v7;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
  }
  std::string::operator=((std::string *)(v6 + 24 * a2), (const std::string *)(v6 + 24 * a3));
  std::string::operator=((std::string *)(*(_QWORD *)(a1 + 40) + 24 * a3), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_239589BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_239589BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 40) + 24 * a3), (const std::string *)(*(_QWORD *)(a1 + 40) + 24 * a2));
}

_QWORD *sub_239589BE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *result;

  v4 = operator new();
  *(_QWORD *)v4 = off_250AF0C30;
  v5 = (_BYTE *)(v4 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_23941A7F8(v5, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  }
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)v4 = off_250ADEFA0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  sub_239490944((char *)(v4 + 40), v6, *(_QWORD *)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 48) - v6) >> 3));
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_250ADF010;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = (uint64_t)result;
  return result;
}

void sub_239589CCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t sub_239589D1C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void sub_239589D2C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  char *v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5)
LABEL_24:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        *((_QWORD *)v5 - 2) = 0;
        *((_QWORD *)v5 - 1) = 0;
        *((_QWORD *)v5 - 3) = 0;
        v5 -= 24;
      }
      while (v5 != v6);
      v18 = *a1;
      v5 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5 != v18)
      {
        do
        {
          if (*(v5 - 1) < 0)
            operator delete(*((void **)v5 - 3));
          v5 -= 24;
        }
        while (v5 != v18);
        v5 = v18;
      }
      if (v5)
        goto LABEL_24;
    }
  }
}

void sub_239589F24(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239589F48(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (*sub_239589F64())()
{
  return sub_239589F64;
}

uint64_t sub_239589F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v6 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    while (*(_QWORD *)v6)
    {
      v6 += 16;
      v7 = (v7 + 1);
      if (v6 == v5)
        goto LABEL_8;
    }
  }
  if (v6 == v5)
  {
LABEL_8:
    v19 = 0;
    v20 = 0;
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
    {
      v8 = sub_2394E46BC((char **)a1, (uint64_t)&v19);
      v9 = v20;
      *(_QWORD *)(a1 + 8) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a1 + 8) = v5 + 16;
    }
  }
  v12 = operator new(0x58uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_250ADF048;
  v13 = v12 + 4;
  v12[3] = off_250AF0C30;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v13, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a3;
    v12[6] = *(_QWORD *)(a3 + 16);
  }
  v12[3] = &off_250ADF080;
  v12[9] = 0;
  v12[10] = 0;
  v12[7] = sub_23958A72C;
  v12[8] = 0;
  v14 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v15 = (std::__shared_weak_count *)v14[1];
  *v14 = v12 + 3;
  v14[1] = v12;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v7;
}

void sub_23958A0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23958A110(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_23958A128(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADF048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23958A138(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADF048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23958A168(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_23958A178(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250ADF080;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return sub_23995E4A4((uint64_t)a1);
}

void sub_23958A1B4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250ADF080;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_23995E4A4((uint64_t)a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23958A204(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 1;
}

void sub_23958A214(_QWORD *a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  unint64_t v16;
  __int128 v17;
  __int16 v18;

  v3 = (_BYTE *)a1[5];
  if (a2 > (uint64_t)(a1[7] - (_QWORD)v3) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v4 = (_BYTE *)a1[6];
    v5 = 2 * a2;
    v6 = (char *)operator new(2 * a2);
    v7 = v4 - v3;
    v8 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFELL];
    v9 = v8;
    if (v4 == v3)
      goto LABEL_11;
    if ((unint64_t)(v7 - 2) >= 0x1E)
    {
      v9 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFELL];
      if (v4 - v6 - (v7 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
      {
        v10 = v7 >> 1;
        v11 = ((unint64_t)(v7 - 2) >> 1) + 1;
        v12 = 2 * (v11 & 0xFFFFFFFFFFFFFFF0);
        v13 = &v4[-v12];
        v9 = &v8[-v12];
        v14 = &v6[2 * v10 - 16];
        v15 = (__int128 *)(v4 - 16);
        v16 = v11 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v17 = *v15;
          *((_OWORD *)v14 - 1) = *(v15 - 1);
          *(_OWORD *)v14 = v17;
          v14 -= 32;
          v15 -= 2;
          v16 -= 16;
        }
        while (v16);
        v4 = v13;
        if (v11 == (v11 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_11;
      }
    }
    else
    {
      v9 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFELL];
    }
    do
    {
      v18 = *((_WORD *)v4 - 1);
      v4 -= 2;
      *((_WORD *)v9 - 1) = v18;
      v9 -= 2;
    }
    while (v4 != v3);
LABEL_11:
    a1[5] = v9;
    a1[6] = v8;
    a1[7] = &v6[v5];
    if (v3)
      operator delete(v3);
  }
}

void sub_23958A328(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(_QWORD *)(a1 + 48) - v2) >> 1;
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_2394C3584(a1 + 40, v5);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 48) = v2 + 2 * a2;
  }
}

void sub_23958A35C(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void sub_23958A378(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _WORD *v13;
  char *v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  char *v20;
  unint64_t v21;
  __int128 v22;
  __int16 v23;

  v3 = (char *)a1[6];
  v2 = a1[7];
  v4 = v3;
  if ((unint64_t)v3 < v2)
  {
    *(_WORD *)v3 = 0;
    v5 = (uint64_t)(v3 + 2);
    goto LABEL_23;
  }
  v6 = (char *)a1[5];
  v7 = v3 - v6;
  if (v3 - v6 <= -3)
    sub_2394189F8();
  v8 = v7 >> 1;
  v9 = v2 - (_QWORD)v6;
  if (v9 <= (v7 >> 1) + 1)
    v10 = v8 + 1;
  else
    v10 = v9;
  if (v9 >= 0x7FFFFFFFFFFFFFFELL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  if (v11)
  {
    if (v11 < 0)
      sub_239418A80();
    v12 = operator new(2 * v11);
    v13 = &v12[2 * v8];
    v14 = &v12[2 * v11];
    *v13 = 0;
    v5 = (uint64_t)(v13 + 1);
    v15 = v3 - v6;
    if (v3 == v6)
      goto LABEL_21;
    goto LABEL_15;
  }
  v12 = 0;
  v13 = (_WORD *)(2 * v8);
  v14 = 0;
  *(_WORD *)(2 * v8) = 0;
  v5 = 2 * v8 + 2;
  v15 = v3 - v6;
  if (v3 != v6)
  {
LABEL_15:
    v16 = v15 - 2;
    if (v16 < 0x1E)
      goto LABEL_28;
    if (v3 - v12 - (v7 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
      goto LABEL_28;
    v17 = (v16 >> 1) + 1;
    v18 = 2 * (v17 & 0xFFFFFFFFFFFFFFF0);
    v4 = &v3[-v18];
    v13 = (_WORD *)((char *)v13 - v18);
    v19 = &v12[2 * v8 - 16];
    v20 = v3 - 16;
    v21 = v17 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v22 = *(_OWORD *)v20;
      *(v19 - 1) = *((_OWORD *)v20 - 1);
      *v19 = v22;
      v19 -= 2;
      v20 -= 32;
      v21 -= 16;
    }
    while (v21);
    if (v17 != (v17 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_28:
      do
      {
        v23 = *((_WORD *)v4 - 1);
        v4 -= 2;
        *--v13 = v23;
      }
      while (v4 != v6);
    }
  }
LABEL_21:
  a1[5] = v13;
  a1[6] = v5;
  a1[7] = v14;
  if (v6)
    operator delete(v6);
LABEL_23:
  a1[6] = v5;
}

uint64_t sub_23958A4E0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int16 v4;

  v3 = *(_QWORD *)(result + 40);
  v4 = *(_WORD *)(v3 + 2 * a2);
  *(_WORD *)(v3 + 2 * a2) = *(_WORD *)(v3 + 2 * a3);
  *(_WORD *)(v3 + 2 * a3) = v4;
  return result;
}

uint64_t sub_23958A500(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(*(_QWORD *)(result + 40) + 2 * a3) = *(_WORD *)(*(_QWORD *)(result + 40) + 2 * a2);
  return result;
}

uint64_t sub_23958A510(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(*(_QWORD *)(result + 40) + 2 * a2) = (*(unsigned __int16 *)(*(_QWORD *)(result + 40) + 2 * a3)
                                                 + *(unsigned __int16 *)(*(_QWORD *)(result + 40) + 2 * a2)) >> 1;
  return result;
}

_QWORD *sub_23958A530@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  sub_23958A5FC(v4, a1);
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_250ADF0F0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = result;
  return result;
}

void sub_23958A5AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_23958A5C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1093C400FBCE358);
  _Unwind_Resume(a1);
}

uint64_t sub_23958A5EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

_QWORD *sub_23958A5FC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;

  *a1 = off_250AF0C30;
  v4 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = 0;
  *a1 = &off_250ADF080;
  a1[6] = 0;
  a1[7] = 0;
  v7 = *(_BYTE **)(a2 + 40);
  v6 = *(_BYTE **)(a2 + 48);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - v7);
    a1[5] = v9;
    a1[6] = v9;
    v10 = &v9[2 * (v8 >> 1)];
    a1[7] = v10;
    memcpy(v9, v7, v8);
    a1[6] = v10;
  }
  return a1;
}

void sub_23958A6C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23995E4A4(v1);
  _Unwind_Resume(a1);
}

void sub_23958A6EC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23958A710(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (*sub_23958A72C())()
{
  return sub_23958A72C;
}

uint64_t sub_23958A738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v6 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    while (*(_QWORD *)v6)
    {
      v6 += 16;
      v7 = (v7 + 1);
      if (v6 == v5)
        goto LABEL_8;
    }
  }
  if (v6 == v5)
  {
LABEL_8:
    v19 = 0;
    v20 = 0;
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
    {
      v8 = sub_2394E46BC((char **)a1, (uint64_t)&v19);
      v9 = v20;
      *(_QWORD *)(a1 + 8) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a1 + 8) = v5 + 16;
    }
  }
  v12 = operator new(0x58uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_250ADF128;
  v13 = v12 + 4;
  v12[3] = off_250AF0C30;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v13, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a3;
    v12[6] = *(_QWORD *)(a3 + 16);
  }
  v12[3] = &off_250ADF160;
  v12[9] = 0;
  v12[10] = 0;
  v12[7] = sub_23958C0CC;
  v12[8] = 0;
  v14 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v15 = (std::__shared_weak_count *)v14[1];
  *v14 = v12 + 3;
  v14[1] = v12;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v7;
}

void sub_23958A8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23958A8D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_23958A8F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADF128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23958A900(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADF128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23958A930(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_23958A940(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *a1 = &off_250ADF160;
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        sub_23958B6B4(v3 - 24, *(char **)(v3 - 16));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  return sub_23995E4A4((uint64_t)a1);
}

void sub_23958A9B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *a1 = &off_250ADF160;
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        sub_23958B6B4(v3 - 24, *(char **)(v3 - 16));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  sub_23995E4A4((uint64_t)a1);
  JUMPOUT(0x23B83E31CLL);
}

unint64_t sub_23958AA3C(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
}

void sub_23958AA58(uint64_t a1, unint64_t a2)
{
  sub_23958AEA0((char **)(a1 + 40), a2);
}

void sub_23958AA60(uint64_t a1, unint64_t a2)
{
  void **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v3 = (void **)(a1 + 40);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if (v8 != 0 && v7)
  {
    sub_23958AFE8(v3, v8);
  }
  else if (!v7)
  {
    v9 = v5 + 24 * a2;
    if (v4 != v9)
    {
      do
      {
        v10 = v4 - 24;
        sub_23958B6B4(v4 - 24, *(char **)(v4 - 16));
        v4 = v10;
      }
      while (v10 != v9);
    }
    *(_QWORD *)(a1 + 48) = v9;
  }
}

void sub_23958AAEC(_QWORD *a1)
{
  char **v1;
  char **v2;
  char **v3;

  v2 = (char **)a1[5];
  v1 = (char **)a1[6];
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  if (v2)
  {
    if (v1 != v2)
    {
      do
      {
        v3 = v1 - 3;
        sub_23958B6B4((uint64_t)(v1 - 3), *(v1 - 2));
        v1 = v3;
      }
      while (v3 != v2);
    }
    operator delete(v2);
  }
}

void sub_23958AB48(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char **v7;
  char *v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v7 = &v8;
  v2 = *(_QWORD **)(a1 + 48);
  if ((unint64_t)v2 >= *(_QWORD *)(a1 + 56))
  {
    v6 = sub_23958B1E8(a1 + 40, &v7);
  }
  else
  {
    *v2 = &v8;
    v3 = v8;
    v2[1] = v8;
    v4 = v2 + 1;
    v5 = v9;
    v2[2] = v9;
    if (v5)
    {
      *((_QWORD *)v3 + 2) = v4;
      v7 = &v8;
      v8 = 0;
      v9 = 0;
    }
    else
    {
      *v2 = v4;
    }
    v6 = v2 + 3;
  }
  *(_QWORD *)(a1 + 48) = v6;
  sub_23958B6B4((uint64_t)&v7, v8);
}

void sub_23958ABDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_23958B6B4((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_23958ABF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  char ***v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  BOOL v14;
  char **v15;
  char *v16[2];

  v6 = *(_QWORD *)(a1 + 40);
  v7 = (_QWORD *)(v6 + 24 * a2);
  v16[0] = 0;
  v16[1] = 0;
  v15 = v16;
  v10 = (unsigned __int16 *)*v7;
  v8 = (unsigned __int16 *)(v7 + 1);
  v9 = v10;
  if (v10 == v8)
  {
    if (a2 == a3)
      goto LABEL_3;
  }
  else
  {
    do
    {
      sub_23958B3B8(&v15, (uint64_t *)v16, v9 + 16, (uint64_t)(v9 + 16));
      v12 = (unsigned __int16 *)*((_QWORD *)v9 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned __int16 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned __int16 *)*((_QWORD *)v9 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v14);
      }
      v9 = v13;
    }
    while (v13 != v8);
    v6 = *(_QWORD *)(a1 + 40);
    if (a2 == a3)
    {
LABEL_3:
      v11 = (char ***)(v6 + 24 * a3);
      if (v11 == &v15)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  sub_23958B714((_QWORD *)(v6 + 24 * a2), *(_QWORD **)(v6 + 24 * a3), (_QWORD *)(v6 + 24 * a3 + 8));
  v11 = (char ***)(*(_QWORD *)(a1 + 40) + 24 * a3);
  if (v11 != &v15)
LABEL_14:
    sub_23958B714(v11, v15, v16);
LABEL_15:
  sub_23958B6B4((uint64_t)&v15, v16[0]);
}

void sub_23958AD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_23958B6B4((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_23958AD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_23958B6B4((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_23958AD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != a2)
    sub_23958B714((_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * a3), *(_QWORD **)(*(_QWORD *)(a1 + 40) + 24 * a2), (_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * a2 + 8));
}

_QWORD *sub_23958AD74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  _QWORD *result;

  v4 = operator new();
  *(_QWORD *)v4 = off_250AF0C30;
  v5 = (_BYTE *)(v4 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_23941A7F8(v5, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)v4 = &off_250ADF160;
  sub_23958BB64((void ****)(v4 + 40), a1 + 40);
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_250ADF1D0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = (uint64_t)result;
  return result;
}

void sub_23958AE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t sub_23958AE90(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void sub_23958AEA0(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = a1[1];
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_12:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        while (1)
        {
          v10 = &v8[v9];
          *((_QWORD *)v10 - 3) = *(_QWORD *)&v4[v9 - 24];
          v11 = (uint64_t *)&v4[v9 - 16];
          v12 = *v11;
          *(_QWORD *)&v8[v9 - 16] = *v11;
          v13 = (uint64_t)&v8[v9 - 16];
          v14 = *(_QWORD *)&v4[v9 - 8];
          *((_QWORD *)v10 - 1) = v14;
          if (!v14)
            break;
          *(_QWORD *)(v12 + 16) = v13;
          *(_QWORD *)&v4[v9 - 24] = v11;
          *v11 = 0;
          *(_QWORD *)&v4[v9 - 8] = 0;
          v9 -= 24;
          if (&v4[v9] == v2)
            goto LABEL_8;
        }
        *((_QWORD *)v10 - 3) = v13;
        v9 -= 24;
      }
      while (&v4[v9] != v2);
LABEL_8:
      v15 = *a1;
      v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v15)
      {
        do
        {
          sub_23958B6B4((uint64_t)(v2 - 24), *((char **)v2 - 2));
          v2 -= 24;
        }
        while (v2 != v15);
        v2 = v15;
      }
      if (v2)
        goto LABEL_12;
    }
  }
}

void sub_23958AFE8(void **a1, unint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[3 * a2];
      v12 = 24 * a2;
      v13 = v4 + 1;
      do
      {
        *v13 = 0;
        v13[1] = 0;
        *(v13 - 1) = v13;
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
    return;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (_BYTE *)*a1) >> 3);
  v7 = v6 + a2;
  if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v10 = (char *)operator new(24 * v9);
  }
  else
  {
    v10 = 0;
  }
  v14 = &v10[24 * v6];
  v15 = &v10[24 * v9];
  v16 = 24 * a2;
  v17 = &v14[24 * a2];
  v18 = v14 + 8;
  do
  {
    *v18 = 0;
    v18[1] = 0;
    *(v18 - 1) = v18;
    v18 += 3;
    v16 -= 24;
  }
  while (v16);
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (!v19)
      return;
LABEL_31:
    operator delete(v19);
    return;
  }
  v21 = 0;
  do
  {
    while (1)
    {
      v22 = &v14[v21];
      *((_QWORD *)v22 - 3) = *(_QWORD *)&v19[v21 - 24];
      v23 = &v19[v21 - 16];
      v24 = *(_QWORD *)v23;
      *(_QWORD *)&v14[v21 - 16] = *(_QWORD *)v23;
      v25 = (uint64_t)&v14[v21 - 16];
      v26 = *(_QWORD *)&v19[v21 - 8];
      *((_QWORD *)v22 - 1) = v26;
      if (!v26)
        break;
      *(_QWORD *)(v24 + 16) = v25;
      *(_QWORD *)&v19[v21 - 24] = v23;
      *(_QWORD *)v23 = 0;
      *(_QWORD *)&v19[v21 - 8] = 0;
      v21 -= 24;
      if (&v19[v21] == v20)
        goto LABEL_25;
    }
    *((_QWORD *)v22 - 3) = v25;
    v21 -= 24;
  }
  while (&v19[v21] != v20);
LABEL_25:
  v27 = (char *)*a1;
  v19 = (char *)a1[1];
  *a1 = &v14[v21];
  a1[1] = v17;
  a1[2] = v15;
  if (v19 != v27)
  {
    do
    {
      v28 = v19 - 24;
      sub_23958B6B4((uint64_t)(v19 - 24), *((char **)v19 - 2));
      v19 = v28;
    }
    while (v28 != v27);
    v19 = v27;
  }
  if (v19)
    goto LABEL_31;
}

_QWORD *sub_23958B1E8(uint64_t a1, _QWORD *a2)
{
  char **v3;
  char **v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char **v23;

  v3 = *(char ***)a1;
  v4 = *(char ***)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = a2 + 1;
  v12 = a2[1];
  *(_QWORD *)v10 = *a2;
  *((_QWORD *)v10 + 1) = v12;
  v13 = v10 + 8;
  v14 = a2[2];
  *((_QWORD *)v10 + 2) = v14;
  if (!v14)
  {
    *(_QWORD *)v10 = v13;
    v15 = &v9[24 * v8];
    v16 = v10 + 24;
    if (v4 != v3)
      goto LABEL_13;
LABEL_24:
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v3)
      return v16;
    goto LABEL_21;
  }
  *(_QWORD *)(v12 + 16) = v13;
  *a2 = v11;
  *v11 = 0;
  a2[2] = 0;
  v3 = *(char ***)a1;
  v4 = *(char ***)(a1 + 8);
  v15 = &v9[24 * v8];
  v16 = v10 + 24;
  if (v4 == *(char ***)a1)
    goto LABEL_24;
LABEL_13:
  v17 = 0;
  do
  {
    while (1)
    {
      v18 = &v10[v17 * 8];
      *((_QWORD *)v18 - 3) = v4[v17 - 3];
      v19 = (char *)&v4[v17 - 2];
      v20 = *(_QWORD *)v19;
      *(_QWORD *)&v10[v17 * 8 - 16] = *(_QWORD *)v19;
      v21 = (uint64_t)&v10[v17 * 8 - 16];
      v22 = v4[v17 - 1];
      *((_QWORD *)v18 - 1) = v22;
      if (!v22)
        break;
      *(_QWORD *)(v20 + 16) = v21;
      v4[v17 - 3] = v19;
      *(_QWORD *)v19 = 0;
      v4[v17 - 1] = 0;
      v17 -= 3;
      if (&v4[v17] == v3)
        goto LABEL_17;
    }
    *((_QWORD *)v18 - 3) = v21;
    v17 -= 3;
  }
  while (&v4[v17] != v3);
LABEL_17:
  v23 = *(char ***)a1;
  v3 = *(char ***)(a1 + 8);
  *(_QWORD *)a1 = &v10[v17 * 8];
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v15;
  if (v3 != v23)
  {
    do
    {
      sub_23958B6B4((uint64_t)(v3 - 3), *(v3 - 2));
      v3 -= 3;
    }
    while (v3 != v23);
    v3 = v23;
  }
  if (v3)
LABEL_21:
    operator delete(v3);
  return v16;
}

char *sub_23958B3B8(_QWORD **a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_23958B4B8(a1, a2, &v15, &v14, a3);
  if (*v6)
    return (char *)*v6;
  v8 = v6;
  v9 = (char *)operator new(0x40uLL);
  *((_WORD *)v9 + 16) = *(_WORD *)a4;
  v10 = v9 + 40;
  if (*(char *)(a4 + 31) < 0)
  {
    sub_23941A7F8(v10, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)(a4 + 8);
    *((_QWORD *)v9 + 7) = *(_QWORD *)(a4 + 24);
  }
  v11 = v15;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v11;
  *v8 = (uint64_t)v9;
  v12 = (_QWORD *)**a1;
  v13 = (uint64_t *)v9;
  if (v12)
  {
    *a1 = v12;
    v13 = (uint64_t *)*v8;
  }
  sub_2394213B8(a1[1], v13);
  a1[2] = (_QWORD *)((char *)a1[2] + 1);
  return v9;
}

void sub_23958B4A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_23958B4B8(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int16 *)a2 + 16), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((unsigned __int16 *)v10 + 16) < v16)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(unsigned __int16 *)(v18 + 32);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((unsigned __int16 *)v13 + 16))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(unsigned __int16 *)(v22 + 32);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t *sub_23958B668(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 63) < 0)
      operator delete(*(void **)(v2 + 40));
    operator delete((void *)v2);
  }
  return a1;
}

void sub_23958B6B4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_23958B6B4(a1, *(_QWORD *)a2);
    sub_23958B6B4(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void sub_23958B714(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t ***v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *i;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;

  v5 = (uint64_t **)a1;
  if (a1[2])
  {
    v6 = (uint64_t *)*a1;
    v8 = (uint64_t ***)(a1 + 1);
    v7 = a1[1];
    *a1 = a1 + 1;
    *(_QWORD *)(v7 + 16) = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    v27 = (uint64_t)a1;
    v29 = v9;
    if (!v9)
      goto LABEL_49;
    v10 = (uint64_t *)v9[2];
    if (v10)
    {
      v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        *v10 = 0;
        while (1)
        {
          v26 = (uint64_t *)v10[1];
          if (!v26)
            break;
          do
          {
            v10 = v26;
            v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
      }
      else
      {
        for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
        {
          do
          {
            v10 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    v28 = v10;
    if (a2 == a3)
    {
      v22 = a1;
      sub_23958B6B4((uint64_t)a1, (char *)v9);
      if (!v10)
        goto LABEL_50;
      goto LABEL_46;
    }
    v12 = a2;
    while (1)
    {
      *((_WORD *)v9 + 16) = *((_WORD *)v12 + 16);
      std::string::operator=((std::string *)(v9 + 5), (const std::string *)(v12 + 5));
      v13 = v29;
      v14 = *v8;
      v15 = v5 + 1;
      v16 = v5 + 1;
      if (!*v8)
        break;
      do
      {
        while (1)
        {
          v15 = v14;
          if (*((unsigned __int16 *)v29 + 16) >= *((unsigned __int16 *)v14 + 16))
            break;
          v14 = (uint64_t **)*v14;
          v16 = v15;
          if (!*v15)
            goto LABEL_18;
        }
        v14 = (uint64_t **)v14[1];
      }
      while (v14);
      v16 = v15 + 1;
      *v29 = 0;
      v29[1] = 0;
      v29[2] = (uint64_t)v15;
      v15[1] = v29;
      v17 = (uint64_t *)**v5;
      if (v17)
        goto LABEL_19;
LABEL_20:
      sub_2394213B8(v5[1], v13);
      v5[2] = (uint64_t *)((char *)v5[2] + 1);
      v9 = v28;
      v29 = v28;
      if (v28)
      {
        v10 = (uint64_t *)v28[2];
        if (v10)
        {
          v18 = (uint64_t *)*v10;
          if ((uint64_t *)*v10 == v28)
          {
            *v10 = 0;
            while (1)
            {
              v21 = (uint64_t *)v10[1];
              if (!v21)
                break;
              do
              {
                v10 = v21;
                v21 = (uint64_t *)*v21;
              }
              while (v21);
            }
          }
          else
          {
            for (v10[1] = 0; v18; v18 = (uint64_t *)v10[1])
            {
              do
              {
                v10 = v18;
                v18 = (uint64_t *)*v18;
              }
              while (v18);
            }
          }
        }
        v28 = v10;
        v19 = (_QWORD *)v12[1];
        if (v19)
        {
          do
          {
LABEL_29:
            a2 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
          goto LABEL_33;
        }
      }
      else
      {
        v10 = 0;
        v19 = (_QWORD *)v12[1];
        if (v19)
          goto LABEL_29;
      }
      do
      {
        a2 = (_QWORD *)v12[2];
        v20 = *a2 == (_QWORD)v12;
        v12 = a2;
      }
      while (!v20);
LABEL_33:
      if (v9)
      {
        v12 = a2;
        if (a2 != a3)
          continue;
      }
      v22 = (_QWORD *)v27;
      sub_23958B6B4(v27, (char *)v9);
      if (!v10)
        goto LABEL_50;
LABEL_46:
      for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
        v10 = i;
      a1 = v22;
      v9 = v10;
LABEL_49:
      sub_23958B6B4((uint64_t)a1, (char *)v9);
      goto LABEL_50;
    }
LABEL_18:
    *v29 = 0;
    v29[1] = 0;
    v29[2] = (uint64_t)v15;
    *v16 = v29;
    v17 = (uint64_t *)**v5;
    if (!v17)
      goto LABEL_20;
LABEL_19:
    *v5 = v17;
    v13 = *v16;
    goto LABEL_20;
  }
LABEL_50:
  if (a2 != a3)
  {
    do
    {
      sub_23958BA40(v5, (uint64_t)(a2 + 4));
      v24 = (_QWORD *)a2[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)a2[2];
          v20 = *v25 == (_QWORD)a2;
          a2 = v25;
        }
        while (!v20);
      }
      a2 = v25;
    }
    while (v25 != a3);
  }
}

void sub_23958B9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23958B9EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23958B9EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_23958B6B4(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_23958B6B4(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

char *sub_23958BA40(uint64_t **a1, uint64_t a2)
{
  char **v4;
  char *v5;
  _BYTE *v6;
  char *v7;
  char **v8;
  uint64_t *v9;
  char *v11;

  v4 = (char **)(a1 + 1);
  v5 = (char *)operator new(0x40uLL);
  v11 = v5;
  *((_WORD *)v5 + 16) = *(_WORD *)a2;
  v6 = v5 + 40;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_23941A7F8(v6, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v5 + 7) = *(_QWORD *)(a2 + 24);
  }
  v7 = *v4;
  v8 = v4;
  if (!*v4)
  {
LABEL_9:
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = v4;
    *v8 = v5;
    v9 = (uint64_t *)**a1;
    if (!v9)
      goto LABEL_11;
LABEL_10:
    *a1 = v9;
    v5 = *v8;
    goto LABEL_11;
  }
  do
  {
    while (1)
    {
      v4 = (char **)v7;
      if (*((unsigned __int16 *)v5 + 16) >= *((unsigned __int16 *)v7 + 16))
        break;
      v7 = *(char **)v7;
      v8 = v4;
      if (!*v4)
        goto LABEL_9;
    }
    v7 = (char *)*((_QWORD *)v7 + 1);
  }
  while (v7);
  v8 = v4 + 1;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = v4;
  v4[1] = v5;
  v9 = (uint64_t *)**a1;
  if (v9)
    goto LABEL_10;
LABEL_11:
  sub_2394213B8(a1[1], (uint64_t *)v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v11;
}

void sub_23958BB50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23958B668((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ****sub_23958BB64(void ****a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int64_t v6;
  unint64_t v7;
  void ***v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  v6 = (int64_t)v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD **)a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v8 = (void ***)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_23958BC38(v3, v4, v5, v8);
  }
  return a1;
}

void sub_23958BC0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
    sub_239EC0900((void **)(v1 + 8), *(char ***)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

void ***sub_23958BC38(uint64_t a1, _QWORD *a2, _QWORD *a3, void ***a4)
{
  void ***v4;
  _QWORD *v6;
  void **v7;
  _QWORD *v8;
  char *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t **v12;
  BOOL v13;
  unsigned int v14;
  char **v15;
  char **v16;
  unsigned int v17;
  char *v18;
  _BYTE *v19;
  __int128 v20;
  void **v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  void ***v38;

  v4 = a4;
  v38 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    while (1)
    {
      v4[1] = 0;
      v7 = (void **)(v4 + 1);
      v4[2] = 0;
      *v4 = (void **)(v4 + 1);
      v8 = (_QWORD *)*v6;
      if ((_QWORD *)*v6 != v6 + 1)
        break;
LABEL_4:
      v6 += 3;
      v4 += 3;
      v38 = v4;
      if (v6 == a3)
        return v4;
    }
    while (1)
    {
      v9 = (char *)v4[1];
      v10 = (uint64_t **)(v4 + 1);
      if (*v4 != v7)
      {
        v11 = (uint64_t *)v4[1];
        v12 = (uint64_t **)(v4 + 1);
        if (v9)
        {
          do
          {
            v10 = (uint64_t **)v11;
            v11 = (uint64_t *)v11[1];
          }
          while (v11);
        }
        else
        {
          do
          {
            v10 = (uint64_t **)v12[2];
            v13 = *v10 == (uint64_t *)v12;
            v12 = v10;
          }
          while (v13);
        }
        v14 = *((unsigned __int16 *)v8 + 16);
        if (*((unsigned __int16 *)v10 + 16) >= v14)
          break;
      }
      if (v9)
        v15 = (char **)v10;
      else
        v15 = (char **)(v4 + 1);
      if (v9)
        v16 = (char **)(v10 + 1);
      else
        v16 = (char **)(v4 + 1);
      if (!*v16)
        goto LABEL_29;
LABEL_57:
      v34 = (_QWORD *)v8[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v8[2];
          v13 = *v35 == (_QWORD)v8;
          v8 = v35;
        }
        while (!v13);
      }
      v8 = v35;
      if (v35 == v6 + 1)
      {
        v4 = v38;
        goto LABEL_4;
      }
    }
    v16 = (char **)(v4 + 1);
    v15 = (char **)(v4 + 1);
    if (v9)
    {
      while (1)
      {
        while (1)
        {
          v15 = (char **)v9;
          v17 = *((unsigned __int16 *)v9 + 16);
          if (v14 >= v17)
            break;
          v9 = *v15;
          v16 = v15;
          if (!*v15)
            goto LABEL_29;
        }
        if (v17 >= v14)
          goto LABEL_57;
        v9 = v15[1];
        if (!v9)
        {
          v16 = v15 + 1;
          break;
        }
      }
    }
LABEL_29:
    v18 = (char *)operator new(0x40uLL);
    *((_WORD *)v18 + 16) = *((_WORD *)v8 + 16);
    v19 = v18 + 40;
    if (*((char *)v8 + 63) < 0)
    {
      sub_23941A7F8(v19, (void *)v8[5], v8[6]);
    }
    else
    {
      v20 = *(_OWORD *)(v8 + 5);
      *((_QWORD *)v18 + 7) = v8[7];
      *(_OWORD *)v19 = v20;
    }
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v15;
    *v16 = v18;
    v21 = (void **)**v4;
    if (v21)
    {
      *v4 = v21;
      v18 = *v16;
    }
    v22 = (char *)*v7;
    v13 = v18 == *v7;
    v18[24] = v13;
    if (!v13)
    {
      do
      {
        v23 = *((_QWORD *)v18 + 2);
        if (*(_BYTE *)(v23 + 24))
          break;
        v24 = *(char **)(v23 + 16);
        v25 = *(_QWORD *)v24;
        if (*(_QWORD *)v24 == v23)
        {
          v28 = *((_QWORD *)v24 + 1);
          if (!v28 || (v29 = *(unsigned __int8 *)(v28 + 24), v26 = (_BYTE *)(v28 + 24), v29))
          {
            if (*(char **)v23 == v18)
            {
              *(_BYTE *)(v23 + 24) = 1;
              v24[24] = 0;
              v32 = *(_QWORD *)(v23 + 8);
              *(_QWORD *)v24 = v32;
              if (v32)
                goto LABEL_49;
            }
            else
            {
              v30 = *(uint64_t **)(v23 + 8);
              v31 = *v30;
              *(_QWORD *)(v23 + 8) = *v30;
              if (v31)
              {
                *(_QWORD *)(v31 + 16) = v23;
                v24 = *(char **)(v23 + 16);
              }
              v30[2] = (uint64_t)v24;
              *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v30;
              *v30 = v23;
              *(_QWORD *)(v23 + 16) = v30;
              v24 = (char *)v30[2];
              v23 = *(_QWORD *)v24;
              *((_BYTE *)v30 + 24) = 1;
              v24[24] = 0;
              v32 = *(_QWORD *)(v23 + 8);
              *(_QWORD *)v24 = v32;
              if (v32)
LABEL_49:
                *(_QWORD *)(v32 + 16) = v24;
            }
            *(_QWORD *)(v23 + 16) = *((_QWORD *)v24 + 2);
            *(_QWORD *)(*((_QWORD *)v24 + 2) + 8 * (**((_QWORD **)v24 + 2) != (_QWORD)v24)) = v23;
            *(_QWORD *)(v23 + 8) = v24;
LABEL_55:
            *((_QWORD *)v24 + 2) = v23;
            break;
          }
        }
        else if (!v25 || (v27 = *(unsigned __int8 *)(v25 + 24), v26 = (_BYTE *)(v25 + 24), v27))
        {
          if (*(char **)v23 == v18)
          {
            v36 = *((_QWORD *)v18 + 1);
            *(_QWORD *)v23 = v36;
            if (v36)
            {
              *(_QWORD *)(v36 + 16) = v23;
              v24 = *(char **)(v23 + 16);
            }
            *((_QWORD *)v18 + 2) = v24;
            *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v18;
            *((_QWORD *)v18 + 1) = v23;
            *(_QWORD *)(v23 + 16) = v18;
            v24 = (char *)*((_QWORD *)v18 + 2);
            v18[24] = 1;
            v24[24] = 0;
            v23 = *((_QWORD *)v24 + 1);
            v33 = *(char **)v23;
            *((_QWORD *)v24 + 1) = *(_QWORD *)v23;
            if (v33)
LABEL_53:
              *((_QWORD *)v33 + 2) = v24;
          }
          else
          {
            *(_BYTE *)(v23 + 24) = 1;
            v24[24] = 0;
            v23 = *((_QWORD *)v24 + 1);
            v33 = *(char **)v23;
            *((_QWORD *)v24 + 1) = *(_QWORD *)v23;
            if (v33)
              goto LABEL_53;
          }
          *(_QWORD *)(v23 + 16) = *((_QWORD *)v24 + 2);
          *(_QWORD *)(*((_QWORD *)v24 + 2) + 8 * (**((_QWORD **)v24 + 2) != (_QWORD)v24)) = v23;
          *(_QWORD *)v23 = v24;
          goto LABEL_55;
        }
        *(_BYTE *)(v23 + 24) = 1;
        v18 = v24;
        v24[24] = v24 == v22;
        *v26 = 1;
      }
      while (v24 != v22);
    }
    v4[2] = (void **)((char *)v4[2] + 1);
    goto LABEL_57;
  }
  return v4;
}

void sub_23958BFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;

  operator delete(v10);
  sub_23958B6B4(v9, *(char **)(v9 + 8));
  sub_23958C028((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23958C028(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      do
      {
        v4 = v2 - 24;
        sub_23958B6B4(v2 - 24, *(char **)(v2 - 16));
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void sub_23958C08C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23958C0B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (*sub_23958C0CC())()
{
  return sub_23958C0CC;
}

uint64_t sub_23958C0D8(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  void *v11;
  void *v12;
  int v13;
  unsigned __int8 *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *__s1[2];
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v8 = *v3;
      if (!*v3)
        goto LABEL_5;
      if (*(char *)(v8 + 31) < 0)
      {
        sub_23941A7F8(__s1, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v20 = *(_QWORD *)(v8 + 24);
        *(_OWORD *)__s1 = v9;
      }
      v10 = HIBYTE(v20);
      if (v20 >= 0)
        v11 = (void *)HIBYTE(v20);
      else
        v11 = __s1[1];
      v12 = (void *)a3[23];
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = (void *)*((_QWORD *)a3 + 1);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = a3;
        else
          v14 = *(unsigned __int8 **)a3;
        if (v20 < 0)
        {
          v17 = __s1[0];
          if (memcmp(__s1[0], v14, (size_t)__s1[1]))
          {
            operator delete(v17);
            goto LABEL_5;
          }
LABEL_27:
          v7 = *(_QWORD *)(*v3 + 32) == (_QWORD)sub_239589F64;
          if ((v10 & 0x80) == 0)
          {
LABEL_4:
            if (v7)
              return v6;
            goto LABEL_5;
          }
          goto LABEL_28;
        }
        if (!HIBYTE(v20))
          goto LABEL_27;
        v15 = __s1;
        v16 = HIBYTE(v20);
        while (*(unsigned __int8 *)v15 == *v14)
        {
          v15 = (void **)((char *)v15 + 1);
          ++v14;
          if (!--v16)
            goto LABEL_27;
        }
      }
      v7 = 0;
      if ((v20 & 0x8000000000000000) == 0)
        goto LABEL_4;
LABEL_28:
      operator delete(__s1[0]);
      if (v7)
        return v6;
LABEL_5:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_23958C234(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  void *v11;
  void *v12;
  int v13;
  unsigned __int8 *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *__s1[2];
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v8 = *v3;
      if (!*v3)
        goto LABEL_5;
      if (*(char *)(v8 + 31) < 0)
      {
        sub_23941A7F8(__s1, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v20 = *(_QWORD *)(v8 + 24);
        *(_OWORD *)__s1 = v9;
      }
      v10 = HIBYTE(v20);
      if (v20 >= 0)
        v11 = (void *)HIBYTE(v20);
      else
        v11 = __s1[1];
      v12 = (void *)a3[23];
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = (void *)*((_QWORD *)a3 + 1);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = a3;
        else
          v14 = *(unsigned __int8 **)a3;
        if (v20 < 0)
        {
          v17 = __s1[0];
          if (memcmp(__s1[0], v14, (size_t)__s1[1]))
          {
            operator delete(v17);
            goto LABEL_5;
          }
LABEL_27:
          v7 = *(_QWORD *)(*v3 + 32) == (_QWORD)sub_23958C0CC;
          if ((v10 & 0x80) == 0)
          {
LABEL_4:
            if (v7)
              return v6;
            goto LABEL_5;
          }
          goto LABEL_28;
        }
        if (!HIBYTE(v20))
          goto LABEL_27;
        v15 = __s1;
        v16 = HIBYTE(v20);
        while (*(unsigned __int8 *)v15 == *v14)
        {
          v15 = (void **)((char *)v15 + 1);
          ++v14;
          if (!--v16)
            goto LABEL_27;
        }
      }
      v7 = 0;
      if ((v20 & 0x8000000000000000) == 0)
        goto LABEL_4;
LABEL_28:
      operator delete(__s1[0]);
      if (v7)
        return v6;
LABEL_5:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

void sub_23958C390(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADF208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23958C3A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADF208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23958C3D0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    result = MEMORY[0x23B83E2F8](result, 0x1000C8052888210);
    *(_QWORD *)(a1 + 40) = 0;
  }
  return result;
}

char *sub_23958C410(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  __int16 v17;
  __int128 v18;
  char *v19;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_239418A80();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  v24 = v8;
  v25 = v8;
  v28 = &v7[48 * v6];
  *(_DWORD *)v8 = *(_DWORD *)a2;
  *((_WORD *)v8 + 2) = *(_WORD *)(a2 + 4);
  v9 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v8 + 1) = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v8 + 2) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (uint64_t)&v7[48 * v3 + 24];
  if (*(char *)(a2 + 47) < 0)
  {
    sub_23941A7F8((_BYTE *)v12, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    v8 = v24;
    v13 = v25 + 48;
    v26 = v25 + 48;
    v14 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
LABEL_20:
      v19 = v15;
      goto LABEL_21;
    }
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 + 40);
    v13 = v8 + 48;
    v26 = v8 + 48;
    v14 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
      goto LABEL_20;
  }
  do
  {
    v16 = *((_DWORD *)v15 - 12);
    v15 -= 48;
    v17 = *((_WORD *)v15 + 2);
    *((_DWORD *)v8 - 12) = v16;
    v8 -= 48;
    *((_WORD *)v8 + 2) = v17;
    *(_OWORD *)(v8 + 8) = *(_OWORD *)(v15 + 8);
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
    v18 = *(_OWORD *)(v15 + 24);
    *((_QWORD *)v8 + 5) = *((_QWORD *)v15 + 5);
    *(_OWORD *)(v8 + 24) = v18;
    *((_QWORD *)v15 + 4) = 0;
    *((_QWORD *)v15 + 5) = 0;
    *((_QWORD *)v15 + 3) = 0;
  }
  while (v15 != v14);
  v19 = *a1;
  v15 = a1[1];
  v13 = v26;
LABEL_21:
  *a1 = v8;
  a1[1] = v13;
  a1[2] = v28;
  if (v15 == v19)
  {
    if (v15)
      goto LABEL_23;
    return v13;
  }
  do
  {
    v27 = v15 - 48;
    if (*(v15 - 1) < 0)
    {
      operator delete(*((void **)v15 - 3));
      v21 = (std::__shared_weak_count *)*((_QWORD *)v15 - 4);
      if (!v21)
        goto LABEL_25;
    }
    else
    {
      v21 = (std::__shared_weak_count *)*((_QWORD *)v15 - 4);
      if (!v21)
        goto LABEL_25;
    }
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
LABEL_25:
    v15 -= 48;
  }
  while (v27 != v19);
  v15 = v19;
  if (!v19)
    return v13;
LABEL_23:
  operator delete(v15);
  return v13;
}

void sub_23958C674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  if (*v2)
    sub_239EC0960();
  sub_23958C694((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23958C694(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      v4 = *(std::__shared_weak_count **)(i - 32);
      if (!v4)
        continue;
    }
    else
    {
      v4 = *(std::__shared_weak_count **)(i - 32);
      if (!v4)
        continue;
    }
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t **sub_23958C73C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x40uLL);
    v24 = v23 + 32;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_23941A7F8(v24, *(void **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *(_OWORD *)v24 = v26;
    }
    *((_WORD *)v23 + 28) = 0;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v11;
    *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    sub_2394213B8(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_23958C8C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_23958C8D8(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char *v26;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_239418A80();
    v7 = operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  v24 = v8;
  v25 = v8;
  v26 = &v7[48 * v6];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(&v7[48 * v3], *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  }
  v9 = (uint64_t *)&v7[48 * v3];
  v9[4] = 0;
  v9[3] = (uint64_t)(v9 + 4);
  v9 += 3;
  v9[2] = 0;
  sub_23958CB58(v9, *(int **)(a2 + 24), (int *)(a2 + 32));
  v10 = v8 + 48;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v26;
  }
  else
  {
    v13 = 0;
    do
    {
      while (1)
      {
        v14 = &v8[v13];
        v15 = &v11[v13];
        v16 = *(_OWORD *)&v11[v13 - 48];
        *((_QWORD *)v14 - 4) = *(_QWORD *)&v11[v13 - 32];
        *((_OWORD *)v14 - 3) = v16;
        *((_QWORD *)v15 - 5) = 0;
        *((_QWORD *)v15 - 4) = 0;
        *((_QWORD *)v15 - 6) = 0;
        *((_QWORD *)v14 - 3) = *(_QWORD *)&v11[v13 - 24];
        v17 = &v11[v13 - 16];
        v18 = *(_QWORD *)v17;
        *(_QWORD *)&v8[v13 - 16] = *(_QWORD *)v17;
        v19 = (uint64_t)&v8[v13 - 16];
        v20 = *(_QWORD *)&v11[v13 - 8];
        *((_QWORD *)v14 - 1) = v20;
        if (!v20)
          break;
        *(_QWORD *)(v18 + 16) = v19;
        *((_QWORD *)v15 - 3) = v17;
        *(_QWORD *)v17 = 0;
        *(_QWORD *)&v11[v13 - 8] = 0;
        v13 -= 48;
        if (&v11[v13] == v12)
          goto LABEL_19;
      }
      *((_QWORD *)v14 - 3) = v19;
      v13 -= 48;
    }
    while (&v11[v13] != v12);
LABEL_19:
    v21 = (char *)*a1;
    v11 = (char *)a1[1];
    *a1 = &v24[v13];
    a1[1] = v10;
    a1[2] = v26;
    if (v11 != v21)
    {
      v22 = (uint64_t)(v11 - 24);
      do
      {
        sub_239421038(v22, *(_QWORD **)(v22 + 8));
        if (*(char *)(v22 - 1) < 0)
          operator delete(*(void **)(v22 - 24));
        v22 -= 48;
      }
      while ((char *)(v22 + 24) != v21);
      v11 = v21;
    }
  }
  if (v11)
    operator delete(v11);
  return v25 + 48;
}

void sub_23958CB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23958CE14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23958CB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  va_list va;

  va_start(va, a2);
  sub_239421038(v3, *v4);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  sub_23958CE14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23958CB58(uint64_t *result, int *a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  int *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_23958CC64(v7, v8, v18, &v17, v6 + 7);
      if (*result)
      {
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v11 + 28) = *(_QWORD *)(v6 + 7);
        v12 = v18[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v14 = (uint64_t *)*v10;
        }
        else
        {
          v14 = v11;
        }
        result = sub_2394213B8((uint64_t *)v7[1], v14);
        ++v7[2];
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (int *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *sub_23958CC64(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 28);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 7))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 28);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t sub_23958CE14(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    sub_239421038(i - 24, *(_QWORD **)(i - 16));
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_23958CE84(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  void *v11;
  void *v12;
  int v13;
  unsigned __int8 *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *__s1[2];
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v8 = *v3;
      if (!*v3)
        goto LABEL_5;
      if (*(char *)(v8 + 31) < 0)
      {
        sub_23941A7F8(__s1, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v20 = *(_QWORD *)(v8 + 24);
        *(_OWORD *)__s1 = v9;
      }
      v10 = HIBYTE(v20);
      if (v20 >= 0)
        v11 = (void *)HIBYTE(v20);
      else
        v11 = __s1[1];
      v12 = (void *)a3[23];
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = (void *)*((_QWORD *)a3 + 1);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = a3;
        else
          v14 = *(unsigned __int8 **)a3;
        if (v20 < 0)
        {
          v17 = __s1[0];
          if (memcmp(__s1[0], v14, (size_t)__s1[1]))
          {
            operator delete(v17);
            goto LABEL_5;
          }
LABEL_27:
          v7 = *(_QWORD *)(*v3 + 32) == (_QWORD)sub_23958A72C;
          if ((v10 & 0x80) == 0)
          {
LABEL_4:
            if (v7)
              return v6;
            goto LABEL_5;
          }
          goto LABEL_28;
        }
        if (!HIBYTE(v20))
          goto LABEL_27;
        v15 = __s1;
        v16 = HIBYTE(v20);
        while (*(unsigned __int8 *)v15 == *v14)
        {
          v15 = (void **)((char *)v15 + 1);
          ++v14;
          if (!--v16)
            goto LABEL_27;
        }
      }
      v7 = 0;
      if ((v20 & 0x8000000000000000) == 0)
        goto LABEL_4;
LABEL_28:
      operator delete(__s1[0]);
      if (v7)
        return v6;
LABEL_5:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_23958CFE0@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X1>, _WORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_23958D148(a1, a2, &v14);
  v15 = v14;
  if (v14)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v14;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADDB68;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v16 = v4;
  v14 = 0;
  sub_239826870((uint64_t)a3, &v15, 0);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 104))(*(_QWORD *)a3);
  v7 = v6;
  if ((v6 & 0xFFFFFF) <= 0x10000)
    v7 = 0;
  v8 = v6 & 0xFF00;
  if ((v6 & 0xFF0000) == 0)
    v8 = 0;
  a3[36] = v8 & 0xFF00 | v7;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    v13 = sub_239810708(result);
    return MEMORY[0x23B83E31C](v13, 0x1091C406A8758A4);
  }
  return result;
}

void sub_23958D0F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239546BA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23958D108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_239546BA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23958D12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_239546BA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23958D148@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _BYTE v6[8];
  _OWORD v7[2];
  _QWORD v8[6];

  v8[5] = &off_250ADDAC8;
  sub_23981EC40(a1, a2, (uint64_t)v6);
  v4 = operator new();
  *(_QWORD *)v4 = &off_250ADDAE8;
  *(_OWORD *)(v4 + 8) = v7[0];
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)v7 + 12);
  sub_239916924((__n128 *)(v4 + 40), (__n128 *)v8);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)&v8[3];
  *a3 = v4;
  return sub_239810708((uint64_t)v6);
}

void sub_23958D1F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  __n128 v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4);
  sub_239810708((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23958D220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239810708((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23958D234@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int16 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_23958D39C(a1, a2, &v14);
  v15 = v14;
  if (v14)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v14;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADECB8;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v16 = v4;
  v14 = 0;
  sub_239827CE0((uint64_t)a3, &v15, 0);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 104))(*(_QWORD *)a3);
  v7 = v6;
  if ((v6 & 0xFFFFFF) <= 0x10000)
    v7 = 0;
  v8 = v6 & 0xFF00;
  if ((v6 & 0xFF0000) == 0)
    v8 = 0;
  a3[60] = v8 & 0xFF00 | v7;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    v13 = sub_239818264(result);
    return MEMORY[0x23B83E31C](v13, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_23958D348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239581014((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23958D35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_239581014((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23958D380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_239581014((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23958D39C@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = &off_250ADEC18;
  sub_239822D48(a1, a2, (uint64_t)v6);
  v4 = operator new();
  *(_QWORD *)v4 = &off_250ADEC38;
  *(_OWORD *)(v4 + 8) = v7;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 40) = v9;
  *(_QWORD *)(v4 + 56) = v10;
  sub_239916924((__n128 *)(v4 + 64), (__n128 *)v11);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v11[3];
  *(_QWORD *)(v4 + 104) = v11[5];
  *a3 = v4;
  return sub_239818264((uint64_t)v6);
}

void sub_23958D45C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  __n128 v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4);
  sub_239818264((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23958D48C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239818264((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23958D4A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;

  LODWORD(v2) = *((unsigned __int8 *)a1 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = a1[1];
  v3 = (int)v2 - 1;
  v4 = v2;
  v5 = MEMORY[0x24BDAC740];
  while (1)
  {
    if ((int)v4 < 1)
      return 0;
    v7 = *((char *)a1 + 23) >= 0 ? (uint64_t)a1 : *a1;
    v8 = *(char *)(v7 + v4 - 1);
    if ((v8 & 0x80000000) == 0)
      break;
    v6 = __maskrune(*(char *)(v7 + v4 - 1), 0x4000uLL);
    if (!v6)
      goto LABEL_12;
LABEL_5:
    --v3;
    --v4;
    if (!v6)
      return 1;
  }
  v6 = *(_DWORD *)(v5 + 4 * v8 + 60) & 0x4000;
  if (v6)
    goto LABEL_5;
LABEL_12:
  if (v8 != 92)
    return 0;
  if (*((char *)a1 + 23) >= 0)
    v9 = *((unsigned __int8 *)a1 + 23);
  else
    v9 = *((_DWORD *)a1 + 2);
  if ((int)v4 <= v9)
  {
    v10 = 0;
    v11 = v3 - v9;
    do
    {
      if (*((char *)a1 + 23) >= 0)
        v12 = a1;
      else
        v12 = (uint64_t *)*a1;
      *((_BYTE *)v12 + v3 + v10++) = 32;
    }
    while (v11 + (_DWORD)v10);
    goto LABEL_5;
  }
  return 1;
}

uint64_t sub_23958D5CC(int a1, int a2)
{
  return (a2 & (a1 >> 31)) + a1;
}

char *sub_23958D5D8(const char *a1, float *a2, uint64_t a3)
{
  float v6;
  uint64_t v7;
  float v8;
  char *v10;

  if (!a3)
    return 0;
  v10 = 0;
  v6 = strtod(a1, &v10);
  *a2 = v6;
  if (a3 != 1)
  {
    v7 = 1;
    do
    {
      v8 = strtod(v10, &v10);
      a2[v7++] = v8;
    }
    while (a3 != v7);
  }
  return (char *)(v10 - a1);
}

uint64_t sub_23958D660(uint64_t *a1, _QWORD *a2)
{
  const char *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  const char *v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void **v17;
  const char *v18;
  size_t v19;
  int8x16_t v20;
  double v21;
  int32x4_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void **v27;
  const char *v28;
  const char *v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void **v35;
  const char *v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void **v42;
  const char *v43;
  size_t v44;
  int8x16_t v45;
  double v46;
  int32x4_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void **v52;
  const char *v53;
  const char *v54;
  size_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void **v60;
  const char *v61;
  const char *v62;
  size_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void **v68;
  const char *v69;
  const char *v70;
  size_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void **v76;
  const char *v77;
  size_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void **v83;
  const char *v84;
  size_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  size_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t *v121;
  uint64_t *v122;
  void *v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t *v132;
  uint64_t v133;
  char v134[8];
  uint64_t v135;
  int v136;
  char v137[4];
  __int128 v138;
  int v139;
  uint64_t v140;
  char v141[8];
  char v142[16];
  _BYTE v143[19];
  void *__dst[2];
  unint64_t v145;
  void *v146[2];
  unint64_t v147;
  void *v148[2];
  unint64_t v149;
  void *v150[2];
  unint64_t v151;
  void *v152[2];
  unint64_t v153;
  void *v154[2];
  unint64_t v155;
  void *v156[2];
  unint64_t v157;
  void *v158[2];
  unint64_t v159;
  void *v160[2];
  unint64_t v161;
  void *v162[2];
  unint64_t v163;
  void *v164[2];
  unint64_t v165;
  void *__p[2];
  unint64_t v167;
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 16) = 20;
  v130 = 0x7A7755505F7C3ELL;
  v4 = sub_23958E3FC((char *)&v130);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v145 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v145) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = v146;
  v129 = 0x1E132E352A095ALL;
  v11 = sub_23958E3FC((char *)&v129);
  v12 = strlen(v11);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v16 = operator new(v14 + 1);
    v146[1] = v13;
    v147 = v15 | 0x8000000000000000;
    v146[0] = v16;
    v10 = (void **)v16;
    goto LABEL_16;
  }
  HIBYTE(v147) = v12;
  if (v12)
LABEL_16:
    memmove(v10, v11, (size_t)v13);
  *((_BYTE *)v13 + (_QWORD)v10) = 0;
  v17 = v148;
  v128 = 0x565B7D7A715712;
  v18 = sub_23958E3FC((char *)&v128);
  v19 = strlen(v18);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v23 = (void *)v19;
  if (v19 >= 0x17)
  {
    v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v24 = v19 | 7;
    v25 = v24 + 1;
    v26 = operator new(v24 + 1);
    v148[1] = v23;
    v149 = v25 | 0x8000000000000000;
    v148[0] = v26;
    v17 = (void **)v26;
    goto LABEL_24;
  }
  HIBYTE(v149) = v19;
  if (v19)
LABEL_24:
    memmove(v17, v18, (size_t)v23);
  *((_BYTE *)v23 + (_QWORD)v17) = 0;
  v27 = v150;
  *(_OWORD *)v143 = xmmword_239EC745E;
  strcpy(&v143[15], "?24");
  sub_23958E450((uint64_t)v143, (int32x4_t)xmmword_239EC745E, v20, v21, v22);
  v29 = v28;
  v30 = strlen(v28);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v31 = (void *)v30;
  if (v30 >= 0x17)
  {
    v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v32 = v30 | 7;
    v33 = v32 + 1;
    v34 = operator new(v32 + 1);
    v150[1] = v31;
    v151 = v33 | 0x8000000000000000;
    v150[0] = v34;
    v27 = (void **)v34;
    goto LABEL_32;
  }
  HIBYTE(v151) = v30;
  if (v30)
LABEL_32:
    memmove(v27, v29, (size_t)v31);
  *((_BYTE *)v31 + (_QWORD)v27) = 0;
  v35 = v152;
  strcpy(v142, "*iEDLCNODIO");
  v36 = sub_23958E4C8((uint64_t)v142);
  v37 = strlen(v36);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v38 = (void *)v37;
  if (v37 >= 0x17)
  {
    v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v39 = v37 | 7;
    v40 = v39 + 1;
    v41 = operator new(v39 + 1);
    v152[1] = v38;
    v153 = v40 | 0x8000000000000000;
    v152[0] = v41;
    v35 = (void **)v41;
    goto LABEL_40;
  }
  HIBYTE(v153) = v37;
  if (v37)
LABEL_40:
    memmove(v35, v36, (size_t)v38);
  *((_BYTE *)v38 + (_QWORD)v35) = 0;
  v42 = v154;
  v140 = 0x3A203D36273D1A53;
  strcpy(v141, "'*");
  v43 = (const char *)sub_23958E518((uint64_t)&v140);
  v44 = strlen(v43);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v48 = (void *)v44;
  if (v44 >= 0x17)
  {
    v49 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v49 = v44 | 7;
    v50 = v49 + 1;
    v51 = operator new(v49 + 1);
    v154[1] = v48;
    v155 = v50 | 0x8000000000000000;
    v154[0] = v51;
    v42 = (void **)v51;
    goto LABEL_48;
  }
  HIBYTE(v155) = v44;
  if (v44)
LABEL_48:
    memmove(v42, v43, (size_t)v48);
  *((_BYTE *)v48 + (_QWORD)v42) = 0;
  v52 = v156;
  v138 = xmmword_239EC7471;
  v139 = 3685923;
  sub_23958E55C((uint64_t)&v138, (int32x4_t)xmmword_239EC7471, v45, v46, v47);
  v54 = v53;
  v55 = strlen(v53);
  if (v55 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v56 = (void *)v55;
  if (v55 >= 0x17)
  {
    v57 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17)
      v57 = v55 | 7;
    v58 = v57 + 1;
    v59 = operator new(v57 + 1);
    v156[1] = v56;
    v157 = v58 | 0x8000000000000000;
    v156[0] = v59;
    v52 = (void **)v59;
    goto LABEL_56;
  }
  HIBYTE(v157) = v55;
  if (v55)
LABEL_56:
    memmove(v52, v54, (size_t)v56);
  *((_BYTE *)v56 + (_QWORD)v52) = 0;
  v60 = v158;
  v135 = 0x576675626A664407;
  strcpy(v137, "t_");
  v136 = 1801617262;
  sub_23958E5E0((uint64_t)&v135);
  v62 = v61;
  v63 = strlen(v61);
  if (v63 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v64 = (void *)v63;
  if (v63 >= 0x17)
  {
    v65 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17)
      v65 = v63 | 7;
    v66 = v65 + 1;
    v67 = operator new(v65 + 1);
    v158[1] = v64;
    v159 = v66 | 0x8000000000000000;
    v158[0] = v67;
    v60 = (void **)v67;
    goto LABEL_64;
  }
  HIBYTE(v159) = v63;
  if (v63)
LABEL_64:
    memmove(v60, v62, (size_t)v64);
  *((_BYTE *)v64 + (_QWORD)v60) = 0;
  v68 = v160;
  v133 = 0x13023343C301251;
  strcpy(v134, "8)4=\"\b");
  sub_23958E5E0((uint64_t)&v133);
  v70 = v69;
  v71 = strlen(v69);
  if (v71 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v72 = (void *)v71;
  if (v71 >= 0x17)
  {
    v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v73 = v71 | 7;
    v74 = v73 + 1;
    v75 = operator new(v73 + 1);
    v160[1] = v72;
    v161 = v74 | 0x8000000000000000;
    v160[0] = v75;
    v68 = (void **)v75;
    goto LABEL_72;
  }
  HIBYTE(v161) = v71;
  if (v71)
LABEL_72:
    memmove(v68, v70, (size_t)v72);
  *((_BYTE *)v72 + (_QWORD)v68) = 0;
  v76 = v162;
  v127 = 0x724E4658457D2ALL;
  v77 = sub_23958E3FC((char *)&v127);
  v78 = strlen(v77);
  if (v78 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v79 = (void *)v78;
  if (v78 >= 0x17)
  {
    v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v78 | 7) != 0x17)
      v80 = v78 | 7;
    v81 = v80 + 1;
    v82 = operator new(v80 + 1);
    v162[1] = v79;
    v163 = v81 | 0x8000000000000000;
    v162[0] = v82;
    v76 = (void **)v82;
    goto LABEL_80;
  }
  HIBYTE(v163) = v78;
  if (v78)
LABEL_80:
    memmove(v76, v77, (size_t)v79);
  *((_BYTE *)v79 + (_QWORD)v76) = 0;
  v83 = v164;
  v126 = 0x1E232B35281047;
  v84 = sub_23958E3FC((char *)&v126);
  v85 = strlen(v84);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v86 = (void *)v85;
  if (v85 >= 0x17)
  {
    v87 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v87 = v85 | 7;
    v88 = v87 + 1;
    v89 = operator new(v87 + 1);
    v164[1] = v86;
    v165 = v88 | 0x8000000000000000;
    v164[0] = v89;
    v83 = (void **)v89;
    goto LABEL_88;
  }
  HIBYTE(v165) = v85;
  if (v85)
LABEL_88:
    memmove(v83, v84, (size_t)v86);
  *((_BYTE *)v86 + (_QWORD)v83) = 0;
  v125 = 0x39070F110C3463;
  v90 = sub_23958E3FC((char *)&v125);
  v91 = strlen(v90);
  if (v91 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v92 = (void *)v91;
  if (v91 >= 0x17)
  {
    v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17)
      v94 = v91 | 7;
    v95 = v94 + 1;
    v93 = operator new(v94 + 1);
    __p[1] = v92;
    v167 = v95 | 0x8000000000000000;
    __p[0] = v93;
    goto LABEL_96;
  }
  HIBYTE(v167) = v91;
  v93 = __p;
  if (v91)
LABEL_96:
    memmove(v93, v90, (size_t)v92);
  *((_BYTE *)v92 + (_QWORD)v93) = 0;
  sub_23941B674(&v131, (uint64_t)__dst, 0xCuLL);
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v165) & 0x80000000) == 0)
    {
LABEL_99:
      if ((SHIBYTE(v163) & 0x80000000) == 0)
        goto LABEL_100;
      goto LABEL_113;
    }
  }
  else if ((SHIBYTE(v165) & 0x80000000) == 0)
  {
    goto LABEL_99;
  }
  operator delete(v164[0]);
  if ((SHIBYTE(v163) & 0x80000000) == 0)
  {
LABEL_100:
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_101;
    goto LABEL_114;
  }
LABEL_113:
  operator delete(v162[0]);
  if ((SHIBYTE(v161) & 0x80000000) == 0)
  {
LABEL_101:
    if ((SHIBYTE(v159) & 0x80000000) == 0)
      goto LABEL_102;
    goto LABEL_115;
  }
LABEL_114:
  operator delete(v160[0]);
  if ((SHIBYTE(v159) & 0x80000000) == 0)
  {
LABEL_102:
    if ((SHIBYTE(v157) & 0x80000000) == 0)
      goto LABEL_103;
    goto LABEL_116;
  }
LABEL_115:
  operator delete(v158[0]);
  if ((SHIBYTE(v157) & 0x80000000) == 0)
  {
LABEL_103:
    if ((SHIBYTE(v155) & 0x80000000) == 0)
      goto LABEL_104;
    goto LABEL_117;
  }
LABEL_116:
  operator delete(v156[0]);
  if ((SHIBYTE(v155) & 0x80000000) == 0)
  {
LABEL_104:
    if ((SHIBYTE(v153) & 0x80000000) == 0)
      goto LABEL_105;
    goto LABEL_118;
  }
LABEL_117:
  operator delete(v154[0]);
  if ((SHIBYTE(v153) & 0x80000000) == 0)
  {
LABEL_105:
    if ((SHIBYTE(v151) & 0x80000000) == 0)
      goto LABEL_106;
    goto LABEL_119;
  }
LABEL_118:
  operator delete(v152[0]);
  if ((SHIBYTE(v151) & 0x80000000) == 0)
  {
LABEL_106:
    if ((SHIBYTE(v149) & 0x80000000) == 0)
      goto LABEL_107;
    goto LABEL_120;
  }
LABEL_119:
  operator delete(v150[0]);
  if ((SHIBYTE(v149) & 0x80000000) == 0)
  {
LABEL_107:
    if ((SHIBYTE(v147) & 0x80000000) == 0)
      goto LABEL_108;
    goto LABEL_121;
  }
LABEL_120:
  operator delete(v148[0]);
  if ((SHIBYTE(v147) & 0x80000000) == 0)
  {
LABEL_108:
    if ((SHIBYTE(v145) & 0x80000000) == 0)
      goto LABEL_109;
    goto LABEL_122;
  }
LABEL_121:
  operator delete(v146[0]);
  if (SHIBYTE(v145) < 0)
  {
LABEL_122:
    operator delete(__dst[0]);
    v96 = (uint64_t *)v131;
    v97 = v132;
    if (v131 == v132)
      goto LABEL_148;
    while (1)
    {
LABEL_127:
      v98 = *((char *)v96 + 23);
      if (v98 >= 0)
        v99 = (uint64_t)v96;
      else
        v99 = *v96;
      if (v98 >= 0)
        v100 = *((unsigned __int8 *)v96 + 23);
      else
        v100 = v96[1];
      sub_239458500(a2, v99, v100);
      v101 = *((unsigned __int8 *)v96 + 23);
      if ((v101 & 0x80u) == 0)
        v102 = *((unsigned __int8 *)v96 + 23);
      else
        v102 = v96[1];
      v103 = *((unsigned __int8 *)v132 - 1);
      v104 = (char)v103;
      if ((v103 & 0x80u) != 0)
        v103 = *(v132 - 2);
      if (v102 != v103)
        goto LABEL_125;
      v105 = v104 >= 0 ? (char *)(v132 - 3) : (char *)*(v132 - 3);
      if ((v101 & 0x80) == 0)
        break;
      if (memcmp((const void *)*v96, v105, v96[1]))
        goto LABEL_125;
LABEL_126:
      v96 += 3;
      if (v96 == v97)
        goto LABEL_148;
    }
    if (!*((_BYTE *)v96 + 23))
      goto LABEL_126;
    v106 = 0;
    while (*((unsigned __int8 *)v96 + v106) == v105[v106])
    {
      if (v101 == ++v106)
        goto LABEL_126;
    }
LABEL_125:
    sub_239458500(a2, (uint64_t)",", 1);
    goto LABEL_126;
  }
LABEL_109:
  v96 = (uint64_t *)v131;
  v97 = v132;
  if (v131 != v132)
    goto LABEL_127;
LABEL_148:
  sub_239458500(a2, (uint64_t)"\n", 1);
  v107 = *a1;
  v108 = a1[1];
  if (*a1 != v108)
  {
    do
    {
      v109 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v109, (uint64_t)",", 1);
      v110 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v110, (uint64_t)",", 1);
      v111 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v111, (uint64_t)",", 1);
      v112 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v112, (uint64_t)",", 1);
      v113 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v113, (uint64_t)",", 1);
      v114 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v114, (uint64_t)",", 1);
      v115 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v115, (uint64_t)",", 1);
      v116 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v116, (uint64_t)",", 1);
      v117 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v117, (uint64_t)",", 1);
      v118 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v118, (uint64_t)",", 1);
      v119 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v119, (uint64_t)",", 1);
      v120 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v120, (uint64_t)"\n", 1);
      v107 += 40;
    }
    while (v107 != v108);
  }
  v121 = (uint64_t *)v131;
  if (v131)
  {
    v122 = v132;
    v123 = v131;
    if (v132 != v131)
    {
      do
      {
        if (*((char *)v122 - 1) < 0)
          operator delete((void *)*(v122 - 3));
        v122 -= 3;
      }
      while (v122 != v121);
      v123 = v131;
    }
    v132 = v121;
    operator delete(v123);
  }
  return 1;
}

void sub_23958E248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_23941B08C((void **)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_23958E3FC(char *a1)
{
  char v1;
  _BYTE *result;
  char v3;

  v1 = *a1;
  a1[2] ^= *a1;
  a1[3] ^= v1;
  a1[4] ^= v1;
  a1[5] ^= v1;
  a1[6] ^= v1;
  a1[7] = 0;
  v3 = a1[1];
  result = a1 + 1;
  *result = v1 ^ v3;
  return result;
}

int8x16_t sub_23958E450(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

_BYTE *sub_23958E4C8(uint64_t a1)
{
  uint64_t v1;
  int8x16_t v2;
  _BYTE *result;

  v1 = *(_QWORD *)a1;
  v2.i64[0] = *(_QWORD *)a1;
  v2.i8[1] = *(_BYTE *)(a1 + 8);
  v2.i64[1] = v2.i64[0];
  *(int8x8_t *)v2.i8 = veor_s8(*(int8x8_t *)a1, vqtbl1_s8(v2, (int8x8_t)1));
  *(int8x8_t *)(a1 + 1) = vext_s8(*(int8x8_t *)v2.i8, *(int8x8_t *)v2.i8, 1uLL);
  result = (_BYTE *)(a1 + 1);
  result[8] ^= v1;
  result[9] ^= v1;
  result[10] = 0;
  return result;
}

uint64_t sub_23958E518(uint64_t a1)
{
  uint64_t v1;
  int8x16_t v2;
  uint64_t result;

  v1 = *(_QWORD *)a1;
  v2.i64[0] = *(_QWORD *)a1;
  v2.i8[1] = *(_BYTE *)(a1 + 8);
  v2.i64[1] = v2.i64[0];
  *(int8x8_t *)v2.i8 = veor_s8(*(int8x8_t *)a1, vqtbl1_s8(v2, (int8x8_t)1));
  *(int8x8_t *)(a1 + 1) = vext_s8(*(int8x8_t *)v2.i8, *(int8x8_t *)v2.i8, 1uLL);
  result = a1 + 1;
  *(_BYTE *)(result + 8) ^= v1;
  *(_BYTE *)(result + 9) = 0;
  return result;
}

int8x16_t sub_23958E55C(uint64_t a1, int32x4_t a2, int8x16_t a3, double a4, int32x4_t a5)
{
  unsigned __int8 v5;
  int8x16_t result;

  v5 = *(_BYTE *)a1;
  a2.i32[0] = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 17) ^= *(_BYTE *)a1;
  *(_BYTE *)(a1 + 18) ^= v5;
  *(_BYTE *)(a1 + 19) = 0;
  a3.i64[0] = *(_QWORD *)(a1 + 1);
  a3.i8[8] = v5;
  a5.i8[0] = v5;
  a5.i8[1] = *(_BYTE *)(a1 + 9);
  a5.i8[2] = *(_BYTE *)(a1 + 10);
  a5.i8[3] = *(_BYTE *)(a1 + 11);
  a3.i8[15] = *(_BYTE *)(a1 + 16);
  result = veorq_s8(vqtbl1q_s8((int8x16_t)vzip1q_s32(a5, a2), (int8x16_t)xmmword_239EC65C0), vqtbl1q_s8(a3, (int8x16_t)xmmword_239EC65D0));
  *(int8x16_t *)(a1 + 1) = result;
  return result;
}

int8x8_t sub_23958E5E0(uint64_t a1)
{
  uint8x8_t v1;
  int8x16_t v2;
  uint64_t v3;
  unsigned int v4;
  int16x8_t v5;
  int8x8_t result;

  v1 = *(uint8x8_t *)a1;
  v2.i64[0] = *(_QWORD *)a1;
  v2.i8[1] = *(_BYTE *)(a1 + 8);
  v2.i64[1] = v2.i64[0];
  *(int8x8_t *)v2.i8 = veor_s8(*(int8x8_t *)a1, vqtbl1_s8(v2, (int8x8_t)1));
  *(int8x8_t *)(a1 + 1) = vext_s8(*(int8x8_t *)v2.i8, *(int8x8_t *)v2.i8, 1uLL);
  v3 = a1 + 1;
  v4 = v1.u8[0];
  v1.i32[0] = *(_DWORD *)(v3 + 8);
  v5 = (int16x8_t)vmovl_u8(v1);
  *(int8x8_t *)v5.i8 = veor_s8((int8x8_t)vdup_n_s16(v4), *(int8x8_t *)v5.i8);
  result = vmovn_s16(v5);
  *(_DWORD *)(v3 + 8) = result.i32[0];
  *(_WORD *)(v3 + 12) = (v4 ^ *(_BYTE *)(v3 + 12));
  return result;
}

uint64_t sub_23958E63C(uint64_t *a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  size_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  char *v78;
  char *v79;
  int64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  uint64_t v95;
  char *v96;
  int64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  _DWORD *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  int v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  _OWORD *v125;
  char *v126;
  uint64_t v127;
  __int128 v128;
  int v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _BYTE *v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  _OWORD *v143;
  char *v144;
  uint64_t v145;
  __int128 v146;
  int v147;
  char *v148;
  uint64_t v149;
  char *v150;
  int64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  __int128 v165;
  int v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  int64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  __int128 v184;
  int v185;
  char *v186;
  int64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  _BYTE *v191;
  _DWORD *v192;
  unint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  unint64_t v197;
  __int128 v198;
  char *v199;
  char *v200;
  unint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  unint64_t v205;
  __int128 v206;
  char *v207;
  char *v208;
  unint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  unint64_t v213;
  __int128 v214;
  char *v215;
  char *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _OWORD *v221;
  char *v222;
  uint64_t v223;
  __int128 v224;
  int v225;
  char *v226;
  char v227;
  char *v228;
  char v229;
  char *v230;
  char v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  _QWORD *v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  void **v251;
  void *v252;
  void **v254;
  void *v257[3];
  void *v258[2];
  char v259;
  void *v260[3];
  void *v261[2];
  char v262;
  void *v263[4];
  void *v264[3];
  void *v265[2];
  char v266;
  void *v267[2];
  char v268;
  void *v269[2];
  char v270;
  void *v271[4];
  void *__p[2];
  void *v273;
  int v274;
  void *v275;
  char *v276;
  char *v277;
  void *v278;
  char *v279;
  char *v280;
  void *v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  char *v294;
  char *v295;
  char *v296;
  char *v297;
  char *v298;
  char *v299;
  char *v300;
  char *v301;

  v4 = *a1;
  v5 = a1[1];
  v299 = 0;
  v300 = 0;
  v301 = 0;
  v296 = 0;
  v297 = 0;
  v298 = 0;
  v293 = 0;
  v294 = 0;
  v295 = 0;
  v290 = 0;
  v291 = 0;
  v292 = 0;
  v287 = 0;
  v288 = 0;
  v289 = 0;
  v284 = 0;
  v285 = 0;
  v286 = 0;
  v281 = 0;
  v282 = 0;
  v283 = 0;
  v278 = 0;
  v279 = 0;
  v280 = 0;
  v275 = 0;
  v276 = 0;
  v277 = 0;
  v274 = *((unsigned __int8 *)a1 + 24);
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3);
  if (v5 != v4)
  {
    if (v5 - v4 < 0)
      sub_2394189F8();
    v299 = (char *)operator new(0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3));
    v300 = v299;
    v301 = &v299[0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3)];
    v296 = (char *)operator new(0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3));
    v297 = v296;
    v298 = &v296[0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3)];
    v293 = (char *)operator new(0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3));
    v294 = v293;
    v295 = &v293[0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3)];
    if (v6 >> 62)
      goto LABEL_371;
    v287 = (char *)operator new(0x3333333333333334 * ((v5 - v4) >> 3));
    v288 = v287;
    v289 = &v287[0x3333333333333334 * ((v5 - v4) >> 3)];
  }
  v7 = 0x6666666666666667 * ((v5 - v4) >> 3);
  if (v5 == v4)
  {
    v8 = 0;
    v9 = 0;
    if ((a3 & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    if (v7 >> 62)
      goto LABEL_371;
    v8 = (char *)operator new(0x999999999999999CLL * ((v5 - v4) >> 3));
    v9 = &v8[0x999999999999999CLL * ((v5 - v4) >> 3)];
    v275 = v8;
    v276 = v8;
    v277 = v9;
    if ((a3 & 1) != 0)
      goto LABEL_20;
  }
  if (v5 != v4)
  {
    if (v6 >> 62)
      goto LABEL_371;
    v290 = (char *)operator new(0x3333333333333334 * ((v5 - v4) >> 3));
    v291 = v290;
    v292 = &v290[0x3333333333333334 * ((v5 - v4) >> 3)];
    v284 = (char *)operator new(0x3333333333333334 * ((v5 - v4) >> 3));
    v285 = v284;
    v286 = &v284[0x3333333333333334 * ((v5 - v4) >> 3)];
    v281 = operator new(0x3333333333333334 * ((v5 - v4) >> 3));
    v282 = (char *)v281;
    v283 = (char *)v281 + 0x3333333333333334 * ((v5 - v4) >> 3);
  }
  if (v5 != v4)
  {
    if ((0x999999999999999ALL * ((v5 - v4) >> 3)) >> 62)
      goto LABEL_371;
    v278 = operator new(0x6666666666666668 * ((v5 - v4) >> 3));
    v279 = (char *)v278;
    v280 = (char *)v278 + 0x6666666666666668 * ((v5 - v4) >> 3);
  }
  if (v7 <= (v9 - v8) >> 2)
    goto LABEL_20;
  if (v7 >> 62)
LABEL_371:
    sub_2394189F8();
  v275 = operator new(0x999999999999999CLL * ((v5 - v4) >> 3));
  v276 = (char *)v275;
  v277 = (char *)v275 - 0x6666666666666664 * ((v5 - v4) >> 3);
  if (v8)
  {
    operator delete(v8);
    v4 = *a1;
    v5 = a1[1];
  }
LABEL_20:
  while (v4 != v5)
  {
    v11 = v300;
    if (v300 < v301)
    {
      *v300 = *(_BYTE *)v4;
      v12 = (uint64_t)(v11 + 1);
      goto LABEL_42;
    }
    v13 = v299;
    v14 = v300 - v299;
    v15 = v300 - v299 + 1;
    if (v15 < 0)
      goto LABEL_367;
    v16 = v301 - v299;
    if (2 * (v301 - v299) > (unint64_t)v15)
      v15 = 2 * v16;
    if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)operator new(v17);
      v19 = &v18[v14];
      v18[v14] = *(_BYTE *)v4;
      v12 = (uint64_t)&v18[v14 + 1];
      if (v11 == v13)
        goto LABEL_40;
    }
    else
    {
      v18 = 0;
      v19 = (char *)(v300 - v299);
      *(_BYTE *)v14 = *(_BYTE *)v4;
      v12 = v14 + 1;
      if (v11 == v13)
      {
LABEL_40:
        v299 = v19;
        v301 = &v18[v17];
        if (!v11)
          goto LABEL_42;
LABEL_41:
        operator delete(v11);
        goto LABEL_42;
      }
    }
    if (v14 < 8 || (unint64_t)(v13 - v18) < 0x20)
      goto LABEL_296;
    if (v14 >= 0x20)
    {
      v20 = v14 & 0xFFFFFFFFFFFFFFE0;
      v195 = &v18[v14 - 16];
      v196 = v11 - 16;
      v197 = v14 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v198 = *(_OWORD *)v196;
        *((_OWORD *)v195 - 1) = *((_OWORD *)v196 - 1);
        *(_OWORD *)v195 = v198;
        v195 -= 32;
        v196 -= 32;
        v197 -= 32;
      }
      while (v197);
      if (v14 == v20)
        goto LABEL_298;
      if ((v14 & 0x18) == 0)
      {
        v19 -= v20;
        v11 -= v20;
LABEL_296:
        v226 = v19 - 1;
        do
        {
          v227 = *--v11;
          *v226-- = v227;
        }
        while (v11 != v13);
        goto LABEL_298;
      }
    }
    else
    {
      v20 = 0;
    }
    v19 -= v14 & 0xFFFFFFFFFFFFFFF8;
    v199 = &v18[&v11[-v20] - v13 - 8];
    v200 = &v11[-v20 - 8];
    v201 = v20 - (v14 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v202 = *(_QWORD *)v200;
      v200 -= 8;
      *(_QWORD *)v199 = v202;
      v199 -= 8;
      v201 += 8;
    }
    while (v201);
    v11 -= v14 & 0xFFFFFFFFFFFFFFF8;
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_296;
LABEL_298:
    v11 = v299;
    v299 = v18;
    v301 = &v18[v17];
    if (v11)
      goto LABEL_41;
LABEL_42:
    v300 = (char *)v12;
    v21 = v297;
    if (v297 < v298)
    {
      *v297 = *(_BYTE *)(v4 + 1);
      v22 = (uint64_t)(v21 + 1);
      goto LABEL_59;
    }
    v23 = v296;
    v24 = v297 - v296;
    v25 = v297 - v296 + 1;
    if (v25 < 0)
      goto LABEL_367;
    v26 = v298 - v296;
    if (2 * (v298 - v296) > (unint64_t)v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v28 = (char *)operator new(v27);
      v29 = &v28[v24];
      v28[v24] = *(_BYTE *)(v4 + 1);
      v22 = (uint64_t)&v28[v24 + 1];
      if (v21 == v23)
        goto LABEL_57;
    }
    else
    {
      v28 = 0;
      v29 = (char *)(v297 - v296);
      *(_BYTE *)v24 = *(_BYTE *)(v4 + 1);
      v22 = v24 + 1;
      if (v21 == v23)
      {
LABEL_57:
        v296 = v29;
        v298 = &v28[v27];
        if (!v21)
          goto LABEL_59;
LABEL_58:
        operator delete(v21);
        goto LABEL_59;
      }
    }
    if (v24 < 8 || (unint64_t)(v23 - v28) < 0x20)
      goto LABEL_301;
    if (v24 >= 0x20)
    {
      v30 = v24 & 0xFFFFFFFFFFFFFFE0;
      v203 = &v28[v24 - 16];
      v204 = v21 - 16;
      v205 = v24 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v206 = *(_OWORD *)v204;
        *((_OWORD *)v203 - 1) = *((_OWORD *)v204 - 1);
        *(_OWORD *)v203 = v206;
        v203 -= 32;
        v204 -= 32;
        v205 -= 32;
      }
      while (v205);
      if (v24 == v30)
        goto LABEL_303;
      if ((v24 & 0x18) == 0)
      {
        v29 -= v30;
        v21 -= v30;
LABEL_301:
        v228 = v29 - 1;
        do
        {
          v229 = *--v21;
          *v228-- = v229;
        }
        while (v21 != v23);
        goto LABEL_303;
      }
    }
    else
    {
      v30 = 0;
    }
    v29 -= v24 & 0xFFFFFFFFFFFFFFF8;
    v207 = &v28[&v21[-v30] - v23 - 8];
    v208 = &v21[-v30 - 8];
    v209 = v30 - (v24 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v210 = *(_QWORD *)v208;
      v208 -= 8;
      *(_QWORD *)v207 = v210;
      v207 -= 8;
      v209 += 8;
    }
    while (v209);
    v21 -= v24 & 0xFFFFFFFFFFFFFFF8;
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_301;
LABEL_303:
    v21 = v296;
    v296 = v28;
    v298 = &v28[v27];
    if (v21)
      goto LABEL_58;
LABEL_59:
    v297 = (char *)v22;
    v31 = v294;
    if (v294 < v295)
    {
      *v294 = *(_BYTE *)(v4 + 2);
      v32 = (uint64_t)(v31 + 1);
      goto LABEL_76;
    }
    v33 = v293;
    v34 = v294 - v293;
    v35 = v294 - v293 + 1;
    if (v35 < 0)
LABEL_367:
      sub_2394189F8();
    v36 = v295 - v293;
    if (2 * (v295 - v293) > (unint64_t)v35)
      v35 = 2 * v36;
    if (v36 >= 0x3FFFFFFFFFFFFFFFLL)
      v37 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      v38 = (char *)operator new(v37);
      v39 = &v38[v34];
      v38[v34] = *(_BYTE *)(v4 + 2);
      v32 = (uint64_t)&v38[v34 + 1];
      if (v31 == v33)
        goto LABEL_74;
    }
    else
    {
      v38 = 0;
      v39 = (char *)(v294 - v293);
      *(_BYTE *)v34 = *(_BYTE *)(v4 + 2);
      v32 = v34 + 1;
      if (v31 == v33)
      {
LABEL_74:
        v293 = v39;
        v295 = &v38[v37];
        if (!v31)
          goto LABEL_76;
LABEL_75:
        operator delete(v31);
        goto LABEL_76;
      }
    }
    if (v34 < 8 || (unint64_t)(v33 - v38) < 0x20)
      goto LABEL_306;
    if (v34 >= 0x20)
    {
      v40 = v34 & 0xFFFFFFFFFFFFFFE0;
      v211 = &v38[v34 - 16];
      v212 = v31 - 16;
      v213 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v214 = *(_OWORD *)v212;
        *((_OWORD *)v211 - 1) = *((_OWORD *)v212 - 1);
        *(_OWORD *)v211 = v214;
        v211 -= 32;
        v212 -= 32;
        v213 -= 32;
      }
      while (v213);
      if (v34 == v40)
        goto LABEL_308;
      if ((v34 & 0x18) == 0)
      {
        v39 -= v40;
        v31 -= v40;
LABEL_306:
        v230 = v39 - 1;
        do
        {
          v231 = *--v31;
          *v230-- = v231;
        }
        while (v31 != v33);
        goto LABEL_308;
      }
    }
    else
    {
      v40 = 0;
    }
    v39 -= v34 & 0xFFFFFFFFFFFFFFF8;
    v215 = &v38[&v31[-v40] - v33 - 8];
    v216 = &v31[-v40 - 8];
    v217 = v40 - (v34 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v218 = *(_QWORD *)v216;
      v216 -= 8;
      *(_QWORD *)v215 = v218;
      v215 -= 8;
      v217 += 8;
    }
    while (v217);
    v31 -= v34 & 0xFFFFFFFFFFFFFFF8;
    if (v34 != (v34 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_306;
LABEL_308:
    v31 = v293;
    v293 = v38;
    v295 = &v38[v37];
    if (v31)
      goto LABEL_75;
LABEL_76:
    v294 = (char *)v32;
    v41 = v288;
    if (v288 < v289)
    {
      *(_DWORD *)v288 = *(_DWORD *)(v4 + 8);
      v42 = (uint64_t)(v41 + 4);
      goto LABEL_97;
    }
    v43 = v287;
    v44 = (v288 - v287) >> 2;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 62)
      goto LABEL_368;
    v46 = v289 - v287;
    if ((v289 - v287) >> 1 > v45)
      v45 = v46 >> 1;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
      v47 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    if (v47)
    {
      if (v47 >> 62)
        goto LABEL_362;
      v48 = operator new(4 * v47);
      v49 = &v48[4 * v44];
      *(_DWORD *)v49 = *(_DWORD *)(v4 + 8);
      v42 = (uint64_t)(v49 + 4);
      if (v41 == v43)
        goto LABEL_95;
LABEL_89:
      v50 = v41 - 4 - v43;
      if (v50 < 0x2C)
        goto LABEL_374;
      if ((unint64_t)(v43 - v48) < 0x20)
        goto LABEL_374;
      v51 = (v50 >> 2) + 1;
      v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
      v53 = &v41[-v52];
      v49 -= v52;
      v54 = &v48[4 * v44 - 16];
      v55 = v41 - 16;
      v56 = v51 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v57 = *(_OWORD *)v55;
        *(v54 - 1) = *((_OWORD *)v55 - 1);
        *v54 = v57;
        v54 -= 2;
        v55 -= 32;
        v56 -= 8;
      }
      while (v56);
      v41 = v53;
      if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_374:
        do
        {
          v58 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *((_DWORD *)v49 - 1) = v58;
          v49 -= 4;
        }
        while (v41 != v43);
      }
      goto LABEL_95;
    }
    v48 = 0;
    v49 = (char *)(4 * v44);
    *(_DWORD *)(4 * v44) = *(_DWORD *)(v4 + 8);
    v42 = 4 * v44 + 4;
    if (v41 != v43)
      goto LABEL_89;
LABEL_95:
    v287 = v49;
    v289 = &v48[4 * v47];
    if (v43)
      operator delete(v43);
LABEL_97:
    v288 = (char *)v42;
    v60 = v276;
    v59 = v277;
    if (v276 < v277)
    {
      *(_DWORD *)v276 = *(_DWORD *)(v4 + 28);
      v61 = v60 + 4;
      goto LABEL_118;
    }
    v62 = (char *)v275;
    v63 = v276 - (_BYTE *)v275;
    v64 = (v276 - (_BYTE *)v275) >> 2;
    v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 62)
      goto LABEL_368;
    if ((v277 - (_BYTE *)v275) >> 1 > v65)
      v65 = (v277 - (_BYTE *)v275) >> 1;
    if ((unint64_t)(v277 - (_BYTE *)v275) >= 0x7FFFFFFFFFFFFFFCLL)
      v66 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v66 = v65;
    if (v66)
    {
      if (v66 >> 62)
        goto LABEL_362;
      v67 = (char *)operator new(4 * v66);
      v68 = &v67[4 * v64];
      *(_DWORD *)v68 = *(_DWORD *)(v4 + 28);
      v61 = v68 + 4;
      if (v60 == v62)
        goto LABEL_116;
LABEL_110:
      v69 = v60 - 4 - v62;
      if (v69 < 0x2C)
        goto LABEL_375;
      if ((unint64_t)(v60 - &v67[v63]) < 0x20)
        goto LABEL_375;
      v70 = (v69 >> 2) + 1;
      v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
      v72 = &v60[-v71];
      v68 -= v71;
      v73 = &v67[4 * v64 - 16];
      v74 = v60 - 16;
      v75 = v70 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v76 = *(_OWORD *)v74;
        *((_OWORD *)v73 - 1) = *((_OWORD *)v74 - 1);
        *(_OWORD *)v73 = v76;
        v73 -= 32;
        v74 -= 32;
        v75 -= 8;
      }
      while (v75);
      v60 = v72;
      if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_375:
        do
        {
          v77 = *((_DWORD *)v60 - 1);
          v60 -= 4;
          *((_DWORD *)v68 - 1) = v77;
          v68 -= 4;
        }
        while (v60 != v62);
      }
      goto LABEL_116;
    }
    v67 = 0;
    v68 = (char *)(4 * v64);
    *(_DWORD *)(4 * v64) = *(_DWORD *)(v4 + 28);
    v61 = (char *)(4 * v64 + 4);
    if (v60 != v62)
      goto LABEL_110;
LABEL_116:
    v59 = &v67[4 * v66];
    v275 = v68;
    v277 = v59;
    if (v62)
      operator delete(v62);
LABEL_118:
    v276 = v61;
    if (v61 < v59)
    {
      *(_DWORD *)v61 = *(_DWORD *)(v4 + 32);
      v78 = v61 + 4;
      goto LABEL_141;
    }
    v79 = (char *)v275;
    v80 = v61 - (_BYTE *)v275;
    v81 = (v61 - (_BYTE *)v275) >> 2;
    v82 = v81 + 1;
    if ((unint64_t)(v81 + 1) >> 62)
      goto LABEL_368;
    if ((v59 - (_BYTE *)v275) >> 1 > v82)
      v82 = (v59 - (_BYTE *)v275) >> 1;
    if ((unint64_t)(v59 - (_BYTE *)v275) >= 0x7FFFFFFFFFFFFFFCLL)
      v83 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v83 = v82;
    if (v83)
    {
      if (v83 >> 62)
        goto LABEL_362;
      v84 = operator new(4 * v83);
      v85 = &v84[4 * v81];
      *(_DWORD *)v85 = *(_DWORD *)(v4 + 32);
      v78 = v85 + 4;
      if (v61 == v79)
        goto LABEL_139;
    }
    else
    {
      v84 = 0;
      v85 = (char *)(4 * v81);
      *(_DWORD *)(4 * v81) = *(_DWORD *)(v4 + 32);
      v78 = (char *)(4 * v81 + 4);
      if (v61 == v79)
        goto LABEL_139;
    }
    v86 = v61 - 4 - v79;
    if (v86 < 0x2C)
    {
      v87 = v61;
      goto LABEL_138;
    }
    if ((unint64_t)(v61 - v84 - v80) < 0x20)
    {
      v87 = v61;
      do
      {
LABEL_138:
        v94 = *((_DWORD *)v87 - 1);
        v87 -= 4;
        *((_DWORD *)v85 - 1) = v94;
        v85 -= 4;
      }
      while (v87 != v79);
      goto LABEL_139;
    }
    v88 = (v86 >> 2) + 1;
    v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
    v87 = &v61[-v89];
    v85 -= v89;
    v90 = &v84[4 * v81 - 16];
    v91 = (__int128 *)(v61 - 16);
    v92 = v88 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v93 = *v91;
      *(v90 - 1) = *(v91 - 1);
      *v90 = v93;
      v90 -= 2;
      v91 -= 2;
      v92 -= 8;
    }
    while (v92);
    if (v88 != (v88 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_138;
LABEL_139:
    v59 = &v84[4 * v83];
    v275 = v85;
    v277 = v59;
    if (v79)
      operator delete(v79);
LABEL_141:
    v276 = v78;
    if (v78 < v59)
    {
      *(_DWORD *)v78 = *(_DWORD *)(v4 + 36);
      v95 = (uint64_t)(v78 + 4);
      goto LABEL_164;
    }
    v96 = (char *)v275;
    v97 = v78 - (_BYTE *)v275;
    v98 = (v78 - (_BYTE *)v275) >> 2;
    v99 = v98 + 1;
    if ((unint64_t)(v98 + 1) >> 62)
      goto LABEL_368;
    if ((v59 - (_BYTE *)v275) >> 1 > v99)
      v99 = (v59 - (_BYTE *)v275) >> 1;
    if ((unint64_t)(v59 - (_BYTE *)v275) >= 0x7FFFFFFFFFFFFFFCLL)
      v100 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v100 = v99;
    if (v100)
    {
      if (v100 >> 62)
        goto LABEL_362;
      v101 = operator new(4 * v100);
      v102 = &v101[4 * v98];
      *v102 = *(_DWORD *)(v4 + 36);
      v95 = (uint64_t)(v102 + 1);
      if (v78 == v96)
        goto LABEL_162;
    }
    else
    {
      v101 = 0;
      v102 = (_DWORD *)(4 * v98);
      *(_DWORD *)(4 * v98) = *(_DWORD *)(v4 + 36);
      v95 = 4 * v98 + 4;
      if (v78 == v96)
        goto LABEL_162;
    }
    v103 = v78 - 4 - v96;
    if (v103 < 0x2C)
    {
      v104 = v78;
      goto LABEL_161;
    }
    if ((unint64_t)(v78 - v101 - v97) < 0x20)
    {
      v104 = v78;
      do
      {
LABEL_161:
        v111 = *((_DWORD *)v104 - 1);
        v104 -= 4;
        *--v102 = v111;
      }
      while (v104 != v96);
      goto LABEL_162;
    }
    v105 = (v103 >> 2) + 1;
    v106 = 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
    v104 = &v78[-v106];
    v102 = (_DWORD *)((char *)v102 - v106);
    v107 = &v101[4 * v98 - 16];
    v108 = v78 - 16;
    v109 = v105 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v110 = *(_OWORD *)v108;
      *(v107 - 1) = *((_OWORD *)v108 - 1);
      *v107 = v110;
      v107 -= 2;
      v108 -= 32;
      v109 -= 8;
    }
    while (v109);
    if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_161;
LABEL_162:
    v275 = v102;
    v277 = &v101[4 * v100];
    if (v96)
      operator delete(v96);
LABEL_164:
    v276 = (char *)v95;
    if ((a3 & 1) != 0)
      goto LABEL_24;
    v112 = v291;
    if (v291 < v292)
    {
      *(_DWORD *)v291 = *(_DWORD *)(v4 + 4);
      v113 = (uint64_t)(v112 + 4);
      goto LABEL_186;
    }
    v114 = v290;
    v115 = (v291 - v290) >> 2;
    v116 = v115 + 1;
    if ((unint64_t)(v115 + 1) >> 62)
      goto LABEL_368;
    v117 = v292 - v290;
    if ((v292 - v290) >> 1 > v116)
      v116 = v117 >> 1;
    if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
      v118 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v118 = v116;
    if (v118)
    {
      if (v118 >> 62)
        goto LABEL_362;
      v119 = operator new(4 * v118);
      v120 = &v119[4 * v115];
      *(_DWORD *)v120 = *(_DWORD *)(v4 + 4);
      v113 = (uint64_t)(v120 + 4);
      if (v112 == v114)
        goto LABEL_184;
LABEL_178:
      v121 = v112 - 4 - v114;
      if (v121 < 0x2C)
        goto LABEL_376;
      if ((unint64_t)(v114 - v119) < 0x20)
        goto LABEL_376;
      v122 = (v121 >> 2) + 1;
      v123 = 4 * (v122 & 0x7FFFFFFFFFFFFFF8);
      v124 = &v112[-v123];
      v120 -= v123;
      v125 = &v119[4 * v115 - 16];
      v126 = v112 - 16;
      v127 = v122 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v128 = *(_OWORD *)v126;
        *(v125 - 1) = *((_OWORD *)v126 - 1);
        *v125 = v128;
        v125 -= 2;
        v126 -= 32;
        v127 -= 8;
      }
      while (v127);
      v112 = v124;
      if (v122 != (v122 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_376:
        do
        {
          v129 = *((_DWORD *)v112 - 1);
          v112 -= 4;
          *((_DWORD *)v120 - 1) = v129;
          v120 -= 4;
        }
        while (v112 != v114);
      }
      goto LABEL_184;
    }
    v119 = 0;
    v120 = (char *)(4 * v115);
    *(_DWORD *)(4 * v115) = *(_DWORD *)(v4 + 4);
    v113 = 4 * v115 + 4;
    if (v112 != v114)
      goto LABEL_178;
LABEL_184:
    v290 = v120;
    v292 = &v119[4 * v118];
    if (v114)
      operator delete(v114);
LABEL_186:
    v291 = (char *)v113;
    v130 = v285;
    if (v285 < v286)
    {
      *(_DWORD *)v285 = *(_DWORD *)(v4 + 12);
      v131 = (uint64_t)(v130 + 4);
      goto LABEL_207;
    }
    v132 = v284;
    v133 = (v285 - v284) >> 2;
    v134 = v133 + 1;
    if ((unint64_t)(v133 + 1) >> 62)
      goto LABEL_368;
    v135 = v286 - v284;
    if ((v286 - v284) >> 1 > v134)
      v134 = v135 >> 1;
    if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
      v136 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v136 = v134;
    if (v136)
    {
      if (v136 >> 62)
        goto LABEL_362;
      v137 = operator new(4 * v136);
      v138 = &v137[4 * v133];
      *(_DWORD *)v138 = *(_DWORD *)(v4 + 12);
      v131 = (uint64_t)(v138 + 4);
      if (v130 == v132)
        goto LABEL_205;
LABEL_199:
      v139 = v130 - 4 - v132;
      if (v139 < 0x2C)
        goto LABEL_377;
      if ((unint64_t)(v132 - v137) < 0x20)
        goto LABEL_377;
      v140 = (v139 >> 2) + 1;
      v141 = 4 * (v140 & 0x7FFFFFFFFFFFFFF8);
      v142 = &v130[-v141];
      v138 -= v141;
      v143 = &v137[4 * v133 - 16];
      v144 = v130 - 16;
      v145 = v140 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v146 = *(_OWORD *)v144;
        *(v143 - 1) = *((_OWORD *)v144 - 1);
        *v143 = v146;
        v143 -= 2;
        v144 -= 32;
        v145 -= 8;
      }
      while (v145);
      v130 = v142;
      if (v140 != (v140 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_377:
        do
        {
          v147 = *((_DWORD *)v130 - 1);
          v130 -= 4;
          *((_DWORD *)v138 - 1) = v147;
          v138 -= 4;
        }
        while (v130 != v132);
      }
      goto LABEL_205;
    }
    v137 = 0;
    v138 = (char *)(4 * v133);
    *(_DWORD *)(4 * v133) = *(_DWORD *)(v4 + 12);
    v131 = 4 * v133 + 4;
    if (v130 != v132)
      goto LABEL_199;
LABEL_205:
    v284 = v138;
    v286 = &v137[4 * v136];
    if (v132)
      operator delete(v132);
LABEL_207:
    v285 = (char *)v131;
    v148 = v282;
    if (v282 < v283)
    {
      *(_DWORD *)v282 = *(_DWORD *)(v4 + 16);
      v149 = (uint64_t)(v148 + 4);
      goto LABEL_228;
    }
    v150 = (char *)v281;
    v151 = v282 - (_BYTE *)v281;
    v152 = (v282 - (_BYTE *)v281) >> 2;
    v153 = v152 + 1;
    if ((unint64_t)(v152 + 1) >> 62)
      goto LABEL_368;
    v154 = v283 - (_BYTE *)v281;
    if ((v283 - (_BYTE *)v281) >> 1 > v153)
      v153 = v154 >> 1;
    if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
      v155 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v155 = v153;
    if (v155)
    {
      if (v155 >> 62)
        goto LABEL_362;
      v156 = (char *)operator new(4 * v155);
      v157 = &v156[4 * v152];
      *(_DWORD *)v157 = *(_DWORD *)(v4 + 16);
      v149 = (uint64_t)(v157 + 4);
      if (v148 == v150)
        goto LABEL_226;
LABEL_220:
      v158 = v148 - 4 - v150;
      if (v158 < 0x2C)
        goto LABEL_378;
      if ((unint64_t)(v148 - &v156[v151]) < 0x20)
        goto LABEL_378;
      v159 = (v158 >> 2) + 1;
      v160 = 4 * (v159 & 0x7FFFFFFFFFFFFFF8);
      v161 = &v148[-v160];
      v157 -= v160;
      v162 = &v156[4 * v152 - 16];
      v163 = v148 - 16;
      v164 = v159 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v165 = *(_OWORD *)v163;
        *((_OWORD *)v162 - 1) = *((_OWORD *)v163 - 1);
        *(_OWORD *)v162 = v165;
        v162 -= 32;
        v163 -= 32;
        v164 -= 8;
      }
      while (v164);
      v148 = v161;
      if (v159 != (v159 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_378:
        do
        {
          v166 = *((_DWORD *)v148 - 1);
          v148 -= 4;
          *((_DWORD *)v157 - 1) = v166;
          v157 -= 4;
        }
        while (v148 != v150);
      }
      goto LABEL_226;
    }
    v156 = 0;
    v157 = (char *)(4 * v152);
    *(_DWORD *)(4 * v152) = *(_DWORD *)(v4 + 16);
    v149 = 4 * v152 + 4;
    if (v148 != v150)
      goto LABEL_220;
LABEL_226:
    v281 = v157;
    v283 = &v156[4 * v155];
    if (v150)
      operator delete(v150);
LABEL_228:
    v282 = (char *)v149;
    v168 = v279;
    v167 = v280;
    if (v279 < v280)
    {
      *(_DWORD *)v279 = *(_DWORD *)(v4 + 20);
      v169 = v168 + 4;
      goto LABEL_249;
    }
    v170 = (char *)v278;
    v171 = v279 - (_BYTE *)v278;
    v172 = (v279 - (_BYTE *)v278) >> 2;
    v173 = v172 + 1;
    if ((unint64_t)(v172 + 1) >> 62)
      goto LABEL_368;
    if ((v280 - (_BYTE *)v278) >> 1 > v173)
      v173 = (v280 - (_BYTE *)v278) >> 1;
    if ((unint64_t)(v280 - (_BYTE *)v278) >= 0x7FFFFFFFFFFFFFFCLL)
      v174 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v174 = v173;
    if (v174)
    {
      if (v174 >> 62)
        goto LABEL_362;
      v175 = (char *)operator new(4 * v174);
      v176 = &v175[4 * v172];
      *(_DWORD *)v176 = *(_DWORD *)(v4 + 20);
      v169 = v176 + 4;
      if (v168 == v170)
        goto LABEL_247;
LABEL_241:
      v177 = v168 - 4 - v170;
      if (v177 < 0x2C)
        goto LABEL_379;
      if ((unint64_t)(v168 - &v175[v171]) < 0x20)
        goto LABEL_379;
      v178 = (v177 >> 2) + 1;
      v179 = 4 * (v178 & 0x7FFFFFFFFFFFFFF8);
      v180 = &v168[-v179];
      v176 -= v179;
      v181 = &v175[4 * v172 - 16];
      v182 = v168 - 16;
      v183 = v178 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v184 = *(_OWORD *)v182;
        *((_OWORD *)v181 - 1) = *((_OWORD *)v182 - 1);
        *(_OWORD *)v181 = v184;
        v181 -= 32;
        v182 -= 32;
        v183 -= 8;
      }
      while (v183);
      v168 = v180;
      if (v178 != (v178 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_379:
        do
        {
          v185 = *((_DWORD *)v168 - 1);
          v168 -= 4;
          *((_DWORD *)v176 - 1) = v185;
          v176 -= 4;
        }
        while (v168 != v170);
      }
      goto LABEL_247;
    }
    v175 = 0;
    v176 = (char *)(4 * v172);
    *(_DWORD *)(4 * v172) = *(_DWORD *)(v4 + 20);
    v169 = (char *)(4 * v172 + 4);
    if (v168 != v170)
      goto LABEL_241;
LABEL_247:
    v167 = &v175[4 * v174];
    v278 = v176;
    v280 = v167;
    if (v170)
      operator delete(v170);
LABEL_249:
    v279 = v169;
    if (v169 >= v167)
    {
      v186 = (char *)v278;
      v187 = v169 - (_BYTE *)v278;
      v188 = (v169 - (_BYTE *)v278) >> 2;
      v189 = v188 + 1;
      if ((unint64_t)(v188 + 1) >> 62)
LABEL_368:
        sub_2394189F8();
      if ((v167 - (_BYTE *)v278) >> 1 > v189)
        v189 = (v167 - (_BYTE *)v278) >> 1;
      if ((unint64_t)(v167 - (_BYTE *)v278) >= 0x7FFFFFFFFFFFFFFCLL)
        v190 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v190 = v189;
      if (v190)
      {
        if (v190 >> 62)
LABEL_362:
          sub_239418A80();
        v191 = operator new(4 * v190);
        v192 = &v191[4 * v188];
        *v192 = *(_DWORD *)(v4 + 24);
        v10 = (uint64_t)(v192 + 1);
        if (v169 == v186)
          goto LABEL_293;
LABEL_261:
        v193 = v169 - 4 - v186;
        if (v193 < 0x2C)
        {
          v194 = v169;
          goto LABEL_292;
        }
        if ((unint64_t)(v169 - v191 - v187) < 0x20)
        {
          v194 = v169;
          goto LABEL_292;
        }
        v219 = (v193 >> 2) + 1;
        v220 = 4 * (v219 & 0x7FFFFFFFFFFFFFF8);
        v194 = &v169[-v220];
        v192 = (_DWORD *)((char *)v192 - v220);
        v221 = &v191[4 * v188 - 16];
        v222 = v169 - 16;
        v223 = v219 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v224 = *(_OWORD *)v222;
          *(v221 - 1) = *((_OWORD *)v222 - 1);
          *v221 = v224;
          v221 -= 2;
          v222 -= 32;
          v223 -= 8;
        }
        while (v223);
        if (v219 != (v219 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_292:
            v225 = *((_DWORD *)v194 - 1);
            v194 -= 4;
            *--v192 = v225;
          }
          while (v194 != v186);
        }
      }
      else
      {
        v191 = 0;
        v192 = (_DWORD *)(4 * v188);
        *(_DWORD *)(4 * v188) = *(_DWORD *)(v4 + 24);
        v10 = 4 * v188 + 4;
        if (v169 != v186)
          goto LABEL_261;
      }
LABEL_293:
      v278 = v192;
      v280 = &v191[4 * v190];
      if (v186)
        operator delete(v186);
      goto LABEL_23;
    }
    *(_DWORD *)v169 = *(_DWORD *)(v4 + 24);
    v10 = (uint64_t)(v169 + 4);
LABEL_23:
    v279 = (char *)v10;
LABEL_24:
    v4 += 40;
  }
  sub_2396157EC((uint64_t)__p, 1);
  if (a3)
  {
    HIBYTE(v271[2]) = 19;
    strcpy((char *)v271, "depth_sensor_config");
    v232 = (_QWORD *)operator new();
    *v232 = &off_250ADF240;
    v232[1] = &v274;
    sub_23961580C((uint64_t)__p, (uint64_t)v271, (uint64_t)v232);
    v270 = 12;
    strcpy((char *)v269, "bank_indexes");
    v233 = (_QWORD *)operator new();
    *v233 = &off_250ADF270;
    v233[1] = &v299;
    sub_23961580C((uint64_t)__p, (uint64_t)v269, (uint64_t)v233);
    v268 = 12;
    strcpy((char *)v267, "spot_indexes");
    v234 = (_QWORD *)operator new();
    *v234 = &off_250ADF270;
    v234[1] = &v296;
    sub_23961580C((uint64_t)__p, (uint64_t)v267, (uint64_t)v234);
    v266 = 12;
    strcpy((char *)v265, "echo_indexes");
    v235 = (_QWORD *)operator new();
    *v235 = &off_250ADF270;
    v235[1] = &v293;
    sub_23961580C((uint64_t)__p, (uint64_t)v265, (uint64_t)v235);
    HIBYTE(v264[2]) = 11;
    strcpy((char *)v264, "confidences");
    v236 = (_QWORD *)operator new();
    *v236 = &off_250ADF2A0;
    v236[1] = &v287;
    sub_23961580C((uint64_t)__p, (uint64_t)v264, (uint64_t)v236);
    HIBYTE(v263[2]) = 17;
    strcpy((char *)v263, "camera_xyz_coords");
    v237 = (_QWORD *)operator new();
    *v237 = &off_250ADF2A0;
    v237[1] = &v275;
    sub_23961580C((uint64_t)__p, (uint64_t)v263, (uint64_t)v237);
    goto LABEL_316;
  }
  HIBYTE(v271[2]) = 19;
  strcpy((char *)v271, "depth_sensor_config");
  v238 = (_QWORD *)operator new();
  *v238 = &off_250ADF240;
  v238[1] = &v274;
  sub_23961580C((uint64_t)__p, (uint64_t)v271, (uint64_t)v238);
  v270 = 12;
  strcpy((char *)v269, "bank_indexes");
  v239 = (_QWORD *)operator new();
  *v239 = &off_250ADF270;
  v239[1] = &v299;
  sub_23961580C((uint64_t)__p, (uint64_t)v269, (uint64_t)v239);
  v268 = 12;
  strcpy((char *)v267, "spot_indexes");
  v240 = (_QWORD *)operator new();
  *v240 = &off_250ADF270;
  v240[1] = &v296;
  sub_23961580C((uint64_t)__p, (uint64_t)v267, (uint64_t)v240);
  v266 = 12;
  strcpy((char *)v265, "echo_indexes");
  v241 = (_QWORD *)operator new();
  *v241 = &off_250ADF270;
  v241[1] = &v293;
  sub_23961580C((uint64_t)__p, (uint64_t)v265, (uint64_t)v241);
  HIBYTE(v264[2]) = 19;
  strcpy((char *)v264, "euclidean_distances");
  v242 = (_QWORD *)operator new();
  *v242 = &off_250ADF2A0;
  v242[1] = &v290;
  sub_23961580C((uint64_t)__p, (uint64_t)v264, (uint64_t)v242);
  HIBYTE(v263[2]) = 11;
  strcpy((char *)v263, "confidences");
  v243 = (_QWORD *)operator new();
  *v243 = &off_250ADF2A0;
  v243[1] = &v287;
  sub_23961580C((uint64_t)__p, (uint64_t)v263, (uint64_t)v243);
  v262 = 11;
  strcpy((char *)v261, "intensities");
  v244 = (_QWORD *)operator new();
  *v244 = &off_250ADF2A0;
  v244[1] = &v284;
  sub_23961580C((uint64_t)__p, (uint64_t)v261, (uint64_t)v244);
  HIBYTE(v260[2]) = 19;
  strcpy((char *)v260, "signal_noise_ratios");
  v245 = (_QWORD *)operator new();
  *v245 = &off_250ADF2A0;
  v245[1] = &v281;
  sub_23961580C((uint64_t)__p, (uint64_t)v260, (uint64_t)v245);
  v259 = 15;
  strcpy((char *)v258, "image_xy_coords");
  v246 = (_QWORD *)operator new();
  *v246 = &off_250ADF2A0;
  v246[1] = &v278;
  sub_23961580C((uint64_t)__p, (uint64_t)v258, (uint64_t)v246);
  HIBYTE(v257[2]) = 17;
  strcpy((char *)v257, "camera_xyz_coords");
  v247 = (_QWORD *)operator new();
  *v247 = &off_250ADF2A0;
  v247[1] = &v275;
  sub_23961580C((uint64_t)__p, (uint64_t)v257, (uint64_t)v247);
  if (SHIBYTE(v257[2]) < 0)
  {
    operator delete(v257[0]);
    if ((v259 & 0x80000000) == 0)
    {
LABEL_314:
      if ((SHIBYTE(v260[2]) & 0x80000000) == 0)
        goto LABEL_315;
      goto LABEL_354;
    }
  }
  else if ((v259 & 0x80000000) == 0)
  {
    goto LABEL_314;
  }
  operator delete(v258[0]);
  if ((SHIBYTE(v260[2]) & 0x80000000) == 0)
  {
LABEL_315:
    if ((v262 & 0x80000000) == 0)
      goto LABEL_316;
    goto LABEL_355;
  }
LABEL_354:
  operator delete(v260[0]);
  if ((v262 & 0x80000000) == 0)
  {
LABEL_316:
    if ((SHIBYTE(v263[2]) & 0x80000000) == 0)
      goto LABEL_317;
    goto LABEL_356;
  }
LABEL_355:
  operator delete(v261[0]);
  if ((SHIBYTE(v263[2]) & 0x80000000) == 0)
  {
LABEL_317:
    if ((SHIBYTE(v264[2]) & 0x80000000) == 0)
      goto LABEL_318;
    goto LABEL_357;
  }
LABEL_356:
  operator delete(v263[0]);
  if ((SHIBYTE(v264[2]) & 0x80000000) == 0)
  {
LABEL_318:
    if ((v266 & 0x80000000) == 0)
      goto LABEL_319;
    goto LABEL_358;
  }
LABEL_357:
  operator delete(v264[0]);
  if ((v266 & 0x80000000) == 0)
  {
LABEL_319:
    if ((v268 & 0x80000000) == 0)
      goto LABEL_320;
    goto LABEL_359;
  }
LABEL_358:
  operator delete(v265[0]);
  if ((v268 & 0x80000000) == 0)
  {
LABEL_320:
    if ((v270 & 0x80000000) == 0)
      goto LABEL_321;
LABEL_360:
    operator delete(v269[0]);
    if ((SHIBYTE(v271[2]) & 0x80000000) == 0)
      goto LABEL_322;
    goto LABEL_361;
  }
LABEL_359:
  operator delete(v267[0]);
  if (v270 < 0)
    goto LABEL_360;
LABEL_321:
  if ((SHIBYTE(v271[2]) & 0x80000000) == 0)
    goto LABEL_322;
LABEL_361:
  operator delete(v271[0]);
LABEL_322:
  v248 = sub_2395902F0((uint64_t)__p, a2);
  v249 = v273;
  if (v273)
  {
    do
    {
      v250 = v249[5];
      if (v250)
        (*(void (**)(uint64_t))(*(_QWORD *)v250 + 8))(v250);
      v249 = (_QWORD *)*v249;
    }
    while (v249);
    v251 = (void **)v273;
    if (v273)
    {
      do
      {
        v254 = (void **)*v251;
        if (*((char *)v251 + 39) < 0)
          operator delete(v251[2]);
        operator delete(v251);
        v251 = v254;
      }
      while (v254);
    }
  }
  v252 = __p[0];
  __p[0] = 0;
  if (v252)
    operator delete(v252);
  if (v275)
  {
    v276 = (char *)v275;
    operator delete(v275);
  }
  if (v278)
  {
    v279 = (char *)v278;
    operator delete(v278);
  }
  if (v281)
  {
    v282 = (char *)v281;
    operator delete(v281);
  }
  if (v284)
  {
    v285 = v284;
    operator delete(v284);
  }
  if (v287)
  {
    v288 = v287;
    operator delete(v287);
  }
  if (v290)
  {
    v291 = v290;
    operator delete(v290);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  if (v296)
  {
    v297 = v296;
    operator delete(v296);
  }
  if (v299)
  {
    v300 = v299;
    operator delete(v299);
  }
  return v248;
}

void sub_239590018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a66;
  char a71;
  char a72;
  void *a73;
  uint64_t a74;
  void *a75;
  uint64_t a76;
  void *a77;
  uint64_t a78;
  uint64_t v78;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;

  if (a16 < 0)
  {
    operator delete(__p);
    if (a22 < 0)
    {
LABEL_5:
      operator delete(a17);
      if (a28 < 0)
      {
LABEL_8:
        operator delete(a23);
        if ((a34 & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_17;
      }
LABEL_16:
      if ((a34 & 0x80000000) == 0)
      {
LABEL_9:
        if (a40 < 0)
          goto LABEL_10;
        goto LABEL_18;
      }
LABEL_17:
      operator delete(a29);
      if (a40 < 0)
      {
LABEL_10:
        operator delete(a35);
        if ((a47 & 0x80000000) == 0)
          goto LABEL_11;
        goto LABEL_19;
      }
LABEL_18:
      if ((a47 & 0x80000000) == 0)
      {
LABEL_11:
        if (a53 < 0)
          goto LABEL_12;
        goto LABEL_20;
      }
LABEL_19:
      operator delete(a42);
      if (a53 < 0)
      {
LABEL_12:
        operator delete(a48);
        if ((a59 & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_21;
      }
LABEL_20:
      if ((a59 & 0x80000000) == 0)
      {
LABEL_13:
        if (a65 < 0)
          goto LABEL_14;
        goto LABEL_22;
      }
LABEL_21:
      operator delete(a54);
      if (a65 < 0)
      {
LABEL_14:
        operator delete(a60);
        if ((a71 & 0x80000000) == 0)
          goto LABEL_24;
LABEL_23:
        operator delete(a66);
LABEL_24:
        sub_2395905C0((uint64_t)&a72);
        if (a73)
        {
          a74 = (uint64_t)a73;
          operator delete(a73);
          v80 = a75;
          if (!a75)
          {
LABEL_26:
            v81 = a77;
            if (!a77)
              goto LABEL_27;
            goto LABEL_36;
          }
        }
        else
        {
          v80 = a75;
          if (!a75)
            goto LABEL_26;
        }
        a76 = (uint64_t)v80;
        operator delete(v80);
        v81 = a77;
        if (!a77)
        {
LABEL_27:
          v82 = *(void **)(v78 - 240);
          if (!v82)
            goto LABEL_28;
          goto LABEL_37;
        }
LABEL_36:
        a78 = (uint64_t)v81;
        operator delete(v81);
        v82 = *(void **)(v78 - 240);
        if (!v82)
        {
LABEL_28:
          v83 = *(void **)(v78 - 216);
          if (!v83)
            goto LABEL_29;
          goto LABEL_38;
        }
LABEL_37:
        *(_QWORD *)(v78 - 232) = v82;
        operator delete(v82);
        v83 = *(void **)(v78 - 216);
        if (!v83)
        {
LABEL_29:
          v84 = *(void **)(v78 - 192);
          if (!v84)
            goto LABEL_30;
          goto LABEL_39;
        }
LABEL_38:
        *(_QWORD *)(v78 - 208) = v83;
        operator delete(v83);
        v84 = *(void **)(v78 - 192);
        if (!v84)
        {
LABEL_30:
          v85 = *(void **)(v78 - 168);
          if (!v85)
            goto LABEL_31;
          goto LABEL_40;
        }
LABEL_39:
        *(_QWORD *)(v78 - 184) = v84;
        operator delete(v84);
        v85 = *(void **)(v78 - 168);
        if (!v85)
        {
LABEL_31:
          v86 = *(void **)(v78 - 144);
          if (!v86)
            goto LABEL_32;
          goto LABEL_41;
        }
LABEL_40:
        *(_QWORD *)(v78 - 160) = v85;
        operator delete(v85);
        v86 = *(void **)(v78 - 144);
        if (!v86)
        {
LABEL_32:
          v87 = *(void **)(v78 - 120);
          if (!v87)
            goto LABEL_33;
          goto LABEL_42;
        }
LABEL_41:
        *(_QWORD *)(v78 - 136) = v86;
        operator delete(v86);
        v87 = *(void **)(v78 - 120);
        if (!v87)
LABEL_33:
          _Unwind_Resume(a1);
LABEL_42:
        *(_QWORD *)(v78 - 112) = v87;
        operator delete(v87);
        _Unwind_Resume(a1);
      }
LABEL_22:
      if ((a71 & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  else if (a22 < 0)
  {
    goto LABEL_5;
  }
  if (a28 < 0)
    goto LABEL_8;
  goto LABEL_16;
}

uint64_t sub_2395902F0(uint64_t a1, _QWORD *a2)
{
  char v4;
  uint64_t **v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t **v11;
  char v12;
  uint64_t i;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  if (!*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
      std::ostream::put();
      v11 = *(uint64_t ***)(a1 + 16);
      if (v11)
      {
        v12 = 1;
        std::ostream::put();
        for (i = (uint64_t)(v11 + 2); ; i = (uint64_t)(v11 + 2))
        {
          std::ostream::write();
          std::ostream::put();
          std::ostream::put();
          if (((*(uint64_t (**)(uint64_t *, _QWORD *, _QWORD))(*v11[5] + 16))(v11[5], a2, *(unsigned __int8 *)(a1 + 40)) & 1) == 0)
          {
            v14 = sub_239458500(a2, (uint64_t)"{tag} File is not consistent when writing tag \"", 47);
            v15 = *((char *)v11 + 39);
            if (v15 >= 0)
              v16 = i;
            else
              v16 = (uint64_t)v11[2];
            if (v15 >= 0)
              v17 = *((unsigned __int8 *)v11 + 39);
            else
              v17 = (uint64_t)v11[3];
            v18 = sub_239458500(v14, v16, v17);
            sub_239458500(v18, (uint64_t)"\"\n", 2);
            v12 = 0;
          }
          v11 = (uint64_t **)*v11;
          if (!v11)
            break;
          std::ostream::put();
          std::ostream::put();
        }
        if ((v12 & 1) == 0)
          return 0;
      }
      std::ostream::put();
    }
    else if (((*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 40) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), a2, 0) & 1) == 0)
    {
LABEL_32:
      sub_239458500(a2, (uint64_t)"{tag} File is not consistent when writing root array \n", 54);
      return 0;
    }
    return 1;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    v19 = 1;
    if (((*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 40) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), a2, 1) & 1) != 0)return v19;
    goto LABEL_32;
  }
  std::ostream::put();
  if (*(_QWORD *)(a1 + 24) >> 31)
    return 0;
  v4 = 1;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v5 = *(uint64_t ***)(a1 + 16);
  if (v5)
  {
    v4 = 1;
    do
    {
      sub_2395955F0((uint64_t)(v5 + 2), (uint64_t)a2, *(unsigned __int8 *)(a1 + 40));
      if (((*(uint64_t (**)(uint64_t *, _QWORD *, _QWORD))(*v5[5] + 16))(v5[5], a2, *(unsigned __int8 *)(a1 + 40)) & 1) == 0)
      {
        v6 = sub_239458500(a2, (uint64_t)"{tag} File is not consistent when writing tag \"", 47);
        v7 = *((char *)v5 + 39);
        if (v7 >= 0)
          v8 = (uint64_t)(v5 + 2);
        else
          v8 = (uint64_t)v5[2];
        if (v7 >= 0)
          v9 = *((unsigned __int8 *)v5 + 39);
        else
          v9 = (uint64_t)v5[3];
        v10 = sub_239458500(v6, v8, v9);
        sub_239458500(v10, (uint64_t)"\"\n", 2);
        v4 = 0;
      }
      v5 = (uint64_t **)*v5;
    }
    while (v5);
  }
  return v4 & 1;
}

uint64_t sub_2395905C0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  void **v7;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = v2[5];
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
    v4 = *(void ***)(a1 + 16);
    if (v4)
    {
      do
      {
        v7 = (void **)*v4;
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
        operator delete(v4);
        v4 = v7;
      }
      while (v7);
    }
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t sub_239590654(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void **v23;
  void *v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  void **v29;
  void *v30;
  void *v31;
  char *v32;
  char *v33;
  char *v34;
  void *v36[3];
  void *v37[2];
  char v38;
  void *__p[2];
  void *v40;
  void *v41;
  char *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;

  v44 = 0;
  v45 = 0;
  v46 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    while (1)
    {
      v5 = v45;
      if ((unint64_t)v45 >= v46)
      {
        v45 = sub_23959AE70(&v44, v3);
        v7 = v42;
        if ((unint64_t)v42 >= v43)
          goto LABEL_3;
LABEL_9:
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        v8 = *(_QWORD *)(v3 + 24);
        v9 = *(_QWORD *)(v3 + 32);
        v10 = v9 - v8;
        if (v9 != v8)
        {
          v11 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 3);
          if (v11 >= 0x666666666666667)
            sub_2394189F8();
          v12 = (char *)operator new(v10);
          v13 = 0;
          *(_QWORD *)v7 = v12;
          *((_QWORD *)v7 + 1) = v12;
          *((_QWORD *)v7 + 2) = &v12[40 * v11];
          do
          {
            v14 = v8 + v13;
            v15 = &v12[v13];
            v16 = *(_OWORD *)(v8 + v13);
            *((_DWORD *)v15 + 4) = *(_DWORD *)(v8 + v13 + 16);
            *(_OWORD *)v15 = v16;
            *(_QWORD *)(v15 + 20) = *(_QWORD *)(v8 + v13 + 20);
            v17 = *(_QWORD *)(v8 + v13 + 28);
            *((_DWORD *)v15 + 9) = *(_DWORD *)(v8 + v13 + 36);
            *(_QWORD *)(v15 + 28) = v17;
            v13 += 40;
          }
          while (v14 + 40 != v9);
          *((_QWORD *)v7 + 1) = &v12[v13];
        }
        v7[24] = *(_BYTE *)(v3 + 48);
        v42 = v7 + 32;
        v3 += 56;
        if (v3 == v4)
          break;
      }
      else
      {
        if (*(char *)(v3 + 23) < 0)
        {
          sub_23941A7F8(v45, *(void **)v3, *(_QWORD *)(v3 + 8));
          v45 = v5 + 24;
          v7 = v42;
          if ((unint64_t)v42 < v43)
            goto LABEL_9;
        }
        else
        {
          v6 = *(_OWORD *)v3;
          *((_QWORD *)v45 + 2) = *(_QWORD *)(v3 + 16);
          *(_OWORD *)v5 = v6;
          v45 = v5 + 24;
          v7 = v42;
          if ((unint64_t)v42 < v43)
            goto LABEL_9;
        }
LABEL_3:
        v42 = sub_23959B044(&v41, (uint64_t *)(v3 + 24));
        v3 += 56;
        if (v3 == v4)
          break;
      }
    }
  }
  sub_2396157EC((uint64_t)__p, 1);
  v38 = 10;
  strcpy((char *)v37, "timestamps");
  v18 = (_QWORD *)operator new();
  *v18 = &off_250ADF2D0;
  v18[1] = &v44;
  sub_23961580C((uint64_t)__p, (uint64_t)v37, (uint64_t)v18);
  HIBYTE(v36[2]) = 18;
  strcpy((char *)v36, "depth_point_clouds");
  v19 = (_QWORD *)operator new();
  *v19 = &off_250ADF300;
  v19[1] = &v41;
  sub_23961580C((uint64_t)__p, (uint64_t)v36, (uint64_t)v19);
  if (SHIBYTE(v36[2]) < 0)
  {
    operator delete(v36[0]);
    if ((v38 & 0x80000000) == 0)
      goto LABEL_20;
  }
  else if ((v38 & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(v37[0]);
LABEL_20:
  v20 = sub_2395902F0((uint64_t)__p, a2);
  v21 = v40;
  if (v40)
  {
    do
    {
      v22 = v21[5];
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      v21 = (_QWORD *)*v21;
    }
    while (v21);
    v23 = (void **)v40;
    if (v40)
    {
      do
      {
        v29 = (void **)*v23;
        if (*((char *)v23 + 39) < 0)
          operator delete(v23[2]);
        operator delete(v23);
        v23 = v29;
      }
      while (v29);
    }
  }
  v24 = __p[0];
  __p[0] = 0;
  if (v24)
    operator delete(v24);
  v25 = (char *)v41;
  if (v41)
  {
    v26 = v42;
    v27 = v41;
    if (v42 != v41)
    {
      v28 = v42;
      do
      {
        v31 = (void *)*((_QWORD *)v28 - 4);
        v28 -= 32;
        v30 = v31;
        if (v31)
        {
          *((_QWORD *)v26 - 3) = v30;
          operator delete(v30);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = v41;
    }
    v42 = v25;
    operator delete(v27);
  }
  v32 = v44;
  if (v44)
  {
    v33 = v45;
    v34 = v44;
    if (v45 != v44)
    {
      do
      {
        if (*(v33 - 1) < 0)
          operator delete(*((void **)v33 - 3));
        v33 -= 24;
      }
      while (v33 != v32);
      v34 = v44;
    }
    v45 = v32;
    operator delete(v34);
  }
  return v20;
}

void sub_239590A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  uint64_t v27;

  sub_2395905C0((uint64_t)&a21);
  sub_23953C0FC(&a27);
  sub_23941B08C((void **)(v27 - 104));
  _Unwind_Resume(a1);
}

void sub_239590A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  *(_QWORD *)(v14 - 96) = v13;
  sub_23953C0FC((void **)va);
  sub_23941B08C((void **)(v14 - 104));
  _Unwind_Resume(a1);
}

void sub_239590A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = *(void **)v22;
  if (*(_QWORD *)v22)
  {
    *(_QWORD *)(v22 + 8) = v25;
    operator delete(v25);
  }
  a22 = v22;
  sub_23953C0FC(&a21);
  sub_23941B08C((void **)(v23 - 104));
  _Unwind_Resume(a1);
}

BOOL sub_239590AE0(_QWORD *a1, void **a2, float a3)
{
  const std::locale::facet *v4;
  unsigned __int8 v5;
  const char *v6;
  size_t v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  uint64_t v10;
  uint64_t v11;
  std::locale *v12;
  const char *v13;
  size_t v14;
  std::locale::__imp *v15;
  uint64_t v16;
  uint64_t v17;
  std::locale::__imp *v18;
  void **v19;
  const char *v20;
  size_t v21;
  int8x16_t v22;
  double v23;
  int32x4_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void **v29;
  const char *v30;
  const char *v31;
  size_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void **v37;
  const char *v38;
  size_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void **v44;
  const char *v45;
  size_t v46;
  int8x16_t v47;
  double v48;
  int32x4_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void **v54;
  const char *v55;
  const char *v56;
  size_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void **v62;
  const char *v63;
  const char *v64;
  size_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void **v70;
  const char *v71;
  const char *v72;
  size_t v73;
  int8x16_t v74;
  double v75;
  int32x4_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void **v81;
  const char *v82;
  const char *v83;
  size_t v84;
  int8x16_t v85;
  double v86;
  int32x4_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void **v92;
  const char *v93;
  const char *v94;
  size_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void **v100;
  const char *v101;
  size_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void **v107;
  const char *v108;
  size_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void **v114;
  const char *v115;
  size_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  void **v121;
  const char *v122;
  size_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  void **v128;
  const char *v129;
  size_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  const char *v135;
  size_t v136;
  void *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  void **v141;
  void **v142;
  char *v143;
  const char *v144;
  size_t v145;
  const char *v146;
  size_t v147;
  const char *v148;
  size_t v149;
  const char *v150;
  size_t v151;
  const char *v152;
  size_t v153;
  const char *v154;
  size_t v155;
  const char *v156;
  size_t v157;
  int8x16_t v158;
  double v159;
  int32x4_t v160;
  const char *v161;
  const char *v162;
  size_t v163;
  const char *v164;
  size_t v165;
  int8x16_t v166;
  double v167;
  int32x4_t v168;
  char *v169;
  char *v170;
  const std::locale::facet *v171;
  unsigned __int8 v172;
  _QWORD *v173;
  float32x2_t v174;
  _BOOL8 v175;
  unint64_t v176;
  unint64_t v177;
  BOOL v178;
  unint64_t v179;
  char *v180;
  unint64_t v181;
  char *v182;
  int64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  int64_t v187;
  int v188;
  int64_t v189;
  char *v190;
  char *v191;
  void **v192;
  size_t v193;
  std::locale::__imp *v194;
  char *v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  int v200;
  void **v201;
  unint64_t v202;
  std::locale::__imp *v203;
  std::locale *v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  void **v208;
  char *v209;
  char *v210;
  std::locale::__imp *v211;
  float v212;
  float32x2_t v213;
  float v214;
  __int128 v215;
  int v216;
  const char *v217;
  size_t v218;
  const char *v219;
  size_t v220;
  const char *v221;
  size_t v222;
  int8x16_t v223;
  double v224;
  int32x4_t v225;
  const char *v226;
  const char *v227;
  size_t v228;
  const char *v229;
  size_t v230;
  const char *v231;
  size_t v232;
  int8x16_t v233;
  double v234;
  int32x4_t v235;
  const char *v236;
  const char *v237;
  size_t v238;
  const char *v239;
  const char *v240;
  size_t v241;
  float v242;
  const char *v243;
  const char *v244;
  size_t v245;
  float v246;
  const char *v247;
  size_t v248;
  float v249;
  const char *v250;
  size_t v251;
  float v252;
  const char *v253;
  size_t v254;
  int8x16_t v255;
  double v256;
  int32x4_t v257;
  const char *v258;
  const char *v259;
  size_t v260;
  int8x16_t v261;
  double v262;
  int32x4_t v263;
  const char *v264;
  const char *v265;
  size_t v266;
  char *v267;
  char *v268;
  float v269;
  float v270;
  char *v271;
  float v272;
  float v273;
  void **v274;
  void **v275;
  int locale_high;
  char *v277;
  char *locale;
  unsigned __int16 *v281;
  int v284;
  int v285;
  const char *v287;
  void **v288;
  void **v289;
  char v290;
  std::locale::__imp *v291;
  unsigned __int8 *v292;
  uint64_t v293;
  std::locale::__imp *v294;
  uint64_t v295;
  void **v296;
  void **v297;
  void **v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v306;
  void **v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  void **v317;
  _QWORD v318[13];
  char v319;
  uint64_t v320;
  _QWORD v321[13];
  char v322;
  uint64_t v323;
  void *v324;
  unint64_t v325;
  uint64_t v326;
  char v327[32];
  _BYTE __s1[24];
  void *v329[4];
  _OWORD v330[2];
  char v331[16];
  uint64_t v332;
  int v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  int v337;
  __int16 v338;
  char v339;
  _QWORD v340[2];
  uint64_t v341;
  char v342[8];
  uint64_t v343;
  int v344;
  std::locale __dst[6];
  unint64_t v346;
  int v347;
  void *v348[2];
  unint64_t v349;
  int v350;
  void *v351[2];
  unint64_t v352;
  int v353;
  void *v354[2];
  unint64_t v355;
  int v356;
  void *v357[2];
  unint64_t v358;
  int v359;
  void *v360[2];
  unint64_t v361;
  int v362;
  void *v363[2];
  unint64_t v364;
  int v365;
  void *v366[2];
  unint64_t v367;
  int v368;
  void *v369[2];
  unint64_t v370;
  int v371;
  void *v372[2];
  unint64_t v373;
  int v374;
  void *v375[2];
  unint64_t v376;
  int v377;
  void *v378[2];
  unint64_t v379;
  int v380;
  void *v381[2];
  unint64_t v382;
  int v383;
  void *v384[2];
  unint64_t v385;
  int v386;
  void *v387[2];
  unint64_t v388;
  int v389;
  void *__p[2];
  unint64_t v391;
  int v392;
  uint64_t v393;

  v393 = *MEMORY[0x24BDAC8D0];
  v325 = 0;
  v324 = 0;
  v326 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v4 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(__dst);
  sub_23955D1B4(a1, (uint64_t)&v324, v5);
  sub_239593804((uint64_t)v321, (uint64_t)&v324, 24);
  sub_239593804((uint64_t)v318, (uint64_t)&v324, 24);
  v315 = 0x3F3230353A395BLL;
  v6 = sub_23958E3FC((char *)&v315);
  v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v8 = (std::locale::__imp *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = (std::locale::__imp *)operator new(v10 + 1);
    __dst[2].__locale_ = (std::locale::__imp *)(v11 | 0x8000000000000000);
    __dst[0].__locale_ = v9;
    __dst[1].__locale_ = v8;
    goto LABEL_8;
  }
  HIBYTE(__dst[2].__locale_) = v7;
  v9 = (std::locale::__imp *)__dst;
  if (v7)
LABEL_8:
    memmove(v9, v6, (size_t)v8);
  *((_BYTE *)v8 + (_QWORD)v9) = 0;
  LODWORD(__dst[3].__locale_) = -1;
  v12 = &__dst[4];
  v314 = 0x4F425F445B582BLL;
  v13 = sub_23958E3FC((char *)&v314);
  v14 = strlen(v13);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v15 = (std::locale::__imp *)v14;
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    v18 = (std::locale::__imp *)operator new(v16 + 1);
    v346 = v17 | 0x8000000000000000;
    __dst[4].__locale_ = v18;
    __dst[5].__locale_ = v15;
    v12 = (std::locale *)v18;
    goto LABEL_16;
  }
  HIBYTE(v346) = v14;
  if (v14)
LABEL_16:
    memmove(v12, v13, (size_t)v15);
  *((_BYTE *)v15 + (_QWORD)v12) = 0;
  v347 = -1;
  v19 = v348;
  v313 = 0x45484E49424421;
  v20 = sub_23958E3FC((char *)&v313);
  v21 = strlen(v20);
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v25 = (void *)v21;
  if (v21 >= 0x17)
  {
    v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v26 = v21 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    v349 = v27 | 0x8000000000000000;
    v348[0] = v28;
    v348[1] = v25;
    v19 = (void **)v28;
    goto LABEL_24;
  }
  HIBYTE(v349) = v21;
  if (v21)
LABEL_24:
    memmove(v19, v20, (size_t)v25);
  *((_BYTE *)v25 + (_QWORD)v19) = 0;
  v350 = -1;
  v29 = v351;
  *(_OWORD *)v329 = xmmword_239EC7485;
  sub_23958E450((uint64_t)v329, (int32x4_t)xmmword_239EC7485, v22, v23, v24);
  v31 = v30;
  v32 = strlen(v30);
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v33 = (void *)v32;
  if (v32 >= 0x17)
  {
    v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v34 = v32 | 7;
    v35 = v34 + 1;
    v36 = operator new(v34 + 1);
    v352 = v35 | 0x8000000000000000;
    v351[0] = v36;
    v351[1] = v33;
    v29 = (void **)v36;
    goto LABEL_32;
  }
  HIBYTE(v352) = v32;
  if (v32)
LABEL_32:
    memmove(v29, v31, (size_t)v33);
  *((_BYTE *)v33 + (_QWORD)v29) = 0;
  v353 = -1;
  v37 = v354;
  v343 = 0x908050A02030F6CLL;
  v344 = 593666;
  v38 = sub_23958E4C8((uint64_t)&v343);
  v39 = strlen(v38);
  if (v39 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v40 = (void *)v39;
  if (v39 >= 0x17)
  {
    v41 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v41 = v39 | 7;
    v42 = v41 + 1;
    v43 = operator new(v41 + 1);
    v355 = v42 | 0x8000000000000000;
    v354[0] = v43;
    v354[1] = v40;
    v37 = (void **)v43;
    goto LABEL_40;
  }
  HIBYTE(v355) = v39;
  if (v39)
LABEL_40:
    memmove(v37, v38, (size_t)v40);
  *((_BYTE *)v40 + (_QWORD)v37) = 0;
  v356 = -1;
  v44 = v357;
  v341 = 0x7D677A71607A7D14;
  v45 = (const char *)sub_23958E518((uint64_t)&v341);
  v46 = strlen(v45);
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v50 = (void *)v46;
  if (v46 >= 0x17)
  {
    v51 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v51 = v46 | 7;
    v52 = v51 + 1;
    v53 = operator new(v51 + 1);
    v358 = v52 | 0x8000000000000000;
    v357[0] = v53;
    v357[1] = v50;
    v44 = (void **)v53;
    goto LABEL_48;
  }
  HIBYTE(v358) = v46;
  if (v46)
LABEL_48:
    memmove(v44, v45, (size_t)v50);
  *((_BYTE *)v50 + (_QWORD)v44) = 0;
  v359 = -1;
  v54 = v360;
  v330[0] = xmmword_239EC7498;
  LODWORD(v330[1]) = 658449;
  sub_23958E55C((uint64_t)v330, (int32x4_t)xmmword_239EC7498, v47, v48, v49);
  v56 = v55;
  v57 = strlen(v55);
  if (v57 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v58 = (void *)v57;
  if (v57 >= 0x17)
  {
    v59 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v59 = v57 | 7;
    v60 = v59 + 1;
    v61 = operator new(v59 + 1);
    v361 = v60 | 0x8000000000000000;
    v360[0] = v61;
    v360[1] = v58;
    v54 = (void **)v61;
    goto LABEL_56;
  }
  HIBYTE(v361) = v57;
  if (v57)
LABEL_56:
    memmove(v54, v56, (size_t)v58);
  *((_BYTE *)v58 + (_QWORD)v54) = 0;
  v362 = -1;
  v62 = v363;
  strcpy((char *)v340, "R13?7 3\";*7>!*");
  sub_23958E5E0((uint64_t)v340);
  v64 = v63;
  v65 = strlen(v63);
  if (v65 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v66 = (void *)v65;
  if (v65 >= 0x17)
  {
    v67 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17)
      v67 = v65 | 7;
    v68 = v67 + 1;
    v69 = operator new(v67 + 1);
    v364 = v68 | 0x8000000000000000;
    v363[0] = v69;
    v363[1] = v66;
    v62 = (void **)v69;
    goto LABEL_64;
  }
  HIBYTE(v364) = v65;
  if (v65)
LABEL_64:
    memmove(v62, v64, (size_t)v66);
  *((_BYTE *)v66 + (_QWORD)v62) = 0;
  v365 = -1;
  v70 = v366;
  v336 = 0x7C6D7E69616D6F0CLL;
  v339 = 0;
  v338 = 30079;
  v337 = 1617523813;
  sub_23958E5E0((uint64_t)&v336);
  v72 = v71;
  v73 = strlen(v71);
  if (v73 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v77 = (void *)v73;
  if (v73 >= 0x17)
  {
    v78 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v73 | 7) != 0x17)
      v78 = v73 | 7;
    v79 = v78 + 1;
    v80 = operator new(v78 + 1);
    v367 = v79 | 0x8000000000000000;
    v366[0] = v80;
    v366[1] = v77;
    v70 = (void **)v80;
    goto LABEL_72;
  }
  HIBYTE(v367) = v73;
  if (v73)
LABEL_72:
    memmove(v70, v72, (size_t)v77);
  *((_BYTE *)v77 + (_QWORD)v70) = 0;
  v368 = -1;
  v81 = v369;
  strcpy(__s1, ":MS^_Y[W_H[JSB_VIB");
  sub_23958E450((uint64_t)__s1, *(int32x4_t *)":MS^_Y[W_H[JSB_VIB", v74, v75, v76);
  v83 = v82;
  v84 = strlen(v82);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v88 = (void *)v84;
  if (v84 >= 0x17)
  {
    v89 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v89 = v84 | 7;
    v90 = v89 + 1;
    v91 = operator new(v89 + 1);
    v370 = v90 | 0x8000000000000000;
    v369[0] = v91;
    v369[1] = v88;
    v81 = (void **)v91;
    goto LABEL_80;
  }
  HIBYTE(v370) = v84;
  if (v84)
LABEL_80:
    memmove(v81, v83, (size_t)v88);
  *((_BYTE *)v88 + (_QWORD)v81) = 0;
  v371 = -1;
  v92 = v372;
  *(_OWORD *)v327 = xmmword_239EC74BF;
  strcpy(&v327[15], "~ak");
  sub_23958E450((uint64_t)v327, (int32x4_t)xmmword_239EC74BF, v85, v86, v87);
  v94 = v93;
  v95 = strlen(v93);
  if (v95 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v96 = (void *)v95;
  if (v95 >= 0x17)
  {
    v97 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v95 | 7) != 0x17)
      v97 = v95 | 7;
    v98 = v97 + 1;
    v99 = operator new(v97 + 1);
    v373 = v98 | 0x8000000000000000;
    v372[0] = v99;
    v372[1] = v96;
    v92 = (void **)v99;
    goto LABEL_88;
  }
  HIBYTE(v373) = v95;
  if (v95)
LABEL_88:
    memmove(v92, v94, (size_t)v96);
  *((_BYTE *)v96 + (_QWORD)v92) = 0;
  v374 = -1;
  v100 = v375;
  v312 = 0x38242C322F3740;
  v101 = sub_23958E3FC((char *)&v312);
  v102 = strlen(v101);
  if (v102 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v103 = (void *)v102;
  if (v102 >= 0x17)
  {
    v104 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v102 | 7) != 0x17)
      v104 = v102 | 7;
    v105 = v104 + 1;
    v106 = operator new(v104 + 1);
    v376 = v105 | 0x8000000000000000;
    v375[0] = v106;
    v375[1] = v103;
    v100 = (void **)v106;
    goto LABEL_96;
  }
  HIBYTE(v376) = v102;
  if (v102)
LABEL_96:
    memmove(v100, v101, (size_t)v103);
  *((_BYTE *)v103 + (_QWORD)v100) = 0;
  v377 = -1;
  v107 = v378;
  v311 = 0x1E030B15081067;
  v108 = sub_23958E3FC((char *)&v311);
  v109 = strlen(v108);
  if (v109 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v110 = (void *)v109;
  if (v109 >= 0x17)
  {
    v111 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v109 | 7) != 0x17)
      v111 = v109 | 7;
    v112 = v111 + 1;
    v113 = operator new(v111 + 1);
    v379 = v112 | 0x8000000000000000;
    v378[0] = v113;
    v378[1] = v110;
    v107 = (void **)v113;
    goto LABEL_104;
  }
  HIBYTE(v379) = v109;
  if (v109)
LABEL_104:
    memmove(v107, v108, (size_t)v110);
  *((_BYTE *)v110 + (_QWORD)v107) = 0;
  v380 = -1;
  v114 = v381;
  v310 = 0x618100E130B7CLL;
  v115 = sub_23958E3FC((char *)&v310);
  v116 = strlen(v115);
  if (v116 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v117 = (void *)v116;
  if (v116 >= 0x17)
  {
    v118 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v116 | 7) != 0x17)
      v118 = v116 | 7;
    v119 = v118 + 1;
    v120 = operator new(v118 + 1);
    v382 = v119 | 0x8000000000000000;
    v381[0] = v120;
    v381[1] = v117;
    v114 = (void **)v120;
    goto LABEL_112;
  }
  HIBYTE(v382) = v116;
  if (v116)
LABEL_112:
    memmove(v114, v115, (size_t)v117);
  *((_BYTE *)v117 + (_QWORD)v114) = 0;
  v383 = -1;
  v121 = v384;
  v334 = 0x6F726A7879746A1DLL;
  v335 = 6650225;
  v122 = sub_23958E4C8((uint64_t)&v334);
  v123 = strlen(v122);
  if (v123 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v124 = (void *)v123;
  if (v123 >= 0x17)
  {
    v125 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v123 | 7) != 0x17)
      v125 = v123 | 7;
    v126 = v125 + 1;
    v127 = operator new(v125 + 1);
    v385 = v126 | 0x8000000000000000;
    v384[0] = v127;
    v384[1] = v124;
    v121 = (void **)v127;
    goto LABEL_120;
  }
  HIBYTE(v385) = v123;
  if (v123)
LABEL_120:
    memmove(v121, v122, (size_t)v124);
  *((_BYTE *)v124 + (_QWORD)v121) = 0;
  v386 = -1;
  v128 = v387;
  v332 = 0xB160E1C1D100E79;
  v333 = 7445;
  v129 = sub_23958E4C8((uint64_t)&v332);
  v130 = strlen(v129);
  if (v130 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v131 = (void *)v130;
  if (v130 >= 0x17)
  {
    v132 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v130 | 7) != 0x17)
      v132 = v130 | 7;
    v133 = v132 + 1;
    v134 = operator new(v132 + 1);
    v388 = v133 | 0x8000000000000000;
    v387[0] = v134;
    v387[1] = v131;
    v128 = (void **)v134;
    goto LABEL_128;
  }
  HIBYTE(v388) = v130;
  if (v130)
LABEL_128:
    memmove(v128, v129, (size_t)v131);
  *((_BYTE *)v131 + (_QWORD)v128) = 0;
  v389 = -1;
  strcpy(v331, "?HV[ZHPMS[E");
  v135 = sub_23958E4C8((uint64_t)v331);
  v136 = strlen(v135);
  if (v136 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v137 = (void *)v136;
  if (v136 >= 0x17)
  {
    v139 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v136 | 7) != 0x17)
      v139 = v136 | 7;
    v140 = v139 + 1;
    v138 = operator new(v139 + 1);
    __p[0] = v138;
    v391 = v140 | 0x8000000000000000;
    __p[1] = v137;
    goto LABEL_136;
  }
  HIBYTE(v391) = v136;
  v138 = __p;
  if (v136)
LABEL_136:
    memmove(v138, v135, (size_t)v137);
  *((_BYTE *)v137 + (_QWORD)v138) = 0;
  v392 = -1;
  sub_23959E788(&v316, (uint64_t)__dst, 0x11uLL);
  if (SHIBYTE(v391) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v388) & 0x80000000) == 0)
    {
LABEL_139:
      if ((SHIBYTE(v385) & 0x80000000) == 0)
        goto LABEL_140;
      goto LABEL_470;
    }
  }
  else if ((SHIBYTE(v388) & 0x80000000) == 0)
  {
    goto LABEL_139;
  }
  operator delete(v387[0]);
  if ((SHIBYTE(v385) & 0x80000000) == 0)
  {
LABEL_140:
    if ((SHIBYTE(v382) & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_471;
  }
LABEL_470:
  operator delete(v384[0]);
  if ((SHIBYTE(v382) & 0x80000000) == 0)
  {
LABEL_141:
    if ((SHIBYTE(v379) & 0x80000000) == 0)
      goto LABEL_142;
    goto LABEL_472;
  }
LABEL_471:
  operator delete(v381[0]);
  if ((SHIBYTE(v379) & 0x80000000) == 0)
  {
LABEL_142:
    if ((SHIBYTE(v376) & 0x80000000) == 0)
      goto LABEL_143;
    goto LABEL_473;
  }
LABEL_472:
  operator delete(v378[0]);
  if ((SHIBYTE(v376) & 0x80000000) == 0)
  {
LABEL_143:
    if ((SHIBYTE(v373) & 0x80000000) == 0)
      goto LABEL_144;
    goto LABEL_474;
  }
LABEL_473:
  operator delete(v375[0]);
  if ((SHIBYTE(v373) & 0x80000000) == 0)
  {
LABEL_144:
    if ((SHIBYTE(v370) & 0x80000000) == 0)
      goto LABEL_145;
    goto LABEL_475;
  }
LABEL_474:
  operator delete(v372[0]);
  if ((SHIBYTE(v370) & 0x80000000) == 0)
  {
LABEL_145:
    if ((SHIBYTE(v367) & 0x80000000) == 0)
      goto LABEL_146;
    goto LABEL_476;
  }
LABEL_475:
  operator delete(v369[0]);
  if ((SHIBYTE(v367) & 0x80000000) == 0)
  {
LABEL_146:
    if ((SHIBYTE(v364) & 0x80000000) == 0)
      goto LABEL_147;
    goto LABEL_477;
  }
LABEL_476:
  operator delete(v366[0]);
  if ((SHIBYTE(v364) & 0x80000000) == 0)
  {
LABEL_147:
    if ((SHIBYTE(v361) & 0x80000000) == 0)
      goto LABEL_148;
    goto LABEL_478;
  }
LABEL_477:
  operator delete(v363[0]);
  if ((SHIBYTE(v361) & 0x80000000) == 0)
  {
LABEL_148:
    if ((SHIBYTE(v358) & 0x80000000) == 0)
      goto LABEL_149;
    goto LABEL_479;
  }
LABEL_478:
  operator delete(v360[0]);
  if ((SHIBYTE(v358) & 0x80000000) == 0)
  {
LABEL_149:
    if ((SHIBYTE(v355) & 0x80000000) == 0)
      goto LABEL_150;
    goto LABEL_480;
  }
LABEL_479:
  operator delete(v357[0]);
  if ((SHIBYTE(v355) & 0x80000000) == 0)
  {
LABEL_150:
    if ((SHIBYTE(v352) & 0x80000000) == 0)
      goto LABEL_151;
    goto LABEL_481;
  }
LABEL_480:
  operator delete(v354[0]);
  if ((SHIBYTE(v352) & 0x80000000) == 0)
  {
LABEL_151:
    if ((SHIBYTE(v349) & 0x80000000) == 0)
      goto LABEL_152;
    goto LABEL_482;
  }
LABEL_481:
  operator delete(v351[0]);
  if ((SHIBYTE(v349) & 0x80000000) == 0)
  {
LABEL_152:
    if ((SHIBYTE(v346) & 0x80000000) == 0)
      goto LABEL_153;
LABEL_483:
    operator delete(__dst[4].__locale_);
    if ((SHIBYTE(__dst[2].__locale_) & 0x80000000) == 0)
      goto LABEL_154;
    goto LABEL_484;
  }
LABEL_482:
  operator delete(v348[0]);
  if (SHIBYTE(v346) < 0)
    goto LABEL_483;
LABEL_153:
  if ((SHIBYTE(__dst[2].__locale_) & 0x80000000) == 0)
    goto LABEL_154;
LABEL_484:
  operator delete(__dst[0].__locale_);
LABEL_154:
  v306 = a1;
  if (!*(_DWORD *)((char *)&v318[4] + *(_QWORD *)(v318[0] - 24)))
  {
    v309 = 0;
    while (1)
    {
      memset(__dst, 0, 24);
      sub_23955D1B4(v318, (uint64_t)__dst, 0x2Cu);
      HIBYTE(v329[2]) = 6;
      LODWORD(v329[0]) = 218762272;
      WORD2(v329[0]) = 2825;
      BYTE6(v329[0]) = 0;
      sub_239593978(__dst, v329, v330);
      if (SHIBYTE(__dst[2].__locale_) < 0)
        operator delete(__dst[0].__locale_);
      *(_OWORD *)&__dst[0].__locale_ = v330[0];
      __dst[2] = *(std::locale *)&v330[1];
      BYTE7(v330[1]) = 0;
      LOBYTE(v330[0]) = 0;
      if (SHIBYTE(v329[2]) < 0)
        operator delete(v329[0]);
      locale_high = HIBYTE(__dst[2].__locale_);
      if (SHIBYTE(__dst[2].__locale_) >= 0)
        v277 = (char *)__dst + HIBYTE(__dst[2].__locale_);
      else
        v277 = (char *)__dst[0].__locale_ + (unint64_t)__dst[1].__locale_;
      if (SHIBYTE(__dst[2].__locale_) >= 0)
        locale = (char *)__dst;
      else
        locale = (char *)__dst[0].__locale_;
      if (locale != v277)
      {
        do
        {
          *locale = __tolower(*locale);
          ++locale;
        }
        while (locale != v277);
        locale_high = HIBYTE(__dst[2].__locale_);
      }
      if ((locale_high & 0x80) != 0)
      {
        if (__dst[1].__locale_ == (std::locale::__imp *)6)
        {
          v281 = (unsigned __int16 *)__dst[0].__locale_;
          if (*(_DWORD *)__dst[0].__locale_ != 1852403568 || *((_WORD *)__dst[0].__locale_ + 2) != 30836)
          {
            if (*(_DWORD *)__dst[0].__locale_ != 1852403568 || *((_WORD *)__dst[0].__locale_ + 2) != 31092)
            {
LABEL_520:
              v284 = *(_DWORD *)v281;
              v285 = v281[2];
              if (v284 != 1852403568 || v285 != 31348)
                goto LABEL_529;
              v287 = "worldz";
              goto LABEL_528;
            }
LABEL_527:
            v287 = "worldy";
LABEL_528:
            MEMORY[0x23B83DBFC](__dst, v287);
            goto LABEL_529;
          }
LABEL_526:
          v287 = "worldx";
          goto LABEL_528;
        }
      }
      else if (locale_high == 6)
      {
        if (LODWORD(__dst[0].__locale_) != 1852403568 || WORD2(__dst[0].__locale_) != 30836)
        {
          if (LODWORD(__dst[0].__locale_) != 1852403568 || WORD2(__dst[0].__locale_) != 31092)
          {
            v281 = (unsigned __int16 *)__dst;
            goto LABEL_520;
          }
          goto LABEL_527;
        }
        goto LABEL_526;
      }
LABEL_529:
      v289 = (void **)v316;
      v288 = v317;
      v290 = HIBYTE(__dst[2].__locale_);
      if (v316 == v317)
        goto LABEL_548;
      if (SHIBYTE(__dst[2].__locale_) >= 0)
        v291 = (std::locale::__imp *)HIBYTE(__dst[2].__locale_);
      else
        v291 = __dst[1].__locale_;
      if (SHIBYTE(__dst[2].__locale_) >= 0)
        v292 = (unsigned __int8 *)__dst;
      else
        v292 = (unsigned __int8 *)__dst[0].__locale_;
      while (1)
      {
        v293 = *((unsigned __int8 *)v289 + 23);
        if ((v293 & 0x80u) == 0)
          v294 = (std::locale::__imp *)*((unsigned __int8 *)v289 + 23);
        else
          v294 = (std::locale::__imp *)v289[1];
        if (v294 != v291)
          goto LABEL_537;
        if ((v293 & 0x80) == 0)
          break;
        if (!memcmp(*v289, v292, (size_t)v289[1]))
          goto LABEL_547;
LABEL_537:
        v289 += 4;
        if (v289 == v288)
          goto LABEL_548;
      }
      if (*((_BYTE *)v289 + 23))
      {
        v295 = 0;
        while (*((unsigned __int8 *)v289 + v295) == v292[v295])
        {
          if (v293 == ++v295)
            goto LABEL_547;
        }
        goto LABEL_537;
      }
LABEL_547:
      *((_DWORD *)v289 + 6) = v309;
LABEL_548:
      if (v290 < 0)
        operator delete(__dst[0].__locale_);
      ++v309;
      if (*(_DWORD *)((char *)&v318[4] + *(_QWORD *)(v318[0] - 24)))
        goto LABEL_156;
    }
  }
  v309 = 0;
LABEL_156:
  v142 = (void **)v316;
  v141 = v317;
  if (v316 != v317)
  {
    do
    {
      if (*((_DWORD *)v142 + 6) != -1)
        goto LABEL_158;
      __dst[0].__locale_ = (std::locale::__imp *)0x11101D121A1B1774;
      LODWORD(__dst[1].__locale_) = 1120026;
      v144 = sub_23958E4C8((uint64_t)__dst);
      v145 = strlen(v144);
      if (*((char *)v142 + 23) < 0)
      {
        if ((void *)v145 == v142[1])
        {
          if (v145 == -1)
LABEL_596:
            sub_239423B0C();
          if (!memcmp(*v142, v144, v145))
            goto LABEL_560;
        }
      }
      else if (v145 == *((unsigned __int8 *)v142 + 23))
      {
        if (v145 == -1)
          goto LABEL_596;
        if (!memcmp(v142, v144, v145))
          goto LABEL_560;
      }
      *(_QWORD *)&v330[0] = 0x28251323242F294CLL;
      BYTE8(v330[0]) = 0;
      v146 = sub_239513718((char *)v330);
      v147 = strlen(v146);
      if (*((char *)v142 + 23) < 0)
      {
        if ((void *)v147 == v142[1])
        {
          if (v147 == -1)
LABEL_597:
            sub_239423B0C();
          if (!memcmp(*v142, v146, v147))
            goto LABEL_560;
        }
      }
      else if (v147 == *((unsigned __int8 *)v142 + 23))
      {
        if (v147 == -1)
          goto LABEL_597;
        if (!memcmp(v142, v146, v147))
          goto LABEL_560;
      }
      strcpy((char *)v329, "A6.3-%9");
      v148 = sub_23958E3FC((char *)v329);
      v149 = strlen(v148);
      if (*((char *)v142 + 23) < 0)
      {
        if ((void *)v149 == v142[1])
        {
          if (v149 == -1)
LABEL_598:
            sub_239423B0C();
          if (!memcmp(*v142, v148, v149))
            goto LABEL_560;
        }
      }
      else if (v149 == *((unsigned __int8 *)v142 + 23))
      {
        if (v149 == -1)
          goto LABEL_598;
        if (!memcmp(v142, v148, v149))
          goto LABEL_560;
      }
      *(_QWORD *)__s1 = 0x667B736D70681FLL;
      v150 = sub_23958E3FC(__s1);
      v151 = strlen(v150);
      if (*((char *)v142 + 23) < 0)
      {
        if ((void *)v151 == v142[1])
        {
          if (v151 == -1)
LABEL_599:
            sub_239423B0C();
          if (!memcmp(*v142, v150, v151))
            goto LABEL_560;
        }
      }
      else if (v151 == *((unsigned __int8 *)v142 + 23))
      {
        if (v151 == -1)
          goto LABEL_599;
        if (!memcmp(v142, v150, v151))
          goto LABEL_560;
      }
      *(_QWORD *)v327 = 0x68767E607D6512;
      v152 = sub_23958E3FC(v327);
      v153 = strlen(v152);
      if (*((char *)v142 + 23) < 0)
      {
        if ((void *)v153 == v142[1])
        {
          if (v153 == -1)
LABEL_600:
            sub_239423B0C();
          if (!memcmp(*v142, v152, v153))
          {
LABEL_560:
            v175 = 0;
            goto LABEL_563;
          }
        }
      }
      else if (v153 == *((unsigned __int8 *)v142 + 23))
      {
        if (v153 == -1)
          goto LABEL_600;
        if (!memcmp(v142, v152, v153))
          goto LABEL_560;
      }
      v340[0] = 0x131E1C19161577;
      v154 = sub_23958E3FC((char *)v340);
      v155 = strlen(v154);
      if (*((char *)v142 + 23) < 0)
      {
        if ((void *)v155 == v142[1])
        {
          if (v155 == -1)
LABEL_601:
            sub_239423B0C();
          if (!memcmp(*v142, v154, v155))
            goto LABEL_158;
        }
      }
      else if (v155 == *((unsigned __int8 *)v142 + 23))
      {
        if (v155 == -1)
          goto LABEL_601;
        if (!memcmp(v142, v154, v155))
          goto LABEL_158;
      }
      v336 = 0x707D607B646714;
      v156 = sub_23958E3FC((char *)&v336);
      v157 = strlen(v156);
      if (*((char *)v142 + 23) < 0)
      {
        if ((void *)v157 == v142[1])
        {
          if (v157 == -1)
LABEL_602:
            sub_239423B0C();
          if (!memcmp(*v142, v156, v157))
            goto LABEL_158;
        }
      }
      else if (v157 == *((unsigned __int8 *)v142 + 23))
      {
        if (v157 == -1)
          goto LABEL_602;
        if (!memcmp(v142, v156, v157))
          goto LABEL_158;
      }
      strcpy((char *)v330, "@%5#,)$%!.$)34!.#%");
      sub_23958E450((uint64_t)v330, *(int32x4_t *)"@%5#,)$%!.$)34!.#%", v158, v159, v160);
      v162 = v161;
      v163 = strlen(v161);
      if (*((char *)v142 + 23) < 0)
      {
        if ((void *)v163 == v142[1])
        {
          if (v163 == -1)
LABEL_603:
            sub_239423B0C();
          if (!memcmp(*v142, v162, v163))
            goto LABEL_158;
        }
      }
      else if (v163 == *((unsigned __int8 *)v142 + 23))
      {
        if (v163 == -1)
          goto LABEL_603;
        if (!memcmp(v142, v162, v163))
          goto LABEL_158;
      }
      *(_QWORD *)v327 = 0x1208151E0F15127BLL;
      v327[10] = 0;
      *(_WORD *)&v327[8] = 527;
      v164 = (const char *)sub_23958E518((uint64_t)v327);
      v165 = strlen(v164);
      if (*((char *)v142 + 23) < 0)
      {
        if ((void *)v165 != v142[1])
          goto LABEL_232;
        if (v165 == -1)
LABEL_621:
          sub_239423B0C();
        if (memcmp(*v142, v164, v165))
        {
LABEL_232:
          strcpy((char *)&__dst[2], "ydb");
          *(_OWORD *)&__dst[0].__locale_ = xmmword_239EC74E5;
          sub_23958E55C((uint64_t)__dst, (int32x4_t)xmmword_239EC74E5, v166, v167, v168);
          if (!sub_239593B20(v142, v169))
          {
            strcpy((char *)v329, "\"ACOGPCRKZGNQZ");
            sub_23958E5E0((uint64_t)v329);
            if (!sub_239593B20(v142, v170))
            {
              strcpy(__s1, "%FDH@WDUL]@IV\\");
              sub_23958E5E0((uint64_t)__s1);
              sub_239593B20(v142, v143);
            }
          }
        }
      }
      else
      {
        if (v165 != *((unsigned __int8 *)v142 + 23))
          goto LABEL_232;
        if (v165 == -1)
          goto LABEL_621;
        if (memcmp(v142, v164, v165))
          goto LABEL_232;
      }
LABEL_158:
      v142 += 4;
    }
    while (v142 != v141);
  }
  BYTE7(v330[1]) = 1;
  strcpy((char *)v330, ",");
  memset(v329, 0, 24);
  sub_23955C844((char **)v329, v309);
  while (2)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v306 + *(_QWORD *)(*v306 - 24)));
    v171 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
    v172 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v171->__vftable[2].~facet_0)(v171, 10);
    std::locale::~locale(__dst);
    v173 = sub_23955D1B4(v306, (uint64_t)&v324, v172);
    v175 = (*(_DWORD *)((_BYTE *)v173 + *(_QWORD *)(*v173 - 24) + 32) & 5) != 0;
    if ((*(_DWORD *)((_BYTE *)v173 + *(_QWORD *)(*v173 - 24) + 32) & 5) != 0)
    {
      v208 = (void **)v329[0];
      if (v329[0])
        goto LABEL_551;
LABEL_558:
      if ((SBYTE7(v330[1]) & 0x80000000) == 0)
        goto LABEL_563;
      goto LABEL_562;
    }
    v176 = 0;
    v177 = HIBYTE(v326);
    v178 = v326 < 0;
    v179 = v325;
    v308 = (void **)v324;
    if (v326 >= 0)
      v180 = (char *)&v324;
    else
      v180 = (char *)v324;
    if (v326 >= 0)
      v181 = HIBYTE(v326);
    else
      v181 = v325;
    if ((SBYTE7(v330[1]) & 0x80u) == 0)
      v182 = (char *)v330;
    else
      v182 = *(char **)&v330[0];
    if ((SBYTE7(v330[1]) & 0x80u) == 0)
      v183 = BYTE7(v330[1]);
    else
      v183 = *((_QWORD *)&v330[0] + 1);
    do
    {
      v184 = v176;
      if (!v183)
        goto LABEL_260;
      v185 = &v180[v176];
      v186 = &v180[v181];
      v187 = v181 - v176;
      if (v187 < v183)
        break;
      v188 = *v182;
      while (1)
      {
        v189 = v187 - v183;
        if (v189 == -1)
          goto LABEL_297;
        v190 = (char *)memchr(v185, v188, v189 + 1);
        if (!v190)
          goto LABEL_297;
        v191 = v190;
        if (!memcmp(v190, v182, v183))
          break;
        v185 = v191 + 1;
        v187 = v186 - (v191 + 1);
        if (v187 < v183)
          goto LABEL_297;
      }
      if (v191 == v186)
        break;
      v184 = v191 - v180;
LABEL_260:
      if (v184 == -1)
        break;
      if (v178)
      {
        v192 = v308;
        if (v179 < v176)
          goto LABEL_588;
      }
      else
      {
        if (v176 > v177)
LABEL_588:
          sub_239423B0C();
        v192 = &v324;
        v179 = v177;
      }
      if (v179 - v176 >= v184 - v176)
        v193 = v184 - v176;
      else
        v193 = v179 - v176;
      if (v193 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      if (v193 >= 0x17)
      {
        v197 = (v193 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v193 | 7) != 0x17)
          v197 = v193 | 7;
        v198 = v197 + 1;
        v194 = (std::locale::__imp *)operator new(v197 + 1);
        __dst[2].__locale_ = (std::locale::__imp *)(v198 | 0x8000000000000000);
        __dst[0].__locale_ = v194;
        __dst[1].__locale_ = (std::locale::__imp *)v193;
      }
      else
      {
        HIBYTE(__dst[2].__locale_) = v193;
        v194 = (std::locale::__imp *)__dst;
        if (!v193)
        {
          LOBYTE(__dst[0].__locale_) = 0;
          v195 = (char *)v329[1];
          if (v329[1] < v329[2])
            goto LABEL_273;
          goto LABEL_279;
        }
      }
      memmove(v194, (char *)v192 + v176, v193);
      *((_BYTE *)v194 + v193) = 0;
      v195 = (char *)v329[1];
      if (v329[1] < v329[2])
      {
LABEL_273:
        if (SHIBYTE(__dst[2].__locale_) < 0)
        {
          sub_23941A7F8(v195, __dst[0].__locale_, (unint64_t)__dst[1].__locale_);
        }
        else
        {
          v196 = *(_OWORD *)&__dst[0].__locale_;
          *((std::locale *)v195 + 2) = __dst[2];
          *(_OWORD *)v195 = v196;
        }
        v199 = v195 + 24;
        goto LABEL_282;
      }
LABEL_279:
      v199 = sub_23959AE70((char **)v329, (uint64_t)__dst);
LABEL_282:
      v329[1] = v199;
      v200 = SBYTE7(v330[1]);
      if ((SBYTE7(v330[1]) & 0x80u) == 0)
        v183 = BYTE7(v330[1]);
      else
        v183 = *((_QWORD *)&v330[0] + 1);
      if (SHIBYTE(__dst[2].__locale_) < 0)
        operator delete(__dst[0].__locale_);
      v176 = v183 + v184;
      v177 = HIBYTE(v326);
      v178 = v326 < 0;
      v179 = v325;
      v308 = (void **)v324;
      if (v326 >= 0)
        v180 = (char *)&v324;
      else
        v180 = (char *)v324;
      if (v326 >= 0)
        v181 = HIBYTE(v326);
      else
        v181 = v325;
      if (v200 >= 0)
        v182 = (char *)v330;
      else
        v182 = *(char **)&v330[0];
    }
    while (v181 >= v176);
LABEL_297:
    if (v176 == -1)
      goto LABEL_316;
    if (v178)
    {
      v201 = v308;
      if (v179 < v176)
LABEL_592:
        sub_239423B0C();
    }
    else
    {
      if (v176 > v177)
        goto LABEL_592;
      v201 = &v324;
      v179 = v177;
    }
    v202 = v179 - v176;
    if (v179 - v176 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    if (v202 >= 0x17)
    {
      v206 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v202 | 7) != 0x17)
        v206 = v202 | 7;
      v207 = v206 + 1;
      v203 = (std::locale::__imp *)operator new(v206 + 1);
      __dst[2].__locale_ = (std::locale::__imp *)(v207 | 0x8000000000000000);
      __dst[0].__locale_ = v203;
      __dst[1].__locale_ = (std::locale::__imp *)(v179 - v176);
    }
    else
    {
      HIBYTE(__dst[2].__locale_) = v179 - v176;
      v203 = (std::locale::__imp *)__dst;
      if (v179 == v176)
      {
        *((_BYTE *)&__dst[0].__locale_ + v202) = 0;
        v204 = (std::locale *)v329[1];
        if (v329[1] < v329[2])
          goto LABEL_307;
LABEL_314:
        v329[1] = sub_23959AE70((char **)v329, (uint64_t)__dst);
        if (SHIBYTE(__dst[2].__locale_) < 0)
LABEL_315:
          operator delete(__dst[0].__locale_);
        goto LABEL_316;
      }
    }
    memmove(v203, (char *)v201 + v176, v179 - v176);
    *((_BYTE *)v203 + v202) = 0;
    v204 = (std::locale *)v329[1];
    if (v329[1] >= v329[2])
      goto LABEL_314;
LABEL_307:
    if (SHIBYTE(__dst[2].__locale_) < 0)
    {
      sub_23941A7F8(v204, __dst[0].__locale_, (unint64_t)__dst[1].__locale_);
      v329[1] = &v204[3];
      if (SHIBYTE(__dst[2].__locale_) < 0)
        goto LABEL_315;
    }
    else
    {
      v205 = *(_OWORD *)&__dst[0].__locale_;
      v204[2].__locale_ = (std::locale::__imp *)__dst[2];
      *(_OWORD *)&v204->__locale_ = v205;
      v329[1] = &v204[3];
      if (SHIBYTE(__dst[2].__locale_) < 0)
        goto LABEL_315;
    }
LABEL_316:
    v208 = (void **)v329[0];
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v329[1] - (char *)v329[0]) >> 3) == v309)
    {
      LOWORD(__dst[0].__locale_) = 0;
      BYTE2(__dst[0].__locale_) = 0;
      memset((char *)&__dst[0].__locale_ + 4, 0, 36);
      v209 = (char *)v316;
      v210 = (char *)v317;
      if (v316 == v317)
      {
        HIDWORD(__dst[0].__locale_) = 0;
        v211 = 0;
        v212 = 0.0;
        v213.i32[0] = 0;
        goto LABEL_459;
      }
      while (2)
      {
        while (2)
        {
          if (v209[23] < 0)
          {
            sub_23941A7F8(__s1, *(void **)v209, *((_QWORD *)v209 + 1));
          }
          else
          {
            v215 = *(_OWORD *)v209;
            *(_QWORD *)&__s1[16] = *((_QWORD *)v209 + 2);
            *(_OWORD *)__s1 = v215;
          }
          v216 = *((_DWORD *)v209 + 6);
          if (v216 == -1)
            goto LABEL_320;
          *(_QWORD *)v327 = 0x737E7C79767517;
          v217 = sub_23958E3FC(v327);
          v218 = strlen(v217);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v218 != *(_QWORD *)&__s1[8])
              goto LABEL_336;
            if (v218 == -1)
LABEL_578:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v217, v218))
              goto LABEL_336;
LABEL_365:
            LOBYTE(__dst[0].__locale_) = std::stoi((const std::string *)v329[0] + v216, 0, 10);
            goto LABEL_320;
          }
          if (v218 == __s1[23])
          {
            if (v218 == -1)
              goto LABEL_578;
            if (!memcmp(__s1, v217, v218))
              goto LABEL_365;
          }
LABEL_336:
          strcpy(v327, ">MNQJWZ");
          v219 = sub_23958E3FC(v327);
          v220 = strlen(v219);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v220 != *(_QWORD *)&__s1[8])
              goto LABEL_344;
            if (v220 == -1)
LABEL_579:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v219, v220))
              goto LABEL_344;
LABEL_374:
            BYTE1(__dst[0].__locale_) = std::stoi((const std::string *)v329[0] + v216, 0, 10);
            goto LABEL_320;
          }
          if (v220 == __s1[23])
          {
            if (v220 == -1)
              goto LABEL_579;
            if (!memcmp(__s1, v219, v220))
              goto LABEL_374;
          }
LABEL_344:
          *(_QWORD *)v327 = 0x131E181F141277;
          v221 = sub_23958E3FC(v327);
          v222 = strlen(v221);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v222 != *(_QWORD *)&__s1[8])
              goto LABEL_352;
            if (v222 == -1)
LABEL_580:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v221, v222))
              goto LABEL_352;
LABEL_383:
            BYTE2(__dst[0].__locale_) = std::stoi((const std::string *)v329[0] + v216, 0, 10);
            goto LABEL_320;
          }
          if (v222 == __s1[23])
          {
            if (v222 == -1)
              goto LABEL_580;
            if (!memcmp(__s1, v221, v222))
              goto LABEL_383;
          }
LABEL_352:
          strcpy(v327, "$AQGHM@AEJ@MWPEJGA");
          sub_23958E450((uint64_t)v327, *(int32x4_t *)"$AQGHM@AEJ@MWPEJGA", v223, v224, v225);
          v227 = v226;
          v228 = strlen(v226);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v228 != *(_QWORD *)&__s1[8])
              goto LABEL_360;
            if (v228 == -1)
LABEL_581:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v227, v228))
              goto LABEL_360;
LABEL_392:
            v242 = std::stod((const std::string *)v329[0] + v216, 0);
            *((float *)&__dst[0].__locale_ + 1) = v242;
            goto LABEL_320;
          }
          if (v228 == __s1[23])
          {
            if (v228 == -1)
              goto LABEL_581;
            if (!memcmp(__s1, v227, v228))
              goto LABEL_392;
          }
LABEL_360:
          *(_QWORD *)v327 = 0x3020F0008090566;
          *(_DWORD *)&v327[8] = 197896;
          v229 = sub_23958E4C8((uint64_t)v327);
          v230 = strlen(v229);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v230 != *(_QWORD *)&__s1[8])
              goto LABEL_369;
            if (v230 == -1)
LABEL_582:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v229, v230))
              goto LABEL_369;
LABEL_401:
            v246 = std::stod((const std::string *)v329[0] + v216, 0);
            *(float *)&__dst[1].__locale_ = v246;
            goto LABEL_320;
          }
          if (v230 == __s1[23])
          {
            if (v230 == -1)
              goto LABEL_582;
            if (!memcmp(__s1, v229, v230))
              goto LABEL_401;
          }
LABEL_369:
          strcpy(v327, "(AF\\MF[A\\Q");
          v231 = (const char *)sub_23958E518((uint64_t)v327);
          v232 = strlen(v231);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v232 != *(_QWORD *)&__s1[8])
              goto LABEL_378;
            if (v232 == -1)
LABEL_583:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v231, v232))
              goto LABEL_378;
LABEL_410:
            v249 = std::stod((const std::string *)v329[0] + v216, 0);
            *((float *)&__dst[1].__locale_ + 1) = v249;
            goto LABEL_320;
          }
          if (v232 == __s1[23])
          {
            if (v232 == -1)
              goto LABEL_583;
            if (!memcmp(__s1, v231, v232))
              goto LABEL_410;
          }
LABEL_378:
          *(_OWORD *)v327 = xmmword_239EC750C;
          sub_23958E55C((uint64_t)v327, (int32x4_t)xmmword_239EC750C, v233, v234, v235);
          v237 = v236;
          v238 = strlen(v236);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v238 != *(_QWORD *)&__s1[8])
              goto LABEL_387;
            if (v238 == -1)
LABEL_584:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v237, v238))
              goto LABEL_387;
LABEL_419:
            v252 = std::stod((const std::string *)v329[0] + v216, 0);
            *(float *)&__dst[2].__locale_ = v252;
            goto LABEL_320;
          }
          if (v238 == __s1[23])
          {
            if (v238 == -1)
              goto LABEL_584;
            if (!memcmp(__s1, v237, v238))
              goto LABEL_419;
          }
LABEL_387:
          strcpy(v327, "]><08/<-4%81.%");
          sub_23958E5E0((uint64_t)v327);
          v240 = v239;
          v241 = strlen(v239);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v241 != *(_QWORD *)&__s1[8])
              goto LABEL_396;
            if (v241 == -1)
LABEL_585:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v240, v241))
              goto LABEL_396;
LABEL_453:
            v270 = std::stod((const std::string *)v329[0] + v216, 0);
            *((float *)&__dst[2].__locale_ + 1) = v270;
            goto LABEL_320;
          }
          if (v241 == __s1[23])
          {
            if (v241 == -1)
              goto LABEL_585;
            if (!memcmp(__s1, v240, v241))
              goto LABEL_453;
          }
LABEL_396:
          strcpy(v327, "=^\\PXO\\MTEXQND");
          sub_23958E5E0((uint64_t)v327);
          v244 = v243;
          v245 = strlen(v243);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v245 != *(_QWORD *)&__s1[8])
              goto LABEL_405;
            if (v245 == -1)
LABEL_586:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v244, v245))
              goto LABEL_405;
LABEL_456:
            v273 = std::stod((const std::string *)v329[0] + v216, 0);
            *(float *)&__dst[3].__locale_ = v273;
            goto LABEL_320;
          }
          if (v245 == __s1[23])
          {
            if (v245 == -1)
              goto LABEL_586;
            if (!memcmp(__s1, v244, v245))
              goto LABEL_456;
          }
LABEL_405:
          *(_QWORD *)v327 = 0x6579716F726A1DLL;
          v247 = sub_23958E3FC(v327);
          v248 = strlen(v247);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v248 != *(_QWORD *)&__s1[8])
              goto LABEL_414;
            if (v248 == -1)
LABEL_589:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v247, v248))
              goto LABEL_414;
LABEL_319:
            v214 = std::stod((const std::string *)v329[0] + v216, 0);
            *((float *)&__dst[3].__locale_ + 1) = v214;
            goto LABEL_320;
          }
          if (v248 == __s1[23])
          {
            if (v248 == -1)
              goto LABEL_589;
            if (!memcmp(__s1, v247, v248))
              goto LABEL_319;
          }
LABEL_414:
          strcpy(v327, "\"UMPNF[");
          v250 = sub_23958E3FC(v327);
          v251 = strlen(v250);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v251 != *(_QWORD *)&__s1[8])
              goto LABEL_423;
            if (v251 == -1)
LABEL_590:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v250, v251))
              goto LABEL_423;
            goto LABEL_451;
          }
          if (v251 == __s1[23])
          {
            if (v251 == -1)
              goto LABEL_590;
            if (!memcmp(__s1, v250, v251))
              goto LABEL_451;
          }
LABEL_423:
          *(_QWORD *)v327 = 0xE1018061B0374;
          v253 = sub_23958E3FC(v327);
          v254 = strlen(v253);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v254 != *(_QWORD *)&__s1[8])
              goto LABEL_432;
            if (v254 == -1)
LABEL_593:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v253, v254))
              goto LABEL_432;
LABEL_455:
            v272 = std::stod((const std::string *)v329[0] + v216, 0);
            *((float *)&__dst[4].__locale_ + 1) = v272;
            goto LABEL_320;
          }
          if (v254 == __s1[23])
          {
            if (v254 == -1)
              goto LABEL_593;
            if (!memcmp(__s1, v253, v254))
              goto LABEL_455;
          }
LABEL_432:
          strcpy(v327, "K<\"/.(*&.9*;\"3.'83");
          sub_23958E450((uint64_t)v327, *(int32x4_t *)"K<\"/.(*&.9*;\"3.'83", v255, v256, v257);
          v259 = v258;
          v260 = strlen(v258);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v260 != *(_QWORD *)&__s1[8])
              goto LABEL_441;
            if (v260 == -1)
LABEL_594:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v259, v260))
              goto LABEL_441;
            goto LABEL_453;
          }
          if (v260 == __s1[23])
          {
            if (v260 == -1)
              goto LABEL_594;
            if (!memcmp(__s1, v259, v260))
              goto LABEL_453;
          }
LABEL_441:
          strcpy(v327, "K<\"/.(*&.9*;\"3.'82");
          sub_23958E450((uint64_t)v327, *(int32x4_t *)"K<\"/.(*&.9*;\"3.'82", v261, v262, v263);
          v265 = v264;
          v266 = strlen(v264);
          if ((__s1[23] & 0x80000000) != 0)
          {
            if (v266 != *(_QWORD *)&__s1[8])
              goto LABEL_449;
            if (v266 == -1)
LABEL_595:
              sub_239423B0C();
            if (memcmp(*(const void **)__s1, v265, v266))
              goto LABEL_449;
            goto LABEL_456;
          }
          if (v266 == __s1[23])
          {
            if (v266 == -1)
              goto LABEL_595;
            if (!memcmp(__s1, v265, v266))
              goto LABEL_456;
          }
LABEL_449:
          *(_QWORD *)v327 = 0x15081002030E1067;
          *(_DWORD *)&v327[8] = 2032395;
          v267 = sub_23958E4C8((uint64_t)v327);
          if (sub_239593B20(__s1, v267))
            goto LABEL_319;
          *(_QWORD *)v327 = 0x716C7466676A7403;
          strcpy(&v327[8], "ogz");
          v268 = sub_23958E4C8((uint64_t)v327);
          if (sub_239593B20(__s1, v268))
          {
LABEL_451:
            v269 = std::stod((const std::string *)v329[0] + v216, 0);
            *(float *)&__dst[4].__locale_ = v269;
          }
          else
          {
            *(_QWORD *)v327 = 0x6F726A7879746A1DLL;
            strcpy(&v327[8], "qyg");
            v271 = sub_23958E4C8((uint64_t)v327);
            if (sub_239593B20(__s1, v271))
              goto LABEL_455;
          }
LABEL_320:
          if ((__s1[23] & 0x80000000) == 0)
          {
            v209 += 32;
            if (v209 == v210)
              goto LABEL_457;
            continue;
          }
          break;
        }
        operator delete(*(void **)__s1);
        v209 += 32;
        if (v209 != v210)
          continue;
        break;
      }
LABEL_457:
      v213 = *(float32x2_t *)((char *)&__dst[3].__locale_ + 4);
      v174.i32[0] = HIDWORD(__dst[4].__locale_);
      v211 = (std::locale::__imp *)vdup_lane_s32(*(int32x2_t *)((char *)&__dst[3].__locale_ + 4), 1);
      v212 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(v213, v213), (float32x2_t)v211, *(float32x2_t *)((char *)&__dst[3].__locale_ + 4), 1), v174, v174).f32[0]);
      *((float *)&__dst[0].__locale_ + 1) = v212;
      HIDWORD(v211) = HIDWORD(__dst[4].__locale_);
      if (*((float *)&__dst[4].__locale_ + 1) < 0.0)
      {
        v211 = (std::locale::__imp *)vneg_f32((float32x2_t)v211);
        __dst[4].__locale_ = v211;
      }
LABEL_459:
      if (a3 > 0.0)
      {
        *((float *)&__dst[0].__locale_ + 1) = v212 * a3;
        *((float *)&__dst[3].__locale_ + 1) = v213.f32[0] * a3;
        __dst[4].__locale_ = (std::locale::__imp *)vmul_n_f32((float32x2_t)v211, a3);
      }
      sub_239595458(a2, (__int128 *)__dst);
      v274 = (void **)v329[1];
      v275 = (void **)v329[0];
      while (v274 != v275)
      {
        if (*((char *)v274 - 1) < 0)
          operator delete(*(v274 - 3));
        v274 -= 3;
      }
      v329[1] = v275;
      continue;
    }
    break;
  }
  v175 = 0;
  if (!v329[0])
    goto LABEL_558;
LABEL_551:
  v296 = (void **)v329[1];
  if (v329[1] == v208)
  {
    v329[1] = v208;
    operator delete(v208);
    if ((SBYTE7(v330[1]) & 0x80000000) == 0)
      goto LABEL_563;
    goto LABEL_562;
  }
  do
  {
    if (*((char *)v296 - 1) < 0)
      operator delete(*(v296 - 3));
    v296 -= 3;
  }
  while (v296 != v208);
  v329[1] = v208;
  operator delete(v329[0]);
  if (SBYTE7(v330[1]) < 0)
LABEL_562:
    operator delete(*(void **)&v330[0]);
LABEL_563:
  v297 = (void **)v316;
  if (v316)
  {
    v298 = v317;
    v299 = v316;
    if (v317 != v316)
    {
      do
      {
        if (*((char *)v298 - 9) < 0)
          operator delete(*(v298 - 4));
        v298 -= 4;
      }
      while (v298 != v297);
      v299 = v316;
    }
    v317 = v297;
    operator delete(v299);
  }
  v300 = *MEMORY[0x24BEDB7F0];
  v318[0] = v300;
  v302 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v301 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v318 + *(_QWORD *)(v300 - 24)) = v302;
  v303 = MEMORY[0x24BEDB848] + 16;
  v318[2] = v301;
  v318[3] = MEMORY[0x24BEDB848] + 16;
  if (v319 < 0)
    operator delete((void *)v318[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83E250](&v320);
  v321[0] = v300;
  *(_QWORD *)((char *)v321 + *(_QWORD *)(v300 - 24)) = v302;
  v321[2] = v301;
  v321[3] = v303;
  if (v322 < 0)
    operator delete((void *)v321[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83E250](&v323);
  if (SHIBYTE(v326) < 0)
    operator delete(v324);
  return v175;
}

void sub_239593388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_239593BB8(&a23);
  sub_239498ABC((uint64_t)&a26);
  sub_239498ABC((uint64_t)&a61);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_239593804(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  v7 = a1 + 16;
  v8 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24)) = v10;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 24));
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v8[4];
  v13 = v8[5];
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v7 + *(_QWORD *)(v12 - 24)) = v13;
  v14 = v8[1];
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + *(_QWORD *)(v14 - 24)) = v8[6];
  *(_QWORD *)a1 = v5 + 24;
  *(_QWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x24BEDB848];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 24) = v15 + 16;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a3;
  std::stringbuf::str();
  return a1;
}

void sub_239593924(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 111) < 0)
    operator delete(*v3);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83E250](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239593978@<X0>(_QWORD *result@<X0>, void **a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  void *v10;
  size_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;

  v4 = *((unsigned __int8 *)result + 23);
  v5 = (_QWORD *)*result;
  v6 = result[1];
  if ((v4 & 0x80u) == 0)
    v7 = result;
  else
    v7 = (_QWORD *)*result;
  if ((v4 & 0x80u) == 0)
    v8 = *((unsigned __int8 *)result + 23);
  else
    v8 = result[1];
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  if (!v8)
    goto LABEL_23;
  v12 = result;
  v13 = 0;
  if (!v11)
  {
    v14 = v8;
    if ((v4 & 0x80) != 0)
      goto LABEL_28;
    goto LABEL_25;
  }
  while (1)
  {
    result = memchr(v10, *((char *)v7 + v13), v11);
    if (!result)
      break;
    if (v8 == ++v13)
      goto LABEL_23;
  }
  if (v13 == -1)
  {
LABEL_23:
    a3[23] = 0;
    *a3 = 0;
    return result;
  }
  do
  {
    if (!v8)
    {
      v14 = 0;
      if ((v4 & 0x80) != 0)
        goto LABEL_28;
LABEL_25:
      if (v13 <= v4)
        goto LABEL_30;
LABEL_42:
      sub_239423B0C();
    }
    result = memchr(v10, *((char *)v7 + --v8), v11);
  }
  while (result);
  v14 = v8 + 1;
  if ((v4 & 0x80) == 0)
    goto LABEL_25;
LABEL_28:
  if (v6 < v13)
    goto LABEL_42;
  v4 = v6;
  v12 = v5;
LABEL_30:
  v15 = v14 - v13;
  if (v4 - v13 >= v15)
    v16 = v15;
  else
    v16 = v4 - v13;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v16 >= 0x17)
  {
    v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v17 = v16 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    *((_QWORD *)a3 + 1) = v16;
    *((_QWORD *)a3 + 2) = v18 | 0x8000000000000000;
    *(_QWORD *)a3 = v19;
    a3 = v19;
    goto LABEL_40;
  }
  a3[23] = v16;
  if (v16)
LABEL_40:
    result = memmove(a3, (char *)v12 + v13, v16);
  a3[v16] = 0;
  return result;
}

BOOL sub_239593B20(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_239423B0C();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void **sub_239593BB8(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239593C28(uint64_t *a1, uint64_t a2, float a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  float32x2_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  _QWORD *v34;
  float v35;
  float32x2_t v36;
  _QWORD *v37;
  uint64_t v38;
  void **v39;
  void *v40;
  void **v42;
  char v44[20];
  _BYTE v45[20];
  char __p[18];
  char v47;
  void *v48[2];
  char v49;
  void *v50[4];
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[3];
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  void *v62[2];
  void *v63;
  int v64;
  void *v65;
  _BYTE *v66;
  uint64_t v67;
  void *v68;
  _BYTE *v69;
  uint64_t v70;
  _DWORD *v71;
  _BYTE *v72;
  uint64_t v73;
  _DWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;

  v89 = 0;
  v90 = 0;
  v91 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v64 = 0;
  sub_2396157EC((uint64_t)v62, 1);
  v45[3] = 19;
  strcpy(v44, "depth_sensor_config");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF240;
  v5[1] = &v64;
  sub_23961580C((uint64_t)v62, (uint64_t)v44, (uint64_t)v5);
  v61 = 12;
  strcpy((char *)v60, "bank_indexes");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF270;
  v6[1] = &v89;
  sub_23961580C((uint64_t)v62, (uint64_t)v60, (uint64_t)v6);
  v59 = 12;
  strcpy((char *)v58, "spot_indexes");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADF270;
  v7[1] = &v86;
  sub_23961580C((uint64_t)v62, (uint64_t)v58, (uint64_t)v7);
  v57 = 12;
  strcpy((char *)v56, "echo_indexes");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADF270;
  v8[1] = &v83;
  sub_23961580C((uint64_t)v62, (uint64_t)v56, (uint64_t)v8);
  HIBYTE(v55[2]) = 19;
  strcpy((char *)v55, "euclidean_distances");
  v9 = (_QWORD *)operator new();
  *v9 = &off_250ADF2A0;
  v9[1] = &v80;
  sub_23961580C((uint64_t)v62, (uint64_t)v55, (uint64_t)v9);
  v54 = 11;
  strcpy((char *)v53, "confidences");
  v10 = (_QWORD *)operator new();
  *v10 = &off_250ADF2A0;
  v10[1] = &v77;
  sub_23961580C((uint64_t)v62, (uint64_t)v53, (uint64_t)v10);
  v52 = 11;
  strcpy((char *)v51, "intensities");
  v11 = (_QWORD *)operator new();
  *v11 = &off_250ADF2A0;
  v11[1] = &v74;
  sub_23961580C((uint64_t)v62, (uint64_t)v51, (uint64_t)v11);
  HIBYTE(v50[2]) = 19;
  strcpy((char *)v50, "signal_noise_ratios");
  v12 = (_QWORD *)operator new();
  *v12 = &off_250ADF2A0;
  v12[1] = &v71;
  sub_23961580C((uint64_t)v62, (uint64_t)v50, (uint64_t)v12);
  v49 = 15;
  strcpy((char *)v48, "image_xy_coords");
  v13 = (_QWORD *)operator new();
  *v13 = &off_250ADF2A0;
  v13[1] = &v68;
  sub_23961580C((uint64_t)v62, (uint64_t)v48, (uint64_t)v13);
  v47 = 17;
  strcpy(__p, "camera_xyz_coords");
  v14 = (_QWORD *)operator new();
  *v14 = &off_250ADF2A0;
  v14[1] = &v65;
  sub_23961580C((uint64_t)v62, (uint64_t)__p, (uint64_t)v14);
  if (v47 < 0)
  {
    operator delete(*(void **)__p);
    if ((v49 & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v50[2]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_45;
    }
  }
  else if ((v49 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v48[0]);
  if ((SHIBYTE(v50[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((v52 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v50[0]);
  if ((v52 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v54 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v51[0]);
  if ((v54 & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v53[0]);
  if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v57 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_49;
  }
LABEL_48:
  operator delete(v55[0]);
  if ((v57 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v59 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_50;
  }
LABEL_49:
  operator delete(v56[0]);
  if ((v59 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v61 & 0x80000000) == 0)
      goto LABEL_10;
LABEL_51:
    operator delete(v60[0]);
    if ((v45[3] & 0x80000000) == 0)
      goto LABEL_11;
LABEL_52:
    operator delete(*(void **)v44);
    goto LABEL_11;
  }
LABEL_50:
  operator delete(v58[0]);
  if (v61 < 0)
    goto LABEL_51;
LABEL_10:
  if ((v45[3] & 0x80000000) != 0)
    goto LABEL_52;
LABEL_11:
  if ((sub_23959479C((uint64_t)v62, a1) & 1) == 0
    || (*(_BYTE *)(a2 + 24) = v64, v17 = v89, v16 = v90, v18 = v90 - v89, v87 - v86 != v90 - v89)
    || v84 - v83 != v18
    || v18 != v78 - v77)
  {
    v31 = 0;
    v37 = v63;
    if (!v63)
      goto LABEL_62;
    goto LABEL_59;
  }
  if (3 * v18 != (v66 - (_BYTE *)v65) >> 2)
  {
    v31 = 0;
LABEL_54:
    v37 = v63;
    if (!v63)
      goto LABEL_62;
    do
    {
LABEL_59:
      v38 = v37[5];
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      v37 = (_QWORD *)*v37;
    }
    while (v37);
    v39 = (void **)v63;
    if (v63)
    {
      do
      {
        v42 = (void **)*v39;
        if (*((char *)v39 + 39) < 0)
          operator delete(v39[2]);
        operator delete(v39);
        v39 = v42;
      }
      while (v42);
    }
    goto LABEL_62;
  }
  v19 = *(_BYTE **)a2;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 3) < v18)
  {
    if (v18 >= 0x666666666666667)
      sub_2394189F8();
    v20 = *(_BYTE **)(a2 + 8);
    v21 = (char *)operator new(40 * v18);
    v22 = &v21[v20 - v19];
    v23 = v22;
    if (v20 != v19)
    {
      v24 = &v21[v20 - v19];
      do
      {
        v23 = v24 - 40;
        v25 = *(_OWORD *)(v20 - 40);
        *((_DWORD *)v24 - 6) = *((_DWORD *)v20 - 6);
        *(_OWORD *)(v24 - 40) = v25;
        *(_QWORD *)(v24 - 20) = *(_QWORD *)(v20 - 20);
        v26 = *(_QWORD *)(v20 - 12);
        *((_DWORD *)v24 - 1) = *((_DWORD *)v20 - 1);
        *(_QWORD *)(v24 - 12) = v26;
        v20 -= 40;
        v24 -= 40;
      }
      while (v20 != v19);
    }
    *(_QWORD *)a2 = v23;
    *(_QWORD *)(a2 + 8) = v22;
    *(_QWORD *)(a2 + 16) = &v21[40 * v18];
    if (v19)
      operator delete(v19);
  }
  if (v16 != v17)
  {
    v27 = 0;
    v28 = 0;
    v29 = 2 * v18;
    if (v18 <= 1)
      v30 = 1;
    else
      v30 = v18;
    v31 = 1;
    while (1)
    {
      *(_WORD *)v44 = 0;
      v44[2] = 0;
      *(_DWORD *)&v45[16] = 0;
      *(_OWORD *)&v44[4] = 0u;
      *(_OWORD *)v45 = 0u;
      v44[0] = v89[v28];
      v44[1] = v86[v28];
      v44[2] = v83[v28];
      *(_DWORD *)&v44[8] = v77[v28];
      v32 = *(_DWORD *)((char *)v65 + v27 + 8);
      *(_QWORD *)&v45[8] = *(_QWORD *)((char *)v65 + v27);
      *(_DWORD *)&v45[16] = v32;
      if (v18 == v75 - v74)
      {
        *(_DWORD *)&v44[12] = v74[v28];
        v33 = v71;
        if (v18 == (v72 - (_BYTE *)v71) >> 2)
          goto LABEL_39;
      }
      else
      {
        v33 = v71;
        if (v18 == (v72 - (_BYTE *)v71) >> 2)
        {
LABEL_39:
          *(_DWORD *)&v44[16] = v33[v28];
          v34 = v68;
          if (v29 != (v69 - (_BYTE *)v68) >> 2)
            goto LABEL_32;
LABEL_31:
          *(_QWORD *)v45 = v34[v28];
          goto LABEL_32;
        }
      }
      v34 = v68;
      if (v29 == (v69 - (_BYTE *)v68) >> 2)
        goto LABEL_31;
LABEL_32:
      v15.i32[0] = *(_DWORD *)&v45[16];
      v36 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v45[8], 1);
      v35 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v45[8], *(float32x2_t *)&v45[8]), v36, *(float32x2_t *)&v45[8], 1), v15, v15).f32[0]);
      *(float *)&v44[4] = v35;
      v36.i32[1] = *(_DWORD *)&v45[16];
      if (*(float *)&v45[16] < 0.0)
      {
        v36 = vneg_f32(v36);
        *(float32x2_t *)&v45[12] = v36;
      }
      if (a3 > 0.0)
      {
        *(float *)&v44[4] = v35 * a3;
        *(float *)&v45[8] = *(float *)&v45[8] * a3;
        *(float32x2_t *)&v45[12] = vmul_n_f32(v36, a3);
      }
      sub_239595458((void **)a2, (__int128 *)v44);
      ++v28;
      v27 += 12;
      if (v30 == v28)
        goto LABEL_54;
    }
  }
  v31 = 1;
  v37 = v63;
  if (v63)
    goto LABEL_59;
LABEL_62:
  v40 = v62[0];
  v62[0] = 0;
  if (v40)
    operator delete(v40);
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  return v31;
}

void sub_2395944F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  uint64_t v56;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;

  sub_2395905C0((uint64_t)&a45);
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
    v58 = a55;
    if (!a55)
    {
LABEL_3:
      v59 = *(void **)(v56 - 248);
      if (!v59)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v58 = a55;
    if (!a55)
      goto LABEL_3;
  }
  a56 = (uint64_t)v58;
  operator delete(v58);
  v59 = *(void **)(v56 - 248);
  if (!v59)
  {
LABEL_4:
    v60 = *(void **)(v56 - 224);
    if (!v60)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(v56 - 240) = v59;
  operator delete(v59);
  v60 = *(void **)(v56 - 224);
  if (!v60)
  {
LABEL_5:
    v61 = *(void **)(v56 - 200);
    if (!v61)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v56 - 216) = v60;
  operator delete(v60);
  v61 = *(void **)(v56 - 200);
  if (!v61)
  {
LABEL_6:
    v62 = *(void **)(v56 - 176);
    if (!v62)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v56 - 192) = v61;
  operator delete(v61);
  v62 = *(void **)(v56 - 176);
  if (!v62)
  {
LABEL_7:
    v63 = *(void **)(v56 - 152);
    if (!v63)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v56 - 168) = v62;
  operator delete(v62);
  v63 = *(void **)(v56 - 152);
  if (!v63)
  {
LABEL_8:
    v64 = *(void **)(v56 - 128);
    if (!v64)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  *(_QWORD *)(v56 - 144) = v63;
  operator delete(v63);
  v64 = *(void **)(v56 - 128);
  if (!v64)
  {
LABEL_9:
    v65 = *(void **)(v56 - 104);
    if (!v65)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  *(_QWORD *)(v56 - 120) = v64;
  operator delete(v64);
  v65 = *(void **)(v56 - 104);
  if (!v65)
LABEL_10:
    _Unwind_Resume(a1);
LABEL_19:
  *(_QWORD *)(v56 - 96) = v65;
  operator delete(v65);
  _Unwind_Resume(a1);
}

void sub_23959472C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    JUMPOUT(0x23959463CLL);
  JUMPOUT(0x239594588);
}

void sub_23959473C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    JUMPOUT(0x239594590);
  JUMPOUT(0x23959464CLL);
}

void sub_23959474C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    JUMPOUT(0x239594654);
  JUMPOUT(0x2395945A0);
}

void sub_23959475C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
    JUMPOUT(0x2395945A8);
  JUMPOUT(0x239594664);
}

void sub_23959476C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0)
    JUMPOUT(0x23959466CLL);
  JUMPOUT(0x2395945B8);
}

void sub_23959477C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0)
    JUMPOUT(0x2395945C0);
  JUMPOUT(0x23959467CLL);
}

void sub_23959478C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    JUMPOUT(0x239594684);
  JUMPOUT(0x2395945D0);
}

uint64_t sub_23959479C(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  char v25;
  char v26;
  BOOL v27;
  std::string::size_type v28;
  char v29;
  char i;
  uint64_t *v31;
  char v32;
  int j;
  unsigned int v34;
  int v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string v39;
  uint64_t v40;
  void *__p;
  char v42;
  uint64_t v43;
  void *v44[2];
  uint64_t v45;

  v4 = std::istream::peek();
  if (!*(_BYTE *)(a1 + 40))
  {
    if (((v4 << 24) | 0x20000000) == 0x7B000000 || (v4 & 0xFFFFFFFC | 2) != 0xDE)
    {
      v16 = a2 + 4;
      v17 = MEMORY[0x24BDAC740];
      while (1)
      {
        v18 = std::istream::peek();
        if (v18 <= 0x7F)
        {
          v20 = *(_QWORD *)(*a2 - 24);
          if ((*(_DWORD *)(v17 + 4 * v18 + 60) & 0x4000) == 0)
          {
LABEL_30:
            if ((*((_BYTE *)a2 + v20 + 32) & 2) != 0)
              return 1;
            v44[0] = 0;
            v44[1] = 0;
            v45 = 0;
            if (!*(_BYTE *)(a1 + 41))
            {
              if (*(_QWORD *)(a1 + 24))
              {
                v15 = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 40)
                                                                           + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), a2, *(unsigned __int8 *)(a1 + 40));
                v25 = 1;
                if (SHIBYTE(v45) < 0)
                  goto LABEL_95;
                goto LABEL_86;
              }
              v15 = 1;
              goto LABEL_85;
            }
            if (std::istream::get() != 123)
              goto LABEL_51;
            while (1)
            {
              v21 = std::istream::peek();
              if (v21 <= 0x7F)
              {
                v23 = *(_QWORD *)(*a2 - 24);
                if ((*(_DWORD *)(v17 + 4 * v21 + 60) & 0x4000) == 0)
                {
LABEL_48:
                  if ((*((_BYTE *)a2 + v23 + 32) & 2) == 0)
                  {
                    v26 = std::istream::peek();
                    if ((*((_BYTE *)v16 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
                    {
                      v29 = 1;
                      goto LABEL_92;
                    }
                    v27 = v26 == 125;
                    v28 = *MEMORY[0x24BEDB7F0];
                    v37 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v29 = 1;
                    v36 = MEMORY[0x24BEDB848] + 16;
LABEL_55:
                    while ((v29 & 1) != 0 && !v27)
                    {
                      if (!sub_239595A48((uint64_t)v44, a2))
                        goto LABEL_52;
                      for (i = std::istream::peek();
                            i != 58 && !*(_DWORD *)((char *)v16 + *(_QWORD *)(*a2 - 24));
                            i = std::istream::peek())
                      {
                        std::istream::get();
                      }
                      if (*(_DWORD *)((char *)v16 + *(_QWORD *)(*a2 - 24)))
                        goto LABEL_52;
                      std::istream::get();
                      v31 = sub_2395965C8((_QWORD *)a1, (uint64_t)v44);
                      if (v31)
                      {
                        sub_2394988CC((uint64_t)&v39);
                        if (sub_239596128(a2))
                        {
                          v32 = (*(uint64_t (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)v31[5] + 24))(v31[5], &v39, *(unsigned __int8 *)(a1 + 40));
                          v29 = v32;
                        }
                        else
                        {
                          v32 = 0;
                        }
                        v39.__r_.__value_.__r.__words[0] = v28;
                        *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + *(_QWORD *)(v28 - 24)) = v38;
                        v39.__r_.__value_.__r.__words[2] = v37;
                        v40 = v36;
                        if (v42 < 0)
                          operator delete(__p);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x23B83E250](&v43);
                        if ((v32 & 1) == 0)
                          goto LABEL_52;
                      }
                      else if (!sub_239595C9C(a2))
                      {
                        goto LABEL_52;
                      }
                      for (j = std::istream::peek(); ; j = std::istream::peek())
                      {
                        v34 = j << 24;
                        if (j << 24 == 738197504)
                          goto LABEL_82;
                        if (v34 == 2097152000)
                        {
                          v27 = 1;
                          if ((*((_BYTE *)v16 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
                            goto LABEL_92;
                          goto LABEL_55;
                        }
                        v35 = v34 <= 0x7F000000
                            ? *(_DWORD *)(v17 + 4 * (char)j + 60) & 0x4000
                            : __maskrune((char)j, 0x4000uLL);
                        if (!v35 || (*((_BYTE *)v16 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
                          break;
                        std::istream::get();
                      }
                      if (v34 != 738197504)
                        goto LABEL_52;
LABEL_82:
                      std::istream::get();
                      v27 = 0;
                      if ((*((_BYTE *)v16 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
                        break;
                    }
LABEL_92:
                    if (sub_2395959B4(a2))
                    {
                      v15 = v29 & 1;
                      if (std::istream::get() != 125)
                      {
                        v25 = 0;
                        if (SHIBYTE(v45) < 0)
                          goto LABEL_95;
LABEL_86:
                        if ((v25 & 1) == 0)
                          return 0;
LABEL_96:
                        if (!v15)
                          return 0;
                        return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
                      }
LABEL_85:
                      v25 = 1;
                      if ((SHIBYTE(v45) & 0x80000000) == 0)
                        goto LABEL_86;
LABEL_95:
                      operator delete(v44[0]);
                      if ((v25 & 1) == 0)
                        return 0;
                      goto LABEL_96;
                    }
LABEL_52:
                    v25 = 0;
                    v15 = v29 & 1;
                    if (SHIBYTE(v45) < 0)
                      goto LABEL_95;
                    goto LABEL_86;
                  }
LABEL_51:
                  v29 = 1;
                  goto LABEL_52;
                }
              }
              else
              {
                v22 = __maskrune(v21, 0x4000uLL);
                v23 = *(_QWORD *)(*a2 - 24);
                if (!v22)
                  goto LABEL_48;
              }
              if (!*(_DWORD *)((char *)v16 + v23))
                std::istream::get();
            }
          }
        }
        else
        {
          v19 = __maskrune(v18, 0x4000uLL);
          v20 = *(_QWORD *)(*a2 - 24);
          if (!v19)
            goto LABEL_30;
        }
        if (!*(_DWORD *)((char *)v16 + v20))
          std::istream::get();
      }
    }
    *(_BYTE *)(a1 + 40) = 1;
    v5 = std::istream::peek() & 0xFFFFFFFE;
    if (v5 != 220)
      goto LABEL_3;
LABEL_42:
    *(_BYTE *)(a1 + 41) = 0;
    if (*(_QWORD *)(a1 + 24)
      && ((*(uint64_t (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 40) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), a2, *(unsigned __int8 *)(a1 + 40)) & 1) == 0)
    {
      return 0;
    }
    return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
  }
  v5 = std::istream::peek() & 0xFFFFFFFE;
  if (v5 == 220)
    goto LABEL_42;
LABEL_3:
  if (v5 != 222)
    return 0;
  *(_BYTE *)(a1 + 41) = 1;
  v6 = std::istream::get();
  v7 = sub_2396162D4((uint64_t)a2, v6);
  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    return 0;
  v8 = v7;
  memset(&v39, 0, sizeof(v39));
  if (!v7)
    return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
  v9 = 0;
  v10 = 1;
  while (1)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v11 = std::istream::get();
      v12 = sub_2396162D4((uint64_t)a2, v11);
      if (v12)
      {
        std::string::resize(&v39, v12, 0);
        std::istream::read();
      }
      else if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      {
        *v39.__r_.__value_.__l.__data_ = 0;
        v39.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v39.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v39.__r_.__value_.__s + 23) = 0;
      }
    }
    else
    {
      sub_239595A48((uint64_t)&v39, a2);
    }
    v13 = sub_2395965C8((_QWORD *)a1, (uint64_t)&v39);
    if (v13)
      break;
    v14 = std::istream::get();
    if ((sub_2396163F8(a2, v14) & 1) == 0)
    {
LABEL_19:
      v15 = 1;
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_89;
    }
LABEL_7:
    v10 = ++v9 < v8;
    if (v8 == v9)
      goto LABEL_19;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v13[5] + 24))(v13[5], a2, *(unsigned __int8 *)(a1 + 40)))
  {
    goto LABEL_7;
  }
  v15 = 0;
  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_20:
    if (!v10)
      goto LABEL_96;
    return 0;
  }
LABEL_89:
  operator delete(v39.__r_.__value_.__l.__data_);
  if (!v10)
    goto LABEL_96;
  return 0;
}

void sub_239594DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 89) < 0)
    operator delete(*(void **)(v21 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t sub_239594E58(uint64_t *a1, uint64_t a2, float a3)
{
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  __int128 v9;
  char *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t i;
  __int128 *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  void **v39;
  void *v40;
  void *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 __p;
  uint64_t v48;
  char v49;
  _OWORD v50[2];
  void *v51[2];
  void *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;

  v56 = 0;
  v57 = 0;
  v58 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  sub_2396157EC((uint64_t)v51, 1);
  HIBYTE(v48) = 10;
  strcpy((char *)&__p, "timestamps");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF2D0;
  v5[1] = &v56;
  sub_23961580C((uint64_t)v51, (uint64_t)&__p, (uint64_t)v5);
  BYTE7(v50[1]) = 18;
  strcpy((char *)v50, "depth_point_clouds");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF300;
  v6[1] = &v53;
  sub_23961580C((uint64_t)v51, (uint64_t)v50, (uint64_t)v6);
  if (SBYTE7(v50[1]) < 0)
  {
    operator delete(*(void **)&v50[0]);
    if ((SHIBYTE(v48) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_15:
    operator delete((void *)__p);
    goto LABEL_3;
  }
  if (SHIBYTE(v48) < 0)
    goto LABEL_15;
LABEL_3:
  if (sub_23959479C((uint64_t)v51, a1))
  {
    v7 = v56;
    if (v56 != v57)
      goto LABEL_31;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), 0);
  std::istream::seekg();
  BYTE7(v50[1]) = 0;
  LOBYTE(v50[0]) = 0;
  __p = 0uLL;
  v49 = 0;
  v48 = 0;
  if ((sub_239593C28(a1, (uint64_t)&__p, a3) & 1) != 0)
  {
    v8 = v57;
    if ((unint64_t)v57 >= v58)
    {
      v57 = sub_23959AE70(&v56, (uint64_t)v50);
      v10 = v54;
      if ((unint64_t)v54 < v55)
        goto LABEL_23;
    }
    else
    {
      if ((SBYTE7(v50[1]) & 0x80000000) == 0)
      {
        v9 = v50[0];
        *((_QWORD *)v57 + 2) = *(_QWORD *)&v50[1];
        *(_OWORD *)v8 = v9;
        v57 = v8 + 24;
        v10 = v54;
        if ((unint64_t)v54 >= v55)
          goto LABEL_9;
LABEL_23:
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = 0;
        v14 = __p;
        v15 = *((_QWORD *)&__p + 1) - __p;
        if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
        {
          v16 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 3);
          if (v16 >= 0x666666666666667)
            sub_2394189F8();
          v17 = (char *)operator new(v15);
          v18 = 0;
          *(_QWORD *)v10 = v17;
          *((_QWORD *)v10 + 1) = v17;
          *((_QWORD *)v10 + 2) = &v17[40 * v16];
          do
          {
            v19 = v14 + v18;
            v20 = &v17[v18];
            v21 = *(_OWORD *)(v14 + v18);
            *((_DWORD *)v20 + 4) = *(_DWORD *)(v14 + v18 + 16);
            *(_OWORD *)v20 = v21;
            *(_QWORD *)(v20 + 20) = *(_QWORD *)(v14 + v18 + 20);
            v22 = *(_QWORD *)(v14 + v18 + 28);
            *((_DWORD *)v20 + 9) = *(_DWORD *)(v14 + v18 + 36);
            *(_QWORD *)(v20 + 28) = v22;
            v18 += 40;
          }
          while (v19 + 40 != *((_QWORD *)&v14 + 1));
          *((_QWORD *)v10 + 1) = &v17[v18];
        }
        v10[24] = v49;
        v54 = v10 + 32;
        v11 = (void *)__p;
        if (!(_QWORD)__p)
        {
LABEL_11:
          if (SBYTE7(v50[1]) < 0)
          {
            operator delete(*(void **)&v50[0]);
            v7 = v56;
            if (v57 == v56)
              goto LABEL_39;
          }
          else
          {
            v7 = v56;
            if (v57 == v56)
              goto LABEL_39;
          }
LABEL_31:
          v23 = 0;
          do
          {
            v25 = v53;
            if (a3 > 0.0)
            {
              v26 = &v53[32 * v23];
              v27 = *(_QWORD *)v26;
              for (i = *((_QWORD *)v26 + 1); v27 != i; v27 += 40)
              {
                *(float *)(v27 + 4) = *(float *)(v27 + 4) * a3;
                *(float32x2_t *)(v27 + 28) = vmul_n_f32(*(float32x2_t *)(v27 + 28), a3);
                *(float *)(v27 + 36) = *(float *)(v27 + 36) * a3;
              }
            }
            v29 = (__int128 *)&v7[24 * v23];
            v30 = (uint64_t *)&v25[32 * v23];
            v31 = *(_QWORD *)(a2 + 8);
            if (v31 >= *(_QWORD *)(a2 + 16))
            {
              v24 = sub_23959E944((void **)a2, v29, v30);
            }
            else
            {
              sub_23959EB4C(*(_QWORD **)(a2 + 8), v29, v30);
              v24 = (char *)(v31 + 56);
              *(_QWORD *)(a2 + 8) = v31 + 56;
            }
            *(_QWORD *)(a2 + 8) = v24;
            ++v23;
            v7 = v56;
          }
          while (v23 < 0xAAAAAAAAAAAAAAABLL * ((v57 - v56) >> 3));
LABEL_39:
          v12 = 1;
          v13 = v52;
          if (!v52)
            goto LABEL_45;
          goto LABEL_42;
        }
LABEL_10:
        *((_QWORD *)&__p + 1) = v11;
        operator delete(v11);
        goto LABEL_11;
      }
      sub_23941A7F8(v57, *(void **)&v50[0], *((unint64_t *)&v50[0] + 1));
      v57 = v8 + 24;
      v10 = v54;
      if ((unint64_t)v54 < v55)
        goto LABEL_23;
    }
LABEL_9:
    v54 = sub_23959B044((void **)&v53, (uint64_t *)&__p);
    v11 = (void *)__p;
    if (!(_QWORD)__p)
      goto LABEL_11;
    goto LABEL_10;
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (SBYTE7(v50[1]) < 0)
    operator delete(*(void **)&v50[0]);
  v12 = 0;
  v13 = v52;
  if (v52)
  {
    do
    {
LABEL_42:
      v32 = v13[5];
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      v13 = (_QWORD *)*v13;
    }
    while (v13);
    v33 = (void **)v52;
    if (v52)
    {
      do
      {
        v39 = (void **)*v33;
        if (*((char *)v33 + 39) < 0)
          operator delete(v33[2]);
        operator delete(v33);
        v33 = v39;
      }
      while (v39);
    }
  }
LABEL_45:
  v34 = v51[0];
  v51[0] = 0;
  if (v34)
    operator delete(v34);
  v35 = v53;
  if (v53)
  {
    v36 = v54;
    v37 = v53;
    if (v54 != v53)
    {
      v38 = v54;
      do
      {
        v41 = (void *)*((_QWORD *)v38 - 4);
        v38 -= 32;
        v40 = v41;
        if (v41)
        {
          *((_QWORD *)v36 - 3) = v40;
          operator delete(v40);
        }
        v36 = v38;
      }
      while (v38 != v35);
      v37 = v53;
    }
    v54 = v35;
    operator delete(v37);
  }
  v42 = v56;
  if (v56)
  {
    v43 = v57;
    v44 = v56;
    if (v57 != v56)
    {
      do
      {
        if (*(v43 - 1) < 0)
          operator delete(*((void **)v43 - 3));
        v43 -= 24;
      }
      while (v43 != v42);
      v44 = v56;
    }
    v57 = v42;
    operator delete(v44);
  }
  return v12;
}

void sub_239595378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = v25;
  *(_QWORD *)(v26 - 64) = v27;
  if (__p)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  sub_2395905C0((uint64_t)&a25);
  sub_23953C0FC((void **)(v26 - 96));
  sub_23941B08C((void **)(v26 - 72));
  _Unwind_Resume(a1);
}

void sub_239595458(void **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    v6 = *a2;
    *((_DWORD *)v5 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v5 = v6;
    *(_QWORD *)(v5 + 20) = *(_QWORD *)((char *)a2 + 20);
    v7 = *(_QWORD *)((char *)a2 + 28);
    *((_DWORD *)v5 + 9) = *((_DWORD *)a2 + 9);
    *(_QWORD *)(v5 + 28) = v7;
    v8 = v5 + 40;
LABEL_3:
    a1[1] = v8;
    return;
  }
  v9 = (char *)*a1;
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
  v11 = v10 + 1;
  if (v10 + 1 > 0x666666666666666)
    sub_2394189F8();
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (_QWORD)v9) >> 3);
  if (2 * v12 > v11)
    v11 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 > 0x666666666666666)
      sub_239418A80();
    v14 = (char *)operator new(40 * v13);
  }
  else
  {
    v14 = 0;
  }
  v15 = &v14[40 * v10];
  *(_OWORD *)v15 = *a2;
  *((_DWORD *)v15 + 4) = *((_DWORD *)a2 + 4);
  *(_QWORD *)(v15 + 20) = *(_QWORD *)((char *)a2 + 20);
  *(_QWORD *)(v15 + 28) = *(_QWORD *)((char *)a2 + 28);
  *((_DWORD *)v15 + 9) = *((_DWORD *)a2 + 9);
  v8 = v15 + 40;
  if (v5 != v9)
  {
    do
    {
      v16 = *(_OWORD *)(v5 - 40);
      *((_DWORD *)v15 - 6) = *((_DWORD *)v5 - 6);
      *(_OWORD *)(v15 - 40) = v16;
      *(_QWORD *)(v15 - 20) = *(_QWORD *)(v5 - 20);
      v17 = *(_QWORD *)(v5 - 12);
      *((_DWORD *)v15 - 1) = *((_DWORD *)v5 - 1);
      *(_QWORD *)(v15 - 12) = v17;
      v15 -= 40;
      v5 -= 40;
    }
    while (v5 != v9);
    v5 = (char *)*a1;
  }
  *a1 = v15;
  a1[1] = v8;
  a1[2] = &v14[40 * v13];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v8;
}

uint64_t sub_2395955F0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  std::string __p;

  if (a3)
  {
    std::ostream::put();
    LODWORD(v5) = *(unsigned __int8 *)(a1 + 23);
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(a1 + 8);
    LODWORD(__p.__r_.__value_.__l.__data_) = v5;
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    return a2;
  }
  std::ostream::put();
  memset(&__p, 0, sizeof(__p));
  sub_239595740(&__p, (uint64_t *)a1);
  std::ostream::write();
  std::ostream::put();
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return a2;
  operator delete(__p.__r_.__value_.__l.__data_);
  return a2;
}

void sub_239595724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239595740(std::string *this, uint64_t *a2)
{
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v4 = *((char *)a2 + 23) < 0;
  v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = a2[1];
  if (v5)
  {
    v6 = 0;
    do
    {
      if (v4)
        v8 = (uint64_t *)*a2;
      else
        v8 = a2;
      v9 = *((char *)v8 + v6);
      switch(v9)
      {
        case 8:
          std::string::append(this, "\\b");
          break;
        case 9:
          std::string::append(this, "\\t");
          break;
        case 10:
          std::string::append(this, "\\n");
          break;
        case 11:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
          goto LABEL_8;
        case 12:
          std::string::append(this, "\\f");
          break;
        case 13:
          std::string::append(this, "\\r");
          break;
        case 34:
          std::string::append(this, "\\\"");
          break;
        default:
          if (v9 == 92)
            std::string::append(this, "\\\\");
          else
LABEL_8:
            std::string::push_back(this, v9);
          break;
      }
      ++v6;
      v4 = *((char *)a2 + 23) < 0;
      v7 = *((unsigned __int8 *)a2 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = a2[1];
    }
    while (v6 < v7);
  }
}

uint64_t *sub_2395958D8(uint64_t a1, uint64_t *a2, int a3)
{
  int v5;
  unsigned int v6;

  if (a3)
  {
    v5 = std::istream::get();
    v6 = sub_2396162D4((uint64_t)a2, v5);
    if (v6)
    {
      std::string::resize((std::string *)a1, v6, 0);
      std::istream::read();
      return a2;
    }
    else
    {
      if (*(char *)(a1 + 23) < 0)
      {
        **(_BYTE **)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 23) = 0;
      }
      return a2;
    }
  }
  else
  {
    sub_239595A48(a1, a2);
    return a2;
  }
}

BOOL sub_2395959B4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;

  v2 = a1 + 4;
  v3 = MEMORY[0x24BDAC740];
  while (1)
  {
    v4 = std::istream::peek();
    if (v4 <= 0x7F)
      break;
    v5 = __maskrune(v4, 0x4000uLL);
    v6 = *(_QWORD *)(*a1 - 24);
    if (!v5)
      return (*((_BYTE *)a1 + v6 + 32) & 2) == 0;
LABEL_6:
    if (!*(_DWORD *)((char *)v2 + v6))
      std::istream::get();
  }
  v6 = *(_QWORD *)(*a1 - 24);
  if ((*(_DWORD *)(v3 + 4 * v4 + 60) & 0x4000) != 0)
    goto LABEL_6;
  return (*((_BYTE *)a1 + v6 + 32) & 2) == 0;
}

BOOL sub_239595A48(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  unsigned __int8 v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  std::string::value_type v10;
  int v11;

  if (*(char *)(a1 + 23) < 0)
  {
    **(_BYTE **)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v4 = a2 + 4;
    if (std::istream::peek() == 34)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 23) = 0;
    v4 = a2 + 4;
    if (std::istream::peek() == 34)
      goto LABEL_7;
  }
  do
  {
    if (*(_DWORD *)((char *)v4 + *(_QWORD *)(*a2 - 24)))
      break;
    std::istream::get();
  }
  while (std::istream::peek() != 34);
LABEL_7:
  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    return 0;
  std::istream::get();
  if (std::istream::peek() == 34 || *(_DWORD *)((char *)v4 + *(_QWORD *)(*a2 - 24)))
    return 0;
  v6 = std::istream::get();
  v7 = v6;
  v8 = v6 == 92;
  if (v6 != 92)
    std::string::push_back((std::string *)a1, v6);
  if (std::istream::peek() != 34 || v7 == 92)
  {
    while (1)
    {
      v9 = *a2;
      if (*(_DWORD *)((char *)v4 + *(_QWORD *)(*a2 - 24)))
        return *(_DWORD *)((char *)a2 + *(_QWORD *)(v9 - 24) + 32) == 0;
      v11 = std::istream::get();
      if (v11 << 24 != 1543503872)
        break;
      if (v8)
      {
        v10 = 92;
LABEL_19:
        std::string::push_back((std::string *)a1, v10);
        v8 = 0;
        if (std::istream::peek() == 34)
        {
LABEL_20:
          if (!v8)
            goto LABEL_15;
        }
      }
      else
      {
        v8 = 1;
        if (std::istream::peek() == 34)
          goto LABEL_20;
      }
    }
    v10 = v11;
    if (v8)
    {
      switch((char)v11)
      {
        case 'b':
          v10 = 8;
          break;
        case 'c':
        case 'd':
        case 'e':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'o':
        case 'p':
        case 'q':
        case 's':
          goto LABEL_31;
        case 'f':
          v10 = 12;
          break;
        case 'n':
          v10 = 10;
          break;
        case 'r':
          v10 = 13;
          break;
        case 't':
          v10 = 9;
          break;
        default:
          if ((char)v11 == 34)
            v10 = 34;
          else
LABEL_31:
            std::string::push_back((std::string *)a1, 92);
          break;
      }
    }
    goto LABEL_19;
  }
LABEL_15:
  v9 = *a2;
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(v9 - 24) + 32) == 0;
}

BOOL sub_239595C9C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  BOOL v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  void **v32;
  void **v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  void *__p[2];
  __int128 v40;
  __int128 v41;

  v40 = 0u;
  v41 = 0u;
  *(_OWORD *)__p = 0u;
  v2 = a1 + 4;
  v3 = MEMORY[0x24BDAC740];
  while (1)
  {
    v4 = std::istream::peek();
    if (v4 <= 0x7F)
      break;
    v5 = __maskrune(v4, 0x4000uLL);
    v6 = *(_QWORD *)(*a1 - 24);
    if (!v5)
      goto LABEL_8;
LABEL_6:
    if (!*(_DWORD *)((char *)v2 + v6))
      std::istream::get();
  }
  v6 = *(_QWORD *)(*a1 - 24);
  if ((*(_DWORD *)(v3 + 4 * v4 + 60) & 0x4000) != 0)
    goto LABEL_6;
LABEL_8:
  if ((*((_BYTE *)a1 + v6 + 32) & 2) == 0)
  {
    v7 = std::istream::peek();
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *((_QWORD *)&v41 + 1);
      v11 = v7 << 24;
      if (!*((_QWORD *)&v41 + 1)
        && (v11 <= 0x7F000000
          ? (v10 = 0, v12 = *(_DWORD *)(v3 + 4 * (char)v7 + 60) & 0x4000)
          : (v12 = __maskrune((char)v7, 0x4000uLL), v10 = *((_QWORD *)&v41 + 1)),
            v11 != 738197504 ? (v13 = v12 == 0) : (v13 = 0),
            v13 ? (v14 = (v7 & 0xDF) == 93) : (v14 = 1),
            v14 ? (v15 = 0) : (v15 = 1),
            ((v15 | v8) & 1) == 0 && !v10)
        || (*((_BYTE *)v2 + *(_QWORD *)(*a1 - 24)) & 2) != 0)
      {
        v31 = v10 == 0;
        v32 = (void **)__p[1];
        v33 = (void **)v40;
        *((_QWORD *)&v41 + 1) = 0;
        v34 = v40 - (unint64_t)__p[1];
        if ((unint64_t)v40 - (unint64_t)__p[1] >= 0x11)
          goto LABEL_65;
        goto LABEL_66;
      }
      std::istream::get();
      if (v11 == 570425344)
      {
        v8 = (v8 & 1) == 0 || v9;
        v9 = 0;
      }
      else if ((v8 & 1) != 0)
      {
        v16 = !v9 && v9;
        v8 = 1;
        if (v11 == 1543503872)
          v9 = !v9;
        else
          v9 = v16;
      }
      else
      {
        v8 = 0;
        if (v11 > 2063597567)
        {
          if (v11 != 2097152000)
          {
            if (v11 != 2063597568)
              goto LABEL_14;
            v21 = (char *)__p[1];
            v22 = (((_QWORD)v40 - (unint64_t)__p[1]) << 9) - 1;
            if ((void *)v40 == __p[1])
              v22 = 0;
            v23 = *((_QWORD *)&v41 + 1) + v41;
            if (v22 == *((_QWORD *)&v41 + 1) + (_QWORD)v41)
            {
              sub_2395967F4((uint64_t)__p);
              v21 = (char *)__p[1];
              v23 = *((_QWORD *)&v41 + 1) + v41;
            }
            v8 = 0;
            v24 = *(_QWORD *)&v21[(v23 >> 9) & 0x7FFFFFFFFFFFF8];
            v25 = v23 & 0xFFF;
            v26 = 123;
            goto LABEL_56;
          }
          v17 = *((_QWORD *)&v41 + 1);
          v18 = v41;
          v19 = *((_QWORD *)&v41 + 1) - 1;
          v20 = __p[1];
          if (*(_BYTE *)(*(_QWORD *)((char *)__p[1]
                                    + (((unint64_t)(*((_QWORD *)&v41 + 1) - 1 + v41) >> 9) & 0x7FFFFFFFFFFFF8))
                        + ((*((_QWORD *)&v41 + 1) - 1 + v41) & 0xFFF)) != 123)
            break;
        }
        else
        {
          if (v11 == 1526726656)
          {
            v27 = (char *)__p[1];
            v28 = (((_QWORD)v40 - (unint64_t)__p[1]) << 9) - 1;
            if ((void *)v40 == __p[1])
              v28 = 0;
            v29 = *((_QWORD *)&v41 + 1) + v41;
            if (v28 == *((_QWORD *)&v41 + 1) + (_QWORD)v41)
            {
              sub_2395967F4((uint64_t)__p);
              v27 = (char *)__p[1];
              v29 = *((_QWORD *)&v41 + 1) + v41;
            }
            v8 = 0;
            v24 = *(_QWORD *)&v27[(v29 >> 9) & 0x7FFFFFFFFFFFF8];
            v25 = v29 & 0xFFF;
            v26 = 91;
LABEL_56:
            *(_BYTE *)(v24 + v25) = v26;
            ++*((_QWORD *)&v41 + 1);
            goto LABEL_14;
          }
          if (v11 != 1560281088)
            goto LABEL_14;
          v17 = *((_QWORD *)&v41 + 1);
          v18 = v41;
          v19 = *((_QWORD *)&v41 + 1) - 1;
          v20 = __p[1];
          if (*(_BYTE *)(*(_QWORD *)((char *)__p[1]
                                    + (((unint64_t)(*((_QWORD *)&v41 + 1) - 1 + v41) >> 9) & 0x7FFFFFFFFFFFF8))
                        + ((*((_QWORD *)&v41 + 1) - 1 + v41) & 0xFFF)) != 91)
            break;
        }
        *((_QWORD *)&v41 + 1) = v19;
        if ((void *)v40 == v20)
          v30 = 0;
        else
          v30 = (((_QWORD)v40 - (_QWORD)v20) << 9) - 1;
        if ((unint64_t)(v30 - (v17 + v18) + 1) >= 0x2000)
        {
          operator delete(*(void **)(v40 - 8));
          v8 = 0;
          *(_QWORD *)&v40 = v40 - 8;
        }
        else
        {
          v8 = 0;
        }
      }
LABEL_14:
      v7 = std::istream::peek();
    }
  }
  v31 = 0;
  v32 = (void **)__p[1];
  v33 = (void **)v40;
  *((_QWORD *)&v41 + 1) = 0;
  v34 = v40 - (unint64_t)__p[1];
  if ((unint64_t)v40 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
LABEL_65:
      operator delete(*v32);
      v33 = (void **)v40;
      v32 = (void **)((char *)__p[1] + 8);
      __p[1] = v32;
      v34 = v40 - (_QWORD)v32;
    }
    while ((_QWORD)v40 - (_QWORD)v32 > 0x10uLL);
  }
LABEL_66:
  v35 = v34 >> 3;
  if (v35 == 1)
  {
    v36 = 2048;
    goto LABEL_72;
  }
  if (v35 == 2)
  {
    v36 = 4096;
LABEL_72:
    *(_QWORD *)&v41 = v36;
  }
  if (v32 != v33)
  {
    do
    {
      v37 = *v32++;
      operator delete(v37);
    }
    while (v32 != v33);
    if ((void *)v40 != __p[1])
      *(_QWORD *)&v40 = v40 + (((unint64_t)__p[1] - v40 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  return v31;
}

void sub_2395960C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239596DB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2395960D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239596DB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2395960EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239596DB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239596100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239596DB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239596114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239596DB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_239596128(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  BOOL v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  void **v32;
  void **v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  void *__p[2];
  __int128 v40;
  __int128 v41;

  v40 = 0u;
  v41 = 0u;
  *(_OWORD *)__p = 0u;
  v2 = a1 + 4;
  v3 = MEMORY[0x24BDAC740];
  while (1)
  {
    v4 = std::istream::peek();
    if (v4 <= 0x7F)
      break;
    v5 = __maskrune(v4, 0x4000uLL);
    v6 = *(_QWORD *)(*a1 - 24);
    if (!v5)
      goto LABEL_8;
LABEL_6:
    if (!*(_DWORD *)((char *)v2 + v6))
      std::istream::get();
  }
  v6 = *(_QWORD *)(*a1 - 24);
  if ((*(_DWORD *)(v3 + 4 * v4 + 60) & 0x4000) != 0)
    goto LABEL_6;
LABEL_8:
  if ((*((_BYTE *)a1 + v6 + 32) & 2) == 0)
  {
    v7 = std::istream::peek();
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *((_QWORD *)&v41 + 1);
      v11 = v7 << 24;
      if (!*((_QWORD *)&v41 + 1)
        && (v11 <= 0x7F000000
          ? (v10 = 0, v12 = *(_DWORD *)(v3 + 4 * (char)v7 + 60) & 0x4000)
          : (v12 = __maskrune((char)v7, 0x4000uLL), v10 = *((_QWORD *)&v41 + 1)),
            v11 != 738197504 ? (v13 = v12 == 0) : (v13 = 0),
            v13 ? (v14 = (v7 & 0xDF) == 93) : (v14 = 1),
            v14 ? (v15 = 0) : (v15 = 1),
            ((v15 | v8) & 1) == 0 && !v10)
        || (*((_BYTE *)v2 + *(_QWORD *)(*a1 - 24)) & 2) != 0)
      {
        v31 = v10 == 0;
        v32 = (void **)__p[1];
        v33 = (void **)v40;
        *((_QWORD *)&v41 + 1) = 0;
        v34 = v40 - (unint64_t)__p[1];
        if ((unint64_t)v40 - (unint64_t)__p[1] >= 0x11)
          goto LABEL_65;
        goto LABEL_66;
      }
      std::istream::get();
      std::ostream::put();
      if (v11 == 570425344)
      {
        v8 = (v8 & 1) == 0 || v9;
        v9 = 0;
      }
      else if ((v8 & 1) != 0)
      {
        v16 = !v9 && v9;
        v8 = 1;
        if (v11 == 1543503872)
          v9 = !v9;
        else
          v9 = v16;
      }
      else
      {
        v8 = 0;
        if (v11 > 2063597567)
        {
          if (v11 != 2097152000)
          {
            if (v11 != 2063597568)
              goto LABEL_14;
            v21 = (char *)__p[1];
            v22 = (((_QWORD)v40 - (unint64_t)__p[1]) << 9) - 1;
            if ((void *)v40 == __p[1])
              v22 = 0;
            v23 = *((_QWORD *)&v41 + 1) + v41;
            if (v22 == *((_QWORD *)&v41 + 1) + (_QWORD)v41)
            {
              sub_2395967F4((uint64_t)__p);
              v21 = (char *)__p[1];
              v23 = *((_QWORD *)&v41 + 1) + v41;
            }
            v8 = 0;
            v24 = *(_QWORD *)&v21[(v23 >> 9) & 0x7FFFFFFFFFFFF8];
            v25 = v23 & 0xFFF;
            v26 = 123;
            goto LABEL_56;
          }
          v17 = *((_QWORD *)&v41 + 1);
          v18 = v41;
          v19 = *((_QWORD *)&v41 + 1) - 1;
          v20 = __p[1];
          if (*(_BYTE *)(*(_QWORD *)((char *)__p[1]
                                    + (((unint64_t)(*((_QWORD *)&v41 + 1) - 1 + v41) >> 9) & 0x7FFFFFFFFFFFF8))
                        + ((*((_QWORD *)&v41 + 1) - 1 + v41) & 0xFFF)) != 123)
            break;
        }
        else
        {
          if (v11 == 1526726656)
          {
            v27 = (char *)__p[1];
            v28 = (((_QWORD)v40 - (unint64_t)__p[1]) << 9) - 1;
            if ((void *)v40 == __p[1])
              v28 = 0;
            v29 = *((_QWORD *)&v41 + 1) + v41;
            if (v28 == *((_QWORD *)&v41 + 1) + (_QWORD)v41)
            {
              sub_2395967F4((uint64_t)__p);
              v27 = (char *)__p[1];
              v29 = *((_QWORD *)&v41 + 1) + v41;
            }
            v8 = 0;
            v24 = *(_QWORD *)&v27[(v29 >> 9) & 0x7FFFFFFFFFFFF8];
            v25 = v29 & 0xFFF;
            v26 = 91;
LABEL_56:
            *(_BYTE *)(v24 + v25) = v26;
            ++*((_QWORD *)&v41 + 1);
            goto LABEL_14;
          }
          if (v11 != 1560281088)
            goto LABEL_14;
          v17 = *((_QWORD *)&v41 + 1);
          v18 = v41;
          v19 = *((_QWORD *)&v41 + 1) - 1;
          v20 = __p[1];
          if (*(_BYTE *)(*(_QWORD *)((char *)__p[1]
                                    + (((unint64_t)(*((_QWORD *)&v41 + 1) - 1 + v41) >> 9) & 0x7FFFFFFFFFFFF8))
                        + ((*((_QWORD *)&v41 + 1) - 1 + v41) & 0xFFF)) != 91)
            break;
        }
        *((_QWORD *)&v41 + 1) = v19;
        if ((void *)v40 == v20)
          v30 = 0;
        else
          v30 = (((_QWORD)v40 - (_QWORD)v20) << 9) - 1;
        if ((unint64_t)(v30 - (v17 + v18) + 1) >= 0x2000)
        {
          operator delete(*(void **)(v40 - 8));
          v8 = 0;
          *(_QWORD *)&v40 = v40 - 8;
        }
        else
        {
          v8 = 0;
        }
      }
LABEL_14:
      v7 = std::istream::peek();
    }
  }
  v31 = 0;
  v32 = (void **)__p[1];
  v33 = (void **)v40;
  *((_QWORD *)&v41 + 1) = 0;
  v34 = v40 - (unint64_t)__p[1];
  if ((unint64_t)v40 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
LABEL_65:
      operator delete(*v32);
      v33 = (void **)v40;
      v32 = (void **)((char *)__p[1] + 8);
      __p[1] = v32;
      v34 = v40 - (_QWORD)v32;
    }
    while ((_QWORD)v40 - (_QWORD)v32 > 0x10uLL);
  }
LABEL_66:
  v35 = v34 >> 3;
  if (v35 == 1)
  {
    v36 = 2048;
    goto LABEL_72;
  }
  if (v35 == 2)
  {
    v36 = 4096;
LABEL_72:
    *(_QWORD *)&v41 = v36;
  }
  if (v32 != v33)
  {
    do
    {
      v37 = *v32++;
      operator delete(v37);
    }
    while (v32 != v33);
    if ((void *)v40 != __p[1])
      *(_QWORD *)&v40 = v40 + (((unint64_t)__p[1] - v40 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  return v31;
}

void sub_239596564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239596DB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239596578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239596DB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23959658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239596DB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2395965A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239596DB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2395965B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239596DB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395965C8(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_239428940((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_2395967F4(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x1000;
  v4 = v2 - 4096;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_239596D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_239596D6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239596D80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239596D98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239596DB0(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 4096;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239596E78(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_239596E9C(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  else
  {
    std::ostream::operator<<();
  }
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_239596F34(uint64_t a1, _QWORD *a2, int a3)
{
  sub_239596F74(*(_QWORD *)(a1 + 8), (uint64_t)a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t sub_239596F74(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (std::istream::get() == 198)
      std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    return a2;
  }
  else
  {
    MEMORY[0x23B83DD04](a2, a1);
    return a2;
  }
}

void sub_23959707C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395970A0(uint64_t a1, _QWORD *a2, int a3)
{
  sub_23959711C(*(_QWORD **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395970DC(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395979BC(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_23959711C(_QWORD *a1, _QWORD *a2, int a3)
{
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  char *v10;
  char *v11;
  char v12;
  __int128 __p;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  if (a3)
  {
    if ((a1[1] - *a1) >> 32)
    {
      std::ostream::put();
      v5 = a1[1] - *a1;
      if (v5 <= 0x7FFFFFFF * (v5 / 0x7FFFFFFF))
        v6 = v5 / 0x7FFFFFFF;
      else
        v6 = v5 / 0x7FFFFFFF + 1;
      v16 = 2;
      v17 = v6;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      HIBYTE(v14) = 7;
      strcpy((char *)&__p, "content");
      std::ostream::put();
      v18 = 7;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v7 = a1[1] - *a1;
      if (v7)
      {
        v8 = 0;
        do
        {
          v14 = a1;
          v15 = 0;
          *(_QWORD *)&__p = v8;
          v8 += 0x7FFFFFFFLL;
          if (v7 >= v8)
            v7 = v8;
          *((_QWORD *)&__p + 1) = v7;
          sub_239597588((uint64_t)&__p, a2);
          v7 = a1[1] - *a1;
        }
        while (v8 < v7);
      }
      return a2;
    }
    else
    {
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      return a2;
    }
  }
  else
  {
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    std::ostream::put();
    if (v11 != v10)
    {
      while (1)
      {
        v12 = *v11++;
        LOBYTE(__p) = v12;
        sub_239458500(a2, (uint64_t)&__p, 1);
        if (v11 == v10)
          break;
        std::ostream::put();
      }
    }
    std::ostream::put();
    return a2;
  }
}

void sub_239597564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_239597588(uint64_t a1, _QWORD *a2)
{
  char __p[23];
  char v6;
  int v7;
  int v8;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  std::ostream::put();
  v7 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v6 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v8 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  *(_DWORD *)__p = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_239597998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395979BC(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v32;

  v3 = (uint64_t)a2;
  v32 = a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  if (!a3)
    goto LABEL_19;
  v5 = std::istream::peek();
  v6 = v5;
  if ((v5 - 196) <= 2)
  {
    std::istream::get();
    v7 = sub_2396162D4(v3, v6);
    v8 = v7;
    v10 = *(char **)a1;
    v9 = *(char **)(a1 + 8);
    v11 = (unint64_t)&v9[-*(_QWORD *)a1];
    v12 = v7 - v11;
    if (v7 <= v11)
    {
      if (v7 < v11)
        *(_QWORD *)(a1 + 8) = &v10[v7];
      goto LABEL_37;
    }
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 - (uint64_t)v9 >= v12)
    {
      bzero(*(void **)(a1 + 8), v12);
      *(_QWORD *)(a1 + 8) = &v9[v12];
LABEL_37:
      std::istream::read();
      return v3;
    }
    v14 = v13 - (_QWORD)v10;
    v15 = 2 * v14;
    if (2 * v14 <= v7)
      v15 = v7;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v17 = (char *)operator new(v16);
    v18 = &v17[v11];
    v19 = &v17[v16];
    bzero(&v17[v11], v12);
    if (v9 == v10)
    {
LABEL_35:
      *(_QWORD *)a1 = v18;
      *(_QWORD *)(a1 + 8) = &v17[v8];
      *(_QWORD *)(a1 + 16) = v19;
      if (v9)
        operator delete(v9);
      goto LABEL_37;
    }
    if (v11 >= 8 && (unint64_t)(v10 - v17) >= 0x20)
    {
      if (v11 < 0x20)
      {
        v20 = 0;
        goto LABEL_27;
      }
      v20 = v11 & 0xFFFFFFFFFFFFFFE0;
      v21 = v9 - 16;
      v22 = &v17[v9 - 16 - v10];
      v23 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v22 - 1) = *((_OWORD *)v21 - 1);
        *(_OWORD *)v22 = v24;
        v22 -= 32;
        v21 -= 32;
        v23 -= 32;
      }
      while (v23);
      if (v11 == v20)
        goto LABEL_34;
      if ((v11 & 0x18) != 0)
      {
LABEL_27:
        v18 -= v11 & 0xFFFFFFFFFFFFFFF8;
        v25 = &v9[-v20 - 8];
        v26 = (char *)(v25 - v10);
        v27 = v20 - (v11 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v28 = *(_QWORD *)v25;
          v25 -= 8;
          *(_QWORD *)&v26[(_QWORD)v17] = v28;
          v26 -= 8;
          v27 += 8;
        }
        while (v27);
        v9 -= v11 & 0xFFFFFFFFFFFFFFF8;
        if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_34;
        goto LABEL_32;
      }
      v18 -= v20;
      v9 -= v20;
    }
LABEL_32:
    v29 = v18 - 1;
    do
    {
      v30 = *--v9;
      *v29-- = v30;
    }
    while (v9 != v10);
LABEL_34:
    v9 = v10;
    v18 = v17;
    goto LABEL_35;
  }
  if ((v5 - 220) <= 3 && v5 != 222)
  {
    a2 = (_QWORD *)v3;
    a3 = 1;
LABEL_19:
    sub_239597C08((uint64_t)&v32, a2, a3);
  }
  return v3;
}

BOOL sub_239597C08(uint64_t a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  size_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  _BYTE *v31;
  char *v32;
  unint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  unint64_t v36;
  __int128 v37;
  _QWORD *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  char v44;
  _BOOL8 result;
  unsigned int v46;
  int v47;
  int v48;
  char *v49;
  _QWORD *v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  size_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  __int128 *v63;
  unint64_t v64;
  __int128 v65;
  char *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  int i;
  unsigned int v73;
  char v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  size_t v88;
  _BYTE *v89;
  char *v90;
  unint64_t v91;
  _OWORD *v92;
  __int128 *v93;
  unint64_t v94;
  __int128 v95;
  _QWORD *v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char v101;
  _BYTE **v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[2];
  _QWORD v109[11];
  char v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  std::string v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v7 = v6;
      if (v6)
      {
        v8 = (char *)operator new(v6);
        v9 = &v8[v7];
        bzero(v8, v7);
        v10 = v8;
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      std::istream::read();
      v78 = v9 - v10;
      if (!v78)
      {
LABEL_130:
        if (v10)
          operator delete(v10);
        return 1;
      }
      v79 = 0;
      while (1)
      {
        v81 = *(_QWORD **)a1;
        v83 = *(_BYTE **)(*(_QWORD *)a1 + 8);
        v82 = *(_QWORD *)(*(_QWORD *)a1 + 16);
        if ((unint64_t)v83 < v82)
        {
          *v83 = v10[v79];
          v80 = (uint64_t)(v83 + 1);
          goto LABEL_136;
        }
        v84 = (_BYTE *)*v81;
        v85 = (unint64_t)&v83[-*v81];
        v86 = v85 + 1;
        if ((uint64_t)(v85 + 1) < 0)
          sub_2394189F8();
        v87 = v82 - (_QWORD)v84;
        if (2 * v87 > v86)
          v86 = 2 * v87;
        if (v87 >= 0x3FFFFFFFFFFFFFFFLL)
          v88 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v88 = v86;
        if (v88)
        {
          v89 = operator new(v88);
          v90 = &v89[v85];
          v89[v85] = v10[v79];
          v80 = (uint64_t)&v89[v85 + 1];
          if (v83 == v84)
            goto LABEL_151;
        }
        else
        {
          v89 = 0;
          v90 = &v83[-*v81];
          *(_BYTE *)v85 = v10[v79];
          v80 = v85 + 1;
          if (v83 == v84)
          {
LABEL_151:
            *v81 = v90;
            v81[1] = v80;
            v81[2] = &v89[v88];
            if (!v83)
              goto LABEL_136;
LABEL_165:
            operator delete(v83);
            goto LABEL_136;
          }
        }
        if (v85 < 8 || (unint64_t)(v84 - v89) < 0x20)
          goto LABEL_162;
        if (v85 >= 0x20)
        {
          v91 = v85 & 0xFFFFFFFFFFFFFFE0;
          v92 = &v89[v85 - 16];
          v93 = (__int128 *)(v83 - 16);
          v94 = v85 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v95 = *v93;
            *(v92 - 1) = *(v93 - 1);
            *v92 = v95;
            v92 -= 2;
            v93 -= 2;
            v94 -= 32;
          }
          while (v94);
          if (v85 == v91)
            goto LABEL_164;
          if ((v85 & 0x18) == 0)
          {
            v90 -= v91;
            v83 -= v91;
LABEL_162:
            v100 = v90 - 1;
            do
            {
              v101 = *--v83;
              *v100-- = v101;
            }
            while (v83 != v84);
            goto LABEL_164;
          }
        }
        else
        {
          v91 = 0;
        }
        v90 -= v85 & 0xFFFFFFFFFFFFFFF8;
        v96 = &v89[&v83[-v91] - v84 - 8];
        v97 = (uint64_t *)&v83[-v91 - 8];
        v98 = v91 - (v85 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v99 = *v97--;
          *v96-- = v99;
          v98 += 8;
        }
        while (v98);
        v83 -= v85 & 0xFFFFFFFFFFFFFFF8;
        if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_162;
LABEL_164:
        v83 = (_BYTE *)*v81;
        *v81 = v89;
        v81[1] = v80;
        v81[2] = &v89[v88];
        if (v83)
          goto LABEL_165;
LABEL_136:
        v81[1] = v80;
        if (++v79 == v78)
          goto LABEL_130;
      }
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v19 = sub_2396162D4((uint64_t)a2, v5);
      if (!v19)
        return 1;
      v20 = 0;
      v21 = v19;
      while (1)
      {
        LOBYTE(v108[0]) = 0;
        sub_239598A58(v108, a2, 1);
        v23 = *(_QWORD **)a1;
        v25 = *(_BYTE **)(*(_QWORD *)a1 + 8);
        v24 = *(_QWORD *)(*(_QWORD *)a1 + 16);
        if ((unint64_t)v25 < v24)
        {
          *v25 = v108[0];
          v22 = (uint64_t)(v25 + 1);
          goto LABEL_24;
        }
        v26 = (_BYTE *)*v23;
        v27 = (unint64_t)&v25[-*v23];
        v28 = v27 + 1;
        if ((uint64_t)(v27 + 1) < 0)
          sub_2394189F8();
        v29 = v24 - (_QWORD)v26;
        if (2 * v29 > v28)
          v28 = 2 * v29;
        if (v29 >= 0x3FFFFFFFFFFFFFFFLL)
          v30 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = operator new(v30);
          v32 = &v31[v27];
          v31[v27] = v108[0];
          v22 = (uint64_t)&v31[v27 + 1];
          if (v25 == v26)
            goto LABEL_39;
        }
        else
        {
          v31 = 0;
          v32 = &v25[-*v23];
          *(_BYTE *)v27 = v108[0];
          v22 = v27 + 1;
          if (v25 == v26)
          {
LABEL_39:
            *v23 = v32;
            v23[1] = v22;
            v23[2] = &v31[v30];
            if (!v25)
              goto LABEL_24;
LABEL_53:
            operator delete(v25);
            goto LABEL_24;
          }
        }
        if (v27 < 8 || (unint64_t)(v26 - v31) < 0x20)
          goto LABEL_50;
        if (v27 >= 0x20)
        {
          v33 = v27 & 0xFFFFFFFFFFFFFFE0;
          v34 = &v31[v27 - 16];
          v35 = (__int128 *)(v25 - 16);
          v36 = v27 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v37 = *v35;
            *(v34 - 1) = *(v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 2;
            v36 -= 32;
          }
          while (v36);
          if (v27 == v33)
            goto LABEL_52;
          if ((v27 & 0x18) == 0)
          {
            v32 -= v33;
            v25 -= v33;
LABEL_50:
            v42 = v32 - 1;
            do
            {
              v43 = *--v25;
              *v42-- = v43;
            }
            while (v25 != v26);
            goto LABEL_52;
          }
        }
        else
        {
          v33 = 0;
        }
        v32 -= v27 & 0xFFFFFFFFFFFFFFF8;
        v38 = &v31[&v25[-v33] - v26 - 8];
        v39 = (uint64_t *)&v25[-v33 - 8];
        v40 = v33 - (v27 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v41 = *v39--;
          *v38-- = v41;
          v40 += 8;
        }
        while (v40);
        v25 -= v27 & 0xFFFFFFFFFFFFFFF8;
        if (v27 != (v27 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_50;
LABEL_52:
        v25 = (_BYTE *)*v23;
        *v23 = v31;
        v23[1] = v22;
        v23[2] = &v31[v30];
        if (v25)
          goto LABEL_53;
LABEL_24:
        v23[1] = v22;
        if (++v20 == v21)
          return 1;
      }
    }
    if (v5 == 223)
    {
      v113 = 0;
      memset(&v114, 0, sizeof(v114));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  v11 = a2 + 4;
  v12 = MEMORY[0x24BDAC740];
  while (1)
  {
    v13 = std::istream::peek();
    if (v13 <= 0x7F)
      break;
    v14 = __maskrune(v13, 0x4000uLL);
    v15 = *(_QWORD *)(*a2 - 24);
    if (!v14)
      goto LABEL_12;
LABEL_10:
    if (!*(_DWORD *)((char *)v11 + v15))
      std::istream::get();
  }
  v15 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v12 + 4 * v13 + 60) & 0x4000) != 0)
    goto LABEL_10;
LABEL_12:
  if ((*((_BYTE *)a2 + v15 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v16 = std::istream::peek();
    if (v16 > 0x7F)
    {
      v17 = __maskrune(v16, 0x4000uLL);
      v18 = *(_QWORD *)(*a2 - 24);
      if (!v17)
        break;
      goto LABEL_18;
    }
    v18 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v12 + 4 * v16 + 60) & 0x4000) != 0)
    {
LABEL_18:
      if (!*(_DWORD *)((char *)v11 + v18))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v18 + 32) & 2) != 0)
    return 0;
  v44 = 0;
  v104 = *MEMORY[0x24BEDB7F0];
  v106 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v107 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v105 = MEMORY[0x24BEDB848] + 16;
LABEL_57:
  if ((*((_BYTE *)v11 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v44 & 1) == 0)
  {
    while (1)
    {
      v46 = std::istream::peek();
      if (v46 <= 0x7F)
      {
        v48 = *(_DWORD *)((char *)v11 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v12 + 4 * v46 + 60) & 0x4000) == 0)
        {
LABEL_65:
          if ((v48 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)v108);
          v112 = v109;
          if (!sub_239596128(a2))
          {
LABEL_112:
            v74 = 0;
            v44 = 0;
            goto LABEL_115;
          }
          v49 = (char *)v109 + *(_QWORD *)(v109[0] - 24);
          if ((v49[32] & 5) != 0)
            goto LABEL_101;
          (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v49 + 5)
                                                                                              + 32))(&v114, *((_QWORD *)v49 + 5), 0, 1, 16);
          if (v115 < 1)
            goto LABEL_101;
          v114.__r_.__value_.__s.__data_[0] = 0;
          sub_23955D338(v108, &v114);
          v50 = *(_QWORD **)a1;
          v52 = *(_BYTE **)(*(_QWORD *)a1 + 8);
          v51 = *(_QWORD *)(*(_QWORD *)a1 + 16);
          if ((unint64_t)v52 < v51)
          {
            *v52 = v114.__r_.__value_.__s.__data_[0];
            v53 = (uint64_t)(v52 + 1);
            goto LABEL_100;
          }
          v102 = *(_BYTE ***)a1;
          v54 = (_BYTE *)*v50;
          v103 = v52 - v54;
          v55 = v52 - v54 + 1;
          if (v55 < 0)
            sub_2394189F8();
          v56 = v51 - (_QWORD)v54;
          if (2 * v56 > v55)
            v55 = 2 * v56;
          if (v56 >= 0x3FFFFFFFFFFFFFFFLL)
            v57 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            v58 = v57;
            v59 = (char *)operator new(v57);
            v57 = v58;
          }
          else
          {
            v59 = 0;
          }
          v60 = &v59[v103];
          v59[v103] = v114.__r_.__value_.__s.__data_[0];
          v53 = (uint64_t)&v59[v103 + 1];
          if (v52 == v54)
          {
            v50 = v102;
            goto LABEL_98;
          }
          if (v103 < 8 || (unint64_t)(v54 - v59) < 0x20)
            goto LABEL_95;
          if (v103 >= 0x20)
          {
            v61 = v103 & 0xFFFFFFFFFFFFFFE0;
            v62 = &v59[v103 - 16];
            v63 = (__int128 *)(v52 - 16);
            v64 = v103 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v65 = *v63;
              *((_OWORD *)v62 - 1) = *(v63 - 1);
              *(_OWORD *)v62 = v65;
              v62 -= 32;
              v63 -= 2;
              v64 -= 32;
            }
            while (v64);
            if (v103 == v61)
              goto LABEL_97;
            if ((v103 & 0x18) != 0)
              goto LABEL_90;
            v60 -= v61;
            v52 -= v61;
LABEL_95:
            v70 = v60 - 1;
            do
            {
              v71 = *--v52;
              *v70-- = v71;
            }
            while (v52 != v54);
            goto LABEL_97;
          }
          v61 = 0;
LABEL_90:
          v60 -= v103 & 0xFFFFFFFFFFFFFFF8;
          v66 = &v59[&v52[-v61] - v54 - 8];
          v67 = (uint64_t *)&v52[-v61 - 8];
          v68 = v61 - (v103 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v69 = *v67--;
            *(_QWORD *)v66 = v69;
            v66 -= 8;
            v68 += 8;
          }
          while (v68);
          v52 -= v103 & 0xFFFFFFFFFFFFFFF8;
          if (v103 != (v103 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_95;
LABEL_97:
          v50 = v102;
          v52 = *v102;
          v60 = v59;
LABEL_98:
          *v50 = v60;
          v50[1] = v53;
          v50[2] = &v59[v57];
          if (v52)
            operator delete(v52);
LABEL_100:
          v50[1] = v53;
LABEL_101:
          for (i = std::istream::peek(); ; i = std::istream::peek())
          {
            v73 = i << 24;
            if (i << 24 == 738197504)
              goto LABEL_111;
            if (v73 == 1560281088)
              break;
            if (v73 <= 0x7F000000)
            {
              if ((*(_DWORD *)(v12 + 4 * (char)i + 60) & 0x4000) == 0)
                goto LABEL_110;
            }
            else if (!__maskrune((char)i, 0x4000uLL))
            {
              goto LABEL_110;
            }
            if ((*((_BYTE *)v11 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
            {
LABEL_110:
              if (v73 != 738197504)
                goto LABEL_112;
LABEL_111:
              std::istream::get();
              v44 = 0;
              goto LABEL_114;
            }
            std::istream::get();
          }
          v44 = 1;
LABEL_114:
          v74 = 1;
LABEL_115:
          v108[0] = v104;
          *(_QWORD *)((char *)v108 + *(_QWORD *)(v104 - 24)) = v107;
          v109[0] = v106;
          v109[1] = v105;
          if (v110 < 0)
            operator delete((void *)v109[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v111);
          result = 0;
          if ((v74 & 1) == 0)
            return result;
          goto LABEL_57;
        }
      }
      else
      {
        v47 = __maskrune(v46, 0x4000uLL);
        v48 = *(_DWORD *)((char *)v11 + *(_QWORD *)(*a2 - 24));
        if (!v47)
          goto LABEL_65;
      }
      if (!v48)
        std::istream::get();
    }
  }
  while (1)
  {
    v75 = std::istream::peek();
    v76 = v75 <= 0x7F ? *(_DWORD *)(v12 + 4 * v75 + 60) & 0x4000 : __maskrune(v75, 0x4000uLL);
    v77 = *(_QWORD *)(*a2 - 24);
    if (!v76)
      break;
    if (!*(_DWORD *)((char *)v11 + v77))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v77 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_239598984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  uint64_t v55;

  if (*(char *)(v55 - 209) < 0)
  {
    operator delete(*(void **)(v55 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239598A58(_BYTE *a1, _QWORD *a2, int a3)
{
  if (a3)
  {
    if (std::istream::get() == 198)
    {
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    std::istream::read();
    return a2;
  }
  else
  {
    sub_23955D338(a2, a1);
    return a2;
  }
}

uint64_t sub_239598B1C(const char *a1, _QWORD *a2)
{
  size_t v4;

  v4 = strlen(a1);
  if (*((char *)a2 + 23) < 0)
  {
    if (v4 == a2[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a2 = (_QWORD *)*a2;
      return memcmp(a2, a1, v4) != 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a2 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_239423B0C();
    return memcmp(a2, a1, v4) != 0;
  }
  return 1;
}

uint64_t sub_239598BB0(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_239599018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23959903C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (std::istream::get() != 198)
    {
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    return a2;
  }
  else
  {
    MEMORY[0x23B83DD4C](a2, a1);
    return a2;
  }
}

void sub_239599184(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395991A8(uint64_t a1, uint64_t *a2, int a3)
{
  sub_239599224(*(uint64_t **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395991E4(uint64_t a1, _QWORD *a2, int a3)
{
  sub_239599BC0(*(_QWORD **)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_239599224(uint64_t *a1, uint64_t *a2, int a3)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 __p;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;

  if (a3)
  {
    if ((unint64_t)(a1[1] - *a1) >> 32)
    {
      std::ostream::put();
      v5 = (a1[1] - *a1) >> 2;
      if (v5 <= 0x1FFFFFFF * (v5 / 0x1FFFFFFF))
        v6 = v5 / 0x1FFFFFFF;
      else
        v6 = v5 / 0x1FFFFFFF + 1;
      v14 = 2;
      v15 = v6;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      HIBYTE(v12) = 7;
      strcpy((char *)&__p, "content");
      std::ostream::put();
      v16 = 7;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v7 = a1[1] - *a1;
      if (v7)
      {
        v8 = 0;
        v9 = v7 >> 2;
        do
        {
          v12 = a1;
          v13 = 0;
          *(_QWORD *)&__p = v8;
          v8 += 0x1FFFFFFFLL;
          if (v9 >= v8)
            v9 = v8;
          *((_QWORD *)&__p + 1) = v9;
          sub_239599658((uint64_t)&__p, a2);
          v9 = (a1[1] - *a1) >> 2;
        }
        while (v8 < v9);
      }
      return a2;
    }
    else
    {
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      return a2;
    }
  }
  else
  {
    sub_239599A90(*a1, a1[1], a2);
    return a2;
  }
}

void sub_239599634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_239599658(uint64_t a1, _QWORD *a2)
{
  char __p[23];
  char v6;
  int v7;
  int v8;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  std::ostream::put();
  v7 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v6 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v8 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  *(_DWORD *)__p = 4 * (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_239599A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239599A90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  std::ostream::put();
  if (a1 != a2)
  {
    v6 = a3 + 2;
    v7 = a1 + 4;
    if (fmod(*(float *)(v7 - 4), 1.0) != 0.0)
      goto LABEL_5;
    while (1)
    {
      v8 = *a3;
      v9 = (char *)a3 + *(_QWORD *)(*a3 - 24);
      v10 = *((_QWORD *)v9 + 2);
      *((_DWORD *)v9 + 2) = *((_DWORD *)v9 + 2) & 0xFFFFFEFB | 4;
      *(_QWORD *)((char *)v6 + *(_QWORD *)(v8 - 24)) = 1;
      std::ostream::operator<<();
      v11 = *a3;
      *(_QWORD *)((char *)v6 + *(_QWORD *)(*a3 - 24)) = v10;
      *(_DWORD *)((char *)a3 + *(_QWORD *)(v11 - 24) + 8) &= 0xFFFFFEFB;
      if (v7 == a2)
        break;
      while (1)
      {
        std::ostream::put();
        v7 += 4;
        if (fmod(*(float *)(v7 - 4), 1.0) == 0.0)
          break;
LABEL_5:
        std::ostream::operator<<();
        if (v7 == a2)
          goto LABEL_8;
      }
    }
  }
LABEL_8:
  std::ostream::put();
  return 1;
}

uint64_t sub_239599BC0(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v12;

  v3 = (uint64_t)a2;
  v12 = a1;
  a1[1] = *a1;
  if (!a3)
    goto LABEL_10;
  v5 = std::istream::peek();
  v6 = v5;
  if ((v5 - 196) > 2)
  {
    if ((v5 - 220) > 3 || v5 == 222)
      return v3;
    a2 = (_QWORD *)v3;
    a3 = 1;
LABEL_10:
    sub_239599CEC((uint64_t *)&v12, a2, a3);
    return v3;
  }
  std::istream::get();
  v7 = (unint64_t)sub_2396162D4(v3, v6) >> 2;
  v8 = (uint64_t)(a1[1] - *a1) >> 2;
  v9 = v7 >= v8;
  v10 = v7 - v8;
  if (v10 != 0 && v9)
  {
    sub_2394807B4((uint64_t)a1, v10);
  }
  else if (!v9)
  {
    a1[1] = *a1 + 4 * v7;
  }
  std::istream::read();
  return v3;
}

void sub_239599CC0(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(a1[1] - *a1) >> 2;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_2394807B4((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 4 * a2;
  }
}

BOOL sub_239599CEC(uint64_t *a1, _QWORD *a2, int a3)
{
  int v4;
  unsigned int v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _DWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _DWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  _BOOL8 result;
  char v62;
  void *v63;
  unsigned int v64;
  int v65;
  int v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  _DWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  _DWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  int i;
  unsigned int v92;
  char v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v104;
  void *v105;
  _QWORD v106[11];
  char v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  std::string v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v4 = std::istream::get();
    if ((v4 - 196) <= 2)
    {
      v5 = sub_2396162D4((uint64_t)a2, v4);
      v104 = 0;
      v105 = 0;
      v106[0] = 0;
      sub_2394807B4((uint64_t)&v104, v5);
      std::istream::read();
      v6 = v105;
      if (v105 == v104)
      {
LABEL_67:
        if (v6)
        {
          v105 = v6;
          operator delete(v6);
        }
        return 1;
      }
      v7 = 0;
      v6 = v104;
      while (1)
      {
        v9 = *a1;
        v11 = *(char **)(*a1 + 8);
        v10 = *(_QWORD *)(*a1 + 16);
        if ((unint64_t)v11 >= v10)
          break;
        *(_DWORD *)v11 = *((_DWORD *)v6 + v7);
        v8 = (uint64_t)(v11 + 4);
LABEL_6:
        *(_QWORD *)(v9 + 8) = v8;
        ++v7;
        v6 = v104;
        if (v7 >= ((_BYTE *)v105 - (_BYTE *)v104) >> 2)
          goto LABEL_67;
      }
      v12 = *(char **)v9;
      v13 = (uint64_t)&v11[-*(_QWORD *)v9];
      v14 = v13 >> 2;
      v15 = (v13 >> 2) + 1;
      if (v15 >> 62)
        sub_2394189F8();
      v16 = v10 - (_QWORD)v12;
      if (v16 >> 1 > v15)
        v15 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 62)
          sub_239418A80();
        v18 = operator new(4 * v17);
        v19 = &v18[4 * v14];
        *v19 = *((_DWORD *)v6 + v7);
        v8 = (uint64_t)(v19 + 1);
        if (v11 == v12)
          goto LABEL_25;
      }
      else
      {
        v18 = 0;
        v19 = (_DWORD *)(4 * v14);
        *(_DWORD *)(4 * v14) = *((_DWORD *)v6 + v7);
        v8 = 4 * v14 + 4;
        if (v11 == v12)
        {
LABEL_25:
          *(_QWORD *)v9 = v19;
          *(_QWORD *)(v9 + 8) = v8;
          *(_QWORD *)(v9 + 16) = &v18[4 * v17];
          if (v12)
            operator delete(v12);
          goto LABEL_6;
        }
      }
      v20 = v11 - 4 - v12;
      if (v20 < 0x2C)
        goto LABEL_146;
      if ((unint64_t)(v11 - &v18[v13]) < 0x20)
        goto LABEL_146;
      v21 = (v20 >> 2) + 1;
      v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
      v23 = &v11[-v22];
      v19 = (_DWORD *)((char *)v19 - v22);
      v24 = &v18[4 * v14 - 16];
      v25 = v11 - 16;
      v26 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 8;
      }
      while (v26);
      v11 = v23;
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_146:
        do
        {
          v28 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *--v19 = v28;
        }
        while (v11 != v12);
      }
      goto LABEL_25;
    }
    if ((v4 & 0xFFFFFFFE) != 0xDC)
    {
      if (v4 == 223)
      {
        v110 = 0;
        memset(&v111, 0, sizeof(v111));
        std::istream::read();
        std::istream::read();
        std::istream::read();
        std::istream::read();
      }
      return 0;
    }
    v37 = sub_2396162D4((uint64_t)a2, v4);
    if (!v37)
      return 1;
    v38 = 0;
    v39 = v37;
    while (1)
    {
      LODWORD(v104) = 0;
      sub_23959AA58((uint64_t)&v104, (uint64_t)a2, 1);
      v41 = *a1;
      v43 = *(char **)(*a1 + 8);
      v42 = *(_QWORD *)(*a1 + 16);
      if ((unint64_t)v43 >= v42)
        break;
      *(_DWORD *)v43 = (_DWORD)v104;
      v40 = (uint64_t)(v43 + 4);
LABEL_46:
      *(_QWORD *)(v41 + 8) = v40;
      if (++v38 == v39)
        return 1;
    }
    v44 = *(char **)v41;
    v45 = (uint64_t)&v43[-*(_QWORD *)v41];
    v46 = v45 >> 2;
    v47 = (v45 >> 2) + 1;
    if (v47 >> 62)
      sub_2394189F8();
    v48 = v42 - (_QWORD)v44;
    if (v48 >> 1 > v47)
      v47 = v48 >> 1;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
      v49 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v49 = v47;
    if (v49)
    {
      if (v49 >> 62)
        sub_239418A80();
      v50 = operator new(4 * v49);
      v51 = &v50[4 * v46];
      *v51 = (_DWORD)v104;
      v40 = (uint64_t)(v51 + 1);
      if (v43 == v44)
        goto LABEL_65;
    }
    else
    {
      v50 = 0;
      v51 = (_DWORD *)(4 * v46);
      *(_DWORD *)(4 * v46) = (_DWORD)v104;
      v40 = 4 * v46 + 4;
      if (v43 == v44)
      {
LABEL_65:
        *(_QWORD *)v41 = v51;
        *(_QWORD *)(v41 + 8) = v40;
        *(_QWORD *)(v41 + 16) = &v50[4 * v49];
        if (v44)
          operator delete(v44);
        goto LABEL_46;
      }
    }
    v52 = v43 - 4 - v44;
    if (v52 < 0x2C)
      goto LABEL_147;
    if ((unint64_t)(v43 - &v50[v45]) < 0x20)
      goto LABEL_147;
    v53 = (v52 >> 2) + 1;
    v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
    v55 = &v43[-v54];
    v51 = (_DWORD *)((char *)v51 - v54);
    v56 = &v50[4 * v46 - 16];
    v57 = v43 - 16;
    v58 = v53 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v59 = *(_OWORD *)v57;
      *(v56 - 1) = *((_OWORD *)v57 - 1);
      *v56 = v59;
      v56 -= 2;
      v57 -= 32;
      v58 -= 8;
    }
    while (v58);
    v43 = v55;
    if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_147:
      do
      {
        v60 = *((_DWORD *)v43 - 1);
        v43 -= 4;
        *--v51 = v60;
      }
      while (v43 != v44);
    }
    goto LABEL_65;
  }
  v29 = a2 + 4;
  v30 = MEMORY[0x24BDAC740];
  while (1)
  {
    v31 = std::istream::peek();
    if (v31 <= 0x7F)
      break;
    v32 = __maskrune(v31, 0x4000uLL);
    v33 = *(_QWORD *)(*a2 - 24);
    if (!v32)
      goto LABEL_34;
LABEL_32:
    if (!*(_DWORD *)((char *)v29 + v33))
      std::istream::get();
  }
  v33 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v30 + 4 * v31 + 60) & 0x4000) != 0)
    goto LABEL_32;
LABEL_34:
  if ((*((_BYTE *)a2 + v33 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v34 = std::istream::peek();
    if (v34 > 0x7F)
    {
      v35 = __maskrune(v34, 0x4000uLL);
      v36 = *(_QWORD *)(*a2 - 24);
      if (!v35)
        break;
      goto LABEL_40;
    }
    v36 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v30 + 4 * v34 + 60) & 0x4000) != 0)
    {
LABEL_40:
      if (!*(_DWORD *)((char *)v29 + v36))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v36 + 32) & 2) != 0)
    return 0;
  v62 = 0;
  v63 = (void *)*MEMORY[0x24BEDB7F0];
  v101 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v102 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v100 = MEMORY[0x24BEDB848] + 16;
LABEL_73:
  if ((*((_BYTE *)v29 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v62 & 1) == 0)
  {
    while (1)
    {
      v64 = std::istream::peek();
      if (v64 <= 0x7F)
      {
        v66 = *(_DWORD *)((char *)v29 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v30 + 4 * v64 + 60) & 0x4000) == 0)
        {
LABEL_81:
          if ((v66 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v104);
          v109 = v106;
          if (!sub_239596128(a2))
          {
LABEL_120:
            v93 = 0;
            v62 = 0;
            goto LABEL_123;
          }
          v67 = (char *)v106 + *(_QWORD *)(v106[0] - 24);
          if ((v67[32] & 5) != 0)
            goto LABEL_109;
          (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v67 + 5)
                                                                                              + 32))(&v111, *((_QWORD *)v67 + 5), 0, 1, 16);
          if (v112 < 1)
            goto LABEL_109;
          LODWORD(v111.__r_.__value_.__l.__data_) = 0;
          MEMORY[0x23B83DCF8](&v104, &v111);
          v68 = *a1;
          v70 = *(char **)(*a1 + 8);
          v69 = *(_QWORD *)(*a1 + 16);
          if ((unint64_t)v70 < v69)
          {
            *(_DWORD *)v70 = v111.__r_.__value_.__l.__data_;
            v71 = v70 + 4;
            goto LABEL_107;
          }
          v99 = *a1;
          v72 = *(char **)v68;
          v73 = (uint64_t)&v70[-*(_QWORD *)v68];
          v74 = v73 >> 2;
          v75 = (v73 >> 2) + 1;
          if (v75 >> 62)
            sub_2394189F8();
          v76 = v69 - (_QWORD)v72;
          if (v76 >> 1 > v75)
            v75 = v76 >> 1;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
            v77 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (!v77)
          {
            v79 = 0;
            v80 = (_DWORD *)(4 * v74);
            *(_DWORD *)(4 * v74) = v111.__r_.__value_.__l.__data_;
            v81 = 4 * v74 + 4;
            if (v70 != v72)
              goto LABEL_96;
LABEL_99:
            v68 = v99;
            goto LABEL_105;
          }
          v97 = &v70[-*(_QWORD *)v68];
          v98 = v73 >> 2;
          if (v77 >> 62)
            sub_239418A80();
          v78 = v77;
          v79 = operator new(4 * v77);
          v77 = v78;
          v73 = (uint64_t)v97;
          v74 = v98;
          v80 = &v79[4 * v98];
          *v80 = v111.__r_.__value_.__l.__data_;
          v81 = (uint64_t)(v80 + 1);
          if (v70 == v72)
            goto LABEL_99;
LABEL_96:
          v82 = v70 - 4 - v72;
          if (v82 < 0x2C)
          {
            v68 = v99;
            goto LABEL_104;
          }
          v68 = v99;
          if ((unint64_t)(v70 - &v79[v73]) < 0x20)
            goto LABEL_148;
          v83 = (v82 >> 2) + 1;
          v84 = 4 * (v83 & 0x7FFFFFFFFFFFFFF8);
          v85 = &v70[-v84];
          v80 = (_DWORD *)((char *)v80 - v84);
          v86 = &v79[4 * v74 - 16];
          v87 = v70 - 16;
          v88 = v83 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v89 = *(_OWORD *)v87;
            *(v86 - 1) = *((_OWORD *)v87 - 1);
            *v86 = v89;
            v86 -= 2;
            v87 -= 32;
            v88 -= 8;
          }
          while (v88);
          v70 = v85;
          if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_148:
            do
            {
LABEL_104:
              v90 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *--v80 = v90;
            }
            while (v70 != v72);
          }
LABEL_105:
          *(_QWORD *)v68 = v80;
          *(_QWORD *)(v68 + 8) = v81;
          *(_QWORD *)(v68 + 16) = &v79[4 * v77];
          if (v72)
          {
            v71 = (_DWORD *)v81;
            operator delete(v72);
LABEL_107:
            v81 = (uint64_t)v71;
          }
          *(_QWORD *)(v68 + 8) = v81;
LABEL_109:
          for (i = std::istream::peek(); ; i = std::istream::peek())
          {
            v92 = i << 24;
            if (i << 24 == 738197504)
              goto LABEL_119;
            if (v92 == 1560281088)
              break;
            if (v92 <= 0x7F000000)
            {
              if ((*(_DWORD *)(v30 + 4 * (char)i + 60) & 0x4000) == 0)
                goto LABEL_118;
            }
            else if (!__maskrune((char)i, 0x4000uLL))
            {
              goto LABEL_118;
            }
            if ((*((_BYTE *)v29 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
            {
LABEL_118:
              if (v92 != 738197504)
                goto LABEL_120;
LABEL_119:
              std::istream::get();
              v62 = 0;
              goto LABEL_122;
            }
            std::istream::get();
          }
          v62 = 1;
LABEL_122:
          v93 = 1;
LABEL_123:
          v104 = v63;
          *(void **)((char *)&v104 + *((_QWORD *)v63 - 3)) = v102;
          v106[0] = v101;
          v106[1] = v100;
          if (v107 < 0)
            operator delete((void *)v106[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v108);
          result = 0;
          if ((v93 & 1) == 0)
            return result;
          goto LABEL_73;
        }
      }
      else
      {
        v65 = __maskrune(v64, 0x4000uLL);
        v66 = *(_DWORD *)((char *)v29 + *(_QWORD *)(*a2 - 24));
        if (!v65)
          goto LABEL_81;
      }
      if (!v66)
        std::istream::get();
    }
  }
  while (1)
  {
    v94 = std::istream::peek();
    v95 = v94 <= 0x7F ? *(_DWORD *)(v30 + 4 * v94 + 60) & 0x4000 : __maskrune(v94, 0x4000uLL);
    v96 = *(_QWORD *)(*a2 - 24);
    if (!v95)
      break;
    if (!*(_DWORD *)((char *)v29 + v96))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v96 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_23959A980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  uint64_t v55;

  if (*(char *)(v55 - 209) < 0)
  {
    operator delete(*(void **)(v55 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23959AA58(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (std::istream::get() == 198)
      std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    return a2;
  }
  else
  {
    MEMORY[0x23B83DCF8](a2, a1);
    return a2;
  }
}

uint64_t sub_23959AB5C(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_23959AE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_23959AE70(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_23959B030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_23959B044(void **a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  void *v29;
  void *v30;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = (v3 - (_BYTE *)*a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_2394189F8();
  v8 = (_BYTE *)a1[2] - v4;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 59)
      sub_239418A80();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v5];
  v12 = &v10[32 * v9];
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = 0;
  v13 = *a2;
  v14 = a2[1];
  v15 = v14 - *a2;
  if (v14 != *a2)
  {
    v16 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 3);
    if (v16 >= 0x666666666666667)
      sub_2394189F8();
    v17 = (char *)operator new(v15);
    v18 = 0;
    *(_QWORD *)v11 = v17;
    *((_QWORD *)v11 + 1) = v17;
    *((_QWORD *)v11 + 2) = &v17[40 * v16];
    do
    {
      v19 = v13 + v18;
      v20 = &v17[v18];
      v21 = *(_OWORD *)(v13 + v18);
      *((_DWORD *)v20 + 4) = *(_DWORD *)(v13 + v18 + 16);
      *(_OWORD *)v20 = v21;
      *(_QWORD *)(v20 + 20) = *(_QWORD *)(v13 + v18 + 20);
      v22 = *(_QWORD *)(v13 + v18 + 28);
      *((_DWORD *)v20 + 9) = *(_DWORD *)(v13 + v18 + 36);
      *(_QWORD *)(v20 + 28) = v22;
      v18 += 40;
    }
    while (v19 + 40 != v14);
    *((_QWORD *)v11 + 1) = &v17[v18];
  }
  v11[24] = *((_BYTE *)a2 + 24);
  v23 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v23;
    a1[2] = v12;
  }
  else
  {
    v24 = 0;
    do
    {
      v25 = &v11[v24];
      v26 = &v3[v24];
      *((_QWORD *)v25 - 3) = 0;
      *((_QWORD *)v25 - 2) = 0;
      *((_OWORD *)v25 - 2) = *(_OWORD *)&v3[v24 - 32];
      *((_QWORD *)v25 - 2) = *(_QWORD *)&v3[v24 - 16];
      *((_QWORD *)v26 - 4) = 0;
      *((_QWORD *)v26 - 3) = 0;
      *((_QWORD *)v26 - 2) = 0;
      *(v25 - 8) = v3[v24 - 8];
      v24 -= 32;
    }
    while (&v3[v24] != v4);
    v27 = (char *)*a1;
    v3 = (char *)a1[1];
    v23 = v11 + 32;
    *a1 = &v11[v24];
    a1[1] = v11 + 32;
    a1[2] = v12;
    if (v3 != v27)
    {
      v28 = v3;
      do
      {
        v30 = (void *)*((_QWORD *)v28 - 4);
        v28 -= 32;
        v29 = v30;
        if (v30)
        {
          *((_QWORD *)v3 - 3) = v29;
          operator delete(v29);
        }
        v3 = v28;
      }
      while (v28 != v27);
      v3 = v27;
    }
  }
  if (v3)
    operator delete(v3);
  return v23;
}

void sub_23959B274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_2395452FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23959B29C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_23959B2C0(uint64_t a1, _QWORD *a2, int a3)
{
  sub_23959B33C(*(uint64_t **)(a1 + 8), (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_23959B2FC(uint64_t a1, _QWORD *a2, int a3)
{
  sub_23959BCA4(*(char ***)(a1 + 8), (uint64_t)a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t sub_23959B33C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  __int128 __p;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  if (a3)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    if (HIDWORD(v7))
    {
      std::ostream::put();
      v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      if (0x7FFFFFFF * (unint64_t)(v8 / 0x7FFFFFFF) >= v8)
        v9 = v8 / 0x7FFFFFFF;
      else
        v9 = v8 / 0x7FFFFFFF + 1;
      v20 = 2;
      v21 = v9;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      HIBYTE(v18) = 7;
      strcpy((char *)&__p, "content");
      std::ostream::put();
      v22 = 7;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v10 = a1[1] - *a1;
      if (v10)
      {
        v11 = 0;
        v12 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
        do
        {
          v18 = a1;
          v19 = 0;
          *(_QWORD *)&__p = v11;
          v11 += 0x7FFFFFFFLL;
          if (v12 >= v11)
            v12 = v11;
          *((_QWORD *)&__p + 1) = v12;
          sub_23959B76C(&__p, a2);
          v12 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
        }
        while (v11 < v12);
      }
    }
    else
    {
      sub_23959BB30(v5, v6, a2, v7);
    }
  }
  else
  {
    v13 = *a1;
    v14 = a1[1];
    std::ostream::put();
    if (v13 != v14)
    {
      sub_2395955F0(v13, a2, 0);
      for (i = v13 + 24; i != v14; i += 24)
      {
        std::ostream::put();
        sub_2395955F0(i, a2, 0);
      }
    }
    std::ostream::put();
  }
  return a2;
}

void sub_23959B748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23959B76C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char __p[23];
  char v7;
  int v8;
  int v9;

  v2 = (_QWORD *)a1[2];
  if (!v2)
    return 0;
  std::ostream::put();
  v8 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v7 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v9 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return sub_23959BB30(*v2 + 24 * *a1, *v2 + 24 * a1[1], a2, a1[1] - *a1);
}

void sub_23959BB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23959BB30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *exception;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  for (; a1 != a2; a1 += 24)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  return 1;
}

uint64_t sub_23959BCA4(char **a1, uint64_t a2, int a3)
{
  char *v6;
  char *i;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  char **v17;

  v17 = a1;
  v6 = *a1;
  for (i = a1[1]; i != v6; i -= 24)
  {
    if (*(i - 1) < 0)
      operator delete(*((void **)i - 3));
  }
  a1[1] = v6;
  if (!a3)
  {
    v13 = (_QWORD *)a2;
    v14 = 0;
    goto LABEL_14;
  }
  v8 = std::istream::peek();
  v9 = v8;
  if ((v8 - 196) > 2)
  {
    if ((v8 - 220) > 3 || v8 == 222)
      return a2;
    v13 = (_QWORD *)a2;
    v14 = 1;
LABEL_14:
    sub_23959BE00(&v17, v13, v14);
    return a2;
  }
  std::istream::get();
  v10 = sub_2396162D4(a2, v9) / 0x18uLL;
  v11 = a1[1];
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *a1) >> 3);
  if (v10 <= v12)
  {
    if (v10 < v12)
    {
      v15 = (uint64_t)&(*a1)[24 * v10];
      while (v11 != (char *)v15)
      {
        if (*(v11 - 1) < 0)
          operator delete(*((void **)v11 - 3));
        v11 -= 24;
      }
      a1[1] = (char *)v15;
    }
  }
  else
  {
    sub_239589D2C(a1, v10 - v12);
  }
  std::istream::read();
  return a2;
}

BOOL sub_23959BE00(char ***a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  void **size;
  std::string::size_type v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char **v13;
  char *v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  char **v28;
  char *v29;
  __int128 v30;
  char v31;
  std::string::size_type v32;
  _BOOL8 result;
  unsigned int v34;
  int v35;
  int v36;
  char *v37;
  int i;
  unsigned int v39;
  char v40;
  char **v41;
  char *v42;
  __int128 v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string v50;
  uint64_t v51;
  void *__p;
  char v53;
  _QWORD v54[23];
  std::string v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      memset(&v50, 0, sizeof(v50));
      sub_239589D2C(&v50.__r_.__value_.__l.__data_, v6);
      std::istream::read();
      size = (void **)v50.__r_.__value_.__l.__size_;
      v8 = v50.__r_.__value_.__r.__words[0];
      if (v50.__r_.__value_.__l.__size_ == v50.__r_.__value_.__r.__words[0])
      {
        v8 = v50.__r_.__value_.__l.__size_;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v12 = v8 + v9;
          v13 = *a1;
          v14 = (*a1)[1];
          if (v14 >= (*a1)[2])
          {
            v11 = sub_23959AE70(*a1, v12);
          }
          else
          {
            if (*(char *)(v12 + 23) < 0)
            {
              sub_23941A7F8((*a1)[1], *(void **)(v8 + v9), *(_QWORD *)(v8 + v9 + 8));
            }
            else
            {
              v15 = *(_OWORD *)v12;
              *((_QWORD *)v14 + 2) = *(_QWORD *)(v12 + 16);
              *(_OWORD *)v14 = v15;
            }
            v11 = v14 + 24;
            v13[1] = v14 + 24;
          }
          v13[1] = v11;
          ++v10;
          size = (void **)v50.__r_.__value_.__l.__size_;
          v8 = v50.__r_.__value_.__r.__words[0];
          v9 += 24;
        }
        while (v10 < 0xAAAAAAAAAAAAAAABLL
                    * ((uint64_t)(v50.__r_.__value_.__l.__size_ - v50.__r_.__value_.__r.__words[0]) >> 3));
      }
      if (v8)
      {
        if (size != (void **)v8)
        {
          do
          {
            if (*((char *)size - 1) < 0)
              operator delete(*(size - 3));
            size -= 3;
          }
          while (size != (void **)v8);
          size = (void **)v50.__r_.__value_.__r.__words[0];
        }
        v50.__r_.__value_.__l.__size_ = v8;
        operator delete(size);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v24 = sub_2396162D4((uint64_t)a2, v5);
      if (!v24)
        return 1;
      v25 = v24;
      while (1)
      {
        memset(&v50, 0, sizeof(v50));
        v26 = std::istream::get();
        v27 = sub_2396162D4((uint64_t)a2, v26);
        if (v27)
        {
          std::string::resize(&v50, v27, 0);
          std::istream::read();
          v28 = *a1;
          v29 = (*a1)[1];
          if (v29 < (*a1)[2])
            goto LABEL_33;
        }
        else if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        {
          *v50.__r_.__value_.__l.__data_ = 0;
          v50.__r_.__value_.__l.__size_ = 0;
          v28 = *a1;
          v29 = (*a1)[1];
          if (v29 < (*a1)[2])
          {
LABEL_33:
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_23941A7F8(v29, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
            }
            else
            {
              v30 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
              *((_QWORD *)v29 + 2) = *((_QWORD *)&v50.__r_.__value_.__l + 2);
              *(_OWORD *)v29 = v30;
            }
            v28[1] = v29 + 24;
            v28[1] = v29 + 24;
            if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_30;
LABEL_41:
            operator delete(v50.__r_.__value_.__l.__data_);
            goto LABEL_30;
          }
        }
        else
        {
          v50.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v50.__r_.__value_.__s + 23) = 0;
          v28 = *a1;
          v29 = (*a1)[1];
          if (v29 < (*a1)[2])
            goto LABEL_33;
        }
        v28[1] = sub_23959AE70(v28, (uint64_t)&v50);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_41;
LABEL_30:
        if (!--v25)
          return 1;
      }
    }
    if (v5 == 223)
    {
      v54[22] = 0;
      memset(&v55, 0, sizeof(v55));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  v16 = a2 + 4;
  v17 = MEMORY[0x24BDAC740];
  while (1)
  {
    v18 = std::istream::peek();
    if (v18 <= 0x7F)
      break;
    v19 = __maskrune(v18, 0x4000uLL);
    v20 = *(_QWORD *)(*a2 - 24);
    if (!v19)
      goto LABEL_19;
LABEL_17:
    if (!*(_DWORD *)((char *)v16 + v20))
      std::istream::get();
  }
  v20 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v17 + 4 * v18 + 60) & 0x4000) != 0)
    goto LABEL_17;
LABEL_19:
  if ((*((_BYTE *)a2 + v20 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v21 = std::istream::peek();
    if (v21 > 0x7F)
    {
      v22 = __maskrune(v21, 0x4000uLL);
      v23 = *(_QWORD *)(*a2 - 24);
      if (!v22)
        break;
      goto LABEL_25;
    }
    v23 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v17 + 4 * v21 + 60) & 0x4000) != 0)
    {
LABEL_25:
      if (!*(_DWORD *)((char *)v16 + v23))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v23 + 32) & 2) != 0)
    return 0;
  v31 = 0;
  v32 = *MEMORY[0x24BEDB7F0];
  v48 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v49 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v47 = MEMORY[0x24BEDB848] + 16;
LABEL_47:
  if ((*((_BYTE *)v16 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v31 & 1) == 0)
  {
    while (1)
    {
      v34 = std::istream::peek();
      if (v34 <= 0x7F)
      {
        v36 = *(_DWORD *)((char *)v16 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v17 + 4 * v34 + 60) & 0x4000) == 0)
        {
LABEL_55:
          if ((v36 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v50);
          v54[19] = (char *)&v50.__r_.__value_.__l + 16;
          if (sub_239596128(a2))
          {
            v37 = (char *)&v50.__r_.__value_.__r.__words[2] + *(_QWORD *)(v50.__r_.__value_.__r.__words[2] - 24);
            if ((v37[32] & 5) == 0)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v37 + 5)
                                                                                                  + 32))(&v55, *((_QWORD *)v37 + 5), 0, 1, 16);
              if (v56 >= 1)
              {
                memset(&v55, 0, sizeof(v55));
                sub_239595A48((uint64_t)&v55, (uint64_t *)&v50);
                v41 = *a1;
                v42 = (*a1)[1];
                if (v42 >= (*a1)[2])
                {
                  v41[1] = sub_23959AE70(*a1, (uint64_t)&v55);
                  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_82;
                }
                else
                {
                  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                  {
                    sub_23941A7F8((*a1)[1], v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v43 = *(_OWORD *)&v55.__r_.__value_.__l.__data_;
                    *((_QWORD *)v42 + 2) = *((_QWORD *)&v55.__r_.__value_.__l + 2);
                    *(_OWORD *)v42 = v43;
                  }
                  v41[1] = v42 + 24;
                  v41[1] = v42 + 24;
                  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
LABEL_82:
                    operator delete(v55.__r_.__value_.__l.__data_);
                }
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v39 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_68;
              if (v39 == 1560281088)
                break;
              if (v39 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v17 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_67;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_67;
              }
              if ((*((_BYTE *)v16 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_67:
                if (v39 != 738197504)
                  goto LABEL_69;
LABEL_68:
                std::istream::get();
                v31 = 0;
                goto LABEL_71;
              }
              std::istream::get();
            }
            v31 = 1;
LABEL_71:
            v40 = 1;
          }
          else
          {
LABEL_69:
            v40 = 0;
            v31 = 0;
          }
          v50.__r_.__value_.__r.__words[0] = v32;
          *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + *(_QWORD *)(v32 - 24)) = v49;
          v50.__r_.__value_.__r.__words[2] = v48;
          v51 = v47;
          if (v53 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](v54);
          result = 0;
          if ((v40 & 1) == 0)
            return result;
          goto LABEL_47;
        }
      }
      else
      {
        v35 = __maskrune(v34, 0x4000uLL);
        v36 = *(_DWORD *)((char *)v16 + *(_QWORD *)(*a2 - 24));
        if (!v35)
          goto LABEL_55;
      }
      if (!v36)
        std::istream::get();
    }
  }
  while (1)
  {
    v44 = std::istream::peek();
    v45 = v44 <= 0x7F ? *(_DWORD *)(v17 + 4 * v44 + 60) & 0x4000 : __maskrune(v44, 0x4000uLL);
    v46 = *(_QWORD *)(*a2 - 24);
    if (!v45)
      break;
    if (!*(_DWORD *)((char *)v16 + v46))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v46 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_23959C7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  if (*(char *)(v53 - 209) < 0)
  {
    operator delete(*(void **)(v53 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23959C8D0(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_23959CB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23959CB74(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_23959CB98(uint64_t a1, _QWORD *a2, int a3)
{
  sub_23959CC14(*(uint64_t ***)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_23959CBD4(uint64_t a1, _QWORD *a2, int a3)
{
  sub_23959D4EC(*(void ***)(a1 + 8), (uint64_t)a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_23959CC14(uint64_t **a1, _QWORD *a2, int a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *i;
  __int128 __p;
  uint64_t **v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  if (a3)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = (char *)v6 - (char *)*a1;
    if (v7 < 0x1FFFFFFFE1)
    {
      sub_23959D404(v5, v6, a2, v7 >> 5);
      return a2;
    }
    else
    {
      std::ostream::put();
      v8 = ((char *)a1[1] - (char *)*a1) >> 5;
      if (0x7FFFFFFF * (unint64_t)(v8 / 0x7FFFFFFF) >= v8)
        v9 = v8 / 0x7FFFFFFF;
      else
        v9 = v8 / 0x7FFFFFFF + 1;
      v20 = 2;
      v21 = v9;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      HIBYTE(v18) = 7;
      strcpy((char *)&__p, "content");
      std::ostream::put();
      v22 = 7;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v10 = (char *)a1[1] - (char *)*a1;
      if (v10)
      {
        v11 = 0;
        v12 = v10 >> 5;
        do
        {
          v18 = a1;
          v19 = 0;
          *(_QWORD *)&__p = v11;
          v11 += 0x7FFFFFFFLL;
          if (v12 >= v11)
            v12 = v11;
          *((_QWORD *)&__p + 1) = v12;
          sub_23959D044(&__p, a2);
          v12 = ((char *)a1[1] - (char *)*a1) >> 5;
        }
        while (v11 < v12);
      }
      return a2;
    }
  }
  else
  {
    v14 = *a1;
    v15 = a1[1];
    std::ostream::put();
    if (v14 != v15)
    {
      sub_23958D660(v14, a2);
      for (i = v14 + 4; i != v15; i += 4)
      {
        std::ostream::put();
        sub_23958D660(i, a2);
      }
    }
    std::ostream::put();
    return a2;
  }
}

void sub_23959D020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23959D044(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  char __p[23];
  char v7;
  int v8;
  int v9;

  v2 = (_QWORD *)a1[2];
  if (!v2)
    return 0;
  std::ostream::put();
  v8 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v7 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v9 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return sub_23959D404((uint64_t *)(*v2 + 32 * *a1), (uint64_t *)(*v2 + 32 * a1[1]), a2, a1[1] - *a1);
}

void sub_23959D3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23959D404(uint64_t *a1, uint64_t *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *exception;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  for (; a1 != a2; a1 += 4)
    sub_23958E63C(a1, a3, 1);
  return 1;
}

uint64_t sub_23959D4EC(void **a1, uint64_t a2, int a3)
{
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  char *v19;
  void *v20;
  void *v21;
  void **v23;

  v23 = a1;
  v7 = (char *)*a1;
  v6 = (char *)a1[1];
  if (v6 != *a1)
  {
    v8 = (char *)a1[1];
    do
    {
      v10 = (void *)*((_QWORD *)v8 - 4);
      v8 -= 32;
      v9 = v10;
      if (v10)
      {
        *((_QWORD *)v6 - 3) = v9;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v7);
  }
  a1[1] = v7;
  if (!a3)
  {
    v16 = (_QWORD *)a2;
    v17 = 0;
    goto LABEL_14;
  }
  v11 = std::istream::peek();
  v12 = v11;
  if ((v11 - 196) > 2)
  {
    if ((v11 - 220) > 3 || v11 == 222)
      return a2;
    v16 = (_QWORD *)a2;
    v17 = 1;
LABEL_14:
    sub_23959D644(&v23, v16, v17);
    return a2;
  }
  std::istream::get();
  v13 = (unint64_t)sub_2396162D4(a2, v12) >> 5;
  v14 = (char *)a1[1];
  v15 = (v14 - (_BYTE *)*a1) >> 5;
  if (v13 <= v15)
  {
    if (v13 < v15)
    {
      v18 = (uint64_t)*a1 + 32 * v13;
      if (v14 != (char *)v18)
      {
        v19 = (char *)a1[1];
        do
        {
          v21 = (void *)*((_QWORD *)v19 - 4);
          v19 -= 32;
          v20 = v21;
          if (v21)
          {
            *((_QWORD *)v14 - 3) = v20;
            operator delete(v20);
          }
          v14 = v19;
        }
        while (v19 != (char *)v18);
      }
      a1[1] = (void *)v18;
    }
  }
  else
  {
    sub_23959E30C(a1, v13 - v15);
  }
  std::istream::read();
  return a2;
}

BOOL sub_23959D644(void ***a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t *v10;
  void **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  char *v35;
  char *v36;
  char *v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char v47;
  _BOOL8 result;
  unsigned int v49;
  int v50;
  int v51;
  char *v52;
  int i;
  unsigned int v54;
  char v55;
  void **v56;
  char *v57;
  __int128 v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  char *v70;
  void *v71;
  void *v72;
  unint64_t v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *__p;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char v84;
  _QWORD v85[23];
  std::string v86;
  char v87;
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v23 = a2 + 4;
    v24 = MEMORY[0x24BDAC740];
    while (1)
    {
      v25 = std::istream::peek();
      if (v25 <= 0x7F)
      {
        v27 = *(_QWORD *)(*a2 - 24);
        if ((*(_DWORD *)(v24 + 4 * v25 + 60) & 0x4000) == 0)
        {
LABEL_21:
          if ((*((_BYTE *)a2 + v27 + 32) & 2) != 0)
            return 1;
          if (std::istream::get() != 91)
            return 0;
          while (1)
          {
            v28 = std::istream::peek();
            if (v28 <= 0x7F)
            {
              v30 = *(_QWORD *)(*a2 - 24);
              if ((*(_DWORD *)(v24 + 4 * v28 + 60) & 0x4000) == 0)
              {
LABEL_43:
                if ((*((_BYTE *)a2 + v30 + 32) & 2) != 0)
                  return 0;
                v47 = 0;
                v77 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                v78 = (void *)*MEMORY[0x24BEDB7F0];
                v76 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                v75 = MEMORY[0x24BEDB848] + 16;
LABEL_46:
                if ((*((_BYTE *)v23 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v47 & 1) == 0)
                {
                  while (1)
                  {
                    v49 = std::istream::peek();
                    if (v49 <= 0x7F)
                    {
                      v51 = *(_DWORD *)((char *)v23 + *(_QWORD *)(*a2 - 24));
                      if ((*(_DWORD *)(v24 + 4 * v49 + 60) & 0x4000) == 0)
                      {
LABEL_54:
                        if ((v51 & 2) != 0)
                          return 0;
                        sub_2394988CC((uint64_t)&__p);
                        v85[19] = &v81;
                        if (sub_239596128(a2))
                        {
                          v52 = (char *)&v81 + *(_QWORD *)(v81 - 24);
                          if ((v52[32] & 5) == 0)
                          {
                            (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v52 + 5) + 32))(&v86, *((_QWORD *)v52 + 5), 0, 1, 16);
                            if (v88 >= 1)
                            {
                              memset(&v86, 0, sizeof(v86));
                              v87 = 0;
                              sub_239590AE0(&__p, (void **)&v86.__r_.__value_.__l.__data_, -1.0);
                              v56 = *a1;
                              v57 = (char *)(*a1)[1];
                              if (v57 >= (*a1)[2])
                              {
                                v66 = sub_23959B044(*a1, (uint64_t *)&v86);
                              }
                              else
                              {
                                v74 = *a1;
                                *(_QWORD *)v57 = 0;
                                *((_QWORD *)v57 + 1) = 0;
                                *((_QWORD *)v57 + 2) = 0;
                                v58 = *(_OWORD *)&v86.__r_.__value_.__l.__data_;
                                v59 = v86.__r_.__value_.__l.__size_ - v86.__r_.__value_.__r.__words[0];
                                if (v86.__r_.__value_.__l.__size_ != v86.__r_.__value_.__r.__words[0])
                                {
                                  v73 = 0xCCCCCCCCCCCCCCCDLL * (v59 >> 3);
                                  if (v73 > 0x666666666666666)
                                    sub_2394189F8();
                                  v60 = (char *)operator new(v59);
                                  v61 = 0;
                                  *(_QWORD *)v57 = v60;
                                  *((_QWORD *)v57 + 1) = v60;
                                  *((_QWORD *)v57 + 2) = &v60[40 * v73];
                                  do
                                  {
                                    v62 = v58 + v61;
                                    v63 = &v60[v61];
                                    v64 = *(_OWORD *)(v58 + v61);
                                    *((_DWORD *)v63 + 4) = *(_DWORD *)(v58 + v61 + 16);
                                    *(_OWORD *)v63 = v64;
                                    *(_QWORD *)(v63 + 20) = *(_QWORD *)(v58 + v61 + 20);
                                    v65 = *(_QWORD *)(v58 + v61 + 28);
                                    *((_DWORD *)v63 + 9) = *(_DWORD *)(v58 + v61 + 36);
                                    *(_QWORD *)(v63 + 28) = v65;
                                    v61 += 40;
                                  }
                                  while (v62 + 40 != *((_QWORD *)&v58 + 1));
                                  *((_QWORD *)v57 + 1) = &v60[v61];
                                }
                                v57[24] = v87;
                                v66 = v57 + 32;
                                v56 = v74;
                                v74[1] = v57 + 32;
                              }
                              v56[1] = v66;
                              if (v86.__r_.__value_.__r.__words[0])
                              {
                                v86.__r_.__value_.__l.__size_ = v86.__r_.__value_.__r.__words[0];
                                operator delete(v86.__r_.__value_.__l.__data_);
                              }
                            }
                          }
                          for (i = std::istream::peek(); ; i = std::istream::peek())
                          {
                            v54 = i << 24;
                            if (i << 24 == 738197504)
                              goto LABEL_67;
                            if (v54 == 1560281088)
                              break;
                            if (v54 <= 0x7F000000)
                            {
                              if ((*(_DWORD *)(v24 + 4 * (char)i + 60) & 0x4000) == 0)
                                goto LABEL_66;
                            }
                            else if (!__maskrune((char)i, 0x4000uLL))
                            {
                              goto LABEL_66;
                            }
                            if ((*((_BYTE *)v23 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
                            {
LABEL_66:
                              if (v54 != 738197504)
                                goto LABEL_68;
LABEL_67:
                              std::istream::get();
                              v47 = 0;
                              goto LABEL_70;
                            }
                            std::istream::get();
                          }
                          v47 = 1;
LABEL_70:
                          v55 = 1;
                        }
                        else
                        {
LABEL_68:
                          v55 = 0;
                          v47 = 0;
                        }
                        __p = v78;
                        *(void **)((char *)&__p + *((_QWORD *)v78 - 3)) = v77;
                        v81 = v76;
                        v82 = v75;
                        if (v84 < 0)
                          operator delete(v83);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x23B83E250](v85);
                        result = 0;
                        if ((v55 & 1) == 0)
                          return result;
                        goto LABEL_46;
                      }
                    }
                    else
                    {
                      v50 = __maskrune(v49, 0x4000uLL);
                      v51 = *(_DWORD *)((char *)v23 + *(_QWORD *)(*a2 - 24));
                      if (!v50)
                        goto LABEL_54;
                    }
                    if (!v51)
                      std::istream::get();
                  }
                }
                while (1)
                {
                  v67 = std::istream::peek();
                  v68 = v67 <= 0x7F ? *(_DWORD *)(v24 + 4 * v67 + 60) & 0x4000 : __maskrune(v67, 0x4000uLL);
                  v69 = *(_QWORD *)(*a2 - 24);
                  if (!v68)
                    break;
                  if (!*(_DWORD *)((char *)v23 + v69))
                    std::istream::get();
                }
                return (*((_BYTE *)a2 + v69 + 32) & 2) == 0 && std::istream::get() == 93;
              }
            }
            else
            {
              v29 = __maskrune(v28, 0x4000uLL);
              v30 = *(_QWORD *)(*a2 - 24);
              if (!v29)
                goto LABEL_43;
            }
            if (!*(_DWORD *)((char *)v23 + v30))
              std::istream::get();
          }
        }
      }
      else
      {
        v26 = __maskrune(v25, 0x4000uLL);
        v27 = *(_QWORD *)(*a2 - 24);
        if (!v26)
          goto LABEL_21;
      }
      if (!*(_DWORD *)((char *)v23 + v27))
        std::istream::get();
    }
  }
  v5 = std::istream::get();
  if ((v5 - 196) > 2)
  {
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v31 = sub_2396162D4((uint64_t)a2, v5);
      if (v31)
      {
        v32 = 0;
        v33 = v31;
        do
        {
          __p = 0;
          v80 = 0;
          LOBYTE(v82) = 0;
          v81 = 0;
          sub_239593C28(a2, (uint64_t)&__p, -1.0);
          v34 = *a1;
          v35 = (char *)(*a1)[1];
          if (v35 >= (*a1)[2])
          {
            v46 = sub_23959B044(*a1, (uint64_t *)&__p);
          }
          else
          {
            *(_QWORD *)v35 = 0;
            *((_QWORD *)v35 + 1) = 0;
            *((_QWORD *)v35 + 2) = 0;
            v37 = (char *)__p;
            v36 = v80;
            v38 = v80 - (_BYTE *)__p;
            if (v80 != __p)
            {
              v39 = 0xCCCCCCCCCCCCCCCDLL * (v38 >> 3);
              if (v39 > 0x666666666666666)
                sub_2394189F8();
              v40 = (char *)operator new(v38);
              v41 = 0;
              *(_QWORD *)v35 = v40;
              *((_QWORD *)v35 + 1) = v40;
              *((_QWORD *)v35 + 2) = &v40[40 * v39];
              do
              {
                v42 = &v37[v41];
                v43 = &v40[v41];
                v44 = *(_OWORD *)&v37[v41];
                *((_DWORD *)v43 + 4) = *(_DWORD *)&v37[v41 + 16];
                *(_OWORD *)v43 = v44;
                *(_QWORD *)(v43 + 20) = *(_QWORD *)&v37[v41 + 20];
                v45 = *(_QWORD *)&v37[v41 + 28];
                *((_DWORD *)v43 + 9) = *(_DWORD *)&v37[v41 + 36];
                *(_QWORD *)(v43 + 28) = v45;
                v41 += 40;
              }
              while (v42 + 40 != v36);
              *((_QWORD *)v35 + 1) = &v40[v41];
            }
            v35[24] = v82;
            v46 = v35 + 32;
            v34[1] = v35 + 32;
          }
          v34[1] = v46;
          if (__p)
          {
            v80 = (char *)__p;
            operator delete(__p);
          }
          ++v32;
        }
        while (v32 != v33);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v85[22] = 0;
      memset(&v86, 0, sizeof(v86));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  v6 = sub_2396162D4((uint64_t)a2, v5);
  __p = 0;
  v80 = 0;
  v81 = 0;
  sub_23959E30C(&__p, v6);
  std::istream::read();
  v8 = (char *)__p;
  v7 = v80;
  if (v80 == __p)
  {
    v8 = v80;
  }
  else
  {
    v9 = 0;
    do
    {
      while (1)
      {
        v10 = (uint64_t *)&v8[32 * v9];
        v11 = *a1;
        v12 = (*a1)[1];
        if (v12 < (*a1)[2])
          break;
        v11[1] = sub_23959B044(*a1, v10);
        ++v9;
        v8 = (char *)__p;
        v7 = v80;
        if (v9 >= (v80 - (_BYTE *)__p) >> 5)
          goto LABEL_96;
      }
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v13 = *v10;
      v14 = v10[1];
      v15 = v14 - *v10;
      if (v14 != *v10)
      {
        v16 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 3);
        if (v16 > 0x666666666666666)
          sub_2394189F8();
        v17 = (char *)operator new(v15);
        v18 = 0;
        *v12 = v17;
        v12[1] = v17;
        v12[2] = &v17[40 * v16];
        do
        {
          v19 = v13 + v18;
          v20 = &v17[v18];
          v21 = *(_OWORD *)(v13 + v18);
          *((_DWORD *)v20 + 4) = *(_DWORD *)(v13 + v18 + 16);
          *(_OWORD *)v20 = v21;
          *(_QWORD *)(v20 + 20) = *(_QWORD *)(v13 + v18 + 20);
          v22 = *(_QWORD *)(v13 + v18 + 28);
          *((_DWORD *)v20 + 9) = *(_DWORD *)(v13 + v18 + 36);
          *(_QWORD *)(v20 + 28) = v22;
          v18 += 40;
        }
        while (v19 + 40 != v14);
        v12[1] = &v17[v18];
      }
      *((_BYTE *)v12 + 24) = v8[32 * v9 + 24];
      v11[1] = v12 + 4;
      v11[1] = v12 + 4;
      ++v9;
      v8 = (char *)__p;
      v7 = v80;
    }
    while (v9 < (v80 - (_BYTE *)__p) >> 5);
  }
LABEL_96:
  if (v8)
  {
    if (v7 != v8)
    {
      v70 = v7;
      do
      {
        v72 = (void *)*((_QWORD *)v70 - 4);
        v70 -= 32;
        v71 = v72;
        if (v72)
        {
          *((_QWORD *)v7 - 3) = v71;
          operator delete(v71);
        }
        v7 = v70;
      }
      while (v70 != v8);
      v7 = (char *)__p;
    }
    v80 = v8;
    operator delete(v7);
  }
  return 1;
}

void sub_23959E1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 209) < 0)
  {
    operator delete(*(void **)(v54 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23959E30C(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      v11 = 32 * a2;
      v12 = &v5[32 * a2];
      do
      {
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        v5[24] = 0;
        *((_QWORD *)v5 + 2) = 0;
        v5 += 32;
        v11 -= 32;
      }
      while (v11);
      v5 = v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = (v5 - (_BYTE *)*a1) >> 5;
    if ((v6 + a2) >> 59)
      sub_2394189F8();
    v7 = v4 - (_BYTE *)*a1;
    v8 = v7 >> 4;
    if (v7 >> 4 <= v6 + a2)
      v8 = v6 + a2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
    {
      if (v9 >> 59)
        sub_239418A80();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[32 * v6];
    v14 = &v10[32 * v9];
    v15 = 32 * a2;
    v16 = &v13[32 * a2];
    v17 = v13;
    do
    {
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      v17[24] = 0;
      *((_QWORD *)v17 + 2) = 0;
      v17 += 32;
      v15 -= 32;
    }
    while (v15);
    v18 = (char *)*a1;
    if (v5 == *a1)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5)
LABEL_29:
        operator delete(v5);
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = &v13[v19];
        v21 = &v5[v19];
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        *((_OWORD *)v20 - 2) = *(_OWORD *)&v5[v19 - 32];
        *((_QWORD *)v20 - 2) = *(_QWORD *)&v5[v19 - 16];
        *((_QWORD *)v21 - 4) = 0;
        *((_QWORD *)v21 - 3) = 0;
        *((_QWORD *)v21 - 2) = 0;
        *(v20 - 8) = v5[v19 - 8];
        v19 -= 32;
      }
      while (&v5[v19] != v18);
      v22 = (char *)*a1;
      v5 = (char *)a1[1];
      *a1 = &v13[v19];
      a1[1] = v16;
      a1[2] = v14;
      if (v5 != v22)
      {
        v23 = v5;
        do
        {
          v25 = (void *)*((_QWORD *)v23 - 4);
          v23 -= 32;
          v24 = v25;
          if (v25)
          {
            *((_QWORD *)v5 - 3) = v24;
            operator delete(v24);
          }
          v5 = v23;
        }
        while (v23 != v22);
        v5 = v22;
      }
      if (v5)
        goto LABEL_29;
    }
  }
}

uint64_t sub_23959E4D0(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_23959E768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23959E788(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 59)
      sub_2394189F8();
    v5 = 32 * a3;
    v6 = (char *)operator new(32 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_23941A7F8(v9, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      *(_DWORD *)&v6[v7 + 24] = *(_DWORD *)(a2 + v7 + 24);
      v7 += 32;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_23959E860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_23959E8B0(&a9);
  _Unwind_Resume(a1);
}

void sub_23959E874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 9) < 0)
      operator delete(*(void **)(v10 + v11 - 32));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_23959E8B0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_23959E8B0(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0)
            operator delete(*(v4 - 4));
          v4 -= 4;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *sub_23959E944(void **a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  void *v18;
  char *v20;
  char *v21;

  v4 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_2394189F8();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v5)
    v5 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v8 = 0x492492492492492;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x492492492492492)
      sub_239418A80();
    v9 = (char *)operator new(56 * v8);
  }
  else
  {
    v9 = 0;
  }
  v20 = &v9[56 * v4];
  v21 = &v9[56 * v8];
  sub_23959EB4C(v20, a2, a3);
  v10 = v20 + 56;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v20;
    a1[1] = v10;
    a1[2] = v21;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = &v20[v13];
      v15 = &v12[v13];
      v16 = *(_OWORD *)&v12[v13 - 56];
      *((_QWORD *)v14 - 5) = *(_QWORD *)&v12[v13 - 40];
      *(_OWORD *)(v14 - 56) = v16;
      *((_QWORD *)v15 - 6) = 0;
      *((_QWORD *)v15 - 5) = 0;
      *((_QWORD *)v15 - 7) = 0;
      *((_QWORD *)v14 - 4) = 0;
      *((_QWORD *)v14 - 3) = 0;
      *((_QWORD *)v14 - 2) = 0;
      *((_OWORD *)v14 - 2) = *(_OWORD *)&v12[v13 - 32];
      *((_QWORD *)v14 - 2) = *(_QWORD *)&v12[v13 - 16];
      *((_QWORD *)v15 - 4) = 0;
      *((_QWORD *)v15 - 3) = 0;
      *((_QWORD *)v15 - 2) = 0;
      *(v14 - 8) = v12[v13 - 8];
      v13 -= 56;
    }
    while (&v12[v13] != v11);
    v17 = (char *)*a1;
    v12 = (char *)a1[1];
    *a1 = &v20[v13];
    a1[1] = v10;
    a1[2] = v21;
    if (v12 != v17)
    {
      do
      {
        v18 = (void *)*((_QWORD *)v12 - 4);
        if (v18)
        {
          *((_QWORD *)v12 - 3) = v18;
          operator delete(v18);
        }
        if (*(v12 - 33) < 0)
          operator delete(*((void **)v12 - 7));
        v12 -= 56;
      }
      while (v12 != v17);
      v12 = v17;
    }
  }
  if (v12)
    operator delete(v12);
  return v20 + 56;
}

void sub_23959EB38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23959EC98((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23959EB4C(_QWORD *__dst, __int128 *a2, uint64_t *a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;

  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = *a3;
    v7 = a3[1];
    v8 = v7 - *a3;
    if (v7 == *a3)
      goto LABEL_9;
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = *a3;
    v7 = a3[1];
    v8 = v7 - *a3;
    if (v7 == *a3)
      goto LABEL_9;
  }
  v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
  if (v9 >= 0x666666666666667)
    sub_2394189F8();
  v10 = (char *)operator new(v8);
  v11 = 0;
  __dst[3] = v10;
  __dst[4] = v10;
  __dst[5] = &v10[40 * v9];
  do
  {
    v12 = v6 + v11;
    v13 = &v10[v11];
    v14 = *(_OWORD *)(v6 + v11);
    *((_DWORD *)v13 + 4) = *(_DWORD *)(v6 + v11 + 16);
    *(_OWORD *)v13 = v14;
    *(_QWORD *)(v13 + 20) = *(_QWORD *)(v6 + v11 + 20);
    v15 = *(_QWORD *)(v6 + v11 + 28);
    *((_DWORD *)v13 + 9) = *(_DWORD *)(v6 + v11 + 36);
    *(_QWORD *)(v13 + 28) = v15;
    v11 += 40;
  }
  while (v12 + 40 != v7);
  __dst[4] = &v10[v11];
LABEL_9:
  *((_BYTE *)__dst + 48) = *((_BYTE *)a3 + 24);
  return __dst;
}

void sub_23959EC74(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_239EBF8C0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23959EC98(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
    if (*(char *)(i - 33) < 0)
      operator delete(*(void **)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_23959ED0C(const void ***a1, int a2)
{
  const void **v2;
  const void **v3;
  unint64_t v4;
  const void **v5;
  const void **v6;
  const void **v7;
  unint64_t v8;
  const void **v9;
  const void **v10;
  const void **v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  size_t v17;
  unint64_t v18;
  std::string *p_dst;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  double v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t *v34;
  void **v35;
  void *v36;
  void **v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  std::string v43;
  std::string v44;
  std::string __dst;
  std::string v46;
  std::string v47;
  std::string v48;
  __int128 v49;
  __int128 v50;
  int v51;

  if (a2 == 2)
  {
    v7 = *a1;
    v6 = a1[1];
    if (*a1 == v6)
      return;
    v8 = (char *)v6 - (char *)v7 - 352;
    if (v8 >= 0x160)
    {
      v40 = v8 / 0x160 + 1;
      v9 = &v7[44 * (v40 & 0x1FFFFFFFFFFFFFELL)];
      v41 = v40 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v7 + 84) = -1;
        *((_DWORD *)v7 + 172) = -1;
        v7 += 88;
        v41 -= 2;
      }
      while (v41);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFELL))
        return;
    }
    else
    {
      v9 = *a1;
    }
    do
    {
      *((_DWORD *)v9 + 84) = -1;
      v9 += 44;
    }
    while (v9 != v6);
    return;
  }
  if (a2 == 1)
  {
    v3 = *a1;
    v2 = a1[1];
    if (*a1 == v2)
      return;
    v4 = (char *)v2 - (char *)v3 - 352;
    if (v4 >= 0x160)
    {
      v38 = v4 / 0x160 + 1;
      v5 = &v3[44 * (v38 & 0x1FFFFFFFFFFFFFELL)];
      v39 = v38 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v3 + 84) = 0;
        *((_DWORD *)v3 + 172) = 0;
        v3 += 88;
        v39 -= 2;
      }
      while (v39);
      if (v38 == (v38 & 0x1FFFFFFFFFFFFFELL))
        return;
    }
    else
    {
      v5 = *a1;
    }
    do
    {
      *((_DWORD *)v5 + 84) = 0;
      v5 += 44;
    }
    while (v5 != v2);
    return;
  }
  v49 = 0u;
  v50 = 0u;
  v51 = 1065353216;
  v10 = *a1;
  v11 = a1[1];
  if (*a1 == v11)
    goto LABEL_70;
  v42 = 0;
  do
  {
    v12 = (unint64_t *)v10[13];
    if ((_BYTE *)v10[14] - (_BYTE *)v12 != 16 || ((v14 = *v12, v13 = v12[1], *v12) ? (v15 = v13 == 0) : (v15 = 1), v15))
    {
      *((_DWORD *)v10 + 84) = -1;
      goto LABEL_12;
    }
    v16 = *((char *)v10 + 23);
    if (v16 >= 0)
      v17 = *((unsigned __int8 *)v10 + 23);
    else
      v17 = (size_t)v10[1];
    v18 = v17 + 1;
    if (v17 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    if (v18 >= 0x17)
    {
      v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v20 = v18 | 7;
      v21 = v20 + 1;
      p_dst = (std::string *)operator new(v20 + 1);
      __dst.__r_.__value_.__l.__size_ = v17 + 1;
      __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v17 + 1;
      if (!v17)
        goto LABEL_32;
    }
    if (v16 >= 0)
      v22 = v10;
    else
      v22 = *v10;
    memmove(p_dst, v22, v17);
LABEL_32:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v17) = 32;
    std::to_string(&v44, v14);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v44;
    else
      v23 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      size = v44.__r_.__value_.__l.__size_;
    v25 = std::string::append(&__dst, (const std::string::value_type *)v23, size);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v46, 32);
    v47 = v46;
    memset(&v46, 0, sizeof(v46));
    std::to_string(&v43, v13);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v43;
    else
      v27 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    else
      v28 = v43.__r_.__value_.__l.__size_;
    v29 = std::string::append(&v47, (const std::string::value_type *)v27, v28);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v43.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_53;
      }
    }
    else if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(v47.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_48;
      goto LABEL_54;
    }
LABEL_53:
    operator delete(v46.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_48:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_49;
      goto LABEL_55;
    }
LABEL_54:
    operator delete(v44.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_49:
      v31 = *(double *)v10[4];
      if (v31 <= -1.0)
        goto LABEL_64;
      goto LABEL_56;
    }
LABEL_55:
    operator delete(__dst.__r_.__value_.__l.__data_);
    v31 = *(double *)v10[4];
    if (v31 <= -1.0)
      goto LABEL_64;
LABEL_56:
    std::to_string(&v47, vcvtmd_s64_f64(v31 / 10.0));
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v47;
    else
      v32 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      v33 = v47.__r_.__value_.__l.__size_;
    std::string::append(&v48, (const std::string::value_type *)v32, v33);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
LABEL_64:
    v34 = sub_2395AB7D4(&v49, (uint64_t)&v48);
    if (v34)
    {
      *((_DWORD *)v10 + 84) = *((_DWORD *)v34 + 10);
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else
    {
      *((_DWORD *)v10 + 84) = v42;
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
      *((_DWORD *)sub_2395ABA00((uint64_t)&v49, (uint64_t)&v48, (uint64_t)&unk_239EC6E98, (__int128 **)&v47) + 10) = v42++;
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_12;
    }
    operator delete(v48.__r_.__value_.__l.__data_);
LABEL_12:
    v10 += 44;
  }
  while (v10 != v11);
  v35 = (void **)v50;
  if ((_QWORD)v50)
  {
    do
    {
      v37 = (void **)*v35;
      if (*((char *)v35 + 39) < 0)
        operator delete(v35[2]);
      operator delete(v35);
      v35 = v37;
    }
    while (v37);
  }
LABEL_70:
  v36 = (void *)v49;
  *(_QWORD *)&v49 = 0;
  if (v36)
    operator delete(v36);
}

void sub_23959F1B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23942823C(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_23959F1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a40 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  sub_23942823C(v47 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_23959F2D4(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_23959F33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  __int128 v11;
  time_t v12;
  void **v13;
  std::__fs::filesystem::path::__string_view v14;
  void *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  void *v18;
  int v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  _QWORD *v27;
  unint64_t v28;
  double v29;
  double v30;
  int64x2_t v31;
  int8x16_t v32;
  std::string::size_type size;
  char *v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  int v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  void *v49;
  __int128 v50;
  void *v51;
  __int128 v52;
  void *v53;
  __int128 v54;
  _QWORD *v55;
  char *v56;
  void **v57;
  void *v58;
  void *v59;
  char v60;
  std::string v61;
  void *v62;
  char *v63;
  unint64_t v64;
  void *v65[2];
  uint64_t v66;
  void *v67[2];
  uint64_t v68;
  void *__src[2];
  uint64_t v70;
  uint64_t v71;
  __int128 __p;
  uint64_t v73;
  tm v74;
  std::string __dst;

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 && (v5 = *(_QWORD *)(a1 + 8)) != 0)
  {
    v6 = operator new(0x10uLL);
    v7 = v6 + 2;
    *v6 = v4;
    v6[1] = v5;
    v8 = *(void **)(a2 + 104);
    if (v8)
    {
      *(_QWORD *)(a2 + 112) = v8;
      operator delete(v8);
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 120) = 0;
    }
    *(_QWORD *)(a2 + 104) = v6;
    *(_QWORD *)(a2 + 112) = v7;
    *(_QWORD *)(a2 + 120) = v7;
  }
  else
  {
    v10 = (_QWORD *)(a2 + 104);
    v9 = *(void **)(a2 + 104);
    if (v9)
    {
      *(_QWORD *)(a2 + 112) = v9;
      operator delete(v9);
      *v10 = 0;
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 120) = 0;
    }
    *v10 = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)&v74.tm_sec = *(_OWORD *)(a1 + 288);
  *(_OWORD *)&v74.tm_mon = v11;
  *(_OWORD *)&v74.tm_isdst = *(_OWORD *)(a1 + 320);
  v74.tm_zone = *(char **)(a1 + 336);
  v12 = mktime(&v74);
  std::to_string(&__dst, v12);
  v13 = (void **)(a2 + 312);
  if (*(char *)(a2 + 335) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 328) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
  v14 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)(a1 + 368));
  if (v14.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v14.__size_ >= 0x17)
  {
    v16 = (v14.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14.__size_ | 7) != 0x17)
      v16 = v14.__size_ | 7;
    v17 = v16 + 1;
    p_dst = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v14.__size_;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_18;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14.__size_;
  p_dst = &__dst;
  if (v14.__size_)
LABEL_18:
    memmove(p_dst, v14.__data_, v14.__size_);
  *((_BYTE *)p_dst + v14.__size_) = 0;
  v18 = (void *)__dst.__r_.__value_.__r.__words[0];
  LODWORD(__src[0]) = __dst.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)__src + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3);
  v19 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else
  {
    __p = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    LODWORD(v73) = __src[0];
    *(_DWORD *)((char *)&v73 + 3) = *(_DWORD *)((char *)__src + 3);
    HIBYTE(v73) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
  }
  v20 = (void **)(a2 + 288);
  if (*(char *)(a2 + 311) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = __p;
  *(_QWORD *)(a2 + 304) = v73;
  HIBYTE(v73) = 0;
  LOBYTE(__p) = 0;
  if (v19 < 0)
  {
    operator delete(v18);
    v71 = 0;
    if (*(_QWORD *)(a2 + 112) != *(_QWORD *)(a2 + 104))
      goto LABEL_29;
LABEL_28:
    if (*(double *)(a1 + 264) <= 2.22044605e-16)
      goto LABEL_31;
    goto LABEL_29;
  }
  v71 = 0;
  if (*(_QWORD *)(a2 + 112) == *(_QWORD *)(a2 + 104))
    goto LABEL_28;
LABEL_29:
  if (sub_2396B8968(a1, (double *)&v71))
  {
    v21 = v71;
    v22 = *(_QWORD **)(a2 + 32);
    v22[4] = v71;
    *v22 = v21;
  }
LABEL_31:
  v23 = *(double *)(a1 + 272);
  if (v23 > 2.22044605e-16 && *(double *)(a1 + 280) > 2.22044605e-16)
  {
    v24 = *(_QWORD *)(a2 + 32);
    *(double *)(v24 + 16) = v23;
    *(_QWORD *)(v24 + 40) = *(_QWORD *)(a1 + 280);
  }
  v25 = fabs(*(double *)(a1 + 208));
  if (v25 > 2.22044605e-16 && v25 <= 90.0)
  {
    v26 = fabs(*(double *)(a1 + 216));
    if (v26 > 2.22044605e-16 && v26 <= 180.0)
    {
      v27 = *(_QWORD **)(a2 + 256);
      v28 = *(_QWORD *)(a2 + 264) - (_QWORD)v27;
      if (v28 > 0x17)
      {
        if (v28 != 24)
          *(_QWORD *)(a2 + 264) = v27 + 3;
      }
      else
      {
        sub_23945E108(a2 + 256, 3 - (v28 >> 3));
        v27 = *(_QWORD **)(a2 + 256);
      }
      *v27 = *(_QWORD *)(a1 + 208);
      v27[1] = *(_QWORD *)(a1 + 216);
      v27[2] = *(_QWORD *)(a1 + 224);
      if (!*(_BYTE *)(a1 + 256))
      {
        v29 = *(double *)(a1 + 232);
        if (v29 != -1.0e20)
        {
          v30 = v29 <= -1.0e20 ? -1.0e20 - v29 : v29 + 1.0e20;
          if (v30 > 0.00000001)
            *(double *)(a2 + 280) = v29;
        }
      }
    }
  }
  HIBYTE(v73) = 6;
  LODWORD(__p) = 218762272;
  WORD2(__p) = 2825;
  BYTE6(__p) = 0;
  sub_239593978((_QWORD *)(a1 + 40), (void **)&__p, &__dst);
  if (SHIBYTE(v73) < 0)
    operator delete((void *)__p);
  HIBYTE(v70) = 6;
  LODWORD(__src[0]) = 218762272;
  WORD2(__src[0]) = 2825;
  BYTE6(__src[0]) = 0;
  sub_239593978((_QWORD *)(a1 + 64), __src, &__p);
  if (SHIBYTE(v70) < 0)
    operator delete(__src[0]);
  HIBYTE(v68) = 6;
  LODWORD(v67[0]) = 218762272;
  WORD2(v67[0]) = 2825;
  BYTE6(v67[0]) = 0;
  sub_239593978((_QWORD *)(a1 + 112), v67, __src);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  HIBYTE(v66) = 6;
  LODWORD(v65[0]) = 218762272;
  WORD2(v65[0]) = 2825;
  BYTE6(v65[0]) = 0;
  sub_239593978((_QWORD *)(a1 + 136), v65, v67);
  if (SHIBYTE(v66) < 0)
    operator delete(v65[0]);
  HIBYTE(v64) = 6;
  LODWORD(v62) = 218762272;
  WORD2(v62) = 2825;
  BYTE6(v62) = 0;
  sub_239593978((_QWORD *)(a1 + 88), &v62, v65);
  if (SHIBYTE(v64) < 0)
    operator delete(v62);
  v62 = 0;
  v63 = 0;
  v64 = 0;
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (size)
  {
    v34 = sub_23959AE70((char **)&v62, (uint64_t)&__dst);
    v63 = v34;
    v35 = HIBYTE(v73);
    v36 = SHIBYTE(v73);
    v37 = *((_QWORD *)&__p + 1);
    if (v73 < 0)
      v35 = *((_QWORD *)&__p + 1);
    if (!v35)
      goto LABEL_65;
  }
  else
  {
    v34 = 0;
    v47 = HIBYTE(v73);
    v36 = SHIBYTE(v73);
    v37 = *((_QWORD *)&__p + 1);
    if (v73 < 0)
      v47 = *((_QWORD *)&__p + 1);
    if (!v47)
    {
LABEL_65:
      v38 = (void *)HIBYTE(v70);
      v39 = SHIBYTE(v70);
      v40 = __src[1];
      if (v70 < 0)
        v38 = __src[1];
      if (!v38)
        goto LABEL_68;
      goto LABEL_87;
    }
  }
  if ((unint64_t)v34 >= v64)
  {
    v34 = sub_23959AE70((char **)&v62, (uint64_t)&__p);
  }
  else
  {
    if (v36 < 0)
    {
      sub_23941A7F8(v34, (void *)__p, v37);
    }
    else
    {
      v48 = __p;
      *((_QWORD *)v34 + 2) = v73;
      *(_OWORD *)v34 = v48;
    }
    v34 += 24;
  }
  v63 = v34;
  v49 = (void *)HIBYTE(v70);
  v39 = SHIBYTE(v70);
  v40 = __src[1];
  if (v70 < 0)
    v49 = __src[1];
  if (!v49)
  {
LABEL_68:
    v41 = (void *)HIBYTE(v68);
    v42 = SHIBYTE(v68);
    v43 = v67[1];
    if (v68 < 0)
      v41 = v67[1];
    if (!v41)
      goto LABEL_71;
    goto LABEL_96;
  }
LABEL_87:
  if ((unint64_t)v34 >= v64)
  {
    v34 = sub_23959AE70((char **)&v62, (uint64_t)__src);
  }
  else
  {
    if (v39 < 0)
    {
      sub_23941A7F8(v34, __src[0], (unint64_t)v40);
    }
    else
    {
      v50 = *(_OWORD *)__src;
      *((_QWORD *)v34 + 2) = v70;
      *(_OWORD *)v34 = v50;
    }
    v34 += 24;
  }
  v63 = v34;
  v51 = (void *)HIBYTE(v68);
  v42 = SHIBYTE(v68);
  v43 = v67[1];
  if (v68 < 0)
    v51 = v67[1];
  if (!v51)
  {
LABEL_71:
    v44 = (void *)HIBYTE(v66);
    v45 = SHIBYTE(v66);
    v46 = v65[1];
    if (v66 < 0)
      v44 = v65[1];
    if (!v44)
      goto LABEL_112;
LABEL_105:
    if ((unint64_t)v34 >= v64)
    {
      v34 = sub_23959AE70((char **)&v62, (uint64_t)v65);
    }
    else
    {
      if (v45 < 0)
      {
        sub_23941A7F8(v34, v65[0], (unint64_t)v46);
      }
      else
      {
        v54 = *(_OWORD *)v65;
        *((_QWORD *)v34 + 2) = v66;
        *(_OWORD *)v34 = v54;
      }
      v34 += 24;
    }
    v63 = v34;
    goto LABEL_112;
  }
LABEL_96:
  if ((unint64_t)v34 >= v64)
  {
    v34 = sub_23959AE70((char **)&v62, (uint64_t)v67);
  }
  else
  {
    if (v42 < 0)
    {
      sub_23941A7F8(v34, v67[0], (unint64_t)v43);
    }
    else
    {
      v52 = *(_OWORD *)v67;
      *((_QWORD *)v34 + 2) = v68;
      *(_OWORD *)v34 = v52;
    }
    v34 += 24;
  }
  v63 = v34;
  v53 = (void *)HIBYTE(v66);
  v45 = SHIBYTE(v66);
  v46 = v65[1];
  if (v66 < 0)
    v53 = v65[1];
  if (v53)
    goto LABEL_105;
LABEL_112:
  v60 = 1;
  LOWORD(v59) = 32;
  sub_23941AE44((uint64_t)v62, (uint64_t)v34, (uint64_t)&v59, &v61, v31, v32);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v61;
  *((_BYTE *)&v61.__r_.__value_.__s + 23) = 0;
  v61.__r_.__value_.__s.__data_[0] = 0;
  if (v60 < 0)
  {
    operator delete(v59);
    v55 = (_QWORD *)(a2 + 80);
    if (a2 + 80 == a1 + 344)
      goto LABEL_119;
    goto LABEL_118;
  }
  v55 = (_QWORD *)(a2 + 80);
  if (a2 + 80 != a1 + 344)
LABEL_118:
    sub_23945D3D0(v55, *(char **)(a1 + 344), *(char **)(a1 + 352), (uint64_t)(*(_QWORD *)(a1 + 352) - *(_QWORD *)(a1 + 344)) >> 3);
LABEL_119:
  v56 = (char *)v62;
  if (v62)
  {
    v57 = (void **)v63;
    v58 = v62;
    if (v63 != v62)
    {
      do
      {
        if (*((char *)v57 - 1) < 0)
          operator delete(*(v57 - 3));
        v57 -= 3;
      }
      while (v57 != (void **)v56);
      v58 = v62;
    }
    v63 = v56;
    operator delete(v58);
  }
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v65[0]);
    if ((SHIBYTE(v68) & 0x80000000) == 0)
    {
LABEL_129:
      if ((SHIBYTE(v70) & 0x80000000) == 0)
        goto LABEL_130;
      goto LABEL_135;
    }
  }
  else if ((SHIBYTE(v68) & 0x80000000) == 0)
  {
    goto LABEL_129;
  }
  operator delete(v67[0]);
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
LABEL_130:
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_131;
    goto LABEL_136;
  }
LABEL_135:
  operator delete(__src[0]);
  if ((SHIBYTE(v73) & 0x80000000) == 0)
  {
LABEL_131:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_137:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
LABEL_136:
  operator delete((void *)__p);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_137;
}

void sub_23959FB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  sub_23941B08C((void **)&a18);
  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  if (a48 < 0)
    operator delete(a43);
  if (*(char *)(v48 - 65) < 0)
    operator delete(*(void **)(v48 - 88));
  _Unwind_Resume(a1);
}

void sub_23959FC80(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(a1[1] - *a1) >> 3;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_23945E108((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 8 * a2;
  }
}

void sub_23959FCAC(uint64_t a1, int a2)
{
  int8x16_t v4;
  double v5;
  int32x4_t v6;
  void **v7;
  __int128 v8;
  uint64_t v9;

  sub_2396B9550(&v8);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = v8;
  *(_QWORD *)(a1 + 16) = v9;
  MEMORY[0x23B83DBFC](a1 + 24, "0.0.0");
  MEMORY[0x23B83DBFC](a1 + 48, "0.0");
  sub_2396B9374(&v8, v4, v5, v6);
  v7 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v8;
  *(_QWORD *)(a1 + 88) = v9;
  MEMORY[0x23B83DBFC](a1 + 96, "");
  MEMORY[0x23B83DBFC](a1 + 120, "");
  MEMORY[0x23B83DBFC](a1 + 144, "");
  *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
  sub_23959ED0C((const void ***)(a1 + 176), a2);
}

uint64_t *sub_23959FD90(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  void **v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  _QWORD v38[2];
  _QWORD *v39;

  sub_2396157EC((uint64_t)v38, a3);
  v37 = 7;
  strcpy((char *)v36, "version");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF330;
  v5[1] = a1;
  sub_23961580C((uint64_t)v38, (uint64_t)v36, (uint64_t)v5);
  v35 = 10;
  strcpy((char *)v34, "sw_version");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF330;
  v6[1] = a1 + 24;
  sub_23961580C((uint64_t)v38, (uint64_t)v34, (uint64_t)v6);
  v33 = 14;
  strcpy((char *)v32, "system_version");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADF330;
  v7[1] = a1 + 48;
  sub_23961580C((uint64_t)v38, (uint64_t)v32, (uint64_t)v7);
  v31 = 10;
  strcpy((char *)v30, "identifier");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADF330;
  v8[1] = a1 + 72;
  sub_23961580C((uint64_t)v38, (uint64_t)v30, (uint64_t)v8);
  v29 = 9;
  strcpy((char *)v28, "date_time");
  v9 = (_QWORD *)operator new();
  *v9 = &off_250ADF330;
  v9[1] = a1 + 96;
  sub_23961580C((uint64_t)v38, (uint64_t)v28, (uint64_t)v9);
  v27 = 11;
  strcpy((char *)v26, "device_type");
  v10 = (_QWORD *)operator new();
  *v10 = &off_250ADF330;
  v10[1] = a1 + 120;
  sub_23961580C((uint64_t)v38, (uint64_t)v26, (uint64_t)v10);
  v25 = 4;
  strcpy((char *)v24, "unit");
  v11 = (_QWORD *)operator new();
  *v11 = &off_250ADF330;
  v11[1] = a1 + 144;
  sub_23961580C((uint64_t)v38, (uint64_t)v24, (uint64_t)v11);
  v23 = 8;
  strcpy((char *)v22, "coverage");
  v12 = (_QWORD *)operator new();
  *v12 = &off_250ADF360;
  v12[1] = a1 + 168;
  sub_23961580C((uint64_t)v38, (uint64_t)v22, (uint64_t)v12);
  v21 = 5;
  strcpy((char *)__p, "shots");
  v13 = (_QWORD *)operator new();
  *v13 = &off_250ADF390;
  v13[1] = a1 + 176;
  sub_23961580C((uint64_t)v38, (uint64_t)__p, (uint64_t)v13);
  if (v21 < 0)
  {
    operator delete(__p[0]);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v25 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v22[0]);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v24[0]);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v29 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v26[0]);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v31 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v28[0]);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v33 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v30[0]);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v35 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_29:
    operator delete(v34[0]);
    if ((v37 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_28:
  operator delete(v32[0]);
  if (v35 < 0)
    goto LABEL_29;
LABEL_9:
  if ((v37 & 0x80000000) == 0)
    goto LABEL_10;
LABEL_30:
  operator delete(v36[0]);
LABEL_10:
  sub_23959479C((uint64_t)v38, a2);
  v14 = v39;
  if (v39)
  {
    do
    {
      v15 = v14[5];
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v14 = (_QWORD *)*v14;
    }
    while (v14);
    v16 = (void **)v39;
    if (v39)
    {
      do
      {
        v19 = (void **)*v16;
        if (*((char *)v16 + 39) < 0)
          operator delete(v16[2]);
        operator delete(v16);
        v16 = v19;
      }
      while (v19);
    }
  }
  v17 = (void *)v38[0];
  v38[0] = 0;
  if (v17)
    operator delete(v17);
  return a2;
}

void sub_2395A0218(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_2395A022C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a28);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a34);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a51 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a40);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(v51 - 121) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a46);
  if ((*(char *)(v51 - 121) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(v51 - 97) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v51 - 144));
  if ((*(char *)(v51 - 97) & 0x80000000) == 0)
  {
LABEL_10:
    sub_2395905C0(v51 - 96);
    _Unwind_Resume(a1);
  }
LABEL_19:
  operator delete(*(void **)(v51 - 120));
  sub_2395905C0(v51 - 96);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395A03A0(uint64_t a1, uint64_t *a2, char a3, int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  void *v20;
  void **v22;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  _QWORD v41[2];
  _QWORD *v42;

  sub_2396157EC((uint64_t)v41, a3);
  v40 = 7;
  strcpy((char *)v39, "version");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADF3C0;
  v8[1] = a1;
  sub_23961580C((uint64_t)v41, (uint64_t)v39, (uint64_t)v8);
  v38 = 10;
  strcpy((char *)v37, "sw_version");
  v9 = (_QWORD *)operator new();
  *v9 = &off_250ADF3C0;
  v9[1] = a1 + 24;
  sub_23961580C((uint64_t)v41, (uint64_t)v37, (uint64_t)v9);
  v36 = 14;
  strcpy((char *)v35, "system_version");
  v10 = (_QWORD *)operator new();
  *v10 = &off_250ADF3C0;
  v10[1] = a1 + 48;
  sub_23961580C((uint64_t)v41, (uint64_t)v35, (uint64_t)v10);
  v34 = 10;
  strcpy((char *)v33, "identifier");
  v11 = (_QWORD *)operator new();
  *v11 = &off_250ADF3C0;
  v11[1] = a1 + 72;
  sub_23961580C((uint64_t)v41, (uint64_t)v33, (uint64_t)v11);
  v32 = 9;
  strcpy((char *)v31, "date_time");
  v12 = (_QWORD *)operator new();
  *v12 = &off_250ADF3C0;
  v12[1] = a1 + 96;
  sub_23961580C((uint64_t)v41, (uint64_t)v31, (uint64_t)v12);
  v30 = 11;
  strcpy((char *)v29, "device_type");
  v13 = (_QWORD *)operator new();
  *v13 = &off_250ADF3C0;
  v13[1] = a1 + 120;
  sub_23961580C((uint64_t)v41, (uint64_t)v29, (uint64_t)v13);
  v28 = 4;
  strcpy((char *)v27, "unit");
  v14 = (_QWORD *)operator new();
  *v14 = &off_250ADF3C0;
  v14[1] = a1 + 144;
  sub_23961580C((uint64_t)v41, (uint64_t)v27, (uint64_t)v14);
  v26 = 8;
  strcpy((char *)v25, "coverage");
  v15 = (_QWORD *)operator new();
  *v15 = &off_250ADF570;
  v15[1] = a1 + 168;
  sub_23961580C((uint64_t)v41, (uint64_t)v25, (uint64_t)v15);
  v24 = 5;
  strcpy((char *)__p, "shots");
  v16 = (_QWORD *)operator new();
  *v16 = &off_250ADF720;
  v16[1] = a1 + 176;
  sub_23961580C((uint64_t)v41, (uint64_t)__p, (uint64_t)v16);
  if (v24 < 0)
  {
    operator delete(__p[0]);
    if ((v26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v28 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v25[0]);
  if ((v28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v30 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v27[0]);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v32 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v29[0]);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v34 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v31[0]);
  if ((v34 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v36 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v33[0]);
  if ((v36 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v38 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v35[0]);
  if ((v38 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v40 & 0x80000000) == 0)
      goto LABEL_10;
LABEL_20:
    operator delete(v39[0]);
    if (!a4)
      goto LABEL_23;
    goto LABEL_21;
  }
LABEL_19:
  operator delete(v37[0]);
  if (v40 < 0)
    goto LABEL_20;
LABEL_10:
  if (!a4)
    goto LABEL_23;
LABEL_21:
  if ((a3 & 1) == 0)
  {
    sub_2396158C8(a2, (uint64_t)v41);
    goto LABEL_24;
  }
LABEL_23:
  sub_2395902F0((uint64_t)v41, a2);
LABEL_24:
  v17 = v42;
  if (v42)
  {
    do
    {
      v18 = v17[5];
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v17 = (_QWORD *)*v17;
    }
    while (v17);
    v19 = (void **)v42;
    if (v42)
    {
      do
      {
        v22 = (void **)*v19;
        if (*((char *)v19 + 39) < 0)
          operator delete(v19[2]);
        operator delete(v19);
        v19 = v22;
      }
      while (v22);
    }
  }
  v20 = (void *)v41[0];
  v41[0] = 0;
  if (v20)
    operator delete(v20);
  return a2;
}

void sub_2395A0854(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_2395A0868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a28);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a34);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a51 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a40);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(v51 - 137) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a46);
  if ((*(char *)(v51 - 137) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(v51 - 113) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v51 - 160));
  if ((*(char *)(v51 - 113) & 0x80000000) == 0)
  {
LABEL_10:
    sub_2395905C0(v51 - 112);
    _Unwind_Resume(a1);
  }
LABEL_19:
  operator delete(*(void **)(v51 - 136));
  sub_2395905C0(v51 - 112);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395A09DC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v11 = *v19;
LABEL_61:
      *v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    v28 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_2395A0CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395A0D0C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 47) < 0)
      operator delete(*(void **)(v2 + 24));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_2395A0D58(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(_QWORD *)(a1 + 112) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 80);
  if (v5)
  {
    *(_QWORD *)(a1 + 88) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 56);
  if (v6)
  {
    *(_QWORD *)(a1 + 64) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 32);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2395A0DF8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    if ((*(char *)(a1 + 311) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(void **)(a1 + 256);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 311) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 288));
  v2 = *(void **)(a1 + 256);
  if (v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 264) = v2;
    operator delete(v2);
  }
LABEL_5:
  v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(_QWORD *)(a1 + 240) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 208);
  if (v4)
  {
    *(_QWORD *)(a1 + 216) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 184);
  if (v5)
  {
    *(_QWORD *)(a1 + 192) = v5;
    operator delete(v5);
  }
  return sub_2395A0D58(a1);
}

uint64_t sub_2395A0E8C(uint64_t a1)
{
  void *v2;

  if ((*(char *)(a1 + 391) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 344);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 368));
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
LABEL_4:
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_15:
    operator delete(*(void **)(a1 + 64));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      return a1;
    goto LABEL_16;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    goto LABEL_15;
LABEL_8:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
    return a1;
LABEL_16:
  operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_2395A0F5C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A0F80(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395955F0(*(_QWORD *)(a1 + 8), (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395A0FBC(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (a3)
  {
    v5 = std::istream::get();
    v6 = sub_2396162D4((uint64_t)a2, v5);
    if (v6)
    {
      std::string::resize((std::string *)v4, v6, 0);
      std::istream::read();
    }
    else if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  else
  {
    sub_239595A48(*(_QWORD *)(a1 + 8), a2);
  }
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

void sub_2395A1084(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A10A8(uint64_t a1, uint64_t *a2, int a3)
{
  sub_2395A1124(*(long double **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395A10E4(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395A1290(*(_QWORD *)(a1 + 8), (uint64_t)a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395A1124(long double *a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    return a2;
  }
  else
  {
    if (fmod(*a1, 1.0) == 0.0)
    {
      v5 = *a2;
      v6 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      v7 = *((_QWORD *)v6 + 2);
      *((_DWORD *)v6 + 2) = *((_DWORD *)v6 + 2) & 0xFFFFFEFB | 4;
      *(uint64_t *)((char *)a2 + *(_QWORD *)(v5 - 24) + 16) = 1;
      std::ostream::operator<<();
      v8 = *a2;
      *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 16) = v7;
      *(_DWORD *)((char *)a2 + *(_QWORD *)(v8 - 24) + 8) &= 0xFFFFFEFB;
    }
    else
    {
      std::ostream::operator<<();
    }
    return a2;
  }
}

uint64_t sub_2395A1290(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (std::istream::get() != 198)
    {
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    return a2;
  }
  else
  {
    MEMORY[0x23B83DCEC](a2, a1);
    return a2;
  }
}

void sub_2395A13D8(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A13FC(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395A1478(*(uint64_t **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395A1438(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395A54B4(*(uint64_t **)(a1 + 8), (uint64_t)a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_2395A1478(uint64_t *a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  __int128 __p;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  if (a3)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = 0x2E8BA2E8BA2E8BA3 * ((v6 - *a1) >> 5);
    if (HIDWORD(v7))
    {
      std::ostream::put();
      v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 5);
      if (0x7FFFFFFF * (unint64_t)(v8 / 0x7FFFFFFF) >= v8)
        v9 = v8 / 0x7FFFFFFF;
      else
        v9 = v8 / 0x7FFFFFFF + 1;
      v20 = 2;
      v21 = v9;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      HIBYTE(v18) = 7;
      strcpy((char *)&__p, "content");
      std::ostream::put();
      v22 = 7;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v10 = a1[1] - *a1;
      if (v10)
      {
        v11 = 0;
        v12 = 0x2E8BA2E8BA2E8BA3 * (v10 >> 5);
        do
        {
          v18 = a1;
          v19 = 0;
          *(_QWORD *)&__p = v11;
          v11 += 0x7FFFFFFFLL;
          if (v12 >= v11)
            v12 = v11;
          *((_QWORD *)&__p + 1) = v12;
          sub_2395A18B8(&__p, a2);
          v12 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 5);
        }
        while (v11 < v12);
      }
    }
    else
    {
      sub_2395A1C7C(v5, v6, a2, v7);
    }
  }
  else
  {
    v13 = *a1;
    v14 = a1[1];
    std::ostream::put();
    if (v13 != v14)
    {
      sub_2395A1D64(v13, a2, 0);
      for (i = v13 + 352; i != v14; i += 352)
      {
        std::ostream::put();
        sub_2395A1D64(i, a2, 0);
      }
    }
    std::ostream::put();
  }
  return a2;
}

void sub_2395A1894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395A18B8(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  char __p[23];
  char v7;
  int v8;
  int v9;

  v2 = (_QWORD *)a1[2];
  if (!v2)
    return 0;
  std::ostream::put();
  v8 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v7 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v9 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return sub_2395A1C7C(*v2 + 352 * *a1, *v2 + 352 * a1[1], a2, a1[1] - *a1);
}

void sub_2395A1C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395A1C7C(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *exception;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  for (; a1 != a2; a1 += 352)
    sub_2395A1D64(a1, a3, 1);
  return 1;
}

_QWORD *sub_2395A1D64(uint64_t a1, _QWORD *a2, char a3)
{
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  void **v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28;
  char v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  _QWORD v40[2];
  _QWORD *v41;

  v5 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  v6 = *((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = 14;
  sub_2396157EC((uint64_t)v40, a3);
  v39 = 9;
  strcpy((char *)v38, "timestamp");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADF3C0;
  v7[1] = a1 + 312;
  sub_23961580C((uint64_t)v40, (uint64_t)v38, (uint64_t)v7);
  v37 = 4;
  strcpy((char *)v36, "name");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADF3C0;
  v8[1] = a1 + 288;
  sub_23961580C((uint64_t)v40, (uint64_t)v36, (uint64_t)v8);
  v35 = 6;
  strcpy((char *)v34, "camera");
  v9 = (_QWORD *)operator new();
  *v9 = &off_250ADF3F0;
  v9[1] = a1;
  sub_23961580C((uint64_t)v40, (uint64_t)v34, (uint64_t)v9);
  v33 = 6;
  strcpy((char *)v32, "object");
  v10 = (_QWORD *)operator new();
  *v10 = &off_250ADF4E0;
  v10[1] = a1 + 184;
  sub_23961580C((uint64_t)v40, (uint64_t)v32, (uint64_t)v10);
  v31 = 5;
  strcpy((char *)v30, "scene");
  v11 = (_QWORD *)operator new();
  *v11 = &off_250ADF510;
  v11[1] = a1 + 232;
  sub_23961580C((uint64_t)v40, (uint64_t)v30, (uint64_t)v11);
  v29 = 3;
  LODWORD(v28) = 7565415;
  v12 = (_QWORD *)operator new();
  *v12 = &off_250ADF540;
  v12[1] = a1 + 256;
  sub_23961580C((uint64_t)v40, (uint64_t)&v28, (uint64_t)v12);
  v27 = 8;
  strcpy((char *)v26, "cameraId");
  v13 = (_QWORD *)operator new();
  *v13 = &off_250ADF5A0;
  v13[1] = a1 + 336;
  sub_23961580C((uint64_t)v40, (uint64_t)v26, (uint64_t)v13);
  v25 = 9;
  strcpy((char *)v24, "segmentId");
  v14 = (_QWORD *)operator new();
  *v14 = &off_250ADF5A0;
  v14[1] = a1 + 340;
  sub_23961580C((uint64_t)v40, (uint64_t)v24, (uint64_t)v14);
  v23 = 10;
  strcpy((char *)__p, "sequenceId");
  v15 = (_QWORD *)operator new();
  *v15 = &off_250ADF5A0;
  v15[1] = a1 + 344;
  sub_23961580C((uint64_t)v40, (uint64_t)__p, (uint64_t)v15);
  if (v23 < 0)
  {
    operator delete(__p[0]);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v24[0]);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v29 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v26[0]);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v31 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v28);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v33 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v30[0]);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v35 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v32[0]);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v37 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_29:
    operator delete(v36[0]);
    if ((v39 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_28:
  operator delete(v34[0]);
  if (v37 < 0)
    goto LABEL_29;
LABEL_9:
  if ((v39 & 0x80000000) == 0)
    goto LABEL_10;
LABEL_30:
  operator delete(v38[0]);
LABEL_10:
  sub_2395902F0((uint64_t)v40, a2);
  *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 16) = (int)v6;
  v16 = v41;
  if (v41)
  {
    do
    {
      v17 = v16[5];
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v16 = (_QWORD *)*v16;
    }
    while (v16);
    v18 = (void **)v41;
    if (v41)
    {
      do
      {
        v21 = (void **)*v18;
        if (*((char *)v18 + 39) < 0)
          operator delete(v18[2]);
        operator delete(v18);
        v18 = v21;
      }
      while (v21);
    }
  }
  v19 = (void *)v40[0];
  v40[0] = 0;
  if (v19)
    operator delete(v19);
  return a2;
}

void sub_2395A220C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_2395A2220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a28);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a34);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a51 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a40);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(v51 - 121) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a46);
  if ((*(char *)(v51 - 121) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(v51 - 97) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v51 - 144));
  if ((*(char *)(v51 - 97) & 0x80000000) == 0)
  {
LABEL_10:
    sub_2395905C0(v51 - 96);
    _Unwind_Resume(a1);
  }
LABEL_19:
  operator delete(*(void **)(v51 - 120));
  sub_2395905C0(v51 - 96);
  _Unwind_Resume(a1);
}

void sub_2395A2398(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A23BC(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395955F0(*(_QWORD *)(a1 + 8), (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395A23F8()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

void sub_2395A2430(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A2454(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395A24C4(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395A2490()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395A24C4(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void **v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  int v32;
  _QWORD v33[2];
  _QWORD *v34;

  sub_2396157EC((uint64_t)v33, a3);
  v32 = *(unsigned __int8 *)(a1 + 24);
  v31 = 5;
  strcpy((char *)v30, "model");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF3C0;
  v5[1] = a1;
  sub_23961580C((uint64_t)v33, (uint64_t)v30, (uint64_t)v5);
  v29 = 11;
  strcpy((char *)v28, "orientation");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF420;
  v6[1] = &v32;
  sub_23961580C((uint64_t)v33, (uint64_t)v28, (uint64_t)v6);
  v27 = 10;
  strcpy((char *)v26, "intrinsics");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADF450;
  v7[1] = a1 + 32;
  sub_23961580C((uint64_t)v33, (uint64_t)v26, (uint64_t)v7);
  v25 = 9;
  strcpy((char *)v24, "transform");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADF450;
  v8[1] = a1 + 56;
  sub_23961580C((uint64_t)v33, (uint64_t)v24, (uint64_t)v8);
  v23 = 7;
  strcpy((char *)v22, "gravity");
  v9 = (_QWORD *)operator new();
  *v9 = &off_250ADF450;
  v9[1] = a1 + 80;
  sub_23961580C((uint64_t)v33, (uint64_t)v22, (uint64_t)v9);
  v21 = 10;
  strcpy((char *)v20, "resolution");
  v10 = (_QWORD *)operator new();
  *v10 = &off_250ADF480;
  v10[1] = a1 + 104;
  sub_23961580C((uint64_t)v33, (uint64_t)v20, (uint64_t)v10);
  v19 = 14;
  strcpy((char *)__p, "lensDistortion");
  v11 = (_QWORD *)operator new();
  *v11 = &off_250ADF4B0;
  v11[1] = a1 + 128;
  sub_23961580C((uint64_t)v33, (uint64_t)__p, (uint64_t)v11);
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v23 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v20[0]);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v22[0]);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v27 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v24[0]);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v29 & 0x80000000) == 0)
      goto LABEL_7;
LABEL_25:
    operator delete(v28[0]);
    if ((v31 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_24:
  operator delete(v26[0]);
  if (v29 < 0)
    goto LABEL_25;
LABEL_7:
  if ((v31 & 0x80000000) == 0)
    goto LABEL_8;
LABEL_26:
  operator delete(v30[0]);
LABEL_8:
  sub_2395902F0((uint64_t)v33, a2);
  v12 = v34;
  if (v34)
  {
    do
    {
      v13 = v12[5];
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v12 = (_QWORD *)*v12;
    }
    while (v12);
    v14 = (void **)v34;
    if (v34)
    {
      do
      {
        v17 = (void **)*v14;
        if (*((char *)v14 + 39) < 0)
          operator delete(v14[2]);
        operator delete(v14);
        v14 = v17;
      }
      while (v17);
    }
  }
  v15 = (void *)v33[0];
  v33[0] = 0;
  if (v15)
    operator delete(v15);
  return a2;
}

void sub_2395A2890(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2395A28A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a27);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a44 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a33);
  if ((a44 & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v44 - 89) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a39);
  if ((*(char *)(v44 - 89) & 0x80000000) == 0)
  {
LABEL_8:
    sub_2395905C0(v44 - 80);
    _Unwind_Resume(a1);
  }
LABEL_15:
  operator delete(*(void **)(v44 - 112));
  sub_2395905C0(v44 - 80);
  _Unwind_Resume(a1);
}

void sub_2395A29CC(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A29F0(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  else
  {
    std::ostream::operator<<();
  }
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395A2A88(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395A2AC8(*(_QWORD *)(a1 + 8), (uint64_t)a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t sub_2395A2AC8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (std::istream::get() == 198)
      std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    return a2;
  }
  else
  {
    MEMORY[0x23B83DD10](a2, a1);
    return a2;
  }
}

void sub_2395A2BD0(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A2BF4(uint64_t a1, uint64_t *a2, int a3)
{
  sub_2395A2C64(*(uint64_t **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395A2C30()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

uint64_t *sub_2395A2C64(uint64_t *a1, uint64_t *a2, int a3)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 __p;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;

  if (a3)
  {
    if ((unint64_t)(a1[1] - *a1) >> 32)
    {
      std::ostream::put();
      v5 = (a1[1] - *a1) >> 3;
      if (v5 <= 0xFFFFFFF * (v5 / 0xFFFFFFF))
        v6 = v5 / 0xFFFFFFF;
      else
        v6 = v5 / 0xFFFFFFF + 1;
      v14 = 2;
      v15 = v6;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      HIBYTE(v12) = 7;
      strcpy((char *)&__p, "content");
      std::ostream::put();
      v16 = 7;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v7 = a1[1] - *a1;
      if (v7)
      {
        v8 = 0;
        v9 = v7 >> 3;
        do
        {
          v12 = a1;
          v13 = 0;
          *(_QWORD *)&__p = v8;
          v8 += 0xFFFFFFFLL;
          if (v9 >= v8)
            v9 = v8;
          *((_QWORD *)&__p + 1) = v9;
          sub_2395A3098((uint64_t)&__p, a2);
          v9 = (a1[1] - *a1) >> 3;
        }
        while (v8 < v9);
      }
      return a2;
    }
    else
    {
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      return a2;
    }
  }
  else
  {
    sub_2395A34D0(*a1, a1[1], a2);
    return a2;
  }
}

void sub_2395A3074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2395A3098(uint64_t a1, _QWORD *a2)
{
  char __p[23];
  char v6;
  int v7;
  int v8;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  std::ostream::put();
  v7 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v6 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v8 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  *(_DWORD *)__p = 8 * (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395A34AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395A34D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  std::ostream::put();
  if (a1 != a2)
  {
    v6 = a3 + 2;
    v7 = a1 + 8;
    if (fmod(*(long double *)(v7 - 8), 1.0) != 0.0)
      goto LABEL_5;
    while (1)
    {
      v8 = *a3;
      v9 = (char *)a3 + *(_QWORD *)(*a3 - 24);
      v10 = *((_QWORD *)v9 + 2);
      *((_DWORD *)v9 + 2) = *((_DWORD *)v9 + 2) & 0xFFFFFEFB | 4;
      *(_QWORD *)((char *)v6 + *(_QWORD *)(v8 - 24)) = 1;
      std::ostream::operator<<();
      v11 = *a3;
      *(_QWORD *)((char *)v6 + *(_QWORD *)(*a3 - 24)) = v10;
      *(_DWORD *)((char *)a3 + *(_QWORD *)(v11 - 24) + 8) &= 0xFFFFFEFB;
      if (v7 == a2)
        break;
      while (1)
      {
        std::ostream::put();
        v7 += 8;
        if (fmod(*(long double *)(v7 - 8), 1.0) == 0.0)
          break;
LABEL_5:
        std::ostream::operator<<();
        if (v7 == a2)
          goto LABEL_8;
      }
    }
  }
LABEL_8:
  std::ostream::put();
  return 1;
}

void sub_2395A3604(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A3628(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395A3698(*(uint64_t **)(a1 + 8), (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395A3664()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

uint64_t sub_2395A3698(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 __p;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  if (a3)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = v6 - *a1;
    if (v7 < 0x7FFFFFFF9)
    {
      sub_2395A3E80(v5, v6, a2, v7 >> 3);
      return a2;
    }
    else
    {
      std::ostream::put();
      v8 = (a1[1] - *a1) >> 3;
      if (0x7FFFFFFF * (unint64_t)(v8 / 0x7FFFFFFF) >= v8)
        v9 = v8 / 0x7FFFFFFF;
      else
        v9 = v8 / 0x7FFFFFFF + 1;
      v20 = 2;
      v21 = v9;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      HIBYTE(v18) = 7;
      strcpy((char *)&__p, "content");
      std::ostream::put();
      v22 = 7;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v10 = a1[1] - *a1;
      if (v10)
      {
        v11 = 0;
        v12 = v10 >> 3;
        do
        {
          v18 = a1;
          v19 = 0;
          *(_QWORD *)&__p = v11;
          v11 += 0x7FFFFFFFLL;
          if (v12 >= v11)
            v12 = v11;
          *((_QWORD *)&__p + 1) = v12;
          sub_2395A3AC0(&__p, a2);
          v12 = (a1[1] - *a1) >> 3;
        }
        while (v11 < v12);
      }
      return a2;
    }
  }
  else
  {
    v15 = *a1;
    v14 = a1[1];
    std::ostream::put();
    if (v15 != v14)
    {
      v16 = v15 + 8;
      std::ostream::operator<<();
      while (v16 != v14)
      {
        std::ostream::put();
        v16 += 8;
        std::ostream::operator<<();
      }
    }
    std::ostream::put();
    return a2;
  }
}

void sub_2395A3A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395A3AC0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char __p[23];
  char v7;
  int v8;
  int v9;

  v2 = (_QWORD *)a1[2];
  if (!v2)
    return 0;
  std::ostream::put();
  v8 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v7 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v9 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return sub_2395A3E80(*v2 + 8 * *a1, *v2 + 8 * a1[1], a2, a1[1] - *a1);
}

void sub_2395A3E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395A3E80(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *exception;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  for (; a1 != a2; a1 += 8)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  return 1;
}

void sub_2395A3FE0(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A4004(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395A4074(*(unsigned __int8 **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395A4040()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395A4074(unsigned __int8 *a1, _QWORD *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  void **v13;
  void *v14[3];
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *__p[2];
  char v20;
  _QWORD v21[2];
  _QWORD *v22;

  sub_2396157EC((uint64_t)v21, a3);
  sub_2395A4348(a1, (uint64_t)__p);
  v18 = 4;
  strcpy((char *)v17, "type");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF330;
  v5[1] = __p;
  sub_23961580C((uint64_t)v21, (uint64_t)v17, (uint64_t)v5);
  v16 = 15;
  strcpy((char *)v15, "distortionParam");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF450;
  v6[1] = a1 + 8;
  sub_23961580C((uint64_t)v21, (uint64_t)v15, (uint64_t)v6);
  strcpy((char *)v14, "inverseDistortionParam");
  HIBYTE(v14[2]) = 22;
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADF450;
  v7[1] = a1 + 32;
  sub_23961580C((uint64_t)v21, (uint64_t)v14, (uint64_t)v7);
  if ((SHIBYTE(v14[2]) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_19:
    operator delete(v15[0]);
    if ((v18 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_20;
  }
  operator delete(v14[0]);
  if (v16 < 0)
    goto LABEL_19;
LABEL_3:
  if ((v18 & 0x80000000) == 0)
    goto LABEL_4;
LABEL_20:
  operator delete(v17[0]);
LABEL_4:
  sub_2395902F0((uint64_t)v21, a2);
  if (v20 < 0)
    operator delete(__p[0]);
  v8 = v22;
  if (v22)
  {
    do
    {
      v9 = v8[5];
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v8 = (_QWORD *)*v8;
    }
    while (v8);
    v10 = (void **)v22;
    if (v22)
    {
      do
      {
        v13 = (void **)*v10;
        if (*((char *)v10 + 39) < 0)
          operator delete(v10[2]);
        operator delete(v10);
        v10 = v13;
      }
      while (v13);
    }
  }
  v11 = (void *)v21[0];
  v21[0] = 0;
  if (v11)
    operator delete(v11);
  return a2;
}

void sub_2395A4288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if ((a32 & 0x80000000) == 0)
  {
    sub_2395905C0(v32 - 80);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_2395905C0(v32 - 80);
  _Unwind_Resume(a1);
}

void sub_2395A4348(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;

  sub_2395A447C();
  if (!qword_25693C658)
    goto LABEL_24;
  v4 = *a1;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25693C658);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = *a1;
    if (qword_25693C658 <= v4)
      v6 = v4 % qword_25693C658;
  }
  else
  {
    v6 = ((_DWORD)qword_25693C658 - 1) & v4;
  }
  v7 = *(uint64_t ***)(qword_25693C650 + 8 * v6);
  if (!v7 || (v8 = *v7) == 0)
LABEL_24:
    sub_239EC0998();
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == v4)
      {
        if (*((unsigned __int8 *)v8 + 16) == (_DWORD)v4)
          goto LABEL_21;
      }
      else if ((v10 & (qword_25693C658 - 1)) != v6)
      {
        goto LABEL_24;
      }
      v8 = (uint64_t *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == v4)
      break;
    if (v9 >= qword_25693C658)
      v9 %= (unint64_t)qword_25693C658;
    if (v9 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (uint64_t *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (*((unsigned __int8 *)v8 + 16) != (_DWORD)v4)
    goto LABEL_11;
LABEL_21:
  if (*((char *)v8 + 47) < 0)
  {
    sub_23941A7F8((_BYTE *)a2, (void *)v8[3], v8[4]);
  }
  else
  {
    v11 = *(_OWORD *)(v8 + 3);
    *(_QWORD *)(a2 + 16) = v8[5];
    *(_OWORD *)a2 = v11;
  }
}

void sub_2395A447C()
{
  unsigned __int8 v0;
  char v1;
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5[8];
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *__p;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25693C648);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25693C648))
  {
    v4 = 0;
    sub_2395A46C8((uint64_t)v5, &v4, "none");
    v3 = 1;
    sub_2395A46C8((uint64_t)&v8, &v3, "heikkila");
    v2 = 2;
    sub_2395A46C8((uint64_t)&v11, &v2, "kannala4");
    v1 = 3;
    sub_2395A46C8((uint64_t)&v14, &v1, "lut");
    sub_2395A4780((uint64_t)&qword_25693C650, v5, 4);
    if (v16 < 0)
    {
      operator delete(__p);
      if ((v13 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v10 & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else if ((v13 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v12);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v7 & 0x80000000) == 0)
      {
LABEL_8:
        __cxa_atexit((void (*)(void *))sub_2395A4800, &qword_25693C650, &dword_23940C000);
        __cxa_guard_release(&qword_25693C648);
        return;
      }
LABEL_12:
      operator delete(v6);
      goto LABEL_8;
    }
LABEL_11:
    operator delete(v9);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_12;
  }
}

void sub_2395A4608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a23 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  if ((a23 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a16 & 0x80000000) == 0)
    {
LABEL_10:
      __cxa_guard_abort(&qword_25693C648);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a11);
    __cxa_guard_abort(&qword_25693C648);
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(a18);
  if ((a16 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_2395A46C8(uint64_t a1, _BYTE *a2, char *__s)
{
  void *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *a2;
  v5 = (void *)(a1 + 8);
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v5 = operator new(v8 + 1);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    *(_BYTE *)(a1 + 31) = v6;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v5, __s, v7);
LABEL_9:
  *((_BYTE *)v5 + v7) = 0;
  return a1;
}

uint64_t sub_2395A4780(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      sub_2395A4868(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_2395A47E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v3;

  v3 = *(void ***)(v1 + 16);
  if (v3)
    sub_239EC09C8(v3);
  sub_239EBFDD0((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395A4800(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

char *sub_2395A4868(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  char **v9;
  char *result;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(char ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)result + 1);
            if (v12 == v6)
            {
              if (result[16] == (_DWORD)v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = *(char **)result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)result + 1);
          if (v11 == v6)
          {
            if (result[16] == (_DWORD)v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = *(char **)result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v27 = (char *)operator new(0x30uLL);
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v6;
  v27[16] = *(_BYTE *)a3;
  v13 = v27 + 24;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_23941A7F8(v13, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v27 + 5) = *(_QWORD *)(a3 + 24);
  }
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_40:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v17 = v27;
        if (v16)
          goto LABEL_29;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v17 = v27;
        if (v16)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      v17 = v27;
      if (v16)
        goto LABEL_29;
    }
LABEL_53:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v27)
    {
      v26 = *(_QWORD *)(*(_QWORD *)v27 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v26 >= v7)
          v26 %= v7;
      }
      else
      {
        v26 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27;
    }
    goto LABEL_64;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v17 = v27;
  if (!v16)
    goto LABEL_53;
LABEL_29:
  *v17 = *v16;
  *v16 = v27;
LABEL_64:
  result = v27;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_2395A4BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395A4BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395A4C04(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A4C28(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395A4C98(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395A4C64()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395A4C98(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void **v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *__p[2];
  void *v18;

  sub_2396157EC((uint64_t)__p, a3);
  v16 = 11;
  strcpy((char *)v15, "boundingBox");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF450;
  v5[1] = a1;
  sub_23961580C((uint64_t)__p, (uint64_t)v15, (uint64_t)v5);
  v14 = 9;
  strcpy((char *)v13, "transform");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF450;
  v6[1] = a1 + 24;
  sub_23961580C((uint64_t)__p, (uint64_t)v13, (uint64_t)v6);
  if (v14 < 0)
  {
    operator delete(v13[0]);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15[0]);
LABEL_3:
  sub_2395902F0((uint64_t)__p, a2);
  v7 = v18;
  if (v18)
  {
    do
    {
      v8 = v7[5];
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    v9 = (void **)v18;
    if (v18)
    {
      do
      {
        v12 = (void **)*v9;
        if (*((char *)v9 + 39) < 0)
          operator delete(v9[2]);
        operator delete(v9);
        v9 = v12;
      }
      while (v12);
    }
  }
  v10 = __p[0];
  __p[0] = 0;
  if (v10)
    operator delete(v10);
  return a2;
}

void sub_2395A4E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395A4E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      sub_2395905C0((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  sub_2395905C0((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_2395A4E9C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A4EC0(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395A4F30(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395A4EFC()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395A4F30(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void **v11;
  void *__p[2];
  char v13;
  void *v14[2];
  void *v15;

  sub_2396157EC((uint64_t)v14, a3);
  v13 = 11;
  strcpy((char *)__p, "boundingBox");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF450;
  v5[1] = a1;
  sub_23961580C((uint64_t)v14, (uint64_t)__p, (uint64_t)v5);
  if (v13 < 0)
    operator delete(__p[0]);
  sub_2395902F0((uint64_t)v14, a2);
  v6 = v15;
  if (v15)
  {
    do
    {
      v7 = v6[5];
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    v8 = (void **)v15;
    if (v15)
    {
      do
      {
        v11 = (void **)*v8;
        if (*((char *)v8 + 39) < 0)
          operator delete(v8[2]);
        operator delete(v8);
        v8 = v11;
      }
      while (v11);
    }
  }
  v9 = v14[0];
  v14[0] = 0;
  if (v9)
    operator delete(v9);
  return a2;
}

void sub_2395A5054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395A5068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_2395905C0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2395A5090(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A50B4(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395A5124(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395A50F0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395A5124(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void **v12;
  void *v13[3];
  void *v14[2];
  char v15;
  void *__p[2];
  void *v17;

  sub_2396157EC((uint64_t)__p, a3);
  v15 = 10;
  strcpy((char *)v14, "coordinate");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF450;
  v5[1] = a1;
  sub_23961580C((uint64_t)__p, (uint64_t)v14, (uint64_t)v5);
  HIBYTE(v13[2]) = 17;
  strcpy((char *)v13, "relative_altitude");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF570;
  v6[1] = a1 + 24;
  sub_23961580C((uint64_t)__p, (uint64_t)v13, (uint64_t)v6);
  if (SHIBYTE(v13[2]) < 0)
  {
    operator delete(v13[0]);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v14[0]);
LABEL_3:
  sub_2395902F0((uint64_t)__p, a2);
  v7 = v17;
  if (v17)
  {
    do
    {
      v8 = v7[5];
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    v9 = (void **)v17;
    if (v17)
    {
      do
      {
        v12 = (void **)*v9;
        if (*((char *)v9 + 39) < 0)
          operator delete(v9[2]);
        operator delete(v9);
        v9 = v12;
      }
      while (v12);
    }
  }
  v10 = __p[0];
  __p[0] = 0;
  if (v10)
    operator delete(v10);
  return a2;
}

void sub_2395A52B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395A52CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      sub_2395905C0((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  sub_2395905C0((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_2395A532C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A5350(uint64_t a1, uint64_t *a2, int a3)
{
  sub_2395A1124(*(long double **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395A538C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

void sub_2395A53C4(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A53E8(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  else
  {
    std::ostream::operator<<();
  }
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395A5480()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

uint64_t sub_2395A54B4(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t i;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t j;
  uint64_t *v17;

  v17 = a1;
  v6 = a1[1];
  for (i = *a1; v6 != i; v6 = sub_2395A0DF8(v6 - 352))
    ;
  a1[1] = i;
  if (!a3)
  {
    v13 = (uint64_t *)a2;
    v14 = 0;
    goto LABEL_11;
  }
  v8 = std::istream::peek();
  v9 = v8;
  if ((v8 - 196) > 2)
  {
    if ((v8 - 220) > 3 || v8 == 222)
      return a2;
    v13 = (uint64_t *)a2;
    v14 = 1;
LABEL_11:
    sub_2395A5610(&v17, v13, v14);
    return a2;
  }
  std::istream::get();
  v10 = sub_2396162D4(a2, v9) / 0x160uLL;
  v11 = a1[1];
  v12 = 0x2E8BA2E8BA2E8BA3 * ((v11 - *a1) >> 5);
  if (v10 <= v12)
  {
    if (v10 < v12)
    {
      for (j = *a1 + 352 * v10; v11 != j; v11 = sub_2395A0DF8(v11 - 352))
        ;
      a1[1] = j;
    }
  }
  else
  {
    sub_2395A6150(a1, v10 - v12);
  }
  std::istream::read();
  return a2;
}

BOOL sub_2395A5610(uint64_t **a1, uint64_t *a2, int a3)
{
  int v5;
  unsigned int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  char v28;
  std::string::size_type v29;
  _BOOL8 result;
  unsigned int v31;
  int v32;
  int v33;
  char *v34;
  _QWORD *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  int i;
  unsigned int v40;
  char v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string v48;
  uint64_t v49;
  void *__p;
  char v51;
  _QWORD v52[23];
  void *v53;
  void *v54;
  _BYTE v55[9];
  _QWORD *v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[32];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  char v73;
  __int16 v74;
  char v75;
  uint64_t v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v53 = 0;
      v54 = 0;
      *(_QWORD *)v55 = 0;
      sub_2395A6150((uint64_t *)&v53, v6);
      std::istream::read();
      v8 = v53;
      v7 = v54;
      if (v54 == v53)
      {
        v8 = v54;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v12 = (uint64_t)v8 + v9;
          v13 = *a1;
          v14 = (*a1)[1];
          if (v14 >= (*a1)[2])
          {
            v11 = sub_2395A6FF8(*a1, v12);
          }
          else
          {
            sub_2395A7198((*a1)[1], v12);
            v11 = v14 + 352;
            v13[1] = v14 + 352;
          }
          v13[1] = v11;
          ++v10;
          v8 = v53;
          v7 = v54;
          v9 += 352;
        }
        while (v10 < 0x2E8BA2E8BA2E8BA3 * (((_BYTE *)v54 - (_BYTE *)v53) >> 5));
      }
      if (v8)
      {
        if (v7 != v8)
        {
          do
            v7 = (void *)sub_2395A0DF8((uint64_t)v7 - 352);
          while (v7 != v8);
          v7 = v53;
        }
        v54 = v8;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) != 0xDC)
    {
      if (v5 == 223)
      {
        v52[22] = 0;
        memset(&v48, 0, sizeof(v48));
        std::istream::read();
        std::istream::read();
        std::istream::read();
        std::istream::read();
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
      }
      return 0;
    }
    v23 = sub_2396162D4((uint64_t)a2, v5);
    if (v23)
    {
      v24 = v23;
      do
      {
        while (1)
        {
          *(_WORD *)&v55[7] = 0;
          LOBYTE(v53) = 0;
          v25 = operator new(0x48uLL);
          v25[8] = 0x3FF0000000000000;
          *(_OWORD *)v25 = xmmword_239EC7570;
          *((_OWORD *)v25 + 1) = unk_239EC7580;
          *((_OWORD *)v25 + 2) = xmmword_239EC7590;
          *((_OWORD *)v25 + 3) = unk_239EC75A0;
          v56 = v25;
          v57 = (char *)(v25 + 9);
          v59 = 0u;
          v60 = 0u;
          v61 = 0u;
          memset(v62, 0, 25);
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v63 = 0u;
          v58 = (char *)(v25 + 9);
          v72 = 0xC415AF1D78B58C40;
          v74 = 0;
          v73 = 0;
          v75 = 0;
          v76 = -1;
          v77 = -1;
          sub_2395A6758((uint64_t)&v53, a2, 1);
          v26 = *a1;
          v27 = (*a1)[1];
          if (v27 < (*a1)[2])
            break;
          v26[1] = sub_2395A6FF8(*a1, (uint64_t)&v53);
          sub_2395A0DF8((uint64_t)&v53);
          if (!--v24)
            return 1;
        }
        sub_2395A7198((*a1)[1], (uint64_t)&v53);
        v26[1] = v27 + 352;
        v26[1] = v27 + 352;
        sub_2395A0DF8((uint64_t)&v53);
        --v24;
      }
      while (v24);
    }
    return 1;
  }
  v15 = a2 + 4;
  v16 = MEMORY[0x24BDAC740];
  while (1)
  {
    v17 = std::istream::peek();
    if (v17 <= 0x7F)
      break;
    v18 = __maskrune(v17, 0x4000uLL);
    v19 = *(_QWORD *)(*a2 - 24);
    if (!v18)
      goto LABEL_16;
LABEL_14:
    if (!*(_DWORD *)((char *)v15 + v19))
      std::istream::get();
  }
  v19 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v16 + 4 * v17 + 60) & 0x4000) != 0)
    goto LABEL_14;
LABEL_16:
  if ((*((_BYTE *)a2 + v19 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v20 = std::istream::peek();
    if (v20 > 0x7F)
    {
      v21 = __maskrune(v20, 0x4000uLL);
      v22 = *(_QWORD *)(*a2 - 24);
      if (!v21)
        break;
      goto LABEL_22;
    }
    v22 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v16 + 4 * v20 + 60) & 0x4000) != 0)
    {
LABEL_22:
      if (!*(_DWORD *)((char *)v15 + v22))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v22 + 32) & 2) != 0)
    return 0;
  v28 = 0;
  v29 = *MEMORY[0x24BEDB7F0];
  v46 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v47 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v45 = MEMORY[0x24BEDB848] + 16;
LABEL_34:
  if ((*((_BYTE *)v15 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v28 & 1) == 0)
  {
    while (1)
    {
      v31 = std::istream::peek();
      if (v31 <= 0x7F)
      {
        v33 = *(_DWORD *)((char *)v15 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v16 + 4 * v31 + 60) & 0x4000) == 0)
        {
LABEL_42:
          if ((v33 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v48);
          v52[19] = (char *)&v48.__r_.__value_.__l + 16;
          if (sub_239596128(a2))
          {
            v34 = (char *)&v48.__r_.__value_.__r.__words[2] + *(_QWORD *)(v48.__r_.__value_.__r.__words[2] - 24);
            if ((v34[32] & 5) == 0)
            {
              (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v34 + 5)
                                                                                            + 32))(&v53, *((_QWORD *)v34 + 5), 0, 1, 16);
              if (*(uint64_t *)&v62[24] >= 1)
              {
                *(_WORD *)&v55[7] = 0;
                LOBYTE(v53) = 0;
                v35 = operator new(0x48uLL);
                v35[8] = 0x3FF0000000000000;
                *(_OWORD *)v35 = xmmword_239EC7570;
                *((_OWORD *)v35 + 1) = unk_239EC7580;
                *((_OWORD *)v35 + 2) = xmmword_239EC7590;
                *((_OWORD *)v35 + 3) = unk_239EC75A0;
                v56 = v35;
                v57 = (char *)(v35 + 9);
                v59 = 0u;
                v60 = 0u;
                v61 = 0u;
                memset(v62, 0, 25);
                v70 = 0u;
                v71 = 0u;
                v68 = 0u;
                v69 = 0u;
                v66 = 0u;
                v67 = 0u;
                v64 = 0u;
                v65 = 0u;
                v63 = 0u;
                v58 = (char *)(v35 + 9);
                v72 = 0xC415AF1D78B58C40;
                v74 = 0;
                v73 = 0;
                v75 = 0;
                v76 = -1;
                v77 = -1;
                sub_2395A6758((uint64_t)&v53, (uint64_t *)&v48, 0);
                v36 = *a1;
                v37 = (*a1)[1];
                if (v37 >= (*a1)[2])
                {
                  v38 = sub_2395A6FF8(*a1, (uint64_t)&v53);
                }
                else
                {
                  sub_2395A7198((*a1)[1], (uint64_t)&v53);
                  v38 = v37 + 352;
                  v36[1] = v37 + 352;
                }
                v36[1] = v38;
                sub_2395A0DF8((uint64_t)&v53);
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v40 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_60;
              if (v40 == 1560281088)
                break;
              if (v40 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v16 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_59;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_59;
              }
              if ((*((_BYTE *)v15 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_59:
                if (v40 != 738197504)
                  goto LABEL_61;
LABEL_60:
                std::istream::get();
                v28 = 0;
                goto LABEL_63;
              }
              std::istream::get();
            }
            v28 = 1;
LABEL_63:
            v41 = 1;
          }
          else
          {
LABEL_61:
            v41 = 0;
            v28 = 0;
          }
          v48.__r_.__value_.__r.__words[0] = v29;
          *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + *(_QWORD *)(v29 - 24)) = v47;
          v48.__r_.__value_.__r.__words[2] = v46;
          v49 = v45;
          if (v51 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](v52);
          result = 0;
          if ((v41 & 1) == 0)
            return result;
          goto LABEL_34;
        }
      }
      else
      {
        v32 = __maskrune(v31, 0x4000uLL);
        v33 = *(_DWORD *)((char *)v15 + *(_QWORD *)(*a2 - 24));
        if (!v32)
          goto LABEL_42;
      }
      if (!v33)
        std::istream::get();
    }
  }
  while (1)
  {
    v42 = std::istream::peek();
    v43 = v42 <= 0x7F ? *(_DWORD *)(v16 + 4 * v42 + 60) & 0x4000 : __maskrune(v42, 0x4000uLL);
    v44 = *(_QWORD *)(*a2 - 24);
    if (!v43)
      break;
    if (!*(_DWORD *)((char *)v15 + v44))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v44 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395A6008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2395A6150(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  char *v30;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - v6) >> 5) >= a2)
  {
    if (a2)
    {
      v12 = 0;
      v13 = v6 + 352 * a2;
      v14 = 352 * a2;
      v15 = 0uLL;
      do
      {
        v16 = (_OWORD *)(v6 + v12);
        v16[20] = v15;
        v16[21] = v15;
        v16[18] = v15;
        v16[19] = v15;
        v16[16] = v15;
        v16[17] = v15;
        v16[14] = v15;
        v16[15] = v15;
        v16[12] = v15;
        v16[13] = v15;
        v16[10] = v15;
        v16[11] = v15;
        v16[8] = v15;
        v16[9] = v15;
        v16[6] = v15;
        v16[7] = v15;
        v16[4] = v15;
        v16[5] = v15;
        v16[2] = v15;
        v16[3] = v15;
        *v16 = v15;
        v16[1] = v15;
        v17 = operator new(0x48uLL);
        *((_QWORD *)v16 + 4) = v17;
        *((_QWORD *)v16 + 6) = (char *)v17 + 72;
        v17[2] = xmmword_239EC7590;
        v17[3] = unk_239EC75A0;
        *v17 = xmmword_239EC7570;
        v17[1] = unk_239EC7580;
        *((_QWORD *)v17 + 8) = 0x3FF0000000000000;
        v15 = 0uLL;
        *(_OWORD *)((char *)v16 + 136) = 0u;
        v18 = v6 + v12 + 136;
        *(_QWORD *)(v18 - 96) = (char *)v17 + 72;
        *(_OWORD *)(v18 - 48) = 0u;
        *(_OWORD *)(v18 - 32) = 0u;
        *(_OWORD *)(v18 - 23) = 0u;
        *(_OWORD *)(v18 - 80) = 0u;
        *(_OWORD *)(v18 - 64) = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        *(_OWORD *)(v18 + 80) = 0u;
        *(_OWORD *)(v18 + 96) = 0u;
        *(_OWORD *)(v18 + 112) = 0u;
        *(_OWORD *)(v18 + 128) = 0u;
        *(_QWORD *)(v18 + 144) = 0xC415AF1D78B58C40;
        *(_BYTE *)(v18 + 175) = 0;
        *(_BYTE *)(v18 + 152) = 0;
        *(_BYTE *)(v18 + 199) = 0;
        *(_BYTE *)(v18 + 176) = 0;
        *(_QWORD *)(v18 + 200) = -1;
        v12 += 352;
        *(_DWORD *)(v18 + 208) = -1;
      }
      while (v14 != v12);
    }
    else
    {
      v13 = a1[1];
    }
    a1[1] = v13;
  }
  else
  {
    v7 = 0x2E8BA2E8BA2E8BA3 * ((v6 - *a1) >> 5);
    v8 = v7 + a2;
    if (v7 + a2 > 0xBA2E8BA2E8BA2ELL)
      sub_2394189F8();
    v9 = 0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 5);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x5D1745D1745D17)
      v10 = 0xBA2E8BA2E8BA2ELL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xBA2E8BA2E8BA2ELL)
        sub_239418A80();
      v11 = (char *)operator new(352 * v10);
    }
    else
    {
      v11 = 0;
    }
    v19 = 0;
    v20 = (uint64_t)&v11[352 * v7];
    v21 = 352 * a2;
    v29 = v20 + v21;
    v30 = &v11[352 * v10];
    v22 = 0uLL;
    do
    {
      v23 = (_OWORD *)(v20 + v19);
      v23[20] = v22;
      v23[21] = v22;
      v23[18] = v22;
      v23[19] = v22;
      v23[16] = v22;
      v23[17] = v22;
      v23[14] = v22;
      v23[15] = v22;
      v23[12] = v22;
      v23[13] = v22;
      v23[10] = v22;
      v23[11] = v22;
      v23[8] = v22;
      v23[9] = v22;
      v23[6] = v22;
      v23[7] = v22;
      v23[4] = v22;
      v23[5] = v22;
      v23[2] = v22;
      v23[3] = v22;
      *v23 = v22;
      v23[1] = v22;
      v24 = operator new(0x48uLL);
      v22 = 0uLL;
      *(_OWORD *)((char *)v23 + 136) = 0u;
      v25 = v20 + v19 + 136;
      *(_QWORD *)(v25 - 96) = v24 + 9;
      *(_QWORD *)(v25 - 88) = v24 + 9;
      v24[8] = 0x3FF0000000000000;
      *(_OWORD *)v24 = xmmword_239EC7570;
      *((_OWORD *)v24 + 1) = unk_239EC7580;
      *((_OWORD *)v24 + 2) = xmmword_239EC7590;
      *((_OWORD *)v24 + 3) = unk_239EC75A0;
      *(_QWORD *)(v25 - 104) = v24;
      *(_OWORD *)(v25 - 80) = 0u;
      *(_OWORD *)(v25 - 64) = 0u;
      *(_OWORD *)(v25 - 48) = 0u;
      *(_OWORD *)(v25 - 32) = 0u;
      *(_OWORD *)(v25 - 23) = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_OWORD *)(v25 + 32) = 0u;
      *(_OWORD *)(v25 + 48) = 0u;
      *(_OWORD *)(v25 + 64) = 0u;
      *(_OWORD *)(v25 + 80) = 0u;
      *(_OWORD *)(v25 + 96) = 0u;
      *(_OWORD *)(v25 + 112) = 0u;
      *(_OWORD *)(v25 + 128) = 0u;
      *(_QWORD *)(v25 + 144) = 0xC415AF1D78B58C40;
      *(_WORD *)(v25 + 175) = 0;
      *(_BYTE *)(v25 + 152) = 0;
      *(_BYTE *)(v25 + 199) = 0;
      *(_QWORD *)(v25 + 200) = -1;
      v19 += 352;
      *(_DWORD *)(v25 + 208) = -1;
    }
    while (v21 != v19);
    v27 = (__int128 *)*a1;
    v26 = (__int128 *)a1[1];
    if (v26 == (__int128 *)*a1)
    {
      *a1 = v20;
      a1[1] = v29;
      a1[2] = (uint64_t)v30;
    }
    else
    {
      do
      {
        v20 -= 352;
        v26 -= 22;
        sub_2395A6544(v5, v20, v26);
      }
      while (v26 != v27);
      v28 = (__int128 *)*a1;
      v26 = (__int128 *)a1[1];
      *a1 = v20;
      a1[1] = v29;
      a1[2] = (uint64_t)v30;
      if (v26 != v28)
      {
        do
        {
          v26 -= 22;
          sub_2395A0DF8((uint64_t)v26);
        }
        while (v26 != v28);
        v26 = v28;
      }
    }
    if (v26)
      operator delete(v26);
  }
}

void sub_2395A64D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2395A64DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2395A64F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2395A64F4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 352;
    sub_2395A0DF8(i - 352);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_2395A6544(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  uint64_t v6;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a2 + 24) = *((_BYTE *)a3 + 24);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a3 + 6);
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 6) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(__int128 *)((char *)a3 + 56);
  *(_QWORD *)(a2 + 72) = *((_QWORD *)a3 + 9);
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 9) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 80) = a3[5];
  *(_QWORD *)(a2 + 96) = *((_QWORD *)a3 + 12);
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  *((_QWORD *)a3 + 12) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_OWORD *)(a2 + 104) = *(__int128 *)((char *)a3 + 104);
  *(_QWORD *)(a2 + 120) = *((_QWORD *)a3 + 15);
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  *((_QWORD *)a3 + 13) = 0;
  *(_BYTE *)(a2 + 128) = *((_BYTE *)a3 + 128);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 136) = *(__int128 *)((char *)a3 + 136);
  *(_QWORD *)(a2 + 152) = *((_QWORD *)a3 + 19);
  *((_QWORD *)a3 + 17) = 0;
  *((_QWORD *)a3 + 18) = 0;
  *((_QWORD *)a3 + 19) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 160) = a3[10];
  *(_QWORD *)(a2 + 176) = *((_QWORD *)a3 + 22);
  *((_QWORD *)a3 + 20) = 0;
  *((_QWORD *)a3 + 21) = 0;
  *((_QWORD *)a3 + 22) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_OWORD *)(a2 + 184) = *(__int128 *)((char *)a3 + 184);
  *(_QWORD *)(a2 + 200) = *((_QWORD *)a3 + 25);
  *((_QWORD *)a3 + 23) = 0;
  *((_QWORD *)a3 + 24) = 0;
  *((_QWORD *)a3 + 25) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_OWORD *)(a2 + 208) = a3[13];
  *(_QWORD *)(a2 + 224) = *((_QWORD *)a3 + 28);
  *((_QWORD *)a3 + 26) = 0;
  *((_QWORD *)a3 + 27) = 0;
  *((_QWORD *)a3 + 28) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_OWORD *)(a2 + 232) = *(__int128 *)((char *)a3 + 232);
  *(_QWORD *)(a2 + 248) = *((_QWORD *)a3 + 31);
  *((_QWORD *)a3 + 29) = 0;
  *((_QWORD *)a3 + 30) = 0;
  *((_QWORD *)a3 + 31) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 256) = a3[16];
  *(_QWORD *)(a2 + 272) = *((_QWORD *)a3 + 34);
  *((_QWORD *)a3 + 32) = 0;
  *((_QWORD *)a3 + 33) = 0;
  *((_QWORD *)a3 + 34) = 0;
  *(_QWORD *)(a2 + 280) = *((_QWORD *)a3 + 35);
  v4 = a3[18];
  *(_QWORD *)(a2 + 304) = *((_QWORD *)a3 + 38);
  *(_OWORD *)(a2 + 288) = v4;
  *((_QWORD *)a3 + 37) = 0;
  *((_QWORD *)a3 + 38) = 0;
  *((_QWORD *)a3 + 36) = 0;
  result = *(__n128 *)((char *)a3 + 312);
  *(_QWORD *)(a2 + 328) = *((_QWORD *)a3 + 41);
  *(__n128 *)(a2 + 312) = result;
  *((_QWORD *)a3 + 40) = 0;
  *((_QWORD *)a3 + 41) = 0;
  *((_QWORD *)a3 + 39) = 0;
  v6 = *((_QWORD *)a3 + 42);
  *(_DWORD *)(a2 + 344) = *((_DWORD *)a3 + 86);
  *(_QWORD *)(a2 + 336) = v6;
  return result;
}

void **sub_2395A6700(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_2395A0DF8(v3 - 352);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_2395A6758(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  void **v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26;
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  _QWORD v38[2];
  _QWORD *v39;

  sub_2396157EC((uint64_t)v38, a3);
  v37 = 9;
  strcpy((char *)v36, "timestamp");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF330;
  v5[1] = a1 + 312;
  sub_23961580C((uint64_t)v38, (uint64_t)v36, (uint64_t)v5);
  v35 = 4;
  strcpy((char *)v34, "name");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF330;
  v6[1] = a1 + 288;
  sub_23961580C((uint64_t)v38, (uint64_t)v34, (uint64_t)v6);
  v33 = 6;
  strcpy((char *)v32, "camera");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADF5D0;
  v7[1] = a1;
  sub_23961580C((uint64_t)v38, (uint64_t)v32, (uint64_t)v7);
  v31 = 6;
  strcpy((char *)v30, "object");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADF690;
  v8[1] = a1 + 184;
  sub_23961580C((uint64_t)v38, (uint64_t)v30, (uint64_t)v8);
  v29 = 5;
  strcpy((char *)v28, "scene");
  v9 = (_QWORD *)operator new();
  *v9 = &off_250ADF6C0;
  v9[1] = a1 + 232;
  sub_23961580C((uint64_t)v38, (uint64_t)v28, (uint64_t)v9);
  v27 = 3;
  LODWORD(v26) = 7565415;
  v10 = (_QWORD *)operator new();
  *v10 = &off_250ADF6F0;
  v10[1] = a1 + 256;
  sub_23961580C((uint64_t)v38, (uint64_t)&v26, (uint64_t)v10);
  v25 = 8;
  strcpy((char *)v24, "cameraId");
  v11 = (_QWORD *)operator new();
  *v11 = &off_250ADF240;
  v11[1] = a1 + 336;
  sub_23961580C((uint64_t)v38, (uint64_t)v24, (uint64_t)v11);
  v23 = 9;
  strcpy((char *)v22, "segmentId");
  v12 = (_QWORD *)operator new();
  *v12 = &off_250ADF240;
  v12[1] = a1 + 340;
  sub_23961580C((uint64_t)v38, (uint64_t)v22, (uint64_t)v12);
  v21 = 10;
  strcpy((char *)__p, "sequenceId");
  v13 = (_QWORD *)operator new();
  *v13 = &off_250ADF240;
  v13[1] = a1 + 344;
  sub_23961580C((uint64_t)v38, (uint64_t)__p, (uint64_t)v13);
  if (v21 < 0)
  {
    operator delete(__p[0]);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v25 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v22[0]);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v24[0]);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v29 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v26);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v31 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v28[0]);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v33 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v30[0]);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v35 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_29:
    operator delete(v34[0]);
    if ((v37 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_28:
  operator delete(v32[0]);
  if (v35 < 0)
    goto LABEL_29;
LABEL_9:
  if ((v37 & 0x80000000) == 0)
    goto LABEL_10;
LABEL_30:
  operator delete(v36[0]);
LABEL_10:
  sub_23959479C((uint64_t)v38, a2);
  v14 = v39;
  if (v39)
  {
    do
    {
      v15 = v14[5];
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v14 = (_QWORD *)*v14;
    }
    while (v14);
    v16 = (void **)v39;
    if (v39)
    {
      do
      {
        v19 = (void **)*v16;
        if (*((char *)v16 + 39) < 0)
          operator delete(v16[2]);
        operator delete(v16);
        v16 = v19;
      }
      while (v19);
    }
  }
  v17 = (void *)v38[0];
  v38[0] = 0;
  if (v17)
    operator delete(v17);
  return a2;
}

void sub_2395A6BCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2395A6BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a28);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a34);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a51 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a40);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(v51 - 105) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a46);
  if ((*(char *)(v51 - 105) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(v51 - 81) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v51 - 128));
  if ((*(char *)(v51 - 81) & 0x80000000) == 0)
  {
LABEL_10:
    sub_2395905C0(v51 - 80);
    _Unwind_Resume(a1);
  }
LABEL_19:
  operator delete(*(void **)(v51 - 104));
  sub_2395905C0(v51 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_2395A6D54(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_2395A6FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395A6FF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v14;
  char *v15;

  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xBA2E8BA2E8BA2ELL)
    sub_2394189F8();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 5)) >= 0x5D1745D1745D17)
    v6 = 0xBA2E8BA2E8BA2ELL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xBA2E8BA2E8BA2ELL)
      sub_239418A80();
    v7 = (char *)operator new(352 * v6);
  }
  else
  {
    v7 = 0;
  }
  v14 = (uint64_t)&v7[352 * v3];
  v15 = &v7[352 * v6];
  sub_2395A7198(v14, a2);
  v8 = v14;
  v9 = v14 + 352;
  v11 = (__int128 *)*a1;
  v10 = (__int128 *)a1[1];
  if (v10 == (__int128 *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v8 -= 352;
      v10 -= 22;
      sub_2395A6544((uint64_t)(a1 + 2), v8, v10);
    }
    while (v10 != v11);
    v12 = (__int128 *)*a1;
    v10 = (__int128 *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 22;
        sub_2395A0DF8((uint64_t)v10);
      }
      while (v10 != v12);
      v10 = v12;
    }
  }
  if (v10)
    operator delete(v10);
  return v14 + 352;
}

void sub_2395A7184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A64F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2395A7198(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  _BYTE *v16;
  __int128 v17;
  uint64_t v18;

  v4 = sub_2395A73A0((_QWORD *)a1, (__int128 *)a2);
  sub_2395A7728(v4 + 23, a2 + 184);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v6 = *(_BYTE **)(a2 + 232);
  v5 = *(_BYTE **)(a2 + 240);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_2394189F8();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 232) = v8;
    *(_QWORD *)(a1 + 240) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 248) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 240) = v9;
  }
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  v11 = *(_BYTE **)(a2 + 256);
  v10 = *(_BYTE **)(a2 + 264);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_2394189F8();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 256) = v13;
    *(_QWORD *)(a1 + 264) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)(a1 + 272) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 264) = v14;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  if (*(char *)(a2 + 311) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 288), *(void **)(a2 + 288), *(_QWORD *)(a2 + 296));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = v15;
  }
  v16 = (_BYTE *)(a1 + 312);
  if (*(char *)(a2 + 335) < 0)
  {
    sub_23941A7F8(v16, *(void **)(a2 + 312), *(_QWORD *)(a2 + 320));
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    *(_OWORD *)v16 = v17;
  }
  v18 = *(_QWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v18;
  return a1;
}

void sub_2395A72FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;

  if (*(char *)(v1 + 311) < 0)
  {
    operator delete(*v5);
    v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      v8 = *v3;
      if (!*v3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 264) = v7;
  operator delete(v7);
  v8 = *v3;
  if (!*v3)
  {
LABEL_5:
    sub_2394FCFA8(v2);
    sub_2395A0D58(v1);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v1 + 240) = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_2395A7390()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x2395A7320);
  JUMPOUT(0x2395A7318);
}

_QWORD *sub_2395A73A0(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  char v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  char *v25;

  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_BYTE *)a2 + 24);
  __dst[4] = 0;
  *((_BYTE *)__dst + 24) = v5;
  __dst[5] = 0;
  __dst[6] = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - v7);
    __dst[4] = v9;
    __dst[5] = v9;
    v10 = &v9[8 * (v8 >> 3)];
    __dst[6] = v10;
    memcpy(v9, v7, v8);
    __dst[5] = v10;
  }
  __dst[7] = 0;
  __dst[8] = 0;
  __dst[9] = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_2394189F8();
    v14 = (char *)operator new(v11 - v12);
    __dst[7] = v14;
    __dst[8] = v14;
    v15 = &v14[8 * (v13 >> 3)];
    __dst[9] = v15;
    memcpy(v14, v12, v13);
    __dst[8] = v15;
  }
  __dst[10] = 0;
  __dst[11] = 0;
  __dst[12] = 0;
  v17 = (_BYTE *)*((_QWORD *)a2 + 10);
  v16 = (_BYTE *)*((_QWORD *)a2 + 11);
  v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0)
      sub_2394189F8();
    v19 = (char *)operator new(v16 - v17);
    __dst[10] = v19;
    __dst[11] = v19;
    v20 = &v19[8 * (v18 >> 3)];
    __dst[12] = v20;
    memcpy(v19, v17, v18);
    __dst[11] = v20;
  }
  __dst[13] = 0;
  __dst[14] = 0;
  __dst[15] = 0;
  v22 = (_BYTE *)*((_QWORD *)a2 + 13);
  v21 = (_BYTE *)*((_QWORD *)a2 + 14);
  v23 = v21 - v22;
  if (v21 != v22)
  {
    if (v23 < 0)
      sub_2394189F8();
    v24 = (char *)operator new(v21 - v22);
    __dst[13] = v24;
    __dst[14] = v24;
    v25 = &v24[8 * (v23 >> 3)];
    __dst[15] = v25;
    memcpy(v24, v22, v23);
    __dst[14] = v25;
  }
  sub_2395A7618((uint64_t)(__dst + 16), (char *)a2 + 128);
  return __dst;
}

void sub_2395A7560(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 112) = v7;
    operator delete(v7);
    v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      v9 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v8 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 88) = v8;
  operator delete(v8);
  v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    v10 = *v2;
    if (!*v2)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  *(_QWORD *)(v1 + 64) = v9;
  operator delete(v9);
  v10 = *v2;
  if (!*v2)
  {
LABEL_5:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v1 + 40) = v10;
  operator delete(v10);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395A7618(uint64_t a1, char *a2)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 1);
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_2394189F8();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 4);
  v10 = (_BYTE *)*((_QWORD *)a2 + 5);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_2394189F8();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  return a1;
}

void sub_2395A76F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2395A7728(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_2394189F8();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[8 * (v6 >> 3)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_2394189F8();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  return a1;
}

void sub_2395A77F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_2395A7830(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A7854(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395A24C4(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395A7890(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395A78D0(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395A78D0(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void **v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  int v32;
  _QWORD v33[2];
  _QWORD *v34;

  sub_2396157EC((uint64_t)v33, a3);
  v32 = 0;
  v31 = 5;
  strcpy((char *)v30, "model");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF330;
  v5[1] = a1;
  sub_23961580C((uint64_t)v33, (uint64_t)v30, (uint64_t)v5);
  v29 = 11;
  strcpy((char *)v28, "orientation");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF420;
  v6[1] = &v32;
  sub_23961580C((uint64_t)v33, (uint64_t)v28, (uint64_t)v6);
  v27 = 10;
  strcpy((char *)v26, "intrinsics");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADF600;
  v7[1] = a1 + 32;
  sub_23961580C((uint64_t)v33, (uint64_t)v26, (uint64_t)v7);
  v25 = 9;
  strcpy((char *)v24, "transform");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADF600;
  v8[1] = a1 + 56;
  sub_23961580C((uint64_t)v33, (uint64_t)v24, (uint64_t)v8);
  v23 = 7;
  strcpy((char *)v22, "gravity");
  v9 = (_QWORD *)operator new();
  *v9 = &off_250ADF600;
  v9[1] = a1 + 80;
  sub_23961580C((uint64_t)v33, (uint64_t)v22, (uint64_t)v9);
  v21 = 10;
  strcpy((char *)v20, "resolution");
  v10 = (_QWORD *)operator new();
  *v10 = &off_250ADF630;
  v10[1] = a1 + 104;
  sub_23961580C((uint64_t)v33, (uint64_t)v20, (uint64_t)v10);
  v19 = 14;
  strcpy((char *)__p, "lensDistortion");
  v11 = (_QWORD *)operator new();
  *v11 = &off_250ADF660;
  v11[1] = a1 + 128;
  sub_23961580C((uint64_t)v33, (uint64_t)__p, (uint64_t)v11);
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v23 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v20[0]);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v22[0]);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v27 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v24[0]);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v29 & 0x80000000) == 0)
      goto LABEL_7;
LABEL_25:
    operator delete(v28[0]);
    if ((v31 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_24:
  operator delete(v26[0]);
  if (v29 < 0)
    goto LABEL_25;
LABEL_7:
  if ((v31 & 0x80000000) == 0)
    goto LABEL_8;
LABEL_26:
  operator delete(v30[0]);
LABEL_8:
  sub_23959479C((uint64_t)v33, a2);
  *(_BYTE *)(a1 + 24) = v32;
  v12 = v34;
  if (v34)
  {
    do
    {
      v13 = v12[5];
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v12 = (_QWORD *)*v12;
    }
    while (v12);
    v14 = (void **)v34;
    if (v34)
    {
      do
      {
        v17 = (void **)*v14;
        if (*((char *)v14 + 39) < 0)
          operator delete(v14[2]);
        operator delete(v14);
        v14 = v17;
      }
      while (v17);
    }
  }
  v15 = (void *)v33[0];
  v33[0] = 0;
  if (v15)
    operator delete(v15);
  return a2;
}

void sub_2395A7CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2395A7CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a27);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a44 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a33);
  if ((a44 & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v44 - 89) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a39);
  if ((*(char *)(v44 - 89) & 0x80000000) == 0)
  {
LABEL_8:
    sub_2395905C0(v44 - 80);
    _Unwind_Resume(a1);
  }
LABEL_15:
  operator delete(*(void **)(v44 - 112));
  sub_2395905C0(v44 - 80);
  _Unwind_Resume(a1);
}

void sub_2395A7DDC(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A7E00(uint64_t a1, uint64_t *a2, int a3)
{
  sub_2395A2C64(*(uint64_t **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395A7E3C(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395A7E7C(*(_QWORD **)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t sub_2395A7E7C(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v12;

  v3 = (uint64_t)a2;
  v12 = a1;
  a1[1] = *a1;
  if (!a3)
    goto LABEL_10;
  v5 = std::istream::peek();
  v6 = v5;
  if ((v5 - 196) > 2)
  {
    if ((v5 - 220) > 3 || v5 == 222)
      return v3;
    a2 = (_QWORD *)v3;
    a3 = 1;
LABEL_10:
    sub_2395A7F7C((uint64_t *)&v12, a2, a3);
    return v3;
  }
  std::istream::get();
  v7 = (unint64_t)sub_2396162D4(v3, v6) >> 3;
  v8 = (uint64_t)(a1[1] - *a1) >> 3;
  v9 = v7 >= v8;
  v10 = v7 - v8;
  if (v10 != 0 && v9)
  {
    sub_23945E108((uint64_t)a1, v10);
  }
  else if (!v9)
  {
    a1[1] = *a1 + 8 * v7;
  }
  std::istream::read();
  return v3;
}

BOOL sub_2395A7F7C(uint64_t *a1, _QWORD *a2, int a3)
{
  int v4;
  unsigned int v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _BOOL8 result;
  char v62;
  void *v63;
  unsigned int v64;
  int v65;
  int v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  int i;
  unsigned int v92;
  char v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v104;
  void *v105;
  _QWORD v106[11];
  char v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  std::string v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v4 = std::istream::get();
    if ((v4 - 196) <= 2)
    {
      v5 = sub_2396162D4((uint64_t)a2, v4);
      v104 = 0;
      v105 = 0;
      v106[0] = 0;
      sub_23945E108((uint64_t)&v104, v5);
      std::istream::read();
      v6 = v105;
      if (v105 == v104)
      {
LABEL_67:
        if (v6)
        {
          v105 = v6;
          operator delete(v6);
        }
        return 1;
      }
      v7 = 0;
      v6 = v104;
      while (1)
      {
        v9 = *a1;
        v11 = *(char **)(*a1 + 8);
        v10 = *(_QWORD *)(*a1 + 16);
        if ((unint64_t)v11 >= v10)
          break;
        *(_QWORD *)v11 = *((_QWORD *)v6 + v7);
        v8 = (uint64_t)(v11 + 8);
LABEL_6:
        *(_QWORD *)(v9 + 8) = v8;
        ++v7;
        v6 = v104;
        if (v7 >= ((_BYTE *)v105 - (_BYTE *)v104) >> 3)
          goto LABEL_67;
      }
      v12 = *(char **)v9;
      v13 = (uint64_t)&v11[-*(_QWORD *)v9];
      v14 = v13 >> 3;
      v15 = (v13 >> 3) + 1;
      if (v15 >> 61)
        sub_2394189F8();
      v16 = v10 - (_QWORD)v12;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 61)
          sub_239418A80();
        v18 = operator new(8 * v17);
        v19 = &v18[8 * v14];
        *v19 = *((_QWORD *)v6 + v7);
        v8 = (uint64_t)(v19 + 1);
        if (v11 == v12)
          goto LABEL_25;
      }
      else
      {
        v18 = 0;
        v19 = (_QWORD *)(8 * v14);
        *(_QWORD *)(8 * v14) = *((_QWORD *)v6 + v7);
        v8 = 8 * v14 + 8;
        if (v11 == v12)
        {
LABEL_25:
          *(_QWORD *)v9 = v19;
          *(_QWORD *)(v9 + 8) = v8;
          *(_QWORD *)(v9 + 16) = &v18[8 * v17];
          if (v12)
            operator delete(v12);
          goto LABEL_6;
        }
      }
      v20 = v11 - 8 - v12;
      if (v20 < 0x58)
        goto LABEL_146;
      if ((unint64_t)(v11 - &v18[v13]) < 0x20)
        goto LABEL_146;
      v21 = (v20 >> 3) + 1;
      v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = &v11[-v22];
      v19 = (_QWORD *)((char *)v19 - v22);
      v24 = &v18[8 * v14 - 16];
      v25 = v11 - 16;
      v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 4;
      }
      while (v26);
      v11 = v23;
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_146:
        do
        {
          v28 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *--v19 = v28;
        }
        while (v11 != v12);
      }
      goto LABEL_25;
    }
    if ((v4 & 0xFFFFFFFE) != 0xDC)
    {
      if (v4 == 223)
      {
        v110 = 0;
        memset(&v111, 0, sizeof(v111));
        std::istream::read();
        std::istream::read();
        std::istream::read();
        std::istream::read();
      }
      return 0;
    }
    v37 = sub_2396162D4((uint64_t)a2, v4);
    if (!v37)
      return 1;
    v38 = 0;
    v39 = v37;
    while (1)
    {
      v104 = 0;
      sub_2395A1290((uint64_t)&v104, (uint64_t)a2, 1);
      v41 = *a1;
      v43 = *(char **)(*a1 + 8);
      v42 = *(_QWORD *)(*a1 + 16);
      if ((unint64_t)v43 >= v42)
        break;
      *(_QWORD *)v43 = v104;
      v40 = (uint64_t)(v43 + 8);
LABEL_46:
      *(_QWORD *)(v41 + 8) = v40;
      if (++v38 == v39)
        return 1;
    }
    v44 = *(char **)v41;
    v45 = (uint64_t)&v43[-*(_QWORD *)v41];
    v46 = v45 >> 3;
    v47 = (v45 >> 3) + 1;
    if (v47 >> 61)
      sub_2394189F8();
    v48 = v42 - (_QWORD)v44;
    if (v48 >> 2 > v47)
      v47 = v48 >> 2;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
      v49 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v49 = v47;
    if (v49)
    {
      if (v49 >> 61)
        sub_239418A80();
      v50 = operator new(8 * v49);
      v51 = &v50[8 * v46];
      *v51 = v104;
      v40 = (uint64_t)(v51 + 1);
      if (v43 == v44)
        goto LABEL_65;
    }
    else
    {
      v50 = 0;
      v51 = (_QWORD *)(8 * v46);
      *(_QWORD *)(8 * v46) = v104;
      v40 = 8 * v46 + 8;
      if (v43 == v44)
      {
LABEL_65:
        *(_QWORD *)v41 = v51;
        *(_QWORD *)(v41 + 8) = v40;
        *(_QWORD *)(v41 + 16) = &v50[8 * v49];
        if (v44)
          operator delete(v44);
        goto LABEL_46;
      }
    }
    v52 = v43 - 8 - v44;
    if (v52 < 0x58)
      goto LABEL_147;
    if ((unint64_t)(v43 - &v50[v45]) < 0x20)
      goto LABEL_147;
    v53 = (v52 >> 3) + 1;
    v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
    v55 = &v43[-v54];
    v51 = (_QWORD *)((char *)v51 - v54);
    v56 = &v50[8 * v46 - 16];
    v57 = v43 - 16;
    v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v59 = *(_OWORD *)v57;
      *(v56 - 1) = *((_OWORD *)v57 - 1);
      *v56 = v59;
      v56 -= 2;
      v57 -= 32;
      v58 -= 4;
    }
    while (v58);
    v43 = v55;
    if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_147:
      do
      {
        v60 = *((_QWORD *)v43 - 1);
        v43 -= 8;
        *--v51 = v60;
      }
      while (v43 != v44);
    }
    goto LABEL_65;
  }
  v29 = a2 + 4;
  v30 = MEMORY[0x24BDAC740];
  while (1)
  {
    v31 = std::istream::peek();
    if (v31 <= 0x7F)
      break;
    v32 = __maskrune(v31, 0x4000uLL);
    v33 = *(_QWORD *)(*a2 - 24);
    if (!v32)
      goto LABEL_34;
LABEL_32:
    if (!*(_DWORD *)((char *)v29 + v33))
      std::istream::get();
  }
  v33 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v30 + 4 * v31 + 60) & 0x4000) != 0)
    goto LABEL_32;
LABEL_34:
  if ((*((_BYTE *)a2 + v33 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v34 = std::istream::peek();
    if (v34 > 0x7F)
    {
      v35 = __maskrune(v34, 0x4000uLL);
      v36 = *(_QWORD *)(*a2 - 24);
      if (!v35)
        break;
      goto LABEL_40;
    }
    v36 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v30 + 4 * v34 + 60) & 0x4000) != 0)
    {
LABEL_40:
      if (!*(_DWORD *)((char *)v29 + v36))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v36 + 32) & 2) != 0)
    return 0;
  v62 = 0;
  v63 = (void *)*MEMORY[0x24BEDB7F0];
  v101 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v102 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v100 = MEMORY[0x24BEDB848] + 16;
LABEL_73:
  if ((*((_BYTE *)v29 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v62 & 1) == 0)
  {
    while (1)
    {
      v64 = std::istream::peek();
      if (v64 <= 0x7F)
      {
        v66 = *(_DWORD *)((char *)v29 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v30 + 4 * v64 + 60) & 0x4000) == 0)
        {
LABEL_81:
          if ((v66 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v104);
          v109 = v106;
          if (!sub_239596128(a2))
          {
LABEL_120:
            v93 = 0;
            v62 = 0;
            goto LABEL_123;
          }
          v67 = (char *)v106 + *(_QWORD *)(v106[0] - 24);
          if ((v67[32] & 5) != 0)
            goto LABEL_109;
          (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v67 + 5)
                                                                                              + 32))(&v111, *((_QWORD *)v67 + 5), 0, 1, 16);
          if (v112 < 1)
            goto LABEL_109;
          v111.__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x23B83DCEC](&v104, &v111);
          v68 = *a1;
          v70 = *(char **)(*a1 + 8);
          v69 = *(_QWORD *)(*a1 + 16);
          if ((unint64_t)v70 < v69)
          {
            *(_QWORD *)v70 = v111.__r_.__value_.__r.__words[0];
            v71 = v70 + 8;
            goto LABEL_107;
          }
          v99 = *a1;
          v72 = *(char **)v68;
          v73 = (uint64_t)&v70[-*(_QWORD *)v68];
          v74 = v73 >> 3;
          v75 = (v73 >> 3) + 1;
          if (v75 >> 61)
            sub_2394189F8();
          v76 = v69 - (_QWORD)v72;
          if (v76 >> 2 > v75)
            v75 = v76 >> 2;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
            v77 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (!v77)
          {
            v79 = 0;
            v80 = (_QWORD *)(8 * v74);
            *(_QWORD *)(8 * v74) = v111.__r_.__value_.__r.__words[0];
            v81 = 8 * v74 + 8;
            if (v70 != v72)
              goto LABEL_96;
LABEL_99:
            v68 = v99;
            goto LABEL_105;
          }
          v97 = &v70[-*(_QWORD *)v68];
          v98 = v73 >> 3;
          if (v77 >> 61)
            sub_239418A80();
          v78 = v77;
          v79 = operator new(8 * v77);
          v77 = v78;
          v73 = (uint64_t)v97;
          v74 = v98;
          v80 = &v79[8 * v98];
          *v80 = v111.__r_.__value_.__r.__words[0];
          v81 = (uint64_t)(v80 + 1);
          if (v70 == v72)
            goto LABEL_99;
LABEL_96:
          v82 = v70 - 8 - v72;
          if (v82 < 0x58)
          {
            v68 = v99;
            goto LABEL_104;
          }
          v68 = v99;
          if ((unint64_t)(v70 - &v79[v73]) < 0x20)
            goto LABEL_148;
          v83 = (v82 >> 3) + 1;
          v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
          v85 = &v70[-v84];
          v80 = (_QWORD *)((char *)v80 - v84);
          v86 = &v79[8 * v74 - 16];
          v87 = v70 - 16;
          v88 = v83 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v89 = *(_OWORD *)v87;
            *(v86 - 1) = *((_OWORD *)v87 - 1);
            *v86 = v89;
            v86 -= 2;
            v87 -= 32;
            v88 -= 4;
          }
          while (v88);
          v70 = v85;
          if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_148:
            do
            {
LABEL_104:
              v90 = *((_QWORD *)v70 - 1);
              v70 -= 8;
              *--v80 = v90;
            }
            while (v70 != v72);
          }
LABEL_105:
          *(_QWORD *)v68 = v80;
          *(_QWORD *)(v68 + 8) = v81;
          *(_QWORD *)(v68 + 16) = &v79[8 * v77];
          if (v72)
          {
            v71 = (_QWORD *)v81;
            operator delete(v72);
LABEL_107:
            v81 = (uint64_t)v71;
          }
          *(_QWORD *)(v68 + 8) = v81;
LABEL_109:
          for (i = std::istream::peek(); ; i = std::istream::peek())
          {
            v92 = i << 24;
            if (i << 24 == 738197504)
              goto LABEL_119;
            if (v92 == 1560281088)
              break;
            if (v92 <= 0x7F000000)
            {
              if ((*(_DWORD *)(v30 + 4 * (char)i + 60) & 0x4000) == 0)
                goto LABEL_118;
            }
            else if (!__maskrune((char)i, 0x4000uLL))
            {
              goto LABEL_118;
            }
            if ((*((_BYTE *)v29 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
            {
LABEL_118:
              if (v92 != 738197504)
                goto LABEL_120;
LABEL_119:
              std::istream::get();
              v62 = 0;
              goto LABEL_122;
            }
            std::istream::get();
          }
          v62 = 1;
LABEL_122:
          v93 = 1;
LABEL_123:
          v104 = v63;
          *(void **)((char *)&v104 + *((_QWORD *)v63 - 3)) = v102;
          v106[0] = v101;
          v106[1] = v100;
          if (v107 < 0)
            operator delete((void *)v106[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v108);
          result = 0;
          if ((v93 & 1) == 0)
            return result;
          goto LABEL_73;
        }
      }
      else
      {
        v65 = __maskrune(v64, 0x4000uLL);
        v66 = *(_DWORD *)((char *)v29 + *(_QWORD *)(*a2 - 24));
        if (!v65)
          goto LABEL_81;
      }
      if (!v66)
        std::istream::get();
    }
  }
  while (1)
  {
    v94 = std::istream::peek();
    v95 = v94 <= 0x7F ? *(_DWORD *)(v30 + 4 * v94 + 60) & 0x4000 : __maskrune(v94, 0x4000uLL);
    v96 = *(_QWORD *)(*a2 - 24);
    if (!v95)
      break;
    if (!*(_DWORD *)((char *)v29 + v96))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v96 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395A8C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  uint64_t v55;

  if (*(char *)(v55 - 209) < 0)
  {
    operator delete(*(void **)(v55 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395A8CE8(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_2395A8FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2395A9000(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395A9024(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395A3698(*(uint64_t **)(a1 + 8), (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395A9060(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395A90A0(*(_QWORD **)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t sub_2395A90A0(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v12;

  v3 = (uint64_t)a2;
  v12 = a1;
  a1[1] = *a1;
  if (!a3)
    goto LABEL_10;
  v5 = std::istream::peek();
  v6 = v5;
  if ((v5 - 196) > 2)
  {
    if ((v5 - 220) > 3 || v5 == 222)
      return v3;
    a2 = (_QWORD *)v3;
    a3 = 1;
LABEL_10:
    sub_2395A91A0((uint64_t *)&v12, a2, a3);
    return v3;
  }
  std::istream::get();
  v7 = (unint64_t)sub_2396162D4(v3, v6) >> 3;
  v8 = (uint64_t)(a1[1] - *a1) >> 3;
  v9 = v7 >= v8;
  v10 = v7 - v8;
  if (v10 != 0 && v9)
  {
    sub_23946DAD4((uint64_t)a1, v10);
  }
  else if (!v9)
  {
    a1[1] = *a1 + 8 * v7;
  }
  std::istream::read();
  return v3;
}

BOOL sub_2395A91A0(uint64_t *a1, _QWORD *a2, int a3)
{
  int v4;
  unsigned int v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _BOOL8 result;
  char v62;
  void *v63;
  unsigned int v64;
  int v65;
  int v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  int i;
  unsigned int v92;
  char v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v104;
  void *v105;
  _QWORD v106[11];
  char v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  std::string v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v4 = std::istream::get();
    if ((v4 - 196) <= 2)
    {
      v5 = sub_2396162D4((uint64_t)a2, v4);
      v104 = 0;
      v105 = 0;
      v106[0] = 0;
      sub_23946DAD4((uint64_t)&v104, v5);
      std::istream::read();
      v6 = v105;
      if (v105 == v104)
      {
LABEL_67:
        if (v6)
        {
          v105 = v6;
          operator delete(v6);
        }
        return 1;
      }
      v7 = 0;
      v6 = v104;
      while (1)
      {
        v9 = *a1;
        v11 = *(char **)(*a1 + 8);
        v10 = *(_QWORD *)(*a1 + 16);
        if ((unint64_t)v11 >= v10)
          break;
        *(_QWORD *)v11 = *((_QWORD *)v6 + v7);
        v8 = (uint64_t)(v11 + 8);
LABEL_6:
        *(_QWORD *)(v9 + 8) = v8;
        ++v7;
        v6 = v104;
        if (v7 >= ((_BYTE *)v105 - (_BYTE *)v104) >> 3)
          goto LABEL_67;
      }
      v12 = *(char **)v9;
      v13 = (uint64_t)&v11[-*(_QWORD *)v9];
      v14 = v13 >> 3;
      v15 = (v13 >> 3) + 1;
      if (v15 >> 61)
        sub_2394189F8();
      v16 = v10 - (_QWORD)v12;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 61)
          sub_239418A80();
        v18 = operator new(8 * v17);
        v19 = &v18[8 * v14];
        *v19 = *((_QWORD *)v6 + v7);
        v8 = (uint64_t)(v19 + 1);
        if (v11 == v12)
          goto LABEL_25;
      }
      else
      {
        v18 = 0;
        v19 = (_QWORD *)(8 * v14);
        *(_QWORD *)(8 * v14) = *((_QWORD *)v6 + v7);
        v8 = 8 * v14 + 8;
        if (v11 == v12)
        {
LABEL_25:
          *(_QWORD *)v9 = v19;
          *(_QWORD *)(v9 + 8) = v8;
          *(_QWORD *)(v9 + 16) = &v18[8 * v17];
          if (v12)
            operator delete(v12);
          goto LABEL_6;
        }
      }
      v20 = v11 - 8 - v12;
      if (v20 < 0x58)
        goto LABEL_146;
      if ((unint64_t)(v11 - &v18[v13]) < 0x20)
        goto LABEL_146;
      v21 = (v20 >> 3) + 1;
      v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = &v11[-v22];
      v19 = (_QWORD *)((char *)v19 - v22);
      v24 = &v18[8 * v14 - 16];
      v25 = v11 - 16;
      v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 4;
      }
      while (v26);
      v11 = v23;
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_146:
        do
        {
          v28 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *--v19 = v28;
        }
        while (v11 != v12);
      }
      goto LABEL_25;
    }
    if ((v4 & 0xFFFFFFFE) != 0xDC)
    {
      if (v4 == 223)
      {
        v110 = 0;
        memset(&v111, 0, sizeof(v111));
        std::istream::read();
        std::istream::read();
        std::istream::read();
        std::istream::read();
      }
      return 0;
    }
    v37 = sub_2396162D4((uint64_t)a2, v4);
    if (!v37)
      return 1;
    v38 = 0;
    v39 = v37;
    while (1)
    {
      v104 = 0;
      sub_2395A9F0C((uint64_t)&v104, (uint64_t)a2, 1);
      v41 = *a1;
      v43 = *(char **)(*a1 + 8);
      v42 = *(_QWORD *)(*a1 + 16);
      if ((unint64_t)v43 >= v42)
        break;
      *(_QWORD *)v43 = v104;
      v40 = (uint64_t)(v43 + 8);
LABEL_46:
      *(_QWORD *)(v41 + 8) = v40;
      if (++v38 == v39)
        return 1;
    }
    v44 = *(char **)v41;
    v45 = (uint64_t)&v43[-*(_QWORD *)v41];
    v46 = v45 >> 3;
    v47 = (v45 >> 3) + 1;
    if (v47 >> 61)
      sub_2394189F8();
    v48 = v42 - (_QWORD)v44;
    if (v48 >> 2 > v47)
      v47 = v48 >> 2;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
      v49 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v49 = v47;
    if (v49)
    {
      if (v49 >> 61)
        sub_239418A80();
      v50 = operator new(8 * v49);
      v51 = &v50[8 * v46];
      *v51 = v104;
      v40 = (uint64_t)(v51 + 1);
      if (v43 == v44)
        goto LABEL_65;
    }
    else
    {
      v50 = 0;
      v51 = (_QWORD *)(8 * v46);
      *(_QWORD *)(8 * v46) = v104;
      v40 = 8 * v46 + 8;
      if (v43 == v44)
      {
LABEL_65:
        *(_QWORD *)v41 = v51;
        *(_QWORD *)(v41 + 8) = v40;
        *(_QWORD *)(v41 + 16) = &v50[8 * v49];
        if (v44)
          operator delete(v44);
        goto LABEL_46;
      }
    }
    v52 = v43 - 8 - v44;
    if (v52 < 0x58)
      goto LABEL_147;
    if ((unint64_t)(v43 - &v50[v45]) < 0x20)
      goto LABEL_147;
    v53 = (v52 >> 3) + 1;
    v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
    v55 = &v43[-v54];
    v51 = (_QWORD *)((char *)v51 - v54);
    v56 = &v50[8 * v46 - 16];
    v57 = v43 - 16;
    v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v59 = *(_OWORD *)v57;
      *(v56 - 1) = *((_OWORD *)v57 - 1);
      *v56 = v59;
      v56 -= 2;
      v57 -= 32;
      v58 -= 4;
    }
    while (v58);
    v43 = v55;
    if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_147:
      do
      {
        v60 = *((_QWORD *)v43 - 1);
        v43 -= 8;
        *--v51 = v60;
      }
      while (v43 != v44);
    }
    goto LABEL_65;
  }
  v29 = a2 + 4;
  v30 = MEMORY[0x24BDAC740];
  while (1)
  {
    v31 = std::istream::peek();
    if (v31 <= 0x7F)
      break;
    v32 = __maskrune(v31, 0x4000uLL);
    v33 = *(_QWORD *)(*a2 - 24);
    if (!v32)
      goto LABEL_34;
LABEL_32:
    if (!*(_DWORD *)((char *)v29 + v33))
      std::istream::get();
  }
  v33 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v30 + 4 * v31 + 60) & 0x4000) != 0)
    goto LABEL_32;
LABEL_34:
  if ((*((_BYTE *)a2 + v33 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v34 = std::istream::peek();
    if (v34 > 0x7F)
    {
      v35 = __maskrune(v34, 0x4000uLL);
      v36 = *(_QWORD *)(*a2 - 24);
      if (!v35)
        break;
      goto LABEL_40;
    }
    v36 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v30 + 4 * v34 + 60) & 0x4000) != 0)
    {
LABEL_40:
      if (!*(_DWORD *)((char *)v29 + v36))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v36 + 32) & 2) != 0)
    return 0;
  v62 = 0;
  v63 = (void *)*MEMORY[0x24BEDB7F0];
  v101 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v102 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v100 = MEMORY[0x24BEDB848] + 16;
LABEL_73:
  if ((*((_BYTE *)v29 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v62 & 1) == 0)
  {
    while (1)
    {
      v64 = std::istream::peek();
      if (v64 <= 0x7F)
      {
        v66 = *(_DWORD *)((char *)v29 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v30 + 4 * v64 + 60) & 0x4000) == 0)
        {
LABEL_81:
          if ((v66 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v104);
          v109 = v106;
          if (!sub_239596128(a2))
          {
LABEL_120:
            v93 = 0;
            v62 = 0;
            goto LABEL_123;
          }
          v67 = (char *)v106 + *(_QWORD *)(v106[0] - 24);
          if ((v67[32] & 5) != 0)
            goto LABEL_109;
          (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v67 + 5)
                                                                                              + 32))(&v111, *((_QWORD *)v67 + 5), 0, 1, 16);
          if (v112 < 1)
            goto LABEL_109;
          v111.__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x23B83DD1C](&v104, &v111);
          v68 = *a1;
          v70 = *(char **)(*a1 + 8);
          v69 = *(_QWORD *)(*a1 + 16);
          if ((unint64_t)v70 < v69)
          {
            *(_QWORD *)v70 = v111.__r_.__value_.__r.__words[0];
            v71 = v70 + 8;
            goto LABEL_107;
          }
          v99 = *a1;
          v72 = *(char **)v68;
          v73 = (uint64_t)&v70[-*(_QWORD *)v68];
          v74 = v73 >> 3;
          v75 = (v73 >> 3) + 1;
          if (v75 >> 61)
            sub_2394189F8();
          v76 = v69 - (_QWORD)v72;
          if (v76 >> 2 > v75)
            v75 = v76 >> 2;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
            v77 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (!v77)
          {
            v79 = 0;
            v80 = (_QWORD *)(8 * v74);
            *(_QWORD *)(8 * v74) = v111.__r_.__value_.__r.__words[0];
            v81 = 8 * v74 + 8;
            if (v70 != v72)
              goto LABEL_96;
LABEL_99:
            v68 = v99;
            goto LABEL_105;
          }
          v97 = &v70[-*(_QWORD *)v68];
          v98 = v73 >> 3;
          if (v77 >> 61)
            sub_239418A80();
          v78 = v77;
          v79 = operator new(8 * v77);
          v77 = v78;
          v73 = (uint64_t)v97;
          v74 = v98;
          v80 = &v79[8 * v98];
          *v80 = v111.__r_.__value_.__r.__words[0];
          v81 = (uint64_t)(v80 + 1);
          if (v70 == v72)
            goto LABEL_99;
LABEL_96:
          v82 = v70 - 8 - v72;
          if (v82 < 0x58)
          {
            v68 = v99;
            goto LABEL_104;
          }
          v68 = v99;
          if ((unint64_t)(v70 - &v79[v73]) < 0x20)
            goto LABEL_148;
          v83 = (v82 >> 3) + 1;
          v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
          v85 = &v70[-v84];
          v80 = (_QWORD *)((char *)v80 - v84);
          v86 = &v79[8 * v74 - 16];
          v87 = v70 - 16;
          v88 = v83 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v89 = *(_OWORD *)v87;
            *(v86 - 1) = *((_OWORD *)v87 - 1);
            *v86 = v89;
            v86 -= 2;
            v87 -= 32;
            v88 -= 4;
          }
          while (v88);
          v70 = v85;
          if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_148:
            do
            {
LABEL_104:
              v90 = *((_QWORD *)v70 - 1);
              v70 -= 8;
              *--v80 = v90;
            }
            while (v70 != v72);
          }
LABEL_105:
          *(_QWORD *)v68 = v80;
          *(_QWORD *)(v68 + 8) = v81;
          *(_QWORD *)(v68 + 16) = &v79[8 * v77];
          if (v72)
          {
            v71 = (_QWORD *)v81;
            operator delete(v72);
LABEL_107:
            v81 = (uint64_t)v71;
          }
          *(_QWORD *)(v68 + 8) = v81;
LABEL_109:
          for (i = std::istream::peek(); ; i = std::istream::peek())
          {
            v92 = i << 24;
            if (i << 24 == 738197504)
              goto LABEL_119;
            if (v92 == 1560281088)
              break;
            if (v92 <= 0x7F000000)
            {
              if ((*(_DWORD *)(v30 + 4 * (char)i + 60) & 0x4000) == 0)
                goto LABEL_118;
            }
            else if (!__maskrune((char)i, 0x4000uLL))
            {
              goto LABEL_118;
            }
            if ((*((_BYTE *)v29 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
            {
LABEL_118:
              if (v92 != 738197504)
                goto LABEL_120;
LABEL_119:
              std::istream::get();
              v62 = 0;
              goto LABEL_122;
            }
            std::istream::get();
          }
          v62 = 1;
LABEL_122:
          v93 = 1;
LABEL_123:
          v104 = v63;
          *(void **)((char *)&v104 + *((_QWORD *)v63 - 3)) = v102;
          v106[0] = v101;
          v106[1] = v100;
          if (v107 < 0)
            operator delete((void *)v106[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v108);
          result = 0;
          if ((v93 & 1) == 0)
            return result;
          goto LABEL_73;
        }
      }
      else
      {
        v65 = __maskrune(v64, 0x4000uLL);
        v66 = *(_DWORD *)((char *)v29 + *(_QWORD *)(*a2 - 24));
        if (!v65)
          goto LABEL_81;
      }
      if (!v66)
        std::istream::get();
    }
  }
  while (1)
  {
    v94 = std::istream::peek();
    v95 = v94 <= 0x7F ? *(_DWORD *)(v30 + 4 * v94 + 60) & 0x4000 : __maskrune(v94, 0x4000uLL);
    v96 = *(_QWORD *)(*a2 - 24);
    if (!v95)
      break;
    if (!*(_DWORD *)((char *)v29 + v96))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v96 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395A9E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  uint64_t v55;

  if (*(char *)(v55 - 209) < 0)
  {
    operator delete(*(void **)(v55 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395A9F0C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (std::istream::get() != 198)
    {
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    return a2;
  }
  else
  {
    MEMORY[0x23B83DD1C](a2, a1);
    return a2;
  }
}

uint64_t sub_2395AA050(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_2395AA2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2395AA2D0(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395AA2F4(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395A4074(*(unsigned __int8 **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395AA330(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395AA370(*(_BYTE **)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395AA370(_BYTE *a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  void **v13;
  void *v14[3];
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *__p[2];
  uint64_t v20;
  _QWORD v21[2];
  _QWORD *v22;

  sub_2396157EC((uint64_t)v21, a3);
  __p[0] = 0;
  __p[1] = 0;
  v20 = 0;
  v18 = 4;
  strcpy((char *)v17, "type");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF330;
  v5[1] = __p;
  sub_23961580C((uint64_t)v21, (uint64_t)v17, (uint64_t)v5);
  v16 = 15;
  strcpy((char *)v15, "distortionParam");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF600;
  v6[1] = a1 + 8;
  sub_23961580C((uint64_t)v21, (uint64_t)v15, (uint64_t)v6);
  strcpy((char *)v14, "inverseDistortionParam");
  HIBYTE(v14[2]) = 22;
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADF600;
  v7[1] = a1 + 32;
  sub_23961580C((uint64_t)v21, (uint64_t)v14, (uint64_t)v7);
  if ((SHIBYTE(v14[2]) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_21:
    operator delete(v15[0]);
    if ((v18 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_22;
  }
  operator delete(v14[0]);
  if (v16 < 0)
    goto LABEL_21;
LABEL_3:
  if ((v18 & 0x80000000) == 0)
    goto LABEL_4;
LABEL_22:
  operator delete(v17[0]);
LABEL_4:
  if ((sub_23959479C((uint64_t)v21, a2) & 1) != 0)
    *a1 = sub_2395AA63C((uint64_t)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  v8 = v22;
  if (v22)
  {
    do
    {
      v9 = v8[5];
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v8 = (_QWORD *)*v8;
    }
    while (v8);
    v10 = (void **)v22;
    if (v22)
    {
      do
      {
        v13 = (void **)*v10;
        if (*((char *)v10 + 39) < 0)
          operator delete(v10[2]);
        operator delete(v10);
        v10 = v13;
      }
      while (v13);
    }
  }
  v11 = (void *)v21[0];
  v21[0] = 0;
  if (v11)
    operator delete(v11);
  return a2;
}

void sub_2395AA590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if ((a32 & 0x80000000) == 0)
  {
    sub_2395905C0(v32 - 80);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_2395905C0(v32 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_2395AA63C(uint64_t a1)
{
  int v2;
  void *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t *v6;
  int v7;
  size_t v8;
  const void *v9;
  size_t v10;
  uint64_t v12;
  void *__p[2];
  uint64_t v15;
  _QWORD v16[2];
  unsigned __int8 v17;

  sub_2395A447C();
  if (*(char *)(a1 + 23) < 0)
  {
    sub_23941A7F8(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v15 = *(_QWORD *)(a1 + 16);
  }
  sub_239A43824((uint64_t)__p, (uint64_t)v16);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  v2 = (char)v17;
  v3 = (void *)v16[0];
  if ((v17 & 0x80u) == 0)
    v4 = v17;
  else
    v4 = v16[1];
  if ((v17 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (_QWORD *)v16[0];
  v6 = &qword_25693C660;
  do
  {
    v6 = (uint64_t *)*v6;
    if (!v6)
    {
      sub_239A444D4((uint64_t)"unknown file", 61, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v7 = *((char *)v6 + 47);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)v6 + 47);
    else
      v8 = v6[4];
    if (v7 >= 0)
      v9 = v6 + 3;
    else
      v9 = (const void *)v6[3];
    if (v8 >= v4)
      v10 = v4;
    else
      v10 = v8;
  }
  while (memcmp(v5, v9, v10) || v8 != v4);
  v12 = *((unsigned __int8 *)v6 + 16);
  if (v2 < 0)
    operator delete(v3);
  return v12;
}

void sub_2395AA760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_2395AA798(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395AA7BC(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395A4C98(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395AA7F8(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395AA838(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395AA838(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void **v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *__p[2];
  void *v18;

  sub_2396157EC((uint64_t)__p, a3);
  v16 = 11;
  strcpy((char *)v15, "boundingBox");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF600;
  v5[1] = a1;
  sub_23961580C((uint64_t)__p, (uint64_t)v15, (uint64_t)v5);
  v14 = 9;
  strcpy((char *)v13, "transform");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF600;
  v6[1] = a1 + 24;
  sub_23961580C((uint64_t)__p, (uint64_t)v13, (uint64_t)v6);
  if (v14 < 0)
  {
    operator delete(v13[0]);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15[0]);
LABEL_3:
  sub_23959479C((uint64_t)__p, a2);
  v7 = v18;
  if (v18)
  {
    do
    {
      v8 = v7[5];
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    v9 = (void **)v18;
    if (v18)
    {
      do
      {
        v12 = (void **)*v9;
        if (*((char *)v9 + 39) < 0)
          operator delete(v9[2]);
        operator delete(v9);
        v9 = v12;
      }
      while (v12);
    }
  }
  v10 = __p[0];
  __p[0] = 0;
  if (v10)
    operator delete(v10);
  return a2;
}

void sub_2395AA9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395AA9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      sub_2395905C0((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  sub_2395905C0((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_2395AAA3C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395AAA60(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395A4F30(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395AAA9C(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395AAADC(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395AAADC(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void **v11;
  void *__p[2];
  char v13;
  void *v14[2];
  void *v15;

  sub_2396157EC((uint64_t)v14, a3);
  v13 = 11;
  strcpy((char *)__p, "boundingBox");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF600;
  v5[1] = a1;
  sub_23961580C((uint64_t)v14, (uint64_t)__p, (uint64_t)v5);
  if (v13 < 0)
    operator delete(__p[0]);
  sub_23959479C((uint64_t)v14, a2);
  v6 = v15;
  if (v15)
  {
    do
    {
      v7 = v6[5];
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    v8 = (void **)v15;
    if (v15)
    {
      do
      {
        v11 = (void **)*v8;
        if (*((char *)v8 + 39) < 0)
          operator delete(v8[2]);
        operator delete(v8);
        v8 = v11;
      }
      while (v11);
    }
  }
  v9 = v14[0];
  v14[0] = 0;
  if (v9)
    operator delete(v9);
  return a2;
}

void sub_2395AAC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395AAC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_2395905C0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2395AAC3C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395AAC60(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395A5124(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395AAC9C(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395AACDC(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395AACDC(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void **v12;
  void *v13[3];
  void *v14[2];
  char v15;
  void *__p[2];
  void *v17;

  sub_2396157EC((uint64_t)__p, a3);
  v15 = 10;
  strcpy((char *)v14, "coordinate");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF600;
  v5[1] = a1;
  sub_23961580C((uint64_t)__p, (uint64_t)v14, (uint64_t)v5);
  HIBYTE(v13[2]) = 17;
  strcpy((char *)v13, "relative_altitude");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF360;
  v6[1] = a1 + 24;
  sub_23961580C((uint64_t)__p, (uint64_t)v13, (uint64_t)v6);
  if (SHIBYTE(v13[2]) < 0)
  {
    operator delete(v13[0]);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v14[0]);
LABEL_3:
  sub_23959479C((uint64_t)__p, a2);
  v7 = v17;
  if (v17)
  {
    do
    {
      v8 = v7[5];
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    v9 = (void **)v17;
    if (v17)
    {
      do
      {
        v12 = (void **)*v9;
        if (*((char *)v9 + 39) < 0)
          operator delete(v9[2]);
        operator delete(v9);
        v9 = v12;
      }
      while (v12);
    }
  }
  v10 = __p[0];
  __p[0] = 0;
  if (v10)
    operator delete(v10);
  return a2;
}

void sub_2395AAE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395AAE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      sub_2395905C0((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  sub_2395905C0((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_2395AAEE4(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395AAF08(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395A1478(*(uint64_t **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395AAF44()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

BOOL sub_2395AAF78(uint64_t *a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL8 result;
  char v24;
  _BYTE *v25;
  unsigned int v26;
  int v27;
  int v28;
  char *v29;
  unint64_t v30;
  int i;
  unsigned int v32;
  char v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD v42[11];
  char v43;
  _QWORD v44[23];
  std::string v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v40 = 0;
      v41 = 0;
      v42[0] = 0;
      sub_23946DAD4((uint64_t)&v40, v6);
      std::istream::read();
      v7 = v40;
      if (v41 != v40)
      {
        v8 = (v41 - v40) >> 3;
        if (v8 <= 1)
          v8 = 1;
        v9 = *a1;
        v10 = a1[1];
        v11 = v40;
        do
        {
          if (v10 <= 1)
          {
            *(_QWORD *)(v9 + 8 * v10) = *v11;
            v10 = a1[1];
          }
          a1[1] = ++v10;
          ++v11;
          --v8;
        }
        while (v8);
      }
      if (v7)
      {
        v41 = v7;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v20 = sub_2396162D4((uint64_t)a2, v5);
      if (v20)
      {
        v21 = v20;
        do
        {
          v40 = 0;
          sub_2395A9F0C((uint64_t)&v40, (uint64_t)a2, 1);
          v22 = a1[1];
          if (v22 <= 1)
          {
            *(_QWORD *)(*a1 + 8 * v22) = v40;
            v22 = a1[1];
          }
          a1[1] = v22 + 1;
          --v21;
        }
        while (v21);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v44[22] = 0;
      memset(&v45, 0, sizeof(v45));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    return 0;
  }
  v12 = a2 + 4;
  v13 = MEMORY[0x24BDAC740];
  while (1)
  {
    v14 = std::istream::peek();
    if (v14 <= 0x7F)
      break;
    v15 = __maskrune(v14, 0x4000uLL);
    v16 = *(_QWORD *)(*a2 - 24);
    if (!v15)
      goto LABEL_17;
LABEL_15:
    if (!*(_DWORD *)((char *)v12 + v16))
      std::istream::get();
  }
  v16 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) != 0)
    goto LABEL_15;
LABEL_17:
  if ((*((_BYTE *)a2 + v16 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v17 = std::istream::peek();
    if (v17 > 0x7F)
    {
      v18 = __maskrune(v17, 0x4000uLL);
      v19 = *(_QWORD *)(*a2 - 24);
      if (!v18)
        break;
      goto LABEL_23;
    }
    v19 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v13 + 4 * v17 + 60) & 0x4000) != 0)
    {
LABEL_23:
      if (!*(_DWORD *)((char *)v12 + v19))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v19 + 32) & 2) != 0)
    return 0;
  v24 = 0;
  v25 = (_BYTE *)*MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v39 = *(_BYTE **)(MEMORY[0x24BEDB7F0] + 64);
  v37 = MEMORY[0x24BEDB848] + 16;
LABEL_37:
  if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v24 & 1) == 0)
  {
    while (1)
    {
      v26 = std::istream::peek();
      if (v26 <= 0x7F)
      {
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v13 + 4 * v26 + 60) & 0x4000) == 0)
        {
LABEL_45:
          if ((v28 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v40);
          v44[19] = v42;
          if (sub_239596128(a2))
          {
            v29 = (char *)v42 + *(_QWORD *)(v42[0] - 24);
            if ((v29[32] & 5) == 0)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v29 + 5)
                                                                                                  + 32))(&v45, *((_QWORD *)v29 + 5), 0, 1, 16);
              if (v46 >= 1)
              {
                v45.__r_.__value_.__r.__words[0] = 0;
                MEMORY[0x23B83DD1C](&v40, &v45);
                v30 = a1[1];
                if (v30 <= 1)
                {
                  *(_QWORD *)(*a1 + 8 * v30) = v45.__r_.__value_.__r.__words[0];
                  v30 = a1[1];
                }
                a1[1] = v30 + 1;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v32 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_62;
              if (v32 == 1560281088)
                break;
              if (v32 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v13 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_61;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_61;
              }
              if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_61:
                if (v32 != 738197504)
                  goto LABEL_63;
LABEL_62:
                std::istream::get();
                v24 = 0;
                goto LABEL_65;
              }
              std::istream::get();
            }
            v24 = 1;
LABEL_65:
            v33 = 1;
          }
          else
          {
LABEL_63:
            v33 = 0;
            v24 = 0;
          }
          v40 = v25;
          *(_BYTE **)((char *)&v40 + *((_QWORD *)v25 - 3)) = v39;
          v42[0] = v38;
          v42[1] = v37;
          if (v43 < 0)
            operator delete((void *)v42[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](v44);
          result = 0;
          if ((v33 & 1) == 0)
            return result;
          goto LABEL_37;
        }
      }
      else
      {
        v27 = __maskrune(v26, 0x4000uLL);
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if (!v27)
          goto LABEL_45;
      }
      if (!v28)
        std::istream::get();
    }
  }
  while (1)
  {
    v34 = std::istream::peek();
    v35 = v34 <= 0x7F ? *(_DWORD *)(v13 + 4 * v34 + 60) & 0x4000 : __maskrune(v34, 0x4000uLL);
    v36 = *(_QWORD *)(*a2 - 24);
    if (!v35)
      break;
    if (!*(_DWORD *)((char *)v12 + v36))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v36 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395AB720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 209) < 0)
  {
    operator delete(*(void **)(v51 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2395AB7D4(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_239428940((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *sub_2395ABA00(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_239428940((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (char *)operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v11;
  v27 = v26 + 16;
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_23941A7F8(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  *((_DWORD *)v26 + 10) = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        sub_239427FE0(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2395ABE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395ABE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395ABE70(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  char *v5;
  unint64_t v6;
  __int128 *v7;
  __int128 *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  unint64_t v18;
  void *__p;
  char *v20;
  char v21;

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    sub_2395AC028((uint64_t)&__p, 0, a1, *((unsigned __int8 *)a1 + 23), a2);
    if (v21)
      goto LABEL_3;
LABEL_13:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  sub_2395AC028((uint64_t)&__p, 0, *a1, (size_t)a1[1], a2);
  if (!v21)
    goto LABEL_13;
LABEL_3:
  v4 = (char *)__p;
  v5 = v20;
  v6 = v20 - (_BYTE *)__p;
  if ((unint64_t)(v20 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v6 <= 0x16)
  {
    HIBYTE(v18) = (_BYTE)v20 - (_BYTE)__p;
    v7 = &v17;
    if (__p != v20)
      goto LABEL_6;
LABEL_17:
    v8 = v7;
    goto LABEL_20;
  }
  v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17)
    v14 = v6 | 7;
  v15 = v14 + 1;
  v7 = (__int128 *)operator new(v14 + 1);
  *((_QWORD *)&v17 + 1) = v6;
  v18 = v15 | 0x8000000000000000;
  *(_QWORD *)&v17 = v7;
  if (v4 == v5)
    goto LABEL_17;
LABEL_6:
  if (v6 < 0x20 || (unint64_t)((char *)v7 - v4) < 0x20)
  {
    v8 = v7;
    v9 = v4;
    do
    {
LABEL_19:
      v16 = *v9++;
      *(_BYTE *)v8 = v16;
      v8 = (__int128 *)((char *)v8 + 1);
    }
    while (v9 != v5);
    goto LABEL_20;
  }
  v8 = (__int128 *)((char *)v7 + (v6 & 0xFFFFFFFFFFFFFFE0));
  v9 = &v4[v6 & 0xFFFFFFFFFFFFFFE0];
  v10 = (__int128 *)(v4 + 16);
  v11 = v7 + 1;
  v12 = v6 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v13 = *v10;
    *(v11 - 1) = *(v10 - 1);
    *v11 = v13;
    v10 += 2;
    v11 += 2;
    v12 -= 32;
  }
  while (v12);
  if (v6 != (v6 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_19;
LABEL_20:
  *(_BYTE *)v8 = 0;
  *(_OWORD *)a3 = v17;
  *(_QWORD *)(a3 + 16) = v18;
  *(_BYTE *)(a3 + 24) = 1;
  if (v21)
  {
    if (__p)
      operator delete(__p);
  }
}

void sub_2395AC010(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_2395AC028(uint64_t a1, CCOperation a2, const void *a3, size_t a4, uint64_t a5)
{
  const void *v6;
  size_t dataOutAvailable;
  char *dataOut;
  size_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  char *__p;
  char *v34;
  char *v35;
  size_t v36;

  v6 = *(const void **)a5;
  if (*(_QWORD *)(a5 + 8) - *(_QWORD *)a5 != 16)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return;
  }
  v35 = 0;
  v36 = 0;
  __p = 0;
  v34 = 0;
  dataOutAvailable = a4 + 16;
  if (a4 == -16)
  {
    dataOut = 0;
  }
  else
  {
    if ((dataOutAvailable & 0x8000000000000000) != 0)
      sub_2394189F8();
    dataOut = (char *)operator new(a4 + 16);
    bzero(dataOut, dataOutAvailable);
    __p = dataOut;
    v34 = &dataOut[dataOutAvailable];
    v35 = &dataOut[dataOutAvailable];
  }
  if (!CCCrypt(a2, 0, 3u, v6, 0x10uLL, 0, a3, a4, dataOut, dataOutAvailable, &v36))
  {
    v12 = v36;
    v13 = v34;
    v14 = v34 - __p;
    v15 = v36 - (v34 - __p);
    if (v36 <= v34 - __p)
    {
      if (v36 >= v34 - __p)
        v21 = v34;
      else
        v21 = &__p[v36];
    }
    else
    {
      if (v35 - v34 < v15)
      {
        if ((v36 & 0x8000000000000000) != 0)
          sub_2394189F8();
        v16 = 2 * (v35 - __p);
        if (v16 <= v36)
          v16 = v36;
        if ((unint64_t)(v35 - __p) >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        v18 = (char *)operator new(v17);
        v19 = &v18[v14];
        v20 = &v18[v17];
        v21 = &v18[v12];
        bzero(&v18[v14], v15);
        if (v34 == __p)
          goto LABEL_39;
        if (v14 >= 8 && (unint64_t)(__p - v18) >= 0x20)
        {
          if (v14 < 0x20)
          {
            v22 = 0;
            goto LABEL_31;
          }
          v22 = v14 & 0xFFFFFFFFFFFFFFE0;
          v23 = v34 - 16;
          v24 = &v18[v34 - 16 - __p];
          v25 = v14 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v26 = *(_OWORD *)v23;
            *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
            *(_OWORD *)v24 = v26;
            v24 -= 32;
            v23 -= 32;
            v25 -= 32;
          }
          while (v25);
          if (v14 == v22)
            goto LABEL_38;
          if ((v14 & 0x18) != 0)
          {
LABEL_31:
            v19 -= v14 & 0xFFFFFFFFFFFFFFF8;
            v27 = &v34[-v22 - 8];
            v28 = v27 - __p;
            v29 = v22 - (v14 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v30 = *(_QWORD *)v27;
              v27 -= 8;
              *(_QWORD *)&v18[v28] = v30;
              v28 -= 8;
              v29 += 8;
            }
            while (v29);
            v13 = &v34[-(v14 & 0xFFFFFFFFFFFFFFF8)];
            if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_38;
            goto LABEL_36;
          }
          v19 -= v22;
          v13 = &v34[-v22];
        }
LABEL_36:
        v31 = v19 - 1;
        do
        {
          v32 = *--v13;
          *v31-- = v32;
        }
        while (v13 != __p);
LABEL_38:
        v13 = __p;
        v19 = v18;
LABEL_39:
        __p = v19;
        v35 = v20;
        if (v13)
          operator delete(v13);
        goto LABEL_41;
      }
      v21 = &__p[v36];
      bzero(v34, v36 - (v34 - __p));
    }
LABEL_41:
    *(_QWORD *)a1 = __p;
    *(_QWORD *)(a1 + 8) = v21;
    *(_QWORD *)(a1 + 16) = v35;
    *(_BYTE *)(a1 + 24) = 1;
    return;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (__p)
    operator delete(__p);
}

void sub_2395AC2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2395AC2E8(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  char *v5;
  unint64_t v6;
  __int128 *v7;
  __int128 *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  unint64_t v18;
  void *__p;
  char *v20;
  char v21;

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    sub_2395AC028((uint64_t)&__p, 1u, a1, *((unsigned __int8 *)a1 + 23), a2);
    if (v21)
      goto LABEL_3;
LABEL_13:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  sub_2395AC028((uint64_t)&__p, 1u, *a1, (size_t)a1[1], a2);
  if (!v21)
    goto LABEL_13;
LABEL_3:
  v4 = (char *)__p;
  v5 = v20;
  v6 = v20 - (_BYTE *)__p;
  if ((unint64_t)(v20 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v6 <= 0x16)
  {
    HIBYTE(v18) = (_BYTE)v20 - (_BYTE)__p;
    v7 = &v17;
    if (__p != v20)
      goto LABEL_6;
LABEL_17:
    v8 = v7;
    goto LABEL_20;
  }
  v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17)
    v14 = v6 | 7;
  v15 = v14 + 1;
  v7 = (__int128 *)operator new(v14 + 1);
  *((_QWORD *)&v17 + 1) = v6;
  v18 = v15 | 0x8000000000000000;
  *(_QWORD *)&v17 = v7;
  if (v4 == v5)
    goto LABEL_17;
LABEL_6:
  if (v6 < 0x20 || (unint64_t)((char *)v7 - v4) < 0x20)
  {
    v8 = v7;
    v9 = v4;
    do
    {
LABEL_19:
      v16 = *v9++;
      *(_BYTE *)v8 = v16;
      v8 = (__int128 *)((char *)v8 + 1);
    }
    while (v9 != v5);
    goto LABEL_20;
  }
  v8 = (__int128 *)((char *)v7 + (v6 & 0xFFFFFFFFFFFFFFE0));
  v9 = &v4[v6 & 0xFFFFFFFFFFFFFFE0];
  v10 = (__int128 *)(v4 + 16);
  v11 = v7 + 1;
  v12 = v6 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v13 = *v10;
    *(v11 - 1) = *(v10 - 1);
    *v11 = v13;
    v10 += 2;
    v11 += 2;
    v12 -= 32;
  }
  while (v12);
  if (v6 != (v6 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_19;
LABEL_20:
  *(_BYTE *)v8 = 0;
  *(_OWORD *)a3 = v17;
  *(_QWORD *)(a3 + 16) = v18;
  *(_BYTE *)(a3 + 24) = 1;
  if (v21)
  {
    if (__p)
      operator delete(__p);
  }
}

void sub_2395AC488(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_2395AC4A0(const void **a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v4;
  int v5;
  const void *v6;
  CC_LONG v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  CC_SHA1_CTX v28;

  v4 = (unsigned __int8 *)operator new(0x14uLL);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_DWORD *)v4 + 4) = 0;
  CC_SHA1_Init(&v28);
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)a1 + 23);
  else
    v7 = *((_DWORD *)a1 + 2);
  CC_SHA1_Update(&v28, v6, v7);
  CC_SHA1_Final(v4, &v28);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, 0x28uLL);
  v8 = *v4;
  std::string::push_back(a2, a0123456789abcd[v8 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v8 & 0xF]);
  v9 = v4[1];
  std::string::push_back(a2, a0123456789abcd[v9 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v9 & 0xF]);
  v10 = v4[2];
  std::string::push_back(a2, a0123456789abcd[v10 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v10 & 0xF]);
  v11 = v4[3];
  std::string::push_back(a2, a0123456789abcd[v11 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v11 & 0xF]);
  v12 = v4[4];
  std::string::push_back(a2, a0123456789abcd[v12 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v12 & 0xF]);
  v13 = v4[5];
  std::string::push_back(a2, a0123456789abcd[v13 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v13 & 0xF]);
  v14 = v4[6];
  std::string::push_back(a2, a0123456789abcd[v14 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v14 & 0xF]);
  v15 = v4[7];
  std::string::push_back(a2, a0123456789abcd[v15 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v15 & 0xF]);
  v16 = v4[8];
  std::string::push_back(a2, a0123456789abcd[v16 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v16 & 0xF]);
  v17 = v4[9];
  std::string::push_back(a2, a0123456789abcd[v17 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v17 & 0xF]);
  v18 = v4[10];
  std::string::push_back(a2, a0123456789abcd[v18 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v18 & 0xF]);
  v19 = v4[11];
  std::string::push_back(a2, a0123456789abcd[v19 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v19 & 0xF]);
  v20 = v4[12];
  std::string::push_back(a2, a0123456789abcd[v20 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v20 & 0xF]);
  v21 = v4[13];
  std::string::push_back(a2, a0123456789abcd[v21 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v21 & 0xF]);
  v22 = v4[14];
  std::string::push_back(a2, a0123456789abcd[v22 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v22 & 0xF]);
  v23 = v4[15];
  std::string::push_back(a2, a0123456789abcd[v23 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v23 & 0xF]);
  v24 = v4[16];
  std::string::push_back(a2, a0123456789abcd[v24 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v24 & 0xF]);
  v25 = v4[17];
  std::string::push_back(a2, a0123456789abcd[v25 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v25 & 0xF]);
  v26 = v4[18];
  std::string::push_back(a2, a0123456789abcd[v26 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v26 & 0xF]);
  v27 = v4[19];
  std::string::push_back(a2, a0123456789abcd[v27 >> 4]);
  std::string::push_back(a2, a0123456789abcd[v27 & 0xF]);
  operator delete(v4);
}

void sub_2395AC810(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2395AC84C(const void **a1@<X0>, _QWORD *a2@<X8>)
{
  std::string::size_type size;
  std::string::size_type v4;
  std::string *p_p;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  char v9;
  int v10;
  void *v11;
  std::string *v12;
  std::string::size_type v13;
  char *v14;
  std::string *v15;
  char *v16;
  _OWORD *v17;
  std::string::size_type *v18;
  unint64_t v19;
  __int128 v20;
  std::string::value_type v21;
  std::string __b;
  std::string __p;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  sub_2395AC4A0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= 0x10)
      goto LABEL_15;
  }
  else
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) >= 0x10u)
      goto LABEL_15;
  }
  v4 = 16 - size;
  *((_BYTE *)&__b.__r_.__value_.__s + 23) = 16 - size;
  memset(&__b, 48, 16 - size);
  __b.__r_.__value_.__s.__data_[v4] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v6 = __p.__r_.__value_.__l.__size_;
  v7 = std::string::insert(&__b, 0, (const std::string::value_type *)p_p, v6);
  v8 = v7->__r_.__value_.__r.__words[0];
  v24[0] = v7->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
  v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = v8;
  __p.__r_.__value_.__l.__size_ = v24[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v24 + 7);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v9;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
LABEL_15:
  std::string::erase(&__p, 0x10uLL, 0xFFFFFFFFFFFFFFFFLL);
  v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v11 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &__p;
  else
    v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v13 = __p.__r_.__value_.__l.__size_;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v13)
  {
    if ((v13 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v14 = (char *)operator new(v13);
    *a2 = v14;
    a2[1] = v14;
    a2[2] = &v14[v13];
    if (v13 < 0x20)
    {
      v15 = v12;
    }
    else
    {
      v15 = v12;
      if ((unint64_t)(v14 - (char *)v12) >= 0x20)
      {
        v15 = (std::string *)((char *)v12 + (v13 & 0xFFFFFFFFFFFFFFE0));
        v16 = &v14[v13 & 0xFFFFFFFFFFFFFFE0];
        v17 = v14 + 16;
        v18 = &v12->__r_.__value_.__r.__words[2];
        v19 = v13 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v20 = *(_OWORD *)v18;
          *(v17 - 1) = *((_OWORD *)v18 - 1);
          *v17 = v20;
          v17 += 2;
          v18 += 4;
          v19 -= 32;
        }
        while (v19);
        v14 += v13 & 0xFFFFFFFFFFFFFFE0;
        if (v13 == (v13 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_32;
      }
    }
    v16 = v14;
    do
    {
      v21 = v15->__r_.__value_.__s.__data_[0];
      v15 = (std::string *)((char *)v15 + 1);
      *v16++ = v21;
    }
    while (v15 != (std::string *)((char *)v12 + v13));
LABEL_32:
    a2[1] = v16;
  }
  if (v10 < 0)
    operator delete(v11);
}

void sub_2395ACA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_2395ACAA8(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  std::string *v5;
  std::__fs::filesystem::path::__string_view v6;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v8;
  std::basic_string_view<_CharT, _Traits>::size_type v9;
  uint64_t v10;
  std::string *v11;
  std::__fs::filesystem::path::__string_view v12;
  __int128 *v13;
  std::basic_string_view<_CharT, _Traits>::size_type v14;
  std::basic_string_view<_CharT, _Traits>::size_type v15;
  __int128 v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  std::string v25;
  std::__fs::filesystem::path __p;
  __int128 __dst;
  int64_t v28;
  char v29;
  _DWORD v30[2];
  std::__fs::filesystem::path v31;
  void *v32[2];
  int64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  memset(&v31, 0, sizeof(v31));
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::string *)a1;
  else
    v5 = *(std::string **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  sub_23948900C(&v31.__pn_, v5, (std::string *)((char *)v5 + v4));
  v6 = std::__fs::filesystem::path::__parent_path(&v31);
  if (v6.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v6.__size_ >= 0x17)
  {
    v8 = (v6.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6.__size_ | 7) != 0x17)
      v8 = v6.__size_ | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v6.__size_;
    v28 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v28) = v6.__size_;
  p_dst = &__dst;
  if (v6.__size_)
LABEL_13:
    memmove(p_dst, v6.__data_, v6.__size_);
  *((_BYTE *)p_dst + v6.__size_) = 0;
  *(_OWORD *)v32 = __dst;
  v33 = v28;
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
  memset(&v31, 0, sizeof(v31));
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = (std::string *)a1;
  else
    v11 = *(std::string **)a1;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  sub_23948900C(&v31.__pn_, v11, (std::string *)((char *)v11 + v10));
  v12 = std::__fs::filesystem::path::__stem(&v31);
  if (v12.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v12.__size_ >= 0x17)
  {
    v14 = (v12.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12.__size_ | 7) != 0x17)
      v14 = v12.__size_ | 7;
    v15 = v14 + 1;
    v13 = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12.__size_;
    v28 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = v13;
    goto LABEL_28;
  }
  HIBYTE(v28) = v12.__size_;
  v13 = &__dst;
  if (v12.__size_)
LABEL_28:
    memmove(v13, v12.__data_, v12.__size_);
  *((_BYTE *)v13 + v12.__size_) = 0;
  v16 = __dst;
  v30[0] = v28;
  *(_DWORD *)((char *)v30 + 3) = *(_DWORD *)((char *)&v28 + 3);
  v17 = SHIBYTE(v28);
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_31;
  }
  else if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
LABEL_31:
    *(_OWORD *)&v31.__pn_.__r_.__value_.__l.__data_ = v16;
    LODWORD(v31.__pn_.__r_.__value_.__r.__words[2]) = v30[0];
    *(_DWORD *)((char *)&v31.__pn_.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v30 + 3);
    *((_BYTE *)&v31.__pn_.__r_.__value_.__s + 23) = v17;
    goto LABEL_34;
  }
  sub_23941A7F8(&v31, (void *)v16, *((unint64_t *)&v16 + 1));
LABEL_34:
  *((_BYTE *)&v25.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&v25, "CorePhotogrammetry");
  sub_2395AC84C((const void **)&v25.__r_.__value_.__l.__data_, &__p);
  sub_2395ABE70((const void **)&v31.__pn_.__r_.__value_.__l.__data_, (uint64_t)&__p, (uint64_t)&__dst);
  if (__p.__pn_.__r_.__value_.__r.__words[0])
  {
    __p.__pn_.__r_.__value_.__l.__size_ = __p.__pn_.__r_.__value_.__r.__words[0];
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if (v29)
        goto LABEL_39;
      goto LABEL_52;
    }
  }
  else if ((SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(v31.__pn_.__r_.__value_.__l.__data_);
  if (v29)
  {
LABEL_39:
    v18 = SHIBYTE(v28);
    if (v28 >= 0)
      v19 = (unsigned __int8 *)&__dst;
    else
      v19 = (unsigned __int8 *)__dst;
    if (v28 >= 0)
      v20 = HIBYTE(v28);
    else
      v20 = *((_QWORD *)&__dst + 1);
    memset(&v25, 0, sizeof(v25));
    std::string::reserve(&v25, 2 * v20);
    for (; v20; --v20)
    {
      v21 = *v19++;
      std::string::push_back(&v25, a0123456789abcd[(unint64_t)v21 >> 4]);
      std::string::push_back(&v25, a0123456789abcd[v21 & 0xF]);
    }
    v22 = std::string::append(&v25, ".bin");
    v23 = v22->__r_.__value_.__r.__words[0];
    v34[0] = v22->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v34 + 7);
    __p.__pn_.__r_.__value_.__r.__words[0] = v23;
    __p.__pn_.__r_.__value_.__l.__size_ = v34[0];
    *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v24;
    sub_239498A04(&__p, (uint64_t)v32, &v31);
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_23941A7F8(a2, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
      if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v31.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_62;
      }
      else if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_62;
      }
    }
    else
    {
      *(std::__fs::filesystem::path *)a2 = v31;
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_62:
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_63:
          operator delete(v25.__r_.__value_.__l.__data_);
          if (v18 < 0)
          {
LABEL_64:
            operator delete((void *)__dst);
            if (v17 < 0)
              goto LABEL_65;
            goto LABEL_59;
          }
LABEL_58:
          if (v17 < 0)
            goto LABEL_65;
          goto LABEL_59;
        }
LABEL_57:
        if (v18 < 0)
          goto LABEL_64;
        goto LABEL_58;
      }
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_63;
    goto LABEL_57;
  }
LABEL_52:
  a2[23] = 11;
  strcpy(a2, "unknown.err");
  if (v17 < 0)
  {
LABEL_65:
    operator delete((void *)v16);
    if (SHIBYTE(v33) < 0)
      goto LABEL_66;
    return;
  }
LABEL_59:
  if (SHIBYTE(v33) < 0)
LABEL_66:
    operator delete(v32[0]);
}

void sub_2395ACF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;
  int v39;
  int v40;

  if (a31 < 0)
  {
    operator delete(a26);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_5:
    if (v40 < 0)
      operator delete(v38);
    if (v39 < 0)
      operator delete(v37);
    if (a37 < 0)
      operator delete(a32);
    _Unwind_Resume(exception_object);
  }
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void sub_2395ACFBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if ((a14 & 0x80000000) == 0)
    JUMPOUT(0x2395ACF50);
  JUMPOUT(0x2395ACF48);
}

void sub_2395AD05C(const void **a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  void **v5;
  unint64_t v6;
  unsigned int v7;
  const void *v8[3];
  void *__p[3];
  void *v10[2];
  unsigned __int8 v11;
  char v12;

  HIBYTE(v8[2]) = 18;
  strcpy((char *)v8, "CorePhotogrammetry");
  sub_2395AC84C(v8, __p);
  sub_2395ABE70(a1, (uint64_t)__p, (uint64_t)v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8[2]) < 0)
  {
    operator delete((void *)v8[0]);
    if (v12)
      goto LABEL_5;
LABEL_16:
    *(_BYTE *)(a2 + 23) = 11;
    strcpy((char *)a2, "unknown_err");
    return;
  }
  if (!v12)
    goto LABEL_16;
LABEL_5:
  v4 = (char)v11;
  if ((v11 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (void **)v10[0];
  if ((v11 & 0x80u) == 0)
    v6 = v11;
  else
    v6 = (unint64_t)v10[1];
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::string::reserve((std::string *)a2, 2 * v6);
  for (; v6; --v6)
  {
    v7 = *(unsigned __int8 *)v5;
    v5 = (void **)((char *)v5 + 1);
    std::string::push_back((std::string *)a2, a0123456789abcd[(unint64_t)v7 >> 4]);
    std::string::push_back((std::string *)a2, a0123456789abcd[v7 & 0xF]);
  }
  if (v4 < 0)
    operator delete(v10[0]);
}

void sub_2395AD1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  void *v17;
  int v18;

  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  if (v18 < 0)
    operator delete(v17);
  _Unwind_Resume(exception_object);
}

void sub_2395AD208(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395AD22C(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  else
  {
    std::ostream::operator<<();
  }
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395AD2C4()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

void sub_2395AD2F8(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;

  v4 = *(char **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v5 = *(unsigned int *)(a1 + 8);
  if (v5 > (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v4) >> 2)
  {
    v6 = 4 * v5;
    v7 = (char *)operator new(4 * v5);
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = &v7[v6];
    if (v4)
      operator delete(v4);
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v9 = 0;
    while (1)
    {
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_8;
      v12 = *(char **)(a2 + 8);
      v11 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v12 >= v11)
        break;
      *(_DWORD *)v12 = v9;
      v10 = (uint64_t)(v12 + 4);
LABEL_7:
      *(_QWORD *)(a2 + 8) = v10;
LABEL_8:
      if (++v9 >= v8)
        return;
    }
    v13 = *(char **)a2;
    v14 = (uint64_t)&v12[-*(_QWORD *)a2];
    v15 = v14 >> 2;
    v16 = (v14 >> 2) + 1;
    if (v16 >> 62)
      sub_2394189F8();
    v17 = v11 - (_QWORD)v13;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        sub_239418A80();
      v19 = operator new(4 * v18);
      v20 = &v19[4 * v15];
      *v20 = v9;
      v10 = (uint64_t)(v20 + 1);
      if (v12 == v13)
        goto LABEL_28;
    }
    else
    {
      v19 = 0;
      v20 = (_DWORD *)(4 * v15);
      *(_DWORD *)(4 * v15) = v9;
      v10 = 4 * v15 + 4;
      if (v12 == v13)
      {
LABEL_28:
        *(_QWORD *)a2 = v20;
        *(_QWORD *)(a2 + 8) = v10;
        *(_QWORD *)(a2 + 16) = &v19[4 * v18];
        if (v13)
        {
          operator delete(v13);
          v8 = *(_QWORD *)(a1 + 32);
        }
        goto LABEL_7;
      }
    }
    v21 = v12 - 4 - v13;
    if (v21 < 0x2C)
      goto LABEL_35;
    if ((unint64_t)(v12 - &v19[v14]) < 0x20)
      goto LABEL_35;
    v22 = (v21 >> 2) + 1;
    v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    v24 = &v12[-v23];
    v20 = (_DWORD *)((char *)v20 - v23);
    v25 = &v19[4 * v15 - 16];
    v26 = v12 - 16;
    v27 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 8;
    }
    while (v27);
    v12 = v24;
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_35:
      do
      {
        v29 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *--v20 = v29;
      }
      while (v12 != v13);
    }
    goto LABEL_28;
  }
}

uint64_t sub_2395AD4EC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void **v26;
  void *v27;
  void **v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *__p[2];
  void *v39;
  __int128 v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    return 0;
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(int *)(a1 + 12);
  v7 = *(int *)(a1 + 16);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if ((_DWORD)v5)
  {
    v51 = (char *)operator new(4 * v5);
    v53 = &v51[4 * v5];
    bzero(v51, 4 * v5);
    v52 = v53;
  }
  v8 = (v6 * v5);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  if ((_DWORD)v8)
  {
    v48 = (char *)operator new(4 * v8);
    v50 = &v48[4 * v8];
    bzero(v48, 4 * v8);
    v49 = v50;
  }
  v9 = (v7 * v5);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  if ((_DWORD)v9)
  {
    v10 = (char *)operator new((v7 * v5));
    v11 = &v10[v9];
    v45 = v10;
    v47 = &v10[v9];
    bzero(v10, (v7 * v5));
    v46 = v11;
  }
  v42 = 0;
  v43 = 0;
  v44 = 0;
  sub_2395AD2F8(a1, (uint64_t)&v42);
  v12 = (char *)v42;
  v13 = v43;
  if (v42 != v43)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 4 * v6;
    do
    {
      *(_DWORD *)&v51[v16] = *(_DWORD *)&v12[v16];
      v18 = *(unsigned int *)&v12[v16];
      if (*(_QWORD *)(a1 + 32) <= v18
        || ((*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 110, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      memcpy(&v48[v15], (const void *)(*(_QWORD *)(a1 + 48) + 24 * v18), v17);
      v19 = *(unsigned int *)&v12[v16];
      if (*(_QWORD *)(a1 + 32) <= v19
        || ((*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v19 >> 3) & 0x1FFFFFF8)) >> v19) & 1) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 124, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      memcpy(&v45[v14], *(const void **)(*(_QWORD *)(a1 + 72) + 24 * v19), v7);
      v16 += 4;
      v15 += v17;
      v14 += v7;
    }
    while (&v12[v16] != v13);
  }
  if (&v40 != (__int128 *)a1)
  {
    v40 = *(_OWORD *)a1;
    v41 = *(_QWORD *)(a1 + 16);
  }
  sub_2396157EC((uint64_t)__p, 1);
  v37 = 11;
  strcpy((char *)v36, "feat_config");
  v20 = (_QWORD *)operator new();
  *v20 = &off_250ADF780;
  v20[1] = &v40;
  sub_23961580C((uint64_t)__p, (uint64_t)v36, (uint64_t)v20);
  v35 = 8;
  strcpy((char *)v34, "feat_ids");
  v21 = (_QWORD *)operator new();
  *v21 = &off_250ADF7B0;
  v21[1] = &v51;
  sub_23961580C((uint64_t)__p, (uint64_t)v34, (uint64_t)v21);
  v33 = 8;
  strcpy((char *)v32, "kpt_data");
  v22 = (_QWORD *)operator new();
  *v22 = &off_250ADF2A0;
  v22[1] = &v48;
  sub_23961580C((uint64_t)__p, (uint64_t)v32, (uint64_t)v22);
  v31 = 9;
  strcpy((char *)v30, "desc_data");
  v23 = (_QWORD *)operator new();
  *v23 = &off_250ADF7E0;
  v23[1] = &v45;
  sub_23961580C((uint64_t)__p, (uint64_t)v30, (uint64_t)v23);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if ((v33 & 0x80000000) == 0)
    {
LABEL_20:
      if ((v35 & 0x80000000) == 0)
        goto LABEL_21;
LABEL_44:
      operator delete(v34[0]);
      if ((v37 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_45:
      operator delete(v36[0]);
      goto LABEL_22;
    }
  }
  else if ((v33 & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(v32[0]);
  if (v35 < 0)
    goto LABEL_44;
LABEL_21:
  if (v37 < 0)
    goto LABEL_45;
LABEL_22:
  v2 = sub_2395902F0((uint64_t)__p, a2);
  v24 = v39;
  if (v39)
  {
    do
    {
      v25 = v24[5];
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v24 = (_QWORD *)*v24;
    }
    while (v24);
    v26 = (void **)v39;
    if (v39)
    {
      do
      {
        v29 = (void **)*v26;
        if (*((char *)v26 + 39) < 0)
          operator delete(v26[2]);
        operator delete(v26);
        v26 = v29;
      }
      while (v29);
    }
  }
  v27 = __p[0];
  __p[0] = 0;
  if (v27)
    operator delete(v27);
  if (v42)
  {
    v43 = (char *)v42;
    operator delete(v42);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  return v2;
}

void sub_2395AD9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  uint64_t v43;
  void *v45;
  void *v46;

  v45 = *(void **)(v43 - 136);
  if (v45)
  {
    *(_QWORD *)(v43 - 128) = v45;
    operator delete(v45);
    v46 = *(void **)(v43 - 112);
    if (!v46)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v46 = *(void **)(v43 - 112);
    if (!v46)
      goto LABEL_3;
  }
  *(_QWORD *)(v43 - 104) = v46;
  operator delete(v46);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395ADB14(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  unint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  _BYTE *v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  void **v34;
  void **v35;
  void **v36;
  unsigned int v37;
  _DWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  void **v43;
  void *v44;
  void **v46;
  unsigned int v47;
  void *__p[2];
  char v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54[2];
  uint64_t v55;
  void *v56[2];
  void *v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  uint64_t v70;

  if (*(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32))
    return 0;
  v6 = a2 + 48;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 56) = v5;
  v7 = a2 + 72;
  v8 = *(_QWORD *)(a2 + 72);
  for (i = *(_QWORD *)(a2 + 80); i != v8; i -= 24)
  {
    v10 = *(void **)(i - 24);
    free(v10);
  }
  *(_QWORD *)(a2 + 80) = v8;
  *(_DWORD *)(a2 + 8) = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  sub_2396157EC((uint64_t)v56, 1);
  HIBYTE(v55) = 11;
  strcpy((char *)v54, "feat_config");
  v11 = (_QWORD *)operator new();
  *v11 = &off_250ADF780;
  v11[1] = &v58;
  sub_23961580C((uint64_t)v56, (uint64_t)v54, (uint64_t)v11);
  v53 = 8;
  strcpy((char *)v52, "feat_ids");
  v12 = (_QWORD *)operator new();
  *v12 = &off_250ADF7B0;
  v12[1] = &v68;
  sub_23961580C((uint64_t)v56, (uint64_t)v52, (uint64_t)v12);
  v51 = 8;
  strcpy((char *)v50, "kpt_data");
  v13 = (_QWORD *)operator new();
  *v13 = &off_250ADF2A0;
  v13[1] = &v65;
  sub_23961580C((uint64_t)v56, (uint64_t)v50, (uint64_t)v13);
  v49 = 9;
  strcpy((char *)__p, "desc_data");
  v14 = (_QWORD *)operator new();
  *v14 = &off_250ADF7E0;
  v14[1] = &v62;
  sub_23961580C((uint64_t)v56, (uint64_t)__p, (uint64_t)v14);
  if (v49 < 0)
  {
    operator delete(__p[0]);
    if ((v51 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v53 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_44:
      operator delete(v52[0]);
      if ((SHIBYTE(v55) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_45;
    }
  }
  else if ((v51 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v50[0]);
  if (v53 < 0)
    goto LABEL_44;
LABEL_8:
  if ((SHIBYTE(v55) & 0x80000000) == 0)
    goto LABEL_9;
LABEL_45:
  operator delete(v54[0]);
LABEL_9:
  if (sub_23959479C((uint64_t)v56, a1))
  {
    v16 = v59;
    v15 = v60;
    *(_QWORD *)a2 = v58;
    *(_QWORD *)(a2 + 8) = 0x600000000;
    v47 = v61;
    *(_QWORD *)(a2 + 16) = v61;
    v18 = (_QWORD *)(a2 + 24);
    v17 = *(void **)(a2 + 24);
    if (v17)
    {
      operator delete(v17);
      *v18 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
    }
    *v18 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v19 = *(void **)v6;
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(a2 + 56) = v19;
      operator delete(v19);
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
    }
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    v20 = *(_QWORD *)(a2 + 72);
    if (v20)
    {
      v21 = *(_QWORD *)(a2 + 80);
      v22 = *(char **)(a2 + 72);
      if (v21 != v20)
      {
        do
        {
          v23 = *(void **)(v21 - 24);
          v21 -= 24;
          free(v23);
        }
        while (v21 != v20);
        v22 = *(char **)v7;
      }
      *(_QWORD *)(a2 + 80) = v20;
      operator delete(v22);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    sub_2394187EC(a2 + 24, v16);
    v24 = *(_BYTE **)(a2 + 48);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - (_QWORD)v24) >> 3) < v16)
    {
      v25 = *(_BYTE **)(a2 + 56);
      v26 = (char *)operator new(24 * v16);
      v27 = &v26[24 * ((v25 - v24) / 24)];
      v28 = v27;
      if (v25 != v24)
      {
        v29 = &v26[24 * ((v25 - v24) / 24)];
        do
        {
          v28 = v29 - 24;
          v30 = *(_OWORD *)(v25 - 24);
          *((_QWORD *)v29 - 1) = *((_QWORD *)v25 - 1);
          *(_OWORD *)(v29 - 24) = v30;
          v25 -= 24;
          v29 -= 24;
        }
        while (v25 != v24);
      }
      *(_QWORD *)(a2 + 48) = v28;
      *(_QWORD *)(a2 + 56) = v27;
      *(_QWORD *)(a2 + 64) = &v26[24 * v16];
      if (v24)
        operator delete(v24);
    }
    sub_2394188EC((char **)v7, v16);
    v32 = v68;
    v31 = v69;
    if ((_DWORD)v16 != ((unint64_t)((char *)v69 - (char *)v68) >> 2))
    {
      sub_239A444D4((uint64_t)"unknown file", 250, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v54[1] = 0;
    v55 = 0;
    v54[0] = &v54[1];
    if (v68 == v69)
    {
      v39 = 0;
    }
    else
    {
      v33 = *v68;
      v34 = &v54[1];
      v35 = &v54[1];
LABEL_34:
      v38 = operator new(0x20uLL);
      v38[7] = v33;
      *(_QWORD *)v38 = 0;
      *((_QWORD *)v38 + 1) = 0;
      *((_QWORD *)v38 + 2) = v35;
      *v34 = v38;
      if (*(_QWORD *)v54[0])
      {
        v54[0] = *(void **)v54[0];
        v38 = *v34;
      }
      sub_2394213B8((uint64_t *)v54[1], (uint64_t *)v38);
      v39 = ++v55;
      while (++v32 != v31)
      {
        v33 = *v32;
        v34 = &v54[1];
        v35 = &v54[1];
        if (!v54[1])
          goto LABEL_34;
        v36 = (void **)v54[1];
        while (1)
        {
          while (1)
          {
            v35 = v36;
            v37 = *((_DWORD *)v36 + 7);
            if (v33 >= v37)
              break;
            v36 = (void **)*v35;
            v34 = v35;
            if (!*v35)
              goto LABEL_34;
          }
          if (v37 >= v33)
            break;
          v36 = (void **)v35[1];
          if (!v36)
          {
            v34 = v35 + 1;
            goto LABEL_34;
          }
        }
      }
    }
    v41 = *(_DWORD *)(a2 + 16);
    if (v41)
    {
      if (v41 != v47)
        goto LABEL_56;
      if (!v39)
      {
LABEL_53:
        if (*(_DWORD *)(a2 + 8) != v69 - v68)
        {
          sub_239A444D4((uint64_t)"unknown file", 262, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v2 = 1;
        sub_239421038((uint64_t)v54, (_QWORD *)v54[1]);
        v40 = v57;
        if (!v57)
          goto LABEL_62;
        goto LABEL_59;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 16) = v47;
      if (!v39)
        goto LABEL_53;
    }
    if ((sub_2395AE2A4(a2, v54, &v65, &v62, v15, v47) & 1) != 0)
      goto LABEL_53;
LABEL_56:
    v2 = 0;
    sub_239421038((uint64_t)v54, (_QWORD *)v54[1]);
    v40 = v57;
    if (!v57)
      goto LABEL_62;
    do
    {
LABEL_59:
      v42 = v40[5];
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      v40 = (_QWORD *)*v40;
    }
    while (v40);
    v43 = (void **)v57;
    if (v57)
    {
      do
      {
        v46 = (void **)*v43;
        if (*((char *)v43 + 39) < 0)
          operator delete(v43[2]);
        operator delete(v43);
        v43 = v46;
      }
      while (v46);
    }
    goto LABEL_62;
  }
  v2 = 0;
  v40 = v57;
  if (v57)
    goto LABEL_59;
LABEL_62:
  v44 = v56[0];
  v56[0] = 0;
  if (v44)
    operator delete(v44);
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  return v2;
}

void sub_2395AE188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,_QWORD *a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;
  void *v38;
  void *v39;

  sub_239421038((uint64_t)&a29, a30);
  sub_2395905C0((uint64_t)&a35);
  v37 = *(void **)(v35 - 152);
  if (v37)
  {
    *(_QWORD *)(v35 - 144) = v37;
    operator delete(v37);
    v38 = *(void **)(v35 - 128);
    if (!v38)
    {
LABEL_3:
      v39 = *(void **)(v35 - 104);
      if (!v39)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v38 = *(void **)(v35 - 128);
    if (!v38)
      goto LABEL_3;
  }
  *(_QWORD *)(v35 - 120) = v38;
  operator delete(v38);
  v39 = *(void **)(v35 - 104);
  if (!v39)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  *(_QWORD *)(v35 - 96) = v39;
  operator delete(v39);
  _Unwind_Resume(a1);
}

uint64_t sub_2395AE2A4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, int a5, unsigned int a6)
{
  uint64_t v6;
  size_t v9;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v31;
  void *__src[2];
  unsigned int v33;
  __int128 __dst;
  unint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v6 = a2[2];
  v31 = a5;
  if (v6 * a5 != (uint64_t)(a3[1] - *a3) >> 2)
    sub_239EBFB04();
  v9 = (int)a6;
  if (a4[1] - *a4 != v6 * (int)a6)
    sub_239EC0A08();
  if (!v6)
    return 1;
  v13 = a2 + 1;
  v12 = a2[1];
  if (v12)
  {
    do
    {
      v14 = v12;
      v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12);
  }
  else
  {
    v16 = a2 + 1;
    do
    {
      v14 = v16[2];
      v17 = *(_QWORD *)v14 == (_QWORD)v16;
      v16 = (_QWORD *)v14;
    }
    while (v17);
  }
  LODWORD(v18) = *(_DWORD *)(*a2 + 28);
  v19 = *(_DWORD *)(v14 + 28);
  if (v18 <= v19)
    v18 = v19;
  else
    v18 = v18;
  if (*(_QWORD *)(a1 + 32) <= v18)
    sub_23941C4FC(a1, v18 + 1);
  __dst = 0uLL;
  v35 = 0xBF80000000000000;
  __src[0] = 0;
  __src[1] = 0;
  v33 = a6;
  sub_23941D1E8((uint64_t)__src, a6);
  v20 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == v13)
  {
LABEL_30:
    v15 = 1;
  }
  else
  {
    v21 = 0;
    while (1)
    {
      v22 = *((unsigned int *)v20 + 7);
      if (*(_QWORD *)(a1 + 32) > v22
        && ((*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v22 >> 3) & 0x1FFFFFF8)) >> v22) & 1) != 0)
      {
        break;
      }
      memcpy(&__dst, (const void *)(*a3 + 4 * v21 * v31), 4 * v31);
      memcpy(__src[0], (const void *)(*a4 + v21 * v9), v9);
      v23 = *((unsigned int *)v20 + 7);
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v23 >> 3) & 0x1FFFFFF8)) |= 1 << v23;
      v24 = *(_QWORD *)(a1 + 48) + 24 * v23;
      *(_QWORD *)(v24 + 16) = v35;
      *(_OWORD *)v24 = __dst;
      v25 = *(_QWORD *)(a1 + 72) + 24 * *((unsigned int *)v20 + 7);
      if ((void **)v25 != __src)
      {
        v26 = v33;
        sub_23941D1E8(*(_QWORD *)(a1 + 72) + 24 * *((unsigned int *)v20 + 7), v33);
        if ((_DWORD)v26)
          memcpy(*(void **)v25, __src[0], v26);
        *(_DWORD *)(v25 + 16) = v33;
      }
      ++*(_DWORD *)(a1 + 8);
      v27 = (_QWORD *)v20[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v20[2];
          v17 = *v28 == (_QWORD)v20;
          v20 = v28;
        }
        while (!v17);
      }
      ++v21;
      v20 = v28;
      if (v28 == v13)
        goto LABEL_30;
    }
    v15 = 0;
  }
  free(__src[0]);
  return v15;
}

void sub_2395AE550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  free(a12);
  _Unwind_Resume(a1);
}

void sub_2395AE568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  free(a12);
  _Unwind_Resume(a1);
}

void sub_2395AE580(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395AE5A4(uint64_t a1, _QWORD *a2, int a3)
{
  __int128 *v4;
  __int128 v5;
  __int128 v7;
  uint64_t v8;

  v4 = *(__int128 **)(a1 + 8);
  v5 = *v4;
  v8 = *((_QWORD *)v4 + 2);
  v7 = v5;
  sub_2395AE660((uint64_t)&v7, (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395AE5FC(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9[2];

  v4 = *(_QWORD *)(a1 + 8);
  v9[0] = (uint64_t)&v7;
  v9[1] = 0;
  sub_2395AE86C(v9, a2, a3);
  v5 = v7;
  *(_QWORD *)(v4 + 16) = v8;
  *(_OWORD *)v4 = v5;
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t sub_2395AE660(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    sub_2395AE748(a1, a1 + 24, a2, 6uLL);
  }
  else
  {
    std::ostream::put();
    std::ostream::operator<<();
    std::ostream::put();
    std::ostream::operator<<();
    std::ostream::put();
    std::ostream::operator<<();
    std::ostream::put();
    std::ostream::operator<<();
    std::ostream::put();
    std::ostream::operator<<();
    std::ostream::put();
    std::ostream::operator<<();
    std::ostream::put();
  }
  return a2;
}

uint64_t sub_2395AE748(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *exception;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  for (; a1 != a2; a1 += 4)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  return 1;
}

BOOL sub_2395AE86C(uint64_t *a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL8 result;
  char v24;
  _BYTE *v25;
  unsigned int v26;
  int v27;
  int v28;
  char *v29;
  unint64_t v30;
  int i;
  unsigned int v32;
  char v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD v42[11];
  char v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v40 = 0;
      v41 = 0;
      v42[0] = 0;
      sub_23942CB44((uint64_t)&v40, v6);
      std::istream::read();
      v7 = v40;
      if (v41 != v40)
      {
        v8 = (v41 - v40) >> 2;
        v9 = *a1;
        v10 = a1[1];
        if (v8 <= 1)
          v8 = 1;
        v11 = v40;
        do
        {
          if (v10 <= 5)
            *(_DWORD *)(v9 + 4 * v10) = *v11;
          ++v10;
          ++v11;
          --v8;
        }
        while (v8);
        a1[1] = v10;
      }
      if (v7)
      {
        v41 = v7;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v20 = sub_2396162D4((uint64_t)a2, v5);
      if (v20)
      {
        v21 = v20;
        do
        {
          LODWORD(v40) = 0;
          sub_239596F74((uint64_t)&v40, (uint64_t)a2, 1);
          v22 = a1[1];
          if (v22 <= 5)
            *(_DWORD *)(*a1 + 4 * v22) = (_DWORD)v40;
          a1[1] = v22 + 1;
          --v21;
        }
        while (v21);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v46 = 0;
      memset(&v47, 0, sizeof(v47));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    return 0;
  }
  v12 = a2 + 4;
  v13 = MEMORY[0x24BDAC740];
  while (1)
  {
    v14 = std::istream::peek();
    if (v14 <= 0x7F)
      break;
    v15 = __maskrune(v14, 0x4000uLL);
    v16 = *(_QWORD *)(*a2 - 24);
    if (!v15)
      goto LABEL_17;
LABEL_15:
    if (!*(_DWORD *)((char *)v12 + v16))
      std::istream::get();
  }
  v16 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) != 0)
    goto LABEL_15;
LABEL_17:
  if ((*((_BYTE *)a2 + v16 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v17 = std::istream::peek();
    if (v17 > 0x7F)
    {
      v18 = __maskrune(v17, 0x4000uLL);
      v19 = *(_QWORD *)(*a2 - 24);
      if (!v18)
        break;
      goto LABEL_23;
    }
    v19 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v13 + 4 * v17 + 60) & 0x4000) != 0)
    {
LABEL_23:
      if (!*(_DWORD *)((char *)v12 + v19))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v19 + 32) & 2) != 0)
    return 0;
  v24 = 0;
  v25 = (_BYTE *)*MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v39 = *(_BYTE **)(MEMORY[0x24BEDB7F0] + 64);
  v37 = MEMORY[0x24BEDB848] + 16;
LABEL_38:
  if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v24 & 1) == 0)
  {
    while (1)
    {
      v26 = std::istream::peek();
      if (v26 <= 0x7F)
      {
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v13 + 4 * v26 + 60) & 0x4000) == 0)
        {
LABEL_46:
          if ((v28 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v40);
          v45 = v42;
          if (sub_239596128(a2))
          {
            v29 = (char *)v42 + *(_QWORD *)(v42[0] - 24);
            if ((v29[32] & 5) == 0)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v29 + 5)
                                                                                                  + 32))(&v47, *((_QWORD *)v29 + 5), 0, 1, 16);
              if (v48 >= 1)
              {
                LODWORD(v47.__r_.__value_.__l.__data_) = 0;
                MEMORY[0x23B83DD04](&v40, &v47);
                v30 = a1[1];
                if (v30 <= 5)
                  *(_DWORD *)(*a1 + 4 * v30) = v47.__r_.__value_.__l.__data_;
                a1[1] = v30 + 1;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v32 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_63;
              if (v32 == 1560281088)
                break;
              if (v32 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v13 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_62;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_62;
              }
              if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_62:
                if (v32 != 738197504)
                  goto LABEL_64;
LABEL_63:
                std::istream::get();
                v24 = 0;
                goto LABEL_66;
              }
              std::istream::get();
            }
            v24 = 1;
LABEL_66:
            v33 = 1;
          }
          else
          {
LABEL_64:
            v33 = 0;
            v24 = 0;
          }
          v40 = v25;
          *(_BYTE **)((char *)&v40 + *((_QWORD *)v25 - 3)) = v39;
          v42[0] = v38;
          v42[1] = v37;
          if (v43 < 0)
            operator delete((void *)v42[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v44);
          result = 0;
          if ((v33 & 1) == 0)
            return result;
          goto LABEL_38;
        }
      }
      else
      {
        v27 = __maskrune(v26, 0x4000uLL);
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if (!v27)
          goto LABEL_46;
      }
      if (!v28)
        std::istream::get();
    }
  }
  while (1)
  {
    v34 = std::istream::peek();
    v35 = v34 <= 0x7F ? *(_DWORD *)(v13 + 4 * v34 + 60) & 0x4000 : __maskrune(v34, 0x4000uLL);
    v36 = *(_QWORD *)(*a2 - 24);
    if (!v35)
      break;
    if (!*(_DWORD *)((char *)v12 + v36))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v36 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395AF004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 209) < 0)
  {
    operator delete(*(void **)(v51 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2395AF0B8(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(a1[1] - *a1) >> 2;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_23942CB44((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 4 * a2;
  }
}

uint64_t sub_2395AF0E4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_2395AF3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2395AF3FC(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395AF420(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395AF49C(*(_QWORD **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395AF45C(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395AFD54(*(_QWORD **)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_2395AF49C(_QWORD *a1, _QWORD *a2, int a3)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 __p;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  if (a3)
  {
    if ((a1[1] - *a1) >> 32)
    {
      std::ostream::put();
      v5 = (uint64_t)(a1[1] - *a1) >> 2;
      if (v5 <= 0x1FFFFFFF * (v5 / 0x1FFFFFFF))
        v6 = v5 / 0x1FFFFFFF;
      else
        v6 = v5 / 0x1FFFFFFF + 1;
      v17 = 2;
      v18 = v6;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      HIBYTE(v15) = 7;
      strcpy((char *)&__p, "content");
      std::ostream::put();
      v19 = 7;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v7 = a1[1] - *a1;
      if (v7)
      {
        v8 = 0;
        v9 = v7 >> 2;
        do
        {
          v15 = a1;
          v16 = 0;
          *(_QWORD *)&__p = v8;
          v8 += 0x1FFFFFFFLL;
          if (v9 >= v8)
            v9 = v8;
          *((_QWORD *)&__p + 1) = v9;
          sub_2395AF91C((uint64_t)&__p, a2);
          v9 = (uint64_t)(a1[1] - *a1) >> 2;
        }
        while (v8 < v9);
      }
      return a2;
    }
    else
    {
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      return a2;
    }
  }
  else
  {
    v12 = *a1;
    v11 = a1[1];
    std::ostream::put();
    if (v12 != v11)
    {
      v13 = v12 + 4;
      std::ostream::operator<<();
      while (v13 != v11)
      {
        std::ostream::put();
        v13 += 4;
        std::ostream::operator<<();
      }
    }
    std::ostream::put();
    return a2;
  }
}

void sub_2395AF8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2395AF91C(uint64_t a1, _QWORD *a2)
{
  char __p[23];
  char v6;
  int v7;
  int v8;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  std::ostream::put();
  v7 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v6 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v8 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  *(_DWORD *)__p = 4 * (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395AFD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395AFD54(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _QWORD *v12;

  v3 = (uint64_t)a2;
  v12 = a1;
  a1[1] = *a1;
  if (!a3)
    goto LABEL_10;
  v5 = std::istream::peek();
  v6 = v5;
  if ((v5 - 196) > 2)
  {
    if ((v5 - 220) > 3 || v5 == 222)
      return v3;
    a2 = (_QWORD *)v3;
    a3 = 1;
LABEL_10:
    sub_2395AFE54((uint64_t *)&v12, a2, a3);
    return v3;
  }
  std::istream::get();
  v7 = (unint64_t)sub_2396162D4(v3, v6) >> 2;
  v8 = (uint64_t)(a1[1] - *a1) >> 2;
  v9 = v7 >= v8;
  v10 = v7 - v8;
  if (v10 != 0 && v9)
  {
    sub_23942CB44((uint64_t)a1, v10);
  }
  else if (!v9)
  {
    a1[1] = *a1 + 4 * v7;
  }
  std::istream::read();
  return v3;
}

BOOL sub_2395AFE54(uint64_t *a1, _QWORD *a2, int a3)
{
  int v4;
  unsigned int v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _DWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _DWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  _BOOL8 result;
  char v62;
  void *v63;
  unsigned int v64;
  int v65;
  int v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  _DWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  _DWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  int i;
  unsigned int v92;
  char v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v104;
  void *v105;
  _QWORD v106[11];
  char v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  std::string v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v4 = std::istream::get();
    if ((v4 - 196) <= 2)
    {
      v5 = sub_2396162D4((uint64_t)a2, v4);
      v104 = 0;
      v105 = 0;
      v106[0] = 0;
      sub_23942CB44((uint64_t)&v104, v5);
      std::istream::read();
      v6 = v105;
      if (v105 == v104)
      {
LABEL_67:
        if (v6)
        {
          v105 = v6;
          operator delete(v6);
        }
        return 1;
      }
      v7 = 0;
      v6 = v104;
      while (1)
      {
        v9 = *a1;
        v11 = *(char **)(*a1 + 8);
        v10 = *(_QWORD *)(*a1 + 16);
        if ((unint64_t)v11 >= v10)
          break;
        *(_DWORD *)v11 = *((_DWORD *)v6 + v7);
        v8 = (uint64_t)(v11 + 4);
LABEL_6:
        *(_QWORD *)(v9 + 8) = v8;
        ++v7;
        v6 = v104;
        if (v7 >= ((_BYTE *)v105 - (_BYTE *)v104) >> 2)
          goto LABEL_67;
      }
      v12 = *(char **)v9;
      v13 = (uint64_t)&v11[-*(_QWORD *)v9];
      v14 = v13 >> 2;
      v15 = (v13 >> 2) + 1;
      if (v15 >> 62)
        sub_2394189F8();
      v16 = v10 - (_QWORD)v12;
      if (v16 >> 1 > v15)
        v15 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 62)
          sub_239418A80();
        v18 = operator new(4 * v17);
        v19 = &v18[4 * v14];
        *v19 = *((_DWORD *)v6 + v7);
        v8 = (uint64_t)(v19 + 1);
        if (v11 == v12)
          goto LABEL_25;
      }
      else
      {
        v18 = 0;
        v19 = (_DWORD *)(4 * v14);
        *(_DWORD *)(4 * v14) = *((_DWORD *)v6 + v7);
        v8 = 4 * v14 + 4;
        if (v11 == v12)
        {
LABEL_25:
          *(_QWORD *)v9 = v19;
          *(_QWORD *)(v9 + 8) = v8;
          *(_QWORD *)(v9 + 16) = &v18[4 * v17];
          if (v12)
            operator delete(v12);
          goto LABEL_6;
        }
      }
      v20 = v11 - 4 - v12;
      if (v20 < 0x2C)
        goto LABEL_146;
      if ((unint64_t)(v11 - &v18[v13]) < 0x20)
        goto LABEL_146;
      v21 = (v20 >> 2) + 1;
      v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
      v23 = &v11[-v22];
      v19 = (_DWORD *)((char *)v19 - v22);
      v24 = &v18[4 * v14 - 16];
      v25 = v11 - 16;
      v26 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 8;
      }
      while (v26);
      v11 = v23;
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_146:
        do
        {
          v28 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *--v19 = v28;
        }
        while (v11 != v12);
      }
      goto LABEL_25;
    }
    if ((v4 & 0xFFFFFFFE) != 0xDC)
    {
      if (v4 == 223)
      {
        v110 = 0;
        memset(&v111, 0, sizeof(v111));
        std::istream::read();
        std::istream::read();
        std::istream::read();
        std::istream::read();
      }
      return 0;
    }
    v37 = sub_2396162D4((uint64_t)a2, v4);
    if (!v37)
      return 1;
    v38 = 0;
    v39 = v37;
    while (1)
    {
      LODWORD(v104) = 0;
      sub_2395A2AC8((uint64_t)&v104, (uint64_t)a2, 1);
      v41 = *a1;
      v43 = *(char **)(*a1 + 8);
      v42 = *(_QWORD *)(*a1 + 16);
      if ((unint64_t)v43 >= v42)
        break;
      *(_DWORD *)v43 = (_DWORD)v104;
      v40 = (uint64_t)(v43 + 4);
LABEL_46:
      *(_QWORD *)(v41 + 8) = v40;
      if (++v38 == v39)
        return 1;
    }
    v44 = *(char **)v41;
    v45 = (uint64_t)&v43[-*(_QWORD *)v41];
    v46 = v45 >> 2;
    v47 = (v45 >> 2) + 1;
    if (v47 >> 62)
      sub_2394189F8();
    v48 = v42 - (_QWORD)v44;
    if (v48 >> 1 > v47)
      v47 = v48 >> 1;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
      v49 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v49 = v47;
    if (v49)
    {
      if (v49 >> 62)
        sub_239418A80();
      v50 = operator new(4 * v49);
      v51 = &v50[4 * v46];
      *v51 = (_DWORD)v104;
      v40 = (uint64_t)(v51 + 1);
      if (v43 == v44)
        goto LABEL_65;
    }
    else
    {
      v50 = 0;
      v51 = (_DWORD *)(4 * v46);
      *(_DWORD *)(4 * v46) = (_DWORD)v104;
      v40 = 4 * v46 + 4;
      if (v43 == v44)
      {
LABEL_65:
        *(_QWORD *)v41 = v51;
        *(_QWORD *)(v41 + 8) = v40;
        *(_QWORD *)(v41 + 16) = &v50[4 * v49];
        if (v44)
          operator delete(v44);
        goto LABEL_46;
      }
    }
    v52 = v43 - 4 - v44;
    if (v52 < 0x2C)
      goto LABEL_147;
    if ((unint64_t)(v43 - &v50[v45]) < 0x20)
      goto LABEL_147;
    v53 = (v52 >> 2) + 1;
    v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
    v55 = &v43[-v54];
    v51 = (_DWORD *)((char *)v51 - v54);
    v56 = &v50[4 * v46 - 16];
    v57 = v43 - 16;
    v58 = v53 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v59 = *(_OWORD *)v57;
      *(v56 - 1) = *((_OWORD *)v57 - 1);
      *v56 = v59;
      v56 -= 2;
      v57 -= 32;
      v58 -= 8;
    }
    while (v58);
    v43 = v55;
    if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_147:
      do
      {
        v60 = *((_DWORD *)v43 - 1);
        v43 -= 4;
        *--v51 = v60;
      }
      while (v43 != v44);
    }
    goto LABEL_65;
  }
  v29 = a2 + 4;
  v30 = MEMORY[0x24BDAC740];
  while (1)
  {
    v31 = std::istream::peek();
    if (v31 <= 0x7F)
      break;
    v32 = __maskrune(v31, 0x4000uLL);
    v33 = *(_QWORD *)(*a2 - 24);
    if (!v32)
      goto LABEL_34;
LABEL_32:
    if (!*(_DWORD *)((char *)v29 + v33))
      std::istream::get();
  }
  v33 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v30 + 4 * v31 + 60) & 0x4000) != 0)
    goto LABEL_32;
LABEL_34:
  if ((*((_BYTE *)a2 + v33 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v34 = std::istream::peek();
    if (v34 > 0x7F)
    {
      v35 = __maskrune(v34, 0x4000uLL);
      v36 = *(_QWORD *)(*a2 - 24);
      if (!v35)
        break;
      goto LABEL_40;
    }
    v36 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v30 + 4 * v34 + 60) & 0x4000) != 0)
    {
LABEL_40:
      if (!*(_DWORD *)((char *)v29 + v36))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v36 + 32) & 2) != 0)
    return 0;
  v62 = 0;
  v63 = (void *)*MEMORY[0x24BEDB7F0];
  v101 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v102 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v100 = MEMORY[0x24BEDB848] + 16;
LABEL_73:
  if ((*((_BYTE *)v29 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v62 & 1) == 0)
  {
    while (1)
    {
      v64 = std::istream::peek();
      if (v64 <= 0x7F)
      {
        v66 = *(_DWORD *)((char *)v29 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v30 + 4 * v64 + 60) & 0x4000) == 0)
        {
LABEL_81:
          if ((v66 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v104);
          v109 = v106;
          if (!sub_239596128(a2))
          {
LABEL_120:
            v93 = 0;
            v62 = 0;
            goto LABEL_123;
          }
          v67 = (char *)v106 + *(_QWORD *)(v106[0] - 24);
          if ((v67[32] & 5) != 0)
            goto LABEL_109;
          (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v67 + 5)
                                                                                              + 32))(&v111, *((_QWORD *)v67 + 5), 0, 1, 16);
          if (v112 < 1)
            goto LABEL_109;
          LODWORD(v111.__r_.__value_.__l.__data_) = 0;
          MEMORY[0x23B83DD10](&v104, &v111);
          v68 = *a1;
          v70 = *(char **)(*a1 + 8);
          v69 = *(_QWORD *)(*a1 + 16);
          if ((unint64_t)v70 < v69)
          {
            *(_DWORD *)v70 = v111.__r_.__value_.__l.__data_;
            v71 = v70 + 4;
            goto LABEL_107;
          }
          v99 = *a1;
          v72 = *(char **)v68;
          v73 = (uint64_t)&v70[-*(_QWORD *)v68];
          v74 = v73 >> 2;
          v75 = (v73 >> 2) + 1;
          if (v75 >> 62)
            sub_2394189F8();
          v76 = v69 - (_QWORD)v72;
          if (v76 >> 1 > v75)
            v75 = v76 >> 1;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
            v77 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (!v77)
          {
            v79 = 0;
            v80 = (_DWORD *)(4 * v74);
            *(_DWORD *)(4 * v74) = v111.__r_.__value_.__l.__data_;
            v81 = 4 * v74 + 4;
            if (v70 != v72)
              goto LABEL_96;
LABEL_99:
            v68 = v99;
            goto LABEL_105;
          }
          v97 = &v70[-*(_QWORD *)v68];
          v98 = v73 >> 2;
          if (v77 >> 62)
            sub_239418A80();
          v78 = v77;
          v79 = operator new(4 * v77);
          v77 = v78;
          v73 = (uint64_t)v97;
          v74 = v98;
          v80 = &v79[4 * v98];
          *v80 = v111.__r_.__value_.__l.__data_;
          v81 = (uint64_t)(v80 + 1);
          if (v70 == v72)
            goto LABEL_99;
LABEL_96:
          v82 = v70 - 4 - v72;
          if (v82 < 0x2C)
          {
            v68 = v99;
            goto LABEL_104;
          }
          v68 = v99;
          if ((unint64_t)(v70 - &v79[v73]) < 0x20)
            goto LABEL_148;
          v83 = (v82 >> 2) + 1;
          v84 = 4 * (v83 & 0x7FFFFFFFFFFFFFF8);
          v85 = &v70[-v84];
          v80 = (_DWORD *)((char *)v80 - v84);
          v86 = &v79[4 * v74 - 16];
          v87 = v70 - 16;
          v88 = v83 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v89 = *(_OWORD *)v87;
            *(v86 - 1) = *((_OWORD *)v87 - 1);
            *v86 = v89;
            v86 -= 2;
            v87 -= 32;
            v88 -= 8;
          }
          while (v88);
          v70 = v85;
          if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_148:
            do
            {
LABEL_104:
              v90 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *--v80 = v90;
            }
            while (v70 != v72);
          }
LABEL_105:
          *(_QWORD *)v68 = v80;
          *(_QWORD *)(v68 + 8) = v81;
          *(_QWORD *)(v68 + 16) = &v79[4 * v77];
          if (v72)
          {
            v71 = (_DWORD *)v81;
            operator delete(v72);
LABEL_107:
            v81 = (uint64_t)v71;
          }
          *(_QWORD *)(v68 + 8) = v81;
LABEL_109:
          for (i = std::istream::peek(); ; i = std::istream::peek())
          {
            v92 = i << 24;
            if (i << 24 == 738197504)
              goto LABEL_119;
            if (v92 == 1560281088)
              break;
            if (v92 <= 0x7F000000)
            {
              if ((*(_DWORD *)(v30 + 4 * (char)i + 60) & 0x4000) == 0)
                goto LABEL_118;
            }
            else if (!__maskrune((char)i, 0x4000uLL))
            {
              goto LABEL_118;
            }
            if ((*((_BYTE *)v29 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
            {
LABEL_118:
              if (v92 != 738197504)
                goto LABEL_120;
LABEL_119:
              std::istream::get();
              v62 = 0;
              goto LABEL_122;
            }
            std::istream::get();
          }
          v62 = 1;
LABEL_122:
          v93 = 1;
LABEL_123:
          v104 = v63;
          *(void **)((char *)&v104 + *((_QWORD *)v63 - 3)) = v102;
          v106[0] = v101;
          v106[1] = v100;
          if (v107 < 0)
            operator delete((void *)v106[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v108);
          result = 0;
          if ((v93 & 1) == 0)
            return result;
          goto LABEL_73;
        }
      }
      else
      {
        v65 = __maskrune(v64, 0x4000uLL);
        v66 = *(_DWORD *)((char *)v29 + *(_QWORD *)(*a2 - 24));
        if (!v65)
          goto LABEL_81;
      }
      if (!v66)
        std::istream::get();
    }
  }
  while (1)
  {
    v94 = std::istream::peek();
    v95 = v94 <= 0x7F ? *(_DWORD *)(v30 + 4 * v94 + 60) & 0x4000 : __maskrune(v94, 0x4000uLL);
    v96 = *(_QWORD *)(*a2 - 24);
    if (!v95)
      break;
    if (!*(_DWORD *)((char *)v29 + v96))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v96 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395B0AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  uint64_t v55;

  if (*(char *)(v55 - 209) < 0)
  {
    operator delete(*(void **)(v55 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395B0BC0(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_2395B0EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2395B0ED8(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395B0EFC(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395B0F78(*(_QWORD **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395B0F38(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395B1818(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_2395B0F78(_QWORD *a1, _QWORD *a2, int a3)
{
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  char *v10;
  char *v11;
  char v12;
  __int128 __p;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  if (a3)
  {
    if ((a1[1] - *a1) >> 32)
    {
      std::ostream::put();
      v5 = a1[1] - *a1;
      if (v5 <= 0x7FFFFFFF * (v5 / 0x7FFFFFFF))
        v6 = v5 / 0x7FFFFFFF;
      else
        v6 = v5 / 0x7FFFFFFF + 1;
      v16 = 2;
      v17 = v6;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      HIBYTE(v14) = 7;
      strcpy((char *)&__p, "content");
      std::ostream::put();
      v18 = 7;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v7 = a1[1] - *a1;
      if (v7)
      {
        v8 = 0;
        do
        {
          v14 = a1;
          v15 = 0;
          *(_QWORD *)&__p = v8;
          v8 += 0x7FFFFFFFLL;
          if (v7 >= v8)
            v7 = v8;
          *((_QWORD *)&__p + 1) = v7;
          sub_2395B13E4((uint64_t)&__p, a2);
          v7 = a1[1] - *a1;
        }
        while (v8 < v7);
      }
      return a2;
    }
    else
    {
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      return a2;
    }
  }
  else
  {
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    std::ostream::put();
    if (v11 != v10)
    {
      while (1)
      {
        v12 = *v11++;
        LOBYTE(__p) = v12;
        sub_239458500(a2, (uint64_t)&__p, 1);
        if (v11 == v10)
          break;
        std::ostream::put();
      }
    }
    std::ostream::put();
    return a2;
  }
}

void sub_2395B13C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2395B13E4(uint64_t a1, _QWORD *a2)
{
  char __p[23];
  char v6;
  int v7;
  int v8;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  std::ostream::put();
  v7 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v6 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v8 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  *(_DWORD *)__p = *(_DWORD *)(a1 + 8) - *(_DWORD *)a1;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395B17F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395B1818(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v32;

  v3 = (uint64_t)a2;
  v32 = a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  if (!a3)
    goto LABEL_19;
  v5 = std::istream::peek();
  v6 = v5;
  if ((v5 - 196) <= 2)
  {
    std::istream::get();
    v7 = sub_2396162D4(v3, v6);
    v8 = v7;
    v10 = *(char **)a1;
    v9 = *(char **)(a1 + 8);
    v11 = (unint64_t)&v9[-*(_QWORD *)a1];
    v12 = v7 - v11;
    if (v7 <= v11)
    {
      if (v7 < v11)
        *(_QWORD *)(a1 + 8) = &v10[v7];
      goto LABEL_37;
    }
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 - (uint64_t)v9 >= v12)
    {
      bzero(*(void **)(a1 + 8), v12);
      *(_QWORD *)(a1 + 8) = &v9[v12];
LABEL_37:
      std::istream::read();
      return v3;
    }
    v14 = v13 - (_QWORD)v10;
    v15 = 2 * v14;
    if (2 * v14 <= v7)
      v15 = v7;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v17 = (char *)operator new(v16);
    v18 = &v17[v11];
    v19 = &v17[v16];
    bzero(&v17[v11], v12);
    if (v9 == v10)
    {
LABEL_35:
      *(_QWORD *)a1 = v18;
      *(_QWORD *)(a1 + 8) = &v17[v8];
      *(_QWORD *)(a1 + 16) = v19;
      if (v9)
        operator delete(v9);
      goto LABEL_37;
    }
    if (v11 >= 8 && (unint64_t)(v10 - v17) >= 0x20)
    {
      if (v11 < 0x20)
      {
        v20 = 0;
        goto LABEL_27;
      }
      v20 = v11 & 0xFFFFFFFFFFFFFFE0;
      v21 = v9 - 16;
      v22 = &v17[v9 - 16 - v10];
      v23 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v22 - 1) = *((_OWORD *)v21 - 1);
        *(_OWORD *)v22 = v24;
        v22 -= 32;
        v21 -= 32;
        v23 -= 32;
      }
      while (v23);
      if (v11 == v20)
        goto LABEL_34;
      if ((v11 & 0x18) != 0)
      {
LABEL_27:
        v18 -= v11 & 0xFFFFFFFFFFFFFFF8;
        v25 = &v9[-v20 - 8];
        v26 = (char *)(v25 - v10);
        v27 = v20 - (v11 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v28 = *(_QWORD *)v25;
          v25 -= 8;
          *(_QWORD *)&v26[(_QWORD)v17] = v28;
          v26 -= 8;
          v27 += 8;
        }
        while (v27);
        v9 -= v11 & 0xFFFFFFFFFFFFFFF8;
        if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_34;
        goto LABEL_32;
      }
      v18 -= v20;
      v9 -= v20;
    }
LABEL_32:
    v29 = v18 - 1;
    do
    {
      v30 = *--v9;
      *v29-- = v30;
    }
    while (v9 != v10);
LABEL_34:
    v9 = v10;
    v18 = v17;
    goto LABEL_35;
  }
  if ((v5 - 220) <= 3 && v5 != 222)
  {
    a2 = (_QWORD *)v3;
    a3 = 1;
LABEL_19:
    sub_2395B1A64((uint64_t)&v32, a2, a3);
  }
  return v3;
}

BOOL sub_2395B1A64(uint64_t a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  size_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  _BYTE *v31;
  char *v32;
  unint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  unint64_t v36;
  __int128 v37;
  _QWORD *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  char v44;
  _BOOL8 result;
  unsigned int v46;
  int v47;
  int v48;
  char *v49;
  _QWORD *v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  size_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  __int128 *v63;
  unint64_t v64;
  __int128 v65;
  char *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  int i;
  unsigned int v73;
  char v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  size_t v88;
  _BYTE *v89;
  char *v90;
  unint64_t v91;
  _OWORD *v92;
  __int128 *v93;
  unint64_t v94;
  __int128 v95;
  _QWORD *v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char v101;
  _BYTE **v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[2];
  _QWORD v109[11];
  char v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  std::string v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v7 = v6;
      if (v6)
      {
        v8 = (char *)operator new(v6);
        v9 = &v8[v7];
        bzero(v8, v7);
        v10 = v8;
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      std::istream::read();
      v78 = v9 - v10;
      if (!v78)
      {
LABEL_130:
        if (v10)
          operator delete(v10);
        return 1;
      }
      v79 = 0;
      while (1)
      {
        v81 = *(_QWORD **)a1;
        v83 = *(_BYTE **)(*(_QWORD *)a1 + 8);
        v82 = *(_QWORD *)(*(_QWORD *)a1 + 16);
        if ((unint64_t)v83 < v82)
        {
          *v83 = v10[v79];
          v80 = (uint64_t)(v83 + 1);
          goto LABEL_136;
        }
        v84 = (_BYTE *)*v81;
        v85 = (unint64_t)&v83[-*v81];
        v86 = v85 + 1;
        if ((uint64_t)(v85 + 1) < 0)
          sub_2394189F8();
        v87 = v82 - (_QWORD)v84;
        if (2 * v87 > v86)
          v86 = 2 * v87;
        if (v87 >= 0x3FFFFFFFFFFFFFFFLL)
          v88 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v88 = v86;
        if (v88)
        {
          v89 = operator new(v88);
          v90 = &v89[v85];
          v89[v85] = v10[v79];
          v80 = (uint64_t)&v89[v85 + 1];
          if (v83 == v84)
            goto LABEL_151;
        }
        else
        {
          v89 = 0;
          v90 = &v83[-*v81];
          *(_BYTE *)v85 = v10[v79];
          v80 = v85 + 1;
          if (v83 == v84)
          {
LABEL_151:
            *v81 = v90;
            v81[1] = v80;
            v81[2] = &v89[v88];
            if (!v83)
              goto LABEL_136;
LABEL_165:
            operator delete(v83);
            goto LABEL_136;
          }
        }
        if (v85 < 8 || (unint64_t)(v84 - v89) < 0x20)
          goto LABEL_162;
        if (v85 >= 0x20)
        {
          v91 = v85 & 0xFFFFFFFFFFFFFFE0;
          v92 = &v89[v85 - 16];
          v93 = (__int128 *)(v83 - 16);
          v94 = v85 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v95 = *v93;
            *(v92 - 1) = *(v93 - 1);
            *v92 = v95;
            v92 -= 2;
            v93 -= 2;
            v94 -= 32;
          }
          while (v94);
          if (v85 == v91)
            goto LABEL_164;
          if ((v85 & 0x18) == 0)
          {
            v90 -= v91;
            v83 -= v91;
LABEL_162:
            v100 = v90 - 1;
            do
            {
              v101 = *--v83;
              *v100-- = v101;
            }
            while (v83 != v84);
            goto LABEL_164;
          }
        }
        else
        {
          v91 = 0;
        }
        v90 -= v85 & 0xFFFFFFFFFFFFFFF8;
        v96 = &v89[&v83[-v91] - v84 - 8];
        v97 = (uint64_t *)&v83[-v91 - 8];
        v98 = v91 - (v85 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v99 = *v97--;
          *v96-- = v99;
          v98 += 8;
        }
        while (v98);
        v83 -= v85 & 0xFFFFFFFFFFFFFFF8;
        if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_162;
LABEL_164:
        v83 = (_BYTE *)*v81;
        *v81 = v89;
        v81[1] = v80;
        v81[2] = &v89[v88];
        if (v83)
          goto LABEL_165;
LABEL_136:
        v81[1] = v80;
        if (++v79 == v78)
          goto LABEL_130;
      }
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v19 = sub_2396162D4((uint64_t)a2, v5);
      if (!v19)
        return 1;
      v20 = 0;
      v21 = v19;
      while (1)
      {
        LOBYTE(v108[0]) = 0;
        sub_239598A58(v108, a2, 1);
        v23 = *(_QWORD **)a1;
        v25 = *(_BYTE **)(*(_QWORD *)a1 + 8);
        v24 = *(_QWORD *)(*(_QWORD *)a1 + 16);
        if ((unint64_t)v25 < v24)
        {
          *v25 = v108[0];
          v22 = (uint64_t)(v25 + 1);
          goto LABEL_24;
        }
        v26 = (_BYTE *)*v23;
        v27 = (unint64_t)&v25[-*v23];
        v28 = v27 + 1;
        if ((uint64_t)(v27 + 1) < 0)
          sub_2394189F8();
        v29 = v24 - (_QWORD)v26;
        if (2 * v29 > v28)
          v28 = 2 * v29;
        if (v29 >= 0x3FFFFFFFFFFFFFFFLL)
          v30 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = operator new(v30);
          v32 = &v31[v27];
          v31[v27] = v108[0];
          v22 = (uint64_t)&v31[v27 + 1];
          if (v25 == v26)
            goto LABEL_39;
        }
        else
        {
          v31 = 0;
          v32 = &v25[-*v23];
          *(_BYTE *)v27 = v108[0];
          v22 = v27 + 1;
          if (v25 == v26)
          {
LABEL_39:
            *v23 = v32;
            v23[1] = v22;
            v23[2] = &v31[v30];
            if (!v25)
              goto LABEL_24;
LABEL_53:
            operator delete(v25);
            goto LABEL_24;
          }
        }
        if (v27 < 8 || (unint64_t)(v26 - v31) < 0x20)
          goto LABEL_50;
        if (v27 >= 0x20)
        {
          v33 = v27 & 0xFFFFFFFFFFFFFFE0;
          v34 = &v31[v27 - 16];
          v35 = (__int128 *)(v25 - 16);
          v36 = v27 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v37 = *v35;
            *(v34 - 1) = *(v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 2;
            v36 -= 32;
          }
          while (v36);
          if (v27 == v33)
            goto LABEL_52;
          if ((v27 & 0x18) == 0)
          {
            v32 -= v33;
            v25 -= v33;
LABEL_50:
            v42 = v32 - 1;
            do
            {
              v43 = *--v25;
              *v42-- = v43;
            }
            while (v25 != v26);
            goto LABEL_52;
          }
        }
        else
        {
          v33 = 0;
        }
        v32 -= v27 & 0xFFFFFFFFFFFFFFF8;
        v38 = &v31[&v25[-v33] - v26 - 8];
        v39 = (uint64_t *)&v25[-v33 - 8];
        v40 = v33 - (v27 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v41 = *v39--;
          *v38-- = v41;
          v40 += 8;
        }
        while (v40);
        v25 -= v27 & 0xFFFFFFFFFFFFFFF8;
        if (v27 != (v27 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_50;
LABEL_52:
        v25 = (_BYTE *)*v23;
        *v23 = v31;
        v23[1] = v22;
        v23[2] = &v31[v30];
        if (v25)
          goto LABEL_53;
LABEL_24:
        v23[1] = v22;
        if (++v20 == v21)
          return 1;
      }
    }
    if (v5 == 223)
    {
      v113 = 0;
      memset(&v114, 0, sizeof(v114));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  v11 = a2 + 4;
  v12 = MEMORY[0x24BDAC740];
  while (1)
  {
    v13 = std::istream::peek();
    if (v13 <= 0x7F)
      break;
    v14 = __maskrune(v13, 0x4000uLL);
    v15 = *(_QWORD *)(*a2 - 24);
    if (!v14)
      goto LABEL_12;
LABEL_10:
    if (!*(_DWORD *)((char *)v11 + v15))
      std::istream::get();
  }
  v15 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v12 + 4 * v13 + 60) & 0x4000) != 0)
    goto LABEL_10;
LABEL_12:
  if ((*((_BYTE *)a2 + v15 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v16 = std::istream::peek();
    if (v16 > 0x7F)
    {
      v17 = __maskrune(v16, 0x4000uLL);
      v18 = *(_QWORD *)(*a2 - 24);
      if (!v17)
        break;
      goto LABEL_18;
    }
    v18 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v12 + 4 * v16 + 60) & 0x4000) != 0)
    {
LABEL_18:
      if (!*(_DWORD *)((char *)v11 + v18))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v18 + 32) & 2) != 0)
    return 0;
  v44 = 0;
  v104 = *MEMORY[0x24BEDB7F0];
  v106 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v107 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v105 = MEMORY[0x24BEDB848] + 16;
LABEL_57:
  if ((*((_BYTE *)v11 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v44 & 1) == 0)
  {
    while (1)
    {
      v46 = std::istream::peek();
      if (v46 <= 0x7F)
      {
        v48 = *(_DWORD *)((char *)v11 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v12 + 4 * v46 + 60) & 0x4000) == 0)
        {
LABEL_65:
          if ((v48 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)v108);
          v112 = v109;
          if (!sub_239596128(a2))
          {
LABEL_112:
            v74 = 0;
            v44 = 0;
            goto LABEL_115;
          }
          v49 = (char *)v109 + *(_QWORD *)(v109[0] - 24);
          if ((v49[32] & 5) != 0)
            goto LABEL_101;
          (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v49 + 5)
                                                                                              + 32))(&v114, *((_QWORD *)v49 + 5), 0, 1, 16);
          if (v115 < 1)
            goto LABEL_101;
          v114.__r_.__value_.__s.__data_[0] = 0;
          sub_23955D338(v108, &v114);
          v50 = *(_QWORD **)a1;
          v52 = *(_BYTE **)(*(_QWORD *)a1 + 8);
          v51 = *(_QWORD *)(*(_QWORD *)a1 + 16);
          if ((unint64_t)v52 < v51)
          {
            *v52 = v114.__r_.__value_.__s.__data_[0];
            v53 = (uint64_t)(v52 + 1);
            goto LABEL_100;
          }
          v102 = *(_BYTE ***)a1;
          v54 = (_BYTE *)*v50;
          v103 = v52 - v54;
          v55 = v52 - v54 + 1;
          if (v55 < 0)
            sub_2394189F8();
          v56 = v51 - (_QWORD)v54;
          if (2 * v56 > v55)
            v55 = 2 * v56;
          if (v56 >= 0x3FFFFFFFFFFFFFFFLL)
            v57 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            v58 = v57;
            v59 = (char *)operator new(v57);
            v57 = v58;
          }
          else
          {
            v59 = 0;
          }
          v60 = &v59[v103];
          v59[v103] = v114.__r_.__value_.__s.__data_[0];
          v53 = (uint64_t)&v59[v103 + 1];
          if (v52 == v54)
          {
            v50 = v102;
            goto LABEL_98;
          }
          if (v103 < 8 || (unint64_t)(v54 - v59) < 0x20)
            goto LABEL_95;
          if (v103 >= 0x20)
          {
            v61 = v103 & 0xFFFFFFFFFFFFFFE0;
            v62 = &v59[v103 - 16];
            v63 = (__int128 *)(v52 - 16);
            v64 = v103 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v65 = *v63;
              *((_OWORD *)v62 - 1) = *(v63 - 1);
              *(_OWORD *)v62 = v65;
              v62 -= 32;
              v63 -= 2;
              v64 -= 32;
            }
            while (v64);
            if (v103 == v61)
              goto LABEL_97;
            if ((v103 & 0x18) != 0)
              goto LABEL_90;
            v60 -= v61;
            v52 -= v61;
LABEL_95:
            v70 = v60 - 1;
            do
            {
              v71 = *--v52;
              *v70-- = v71;
            }
            while (v52 != v54);
            goto LABEL_97;
          }
          v61 = 0;
LABEL_90:
          v60 -= v103 & 0xFFFFFFFFFFFFFFF8;
          v66 = &v59[&v52[-v61] - v54 - 8];
          v67 = (uint64_t *)&v52[-v61 - 8];
          v68 = v61 - (v103 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v69 = *v67--;
            *(_QWORD *)v66 = v69;
            v66 -= 8;
            v68 += 8;
          }
          while (v68);
          v52 -= v103 & 0xFFFFFFFFFFFFFFF8;
          if (v103 != (v103 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_95;
LABEL_97:
          v50 = v102;
          v52 = *v102;
          v60 = v59;
LABEL_98:
          *v50 = v60;
          v50[1] = v53;
          v50[2] = &v59[v57];
          if (v52)
            operator delete(v52);
LABEL_100:
          v50[1] = v53;
LABEL_101:
          for (i = std::istream::peek(); ; i = std::istream::peek())
          {
            v73 = i << 24;
            if (i << 24 == 738197504)
              goto LABEL_111;
            if (v73 == 1560281088)
              break;
            if (v73 <= 0x7F000000)
            {
              if ((*(_DWORD *)(v12 + 4 * (char)i + 60) & 0x4000) == 0)
                goto LABEL_110;
            }
            else if (!__maskrune((char)i, 0x4000uLL))
            {
              goto LABEL_110;
            }
            if ((*((_BYTE *)v11 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
            {
LABEL_110:
              if (v73 != 738197504)
                goto LABEL_112;
LABEL_111:
              std::istream::get();
              v44 = 0;
              goto LABEL_114;
            }
            std::istream::get();
          }
          v44 = 1;
LABEL_114:
          v74 = 1;
LABEL_115:
          v108[0] = v104;
          *(_QWORD *)((char *)v108 + *(_QWORD *)(v104 - 24)) = v107;
          v109[0] = v106;
          v109[1] = v105;
          if (v110 < 0)
            operator delete((void *)v109[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v111);
          result = 0;
          if ((v74 & 1) == 0)
            return result;
          goto LABEL_57;
        }
      }
      else
      {
        v47 = __maskrune(v46, 0x4000uLL);
        v48 = *(_DWORD *)((char *)v11 + *(_QWORD *)(*a2 - 24));
        if (!v47)
          goto LABEL_65;
      }
      if (!v48)
        std::istream::get();
    }
  }
  while (1)
  {
    v75 = std::istream::peek();
    v76 = v75 <= 0x7F ? *(_DWORD *)(v12 + 4 * v75 + 60) & 0x4000 : __maskrune(v75, 0x4000uLL);
    v77 = *(_QWORD *)(*a2 - 24);
    if (!v76)
      break;
    if (!*(_DWORD *)((char *)v11 + v77))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v77 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395B27E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  uint64_t v55;

  if (*(char *)(v55 - 209) < 0)
  {
    operator delete(*(void **)(v55 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395B28B4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_2395B2D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395B2D40(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[51];
  _QWORD v9[20];

  v9[19] = *MEMORY[0x24BDAC8D0];
  sub_23955CF88(&v7);
  if (v8[15])
  {
    v5 = sub_2395B2E60(a1, &v7, a3);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&v8[-1] + *(_QWORD *)(v7 - 24)), *(_DWORD *)((char *)&v8[3] + *(_QWORD *)(v7 - 24)) | 4);
  }
  else
  {
    v5 = 0;
  }
  v7 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)&v8[-1] + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x23B83DC8C](v8);
  std::ostream::~ostream();
  MEMORY[0x23B83E250](v9);
  return v5;
}

void sub_2395B2E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23955C978(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2395B2E60(uint64_t *a1, _QWORD *a2, unsigned int a3)
{
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  BOOL v9;
  char v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *p_p;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  char v69;
  char v70;
  int v71;
  void *__p;
  uint64_t v73;
  char v74;

  v6 = *((_BYTE *)a1 + 48) != 0;
  v7 = *((_BYTE *)a1 + 80) != 0;
  v8 = *((_BYTE *)a1 + 144) != 0;
  v9 = (a3 & 8) == 0 || *((_BYTE *)a1 + 112) == 0;
  v10 = v9;
  if (*((_BYTE *)a1 + 48) && 0xAAAAAAAAAAAAAAABLL * (a1[4] - a1[3]) != 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2)
    || *((_BYTE *)a1 + 80) && a1[8] - a1[7] != a1[1] - *a1
    || *((_BYTE *)a1 + 112)
    && 0xAAAAAAAAAAAAAAABLL * ((a1[12] - a1[11]) >> 3) != 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2)
    || *((_BYTE *)a1 + 144) && 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2) != (a1[16] - a1[15]) >> 2)
  {
    return 0;
  }
  v74 = 5;
  strcpy((char *)&__p, "float");
  sub_239458500(a2, (uint64_t)"ply\n", 4);
  if ((a3 & 0x10) != 0)
    v11 = "format binary_little_endian 1.0\n";
  else
    v11 = "format ascii 1.0\n";
  if ((a3 & 0x10) != 0)
    v12 = 32;
  else
    v12 = 17;
  sub_239458500(a2, (uint64_t)v11, v12);
  sub_239458500(a2, (uint64_t)"comment Apple Inc. \n", 20);
  sub_239458500(a2, (uint64_t)"element vertex ", 15);
  v13 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v13, (uint64_t)"\n", 1);
  v14 = sub_239458500(a2, (uint64_t)"property ", 9);
  if (v74 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v74 >= 0)
    v16 = v74;
  else
    v16 = v73;
  v17 = sub_239458500(v14, (uint64_t)p_p, v16);
  sub_239458500(v17, (uint64_t)" x\n", 3);
  v18 = sub_239458500(a2, (uint64_t)"property ", 9);
  if (v74 >= 0)
    v19 = &__p;
  else
    v19 = __p;
  if (v74 >= 0)
    v20 = v74;
  else
    v20 = v73;
  v21 = sub_239458500(v18, (uint64_t)v19, v20);
  sub_239458500(v21, (uint64_t)" y\n", 3);
  v22 = sub_239458500(a2, (uint64_t)"property ", 9);
  if (v74 >= 0)
    v23 = &__p;
  else
    v23 = __p;
  if (v74 >= 0)
    v24 = v74;
  else
    v24 = v73;
  v25 = sub_239458500(v22, (uint64_t)v23, v24);
  sub_239458500(v25, (uint64_t)" z\n", 3);
  v71 = a3 & v7;
  if ((a3 & v7) != 0)
  {
    v26 = sub_239458500(a2, (uint64_t)"property ", 9);
    if (v74 >= 0)
      v27 = &__p;
    else
      v27 = __p;
    if (v74 >= 0)
      v28 = v74;
    else
      v28 = v73;
    v29 = sub_239458500(v26, (uint64_t)v27, v28);
    sub_239458500(v29, (uint64_t)" nx\n", 4);
    v30 = sub_239458500(a2, (uint64_t)"property ", 9);
    if (v74 >= 0)
      v31 = &__p;
    else
      v31 = __p;
    if (v74 >= 0)
      v32 = v74;
    else
      v32 = v73;
    v33 = sub_239458500(v30, (uint64_t)v31, v32);
    sub_239458500(v33, (uint64_t)" ny\n", 4);
    v34 = sub_239458500(a2, (uint64_t)"property ", 9);
    if (v74 >= 0)
      v35 = &__p;
    else
      v35 = __p;
    if (v74 >= 0)
      v36 = v74;
    else
      v36 = v73;
    v37 = sub_239458500(v34, (uint64_t)v35, v36);
    sub_239458500(v37, (uint64_t)" nz\n", 4);
  }
  v38 = v6 & (a3 >> 1);
  if (v38)
  {
    sub_239458500(a2, (uint64_t)"property uchar red\n", 19);
    sub_239458500(a2, (uint64_t)"property uchar green\n", 21);
    sub_239458500(a2, (uint64_t)"property uchar blue\n", 20);
  }
  v39 = v8 & (a3 >> 2);
  if (v39)
    sub_239458500(a2, (uint64_t)"property float cost\n", 20);
  if ((v10 & 1) == 0)
  {
    sub_239458500(a2, (uint64_t)"element vertex_visibilities ", 28);
    if (!*((_BYTE *)a1 + 112))
      sub_2394875CC();
    v40 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v40, (uint64_t)"\n", 1);
    sub_239458500(a2, (uint64_t)"property list uchar uint vertex_index\n", 38);
  }
  sub_239458500(a2, (uint64_t)"end_header\n", 11);
  v70 = v10;
  if (a1[1] != *a1)
  {
    v69 = a3;
    if ((a3 & 0x10) != 0)
    {
      v62 = 0;
      v63 = 0;
      v64 = 8;
      v65 = 2;
      do
      {
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        if (v71)
        {
          if (!*((_BYTE *)a1 + 80))
            sub_2394875CC();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
        }
        if (v38)
        {
          if (!*((_BYTE *)a1 + 48))
            sub_2394875CC();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
        }
        if (v39)
        {
          if (!*((_BYTE *)a1 + 144))
            sub_2394875CC();
          std::ostream::write();
        }
        ++v63;
        v54 = *a1;
        v53 = a1[1];
        v64 += 12;
        v65 += 3;
        v62 += 4;
      }
      while (v63 < 0xAAAAAAAAAAAAAAABLL * ((v53 - *a1) >> 2));
    }
    else
    {
      v41 = 0;
      v42 = 0;
      do
      {
        v43 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v43, (uint64_t)" ", 1);
        v44 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v44, (uint64_t)" ", 1);
        v45 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v45, (uint64_t)" ", 1);
        if (v71)
        {
          if (!*((_BYTE *)a1 + 80)
            || (v46 = (_QWORD *)std::ostream::operator<<(), sub_239458500(v46, (uint64_t)" ", 1), !*((_BYTE *)a1 + 80))
            || (v47 = (_QWORD *)std::ostream::operator<<(), sub_239458500(v47, (uint64_t)" ", 1), !*((_BYTE *)a1 + 80)))
          {
LABEL_119:
            sub_2394875CC();
          }
          v48 = (_QWORD *)std::ostream::operator<<();
          sub_239458500(v48, (uint64_t)" ", 1);
        }
        if (v38)
        {
          if (!*((_BYTE *)a1 + 48))
            goto LABEL_119;
          v49 = (_QWORD *)std::ostream::operator<<();
          sub_239458500(v49, (uint64_t)" ", 1);
          if (!*((_BYTE *)a1 + 48))
            goto LABEL_119;
          v50 = (_QWORD *)std::ostream::operator<<();
          sub_239458500(v50, (uint64_t)" ", 1);
          if (!*((_BYTE *)a1 + 48))
            goto LABEL_119;
          v51 = (_QWORD *)std::ostream::operator<<();
          sub_239458500(v51, (uint64_t)" ", 1);
        }
        if (v39)
        {
          if (!*((_BYTE *)a1 + 144))
            goto LABEL_119;
          v52 = (_QWORD *)std::ostream::operator<<();
          sub_239458500(v52, (uint64_t)" ", 1);
        }
        sub_239458500(a2, (uint64_t)"\n", 1);
        ++v42;
        v54 = *a1;
        v53 = a1[1];
        v41 += 3;
      }
      while (v42 < 0xAAAAAAAAAAAAAAABLL * ((v53 - *a1) >> 2));
    }
    v9 = v53 == v54;
    v55 = v70;
    if (v9)
      v55 = 1;
    if ((v55 & 1) == 0)
    {
      if ((v69 & 0x10) != 0)
      {
        v66 = 0;
        while (*((_BYTE *)a1 + 112))
        {
          v67 = (_QWORD *)(a1[11] + 24 * v66);
          std::ostream::write();
          if (v67[1] != *v67)
          {
            v68 = 0;
            do
            {
              std::ostream::write();
              ++v68;
            }
            while (v68 < (uint64_t)(v67[1] - *v67) >> 2);
          }
          if (++v66 >= 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2))
            goto LABEL_97;
        }
      }
      else
      {
        v57 = 0;
        while (*((_BYTE *)a1 + 112))
        {
          v58 = (_QWORD *)(a1[11] + 24 * v57);
          v59 = (_QWORD *)std::ostream::operator<<();
          sub_239458500(v59, (uint64_t)" ", 1);
          if (v58[1] != *v58)
          {
            v60 = 0;
            do
            {
              v61 = (_QWORD *)std::ostream::operator<<();
              sub_239458500(v61, (uint64_t)" ", 1);
              ++v60;
            }
            while (v60 < (uint64_t)(v58[1] - *v58) >> 2);
          }
          sub_239458500(a2, (uint64_t)"\n", 1);
          if (++v57 >= 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2))
            goto LABEL_97;
        }
      }
      sub_2394875CC();
    }
  }
LABEL_97:
  if (v74 < 0)
    operator delete(__p);
  return 1;
}

void sub_2395B37B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395B3804(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v7[2];
  _QWORD v8[51];
  _QWORD v9[20];

  v9[19] = *MEMORY[0x24BDAC8D0];
  sub_23955D09C(v7);
  if (v8[15])
  {
    v5 = sub_2395B3924(v7, a2, a3);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v7 + *(_QWORD *)(v7[0] - 24)), *(_DWORD *)((char *)&v8[2] + *(_QWORD *)(v7[0] - 24)) | 4);
  }
  else
  {
    v5 = 0;
  }
  v7[0] = *MEMORY[0x24BEDB7E0];
  *(uint64_t *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x23B83DC8C](v8);
  std::istream::~istream();
  MEMORY[0x23B83E250](v9);
  return v5;
}

void sub_2395B3910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23955CB90((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2395B3924(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  const std::ios_base *v6;
  int v7;
  const std::locale::facet *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  _BYTE *v11;
  _WORD *v13;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v24;
  __int128 v25;
  unsigned __int8 *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  std::locale *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  void **v43;
  unsigned __int8 *v44;
  uint64_t v45;
  void **v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  std::locale *v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  std::locale *v56;
  unsigned __int8 *v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  int v72;
  int v73;
  unint64_t v75;
  std::locale::__imp *v76;
  std::locale::__imp *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int *v81;
  char *v82;
  int v83;
  int v84;
  BOOL v86;
  void **v87;
  void **v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  char **v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  unsigned __int8 *v97;
  int v98;
  int v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v107;
  unint64_t v108;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float v122;
  int8x8_t v123;
  int16x4_t v124;
  float v125;
  size_t v126;
  char *v127;
  uint64_t v128;
  void *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char v147;
  std::locale::__imp *locale;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  void **v158;
  void *v159;
  void **v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  unsigned int v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  std::locale::__imp *v169;
  std::locale::__imp *v170;
  std::locale::__imp *v171;
  _QWORD *v172;
  int v173;
  char *v174;
  unint64_t v175;
  uint64_t v176;
  int v177[2];
  unsigned __int8 *v178;
  int v179;
  char *v180;
  int v181;
  unint64_t v182;
  _QWORD *v183;
  _BYTE *v184;
  uint64_t v185;
  int v186;
  unint64_t v187;
  void *v189[2];
  uint64_t v190;
  void *v191[2];
  uint64_t v192;
  void *v193[3];
  __int128 v194;
  __int128 v195;
  void *v196;
  unint64_t v197;
  uint64_t v198;
  unsigned __int8 v199;
  void *v200;
  char *v201;
  unint64_t v202;
  void *v203[2];
  void *v204[2];
  int v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  void **v209;
  std::locale __s2[3];
  uint64_t v211;
  void *v212[2];
  char v213;
  int v214;
  void *v215[2];
  char v216;
  void *__p;
  void *v218;
  char v219;
  char v220;
  int v221;
  void *v222[2];
  char v223;
  int v224;
  void *v225[2];
  char v226;
  int v227;
  void *v228[2];
  char v229;
  int v230;
  void *v231[2];
  char v232;
  int v233;
  void *v234[2];
  char v235;
  int v236;
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  __s2[0].__locale_ = (std::locale::__imp *)1953720684;
  HIBYTE(__s2[2].__locale_) = 4;
  LODWORD(v211) = 0;
  v212[0] = (void *)0x74616F6C66;
  v213 = 5;
  v214 = 1;
  v215[0] = (void *)0x656C62756F64;
  v216 = 6;
  LODWORD(__p) = 2;
  v218 = (void *)1918986339;
  v220 = 4;
  v221 = 3;
  v222[0] = (void *)0x7261686375;
  v223 = 5;
  v224 = 4;
  v225[0] = (void *)7630441;
  v226 = 3;
  v227 = 5;
  v228[0] = (void *)1953393013;
  v229 = 4;
  v230 = 6;
  v231[0] = (void *)0x74726F6873;
  v232 = 5;
  v233 = 7;
  v234[0] = (void *)0x74726F687375;
  v235 = 6;
  v236 = 8;
  *(_OWORD *)v203 = 0u;
  *(_OWORD *)v204 = 0u;
  v205 = 1065353216;
  sub_2395BB350((uint64_t)v203, (uint64_t)__s2, (uint64_t)__s2);
  sub_2395BB350((uint64_t)v203, (uint64_t)v212, (uint64_t)v212);
  sub_2395BB350((uint64_t)v203, (uint64_t)v215, (uint64_t)v215);
  sub_2395BB350((uint64_t)v203, (uint64_t)&v218, (uint64_t)&v218);
  sub_2395BB350((uint64_t)v203, (uint64_t)v222, (uint64_t)v222);
  sub_2395BB350((uint64_t)v203, (uint64_t)v225, (uint64_t)v225);
  sub_2395BB350((uint64_t)v203, (uint64_t)v228, (uint64_t)v228);
  sub_2395BB350((uint64_t)v203, (uint64_t)v231, (uint64_t)v231);
  sub_2395BB350((uint64_t)v203, (uint64_t)v234, (uint64_t)v234);
  if (v235 < 0)
  {
    operator delete(v234[0]);
    if ((v232 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v229 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_533;
    }
  }
  else if ((v232 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v231[0]);
  if ((v229 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v226 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_534;
  }
LABEL_533:
  operator delete(v228[0]);
  if ((v226 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v223 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_535;
  }
LABEL_534:
  operator delete(v225[0]);
  if ((v223 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v220 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_536;
  }
LABEL_535:
  operator delete(v222[0]);
  if ((v220 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v216 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_537;
  }
LABEL_536:
  operator delete(v218);
  if ((v216 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v213 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_538:
    operator delete(v212[0]);
    if ((SHIBYTE(__s2[2].__locale_) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_539;
  }
LABEL_537:
  operator delete(v215[0]);
  if (v213 < 0)
    goto LABEL_538;
LABEL_9:
  if ((SHIBYTE(__s2[2].__locale_) & 0x80000000) == 0)
    goto LABEL_10;
LABEL_539:
  operator delete(__s2[0].__locale_);
LABEL_10:
  v5 = *a1;
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v196 = 0;
  v197 = 0;
  v198 = 0;
  v6 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v5 - 24));
  if ((v6->__rdstate_ & 2) == 0)
  {
    v170 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 64);
    v171 = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
    v169 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 72);
    v172 = (_QWORD *)(a2 + 120);
    v166 = (_QWORD *)(a2 + 88);
    v167 = (_QWORD *)(a2 + 56);
    v183 = (_QWORD *)(a2 + 24);
    v164 = a3;
    v163 = a3 + 63;
    v168 = MEMORY[0x24BEDB848] + 16;
    v184 = (_BYTE *)a2;
    v165 = a3;
    do
    {
      std::ios_base::getloc(v6);
      v8 = std::locale::use_facet(__s2, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
      std::locale::~locale(__s2);
      v10 = sub_23955D1B4(a1, (uint64_t)&v196, v9);
      if ((*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 5) != 0)
        break;
      if (SHIBYTE(v198) < 0)
      {
        if (v197 <= 2)
          goto LABEL_36;
        v11 = v196;
      }
      else
      {
        if (HIBYTE(v198) <= 2u)
          goto LABEL_36;
        v11 = &v196;
      }
      if (*(_WORD *)v11 == 27760 && v11[2] == 121)
        goto LABEL_16;
      if (v198 < 0)
      {
        if (v197 <= 9)
          goto LABEL_36;
        v13 = v196;
      }
      else
      {
        if (HIBYTE(v198) <= 9u)
          goto LABEL_36;
        v13 = &v196;
      }
      if (*(_QWORD *)v13 != 0x646165685F646E65 || v13[4] != 29285)
      {
LABEL_36:
        sub_2394988CC((uint64_t)__s2);
        if (v198 >= 0)
          v15 = &v196;
        else
          v15 = v196;
        if (v198 >= 0)
          v16 = HIBYTE(v198);
        else
          v16 = v197;
        sub_239458500(&__s2[2].__locale_, (uint64_t)v15, v16);
        v206 = 0;
        v207 = 0;
        v208 = 0;
        sub_23955CC24((uint64_t *)__s2, (uint64_t)&v206);
        if ((SHIBYTE(v208) & 0x80000000) == 0)
        {
          if (HIBYTE(v208) != 6)
          {
            if (HIBYTE(v208) != 7)
            {
              if (HIBYTE(v208) != 8)
              {
                v7 = 0;
                goto LABEL_13;
              }
              v17 = &v206;
              goto LABEL_67;
            }
            if ((_DWORD)v206 != 1835888483 || *(_DWORD *)((char *)&v206 + 3) != 1953391981)
            {
              if ((_DWORD)v206 != 1835363429 || *(_DWORD *)((char *)&v206 + 3) != 1953391981)
                goto LABEL_492;
              goto LABEL_82;
            }
LABEL_93:
            v7 = 2;
            if ((SHIBYTE(v208) & 0x80000000) == 0)
              goto LABEL_13;
            goto LABEL_493;
          }
          if ((_DWORD)v206 != 1836216166 || WORD2(v206) != 29793)
            goto LABEL_492;
LABEL_90:
          sub_23955CC24((uint64_t *)__s2, (uint64_t)&v206);
          if (SHIBYTE(v208) < 0)
          {
            if (v207 == 5)
            {
              v27 = (unsigned __int8 *)v206;
LABEL_234:
              v83 = *(_DWORD *)v27;
              v84 = v27[4];
              v86 = v83 == 1768125281 && v84 == 105;
              v7 = 0;
              v199 = !v86;
              if (SHIBYTE(v208) < 0)
                goto LABEL_493;
              goto LABEL_13;
            }
          }
          else if (SHIBYTE(v208) == 5)
          {
            v27 = (unsigned __int8 *)&v206;
            goto LABEL_234;
          }
          v7 = 0;
          v199 = 1;
          if ((SHIBYTE(v208) & 0x80000000) == 0)
            goto LABEL_13;
          goto LABEL_493;
        }
        v18 = v207;
        if (v207 == 6)
        {
          if (*(_DWORD *)v206 == 1836216166 && *((_WORD *)v206 + 2) == 29793)
            goto LABEL_90;
          v18 = v207;
        }
        else if (v207 == 7 && *(_DWORD *)v206 == 1835888483 && *(_DWORD *)((char *)v206 + 3) == 1953391981)
        {
          goto LABEL_93;
        }
        if (v18 == 7)
        {
          if (*(_DWORD *)v206 == 1835363429 && *(_DWORD *)((char *)v206 + 3) == 1953391981)
          {
LABEL_82:
            v194 = 0u;
            v195 = 0u;
            *(_OWORD *)&v193[1] = 0u;
            sub_23955CC24((uint64_t *)__s2, (uint64_t)&v193[1]);
            MEMORY[0x23B83DD1C](__s2, v193);
            v24 = v201;
            if ((unint64_t)v201 >= v202)
            {
              v201 = sub_2395BB7C0(&v200, (uint64_t)v193);
              v87 = (void **)*((_QWORD *)&v194 + 1);
              if (!*((_QWORD *)&v194 + 1))
                goto LABEL_268;
            }
            else
            {
              *(void **)v201 = v193[0];
              if (SBYTE7(v194) < 0)
              {
                sub_23941A7F8(v24 + 8, v193[1], (unint64_t)v193[2]);
              }
              else
              {
                v25 = *(_OWORD *)&v193[1];
                *((_QWORD *)v24 + 3) = v194;
                *(_OWORD *)(v24 + 8) = v25;
              }
              *((_QWORD *)v24 + 4) = 0;
              *((_QWORD *)v24 + 5) = 0;
              *((_QWORD *)v24 + 6) = 0;
              sub_2395BBA78(v24 + 32, *((uint64_t *)&v194 + 1), v195, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v195 - *((_QWORD *)&v194 + 1)) >> 3));
              v201 = v24 + 56;
              v87 = (void **)*((_QWORD *)&v194 + 1);
              if (!*((_QWORD *)&v194 + 1))
              {
LABEL_268:
                if ((SBYTE7(v194) & 0x80000000) == 0)
                  goto LABEL_492;
                goto LABEL_269;
              }
            }
            v88 = (void **)v195;
            if ((void **)v195 == v87)
            {
              *(_QWORD *)&v195 = v87;
              operator delete(v87);
              if ((SBYTE7(v194) & 0x80000000) == 0)
                goto LABEL_492;
              goto LABEL_269;
            }
            do
            {
              if (*((char *)v88 - 17) < 0)
                operator delete(*(v88 - 5));
              v88 -= 5;
            }
            while (v88 != v87);
            *(_QWORD *)&v195 = v87;
            operator delete(*((void **)&v194 + 1));
            if (SBYTE7(v194) < 0)
LABEL_269:
              operator delete(v193[1]);
LABEL_492:
            v7 = 0;
            if ((SHIBYTE(v208) & 0x80000000) == 0)
              goto LABEL_13;
            goto LABEL_493;
          }
          v18 = v207;
        }
        if (v18 != 8)
          goto LABEL_492;
        v17 = v206;
LABEL_67:
        if (*v17 != 0x79747265706F7270)
          goto LABEL_492;
        if (v201 == v200)
        {
          v7 = 1;
          if ((SHIBYTE(v208) & 0x80000000) == 0)
            goto LABEL_13;
          goto LABEL_493;
        }
        sub_23955CC24((uint64_t *)__s2, (uint64_t)&v206);
        memset(v193, 0, sizeof(v193));
        v191[0] = &v206;
        LODWORD(v194) = *((_DWORD *)sub_2395BBD08((uint64_t)v203, (uint64_t)&v206, (uint64_t)&unk_239EC6E98, (__int128 **)v191)+ 10);
        if (SHIBYTE(v208) < 0)
        {
          if (v207 == 4 && *(_DWORD *)v206 == 1953720684)
            goto LABEL_486;
        }
        else if (SHIBYTE(v208) == 4 && (_DWORD)v206 == 1953720684)
        {
LABEL_486:
          v191[0] = 0;
          v191[1] = 0;
          v192 = 0;
          v189[0] = 0;
          v189[1] = 0;
          v190 = 0;
          v149 = sub_23955CC24((uint64_t *)__s2, (uint64_t)v191);
          sub_23955CC24(v149, (uint64_t)v189);
          v209 = v191;
          DWORD1(v194) = *((_DWORD *)sub_2395BBD08((uint64_t)v203, (uint64_t)v191, (uint64_t)&unk_239EC6E98, (__int128 **)&v209)+ 10);
          v209 = v189;
          DWORD2(v194) = *((_DWORD *)sub_2395BBD08((uint64_t)v203, (uint64_t)v189, (uint64_t)&unk_239EC6E98, (__int128 **)&v209)+ 10);
          sub_23955CC24((uint64_t *)__s2, (uint64_t)v193);
          if (SHIBYTE(v190) < 0)
            operator delete(v189[0]);
          if (SHIBYTE(v192) < 0)
            operator delete(v191[0]);
LABEL_259:
          v89 = 0x6DB6DB6DB6DB6DB7 * ((v201 - (_BYTE *)v200) >> 3) - 1;
          v90 = (char *)v200 + 56 * v89;
          v92 = *((_QWORD *)v90 + 5);
          v91 = *((_QWORD *)v90 + 6);
          v93 = (char **)(v90 + 40);
          if (v92 >= v91)
          {
            *v93 = sub_2395BC178((char **)v200 + 7 * v89 + 4, (uint64_t)v193);
            if ((SHIBYTE(v193[2]) & 0x80000000) == 0)
              goto LABEL_492;
          }
          else
          {
            if (SHIBYTE(v193[2]) < 0)
            {
              sub_23941A7F8((_BYTE *)v92, v193[0], (unint64_t)v193[1]);
            }
            else
            {
              v94 = *(_OWORD *)v193;
              *(void **)(v92 + 16) = v193[2];
              *(_OWORD *)v92 = v94;
            }
            v150 = v194;
            *(_DWORD *)(v92 + 32) = DWORD2(v194);
            *(_QWORD *)(v92 + 24) = v150;
            *v93 = (char *)(v92 + 40);
            *v93 = (char *)(v92 + 40);
            if ((SHIBYTE(v193[2]) & 0x80000000) == 0)
              goto LABEL_492;
          }
          operator delete(v193[0]);
          v7 = 0;
          if (SHIBYTE(v208) < 0)
LABEL_493:
            operator delete(v206);
LABEL_13:
          __s2[0].__locale_ = v171;
          *(std::locale::__imp **)((char *)&__s2[0].__locale_ + *((_QWORD *)v171 - 3)) = v170;
          __s2[2].__locale_ = v169;
          v211 = v168;
          if (v219 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](v222);
          if ((v7 | 2) != 2)
            goto LABEL_506;
          goto LABEL_16;
        }
        sub_23955CC24((uint64_t *)__s2, (uint64_t)v193);
        goto LABEL_259;
      }
      v28 = (char *)v200;
      if (v201 == v200)
      {
        memset(__s2, 0, sizeof(__s2));
        goto LABEL_484;
      }
      v162 = v201;
      v29 = 0;
      v179 = *(unsigned __int8 *)(a2 + 80);
      v181 = *(unsigned __int8 *)(a2 + 144);
      v186 = *(unsigned __int8 *)(a2 + 48);
      v173 = *(unsigned __int8 *)(a2 + 112);
      v174 = (char *)v200;
      v175 = (v201 - (_BYTE *)v200) / 56;
      do
      {
        *(_QWORD *)v177 = v29;
        v30 = &v28[56 * v29];
        v33 = *((_QWORD *)v30 + 4);
        v32 = v30 + 32;
        v31 = v33;
        if (v32[1] != v33)
        {
          v34 = 0;
          v35 = 0;
          do
          {
            v36 = v31 + 40 * v35;
            HIBYTE(__s2[2].__locale_) = 3;
            LODWORD(__s2[0].__locale_) = 6579570;
            v37 = *(unsigned __int8 *)(v36 + 23);
            v38 = *(_QWORD *)(v36 + 8);
            if ((v37 & 0x80u) == 0)
              v39 = *(unsigned __int8 *)(v36 + 23);
            else
              v39 = *(_QWORD *)(v36 + 8);
            if (v39 == 3)
            {
              if ((v37 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v36, __s2, *(_QWORD *)(v36 + 8)))
                  goto LABEL_100;
                goto LABEL_139;
              }
              if (!*(_BYTE *)(v36 + 23))
                goto LABEL_100;
              v40 = __s2;
              v41 = (unsigned __int8 *)(v31 + 40 * v35);
              v42 = *(unsigned __int8 *)(v36 + 23);
              while (*v41 == LOBYTE(v40->__locale_))
              {
                ++v41;
                v40 = (std::locale *)((char *)v40 + 1);
                if (!--v42)
                  goto LABEL_100;
              }
            }
            HIBYTE(v193[2]) = 5;
            strcpy((char *)v193, "green");
            if (v39 == 5)
            {
              if ((v37 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v36, v193, v38))
                  goto LABEL_100;
                goto LABEL_139;
              }
              if (!(_DWORD)v37)
                goto LABEL_100;
              v43 = v193;
              v44 = (unsigned __int8 *)(v31 + 40 * v35);
              v45 = v37;
              while (*v44 == *(unsigned __int8 *)v43)
              {
                ++v44;
                v43 = (void **)((char *)v43 + 1);
                if (!--v45)
                  goto LABEL_100;
              }
            }
            HIBYTE(v208) = 4;
            strcpy((char *)&v206, "blue");
            if (v39 == 4)
            {
              if ((v37 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v36, &v206, v38))
                {
LABEL_100:
                  if (!v186)
                  {
                    *v183 = 0;
                    v183[1] = 0;
                    v183[2] = 0;
                    v186 = 1;
                    v184[48] = 1;
                  }
                  goto LABEL_102;
                }
                goto LABEL_139;
              }
              if (!(_DWORD)v37)
                goto LABEL_100;
              v46 = &v206;
              v47 = (unsigned __int8 *)(v31 + 40 * v35);
              v48 = v37;
              while (*v47 == *(unsigned __int8 *)v46)
              {
                ++v47;
                v46 = (void **)((char *)v46 + 1);
                if (!--v48)
                  goto LABEL_100;
              }
            }
            HIBYTE(__s2[2].__locale_) = 2;
            strcpy((char *)__s2, "nx");
            if (v39 != 2)
              goto LABEL_139;
            if ((v37 & 0x80) == 0)
            {
              if (!(_DWORD)v37)
                goto LABEL_183;
              v49 = 0;
              while (*(unsigned __int8 *)(v31 + v34 + v49) == *((unsigned __int8 *)&__s2[0].__locale_ + v49))
              {
                if (v37 == ++v49)
                  goto LABEL_183;
              }
              v59 = 0;
              HIBYTE(v193[2]) = 2;
              strcpy((char *)v193, "ny");
              while (*(unsigned __int8 *)(v31 + v34 + v59) == *((unsigned __int8 *)v193 + v59))
              {
                if (v37 == ++v59)
                  goto LABEL_183;
              }
              v60 = 0;
              HIBYTE(v208) = 2;
              strcpy((char *)&v206, "nz");
              while (*(unsigned __int8 *)(v31 + v34 + v60) == *((unsigned __int8 *)&v206 + v60))
              {
                if (v37 == ++v60)
                  goto LABEL_183;
              }
LABEL_139:
              HIBYTE(__s2[2].__locale_) = 4;
              strcpy((char *)__s2, "cost");
              if (v39 != 4)
                goto LABEL_148;
              if ((v37 & 0x80) == 0)
              {
                if (!(_DWORD)v37)
                  goto LABEL_158;
                v50 = __s2;
                v51 = v31;
                v52 = v37;
                while (*(unsigned __int8 *)(v51 + v34) == LOBYTE(v50->__locale_))
                {
                  v50 = (std::locale *)((char *)v50 + 1);
                  ++v51;
                  if (!--v52)
                    goto LABEL_158;
                }
                goto LABEL_148;
              }
              v53 = *(const void **)v36;
LABEL_147:
              if (!memcmp(v53, __s2, v38))
              {
LABEL_158:
                if (!v181)
                {
                  *v172 = 0;
                  v172[1] = 0;
                  v172[2] = 0;
                  v181 = 1;
                  v184[144] = 1;
                }
                goto LABEL_102;
              }
              goto LABEL_148;
            }
            v53 = *(const void **)v36;
            if (!memcmp(*(const void **)v36, __s2, v38)
              || (HIBYTE(v193[2]) = 2, strcpy((char *)v193, "ny"), !memcmp(v53, v193, v38))
              || (HIBYTE(v208) = 2, strcpy((char *)&v206, "nz"), !memcmp(v53, &v206, v38)))
            {
LABEL_183:
              if (!v179)
              {
                *v167 = 0;
                v167[1] = 0;
                v167[2] = 0;
                v179 = 1;
                v184[80] = 1;
              }
              goto LABEL_102;
            }
            HIBYTE(__s2[2].__locale_) = 4;
            strcpy((char *)__s2, "cost");
            if (v38 == 4)
              goto LABEL_147;
LABEL_148:
            HIBYTE(__s2[2].__locale_) = 19;
            strcpy((char *)__s2, "vertex_visibilities");
            v54 = *((unsigned __int8 *)v32 - 1);
            if ((v54 & 0x80u) == 0)
              v55 = *((unsigned __int8 *)v32 - 1);
            else
              v55 = *(v32 - 2);
            if (v55 != 19)
              goto LABEL_102;
            if ((v54 & 0x80) != 0)
            {
              if (memcmp((const void *)*(v32 - 3), __s2, *(v32 - 2)))
                goto LABEL_102;
            }
            else if (*((_BYTE *)v32 - 1))
            {
              v56 = __s2;
              v57 = (unsigned __int8 *)(v32 - 3);
              while (*v57 == LOBYTE(v56->__locale_))
              {
                ++v57;
                v56 = (std::locale *)((char *)v56 + 1);
                if (!--v54)
                  goto LABEL_161;
              }
              goto LABEL_102;
            }
LABEL_161:
            HIBYTE(v193[2]) = 12;
            strcpy((char *)v193, "vertex_index");
            if (v39 == 12)
            {
              if ((v37 & 0x80) == 0)
              {
                if ((_DWORD)v37)
                {
                  v58 = v193;
                  while (*(unsigned __int8 *)(v31 + v34) == *(unsigned __int8 *)v58)
                  {
                    v58 = (void **)((char *)v58 + 1);
                    ++v31;
                    if (!--v37)
                      goto LABEL_178;
                  }
                  goto LABEL_102;
                }
LABEL_178:
                if (!v173)
                {
                  *v166 = 0;
                  v166[1] = 0;
                  v166[2] = 0;
                  v173 = 1;
                  v184[112] = 1;
                }
                goto LABEL_102;
              }
              if (!memcmp(*(const void **)v36, v193, v38))
                goto LABEL_178;
            }
LABEL_102:
            ++v35;
            v31 = *v32;
            v34 += 40;
          }
          while (v35 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v32[1] - *v32) >> 3));
        }
        v29 = *(_QWORD *)v177 + 1;
        v28 = v174;
      }
      while (*(_QWORD *)v177 + 1 < v175);
      v61 = 0;
      v62 = v199;
      v63 = v175;
      if (v175 <= 1)
        v63 = 1;
      v64 = v174 + 16;
      a2 = (uint64_t)v184;
      while (2)
      {
        v65 = v64 - 8;
        if (v64[15] < 0)
        {
          if (*(_QWORD *)v64 != 6)
          {
            if (*(_QWORD *)v64 != 19)
              goto LABEL_190;
            v65 = *(char **)v65;
            goto LABEL_198;
          }
          v65 = *(char **)v65;
LABEL_208:
          v72 = *(_DWORD *)v65;
          v73 = *((unsigned __int16 *)v65 + 2);
          if (v72 != 1953654134 || v73 != 30821)
            goto LABEL_190;
LABEL_188:
          if (v61 <= *((_QWORD *)v64 - 2))
            v61 = *((_QWORD *)v64 - 2);
          goto LABEL_190;
        }
        v66 = v64[15];
        if (v66 == 6)
          goto LABEL_208;
        if (v66 != 19)
          goto LABEL_190;
LABEL_198:
        v67 = *(char **)v65;
        v68 = *((_QWORD *)v65 + 1);
        v69 = *(_QWORD *)(v65 + 11);
        if (v67 == (char *)0x765F786574726576 && v68 == 0x74696C6962697369 && v69 == 0x73656974696C6962)
          goto LABEL_188;
LABEL_190:
        v64 += 56;
        if (--v63)
          continue;
        break;
      }
      memset(__s2, 0, sizeof(__s2));
      if (!v61)
      {
        v82 = v162;
        if (v162 == v174)
          goto LABEL_484;
LABEL_271:
        v95 = 0;
        while (2)
        {
          v96 = &v28[56 * v95];
          v97 = (unsigned __int8 *)(v96 + 8);
          v180 = v96;
          v98 = v96[31];
          if (v98 < 0)
          {
            v101 = *((_QWORD *)v97 + 1);
            if (v101 != 6)
            {
              if (v101 != 19)
                goto LABEL_288;
              v100 = *(unsigned __int8 **)v97;
              goto LABEL_281;
            }
            if (**(_DWORD **)v97 == 1953654134 && *(_WORD *)(*(_QWORD *)v97 + 4) == 30821)
              goto LABEL_295;
LABEL_288:
            v107 = 0;
            v108 = *(_QWORD *)v180;
            if (*(_QWORD *)v180)
            {
LABEL_296:
              v176 = v95;
              v178 = v97;
              v110 = 0;
              v111 = &v28[56 * v95];
              v114 = *((_QWORD *)v111 + 4);
              v113 = (uint64_t *)(v111 + 32);
              v112 = v114;
              v116 = v113 + 1;
              v115 = v113[1];
              do
              {
                while (v115 == v112)
                {
                  v115 = v112;
                  if (++v110 >= v108)
                    goto LABEL_272;
                }
                v117 = 0;
                v118 = v110 >> 6;
                v119 = 1 << v110;
                v182 = v110;
                v185 = 1 << v110;
                v187 = v110 >> 6;
                do
                {
                  v120 = v112 + 40 * v117;
                  switch(*(_DWORD *)(v120 + 24))
                  {
                    case 0:
                      v121 = v112 + 40 * v117;
                      switch(*(_DWORD *)(v121 + 28))
                      {
                        case 1:
                          LODWORD(v193[0]) = 0;
                          if (v62)
                            std::istream::read();
                          else
                            MEMORY[0x23B83DCF8](a1, v193);
                          v126 = (unint64_t)*(float *)v193;
                          goto LABEL_383;
                        case 2:
                          v193[0] = 0;
                          if (v62)
                            std::istream::read();
                          else
                            MEMORY[0x23B83DCEC](a1, v193);
                          v126 = (unint64_t)*(double *)v193;
                          goto LABEL_383;
                        case 3:
                          LOBYTE(v206) = 0;
                          if (v62)
                          {
                            std::istream::read();
                            v126 = (char)v206;
                          }
                          else
                          {
                            LODWORD(v193[0]) = 0;
                            MEMORY[0x23B83DD10](a1, v193);
                            v126 = SLOBYTE(v193[0]);
                          }
                          goto LABEL_383;
                        case 4:
                          LOBYTE(v206) = 0;
                          if (v62)
                          {
                            std::istream::read();
                            v126 = v206;
                          }
                          else
                          {
                            LODWORD(v193[0]) = 0;
                            MEMORY[0x23B83DD10](a1, v193);
                            v126 = LOBYTE(v193[0]);
                          }
                          goto LABEL_383;
                        case 5:
                          LODWORD(v193[0]) = 0;
                          if (v62)
                            std::istream::read();
                          else
                            MEMORY[0x23B83DD04](a1, v193);
                          v126 = SLODWORD(v193[0]);
                          goto LABEL_383;
                        case 6:
                          LODWORD(v193[0]) = 0;
                          if (v62)
                            std::istream::read();
                          else
                            MEMORY[0x23B83DD10](a1, v193);
                          v126 = LODWORD(v193[0]);
                          goto LABEL_383;
                        case 7:
                          LOWORD(v193[0]) = 0;
                          if (v62)
                            std::istream::read();
                          else
                            MEMORY[0x23B83DD28](a1, v193);
                          v126 = SLOWORD(v193[0]);
                          goto LABEL_383;
                        case 8:
                          LOWORD(v193[0]) = 0;
                          if (v62)
                            std::istream::read();
                          else
                            MEMORY[0x23B83DD34](a1, v193);
                          v126 = LOWORD(v193[0]);
                          break;
                        default:
                          goto LABEL_480;
                      }
                      break;
                    case 1:
                      LODWORD(v206) = 0;
                      LODWORD(v193[0]) = 0;
                      if (v62)
                        std::istream::read();
                      else
                        MEMORY[0x23B83DCF8](a1, v193);
                      LODWORD(v206) = v193[0];
                      if (v107 && (*((_QWORD *)__s2[0].__locale_ + v118) & v119) == 0)
                        sub_2395B60DC((unsigned __int8 *)v120, &v206, a2);
                      goto LABEL_302;
                    case 2:
                      v206 = 0;
                      v193[0] = 0;
                      if (v62)
                        std::istream::read();
                      else
                        MEMORY[0x23B83DCEC](a1, v193);
                      v206 = v193[0];
                      if (v107 && (*((_QWORD *)__s2[0].__locale_ + v118) & v119) == 0)
                        sub_2395B6720((unsigned __int8 *)v120, (double *)&v206, (char **)a2);
                      goto LABEL_302;
                    case 3:
                      LOBYTE(v191[0]) = 0;
                      LOBYTE(v206) = 0;
                      if (v62)
                      {
                        std::istream::read();
                        LOBYTE(v191[0]) = (_BYTE)v206;
                        if (!v107)
                          goto LABEL_302;
                      }
                      else
                      {
                        LODWORD(v193[0]) = 0;
                        MEMORY[0x23B83DD10](a1, v193);
                        LOBYTE(v191[0]) = v193[0];
                        if (!v107)
                          goto LABEL_302;
                      }
                      if ((*((_QWORD *)__s2[0].__locale_ + v118) & v119) == 0)
                        sub_2395B6D78((unsigned __int8 *)v120, (__int8 *)v191, (char **)a2, v123);
                      goto LABEL_302;
                    case 4:
                      LOBYTE(v191[0]) = 0;
                      LOBYTE(v206) = 0;
                      if (v62)
                      {
                        std::istream::read();
                        LOBYTE(v191[0]) = (_BYTE)v206;
                        if (!v107)
                          goto LABEL_302;
                      }
                      else
                      {
                        LODWORD(v193[0]) = 0;
                        MEMORY[0x23B83DD10](a1, v193);
                        LOBYTE(v191[0]) = v193[0];
                        if (!v107)
                          goto LABEL_302;
                      }
                      if ((*((_QWORD *)__s2[0].__locale_ + v118) & v119) == 0)
                        sub_2395B73EC((unsigned __int8 *)v120, (char *)v191, (char **)a2, v122);
                      goto LABEL_302;
                    case 5:
                      LODWORD(v206) = 0;
                      LODWORD(v193[0]) = 0;
                      if (v62)
                        std::istream::read();
                      else
                        MEMORY[0x23B83DD04](a1, v193);
                      LODWORD(v206) = v193[0];
                      if (v107 && (*((_QWORD *)__s2[0].__locale_ + v118) & v119) == 0)
                        sub_2395B7A38((unsigned __int8 *)v120, (int *)&v206, (char **)a2);
                      goto LABEL_302;
                    case 6:
                      LODWORD(v206) = 0;
                      LODWORD(v193[0]) = 0;
                      if (v62)
                        std::istream::read();
                      else
                        MEMORY[0x23B83DD10](a1, v193);
                      LODWORD(v206) = v193[0];
                      if (v107 && (*((_QWORD *)__s2[0].__locale_ + v118) & v119) == 0)
                        sub_2395B8084((unsigned __int8 *)v120, (unsigned int *)&v206, (char **)a2);
                      goto LABEL_302;
                    case 7:
                      LOWORD(v206) = 0;
                      LOWORD(v193[0]) = 0;
                      if (v62)
                        std::istream::read();
                      else
                        MEMORY[0x23B83DD28](a1, v193);
                      LOWORD(v206) = v193[0];
                      if (v107 && (*((_QWORD *)__s2[0].__locale_ + v118) & v119) == 0)
                        sub_2395B86D0((unsigned __int8 *)v120, (__int16 *)&v206, (char **)a2, v124);
                      goto LABEL_302;
                    case 8:
                      LOWORD(v206) = 0;
                      LOWORD(v193[0]) = 0;
                      if (v62)
                        std::istream::read();
                      else
                        MEMORY[0x23B83DD34](a1, v193);
                      LOWORD(v206) = v193[0];
                      if (v107 && (*((_QWORD *)__s2[0].__locale_ + v118) & v119) == 0)
                        sub_2395B8D30((unsigned __int8 *)v120, &v206, (char **)a2, v125);
                      goto LABEL_302;
                    default:
LABEL_480:
                      v147 = 0;
                      locale = __s2[0].__locale_;
                      if (__s2[0].__locale_)
                        goto LABEL_481;
                      goto LABEL_482;
                  }
LABEL_383:
                  switch(*(_DWORD *)(v121 + 32))
                  {
                    case 1:
                      memset(v193, 0, sizeof(v193));
                      if (v126)
                      {
                        if (v126 >> 62)
                          sub_2394189F8();
                        v127 = (char *)operator new(4 * v126);
                        v193[0] = v127;
                        v193[2] = &v127[4 * v126];
                        bzero(v127, 4 * v126);
                        v128 = 0;
                        v193[1] = &v127[4 * v126];
                        a2 = (uint64_t)v184;
                        v110 = v182;
                        do
                        {
                          LODWORD(v206) = 0;
                          if (v62)
                            std::istream::read();
                          else
                            MEMORY[0x23B83DCF8](a1, &v206);
                          v129 = v193[0];
                          *((_DWORD *)v193[0] + v128++) = (_DWORD)v206;
                        }
                        while (v126 != v128);
                      }
                      else
                      {
                        v129 = 0;
                      }
                      v119 = v185;
                      v118 = v187;
                      if ((v107 & 1) == 0 || (*((_QWORD *)__s2[0].__locale_ + v187) & v185) != 0)
                        goto LABEL_300;
                      sub_2395B937C(v178, (unsigned __int8 *)v120, (uint64_t *)v193, a2);
                      goto LABEL_470;
                    case 2:
                      memset(v193, 0, sizeof(v193));
                      if (v126)
                      {
                        if (v126 >> 61)
                          sub_2394189F8();
                        v140 = (char *)operator new(8 * v126);
                        v193[0] = v140;
                        v193[2] = &v140[8 * v126];
                        bzero(v140, 8 * v126);
                        v141 = 0;
                        v193[1] = &v140[8 * v126];
                        a2 = (uint64_t)v184;
                        v110 = v182;
                        do
                        {
                          v206 = 0;
                          if (v62)
                            std::istream::read();
                          else
                            MEMORY[0x23B83DCEC](a1, &v206);
                          v129 = v193[0];
                          *((_QWORD *)v193[0] + v141++) = v206;
                        }
                        while (v126 != v141);
                      }
                      else
                      {
                        v129 = 0;
                      }
                      v119 = v185;
                      v118 = v187;
                      if ((v107 & 1) == 0 || (*((_QWORD *)__s2[0].__locale_ + v187) & v185) != 0)
                        goto LABEL_300;
                      sub_2395B9684(v178, (unsigned __int8 *)v120, (float64x2_t **)v193, a2);
                      goto LABEL_470;
                    case 3:
                      memset(v193, 0, sizeof(v193));
                      if (!v126)
                        goto LABEL_405;
                      if ((v126 & 0x8000000000000000) != 0)
                        sub_2394189F8();
                      v132 = (char *)operator new(v126);
                      v133 = &v132[v126];
                      v193[0] = v132;
                      v193[2] = &v132[v126];
                      bzero(v132, v126);
                      v134 = 0;
                      v193[1] = v133;
                      a2 = (uint64_t)v184;
                      do
                      {
                        while (1)
                        {
                          LOBYTE(v191[0]) = 0;
                          if (!v62)
                            break;
                          std::istream::read();
                          *((_BYTE *)v193[0] + v134++) = v191[0];
                          if (v126 == v134)
                            goto LABEL_405;
                        }
                        LODWORD(v206) = 0;
                        MEMORY[0x23B83DD10](a1, &v206);
                        *((_BYTE *)v193[0] + v134++) = (_BYTE)v206;
                      }
                      while (v126 != v134);
LABEL_405:
                      v119 = v185;
                      v118 = v187;
                      if ((v107 & 1) != 0 && (*((_QWORD *)__s2[0].__locale_ + v187) & v185) == 0)
                        sub_2395B999C(v178, (unsigned __int8 *)v120, (unint64_t *)v193, a2);
                      goto LABEL_470;
                    case 4:
                      memset(v193, 0, sizeof(v193));
                      if (!v126)
                        goto LABEL_415;
                      if ((v126 & 0x8000000000000000) != 0)
                        sub_2394189F8();
                      v135 = (char *)operator new(v126);
                      v136 = &v135[v126];
                      v193[0] = v135;
                      v193[2] = &v135[v126];
                      bzero(v135, v126);
                      v137 = 0;
                      v193[1] = v136;
                      a2 = (uint64_t)v184;
                      break;
                    case 5:
                      memset(v193, 0, sizeof(v193));
                      if (v126)
                      {
                        if (v126 >> 62)
                          sub_2394189F8();
                        v130 = (char *)operator new(4 * v126);
                        v193[0] = v130;
                        v193[2] = &v130[4 * v126];
                        bzero(v130, 4 * v126);
                        v131 = 0;
                        v193[1] = &v130[4 * v126];
                        a2 = (uint64_t)v184;
                        v110 = v182;
                        do
                        {
                          LODWORD(v206) = 0;
                          if (v62)
                            std::istream::read();
                          else
                            MEMORY[0x23B83DD04](a1, &v206);
                          v129 = v193[0];
                          *((_DWORD *)v193[0] + v131++) = (_DWORD)v206;
                        }
                        while (v126 != v131);
                      }
                      else
                      {
                        v129 = 0;
                      }
                      v119 = v185;
                      v118 = v187;
                      if ((v107 & 1) == 0 || (*((_QWORD *)__s2[0].__locale_ + v187) & v185) != 0)
                        goto LABEL_300;
                      sub_2395BA0F0(v178, (unsigned __int8 *)v120, (uint64_t *)v193, a2);
                      goto LABEL_470;
                    case 6:
                      memset(v193, 0, sizeof(v193));
                      if (v126)
                      {
                        if (v126 >> 62)
                          sub_2394189F8();
                        v142 = (char *)operator new(4 * v126);
                        v193[0] = v142;
                        v193[2] = &v142[4 * v126];
                        bzero(v142, 4 * v126);
                        v143 = 0;
                        v193[1] = &v142[4 * v126];
                        a2 = (uint64_t)v184;
                        v110 = v182;
                        do
                        {
                          LODWORD(v206) = 0;
                          if (v62)
                            std::istream::read();
                          else
                            MEMORY[0x23B83DD10](a1, &v206);
                          v129 = v193[0];
                          *((_DWORD *)v193[0] + v143++) = (_DWORD)v206;
                        }
                        while (v126 != v143);
                      }
                      else
                      {
                        v129 = 0;
                      }
                      v119 = v185;
                      v118 = v187;
                      if ((v107 & 1) == 0 || (*((_QWORD *)__s2[0].__locale_ + v187) & v185) != 0)
                        goto LABEL_300;
                      sub_2395BA3F8(v178, (unsigned __int8 *)v120, (uint64_t *)v193, a2);
                      goto LABEL_470;
                    case 7:
                      memset(v193, 0, sizeof(v193));
                      if (v126)
                      {
                        if ((v126 & 0x8000000000000000) != 0)
                          sub_2394189F8();
                        v144 = (char *)operator new(2 * v126);
                        v193[0] = v144;
                        v193[2] = &v144[2 * v126];
                        bzero(v144, 2 * v126);
                        v145 = 0;
                        v193[1] = &v144[2 * v126];
                        a2 = (uint64_t)v184;
                        v110 = v182;
                        do
                        {
                          LOWORD(v206) = 0;
                          if (v62)
                            std::istream::read();
                          else
                            MEMORY[0x23B83DD28](a1, &v206);
                          v129 = v193[0];
                          *((_WORD *)v193[0] + v145++) = (_WORD)v206;
                        }
                        while (v126 != v145);
                      }
                      else
                      {
                        v129 = 0;
                      }
                      v119 = v185;
                      v118 = v187;
                      if ((v107 & 1) == 0 || (*((_QWORD *)__s2[0].__locale_ + v187) & v185) != 0)
                        goto LABEL_300;
                      sub_2395BA700(v178, (unsigned __int8 *)v120, (int16x4_t **)v193, a2);
                      goto LABEL_470;
                    case 8:
                      memset(v193, 0, sizeof(v193));
                      if (v126)
                      {
                        if ((v126 & 0x8000000000000000) != 0)
                          sub_2394189F8();
                        v138 = (char *)operator new(2 * v126);
                        v193[0] = v138;
                        v193[2] = &v138[2 * v126];
                        bzero(v138, 2 * v126);
                        v139 = 0;
                        v193[1] = &v138[2 * v126];
                        a2 = (uint64_t)v184;
                        v110 = v182;
                        do
                        {
                          LOWORD(v206) = 0;
                          if (v62)
                            std::istream::read();
                          else
                            MEMORY[0x23B83DD34](a1, &v206);
                          v129 = v193[0];
                          *((_WORD *)v193[0] + v139++) = (_WORD)v206;
                        }
                        while (v126 != v139);
                      }
                      else
                      {
                        v129 = 0;
                      }
                      v119 = v185;
                      v118 = v187;
                      if ((v107 & 1) != 0 && (*((_QWORD *)__s2[0].__locale_ + v187) & v185) == 0)
                      {
                        sub_2395BAA14(v178, (unsigned __int8 *)v120, (uint16x4_t **)v193, a2);
                        goto LABEL_470;
                      }
LABEL_300:
                      if (!v129)
                        goto LABEL_302;
                      goto LABEL_301;
                    default:
                      goto LABEL_480;
                  }
                  do
                  {
                    while (1)
                    {
                      LOBYTE(v191[0]) = 0;
                      if (!v62)
                        break;
                      std::istream::read();
                      *((_BYTE *)v193[0] + v137++) = v191[0];
                      if (v126 == v137)
                        goto LABEL_415;
                    }
                    LODWORD(v206) = 0;
                    MEMORY[0x23B83DD10](a1, &v206);
                    *((_BYTE *)v193[0] + v137++) = (_BYTE)v206;
                  }
                  while (v126 != v137);
LABEL_415:
                  v119 = v185;
                  v118 = v187;
                  if ((v107 & 1) != 0 && (*((_QWORD *)__s2[0].__locale_ + v187) & v185) == 0)
                    sub_2395B9D3C(v178, (unsigned __int8 *)v120, (unint64_t *)v193, a2);
LABEL_470:
                  v129 = v193[0];
                  if (v193[0])
                  {
LABEL_301:
                    v193[1] = v129;
                    operator delete(v129);
                  }
LABEL_302:
                  ++v117;
                  v115 = *v116;
                  v112 = *v113;
                }
                while (v117 < 0xCCCCCCCCCCCCCCCDLL * ((*v116 - *v113) >> 3));
                v108 = *(_QWORD *)v180;
                ++v110;
              }
              while (v110 < *(_QWORD *)v180);
LABEL_272:
              v28 = (char *)v200;
              v82 = v201;
              v95 = v176;
            }
          }
          else
          {
            v99 = v98;
            if (v98 == 6)
            {
              if (*(_DWORD *)v97 != 1953654134 || *((_WORD *)v97 + 2) != 30821)
                goto LABEL_288;
            }
            else
            {
              v100 = v97;
              if (v99 != 19)
                goto LABEL_288;
LABEL_281:
              v102 = *(_QWORD *)v100;
              v103 = *((_QWORD *)v100 + 1);
              v104 = *(_QWORD *)(v100 + 11);
              if (v102 != 0x765F786574726576 || v103 != 0x74696C6962697369 || v104 != 0x73656974696C6962)
                goto LABEL_288;
            }
LABEL_295:
            v107 = 1;
            v108 = *(_QWORD *)v180;
            if (*(_QWORD *)v180)
              goto LABEL_296;
          }
          if (++v95 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v82 - v28) >> 3)))
            goto LABEL_484;
          continue;
        }
      }
      if ((v61 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v75 = (v61 - 1) >> 6;
      v76 = (std::locale::__imp *)operator new(8 * (v75 + 1));
      v77 = v76;
      __s2[1].__locale_ = (std::locale::__imp *)v61;
      __s2[2].__locale_ = (std::locale::__imp *)(v75 + 1);
      __s2[0].__locale_ = v76;
      if (v61 >= 0x41)
        v78 = (v61 - 1) >> 6;
      else
        v78 = 0;
      *((_QWORD *)v76 + v78) = 0;
      if (v61 >= 0x40)
        bzero(v76, 8 * (v61 >> 6));
      v79 = v61 & 0x3F;
      if ((v61 & 0x3F) != 0)
        *((_QWORD *)v77 + (v61 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v79);
      if (!v165 || v61 <= v164)
      {
        v82 = v162;
        v28 = v174;
        if (v162 == v174)
          goto LABEL_484;
        goto LABEL_271;
      }
      v80 = (((_BYTE)v61 - (_BYTE)v165) & 0x3F) + 8 * (8 * (v61 >> 6) - 8 * ((v163 - v79) >> 6));
      if (v80)
      {
        if (v80 >= 0x40)
          memset(v77, 255, 8 * (v80 >> 6));
        if ((v80 & 0x3F) != 0)
          *((_QWORD *)v77 + (v80 >> 6)) |= 0xFFFFFFFFFFFFFFFFLL >> -(v80 & 0x3F);
      }
      v81 = sub_239A22C9C();
      v193[0] = v77;
      LODWORD(v193[1]) = 0;
      v206 = (char *)v77 + 8 * (v61 >> 6);
      LODWORD(v207) = v61 & 0x3F;
      sub_2395BAD28((uint64_t)v81, (uint64_t)v193, (unint64_t *)&v206);
      v28 = (char *)v200;
      v82 = v201;
      if (v201 != v200)
        goto LABEL_271;
LABEL_484:
      v147 = 1;
      locale = __s2[0].__locale_;
      if (__s2[0].__locale_)
LABEL_481:
        operator delete(locale);
LABEL_482:
      if ((v147 & 1) == 0)
      {
LABEL_506:
        v151 = 0;
        if (SHIBYTE(v198) < 0)
          goto LABEL_507;
        goto LABEL_508;
      }
LABEL_16:
      v6 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    }
    while ((v6->__rdstate_ & 2) == 0);
  }
  if (*(_BYTE *)(a2 + 48)
    && 0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) != 0xAAAAAAAAAAAAAAABLL
                                                                             * ((uint64_t)(*(_QWORD *)(a2 + 8)
                                                                                        - *(_QWORD *)a2) >> 2)
    || *(_BYTE *)(a2 + 80) && *(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56) != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2
    || *(_BYTE *)(a2 + 112)
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3) != 0xAAAAAAAAAAAAAAABLL
                                                                                             * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2)
    || *(_BYTE *)(a2 + 144)
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) != (uint64_t)(*(_QWORD *)(a2 + 128)
                                                                                               - *(_QWORD *)(a2 + 120)) >> 2)
  {
    goto LABEL_506;
  }
  v151 = 1;
  if (SHIBYTE(v198) < 0)
LABEL_507:
    operator delete(v196);
LABEL_508:
  v152 = (char *)v200;
  if (v200)
  {
    v153 = v201;
    v154 = v200;
    if (v201 != v200)
    {
      do
      {
        v155 = *((_QWORD *)v153 - 3);
        if (v155)
        {
          v156 = *((_QWORD *)v153 - 2);
          v157 = (void *)*((_QWORD *)v153 - 3);
          if (v156 != v155)
          {
            do
            {
              if (*(char *)(v156 - 17) < 0)
                operator delete(*(void **)(v156 - 40));
              v156 -= 40;
            }
            while (v156 != v155);
            v157 = (void *)*((_QWORD *)v153 - 3);
          }
          *((_QWORD *)v153 - 2) = v155;
          operator delete(v157);
        }
        if (*(v153 - 25) < 0)
          operator delete(*((void **)v153 - 6));
        v153 -= 56;
      }
      while (v153 != v152);
      v154 = v200;
    }
    v201 = v152;
    operator delete(v154);
  }
  v158 = (void **)v204[0];
  if (v204[0])
  {
    do
    {
      v161 = (void **)*v158;
      if (*((char *)v158 + 39) < 0)
        operator delete(v158[2]);
      operator delete(v158);
      v158 = v161;
    }
    while (v161);
  }
  v159 = v203[0];
  v203[0] = 0;
  if (v159)
    operator delete(v159);
  return v151;
}

void sub_2395B5B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a68;
  char a72;
  std::locale a73;
  uint64_t v73;
  _QWORD *v74;

  *v74 = v73;
  if (a48 < 0)
  {
    operator delete(__p);
    if ((a72 & 0x80000000) == 0)
    {
LABEL_6:
      sub_239498ABC((uint64_t)&a73);
      if ((a58 & 0x80000000) == 0)
      {
        sub_2395B5F64((uint64_t)&a59);
        sub_23942823C((uint64_t)&a63);
        _Unwind_Resume(a1);
      }
      operator delete(a53);
      sub_2395B5F64((uint64_t)&a59);
      sub_23942823C((uint64_t)&a63);
      _Unwind_Resume(a1);
    }
  }
  else if ((a72 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a68);
  goto LABEL_6;
}

uint64_t sub_2395B5ED0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0)
          operator delete(*(void **)(v3 - 40));
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_2395B5F64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 24);
        if (v5)
        {
          v6 = *(_QWORD *)(v3 - 16);
          v7 = *(void **)(v3 - 24);
          if (v6 != v5)
          {
            do
            {
              if (*(char *)(v6 - 17) < 0)
                operator delete(*(void **)(v6 - 40));
              v6 -= 40;
            }
            while (v6 != v5);
            v7 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v7);
        }
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_2395B6024(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void sub_2395B60DC(unsigned __int8 *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void **p_s2;
  unsigned __int8 *v28;
  uint64_t v29;
  void **v30;
  unsigned __int8 *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  _BYTE *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _BOOL4 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  char *v50;
  __int16 v51;
  char v52;
  unint64_t __s2;
  int v54;
  char v55;

  v55 = 1;
  LOWORD(__s2) = 120;
  v6 = a1[23];
  v7 = *((_QWORD *)a1 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = a1[23];
  else
    v8 = *((_QWORD *)a1 + 1);
  if (v8 != 1)
    goto LABEL_41;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v7))
    {
      v55 = 1;
      LOWORD(__s2) = 121;
      if (!memcmp(*(const void **)a1, &__s2, v7))
      {
LABEL_29:
        v20 = *(_QWORD *)(a3 + 8);
LABEL_88:
        *(_DWORD *)(v20 - 8) = *a2;
        return;
      }
      v55 = 1;
      LOWORD(__s2) = 122;
      if (!memcmp(*(const void **)a1, &__s2, v7))
      {
LABEL_40:
        v26 = *(_QWORD *)(a3 + 8);
LABEL_97:
        *(_DWORD *)(v26 - 4) = *a2;
        return;
      }
      goto LABEL_79;
    }
LABEL_15:
    v10 = *a2;
    v12 = *(_DWORD **)(a3 + 8);
    v11 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v12 < v11)
    {
      *v12 = v10;
      v12[1] = 0;
      v12[2] = 0;
      *(_QWORD *)(a3 + 8) = v12 + 3;
      return;
    }
    v13 = *(_DWORD **)a3;
    v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *(_QWORD *)a3) >> 2);
    v15 = v14 + 1;
    if (v14 + 1 > 0x1555555555555555)
      sub_2394189F8();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v13) >> 2);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0xAAAAAAAAAAAAAAALL)
      v17 = 0x1555555555555555;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 > 0x1555555555555555)
        goto LABEL_113;
      v18 = (char *)operator new(12 * v17);
    }
    else
    {
      v18 = 0;
    }
    v21 = &v18[12 * v14];
    *(_DWORD *)v21 = v10;
    *((_DWORD *)v21 + 1) = 0;
    *((_DWORD *)v21 + 2) = 0;
    v22 = v21 + 12;
    if (v12 != v13)
    {
      do
      {
        v23 = *(_QWORD *)(v12 - 3);
        v12 -= 3;
        v24 = v12[2];
        *(_QWORD *)(v21 - 12) = v23;
        v21 -= 12;
        *((_DWORD *)v21 + 2) = v24;
      }
      while (v12 != v13);
      v12 = *(_DWORD **)a3;
    }
    *(_QWORD *)a3 = v21;
    *(_QWORD *)(a3 + 8) = v22;
    *(_QWORD *)(a3 + 16) = &v18[12 * v17];
    if (v12)
      operator delete(v12);
    *(_QWORD *)(a3 + 8) = v22;
    return;
  }
  if (!a1[23])
    goto LABEL_15;
  v9 = 0;
  while (a1[v9] == *((unsigned __int8 *)&__s2 + v9))
  {
    if (v6 == ++v9)
      goto LABEL_15;
  }
  v19 = 0;
  v55 = 1;
  LOWORD(__s2) = 121;
  while (a1[v19] == *((unsigned __int8 *)&__s2 + v19))
  {
    if (v6 == ++v19)
      goto LABEL_29;
  }
  v25 = 0;
  v55 = 1;
  LOWORD(__s2) = 122;
  while (a1[v25] == *((unsigned __int8 *)&__s2 + v25))
  {
    if (v6 == ++v25)
      goto LABEL_40;
  }
LABEL_41:
  v55 = 3;
  LODWORD(__s2) = 6579570;
  if (v8 != 3)
    goto LABEL_48;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v7))
      goto LABEL_79;
    goto LABEL_63;
  }
  if (!(_DWORD)v6)
  {
LABEL_63:
    if (!*(_BYTE *)(a3 + 48))
      goto LABEL_111;
    v35 = (int)*(float *)a2;
    v37 = *(char **)(a3 + 32);
    v36 = *(_QWORD *)(a3 + 40);
    if ((unint64_t)v37 < v36)
    {
      *v37 = v35;
      *(_WORD *)(v37 + 1) = 0;
      v38 = v37 + 3;
LABEL_109:
      *(_QWORD *)(a3 + 32) = v38;
      return;
    }
    v39 = *(_BYTE **)(a3 + 24);
    v40 = 0xAAAAAAAAAAAAAAABLL * (v37 - v39) + 1;
    if (v40 >= 0x5555555555555556)
      sub_2394189F8();
    v41 = 0xAAAAAAAAAAAAAAABLL * (v36 - (_QWORD)v39);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x2AAAAAAAAAAAAAAALL)
      v42 = 0x5555555555555555;
    else
      v42 = v40;
    if (!v42)
    {
      v43 = 0;
      goto LABEL_104;
    }
    if (v42 < 0x5555555555555556)
    {
      v43 = (char *)operator new(3 * v42);
LABEL_104:
      v50 = &v43[v37 - v39];
      *v50 = v35;
      *(_WORD *)(v50 + 1) = 0;
      v38 = v50 + 3;
      if (v37 != v39)
      {
        do
        {
          v51 = *(_WORD *)(v37 - 3);
          v37 -= 3;
          v52 = v37[2];
          *(_WORD *)(v50 - 3) = v51;
          v50 -= 3;
          v50[2] = v52;
        }
        while (v37 != v39);
        v37 = *(char **)(a3 + 24);
      }
      *(_QWORD *)(a3 + 24) = v50;
      *(_QWORD *)(a3 + 32) = v38;
      *(_QWORD *)(a3 + 40) = &v43[3 * v42];
      if (v37)
        operator delete(v37);
      goto LABEL_109;
    }
LABEL_113:
    sub_239418A80();
  }
  p_s2 = (void **)&__s2;
  v28 = a1;
  v29 = v6;
  while (*v28 == *(unsigned __int8 *)p_s2)
  {
    ++v28;
    p_s2 = (void **)((char *)p_s2 + 1);
    if (!--v29)
      goto LABEL_63;
  }
LABEL_48:
  v55 = 5;
  strcpy((char *)&__s2, "green");
  if (v8 != 5)
    goto LABEL_55;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v7))
      goto LABEL_79;
LABEL_76:
    if (*(_BYTE *)(a3 + 48))
    {
      *(_BYTE *)(*(_QWORD *)(a3 + 32) - 2) = (int)*(float *)a2;
      return;
    }
    goto LABEL_111;
  }
  if (!(_DWORD)v6)
    goto LABEL_76;
  v30 = (void **)&__s2;
  v31 = a1;
  v32 = v6;
  while (*v31 == *(unsigned __int8 *)v30)
  {
    ++v31;
    v30 = (void **)((char *)v30 + 1);
    if (!--v32)
      goto LABEL_76;
  }
LABEL_55:
  v55 = 4;
  strcpy((char *)&__s2, "blue");
  if (v8 == 4)
  {
    if ((v6 & 0x80) == 0)
    {
      if ((_DWORD)v6)
      {
        v33 = (void **)&__s2;
        v34 = a1;
        while (*v34 == *(unsigned __int8 *)v33)
        {
          ++v34;
          v33 = (void **)((char *)v33 + 1);
          if (!--v6)
            goto LABEL_89;
        }
        goto LABEL_79;
      }
LABEL_89:
      if (!*(_BYTE *)(a3 + 48))
        goto LABEL_111;
      *(_BYTE *)(*(_QWORD *)(a3 + 32) - 1) = (int)*(float *)a2;
      return;
    }
    if (!memcmp(*(const void **)a1, &__s2, v7))
      goto LABEL_89;
  }
LABEL_79:
  sub_23941A4FC(&__s2, "nx");
  v44 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v45 = v44;
  if (v55 < 0)
  {
    operator delete((void *)__s2);
    if (v45)
    {
LABEL_81:
      __s2 = *a2;
      v54 = 0;
      if (*(_BYTE *)(a3 + 80))
      {
        sub_2395BAEA0((void **)(a3 + 56), (uint64_t *)&__s2);
        return;
      }
LABEL_111:
      sub_2394875CC();
    }
  }
  else if (v44)
  {
    goto LABEL_81;
  }
  sub_23941A4FC(&__s2, "ny");
  v46 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v47 = v46;
  if (v55 < 0)
  {
    operator delete((void *)__s2);
    if (v47)
      goto LABEL_86;
  }
  else if (v46)
  {
LABEL_86:
    if (!*(_BYTE *)(a3 + 80))
      goto LABEL_111;
    v20 = *(_QWORD *)(a3 + 64);
    goto LABEL_88;
  }
  sub_23941A4FC(&__s2, "nz");
  v48 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v55 < 0)
    operator delete((void *)__s2);
  if (v48)
  {
    if (!*(_BYTE *)(a3 + 80))
      goto LABEL_111;
    v26 = *(_QWORD *)(a3 + 64);
    goto LABEL_97;
  }
  sub_23941A4FC(&__s2, "cost");
  v49 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v55 < 0)
    operator delete((void *)__s2);
  if (v49)
  {
    if (!*(_BYTE *)(a3 + 144))
      goto LABEL_111;
    LODWORD(__s2) = *a2;
    sub_2395BAFE4(a3 + 120, &__s2);
  }
}

void sub_2395B6720(unsigned __int8 *a1, double *a2, char **a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  void **p_s2;
  unsigned __int8 *v28;
  uint64_t v29;
  void **v30;
  unsigned __int8 *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _BOOL4 v44;
  _BOOL4 v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  float v49;
  _BOOL4 v50;
  float v51;
  _BOOL4 v52;
  float v53;
  char *v54;
  __int16 v55;
  char v56;
  void *__s2;
  int v58;
  char v59;

  v59 = 1;
  LOWORD(__s2) = 120;
  v6 = a1[23];
  v7 = *((_QWORD *)a1 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = a1[23];
  else
    v8 = *((_QWORD *)a1 + 1);
  if (v8 != 1)
    goto LABEL_41;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v7))
    {
      v59 = 1;
      LOWORD(__s2) = 121;
      if (!memcmp(*(const void **)a1, &__s2, v7))
      {
LABEL_29:
        v20 = a3[1];
LABEL_88:
        v49 = *a2;
        *((float *)v20 - 2) = v49;
        return;
      }
      v59 = 1;
      LOWORD(__s2) = 122;
      if (!memcmp(*(const void **)a1, &__s2, v7))
      {
LABEL_40:
        v26 = a3[1];
LABEL_97:
        v51 = *a2;
        *((float *)v26 - 1) = v51;
        return;
      }
      goto LABEL_79;
    }
LABEL_15:
    v10 = *a2;
    v12 = a3[1];
    v11 = (unint64_t)a3[2];
    if ((unint64_t)v12 < v11)
    {
      *(float *)v12 = v10;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = 0;
      a3[1] = v12 + 12;
      return;
    }
    v13 = *a3;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a3) >> 2);
    v15 = v14 + 1;
    if (v14 + 1 > 0x1555555555555555)
      sub_2394189F8();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v13) >> 2);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0xAAAAAAAAAAAAAAALL)
      v17 = 0x1555555555555555;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 > 0x1555555555555555)
        goto LABEL_113;
      v18 = (char *)operator new(12 * v17);
    }
    else
    {
      v18 = 0;
    }
    v21 = &v18[12 * v14];
    *(float *)v21 = v10;
    *((_DWORD *)v21 + 1) = 0;
    *((_DWORD *)v21 + 2) = 0;
    v22 = v21 + 12;
    if (v12 != v13)
    {
      do
      {
        v23 = *(_QWORD *)(v12 - 12);
        v12 -= 12;
        v24 = *((_DWORD *)v12 + 2);
        *(_QWORD *)(v21 - 12) = v23;
        v21 -= 12;
        *((_DWORD *)v21 + 2) = v24;
      }
      while (v12 != v13);
      v12 = *a3;
    }
    *a3 = v21;
    a3[1] = v22;
    a3[2] = &v18[12 * v17];
    if (v12)
      operator delete(v12);
    a3[1] = v22;
    return;
  }
  if (!a1[23])
    goto LABEL_15;
  v9 = 0;
  while (a1[v9] == *((unsigned __int8 *)&__s2 + v9))
  {
    if (v6 == ++v9)
      goto LABEL_15;
  }
  v19 = 0;
  v59 = 1;
  LOWORD(__s2) = 121;
  while (a1[v19] == *((unsigned __int8 *)&__s2 + v19))
  {
    if (v6 == ++v19)
      goto LABEL_29;
  }
  v25 = 0;
  v59 = 1;
  LOWORD(__s2) = 122;
  while (a1[v25] == *((unsigned __int8 *)&__s2 + v25))
  {
    if (v6 == ++v25)
      goto LABEL_40;
  }
LABEL_41:
  v59 = 3;
  LODWORD(__s2) = 6579570;
  if (v8 != 3)
    goto LABEL_48;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v7))
      goto LABEL_79;
    goto LABEL_63;
  }
  if (!(_DWORD)v6)
  {
LABEL_63:
    if (!*((_BYTE *)a3 + 48))
      goto LABEL_111;
    v35 = (int)*a2;
    v37 = a3[4];
    v36 = (unint64_t)a3[5];
    if ((unint64_t)v37 < v36)
    {
      *v37 = v35;
      *(_WORD *)(v37 + 1) = 0;
      v38 = v37 + 3;
LABEL_109:
      a3[4] = v38;
      return;
    }
    v39 = a3[3];
    v40 = 0xAAAAAAAAAAAAAAABLL * (v37 - v39) + 1;
    if (v40 >= 0x5555555555555556)
      sub_2394189F8();
    v41 = 0xAAAAAAAAAAAAAAABLL * (v36 - (_QWORD)v39);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x2AAAAAAAAAAAAAAALL)
      v42 = 0x5555555555555555;
    else
      v42 = v40;
    if (!v42)
    {
      v43 = 0;
      goto LABEL_104;
    }
    if (v42 < 0x5555555555555556)
    {
      v43 = (char *)operator new(3 * v42);
LABEL_104:
      v54 = &v43[v37 - v39];
      *v54 = v35;
      *(_WORD *)(v54 + 1) = 0;
      v38 = v54 + 3;
      if (v37 != v39)
      {
        do
        {
          v55 = *(_WORD *)(v37 - 3);
          v37 -= 3;
          v56 = v37[2];
          *(_WORD *)(v54 - 3) = v55;
          v54 -= 3;
          v54[2] = v56;
        }
        while (v37 != v39);
        v37 = a3[3];
      }
      a3[3] = v54;
      a3[4] = v38;
      a3[5] = &v43[3 * v42];
      if (v37)
        operator delete(v37);
      goto LABEL_109;
    }
LABEL_113:
    sub_239418A80();
  }
  p_s2 = &__s2;
  v28 = a1;
  v29 = v6;
  while (*v28 == *(unsigned __int8 *)p_s2)
  {
    ++v28;
    p_s2 = (void **)((char *)p_s2 + 1);
    if (!--v29)
      goto LABEL_63;
  }
LABEL_48:
  v59 = 5;
  strcpy((char *)&__s2, "green");
  if (v8 != 5)
    goto LABEL_55;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v7))
      goto LABEL_79;
LABEL_76:
    if (*((_BYTE *)a3 + 48))
    {
      *(a3[4] - 2) = (int)*a2;
      return;
    }
    goto LABEL_111;
  }
  if (!(_DWORD)v6)
    goto LABEL_76;
  v30 = &__s2;
  v31 = a1;
  v32 = v6;
  while (*v31 == *(unsigned __int8 *)v30)
  {
    ++v31;
    v30 = (void **)((char *)v30 + 1);
    if (!--v32)
      goto LABEL_76;
  }
LABEL_55:
  v59 = 4;
  strcpy((char *)&__s2, "blue");
  if (v8 == 4)
  {
    if ((v6 & 0x80) == 0)
    {
      if ((_DWORD)v6)
      {
        v33 = &__s2;
        v34 = a1;
        while (*v34 == *(unsigned __int8 *)v33)
        {
          ++v34;
          v33 = (void **)((char *)v33 + 1);
          if (!--v6)
            goto LABEL_89;
        }
        goto LABEL_79;
      }
LABEL_89:
      if (!*((_BYTE *)a3 + 48))
        goto LABEL_111;
      *(a3[4] - 1) = (int)*a2;
      return;
    }
    if (!memcmp(*(const void **)a1, &__s2, v7))
      goto LABEL_89;
  }
LABEL_79:
  sub_23941A4FC(&__s2, "nx");
  v44 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v45 = v44;
  if (v59 < 0)
  {
    operator delete(__s2);
    if (v45)
    {
LABEL_81:
      *(float *)&v46 = *a2;
      __s2 = (void *)v46;
      v58 = 0;
      if (*((_BYTE *)a3 + 80))
      {
        sub_2395BAEA0((void **)a3 + 7, (uint64_t *)&__s2);
        return;
      }
LABEL_111:
      sub_2394875CC();
    }
  }
  else if (v44)
  {
    goto LABEL_81;
  }
  sub_23941A4FC(&__s2, "ny");
  v47 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v48 = v47;
  if (v59 < 0)
  {
    operator delete(__s2);
    if (v48)
      goto LABEL_86;
  }
  else if (v47)
  {
LABEL_86:
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v20 = a3[8];
    goto LABEL_88;
  }
  sub_23941A4FC(&__s2, "nz");
  v50 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v59 < 0)
    operator delete(__s2);
  if (v50)
  {
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v26 = a3[8];
    goto LABEL_97;
  }
  sub_23941A4FC(&__s2, "cost");
  v52 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v59 < 0)
    operator delete(__s2);
  if (v52)
  {
    if (!*((_BYTE *)a3 + 144))
      goto LABEL_111;
    v53 = *a2;
    *(float *)&__s2 = v53;
    sub_2395BAFE4((uint64_t)(a3 + 15), &__s2);
  }
}

void sub_2395B6D78(unsigned __int8 *a1, __int8 *a2, char **a3, int8x8_t a4)
{
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  void **p_s2;
  unsigned __int8 *v29;
  uint64_t v30;
  void **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  void **v34;
  unsigned __int8 *v35;
  __int8 v36;
  unint64_t v37;
  __int8 *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _BOOL4 v45;
  int8x8_t v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  _BOOL4 v50;
  _BOOL4 v51;
  int8x8_t v52;
  __int8 *v53;
  __int16 v54;
  char v55;
  void *__s2;
  int v57;
  char v58;

  v58 = 1;
  LOWORD(__s2) = 120;
  v7 = a1[23];
  v8 = *((_QWORD *)a1 + 1);
  if ((v7 & 0x80u) == 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  if (v9 != 1)
    goto LABEL_41;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v8))
    {
      v58 = 1;
      LOWORD(__s2) = 121;
      if (!memcmp(*(const void **)a1, &__s2, v8))
      {
LABEL_29:
        v21 = a3[1];
LABEL_88:
        a4.i8[0] = *a2;
        *((float *)v21 - 2) = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a4)).i32[0];
        return;
      }
      v58 = 1;
      LOWORD(__s2) = 122;
      if (!memcmp(*(const void **)a1, &__s2, v8))
      {
LABEL_40:
        v27 = a3[1];
LABEL_97:
        a4.i8[0] = *a2;
        *((float *)v27 - 1) = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a4)).i32[0];
        return;
      }
      goto LABEL_79;
    }
LABEL_15:
    a4.i8[0] = *a2;
    v11 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a4)).i32[0];
    v13 = a3[1];
    v12 = (unint64_t)a3[2];
    if ((unint64_t)v13 < v12)
    {
      *(float *)v13 = v11;
      *((_DWORD *)v13 + 1) = 0;
      *((_DWORD *)v13 + 2) = 0;
      a3[1] = v13 + 12;
      return;
    }
    v14 = *a3;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a3) >> 2);
    v16 = v15 + 1;
    if (v15 + 1 > 0x1555555555555555)
      sub_2394189F8();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v14) >> 2);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0xAAAAAAAAAAAAAAALL)
      v18 = 0x1555555555555555;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 > 0x1555555555555555)
        goto LABEL_113;
      v19 = (char *)operator new(12 * v18);
    }
    else
    {
      v19 = 0;
    }
    v22 = &v19[12 * v15];
    *(float *)v22 = v11;
    *((_DWORD *)v22 + 1) = 0;
    *((_DWORD *)v22 + 2) = 0;
    v23 = v22 + 12;
    if (v13 != v14)
    {
      do
      {
        v24 = *(_QWORD *)(v13 - 12);
        v13 -= 12;
        v25 = *((_DWORD *)v13 + 2);
        *(_QWORD *)(v22 - 12) = v24;
        v22 -= 12;
        *((_DWORD *)v22 + 2) = v25;
      }
      while (v13 != v14);
      v13 = *a3;
    }
    *a3 = v22;
    a3[1] = v23;
    a3[2] = &v19[12 * v18];
    if (v13)
      operator delete(v13);
    a3[1] = v23;
    return;
  }
  if (!a1[23])
    goto LABEL_15;
  v10 = 0;
  while (a1[v10] == *((unsigned __int8 *)&__s2 + v10))
  {
    if (v7 == ++v10)
      goto LABEL_15;
  }
  v20 = 0;
  v58 = 1;
  LOWORD(__s2) = 121;
  while (a1[v20] == *((unsigned __int8 *)&__s2 + v20))
  {
    if (v7 == ++v20)
      goto LABEL_29;
  }
  v26 = 0;
  v58 = 1;
  LOWORD(__s2) = 122;
  while (a1[v26] == *((unsigned __int8 *)&__s2 + v26))
  {
    if (v7 == ++v26)
      goto LABEL_40;
  }
LABEL_41:
  v58 = 3;
  LODWORD(__s2) = 6579570;
  if (v9 != 3)
    goto LABEL_48;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v8))
      goto LABEL_79;
    goto LABEL_63;
  }
  if (!(_DWORD)v7)
  {
LABEL_63:
    if (!*((_BYTE *)a3 + 48))
      goto LABEL_111;
    v36 = *a2;
    v38 = a3[4];
    v37 = (unint64_t)a3[5];
    if ((unint64_t)v38 < v37)
    {
      *v38 = v36;
      *(_WORD *)(v38 + 1) = 0;
      v39 = v38 + 3;
LABEL_109:
      a3[4] = v39;
      return;
    }
    v40 = a3[3];
    v41 = 0xAAAAAAAAAAAAAAABLL * (v38 - v40) + 1;
    if (v41 >= 0x5555555555555556)
      sub_2394189F8();
    v42 = 0xAAAAAAAAAAAAAAABLL * (v37 - (_QWORD)v40);
    if (2 * v42 > v41)
      v41 = 2 * v42;
    if (v42 >= 0x2AAAAAAAAAAAAAAALL)
      v43 = 0x5555555555555555;
    else
      v43 = v41;
    if (!v43)
    {
      v44 = 0;
      goto LABEL_104;
    }
    if (v43 < 0x5555555555555556)
    {
      v44 = (char *)operator new(3 * v43);
LABEL_104:
      v53 = &v44[v38 - v40];
      *v53 = v36;
      *(_WORD *)(v53 + 1) = 0;
      v39 = v53 + 3;
      if (v38 != v40)
      {
        do
        {
          v54 = *(_WORD *)(v38 - 3);
          v38 -= 3;
          v55 = v38[2];
          *(_WORD *)(v53 - 3) = v54;
          v53 -= 3;
          v53[2] = v55;
        }
        while (v38 != v40);
        v38 = a3[3];
      }
      a3[3] = v53;
      a3[4] = v39;
      a3[5] = &v44[3 * v43];
      if (v38)
        operator delete(v38);
      goto LABEL_109;
    }
LABEL_113:
    sub_239418A80();
  }
  p_s2 = &__s2;
  v29 = a1;
  v30 = v7;
  while (*v29 == *(unsigned __int8 *)p_s2)
  {
    ++v29;
    p_s2 = (void **)((char *)p_s2 + 1);
    if (!--v30)
      goto LABEL_63;
  }
LABEL_48:
  v58 = 5;
  strcpy((char *)&__s2, "green");
  if (v9 != 5)
    goto LABEL_55;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v8))
      goto LABEL_79;
LABEL_76:
    if (*((_BYTE *)a3 + 48))
    {
      *(a3[4] - 2) = *a2;
      return;
    }
    goto LABEL_111;
  }
  if (!(_DWORD)v7)
    goto LABEL_76;
  v31 = &__s2;
  v32 = a1;
  v33 = v7;
  while (*v32 == *(unsigned __int8 *)v31)
  {
    ++v32;
    v31 = (void **)((char *)v31 + 1);
    if (!--v33)
      goto LABEL_76;
  }
LABEL_55:
  v58 = 4;
  strcpy((char *)&__s2, "blue");
  if (v9 == 4)
  {
    if ((v7 & 0x80) == 0)
    {
      if ((_DWORD)v7)
      {
        v34 = &__s2;
        v35 = a1;
        while (*v35 == *(unsigned __int8 *)v34)
        {
          ++v35;
          v34 = (void **)((char *)v34 + 1);
          if (!--v7)
            goto LABEL_89;
        }
        goto LABEL_79;
      }
LABEL_89:
      if (!*((_BYTE *)a3 + 48))
        goto LABEL_111;
      *(a3[4] - 1) = *a2;
      return;
    }
    if (!memcmp(*(const void **)a1, &__s2, v8))
      goto LABEL_89;
  }
LABEL_79:
  sub_23941A4FC(&__s2, "nx");
  v45 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v47 = v45;
  if (v58 < 0)
  {
    operator delete(__s2);
    if (v47)
    {
LABEL_81:
      v46.i8[0] = *a2;
      __s2 = (void *)COERCE_UNSIGNED_INT((float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v46)).i32[0]);
      v57 = 0;
      if (*((_BYTE *)a3 + 80))
      {
        sub_2395BAEA0((void **)a3 + 7, (uint64_t *)&__s2);
        return;
      }
LABEL_111:
      sub_2394875CC();
    }
  }
  else if (v45)
  {
    goto LABEL_81;
  }
  sub_23941A4FC(&__s2, "ny");
  v48 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v49 = v48;
  if (v58 < 0)
  {
    operator delete(__s2);
    if (v49)
      goto LABEL_86;
  }
  else if (v48)
  {
LABEL_86:
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v21 = a3[8];
    goto LABEL_88;
  }
  sub_23941A4FC(&__s2, "nz");
  v50 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v58 < 0)
    operator delete(__s2);
  if (v50)
  {
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v27 = a3[8];
    goto LABEL_97;
  }
  sub_23941A4FC(&__s2, "cost");
  v51 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v58 < 0)
    operator delete(__s2);
  if (v51)
  {
    if (!*((_BYTE *)a3 + 144))
      goto LABEL_111;
    v52.i8[0] = *a2;
    *(float *)&__s2 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v52)).i32[0];
    sub_2395BAFE4((uint64_t)(a3 + 15), &__s2);
  }
}

void sub_2395B73EC(unsigned __int8 *a1, char *a2, char **a3, float a4)
{
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  void **p_s2;
  unsigned __int8 *v29;
  uint64_t v30;
  void **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  void **v34;
  unsigned __int8 *v35;
  char v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _BOOL4 v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  _BOOL4 v50;
  _BOOL4 v51;
  unsigned int v52;
  char *v53;
  __int16 v54;
  char v55;
  void *__s2;
  int v57;
  char v58;

  v58 = 1;
  LOWORD(__s2) = 120;
  v7 = a1[23];
  v8 = *((_QWORD *)a1 + 1);
  if ((v7 & 0x80u) == 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  if (v9 != 1)
    goto LABEL_41;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v8))
    {
      v58 = 1;
      LOWORD(__s2) = 121;
      if (!memcmp(*(const void **)a1, &__s2, v8))
      {
LABEL_29:
        v21 = a3[1];
LABEL_88:
        LOBYTE(a4) = *a2;
        *((float *)v21 - 2) = (float)LODWORD(a4);
        return;
      }
      v58 = 1;
      LOWORD(__s2) = 122;
      if (!memcmp(*(const void **)a1, &__s2, v8))
      {
LABEL_40:
        v27 = a3[1];
LABEL_97:
        LOBYTE(a4) = *a2;
        *((float *)v27 - 1) = (float)LODWORD(a4);
        return;
      }
      goto LABEL_79;
    }
LABEL_15:
    LOBYTE(a4) = *a2;
    v11 = (float)LODWORD(a4);
    v13 = a3[1];
    v12 = (unint64_t)a3[2];
    if ((unint64_t)v13 < v12)
    {
      *(float *)v13 = v11;
      *((_DWORD *)v13 + 1) = 0;
      *((_DWORD *)v13 + 2) = 0;
      a3[1] = v13 + 12;
      return;
    }
    v14 = *a3;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a3) >> 2);
    v16 = v15 + 1;
    if (v15 + 1 > 0x1555555555555555)
      sub_2394189F8();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v14) >> 2);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0xAAAAAAAAAAAAAAALL)
      v18 = 0x1555555555555555;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 > 0x1555555555555555)
        goto LABEL_113;
      v19 = (char *)operator new(12 * v18);
    }
    else
    {
      v19 = 0;
    }
    v22 = &v19[12 * v15];
    *(float *)v22 = v11;
    *((_DWORD *)v22 + 1) = 0;
    *((_DWORD *)v22 + 2) = 0;
    v23 = v22 + 12;
    if (v13 != v14)
    {
      do
      {
        v24 = *(_QWORD *)(v13 - 12);
        v13 -= 12;
        v25 = *((_DWORD *)v13 + 2);
        *(_QWORD *)(v22 - 12) = v24;
        v22 -= 12;
        *((_DWORD *)v22 + 2) = v25;
      }
      while (v13 != v14);
      v13 = *a3;
    }
    *a3 = v22;
    a3[1] = v23;
    a3[2] = &v19[12 * v18];
    if (v13)
      operator delete(v13);
    a3[1] = v23;
    return;
  }
  if (!a1[23])
    goto LABEL_15;
  v10 = 0;
  while (a1[v10] == *((unsigned __int8 *)&__s2 + v10))
  {
    if (v7 == ++v10)
      goto LABEL_15;
  }
  v20 = 0;
  v58 = 1;
  LOWORD(__s2) = 121;
  while (a1[v20] == *((unsigned __int8 *)&__s2 + v20))
  {
    if (v7 == ++v20)
      goto LABEL_29;
  }
  v26 = 0;
  v58 = 1;
  LOWORD(__s2) = 122;
  while (a1[v26] == *((unsigned __int8 *)&__s2 + v26))
  {
    if (v7 == ++v26)
      goto LABEL_40;
  }
LABEL_41:
  v58 = 3;
  LODWORD(__s2) = 6579570;
  if (v9 != 3)
    goto LABEL_48;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v8))
      goto LABEL_79;
    goto LABEL_63;
  }
  if (!(_DWORD)v7)
  {
LABEL_63:
    if (!*((_BYTE *)a3 + 48))
      goto LABEL_111;
    v36 = *a2;
    v38 = a3[4];
    v37 = (unint64_t)a3[5];
    if ((unint64_t)v38 < v37)
    {
      *v38 = v36;
      *(_WORD *)(v38 + 1) = 0;
      v39 = v38 + 3;
LABEL_109:
      a3[4] = v39;
      return;
    }
    v40 = a3[3];
    v41 = 0xAAAAAAAAAAAAAAABLL * (v38 - v40) + 1;
    if (v41 >= 0x5555555555555556)
      sub_2394189F8();
    v42 = 0xAAAAAAAAAAAAAAABLL * (v37 - (_QWORD)v40);
    if (2 * v42 > v41)
      v41 = 2 * v42;
    if (v42 >= 0x2AAAAAAAAAAAAAAALL)
      v43 = 0x5555555555555555;
    else
      v43 = v41;
    if (!v43)
    {
      v44 = 0;
      goto LABEL_104;
    }
    if (v43 < 0x5555555555555556)
    {
      v44 = (char *)operator new(3 * v43);
LABEL_104:
      v53 = &v44[v38 - v40];
      *v53 = v36;
      *(_WORD *)(v53 + 1) = 0;
      v39 = v53 + 3;
      if (v38 != v40)
      {
        do
        {
          v54 = *(_WORD *)(v38 - 3);
          v38 -= 3;
          v55 = v38[2];
          *(_WORD *)(v53 - 3) = v54;
          v53 -= 3;
          v53[2] = v55;
        }
        while (v38 != v40);
        v38 = a3[3];
      }
      a3[3] = v53;
      a3[4] = v39;
      a3[5] = &v44[3 * v43];
      if (v38)
        operator delete(v38);
      goto LABEL_109;
    }
LABEL_113:
    sub_239418A80();
  }
  p_s2 = &__s2;
  v29 = a1;
  v30 = v7;
  while (*v29 == *(unsigned __int8 *)p_s2)
  {
    ++v29;
    p_s2 = (void **)((char *)p_s2 + 1);
    if (!--v30)
      goto LABEL_63;
  }
LABEL_48:
  v58 = 5;
  strcpy((char *)&__s2, "green");
  if (v9 != 5)
    goto LABEL_55;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v8))
      goto LABEL_79;
LABEL_76:
    if (*((_BYTE *)a3 + 48))
    {
      *(a3[4] - 2) = *a2;
      return;
    }
    goto LABEL_111;
  }
  if (!(_DWORD)v7)
    goto LABEL_76;
  v31 = &__s2;
  v32 = a1;
  v33 = v7;
  while (*v32 == *(unsigned __int8 *)v31)
  {
    ++v32;
    v31 = (void **)((char *)v31 + 1);
    if (!--v33)
      goto LABEL_76;
  }
LABEL_55:
  v58 = 4;
  strcpy((char *)&__s2, "blue");
  if (v9 == 4)
  {
    if ((v7 & 0x80) == 0)
    {
      if ((_DWORD)v7)
      {
        v34 = &__s2;
        v35 = a1;
        while (*v35 == *(unsigned __int8 *)v34)
        {
          ++v35;
          v34 = (void **)((char *)v34 + 1);
          if (!--v7)
            goto LABEL_89;
        }
        goto LABEL_79;
      }
LABEL_89:
      if (!*((_BYTE *)a3 + 48))
        goto LABEL_111;
      *(a3[4] - 1) = *a2;
      return;
    }
    if (!memcmp(*(const void **)a1, &__s2, v8))
      goto LABEL_89;
  }
LABEL_79:
  sub_23941A4FC(&__s2, "nx");
  v45 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v47 = v45;
  if (v58 < 0)
  {
    operator delete(__s2);
    if (v47)
    {
LABEL_81:
      LOBYTE(v46) = *a2;
      __s2 = (void *)COERCE_UNSIGNED_INT((float)v46);
      v57 = 0;
      if (*((_BYTE *)a3 + 80))
      {
        sub_2395BAEA0((void **)a3 + 7, (uint64_t *)&__s2);
        return;
      }
LABEL_111:
      sub_2394875CC();
    }
  }
  else if (v45)
  {
    goto LABEL_81;
  }
  sub_23941A4FC(&__s2, "ny");
  v48 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v49 = v48;
  if (v58 < 0)
  {
    operator delete(__s2);
    if (v49)
      goto LABEL_86;
  }
  else if (v48)
  {
LABEL_86:
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v21 = a3[8];
    goto LABEL_88;
  }
  sub_23941A4FC(&__s2, "nz");
  v50 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v58 < 0)
    operator delete(__s2);
  if (v50)
  {
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v27 = a3[8];
    goto LABEL_97;
  }
  sub_23941A4FC(&__s2, "cost");
  v51 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v58 < 0)
    operator delete(__s2);
  if (v51)
  {
    if (!*((_BYTE *)a3 + 144))
      goto LABEL_111;
    LOBYTE(v52) = *a2;
    *(float *)&__s2 = (float)v52;
    sub_2395BAFE4((uint64_t)(a3 + 15), &__s2);
  }
}

void sub_2395B7A38(unsigned __int8 *a1, int *a2, char **a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  void **p_s2;
  unsigned __int8 *v28;
  uint64_t v29;
  void **v30;
  unsigned __int8 *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _BOOL4 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  char *v50;
  __int16 v51;
  char v52;
  void *__s2;
  int v54;
  char v55;

  v55 = 1;
  LOWORD(__s2) = 120;
  v6 = a1[23];
  v7 = *((_QWORD *)a1 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = a1[23];
  else
    v8 = *((_QWORD *)a1 + 1);
  if (v8 != 1)
    goto LABEL_41;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v7))
    {
      v55 = 1;
      LOWORD(__s2) = 121;
      if (!memcmp(*(const void **)a1, &__s2, v7))
      {
LABEL_29:
        v20 = a3[1];
LABEL_88:
        *((float *)v20 - 2) = (float)*a2;
        return;
      }
      v55 = 1;
      LOWORD(__s2) = 122;
      if (!memcmp(*(const void **)a1, &__s2, v7))
      {
LABEL_40:
        v26 = a3[1];
LABEL_97:
        *((float *)v26 - 1) = (float)*a2;
        return;
      }
      goto LABEL_79;
    }
LABEL_15:
    v10 = (float)*a2;
    v12 = a3[1];
    v11 = (unint64_t)a3[2];
    if ((unint64_t)v12 < v11)
    {
      *(float *)v12 = v10;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = 0;
      a3[1] = v12 + 12;
      return;
    }
    v13 = *a3;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a3) >> 2);
    v15 = v14 + 1;
    if (v14 + 1 > 0x1555555555555555)
      sub_2394189F8();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v13) >> 2);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0xAAAAAAAAAAAAAAALL)
      v17 = 0x1555555555555555;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 > 0x1555555555555555)
        goto LABEL_113;
      v18 = (char *)operator new(12 * v17);
    }
    else
    {
      v18 = 0;
    }
    v21 = &v18[12 * v14];
    *(float *)v21 = v10;
    *((_DWORD *)v21 + 1) = 0;
    *((_DWORD *)v21 + 2) = 0;
    v22 = v21 + 12;
    if (v12 != v13)
    {
      do
      {
        v23 = *(_QWORD *)(v12 - 12);
        v12 -= 12;
        v24 = *((_DWORD *)v12 + 2);
        *(_QWORD *)(v21 - 12) = v23;
        v21 -= 12;
        *((_DWORD *)v21 + 2) = v24;
      }
      while (v12 != v13);
      v12 = *a3;
    }
    *a3 = v21;
    a3[1] = v22;
    a3[2] = &v18[12 * v17];
    if (v12)
      operator delete(v12);
    a3[1] = v22;
    return;
  }
  if (!a1[23])
    goto LABEL_15;
  v9 = 0;
  while (a1[v9] == *((unsigned __int8 *)&__s2 + v9))
  {
    if (v6 == ++v9)
      goto LABEL_15;
  }
  v19 = 0;
  v55 = 1;
  LOWORD(__s2) = 121;
  while (a1[v19] == *((unsigned __int8 *)&__s2 + v19))
  {
    if (v6 == ++v19)
      goto LABEL_29;
  }
  v25 = 0;
  v55 = 1;
  LOWORD(__s2) = 122;
  while (a1[v25] == *((unsigned __int8 *)&__s2 + v25))
  {
    if (v6 == ++v25)
      goto LABEL_40;
  }
LABEL_41:
  v55 = 3;
  LODWORD(__s2) = 6579570;
  if (v8 != 3)
    goto LABEL_48;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v7))
      goto LABEL_79;
    goto LABEL_63;
  }
  if (!(_DWORD)v6)
  {
LABEL_63:
    if (!*((_BYTE *)a3 + 48))
      goto LABEL_111;
    v35 = *a2;
    v37 = a3[4];
    v36 = (unint64_t)a3[5];
    if ((unint64_t)v37 < v36)
    {
      *v37 = v35;
      *(_WORD *)(v37 + 1) = 0;
      v38 = v37 + 3;
LABEL_109:
      a3[4] = v38;
      return;
    }
    v39 = a3[3];
    v40 = 0xAAAAAAAAAAAAAAABLL * (v37 - v39) + 1;
    if (v40 >= 0x5555555555555556)
      sub_2394189F8();
    v41 = 0xAAAAAAAAAAAAAAABLL * (v36 - (_QWORD)v39);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x2AAAAAAAAAAAAAAALL)
      v42 = 0x5555555555555555;
    else
      v42 = v40;
    if (!v42)
    {
      v43 = 0;
      goto LABEL_104;
    }
    if (v42 < 0x5555555555555556)
    {
      v43 = (char *)operator new(3 * v42);
LABEL_104:
      v50 = &v43[v37 - v39];
      *v50 = v35;
      *(_WORD *)(v50 + 1) = 0;
      v38 = v50 + 3;
      if (v37 != v39)
      {
        do
        {
          v51 = *(_WORD *)(v37 - 3);
          v37 -= 3;
          v52 = v37[2];
          *(_WORD *)(v50 - 3) = v51;
          v50 -= 3;
          v50[2] = v52;
        }
        while (v37 != v39);
        v37 = a3[3];
      }
      a3[3] = v50;
      a3[4] = v38;
      a3[5] = &v43[3 * v42];
      if (v37)
        operator delete(v37);
      goto LABEL_109;
    }
LABEL_113:
    sub_239418A80();
  }
  p_s2 = &__s2;
  v28 = a1;
  v29 = v6;
  while (*v28 == *(unsigned __int8 *)p_s2)
  {
    ++v28;
    p_s2 = (void **)((char *)p_s2 + 1);
    if (!--v29)
      goto LABEL_63;
  }
LABEL_48:
  v55 = 5;
  strcpy((char *)&__s2, "green");
  if (v8 != 5)
    goto LABEL_55;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v7))
      goto LABEL_79;
LABEL_76:
    if (*((_BYTE *)a3 + 48))
    {
      *(a3[4] - 2) = *a2;
      return;
    }
    goto LABEL_111;
  }
  if (!(_DWORD)v6)
    goto LABEL_76;
  v30 = &__s2;
  v31 = a1;
  v32 = v6;
  while (*v31 == *(unsigned __int8 *)v30)
  {
    ++v31;
    v30 = (void **)((char *)v30 + 1);
    if (!--v32)
      goto LABEL_76;
  }
LABEL_55:
  v55 = 4;
  strcpy((char *)&__s2, "blue");
  if (v8 == 4)
  {
    if ((v6 & 0x80) == 0)
    {
      if ((_DWORD)v6)
      {
        v33 = &__s2;
        v34 = a1;
        while (*v34 == *(unsigned __int8 *)v33)
        {
          ++v34;
          v33 = (void **)((char *)v33 + 1);
          if (!--v6)
            goto LABEL_89;
        }
        goto LABEL_79;
      }
LABEL_89:
      if (!*((_BYTE *)a3 + 48))
        goto LABEL_111;
      *(a3[4] - 1) = *a2;
      return;
    }
    if (!memcmp(*(const void **)a1, &__s2, v7))
      goto LABEL_89;
  }
LABEL_79:
  sub_23941A4FC(&__s2, "nx");
  v44 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v45 = v44;
  if (v55 < 0)
  {
    operator delete(__s2);
    if (v45)
    {
LABEL_81:
      *(float *)&__s2 = (float)*a2;
      HIDWORD(__s2) = 0;
      v54 = 0;
      if (*((_BYTE *)a3 + 80))
      {
        sub_2395BAEA0((void **)a3 + 7, (uint64_t *)&__s2);
        return;
      }
LABEL_111:
      sub_2394875CC();
    }
  }
  else if (v44)
  {
    goto LABEL_81;
  }
  sub_23941A4FC(&__s2, "ny");
  v46 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v47 = v46;
  if (v55 < 0)
  {
    operator delete(__s2);
    if (v47)
      goto LABEL_86;
  }
  else if (v46)
  {
LABEL_86:
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v20 = a3[8];
    goto LABEL_88;
  }
  sub_23941A4FC(&__s2, "nz");
  v48 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v55 < 0)
    operator delete(__s2);
  if (v48)
  {
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v26 = a3[8];
    goto LABEL_97;
  }
  sub_23941A4FC(&__s2, "cost");
  v49 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v55 < 0)
    operator delete(__s2);
  if (v49)
  {
    if (!*((_BYTE *)a3 + 144))
      goto LABEL_111;
    *(float *)&__s2 = (float)*a2;
    sub_2395BAFE4((uint64_t)(a3 + 15), &__s2);
  }
}

void sub_2395B8084(unsigned __int8 *a1, unsigned int *a2, char **a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  void **p_s2;
  unsigned __int8 *v28;
  uint64_t v29;
  void **v30;
  unsigned __int8 *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _BOOL4 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  char *v50;
  __int16 v51;
  char v52;
  void *__s2;
  int v54;
  char v55;

  v55 = 1;
  LOWORD(__s2) = 120;
  v6 = a1[23];
  v7 = *((_QWORD *)a1 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = a1[23];
  else
    v8 = *((_QWORD *)a1 + 1);
  if (v8 != 1)
    goto LABEL_41;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v7))
    {
      v55 = 1;
      LOWORD(__s2) = 121;
      if (!memcmp(*(const void **)a1, &__s2, v7))
      {
LABEL_29:
        v20 = a3[1];
LABEL_88:
        *((float *)v20 - 2) = (float)*a2;
        return;
      }
      v55 = 1;
      LOWORD(__s2) = 122;
      if (!memcmp(*(const void **)a1, &__s2, v7))
      {
LABEL_40:
        v26 = a3[1];
LABEL_97:
        *((float *)v26 - 1) = (float)*a2;
        return;
      }
      goto LABEL_79;
    }
LABEL_15:
    v10 = (float)*a2;
    v12 = a3[1];
    v11 = (unint64_t)a3[2];
    if ((unint64_t)v12 < v11)
    {
      *(float *)v12 = v10;
      *((_DWORD *)v12 + 1) = 0;
      *((_DWORD *)v12 + 2) = 0;
      a3[1] = v12 + 12;
      return;
    }
    v13 = *a3;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a3) >> 2);
    v15 = v14 + 1;
    if (v14 + 1 > 0x1555555555555555)
      sub_2394189F8();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v13) >> 2);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0xAAAAAAAAAAAAAAALL)
      v17 = 0x1555555555555555;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 > 0x1555555555555555)
        goto LABEL_113;
      v18 = (char *)operator new(12 * v17);
    }
    else
    {
      v18 = 0;
    }
    v21 = &v18[12 * v14];
    *(float *)v21 = v10;
    *((_DWORD *)v21 + 1) = 0;
    *((_DWORD *)v21 + 2) = 0;
    v22 = v21 + 12;
    if (v12 != v13)
    {
      do
      {
        v23 = *(_QWORD *)(v12 - 12);
        v12 -= 12;
        v24 = *((_DWORD *)v12 + 2);
        *(_QWORD *)(v21 - 12) = v23;
        v21 -= 12;
        *((_DWORD *)v21 + 2) = v24;
      }
      while (v12 != v13);
      v12 = *a3;
    }
    *a3 = v21;
    a3[1] = v22;
    a3[2] = &v18[12 * v17];
    if (v12)
      operator delete(v12);
    a3[1] = v22;
    return;
  }
  if (!a1[23])
    goto LABEL_15;
  v9 = 0;
  while (a1[v9] == *((unsigned __int8 *)&__s2 + v9))
  {
    if (v6 == ++v9)
      goto LABEL_15;
  }
  v19 = 0;
  v55 = 1;
  LOWORD(__s2) = 121;
  while (a1[v19] == *((unsigned __int8 *)&__s2 + v19))
  {
    if (v6 == ++v19)
      goto LABEL_29;
  }
  v25 = 0;
  v55 = 1;
  LOWORD(__s2) = 122;
  while (a1[v25] == *((unsigned __int8 *)&__s2 + v25))
  {
    if (v6 == ++v25)
      goto LABEL_40;
  }
LABEL_41:
  v55 = 3;
  LODWORD(__s2) = 6579570;
  if (v8 != 3)
    goto LABEL_48;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v7))
      goto LABEL_79;
    goto LABEL_63;
  }
  if (!(_DWORD)v6)
  {
LABEL_63:
    if (!*((_BYTE *)a3 + 48))
      goto LABEL_111;
    v35 = *a2;
    v37 = a3[4];
    v36 = (unint64_t)a3[5];
    if ((unint64_t)v37 < v36)
    {
      *v37 = v35;
      *(_WORD *)(v37 + 1) = 0;
      v38 = v37 + 3;
LABEL_109:
      a3[4] = v38;
      return;
    }
    v39 = a3[3];
    v40 = 0xAAAAAAAAAAAAAAABLL * (v37 - v39) + 1;
    if (v40 >= 0x5555555555555556)
      sub_2394189F8();
    v41 = 0xAAAAAAAAAAAAAAABLL * (v36 - (_QWORD)v39);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x2AAAAAAAAAAAAAAALL)
      v42 = 0x5555555555555555;
    else
      v42 = v40;
    if (!v42)
    {
      v43 = 0;
      goto LABEL_104;
    }
    if (v42 < 0x5555555555555556)
    {
      v43 = (char *)operator new(3 * v42);
LABEL_104:
      v50 = &v43[v37 - v39];
      *v50 = v35;
      *(_WORD *)(v50 + 1) = 0;
      v38 = v50 + 3;
      if (v37 != v39)
      {
        do
        {
          v51 = *(_WORD *)(v37 - 3);
          v37 -= 3;
          v52 = v37[2];
          *(_WORD *)(v50 - 3) = v51;
          v50 -= 3;
          v50[2] = v52;
        }
        while (v37 != v39);
        v37 = a3[3];
      }
      a3[3] = v50;
      a3[4] = v38;
      a3[5] = &v43[3 * v42];
      if (v37)
        operator delete(v37);
      goto LABEL_109;
    }
LABEL_113:
    sub_239418A80();
  }
  p_s2 = &__s2;
  v28 = a1;
  v29 = v6;
  while (*v28 == *(unsigned __int8 *)p_s2)
  {
    ++v28;
    p_s2 = (void **)((char *)p_s2 + 1);
    if (!--v29)
      goto LABEL_63;
  }
LABEL_48:
  v55 = 5;
  strcpy((char *)&__s2, "green");
  if (v8 != 5)
    goto LABEL_55;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v7))
      goto LABEL_79;
LABEL_76:
    if (*((_BYTE *)a3 + 48))
    {
      *(a3[4] - 2) = *a2;
      return;
    }
    goto LABEL_111;
  }
  if (!(_DWORD)v6)
    goto LABEL_76;
  v30 = &__s2;
  v31 = a1;
  v32 = v6;
  while (*v31 == *(unsigned __int8 *)v30)
  {
    ++v31;
    v30 = (void **)((char *)v30 + 1);
    if (!--v32)
      goto LABEL_76;
  }
LABEL_55:
  v55 = 4;
  strcpy((char *)&__s2, "blue");
  if (v8 == 4)
  {
    if ((v6 & 0x80) == 0)
    {
      if ((_DWORD)v6)
      {
        v33 = &__s2;
        v34 = a1;
        while (*v34 == *(unsigned __int8 *)v33)
        {
          ++v34;
          v33 = (void **)((char *)v33 + 1);
          if (!--v6)
            goto LABEL_89;
        }
        goto LABEL_79;
      }
LABEL_89:
      if (!*((_BYTE *)a3 + 48))
        goto LABEL_111;
      *(a3[4] - 1) = *a2;
      return;
    }
    if (!memcmp(*(const void **)a1, &__s2, v7))
      goto LABEL_89;
  }
LABEL_79:
  sub_23941A4FC(&__s2, "nx");
  v44 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v45 = v44;
  if (v55 < 0)
  {
    operator delete(__s2);
    if (v45)
    {
LABEL_81:
      *(float *)&__s2 = (float)*a2;
      HIDWORD(__s2) = 0;
      v54 = 0;
      if (*((_BYTE *)a3 + 80))
      {
        sub_2395BAEA0((void **)a3 + 7, (uint64_t *)&__s2);
        return;
      }
LABEL_111:
      sub_2394875CC();
    }
  }
  else if (v44)
  {
    goto LABEL_81;
  }
  sub_23941A4FC(&__s2, "ny");
  v46 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v47 = v46;
  if (v55 < 0)
  {
    operator delete(__s2);
    if (v47)
      goto LABEL_86;
  }
  else if (v46)
  {
LABEL_86:
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v20 = a3[8];
    goto LABEL_88;
  }
  sub_23941A4FC(&__s2, "nz");
  v48 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v55 < 0)
    operator delete(__s2);
  if (v48)
  {
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v26 = a3[8];
    goto LABEL_97;
  }
  sub_23941A4FC(&__s2, "cost");
  v49 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v55 < 0)
    operator delete(__s2);
  if (v49)
  {
    if (!*((_BYTE *)a3 + 144))
      goto LABEL_111;
    *(float *)&__s2 = (float)*a2;
    sub_2395BAFE4((uint64_t)(a3 + 15), &__s2);
  }
}

void sub_2395B86D0(unsigned __int8 *a1, __int16 *a2, char **a3, int16x4_t a4)
{
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  void **p_s2;
  unsigned __int8 *v29;
  uint64_t v30;
  void **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  void **v34;
  unsigned __int8 *v35;
  __int16 v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _BOOL4 v45;
  int16x4_t v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  _BOOL4 v50;
  _BOOL4 v51;
  int16x4_t v52;
  char *v53;
  __int16 v54;
  char v55;
  void *__s2;
  int v57;
  char v58;

  v58 = 1;
  LOWORD(__s2) = 120;
  v7 = a1[23];
  v8 = *((_QWORD *)a1 + 1);
  if ((v7 & 0x80u) == 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  if (v9 != 1)
    goto LABEL_41;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v8))
    {
      v58 = 1;
      LOWORD(__s2) = 121;
      if (!memcmp(*(const void **)a1, &__s2, v8))
      {
LABEL_29:
        v21 = a3[1];
LABEL_88:
        a4.i16[0] = *a2;
        *((float *)v21 - 2) = (float)vmovl_s16(a4).i32[0];
        return;
      }
      v58 = 1;
      LOWORD(__s2) = 122;
      if (!memcmp(*(const void **)a1, &__s2, v8))
      {
LABEL_40:
        v27 = a3[1];
LABEL_97:
        a4.i16[0] = *a2;
        *((float *)v27 - 1) = (float)vmovl_s16(a4).i32[0];
        return;
      }
      goto LABEL_79;
    }
LABEL_15:
    a4.i16[0] = *a2;
    v11 = (float)vmovl_s16(a4).i32[0];
    v13 = a3[1];
    v12 = (unint64_t)a3[2];
    if ((unint64_t)v13 < v12)
    {
      *(float *)v13 = v11;
      *((_DWORD *)v13 + 1) = 0;
      *((_DWORD *)v13 + 2) = 0;
      a3[1] = v13 + 12;
      return;
    }
    v14 = *a3;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a3) >> 2);
    v16 = v15 + 1;
    if (v15 + 1 > 0x1555555555555555)
      sub_2394189F8();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v14) >> 2);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0xAAAAAAAAAAAAAAALL)
      v18 = 0x1555555555555555;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 > 0x1555555555555555)
        goto LABEL_113;
      v19 = (char *)operator new(12 * v18);
    }
    else
    {
      v19 = 0;
    }
    v22 = &v19[12 * v15];
    *(float *)v22 = v11;
    *((_DWORD *)v22 + 1) = 0;
    *((_DWORD *)v22 + 2) = 0;
    v23 = v22 + 12;
    if (v13 != v14)
    {
      do
      {
        v24 = *(_QWORD *)(v13 - 12);
        v13 -= 12;
        v25 = *((_DWORD *)v13 + 2);
        *(_QWORD *)(v22 - 12) = v24;
        v22 -= 12;
        *((_DWORD *)v22 + 2) = v25;
      }
      while (v13 != v14);
      v13 = *a3;
    }
    *a3 = v22;
    a3[1] = v23;
    a3[2] = &v19[12 * v18];
    if (v13)
      operator delete(v13);
    a3[1] = v23;
    return;
  }
  if (!a1[23])
    goto LABEL_15;
  v10 = 0;
  while (a1[v10] == *((unsigned __int8 *)&__s2 + v10))
  {
    if (v7 == ++v10)
      goto LABEL_15;
  }
  v20 = 0;
  v58 = 1;
  LOWORD(__s2) = 121;
  while (a1[v20] == *((unsigned __int8 *)&__s2 + v20))
  {
    if (v7 == ++v20)
      goto LABEL_29;
  }
  v26 = 0;
  v58 = 1;
  LOWORD(__s2) = 122;
  while (a1[v26] == *((unsigned __int8 *)&__s2 + v26))
  {
    if (v7 == ++v26)
      goto LABEL_40;
  }
LABEL_41:
  v58 = 3;
  LODWORD(__s2) = 6579570;
  if (v9 != 3)
    goto LABEL_48;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v8))
      goto LABEL_79;
    goto LABEL_63;
  }
  if (!(_DWORD)v7)
  {
LABEL_63:
    if (!*((_BYTE *)a3 + 48))
      goto LABEL_111;
    v36 = *a2;
    v38 = a3[4];
    v37 = (unint64_t)a3[5];
    if ((unint64_t)v38 < v37)
    {
      *v38 = v36;
      *(_WORD *)(v38 + 1) = 0;
      v39 = v38 + 3;
LABEL_109:
      a3[4] = v39;
      return;
    }
    v40 = a3[3];
    v41 = 0xAAAAAAAAAAAAAAABLL * (v38 - v40) + 1;
    if (v41 >= 0x5555555555555556)
      sub_2394189F8();
    v42 = 0xAAAAAAAAAAAAAAABLL * (v37 - (_QWORD)v40);
    if (2 * v42 > v41)
      v41 = 2 * v42;
    if (v42 >= 0x2AAAAAAAAAAAAAAALL)
      v43 = 0x5555555555555555;
    else
      v43 = v41;
    if (!v43)
    {
      v44 = 0;
      goto LABEL_104;
    }
    if (v43 < 0x5555555555555556)
    {
      v44 = (char *)operator new(3 * v43);
LABEL_104:
      v53 = &v44[v38 - v40];
      *v53 = v36;
      *(_WORD *)(v53 + 1) = 0;
      v39 = v53 + 3;
      if (v38 != v40)
      {
        do
        {
          v54 = *(_WORD *)(v38 - 3);
          v38 -= 3;
          v55 = v38[2];
          *(_WORD *)(v53 - 3) = v54;
          v53 -= 3;
          v53[2] = v55;
        }
        while (v38 != v40);
        v38 = a3[3];
      }
      a3[3] = v53;
      a3[4] = v39;
      a3[5] = &v44[3 * v43];
      if (v38)
        operator delete(v38);
      goto LABEL_109;
    }
LABEL_113:
    sub_239418A80();
  }
  p_s2 = &__s2;
  v29 = a1;
  v30 = v7;
  while (*v29 == *(unsigned __int8 *)p_s2)
  {
    ++v29;
    p_s2 = (void **)((char *)p_s2 + 1);
    if (!--v30)
      goto LABEL_63;
  }
LABEL_48:
  v58 = 5;
  strcpy((char *)&__s2, "green");
  if (v9 != 5)
    goto LABEL_55;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v8))
      goto LABEL_79;
LABEL_76:
    if (*((_BYTE *)a3 + 48))
    {
      *(a3[4] - 2) = *(_BYTE *)a2;
      return;
    }
    goto LABEL_111;
  }
  if (!(_DWORD)v7)
    goto LABEL_76;
  v31 = &__s2;
  v32 = a1;
  v33 = v7;
  while (*v32 == *(unsigned __int8 *)v31)
  {
    ++v32;
    v31 = (void **)((char *)v31 + 1);
    if (!--v33)
      goto LABEL_76;
  }
LABEL_55:
  v58 = 4;
  strcpy((char *)&__s2, "blue");
  if (v9 == 4)
  {
    if ((v7 & 0x80) == 0)
    {
      if ((_DWORD)v7)
      {
        v34 = &__s2;
        v35 = a1;
        while (*v35 == *(unsigned __int8 *)v34)
        {
          ++v35;
          v34 = (void **)((char *)v34 + 1);
          if (!--v7)
            goto LABEL_89;
        }
        goto LABEL_79;
      }
LABEL_89:
      if (!*((_BYTE *)a3 + 48))
        goto LABEL_111;
      *(a3[4] - 1) = *(_BYTE *)a2;
      return;
    }
    if (!memcmp(*(const void **)a1, &__s2, v8))
      goto LABEL_89;
  }
LABEL_79:
  sub_23941A4FC(&__s2, "nx");
  v45 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v47 = v45;
  if (v58 < 0)
  {
    operator delete(__s2);
    if (v47)
    {
LABEL_81:
      v46.i16[0] = *a2;
      __s2 = (void *)COERCE_UNSIGNED_INT((float)vmovl_s16(v46).i32[0]);
      v57 = 0;
      if (*((_BYTE *)a3 + 80))
      {
        sub_2395BAEA0((void **)a3 + 7, (uint64_t *)&__s2);
        return;
      }
LABEL_111:
      sub_2394875CC();
    }
  }
  else if (v45)
  {
    goto LABEL_81;
  }
  sub_23941A4FC(&__s2, "ny");
  v48 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v49 = v48;
  if (v58 < 0)
  {
    operator delete(__s2);
    if (v49)
      goto LABEL_86;
  }
  else if (v48)
  {
LABEL_86:
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v21 = a3[8];
    goto LABEL_88;
  }
  sub_23941A4FC(&__s2, "nz");
  v50 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v58 < 0)
    operator delete(__s2);
  if (v50)
  {
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v27 = a3[8];
    goto LABEL_97;
  }
  sub_23941A4FC(&__s2, "cost");
  v51 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v58 < 0)
    operator delete(__s2);
  if (v51)
  {
    if (!*((_BYTE *)a3 + 144))
      goto LABEL_111;
    v52.i16[0] = *a2;
    *(float *)&__s2 = (float)vmovl_s16(v52).i32[0];
    sub_2395BAFE4((uint64_t)(a3 + 15), &__s2);
  }
}

void sub_2395B8D30(unsigned __int8 *a1, _WORD *a2, char **a3, float a4)
{
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  void **p_s2;
  unsigned __int8 *v29;
  uint64_t v30;
  void **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  void **v34;
  unsigned __int8 *v35;
  __int16 v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _BOOL4 v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  _BOOL4 v50;
  _BOOL4 v51;
  unsigned int v52;
  char *v53;
  __int16 v54;
  char v55;
  void *__s2;
  int v57;
  char v58;

  v58 = 1;
  LOWORD(__s2) = 120;
  v7 = a1[23];
  v8 = *((_QWORD *)a1 + 1);
  if ((v7 & 0x80u) == 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  if (v9 != 1)
    goto LABEL_41;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v8))
    {
      v58 = 1;
      LOWORD(__s2) = 121;
      if (!memcmp(*(const void **)a1, &__s2, v8))
      {
LABEL_29:
        v21 = a3[1];
LABEL_88:
        LOWORD(a4) = *a2;
        *((float *)v21 - 2) = (float)LODWORD(a4);
        return;
      }
      v58 = 1;
      LOWORD(__s2) = 122;
      if (!memcmp(*(const void **)a1, &__s2, v8))
      {
LABEL_40:
        v27 = a3[1];
LABEL_97:
        LOWORD(a4) = *a2;
        *((float *)v27 - 1) = (float)LODWORD(a4);
        return;
      }
      goto LABEL_79;
    }
LABEL_15:
    LOWORD(a4) = *a2;
    v11 = (float)LODWORD(a4);
    v13 = a3[1];
    v12 = (unint64_t)a3[2];
    if ((unint64_t)v13 < v12)
    {
      *(float *)v13 = v11;
      *((_DWORD *)v13 + 1) = 0;
      *((_DWORD *)v13 + 2) = 0;
      a3[1] = v13 + 12;
      return;
    }
    v14 = *a3;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a3) >> 2);
    v16 = v15 + 1;
    if (v15 + 1 > 0x1555555555555555)
      sub_2394189F8();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v14) >> 2);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0xAAAAAAAAAAAAAAALL)
      v18 = 0x1555555555555555;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 > 0x1555555555555555)
        goto LABEL_113;
      v19 = (char *)operator new(12 * v18);
    }
    else
    {
      v19 = 0;
    }
    v22 = &v19[12 * v15];
    *(float *)v22 = v11;
    *((_DWORD *)v22 + 1) = 0;
    *((_DWORD *)v22 + 2) = 0;
    v23 = v22 + 12;
    if (v13 != v14)
    {
      do
      {
        v24 = *(_QWORD *)(v13 - 12);
        v13 -= 12;
        v25 = *((_DWORD *)v13 + 2);
        *(_QWORD *)(v22 - 12) = v24;
        v22 -= 12;
        *((_DWORD *)v22 + 2) = v25;
      }
      while (v13 != v14);
      v13 = *a3;
    }
    *a3 = v22;
    a3[1] = v23;
    a3[2] = &v19[12 * v18];
    if (v13)
      operator delete(v13);
    a3[1] = v23;
    return;
  }
  if (!a1[23])
    goto LABEL_15;
  v10 = 0;
  while (a1[v10] == *((unsigned __int8 *)&__s2 + v10))
  {
    if (v7 == ++v10)
      goto LABEL_15;
  }
  v20 = 0;
  v58 = 1;
  LOWORD(__s2) = 121;
  while (a1[v20] == *((unsigned __int8 *)&__s2 + v20))
  {
    if (v7 == ++v20)
      goto LABEL_29;
  }
  v26 = 0;
  v58 = 1;
  LOWORD(__s2) = 122;
  while (a1[v26] == *((unsigned __int8 *)&__s2 + v26))
  {
    if (v7 == ++v26)
      goto LABEL_40;
  }
LABEL_41:
  v58 = 3;
  LODWORD(__s2) = 6579570;
  if (v9 != 3)
    goto LABEL_48;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v8))
      goto LABEL_79;
    goto LABEL_63;
  }
  if (!(_DWORD)v7)
  {
LABEL_63:
    if (!*((_BYTE *)a3 + 48))
      goto LABEL_111;
    v36 = *a2;
    v38 = a3[4];
    v37 = (unint64_t)a3[5];
    if ((unint64_t)v38 < v37)
    {
      *v38 = v36;
      *(_WORD *)(v38 + 1) = 0;
      v39 = v38 + 3;
LABEL_109:
      a3[4] = v39;
      return;
    }
    v40 = a3[3];
    v41 = 0xAAAAAAAAAAAAAAABLL * (v38 - v40) + 1;
    if (v41 >= 0x5555555555555556)
      sub_2394189F8();
    v42 = 0xAAAAAAAAAAAAAAABLL * (v37 - (_QWORD)v40);
    if (2 * v42 > v41)
      v41 = 2 * v42;
    if (v42 >= 0x2AAAAAAAAAAAAAAALL)
      v43 = 0x5555555555555555;
    else
      v43 = v41;
    if (!v43)
    {
      v44 = 0;
      goto LABEL_104;
    }
    if (v43 < 0x5555555555555556)
    {
      v44 = (char *)operator new(3 * v43);
LABEL_104:
      v53 = &v44[v38 - v40];
      *v53 = v36;
      *(_WORD *)(v53 + 1) = 0;
      v39 = v53 + 3;
      if (v38 != v40)
      {
        do
        {
          v54 = *(_WORD *)(v38 - 3);
          v38 -= 3;
          v55 = v38[2];
          *(_WORD *)(v53 - 3) = v54;
          v53 -= 3;
          v53[2] = v55;
        }
        while (v38 != v40);
        v38 = a3[3];
      }
      a3[3] = v53;
      a3[4] = v39;
      a3[5] = &v44[3 * v43];
      if (v38)
        operator delete(v38);
      goto LABEL_109;
    }
LABEL_113:
    sub_239418A80();
  }
  p_s2 = &__s2;
  v29 = a1;
  v30 = v7;
  while (*v29 == *(unsigned __int8 *)p_s2)
  {
    ++v29;
    p_s2 = (void **)((char *)p_s2 + 1);
    if (!--v30)
      goto LABEL_63;
  }
LABEL_48:
  v58 = 5;
  strcpy((char *)&__s2, "green");
  if (v9 != 5)
    goto LABEL_55;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, &__s2, v8))
      goto LABEL_79;
LABEL_76:
    if (*((_BYTE *)a3 + 48))
    {
      *(a3[4] - 2) = *(_BYTE *)a2;
      return;
    }
    goto LABEL_111;
  }
  if (!(_DWORD)v7)
    goto LABEL_76;
  v31 = &__s2;
  v32 = a1;
  v33 = v7;
  while (*v32 == *(unsigned __int8 *)v31)
  {
    ++v32;
    v31 = (void **)((char *)v31 + 1);
    if (!--v33)
      goto LABEL_76;
  }
LABEL_55:
  v58 = 4;
  strcpy((char *)&__s2, "blue");
  if (v9 == 4)
  {
    if ((v7 & 0x80) == 0)
    {
      if ((_DWORD)v7)
      {
        v34 = &__s2;
        v35 = a1;
        while (*v35 == *(unsigned __int8 *)v34)
        {
          ++v35;
          v34 = (void **)((char *)v34 + 1);
          if (!--v7)
            goto LABEL_89;
        }
        goto LABEL_79;
      }
LABEL_89:
      if (!*((_BYTE *)a3 + 48))
        goto LABEL_111;
      *(a3[4] - 1) = *(_BYTE *)a2;
      return;
    }
    if (!memcmp(*(const void **)a1, &__s2, v8))
      goto LABEL_89;
  }
LABEL_79:
  sub_23941A4FC(&__s2, "nx");
  v45 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v47 = v45;
  if (v58 < 0)
  {
    operator delete(__s2);
    if (v47)
    {
LABEL_81:
      LOWORD(v46) = *a2;
      __s2 = (void *)COERCE_UNSIGNED_INT((float)v46);
      v57 = 0;
      if (*((_BYTE *)a3 + 80))
      {
        sub_2395BAEA0((void **)a3 + 7, (uint64_t *)&__s2);
        return;
      }
LABEL_111:
      sub_2394875CC();
    }
  }
  else if (v45)
  {
    goto LABEL_81;
  }
  sub_23941A4FC(&__s2, "ny");
  v48 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  v49 = v48;
  if (v58 < 0)
  {
    operator delete(__s2);
    if (v49)
      goto LABEL_86;
  }
  else if (v48)
  {
LABEL_86:
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v21 = a3[8];
    goto LABEL_88;
  }
  sub_23941A4FC(&__s2, "nz");
  v50 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v58 < 0)
    operator delete(__s2);
  if (v50)
  {
    if (!*((_BYTE *)a3 + 80))
      goto LABEL_111;
    v27 = a3[8];
    goto LABEL_97;
  }
  sub_23941A4FC(&__s2, "cost");
  v51 = sub_2395B6024(a1, (unsigned __int8 *)&__s2);
  if (v58 < 0)
    operator delete(__s2);
  if (v51)
  {
    if (!*((_BYTE *)a3 + 144))
      goto LABEL_111;
    LOWORD(v52) = *a2;
    *(float *)&__s2 = (float)v52;
    sub_2395BAFE4((uint64_t)(a3 + 15), &__s2);
  }
}

void sub_2395B937C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint32x4_t v22;
  uint32x4_t *v23;
  _QWORD *v24;
  int64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char v29[24];
  _OWORD __s2[2];

  BYTE7(__s2[1]) = 19;
  strcpy((char *)__s2, "vertex_visibilities");
  v5 = a1[23];
  if ((v5 & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  if (v6 != 19)
    return;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, __s2, *((_QWORD *)a1 + 1)))
      return;
LABEL_13:
    v29[23] = 12;
    strcpy(v29, "vertex_index");
    v10 = a2[23];
    if ((v10 & 0x80u) == 0)
      v11 = a2[23];
    else
      v11 = *((_QWORD *)a2 + 1);
    if (v11 != 12)
      return;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, v29, *((_QWORD *)a2 + 1)))
        return;
    }
    else if (a2[23])
    {
      v12 = v29;
      while (*a2 == *v12)
      {
        ++a2;
        ++v12;
        if (!--v10)
          goto LABEL_24;
      }
      return;
    }
LABEL_24:
    v14 = *a3;
    v13 = a3[1];
    memset(__s2, 0, 24);
    v15 = v13 - v14;
    if (v13 == v14)
    {
      v16 = 0;
      v17 = 0;
    }
    else
    {
      if (v15 < 0)
        sub_2394189F8();
      v16 = (char *)operator new(v13 - v14);
      *(_QWORD *)&__s2[0] = v16;
      *(_QWORD *)&__s2[1] = &v16[4 * (v15 >> 2)];
      bzero(v16, v15);
      v17 = &v16[v15];
      *((_QWORD *)&__s2[0] + 1) = &v16[v15];
      if ((unint64_t)(v15 >> 2) <= 1)
        v18 = 1;
      else
        v18 = v15 >> 2;
      if (v18 >= 8)
      {
        v20 = 0;
        v19 = v18 & 0xFFFFFFFFFFFFFFF8;
        v21 = v18 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v22 = vcvtq_u32_f32(*(float32x4_t *)(v14 + v20 + 16));
          v23 = (uint32x4_t *)&v16[v20];
          *v23 = vcvtq_u32_f32(*(float32x4_t *)(v14 + v20));
          v23[1] = v22;
          v20 += 32;
          v21 -= 8;
        }
        while (v21);
        goto LABEL_37;
      }
      v19 = 0;
      do
      {
        *(_DWORD *)&v16[4 * v19] = *(float *)(v14 + 4 * v19);
        ++v19;
LABEL_37:
        ;
      }
      while (v18 != v19);
    }
    if (!*(_BYTE *)(a4 + 112))
      sub_2394875CC();
    v24 = *(_QWORD **)(a4 + 96);
    if ((unint64_t)v24 >= *(_QWORD *)(a4 + 104))
    {
      v28 = sub_2395BB144((char **)(a4 + 88), (uint64_t)__s2);
    }
    else
    {
      *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      v25 = v17 - v16;
      if (v17 != v16)
      {
        if (v25 < 0)
          sub_2394189F8();
        v26 = (char *)operator new(v17 - v16);
        *v24 = v26;
        v24[1] = v26;
        v27 = &v26[4 * (v25 >> 2)];
        v24[2] = v27;
        memcpy(v26, v16, v25);
        v24[1] = v27;
      }
      v28 = (char *)(v24 + 3);
      *(_QWORD *)(a4 + 96) = v24 + 3;
    }
    *(_QWORD *)(a4 + 96) = v28;
    if (*(_QWORD *)&__s2[0])
    {
      *((_QWORD *)&__s2[0] + 1) = *(_QWORD *)&__s2[0];
      operator delete(*(void **)&__s2[0]);
    }
    return;
  }
  if (!a1[23])
    goto LABEL_13;
  v9 = (unsigned __int8 *)__s2;
  while (*a1 == *v9)
  {
    ++a1;
    ++v9;
    if (!--v5)
      goto LABEL_13;
  }
}

void sub_2395B9650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v15 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(v13 + 96) = v14;
  if (!a13)
    JUMPOUT(0x2395B9584);
  JUMPOUT(0x2395B957CLL);
}

void sub_2395B9674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13)
    JUMPOUT(0x2395B9584);
  JUMPOUT(0x2395B957CLL);
}

void sub_2395B9684(unsigned __int8 *a1, unsigned __int8 *a2, float64x2_t **a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  float64x2_t *v13;
  float64x2_t *v14;
  uint64_t v15;
  size_t v16;
  int32x4_t *v17;
  unint64_t v18;
  int32x4_t *v19;
  unint64_t v20;
  unint64_t v21;
  float64x2_t *v22;
  int32x4_t *v23;
  unint64_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  _QWORD *v29;
  int64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char v34[24];
  _OWORD __s2[2];

  BYTE7(__s2[1]) = 19;
  strcpy((char *)__s2, "vertex_visibilities");
  v5 = a1[23];
  if ((v5 & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  if (v6 != 19)
    return;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, __s2, *((_QWORD *)a1 + 1)))
      return;
LABEL_13:
    v34[23] = 12;
    strcpy(v34, "vertex_index");
    v10 = a2[23];
    if ((v10 & 0x80u) == 0)
      v11 = a2[23];
    else
      v11 = *((_QWORD *)a2 + 1);
    if (v11 != 12)
      return;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, v34, *((_QWORD *)a2 + 1)))
        return;
    }
    else if (a2[23])
    {
      v12 = v34;
      while (*a2 == *v12)
      {
        ++a2;
        ++v12;
        if (!--v10)
          goto LABEL_24;
      }
      return;
    }
LABEL_24:
    v14 = *a3;
    v13 = a3[1];
    memset(__s2, 0, 24);
    v15 = (char *)v13 - (char *)v14;
    if (v13 == v14)
    {
      v17 = 0;
      v19 = 0;
    }
    else
    {
      if (v15 < 0)
        sub_2394189F8();
      v16 = (unint64_t)v15 >> 1;
      v17 = (int32x4_t *)operator new((unint64_t)v15 >> 1);
      v18 = v15 >> 3;
      *(_QWORD *)&__s2[0] = v17;
      *(_QWORD *)&__s2[1] = (char *)v17 + 4 * v18;
      bzero(v17, v16);
      v19 = (int32x4_t *)((char *)v17 + v16);
      *((_QWORD *)&__s2[0] + 1) = (char *)v17 + v16;
      if (v18 <= 1)
        v20 = 1;
      else
        v20 = v18;
      if (v20 >= 8)
      {
        v21 = v20 & 0xFFFFFFFFFFFFFFF8;
        v22 = v14 + 2;
        v23 = v17 + 1;
        v24 = v20 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v25 = v22[-2];
          v26 = v22[-1];
          v27 = *v22;
          v28 = v22[1];
          v22 += 4;
          v23[-1] = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(v25), (int32x4_t)vcvtq_u64_f64(v26));
          *v23 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(v27), (int32x4_t)vcvtq_u64_f64(v28));
          v23 += 2;
          v24 -= 8;
        }
        while (v24);
        goto LABEL_37;
      }
      v21 = 0;
      do
      {
        v17->i32[v21] = v14->f64[v21];
        ++v21;
LABEL_37:
        ;
      }
      while (v20 != v21);
    }
    if (!*(_BYTE *)(a4 + 112))
      sub_2394875CC();
    v29 = *(_QWORD **)(a4 + 96);
    if ((unint64_t)v29 >= *(_QWORD *)(a4 + 104))
    {
      v33 = sub_2395BB144((char **)(a4 + 88), (uint64_t)__s2);
    }
    else
    {
      *v29 = 0;
      v29[1] = 0;
      v29[2] = 0;
      v30 = (char *)v19 - (char *)v17;
      if (v19 != v17)
      {
        if (v30 < 0)
          sub_2394189F8();
        v31 = (char *)operator new((char *)v19 - (char *)v17);
        *v29 = v31;
        v29[1] = v31;
        v32 = &v31[4 * (v30 >> 2)];
        v29[2] = v32;
        memcpy(v31, v17, v30);
        v29[1] = v32;
      }
      v33 = (char *)(v29 + 3);
      *(_QWORD *)(a4 + 96) = v29 + 3;
    }
    *(_QWORD *)(a4 + 96) = v33;
    if (*(_QWORD *)&__s2[0])
    {
      *((_QWORD *)&__s2[0] + 1) = *(_QWORD *)&__s2[0];
      operator delete(*(void **)&__s2[0]);
    }
    return;
  }
  if (!a1[23])
    goto LABEL_13;
  v9 = (unsigned __int8 *)__s2;
  while (*a1 == *v9)
  {
    ++a1;
    ++v9;
    if (!--v5)
      goto LABEL_13;
  }
}

void sub_2395B9968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v15 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(v13 + 96) = v14;
  if (!a13)
    JUMPOUT(0x2395B98A0);
  JUMPOUT(0x2395B9898);
}

void sub_2395B998C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13)
    JUMPOUT(0x2395B98A0);
  JUMPOUT(0x2395B9898);
}

void sub_2395B999C(unsigned __int8 *a1, unsigned __int8 *__sz, unint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int32x4_t *v16;
  int32x4_t *v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  int8x8_t *v21;
  int32x4_t *v22;
  unint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  unint64_t v30;
  int8x8_t *v31;
  uint64_t v32;
  unint64_t v33;
  int8x8_t v34;
  int16x8_t v35;
  int32x4_t *v36;
  _QWORD *v37;
  int64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char v42[24];
  _OWORD __s2[2];

  BYTE7(__s2[1]) = 19;
  strcpy((char *)__s2, "vertex_visibilities");
  v5 = a1[23];
  if ((v5 & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  if (v6 != 19)
    return;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, __s2, *((_QWORD *)a1 + 1)))
      return;
LABEL_13:
    v42[23] = 12;
    strcpy(v42, "vertex_index");
    v10 = __sz[23];
    if ((v10 & 0x80u) == 0)
      v11 = __sz[23];
    else
      v11 = *((_QWORD *)__sz + 1);
    if (v11 != 12)
      return;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)__sz, v42, *((_QWORD *)__sz + 1)))
        return;
    }
    else if (__sz[23])
    {
      v12 = v42;
      while (*__sz == *v12)
      {
        ++__sz;
        ++v12;
        if (!--v10)
          goto LABEL_24;
      }
      return;
    }
LABEL_24:
    v14 = *a3;
    v13 = a3[1];
    memset(__s2, 0, 24);
    v15 = v13 - v14;
    if (v13 == v14)
    {
      v16 = 0;
      v17 = 0;
    }
    else
    {
      if (v15 >> 62)
        sub_2394189F8();
      v16 = (int32x4_t *)operator new(4 * v15);
      *(_QWORD *)&__s2[0] = v16;
      *(_QWORD *)&__s2[1] = (char *)v16 + 4 * v15;
      bzero(v16, 4 * v15);
      v17 = (int32x4_t *)((char *)v16 + 4 * v15);
      *((_QWORD *)&__s2[0] + 1) = v17;
      if (v15 <= 1)
        v18 = 1;
      else
        v18 = v15;
      if (v18 < 8
        || ((unint64_t)v16 < v14 + v18 ? (v19 = v14 >= (unint64_t)v16 + 4 * v18) : (v19 = 1), !v19))
      {
        v20 = 0;
        do
        {
LABEL_47:
          v16->i32[v20] = *(char *)(v14 + v20);
          ++v20;
LABEL_48:
          ;
        }
        while (v18 != v20);
        goto LABEL_49;
      }
      if (v18 < 0x20)
      {
        v20 = 0;
        goto LABEL_43;
      }
      v20 = v18 & 0xFFFFFFFFFFFFFFE0;
      v21 = (int8x8_t *)(v14 + 16);
      v22 = v16 + 4;
      v23 = v18 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v24 = *(int8x16_t *)v21[-2].i8;
        v25 = *(int8x16_t *)v21->i8;
        v26 = vmovl_s8(*(int8x8_t *)v24.i8);
        v27 = vmovl_high_s8(v24);
        v28 = vmovl_s8(*v21);
        v22[-2] = vmovl_s16(*(int16x4_t *)v27.i8);
        v22[-1] = vmovl_high_s16(v27);
        v29 = vmovl_high_s8(v25);
        v22[-4] = vmovl_s16(*(int16x4_t *)v26.i8);
        v22[-3] = vmovl_high_s16(v26);
        v22[2] = vmovl_s16(*(int16x4_t *)v29.i8);
        v22[3] = vmovl_high_s16(v29);
        *v22 = vmovl_s16(*(int16x4_t *)v28.i8);
        v22[1] = vmovl_high_s16(v28);
        v22 += 8;
        v21 += 4;
        v23 -= 32;
      }
      while (v23);
      if (v18 != v20)
      {
        if ((v18 & 0x18) == 0)
          goto LABEL_47;
LABEL_43:
        v30 = v20;
        v20 = v18 & 0xFFFFFFFFFFFFFFF8;
        v31 = (int8x8_t *)(v14 + v30);
        v32 = 4 * v30;
        v33 = v30 - (v18 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v34 = *v31++;
          v35 = vmovl_s8(v34);
          v36 = (int32x4_t *)((char *)v16 + v32);
          *v36 = vmovl_s16(*(int16x4_t *)v35.i8);
          v36[1] = vmovl_high_s16(v35);
          v32 += 32;
          v33 += 8;
        }
        while (v33);
        goto LABEL_48;
      }
    }
LABEL_49:
    if (!*(_BYTE *)(a4 + 112))
      sub_2394875CC();
    v37 = *(_QWORD **)(a4 + 96);
    if ((unint64_t)v37 >= *(_QWORD *)(a4 + 104))
    {
      v41 = sub_2395BB144((char **)(a4 + 88), (uint64_t)__s2);
    }
    else
    {
      *v37 = 0;
      v37[1] = 0;
      v37[2] = 0;
      v38 = (char *)v17 - (char *)v16;
      if (v17 != v16)
      {
        if (v38 < 0)
          sub_2394189F8();
        v39 = (char *)operator new((char *)v17 - (char *)v16);
        *v37 = v39;
        v37[1] = v39;
        v40 = &v39[4 * (v38 >> 2)];
        v37[2] = v40;
        memcpy(v39, v16, v38);
        v37[1] = v40;
      }
      v41 = (char *)(v37 + 3);
      *(_QWORD *)(a4 + 96) = v37 + 3;
    }
    *(_QWORD *)(a4 + 96) = v41;
    if (*(_QWORD *)&__s2[0])
    {
      *((_QWORD *)&__s2[0] + 1) = *(_QWORD *)&__s2[0];
      operator delete(*(void **)&__s2[0]);
    }
    return;
  }
  if (!a1[23])
    goto LABEL_13;
  v9 = (unsigned __int8 *)__s2;
  while (*a1 == *v9)
  {
    ++a1;
    ++v9;
    if (!--v5)
      goto LABEL_13;
  }
}

void sub_2395B9D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v15 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(v13 + 96) = v14;
  if (!a13)
    JUMPOUT(0x2395B9C44);
  JUMPOUT(0x2395B9C3CLL);
}

void sub_2395B9D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13)
    JUMPOUT(0x2395B9C44);
  JUMPOUT(0x2395B9C3CLL);
}

void sub_2395B9D3C(unsigned __int8 *a1, unsigned __int8 *__sz, unint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int8x16_t *v16;
  int8x16_t v17;
  char *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  int8x16_t *v22;
  int8x16_t *v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t *v35;
  _QWORD *v36;
  int64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char v41[24];
  _OWORD __s2[2];

  BYTE7(__s2[1]) = 19;
  strcpy((char *)__s2, "vertex_visibilities");
  v5 = a1[23];
  if ((v5 & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  if (v6 != 19)
    return;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, __s2, *((_QWORD *)a1 + 1)))
      return;
LABEL_13:
    v41[23] = 12;
    strcpy(v41, "vertex_index");
    v10 = __sz[23];
    if ((v10 & 0x80u) == 0)
      v11 = __sz[23];
    else
      v11 = *((_QWORD *)__sz + 1);
    if (v11 != 12)
      return;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)__sz, v41, *((_QWORD *)__sz + 1)))
        return;
    }
    else if (__sz[23])
    {
      v12 = v41;
      while (*__sz == *v12)
      {
        ++__sz;
        ++v12;
        if (!--v10)
          goto LABEL_24;
      }
      return;
    }
LABEL_24:
    v14 = *a3;
    v13 = a3[1];
    memset(__s2, 0, 24);
    v15 = v13 - v14;
    if (v13 == v14)
    {
      v16 = 0;
      v18 = 0;
    }
    else
    {
      if (v15 >> 62)
        sub_2394189F8();
      v16 = (int8x16_t *)operator new(4 * v15);
      *(_QWORD *)&__s2[0] = v16;
      *(_QWORD *)&__s2[1] = (char *)v16 + 4 * v15;
      bzero(v16, 4 * v15);
      v18 = &v16->i8[4 * v15];
      *((_QWORD *)&__s2[0] + 1) = v18;
      if (v15 <= 1)
        v19 = 1;
      else
        v19 = v15;
      if (v19 < 8
        || ((unint64_t)v16 < v14 + v19 ? (v20 = v14 >= (unint64_t)v16 + 4 * v19) : (v20 = 1), !v20))
      {
        v21 = 0;
        do
        {
LABEL_47:
          v16->i32[v21] = *(unsigned __int8 *)(v14 + v21);
          ++v21;
LABEL_48:
          ;
        }
        while (v19 != v21);
        goto LABEL_49;
      }
      if (v19 < 0x20)
      {
        v21 = 0;
        goto LABEL_43;
      }
      v21 = v19 & 0xFFFFFFFFFFFFFFE0;
      v22 = (int8x16_t *)(v14 + 16);
      v23 = v16 + 4;
      v17.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
      v24 = v19 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v25 = v22[-1];
        v26 = *v22;
        v27 = vqtbl1q_s8(*v22, (int8x16_t)xmmword_239EC73F0);
        v28 = vqtbl1q_s8(*v22, (int8x16_t)xmmword_239EC7400);
        v23[-2] = vqtbl1q_s8(v25, (int8x16_t)xmmword_239EC7410);
        v23[-1] = vqtbl1q_s8(v25, (int8x16_t)xmmword_239EC7420);
        v23[-4] = vqtbl1q_s8(v25, (int8x16_t)xmmword_239EC73F0);
        v23[-3] = vqtbl1q_s8(v25, (int8x16_t)xmmword_239EC7400);
        v23[2] = vqtbl1q_s8(v26, (int8x16_t)xmmword_239EC7410);
        v23[3] = vqtbl1q_s8(v26, (int8x16_t)xmmword_239EC7420);
        *v23 = v27;
        v23[1] = v28;
        v23 += 8;
        v22 += 2;
        v24 -= 32;
      }
      while (v24);
      if (v19 != v21)
      {
        if ((v19 & 0x18) == 0)
          goto LABEL_47;
LABEL_43:
        v29 = v21;
        v21 = v19 & 0xFFFFFFFFFFFFFFF8;
        v30 = (uint64_t *)(v14 + v29);
        v31 = 4 * v29;
        v32 = v29 - (v19 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v33 = *v30++;
          v17.i64[0] = v33;
          v34 = vqtbl1q_s8(v17, (int8x16_t)xmmword_239EC73F0);
          v17 = vqtbl1q_s8(v17, (int8x16_t)xmmword_239EC7400);
          v35 = (int8x16_t *)((char *)v16 + v31);
          *v35 = v34;
          v35[1] = v17;
          v31 += 32;
          v32 += 8;
        }
        while (v32);
        goto LABEL_48;
      }
    }
LABEL_49:
    if (!*(_BYTE *)(a4 + 112))
      sub_2394875CC();
    v36 = *(_QWORD **)(a4 + 96);
    if ((unint64_t)v36 >= *(_QWORD *)(a4 + 104))
    {
      v40 = sub_2395BB144((char **)(a4 + 88), (uint64_t)__s2);
    }
    else
    {
      *v36 = 0;
      v36[1] = 0;
      v36[2] = 0;
      v37 = v18 - (char *)v16;
      if (v18 != (char *)v16)
      {
        if (v37 < 0)
          sub_2394189F8();
        v38 = (char *)operator new(v18 - (char *)v16);
        *v36 = v38;
        v36[1] = v38;
        v39 = &v38[4 * (v37 >> 2)];
        v36[2] = v39;
        memcpy(v38, v16, v37);
        v36[1] = v39;
      }
      v40 = (char *)(v36 + 3);
      *(_QWORD *)(a4 + 96) = v36 + 3;
    }
    *(_QWORD *)(a4 + 96) = v40;
    if (*(_QWORD *)&__s2[0])
    {
      *((_QWORD *)&__s2[0] + 1) = *(_QWORD *)&__s2[0];
      operator delete(*(void **)&__s2[0]);
    }
    return;
  }
  if (!a1[23])
    goto LABEL_13;
  v9 = (unsigned __int8 *)__s2;
  while (*a1 == *v9)
  {
    ++a1;
    ++v9;
    if (!--v5)
      goto LABEL_13;
  }
}

void sub_2395BA0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v15 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(v13 + 96) = v14;
  if (!a13)
    JUMPOUT(0x2395B9FF8);
  JUMPOUT(0x2395B9FF0);
}

void sub_2395BA0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13)
    JUMPOUT(0x2395B9FF8);
  JUMPOUT(0x2395B9FF0);
}

void sub_2395BA0F0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  _QWORD *v24;
  int64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char v29[24];
  _OWORD __s2[2];

  BYTE7(__s2[1]) = 19;
  strcpy((char *)__s2, "vertex_visibilities");
  v5 = a1[23];
  if ((v5 & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  if (v6 != 19)
    return;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, __s2, *((_QWORD *)a1 + 1)))
      return;
LABEL_13:
    v29[23] = 12;
    strcpy(v29, "vertex_index");
    v10 = a2[23];
    if ((v10 & 0x80u) == 0)
      v11 = a2[23];
    else
      v11 = *((_QWORD *)a2 + 1);
    if (v11 != 12)
      return;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, v29, *((_QWORD *)a2 + 1)))
        return;
    }
    else if (a2[23])
    {
      v12 = v29;
      while (*a2 == *v12)
      {
        ++a2;
        ++v12;
        if (!--v10)
          goto LABEL_24;
      }
      return;
    }
LABEL_24:
    v14 = *a3;
    v13 = a3[1];
    memset(__s2, 0, 24);
    v15 = v13 - v14;
    if (v13 == v14)
    {
      v16 = 0;
      v18 = 0;
    }
    else
    {
      if (v15 < 0)
        sub_2394189F8();
      v16 = (char *)operator new(v13 - v14);
      *(_QWORD *)&__s2[0] = v16;
      *(_QWORD *)&__s2[1] = &v16[4 * (v15 >> 2)];
      bzero(v16, v15);
      v17 = 0;
      v18 = &v16[v15];
      *((_QWORD *)&__s2[0] + 1) = &v16[v15];
      if ((unint64_t)(v15 >> 2) <= 1)
        v19 = 1;
      else
        v19 = v15 >> 2;
      if (v19 < 8 || (unint64_t)&v16[-v14] < 0x20)
        goto LABEL_37;
      v20 = 0;
      v17 = v19 & 0xFFFFFFFFFFFFFFF8;
      v21 = v19 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)(v14 + v20 + 16);
        v23 = &v16[v20];
        *(_OWORD *)v23 = *(_OWORD *)(v14 + v20);
        *((_OWORD *)v23 + 1) = v22;
        v20 += 32;
        v21 -= 8;
      }
      while (v21);
      while (v19 != v17)
      {
LABEL_37:
        *(_DWORD *)&v16[4 * v17] = *(_DWORD *)(v14 + 4 * v17);
        ++v17;
      }
    }
    if (!*(_BYTE *)(a4 + 112))
      sub_2394875CC();
    v24 = *(_QWORD **)(a4 + 96);
    if ((unint64_t)v24 >= *(_QWORD *)(a4 + 104))
    {
      v28 = sub_2395BB144((char **)(a4 + 88), (uint64_t)__s2);
    }
    else
    {
      *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      v25 = v18 - v16;
      if (v18 != v16)
      {
        if (v25 < 0)
          sub_2394189F8();
        v26 = (char *)operator new(v18 - v16);
        *v24 = v26;
        v24[1] = v26;
        v27 = &v26[4 * (v25 >> 2)];
        v24[2] = v27;
        memcpy(v26, v16, v25);
        v24[1] = v27;
      }
      v28 = (char *)(v24 + 3);
      *(_QWORD *)(a4 + 96) = v24 + 3;
    }
    *(_QWORD *)(a4 + 96) = v28;
    if (*(_QWORD *)&__s2[0])
    {
      *((_QWORD *)&__s2[0] + 1) = *(_QWORD *)&__s2[0];
      operator delete(*(void **)&__s2[0]);
    }
    return;
  }
  if (!a1[23])
    goto LABEL_13;
  v9 = (unsigned __int8 *)__s2;
  while (*a1 == *v9)
  {
    ++a1;
    ++v9;
    if (!--v5)
      goto LABEL_13;
  }
}

void sub_2395BA3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v15 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(v13 + 96) = v14;
  if (!a13)
    JUMPOUT(0x2395BA2F8);
  JUMPOUT(0x2395BA2F0);
}

void sub_2395BA3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13)
    JUMPOUT(0x2395BA2F8);
  JUMPOUT(0x2395BA2F0);
}

void sub_2395BA3F8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  _QWORD *v24;
  int64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char v29[24];
  _OWORD __s2[2];

  BYTE7(__s2[1]) = 19;
  strcpy((char *)__s2, "vertex_visibilities");
  v5 = a1[23];
  if ((v5 & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  if (v6 != 19)
    return;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, __s2, *((_QWORD *)a1 + 1)))
      return;
LABEL_13:
    v29[23] = 12;
    strcpy(v29, "vertex_index");
    v10 = a2[23];
    if ((v10 & 0x80u) == 0)
      v11 = a2[23];
    else
      v11 = *((_QWORD *)a2 + 1);
    if (v11 != 12)
      return;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, v29, *((_QWORD *)a2 + 1)))
        return;
    }
    else if (a2[23])
    {
      v12 = v29;
      while (*a2 == *v12)
      {
        ++a2;
        ++v12;
        if (!--v10)
          goto LABEL_24;
      }
      return;
    }
LABEL_24:
    v14 = *a3;
    v13 = a3[1];
    memset(__s2, 0, 24);
    v15 = v13 - v14;
    if (v13 == v14)
    {
      v16 = 0;
      v18 = 0;
    }
    else
    {
      if (v15 < 0)
        sub_2394189F8();
      v16 = (char *)operator new(v13 - v14);
      *(_QWORD *)&__s2[0] = v16;
      *(_QWORD *)&__s2[1] = &v16[4 * (v15 >> 2)];
      bzero(v16, v15);
      v17 = 0;
      v18 = &v16[v15];
      *((_QWORD *)&__s2[0] + 1) = &v16[v15];
      if ((unint64_t)(v15 >> 2) <= 1)
        v19 = 1;
      else
        v19 = v15 >> 2;
      if (v19 < 8 || (unint64_t)&v16[-v14] < 0x20)
        goto LABEL_37;
      v20 = 0;
      v17 = v19 & 0xFFFFFFFFFFFFFFF8;
      v21 = v19 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)(v14 + v20 + 16);
        v23 = &v16[v20];
        *(_OWORD *)v23 = *(_OWORD *)(v14 + v20);
        *((_OWORD *)v23 + 1) = v22;
        v20 += 32;
        v21 -= 8;
      }
      while (v21);
      while (v19 != v17)
      {
LABEL_37:
        *(_DWORD *)&v16[4 * v17] = *(_DWORD *)(v14 + 4 * v17);
        ++v17;
      }
    }
    if (!*(_BYTE *)(a4 + 112))
      sub_2394875CC();
    v24 = *(_QWORD **)(a4 + 96);
    if ((unint64_t)v24 >= *(_QWORD *)(a4 + 104))
    {
      v28 = sub_2395BB144((char **)(a4 + 88), (uint64_t)__s2);
    }
    else
    {
      *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      v25 = v18 - v16;
      if (v18 != v16)
      {
        if (v25 < 0)
          sub_2394189F8();
        v26 = (char *)operator new(v18 - v16);
        *v24 = v26;
        v24[1] = v26;
        v27 = &v26[4 * (v25 >> 2)];
        v24[2] = v27;
        memcpy(v26, v16, v25);
        v24[1] = v27;
      }
      v28 = (char *)(v24 + 3);
      *(_QWORD *)(a4 + 96) = v24 + 3;
    }
    *(_QWORD *)(a4 + 96) = v28;
    if (*(_QWORD *)&__s2[0])
    {
      *((_QWORD *)&__s2[0] + 1) = *(_QWORD *)&__s2[0];
      operator delete(*(void **)&__s2[0]);
    }
    return;
  }
  if (!a1[23])
    goto LABEL_13;
  v9 = (unsigned __int8 *)__s2;
  while (*a1 == *v9)
  {
    ++a1;
    ++v9;
    if (!--v5)
      goto LABEL_13;
  }
}

void sub_2395BA6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v15 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(v13 + 96) = v14;
  if (!a13)
    JUMPOUT(0x2395BA600);
  JUMPOUT(0x2395BA5F8);
}

void sub_2395BA6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13)
    JUMPOUT(0x2395BA600);
  JUMPOUT(0x2395BA5F8);
}

void sub_2395BA700(unsigned __int8 *a1, unsigned __int8 *__sz, int16x4_t **a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int16x4_t *v13;
  int16x4_t *v14;
  uint64_t v15;
  size_t v16;
  int32x4_t *v17;
  unint64_t v18;
  int32x4_t *v19;
  unint64_t v20;
  unint64_t v21;
  int16x4_t *v22;
  int32x4_t *v23;
  unint64_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  _QWORD *v28;
  int64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char v33[24];
  _OWORD __s2[2];

  BYTE7(__s2[1]) = 19;
  strcpy((char *)__s2, "vertex_visibilities");
  v5 = a1[23];
  if ((v5 & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  if (v6 != 19)
    return;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, __s2, *((_QWORD *)a1 + 1)))
      return;
LABEL_13:
    v33[23] = 12;
    strcpy(v33, "vertex_index");
    v10 = __sz[23];
    if ((v10 & 0x80u) == 0)
      v11 = __sz[23];
    else
      v11 = *((_QWORD *)__sz + 1);
    if (v11 != 12)
      return;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)__sz, v33, *((_QWORD *)__sz + 1)))
        return;
    }
    else if (__sz[23])
    {
      v12 = v33;
      while (*__sz == *v12)
      {
        ++__sz;
        ++v12;
        if (!--v10)
          goto LABEL_24;
      }
      return;
    }
LABEL_24:
    v14 = *a3;
    v13 = a3[1];
    memset(__s2, 0, 24);
    v15 = (char *)v13 - (char *)v14;
    if (v13 == v14)
    {
      v17 = 0;
      v19 = 0;
    }
    else
    {
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFFLL)
        sub_2394189F8();
      v16 = 2 * v15;
      v17 = (int32x4_t *)operator new(2 * v15);
      v18 = v15 >> 1;
      *(_QWORD *)&__s2[0] = v17;
      *(_QWORD *)&__s2[1] = (char *)v17 + 4 * v18;
      bzero(v17, v16);
      v19 = (int32x4_t *)((char *)v17 + v16);
      *((_QWORD *)&__s2[0] + 1) = (char *)v17 + v16;
      if (v18 <= 1)
        v20 = 1;
      else
        v20 = v18;
      if (v20 >= 0x10)
      {
        v21 = v20 & 0xFFFFFFFFFFFFFFF0;
        v22 = v14 + 2;
        v23 = v17 + 2;
        v24 = v20 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v25 = *(int16x8_t *)v22[-2].i8;
          v26 = vmovl_s16(*v22);
          v27 = vmovl_high_s16(*(int16x8_t *)v22->i8);
          v23[-2] = vmovl_s16(*(int16x4_t *)v25.i8);
          v23[-1] = vmovl_high_s16(v25);
          *v23 = v26;
          v23[1] = v27;
          v23 += 4;
          v22 += 4;
          v24 -= 16;
        }
        while (v24);
        goto LABEL_37;
      }
      v21 = 0;
      do
      {
        v17->i32[v21] = v14->i16[v21];
        ++v21;
LABEL_37:
        ;
      }
      while (v20 != v21);
    }
    if (!*(_BYTE *)(a4 + 112))
      sub_2394875CC();
    v28 = *(_QWORD **)(a4 + 96);
    if ((unint64_t)v28 >= *(_QWORD *)(a4 + 104))
    {
      v32 = sub_2395BB144((char **)(a4 + 88), (uint64_t)__s2);
    }
    else
    {
      *v28 = 0;
      v28[1] = 0;
      v28[2] = 0;
      v29 = (char *)v19 - (char *)v17;
      if (v19 != v17)
      {
        if (v29 < 0)
          sub_2394189F8();
        v30 = (char *)operator new((char *)v19 - (char *)v17);
        *v28 = v30;
        v28[1] = v30;
        v31 = &v30[4 * (v29 >> 2)];
        v28[2] = v31;
        memcpy(v30, v17, v29);
        v28[1] = v31;
      }
      v32 = (char *)(v28 + 3);
      *(_QWORD *)(a4 + 96) = v28 + 3;
    }
    *(_QWORD *)(a4 + 96) = v32;
    if (*(_QWORD *)&__s2[0])
    {
      *((_QWORD *)&__s2[0] + 1) = *(_QWORD *)&__s2[0];
      operator delete(*(void **)&__s2[0]);
    }
    return;
  }
  if (!a1[23])
    goto LABEL_13;
  v9 = (unsigned __int8 *)__s2;
  while (*a1 == *v9)
  {
    ++a1;
    ++v9;
    if (!--v5)
      goto LABEL_13;
  }
}

void sub_2395BA9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v15 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(v13 + 96) = v14;
  if (!a13)
    JUMPOUT(0x2395BA91CLL);
  JUMPOUT(0x2395BA914);
}

void sub_2395BAA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13)
    JUMPOUT(0x2395BA91CLL);
  JUMPOUT(0x2395BA914);
}

void sub_2395BAA14(unsigned __int8 *a1, unsigned __int8 *__sz, uint16x4_t **a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint16x4_t *v13;
  uint16x4_t *v14;
  uint64_t v15;
  size_t v16;
  uint32x4_t *v17;
  unint64_t v18;
  uint32x4_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint16x4_t *v22;
  uint32x4_t *v23;
  unint64_t v24;
  uint16x8_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  _QWORD *v28;
  int64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char v33[24];
  _OWORD __s2[2];

  BYTE7(__s2[1]) = 19;
  strcpy((char *)__s2, "vertex_visibilities");
  v5 = a1[23];
  if ((v5 & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  if (v6 != 19)
    return;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, __s2, *((_QWORD *)a1 + 1)))
      return;
LABEL_13:
    v33[23] = 12;
    strcpy(v33, "vertex_index");
    v10 = __sz[23];
    if ((v10 & 0x80u) == 0)
      v11 = __sz[23];
    else
      v11 = *((_QWORD *)__sz + 1);
    if (v11 != 12)
      return;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)__sz, v33, *((_QWORD *)__sz + 1)))
        return;
    }
    else if (__sz[23])
    {
      v12 = v33;
      while (*__sz == *v12)
      {
        ++__sz;
        ++v12;
        if (!--v10)
          goto LABEL_24;
      }
      return;
    }
LABEL_24:
    v14 = *a3;
    v13 = a3[1];
    memset(__s2, 0, 24);
    v15 = (char *)v13 - (char *)v14;
    if (v13 == v14)
    {
      v17 = 0;
      v19 = 0;
    }
    else
    {
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFFLL)
        sub_2394189F8();
      v16 = 2 * v15;
      v17 = (uint32x4_t *)operator new(2 * v15);
      v18 = v15 >> 1;
      *(_QWORD *)&__s2[0] = v17;
      *(_QWORD *)&__s2[1] = (char *)v17 + 4 * v18;
      bzero(v17, v16);
      v19 = (uint32x4_t *)((char *)v17 + v16);
      *((_QWORD *)&__s2[0] + 1) = (char *)v17 + v16;
      if (v18 <= 1)
        v20 = 1;
      else
        v20 = v18;
      if (v20 >= 0x10)
      {
        v21 = v20 & 0xFFFFFFFFFFFFFFF0;
        v22 = v14 + 2;
        v23 = v17 + 2;
        v24 = v20 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v25 = *(uint16x8_t *)v22[-2].i8;
          v26 = vmovl_u16(*v22);
          v27 = vmovl_high_u16(*(uint16x8_t *)v22->i8);
          v23[-2] = vmovl_u16(*(uint16x4_t *)v25.i8);
          v23[-1] = vmovl_high_u16(v25);
          *v23 = v26;
          v23[1] = v27;
          v23 += 4;
          v22 += 4;
          v24 -= 16;
        }
        while (v24);
        goto LABEL_37;
      }
      v21 = 0;
      do
      {
        v17->i32[v21] = v14->u16[v21];
        ++v21;
LABEL_37:
        ;
      }
      while (v20 != v21);
    }
    if (!*(_BYTE *)(a4 + 112))
      sub_2394875CC();
    v28 = *(_QWORD **)(a4 + 96);
    if ((unint64_t)v28 >= *(_QWORD *)(a4 + 104))
    {
      v32 = sub_2395BB144((char **)(a4 + 88), (uint64_t)__s2);
    }
    else
    {
      *v28 = 0;
      v28[1] = 0;
      v28[2] = 0;
      v29 = (char *)v19 - (char *)v17;
      if (v19 != v17)
      {
        if (v29 < 0)
          sub_2394189F8();
        v30 = (char *)operator new((char *)v19 - (char *)v17);
        *v28 = v30;
        v28[1] = v30;
        v31 = &v30[4 * (v29 >> 2)];
        v28[2] = v31;
        memcpy(v30, v17, v29);
        v28[1] = v31;
      }
      v32 = (char *)(v28 + 3);
      *(_QWORD *)(a4 + 96) = v28 + 3;
    }
    *(_QWORD *)(a4 + 96) = v32;
    if (*(_QWORD *)&__s2[0])
    {
      *((_QWORD *)&__s2[0] + 1) = *(_QWORD *)&__s2[0];
      operator delete(*(void **)&__s2[0]);
    }
    return;
  }
  if (!a1[23])
    goto LABEL_13;
  v9 = (unsigned __int8 *)__s2;
  while (*a1 == *v9)
  {
    ++a1;
    ++v9;
    if (!--v5)
      goto LABEL_13;
  }
}

void sub_2395BACF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v15 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(v13 + 96) = v14;
  if (!a13)
    JUMPOUT(0x2395BAC30);
  JUMPOUT(0x2395BAC28);
}

void sub_2395BAD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13)
    JUMPOUT(0x2395BAC30);
  JUMPOUT(0x2395BAC28);
}

uint64_t sub_2395BAD28(uint64_t result, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;

  v3 = *a3;
  v4 = *(uint64_t **)a2;
  v5 = *((unsigned int *)a3 + 2);
  v6 = *(unsigned int *)(a2 + 8);
  if ((uint64_t)(v5 + 8 * (*a3 - *(_QWORD *)a2) - v6) >= 2)
  {
    v9 = result;
    v25 = xmmword_239EC6600;
    if ((_DWORD)v5)
    {
      v10 = v5 - 1;
      v11 = v3;
    }
    else
    {
      v11 = v3 - 8;
      *a3 = v3 - 8;
      v10 = 63;
    }
    *((_DWORD *)a3 + 2) = v10;
    v12 = ~v6 + v5 + 8 * v3 - 8 * (_QWORD)v4;
    while (*(_QWORD *)a2 < v11 || *(_QWORD *)a2 == v11 && *(_DWORD *)(a2 + 8) < *((_DWORD *)a3 + 2))
    {
      v24[0] = 0;
      v24[1] = v12;
      result = sub_239455AB4((uint64_t)&v25, v9, v24);
      v14 = *(unsigned int *)(a2 + 8);
      if (result)
      {
        v15 = *(uint64_t **)a2;
        v16 = 1 << v14;
        v17 = result + v14 - 63;
        if (v17 < 0)
          v17 = result + v14;
        v18 = v17 >> 6;
        v19 = (unint64_t)(result + v14) >> 6;
        if (result < 0)
          v19 = v18;
        v20 = 1 << (v14 + result);
        v21 = *v15;
        if ((v15[v19] & v20) != 0)
          v22 = *v15 | v16;
        else
          v22 = *v15 & ~v16;
        *v15 = v22;
        if ((v21 & v16) != 0)
          v23 = v15[v19] | v20;
        else
          v23 = v15[v19] & ~v20;
        v15[v19] = v23;
      }
      if ((_DWORD)v14 == 63)
      {
        v13 = 0;
        *(_QWORD *)a2 += 8;
      }
      else
      {
        v13 = v14 + 1;
      }
      *(_DWORD *)(a2 + 8) = v13;
      v11 = *a3;
      --v12;
    }
  }
  return result;
}

void sub_2395BAEA0(void **a1, uint64_t *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    v6 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v5 = v6;
    v7 = v5 + 12;
LABEL_3:
    a1[1] = v7;
    return;
  }
  v8 = (char *)*a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 2);
  v10 = v9 + 1;
  if (v9 + 1 > 0x1555555555555555)
    sub_2394189F8();
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 2);
  if (2 * v11 > v10)
    v10 = 2 * v11;
  if (v11 >= 0xAAAAAAAAAAAAAAALL)
    v12 = 0x1555555555555555;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 > 0x1555555555555555)
      sub_239418A80();
    v13 = (char *)operator new(12 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[12 * v9];
  *(_QWORD *)v14 = *a2;
  *((_DWORD *)v14 + 2) = *((_DWORD *)a2 + 2);
  v7 = v14 + 12;
  if (v5 != v8)
  {
    do
    {
      v15 = *(_QWORD *)(v5 - 12);
      v5 -= 12;
      v16 = *((_DWORD *)v5 + 2);
      *(_QWORD *)(v14 - 12) = v15;
      v14 -= 12;
      *((_DWORD *)v14 + 2) = v16;
    }
    while (v5 != v8);
    v5 = (char *)*a1;
  }
  *a1 = v14;
  a1[1] = v7;
  a1[2] = &v13[12 * v12];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v7;
}

void sub_2395BAFE4(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  int v23;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)a1;
    v9 = (uint64_t)&v5[-*(_QWORD *)a1];
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      sub_2394189F8();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        sub_239418A80();
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 4;
      if (v16 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_27;
      v17 = (v16 >> 2) + 1;
      v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v18];
      v15 = (_DWORD *)((char *)v15 - v18);
      v19 = &v14[4 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v14[4 * v13];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v5 = *a2;
    v7 = v5 + 4;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

char *sub_2395BB144(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = (char **)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_2394189F8();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *((_QWORD *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *v12 = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_2395BB32C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_23942A5F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395BB350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239428940((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v25 + 10) = *(_DWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_239427FE0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2395BB794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395BB7A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_2395BB7C0(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v22;
  char *v23;
  char *v24;

  v3 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    sub_2394189F8();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x492492492492492)
      sub_239418A80();
    v7 = (char *)operator new(56 * v6);
  }
  else
  {
    v7 = 0;
  }
  v22 = &v7[56 * v3];
  v24 = &v7[56 * v6];
  *(_QWORD *)v22 = *(_QWORD *)a2;
  v8 = v22 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_23941A7F8(v8, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v22 + 3) = *(_QWORD *)(a2 + 24);
  }
  v9 = &v7[56 * v3];
  *((_QWORD *)v9 + 4) = 0;
  *((_QWORD *)v9 + 5) = 0;
  v9 += 32;
  *((_QWORD *)v9 + 2) = 0;
  sub_2395BBA78(v9, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  v23 = &v7[56 * v3];
  v10 = v23 + 56;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v22;
    a1[1] = v10;
    a1[2] = v24;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = &v22[v13];
      v15 = &v12[v13];
      *((_QWORD *)v14 - 7) = *(_QWORD *)&v12[v13 - 56];
      v16 = *(_OWORD *)&v12[v13 - 48];
      *((_QWORD *)v14 - 4) = *(_QWORD *)&v12[v13 - 32];
      *((_OWORD *)v14 - 3) = v16;
      *((_QWORD *)v15 - 5) = 0;
      *((_QWORD *)v15 - 4) = 0;
      *((_QWORD *)v15 - 6) = 0;
      *((_QWORD *)v14 - 3) = 0;
      *((_QWORD *)v14 - 2) = 0;
      *((_QWORD *)v14 - 1) = 0;
      *(_OWORD *)(v14 - 24) = *(_OWORD *)&v12[v13 - 24];
      *((_QWORD *)v14 - 1) = *(_QWORD *)&v12[v13 - 8];
      *((_QWORD *)v15 - 3) = 0;
      *((_QWORD *)v15 - 2) = 0;
      *((_QWORD *)v15 - 1) = 0;
      v13 -= 56;
    }
    while (&v12[v13] != v11);
    v17 = (char *)*a1;
    v12 = (char *)a1[1];
    *a1 = &v22[v13];
    a1[1] = v10;
    a1[2] = v24;
    if (v12 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v12 - 3);
        if (v18)
        {
          v19 = *((_QWORD *)v12 - 2);
          v20 = (void *)*((_QWORD *)v12 - 3);
          if (v19 != v18)
          {
            do
            {
              if (*(char *)(v19 - 17) < 0)
                operator delete(*(void **)(v19 - 40));
              v19 -= 40;
            }
            while (v19 != v18);
            v20 = (void *)*((_QWORD *)v12 - 3);
          }
          *((_QWORD *)v12 - 2) = v18;
          operator delete(v20);
        }
        if (*(v12 - 25) < 0)
          operator delete(*((void **)v12 - 6));
        v12 -= 56;
      }
      while (v12 != v17);
      v12 = v17;
    }
  }
  if (v12)
    operator delete(v12);
  return v23 + 56;
}

void sub_2395BBA40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395BBC54((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395BBA54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v3 + 31) < 0)
    operator delete(*v2);
  sub_2395BBC54((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2395BBA78(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x666666666666667)
      sub_2394189F8();
    result = (char *)operator new(40 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[40 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_23941A7F8(result, *(void **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v11;
          *((_QWORD *)result + 2) = *(_QWORD *)(v11 + 16);
        }
        v10 = &v8[v9];
        *((_QWORD *)v10 + 3) = *(_QWORD *)(a2 + v9 + 24);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(a2 + v9 + 32);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_2395BBB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2395BBBC0(&a9);
  _Unwind_Resume(a1);
}

void sub_2395BBB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 40)
  {
    if (*(char *)(v10 + v11 - 17) < 0)
      operator delete(*(void **)(v10 + v11 - 40));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_2395BBBC0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_2395BBBC0(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 17) < 0)
            operator delete(*(v4 - 5));
          v4 -= 5;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2395BBC54(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    v4 = *(_QWORD *)(i - 24);
    if (v4)
    {
      v5 = *(_QWORD *)(i - 16);
      v6 = *(void **)(i - 24);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 17) < 0)
            operator delete(*(void **)(v5 - 40));
          v5 -= 40;
        }
        while (v5 != v4);
        v6 = *(void **)(i - 24);
      }
      *(_QWORD *)(i - 16) = v4;
      operator delete(v6);
    }
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_2395BBD08(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_239428940((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (char *)operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v11;
  v27 = v26 + 16;
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_23941A7F8(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  *((_DWORD *)v26 + 10) = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        sub_239427FE0(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2395BC14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395BC160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_2395BC178(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  void **v16;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    sub_2394189F8();
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_239418A80();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v5];
  v18 = &v9[40 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = &v9[40 * v5];
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  v11 = &v9[40 * v5];
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *((_DWORD *)v11 + 8) = *(_DWORD *)(a2 + 32);
  v12 = v11 + 40;
  if (v4 == v3)
  {
    v15 = v3;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v4 - 40);
      *((_QWORD *)v10 - 3) = *((_QWORD *)v4 - 3);
      *(_OWORD *)(v10 - 40) = v13;
      *((_QWORD *)v4 - 4) = 0;
      *((_QWORD *)v4 - 3) = 0;
      *((_QWORD *)v4 - 5) = 0;
      v14 = *((_QWORD *)v4 - 2);
      *((_DWORD *)v10 - 2) = *((_DWORD *)v4 - 2);
      *((_QWORD *)v10 - 2) = v14;
      v10 -= 40;
      v4 -= 40;
    }
    while (v4 != v3);
    v15 = *a1;
    v3 = a1[1];
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v18;
  if (v3 != v15)
  {
    v16 = (void **)(v3 - 40);
    do
    {
      if (*((char *)v16 + 23) < 0)
        operator delete(*v16);
      v16 -= 5;
    }
    while (v16 + 5 != (void **)v15);
    v3 = v15;
  }
  if (v3)
    operator delete(v3);
  return v12;
}

void sub_2395BC35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395BC370((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2395BC370(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2395BC3D4(uint64_t a1, uint64_t a2, __int128 *a3, char a4)
{
  uint64_t (**v6)();
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t (***v15)();
  uint64_t v16;
  _BYTE v18[20];
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[3];
  uint64_t (***v45)();
  _QWORD v46[2];
  _QWORD v47[51];
  _QWORD v48[20];

  v48[19] = *MEMORY[0x24BDAC8D0];
  sub_23955D09C(v46);
  v6 = &off_250ADF810;
  v44[0] = &off_250ADF810;
  v44[1] = v46;
  v44[2] = 0;
  v45 = (uint64_t (***)())v44;
  if (v47[15])
  {
    *(_OWORD *)v18 = 0u;
    v20 = 0;
    v21 = 0u;
    v29 = 0x10000;
    v33 = 0u;
    *(_QWORD *)&v18[12] = 0x100000003;
    v19 = 0x404000003C23D70ALL;
    LOBYTE(v21) = 1;
    *(_QWORD *)((char *)&v21 + 4) = 0x600000008;
    v22 = xmmword_239EC66B0;
    v23 = 256;
    v24 = 15;
    v25 = xmmword_239EC66C0;
    v26 = 0xBFF0000000000000;
    v27 = 2139095039;
    v28 = 0x1EFFFFFFFFLL;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    LOBYTE(v33) = 1;
    BYTE8(v33) = 1;
    v7 = (__int128 *)v18;
    if (a4)
      v7 = a3;
    v8 = v7[1];
    v34 = *v7;
    v35 = v8;
    v9 = v7[2];
    v10 = v7[3];
    v11 = v7[5];
    v38 = v7[4];
    v39 = v11;
    v36 = v9;
    v37 = v10;
    v12 = v7[6];
    v13 = v7[7];
    v14 = v7[9];
    v42 = v7[8];
    v43 = v14;
    v40 = v12;
    v41 = v13;
    std::istream::read();
    if (!v45)
      sub_2394172E0();
    v6 = *v45;
  }
  v6[6]();
  v15 = v45;
  if (v45 == v44)
  {
    v16 = 4;
    v15 = (uint64_t (***)())v44;
    goto LABEL_12;
  }
  if (v45)
  {
    v16 = 5;
LABEL_12:
    (*v15)[v16]();
  }
  v46[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x23B83DC8C](v47);
  std::istream::~istream();
  MEMORY[0x23B83E250](v48);
  return 0;
}

void sub_2395BC8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  std::__shared_weak_count *v56;
  void *v58;

  std::__shared_weak_count::~__shared_weak_count(v56);
  operator delete(v58);
  sub_239416834(&a52);
  sub_23955CB90(&a56);
  _Unwind_Resume(a1);
}

void sub_2395BC8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  sub_239416834(&a52);
  sub_23955CB90(&a56);
  _Unwind_Resume(a1);
}

void sub_2395BC958(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

_QWORD *sub_2395BC970(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  char v14;
  unsigned int v15;

  v4 = (uint64_t *)(a2 + 64);
  if (*(_QWORD *)(a2 + 64))
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
  {
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
    {
      std::istream::read();
      if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
      {
        v15 = 0;
        std::istream::read();
        if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
        {
          v5 = *(_QWORD *)(a2 + 8);
          v6 = (*(_QWORD *)(a2 + 16) - v5) >> 2;
          v7 = v15 >= v6;
          v8 = v15 - v6;
          if (v8 != 0 && v7)
          {
            sub_23942CB44(a2 + 8, v8);
          }
          else if (!v7)
          {
            *(_QWORD *)(a2 + 16) = v5 + 4 * v15;
          }
          std::istream::read();
          if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
          {
            v14 = 0;
            std::istream::read();
            if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
            {
              v12 = 1;
              v11 = 0;
              v10 = 0;
              sub_2395C7274((unsigned int *)(a2 + 52), &v12, &v10, (uint64_t *)&v13);
              sub_239470D40((uint64_t)v4, &v13);
              sub_239416DA0((uint64_t)&v13);
              sub_2395C72F8(a1, *v4, *(unsigned int *)(a2 + 36), *(unsigned int *)(a2 + 52));
              if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
              {
                *(_DWORD *)(a2 + 56) = sub_2395C7810(*(_QWORD *)(a2 + 64));
                LODWORD(v13) = 0;
                LODWORD(v11) = 0;
                sub_2395C7904(*(_QWORD *)(a2 + 64), &v13, (uint64_t)&v11);
                *(_DWORD *)(a2 + 60) = v13;
                if (sub_2395C7888(*(_QWORD *)(a2 + 64)) != *(_DWORD *)(a2 + 60))
                  sub_239EC0A80();
              }
            }
          }
        }
      }
    }
  }
  return a1;
}

uint64_t sub_2395BCBC8(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;
  double v4;
  int v5;

  *(_DWORD *)(a1 + 56) = sub_2395C7810(*(_QWORD *)(a1 + 64));
  LODWORD(v4) = 0;
  v5 = 0;
  sub_2395C7904(*(_QWORD *)(a1 + 64), &v4, (uint64_t)&v5);
  *(_DWORD *)(a1 + 60) = LODWORD(v4);
  v2 = sub_2395C7888(*(_QWORD *)(a1 + 64));
  if (v2 != *(_DWORD *)(a1 + 60))
    sub_239EC0AE0();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
  v4 = 0.0;
  if (v2)
    sub_2395C7ADC((unint64_t *)(a1 + 80), v2, &v4);
  result = sub_2395C7A30(*(_QWORD *)(a1 + 64), (uint64_t *)(a1 + 80));
  if ((_DWORD)result != *(_DWORD *)(a1 + 60))
    sub_239EC0AB0();
  return result;
}

_QWORD *sub_2395BCC70(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  char v14;
  unsigned int v15;

  v4 = (uint64_t *)(a2 + 64);
  if (*(_QWORD *)(a2 + 64))
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
  {
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
    {
      std::istream::read();
      if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
      {
        v15 = 0;
        std::istream::read();
        if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
        {
          v5 = *(_QWORD *)(a2 + 8);
          v6 = (*(_QWORD *)(a2 + 16) - v5) >> 2;
          v7 = v15 >= v6;
          v8 = v15 - v6;
          if (v8 != 0 && v7)
          {
            sub_23942CB44(a2 + 8, v8);
          }
          else if (!v7)
          {
            *(_QWORD *)(a2 + 16) = v5 + 4 * v15;
          }
          std::istream::read();
          if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
          {
            v14 = 0;
            std::istream::read();
            if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
            {
              v12 = 1;
              v11 = 0;
              v10 = 0;
              sub_2395D27BC((unsigned int *)(a2 + 52), &v12, &v10, (uint64_t *)&v13);
              sub_239470D40((uint64_t)v4, &v13);
              sub_239416DA0((uint64_t)&v13);
              sub_2395D2840(a1, *v4, *(unsigned int *)(a2 + 36), *(unsigned int *)(a2 + 52));
              if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
              {
                *(_DWORD *)(a2 + 56) = sub_2395C7810(*(_QWORD *)(a2 + 64));
                LODWORD(v13) = 0;
                LODWORD(v11) = 0;
                sub_2395C7904(*(_QWORD *)(a2 + 64), &v13, (uint64_t)&v11);
                *(_DWORD *)(a2 + 60) = v13;
                if (sub_2395C7888(*(_QWORD *)(a2 + 64)) != *(_DWORD *)(a2 + 60))
                  sub_239EC0A80();
              }
            }
          }
        }
      }
    }
  }
  return a1;
}

void sub_2395BCECC()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2395BCEE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250ADF810;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2395BCF18(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADF810;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2395BCF38(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 8);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)), *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) | 4);
}

void sub_2395BCF80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADF858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2395BCF90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADF858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2395BCFC0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2395BCFD0(uint64_t result, uint64_t a2, char a3, int a4, char a5)
{
  unsigned int v5;

  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = &off_250ADF890;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 44) = 1;
  *(_BYTE *)(result + 48) = 0;
  *(_OWORD *)(result + 52) = 0u;
  *(_OWORD *)(result + 68) = 0u;
  *(_OWORD *)(result + 84) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_QWORD *)(result + 112) = 0x1400000001;
  *(_QWORD *)(result + 120) = 0x3FA999999999999ALL;
  *(_DWORD *)(result + 128) = 1;
  *(_DWORD *)(result + 136) = 1;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_DWORD *)(result + 176) = 1065353216;
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 200) = 0u;
  *(_DWORD *)(result + 216) = 1065353216;
  *(_OWORD *)(result + 240) = 0u;
  *(_DWORD *)(result + 256) = 1065353216;
  *(_OWORD *)(result + 264) = 0u;
  *(_OWORD *)(result + 280) = 0u;
  *(_DWORD *)(result + 296) = 1065353216;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= 0x10000)
  {
    sub_239A444D4((uint64_t)"unknown file", 47, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  *(_BYTE *)(result + 32) = a3;
  *(_BYTE *)(result + 33) = a5;
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(result + 40) = v5;
  *(_DWORD *)(result + 44) = a4;
  return result;
}

void sub_2395BD0FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;

  sub_239420950(v6);
  sub_239420950(v3);
  sub_239420950(v4);
  sub_239420950(v2);
  v8 = (void *)v1[10];
  if (v8)
  {
    v1[11] = v8;
    operator delete(v8);
  }
  sub_239416DA0(v5);
  *v1 = off_250ADF930;
  v9 = (void *)v1[1];
  if (v9)
  {
    v1[2] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2395BD15C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 36) != 0;
}

void sub_2395BD170(_QWORD *a1)
{
  sub_2395BEC80(a1);
  JUMPOUT(0x23B83E31CLL);
}

unint64_t sub_2395BD194(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v8;
  float v9;
  uint64_t v10;
  unint64_t result;

  v3 = a1[9];
  if (!v3)
    return 0;
  v4 = a1[10];
  if (!v4)
    return 0;
  v5 = a1[13];
  if (!(_DWORD)v5)
    return 0;
  v8 = pow((double)v3, (double)(v4 + 1));
  v9 = 1.0 / (float)(v3 - 1);
  if (v3 == 1)
    v9 = 3.4028e38;
  v10 = 8 * a2 * v8;
  if (!a2)
    v10 = 0;
  result = v10 + (v5 + 120) * (unint64_t)(float)(v9 * (float)(v3 * v8 - 1));
  if (a3)
    return (unint64_t)(float)((float)((float)a3 / (float)v8) * (float)result);
  return result;
}

_QWORD *sub_2395BD264(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;

  v1 = a1 + 8;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  sub_23950DB64(a1 + 8);
  result = *(_QWORD **)(v1 + 56);
  if (result)
    return sub_2395BEDC8(result);
  return result;
}

void sub_2395BD2A4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t j;

  v2 = a1 + 1;
  a1[2] = a1[1];
  sub_23950DB64((uint64_t)(a1 + 1));
  v3 = (_QWORD *)v2[7];
  if (v3)
  {
    sub_2395BEDC8(v3);
    v4 = (_QWORD *)a1[8];
    if (v4)
    {
      v5 = v4[7];
      for (i = v4[8]; i != v5; i -= 16)
      {
        v7 = *(std::__shared_weak_count **)(i - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
      v4[8] = v5;
      if (v4[13])
      {
        v10 = (_QWORD *)v4[12];
        if (v10)
        {
          do
          {
            v11 = (_QWORD *)*v10;
            operator delete(v10);
            v10 = v11;
          }
          while (v11);
        }
        v4[12] = 0;
        v12 = v4[11];
        if (v12)
        {
          for (j = 0; j != v12; ++j)
            *(_QWORD *)(v4[10] + 8 * j) = 0;
        }
        v4[13] = 0;
      }
    }
  }
}

uint64_t sub_2395BD38C(uint64_t result, char a2, int a3)
{
  *(_BYTE *)(result + 48) = a2;
  *(_DWORD *)(result + 52) = a3;
  return result;
}

BOOL sub_2395BD398(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64) != 0;
}

uint64_t sub_2395BD3A8()
{
  return 0;
}

uint64_t sub_2395BD3B0(unint64_t a1, uint64_t *a2, unsigned int a3, _QWORD *a4)
{
  uint64_t result;
  _BOOL4 v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int *v16;
  unsigned int *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  int v27;
  uint64_t v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  int v34;
  float *v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  double v40;
  double v41;
  double v42;
  BOOL v43;
  double v44;
  double v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53[2];

  if (!*(_DWORD *)(a1 + 36))
    return 0;
  if (*(_BYTE *)(a1 + 32))
    return 1;
  v9 = a3 > 1;
  v10 = operator new(0x90uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_250ADF9C8;
  *(_QWORD *)(a1 + 64) = sub_2395BF454((uint64_t)(v10 + 3), *(_DWORD *)(a1 + 52), 1, 0, v9);
  v11 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (a4 && !*(_BYTE *)(a1 + 33))
    a4[3] = a4[2];
  v14 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 112) = a3;
  v15 = sub_2395BEE50((__int128 *)(a1 + 104), -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3), *(_DWORD *)(a1 + 52), v14, 0, *(_BYTE *)(a1 + 48), (_QWORD *)(a1 + 64), a2, (uint64_t)a4);
  result = 0;
  if (v15)
  {
    if (a4)
    {
      v16 = (unsigned int *)a4[2];
      v17 = (unsigned int *)a4[3];
      if (v17 != v16)
      {
        sub_2394F00D0((_QWORD **)&v52, v16, v17);
        sub_2395C2BB0(&v50, v52, v53);
        v18 = *(void **)(a1 + 8);
        if (v18)
        {
          *(_QWORD *)(a1 + 16) = v18;
          operator delete(v18);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
        }
        *(_OWORD *)(a1 + 8) = v50;
        *(_QWORD *)(a1 + 24) = v51;
        sub_239421038((uint64_t)&v52, v53[0]);
      }
    }
    sub_2395BCBC8(a1);
    *(_BYTE *)(a1 + 137) = v9;
    result = 1;
    if (a4)
    {
      if (*(_BYTE *)(a1 + 136) && *(_BYTE *)(a1 + 33) && a4[6] != a4[5])
      {
        v52 = 0;
        v53[0] = 0;
        v53[1] = 0;
        sub_2395BF2FC(a1, a4 + 5, &v52);
        v19 = *(unsigned int *)(a1 + 60);
        v21 = a4[5];
        v20 = a4[6];
        v22 = v52;
        if (((v20 - v21) >> 2) * v19 != ((char *)v53[0] - v52) >> 2)
        {
          sub_239A444D4((uint64_t)"unknown file", 366, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        if (v20 != v21)
        {
          v23 = 0;
          v47 = a4;
          do
          {
            v49 = 0;
            v49 = *(_DWORD *)(v21 + 4 * v23);
            v25 = v19;
            v26 = 0.0;
            v48 = v21;
            if ((_DWORD)v19)
            {
              v27 = 0;
              v28 = 4 * v19;
              v29 = (float *)v22;
              do
              {
                v30 = *v29++;
                v27 = (int)(float)(v30 + (float)v27);
                v28 -= 4;
              }
              while (v28);
              v31 = fabsf((float)v27);
              if (v27 < 0)
                v32 = -3.4028e38;
              else
                v32 = 3.4028e38;
              v33 = v20;
              v34 = 0;
              v26 = 0.0;
              v35 = (float *)v22;
              v36 = v19;
              if (v31 < 0.00000011921)
              {
                do
                {
                  if (*v35 > 0.000001)
                  {
                    ++v34;
                    v38 = *v35;
                    v26 = v26 - (float)((float)(v38 * v32) * logf(v38 * v32));
                  }
                  ++v35;
                  --v36;
                }
                while (v36);
              }
              else
              {
                v37 = 1.0 / (float)v27;
                do
                {
                  if (*v35 > 0.000001)
                  {
                    ++v34;
                    v39 = *v35;
                    v26 = v26 - (float)((float)(v39 * v37) * logf(v39 * v37));
                  }
                  ++v35;
                  --v36;
                }
                while (v36);
              }
            }
            else
            {
              v33 = v20;
              v34 = 0;
            }
            v40 = log((double)v19);
            v41 = fabs(v40);
            v42 = 1.0 / v40;
            v43 = v40 < 0.0;
            v44 = -1.79769313e308;
            if (!v43)
              v44 = 1.79769313e308;
            if (v41 < 2.22044605e-16)
              v45 = v44;
            else
              v45 = v42;
            v20 = v33;
            v21 = v48;
            if (v34)
            {
              *(_QWORD *)&v50 = &v49;
              *((_DWORD *)sub_2394F126C(a1 + 224, &v49, (uint64_t)&unk_239EC6E98, (_DWORD **)&v50) + 5) = v34;
              *(_QWORD *)&v50 = &v49;
              v46 = sub_2394AAB74(a1 + 144, &v49, (uint64_t)&unk_239EC6E98, (_DWORD **)&v50);
              v24 = v45 * v26;
              *((float *)v46 + 5) = v24;
              v25 = *(unsigned int *)(a1 + 60);
              v21 = v47[5];
              v20 = v47[6];
              LODWORD(v19) = *(_DWORD *)(a1 + 60);
            }
            v22 += 4 * v25;
            ++v23;
          }
          while (v23 < (v20 - v21) >> 2);
          v22 = v52;
        }
        if (v22)
        {
          v53[0] = v22;
          operator delete(v22);
        }
        return 1;
      }
    }
  }
  return result;
}

void sub_2395BD81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2395BD864(unint64_t a1, __int32 a2, uint64_t a3, _QWORD *a4)
{
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  _DWORD *v10;
  void *__p;
  void *v13;
  _DWORD *v14;

  v7 = *(__int32 **)(a1 + 16);
  v8 = wmemchr(*(__int32 **)(a1 + 8), a2, ((uint64_t)v7 - *(_QWORD *)(a1 + 8)) >> 2);
  if (v8)
    v7 = v8;
  v9 = *(__int32 **)(a1 + 16);
  if (v7 != v9)
  {
    v10 = operator new(4uLL);
    __p = v10;
    *v10 = a2;
    v13 = v10 + 1;
    v14 = v10 + 1;
    sub_2395BF2FC(a1, (uint64_t *)&__p, a4);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
  return v7 != v9;
}

void sub_2395BD904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395BD920(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, uint64_t *a5)
{
  double v8;
  int8x16_t v9;
  float32x4_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  unsigned int *v15;
  unsigned int *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  unsigned int *v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float32x4_t *v35;
  uint64_t v36;
  float32x4_t v37;
  uint64_t v38;
  float *v39;
  float32x4_t *v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  float *v44;
  void *__p;
  unsigned int *v47;

  sub_239429CA8((uint64_t)a2, a3, (char **)&__p);
  v11 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v11)
  {
    v12 = (char *)operator new(4 * v11);
    bzero(v12, 4 * v11);
    v13 = &v12[4 * v11];
    v14 = (void *)*a5;
    if (!*a5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v13 = 0;
  v12 = 0;
  v14 = (void *)*a5;
  if (*a5)
  {
LABEL_3:
    a5[1] = (uint64_t)v14;
    operator delete(v14);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
LABEL_4:
  *a5 = (uint64_t)v12;
  a5[1] = (uint64_t)v13;
  a5[2] = (uint64_t)v13;
  v15 = (unsigned int *)__p;
  v16 = v47;
  if (__p != v47)
  {
    do
    {
      v17 = *v15;
      if (a2[4] <= v17 || ((*(_QWORD *)(a2[3] + ((v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 124, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      sub_2395C1698(*(_QWORD *)(a1 + 64), *a5, a2[9] + 24 * v17, 0, 0, 0, 0, v8, v9, v10);
      ++v15;
    }
    while (v15 != v16);
  }
  v18 = *(_DWORD *)(a1 + 44);
  if (v18 == 1)
  {
    v19 = *(unsigned int *)(a1 + 60);
    if (!(_DWORD)v19)
      goto LABEL_41;
    v20 = *a5;
    if ((_DWORD)v19 == 1)
    {
      v21 = 0;
      v22 = 0.0;
    }
    else
    {
      v21 = v19 & 0xFFFFFFFE;
      v25 = (float *)(v20 + 4);
      v22 = 0.0;
      v26 = v21;
      do
      {
        v22 = (float)(v22 + *(v25 - 1)) + *v25;
        v25 += 2;
        v26 -= 2;
      }
      while (v26);
      if (v21 == v19)
      {
LABEL_23:
        v30 = fabsf(v22);
        v31 = -3.4028e38;
        if (v22 >= 0.0)
          v31 = 3.4028e38;
        if (v30 < 0.00000011921)
        {
          if (v19 >= 8)
          {
            v32 = v19 & 0xFFFFFFF8;
            v35 = (float32x4_t *)(v20 + 16);
            v36 = v32;
            do
            {
              v37 = vmulq_n_f32(*v35, v31);
              v35[-1] = vmulq_n_f32(v35[-1], v31);
              *v35 = v37;
              v35 += 2;
              v36 -= 8;
            }
            while (v36);
            if (v32 == v19)
              goto LABEL_41;
          }
          else
          {
            v32 = 0;
          }
          v38 = v19 - v32;
          v39 = (float *)(v20 + 4 * v32);
          do
          {
            *v39 = v31 * *v39;
            ++v39;
            --v38;
          }
          while (v38);
          goto LABEL_41;
        }
        v33 = 1.0 / v22;
        if (v19 >= 8)
        {
          v34 = v19 & 0xFFFFFFF8;
          v40 = (float32x4_t *)(v20 + 16);
          v41 = v34;
          do
          {
            v42 = vmulq_n_f32(*v40, v33);
            v40[-1] = vmulq_n_f32(v40[-1], v33);
            *v40 = v42;
            v40 += 2;
            v41 -= 8;
          }
          while (v41);
          if (v34 == v19)
            goto LABEL_41;
        }
        else
        {
          v34 = 0;
        }
        v43 = v19 - v34;
        v44 = (float *)(v20 + 4 * v34);
        do
        {
          *v44 = v33 * *v44;
          ++v44;
          --v43;
        }
        while (v43);
        goto LABEL_41;
      }
    }
    v27 = v19 - v21;
    v28 = (float *)(v20 + 4 * v21);
    do
    {
      v29 = *v28++;
      v22 = v22 + v29;
      --v27;
    }
    while (v27);
    goto LABEL_23;
  }
  if (v18 != 2)
  {
    v23 = 0;
    v24 = (unsigned int *)__p;
    if (!__p)
      return v23;
    goto LABEL_42;
  }
  sub_2396F55B0((float32x4_t *)*a5, *(unsigned int *)(a1 + 60), v8);
LABEL_41:
  v23 = 1;
  v24 = (unsigned int *)__p;
  if (__p)
  {
LABEL_42:
    v47 = v24;
    operator delete(v24);
  }
  return v23;
}

void sub_2395BDBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395BDC20(uint64_t a1, __int32 a2, _QWORD *a3, char a4, unsigned int a5)
{
  uint64_t v8;
  __int32 *v9;
  uint64_t v10;
  __int32 *v11;
  __int32 *v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  BOOL v16;
  double v17;
  int8x16_t v18;
  float32x4_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  std::thread *v26;
  int v27;
  char *v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  std::thread *v37;
  char *v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  _opaque_pthread_t *v49;
  std::thread *v50;
  std::thread *v51;
  std::thread *v52;
  std::thread *v53;
  void *v54;
  int v55;
  uint64_t *v56;
  float v57;
  float v58;
  unsigned int *v59;
  unsigned int v60;
  float v61;
  float v62;
  BOOL v63;
  float v64;
  float v65;
  unsigned int v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t *v72;
  float v73;
  int v74;
  uint64_t *v75;
  float v76;
  float v77;
  unsigned int *v78;
  unsigned int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  uint64_t *v90;
  float v91;
  unint64_t v92;
  char *v93;
  _DWORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  __int32 *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  _OWORD *v108;
  char *v109;
  uint64_t v110;
  __int128 v111;
  __int32 v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  _QWORD *v116;
  _QWORD *v117;
  void *v118;
  uint64_t v120;
  uint64_t v121;
  std::thread v122;
  int v123;
  void *__p;
  std::thread *v125;
  unint64_t v126;
  int v127;
  __int128 v128;
  BOOL *v129;
  _QWORD *v130;
  pthread_rwlock_t *v131;
  __int128 *v132;
  void **v133;
  unsigned int *v134;
  BOOL v135;
  void *v136[2];
  __int128 v137;
  int v138;
  __int128 v139;
  __int128 v140;
  int v141;
  void *v142;
  _BYTE *v143;
  __int32 v144;
  pthread_rwlock_t v145;
  uint64_t v146;

  v8 = a1;
  v146 = *MEMORY[0x24BDAC8D0];
  v144 = a2;
  v9 = *(__int32 **)(a1 + 16);
  v10 = a1 + 8;
  v11 = wmemchr(*(__int32 **)(a1 + 8), a2, ((uint64_t)v9 - *(_QWORD *)(a1 + 8)) >> 2);
  if (v11)
    v12 = v11;
  else
    v12 = v9;
  if (v12 != *(__int32 **)(v10 + 8))
    return 1;
  sub_239429CA8((uint64_t)a3, a4, (char **)&v142);
  v139 = 0u;
  v140 = 0u;
  v141 = 1065353216;
  v137 = 0u;
  *(_OWORD *)v136 = 0u;
  v138 = 1065353216;
  v13 = a3[4];
  if (v13)
  {
    v14 = 0;
    v15 = (float *)(a3[6] + 20);
    v16 = 1;
    do
    {
      if (((*(_QWORD *)(a3[3] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) != 0 && *v15 > -0.00000011921)
        break;
      v16 = ++v14 < v13;
      v15 += 6;
    }
    while (v13 != v14);
  }
  else
  {
    v16 = 0;
  }
  v135 = v16;
  sub_2397A1588(&v145);
  *(_QWORD *)&v128 = v8;
  *((_QWORD *)&v128 + 1) = &v142;
  v129 = &v135;
  v130 = a3;
  v131 = &v145;
  v132 = &v139;
  v133 = v136;
  v134 = (unsigned int *)&v144;
  v20 = (unint64_t)(v143 - (_BYTE *)v142) >> 2;
  if (a5 == 1)
  {
    sub_2395C2DEC((uint64_t)&v128, 0, (unint64_t)(v143 - (_BYTE *)v142) >> 2, v17, v18, v19);
    goto LABEL_64;
  }
  v127 = 0;
  __p = 0;
  v125 = 0;
  v126 = 0;
  if (v20 >= a5)
    v21 = a5;
  else
    v21 = (unint64_t)(v143 - (_BYTE *)v142) >> 2;
  if (*(_BYTE *)(v8 + 137))
  {
    v120 = v8;
    v121 = v10;
    if (!v21)
      goto LABEL_54;
    goto LABEL_23;
  }
  v22 = *(_QWORD *)(v8 + 64);
  if (v22)
    sub_2395C7978(v22);
  *(_BYTE *)(v8 + 137) = 1;
  v120 = v8;
  v121 = v10;
  if (v21)
  {
LABEL_23:
    v23 = 0;
    v24 = v20 / v21;
    v25 = v20 - v20 / v21 * (v21 - 1);
    do
    {
      if (v23 == v21 - 1)
        v27 = v25;
      else
        v27 = v24;
      v123 = v27;
      sub_2395C2FD4(&v122.__t_, &v128, &v127, &v123);
      v28 = (char *)v125;
      if ((unint64_t)v125 < v126)
      {
        v125->__t_ = v122.__t_;
        v122.__t_ = 0;
        v26 = (std::thread *)(v28 + 8);
      }
      else
      {
        v29 = (char *)__p;
        v30 = (char *)v125 - (_BYTE *)__p;
        v31 = ((char *)v125 - (_BYTE *)__p) >> 3;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61)
          sub_2394189F8();
        v33 = v126 - (_QWORD)__p;
        if ((uint64_t)(v126 - (_QWORD)__p) >> 2 > v32)
          v32 = v33 >> 2;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        v35 = 0uLL;
        if (v34)
        {
          if (v34 >> 61)
            sub_239418A80();
          v36 = (char *)operator new(8 * v34);
          v35 = 0uLL;
        }
        else
        {
          v36 = 0;
        }
        v37 = (std::thread *)&v36[8 * v31];
        v38 = &v36[8 * v34];
        v37->__t_ = v122.__t_;
        v26 = v37 + 1;
        v122.__t_ = 0;
        v39 = v28 - v29;
        if (v28 != v29)
        {
          v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) < 0x78)
            goto LABEL_144;
          v41 = v40 >> 3;
          if (&v36[v30 - (v40 & 0xFFFFFFFFFFFFFFF8) - 8] < v28 && &v28[-8 * v41 - 8] < (char *)v37)
            goto LABEL_144;
          v42 = v41 + 1;
          v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
          v44 = &v28[-v43];
          v37 = (std::thread *)((char *)v37 - v43);
          v45 = &v36[8 * v31 - 16];
          v46 = v28 - 16;
          v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *(_OWORD *)v46;
            *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
            *(_OWORD *)v45 = v48;
            *((_OWORD *)v46 - 1) = v35;
            *(_OWORD *)v46 = v35;
            v45 -= 32;
            v46 -= 32;
            v47 -= 4;
          }
          while (v47);
          v28 = v44;
          if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_144:
            do
            {
              v49 = (_opaque_pthread_t *)*((_QWORD *)v28 - 1);
              v28 -= 8;
              v37[-1].__t_ = v49;
              --v37;
              *(_QWORD *)v28 = 0;
            }
            while (v28 != v29);
          }
          v28 = (char *)__p;
          v50 = v125;
          __p = v37;
          v125 = v26;
          v126 = (unint64_t)v38;
          while (v50 != (std::thread *)v28)
            std::thread::~thread(v50 - 1);
          if (!v28)
            goto LABEL_25;
LABEL_53:
          operator delete(v28);
          goto LABEL_25;
        }
        __p = &v36[8 * v31];
        v125 = v37 + 1;
        v126 = (unint64_t)v38;
        if (v28)
          goto LABEL_53;
      }
LABEL_25:
      v125 = v26;
      std::thread::~thread(&v122);
      v127 += v123;
      ++v23;
    }
    while (v23 != v21);
  }
LABEL_54:
  v52 = (std::thread *)__p;
  v51 = v125;
  if (__p != v125)
  {
    v10 = v121;
    do
      std::thread::join(v52++);
    while (v52 != v51);
    v52 = (std::thread *)__p;
    v8 = v120;
    if (!__p)
      goto LABEL_64;
LABEL_60:
    v53 = v125;
    v54 = v52;
    if (v125 != v52)
    {
      do
        std::thread::~thread(v53 - 1);
      while (v53 != v52);
      v54 = __p;
    }
    v125 = v52;
    operator delete(v54);
    goto LABEL_64;
  }
  v8 = v120;
  v10 = v121;
  if (__p)
    goto LABEL_60;
LABEL_64:
  if (*(_BYTE *)(v8 + 136) && v135)
  {
    v55 = DWORD2(v140);
    if (*((_QWORD *)&v140 + 1))
    {
      v56 = (uint64_t *)v140;
      v57 = 0.0;
      v58 = 0.0;
      if ((_QWORD)v140)
      {
        v59 = (unsigned int *)v140;
        do
        {
          v58 = v58 + (float)v59[5];
          v59 = *(unsigned int **)v59;
        }
        while (v59);
      }
      v60 = *(_DWORD *)(v8 + 60);
      v61 = fabsf(v58);
      v62 = 1.0 / v58;
      v63 = v58 < 0.0;
      v64 = -3.4028e38;
      if (!v63)
        v64 = 3.4028e38;
      if (v61 < 0.00000011921)
        v65 = v64;
      else
        v65 = v62;
      if ((_QWORD)v140)
      {
        v57 = 0.0;
        do
        {
          v66 = *((_DWORD *)v56 + 5);
          if (v66)
            v57 = v57 - (float)((float)(v65 * (float)v66) * logf(v65 * (float)v66));
          v56 = (uint64_t *)*v56;
        }
        while (v56);
      }
      v67 = log((double)v60);
      v68 = fabs(v67);
      v69 = 1.0 / v67;
      v63 = v67 < 0.0;
      v70 = -1.79769313e308;
      if (!v63)
        v70 = 1.79769313e308;
      if (v68 < 2.22044605e-16)
        v71 = v70;
      else
        v71 = v69;
      __p = &v144;
      *((_DWORD *)sub_2394F126C(v8 + 224, (unsigned int *)&v144, (uint64_t)&unk_239EC6E98, (_DWORD **)&__p) + 5) = v55;
      __p = &v144;
      v72 = sub_2394AAB74(v8 + 144, (unsigned int *)&v144, (uint64_t)&unk_239EC6E98, (_DWORD **)&__p);
      v73 = v71 * v57;
      *((float *)v72 + 5) = v73;
    }
    v74 = DWORD2(v137);
    if (*((_QWORD *)&v137 + 1))
    {
      v75 = (uint64_t *)v137;
      v76 = 0.0;
      v77 = 0.0;
      if ((_QWORD)v137)
      {
        v78 = (unsigned int *)v137;
        do
        {
          v77 = v77 + (float)v78[5];
          v78 = *(unsigned int **)v78;
        }
        while (v78);
      }
      v79 = *(_DWORD *)(v8 + 60);
      v80 = fabsf(v77);
      v81 = 1.0 / v77;
      v63 = v77 < 0.0;
      v82 = -3.4028e38;
      if (!v63)
        v82 = 3.4028e38;
      if (v80 < 0.00000011921)
        v83 = v82;
      else
        v83 = v81;
      if ((_QWORD)v137)
      {
        v76 = 0.0;
        do
        {
          v84 = *((_DWORD *)v75 + 5);
          if (v84)
            v76 = v76 - (float)((float)(v83 * (float)v84) * logf(v83 * (float)v84));
          v75 = (uint64_t *)*v75;
        }
        while (v75);
      }
      v85 = log((double)v79);
      v86 = fabs(v85);
      v87 = 1.0 / v85;
      v63 = v85 < 0.0;
      v88 = -1.79769313e308;
      if (!v63)
        v88 = 1.79769313e308;
      if (v86 < 2.22044605e-16)
        v89 = v88;
      else
        v89 = v87;
      __p = &v144;
      *((_DWORD *)sub_2394F126C(v8 + 264, (unsigned int *)&v144, (uint64_t)&unk_239EC6E98, (_DWORD **)&__p) + 5) = v74;
      __p = &v144;
      v90 = sub_2394AAB74(v8 + 184, (unsigned int *)&v144, (uint64_t)&unk_239EC6E98, (_DWORD **)&__p);
      v91 = v89 * v76;
      *((float *)v90 + 5) = v91;
    }
  }
  v93 = *(char **)(v8 + 16);
  v92 = *(_QWORD *)(v8 + 24);
  if ((unint64_t)v93 >= v92)
  {
    v95 = *(char **)v10;
    v96 = (uint64_t)&v93[-*(_QWORD *)v10];
    v97 = v96 >> 2;
    v98 = (v96 >> 2) + 1;
    if (v98 >> 62)
      sub_2394189F8();
    v99 = v92 - (_QWORD)v95;
    if (v99 >> 1 > v98)
      v98 = v99 >> 1;
    if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
      v100 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v100 = v98;
    if (v100)
    {
      if (v100 >> 62)
        sub_239418A80();
      v101 = operator new(4 * v100);
    }
    else
    {
      v101 = 0;
    }
    v102 = (__int32 *)&v101[4 * v97];
    v103 = &v101[4 * v100];
    *v102 = v144;
    v94 = v102 + 1;
    if (v93 != v95)
    {
      v104 = v93 - v95 - 4;
      if (v104 < 0x2C)
        goto LABEL_145;
      if ((unint64_t)(v93 - v101 - v96) < 0x20)
        goto LABEL_145;
      v105 = (v104 >> 2) + 1;
      v106 = 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
      v107 = &v93[-v106];
      v102 = (__int32 *)((char *)v102 - v106);
      v108 = &v101[4 * v97 - 16];
      v109 = v93 - 16;
      v110 = v105 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v111 = *(_OWORD *)v109;
        *(v108 - 1) = *((_OWORD *)v109 - 1);
        *v108 = v111;
        v108 -= 2;
        v109 -= 32;
        v110 -= 8;
      }
      while (v110);
      v93 = v107;
      if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_145:
        do
        {
          v112 = *((_DWORD *)v93 - 1);
          v93 -= 4;
          *--v102 = v112;
        }
        while (v93 != v95);
      }
    }
    *(_QWORD *)(v8 + 8) = v102;
    *(_QWORD *)(v8 + 16) = v94;
    *(_QWORD *)(v8 + 24) = v103;
    if (v95)
      operator delete(v95);
  }
  else
  {
    *(_DWORD *)v93 = v144;
    v94 = v93 + 4;
  }
  *(_QWORD *)(v8 + 16) = v94;
  sub_2397A15B0(&v145);
  v113 = (_QWORD *)v137;
  if ((_QWORD)v137)
  {
    do
    {
      v114 = (_QWORD *)*v113;
      operator delete(v113);
      v113 = v114;
    }
    while (v114);
  }
  v115 = v136[0];
  v136[0] = 0;
  if (v115)
    operator delete(v115);
  v116 = (_QWORD *)v140;
  if ((_QWORD)v140)
  {
    do
    {
      v117 = (_QWORD *)*v116;
      operator delete(v116);
      v116 = v117;
    }
    while (v117);
  }
  v118 = (void *)v139;
  *(_QWORD *)&v139 = 0;
  if (v118)
    operator delete(v118);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  return 1;
}

void sub_2395BE464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::thread a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_239420998(&a14);
  sub_2397A15B0((pthread_rwlock_t *)&a43);
  sub_239420950((uint64_t)&a27);
  sub_239420950((uint64_t)&a33);
  if (!__p)
    _Unwind_Resume(a1);
  a40 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2395BE4E0(uint64_t a1, __int32 **a2)
{
  _BOOL8 v4;
  uint64_t v5;

  v4 = sub_2395BEB58(a1, a2);
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    return sub_2395C3204(v5, (unsigned int **)a2) || v4;
  return v4;
}

uint64_t sub_2395BE52C(uint64_t a1, __int32 **a2, uint64_t a3)
{
  uint64_t v3;
  __int32 **v4;
  __int32 *v6;
  __int32 *v7;
  int64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  float *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  void *v26[2];
  void *__p[2];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v4 = a2;
  if (!(_BYTE)a3)
    goto LABEL_17;
  v7 = *a2;
  v6 = a2[1];
  v8 = (char *)v6 - (char *)*a2;
  v9 = v8 >> 2;
  v11 = *(_BYTE **)(a1 + 8);
  v10 = *(_BYTE **)(a1 + 16);
  if (v8 >> 2 != (v10 - v11) >> 2)
    goto LABEL_17;
  v26[0] = 0;
  v26[1] = 0;
  __p[0] = 0;
  if (v6 == v7)
  {
    v25 = 0;
    v12 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    if (v10 != v11)
    {
LABEL_6:
      if (v10 - v11 < 0)
        sub_2394189F8();
      v13 = (char *)operator new(v10 - v11);
      v14 = &v13[4 * v9];
      memcpy(v13, v11, v10 - v11);
      goto LABEL_10;
    }
  }
  else
  {
    if (v8 < 0)
      sub_2394189F8();
    v12 = (char *)operator new(v8);
    v25 = &v12[4 * v9];
    memcpy(v12, v7, v8);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    if (v10 != v11)
      goto LABEL_6;
  }
  v14 = 0;
  v13 = 0;
LABEL_10:
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  if (v25 - v12 == v14 - v13 && !memcmp(v12, v13, v25 - v12))
  {
    v4 = 0;
    v3 = 0;
  }
  if (v13)
    operator delete(v13);
  if (v12)
    operator delete(v12);
LABEL_17:
  if (!*(_BYTE *)(a1 + 32))
  {
    v21 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    if (!v21)
      return 0;
    v22 = *(_QWORD *)(a1 + 64);
    if (v22)
    {
      sub_2395C3978(v22, v21 >> 2);
      v23 = *(_QWORD *)(a1 + 64);
      if (v23)
        sub_2395C3A04(v23, v4, v3);
    }
  }
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)__p = 0u;
  v28 = 1065353216;
  if ((sub_2395C33D8(*(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 44), v26, v4, v3) & 1) != 0)
  {
    v15 = *(_DWORD *)(a1 + 44);
    if (v15 == 1)
      goto LABEL_23;
    if (v15 == 2)
    {
      v16 = (float *)__p[0];
      if (__p[0])
      {
        do
        {
          v16[5] = sqrtf(v16[5]);
          v16 = *(float **)v16;
        }
        while (v16);
      }
LABEL_23:
      v17 = sub_2395C3790(*(_QWORD *)(a1 + 64), v26, v4, v3);
      v18 = __p[0];
      if (!__p[0])
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  v17 = 0;
  v18 = __p[0];
  if (!__p[0])
    goto LABEL_27;
  do
  {
LABEL_26:
    v19 = (_QWORD *)*v18;
    operator delete(v18);
    v18 = v19;
  }
  while (v19);
LABEL_27:
  v20 = v26[0];
  v26[0] = 0;
  if (v20)
    operator delete(v20);
  return v17;
}

void sub_2395BE794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  if (__p)
    operator delete(__p);
  if (v18)
    operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_2395BE7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239420950((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2395BE7F4(unint64_t a1, _QWORD *a2, char a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t i;
  unsigned int *v16;
  unsigned int *j;
  unsigned int v18;
  _BOOL8 v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v24[2];
  void *__p[2];
  int v26;
  unsigned int v27;

  if (a5[3])
  {
    v12 = (_QWORD *)a5[2];
    if (v12)
    {
      do
      {
        v13 = (_QWORD *)*v12;
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
    a5[2] = 0;
    v14 = a5[1];
    if (v14)
    {
      for (i = 0; i != v14; ++i)
        *(_QWORD *)(*a5 + 8 * i) = 0;
    }
    a5[3] = 0;
  }
  v16 = *(unsigned int **)(a1 + 8);
  for (j = *(unsigned int **)(a1 + 16);
        v16 != j;
        *((_DWORD *)sub_2394AAB74((uint64_t)a5, &v27, (uint64_t)&unk_239EC6E98, (_DWORD **)v24) + 5) = 0)
  {
    v18 = *v16++;
    v27 = v18;
    v24[0] = &v27;
  }
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)__p = 0u;
  v26 = 1065353216;
  if ((sub_2394A9E64(a1, a2, a3, a4, v24) & 1) != 0)
  {
    v19 = sub_2395C3AD8(a1, (uint64_t)v24, a4, a6, a5, 1, 0, 0);
    v20 = __p[0];
    if (!__p[0])
      goto LABEL_15;
  }
  else
  {
    v19 = 0;
    v20 = __p[0];
    if (!__p[0])
      goto LABEL_15;
  }
  do
  {
    v21 = (_QWORD *)*v20;
    operator delete(v20);
    v20 = v21;
  }
  while (v21);
LABEL_15:
  v22 = v24[0];
  v24[0] = 0;
  if (v22)
    operator delete(v22);
  return v19;
}

void sub_2395BE96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239420950((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2395BE980(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t i;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  __int32 *v19;
  __int32 *v20;
  __int32 *v21;
  uint64_t *v22;
  _BOOL8 v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v28[2];
  void *__p[2];
  int v30;
  unsigned int v31;
  __int32 v32;

  v32 = a2;
  if (a5[3])
  {
    v12 = (_QWORD *)a5[2];
    if (v12)
    {
      do
      {
        v13 = (_QWORD *)*v12;
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
    a5[2] = 0;
    v14 = a5[1];
    if (v14)
    {
      for (i = 0; i != v14; ++i)
        *(_QWORD *)(*a5 + 8 * i) = 0;
    }
    a5[3] = 0;
  }
  v16 = (unsigned int *)a1[1];
  v17 = (unsigned int *)a1[2];
  if (v16 == v17)
  {
    v19 = (__int32 *)a1[1];
  }
  else
  {
    do
    {
      v18 = *v16++;
      v31 = v18;
      v28[0] = &v31;
      *((_DWORD *)sub_2394AAB74((uint64_t)a5, &v31, (uint64_t)&unk_239EC6E98, (_DWORD **)v28) + 5) = 0;
    }
    while (v16 != v17);
    v19 = (__int32 *)a1[1];
    v16 = (unsigned int *)a1[2];
  }
  *(_OWORD *)v28 = 0u;
  *(_OWORD *)__p = 0u;
  v30 = 1065353216;
  v20 = wmemchr(v19, a2, ((char *)v16 - (char *)v19) >> 2);
  if (v20)
    v21 = v20;
  else
    v21 = (__int32 *)v16;
  if (v21 == (__int32 *)a1[2])
  {
    v23 = 0;
    v24 = __p[0];
    if (!__p[0])
      goto LABEL_20;
    goto LABEL_19;
  }
  v22 = (uint64_t *)a1[8];
  if (v22)
    sub_2394AAAA4(v22, a2, (uint64_t)v28);
  v23 = sub_2395C3AD8((unint64_t)a1, (uint64_t)v28, a3, a6, a5, a4, &v32, 1u);
  v24 = __p[0];
  if (__p[0])
  {
    do
    {
LABEL_19:
      v25 = (_QWORD *)*v24;
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
LABEL_20:
  v26 = v28[0];
  v28[0] = 0;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_2395BEB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239420950((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2395BEB38()
{
  return 0;
}

void sub_2395BEB40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = a1 + 8;
  *(_QWORD *)(v1 + 8) = v2;
  sub_23950DB64(v1);
}

void sub_2395BEB4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = a1 + 8;
  *(_QWORD *)(v1 + 8) = v2;
  sub_23950DB64(v1);
}

BOOL sub_2395BEB58(uint64_t a1, __int32 **a2)
{
  __int32 *v3;
  __int32 *v4;
  __int32 *v5;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int32 *v13;
  uint64_t v14;

  v4 = *(__int32 **)(a1 + 8);
  v3 = *(__int32 **)(a1 + 16);
  v5 = v3;
  if (v4 != v3)
  {
    v7 = a2[1];
    v8 = *(__int32 **)(a1 + 8);
    while (1)
    {
      v9 = wmemchr(*a2, *v8, v7 - *a2);
      if (v9)
        v7 = v9;
      v10 = a2[1];
      if (v7 != v10)
        break;
      if (++v8 == v3)
        goto LABEL_17;
    }
    if (v8 != v3)
    {
      v11 = v8 + 1;
      v5 = v8;
      while (v11 != v3)
      {
        v12 = wmemchr(*a2, *v11, v10 - *a2);
        if (v12)
          v13 = v12;
        else
          v13 = v10;
        v10 = a2[1];
        if (v13 == v10)
          *v5++ = *v11;
        ++v11;
      }
    }
  }
LABEL_17:
  v14 = *(_QWORD *)(a1 + 8);
  if (v5 != *(__int32 **)(a1 + 16))
    *(_QWORD *)(a1 + 16) = v5;
  return (char *)v3 - (char *)v4 > (unint64_t)v5 - v14;
}

_QWORD *sub_2395BEC80(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;

  *a1 = &off_250ADF890;
  v2 = (_QWORD *)a1[35];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[33];
  a1[33] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[30];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[28];
  a1[28] = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)a1[25];
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)a1[23];
  a1[23] = 0;
  if (v10)
    operator delete(v10);
  v11 = (_QWORD *)a1[20];
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = (void *)a1[18];
  a1[18] = 0;
  if (v13)
    operator delete(v13);
  v14 = (void *)a1[10];
  if (v14)
  {
    a1[11] = v14;
    operator delete(v14);
  }
  v15 = (std::__shared_weak_count *)a1[9];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      *a1 = off_250ADF930;
      v18 = (void *)a1[1];
      if (!v18)
        return a1;
      goto LABEL_24;
    }
  }
  *a1 = off_250ADF930;
  v18 = (void *)a1[1];
  if (v18)
  {
LABEL_24:
    a1[2] = v18;
    operator delete(v18);
  }
  return a1;
}

_QWORD *sub_2395BEDC8(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD **v5;
  _QWORD **v6;

  v1 = result;
  if (result[13])
  {
    result = (_QWORD *)result[12];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[12] = 0;
    v3 = v1[11];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(v1[10] + 8 * i) = 0;
    }
    v1[13] = 0;
  }
  v6 = (_QWORD **)v1[7];
  v5 = (_QWORD **)v1[8];
  while (v6 != v5)
  {
    result = *v6;
    if (*v6)
      result = (_QWORD *)sub_2395BEDC8();
    v6 += 2;
  }
  return result;
}

uint64_t sub_2395BEE50(__int128 *a1, int a2, int a3, int a4, int a5, char a6, _QWORD *a7, uint64_t *a8, uint64_t a9)
{
  __int128 v9;
  unsigned int v10;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  double v25;
  unsigned int v26;
  float v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  __int128 v38[2];
  char v39;
  int v40;
  int v41;
  int v42;
  int v43;
  _QWORD v44[3];
  _QWORD *v45;
  _BYTE v46[24];
  _BYTE *v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  pthread_cond_t v55;
  pthread_cond_t v56;
  pthread_mutex_t v57;
  _BYTE v58[352];
  _BYTE v59[352];
  pthread_mutex_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v42 = a3;
  v43 = a2;
  v40 = a5;
  v41 = a4;
  v39 = a6;
  v9 = a1[1];
  v38[0] = *a1;
  v38[1] = v9;
  v10 = DWORD2(v38[0]);
  v37 = DWORD2(v38[0]) > 1;
  if (!DWORD2(v38[0]))
    sub_239EC0B10();
  sub_2397A1618(&v60);
  v36 = 0;
  v35 = 0;
  v33 = 0;
  v34 = 0;
  if (a9)
  {
    if (*(_BYTE *)(a9 + 8))
    {
      v13 = *(_QWORD **)a9;
      v34 = v13;
      *(_QWORD *)((char *)v13 + 12) = 0;
      *(_QWORD *)((char *)v13 + 4) = 0;
      v13[3] = 0;
      v13[4] = 0;
    }
    v14 = *(_QWORD *)(a9 + 16);
    v15 = *(_QWORD *)(a9 + 24) - v14;
    if (v15)
    {
      v35 = 1;
      if (0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3) != v15 >> 2)
      {
        sub_239A444D4((uint64_t)"unknown file", 84, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v33 = v14;
    }
  }
  sub_2397A2A50((uint64_t)v59, v10, 0);
  sub_2397A2A50((uint64_t)v58, 1u, 0);
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  sub_2397A1618(&v57);
  v48 = 0x7FFFFFFF;
  pthread_cond_init(&v55, 0);
  pthread_cond_init(&v56, 0);
  v16 = operator new(0x20uLL);
  *v16 = &off_250ADFA00;
  v16[1] = v58;
  v16[2] = &v48;
  v16[3] = v46;
  v47 = v16;
  v32 = 1;
  v17 = operator new(0x80uLL);
  *v17 = &off_250ADFA90;
  v17[1] = v59;
  v17[2] = v58;
  v17[3] = &v48;
  v17[4] = v46;
  v17[5] = v44;
  v17[6] = &v39;
  v17[7] = &v42;
  v17[8] = (char *)v38 + 4;
  v17[9] = &v41;
  v17[10] = &v35;
  v17[11] = &v60;
  v17[12] = &v36;
  v17[13] = &v34;
  v17[14] = &v32;
  v17[15] = &v37;
  v45 = v17;
  v31 = *a8;
  sub_2395BF758((uint64_t)v59, v44, v38, &v43, &v40, a7, &v31, &v33);
  v18 = sub_2395BFB54(&v48);
  v19 = v18;
  if ((v18 & 0x100) != 0)
  {
    sub_2397A2D24((uint64_t)v59);
    v23 = v34;
    if (v34)
    {
      v24 = v36;
      v25 = (float)(1.0 / (float)v36);
      v26 = *((_DWORD *)v34 + 1);
      v27 = 1.0 / (float)v26;
      if (!v26)
        v27 = 3.4028e38;
      *((float *)v34 + 4) = *((float *)v34 + 4) * v27;
      if (!v24)
        v25 = 3.40282347e38;
      *(float64x2_t *)(v23 + 3) = vmulq_n_f64(*(float64x2_t *)(v23 + 3), v25);
    }
    v20 = v19 & 1;
    v21 = v45;
    if (v45 != v44)
      goto LABEL_10;
LABEL_19:
    v22 = 4;
    v21 = v44;
    goto LABEL_20;
  }
  v20 = 0;
  v21 = v45;
  if (v45 == v44)
    goto LABEL_19;
LABEL_10:
  if (!v21)
    goto LABEL_21;
  v22 = 5;
LABEL_20:
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_21:
  v28 = v47;
  if (v47 == v46)
  {
    v29 = 4;
    v28 = v46;
    goto LABEL_25;
  }
  if (v47)
  {
    v29 = 5;
LABEL_25:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  sub_2395C29C4((uint64_t)&v48);
  sub_2397A2E14(v58);
  sub_2397A2E14(v59);
  sub_2397A163C(&v60);
  return v20;
}

void sub_2395BF1F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2397A163C((pthread_mutex_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_2395BF208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27,char a28,uint64_t a29,uint64_t a30,char *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;

  v64 = a27;
  if (a27 == &a24)
  {
    v65 = 4;
    v64 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v65 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v64 + 8 * v65))();
LABEL_6:
  v66 = a31;
  if (a31 == &a28)
  {
    v67 = 4;
    v66 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_11;
    v67 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
LABEL_11:
  sub_2395C29C4((uint64_t)&a32);
  sub_2397A2E14(&a62);
  sub_2397A2E14(&STACK[0x308]);
  sub_2397A163C((pthread_mutex_t *)(v62 - 120));
  _Unwind_Resume(a1);
}

unint64_t sub_2395BF2FC(unint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  void *v9;
  void *v10;

  v4 = a2[1] - *a2;
  if (!v4)
  {
    a3[1] = *a3;
    return result;
  }
  v6 = result;
  v7 = (v4 >> 2) * *(unsigned int *)(result + 60);
  if (v7)
  {
    if (v7 >> 62)
      sub_2394189F8();
    v8 = 4 * v7;
    v9 = operator new(4 * v7);
    v7 = (unint64_t)v9 + 4 * v7;
    bzero(v9, v8);
    v10 = (void *)*a3;
    if (!*a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v9 = 0;
  v10 = (void *)*a3;
  if (*a3)
  {
LABEL_5:
    a3[1] = v10;
    operator delete(v10);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
LABEL_6:
  *a3 = v9;
  a3[1] = v7;
  a3[2] = v7;
  result = *(_QWORD *)(v6 + 64);
  if (result)
    return sub_2395C2CD8(result, a2, a3);
  return result;
}

void sub_2395BF3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2395BF408(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADF9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2395BF418(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADF9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2395BF448(uint64_t a1)
{
  return sub_2395BF5D0(a1 + 24);
}

uint64_t sub_2395BF454(uint64_t a1, unsigned int a2, char a3, uint64_t a4, int a5)
{
  pthread_rwlock_t **v7;
  pthread_rwlock_t *v8;
  pthread_rwlock_t *v9;
  pthread_rwlock_t *v10;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 1) = a3;
  *(_WORD *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = (pthread_rwlock_t **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  sub_23941D1E8(a1 + 32, a2);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  if (a5)
  {
    v8 = (pthread_rwlock_t *)operator new();
    sub_2397A1588(v8);
    v9 = *v7;
    *v7 = v8;
    if (v9)
    {
      v10 = sub_2397A15B0(v9);
      MEMORY[0x23B83E31C](v10, 0x1000C40BEF03554);
    }
  }
  return a1;
}

void sub_2395BF524(_Unwind_Exception *a1)
{
  pthread_rwlock_t **v1;
  void **v2;
  void **v3;
  uint64_t v4;

  MEMORY[0x23B83E31C](v4, 0x1000C40BEF03554);
  sub_239420950((uint64_t)(v3 + 3));
  sub_2394631DC(v3);
  free(*v2);
  sub_2395BF58C(v1);
  _Unwind_Resume(a1);
}

void sub_2395BF570(_Unwind_Exception *a1)
{
  pthread_rwlock_t **v1;
  void **v2;

  free(*v2);
  sub_2395BF58C(v1);
  _Unwind_Resume(a1);
}

pthread_rwlock_t **sub_2395BF58C(pthread_rwlock_t **a1)
{
  pthread_rwlock_t *v2;
  pthread_rwlock_t *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_2397A15B0(v2);
    MEMORY[0x23B83E31C](v3, 0x1000C40BEF03554);
  }
  return a1;
}

uint64_t sub_2395BF5D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t j;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  pthread_rwlock_t *v20;
  pthread_rwlock_t *v21;

  v2 = *(_QWORD *)(a1 + 56);
  for (i = *(_QWORD *)(a1 + 64); i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  *(_QWORD *)(a1 + 64) = v2;
  if (*(_QWORD *)(a1 + 104))
  {
    v7 = *(_QWORD **)(a1 + 96);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 96) = 0;
    v9 = *(_QWORD *)(a1 + 88);
    if (v9)
    {
      for (j = 0; j != v9; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 104) = 0;
  }
  v11 = *(_QWORD **)(a1 + 96);
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v13)
    operator delete(v13);
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 64);
    v16 = *(void **)(a1 + 56);
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 8);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v14;
    operator delete(v16);
  }
  free(*(void **)(a1 + 32));
  v20 = *(pthread_rwlock_t **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v20)
  {
    v21 = sub_2397A15B0(v20);
    MEMORY[0x23B83E31C](v21, 0x1000C40BEF03554);
  }
  return a1;
}

_QWORD *sub_2395BF758(uint64_t a1, _QWORD *a2, __int128 *a3, _DWORD *a4, int *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8)
{
  _QWORD *v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *result;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[24];
  _BYTE *v52;
  _QWORD v53[3];
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 272))
    sub_239EC0B40(a1, (uint64_t)a2);
  v15 = (_QWORD *)a2[3];
  if (v15)
  {
    if (v15 == a2)
    {
      v54 = v53;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v53);
    }
    else
    {
      v54 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
    }
  }
  else
  {
    v54 = 0;
  }
  v16 = a3[1];
  v55 = *a3;
  v56 = v16;
  v17 = *a5;
  LODWORD(v57) = *a4;
  HIDWORD(v57) = v17;
  v18 = a6[1];
  *(_QWORD *)&v58 = *a6;
  *((_QWORD *)&v58 + 1) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *a8;
  v59 = *a7;
  v60 = v21;
  v22 = *(unsigned int **)(a1 + 272);
  v23 = (uint64_t)v54;
  if (!v54)
    goto LABEL_13;
  if (v54 != v53)
  {
    v23 = (*(uint64_t (**)(void))(*v54 + 16))();
LABEL_13:
    v44 = (_QWORD *)v23;
    goto LABEL_15;
  }
  v44 = v43;
  (*(void (**)(_QWORD *, _QWORD *))(v53[0] + 24))(v53, v43);
LABEL_15:
  v45 = v55;
  v46 = v56;
  v47 = v57;
  v48 = v58;
  if (*((_QWORD *)&v58 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = v59;
  v27 = v60;
  v49 = v59;
  v50 = v60;
  v52 = 0;
  v28 = operator new(0x70uLL);
  v29 = v28;
  *v28 = &off_250ADFB20;
  if (v44)
  {
    if (v44 == v43)
    {
      v28[4] = v28 + 1;
      (*(void (**)(_QWORD *))(v43[0] + 24))(v43);
      v26 = v49;
      v27 = v50;
    }
    else
    {
      v28[4] = v44;
      v44 = 0;
    }
  }
  else
  {
    v28[4] = 0;
  }
  v30 = v46;
  *(_OWORD *)(v29 + 5) = v45;
  *(_OWORD *)(v29 + 7) = v30;
  v29[9] = v47;
  *((_OWORD *)v29 + 5) = v48;
  v48 = 0uLL;
  v29[12] = v26;
  v29[13] = v27;
  v52 = v29;
  sub_2394D0CC4(v22, (uint64_t)v51);
  v31 = v52;
  if (v52 == v51)
  {
    v32 = 4;
    v31 = v51;
    goto LABEL_27;
  }
  if (v52)
  {
    v32 = 5;
LABEL_27:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (!*((_QWORD *)&v48 + 1))
    goto LABEL_32;
  v34 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
  {
LABEL_32:
    v36 = v44;
    if (v44 != v43)
      goto LABEL_33;
LABEL_36:
    v37 = 4;
    v36 = v43;
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  v36 = v44;
  if (v44 == v43)
    goto LABEL_36;
LABEL_33:
  if (v36)
  {
    v37 = 5;
LABEL_37:
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      result = v54;
      if (v54 != v53)
        goto LABEL_43;
LABEL_46:
      v42 = 4;
      result = v53;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v42))();
    }
  }
  result = v54;
  if (v54 == v53)
    goto LABEL_46;
LABEL_43:
  if (!result)
    return result;
  v42 = 5;
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v42))();
}

void sub_2395BFAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395BFB54(unsigned int *a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  void **v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  v3 = *((_QWORD *)a1 + 6);
  if (v3)
  {
LABEL_4:
    v4 = (void **)*((_QWORD *)a1 + 2);
    v5 = (*(unsigned __int8 **)((char *)v4 + ((*((_QWORD *)a1 + 5) >> 9) & 0x7FFFFFFFFFFFF8)))[*((_QWORD *)a1 + 5) & 0xFFFLL];
    v6 = v3 - 1;
    v7 = *((_QWORD *)a1 + 5) + 1;
    *((_QWORD *)a1 + 5) = v7;
    *((_QWORD *)a1 + 6) = v6;
    if (v7 >= 0x2000)
    {
      operator delete(*v4);
      *((_QWORD *)a1 + 2) += 8;
      v6 = *((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 5) -= 4096;
    }
    if (v6 < *a1)
      pthread_cond_signal((pthread_cond_t *)(a1 + 20));
    v8 = v5 | 0x100u;
  }
  else
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 9);
      pthread_cond_wait((pthread_cond_t *)(a1 + 32), v2);
      --*((_QWORD *)a1 + 9);
      v3 = *((_QWORD *)a1 + 6);
      if (v3)
        goto LABEL_4;
    }
    v8 = 0;
  }
  sub_2397A16B4(v2);
  return v8;
}

void sub_2395BFC40(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

void sub_2395BFC64()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2395BFC78(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250ADFA00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_2395BFCB8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADFA00;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

pthread_rwlock_t *sub_2395BFCE0(uint64_t a1, uint64_t *a2)
{
  return sub_2395BFCEC(a1 + 8, *a2);
}

pthread_rwlock_t *sub_2395BFCEC(uint64_t a1, uint64_t a2)
{
  pthread_rwlock_t *v4;
  unsigned __int16 v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const double *v14;
  int32x4_t v15;
  int32x4_t v16;
  const double *v17;
  unsigned __int128 v18;
  const double *v19;
  unsigned __int128 v20;
  const double *v21;
  unsigned __int128 v22;
  unsigned __int128 v23;
  uint64_t v24;
  pthread_rwlock_t *result;
  unsigned int *v26;
  char v27;
  uint64_t v28;

  if (!a2)
    sub_239EC0B6C();
  v4 = *(pthread_rwlock_t **)(a2 + 16);
  if (v4)
    j__pthread_rwlock_wrlock(v4);
  v5 = *(_WORD *)(a2 + 2) + 1;
  *(_WORD *)(a2 + 2) = v5;
  v7 = *(_QWORD *)(a2 + 56);
  v6 = *(uint64_t **)(a2 + 64);
  if ((uint64_t *)v7 != v6)
  {
    v8 = (unint64_t)v6 - v7 - 16;
    if (v8 >= 0x80)
    {
      v11 = (v8 >> 4) + 1;
      v12 = v11 & 7;
      if ((v11 & 7) == 0)
        v12 = 8;
      v13 = v11 - v12;
      v10 = (uint64_t *)(v7 + 16 * v13);
      v14 = (const double *)(v7 + 64);
      v15 = 0uLL;
      v16 = 0uLL;
      do
      {
        v17 = v14 - 8;
        v18 = (unsigned __int128)vld2q_f64(v17);
        v19 = v14 - 4;
        v20 = (unsigned __int128)vld2q_f64(v19);
        v21 = v14;
        v22 = (unsigned __int128)vld2q_f64(v21);
        v21 += 4;
        v23 = (unsigned __int128)vld2q_f64(v21);
        v15 = vsubq_s32(v15, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v18), (int32x4_t)vceqzq_s64((int64x2_t)v20))));
        v16 = vsubq_s32(v16, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v22), (int32x4_t)vceqzq_s64((int64x2_t)v23))));
        v14 += 16;
        v13 -= 8;
      }
      while (v13);
      v9 = vaddvq_s32(vaddq_s32(v16, v15));
    }
    else
    {
      v9 = 0;
      v10 = *(uint64_t **)(a2 + 56);
    }
    do
    {
      v24 = *v10;
      v10 += 2;
      if (v24)
        ++v9;
    }
    while (v10 != v6);
    if (v9 > v5)
    {
LABEL_18:
      result = *(pthread_rwlock_t **)(a2 + 16);
      if (!result)
        return result;
      return (pthread_rwlock_t *)j__pthread_rwlock_unlock(result);
    }
  }
  v28 = *(_QWORD *)(a2 + 24);
  if (v28)
  {
    sub_2395BFF74(*(_QWORD *)a1, *(_QWORD **)(a1 + 16), &v28);
    goto LABEL_18;
  }
  v26 = *(unsigned int **)(a1 + 8);
  v27 = 1;
  sub_2395BFE44(v26, &v27);
  result = *(pthread_rwlock_t **)(a2 + 16);
  if (result)
    return (pthread_rwlock_t *)j__pthread_rwlock_unlock(result);
  return result;
}

uint64_t sub_2395BFE44(unsigned int *a1, _BYTE *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  v5 = *((_QWORD *)a1 + 6);
  if (v5 >= *a1)
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      v5 = *((_QWORD *)a1 + 6);
      if (v5 < *a1)
        goto LABEL_4;
    }
    goto LABEL_5;
  }
LABEL_4:
  if (*((_BYTE *)a1 + 56))
  {
LABEL_5:
    v6 = 0;
    goto LABEL_11;
  }
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 2);
  v9 = ((v7 - v8) << 9) - 1;
  if (v7 == v8)
    v9 = 0;
  v10 = *((_QWORD *)a1 + 5) + v5;
  if (v9 == v10)
  {
    sub_2395C0294((uint64_t)(a1 + 2));
    v8 = *((_QWORD *)a1 + 2);
    v5 = *((_QWORD *)a1 + 6);
    v10 = *((_QWORD *)a1 + 5) + v5;
  }
  *(_BYTE *)(*(_QWORD *)(v8 + ((v10 >> 9) & 0x7FFFFFFFFFFFF8)) + (v10 & 0xFFF)) = *a2;
  *((_QWORD *)a1 + 6) = v5 + 1;
  pthread_cond_signal((pthread_cond_t *)(a1 + 32));
  v6 = 1;
LABEL_11:
  sub_2397A16B4(v4);
  return v6;
}

void sub_2395BFF54(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395BFF74(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 272))
    sub_239EC0B40(a1, (uint64_t)a2);
  v5 = v23;
  v6 = (_QWORD *)a2[3];
  if (!v6)
  {
    v10 = *a3;
    v24 = 0;
    v25 = v10;
    v8 = *(unsigned int **)(a1 + 272);
    v9 = v18;
    goto LABEL_10;
  }
  if (v6 == a2)
  {
    v24 = v23;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v23);
    v6 = v24;
    v25 = *a3;
    v8 = *(unsigned int **)(a1 + 272);
    v9 = v18;
    if (v24)
      goto LABEL_8;
LABEL_10:
    v19 = v6;
    goto LABEL_11;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  v7 = *a3;
  v24 = v6;
  v25 = v7;
  v8 = *(unsigned int **)(a1 + 272);
  v9 = v18;
  if (!v6)
    goto LABEL_10;
LABEL_8:
  if (v6 != v23)
  {
    v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    goto LABEL_10;
  }
  v19 = v18;
  (*(void (**)(_QWORD *, _QWORD *))(v23[0] + 24))(v23, v18);
LABEL_11:
  v11 = v25;
  v20 = v25;
  v22 = 0;
  v12 = operator new(0x38uLL);
  v13 = v12;
  *v12 = &off_250ADFA48;
  if (v19)
  {
    if (v19 == v18)
    {
      v12[5] = v12 + 2;
      (*(void (**)(_QWORD *))(v18[0] + 24))(v18);
      v11 = v20;
    }
    else
    {
      v12[5] = v19;
      v19 = 0;
    }
  }
  else
  {
    v12[5] = 0;
  }
  v13[6] = v11;
  v22 = v13;
  sub_2394D0CC4(v8, (uint64_t)v21);
  result = v22;
  if (v22 == v21)
  {
    v15 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_21;
    v15 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
LABEL_21:
  if (v19 == v18)
  {
    v16 = 4;
  }
  else
  {
    if (!v19)
      goto LABEL_26;
    v16 = 5;
    v9 = v19;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8 * v16))(v9);
LABEL_26:
  if (v24 == v23)
  {
    v17 = 4;
  }
  else
  {
    if (!v24)
      return result;
    v17 = 5;
    v5 = v24;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v17))(v5);
}

void sub_2395C01BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2395C0294(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x1000;
  v4 = v2 - 4096;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_2395C07F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_2395C080C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2395C0820(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2395C0838(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395C0850(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250ADFA48;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2395C08AC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250ADFA48;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_2395C0918(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new(0x38uLL);
  *v2 = &off_250ADFA48;
  v3 = v2 + 2;
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 16)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v5 = *(_QWORD *)(a1 + 48);
    v2[5] = v4;
    v2[6] = v5;
    return v2;
  }
  v2[5] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v2[6] = *(_QWORD *)(a1 + 48);
  return v2;
}

void sub_2395C09A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395C09B8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = &off_250ADFA48;
  v4 = a2 + 2;
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    if (result == a1 + 16)
    {
      a2[5] = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[5] = result;
    }
    a2[6] = *(_QWORD *)(a1 + 48);
  }
  else
  {
    a2[5] = 0;
    a2[6] = *(_QWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_2395C0A50(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 16;
  result = *(_QWORD *)(a1 + 40);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_2395C0A8C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_2395C0ADC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = a1 + 40;
  v1 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(v2 + 8);
  if (!v1)
    sub_2394172E0();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v4);
}

void sub_2395C0B18()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2395C0B2C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x80uLL);
  *(_QWORD *)v2 = &off_250ADFA90;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *((_QWORD *)v2 + 15) = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_2395C0B9C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = &off_250ADFA90;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

void sub_2395C0BF4(uint64_t a1, __int128 *a2, unsigned int *a3, unsigned int *a4, __int128 *a5, uint64_t **a6, uint64_t *a7)
{
  unsigned int v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v7 = *a3;
  v8 = *a4;
  v12 = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  sub_2395C0C9C(a1 + 8, a2, v7, v8, (uint64_t *)&v12, *a6, *a7);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_2395C0C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_239EBED3C();
  _Unwind_Resume(exception_object);
}

void sub_2395C0C9C(uint64_t a1, __int128 *a2, unsigned int a3, unsigned int a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  _BYTE *v8;
  uint64_t v9;
  size_t v14;
  int v15;
  char *v16;
  char *v17;
  std::chrono::system_clock::time_point v18;
  std::chrono::system_clock::time_point v19;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  pthread_mutex_t *v21;
  uint64_t v22;
  float v23;
  float32x2_t v24;
  unsigned int *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unsigned int *v37;
  _DWORD *v38;
  uint64_t v39;
  size_t v40;
  char *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  char v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  _QWORD *v57;
  uint64_t v58;
  double v59;
  int8x16_t v60;
  float32x4_t v61;
  uint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  double v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  uint64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int v108;
  size_t v109;
  void *v110;
  unint64_t v111;
  uint64_t *v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int v118;
  int *v119;
  int v120;
  _QWORD *v121;
  __int128 v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  __int128 *v126;
  unsigned int v127;
  float __p;
  char *__pa;
  char *v130;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  unsigned int v136;
  __int128 v137[2];
  unsigned int v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  char v143;

  v8 = *(_BYTE **)(a1 + 40);
  v9 = *a5;
  *(_BYTE *)v9 = *v8;
  if (!*(_BYTE *)(v9 + 1))
  {
    *(_QWORD *)&v140 = *(_QWORD *)(v9 + 24);
    if ((_QWORD)v140)
    {
      sub_2395BFF74(*(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 24), (uint64_t *)&v140);
    }
    else
    {
      v37 = *(unsigned int **)(a1 + 16);
      LOBYTE(v137[0]) = 1;
      sub_2395BFE44(v37, v137);
    }
    return;
  }
  v14 = (**(_DWORD **)(a1 + 48) * **(_DWORD **)(a1 + 56));
  v15 = *v8;
  v140 = 0u;
  v141 = 0u;
  v142 = 0u;
  v143 = v15;
  if (v15)
  {
    if ((_DWORD)v14)
    {
      v16 = (char *)operator new(v14);
      bzero(v16, v14);
      *((_QWORD *)&v141 + 1) = v16;
      *(_QWORD *)&v142 = &v16[v14];
      *((_QWORD *)&v142 + 1) = &v16[v14];
    }
  }
  else if ((_DWORD)v14)
  {
    sub_2394807B4((uint64_t)&v140, v14);
  }
  v133 = a3;
  if (a3)
  {
    v17 = (char *)operator new(4 * a3);
    bzero(v17, 4 * a3);
  }
  else
  {
    v17 = 0;
  }
  v139 = 0;
  v138 = 0;
  std::chrono::system_clock::now();
  v18.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v130 = v17;
  __p = sub_2396CE3A4(a2, a3, **(_DWORD **)(a1 + 48), a6, (uint64_t)&v140, v17, (int *)&v139 + 1, 1, (float *)&v139, 1, (float *)&v138, 1);
  v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (**(_QWORD **)(a1 + 96))
  {
    rep = v19.__d_.__rep_;
    v21 = *(pthread_mutex_t **)(a1 + 80);
    sub_2397A1694(v21);
    v22 = **(_QWORD **)(a1 + 96);
    v23 = (double)(rep - v18.__d_.__rep_) / 1000000.0 + *(float *)(v22 + 12);
    *(float *)(v22 + 8) = *(float *)&v139 + *(float *)(v22 + 8);
    *(float *)(v22 + 12) = v23;
    v24 = (float32x2_t)__PAIR64__(LODWORD(__p), v138);
    *(float *)(v22 + 16) = *(float *)(v22 + 16) + (float)HIDWORD(v139);
    *(float64x2_t *)(v22 + 24) = vaddq_f64(*(float64x2_t *)(v22 + 24), vcvtq_f64_f32(v24));
    ++*(_DWORD *)(v22 + 4);
    **(_QWORD **)(a1 + 88) += a3;
    sub_2397A16B4(v21);
  }
  if (fabsf(__p + 1.0) >= 0.00001)
  {
    v126 = a2;
    v26 = *a5;
    v27 = (_QWORD *)(*a5 + 56);
    v28 = **(unsigned int **)(a1 + 56);
    v29 = *(_QWORD *)(*a5 + 64);
    v30 = (v29 - *v27) >> 4;
    v31 = v28 - v30;
    if (v28 <= v30)
    {
      if (v28 < v30)
      {
        v32 = a3;
        v33 = *v27 + 16 * v28;
        while (v29 != v33)
        {
          v34 = *(std::__shared_weak_count **)(v29 - 8);
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(p_shared_owners);
            while (__stlxr(v36 - 1, p_shared_owners));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v34->__on_zero_shared)(v34, v31);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v29 -= 16;
        }
        *(_QWORD *)(v26 + 64) = v33;
        a3 = v32;
      }
    }
    else
    {
      sub_23942D080(*a5 + 56, v31);
    }
    v38 = *(_DWORD **)(a1 + 56);
    v39 = *v38;
    if ((_DWORD)v39)
    {
      v40 = 4 * v39;
      v41 = (char *)operator new(4 * v39);
      bzero(v41, v40);
      if (!a3)
        goto LABEL_35;
    }
    else
    {
      v41 = 0;
      if (!a3)
      {
LABEL_35:
        LODWORD(v45) = *v38;
        if (!*v38)
          goto LABEL_107;
        v46 = 0;
        __pa = v41;
        v127 = a3;
        do
        {
          v48 = *(_DWORD *)&v41[4 * v46];
          if (v48)
          {
            v49 = v27;
            v50 = a7;
            v51 = a6;
            v53 = v48 >= 2 * (int)v45 && **(_DWORD **)(a1 + 64) > a4;
            v54 = *(unsigned int **)(a1 + 48);
            v55 = *a5;
            v56 = *(unsigned __int8 **)(a1 + 112);
            v57 = operator new(0x90uLL);
            v57[1] = 0;
            v57[2] = 0;
            *v57 = &off_250ADF9C8;
            v58 = sub_2395BF454((uint64_t)(v57 + 3), *v54, v53, v55, *v56);
            v62 = (uint64_t *)(*v49 + 16 * v46);
            v63 = (std::__shared_weak_count *)v62[1];
            *v62 = v58;
            v62[1] = (uint64_t)v57;
            a6 = v51;
            a7 = v50;
            v17 = v130;
            if (v63)
            {
              v64 = (unint64_t *)&v63->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            v66 = v53;
            LODWORD(v67) = **(_DWORD **)(a1 + 48);
            v41 = __pa;
            a3 = v127;
            v27 = v49;
            if ((_DWORD)v67)
            {
              v68 = 0;
              do
              {
                v69 = (v68 + v46 * v67);
                if (**(_BYTE **)(a1 + 40))
                {
                  LOBYTE(v69) = *(_BYTE *)(*((_QWORD *)&v141 + 1) + v69);
                }
                else
                {
                  v59 = *(float *)(v140 + 4 * v69) + 0.5;
                  LODWORD(v69) = (int)v59;
                }
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v49 + 16 * v46) + 32) + v68++) = v69;
                v67 = **(unsigned int **)(a1 + 48);
              }
              while (v68 < v67);
            }
            v70 = v133;
            if ((v66 & 1) == 0)
            {
              *(_DWORD *)(*(_QWORD *)(*v49 + 16 * v46) + 8) = 1065353216;
              if (**(_BYTE **)(a1 + 72) && v127 != 0)
              {
                v72 = 0;
                do
                {
                  if (v46 == *(_DWORD *)&v130[4 * v72])
                  {
                    v73 = *(_QWORD *)(*v27 + 16 * v46);
                    if (!*(_DWORD *)(v73 + 4))
                    {
                      v74 = *(unsigned int **)(a1 + 104);
                      do
                        v75 = __ldaxr(v74);
                      while (__stlxr(v75 + 1, v74));
                      v73 = *(_QWORD *)(*v27 + 16 * v46);
                      *(_DWORD *)(v73 + 4) = v75;
                    }
                    sub_2395C1698(v73, 0, (uint64_t)&a6[3 * v72], *(_DWORD *)(a7 + 4 * v72), 1, 0, 0, v59, v60, v61);
                    v70 = v133;
                  }
                  ++v72;
                }
                while (v72 != v70);
              }
            }
          }
          else
          {
            v76 = (_QWORD *)(*v27 + 16 * v46);
            v77 = (std::__shared_weak_count *)v76[1];
            *v76 = 0;
            v76[1] = 0;
            if (v77)
            {
              v78 = (unint64_t *)&v77->__shared_owners_;
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
          }
          ++v46;
          v47 = *(_DWORD **)(a1 + 56);
          v45 = *v47;
        }
        while (v46 < v45);
        if (!(_DWORD)v45)
        {
LABEL_107:
          if (!v41)
            goto LABEL_109;
LABEL_108:
          operator delete(v41);
          goto LABEL_109;
        }
        v80 = 0;
        v81 = 0;
        v82 = 0;
        do
        {
          if (v81 < a3)
          {
            v83 = (uint64_t)&a6[3 * v81 + 1];
            v84 = 4 * v81;
            v85 = (_DWORD *)(a7 + v84);
            v86 = &v17[v84];
            v87 = v133 - v81;
            do
            {
              v88 = *(unsigned int *)v86;
              if (v80 == v88)
              {
                v89 = &a6[3 * v82];
                v90 = *v89;
                v91 = v89[1];
                *v89 = 0;
                v89[1] = 0;
                v92 = *((_DWORD *)v89 + 4);
                *((_DWORD *)v89 + 4) = 0;
                *v89 = *(_QWORD *)(v83 - 8);
                v89[1] = *(_QWORD *)v83;
                *((_DWORD *)v89 + 4) = *(_DWORD *)(v83 + 8);
                *(_QWORD *)(v83 - 8) = v90;
                *(_QWORD *)v83 = v91;
                v93 = 4 * v82;
                LODWORD(v90) = *(_DWORD *)&v17[v93];
                *(_DWORD *)(v83 + 8) = v92;
                *(_DWORD *)&v17[v93] = v88;
                *(_DWORD *)v86 = v90;
                if (**(_BYTE **)(a1 + 72))
                {
                  v94 = 4 * v82;
                  v95 = *(_DWORD *)(a7 + v94);
                  *(_DWORD *)(a7 + v94) = *v85;
                  *v85 = v95;
                }
                ++v82;
              }
              v83 += 24;
              ++v85;
              v86 += 4;
              --v87;
            }
            while (v87);
            v47 = *(_DWORD **)(a1 + 56);
            LODWORD(v45) = *v47;
          }
          v81 += *(_DWORD *)&v41[4 * v80++];
        }
        while (v80 < v45);
        if (!(_DWORD)v45)
          goto LABEL_108;
        if (v45 >= 8)
        {
          v96 = v45 & 0xFFFFFFF8;
          v98 = v41 + 16;
          v97 = 0.0;
          v99 = v96;
          do
          {
            v100 = *((_OWORD *)v98 - 1);
            v101.i64[0] = DWORD2(v100);
            v101.i64[1] = HIDWORD(v100);
            v102 = vcvtq_f64_u64(v101);
            v101.i64[0] = v100;
            v101.i64[1] = DWORD1(v100);
            v103 = vcvtq_f64_u64(v101);
            v101.i64[0] = *((_QWORD *)v98 + 1);
            v101.i64[1] = HIDWORD(*(_OWORD *)v98);
            v104 = vcvtq_f64_u64(v101);
            v101.i64[0] = *(_OWORD *)v98;
            v101.i64[1] = HIDWORD(*(_QWORD *)v98);
            v105 = vcvtq_f64_u64(v101);
            v97 = v97
                + v103.f64[0]
                + v103.f64[1]
                + v102.f64[0]
                + v102.f64[1]
                + v105.f64[0]
                + v105.f64[1]
                + v104.f64[0]
                + v104.f64[1];
            v98 += 32;
            v99 -= 8;
          }
          while (v99);
          if (v96 == v45)
            goto LABEL_93;
        }
        else
        {
          v96 = 0;
          v97 = 0.0;
        }
        v106 = (unsigned int *)&v41[4 * v96];
        v107 = v45 - v96;
        do
        {
          v108 = *v106++;
          v97 = v97 + (double)v108;
          --v107;
        }
        while (v107);
LABEL_93:
        v109 = 4 * v45;
        v110 = operator new(v109);
        bzero(v110, v109);
        if (*v47)
        {
          v111 = 0;
          v112 = (uint64_t *)*v27;
          v113 = *((_DWORD *)v126 + 2);
          do
          {
            v115 = *v112;
            if (*v112)
            {
              LODWORD(v115) = vcvtad_u64_f64((double)(*(_DWORD *)&__pa[4 * v111] * v113) / v97);
              if (v115 <= 1)
                LODWORD(v115) = 1;
            }
            *((_DWORD *)v110 + v111++) = v115;
            v114 = *v47;
            v112 += 2;
          }
          while (v111 < v114);
          if (*v47)
          {
            v116 = 0;
            v117 = 0;
            v118 = 0;
            v119 = (int *)__pa;
            do
            {
              v121 = (_QWORD *)(*v27 + v116);
              if (*v121)
              {
                v122 = v126[1];
                v137[0] = *v126;
                v137[1] = v122;
                DWORD2(v137[0]) = *((_DWORD *)v110 + v117);
                v123 = *(_QWORD *)a1;
                v124 = *(_QWORD **)(a1 + 32);
                v136 = a4 + 1;
                v125 = a7 + 4 * v118;
                if (!a7)
                  v125 = 0;
                v134 = v125;
                v135 = &a6[3 * v118];
                sub_2395C1B88(v123, v124, v137, v119, (int *)&v136, v121, (uint64_t *)&v135, &v134);
                v114 = **(unsigned int **)(a1 + 56);
              }
              v120 = *v119++;
              v118 += v120;
              ++v117;
              v116 += 16;
            }
            while (v117 < v114);
          }
        }
        operator delete(v110);
        v41 = __pa;
        goto LABEL_107;
      }
    }
    v42 = v133;
    v43 = (int *)v17;
    do
    {
      v44 = *v43++;
      ++*(_DWORD *)&v41[4 * v44];
      --v42;
    }
    while (v42);
    goto LABEL_35;
  }
  v25 = *(unsigned int **)(a1 + 16);
  LOBYTE(v137[0]) = 0;
  sub_2395BFE44(v25, v137);
LABEL_109:
  if (v17)
    operator delete(v17);
  if (*((_QWORD *)&v141 + 1))
  {
    *(_QWORD *)&v142 = *((_QWORD *)&v141 + 1);
    operator delete(*((void **)&v141 + 1));
  }
  if ((_QWORD)v140)
  {
    *((_QWORD *)&v140 + 1) = v140;
    operator delete((void *)v140);
  }
}

void sub_2395C1574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v20;

  operator delete(__p);
  if (a20)
  {
    operator delete(a20);
    sub_2394FCFA8(v20 - 160);
    _Unwind_Resume(a1);
  }
  sub_2394FCFA8(v20 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_2395C1698(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t *a6, char a7, double a8, int8x16_t a9, float32x4_t a10)
{
  uint64_t i;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  int8x8_t *v37;
  int8x8_t *v38;
  float32x4_t *v39;
  uint64_t v40;
  int8x8_t v41;
  int8x8_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x8_t v45;
  float32x4_t v46;
  float32x4_t *v47;
  uint64_t v48;
  int8x16_t *v49;
  int8x16_t *v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x8_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x8_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  float *v66;
  int v67;
  float v68;
  int v69;
  pthread_rwlock_t *v70;
  _QWORD *v71;
  unint64_t v72;
  uint8x8_t v73;
  unint64_t v74;
  uint64_t **v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  pthread_rwlock_t *v81;
  float v83;
  uint64_t *v84;
  unsigned int v85;
  unsigned int *v86;

  for (i = a1; *(_BYTE *)(i + 1); i = *(_QWORD *)(v24 + 16 * v23))
  {
    v24 = *(_QWORD *)(i + 56);
    v25 = *(_QWORD *)(i + 64);
    if (v25 == v24)
    {
      v23 = 0;
      v24 = *(_QWORD *)(i + 64);
    }
    else
    {
      v26 = 0;
      v23 = 0;
      v27 = 0;
      v28 = 3.4028e38;
      do
      {
        v29 = *(_QWORD *)(v24 + v26);
        if (v29)
        {
          v30 = *(unsigned int *)(a3 + 16);
          if ((_DWORD)v30 != *(_DWORD *)(v29 + 48))
            sub_239EC0BCC();
          if (*(_BYTE *)i)
          {
            if ((_DWORD)v30 != 64)
              sub_239EC0B9C();
            *(float *)&a8 = (float)sub_2394AA30C(*(_QWORD **)a3, *(_QWORD **)(v29 + 32));
          }
          else
          {
            *(float *)&a8 = sub_2396F480C(*(_QWORD *)a3, *(_QWORD *)(v29 + 32), v30, a8, a9, a10);
          }
          if (*(float *)&a8 < v28)
          {
            v28 = *(float *)&a8;
            v23 = v27;
          }
          v24 = *(_QWORD *)(i + 56);
          v25 = *(_QWORD *)(i + 64);
        }
        ++v27;
        v26 += 16;
      }
      while (v27 < (v25 - v24) >> 4);
    }
  }
  v85 = a4;
  if (a7)
  {
    v17 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)a3;
      v19 = *(_QWORD *)(i + 32);
      v20 = (*(_DWORD *)(i + 4) * v17);
      v21 = *a6;
      if (v17 < 8)
      {
        v22 = 0;
        goto LABEL_42;
      }
      v22 = 0;
      v31 = v21 + 4 * v20;
      v32 = v21 + 4 * (v17 + v20);
      v34 = v31 < v19 + v17 && v19 < v32;
      v35 = v18 >= v32 || v31 >= v18 + v17;
      if (!v35 || v34)
        goto LABEL_42;
      if (v17 >= 0x10)
      {
        v22 = v17 & 0xFFFFFFF0;
        v47 = (float32x4_t *)(v21 + 4 * v20);
        v48 = v22;
        v49 = *(int8x16_t **)(i + 32);
        v50 = *(int8x16_t **)a3;
        do
        {
          v51 = *v50++;
          v52 = v51;
          v53 = (int8x8_t)vextq_s8(v52, v52, 8uLL).u64[0];
          v54 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v53, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
          v55 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v53, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
          v56 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v52.i8, *(int8x8_t *)v52.i8), 8uLL), 8uLL)));
          v57 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v52.i8, *(int8x8_t *)v52.i8), 8uLL), 8uLL)));
          v58 = *v49++;
          v59 = (int8x8_t)vextq_s8(v58, v58, 8uLL).u64[0];
          v60 = v47[2];
          v61 = vaddq_f32(vsubq_f32(v54, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v59, *(int8x8_t *)v57.f32), 8uLL), 8uLL)))), v47[3]);
          v62 = vaddq_f32(vsubq_f32(v56, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v58.i8, *(int8x8_t *)v57.f32), 8uLL), 8uLL)))), v47[1]);
          *v47 = vaddq_f32(vsubq_f32(v57, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v58.i8, *(int8x8_t *)v57.f32), 8uLL), 8uLL)))), *v47);
          v47[1] = v62;
          v47[2] = vaddq_f32(vsubq_f32(v55, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v59, *(int8x8_t *)v57.f32), 8uLL), 8uLL)))), v60);
          v47[3] = v61;
          v47 += 4;
          v48 -= 16;
        }
        while (v48);
        if (v22 == v17)
          goto LABEL_44;
        if ((v17 & 8) == 0)
        {
LABEL_42:
          v63 = (char *)(v19 + v22);
          v64 = (char *)(v18 + v22);
          v65 = v17 - v22;
          v66 = (float *)(v21 + 4 * (v22 + v20));
          do
          {
            v67 = *v64++;
            v68 = (float)v67;
            v69 = *v63++;
            *v66 = (float)(v68 - (float)v69) + *v66;
            ++v66;
            --v65;
          }
          while (v65);
          goto LABEL_44;
        }
      }
      else
      {
        v22 = 0;
      }
      v36 = v22;
      v22 = v17 & 0xFFFFFFF8;
      v37 = (int8x8_t *)(v18 + v36);
      v38 = (int8x8_t *)(v19 + v36);
      v39 = (float32x4_t *)(v21 + 4 * (v36 + v20));
      v40 = v36 - v22;
      do
      {
        v41 = *v37++;
        v42 = v41;
        v43 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v42, v42), 8uLL), 8uLL)));
        v44 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v42, v42), 8uLL), 8uLL)));
        v45 = *v38++;
        v46 = vaddq_f32(vsubq_f32(v43, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v45, *(int8x8_t *)v44.f32), 8uLL), 8uLL)))), v39[1]);
        *v39 = vaddq_f32(vsubq_f32(v44, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v45, *(int8x8_t *)v44.f32), 8uLL), 8uLL)))), *v39);
        v39[1] = v46;
        v39 += 2;
        v40 += 8;
      }
      while (v40);
      if (v22 != v17)
        goto LABEL_42;
    }
  }
LABEL_44:
  v70 = *(pthread_rwlock_t **)(i + 16);
  if (v70)
    j__pthread_rwlock_wrlock(v70);
  if (a2)
    *(float *)(a2 + 4 * *(unsigned int *)(i + 4)) = *(float *)(i + 8)
                                                    + *(float *)(a2 + 4 * *(unsigned int *)(i + 4));
  if (!a5)
  {
LABEL_70:
    v81 = *(pthread_rwlock_t **)(i + 16);
    if (v81)
      goto LABEL_71;
    return *(unsigned int *)(i + 4);
  }
  v71 = (_QWORD *)(i + 80);
  v72 = *(_QWORD *)(i + 88);
  if (!v72)
    goto LABEL_69;
  v73 = (uint8x8_t)vcnt_s8((int8x8_t)v72);
  v73.i16[0] = vaddlv_u8(v73);
  if (v73.u32[0] > 1uLL)
  {
    v74 = a4;
    if (v72 <= a4)
      v74 = a4 % v72;
  }
  else
  {
    v74 = ((_DWORD)v72 - 1) & a4;
  }
  v75 = *(uint64_t ***)(*v71 + 8 * v74);
  if (!v75 || (v76 = *v75) == 0)
  {
LABEL_69:
    v80 = *(_DWORD *)(i + 8);
    v86 = &v85;
    *((_DWORD *)sub_2394AAB74((uint64_t)v71, &v85, (uint64_t)&unk_239EC6E98, &v86) + 5) = v80;
    goto LABEL_70;
  }
  if (v73.u32[0] < 2uLL)
  {
    v77 = v72 - 1;
    while (1)
    {
      v79 = v76[1];
      if (v79 == a4)
      {
        if (*((_DWORD *)v76 + 4) == a4)
          goto LABEL_73;
      }
      else if ((v79 & v77) != v74)
      {
        goto LABEL_69;
      }
      v76 = (uint64_t *)*v76;
      if (!v76)
        goto LABEL_69;
    }
  }
  while (1)
  {
    v78 = v76[1];
    if (v78 == a4)
      break;
    if (v78 >= v72)
      v78 %= v72;
    if (v78 != v74)
      goto LABEL_69;
LABEL_59:
    v76 = (uint64_t *)*v76;
    if (!v76)
      goto LABEL_69;
  }
  if (*((_DWORD *)v76 + 4) != a4)
    goto LABEL_59;
LABEL_73:
  v83 = *(float *)(i + 8);
  v86 = &v85;
  v84 = sub_2394AAB74((uint64_t)v71, &v85, (uint64_t)&unk_239EC6E98, &v86);
  *((float *)v84 + 5) = v83 + *((float *)v84 + 5);
  v81 = *(pthread_rwlock_t **)(i + 16);
  if (!v81)
    return *(unsigned int *)(i + 4);
LABEL_71:
  j__pthread_rwlock_unlock(v81);
  return *(unsigned int *)(i + 4);
}

_QWORD *sub_2395C1B88(uint64_t a1, _QWORD *a2, __int128 *a3, _DWORD *a4, int *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8)
{
  _QWORD *v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *result;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[24];
  _BYTE *v52;
  _QWORD v53[3];
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 272))
    sub_239EC0B40(a1, (uint64_t)a2);
  v15 = (_QWORD *)a2[3];
  if (v15)
  {
    if (v15 == a2)
    {
      v54 = v53;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v53);
    }
    else
    {
      v54 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
    }
  }
  else
  {
    v54 = 0;
  }
  v16 = a3[1];
  v55 = *a3;
  v56 = v16;
  v17 = *a5;
  LODWORD(v57) = *a4;
  HIDWORD(v57) = v17;
  v18 = a6[1];
  *(_QWORD *)&v58 = *a6;
  *((_QWORD *)&v58 + 1) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *a8;
  v59 = *a7;
  v60 = v21;
  v22 = *(unsigned int **)(a1 + 272);
  v23 = (uint64_t)v54;
  if (!v54)
    goto LABEL_13;
  if (v54 != v53)
  {
    v23 = (*(uint64_t (**)(void))(*v54 + 16))();
LABEL_13:
    v44 = (_QWORD *)v23;
    goto LABEL_15;
  }
  v44 = v43;
  (*(void (**)(_QWORD *, _QWORD *))(v53[0] + 24))(v53, v43);
LABEL_15:
  v45 = v55;
  v46 = v56;
  v47 = v57;
  v48 = v58;
  if (*((_QWORD *)&v58 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = v59;
  v27 = v60;
  v49 = v59;
  v50 = v60;
  v52 = 0;
  v28 = operator new(0x70uLL);
  v29 = v28;
  *v28 = &off_250ADFAD8;
  if (v44)
  {
    if (v44 == v43)
    {
      v28[4] = v28 + 1;
      (*(void (**)(_QWORD *))(v43[0] + 24))(v43);
      v26 = v49;
      v27 = v50;
    }
    else
    {
      v28[4] = v44;
      v44 = 0;
    }
  }
  else
  {
    v28[4] = 0;
  }
  v30 = v46;
  *(_OWORD *)(v29 + 5) = v45;
  *(_OWORD *)(v29 + 7) = v30;
  v29[9] = v47;
  *((_OWORD *)v29 + 5) = v48;
  v48 = 0uLL;
  v29[12] = v26;
  v29[13] = v27;
  v52 = v29;
  sub_2394D0CC4(v22, (uint64_t)v51);
  v31 = v52;
  if (v52 == v51)
  {
    v32 = 4;
    v31 = v51;
    goto LABEL_27;
  }
  if (v52)
  {
    v32 = 5;
LABEL_27:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (!*((_QWORD *)&v48 + 1))
    goto LABEL_32;
  v34 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
  {
LABEL_32:
    v36 = v44;
    if (v44 != v43)
      goto LABEL_33;
LABEL_36:
    v37 = 4;
    v36 = v43;
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  v36 = v44;
  if (v44 == v43)
    goto LABEL_36;
LABEL_33:
  if (v36)
  {
    v37 = 5;
LABEL_37:
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      result = v54;
      if (v54 != v53)
        goto LABEL_43;
LABEL_46:
      v42 = 4;
      result = v53;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v42))();
    }
  }
  result = v54;
  if (v54 == v53)
    goto LABEL_46;
LABEL_43:
  if (!result)
    return result;
  v42 = 5;
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v42))();
}

void sub_2395C1EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395C1F84(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(_QWORD **)(a1 + 24);
    if (v5 != (_QWORD *)a1)
      goto LABEL_6;
LABEL_9:
    v6 = 4;
    v5 = (_QWORD *)a1;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(_QWORD **)(a1 + 24);
  if (v5 == (_QWORD *)a1)
    goto LABEL_9;
LABEL_6:
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

_QWORD *sub_2395C2014(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_250ADFAD8;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[11];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    v6 = (_QWORD *)a1[4];
    if (v6 != v2)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_2395C20BC(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_250ADFAD8;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[11];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (_QWORD *)a1[4];
    if (v6 != v2)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v6 = (_QWORD *)a1[4];
    if (v6 != v2)
    {
LABEL_6:
      if (!v6)
        goto LABEL_11;
      v7 = 5;
LABEL_10:
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
      JUMPOUT(0x23B83E31CLL);
    }
  }
  v7 = 4;
  v6 = v2;
  goto LABEL_10;
}

char *sub_2395C2174(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (char *)operator new(0x70uLL);
  *(_QWORD *)v2 = &off_250ADFAD8;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 88);
  *((_QWORD *)v2 + 10) = *(_QWORD *)(a1 + 80);
  *((_QWORD *)v2 + 11) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_OWORD *)v2 + 6) = *(_OWORD *)(a1 + 96);
  return v2;
}

void sub_2395C2228(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395C223C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)a2 = &off_250ADFAD8;
  v4 = a2 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
      *(_QWORD *)(a2 + 32) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  v6 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 76);
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 88) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  return result;
}

uint64_t sub_2395C22FC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t result;

  v2 = a1 + 8;
  v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    result = *(_QWORD *)(a1 + 32);
    if (result != v2)
      goto LABEL_6;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  result = *(_QWORD *)(a1 + 32);
  if (result == v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
LABEL_6:
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_2395C23B4(char *__p)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = __p + 8;
  v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 11);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    v6 = (char *)*((_QWORD *)__p + 4);
    if (v6 != v2)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = (char *)*((_QWORD *)__p + 4);
  if (v6 == v2)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

void sub_2395C2450(uint64_t a1)
{
  sub_2395C247C(a1 + 8, a1 + 40);
}

void sub_2395C247C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *(std::__shared_weak_count **)(a2 + 48);
  v8 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_2394172E0();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  if (v8)
  {
    v6 = (unint64_t *)&v8->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2395C2544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    sub_239EBED3C();
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2395C255C(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_250ADFB20;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[11];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    v6 = (_QWORD *)a1[4];
    if (v6 != v2)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_2395C2604(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_250ADFB20;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[11];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (_QWORD *)a1[4];
    if (v6 != v2)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v6 = (_QWORD *)a1[4];
    if (v6 != v2)
    {
LABEL_6:
      if (!v6)
        goto LABEL_11;
      v7 = 5;
LABEL_10:
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
      JUMPOUT(0x23B83E31CLL);
    }
  }
  v7 = 4;
  v6 = v2;
  goto LABEL_10;
}

char *sub_2395C26BC(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (char *)operator new(0x70uLL);
  *(_QWORD *)v2 = &off_250ADFB20;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 88);
  *((_QWORD *)v2 + 10) = *(_QWORD *)(a1 + 80);
  *((_QWORD *)v2 + 11) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_OWORD *)v2 + 6) = *(_OWORD *)(a1 + 96);
  return v2;
}

void sub_2395C2770(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395C2784(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)a2 = &off_250ADFB20;
  v4 = a2 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
      *(_QWORD *)(a2 + 32) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  v6 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 76);
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 88) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  return result;
}

uint64_t sub_2395C2844(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t result;

  v2 = a1 + 8;
  v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    result = *(_QWORD *)(a1 + 32);
    if (result != v2)
      goto LABEL_6;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  result = *(_QWORD *)(a1 + 32);
  if (result == v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
LABEL_6:
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_2395C28FC(char *__p)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = __p + 8;
  v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 11);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    v6 = (char *)*((_QWORD *)__p + 4);
    if (v6 != v2)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = (char *)*((_QWORD *)__p + 4);
  if (v6 == v2)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

void sub_2395C2998(uint64_t a1)
{
  sub_2395C247C(a1 + 8, a1 + 40);
}

uint64_t sub_2395C29C4(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_2395C2A4C(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  sub_239596DB0(a1 + 8);
  return a1;
}

uint64_t sub_2395C2A4C(uint64_t a1)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      if (pthread_cond_signal((pthread_cond_t *)(a1 + 80)))
        sub_239EC0734();
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      if (pthread_cond_signal((pthread_cond_t *)(a1 + 128)))
        sub_239EC0704();
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  sub_2397A16B4(v2);
  return 1;
}

void sub_2395C2B94(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395C2BB0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _DWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = v6;
      v9 = (_QWORD *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      ++v6;
      v7 = v10;
    }
    while (v10 != a3);
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      sub_2394189F8();
    v12 = operator new(4 * v6);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[v6];
    do
    {
      *v12 = *((_DWORD *)v5 + 7);
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v11 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v11);
      }
      ++v12;
      v5 = v14;
    }
    while (v14 != a3);
    a1[1] = v12;
  }
  return a1;
}

void sub_2395C2CBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2395C2CD8(unint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 == *a2)
  {
    a3[1] = *a3;
  }
  else
  {
    v7 = result;
    v8 = *(unsigned __int8 *)(result + 1);
    if (*(_BYTE *)(result + 1))
    {
      v10 = *(_QWORD *)(result + 56);
      v9 = *(_QWORD *)(result + 64);
      if (v9 != v10)
      {
        v12 = 0;
        v13 = 1;
        do
        {
          result = *(_QWORD *)(v10 + 16 * v12);
          if (result)
          {
            result = sub_2395C2CD8(result, a2, a3);
            v10 = *(_QWORD *)(v7 + 56);
            v9 = *(_QWORD *)(v7 + 64);
          }
          v12 = v13++;
        }
        while (v12 < (v9 - v10) >> 4);
      }
    }
    else
    {
      v14 = v6 >> 2;
      v15 = *a3;
      v16 = (uint64_t)(a3[1] - *a3) >> 2;
      v17 = result + 96;
      do
      {
        v17 = *(_QWORD *)v17;
        if (!v17)
          break;
        v18 = *(unsigned int *)(v7 + 4);
        if (v16 <= v18)
          sub_239EC0BFC();
        result = 0;
        v19 = 0;
        v20 = 1;
        while (1)
        {
          result = *(unsigned int *)(v4 + 4 * result);
          if (*(_DWORD *)(v17 + 16) == (_DWORD)result)
            break;
          ++v19;
          result = v20++;
          if (v14 <= result)
            goto LABEL_12;
        }
        *(_DWORD *)(v15 + 4 * (v18 + v19 * (v16 / v14))) = *(_DWORD *)(v17 + 20);
        ++v8;
LABEL_12:
        ;
      }
      while (v14 > v8);
    }
  }
  return result;
}

uint64_t sub_2395C2DEC(uint64_t result, unsigned int a2, int a3, double a4, int8x16_t a5, float32x4_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  float v13;
  pthread_rwlock_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  unsigned int *v18;

  v6 = a3 + a2;
  if (v6 > a2)
  {
    v7 = result;
    v8 = *(_QWORD *)result;
    v9 = a2;
    do
    {
      v10 = *(unsigned int *)(**(_QWORD **)(v7 + 8) + 4 * v9);
      v17 = 0;
      v11 = *(_QWORD **)(v7 + 24);
      if (v11[4] <= v10 || (*(_QWORD *)(v11[3] + 8 * (v10 >> 6)) & (1 << v10)) == 0)
        sub_239EC0C2C();
      result = sub_2395C1698(*(_QWORD *)(v8 + 64), 0, v11[9] + 24 * v10, **(_DWORD **)(v7 + 56), 1, 0, 0, a4, a5, a6);
      v17 = result;
      if (*(_BYTE *)(v8 + 136) && **(_BYTE **)(v7 + 16))
      {
        v12 = *(_QWORD **)(v7 + 24);
        if (v12[4] <= v10 || (*(_QWORD *)(v12[3] + 8 * (v10 >> 6)) & (1 << v10)) == 0)
          sub_239EC0C5C();
        v13 = *(float *)(v12[6] + 24 * v10 + 20);
        v14 = *(pthread_rwlock_t **)(v7 + 32);
        j__pthread_rwlock_wrlock(v14);
        if (v13 <= 0.00000011921)
          v15 = *(_QWORD *)(v7 + 48);
        else
          v15 = *(_QWORD *)(v7 + 40);
        v18 = &v17;
        v16 = sub_2394F126C(v15, &v17, (uint64_t)&unk_239EC6E98, &v18);
        ++*((_DWORD *)v16 + 5);
        result = j__pthread_rwlock_unlock(v14);
      }
      ++v9;
    }
    while (v6 != v9);
  }
  return result;
}

void sub_2395C2FA4(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  j__pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2395C2FD4(pthread_t *a1, _OWORD *a2, _DWORD *a3, int *a4)
{
  std::__thread_struct *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;

  v8 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v8);
  v9 = (char *)operator new();
  v10 = a2[1];
  *(_OWORD *)(v9 + 8) = *a2;
  *(_OWORD *)(v9 + 24) = v10;
  v11 = a2[3];
  *(_OWORD *)(v9 + 40) = a2[2];
  *(_QWORD *)v9 = v8;
  *(_OWORD *)(v9 + 56) = v11;
  v12 = *a4;
  *((_DWORD *)v9 + 18) = *a3;
  *((_DWORD *)v9 + 19) = v12;
  v13 = pthread_create(a1, 0, (void *(__cdecl *)(void *))sub_2395C3100, v9);
  if (v13)
  {
    std::__throw_system_error(v13, "thread constructor failed");
    __break(1u);
  }
}

void sub_2395C30AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239478F54((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395C30C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_2395C30E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  sub_2395C319C(&a9);
  sub_239478F54(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2395C3100(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  double v4;
  int8x16_t v5;
  float32x4_t v6;
  const void *v7;
  uint64_t v8;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  sub_2395C2DEC(a1 + 8, *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76), v4, v5, v6);
  v7 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    v8 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v8, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](a1, 0x1070C402237A5E8);
  return 0;
}

void sub_2395C3188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395C319C((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_2395C319C(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x1070C402237A5E8);
  }
  return a1;
}

uint64_t sub_2395C3204(uint64_t a1, unsigned int **a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v11;

  if (*(_BYTE *)(a1 + 1))
  {
    v3 = *(_QWORD **)(a1 + 56);
    v4 = *(_QWORD **)(a1 + 64);
    if (v3 != v4)
    {
      v5 = 0;
      do
      {
        if (*v3)
          v5 = sub_2395C3204(*v3, a2) + v5;
        v3 += 2;
      }
      while (v3 != v4);
      return v5;
    }
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    if (*a2 != v7)
    {
      LODWORD(v5) = 0;
      v8 = (_QWORD *)(a1 + 80);
      do
      {
        v9 = *v6++;
        v11 = v9;
        v5 = v5 + sub_2395C32C4(v8, &v11);
      }
      while (v6 != v7);
      return v5;
    }
  }
  return 0;
}

uint64_t sub_2395C32C4(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v12;
  void *__p;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!*v6)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == v3)
      {
        if (*((_DWORD *)v7 + 4) == (_DWORD)v3)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == v3)
      break;
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
    if (v9 != v5)
      return 0;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      return 0;
  }
  if (*((_DWORD *)v7 + 4) != (_DWORD)v3)
    goto LABEL_11;
LABEL_22:
  sub_23946B1E4(a1, v7, (uint64_t)&__p);
  v12 = __p;
  __p = 0;
  if (v12)
    operator delete(v12);
  return 1;
}

uint64_t sub_2395C33D8(uint64_t a1, uint64_t a2, _QWORD *a3, __int32 **a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  float v13;
  __int32 *v14;
  __int32 *v15;
  __int32 *v16;
  __int32 *v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _DWORD *v45;

  if (*(_BYTE *)(a1 + 1))
  {
    v9 = *(_QWORD **)(a1 + 56);
    v10 = *(_QWORD **)(a1 + 64);
    while (v9 != v10)
    {
      if (*v9)
        sub_2395C33D8(*v9, a2, a3, a4, a5);
      v9 += 2;
    }
    return 1;
  }
  v11 = *(uint64_t **)(a1 + 96);
  if (!v11)
    return 1;
  v12 = a5;
  while (2)
  {
    v14 = (__int32 *)(v11 + 2);
    if (v12)
    {
      v15 = a4[1];
      v16 = wmemchr(*a4, *v14, v15 - *a4);
      v17 = v16 ? v16 : v15;
      if (v17 == a4[1])
        goto LABEL_11;
    }
    v18 = (int8x8_t)a3[1];
    if (v18)
    {
      v19 = *v14;
      v20 = (uint8x8_t)vcnt_s8(v18);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        v21 = *v14;
        if (*(_QWORD *)&v18 <= v19)
          v21 = v19 % *(_QWORD *)&v18;
      }
      else
      {
        v21 = (v18.i32[0] - 1) & v19;
      }
      v22 = *(uint64_t ***)(*a3 + 8 * v21);
      if (v22)
      {
        v23 = *v22;
        if (v23)
        {
          if (v20.u32[0] < 2uLL)
          {
            v24 = *(_QWORD *)&v18 - 1;
            while (1)
            {
              v26 = v23[1];
              if (v26 == v19)
              {
                if (*((_DWORD *)v23 + 4) == (_DWORD)v19)
                  goto LABEL_38;
              }
              else if ((v26 & v24) != v21)
              {
                goto LABEL_37;
              }
              v23 = (uint64_t *)*v23;
              if (!v23)
                goto LABEL_37;
            }
          }
          do
          {
            v25 = v23[1];
            if (v25 == v19)
            {
              if (*((_DWORD *)v23 + 4) == (_DWORD)v19)
                goto LABEL_38;
            }
            else
            {
              if (v25 >= *(_QWORD *)&v18)
                v25 %= *(_QWORD *)&v18;
              if (v25 != v21)
                break;
            }
            v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
      }
    }
LABEL_37:
    v45 = v11 + 2;
    *((_DWORD *)sub_2394AAB74((uint64_t)a3, (unsigned int *)v11 + 4, (uint64_t)&unk_239EC6E98, &v45) + 5) = 0;
LABEL_38:
    if ((_DWORD)a2 == 2)
    {
      v31 = (int8x8_t)a3[1];
      if (v31)
      {
        v32 = *((unsigned int *)v11 + 4);
        v33 = (uint8x8_t)vcnt_s8(v31);
        v33.i16[0] = vaddlv_u8(v33);
        if (v33.u32[0] > 1uLL)
        {
          v34 = *((unsigned int *)v11 + 4);
          if (*(_QWORD *)&v31 <= v32)
            v34 = v32 % *(_QWORD *)&v31;
        }
        else
        {
          v34 = (v31.i32[0] - 1) & v32;
        }
        v40 = *(uint64_t ***)(*a3 + 8 * v34);
        if (v40)
        {
          v36 = *v40;
          if (v36)
          {
            if (v33.u32[0] < 2uLL)
            {
              v41 = *(_QWORD *)&v31 - 1;
              while (1)
              {
                v43 = v36[1];
                if (v43 == v32)
                {
                  if (*((_DWORD *)v36 + 4) == (_DWORD)v32)
                    goto LABEL_9;
                }
                else if ((v43 & v41) != v34)
                {
                  goto LABEL_85;
                }
                v36 = (uint64_t *)*v36;
                if (!v36)
                  goto LABEL_85;
              }
            }
            do
            {
              v42 = v36[1];
              if (v42 == v32)
              {
                if (*((_DWORD *)v36 + 4) == (_DWORD)v32)
                {
LABEL_9:
                  v13 = *((float *)v36 + 5) + (float)(*((float *)v11 + 5) * *((float *)v11 + 5));
                  goto LABEL_10;
                }
              }
              else
              {
                if (v42 >= *(_QWORD *)&v31)
                  v42 %= *(_QWORD *)&v31;
                if (v42 != v34)
                  break;
              }
              v36 = (uint64_t *)*v36;
            }
            while (v36);
          }
        }
      }
LABEL_85:
      sub_23941D898("unordered_map::at: key not found");
    }
    if ((_DWORD)a2 != 1)
      return 0;
    v27 = (int8x8_t)a3[1];
    if (!*(_QWORD *)&v27)
      goto LABEL_85;
    v28 = *((unsigned int *)v11 + 4);
    v29 = (uint8x8_t)vcnt_s8(v27);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v30 = *((unsigned int *)v11 + 4);
      if (*(_QWORD *)&v27 <= v28)
        v30 = v28 % *(_QWORD *)&v27;
    }
    else
    {
      v30 = (v27.i32[0] - 1) & v28;
    }
    v35 = *(uint64_t ***)(*a3 + 8 * v30);
    if (!v35)
      goto LABEL_85;
    v36 = *v35;
    if (!v36)
      goto LABEL_85;
    if (v29.u32[0] < 2uLL)
    {
      v37 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v36[1];
        if (v39 == v28)
        {
          if (*((_DWORD *)v36 + 4) == (_DWORD)v28)
            goto LABEL_63;
        }
        else if ((v39 & v37) != v30)
        {
          goto LABEL_85;
        }
        v36 = (uint64_t *)*v36;
        if (!v36)
          goto LABEL_85;
      }
    }
    while (1)
    {
      v38 = v36[1];
      if (v38 == v28)
        break;
      if (v38 >= *(_QWORD *)&v27)
        v38 %= *(_QWORD *)&v27;
      if (v38 != v30)
        goto LABEL_85;
LABEL_53:
      v36 = (uint64_t *)*v36;
      if (!v36)
        goto LABEL_85;
    }
    if (*((_DWORD *)v36 + 4) != (_DWORD)v28)
      goto LABEL_53;
LABEL_63:
    v13 = *((float *)v11 + 5) + *((float *)v36 + 5);
LABEL_10:
    *((float *)v36 + 5) = v13;
LABEL_11:
    v11 = (uint64_t *)*v11;
    if (v11)
      continue;
    return 1;
  }
}

uint64_t sub_2395C3790(uint64_t a1, _QWORD *a2, __int32 **a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  __int32 *v16;
  __int32 *v17;
  __int32 *v18;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  if (*(_BYTE *)(a1 + 1))
  {
    v7 = *(_QWORD **)(a1 + 56);
    v8 = *(_QWORD **)(a1 + 64);
    while (v7 != v8)
    {
      if (*v7)
        sub_2395C3790(*v7, a2, a3, a4);
      v7 += 2;
    }
    return 1;
  }
  v9 = *(uint64_t **)(a1 + 96);
  if (!v9)
    return 1;
  v10 = a4;
  while (2)
  {
    if (v10)
    {
      v16 = a3[1];
      v17 = wmemchr(*a3, *((_DWORD *)v9 + 4), v16 - *a3);
      v18 = v17 ? v17 : v16;
      if (v18 == a3[1])
        goto LABEL_14;
    }
    v19 = (int8x8_t)a2[1];
    if (!*(_QWORD *)&v19)
      goto LABEL_42;
    v20 = *((unsigned int *)v9 + 4);
    v21 = (uint8x8_t)vcnt_s8(v19);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] > 1uLL)
    {
      v22 = *((unsigned int *)v9 + 4);
      if (*(_QWORD *)&v19 <= v20)
        v22 = v20 % *(_QWORD *)&v19;
    }
    else
    {
      v22 = (v19.i32[0] - 1) & v20;
    }
    v23 = *(uint64_t ***)(*a2 + 8 * v22);
    if (!v23 || (v24 = *v23) == 0)
LABEL_42:
      sub_23941D898("unordered_map::at: key not found");
    if (v21.u32[0] < 2uLL)
    {
      v25 = *(_QWORD *)&v19 - 1;
      while (1)
      {
        v27 = v24[1];
        if (v27 == v20)
        {
          if (*((_DWORD *)v24 + 4) == (_DWORD)v20)
            goto LABEL_9;
        }
        else if ((v27 & v25) != v22)
        {
          goto LABEL_42;
        }
        v24 = (uint64_t *)*v24;
        if (!v24)
          goto LABEL_42;
      }
    }
    while (1)
    {
      v26 = v24[1];
      if (v26 == v20)
        break;
      if (v26 >= *(_QWORD *)&v19)
        v26 %= *(_QWORD *)&v19;
      if (v26 != v22)
        goto LABEL_42;
LABEL_30:
      v24 = (uint64_t *)*v24;
      if (!v24)
        goto LABEL_42;
    }
    if (*((_DWORD *)v24 + 4) != (_DWORD)v20)
      goto LABEL_30;
LABEL_9:
    v11 = *((float *)v24 + 5);
    v12 = fabsf(v11);
    v13 = 1.0 / v11;
    v14 = v11 < 0.0;
    v15 = -3.4028e38;
    if (!v14)
      v15 = 3.4028e38;
    if (v12 >= 0.00000011921)
      v15 = v13;
    *((float *)v9 + 5) = v15 * *((float *)v9 + 5);
LABEL_14:
    v9 = (uint64_t *)*v9;
    if (v9)
      continue;
    return 1;
  }
}

uint64_t sub_2395C3978(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned int v6;
  float v7;
  float v8;

  if (*(_BYTE *)(a1 + 1))
  {
    v5 = *(_QWORD **)(a1 + 56);
    v4 = *(_QWORD **)(a1 + 64);
    while (v5 != v4)
    {
      if (*v5)
        sub_2395C3978(*v5, a2);
      v5 += 2;
    }
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 104);
    if (v6)
    {
      v7 = log((double)a2 / (double)v6);
      v8 = v7 + 0.00000011921;
    }
    else
    {
      v8 = 0.0;
    }
    *(float *)(a1 + 8) = v8;
  }
  return 1;
}

float sub_2395C3A04(uint64_t a1, __int32 **a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  float result;
  uint64_t *v9;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;

  if (*(_BYTE *)(a1 + 1))
  {
    v7 = *(_QWORD **)(a1 + 56);
    v6 = *(_QWORD **)(a1 + 64);
    while (v7 != v6)
    {
      if (*v7)
        sub_2395C3A04(*v7, a2, a3);
      v7 += 2;
    }
  }
  else
  {
    v9 = *(uint64_t **)(a1 + 96);
    if (v9)
    {
      if ((_BYTE)a3)
      {
        v10 = a2[1];
        do
        {
          v11 = wmemchr(*a2, *((_DWORD *)v9 + 4), v10 - *a2);
          if (v11)
            v12 = v11;
          else
            v12 = v10;
          v10 = a2[1];
          if (v12 != v10)
          {
            result = *(float *)(a1 + 8) * *((float *)v9 + 5);
            *((float *)v9 + 5) = result;
          }
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          result = *(float *)(a1 + 8) * *((float *)v9 + 5);
          *((float *)v9 + 5) = result;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
    }
  }
  return result;
}

BOOL sub_2395C3AD8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, __int32 *a7, unsigned __int8 a8)
{
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  __int32 *v20;
  unsigned int v21;
  float *v22;
  __int32 *v23;
  __int32 *v24;
  uint64_t v25;
  __int32 *v26;
  __int32 *v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  uint64_t *j;
  char v32;
  __int32 *v33;
  int v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float v40;
  unint64_t v41;
  int v42;
  int8x8_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  float v52;
  int v53;
  char v54;
  void *__p;
  char *v56;
  char *v57;
  unsigned int v58;

  if (a5[3])
  {
    v15 = (_QWORD *)a5[2];
    if (v15)
    {
      do
      {
        v16 = (_QWORD *)*v15;
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
    a5[2] = 0;
    v17 = a5[1];
    if (v17)
    {
      for (i = 0; i != v17; ++i)
        *(_QWORD *)(*a5 + 8 * i) = 0;
    }
    a5[3] = 0;
  }
  v54 = a8;
  v19 = a8;
  v53 = a6;
  if (!a8)
    a6 = 1;
  if ((a6 & 1) == 0)
  {
    v20 = a7;
    v21 = *a7 + 1;
    v22 = *(float **)(a2 + 16);
    if (!v22)
      goto LABEL_14;
    while (1)
    {
LABEL_37:
      v36 = *((unsigned int *)v22 + 4);
      v37 = *(_QWORD *)(a1 + 80);
      if (v36 >= (*(_QWORD *)(a1 + 88) - v37) >> 3)
        sub_239EBFB94();
      v38 = *(_QWORD *)(v37 + 8 * v36);
      if (!v38)
        sub_239EC0C8C();
      v39 = *(float **)(v38 + 96);
      if (v39)
        break;
LABEL_36:
      v22 = *(float **)v22;
      if (!v22)
        goto LABEL_14;
    }
    while (1)
    {
      v41 = *((unsigned int *)v39 + 4);
      if (v41 >= v21)
        v42 = 1;
      else
        v42 = a6;
      if (v42 != 1)
        goto LABEL_43;
      v43 = (int8x8_t)a5[1];
      if (v43)
      {
        v44 = (uint8x8_t)vcnt_s8(v43);
        v44.i16[0] = vaddlv_u8(v44);
        if (v44.u32[0] > 1uLL)
        {
          v45 = *((unsigned int *)v39 + 4);
          if (*(_QWORD *)&v43 <= v41)
            v45 = v41 % *(_QWORD *)&v43;
        }
        else
        {
          v45 = (v43.i32[0] - 1) & v41;
        }
        v46 = *(uint64_t ***)(*a5 + 8 * v45);
        if (v46)
        {
          v47 = *v46;
          if (*v46)
          {
            if (v44.u32[0] < 2uLL)
            {
              v48 = *(_QWORD *)&v43 - 1;
              while (1)
              {
                v50 = v47[1];
                if (v50 == v41)
                {
                  if (*((_DWORD *)v47 + 4) == (_DWORD)v41)
                    goto LABEL_69;
                }
                else if ((v50 & v48) != v45)
                {
                  goto LABEL_68;
                }
                v47 = (uint64_t *)*v47;
                if (!v47)
                  goto LABEL_68;
              }
            }
            do
            {
              v49 = v47[1];
              if (v49 == v41)
              {
                if (*((_DWORD *)v47 + 4) == (_DWORD)v41)
                  goto LABEL_69;
              }
              else
              {
                if (v49 >= *(_QWORD *)&v43)
                  v49 %= *(_QWORD *)&v43;
                if (v49 != v45)
                  break;
              }
              v47 = (uint64_t *)*v47;
            }
            while (v47);
          }
        }
      }
LABEL_68:
      __p = (void *)v41;
      v47 = sub_2394AA7A4((uint64_t)a5, (unsigned int *)&__p, &__p);
LABEL_69:
      v51 = *(_DWORD *)(a1 + 44);
      if (v51 == 2)
      {
        v40 = *((float *)v47 + 5) + (float)(v22[5] * v39[5]);
      }
      else
      {
        if (v51 != 1)
          goto LABEL_43;
        v52 = v39[5];
        if (v52 >= v22[5])
          v52 = v22[5];
        v40 = *((float *)v47 + 5) + v52;
      }
      *((float *)v47 + 5) = v40;
LABEL_43:
      v39 = *(float **)v39;
      if (!v39)
        goto LABEL_36;
    }
  }
  v20 = a7;
  v21 = 0;
  v22 = *(float **)(a2 + 16);
  if (v22)
    goto LABEL_37;
LABEL_14:
  if (!*(_DWORD *)(a4 + 4) || !*(_DWORD *)a4)
    return 1;
  v23 = *(__int32 **)(a1 + 8);
  v24 = *(__int32 **)(a1 + 16);
  v25 = v24 - v23;
  if (v19)
  {
    v26 = wmemchr(v23, *v20, v24 - v23);
    v27 = v26 ? v26 : v24;
    if (v27 != *(__int32 **)(a1 + 16))
    {
      LODWORD(v25) = v25 - 1;
      v58 = ((unint64_t)v27 - *(_QWORD *)(a1 + 8)) >> 2;
      __p = &v58;
      *((_DWORD *)sub_2394AAB74((uint64_t)a5, &v58, (uint64_t)&unk_239EC6E98, (_DWORD **)&__p) + 5) = -8388609;
    }
  }
  v28 = *(_DWORD *)(a4 + 4);
  if (v28 > v25)
    return 1;
  __p = 0;
  v56 = 0;
  v57 = 0;
  v29 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v29)
  {
    v30 = (char *)operator new(4 * v29);
    bzero(v30, 4 * v29);
    __p = v30;
    v56 = &v30[4 * v29];
    v57 = v56;
    j = *(uint64_t **)(a2 + 16);
    if (j)
      goto LABEL_25;
  }
  else
  {
    v30 = 0;
    __p = 0;
    v56 = 0;
    v57 = 0;
    for (j = *(uint64_t **)(a2 + 16); j; j = (uint64_t *)*j)
LABEL_25:
      *(_DWORD *)&v30[4 * *((unsigned int *)j + 4)] = *((_DWORD *)j + 5);
  }
  if (v53)
    v32 = 0;
  else
    v32 = v54;
  if (v53)
    v33 = 0;
  else
    v33 = v20;
  v34 = sub_2395C3E9C(a1, v28, *(unsigned __int8 *)(a4 + 16), *(_DWORD *)a4, (float32x4_t **)&__p, a5, v33, v32, *(long double *)(a4 + 8));
  if (__p)
  {
    v56 = (char *)__p;
    operator delete(__p);
  }
  return v34 != 0;
}

void sub_2395C3E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395C3E9C(unint64_t a1, unsigned int a2, int a3, int a4, float32x4_t **a5, uint64_t *a6, _DWORD *a7, char a8, long double a9)
{
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  uint64_t v12;
  uint64_t *v14;
  char *v19;
  unsigned int *v20;
  unsigned int *v21;
  size_t v22;
  char *v23;
  int32x2_t *v24;
  float *v25;
  float v26;
  uint64_t *v27;
  _BOOL4 v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int32x2_t *v33;
  int32x2_t *v34;
  char *v35;
  long double v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  float *v40;
  float32x4_t *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  int v47;
  uint64_t v48;
  float32x4_t *v49;
  float32x4_t v50;
  float *v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  float32x4_t *v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  void *v60;
  char *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  char *v68;
  unint64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  float *v78;
  uint64_t v79;
  uint64_t v80;
  float *v81;
  float v82;
  float v83;
  float v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  float32x4_t *v88;
  uint64_t v89;
  float32x4_t v90;
  uint64_t v91;
  float *v92;
  float32x4_t *v93;
  uint64_t v94;
  float32x4_t v95;
  uint64_t v96;
  float *v97;
  uint64_t *i;
  _DWORD *v99;
  int8x8_t v100;
  uint64_t v101;
  unsigned int *v102;
  uint8x8_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t **v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  float *v111;
  float *v112;
  BOOL v113;
  float *v114;
  float v115;
  float *v116;
  float v117;
  float v118;
  float v119;
  float *v120;
  float v121;
  float v122;
  BOOL v123;
  float v124;
  int8x8_t v125;
  uint64_t v126;
  unsigned int *v127;
  uint8x8_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t **v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  _DWORD *v137;
  int v138;
  unint64_t v140;
  float32x4_t **v141;
  size_t v142;
  uint64_t *v144;
  void *__p;
  void *v147;
  uint64_t v148;
  void *p_p;
  char *v150;
  char *v151;
  void *v152;
  int32x2_t *v153;
  char *v154;
  void *v155;
  unsigned int *v156;
  unsigned int *v157;
  _DWORD *v158[2];

  v10 = *(_BYTE **)(a1 + 8);
  v9 = *(_BYTE **)(a1 + 16);
  v11 = v9 - v10;
  v12 = (v9 - v10) >> 2;
  if (a2 - 1 >= v12)
    sub_239EC0CBC();
  v14 = a6;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  if (v9 == v10)
  {
    v20 = 0;
    v19 = 0;
    v137 = a7;
    v21 = (unsigned int *)(4 * a2);
    v152 = a6;
    if (!v21)
      goto LABEL_8;
    goto LABEL_7;
  }
  if ((v11 & 0x8000000000000000) != 0)
    sub_2394189F8();
  v19 = (char *)operator new(v9 - v10);
  v20 = (unsigned int *)&v19[4 * v12];
  v155 = v19;
  v157 = v20;
  memcpy(v19, v10, v11);
  v156 = v20;
  v137 = a7;
  v21 = (unsigned int *)&v19[4 * a2];
  v152 = v14;
  if (v21 != v20)
LABEL_7:
    sub_2395C4C3C((unint64_t)v19, v21, v20, (uint64_t **)&v152);
LABEL_8:
  v138 = a3;
  v22 = 4 * a2;
  v23 = (char *)operator new(v22);
  v24 = (int32x2_t *)&v23[v22];
  v152 = v23;
  v154 = &v23[v22];
  memcpy(v23, v19, v22);
  v153 = v24;
  v142 = v11;
  v140 = a1;
  v141 = a5;
  if (a4 == 3)
  {
    v25 = (float *)v14[2];
    if (!v25)
    {
      v28 = 0;
      p_p = 0;
      v150 = 0;
      v151 = 0;
      goto LABEL_56;
    }
    v26 = -3.4028e38;
    do
    {
      if (v25[5] > v26)
        v26 = v25[5];
      v25 = *(float **)v25;
    }
    while (v25);
    if (v26 > 0.00000011921)
    {
      LODWORD(__p) = 0;
      do
      {
        p_p = &__p;
        v27 = sub_2394AAB74((uint64_t)v14, (unsigned int *)&__p, (uint64_t)&unk_239EC6E98, (_DWORD **)&p_p);
        *((float *)v27 + 5) = *((float *)v27 + 5) / v26;
        LODWORD(__p) = (_DWORD)__p + 1;
      }
      while (__p < v12);
    }
  }
  v28 = a4 == 2;
  if (a4 == 2)
  {
    v29 = 126 - 2 * __clz(((char *)v153 - (_BYTE *)v152) >> 2);
    p_p = v14;
    if (v153 == v152)
      v30 = 0;
    else
      v30 = v29;
    sub_2395C5A54((int32x2_t *)v152, v153, (uint64_t **)&p_p, v30, 1);
  }
  p_p = 0;
  v150 = 0;
  v151 = 0;
  if (!a2)
  {
    v31 = 0;
    v32 = 0;
    v33 = (int32x2_t *)v152;
    v34 = v153;
    if (v152 == v153)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  v32 = (char *)operator new(v22);
  v31 = &v32[4 * a2];
  p_p = v32;
  v150 = v32;
  v151 = v31;
  v33 = (int32x2_t *)v152;
  v34 = v153;
  if (v152 != v153)
  {
LABEL_57:
    v61 = v32;
    v144 = v14;
    while (1)
    {
      while (1)
      {
        __p = v33;
        v62 = sub_2394AAB74((uint64_t)v14, (unsigned int *)v33, (uint64_t)&unk_239EC6E98, (_DWORD **)&__p);
        v63 = v62;
        if (v61 >= v31)
          break;
        *(_DWORD *)v61 = *((_DWORD *)v62 + 5);
        v61 += 4;
        v35 = v61;
        v150 = v61;
        v33 = (int32x2_t *)((char *)v33 + 4);
        if (v33 == v34)
          goto LABEL_25;
      }
      v64 = (v61 - v32) >> 2;
      v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 62)
        sub_2394189F8();
      if ((v31 - v32) >> 1 > v65)
        v65 = (v31 - v32) >> 1;
      if ((unint64_t)(v31 - v32) >= 0x7FFFFFFFFFFFFFFCLL)
        v66 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      if (v66)
      {
        if (v66 >> 62)
          sub_239418A80();
        v67 = operator new(4 * v66);
        v68 = &v67[4 * v64];
        *(_DWORD *)v68 = *((_DWORD *)v63 + 5);
        v35 = v68 + 4;
        if (v61 == v32)
          goto LABEL_74;
      }
      else
      {
        v67 = 0;
        v68 = (char *)(4 * v64);
        *(_DWORD *)(4 * v64) = *((_DWORD *)v63 + 5);
        v35 = (char *)(4 * v64 + 4);
        if (v61 == v32)
          goto LABEL_74;
      }
      v69 = v61 - 4 - v32;
      if (v69 >= 0xBC)
      {
        if (&v67[v61 - v32 - 4 - (v69 & 0xFFFFFFFFFFFFFFFCLL)] > &v67[v61 - v32 - 4])
        {
          v70 = v61;
        }
        else if (&v61[-(v69 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v61 - 4)
        {
          v70 = v61;
        }
        else if ((unint64_t)(v32 - v67) >= 0x20)
        {
          v72 = (v69 >> 2) + 1;
          v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
          v70 = &v61[-v73];
          v68 -= v73;
          v74 = &v67[4 * v64 - 16];
          v75 = (__int128 *)(v61 - 16);
          v76 = v72 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v77 = *v75;
            *(v74 - 1) = *(v75 - 1);
            *v74 = v77;
            v74 -= 2;
            v75 -= 2;
            v76 -= 8;
          }
          while (v76);
          if (v72 == (v72 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_74;
        }
        else
        {
          v70 = v61;
        }
      }
      else
      {
        v70 = v61;
      }
      do
      {
        v71 = *((_DWORD *)v70 - 1);
        v70 -= 4;
        *((_DWORD *)v68 - 1) = v71;
        v68 -= 4;
      }
      while (v70 != v32);
LABEL_74:
      v31 = &v67[4 * v66];
      p_p = v68;
      v150 = v35;
      v151 = v31;
      if (v32)
        operator delete(v32);
      v32 = v68;
      v14 = v144;
      v150 = v35;
      v33 = (int32x2_t *)((char *)v33 + 4);
      v61 = v35;
      if (v33 == v34)
        goto LABEL_25;
    }
  }
LABEL_24:
  v35 = v32;
LABEL_25:
  __p = 0;
  v147 = 0;
  v148 = 0;
  sub_2395BF2FC(v140, (uint64_t *)&v152, &__p);
  v37 = 0;
  do
  {
    if (v28)
    {
      *(float *)&v36 = (float)(a2 - v37) / (float)a2;
    }
    else
    {
      LODWORD(v36) = 1.0;
      if (a4 == 3)
      {
        v158[0] = (char *)v152 + 4 * v37;
        v38 = sub_2394AAB74((uint64_t)v14, v158[0], (uint64_t)&unk_239EC6E98, v158);
        v36 = pow(*((float *)v38 + 5), a9);
        *(float *)&v36 = v36;
      }
    }
    v39 = *(unsigned int *)(v140 + 60);
    if ((_DWORD)v39)
    {
      v40 = (float *)__p;
      v41 = *v141;
      if (v39 < 0xC
        || __CFADD__(v39 * v37, v39 - 1)
        || ((v42 = 4 * (v39 * v37), v41 < (float32x4_t *)((char *)__p + 4 * v39 + v42))
          ? (v43 = (char *)__p + v42 >= (char *)&v41->f32[v39])
          : (v43 = 1),
            !v43))
      {
        v44 = 0;
LABEL_44:
        v51 = &v41->f32[v44];
        v52 = v44 + v39 * v37;
        v53 = v39 - v44;
        do
        {
          *v51 = *v51 + (float)(v40[v52] * *(float *)&v36);
          ++v51;
          ++v52;
          --v53;
        }
        while (v53);
        goto LABEL_26;
      }
      v44 = v39 & 0xFFFFFFF8;
      v45 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v36, 0);
      v46 = v41 + 1;
      v47 = v39 * v37;
      v48 = v44;
      do
      {
        v49 = (float32x4_t *)&v40[v47];
        v50 = vmlaq_f32(*v46, v45, v49[1]);
        v46[-1] = vmlaq_f32(v46[-1], v45, *v49);
        *v46 = v50;
        v46 += 2;
        v47 += 8;
        v48 -= 8;
      }
      while (v48);
      if (v44 != v39)
        goto LABEL_44;
    }
LABEL_26:
    ++v37;
  }
  while (v37 != a2);
  v54 = *(_DWORD *)(v140 + 44);
  if (v54 == 1)
  {
    v55 = *(unsigned int *)(v140 + 60);
    if (!(_DWORD)v55)
      goto LABEL_111;
    v56 = *v141;
    if ((_DWORD)v55 == 1)
    {
      v57 = 0;
      v58 = 0.0;
    }
    else
    {
      v57 = v55 & 0xFFFFFFFE;
      v78 = &v56->f32[1];
      v58 = 0.0;
      v79 = v57;
      do
      {
        v58 = (float)(v58 + *(v78 - 1)) + *v78;
        v78 += 2;
        v79 -= 2;
      }
      while (v79);
      if (v57 == v55)
      {
LABEL_93:
        v83 = fabsf(v58);
        v84 = -3.4028e38;
        if (v58 >= 0.0)
          v84 = 3.4028e38;
        if (v83 < 0.00000011921)
        {
          if (v55 < 8)
          {
            v85 = 0;
LABEL_103:
            v91 = v55 - v85;
            v92 = &v56->f32[v85];
            do
            {
              *v92 = v84 * *v92;
              ++v92;
              --v91;
            }
            while (v91);
            goto LABEL_111;
          }
          v85 = v55 & 0xFFFFFFF8;
          v88 = v56 + 1;
          v89 = v85;
          do
          {
            v90 = vmulq_n_f32(*v88, v84);
            v88[-1] = vmulq_n_f32(v88[-1], v84);
            *v88 = v90;
            v88 += 2;
            v89 -= 8;
          }
          while (v89);
          if (v85 != v55)
            goto LABEL_103;
LABEL_111:
          for (i = (uint64_t *)v14[2]; i; i = (uint64_t *)*i)
            *((_DWORD *)i + 5) = 0;
          LODWORD(v158[0]) = 0;
          if (a8)
          {
            LODWORD(v158[0]) = *v137 + 1;
            v99 = v158;
          }
          else
          {
            v99 = 0;
          }
          sub_2395C4A50(*(_QWORD *)(v140 + 64), v141, *(unsigned int *)(v140 + 44), v14, v99);
          if (v14[3] != (v142 >> 2))
          {
            sub_239A444D4((uint64_t)"unknown file", 991, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          if (v138)
          {
            v100 = (int8x8_t)v14[1];
            if (!*(_QWORD *)&v100)
LABEL_190:
              sub_23941D898("unordered_map::at: key not found");
            v101 = 0;
            v102 = (unsigned int *)v152;
            v103 = (uint8x8_t)vcnt_s8(v100);
            v103.i16[0] = vaddlv_u8(v103);
            v104 = *v14;
LABEL_121:
            v105 = v102[v101];
            if (v103.u32[0] > 1uLL)
            {
              v106 = v102[v101];
              if (*(_QWORD *)&v100 <= v105)
                v106 = v105 % *(_QWORD *)&v100;
            }
            else
            {
              v106 = (*(_QWORD *)&v100 + 0xFFFFFFFFLL) & v105;
            }
            v107 = *(uint64_t ***)(v104 + 8 * v106);
            if (!v107)
              goto LABEL_190;
            v108 = *v107;
            if (!v108)
              goto LABEL_190;
            if (v103.u32[0] < 2uLL)
            {
              while (1)
              {
                v109 = v108[1];
                if (v109 == v105)
                {
                  if (*((_DWORD *)v108 + 4) == (_DWORD)v105)
                    goto LABEL_120;
                }
                else if ((v109 & (*(_QWORD *)&v100 - 1)) != v106)
                {
                  goto LABEL_190;
                }
                v108 = (uint64_t *)*v108;
                if (!v108)
                  goto LABEL_190;
              }
            }
            while (1)
            {
              v110 = v108[1];
              if (v110 == v105)
              {
                if (*((_DWORD *)v108 + 4) == (_DWORD)v105)
                {
LABEL_120:
                  *((_DWORD *)v108 + 5) = -1082130432;
                  if (++v101 == a2)
                  {
                    v111 = (float *)p_p;
                    v112 = (float *)((char *)p_p + 4);
                    v113 = p_p == v35 || v112 == (float *)v35;
                    v114 = (float *)p_p;
                    if (!v113)
                    {
                      v115 = *(float *)p_p;
                      v114 = (float *)p_p;
                      v116 = (float *)((char *)p_p + 4);
                      do
                      {
                        v117 = *v116++;
                        v118 = v117;
                        if (v117 < v115)
                        {
                          v115 = v118;
                          v114 = v112;
                        }
                        v112 = v116;
                      }
                      while (v116 != (float *)v35);
                    }
                    v119 = *v114;
                    v120 = (float *)v14[2];
                    if (v120)
                    {
                      v121 = -3.4028e38;
                      do
                      {
                        if (v120[5] > v121)
                          v121 = v120[5];
                        v120 = *(float **)v120;
                      }
                      while (v120);
                    }
                    else
                    {
                      v121 = -3.4028e38;
                    }
                    v122 = (float)(v121 - v119) + 0.00000011921;
                    v123 = v119 < v121;
                    v124 = 0.0;
                    if (v123)
                      v124 = v122;
                    v125 = (int8x8_t)v14[1];
                    if (!*(_QWORD *)&v125)
LABEL_191:
                      sub_23941D898("unordered_map::at: key not found");
                    v126 = 0;
                    v127 = (unsigned int *)v152;
                    v128 = (uint8x8_t)vcnt_s8(v125);
                    v128.i16[0] = vaddlv_u8(v128);
                    v129 = *v14;
LABEL_161:
                    v130 = v127[v126];
                    if (v128.u32[0] > 1uLL)
                    {
                      v131 = v127[v126];
                      if (*(_QWORD *)&v125 <= v130)
                        v131 = v130 % *(_QWORD *)&v125;
                    }
                    else
                    {
                      v131 = (*(_QWORD *)&v125 + 0xFFFFFFFFLL) & v130;
                    }
                    v132 = *(uint64_t ***)(v129 + 8 * v131);
                    if (!v132)
                      goto LABEL_191;
                    v133 = *v132;
                    if (!v133)
                      goto LABEL_191;
                    if (v128.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v134 = v133[1];
                        if (v134 == v130)
                        {
                          if (*((_DWORD *)v133 + 4) == (_DWORD)v130)
                            goto LABEL_160;
                        }
                        else if ((v134 & (*(_QWORD *)&v125 - 1)) != v131)
                        {
                          goto LABEL_191;
                        }
                        v133 = (uint64_t *)*v133;
                        if (!v133)
                          goto LABEL_191;
                      }
                    }
                    while (1)
                    {
                      v135 = v133[1];
                      if (v135 == v130)
                      {
                        if (*((_DWORD *)v133 + 4) == (_DWORD)v130)
                        {
LABEL_160:
                          *((float *)v133 + 5) = v124 + v111[v126++];
                          if (v126 == a2)
                            goto LABEL_181;
                          goto LABEL_161;
                        }
                      }
                      else
                      {
                        if (v135 >= *(_QWORD *)&v125)
                          v135 %= *(_QWORD *)&v125;
                        if (v135 != v131)
                          goto LABEL_191;
                      }
                      v133 = (uint64_t *)*v133;
                      if (!v133)
                        goto LABEL_191;
                    }
                  }
                  goto LABEL_121;
                }
              }
              else
              {
                if (v110 >= *(_QWORD *)&v100)
                  v110 %= *(_QWORD *)&v100;
                if (v110 != v106)
                  goto LABEL_190;
              }
              v108 = (uint64_t *)*v108;
              if (!v108)
                goto LABEL_190;
            }
          }
LABEL_181:
          v59 = 1;
          v60 = __p;
          if (!__p)
            goto LABEL_183;
LABEL_182:
          v147 = v60;
          operator delete(v60);
          goto LABEL_183;
        }
        v86 = 1.0 / v58;
        if (v55 >= 8)
        {
          v87 = v55 & 0xFFFFFFF8;
          v93 = v56 + 1;
          v94 = v87;
          do
          {
            v95 = vmulq_n_f32(*v93, v86);
            v93[-1] = vmulq_n_f32(v93[-1], v86);
            *v93 = v95;
            v93 += 2;
            v94 -= 8;
          }
          while (v94);
          if (v87 == v55)
            goto LABEL_111;
        }
        else
        {
          v87 = 0;
        }
        v96 = v55 - v87;
        v97 = &v56->f32[v87];
        do
        {
          *v97 = v86 * *v97;
          ++v97;
          --v96;
        }
        while (v96);
        goto LABEL_111;
      }
    }
    v80 = v55 - v57;
    v81 = &v56->f32[v57];
    do
    {
      v82 = *v81++;
      v58 = v58 + v82;
      --v80;
    }
    while (v80);
    goto LABEL_93;
  }
  if (v54 == 2)
  {
    sub_2396F55B0(*v141, *(unsigned int *)(v140 + 60), v36);
    goto LABEL_111;
  }
  v59 = 0;
  v60 = __p;
  if (__p)
    goto LABEL_182;
LABEL_183:
  if (p_p)
    operator delete(p_p);
  if (v152)
  {
    v153 = (int32x2_t *)v152;
    operator delete(v152);
  }
  if (v155)
    operator delete(v155);
  return v59;
}

void sub_2395C4968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  v29 = *(void **)(v27 - 144);
  if (v29)
  {
    *(_QWORD *)(v27 - 136) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395C4A50(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, _DWORD *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  float *v12;
  float v14;
  unint64_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;

  if (!*(_BYTE *)(a1 + 1))
  {
    if (*(float *)(*a2 + 4 * *(unsigned int *)(a1 + 4)) == 0.0)
      return 1;
    v12 = *(float **)(a1 + 96);
    if (!v12)
      return 1;
    while (1)
    {
      v15 = *((unsigned int *)v12 + 4);
      if (a5 && v15 < *a5)
        goto LABEL_12;
      v16 = (int8x8_t)a4[1];
      if (v16)
      {
        v17 = (uint8x8_t)vcnt_s8(v16);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          v18 = *((unsigned int *)v12 + 4);
          if (*(_QWORD *)&v16 <= v15)
            v18 = v15 % *(_QWORD *)&v16;
        }
        else
        {
          v18 = (v16.i32[0] - 1) & v15;
        }
        v19 = *(uint64_t ***)(*a4 + 8 * v18);
        if (v19)
        {
          v20 = *v19;
          if (*v19)
          {
            if (v17.u32[0] < 2uLL)
            {
              v21 = *(_QWORD *)&v16 - 1;
              while (1)
              {
                v23 = v20[1];
                if (v23 == v15)
                {
                  if (*((_DWORD *)v20 + 4) == (_DWORD)v15)
                    goto LABEL_36;
                }
                else if ((v23 & v21) != v18)
                {
                  goto LABEL_35;
                }
                v20 = (uint64_t *)*v20;
                if (!v20)
                  goto LABEL_35;
              }
            }
            do
            {
              v22 = v20[1];
              if (v22 == v15)
              {
                if (*((_DWORD *)v20 + 4) == (_DWORD)v15)
                  goto LABEL_36;
              }
              else
              {
                if (v22 >= *(_QWORD *)&v16)
                  v22 %= *(_QWORD *)&v16;
                if (v22 != v18)
                  break;
              }
              v20 = (uint64_t *)*v20;
            }
            while (v20);
          }
        }
      }
LABEL_35:
      v25 = *((unsigned int *)v12 + 4);
      v20 = sub_2394AA7A4((uint64_t)a4, (unsigned int *)&v25, &v25);
LABEL_36:
      if ((_DWORD)a3 == 2)
      {
        v14 = *((float *)v20 + 5) + (float)(*(float *)(*a2 + 4 * *(unsigned int *)(a1 + 4)) * v12[5]);
      }
      else
      {
        if ((_DWORD)a3 != 1)
          goto LABEL_12;
        v24 = *(float *)(*a2 + 4 * *(unsigned int *)(a1 + 4));
        if (v24 > v12[5])
          v24 = v12[5];
        v14 = *((float *)v20 + 5) + v24;
      }
      *((float *)v20 + 5) = v14;
LABEL_12:
      v12 = *(float **)v12;
      if (!v12)
        return 1;
    }
  }
  v11 = *(_QWORD **)(a1 + 56);
  v10 = *(_QWORD **)(a1 + 64);
  while (v11 != v10)
  {
    if (*v11)
      sub_2395C4A50(*v11, a2, a3, a4, a5);
    v11 += 2;
  }
  return 1;
}

unint64_t sub_2395C4C3C(unint64_t result, unsigned int *a2, unsigned int *a3, uint64_t **a4)
{
  unsigned int *v5;
  unsigned int *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  int8x8_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float **v25;
  float *v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  float **v39;
  float *v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  int8x8_t v54;
  uint8x8_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  BOOL v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t **v71;
  uint64_t *v72;
  float v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t **v84;
  uint64_t *v85;
  float v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;

  if (a3 == a2)
    return result;
  v5 = a3;
  v7 = (unsigned int *)result;
  while (2)
  {
    v8 = v5 - v7;
    if (v8 < 2)
      return result;
    if (v8 == 3)
      return sub_2395C5704(v7, v7 + 1, v5 - 1, a4);
    if (v8 == 2)
    {
      result = sub_2395C554C(a4, *(v5 - 1), *v7);
      if ((_DWORD)result)
      {
        v89 = *v7;
        *v7 = *(v5 - 1);
        *(v5 - 1) = v89;
      }
      return result;
    }
    if ((char *)v5 - (char *)v7 <= 31)
      return (unint64_t)sub_2395C582C(v7, v5, a4);
    v9 = &v7[v8 >> 1];
    v10 = v5 - 1;
    v11 = sub_2395C5704(v7, v9, v5 - 1, a4);
    result = sub_2395C554C(a4, *v7, *v9);
    if ((result & 1) != 0)
    {
      v12 = v5 - 1;
      v13 = v7 + 1;
      if (v7 + 1 >= v10)
        goto LABEL_100;
      goto LABEL_9;
    }
    v12 = v5 - 1;
    while (--v12 != v7)
    {
      result = sub_2395C554C(a4, *v12, *v9);
      if ((_DWORD)result)
      {
        v49 = *v7;
        *v7 = *v12;
        *v12 = v49;
        ++v11;
        v13 = v7 + 1;
        if (v7 + 1 >= v12)
        {
LABEL_100:
          v20 = v13;
LABEL_101:
          if (v20 != v9)
          {
            result = sub_2395C554C(a4, *v9, *v20);
            if ((_DWORD)result)
            {
              v50 = *v20;
              *v20 = *v9;
              *v9 = v50;
              ++v11;
            }
          }
          if (v20 != a2)
          {
            if (v11)
            {
LABEL_106:
              if (v20 <= a2)
              {
                v51 = v20 + 1;
              }
              else
              {
                v5 = v20;
                v51 = v7;
              }
              goto LABEL_214;
            }
            if (v20 <= a2)
            {
              v52 = v20 + 1;
              while (v52 != v5)
              {
                result = sub_2395C554C(a4, *v52, *(v52 - 1));
                ++v52;
                if ((_DWORD)result)
                  goto LABEL_106;
              }
            }
            else
            {
              while (v13 != v20)
              {
                result = sub_2395C554C(a4, *v13, *(v13 - 1));
                ++v13;
                if ((result & 1) != 0)
                  goto LABEL_106;
              }
            }
          }
          return result;
        }
LABEL_9:
        v14 = (int8x8_t)(*a4)[1];
        if (v14)
        {
          v15 = (uint8x8_t)vcnt_s8(v14);
          v15.i16[0] = vaddlv_u8(v15);
          v16 = v15.u32[0];
          v17 = *(_QWORD *)&v14 + 0xFFFFFFFFLL;
          v18 = **a4;
          v19 = *(_QWORD *)&v14 - 1;
          v20 = v13;
          v21 = *v9;
          v22 = (*(_QWORD *)&v14 + 0xFFFFFFFFLL) & v21;
          v23 = *v13;
          if (v15.u32[0] <= 1uLL)
            goto LABEL_11;
          while (1)
          {
LABEL_12:
            v24 = v23;
            if (*(_QWORD *)&v14 <= v23)
              v24 = v23 % *(_QWORD *)&v14;
            while (1)
            {
              v25 = *(float ***)(v18 + 8 * v24);
              if (!v25)
                goto LABEL_216;
              v26 = *v25;
              if (!v26)
                goto LABEL_216;
              if (v16 < 2)
              {
                while (1)
                {
                  v27 = *((_QWORD *)v26 + 1);
                  if (v27 == v23)
                  {
                    if (*((_DWORD *)v26 + 4) == (_DWORD)v23)
                    {
                      v28 = v26[5];
                      v29 = v22;
                      goto LABEL_33;
                    }
                  }
                  else if ((v27 & v19) != v24)
                  {
                    goto LABEL_216;
                  }
                  v26 = *(float **)v26;
                  if (!v26)
                    goto LABEL_216;
                }
              }
              while (1)
              {
                v30 = *((_QWORD *)v26 + 1);
                if (v30 == v23)
                  break;
                if (v30 >= *(_QWORD *)&v14)
                  v30 %= *(_QWORD *)&v14;
                if (v30 != v24)
                  goto LABEL_216;
LABEL_24:
                v26 = *(float **)v26;
                if (!v26)
                  goto LABEL_216;
              }
              if (*((_DWORD *)v26 + 4) != (_DWORD)v23)
                goto LABEL_24;
              v28 = v26[5];
              if (*(_QWORD *)&v14 <= v21)
                v29 = v21 % *(_QWORD *)&v14;
              else
                v29 = v21;
LABEL_33:
              v31 = *(uint64_t ***)(v18 + 8 * v29);
              if (!v31)
                goto LABEL_216;
              v32 = *v31;
              if (!v32)
                goto LABEL_216;
              if (v16 < 2)
              {
                while (1)
                {
                  v33 = v32[1];
                  if (v33 == v21)
                  {
                    if (*((_DWORD *)v32 + 4) == (_DWORD)v21)
                      goto LABEL_41;
                  }
                  else if ((v33 & v19) != v29)
                  {
                    goto LABEL_216;
                  }
                  v32 = (uint64_t *)*v32;
                  if (!v32)
                    goto LABEL_216;
                }
              }
              while (2)
              {
                v35 = v32[1];
                if (v35 != v21)
                {
                  if (v35 >= *(_QWORD *)&v14)
                    v35 %= *(_QWORD *)&v14;
                  if (v35 != v29)
                    goto LABEL_216;
LABEL_45:
                  v32 = (uint64_t *)*v32;
                  if (!v32)
                    goto LABEL_216;
                  continue;
                }
                break;
              }
              if (*((_DWORD *)v32 + 4) != (_DWORD)v21)
                goto LABEL_45;
LABEL_41:
              if (v28 > *((float *)v32 + 5))
                break;
              while (2)
              {
                v37 = *--v12;
                v36 = v37;
                if (v16 > 1)
                {
                  v38 = v36;
                  if (*(_QWORD *)&v14 <= v36)
                    v38 = v36 % *(_QWORD *)&v14;
                }
                else
                {
                  v38 = v17 & v36;
                }
                v39 = *(float ***)(v18 + 8 * v38);
                if (!v39)
                  goto LABEL_216;
                v40 = *v39;
                if (!v40)
                  goto LABEL_216;
                if (v16 < 2)
                {
                  while (1)
                  {
                    v41 = *((_QWORD *)v40 + 1);
                    if (v41 == v36)
                    {
                      if (*((_DWORD *)v40 + 4) == (_DWORD)v36)
                      {
                        v42 = v40[5];
                        v43 = v22;
                        goto LABEL_75;
                      }
                    }
                    else if ((v41 & v19) != v38)
                    {
                      goto LABEL_216;
                    }
                    v40 = *(float **)v40;
                    if (!v40)
                      goto LABEL_216;
                  }
                }
                while (1)
                {
                  v44 = *((_QWORD *)v40 + 1);
                  if (v44 == v36)
                    break;
                  if (v44 >= *(_QWORD *)&v14)
                    v44 %= *(_QWORD *)&v14;
                  if (v44 != v38)
                    goto LABEL_216;
LABEL_66:
                  v40 = *(float **)v40;
                  if (!v40)
                    goto LABEL_216;
                }
                if (*((_DWORD *)v40 + 4) != (_DWORD)v36)
                  goto LABEL_66;
                v42 = v40[5];
                if (*(_QWORD *)&v14 <= v21)
                  v43 = v21 % *(_QWORD *)&v14;
                else
                  v43 = v21;
LABEL_75:
                v45 = *(unint64_t **)(v18 + 8 * v43);
                if (!v45)
                  goto LABEL_216;
                result = *v45;
                if (!result)
                  goto LABEL_216;
                if (v16 < 2)
                {
                  while (1)
                  {
                    v46 = *(_QWORD *)(result + 8);
                    if (v46 == v21)
                    {
                      if (*(_DWORD *)(result + 16) == (_DWORD)v21)
                        goto LABEL_51;
                    }
                    else if ((v46 & v19) != v43)
                    {
                      goto LABEL_216;
                    }
                    result = *(_QWORD *)result;
                    if (!result)
                      goto LABEL_216;
                  }
                }
                while (2)
                {
                  v47 = *(_QWORD *)(result + 8);
                  if (v47 != v21)
                  {
                    if (v47 >= *(_QWORD *)&v14)
                      v47 %= *(_QWORD *)&v14;
                    if (v47 != v43)
                      goto LABEL_216;
LABEL_85:
                    result = *(_QWORD *)result;
                    if (!result)
                      goto LABEL_216;
                    continue;
                  }
                  break;
                }
                if (*(_DWORD *)(result + 16) != (_DWORD)v21)
                  goto LABEL_85;
LABEL_51:
                if (v42 <= *(float *)(result + 20))
                  continue;
                break;
              }
              if (v20 >= v12)
                goto LABEL_101;
              v48 = v9 == v20;
              *v20++ = v36;
              *v12 = v23;
              ++v11;
              if (v48)
                v9 = v12;
              v21 = *v9;
              v22 = v17 & v21;
              v23 = *v20;
              if (v16 > 1)
                goto LABEL_12;
LABEL_11:
              v24 = v17 & v23;
            }
            v34 = v20[1];
            ++v20;
            v23 = v34;
            if (v16 <= 1)
              goto LABEL_11;
          }
        }
LABEL_216:
        sub_23941D898("unordered_map::at: key not found");
      }
    }
    v51 = v7 + 1;
    result = sub_2395C554C(a4, *v7, *v10);
    if ((result & 1) == 0)
    {
      if (v51 == v10)
        return result;
      while (1)
      {
        result = sub_2395C554C(a4, *v7, *v51);
        if ((_DWORD)result)
          break;
        if (++v51 == v10)
          return result;
      }
      v53 = *v51;
      *v51++ = *v10;
      *v10 = v53;
    }
    if (v51 == v10)
      return result;
    v54 = (int8x8_t)(*a4)[1];
    if (!*(_QWORD *)&v54)
      goto LABEL_216;
    v55 = (uint8x8_t)vcnt_s8(v54);
    v55.i16[0] = vaddlv_u8(v55);
    v56 = v55.u32[0];
    v57 = *(_QWORD *)&v54 + 0xFFFFFFFFLL;
    v58 = **a4;
    v59 = *(_QWORD *)&v54 - 1;
    v60 = v55.u32[0] >= 2uLL ? 0xFFFFFFFFLL : *(_QWORD *)&v54 + 0xFFFFFFFFLL;
    while (2)
    {
      v61 = *v7;
      v63 = v56 < 2 || *(_QWORD *)&v54 > v61;
      v64 = *v51;
      v65 = v60 & v61;
      if (!v63)
        goto LABEL_135;
      while (2)
      {
        v66 = *(uint64_t ***)(v58 + 8 * v65);
        if (!v66)
          goto LABEL_216;
        v67 = *v66;
        if (!v67)
          goto LABEL_216;
        if (v56 < 2)
        {
          while (1)
          {
            v68 = v67[1];
            if (v68 == v61)
            {
              if (*((_DWORD *)v67 + 4) == (_DWORD)v61)
                goto LABEL_144;
            }
            else if ((v68 & v59) != v65)
            {
              goto LABEL_216;
            }
            v67 = (uint64_t *)*v67;
            if (!v67)
              goto LABEL_216;
          }
        }
        while (1)
        {
          v70 = v67[1];
          if (v70 == v61)
            break;
          if (v70 >= *(_QWORD *)&v54)
            v70 %= *(_QWORD *)&v54;
          if (v70 != v65)
            goto LABEL_216;
LABEL_147:
          v67 = (uint64_t *)*v67;
          if (!v67)
            goto LABEL_216;
        }
        if (*((_DWORD *)v67 + 4) != (_DWORD)v61)
          goto LABEL_147;
LABEL_144:
        if (v56 > 1)
        {
          v69 = v64;
          if (*(_QWORD *)&v54 <= v64)
            v69 = v64 % *(_QWORD *)&v54;
        }
        else
        {
          v69 = v57 & v64;
        }
        v71 = *(uint64_t ***)(v58 + 8 * v69);
        if (!v71)
          goto LABEL_216;
        v72 = *v71;
        if (!v72)
          goto LABEL_216;
        v73 = *((float *)v67 + 5);
        if (v56 < 2)
        {
          while (1)
          {
            v74 = v72[1];
            if (v74 == v64)
            {
              if (*((_DWORD *)v72 + 4) == (_DWORD)v64)
                goto LABEL_163;
            }
            else if ((v74 & v59) != v69)
            {
              goto LABEL_216;
            }
            v72 = (uint64_t *)*v72;
            if (!v72)
              goto LABEL_216;
          }
        }
        while (2)
        {
          v76 = v72[1];
          if (v76 != v64)
          {
            if (v76 >= *(_QWORD *)&v54)
              v76 %= *(_QWORD *)&v54;
            if (v76 != v69)
              goto LABEL_216;
            goto LABEL_167;
          }
          if (*((_DWORD *)v72 + 4) != (_DWORD)v64)
          {
LABEL_167:
            v72 = (uint64_t *)*v72;
            if (!v72)
              goto LABEL_216;
            continue;
          }
          break;
        }
LABEL_163:
        if (v73 <= *((float *)v72 + 5))
        {
          v75 = v51[1];
          ++v51;
          v64 = v75;
          v65 = v60 & v61;
          if (v63)
            continue;
LABEL_135:
          v65 = v61 % *(_QWORD *)&v54;
          continue;
        }
        break;
      }
      while (2)
      {
        v77 = v60 & v61;
        if (!v63)
          v77 = v61 % *(_QWORD *)&v54;
        v78 = *(uint64_t ***)(v58 + 8 * v77);
        if (!v78)
          goto LABEL_216;
        v79 = *v78;
        if (!*v78)
          goto LABEL_216;
        v80 = *--v10;
        result = v80;
        if (v56 < 2)
        {
          while (1)
          {
            v81 = v79[1];
            if (v81 == v61)
            {
              if (*((_DWORD *)v79 + 4) == (_DWORD)v61)
                goto LABEL_184;
            }
            else if ((v81 & v59) != v77)
            {
              goto LABEL_216;
            }
            v79 = (uint64_t *)*v79;
            if (!v79)
              goto LABEL_216;
          }
        }
        while (2)
        {
          v83 = v79[1];
          if (v83 != v61)
          {
            if (v83 >= *(_QWORD *)&v54)
              v83 %= *(_QWORD *)&v54;
            if (v83 != v77)
              goto LABEL_216;
            goto LABEL_187;
          }
          if (*((_DWORD *)v79 + 4) != (_DWORD)v61)
          {
LABEL_187:
            v79 = (uint64_t *)*v79;
            if (!v79)
              goto LABEL_216;
            continue;
          }
          break;
        }
LABEL_184:
        if (v56 > 1)
        {
          v82 = result;
          if (*(_QWORD *)&v54 <= result)
            v82 = result % *(_QWORD *)&v54;
        }
        else
        {
          v82 = v57 & result;
        }
        v84 = *(uint64_t ***)(v58 + 8 * v82);
        if (!v84)
          goto LABEL_216;
        v85 = *v84;
        if (!v85)
          goto LABEL_216;
        v86 = *((float *)v79 + 5);
        if (v56 < 2)
        {
          while (1)
          {
            v87 = v85[1];
            if (v87 == result)
            {
              if (*((_DWORD *)v85 + 4) == (_DWORD)result)
                goto LABEL_173;
            }
            else if ((v87 & v59) != v82)
            {
              goto LABEL_216;
            }
            v85 = (uint64_t *)*v85;
            if (!v85)
              goto LABEL_216;
          }
        }
        while (2)
        {
          v88 = v85[1];
          if (v88 != result)
          {
            if (v88 >= *(_QWORD *)&v54)
              v88 %= *(_QWORD *)&v54;
            if (v88 != v82)
              goto LABEL_216;
LABEL_205:
            v85 = (uint64_t *)*v85;
            if (!v85)
              goto LABEL_216;
            continue;
          }
          break;
        }
        if (*((_DWORD *)v85 + 4) != (_DWORD)result)
          goto LABEL_205;
LABEL_173:
        if (v86 > *((float *)v85 + 5))
          continue;
        break;
      }
      if (v51 < v10)
      {
        *v51++ = result;
        *v10 = v64;
        continue;
      }
      break;
    }
    if (v51 <= a2)
    {
LABEL_214:
      v7 = v51;
      if (v5 == a2)
        return result;
      continue;
    }
    return result;
  }
}

BOOL sub_2395C554C(uint64_t **a1, unsigned int a2, unsigned int a3)
{
  uint64_t *v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float **v14;
  float *v15;
  uint64_t v16;
  unint64_t v18;

  v3 = *a1;
  v4 = (*a1)[1];
  if (!v4)
    goto LABEL_41;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a2;
    if (v4 <= a2)
      v6 = a2 % v4;
  }
  else
  {
    v6 = ((_DWORD)v4 - 1) & a2;
  }
  v7 = *v3;
  v8 = *(uint64_t ***)(*v3 + 8 * v6);
  if (!v8 || (v9 = *v8) == 0)
LABEL_41:
    sub_23941D898("unordered_map::at: key not found");
  v10 = v4 - 1;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == a2)
      {
        if (*((_DWORD *)v9 + 4) == a2)
          goto LABEL_14;
      }
      else if ((v11 & v10) != v6)
      {
        goto LABEL_41;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_41;
    }
  }
  while (1)
  {
    v13 = v9[1];
    if (v13 == a2)
      break;
    if (v13 >= v4)
      v13 %= v4;
    if (v13 != v6)
      goto LABEL_41;
LABEL_17:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_41;
  }
  if (*((_DWORD *)v9 + 4) != a2)
    goto LABEL_17;
LABEL_14:
  if (v5.u32[0] > 1uLL)
  {
    v12 = a3;
    if (v4 <= a3)
      v12 = a3 % v4;
  }
  else
  {
    v12 = ((_DWORD)v4 - 1) & a3;
  }
  v14 = *(float ***)(v7 + 8 * v12);
  if (!v14)
    goto LABEL_41;
  v15 = *v14;
  if (!v15)
    goto LABEL_41;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = *((_QWORD *)v15 + 1);
      if (v16 == a3)
      {
        if (*((_DWORD *)v15 + 4) == a3)
          return *((float *)v9 + 5) > v15[5];
      }
      else if ((v16 & v10) != v12)
      {
        goto LABEL_41;
      }
      v15 = *(float **)v15;
      if (!v15)
        goto LABEL_41;
    }
  }
  while (1)
  {
    v18 = *((_QWORD *)v15 + 1);
    if (v18 == a3)
      break;
    if (v18 >= v4)
      v18 %= v4;
    if (v18 != v12)
      goto LABEL_41;
LABEL_35:
    v15 = *(float **)v15;
    if (!v15)
      goto LABEL_41;
  }
  if (*((_DWORD *)v15 + 4) != a3)
    goto LABEL_35;
  return *((float *)v9 + 5) > v15[5];
}

uint64_t sub_2395C5704(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t **a4)
{
  BOOL v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v8 = sub_2395C554C(a4, *a2, *a1);
  result = sub_2395C554C(a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      return 1;
    }
    *a1 = *a2;
    *a2 = v10;
    if (sub_2395C554C(a4, *a3, v10))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      return 2;
    }
    return 1;
  }
  if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (sub_2395C554C(a4, *a2, *a1))
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
      return 2;
    }
    return 1;
  }
  return result;
}

unsigned int *sub_2395C582C(unsigned int *result, unsigned int *a2, uint64_t **a3)
{
  uint64_t *v3;
  unsigned int *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  float v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;

  if (a2 - 1 == result)
    return result;
  v3 = *a3;
  while (2)
  {
    v4 = result++;
    if (v4 == a2 || result == a2)
      goto LABEL_3;
    v5 = (int8x8_t)v3[1];
    if (!*(_QWORD *)&v5)
LABEL_53:
      sub_23941D898("unordered_map::at: key not found");
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    v7 = v6.u32[0];
    v8 = *(_QWORD *)&v5 + 0xFFFFFFFFLL;
    v9 = *(_QWORD *)&v5 - 1;
    v10 = *v3;
    v11 = result;
    v12 = v4;
    while (2)
    {
      v13 = *v11;
      if (v7 > 1)
      {
        v14 = *v11;
        if (*(_QWORD *)&v5 <= v13)
          v14 = v13 % *(_QWORD *)&v5;
      }
      else
      {
        v14 = v8 & v13;
      }
      v15 = *(uint64_t ***)(v10 + 8 * v14);
      if (!v15)
        goto LABEL_53;
      v16 = *v15;
      if (!*v15)
        goto LABEL_53;
      v17 = *v12;
      if (v7 < 2)
      {
        while (1)
        {
          v18 = v16[1];
          if (v18 == v13)
          {
            if (*((_DWORD *)v16 + 4) == (_DWORD)v13)
              goto LABEL_23;
          }
          else if ((v18 & v9) != v14)
          {
            goto LABEL_53;
          }
          v16 = (uint64_t *)*v16;
          if (!v16)
            goto LABEL_53;
        }
      }
      while (1)
      {
        v20 = v16[1];
        if (v20 == v13)
          break;
        if (v20 >= *(_QWORD *)&v5)
          v20 %= *(_QWORD *)&v5;
        if (v20 != v14)
          goto LABEL_53;
LABEL_26:
        v16 = (uint64_t *)*v16;
        if (!v16)
          goto LABEL_53;
      }
      if (*((_DWORD *)v16 + 4) != (_DWORD)v13)
        goto LABEL_26;
LABEL_23:
      if (v7 > 1)
      {
        v19 = *v12;
        if (*(_QWORD *)&v5 <= v17)
          v19 = v17 % *(_QWORD *)&v5;
      }
      else
      {
        v19 = v8 & v17;
      }
      v21 = *(uint64_t ***)(v10 + 8 * v19);
      if (!v21)
        goto LABEL_53;
      v22 = *v21;
      if (!v22)
        goto LABEL_53;
      v23 = *((float *)v16 + 5);
      if (v7 < 2)
      {
        while (1)
        {
          v24 = v22[1];
          if (v24 == v17)
          {
            if (*((_DWORD *)v22 + 4) == (_DWORD)v17)
              goto LABEL_8;
          }
          else if ((v24 & v9) != v19)
          {
            goto LABEL_53;
          }
          v22 = (uint64_t *)*v22;
          if (!v22)
            goto LABEL_53;
        }
      }
      while (2)
      {
        v25 = v22[1];
        if (v25 != v17)
        {
          if (v25 >= *(_QWORD *)&v5)
            v25 %= *(_QWORD *)&v5;
          if (v25 != v19)
            goto LABEL_53;
LABEL_44:
          v22 = (uint64_t *)*v22;
          if (!v22)
            goto LABEL_53;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v22 + 4) != (_DWORD)v17)
        goto LABEL_44;
LABEL_8:
      if (v23 > *((float *)v22 + 5))
        v12 = v11;
      if (++v11 != a2)
        continue;
      break;
    }
    if (v12 != v4)
    {
      v26 = *v4;
      *v4 = *v12;
      *v12 = v26;
    }
LABEL_3:
    if (result != a2 - 1)
      continue;
    return result;
  }
}

int32x2_t *sub_2395C5A54(int32x2_t *result, int32x2_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  int32x2_t *v8;
  unsigned int *v9;
  int32x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  __int32 *v19;
  __int32 v20;
  _DWORD *v21;
  char v22;
  BOOL v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  __int32 v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  int32x2_t *v35;

  v8 = result;
LABEL_2:
  v9 = (unsigned int *)&a2[-1] + 1;
  v33 = (unsigned int *)&a2[-2] + 1;
  v34 = (unsigned int *)&a2[-1];
  v10 = v8;
  v35 = a2;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = ((char *)a2 - (char *)v10) >> 2;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (int32x2_t *)sub_2395C554C(a3, a2[-1].u32[1], v10->i32[0]);
        if ((_DWORD)result)
        {
          v24 = v10->i32[0];
          v10->i32[0] = a2[-1].i32[1];
          a2[-1].i32[1] = v24;
        }
        return result;
      case 3uLL:
        return (int32x2_t *)sub_2395C5704((unsigned int *)v10, (unsigned int *)v10 + 1, v9, a3);
      case 4uLL:
        v25 = (unsigned int *)&v10[1];
        sub_2395C5704((unsigned int *)v10, (unsigned int *)v10 + 1, (unsigned int *)&v10[1], a3);
        result = (int32x2_t *)sub_2395C554C(a3, a2[-1].u32[1], v10[1].u32[0]);
        if ((_DWORD)result)
        {
          v26 = *v25;
          *v25 = a2[-1].u32[1];
          a2[-1].i32[1] = v26;
          result = (int32x2_t *)sub_2395C554C(a3, *v25, v10->u32[1]);
          if ((_DWORD)result)
          {
            v28 = v10->i32[1];
            v27 = v10[1].u32[0];
            v29 = v10->i32[0];
            v10->i32[1] = v27;
            v10[1].i32[0] = v28;
            result = (int32x2_t *)sub_2395C554C(a3, v27, v29);
            if ((_DWORD)result)
              *v10 = vrev64_s32(*v10);
          }
        }
        return result;
      case 5uLL:
        return (int32x2_t *)sub_2395C6D0C((unsigned int *)v10, (unsigned int *)v10 + 1, (unsigned int *)&v10[1], (unsigned int *)&v10[1] + 1, v9, a3);
      default:
        if (v13 <= 95)
        {
          if ((a5 & 1) != 0)
            return (int32x2_t *)sub_2395C5E28((unsigned int *)v10, (unsigned int *)a2, a3);
          else
            return (int32x2_t *)sub_2395C6070((unsigned int *)v10, (unsigned int *)a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (unsigned int *)v10 + (v14 >> 1);
          if ((unint64_t)v13 < 0x201)
          {
            sub_2395C5704(v16, (unsigned int *)v10, v9, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_2395C5704((unsigned int *)v10, v16, v9, a3);
            v17 = a5;
            v18 = v9;
            v19 = (__int32 *)v10 + v15;
            sub_2395C5704((unsigned int *)v10 + 1, (unsigned int *)v19 - 1, v34, a3);
            sub_2395C5704((unsigned int *)&v10[1], (unsigned int *)v10 + v15 + 1, v33, a3);
            sub_2395C5704((unsigned int *)v19 - 1, v16, (unsigned int *)v10 + v15 + 1, a3);
            v20 = v10->i32[0];
            v10->i32[0] = *v19;
            *v19 = v20;
            v9 = v18;
            a5 = v17;
            a2 = v35;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (!sub_2395C554C(a3, v10[-1].u32[1], v10->i32[0]))
          {
            result = (int32x2_t *)sub_2395C62C0((unsigned int *)v10, (unsigned int *)a2, a3);
            v10 = result;
            goto LABEL_17;
          }
LABEL_12:
          v21 = sub_2395C66B8(v10, a2, a3);
          if ((v22 & 1) == 0)
            goto LABEL_15;
          v23 = sub_2395C6ACC(v10, (int32x2_t *)v21, a3);
          v10 = (int32x2_t *)(v21 + 1);
          result = (int32x2_t *)sub_2395C6ACC((int32x2_t *)(v21 + 1), a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v23)
              continue;
LABEL_15:
            result = (int32x2_t *)sub_2395C5A54(v8, v21, a3, -v12, a5 & 1);
            v10 = (int32x2_t *)(v21 + 1);
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = (int32x2_t *)v21;
          if (v23)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
        {
          v30 = (v14 - 2) >> 1;
          v31 = v30 + 1;
          v32 = (unsigned int *)v10 + v30;
          do
          {
            sub_2395C6E50((_BOOL8)v10, a3, ((char *)a2 - (char *)v10) >> 2, v32--);
            --v31;
          }
          while (v31);
          return (int32x2_t *)sub_2395C6F78((uint64_t)v10, (unsigned int *)a2, a3);
        }
        return result;
    }
  }
}

unsigned int *sub_2395C5E28(unsigned int *result, unsigned int *a2, uint64_t **a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  int8x8_t v13;
  uint8x8_t v14;
  unint64_t v15;
  float **v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v7 = result;
      do
      {
        v9 = v5;
        result = (unsigned int *)sub_2395C554C(a3, v7[1], *v7);
        if (!(_DWORD)result)
          goto LABEL_6;
        v10 = *v9;
        v11 = *a3;
        v8 = v9;
        LODWORD(v12) = *v7;
LABEL_10:
        *v8 = v12;
        if (v7 != v4)
        {
          v13 = (int8x8_t)v11[1];
          if (!*(_QWORD *)&v13)
            goto LABEL_52;
          v8 = v7;
          v14 = (uint8x8_t)vcnt_s8(v13);
          v14.i16[0] = vaddlv_u8(v14);
          if (v14.u32[0] > 1uLL)
          {
            v15 = v10;
            if (*(_QWORD *)&v13 <= v10)
              v15 = v10 % *(_QWORD *)&v13;
          }
          else
          {
            v15 = (v13.i32[0] - 1) & v10;
          }
          v16 = *(float ***)(*v11 + 8 * v15);
          if (!v16 || (v17 = *v16) == 0)
LABEL_52:
            sub_23941D898("unordered_map::at: key not found");
          --v7;
          v12 = *(v8 - 1);
          v18 = *(_QWORD *)&v13 - 1;
          if (v14.u32[0] < 2uLL)
          {
            while (1)
            {
              v19 = *((_QWORD *)v17 + 1);
              if (v19 == v10)
              {
                result = (unsigned int *)*((unsigned int *)v17 + 4);
                if ((_DWORD)result == (_DWORD)v10)
                  goto LABEL_24;
              }
              else if ((v19 & v18) != v15)
              {
                goto LABEL_52;
              }
              v17 = *(float **)v17;
              if (!v17)
                goto LABEL_52;
            }
          }
          while (1)
          {
            v21 = *((_QWORD *)v17 + 1);
            if (v21 == v10)
            {
              result = (unsigned int *)*((unsigned int *)v17 + 4);
              if ((_DWORD)result == (_DWORD)v10)
              {
LABEL_24:
                if (v14.u32[0] > 1uLL)
                {
                  v20 = *(v8 - 1);
                  if (*(_QWORD *)&v13 <= v12)
                    v20 = v12 % *(_QWORD *)&v13;
                }
                else
                {
                  v20 = (v13.i32[0] - 1) & v12;
                }
                v22 = *(uint64_t ***)(*v11 + 8 * v20);
                if (!v22)
                  goto LABEL_52;
                v23 = *v22;
                if (!v23)
                  goto LABEL_52;
                if (v14.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v24 = v23[1];
                    if (v24 == v12)
                    {
                      if (*((_DWORD *)v23 + 4) == (_DWORD)v12)
                        goto LABEL_9;
                    }
                    else if ((v24 & v18) != v20)
                    {
                      goto LABEL_52;
                    }
                    v23 = (uint64_t *)*v23;
                    if (!v23)
                      goto LABEL_52;
                  }
                }
                while (2)
                {
                  v25 = v23[1];
                  if (v25 != v12)
                  {
                    if (v25 >= *(_QWORD *)&v13)
                      v25 %= *(_QWORD *)&v13;
                    if (v25 != v20)
                      goto LABEL_52;
LABEL_45:
                    v23 = (uint64_t *)*v23;
                    if (!v23)
                      goto LABEL_52;
                    continue;
                  }
                  break;
                }
                if (*((_DWORD *)v23 + 4) != (_DWORD)v12)
                  goto LABEL_45;
LABEL_9:
                if (v17[5] <= *((float *)v23 + 5))
                  goto LABEL_5;
                goto LABEL_10;
              }
            }
            else
            {
              if (v21 >= *(_QWORD *)&v13)
                v21 %= *(_QWORD *)&v13;
              if (v21 != v15)
                goto LABEL_52;
            }
            v17 = *(float **)v17;
            if (!v17)
              goto LABEL_52;
          }
        }
        v8 = v4;
LABEL_5:
        *v8 = v10;
LABEL_6:
        v5 = v9 + 1;
        v7 = v9;
      }
      while (v9 + 1 != a2);
    }
  }
  return result;
}

unsigned int *sub_2395C6070(unsigned int *result, unsigned int *a2, uint64_t **a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float **v25;
  float *v26;
  float v27;
  uint64_t v28;
  unint64_t v29;

  if (result == a2)
    return result;
  v4 = result;
  v5 = result + 1;
  if (result + 1 == a2)
    return result;
  while (2)
  {
    v7 = v5;
    result = (unsigned int *)sub_2395C554C(a3, v4[1], *v4);
    if (!(_DWORD)result)
      goto LABEL_5;
    v8 = (int8x8_t)(*a3)[1];
    if (!*(_QWORD *)&v8)
    {
      *v7 = *v4;
      sub_23941D898("unordered_map::at: key not found");
    }
    v9 = *v7;
    v10 = (uint8x8_t)vcnt_s8(v8);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    v12 = *(_QWORD *)&v8 - 1;
    v13 = v10.u32[0] < 2uLL;
    if (v10.u32[0] >= 2uLL)
      v14 = 0xFFFFFFFFLL;
    else
      v14 = *(_QWORD *)&v8 + 0xFFFFFFFFLL;
    v15 = **a3;
    LODWORD(v16) = *v4;
    if (*(_QWORD *)&v8 > v9)
      v13 = 1;
    v17 = v14 & v9;
    v18 = v7;
    while (2)
    {
      *v18 = v16;
      v18 = v4;
      v19 = v17;
      if (!v13)
        v19 = v9 % *(_QWORD *)&v8;
      v20 = *(uint64_t ***)(v15 + 8 * v19);
      if (!v20 || (v21 = *v20) == 0)
LABEL_53:
        sub_23941D898("unordered_map::at: key not found");
      --v4;
      v16 = *(v18 - 1);
      if (v11 < 2)
      {
        while (1)
        {
          v22 = v21[1];
          if (v22 == v9)
          {
            if (*((_DWORD *)v21 + 4) == (_DWORD)v9)
              goto LABEL_25;
          }
          else if ((v22 & v12) != v19)
          {
            goto LABEL_53;
          }
          v21 = (uint64_t *)*v21;
          if (!v21)
            goto LABEL_53;
        }
      }
      while (1)
      {
        v24 = v21[1];
        if (v24 == v9)
          break;
        if (v24 >= *(_QWORD *)&v8)
          v24 %= *(_QWORD *)&v8;
        if (v24 != v19)
          goto LABEL_53;
LABEL_28:
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_53;
      }
      if (*((_DWORD *)v21 + 4) != (_DWORD)v9)
        goto LABEL_28;
LABEL_25:
      if (v11 > 1)
      {
        v23 = *(v18 - 1);
        if (*(_QWORD *)&v8 <= v16)
          v23 = v16 % *(_QWORD *)&v8;
      }
      else
      {
        v23 = (*(_QWORD *)&v8 + 0xFFFFFFFFLL) & v16;
      }
      v25 = *(float ***)(v15 + 8 * v23);
      if (!v25)
        goto LABEL_53;
      v26 = *v25;
      if (!v26)
        goto LABEL_53;
      v27 = *((float *)v21 + 5);
      if (v11 < 2)
      {
        while (1)
        {
          v28 = *((_QWORD *)v26 + 1);
          if (v28 == v16)
          {
            result = (unsigned int *)*((unsigned int *)v26 + 4);
            if ((_DWORD)result == (_DWORD)v16)
              goto LABEL_14;
          }
          else if ((v28 & v12) != v23)
          {
            goto LABEL_53;
          }
          v26 = *(float **)v26;
          if (!v26)
            goto LABEL_53;
        }
      }
      while (1)
      {
        v29 = *((_QWORD *)v26 + 1);
        if (v29 == v16)
          break;
        if (v29 >= *(_QWORD *)&v8)
          v29 %= *(_QWORD *)&v8;
        if (v29 != v23)
          goto LABEL_53;
LABEL_46:
        v26 = *(float **)v26;
        if (!v26)
          goto LABEL_53;
      }
      result = (unsigned int *)*((unsigned int *)v26 + 4);
      if ((_DWORD)result != (_DWORD)v16)
        goto LABEL_46;
LABEL_14:
      if (v27 > v26[5])
        continue;
      break;
    }
    *v18 = v9;
LABEL_5:
    v5 = v7 + 1;
    v4 = v7;
    if (v7 + 1 != a2)
      continue;
    return result;
  }
}

unsigned int *sub_2395C62C0(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  unsigned int *v4;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  float v45;
  uint64_t v46;
  unint64_t v47;

  v4 = a2;
  v6 = *a1;
  if (sub_2395C554C(a3, v6, *(a2 - 1)))
  {
    v7 = a1;
    do
    {
      v8 = v7[1];
      ++v7;
    }
    while (!sub_2395C554C(a3, v6, v8));
  }
  else
  {
    v9 = a1 + 1;
    do
    {
      v7 = v9;
      if (v9 >= v4)
        break;
      ++v9;
    }
    while (!sub_2395C554C(a3, v6, *v7));
  }
  if (v7 < v4)
  {
    do
      v10 = *--v4;
    while (sub_2395C554C(a3, v6, v10));
  }
  if (v7 >= v4)
    goto LABEL_95;
  v11 = *a3;
  v12 = (int8x8_t)(*a3)[1];
  v13 = (uint8x8_t)vcnt_s8(v12);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  v15 = *(_QWORD *)&v12 - 1;
  v16 = v13.u32[0] < 2uLL;
  v17 = 0xFFFFFFFFLL;
  v18 = *(_QWORD *)&v12 + 0xFFFFFFFFLL;
  if (v13.u32[0] < 2uLL)
    v17 = *(_QWORD *)&v12 + 0xFFFFFFFFLL;
  if (*(_QWORD *)&v12 > v6)
    v16 = 1;
  v19 = v17 & v6;
  while (2)
  {
    v20 = *v7;
    *v7 = *v4;
    *v4 = v20;
    if (!*(_QWORD *)&v12)
LABEL_98:
      sub_23941D898("unordered_map::at: key not found");
    v21 = *v11;
    while (2)
    {
      v22 = v19;
      if (!v16)
        v22 = v6 % *(_QWORD *)&v12;
      v23 = *(uint64_t ***)(v21 + 8 * v22);
      if (!v23)
        goto LABEL_98;
      v24 = *v23;
      if (!*v23)
        goto LABEL_98;
      v26 = v7[1];
      ++v7;
      v25 = v26;
      if (v14 < 2)
      {
        while (1)
        {
          v27 = v24[1];
          if (v27 == v6)
          {
            if (*((_DWORD *)v24 + 4) == (_DWORD)v6)
              goto LABEL_30;
          }
          else if ((v27 & v15) != v22)
          {
            goto LABEL_98;
          }
          v24 = (uint64_t *)*v24;
          if (!v24)
            goto LABEL_98;
        }
      }
      while (1)
      {
        v29 = v24[1];
        if (v29 == v6)
          break;
        if (v29 >= *(_QWORD *)&v12)
          v29 %= *(_QWORD *)&v12;
        if (v29 != v22)
          goto LABEL_98;
LABEL_33:
        v24 = (uint64_t *)*v24;
        if (!v24)
          goto LABEL_98;
      }
      if (*((_DWORD *)v24 + 4) != (_DWORD)v6)
        goto LABEL_33;
LABEL_30:
      if (v14 > 1)
      {
        v28 = v25;
        if (*(_QWORD *)&v12 <= v25)
          v28 = v25 % *(_QWORD *)&v12;
      }
      else
      {
        v28 = v18 & v25;
      }
      v30 = *(uint64_t ***)(v21 + 8 * v28);
      if (!v30)
        goto LABEL_98;
      v31 = *v30;
      if (!v31)
        goto LABEL_98;
      v32 = *((float *)v24 + 5);
      if (v14 < 2)
      {
        while (1)
        {
          v33 = v31[1];
          if (v33 == v25)
          {
            if (*((_DWORD *)v31 + 4) == (_DWORD)v25)
              goto LABEL_19;
          }
          else if ((v33 & v15) != v28)
          {
            goto LABEL_98;
          }
          v31 = (uint64_t *)*v31;
          if (!v31)
            goto LABEL_98;
        }
      }
      while (2)
      {
        v34 = v31[1];
        if (v34 != v25)
        {
          if (v34 >= *(_QWORD *)&v12)
            v34 %= *(_QWORD *)&v12;
          if (v34 != v28)
            goto LABEL_98;
LABEL_51:
          v31 = (uint64_t *)*v31;
          if (!v31)
            goto LABEL_98;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v31 + 4) != (_DWORD)v25)
        goto LABEL_51;
LABEL_19:
      if (v32 <= *((float *)v31 + 5))
        continue;
      break;
    }
    do
    {
      v35 = v19;
      if (!v16)
        v35 = v6 % *(_QWORD *)&v12;
      v36 = *(uint64_t ***)(v21 + 8 * v35);
      if (!v36)
        goto LABEL_98;
      v37 = *v36;
      if (!*v36)
        goto LABEL_98;
      v39 = *--v4;
      v38 = v39;
      if (v14 < 2)
      {
        while (1)
        {
          v40 = v37[1];
          if (v40 == v6)
          {
            if (*((_DWORD *)v37 + 4) == (_DWORD)v6)
              goto LABEL_68;
          }
          else if ((v40 & v15) != v35)
          {
            goto LABEL_98;
          }
          v37 = (uint64_t *)*v37;
          if (!v37)
            goto LABEL_98;
        }
      }
      while (1)
      {
        v42 = v37[1];
        if (v42 == v6)
          break;
        if (v42 >= *(_QWORD *)&v12)
          v42 %= *(_QWORD *)&v12;
        if (v42 != v35)
          goto LABEL_98;
LABEL_71:
        v37 = (uint64_t *)*v37;
        if (!v37)
          goto LABEL_98;
      }
      if (*((_DWORD *)v37 + 4) != (_DWORD)v6)
        goto LABEL_71;
LABEL_68:
      if (v14 > 1)
      {
        v41 = v38;
        if (*(_QWORD *)&v12 <= v38)
          v41 = v38 % *(_QWORD *)&v12;
      }
      else
      {
        v41 = v18 & v38;
      }
      v43 = *(uint64_t ***)(v21 + 8 * v41);
      if (!v43)
        goto LABEL_98;
      v44 = *v43;
      if (!v44)
        goto LABEL_98;
      v45 = *((float *)v37 + 5);
      if (v14 < 2)
      {
        while (1)
        {
          v46 = v44[1];
          if (v46 == v38)
          {
            if (*((_DWORD *)v44 + 4) == (_DWORD)v38)
              goto LABEL_57;
          }
          else if ((v46 & v15) != v41)
          {
            goto LABEL_98;
          }
          v44 = (uint64_t *)*v44;
          if (!v44)
            goto LABEL_98;
        }
      }
      while (2)
      {
        v47 = v44[1];
        if (v47 != v38)
        {
          if (v47 >= *(_QWORD *)&v12)
            v47 %= *(_QWORD *)&v12;
          if (v47 != v41)
            goto LABEL_98;
LABEL_89:
          v44 = (uint64_t *)*v44;
          if (!v44)
            goto LABEL_98;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v44 + 4) != (_DWORD)v38)
        goto LABEL_89;
LABEL_57:
      ;
    }
    while (v45 > *((float *)v44 + 5));
    if (v7 < v4)
      continue;
    break;
  }
LABEL_95:
  if (v7 - 1 != a1)
    *a1 = *(v7 - 1);
  *(v7 - 1) = v6;
  return v7;
}

_DWORD *sub_2395C66B8(_DWORD *a1, _DWORD *a2, uint64_t **a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  int8x8_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t **v48;
  uint64_t *v49;
  float v50;
  uint64_t v51;
  unint64_t v52;

  v6 = 0;
  v7 = *a1;
  while (sub_2395C554C(a3, a1[++v6], v7))
    ;
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (!sub_2395C554C(a3, v12, v7));
  }
  else
  {
    do
      v11 = *--a2;
    while (!sub_2395C554C(a3, v11, v7));
  }
  if (v9 >= a2)
    goto LABEL_99;
  v13 = *a3;
  v14 = (int8x8_t)(*a3)[1];
  v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  v16 = v15.u32[0];
  v17 = *(_QWORD *)&v14 - 1;
  v18 = *(_QWORD *)&v14 + 0xFFFFFFFFLL;
  v20 = v15.u32[0] < 2uLL || *(_QWORD *)&v14 > v7;
  v21 = &a1[v6];
  v22 = a2;
  while (2)
  {
    v23 = *v21;
    *v21 = *v22;
    *v22 = v23;
    if (!*(_QWORD *)&v14)
LABEL_102:
      sub_23941D898("unordered_map::at: key not found");
    v24 = *v13;
    while (2)
    {
      v10 = v21;
      v26 = v21[1];
      ++v21;
      v25 = v26;
      if (v16 > 1)
      {
        v27 = v25;
        if (*(_QWORD *)&v14 <= v25)
          v27 = v25 % *(_QWORD *)&v14;
      }
      else
      {
        v27 = v18 & v25;
      }
      v28 = *(uint64_t ***)(v24 + 8 * v27);
      if (!v28)
        goto LABEL_102;
      v29 = *v28;
      if (!v29)
        goto LABEL_102;
      if (v16 < 2)
      {
        while (1)
        {
          v30 = v29[1];
          if (v30 == v25)
          {
            if (*((_DWORD *)v29 + 4) == (_DWORD)v25)
            {
              v31 = *(_QWORD *)&v14 + 0xFFFFFFFFLL;
              if (!v20)
                goto LABEL_33;
LABEL_42:
              v32 = v31 & v7;
              goto LABEL_43;
            }
          }
          else if ((v30 & v17) != v27)
          {
            goto LABEL_102;
          }
          v29 = (uint64_t *)*v29;
          if (!v29)
            goto LABEL_102;
        }
      }
      while (1)
      {
        v33 = v29[1];
        if (v33 == v25)
          break;
        if (v33 >= *(_QWORD *)&v14)
          v33 %= *(_QWORD *)&v14;
        if (v33 != v27)
          goto LABEL_102;
LABEL_35:
        v29 = (uint64_t *)*v29;
        if (!v29)
          goto LABEL_102;
      }
      if (*((_DWORD *)v29 + 4) != (_DWORD)v25)
        goto LABEL_35;
      v31 = -1;
      if (v20)
        goto LABEL_42;
LABEL_33:
      v32 = v7 % *(_QWORD *)&v14;
LABEL_43:
      v34 = *(uint64_t ***)(v24 + 8 * v32);
      if (!v34)
        goto LABEL_102;
      v35 = *v34;
      if (!v35)
        goto LABEL_102;
      v36 = *((float *)v29 + 5);
      if (v16 < 2)
      {
        while (1)
        {
          v37 = v35[1];
          if (v37 == v7)
          {
            if (*((_DWORD *)v35 + 4) == (_DWORD)v7)
              goto LABEL_19;
          }
          else if ((v37 & v17) != v32)
          {
            goto LABEL_102;
          }
          v35 = (uint64_t *)*v35;
          if (!v35)
            goto LABEL_102;
        }
      }
      while (2)
      {
        v38 = v35[1];
        if (v38 != v7)
        {
          if (v38 >= *(_QWORD *)&v14)
            v38 %= *(_QWORD *)&v14;
          if (v38 != v32)
            goto LABEL_102;
LABEL_53:
          v35 = (uint64_t *)*v35;
          if (!v35)
            goto LABEL_102;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v35 + 4) != (_DWORD)v7)
        goto LABEL_53;
LABEL_19:
      if (v36 > *((float *)v35 + 5))
        continue;
      break;
    }
    do
    {
      v40 = *--v22;
      v39 = v40;
      if (v16 > 1)
      {
        v41 = v39;
        if (*(_QWORD *)&v14 <= v39)
          v41 = v39 % *(_QWORD *)&v14;
      }
      else
      {
        v41 = v18 & v39;
      }
      v42 = *(uint64_t ***)(v24 + 8 * v41);
      if (!v42)
        goto LABEL_102;
      v43 = *v42;
      if (!v43)
        goto LABEL_102;
      if (v16 < 2)
      {
        while (1)
        {
          v44 = v43[1];
          if (v44 == v39)
          {
            if (*((_DWORD *)v43 + 4) == (_DWORD)v39)
            {
              v45 = *(_QWORD *)&v14 + 0xFFFFFFFFLL;
              if (!v20)
                goto LABEL_73;
LABEL_82:
              v46 = v45 & v7;
              goto LABEL_83;
            }
          }
          else if ((v44 & v17) != v41)
          {
            goto LABEL_102;
          }
          v43 = (uint64_t *)*v43;
          if (!v43)
            goto LABEL_102;
        }
      }
      while (1)
      {
        v47 = v43[1];
        if (v47 == v39)
          break;
        if (v47 >= *(_QWORD *)&v14)
          v47 %= *(_QWORD *)&v14;
        if (v47 != v41)
          goto LABEL_102;
LABEL_75:
        v43 = (uint64_t *)*v43;
        if (!v43)
          goto LABEL_102;
      }
      if (*((_DWORD *)v43 + 4) != (_DWORD)v39)
        goto LABEL_75;
      v45 = -1;
      if (v20)
        goto LABEL_82;
LABEL_73:
      v46 = v7 % *(_QWORD *)&v14;
LABEL_83:
      v48 = *(uint64_t ***)(v24 + 8 * v46);
      if (!v48)
        goto LABEL_102;
      v49 = *v48;
      if (!v49)
        goto LABEL_102;
      v50 = *((float *)v43 + 5);
      if (v16 < 2)
      {
        while (1)
        {
          v51 = v49[1];
          if (v51 == v7)
          {
            if (*((_DWORD *)v49 + 4) == (_DWORD)v7)
              goto LABEL_59;
          }
          else if ((v51 & v17) != v46)
          {
            goto LABEL_102;
          }
          v49 = (uint64_t *)*v49;
          if (!v49)
            goto LABEL_102;
        }
      }
      while (2)
      {
        v52 = v49[1];
        if (v52 != v7)
        {
          if (v52 >= *(_QWORD *)&v14)
            v52 %= *(_QWORD *)&v14;
          if (v52 != v46)
            goto LABEL_102;
LABEL_93:
          v49 = (uint64_t *)*v49;
          if (!v49)
            goto LABEL_102;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v49 + 4) != (_DWORD)v7)
        goto LABEL_93;
LABEL_59:
      ;
    }
    while (v50 <= *((float *)v49 + 5));
    if (v21 < v22)
      continue;
    break;
  }
LABEL_99:
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL sub_2395C6ACC(int32x2_t *a1, int32x2_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  __int32 v19;
  unsigned int v20;

  v6 = ((char *)a2 - (char *)a1) >> 2;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_2395C554C(a3, a2[-1].u32[1], a1->i32[0]))
      {
        v15 = a1->i32[0];
        a1->i32[0] = a2[-1].i32[1];
        a2[-1].i32[1] = v15;
      }
      return 1;
    case 3:
      sub_2395C5704((unsigned int *)a1, (unsigned int *)a1 + 1, (unsigned int *)&a2[-1] + 1, a3);
      return 1;
    case 4:
      v16 = (unsigned int *)&a1[1];
      sub_2395C5704((unsigned int *)a1, (unsigned int *)a1 + 1, (unsigned int *)&a1[1], a3);
      if (sub_2395C554C(a3, a2[-1].u32[1], a1[1].u32[0]))
      {
        v17 = *v16;
        *v16 = a2[-1].u32[1];
        a2[-1].i32[1] = v17;
        if (sub_2395C554C(a3, *v16, a1->u32[1]))
        {
          v19 = a1->i32[1];
          v18 = a1[1].u32[0];
          v20 = a1->i32[0];
          a1->i32[1] = v18;
          a1[1].i32[0] = v19;
          if (sub_2395C554C(a3, v18, v20))
            *a1 = vrev64_s32(*a1);
        }
      }
      return 1;
    case 5:
      sub_2395C6D0C((unsigned int *)a1, (unsigned int *)a1 + 1, (unsigned int *)&a1[1], (unsigned int *)&a1[1] + 1, (unsigned int *)&a2[-1] + 1, a3);
      return 1;
    default:
      v8 = (unsigned int *)&a1[1];
      sub_2395C5704((unsigned int *)a1, (unsigned int *)a1 + 1, (unsigned int *)&a1[1], a3);
      v9 = (unsigned int *)&a1[1] + 1;
      if (&a1[1].u8[4] == (unsigned __int8 *)a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (!sub_2395C554C(a3, *v9, *v8))
  {
LABEL_11:
    v8 = v9;
    v10 += 4;
    if (++v9 == (unsigned int *)a2)
      return 1;
  }
  v12 = *v9;
  v13 = v10;
  do
  {
    v14 = (char *)a1 + v13;
    *(__int32 *)((char *)&a1[1].i32[1] + v13) = *(__int32 *)((char *)a1[1].i32 + v13);
    if (v13 == -8)
    {
      a1->i32[0] = v12;
      if (++v11 != 8)
        goto LABEL_11;
      return v9 + 1 == (unsigned int *)a2;
    }
    v13 -= 4;
  }
  while (sub_2395C554C(a3, v12, *((_DWORD *)v14 + 1)));
  *(__int32 *)((char *)&a1[1].i32[1] + v13) = v12;
  if (++v11 != 8)
    goto LABEL_11;
  return v9 + 1 == (unsigned int *)a2;
}

BOOL sub_2395C6D0C(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t **a6)
{
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _BOOL8 result;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  sub_2395C5704(a1, a2, a3, a6);
  if (sub_2395C554C(a6, *a4, *a3))
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    if (sub_2395C554C(a6, *a3, *a2))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      if (sub_2395C554C(a6, *a2, *a1))
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  result = sub_2395C554C(a6, *a5, *a4);
  if (result)
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    result = sub_2395C554C(a6, *a4, *a3);
    if (result)
    {
      v17 = *a3;
      *a3 = *a4;
      *a4 = v17;
      result = sub_2395C554C(a6, *a3, *a2);
      if (result)
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        result = sub_2395C554C(a6, *a2, *a1);
        if (result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

BOOL sub_2395C6E50(_BOOL8 result, uint64_t **a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4;
  unsigned int *v5;
  _BOOL8 v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v10 = ((uint64_t)a4 - result) >> 1;
      v11 = v10 + 1;
      v12 = (unsigned int *)(result + 4 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && sub_2395C554C(a2, *v12, v12[1]))
      {
        ++v12;
        v11 = v13;
      }
      result = sub_2395C554C(a2, *v12, *v5);
      if (!result)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (unsigned int *)(v6 + 4 * v16);
          if (2 * v11 + 2 < a3 && sub_2395C554C(a2, *v12, v12[1]))
          {
            ++v12;
            v16 = 2 * v11 + 2;
          }
          result = sub_2395C554C(a2, *v12, v14);
          v5 = v15;
          v11 = v16;
        }
        while (!result);
        *v15 = v14;
      }
    }
  }
  return result;
}

uint64_t sub_2395C6F78(uint64_t result, unsigned int *a2, uint64_t **a3)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;

  if ((uint64_t)a2 - result < 5)
    return result;
  v4 = a2;
  v5 = (unsigned int *)result;
  v6 = ((unint64_t)a2 - result) >> 2;
  while (2)
  {
    v8 = 0;
    v9 = *v5;
    v10 = *a3;
    v11 = v5;
    while (2)
    {
      v12 = &v11[v8 + 1];
      v13 = (2 * v8) | 1;
      v14 = 2 * v8 + 2;
      if (v14 >= v6)
        goto LABEL_8;
      v15 = (int8x8_t)v10[1];
      if (!*(_QWORD *)&v15)
        goto LABEL_58;
      v16 = *v12;
      v17 = (uint8x8_t)vcnt_s8(v15);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v18 = *v12;
        if (*(_QWORD *)&v15 <= v16)
          v18 = v16 % *(_QWORD *)&v15;
      }
      else
      {
        v18 = (v15.i32[0] - 1) & v16;
      }
      v19 = *(uint64_t ***)(*v10 + 8 * v18);
      if (!v19 || (v20 = *v19) == 0)
LABEL_58:
        sub_23941D898("unordered_map::at: key not found");
      v21 = v12[1];
      result = *(_QWORD *)&v15 - 1;
      if (v17.u32[0] < 2uLL)
      {
        while (1)
        {
          v22 = v20[1];
          if (v22 == v16)
          {
            if (*((_DWORD *)v20 + 4) == (_DWORD)v16)
              goto LABEL_23;
          }
          else if ((v22 & result) != v18)
          {
            goto LABEL_58;
          }
          v20 = (uint64_t *)*v20;
          if (!v20)
            goto LABEL_58;
        }
      }
      while (1)
      {
        v24 = v20[1];
        if (v24 == v16)
          break;
        if (v24 >= *(_QWORD *)&v15)
          v24 %= *(_QWORD *)&v15;
        if (v24 != v18)
          goto LABEL_58;
LABEL_26:
        v20 = (uint64_t *)*v20;
        if (!v20)
          goto LABEL_58;
      }
      if (*((_DWORD *)v20 + 4) != (_DWORD)v16)
        goto LABEL_26;
LABEL_23:
      if (v17.u32[0] > 1uLL)
      {
        v23 = v12[1];
        if (*(_QWORD *)&v15 <= v21)
          v23 = v21 % *(_QWORD *)&v15;
      }
      else
      {
        v23 = (v15.i32[0] - 1) & v21;
      }
      v25 = *(uint64_t ***)(*v10 + 8 * v23);
      if (!v25)
        goto LABEL_58;
      v26 = *v25;
      if (!v26)
        goto LABEL_58;
      if (v17.u32[0] < 2uLL)
      {
        while (1)
        {
          v27 = v26[1];
          if (v27 == v21)
          {
            if (*((_DWORD *)v26 + 4) == (_DWORD)v21)
              goto LABEL_6;
          }
          else if ((v27 & result) != v23)
          {
            goto LABEL_58;
          }
          v26 = (uint64_t *)*v26;
          if (!v26)
            goto LABEL_58;
        }
      }
      while (1)
      {
        v28 = v26[1];
        if (v28 == v21)
          break;
        if (v28 >= *(_QWORD *)&v15)
        {
          result = v28 / *(_QWORD *)&v15;
          v28 %= *(_QWORD *)&v15;
        }
        if (v28 != v23)
          goto LABEL_58;
LABEL_44:
        v26 = (uint64_t *)*v26;
        if (!v26)
          goto LABEL_58;
      }
      if (*((_DWORD *)v26 + 4) != (_DWORD)v21)
        goto LABEL_44;
LABEL_6:
      if (*((float *)v20 + 5) > *((float *)v26 + 5))
      {
        ++v12;
        v13 = v14;
      }
LABEL_8:
      *v11 = *v12;
      v11 = v12;
      v8 = v13;
      if (v13 <= (uint64_t)((unint64_t)(v6 - 2) >> 1))
        continue;
      break;
    }
    if (v12 == --v4)
    {
      *v12 = v9;
    }
    else
    {
      *v12 = *v4;
      *v4 = v9;
      v29 = (char *)v12 - (char *)v5 + 4;
      if (v29 >= 5)
      {
        v30 = (((unint64_t)v29 >> 2) - 2) >> 1;
        v31 = &v5[v30];
        result = sub_2395C554C(a3, *v31, *v12);
        if ((_DWORD)result)
        {
          v32 = *v12;
          do
          {
            v33 = v31;
            *v12 = *v31;
            if (!v30)
              break;
            v30 = (v30 - 1) >> 1;
            v31 = &v5[v30];
            result = sub_2395C554C(a3, *v31, v32);
            v12 = v33;
          }
          while ((result & 1) != 0);
          *v33 = v32;
        }
      }
    }
    if (v6-- > 2)
      continue;
    return result;
  }
}

uint64_t sub_2395C7274@<X0>(unsigned int *a1@<X0>, char *a2@<X1>, unsigned __int8 *a3@<X3>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  uint64_t result;

  v8 = operator new(0x90uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_250ADF9C8;
  result = sub_2395BF454((uint64_t)(v8 + 3), *a1, *a2, 0, *a3);
  *a4 = result;
  a4[1] = (uint64_t)v8;
  return result;
}

void sub_2395C72E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2395C72F8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  char v32;
  uint64_t v33;

  v32 = 0;
  std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
  {
    *(_BYTE *)a2 = v32 != 0;
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
    {
      std::istream::read();
      if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
      {
        if (!*(_BYTE *)(a2 + 1))
        {
          v31 = 0;
          std::istream::read();
          std::istream::read();
          return;
        }
        if ((_DWORD)a3)
        {
          v8 = operator new(a3);
          bzero(v8, a3);
        }
        else
        {
          v8 = 0;
        }
        std::istream::read();
        if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
          goto LABEL_10;
        v9 = (_QWORD *)(a2 + 56);
        v10 = *(_QWORD *)(a2 + 56);
        v11 = *(_QWORD *)(a2 + 64);
        v12 = (v11 - v10) >> 4;
        v13 = a3 - v12;
        if (a3 <= v12)
        {
          if (a3 < v12)
          {
            v14 = v10 + 16 * a3;
            while (v11 != v14)
            {
              v15 = *(std::__shared_weak_count **)(v11 - 8);
              if (v15)
              {
                p_shared_owners = (unint64_t *)&v15->__shared_owners_;
                do
                  v17 = __ldaxr(p_shared_owners);
                while (__stlxr(v17 - 1, p_shared_owners));
                if (!v17)
                {
                  ((void (*)(std::__shared_weak_count *, unint64_t))v15->__on_zero_shared)(v15, v13);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              v11 -= 16;
            }
            *(_QWORD *)(a2 + 64) = v14;
          }
        }
        else
        {
          sub_23942D080(a2 + 56, v13);
        }
        if (!(_DWORD)a3)
        {
LABEL_10:
          if (!v8)
            return;
        }
        else
        {
          v18 = 0;
          v19 = a1 + 4;
          do
          {
            while (*((_BYTE *)v8 + v18))
            {
              LOBYTE(v33) = 0;
              std::istream::read();
              if ((*((_BYTE *)v19 + *(_QWORD *)(*a1 - 24)) & 5) == 0)
              {
                v20 = operator new(0x90uLL);
                v20[1] = 0;
                v20[2] = 0;
                *v20 = &off_250ADF9C8;
                v21 = sub_2395BF454((uint64_t)(v20 + 3), a4, (_BYTE)v33 != 0, 0, 0);
                v22 = (uint64_t *)(*v9 + 16 * v18);
                v23 = (std::__shared_weak_count *)v22[1];
                *v22 = v21;
                v22[1] = (uint64_t)v20;
                if (v23)
                {
                  v24 = (unint64_t *)&v23->__shared_owners_;
                  do
                    v25 = __ldaxr(v24);
                  while (__stlxr(v25 - 1, v24));
                  if (!v25)
                  {
                    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                    std::__shared_weak_count::__release_weak(v23);
                  }
                }
                sub_2395C72F8(a1, *(_QWORD *)(*v9 + 16 * v18++), a3, a4);
                if ((*(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*a1 - 24)) & 5) == 0 && v18 != a3)
                  continue;
              }
              goto LABEL_11;
            }
            v27 = (_QWORD *)(*v9 + 16 * v18);
            v28 = (std::__shared_weak_count *)v27[1];
            *v27 = 0;
            v27[1] = 0;
            if (v28)
            {
              v29 = (unint64_t *)&v28->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            ++v18;
          }
          while (v18 != a3);
        }
LABEL_11:
        operator delete(v8);
      }
    }
  }
}

void sub_2395C77D8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395C7810(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int v3;

  if (!*(_BYTE *)(a1 + 1))
    return 1;
  v1 = *(_QWORD **)(a1 + 56);
  v2 = *(_QWORD **)(a1 + 64);
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      if (*v1)
        v3 += sub_2395C7810();
      v1 += 2;
    }
    while (v1 != v2);
  }
  return (v3 + 1);
}

uint64_t sub_2395C7888(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 1))
    return 1;
  v1 = *(_QWORD **)(a1 + 56);
  v2 = *(_QWORD **)(a1 + 64);
  if (v1 != v2)
  {
    v3 = 0;
    do
    {
      if (*v1)
        v3 = sub_2395C7888() + v3;
      v1 += 2;
    }
    while (v1 != v2);
    return v3;
  }
  return 0;
}

uint64_t sub_2395C7904(uint64_t result, _DWORD *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *i;
  int v7;

  if (*(_BYTE *)(result + 1))
  {
    v4 = *(uint64_t **)(result + 56);
    for (i = *(uint64_t **)(result + 64); v4 != i; v4 += 2)
    {
      result = *v4;
      if (*v4)
        result = sub_2395C7904(result, a2, a3);
    }
  }
  else
  {
    v7 = (*a2)++;
    *(_DWORD *)(result + 4) = v7;
  }
  return result;
}

uint64_t sub_2395C7978(uint64_t result)
{
  uint64_t v1;
  pthread_rwlock_t *v2;
  pthread_rwlock_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  v1 = result;
  if (!*(_QWORD *)(result + 16))
  {
    v2 = (pthread_rwlock_t *)operator new();
    sub_2397A1588(v2);
    result = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = v2;
    if (result)
    {
      v3 = sub_2397A15B0((pthread_rwlock_t *)result);
      result = MEMORY[0x23B83E31C](v3, 0x1000C40BEF03554);
    }
  }
  if (*(_BYTE *)(v1 + 1))
  {
    v5 = *(uint64_t **)(v1 + 56);
    v4 = *(uint64_t **)(v1 + 64);
    while (v5 != v4)
    {
      result = *v5;
      if (*v5)
        result = sub_2395C7978();
      v5 += 2;
    }
  }
  return result;
}

void sub_2395C7A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1000C40BEF03554);
  _Unwind_Resume(a1);
}

uint64_t sub_2395C7A30(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!*(_BYTE *)(a1 + 1))
  {
    v6 = *(unsigned int *)(a1 + 4);
    v7 = *a2;
    if (v6 >= (a2[1] - *a2) >> 3)
      sub_239EC0D1C();
    v8 = 8 * v6;
    v5 = *(_QWORD *)(v7 + v8) == 0;
    *(_QWORD *)(v7 + v8) = a1;
    return v5;
  }
  v3 = *(_QWORD **)(a1 + 56);
  v4 = *(_QWORD **)(a1 + 64);
  if (v3 != v4)
  {
    v5 = 0;
    do
    {
      if (*v3)
        v5 = sub_2395C7A30(*v3, a2) + v5;
      v3 += 2;
    }
    while (v3 != v4);
    return v5;
  }
  return 0;
}

void sub_2395C7ADC(unint64_t *a1, unint64_t a2, const double *a3)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (_QWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_44;
      v17 = v16 + 1;
      v8 = (_QWORD *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = vld1q_dup_f64(a3);
      v19 = (float64x2_t *)(v7 + 16);
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
          *v8++ = *(_QWORD *)a3;
        while (v8 != (_QWORD *)(v7 + 8 * a2));
      }
      v8 = (_QWORD *)(v7 + 8 * a2);
    }
    a1[1] = (unint64_t)v8;
  }
  else
  {
    v9 = v7 - *a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + a2;
    if (v11 >> 61)
      sub_2394189F8();
    v12 = v6 - *a1;
    v13 = v12 >> 2;
    if (v12 >> 2 <= v11)
      v13 = (v9 >> 3) + a2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      if (v14 >> 61)
        sub_239418A80();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v10];
    v22 = (char *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_45;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[8 * v10];
      if (&v15[8 * a2 + v9] > (char *)a3)
        goto LABEL_45;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vld1q_dup_f64(a3);
    v27 = (float64x2_t *)&v15[8 * v10 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      do
      {
        *(double *)v24 = *a3;
        v24 += 8;
      }
      while (v24 != v22);
    }
    v29 = (_QWORD *)*a1;
    if (v7 != *a1)
    {
      v30 = v7 - *a1 - 8;
      if (v30 < 0x58)
        goto LABEL_46;
      if (v7 - (unint64_t)&v15[v9] < 0x20)
        goto LABEL_46;
      v31 = (v30 >> 3) + 1;
      v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (_QWORD *)(v7 - v32);
      v21 -= v32;
      v33 = &v15[8 * v10 - 16];
      v34 = (__int128 *)(v7 - 16);
      v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *v34;
        *((_OWORD *)v33 - 1) = *(v34 - 1);
        *(_OWORD *)v33 = v36;
        v33 -= 32;
        v34 -= 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
        {
          v37 = *--v8;
          *(_QWORD *)(v21 - 8) = v37;
          v21 -= 8;
        }
        while (v8 != v29);
      }
      v8 = (_QWORD *)*a1;
    }
    *a1 = v21;
    a1[1] = (unint64_t)v22;
    a1[2] = (unint64_t)&v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
}

void sub_2395C7D38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADFB68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2395C7D48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADFB68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2395C7D78(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2395C7D88(uint64_t result, uint64_t a2, char a3, int a4, char a5)
{
  unsigned int v5;

  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = &off_250ADFC40;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 44) = 1;
  *(_BYTE *)(result + 48) = 0;
  *(_OWORD *)(result + 52) = 0u;
  *(_OWORD *)(result + 68) = 0u;
  *(_OWORD *)(result + 84) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_QWORD *)(result + 112) = 0x1400000001;
  *(_QWORD *)(result + 120) = 0x3FA999999999999ALL;
  *(_DWORD *)(result + 128) = 1;
  *(_DWORD *)(result + 136) = 1;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_DWORD *)(result + 176) = 1065353216;
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 200) = 0u;
  *(_DWORD *)(result + 216) = 1065353216;
  *(_OWORD *)(result + 240) = 0u;
  *(_DWORD *)(result + 256) = 1065353216;
  *(_OWORD *)(result + 264) = 0u;
  *(_OWORD *)(result + 280) = 0u;
  *(_DWORD *)(result + 296) = 1065353216;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= 0x10000)
  {
    sub_239A444D4((uint64_t)"unknown file", 47, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  *(_BYTE *)(result + 32) = a3;
  *(_BYTE *)(result + 33) = a5;
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(result + 40) = v5;
  *(_DWORD *)(result + 44) = a4;
  return result;
}

void sub_2395C7EB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;

  sub_239420950(v6);
  sub_239420950(v3);
  sub_239420950(v4);
  sub_239420950(v2);
  v8 = (void *)v1[10];
  if (v8)
  {
    v1[11] = v8;
    operator delete(v8);
  }
  sub_239416DA0(v5);
  *v1 = off_250ADF930;
  v9 = (void *)v1[1];
  if (v9)
  {
    v1[2] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2395C7F14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 33))
    return 0;
  v1 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v1)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 3) != (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2)
      return 0;
    v3 = *(_QWORD *)(a1 + 344);
    v1 = v3 == 0;
    if (v3)
    {
      if (*(_DWORD *)(a1 + 332))
        return 0;
    }
  }
  return v1;
}

_QWORD *sub_2395C7F74(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;

  *a1 = &off_250ADFC40;
  v2 = (_QWORD *)a1[35];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[33];
  a1[33] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[30];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[28];
  a1[28] = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)a1[25];
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)a1[23];
  a1[23] = 0;
  if (v10)
    operator delete(v10);
  v11 = (_QWORD *)a1[20];
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = (void *)a1[18];
  a1[18] = 0;
  if (v13)
    operator delete(v13);
  v14 = (void *)a1[10];
  if (v14)
  {
    a1[11] = v14;
    operator delete(v14);
  }
  v15 = (std::__shared_weak_count *)a1[9];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      *a1 = off_250ADF930;
      v18 = (void *)a1[1];
      if (!v18)
        return a1;
      goto LABEL_24;
    }
  }
  *a1 = off_250ADF930;
  v18 = (void *)a1[1];
  if (v18)
  {
LABEL_24:
    a1[2] = v18;
    operator delete(v18);
  }
  return a1;
}

_QWORD *sub_2395C80BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;

  *a1 = &off_250ADFBA0;
  v2 = (std::__shared_weak_count *)a1[44];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void **)a1[38];
    if (!v5)
      return sub_2395C7F74(a1);
  }
  else
  {
LABEL_5:
    v5 = (void **)a1[38];
    if (!v5)
      return sub_2395C7F74(a1);
  }
  v6 = (void **)a1[39];
  v7 = v5;
  if (v6 != v5)
  {
    v8 = (void **)a1[39];
    do
    {
      v11 = (char *)*(v8 - 3);
      v8 -= 3;
      v10 = v11;
      if (v11)
      {
        v12 = (char *)*(v6 - 2);
        v9 = v10;
        if (v12 != v10)
        {
          do
          {
            v13 = (void *)*((_QWORD *)v12 - 3);
            if (v13)
            {
              *((_QWORD *)v12 - 2) = v13;
              operator delete(v13);
            }
            v12 -= 32;
          }
          while (v12 != v10);
          v9 = *v8;
        }
        *(v6 - 2) = v10;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v5);
    v7 = (void **)a1[38];
  }
  a1[39] = v5;
  operator delete(v7);
  return sub_2395C7F74(a1);
}

void sub_2395C81BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;

  *a1 = &off_250ADFBA0;
  v2 = (std::__shared_weak_count *)a1[44];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void **)a1[38];
    if (!v5)
      goto LABEL_19;
  }
  else
  {
LABEL_5:
    v5 = (void **)a1[38];
    if (!v5)
      goto LABEL_19;
  }
  v6 = (void **)a1[39];
  v7 = v5;
  if (v6 != v5)
  {
    v8 = (void **)a1[39];
    do
    {
      v11 = (char *)*(v8 - 3);
      v8 -= 3;
      v10 = v11;
      if (v11)
      {
        v12 = (char *)*(v6 - 2);
        v9 = v10;
        if (v12 != v10)
        {
          do
          {
            v13 = (void *)*((_QWORD *)v12 - 3);
            if (v13)
            {
              *((_QWORD *)v12 - 2) = v13;
              operator delete(v13);
            }
            v12 -= 32;
          }
          while (v12 != v10);
          v9 = *v8;
        }
        *(v6 - 2) = v10;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v5);
    v7 = (void **)a1[38];
  }
  a1[39] = v5;
  operator delete(v7);
LABEL_19:
  sub_2395C7F74(a1);
  JUMPOUT(0x23B83E31CLL);
}

unint64_t sub_2395C82D0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3;
  int v5;
  uint64_t v6;
  double v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t result;
  unint64_t v14;
  double v15;

  v3 = *(_DWORD *)(a1 + 36);
  if (!v3)
    return 0;
  v5 = *(_DWORD *)(a1 + 40);
  if (!v5)
    return 0;
  v6 = *(unsigned int *)(a1 + 52);
  if (!(_DWORD)v6)
    return 0;
  v9 = pow((double)v3, (double)(v5 + 1));
  v10 = v9;
  v11 = 1.0 / (float)(v3 - 1);
  if (v3 == 1)
    v11 = 3.4028e38;
  v12 = 8 * a2 * v10;
  if (!a2)
    v12 = 0;
  result = v12 + (4 * v6 + 120) * (unint64_t)(float)(v11 * (float)(v3 * v10 - 1));
  if (a3)
    result = (unint64_t)(float)((float)((float)a3 / (float)v10) * (float)result);
  if (a2 && result)
  {
    v14 = *(_QWORD *)(a1 + 344);
    if (v14)
      LODWORD(v14) = *(_DWORD *)(v14 + 80);
    else
      LODWORD(v14) = *(_DWORD *)(a1 + 60) * v6;
    v15 = v9 * (double)v6;
    if ((_DWORD)v14)
      v14 = v14;
    else
      v14 = (unint64_t)v15;
    result += v14 * a2;
  }
  return result;
}

void sub_2395C8408(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;

  v2 = a1 + 1;
  a1[2] = a1[1];
  sub_23950DB64((uint64_t)(a1 + 1));
  v3 = (_QWORD *)v2[7];
  if (v3)
    sub_2395BEDC8(v3);
  v4 = (void **)a1[38];
  v5 = (void **)a1[39];
  if (v5 != v4)
  {
    v6 = (void **)a1[39];
    do
    {
      v9 = (char *)*(v6 - 3);
      v6 -= 3;
      v8 = v9;
      if (v9)
      {
        v10 = (char *)*(v5 - 2);
        v7 = v8;
        if (v10 != v8)
        {
          do
          {
            v11 = (void *)*((_QWORD *)v10 - 3);
            if (v11)
            {
              *((_QWORD *)v10 - 2) = v11;
              operator delete(v11);
            }
            v10 -= 32;
          }
          while (v10 != v8);
          v7 = *v6;
        }
        *(v5 - 2) = v8;
        operator delete(v7);
      }
      v5 = v6;
    }
    while (v6 != v4);
  }
  a1[39] = v4;
  sub_2395CD2C8((uint64_t)(a1 + 38));
}

void sub_2395C84D0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t j;

  sub_2395C8408(a1);
  v2 = (_QWORD *)a1[8];
  if (v2)
  {
    v3 = v2[7];
    for (i = v2[8]; i != v3; i -= 16)
    {
      v5 = *(std::__shared_weak_count **)(i - 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    v2[8] = v3;
    if (v2[13])
    {
      v8 = (_QWORD *)v2[12];
      if (v8)
      {
        do
        {
          v9 = (_QWORD *)*v8;
          operator delete(v8);
          v8 = v9;
        }
        while (v9);
      }
      v2[12] = 0;
      v10 = v2[11];
      if (v10)
      {
        for (j = 0; j != v10; ++j)
          *(_QWORD *)(v2[10] + 8 * j) = 0;
      }
      v2[13] = 0;
    }
  }
}

uint64_t sub_2395C859C(uint64_t result, uint64_t a2, int a3)
{
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 52) = a3;
  return result;
}

BOOL sub_2395C85A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64) != 0;
}

uint64_t sub_2395C85B8()
{
  return 1;
}

uint64_t sub_2395C85C0(unint64_t a1, uint64_t *a2, unsigned int a3, _QWORD *a4)
{
  uint64_t result;
  _BOOL4 v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int *v16;
  unsigned int *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  int v27;
  uint64_t v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  int v34;
  float *v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  double v40;
  double v41;
  double v42;
  BOOL v43;
  double v44;
  double v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53[2];

  if (!*(_DWORD *)(a1 + 36))
    return 0;
  if (*(_BYTE *)(a1 + 32))
    return 1;
  v9 = a3 > 1;
  v10 = operator new(0x90uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_250ADFCE0;
  *(_QWORD *)(a1 + 64) = sub_2395CD93C((uint64_t)(v10 + 3), *(_DWORD *)(a1 + 52), 1, 0, v9);
  v11 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (a4 && !*(_BYTE *)(a1 + 33))
    a4[3] = a4[2];
  v14 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 112) = a3;
  v15 = sub_2395CD444((__int128 *)(a1 + 104), -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3), *(_DWORD *)(a1 + 52), v14, 0, *(_BYTE *)(a1 + 48), (_QWORD *)(a1 + 64), a2, (uint64_t)a4);
  result = 0;
  if (v15)
  {
    if (a4)
    {
      v16 = (unsigned int *)a4[2];
      v17 = (unsigned int *)a4[3];
      if (v17 != v16)
      {
        sub_2394F00D0((_QWORD **)&v52, v16, v17);
        sub_2395C2BB0(&v50, v52, v53);
        v18 = *(void **)(a1 + 8);
        if (v18)
        {
          *(_QWORD *)(a1 + 16) = v18;
          operator delete(v18);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
        }
        *(_OWORD *)(a1 + 8) = v50;
        *(_QWORD *)(a1 + 24) = v51;
        sub_239421038((uint64_t)&v52, v53[0]);
      }
    }
    sub_2395BCBC8(a1);
    *(_BYTE *)(a1 + 137) = v9;
    result = 1;
    if (a4)
    {
      if (*(_BYTE *)(a1 + 136) && *(_BYTE *)(a1 + 33) && a4[6] != a4[5])
      {
        v52 = 0;
        v53[0] = 0;
        v53[1] = 0;
        sub_2395CAC48(a1, a4 + 5, &v52);
        v19 = *(unsigned int *)(a1 + 60);
        v21 = a4[5];
        v20 = a4[6];
        v22 = v52;
        if (((v20 - v21) >> 2) * v19 != ((char *)v53[0] - v52) >> 2)
        {
          sub_239A444D4((uint64_t)"unknown file", 366, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        if (v20 != v21)
        {
          v23 = 0;
          v47 = a4;
          do
          {
            v49 = 0;
            v49 = *(_DWORD *)(v21 + 4 * v23);
            v25 = v19;
            v26 = 0.0;
            v48 = v21;
            if ((_DWORD)v19)
            {
              v27 = 0;
              v28 = 4 * v19;
              v29 = (float *)v22;
              do
              {
                v30 = *v29++;
                v27 = (int)(float)(v30 + (float)v27);
                v28 -= 4;
              }
              while (v28);
              v31 = fabsf((float)v27);
              if (v27 < 0)
                v32 = -3.4028e38;
              else
                v32 = 3.4028e38;
              v33 = v20;
              v34 = 0;
              v26 = 0.0;
              v35 = (float *)v22;
              v36 = v19;
              if (v31 < 0.00000011921)
              {
                do
                {
                  if (*v35 > 0.000001)
                  {
                    ++v34;
                    v38 = *v35;
                    v26 = v26 - (float)((float)(v38 * v32) * logf(v38 * v32));
                  }
                  ++v35;
                  --v36;
                }
                while (v36);
              }
              else
              {
                v37 = 1.0 / (float)v27;
                do
                {
                  if (*v35 > 0.000001)
                  {
                    ++v34;
                    v39 = *v35;
                    v26 = v26 - (float)((float)(v39 * v37) * logf(v39 * v37));
                  }
                  ++v35;
                  --v36;
                }
                while (v36);
              }
            }
            else
            {
              v33 = v20;
              v34 = 0;
            }
            v40 = log((double)v19);
            v41 = fabs(v40);
            v42 = 1.0 / v40;
            v43 = v40 < 0.0;
            v44 = -1.79769313e308;
            if (!v43)
              v44 = 1.79769313e308;
            if (v41 < 2.22044605e-16)
              v45 = v44;
            else
              v45 = v42;
            v20 = v33;
            v21 = v48;
            if (v34)
            {
              *(_QWORD *)&v50 = &v49;
              *((_DWORD *)sub_2394F126C(a1 + 224, &v49, (uint64_t)&unk_239EC6E98, (_DWORD **)&v50) + 5) = v34;
              *(_QWORD *)&v50 = &v49;
              v46 = sub_2394AAB74(a1 + 144, &v49, (uint64_t)&unk_239EC6E98, (_DWORD **)&v50);
              v24 = v45 * v26;
              *((float *)v46 + 5) = v24;
              v25 = *(unsigned int *)(a1 + 60);
              v21 = v47[5];
              v20 = v47[6];
              LODWORD(v19) = *(_DWORD *)(a1 + 60);
            }
            v22 += 4 * v25;
            ++v23;
          }
          while (v23 < (v20 - v21) >> 2);
          v22 = v52;
        }
        if (v22)
        {
          v53[0] = v22;
          operator delete(v22);
        }
        return 1;
      }
    }
  }
  return result;
}

void sub_2395C8A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395C8A74(uint64_t a1, __int32 a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  size_t v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v10;
  uint64_t v11;
  __int32 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  void *v18;
  size_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  float *v32;
  char *v33;
  uint64_t v34;
  unint64_t v36;
  int8x8_t *v37;
  float32x4_t *v38;
  unint64_t v39;
  int8x8_t v40;
  int v41;
  unint64_t v42;
  float32x4_t *v43;
  int8x16_t *v44;
  int8x16_t v45;
  int8x8_t v46;

  if (!*(_QWORD *)(a1 + 64))
    return 0;
  if (!*(_BYTE *)(a1 + 33))
  {
    if (*(_DWORD *)(a1 + 36))
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 3);
      v7 = *(__int32 **)(a1 + 8);
      v8 = *(__int32 **)(a1 + 16);
      if (v6 == v8 - v7 && !*(_QWORD *)(a1 + 344))
      {
        v10 = wmemchr(v7, a2, v6);
        v12 = v10 ? v10 : v8;
        if (v12 != *(__int32 **)(a1 + 16))
        {
          v13 = ((uint64_t)v12 - *(_QWORD *)(a1 + 8)) >> 2;
          v14 = *(_QWORD *)(a1 + 304);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 312) - v14) >> 3) <= v13)
            sub_239EC0D4C((uint64_t)v10, v11);
          v15 = *(_QWORD *)(a1 + 344);
          if (v15)
            v16 = *(_DWORD *)(v15 + 32);
          else
            v16 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 60);
          v17 = (uint64_t *)(v14 + 24 * v13);
          v18 = *(void **)a4;
          *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
          if (v16)
          {
            v19 = 4 * v16;
            v20 = (char *)operator new(v19);
            bzero(v20, v19);
            v21 = &v20[v19];
          }
          else
          {
            v21 = 0;
            v20 = 0;
          }
          if (v18)
          {
            *(_QWORD *)(a4 + 8) = v18;
            operator delete(v18);
          }
          *(_QWORD *)a4 = v20;
          *(_QWORD *)(a4 + 8) = v21;
          *(_QWORD *)(a4 + 16) = v21;
          v22 = *(_QWORD *)(v14 + 24 * v13 + 8);
          v23 = *v17;
          v24 = v22 - *v17;
          if (v22 == *v17)
            return 1;
          v25 = 0;
          v26 = v24 >> 5;
          if (v26 <= 1)
            v26 = 1;
          while (1)
          {
            v27 = v23 + 32 * v25;
            v29 = *(_QWORD *)(v27 + 8);
            v28 = *(char **)(v27 + 16);
            if ((char *)v29 != v28)
              break;
LABEL_26:
            ++v25;
            result = 1;
            if (v25 == v26)
              return result;
          }
          v30 = (unint64_t)&v28[-v29];
          v31 = (_QWORD)&v28[-v29] * *(unsigned int *)(v23 + 32 * v25);
          v32 = (float *)&v20[4 * v31];
          if ((unint64_t)&v28[-v29] < 8)
          {
            v33 = (char *)v29;
            goto LABEL_40;
          }
          v34 = 4 * v31;
          if (v32 < (float *)v28 && v29 < (unint64_t)&v20[v34 + 4 * (_QWORD)v28 - 4 * v29])
          {
            v33 = (char *)v29;
            goto LABEL_40;
          }
          if (v30 >= 0x10)
          {
            v36 = v30 & 0xFFFFFFFFFFFFFFF0;
            v42 = v30 & 0xFFFFFFFFFFFFFFF0;
            v43 = (float32x4_t *)v32;
            v44 = (int8x16_t *)v29;
            do
            {
              v45 = *v44++;
              v46 = (int8x8_t)vextq_s8(v45, v45, 8uLL).u64[0];
              *v43 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v45.i8, *(int8x8_t *)v45.i8), 8uLL), 8uLL)));
              v43[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v45.i8, *(int8x8_t *)v45.i8), 8uLL), 8uLL)));
              v43[2] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v46, *(int8x8_t *)v45.i8), 8uLL), 8uLL)));
              v43[3] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v46, *(int8x8_t *)v45.i8), 8uLL), 8uLL)));
              v43 += 4;
              v42 -= 16;
            }
            while (v42);
            if (v30 == v36)
              goto LABEL_26;
            if ((v30 & 8) == 0)
            {
              v33 = (char *)(v29 + v36);
              v32 += v36;
              do
              {
LABEL_40:
                v41 = *v33++;
                *v32++ = (float)v41;
              }
              while (v33 != v28);
              goto LABEL_26;
            }
          }
          else
          {
            v36 = 0;
          }
          v32 += v30 & 0xFFFFFFFFFFFFFFF8;
          v33 = (char *)(v29 + (v30 & 0xFFFFFFFFFFFFFFF8));
          v37 = (int8x8_t *)(v29 + v36);
          v38 = (float32x4_t *)&v20[4 * v36 + v34];
          v39 = v36 - (v30 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v40 = *v37++;
            *v38 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v40, v40), 8uLL), 8uLL)));
            v38[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v40, v40), 8uLL), 8uLL)));
            v38 += 2;
            v39 += 8;
          }
          while (v39);
          if (v30 == (v30 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_26;
          goto LABEL_40;
        }
      }
    }
    return 0;
  }
  return 0;
}

uint64_t sub_2395C8D94(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v20;
  void *v21;
  _BYTE *v22;
  _BYTE *v23;
  void *__p[2];
  void *v25[2];
  int v26;

  *(_OWORD *)__p = 0u;
  *(_OWORD *)v25 = 0u;
  v26 = 1065353216;
  v10 = sub_2395D012C(a1, a2, a3, a4, __p, 0, 0, a8, 0, 0);
  if ((v10 & 1) == 0)
    goto LABEL_7;
  v11 = *(_QWORD *)(a1 + 344);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 32);
    v13 = *(void **)a5;
    *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
    if (v12)
      goto LABEL_4;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 60);
    v13 = *(void **)a5;
    *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
    if (v12)
    {
LABEL_4:
      v14 = (char *)operator new(4 * v12);
      bzero(v14, 4 * v12);
      v15 = &v14[4 * v12];
      if (!v13)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  v15 = 0;
  v14 = 0;
  if (v13)
  {
LABEL_5:
    *(_QWORD *)(a5 + 8) = v13;
    operator delete(v13);
  }
LABEL_6:
  *(_QWORD *)a5 = v14;
  *(_QWORD *)(a5 + 8) = v15;
  *(_QWORD *)(a5 + 16) = v15;
  v16 = v25[0];
  if (v25[0])
  {
    do
    {
      v22 = (_BYTE *)v16[3];
      v23 = (_BYTE *)v16[4];
      if (v23 != v22)
        memmove((void *)(*(_QWORD *)a5 + 4 * ((unint64_t)(v23 - v22) >> 2) * *((unsigned int *)v16 + 4)), v22, v23 - v22);
      v16 = (_QWORD *)*v16;
    }
    while (v16);
  }
LABEL_7:
  v17 = v25[0];
  if (v25[0])
  {
    do
    {
      v20 = (_QWORD *)*v17;
      v21 = (void *)v17[3];
      if (v21)
      {
        v17[4] = v21;
        operator delete(v21);
      }
      operator delete(v17);
      v17 = v20;
    }
    while (v20);
  }
  v18 = __p[0];
  __p[0] = 0;
  if (v18)
    operator delete(v18);
  return v10;
}

void sub_2395C8EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2394630E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2395C8F00(uint64_t a1, __int32 a2, _QWORD *a3, char a4, uint64_t a5)
{
  uint64_t v9;
  __int32 *v10;
  __int32 *v11;
  uint64_t v12;
  __int32 *v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  float v17;
  float v18;
  unsigned int *v19;
  unsigned int v20;
  float v21;
  float v22;
  BOOL v23;
  float v24;
  float v25;
  unsigned int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t *v32;
  float v33;
  int v34;
  _DWORD *v35;
  float v36;
  float v37;
  unsigned int *v38;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  unsigned int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t *v50;
  float v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  __int32 *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  __int32 v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  _QWORD *v79;
  void *v80;
  _QWORD *v82;
  void *v83;
  void *v84[2];
  void *__p[2];
  int v86;
  void *v87[2];
  void *v88[2];
  int v89;
  void *v90[2];
  void *v91[2];
  int v92;
  unsigned int v93;
  unsigned int *v94;

  v93 = a2;
  v10 = *(__int32 **)(a1 + 16);
  v9 = a1 + 8;
  v11 = wmemchr(*(__int32 **)(a1 + 8), a2, ((uint64_t)v10 - *(_QWORD *)(a1 + 8)) >> 2);
  if (v11)
    v13 = v11;
  else
    v13 = v10;
  if (v13 != *(__int32 **)(v9 + 8))
    return 1;
  *(_OWORD *)v90 = 0u;
  *(_OWORD *)v91 = 0u;
  v92 = 1065353216;
  *(_OWORD *)v87 = 0u;
  *(_OWORD *)v88 = 0u;
  v89 = 1065353216;
  *(_OWORD *)v84 = 0u;
  *(_OWORD *)__p = 0u;
  v86 = 1065353216;
  v14 = sub_2395D012C(a1, a3, a4, a5, v90, v87, 1u, v12, v84, 1);
  if ((v14 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 136))
    {
      v15 = (int)v88[1];
      if (!v88[1])
        goto LABEL_28;
      v16 = v88[0];
      v17 = 0.0;
      v18 = 0.0;
      if (v88[0])
      {
        v19 = (unsigned int *)v88[0];
        do
        {
          v18 = v18 + (float)v19[5];
          v19 = *(unsigned int **)v19;
        }
        while (v19);
      }
      v20 = *(_DWORD *)(a1 + 60);
      v21 = fabsf(v18);
      v22 = 1.0 / v18;
      v23 = v18 < 0.0;
      v24 = -3.4028e38;
      if (!v23)
        v24 = 3.4028e38;
      if (v21 < 0.00000011921)
        v25 = v24;
      else
        v25 = v22;
      if (v88[0])
      {
        v17 = 0.0;
        do
        {
          v26 = v16[5];
          if (v26)
            v17 = v17 - (float)((float)(v25 * (float)v26) * logf(v25 * (float)v26));
          v16 = *(_DWORD **)v16;
        }
        while (v16);
      }
      v27 = log((double)v20);
      v28 = fabs(v27);
      v29 = 1.0 / v27;
      v23 = v27 < 0.0;
      v30 = -1.79769313e308;
      if (!v23)
        v30 = 1.79769313e308;
      v31 = v28 < 2.22044605e-16 ? v30 : v29;
      v94 = &v93;
      *((_DWORD *)sub_2394F126C(a1 + 224, &v93, (uint64_t)&unk_239EC6E98, &v94) + 5) = v15;
      v94 = &v93;
      v32 = sub_2394AAB74(a1 + 144, &v93, (uint64_t)&unk_239EC6E98, &v94);
      v33 = v31 * v17;
      *((float *)v32 + 5) = v33;
      if (*(_BYTE *)(a1 + 136))
      {
LABEL_28:
        v34 = (int)__p[1];
        if (__p[1])
        {
          v35 = __p[0];
          v36 = 0.0;
          v37 = 0.0;
          if (__p[0])
          {
            v38 = (unsigned int *)__p[0];
            do
            {
              v37 = v37 + (float)v38[5];
              v38 = *(unsigned int **)v38;
            }
            while (v38);
          }
          v39 = *(_DWORD *)(a1 + 60);
          v40 = fabsf(v37);
          v41 = 1.0 / v37;
          v23 = v37 < 0.0;
          v42 = -3.4028e38;
          if (!v23)
            v42 = 3.4028e38;
          if (v40 < 0.00000011921)
            v43 = v42;
          else
            v43 = v41;
          if (__p[0])
          {
            v36 = 0.0;
            do
            {
              v44 = v35[5];
              if (v44)
                v36 = v36 - (float)((float)(v43 * (float)v44) * logf(v43 * (float)v44));
              v35 = *(_DWORD **)v35;
            }
            while (v35);
          }
          v45 = log((double)v39);
          v46 = fabs(v45);
          v47 = 1.0 / v45;
          v23 = v45 < 0.0;
          v48 = -1.79769313e308;
          if (!v23)
            v48 = 1.79769313e308;
          if (v46 < 2.22044605e-16)
            v49 = v48;
          else
            v49 = v47;
          v94 = &v93;
          *((_DWORD *)sub_2394F126C(a1 + 264, &v93, (uint64_t)&unk_239EC6E98, &v94) + 5) = v34;
          v94 = &v93;
          v50 = sub_2394AAB74(a1 + 184, &v93, (uint64_t)&unk_239EC6E98, &v94);
          v51 = v49 * v36;
          *((float *)v50 + 5) = v51;
        }
      }
    }
    v53 = *(char **)(a1 + 16);
    v52 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)v53 >= v52)
    {
      v55 = *(char **)v9;
      v56 = (uint64_t)&v53[-*(_QWORD *)v9];
      v57 = v56 >> 2;
      v58 = (v56 >> 2) + 1;
      if (v58 >> 62)
        sub_2394189F8();
      v59 = v52 - (_QWORD)v55;
      if (v59 >> 1 > v58)
        v58 = v59 >> 1;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
        v60 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v60 = v58;
      if (v60)
      {
        if (v60 >> 62)
          sub_239418A80();
        v61 = operator new(4 * v60);
      }
      else
      {
        v61 = 0;
      }
      v62 = (__int32 *)&v61[4 * v57];
      v63 = &v61[4 * v60];
      *v62 = v93;
      v54 = v62 + 1;
      if (v53 != v55)
      {
        v64 = v53 - v55 - 4;
        if (v64 < 0x2C)
          goto LABEL_89;
        if ((unint64_t)(v53 - v61 - v56) < 0x20)
          goto LABEL_89;
        v65 = (v64 >> 2) + 1;
        v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
        v67 = &v53[-v66];
        v62 = (__int32 *)((char *)v62 - v66);
        v68 = &v61[4 * v57 - 16];
        v69 = v53 - 16;
        v70 = v65 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v71 = *(_OWORD *)v69;
          *(v68 - 1) = *((_OWORD *)v69 - 1);
          *v68 = v71;
          v68 -= 2;
          v69 -= 32;
          v70 -= 8;
        }
        while (v70);
        v53 = v67;
        if (v65 != (v65 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_89:
          do
          {
            v72 = *((_DWORD *)v53 - 1);
            v53 -= 4;
            *--v62 = v72;
          }
          while (v53 != v55);
        }
      }
      *(_QWORD *)(a1 + 8) = v62;
      *(_QWORD *)(a1 + 16) = v54;
      *(_QWORD *)(a1 + 24) = v63;
      if (v55)
        operator delete(v55);
    }
    else
    {
      *(_DWORD *)v53 = v93;
      v54 = v53 + 4;
    }
    *(_QWORD *)(a1 + 16) = v54;
    sub_2395D1258(a1, v90);
  }
  v73 = __p[0];
  if (__p[0])
  {
    do
    {
      v74 = (_QWORD *)*v73;
      operator delete(v73);
      v73 = v74;
    }
    while (v74);
  }
  v75 = v84[0];
  v84[0] = 0;
  if (v75)
    operator delete(v75);
  v76 = v88[0];
  if (v88[0])
  {
    do
    {
      v77 = (_QWORD *)*v76;
      operator delete(v76);
      v76 = v77;
    }
    while (v77);
  }
  v78 = v87[0];
  v87[0] = 0;
  if (v78)
    operator delete(v78);
  v79 = v91[0];
  if (v91[0])
  {
    do
    {
      v82 = (_QWORD *)*v79;
      v83 = (void *)v79[3];
      if (v83)
      {
        v79[4] = v83;
        operator delete(v83);
      }
      operator delete(v79);
      v79 = v82;
    }
    while (v82);
  }
  v80 = v90[0];
  v90[0] = 0;
  if (v80)
    operator delete(v80);
  return v14;
}

void sub_2395C9418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  sub_239420950((uint64_t)va);
  sub_239420950((uint64_t)va1);
  sub_2394630E4((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_2395C9444(uint64_t a1, __int32 **a2)
{
  _BOOL8 v4;
  uint64_t v5;

  v4 = sub_2395BEB58(a1, a2);
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    return sub_2395C3204(v5, (unsigned int **)a2) || v4;
  return v4;
}

uint64_t sub_2395C9490()
{
  return 1;
}

uint64_t sub_2395C9498(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double v13;
  double v14;
  float32x4_t v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  void *__p;
  char *v25;
  uint64_t v26;
  void *v27[2];
  void *v28[2];
  int v29;

  if (*(_BYTE *)(a1 + 33)
    || !*(_DWORD *)(a1 + 36)
    || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 3) != (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2
    || *(_QWORD *)(a1 + 344))
  {
    return 0;
  }
  *(_OWORD *)v27 = 0u;
  *(_OWORD *)v28 = 0u;
  v29 = 1065353216;
  v8 = sub_2395D012C(a1, a2, a3, a4, v27, 0, 0, a8, 0, 0);
  if ((v8 & 1) != 0)
  {
    __p = 0;
    v25 = 0;
    v26 = 0;
    sub_2395D1D28(v27, &__p);
    sub_2395D21C8((float *)a1, (uint64_t *)&__p, v13, v14, v15, a4, a5);
    v16 = (char *)__p;
    if (__p)
    {
      v17 = v25;
      v18 = __p;
      if (v25 != __p)
      {
        do
        {
          v19 = (void *)*((_QWORD *)v17 - 3);
          if (v19)
          {
            *((_QWORD *)v17 - 2) = v19;
            operator delete(v19);
          }
          v17 -= 32;
        }
        while (v17 != v16);
        v18 = __p;
      }
      v25 = v16;
      operator delete(v18);
    }
  }
  v20 = v28[0];
  if (v28[0])
  {
    do
    {
      v22 = (_QWORD *)*v20;
      v23 = (void *)v20[3];
      if (v23)
      {
        v20[4] = v23;
        operator delete(v23);
      }
      operator delete(v20);
      v20 = v22;
    }
    while (v22);
  }
  v21 = v27[0];
  v27[0] = 0;
  if (!v21)
    return v8;
  operator delete(v21);
  return v8;
}

void sub_2395C960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_2394E9400((void **)va);
  sub_2394630E4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2395C9628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2394630E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2395C963C(uint64_t a1, __int32 a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  double v10;
  double v11;
  float32x4_t v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;
  void *__p;
  char *v18;
  uint64_t v19;

  if (*(_BYTE *)(a1 + 33))
    return 0;
  if (!*(_DWORD *)(a1 + 36)
    || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 3) != (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2
    || *(_QWORD *)(a1 + 344))
  {
    return 0;
  }
  __p = 0;
  v18 = 0;
  v19 = 0;
  v5 = sub_2395D2458(a1, a2, a3, &__p);
  if ((v5 & 1) != 0)
    sub_2395D21C8((float *)a1, (uint64_t *)&__p, v10, v11, v12, a3, a5);
  v13 = (char *)__p;
  if (!__p)
    return v5;
  v14 = v18;
  v15 = __p;
  if (v18 != __p)
  {
    do
    {
      v16 = (void *)*((_QWORD *)v14 - 3);
      if (v16)
      {
        *((_QWORD *)v14 - 2) = v16;
        operator delete(v16);
      }
      v14 -= 32;
    }
    while (v14 != v13);
    v15 = __p;
  }
  v18 = v13;
  operator delete(v15);
  return v5;
}

void sub_2395C9764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394E9400((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_2395C9778(uint64_t a1)
{
  return *(_DWORD *)(a1 + 36) != 0;
}

void sub_2395C978C(_QWORD *a1)
{
  sub_2395C7F74(a1);
  JUMPOUT(0x23B83E31CLL);
}

unint64_t sub_2395C97B0(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v8;
  float v9;
  uint64_t v10;
  unint64_t result;

  v3 = a1[9];
  if (!v3)
    return 0;
  v4 = a1[10];
  if (!v4)
    return 0;
  v5 = a1[13];
  if (!(_DWORD)v5)
    return 0;
  v8 = pow((double)v3, (double)(v4 + 1));
  v9 = 1.0 / (float)(v3 - 1);
  if (v3 == 1)
    v9 = 3.4028e38;
  v10 = 8 * a2 * v8;
  if (!a2)
    v10 = 0;
  result = v10 + (4 * v5 + 120) * (unint64_t)(float)(v9 * (float)(v3 * v8 - 1));
  if (a3)
    return (unint64_t)(float)((float)((float)a3 / (float)v8) * (float)result);
  return result;
}

_QWORD *sub_2395C9884(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;

  v1 = a1 + 8;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  sub_23950DB64(a1 + 8);
  result = *(_QWORD **)(v1 + 56);
  if (result)
    return sub_2395BEDC8(result);
  return result;
}

void sub_2395C98C4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t j;

  v2 = a1 + 1;
  a1[2] = a1[1];
  sub_23950DB64((uint64_t)(a1 + 1));
  v3 = (_QWORD *)v2[7];
  if (v3)
  {
    sub_2395BEDC8(v3);
    v4 = (_QWORD *)a1[8];
    if (v4)
    {
      v5 = v4[7];
      for (i = v4[8]; i != v5; i -= 16)
      {
        v7 = *(std::__shared_weak_count **)(i - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
      v4[8] = v5;
      if (v4[13])
      {
        v10 = (_QWORD *)v4[12];
        if (v10)
        {
          do
          {
            v11 = (_QWORD *)*v10;
            operator delete(v10);
            v10 = v11;
          }
          while (v11);
        }
        v4[12] = 0;
        v12 = v4[11];
        if (v12)
        {
          for (j = 0; j != v12; ++j)
            *(_QWORD *)(v4[10] + 8 * j) = 0;
        }
        v4[13] = 0;
      }
    }
  }
}

uint64_t sub_2395C99AC(uint64_t result, char a2, int a3)
{
  *(_BYTE *)(result + 48) = a2;
  *(_DWORD *)(result + 52) = a3;
  return result;
}

uint64_t sub_2395C99B8()
{
  return 0;
}

BOOL sub_2395C99C0(unint64_t a1, __int32 a2, uint64_t a3, _QWORD *a4)
{
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  _DWORD *v10;
  void *__p;
  void *v13;
  _DWORD *v14;

  v7 = *(__int32 **)(a1 + 16);
  v8 = wmemchr(*(__int32 **)(a1 + 8), a2, ((uint64_t)v7 - *(_QWORD *)(a1 + 8)) >> 2);
  if (v8)
    v7 = v8;
  v9 = *(__int32 **)(a1 + 16);
  if (v7 != v9)
  {
    v10 = operator new(4uLL);
    __p = v10;
    *v10 = a2;
    v13 = v10 + 1;
    v14 = v10 + 1;
    sub_2395CAC48(a1, (uint64_t *)&__p, a4);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
  return v7 != v9;
}

void sub_2395C9A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395C9A7C(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, uint64_t *a5)
{
  double v8;
  int8x16_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  unsigned int *v14;
  unsigned int *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  unsigned int *v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float32x4_t *v34;
  uint64_t v35;
  float32x4_t v36;
  uint64_t v37;
  float *v38;
  float32x4_t *v39;
  uint64_t v40;
  float32x4_t v41;
  uint64_t v42;
  float *v43;
  void *__p;
  unsigned int *v46;

  sub_239429CA8((uint64_t)a2, a3, (char **)&__p);
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = (char *)operator new(4 * v10);
    bzero(v11, 4 * v10);
    v12 = &v11[4 * v10];
    v13 = (void *)*a5;
    if (!*a5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = 0;
  v11 = 0;
  v13 = (void *)*a5;
  if (*a5)
  {
LABEL_3:
    a5[1] = (uint64_t)v13;
    operator delete(v13);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
LABEL_4:
  *a5 = (uint64_t)v11;
  a5[1] = (uint64_t)v12;
  a5[2] = (uint64_t)v12;
  v14 = (unsigned int *)__p;
  v15 = v46;
  if (__p != v46)
  {
    do
    {
      v16 = *v14;
      if (a2[4] <= v16 || ((*(_QWORD *)(a2[3] + ((v16 >> 3) & 0x1FFFFFF8)) >> v16) & 1) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 124, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      sub_2395CAD54(*(_QWORD *)(a1 + 64), *a5, a2[9] + 24 * v16, 0, 0, 0, 0, v8, v9);
      ++v14;
    }
    while (v14 != v15);
  }
  v17 = *(_DWORD *)(a1 + 44);
  if (v17 == 1)
  {
    v18 = *(unsigned int *)(a1 + 60);
    if (!(_DWORD)v18)
      goto LABEL_41;
    v19 = *a5;
    if ((_DWORD)v18 == 1)
    {
      v20 = 0;
      v21 = 0.0;
    }
    else
    {
      v20 = v18 & 0xFFFFFFFE;
      v24 = (float *)(v19 + 4);
      v21 = 0.0;
      v25 = v20;
      do
      {
        v21 = (float)(v21 + *(v24 - 1)) + *v24;
        v24 += 2;
        v25 -= 2;
      }
      while (v25);
      if (v20 == v18)
      {
LABEL_23:
        v29 = fabsf(v21);
        v30 = -3.4028e38;
        if (v21 >= 0.0)
          v30 = 3.4028e38;
        if (v29 < 0.00000011921)
        {
          if (v18 >= 8)
          {
            v31 = v18 & 0xFFFFFFF8;
            v34 = (float32x4_t *)(v19 + 16);
            v35 = v31;
            do
            {
              v36 = vmulq_n_f32(*v34, v30);
              v34[-1] = vmulq_n_f32(v34[-1], v30);
              *v34 = v36;
              v34 += 2;
              v35 -= 8;
            }
            while (v35);
            if (v31 == v18)
              goto LABEL_41;
          }
          else
          {
            v31 = 0;
          }
          v37 = v18 - v31;
          v38 = (float *)(v19 + 4 * v31);
          do
          {
            *v38 = v30 * *v38;
            ++v38;
            --v37;
          }
          while (v37);
          goto LABEL_41;
        }
        v32 = 1.0 / v21;
        if (v18 >= 8)
        {
          v33 = v18 & 0xFFFFFFF8;
          v39 = (float32x4_t *)(v19 + 16);
          v40 = v33;
          do
          {
            v41 = vmulq_n_f32(*v39, v32);
            v39[-1] = vmulq_n_f32(v39[-1], v32);
            *v39 = v41;
            v39 += 2;
            v40 -= 8;
          }
          while (v40);
          if (v33 == v18)
            goto LABEL_41;
        }
        else
        {
          v33 = 0;
        }
        v42 = v18 - v33;
        v43 = (float *)(v19 + 4 * v33);
        do
        {
          *v43 = v32 * *v43;
          ++v43;
          --v42;
        }
        while (v42);
        goto LABEL_41;
      }
    }
    v26 = v18 - v20;
    v27 = (float *)(v19 + 4 * v20);
    do
    {
      v28 = *v27++;
      v21 = v21 + v28;
      --v26;
    }
    while (v26);
    goto LABEL_23;
  }
  if (v17 != 2)
  {
    v22 = 0;
    v23 = (unsigned int *)__p;
    if (!__p)
      return v22;
    goto LABEL_42;
  }
  sub_2396F55B0((float32x4_t *)*a5, *(unsigned int *)(a1 + 60), v8);
LABEL_41:
  v22 = 1;
  v23 = (unsigned int *)__p;
  if (__p)
  {
LABEL_42:
    v46 = v23;
    operator delete(v23);
  }
  return v22;
}

void sub_2395C9D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395C9D7C(uint64_t a1, __int32 a2, _QWORD *a3, char a4, unsigned int a5)
{
  uint64_t v8;
  __int32 *v9;
  uint64_t v10;
  __int32 *v11;
  __int32 *v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  BOOL v16;
  double v17;
  int8x16_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  std::thread *v25;
  int v26;
  char *v27;
  char *v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  char *v35;
  std::thread *v36;
  char *v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  _opaque_pthread_t *v48;
  std::thread *v49;
  std::thread *v50;
  std::thread *v51;
  std::thread *v52;
  void *v53;
  int v54;
  uint64_t *v55;
  float v56;
  float v57;
  unsigned int *v58;
  unsigned int v59;
  float v60;
  float v61;
  BOOL v62;
  float v63;
  float v64;
  unsigned int v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  uint64_t *v71;
  float v72;
  int v73;
  uint64_t *v74;
  float v75;
  float v76;
  unsigned int *v77;
  unsigned int v78;
  float v79;
  float v80;
  float v81;
  float v82;
  unsigned int v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t *v89;
  float v90;
  unint64_t v91;
  char *v92;
  _DWORD *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  __int32 *v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _OWORD *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  __int32 v111;
  _QWORD *v112;
  _QWORD *v113;
  void *v114;
  _QWORD *v115;
  _QWORD *v116;
  void *v117;
  uint64_t v119;
  uint64_t v120;
  std::thread v121;
  int v122;
  void *__p;
  std::thread *v124;
  unint64_t v125;
  int v126;
  __int128 v127;
  BOOL *v128;
  _QWORD *v129;
  pthread_rwlock_t *v130;
  __int128 *v131;
  void **v132;
  unsigned int *v133;
  BOOL v134;
  void *v135[2];
  __int128 v136;
  int v137;
  __int128 v138;
  __int128 v139;
  int v140;
  void *v141;
  _BYTE *v142;
  __int32 v143;
  pthread_rwlock_t v144;
  uint64_t v145;

  v8 = a1;
  v145 = *MEMORY[0x24BDAC8D0];
  v143 = a2;
  v9 = *(__int32 **)(a1 + 16);
  v10 = a1 + 8;
  v11 = wmemchr(*(__int32 **)(a1 + 8), a2, ((uint64_t)v9 - *(_QWORD *)(a1 + 8)) >> 2);
  if (v11)
    v12 = v11;
  else
    v12 = v9;
  if (v12 != *(__int32 **)(v10 + 8))
    return 1;
  sub_239429CA8((uint64_t)a3, a4, (char **)&v141);
  v138 = 0u;
  v139 = 0u;
  v140 = 1065353216;
  v136 = 0u;
  *(_OWORD *)v135 = 0u;
  v137 = 1065353216;
  v13 = a3[4];
  if (v13)
  {
    v14 = 0;
    v15 = (float *)(a3[6] + 20);
    v16 = 1;
    do
    {
      if (((*(_QWORD *)(a3[3] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) != 0 && *v15 > -0.00000011921)
        break;
      v16 = ++v14 < v13;
      v15 += 6;
    }
    while (v13 != v14);
  }
  else
  {
    v16 = 0;
  }
  v134 = v16;
  sub_2397A1588(&v144);
  *(_QWORD *)&v127 = v8;
  *((_QWORD *)&v127 + 1) = &v141;
  v128 = &v134;
  v129 = a3;
  v130 = &v144;
  v131 = &v138;
  v132 = v135;
  v133 = (unsigned int *)&v143;
  v19 = (unint64_t)(v142 - (_BYTE *)v141) >> 2;
  if (a5 == 1)
  {
    sub_2395CB4E4((uint64_t)&v127, 0, (unint64_t)(v142 - (_BYTE *)v141) >> 2, v17, v18);
    goto LABEL_64;
  }
  v126 = 0;
  __p = 0;
  v124 = 0;
  v125 = 0;
  if (v19 >= a5)
    v20 = a5;
  else
    v20 = (unint64_t)(v142 - (_BYTE *)v141) >> 2;
  if (*(_BYTE *)(v8 + 137))
  {
    v119 = v8;
    v120 = v10;
    if (!v20)
      goto LABEL_54;
    goto LABEL_23;
  }
  v21 = *(_QWORD *)(v8 + 64);
  if (v21)
    sub_2395D2D58(v21);
  *(_BYTE *)(v8 + 137) = 1;
  v119 = v8;
  v120 = v10;
  if (v20)
  {
LABEL_23:
    v22 = 0;
    v23 = v19 / v20;
    v24 = v19 - v19 / v20 * (v20 - 1);
    do
    {
      if (v22 == v20 - 1)
        v26 = v24;
      else
        v26 = v23;
      v122 = v26;
      sub_2395CB6CC(&v121.__t_, &v127, &v126, &v122);
      v27 = (char *)v124;
      if ((unint64_t)v124 < v125)
      {
        v124->__t_ = v121.__t_;
        v121.__t_ = 0;
        v25 = (std::thread *)(v27 + 8);
      }
      else
      {
        v28 = (char *)__p;
        v29 = (char *)v124 - (_BYTE *)__p;
        v30 = ((char *)v124 - (_BYTE *)__p) >> 3;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61)
          sub_2394189F8();
        v32 = v125 - (_QWORD)__p;
        if ((uint64_t)(v125 - (_QWORD)__p) >> 2 > v31)
          v31 = v32 >> 2;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        v34 = 0uLL;
        if (v33)
        {
          if (v33 >> 61)
            sub_239418A80();
          v35 = (char *)operator new(8 * v33);
          v34 = 0uLL;
        }
        else
        {
          v35 = 0;
        }
        v36 = (std::thread *)&v35[8 * v30];
        v37 = &v35[8 * v33];
        v36->__t_ = v121.__t_;
        v25 = v36 + 1;
        v121.__t_ = 0;
        v38 = v27 - v28;
        if (v27 != v28)
        {
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) < 0x78)
            goto LABEL_144;
          v40 = v39 >> 3;
          if (&v35[v29 - (v39 & 0xFFFFFFFFFFFFFFF8) - 8] < v27 && &v27[-8 * v40 - 8] < (char *)v36)
            goto LABEL_144;
          v41 = v40 + 1;
          v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
          v43 = &v27[-v42];
          v36 = (std::thread *)((char *)v36 - v42);
          v44 = &v35[8 * v30 - 16];
          v45 = v27 - 16;
          v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v47 = *(_OWORD *)v45;
            *((_OWORD *)v44 - 1) = *((_OWORD *)v45 - 1);
            *(_OWORD *)v44 = v47;
            *((_OWORD *)v45 - 1) = v34;
            *(_OWORD *)v45 = v34;
            v44 -= 32;
            v45 -= 32;
            v46 -= 4;
          }
          while (v46);
          v27 = v43;
          if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_144:
            do
            {
              v48 = (_opaque_pthread_t *)*((_QWORD *)v27 - 1);
              v27 -= 8;
              v36[-1].__t_ = v48;
              --v36;
              *(_QWORD *)v27 = 0;
            }
            while (v27 != v28);
          }
          v27 = (char *)__p;
          v49 = v124;
          __p = v36;
          v124 = v25;
          v125 = (unint64_t)v37;
          while (v49 != (std::thread *)v27)
            std::thread::~thread(v49 - 1);
          if (!v27)
            goto LABEL_25;
LABEL_53:
          operator delete(v27);
          goto LABEL_25;
        }
        __p = &v35[8 * v30];
        v124 = v36 + 1;
        v125 = (unint64_t)v37;
        if (v27)
          goto LABEL_53;
      }
LABEL_25:
      v124 = v25;
      std::thread::~thread(&v121);
      v126 += v122;
      ++v22;
    }
    while (v22 != v20);
  }
LABEL_54:
  v51 = (std::thread *)__p;
  v50 = v124;
  if (__p != v124)
  {
    v10 = v120;
    do
      std::thread::join(v51++);
    while (v51 != v50);
    v51 = (std::thread *)__p;
    v8 = v119;
    if (!__p)
      goto LABEL_64;
LABEL_60:
    v52 = v124;
    v53 = v51;
    if (v124 != v51)
    {
      do
        std::thread::~thread(v52 - 1);
      while (v52 != v51);
      v53 = __p;
    }
    v124 = v51;
    operator delete(v53);
    goto LABEL_64;
  }
  v8 = v119;
  v10 = v120;
  if (__p)
    goto LABEL_60;
LABEL_64:
  if (*(_BYTE *)(v8 + 136) && v134)
  {
    v54 = DWORD2(v139);
    if (*((_QWORD *)&v139 + 1))
    {
      v55 = (uint64_t *)v139;
      v56 = 0.0;
      v57 = 0.0;
      if ((_QWORD)v139)
      {
        v58 = (unsigned int *)v139;
        do
        {
          v57 = v57 + (float)v58[5];
          v58 = *(unsigned int **)v58;
        }
        while (v58);
      }
      v59 = *(_DWORD *)(v8 + 60);
      v60 = fabsf(v57);
      v61 = 1.0 / v57;
      v62 = v57 < 0.0;
      v63 = -3.4028e38;
      if (!v62)
        v63 = 3.4028e38;
      if (v60 < 0.00000011921)
        v64 = v63;
      else
        v64 = v61;
      if ((_QWORD)v139)
      {
        v56 = 0.0;
        do
        {
          v65 = *((_DWORD *)v55 + 5);
          if (v65)
            v56 = v56 - (float)((float)(v64 * (float)v65) * logf(v64 * (float)v65));
          v55 = (uint64_t *)*v55;
        }
        while (v55);
      }
      v66 = log((double)v59);
      v67 = fabs(v66);
      v68 = 1.0 / v66;
      v62 = v66 < 0.0;
      v69 = -1.79769313e308;
      if (!v62)
        v69 = 1.79769313e308;
      if (v67 < 2.22044605e-16)
        v70 = v69;
      else
        v70 = v68;
      __p = &v143;
      *((_DWORD *)sub_2394F126C(v8 + 224, (unsigned int *)&v143, (uint64_t)&unk_239EC6E98, (_DWORD **)&__p) + 5) = v54;
      __p = &v143;
      v71 = sub_2394AAB74(v8 + 144, (unsigned int *)&v143, (uint64_t)&unk_239EC6E98, (_DWORD **)&__p);
      v72 = v70 * v56;
      *((float *)v71 + 5) = v72;
    }
    v73 = DWORD2(v136);
    if (*((_QWORD *)&v136 + 1))
    {
      v74 = (uint64_t *)v136;
      v75 = 0.0;
      v76 = 0.0;
      if ((_QWORD)v136)
      {
        v77 = (unsigned int *)v136;
        do
        {
          v76 = v76 + (float)v77[5];
          v77 = *(unsigned int **)v77;
        }
        while (v77);
      }
      v78 = *(_DWORD *)(v8 + 60);
      v79 = fabsf(v76);
      v80 = 1.0 / v76;
      v62 = v76 < 0.0;
      v81 = -3.4028e38;
      if (!v62)
        v81 = 3.4028e38;
      if (v79 < 0.00000011921)
        v82 = v81;
      else
        v82 = v80;
      if ((_QWORD)v136)
      {
        v75 = 0.0;
        do
        {
          v83 = *((_DWORD *)v74 + 5);
          if (v83)
            v75 = v75 - (float)((float)(v82 * (float)v83) * logf(v82 * (float)v83));
          v74 = (uint64_t *)*v74;
        }
        while (v74);
      }
      v84 = log((double)v78);
      v85 = fabs(v84);
      v86 = 1.0 / v84;
      v62 = v84 < 0.0;
      v87 = -1.79769313e308;
      if (!v62)
        v87 = 1.79769313e308;
      if (v85 < 2.22044605e-16)
        v88 = v87;
      else
        v88 = v86;
      __p = &v143;
      *((_DWORD *)sub_2394F126C(v8 + 264, (unsigned int *)&v143, (uint64_t)&unk_239EC6E98, (_DWORD **)&__p) + 5) = v73;
      __p = &v143;
      v89 = sub_2394AAB74(v8 + 184, (unsigned int *)&v143, (uint64_t)&unk_239EC6E98, (_DWORD **)&__p);
      v90 = v88 * v75;
      *((float *)v89 + 5) = v90;
    }
  }
  v92 = *(char **)(v8 + 16);
  v91 = *(_QWORD *)(v8 + 24);
  if ((unint64_t)v92 >= v91)
  {
    v94 = *(char **)v10;
    v95 = (uint64_t)&v92[-*(_QWORD *)v10];
    v96 = v95 >> 2;
    v97 = (v95 >> 2) + 1;
    if (v97 >> 62)
      sub_2394189F8();
    v98 = v91 - (_QWORD)v94;
    if (v98 >> 1 > v97)
      v97 = v98 >> 1;
    if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
      v99 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v99 = v97;
    if (v99)
    {
      if (v99 >> 62)
        sub_239418A80();
      v100 = operator new(4 * v99);
    }
    else
    {
      v100 = 0;
    }
    v101 = (__int32 *)&v100[4 * v96];
    v102 = &v100[4 * v99];
    *v101 = v143;
    v93 = v101 + 1;
    if (v92 != v94)
    {
      v103 = v92 - v94 - 4;
      if (v103 < 0x2C)
        goto LABEL_145;
      if ((unint64_t)(v92 - v100 - v95) < 0x20)
        goto LABEL_145;
      v104 = (v103 >> 2) + 1;
      v105 = 4 * (v104 & 0x7FFFFFFFFFFFFFF8);
      v106 = &v92[-v105];
      v101 = (__int32 *)((char *)v101 - v105);
      v107 = &v100[4 * v96 - 16];
      v108 = v92 - 16;
      v109 = v104 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v110 = *(_OWORD *)v108;
        *(v107 - 1) = *((_OWORD *)v108 - 1);
        *v107 = v110;
        v107 -= 2;
        v108 -= 32;
        v109 -= 8;
      }
      while (v109);
      v92 = v106;
      if (v104 != (v104 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_145:
        do
        {
          v111 = *((_DWORD *)v92 - 1);
          v92 -= 4;
          *--v101 = v111;
        }
        while (v92 != v94);
      }
    }
    *(_QWORD *)(v8 + 8) = v101;
    *(_QWORD *)(v8 + 16) = v93;
    *(_QWORD *)(v8 + 24) = v102;
    if (v94)
      operator delete(v94);
  }
  else
  {
    *(_DWORD *)v92 = v143;
    v93 = v92 + 4;
  }
  *(_QWORD *)(v8 + 16) = v93;
  sub_2397A15B0(&v144);
  v112 = (_QWORD *)v136;
  if ((_QWORD)v136)
  {
    do
    {
      v113 = (_QWORD *)*v112;
      operator delete(v112);
      v112 = v113;
    }
    while (v113);
  }
  v114 = v135[0];
  v135[0] = 0;
  if (v114)
    operator delete(v114);
  v115 = (_QWORD *)v139;
  if ((_QWORD)v139)
  {
    do
    {
      v116 = (_QWORD *)*v115;
      operator delete(v115);
      v115 = v116;
    }
    while (v116);
  }
  v117 = (void *)v138;
  *(_QWORD *)&v138 = 0;
  if (v117)
    operator delete(v117);
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  return 1;
}

void sub_2395CA5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::thread a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_239420998(&a14);
  sub_2397A15B0((pthread_rwlock_t *)&a43);
  sub_239420950((uint64_t)&a27);
  sub_239420950((uint64_t)&a33);
  if (!__p)
    _Unwind_Resume(a1);
  a40 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2395CA63C(uint64_t a1, __int32 **a2, uint64_t a3)
{
  uint64_t v3;
  __int32 **v4;
  __int32 *v6;
  __int32 *v7;
  int64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  float *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  void *v26[2];
  void *__p[2];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v4 = a2;
  if (!(_BYTE)a3)
    goto LABEL_17;
  v7 = *a2;
  v6 = a2[1];
  v8 = (char *)v6 - (char *)*a2;
  v9 = v8 >> 2;
  v11 = *(_BYTE **)(a1 + 8);
  v10 = *(_BYTE **)(a1 + 16);
  if (v8 >> 2 != (v10 - v11) >> 2)
    goto LABEL_17;
  v26[0] = 0;
  v26[1] = 0;
  __p[0] = 0;
  if (v6 == v7)
  {
    v25 = 0;
    v12 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    if (v10 != v11)
    {
LABEL_6:
      if (v10 - v11 < 0)
        sub_2394189F8();
      v13 = (char *)operator new(v10 - v11);
      v14 = &v13[4 * v9];
      memcpy(v13, v11, v10 - v11);
      goto LABEL_10;
    }
  }
  else
  {
    if (v8 < 0)
      sub_2394189F8();
    v12 = (char *)operator new(v8);
    v25 = &v12[4 * v9];
    memcpy(v12, v7, v8);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    if (v10 != v11)
      goto LABEL_6;
  }
  v14 = 0;
  v13 = 0;
LABEL_10:
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  if (v25 - v12 == v14 - v13 && !memcmp(v12, v13, v25 - v12))
  {
    v4 = 0;
    v3 = 0;
  }
  if (v13)
    operator delete(v13);
  if (v12)
    operator delete(v12);
LABEL_17:
  if (!*(_BYTE *)(a1 + 32))
  {
    v21 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    if (!v21)
      return 0;
    v22 = *(_QWORD *)(a1 + 64);
    if (v22)
    {
      sub_2395C3978(v22, v21 >> 2);
      v23 = *(_QWORD *)(a1 + 64);
      if (v23)
        sub_2395C3A04(v23, v4, v3);
    }
  }
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)__p = 0u;
  v28 = 1065353216;
  if ((sub_2395C33D8(*(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 44), v26, v4, v3) & 1) != 0)
  {
    v15 = *(_DWORD *)(a1 + 44);
    if (v15 == 1)
      goto LABEL_23;
    if (v15 == 2)
    {
      v16 = (float *)__p[0];
      if (__p[0])
      {
        do
        {
          v16[5] = sqrtf(v16[5]);
          v16 = *(float **)v16;
        }
        while (v16);
      }
LABEL_23:
      v17 = sub_2395C3790(*(_QWORD *)(a1 + 64), v26, v4, v3);
      v18 = __p[0];
      if (!__p[0])
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  v17 = 0;
  v18 = __p[0];
  if (!__p[0])
    goto LABEL_27;
  do
  {
LABEL_26:
    v19 = (_QWORD *)*v18;
    operator delete(v18);
    v18 = v19;
  }
  while (v19);
LABEL_27:
  v20 = v26[0];
  v26[0] = 0;
  if (v20)
    operator delete(v20);
  return v17;
}

void sub_2395CA8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  if (__p)
    operator delete(__p);
  if (v18)
    operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_2395CA8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239420950((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2395CA904(unint64_t a1, _QWORD *a2, char a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t i;
  unsigned int *v16;
  unsigned int *j;
  unsigned int v18;
  _BOOL8 v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v24[2];
  void *__p[2];
  int v26;
  unsigned int v27;

  if (a5[3])
  {
    v12 = (_QWORD *)a5[2];
    if (v12)
    {
      do
      {
        v13 = (_QWORD *)*v12;
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
    a5[2] = 0;
    v14 = a5[1];
    if (v14)
    {
      for (i = 0; i != v14; ++i)
        *(_QWORD *)(*a5 + 8 * i) = 0;
    }
    a5[3] = 0;
  }
  v16 = *(unsigned int **)(a1 + 8);
  for (j = *(unsigned int **)(a1 + 16);
        v16 != j;
        *((_DWORD *)sub_2394AAB74((uint64_t)a5, &v27, (uint64_t)&unk_239EC6E98, (_DWORD **)v24) + 5) = 0)
  {
    v18 = *v16++;
    v27 = v18;
    v24[0] = &v27;
  }
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)__p = 0u;
  v26 = 1065353216;
  if ((sub_2395CB894(a1, a2, a3, a4, v24) & 1) != 0)
  {
    v19 = sub_2395CBC44(a1, (uint64_t)v24, a4, a6, a5, 1, 0, 0);
    v20 = __p[0];
    if (!__p[0])
      goto LABEL_15;
  }
  else
  {
    v19 = 0;
    v20 = __p[0];
    if (!__p[0])
      goto LABEL_15;
  }
  do
  {
    v21 = (_QWORD *)*v20;
    operator delete(v20);
    v20 = v21;
  }
  while (v21);
LABEL_15:
  v22 = v24[0];
  v24[0] = 0;
  if (v22)
    operator delete(v22);
  return v19;
}

void sub_2395CAA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239420950((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2395CAA90(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t i;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  __int32 *v19;
  __int32 *v20;
  __int32 *v21;
  uint64_t *v22;
  _BOOL8 v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v28[2];
  void *__p[2];
  int v30;
  unsigned int v31;
  __int32 v32;

  v32 = a2;
  if (a5[3])
  {
    v12 = (_QWORD *)a5[2];
    if (v12)
    {
      do
      {
        v13 = (_QWORD *)*v12;
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
    a5[2] = 0;
    v14 = a5[1];
    if (v14)
    {
      for (i = 0; i != v14; ++i)
        *(_QWORD *)(*a5 + 8 * i) = 0;
    }
    a5[3] = 0;
  }
  v16 = (unsigned int *)a1[1];
  v17 = (unsigned int *)a1[2];
  if (v16 == v17)
  {
    v19 = (__int32 *)a1[1];
  }
  else
  {
    do
    {
      v18 = *v16++;
      v31 = v18;
      v28[0] = &v31;
      *((_DWORD *)sub_2394AAB74((uint64_t)a5, &v31, (uint64_t)&unk_239EC6E98, (_DWORD **)v28) + 5) = 0;
    }
    while (v16 != v17);
    v19 = (__int32 *)a1[1];
    v16 = (unsigned int *)a1[2];
  }
  *(_OWORD *)v28 = 0u;
  *(_OWORD *)__p = 0u;
  v30 = 1065353216;
  v20 = wmemchr(v19, a2, ((char *)v16 - (char *)v19) >> 2);
  if (v20)
    v21 = v20;
  else
    v21 = (__int32 *)v16;
  if (v21 == (__int32 *)a1[2])
  {
    v23 = 0;
    v24 = __p[0];
    if (!__p[0])
      goto LABEL_20;
    goto LABEL_19;
  }
  v22 = (uint64_t *)a1[8];
  if (v22)
    sub_2394AAAA4(v22, a2, (uint64_t)v28);
  v23 = sub_2395CBC44((unint64_t)a1, (uint64_t)v28, a3, a6, a5, a4, &v32, 1u);
  v24 = __p[0];
  if (__p[0])
  {
    do
    {
LABEL_19:
      v25 = (_QWORD *)*v24;
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
LABEL_20:
  v26 = v28[0];
  v28[0] = 0;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_2395CAC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239420950((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_2395CAC48(unint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  void *v9;
  void *v10;

  v4 = a2[1] - *a2;
  if (!v4)
  {
    a3[1] = *a3;
    return result;
  }
  v6 = result;
  v7 = (v4 >> 2) * *(unsigned int *)(result + 60);
  if (v7)
  {
    if (v7 >> 62)
      sub_2394189F8();
    v8 = 4 * v7;
    v9 = operator new(4 * v7);
    v7 = (unint64_t)v9 + 4 * v7;
    bzero(v9, v8);
    v10 = (void *)*a3;
    if (!*a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v9 = 0;
  v10 = (void *)*a3;
  if (*a3)
  {
LABEL_5:
    a3[1] = v10;
    operator delete(v10);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
LABEL_6:
  *a3 = v9;
  a3[1] = v7;
  a3[2] = v7;
  result = *(_QWORD *)(v6 + 64);
  if (result)
    return sub_2395C2CD8(result, a2, a3);
  return result;
}

void sub_2395CAD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395CAD54(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t *a6, char a7, double a8, int8x16_t a9)
{
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  int8x8_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  uint64_t v39;
  int8x8_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t *v44;
  uint64_t v45;
  float32x4_t *v46;
  int8x16_t *v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x8_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float *v59;
  char *v60;
  uint64_t v61;
  float *v62;
  int v63;
  float v64;
  float v65;
  pthread_rwlock_t *v66;
  _QWORD *v67;
  unint64_t v68;
  uint8x8_t v69;
  unint64_t v70;
  uint64_t **v71;
  uint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  pthread_rwlock_t *v77;
  float v79;
  uint64_t *v80;
  unsigned int v81;
  unsigned int *v82;

  for (i = a1; *(_BYTE *)(i + 1); i = *(_QWORD *)(v23 + 16 * v22))
  {
    v23 = *(_QWORD *)(i + 56);
    v24 = *(_QWORD *)(i + 64);
    if (v24 == v23)
    {
      v22 = 0;
      v23 = *(_QWORD *)(i + 64);
    }
    else
    {
      v25 = 0;
      v22 = 0;
      v26 = 0;
      v27 = 3.4028e38;
      do
      {
        v28 = *(_QWORD *)(v23 + v25);
        if (v28)
        {
          v29 = *(unsigned int *)(a3 + 16);
          if ((_DWORD)v29 != *(_DWORD *)(v28 + 48))
            sub_239EC0BCC();
          if (*(_BYTE *)i)
          {
            if ((_DWORD)v29 != 64)
              sub_239EC0B9C();
            *(float *)&a8 = (float)sub_2395CB1D0(*(_QWORD **)a3, *(float32x4_t **)(v28 + 32));
          }
          else
          {
            *(float *)&a8 = sub_2396F4C8C(*(_QWORD *)a3, *(_QWORD *)(v28 + 32), v29, a8, a9);
          }
          if (*(float *)&a8 < v27)
          {
            v27 = *(float *)&a8;
            v22 = v26;
          }
          v23 = *(_QWORD *)(i + 56);
          v24 = *(_QWORD *)(i + 64);
        }
        ++v26;
        v25 += 16;
      }
      while (v26 < (v24 - v23) >> 4);
    }
  }
  v81 = a4;
  if (a7)
  {
    v16 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v16)
    {
      v17 = *(_QWORD *)a3;
      v18 = *(_QWORD *)(i + 32);
      v19 = (*(_DWORD *)(i + 4) * v16);
      v20 = *a6;
      if (v16 < 8)
      {
        v21 = 0;
        goto LABEL_42;
      }
      v21 = 0;
      v30 = v20 + 4 * v19;
      v31 = v20 + 4 * v16 + 4 * v19;
      v33 = v30 < v18 + 4 * v16 && v18 < v31;
      v34 = v17 >= v31 || v30 >= v17 + v16;
      if (!v34 || v33)
        goto LABEL_42;
      if (v16 >= 0x10)
      {
        v21 = v16 & 0xFFFFFFF0;
        v44 = (float32x4_t *)(v20 + 4 * v19);
        v45 = v21;
        v46 = *(float32x4_t **)(i + 32);
        v47 = *(int8x16_t **)a3;
        do
        {
          v48 = *v47++;
          v49 = v48;
          v50 = (int8x8_t)vextq_s8(v49, v49, 8uLL).u64[0];
          v52 = v46[2];
          v51 = v46[3];
          v54 = *v46;
          v53 = v46[1];
          v46 += 4;
          v55 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)v49.i8), 8uLL), 8uLL))), v53);
          v56 = v44[2];
          v57 = vaddq_f32(vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v50, *(int8x8_t *)v48.i8), 8uLL), 8uLL))), v51), v44[3]);
          v58 = vaddq_f32(v55, v44[1]);
          *v44 = vaddq_f32(vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)v48.i8), 8uLL), 8uLL))), v54), *v44);
          v44[1] = v58;
          v44[2] = vaddq_f32(vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v50, *(int8x8_t *)v48.i8), 8uLL), 8uLL))), v52), v56);
          v44[3] = v57;
          v44 += 4;
          v45 -= 16;
        }
        while (v45);
        if (v21 == v16)
          goto LABEL_44;
        if ((v16 & 8) == 0)
        {
LABEL_42:
          v59 = (float *)(v18 + 4 * v21);
          v60 = (char *)(v17 + v21);
          v61 = v16 - v21;
          v62 = (float *)(v20 + 4 * (v21 + v19));
          do
          {
            v63 = *v60++;
            v64 = (float)v63;
            v65 = *v59++;
            *v62 = (float)(v64 - v65) + *v62;
            ++v62;
            --v61;
          }
          while (v61);
          goto LABEL_44;
        }
      }
      else
      {
        v21 = 0;
      }
      v35 = v21;
      v21 = v16 & 0xFFFFFFF8;
      v36 = (int8x8_t *)(v17 + v35);
      v37 = (float32x4_t *)(v18 + 4 * v35);
      v38 = (float32x4_t *)(v20 + 4 * (v35 + v19));
      v39 = v35 - v21;
      do
      {
        v40 = *v36++;
        v42 = *v37;
        v41 = v37[1];
        v37 += 2;
        v43 = vaddq_f32(vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v40, v40), 8uLL), 8uLL))), v41), v38[1]);
        *v38 = vaddq_f32(vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v40, v40), 8uLL), 8uLL))), v42), *v38);
        v38[1] = v43;
        v38 += 2;
        v39 += 8;
      }
      while (v39);
      if (v21 != v16)
        goto LABEL_42;
    }
  }
LABEL_44:
  v66 = *(pthread_rwlock_t **)(i + 16);
  if (v66)
    j__pthread_rwlock_wrlock(v66);
  if (a2)
    *(float *)(a2 + 4 * *(unsigned int *)(i + 4)) = *(float *)(i + 8)
                                                    + *(float *)(a2 + 4 * *(unsigned int *)(i + 4));
  if (!a5)
  {
LABEL_70:
    v77 = *(pthread_rwlock_t **)(i + 16);
    if (v77)
      goto LABEL_71;
    return *(unsigned int *)(i + 4);
  }
  v67 = (_QWORD *)(i + 80);
  v68 = *(_QWORD *)(i + 88);
  if (!v68)
    goto LABEL_69;
  v69 = (uint8x8_t)vcnt_s8((int8x8_t)v68);
  v69.i16[0] = vaddlv_u8(v69);
  if (v69.u32[0] > 1uLL)
  {
    v70 = a4;
    if (v68 <= a4)
      v70 = a4 % v68;
  }
  else
  {
    v70 = ((_DWORD)v68 - 1) & a4;
  }
  v71 = *(uint64_t ***)(*v67 + 8 * v70);
  if (!v71 || (v72 = *v71) == 0)
  {
LABEL_69:
    v76 = *(_DWORD *)(i + 8);
    v82 = &v81;
    *((_DWORD *)sub_2394AAB74((uint64_t)v67, &v81, (uint64_t)&unk_239EC6E98, &v82) + 5) = v76;
    goto LABEL_70;
  }
  if (v69.u32[0] < 2uLL)
  {
    v73 = v68 - 1;
    while (1)
    {
      v75 = v72[1];
      if (v75 == a4)
      {
        if (*((_DWORD *)v72 + 4) == a4)
          goto LABEL_73;
      }
      else if ((v75 & v73) != v70)
      {
        goto LABEL_69;
      }
      v72 = (uint64_t *)*v72;
      if (!v72)
        goto LABEL_69;
    }
  }
  while (1)
  {
    v74 = v72[1];
    if (v74 == a4)
      break;
    if (v74 >= v68)
      v74 %= v68;
    if (v74 != v70)
      goto LABEL_69;
LABEL_59:
    v72 = (uint64_t *)*v72;
    if (!v72)
      goto LABEL_69;
  }
  if (*((_DWORD *)v72 + 4) != a4)
    goto LABEL_59;
LABEL_73:
  v79 = *(float *)(i + 8);
  v82 = &v81;
  v80 = sub_2394AAB74((uint64_t)v67, &v81, (uint64_t)&unk_239EC6E98, &v82);
  *((float *)v80 + 5) = v79 + *((float *)v80 + 5);
  v77 = *(pthread_rwlock_t **)(i + 16);
  if (!v77)
    return *(unsigned int *)(i + 4);
LABEL_71:
  j__pthread_rwlock_unlock(v77);
  return *(unsigned int *)(i + 4);
}

unint64_t sub_2395CB1D0(_QWORD *a1, float32x4_t *a2)
{
  int8x16_t *v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v17;
  uint64_t v18;
  _BYTE v19[6];
  char v20;

  v4 = (int8x16_t *)operator new(0x40uLL);
  *(int16x4_t *)v5.i8 = vmovn_s32(vcvtq_s32_f32(a2[2]));
  v5.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(a2[3]));
  *(int16x4_t *)v6.i8 = vmovn_s32(vcvtq_s32_f32(*a2));
  v6.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(a2[1]));
  *(int16x4_t *)v7.i8 = vmovn_s32(vcvtq_s32_f32(a2[6]));
  v7.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(a2[7]));
  *(int16x4_t *)v8.i8 = vmovn_s32(vcvtq_s32_f32(a2[4]));
  v8.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(a2[5]));
  *v4 = vuzp1q_s8(v6, v5);
  v4[1] = vuzp1q_s8(v8, v7);
  *(int16x4_t *)v5.i8 = vmovn_s32(vcvtq_s32_f32(a2[10]));
  v5.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(a2[11]));
  *(int16x4_t *)v6.i8 = vmovn_s32(vcvtq_s32_f32(a2[8]));
  v6.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(a2[9]));
  *(int16x4_t *)v7.i8 = vmovn_s32(vcvtq_s32_f32(a2[14]));
  v7.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(a2[15]));
  *(int16x4_t *)v8.i8 = vmovn_s32(vcvtq_s32_f32(a2[12]));
  v8.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(a2[13]));
  v4[2] = vuzp1q_s8(v6, v5);
  v4[3] = vuzp1q_s8(v8, v7);
  v18 = v4->i64[0] ^ *a1;
  v20 = 1;
  v17 = sub_2394AA530(&v18, 0, (uint64_t)v19, 0, &v20);
  v18 = v4->i64[1] ^ a1[1];
  v20 = 1;
  v9 = sub_2394AA530(&v18, 0, (uint64_t)v19, 0, &v20);
  v18 = v4[1].i64[0] ^ a1[2];
  v20 = 1;
  v10 = sub_2394AA530(&v18, 0, (uint64_t)v19, 0, &v20);
  v18 = v4[1].i64[1] ^ a1[3];
  v20 = 1;
  v11 = sub_2394AA530(&v18, 0, (uint64_t)v19, 0, &v20);
  v18 = v4[2].i64[0] ^ a1[4];
  v20 = 1;
  v12 = sub_2394AA530(&v18, 0, (uint64_t)v19, 0, &v20);
  v18 = v4[2].i64[1] ^ a1[5];
  v20 = 1;
  v13 = sub_2394AA530(&v18, 0, (uint64_t)v19, 0, &v20);
  v18 = v4[3].i64[0] ^ a1[6];
  v20 = 1;
  v14 = sub_2394AA530(&v18, 0, (uint64_t)v19, 0, &v20);
  v18 = v4[3].i64[1] ^ a1[7];
  v20 = 1;
  v15 = v9
      + (unint64_t)v17
      + v10
      + v11
      + v12
      + v13
      + v14
      + sub_2394AA530(&v18, 0, (uint64_t)v19, 0, &v20);
  operator delete(v4);
  return v15;
}

uint64_t sub_2395CB4E4(uint64_t result, unsigned int a2, int a3, double a4, int8x16_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  float v12;
  pthread_rwlock_t *v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int *v17;

  v5 = a3 + a2;
  if (v5 > a2)
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = a2;
    do
    {
      v9 = *(unsigned int *)(**(_QWORD **)(v6 + 8) + 4 * v8);
      v16 = 0;
      v10 = *(_QWORD **)(v6 + 24);
      if (v10[4] <= v9 || (*(_QWORD *)(v10[3] + 8 * (v9 >> 6)) & (1 << v9)) == 0)
        sub_239EC0C2C();
      result = sub_2395CAD54(*(_QWORD *)(v7 + 64), 0, v10[9] + 24 * v9, **(_DWORD **)(v6 + 56), 1, 0, 0, a4, a5);
      v16 = result;
      if (*(_BYTE *)(v7 + 136) && **(_BYTE **)(v6 + 16))
      {
        v11 = *(_QWORD **)(v6 + 24);
        if (v11[4] <= v9 || (*(_QWORD *)(v11[3] + 8 * (v9 >> 6)) & (1 << v9)) == 0)
          sub_239EC0C5C();
        v12 = *(float *)(v11[6] + 24 * v9 + 20);
        v13 = *(pthread_rwlock_t **)(v6 + 32);
        j__pthread_rwlock_wrlock(v13);
        if (v12 <= 0.00000011921)
          v14 = *(_QWORD *)(v6 + 48);
        else
          v14 = *(_QWORD *)(v6 + 40);
        v17 = &v16;
        v15 = sub_2394F126C(v14, &v16, (uint64_t)&unk_239EC6E98, &v17);
        ++*((_DWORD *)v15 + 5);
        result = j__pthread_rwlock_unlock(v13);
      }
      ++v8;
    }
    while (v5 != v8);
  }
  return result;
}

void sub_2395CB69C(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  j__pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2395CB6CC(pthread_t *a1, _OWORD *a2, _DWORD *a3, int *a4)
{
  std::__thread_struct *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;

  v8 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v8);
  v9 = (char *)operator new();
  v10 = a2[1];
  *(_OWORD *)(v9 + 8) = *a2;
  *(_OWORD *)(v9 + 24) = v10;
  v11 = a2[3];
  *(_OWORD *)(v9 + 40) = a2[2];
  *(_QWORD *)v9 = v8;
  *(_OWORD *)(v9 + 56) = v11;
  v12 = *a4;
  *((_DWORD *)v9 + 18) = *a3;
  *((_DWORD *)v9 + 19) = v12;
  v13 = pthread_create(a1, 0, (void *(__cdecl *)(void *))sub_2395CB7F8, v9);
  if (v13)
  {
    std::__throw_system_error(v13, "thread constructor failed");
    __break(1u);
  }
}

void sub_2395CB7A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239478F54((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395CB7B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_2395CB7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  sub_2395C319C(&a9);
  sub_239478F54(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2395CB7F8(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  double v4;
  int8x16_t v5;
  const void *v6;
  uint64_t v7;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  sub_2395CB4E4(a1 + 8, *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76), v4, v5);
  v6 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    v7 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v7, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](a1, 0x1070C402237A5E8);
  return 0;
}

void sub_2395CB880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395C319C((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2395CB894(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  uint8x8_t v13;
  int8x16_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  float *v29;
  float v30;
  float *v31;
  float *v32;
  float v33;
  float *v34;
  uint64_t v35;
  unsigned int *v36;
  float v37;
  float v38;
  float v39;
  BOOL v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v46;
  uint64_t v47;
  void *__p;
  unsigned int *v49;

  if (a5[3])
  {
    v9 = (_QWORD *)a5[2];
    if (v9)
    {
      do
      {
        v10 = (_QWORD *)*v9;
        operator delete(v9);
        v9 = v10;
      }
      while (v10);
    }
    a5[2] = 0;
    v11 = a5[1];
    if (v11)
    {
      for (i = 0; i != v11; ++i)
        *(_QWORD *)(*a5 + 8 * i) = 0;
    }
    a5[3] = 0;
  }
  sub_239429CA8((uint64_t)a2, a3, (char **)&__p);
  v15 = (unsigned int *)__p;
  v16 = v49;
  if (__p != v49)
  {
    while (1)
    {
      v17 = *v15;
      if (a2[4] <= v17 || ((*(_QWORD *)(a2[3] + ((v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) == 0)
        break;
      v18 = sub_2395CC008(*(_QWORD *)(a1 + 64), (uint64_t *)(a2[9] + 24 * v17), *(double *)&v13, v14);
      v19 = *(_QWORD *)(a1 + 80);
      if (v18 >= (unint64_t)((*(_QWORD *)(a1 + 88) - v19) >> 3))
      {
        v46 = 472;
LABEL_68:
        sub_239A444D4((uint64_t)"unknown file", v46, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v20 = *(_QWORD *)(v19 + 8 * v18);
      if (!v20)
      {
        sub_239A444D4((uint64_t)"unknown file", 474, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v21 = a5[1];
      if (v21)
      {
        v13 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
        v13.i16[0] = vaddlv_u8(v13);
        if (v13.u32[0] > 1uLL)
        {
          v22 = v18;
          if (v21 <= v18)
            v22 = v18 % v21;
        }
        else
        {
          v22 = ((_DWORD)v21 - 1) & v18;
        }
        v23 = *(uint64_t ***)(*a5 + 8 * v22);
        if (v23)
        {
          v24 = *v23;
          if (v24)
          {
            if (v13.u32[0] < 2uLL)
            {
              v25 = v21 - 1;
              while (1)
              {
                v27 = v24[1];
                if (v27 == v18)
                {
                  if (*((_DWORD *)v24 + 4) == v18)
                    goto LABEL_34;
                }
                else if ((v27 & v25) != v22)
                {
                  goto LABEL_33;
                }
                v24 = (uint64_t *)*v24;
                if (!v24)
                  goto LABEL_33;
              }
            }
            do
            {
              v26 = v24[1];
              if (v26 == v18)
              {
                if (*((_DWORD *)v24 + 4) == v18)
                  goto LABEL_34;
              }
              else
              {
                if (v26 >= v21)
                  v26 %= v21;
                if (v26 != v22)
                  break;
              }
              v24 = (uint64_t *)*v24;
            }
            while (v24);
          }
        }
      }
LABEL_33:
      v47 = v18;
      v24 = sub_2394AA7A4((uint64_t)a5, (unsigned int *)&v47, &v47);
LABEL_34:
      v14.i32[0] = *((_DWORD *)v24 + 5);
      *(float *)v13.i32 = *(float *)(v20 + 8) + *(float *)v14.i32;
      *((_DWORD *)v24 + 5) = v13.i32[0];
      if (++v15 == v16)
        goto LABEL_35;
    }
    v46 = 124;
    goto LABEL_68;
  }
LABEL_35:
  v28 = *(_DWORD *)(a1 + 44);
  if (v28 == 1)
  {
    v32 = (float *)a5[2];
    if (v32)
    {
      v33 = 0.0;
      v34 = (float *)a5[2];
      do
      {
        v33 = v33 + v34[5];
        v34 = *(float **)v34;
      }
      while (v34);
    }
    else
    {
      v33 = 0.0;
    }
    v42 = fabsf(v33);
    v43 = 1.0 / v33;
    v40 = v33 < 0.0;
    v44 = -3.4028e38;
    if (!v40)
      v44 = 3.4028e38;
    if (v42 >= 0.00000011921)
      v44 = v43;
    for (; v32; v32 = *(float **)v32)
      v32[5] = v44 * v32[5];
  }
  else
  {
    if (v28 != 2)
    {
      v35 = 0;
      v36 = (unsigned int *)__p;
      if (!__p)
        return v35;
      goto LABEL_63;
    }
    v29 = (float *)a5[2];
    if (v29)
    {
      v30 = 0.0;
      v31 = (float *)a5[2];
      do
      {
        v30 = v30 + (float)(v31[5] * v31[5]);
        v31 = *(float **)v31;
      }
      while (v31);
    }
    else
    {
      v30 = 0.0;
    }
    v37 = sqrtf(v30);
    v38 = fabsf(v37);
    v39 = 1.0 / v37;
    v40 = v37 < 0.0;
    v41 = -3.4028e38;
    if (!v40)
      v41 = 3.4028e38;
    if (v38 >= 0.00000011921)
      v41 = v39;
    for (; v29; v29 = *(float **)v29)
      v29[5] = v41 * v29[5];
  }
  v35 = 1;
  v36 = (unsigned int *)__p;
  if (__p)
  {
LABEL_63:
    v49 = v36;
    operator delete(v36);
  }
  return v35;
}

void sub_2395CBC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2395CBC44(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, __int32 *a7, unsigned __int8 a8)
{
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  __int32 *v20;
  unsigned int v21;
  float *v22;
  __int32 *v23;
  __int32 *v24;
  uint64_t v25;
  __int32 *v26;
  __int32 *v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  uint64_t *j;
  char v32;
  __int32 *v33;
  int v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float v40;
  unint64_t v41;
  int v42;
  int8x8_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  float v52;
  int v53;
  char v54;
  void *__p;
  char *v56;
  char *v57;
  unsigned int v58;

  if (a5[3])
  {
    v15 = (_QWORD *)a5[2];
    if (v15)
    {
      do
      {
        v16 = (_QWORD *)*v15;
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
    a5[2] = 0;
    v17 = a5[1];
    if (v17)
    {
      for (i = 0; i != v17; ++i)
        *(_QWORD *)(*a5 + 8 * i) = 0;
    }
    a5[3] = 0;
  }
  v54 = a8;
  v19 = a8;
  v53 = a6;
  if (!a8)
    a6 = 1;
  if ((a6 & 1) == 0)
  {
    v20 = a7;
    v21 = *a7 + 1;
    v22 = *(float **)(a2 + 16);
    if (!v22)
      goto LABEL_14;
    while (1)
    {
LABEL_37:
      v36 = *((unsigned int *)v22 + 4);
      v37 = *(_QWORD *)(a1 + 80);
      if (v36 >= (*(_QWORD *)(a1 + 88) - v37) >> 3)
        sub_239EBFB94();
      v38 = *(_QWORD *)(v37 + 8 * v36);
      if (!v38)
        sub_239EC0C8C();
      v39 = *(float **)(v38 + 96);
      if (v39)
        break;
LABEL_36:
      v22 = *(float **)v22;
      if (!v22)
        goto LABEL_14;
    }
    while (1)
    {
      v41 = *((unsigned int *)v39 + 4);
      if (v41 >= v21)
        v42 = 1;
      else
        v42 = a6;
      if (v42 != 1)
        goto LABEL_43;
      v43 = (int8x8_t)a5[1];
      if (v43)
      {
        v44 = (uint8x8_t)vcnt_s8(v43);
        v44.i16[0] = vaddlv_u8(v44);
        if (v44.u32[0] > 1uLL)
        {
          v45 = *((unsigned int *)v39 + 4);
          if (*(_QWORD *)&v43 <= v41)
            v45 = v41 % *(_QWORD *)&v43;
        }
        else
        {
          v45 = (v43.i32[0] - 1) & v41;
        }
        v46 = *(uint64_t ***)(*a5 + 8 * v45);
        if (v46)
        {
          v47 = *v46;
          if (*v46)
          {
            if (v44.u32[0] < 2uLL)
            {
              v48 = *(_QWORD *)&v43 - 1;
              while (1)
              {
                v50 = v47[1];
                if (v50 == v41)
                {
                  if (*((_DWORD *)v47 + 4) == (_DWORD)v41)
                    goto LABEL_69;
                }
                else if ((v50 & v48) != v45)
                {
                  goto LABEL_68;
                }
                v47 = (uint64_t *)*v47;
                if (!v47)
                  goto LABEL_68;
              }
            }
            do
            {
              v49 = v47[1];
              if (v49 == v41)
              {
                if (*((_DWORD *)v47 + 4) == (_DWORD)v41)
                  goto LABEL_69;
              }
              else
              {
                if (v49 >= *(_QWORD *)&v43)
                  v49 %= *(_QWORD *)&v43;
                if (v49 != v45)
                  break;
              }
              v47 = (uint64_t *)*v47;
            }
            while (v47);
          }
        }
      }
LABEL_68:
      __p = (void *)v41;
      v47 = sub_2394AA7A4((uint64_t)a5, (unsigned int *)&__p, &__p);
LABEL_69:
      v51 = *(_DWORD *)(a1 + 44);
      if (v51 == 2)
      {
        v40 = *((float *)v47 + 5) + (float)(v22[5] * v39[5]);
      }
      else
      {
        if (v51 != 1)
          goto LABEL_43;
        v52 = v39[5];
        if (v52 >= v22[5])
          v52 = v22[5];
        v40 = *((float *)v47 + 5) + v52;
      }
      *((float *)v47 + 5) = v40;
LABEL_43:
      v39 = *(float **)v39;
      if (!v39)
        goto LABEL_36;
    }
  }
  v20 = a7;
  v21 = 0;
  v22 = *(float **)(a2 + 16);
  if (v22)
    goto LABEL_37;
LABEL_14:
  if (!*(_DWORD *)(a4 + 4) || !*(_DWORD *)a4)
    return 1;
  v23 = *(__int32 **)(a1 + 8);
  v24 = *(__int32 **)(a1 + 16);
  v25 = v24 - v23;
  if (v19)
  {
    v26 = wmemchr(v23, *v20, v24 - v23);
    v27 = v26 ? v26 : v24;
    if (v27 != *(__int32 **)(a1 + 16))
    {
      LODWORD(v25) = v25 - 1;
      v58 = ((unint64_t)v27 - *(_QWORD *)(a1 + 8)) >> 2;
      __p = &v58;
      *((_DWORD *)sub_2394AAB74((uint64_t)a5, &v58, (uint64_t)&unk_239EC6E98, (_DWORD **)&__p) + 5) = -8388609;
    }
  }
  v28 = *(_DWORD *)(a4 + 4);
  if (v28 > v25)
    return 1;
  __p = 0;
  v56 = 0;
  v57 = 0;
  v29 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v29)
  {
    v30 = (char *)operator new(4 * v29);
    bzero(v30, 4 * v29);
    __p = v30;
    v56 = &v30[4 * v29];
    v57 = v56;
    j = *(uint64_t **)(a2 + 16);
    if (j)
      goto LABEL_25;
  }
  else
  {
    v30 = 0;
    __p = 0;
    v56 = 0;
    v57 = 0;
    for (j = *(uint64_t **)(a2 + 16); j; j = (uint64_t *)*j)
LABEL_25:
      *(_DWORD *)&v30[4 * *((unsigned int *)j + 4)] = *((_DWORD *)j + 5);
  }
  if (v53)
    v32 = 0;
  else
    v32 = v54;
  if (v53)
    v33 = 0;
  else
    v33 = v20;
  v34 = sub_2395CC100(a1, v28, *(unsigned __int8 *)(a4 + 16), *(_DWORD *)a4, (float32x4_t **)&__p, a5, v33, v32, *(long double *)(a4 + 8));
  if (__p)
  {
    v56 = (char *)__p;
    operator delete(__p);
  }
  return v34 != 0;
}

void sub_2395CBFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395CC008(uint64_t a1, uint64_t *a2, double a3, int8x16_t a4)
{
  uint64_t i;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;

  for (i = a1; *(_BYTE *)(i + 1); i = *(_QWORD *)(v7 + 16 * v6))
  {
    v7 = *(_QWORD *)(i + 56);
    v8 = *(_QWORD *)(i + 64);
    if (v8 == v7)
    {
      v6 = 0;
      v7 = *(_QWORD *)(i + 64);
    }
    else
    {
      v9 = 0;
      v6 = 0;
      v10 = 0;
      v11 = 3.4028e38;
      do
      {
        v12 = *(_QWORD *)(v7 + v9);
        if (v12)
        {
          v13 = *((unsigned int *)a2 + 4);
          if ((_DWORD)v13 != *(_DWORD *)(v12 + 48))
            sub_239EBFDA0();
          if (*(_BYTE *)i)
          {
            if ((_DWORD)v13 != 64)
              sub_239EBFD70();
            *(float *)&a3 = (float)sub_2395CB1D0((_QWORD *)*a2, *(float32x4_t **)(v12 + 32));
          }
          else
          {
            *(float *)&a3 = sub_2396F4C8C(*a2, *(_QWORD *)(v12 + 32), v13, a3, a4);
          }
          if (*(float *)&a3 < v11)
          {
            v11 = *(float *)&a3;
            v6 = v10;
          }
          v7 = *(_QWORD *)(i + 56);
          v8 = *(_QWORD *)(i + 64);
        }
        ++v10;
        v9 += 16;
      }
      while (v10 < (v8 - v7) >> 4);
    }
  }
  return *(unsigned int *)(i + 4);
}

uint64_t sub_2395CC100(unint64_t a1, unsigned int a2, int a3, int a4, float32x4_t **a5, uint64_t *a6, _DWORD *a7, char a8, long double a9)
{
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  uint64_t v12;
  uint64_t *v14;
  char *v19;
  unsigned int *v20;
  unsigned int *v21;
  size_t v22;
  char *v23;
  int32x2_t *v24;
  float *v25;
  float v26;
  uint64_t *v27;
  _BOOL4 v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int32x2_t *v33;
  int32x2_t *v34;
  char *v35;
  long double v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  float *v40;
  float32x4_t *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  int v47;
  uint64_t v48;
  float32x4_t *v49;
  float32x4_t v50;
  float *v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  float32x4_t *v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  void *v60;
  char *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  char *v68;
  unint64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  float *v78;
  uint64_t v79;
  uint64_t v80;
  float *v81;
  float v82;
  float v83;
  float v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  float32x4_t *v88;
  uint64_t v89;
  float32x4_t v90;
  uint64_t v91;
  float *v92;
  float32x4_t *v93;
  uint64_t v94;
  float32x4_t v95;
  uint64_t v96;
  float *v97;
  uint64_t *i;
  _DWORD *v99;
  int8x8_t v100;
  uint64_t v101;
  unsigned int *v102;
  uint8x8_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t **v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  float *v111;
  float *v112;
  BOOL v113;
  float *v114;
  float v115;
  float *v116;
  float v117;
  float v118;
  float v119;
  float *v120;
  float v121;
  float v122;
  BOOL v123;
  float v124;
  int8x8_t v125;
  uint64_t v126;
  unsigned int *v127;
  uint8x8_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t **v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  _DWORD *v137;
  int v138;
  unint64_t v140;
  float32x4_t **v141;
  size_t v142;
  uint64_t *v144;
  void *__p;
  void *v147;
  uint64_t v148;
  void *p_p;
  char *v150;
  char *v151;
  void *v152;
  int32x2_t *v153;
  char *v154;
  void *v155;
  unsigned int *v156;
  unsigned int *v157;
  _DWORD *v158[2];

  v10 = *(_BYTE **)(a1 + 8);
  v9 = *(_BYTE **)(a1 + 16);
  v11 = v9 - v10;
  v12 = (v9 - v10) >> 2;
  if (a2 - 1 >= v12)
    sub_239EC0CBC();
  v14 = a6;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  if (v9 == v10)
  {
    v20 = 0;
    v19 = 0;
    v137 = a7;
    v21 = (unsigned int *)(4 * a2);
    v152 = a6;
    if (!v21)
      goto LABEL_8;
    goto LABEL_7;
  }
  if ((v11 & 0x8000000000000000) != 0)
    sub_2394189F8();
  v19 = (char *)operator new(v9 - v10);
  v20 = (unsigned int *)&v19[4 * v12];
  v155 = v19;
  v157 = v20;
  memcpy(v19, v10, v11);
  v156 = v20;
  v137 = a7;
  v21 = (unsigned int *)&v19[4 * a2];
  v152 = v14;
  if (v21 != v20)
LABEL_7:
    sub_2395C4C3C((unint64_t)v19, v21, v20, (uint64_t **)&v152);
LABEL_8:
  v138 = a3;
  v22 = 4 * a2;
  v23 = (char *)operator new(v22);
  v24 = (int32x2_t *)&v23[v22];
  v152 = v23;
  v154 = &v23[v22];
  memcpy(v23, v19, v22);
  v153 = v24;
  v142 = v11;
  v140 = a1;
  v141 = a5;
  if (a4 == 3)
  {
    v25 = (float *)v14[2];
    if (!v25)
    {
      v28 = 0;
      p_p = 0;
      v150 = 0;
      v151 = 0;
      goto LABEL_56;
    }
    v26 = -3.4028e38;
    do
    {
      if (v25[5] > v26)
        v26 = v25[5];
      v25 = *(float **)v25;
    }
    while (v25);
    if (v26 > 0.00000011921)
    {
      LODWORD(__p) = 0;
      do
      {
        p_p = &__p;
        v27 = sub_2394AAB74((uint64_t)v14, (unsigned int *)&__p, (uint64_t)&unk_239EC6E98, (_DWORD **)&p_p);
        *((float *)v27 + 5) = *((float *)v27 + 5) / v26;
        LODWORD(__p) = (_DWORD)__p + 1;
      }
      while (__p < v12);
    }
  }
  v28 = a4 == 2;
  if (a4 == 2)
  {
    v29 = 126 - 2 * __clz(((char *)v153 - (_BYTE *)v152) >> 2);
    p_p = v14;
    if (v153 == v152)
      v30 = 0;
    else
      v30 = v29;
    sub_2395CCCB4((int32x2_t *)v152, v153, (uint64_t **)&p_p, v30, 1);
  }
  p_p = 0;
  v150 = 0;
  v151 = 0;
  if (!a2)
  {
    v31 = 0;
    v32 = 0;
    v33 = (int32x2_t *)v152;
    v34 = v153;
    if (v152 == v153)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  v32 = (char *)operator new(v22);
  v31 = &v32[4 * a2];
  p_p = v32;
  v150 = v32;
  v151 = v31;
  v33 = (int32x2_t *)v152;
  v34 = v153;
  if (v152 != v153)
  {
LABEL_57:
    v61 = v32;
    v144 = v14;
    while (1)
    {
      while (1)
      {
        __p = v33;
        v62 = sub_2394AAB74((uint64_t)v14, (unsigned int *)v33, (uint64_t)&unk_239EC6E98, (_DWORD **)&__p);
        v63 = v62;
        if (v61 >= v31)
          break;
        *(_DWORD *)v61 = *((_DWORD *)v62 + 5);
        v61 += 4;
        v35 = v61;
        v150 = v61;
        v33 = (int32x2_t *)((char *)v33 + 4);
        if (v33 == v34)
          goto LABEL_25;
      }
      v64 = (v61 - v32) >> 2;
      v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 62)
        sub_2394189F8();
      if ((v31 - v32) >> 1 > v65)
        v65 = (v31 - v32) >> 1;
      if ((unint64_t)(v31 - v32) >= 0x7FFFFFFFFFFFFFFCLL)
        v66 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      if (v66)
      {
        if (v66 >> 62)
          sub_239418A80();
        v67 = operator new(4 * v66);
        v68 = &v67[4 * v64];
        *(_DWORD *)v68 = *((_DWORD *)v63 + 5);
        v35 = v68 + 4;
        if (v61 == v32)
          goto LABEL_74;
      }
      else
      {
        v67 = 0;
        v68 = (char *)(4 * v64);
        *(_DWORD *)(4 * v64) = *((_DWORD *)v63 + 5);
        v35 = (char *)(4 * v64 + 4);
        if (v61 == v32)
          goto LABEL_74;
      }
      v69 = v61 - 4 - v32;
      if (v69 >= 0xBC)
      {
        if (&v67[v61 - v32 - 4 - (v69 & 0xFFFFFFFFFFFFFFFCLL)] > &v67[v61 - v32 - 4])
        {
          v70 = v61;
        }
        else if (&v61[-(v69 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v61 - 4)
        {
          v70 = v61;
        }
        else if ((unint64_t)(v32 - v67) >= 0x20)
        {
          v72 = (v69 >> 2) + 1;
          v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
          v70 = &v61[-v73];
          v68 -= v73;
          v74 = &v67[4 * v64 - 16];
          v75 = (__int128 *)(v61 - 16);
          v76 = v72 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v77 = *v75;
            *(v74 - 1) = *(v75 - 1);
            *v74 = v77;
            v74 -= 2;
            v75 -= 2;
            v76 -= 8;
          }
          while (v76);
          if (v72 == (v72 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_74;
        }
        else
        {
          v70 = v61;
        }
      }
      else
      {
        v70 = v61;
      }
      do
      {
        v71 = *((_DWORD *)v70 - 1);
        v70 -= 4;
        *((_DWORD *)v68 - 1) = v71;
        v68 -= 4;
      }
      while (v70 != v32);
LABEL_74:
      v31 = &v67[4 * v66];
      p_p = v68;
      v150 = v35;
      v151 = v31;
      if (v32)
        operator delete(v32);
      v32 = v68;
      v14 = v144;
      v150 = v35;
      v33 = (int32x2_t *)((char *)v33 + 4);
      v61 = v35;
      if (v33 == v34)
        goto LABEL_25;
    }
  }
LABEL_24:
  v35 = v32;
LABEL_25:
  __p = 0;
  v147 = 0;
  v148 = 0;
  sub_2395CAC48(v140, (uint64_t *)&v152, &__p);
  v37 = 0;
  do
  {
    if (v28)
    {
      *(float *)&v36 = (float)(a2 - v37) / (float)a2;
    }
    else
    {
      LODWORD(v36) = 1.0;
      if (a4 == 3)
      {
        v158[0] = (char *)v152 + 4 * v37;
        v38 = sub_2394AAB74((uint64_t)v14, v158[0], (uint64_t)&unk_239EC6E98, v158);
        v36 = pow(*((float *)v38 + 5), a9);
        *(float *)&v36 = v36;
      }
    }
    v39 = *(unsigned int *)(v140 + 60);
    if ((_DWORD)v39)
    {
      v40 = (float *)__p;
      v41 = *v141;
      if (v39 < 0xC
        || __CFADD__(v39 * v37, v39 - 1)
        || ((v42 = 4 * (v39 * v37), v41 < (float32x4_t *)((char *)__p + 4 * v39 + v42))
          ? (v43 = (char *)__p + v42 >= (char *)&v41->f32[v39])
          : (v43 = 1),
            !v43))
      {
        v44 = 0;
LABEL_44:
        v51 = &v41->f32[v44];
        v52 = v44 + v39 * v37;
        v53 = v39 - v44;
        do
        {
          *v51 = *v51 + (float)(v40[v52] * *(float *)&v36);
          ++v51;
          ++v52;
          --v53;
        }
        while (v53);
        goto LABEL_26;
      }
      v44 = v39 & 0xFFFFFFF8;
      v45 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v36, 0);
      v46 = v41 + 1;
      v47 = v39 * v37;
      v48 = v44;
      do
      {
        v49 = (float32x4_t *)&v40[v47];
        v50 = vmlaq_f32(*v46, v45, v49[1]);
        v46[-1] = vmlaq_f32(v46[-1], v45, *v49);
        *v46 = v50;
        v46 += 2;
        v47 += 8;
        v48 -= 8;
      }
      while (v48);
      if (v44 != v39)
        goto LABEL_44;
    }
LABEL_26:
    ++v37;
  }
  while (v37 != a2);
  v54 = *(_DWORD *)(v140 + 44);
  if (v54 == 1)
  {
    v55 = *(unsigned int *)(v140 + 60);
    if (!(_DWORD)v55)
      goto LABEL_111;
    v56 = *v141;
    if ((_DWORD)v55 == 1)
    {
      v57 = 0;
      v58 = 0.0;
    }
    else
    {
      v57 = v55 & 0xFFFFFFFE;
      v78 = &v56->f32[1];
      v58 = 0.0;
      v79 = v57;
      do
      {
        v58 = (float)(v58 + *(v78 - 1)) + *v78;
        v78 += 2;
        v79 -= 2;
      }
      while (v79);
      if (v57 == v55)
      {
LABEL_93:
        v83 = fabsf(v58);
        v84 = -3.4028e38;
        if (v58 >= 0.0)
          v84 = 3.4028e38;
        if (v83 < 0.00000011921)
        {
          if (v55 < 8)
          {
            v85 = 0;
LABEL_103:
            v91 = v55 - v85;
            v92 = &v56->f32[v85];
            do
            {
              *v92 = v84 * *v92;
              ++v92;
              --v91;
            }
            while (v91);
            goto LABEL_111;
          }
          v85 = v55 & 0xFFFFFFF8;
          v88 = v56 + 1;
          v89 = v85;
          do
          {
            v90 = vmulq_n_f32(*v88, v84);
            v88[-1] = vmulq_n_f32(v88[-1], v84);
            *v88 = v90;
            v88 += 2;
            v89 -= 8;
          }
          while (v89);
          if (v85 != v55)
            goto LABEL_103;
LABEL_111:
          for (i = (uint64_t *)v14[2]; i; i = (uint64_t *)*i)
            *((_DWORD *)i + 5) = 0;
          LODWORD(v158[0]) = 0;
          if (a8)
          {
            LODWORD(v158[0]) = *v137 + 1;
            v99 = v158;
          }
          else
          {
            v99 = 0;
          }
          sub_2395C4A50(*(_QWORD *)(v140 + 64), v141, *(unsigned int *)(v140 + 44), v14, v99);
          if (v14[3] != (v142 >> 2))
          {
            sub_239A444D4((uint64_t)"unknown file", 991, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          if (v138)
          {
            v100 = (int8x8_t)v14[1];
            if (!*(_QWORD *)&v100)
LABEL_190:
              sub_23941D898("unordered_map::at: key not found");
            v101 = 0;
            v102 = (unsigned int *)v152;
            v103 = (uint8x8_t)vcnt_s8(v100);
            v103.i16[0] = vaddlv_u8(v103);
            v104 = *v14;
LABEL_121:
            v105 = v102[v101];
            if (v103.u32[0] > 1uLL)
            {
              v106 = v102[v101];
              if (*(_QWORD *)&v100 <= v105)
                v106 = v105 % *(_QWORD *)&v100;
            }
            else
            {
              v106 = (*(_QWORD *)&v100 + 0xFFFFFFFFLL) & v105;
            }
            v107 = *(uint64_t ***)(v104 + 8 * v106);
            if (!v107)
              goto LABEL_190;
            v108 = *v107;
            if (!v108)
              goto LABEL_190;
            if (v103.u32[0] < 2uLL)
            {
              while (1)
              {
                v109 = v108[1];
                if (v109 == v105)
                {
                  if (*((_DWORD *)v108 + 4) == (_DWORD)v105)
                    goto LABEL_120;
                }
                else if ((v109 & (*(_QWORD *)&v100 - 1)) != v106)
                {
                  goto LABEL_190;
                }
                v108 = (uint64_t *)*v108;
                if (!v108)
                  goto LABEL_190;
              }
            }
            while (1)
            {
              v110 = v108[1];
              if (v110 == v105)
              {
                if (*((_DWORD *)v108 + 4) == (_DWORD)v105)
                {
LABEL_120:
                  *((_DWORD *)v108 + 5) = -1082130432;
                  if (++v101 == a2)
                  {
                    v111 = (float *)p_p;
                    v112 = (float *)((char *)p_p + 4);
                    v113 = p_p == v35 || v112 == (float *)v35;
                    v114 = (float *)p_p;
                    if (!v113)
                    {
                      v115 = *(float *)p_p;
                      v114 = (float *)p_p;
                      v116 = (float *)((char *)p_p + 4);
                      do
                      {
                        v117 = *v116++;
                        v118 = v117;
                        if (v117 < v115)
                        {
                          v115 = v118;
                          v114 = v112;
                        }
                        v112 = v116;
                      }
                      while (v116 != (float *)v35);
                    }
                    v119 = *v114;
                    v120 = (float *)v14[2];
                    if (v120)
                    {
                      v121 = -3.4028e38;
                      do
                      {
                        if (v120[5] > v121)
                          v121 = v120[5];
                        v120 = *(float **)v120;
                      }
                      while (v120);
                    }
                    else
                    {
                      v121 = -3.4028e38;
                    }
                    v122 = (float)(v121 - v119) + 0.00000011921;
                    v123 = v119 < v121;
                    v124 = 0.0;
                    if (v123)
                      v124 = v122;
                    v125 = (int8x8_t)v14[1];
                    if (!*(_QWORD *)&v125)
LABEL_191:
                      sub_23941D898("unordered_map::at: key not found");
                    v126 = 0;
                    v127 = (unsigned int *)v152;
                    v128 = (uint8x8_t)vcnt_s8(v125);
                    v128.i16[0] = vaddlv_u8(v128);
                    v129 = *v14;
LABEL_161:
                    v130 = v127[v126];
                    if (v128.u32[0] > 1uLL)
                    {
                      v131 = v127[v126];
                      if (*(_QWORD *)&v125 <= v130)
                        v131 = v130 % *(_QWORD *)&v125;
                    }
                    else
                    {
                      v131 = (*(_QWORD *)&v125 + 0xFFFFFFFFLL) & v130;
                    }
                    v132 = *(uint64_t ***)(v129 + 8 * v131);
                    if (!v132)
                      goto LABEL_191;
                    v133 = *v132;
                    if (!v133)
                      goto LABEL_191;
                    if (v128.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v134 = v133[1];
                        if (v134 == v130)
                        {
                          if (*((_DWORD *)v133 + 4) == (_DWORD)v130)
                            goto LABEL_160;
                        }
                        else if ((v134 & (*(_QWORD *)&v125 - 1)) != v131)
                        {
                          goto LABEL_191;
                        }
                        v133 = (uint64_t *)*v133;
                        if (!v133)
                          goto LABEL_191;
                      }
                    }
                    while (1)
                    {
                      v135 = v133[1];
                      if (v135 == v130)
                      {
                        if (*((_DWORD *)v133 + 4) == (_DWORD)v130)
                        {
LABEL_160:
                          *((float *)v133 + 5) = v124 + v111[v126++];
                          if (v126 == a2)
                            goto LABEL_181;
                          goto LABEL_161;
                        }
                      }
                      else
                      {
                        if (v135 >= *(_QWORD *)&v125)
                          v135 %= *(_QWORD *)&v125;
                        if (v135 != v131)
                          goto LABEL_191;
                      }
                      v133 = (uint64_t *)*v133;
                      if (!v133)
                        goto LABEL_191;
                    }
                  }
                  goto LABEL_121;
                }
              }
              else
              {
                if (v110 >= *(_QWORD *)&v100)
                  v110 %= *(_QWORD *)&v100;
                if (v110 != v106)
                  goto LABEL_190;
              }
              v108 = (uint64_t *)*v108;
              if (!v108)
                goto LABEL_190;
            }
          }
LABEL_181:
          v59 = 1;
          v60 = __p;
          if (!__p)
            goto LABEL_183;
LABEL_182:
          v147 = v60;
          operator delete(v60);
          goto LABEL_183;
        }
        v86 = 1.0 / v58;
        if (v55 >= 8)
        {
          v87 = v55 & 0xFFFFFFF8;
          v93 = v56 + 1;
          v94 = v87;
          do
          {
            v95 = vmulq_n_f32(*v93, v86);
            v93[-1] = vmulq_n_f32(v93[-1], v86);
            *v93 = v95;
            v93 += 2;
            v94 -= 8;
          }
          while (v94);
          if (v87 == v55)
            goto LABEL_111;
        }
        else
        {
          v87 = 0;
        }
        v96 = v55 - v87;
        v97 = &v56->f32[v87];
        do
        {
          *v97 = v86 * *v97;
          ++v97;
          --v96;
        }
        while (v96);
        goto LABEL_111;
      }
    }
    v80 = v55 - v57;
    v81 = &v56->f32[v57];
    do
    {
      v82 = *v81++;
      v58 = v58 + v82;
      --v80;
    }
    while (v80);
    goto LABEL_93;
  }
  if (v54 == 2)
  {
    sub_2396F55B0(*v141, *(unsigned int *)(v140 + 60), v36);
    goto LABEL_111;
  }
  v59 = 0;
  v60 = __p;
  if (__p)
    goto LABEL_182;
LABEL_183:
  if (p_p)
    operator delete(p_p);
  if (v152)
  {
    v153 = (int32x2_t *)v152;
    operator delete(v152);
  }
  if (v155)
    operator delete(v155);
  return v59;
}

void sub_2395CCBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  v29 = *(void **)(v27 - 144);
  if (v29)
  {
    *(_QWORD *)(v27 - 136) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t *sub_2395CCCB4(int32x2_t *result, int32x2_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  int32x2_t *v8;
  unsigned int *v9;
  int32x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  __int32 *v19;
  __int32 v20;
  _DWORD *v21;
  char v22;
  BOOL v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  __int32 v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  int32x2_t *v35;

  v8 = result;
LABEL_2:
  v9 = (unsigned int *)&a2[-1] + 1;
  v33 = (unsigned int *)&a2[-2] + 1;
  v34 = (unsigned int *)&a2[-1];
  v10 = v8;
  v35 = a2;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = ((char *)a2 - (char *)v10) >> 2;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (int32x2_t *)sub_2395C554C(a3, a2[-1].u32[1], v10->i32[0]);
        if ((_DWORD)result)
        {
          v24 = v10->i32[0];
          v10->i32[0] = a2[-1].i32[1];
          a2[-1].i32[1] = v24;
        }
        return result;
      case 3uLL:
        return (int32x2_t *)sub_2395C5704((unsigned int *)v10, (unsigned int *)v10 + 1, v9, a3);
      case 4uLL:
        v25 = (unsigned int *)&v10[1];
        sub_2395C5704((unsigned int *)v10, (unsigned int *)v10 + 1, (unsigned int *)&v10[1], a3);
        result = (int32x2_t *)sub_2395C554C(a3, a2[-1].u32[1], v10[1].u32[0]);
        if ((_DWORD)result)
        {
          v26 = *v25;
          *v25 = a2[-1].u32[1];
          a2[-1].i32[1] = v26;
          result = (int32x2_t *)sub_2395C554C(a3, *v25, v10->u32[1]);
          if ((_DWORD)result)
          {
            v28 = v10->i32[1];
            v27 = v10[1].u32[0];
            v29 = v10->i32[0];
            v10->i32[1] = v27;
            v10[1].i32[0] = v28;
            result = (int32x2_t *)sub_2395C554C(a3, v27, v29);
            if ((_DWORD)result)
              *v10 = vrev64_s32(*v10);
          }
        }
        return result;
      case 5uLL:
        return (int32x2_t *)sub_2395C6D0C((unsigned int *)v10, (unsigned int *)v10 + 1, (unsigned int *)&v10[1], (unsigned int *)&v10[1] + 1, v9, a3);
      default:
        if (v13 <= 95)
        {
          if ((a5 & 1) != 0)
            return (int32x2_t *)sub_2395C5E28((unsigned int *)v10, (unsigned int *)a2, a3);
          else
            return (int32x2_t *)sub_2395C6070((unsigned int *)v10, (unsigned int *)a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (unsigned int *)v10 + (v14 >> 1);
          if ((unint64_t)v13 < 0x201)
          {
            sub_2395C5704(v16, (unsigned int *)v10, v9, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_2395C5704((unsigned int *)v10, v16, v9, a3);
            v17 = a5;
            v18 = v9;
            v19 = (__int32 *)v10 + v15;
            sub_2395C5704((unsigned int *)v10 + 1, (unsigned int *)v19 - 1, v34, a3);
            sub_2395C5704((unsigned int *)&v10[1], (unsigned int *)v10 + v15 + 1, v33, a3);
            sub_2395C5704((unsigned int *)v19 - 1, v16, (unsigned int *)v10 + v15 + 1, a3);
            v20 = v10->i32[0];
            v10->i32[0] = *v19;
            *v19 = v20;
            v9 = v18;
            a5 = v17;
            a2 = v35;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (!sub_2395C554C(a3, v10[-1].u32[1], v10->i32[0]))
          {
            result = (int32x2_t *)sub_2395C62C0((unsigned int *)v10, (unsigned int *)a2, a3);
            v10 = result;
            goto LABEL_17;
          }
LABEL_12:
          v21 = sub_2395C66B8(v10, a2, a3);
          if ((v22 & 1) == 0)
            goto LABEL_15;
          v23 = sub_2395CD088(v10, (int32x2_t *)v21, a3);
          v10 = (int32x2_t *)(v21 + 1);
          result = (int32x2_t *)sub_2395CD088((int32x2_t *)(v21 + 1), a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v23)
              continue;
LABEL_15:
            result = (int32x2_t *)sub_2395CCCB4(v8, v21, a3, -v12, a5 & 1);
            v10 = (int32x2_t *)(v21 + 1);
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = (int32x2_t *)v21;
          if (v23)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
        {
          v30 = (v14 - 2) >> 1;
          v31 = v30 + 1;
          v32 = (unsigned int *)v10 + v30;
          do
          {
            sub_2395C6E50((_BOOL8)v10, a3, ((char *)a2 - (char *)v10) >> 2, v32--);
            --v31;
          }
          while (v31);
          return (int32x2_t *)sub_2395C6F78((uint64_t)v10, (unsigned int *)a2, a3);
        }
        return result;
    }
  }
}

BOOL sub_2395CD088(int32x2_t *a1, int32x2_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  __int32 v19;
  unsigned int v20;

  v6 = ((char *)a2 - (char *)a1) >> 2;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_2395C554C(a3, a2[-1].u32[1], a1->i32[0]))
      {
        v15 = a1->i32[0];
        a1->i32[0] = a2[-1].i32[1];
        a2[-1].i32[1] = v15;
      }
      return 1;
    case 3:
      sub_2395C5704((unsigned int *)a1, (unsigned int *)a1 + 1, (unsigned int *)&a2[-1] + 1, a3);
      return 1;
    case 4:
      v16 = (unsigned int *)&a1[1];
      sub_2395C5704((unsigned int *)a1, (unsigned int *)a1 + 1, (unsigned int *)&a1[1], a3);
      if (sub_2395C554C(a3, a2[-1].u32[1], a1[1].u32[0]))
      {
        v17 = *v16;
        *v16 = a2[-1].u32[1];
        a2[-1].i32[1] = v17;
        if (sub_2395C554C(a3, *v16, a1->u32[1]))
        {
          v19 = a1->i32[1];
          v18 = a1[1].u32[0];
          v20 = a1->i32[0];
          a1->i32[1] = v18;
          a1[1].i32[0] = v19;
          if (sub_2395C554C(a3, v18, v20))
            *a1 = vrev64_s32(*a1);
        }
      }
      return 1;
    case 5:
      sub_2395C6D0C((unsigned int *)a1, (unsigned int *)a1 + 1, (unsigned int *)&a1[1], (unsigned int *)&a1[1] + 1, (unsigned int *)&a2[-1] + 1, a3);
      return 1;
    default:
      v8 = (unsigned int *)&a1[1];
      sub_2395C5704((unsigned int *)a1, (unsigned int *)a1 + 1, (unsigned int *)&a1[1], a3);
      v9 = (unsigned int *)&a1[1] + 1;
      if (&a1[1].u8[4] == (unsigned __int8 *)a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (!sub_2395C554C(a3, *v9, *v8))
  {
LABEL_11:
    v8 = v9;
    v10 += 4;
    if (++v9 == (unsigned int *)a2)
      return 1;
  }
  v12 = *v9;
  v13 = v10;
  do
  {
    v14 = (char *)a1 + v13;
    *(__int32 *)((char *)&a1[1].i32[1] + v13) = *(__int32 *)((char *)a1[1].i32 + v13);
    if (v13 == -8)
    {
      a1->i32[0] = v12;
      if (++v11 != 8)
        goto LABEL_11;
      return v9 + 1 == (unsigned int *)a2;
    }
    v13 -= 4;
  }
  while (sub_2395C554C(a3, v12, *((_DWORD *)v14 + 1)));
  *(__int32 *)((char *)&a1[1].i32[1] + v13) = v12;
  if (++v11 != 8)
    goto LABEL_11;
  return v9 + 1 == (unsigned int *)a2;
}

void sub_2395CD2C8(uint64_t a1)
{
  void **v1;
  int64x2_t v2;
  int64x2_t v3;
  int64x2_t v4;
  unint64_t v5;
  void **v7;
  char *v8;
  char *v9;
  __int128 v10;
  unint64_t v11;
  void **v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;

  v1 = *(void ***)a1;
  v2 = *(int64x2_t *)(a1 + 8);
  v3 = vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)a1));
  v4 = vshrq_n_s64(v3, 3uLL);
  v5 = 0xAAAAAAAAAAAAAAABLL * v4.i64[0];
  if (0xAAAAAAAAAAAAAAABLL * v4.i64[1] <= v5)
    return;
  v7 = *(void ***)(a1 + 8);
  if ((void **)v2.i64[0] == v1)
  {
    *(_QWORD *)a1 = 24 * v5;
    *(_QWORD *)(a1 + 8) = 24 * v5;
    *(_QWORD *)(a1 + 16) = 24 * v5;
    if (!v1)
      return;
    goto LABEL_21;
  }
  if (v5 >= 0xAAAAAAAAAAAAAABLL)
    sub_239418A80();
  v8 = (char *)operator new(v3.u64[0]) + 24 * v5;
  v9 = v8;
  do
  {
    v10 = *(_OWORD *)(v7 - 3);
    v7 -= 3;
    *(_OWORD *)(v9 - 24) = v10;
    v9 -= 24;
    *((_QWORD *)v9 + 2) = v7[2];
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  while (v7 != v1);
  v11 = *(_QWORD *)a1;
  v1 = *(void ***)(a1 + 8);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v8;
  if (v1 != (void **)v11)
  {
    v12 = v1;
    do
    {
      v15 = (char *)*(v12 - 3);
      v12 -= 3;
      v14 = v15;
      if (v15)
      {
        v16 = (char *)*(v1 - 2);
        v13 = v14;
        if (v16 != v14)
        {
          do
          {
            v17 = (void *)*((_QWORD *)v16 - 3);
            if (v17)
            {
              *((_QWORD *)v16 - 2) = v17;
              operator delete(v17);
            }
            v16 -= 32;
          }
          while (v16 != v14);
          v13 = *v12;
        }
        *(v1 - 2) = v14;
        operator delete(v13);
      }
      v1 = v12;
    }
    while (v12 != (void **)v11);
    v1 = (void **)v11;
  }
  if (v1)
LABEL_21:
    operator delete(v1);
}

uint64_t sub_2395CD444(__int128 *a1, int a2, int a3, int a4, int a5, char a6, _QWORD *a7, uint64_t *a8, uint64_t a9)
{
  __int128 v9;
  unsigned int v10;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  double v25;
  unsigned int v26;
  float v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  __int128 v38[2];
  char v39;
  int v40;
  int v41;
  int v42;
  int v43;
  _QWORD v44[3];
  _QWORD *v45;
  _BYTE v46[24];
  _BYTE *v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  pthread_cond_t v55;
  pthread_cond_t v56;
  pthread_mutex_t v57;
  _BYTE v58[352];
  _BYTE v59[352];
  pthread_mutex_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v42 = a3;
  v43 = a2;
  v40 = a5;
  v41 = a4;
  v39 = a6;
  v9 = a1[1];
  v38[0] = *a1;
  v38[1] = v9;
  v10 = DWORD2(v38[0]);
  v37 = DWORD2(v38[0]) > 1;
  if (!DWORD2(v38[0]))
    sub_239EC0B10();
  sub_2397A1618(&v60);
  v36 = 0;
  v35 = 0;
  v33 = 0;
  v34 = 0;
  if (a9)
  {
    if (*(_BYTE *)(a9 + 8))
    {
      v13 = *(_QWORD **)a9;
      v34 = v13;
      *(_QWORD *)((char *)v13 + 12) = 0;
      *(_QWORD *)((char *)v13 + 4) = 0;
      v13[3] = 0;
      v13[4] = 0;
    }
    v14 = *(_QWORD *)(a9 + 16);
    v15 = *(_QWORD *)(a9 + 24) - v14;
    if (v15)
    {
      v35 = 1;
      if (0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3) != v15 >> 2)
      {
        sub_239A444D4((uint64_t)"unknown file", 84, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v33 = v14;
    }
  }
  sub_2397A2A50((uint64_t)v59, v10, 0);
  sub_2397A2A50((uint64_t)v58, 1u, 0);
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  sub_2397A1618(&v57);
  v48 = 0x7FFFFFFF;
  pthread_cond_init(&v55, 0);
  pthread_cond_init(&v56, 0);
  v16 = operator new(0x20uLL);
  *v16 = &off_250ADFD18;
  v16[1] = v58;
  v16[2] = &v48;
  v16[3] = v46;
  v47 = v16;
  v32 = 1;
  v17 = operator new(0x80uLL);
  *v17 = &off_250ADFDA8;
  v17[1] = v59;
  v17[2] = v58;
  v17[3] = &v48;
  v17[4] = v46;
  v17[5] = v44;
  v17[6] = &v39;
  v17[7] = &v42;
  v17[8] = (char *)v38 + 4;
  v17[9] = &v41;
  v17[10] = &v35;
  v17[11] = &v60;
  v17[12] = &v36;
  v17[13] = &v34;
  v17[14] = &v32;
  v17[15] = &v37;
  v45 = v17;
  v31 = *a8;
  sub_2395CDA74((uint64_t)v59, v44, v38, &v43, &v40, a7, &v31, &v33);
  v18 = sub_2395BFB54(&v48);
  v19 = v18;
  if ((v18 & 0x100) != 0)
  {
    sub_2397A2D24((uint64_t)v59);
    v23 = v34;
    if (v34)
    {
      v24 = v36;
      v25 = (float)(1.0 / (float)v36);
      v26 = *((_DWORD *)v34 + 1);
      v27 = 1.0 / (float)v26;
      if (!v26)
        v27 = 3.4028e38;
      *((float *)v34 + 4) = *((float *)v34 + 4) * v27;
      if (!v24)
        v25 = 3.40282347e38;
      *(float64x2_t *)(v23 + 3) = vmulq_n_f64(*(float64x2_t *)(v23 + 3), v25);
    }
    v20 = v19 & 1;
    v21 = v45;
    if (v45 != v44)
      goto LABEL_10;
LABEL_19:
    v22 = 4;
    v21 = v44;
    goto LABEL_20;
  }
  v20 = 0;
  v21 = v45;
  if (v45 == v44)
    goto LABEL_19;
LABEL_10:
  if (!v21)
    goto LABEL_21;
  v22 = 5;
LABEL_20:
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_21:
  v28 = v47;
  if (v47 == v46)
  {
    v29 = 4;
    v28 = v46;
    goto LABEL_25;
  }
  if (v47)
  {
    v29 = 5;
LABEL_25:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  sub_2395C29C4((uint64_t)&v48);
  sub_2397A2E14(v58);
  sub_2397A2E14(v59);
  sub_2397A163C(&v60);
  return v20;
}

void sub_2395CD7E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2397A163C((pthread_mutex_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_2395CD7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27,char a28,uint64_t a29,uint64_t a30,char *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;

  v64 = a27;
  if (a27 == &a24)
  {
    v65 = 4;
    v64 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v65 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v64 + 8 * v65))();
LABEL_6:
  v66 = a31;
  if (a31 == &a28)
  {
    v67 = 4;
    v66 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_11;
    v67 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
LABEL_11:
  sub_2395C29C4((uint64_t)&a32);
  sub_2397A2E14(&a62);
  sub_2397A2E14(&STACK[0x308]);
  sub_2397A163C((pthread_mutex_t *)(v62 - 120));
  _Unwind_Resume(a1);
}

void sub_2395CD8F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADFCE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2395CD900(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADFCE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2395CD930(uint64_t a1)
{
  return sub_2395BF5D0(a1 + 24);
}

uint64_t sub_2395CD93C(uint64_t a1, unsigned int a2, char a3, uint64_t a4, int a5)
{
  pthread_rwlock_t **v7;
  pthread_rwlock_t *v8;
  pthread_rwlock_t *v9;
  pthread_rwlock_t *v10;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 1) = a3;
  *(_WORD *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = (pthread_rwlock_t **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  sub_2395342E8(a1 + 32, a2);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  if (a5)
  {
    v8 = (pthread_rwlock_t *)operator new();
    sub_2397A1588(v8);
    v9 = *v7;
    *v7 = v8;
    if (v9)
    {
      v10 = sub_2397A15B0(v9);
      MEMORY[0x23B83E31C](v10, 0x1000C40BEF03554);
    }
  }
  return a1;
}

void sub_2395CDA0C(_Unwind_Exception *a1)
{
  pthread_rwlock_t **v1;
  void **v2;
  void **v3;
  uint64_t v4;

  MEMORY[0x23B83E31C](v4, 0x1000C40BEF03554);
  sub_239420950((uint64_t)(v3 + 3));
  sub_2394631DC(v3);
  free(*v2);
  sub_2395BF58C(v1);
  _Unwind_Resume(a1);
}

void sub_2395CDA58(_Unwind_Exception *a1)
{
  pthread_rwlock_t **v1;
  void **v2;

  free(*v2);
  sub_2395BF58C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395CDA74(uint64_t a1, _QWORD *a2, __int128 *a3, _DWORD *a4, int *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8)
{
  _QWORD *v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *result;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[24];
  _BYTE *v52;
  _QWORD v53[3];
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 272))
    sub_239EC0B40(a1, (uint64_t)a2);
  v15 = (_QWORD *)a2[3];
  if (v15)
  {
    if (v15 == a2)
    {
      v54 = v53;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v53);
    }
    else
    {
      v54 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
    }
  }
  else
  {
    v54 = 0;
  }
  v16 = a3[1];
  v55 = *a3;
  v56 = v16;
  v17 = *a5;
  LODWORD(v57) = *a4;
  HIDWORD(v57) = v17;
  v18 = a6[1];
  *(_QWORD *)&v58 = *a6;
  *((_QWORD *)&v58 + 1) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *a8;
  v59 = *a7;
  v60 = v21;
  v22 = *(unsigned int **)(a1 + 272);
  v23 = (uint64_t)v54;
  if (!v54)
    goto LABEL_13;
  if (v54 != v53)
  {
    v23 = (*(uint64_t (**)(void))(*v54 + 16))();
LABEL_13:
    v44 = (_QWORD *)v23;
    goto LABEL_15;
  }
  v44 = v43;
  (*(void (**)(_QWORD *, _QWORD *))(v53[0] + 24))(v53, v43);
LABEL_15:
  v45 = v55;
  v46 = v56;
  v47 = v57;
  v48 = v58;
  if (*((_QWORD *)&v58 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = v59;
  v27 = v60;
  v49 = v59;
  v50 = v60;
  v52 = 0;
  v28 = operator new(0x70uLL);
  v29 = v28;
  *v28 = &off_250ADFE38;
  if (v44)
  {
    if (v44 == v43)
    {
      v28[4] = v28 + 1;
      (*(void (**)(_QWORD *))(v43[0] + 24))(v43);
      v26 = v49;
      v27 = v50;
    }
    else
    {
      v28[4] = v44;
      v44 = 0;
    }
  }
  else
  {
    v28[4] = 0;
  }
  v30 = v46;
  *(_OWORD *)(v29 + 5) = v45;
  *(_OWORD *)(v29 + 7) = v30;
  v29[9] = v47;
  *((_OWORD *)v29 + 5) = v48;
  v48 = 0uLL;
  v29[12] = v26;
  v29[13] = v27;
  v52 = v29;
  sub_2394D0CC4(v22, (uint64_t)v51);
  v31 = v52;
  if (v52 == v51)
  {
    v32 = 4;
    v31 = v51;
    goto LABEL_27;
  }
  if (v52)
  {
    v32 = 5;
LABEL_27:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (!*((_QWORD *)&v48 + 1))
    goto LABEL_32;
  v34 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
  {
LABEL_32:
    v36 = v44;
    if (v44 != v43)
      goto LABEL_33;
LABEL_36:
    v37 = 4;
    v36 = v43;
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  v36 = v44;
  if (v44 == v43)
    goto LABEL_36;
LABEL_33:
  if (v36)
  {
    v37 = 5;
LABEL_37:
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      result = v54;
      if (v54 != v53)
        goto LABEL_43;
LABEL_46:
      v42 = 4;
      result = v53;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v42))();
    }
  }
  result = v54;
  if (v54 == v53)
    goto LABEL_46;
LABEL_43:
  if (!result)
    return result;
  v42 = 5;
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v42))();
}

void sub_2395CDDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2395CDE74()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2395CDE88(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250ADFD18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_2395CDEC8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADFD18;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

pthread_rwlock_t *sub_2395CDEF0(uint64_t a1, uint64_t *a2)
{
  return sub_2395CDEFC(a1 + 8, *a2);
}

pthread_rwlock_t *sub_2395CDEFC(uint64_t a1, uint64_t a2)
{
  pthread_rwlock_t *v4;
  unsigned __int16 v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const double *v14;
  int32x4_t v15;
  int32x4_t v16;
  const double *v17;
  unsigned __int128 v18;
  const double *v19;
  unsigned __int128 v20;
  const double *v21;
  unsigned __int128 v22;
  unsigned __int128 v23;
  uint64_t v24;
  pthread_rwlock_t *result;
  unsigned int *v26;
  char v27;
  uint64_t v28;

  if (!a2)
    sub_239EC0B6C();
  v4 = *(pthread_rwlock_t **)(a2 + 16);
  if (v4)
    j__pthread_rwlock_wrlock(v4);
  v5 = *(_WORD *)(a2 + 2) + 1;
  *(_WORD *)(a2 + 2) = v5;
  v7 = *(_QWORD *)(a2 + 56);
  v6 = *(uint64_t **)(a2 + 64);
  if ((uint64_t *)v7 != v6)
  {
    v8 = (unint64_t)v6 - v7 - 16;
    if (v8 >= 0x80)
    {
      v11 = (v8 >> 4) + 1;
      v12 = v11 & 7;
      if ((v11 & 7) == 0)
        v12 = 8;
      v13 = v11 - v12;
      v10 = (uint64_t *)(v7 + 16 * v13);
      v14 = (const double *)(v7 + 64);
      v15 = 0uLL;
      v16 = 0uLL;
      do
      {
        v17 = v14 - 8;
        v18 = (unsigned __int128)vld2q_f64(v17);
        v19 = v14 - 4;
        v20 = (unsigned __int128)vld2q_f64(v19);
        v21 = v14;
        v22 = (unsigned __int128)vld2q_f64(v21);
        v21 += 4;
        v23 = (unsigned __int128)vld2q_f64(v21);
        v15 = vsubq_s32(v15, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v18), (int32x4_t)vceqzq_s64((int64x2_t)v20))));
        v16 = vsubq_s32(v16, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)v22), (int32x4_t)vceqzq_s64((int64x2_t)v23))));
        v14 += 16;
        v13 -= 8;
      }
      while (v13);
      v9 = vaddvq_s32(vaddq_s32(v16, v15));
    }
    else
    {
      v9 = 0;
      v10 = *(uint64_t **)(a2 + 56);
    }
    do
    {
      v24 = *v10;
      v10 += 2;
      if (v24)
        ++v9;
    }
    while (v10 != v6);
    if (v9 > v5)
    {
LABEL_18:
      result = *(pthread_rwlock_t **)(a2 + 16);
      if (!result)
        return result;
      return (pthread_rwlock_t *)j__pthread_rwlock_unlock(result);
    }
  }
  v28 = *(_QWORD *)(a2 + 24);
  if (v28)
  {
    sub_2395CE054(*(_QWORD *)a1, *(_QWORD **)(a1 + 16), &v28);
    goto LABEL_18;
  }
  v26 = *(unsigned int **)(a1 + 8);
  v27 = 1;
  sub_2395BFE44(v26, &v27);
  result = *(pthread_rwlock_t **)(a2 + 16);
  if (result)
    return (pthread_rwlock_t *)j__pthread_rwlock_unlock(result);
  return result;
}

_QWORD *sub_2395CE054(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 272))
    sub_239EC0B40(a1, (uint64_t)a2);
  v5 = v23;
  v6 = (_QWORD *)a2[3];
  if (!v6)
  {
    v10 = *a3;
    v24 = 0;
    v25 = v10;
    v8 = *(unsigned int **)(a1 + 272);
    v9 = v18;
    goto LABEL_10;
  }
  if (v6 == a2)
  {
    v24 = v23;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v23);
    v6 = v24;
    v25 = *a3;
    v8 = *(unsigned int **)(a1 + 272);
    v9 = v18;
    if (v24)
      goto LABEL_8;
LABEL_10:
    v19 = v6;
    goto LABEL_11;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  v7 = *a3;
  v24 = v6;
  v25 = v7;
  v8 = *(unsigned int **)(a1 + 272);
  v9 = v18;
  if (!v6)
    goto LABEL_10;
LABEL_8:
  if (v6 != v23)
  {
    v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    goto LABEL_10;
  }
  v19 = v18;
  (*(void (**)(_QWORD *, _QWORD *))(v23[0] + 24))(v23, v18);
LABEL_11:
  v11 = v25;
  v20 = v25;
  v22 = 0;
  v12 = operator new(0x38uLL);
  v13 = v12;
  *v12 = &off_250ADFD60;
  if (v19)
  {
    if (v19 == v18)
    {
      v12[5] = v12 + 2;
      (*(void (**)(_QWORD *))(v18[0] + 24))(v18);
      v11 = v20;
    }
    else
    {
      v12[5] = v19;
      v19 = 0;
    }
  }
  else
  {
    v12[5] = 0;
  }
  v13[6] = v11;
  v22 = v13;
  sub_2394D0CC4(v8, (uint64_t)v21);
  result = v22;
  if (v22 == v21)
  {
    v15 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_21;
    v15 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
LABEL_21:
  if (v19 == v18)
  {
    v16 = 4;
  }
  else
  {
    if (!v19)
      goto LABEL_26;
    v16 = 5;
    v9 = v19;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8 * v16))(v9);
LABEL_26:
  if (v24 == v23)
  {
    v17 = 4;
  }
  else
  {
    if (!v24)
      return result;
    v17 = 5;
    v5 = v24;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v17))(v5);
}

void sub_2395CE29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2395CE374(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250ADFD60;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_2395CE3D0(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250ADFD60;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_2395CE43C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new(0x38uLL);
  *v2 = &off_250ADFD60;
  v3 = v2 + 2;
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 16)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v5 = *(_QWORD *)(a1 + 48);
    v2[5] = v4;
    v2[6] = v5;
    return v2;
  }
  v2[5] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v2[6] = *(_QWORD *)(a1 + 48);
  return v2;
}

void sub_2395CE4C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395CE4DC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = &off_250ADFD60;
  v4 = a2 + 2;
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    if (result == a1 + 16)
    {
      a2[5] = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[5] = result;
    }
    a2[6] = *(_QWORD *)(a1 + 48);
  }
  else
  {
    a2[5] = 0;
    a2[6] = *(_QWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_2395CE574(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 16;
  result = *(_QWORD *)(a1 + 40);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_2395CE5B0(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_2395CE600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = a1 + 40;
  v1 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(v2 + 8);
  if (!v1)
    sub_2394172E0();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v4);
}

void sub_2395CE63C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2395CE650(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x80uLL);
  *(_QWORD *)v2 = &off_250ADFDA8;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *((_QWORD *)v2 + 15) = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_2395CE6C0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = &off_250ADFDA8;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

void sub_2395CE718(uint64_t a1, __int128 *a2, unsigned int *a3, unsigned int *a4, __int128 *a5, uint64_t **a6, uint64_t *a7)
{
  unsigned int v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v7 = *a3;
  v8 = *a4;
  v12 = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  sub_2395CE7C0(a1 + 8, a2, v7, v8, (uint64_t *)&v12, *a6, *a7);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_2395CE7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_239EBED3C();
  _Unwind_Resume(exception_object);
}

void sub_2395CE7C0(uint64_t a1, __int128 *a2, unsigned int a3, unsigned int a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  size_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  int *v18;
  std::chrono::system_clock::time_point v19;
  std::chrono::system_clock::time_point v20;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  pthread_mutex_t *v22;
  uint64_t v23;
  float v24;
  float32x2_t v25;
  unsigned int *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unsigned int *v37;
  _DWORD *v38;
  uint64_t v39;
  size_t v40;
  char *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  char v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  _QWORD *v57;
  char v58;
  uint64_t v59;
  float32x4_t v60;
  int32x4_t v61;
  uint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int32x4_t *v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  _QWORD *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unsigned int v78;
  __int32 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int32 *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  int32x4_t *v91;
  unsigned int v92;
  uint64_t v93;
  _OWORD *v94;
  unsigned int v95;
  uint64_t v96;
  float32x4_t *v97;
  int8x16_t v98;
  int8x8_t v99;
  float32x4_t v100;
  uint64_t v101;
  int32x4_t *v102;
  uint64_t v103;
  unsigned int v104;
  int8x8_t v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  double v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  unsigned int *v132;
  uint64_t v133;
  unsigned int v134;
  size_t v135;
  void *v136;
  unint64_t v137;
  uint64_t *v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int v144;
  int *v145;
  int v146;
  _QWORD *v147;
  __int128 v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  __int128 *v152;
  unsigned int v153;
  char *v154;
  int *v155;
  uint64_t v158;
  float v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  unsigned int v163;
  __int128 v164[2];
  unsigned int v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  char v170;

  v7 = a1;
  v8 = *(_BYTE **)(a1 + 40);
  v9 = *a5;
  *(_BYTE *)v9 = *v8;
  if (!*(_BYTE *)(v9 + 1))
  {
    *(_QWORD *)&v167 = *(_QWORD *)(v9 + 24);
    if ((_QWORD)v167)
    {
      sub_2395CE054(*(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 24), (uint64_t *)&v167);
    }
    else
    {
      v37 = *(unsigned int **)(a1 + 16);
      LOBYTE(v164[0]) = 1;
      sub_2395BFE44(v37, v164);
    }
    return;
  }
  v14 = (**(_DWORD **)(a1 + 48) * **(_DWORD **)(a1 + 56));
  v15 = *v8;
  v167 = 0u;
  v168 = 0u;
  v169 = 0u;
  v170 = v15;
  if (v15)
  {
    if ((_DWORD)v14)
    {
      v16 = (char *)operator new(v14);
      bzero(v16, v14);
      *((_QWORD *)&v168 + 1) = v16;
      *(_QWORD *)&v169 = &v16[v14];
      *((_QWORD *)&v169 + 1) = &v16[v14];
    }
  }
  else if ((_DWORD)v14)
  {
    sub_2394807B4((uint64_t)&v167, v14);
  }
  v17 = a3;
  if (a3)
  {
    v18 = (int *)operator new(4 * a3);
    bzero(v18, 4 * a3);
  }
  else
  {
    v18 = 0;
  }
  v166 = 0;
  v165 = 0;
  std::chrono::system_clock::now();
  v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v153 = a3;
  v155 = v18;
  v159 = sub_2396CE3A4(a2, a3, **(_DWORD **)(v7 + 48), a6, (uint64_t)&v167, v18, (int *)&v166 + 1, 1, (float *)&v166, 1, (float *)&v165, 1);
  v20.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (**(_QWORD **)(v7 + 96))
  {
    rep = v20.__d_.__rep_;
    v22 = *(pthread_mutex_t **)(v7 + 80);
    sub_2397A1694(v22);
    v23 = **(_QWORD **)(v7 + 96);
    v24 = (double)(rep - v19.__d_.__rep_) / 1000000.0 + *(float *)(v23 + 12);
    *(float *)(v23 + 8) = *(float *)&v166 + *(float *)(v23 + 8);
    *(float *)(v23 + 12) = v24;
    v25 = (float32x2_t)__PAIR64__(LODWORD(v159), v165);
    *(float *)(v23 + 16) = *(float *)(v23 + 16) + (float)HIDWORD(v166);
    *(float64x2_t *)(v23 + 24) = vaddq_f64(*(float64x2_t *)(v23 + 24), vcvtq_f64_f32(v25));
    ++*(_DWORD *)(v23 + 4);
    **(_QWORD **)(v7 + 88) += v17;
    sub_2397A16B4(v22);
  }
  if (fabsf(v159 + 1.0) < 0.00001)
  {
    v26 = *(unsigned int **)(v7 + 16);
    LOBYTE(v164[0]) = 0;
    sub_2395BFE44(v26, v164);
    goto LABEL_137;
  }
  v152 = a2;
  v27 = *a5;
  v28 = (_QWORD *)(*a5 + 56);
  v29 = **(unsigned int **)(v7 + 56);
  v30 = *(_QWORD *)(*a5 + 64);
  v31 = (v30 - *v28) >> 4;
  v32 = v29 - v31;
  v158 = v17;
  if (v29 <= v31)
  {
    if (v29 < v31)
    {
      v33 = *v28 + 16 * v29;
      while (v30 != v33)
      {
        v34 = *(std::__shared_weak_count **)(v30 - 8);
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(p_shared_owners);
          while (__stlxr(v36 - 1, p_shared_owners));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v34->__on_zero_shared)(v34, v32);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v30 -= 16;
      }
      *(_QWORD *)(v27 + 64) = v33;
      v17 = v158;
    }
  }
  else
  {
    sub_23942D080((uint64_t)v28, v32);
  }
  v38 = *(_DWORD **)(v7 + 56);
  v39 = *v38;
  if ((_DWORD)v39)
  {
    v40 = 4 * v39;
    v41 = (char *)operator new(4 * v39);
    bzero(v41, v40);
    if (!v153)
      goto LABEL_35;
LABEL_33:
    v42 = v17;
    v43 = v18;
    do
    {
      v44 = *v43++;
      ++*(_DWORD *)&v41[4 * v44];
      --v42;
    }
    while (v42);
    goto LABEL_35;
  }
  v41 = 0;
  if (v153)
    goto LABEL_33;
LABEL_35:
  LODWORD(v45) = *v38;
  if (!*v38)
    goto LABEL_135;
  v46 = 0;
  v160 = v7;
  v154 = v41;
  do
  {
    v48 = *(_DWORD *)&v41[4 * v46];
    if (v48)
    {
      v49 = a7;
      v50 = a6;
      v51 = v28;
      v53 = v48 >= 2 * (int)v45 && **(_DWORD **)(v7 + 64) > a4;
      v54 = *(unsigned int **)(v7 + 48);
      v55 = *a5;
      v56 = *(unsigned __int8 **)(v7 + 112);
      v57 = operator new(0x90uLL);
      v57[1] = 0;
      v57[2] = 0;
      *v57 = &off_250ADFCE0;
      v58 = v53;
      v59 = sub_2395CD93C((uint64_t)(v57 + 3), *v54, v53, v55, *v56);
      v28 = v51;
      v62 = (uint64_t *)(*v51 + 16 * v46);
      v63 = (std::__shared_weak_count *)v62[1];
      *v62 = v59;
      v62[1] = (uint64_t)v57;
      a6 = v50;
      a7 = v49;
      v41 = v154;
      v18 = v155;
      if (!v63)
        goto LABEL_49;
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
        v66 = v158;
        v67 = **(unsigned int **)(v160 + 48);
        v68 = 16 * v46;
        if (!(_DWORD)v67)
          goto LABEL_77;
      }
      else
      {
LABEL_49:
        v66 = v158;
        v67 = **(unsigned int **)(v160 + 48);
        v68 = 16 * v46;
        if (!(_DWORD)v67)
          goto LABEL_77;
      }
      v69 = (v67 * v46);
      v70 = *(int32x4_t **)(*(_QWORD *)(*v28 + v68) + 32);
      if (**(_BYTE **)(v160 + 40))
      {
        v71 = *((_QWORD *)&v168 + 1);
        if (v67 < 8
          || __CFADD__((_DWORD)v69, v67 - 1)
          || ((unint64_t)v70 < *((_QWORD *)&v168 + 1) + v67 + v69
            ? (v72 = *((_QWORD *)&v168 + 1) + v69 >= (unint64_t)v70 + 4 * v67)
            : (v72 = 1),
              !v72))
        {
          v73 = 0;
LABEL_66:
          v78 = v73 + v67 * v46;
          v79 = &v70->i32[v73];
          v80 = v67 - v73;
          do
          {
            v60.i8[0] = *(_BYTE *)(v71 + v78);
            v60.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v60.f32)).u64[0];
            v60.f32[0] = (float)v60.i32[0];
            *v79++ = v60.i32[0];
            ++v78;
            --v80;
          }
          while (v80);
          goto LABEL_77;
        }
        if (v67 >= 0x10)
        {
          v73 = v67 & 0xFFFFFFF0;
          v95 = v67 * v46;
          v96 = v73;
          v97 = *(float32x4_t **)(*(_QWORD *)(*v28 + v68) + 32);
          do
          {
            v98 = *(int8x16_t *)(v71 + v95);
            v99 = (int8x8_t)vextq_s8(v98, v98, 8uLL).u64[0];
            v100 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v99, *(int8x8_t *)v98.i8), 8uLL), 8uLL)));
            v61 = vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v99, *(int8x8_t *)v98.i8), 8uLL), 8uLL));
            *v97 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v98.i8, *(int8x8_t *)v98.i8), 8uLL), 8uLL)));
            v97[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v98.i8, *(int8x8_t *)v98.i8), 8uLL), 8uLL)));
            v60 = vcvtq_f32_s32(v61);
            v97[2] = v100;
            v97[3] = v60;
            v97 += 4;
            v95 += 16;
            v96 -= 16;
          }
          while (v96);
          if (v73 == v67)
            goto LABEL_77;
          if ((v67 & 8) == 0)
            goto LABEL_66;
        }
        else
        {
          v73 = 0;
        }
        v101 = v73;
        v73 = v67 & 0xFFFFFFF8;
        v102 = (int32x4_t *)((char *)v70 + 4 * v101);
        v103 = v101 - v73;
        v104 = v101 + v67 * v46;
        do
        {
          v105 = *(int8x8_t *)(v71 + v104);
          v61 = (int32x4_t)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v105, v105), 8uLL), 8uLL)));
          v60 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v105, v105), 8uLL), 8uLL)));
          *v102 = v61;
          v102[1] = (int32x4_t)v60;
          v102 += 2;
          v104 += 8;
          v103 += 8;
        }
        while (v103);
        if (v73 == v67)
          goto LABEL_77;
        goto LABEL_66;
      }
      v81 = v167;
      if (v67 < 0x10
        || __CFADD__((_DWORD)v69, v67 - 1)
        || (unint64_t)((unint64_t)v70 - v167 + -4 * v69) < 0x20)
      {
        v82 = 0;
      }
      else
      {
        v82 = v67 & 0xFFFFFFF8;
        v91 = v70 + 1;
        v92 = v67 * v46;
        v93 = v82;
        do
        {
          v94 = (_OWORD *)(v81 + 4 * v92);
          v60 = *(float32x4_t *)v94;
          v61 = *((int32x4_t *)v94 + 1);
          v91[-1] = *(int32x4_t *)v94;
          *v91 = v61;
          v91 += 2;
          v92 += 8;
          v93 -= 8;
        }
        while (v93);
        if (v82 == v67)
          goto LABEL_77;
      }
      v83 = &v70->i32[v82];
      v84 = v82 + v67 * v46;
      v85 = v67 - v82;
      do
      {
        v60.i32[0] = *(_DWORD *)(v81 + 4 * v84);
        *v83++ = v60.i32[0];
        ++v84;
        --v85;
      }
      while (v85);
LABEL_77:
      if ((v58 & 1) == 0)
      {
        *(_DWORD *)(*(_QWORD *)(*v28 + v68) + 8) = 1065353216;
        if (**(_BYTE **)(v160 + 72) && v153 != 0)
        {
          v87 = 0;
          do
          {
            if (v46 == v155[v87])
            {
              v88 = *(_QWORD *)(*v28 + v68);
              if (!*(_DWORD *)(v88 + 4))
              {
                v89 = *(unsigned int **)(v160 + 104);
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 + 1, v89));
                v88 = *(_QWORD *)(*v28 + v68);
                *(_DWORD *)(v88 + 4) = v90;
              }
              sub_2395CAD54(v88, 0, (uint64_t)&a6[3 * v87], *(_DWORD *)(a7 + 4 * v87), 1, 0, 0, *(double *)v60.i64, (int8x16_t)v61);
            }
            ++v87;
          }
          while (v87 != v66);
        }
      }
      goto LABEL_37;
    }
    v74 = (_QWORD *)(*v28 + 16 * v46);
    v75 = (std::__shared_weak_count *)v74[1];
    *v74 = 0;
    v74[1] = 0;
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
LABEL_37:
    ++v46;
    v7 = v160;
    v47 = *(_DWORD **)(v160 + 56);
    v45 = *v47;
  }
  while (v46 < v45);
  if (!(_DWORD)v45)
    goto LABEL_135;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  do
  {
    if (v107 < v153)
    {
      v109 = (uint64_t)&a6[3 * v107 + 1];
      v110 = v107;
      v111 = (_DWORD *)(a7 + v110 * 4);
      v112 = &v18[v110];
      v113 = v158 - v107;
      do
      {
        v114 = *v112;
        if (v106 == v114)
        {
          v115 = &a6[3 * v108];
          v116 = *v115;
          v117 = v115[1];
          *v115 = 0;
          v115[1] = 0;
          v118 = *((_DWORD *)v115 + 4);
          *((_DWORD *)v115 + 4) = 0;
          *v115 = *(_QWORD *)(v109 - 8);
          v115[1] = *(_QWORD *)v109;
          *((_DWORD *)v115 + 4) = *(_DWORD *)(v109 + 8);
          *(_QWORD *)(v109 - 8) = v116;
          *(_QWORD *)v109 = v117;
          v119 = v108;
          LODWORD(v116) = v18[v119];
          *(_DWORD *)(v109 + 8) = v118;
          v18[v119] = v114;
          *v112 = v116;
          if (**(_BYTE **)(v160 + 72))
          {
            v120 = 4 * v108;
            v121 = *(_DWORD *)(a7 + v120);
            *(_DWORD *)(a7 + v120) = *v111;
            *v111 = v121;
          }
          ++v108;
        }
        v109 += 24;
        ++v111;
        ++v112;
        --v113;
      }
      while (v113);
      v47 = *(_DWORD **)(v160 + 56);
      LODWORD(v45) = *v47;
    }
    v107 += *(_DWORD *)&v41[4 * v106++];
  }
  while (v106 < v45);
  if (!(_DWORD)v45)
    goto LABEL_136;
  if (v45 < 8)
  {
    v122 = 0;
    v123 = 0.0;
    goto LABEL_119;
  }
  v122 = v45 & 0xFFFFFFF8;
  v124 = v41 + 16;
  v123 = 0.0;
  v125 = v122;
  do
  {
    v126 = *((_OWORD *)v124 - 1);
    v127.i64[0] = DWORD2(v126);
    v127.i64[1] = HIDWORD(v126);
    v128 = vcvtq_f64_u64(v127);
    v127.i64[0] = v126;
    v127.i64[1] = DWORD1(v126);
    v129 = vcvtq_f64_u64(v127);
    v127.i64[0] = *((_QWORD *)v124 + 1);
    v127.i64[1] = HIDWORD(*(_OWORD *)v124);
    v130 = vcvtq_f64_u64(v127);
    v127.i64[0] = *(_OWORD *)v124;
    v127.i64[1] = HIDWORD(*(_QWORD *)v124);
    v131 = vcvtq_f64_u64(v127);
    v123 = v123
         + v129.f64[0]
         + v129.f64[1]
         + v128.f64[0]
         + v128.f64[1]
         + v131.f64[0]
         + v131.f64[1]
         + v130.f64[0]
         + v130.f64[1];
    v124 += 32;
    v125 -= 8;
  }
  while (v125);
  if (v122 != v45)
  {
LABEL_119:
    v132 = (unsigned int *)&v41[4 * v122];
    v133 = v45 - v122;
    do
    {
      v134 = *v132++;
      v123 = v123 + (double)v134;
      --v133;
    }
    while (v133);
  }
  v135 = 4 * v45;
  v136 = operator new(v135);
  bzero(v136, v135);
  if (*v47)
  {
    v137 = 0;
    v138 = (uint64_t *)*v28;
    v139 = *((_DWORD *)v152 + 2);
    do
    {
      v141 = *v138;
      if (*v138)
      {
        LODWORD(v141) = vcvtad_u64_f64((double)(*(_DWORD *)&v154[4 * v137] * v139) / v123);
        if (v141 <= 1)
          LODWORD(v141) = 1;
      }
      *((_DWORD *)v136 + v137++) = v141;
      v140 = *v47;
      v138 += 2;
    }
    while (v137 < v140);
    if (*v47)
    {
      v142 = 0;
      v143 = 0;
      v144 = 0;
      v145 = (int *)v154;
      do
      {
        v147 = (_QWORD *)(*v28 + v142);
        if (*v147)
        {
          v148 = v152[1];
          v164[0] = *v152;
          v164[1] = v148;
          DWORD2(v164[0]) = *((_DWORD *)v136 + v143);
          v149 = *(_QWORD *)v160;
          v150 = *(_QWORD **)(v160 + 32);
          v163 = a4 + 1;
          v151 = a7 + 4 * v144;
          if (!a7)
            v151 = 0;
          v161 = v151;
          v162 = &a6[3 * v144];
          sub_2395CF380(v149, v150, v164, v145, (int *)&v163, v147, (uint64_t *)&v162, &v161);
          v140 = **(unsigned int **)(v160 + 56);
        }
        v146 = *v145++;
        v144 += v146;
        ++v143;
        v142 += 16;
      }
      while (v143 < v140);
    }
  }
  operator delete(v136);
  v41 = v154;
LABEL_135:
  if (v41)
LABEL_136:
    operator delete(v41);
LABEL_137:
  if (v18)
    operator delete(v18);
  if (*((_QWORD *)&v168 + 1))
  {
    *(_QWORD *)&v169 = *((_QWORD *)&v168 + 1);
    operator delete(*((void **)&v168 + 1));
  }
  if ((_QWORD)v167)
  {
    *((_QWORD *)&v167 + 1) = v167;
    operator delete((void *)v167);
  }
}

void sub_2395CF260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, void *a17)
{
  uint64_t v17;

  operator delete(__p);
  if (a17)
  {
    operator delete(a17);
    sub_2394FCFA8(v17 - 160);
    _Unwind_Resume(a1);
  }
  sub_2394FCFA8(v17 - 160);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395CF380(uint64_t a1, _QWORD *a2, __int128 *a3, _DWORD *a4, int *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8)
{
  _QWORD *v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *result;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[24];
  _BYTE *v52;
  _QWORD v53[3];
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 272))
    sub_239EC0B40(a1, (uint64_t)a2);
  v15 = (_QWORD *)a2[3];
  if (v15)
  {
    if (v15 == a2)
    {
      v54 = v53;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v53);
    }
    else
    {
      v54 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
    }
  }
  else
  {
    v54 = 0;
  }
  v16 = a3[1];
  v55 = *a3;
  v56 = v16;
  v17 = *a5;
  LODWORD(v57) = *a4;
  HIDWORD(v57) = v17;
  v18 = a6[1];
  *(_QWORD *)&v58 = *a6;
  *((_QWORD *)&v58 + 1) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *a8;
  v59 = *a7;
  v60 = v21;
  v22 = *(unsigned int **)(a1 + 272);
  v23 = (uint64_t)v54;
  if (!v54)
    goto LABEL_13;
  if (v54 != v53)
  {
    v23 = (*(uint64_t (**)(void))(*v54 + 16))();
LABEL_13:
    v44 = (_QWORD *)v23;
    goto LABEL_15;
  }
  v44 = v43;
  (*(void (**)(_QWORD *, _QWORD *))(v53[0] + 24))(v53, v43);
LABEL_15:
  v45 = v55;
  v46 = v56;
  v47 = v57;
  v48 = v58;
  if (*((_QWORD *)&v58 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = v59;
  v27 = v60;
  v49 = v59;
  v50 = v60;
  v52 = 0;
  v28 = operator new(0x70uLL);
  v29 = v28;
  *v28 = &off_250ADFDF0;
  if (v44)
  {
    if (v44 == v43)
    {
      v28[4] = v28 + 1;
      (*(void (**)(_QWORD *))(v43[0] + 24))(v43);
      v26 = v49;
      v27 = v50;
    }
    else
    {
      v28[4] = v44;
      v44 = 0;
    }
  }
  else
  {
    v28[4] = 0;
  }
  v30 = v46;
  *(_OWORD *)(v29 + 5) = v45;
  *(_OWORD *)(v29 + 7) = v30;
  v29[9] = v47;
  *((_OWORD *)v29 + 5) = v48;
  v48 = 0uLL;
  v29[12] = v26;
  v29[13] = v27;
  v52 = v29;
  sub_2394D0CC4(v22, (uint64_t)v51);
  v31 = v52;
  if (v52 == v51)
  {
    v32 = 4;
    v31 = v51;
    goto LABEL_27;
  }
  if (v52)
  {
    v32 = 5;
LABEL_27:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (!*((_QWORD *)&v48 + 1))
    goto LABEL_32;
  v34 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
  {
LABEL_32:
    v36 = v44;
    if (v44 != v43)
      goto LABEL_33;
LABEL_36:
    v37 = 4;
    v36 = v43;
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  v36 = v44;
  if (v44 == v43)
    goto LABEL_36;
LABEL_33:
  if (v36)
  {
    v37 = 5;
LABEL_37:
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      result = v54;
      if (v54 != v53)
        goto LABEL_43;
LABEL_46:
      v42 = 4;
      result = v53;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v42))();
    }
  }
  result = v54;
  if (v54 == v53)
    goto LABEL_46;
LABEL_43:
  if (!result)
    return result;
  v42 = 5;
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v42))();
}

void sub_2395CF6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2395CF77C(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_250ADFDF0;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[11];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    v6 = (_QWORD *)a1[4];
    if (v6 != v2)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_2395CF824(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_250ADFDF0;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[11];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (_QWORD *)a1[4];
    if (v6 != v2)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v6 = (_QWORD *)a1[4];
    if (v6 != v2)
    {
LABEL_6:
      if (!v6)
        goto LABEL_11;
      v7 = 5;
LABEL_10:
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
      JUMPOUT(0x23B83E31CLL);
    }
  }
  v7 = 4;
  v6 = v2;
  goto LABEL_10;
}

char *sub_2395CF8DC(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (char *)operator new(0x70uLL);
  *(_QWORD *)v2 = &off_250ADFDF0;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 88);
  *((_QWORD *)v2 + 10) = *(_QWORD *)(a1 + 80);
  *((_QWORD *)v2 + 11) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_OWORD *)v2 + 6) = *(_OWORD *)(a1 + 96);
  return v2;
}

void sub_2395CF990(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395CF9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)a2 = &off_250ADFDF0;
  v4 = a2 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
      *(_QWORD *)(a2 + 32) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  v6 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 76);
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 88) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  return result;
}

uint64_t sub_2395CFA64(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t result;

  v2 = a1 + 8;
  v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    result = *(_QWORD *)(a1 + 32);
    if (result != v2)
      goto LABEL_6;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  result = *(_QWORD *)(a1 + 32);
  if (result == v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
LABEL_6:
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_2395CFB1C(char *__p)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = __p + 8;
  v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 11);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    v6 = (char *)*((_QWORD *)__p + 4);
    if (v6 != v2)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = (char *)*((_QWORD *)__p + 4);
  if (v6 == v2)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

void sub_2395CFBB8(uint64_t a1)
{
  sub_2395CFBE4(a1 + 8, a1 + 40);
}

void sub_2395CFBE4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *(std::__shared_weak_count **)(a2 + 48);
  v8 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_2394172E0();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  if (v8)
  {
    v6 = (unint64_t *)&v8->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2395CFCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    sub_239EBED3C();
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2395CFCC4(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_250ADFE38;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[11];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    v6 = (_QWORD *)a1[4];
    if (v6 != v2)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

